// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package quicksight

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type TemplateMaximumLabelType struct {
	// The visibility of the maximum label.
	Visibility interface{} `pulumi:"visibility"`
}

// TemplateMaximumLabelTypeInput is an input type that accepts TemplateMaximumLabelTypeArgs and TemplateMaximumLabelTypeOutput values.
// You can construct a concrete instance of `TemplateMaximumLabelTypeInput` via:
//
//	TemplateMaximumLabelTypeArgs{...}
type TemplateMaximumLabelTypeInput interface {
	pulumi.Input

	ToTemplateMaximumLabelTypeOutput() TemplateMaximumLabelTypeOutput
	ToTemplateMaximumLabelTypeOutputWithContext(context.Context) TemplateMaximumLabelTypeOutput
}

type TemplateMaximumLabelTypeArgs struct {
	// The visibility of the maximum label.
	Visibility pulumi.Input `pulumi:"visibility"`
}

func (TemplateMaximumLabelTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateMaximumLabelType)(nil)).Elem()
}

func (i TemplateMaximumLabelTypeArgs) ToTemplateMaximumLabelTypeOutput() TemplateMaximumLabelTypeOutput {
	return i.ToTemplateMaximumLabelTypeOutputWithContext(context.Background())
}

func (i TemplateMaximumLabelTypeArgs) ToTemplateMaximumLabelTypeOutputWithContext(ctx context.Context) TemplateMaximumLabelTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateMaximumLabelTypeOutput)
}

func (i TemplateMaximumLabelTypeArgs) ToTemplateMaximumLabelTypePtrOutput() TemplateMaximumLabelTypePtrOutput {
	return i.ToTemplateMaximumLabelTypePtrOutputWithContext(context.Background())
}

func (i TemplateMaximumLabelTypeArgs) ToTemplateMaximumLabelTypePtrOutputWithContext(ctx context.Context) TemplateMaximumLabelTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateMaximumLabelTypeOutput).ToTemplateMaximumLabelTypePtrOutputWithContext(ctx)
}

// TemplateMaximumLabelTypePtrInput is an input type that accepts TemplateMaximumLabelTypeArgs, TemplateMaximumLabelTypePtr and TemplateMaximumLabelTypePtrOutput values.
// You can construct a concrete instance of `TemplateMaximumLabelTypePtrInput` via:
//
//	        TemplateMaximumLabelTypeArgs{...}
//
//	or:
//
//	        nil
type TemplateMaximumLabelTypePtrInput interface {
	pulumi.Input

	ToTemplateMaximumLabelTypePtrOutput() TemplateMaximumLabelTypePtrOutput
	ToTemplateMaximumLabelTypePtrOutputWithContext(context.Context) TemplateMaximumLabelTypePtrOutput
}

type templateMaximumLabelTypePtrType TemplateMaximumLabelTypeArgs

func TemplateMaximumLabelTypePtr(v *TemplateMaximumLabelTypeArgs) TemplateMaximumLabelTypePtrInput {
	return (*templateMaximumLabelTypePtrType)(v)
}

func (*templateMaximumLabelTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateMaximumLabelType)(nil)).Elem()
}

func (i *templateMaximumLabelTypePtrType) ToTemplateMaximumLabelTypePtrOutput() TemplateMaximumLabelTypePtrOutput {
	return i.ToTemplateMaximumLabelTypePtrOutputWithContext(context.Background())
}

func (i *templateMaximumLabelTypePtrType) ToTemplateMaximumLabelTypePtrOutputWithContext(ctx context.Context) TemplateMaximumLabelTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateMaximumLabelTypePtrOutput)
}

type TemplateMaximumLabelTypeOutput struct{ *pulumi.OutputState }

func (TemplateMaximumLabelTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateMaximumLabelType)(nil)).Elem()
}

func (o TemplateMaximumLabelTypeOutput) ToTemplateMaximumLabelTypeOutput() TemplateMaximumLabelTypeOutput {
	return o
}

func (o TemplateMaximumLabelTypeOutput) ToTemplateMaximumLabelTypeOutputWithContext(ctx context.Context) TemplateMaximumLabelTypeOutput {
	return o
}

func (o TemplateMaximumLabelTypeOutput) ToTemplateMaximumLabelTypePtrOutput() TemplateMaximumLabelTypePtrOutput {
	return o.ToTemplateMaximumLabelTypePtrOutputWithContext(context.Background())
}

func (o TemplateMaximumLabelTypeOutput) ToTemplateMaximumLabelTypePtrOutputWithContext(ctx context.Context) TemplateMaximumLabelTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateMaximumLabelType) *TemplateMaximumLabelType {
		return &v
	}).(TemplateMaximumLabelTypePtrOutput)
}

// The visibility of the maximum label.
func (o TemplateMaximumLabelTypeOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateMaximumLabelType) interface{} { return v.Visibility }).(pulumi.AnyOutput)
}

type TemplateMaximumLabelTypePtrOutput struct{ *pulumi.OutputState }

func (TemplateMaximumLabelTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateMaximumLabelType)(nil)).Elem()
}

func (o TemplateMaximumLabelTypePtrOutput) ToTemplateMaximumLabelTypePtrOutput() TemplateMaximumLabelTypePtrOutput {
	return o
}

func (o TemplateMaximumLabelTypePtrOutput) ToTemplateMaximumLabelTypePtrOutputWithContext(ctx context.Context) TemplateMaximumLabelTypePtrOutput {
	return o
}

func (o TemplateMaximumLabelTypePtrOutput) Elem() TemplateMaximumLabelTypeOutput {
	return o.ApplyT(func(v *TemplateMaximumLabelType) TemplateMaximumLabelType {
		if v != nil {
			return *v
		}
		var ret TemplateMaximumLabelType
		return ret
	}).(TemplateMaximumLabelTypeOutput)
}

// The visibility of the maximum label.
func (o TemplateMaximumLabelTypePtrOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateMaximumLabelType) interface{} {
		if v == nil {
			return nil
		}
		return v.Visibility
	}).(pulumi.AnyOutput)
}

type TemplateMaximumMinimumComputation struct {
	// The ID for a computation.
	ComputationId string `pulumi:"computationId"`
	// The name of a computation.
	Name *string `pulumi:"name"`
	// The time field that is used in a computation.
	Time *TemplateDimensionField `pulumi:"time"`
	// The type of computation. Choose one of the following options:
	//
	// - MAXIMUM: A maximum computation.
	// - MINIMUM: A minimum computation.
	Type TemplateMaximumMinimumComputationType `pulumi:"type"`
	// The value field that is used in a computation.
	Value *TemplateMeasureField `pulumi:"value"`
}

// TemplateMaximumMinimumComputationInput is an input type that accepts TemplateMaximumMinimumComputationArgs and TemplateMaximumMinimumComputationOutput values.
// You can construct a concrete instance of `TemplateMaximumMinimumComputationInput` via:
//
//	TemplateMaximumMinimumComputationArgs{...}
type TemplateMaximumMinimumComputationInput interface {
	pulumi.Input

	ToTemplateMaximumMinimumComputationOutput() TemplateMaximumMinimumComputationOutput
	ToTemplateMaximumMinimumComputationOutputWithContext(context.Context) TemplateMaximumMinimumComputationOutput
}

type TemplateMaximumMinimumComputationArgs struct {
	// The ID for a computation.
	ComputationId pulumi.StringInput `pulumi:"computationId"`
	// The name of a computation.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The time field that is used in a computation.
	Time TemplateDimensionFieldPtrInput `pulumi:"time"`
	// The type of computation. Choose one of the following options:
	//
	// - MAXIMUM: A maximum computation.
	// - MINIMUM: A minimum computation.
	Type TemplateMaximumMinimumComputationTypeInput `pulumi:"type"`
	// The value field that is used in a computation.
	Value TemplateMeasureFieldPtrInput `pulumi:"value"`
}

func (TemplateMaximumMinimumComputationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateMaximumMinimumComputation)(nil)).Elem()
}

func (i TemplateMaximumMinimumComputationArgs) ToTemplateMaximumMinimumComputationOutput() TemplateMaximumMinimumComputationOutput {
	return i.ToTemplateMaximumMinimumComputationOutputWithContext(context.Background())
}

func (i TemplateMaximumMinimumComputationArgs) ToTemplateMaximumMinimumComputationOutputWithContext(ctx context.Context) TemplateMaximumMinimumComputationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateMaximumMinimumComputationOutput)
}

func (i TemplateMaximumMinimumComputationArgs) ToTemplateMaximumMinimumComputationPtrOutput() TemplateMaximumMinimumComputationPtrOutput {
	return i.ToTemplateMaximumMinimumComputationPtrOutputWithContext(context.Background())
}

func (i TemplateMaximumMinimumComputationArgs) ToTemplateMaximumMinimumComputationPtrOutputWithContext(ctx context.Context) TemplateMaximumMinimumComputationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateMaximumMinimumComputationOutput).ToTemplateMaximumMinimumComputationPtrOutputWithContext(ctx)
}

// TemplateMaximumMinimumComputationPtrInput is an input type that accepts TemplateMaximumMinimumComputationArgs, TemplateMaximumMinimumComputationPtr and TemplateMaximumMinimumComputationPtrOutput values.
// You can construct a concrete instance of `TemplateMaximumMinimumComputationPtrInput` via:
//
//	        TemplateMaximumMinimumComputationArgs{...}
//
//	or:
//
//	        nil
type TemplateMaximumMinimumComputationPtrInput interface {
	pulumi.Input

	ToTemplateMaximumMinimumComputationPtrOutput() TemplateMaximumMinimumComputationPtrOutput
	ToTemplateMaximumMinimumComputationPtrOutputWithContext(context.Context) TemplateMaximumMinimumComputationPtrOutput
}

type templateMaximumMinimumComputationPtrType TemplateMaximumMinimumComputationArgs

func TemplateMaximumMinimumComputationPtr(v *TemplateMaximumMinimumComputationArgs) TemplateMaximumMinimumComputationPtrInput {
	return (*templateMaximumMinimumComputationPtrType)(v)
}

func (*templateMaximumMinimumComputationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateMaximumMinimumComputation)(nil)).Elem()
}

func (i *templateMaximumMinimumComputationPtrType) ToTemplateMaximumMinimumComputationPtrOutput() TemplateMaximumMinimumComputationPtrOutput {
	return i.ToTemplateMaximumMinimumComputationPtrOutputWithContext(context.Background())
}

func (i *templateMaximumMinimumComputationPtrType) ToTemplateMaximumMinimumComputationPtrOutputWithContext(ctx context.Context) TemplateMaximumMinimumComputationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateMaximumMinimumComputationPtrOutput)
}

type TemplateMaximumMinimumComputationOutput struct{ *pulumi.OutputState }

func (TemplateMaximumMinimumComputationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateMaximumMinimumComputation)(nil)).Elem()
}

func (o TemplateMaximumMinimumComputationOutput) ToTemplateMaximumMinimumComputationOutput() TemplateMaximumMinimumComputationOutput {
	return o
}

func (o TemplateMaximumMinimumComputationOutput) ToTemplateMaximumMinimumComputationOutputWithContext(ctx context.Context) TemplateMaximumMinimumComputationOutput {
	return o
}

func (o TemplateMaximumMinimumComputationOutput) ToTemplateMaximumMinimumComputationPtrOutput() TemplateMaximumMinimumComputationPtrOutput {
	return o.ToTemplateMaximumMinimumComputationPtrOutputWithContext(context.Background())
}

func (o TemplateMaximumMinimumComputationOutput) ToTemplateMaximumMinimumComputationPtrOutputWithContext(ctx context.Context) TemplateMaximumMinimumComputationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateMaximumMinimumComputation) *TemplateMaximumMinimumComputation {
		return &v
	}).(TemplateMaximumMinimumComputationPtrOutput)
}

// The ID for a computation.
func (o TemplateMaximumMinimumComputationOutput) ComputationId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateMaximumMinimumComputation) string { return v.ComputationId }).(pulumi.StringOutput)
}

// The name of a computation.
func (o TemplateMaximumMinimumComputationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateMaximumMinimumComputation) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The time field that is used in a computation.
func (o TemplateMaximumMinimumComputationOutput) Time() TemplateDimensionFieldPtrOutput {
	return o.ApplyT(func(v TemplateMaximumMinimumComputation) *TemplateDimensionField { return v.Time }).(TemplateDimensionFieldPtrOutput)
}

// The type of computation. Choose one of the following options:
//
// - MAXIMUM: A maximum computation.
// - MINIMUM: A minimum computation.
func (o TemplateMaximumMinimumComputationOutput) Type() TemplateMaximumMinimumComputationTypeOutput {
	return o.ApplyT(func(v TemplateMaximumMinimumComputation) TemplateMaximumMinimumComputationType { return v.Type }).(TemplateMaximumMinimumComputationTypeOutput)
}

// The value field that is used in a computation.
func (o TemplateMaximumMinimumComputationOutput) Value() TemplateMeasureFieldPtrOutput {
	return o.ApplyT(func(v TemplateMaximumMinimumComputation) *TemplateMeasureField { return v.Value }).(TemplateMeasureFieldPtrOutput)
}

type TemplateMaximumMinimumComputationPtrOutput struct{ *pulumi.OutputState }

func (TemplateMaximumMinimumComputationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateMaximumMinimumComputation)(nil)).Elem()
}

func (o TemplateMaximumMinimumComputationPtrOutput) ToTemplateMaximumMinimumComputationPtrOutput() TemplateMaximumMinimumComputationPtrOutput {
	return o
}

func (o TemplateMaximumMinimumComputationPtrOutput) ToTemplateMaximumMinimumComputationPtrOutputWithContext(ctx context.Context) TemplateMaximumMinimumComputationPtrOutput {
	return o
}

func (o TemplateMaximumMinimumComputationPtrOutput) Elem() TemplateMaximumMinimumComputationOutput {
	return o.ApplyT(func(v *TemplateMaximumMinimumComputation) TemplateMaximumMinimumComputation {
		if v != nil {
			return *v
		}
		var ret TemplateMaximumMinimumComputation
		return ret
	}).(TemplateMaximumMinimumComputationOutput)
}

// The ID for a computation.
func (o TemplateMaximumMinimumComputationPtrOutput) ComputationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateMaximumMinimumComputation) *string {
		if v == nil {
			return nil
		}
		return &v.ComputationId
	}).(pulumi.StringPtrOutput)
}

// The name of a computation.
func (o TemplateMaximumMinimumComputationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateMaximumMinimumComputation) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The time field that is used in a computation.
func (o TemplateMaximumMinimumComputationPtrOutput) Time() TemplateDimensionFieldPtrOutput {
	return o.ApplyT(func(v *TemplateMaximumMinimumComputation) *TemplateDimensionField {
		if v == nil {
			return nil
		}
		return v.Time
	}).(TemplateDimensionFieldPtrOutput)
}

// The type of computation. Choose one of the following options:
//
// - MAXIMUM: A maximum computation.
// - MINIMUM: A minimum computation.
func (o TemplateMaximumMinimumComputationPtrOutput) Type() TemplateMaximumMinimumComputationTypePtrOutput {
	return o.ApplyT(func(v *TemplateMaximumMinimumComputation) *TemplateMaximumMinimumComputationType {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(TemplateMaximumMinimumComputationTypePtrOutput)
}

// The value field that is used in a computation.
func (o TemplateMaximumMinimumComputationPtrOutput) Value() TemplateMeasureFieldPtrOutput {
	return o.ApplyT(func(v *TemplateMaximumMinimumComputation) *TemplateMeasureField {
		if v == nil {
			return nil
		}
		return v.Value
	}).(TemplateMeasureFieldPtrOutput)
}

type TemplateMeasureField struct {
	// The calculated measure field only used in pivot tables.
	CalculatedMeasureField *TemplateCalculatedMeasureField `pulumi:"calculatedMeasureField"`
	// The measure type field with categorical type columns.
	CategoricalMeasureField *TemplateCategoricalMeasureField `pulumi:"categoricalMeasureField"`
	// The measure type field with date type columns.
	DateMeasureField *TemplateDateMeasureField `pulumi:"dateMeasureField"`
	// The measure type field with numerical type columns.
	NumericalMeasureField *TemplateNumericalMeasureField `pulumi:"numericalMeasureField"`
}

// TemplateMeasureFieldInput is an input type that accepts TemplateMeasureFieldArgs and TemplateMeasureFieldOutput values.
// You can construct a concrete instance of `TemplateMeasureFieldInput` via:
//
//	TemplateMeasureFieldArgs{...}
type TemplateMeasureFieldInput interface {
	pulumi.Input

	ToTemplateMeasureFieldOutput() TemplateMeasureFieldOutput
	ToTemplateMeasureFieldOutputWithContext(context.Context) TemplateMeasureFieldOutput
}

type TemplateMeasureFieldArgs struct {
	// The calculated measure field only used in pivot tables.
	CalculatedMeasureField TemplateCalculatedMeasureFieldPtrInput `pulumi:"calculatedMeasureField"`
	// The measure type field with categorical type columns.
	CategoricalMeasureField TemplateCategoricalMeasureFieldPtrInput `pulumi:"categoricalMeasureField"`
	// The measure type field with date type columns.
	DateMeasureField TemplateDateMeasureFieldPtrInput `pulumi:"dateMeasureField"`
	// The measure type field with numerical type columns.
	NumericalMeasureField TemplateNumericalMeasureFieldPtrInput `pulumi:"numericalMeasureField"`
}

func (TemplateMeasureFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateMeasureField)(nil)).Elem()
}

func (i TemplateMeasureFieldArgs) ToTemplateMeasureFieldOutput() TemplateMeasureFieldOutput {
	return i.ToTemplateMeasureFieldOutputWithContext(context.Background())
}

func (i TemplateMeasureFieldArgs) ToTemplateMeasureFieldOutputWithContext(ctx context.Context) TemplateMeasureFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateMeasureFieldOutput)
}

func (i TemplateMeasureFieldArgs) ToTemplateMeasureFieldPtrOutput() TemplateMeasureFieldPtrOutput {
	return i.ToTemplateMeasureFieldPtrOutputWithContext(context.Background())
}

func (i TemplateMeasureFieldArgs) ToTemplateMeasureFieldPtrOutputWithContext(ctx context.Context) TemplateMeasureFieldPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateMeasureFieldOutput).ToTemplateMeasureFieldPtrOutputWithContext(ctx)
}

// TemplateMeasureFieldPtrInput is an input type that accepts TemplateMeasureFieldArgs, TemplateMeasureFieldPtr and TemplateMeasureFieldPtrOutput values.
// You can construct a concrete instance of `TemplateMeasureFieldPtrInput` via:
//
//	        TemplateMeasureFieldArgs{...}
//
//	or:
//
//	        nil
type TemplateMeasureFieldPtrInput interface {
	pulumi.Input

	ToTemplateMeasureFieldPtrOutput() TemplateMeasureFieldPtrOutput
	ToTemplateMeasureFieldPtrOutputWithContext(context.Context) TemplateMeasureFieldPtrOutput
}

type templateMeasureFieldPtrType TemplateMeasureFieldArgs

func TemplateMeasureFieldPtr(v *TemplateMeasureFieldArgs) TemplateMeasureFieldPtrInput {
	return (*templateMeasureFieldPtrType)(v)
}

func (*templateMeasureFieldPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateMeasureField)(nil)).Elem()
}

func (i *templateMeasureFieldPtrType) ToTemplateMeasureFieldPtrOutput() TemplateMeasureFieldPtrOutput {
	return i.ToTemplateMeasureFieldPtrOutputWithContext(context.Background())
}

func (i *templateMeasureFieldPtrType) ToTemplateMeasureFieldPtrOutputWithContext(ctx context.Context) TemplateMeasureFieldPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateMeasureFieldPtrOutput)
}

// TemplateMeasureFieldArrayInput is an input type that accepts TemplateMeasureFieldArray and TemplateMeasureFieldArrayOutput values.
// You can construct a concrete instance of `TemplateMeasureFieldArrayInput` via:
//
//	TemplateMeasureFieldArray{ TemplateMeasureFieldArgs{...} }
type TemplateMeasureFieldArrayInput interface {
	pulumi.Input

	ToTemplateMeasureFieldArrayOutput() TemplateMeasureFieldArrayOutput
	ToTemplateMeasureFieldArrayOutputWithContext(context.Context) TemplateMeasureFieldArrayOutput
}

type TemplateMeasureFieldArray []TemplateMeasureFieldInput

func (TemplateMeasureFieldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateMeasureField)(nil)).Elem()
}

func (i TemplateMeasureFieldArray) ToTemplateMeasureFieldArrayOutput() TemplateMeasureFieldArrayOutput {
	return i.ToTemplateMeasureFieldArrayOutputWithContext(context.Background())
}

func (i TemplateMeasureFieldArray) ToTemplateMeasureFieldArrayOutputWithContext(ctx context.Context) TemplateMeasureFieldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateMeasureFieldArrayOutput)
}

type TemplateMeasureFieldOutput struct{ *pulumi.OutputState }

func (TemplateMeasureFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateMeasureField)(nil)).Elem()
}

func (o TemplateMeasureFieldOutput) ToTemplateMeasureFieldOutput() TemplateMeasureFieldOutput {
	return o
}

func (o TemplateMeasureFieldOutput) ToTemplateMeasureFieldOutputWithContext(ctx context.Context) TemplateMeasureFieldOutput {
	return o
}

func (o TemplateMeasureFieldOutput) ToTemplateMeasureFieldPtrOutput() TemplateMeasureFieldPtrOutput {
	return o.ToTemplateMeasureFieldPtrOutputWithContext(context.Background())
}

func (o TemplateMeasureFieldOutput) ToTemplateMeasureFieldPtrOutputWithContext(ctx context.Context) TemplateMeasureFieldPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateMeasureField) *TemplateMeasureField {
		return &v
	}).(TemplateMeasureFieldPtrOutput)
}

// The calculated measure field only used in pivot tables.
func (o TemplateMeasureFieldOutput) CalculatedMeasureField() TemplateCalculatedMeasureFieldPtrOutput {
	return o.ApplyT(func(v TemplateMeasureField) *TemplateCalculatedMeasureField { return v.CalculatedMeasureField }).(TemplateCalculatedMeasureFieldPtrOutput)
}

// The measure type field with categorical type columns.
func (o TemplateMeasureFieldOutput) CategoricalMeasureField() TemplateCategoricalMeasureFieldPtrOutput {
	return o.ApplyT(func(v TemplateMeasureField) *TemplateCategoricalMeasureField { return v.CategoricalMeasureField }).(TemplateCategoricalMeasureFieldPtrOutput)
}

// The measure type field with date type columns.
func (o TemplateMeasureFieldOutput) DateMeasureField() TemplateDateMeasureFieldPtrOutput {
	return o.ApplyT(func(v TemplateMeasureField) *TemplateDateMeasureField { return v.DateMeasureField }).(TemplateDateMeasureFieldPtrOutput)
}

// The measure type field with numerical type columns.
func (o TemplateMeasureFieldOutput) NumericalMeasureField() TemplateNumericalMeasureFieldPtrOutput {
	return o.ApplyT(func(v TemplateMeasureField) *TemplateNumericalMeasureField { return v.NumericalMeasureField }).(TemplateNumericalMeasureFieldPtrOutput)
}

type TemplateMeasureFieldPtrOutput struct{ *pulumi.OutputState }

func (TemplateMeasureFieldPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateMeasureField)(nil)).Elem()
}

func (o TemplateMeasureFieldPtrOutput) ToTemplateMeasureFieldPtrOutput() TemplateMeasureFieldPtrOutput {
	return o
}

func (o TemplateMeasureFieldPtrOutput) ToTemplateMeasureFieldPtrOutputWithContext(ctx context.Context) TemplateMeasureFieldPtrOutput {
	return o
}

func (o TemplateMeasureFieldPtrOutput) Elem() TemplateMeasureFieldOutput {
	return o.ApplyT(func(v *TemplateMeasureField) TemplateMeasureField {
		if v != nil {
			return *v
		}
		var ret TemplateMeasureField
		return ret
	}).(TemplateMeasureFieldOutput)
}

// The calculated measure field only used in pivot tables.
func (o TemplateMeasureFieldPtrOutput) CalculatedMeasureField() TemplateCalculatedMeasureFieldPtrOutput {
	return o.ApplyT(func(v *TemplateMeasureField) *TemplateCalculatedMeasureField {
		if v == nil {
			return nil
		}
		return v.CalculatedMeasureField
	}).(TemplateCalculatedMeasureFieldPtrOutput)
}

// The measure type field with categorical type columns.
func (o TemplateMeasureFieldPtrOutput) CategoricalMeasureField() TemplateCategoricalMeasureFieldPtrOutput {
	return o.ApplyT(func(v *TemplateMeasureField) *TemplateCategoricalMeasureField {
		if v == nil {
			return nil
		}
		return v.CategoricalMeasureField
	}).(TemplateCategoricalMeasureFieldPtrOutput)
}

// The measure type field with date type columns.
func (o TemplateMeasureFieldPtrOutput) DateMeasureField() TemplateDateMeasureFieldPtrOutput {
	return o.ApplyT(func(v *TemplateMeasureField) *TemplateDateMeasureField {
		if v == nil {
			return nil
		}
		return v.DateMeasureField
	}).(TemplateDateMeasureFieldPtrOutput)
}

// The measure type field with numerical type columns.
func (o TemplateMeasureFieldPtrOutput) NumericalMeasureField() TemplateNumericalMeasureFieldPtrOutput {
	return o.ApplyT(func(v *TemplateMeasureField) *TemplateNumericalMeasureField {
		if v == nil {
			return nil
		}
		return v.NumericalMeasureField
	}).(TemplateNumericalMeasureFieldPtrOutput)
}

type TemplateMeasureFieldArrayOutput struct{ *pulumi.OutputState }

func (TemplateMeasureFieldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateMeasureField)(nil)).Elem()
}

func (o TemplateMeasureFieldArrayOutput) ToTemplateMeasureFieldArrayOutput() TemplateMeasureFieldArrayOutput {
	return o
}

func (o TemplateMeasureFieldArrayOutput) ToTemplateMeasureFieldArrayOutputWithContext(ctx context.Context) TemplateMeasureFieldArrayOutput {
	return o
}

func (o TemplateMeasureFieldArrayOutput) Index(i pulumi.IntInput) TemplateMeasureFieldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateMeasureField {
		return vs[0].([]TemplateMeasureField)[vs[1].(int)]
	}).(TemplateMeasureFieldOutput)
}

type TemplateMetricComparisonComputation struct {
	// The ID for a computation.
	ComputationId string `pulumi:"computationId"`
	// The field that is used in a metric comparison from value setup.
	FromValue *TemplateMeasureField `pulumi:"fromValue"`
	// The name of a computation.
	Name *string `pulumi:"name"`
	// The field that is used in a metric comparison to value setup.
	TargetValue *TemplateMeasureField `pulumi:"targetValue"`
	// The time field that is used in a computation.
	Time *TemplateDimensionField `pulumi:"time"`
}

// TemplateMetricComparisonComputationInput is an input type that accepts TemplateMetricComparisonComputationArgs and TemplateMetricComparisonComputationOutput values.
// You can construct a concrete instance of `TemplateMetricComparisonComputationInput` via:
//
//	TemplateMetricComparisonComputationArgs{...}
type TemplateMetricComparisonComputationInput interface {
	pulumi.Input

	ToTemplateMetricComparisonComputationOutput() TemplateMetricComparisonComputationOutput
	ToTemplateMetricComparisonComputationOutputWithContext(context.Context) TemplateMetricComparisonComputationOutput
}

type TemplateMetricComparisonComputationArgs struct {
	// The ID for a computation.
	ComputationId pulumi.StringInput `pulumi:"computationId"`
	// The field that is used in a metric comparison from value setup.
	FromValue TemplateMeasureFieldPtrInput `pulumi:"fromValue"`
	// The name of a computation.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The field that is used in a metric comparison to value setup.
	TargetValue TemplateMeasureFieldPtrInput `pulumi:"targetValue"`
	// The time field that is used in a computation.
	Time TemplateDimensionFieldPtrInput `pulumi:"time"`
}

func (TemplateMetricComparisonComputationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateMetricComparisonComputation)(nil)).Elem()
}

func (i TemplateMetricComparisonComputationArgs) ToTemplateMetricComparisonComputationOutput() TemplateMetricComparisonComputationOutput {
	return i.ToTemplateMetricComparisonComputationOutputWithContext(context.Background())
}

func (i TemplateMetricComparisonComputationArgs) ToTemplateMetricComparisonComputationOutputWithContext(ctx context.Context) TemplateMetricComparisonComputationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateMetricComparisonComputationOutput)
}

func (i TemplateMetricComparisonComputationArgs) ToTemplateMetricComparisonComputationPtrOutput() TemplateMetricComparisonComputationPtrOutput {
	return i.ToTemplateMetricComparisonComputationPtrOutputWithContext(context.Background())
}

func (i TemplateMetricComparisonComputationArgs) ToTemplateMetricComparisonComputationPtrOutputWithContext(ctx context.Context) TemplateMetricComparisonComputationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateMetricComparisonComputationOutput).ToTemplateMetricComparisonComputationPtrOutputWithContext(ctx)
}

// TemplateMetricComparisonComputationPtrInput is an input type that accepts TemplateMetricComparisonComputationArgs, TemplateMetricComparisonComputationPtr and TemplateMetricComparisonComputationPtrOutput values.
// You can construct a concrete instance of `TemplateMetricComparisonComputationPtrInput` via:
//
//	        TemplateMetricComparisonComputationArgs{...}
//
//	or:
//
//	        nil
type TemplateMetricComparisonComputationPtrInput interface {
	pulumi.Input

	ToTemplateMetricComparisonComputationPtrOutput() TemplateMetricComparisonComputationPtrOutput
	ToTemplateMetricComparisonComputationPtrOutputWithContext(context.Context) TemplateMetricComparisonComputationPtrOutput
}

type templateMetricComparisonComputationPtrType TemplateMetricComparisonComputationArgs

func TemplateMetricComparisonComputationPtr(v *TemplateMetricComparisonComputationArgs) TemplateMetricComparisonComputationPtrInput {
	return (*templateMetricComparisonComputationPtrType)(v)
}

func (*templateMetricComparisonComputationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateMetricComparisonComputation)(nil)).Elem()
}

func (i *templateMetricComparisonComputationPtrType) ToTemplateMetricComparisonComputationPtrOutput() TemplateMetricComparisonComputationPtrOutput {
	return i.ToTemplateMetricComparisonComputationPtrOutputWithContext(context.Background())
}

func (i *templateMetricComparisonComputationPtrType) ToTemplateMetricComparisonComputationPtrOutputWithContext(ctx context.Context) TemplateMetricComparisonComputationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateMetricComparisonComputationPtrOutput)
}

type TemplateMetricComparisonComputationOutput struct{ *pulumi.OutputState }

func (TemplateMetricComparisonComputationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateMetricComparisonComputation)(nil)).Elem()
}

func (o TemplateMetricComparisonComputationOutput) ToTemplateMetricComparisonComputationOutput() TemplateMetricComparisonComputationOutput {
	return o
}

func (o TemplateMetricComparisonComputationOutput) ToTemplateMetricComparisonComputationOutputWithContext(ctx context.Context) TemplateMetricComparisonComputationOutput {
	return o
}

func (o TemplateMetricComparisonComputationOutput) ToTemplateMetricComparisonComputationPtrOutput() TemplateMetricComparisonComputationPtrOutput {
	return o.ToTemplateMetricComparisonComputationPtrOutputWithContext(context.Background())
}

func (o TemplateMetricComparisonComputationOutput) ToTemplateMetricComparisonComputationPtrOutputWithContext(ctx context.Context) TemplateMetricComparisonComputationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateMetricComparisonComputation) *TemplateMetricComparisonComputation {
		return &v
	}).(TemplateMetricComparisonComputationPtrOutput)
}

// The ID for a computation.
func (o TemplateMetricComparisonComputationOutput) ComputationId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateMetricComparisonComputation) string { return v.ComputationId }).(pulumi.StringOutput)
}

// The field that is used in a metric comparison from value setup.
func (o TemplateMetricComparisonComputationOutput) FromValue() TemplateMeasureFieldPtrOutput {
	return o.ApplyT(func(v TemplateMetricComparisonComputation) *TemplateMeasureField { return v.FromValue }).(TemplateMeasureFieldPtrOutput)
}

// The name of a computation.
func (o TemplateMetricComparisonComputationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateMetricComparisonComputation) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The field that is used in a metric comparison to value setup.
func (o TemplateMetricComparisonComputationOutput) TargetValue() TemplateMeasureFieldPtrOutput {
	return o.ApplyT(func(v TemplateMetricComparisonComputation) *TemplateMeasureField { return v.TargetValue }).(TemplateMeasureFieldPtrOutput)
}

// The time field that is used in a computation.
func (o TemplateMetricComparisonComputationOutput) Time() TemplateDimensionFieldPtrOutput {
	return o.ApplyT(func(v TemplateMetricComparisonComputation) *TemplateDimensionField { return v.Time }).(TemplateDimensionFieldPtrOutput)
}

type TemplateMetricComparisonComputationPtrOutput struct{ *pulumi.OutputState }

func (TemplateMetricComparisonComputationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateMetricComparisonComputation)(nil)).Elem()
}

func (o TemplateMetricComparisonComputationPtrOutput) ToTemplateMetricComparisonComputationPtrOutput() TemplateMetricComparisonComputationPtrOutput {
	return o
}

func (o TemplateMetricComparisonComputationPtrOutput) ToTemplateMetricComparisonComputationPtrOutputWithContext(ctx context.Context) TemplateMetricComparisonComputationPtrOutput {
	return o
}

func (o TemplateMetricComparisonComputationPtrOutput) Elem() TemplateMetricComparisonComputationOutput {
	return o.ApplyT(func(v *TemplateMetricComparisonComputation) TemplateMetricComparisonComputation {
		if v != nil {
			return *v
		}
		var ret TemplateMetricComparisonComputation
		return ret
	}).(TemplateMetricComparisonComputationOutput)
}

// The ID for a computation.
func (o TemplateMetricComparisonComputationPtrOutput) ComputationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateMetricComparisonComputation) *string {
		if v == nil {
			return nil
		}
		return &v.ComputationId
	}).(pulumi.StringPtrOutput)
}

// The field that is used in a metric comparison from value setup.
func (o TemplateMetricComparisonComputationPtrOutput) FromValue() TemplateMeasureFieldPtrOutput {
	return o.ApplyT(func(v *TemplateMetricComparisonComputation) *TemplateMeasureField {
		if v == nil {
			return nil
		}
		return v.FromValue
	}).(TemplateMeasureFieldPtrOutput)
}

// The name of a computation.
func (o TemplateMetricComparisonComputationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateMetricComparisonComputation) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The field that is used in a metric comparison to value setup.
func (o TemplateMetricComparisonComputationPtrOutput) TargetValue() TemplateMeasureFieldPtrOutput {
	return o.ApplyT(func(v *TemplateMetricComparisonComputation) *TemplateMeasureField {
		if v == nil {
			return nil
		}
		return v.TargetValue
	}).(TemplateMeasureFieldPtrOutput)
}

// The time field that is used in a computation.
func (o TemplateMetricComparisonComputationPtrOutput) Time() TemplateDimensionFieldPtrOutput {
	return o.ApplyT(func(v *TemplateMetricComparisonComputation) *TemplateDimensionField {
		if v == nil {
			return nil
		}
		return v.Time
	}).(TemplateDimensionFieldPtrOutput)
}

type TemplateMinimumLabelType struct {
	// The visibility of the minimum label.
	Visibility interface{} `pulumi:"visibility"`
}

// TemplateMinimumLabelTypeInput is an input type that accepts TemplateMinimumLabelTypeArgs and TemplateMinimumLabelTypeOutput values.
// You can construct a concrete instance of `TemplateMinimumLabelTypeInput` via:
//
//	TemplateMinimumLabelTypeArgs{...}
type TemplateMinimumLabelTypeInput interface {
	pulumi.Input

	ToTemplateMinimumLabelTypeOutput() TemplateMinimumLabelTypeOutput
	ToTemplateMinimumLabelTypeOutputWithContext(context.Context) TemplateMinimumLabelTypeOutput
}

type TemplateMinimumLabelTypeArgs struct {
	// The visibility of the minimum label.
	Visibility pulumi.Input `pulumi:"visibility"`
}

func (TemplateMinimumLabelTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateMinimumLabelType)(nil)).Elem()
}

func (i TemplateMinimumLabelTypeArgs) ToTemplateMinimumLabelTypeOutput() TemplateMinimumLabelTypeOutput {
	return i.ToTemplateMinimumLabelTypeOutputWithContext(context.Background())
}

func (i TemplateMinimumLabelTypeArgs) ToTemplateMinimumLabelTypeOutputWithContext(ctx context.Context) TemplateMinimumLabelTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateMinimumLabelTypeOutput)
}

func (i TemplateMinimumLabelTypeArgs) ToTemplateMinimumLabelTypePtrOutput() TemplateMinimumLabelTypePtrOutput {
	return i.ToTemplateMinimumLabelTypePtrOutputWithContext(context.Background())
}

func (i TemplateMinimumLabelTypeArgs) ToTemplateMinimumLabelTypePtrOutputWithContext(ctx context.Context) TemplateMinimumLabelTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateMinimumLabelTypeOutput).ToTemplateMinimumLabelTypePtrOutputWithContext(ctx)
}

// TemplateMinimumLabelTypePtrInput is an input type that accepts TemplateMinimumLabelTypeArgs, TemplateMinimumLabelTypePtr and TemplateMinimumLabelTypePtrOutput values.
// You can construct a concrete instance of `TemplateMinimumLabelTypePtrInput` via:
//
//	        TemplateMinimumLabelTypeArgs{...}
//
//	or:
//
//	        nil
type TemplateMinimumLabelTypePtrInput interface {
	pulumi.Input

	ToTemplateMinimumLabelTypePtrOutput() TemplateMinimumLabelTypePtrOutput
	ToTemplateMinimumLabelTypePtrOutputWithContext(context.Context) TemplateMinimumLabelTypePtrOutput
}

type templateMinimumLabelTypePtrType TemplateMinimumLabelTypeArgs

func TemplateMinimumLabelTypePtr(v *TemplateMinimumLabelTypeArgs) TemplateMinimumLabelTypePtrInput {
	return (*templateMinimumLabelTypePtrType)(v)
}

func (*templateMinimumLabelTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateMinimumLabelType)(nil)).Elem()
}

func (i *templateMinimumLabelTypePtrType) ToTemplateMinimumLabelTypePtrOutput() TemplateMinimumLabelTypePtrOutput {
	return i.ToTemplateMinimumLabelTypePtrOutputWithContext(context.Background())
}

func (i *templateMinimumLabelTypePtrType) ToTemplateMinimumLabelTypePtrOutputWithContext(ctx context.Context) TemplateMinimumLabelTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateMinimumLabelTypePtrOutput)
}

type TemplateMinimumLabelTypeOutput struct{ *pulumi.OutputState }

func (TemplateMinimumLabelTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateMinimumLabelType)(nil)).Elem()
}

func (o TemplateMinimumLabelTypeOutput) ToTemplateMinimumLabelTypeOutput() TemplateMinimumLabelTypeOutput {
	return o
}

func (o TemplateMinimumLabelTypeOutput) ToTemplateMinimumLabelTypeOutputWithContext(ctx context.Context) TemplateMinimumLabelTypeOutput {
	return o
}

func (o TemplateMinimumLabelTypeOutput) ToTemplateMinimumLabelTypePtrOutput() TemplateMinimumLabelTypePtrOutput {
	return o.ToTemplateMinimumLabelTypePtrOutputWithContext(context.Background())
}

func (o TemplateMinimumLabelTypeOutput) ToTemplateMinimumLabelTypePtrOutputWithContext(ctx context.Context) TemplateMinimumLabelTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateMinimumLabelType) *TemplateMinimumLabelType {
		return &v
	}).(TemplateMinimumLabelTypePtrOutput)
}

// The visibility of the minimum label.
func (o TemplateMinimumLabelTypeOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateMinimumLabelType) interface{} { return v.Visibility }).(pulumi.AnyOutput)
}

type TemplateMinimumLabelTypePtrOutput struct{ *pulumi.OutputState }

func (TemplateMinimumLabelTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateMinimumLabelType)(nil)).Elem()
}

func (o TemplateMinimumLabelTypePtrOutput) ToTemplateMinimumLabelTypePtrOutput() TemplateMinimumLabelTypePtrOutput {
	return o
}

func (o TemplateMinimumLabelTypePtrOutput) ToTemplateMinimumLabelTypePtrOutputWithContext(ctx context.Context) TemplateMinimumLabelTypePtrOutput {
	return o
}

func (o TemplateMinimumLabelTypePtrOutput) Elem() TemplateMinimumLabelTypeOutput {
	return o.ApplyT(func(v *TemplateMinimumLabelType) TemplateMinimumLabelType {
		if v != nil {
			return *v
		}
		var ret TemplateMinimumLabelType
		return ret
	}).(TemplateMinimumLabelTypeOutput)
}

// The visibility of the minimum label.
func (o TemplateMinimumLabelTypePtrOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateMinimumLabelType) interface{} {
		if v == nil {
			return nil
		}
		return v.Visibility
	}).(pulumi.AnyOutput)
}

type TemplateMissingDataConfiguration struct {
	// The treatment option that determines how missing data should be rendered. Choose from the following options:
	//
	// - `INTERPOLATE` : Interpolate missing values between the prior and the next known value.
	// - `SHOW_AS_ZERO` : Show missing values as the value `0` .
	// - `SHOW_AS_BLANK` : Display a blank space when rendering missing data.
	TreatmentOption *TemplateMissingDataTreatmentOption `pulumi:"treatmentOption"`
}

// TemplateMissingDataConfigurationInput is an input type that accepts TemplateMissingDataConfigurationArgs and TemplateMissingDataConfigurationOutput values.
// You can construct a concrete instance of `TemplateMissingDataConfigurationInput` via:
//
//	TemplateMissingDataConfigurationArgs{...}
type TemplateMissingDataConfigurationInput interface {
	pulumi.Input

	ToTemplateMissingDataConfigurationOutput() TemplateMissingDataConfigurationOutput
	ToTemplateMissingDataConfigurationOutputWithContext(context.Context) TemplateMissingDataConfigurationOutput
}

type TemplateMissingDataConfigurationArgs struct {
	// The treatment option that determines how missing data should be rendered. Choose from the following options:
	//
	// - `INTERPOLATE` : Interpolate missing values between the prior and the next known value.
	// - `SHOW_AS_ZERO` : Show missing values as the value `0` .
	// - `SHOW_AS_BLANK` : Display a blank space when rendering missing data.
	TreatmentOption TemplateMissingDataTreatmentOptionPtrInput `pulumi:"treatmentOption"`
}

func (TemplateMissingDataConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateMissingDataConfiguration)(nil)).Elem()
}

func (i TemplateMissingDataConfigurationArgs) ToTemplateMissingDataConfigurationOutput() TemplateMissingDataConfigurationOutput {
	return i.ToTemplateMissingDataConfigurationOutputWithContext(context.Background())
}

func (i TemplateMissingDataConfigurationArgs) ToTemplateMissingDataConfigurationOutputWithContext(ctx context.Context) TemplateMissingDataConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateMissingDataConfigurationOutput)
}

// TemplateMissingDataConfigurationArrayInput is an input type that accepts TemplateMissingDataConfigurationArray and TemplateMissingDataConfigurationArrayOutput values.
// You can construct a concrete instance of `TemplateMissingDataConfigurationArrayInput` via:
//
//	TemplateMissingDataConfigurationArray{ TemplateMissingDataConfigurationArgs{...} }
type TemplateMissingDataConfigurationArrayInput interface {
	pulumi.Input

	ToTemplateMissingDataConfigurationArrayOutput() TemplateMissingDataConfigurationArrayOutput
	ToTemplateMissingDataConfigurationArrayOutputWithContext(context.Context) TemplateMissingDataConfigurationArrayOutput
}

type TemplateMissingDataConfigurationArray []TemplateMissingDataConfigurationInput

func (TemplateMissingDataConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateMissingDataConfiguration)(nil)).Elem()
}

func (i TemplateMissingDataConfigurationArray) ToTemplateMissingDataConfigurationArrayOutput() TemplateMissingDataConfigurationArrayOutput {
	return i.ToTemplateMissingDataConfigurationArrayOutputWithContext(context.Background())
}

func (i TemplateMissingDataConfigurationArray) ToTemplateMissingDataConfigurationArrayOutputWithContext(ctx context.Context) TemplateMissingDataConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateMissingDataConfigurationArrayOutput)
}

type TemplateMissingDataConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateMissingDataConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateMissingDataConfiguration)(nil)).Elem()
}

func (o TemplateMissingDataConfigurationOutput) ToTemplateMissingDataConfigurationOutput() TemplateMissingDataConfigurationOutput {
	return o
}

func (o TemplateMissingDataConfigurationOutput) ToTemplateMissingDataConfigurationOutputWithContext(ctx context.Context) TemplateMissingDataConfigurationOutput {
	return o
}

// The treatment option that determines how missing data should be rendered. Choose from the following options:
//
// - `INTERPOLATE` : Interpolate missing values between the prior and the next known value.
// - `SHOW_AS_ZERO` : Show missing values as the value `0` .
// - `SHOW_AS_BLANK` : Display a blank space when rendering missing data.
func (o TemplateMissingDataConfigurationOutput) TreatmentOption() TemplateMissingDataTreatmentOptionPtrOutput {
	return o.ApplyT(func(v TemplateMissingDataConfiguration) *TemplateMissingDataTreatmentOption { return v.TreatmentOption }).(TemplateMissingDataTreatmentOptionPtrOutput)
}

type TemplateMissingDataConfigurationArrayOutput struct{ *pulumi.OutputState }

func (TemplateMissingDataConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateMissingDataConfiguration)(nil)).Elem()
}

func (o TemplateMissingDataConfigurationArrayOutput) ToTemplateMissingDataConfigurationArrayOutput() TemplateMissingDataConfigurationArrayOutput {
	return o
}

func (o TemplateMissingDataConfigurationArrayOutput) ToTemplateMissingDataConfigurationArrayOutputWithContext(ctx context.Context) TemplateMissingDataConfigurationArrayOutput {
	return o
}

func (o TemplateMissingDataConfigurationArrayOutput) Index(i pulumi.IntInput) TemplateMissingDataConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateMissingDataConfiguration {
		return vs[0].([]TemplateMissingDataConfiguration)[vs[1].(int)]
	}).(TemplateMissingDataConfigurationOutput)
}

type TemplateNegativeValueConfiguration struct {
	// Determines the display mode of the negative value configuration.
	DisplayMode TemplateNegativeValueDisplayMode `pulumi:"displayMode"`
}

// TemplateNegativeValueConfigurationInput is an input type that accepts TemplateNegativeValueConfigurationArgs and TemplateNegativeValueConfigurationOutput values.
// You can construct a concrete instance of `TemplateNegativeValueConfigurationInput` via:
//
//	TemplateNegativeValueConfigurationArgs{...}
type TemplateNegativeValueConfigurationInput interface {
	pulumi.Input

	ToTemplateNegativeValueConfigurationOutput() TemplateNegativeValueConfigurationOutput
	ToTemplateNegativeValueConfigurationOutputWithContext(context.Context) TemplateNegativeValueConfigurationOutput
}

type TemplateNegativeValueConfigurationArgs struct {
	// Determines the display mode of the negative value configuration.
	DisplayMode TemplateNegativeValueDisplayModeInput `pulumi:"displayMode"`
}

func (TemplateNegativeValueConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateNegativeValueConfiguration)(nil)).Elem()
}

func (i TemplateNegativeValueConfigurationArgs) ToTemplateNegativeValueConfigurationOutput() TemplateNegativeValueConfigurationOutput {
	return i.ToTemplateNegativeValueConfigurationOutputWithContext(context.Background())
}

func (i TemplateNegativeValueConfigurationArgs) ToTemplateNegativeValueConfigurationOutputWithContext(ctx context.Context) TemplateNegativeValueConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateNegativeValueConfigurationOutput)
}

func (i TemplateNegativeValueConfigurationArgs) ToTemplateNegativeValueConfigurationPtrOutput() TemplateNegativeValueConfigurationPtrOutput {
	return i.ToTemplateNegativeValueConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateNegativeValueConfigurationArgs) ToTemplateNegativeValueConfigurationPtrOutputWithContext(ctx context.Context) TemplateNegativeValueConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateNegativeValueConfigurationOutput).ToTemplateNegativeValueConfigurationPtrOutputWithContext(ctx)
}

// TemplateNegativeValueConfigurationPtrInput is an input type that accepts TemplateNegativeValueConfigurationArgs, TemplateNegativeValueConfigurationPtr and TemplateNegativeValueConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateNegativeValueConfigurationPtrInput` via:
//
//	        TemplateNegativeValueConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateNegativeValueConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateNegativeValueConfigurationPtrOutput() TemplateNegativeValueConfigurationPtrOutput
	ToTemplateNegativeValueConfigurationPtrOutputWithContext(context.Context) TemplateNegativeValueConfigurationPtrOutput
}

type templateNegativeValueConfigurationPtrType TemplateNegativeValueConfigurationArgs

func TemplateNegativeValueConfigurationPtr(v *TemplateNegativeValueConfigurationArgs) TemplateNegativeValueConfigurationPtrInput {
	return (*templateNegativeValueConfigurationPtrType)(v)
}

func (*templateNegativeValueConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateNegativeValueConfiguration)(nil)).Elem()
}

func (i *templateNegativeValueConfigurationPtrType) ToTemplateNegativeValueConfigurationPtrOutput() TemplateNegativeValueConfigurationPtrOutput {
	return i.ToTemplateNegativeValueConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateNegativeValueConfigurationPtrType) ToTemplateNegativeValueConfigurationPtrOutputWithContext(ctx context.Context) TemplateNegativeValueConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateNegativeValueConfigurationPtrOutput)
}

type TemplateNegativeValueConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateNegativeValueConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateNegativeValueConfiguration)(nil)).Elem()
}

func (o TemplateNegativeValueConfigurationOutput) ToTemplateNegativeValueConfigurationOutput() TemplateNegativeValueConfigurationOutput {
	return o
}

func (o TemplateNegativeValueConfigurationOutput) ToTemplateNegativeValueConfigurationOutputWithContext(ctx context.Context) TemplateNegativeValueConfigurationOutput {
	return o
}

func (o TemplateNegativeValueConfigurationOutput) ToTemplateNegativeValueConfigurationPtrOutput() TemplateNegativeValueConfigurationPtrOutput {
	return o.ToTemplateNegativeValueConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateNegativeValueConfigurationOutput) ToTemplateNegativeValueConfigurationPtrOutputWithContext(ctx context.Context) TemplateNegativeValueConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateNegativeValueConfiguration) *TemplateNegativeValueConfiguration {
		return &v
	}).(TemplateNegativeValueConfigurationPtrOutput)
}

// Determines the display mode of the negative value configuration.
func (o TemplateNegativeValueConfigurationOutput) DisplayMode() TemplateNegativeValueDisplayModeOutput {
	return o.ApplyT(func(v TemplateNegativeValueConfiguration) TemplateNegativeValueDisplayMode { return v.DisplayMode }).(TemplateNegativeValueDisplayModeOutput)
}

type TemplateNegativeValueConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateNegativeValueConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateNegativeValueConfiguration)(nil)).Elem()
}

func (o TemplateNegativeValueConfigurationPtrOutput) ToTemplateNegativeValueConfigurationPtrOutput() TemplateNegativeValueConfigurationPtrOutput {
	return o
}

func (o TemplateNegativeValueConfigurationPtrOutput) ToTemplateNegativeValueConfigurationPtrOutputWithContext(ctx context.Context) TemplateNegativeValueConfigurationPtrOutput {
	return o
}

func (o TemplateNegativeValueConfigurationPtrOutput) Elem() TemplateNegativeValueConfigurationOutput {
	return o.ApplyT(func(v *TemplateNegativeValueConfiguration) TemplateNegativeValueConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateNegativeValueConfiguration
		return ret
	}).(TemplateNegativeValueConfigurationOutput)
}

// Determines the display mode of the negative value configuration.
func (o TemplateNegativeValueConfigurationPtrOutput) DisplayMode() TemplateNegativeValueDisplayModePtrOutput {
	return o.ApplyT(func(v *TemplateNegativeValueConfiguration) *TemplateNegativeValueDisplayMode {
		if v == nil {
			return nil
		}
		return &v.DisplayMode
	}).(TemplateNegativeValueDisplayModePtrOutput)
}

type TemplateNestedFilter struct {
	// The column that the filter is applied to.
	Column TemplateColumnIdentifier `pulumi:"column"`
	// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
	FilterId string `pulumi:"filterId"`
	// A boolean condition to include or exclude the subset that is defined by the values of the nested inner filter.
	IncludeInnerSet bool `pulumi:"includeInnerSet"`
	// The `InnerFilter` defines the subset of data to be used with the `NestedFilter` .
	InnerFilter TemplateInnerFilter `pulumi:"innerFilter"`
}

// TemplateNestedFilterInput is an input type that accepts TemplateNestedFilterArgs and TemplateNestedFilterOutput values.
// You can construct a concrete instance of `TemplateNestedFilterInput` via:
//
//	TemplateNestedFilterArgs{...}
type TemplateNestedFilterInput interface {
	pulumi.Input

	ToTemplateNestedFilterOutput() TemplateNestedFilterOutput
	ToTemplateNestedFilterOutputWithContext(context.Context) TemplateNestedFilterOutput
}

type TemplateNestedFilterArgs struct {
	// The column that the filter is applied to.
	Column TemplateColumnIdentifierInput `pulumi:"column"`
	// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
	FilterId pulumi.StringInput `pulumi:"filterId"`
	// A boolean condition to include or exclude the subset that is defined by the values of the nested inner filter.
	IncludeInnerSet pulumi.BoolInput `pulumi:"includeInnerSet"`
	// The `InnerFilter` defines the subset of data to be used with the `NestedFilter` .
	InnerFilter TemplateInnerFilterInput `pulumi:"innerFilter"`
}

func (TemplateNestedFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateNestedFilter)(nil)).Elem()
}

func (i TemplateNestedFilterArgs) ToTemplateNestedFilterOutput() TemplateNestedFilterOutput {
	return i.ToTemplateNestedFilterOutputWithContext(context.Background())
}

func (i TemplateNestedFilterArgs) ToTemplateNestedFilterOutputWithContext(ctx context.Context) TemplateNestedFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateNestedFilterOutput)
}

func (i TemplateNestedFilterArgs) ToTemplateNestedFilterPtrOutput() TemplateNestedFilterPtrOutput {
	return i.ToTemplateNestedFilterPtrOutputWithContext(context.Background())
}

func (i TemplateNestedFilterArgs) ToTemplateNestedFilterPtrOutputWithContext(ctx context.Context) TemplateNestedFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateNestedFilterOutput).ToTemplateNestedFilterPtrOutputWithContext(ctx)
}

// TemplateNestedFilterPtrInput is an input type that accepts TemplateNestedFilterArgs, TemplateNestedFilterPtr and TemplateNestedFilterPtrOutput values.
// You can construct a concrete instance of `TemplateNestedFilterPtrInput` via:
//
//	        TemplateNestedFilterArgs{...}
//
//	or:
//
//	        nil
type TemplateNestedFilterPtrInput interface {
	pulumi.Input

	ToTemplateNestedFilterPtrOutput() TemplateNestedFilterPtrOutput
	ToTemplateNestedFilterPtrOutputWithContext(context.Context) TemplateNestedFilterPtrOutput
}

type templateNestedFilterPtrType TemplateNestedFilterArgs

func TemplateNestedFilterPtr(v *TemplateNestedFilterArgs) TemplateNestedFilterPtrInput {
	return (*templateNestedFilterPtrType)(v)
}

func (*templateNestedFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateNestedFilter)(nil)).Elem()
}

func (i *templateNestedFilterPtrType) ToTemplateNestedFilterPtrOutput() TemplateNestedFilterPtrOutput {
	return i.ToTemplateNestedFilterPtrOutputWithContext(context.Background())
}

func (i *templateNestedFilterPtrType) ToTemplateNestedFilterPtrOutputWithContext(ctx context.Context) TemplateNestedFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateNestedFilterPtrOutput)
}

type TemplateNestedFilterOutput struct{ *pulumi.OutputState }

func (TemplateNestedFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateNestedFilter)(nil)).Elem()
}

func (o TemplateNestedFilterOutput) ToTemplateNestedFilterOutput() TemplateNestedFilterOutput {
	return o
}

func (o TemplateNestedFilterOutput) ToTemplateNestedFilterOutputWithContext(ctx context.Context) TemplateNestedFilterOutput {
	return o
}

func (o TemplateNestedFilterOutput) ToTemplateNestedFilterPtrOutput() TemplateNestedFilterPtrOutput {
	return o.ToTemplateNestedFilterPtrOutputWithContext(context.Background())
}

func (o TemplateNestedFilterOutput) ToTemplateNestedFilterPtrOutputWithContext(ctx context.Context) TemplateNestedFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateNestedFilter) *TemplateNestedFilter {
		return &v
	}).(TemplateNestedFilterPtrOutput)
}

// The column that the filter is applied to.
func (o TemplateNestedFilterOutput) Column() TemplateColumnIdentifierOutput {
	return o.ApplyT(func(v TemplateNestedFilter) TemplateColumnIdentifier { return v.Column }).(TemplateColumnIdentifierOutput)
}

// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
func (o TemplateNestedFilterOutput) FilterId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateNestedFilter) string { return v.FilterId }).(pulumi.StringOutput)
}

// A boolean condition to include or exclude the subset that is defined by the values of the nested inner filter.
func (o TemplateNestedFilterOutput) IncludeInnerSet() pulumi.BoolOutput {
	return o.ApplyT(func(v TemplateNestedFilter) bool { return v.IncludeInnerSet }).(pulumi.BoolOutput)
}

// The `InnerFilter` defines the subset of data to be used with the `NestedFilter` .
func (o TemplateNestedFilterOutput) InnerFilter() TemplateInnerFilterOutput {
	return o.ApplyT(func(v TemplateNestedFilter) TemplateInnerFilter { return v.InnerFilter }).(TemplateInnerFilterOutput)
}

type TemplateNestedFilterPtrOutput struct{ *pulumi.OutputState }

func (TemplateNestedFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateNestedFilter)(nil)).Elem()
}

func (o TemplateNestedFilterPtrOutput) ToTemplateNestedFilterPtrOutput() TemplateNestedFilterPtrOutput {
	return o
}

func (o TemplateNestedFilterPtrOutput) ToTemplateNestedFilterPtrOutputWithContext(ctx context.Context) TemplateNestedFilterPtrOutput {
	return o
}

func (o TemplateNestedFilterPtrOutput) Elem() TemplateNestedFilterOutput {
	return o.ApplyT(func(v *TemplateNestedFilter) TemplateNestedFilter {
		if v != nil {
			return *v
		}
		var ret TemplateNestedFilter
		return ret
	}).(TemplateNestedFilterOutput)
}

// The column that the filter is applied to.
func (o TemplateNestedFilterPtrOutput) Column() TemplateColumnIdentifierPtrOutput {
	return o.ApplyT(func(v *TemplateNestedFilter) *TemplateColumnIdentifier {
		if v == nil {
			return nil
		}
		return &v.Column
	}).(TemplateColumnIdentifierPtrOutput)
}

// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
func (o TemplateNestedFilterPtrOutput) FilterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateNestedFilter) *string {
		if v == nil {
			return nil
		}
		return &v.FilterId
	}).(pulumi.StringPtrOutput)
}

// A boolean condition to include or exclude the subset that is defined by the values of the nested inner filter.
func (o TemplateNestedFilterPtrOutput) IncludeInnerSet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TemplateNestedFilter) *bool {
		if v == nil {
			return nil
		}
		return &v.IncludeInnerSet
	}).(pulumi.BoolPtrOutput)
}

// The `InnerFilter` defines the subset of data to be used with the `NestedFilter` .
func (o TemplateNestedFilterPtrOutput) InnerFilter() TemplateInnerFilterPtrOutput {
	return o.ApplyT(func(v *TemplateNestedFilter) *TemplateInnerFilter {
		if v == nil {
			return nil
		}
		return &v.InnerFilter
	}).(TemplateInnerFilterPtrOutput)
}

type TemplateNullValueFormatConfiguration struct {
	// Determines the null string of null values.
	NullString string `pulumi:"nullString"`
}

// TemplateNullValueFormatConfigurationInput is an input type that accepts TemplateNullValueFormatConfigurationArgs and TemplateNullValueFormatConfigurationOutput values.
// You can construct a concrete instance of `TemplateNullValueFormatConfigurationInput` via:
//
//	TemplateNullValueFormatConfigurationArgs{...}
type TemplateNullValueFormatConfigurationInput interface {
	pulumi.Input

	ToTemplateNullValueFormatConfigurationOutput() TemplateNullValueFormatConfigurationOutput
	ToTemplateNullValueFormatConfigurationOutputWithContext(context.Context) TemplateNullValueFormatConfigurationOutput
}

type TemplateNullValueFormatConfigurationArgs struct {
	// Determines the null string of null values.
	NullString pulumi.StringInput `pulumi:"nullString"`
}

func (TemplateNullValueFormatConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateNullValueFormatConfiguration)(nil)).Elem()
}

func (i TemplateNullValueFormatConfigurationArgs) ToTemplateNullValueFormatConfigurationOutput() TemplateNullValueFormatConfigurationOutput {
	return i.ToTemplateNullValueFormatConfigurationOutputWithContext(context.Background())
}

func (i TemplateNullValueFormatConfigurationArgs) ToTemplateNullValueFormatConfigurationOutputWithContext(ctx context.Context) TemplateNullValueFormatConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateNullValueFormatConfigurationOutput)
}

func (i TemplateNullValueFormatConfigurationArgs) ToTemplateNullValueFormatConfigurationPtrOutput() TemplateNullValueFormatConfigurationPtrOutput {
	return i.ToTemplateNullValueFormatConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateNullValueFormatConfigurationArgs) ToTemplateNullValueFormatConfigurationPtrOutputWithContext(ctx context.Context) TemplateNullValueFormatConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateNullValueFormatConfigurationOutput).ToTemplateNullValueFormatConfigurationPtrOutputWithContext(ctx)
}

// TemplateNullValueFormatConfigurationPtrInput is an input type that accepts TemplateNullValueFormatConfigurationArgs, TemplateNullValueFormatConfigurationPtr and TemplateNullValueFormatConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateNullValueFormatConfigurationPtrInput` via:
//
//	        TemplateNullValueFormatConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateNullValueFormatConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateNullValueFormatConfigurationPtrOutput() TemplateNullValueFormatConfigurationPtrOutput
	ToTemplateNullValueFormatConfigurationPtrOutputWithContext(context.Context) TemplateNullValueFormatConfigurationPtrOutput
}

type templateNullValueFormatConfigurationPtrType TemplateNullValueFormatConfigurationArgs

func TemplateNullValueFormatConfigurationPtr(v *TemplateNullValueFormatConfigurationArgs) TemplateNullValueFormatConfigurationPtrInput {
	return (*templateNullValueFormatConfigurationPtrType)(v)
}

func (*templateNullValueFormatConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateNullValueFormatConfiguration)(nil)).Elem()
}

func (i *templateNullValueFormatConfigurationPtrType) ToTemplateNullValueFormatConfigurationPtrOutput() TemplateNullValueFormatConfigurationPtrOutput {
	return i.ToTemplateNullValueFormatConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateNullValueFormatConfigurationPtrType) ToTemplateNullValueFormatConfigurationPtrOutputWithContext(ctx context.Context) TemplateNullValueFormatConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateNullValueFormatConfigurationPtrOutput)
}

type TemplateNullValueFormatConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateNullValueFormatConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateNullValueFormatConfiguration)(nil)).Elem()
}

func (o TemplateNullValueFormatConfigurationOutput) ToTemplateNullValueFormatConfigurationOutput() TemplateNullValueFormatConfigurationOutput {
	return o
}

func (o TemplateNullValueFormatConfigurationOutput) ToTemplateNullValueFormatConfigurationOutputWithContext(ctx context.Context) TemplateNullValueFormatConfigurationOutput {
	return o
}

func (o TemplateNullValueFormatConfigurationOutput) ToTemplateNullValueFormatConfigurationPtrOutput() TemplateNullValueFormatConfigurationPtrOutput {
	return o.ToTemplateNullValueFormatConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateNullValueFormatConfigurationOutput) ToTemplateNullValueFormatConfigurationPtrOutputWithContext(ctx context.Context) TemplateNullValueFormatConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateNullValueFormatConfiguration) *TemplateNullValueFormatConfiguration {
		return &v
	}).(TemplateNullValueFormatConfigurationPtrOutput)
}

// Determines the null string of null values.
func (o TemplateNullValueFormatConfigurationOutput) NullString() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateNullValueFormatConfiguration) string { return v.NullString }).(pulumi.StringOutput)
}

type TemplateNullValueFormatConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateNullValueFormatConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateNullValueFormatConfiguration)(nil)).Elem()
}

func (o TemplateNullValueFormatConfigurationPtrOutput) ToTemplateNullValueFormatConfigurationPtrOutput() TemplateNullValueFormatConfigurationPtrOutput {
	return o
}

func (o TemplateNullValueFormatConfigurationPtrOutput) ToTemplateNullValueFormatConfigurationPtrOutputWithContext(ctx context.Context) TemplateNullValueFormatConfigurationPtrOutput {
	return o
}

func (o TemplateNullValueFormatConfigurationPtrOutput) Elem() TemplateNullValueFormatConfigurationOutput {
	return o.ApplyT(func(v *TemplateNullValueFormatConfiguration) TemplateNullValueFormatConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateNullValueFormatConfiguration
		return ret
	}).(TemplateNullValueFormatConfigurationOutput)
}

// Determines the null string of null values.
func (o TemplateNullValueFormatConfigurationPtrOutput) NullString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateNullValueFormatConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.NullString
	}).(pulumi.StringPtrOutput)
}

type TemplateNumberDisplayFormatConfiguration struct {
	// The option that determines the decimal places configuration.
	DecimalPlacesConfiguration *TemplateDecimalPlacesConfiguration `pulumi:"decimalPlacesConfiguration"`
	// The options that determine the negative value configuration.
	NegativeValueConfiguration *TemplateNegativeValueConfiguration `pulumi:"negativeValueConfiguration"`
	// The options that determine the null value format configuration.
	NullValueFormatConfiguration *TemplateNullValueFormatConfiguration `pulumi:"nullValueFormatConfiguration"`
	// Determines the number scale value of the number format.
	NumberScale *TemplateNumberScale `pulumi:"numberScale"`
	// Determines the prefix value of the number format.
	Prefix *string `pulumi:"prefix"`
	// The options that determine the numeric separator configuration.
	SeparatorConfiguration *TemplateNumericSeparatorConfiguration `pulumi:"separatorConfiguration"`
	// Determines the suffix value of the number format.
	Suffix *string `pulumi:"suffix"`
}

// TemplateNumberDisplayFormatConfigurationInput is an input type that accepts TemplateNumberDisplayFormatConfigurationArgs and TemplateNumberDisplayFormatConfigurationOutput values.
// You can construct a concrete instance of `TemplateNumberDisplayFormatConfigurationInput` via:
//
//	TemplateNumberDisplayFormatConfigurationArgs{...}
type TemplateNumberDisplayFormatConfigurationInput interface {
	pulumi.Input

	ToTemplateNumberDisplayFormatConfigurationOutput() TemplateNumberDisplayFormatConfigurationOutput
	ToTemplateNumberDisplayFormatConfigurationOutputWithContext(context.Context) TemplateNumberDisplayFormatConfigurationOutput
}

type TemplateNumberDisplayFormatConfigurationArgs struct {
	// The option that determines the decimal places configuration.
	DecimalPlacesConfiguration TemplateDecimalPlacesConfigurationPtrInput `pulumi:"decimalPlacesConfiguration"`
	// The options that determine the negative value configuration.
	NegativeValueConfiguration TemplateNegativeValueConfigurationPtrInput `pulumi:"negativeValueConfiguration"`
	// The options that determine the null value format configuration.
	NullValueFormatConfiguration TemplateNullValueFormatConfigurationPtrInput `pulumi:"nullValueFormatConfiguration"`
	// Determines the number scale value of the number format.
	NumberScale TemplateNumberScalePtrInput `pulumi:"numberScale"`
	// Determines the prefix value of the number format.
	Prefix pulumi.StringPtrInput `pulumi:"prefix"`
	// The options that determine the numeric separator configuration.
	SeparatorConfiguration TemplateNumericSeparatorConfigurationPtrInput `pulumi:"separatorConfiguration"`
	// Determines the suffix value of the number format.
	Suffix pulumi.StringPtrInput `pulumi:"suffix"`
}

func (TemplateNumberDisplayFormatConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateNumberDisplayFormatConfiguration)(nil)).Elem()
}

func (i TemplateNumberDisplayFormatConfigurationArgs) ToTemplateNumberDisplayFormatConfigurationOutput() TemplateNumberDisplayFormatConfigurationOutput {
	return i.ToTemplateNumberDisplayFormatConfigurationOutputWithContext(context.Background())
}

func (i TemplateNumberDisplayFormatConfigurationArgs) ToTemplateNumberDisplayFormatConfigurationOutputWithContext(ctx context.Context) TemplateNumberDisplayFormatConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateNumberDisplayFormatConfigurationOutput)
}

func (i TemplateNumberDisplayFormatConfigurationArgs) ToTemplateNumberDisplayFormatConfigurationPtrOutput() TemplateNumberDisplayFormatConfigurationPtrOutput {
	return i.ToTemplateNumberDisplayFormatConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateNumberDisplayFormatConfigurationArgs) ToTemplateNumberDisplayFormatConfigurationPtrOutputWithContext(ctx context.Context) TemplateNumberDisplayFormatConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateNumberDisplayFormatConfigurationOutput).ToTemplateNumberDisplayFormatConfigurationPtrOutputWithContext(ctx)
}

// TemplateNumberDisplayFormatConfigurationPtrInput is an input type that accepts TemplateNumberDisplayFormatConfigurationArgs, TemplateNumberDisplayFormatConfigurationPtr and TemplateNumberDisplayFormatConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateNumberDisplayFormatConfigurationPtrInput` via:
//
//	        TemplateNumberDisplayFormatConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateNumberDisplayFormatConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateNumberDisplayFormatConfigurationPtrOutput() TemplateNumberDisplayFormatConfigurationPtrOutput
	ToTemplateNumberDisplayFormatConfigurationPtrOutputWithContext(context.Context) TemplateNumberDisplayFormatConfigurationPtrOutput
}

type templateNumberDisplayFormatConfigurationPtrType TemplateNumberDisplayFormatConfigurationArgs

func TemplateNumberDisplayFormatConfigurationPtr(v *TemplateNumberDisplayFormatConfigurationArgs) TemplateNumberDisplayFormatConfigurationPtrInput {
	return (*templateNumberDisplayFormatConfigurationPtrType)(v)
}

func (*templateNumberDisplayFormatConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateNumberDisplayFormatConfiguration)(nil)).Elem()
}

func (i *templateNumberDisplayFormatConfigurationPtrType) ToTemplateNumberDisplayFormatConfigurationPtrOutput() TemplateNumberDisplayFormatConfigurationPtrOutput {
	return i.ToTemplateNumberDisplayFormatConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateNumberDisplayFormatConfigurationPtrType) ToTemplateNumberDisplayFormatConfigurationPtrOutputWithContext(ctx context.Context) TemplateNumberDisplayFormatConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateNumberDisplayFormatConfigurationPtrOutput)
}

type TemplateNumberDisplayFormatConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateNumberDisplayFormatConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateNumberDisplayFormatConfiguration)(nil)).Elem()
}

func (o TemplateNumberDisplayFormatConfigurationOutput) ToTemplateNumberDisplayFormatConfigurationOutput() TemplateNumberDisplayFormatConfigurationOutput {
	return o
}

func (o TemplateNumberDisplayFormatConfigurationOutput) ToTemplateNumberDisplayFormatConfigurationOutputWithContext(ctx context.Context) TemplateNumberDisplayFormatConfigurationOutput {
	return o
}

func (o TemplateNumberDisplayFormatConfigurationOutput) ToTemplateNumberDisplayFormatConfigurationPtrOutput() TemplateNumberDisplayFormatConfigurationPtrOutput {
	return o.ToTemplateNumberDisplayFormatConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateNumberDisplayFormatConfigurationOutput) ToTemplateNumberDisplayFormatConfigurationPtrOutputWithContext(ctx context.Context) TemplateNumberDisplayFormatConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateNumberDisplayFormatConfiguration) *TemplateNumberDisplayFormatConfiguration {
		return &v
	}).(TemplateNumberDisplayFormatConfigurationPtrOutput)
}

// The option that determines the decimal places configuration.
func (o TemplateNumberDisplayFormatConfigurationOutput) DecimalPlacesConfiguration() TemplateDecimalPlacesConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateNumberDisplayFormatConfiguration) *TemplateDecimalPlacesConfiguration {
		return v.DecimalPlacesConfiguration
	}).(TemplateDecimalPlacesConfigurationPtrOutput)
}

// The options that determine the negative value configuration.
func (o TemplateNumberDisplayFormatConfigurationOutput) NegativeValueConfiguration() TemplateNegativeValueConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateNumberDisplayFormatConfiguration) *TemplateNegativeValueConfiguration {
		return v.NegativeValueConfiguration
	}).(TemplateNegativeValueConfigurationPtrOutput)
}

// The options that determine the null value format configuration.
func (o TemplateNumberDisplayFormatConfigurationOutput) NullValueFormatConfiguration() TemplateNullValueFormatConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateNumberDisplayFormatConfiguration) *TemplateNullValueFormatConfiguration {
		return v.NullValueFormatConfiguration
	}).(TemplateNullValueFormatConfigurationPtrOutput)
}

// Determines the number scale value of the number format.
func (o TemplateNumberDisplayFormatConfigurationOutput) NumberScale() TemplateNumberScalePtrOutput {
	return o.ApplyT(func(v TemplateNumberDisplayFormatConfiguration) *TemplateNumberScale { return v.NumberScale }).(TemplateNumberScalePtrOutput)
}

// Determines the prefix value of the number format.
func (o TemplateNumberDisplayFormatConfigurationOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateNumberDisplayFormatConfiguration) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

// The options that determine the numeric separator configuration.
func (o TemplateNumberDisplayFormatConfigurationOutput) SeparatorConfiguration() TemplateNumericSeparatorConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateNumberDisplayFormatConfiguration) *TemplateNumericSeparatorConfiguration {
		return v.SeparatorConfiguration
	}).(TemplateNumericSeparatorConfigurationPtrOutput)
}

// Determines the suffix value of the number format.
func (o TemplateNumberDisplayFormatConfigurationOutput) Suffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateNumberDisplayFormatConfiguration) *string { return v.Suffix }).(pulumi.StringPtrOutput)
}

type TemplateNumberDisplayFormatConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateNumberDisplayFormatConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateNumberDisplayFormatConfiguration)(nil)).Elem()
}

func (o TemplateNumberDisplayFormatConfigurationPtrOutput) ToTemplateNumberDisplayFormatConfigurationPtrOutput() TemplateNumberDisplayFormatConfigurationPtrOutput {
	return o
}

func (o TemplateNumberDisplayFormatConfigurationPtrOutput) ToTemplateNumberDisplayFormatConfigurationPtrOutputWithContext(ctx context.Context) TemplateNumberDisplayFormatConfigurationPtrOutput {
	return o
}

func (o TemplateNumberDisplayFormatConfigurationPtrOutput) Elem() TemplateNumberDisplayFormatConfigurationOutput {
	return o.ApplyT(func(v *TemplateNumberDisplayFormatConfiguration) TemplateNumberDisplayFormatConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateNumberDisplayFormatConfiguration
		return ret
	}).(TemplateNumberDisplayFormatConfigurationOutput)
}

// The option that determines the decimal places configuration.
func (o TemplateNumberDisplayFormatConfigurationPtrOutput) DecimalPlacesConfiguration() TemplateDecimalPlacesConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateNumberDisplayFormatConfiguration) *TemplateDecimalPlacesConfiguration {
		if v == nil {
			return nil
		}
		return v.DecimalPlacesConfiguration
	}).(TemplateDecimalPlacesConfigurationPtrOutput)
}

// The options that determine the negative value configuration.
func (o TemplateNumberDisplayFormatConfigurationPtrOutput) NegativeValueConfiguration() TemplateNegativeValueConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateNumberDisplayFormatConfiguration) *TemplateNegativeValueConfiguration {
		if v == nil {
			return nil
		}
		return v.NegativeValueConfiguration
	}).(TemplateNegativeValueConfigurationPtrOutput)
}

// The options that determine the null value format configuration.
func (o TemplateNumberDisplayFormatConfigurationPtrOutput) NullValueFormatConfiguration() TemplateNullValueFormatConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateNumberDisplayFormatConfiguration) *TemplateNullValueFormatConfiguration {
		if v == nil {
			return nil
		}
		return v.NullValueFormatConfiguration
	}).(TemplateNullValueFormatConfigurationPtrOutput)
}

// Determines the number scale value of the number format.
func (o TemplateNumberDisplayFormatConfigurationPtrOutput) NumberScale() TemplateNumberScalePtrOutput {
	return o.ApplyT(func(v *TemplateNumberDisplayFormatConfiguration) *TemplateNumberScale {
		if v == nil {
			return nil
		}
		return v.NumberScale
	}).(TemplateNumberScalePtrOutput)
}

// Determines the prefix value of the number format.
func (o TemplateNumberDisplayFormatConfigurationPtrOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateNumberDisplayFormatConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Prefix
	}).(pulumi.StringPtrOutput)
}

// The options that determine the numeric separator configuration.
func (o TemplateNumberDisplayFormatConfigurationPtrOutput) SeparatorConfiguration() TemplateNumericSeparatorConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateNumberDisplayFormatConfiguration) *TemplateNumericSeparatorConfiguration {
		if v == nil {
			return nil
		}
		return v.SeparatorConfiguration
	}).(TemplateNumericSeparatorConfigurationPtrOutput)
}

// Determines the suffix value of the number format.
func (o TemplateNumberDisplayFormatConfigurationPtrOutput) Suffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateNumberDisplayFormatConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Suffix
	}).(pulumi.StringPtrOutput)
}

type TemplateNumberFormatConfiguration struct {
	// The options that determine the numeric format configuration.
	FormatConfiguration *TemplateNumericFormatConfiguration `pulumi:"formatConfiguration"`
}

// TemplateNumberFormatConfigurationInput is an input type that accepts TemplateNumberFormatConfigurationArgs and TemplateNumberFormatConfigurationOutput values.
// You can construct a concrete instance of `TemplateNumberFormatConfigurationInput` via:
//
//	TemplateNumberFormatConfigurationArgs{...}
type TemplateNumberFormatConfigurationInput interface {
	pulumi.Input

	ToTemplateNumberFormatConfigurationOutput() TemplateNumberFormatConfigurationOutput
	ToTemplateNumberFormatConfigurationOutputWithContext(context.Context) TemplateNumberFormatConfigurationOutput
}

type TemplateNumberFormatConfigurationArgs struct {
	// The options that determine the numeric format configuration.
	FormatConfiguration TemplateNumericFormatConfigurationPtrInput `pulumi:"formatConfiguration"`
}

func (TemplateNumberFormatConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateNumberFormatConfiguration)(nil)).Elem()
}

func (i TemplateNumberFormatConfigurationArgs) ToTemplateNumberFormatConfigurationOutput() TemplateNumberFormatConfigurationOutput {
	return i.ToTemplateNumberFormatConfigurationOutputWithContext(context.Background())
}

func (i TemplateNumberFormatConfigurationArgs) ToTemplateNumberFormatConfigurationOutputWithContext(ctx context.Context) TemplateNumberFormatConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateNumberFormatConfigurationOutput)
}

func (i TemplateNumberFormatConfigurationArgs) ToTemplateNumberFormatConfigurationPtrOutput() TemplateNumberFormatConfigurationPtrOutput {
	return i.ToTemplateNumberFormatConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateNumberFormatConfigurationArgs) ToTemplateNumberFormatConfigurationPtrOutputWithContext(ctx context.Context) TemplateNumberFormatConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateNumberFormatConfigurationOutput).ToTemplateNumberFormatConfigurationPtrOutputWithContext(ctx)
}

// TemplateNumberFormatConfigurationPtrInput is an input type that accepts TemplateNumberFormatConfigurationArgs, TemplateNumberFormatConfigurationPtr and TemplateNumberFormatConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateNumberFormatConfigurationPtrInput` via:
//
//	        TemplateNumberFormatConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateNumberFormatConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateNumberFormatConfigurationPtrOutput() TemplateNumberFormatConfigurationPtrOutput
	ToTemplateNumberFormatConfigurationPtrOutputWithContext(context.Context) TemplateNumberFormatConfigurationPtrOutput
}

type templateNumberFormatConfigurationPtrType TemplateNumberFormatConfigurationArgs

func TemplateNumberFormatConfigurationPtr(v *TemplateNumberFormatConfigurationArgs) TemplateNumberFormatConfigurationPtrInput {
	return (*templateNumberFormatConfigurationPtrType)(v)
}

func (*templateNumberFormatConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateNumberFormatConfiguration)(nil)).Elem()
}

func (i *templateNumberFormatConfigurationPtrType) ToTemplateNumberFormatConfigurationPtrOutput() TemplateNumberFormatConfigurationPtrOutput {
	return i.ToTemplateNumberFormatConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateNumberFormatConfigurationPtrType) ToTemplateNumberFormatConfigurationPtrOutputWithContext(ctx context.Context) TemplateNumberFormatConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateNumberFormatConfigurationPtrOutput)
}

type TemplateNumberFormatConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateNumberFormatConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateNumberFormatConfiguration)(nil)).Elem()
}

func (o TemplateNumberFormatConfigurationOutput) ToTemplateNumberFormatConfigurationOutput() TemplateNumberFormatConfigurationOutput {
	return o
}

func (o TemplateNumberFormatConfigurationOutput) ToTemplateNumberFormatConfigurationOutputWithContext(ctx context.Context) TemplateNumberFormatConfigurationOutput {
	return o
}

func (o TemplateNumberFormatConfigurationOutput) ToTemplateNumberFormatConfigurationPtrOutput() TemplateNumberFormatConfigurationPtrOutput {
	return o.ToTemplateNumberFormatConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateNumberFormatConfigurationOutput) ToTemplateNumberFormatConfigurationPtrOutputWithContext(ctx context.Context) TemplateNumberFormatConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateNumberFormatConfiguration) *TemplateNumberFormatConfiguration {
		return &v
	}).(TemplateNumberFormatConfigurationPtrOutput)
}

// The options that determine the numeric format configuration.
func (o TemplateNumberFormatConfigurationOutput) FormatConfiguration() TemplateNumericFormatConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateNumberFormatConfiguration) *TemplateNumericFormatConfiguration {
		return v.FormatConfiguration
	}).(TemplateNumericFormatConfigurationPtrOutput)
}

type TemplateNumberFormatConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateNumberFormatConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateNumberFormatConfiguration)(nil)).Elem()
}

func (o TemplateNumberFormatConfigurationPtrOutput) ToTemplateNumberFormatConfigurationPtrOutput() TemplateNumberFormatConfigurationPtrOutput {
	return o
}

func (o TemplateNumberFormatConfigurationPtrOutput) ToTemplateNumberFormatConfigurationPtrOutputWithContext(ctx context.Context) TemplateNumberFormatConfigurationPtrOutput {
	return o
}

func (o TemplateNumberFormatConfigurationPtrOutput) Elem() TemplateNumberFormatConfigurationOutput {
	return o.ApplyT(func(v *TemplateNumberFormatConfiguration) TemplateNumberFormatConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateNumberFormatConfiguration
		return ret
	}).(TemplateNumberFormatConfigurationOutput)
}

// The options that determine the numeric format configuration.
func (o TemplateNumberFormatConfigurationPtrOutput) FormatConfiguration() TemplateNumericFormatConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateNumberFormatConfiguration) *TemplateNumericFormatConfiguration {
		if v == nil {
			return nil
		}
		return v.FormatConfiguration
	}).(TemplateNumericFormatConfigurationPtrOutput)
}

type TemplateNumericAxisOptions struct {
	// The range setup of a numeric axis.
	Range *TemplateAxisDisplayRange `pulumi:"range"`
	// The scale setup of a numeric axis.
	Scale *TemplateAxisScale `pulumi:"scale"`
}

// TemplateNumericAxisOptionsInput is an input type that accepts TemplateNumericAxisOptionsArgs and TemplateNumericAxisOptionsOutput values.
// You can construct a concrete instance of `TemplateNumericAxisOptionsInput` via:
//
//	TemplateNumericAxisOptionsArgs{...}
type TemplateNumericAxisOptionsInput interface {
	pulumi.Input

	ToTemplateNumericAxisOptionsOutput() TemplateNumericAxisOptionsOutput
	ToTemplateNumericAxisOptionsOutputWithContext(context.Context) TemplateNumericAxisOptionsOutput
}

type TemplateNumericAxisOptionsArgs struct {
	// The range setup of a numeric axis.
	Range TemplateAxisDisplayRangePtrInput `pulumi:"range"`
	// The scale setup of a numeric axis.
	Scale TemplateAxisScalePtrInput `pulumi:"scale"`
}

func (TemplateNumericAxisOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateNumericAxisOptions)(nil)).Elem()
}

func (i TemplateNumericAxisOptionsArgs) ToTemplateNumericAxisOptionsOutput() TemplateNumericAxisOptionsOutput {
	return i.ToTemplateNumericAxisOptionsOutputWithContext(context.Background())
}

func (i TemplateNumericAxisOptionsArgs) ToTemplateNumericAxisOptionsOutputWithContext(ctx context.Context) TemplateNumericAxisOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateNumericAxisOptionsOutput)
}

func (i TemplateNumericAxisOptionsArgs) ToTemplateNumericAxisOptionsPtrOutput() TemplateNumericAxisOptionsPtrOutput {
	return i.ToTemplateNumericAxisOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateNumericAxisOptionsArgs) ToTemplateNumericAxisOptionsPtrOutputWithContext(ctx context.Context) TemplateNumericAxisOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateNumericAxisOptionsOutput).ToTemplateNumericAxisOptionsPtrOutputWithContext(ctx)
}

// TemplateNumericAxisOptionsPtrInput is an input type that accepts TemplateNumericAxisOptionsArgs, TemplateNumericAxisOptionsPtr and TemplateNumericAxisOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateNumericAxisOptionsPtrInput` via:
//
//	        TemplateNumericAxisOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateNumericAxisOptionsPtrInput interface {
	pulumi.Input

	ToTemplateNumericAxisOptionsPtrOutput() TemplateNumericAxisOptionsPtrOutput
	ToTemplateNumericAxisOptionsPtrOutputWithContext(context.Context) TemplateNumericAxisOptionsPtrOutput
}

type templateNumericAxisOptionsPtrType TemplateNumericAxisOptionsArgs

func TemplateNumericAxisOptionsPtr(v *TemplateNumericAxisOptionsArgs) TemplateNumericAxisOptionsPtrInput {
	return (*templateNumericAxisOptionsPtrType)(v)
}

func (*templateNumericAxisOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateNumericAxisOptions)(nil)).Elem()
}

func (i *templateNumericAxisOptionsPtrType) ToTemplateNumericAxisOptionsPtrOutput() TemplateNumericAxisOptionsPtrOutput {
	return i.ToTemplateNumericAxisOptionsPtrOutputWithContext(context.Background())
}

func (i *templateNumericAxisOptionsPtrType) ToTemplateNumericAxisOptionsPtrOutputWithContext(ctx context.Context) TemplateNumericAxisOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateNumericAxisOptionsPtrOutput)
}

type TemplateNumericAxisOptionsOutput struct{ *pulumi.OutputState }

func (TemplateNumericAxisOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateNumericAxisOptions)(nil)).Elem()
}

func (o TemplateNumericAxisOptionsOutput) ToTemplateNumericAxisOptionsOutput() TemplateNumericAxisOptionsOutput {
	return o
}

func (o TemplateNumericAxisOptionsOutput) ToTemplateNumericAxisOptionsOutputWithContext(ctx context.Context) TemplateNumericAxisOptionsOutput {
	return o
}

func (o TemplateNumericAxisOptionsOutput) ToTemplateNumericAxisOptionsPtrOutput() TemplateNumericAxisOptionsPtrOutput {
	return o.ToTemplateNumericAxisOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateNumericAxisOptionsOutput) ToTemplateNumericAxisOptionsPtrOutputWithContext(ctx context.Context) TemplateNumericAxisOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateNumericAxisOptions) *TemplateNumericAxisOptions {
		return &v
	}).(TemplateNumericAxisOptionsPtrOutput)
}

// The range setup of a numeric axis.
func (o TemplateNumericAxisOptionsOutput) Range() TemplateAxisDisplayRangePtrOutput {
	return o.ApplyT(func(v TemplateNumericAxisOptions) *TemplateAxisDisplayRange { return v.Range }).(TemplateAxisDisplayRangePtrOutput)
}

// The scale setup of a numeric axis.
func (o TemplateNumericAxisOptionsOutput) Scale() TemplateAxisScalePtrOutput {
	return o.ApplyT(func(v TemplateNumericAxisOptions) *TemplateAxisScale { return v.Scale }).(TemplateAxisScalePtrOutput)
}

type TemplateNumericAxisOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateNumericAxisOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateNumericAxisOptions)(nil)).Elem()
}

func (o TemplateNumericAxisOptionsPtrOutput) ToTemplateNumericAxisOptionsPtrOutput() TemplateNumericAxisOptionsPtrOutput {
	return o
}

func (o TemplateNumericAxisOptionsPtrOutput) ToTemplateNumericAxisOptionsPtrOutputWithContext(ctx context.Context) TemplateNumericAxisOptionsPtrOutput {
	return o
}

func (o TemplateNumericAxisOptionsPtrOutput) Elem() TemplateNumericAxisOptionsOutput {
	return o.ApplyT(func(v *TemplateNumericAxisOptions) TemplateNumericAxisOptions {
		if v != nil {
			return *v
		}
		var ret TemplateNumericAxisOptions
		return ret
	}).(TemplateNumericAxisOptionsOutput)
}

// The range setup of a numeric axis.
func (o TemplateNumericAxisOptionsPtrOutput) Range() TemplateAxisDisplayRangePtrOutput {
	return o.ApplyT(func(v *TemplateNumericAxisOptions) *TemplateAxisDisplayRange {
		if v == nil {
			return nil
		}
		return v.Range
	}).(TemplateAxisDisplayRangePtrOutput)
}

// The scale setup of a numeric axis.
func (o TemplateNumericAxisOptionsPtrOutput) Scale() TemplateAxisScalePtrOutput {
	return o.ApplyT(func(v *TemplateNumericAxisOptions) *TemplateAxisScale {
		if v == nil {
			return nil
		}
		return v.Scale
	}).(TemplateAxisScalePtrOutput)
}

type TemplateNumericEqualityDrillDownFilter struct {
	// The column that the filter is applied to.
	Column TemplateColumnIdentifier `pulumi:"column"`
	// The value of the double input numeric drill down filter.
	Value float64 `pulumi:"value"`
}

// TemplateNumericEqualityDrillDownFilterInput is an input type that accepts TemplateNumericEqualityDrillDownFilterArgs and TemplateNumericEqualityDrillDownFilterOutput values.
// You can construct a concrete instance of `TemplateNumericEqualityDrillDownFilterInput` via:
//
//	TemplateNumericEqualityDrillDownFilterArgs{...}
type TemplateNumericEqualityDrillDownFilterInput interface {
	pulumi.Input

	ToTemplateNumericEqualityDrillDownFilterOutput() TemplateNumericEqualityDrillDownFilterOutput
	ToTemplateNumericEqualityDrillDownFilterOutputWithContext(context.Context) TemplateNumericEqualityDrillDownFilterOutput
}

type TemplateNumericEqualityDrillDownFilterArgs struct {
	// The column that the filter is applied to.
	Column TemplateColumnIdentifierInput `pulumi:"column"`
	// The value of the double input numeric drill down filter.
	Value pulumi.Float64Input `pulumi:"value"`
}

func (TemplateNumericEqualityDrillDownFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateNumericEqualityDrillDownFilter)(nil)).Elem()
}

func (i TemplateNumericEqualityDrillDownFilterArgs) ToTemplateNumericEqualityDrillDownFilterOutput() TemplateNumericEqualityDrillDownFilterOutput {
	return i.ToTemplateNumericEqualityDrillDownFilterOutputWithContext(context.Background())
}

func (i TemplateNumericEqualityDrillDownFilterArgs) ToTemplateNumericEqualityDrillDownFilterOutputWithContext(ctx context.Context) TemplateNumericEqualityDrillDownFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateNumericEqualityDrillDownFilterOutput)
}

func (i TemplateNumericEqualityDrillDownFilterArgs) ToTemplateNumericEqualityDrillDownFilterPtrOutput() TemplateNumericEqualityDrillDownFilterPtrOutput {
	return i.ToTemplateNumericEqualityDrillDownFilterPtrOutputWithContext(context.Background())
}

func (i TemplateNumericEqualityDrillDownFilterArgs) ToTemplateNumericEqualityDrillDownFilterPtrOutputWithContext(ctx context.Context) TemplateNumericEqualityDrillDownFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateNumericEqualityDrillDownFilterOutput).ToTemplateNumericEqualityDrillDownFilterPtrOutputWithContext(ctx)
}

// TemplateNumericEqualityDrillDownFilterPtrInput is an input type that accepts TemplateNumericEqualityDrillDownFilterArgs, TemplateNumericEqualityDrillDownFilterPtr and TemplateNumericEqualityDrillDownFilterPtrOutput values.
// You can construct a concrete instance of `TemplateNumericEqualityDrillDownFilterPtrInput` via:
//
//	        TemplateNumericEqualityDrillDownFilterArgs{...}
//
//	or:
//
//	        nil
type TemplateNumericEqualityDrillDownFilterPtrInput interface {
	pulumi.Input

	ToTemplateNumericEqualityDrillDownFilterPtrOutput() TemplateNumericEqualityDrillDownFilterPtrOutput
	ToTemplateNumericEqualityDrillDownFilterPtrOutputWithContext(context.Context) TemplateNumericEqualityDrillDownFilterPtrOutput
}

type templateNumericEqualityDrillDownFilterPtrType TemplateNumericEqualityDrillDownFilterArgs

func TemplateNumericEqualityDrillDownFilterPtr(v *TemplateNumericEqualityDrillDownFilterArgs) TemplateNumericEqualityDrillDownFilterPtrInput {
	return (*templateNumericEqualityDrillDownFilterPtrType)(v)
}

func (*templateNumericEqualityDrillDownFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateNumericEqualityDrillDownFilter)(nil)).Elem()
}

func (i *templateNumericEqualityDrillDownFilterPtrType) ToTemplateNumericEqualityDrillDownFilterPtrOutput() TemplateNumericEqualityDrillDownFilterPtrOutput {
	return i.ToTemplateNumericEqualityDrillDownFilterPtrOutputWithContext(context.Background())
}

func (i *templateNumericEqualityDrillDownFilterPtrType) ToTemplateNumericEqualityDrillDownFilterPtrOutputWithContext(ctx context.Context) TemplateNumericEqualityDrillDownFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateNumericEqualityDrillDownFilterPtrOutput)
}

type TemplateNumericEqualityDrillDownFilterOutput struct{ *pulumi.OutputState }

func (TemplateNumericEqualityDrillDownFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateNumericEqualityDrillDownFilter)(nil)).Elem()
}

func (o TemplateNumericEqualityDrillDownFilterOutput) ToTemplateNumericEqualityDrillDownFilterOutput() TemplateNumericEqualityDrillDownFilterOutput {
	return o
}

func (o TemplateNumericEqualityDrillDownFilterOutput) ToTemplateNumericEqualityDrillDownFilterOutputWithContext(ctx context.Context) TemplateNumericEqualityDrillDownFilterOutput {
	return o
}

func (o TemplateNumericEqualityDrillDownFilterOutput) ToTemplateNumericEqualityDrillDownFilterPtrOutput() TemplateNumericEqualityDrillDownFilterPtrOutput {
	return o.ToTemplateNumericEqualityDrillDownFilterPtrOutputWithContext(context.Background())
}

func (o TemplateNumericEqualityDrillDownFilterOutput) ToTemplateNumericEqualityDrillDownFilterPtrOutputWithContext(ctx context.Context) TemplateNumericEqualityDrillDownFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateNumericEqualityDrillDownFilter) *TemplateNumericEqualityDrillDownFilter {
		return &v
	}).(TemplateNumericEqualityDrillDownFilterPtrOutput)
}

// The column that the filter is applied to.
func (o TemplateNumericEqualityDrillDownFilterOutput) Column() TemplateColumnIdentifierOutput {
	return o.ApplyT(func(v TemplateNumericEqualityDrillDownFilter) TemplateColumnIdentifier { return v.Column }).(TemplateColumnIdentifierOutput)
}

// The value of the double input numeric drill down filter.
func (o TemplateNumericEqualityDrillDownFilterOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v TemplateNumericEqualityDrillDownFilter) float64 { return v.Value }).(pulumi.Float64Output)
}

type TemplateNumericEqualityDrillDownFilterPtrOutput struct{ *pulumi.OutputState }

func (TemplateNumericEqualityDrillDownFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateNumericEqualityDrillDownFilter)(nil)).Elem()
}

func (o TemplateNumericEqualityDrillDownFilterPtrOutput) ToTemplateNumericEqualityDrillDownFilterPtrOutput() TemplateNumericEqualityDrillDownFilterPtrOutput {
	return o
}

func (o TemplateNumericEqualityDrillDownFilterPtrOutput) ToTemplateNumericEqualityDrillDownFilterPtrOutputWithContext(ctx context.Context) TemplateNumericEqualityDrillDownFilterPtrOutput {
	return o
}

func (o TemplateNumericEqualityDrillDownFilterPtrOutput) Elem() TemplateNumericEqualityDrillDownFilterOutput {
	return o.ApplyT(func(v *TemplateNumericEqualityDrillDownFilter) TemplateNumericEqualityDrillDownFilter {
		if v != nil {
			return *v
		}
		var ret TemplateNumericEqualityDrillDownFilter
		return ret
	}).(TemplateNumericEqualityDrillDownFilterOutput)
}

// The column that the filter is applied to.
func (o TemplateNumericEqualityDrillDownFilterPtrOutput) Column() TemplateColumnIdentifierPtrOutput {
	return o.ApplyT(func(v *TemplateNumericEqualityDrillDownFilter) *TemplateColumnIdentifier {
		if v == nil {
			return nil
		}
		return &v.Column
	}).(TemplateColumnIdentifierPtrOutput)
}

// The value of the double input numeric drill down filter.
func (o TemplateNumericEqualityDrillDownFilterPtrOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateNumericEqualityDrillDownFilter) *float64 {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.Float64PtrOutput)
}

type TemplateNumericEqualityFilter struct {
	// The aggregation function of the filter.
	AggregationFunction *TemplateAggregationFunction `pulumi:"aggregationFunction"`
	// The column that the filter is applied to.
	Column TemplateColumnIdentifier `pulumi:"column"`
	// The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
	DefaultFilterControlConfiguration *TemplateDefaultFilterControlConfiguration `pulumi:"defaultFilterControlConfiguration"`
	// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
	FilterId string `pulumi:"filterId"`
	// The match operator that is used to determine if a filter should be applied.
	MatchOperator TemplateNumericEqualityMatchOperator `pulumi:"matchOperator"`
	// This option determines how null values should be treated when filtering data.
	//
	// - `ALL_VALUES` : Include null values in filtered results.
	// - `NULLS_ONLY` : Only include null values in filtered results.
	// - `NON_NULLS_ONLY` : Exclude null values from filtered results.
	NullOption TemplateFilterNullOption `pulumi:"nullOption"`
	// The parameter whose value should be used for the filter value.
	ParameterName *string `pulumi:"parameterName"`
	// Select all of the values. Null is not the assigned value of select all.
	//
	// - `FILTER_ALL_VALUES`
	SelectAllOptions *TemplateNumericFilterSelectAllOptions `pulumi:"selectAllOptions"`
	// The input value.
	Value *float64 `pulumi:"value"`
}

// TemplateNumericEqualityFilterInput is an input type that accepts TemplateNumericEqualityFilterArgs and TemplateNumericEqualityFilterOutput values.
// You can construct a concrete instance of `TemplateNumericEqualityFilterInput` via:
//
//	TemplateNumericEqualityFilterArgs{...}
type TemplateNumericEqualityFilterInput interface {
	pulumi.Input

	ToTemplateNumericEqualityFilterOutput() TemplateNumericEqualityFilterOutput
	ToTemplateNumericEqualityFilterOutputWithContext(context.Context) TemplateNumericEqualityFilterOutput
}

type TemplateNumericEqualityFilterArgs struct {
	// The aggregation function of the filter.
	AggregationFunction TemplateAggregationFunctionPtrInput `pulumi:"aggregationFunction"`
	// The column that the filter is applied to.
	Column TemplateColumnIdentifierInput `pulumi:"column"`
	// The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
	DefaultFilterControlConfiguration TemplateDefaultFilterControlConfigurationPtrInput `pulumi:"defaultFilterControlConfiguration"`
	// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
	FilterId pulumi.StringInput `pulumi:"filterId"`
	// The match operator that is used to determine if a filter should be applied.
	MatchOperator TemplateNumericEqualityMatchOperatorInput `pulumi:"matchOperator"`
	// This option determines how null values should be treated when filtering data.
	//
	// - `ALL_VALUES` : Include null values in filtered results.
	// - `NULLS_ONLY` : Only include null values in filtered results.
	// - `NON_NULLS_ONLY` : Exclude null values from filtered results.
	NullOption TemplateFilterNullOptionInput `pulumi:"nullOption"`
	// The parameter whose value should be used for the filter value.
	ParameterName pulumi.StringPtrInput `pulumi:"parameterName"`
	// Select all of the values. Null is not the assigned value of select all.
	//
	// - `FILTER_ALL_VALUES`
	SelectAllOptions TemplateNumericFilterSelectAllOptionsPtrInput `pulumi:"selectAllOptions"`
	// The input value.
	Value pulumi.Float64PtrInput `pulumi:"value"`
}

func (TemplateNumericEqualityFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateNumericEqualityFilter)(nil)).Elem()
}

func (i TemplateNumericEqualityFilterArgs) ToTemplateNumericEqualityFilterOutput() TemplateNumericEqualityFilterOutput {
	return i.ToTemplateNumericEqualityFilterOutputWithContext(context.Background())
}

func (i TemplateNumericEqualityFilterArgs) ToTemplateNumericEqualityFilterOutputWithContext(ctx context.Context) TemplateNumericEqualityFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateNumericEqualityFilterOutput)
}

func (i TemplateNumericEqualityFilterArgs) ToTemplateNumericEqualityFilterPtrOutput() TemplateNumericEqualityFilterPtrOutput {
	return i.ToTemplateNumericEqualityFilterPtrOutputWithContext(context.Background())
}

func (i TemplateNumericEqualityFilterArgs) ToTemplateNumericEqualityFilterPtrOutputWithContext(ctx context.Context) TemplateNumericEqualityFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateNumericEqualityFilterOutput).ToTemplateNumericEqualityFilterPtrOutputWithContext(ctx)
}

// TemplateNumericEqualityFilterPtrInput is an input type that accepts TemplateNumericEqualityFilterArgs, TemplateNumericEqualityFilterPtr and TemplateNumericEqualityFilterPtrOutput values.
// You can construct a concrete instance of `TemplateNumericEqualityFilterPtrInput` via:
//
//	        TemplateNumericEqualityFilterArgs{...}
//
//	or:
//
//	        nil
type TemplateNumericEqualityFilterPtrInput interface {
	pulumi.Input

	ToTemplateNumericEqualityFilterPtrOutput() TemplateNumericEqualityFilterPtrOutput
	ToTemplateNumericEqualityFilterPtrOutputWithContext(context.Context) TemplateNumericEqualityFilterPtrOutput
}

type templateNumericEqualityFilterPtrType TemplateNumericEqualityFilterArgs

func TemplateNumericEqualityFilterPtr(v *TemplateNumericEqualityFilterArgs) TemplateNumericEqualityFilterPtrInput {
	return (*templateNumericEqualityFilterPtrType)(v)
}

func (*templateNumericEqualityFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateNumericEqualityFilter)(nil)).Elem()
}

func (i *templateNumericEqualityFilterPtrType) ToTemplateNumericEqualityFilterPtrOutput() TemplateNumericEqualityFilterPtrOutput {
	return i.ToTemplateNumericEqualityFilterPtrOutputWithContext(context.Background())
}

func (i *templateNumericEqualityFilterPtrType) ToTemplateNumericEqualityFilterPtrOutputWithContext(ctx context.Context) TemplateNumericEqualityFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateNumericEqualityFilterPtrOutput)
}

type TemplateNumericEqualityFilterOutput struct{ *pulumi.OutputState }

func (TemplateNumericEqualityFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateNumericEqualityFilter)(nil)).Elem()
}

func (o TemplateNumericEqualityFilterOutput) ToTemplateNumericEqualityFilterOutput() TemplateNumericEqualityFilterOutput {
	return o
}

func (o TemplateNumericEqualityFilterOutput) ToTemplateNumericEqualityFilterOutputWithContext(ctx context.Context) TemplateNumericEqualityFilterOutput {
	return o
}

func (o TemplateNumericEqualityFilterOutput) ToTemplateNumericEqualityFilterPtrOutput() TemplateNumericEqualityFilterPtrOutput {
	return o.ToTemplateNumericEqualityFilterPtrOutputWithContext(context.Background())
}

func (o TemplateNumericEqualityFilterOutput) ToTemplateNumericEqualityFilterPtrOutputWithContext(ctx context.Context) TemplateNumericEqualityFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateNumericEqualityFilter) *TemplateNumericEqualityFilter {
		return &v
	}).(TemplateNumericEqualityFilterPtrOutput)
}

// The aggregation function of the filter.
func (o TemplateNumericEqualityFilterOutput) AggregationFunction() TemplateAggregationFunctionPtrOutput {
	return o.ApplyT(func(v TemplateNumericEqualityFilter) *TemplateAggregationFunction { return v.AggregationFunction }).(TemplateAggregationFunctionPtrOutput)
}

// The column that the filter is applied to.
func (o TemplateNumericEqualityFilterOutput) Column() TemplateColumnIdentifierOutput {
	return o.ApplyT(func(v TemplateNumericEqualityFilter) TemplateColumnIdentifier { return v.Column }).(TemplateColumnIdentifierOutput)
}

// The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
func (o TemplateNumericEqualityFilterOutput) DefaultFilterControlConfiguration() TemplateDefaultFilterControlConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateNumericEqualityFilter) *TemplateDefaultFilterControlConfiguration {
		return v.DefaultFilterControlConfiguration
	}).(TemplateDefaultFilterControlConfigurationPtrOutput)
}

// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
func (o TemplateNumericEqualityFilterOutput) FilterId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateNumericEqualityFilter) string { return v.FilterId }).(pulumi.StringOutput)
}

// The match operator that is used to determine if a filter should be applied.
func (o TemplateNumericEqualityFilterOutput) MatchOperator() TemplateNumericEqualityMatchOperatorOutput {
	return o.ApplyT(func(v TemplateNumericEqualityFilter) TemplateNumericEqualityMatchOperator { return v.MatchOperator }).(TemplateNumericEqualityMatchOperatorOutput)
}

// This option determines how null values should be treated when filtering data.
//
// - `ALL_VALUES` : Include null values in filtered results.
// - `NULLS_ONLY` : Only include null values in filtered results.
// - `NON_NULLS_ONLY` : Exclude null values from filtered results.
func (o TemplateNumericEqualityFilterOutput) NullOption() TemplateFilterNullOptionOutput {
	return o.ApplyT(func(v TemplateNumericEqualityFilter) TemplateFilterNullOption { return v.NullOption }).(TemplateFilterNullOptionOutput)
}

// The parameter whose value should be used for the filter value.
func (o TemplateNumericEqualityFilterOutput) ParameterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateNumericEqualityFilter) *string { return v.ParameterName }).(pulumi.StringPtrOutput)
}

// Select all of the values. Null is not the assigned value of select all.
//
// - `FILTER_ALL_VALUES`
func (o TemplateNumericEqualityFilterOutput) SelectAllOptions() TemplateNumericFilterSelectAllOptionsPtrOutput {
	return o.ApplyT(func(v TemplateNumericEqualityFilter) *TemplateNumericFilterSelectAllOptions {
		return v.SelectAllOptions
	}).(TemplateNumericFilterSelectAllOptionsPtrOutput)
}

// The input value.
func (o TemplateNumericEqualityFilterOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateNumericEqualityFilter) *float64 { return v.Value }).(pulumi.Float64PtrOutput)
}

type TemplateNumericEqualityFilterPtrOutput struct{ *pulumi.OutputState }

func (TemplateNumericEqualityFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateNumericEqualityFilter)(nil)).Elem()
}

func (o TemplateNumericEqualityFilterPtrOutput) ToTemplateNumericEqualityFilterPtrOutput() TemplateNumericEqualityFilterPtrOutput {
	return o
}

func (o TemplateNumericEqualityFilterPtrOutput) ToTemplateNumericEqualityFilterPtrOutputWithContext(ctx context.Context) TemplateNumericEqualityFilterPtrOutput {
	return o
}

func (o TemplateNumericEqualityFilterPtrOutput) Elem() TemplateNumericEqualityFilterOutput {
	return o.ApplyT(func(v *TemplateNumericEqualityFilter) TemplateNumericEqualityFilter {
		if v != nil {
			return *v
		}
		var ret TemplateNumericEqualityFilter
		return ret
	}).(TemplateNumericEqualityFilterOutput)
}

// The aggregation function of the filter.
func (o TemplateNumericEqualityFilterPtrOutput) AggregationFunction() TemplateAggregationFunctionPtrOutput {
	return o.ApplyT(func(v *TemplateNumericEqualityFilter) *TemplateAggregationFunction {
		if v == nil {
			return nil
		}
		return v.AggregationFunction
	}).(TemplateAggregationFunctionPtrOutput)
}

// The column that the filter is applied to.
func (o TemplateNumericEqualityFilterPtrOutput) Column() TemplateColumnIdentifierPtrOutput {
	return o.ApplyT(func(v *TemplateNumericEqualityFilter) *TemplateColumnIdentifier {
		if v == nil {
			return nil
		}
		return &v.Column
	}).(TemplateColumnIdentifierPtrOutput)
}

// The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
func (o TemplateNumericEqualityFilterPtrOutput) DefaultFilterControlConfiguration() TemplateDefaultFilterControlConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateNumericEqualityFilter) *TemplateDefaultFilterControlConfiguration {
		if v == nil {
			return nil
		}
		return v.DefaultFilterControlConfiguration
	}).(TemplateDefaultFilterControlConfigurationPtrOutput)
}

// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
func (o TemplateNumericEqualityFilterPtrOutput) FilterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateNumericEqualityFilter) *string {
		if v == nil {
			return nil
		}
		return &v.FilterId
	}).(pulumi.StringPtrOutput)
}

// The match operator that is used to determine if a filter should be applied.
func (o TemplateNumericEqualityFilterPtrOutput) MatchOperator() TemplateNumericEqualityMatchOperatorPtrOutput {
	return o.ApplyT(func(v *TemplateNumericEqualityFilter) *TemplateNumericEqualityMatchOperator {
		if v == nil {
			return nil
		}
		return &v.MatchOperator
	}).(TemplateNumericEqualityMatchOperatorPtrOutput)
}

// This option determines how null values should be treated when filtering data.
//
// - `ALL_VALUES` : Include null values in filtered results.
// - `NULLS_ONLY` : Only include null values in filtered results.
// - `NON_NULLS_ONLY` : Exclude null values from filtered results.
func (o TemplateNumericEqualityFilterPtrOutput) NullOption() TemplateFilterNullOptionPtrOutput {
	return o.ApplyT(func(v *TemplateNumericEqualityFilter) *TemplateFilterNullOption {
		if v == nil {
			return nil
		}
		return &v.NullOption
	}).(TemplateFilterNullOptionPtrOutput)
}

// The parameter whose value should be used for the filter value.
func (o TemplateNumericEqualityFilterPtrOutput) ParameterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateNumericEqualityFilter) *string {
		if v == nil {
			return nil
		}
		return v.ParameterName
	}).(pulumi.StringPtrOutput)
}

// Select all of the values. Null is not the assigned value of select all.
//
// - `FILTER_ALL_VALUES`
func (o TemplateNumericEqualityFilterPtrOutput) SelectAllOptions() TemplateNumericFilterSelectAllOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateNumericEqualityFilter) *TemplateNumericFilterSelectAllOptions {
		if v == nil {
			return nil
		}
		return v.SelectAllOptions
	}).(TemplateNumericFilterSelectAllOptionsPtrOutput)
}

// The input value.
func (o TemplateNumericEqualityFilterPtrOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateNumericEqualityFilter) *float64 {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.Float64PtrOutput)
}

type TemplateNumericFormatConfiguration struct {
	// The options that determine the currency display format configuration.
	CurrencyDisplayFormatConfiguration *TemplateCurrencyDisplayFormatConfiguration `pulumi:"currencyDisplayFormatConfiguration"`
	// The options that determine the number display format configuration.
	NumberDisplayFormatConfiguration *TemplateNumberDisplayFormatConfiguration `pulumi:"numberDisplayFormatConfiguration"`
	// The options that determine the percentage display format configuration.
	PercentageDisplayFormatConfiguration *TemplatePercentageDisplayFormatConfiguration `pulumi:"percentageDisplayFormatConfiguration"`
}

// TemplateNumericFormatConfigurationInput is an input type that accepts TemplateNumericFormatConfigurationArgs and TemplateNumericFormatConfigurationOutput values.
// You can construct a concrete instance of `TemplateNumericFormatConfigurationInput` via:
//
//	TemplateNumericFormatConfigurationArgs{...}
type TemplateNumericFormatConfigurationInput interface {
	pulumi.Input

	ToTemplateNumericFormatConfigurationOutput() TemplateNumericFormatConfigurationOutput
	ToTemplateNumericFormatConfigurationOutputWithContext(context.Context) TemplateNumericFormatConfigurationOutput
}

type TemplateNumericFormatConfigurationArgs struct {
	// The options that determine the currency display format configuration.
	CurrencyDisplayFormatConfiguration TemplateCurrencyDisplayFormatConfigurationPtrInput `pulumi:"currencyDisplayFormatConfiguration"`
	// The options that determine the number display format configuration.
	NumberDisplayFormatConfiguration TemplateNumberDisplayFormatConfigurationPtrInput `pulumi:"numberDisplayFormatConfiguration"`
	// The options that determine the percentage display format configuration.
	PercentageDisplayFormatConfiguration TemplatePercentageDisplayFormatConfigurationPtrInput `pulumi:"percentageDisplayFormatConfiguration"`
}

func (TemplateNumericFormatConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateNumericFormatConfiguration)(nil)).Elem()
}

func (i TemplateNumericFormatConfigurationArgs) ToTemplateNumericFormatConfigurationOutput() TemplateNumericFormatConfigurationOutput {
	return i.ToTemplateNumericFormatConfigurationOutputWithContext(context.Background())
}

func (i TemplateNumericFormatConfigurationArgs) ToTemplateNumericFormatConfigurationOutputWithContext(ctx context.Context) TemplateNumericFormatConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateNumericFormatConfigurationOutput)
}

func (i TemplateNumericFormatConfigurationArgs) ToTemplateNumericFormatConfigurationPtrOutput() TemplateNumericFormatConfigurationPtrOutput {
	return i.ToTemplateNumericFormatConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateNumericFormatConfigurationArgs) ToTemplateNumericFormatConfigurationPtrOutputWithContext(ctx context.Context) TemplateNumericFormatConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateNumericFormatConfigurationOutput).ToTemplateNumericFormatConfigurationPtrOutputWithContext(ctx)
}

// TemplateNumericFormatConfigurationPtrInput is an input type that accepts TemplateNumericFormatConfigurationArgs, TemplateNumericFormatConfigurationPtr and TemplateNumericFormatConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateNumericFormatConfigurationPtrInput` via:
//
//	        TemplateNumericFormatConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateNumericFormatConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateNumericFormatConfigurationPtrOutput() TemplateNumericFormatConfigurationPtrOutput
	ToTemplateNumericFormatConfigurationPtrOutputWithContext(context.Context) TemplateNumericFormatConfigurationPtrOutput
}

type templateNumericFormatConfigurationPtrType TemplateNumericFormatConfigurationArgs

func TemplateNumericFormatConfigurationPtr(v *TemplateNumericFormatConfigurationArgs) TemplateNumericFormatConfigurationPtrInput {
	return (*templateNumericFormatConfigurationPtrType)(v)
}

func (*templateNumericFormatConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateNumericFormatConfiguration)(nil)).Elem()
}

func (i *templateNumericFormatConfigurationPtrType) ToTemplateNumericFormatConfigurationPtrOutput() TemplateNumericFormatConfigurationPtrOutput {
	return i.ToTemplateNumericFormatConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateNumericFormatConfigurationPtrType) ToTemplateNumericFormatConfigurationPtrOutputWithContext(ctx context.Context) TemplateNumericFormatConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateNumericFormatConfigurationPtrOutput)
}

type TemplateNumericFormatConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateNumericFormatConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateNumericFormatConfiguration)(nil)).Elem()
}

func (o TemplateNumericFormatConfigurationOutput) ToTemplateNumericFormatConfigurationOutput() TemplateNumericFormatConfigurationOutput {
	return o
}

func (o TemplateNumericFormatConfigurationOutput) ToTemplateNumericFormatConfigurationOutputWithContext(ctx context.Context) TemplateNumericFormatConfigurationOutput {
	return o
}

func (o TemplateNumericFormatConfigurationOutput) ToTemplateNumericFormatConfigurationPtrOutput() TemplateNumericFormatConfigurationPtrOutput {
	return o.ToTemplateNumericFormatConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateNumericFormatConfigurationOutput) ToTemplateNumericFormatConfigurationPtrOutputWithContext(ctx context.Context) TemplateNumericFormatConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateNumericFormatConfiguration) *TemplateNumericFormatConfiguration {
		return &v
	}).(TemplateNumericFormatConfigurationPtrOutput)
}

// The options that determine the currency display format configuration.
func (o TemplateNumericFormatConfigurationOutput) CurrencyDisplayFormatConfiguration() TemplateCurrencyDisplayFormatConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateNumericFormatConfiguration) *TemplateCurrencyDisplayFormatConfiguration {
		return v.CurrencyDisplayFormatConfiguration
	}).(TemplateCurrencyDisplayFormatConfigurationPtrOutput)
}

// The options that determine the number display format configuration.
func (o TemplateNumericFormatConfigurationOutput) NumberDisplayFormatConfiguration() TemplateNumberDisplayFormatConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateNumericFormatConfiguration) *TemplateNumberDisplayFormatConfiguration {
		return v.NumberDisplayFormatConfiguration
	}).(TemplateNumberDisplayFormatConfigurationPtrOutput)
}

// The options that determine the percentage display format configuration.
func (o TemplateNumericFormatConfigurationOutput) PercentageDisplayFormatConfiguration() TemplatePercentageDisplayFormatConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateNumericFormatConfiguration) *TemplatePercentageDisplayFormatConfiguration {
		return v.PercentageDisplayFormatConfiguration
	}).(TemplatePercentageDisplayFormatConfigurationPtrOutput)
}

type TemplateNumericFormatConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateNumericFormatConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateNumericFormatConfiguration)(nil)).Elem()
}

func (o TemplateNumericFormatConfigurationPtrOutput) ToTemplateNumericFormatConfigurationPtrOutput() TemplateNumericFormatConfigurationPtrOutput {
	return o
}

func (o TemplateNumericFormatConfigurationPtrOutput) ToTemplateNumericFormatConfigurationPtrOutputWithContext(ctx context.Context) TemplateNumericFormatConfigurationPtrOutput {
	return o
}

func (o TemplateNumericFormatConfigurationPtrOutput) Elem() TemplateNumericFormatConfigurationOutput {
	return o.ApplyT(func(v *TemplateNumericFormatConfiguration) TemplateNumericFormatConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateNumericFormatConfiguration
		return ret
	}).(TemplateNumericFormatConfigurationOutput)
}

// The options that determine the currency display format configuration.
func (o TemplateNumericFormatConfigurationPtrOutput) CurrencyDisplayFormatConfiguration() TemplateCurrencyDisplayFormatConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateNumericFormatConfiguration) *TemplateCurrencyDisplayFormatConfiguration {
		if v == nil {
			return nil
		}
		return v.CurrencyDisplayFormatConfiguration
	}).(TemplateCurrencyDisplayFormatConfigurationPtrOutput)
}

// The options that determine the number display format configuration.
func (o TemplateNumericFormatConfigurationPtrOutput) NumberDisplayFormatConfiguration() TemplateNumberDisplayFormatConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateNumericFormatConfiguration) *TemplateNumberDisplayFormatConfiguration {
		if v == nil {
			return nil
		}
		return v.NumberDisplayFormatConfiguration
	}).(TemplateNumberDisplayFormatConfigurationPtrOutput)
}

// The options that determine the percentage display format configuration.
func (o TemplateNumericFormatConfigurationPtrOutput) PercentageDisplayFormatConfiguration() TemplatePercentageDisplayFormatConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateNumericFormatConfiguration) *TemplatePercentageDisplayFormatConfiguration {
		if v == nil {
			return nil
		}
		return v.PercentageDisplayFormatConfiguration
	}).(TemplatePercentageDisplayFormatConfigurationPtrOutput)
}

type TemplateNumericRangeFilter struct {
	// The aggregation function of the filter.
	AggregationFunction *TemplateAggregationFunction `pulumi:"aggregationFunction"`
	// The column that the filter is applied to.
	Column TemplateColumnIdentifier `pulumi:"column"`
	// The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
	DefaultFilterControlConfiguration *TemplateDefaultFilterControlConfiguration `pulumi:"defaultFilterControlConfiguration"`
	// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
	FilterId string `pulumi:"filterId"`
	// Determines whether the maximum value in the filter value range should be included in the filtered results.
	IncludeMaximum *bool `pulumi:"includeMaximum"`
	// Determines whether the minimum value in the filter value range should be included in the filtered results.
	IncludeMinimum *bool `pulumi:"includeMinimum"`
	// This option determines how null values should be treated when filtering data.
	//
	// - `ALL_VALUES` : Include null values in filtered results.
	// - `NULLS_ONLY` : Only include null values in filtered results.
	// - `NON_NULLS_ONLY` : Exclude null values from filtered results.
	NullOption TemplateFilterNullOption `pulumi:"nullOption"`
	// The maximum value for the filter value range.
	RangeMaximum *TemplateNumericRangeFilterValue `pulumi:"rangeMaximum"`
	// The minimum value for the filter value range.
	RangeMinimum *TemplateNumericRangeFilterValue `pulumi:"rangeMinimum"`
	// Select all of the values. Null is not the assigned value of select all.
	//
	// - `FILTER_ALL_VALUES`
	SelectAllOptions *TemplateNumericFilterSelectAllOptions `pulumi:"selectAllOptions"`
}

// TemplateNumericRangeFilterInput is an input type that accepts TemplateNumericRangeFilterArgs and TemplateNumericRangeFilterOutput values.
// You can construct a concrete instance of `TemplateNumericRangeFilterInput` via:
//
//	TemplateNumericRangeFilterArgs{...}
type TemplateNumericRangeFilterInput interface {
	pulumi.Input

	ToTemplateNumericRangeFilterOutput() TemplateNumericRangeFilterOutput
	ToTemplateNumericRangeFilterOutputWithContext(context.Context) TemplateNumericRangeFilterOutput
}

type TemplateNumericRangeFilterArgs struct {
	// The aggregation function of the filter.
	AggregationFunction TemplateAggregationFunctionPtrInput `pulumi:"aggregationFunction"`
	// The column that the filter is applied to.
	Column TemplateColumnIdentifierInput `pulumi:"column"`
	// The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
	DefaultFilterControlConfiguration TemplateDefaultFilterControlConfigurationPtrInput `pulumi:"defaultFilterControlConfiguration"`
	// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
	FilterId pulumi.StringInput `pulumi:"filterId"`
	// Determines whether the maximum value in the filter value range should be included in the filtered results.
	IncludeMaximum pulumi.BoolPtrInput `pulumi:"includeMaximum"`
	// Determines whether the minimum value in the filter value range should be included in the filtered results.
	IncludeMinimum pulumi.BoolPtrInput `pulumi:"includeMinimum"`
	// This option determines how null values should be treated when filtering data.
	//
	// - `ALL_VALUES` : Include null values in filtered results.
	// - `NULLS_ONLY` : Only include null values in filtered results.
	// - `NON_NULLS_ONLY` : Exclude null values from filtered results.
	NullOption TemplateFilterNullOptionInput `pulumi:"nullOption"`
	// The maximum value for the filter value range.
	RangeMaximum TemplateNumericRangeFilterValuePtrInput `pulumi:"rangeMaximum"`
	// The minimum value for the filter value range.
	RangeMinimum TemplateNumericRangeFilterValuePtrInput `pulumi:"rangeMinimum"`
	// Select all of the values. Null is not the assigned value of select all.
	//
	// - `FILTER_ALL_VALUES`
	SelectAllOptions TemplateNumericFilterSelectAllOptionsPtrInput `pulumi:"selectAllOptions"`
}

func (TemplateNumericRangeFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateNumericRangeFilter)(nil)).Elem()
}

func (i TemplateNumericRangeFilterArgs) ToTemplateNumericRangeFilterOutput() TemplateNumericRangeFilterOutput {
	return i.ToTemplateNumericRangeFilterOutputWithContext(context.Background())
}

func (i TemplateNumericRangeFilterArgs) ToTemplateNumericRangeFilterOutputWithContext(ctx context.Context) TemplateNumericRangeFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateNumericRangeFilterOutput)
}

func (i TemplateNumericRangeFilterArgs) ToTemplateNumericRangeFilterPtrOutput() TemplateNumericRangeFilterPtrOutput {
	return i.ToTemplateNumericRangeFilterPtrOutputWithContext(context.Background())
}

func (i TemplateNumericRangeFilterArgs) ToTemplateNumericRangeFilterPtrOutputWithContext(ctx context.Context) TemplateNumericRangeFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateNumericRangeFilterOutput).ToTemplateNumericRangeFilterPtrOutputWithContext(ctx)
}

// TemplateNumericRangeFilterPtrInput is an input type that accepts TemplateNumericRangeFilterArgs, TemplateNumericRangeFilterPtr and TemplateNumericRangeFilterPtrOutput values.
// You can construct a concrete instance of `TemplateNumericRangeFilterPtrInput` via:
//
//	        TemplateNumericRangeFilterArgs{...}
//
//	or:
//
//	        nil
type TemplateNumericRangeFilterPtrInput interface {
	pulumi.Input

	ToTemplateNumericRangeFilterPtrOutput() TemplateNumericRangeFilterPtrOutput
	ToTemplateNumericRangeFilterPtrOutputWithContext(context.Context) TemplateNumericRangeFilterPtrOutput
}

type templateNumericRangeFilterPtrType TemplateNumericRangeFilterArgs

func TemplateNumericRangeFilterPtr(v *TemplateNumericRangeFilterArgs) TemplateNumericRangeFilterPtrInput {
	return (*templateNumericRangeFilterPtrType)(v)
}

func (*templateNumericRangeFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateNumericRangeFilter)(nil)).Elem()
}

func (i *templateNumericRangeFilterPtrType) ToTemplateNumericRangeFilterPtrOutput() TemplateNumericRangeFilterPtrOutput {
	return i.ToTemplateNumericRangeFilterPtrOutputWithContext(context.Background())
}

func (i *templateNumericRangeFilterPtrType) ToTemplateNumericRangeFilterPtrOutputWithContext(ctx context.Context) TemplateNumericRangeFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateNumericRangeFilterPtrOutput)
}

type TemplateNumericRangeFilterOutput struct{ *pulumi.OutputState }

func (TemplateNumericRangeFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateNumericRangeFilter)(nil)).Elem()
}

func (o TemplateNumericRangeFilterOutput) ToTemplateNumericRangeFilterOutput() TemplateNumericRangeFilterOutput {
	return o
}

func (o TemplateNumericRangeFilterOutput) ToTemplateNumericRangeFilterOutputWithContext(ctx context.Context) TemplateNumericRangeFilterOutput {
	return o
}

func (o TemplateNumericRangeFilterOutput) ToTemplateNumericRangeFilterPtrOutput() TemplateNumericRangeFilterPtrOutput {
	return o.ToTemplateNumericRangeFilterPtrOutputWithContext(context.Background())
}

func (o TemplateNumericRangeFilterOutput) ToTemplateNumericRangeFilterPtrOutputWithContext(ctx context.Context) TemplateNumericRangeFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateNumericRangeFilter) *TemplateNumericRangeFilter {
		return &v
	}).(TemplateNumericRangeFilterPtrOutput)
}

// The aggregation function of the filter.
func (o TemplateNumericRangeFilterOutput) AggregationFunction() TemplateAggregationFunctionPtrOutput {
	return o.ApplyT(func(v TemplateNumericRangeFilter) *TemplateAggregationFunction { return v.AggregationFunction }).(TemplateAggregationFunctionPtrOutput)
}

// The column that the filter is applied to.
func (o TemplateNumericRangeFilterOutput) Column() TemplateColumnIdentifierOutput {
	return o.ApplyT(func(v TemplateNumericRangeFilter) TemplateColumnIdentifier { return v.Column }).(TemplateColumnIdentifierOutput)
}

// The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
func (o TemplateNumericRangeFilterOutput) DefaultFilterControlConfiguration() TemplateDefaultFilterControlConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateNumericRangeFilter) *TemplateDefaultFilterControlConfiguration {
		return v.DefaultFilterControlConfiguration
	}).(TemplateDefaultFilterControlConfigurationPtrOutput)
}

// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
func (o TemplateNumericRangeFilterOutput) FilterId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateNumericRangeFilter) string { return v.FilterId }).(pulumi.StringOutput)
}

// Determines whether the maximum value in the filter value range should be included in the filtered results.
func (o TemplateNumericRangeFilterOutput) IncludeMaximum() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TemplateNumericRangeFilter) *bool { return v.IncludeMaximum }).(pulumi.BoolPtrOutput)
}

// Determines whether the minimum value in the filter value range should be included in the filtered results.
func (o TemplateNumericRangeFilterOutput) IncludeMinimum() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TemplateNumericRangeFilter) *bool { return v.IncludeMinimum }).(pulumi.BoolPtrOutput)
}

// This option determines how null values should be treated when filtering data.
//
// - `ALL_VALUES` : Include null values in filtered results.
// - `NULLS_ONLY` : Only include null values in filtered results.
// - `NON_NULLS_ONLY` : Exclude null values from filtered results.
func (o TemplateNumericRangeFilterOutput) NullOption() TemplateFilterNullOptionOutput {
	return o.ApplyT(func(v TemplateNumericRangeFilter) TemplateFilterNullOption { return v.NullOption }).(TemplateFilterNullOptionOutput)
}

// The maximum value for the filter value range.
func (o TemplateNumericRangeFilterOutput) RangeMaximum() TemplateNumericRangeFilterValuePtrOutput {
	return o.ApplyT(func(v TemplateNumericRangeFilter) *TemplateNumericRangeFilterValue { return v.RangeMaximum }).(TemplateNumericRangeFilterValuePtrOutput)
}

// The minimum value for the filter value range.
func (o TemplateNumericRangeFilterOutput) RangeMinimum() TemplateNumericRangeFilterValuePtrOutput {
	return o.ApplyT(func(v TemplateNumericRangeFilter) *TemplateNumericRangeFilterValue { return v.RangeMinimum }).(TemplateNumericRangeFilterValuePtrOutput)
}

// Select all of the values. Null is not the assigned value of select all.
//
// - `FILTER_ALL_VALUES`
func (o TemplateNumericRangeFilterOutput) SelectAllOptions() TemplateNumericFilterSelectAllOptionsPtrOutput {
	return o.ApplyT(func(v TemplateNumericRangeFilter) *TemplateNumericFilterSelectAllOptions { return v.SelectAllOptions }).(TemplateNumericFilterSelectAllOptionsPtrOutput)
}

type TemplateNumericRangeFilterPtrOutput struct{ *pulumi.OutputState }

func (TemplateNumericRangeFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateNumericRangeFilter)(nil)).Elem()
}

func (o TemplateNumericRangeFilterPtrOutput) ToTemplateNumericRangeFilterPtrOutput() TemplateNumericRangeFilterPtrOutput {
	return o
}

func (o TemplateNumericRangeFilterPtrOutput) ToTemplateNumericRangeFilterPtrOutputWithContext(ctx context.Context) TemplateNumericRangeFilterPtrOutput {
	return o
}

func (o TemplateNumericRangeFilterPtrOutput) Elem() TemplateNumericRangeFilterOutput {
	return o.ApplyT(func(v *TemplateNumericRangeFilter) TemplateNumericRangeFilter {
		if v != nil {
			return *v
		}
		var ret TemplateNumericRangeFilter
		return ret
	}).(TemplateNumericRangeFilterOutput)
}

// The aggregation function of the filter.
func (o TemplateNumericRangeFilterPtrOutput) AggregationFunction() TemplateAggregationFunctionPtrOutput {
	return o.ApplyT(func(v *TemplateNumericRangeFilter) *TemplateAggregationFunction {
		if v == nil {
			return nil
		}
		return v.AggregationFunction
	}).(TemplateAggregationFunctionPtrOutput)
}

// The column that the filter is applied to.
func (o TemplateNumericRangeFilterPtrOutput) Column() TemplateColumnIdentifierPtrOutput {
	return o.ApplyT(func(v *TemplateNumericRangeFilter) *TemplateColumnIdentifier {
		if v == nil {
			return nil
		}
		return &v.Column
	}).(TemplateColumnIdentifierPtrOutput)
}

// The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
func (o TemplateNumericRangeFilterPtrOutput) DefaultFilterControlConfiguration() TemplateDefaultFilterControlConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateNumericRangeFilter) *TemplateDefaultFilterControlConfiguration {
		if v == nil {
			return nil
		}
		return v.DefaultFilterControlConfiguration
	}).(TemplateDefaultFilterControlConfigurationPtrOutput)
}

// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
func (o TemplateNumericRangeFilterPtrOutput) FilterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateNumericRangeFilter) *string {
		if v == nil {
			return nil
		}
		return &v.FilterId
	}).(pulumi.StringPtrOutput)
}

// Determines whether the maximum value in the filter value range should be included in the filtered results.
func (o TemplateNumericRangeFilterPtrOutput) IncludeMaximum() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TemplateNumericRangeFilter) *bool {
		if v == nil {
			return nil
		}
		return v.IncludeMaximum
	}).(pulumi.BoolPtrOutput)
}

// Determines whether the minimum value in the filter value range should be included in the filtered results.
func (o TemplateNumericRangeFilterPtrOutput) IncludeMinimum() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TemplateNumericRangeFilter) *bool {
		if v == nil {
			return nil
		}
		return v.IncludeMinimum
	}).(pulumi.BoolPtrOutput)
}

// This option determines how null values should be treated when filtering data.
//
// - `ALL_VALUES` : Include null values in filtered results.
// - `NULLS_ONLY` : Only include null values in filtered results.
// - `NON_NULLS_ONLY` : Exclude null values from filtered results.
func (o TemplateNumericRangeFilterPtrOutput) NullOption() TemplateFilterNullOptionPtrOutput {
	return o.ApplyT(func(v *TemplateNumericRangeFilter) *TemplateFilterNullOption {
		if v == nil {
			return nil
		}
		return &v.NullOption
	}).(TemplateFilterNullOptionPtrOutput)
}

// The maximum value for the filter value range.
func (o TemplateNumericRangeFilterPtrOutput) RangeMaximum() TemplateNumericRangeFilterValuePtrOutput {
	return o.ApplyT(func(v *TemplateNumericRangeFilter) *TemplateNumericRangeFilterValue {
		if v == nil {
			return nil
		}
		return v.RangeMaximum
	}).(TemplateNumericRangeFilterValuePtrOutput)
}

// The minimum value for the filter value range.
func (o TemplateNumericRangeFilterPtrOutput) RangeMinimum() TemplateNumericRangeFilterValuePtrOutput {
	return o.ApplyT(func(v *TemplateNumericRangeFilter) *TemplateNumericRangeFilterValue {
		if v == nil {
			return nil
		}
		return v.RangeMinimum
	}).(TemplateNumericRangeFilterValuePtrOutput)
}

// Select all of the values. Null is not the assigned value of select all.
//
// - `FILTER_ALL_VALUES`
func (o TemplateNumericRangeFilterPtrOutput) SelectAllOptions() TemplateNumericFilterSelectAllOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateNumericRangeFilter) *TemplateNumericFilterSelectAllOptions {
		if v == nil {
			return nil
		}
		return v.SelectAllOptions
	}).(TemplateNumericFilterSelectAllOptionsPtrOutput)
}

type TemplateNumericRangeFilterValue struct {
	// The parameter that is used in the numeric range.
	Parameter *string `pulumi:"parameter"`
	// The static value of the numeric range filter.
	StaticValue *float64 `pulumi:"staticValue"`
}

// TemplateNumericRangeFilterValueInput is an input type that accepts TemplateNumericRangeFilterValueArgs and TemplateNumericRangeFilterValueOutput values.
// You can construct a concrete instance of `TemplateNumericRangeFilterValueInput` via:
//
//	TemplateNumericRangeFilterValueArgs{...}
type TemplateNumericRangeFilterValueInput interface {
	pulumi.Input

	ToTemplateNumericRangeFilterValueOutput() TemplateNumericRangeFilterValueOutput
	ToTemplateNumericRangeFilterValueOutputWithContext(context.Context) TemplateNumericRangeFilterValueOutput
}

type TemplateNumericRangeFilterValueArgs struct {
	// The parameter that is used in the numeric range.
	Parameter pulumi.StringPtrInput `pulumi:"parameter"`
	// The static value of the numeric range filter.
	StaticValue pulumi.Float64PtrInput `pulumi:"staticValue"`
}

func (TemplateNumericRangeFilterValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateNumericRangeFilterValue)(nil)).Elem()
}

func (i TemplateNumericRangeFilterValueArgs) ToTemplateNumericRangeFilterValueOutput() TemplateNumericRangeFilterValueOutput {
	return i.ToTemplateNumericRangeFilterValueOutputWithContext(context.Background())
}

func (i TemplateNumericRangeFilterValueArgs) ToTemplateNumericRangeFilterValueOutputWithContext(ctx context.Context) TemplateNumericRangeFilterValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateNumericRangeFilterValueOutput)
}

func (i TemplateNumericRangeFilterValueArgs) ToTemplateNumericRangeFilterValuePtrOutput() TemplateNumericRangeFilterValuePtrOutput {
	return i.ToTemplateNumericRangeFilterValuePtrOutputWithContext(context.Background())
}

func (i TemplateNumericRangeFilterValueArgs) ToTemplateNumericRangeFilterValuePtrOutputWithContext(ctx context.Context) TemplateNumericRangeFilterValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateNumericRangeFilterValueOutput).ToTemplateNumericRangeFilterValuePtrOutputWithContext(ctx)
}

// TemplateNumericRangeFilterValuePtrInput is an input type that accepts TemplateNumericRangeFilterValueArgs, TemplateNumericRangeFilterValuePtr and TemplateNumericRangeFilterValuePtrOutput values.
// You can construct a concrete instance of `TemplateNumericRangeFilterValuePtrInput` via:
//
//	        TemplateNumericRangeFilterValueArgs{...}
//
//	or:
//
//	        nil
type TemplateNumericRangeFilterValuePtrInput interface {
	pulumi.Input

	ToTemplateNumericRangeFilterValuePtrOutput() TemplateNumericRangeFilterValuePtrOutput
	ToTemplateNumericRangeFilterValuePtrOutputWithContext(context.Context) TemplateNumericRangeFilterValuePtrOutput
}

type templateNumericRangeFilterValuePtrType TemplateNumericRangeFilterValueArgs

func TemplateNumericRangeFilterValuePtr(v *TemplateNumericRangeFilterValueArgs) TemplateNumericRangeFilterValuePtrInput {
	return (*templateNumericRangeFilterValuePtrType)(v)
}

func (*templateNumericRangeFilterValuePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateNumericRangeFilterValue)(nil)).Elem()
}

func (i *templateNumericRangeFilterValuePtrType) ToTemplateNumericRangeFilterValuePtrOutput() TemplateNumericRangeFilterValuePtrOutput {
	return i.ToTemplateNumericRangeFilterValuePtrOutputWithContext(context.Background())
}

func (i *templateNumericRangeFilterValuePtrType) ToTemplateNumericRangeFilterValuePtrOutputWithContext(ctx context.Context) TemplateNumericRangeFilterValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateNumericRangeFilterValuePtrOutput)
}

type TemplateNumericRangeFilterValueOutput struct{ *pulumi.OutputState }

func (TemplateNumericRangeFilterValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateNumericRangeFilterValue)(nil)).Elem()
}

func (o TemplateNumericRangeFilterValueOutput) ToTemplateNumericRangeFilterValueOutput() TemplateNumericRangeFilterValueOutput {
	return o
}

func (o TemplateNumericRangeFilterValueOutput) ToTemplateNumericRangeFilterValueOutputWithContext(ctx context.Context) TemplateNumericRangeFilterValueOutput {
	return o
}

func (o TemplateNumericRangeFilterValueOutput) ToTemplateNumericRangeFilterValuePtrOutput() TemplateNumericRangeFilterValuePtrOutput {
	return o.ToTemplateNumericRangeFilterValuePtrOutputWithContext(context.Background())
}

func (o TemplateNumericRangeFilterValueOutput) ToTemplateNumericRangeFilterValuePtrOutputWithContext(ctx context.Context) TemplateNumericRangeFilterValuePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateNumericRangeFilterValue) *TemplateNumericRangeFilterValue {
		return &v
	}).(TemplateNumericRangeFilterValuePtrOutput)
}

// The parameter that is used in the numeric range.
func (o TemplateNumericRangeFilterValueOutput) Parameter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateNumericRangeFilterValue) *string { return v.Parameter }).(pulumi.StringPtrOutput)
}

// The static value of the numeric range filter.
func (o TemplateNumericRangeFilterValueOutput) StaticValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateNumericRangeFilterValue) *float64 { return v.StaticValue }).(pulumi.Float64PtrOutput)
}

type TemplateNumericRangeFilterValuePtrOutput struct{ *pulumi.OutputState }

func (TemplateNumericRangeFilterValuePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateNumericRangeFilterValue)(nil)).Elem()
}

func (o TemplateNumericRangeFilterValuePtrOutput) ToTemplateNumericRangeFilterValuePtrOutput() TemplateNumericRangeFilterValuePtrOutput {
	return o
}

func (o TemplateNumericRangeFilterValuePtrOutput) ToTemplateNumericRangeFilterValuePtrOutputWithContext(ctx context.Context) TemplateNumericRangeFilterValuePtrOutput {
	return o
}

func (o TemplateNumericRangeFilterValuePtrOutput) Elem() TemplateNumericRangeFilterValueOutput {
	return o.ApplyT(func(v *TemplateNumericRangeFilterValue) TemplateNumericRangeFilterValue {
		if v != nil {
			return *v
		}
		var ret TemplateNumericRangeFilterValue
		return ret
	}).(TemplateNumericRangeFilterValueOutput)
}

// The parameter that is used in the numeric range.
func (o TemplateNumericRangeFilterValuePtrOutput) Parameter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateNumericRangeFilterValue) *string {
		if v == nil {
			return nil
		}
		return v.Parameter
	}).(pulumi.StringPtrOutput)
}

// The static value of the numeric range filter.
func (o TemplateNumericRangeFilterValuePtrOutput) StaticValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateNumericRangeFilterValue) *float64 {
		if v == nil {
			return nil
		}
		return v.StaticValue
	}).(pulumi.Float64PtrOutput)
}

type TemplateNumericSeparatorConfiguration struct {
	// Determines the decimal separator.
	DecimalSeparator *TemplateNumericSeparatorSymbol `pulumi:"decimalSeparator"`
	// The options that determine the thousands separator configuration.
	ThousandsSeparator *TemplateThousandSeparatorOptions `pulumi:"thousandsSeparator"`
}

// TemplateNumericSeparatorConfigurationInput is an input type that accepts TemplateNumericSeparatorConfigurationArgs and TemplateNumericSeparatorConfigurationOutput values.
// You can construct a concrete instance of `TemplateNumericSeparatorConfigurationInput` via:
//
//	TemplateNumericSeparatorConfigurationArgs{...}
type TemplateNumericSeparatorConfigurationInput interface {
	pulumi.Input

	ToTemplateNumericSeparatorConfigurationOutput() TemplateNumericSeparatorConfigurationOutput
	ToTemplateNumericSeparatorConfigurationOutputWithContext(context.Context) TemplateNumericSeparatorConfigurationOutput
}

type TemplateNumericSeparatorConfigurationArgs struct {
	// Determines the decimal separator.
	DecimalSeparator TemplateNumericSeparatorSymbolPtrInput `pulumi:"decimalSeparator"`
	// The options that determine the thousands separator configuration.
	ThousandsSeparator TemplateThousandSeparatorOptionsPtrInput `pulumi:"thousandsSeparator"`
}

func (TemplateNumericSeparatorConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateNumericSeparatorConfiguration)(nil)).Elem()
}

func (i TemplateNumericSeparatorConfigurationArgs) ToTemplateNumericSeparatorConfigurationOutput() TemplateNumericSeparatorConfigurationOutput {
	return i.ToTemplateNumericSeparatorConfigurationOutputWithContext(context.Background())
}

func (i TemplateNumericSeparatorConfigurationArgs) ToTemplateNumericSeparatorConfigurationOutputWithContext(ctx context.Context) TemplateNumericSeparatorConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateNumericSeparatorConfigurationOutput)
}

func (i TemplateNumericSeparatorConfigurationArgs) ToTemplateNumericSeparatorConfigurationPtrOutput() TemplateNumericSeparatorConfigurationPtrOutput {
	return i.ToTemplateNumericSeparatorConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateNumericSeparatorConfigurationArgs) ToTemplateNumericSeparatorConfigurationPtrOutputWithContext(ctx context.Context) TemplateNumericSeparatorConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateNumericSeparatorConfigurationOutput).ToTemplateNumericSeparatorConfigurationPtrOutputWithContext(ctx)
}

// TemplateNumericSeparatorConfigurationPtrInput is an input type that accepts TemplateNumericSeparatorConfigurationArgs, TemplateNumericSeparatorConfigurationPtr and TemplateNumericSeparatorConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateNumericSeparatorConfigurationPtrInput` via:
//
//	        TemplateNumericSeparatorConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateNumericSeparatorConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateNumericSeparatorConfigurationPtrOutput() TemplateNumericSeparatorConfigurationPtrOutput
	ToTemplateNumericSeparatorConfigurationPtrOutputWithContext(context.Context) TemplateNumericSeparatorConfigurationPtrOutput
}

type templateNumericSeparatorConfigurationPtrType TemplateNumericSeparatorConfigurationArgs

func TemplateNumericSeparatorConfigurationPtr(v *TemplateNumericSeparatorConfigurationArgs) TemplateNumericSeparatorConfigurationPtrInput {
	return (*templateNumericSeparatorConfigurationPtrType)(v)
}

func (*templateNumericSeparatorConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateNumericSeparatorConfiguration)(nil)).Elem()
}

func (i *templateNumericSeparatorConfigurationPtrType) ToTemplateNumericSeparatorConfigurationPtrOutput() TemplateNumericSeparatorConfigurationPtrOutput {
	return i.ToTemplateNumericSeparatorConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateNumericSeparatorConfigurationPtrType) ToTemplateNumericSeparatorConfigurationPtrOutputWithContext(ctx context.Context) TemplateNumericSeparatorConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateNumericSeparatorConfigurationPtrOutput)
}

type TemplateNumericSeparatorConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateNumericSeparatorConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateNumericSeparatorConfiguration)(nil)).Elem()
}

func (o TemplateNumericSeparatorConfigurationOutput) ToTemplateNumericSeparatorConfigurationOutput() TemplateNumericSeparatorConfigurationOutput {
	return o
}

func (o TemplateNumericSeparatorConfigurationOutput) ToTemplateNumericSeparatorConfigurationOutputWithContext(ctx context.Context) TemplateNumericSeparatorConfigurationOutput {
	return o
}

func (o TemplateNumericSeparatorConfigurationOutput) ToTemplateNumericSeparatorConfigurationPtrOutput() TemplateNumericSeparatorConfigurationPtrOutput {
	return o.ToTemplateNumericSeparatorConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateNumericSeparatorConfigurationOutput) ToTemplateNumericSeparatorConfigurationPtrOutputWithContext(ctx context.Context) TemplateNumericSeparatorConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateNumericSeparatorConfiguration) *TemplateNumericSeparatorConfiguration {
		return &v
	}).(TemplateNumericSeparatorConfigurationPtrOutput)
}

// Determines the decimal separator.
func (o TemplateNumericSeparatorConfigurationOutput) DecimalSeparator() TemplateNumericSeparatorSymbolPtrOutput {
	return o.ApplyT(func(v TemplateNumericSeparatorConfiguration) *TemplateNumericSeparatorSymbol {
		return v.DecimalSeparator
	}).(TemplateNumericSeparatorSymbolPtrOutput)
}

// The options that determine the thousands separator configuration.
func (o TemplateNumericSeparatorConfigurationOutput) ThousandsSeparator() TemplateThousandSeparatorOptionsPtrOutput {
	return o.ApplyT(func(v TemplateNumericSeparatorConfiguration) *TemplateThousandSeparatorOptions {
		return v.ThousandsSeparator
	}).(TemplateThousandSeparatorOptionsPtrOutput)
}

type TemplateNumericSeparatorConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateNumericSeparatorConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateNumericSeparatorConfiguration)(nil)).Elem()
}

func (o TemplateNumericSeparatorConfigurationPtrOutput) ToTemplateNumericSeparatorConfigurationPtrOutput() TemplateNumericSeparatorConfigurationPtrOutput {
	return o
}

func (o TemplateNumericSeparatorConfigurationPtrOutput) ToTemplateNumericSeparatorConfigurationPtrOutputWithContext(ctx context.Context) TemplateNumericSeparatorConfigurationPtrOutput {
	return o
}

func (o TemplateNumericSeparatorConfigurationPtrOutput) Elem() TemplateNumericSeparatorConfigurationOutput {
	return o.ApplyT(func(v *TemplateNumericSeparatorConfiguration) TemplateNumericSeparatorConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateNumericSeparatorConfiguration
		return ret
	}).(TemplateNumericSeparatorConfigurationOutput)
}

// Determines the decimal separator.
func (o TemplateNumericSeparatorConfigurationPtrOutput) DecimalSeparator() TemplateNumericSeparatorSymbolPtrOutput {
	return o.ApplyT(func(v *TemplateNumericSeparatorConfiguration) *TemplateNumericSeparatorSymbol {
		if v == nil {
			return nil
		}
		return v.DecimalSeparator
	}).(TemplateNumericSeparatorSymbolPtrOutput)
}

// The options that determine the thousands separator configuration.
func (o TemplateNumericSeparatorConfigurationPtrOutput) ThousandsSeparator() TemplateThousandSeparatorOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateNumericSeparatorConfiguration) *TemplateThousandSeparatorOptions {
		if v == nil {
			return nil
		}
		return v.ThousandsSeparator
	}).(TemplateThousandSeparatorOptionsPtrOutput)
}

type TemplateNumericalAggregationFunction struct {
	// An aggregation based on the percentile of values in a dimension or measure.
	PercentileAggregation *TemplatePercentileAggregation `pulumi:"percentileAggregation"`
	// Built-in aggregation functions for numerical values.
	//
	// - `SUM` : The sum of a dimension or measure.
	// - `AVERAGE` : The average of a dimension or measure.
	// - `MIN` : The minimum value of a dimension or measure.
	// - `MAX` : The maximum value of a dimension or measure.
	// - `COUNT` : The count of a dimension or measure.
	// - `DISTINCT_COUNT` : The count of distinct values in a dimension or measure.
	// - `VAR` : The variance of a dimension or measure.
	// - `VARP` : The partitioned variance of a dimension or measure.
	// - `STDEV` : The standard deviation of a dimension or measure.
	// - `STDEVP` : The partitioned standard deviation of a dimension or measure.
	// - `MEDIAN` : The median value of a dimension or measure.
	SimpleNumericalAggregation *TemplateSimpleNumericalAggregationFunction `pulumi:"simpleNumericalAggregation"`
}

// TemplateNumericalAggregationFunctionInput is an input type that accepts TemplateNumericalAggregationFunctionArgs and TemplateNumericalAggregationFunctionOutput values.
// You can construct a concrete instance of `TemplateNumericalAggregationFunctionInput` via:
//
//	TemplateNumericalAggregationFunctionArgs{...}
type TemplateNumericalAggregationFunctionInput interface {
	pulumi.Input

	ToTemplateNumericalAggregationFunctionOutput() TemplateNumericalAggregationFunctionOutput
	ToTemplateNumericalAggregationFunctionOutputWithContext(context.Context) TemplateNumericalAggregationFunctionOutput
}

type TemplateNumericalAggregationFunctionArgs struct {
	// An aggregation based on the percentile of values in a dimension or measure.
	PercentileAggregation TemplatePercentileAggregationPtrInput `pulumi:"percentileAggregation"`
	// Built-in aggregation functions for numerical values.
	//
	// - `SUM` : The sum of a dimension or measure.
	// - `AVERAGE` : The average of a dimension or measure.
	// - `MIN` : The minimum value of a dimension or measure.
	// - `MAX` : The maximum value of a dimension or measure.
	// - `COUNT` : The count of a dimension or measure.
	// - `DISTINCT_COUNT` : The count of distinct values in a dimension or measure.
	// - `VAR` : The variance of a dimension or measure.
	// - `VARP` : The partitioned variance of a dimension or measure.
	// - `STDEV` : The standard deviation of a dimension or measure.
	// - `STDEVP` : The partitioned standard deviation of a dimension or measure.
	// - `MEDIAN` : The median value of a dimension or measure.
	SimpleNumericalAggregation TemplateSimpleNumericalAggregationFunctionPtrInput `pulumi:"simpleNumericalAggregation"`
}

func (TemplateNumericalAggregationFunctionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateNumericalAggregationFunction)(nil)).Elem()
}

func (i TemplateNumericalAggregationFunctionArgs) ToTemplateNumericalAggregationFunctionOutput() TemplateNumericalAggregationFunctionOutput {
	return i.ToTemplateNumericalAggregationFunctionOutputWithContext(context.Background())
}

func (i TemplateNumericalAggregationFunctionArgs) ToTemplateNumericalAggregationFunctionOutputWithContext(ctx context.Context) TemplateNumericalAggregationFunctionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateNumericalAggregationFunctionOutput)
}

func (i TemplateNumericalAggregationFunctionArgs) ToTemplateNumericalAggregationFunctionPtrOutput() TemplateNumericalAggregationFunctionPtrOutput {
	return i.ToTemplateNumericalAggregationFunctionPtrOutputWithContext(context.Background())
}

func (i TemplateNumericalAggregationFunctionArgs) ToTemplateNumericalAggregationFunctionPtrOutputWithContext(ctx context.Context) TemplateNumericalAggregationFunctionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateNumericalAggregationFunctionOutput).ToTemplateNumericalAggregationFunctionPtrOutputWithContext(ctx)
}

// TemplateNumericalAggregationFunctionPtrInput is an input type that accepts TemplateNumericalAggregationFunctionArgs, TemplateNumericalAggregationFunctionPtr and TemplateNumericalAggregationFunctionPtrOutput values.
// You can construct a concrete instance of `TemplateNumericalAggregationFunctionPtrInput` via:
//
//	        TemplateNumericalAggregationFunctionArgs{...}
//
//	or:
//
//	        nil
type TemplateNumericalAggregationFunctionPtrInput interface {
	pulumi.Input

	ToTemplateNumericalAggregationFunctionPtrOutput() TemplateNumericalAggregationFunctionPtrOutput
	ToTemplateNumericalAggregationFunctionPtrOutputWithContext(context.Context) TemplateNumericalAggregationFunctionPtrOutput
}

type templateNumericalAggregationFunctionPtrType TemplateNumericalAggregationFunctionArgs

func TemplateNumericalAggregationFunctionPtr(v *TemplateNumericalAggregationFunctionArgs) TemplateNumericalAggregationFunctionPtrInput {
	return (*templateNumericalAggregationFunctionPtrType)(v)
}

func (*templateNumericalAggregationFunctionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateNumericalAggregationFunction)(nil)).Elem()
}

func (i *templateNumericalAggregationFunctionPtrType) ToTemplateNumericalAggregationFunctionPtrOutput() TemplateNumericalAggregationFunctionPtrOutput {
	return i.ToTemplateNumericalAggregationFunctionPtrOutputWithContext(context.Background())
}

func (i *templateNumericalAggregationFunctionPtrType) ToTemplateNumericalAggregationFunctionPtrOutputWithContext(ctx context.Context) TemplateNumericalAggregationFunctionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateNumericalAggregationFunctionPtrOutput)
}

type TemplateNumericalAggregationFunctionOutput struct{ *pulumi.OutputState }

func (TemplateNumericalAggregationFunctionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateNumericalAggregationFunction)(nil)).Elem()
}

func (o TemplateNumericalAggregationFunctionOutput) ToTemplateNumericalAggregationFunctionOutput() TemplateNumericalAggregationFunctionOutput {
	return o
}

func (o TemplateNumericalAggregationFunctionOutput) ToTemplateNumericalAggregationFunctionOutputWithContext(ctx context.Context) TemplateNumericalAggregationFunctionOutput {
	return o
}

func (o TemplateNumericalAggregationFunctionOutput) ToTemplateNumericalAggregationFunctionPtrOutput() TemplateNumericalAggregationFunctionPtrOutput {
	return o.ToTemplateNumericalAggregationFunctionPtrOutputWithContext(context.Background())
}

func (o TemplateNumericalAggregationFunctionOutput) ToTemplateNumericalAggregationFunctionPtrOutputWithContext(ctx context.Context) TemplateNumericalAggregationFunctionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateNumericalAggregationFunction) *TemplateNumericalAggregationFunction {
		return &v
	}).(TemplateNumericalAggregationFunctionPtrOutput)
}

// An aggregation based on the percentile of values in a dimension or measure.
func (o TemplateNumericalAggregationFunctionOutput) PercentileAggregation() TemplatePercentileAggregationPtrOutput {
	return o.ApplyT(func(v TemplateNumericalAggregationFunction) *TemplatePercentileAggregation {
		return v.PercentileAggregation
	}).(TemplatePercentileAggregationPtrOutput)
}

// Built-in aggregation functions for numerical values.
//
// - `SUM` : The sum of a dimension or measure.
// - `AVERAGE` : The average of a dimension or measure.
// - `MIN` : The minimum value of a dimension or measure.
// - `MAX` : The maximum value of a dimension or measure.
// - `COUNT` : The count of a dimension or measure.
// - `DISTINCT_COUNT` : The count of distinct values in a dimension or measure.
// - `VAR` : The variance of a dimension or measure.
// - `VARP` : The partitioned variance of a dimension or measure.
// - `STDEV` : The standard deviation of a dimension or measure.
// - `STDEVP` : The partitioned standard deviation of a dimension or measure.
// - `MEDIAN` : The median value of a dimension or measure.
func (o TemplateNumericalAggregationFunctionOutput) SimpleNumericalAggregation() TemplateSimpleNumericalAggregationFunctionPtrOutput {
	return o.ApplyT(func(v TemplateNumericalAggregationFunction) *TemplateSimpleNumericalAggregationFunction {
		return v.SimpleNumericalAggregation
	}).(TemplateSimpleNumericalAggregationFunctionPtrOutput)
}

type TemplateNumericalAggregationFunctionPtrOutput struct{ *pulumi.OutputState }

func (TemplateNumericalAggregationFunctionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateNumericalAggregationFunction)(nil)).Elem()
}

func (o TemplateNumericalAggregationFunctionPtrOutput) ToTemplateNumericalAggregationFunctionPtrOutput() TemplateNumericalAggregationFunctionPtrOutput {
	return o
}

func (o TemplateNumericalAggregationFunctionPtrOutput) ToTemplateNumericalAggregationFunctionPtrOutputWithContext(ctx context.Context) TemplateNumericalAggregationFunctionPtrOutput {
	return o
}

func (o TemplateNumericalAggregationFunctionPtrOutput) Elem() TemplateNumericalAggregationFunctionOutput {
	return o.ApplyT(func(v *TemplateNumericalAggregationFunction) TemplateNumericalAggregationFunction {
		if v != nil {
			return *v
		}
		var ret TemplateNumericalAggregationFunction
		return ret
	}).(TemplateNumericalAggregationFunctionOutput)
}

// An aggregation based on the percentile of values in a dimension or measure.
func (o TemplateNumericalAggregationFunctionPtrOutput) PercentileAggregation() TemplatePercentileAggregationPtrOutput {
	return o.ApplyT(func(v *TemplateNumericalAggregationFunction) *TemplatePercentileAggregation {
		if v == nil {
			return nil
		}
		return v.PercentileAggregation
	}).(TemplatePercentileAggregationPtrOutput)
}

// Built-in aggregation functions for numerical values.
//
// - `SUM` : The sum of a dimension or measure.
// - `AVERAGE` : The average of a dimension or measure.
// - `MIN` : The minimum value of a dimension or measure.
// - `MAX` : The maximum value of a dimension or measure.
// - `COUNT` : The count of a dimension or measure.
// - `DISTINCT_COUNT` : The count of distinct values in a dimension or measure.
// - `VAR` : The variance of a dimension or measure.
// - `VARP` : The partitioned variance of a dimension or measure.
// - `STDEV` : The standard deviation of a dimension or measure.
// - `STDEVP` : The partitioned standard deviation of a dimension or measure.
// - `MEDIAN` : The median value of a dimension or measure.
func (o TemplateNumericalAggregationFunctionPtrOutput) SimpleNumericalAggregation() TemplateSimpleNumericalAggregationFunctionPtrOutput {
	return o.ApplyT(func(v *TemplateNumericalAggregationFunction) *TemplateSimpleNumericalAggregationFunction {
		if v == nil {
			return nil
		}
		return v.SimpleNumericalAggregation
	}).(TemplateSimpleNumericalAggregationFunctionPtrOutput)
}

type TemplateNumericalDimensionField struct {
	// The column that is used in the `NumericalDimensionField` .
	Column TemplateColumnIdentifier `pulumi:"column"`
	// The custom field ID.
	FieldId string `pulumi:"fieldId"`
	// The format configuration of the field.
	FormatConfiguration *TemplateNumberFormatConfiguration `pulumi:"formatConfiguration"`
	// The custom hierarchy ID.
	HierarchyId *string `pulumi:"hierarchyId"`
}

// TemplateNumericalDimensionFieldInput is an input type that accepts TemplateNumericalDimensionFieldArgs and TemplateNumericalDimensionFieldOutput values.
// You can construct a concrete instance of `TemplateNumericalDimensionFieldInput` via:
//
//	TemplateNumericalDimensionFieldArgs{...}
type TemplateNumericalDimensionFieldInput interface {
	pulumi.Input

	ToTemplateNumericalDimensionFieldOutput() TemplateNumericalDimensionFieldOutput
	ToTemplateNumericalDimensionFieldOutputWithContext(context.Context) TemplateNumericalDimensionFieldOutput
}

type TemplateNumericalDimensionFieldArgs struct {
	// The column that is used in the `NumericalDimensionField` .
	Column TemplateColumnIdentifierInput `pulumi:"column"`
	// The custom field ID.
	FieldId pulumi.StringInput `pulumi:"fieldId"`
	// The format configuration of the field.
	FormatConfiguration TemplateNumberFormatConfigurationPtrInput `pulumi:"formatConfiguration"`
	// The custom hierarchy ID.
	HierarchyId pulumi.StringPtrInput `pulumi:"hierarchyId"`
}

func (TemplateNumericalDimensionFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateNumericalDimensionField)(nil)).Elem()
}

func (i TemplateNumericalDimensionFieldArgs) ToTemplateNumericalDimensionFieldOutput() TemplateNumericalDimensionFieldOutput {
	return i.ToTemplateNumericalDimensionFieldOutputWithContext(context.Background())
}

func (i TemplateNumericalDimensionFieldArgs) ToTemplateNumericalDimensionFieldOutputWithContext(ctx context.Context) TemplateNumericalDimensionFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateNumericalDimensionFieldOutput)
}

func (i TemplateNumericalDimensionFieldArgs) ToTemplateNumericalDimensionFieldPtrOutput() TemplateNumericalDimensionFieldPtrOutput {
	return i.ToTemplateNumericalDimensionFieldPtrOutputWithContext(context.Background())
}

func (i TemplateNumericalDimensionFieldArgs) ToTemplateNumericalDimensionFieldPtrOutputWithContext(ctx context.Context) TemplateNumericalDimensionFieldPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateNumericalDimensionFieldOutput).ToTemplateNumericalDimensionFieldPtrOutputWithContext(ctx)
}

// TemplateNumericalDimensionFieldPtrInput is an input type that accepts TemplateNumericalDimensionFieldArgs, TemplateNumericalDimensionFieldPtr and TemplateNumericalDimensionFieldPtrOutput values.
// You can construct a concrete instance of `TemplateNumericalDimensionFieldPtrInput` via:
//
//	        TemplateNumericalDimensionFieldArgs{...}
//
//	or:
//
//	        nil
type TemplateNumericalDimensionFieldPtrInput interface {
	pulumi.Input

	ToTemplateNumericalDimensionFieldPtrOutput() TemplateNumericalDimensionFieldPtrOutput
	ToTemplateNumericalDimensionFieldPtrOutputWithContext(context.Context) TemplateNumericalDimensionFieldPtrOutput
}

type templateNumericalDimensionFieldPtrType TemplateNumericalDimensionFieldArgs

func TemplateNumericalDimensionFieldPtr(v *TemplateNumericalDimensionFieldArgs) TemplateNumericalDimensionFieldPtrInput {
	return (*templateNumericalDimensionFieldPtrType)(v)
}

func (*templateNumericalDimensionFieldPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateNumericalDimensionField)(nil)).Elem()
}

func (i *templateNumericalDimensionFieldPtrType) ToTemplateNumericalDimensionFieldPtrOutput() TemplateNumericalDimensionFieldPtrOutput {
	return i.ToTemplateNumericalDimensionFieldPtrOutputWithContext(context.Background())
}

func (i *templateNumericalDimensionFieldPtrType) ToTemplateNumericalDimensionFieldPtrOutputWithContext(ctx context.Context) TemplateNumericalDimensionFieldPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateNumericalDimensionFieldPtrOutput)
}

type TemplateNumericalDimensionFieldOutput struct{ *pulumi.OutputState }

func (TemplateNumericalDimensionFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateNumericalDimensionField)(nil)).Elem()
}

func (o TemplateNumericalDimensionFieldOutput) ToTemplateNumericalDimensionFieldOutput() TemplateNumericalDimensionFieldOutput {
	return o
}

func (o TemplateNumericalDimensionFieldOutput) ToTemplateNumericalDimensionFieldOutputWithContext(ctx context.Context) TemplateNumericalDimensionFieldOutput {
	return o
}

func (o TemplateNumericalDimensionFieldOutput) ToTemplateNumericalDimensionFieldPtrOutput() TemplateNumericalDimensionFieldPtrOutput {
	return o.ToTemplateNumericalDimensionFieldPtrOutputWithContext(context.Background())
}

func (o TemplateNumericalDimensionFieldOutput) ToTemplateNumericalDimensionFieldPtrOutputWithContext(ctx context.Context) TemplateNumericalDimensionFieldPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateNumericalDimensionField) *TemplateNumericalDimensionField {
		return &v
	}).(TemplateNumericalDimensionFieldPtrOutput)
}

// The column that is used in the `NumericalDimensionField` .
func (o TemplateNumericalDimensionFieldOutput) Column() TemplateColumnIdentifierOutput {
	return o.ApplyT(func(v TemplateNumericalDimensionField) TemplateColumnIdentifier { return v.Column }).(TemplateColumnIdentifierOutput)
}

// The custom field ID.
func (o TemplateNumericalDimensionFieldOutput) FieldId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateNumericalDimensionField) string { return v.FieldId }).(pulumi.StringOutput)
}

// The format configuration of the field.
func (o TemplateNumericalDimensionFieldOutput) FormatConfiguration() TemplateNumberFormatConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateNumericalDimensionField) *TemplateNumberFormatConfiguration {
		return v.FormatConfiguration
	}).(TemplateNumberFormatConfigurationPtrOutput)
}

// The custom hierarchy ID.
func (o TemplateNumericalDimensionFieldOutput) HierarchyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateNumericalDimensionField) *string { return v.HierarchyId }).(pulumi.StringPtrOutput)
}

type TemplateNumericalDimensionFieldPtrOutput struct{ *pulumi.OutputState }

func (TemplateNumericalDimensionFieldPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateNumericalDimensionField)(nil)).Elem()
}

func (o TemplateNumericalDimensionFieldPtrOutput) ToTemplateNumericalDimensionFieldPtrOutput() TemplateNumericalDimensionFieldPtrOutput {
	return o
}

func (o TemplateNumericalDimensionFieldPtrOutput) ToTemplateNumericalDimensionFieldPtrOutputWithContext(ctx context.Context) TemplateNumericalDimensionFieldPtrOutput {
	return o
}

func (o TemplateNumericalDimensionFieldPtrOutput) Elem() TemplateNumericalDimensionFieldOutput {
	return o.ApplyT(func(v *TemplateNumericalDimensionField) TemplateNumericalDimensionField {
		if v != nil {
			return *v
		}
		var ret TemplateNumericalDimensionField
		return ret
	}).(TemplateNumericalDimensionFieldOutput)
}

// The column that is used in the `NumericalDimensionField` .
func (o TemplateNumericalDimensionFieldPtrOutput) Column() TemplateColumnIdentifierPtrOutput {
	return o.ApplyT(func(v *TemplateNumericalDimensionField) *TemplateColumnIdentifier {
		if v == nil {
			return nil
		}
		return &v.Column
	}).(TemplateColumnIdentifierPtrOutput)
}

// The custom field ID.
func (o TemplateNumericalDimensionFieldPtrOutput) FieldId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateNumericalDimensionField) *string {
		if v == nil {
			return nil
		}
		return &v.FieldId
	}).(pulumi.StringPtrOutput)
}

// The format configuration of the field.
func (o TemplateNumericalDimensionFieldPtrOutput) FormatConfiguration() TemplateNumberFormatConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateNumericalDimensionField) *TemplateNumberFormatConfiguration {
		if v == nil {
			return nil
		}
		return v.FormatConfiguration
	}).(TemplateNumberFormatConfigurationPtrOutput)
}

// The custom hierarchy ID.
func (o TemplateNumericalDimensionFieldPtrOutput) HierarchyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateNumericalDimensionField) *string {
		if v == nil {
			return nil
		}
		return v.HierarchyId
	}).(pulumi.StringPtrOutput)
}

type TemplateNumericalMeasureField struct {
	// The aggregation function of the measure field.
	AggregationFunction *TemplateNumericalAggregationFunction `pulumi:"aggregationFunction"`
	// The column that is used in the `NumericalMeasureField` .
	Column TemplateColumnIdentifier `pulumi:"column"`
	// The custom field ID.
	FieldId string `pulumi:"fieldId"`
	// The format configuration of the field.
	FormatConfiguration *TemplateNumberFormatConfiguration `pulumi:"formatConfiguration"`
}

// TemplateNumericalMeasureFieldInput is an input type that accepts TemplateNumericalMeasureFieldArgs and TemplateNumericalMeasureFieldOutput values.
// You can construct a concrete instance of `TemplateNumericalMeasureFieldInput` via:
//
//	TemplateNumericalMeasureFieldArgs{...}
type TemplateNumericalMeasureFieldInput interface {
	pulumi.Input

	ToTemplateNumericalMeasureFieldOutput() TemplateNumericalMeasureFieldOutput
	ToTemplateNumericalMeasureFieldOutputWithContext(context.Context) TemplateNumericalMeasureFieldOutput
}

type TemplateNumericalMeasureFieldArgs struct {
	// The aggregation function of the measure field.
	AggregationFunction TemplateNumericalAggregationFunctionPtrInput `pulumi:"aggregationFunction"`
	// The column that is used in the `NumericalMeasureField` .
	Column TemplateColumnIdentifierInput `pulumi:"column"`
	// The custom field ID.
	FieldId pulumi.StringInput `pulumi:"fieldId"`
	// The format configuration of the field.
	FormatConfiguration TemplateNumberFormatConfigurationPtrInput `pulumi:"formatConfiguration"`
}

func (TemplateNumericalMeasureFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateNumericalMeasureField)(nil)).Elem()
}

func (i TemplateNumericalMeasureFieldArgs) ToTemplateNumericalMeasureFieldOutput() TemplateNumericalMeasureFieldOutput {
	return i.ToTemplateNumericalMeasureFieldOutputWithContext(context.Background())
}

func (i TemplateNumericalMeasureFieldArgs) ToTemplateNumericalMeasureFieldOutputWithContext(ctx context.Context) TemplateNumericalMeasureFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateNumericalMeasureFieldOutput)
}

func (i TemplateNumericalMeasureFieldArgs) ToTemplateNumericalMeasureFieldPtrOutput() TemplateNumericalMeasureFieldPtrOutput {
	return i.ToTemplateNumericalMeasureFieldPtrOutputWithContext(context.Background())
}

func (i TemplateNumericalMeasureFieldArgs) ToTemplateNumericalMeasureFieldPtrOutputWithContext(ctx context.Context) TemplateNumericalMeasureFieldPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateNumericalMeasureFieldOutput).ToTemplateNumericalMeasureFieldPtrOutputWithContext(ctx)
}

// TemplateNumericalMeasureFieldPtrInput is an input type that accepts TemplateNumericalMeasureFieldArgs, TemplateNumericalMeasureFieldPtr and TemplateNumericalMeasureFieldPtrOutput values.
// You can construct a concrete instance of `TemplateNumericalMeasureFieldPtrInput` via:
//
//	        TemplateNumericalMeasureFieldArgs{...}
//
//	or:
//
//	        nil
type TemplateNumericalMeasureFieldPtrInput interface {
	pulumi.Input

	ToTemplateNumericalMeasureFieldPtrOutput() TemplateNumericalMeasureFieldPtrOutput
	ToTemplateNumericalMeasureFieldPtrOutputWithContext(context.Context) TemplateNumericalMeasureFieldPtrOutput
}

type templateNumericalMeasureFieldPtrType TemplateNumericalMeasureFieldArgs

func TemplateNumericalMeasureFieldPtr(v *TemplateNumericalMeasureFieldArgs) TemplateNumericalMeasureFieldPtrInput {
	return (*templateNumericalMeasureFieldPtrType)(v)
}

func (*templateNumericalMeasureFieldPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateNumericalMeasureField)(nil)).Elem()
}

func (i *templateNumericalMeasureFieldPtrType) ToTemplateNumericalMeasureFieldPtrOutput() TemplateNumericalMeasureFieldPtrOutput {
	return i.ToTemplateNumericalMeasureFieldPtrOutputWithContext(context.Background())
}

func (i *templateNumericalMeasureFieldPtrType) ToTemplateNumericalMeasureFieldPtrOutputWithContext(ctx context.Context) TemplateNumericalMeasureFieldPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateNumericalMeasureFieldPtrOutput)
}

type TemplateNumericalMeasureFieldOutput struct{ *pulumi.OutputState }

func (TemplateNumericalMeasureFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateNumericalMeasureField)(nil)).Elem()
}

func (o TemplateNumericalMeasureFieldOutput) ToTemplateNumericalMeasureFieldOutput() TemplateNumericalMeasureFieldOutput {
	return o
}

func (o TemplateNumericalMeasureFieldOutput) ToTemplateNumericalMeasureFieldOutputWithContext(ctx context.Context) TemplateNumericalMeasureFieldOutput {
	return o
}

func (o TemplateNumericalMeasureFieldOutput) ToTemplateNumericalMeasureFieldPtrOutput() TemplateNumericalMeasureFieldPtrOutput {
	return o.ToTemplateNumericalMeasureFieldPtrOutputWithContext(context.Background())
}

func (o TemplateNumericalMeasureFieldOutput) ToTemplateNumericalMeasureFieldPtrOutputWithContext(ctx context.Context) TemplateNumericalMeasureFieldPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateNumericalMeasureField) *TemplateNumericalMeasureField {
		return &v
	}).(TemplateNumericalMeasureFieldPtrOutput)
}

// The aggregation function of the measure field.
func (o TemplateNumericalMeasureFieldOutput) AggregationFunction() TemplateNumericalAggregationFunctionPtrOutput {
	return o.ApplyT(func(v TemplateNumericalMeasureField) *TemplateNumericalAggregationFunction {
		return v.AggregationFunction
	}).(TemplateNumericalAggregationFunctionPtrOutput)
}

// The column that is used in the `NumericalMeasureField` .
func (o TemplateNumericalMeasureFieldOutput) Column() TemplateColumnIdentifierOutput {
	return o.ApplyT(func(v TemplateNumericalMeasureField) TemplateColumnIdentifier { return v.Column }).(TemplateColumnIdentifierOutput)
}

// The custom field ID.
func (o TemplateNumericalMeasureFieldOutput) FieldId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateNumericalMeasureField) string { return v.FieldId }).(pulumi.StringOutput)
}

// The format configuration of the field.
func (o TemplateNumericalMeasureFieldOutput) FormatConfiguration() TemplateNumberFormatConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateNumericalMeasureField) *TemplateNumberFormatConfiguration { return v.FormatConfiguration }).(TemplateNumberFormatConfigurationPtrOutput)
}

type TemplateNumericalMeasureFieldPtrOutput struct{ *pulumi.OutputState }

func (TemplateNumericalMeasureFieldPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateNumericalMeasureField)(nil)).Elem()
}

func (o TemplateNumericalMeasureFieldPtrOutput) ToTemplateNumericalMeasureFieldPtrOutput() TemplateNumericalMeasureFieldPtrOutput {
	return o
}

func (o TemplateNumericalMeasureFieldPtrOutput) ToTemplateNumericalMeasureFieldPtrOutputWithContext(ctx context.Context) TemplateNumericalMeasureFieldPtrOutput {
	return o
}

func (o TemplateNumericalMeasureFieldPtrOutput) Elem() TemplateNumericalMeasureFieldOutput {
	return o.ApplyT(func(v *TemplateNumericalMeasureField) TemplateNumericalMeasureField {
		if v != nil {
			return *v
		}
		var ret TemplateNumericalMeasureField
		return ret
	}).(TemplateNumericalMeasureFieldOutput)
}

// The aggregation function of the measure field.
func (o TemplateNumericalMeasureFieldPtrOutput) AggregationFunction() TemplateNumericalAggregationFunctionPtrOutput {
	return o.ApplyT(func(v *TemplateNumericalMeasureField) *TemplateNumericalAggregationFunction {
		if v == nil {
			return nil
		}
		return v.AggregationFunction
	}).(TemplateNumericalAggregationFunctionPtrOutput)
}

// The column that is used in the `NumericalMeasureField` .
func (o TemplateNumericalMeasureFieldPtrOutput) Column() TemplateColumnIdentifierPtrOutput {
	return o.ApplyT(func(v *TemplateNumericalMeasureField) *TemplateColumnIdentifier {
		if v == nil {
			return nil
		}
		return &v.Column
	}).(TemplateColumnIdentifierPtrOutput)
}

// The custom field ID.
func (o TemplateNumericalMeasureFieldPtrOutput) FieldId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateNumericalMeasureField) *string {
		if v == nil {
			return nil
		}
		return &v.FieldId
	}).(pulumi.StringPtrOutput)
}

// The format configuration of the field.
func (o TemplateNumericalMeasureFieldPtrOutput) FormatConfiguration() TemplateNumberFormatConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateNumericalMeasureField) *TemplateNumberFormatConfiguration {
		if v == nil {
			return nil
		}
		return v.FormatConfiguration
	}).(TemplateNumberFormatConfigurationPtrOutput)
}

type TemplatePaginationConfiguration struct {
	// Indicates the page number.
	PageNumber float64 `pulumi:"pageNumber"`
	// Indicates how many items render in one page.
	PageSize float64 `pulumi:"pageSize"`
}

// TemplatePaginationConfigurationInput is an input type that accepts TemplatePaginationConfigurationArgs and TemplatePaginationConfigurationOutput values.
// You can construct a concrete instance of `TemplatePaginationConfigurationInput` via:
//
//	TemplatePaginationConfigurationArgs{...}
type TemplatePaginationConfigurationInput interface {
	pulumi.Input

	ToTemplatePaginationConfigurationOutput() TemplatePaginationConfigurationOutput
	ToTemplatePaginationConfigurationOutputWithContext(context.Context) TemplatePaginationConfigurationOutput
}

type TemplatePaginationConfigurationArgs struct {
	// Indicates the page number.
	PageNumber pulumi.Float64Input `pulumi:"pageNumber"`
	// Indicates how many items render in one page.
	PageSize pulumi.Float64Input `pulumi:"pageSize"`
}

func (TemplatePaginationConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePaginationConfiguration)(nil)).Elem()
}

func (i TemplatePaginationConfigurationArgs) ToTemplatePaginationConfigurationOutput() TemplatePaginationConfigurationOutput {
	return i.ToTemplatePaginationConfigurationOutputWithContext(context.Background())
}

func (i TemplatePaginationConfigurationArgs) ToTemplatePaginationConfigurationOutputWithContext(ctx context.Context) TemplatePaginationConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePaginationConfigurationOutput)
}

func (i TemplatePaginationConfigurationArgs) ToTemplatePaginationConfigurationPtrOutput() TemplatePaginationConfigurationPtrOutput {
	return i.ToTemplatePaginationConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplatePaginationConfigurationArgs) ToTemplatePaginationConfigurationPtrOutputWithContext(ctx context.Context) TemplatePaginationConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePaginationConfigurationOutput).ToTemplatePaginationConfigurationPtrOutputWithContext(ctx)
}

// TemplatePaginationConfigurationPtrInput is an input type that accepts TemplatePaginationConfigurationArgs, TemplatePaginationConfigurationPtr and TemplatePaginationConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplatePaginationConfigurationPtrInput` via:
//
//	        TemplatePaginationConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplatePaginationConfigurationPtrInput interface {
	pulumi.Input

	ToTemplatePaginationConfigurationPtrOutput() TemplatePaginationConfigurationPtrOutput
	ToTemplatePaginationConfigurationPtrOutputWithContext(context.Context) TemplatePaginationConfigurationPtrOutput
}

type templatePaginationConfigurationPtrType TemplatePaginationConfigurationArgs

func TemplatePaginationConfigurationPtr(v *TemplatePaginationConfigurationArgs) TemplatePaginationConfigurationPtrInput {
	return (*templatePaginationConfigurationPtrType)(v)
}

func (*templatePaginationConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePaginationConfiguration)(nil)).Elem()
}

func (i *templatePaginationConfigurationPtrType) ToTemplatePaginationConfigurationPtrOutput() TemplatePaginationConfigurationPtrOutput {
	return i.ToTemplatePaginationConfigurationPtrOutputWithContext(context.Background())
}

func (i *templatePaginationConfigurationPtrType) ToTemplatePaginationConfigurationPtrOutputWithContext(ctx context.Context) TemplatePaginationConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePaginationConfigurationPtrOutput)
}

type TemplatePaginationConfigurationOutput struct{ *pulumi.OutputState }

func (TemplatePaginationConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePaginationConfiguration)(nil)).Elem()
}

func (o TemplatePaginationConfigurationOutput) ToTemplatePaginationConfigurationOutput() TemplatePaginationConfigurationOutput {
	return o
}

func (o TemplatePaginationConfigurationOutput) ToTemplatePaginationConfigurationOutputWithContext(ctx context.Context) TemplatePaginationConfigurationOutput {
	return o
}

func (o TemplatePaginationConfigurationOutput) ToTemplatePaginationConfigurationPtrOutput() TemplatePaginationConfigurationPtrOutput {
	return o.ToTemplatePaginationConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplatePaginationConfigurationOutput) ToTemplatePaginationConfigurationPtrOutputWithContext(ctx context.Context) TemplatePaginationConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplatePaginationConfiguration) *TemplatePaginationConfiguration {
		return &v
	}).(TemplatePaginationConfigurationPtrOutput)
}

// Indicates the page number.
func (o TemplatePaginationConfigurationOutput) PageNumber() pulumi.Float64Output {
	return o.ApplyT(func(v TemplatePaginationConfiguration) float64 { return v.PageNumber }).(pulumi.Float64Output)
}

// Indicates how many items render in one page.
func (o TemplatePaginationConfigurationOutput) PageSize() pulumi.Float64Output {
	return o.ApplyT(func(v TemplatePaginationConfiguration) float64 { return v.PageSize }).(pulumi.Float64Output)
}

type TemplatePaginationConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplatePaginationConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePaginationConfiguration)(nil)).Elem()
}

func (o TemplatePaginationConfigurationPtrOutput) ToTemplatePaginationConfigurationPtrOutput() TemplatePaginationConfigurationPtrOutput {
	return o
}

func (o TemplatePaginationConfigurationPtrOutput) ToTemplatePaginationConfigurationPtrOutputWithContext(ctx context.Context) TemplatePaginationConfigurationPtrOutput {
	return o
}

func (o TemplatePaginationConfigurationPtrOutput) Elem() TemplatePaginationConfigurationOutput {
	return o.ApplyT(func(v *TemplatePaginationConfiguration) TemplatePaginationConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplatePaginationConfiguration
		return ret
	}).(TemplatePaginationConfigurationOutput)
}

// Indicates the page number.
func (o TemplatePaginationConfigurationPtrOutput) PageNumber() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplatePaginationConfiguration) *float64 {
		if v == nil {
			return nil
		}
		return &v.PageNumber
	}).(pulumi.Float64PtrOutput)
}

// Indicates how many items render in one page.
func (o TemplatePaginationConfigurationPtrOutput) PageSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplatePaginationConfiguration) *float64 {
		if v == nil {
			return nil
		}
		return &v.PageSize
	}).(pulumi.Float64PtrOutput)
}

type TemplatePanelConfiguration struct {
	// Sets the background color for each panel.
	BackgroundColor *string `pulumi:"backgroundColor"`
	// Determines whether or not a background for each small multiples panel is rendered.
	BackgroundVisibility interface{} `pulumi:"backgroundVisibility"`
	// Sets the line color of panel borders.
	BorderColor *string `pulumi:"borderColor"`
	// Sets the line style of panel borders.
	BorderStyle *TemplatePanelBorderStyle `pulumi:"borderStyle"`
	// String based length that is composed of value and unit in px
	BorderThickness *string `pulumi:"borderThickness"`
	// Determines whether or not each panel displays a border.
	BorderVisibility interface{} `pulumi:"borderVisibility"`
	// String based length that is composed of value and unit in px
	GutterSpacing *string `pulumi:"gutterSpacing"`
	// Determines whether or not negative space between sibling panels is rendered.
	GutterVisibility interface{} `pulumi:"gutterVisibility"`
	// Configures the title display within each small multiples panel.
	Title *TemplatePanelTitleOptions `pulumi:"title"`
}

// TemplatePanelConfigurationInput is an input type that accepts TemplatePanelConfigurationArgs and TemplatePanelConfigurationOutput values.
// You can construct a concrete instance of `TemplatePanelConfigurationInput` via:
//
//	TemplatePanelConfigurationArgs{...}
type TemplatePanelConfigurationInput interface {
	pulumi.Input

	ToTemplatePanelConfigurationOutput() TemplatePanelConfigurationOutput
	ToTemplatePanelConfigurationOutputWithContext(context.Context) TemplatePanelConfigurationOutput
}

type TemplatePanelConfigurationArgs struct {
	// Sets the background color for each panel.
	BackgroundColor pulumi.StringPtrInput `pulumi:"backgroundColor"`
	// Determines whether or not a background for each small multiples panel is rendered.
	BackgroundVisibility pulumi.Input `pulumi:"backgroundVisibility"`
	// Sets the line color of panel borders.
	BorderColor pulumi.StringPtrInput `pulumi:"borderColor"`
	// Sets the line style of panel borders.
	BorderStyle TemplatePanelBorderStylePtrInput `pulumi:"borderStyle"`
	// String based length that is composed of value and unit in px
	BorderThickness pulumi.StringPtrInput `pulumi:"borderThickness"`
	// Determines whether or not each panel displays a border.
	BorderVisibility pulumi.Input `pulumi:"borderVisibility"`
	// String based length that is composed of value and unit in px
	GutterSpacing pulumi.StringPtrInput `pulumi:"gutterSpacing"`
	// Determines whether or not negative space between sibling panels is rendered.
	GutterVisibility pulumi.Input `pulumi:"gutterVisibility"`
	// Configures the title display within each small multiples panel.
	Title TemplatePanelTitleOptionsPtrInput `pulumi:"title"`
}

func (TemplatePanelConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePanelConfiguration)(nil)).Elem()
}

func (i TemplatePanelConfigurationArgs) ToTemplatePanelConfigurationOutput() TemplatePanelConfigurationOutput {
	return i.ToTemplatePanelConfigurationOutputWithContext(context.Background())
}

func (i TemplatePanelConfigurationArgs) ToTemplatePanelConfigurationOutputWithContext(ctx context.Context) TemplatePanelConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePanelConfigurationOutput)
}

func (i TemplatePanelConfigurationArgs) ToTemplatePanelConfigurationPtrOutput() TemplatePanelConfigurationPtrOutput {
	return i.ToTemplatePanelConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplatePanelConfigurationArgs) ToTemplatePanelConfigurationPtrOutputWithContext(ctx context.Context) TemplatePanelConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePanelConfigurationOutput).ToTemplatePanelConfigurationPtrOutputWithContext(ctx)
}

// TemplatePanelConfigurationPtrInput is an input type that accepts TemplatePanelConfigurationArgs, TemplatePanelConfigurationPtr and TemplatePanelConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplatePanelConfigurationPtrInput` via:
//
//	        TemplatePanelConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplatePanelConfigurationPtrInput interface {
	pulumi.Input

	ToTemplatePanelConfigurationPtrOutput() TemplatePanelConfigurationPtrOutput
	ToTemplatePanelConfigurationPtrOutputWithContext(context.Context) TemplatePanelConfigurationPtrOutput
}

type templatePanelConfigurationPtrType TemplatePanelConfigurationArgs

func TemplatePanelConfigurationPtr(v *TemplatePanelConfigurationArgs) TemplatePanelConfigurationPtrInput {
	return (*templatePanelConfigurationPtrType)(v)
}

func (*templatePanelConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePanelConfiguration)(nil)).Elem()
}

func (i *templatePanelConfigurationPtrType) ToTemplatePanelConfigurationPtrOutput() TemplatePanelConfigurationPtrOutput {
	return i.ToTemplatePanelConfigurationPtrOutputWithContext(context.Background())
}

func (i *templatePanelConfigurationPtrType) ToTemplatePanelConfigurationPtrOutputWithContext(ctx context.Context) TemplatePanelConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePanelConfigurationPtrOutput)
}

type TemplatePanelConfigurationOutput struct{ *pulumi.OutputState }

func (TemplatePanelConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePanelConfiguration)(nil)).Elem()
}

func (o TemplatePanelConfigurationOutput) ToTemplatePanelConfigurationOutput() TemplatePanelConfigurationOutput {
	return o
}

func (o TemplatePanelConfigurationOutput) ToTemplatePanelConfigurationOutputWithContext(ctx context.Context) TemplatePanelConfigurationOutput {
	return o
}

func (o TemplatePanelConfigurationOutput) ToTemplatePanelConfigurationPtrOutput() TemplatePanelConfigurationPtrOutput {
	return o.ToTemplatePanelConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplatePanelConfigurationOutput) ToTemplatePanelConfigurationPtrOutputWithContext(ctx context.Context) TemplatePanelConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplatePanelConfiguration) *TemplatePanelConfiguration {
		return &v
	}).(TemplatePanelConfigurationPtrOutput)
}

// Sets the background color for each panel.
func (o TemplatePanelConfigurationOutput) BackgroundColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplatePanelConfiguration) *string { return v.BackgroundColor }).(pulumi.StringPtrOutput)
}

// Determines whether or not a background for each small multiples panel is rendered.
func (o TemplatePanelConfigurationOutput) BackgroundVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplatePanelConfiguration) interface{} { return v.BackgroundVisibility }).(pulumi.AnyOutput)
}

// Sets the line color of panel borders.
func (o TemplatePanelConfigurationOutput) BorderColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplatePanelConfiguration) *string { return v.BorderColor }).(pulumi.StringPtrOutput)
}

// Sets the line style of panel borders.
func (o TemplatePanelConfigurationOutput) BorderStyle() TemplatePanelBorderStylePtrOutput {
	return o.ApplyT(func(v TemplatePanelConfiguration) *TemplatePanelBorderStyle { return v.BorderStyle }).(TemplatePanelBorderStylePtrOutput)
}

// String based length that is composed of value and unit in px
func (o TemplatePanelConfigurationOutput) BorderThickness() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplatePanelConfiguration) *string { return v.BorderThickness }).(pulumi.StringPtrOutput)
}

// Determines whether or not each panel displays a border.
func (o TemplatePanelConfigurationOutput) BorderVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplatePanelConfiguration) interface{} { return v.BorderVisibility }).(pulumi.AnyOutput)
}

// String based length that is composed of value and unit in px
func (o TemplatePanelConfigurationOutput) GutterSpacing() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplatePanelConfiguration) *string { return v.GutterSpacing }).(pulumi.StringPtrOutput)
}

// Determines whether or not negative space between sibling panels is rendered.
func (o TemplatePanelConfigurationOutput) GutterVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplatePanelConfiguration) interface{} { return v.GutterVisibility }).(pulumi.AnyOutput)
}

// Configures the title display within each small multiples panel.
func (o TemplatePanelConfigurationOutput) Title() TemplatePanelTitleOptionsPtrOutput {
	return o.ApplyT(func(v TemplatePanelConfiguration) *TemplatePanelTitleOptions { return v.Title }).(TemplatePanelTitleOptionsPtrOutput)
}

type TemplatePanelConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplatePanelConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePanelConfiguration)(nil)).Elem()
}

func (o TemplatePanelConfigurationPtrOutput) ToTemplatePanelConfigurationPtrOutput() TemplatePanelConfigurationPtrOutput {
	return o
}

func (o TemplatePanelConfigurationPtrOutput) ToTemplatePanelConfigurationPtrOutputWithContext(ctx context.Context) TemplatePanelConfigurationPtrOutput {
	return o
}

func (o TemplatePanelConfigurationPtrOutput) Elem() TemplatePanelConfigurationOutput {
	return o.ApplyT(func(v *TemplatePanelConfiguration) TemplatePanelConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplatePanelConfiguration
		return ret
	}).(TemplatePanelConfigurationOutput)
}

// Sets the background color for each panel.
func (o TemplatePanelConfigurationPtrOutput) BackgroundColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplatePanelConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.BackgroundColor
	}).(pulumi.StringPtrOutput)
}

// Determines whether or not a background for each small multiples panel is rendered.
func (o TemplatePanelConfigurationPtrOutput) BackgroundVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplatePanelConfiguration) interface{} {
		if v == nil {
			return nil
		}
		return v.BackgroundVisibility
	}).(pulumi.AnyOutput)
}

// Sets the line color of panel borders.
func (o TemplatePanelConfigurationPtrOutput) BorderColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplatePanelConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.BorderColor
	}).(pulumi.StringPtrOutput)
}

// Sets the line style of panel borders.
func (o TemplatePanelConfigurationPtrOutput) BorderStyle() TemplatePanelBorderStylePtrOutput {
	return o.ApplyT(func(v *TemplatePanelConfiguration) *TemplatePanelBorderStyle {
		if v == nil {
			return nil
		}
		return v.BorderStyle
	}).(TemplatePanelBorderStylePtrOutput)
}

// String based length that is composed of value and unit in px
func (o TemplatePanelConfigurationPtrOutput) BorderThickness() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplatePanelConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.BorderThickness
	}).(pulumi.StringPtrOutput)
}

// Determines whether or not each panel displays a border.
func (o TemplatePanelConfigurationPtrOutput) BorderVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplatePanelConfiguration) interface{} {
		if v == nil {
			return nil
		}
		return v.BorderVisibility
	}).(pulumi.AnyOutput)
}

// String based length that is composed of value and unit in px
func (o TemplatePanelConfigurationPtrOutput) GutterSpacing() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplatePanelConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.GutterSpacing
	}).(pulumi.StringPtrOutput)
}

// Determines whether or not negative space between sibling panels is rendered.
func (o TemplatePanelConfigurationPtrOutput) GutterVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplatePanelConfiguration) interface{} {
		if v == nil {
			return nil
		}
		return v.GutterVisibility
	}).(pulumi.AnyOutput)
}

// Configures the title display within each small multiples panel.
func (o TemplatePanelConfigurationPtrOutput) Title() TemplatePanelTitleOptionsPtrOutput {
	return o.ApplyT(func(v *TemplatePanelConfiguration) *TemplatePanelTitleOptions {
		if v == nil {
			return nil
		}
		return v.Title
	}).(TemplatePanelTitleOptionsPtrOutput)
}

type TemplatePanelTitleOptions struct {
	FontConfiguration *TemplateFontConfiguration `pulumi:"fontConfiguration"`
	// Sets the horizontal text alignment of the title within each panel.
	HorizontalTextAlignment *TemplateHorizontalTextAlignment `pulumi:"horizontalTextAlignment"`
	// Determines whether or not panel titles are displayed.
	Visibility interface{} `pulumi:"visibility"`
}

// TemplatePanelTitleOptionsInput is an input type that accepts TemplatePanelTitleOptionsArgs and TemplatePanelTitleOptionsOutput values.
// You can construct a concrete instance of `TemplatePanelTitleOptionsInput` via:
//
//	TemplatePanelTitleOptionsArgs{...}
type TemplatePanelTitleOptionsInput interface {
	pulumi.Input

	ToTemplatePanelTitleOptionsOutput() TemplatePanelTitleOptionsOutput
	ToTemplatePanelTitleOptionsOutputWithContext(context.Context) TemplatePanelTitleOptionsOutput
}

type TemplatePanelTitleOptionsArgs struct {
	FontConfiguration TemplateFontConfigurationPtrInput `pulumi:"fontConfiguration"`
	// Sets the horizontal text alignment of the title within each panel.
	HorizontalTextAlignment TemplateHorizontalTextAlignmentPtrInput `pulumi:"horizontalTextAlignment"`
	// Determines whether or not panel titles are displayed.
	Visibility pulumi.Input `pulumi:"visibility"`
}

func (TemplatePanelTitleOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePanelTitleOptions)(nil)).Elem()
}

func (i TemplatePanelTitleOptionsArgs) ToTemplatePanelTitleOptionsOutput() TemplatePanelTitleOptionsOutput {
	return i.ToTemplatePanelTitleOptionsOutputWithContext(context.Background())
}

func (i TemplatePanelTitleOptionsArgs) ToTemplatePanelTitleOptionsOutputWithContext(ctx context.Context) TemplatePanelTitleOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePanelTitleOptionsOutput)
}

func (i TemplatePanelTitleOptionsArgs) ToTemplatePanelTitleOptionsPtrOutput() TemplatePanelTitleOptionsPtrOutput {
	return i.ToTemplatePanelTitleOptionsPtrOutputWithContext(context.Background())
}

func (i TemplatePanelTitleOptionsArgs) ToTemplatePanelTitleOptionsPtrOutputWithContext(ctx context.Context) TemplatePanelTitleOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePanelTitleOptionsOutput).ToTemplatePanelTitleOptionsPtrOutputWithContext(ctx)
}

// TemplatePanelTitleOptionsPtrInput is an input type that accepts TemplatePanelTitleOptionsArgs, TemplatePanelTitleOptionsPtr and TemplatePanelTitleOptionsPtrOutput values.
// You can construct a concrete instance of `TemplatePanelTitleOptionsPtrInput` via:
//
//	        TemplatePanelTitleOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplatePanelTitleOptionsPtrInput interface {
	pulumi.Input

	ToTemplatePanelTitleOptionsPtrOutput() TemplatePanelTitleOptionsPtrOutput
	ToTemplatePanelTitleOptionsPtrOutputWithContext(context.Context) TemplatePanelTitleOptionsPtrOutput
}

type templatePanelTitleOptionsPtrType TemplatePanelTitleOptionsArgs

func TemplatePanelTitleOptionsPtr(v *TemplatePanelTitleOptionsArgs) TemplatePanelTitleOptionsPtrInput {
	return (*templatePanelTitleOptionsPtrType)(v)
}

func (*templatePanelTitleOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePanelTitleOptions)(nil)).Elem()
}

func (i *templatePanelTitleOptionsPtrType) ToTemplatePanelTitleOptionsPtrOutput() TemplatePanelTitleOptionsPtrOutput {
	return i.ToTemplatePanelTitleOptionsPtrOutputWithContext(context.Background())
}

func (i *templatePanelTitleOptionsPtrType) ToTemplatePanelTitleOptionsPtrOutputWithContext(ctx context.Context) TemplatePanelTitleOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePanelTitleOptionsPtrOutput)
}

type TemplatePanelTitleOptionsOutput struct{ *pulumi.OutputState }

func (TemplatePanelTitleOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePanelTitleOptions)(nil)).Elem()
}

func (o TemplatePanelTitleOptionsOutput) ToTemplatePanelTitleOptionsOutput() TemplatePanelTitleOptionsOutput {
	return o
}

func (o TemplatePanelTitleOptionsOutput) ToTemplatePanelTitleOptionsOutputWithContext(ctx context.Context) TemplatePanelTitleOptionsOutput {
	return o
}

func (o TemplatePanelTitleOptionsOutput) ToTemplatePanelTitleOptionsPtrOutput() TemplatePanelTitleOptionsPtrOutput {
	return o.ToTemplatePanelTitleOptionsPtrOutputWithContext(context.Background())
}

func (o TemplatePanelTitleOptionsOutput) ToTemplatePanelTitleOptionsPtrOutputWithContext(ctx context.Context) TemplatePanelTitleOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplatePanelTitleOptions) *TemplatePanelTitleOptions {
		return &v
	}).(TemplatePanelTitleOptionsPtrOutput)
}

func (o TemplatePanelTitleOptionsOutput) FontConfiguration() TemplateFontConfigurationPtrOutput {
	return o.ApplyT(func(v TemplatePanelTitleOptions) *TemplateFontConfiguration { return v.FontConfiguration }).(TemplateFontConfigurationPtrOutput)
}

// Sets the horizontal text alignment of the title within each panel.
func (o TemplatePanelTitleOptionsOutput) HorizontalTextAlignment() TemplateHorizontalTextAlignmentPtrOutput {
	return o.ApplyT(func(v TemplatePanelTitleOptions) *TemplateHorizontalTextAlignment { return v.HorizontalTextAlignment }).(TemplateHorizontalTextAlignmentPtrOutput)
}

// Determines whether or not panel titles are displayed.
func (o TemplatePanelTitleOptionsOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplatePanelTitleOptions) interface{} { return v.Visibility }).(pulumi.AnyOutput)
}

type TemplatePanelTitleOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplatePanelTitleOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePanelTitleOptions)(nil)).Elem()
}

func (o TemplatePanelTitleOptionsPtrOutput) ToTemplatePanelTitleOptionsPtrOutput() TemplatePanelTitleOptionsPtrOutput {
	return o
}

func (o TemplatePanelTitleOptionsPtrOutput) ToTemplatePanelTitleOptionsPtrOutputWithContext(ctx context.Context) TemplatePanelTitleOptionsPtrOutput {
	return o
}

func (o TemplatePanelTitleOptionsPtrOutput) Elem() TemplatePanelTitleOptionsOutput {
	return o.ApplyT(func(v *TemplatePanelTitleOptions) TemplatePanelTitleOptions {
		if v != nil {
			return *v
		}
		var ret TemplatePanelTitleOptions
		return ret
	}).(TemplatePanelTitleOptionsOutput)
}

func (o TemplatePanelTitleOptionsPtrOutput) FontConfiguration() TemplateFontConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplatePanelTitleOptions) *TemplateFontConfiguration {
		if v == nil {
			return nil
		}
		return v.FontConfiguration
	}).(TemplateFontConfigurationPtrOutput)
}

// Sets the horizontal text alignment of the title within each panel.
func (o TemplatePanelTitleOptionsPtrOutput) HorizontalTextAlignment() TemplateHorizontalTextAlignmentPtrOutput {
	return o.ApplyT(func(v *TemplatePanelTitleOptions) *TemplateHorizontalTextAlignment {
		if v == nil {
			return nil
		}
		return v.HorizontalTextAlignment
	}).(TemplateHorizontalTextAlignmentPtrOutput)
}

// Determines whether or not panel titles are displayed.
func (o TemplatePanelTitleOptionsPtrOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplatePanelTitleOptions) interface{} {
		if v == nil {
			return nil
		}
		return v.Visibility
	}).(pulumi.AnyOutput)
}

type TemplateParameterControl struct {
	// A control from a date parameter that specifies date and time.
	DateTimePicker *TemplateParameterDateTimePickerControl `pulumi:"dateTimePicker"`
	// A control to display a dropdown list with buttons that are used to select a single value.
	Dropdown *TemplateParameterDropDownControl `pulumi:"dropdown"`
	// A control to display a list with buttons or boxes that are used to select either a single value or multiple values.
	List *TemplateParameterListControl `pulumi:"list"`
	// A control to display a horizontal toggle bar. This is used to change a value by sliding the toggle.
	Slider *TemplateParameterSliderControl `pulumi:"slider"`
	// A control to display a text box that is used to enter multiple entries.
	TextArea *TemplateParameterTextAreaControl `pulumi:"textArea"`
	// A control to display a text box that is used to enter a single entry.
	TextField *TemplateParameterTextFieldControl `pulumi:"textField"`
}

// TemplateParameterControlInput is an input type that accepts TemplateParameterControlArgs and TemplateParameterControlOutput values.
// You can construct a concrete instance of `TemplateParameterControlInput` via:
//
//	TemplateParameterControlArgs{...}
type TemplateParameterControlInput interface {
	pulumi.Input

	ToTemplateParameterControlOutput() TemplateParameterControlOutput
	ToTemplateParameterControlOutputWithContext(context.Context) TemplateParameterControlOutput
}

type TemplateParameterControlArgs struct {
	// A control from a date parameter that specifies date and time.
	DateTimePicker TemplateParameterDateTimePickerControlPtrInput `pulumi:"dateTimePicker"`
	// A control to display a dropdown list with buttons that are used to select a single value.
	Dropdown TemplateParameterDropDownControlPtrInput `pulumi:"dropdown"`
	// A control to display a list with buttons or boxes that are used to select either a single value or multiple values.
	List TemplateParameterListControlPtrInput `pulumi:"list"`
	// A control to display a horizontal toggle bar. This is used to change a value by sliding the toggle.
	Slider TemplateParameterSliderControlPtrInput `pulumi:"slider"`
	// A control to display a text box that is used to enter multiple entries.
	TextArea TemplateParameterTextAreaControlPtrInput `pulumi:"textArea"`
	// A control to display a text box that is used to enter a single entry.
	TextField TemplateParameterTextFieldControlPtrInput `pulumi:"textField"`
}

func (TemplateParameterControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateParameterControl)(nil)).Elem()
}

func (i TemplateParameterControlArgs) ToTemplateParameterControlOutput() TemplateParameterControlOutput {
	return i.ToTemplateParameterControlOutputWithContext(context.Background())
}

func (i TemplateParameterControlArgs) ToTemplateParameterControlOutputWithContext(ctx context.Context) TemplateParameterControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateParameterControlOutput)
}

// TemplateParameterControlArrayInput is an input type that accepts TemplateParameterControlArray and TemplateParameterControlArrayOutput values.
// You can construct a concrete instance of `TemplateParameterControlArrayInput` via:
//
//	TemplateParameterControlArray{ TemplateParameterControlArgs{...} }
type TemplateParameterControlArrayInput interface {
	pulumi.Input

	ToTemplateParameterControlArrayOutput() TemplateParameterControlArrayOutput
	ToTemplateParameterControlArrayOutputWithContext(context.Context) TemplateParameterControlArrayOutput
}

type TemplateParameterControlArray []TemplateParameterControlInput

func (TemplateParameterControlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateParameterControl)(nil)).Elem()
}

func (i TemplateParameterControlArray) ToTemplateParameterControlArrayOutput() TemplateParameterControlArrayOutput {
	return i.ToTemplateParameterControlArrayOutputWithContext(context.Background())
}

func (i TemplateParameterControlArray) ToTemplateParameterControlArrayOutputWithContext(ctx context.Context) TemplateParameterControlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateParameterControlArrayOutput)
}

type TemplateParameterControlOutput struct{ *pulumi.OutputState }

func (TemplateParameterControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateParameterControl)(nil)).Elem()
}

func (o TemplateParameterControlOutput) ToTemplateParameterControlOutput() TemplateParameterControlOutput {
	return o
}

func (o TemplateParameterControlOutput) ToTemplateParameterControlOutputWithContext(ctx context.Context) TemplateParameterControlOutput {
	return o
}

// A control from a date parameter that specifies date and time.
func (o TemplateParameterControlOutput) DateTimePicker() TemplateParameterDateTimePickerControlPtrOutput {
	return o.ApplyT(func(v TemplateParameterControl) *TemplateParameterDateTimePickerControl { return v.DateTimePicker }).(TemplateParameterDateTimePickerControlPtrOutput)
}

// A control to display a dropdown list with buttons that are used to select a single value.
func (o TemplateParameterControlOutput) Dropdown() TemplateParameterDropDownControlPtrOutput {
	return o.ApplyT(func(v TemplateParameterControl) *TemplateParameterDropDownControl { return v.Dropdown }).(TemplateParameterDropDownControlPtrOutput)
}

// A control to display a list with buttons or boxes that are used to select either a single value or multiple values.
func (o TemplateParameterControlOutput) List() TemplateParameterListControlPtrOutput {
	return o.ApplyT(func(v TemplateParameterControl) *TemplateParameterListControl { return v.List }).(TemplateParameterListControlPtrOutput)
}

// A control to display a horizontal toggle bar. This is used to change a value by sliding the toggle.
func (o TemplateParameterControlOutput) Slider() TemplateParameterSliderControlPtrOutput {
	return o.ApplyT(func(v TemplateParameterControl) *TemplateParameterSliderControl { return v.Slider }).(TemplateParameterSliderControlPtrOutput)
}

// A control to display a text box that is used to enter multiple entries.
func (o TemplateParameterControlOutput) TextArea() TemplateParameterTextAreaControlPtrOutput {
	return o.ApplyT(func(v TemplateParameterControl) *TemplateParameterTextAreaControl { return v.TextArea }).(TemplateParameterTextAreaControlPtrOutput)
}

// A control to display a text box that is used to enter a single entry.
func (o TemplateParameterControlOutput) TextField() TemplateParameterTextFieldControlPtrOutput {
	return o.ApplyT(func(v TemplateParameterControl) *TemplateParameterTextFieldControl { return v.TextField }).(TemplateParameterTextFieldControlPtrOutput)
}

type TemplateParameterControlArrayOutput struct{ *pulumi.OutputState }

func (TemplateParameterControlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateParameterControl)(nil)).Elem()
}

func (o TemplateParameterControlArrayOutput) ToTemplateParameterControlArrayOutput() TemplateParameterControlArrayOutput {
	return o
}

func (o TemplateParameterControlArrayOutput) ToTemplateParameterControlArrayOutputWithContext(ctx context.Context) TemplateParameterControlArrayOutput {
	return o
}

func (o TemplateParameterControlArrayOutput) Index(i pulumi.IntInput) TemplateParameterControlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateParameterControl {
		return vs[0].([]TemplateParameterControl)[vs[1].(int)]
	}).(TemplateParameterControlOutput)
}

type TemplateParameterDateTimePickerControl struct {
	// The display options of a control.
	DisplayOptions *TemplateDateTimePickerControlDisplayOptions `pulumi:"displayOptions"`
	// The ID of the `ParameterDateTimePickerControl` .
	ParameterControlId string `pulumi:"parameterControlId"`
	// The name of the `ParameterDateTimePickerControl` .
	SourceParameterName string `pulumi:"sourceParameterName"`
	// The title of the `ParameterDateTimePickerControl` .
	Title string `pulumi:"title"`
}

// TemplateParameterDateTimePickerControlInput is an input type that accepts TemplateParameterDateTimePickerControlArgs and TemplateParameterDateTimePickerControlOutput values.
// You can construct a concrete instance of `TemplateParameterDateTimePickerControlInput` via:
//
//	TemplateParameterDateTimePickerControlArgs{...}
type TemplateParameterDateTimePickerControlInput interface {
	pulumi.Input

	ToTemplateParameterDateTimePickerControlOutput() TemplateParameterDateTimePickerControlOutput
	ToTemplateParameterDateTimePickerControlOutputWithContext(context.Context) TemplateParameterDateTimePickerControlOutput
}

type TemplateParameterDateTimePickerControlArgs struct {
	// The display options of a control.
	DisplayOptions TemplateDateTimePickerControlDisplayOptionsPtrInput `pulumi:"displayOptions"`
	// The ID of the `ParameterDateTimePickerControl` .
	ParameterControlId pulumi.StringInput `pulumi:"parameterControlId"`
	// The name of the `ParameterDateTimePickerControl` .
	SourceParameterName pulumi.StringInput `pulumi:"sourceParameterName"`
	// The title of the `ParameterDateTimePickerControl` .
	Title pulumi.StringInput `pulumi:"title"`
}

func (TemplateParameterDateTimePickerControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateParameterDateTimePickerControl)(nil)).Elem()
}

func (i TemplateParameterDateTimePickerControlArgs) ToTemplateParameterDateTimePickerControlOutput() TemplateParameterDateTimePickerControlOutput {
	return i.ToTemplateParameterDateTimePickerControlOutputWithContext(context.Background())
}

func (i TemplateParameterDateTimePickerControlArgs) ToTemplateParameterDateTimePickerControlOutputWithContext(ctx context.Context) TemplateParameterDateTimePickerControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateParameterDateTimePickerControlOutput)
}

func (i TemplateParameterDateTimePickerControlArgs) ToTemplateParameterDateTimePickerControlPtrOutput() TemplateParameterDateTimePickerControlPtrOutput {
	return i.ToTemplateParameterDateTimePickerControlPtrOutputWithContext(context.Background())
}

func (i TemplateParameterDateTimePickerControlArgs) ToTemplateParameterDateTimePickerControlPtrOutputWithContext(ctx context.Context) TemplateParameterDateTimePickerControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateParameterDateTimePickerControlOutput).ToTemplateParameterDateTimePickerControlPtrOutputWithContext(ctx)
}

// TemplateParameterDateTimePickerControlPtrInput is an input type that accepts TemplateParameterDateTimePickerControlArgs, TemplateParameterDateTimePickerControlPtr and TemplateParameterDateTimePickerControlPtrOutput values.
// You can construct a concrete instance of `TemplateParameterDateTimePickerControlPtrInput` via:
//
//	        TemplateParameterDateTimePickerControlArgs{...}
//
//	or:
//
//	        nil
type TemplateParameterDateTimePickerControlPtrInput interface {
	pulumi.Input

	ToTemplateParameterDateTimePickerControlPtrOutput() TemplateParameterDateTimePickerControlPtrOutput
	ToTemplateParameterDateTimePickerControlPtrOutputWithContext(context.Context) TemplateParameterDateTimePickerControlPtrOutput
}

type templateParameterDateTimePickerControlPtrType TemplateParameterDateTimePickerControlArgs

func TemplateParameterDateTimePickerControlPtr(v *TemplateParameterDateTimePickerControlArgs) TemplateParameterDateTimePickerControlPtrInput {
	return (*templateParameterDateTimePickerControlPtrType)(v)
}

func (*templateParameterDateTimePickerControlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateParameterDateTimePickerControl)(nil)).Elem()
}

func (i *templateParameterDateTimePickerControlPtrType) ToTemplateParameterDateTimePickerControlPtrOutput() TemplateParameterDateTimePickerControlPtrOutput {
	return i.ToTemplateParameterDateTimePickerControlPtrOutputWithContext(context.Background())
}

func (i *templateParameterDateTimePickerControlPtrType) ToTemplateParameterDateTimePickerControlPtrOutputWithContext(ctx context.Context) TemplateParameterDateTimePickerControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateParameterDateTimePickerControlPtrOutput)
}

type TemplateParameterDateTimePickerControlOutput struct{ *pulumi.OutputState }

func (TemplateParameterDateTimePickerControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateParameterDateTimePickerControl)(nil)).Elem()
}

func (o TemplateParameterDateTimePickerControlOutput) ToTemplateParameterDateTimePickerControlOutput() TemplateParameterDateTimePickerControlOutput {
	return o
}

func (o TemplateParameterDateTimePickerControlOutput) ToTemplateParameterDateTimePickerControlOutputWithContext(ctx context.Context) TemplateParameterDateTimePickerControlOutput {
	return o
}

func (o TemplateParameterDateTimePickerControlOutput) ToTemplateParameterDateTimePickerControlPtrOutput() TemplateParameterDateTimePickerControlPtrOutput {
	return o.ToTemplateParameterDateTimePickerControlPtrOutputWithContext(context.Background())
}

func (o TemplateParameterDateTimePickerControlOutput) ToTemplateParameterDateTimePickerControlPtrOutputWithContext(ctx context.Context) TemplateParameterDateTimePickerControlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateParameterDateTimePickerControl) *TemplateParameterDateTimePickerControl {
		return &v
	}).(TemplateParameterDateTimePickerControlPtrOutput)
}

// The display options of a control.
func (o TemplateParameterDateTimePickerControlOutput) DisplayOptions() TemplateDateTimePickerControlDisplayOptionsPtrOutput {
	return o.ApplyT(func(v TemplateParameterDateTimePickerControl) *TemplateDateTimePickerControlDisplayOptions {
		return v.DisplayOptions
	}).(TemplateDateTimePickerControlDisplayOptionsPtrOutput)
}

// The ID of the `ParameterDateTimePickerControl` .
func (o TemplateParameterDateTimePickerControlOutput) ParameterControlId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateParameterDateTimePickerControl) string { return v.ParameterControlId }).(pulumi.StringOutput)
}

// The name of the `ParameterDateTimePickerControl` .
func (o TemplateParameterDateTimePickerControlOutput) SourceParameterName() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateParameterDateTimePickerControl) string { return v.SourceParameterName }).(pulumi.StringOutput)
}

// The title of the `ParameterDateTimePickerControl` .
func (o TemplateParameterDateTimePickerControlOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateParameterDateTimePickerControl) string { return v.Title }).(pulumi.StringOutput)
}

type TemplateParameterDateTimePickerControlPtrOutput struct{ *pulumi.OutputState }

func (TemplateParameterDateTimePickerControlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateParameterDateTimePickerControl)(nil)).Elem()
}

func (o TemplateParameterDateTimePickerControlPtrOutput) ToTemplateParameterDateTimePickerControlPtrOutput() TemplateParameterDateTimePickerControlPtrOutput {
	return o
}

func (o TemplateParameterDateTimePickerControlPtrOutput) ToTemplateParameterDateTimePickerControlPtrOutputWithContext(ctx context.Context) TemplateParameterDateTimePickerControlPtrOutput {
	return o
}

func (o TemplateParameterDateTimePickerControlPtrOutput) Elem() TemplateParameterDateTimePickerControlOutput {
	return o.ApplyT(func(v *TemplateParameterDateTimePickerControl) TemplateParameterDateTimePickerControl {
		if v != nil {
			return *v
		}
		var ret TemplateParameterDateTimePickerControl
		return ret
	}).(TemplateParameterDateTimePickerControlOutput)
}

// The display options of a control.
func (o TemplateParameterDateTimePickerControlPtrOutput) DisplayOptions() TemplateDateTimePickerControlDisplayOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateParameterDateTimePickerControl) *TemplateDateTimePickerControlDisplayOptions {
		if v == nil {
			return nil
		}
		return v.DisplayOptions
	}).(TemplateDateTimePickerControlDisplayOptionsPtrOutput)
}

// The ID of the `ParameterDateTimePickerControl` .
func (o TemplateParameterDateTimePickerControlPtrOutput) ParameterControlId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateParameterDateTimePickerControl) *string {
		if v == nil {
			return nil
		}
		return &v.ParameterControlId
	}).(pulumi.StringPtrOutput)
}

// The name of the `ParameterDateTimePickerControl` .
func (o TemplateParameterDateTimePickerControlPtrOutput) SourceParameterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateParameterDateTimePickerControl) *string {
		if v == nil {
			return nil
		}
		return &v.SourceParameterName
	}).(pulumi.StringPtrOutput)
}

// The title of the `ParameterDateTimePickerControl` .
func (o TemplateParameterDateTimePickerControlPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateParameterDateTimePickerControl) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type TemplateParameterDeclaration struct {
	// A parameter declaration for the `DateTime` data type.
	DateTimeParameterDeclaration *TemplateDateTimeParameterDeclaration `pulumi:"dateTimeParameterDeclaration"`
	// A parameter declaration for the `Decimal` data type.
	DecimalParameterDeclaration *TemplateDecimalParameterDeclaration `pulumi:"decimalParameterDeclaration"`
	// A parameter declaration for the `Integer` data type.
	IntegerParameterDeclaration *TemplateIntegerParameterDeclaration `pulumi:"integerParameterDeclaration"`
	// A parameter declaration for the `String` data type.
	StringParameterDeclaration *TemplateStringParameterDeclaration `pulumi:"stringParameterDeclaration"`
}

// TemplateParameterDeclarationInput is an input type that accepts TemplateParameterDeclarationArgs and TemplateParameterDeclarationOutput values.
// You can construct a concrete instance of `TemplateParameterDeclarationInput` via:
//
//	TemplateParameterDeclarationArgs{...}
type TemplateParameterDeclarationInput interface {
	pulumi.Input

	ToTemplateParameterDeclarationOutput() TemplateParameterDeclarationOutput
	ToTemplateParameterDeclarationOutputWithContext(context.Context) TemplateParameterDeclarationOutput
}

type TemplateParameterDeclarationArgs struct {
	// A parameter declaration for the `DateTime` data type.
	DateTimeParameterDeclaration TemplateDateTimeParameterDeclarationPtrInput `pulumi:"dateTimeParameterDeclaration"`
	// A parameter declaration for the `Decimal` data type.
	DecimalParameterDeclaration TemplateDecimalParameterDeclarationPtrInput `pulumi:"decimalParameterDeclaration"`
	// A parameter declaration for the `Integer` data type.
	IntegerParameterDeclaration TemplateIntegerParameterDeclarationPtrInput `pulumi:"integerParameterDeclaration"`
	// A parameter declaration for the `String` data type.
	StringParameterDeclaration TemplateStringParameterDeclarationPtrInput `pulumi:"stringParameterDeclaration"`
}

func (TemplateParameterDeclarationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateParameterDeclaration)(nil)).Elem()
}

func (i TemplateParameterDeclarationArgs) ToTemplateParameterDeclarationOutput() TemplateParameterDeclarationOutput {
	return i.ToTemplateParameterDeclarationOutputWithContext(context.Background())
}

func (i TemplateParameterDeclarationArgs) ToTemplateParameterDeclarationOutputWithContext(ctx context.Context) TemplateParameterDeclarationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateParameterDeclarationOutput)
}

// TemplateParameterDeclarationArrayInput is an input type that accepts TemplateParameterDeclarationArray and TemplateParameterDeclarationArrayOutput values.
// You can construct a concrete instance of `TemplateParameterDeclarationArrayInput` via:
//
//	TemplateParameterDeclarationArray{ TemplateParameterDeclarationArgs{...} }
type TemplateParameterDeclarationArrayInput interface {
	pulumi.Input

	ToTemplateParameterDeclarationArrayOutput() TemplateParameterDeclarationArrayOutput
	ToTemplateParameterDeclarationArrayOutputWithContext(context.Context) TemplateParameterDeclarationArrayOutput
}

type TemplateParameterDeclarationArray []TemplateParameterDeclarationInput

func (TemplateParameterDeclarationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateParameterDeclaration)(nil)).Elem()
}

func (i TemplateParameterDeclarationArray) ToTemplateParameterDeclarationArrayOutput() TemplateParameterDeclarationArrayOutput {
	return i.ToTemplateParameterDeclarationArrayOutputWithContext(context.Background())
}

func (i TemplateParameterDeclarationArray) ToTemplateParameterDeclarationArrayOutputWithContext(ctx context.Context) TemplateParameterDeclarationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateParameterDeclarationArrayOutput)
}

type TemplateParameterDeclarationOutput struct{ *pulumi.OutputState }

func (TemplateParameterDeclarationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateParameterDeclaration)(nil)).Elem()
}

func (o TemplateParameterDeclarationOutput) ToTemplateParameterDeclarationOutput() TemplateParameterDeclarationOutput {
	return o
}

func (o TemplateParameterDeclarationOutput) ToTemplateParameterDeclarationOutputWithContext(ctx context.Context) TemplateParameterDeclarationOutput {
	return o
}

// A parameter declaration for the `DateTime` data type.
func (o TemplateParameterDeclarationOutput) DateTimeParameterDeclaration() TemplateDateTimeParameterDeclarationPtrOutput {
	return o.ApplyT(func(v TemplateParameterDeclaration) *TemplateDateTimeParameterDeclaration {
		return v.DateTimeParameterDeclaration
	}).(TemplateDateTimeParameterDeclarationPtrOutput)
}

// A parameter declaration for the `Decimal` data type.
func (o TemplateParameterDeclarationOutput) DecimalParameterDeclaration() TemplateDecimalParameterDeclarationPtrOutput {
	return o.ApplyT(func(v TemplateParameterDeclaration) *TemplateDecimalParameterDeclaration {
		return v.DecimalParameterDeclaration
	}).(TemplateDecimalParameterDeclarationPtrOutput)
}

// A parameter declaration for the `Integer` data type.
func (o TemplateParameterDeclarationOutput) IntegerParameterDeclaration() TemplateIntegerParameterDeclarationPtrOutput {
	return o.ApplyT(func(v TemplateParameterDeclaration) *TemplateIntegerParameterDeclaration {
		return v.IntegerParameterDeclaration
	}).(TemplateIntegerParameterDeclarationPtrOutput)
}

// A parameter declaration for the `String` data type.
func (o TemplateParameterDeclarationOutput) StringParameterDeclaration() TemplateStringParameterDeclarationPtrOutput {
	return o.ApplyT(func(v TemplateParameterDeclaration) *TemplateStringParameterDeclaration {
		return v.StringParameterDeclaration
	}).(TemplateStringParameterDeclarationPtrOutput)
}

type TemplateParameterDeclarationArrayOutput struct{ *pulumi.OutputState }

func (TemplateParameterDeclarationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateParameterDeclaration)(nil)).Elem()
}

func (o TemplateParameterDeclarationArrayOutput) ToTemplateParameterDeclarationArrayOutput() TemplateParameterDeclarationArrayOutput {
	return o
}

func (o TemplateParameterDeclarationArrayOutput) ToTemplateParameterDeclarationArrayOutputWithContext(ctx context.Context) TemplateParameterDeclarationArrayOutput {
	return o
}

func (o TemplateParameterDeclarationArrayOutput) Index(i pulumi.IntInput) TemplateParameterDeclarationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateParameterDeclaration {
		return vs[0].([]TemplateParameterDeclaration)[vs[1].(int)]
	}).(TemplateParameterDeclarationOutput)
}

type TemplateParameterDropDownControl struct {
	// The values that are displayed in a control can be configured to only show values that are valid based on what's selected in other controls.
	CascadingControlConfiguration *TemplateCascadingControlConfiguration `pulumi:"cascadingControlConfiguration"`
	// The visibility configuration of the Apply button on a `ParameterDropDownControl` .
	CommitMode *TemplateCommitMode `pulumi:"commitMode"`
	// The display options of a control.
	DisplayOptions *TemplateDropDownControlDisplayOptions `pulumi:"displayOptions"`
	// The ID of the `ParameterDropDownControl` .
	ParameterControlId string `pulumi:"parameterControlId"`
	// A list of selectable values that are used in a control.
	SelectableValues *TemplateParameterSelectableValues `pulumi:"selectableValues"`
	// The source parameter name of the `ParameterDropDownControl` .
	SourceParameterName string `pulumi:"sourceParameterName"`
	// The title of the `ParameterDropDownControl` .
	Title string `pulumi:"title"`
	// The type parameter name of the `ParameterDropDownControl` .
	Type *TemplateSheetControlListType `pulumi:"type"`
}

// TemplateParameterDropDownControlInput is an input type that accepts TemplateParameterDropDownControlArgs and TemplateParameterDropDownControlOutput values.
// You can construct a concrete instance of `TemplateParameterDropDownControlInput` via:
//
//	TemplateParameterDropDownControlArgs{...}
type TemplateParameterDropDownControlInput interface {
	pulumi.Input

	ToTemplateParameterDropDownControlOutput() TemplateParameterDropDownControlOutput
	ToTemplateParameterDropDownControlOutputWithContext(context.Context) TemplateParameterDropDownControlOutput
}

type TemplateParameterDropDownControlArgs struct {
	// The values that are displayed in a control can be configured to only show values that are valid based on what's selected in other controls.
	CascadingControlConfiguration TemplateCascadingControlConfigurationPtrInput `pulumi:"cascadingControlConfiguration"`
	// The visibility configuration of the Apply button on a `ParameterDropDownControl` .
	CommitMode TemplateCommitModePtrInput `pulumi:"commitMode"`
	// The display options of a control.
	DisplayOptions TemplateDropDownControlDisplayOptionsPtrInput `pulumi:"displayOptions"`
	// The ID of the `ParameterDropDownControl` .
	ParameterControlId pulumi.StringInput `pulumi:"parameterControlId"`
	// A list of selectable values that are used in a control.
	SelectableValues TemplateParameterSelectableValuesPtrInput `pulumi:"selectableValues"`
	// The source parameter name of the `ParameterDropDownControl` .
	SourceParameterName pulumi.StringInput `pulumi:"sourceParameterName"`
	// The title of the `ParameterDropDownControl` .
	Title pulumi.StringInput `pulumi:"title"`
	// The type parameter name of the `ParameterDropDownControl` .
	Type TemplateSheetControlListTypePtrInput `pulumi:"type"`
}

func (TemplateParameterDropDownControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateParameterDropDownControl)(nil)).Elem()
}

func (i TemplateParameterDropDownControlArgs) ToTemplateParameterDropDownControlOutput() TemplateParameterDropDownControlOutput {
	return i.ToTemplateParameterDropDownControlOutputWithContext(context.Background())
}

func (i TemplateParameterDropDownControlArgs) ToTemplateParameterDropDownControlOutputWithContext(ctx context.Context) TemplateParameterDropDownControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateParameterDropDownControlOutput)
}

func (i TemplateParameterDropDownControlArgs) ToTemplateParameterDropDownControlPtrOutput() TemplateParameterDropDownControlPtrOutput {
	return i.ToTemplateParameterDropDownControlPtrOutputWithContext(context.Background())
}

func (i TemplateParameterDropDownControlArgs) ToTemplateParameterDropDownControlPtrOutputWithContext(ctx context.Context) TemplateParameterDropDownControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateParameterDropDownControlOutput).ToTemplateParameterDropDownControlPtrOutputWithContext(ctx)
}

// TemplateParameterDropDownControlPtrInput is an input type that accepts TemplateParameterDropDownControlArgs, TemplateParameterDropDownControlPtr and TemplateParameterDropDownControlPtrOutput values.
// You can construct a concrete instance of `TemplateParameterDropDownControlPtrInput` via:
//
//	        TemplateParameterDropDownControlArgs{...}
//
//	or:
//
//	        nil
type TemplateParameterDropDownControlPtrInput interface {
	pulumi.Input

	ToTemplateParameterDropDownControlPtrOutput() TemplateParameterDropDownControlPtrOutput
	ToTemplateParameterDropDownControlPtrOutputWithContext(context.Context) TemplateParameterDropDownControlPtrOutput
}

type templateParameterDropDownControlPtrType TemplateParameterDropDownControlArgs

func TemplateParameterDropDownControlPtr(v *TemplateParameterDropDownControlArgs) TemplateParameterDropDownControlPtrInput {
	return (*templateParameterDropDownControlPtrType)(v)
}

func (*templateParameterDropDownControlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateParameterDropDownControl)(nil)).Elem()
}

func (i *templateParameterDropDownControlPtrType) ToTemplateParameterDropDownControlPtrOutput() TemplateParameterDropDownControlPtrOutput {
	return i.ToTemplateParameterDropDownControlPtrOutputWithContext(context.Background())
}

func (i *templateParameterDropDownControlPtrType) ToTemplateParameterDropDownControlPtrOutputWithContext(ctx context.Context) TemplateParameterDropDownControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateParameterDropDownControlPtrOutput)
}

type TemplateParameterDropDownControlOutput struct{ *pulumi.OutputState }

func (TemplateParameterDropDownControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateParameterDropDownControl)(nil)).Elem()
}

func (o TemplateParameterDropDownControlOutput) ToTemplateParameterDropDownControlOutput() TemplateParameterDropDownControlOutput {
	return o
}

func (o TemplateParameterDropDownControlOutput) ToTemplateParameterDropDownControlOutputWithContext(ctx context.Context) TemplateParameterDropDownControlOutput {
	return o
}

func (o TemplateParameterDropDownControlOutput) ToTemplateParameterDropDownControlPtrOutput() TemplateParameterDropDownControlPtrOutput {
	return o.ToTemplateParameterDropDownControlPtrOutputWithContext(context.Background())
}

func (o TemplateParameterDropDownControlOutput) ToTemplateParameterDropDownControlPtrOutputWithContext(ctx context.Context) TemplateParameterDropDownControlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateParameterDropDownControl) *TemplateParameterDropDownControl {
		return &v
	}).(TemplateParameterDropDownControlPtrOutput)
}

// The values that are displayed in a control can be configured to only show values that are valid based on what's selected in other controls.
func (o TemplateParameterDropDownControlOutput) CascadingControlConfiguration() TemplateCascadingControlConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateParameterDropDownControl) *TemplateCascadingControlConfiguration {
		return v.CascadingControlConfiguration
	}).(TemplateCascadingControlConfigurationPtrOutput)
}

// The visibility configuration of the Apply button on a `ParameterDropDownControl` .
func (o TemplateParameterDropDownControlOutput) CommitMode() TemplateCommitModePtrOutput {
	return o.ApplyT(func(v TemplateParameterDropDownControl) *TemplateCommitMode { return v.CommitMode }).(TemplateCommitModePtrOutput)
}

// The display options of a control.
func (o TemplateParameterDropDownControlOutput) DisplayOptions() TemplateDropDownControlDisplayOptionsPtrOutput {
	return o.ApplyT(func(v TemplateParameterDropDownControl) *TemplateDropDownControlDisplayOptions {
		return v.DisplayOptions
	}).(TemplateDropDownControlDisplayOptionsPtrOutput)
}

// The ID of the `ParameterDropDownControl` .
func (o TemplateParameterDropDownControlOutput) ParameterControlId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateParameterDropDownControl) string { return v.ParameterControlId }).(pulumi.StringOutput)
}

// A list of selectable values that are used in a control.
func (o TemplateParameterDropDownControlOutput) SelectableValues() TemplateParameterSelectableValuesPtrOutput {
	return o.ApplyT(func(v TemplateParameterDropDownControl) *TemplateParameterSelectableValues { return v.SelectableValues }).(TemplateParameterSelectableValuesPtrOutput)
}

// The source parameter name of the `ParameterDropDownControl` .
func (o TemplateParameterDropDownControlOutput) SourceParameterName() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateParameterDropDownControl) string { return v.SourceParameterName }).(pulumi.StringOutput)
}

// The title of the `ParameterDropDownControl` .
func (o TemplateParameterDropDownControlOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateParameterDropDownControl) string { return v.Title }).(pulumi.StringOutput)
}

// The type parameter name of the `ParameterDropDownControl` .
func (o TemplateParameterDropDownControlOutput) Type() TemplateSheetControlListTypePtrOutput {
	return o.ApplyT(func(v TemplateParameterDropDownControl) *TemplateSheetControlListType { return v.Type }).(TemplateSheetControlListTypePtrOutput)
}

type TemplateParameterDropDownControlPtrOutput struct{ *pulumi.OutputState }

func (TemplateParameterDropDownControlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateParameterDropDownControl)(nil)).Elem()
}

func (o TemplateParameterDropDownControlPtrOutput) ToTemplateParameterDropDownControlPtrOutput() TemplateParameterDropDownControlPtrOutput {
	return o
}

func (o TemplateParameterDropDownControlPtrOutput) ToTemplateParameterDropDownControlPtrOutputWithContext(ctx context.Context) TemplateParameterDropDownControlPtrOutput {
	return o
}

func (o TemplateParameterDropDownControlPtrOutput) Elem() TemplateParameterDropDownControlOutput {
	return o.ApplyT(func(v *TemplateParameterDropDownControl) TemplateParameterDropDownControl {
		if v != nil {
			return *v
		}
		var ret TemplateParameterDropDownControl
		return ret
	}).(TemplateParameterDropDownControlOutput)
}

// The values that are displayed in a control can be configured to only show values that are valid based on what's selected in other controls.
func (o TemplateParameterDropDownControlPtrOutput) CascadingControlConfiguration() TemplateCascadingControlConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateParameterDropDownControl) *TemplateCascadingControlConfiguration {
		if v == nil {
			return nil
		}
		return v.CascadingControlConfiguration
	}).(TemplateCascadingControlConfigurationPtrOutput)
}

// The visibility configuration of the Apply button on a `ParameterDropDownControl` .
func (o TemplateParameterDropDownControlPtrOutput) CommitMode() TemplateCommitModePtrOutput {
	return o.ApplyT(func(v *TemplateParameterDropDownControl) *TemplateCommitMode {
		if v == nil {
			return nil
		}
		return v.CommitMode
	}).(TemplateCommitModePtrOutput)
}

// The display options of a control.
func (o TemplateParameterDropDownControlPtrOutput) DisplayOptions() TemplateDropDownControlDisplayOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateParameterDropDownControl) *TemplateDropDownControlDisplayOptions {
		if v == nil {
			return nil
		}
		return v.DisplayOptions
	}).(TemplateDropDownControlDisplayOptionsPtrOutput)
}

// The ID of the `ParameterDropDownControl` .
func (o TemplateParameterDropDownControlPtrOutput) ParameterControlId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateParameterDropDownControl) *string {
		if v == nil {
			return nil
		}
		return &v.ParameterControlId
	}).(pulumi.StringPtrOutput)
}

// A list of selectable values that are used in a control.
func (o TemplateParameterDropDownControlPtrOutput) SelectableValues() TemplateParameterSelectableValuesPtrOutput {
	return o.ApplyT(func(v *TemplateParameterDropDownControl) *TemplateParameterSelectableValues {
		if v == nil {
			return nil
		}
		return v.SelectableValues
	}).(TemplateParameterSelectableValuesPtrOutput)
}

// The source parameter name of the `ParameterDropDownControl` .
func (o TemplateParameterDropDownControlPtrOutput) SourceParameterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateParameterDropDownControl) *string {
		if v == nil {
			return nil
		}
		return &v.SourceParameterName
	}).(pulumi.StringPtrOutput)
}

// The title of the `ParameterDropDownControl` .
func (o TemplateParameterDropDownControlPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateParameterDropDownControl) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

// The type parameter name of the `ParameterDropDownControl` .
func (o TemplateParameterDropDownControlPtrOutput) Type() TemplateSheetControlListTypePtrOutput {
	return o.ApplyT(func(v *TemplateParameterDropDownControl) *TemplateSheetControlListType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(TemplateSheetControlListTypePtrOutput)
}

type TemplateParameterListControl struct {
	// The values that are displayed in a control can be configured to only show values that are valid based on what's selected in other controls.
	CascadingControlConfiguration *TemplateCascadingControlConfiguration `pulumi:"cascadingControlConfiguration"`
	// The display options of a control.
	DisplayOptions *TemplateListControlDisplayOptions `pulumi:"displayOptions"`
	// The ID of the `ParameterListControl` .
	ParameterControlId string `pulumi:"parameterControlId"`
	// A list of selectable values that are used in a control.
	SelectableValues *TemplateParameterSelectableValues `pulumi:"selectableValues"`
	// The source parameter name of the `ParameterListControl` .
	SourceParameterName string `pulumi:"sourceParameterName"`
	// The title of the `ParameterListControl` .
	Title string `pulumi:"title"`
	// The type of `ParameterListControl` .
	Type *TemplateSheetControlListType `pulumi:"type"`
}

// TemplateParameterListControlInput is an input type that accepts TemplateParameterListControlArgs and TemplateParameterListControlOutput values.
// You can construct a concrete instance of `TemplateParameterListControlInput` via:
//
//	TemplateParameterListControlArgs{...}
type TemplateParameterListControlInput interface {
	pulumi.Input

	ToTemplateParameterListControlOutput() TemplateParameterListControlOutput
	ToTemplateParameterListControlOutputWithContext(context.Context) TemplateParameterListControlOutput
}

type TemplateParameterListControlArgs struct {
	// The values that are displayed in a control can be configured to only show values that are valid based on what's selected in other controls.
	CascadingControlConfiguration TemplateCascadingControlConfigurationPtrInput `pulumi:"cascadingControlConfiguration"`
	// The display options of a control.
	DisplayOptions TemplateListControlDisplayOptionsPtrInput `pulumi:"displayOptions"`
	// The ID of the `ParameterListControl` .
	ParameterControlId pulumi.StringInput `pulumi:"parameterControlId"`
	// A list of selectable values that are used in a control.
	SelectableValues TemplateParameterSelectableValuesPtrInput `pulumi:"selectableValues"`
	// The source parameter name of the `ParameterListControl` .
	SourceParameterName pulumi.StringInput `pulumi:"sourceParameterName"`
	// The title of the `ParameterListControl` .
	Title pulumi.StringInput `pulumi:"title"`
	// The type of `ParameterListControl` .
	Type TemplateSheetControlListTypePtrInput `pulumi:"type"`
}

func (TemplateParameterListControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateParameterListControl)(nil)).Elem()
}

func (i TemplateParameterListControlArgs) ToTemplateParameterListControlOutput() TemplateParameterListControlOutput {
	return i.ToTemplateParameterListControlOutputWithContext(context.Background())
}

func (i TemplateParameterListControlArgs) ToTemplateParameterListControlOutputWithContext(ctx context.Context) TemplateParameterListControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateParameterListControlOutput)
}

func (i TemplateParameterListControlArgs) ToTemplateParameterListControlPtrOutput() TemplateParameterListControlPtrOutput {
	return i.ToTemplateParameterListControlPtrOutputWithContext(context.Background())
}

func (i TemplateParameterListControlArgs) ToTemplateParameterListControlPtrOutputWithContext(ctx context.Context) TemplateParameterListControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateParameterListControlOutput).ToTemplateParameterListControlPtrOutputWithContext(ctx)
}

// TemplateParameterListControlPtrInput is an input type that accepts TemplateParameterListControlArgs, TemplateParameterListControlPtr and TemplateParameterListControlPtrOutput values.
// You can construct a concrete instance of `TemplateParameterListControlPtrInput` via:
//
//	        TemplateParameterListControlArgs{...}
//
//	or:
//
//	        nil
type TemplateParameterListControlPtrInput interface {
	pulumi.Input

	ToTemplateParameterListControlPtrOutput() TemplateParameterListControlPtrOutput
	ToTemplateParameterListControlPtrOutputWithContext(context.Context) TemplateParameterListControlPtrOutput
}

type templateParameterListControlPtrType TemplateParameterListControlArgs

func TemplateParameterListControlPtr(v *TemplateParameterListControlArgs) TemplateParameterListControlPtrInput {
	return (*templateParameterListControlPtrType)(v)
}

func (*templateParameterListControlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateParameterListControl)(nil)).Elem()
}

func (i *templateParameterListControlPtrType) ToTemplateParameterListControlPtrOutput() TemplateParameterListControlPtrOutput {
	return i.ToTemplateParameterListControlPtrOutputWithContext(context.Background())
}

func (i *templateParameterListControlPtrType) ToTemplateParameterListControlPtrOutputWithContext(ctx context.Context) TemplateParameterListControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateParameterListControlPtrOutput)
}

type TemplateParameterListControlOutput struct{ *pulumi.OutputState }

func (TemplateParameterListControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateParameterListControl)(nil)).Elem()
}

func (o TemplateParameterListControlOutput) ToTemplateParameterListControlOutput() TemplateParameterListControlOutput {
	return o
}

func (o TemplateParameterListControlOutput) ToTemplateParameterListControlOutputWithContext(ctx context.Context) TemplateParameterListControlOutput {
	return o
}

func (o TemplateParameterListControlOutput) ToTemplateParameterListControlPtrOutput() TemplateParameterListControlPtrOutput {
	return o.ToTemplateParameterListControlPtrOutputWithContext(context.Background())
}

func (o TemplateParameterListControlOutput) ToTemplateParameterListControlPtrOutputWithContext(ctx context.Context) TemplateParameterListControlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateParameterListControl) *TemplateParameterListControl {
		return &v
	}).(TemplateParameterListControlPtrOutput)
}

// The values that are displayed in a control can be configured to only show values that are valid based on what's selected in other controls.
func (o TemplateParameterListControlOutput) CascadingControlConfiguration() TemplateCascadingControlConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateParameterListControl) *TemplateCascadingControlConfiguration {
		return v.CascadingControlConfiguration
	}).(TemplateCascadingControlConfigurationPtrOutput)
}

// The display options of a control.
func (o TemplateParameterListControlOutput) DisplayOptions() TemplateListControlDisplayOptionsPtrOutput {
	return o.ApplyT(func(v TemplateParameterListControl) *TemplateListControlDisplayOptions { return v.DisplayOptions }).(TemplateListControlDisplayOptionsPtrOutput)
}

// The ID of the `ParameterListControl` .
func (o TemplateParameterListControlOutput) ParameterControlId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateParameterListControl) string { return v.ParameterControlId }).(pulumi.StringOutput)
}

// A list of selectable values that are used in a control.
func (o TemplateParameterListControlOutput) SelectableValues() TemplateParameterSelectableValuesPtrOutput {
	return o.ApplyT(func(v TemplateParameterListControl) *TemplateParameterSelectableValues { return v.SelectableValues }).(TemplateParameterSelectableValuesPtrOutput)
}

// The source parameter name of the `ParameterListControl` .
func (o TemplateParameterListControlOutput) SourceParameterName() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateParameterListControl) string { return v.SourceParameterName }).(pulumi.StringOutput)
}

// The title of the `ParameterListControl` .
func (o TemplateParameterListControlOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateParameterListControl) string { return v.Title }).(pulumi.StringOutput)
}

// The type of `ParameterListControl` .
func (o TemplateParameterListControlOutput) Type() TemplateSheetControlListTypePtrOutput {
	return o.ApplyT(func(v TemplateParameterListControl) *TemplateSheetControlListType { return v.Type }).(TemplateSheetControlListTypePtrOutput)
}

type TemplateParameterListControlPtrOutput struct{ *pulumi.OutputState }

func (TemplateParameterListControlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateParameterListControl)(nil)).Elem()
}

func (o TemplateParameterListControlPtrOutput) ToTemplateParameterListControlPtrOutput() TemplateParameterListControlPtrOutput {
	return o
}

func (o TemplateParameterListControlPtrOutput) ToTemplateParameterListControlPtrOutputWithContext(ctx context.Context) TemplateParameterListControlPtrOutput {
	return o
}

func (o TemplateParameterListControlPtrOutput) Elem() TemplateParameterListControlOutput {
	return o.ApplyT(func(v *TemplateParameterListControl) TemplateParameterListControl {
		if v != nil {
			return *v
		}
		var ret TemplateParameterListControl
		return ret
	}).(TemplateParameterListControlOutput)
}

// The values that are displayed in a control can be configured to only show values that are valid based on what's selected in other controls.
func (o TemplateParameterListControlPtrOutput) CascadingControlConfiguration() TemplateCascadingControlConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateParameterListControl) *TemplateCascadingControlConfiguration {
		if v == nil {
			return nil
		}
		return v.CascadingControlConfiguration
	}).(TemplateCascadingControlConfigurationPtrOutput)
}

// The display options of a control.
func (o TemplateParameterListControlPtrOutput) DisplayOptions() TemplateListControlDisplayOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateParameterListControl) *TemplateListControlDisplayOptions {
		if v == nil {
			return nil
		}
		return v.DisplayOptions
	}).(TemplateListControlDisplayOptionsPtrOutput)
}

// The ID of the `ParameterListControl` .
func (o TemplateParameterListControlPtrOutput) ParameterControlId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateParameterListControl) *string {
		if v == nil {
			return nil
		}
		return &v.ParameterControlId
	}).(pulumi.StringPtrOutput)
}

// A list of selectable values that are used in a control.
func (o TemplateParameterListControlPtrOutput) SelectableValues() TemplateParameterSelectableValuesPtrOutput {
	return o.ApplyT(func(v *TemplateParameterListControl) *TemplateParameterSelectableValues {
		if v == nil {
			return nil
		}
		return v.SelectableValues
	}).(TemplateParameterSelectableValuesPtrOutput)
}

// The source parameter name of the `ParameterListControl` .
func (o TemplateParameterListControlPtrOutput) SourceParameterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateParameterListControl) *string {
		if v == nil {
			return nil
		}
		return &v.SourceParameterName
	}).(pulumi.StringPtrOutput)
}

// The title of the `ParameterListControl` .
func (o TemplateParameterListControlPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateParameterListControl) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

// The type of `ParameterListControl` .
func (o TemplateParameterListControlPtrOutput) Type() TemplateSheetControlListTypePtrOutput {
	return o.ApplyT(func(v *TemplateParameterListControl) *TemplateSheetControlListType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(TemplateSheetControlListTypePtrOutput)
}

type TemplateParameterSelectableValues struct {
	// The column identifier that fetches values from the data set.
	LinkToDataSetColumn *TemplateColumnIdentifier `pulumi:"linkToDataSetColumn"`
	// The values that are used in `ParameterSelectableValues` .
	Values []string `pulumi:"values"`
}

// TemplateParameterSelectableValuesInput is an input type that accepts TemplateParameterSelectableValuesArgs and TemplateParameterSelectableValuesOutput values.
// You can construct a concrete instance of `TemplateParameterSelectableValuesInput` via:
//
//	TemplateParameterSelectableValuesArgs{...}
type TemplateParameterSelectableValuesInput interface {
	pulumi.Input

	ToTemplateParameterSelectableValuesOutput() TemplateParameterSelectableValuesOutput
	ToTemplateParameterSelectableValuesOutputWithContext(context.Context) TemplateParameterSelectableValuesOutput
}

type TemplateParameterSelectableValuesArgs struct {
	// The column identifier that fetches values from the data set.
	LinkToDataSetColumn TemplateColumnIdentifierPtrInput `pulumi:"linkToDataSetColumn"`
	// The values that are used in `ParameterSelectableValues` .
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (TemplateParameterSelectableValuesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateParameterSelectableValues)(nil)).Elem()
}

func (i TemplateParameterSelectableValuesArgs) ToTemplateParameterSelectableValuesOutput() TemplateParameterSelectableValuesOutput {
	return i.ToTemplateParameterSelectableValuesOutputWithContext(context.Background())
}

func (i TemplateParameterSelectableValuesArgs) ToTemplateParameterSelectableValuesOutputWithContext(ctx context.Context) TemplateParameterSelectableValuesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateParameterSelectableValuesOutput)
}

func (i TemplateParameterSelectableValuesArgs) ToTemplateParameterSelectableValuesPtrOutput() TemplateParameterSelectableValuesPtrOutput {
	return i.ToTemplateParameterSelectableValuesPtrOutputWithContext(context.Background())
}

func (i TemplateParameterSelectableValuesArgs) ToTemplateParameterSelectableValuesPtrOutputWithContext(ctx context.Context) TemplateParameterSelectableValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateParameterSelectableValuesOutput).ToTemplateParameterSelectableValuesPtrOutputWithContext(ctx)
}

// TemplateParameterSelectableValuesPtrInput is an input type that accepts TemplateParameterSelectableValuesArgs, TemplateParameterSelectableValuesPtr and TemplateParameterSelectableValuesPtrOutput values.
// You can construct a concrete instance of `TemplateParameterSelectableValuesPtrInput` via:
//
//	        TemplateParameterSelectableValuesArgs{...}
//
//	or:
//
//	        nil
type TemplateParameterSelectableValuesPtrInput interface {
	pulumi.Input

	ToTemplateParameterSelectableValuesPtrOutput() TemplateParameterSelectableValuesPtrOutput
	ToTemplateParameterSelectableValuesPtrOutputWithContext(context.Context) TemplateParameterSelectableValuesPtrOutput
}

type templateParameterSelectableValuesPtrType TemplateParameterSelectableValuesArgs

func TemplateParameterSelectableValuesPtr(v *TemplateParameterSelectableValuesArgs) TemplateParameterSelectableValuesPtrInput {
	return (*templateParameterSelectableValuesPtrType)(v)
}

func (*templateParameterSelectableValuesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateParameterSelectableValues)(nil)).Elem()
}

func (i *templateParameterSelectableValuesPtrType) ToTemplateParameterSelectableValuesPtrOutput() TemplateParameterSelectableValuesPtrOutput {
	return i.ToTemplateParameterSelectableValuesPtrOutputWithContext(context.Background())
}

func (i *templateParameterSelectableValuesPtrType) ToTemplateParameterSelectableValuesPtrOutputWithContext(ctx context.Context) TemplateParameterSelectableValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateParameterSelectableValuesPtrOutput)
}

type TemplateParameterSelectableValuesOutput struct{ *pulumi.OutputState }

func (TemplateParameterSelectableValuesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateParameterSelectableValues)(nil)).Elem()
}

func (o TemplateParameterSelectableValuesOutput) ToTemplateParameterSelectableValuesOutput() TemplateParameterSelectableValuesOutput {
	return o
}

func (o TemplateParameterSelectableValuesOutput) ToTemplateParameterSelectableValuesOutputWithContext(ctx context.Context) TemplateParameterSelectableValuesOutput {
	return o
}

func (o TemplateParameterSelectableValuesOutput) ToTemplateParameterSelectableValuesPtrOutput() TemplateParameterSelectableValuesPtrOutput {
	return o.ToTemplateParameterSelectableValuesPtrOutputWithContext(context.Background())
}

func (o TemplateParameterSelectableValuesOutput) ToTemplateParameterSelectableValuesPtrOutputWithContext(ctx context.Context) TemplateParameterSelectableValuesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateParameterSelectableValues) *TemplateParameterSelectableValues {
		return &v
	}).(TemplateParameterSelectableValuesPtrOutput)
}

// The column identifier that fetches values from the data set.
func (o TemplateParameterSelectableValuesOutput) LinkToDataSetColumn() TemplateColumnIdentifierPtrOutput {
	return o.ApplyT(func(v TemplateParameterSelectableValues) *TemplateColumnIdentifier { return v.LinkToDataSetColumn }).(TemplateColumnIdentifierPtrOutput)
}

// The values that are used in `ParameterSelectableValues` .
func (o TemplateParameterSelectableValuesOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TemplateParameterSelectableValues) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type TemplateParameterSelectableValuesPtrOutput struct{ *pulumi.OutputState }

func (TemplateParameterSelectableValuesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateParameterSelectableValues)(nil)).Elem()
}

func (o TemplateParameterSelectableValuesPtrOutput) ToTemplateParameterSelectableValuesPtrOutput() TemplateParameterSelectableValuesPtrOutput {
	return o
}

func (o TemplateParameterSelectableValuesPtrOutput) ToTemplateParameterSelectableValuesPtrOutputWithContext(ctx context.Context) TemplateParameterSelectableValuesPtrOutput {
	return o
}

func (o TemplateParameterSelectableValuesPtrOutput) Elem() TemplateParameterSelectableValuesOutput {
	return o.ApplyT(func(v *TemplateParameterSelectableValues) TemplateParameterSelectableValues {
		if v != nil {
			return *v
		}
		var ret TemplateParameterSelectableValues
		return ret
	}).(TemplateParameterSelectableValuesOutput)
}

// The column identifier that fetches values from the data set.
func (o TemplateParameterSelectableValuesPtrOutput) LinkToDataSetColumn() TemplateColumnIdentifierPtrOutput {
	return o.ApplyT(func(v *TemplateParameterSelectableValues) *TemplateColumnIdentifier {
		if v == nil {
			return nil
		}
		return v.LinkToDataSetColumn
	}).(TemplateColumnIdentifierPtrOutput)
}

// The values that are used in `ParameterSelectableValues` .
func (o TemplateParameterSelectableValuesPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TemplateParameterSelectableValues) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type TemplateParameterSliderControl struct {
	// The display options of a control.
	DisplayOptions *TemplateSliderControlDisplayOptions `pulumi:"displayOptions"`
	// The larger value that is displayed at the right of the slider.
	MaximumValue float64 `pulumi:"maximumValue"`
	// The smaller value that is displayed at the left of the slider.
	MinimumValue float64 `pulumi:"minimumValue"`
	// The ID of the `ParameterSliderControl` .
	ParameterControlId string `pulumi:"parameterControlId"`
	// The source parameter name of the `ParameterSliderControl` .
	SourceParameterName string `pulumi:"sourceParameterName"`
	// The number of increments that the slider bar is divided into.
	StepSize float64 `pulumi:"stepSize"`
	// The title of the `ParameterSliderControl` .
	Title string `pulumi:"title"`
}

// TemplateParameterSliderControlInput is an input type that accepts TemplateParameterSliderControlArgs and TemplateParameterSliderControlOutput values.
// You can construct a concrete instance of `TemplateParameterSliderControlInput` via:
//
//	TemplateParameterSliderControlArgs{...}
type TemplateParameterSliderControlInput interface {
	pulumi.Input

	ToTemplateParameterSliderControlOutput() TemplateParameterSliderControlOutput
	ToTemplateParameterSliderControlOutputWithContext(context.Context) TemplateParameterSliderControlOutput
}

type TemplateParameterSliderControlArgs struct {
	// The display options of a control.
	DisplayOptions TemplateSliderControlDisplayOptionsPtrInput `pulumi:"displayOptions"`
	// The larger value that is displayed at the right of the slider.
	MaximumValue pulumi.Float64Input `pulumi:"maximumValue"`
	// The smaller value that is displayed at the left of the slider.
	MinimumValue pulumi.Float64Input `pulumi:"minimumValue"`
	// The ID of the `ParameterSliderControl` .
	ParameterControlId pulumi.StringInput `pulumi:"parameterControlId"`
	// The source parameter name of the `ParameterSliderControl` .
	SourceParameterName pulumi.StringInput `pulumi:"sourceParameterName"`
	// The number of increments that the slider bar is divided into.
	StepSize pulumi.Float64Input `pulumi:"stepSize"`
	// The title of the `ParameterSliderControl` .
	Title pulumi.StringInput `pulumi:"title"`
}

func (TemplateParameterSliderControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateParameterSliderControl)(nil)).Elem()
}

func (i TemplateParameterSliderControlArgs) ToTemplateParameterSliderControlOutput() TemplateParameterSliderControlOutput {
	return i.ToTemplateParameterSliderControlOutputWithContext(context.Background())
}

func (i TemplateParameterSliderControlArgs) ToTemplateParameterSliderControlOutputWithContext(ctx context.Context) TemplateParameterSliderControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateParameterSliderControlOutput)
}

func (i TemplateParameterSliderControlArgs) ToTemplateParameterSliderControlPtrOutput() TemplateParameterSliderControlPtrOutput {
	return i.ToTemplateParameterSliderControlPtrOutputWithContext(context.Background())
}

func (i TemplateParameterSliderControlArgs) ToTemplateParameterSliderControlPtrOutputWithContext(ctx context.Context) TemplateParameterSliderControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateParameterSliderControlOutput).ToTemplateParameterSliderControlPtrOutputWithContext(ctx)
}

// TemplateParameterSliderControlPtrInput is an input type that accepts TemplateParameterSliderControlArgs, TemplateParameterSliderControlPtr and TemplateParameterSliderControlPtrOutput values.
// You can construct a concrete instance of `TemplateParameterSliderControlPtrInput` via:
//
//	        TemplateParameterSliderControlArgs{...}
//
//	or:
//
//	        nil
type TemplateParameterSliderControlPtrInput interface {
	pulumi.Input

	ToTemplateParameterSliderControlPtrOutput() TemplateParameterSliderControlPtrOutput
	ToTemplateParameterSliderControlPtrOutputWithContext(context.Context) TemplateParameterSliderControlPtrOutput
}

type templateParameterSliderControlPtrType TemplateParameterSliderControlArgs

func TemplateParameterSliderControlPtr(v *TemplateParameterSliderControlArgs) TemplateParameterSliderControlPtrInput {
	return (*templateParameterSliderControlPtrType)(v)
}

func (*templateParameterSliderControlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateParameterSliderControl)(nil)).Elem()
}

func (i *templateParameterSliderControlPtrType) ToTemplateParameterSliderControlPtrOutput() TemplateParameterSliderControlPtrOutput {
	return i.ToTemplateParameterSliderControlPtrOutputWithContext(context.Background())
}

func (i *templateParameterSliderControlPtrType) ToTemplateParameterSliderControlPtrOutputWithContext(ctx context.Context) TemplateParameterSliderControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateParameterSliderControlPtrOutput)
}

type TemplateParameterSliderControlOutput struct{ *pulumi.OutputState }

func (TemplateParameterSliderControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateParameterSliderControl)(nil)).Elem()
}

func (o TemplateParameterSliderControlOutput) ToTemplateParameterSliderControlOutput() TemplateParameterSliderControlOutput {
	return o
}

func (o TemplateParameterSliderControlOutput) ToTemplateParameterSliderControlOutputWithContext(ctx context.Context) TemplateParameterSliderControlOutput {
	return o
}

func (o TemplateParameterSliderControlOutput) ToTemplateParameterSliderControlPtrOutput() TemplateParameterSliderControlPtrOutput {
	return o.ToTemplateParameterSliderControlPtrOutputWithContext(context.Background())
}

func (o TemplateParameterSliderControlOutput) ToTemplateParameterSliderControlPtrOutputWithContext(ctx context.Context) TemplateParameterSliderControlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateParameterSliderControl) *TemplateParameterSliderControl {
		return &v
	}).(TemplateParameterSliderControlPtrOutput)
}

// The display options of a control.
func (o TemplateParameterSliderControlOutput) DisplayOptions() TemplateSliderControlDisplayOptionsPtrOutput {
	return o.ApplyT(func(v TemplateParameterSliderControl) *TemplateSliderControlDisplayOptions { return v.DisplayOptions }).(TemplateSliderControlDisplayOptionsPtrOutput)
}

// The larger value that is displayed at the right of the slider.
func (o TemplateParameterSliderControlOutput) MaximumValue() pulumi.Float64Output {
	return o.ApplyT(func(v TemplateParameterSliderControl) float64 { return v.MaximumValue }).(pulumi.Float64Output)
}

// The smaller value that is displayed at the left of the slider.
func (o TemplateParameterSliderControlOutput) MinimumValue() pulumi.Float64Output {
	return o.ApplyT(func(v TemplateParameterSliderControl) float64 { return v.MinimumValue }).(pulumi.Float64Output)
}

// The ID of the `ParameterSliderControl` .
func (o TemplateParameterSliderControlOutput) ParameterControlId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateParameterSliderControl) string { return v.ParameterControlId }).(pulumi.StringOutput)
}

// The source parameter name of the `ParameterSliderControl` .
func (o TemplateParameterSliderControlOutput) SourceParameterName() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateParameterSliderControl) string { return v.SourceParameterName }).(pulumi.StringOutput)
}

// The number of increments that the slider bar is divided into.
func (o TemplateParameterSliderControlOutput) StepSize() pulumi.Float64Output {
	return o.ApplyT(func(v TemplateParameterSliderControl) float64 { return v.StepSize }).(pulumi.Float64Output)
}

// The title of the `ParameterSliderControl` .
func (o TemplateParameterSliderControlOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateParameterSliderControl) string { return v.Title }).(pulumi.StringOutput)
}

type TemplateParameterSliderControlPtrOutput struct{ *pulumi.OutputState }

func (TemplateParameterSliderControlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateParameterSliderControl)(nil)).Elem()
}

func (o TemplateParameterSliderControlPtrOutput) ToTemplateParameterSliderControlPtrOutput() TemplateParameterSliderControlPtrOutput {
	return o
}

func (o TemplateParameterSliderControlPtrOutput) ToTemplateParameterSliderControlPtrOutputWithContext(ctx context.Context) TemplateParameterSliderControlPtrOutput {
	return o
}

func (o TemplateParameterSliderControlPtrOutput) Elem() TemplateParameterSliderControlOutput {
	return o.ApplyT(func(v *TemplateParameterSliderControl) TemplateParameterSliderControl {
		if v != nil {
			return *v
		}
		var ret TemplateParameterSliderControl
		return ret
	}).(TemplateParameterSliderControlOutput)
}

// The display options of a control.
func (o TemplateParameterSliderControlPtrOutput) DisplayOptions() TemplateSliderControlDisplayOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateParameterSliderControl) *TemplateSliderControlDisplayOptions {
		if v == nil {
			return nil
		}
		return v.DisplayOptions
	}).(TemplateSliderControlDisplayOptionsPtrOutput)
}

// The larger value that is displayed at the right of the slider.
func (o TemplateParameterSliderControlPtrOutput) MaximumValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateParameterSliderControl) *float64 {
		if v == nil {
			return nil
		}
		return &v.MaximumValue
	}).(pulumi.Float64PtrOutput)
}

// The smaller value that is displayed at the left of the slider.
func (o TemplateParameterSliderControlPtrOutput) MinimumValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateParameterSliderControl) *float64 {
		if v == nil {
			return nil
		}
		return &v.MinimumValue
	}).(pulumi.Float64PtrOutput)
}

// The ID of the `ParameterSliderControl` .
func (o TemplateParameterSliderControlPtrOutput) ParameterControlId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateParameterSliderControl) *string {
		if v == nil {
			return nil
		}
		return &v.ParameterControlId
	}).(pulumi.StringPtrOutput)
}

// The source parameter name of the `ParameterSliderControl` .
func (o TemplateParameterSliderControlPtrOutput) SourceParameterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateParameterSliderControl) *string {
		if v == nil {
			return nil
		}
		return &v.SourceParameterName
	}).(pulumi.StringPtrOutput)
}

// The number of increments that the slider bar is divided into.
func (o TemplateParameterSliderControlPtrOutput) StepSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateParameterSliderControl) *float64 {
		if v == nil {
			return nil
		}
		return &v.StepSize
	}).(pulumi.Float64PtrOutput)
}

// The title of the `ParameterSliderControl` .
func (o TemplateParameterSliderControlPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateParameterSliderControl) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type TemplateParameterTextAreaControl struct {
	// The delimiter that is used to separate the lines in text.
	Delimiter *string `pulumi:"delimiter"`
	// The display options of a control.
	DisplayOptions *TemplateTextAreaControlDisplayOptions `pulumi:"displayOptions"`
	// The ID of the `ParameterTextAreaControl` .
	ParameterControlId string `pulumi:"parameterControlId"`
	// The source parameter name of the `ParameterTextAreaControl` .
	SourceParameterName string `pulumi:"sourceParameterName"`
	// The title of the `ParameterTextAreaControl` .
	Title string `pulumi:"title"`
}

// TemplateParameterTextAreaControlInput is an input type that accepts TemplateParameterTextAreaControlArgs and TemplateParameterTextAreaControlOutput values.
// You can construct a concrete instance of `TemplateParameterTextAreaControlInput` via:
//
//	TemplateParameterTextAreaControlArgs{...}
type TemplateParameterTextAreaControlInput interface {
	pulumi.Input

	ToTemplateParameterTextAreaControlOutput() TemplateParameterTextAreaControlOutput
	ToTemplateParameterTextAreaControlOutputWithContext(context.Context) TemplateParameterTextAreaControlOutput
}

type TemplateParameterTextAreaControlArgs struct {
	// The delimiter that is used to separate the lines in text.
	Delimiter pulumi.StringPtrInput `pulumi:"delimiter"`
	// The display options of a control.
	DisplayOptions TemplateTextAreaControlDisplayOptionsPtrInput `pulumi:"displayOptions"`
	// The ID of the `ParameterTextAreaControl` .
	ParameterControlId pulumi.StringInput `pulumi:"parameterControlId"`
	// The source parameter name of the `ParameterTextAreaControl` .
	SourceParameterName pulumi.StringInput `pulumi:"sourceParameterName"`
	// The title of the `ParameterTextAreaControl` .
	Title pulumi.StringInput `pulumi:"title"`
}

func (TemplateParameterTextAreaControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateParameterTextAreaControl)(nil)).Elem()
}

func (i TemplateParameterTextAreaControlArgs) ToTemplateParameterTextAreaControlOutput() TemplateParameterTextAreaControlOutput {
	return i.ToTemplateParameterTextAreaControlOutputWithContext(context.Background())
}

func (i TemplateParameterTextAreaControlArgs) ToTemplateParameterTextAreaControlOutputWithContext(ctx context.Context) TemplateParameterTextAreaControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateParameterTextAreaControlOutput)
}

func (i TemplateParameterTextAreaControlArgs) ToTemplateParameterTextAreaControlPtrOutput() TemplateParameterTextAreaControlPtrOutput {
	return i.ToTemplateParameterTextAreaControlPtrOutputWithContext(context.Background())
}

func (i TemplateParameterTextAreaControlArgs) ToTemplateParameterTextAreaControlPtrOutputWithContext(ctx context.Context) TemplateParameterTextAreaControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateParameterTextAreaControlOutput).ToTemplateParameterTextAreaControlPtrOutputWithContext(ctx)
}

// TemplateParameterTextAreaControlPtrInput is an input type that accepts TemplateParameterTextAreaControlArgs, TemplateParameterTextAreaControlPtr and TemplateParameterTextAreaControlPtrOutput values.
// You can construct a concrete instance of `TemplateParameterTextAreaControlPtrInput` via:
//
//	        TemplateParameterTextAreaControlArgs{...}
//
//	or:
//
//	        nil
type TemplateParameterTextAreaControlPtrInput interface {
	pulumi.Input

	ToTemplateParameterTextAreaControlPtrOutput() TemplateParameterTextAreaControlPtrOutput
	ToTemplateParameterTextAreaControlPtrOutputWithContext(context.Context) TemplateParameterTextAreaControlPtrOutput
}

type templateParameterTextAreaControlPtrType TemplateParameterTextAreaControlArgs

func TemplateParameterTextAreaControlPtr(v *TemplateParameterTextAreaControlArgs) TemplateParameterTextAreaControlPtrInput {
	return (*templateParameterTextAreaControlPtrType)(v)
}

func (*templateParameterTextAreaControlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateParameterTextAreaControl)(nil)).Elem()
}

func (i *templateParameterTextAreaControlPtrType) ToTemplateParameterTextAreaControlPtrOutput() TemplateParameterTextAreaControlPtrOutput {
	return i.ToTemplateParameterTextAreaControlPtrOutputWithContext(context.Background())
}

func (i *templateParameterTextAreaControlPtrType) ToTemplateParameterTextAreaControlPtrOutputWithContext(ctx context.Context) TemplateParameterTextAreaControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateParameterTextAreaControlPtrOutput)
}

type TemplateParameterTextAreaControlOutput struct{ *pulumi.OutputState }

func (TemplateParameterTextAreaControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateParameterTextAreaControl)(nil)).Elem()
}

func (o TemplateParameterTextAreaControlOutput) ToTemplateParameterTextAreaControlOutput() TemplateParameterTextAreaControlOutput {
	return o
}

func (o TemplateParameterTextAreaControlOutput) ToTemplateParameterTextAreaControlOutputWithContext(ctx context.Context) TemplateParameterTextAreaControlOutput {
	return o
}

func (o TemplateParameterTextAreaControlOutput) ToTemplateParameterTextAreaControlPtrOutput() TemplateParameterTextAreaControlPtrOutput {
	return o.ToTemplateParameterTextAreaControlPtrOutputWithContext(context.Background())
}

func (o TemplateParameterTextAreaControlOutput) ToTemplateParameterTextAreaControlPtrOutputWithContext(ctx context.Context) TemplateParameterTextAreaControlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateParameterTextAreaControl) *TemplateParameterTextAreaControl {
		return &v
	}).(TemplateParameterTextAreaControlPtrOutput)
}

// The delimiter that is used to separate the lines in text.
func (o TemplateParameterTextAreaControlOutput) Delimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateParameterTextAreaControl) *string { return v.Delimiter }).(pulumi.StringPtrOutput)
}

// The display options of a control.
func (o TemplateParameterTextAreaControlOutput) DisplayOptions() TemplateTextAreaControlDisplayOptionsPtrOutput {
	return o.ApplyT(func(v TemplateParameterTextAreaControl) *TemplateTextAreaControlDisplayOptions {
		return v.DisplayOptions
	}).(TemplateTextAreaControlDisplayOptionsPtrOutput)
}

// The ID of the `ParameterTextAreaControl` .
func (o TemplateParameterTextAreaControlOutput) ParameterControlId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateParameterTextAreaControl) string { return v.ParameterControlId }).(pulumi.StringOutput)
}

// The source parameter name of the `ParameterTextAreaControl` .
func (o TemplateParameterTextAreaControlOutput) SourceParameterName() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateParameterTextAreaControl) string { return v.SourceParameterName }).(pulumi.StringOutput)
}

// The title of the `ParameterTextAreaControl` .
func (o TemplateParameterTextAreaControlOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateParameterTextAreaControl) string { return v.Title }).(pulumi.StringOutput)
}

type TemplateParameterTextAreaControlPtrOutput struct{ *pulumi.OutputState }

func (TemplateParameterTextAreaControlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateParameterTextAreaControl)(nil)).Elem()
}

func (o TemplateParameterTextAreaControlPtrOutput) ToTemplateParameterTextAreaControlPtrOutput() TemplateParameterTextAreaControlPtrOutput {
	return o
}

func (o TemplateParameterTextAreaControlPtrOutput) ToTemplateParameterTextAreaControlPtrOutputWithContext(ctx context.Context) TemplateParameterTextAreaControlPtrOutput {
	return o
}

func (o TemplateParameterTextAreaControlPtrOutput) Elem() TemplateParameterTextAreaControlOutput {
	return o.ApplyT(func(v *TemplateParameterTextAreaControl) TemplateParameterTextAreaControl {
		if v != nil {
			return *v
		}
		var ret TemplateParameterTextAreaControl
		return ret
	}).(TemplateParameterTextAreaControlOutput)
}

// The delimiter that is used to separate the lines in text.
func (o TemplateParameterTextAreaControlPtrOutput) Delimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateParameterTextAreaControl) *string {
		if v == nil {
			return nil
		}
		return v.Delimiter
	}).(pulumi.StringPtrOutput)
}

// The display options of a control.
func (o TemplateParameterTextAreaControlPtrOutput) DisplayOptions() TemplateTextAreaControlDisplayOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateParameterTextAreaControl) *TemplateTextAreaControlDisplayOptions {
		if v == nil {
			return nil
		}
		return v.DisplayOptions
	}).(TemplateTextAreaControlDisplayOptionsPtrOutput)
}

// The ID of the `ParameterTextAreaControl` .
func (o TemplateParameterTextAreaControlPtrOutput) ParameterControlId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateParameterTextAreaControl) *string {
		if v == nil {
			return nil
		}
		return &v.ParameterControlId
	}).(pulumi.StringPtrOutput)
}

// The source parameter name of the `ParameterTextAreaControl` .
func (o TemplateParameterTextAreaControlPtrOutput) SourceParameterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateParameterTextAreaControl) *string {
		if v == nil {
			return nil
		}
		return &v.SourceParameterName
	}).(pulumi.StringPtrOutput)
}

// The title of the `ParameterTextAreaControl` .
func (o TemplateParameterTextAreaControlPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateParameterTextAreaControl) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type TemplateParameterTextFieldControl struct {
	// The display options of a control.
	DisplayOptions *TemplateTextFieldControlDisplayOptions `pulumi:"displayOptions"`
	// The ID of the `ParameterTextFieldControl` .
	ParameterControlId string `pulumi:"parameterControlId"`
	// The source parameter name of the `ParameterTextFieldControl` .
	SourceParameterName string `pulumi:"sourceParameterName"`
	// The title of the `ParameterTextFieldControl` .
	Title string `pulumi:"title"`
}

// TemplateParameterTextFieldControlInput is an input type that accepts TemplateParameterTextFieldControlArgs and TemplateParameterTextFieldControlOutput values.
// You can construct a concrete instance of `TemplateParameterTextFieldControlInput` via:
//
//	TemplateParameterTextFieldControlArgs{...}
type TemplateParameterTextFieldControlInput interface {
	pulumi.Input

	ToTemplateParameterTextFieldControlOutput() TemplateParameterTextFieldControlOutput
	ToTemplateParameterTextFieldControlOutputWithContext(context.Context) TemplateParameterTextFieldControlOutput
}

type TemplateParameterTextFieldControlArgs struct {
	// The display options of a control.
	DisplayOptions TemplateTextFieldControlDisplayOptionsPtrInput `pulumi:"displayOptions"`
	// The ID of the `ParameterTextFieldControl` .
	ParameterControlId pulumi.StringInput `pulumi:"parameterControlId"`
	// The source parameter name of the `ParameterTextFieldControl` .
	SourceParameterName pulumi.StringInput `pulumi:"sourceParameterName"`
	// The title of the `ParameterTextFieldControl` .
	Title pulumi.StringInput `pulumi:"title"`
}

func (TemplateParameterTextFieldControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateParameterTextFieldControl)(nil)).Elem()
}

func (i TemplateParameterTextFieldControlArgs) ToTemplateParameterTextFieldControlOutput() TemplateParameterTextFieldControlOutput {
	return i.ToTemplateParameterTextFieldControlOutputWithContext(context.Background())
}

func (i TemplateParameterTextFieldControlArgs) ToTemplateParameterTextFieldControlOutputWithContext(ctx context.Context) TemplateParameterTextFieldControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateParameterTextFieldControlOutput)
}

func (i TemplateParameterTextFieldControlArgs) ToTemplateParameterTextFieldControlPtrOutput() TemplateParameterTextFieldControlPtrOutput {
	return i.ToTemplateParameterTextFieldControlPtrOutputWithContext(context.Background())
}

func (i TemplateParameterTextFieldControlArgs) ToTemplateParameterTextFieldControlPtrOutputWithContext(ctx context.Context) TemplateParameterTextFieldControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateParameterTextFieldControlOutput).ToTemplateParameterTextFieldControlPtrOutputWithContext(ctx)
}

// TemplateParameterTextFieldControlPtrInput is an input type that accepts TemplateParameterTextFieldControlArgs, TemplateParameterTextFieldControlPtr and TemplateParameterTextFieldControlPtrOutput values.
// You can construct a concrete instance of `TemplateParameterTextFieldControlPtrInput` via:
//
//	        TemplateParameterTextFieldControlArgs{...}
//
//	or:
//
//	        nil
type TemplateParameterTextFieldControlPtrInput interface {
	pulumi.Input

	ToTemplateParameterTextFieldControlPtrOutput() TemplateParameterTextFieldControlPtrOutput
	ToTemplateParameterTextFieldControlPtrOutputWithContext(context.Context) TemplateParameterTextFieldControlPtrOutput
}

type templateParameterTextFieldControlPtrType TemplateParameterTextFieldControlArgs

func TemplateParameterTextFieldControlPtr(v *TemplateParameterTextFieldControlArgs) TemplateParameterTextFieldControlPtrInput {
	return (*templateParameterTextFieldControlPtrType)(v)
}

func (*templateParameterTextFieldControlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateParameterTextFieldControl)(nil)).Elem()
}

func (i *templateParameterTextFieldControlPtrType) ToTemplateParameterTextFieldControlPtrOutput() TemplateParameterTextFieldControlPtrOutput {
	return i.ToTemplateParameterTextFieldControlPtrOutputWithContext(context.Background())
}

func (i *templateParameterTextFieldControlPtrType) ToTemplateParameterTextFieldControlPtrOutputWithContext(ctx context.Context) TemplateParameterTextFieldControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateParameterTextFieldControlPtrOutput)
}

type TemplateParameterTextFieldControlOutput struct{ *pulumi.OutputState }

func (TemplateParameterTextFieldControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateParameterTextFieldControl)(nil)).Elem()
}

func (o TemplateParameterTextFieldControlOutput) ToTemplateParameterTextFieldControlOutput() TemplateParameterTextFieldControlOutput {
	return o
}

func (o TemplateParameterTextFieldControlOutput) ToTemplateParameterTextFieldControlOutputWithContext(ctx context.Context) TemplateParameterTextFieldControlOutput {
	return o
}

func (o TemplateParameterTextFieldControlOutput) ToTemplateParameterTextFieldControlPtrOutput() TemplateParameterTextFieldControlPtrOutput {
	return o.ToTemplateParameterTextFieldControlPtrOutputWithContext(context.Background())
}

func (o TemplateParameterTextFieldControlOutput) ToTemplateParameterTextFieldControlPtrOutputWithContext(ctx context.Context) TemplateParameterTextFieldControlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateParameterTextFieldControl) *TemplateParameterTextFieldControl {
		return &v
	}).(TemplateParameterTextFieldControlPtrOutput)
}

// The display options of a control.
func (o TemplateParameterTextFieldControlOutput) DisplayOptions() TemplateTextFieldControlDisplayOptionsPtrOutput {
	return o.ApplyT(func(v TemplateParameterTextFieldControl) *TemplateTextFieldControlDisplayOptions {
		return v.DisplayOptions
	}).(TemplateTextFieldControlDisplayOptionsPtrOutput)
}

// The ID of the `ParameterTextFieldControl` .
func (o TemplateParameterTextFieldControlOutput) ParameterControlId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateParameterTextFieldControl) string { return v.ParameterControlId }).(pulumi.StringOutput)
}

// The source parameter name of the `ParameterTextFieldControl` .
func (o TemplateParameterTextFieldControlOutput) SourceParameterName() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateParameterTextFieldControl) string { return v.SourceParameterName }).(pulumi.StringOutput)
}

// The title of the `ParameterTextFieldControl` .
func (o TemplateParameterTextFieldControlOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateParameterTextFieldControl) string { return v.Title }).(pulumi.StringOutput)
}

type TemplateParameterTextFieldControlPtrOutput struct{ *pulumi.OutputState }

func (TemplateParameterTextFieldControlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateParameterTextFieldControl)(nil)).Elem()
}

func (o TemplateParameterTextFieldControlPtrOutput) ToTemplateParameterTextFieldControlPtrOutput() TemplateParameterTextFieldControlPtrOutput {
	return o
}

func (o TemplateParameterTextFieldControlPtrOutput) ToTemplateParameterTextFieldControlPtrOutputWithContext(ctx context.Context) TemplateParameterTextFieldControlPtrOutput {
	return o
}

func (o TemplateParameterTextFieldControlPtrOutput) Elem() TemplateParameterTextFieldControlOutput {
	return o.ApplyT(func(v *TemplateParameterTextFieldControl) TemplateParameterTextFieldControl {
		if v != nil {
			return *v
		}
		var ret TemplateParameterTextFieldControl
		return ret
	}).(TemplateParameterTextFieldControlOutput)
}

// The display options of a control.
func (o TemplateParameterTextFieldControlPtrOutput) DisplayOptions() TemplateTextFieldControlDisplayOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateParameterTextFieldControl) *TemplateTextFieldControlDisplayOptions {
		if v == nil {
			return nil
		}
		return v.DisplayOptions
	}).(TemplateTextFieldControlDisplayOptionsPtrOutput)
}

// The ID of the `ParameterTextFieldControl` .
func (o TemplateParameterTextFieldControlPtrOutput) ParameterControlId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateParameterTextFieldControl) *string {
		if v == nil {
			return nil
		}
		return &v.ParameterControlId
	}).(pulumi.StringPtrOutput)
}

// The source parameter name of the `ParameterTextFieldControl` .
func (o TemplateParameterTextFieldControlPtrOutput) SourceParameterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateParameterTextFieldControl) *string {
		if v == nil {
			return nil
		}
		return &v.SourceParameterName
	}).(pulumi.StringPtrOutput)
}

// The title of the `ParameterTextFieldControl` .
func (o TemplateParameterTextFieldControlPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateParameterTextFieldControl) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type TemplatePercentVisibleRange struct {
	// The lower bound of the range.
	From *float64 `pulumi:"from"`
	// The top bound of the range.
	To *float64 `pulumi:"to"`
}

// TemplatePercentVisibleRangeInput is an input type that accepts TemplatePercentVisibleRangeArgs and TemplatePercentVisibleRangeOutput values.
// You can construct a concrete instance of `TemplatePercentVisibleRangeInput` via:
//
//	TemplatePercentVisibleRangeArgs{...}
type TemplatePercentVisibleRangeInput interface {
	pulumi.Input

	ToTemplatePercentVisibleRangeOutput() TemplatePercentVisibleRangeOutput
	ToTemplatePercentVisibleRangeOutputWithContext(context.Context) TemplatePercentVisibleRangeOutput
}

type TemplatePercentVisibleRangeArgs struct {
	// The lower bound of the range.
	From pulumi.Float64PtrInput `pulumi:"from"`
	// The top bound of the range.
	To pulumi.Float64PtrInput `pulumi:"to"`
}

func (TemplatePercentVisibleRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePercentVisibleRange)(nil)).Elem()
}

func (i TemplatePercentVisibleRangeArgs) ToTemplatePercentVisibleRangeOutput() TemplatePercentVisibleRangeOutput {
	return i.ToTemplatePercentVisibleRangeOutputWithContext(context.Background())
}

func (i TemplatePercentVisibleRangeArgs) ToTemplatePercentVisibleRangeOutputWithContext(ctx context.Context) TemplatePercentVisibleRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePercentVisibleRangeOutput)
}

func (i TemplatePercentVisibleRangeArgs) ToTemplatePercentVisibleRangePtrOutput() TemplatePercentVisibleRangePtrOutput {
	return i.ToTemplatePercentVisibleRangePtrOutputWithContext(context.Background())
}

func (i TemplatePercentVisibleRangeArgs) ToTemplatePercentVisibleRangePtrOutputWithContext(ctx context.Context) TemplatePercentVisibleRangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePercentVisibleRangeOutput).ToTemplatePercentVisibleRangePtrOutputWithContext(ctx)
}

// TemplatePercentVisibleRangePtrInput is an input type that accepts TemplatePercentVisibleRangeArgs, TemplatePercentVisibleRangePtr and TemplatePercentVisibleRangePtrOutput values.
// You can construct a concrete instance of `TemplatePercentVisibleRangePtrInput` via:
//
//	        TemplatePercentVisibleRangeArgs{...}
//
//	or:
//
//	        nil
type TemplatePercentVisibleRangePtrInput interface {
	pulumi.Input

	ToTemplatePercentVisibleRangePtrOutput() TemplatePercentVisibleRangePtrOutput
	ToTemplatePercentVisibleRangePtrOutputWithContext(context.Context) TemplatePercentVisibleRangePtrOutput
}

type templatePercentVisibleRangePtrType TemplatePercentVisibleRangeArgs

func TemplatePercentVisibleRangePtr(v *TemplatePercentVisibleRangeArgs) TemplatePercentVisibleRangePtrInput {
	return (*templatePercentVisibleRangePtrType)(v)
}

func (*templatePercentVisibleRangePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePercentVisibleRange)(nil)).Elem()
}

func (i *templatePercentVisibleRangePtrType) ToTemplatePercentVisibleRangePtrOutput() TemplatePercentVisibleRangePtrOutput {
	return i.ToTemplatePercentVisibleRangePtrOutputWithContext(context.Background())
}

func (i *templatePercentVisibleRangePtrType) ToTemplatePercentVisibleRangePtrOutputWithContext(ctx context.Context) TemplatePercentVisibleRangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePercentVisibleRangePtrOutput)
}

type TemplatePercentVisibleRangeOutput struct{ *pulumi.OutputState }

func (TemplatePercentVisibleRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePercentVisibleRange)(nil)).Elem()
}

func (o TemplatePercentVisibleRangeOutput) ToTemplatePercentVisibleRangeOutput() TemplatePercentVisibleRangeOutput {
	return o
}

func (o TemplatePercentVisibleRangeOutput) ToTemplatePercentVisibleRangeOutputWithContext(ctx context.Context) TemplatePercentVisibleRangeOutput {
	return o
}

func (o TemplatePercentVisibleRangeOutput) ToTemplatePercentVisibleRangePtrOutput() TemplatePercentVisibleRangePtrOutput {
	return o.ToTemplatePercentVisibleRangePtrOutputWithContext(context.Background())
}

func (o TemplatePercentVisibleRangeOutput) ToTemplatePercentVisibleRangePtrOutputWithContext(ctx context.Context) TemplatePercentVisibleRangePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplatePercentVisibleRange) *TemplatePercentVisibleRange {
		return &v
	}).(TemplatePercentVisibleRangePtrOutput)
}

// The lower bound of the range.
func (o TemplatePercentVisibleRangeOutput) From() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplatePercentVisibleRange) *float64 { return v.From }).(pulumi.Float64PtrOutput)
}

// The top bound of the range.
func (o TemplatePercentVisibleRangeOutput) To() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplatePercentVisibleRange) *float64 { return v.To }).(pulumi.Float64PtrOutput)
}

type TemplatePercentVisibleRangePtrOutput struct{ *pulumi.OutputState }

func (TemplatePercentVisibleRangePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePercentVisibleRange)(nil)).Elem()
}

func (o TemplatePercentVisibleRangePtrOutput) ToTemplatePercentVisibleRangePtrOutput() TemplatePercentVisibleRangePtrOutput {
	return o
}

func (o TemplatePercentVisibleRangePtrOutput) ToTemplatePercentVisibleRangePtrOutputWithContext(ctx context.Context) TemplatePercentVisibleRangePtrOutput {
	return o
}

func (o TemplatePercentVisibleRangePtrOutput) Elem() TemplatePercentVisibleRangeOutput {
	return o.ApplyT(func(v *TemplatePercentVisibleRange) TemplatePercentVisibleRange {
		if v != nil {
			return *v
		}
		var ret TemplatePercentVisibleRange
		return ret
	}).(TemplatePercentVisibleRangeOutput)
}

// The lower bound of the range.
func (o TemplatePercentVisibleRangePtrOutput) From() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplatePercentVisibleRange) *float64 {
		if v == nil {
			return nil
		}
		return v.From
	}).(pulumi.Float64PtrOutput)
}

// The top bound of the range.
func (o TemplatePercentVisibleRangePtrOutput) To() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplatePercentVisibleRange) *float64 {
		if v == nil {
			return nil
		}
		return v.To
	}).(pulumi.Float64PtrOutput)
}

type TemplatePercentageDisplayFormatConfiguration struct {
	// The option that determines the decimal places configuration.
	DecimalPlacesConfiguration *TemplateDecimalPlacesConfiguration `pulumi:"decimalPlacesConfiguration"`
	// The options that determine the negative value configuration.
	NegativeValueConfiguration *TemplateNegativeValueConfiguration `pulumi:"negativeValueConfiguration"`
	// The options that determine the null value format configuration.
	NullValueFormatConfiguration *TemplateNullValueFormatConfiguration `pulumi:"nullValueFormatConfiguration"`
	// Determines the prefix value of the percentage format.
	Prefix *string `pulumi:"prefix"`
	// The options that determine the numeric separator configuration.
	SeparatorConfiguration *TemplateNumericSeparatorConfiguration `pulumi:"separatorConfiguration"`
	// Determines the suffix value of the percentage format.
	Suffix *string `pulumi:"suffix"`
}

// TemplatePercentageDisplayFormatConfigurationInput is an input type that accepts TemplatePercentageDisplayFormatConfigurationArgs and TemplatePercentageDisplayFormatConfigurationOutput values.
// You can construct a concrete instance of `TemplatePercentageDisplayFormatConfigurationInput` via:
//
//	TemplatePercentageDisplayFormatConfigurationArgs{...}
type TemplatePercentageDisplayFormatConfigurationInput interface {
	pulumi.Input

	ToTemplatePercentageDisplayFormatConfigurationOutput() TemplatePercentageDisplayFormatConfigurationOutput
	ToTemplatePercentageDisplayFormatConfigurationOutputWithContext(context.Context) TemplatePercentageDisplayFormatConfigurationOutput
}

type TemplatePercentageDisplayFormatConfigurationArgs struct {
	// The option that determines the decimal places configuration.
	DecimalPlacesConfiguration TemplateDecimalPlacesConfigurationPtrInput `pulumi:"decimalPlacesConfiguration"`
	// The options that determine the negative value configuration.
	NegativeValueConfiguration TemplateNegativeValueConfigurationPtrInput `pulumi:"negativeValueConfiguration"`
	// The options that determine the null value format configuration.
	NullValueFormatConfiguration TemplateNullValueFormatConfigurationPtrInput `pulumi:"nullValueFormatConfiguration"`
	// Determines the prefix value of the percentage format.
	Prefix pulumi.StringPtrInput `pulumi:"prefix"`
	// The options that determine the numeric separator configuration.
	SeparatorConfiguration TemplateNumericSeparatorConfigurationPtrInput `pulumi:"separatorConfiguration"`
	// Determines the suffix value of the percentage format.
	Suffix pulumi.StringPtrInput `pulumi:"suffix"`
}

func (TemplatePercentageDisplayFormatConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePercentageDisplayFormatConfiguration)(nil)).Elem()
}

func (i TemplatePercentageDisplayFormatConfigurationArgs) ToTemplatePercentageDisplayFormatConfigurationOutput() TemplatePercentageDisplayFormatConfigurationOutput {
	return i.ToTemplatePercentageDisplayFormatConfigurationOutputWithContext(context.Background())
}

func (i TemplatePercentageDisplayFormatConfigurationArgs) ToTemplatePercentageDisplayFormatConfigurationOutputWithContext(ctx context.Context) TemplatePercentageDisplayFormatConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePercentageDisplayFormatConfigurationOutput)
}

func (i TemplatePercentageDisplayFormatConfigurationArgs) ToTemplatePercentageDisplayFormatConfigurationPtrOutput() TemplatePercentageDisplayFormatConfigurationPtrOutput {
	return i.ToTemplatePercentageDisplayFormatConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplatePercentageDisplayFormatConfigurationArgs) ToTemplatePercentageDisplayFormatConfigurationPtrOutputWithContext(ctx context.Context) TemplatePercentageDisplayFormatConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePercentageDisplayFormatConfigurationOutput).ToTemplatePercentageDisplayFormatConfigurationPtrOutputWithContext(ctx)
}

// TemplatePercentageDisplayFormatConfigurationPtrInput is an input type that accepts TemplatePercentageDisplayFormatConfigurationArgs, TemplatePercentageDisplayFormatConfigurationPtr and TemplatePercentageDisplayFormatConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplatePercentageDisplayFormatConfigurationPtrInput` via:
//
//	        TemplatePercentageDisplayFormatConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplatePercentageDisplayFormatConfigurationPtrInput interface {
	pulumi.Input

	ToTemplatePercentageDisplayFormatConfigurationPtrOutput() TemplatePercentageDisplayFormatConfigurationPtrOutput
	ToTemplatePercentageDisplayFormatConfigurationPtrOutputWithContext(context.Context) TemplatePercentageDisplayFormatConfigurationPtrOutput
}

type templatePercentageDisplayFormatConfigurationPtrType TemplatePercentageDisplayFormatConfigurationArgs

func TemplatePercentageDisplayFormatConfigurationPtr(v *TemplatePercentageDisplayFormatConfigurationArgs) TemplatePercentageDisplayFormatConfigurationPtrInput {
	return (*templatePercentageDisplayFormatConfigurationPtrType)(v)
}

func (*templatePercentageDisplayFormatConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePercentageDisplayFormatConfiguration)(nil)).Elem()
}

func (i *templatePercentageDisplayFormatConfigurationPtrType) ToTemplatePercentageDisplayFormatConfigurationPtrOutput() TemplatePercentageDisplayFormatConfigurationPtrOutput {
	return i.ToTemplatePercentageDisplayFormatConfigurationPtrOutputWithContext(context.Background())
}

func (i *templatePercentageDisplayFormatConfigurationPtrType) ToTemplatePercentageDisplayFormatConfigurationPtrOutputWithContext(ctx context.Context) TemplatePercentageDisplayFormatConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePercentageDisplayFormatConfigurationPtrOutput)
}

type TemplatePercentageDisplayFormatConfigurationOutput struct{ *pulumi.OutputState }

func (TemplatePercentageDisplayFormatConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePercentageDisplayFormatConfiguration)(nil)).Elem()
}

func (o TemplatePercentageDisplayFormatConfigurationOutput) ToTemplatePercentageDisplayFormatConfigurationOutput() TemplatePercentageDisplayFormatConfigurationOutput {
	return o
}

func (o TemplatePercentageDisplayFormatConfigurationOutput) ToTemplatePercentageDisplayFormatConfigurationOutputWithContext(ctx context.Context) TemplatePercentageDisplayFormatConfigurationOutput {
	return o
}

func (o TemplatePercentageDisplayFormatConfigurationOutput) ToTemplatePercentageDisplayFormatConfigurationPtrOutput() TemplatePercentageDisplayFormatConfigurationPtrOutput {
	return o.ToTemplatePercentageDisplayFormatConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplatePercentageDisplayFormatConfigurationOutput) ToTemplatePercentageDisplayFormatConfigurationPtrOutputWithContext(ctx context.Context) TemplatePercentageDisplayFormatConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplatePercentageDisplayFormatConfiguration) *TemplatePercentageDisplayFormatConfiguration {
		return &v
	}).(TemplatePercentageDisplayFormatConfigurationPtrOutput)
}

// The option that determines the decimal places configuration.
func (o TemplatePercentageDisplayFormatConfigurationOutput) DecimalPlacesConfiguration() TemplateDecimalPlacesConfigurationPtrOutput {
	return o.ApplyT(func(v TemplatePercentageDisplayFormatConfiguration) *TemplateDecimalPlacesConfiguration {
		return v.DecimalPlacesConfiguration
	}).(TemplateDecimalPlacesConfigurationPtrOutput)
}

// The options that determine the negative value configuration.
func (o TemplatePercentageDisplayFormatConfigurationOutput) NegativeValueConfiguration() TemplateNegativeValueConfigurationPtrOutput {
	return o.ApplyT(func(v TemplatePercentageDisplayFormatConfiguration) *TemplateNegativeValueConfiguration {
		return v.NegativeValueConfiguration
	}).(TemplateNegativeValueConfigurationPtrOutput)
}

// The options that determine the null value format configuration.
func (o TemplatePercentageDisplayFormatConfigurationOutput) NullValueFormatConfiguration() TemplateNullValueFormatConfigurationPtrOutput {
	return o.ApplyT(func(v TemplatePercentageDisplayFormatConfiguration) *TemplateNullValueFormatConfiguration {
		return v.NullValueFormatConfiguration
	}).(TemplateNullValueFormatConfigurationPtrOutput)
}

// Determines the prefix value of the percentage format.
func (o TemplatePercentageDisplayFormatConfigurationOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplatePercentageDisplayFormatConfiguration) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

// The options that determine the numeric separator configuration.
func (o TemplatePercentageDisplayFormatConfigurationOutput) SeparatorConfiguration() TemplateNumericSeparatorConfigurationPtrOutput {
	return o.ApplyT(func(v TemplatePercentageDisplayFormatConfiguration) *TemplateNumericSeparatorConfiguration {
		return v.SeparatorConfiguration
	}).(TemplateNumericSeparatorConfigurationPtrOutput)
}

// Determines the suffix value of the percentage format.
func (o TemplatePercentageDisplayFormatConfigurationOutput) Suffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplatePercentageDisplayFormatConfiguration) *string { return v.Suffix }).(pulumi.StringPtrOutput)
}

type TemplatePercentageDisplayFormatConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplatePercentageDisplayFormatConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePercentageDisplayFormatConfiguration)(nil)).Elem()
}

func (o TemplatePercentageDisplayFormatConfigurationPtrOutput) ToTemplatePercentageDisplayFormatConfigurationPtrOutput() TemplatePercentageDisplayFormatConfigurationPtrOutput {
	return o
}

func (o TemplatePercentageDisplayFormatConfigurationPtrOutput) ToTemplatePercentageDisplayFormatConfigurationPtrOutputWithContext(ctx context.Context) TemplatePercentageDisplayFormatConfigurationPtrOutput {
	return o
}

func (o TemplatePercentageDisplayFormatConfigurationPtrOutput) Elem() TemplatePercentageDisplayFormatConfigurationOutput {
	return o.ApplyT(func(v *TemplatePercentageDisplayFormatConfiguration) TemplatePercentageDisplayFormatConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplatePercentageDisplayFormatConfiguration
		return ret
	}).(TemplatePercentageDisplayFormatConfigurationOutput)
}

// The option that determines the decimal places configuration.
func (o TemplatePercentageDisplayFormatConfigurationPtrOutput) DecimalPlacesConfiguration() TemplateDecimalPlacesConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplatePercentageDisplayFormatConfiguration) *TemplateDecimalPlacesConfiguration {
		if v == nil {
			return nil
		}
		return v.DecimalPlacesConfiguration
	}).(TemplateDecimalPlacesConfigurationPtrOutput)
}

// The options that determine the negative value configuration.
func (o TemplatePercentageDisplayFormatConfigurationPtrOutput) NegativeValueConfiguration() TemplateNegativeValueConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplatePercentageDisplayFormatConfiguration) *TemplateNegativeValueConfiguration {
		if v == nil {
			return nil
		}
		return v.NegativeValueConfiguration
	}).(TemplateNegativeValueConfigurationPtrOutput)
}

// The options that determine the null value format configuration.
func (o TemplatePercentageDisplayFormatConfigurationPtrOutput) NullValueFormatConfiguration() TemplateNullValueFormatConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplatePercentageDisplayFormatConfiguration) *TemplateNullValueFormatConfiguration {
		if v == nil {
			return nil
		}
		return v.NullValueFormatConfiguration
	}).(TemplateNullValueFormatConfigurationPtrOutput)
}

// Determines the prefix value of the percentage format.
func (o TemplatePercentageDisplayFormatConfigurationPtrOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplatePercentageDisplayFormatConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Prefix
	}).(pulumi.StringPtrOutput)
}

// The options that determine the numeric separator configuration.
func (o TemplatePercentageDisplayFormatConfigurationPtrOutput) SeparatorConfiguration() TemplateNumericSeparatorConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplatePercentageDisplayFormatConfiguration) *TemplateNumericSeparatorConfiguration {
		if v == nil {
			return nil
		}
		return v.SeparatorConfiguration
	}).(TemplateNumericSeparatorConfigurationPtrOutput)
}

// Determines the suffix value of the percentage format.
func (o TemplatePercentageDisplayFormatConfigurationPtrOutput) Suffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplatePercentageDisplayFormatConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Suffix
	}).(pulumi.StringPtrOutput)
}

type TemplatePercentileAggregation struct {
	// The percentile value. This value can be any numeric constant 0–100. A percentile value of 50 computes the median value of the measure.
	PercentileValue *float64 `pulumi:"percentileValue"`
}

// TemplatePercentileAggregationInput is an input type that accepts TemplatePercentileAggregationArgs and TemplatePercentileAggregationOutput values.
// You can construct a concrete instance of `TemplatePercentileAggregationInput` via:
//
//	TemplatePercentileAggregationArgs{...}
type TemplatePercentileAggregationInput interface {
	pulumi.Input

	ToTemplatePercentileAggregationOutput() TemplatePercentileAggregationOutput
	ToTemplatePercentileAggregationOutputWithContext(context.Context) TemplatePercentileAggregationOutput
}

type TemplatePercentileAggregationArgs struct {
	// The percentile value. This value can be any numeric constant 0–100. A percentile value of 50 computes the median value of the measure.
	PercentileValue pulumi.Float64PtrInput `pulumi:"percentileValue"`
}

func (TemplatePercentileAggregationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePercentileAggregation)(nil)).Elem()
}

func (i TemplatePercentileAggregationArgs) ToTemplatePercentileAggregationOutput() TemplatePercentileAggregationOutput {
	return i.ToTemplatePercentileAggregationOutputWithContext(context.Background())
}

func (i TemplatePercentileAggregationArgs) ToTemplatePercentileAggregationOutputWithContext(ctx context.Context) TemplatePercentileAggregationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePercentileAggregationOutput)
}

func (i TemplatePercentileAggregationArgs) ToTemplatePercentileAggregationPtrOutput() TemplatePercentileAggregationPtrOutput {
	return i.ToTemplatePercentileAggregationPtrOutputWithContext(context.Background())
}

func (i TemplatePercentileAggregationArgs) ToTemplatePercentileAggregationPtrOutputWithContext(ctx context.Context) TemplatePercentileAggregationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePercentileAggregationOutput).ToTemplatePercentileAggregationPtrOutputWithContext(ctx)
}

// TemplatePercentileAggregationPtrInput is an input type that accepts TemplatePercentileAggregationArgs, TemplatePercentileAggregationPtr and TemplatePercentileAggregationPtrOutput values.
// You can construct a concrete instance of `TemplatePercentileAggregationPtrInput` via:
//
//	        TemplatePercentileAggregationArgs{...}
//
//	or:
//
//	        nil
type TemplatePercentileAggregationPtrInput interface {
	pulumi.Input

	ToTemplatePercentileAggregationPtrOutput() TemplatePercentileAggregationPtrOutput
	ToTemplatePercentileAggregationPtrOutputWithContext(context.Context) TemplatePercentileAggregationPtrOutput
}

type templatePercentileAggregationPtrType TemplatePercentileAggregationArgs

func TemplatePercentileAggregationPtr(v *TemplatePercentileAggregationArgs) TemplatePercentileAggregationPtrInput {
	return (*templatePercentileAggregationPtrType)(v)
}

func (*templatePercentileAggregationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePercentileAggregation)(nil)).Elem()
}

func (i *templatePercentileAggregationPtrType) ToTemplatePercentileAggregationPtrOutput() TemplatePercentileAggregationPtrOutput {
	return i.ToTemplatePercentileAggregationPtrOutputWithContext(context.Background())
}

func (i *templatePercentileAggregationPtrType) ToTemplatePercentileAggregationPtrOutputWithContext(ctx context.Context) TemplatePercentileAggregationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePercentileAggregationPtrOutput)
}

type TemplatePercentileAggregationOutput struct{ *pulumi.OutputState }

func (TemplatePercentileAggregationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePercentileAggregation)(nil)).Elem()
}

func (o TemplatePercentileAggregationOutput) ToTemplatePercentileAggregationOutput() TemplatePercentileAggregationOutput {
	return o
}

func (o TemplatePercentileAggregationOutput) ToTemplatePercentileAggregationOutputWithContext(ctx context.Context) TemplatePercentileAggregationOutput {
	return o
}

func (o TemplatePercentileAggregationOutput) ToTemplatePercentileAggregationPtrOutput() TemplatePercentileAggregationPtrOutput {
	return o.ToTemplatePercentileAggregationPtrOutputWithContext(context.Background())
}

func (o TemplatePercentileAggregationOutput) ToTemplatePercentileAggregationPtrOutputWithContext(ctx context.Context) TemplatePercentileAggregationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplatePercentileAggregation) *TemplatePercentileAggregation {
		return &v
	}).(TemplatePercentileAggregationPtrOutput)
}

// The percentile value. This value can be any numeric constant 0–100. A percentile value of 50 computes the median value of the measure.
func (o TemplatePercentileAggregationOutput) PercentileValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplatePercentileAggregation) *float64 { return v.PercentileValue }).(pulumi.Float64PtrOutput)
}

type TemplatePercentileAggregationPtrOutput struct{ *pulumi.OutputState }

func (TemplatePercentileAggregationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePercentileAggregation)(nil)).Elem()
}

func (o TemplatePercentileAggregationPtrOutput) ToTemplatePercentileAggregationPtrOutput() TemplatePercentileAggregationPtrOutput {
	return o
}

func (o TemplatePercentileAggregationPtrOutput) ToTemplatePercentileAggregationPtrOutputWithContext(ctx context.Context) TemplatePercentileAggregationPtrOutput {
	return o
}

func (o TemplatePercentileAggregationPtrOutput) Elem() TemplatePercentileAggregationOutput {
	return o.ApplyT(func(v *TemplatePercentileAggregation) TemplatePercentileAggregation {
		if v != nil {
			return *v
		}
		var ret TemplatePercentileAggregation
		return ret
	}).(TemplatePercentileAggregationOutput)
}

// The percentile value. This value can be any numeric constant 0–100. A percentile value of 50 computes the median value of the measure.
func (o TemplatePercentileAggregationPtrOutput) PercentileValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplatePercentileAggregation) *float64 {
		if v == nil {
			return nil
		}
		return v.PercentileValue
	}).(pulumi.Float64PtrOutput)
}

type TemplatePeriodOverPeriodComputation struct {
	// The ID for a computation.
	ComputationId string `pulumi:"computationId"`
	// The name of a computation.
	Name *string `pulumi:"name"`
	// The time field that is used in a computation.
	Time *TemplateDimensionField `pulumi:"time"`
	// The value field that is used in a computation.
	Value *TemplateMeasureField `pulumi:"value"`
}

// TemplatePeriodOverPeriodComputationInput is an input type that accepts TemplatePeriodOverPeriodComputationArgs and TemplatePeriodOverPeriodComputationOutput values.
// You can construct a concrete instance of `TemplatePeriodOverPeriodComputationInput` via:
//
//	TemplatePeriodOverPeriodComputationArgs{...}
type TemplatePeriodOverPeriodComputationInput interface {
	pulumi.Input

	ToTemplatePeriodOverPeriodComputationOutput() TemplatePeriodOverPeriodComputationOutput
	ToTemplatePeriodOverPeriodComputationOutputWithContext(context.Context) TemplatePeriodOverPeriodComputationOutput
}

type TemplatePeriodOverPeriodComputationArgs struct {
	// The ID for a computation.
	ComputationId pulumi.StringInput `pulumi:"computationId"`
	// The name of a computation.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The time field that is used in a computation.
	Time TemplateDimensionFieldPtrInput `pulumi:"time"`
	// The value field that is used in a computation.
	Value TemplateMeasureFieldPtrInput `pulumi:"value"`
}

func (TemplatePeriodOverPeriodComputationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePeriodOverPeriodComputation)(nil)).Elem()
}

func (i TemplatePeriodOverPeriodComputationArgs) ToTemplatePeriodOverPeriodComputationOutput() TemplatePeriodOverPeriodComputationOutput {
	return i.ToTemplatePeriodOverPeriodComputationOutputWithContext(context.Background())
}

func (i TemplatePeriodOverPeriodComputationArgs) ToTemplatePeriodOverPeriodComputationOutputWithContext(ctx context.Context) TemplatePeriodOverPeriodComputationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePeriodOverPeriodComputationOutput)
}

func (i TemplatePeriodOverPeriodComputationArgs) ToTemplatePeriodOverPeriodComputationPtrOutput() TemplatePeriodOverPeriodComputationPtrOutput {
	return i.ToTemplatePeriodOverPeriodComputationPtrOutputWithContext(context.Background())
}

func (i TemplatePeriodOverPeriodComputationArgs) ToTemplatePeriodOverPeriodComputationPtrOutputWithContext(ctx context.Context) TemplatePeriodOverPeriodComputationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePeriodOverPeriodComputationOutput).ToTemplatePeriodOverPeriodComputationPtrOutputWithContext(ctx)
}

// TemplatePeriodOverPeriodComputationPtrInput is an input type that accepts TemplatePeriodOverPeriodComputationArgs, TemplatePeriodOverPeriodComputationPtr and TemplatePeriodOverPeriodComputationPtrOutput values.
// You can construct a concrete instance of `TemplatePeriodOverPeriodComputationPtrInput` via:
//
//	        TemplatePeriodOverPeriodComputationArgs{...}
//
//	or:
//
//	        nil
type TemplatePeriodOverPeriodComputationPtrInput interface {
	pulumi.Input

	ToTemplatePeriodOverPeriodComputationPtrOutput() TemplatePeriodOverPeriodComputationPtrOutput
	ToTemplatePeriodOverPeriodComputationPtrOutputWithContext(context.Context) TemplatePeriodOverPeriodComputationPtrOutput
}

type templatePeriodOverPeriodComputationPtrType TemplatePeriodOverPeriodComputationArgs

func TemplatePeriodOverPeriodComputationPtr(v *TemplatePeriodOverPeriodComputationArgs) TemplatePeriodOverPeriodComputationPtrInput {
	return (*templatePeriodOverPeriodComputationPtrType)(v)
}

func (*templatePeriodOverPeriodComputationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePeriodOverPeriodComputation)(nil)).Elem()
}

func (i *templatePeriodOverPeriodComputationPtrType) ToTemplatePeriodOverPeriodComputationPtrOutput() TemplatePeriodOverPeriodComputationPtrOutput {
	return i.ToTemplatePeriodOverPeriodComputationPtrOutputWithContext(context.Background())
}

func (i *templatePeriodOverPeriodComputationPtrType) ToTemplatePeriodOverPeriodComputationPtrOutputWithContext(ctx context.Context) TemplatePeriodOverPeriodComputationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePeriodOverPeriodComputationPtrOutput)
}

type TemplatePeriodOverPeriodComputationOutput struct{ *pulumi.OutputState }

func (TemplatePeriodOverPeriodComputationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePeriodOverPeriodComputation)(nil)).Elem()
}

func (o TemplatePeriodOverPeriodComputationOutput) ToTemplatePeriodOverPeriodComputationOutput() TemplatePeriodOverPeriodComputationOutput {
	return o
}

func (o TemplatePeriodOverPeriodComputationOutput) ToTemplatePeriodOverPeriodComputationOutputWithContext(ctx context.Context) TemplatePeriodOverPeriodComputationOutput {
	return o
}

func (o TemplatePeriodOverPeriodComputationOutput) ToTemplatePeriodOverPeriodComputationPtrOutput() TemplatePeriodOverPeriodComputationPtrOutput {
	return o.ToTemplatePeriodOverPeriodComputationPtrOutputWithContext(context.Background())
}

func (o TemplatePeriodOverPeriodComputationOutput) ToTemplatePeriodOverPeriodComputationPtrOutputWithContext(ctx context.Context) TemplatePeriodOverPeriodComputationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplatePeriodOverPeriodComputation) *TemplatePeriodOverPeriodComputation {
		return &v
	}).(TemplatePeriodOverPeriodComputationPtrOutput)
}

// The ID for a computation.
func (o TemplatePeriodOverPeriodComputationOutput) ComputationId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplatePeriodOverPeriodComputation) string { return v.ComputationId }).(pulumi.StringOutput)
}

// The name of a computation.
func (o TemplatePeriodOverPeriodComputationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplatePeriodOverPeriodComputation) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The time field that is used in a computation.
func (o TemplatePeriodOverPeriodComputationOutput) Time() TemplateDimensionFieldPtrOutput {
	return o.ApplyT(func(v TemplatePeriodOverPeriodComputation) *TemplateDimensionField { return v.Time }).(TemplateDimensionFieldPtrOutput)
}

// The value field that is used in a computation.
func (o TemplatePeriodOverPeriodComputationOutput) Value() TemplateMeasureFieldPtrOutput {
	return o.ApplyT(func(v TemplatePeriodOverPeriodComputation) *TemplateMeasureField { return v.Value }).(TemplateMeasureFieldPtrOutput)
}

type TemplatePeriodOverPeriodComputationPtrOutput struct{ *pulumi.OutputState }

func (TemplatePeriodOverPeriodComputationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePeriodOverPeriodComputation)(nil)).Elem()
}

func (o TemplatePeriodOverPeriodComputationPtrOutput) ToTemplatePeriodOverPeriodComputationPtrOutput() TemplatePeriodOverPeriodComputationPtrOutput {
	return o
}

func (o TemplatePeriodOverPeriodComputationPtrOutput) ToTemplatePeriodOverPeriodComputationPtrOutputWithContext(ctx context.Context) TemplatePeriodOverPeriodComputationPtrOutput {
	return o
}

func (o TemplatePeriodOverPeriodComputationPtrOutput) Elem() TemplatePeriodOverPeriodComputationOutput {
	return o.ApplyT(func(v *TemplatePeriodOverPeriodComputation) TemplatePeriodOverPeriodComputation {
		if v != nil {
			return *v
		}
		var ret TemplatePeriodOverPeriodComputation
		return ret
	}).(TemplatePeriodOverPeriodComputationOutput)
}

// The ID for a computation.
func (o TemplatePeriodOverPeriodComputationPtrOutput) ComputationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplatePeriodOverPeriodComputation) *string {
		if v == nil {
			return nil
		}
		return &v.ComputationId
	}).(pulumi.StringPtrOutput)
}

// The name of a computation.
func (o TemplatePeriodOverPeriodComputationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplatePeriodOverPeriodComputation) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The time field that is used in a computation.
func (o TemplatePeriodOverPeriodComputationPtrOutput) Time() TemplateDimensionFieldPtrOutput {
	return o.ApplyT(func(v *TemplatePeriodOverPeriodComputation) *TemplateDimensionField {
		if v == nil {
			return nil
		}
		return v.Time
	}).(TemplateDimensionFieldPtrOutput)
}

// The value field that is used in a computation.
func (o TemplatePeriodOverPeriodComputationPtrOutput) Value() TemplateMeasureFieldPtrOutput {
	return o.ApplyT(func(v *TemplatePeriodOverPeriodComputation) *TemplateMeasureField {
		if v == nil {
			return nil
		}
		return v.Value
	}).(TemplateMeasureFieldPtrOutput)
}

type TemplatePeriodToDateComputation struct {
	// The ID for a computation.
	ComputationId string `pulumi:"computationId"`
	// The name of a computation.
	Name *string `pulumi:"name"`
	// The time granularity setup of period to date computation. Choose from the following options:
	//
	// - YEAR: Year to date.
	// - MONTH: Month to date.
	PeriodTimeGranularity *TemplateTimeGranularity `pulumi:"periodTimeGranularity"`
	// The time field that is used in a computation.
	Time *TemplateDimensionField `pulumi:"time"`
	// The value field that is used in a computation.
	Value *TemplateMeasureField `pulumi:"value"`
}

// TemplatePeriodToDateComputationInput is an input type that accepts TemplatePeriodToDateComputationArgs and TemplatePeriodToDateComputationOutput values.
// You can construct a concrete instance of `TemplatePeriodToDateComputationInput` via:
//
//	TemplatePeriodToDateComputationArgs{...}
type TemplatePeriodToDateComputationInput interface {
	pulumi.Input

	ToTemplatePeriodToDateComputationOutput() TemplatePeriodToDateComputationOutput
	ToTemplatePeriodToDateComputationOutputWithContext(context.Context) TemplatePeriodToDateComputationOutput
}

type TemplatePeriodToDateComputationArgs struct {
	// The ID for a computation.
	ComputationId pulumi.StringInput `pulumi:"computationId"`
	// The name of a computation.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The time granularity setup of period to date computation. Choose from the following options:
	//
	// - YEAR: Year to date.
	// - MONTH: Month to date.
	PeriodTimeGranularity TemplateTimeGranularityPtrInput `pulumi:"periodTimeGranularity"`
	// The time field that is used in a computation.
	Time TemplateDimensionFieldPtrInput `pulumi:"time"`
	// The value field that is used in a computation.
	Value TemplateMeasureFieldPtrInput `pulumi:"value"`
}

func (TemplatePeriodToDateComputationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePeriodToDateComputation)(nil)).Elem()
}

func (i TemplatePeriodToDateComputationArgs) ToTemplatePeriodToDateComputationOutput() TemplatePeriodToDateComputationOutput {
	return i.ToTemplatePeriodToDateComputationOutputWithContext(context.Background())
}

func (i TemplatePeriodToDateComputationArgs) ToTemplatePeriodToDateComputationOutputWithContext(ctx context.Context) TemplatePeriodToDateComputationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePeriodToDateComputationOutput)
}

func (i TemplatePeriodToDateComputationArgs) ToTemplatePeriodToDateComputationPtrOutput() TemplatePeriodToDateComputationPtrOutput {
	return i.ToTemplatePeriodToDateComputationPtrOutputWithContext(context.Background())
}

func (i TemplatePeriodToDateComputationArgs) ToTemplatePeriodToDateComputationPtrOutputWithContext(ctx context.Context) TemplatePeriodToDateComputationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePeriodToDateComputationOutput).ToTemplatePeriodToDateComputationPtrOutputWithContext(ctx)
}

// TemplatePeriodToDateComputationPtrInput is an input type that accepts TemplatePeriodToDateComputationArgs, TemplatePeriodToDateComputationPtr and TemplatePeriodToDateComputationPtrOutput values.
// You can construct a concrete instance of `TemplatePeriodToDateComputationPtrInput` via:
//
//	        TemplatePeriodToDateComputationArgs{...}
//
//	or:
//
//	        nil
type TemplatePeriodToDateComputationPtrInput interface {
	pulumi.Input

	ToTemplatePeriodToDateComputationPtrOutput() TemplatePeriodToDateComputationPtrOutput
	ToTemplatePeriodToDateComputationPtrOutputWithContext(context.Context) TemplatePeriodToDateComputationPtrOutput
}

type templatePeriodToDateComputationPtrType TemplatePeriodToDateComputationArgs

func TemplatePeriodToDateComputationPtr(v *TemplatePeriodToDateComputationArgs) TemplatePeriodToDateComputationPtrInput {
	return (*templatePeriodToDateComputationPtrType)(v)
}

func (*templatePeriodToDateComputationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePeriodToDateComputation)(nil)).Elem()
}

func (i *templatePeriodToDateComputationPtrType) ToTemplatePeriodToDateComputationPtrOutput() TemplatePeriodToDateComputationPtrOutput {
	return i.ToTemplatePeriodToDateComputationPtrOutputWithContext(context.Background())
}

func (i *templatePeriodToDateComputationPtrType) ToTemplatePeriodToDateComputationPtrOutputWithContext(ctx context.Context) TemplatePeriodToDateComputationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePeriodToDateComputationPtrOutput)
}

type TemplatePeriodToDateComputationOutput struct{ *pulumi.OutputState }

func (TemplatePeriodToDateComputationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePeriodToDateComputation)(nil)).Elem()
}

func (o TemplatePeriodToDateComputationOutput) ToTemplatePeriodToDateComputationOutput() TemplatePeriodToDateComputationOutput {
	return o
}

func (o TemplatePeriodToDateComputationOutput) ToTemplatePeriodToDateComputationOutputWithContext(ctx context.Context) TemplatePeriodToDateComputationOutput {
	return o
}

func (o TemplatePeriodToDateComputationOutput) ToTemplatePeriodToDateComputationPtrOutput() TemplatePeriodToDateComputationPtrOutput {
	return o.ToTemplatePeriodToDateComputationPtrOutputWithContext(context.Background())
}

func (o TemplatePeriodToDateComputationOutput) ToTemplatePeriodToDateComputationPtrOutputWithContext(ctx context.Context) TemplatePeriodToDateComputationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplatePeriodToDateComputation) *TemplatePeriodToDateComputation {
		return &v
	}).(TemplatePeriodToDateComputationPtrOutput)
}

// The ID for a computation.
func (o TemplatePeriodToDateComputationOutput) ComputationId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplatePeriodToDateComputation) string { return v.ComputationId }).(pulumi.StringOutput)
}

// The name of a computation.
func (o TemplatePeriodToDateComputationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplatePeriodToDateComputation) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The time granularity setup of period to date computation. Choose from the following options:
//
// - YEAR: Year to date.
// - MONTH: Month to date.
func (o TemplatePeriodToDateComputationOutput) PeriodTimeGranularity() TemplateTimeGranularityPtrOutput {
	return o.ApplyT(func(v TemplatePeriodToDateComputation) *TemplateTimeGranularity { return v.PeriodTimeGranularity }).(TemplateTimeGranularityPtrOutput)
}

// The time field that is used in a computation.
func (o TemplatePeriodToDateComputationOutput) Time() TemplateDimensionFieldPtrOutput {
	return o.ApplyT(func(v TemplatePeriodToDateComputation) *TemplateDimensionField { return v.Time }).(TemplateDimensionFieldPtrOutput)
}

// The value field that is used in a computation.
func (o TemplatePeriodToDateComputationOutput) Value() TemplateMeasureFieldPtrOutput {
	return o.ApplyT(func(v TemplatePeriodToDateComputation) *TemplateMeasureField { return v.Value }).(TemplateMeasureFieldPtrOutput)
}

type TemplatePeriodToDateComputationPtrOutput struct{ *pulumi.OutputState }

func (TemplatePeriodToDateComputationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePeriodToDateComputation)(nil)).Elem()
}

func (o TemplatePeriodToDateComputationPtrOutput) ToTemplatePeriodToDateComputationPtrOutput() TemplatePeriodToDateComputationPtrOutput {
	return o
}

func (o TemplatePeriodToDateComputationPtrOutput) ToTemplatePeriodToDateComputationPtrOutputWithContext(ctx context.Context) TemplatePeriodToDateComputationPtrOutput {
	return o
}

func (o TemplatePeriodToDateComputationPtrOutput) Elem() TemplatePeriodToDateComputationOutput {
	return o.ApplyT(func(v *TemplatePeriodToDateComputation) TemplatePeriodToDateComputation {
		if v != nil {
			return *v
		}
		var ret TemplatePeriodToDateComputation
		return ret
	}).(TemplatePeriodToDateComputationOutput)
}

// The ID for a computation.
func (o TemplatePeriodToDateComputationPtrOutput) ComputationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplatePeriodToDateComputation) *string {
		if v == nil {
			return nil
		}
		return &v.ComputationId
	}).(pulumi.StringPtrOutput)
}

// The name of a computation.
func (o TemplatePeriodToDateComputationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplatePeriodToDateComputation) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The time granularity setup of period to date computation. Choose from the following options:
//
// - YEAR: Year to date.
// - MONTH: Month to date.
func (o TemplatePeriodToDateComputationPtrOutput) PeriodTimeGranularity() TemplateTimeGranularityPtrOutput {
	return o.ApplyT(func(v *TemplatePeriodToDateComputation) *TemplateTimeGranularity {
		if v == nil {
			return nil
		}
		return v.PeriodTimeGranularity
	}).(TemplateTimeGranularityPtrOutput)
}

// The time field that is used in a computation.
func (o TemplatePeriodToDateComputationPtrOutput) Time() TemplateDimensionFieldPtrOutput {
	return o.ApplyT(func(v *TemplatePeriodToDateComputation) *TemplateDimensionField {
		if v == nil {
			return nil
		}
		return v.Time
	}).(TemplateDimensionFieldPtrOutput)
}

// The value field that is used in a computation.
func (o TemplatePeriodToDateComputationPtrOutput) Value() TemplateMeasureFieldPtrOutput {
	return o.ApplyT(func(v *TemplatePeriodToDateComputation) *TemplateMeasureField {
		if v == nil {
			return nil
		}
		return v.Value
	}).(TemplateMeasureFieldPtrOutput)
}

type TemplatePieChartAggregatedFieldWells struct {
	// The category (group/color) field wells of a pie chart.
	Category []TemplateDimensionField `pulumi:"category"`
	// The small multiples field well of a pie chart.
	SmallMultiples []TemplateDimensionField `pulumi:"smallMultiples"`
	// The value field wells of a pie chart. Values are aggregated based on categories.
	Values []TemplateMeasureField `pulumi:"values"`
}

// TemplatePieChartAggregatedFieldWellsInput is an input type that accepts TemplatePieChartAggregatedFieldWellsArgs and TemplatePieChartAggregatedFieldWellsOutput values.
// You can construct a concrete instance of `TemplatePieChartAggregatedFieldWellsInput` via:
//
//	TemplatePieChartAggregatedFieldWellsArgs{...}
type TemplatePieChartAggregatedFieldWellsInput interface {
	pulumi.Input

	ToTemplatePieChartAggregatedFieldWellsOutput() TemplatePieChartAggregatedFieldWellsOutput
	ToTemplatePieChartAggregatedFieldWellsOutputWithContext(context.Context) TemplatePieChartAggregatedFieldWellsOutput
}

type TemplatePieChartAggregatedFieldWellsArgs struct {
	// The category (group/color) field wells of a pie chart.
	Category TemplateDimensionFieldArrayInput `pulumi:"category"`
	// The small multiples field well of a pie chart.
	SmallMultiples TemplateDimensionFieldArrayInput `pulumi:"smallMultiples"`
	// The value field wells of a pie chart. Values are aggregated based on categories.
	Values TemplateMeasureFieldArrayInput `pulumi:"values"`
}

func (TemplatePieChartAggregatedFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePieChartAggregatedFieldWells)(nil)).Elem()
}

func (i TemplatePieChartAggregatedFieldWellsArgs) ToTemplatePieChartAggregatedFieldWellsOutput() TemplatePieChartAggregatedFieldWellsOutput {
	return i.ToTemplatePieChartAggregatedFieldWellsOutputWithContext(context.Background())
}

func (i TemplatePieChartAggregatedFieldWellsArgs) ToTemplatePieChartAggregatedFieldWellsOutputWithContext(ctx context.Context) TemplatePieChartAggregatedFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePieChartAggregatedFieldWellsOutput)
}

func (i TemplatePieChartAggregatedFieldWellsArgs) ToTemplatePieChartAggregatedFieldWellsPtrOutput() TemplatePieChartAggregatedFieldWellsPtrOutput {
	return i.ToTemplatePieChartAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i TemplatePieChartAggregatedFieldWellsArgs) ToTemplatePieChartAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplatePieChartAggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePieChartAggregatedFieldWellsOutput).ToTemplatePieChartAggregatedFieldWellsPtrOutputWithContext(ctx)
}

// TemplatePieChartAggregatedFieldWellsPtrInput is an input type that accepts TemplatePieChartAggregatedFieldWellsArgs, TemplatePieChartAggregatedFieldWellsPtr and TemplatePieChartAggregatedFieldWellsPtrOutput values.
// You can construct a concrete instance of `TemplatePieChartAggregatedFieldWellsPtrInput` via:
//
//	        TemplatePieChartAggregatedFieldWellsArgs{...}
//
//	or:
//
//	        nil
type TemplatePieChartAggregatedFieldWellsPtrInput interface {
	pulumi.Input

	ToTemplatePieChartAggregatedFieldWellsPtrOutput() TemplatePieChartAggregatedFieldWellsPtrOutput
	ToTemplatePieChartAggregatedFieldWellsPtrOutputWithContext(context.Context) TemplatePieChartAggregatedFieldWellsPtrOutput
}

type templatePieChartAggregatedFieldWellsPtrType TemplatePieChartAggregatedFieldWellsArgs

func TemplatePieChartAggregatedFieldWellsPtr(v *TemplatePieChartAggregatedFieldWellsArgs) TemplatePieChartAggregatedFieldWellsPtrInput {
	return (*templatePieChartAggregatedFieldWellsPtrType)(v)
}

func (*templatePieChartAggregatedFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePieChartAggregatedFieldWells)(nil)).Elem()
}

func (i *templatePieChartAggregatedFieldWellsPtrType) ToTemplatePieChartAggregatedFieldWellsPtrOutput() TemplatePieChartAggregatedFieldWellsPtrOutput {
	return i.ToTemplatePieChartAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i *templatePieChartAggregatedFieldWellsPtrType) ToTemplatePieChartAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplatePieChartAggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePieChartAggregatedFieldWellsPtrOutput)
}

type TemplatePieChartAggregatedFieldWellsOutput struct{ *pulumi.OutputState }

func (TemplatePieChartAggregatedFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePieChartAggregatedFieldWells)(nil)).Elem()
}

func (o TemplatePieChartAggregatedFieldWellsOutput) ToTemplatePieChartAggregatedFieldWellsOutput() TemplatePieChartAggregatedFieldWellsOutput {
	return o
}

func (o TemplatePieChartAggregatedFieldWellsOutput) ToTemplatePieChartAggregatedFieldWellsOutputWithContext(ctx context.Context) TemplatePieChartAggregatedFieldWellsOutput {
	return o
}

func (o TemplatePieChartAggregatedFieldWellsOutput) ToTemplatePieChartAggregatedFieldWellsPtrOutput() TemplatePieChartAggregatedFieldWellsPtrOutput {
	return o.ToTemplatePieChartAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (o TemplatePieChartAggregatedFieldWellsOutput) ToTemplatePieChartAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplatePieChartAggregatedFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplatePieChartAggregatedFieldWells) *TemplatePieChartAggregatedFieldWells {
		return &v
	}).(TemplatePieChartAggregatedFieldWellsPtrOutput)
}

// The category (group/color) field wells of a pie chart.
func (o TemplatePieChartAggregatedFieldWellsOutput) Category() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v TemplatePieChartAggregatedFieldWells) []TemplateDimensionField { return v.Category }).(TemplateDimensionFieldArrayOutput)
}

// The small multiples field well of a pie chart.
func (o TemplatePieChartAggregatedFieldWellsOutput) SmallMultiples() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v TemplatePieChartAggregatedFieldWells) []TemplateDimensionField { return v.SmallMultiples }).(TemplateDimensionFieldArrayOutput)
}

// The value field wells of a pie chart. Values are aggregated based on categories.
func (o TemplatePieChartAggregatedFieldWellsOutput) Values() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v TemplatePieChartAggregatedFieldWells) []TemplateMeasureField { return v.Values }).(TemplateMeasureFieldArrayOutput)
}

type TemplatePieChartAggregatedFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (TemplatePieChartAggregatedFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePieChartAggregatedFieldWells)(nil)).Elem()
}

func (o TemplatePieChartAggregatedFieldWellsPtrOutput) ToTemplatePieChartAggregatedFieldWellsPtrOutput() TemplatePieChartAggregatedFieldWellsPtrOutput {
	return o
}

func (o TemplatePieChartAggregatedFieldWellsPtrOutput) ToTemplatePieChartAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplatePieChartAggregatedFieldWellsPtrOutput {
	return o
}

func (o TemplatePieChartAggregatedFieldWellsPtrOutput) Elem() TemplatePieChartAggregatedFieldWellsOutput {
	return o.ApplyT(func(v *TemplatePieChartAggregatedFieldWells) TemplatePieChartAggregatedFieldWells {
		if v != nil {
			return *v
		}
		var ret TemplatePieChartAggregatedFieldWells
		return ret
	}).(TemplatePieChartAggregatedFieldWellsOutput)
}

// The category (group/color) field wells of a pie chart.
func (o TemplatePieChartAggregatedFieldWellsPtrOutput) Category() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v *TemplatePieChartAggregatedFieldWells) []TemplateDimensionField {
		if v == nil {
			return nil
		}
		return v.Category
	}).(TemplateDimensionFieldArrayOutput)
}

// The small multiples field well of a pie chart.
func (o TemplatePieChartAggregatedFieldWellsPtrOutput) SmallMultiples() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v *TemplatePieChartAggregatedFieldWells) []TemplateDimensionField {
		if v == nil {
			return nil
		}
		return v.SmallMultiples
	}).(TemplateDimensionFieldArrayOutput)
}

// The value field wells of a pie chart. Values are aggregated based on categories.
func (o TemplatePieChartAggregatedFieldWellsPtrOutput) Values() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v *TemplatePieChartAggregatedFieldWells) []TemplateMeasureField {
		if v == nil {
			return nil
		}
		return v.Values
	}).(TemplateMeasureFieldArrayOutput)
}

type TemplatePieChartConfiguration struct {
	// The label options of the group/color that is displayed in a pie chart.
	CategoryLabelOptions *TemplateChartAxisLabelOptions `pulumi:"categoryLabelOptions"`
	// The contribution analysis (anomaly configuration) setup of the visual.
	ContributionAnalysisDefaults []TemplateContributionAnalysisDefault `pulumi:"contributionAnalysisDefaults"`
	// The options that determine if visual data labels are displayed.
	DataLabels *TemplateDataLabelOptions `pulumi:"dataLabels"`
	// The options that determine the shape of the chart. This option determines whether the chart is a pie chart or a donut chart.
	DonutOptions *TemplateDonutOptions `pulumi:"donutOptions"`
	// The field wells of the visual.
	FieldWells *TemplatePieChartFieldWells `pulumi:"fieldWells"`
	// The general visual interactions setup for a visual.
	Interactions *TemplateVisualInteractionOptions `pulumi:"interactions"`
	// The legend display setup of the visual.
	Legend *TemplateLegendOptions `pulumi:"legend"`
	// The small multiples setup for the visual.
	SmallMultiplesOptions *TemplateSmallMultiplesOptions `pulumi:"smallMultiplesOptions"`
	// The sort configuration of a pie chart.
	SortConfiguration *TemplatePieChartSortConfiguration `pulumi:"sortConfiguration"`
	// The tooltip display setup of the visual.
	Tooltip *TemplateTooltipOptions `pulumi:"tooltip"`
	// The label options for the value that is displayed in a pie chart.
	ValueLabelOptions *TemplateChartAxisLabelOptions `pulumi:"valueLabelOptions"`
	// The palette (chart color) display setup of the visual.
	VisualPalette *TemplateVisualPalette `pulumi:"visualPalette"`
}

// TemplatePieChartConfigurationInput is an input type that accepts TemplatePieChartConfigurationArgs and TemplatePieChartConfigurationOutput values.
// You can construct a concrete instance of `TemplatePieChartConfigurationInput` via:
//
//	TemplatePieChartConfigurationArgs{...}
type TemplatePieChartConfigurationInput interface {
	pulumi.Input

	ToTemplatePieChartConfigurationOutput() TemplatePieChartConfigurationOutput
	ToTemplatePieChartConfigurationOutputWithContext(context.Context) TemplatePieChartConfigurationOutput
}

type TemplatePieChartConfigurationArgs struct {
	// The label options of the group/color that is displayed in a pie chart.
	CategoryLabelOptions TemplateChartAxisLabelOptionsPtrInput `pulumi:"categoryLabelOptions"`
	// The contribution analysis (anomaly configuration) setup of the visual.
	ContributionAnalysisDefaults TemplateContributionAnalysisDefaultArrayInput `pulumi:"contributionAnalysisDefaults"`
	// The options that determine if visual data labels are displayed.
	DataLabels TemplateDataLabelOptionsPtrInput `pulumi:"dataLabels"`
	// The options that determine the shape of the chart. This option determines whether the chart is a pie chart or a donut chart.
	DonutOptions TemplateDonutOptionsPtrInput `pulumi:"donutOptions"`
	// The field wells of the visual.
	FieldWells TemplatePieChartFieldWellsPtrInput `pulumi:"fieldWells"`
	// The general visual interactions setup for a visual.
	Interactions TemplateVisualInteractionOptionsPtrInput `pulumi:"interactions"`
	// The legend display setup of the visual.
	Legend TemplateLegendOptionsPtrInput `pulumi:"legend"`
	// The small multiples setup for the visual.
	SmallMultiplesOptions TemplateSmallMultiplesOptionsPtrInput `pulumi:"smallMultiplesOptions"`
	// The sort configuration of a pie chart.
	SortConfiguration TemplatePieChartSortConfigurationPtrInput `pulumi:"sortConfiguration"`
	// The tooltip display setup of the visual.
	Tooltip TemplateTooltipOptionsPtrInput `pulumi:"tooltip"`
	// The label options for the value that is displayed in a pie chart.
	ValueLabelOptions TemplateChartAxisLabelOptionsPtrInput `pulumi:"valueLabelOptions"`
	// The palette (chart color) display setup of the visual.
	VisualPalette TemplateVisualPalettePtrInput `pulumi:"visualPalette"`
}

func (TemplatePieChartConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePieChartConfiguration)(nil)).Elem()
}

func (i TemplatePieChartConfigurationArgs) ToTemplatePieChartConfigurationOutput() TemplatePieChartConfigurationOutput {
	return i.ToTemplatePieChartConfigurationOutputWithContext(context.Background())
}

func (i TemplatePieChartConfigurationArgs) ToTemplatePieChartConfigurationOutputWithContext(ctx context.Context) TemplatePieChartConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePieChartConfigurationOutput)
}

func (i TemplatePieChartConfigurationArgs) ToTemplatePieChartConfigurationPtrOutput() TemplatePieChartConfigurationPtrOutput {
	return i.ToTemplatePieChartConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplatePieChartConfigurationArgs) ToTemplatePieChartConfigurationPtrOutputWithContext(ctx context.Context) TemplatePieChartConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePieChartConfigurationOutput).ToTemplatePieChartConfigurationPtrOutputWithContext(ctx)
}

// TemplatePieChartConfigurationPtrInput is an input type that accepts TemplatePieChartConfigurationArgs, TemplatePieChartConfigurationPtr and TemplatePieChartConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplatePieChartConfigurationPtrInput` via:
//
//	        TemplatePieChartConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplatePieChartConfigurationPtrInput interface {
	pulumi.Input

	ToTemplatePieChartConfigurationPtrOutput() TemplatePieChartConfigurationPtrOutput
	ToTemplatePieChartConfigurationPtrOutputWithContext(context.Context) TemplatePieChartConfigurationPtrOutput
}

type templatePieChartConfigurationPtrType TemplatePieChartConfigurationArgs

func TemplatePieChartConfigurationPtr(v *TemplatePieChartConfigurationArgs) TemplatePieChartConfigurationPtrInput {
	return (*templatePieChartConfigurationPtrType)(v)
}

func (*templatePieChartConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePieChartConfiguration)(nil)).Elem()
}

func (i *templatePieChartConfigurationPtrType) ToTemplatePieChartConfigurationPtrOutput() TemplatePieChartConfigurationPtrOutput {
	return i.ToTemplatePieChartConfigurationPtrOutputWithContext(context.Background())
}

func (i *templatePieChartConfigurationPtrType) ToTemplatePieChartConfigurationPtrOutputWithContext(ctx context.Context) TemplatePieChartConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePieChartConfigurationPtrOutput)
}

type TemplatePieChartConfigurationOutput struct{ *pulumi.OutputState }

func (TemplatePieChartConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePieChartConfiguration)(nil)).Elem()
}

func (o TemplatePieChartConfigurationOutput) ToTemplatePieChartConfigurationOutput() TemplatePieChartConfigurationOutput {
	return o
}

func (o TemplatePieChartConfigurationOutput) ToTemplatePieChartConfigurationOutputWithContext(ctx context.Context) TemplatePieChartConfigurationOutput {
	return o
}

func (o TemplatePieChartConfigurationOutput) ToTemplatePieChartConfigurationPtrOutput() TemplatePieChartConfigurationPtrOutput {
	return o.ToTemplatePieChartConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplatePieChartConfigurationOutput) ToTemplatePieChartConfigurationPtrOutputWithContext(ctx context.Context) TemplatePieChartConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplatePieChartConfiguration) *TemplatePieChartConfiguration {
		return &v
	}).(TemplatePieChartConfigurationPtrOutput)
}

// The label options of the group/color that is displayed in a pie chart.
func (o TemplatePieChartConfigurationOutput) CategoryLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplatePieChartConfiguration) *TemplateChartAxisLabelOptions { return v.CategoryLabelOptions }).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The contribution analysis (anomaly configuration) setup of the visual.
func (o TemplatePieChartConfigurationOutput) ContributionAnalysisDefaults() TemplateContributionAnalysisDefaultArrayOutput {
	return o.ApplyT(func(v TemplatePieChartConfiguration) []TemplateContributionAnalysisDefault {
		return v.ContributionAnalysisDefaults
	}).(TemplateContributionAnalysisDefaultArrayOutput)
}

// The options that determine if visual data labels are displayed.
func (o TemplatePieChartConfigurationOutput) DataLabels() TemplateDataLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplatePieChartConfiguration) *TemplateDataLabelOptions { return v.DataLabels }).(TemplateDataLabelOptionsPtrOutput)
}

// The options that determine the shape of the chart. This option determines whether the chart is a pie chart or a donut chart.
func (o TemplatePieChartConfigurationOutput) DonutOptions() TemplateDonutOptionsPtrOutput {
	return o.ApplyT(func(v TemplatePieChartConfiguration) *TemplateDonutOptions { return v.DonutOptions }).(TemplateDonutOptionsPtrOutput)
}

// The field wells of the visual.
func (o TemplatePieChartConfigurationOutput) FieldWells() TemplatePieChartFieldWellsPtrOutput {
	return o.ApplyT(func(v TemplatePieChartConfiguration) *TemplatePieChartFieldWells { return v.FieldWells }).(TemplatePieChartFieldWellsPtrOutput)
}

// The general visual interactions setup for a visual.
func (o TemplatePieChartConfigurationOutput) Interactions() TemplateVisualInteractionOptionsPtrOutput {
	return o.ApplyT(func(v TemplatePieChartConfiguration) *TemplateVisualInteractionOptions { return v.Interactions }).(TemplateVisualInteractionOptionsPtrOutput)
}

// The legend display setup of the visual.
func (o TemplatePieChartConfigurationOutput) Legend() TemplateLegendOptionsPtrOutput {
	return o.ApplyT(func(v TemplatePieChartConfiguration) *TemplateLegendOptions { return v.Legend }).(TemplateLegendOptionsPtrOutput)
}

// The small multiples setup for the visual.
func (o TemplatePieChartConfigurationOutput) SmallMultiplesOptions() TemplateSmallMultiplesOptionsPtrOutput {
	return o.ApplyT(func(v TemplatePieChartConfiguration) *TemplateSmallMultiplesOptions { return v.SmallMultiplesOptions }).(TemplateSmallMultiplesOptionsPtrOutput)
}

// The sort configuration of a pie chart.
func (o TemplatePieChartConfigurationOutput) SortConfiguration() TemplatePieChartSortConfigurationPtrOutput {
	return o.ApplyT(func(v TemplatePieChartConfiguration) *TemplatePieChartSortConfiguration { return v.SortConfiguration }).(TemplatePieChartSortConfigurationPtrOutput)
}

// The tooltip display setup of the visual.
func (o TemplatePieChartConfigurationOutput) Tooltip() TemplateTooltipOptionsPtrOutput {
	return o.ApplyT(func(v TemplatePieChartConfiguration) *TemplateTooltipOptions { return v.Tooltip }).(TemplateTooltipOptionsPtrOutput)
}

// The label options for the value that is displayed in a pie chart.
func (o TemplatePieChartConfigurationOutput) ValueLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplatePieChartConfiguration) *TemplateChartAxisLabelOptions { return v.ValueLabelOptions }).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The palette (chart color) display setup of the visual.
func (o TemplatePieChartConfigurationOutput) VisualPalette() TemplateVisualPalettePtrOutput {
	return o.ApplyT(func(v TemplatePieChartConfiguration) *TemplateVisualPalette { return v.VisualPalette }).(TemplateVisualPalettePtrOutput)
}

type TemplatePieChartConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplatePieChartConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePieChartConfiguration)(nil)).Elem()
}

func (o TemplatePieChartConfigurationPtrOutput) ToTemplatePieChartConfigurationPtrOutput() TemplatePieChartConfigurationPtrOutput {
	return o
}

func (o TemplatePieChartConfigurationPtrOutput) ToTemplatePieChartConfigurationPtrOutputWithContext(ctx context.Context) TemplatePieChartConfigurationPtrOutput {
	return o
}

func (o TemplatePieChartConfigurationPtrOutput) Elem() TemplatePieChartConfigurationOutput {
	return o.ApplyT(func(v *TemplatePieChartConfiguration) TemplatePieChartConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplatePieChartConfiguration
		return ret
	}).(TemplatePieChartConfigurationOutput)
}

// The label options of the group/color that is displayed in a pie chart.
func (o TemplatePieChartConfigurationPtrOutput) CategoryLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplatePieChartConfiguration) *TemplateChartAxisLabelOptions {
		if v == nil {
			return nil
		}
		return v.CategoryLabelOptions
	}).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The contribution analysis (anomaly configuration) setup of the visual.
func (o TemplatePieChartConfigurationPtrOutput) ContributionAnalysisDefaults() TemplateContributionAnalysisDefaultArrayOutput {
	return o.ApplyT(func(v *TemplatePieChartConfiguration) []TemplateContributionAnalysisDefault {
		if v == nil {
			return nil
		}
		return v.ContributionAnalysisDefaults
	}).(TemplateContributionAnalysisDefaultArrayOutput)
}

// The options that determine if visual data labels are displayed.
func (o TemplatePieChartConfigurationPtrOutput) DataLabels() TemplateDataLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplatePieChartConfiguration) *TemplateDataLabelOptions {
		if v == nil {
			return nil
		}
		return v.DataLabels
	}).(TemplateDataLabelOptionsPtrOutput)
}

// The options that determine the shape of the chart. This option determines whether the chart is a pie chart or a donut chart.
func (o TemplatePieChartConfigurationPtrOutput) DonutOptions() TemplateDonutOptionsPtrOutput {
	return o.ApplyT(func(v *TemplatePieChartConfiguration) *TemplateDonutOptions {
		if v == nil {
			return nil
		}
		return v.DonutOptions
	}).(TemplateDonutOptionsPtrOutput)
}

// The field wells of the visual.
func (o TemplatePieChartConfigurationPtrOutput) FieldWells() TemplatePieChartFieldWellsPtrOutput {
	return o.ApplyT(func(v *TemplatePieChartConfiguration) *TemplatePieChartFieldWells {
		if v == nil {
			return nil
		}
		return v.FieldWells
	}).(TemplatePieChartFieldWellsPtrOutput)
}

// The general visual interactions setup for a visual.
func (o TemplatePieChartConfigurationPtrOutput) Interactions() TemplateVisualInteractionOptionsPtrOutput {
	return o.ApplyT(func(v *TemplatePieChartConfiguration) *TemplateVisualInteractionOptions {
		if v == nil {
			return nil
		}
		return v.Interactions
	}).(TemplateVisualInteractionOptionsPtrOutput)
}

// The legend display setup of the visual.
func (o TemplatePieChartConfigurationPtrOutput) Legend() TemplateLegendOptionsPtrOutput {
	return o.ApplyT(func(v *TemplatePieChartConfiguration) *TemplateLegendOptions {
		if v == nil {
			return nil
		}
		return v.Legend
	}).(TemplateLegendOptionsPtrOutput)
}

// The small multiples setup for the visual.
func (o TemplatePieChartConfigurationPtrOutput) SmallMultiplesOptions() TemplateSmallMultiplesOptionsPtrOutput {
	return o.ApplyT(func(v *TemplatePieChartConfiguration) *TemplateSmallMultiplesOptions {
		if v == nil {
			return nil
		}
		return v.SmallMultiplesOptions
	}).(TemplateSmallMultiplesOptionsPtrOutput)
}

// The sort configuration of a pie chart.
func (o TemplatePieChartConfigurationPtrOutput) SortConfiguration() TemplatePieChartSortConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplatePieChartConfiguration) *TemplatePieChartSortConfiguration {
		if v == nil {
			return nil
		}
		return v.SortConfiguration
	}).(TemplatePieChartSortConfigurationPtrOutput)
}

// The tooltip display setup of the visual.
func (o TemplatePieChartConfigurationPtrOutput) Tooltip() TemplateTooltipOptionsPtrOutput {
	return o.ApplyT(func(v *TemplatePieChartConfiguration) *TemplateTooltipOptions {
		if v == nil {
			return nil
		}
		return v.Tooltip
	}).(TemplateTooltipOptionsPtrOutput)
}

// The label options for the value that is displayed in a pie chart.
func (o TemplatePieChartConfigurationPtrOutput) ValueLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplatePieChartConfiguration) *TemplateChartAxisLabelOptions {
		if v == nil {
			return nil
		}
		return v.ValueLabelOptions
	}).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The palette (chart color) display setup of the visual.
func (o TemplatePieChartConfigurationPtrOutput) VisualPalette() TemplateVisualPalettePtrOutput {
	return o.ApplyT(func(v *TemplatePieChartConfiguration) *TemplateVisualPalette {
		if v == nil {
			return nil
		}
		return v.VisualPalette
	}).(TemplateVisualPalettePtrOutput)
}

type TemplatePieChartFieldWells struct {
	// The field well configuration of a pie chart.
	PieChartAggregatedFieldWells *TemplatePieChartAggregatedFieldWells `pulumi:"pieChartAggregatedFieldWells"`
}

// TemplatePieChartFieldWellsInput is an input type that accepts TemplatePieChartFieldWellsArgs and TemplatePieChartFieldWellsOutput values.
// You can construct a concrete instance of `TemplatePieChartFieldWellsInput` via:
//
//	TemplatePieChartFieldWellsArgs{...}
type TemplatePieChartFieldWellsInput interface {
	pulumi.Input

	ToTemplatePieChartFieldWellsOutput() TemplatePieChartFieldWellsOutput
	ToTemplatePieChartFieldWellsOutputWithContext(context.Context) TemplatePieChartFieldWellsOutput
}

type TemplatePieChartFieldWellsArgs struct {
	// The field well configuration of a pie chart.
	PieChartAggregatedFieldWells TemplatePieChartAggregatedFieldWellsPtrInput `pulumi:"pieChartAggregatedFieldWells"`
}

func (TemplatePieChartFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePieChartFieldWells)(nil)).Elem()
}

func (i TemplatePieChartFieldWellsArgs) ToTemplatePieChartFieldWellsOutput() TemplatePieChartFieldWellsOutput {
	return i.ToTemplatePieChartFieldWellsOutputWithContext(context.Background())
}

func (i TemplatePieChartFieldWellsArgs) ToTemplatePieChartFieldWellsOutputWithContext(ctx context.Context) TemplatePieChartFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePieChartFieldWellsOutput)
}

func (i TemplatePieChartFieldWellsArgs) ToTemplatePieChartFieldWellsPtrOutput() TemplatePieChartFieldWellsPtrOutput {
	return i.ToTemplatePieChartFieldWellsPtrOutputWithContext(context.Background())
}

func (i TemplatePieChartFieldWellsArgs) ToTemplatePieChartFieldWellsPtrOutputWithContext(ctx context.Context) TemplatePieChartFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePieChartFieldWellsOutput).ToTemplatePieChartFieldWellsPtrOutputWithContext(ctx)
}

// TemplatePieChartFieldWellsPtrInput is an input type that accepts TemplatePieChartFieldWellsArgs, TemplatePieChartFieldWellsPtr and TemplatePieChartFieldWellsPtrOutput values.
// You can construct a concrete instance of `TemplatePieChartFieldWellsPtrInput` via:
//
//	        TemplatePieChartFieldWellsArgs{...}
//
//	or:
//
//	        nil
type TemplatePieChartFieldWellsPtrInput interface {
	pulumi.Input

	ToTemplatePieChartFieldWellsPtrOutput() TemplatePieChartFieldWellsPtrOutput
	ToTemplatePieChartFieldWellsPtrOutputWithContext(context.Context) TemplatePieChartFieldWellsPtrOutput
}

type templatePieChartFieldWellsPtrType TemplatePieChartFieldWellsArgs

func TemplatePieChartFieldWellsPtr(v *TemplatePieChartFieldWellsArgs) TemplatePieChartFieldWellsPtrInput {
	return (*templatePieChartFieldWellsPtrType)(v)
}

func (*templatePieChartFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePieChartFieldWells)(nil)).Elem()
}

func (i *templatePieChartFieldWellsPtrType) ToTemplatePieChartFieldWellsPtrOutput() TemplatePieChartFieldWellsPtrOutput {
	return i.ToTemplatePieChartFieldWellsPtrOutputWithContext(context.Background())
}

func (i *templatePieChartFieldWellsPtrType) ToTemplatePieChartFieldWellsPtrOutputWithContext(ctx context.Context) TemplatePieChartFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePieChartFieldWellsPtrOutput)
}

type TemplatePieChartFieldWellsOutput struct{ *pulumi.OutputState }

func (TemplatePieChartFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePieChartFieldWells)(nil)).Elem()
}

func (o TemplatePieChartFieldWellsOutput) ToTemplatePieChartFieldWellsOutput() TemplatePieChartFieldWellsOutput {
	return o
}

func (o TemplatePieChartFieldWellsOutput) ToTemplatePieChartFieldWellsOutputWithContext(ctx context.Context) TemplatePieChartFieldWellsOutput {
	return o
}

func (o TemplatePieChartFieldWellsOutput) ToTemplatePieChartFieldWellsPtrOutput() TemplatePieChartFieldWellsPtrOutput {
	return o.ToTemplatePieChartFieldWellsPtrOutputWithContext(context.Background())
}

func (o TemplatePieChartFieldWellsOutput) ToTemplatePieChartFieldWellsPtrOutputWithContext(ctx context.Context) TemplatePieChartFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplatePieChartFieldWells) *TemplatePieChartFieldWells {
		return &v
	}).(TemplatePieChartFieldWellsPtrOutput)
}

// The field well configuration of a pie chart.
func (o TemplatePieChartFieldWellsOutput) PieChartAggregatedFieldWells() TemplatePieChartAggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v TemplatePieChartFieldWells) *TemplatePieChartAggregatedFieldWells {
		return v.PieChartAggregatedFieldWells
	}).(TemplatePieChartAggregatedFieldWellsPtrOutput)
}

type TemplatePieChartFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (TemplatePieChartFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePieChartFieldWells)(nil)).Elem()
}

func (o TemplatePieChartFieldWellsPtrOutput) ToTemplatePieChartFieldWellsPtrOutput() TemplatePieChartFieldWellsPtrOutput {
	return o
}

func (o TemplatePieChartFieldWellsPtrOutput) ToTemplatePieChartFieldWellsPtrOutputWithContext(ctx context.Context) TemplatePieChartFieldWellsPtrOutput {
	return o
}

func (o TemplatePieChartFieldWellsPtrOutput) Elem() TemplatePieChartFieldWellsOutput {
	return o.ApplyT(func(v *TemplatePieChartFieldWells) TemplatePieChartFieldWells {
		if v != nil {
			return *v
		}
		var ret TemplatePieChartFieldWells
		return ret
	}).(TemplatePieChartFieldWellsOutput)
}

// The field well configuration of a pie chart.
func (o TemplatePieChartFieldWellsPtrOutput) PieChartAggregatedFieldWells() TemplatePieChartAggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v *TemplatePieChartFieldWells) *TemplatePieChartAggregatedFieldWells {
		if v == nil {
			return nil
		}
		return v.PieChartAggregatedFieldWells
	}).(TemplatePieChartAggregatedFieldWellsPtrOutput)
}

type TemplatePieChartSortConfiguration struct {
	// The limit on the number of categories that are displayed in a pie chart.
	CategoryItemsLimit *TemplateItemsLimitConfiguration `pulumi:"categoryItemsLimit"`
	// The sort configuration of the category fields.
	CategorySort []TemplateFieldSortOptions `pulumi:"categorySort"`
	// The limit on the number of small multiples panels that are displayed.
	SmallMultiplesLimitConfiguration *TemplateItemsLimitConfiguration `pulumi:"smallMultiplesLimitConfiguration"`
	// The sort configuration of the small multiples field.
	SmallMultiplesSort []TemplateFieldSortOptions `pulumi:"smallMultiplesSort"`
}

// TemplatePieChartSortConfigurationInput is an input type that accepts TemplatePieChartSortConfigurationArgs and TemplatePieChartSortConfigurationOutput values.
// You can construct a concrete instance of `TemplatePieChartSortConfigurationInput` via:
//
//	TemplatePieChartSortConfigurationArgs{...}
type TemplatePieChartSortConfigurationInput interface {
	pulumi.Input

	ToTemplatePieChartSortConfigurationOutput() TemplatePieChartSortConfigurationOutput
	ToTemplatePieChartSortConfigurationOutputWithContext(context.Context) TemplatePieChartSortConfigurationOutput
}

type TemplatePieChartSortConfigurationArgs struct {
	// The limit on the number of categories that are displayed in a pie chart.
	CategoryItemsLimit TemplateItemsLimitConfigurationPtrInput `pulumi:"categoryItemsLimit"`
	// The sort configuration of the category fields.
	CategorySort TemplateFieldSortOptionsArrayInput `pulumi:"categorySort"`
	// The limit on the number of small multiples panels that are displayed.
	SmallMultiplesLimitConfiguration TemplateItemsLimitConfigurationPtrInput `pulumi:"smallMultiplesLimitConfiguration"`
	// The sort configuration of the small multiples field.
	SmallMultiplesSort TemplateFieldSortOptionsArrayInput `pulumi:"smallMultiplesSort"`
}

func (TemplatePieChartSortConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePieChartSortConfiguration)(nil)).Elem()
}

func (i TemplatePieChartSortConfigurationArgs) ToTemplatePieChartSortConfigurationOutput() TemplatePieChartSortConfigurationOutput {
	return i.ToTemplatePieChartSortConfigurationOutputWithContext(context.Background())
}

func (i TemplatePieChartSortConfigurationArgs) ToTemplatePieChartSortConfigurationOutputWithContext(ctx context.Context) TemplatePieChartSortConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePieChartSortConfigurationOutput)
}

func (i TemplatePieChartSortConfigurationArgs) ToTemplatePieChartSortConfigurationPtrOutput() TemplatePieChartSortConfigurationPtrOutput {
	return i.ToTemplatePieChartSortConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplatePieChartSortConfigurationArgs) ToTemplatePieChartSortConfigurationPtrOutputWithContext(ctx context.Context) TemplatePieChartSortConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePieChartSortConfigurationOutput).ToTemplatePieChartSortConfigurationPtrOutputWithContext(ctx)
}

// TemplatePieChartSortConfigurationPtrInput is an input type that accepts TemplatePieChartSortConfigurationArgs, TemplatePieChartSortConfigurationPtr and TemplatePieChartSortConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplatePieChartSortConfigurationPtrInput` via:
//
//	        TemplatePieChartSortConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplatePieChartSortConfigurationPtrInput interface {
	pulumi.Input

	ToTemplatePieChartSortConfigurationPtrOutput() TemplatePieChartSortConfigurationPtrOutput
	ToTemplatePieChartSortConfigurationPtrOutputWithContext(context.Context) TemplatePieChartSortConfigurationPtrOutput
}

type templatePieChartSortConfigurationPtrType TemplatePieChartSortConfigurationArgs

func TemplatePieChartSortConfigurationPtr(v *TemplatePieChartSortConfigurationArgs) TemplatePieChartSortConfigurationPtrInput {
	return (*templatePieChartSortConfigurationPtrType)(v)
}

func (*templatePieChartSortConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePieChartSortConfiguration)(nil)).Elem()
}

func (i *templatePieChartSortConfigurationPtrType) ToTemplatePieChartSortConfigurationPtrOutput() TemplatePieChartSortConfigurationPtrOutput {
	return i.ToTemplatePieChartSortConfigurationPtrOutputWithContext(context.Background())
}

func (i *templatePieChartSortConfigurationPtrType) ToTemplatePieChartSortConfigurationPtrOutputWithContext(ctx context.Context) TemplatePieChartSortConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePieChartSortConfigurationPtrOutput)
}

type TemplatePieChartSortConfigurationOutput struct{ *pulumi.OutputState }

func (TemplatePieChartSortConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePieChartSortConfiguration)(nil)).Elem()
}

func (o TemplatePieChartSortConfigurationOutput) ToTemplatePieChartSortConfigurationOutput() TemplatePieChartSortConfigurationOutput {
	return o
}

func (o TemplatePieChartSortConfigurationOutput) ToTemplatePieChartSortConfigurationOutputWithContext(ctx context.Context) TemplatePieChartSortConfigurationOutput {
	return o
}

func (o TemplatePieChartSortConfigurationOutput) ToTemplatePieChartSortConfigurationPtrOutput() TemplatePieChartSortConfigurationPtrOutput {
	return o.ToTemplatePieChartSortConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplatePieChartSortConfigurationOutput) ToTemplatePieChartSortConfigurationPtrOutputWithContext(ctx context.Context) TemplatePieChartSortConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplatePieChartSortConfiguration) *TemplatePieChartSortConfiguration {
		return &v
	}).(TemplatePieChartSortConfigurationPtrOutput)
}

// The limit on the number of categories that are displayed in a pie chart.
func (o TemplatePieChartSortConfigurationOutput) CategoryItemsLimit() TemplateItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v TemplatePieChartSortConfiguration) *TemplateItemsLimitConfiguration {
		return v.CategoryItemsLimit
	}).(TemplateItemsLimitConfigurationPtrOutput)
}

// The sort configuration of the category fields.
func (o TemplatePieChartSortConfigurationOutput) CategorySort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v TemplatePieChartSortConfiguration) []TemplateFieldSortOptions { return v.CategorySort }).(TemplateFieldSortOptionsArrayOutput)
}

// The limit on the number of small multiples panels that are displayed.
func (o TemplatePieChartSortConfigurationOutput) SmallMultiplesLimitConfiguration() TemplateItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v TemplatePieChartSortConfiguration) *TemplateItemsLimitConfiguration {
		return v.SmallMultiplesLimitConfiguration
	}).(TemplateItemsLimitConfigurationPtrOutput)
}

// The sort configuration of the small multiples field.
func (o TemplatePieChartSortConfigurationOutput) SmallMultiplesSort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v TemplatePieChartSortConfiguration) []TemplateFieldSortOptions { return v.SmallMultiplesSort }).(TemplateFieldSortOptionsArrayOutput)
}

type TemplatePieChartSortConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplatePieChartSortConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePieChartSortConfiguration)(nil)).Elem()
}

func (o TemplatePieChartSortConfigurationPtrOutput) ToTemplatePieChartSortConfigurationPtrOutput() TemplatePieChartSortConfigurationPtrOutput {
	return o
}

func (o TemplatePieChartSortConfigurationPtrOutput) ToTemplatePieChartSortConfigurationPtrOutputWithContext(ctx context.Context) TemplatePieChartSortConfigurationPtrOutput {
	return o
}

func (o TemplatePieChartSortConfigurationPtrOutput) Elem() TemplatePieChartSortConfigurationOutput {
	return o.ApplyT(func(v *TemplatePieChartSortConfiguration) TemplatePieChartSortConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplatePieChartSortConfiguration
		return ret
	}).(TemplatePieChartSortConfigurationOutput)
}

// The limit on the number of categories that are displayed in a pie chart.
func (o TemplatePieChartSortConfigurationPtrOutput) CategoryItemsLimit() TemplateItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplatePieChartSortConfiguration) *TemplateItemsLimitConfiguration {
		if v == nil {
			return nil
		}
		return v.CategoryItemsLimit
	}).(TemplateItemsLimitConfigurationPtrOutput)
}

// The sort configuration of the category fields.
func (o TemplatePieChartSortConfigurationPtrOutput) CategorySort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v *TemplatePieChartSortConfiguration) []TemplateFieldSortOptions {
		if v == nil {
			return nil
		}
		return v.CategorySort
	}).(TemplateFieldSortOptionsArrayOutput)
}

// The limit on the number of small multiples panels that are displayed.
func (o TemplatePieChartSortConfigurationPtrOutput) SmallMultiplesLimitConfiguration() TemplateItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplatePieChartSortConfiguration) *TemplateItemsLimitConfiguration {
		if v == nil {
			return nil
		}
		return v.SmallMultiplesLimitConfiguration
	}).(TemplateItemsLimitConfigurationPtrOutput)
}

// The sort configuration of the small multiples field.
func (o TemplatePieChartSortConfigurationPtrOutput) SmallMultiplesSort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v *TemplatePieChartSortConfiguration) []TemplateFieldSortOptions {
		if v == nil {
			return nil
		}
		return v.SmallMultiplesSort
	}).(TemplateFieldSortOptionsArrayOutput)
}

type TemplatePieChartVisual struct {
	// The list of custom actions that are configured for a visual.
	Actions []TemplateVisualCustomAction `pulumi:"actions"`
	// The configuration of a pie chart.
	ChartConfiguration *TemplatePieChartConfiguration `pulumi:"chartConfiguration"`
	// The column hierarchy that is used during drill-downs and drill-ups.
	ColumnHierarchies []TemplateColumnHierarchy `pulumi:"columnHierarchies"`
	// The subtitle that is displayed on the visual.
	Subtitle *TemplateVisualSubtitleLabelOptions `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title *TemplateVisualTitleLabelOptions `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText *string `pulumi:"visualContentAltText"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
	VisualId string `pulumi:"visualId"`
}

// TemplatePieChartVisualInput is an input type that accepts TemplatePieChartVisualArgs and TemplatePieChartVisualOutput values.
// You can construct a concrete instance of `TemplatePieChartVisualInput` via:
//
//	TemplatePieChartVisualArgs{...}
type TemplatePieChartVisualInput interface {
	pulumi.Input

	ToTemplatePieChartVisualOutput() TemplatePieChartVisualOutput
	ToTemplatePieChartVisualOutputWithContext(context.Context) TemplatePieChartVisualOutput
}

type TemplatePieChartVisualArgs struct {
	// The list of custom actions that are configured for a visual.
	Actions TemplateVisualCustomActionArrayInput `pulumi:"actions"`
	// The configuration of a pie chart.
	ChartConfiguration TemplatePieChartConfigurationPtrInput `pulumi:"chartConfiguration"`
	// The column hierarchy that is used during drill-downs and drill-ups.
	ColumnHierarchies TemplateColumnHierarchyArrayInput `pulumi:"columnHierarchies"`
	// The subtitle that is displayed on the visual.
	Subtitle TemplateVisualSubtitleLabelOptionsPtrInput `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title TemplateVisualTitleLabelOptionsPtrInput `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText pulumi.StringPtrInput `pulumi:"visualContentAltText"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
	VisualId pulumi.StringInput `pulumi:"visualId"`
}

func (TemplatePieChartVisualArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePieChartVisual)(nil)).Elem()
}

func (i TemplatePieChartVisualArgs) ToTemplatePieChartVisualOutput() TemplatePieChartVisualOutput {
	return i.ToTemplatePieChartVisualOutputWithContext(context.Background())
}

func (i TemplatePieChartVisualArgs) ToTemplatePieChartVisualOutputWithContext(ctx context.Context) TemplatePieChartVisualOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePieChartVisualOutput)
}

func (i TemplatePieChartVisualArgs) ToTemplatePieChartVisualPtrOutput() TemplatePieChartVisualPtrOutput {
	return i.ToTemplatePieChartVisualPtrOutputWithContext(context.Background())
}

func (i TemplatePieChartVisualArgs) ToTemplatePieChartVisualPtrOutputWithContext(ctx context.Context) TemplatePieChartVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePieChartVisualOutput).ToTemplatePieChartVisualPtrOutputWithContext(ctx)
}

// TemplatePieChartVisualPtrInput is an input type that accepts TemplatePieChartVisualArgs, TemplatePieChartVisualPtr and TemplatePieChartVisualPtrOutput values.
// You can construct a concrete instance of `TemplatePieChartVisualPtrInput` via:
//
//	        TemplatePieChartVisualArgs{...}
//
//	or:
//
//	        nil
type TemplatePieChartVisualPtrInput interface {
	pulumi.Input

	ToTemplatePieChartVisualPtrOutput() TemplatePieChartVisualPtrOutput
	ToTemplatePieChartVisualPtrOutputWithContext(context.Context) TemplatePieChartVisualPtrOutput
}

type templatePieChartVisualPtrType TemplatePieChartVisualArgs

func TemplatePieChartVisualPtr(v *TemplatePieChartVisualArgs) TemplatePieChartVisualPtrInput {
	return (*templatePieChartVisualPtrType)(v)
}

func (*templatePieChartVisualPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePieChartVisual)(nil)).Elem()
}

func (i *templatePieChartVisualPtrType) ToTemplatePieChartVisualPtrOutput() TemplatePieChartVisualPtrOutput {
	return i.ToTemplatePieChartVisualPtrOutputWithContext(context.Background())
}

func (i *templatePieChartVisualPtrType) ToTemplatePieChartVisualPtrOutputWithContext(ctx context.Context) TemplatePieChartVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePieChartVisualPtrOutput)
}

type TemplatePieChartVisualOutput struct{ *pulumi.OutputState }

func (TemplatePieChartVisualOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePieChartVisual)(nil)).Elem()
}

func (o TemplatePieChartVisualOutput) ToTemplatePieChartVisualOutput() TemplatePieChartVisualOutput {
	return o
}

func (o TemplatePieChartVisualOutput) ToTemplatePieChartVisualOutputWithContext(ctx context.Context) TemplatePieChartVisualOutput {
	return o
}

func (o TemplatePieChartVisualOutput) ToTemplatePieChartVisualPtrOutput() TemplatePieChartVisualPtrOutput {
	return o.ToTemplatePieChartVisualPtrOutputWithContext(context.Background())
}

func (o TemplatePieChartVisualOutput) ToTemplatePieChartVisualPtrOutputWithContext(ctx context.Context) TemplatePieChartVisualPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplatePieChartVisual) *TemplatePieChartVisual {
		return &v
	}).(TemplatePieChartVisualPtrOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplatePieChartVisualOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v TemplatePieChartVisual) []TemplateVisualCustomAction { return v.Actions }).(TemplateVisualCustomActionArrayOutput)
}

// The configuration of a pie chart.
func (o TemplatePieChartVisualOutput) ChartConfiguration() TemplatePieChartConfigurationPtrOutput {
	return o.ApplyT(func(v TemplatePieChartVisual) *TemplatePieChartConfiguration { return v.ChartConfiguration }).(TemplatePieChartConfigurationPtrOutput)
}

// The column hierarchy that is used during drill-downs and drill-ups.
func (o TemplatePieChartVisualOutput) ColumnHierarchies() TemplateColumnHierarchyArrayOutput {
	return o.ApplyT(func(v TemplatePieChartVisual) []TemplateColumnHierarchy { return v.ColumnHierarchies }).(TemplateColumnHierarchyArrayOutput)
}

// The subtitle that is displayed on the visual.
func (o TemplatePieChartVisualOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplatePieChartVisual) *TemplateVisualSubtitleLabelOptions { return v.Subtitle }).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o TemplatePieChartVisualOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplatePieChartVisual) *TemplateVisualTitleLabelOptions { return v.Title }).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o TemplatePieChartVisualOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplatePieChartVisual) *string { return v.VisualContentAltText }).(pulumi.StringPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
func (o TemplatePieChartVisualOutput) VisualId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplatePieChartVisual) string { return v.VisualId }).(pulumi.StringOutput)
}

type TemplatePieChartVisualPtrOutput struct{ *pulumi.OutputState }

func (TemplatePieChartVisualPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePieChartVisual)(nil)).Elem()
}

func (o TemplatePieChartVisualPtrOutput) ToTemplatePieChartVisualPtrOutput() TemplatePieChartVisualPtrOutput {
	return o
}

func (o TemplatePieChartVisualPtrOutput) ToTemplatePieChartVisualPtrOutputWithContext(ctx context.Context) TemplatePieChartVisualPtrOutput {
	return o
}

func (o TemplatePieChartVisualPtrOutput) Elem() TemplatePieChartVisualOutput {
	return o.ApplyT(func(v *TemplatePieChartVisual) TemplatePieChartVisual {
		if v != nil {
			return *v
		}
		var ret TemplatePieChartVisual
		return ret
	}).(TemplatePieChartVisualOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplatePieChartVisualPtrOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v *TemplatePieChartVisual) []TemplateVisualCustomAction {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(TemplateVisualCustomActionArrayOutput)
}

// The configuration of a pie chart.
func (o TemplatePieChartVisualPtrOutput) ChartConfiguration() TemplatePieChartConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplatePieChartVisual) *TemplatePieChartConfiguration {
		if v == nil {
			return nil
		}
		return v.ChartConfiguration
	}).(TemplatePieChartConfigurationPtrOutput)
}

// The column hierarchy that is used during drill-downs and drill-ups.
func (o TemplatePieChartVisualPtrOutput) ColumnHierarchies() TemplateColumnHierarchyArrayOutput {
	return o.ApplyT(func(v *TemplatePieChartVisual) []TemplateColumnHierarchy {
		if v == nil {
			return nil
		}
		return v.ColumnHierarchies
	}).(TemplateColumnHierarchyArrayOutput)
}

// The subtitle that is displayed on the visual.
func (o TemplatePieChartVisualPtrOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplatePieChartVisual) *TemplateVisualSubtitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Subtitle
	}).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o TemplatePieChartVisualPtrOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplatePieChartVisual) *TemplateVisualTitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Title
	}).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o TemplatePieChartVisualPtrOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplatePieChartVisual) *string {
		if v == nil {
			return nil
		}
		return v.VisualContentAltText
	}).(pulumi.StringPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
func (o TemplatePieChartVisualPtrOutput) VisualId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplatePieChartVisual) *string {
		if v == nil {
			return nil
		}
		return &v.VisualId
	}).(pulumi.StringPtrOutput)
}

type TemplatePivotFieldSortOptions struct {
	// The field ID for the field sort options.
	FieldId string `pulumi:"fieldId"`
	// The sort by field for the field sort options.
	SortBy TemplatePivotTableSortBy `pulumi:"sortBy"`
}

// TemplatePivotFieldSortOptionsInput is an input type that accepts TemplatePivotFieldSortOptionsArgs and TemplatePivotFieldSortOptionsOutput values.
// You can construct a concrete instance of `TemplatePivotFieldSortOptionsInput` via:
//
//	TemplatePivotFieldSortOptionsArgs{...}
type TemplatePivotFieldSortOptionsInput interface {
	pulumi.Input

	ToTemplatePivotFieldSortOptionsOutput() TemplatePivotFieldSortOptionsOutput
	ToTemplatePivotFieldSortOptionsOutputWithContext(context.Context) TemplatePivotFieldSortOptionsOutput
}

type TemplatePivotFieldSortOptionsArgs struct {
	// The field ID for the field sort options.
	FieldId pulumi.StringInput `pulumi:"fieldId"`
	// The sort by field for the field sort options.
	SortBy TemplatePivotTableSortByInput `pulumi:"sortBy"`
}

func (TemplatePivotFieldSortOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePivotFieldSortOptions)(nil)).Elem()
}

func (i TemplatePivotFieldSortOptionsArgs) ToTemplatePivotFieldSortOptionsOutput() TemplatePivotFieldSortOptionsOutput {
	return i.ToTemplatePivotFieldSortOptionsOutputWithContext(context.Background())
}

func (i TemplatePivotFieldSortOptionsArgs) ToTemplatePivotFieldSortOptionsOutputWithContext(ctx context.Context) TemplatePivotFieldSortOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotFieldSortOptionsOutput)
}

// TemplatePivotFieldSortOptionsArrayInput is an input type that accepts TemplatePivotFieldSortOptionsArray and TemplatePivotFieldSortOptionsArrayOutput values.
// You can construct a concrete instance of `TemplatePivotFieldSortOptionsArrayInput` via:
//
//	TemplatePivotFieldSortOptionsArray{ TemplatePivotFieldSortOptionsArgs{...} }
type TemplatePivotFieldSortOptionsArrayInput interface {
	pulumi.Input

	ToTemplatePivotFieldSortOptionsArrayOutput() TemplatePivotFieldSortOptionsArrayOutput
	ToTemplatePivotFieldSortOptionsArrayOutputWithContext(context.Context) TemplatePivotFieldSortOptionsArrayOutput
}

type TemplatePivotFieldSortOptionsArray []TemplatePivotFieldSortOptionsInput

func (TemplatePivotFieldSortOptionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplatePivotFieldSortOptions)(nil)).Elem()
}

func (i TemplatePivotFieldSortOptionsArray) ToTemplatePivotFieldSortOptionsArrayOutput() TemplatePivotFieldSortOptionsArrayOutput {
	return i.ToTemplatePivotFieldSortOptionsArrayOutputWithContext(context.Background())
}

func (i TemplatePivotFieldSortOptionsArray) ToTemplatePivotFieldSortOptionsArrayOutputWithContext(ctx context.Context) TemplatePivotFieldSortOptionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotFieldSortOptionsArrayOutput)
}

type TemplatePivotFieldSortOptionsOutput struct{ *pulumi.OutputState }

func (TemplatePivotFieldSortOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePivotFieldSortOptions)(nil)).Elem()
}

func (o TemplatePivotFieldSortOptionsOutput) ToTemplatePivotFieldSortOptionsOutput() TemplatePivotFieldSortOptionsOutput {
	return o
}

func (o TemplatePivotFieldSortOptionsOutput) ToTemplatePivotFieldSortOptionsOutputWithContext(ctx context.Context) TemplatePivotFieldSortOptionsOutput {
	return o
}

// The field ID for the field sort options.
func (o TemplatePivotFieldSortOptionsOutput) FieldId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplatePivotFieldSortOptions) string { return v.FieldId }).(pulumi.StringOutput)
}

// The sort by field for the field sort options.
func (o TemplatePivotFieldSortOptionsOutput) SortBy() TemplatePivotTableSortByOutput {
	return o.ApplyT(func(v TemplatePivotFieldSortOptions) TemplatePivotTableSortBy { return v.SortBy }).(TemplatePivotTableSortByOutput)
}

type TemplatePivotFieldSortOptionsArrayOutput struct{ *pulumi.OutputState }

func (TemplatePivotFieldSortOptionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplatePivotFieldSortOptions)(nil)).Elem()
}

func (o TemplatePivotFieldSortOptionsArrayOutput) ToTemplatePivotFieldSortOptionsArrayOutput() TemplatePivotFieldSortOptionsArrayOutput {
	return o
}

func (o TemplatePivotFieldSortOptionsArrayOutput) ToTemplatePivotFieldSortOptionsArrayOutputWithContext(ctx context.Context) TemplatePivotFieldSortOptionsArrayOutput {
	return o
}

func (o TemplatePivotFieldSortOptionsArrayOutput) Index(i pulumi.IntInput) TemplatePivotFieldSortOptionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplatePivotFieldSortOptions {
		return vs[0].([]TemplatePivotFieldSortOptions)[vs[1].(int)]
	}).(TemplatePivotFieldSortOptionsOutput)
}

type TemplatePivotTableAggregatedFieldWells struct {
	// The columns field well for a pivot table. Values are grouped by columns fields.
	Columns []TemplateDimensionField `pulumi:"columns"`
	// The rows field well for a pivot table. Values are grouped by rows fields.
	Rows []TemplateDimensionField `pulumi:"rows"`
	// The values field well for a pivot table. Values are aggregated based on rows and columns fields.
	Values []TemplateMeasureField `pulumi:"values"`
}

// TemplatePivotTableAggregatedFieldWellsInput is an input type that accepts TemplatePivotTableAggregatedFieldWellsArgs and TemplatePivotTableAggregatedFieldWellsOutput values.
// You can construct a concrete instance of `TemplatePivotTableAggregatedFieldWellsInput` via:
//
//	TemplatePivotTableAggregatedFieldWellsArgs{...}
type TemplatePivotTableAggregatedFieldWellsInput interface {
	pulumi.Input

	ToTemplatePivotTableAggregatedFieldWellsOutput() TemplatePivotTableAggregatedFieldWellsOutput
	ToTemplatePivotTableAggregatedFieldWellsOutputWithContext(context.Context) TemplatePivotTableAggregatedFieldWellsOutput
}

type TemplatePivotTableAggregatedFieldWellsArgs struct {
	// The columns field well for a pivot table. Values are grouped by columns fields.
	Columns TemplateDimensionFieldArrayInput `pulumi:"columns"`
	// The rows field well for a pivot table. Values are grouped by rows fields.
	Rows TemplateDimensionFieldArrayInput `pulumi:"rows"`
	// The values field well for a pivot table. Values are aggregated based on rows and columns fields.
	Values TemplateMeasureFieldArrayInput `pulumi:"values"`
}

func (TemplatePivotTableAggregatedFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePivotTableAggregatedFieldWells)(nil)).Elem()
}

func (i TemplatePivotTableAggregatedFieldWellsArgs) ToTemplatePivotTableAggregatedFieldWellsOutput() TemplatePivotTableAggregatedFieldWellsOutput {
	return i.ToTemplatePivotTableAggregatedFieldWellsOutputWithContext(context.Background())
}

func (i TemplatePivotTableAggregatedFieldWellsArgs) ToTemplatePivotTableAggregatedFieldWellsOutputWithContext(ctx context.Context) TemplatePivotTableAggregatedFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTableAggregatedFieldWellsOutput)
}

func (i TemplatePivotTableAggregatedFieldWellsArgs) ToTemplatePivotTableAggregatedFieldWellsPtrOutput() TemplatePivotTableAggregatedFieldWellsPtrOutput {
	return i.ToTemplatePivotTableAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i TemplatePivotTableAggregatedFieldWellsArgs) ToTemplatePivotTableAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplatePivotTableAggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTableAggregatedFieldWellsOutput).ToTemplatePivotTableAggregatedFieldWellsPtrOutputWithContext(ctx)
}

// TemplatePivotTableAggregatedFieldWellsPtrInput is an input type that accepts TemplatePivotTableAggregatedFieldWellsArgs, TemplatePivotTableAggregatedFieldWellsPtr and TemplatePivotTableAggregatedFieldWellsPtrOutput values.
// You can construct a concrete instance of `TemplatePivotTableAggregatedFieldWellsPtrInput` via:
//
//	        TemplatePivotTableAggregatedFieldWellsArgs{...}
//
//	or:
//
//	        nil
type TemplatePivotTableAggregatedFieldWellsPtrInput interface {
	pulumi.Input

	ToTemplatePivotTableAggregatedFieldWellsPtrOutput() TemplatePivotTableAggregatedFieldWellsPtrOutput
	ToTemplatePivotTableAggregatedFieldWellsPtrOutputWithContext(context.Context) TemplatePivotTableAggregatedFieldWellsPtrOutput
}

type templatePivotTableAggregatedFieldWellsPtrType TemplatePivotTableAggregatedFieldWellsArgs

func TemplatePivotTableAggregatedFieldWellsPtr(v *TemplatePivotTableAggregatedFieldWellsArgs) TemplatePivotTableAggregatedFieldWellsPtrInput {
	return (*templatePivotTableAggregatedFieldWellsPtrType)(v)
}

func (*templatePivotTableAggregatedFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePivotTableAggregatedFieldWells)(nil)).Elem()
}

func (i *templatePivotTableAggregatedFieldWellsPtrType) ToTemplatePivotTableAggregatedFieldWellsPtrOutput() TemplatePivotTableAggregatedFieldWellsPtrOutput {
	return i.ToTemplatePivotTableAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i *templatePivotTableAggregatedFieldWellsPtrType) ToTemplatePivotTableAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplatePivotTableAggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTableAggregatedFieldWellsPtrOutput)
}

type TemplatePivotTableAggregatedFieldWellsOutput struct{ *pulumi.OutputState }

func (TemplatePivotTableAggregatedFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePivotTableAggregatedFieldWells)(nil)).Elem()
}

func (o TemplatePivotTableAggregatedFieldWellsOutput) ToTemplatePivotTableAggregatedFieldWellsOutput() TemplatePivotTableAggregatedFieldWellsOutput {
	return o
}

func (o TemplatePivotTableAggregatedFieldWellsOutput) ToTemplatePivotTableAggregatedFieldWellsOutputWithContext(ctx context.Context) TemplatePivotTableAggregatedFieldWellsOutput {
	return o
}

func (o TemplatePivotTableAggregatedFieldWellsOutput) ToTemplatePivotTableAggregatedFieldWellsPtrOutput() TemplatePivotTableAggregatedFieldWellsPtrOutput {
	return o.ToTemplatePivotTableAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (o TemplatePivotTableAggregatedFieldWellsOutput) ToTemplatePivotTableAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplatePivotTableAggregatedFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplatePivotTableAggregatedFieldWells) *TemplatePivotTableAggregatedFieldWells {
		return &v
	}).(TemplatePivotTableAggregatedFieldWellsPtrOutput)
}

// The columns field well for a pivot table. Values are grouped by columns fields.
func (o TemplatePivotTableAggregatedFieldWellsOutput) Columns() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v TemplatePivotTableAggregatedFieldWells) []TemplateDimensionField { return v.Columns }).(TemplateDimensionFieldArrayOutput)
}

// The rows field well for a pivot table. Values are grouped by rows fields.
func (o TemplatePivotTableAggregatedFieldWellsOutput) Rows() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v TemplatePivotTableAggregatedFieldWells) []TemplateDimensionField { return v.Rows }).(TemplateDimensionFieldArrayOutput)
}

// The values field well for a pivot table. Values are aggregated based on rows and columns fields.
func (o TemplatePivotTableAggregatedFieldWellsOutput) Values() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v TemplatePivotTableAggregatedFieldWells) []TemplateMeasureField { return v.Values }).(TemplateMeasureFieldArrayOutput)
}

type TemplatePivotTableAggregatedFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (TemplatePivotTableAggregatedFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePivotTableAggregatedFieldWells)(nil)).Elem()
}

func (o TemplatePivotTableAggregatedFieldWellsPtrOutput) ToTemplatePivotTableAggregatedFieldWellsPtrOutput() TemplatePivotTableAggregatedFieldWellsPtrOutput {
	return o
}

func (o TemplatePivotTableAggregatedFieldWellsPtrOutput) ToTemplatePivotTableAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplatePivotTableAggregatedFieldWellsPtrOutput {
	return o
}

func (o TemplatePivotTableAggregatedFieldWellsPtrOutput) Elem() TemplatePivotTableAggregatedFieldWellsOutput {
	return o.ApplyT(func(v *TemplatePivotTableAggregatedFieldWells) TemplatePivotTableAggregatedFieldWells {
		if v != nil {
			return *v
		}
		var ret TemplatePivotTableAggregatedFieldWells
		return ret
	}).(TemplatePivotTableAggregatedFieldWellsOutput)
}

// The columns field well for a pivot table. Values are grouped by columns fields.
func (o TemplatePivotTableAggregatedFieldWellsPtrOutput) Columns() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v *TemplatePivotTableAggregatedFieldWells) []TemplateDimensionField {
		if v == nil {
			return nil
		}
		return v.Columns
	}).(TemplateDimensionFieldArrayOutput)
}

// The rows field well for a pivot table. Values are grouped by rows fields.
func (o TemplatePivotTableAggregatedFieldWellsPtrOutput) Rows() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v *TemplatePivotTableAggregatedFieldWells) []TemplateDimensionField {
		if v == nil {
			return nil
		}
		return v.Rows
	}).(TemplateDimensionFieldArrayOutput)
}

// The values field well for a pivot table. Values are aggregated based on rows and columns fields.
func (o TemplatePivotTableAggregatedFieldWellsPtrOutput) Values() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v *TemplatePivotTableAggregatedFieldWells) []TemplateMeasureField {
		if v == nil {
			return nil
		}
		return v.Values
	}).(TemplateMeasureFieldArrayOutput)
}

type TemplatePivotTableCellConditionalFormatting struct {
	// The field ID of the cell for conditional formatting.
	FieldId string `pulumi:"fieldId"`
	// The scope of the cell for conditional formatting.
	Scope *TemplatePivotTableConditionalFormattingScope `pulumi:"scope"`
	// A list of cell scopes for conditional formatting.
	Scopes []TemplatePivotTableConditionalFormattingScope `pulumi:"scopes"`
	// The text format of the cell for conditional formatting.
	TextFormat *TemplateTextConditionalFormat `pulumi:"textFormat"`
}

// TemplatePivotTableCellConditionalFormattingInput is an input type that accepts TemplatePivotTableCellConditionalFormattingArgs and TemplatePivotTableCellConditionalFormattingOutput values.
// You can construct a concrete instance of `TemplatePivotTableCellConditionalFormattingInput` via:
//
//	TemplatePivotTableCellConditionalFormattingArgs{...}
type TemplatePivotTableCellConditionalFormattingInput interface {
	pulumi.Input

	ToTemplatePivotTableCellConditionalFormattingOutput() TemplatePivotTableCellConditionalFormattingOutput
	ToTemplatePivotTableCellConditionalFormattingOutputWithContext(context.Context) TemplatePivotTableCellConditionalFormattingOutput
}

type TemplatePivotTableCellConditionalFormattingArgs struct {
	// The field ID of the cell for conditional formatting.
	FieldId pulumi.StringInput `pulumi:"fieldId"`
	// The scope of the cell for conditional formatting.
	Scope TemplatePivotTableConditionalFormattingScopePtrInput `pulumi:"scope"`
	// A list of cell scopes for conditional formatting.
	Scopes TemplatePivotTableConditionalFormattingScopeArrayInput `pulumi:"scopes"`
	// The text format of the cell for conditional formatting.
	TextFormat TemplateTextConditionalFormatPtrInput `pulumi:"textFormat"`
}

func (TemplatePivotTableCellConditionalFormattingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePivotTableCellConditionalFormatting)(nil)).Elem()
}

func (i TemplatePivotTableCellConditionalFormattingArgs) ToTemplatePivotTableCellConditionalFormattingOutput() TemplatePivotTableCellConditionalFormattingOutput {
	return i.ToTemplatePivotTableCellConditionalFormattingOutputWithContext(context.Background())
}

func (i TemplatePivotTableCellConditionalFormattingArgs) ToTemplatePivotTableCellConditionalFormattingOutputWithContext(ctx context.Context) TemplatePivotTableCellConditionalFormattingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTableCellConditionalFormattingOutput)
}

func (i TemplatePivotTableCellConditionalFormattingArgs) ToTemplatePivotTableCellConditionalFormattingPtrOutput() TemplatePivotTableCellConditionalFormattingPtrOutput {
	return i.ToTemplatePivotTableCellConditionalFormattingPtrOutputWithContext(context.Background())
}

func (i TemplatePivotTableCellConditionalFormattingArgs) ToTemplatePivotTableCellConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplatePivotTableCellConditionalFormattingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTableCellConditionalFormattingOutput).ToTemplatePivotTableCellConditionalFormattingPtrOutputWithContext(ctx)
}

// TemplatePivotTableCellConditionalFormattingPtrInput is an input type that accepts TemplatePivotTableCellConditionalFormattingArgs, TemplatePivotTableCellConditionalFormattingPtr and TemplatePivotTableCellConditionalFormattingPtrOutput values.
// You can construct a concrete instance of `TemplatePivotTableCellConditionalFormattingPtrInput` via:
//
//	        TemplatePivotTableCellConditionalFormattingArgs{...}
//
//	or:
//
//	        nil
type TemplatePivotTableCellConditionalFormattingPtrInput interface {
	pulumi.Input

	ToTemplatePivotTableCellConditionalFormattingPtrOutput() TemplatePivotTableCellConditionalFormattingPtrOutput
	ToTemplatePivotTableCellConditionalFormattingPtrOutputWithContext(context.Context) TemplatePivotTableCellConditionalFormattingPtrOutput
}

type templatePivotTableCellConditionalFormattingPtrType TemplatePivotTableCellConditionalFormattingArgs

func TemplatePivotTableCellConditionalFormattingPtr(v *TemplatePivotTableCellConditionalFormattingArgs) TemplatePivotTableCellConditionalFormattingPtrInput {
	return (*templatePivotTableCellConditionalFormattingPtrType)(v)
}

func (*templatePivotTableCellConditionalFormattingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePivotTableCellConditionalFormatting)(nil)).Elem()
}

func (i *templatePivotTableCellConditionalFormattingPtrType) ToTemplatePivotTableCellConditionalFormattingPtrOutput() TemplatePivotTableCellConditionalFormattingPtrOutput {
	return i.ToTemplatePivotTableCellConditionalFormattingPtrOutputWithContext(context.Background())
}

func (i *templatePivotTableCellConditionalFormattingPtrType) ToTemplatePivotTableCellConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplatePivotTableCellConditionalFormattingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTableCellConditionalFormattingPtrOutput)
}

type TemplatePivotTableCellConditionalFormattingOutput struct{ *pulumi.OutputState }

func (TemplatePivotTableCellConditionalFormattingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePivotTableCellConditionalFormatting)(nil)).Elem()
}

func (o TemplatePivotTableCellConditionalFormattingOutput) ToTemplatePivotTableCellConditionalFormattingOutput() TemplatePivotTableCellConditionalFormattingOutput {
	return o
}

func (o TemplatePivotTableCellConditionalFormattingOutput) ToTemplatePivotTableCellConditionalFormattingOutputWithContext(ctx context.Context) TemplatePivotTableCellConditionalFormattingOutput {
	return o
}

func (o TemplatePivotTableCellConditionalFormattingOutput) ToTemplatePivotTableCellConditionalFormattingPtrOutput() TemplatePivotTableCellConditionalFormattingPtrOutput {
	return o.ToTemplatePivotTableCellConditionalFormattingPtrOutputWithContext(context.Background())
}

func (o TemplatePivotTableCellConditionalFormattingOutput) ToTemplatePivotTableCellConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplatePivotTableCellConditionalFormattingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplatePivotTableCellConditionalFormatting) *TemplatePivotTableCellConditionalFormatting {
		return &v
	}).(TemplatePivotTableCellConditionalFormattingPtrOutput)
}

// The field ID of the cell for conditional formatting.
func (o TemplatePivotTableCellConditionalFormattingOutput) FieldId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplatePivotTableCellConditionalFormatting) string { return v.FieldId }).(pulumi.StringOutput)
}

// The scope of the cell for conditional formatting.
func (o TemplatePivotTableCellConditionalFormattingOutput) Scope() TemplatePivotTableConditionalFormattingScopePtrOutput {
	return o.ApplyT(func(v TemplatePivotTableCellConditionalFormatting) *TemplatePivotTableConditionalFormattingScope {
		return v.Scope
	}).(TemplatePivotTableConditionalFormattingScopePtrOutput)
}

// A list of cell scopes for conditional formatting.
func (o TemplatePivotTableCellConditionalFormattingOutput) Scopes() TemplatePivotTableConditionalFormattingScopeArrayOutput {
	return o.ApplyT(func(v TemplatePivotTableCellConditionalFormatting) []TemplatePivotTableConditionalFormattingScope {
		return v.Scopes
	}).(TemplatePivotTableConditionalFormattingScopeArrayOutput)
}

// The text format of the cell for conditional formatting.
func (o TemplatePivotTableCellConditionalFormattingOutput) TextFormat() TemplateTextConditionalFormatPtrOutput {
	return o.ApplyT(func(v TemplatePivotTableCellConditionalFormatting) *TemplateTextConditionalFormat {
		return v.TextFormat
	}).(TemplateTextConditionalFormatPtrOutput)
}

type TemplatePivotTableCellConditionalFormattingPtrOutput struct{ *pulumi.OutputState }

func (TemplatePivotTableCellConditionalFormattingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePivotTableCellConditionalFormatting)(nil)).Elem()
}

func (o TemplatePivotTableCellConditionalFormattingPtrOutput) ToTemplatePivotTableCellConditionalFormattingPtrOutput() TemplatePivotTableCellConditionalFormattingPtrOutput {
	return o
}

func (o TemplatePivotTableCellConditionalFormattingPtrOutput) ToTemplatePivotTableCellConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplatePivotTableCellConditionalFormattingPtrOutput {
	return o
}

func (o TemplatePivotTableCellConditionalFormattingPtrOutput) Elem() TemplatePivotTableCellConditionalFormattingOutput {
	return o.ApplyT(func(v *TemplatePivotTableCellConditionalFormatting) TemplatePivotTableCellConditionalFormatting {
		if v != nil {
			return *v
		}
		var ret TemplatePivotTableCellConditionalFormatting
		return ret
	}).(TemplatePivotTableCellConditionalFormattingOutput)
}

// The field ID of the cell for conditional formatting.
func (o TemplatePivotTableCellConditionalFormattingPtrOutput) FieldId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplatePivotTableCellConditionalFormatting) *string {
		if v == nil {
			return nil
		}
		return &v.FieldId
	}).(pulumi.StringPtrOutput)
}

// The scope of the cell for conditional formatting.
func (o TemplatePivotTableCellConditionalFormattingPtrOutput) Scope() TemplatePivotTableConditionalFormattingScopePtrOutput {
	return o.ApplyT(func(v *TemplatePivotTableCellConditionalFormatting) *TemplatePivotTableConditionalFormattingScope {
		if v == nil {
			return nil
		}
		return v.Scope
	}).(TemplatePivotTableConditionalFormattingScopePtrOutput)
}

// A list of cell scopes for conditional formatting.
func (o TemplatePivotTableCellConditionalFormattingPtrOutput) Scopes() TemplatePivotTableConditionalFormattingScopeArrayOutput {
	return o.ApplyT(func(v *TemplatePivotTableCellConditionalFormatting) []TemplatePivotTableConditionalFormattingScope {
		if v == nil {
			return nil
		}
		return v.Scopes
	}).(TemplatePivotTableConditionalFormattingScopeArrayOutput)
}

// The text format of the cell for conditional formatting.
func (o TemplatePivotTableCellConditionalFormattingPtrOutput) TextFormat() TemplateTextConditionalFormatPtrOutput {
	return o.ApplyT(func(v *TemplatePivotTableCellConditionalFormatting) *TemplateTextConditionalFormat {
		if v == nil {
			return nil
		}
		return v.TextFormat
	}).(TemplateTextConditionalFormatPtrOutput)
}

type TemplatePivotTableConditionalFormatting struct {
	// Conditional formatting options for a `PivotTableVisual` .
	ConditionalFormattingOptions []TemplatePivotTableConditionalFormattingOption `pulumi:"conditionalFormattingOptions"`
}

// TemplatePivotTableConditionalFormattingInput is an input type that accepts TemplatePivotTableConditionalFormattingArgs and TemplatePivotTableConditionalFormattingOutput values.
// You can construct a concrete instance of `TemplatePivotTableConditionalFormattingInput` via:
//
//	TemplatePivotTableConditionalFormattingArgs{...}
type TemplatePivotTableConditionalFormattingInput interface {
	pulumi.Input

	ToTemplatePivotTableConditionalFormattingOutput() TemplatePivotTableConditionalFormattingOutput
	ToTemplatePivotTableConditionalFormattingOutputWithContext(context.Context) TemplatePivotTableConditionalFormattingOutput
}

type TemplatePivotTableConditionalFormattingArgs struct {
	// Conditional formatting options for a `PivotTableVisual` .
	ConditionalFormattingOptions TemplatePivotTableConditionalFormattingOptionArrayInput `pulumi:"conditionalFormattingOptions"`
}

func (TemplatePivotTableConditionalFormattingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePivotTableConditionalFormatting)(nil)).Elem()
}

func (i TemplatePivotTableConditionalFormattingArgs) ToTemplatePivotTableConditionalFormattingOutput() TemplatePivotTableConditionalFormattingOutput {
	return i.ToTemplatePivotTableConditionalFormattingOutputWithContext(context.Background())
}

func (i TemplatePivotTableConditionalFormattingArgs) ToTemplatePivotTableConditionalFormattingOutputWithContext(ctx context.Context) TemplatePivotTableConditionalFormattingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTableConditionalFormattingOutput)
}

func (i TemplatePivotTableConditionalFormattingArgs) ToTemplatePivotTableConditionalFormattingPtrOutput() TemplatePivotTableConditionalFormattingPtrOutput {
	return i.ToTemplatePivotTableConditionalFormattingPtrOutputWithContext(context.Background())
}

func (i TemplatePivotTableConditionalFormattingArgs) ToTemplatePivotTableConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplatePivotTableConditionalFormattingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTableConditionalFormattingOutput).ToTemplatePivotTableConditionalFormattingPtrOutputWithContext(ctx)
}

// TemplatePivotTableConditionalFormattingPtrInput is an input type that accepts TemplatePivotTableConditionalFormattingArgs, TemplatePivotTableConditionalFormattingPtr and TemplatePivotTableConditionalFormattingPtrOutput values.
// You can construct a concrete instance of `TemplatePivotTableConditionalFormattingPtrInput` via:
//
//	        TemplatePivotTableConditionalFormattingArgs{...}
//
//	or:
//
//	        nil
type TemplatePivotTableConditionalFormattingPtrInput interface {
	pulumi.Input

	ToTemplatePivotTableConditionalFormattingPtrOutput() TemplatePivotTableConditionalFormattingPtrOutput
	ToTemplatePivotTableConditionalFormattingPtrOutputWithContext(context.Context) TemplatePivotTableConditionalFormattingPtrOutput
}

type templatePivotTableConditionalFormattingPtrType TemplatePivotTableConditionalFormattingArgs

func TemplatePivotTableConditionalFormattingPtr(v *TemplatePivotTableConditionalFormattingArgs) TemplatePivotTableConditionalFormattingPtrInput {
	return (*templatePivotTableConditionalFormattingPtrType)(v)
}

func (*templatePivotTableConditionalFormattingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePivotTableConditionalFormatting)(nil)).Elem()
}

func (i *templatePivotTableConditionalFormattingPtrType) ToTemplatePivotTableConditionalFormattingPtrOutput() TemplatePivotTableConditionalFormattingPtrOutput {
	return i.ToTemplatePivotTableConditionalFormattingPtrOutputWithContext(context.Background())
}

func (i *templatePivotTableConditionalFormattingPtrType) ToTemplatePivotTableConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplatePivotTableConditionalFormattingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTableConditionalFormattingPtrOutput)
}

type TemplatePivotTableConditionalFormattingOutput struct{ *pulumi.OutputState }

func (TemplatePivotTableConditionalFormattingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePivotTableConditionalFormatting)(nil)).Elem()
}

func (o TemplatePivotTableConditionalFormattingOutput) ToTemplatePivotTableConditionalFormattingOutput() TemplatePivotTableConditionalFormattingOutput {
	return o
}

func (o TemplatePivotTableConditionalFormattingOutput) ToTemplatePivotTableConditionalFormattingOutputWithContext(ctx context.Context) TemplatePivotTableConditionalFormattingOutput {
	return o
}

func (o TemplatePivotTableConditionalFormattingOutput) ToTemplatePivotTableConditionalFormattingPtrOutput() TemplatePivotTableConditionalFormattingPtrOutput {
	return o.ToTemplatePivotTableConditionalFormattingPtrOutputWithContext(context.Background())
}

func (o TemplatePivotTableConditionalFormattingOutput) ToTemplatePivotTableConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplatePivotTableConditionalFormattingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplatePivotTableConditionalFormatting) *TemplatePivotTableConditionalFormatting {
		return &v
	}).(TemplatePivotTableConditionalFormattingPtrOutput)
}

// Conditional formatting options for a `PivotTableVisual` .
func (o TemplatePivotTableConditionalFormattingOutput) ConditionalFormattingOptions() TemplatePivotTableConditionalFormattingOptionArrayOutput {
	return o.ApplyT(func(v TemplatePivotTableConditionalFormatting) []TemplatePivotTableConditionalFormattingOption {
		return v.ConditionalFormattingOptions
	}).(TemplatePivotTableConditionalFormattingOptionArrayOutput)
}

type TemplatePivotTableConditionalFormattingPtrOutput struct{ *pulumi.OutputState }

func (TemplatePivotTableConditionalFormattingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePivotTableConditionalFormatting)(nil)).Elem()
}

func (o TemplatePivotTableConditionalFormattingPtrOutput) ToTemplatePivotTableConditionalFormattingPtrOutput() TemplatePivotTableConditionalFormattingPtrOutput {
	return o
}

func (o TemplatePivotTableConditionalFormattingPtrOutput) ToTemplatePivotTableConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplatePivotTableConditionalFormattingPtrOutput {
	return o
}

func (o TemplatePivotTableConditionalFormattingPtrOutput) Elem() TemplatePivotTableConditionalFormattingOutput {
	return o.ApplyT(func(v *TemplatePivotTableConditionalFormatting) TemplatePivotTableConditionalFormatting {
		if v != nil {
			return *v
		}
		var ret TemplatePivotTableConditionalFormatting
		return ret
	}).(TemplatePivotTableConditionalFormattingOutput)
}

// Conditional formatting options for a `PivotTableVisual` .
func (o TemplatePivotTableConditionalFormattingPtrOutput) ConditionalFormattingOptions() TemplatePivotTableConditionalFormattingOptionArrayOutput {
	return o.ApplyT(func(v *TemplatePivotTableConditionalFormatting) []TemplatePivotTableConditionalFormattingOption {
		if v == nil {
			return nil
		}
		return v.ConditionalFormattingOptions
	}).(TemplatePivotTableConditionalFormattingOptionArrayOutput)
}

type TemplatePivotTableConditionalFormattingOption struct {
	// The cell conditional formatting option for a pivot table.
	Cell *TemplatePivotTableCellConditionalFormatting `pulumi:"cell"`
}

// TemplatePivotTableConditionalFormattingOptionInput is an input type that accepts TemplatePivotTableConditionalFormattingOptionArgs and TemplatePivotTableConditionalFormattingOptionOutput values.
// You can construct a concrete instance of `TemplatePivotTableConditionalFormattingOptionInput` via:
//
//	TemplatePivotTableConditionalFormattingOptionArgs{...}
type TemplatePivotTableConditionalFormattingOptionInput interface {
	pulumi.Input

	ToTemplatePivotTableConditionalFormattingOptionOutput() TemplatePivotTableConditionalFormattingOptionOutput
	ToTemplatePivotTableConditionalFormattingOptionOutputWithContext(context.Context) TemplatePivotTableConditionalFormattingOptionOutput
}

type TemplatePivotTableConditionalFormattingOptionArgs struct {
	// The cell conditional formatting option for a pivot table.
	Cell TemplatePivotTableCellConditionalFormattingPtrInput `pulumi:"cell"`
}

func (TemplatePivotTableConditionalFormattingOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePivotTableConditionalFormattingOption)(nil)).Elem()
}

func (i TemplatePivotTableConditionalFormattingOptionArgs) ToTemplatePivotTableConditionalFormattingOptionOutput() TemplatePivotTableConditionalFormattingOptionOutput {
	return i.ToTemplatePivotTableConditionalFormattingOptionOutputWithContext(context.Background())
}

func (i TemplatePivotTableConditionalFormattingOptionArgs) ToTemplatePivotTableConditionalFormattingOptionOutputWithContext(ctx context.Context) TemplatePivotTableConditionalFormattingOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTableConditionalFormattingOptionOutput)
}

// TemplatePivotTableConditionalFormattingOptionArrayInput is an input type that accepts TemplatePivotTableConditionalFormattingOptionArray and TemplatePivotTableConditionalFormattingOptionArrayOutput values.
// You can construct a concrete instance of `TemplatePivotTableConditionalFormattingOptionArrayInput` via:
//
//	TemplatePivotTableConditionalFormattingOptionArray{ TemplatePivotTableConditionalFormattingOptionArgs{...} }
type TemplatePivotTableConditionalFormattingOptionArrayInput interface {
	pulumi.Input

	ToTemplatePivotTableConditionalFormattingOptionArrayOutput() TemplatePivotTableConditionalFormattingOptionArrayOutput
	ToTemplatePivotTableConditionalFormattingOptionArrayOutputWithContext(context.Context) TemplatePivotTableConditionalFormattingOptionArrayOutput
}

type TemplatePivotTableConditionalFormattingOptionArray []TemplatePivotTableConditionalFormattingOptionInput

func (TemplatePivotTableConditionalFormattingOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplatePivotTableConditionalFormattingOption)(nil)).Elem()
}

func (i TemplatePivotTableConditionalFormattingOptionArray) ToTemplatePivotTableConditionalFormattingOptionArrayOutput() TemplatePivotTableConditionalFormattingOptionArrayOutput {
	return i.ToTemplatePivotTableConditionalFormattingOptionArrayOutputWithContext(context.Background())
}

func (i TemplatePivotTableConditionalFormattingOptionArray) ToTemplatePivotTableConditionalFormattingOptionArrayOutputWithContext(ctx context.Context) TemplatePivotTableConditionalFormattingOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTableConditionalFormattingOptionArrayOutput)
}

type TemplatePivotTableConditionalFormattingOptionOutput struct{ *pulumi.OutputState }

func (TemplatePivotTableConditionalFormattingOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePivotTableConditionalFormattingOption)(nil)).Elem()
}

func (o TemplatePivotTableConditionalFormattingOptionOutput) ToTemplatePivotTableConditionalFormattingOptionOutput() TemplatePivotTableConditionalFormattingOptionOutput {
	return o
}

func (o TemplatePivotTableConditionalFormattingOptionOutput) ToTemplatePivotTableConditionalFormattingOptionOutputWithContext(ctx context.Context) TemplatePivotTableConditionalFormattingOptionOutput {
	return o
}

// The cell conditional formatting option for a pivot table.
func (o TemplatePivotTableConditionalFormattingOptionOutput) Cell() TemplatePivotTableCellConditionalFormattingPtrOutput {
	return o.ApplyT(func(v TemplatePivotTableConditionalFormattingOption) *TemplatePivotTableCellConditionalFormatting {
		return v.Cell
	}).(TemplatePivotTableCellConditionalFormattingPtrOutput)
}

type TemplatePivotTableConditionalFormattingOptionArrayOutput struct{ *pulumi.OutputState }

func (TemplatePivotTableConditionalFormattingOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplatePivotTableConditionalFormattingOption)(nil)).Elem()
}

func (o TemplatePivotTableConditionalFormattingOptionArrayOutput) ToTemplatePivotTableConditionalFormattingOptionArrayOutput() TemplatePivotTableConditionalFormattingOptionArrayOutput {
	return o
}

func (o TemplatePivotTableConditionalFormattingOptionArrayOutput) ToTemplatePivotTableConditionalFormattingOptionArrayOutputWithContext(ctx context.Context) TemplatePivotTableConditionalFormattingOptionArrayOutput {
	return o
}

func (o TemplatePivotTableConditionalFormattingOptionArrayOutput) Index(i pulumi.IntInput) TemplatePivotTableConditionalFormattingOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplatePivotTableConditionalFormattingOption {
		return vs[0].([]TemplatePivotTableConditionalFormattingOption)[vs[1].(int)]
	}).(TemplatePivotTableConditionalFormattingOptionOutput)
}

type TemplatePivotTableConditionalFormattingScope struct {
	// The role (field, field total, grand total) of the cell for conditional formatting.
	Role *TemplatePivotTableConditionalFormattingScopeRole `pulumi:"role"`
}

// TemplatePivotTableConditionalFormattingScopeInput is an input type that accepts TemplatePivotTableConditionalFormattingScopeArgs and TemplatePivotTableConditionalFormattingScopeOutput values.
// You can construct a concrete instance of `TemplatePivotTableConditionalFormattingScopeInput` via:
//
//	TemplatePivotTableConditionalFormattingScopeArgs{...}
type TemplatePivotTableConditionalFormattingScopeInput interface {
	pulumi.Input

	ToTemplatePivotTableConditionalFormattingScopeOutput() TemplatePivotTableConditionalFormattingScopeOutput
	ToTemplatePivotTableConditionalFormattingScopeOutputWithContext(context.Context) TemplatePivotTableConditionalFormattingScopeOutput
}

type TemplatePivotTableConditionalFormattingScopeArgs struct {
	// The role (field, field total, grand total) of the cell for conditional formatting.
	Role TemplatePivotTableConditionalFormattingScopeRolePtrInput `pulumi:"role"`
}

func (TemplatePivotTableConditionalFormattingScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePivotTableConditionalFormattingScope)(nil)).Elem()
}

func (i TemplatePivotTableConditionalFormattingScopeArgs) ToTemplatePivotTableConditionalFormattingScopeOutput() TemplatePivotTableConditionalFormattingScopeOutput {
	return i.ToTemplatePivotTableConditionalFormattingScopeOutputWithContext(context.Background())
}

func (i TemplatePivotTableConditionalFormattingScopeArgs) ToTemplatePivotTableConditionalFormattingScopeOutputWithContext(ctx context.Context) TemplatePivotTableConditionalFormattingScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTableConditionalFormattingScopeOutput)
}

func (i TemplatePivotTableConditionalFormattingScopeArgs) ToTemplatePivotTableConditionalFormattingScopePtrOutput() TemplatePivotTableConditionalFormattingScopePtrOutput {
	return i.ToTemplatePivotTableConditionalFormattingScopePtrOutputWithContext(context.Background())
}

func (i TemplatePivotTableConditionalFormattingScopeArgs) ToTemplatePivotTableConditionalFormattingScopePtrOutputWithContext(ctx context.Context) TemplatePivotTableConditionalFormattingScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTableConditionalFormattingScopeOutput).ToTemplatePivotTableConditionalFormattingScopePtrOutputWithContext(ctx)
}

// TemplatePivotTableConditionalFormattingScopePtrInput is an input type that accepts TemplatePivotTableConditionalFormattingScopeArgs, TemplatePivotTableConditionalFormattingScopePtr and TemplatePivotTableConditionalFormattingScopePtrOutput values.
// You can construct a concrete instance of `TemplatePivotTableConditionalFormattingScopePtrInput` via:
//
//	        TemplatePivotTableConditionalFormattingScopeArgs{...}
//
//	or:
//
//	        nil
type TemplatePivotTableConditionalFormattingScopePtrInput interface {
	pulumi.Input

	ToTemplatePivotTableConditionalFormattingScopePtrOutput() TemplatePivotTableConditionalFormattingScopePtrOutput
	ToTemplatePivotTableConditionalFormattingScopePtrOutputWithContext(context.Context) TemplatePivotTableConditionalFormattingScopePtrOutput
}

type templatePivotTableConditionalFormattingScopePtrType TemplatePivotTableConditionalFormattingScopeArgs

func TemplatePivotTableConditionalFormattingScopePtr(v *TemplatePivotTableConditionalFormattingScopeArgs) TemplatePivotTableConditionalFormattingScopePtrInput {
	return (*templatePivotTableConditionalFormattingScopePtrType)(v)
}

func (*templatePivotTableConditionalFormattingScopePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePivotTableConditionalFormattingScope)(nil)).Elem()
}

func (i *templatePivotTableConditionalFormattingScopePtrType) ToTemplatePivotTableConditionalFormattingScopePtrOutput() TemplatePivotTableConditionalFormattingScopePtrOutput {
	return i.ToTemplatePivotTableConditionalFormattingScopePtrOutputWithContext(context.Background())
}

func (i *templatePivotTableConditionalFormattingScopePtrType) ToTemplatePivotTableConditionalFormattingScopePtrOutputWithContext(ctx context.Context) TemplatePivotTableConditionalFormattingScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTableConditionalFormattingScopePtrOutput)
}

// TemplatePivotTableConditionalFormattingScopeArrayInput is an input type that accepts TemplatePivotTableConditionalFormattingScopeArray and TemplatePivotTableConditionalFormattingScopeArrayOutput values.
// You can construct a concrete instance of `TemplatePivotTableConditionalFormattingScopeArrayInput` via:
//
//	TemplatePivotTableConditionalFormattingScopeArray{ TemplatePivotTableConditionalFormattingScopeArgs{...} }
type TemplatePivotTableConditionalFormattingScopeArrayInput interface {
	pulumi.Input

	ToTemplatePivotTableConditionalFormattingScopeArrayOutput() TemplatePivotTableConditionalFormattingScopeArrayOutput
	ToTemplatePivotTableConditionalFormattingScopeArrayOutputWithContext(context.Context) TemplatePivotTableConditionalFormattingScopeArrayOutput
}

type TemplatePivotTableConditionalFormattingScopeArray []TemplatePivotTableConditionalFormattingScopeInput

func (TemplatePivotTableConditionalFormattingScopeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplatePivotTableConditionalFormattingScope)(nil)).Elem()
}

func (i TemplatePivotTableConditionalFormattingScopeArray) ToTemplatePivotTableConditionalFormattingScopeArrayOutput() TemplatePivotTableConditionalFormattingScopeArrayOutput {
	return i.ToTemplatePivotTableConditionalFormattingScopeArrayOutputWithContext(context.Background())
}

func (i TemplatePivotTableConditionalFormattingScopeArray) ToTemplatePivotTableConditionalFormattingScopeArrayOutputWithContext(ctx context.Context) TemplatePivotTableConditionalFormattingScopeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTableConditionalFormattingScopeArrayOutput)
}

type TemplatePivotTableConditionalFormattingScopeOutput struct{ *pulumi.OutputState }

func (TemplatePivotTableConditionalFormattingScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePivotTableConditionalFormattingScope)(nil)).Elem()
}

func (o TemplatePivotTableConditionalFormattingScopeOutput) ToTemplatePivotTableConditionalFormattingScopeOutput() TemplatePivotTableConditionalFormattingScopeOutput {
	return o
}

func (o TemplatePivotTableConditionalFormattingScopeOutput) ToTemplatePivotTableConditionalFormattingScopeOutputWithContext(ctx context.Context) TemplatePivotTableConditionalFormattingScopeOutput {
	return o
}

func (o TemplatePivotTableConditionalFormattingScopeOutput) ToTemplatePivotTableConditionalFormattingScopePtrOutput() TemplatePivotTableConditionalFormattingScopePtrOutput {
	return o.ToTemplatePivotTableConditionalFormattingScopePtrOutputWithContext(context.Background())
}

func (o TemplatePivotTableConditionalFormattingScopeOutput) ToTemplatePivotTableConditionalFormattingScopePtrOutputWithContext(ctx context.Context) TemplatePivotTableConditionalFormattingScopePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplatePivotTableConditionalFormattingScope) *TemplatePivotTableConditionalFormattingScope {
		return &v
	}).(TemplatePivotTableConditionalFormattingScopePtrOutput)
}

// The role (field, field total, grand total) of the cell for conditional formatting.
func (o TemplatePivotTableConditionalFormattingScopeOutput) Role() TemplatePivotTableConditionalFormattingScopeRolePtrOutput {
	return o.ApplyT(func(v TemplatePivotTableConditionalFormattingScope) *TemplatePivotTableConditionalFormattingScopeRole {
		return v.Role
	}).(TemplatePivotTableConditionalFormattingScopeRolePtrOutput)
}

type TemplatePivotTableConditionalFormattingScopePtrOutput struct{ *pulumi.OutputState }

func (TemplatePivotTableConditionalFormattingScopePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePivotTableConditionalFormattingScope)(nil)).Elem()
}

func (o TemplatePivotTableConditionalFormattingScopePtrOutput) ToTemplatePivotTableConditionalFormattingScopePtrOutput() TemplatePivotTableConditionalFormattingScopePtrOutput {
	return o
}

func (o TemplatePivotTableConditionalFormattingScopePtrOutput) ToTemplatePivotTableConditionalFormattingScopePtrOutputWithContext(ctx context.Context) TemplatePivotTableConditionalFormattingScopePtrOutput {
	return o
}

func (o TemplatePivotTableConditionalFormattingScopePtrOutput) Elem() TemplatePivotTableConditionalFormattingScopeOutput {
	return o.ApplyT(func(v *TemplatePivotTableConditionalFormattingScope) TemplatePivotTableConditionalFormattingScope {
		if v != nil {
			return *v
		}
		var ret TemplatePivotTableConditionalFormattingScope
		return ret
	}).(TemplatePivotTableConditionalFormattingScopeOutput)
}

// The role (field, field total, grand total) of the cell for conditional formatting.
func (o TemplatePivotTableConditionalFormattingScopePtrOutput) Role() TemplatePivotTableConditionalFormattingScopeRolePtrOutput {
	return o.ApplyT(func(v *TemplatePivotTableConditionalFormattingScope) *TemplatePivotTableConditionalFormattingScopeRole {
		if v == nil {
			return nil
		}
		return v.Role
	}).(TemplatePivotTableConditionalFormattingScopeRolePtrOutput)
}

type TemplatePivotTableConditionalFormattingScopeArrayOutput struct{ *pulumi.OutputState }

func (TemplatePivotTableConditionalFormattingScopeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplatePivotTableConditionalFormattingScope)(nil)).Elem()
}

func (o TemplatePivotTableConditionalFormattingScopeArrayOutput) ToTemplatePivotTableConditionalFormattingScopeArrayOutput() TemplatePivotTableConditionalFormattingScopeArrayOutput {
	return o
}

func (o TemplatePivotTableConditionalFormattingScopeArrayOutput) ToTemplatePivotTableConditionalFormattingScopeArrayOutputWithContext(ctx context.Context) TemplatePivotTableConditionalFormattingScopeArrayOutput {
	return o
}

func (o TemplatePivotTableConditionalFormattingScopeArrayOutput) Index(i pulumi.IntInput) TemplatePivotTableConditionalFormattingScopeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplatePivotTableConditionalFormattingScope {
		return vs[0].([]TemplatePivotTableConditionalFormattingScope)[vs[1].(int)]
	}).(TemplatePivotTableConditionalFormattingScopeOutput)
}

type TemplatePivotTableConfiguration struct {
	// The field options for a pivot table visual.
	FieldOptions *TemplatePivotTableFieldOptions `pulumi:"fieldOptions"`
	// The field wells of the visual.
	FieldWells *TemplatePivotTableFieldWells `pulumi:"fieldWells"`
	// The general visual interactions setup for a visual.
	Interactions *TemplateVisualInteractionOptions `pulumi:"interactions"`
	// The paginated report options for a pivot table visual.
	PaginatedReportOptions *TemplatePivotTablePaginatedReportOptions `pulumi:"paginatedReportOptions"`
	// The sort configuration for a `PivotTableVisual` .
	SortConfiguration *TemplatePivotTableSortConfiguration `pulumi:"sortConfiguration"`
	// The table options for a pivot table visual.
	TableOptions *TemplatePivotTableOptions `pulumi:"tableOptions"`
	// The total options for a pivot table visual.
	TotalOptions *TemplatePivotTableTotalOptions `pulumi:"totalOptions"`
}

// TemplatePivotTableConfigurationInput is an input type that accepts TemplatePivotTableConfigurationArgs and TemplatePivotTableConfigurationOutput values.
// You can construct a concrete instance of `TemplatePivotTableConfigurationInput` via:
//
//	TemplatePivotTableConfigurationArgs{...}
type TemplatePivotTableConfigurationInput interface {
	pulumi.Input

	ToTemplatePivotTableConfigurationOutput() TemplatePivotTableConfigurationOutput
	ToTemplatePivotTableConfigurationOutputWithContext(context.Context) TemplatePivotTableConfigurationOutput
}

type TemplatePivotTableConfigurationArgs struct {
	// The field options for a pivot table visual.
	FieldOptions TemplatePivotTableFieldOptionsPtrInput `pulumi:"fieldOptions"`
	// The field wells of the visual.
	FieldWells TemplatePivotTableFieldWellsPtrInput `pulumi:"fieldWells"`
	// The general visual interactions setup for a visual.
	Interactions TemplateVisualInteractionOptionsPtrInput `pulumi:"interactions"`
	// The paginated report options for a pivot table visual.
	PaginatedReportOptions TemplatePivotTablePaginatedReportOptionsPtrInput `pulumi:"paginatedReportOptions"`
	// The sort configuration for a `PivotTableVisual` .
	SortConfiguration TemplatePivotTableSortConfigurationPtrInput `pulumi:"sortConfiguration"`
	// The table options for a pivot table visual.
	TableOptions TemplatePivotTableOptionsPtrInput `pulumi:"tableOptions"`
	// The total options for a pivot table visual.
	TotalOptions TemplatePivotTableTotalOptionsPtrInput `pulumi:"totalOptions"`
}

func (TemplatePivotTableConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePivotTableConfiguration)(nil)).Elem()
}

func (i TemplatePivotTableConfigurationArgs) ToTemplatePivotTableConfigurationOutput() TemplatePivotTableConfigurationOutput {
	return i.ToTemplatePivotTableConfigurationOutputWithContext(context.Background())
}

func (i TemplatePivotTableConfigurationArgs) ToTemplatePivotTableConfigurationOutputWithContext(ctx context.Context) TemplatePivotTableConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTableConfigurationOutput)
}

func (i TemplatePivotTableConfigurationArgs) ToTemplatePivotTableConfigurationPtrOutput() TemplatePivotTableConfigurationPtrOutput {
	return i.ToTemplatePivotTableConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplatePivotTableConfigurationArgs) ToTemplatePivotTableConfigurationPtrOutputWithContext(ctx context.Context) TemplatePivotTableConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTableConfigurationOutput).ToTemplatePivotTableConfigurationPtrOutputWithContext(ctx)
}

// TemplatePivotTableConfigurationPtrInput is an input type that accepts TemplatePivotTableConfigurationArgs, TemplatePivotTableConfigurationPtr and TemplatePivotTableConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplatePivotTableConfigurationPtrInput` via:
//
//	        TemplatePivotTableConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplatePivotTableConfigurationPtrInput interface {
	pulumi.Input

	ToTemplatePivotTableConfigurationPtrOutput() TemplatePivotTableConfigurationPtrOutput
	ToTemplatePivotTableConfigurationPtrOutputWithContext(context.Context) TemplatePivotTableConfigurationPtrOutput
}

type templatePivotTableConfigurationPtrType TemplatePivotTableConfigurationArgs

func TemplatePivotTableConfigurationPtr(v *TemplatePivotTableConfigurationArgs) TemplatePivotTableConfigurationPtrInput {
	return (*templatePivotTableConfigurationPtrType)(v)
}

func (*templatePivotTableConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePivotTableConfiguration)(nil)).Elem()
}

func (i *templatePivotTableConfigurationPtrType) ToTemplatePivotTableConfigurationPtrOutput() TemplatePivotTableConfigurationPtrOutput {
	return i.ToTemplatePivotTableConfigurationPtrOutputWithContext(context.Background())
}

func (i *templatePivotTableConfigurationPtrType) ToTemplatePivotTableConfigurationPtrOutputWithContext(ctx context.Context) TemplatePivotTableConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTableConfigurationPtrOutput)
}

type TemplatePivotTableConfigurationOutput struct{ *pulumi.OutputState }

func (TemplatePivotTableConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePivotTableConfiguration)(nil)).Elem()
}

func (o TemplatePivotTableConfigurationOutput) ToTemplatePivotTableConfigurationOutput() TemplatePivotTableConfigurationOutput {
	return o
}

func (o TemplatePivotTableConfigurationOutput) ToTemplatePivotTableConfigurationOutputWithContext(ctx context.Context) TemplatePivotTableConfigurationOutput {
	return o
}

func (o TemplatePivotTableConfigurationOutput) ToTemplatePivotTableConfigurationPtrOutput() TemplatePivotTableConfigurationPtrOutput {
	return o.ToTemplatePivotTableConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplatePivotTableConfigurationOutput) ToTemplatePivotTableConfigurationPtrOutputWithContext(ctx context.Context) TemplatePivotTableConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplatePivotTableConfiguration) *TemplatePivotTableConfiguration {
		return &v
	}).(TemplatePivotTableConfigurationPtrOutput)
}

// The field options for a pivot table visual.
func (o TemplatePivotTableConfigurationOutput) FieldOptions() TemplatePivotTableFieldOptionsPtrOutput {
	return o.ApplyT(func(v TemplatePivotTableConfiguration) *TemplatePivotTableFieldOptions { return v.FieldOptions }).(TemplatePivotTableFieldOptionsPtrOutput)
}

// The field wells of the visual.
func (o TemplatePivotTableConfigurationOutput) FieldWells() TemplatePivotTableFieldWellsPtrOutput {
	return o.ApplyT(func(v TemplatePivotTableConfiguration) *TemplatePivotTableFieldWells { return v.FieldWells }).(TemplatePivotTableFieldWellsPtrOutput)
}

// The general visual interactions setup for a visual.
func (o TemplatePivotTableConfigurationOutput) Interactions() TemplateVisualInteractionOptionsPtrOutput {
	return o.ApplyT(func(v TemplatePivotTableConfiguration) *TemplateVisualInteractionOptions { return v.Interactions }).(TemplateVisualInteractionOptionsPtrOutput)
}

// The paginated report options for a pivot table visual.
func (o TemplatePivotTableConfigurationOutput) PaginatedReportOptions() TemplatePivotTablePaginatedReportOptionsPtrOutput {
	return o.ApplyT(func(v TemplatePivotTableConfiguration) *TemplatePivotTablePaginatedReportOptions {
		return v.PaginatedReportOptions
	}).(TemplatePivotTablePaginatedReportOptionsPtrOutput)
}

// The sort configuration for a `PivotTableVisual` .
func (o TemplatePivotTableConfigurationOutput) SortConfiguration() TemplatePivotTableSortConfigurationPtrOutput {
	return o.ApplyT(func(v TemplatePivotTableConfiguration) *TemplatePivotTableSortConfiguration {
		return v.SortConfiguration
	}).(TemplatePivotTableSortConfigurationPtrOutput)
}

// The table options for a pivot table visual.
func (o TemplatePivotTableConfigurationOutput) TableOptions() TemplatePivotTableOptionsPtrOutput {
	return o.ApplyT(func(v TemplatePivotTableConfiguration) *TemplatePivotTableOptions { return v.TableOptions }).(TemplatePivotTableOptionsPtrOutput)
}

// The total options for a pivot table visual.
func (o TemplatePivotTableConfigurationOutput) TotalOptions() TemplatePivotTableTotalOptionsPtrOutput {
	return o.ApplyT(func(v TemplatePivotTableConfiguration) *TemplatePivotTableTotalOptions { return v.TotalOptions }).(TemplatePivotTableTotalOptionsPtrOutput)
}

type TemplatePivotTableConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplatePivotTableConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePivotTableConfiguration)(nil)).Elem()
}

func (o TemplatePivotTableConfigurationPtrOutput) ToTemplatePivotTableConfigurationPtrOutput() TemplatePivotTableConfigurationPtrOutput {
	return o
}

func (o TemplatePivotTableConfigurationPtrOutput) ToTemplatePivotTableConfigurationPtrOutputWithContext(ctx context.Context) TemplatePivotTableConfigurationPtrOutput {
	return o
}

func (o TemplatePivotTableConfigurationPtrOutput) Elem() TemplatePivotTableConfigurationOutput {
	return o.ApplyT(func(v *TemplatePivotTableConfiguration) TemplatePivotTableConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplatePivotTableConfiguration
		return ret
	}).(TemplatePivotTableConfigurationOutput)
}

// The field options for a pivot table visual.
func (o TemplatePivotTableConfigurationPtrOutput) FieldOptions() TemplatePivotTableFieldOptionsPtrOutput {
	return o.ApplyT(func(v *TemplatePivotTableConfiguration) *TemplatePivotTableFieldOptions {
		if v == nil {
			return nil
		}
		return v.FieldOptions
	}).(TemplatePivotTableFieldOptionsPtrOutput)
}

// The field wells of the visual.
func (o TemplatePivotTableConfigurationPtrOutput) FieldWells() TemplatePivotTableFieldWellsPtrOutput {
	return o.ApplyT(func(v *TemplatePivotTableConfiguration) *TemplatePivotTableFieldWells {
		if v == nil {
			return nil
		}
		return v.FieldWells
	}).(TemplatePivotTableFieldWellsPtrOutput)
}

// The general visual interactions setup for a visual.
func (o TemplatePivotTableConfigurationPtrOutput) Interactions() TemplateVisualInteractionOptionsPtrOutput {
	return o.ApplyT(func(v *TemplatePivotTableConfiguration) *TemplateVisualInteractionOptions {
		if v == nil {
			return nil
		}
		return v.Interactions
	}).(TemplateVisualInteractionOptionsPtrOutput)
}

// The paginated report options for a pivot table visual.
func (o TemplatePivotTableConfigurationPtrOutput) PaginatedReportOptions() TemplatePivotTablePaginatedReportOptionsPtrOutput {
	return o.ApplyT(func(v *TemplatePivotTableConfiguration) *TemplatePivotTablePaginatedReportOptions {
		if v == nil {
			return nil
		}
		return v.PaginatedReportOptions
	}).(TemplatePivotTablePaginatedReportOptionsPtrOutput)
}

// The sort configuration for a `PivotTableVisual` .
func (o TemplatePivotTableConfigurationPtrOutput) SortConfiguration() TemplatePivotTableSortConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplatePivotTableConfiguration) *TemplatePivotTableSortConfiguration {
		if v == nil {
			return nil
		}
		return v.SortConfiguration
	}).(TemplatePivotTableSortConfigurationPtrOutput)
}

// The table options for a pivot table visual.
func (o TemplatePivotTableConfigurationPtrOutput) TableOptions() TemplatePivotTableOptionsPtrOutput {
	return o.ApplyT(func(v *TemplatePivotTableConfiguration) *TemplatePivotTableOptions {
		if v == nil {
			return nil
		}
		return v.TableOptions
	}).(TemplatePivotTableOptionsPtrOutput)
}

// The total options for a pivot table visual.
func (o TemplatePivotTableConfigurationPtrOutput) TotalOptions() TemplatePivotTableTotalOptionsPtrOutput {
	return o.ApplyT(func(v *TemplatePivotTableConfiguration) *TemplatePivotTableTotalOptions {
		if v == nil {
			return nil
		}
		return v.TotalOptions
	}).(TemplatePivotTableTotalOptionsPtrOutput)
}

type TemplatePivotTableDataPathOption struct {
	// The list of data path values for the data path options.
	DataPathList []TemplateDataPathValue `pulumi:"dataPathList"`
	// String based length that is composed of value and unit in px
	Width *string `pulumi:"width"`
}

// TemplatePivotTableDataPathOptionInput is an input type that accepts TemplatePivotTableDataPathOptionArgs and TemplatePivotTableDataPathOptionOutput values.
// You can construct a concrete instance of `TemplatePivotTableDataPathOptionInput` via:
//
//	TemplatePivotTableDataPathOptionArgs{...}
type TemplatePivotTableDataPathOptionInput interface {
	pulumi.Input

	ToTemplatePivotTableDataPathOptionOutput() TemplatePivotTableDataPathOptionOutput
	ToTemplatePivotTableDataPathOptionOutputWithContext(context.Context) TemplatePivotTableDataPathOptionOutput
}

type TemplatePivotTableDataPathOptionArgs struct {
	// The list of data path values for the data path options.
	DataPathList TemplateDataPathValueArrayInput `pulumi:"dataPathList"`
	// String based length that is composed of value and unit in px
	Width pulumi.StringPtrInput `pulumi:"width"`
}

func (TemplatePivotTableDataPathOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePivotTableDataPathOption)(nil)).Elem()
}

func (i TemplatePivotTableDataPathOptionArgs) ToTemplatePivotTableDataPathOptionOutput() TemplatePivotTableDataPathOptionOutput {
	return i.ToTemplatePivotTableDataPathOptionOutputWithContext(context.Background())
}

func (i TemplatePivotTableDataPathOptionArgs) ToTemplatePivotTableDataPathOptionOutputWithContext(ctx context.Context) TemplatePivotTableDataPathOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTableDataPathOptionOutput)
}

// TemplatePivotTableDataPathOptionArrayInput is an input type that accepts TemplatePivotTableDataPathOptionArray and TemplatePivotTableDataPathOptionArrayOutput values.
// You can construct a concrete instance of `TemplatePivotTableDataPathOptionArrayInput` via:
//
//	TemplatePivotTableDataPathOptionArray{ TemplatePivotTableDataPathOptionArgs{...} }
type TemplatePivotTableDataPathOptionArrayInput interface {
	pulumi.Input

	ToTemplatePivotTableDataPathOptionArrayOutput() TemplatePivotTableDataPathOptionArrayOutput
	ToTemplatePivotTableDataPathOptionArrayOutputWithContext(context.Context) TemplatePivotTableDataPathOptionArrayOutput
}

type TemplatePivotTableDataPathOptionArray []TemplatePivotTableDataPathOptionInput

func (TemplatePivotTableDataPathOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplatePivotTableDataPathOption)(nil)).Elem()
}

func (i TemplatePivotTableDataPathOptionArray) ToTemplatePivotTableDataPathOptionArrayOutput() TemplatePivotTableDataPathOptionArrayOutput {
	return i.ToTemplatePivotTableDataPathOptionArrayOutputWithContext(context.Background())
}

func (i TemplatePivotTableDataPathOptionArray) ToTemplatePivotTableDataPathOptionArrayOutputWithContext(ctx context.Context) TemplatePivotTableDataPathOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTableDataPathOptionArrayOutput)
}

type TemplatePivotTableDataPathOptionOutput struct{ *pulumi.OutputState }

func (TemplatePivotTableDataPathOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePivotTableDataPathOption)(nil)).Elem()
}

func (o TemplatePivotTableDataPathOptionOutput) ToTemplatePivotTableDataPathOptionOutput() TemplatePivotTableDataPathOptionOutput {
	return o
}

func (o TemplatePivotTableDataPathOptionOutput) ToTemplatePivotTableDataPathOptionOutputWithContext(ctx context.Context) TemplatePivotTableDataPathOptionOutput {
	return o
}

// The list of data path values for the data path options.
func (o TemplatePivotTableDataPathOptionOutput) DataPathList() TemplateDataPathValueArrayOutput {
	return o.ApplyT(func(v TemplatePivotTableDataPathOption) []TemplateDataPathValue { return v.DataPathList }).(TemplateDataPathValueArrayOutput)
}

// String based length that is composed of value and unit in px
func (o TemplatePivotTableDataPathOptionOutput) Width() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplatePivotTableDataPathOption) *string { return v.Width }).(pulumi.StringPtrOutput)
}

type TemplatePivotTableDataPathOptionArrayOutput struct{ *pulumi.OutputState }

func (TemplatePivotTableDataPathOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplatePivotTableDataPathOption)(nil)).Elem()
}

func (o TemplatePivotTableDataPathOptionArrayOutput) ToTemplatePivotTableDataPathOptionArrayOutput() TemplatePivotTableDataPathOptionArrayOutput {
	return o
}

func (o TemplatePivotTableDataPathOptionArrayOutput) ToTemplatePivotTableDataPathOptionArrayOutputWithContext(ctx context.Context) TemplatePivotTableDataPathOptionArrayOutput {
	return o
}

func (o TemplatePivotTableDataPathOptionArrayOutput) Index(i pulumi.IntInput) TemplatePivotTableDataPathOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplatePivotTableDataPathOption {
		return vs[0].([]TemplatePivotTableDataPathOption)[vs[1].(int)]
	}).(TemplatePivotTableDataPathOptionOutput)
}

type TemplatePivotTableFieldCollapseStateOption struct {
	// The state of the field target of a pivot table. Choose one of the following options:
	//
	// - `COLLAPSED`
	// - `EXPANDED`
	State *TemplatePivotTableFieldCollapseState `pulumi:"state"`
	// A tagged-union object that sets the collapse state.
	Target TemplatePivotTableFieldCollapseStateTarget `pulumi:"target"`
}

// TemplatePivotTableFieldCollapseStateOptionInput is an input type that accepts TemplatePivotTableFieldCollapseStateOptionArgs and TemplatePivotTableFieldCollapseStateOptionOutput values.
// You can construct a concrete instance of `TemplatePivotTableFieldCollapseStateOptionInput` via:
//
//	TemplatePivotTableFieldCollapseStateOptionArgs{...}
type TemplatePivotTableFieldCollapseStateOptionInput interface {
	pulumi.Input

	ToTemplatePivotTableFieldCollapseStateOptionOutput() TemplatePivotTableFieldCollapseStateOptionOutput
	ToTemplatePivotTableFieldCollapseStateOptionOutputWithContext(context.Context) TemplatePivotTableFieldCollapseStateOptionOutput
}

type TemplatePivotTableFieldCollapseStateOptionArgs struct {
	// The state of the field target of a pivot table. Choose one of the following options:
	//
	// - `COLLAPSED`
	// - `EXPANDED`
	State TemplatePivotTableFieldCollapseStatePtrInput `pulumi:"state"`
	// A tagged-union object that sets the collapse state.
	Target TemplatePivotTableFieldCollapseStateTargetInput `pulumi:"target"`
}

func (TemplatePivotTableFieldCollapseStateOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePivotTableFieldCollapseStateOption)(nil)).Elem()
}

func (i TemplatePivotTableFieldCollapseStateOptionArgs) ToTemplatePivotTableFieldCollapseStateOptionOutput() TemplatePivotTableFieldCollapseStateOptionOutput {
	return i.ToTemplatePivotTableFieldCollapseStateOptionOutputWithContext(context.Background())
}

func (i TemplatePivotTableFieldCollapseStateOptionArgs) ToTemplatePivotTableFieldCollapseStateOptionOutputWithContext(ctx context.Context) TemplatePivotTableFieldCollapseStateOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTableFieldCollapseStateOptionOutput)
}

// TemplatePivotTableFieldCollapseStateOptionArrayInput is an input type that accepts TemplatePivotTableFieldCollapseStateOptionArray and TemplatePivotTableFieldCollapseStateOptionArrayOutput values.
// You can construct a concrete instance of `TemplatePivotTableFieldCollapseStateOptionArrayInput` via:
//
//	TemplatePivotTableFieldCollapseStateOptionArray{ TemplatePivotTableFieldCollapseStateOptionArgs{...} }
type TemplatePivotTableFieldCollapseStateOptionArrayInput interface {
	pulumi.Input

	ToTemplatePivotTableFieldCollapseStateOptionArrayOutput() TemplatePivotTableFieldCollapseStateOptionArrayOutput
	ToTemplatePivotTableFieldCollapseStateOptionArrayOutputWithContext(context.Context) TemplatePivotTableFieldCollapseStateOptionArrayOutput
}

type TemplatePivotTableFieldCollapseStateOptionArray []TemplatePivotTableFieldCollapseStateOptionInput

func (TemplatePivotTableFieldCollapseStateOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplatePivotTableFieldCollapseStateOption)(nil)).Elem()
}

func (i TemplatePivotTableFieldCollapseStateOptionArray) ToTemplatePivotTableFieldCollapseStateOptionArrayOutput() TemplatePivotTableFieldCollapseStateOptionArrayOutput {
	return i.ToTemplatePivotTableFieldCollapseStateOptionArrayOutputWithContext(context.Background())
}

func (i TemplatePivotTableFieldCollapseStateOptionArray) ToTemplatePivotTableFieldCollapseStateOptionArrayOutputWithContext(ctx context.Context) TemplatePivotTableFieldCollapseStateOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTableFieldCollapseStateOptionArrayOutput)
}

type TemplatePivotTableFieldCollapseStateOptionOutput struct{ *pulumi.OutputState }

func (TemplatePivotTableFieldCollapseStateOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePivotTableFieldCollapseStateOption)(nil)).Elem()
}

func (o TemplatePivotTableFieldCollapseStateOptionOutput) ToTemplatePivotTableFieldCollapseStateOptionOutput() TemplatePivotTableFieldCollapseStateOptionOutput {
	return o
}

func (o TemplatePivotTableFieldCollapseStateOptionOutput) ToTemplatePivotTableFieldCollapseStateOptionOutputWithContext(ctx context.Context) TemplatePivotTableFieldCollapseStateOptionOutput {
	return o
}

// The state of the field target of a pivot table. Choose one of the following options:
//
// - `COLLAPSED`
// - `EXPANDED`
func (o TemplatePivotTableFieldCollapseStateOptionOutput) State() TemplatePivotTableFieldCollapseStatePtrOutput {
	return o.ApplyT(func(v TemplatePivotTableFieldCollapseStateOption) *TemplatePivotTableFieldCollapseState {
		return v.State
	}).(TemplatePivotTableFieldCollapseStatePtrOutput)
}

// A tagged-union object that sets the collapse state.
func (o TemplatePivotTableFieldCollapseStateOptionOutput) Target() TemplatePivotTableFieldCollapseStateTargetOutput {
	return o.ApplyT(func(v TemplatePivotTableFieldCollapseStateOption) TemplatePivotTableFieldCollapseStateTarget {
		return v.Target
	}).(TemplatePivotTableFieldCollapseStateTargetOutput)
}

type TemplatePivotTableFieldCollapseStateOptionArrayOutput struct{ *pulumi.OutputState }

func (TemplatePivotTableFieldCollapseStateOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplatePivotTableFieldCollapseStateOption)(nil)).Elem()
}

func (o TemplatePivotTableFieldCollapseStateOptionArrayOutput) ToTemplatePivotTableFieldCollapseStateOptionArrayOutput() TemplatePivotTableFieldCollapseStateOptionArrayOutput {
	return o
}

func (o TemplatePivotTableFieldCollapseStateOptionArrayOutput) ToTemplatePivotTableFieldCollapseStateOptionArrayOutputWithContext(ctx context.Context) TemplatePivotTableFieldCollapseStateOptionArrayOutput {
	return o
}

func (o TemplatePivotTableFieldCollapseStateOptionArrayOutput) Index(i pulumi.IntInput) TemplatePivotTableFieldCollapseStateOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplatePivotTableFieldCollapseStateOption {
		return vs[0].([]TemplatePivotTableFieldCollapseStateOption)[vs[1].(int)]
	}).(TemplatePivotTableFieldCollapseStateOptionOutput)
}

type TemplatePivotTableFieldCollapseStateTarget struct {
	// The data path of the pivot table's header. Used to set the collapse state.
	FieldDataPathValues []TemplateDataPathValue `pulumi:"fieldDataPathValues"`
	// The field ID of the pivot table that the collapse state needs to be set to.
	FieldId *string `pulumi:"fieldId"`
}

// TemplatePivotTableFieldCollapseStateTargetInput is an input type that accepts TemplatePivotTableFieldCollapseStateTargetArgs and TemplatePivotTableFieldCollapseStateTargetOutput values.
// You can construct a concrete instance of `TemplatePivotTableFieldCollapseStateTargetInput` via:
//
//	TemplatePivotTableFieldCollapseStateTargetArgs{...}
type TemplatePivotTableFieldCollapseStateTargetInput interface {
	pulumi.Input

	ToTemplatePivotTableFieldCollapseStateTargetOutput() TemplatePivotTableFieldCollapseStateTargetOutput
	ToTemplatePivotTableFieldCollapseStateTargetOutputWithContext(context.Context) TemplatePivotTableFieldCollapseStateTargetOutput
}

type TemplatePivotTableFieldCollapseStateTargetArgs struct {
	// The data path of the pivot table's header. Used to set the collapse state.
	FieldDataPathValues TemplateDataPathValueArrayInput `pulumi:"fieldDataPathValues"`
	// The field ID of the pivot table that the collapse state needs to be set to.
	FieldId pulumi.StringPtrInput `pulumi:"fieldId"`
}

func (TemplatePivotTableFieldCollapseStateTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePivotTableFieldCollapseStateTarget)(nil)).Elem()
}

func (i TemplatePivotTableFieldCollapseStateTargetArgs) ToTemplatePivotTableFieldCollapseStateTargetOutput() TemplatePivotTableFieldCollapseStateTargetOutput {
	return i.ToTemplatePivotTableFieldCollapseStateTargetOutputWithContext(context.Background())
}

func (i TemplatePivotTableFieldCollapseStateTargetArgs) ToTemplatePivotTableFieldCollapseStateTargetOutputWithContext(ctx context.Context) TemplatePivotTableFieldCollapseStateTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTableFieldCollapseStateTargetOutput)
}

type TemplatePivotTableFieldCollapseStateTargetOutput struct{ *pulumi.OutputState }

func (TemplatePivotTableFieldCollapseStateTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePivotTableFieldCollapseStateTarget)(nil)).Elem()
}

func (o TemplatePivotTableFieldCollapseStateTargetOutput) ToTemplatePivotTableFieldCollapseStateTargetOutput() TemplatePivotTableFieldCollapseStateTargetOutput {
	return o
}

func (o TemplatePivotTableFieldCollapseStateTargetOutput) ToTemplatePivotTableFieldCollapseStateTargetOutputWithContext(ctx context.Context) TemplatePivotTableFieldCollapseStateTargetOutput {
	return o
}

// The data path of the pivot table's header. Used to set the collapse state.
func (o TemplatePivotTableFieldCollapseStateTargetOutput) FieldDataPathValues() TemplateDataPathValueArrayOutput {
	return o.ApplyT(func(v TemplatePivotTableFieldCollapseStateTarget) []TemplateDataPathValue {
		return v.FieldDataPathValues
	}).(TemplateDataPathValueArrayOutput)
}

// The field ID of the pivot table that the collapse state needs to be set to.
func (o TemplatePivotTableFieldCollapseStateTargetOutput) FieldId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplatePivotTableFieldCollapseStateTarget) *string { return v.FieldId }).(pulumi.StringPtrOutput)
}

type TemplatePivotTableFieldOption struct {
	// The custom label of the pivot table field.
	CustomLabel *string `pulumi:"customLabel"`
	// The field ID of the pivot table field.
	FieldId string `pulumi:"fieldId"`
	// The visibility of the pivot table field.
	Visibility interface{} `pulumi:"visibility"`
}

// TemplatePivotTableFieldOptionInput is an input type that accepts TemplatePivotTableFieldOptionArgs and TemplatePivotTableFieldOptionOutput values.
// You can construct a concrete instance of `TemplatePivotTableFieldOptionInput` via:
//
//	TemplatePivotTableFieldOptionArgs{...}
type TemplatePivotTableFieldOptionInput interface {
	pulumi.Input

	ToTemplatePivotTableFieldOptionOutput() TemplatePivotTableFieldOptionOutput
	ToTemplatePivotTableFieldOptionOutputWithContext(context.Context) TemplatePivotTableFieldOptionOutput
}

type TemplatePivotTableFieldOptionArgs struct {
	// The custom label of the pivot table field.
	CustomLabel pulumi.StringPtrInput `pulumi:"customLabel"`
	// The field ID of the pivot table field.
	FieldId pulumi.StringInput `pulumi:"fieldId"`
	// The visibility of the pivot table field.
	Visibility pulumi.Input `pulumi:"visibility"`
}

func (TemplatePivotTableFieldOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePivotTableFieldOption)(nil)).Elem()
}

func (i TemplatePivotTableFieldOptionArgs) ToTemplatePivotTableFieldOptionOutput() TemplatePivotTableFieldOptionOutput {
	return i.ToTemplatePivotTableFieldOptionOutputWithContext(context.Background())
}

func (i TemplatePivotTableFieldOptionArgs) ToTemplatePivotTableFieldOptionOutputWithContext(ctx context.Context) TemplatePivotTableFieldOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTableFieldOptionOutput)
}

// TemplatePivotTableFieldOptionArrayInput is an input type that accepts TemplatePivotTableFieldOptionArray and TemplatePivotTableFieldOptionArrayOutput values.
// You can construct a concrete instance of `TemplatePivotTableFieldOptionArrayInput` via:
//
//	TemplatePivotTableFieldOptionArray{ TemplatePivotTableFieldOptionArgs{...} }
type TemplatePivotTableFieldOptionArrayInput interface {
	pulumi.Input

	ToTemplatePivotTableFieldOptionArrayOutput() TemplatePivotTableFieldOptionArrayOutput
	ToTemplatePivotTableFieldOptionArrayOutputWithContext(context.Context) TemplatePivotTableFieldOptionArrayOutput
}

type TemplatePivotTableFieldOptionArray []TemplatePivotTableFieldOptionInput

func (TemplatePivotTableFieldOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplatePivotTableFieldOption)(nil)).Elem()
}

func (i TemplatePivotTableFieldOptionArray) ToTemplatePivotTableFieldOptionArrayOutput() TemplatePivotTableFieldOptionArrayOutput {
	return i.ToTemplatePivotTableFieldOptionArrayOutputWithContext(context.Background())
}

func (i TemplatePivotTableFieldOptionArray) ToTemplatePivotTableFieldOptionArrayOutputWithContext(ctx context.Context) TemplatePivotTableFieldOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTableFieldOptionArrayOutput)
}

type TemplatePivotTableFieldOptionOutput struct{ *pulumi.OutputState }

func (TemplatePivotTableFieldOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePivotTableFieldOption)(nil)).Elem()
}

func (o TemplatePivotTableFieldOptionOutput) ToTemplatePivotTableFieldOptionOutput() TemplatePivotTableFieldOptionOutput {
	return o
}

func (o TemplatePivotTableFieldOptionOutput) ToTemplatePivotTableFieldOptionOutputWithContext(ctx context.Context) TemplatePivotTableFieldOptionOutput {
	return o
}

// The custom label of the pivot table field.
func (o TemplatePivotTableFieldOptionOutput) CustomLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplatePivotTableFieldOption) *string { return v.CustomLabel }).(pulumi.StringPtrOutput)
}

// The field ID of the pivot table field.
func (o TemplatePivotTableFieldOptionOutput) FieldId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplatePivotTableFieldOption) string { return v.FieldId }).(pulumi.StringOutput)
}

// The visibility of the pivot table field.
func (o TemplatePivotTableFieldOptionOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplatePivotTableFieldOption) interface{} { return v.Visibility }).(pulumi.AnyOutput)
}

type TemplatePivotTableFieldOptionArrayOutput struct{ *pulumi.OutputState }

func (TemplatePivotTableFieldOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplatePivotTableFieldOption)(nil)).Elem()
}

func (o TemplatePivotTableFieldOptionArrayOutput) ToTemplatePivotTableFieldOptionArrayOutput() TemplatePivotTableFieldOptionArrayOutput {
	return o
}

func (o TemplatePivotTableFieldOptionArrayOutput) ToTemplatePivotTableFieldOptionArrayOutputWithContext(ctx context.Context) TemplatePivotTableFieldOptionArrayOutput {
	return o
}

func (o TemplatePivotTableFieldOptionArrayOutput) Index(i pulumi.IntInput) TemplatePivotTableFieldOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplatePivotTableFieldOption {
		return vs[0].([]TemplatePivotTableFieldOption)[vs[1].(int)]
	}).(TemplatePivotTableFieldOptionOutput)
}

type TemplatePivotTableFieldOptions struct {
	// The collapse state options for the pivot table field options.
	CollapseStateOptions []TemplatePivotTableFieldCollapseStateOption `pulumi:"collapseStateOptions"`
	// The data path options for the pivot table field options.
	DataPathOptions []TemplatePivotTableDataPathOption `pulumi:"dataPathOptions"`
	// The selected field options for the pivot table field options.
	SelectedFieldOptions []TemplatePivotTableFieldOption `pulumi:"selectedFieldOptions"`
}

// TemplatePivotTableFieldOptionsInput is an input type that accepts TemplatePivotTableFieldOptionsArgs and TemplatePivotTableFieldOptionsOutput values.
// You can construct a concrete instance of `TemplatePivotTableFieldOptionsInput` via:
//
//	TemplatePivotTableFieldOptionsArgs{...}
type TemplatePivotTableFieldOptionsInput interface {
	pulumi.Input

	ToTemplatePivotTableFieldOptionsOutput() TemplatePivotTableFieldOptionsOutput
	ToTemplatePivotTableFieldOptionsOutputWithContext(context.Context) TemplatePivotTableFieldOptionsOutput
}

type TemplatePivotTableFieldOptionsArgs struct {
	// The collapse state options for the pivot table field options.
	CollapseStateOptions TemplatePivotTableFieldCollapseStateOptionArrayInput `pulumi:"collapseStateOptions"`
	// The data path options for the pivot table field options.
	DataPathOptions TemplatePivotTableDataPathOptionArrayInput `pulumi:"dataPathOptions"`
	// The selected field options for the pivot table field options.
	SelectedFieldOptions TemplatePivotTableFieldOptionArrayInput `pulumi:"selectedFieldOptions"`
}

func (TemplatePivotTableFieldOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePivotTableFieldOptions)(nil)).Elem()
}

func (i TemplatePivotTableFieldOptionsArgs) ToTemplatePivotTableFieldOptionsOutput() TemplatePivotTableFieldOptionsOutput {
	return i.ToTemplatePivotTableFieldOptionsOutputWithContext(context.Background())
}

func (i TemplatePivotTableFieldOptionsArgs) ToTemplatePivotTableFieldOptionsOutputWithContext(ctx context.Context) TemplatePivotTableFieldOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTableFieldOptionsOutput)
}

func (i TemplatePivotTableFieldOptionsArgs) ToTemplatePivotTableFieldOptionsPtrOutput() TemplatePivotTableFieldOptionsPtrOutput {
	return i.ToTemplatePivotTableFieldOptionsPtrOutputWithContext(context.Background())
}

func (i TemplatePivotTableFieldOptionsArgs) ToTemplatePivotTableFieldOptionsPtrOutputWithContext(ctx context.Context) TemplatePivotTableFieldOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTableFieldOptionsOutput).ToTemplatePivotTableFieldOptionsPtrOutputWithContext(ctx)
}

// TemplatePivotTableFieldOptionsPtrInput is an input type that accepts TemplatePivotTableFieldOptionsArgs, TemplatePivotTableFieldOptionsPtr and TemplatePivotTableFieldOptionsPtrOutput values.
// You can construct a concrete instance of `TemplatePivotTableFieldOptionsPtrInput` via:
//
//	        TemplatePivotTableFieldOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplatePivotTableFieldOptionsPtrInput interface {
	pulumi.Input

	ToTemplatePivotTableFieldOptionsPtrOutput() TemplatePivotTableFieldOptionsPtrOutput
	ToTemplatePivotTableFieldOptionsPtrOutputWithContext(context.Context) TemplatePivotTableFieldOptionsPtrOutput
}

type templatePivotTableFieldOptionsPtrType TemplatePivotTableFieldOptionsArgs

func TemplatePivotTableFieldOptionsPtr(v *TemplatePivotTableFieldOptionsArgs) TemplatePivotTableFieldOptionsPtrInput {
	return (*templatePivotTableFieldOptionsPtrType)(v)
}

func (*templatePivotTableFieldOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePivotTableFieldOptions)(nil)).Elem()
}

func (i *templatePivotTableFieldOptionsPtrType) ToTemplatePivotTableFieldOptionsPtrOutput() TemplatePivotTableFieldOptionsPtrOutput {
	return i.ToTemplatePivotTableFieldOptionsPtrOutputWithContext(context.Background())
}

func (i *templatePivotTableFieldOptionsPtrType) ToTemplatePivotTableFieldOptionsPtrOutputWithContext(ctx context.Context) TemplatePivotTableFieldOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTableFieldOptionsPtrOutput)
}

type TemplatePivotTableFieldOptionsOutput struct{ *pulumi.OutputState }

func (TemplatePivotTableFieldOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePivotTableFieldOptions)(nil)).Elem()
}

func (o TemplatePivotTableFieldOptionsOutput) ToTemplatePivotTableFieldOptionsOutput() TemplatePivotTableFieldOptionsOutput {
	return o
}

func (o TemplatePivotTableFieldOptionsOutput) ToTemplatePivotTableFieldOptionsOutputWithContext(ctx context.Context) TemplatePivotTableFieldOptionsOutput {
	return o
}

func (o TemplatePivotTableFieldOptionsOutput) ToTemplatePivotTableFieldOptionsPtrOutput() TemplatePivotTableFieldOptionsPtrOutput {
	return o.ToTemplatePivotTableFieldOptionsPtrOutputWithContext(context.Background())
}

func (o TemplatePivotTableFieldOptionsOutput) ToTemplatePivotTableFieldOptionsPtrOutputWithContext(ctx context.Context) TemplatePivotTableFieldOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplatePivotTableFieldOptions) *TemplatePivotTableFieldOptions {
		return &v
	}).(TemplatePivotTableFieldOptionsPtrOutput)
}

// The collapse state options for the pivot table field options.
func (o TemplatePivotTableFieldOptionsOutput) CollapseStateOptions() TemplatePivotTableFieldCollapseStateOptionArrayOutput {
	return o.ApplyT(func(v TemplatePivotTableFieldOptions) []TemplatePivotTableFieldCollapseStateOption {
		return v.CollapseStateOptions
	}).(TemplatePivotTableFieldCollapseStateOptionArrayOutput)
}

// The data path options for the pivot table field options.
func (o TemplatePivotTableFieldOptionsOutput) DataPathOptions() TemplatePivotTableDataPathOptionArrayOutput {
	return o.ApplyT(func(v TemplatePivotTableFieldOptions) []TemplatePivotTableDataPathOption { return v.DataPathOptions }).(TemplatePivotTableDataPathOptionArrayOutput)
}

// The selected field options for the pivot table field options.
func (o TemplatePivotTableFieldOptionsOutput) SelectedFieldOptions() TemplatePivotTableFieldOptionArrayOutput {
	return o.ApplyT(func(v TemplatePivotTableFieldOptions) []TemplatePivotTableFieldOption { return v.SelectedFieldOptions }).(TemplatePivotTableFieldOptionArrayOutput)
}

type TemplatePivotTableFieldOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplatePivotTableFieldOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePivotTableFieldOptions)(nil)).Elem()
}

func (o TemplatePivotTableFieldOptionsPtrOutput) ToTemplatePivotTableFieldOptionsPtrOutput() TemplatePivotTableFieldOptionsPtrOutput {
	return o
}

func (o TemplatePivotTableFieldOptionsPtrOutput) ToTemplatePivotTableFieldOptionsPtrOutputWithContext(ctx context.Context) TemplatePivotTableFieldOptionsPtrOutput {
	return o
}

func (o TemplatePivotTableFieldOptionsPtrOutput) Elem() TemplatePivotTableFieldOptionsOutput {
	return o.ApplyT(func(v *TemplatePivotTableFieldOptions) TemplatePivotTableFieldOptions {
		if v != nil {
			return *v
		}
		var ret TemplatePivotTableFieldOptions
		return ret
	}).(TemplatePivotTableFieldOptionsOutput)
}

// The collapse state options for the pivot table field options.
func (o TemplatePivotTableFieldOptionsPtrOutput) CollapseStateOptions() TemplatePivotTableFieldCollapseStateOptionArrayOutput {
	return o.ApplyT(func(v *TemplatePivotTableFieldOptions) []TemplatePivotTableFieldCollapseStateOption {
		if v == nil {
			return nil
		}
		return v.CollapseStateOptions
	}).(TemplatePivotTableFieldCollapseStateOptionArrayOutput)
}

// The data path options for the pivot table field options.
func (o TemplatePivotTableFieldOptionsPtrOutput) DataPathOptions() TemplatePivotTableDataPathOptionArrayOutput {
	return o.ApplyT(func(v *TemplatePivotTableFieldOptions) []TemplatePivotTableDataPathOption {
		if v == nil {
			return nil
		}
		return v.DataPathOptions
	}).(TemplatePivotTableDataPathOptionArrayOutput)
}

// The selected field options for the pivot table field options.
func (o TemplatePivotTableFieldOptionsPtrOutput) SelectedFieldOptions() TemplatePivotTableFieldOptionArrayOutput {
	return o.ApplyT(func(v *TemplatePivotTableFieldOptions) []TemplatePivotTableFieldOption {
		if v == nil {
			return nil
		}
		return v.SelectedFieldOptions
	}).(TemplatePivotTableFieldOptionArrayOutput)
}

type TemplatePivotTableFieldSubtotalOptions struct {
	// The field ID of the subtotal options.
	FieldId *string `pulumi:"fieldId"`
}

// TemplatePivotTableFieldSubtotalOptionsInput is an input type that accepts TemplatePivotTableFieldSubtotalOptionsArgs and TemplatePivotTableFieldSubtotalOptionsOutput values.
// You can construct a concrete instance of `TemplatePivotTableFieldSubtotalOptionsInput` via:
//
//	TemplatePivotTableFieldSubtotalOptionsArgs{...}
type TemplatePivotTableFieldSubtotalOptionsInput interface {
	pulumi.Input

	ToTemplatePivotTableFieldSubtotalOptionsOutput() TemplatePivotTableFieldSubtotalOptionsOutput
	ToTemplatePivotTableFieldSubtotalOptionsOutputWithContext(context.Context) TemplatePivotTableFieldSubtotalOptionsOutput
}

type TemplatePivotTableFieldSubtotalOptionsArgs struct {
	// The field ID of the subtotal options.
	FieldId pulumi.StringPtrInput `pulumi:"fieldId"`
}

func (TemplatePivotTableFieldSubtotalOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePivotTableFieldSubtotalOptions)(nil)).Elem()
}

func (i TemplatePivotTableFieldSubtotalOptionsArgs) ToTemplatePivotTableFieldSubtotalOptionsOutput() TemplatePivotTableFieldSubtotalOptionsOutput {
	return i.ToTemplatePivotTableFieldSubtotalOptionsOutputWithContext(context.Background())
}

func (i TemplatePivotTableFieldSubtotalOptionsArgs) ToTemplatePivotTableFieldSubtotalOptionsOutputWithContext(ctx context.Context) TemplatePivotTableFieldSubtotalOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTableFieldSubtotalOptionsOutput)
}

// TemplatePivotTableFieldSubtotalOptionsArrayInput is an input type that accepts TemplatePivotTableFieldSubtotalOptionsArray and TemplatePivotTableFieldSubtotalOptionsArrayOutput values.
// You can construct a concrete instance of `TemplatePivotTableFieldSubtotalOptionsArrayInput` via:
//
//	TemplatePivotTableFieldSubtotalOptionsArray{ TemplatePivotTableFieldSubtotalOptionsArgs{...} }
type TemplatePivotTableFieldSubtotalOptionsArrayInput interface {
	pulumi.Input

	ToTemplatePivotTableFieldSubtotalOptionsArrayOutput() TemplatePivotTableFieldSubtotalOptionsArrayOutput
	ToTemplatePivotTableFieldSubtotalOptionsArrayOutputWithContext(context.Context) TemplatePivotTableFieldSubtotalOptionsArrayOutput
}

type TemplatePivotTableFieldSubtotalOptionsArray []TemplatePivotTableFieldSubtotalOptionsInput

func (TemplatePivotTableFieldSubtotalOptionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplatePivotTableFieldSubtotalOptions)(nil)).Elem()
}

func (i TemplatePivotTableFieldSubtotalOptionsArray) ToTemplatePivotTableFieldSubtotalOptionsArrayOutput() TemplatePivotTableFieldSubtotalOptionsArrayOutput {
	return i.ToTemplatePivotTableFieldSubtotalOptionsArrayOutputWithContext(context.Background())
}

func (i TemplatePivotTableFieldSubtotalOptionsArray) ToTemplatePivotTableFieldSubtotalOptionsArrayOutputWithContext(ctx context.Context) TemplatePivotTableFieldSubtotalOptionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTableFieldSubtotalOptionsArrayOutput)
}

type TemplatePivotTableFieldSubtotalOptionsOutput struct{ *pulumi.OutputState }

func (TemplatePivotTableFieldSubtotalOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePivotTableFieldSubtotalOptions)(nil)).Elem()
}

func (o TemplatePivotTableFieldSubtotalOptionsOutput) ToTemplatePivotTableFieldSubtotalOptionsOutput() TemplatePivotTableFieldSubtotalOptionsOutput {
	return o
}

func (o TemplatePivotTableFieldSubtotalOptionsOutput) ToTemplatePivotTableFieldSubtotalOptionsOutputWithContext(ctx context.Context) TemplatePivotTableFieldSubtotalOptionsOutput {
	return o
}

// The field ID of the subtotal options.
func (o TemplatePivotTableFieldSubtotalOptionsOutput) FieldId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplatePivotTableFieldSubtotalOptions) *string { return v.FieldId }).(pulumi.StringPtrOutput)
}

type TemplatePivotTableFieldSubtotalOptionsArrayOutput struct{ *pulumi.OutputState }

func (TemplatePivotTableFieldSubtotalOptionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplatePivotTableFieldSubtotalOptions)(nil)).Elem()
}

func (o TemplatePivotTableFieldSubtotalOptionsArrayOutput) ToTemplatePivotTableFieldSubtotalOptionsArrayOutput() TemplatePivotTableFieldSubtotalOptionsArrayOutput {
	return o
}

func (o TemplatePivotTableFieldSubtotalOptionsArrayOutput) ToTemplatePivotTableFieldSubtotalOptionsArrayOutputWithContext(ctx context.Context) TemplatePivotTableFieldSubtotalOptionsArrayOutput {
	return o
}

func (o TemplatePivotTableFieldSubtotalOptionsArrayOutput) Index(i pulumi.IntInput) TemplatePivotTableFieldSubtotalOptionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplatePivotTableFieldSubtotalOptions {
		return vs[0].([]TemplatePivotTableFieldSubtotalOptions)[vs[1].(int)]
	}).(TemplatePivotTableFieldSubtotalOptionsOutput)
}

type TemplatePivotTableFieldWells struct {
	// The aggregated field well for the pivot table.
	PivotTableAggregatedFieldWells *TemplatePivotTableAggregatedFieldWells `pulumi:"pivotTableAggregatedFieldWells"`
}

// TemplatePivotTableFieldWellsInput is an input type that accepts TemplatePivotTableFieldWellsArgs and TemplatePivotTableFieldWellsOutput values.
// You can construct a concrete instance of `TemplatePivotTableFieldWellsInput` via:
//
//	TemplatePivotTableFieldWellsArgs{...}
type TemplatePivotTableFieldWellsInput interface {
	pulumi.Input

	ToTemplatePivotTableFieldWellsOutput() TemplatePivotTableFieldWellsOutput
	ToTemplatePivotTableFieldWellsOutputWithContext(context.Context) TemplatePivotTableFieldWellsOutput
}

type TemplatePivotTableFieldWellsArgs struct {
	// The aggregated field well for the pivot table.
	PivotTableAggregatedFieldWells TemplatePivotTableAggregatedFieldWellsPtrInput `pulumi:"pivotTableAggregatedFieldWells"`
}

func (TemplatePivotTableFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePivotTableFieldWells)(nil)).Elem()
}

func (i TemplatePivotTableFieldWellsArgs) ToTemplatePivotTableFieldWellsOutput() TemplatePivotTableFieldWellsOutput {
	return i.ToTemplatePivotTableFieldWellsOutputWithContext(context.Background())
}

func (i TemplatePivotTableFieldWellsArgs) ToTemplatePivotTableFieldWellsOutputWithContext(ctx context.Context) TemplatePivotTableFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTableFieldWellsOutput)
}

func (i TemplatePivotTableFieldWellsArgs) ToTemplatePivotTableFieldWellsPtrOutput() TemplatePivotTableFieldWellsPtrOutput {
	return i.ToTemplatePivotTableFieldWellsPtrOutputWithContext(context.Background())
}

func (i TemplatePivotTableFieldWellsArgs) ToTemplatePivotTableFieldWellsPtrOutputWithContext(ctx context.Context) TemplatePivotTableFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTableFieldWellsOutput).ToTemplatePivotTableFieldWellsPtrOutputWithContext(ctx)
}

// TemplatePivotTableFieldWellsPtrInput is an input type that accepts TemplatePivotTableFieldWellsArgs, TemplatePivotTableFieldWellsPtr and TemplatePivotTableFieldWellsPtrOutput values.
// You can construct a concrete instance of `TemplatePivotTableFieldWellsPtrInput` via:
//
//	        TemplatePivotTableFieldWellsArgs{...}
//
//	or:
//
//	        nil
type TemplatePivotTableFieldWellsPtrInput interface {
	pulumi.Input

	ToTemplatePivotTableFieldWellsPtrOutput() TemplatePivotTableFieldWellsPtrOutput
	ToTemplatePivotTableFieldWellsPtrOutputWithContext(context.Context) TemplatePivotTableFieldWellsPtrOutput
}

type templatePivotTableFieldWellsPtrType TemplatePivotTableFieldWellsArgs

func TemplatePivotTableFieldWellsPtr(v *TemplatePivotTableFieldWellsArgs) TemplatePivotTableFieldWellsPtrInput {
	return (*templatePivotTableFieldWellsPtrType)(v)
}

func (*templatePivotTableFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePivotTableFieldWells)(nil)).Elem()
}

func (i *templatePivotTableFieldWellsPtrType) ToTemplatePivotTableFieldWellsPtrOutput() TemplatePivotTableFieldWellsPtrOutput {
	return i.ToTemplatePivotTableFieldWellsPtrOutputWithContext(context.Background())
}

func (i *templatePivotTableFieldWellsPtrType) ToTemplatePivotTableFieldWellsPtrOutputWithContext(ctx context.Context) TemplatePivotTableFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTableFieldWellsPtrOutput)
}

type TemplatePivotTableFieldWellsOutput struct{ *pulumi.OutputState }

func (TemplatePivotTableFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePivotTableFieldWells)(nil)).Elem()
}

func (o TemplatePivotTableFieldWellsOutput) ToTemplatePivotTableFieldWellsOutput() TemplatePivotTableFieldWellsOutput {
	return o
}

func (o TemplatePivotTableFieldWellsOutput) ToTemplatePivotTableFieldWellsOutputWithContext(ctx context.Context) TemplatePivotTableFieldWellsOutput {
	return o
}

func (o TemplatePivotTableFieldWellsOutput) ToTemplatePivotTableFieldWellsPtrOutput() TemplatePivotTableFieldWellsPtrOutput {
	return o.ToTemplatePivotTableFieldWellsPtrOutputWithContext(context.Background())
}

func (o TemplatePivotTableFieldWellsOutput) ToTemplatePivotTableFieldWellsPtrOutputWithContext(ctx context.Context) TemplatePivotTableFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplatePivotTableFieldWells) *TemplatePivotTableFieldWells {
		return &v
	}).(TemplatePivotTableFieldWellsPtrOutput)
}

// The aggregated field well for the pivot table.
func (o TemplatePivotTableFieldWellsOutput) PivotTableAggregatedFieldWells() TemplatePivotTableAggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v TemplatePivotTableFieldWells) *TemplatePivotTableAggregatedFieldWells {
		return v.PivotTableAggregatedFieldWells
	}).(TemplatePivotTableAggregatedFieldWellsPtrOutput)
}

type TemplatePivotTableFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (TemplatePivotTableFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePivotTableFieldWells)(nil)).Elem()
}

func (o TemplatePivotTableFieldWellsPtrOutput) ToTemplatePivotTableFieldWellsPtrOutput() TemplatePivotTableFieldWellsPtrOutput {
	return o
}

func (o TemplatePivotTableFieldWellsPtrOutput) ToTemplatePivotTableFieldWellsPtrOutputWithContext(ctx context.Context) TemplatePivotTableFieldWellsPtrOutput {
	return o
}

func (o TemplatePivotTableFieldWellsPtrOutput) Elem() TemplatePivotTableFieldWellsOutput {
	return o.ApplyT(func(v *TemplatePivotTableFieldWells) TemplatePivotTableFieldWells {
		if v != nil {
			return *v
		}
		var ret TemplatePivotTableFieldWells
		return ret
	}).(TemplatePivotTableFieldWellsOutput)
}

// The aggregated field well for the pivot table.
func (o TemplatePivotTableFieldWellsPtrOutput) PivotTableAggregatedFieldWells() TemplatePivotTableAggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v *TemplatePivotTableFieldWells) *TemplatePivotTableAggregatedFieldWells {
		if v == nil {
			return nil
		}
		return v.PivotTableAggregatedFieldWells
	}).(TemplatePivotTableAggregatedFieldWellsPtrOutput)
}

type TemplatePivotTableOptions struct {
	// The table cell style of cells.
	CellStyle *TemplateTableCellStyle `pulumi:"cellStyle"`
	// The visibility setting of a pivot table's collapsed row dimension fields. If the value of this structure is `HIDDEN` , all collapsed columns in a pivot table are automatically hidden. The default value is `VISIBLE` .
	CollapsedRowDimensionsVisibility interface{} `pulumi:"collapsedRowDimensionsVisibility"`
	// The table cell style of the column header.
	ColumnHeaderStyle *TemplateTableCellStyle `pulumi:"columnHeaderStyle"`
	// The visibility of the column names.
	ColumnNamesVisibility interface{} `pulumi:"columnNamesVisibility"`
	// String based length that is composed of value and unit in px
	DefaultCellWidth *string `pulumi:"defaultCellWidth"`
	// The metric placement (row, column) options.
	MetricPlacement *TemplatePivotTableMetricPlacement `pulumi:"metricPlacement"`
	// The row alternate color options (widget status, row alternate colors).
	RowAlternateColorOptions *TemplateRowAlternateColorOptions `pulumi:"rowAlternateColorOptions"`
	// The table cell style of row field names.
	RowFieldNamesStyle *TemplateTableCellStyle `pulumi:"rowFieldNamesStyle"`
	// The table cell style of the row headers.
	RowHeaderStyle *TemplateTableCellStyle `pulumi:"rowHeaderStyle"`
	// The options for the label that is located above the row headers. This option is only applicable when `RowsLayout` is set to `HIERARCHY` .
	RowsLabelOptions *TemplatePivotTableRowsLabelOptions `pulumi:"rowsLabelOptions"`
	// The layout for the row dimension headers of a pivot table. Choose one of the following options.
	//
	// - `TABULAR` : (Default) Each row field is displayed in a separate column.
	// - `HIERARCHY` : All row fields are displayed in a single column. Indentation is used to differentiate row headers of different fields.
	RowsLayout *TemplatePivotTableRowsLayout `pulumi:"rowsLayout"`
	// The visibility of the single metric options.
	SingleMetricVisibility interface{} `pulumi:"singleMetricVisibility"`
	// Determines the visibility of the pivot table.
	ToggleButtonsVisibility interface{} `pulumi:"toggleButtonsVisibility"`
}

// TemplatePivotTableOptionsInput is an input type that accepts TemplatePivotTableOptionsArgs and TemplatePivotTableOptionsOutput values.
// You can construct a concrete instance of `TemplatePivotTableOptionsInput` via:
//
//	TemplatePivotTableOptionsArgs{...}
type TemplatePivotTableOptionsInput interface {
	pulumi.Input

	ToTemplatePivotTableOptionsOutput() TemplatePivotTableOptionsOutput
	ToTemplatePivotTableOptionsOutputWithContext(context.Context) TemplatePivotTableOptionsOutput
}

type TemplatePivotTableOptionsArgs struct {
	// The table cell style of cells.
	CellStyle TemplateTableCellStylePtrInput `pulumi:"cellStyle"`
	// The visibility setting of a pivot table's collapsed row dimension fields. If the value of this structure is `HIDDEN` , all collapsed columns in a pivot table are automatically hidden. The default value is `VISIBLE` .
	CollapsedRowDimensionsVisibility pulumi.Input `pulumi:"collapsedRowDimensionsVisibility"`
	// The table cell style of the column header.
	ColumnHeaderStyle TemplateTableCellStylePtrInput `pulumi:"columnHeaderStyle"`
	// The visibility of the column names.
	ColumnNamesVisibility pulumi.Input `pulumi:"columnNamesVisibility"`
	// String based length that is composed of value and unit in px
	DefaultCellWidth pulumi.StringPtrInput `pulumi:"defaultCellWidth"`
	// The metric placement (row, column) options.
	MetricPlacement TemplatePivotTableMetricPlacementPtrInput `pulumi:"metricPlacement"`
	// The row alternate color options (widget status, row alternate colors).
	RowAlternateColorOptions TemplateRowAlternateColorOptionsPtrInput `pulumi:"rowAlternateColorOptions"`
	// The table cell style of row field names.
	RowFieldNamesStyle TemplateTableCellStylePtrInput `pulumi:"rowFieldNamesStyle"`
	// The table cell style of the row headers.
	RowHeaderStyle TemplateTableCellStylePtrInput `pulumi:"rowHeaderStyle"`
	// The options for the label that is located above the row headers. This option is only applicable when `RowsLayout` is set to `HIERARCHY` .
	RowsLabelOptions TemplatePivotTableRowsLabelOptionsPtrInput `pulumi:"rowsLabelOptions"`
	// The layout for the row dimension headers of a pivot table. Choose one of the following options.
	//
	// - `TABULAR` : (Default) Each row field is displayed in a separate column.
	// - `HIERARCHY` : All row fields are displayed in a single column. Indentation is used to differentiate row headers of different fields.
	RowsLayout TemplatePivotTableRowsLayoutPtrInput `pulumi:"rowsLayout"`
	// The visibility of the single metric options.
	SingleMetricVisibility pulumi.Input `pulumi:"singleMetricVisibility"`
	// Determines the visibility of the pivot table.
	ToggleButtonsVisibility pulumi.Input `pulumi:"toggleButtonsVisibility"`
}

func (TemplatePivotTableOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePivotTableOptions)(nil)).Elem()
}

func (i TemplatePivotTableOptionsArgs) ToTemplatePivotTableOptionsOutput() TemplatePivotTableOptionsOutput {
	return i.ToTemplatePivotTableOptionsOutputWithContext(context.Background())
}

func (i TemplatePivotTableOptionsArgs) ToTemplatePivotTableOptionsOutputWithContext(ctx context.Context) TemplatePivotTableOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTableOptionsOutput)
}

func (i TemplatePivotTableOptionsArgs) ToTemplatePivotTableOptionsPtrOutput() TemplatePivotTableOptionsPtrOutput {
	return i.ToTemplatePivotTableOptionsPtrOutputWithContext(context.Background())
}

func (i TemplatePivotTableOptionsArgs) ToTemplatePivotTableOptionsPtrOutputWithContext(ctx context.Context) TemplatePivotTableOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTableOptionsOutput).ToTemplatePivotTableOptionsPtrOutputWithContext(ctx)
}

// TemplatePivotTableOptionsPtrInput is an input type that accepts TemplatePivotTableOptionsArgs, TemplatePivotTableOptionsPtr and TemplatePivotTableOptionsPtrOutput values.
// You can construct a concrete instance of `TemplatePivotTableOptionsPtrInput` via:
//
//	        TemplatePivotTableOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplatePivotTableOptionsPtrInput interface {
	pulumi.Input

	ToTemplatePivotTableOptionsPtrOutput() TemplatePivotTableOptionsPtrOutput
	ToTemplatePivotTableOptionsPtrOutputWithContext(context.Context) TemplatePivotTableOptionsPtrOutput
}

type templatePivotTableOptionsPtrType TemplatePivotTableOptionsArgs

func TemplatePivotTableOptionsPtr(v *TemplatePivotTableOptionsArgs) TemplatePivotTableOptionsPtrInput {
	return (*templatePivotTableOptionsPtrType)(v)
}

func (*templatePivotTableOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePivotTableOptions)(nil)).Elem()
}

func (i *templatePivotTableOptionsPtrType) ToTemplatePivotTableOptionsPtrOutput() TemplatePivotTableOptionsPtrOutput {
	return i.ToTemplatePivotTableOptionsPtrOutputWithContext(context.Background())
}

func (i *templatePivotTableOptionsPtrType) ToTemplatePivotTableOptionsPtrOutputWithContext(ctx context.Context) TemplatePivotTableOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTableOptionsPtrOutput)
}

type TemplatePivotTableOptionsOutput struct{ *pulumi.OutputState }

func (TemplatePivotTableOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePivotTableOptions)(nil)).Elem()
}

func (o TemplatePivotTableOptionsOutput) ToTemplatePivotTableOptionsOutput() TemplatePivotTableOptionsOutput {
	return o
}

func (o TemplatePivotTableOptionsOutput) ToTemplatePivotTableOptionsOutputWithContext(ctx context.Context) TemplatePivotTableOptionsOutput {
	return o
}

func (o TemplatePivotTableOptionsOutput) ToTemplatePivotTableOptionsPtrOutput() TemplatePivotTableOptionsPtrOutput {
	return o.ToTemplatePivotTableOptionsPtrOutputWithContext(context.Background())
}

func (o TemplatePivotTableOptionsOutput) ToTemplatePivotTableOptionsPtrOutputWithContext(ctx context.Context) TemplatePivotTableOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplatePivotTableOptions) *TemplatePivotTableOptions {
		return &v
	}).(TemplatePivotTableOptionsPtrOutput)
}

// The table cell style of cells.
func (o TemplatePivotTableOptionsOutput) CellStyle() TemplateTableCellStylePtrOutput {
	return o.ApplyT(func(v TemplatePivotTableOptions) *TemplateTableCellStyle { return v.CellStyle }).(TemplateTableCellStylePtrOutput)
}

// The visibility setting of a pivot table's collapsed row dimension fields. If the value of this structure is `HIDDEN` , all collapsed columns in a pivot table are automatically hidden. The default value is `VISIBLE` .
func (o TemplatePivotTableOptionsOutput) CollapsedRowDimensionsVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplatePivotTableOptions) interface{} { return v.CollapsedRowDimensionsVisibility }).(pulumi.AnyOutput)
}

// The table cell style of the column header.
func (o TemplatePivotTableOptionsOutput) ColumnHeaderStyle() TemplateTableCellStylePtrOutput {
	return o.ApplyT(func(v TemplatePivotTableOptions) *TemplateTableCellStyle { return v.ColumnHeaderStyle }).(TemplateTableCellStylePtrOutput)
}

// The visibility of the column names.
func (o TemplatePivotTableOptionsOutput) ColumnNamesVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplatePivotTableOptions) interface{} { return v.ColumnNamesVisibility }).(pulumi.AnyOutput)
}

// String based length that is composed of value and unit in px
func (o TemplatePivotTableOptionsOutput) DefaultCellWidth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplatePivotTableOptions) *string { return v.DefaultCellWidth }).(pulumi.StringPtrOutput)
}

// The metric placement (row, column) options.
func (o TemplatePivotTableOptionsOutput) MetricPlacement() TemplatePivotTableMetricPlacementPtrOutput {
	return o.ApplyT(func(v TemplatePivotTableOptions) *TemplatePivotTableMetricPlacement { return v.MetricPlacement }).(TemplatePivotTableMetricPlacementPtrOutput)
}

// The row alternate color options (widget status, row alternate colors).
func (o TemplatePivotTableOptionsOutput) RowAlternateColorOptions() TemplateRowAlternateColorOptionsPtrOutput {
	return o.ApplyT(func(v TemplatePivotTableOptions) *TemplateRowAlternateColorOptions { return v.RowAlternateColorOptions }).(TemplateRowAlternateColorOptionsPtrOutput)
}

// The table cell style of row field names.
func (o TemplatePivotTableOptionsOutput) RowFieldNamesStyle() TemplateTableCellStylePtrOutput {
	return o.ApplyT(func(v TemplatePivotTableOptions) *TemplateTableCellStyle { return v.RowFieldNamesStyle }).(TemplateTableCellStylePtrOutput)
}

// The table cell style of the row headers.
func (o TemplatePivotTableOptionsOutput) RowHeaderStyle() TemplateTableCellStylePtrOutput {
	return o.ApplyT(func(v TemplatePivotTableOptions) *TemplateTableCellStyle { return v.RowHeaderStyle }).(TemplateTableCellStylePtrOutput)
}

// The options for the label that is located above the row headers. This option is only applicable when `RowsLayout` is set to `HIERARCHY` .
func (o TemplatePivotTableOptionsOutput) RowsLabelOptions() TemplatePivotTableRowsLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplatePivotTableOptions) *TemplatePivotTableRowsLabelOptions { return v.RowsLabelOptions }).(TemplatePivotTableRowsLabelOptionsPtrOutput)
}

// The layout for the row dimension headers of a pivot table. Choose one of the following options.
//
// - `TABULAR` : (Default) Each row field is displayed in a separate column.
// - `HIERARCHY` : All row fields are displayed in a single column. Indentation is used to differentiate row headers of different fields.
func (o TemplatePivotTableOptionsOutput) RowsLayout() TemplatePivotTableRowsLayoutPtrOutput {
	return o.ApplyT(func(v TemplatePivotTableOptions) *TemplatePivotTableRowsLayout { return v.RowsLayout }).(TemplatePivotTableRowsLayoutPtrOutput)
}

// The visibility of the single metric options.
func (o TemplatePivotTableOptionsOutput) SingleMetricVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplatePivotTableOptions) interface{} { return v.SingleMetricVisibility }).(pulumi.AnyOutput)
}

// Determines the visibility of the pivot table.
func (o TemplatePivotTableOptionsOutput) ToggleButtonsVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplatePivotTableOptions) interface{} { return v.ToggleButtonsVisibility }).(pulumi.AnyOutput)
}

type TemplatePivotTableOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplatePivotTableOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePivotTableOptions)(nil)).Elem()
}

func (o TemplatePivotTableOptionsPtrOutput) ToTemplatePivotTableOptionsPtrOutput() TemplatePivotTableOptionsPtrOutput {
	return o
}

func (o TemplatePivotTableOptionsPtrOutput) ToTemplatePivotTableOptionsPtrOutputWithContext(ctx context.Context) TemplatePivotTableOptionsPtrOutput {
	return o
}

func (o TemplatePivotTableOptionsPtrOutput) Elem() TemplatePivotTableOptionsOutput {
	return o.ApplyT(func(v *TemplatePivotTableOptions) TemplatePivotTableOptions {
		if v != nil {
			return *v
		}
		var ret TemplatePivotTableOptions
		return ret
	}).(TemplatePivotTableOptionsOutput)
}

// The table cell style of cells.
func (o TemplatePivotTableOptionsPtrOutput) CellStyle() TemplateTableCellStylePtrOutput {
	return o.ApplyT(func(v *TemplatePivotTableOptions) *TemplateTableCellStyle {
		if v == nil {
			return nil
		}
		return v.CellStyle
	}).(TemplateTableCellStylePtrOutput)
}

// The visibility setting of a pivot table's collapsed row dimension fields. If the value of this structure is `HIDDEN` , all collapsed columns in a pivot table are automatically hidden. The default value is `VISIBLE` .
func (o TemplatePivotTableOptionsPtrOutput) CollapsedRowDimensionsVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplatePivotTableOptions) interface{} {
		if v == nil {
			return nil
		}
		return v.CollapsedRowDimensionsVisibility
	}).(pulumi.AnyOutput)
}

// The table cell style of the column header.
func (o TemplatePivotTableOptionsPtrOutput) ColumnHeaderStyle() TemplateTableCellStylePtrOutput {
	return o.ApplyT(func(v *TemplatePivotTableOptions) *TemplateTableCellStyle {
		if v == nil {
			return nil
		}
		return v.ColumnHeaderStyle
	}).(TemplateTableCellStylePtrOutput)
}

// The visibility of the column names.
func (o TemplatePivotTableOptionsPtrOutput) ColumnNamesVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplatePivotTableOptions) interface{} {
		if v == nil {
			return nil
		}
		return v.ColumnNamesVisibility
	}).(pulumi.AnyOutput)
}

// String based length that is composed of value and unit in px
func (o TemplatePivotTableOptionsPtrOutput) DefaultCellWidth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplatePivotTableOptions) *string {
		if v == nil {
			return nil
		}
		return v.DefaultCellWidth
	}).(pulumi.StringPtrOutput)
}

// The metric placement (row, column) options.
func (o TemplatePivotTableOptionsPtrOutput) MetricPlacement() TemplatePivotTableMetricPlacementPtrOutput {
	return o.ApplyT(func(v *TemplatePivotTableOptions) *TemplatePivotTableMetricPlacement {
		if v == nil {
			return nil
		}
		return v.MetricPlacement
	}).(TemplatePivotTableMetricPlacementPtrOutput)
}

// The row alternate color options (widget status, row alternate colors).
func (o TemplatePivotTableOptionsPtrOutput) RowAlternateColorOptions() TemplateRowAlternateColorOptionsPtrOutput {
	return o.ApplyT(func(v *TemplatePivotTableOptions) *TemplateRowAlternateColorOptions {
		if v == nil {
			return nil
		}
		return v.RowAlternateColorOptions
	}).(TemplateRowAlternateColorOptionsPtrOutput)
}

// The table cell style of row field names.
func (o TemplatePivotTableOptionsPtrOutput) RowFieldNamesStyle() TemplateTableCellStylePtrOutput {
	return o.ApplyT(func(v *TemplatePivotTableOptions) *TemplateTableCellStyle {
		if v == nil {
			return nil
		}
		return v.RowFieldNamesStyle
	}).(TemplateTableCellStylePtrOutput)
}

// The table cell style of the row headers.
func (o TemplatePivotTableOptionsPtrOutput) RowHeaderStyle() TemplateTableCellStylePtrOutput {
	return o.ApplyT(func(v *TemplatePivotTableOptions) *TemplateTableCellStyle {
		if v == nil {
			return nil
		}
		return v.RowHeaderStyle
	}).(TemplateTableCellStylePtrOutput)
}

// The options for the label that is located above the row headers. This option is only applicable when `RowsLayout` is set to `HIERARCHY` .
func (o TemplatePivotTableOptionsPtrOutput) RowsLabelOptions() TemplatePivotTableRowsLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplatePivotTableOptions) *TemplatePivotTableRowsLabelOptions {
		if v == nil {
			return nil
		}
		return v.RowsLabelOptions
	}).(TemplatePivotTableRowsLabelOptionsPtrOutput)
}

// The layout for the row dimension headers of a pivot table. Choose one of the following options.
//
// - `TABULAR` : (Default) Each row field is displayed in a separate column.
// - `HIERARCHY` : All row fields are displayed in a single column. Indentation is used to differentiate row headers of different fields.
func (o TemplatePivotTableOptionsPtrOutput) RowsLayout() TemplatePivotTableRowsLayoutPtrOutput {
	return o.ApplyT(func(v *TemplatePivotTableOptions) *TemplatePivotTableRowsLayout {
		if v == nil {
			return nil
		}
		return v.RowsLayout
	}).(TemplatePivotTableRowsLayoutPtrOutput)
}

// The visibility of the single metric options.
func (o TemplatePivotTableOptionsPtrOutput) SingleMetricVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplatePivotTableOptions) interface{} {
		if v == nil {
			return nil
		}
		return v.SingleMetricVisibility
	}).(pulumi.AnyOutput)
}

// Determines the visibility of the pivot table.
func (o TemplatePivotTableOptionsPtrOutput) ToggleButtonsVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplatePivotTableOptions) interface{} {
		if v == nil {
			return nil
		}
		return v.ToggleButtonsVisibility
	}).(pulumi.AnyOutput)
}

type TemplatePivotTablePaginatedReportOptions struct {
	// The visibility of the repeating header rows on each page.
	OverflowColumnHeaderVisibility interface{} `pulumi:"overflowColumnHeaderVisibility"`
	// The visibility of the printing table overflow across pages.
	VerticalOverflowVisibility interface{} `pulumi:"verticalOverflowVisibility"`
}

// TemplatePivotTablePaginatedReportOptionsInput is an input type that accepts TemplatePivotTablePaginatedReportOptionsArgs and TemplatePivotTablePaginatedReportOptionsOutput values.
// You can construct a concrete instance of `TemplatePivotTablePaginatedReportOptionsInput` via:
//
//	TemplatePivotTablePaginatedReportOptionsArgs{...}
type TemplatePivotTablePaginatedReportOptionsInput interface {
	pulumi.Input

	ToTemplatePivotTablePaginatedReportOptionsOutput() TemplatePivotTablePaginatedReportOptionsOutput
	ToTemplatePivotTablePaginatedReportOptionsOutputWithContext(context.Context) TemplatePivotTablePaginatedReportOptionsOutput
}

type TemplatePivotTablePaginatedReportOptionsArgs struct {
	// The visibility of the repeating header rows on each page.
	OverflowColumnHeaderVisibility pulumi.Input `pulumi:"overflowColumnHeaderVisibility"`
	// The visibility of the printing table overflow across pages.
	VerticalOverflowVisibility pulumi.Input `pulumi:"verticalOverflowVisibility"`
}

func (TemplatePivotTablePaginatedReportOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePivotTablePaginatedReportOptions)(nil)).Elem()
}

func (i TemplatePivotTablePaginatedReportOptionsArgs) ToTemplatePivotTablePaginatedReportOptionsOutput() TemplatePivotTablePaginatedReportOptionsOutput {
	return i.ToTemplatePivotTablePaginatedReportOptionsOutputWithContext(context.Background())
}

func (i TemplatePivotTablePaginatedReportOptionsArgs) ToTemplatePivotTablePaginatedReportOptionsOutputWithContext(ctx context.Context) TemplatePivotTablePaginatedReportOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTablePaginatedReportOptionsOutput)
}

func (i TemplatePivotTablePaginatedReportOptionsArgs) ToTemplatePivotTablePaginatedReportOptionsPtrOutput() TemplatePivotTablePaginatedReportOptionsPtrOutput {
	return i.ToTemplatePivotTablePaginatedReportOptionsPtrOutputWithContext(context.Background())
}

func (i TemplatePivotTablePaginatedReportOptionsArgs) ToTemplatePivotTablePaginatedReportOptionsPtrOutputWithContext(ctx context.Context) TemplatePivotTablePaginatedReportOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTablePaginatedReportOptionsOutput).ToTemplatePivotTablePaginatedReportOptionsPtrOutputWithContext(ctx)
}

// TemplatePivotTablePaginatedReportOptionsPtrInput is an input type that accepts TemplatePivotTablePaginatedReportOptionsArgs, TemplatePivotTablePaginatedReportOptionsPtr and TemplatePivotTablePaginatedReportOptionsPtrOutput values.
// You can construct a concrete instance of `TemplatePivotTablePaginatedReportOptionsPtrInput` via:
//
//	        TemplatePivotTablePaginatedReportOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplatePivotTablePaginatedReportOptionsPtrInput interface {
	pulumi.Input

	ToTemplatePivotTablePaginatedReportOptionsPtrOutput() TemplatePivotTablePaginatedReportOptionsPtrOutput
	ToTemplatePivotTablePaginatedReportOptionsPtrOutputWithContext(context.Context) TemplatePivotTablePaginatedReportOptionsPtrOutput
}

type templatePivotTablePaginatedReportOptionsPtrType TemplatePivotTablePaginatedReportOptionsArgs

func TemplatePivotTablePaginatedReportOptionsPtr(v *TemplatePivotTablePaginatedReportOptionsArgs) TemplatePivotTablePaginatedReportOptionsPtrInput {
	return (*templatePivotTablePaginatedReportOptionsPtrType)(v)
}

func (*templatePivotTablePaginatedReportOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePivotTablePaginatedReportOptions)(nil)).Elem()
}

func (i *templatePivotTablePaginatedReportOptionsPtrType) ToTemplatePivotTablePaginatedReportOptionsPtrOutput() TemplatePivotTablePaginatedReportOptionsPtrOutput {
	return i.ToTemplatePivotTablePaginatedReportOptionsPtrOutputWithContext(context.Background())
}

func (i *templatePivotTablePaginatedReportOptionsPtrType) ToTemplatePivotTablePaginatedReportOptionsPtrOutputWithContext(ctx context.Context) TemplatePivotTablePaginatedReportOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTablePaginatedReportOptionsPtrOutput)
}

type TemplatePivotTablePaginatedReportOptionsOutput struct{ *pulumi.OutputState }

func (TemplatePivotTablePaginatedReportOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePivotTablePaginatedReportOptions)(nil)).Elem()
}

func (o TemplatePivotTablePaginatedReportOptionsOutput) ToTemplatePivotTablePaginatedReportOptionsOutput() TemplatePivotTablePaginatedReportOptionsOutput {
	return o
}

func (o TemplatePivotTablePaginatedReportOptionsOutput) ToTemplatePivotTablePaginatedReportOptionsOutputWithContext(ctx context.Context) TemplatePivotTablePaginatedReportOptionsOutput {
	return o
}

func (o TemplatePivotTablePaginatedReportOptionsOutput) ToTemplatePivotTablePaginatedReportOptionsPtrOutput() TemplatePivotTablePaginatedReportOptionsPtrOutput {
	return o.ToTemplatePivotTablePaginatedReportOptionsPtrOutputWithContext(context.Background())
}

func (o TemplatePivotTablePaginatedReportOptionsOutput) ToTemplatePivotTablePaginatedReportOptionsPtrOutputWithContext(ctx context.Context) TemplatePivotTablePaginatedReportOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplatePivotTablePaginatedReportOptions) *TemplatePivotTablePaginatedReportOptions {
		return &v
	}).(TemplatePivotTablePaginatedReportOptionsPtrOutput)
}

// The visibility of the repeating header rows on each page.
func (o TemplatePivotTablePaginatedReportOptionsOutput) OverflowColumnHeaderVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplatePivotTablePaginatedReportOptions) interface{} { return v.OverflowColumnHeaderVisibility }).(pulumi.AnyOutput)
}

// The visibility of the printing table overflow across pages.
func (o TemplatePivotTablePaginatedReportOptionsOutput) VerticalOverflowVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplatePivotTablePaginatedReportOptions) interface{} { return v.VerticalOverflowVisibility }).(pulumi.AnyOutput)
}

type TemplatePivotTablePaginatedReportOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplatePivotTablePaginatedReportOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePivotTablePaginatedReportOptions)(nil)).Elem()
}

func (o TemplatePivotTablePaginatedReportOptionsPtrOutput) ToTemplatePivotTablePaginatedReportOptionsPtrOutput() TemplatePivotTablePaginatedReportOptionsPtrOutput {
	return o
}

func (o TemplatePivotTablePaginatedReportOptionsPtrOutput) ToTemplatePivotTablePaginatedReportOptionsPtrOutputWithContext(ctx context.Context) TemplatePivotTablePaginatedReportOptionsPtrOutput {
	return o
}

func (o TemplatePivotTablePaginatedReportOptionsPtrOutput) Elem() TemplatePivotTablePaginatedReportOptionsOutput {
	return o.ApplyT(func(v *TemplatePivotTablePaginatedReportOptions) TemplatePivotTablePaginatedReportOptions {
		if v != nil {
			return *v
		}
		var ret TemplatePivotTablePaginatedReportOptions
		return ret
	}).(TemplatePivotTablePaginatedReportOptionsOutput)
}

// The visibility of the repeating header rows on each page.
func (o TemplatePivotTablePaginatedReportOptionsPtrOutput) OverflowColumnHeaderVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplatePivotTablePaginatedReportOptions) interface{} {
		if v == nil {
			return nil
		}
		return v.OverflowColumnHeaderVisibility
	}).(pulumi.AnyOutput)
}

// The visibility of the printing table overflow across pages.
func (o TemplatePivotTablePaginatedReportOptionsPtrOutput) VerticalOverflowVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplatePivotTablePaginatedReportOptions) interface{} {
		if v == nil {
			return nil
		}
		return v.VerticalOverflowVisibility
	}).(pulumi.AnyOutput)
}

type TemplatePivotTableRowsLabelOptions struct {
	// The custom label string for the rows label.
	CustomLabel *string `pulumi:"customLabel"`
	// The visibility of the rows label.
	Visibility interface{} `pulumi:"visibility"`
}

// TemplatePivotTableRowsLabelOptionsInput is an input type that accepts TemplatePivotTableRowsLabelOptionsArgs and TemplatePivotTableRowsLabelOptionsOutput values.
// You can construct a concrete instance of `TemplatePivotTableRowsLabelOptionsInput` via:
//
//	TemplatePivotTableRowsLabelOptionsArgs{...}
type TemplatePivotTableRowsLabelOptionsInput interface {
	pulumi.Input

	ToTemplatePivotTableRowsLabelOptionsOutput() TemplatePivotTableRowsLabelOptionsOutput
	ToTemplatePivotTableRowsLabelOptionsOutputWithContext(context.Context) TemplatePivotTableRowsLabelOptionsOutput
}

type TemplatePivotTableRowsLabelOptionsArgs struct {
	// The custom label string for the rows label.
	CustomLabel pulumi.StringPtrInput `pulumi:"customLabel"`
	// The visibility of the rows label.
	Visibility pulumi.Input `pulumi:"visibility"`
}

func (TemplatePivotTableRowsLabelOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePivotTableRowsLabelOptions)(nil)).Elem()
}

func (i TemplatePivotTableRowsLabelOptionsArgs) ToTemplatePivotTableRowsLabelOptionsOutput() TemplatePivotTableRowsLabelOptionsOutput {
	return i.ToTemplatePivotTableRowsLabelOptionsOutputWithContext(context.Background())
}

func (i TemplatePivotTableRowsLabelOptionsArgs) ToTemplatePivotTableRowsLabelOptionsOutputWithContext(ctx context.Context) TemplatePivotTableRowsLabelOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTableRowsLabelOptionsOutput)
}

func (i TemplatePivotTableRowsLabelOptionsArgs) ToTemplatePivotTableRowsLabelOptionsPtrOutput() TemplatePivotTableRowsLabelOptionsPtrOutput {
	return i.ToTemplatePivotTableRowsLabelOptionsPtrOutputWithContext(context.Background())
}

func (i TemplatePivotTableRowsLabelOptionsArgs) ToTemplatePivotTableRowsLabelOptionsPtrOutputWithContext(ctx context.Context) TemplatePivotTableRowsLabelOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTableRowsLabelOptionsOutput).ToTemplatePivotTableRowsLabelOptionsPtrOutputWithContext(ctx)
}

// TemplatePivotTableRowsLabelOptionsPtrInput is an input type that accepts TemplatePivotTableRowsLabelOptionsArgs, TemplatePivotTableRowsLabelOptionsPtr and TemplatePivotTableRowsLabelOptionsPtrOutput values.
// You can construct a concrete instance of `TemplatePivotTableRowsLabelOptionsPtrInput` via:
//
//	        TemplatePivotTableRowsLabelOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplatePivotTableRowsLabelOptionsPtrInput interface {
	pulumi.Input

	ToTemplatePivotTableRowsLabelOptionsPtrOutput() TemplatePivotTableRowsLabelOptionsPtrOutput
	ToTemplatePivotTableRowsLabelOptionsPtrOutputWithContext(context.Context) TemplatePivotTableRowsLabelOptionsPtrOutput
}

type templatePivotTableRowsLabelOptionsPtrType TemplatePivotTableRowsLabelOptionsArgs

func TemplatePivotTableRowsLabelOptionsPtr(v *TemplatePivotTableRowsLabelOptionsArgs) TemplatePivotTableRowsLabelOptionsPtrInput {
	return (*templatePivotTableRowsLabelOptionsPtrType)(v)
}

func (*templatePivotTableRowsLabelOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePivotTableRowsLabelOptions)(nil)).Elem()
}

func (i *templatePivotTableRowsLabelOptionsPtrType) ToTemplatePivotTableRowsLabelOptionsPtrOutput() TemplatePivotTableRowsLabelOptionsPtrOutput {
	return i.ToTemplatePivotTableRowsLabelOptionsPtrOutputWithContext(context.Background())
}

func (i *templatePivotTableRowsLabelOptionsPtrType) ToTemplatePivotTableRowsLabelOptionsPtrOutputWithContext(ctx context.Context) TemplatePivotTableRowsLabelOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTableRowsLabelOptionsPtrOutput)
}

type TemplatePivotTableRowsLabelOptionsOutput struct{ *pulumi.OutputState }

func (TemplatePivotTableRowsLabelOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePivotTableRowsLabelOptions)(nil)).Elem()
}

func (o TemplatePivotTableRowsLabelOptionsOutput) ToTemplatePivotTableRowsLabelOptionsOutput() TemplatePivotTableRowsLabelOptionsOutput {
	return o
}

func (o TemplatePivotTableRowsLabelOptionsOutput) ToTemplatePivotTableRowsLabelOptionsOutputWithContext(ctx context.Context) TemplatePivotTableRowsLabelOptionsOutput {
	return o
}

func (o TemplatePivotTableRowsLabelOptionsOutput) ToTemplatePivotTableRowsLabelOptionsPtrOutput() TemplatePivotTableRowsLabelOptionsPtrOutput {
	return o.ToTemplatePivotTableRowsLabelOptionsPtrOutputWithContext(context.Background())
}

func (o TemplatePivotTableRowsLabelOptionsOutput) ToTemplatePivotTableRowsLabelOptionsPtrOutputWithContext(ctx context.Context) TemplatePivotTableRowsLabelOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplatePivotTableRowsLabelOptions) *TemplatePivotTableRowsLabelOptions {
		return &v
	}).(TemplatePivotTableRowsLabelOptionsPtrOutput)
}

// The custom label string for the rows label.
func (o TemplatePivotTableRowsLabelOptionsOutput) CustomLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplatePivotTableRowsLabelOptions) *string { return v.CustomLabel }).(pulumi.StringPtrOutput)
}

// The visibility of the rows label.
func (o TemplatePivotTableRowsLabelOptionsOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplatePivotTableRowsLabelOptions) interface{} { return v.Visibility }).(pulumi.AnyOutput)
}

type TemplatePivotTableRowsLabelOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplatePivotTableRowsLabelOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePivotTableRowsLabelOptions)(nil)).Elem()
}

func (o TemplatePivotTableRowsLabelOptionsPtrOutput) ToTemplatePivotTableRowsLabelOptionsPtrOutput() TemplatePivotTableRowsLabelOptionsPtrOutput {
	return o
}

func (o TemplatePivotTableRowsLabelOptionsPtrOutput) ToTemplatePivotTableRowsLabelOptionsPtrOutputWithContext(ctx context.Context) TemplatePivotTableRowsLabelOptionsPtrOutput {
	return o
}

func (o TemplatePivotTableRowsLabelOptionsPtrOutput) Elem() TemplatePivotTableRowsLabelOptionsOutput {
	return o.ApplyT(func(v *TemplatePivotTableRowsLabelOptions) TemplatePivotTableRowsLabelOptions {
		if v != nil {
			return *v
		}
		var ret TemplatePivotTableRowsLabelOptions
		return ret
	}).(TemplatePivotTableRowsLabelOptionsOutput)
}

// The custom label string for the rows label.
func (o TemplatePivotTableRowsLabelOptionsPtrOutput) CustomLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplatePivotTableRowsLabelOptions) *string {
		if v == nil {
			return nil
		}
		return v.CustomLabel
	}).(pulumi.StringPtrOutput)
}

// The visibility of the rows label.
func (o TemplatePivotTableRowsLabelOptionsPtrOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplatePivotTableRowsLabelOptions) interface{} {
		if v == nil {
			return nil
		}
		return v.Visibility
	}).(pulumi.AnyOutput)
}

type TemplatePivotTableSortBy struct {
	// The column sort (field id, direction) for the pivot table sort by options.
	Column *TemplateColumnSort `pulumi:"column"`
	// The data path sort (data path value, direction) for the pivot table sort by options.
	DataPath *TemplateDataPathSort `pulumi:"dataPath"`
	// The field sort (field id, direction) for the pivot table sort by options.
	Field *TemplateFieldSort `pulumi:"field"`
}

// TemplatePivotTableSortByInput is an input type that accepts TemplatePivotTableSortByArgs and TemplatePivotTableSortByOutput values.
// You can construct a concrete instance of `TemplatePivotTableSortByInput` via:
//
//	TemplatePivotTableSortByArgs{...}
type TemplatePivotTableSortByInput interface {
	pulumi.Input

	ToTemplatePivotTableSortByOutput() TemplatePivotTableSortByOutput
	ToTemplatePivotTableSortByOutputWithContext(context.Context) TemplatePivotTableSortByOutput
}

type TemplatePivotTableSortByArgs struct {
	// The column sort (field id, direction) for the pivot table sort by options.
	Column TemplateColumnSortPtrInput `pulumi:"column"`
	// The data path sort (data path value, direction) for the pivot table sort by options.
	DataPath TemplateDataPathSortPtrInput `pulumi:"dataPath"`
	// The field sort (field id, direction) for the pivot table sort by options.
	Field TemplateFieldSortPtrInput `pulumi:"field"`
}

func (TemplatePivotTableSortByArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePivotTableSortBy)(nil)).Elem()
}

func (i TemplatePivotTableSortByArgs) ToTemplatePivotTableSortByOutput() TemplatePivotTableSortByOutput {
	return i.ToTemplatePivotTableSortByOutputWithContext(context.Background())
}

func (i TemplatePivotTableSortByArgs) ToTemplatePivotTableSortByOutputWithContext(ctx context.Context) TemplatePivotTableSortByOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTableSortByOutput)
}

type TemplatePivotTableSortByOutput struct{ *pulumi.OutputState }

func (TemplatePivotTableSortByOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePivotTableSortBy)(nil)).Elem()
}

func (o TemplatePivotTableSortByOutput) ToTemplatePivotTableSortByOutput() TemplatePivotTableSortByOutput {
	return o
}

func (o TemplatePivotTableSortByOutput) ToTemplatePivotTableSortByOutputWithContext(ctx context.Context) TemplatePivotTableSortByOutput {
	return o
}

// The column sort (field id, direction) for the pivot table sort by options.
func (o TemplatePivotTableSortByOutput) Column() TemplateColumnSortPtrOutput {
	return o.ApplyT(func(v TemplatePivotTableSortBy) *TemplateColumnSort { return v.Column }).(TemplateColumnSortPtrOutput)
}

// The data path sort (data path value, direction) for the pivot table sort by options.
func (o TemplatePivotTableSortByOutput) DataPath() TemplateDataPathSortPtrOutput {
	return o.ApplyT(func(v TemplatePivotTableSortBy) *TemplateDataPathSort { return v.DataPath }).(TemplateDataPathSortPtrOutput)
}

// The field sort (field id, direction) for the pivot table sort by options.
func (o TemplatePivotTableSortByOutput) Field() TemplateFieldSortPtrOutput {
	return o.ApplyT(func(v TemplatePivotTableSortBy) *TemplateFieldSort { return v.Field }).(TemplateFieldSortPtrOutput)
}

type TemplatePivotTableSortConfiguration struct {
	// The field sort options for a pivot table sort configuration.
	FieldSortOptions []TemplatePivotFieldSortOptions `pulumi:"fieldSortOptions"`
}

// TemplatePivotTableSortConfigurationInput is an input type that accepts TemplatePivotTableSortConfigurationArgs and TemplatePivotTableSortConfigurationOutput values.
// You can construct a concrete instance of `TemplatePivotTableSortConfigurationInput` via:
//
//	TemplatePivotTableSortConfigurationArgs{...}
type TemplatePivotTableSortConfigurationInput interface {
	pulumi.Input

	ToTemplatePivotTableSortConfigurationOutput() TemplatePivotTableSortConfigurationOutput
	ToTemplatePivotTableSortConfigurationOutputWithContext(context.Context) TemplatePivotTableSortConfigurationOutput
}

type TemplatePivotTableSortConfigurationArgs struct {
	// The field sort options for a pivot table sort configuration.
	FieldSortOptions TemplatePivotFieldSortOptionsArrayInput `pulumi:"fieldSortOptions"`
}

func (TemplatePivotTableSortConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePivotTableSortConfiguration)(nil)).Elem()
}

func (i TemplatePivotTableSortConfigurationArgs) ToTemplatePivotTableSortConfigurationOutput() TemplatePivotTableSortConfigurationOutput {
	return i.ToTemplatePivotTableSortConfigurationOutputWithContext(context.Background())
}

func (i TemplatePivotTableSortConfigurationArgs) ToTemplatePivotTableSortConfigurationOutputWithContext(ctx context.Context) TemplatePivotTableSortConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTableSortConfigurationOutput)
}

func (i TemplatePivotTableSortConfigurationArgs) ToTemplatePivotTableSortConfigurationPtrOutput() TemplatePivotTableSortConfigurationPtrOutput {
	return i.ToTemplatePivotTableSortConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplatePivotTableSortConfigurationArgs) ToTemplatePivotTableSortConfigurationPtrOutputWithContext(ctx context.Context) TemplatePivotTableSortConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTableSortConfigurationOutput).ToTemplatePivotTableSortConfigurationPtrOutputWithContext(ctx)
}

// TemplatePivotTableSortConfigurationPtrInput is an input type that accepts TemplatePivotTableSortConfigurationArgs, TemplatePivotTableSortConfigurationPtr and TemplatePivotTableSortConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplatePivotTableSortConfigurationPtrInput` via:
//
//	        TemplatePivotTableSortConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplatePivotTableSortConfigurationPtrInput interface {
	pulumi.Input

	ToTemplatePivotTableSortConfigurationPtrOutput() TemplatePivotTableSortConfigurationPtrOutput
	ToTemplatePivotTableSortConfigurationPtrOutputWithContext(context.Context) TemplatePivotTableSortConfigurationPtrOutput
}

type templatePivotTableSortConfigurationPtrType TemplatePivotTableSortConfigurationArgs

func TemplatePivotTableSortConfigurationPtr(v *TemplatePivotTableSortConfigurationArgs) TemplatePivotTableSortConfigurationPtrInput {
	return (*templatePivotTableSortConfigurationPtrType)(v)
}

func (*templatePivotTableSortConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePivotTableSortConfiguration)(nil)).Elem()
}

func (i *templatePivotTableSortConfigurationPtrType) ToTemplatePivotTableSortConfigurationPtrOutput() TemplatePivotTableSortConfigurationPtrOutput {
	return i.ToTemplatePivotTableSortConfigurationPtrOutputWithContext(context.Background())
}

func (i *templatePivotTableSortConfigurationPtrType) ToTemplatePivotTableSortConfigurationPtrOutputWithContext(ctx context.Context) TemplatePivotTableSortConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTableSortConfigurationPtrOutput)
}

type TemplatePivotTableSortConfigurationOutput struct{ *pulumi.OutputState }

func (TemplatePivotTableSortConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePivotTableSortConfiguration)(nil)).Elem()
}

func (o TemplatePivotTableSortConfigurationOutput) ToTemplatePivotTableSortConfigurationOutput() TemplatePivotTableSortConfigurationOutput {
	return o
}

func (o TemplatePivotTableSortConfigurationOutput) ToTemplatePivotTableSortConfigurationOutputWithContext(ctx context.Context) TemplatePivotTableSortConfigurationOutput {
	return o
}

func (o TemplatePivotTableSortConfigurationOutput) ToTemplatePivotTableSortConfigurationPtrOutput() TemplatePivotTableSortConfigurationPtrOutput {
	return o.ToTemplatePivotTableSortConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplatePivotTableSortConfigurationOutput) ToTemplatePivotTableSortConfigurationPtrOutputWithContext(ctx context.Context) TemplatePivotTableSortConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplatePivotTableSortConfiguration) *TemplatePivotTableSortConfiguration {
		return &v
	}).(TemplatePivotTableSortConfigurationPtrOutput)
}

// The field sort options for a pivot table sort configuration.
func (o TemplatePivotTableSortConfigurationOutput) FieldSortOptions() TemplatePivotFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v TemplatePivotTableSortConfiguration) []TemplatePivotFieldSortOptions { return v.FieldSortOptions }).(TemplatePivotFieldSortOptionsArrayOutput)
}

type TemplatePivotTableSortConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplatePivotTableSortConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePivotTableSortConfiguration)(nil)).Elem()
}

func (o TemplatePivotTableSortConfigurationPtrOutput) ToTemplatePivotTableSortConfigurationPtrOutput() TemplatePivotTableSortConfigurationPtrOutput {
	return o
}

func (o TemplatePivotTableSortConfigurationPtrOutput) ToTemplatePivotTableSortConfigurationPtrOutputWithContext(ctx context.Context) TemplatePivotTableSortConfigurationPtrOutput {
	return o
}

func (o TemplatePivotTableSortConfigurationPtrOutput) Elem() TemplatePivotTableSortConfigurationOutput {
	return o.ApplyT(func(v *TemplatePivotTableSortConfiguration) TemplatePivotTableSortConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplatePivotTableSortConfiguration
		return ret
	}).(TemplatePivotTableSortConfigurationOutput)
}

// The field sort options for a pivot table sort configuration.
func (o TemplatePivotTableSortConfigurationPtrOutput) FieldSortOptions() TemplatePivotFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v *TemplatePivotTableSortConfiguration) []TemplatePivotFieldSortOptions {
		if v == nil {
			return nil
		}
		return v.FieldSortOptions
	}).(TemplatePivotFieldSortOptionsArrayOutput)
}

type TemplatePivotTableTotalOptions struct {
	// The column subtotal options.
	ColumnSubtotalOptions *TemplateSubtotalOptions `pulumi:"columnSubtotalOptions"`
	// The column total options.
	ColumnTotalOptions *TemplatePivotTotalOptions `pulumi:"columnTotalOptions"`
	// The row subtotal options.
	RowSubtotalOptions *TemplateSubtotalOptions `pulumi:"rowSubtotalOptions"`
	// The row total options.
	RowTotalOptions *TemplatePivotTotalOptions `pulumi:"rowTotalOptions"`
}

// TemplatePivotTableTotalOptionsInput is an input type that accepts TemplatePivotTableTotalOptionsArgs and TemplatePivotTableTotalOptionsOutput values.
// You can construct a concrete instance of `TemplatePivotTableTotalOptionsInput` via:
//
//	TemplatePivotTableTotalOptionsArgs{...}
type TemplatePivotTableTotalOptionsInput interface {
	pulumi.Input

	ToTemplatePivotTableTotalOptionsOutput() TemplatePivotTableTotalOptionsOutput
	ToTemplatePivotTableTotalOptionsOutputWithContext(context.Context) TemplatePivotTableTotalOptionsOutput
}

type TemplatePivotTableTotalOptionsArgs struct {
	// The column subtotal options.
	ColumnSubtotalOptions TemplateSubtotalOptionsPtrInput `pulumi:"columnSubtotalOptions"`
	// The column total options.
	ColumnTotalOptions TemplatePivotTotalOptionsPtrInput `pulumi:"columnTotalOptions"`
	// The row subtotal options.
	RowSubtotalOptions TemplateSubtotalOptionsPtrInput `pulumi:"rowSubtotalOptions"`
	// The row total options.
	RowTotalOptions TemplatePivotTotalOptionsPtrInput `pulumi:"rowTotalOptions"`
}

func (TemplatePivotTableTotalOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePivotTableTotalOptions)(nil)).Elem()
}

func (i TemplatePivotTableTotalOptionsArgs) ToTemplatePivotTableTotalOptionsOutput() TemplatePivotTableTotalOptionsOutput {
	return i.ToTemplatePivotTableTotalOptionsOutputWithContext(context.Background())
}

func (i TemplatePivotTableTotalOptionsArgs) ToTemplatePivotTableTotalOptionsOutputWithContext(ctx context.Context) TemplatePivotTableTotalOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTableTotalOptionsOutput)
}

func (i TemplatePivotTableTotalOptionsArgs) ToTemplatePivotTableTotalOptionsPtrOutput() TemplatePivotTableTotalOptionsPtrOutput {
	return i.ToTemplatePivotTableTotalOptionsPtrOutputWithContext(context.Background())
}

func (i TemplatePivotTableTotalOptionsArgs) ToTemplatePivotTableTotalOptionsPtrOutputWithContext(ctx context.Context) TemplatePivotTableTotalOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTableTotalOptionsOutput).ToTemplatePivotTableTotalOptionsPtrOutputWithContext(ctx)
}

// TemplatePivotTableTotalOptionsPtrInput is an input type that accepts TemplatePivotTableTotalOptionsArgs, TemplatePivotTableTotalOptionsPtr and TemplatePivotTableTotalOptionsPtrOutput values.
// You can construct a concrete instance of `TemplatePivotTableTotalOptionsPtrInput` via:
//
//	        TemplatePivotTableTotalOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplatePivotTableTotalOptionsPtrInput interface {
	pulumi.Input

	ToTemplatePivotTableTotalOptionsPtrOutput() TemplatePivotTableTotalOptionsPtrOutput
	ToTemplatePivotTableTotalOptionsPtrOutputWithContext(context.Context) TemplatePivotTableTotalOptionsPtrOutput
}

type templatePivotTableTotalOptionsPtrType TemplatePivotTableTotalOptionsArgs

func TemplatePivotTableTotalOptionsPtr(v *TemplatePivotTableTotalOptionsArgs) TemplatePivotTableTotalOptionsPtrInput {
	return (*templatePivotTableTotalOptionsPtrType)(v)
}

func (*templatePivotTableTotalOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePivotTableTotalOptions)(nil)).Elem()
}

func (i *templatePivotTableTotalOptionsPtrType) ToTemplatePivotTableTotalOptionsPtrOutput() TemplatePivotTableTotalOptionsPtrOutput {
	return i.ToTemplatePivotTableTotalOptionsPtrOutputWithContext(context.Background())
}

func (i *templatePivotTableTotalOptionsPtrType) ToTemplatePivotTableTotalOptionsPtrOutputWithContext(ctx context.Context) TemplatePivotTableTotalOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTableTotalOptionsPtrOutput)
}

type TemplatePivotTableTotalOptionsOutput struct{ *pulumi.OutputState }

func (TemplatePivotTableTotalOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePivotTableTotalOptions)(nil)).Elem()
}

func (o TemplatePivotTableTotalOptionsOutput) ToTemplatePivotTableTotalOptionsOutput() TemplatePivotTableTotalOptionsOutput {
	return o
}

func (o TemplatePivotTableTotalOptionsOutput) ToTemplatePivotTableTotalOptionsOutputWithContext(ctx context.Context) TemplatePivotTableTotalOptionsOutput {
	return o
}

func (o TemplatePivotTableTotalOptionsOutput) ToTemplatePivotTableTotalOptionsPtrOutput() TemplatePivotTableTotalOptionsPtrOutput {
	return o.ToTemplatePivotTableTotalOptionsPtrOutputWithContext(context.Background())
}

func (o TemplatePivotTableTotalOptionsOutput) ToTemplatePivotTableTotalOptionsPtrOutputWithContext(ctx context.Context) TemplatePivotTableTotalOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplatePivotTableTotalOptions) *TemplatePivotTableTotalOptions {
		return &v
	}).(TemplatePivotTableTotalOptionsPtrOutput)
}

// The column subtotal options.
func (o TemplatePivotTableTotalOptionsOutput) ColumnSubtotalOptions() TemplateSubtotalOptionsPtrOutput {
	return o.ApplyT(func(v TemplatePivotTableTotalOptions) *TemplateSubtotalOptions { return v.ColumnSubtotalOptions }).(TemplateSubtotalOptionsPtrOutput)
}

// The column total options.
func (o TemplatePivotTableTotalOptionsOutput) ColumnTotalOptions() TemplatePivotTotalOptionsPtrOutput {
	return o.ApplyT(func(v TemplatePivotTableTotalOptions) *TemplatePivotTotalOptions { return v.ColumnTotalOptions }).(TemplatePivotTotalOptionsPtrOutput)
}

// The row subtotal options.
func (o TemplatePivotTableTotalOptionsOutput) RowSubtotalOptions() TemplateSubtotalOptionsPtrOutput {
	return o.ApplyT(func(v TemplatePivotTableTotalOptions) *TemplateSubtotalOptions { return v.RowSubtotalOptions }).(TemplateSubtotalOptionsPtrOutput)
}

// The row total options.
func (o TemplatePivotTableTotalOptionsOutput) RowTotalOptions() TemplatePivotTotalOptionsPtrOutput {
	return o.ApplyT(func(v TemplatePivotTableTotalOptions) *TemplatePivotTotalOptions { return v.RowTotalOptions }).(TemplatePivotTotalOptionsPtrOutput)
}

type TemplatePivotTableTotalOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplatePivotTableTotalOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePivotTableTotalOptions)(nil)).Elem()
}

func (o TemplatePivotTableTotalOptionsPtrOutput) ToTemplatePivotTableTotalOptionsPtrOutput() TemplatePivotTableTotalOptionsPtrOutput {
	return o
}

func (o TemplatePivotTableTotalOptionsPtrOutput) ToTemplatePivotTableTotalOptionsPtrOutputWithContext(ctx context.Context) TemplatePivotTableTotalOptionsPtrOutput {
	return o
}

func (o TemplatePivotTableTotalOptionsPtrOutput) Elem() TemplatePivotTableTotalOptionsOutput {
	return o.ApplyT(func(v *TemplatePivotTableTotalOptions) TemplatePivotTableTotalOptions {
		if v != nil {
			return *v
		}
		var ret TemplatePivotTableTotalOptions
		return ret
	}).(TemplatePivotTableTotalOptionsOutput)
}

// The column subtotal options.
func (o TemplatePivotTableTotalOptionsPtrOutput) ColumnSubtotalOptions() TemplateSubtotalOptionsPtrOutput {
	return o.ApplyT(func(v *TemplatePivotTableTotalOptions) *TemplateSubtotalOptions {
		if v == nil {
			return nil
		}
		return v.ColumnSubtotalOptions
	}).(TemplateSubtotalOptionsPtrOutput)
}

// The column total options.
func (o TemplatePivotTableTotalOptionsPtrOutput) ColumnTotalOptions() TemplatePivotTotalOptionsPtrOutput {
	return o.ApplyT(func(v *TemplatePivotTableTotalOptions) *TemplatePivotTotalOptions {
		if v == nil {
			return nil
		}
		return v.ColumnTotalOptions
	}).(TemplatePivotTotalOptionsPtrOutput)
}

// The row subtotal options.
func (o TemplatePivotTableTotalOptionsPtrOutput) RowSubtotalOptions() TemplateSubtotalOptionsPtrOutput {
	return o.ApplyT(func(v *TemplatePivotTableTotalOptions) *TemplateSubtotalOptions {
		if v == nil {
			return nil
		}
		return v.RowSubtotalOptions
	}).(TemplateSubtotalOptionsPtrOutput)
}

// The row total options.
func (o TemplatePivotTableTotalOptionsPtrOutput) RowTotalOptions() TemplatePivotTotalOptionsPtrOutput {
	return o.ApplyT(func(v *TemplatePivotTableTotalOptions) *TemplatePivotTotalOptions {
		if v == nil {
			return nil
		}
		return v.RowTotalOptions
	}).(TemplatePivotTotalOptionsPtrOutput)
}

type TemplatePivotTableVisual struct {
	// The list of custom actions that are configured for a visual.
	Actions []TemplateVisualCustomAction `pulumi:"actions"`
	// The configuration settings of the visual.
	ChartConfiguration *TemplatePivotTableConfiguration `pulumi:"chartConfiguration"`
	// The conditional formatting for a `PivotTableVisual` .
	ConditionalFormatting *TemplatePivotTableConditionalFormatting `pulumi:"conditionalFormatting"`
	// The subtitle that is displayed on the visual.
	Subtitle *TemplateVisualSubtitleLabelOptions `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title *TemplateVisualTitleLabelOptions `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText *string `pulumi:"visualContentAltText"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
	VisualId string `pulumi:"visualId"`
}

// TemplatePivotTableVisualInput is an input type that accepts TemplatePivotTableVisualArgs and TemplatePivotTableVisualOutput values.
// You can construct a concrete instance of `TemplatePivotTableVisualInput` via:
//
//	TemplatePivotTableVisualArgs{...}
type TemplatePivotTableVisualInput interface {
	pulumi.Input

	ToTemplatePivotTableVisualOutput() TemplatePivotTableVisualOutput
	ToTemplatePivotTableVisualOutputWithContext(context.Context) TemplatePivotTableVisualOutput
}

type TemplatePivotTableVisualArgs struct {
	// The list of custom actions that are configured for a visual.
	Actions TemplateVisualCustomActionArrayInput `pulumi:"actions"`
	// The configuration settings of the visual.
	ChartConfiguration TemplatePivotTableConfigurationPtrInput `pulumi:"chartConfiguration"`
	// The conditional formatting for a `PivotTableVisual` .
	ConditionalFormatting TemplatePivotTableConditionalFormattingPtrInput `pulumi:"conditionalFormatting"`
	// The subtitle that is displayed on the visual.
	Subtitle TemplateVisualSubtitleLabelOptionsPtrInput `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title TemplateVisualTitleLabelOptionsPtrInput `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText pulumi.StringPtrInput `pulumi:"visualContentAltText"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
	VisualId pulumi.StringInput `pulumi:"visualId"`
}

func (TemplatePivotTableVisualArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePivotTableVisual)(nil)).Elem()
}

func (i TemplatePivotTableVisualArgs) ToTemplatePivotTableVisualOutput() TemplatePivotTableVisualOutput {
	return i.ToTemplatePivotTableVisualOutputWithContext(context.Background())
}

func (i TemplatePivotTableVisualArgs) ToTemplatePivotTableVisualOutputWithContext(ctx context.Context) TemplatePivotTableVisualOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTableVisualOutput)
}

func (i TemplatePivotTableVisualArgs) ToTemplatePivotTableVisualPtrOutput() TemplatePivotTableVisualPtrOutput {
	return i.ToTemplatePivotTableVisualPtrOutputWithContext(context.Background())
}

func (i TemplatePivotTableVisualArgs) ToTemplatePivotTableVisualPtrOutputWithContext(ctx context.Context) TemplatePivotTableVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTableVisualOutput).ToTemplatePivotTableVisualPtrOutputWithContext(ctx)
}

// TemplatePivotTableVisualPtrInput is an input type that accepts TemplatePivotTableVisualArgs, TemplatePivotTableVisualPtr and TemplatePivotTableVisualPtrOutput values.
// You can construct a concrete instance of `TemplatePivotTableVisualPtrInput` via:
//
//	        TemplatePivotTableVisualArgs{...}
//
//	or:
//
//	        nil
type TemplatePivotTableVisualPtrInput interface {
	pulumi.Input

	ToTemplatePivotTableVisualPtrOutput() TemplatePivotTableVisualPtrOutput
	ToTemplatePivotTableVisualPtrOutputWithContext(context.Context) TemplatePivotTableVisualPtrOutput
}

type templatePivotTableVisualPtrType TemplatePivotTableVisualArgs

func TemplatePivotTableVisualPtr(v *TemplatePivotTableVisualArgs) TemplatePivotTableVisualPtrInput {
	return (*templatePivotTableVisualPtrType)(v)
}

func (*templatePivotTableVisualPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePivotTableVisual)(nil)).Elem()
}

func (i *templatePivotTableVisualPtrType) ToTemplatePivotTableVisualPtrOutput() TemplatePivotTableVisualPtrOutput {
	return i.ToTemplatePivotTableVisualPtrOutputWithContext(context.Background())
}

func (i *templatePivotTableVisualPtrType) ToTemplatePivotTableVisualPtrOutputWithContext(ctx context.Context) TemplatePivotTableVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTableVisualPtrOutput)
}

type TemplatePivotTableVisualOutput struct{ *pulumi.OutputState }

func (TemplatePivotTableVisualOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePivotTableVisual)(nil)).Elem()
}

func (o TemplatePivotTableVisualOutput) ToTemplatePivotTableVisualOutput() TemplatePivotTableVisualOutput {
	return o
}

func (o TemplatePivotTableVisualOutput) ToTemplatePivotTableVisualOutputWithContext(ctx context.Context) TemplatePivotTableVisualOutput {
	return o
}

func (o TemplatePivotTableVisualOutput) ToTemplatePivotTableVisualPtrOutput() TemplatePivotTableVisualPtrOutput {
	return o.ToTemplatePivotTableVisualPtrOutputWithContext(context.Background())
}

func (o TemplatePivotTableVisualOutput) ToTemplatePivotTableVisualPtrOutputWithContext(ctx context.Context) TemplatePivotTableVisualPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplatePivotTableVisual) *TemplatePivotTableVisual {
		return &v
	}).(TemplatePivotTableVisualPtrOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplatePivotTableVisualOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v TemplatePivotTableVisual) []TemplateVisualCustomAction { return v.Actions }).(TemplateVisualCustomActionArrayOutput)
}

// The configuration settings of the visual.
func (o TemplatePivotTableVisualOutput) ChartConfiguration() TemplatePivotTableConfigurationPtrOutput {
	return o.ApplyT(func(v TemplatePivotTableVisual) *TemplatePivotTableConfiguration { return v.ChartConfiguration }).(TemplatePivotTableConfigurationPtrOutput)
}

// The conditional formatting for a `PivotTableVisual` .
func (o TemplatePivotTableVisualOutput) ConditionalFormatting() TemplatePivotTableConditionalFormattingPtrOutput {
	return o.ApplyT(func(v TemplatePivotTableVisual) *TemplatePivotTableConditionalFormatting {
		return v.ConditionalFormatting
	}).(TemplatePivotTableConditionalFormattingPtrOutput)
}

// The subtitle that is displayed on the visual.
func (o TemplatePivotTableVisualOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplatePivotTableVisual) *TemplateVisualSubtitleLabelOptions { return v.Subtitle }).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o TemplatePivotTableVisualOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplatePivotTableVisual) *TemplateVisualTitleLabelOptions { return v.Title }).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o TemplatePivotTableVisualOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplatePivotTableVisual) *string { return v.VisualContentAltText }).(pulumi.StringPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
func (o TemplatePivotTableVisualOutput) VisualId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplatePivotTableVisual) string { return v.VisualId }).(pulumi.StringOutput)
}

type TemplatePivotTableVisualPtrOutput struct{ *pulumi.OutputState }

func (TemplatePivotTableVisualPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePivotTableVisual)(nil)).Elem()
}

func (o TemplatePivotTableVisualPtrOutput) ToTemplatePivotTableVisualPtrOutput() TemplatePivotTableVisualPtrOutput {
	return o
}

func (o TemplatePivotTableVisualPtrOutput) ToTemplatePivotTableVisualPtrOutputWithContext(ctx context.Context) TemplatePivotTableVisualPtrOutput {
	return o
}

func (o TemplatePivotTableVisualPtrOutput) Elem() TemplatePivotTableVisualOutput {
	return o.ApplyT(func(v *TemplatePivotTableVisual) TemplatePivotTableVisual {
		if v != nil {
			return *v
		}
		var ret TemplatePivotTableVisual
		return ret
	}).(TemplatePivotTableVisualOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplatePivotTableVisualPtrOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v *TemplatePivotTableVisual) []TemplateVisualCustomAction {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(TemplateVisualCustomActionArrayOutput)
}

// The configuration settings of the visual.
func (o TemplatePivotTableVisualPtrOutput) ChartConfiguration() TemplatePivotTableConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplatePivotTableVisual) *TemplatePivotTableConfiguration {
		if v == nil {
			return nil
		}
		return v.ChartConfiguration
	}).(TemplatePivotTableConfigurationPtrOutput)
}

// The conditional formatting for a `PivotTableVisual` .
func (o TemplatePivotTableVisualPtrOutput) ConditionalFormatting() TemplatePivotTableConditionalFormattingPtrOutput {
	return o.ApplyT(func(v *TemplatePivotTableVisual) *TemplatePivotTableConditionalFormatting {
		if v == nil {
			return nil
		}
		return v.ConditionalFormatting
	}).(TemplatePivotTableConditionalFormattingPtrOutput)
}

// The subtitle that is displayed on the visual.
func (o TemplatePivotTableVisualPtrOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplatePivotTableVisual) *TemplateVisualSubtitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Subtitle
	}).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o TemplatePivotTableVisualPtrOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplatePivotTableVisual) *TemplateVisualTitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Title
	}).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o TemplatePivotTableVisualPtrOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplatePivotTableVisual) *string {
		if v == nil {
			return nil
		}
		return v.VisualContentAltText
	}).(pulumi.StringPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
func (o TemplatePivotTableVisualPtrOutput) VisualId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplatePivotTableVisual) *string {
		if v == nil {
			return nil
		}
		return &v.VisualId
	}).(pulumi.StringPtrOutput)
}

type TemplatePivotTotalOptions struct {
	// The custom label string for the total cells.
	CustomLabel *string `pulumi:"customLabel"`
	// The cell styling options for the total of header cells.
	MetricHeaderCellStyle *TemplateTableCellStyle `pulumi:"metricHeaderCellStyle"`
	// The placement (start, end) for the total cells.
	Placement *TemplateTableTotalsPlacement `pulumi:"placement"`
	// The scroll status (pinned, scrolled) for the total cells.
	ScrollStatus *TemplateTableTotalsScrollStatus `pulumi:"scrollStatus"`
	// The total aggregation options for each value field.
	TotalAggregationOptions []TemplateTotalAggregationOption `pulumi:"totalAggregationOptions"`
	// The cell styling options for the total cells.
	TotalCellStyle *TemplateTableCellStyle `pulumi:"totalCellStyle"`
	// The visibility configuration for the total cells.
	TotalsVisibility interface{} `pulumi:"totalsVisibility"`
	// The cell styling options for the totals of value cells.
	ValueCellStyle *TemplateTableCellStyle `pulumi:"valueCellStyle"`
}

// TemplatePivotTotalOptionsInput is an input type that accepts TemplatePivotTotalOptionsArgs and TemplatePivotTotalOptionsOutput values.
// You can construct a concrete instance of `TemplatePivotTotalOptionsInput` via:
//
//	TemplatePivotTotalOptionsArgs{...}
type TemplatePivotTotalOptionsInput interface {
	pulumi.Input

	ToTemplatePivotTotalOptionsOutput() TemplatePivotTotalOptionsOutput
	ToTemplatePivotTotalOptionsOutputWithContext(context.Context) TemplatePivotTotalOptionsOutput
}

type TemplatePivotTotalOptionsArgs struct {
	// The custom label string for the total cells.
	CustomLabel pulumi.StringPtrInput `pulumi:"customLabel"`
	// The cell styling options for the total of header cells.
	MetricHeaderCellStyle TemplateTableCellStylePtrInput `pulumi:"metricHeaderCellStyle"`
	// The placement (start, end) for the total cells.
	Placement TemplateTableTotalsPlacementPtrInput `pulumi:"placement"`
	// The scroll status (pinned, scrolled) for the total cells.
	ScrollStatus TemplateTableTotalsScrollStatusPtrInput `pulumi:"scrollStatus"`
	// The total aggregation options for each value field.
	TotalAggregationOptions TemplateTotalAggregationOptionArrayInput `pulumi:"totalAggregationOptions"`
	// The cell styling options for the total cells.
	TotalCellStyle TemplateTableCellStylePtrInput `pulumi:"totalCellStyle"`
	// The visibility configuration for the total cells.
	TotalsVisibility pulumi.Input `pulumi:"totalsVisibility"`
	// The cell styling options for the totals of value cells.
	ValueCellStyle TemplateTableCellStylePtrInput `pulumi:"valueCellStyle"`
}

func (TemplatePivotTotalOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePivotTotalOptions)(nil)).Elem()
}

func (i TemplatePivotTotalOptionsArgs) ToTemplatePivotTotalOptionsOutput() TemplatePivotTotalOptionsOutput {
	return i.ToTemplatePivotTotalOptionsOutputWithContext(context.Background())
}

func (i TemplatePivotTotalOptionsArgs) ToTemplatePivotTotalOptionsOutputWithContext(ctx context.Context) TemplatePivotTotalOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTotalOptionsOutput)
}

func (i TemplatePivotTotalOptionsArgs) ToTemplatePivotTotalOptionsPtrOutput() TemplatePivotTotalOptionsPtrOutput {
	return i.ToTemplatePivotTotalOptionsPtrOutputWithContext(context.Background())
}

func (i TemplatePivotTotalOptionsArgs) ToTemplatePivotTotalOptionsPtrOutputWithContext(ctx context.Context) TemplatePivotTotalOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTotalOptionsOutput).ToTemplatePivotTotalOptionsPtrOutputWithContext(ctx)
}

// TemplatePivotTotalOptionsPtrInput is an input type that accepts TemplatePivotTotalOptionsArgs, TemplatePivotTotalOptionsPtr and TemplatePivotTotalOptionsPtrOutput values.
// You can construct a concrete instance of `TemplatePivotTotalOptionsPtrInput` via:
//
//	        TemplatePivotTotalOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplatePivotTotalOptionsPtrInput interface {
	pulumi.Input

	ToTemplatePivotTotalOptionsPtrOutput() TemplatePivotTotalOptionsPtrOutput
	ToTemplatePivotTotalOptionsPtrOutputWithContext(context.Context) TemplatePivotTotalOptionsPtrOutput
}

type templatePivotTotalOptionsPtrType TemplatePivotTotalOptionsArgs

func TemplatePivotTotalOptionsPtr(v *TemplatePivotTotalOptionsArgs) TemplatePivotTotalOptionsPtrInput {
	return (*templatePivotTotalOptionsPtrType)(v)
}

func (*templatePivotTotalOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePivotTotalOptions)(nil)).Elem()
}

func (i *templatePivotTotalOptionsPtrType) ToTemplatePivotTotalOptionsPtrOutput() TemplatePivotTotalOptionsPtrOutput {
	return i.ToTemplatePivotTotalOptionsPtrOutputWithContext(context.Background())
}

func (i *templatePivotTotalOptionsPtrType) ToTemplatePivotTotalOptionsPtrOutputWithContext(ctx context.Context) TemplatePivotTotalOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePivotTotalOptionsPtrOutput)
}

type TemplatePivotTotalOptionsOutput struct{ *pulumi.OutputState }

func (TemplatePivotTotalOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePivotTotalOptions)(nil)).Elem()
}

func (o TemplatePivotTotalOptionsOutput) ToTemplatePivotTotalOptionsOutput() TemplatePivotTotalOptionsOutput {
	return o
}

func (o TemplatePivotTotalOptionsOutput) ToTemplatePivotTotalOptionsOutputWithContext(ctx context.Context) TemplatePivotTotalOptionsOutput {
	return o
}

func (o TemplatePivotTotalOptionsOutput) ToTemplatePivotTotalOptionsPtrOutput() TemplatePivotTotalOptionsPtrOutput {
	return o.ToTemplatePivotTotalOptionsPtrOutputWithContext(context.Background())
}

func (o TemplatePivotTotalOptionsOutput) ToTemplatePivotTotalOptionsPtrOutputWithContext(ctx context.Context) TemplatePivotTotalOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplatePivotTotalOptions) *TemplatePivotTotalOptions {
		return &v
	}).(TemplatePivotTotalOptionsPtrOutput)
}

// The custom label string for the total cells.
func (o TemplatePivotTotalOptionsOutput) CustomLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplatePivotTotalOptions) *string { return v.CustomLabel }).(pulumi.StringPtrOutput)
}

// The cell styling options for the total of header cells.
func (o TemplatePivotTotalOptionsOutput) MetricHeaderCellStyle() TemplateTableCellStylePtrOutput {
	return o.ApplyT(func(v TemplatePivotTotalOptions) *TemplateTableCellStyle { return v.MetricHeaderCellStyle }).(TemplateTableCellStylePtrOutput)
}

// The placement (start, end) for the total cells.
func (o TemplatePivotTotalOptionsOutput) Placement() TemplateTableTotalsPlacementPtrOutput {
	return o.ApplyT(func(v TemplatePivotTotalOptions) *TemplateTableTotalsPlacement { return v.Placement }).(TemplateTableTotalsPlacementPtrOutput)
}

// The scroll status (pinned, scrolled) for the total cells.
func (o TemplatePivotTotalOptionsOutput) ScrollStatus() TemplateTableTotalsScrollStatusPtrOutput {
	return o.ApplyT(func(v TemplatePivotTotalOptions) *TemplateTableTotalsScrollStatus { return v.ScrollStatus }).(TemplateTableTotalsScrollStatusPtrOutput)
}

// The total aggregation options for each value field.
func (o TemplatePivotTotalOptionsOutput) TotalAggregationOptions() TemplateTotalAggregationOptionArrayOutput {
	return o.ApplyT(func(v TemplatePivotTotalOptions) []TemplateTotalAggregationOption { return v.TotalAggregationOptions }).(TemplateTotalAggregationOptionArrayOutput)
}

// The cell styling options for the total cells.
func (o TemplatePivotTotalOptionsOutput) TotalCellStyle() TemplateTableCellStylePtrOutput {
	return o.ApplyT(func(v TemplatePivotTotalOptions) *TemplateTableCellStyle { return v.TotalCellStyle }).(TemplateTableCellStylePtrOutput)
}

// The visibility configuration for the total cells.
func (o TemplatePivotTotalOptionsOutput) TotalsVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplatePivotTotalOptions) interface{} { return v.TotalsVisibility }).(pulumi.AnyOutput)
}

// The cell styling options for the totals of value cells.
func (o TemplatePivotTotalOptionsOutput) ValueCellStyle() TemplateTableCellStylePtrOutput {
	return o.ApplyT(func(v TemplatePivotTotalOptions) *TemplateTableCellStyle { return v.ValueCellStyle }).(TemplateTableCellStylePtrOutput)
}

type TemplatePivotTotalOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplatePivotTotalOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePivotTotalOptions)(nil)).Elem()
}

func (o TemplatePivotTotalOptionsPtrOutput) ToTemplatePivotTotalOptionsPtrOutput() TemplatePivotTotalOptionsPtrOutput {
	return o
}

func (o TemplatePivotTotalOptionsPtrOutput) ToTemplatePivotTotalOptionsPtrOutputWithContext(ctx context.Context) TemplatePivotTotalOptionsPtrOutput {
	return o
}

func (o TemplatePivotTotalOptionsPtrOutput) Elem() TemplatePivotTotalOptionsOutput {
	return o.ApplyT(func(v *TemplatePivotTotalOptions) TemplatePivotTotalOptions {
		if v != nil {
			return *v
		}
		var ret TemplatePivotTotalOptions
		return ret
	}).(TemplatePivotTotalOptionsOutput)
}

// The custom label string for the total cells.
func (o TemplatePivotTotalOptionsPtrOutput) CustomLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplatePivotTotalOptions) *string {
		if v == nil {
			return nil
		}
		return v.CustomLabel
	}).(pulumi.StringPtrOutput)
}

// The cell styling options for the total of header cells.
func (o TemplatePivotTotalOptionsPtrOutput) MetricHeaderCellStyle() TemplateTableCellStylePtrOutput {
	return o.ApplyT(func(v *TemplatePivotTotalOptions) *TemplateTableCellStyle {
		if v == nil {
			return nil
		}
		return v.MetricHeaderCellStyle
	}).(TemplateTableCellStylePtrOutput)
}

// The placement (start, end) for the total cells.
func (o TemplatePivotTotalOptionsPtrOutput) Placement() TemplateTableTotalsPlacementPtrOutput {
	return o.ApplyT(func(v *TemplatePivotTotalOptions) *TemplateTableTotalsPlacement {
		if v == nil {
			return nil
		}
		return v.Placement
	}).(TemplateTableTotalsPlacementPtrOutput)
}

// The scroll status (pinned, scrolled) for the total cells.
func (o TemplatePivotTotalOptionsPtrOutput) ScrollStatus() TemplateTableTotalsScrollStatusPtrOutput {
	return o.ApplyT(func(v *TemplatePivotTotalOptions) *TemplateTableTotalsScrollStatus {
		if v == nil {
			return nil
		}
		return v.ScrollStatus
	}).(TemplateTableTotalsScrollStatusPtrOutput)
}

// The total aggregation options for each value field.
func (o TemplatePivotTotalOptionsPtrOutput) TotalAggregationOptions() TemplateTotalAggregationOptionArrayOutput {
	return o.ApplyT(func(v *TemplatePivotTotalOptions) []TemplateTotalAggregationOption {
		if v == nil {
			return nil
		}
		return v.TotalAggregationOptions
	}).(TemplateTotalAggregationOptionArrayOutput)
}

// The cell styling options for the total cells.
func (o TemplatePivotTotalOptionsPtrOutput) TotalCellStyle() TemplateTableCellStylePtrOutput {
	return o.ApplyT(func(v *TemplatePivotTotalOptions) *TemplateTableCellStyle {
		if v == nil {
			return nil
		}
		return v.TotalCellStyle
	}).(TemplateTableCellStylePtrOutput)
}

// The visibility configuration for the total cells.
func (o TemplatePivotTotalOptionsPtrOutput) TotalsVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplatePivotTotalOptions) interface{} {
		if v == nil {
			return nil
		}
		return v.TotalsVisibility
	}).(pulumi.AnyOutput)
}

// The cell styling options for the totals of value cells.
func (o TemplatePivotTotalOptionsPtrOutput) ValueCellStyle() TemplateTableCellStylePtrOutput {
	return o.ApplyT(func(v *TemplatePivotTotalOptions) *TemplateTableCellStyle {
		if v == nil {
			return nil
		}
		return v.ValueCellStyle
	}).(TemplateTableCellStylePtrOutput)
}

type TemplatePluginVisual struct {
	// A description of the plugin field wells and their persisted properties.
	ChartConfiguration *TemplatePluginVisualConfiguration `pulumi:"chartConfiguration"`
	// The Amazon Resource Name (ARN) that reflects the plugin and version.
	PluginArn string                              `pulumi:"pluginArn"`
	Subtitle  *TemplateVisualSubtitleLabelOptions `pulumi:"subtitle"`
	Title     *TemplateVisualTitleLabelOptions    `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText *string `pulumi:"visualContentAltText"`
	// The ID of the visual that you want to use.
	VisualId string `pulumi:"visualId"`
}

// TemplatePluginVisualInput is an input type that accepts TemplatePluginVisualArgs and TemplatePluginVisualOutput values.
// You can construct a concrete instance of `TemplatePluginVisualInput` via:
//
//	TemplatePluginVisualArgs{...}
type TemplatePluginVisualInput interface {
	pulumi.Input

	ToTemplatePluginVisualOutput() TemplatePluginVisualOutput
	ToTemplatePluginVisualOutputWithContext(context.Context) TemplatePluginVisualOutput
}

type TemplatePluginVisualArgs struct {
	// A description of the plugin field wells and their persisted properties.
	ChartConfiguration TemplatePluginVisualConfigurationPtrInput `pulumi:"chartConfiguration"`
	// The Amazon Resource Name (ARN) that reflects the plugin and version.
	PluginArn pulumi.StringInput                         `pulumi:"pluginArn"`
	Subtitle  TemplateVisualSubtitleLabelOptionsPtrInput `pulumi:"subtitle"`
	Title     TemplateVisualTitleLabelOptionsPtrInput    `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText pulumi.StringPtrInput `pulumi:"visualContentAltText"`
	// The ID of the visual that you want to use.
	VisualId pulumi.StringInput `pulumi:"visualId"`
}

func (TemplatePluginVisualArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePluginVisual)(nil)).Elem()
}

func (i TemplatePluginVisualArgs) ToTemplatePluginVisualOutput() TemplatePluginVisualOutput {
	return i.ToTemplatePluginVisualOutputWithContext(context.Background())
}

func (i TemplatePluginVisualArgs) ToTemplatePluginVisualOutputWithContext(ctx context.Context) TemplatePluginVisualOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePluginVisualOutput)
}

func (i TemplatePluginVisualArgs) ToTemplatePluginVisualPtrOutput() TemplatePluginVisualPtrOutput {
	return i.ToTemplatePluginVisualPtrOutputWithContext(context.Background())
}

func (i TemplatePluginVisualArgs) ToTemplatePluginVisualPtrOutputWithContext(ctx context.Context) TemplatePluginVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePluginVisualOutput).ToTemplatePluginVisualPtrOutputWithContext(ctx)
}

// TemplatePluginVisualPtrInput is an input type that accepts TemplatePluginVisualArgs, TemplatePluginVisualPtr and TemplatePluginVisualPtrOutput values.
// You can construct a concrete instance of `TemplatePluginVisualPtrInput` via:
//
//	        TemplatePluginVisualArgs{...}
//
//	or:
//
//	        nil
type TemplatePluginVisualPtrInput interface {
	pulumi.Input

	ToTemplatePluginVisualPtrOutput() TemplatePluginVisualPtrOutput
	ToTemplatePluginVisualPtrOutputWithContext(context.Context) TemplatePluginVisualPtrOutput
}

type templatePluginVisualPtrType TemplatePluginVisualArgs

func TemplatePluginVisualPtr(v *TemplatePluginVisualArgs) TemplatePluginVisualPtrInput {
	return (*templatePluginVisualPtrType)(v)
}

func (*templatePluginVisualPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePluginVisual)(nil)).Elem()
}

func (i *templatePluginVisualPtrType) ToTemplatePluginVisualPtrOutput() TemplatePluginVisualPtrOutput {
	return i.ToTemplatePluginVisualPtrOutputWithContext(context.Background())
}

func (i *templatePluginVisualPtrType) ToTemplatePluginVisualPtrOutputWithContext(ctx context.Context) TemplatePluginVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePluginVisualPtrOutput)
}

type TemplatePluginVisualOutput struct{ *pulumi.OutputState }

func (TemplatePluginVisualOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePluginVisual)(nil)).Elem()
}

func (o TemplatePluginVisualOutput) ToTemplatePluginVisualOutput() TemplatePluginVisualOutput {
	return o
}

func (o TemplatePluginVisualOutput) ToTemplatePluginVisualOutputWithContext(ctx context.Context) TemplatePluginVisualOutput {
	return o
}

func (o TemplatePluginVisualOutput) ToTemplatePluginVisualPtrOutput() TemplatePluginVisualPtrOutput {
	return o.ToTemplatePluginVisualPtrOutputWithContext(context.Background())
}

func (o TemplatePluginVisualOutput) ToTemplatePluginVisualPtrOutputWithContext(ctx context.Context) TemplatePluginVisualPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplatePluginVisual) *TemplatePluginVisual {
		return &v
	}).(TemplatePluginVisualPtrOutput)
}

// A description of the plugin field wells and their persisted properties.
func (o TemplatePluginVisualOutput) ChartConfiguration() TemplatePluginVisualConfigurationPtrOutput {
	return o.ApplyT(func(v TemplatePluginVisual) *TemplatePluginVisualConfiguration { return v.ChartConfiguration }).(TemplatePluginVisualConfigurationPtrOutput)
}

// The Amazon Resource Name (ARN) that reflects the plugin and version.
func (o TemplatePluginVisualOutput) PluginArn() pulumi.StringOutput {
	return o.ApplyT(func(v TemplatePluginVisual) string { return v.PluginArn }).(pulumi.StringOutput)
}

func (o TemplatePluginVisualOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplatePluginVisual) *TemplateVisualSubtitleLabelOptions { return v.Subtitle }).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

func (o TemplatePluginVisualOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplatePluginVisual) *TemplateVisualTitleLabelOptions { return v.Title }).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o TemplatePluginVisualOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplatePluginVisual) *string { return v.VisualContentAltText }).(pulumi.StringPtrOutput)
}

// The ID of the visual that you want to use.
func (o TemplatePluginVisualOutput) VisualId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplatePluginVisual) string { return v.VisualId }).(pulumi.StringOutput)
}

type TemplatePluginVisualPtrOutput struct{ *pulumi.OutputState }

func (TemplatePluginVisualPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePluginVisual)(nil)).Elem()
}

func (o TemplatePluginVisualPtrOutput) ToTemplatePluginVisualPtrOutput() TemplatePluginVisualPtrOutput {
	return o
}

func (o TemplatePluginVisualPtrOutput) ToTemplatePluginVisualPtrOutputWithContext(ctx context.Context) TemplatePluginVisualPtrOutput {
	return o
}

func (o TemplatePluginVisualPtrOutput) Elem() TemplatePluginVisualOutput {
	return o.ApplyT(func(v *TemplatePluginVisual) TemplatePluginVisual {
		if v != nil {
			return *v
		}
		var ret TemplatePluginVisual
		return ret
	}).(TemplatePluginVisualOutput)
}

// A description of the plugin field wells and their persisted properties.
func (o TemplatePluginVisualPtrOutput) ChartConfiguration() TemplatePluginVisualConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplatePluginVisual) *TemplatePluginVisualConfiguration {
		if v == nil {
			return nil
		}
		return v.ChartConfiguration
	}).(TemplatePluginVisualConfigurationPtrOutput)
}

// The Amazon Resource Name (ARN) that reflects the plugin and version.
func (o TemplatePluginVisualPtrOutput) PluginArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplatePluginVisual) *string {
		if v == nil {
			return nil
		}
		return &v.PluginArn
	}).(pulumi.StringPtrOutput)
}

func (o TemplatePluginVisualPtrOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplatePluginVisual) *TemplateVisualSubtitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Subtitle
	}).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

func (o TemplatePluginVisualPtrOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplatePluginVisual) *TemplateVisualTitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Title
	}).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o TemplatePluginVisualPtrOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplatePluginVisual) *string {
		if v == nil {
			return nil
		}
		return v.VisualContentAltText
	}).(pulumi.StringPtrOutput)
}

// The ID of the visual that you want to use.
func (o TemplatePluginVisualPtrOutput) VisualId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplatePluginVisual) *string {
		if v == nil {
			return nil
		}
		return &v.VisualId
	}).(pulumi.StringPtrOutput)
}

type TemplatePluginVisualConfiguration struct {
	// The field wells configuration of the plugin visual.
	FieldWells []TemplatePluginVisualFieldWell `pulumi:"fieldWells"`
	// The sort configuration of the plugin visual.
	SortConfiguration *TemplatePluginVisualSortConfiguration `pulumi:"sortConfiguration"`
	// The persisted properties of the plugin visual.
	VisualOptions *TemplatePluginVisualOptions `pulumi:"visualOptions"`
}

// TemplatePluginVisualConfigurationInput is an input type that accepts TemplatePluginVisualConfigurationArgs and TemplatePluginVisualConfigurationOutput values.
// You can construct a concrete instance of `TemplatePluginVisualConfigurationInput` via:
//
//	TemplatePluginVisualConfigurationArgs{...}
type TemplatePluginVisualConfigurationInput interface {
	pulumi.Input

	ToTemplatePluginVisualConfigurationOutput() TemplatePluginVisualConfigurationOutput
	ToTemplatePluginVisualConfigurationOutputWithContext(context.Context) TemplatePluginVisualConfigurationOutput
}

type TemplatePluginVisualConfigurationArgs struct {
	// The field wells configuration of the plugin visual.
	FieldWells TemplatePluginVisualFieldWellArrayInput `pulumi:"fieldWells"`
	// The sort configuration of the plugin visual.
	SortConfiguration TemplatePluginVisualSortConfigurationPtrInput `pulumi:"sortConfiguration"`
	// The persisted properties of the plugin visual.
	VisualOptions TemplatePluginVisualOptionsPtrInput `pulumi:"visualOptions"`
}

func (TemplatePluginVisualConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePluginVisualConfiguration)(nil)).Elem()
}

func (i TemplatePluginVisualConfigurationArgs) ToTemplatePluginVisualConfigurationOutput() TemplatePluginVisualConfigurationOutput {
	return i.ToTemplatePluginVisualConfigurationOutputWithContext(context.Background())
}

func (i TemplatePluginVisualConfigurationArgs) ToTemplatePluginVisualConfigurationOutputWithContext(ctx context.Context) TemplatePluginVisualConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePluginVisualConfigurationOutput)
}

func (i TemplatePluginVisualConfigurationArgs) ToTemplatePluginVisualConfigurationPtrOutput() TemplatePluginVisualConfigurationPtrOutput {
	return i.ToTemplatePluginVisualConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplatePluginVisualConfigurationArgs) ToTemplatePluginVisualConfigurationPtrOutputWithContext(ctx context.Context) TemplatePluginVisualConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePluginVisualConfigurationOutput).ToTemplatePluginVisualConfigurationPtrOutputWithContext(ctx)
}

// TemplatePluginVisualConfigurationPtrInput is an input type that accepts TemplatePluginVisualConfigurationArgs, TemplatePluginVisualConfigurationPtr and TemplatePluginVisualConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplatePluginVisualConfigurationPtrInput` via:
//
//	        TemplatePluginVisualConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplatePluginVisualConfigurationPtrInput interface {
	pulumi.Input

	ToTemplatePluginVisualConfigurationPtrOutput() TemplatePluginVisualConfigurationPtrOutput
	ToTemplatePluginVisualConfigurationPtrOutputWithContext(context.Context) TemplatePluginVisualConfigurationPtrOutput
}

type templatePluginVisualConfigurationPtrType TemplatePluginVisualConfigurationArgs

func TemplatePluginVisualConfigurationPtr(v *TemplatePluginVisualConfigurationArgs) TemplatePluginVisualConfigurationPtrInput {
	return (*templatePluginVisualConfigurationPtrType)(v)
}

func (*templatePluginVisualConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePluginVisualConfiguration)(nil)).Elem()
}

func (i *templatePluginVisualConfigurationPtrType) ToTemplatePluginVisualConfigurationPtrOutput() TemplatePluginVisualConfigurationPtrOutput {
	return i.ToTemplatePluginVisualConfigurationPtrOutputWithContext(context.Background())
}

func (i *templatePluginVisualConfigurationPtrType) ToTemplatePluginVisualConfigurationPtrOutputWithContext(ctx context.Context) TemplatePluginVisualConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePluginVisualConfigurationPtrOutput)
}

type TemplatePluginVisualConfigurationOutput struct{ *pulumi.OutputState }

func (TemplatePluginVisualConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePluginVisualConfiguration)(nil)).Elem()
}

func (o TemplatePluginVisualConfigurationOutput) ToTemplatePluginVisualConfigurationOutput() TemplatePluginVisualConfigurationOutput {
	return o
}

func (o TemplatePluginVisualConfigurationOutput) ToTemplatePluginVisualConfigurationOutputWithContext(ctx context.Context) TemplatePluginVisualConfigurationOutput {
	return o
}

func (o TemplatePluginVisualConfigurationOutput) ToTemplatePluginVisualConfigurationPtrOutput() TemplatePluginVisualConfigurationPtrOutput {
	return o.ToTemplatePluginVisualConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplatePluginVisualConfigurationOutput) ToTemplatePluginVisualConfigurationPtrOutputWithContext(ctx context.Context) TemplatePluginVisualConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplatePluginVisualConfiguration) *TemplatePluginVisualConfiguration {
		return &v
	}).(TemplatePluginVisualConfigurationPtrOutput)
}

// The field wells configuration of the plugin visual.
func (o TemplatePluginVisualConfigurationOutput) FieldWells() TemplatePluginVisualFieldWellArrayOutput {
	return o.ApplyT(func(v TemplatePluginVisualConfiguration) []TemplatePluginVisualFieldWell { return v.FieldWells }).(TemplatePluginVisualFieldWellArrayOutput)
}

// The sort configuration of the plugin visual.
func (o TemplatePluginVisualConfigurationOutput) SortConfiguration() TemplatePluginVisualSortConfigurationPtrOutput {
	return o.ApplyT(func(v TemplatePluginVisualConfiguration) *TemplatePluginVisualSortConfiguration {
		return v.SortConfiguration
	}).(TemplatePluginVisualSortConfigurationPtrOutput)
}

// The persisted properties of the plugin visual.
func (o TemplatePluginVisualConfigurationOutput) VisualOptions() TemplatePluginVisualOptionsPtrOutput {
	return o.ApplyT(func(v TemplatePluginVisualConfiguration) *TemplatePluginVisualOptions { return v.VisualOptions }).(TemplatePluginVisualOptionsPtrOutput)
}

type TemplatePluginVisualConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplatePluginVisualConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePluginVisualConfiguration)(nil)).Elem()
}

func (o TemplatePluginVisualConfigurationPtrOutput) ToTemplatePluginVisualConfigurationPtrOutput() TemplatePluginVisualConfigurationPtrOutput {
	return o
}

func (o TemplatePluginVisualConfigurationPtrOutput) ToTemplatePluginVisualConfigurationPtrOutputWithContext(ctx context.Context) TemplatePluginVisualConfigurationPtrOutput {
	return o
}

func (o TemplatePluginVisualConfigurationPtrOutput) Elem() TemplatePluginVisualConfigurationOutput {
	return o.ApplyT(func(v *TemplatePluginVisualConfiguration) TemplatePluginVisualConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplatePluginVisualConfiguration
		return ret
	}).(TemplatePluginVisualConfigurationOutput)
}

// The field wells configuration of the plugin visual.
func (o TemplatePluginVisualConfigurationPtrOutput) FieldWells() TemplatePluginVisualFieldWellArrayOutput {
	return o.ApplyT(func(v *TemplatePluginVisualConfiguration) []TemplatePluginVisualFieldWell {
		if v == nil {
			return nil
		}
		return v.FieldWells
	}).(TemplatePluginVisualFieldWellArrayOutput)
}

// The sort configuration of the plugin visual.
func (o TemplatePluginVisualConfigurationPtrOutput) SortConfiguration() TemplatePluginVisualSortConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplatePluginVisualConfiguration) *TemplatePluginVisualSortConfiguration {
		if v == nil {
			return nil
		}
		return v.SortConfiguration
	}).(TemplatePluginVisualSortConfigurationPtrOutput)
}

// The persisted properties of the plugin visual.
func (o TemplatePluginVisualConfigurationPtrOutput) VisualOptions() TemplatePluginVisualOptionsPtrOutput {
	return o.ApplyT(func(v *TemplatePluginVisualConfiguration) *TemplatePluginVisualOptions {
		if v == nil {
			return nil
		}
		return v.VisualOptions
	}).(TemplatePluginVisualOptionsPtrOutput)
}

type TemplatePluginVisualFieldWell struct {
	// The semantic axis name for the field well.
	AxisName *TemplatePluginVisualAxisName `pulumi:"axisName"`
	// A list of dimensions for the field well.
	Dimensions []TemplateDimensionField `pulumi:"dimensions"`
	// A list of measures that exist in the field well.
	Measures []TemplateMeasureField `pulumi:"measures"`
	// A list of unaggregated fields that exist in the field well.
	Unaggregated []TemplateUnaggregatedField `pulumi:"unaggregated"`
}

// TemplatePluginVisualFieldWellInput is an input type that accepts TemplatePluginVisualFieldWellArgs and TemplatePluginVisualFieldWellOutput values.
// You can construct a concrete instance of `TemplatePluginVisualFieldWellInput` via:
//
//	TemplatePluginVisualFieldWellArgs{...}
type TemplatePluginVisualFieldWellInput interface {
	pulumi.Input

	ToTemplatePluginVisualFieldWellOutput() TemplatePluginVisualFieldWellOutput
	ToTemplatePluginVisualFieldWellOutputWithContext(context.Context) TemplatePluginVisualFieldWellOutput
}

type TemplatePluginVisualFieldWellArgs struct {
	// The semantic axis name for the field well.
	AxisName TemplatePluginVisualAxisNamePtrInput `pulumi:"axisName"`
	// A list of dimensions for the field well.
	Dimensions TemplateDimensionFieldArrayInput `pulumi:"dimensions"`
	// A list of measures that exist in the field well.
	Measures TemplateMeasureFieldArrayInput `pulumi:"measures"`
	// A list of unaggregated fields that exist in the field well.
	Unaggregated TemplateUnaggregatedFieldArrayInput `pulumi:"unaggregated"`
}

func (TemplatePluginVisualFieldWellArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePluginVisualFieldWell)(nil)).Elem()
}

func (i TemplatePluginVisualFieldWellArgs) ToTemplatePluginVisualFieldWellOutput() TemplatePluginVisualFieldWellOutput {
	return i.ToTemplatePluginVisualFieldWellOutputWithContext(context.Background())
}

func (i TemplatePluginVisualFieldWellArgs) ToTemplatePluginVisualFieldWellOutputWithContext(ctx context.Context) TemplatePluginVisualFieldWellOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePluginVisualFieldWellOutput)
}

// TemplatePluginVisualFieldWellArrayInput is an input type that accepts TemplatePluginVisualFieldWellArray and TemplatePluginVisualFieldWellArrayOutput values.
// You can construct a concrete instance of `TemplatePluginVisualFieldWellArrayInput` via:
//
//	TemplatePluginVisualFieldWellArray{ TemplatePluginVisualFieldWellArgs{...} }
type TemplatePluginVisualFieldWellArrayInput interface {
	pulumi.Input

	ToTemplatePluginVisualFieldWellArrayOutput() TemplatePluginVisualFieldWellArrayOutput
	ToTemplatePluginVisualFieldWellArrayOutputWithContext(context.Context) TemplatePluginVisualFieldWellArrayOutput
}

type TemplatePluginVisualFieldWellArray []TemplatePluginVisualFieldWellInput

func (TemplatePluginVisualFieldWellArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplatePluginVisualFieldWell)(nil)).Elem()
}

func (i TemplatePluginVisualFieldWellArray) ToTemplatePluginVisualFieldWellArrayOutput() TemplatePluginVisualFieldWellArrayOutput {
	return i.ToTemplatePluginVisualFieldWellArrayOutputWithContext(context.Background())
}

func (i TemplatePluginVisualFieldWellArray) ToTemplatePluginVisualFieldWellArrayOutputWithContext(ctx context.Context) TemplatePluginVisualFieldWellArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePluginVisualFieldWellArrayOutput)
}

type TemplatePluginVisualFieldWellOutput struct{ *pulumi.OutputState }

func (TemplatePluginVisualFieldWellOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePluginVisualFieldWell)(nil)).Elem()
}

func (o TemplatePluginVisualFieldWellOutput) ToTemplatePluginVisualFieldWellOutput() TemplatePluginVisualFieldWellOutput {
	return o
}

func (o TemplatePluginVisualFieldWellOutput) ToTemplatePluginVisualFieldWellOutputWithContext(ctx context.Context) TemplatePluginVisualFieldWellOutput {
	return o
}

// The semantic axis name for the field well.
func (o TemplatePluginVisualFieldWellOutput) AxisName() TemplatePluginVisualAxisNamePtrOutput {
	return o.ApplyT(func(v TemplatePluginVisualFieldWell) *TemplatePluginVisualAxisName { return v.AxisName }).(TemplatePluginVisualAxisNamePtrOutput)
}

// A list of dimensions for the field well.
func (o TemplatePluginVisualFieldWellOutput) Dimensions() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v TemplatePluginVisualFieldWell) []TemplateDimensionField { return v.Dimensions }).(TemplateDimensionFieldArrayOutput)
}

// A list of measures that exist in the field well.
func (o TemplatePluginVisualFieldWellOutput) Measures() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v TemplatePluginVisualFieldWell) []TemplateMeasureField { return v.Measures }).(TemplateMeasureFieldArrayOutput)
}

// A list of unaggregated fields that exist in the field well.
func (o TemplatePluginVisualFieldWellOutput) Unaggregated() TemplateUnaggregatedFieldArrayOutput {
	return o.ApplyT(func(v TemplatePluginVisualFieldWell) []TemplateUnaggregatedField { return v.Unaggregated }).(TemplateUnaggregatedFieldArrayOutput)
}

type TemplatePluginVisualFieldWellArrayOutput struct{ *pulumi.OutputState }

func (TemplatePluginVisualFieldWellArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplatePluginVisualFieldWell)(nil)).Elem()
}

func (o TemplatePluginVisualFieldWellArrayOutput) ToTemplatePluginVisualFieldWellArrayOutput() TemplatePluginVisualFieldWellArrayOutput {
	return o
}

func (o TemplatePluginVisualFieldWellArrayOutput) ToTemplatePluginVisualFieldWellArrayOutputWithContext(ctx context.Context) TemplatePluginVisualFieldWellArrayOutput {
	return o
}

func (o TemplatePluginVisualFieldWellArrayOutput) Index(i pulumi.IntInput) TemplatePluginVisualFieldWellOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplatePluginVisualFieldWell {
		return vs[0].([]TemplatePluginVisualFieldWell)[vs[1].(int)]
	}).(TemplatePluginVisualFieldWellOutput)
}

type TemplatePluginVisualItemsLimitConfiguration struct {
	// Determines how many values are be fetched at once.
	ItemsLimit *float64 `pulumi:"itemsLimit"`
}

// TemplatePluginVisualItemsLimitConfigurationInput is an input type that accepts TemplatePluginVisualItemsLimitConfigurationArgs and TemplatePluginVisualItemsLimitConfigurationOutput values.
// You can construct a concrete instance of `TemplatePluginVisualItemsLimitConfigurationInput` via:
//
//	TemplatePluginVisualItemsLimitConfigurationArgs{...}
type TemplatePluginVisualItemsLimitConfigurationInput interface {
	pulumi.Input

	ToTemplatePluginVisualItemsLimitConfigurationOutput() TemplatePluginVisualItemsLimitConfigurationOutput
	ToTemplatePluginVisualItemsLimitConfigurationOutputWithContext(context.Context) TemplatePluginVisualItemsLimitConfigurationOutput
}

type TemplatePluginVisualItemsLimitConfigurationArgs struct {
	// Determines how many values are be fetched at once.
	ItemsLimit pulumi.Float64PtrInput `pulumi:"itemsLimit"`
}

func (TemplatePluginVisualItemsLimitConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePluginVisualItemsLimitConfiguration)(nil)).Elem()
}

func (i TemplatePluginVisualItemsLimitConfigurationArgs) ToTemplatePluginVisualItemsLimitConfigurationOutput() TemplatePluginVisualItemsLimitConfigurationOutput {
	return i.ToTemplatePluginVisualItemsLimitConfigurationOutputWithContext(context.Background())
}

func (i TemplatePluginVisualItemsLimitConfigurationArgs) ToTemplatePluginVisualItemsLimitConfigurationOutputWithContext(ctx context.Context) TemplatePluginVisualItemsLimitConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePluginVisualItemsLimitConfigurationOutput)
}

func (i TemplatePluginVisualItemsLimitConfigurationArgs) ToTemplatePluginVisualItemsLimitConfigurationPtrOutput() TemplatePluginVisualItemsLimitConfigurationPtrOutput {
	return i.ToTemplatePluginVisualItemsLimitConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplatePluginVisualItemsLimitConfigurationArgs) ToTemplatePluginVisualItemsLimitConfigurationPtrOutputWithContext(ctx context.Context) TemplatePluginVisualItemsLimitConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePluginVisualItemsLimitConfigurationOutput).ToTemplatePluginVisualItemsLimitConfigurationPtrOutputWithContext(ctx)
}

// TemplatePluginVisualItemsLimitConfigurationPtrInput is an input type that accepts TemplatePluginVisualItemsLimitConfigurationArgs, TemplatePluginVisualItemsLimitConfigurationPtr and TemplatePluginVisualItemsLimitConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplatePluginVisualItemsLimitConfigurationPtrInput` via:
//
//	        TemplatePluginVisualItemsLimitConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplatePluginVisualItemsLimitConfigurationPtrInput interface {
	pulumi.Input

	ToTemplatePluginVisualItemsLimitConfigurationPtrOutput() TemplatePluginVisualItemsLimitConfigurationPtrOutput
	ToTemplatePluginVisualItemsLimitConfigurationPtrOutputWithContext(context.Context) TemplatePluginVisualItemsLimitConfigurationPtrOutput
}

type templatePluginVisualItemsLimitConfigurationPtrType TemplatePluginVisualItemsLimitConfigurationArgs

func TemplatePluginVisualItemsLimitConfigurationPtr(v *TemplatePluginVisualItemsLimitConfigurationArgs) TemplatePluginVisualItemsLimitConfigurationPtrInput {
	return (*templatePluginVisualItemsLimitConfigurationPtrType)(v)
}

func (*templatePluginVisualItemsLimitConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePluginVisualItemsLimitConfiguration)(nil)).Elem()
}

func (i *templatePluginVisualItemsLimitConfigurationPtrType) ToTemplatePluginVisualItemsLimitConfigurationPtrOutput() TemplatePluginVisualItemsLimitConfigurationPtrOutput {
	return i.ToTemplatePluginVisualItemsLimitConfigurationPtrOutputWithContext(context.Background())
}

func (i *templatePluginVisualItemsLimitConfigurationPtrType) ToTemplatePluginVisualItemsLimitConfigurationPtrOutputWithContext(ctx context.Context) TemplatePluginVisualItemsLimitConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePluginVisualItemsLimitConfigurationPtrOutput)
}

type TemplatePluginVisualItemsLimitConfigurationOutput struct{ *pulumi.OutputState }

func (TemplatePluginVisualItemsLimitConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePluginVisualItemsLimitConfiguration)(nil)).Elem()
}

func (o TemplatePluginVisualItemsLimitConfigurationOutput) ToTemplatePluginVisualItemsLimitConfigurationOutput() TemplatePluginVisualItemsLimitConfigurationOutput {
	return o
}

func (o TemplatePluginVisualItemsLimitConfigurationOutput) ToTemplatePluginVisualItemsLimitConfigurationOutputWithContext(ctx context.Context) TemplatePluginVisualItemsLimitConfigurationOutput {
	return o
}

func (o TemplatePluginVisualItemsLimitConfigurationOutput) ToTemplatePluginVisualItemsLimitConfigurationPtrOutput() TemplatePluginVisualItemsLimitConfigurationPtrOutput {
	return o.ToTemplatePluginVisualItemsLimitConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplatePluginVisualItemsLimitConfigurationOutput) ToTemplatePluginVisualItemsLimitConfigurationPtrOutputWithContext(ctx context.Context) TemplatePluginVisualItemsLimitConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplatePluginVisualItemsLimitConfiguration) *TemplatePluginVisualItemsLimitConfiguration {
		return &v
	}).(TemplatePluginVisualItemsLimitConfigurationPtrOutput)
}

// Determines how many values are be fetched at once.
func (o TemplatePluginVisualItemsLimitConfigurationOutput) ItemsLimit() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplatePluginVisualItemsLimitConfiguration) *float64 { return v.ItemsLimit }).(pulumi.Float64PtrOutput)
}

type TemplatePluginVisualItemsLimitConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplatePluginVisualItemsLimitConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePluginVisualItemsLimitConfiguration)(nil)).Elem()
}

func (o TemplatePluginVisualItemsLimitConfigurationPtrOutput) ToTemplatePluginVisualItemsLimitConfigurationPtrOutput() TemplatePluginVisualItemsLimitConfigurationPtrOutput {
	return o
}

func (o TemplatePluginVisualItemsLimitConfigurationPtrOutput) ToTemplatePluginVisualItemsLimitConfigurationPtrOutputWithContext(ctx context.Context) TemplatePluginVisualItemsLimitConfigurationPtrOutput {
	return o
}

func (o TemplatePluginVisualItemsLimitConfigurationPtrOutput) Elem() TemplatePluginVisualItemsLimitConfigurationOutput {
	return o.ApplyT(func(v *TemplatePluginVisualItemsLimitConfiguration) TemplatePluginVisualItemsLimitConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplatePluginVisualItemsLimitConfiguration
		return ret
	}).(TemplatePluginVisualItemsLimitConfigurationOutput)
}

// Determines how many values are be fetched at once.
func (o TemplatePluginVisualItemsLimitConfigurationPtrOutput) ItemsLimit() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplatePluginVisualItemsLimitConfiguration) *float64 {
		if v == nil {
			return nil
		}
		return v.ItemsLimit
	}).(pulumi.Float64PtrOutput)
}

type TemplatePluginVisualOptions struct {
	// The persisted properties and their values.
	VisualProperties []TemplatePluginVisualProperty `pulumi:"visualProperties"`
}

// TemplatePluginVisualOptionsInput is an input type that accepts TemplatePluginVisualOptionsArgs and TemplatePluginVisualOptionsOutput values.
// You can construct a concrete instance of `TemplatePluginVisualOptionsInput` via:
//
//	TemplatePluginVisualOptionsArgs{...}
type TemplatePluginVisualOptionsInput interface {
	pulumi.Input

	ToTemplatePluginVisualOptionsOutput() TemplatePluginVisualOptionsOutput
	ToTemplatePluginVisualOptionsOutputWithContext(context.Context) TemplatePluginVisualOptionsOutput
}

type TemplatePluginVisualOptionsArgs struct {
	// The persisted properties and their values.
	VisualProperties TemplatePluginVisualPropertyArrayInput `pulumi:"visualProperties"`
}

func (TemplatePluginVisualOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePluginVisualOptions)(nil)).Elem()
}

func (i TemplatePluginVisualOptionsArgs) ToTemplatePluginVisualOptionsOutput() TemplatePluginVisualOptionsOutput {
	return i.ToTemplatePluginVisualOptionsOutputWithContext(context.Background())
}

func (i TemplatePluginVisualOptionsArgs) ToTemplatePluginVisualOptionsOutputWithContext(ctx context.Context) TemplatePluginVisualOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePluginVisualOptionsOutput)
}

func (i TemplatePluginVisualOptionsArgs) ToTemplatePluginVisualOptionsPtrOutput() TemplatePluginVisualOptionsPtrOutput {
	return i.ToTemplatePluginVisualOptionsPtrOutputWithContext(context.Background())
}

func (i TemplatePluginVisualOptionsArgs) ToTemplatePluginVisualOptionsPtrOutputWithContext(ctx context.Context) TemplatePluginVisualOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePluginVisualOptionsOutput).ToTemplatePluginVisualOptionsPtrOutputWithContext(ctx)
}

// TemplatePluginVisualOptionsPtrInput is an input type that accepts TemplatePluginVisualOptionsArgs, TemplatePluginVisualOptionsPtr and TemplatePluginVisualOptionsPtrOutput values.
// You can construct a concrete instance of `TemplatePluginVisualOptionsPtrInput` via:
//
//	        TemplatePluginVisualOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplatePluginVisualOptionsPtrInput interface {
	pulumi.Input

	ToTemplatePluginVisualOptionsPtrOutput() TemplatePluginVisualOptionsPtrOutput
	ToTemplatePluginVisualOptionsPtrOutputWithContext(context.Context) TemplatePluginVisualOptionsPtrOutput
}

type templatePluginVisualOptionsPtrType TemplatePluginVisualOptionsArgs

func TemplatePluginVisualOptionsPtr(v *TemplatePluginVisualOptionsArgs) TemplatePluginVisualOptionsPtrInput {
	return (*templatePluginVisualOptionsPtrType)(v)
}

func (*templatePluginVisualOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePluginVisualOptions)(nil)).Elem()
}

func (i *templatePluginVisualOptionsPtrType) ToTemplatePluginVisualOptionsPtrOutput() TemplatePluginVisualOptionsPtrOutput {
	return i.ToTemplatePluginVisualOptionsPtrOutputWithContext(context.Background())
}

func (i *templatePluginVisualOptionsPtrType) ToTemplatePluginVisualOptionsPtrOutputWithContext(ctx context.Context) TemplatePluginVisualOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePluginVisualOptionsPtrOutput)
}

type TemplatePluginVisualOptionsOutput struct{ *pulumi.OutputState }

func (TemplatePluginVisualOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePluginVisualOptions)(nil)).Elem()
}

func (o TemplatePluginVisualOptionsOutput) ToTemplatePluginVisualOptionsOutput() TemplatePluginVisualOptionsOutput {
	return o
}

func (o TemplatePluginVisualOptionsOutput) ToTemplatePluginVisualOptionsOutputWithContext(ctx context.Context) TemplatePluginVisualOptionsOutput {
	return o
}

func (o TemplatePluginVisualOptionsOutput) ToTemplatePluginVisualOptionsPtrOutput() TemplatePluginVisualOptionsPtrOutput {
	return o.ToTemplatePluginVisualOptionsPtrOutputWithContext(context.Background())
}

func (o TemplatePluginVisualOptionsOutput) ToTemplatePluginVisualOptionsPtrOutputWithContext(ctx context.Context) TemplatePluginVisualOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplatePluginVisualOptions) *TemplatePluginVisualOptions {
		return &v
	}).(TemplatePluginVisualOptionsPtrOutput)
}

// The persisted properties and their values.
func (o TemplatePluginVisualOptionsOutput) VisualProperties() TemplatePluginVisualPropertyArrayOutput {
	return o.ApplyT(func(v TemplatePluginVisualOptions) []TemplatePluginVisualProperty { return v.VisualProperties }).(TemplatePluginVisualPropertyArrayOutput)
}

type TemplatePluginVisualOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplatePluginVisualOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePluginVisualOptions)(nil)).Elem()
}

func (o TemplatePluginVisualOptionsPtrOutput) ToTemplatePluginVisualOptionsPtrOutput() TemplatePluginVisualOptionsPtrOutput {
	return o
}

func (o TemplatePluginVisualOptionsPtrOutput) ToTemplatePluginVisualOptionsPtrOutputWithContext(ctx context.Context) TemplatePluginVisualOptionsPtrOutput {
	return o
}

func (o TemplatePluginVisualOptionsPtrOutput) Elem() TemplatePluginVisualOptionsOutput {
	return o.ApplyT(func(v *TemplatePluginVisualOptions) TemplatePluginVisualOptions {
		if v != nil {
			return *v
		}
		var ret TemplatePluginVisualOptions
		return ret
	}).(TemplatePluginVisualOptionsOutput)
}

// The persisted properties and their values.
func (o TemplatePluginVisualOptionsPtrOutput) VisualProperties() TemplatePluginVisualPropertyArrayOutput {
	return o.ApplyT(func(v *TemplatePluginVisualOptions) []TemplatePluginVisualProperty {
		if v == nil {
			return nil
		}
		return v.VisualProperties
	}).(TemplatePluginVisualPropertyArrayOutput)
}

type TemplatePluginVisualProperty struct {
	// The name of the plugin visual property.
	Name *string `pulumi:"name"`
	// The value of the plugin visual property.
	Value *string `pulumi:"value"`
}

// TemplatePluginVisualPropertyInput is an input type that accepts TemplatePluginVisualPropertyArgs and TemplatePluginVisualPropertyOutput values.
// You can construct a concrete instance of `TemplatePluginVisualPropertyInput` via:
//
//	TemplatePluginVisualPropertyArgs{...}
type TemplatePluginVisualPropertyInput interface {
	pulumi.Input

	ToTemplatePluginVisualPropertyOutput() TemplatePluginVisualPropertyOutput
	ToTemplatePluginVisualPropertyOutputWithContext(context.Context) TemplatePluginVisualPropertyOutput
}

type TemplatePluginVisualPropertyArgs struct {
	// The name of the plugin visual property.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The value of the plugin visual property.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (TemplatePluginVisualPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePluginVisualProperty)(nil)).Elem()
}

func (i TemplatePluginVisualPropertyArgs) ToTemplatePluginVisualPropertyOutput() TemplatePluginVisualPropertyOutput {
	return i.ToTemplatePluginVisualPropertyOutputWithContext(context.Background())
}

func (i TemplatePluginVisualPropertyArgs) ToTemplatePluginVisualPropertyOutputWithContext(ctx context.Context) TemplatePluginVisualPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePluginVisualPropertyOutput)
}

// TemplatePluginVisualPropertyArrayInput is an input type that accepts TemplatePluginVisualPropertyArray and TemplatePluginVisualPropertyArrayOutput values.
// You can construct a concrete instance of `TemplatePluginVisualPropertyArrayInput` via:
//
//	TemplatePluginVisualPropertyArray{ TemplatePluginVisualPropertyArgs{...} }
type TemplatePluginVisualPropertyArrayInput interface {
	pulumi.Input

	ToTemplatePluginVisualPropertyArrayOutput() TemplatePluginVisualPropertyArrayOutput
	ToTemplatePluginVisualPropertyArrayOutputWithContext(context.Context) TemplatePluginVisualPropertyArrayOutput
}

type TemplatePluginVisualPropertyArray []TemplatePluginVisualPropertyInput

func (TemplatePluginVisualPropertyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplatePluginVisualProperty)(nil)).Elem()
}

func (i TemplatePluginVisualPropertyArray) ToTemplatePluginVisualPropertyArrayOutput() TemplatePluginVisualPropertyArrayOutput {
	return i.ToTemplatePluginVisualPropertyArrayOutputWithContext(context.Background())
}

func (i TemplatePluginVisualPropertyArray) ToTemplatePluginVisualPropertyArrayOutputWithContext(ctx context.Context) TemplatePluginVisualPropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePluginVisualPropertyArrayOutput)
}

type TemplatePluginVisualPropertyOutput struct{ *pulumi.OutputState }

func (TemplatePluginVisualPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePluginVisualProperty)(nil)).Elem()
}

func (o TemplatePluginVisualPropertyOutput) ToTemplatePluginVisualPropertyOutput() TemplatePluginVisualPropertyOutput {
	return o
}

func (o TemplatePluginVisualPropertyOutput) ToTemplatePluginVisualPropertyOutputWithContext(ctx context.Context) TemplatePluginVisualPropertyOutput {
	return o
}

// The name of the plugin visual property.
func (o TemplatePluginVisualPropertyOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplatePluginVisualProperty) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The value of the plugin visual property.
func (o TemplatePluginVisualPropertyOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplatePluginVisualProperty) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type TemplatePluginVisualPropertyArrayOutput struct{ *pulumi.OutputState }

func (TemplatePluginVisualPropertyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplatePluginVisualProperty)(nil)).Elem()
}

func (o TemplatePluginVisualPropertyArrayOutput) ToTemplatePluginVisualPropertyArrayOutput() TemplatePluginVisualPropertyArrayOutput {
	return o
}

func (o TemplatePluginVisualPropertyArrayOutput) ToTemplatePluginVisualPropertyArrayOutputWithContext(ctx context.Context) TemplatePluginVisualPropertyArrayOutput {
	return o
}

func (o TemplatePluginVisualPropertyArrayOutput) Index(i pulumi.IntInput) TemplatePluginVisualPropertyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplatePluginVisualProperty {
		return vs[0].([]TemplatePluginVisualProperty)[vs[1].(int)]
	}).(TemplatePluginVisualPropertyOutput)
}

type TemplatePluginVisualSortConfiguration struct {
	// The table query sorting options for the plugin visual.
	PluginVisualTableQuerySort *TemplatePluginVisualTableQuerySort `pulumi:"pluginVisualTableQuerySort"`
}

// TemplatePluginVisualSortConfigurationInput is an input type that accepts TemplatePluginVisualSortConfigurationArgs and TemplatePluginVisualSortConfigurationOutput values.
// You can construct a concrete instance of `TemplatePluginVisualSortConfigurationInput` via:
//
//	TemplatePluginVisualSortConfigurationArgs{...}
type TemplatePluginVisualSortConfigurationInput interface {
	pulumi.Input

	ToTemplatePluginVisualSortConfigurationOutput() TemplatePluginVisualSortConfigurationOutput
	ToTemplatePluginVisualSortConfigurationOutputWithContext(context.Context) TemplatePluginVisualSortConfigurationOutput
}

type TemplatePluginVisualSortConfigurationArgs struct {
	// The table query sorting options for the plugin visual.
	PluginVisualTableQuerySort TemplatePluginVisualTableQuerySortPtrInput `pulumi:"pluginVisualTableQuerySort"`
}

func (TemplatePluginVisualSortConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePluginVisualSortConfiguration)(nil)).Elem()
}

func (i TemplatePluginVisualSortConfigurationArgs) ToTemplatePluginVisualSortConfigurationOutput() TemplatePluginVisualSortConfigurationOutput {
	return i.ToTemplatePluginVisualSortConfigurationOutputWithContext(context.Background())
}

func (i TemplatePluginVisualSortConfigurationArgs) ToTemplatePluginVisualSortConfigurationOutputWithContext(ctx context.Context) TemplatePluginVisualSortConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePluginVisualSortConfigurationOutput)
}

func (i TemplatePluginVisualSortConfigurationArgs) ToTemplatePluginVisualSortConfigurationPtrOutput() TemplatePluginVisualSortConfigurationPtrOutput {
	return i.ToTemplatePluginVisualSortConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplatePluginVisualSortConfigurationArgs) ToTemplatePluginVisualSortConfigurationPtrOutputWithContext(ctx context.Context) TemplatePluginVisualSortConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePluginVisualSortConfigurationOutput).ToTemplatePluginVisualSortConfigurationPtrOutputWithContext(ctx)
}

// TemplatePluginVisualSortConfigurationPtrInput is an input type that accepts TemplatePluginVisualSortConfigurationArgs, TemplatePluginVisualSortConfigurationPtr and TemplatePluginVisualSortConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplatePluginVisualSortConfigurationPtrInput` via:
//
//	        TemplatePluginVisualSortConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplatePluginVisualSortConfigurationPtrInput interface {
	pulumi.Input

	ToTemplatePluginVisualSortConfigurationPtrOutput() TemplatePluginVisualSortConfigurationPtrOutput
	ToTemplatePluginVisualSortConfigurationPtrOutputWithContext(context.Context) TemplatePluginVisualSortConfigurationPtrOutput
}

type templatePluginVisualSortConfigurationPtrType TemplatePluginVisualSortConfigurationArgs

func TemplatePluginVisualSortConfigurationPtr(v *TemplatePluginVisualSortConfigurationArgs) TemplatePluginVisualSortConfigurationPtrInput {
	return (*templatePluginVisualSortConfigurationPtrType)(v)
}

func (*templatePluginVisualSortConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePluginVisualSortConfiguration)(nil)).Elem()
}

func (i *templatePluginVisualSortConfigurationPtrType) ToTemplatePluginVisualSortConfigurationPtrOutput() TemplatePluginVisualSortConfigurationPtrOutput {
	return i.ToTemplatePluginVisualSortConfigurationPtrOutputWithContext(context.Background())
}

func (i *templatePluginVisualSortConfigurationPtrType) ToTemplatePluginVisualSortConfigurationPtrOutputWithContext(ctx context.Context) TemplatePluginVisualSortConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePluginVisualSortConfigurationPtrOutput)
}

type TemplatePluginVisualSortConfigurationOutput struct{ *pulumi.OutputState }

func (TemplatePluginVisualSortConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePluginVisualSortConfiguration)(nil)).Elem()
}

func (o TemplatePluginVisualSortConfigurationOutput) ToTemplatePluginVisualSortConfigurationOutput() TemplatePluginVisualSortConfigurationOutput {
	return o
}

func (o TemplatePluginVisualSortConfigurationOutput) ToTemplatePluginVisualSortConfigurationOutputWithContext(ctx context.Context) TemplatePluginVisualSortConfigurationOutput {
	return o
}

func (o TemplatePluginVisualSortConfigurationOutput) ToTemplatePluginVisualSortConfigurationPtrOutput() TemplatePluginVisualSortConfigurationPtrOutput {
	return o.ToTemplatePluginVisualSortConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplatePluginVisualSortConfigurationOutput) ToTemplatePluginVisualSortConfigurationPtrOutputWithContext(ctx context.Context) TemplatePluginVisualSortConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplatePluginVisualSortConfiguration) *TemplatePluginVisualSortConfiguration {
		return &v
	}).(TemplatePluginVisualSortConfigurationPtrOutput)
}

// The table query sorting options for the plugin visual.
func (o TemplatePluginVisualSortConfigurationOutput) PluginVisualTableQuerySort() TemplatePluginVisualTableQuerySortPtrOutput {
	return o.ApplyT(func(v TemplatePluginVisualSortConfiguration) *TemplatePluginVisualTableQuerySort {
		return v.PluginVisualTableQuerySort
	}).(TemplatePluginVisualTableQuerySortPtrOutput)
}

type TemplatePluginVisualSortConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplatePluginVisualSortConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePluginVisualSortConfiguration)(nil)).Elem()
}

func (o TemplatePluginVisualSortConfigurationPtrOutput) ToTemplatePluginVisualSortConfigurationPtrOutput() TemplatePluginVisualSortConfigurationPtrOutput {
	return o
}

func (o TemplatePluginVisualSortConfigurationPtrOutput) ToTemplatePluginVisualSortConfigurationPtrOutputWithContext(ctx context.Context) TemplatePluginVisualSortConfigurationPtrOutput {
	return o
}

func (o TemplatePluginVisualSortConfigurationPtrOutput) Elem() TemplatePluginVisualSortConfigurationOutput {
	return o.ApplyT(func(v *TemplatePluginVisualSortConfiguration) TemplatePluginVisualSortConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplatePluginVisualSortConfiguration
		return ret
	}).(TemplatePluginVisualSortConfigurationOutput)
}

// The table query sorting options for the plugin visual.
func (o TemplatePluginVisualSortConfigurationPtrOutput) PluginVisualTableQuerySort() TemplatePluginVisualTableQuerySortPtrOutput {
	return o.ApplyT(func(v *TemplatePluginVisualSortConfiguration) *TemplatePluginVisualTableQuerySort {
		if v == nil {
			return nil
		}
		return v.PluginVisualTableQuerySort
	}).(TemplatePluginVisualTableQuerySortPtrOutput)
}

type TemplatePluginVisualTableQuerySort struct {
	// The maximum amount of data to be returned by a query.
	ItemsLimitConfiguration *TemplatePluginVisualItemsLimitConfiguration `pulumi:"itemsLimitConfiguration"`
	// Determines how data is sorted in the response.
	RowSort []TemplateFieldSortOptions `pulumi:"rowSort"`
}

// TemplatePluginVisualTableQuerySortInput is an input type that accepts TemplatePluginVisualTableQuerySortArgs and TemplatePluginVisualTableQuerySortOutput values.
// You can construct a concrete instance of `TemplatePluginVisualTableQuerySortInput` via:
//
//	TemplatePluginVisualTableQuerySortArgs{...}
type TemplatePluginVisualTableQuerySortInput interface {
	pulumi.Input

	ToTemplatePluginVisualTableQuerySortOutput() TemplatePluginVisualTableQuerySortOutput
	ToTemplatePluginVisualTableQuerySortOutputWithContext(context.Context) TemplatePluginVisualTableQuerySortOutput
}

type TemplatePluginVisualTableQuerySortArgs struct {
	// The maximum amount of data to be returned by a query.
	ItemsLimitConfiguration TemplatePluginVisualItemsLimitConfigurationPtrInput `pulumi:"itemsLimitConfiguration"`
	// Determines how data is sorted in the response.
	RowSort TemplateFieldSortOptionsArrayInput `pulumi:"rowSort"`
}

func (TemplatePluginVisualTableQuerySortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePluginVisualTableQuerySort)(nil)).Elem()
}

func (i TemplatePluginVisualTableQuerySortArgs) ToTemplatePluginVisualTableQuerySortOutput() TemplatePluginVisualTableQuerySortOutput {
	return i.ToTemplatePluginVisualTableQuerySortOutputWithContext(context.Background())
}

func (i TemplatePluginVisualTableQuerySortArgs) ToTemplatePluginVisualTableQuerySortOutputWithContext(ctx context.Context) TemplatePluginVisualTableQuerySortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePluginVisualTableQuerySortOutput)
}

func (i TemplatePluginVisualTableQuerySortArgs) ToTemplatePluginVisualTableQuerySortPtrOutput() TemplatePluginVisualTableQuerySortPtrOutput {
	return i.ToTemplatePluginVisualTableQuerySortPtrOutputWithContext(context.Background())
}

func (i TemplatePluginVisualTableQuerySortArgs) ToTemplatePluginVisualTableQuerySortPtrOutputWithContext(ctx context.Context) TemplatePluginVisualTableQuerySortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePluginVisualTableQuerySortOutput).ToTemplatePluginVisualTableQuerySortPtrOutputWithContext(ctx)
}

// TemplatePluginVisualTableQuerySortPtrInput is an input type that accepts TemplatePluginVisualTableQuerySortArgs, TemplatePluginVisualTableQuerySortPtr and TemplatePluginVisualTableQuerySortPtrOutput values.
// You can construct a concrete instance of `TemplatePluginVisualTableQuerySortPtrInput` via:
//
//	        TemplatePluginVisualTableQuerySortArgs{...}
//
//	or:
//
//	        nil
type TemplatePluginVisualTableQuerySortPtrInput interface {
	pulumi.Input

	ToTemplatePluginVisualTableQuerySortPtrOutput() TemplatePluginVisualTableQuerySortPtrOutput
	ToTemplatePluginVisualTableQuerySortPtrOutputWithContext(context.Context) TemplatePluginVisualTableQuerySortPtrOutput
}

type templatePluginVisualTableQuerySortPtrType TemplatePluginVisualTableQuerySortArgs

func TemplatePluginVisualTableQuerySortPtr(v *TemplatePluginVisualTableQuerySortArgs) TemplatePluginVisualTableQuerySortPtrInput {
	return (*templatePluginVisualTableQuerySortPtrType)(v)
}

func (*templatePluginVisualTableQuerySortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePluginVisualTableQuerySort)(nil)).Elem()
}

func (i *templatePluginVisualTableQuerySortPtrType) ToTemplatePluginVisualTableQuerySortPtrOutput() TemplatePluginVisualTableQuerySortPtrOutput {
	return i.ToTemplatePluginVisualTableQuerySortPtrOutputWithContext(context.Background())
}

func (i *templatePluginVisualTableQuerySortPtrType) ToTemplatePluginVisualTableQuerySortPtrOutputWithContext(ctx context.Context) TemplatePluginVisualTableQuerySortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePluginVisualTableQuerySortPtrOutput)
}

type TemplatePluginVisualTableQuerySortOutput struct{ *pulumi.OutputState }

func (TemplatePluginVisualTableQuerySortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePluginVisualTableQuerySort)(nil)).Elem()
}

func (o TemplatePluginVisualTableQuerySortOutput) ToTemplatePluginVisualTableQuerySortOutput() TemplatePluginVisualTableQuerySortOutput {
	return o
}

func (o TemplatePluginVisualTableQuerySortOutput) ToTemplatePluginVisualTableQuerySortOutputWithContext(ctx context.Context) TemplatePluginVisualTableQuerySortOutput {
	return o
}

func (o TemplatePluginVisualTableQuerySortOutput) ToTemplatePluginVisualTableQuerySortPtrOutput() TemplatePluginVisualTableQuerySortPtrOutput {
	return o.ToTemplatePluginVisualTableQuerySortPtrOutputWithContext(context.Background())
}

func (o TemplatePluginVisualTableQuerySortOutput) ToTemplatePluginVisualTableQuerySortPtrOutputWithContext(ctx context.Context) TemplatePluginVisualTableQuerySortPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplatePluginVisualTableQuerySort) *TemplatePluginVisualTableQuerySort {
		return &v
	}).(TemplatePluginVisualTableQuerySortPtrOutput)
}

// The maximum amount of data to be returned by a query.
func (o TemplatePluginVisualTableQuerySortOutput) ItemsLimitConfiguration() TemplatePluginVisualItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v TemplatePluginVisualTableQuerySort) *TemplatePluginVisualItemsLimitConfiguration {
		return v.ItemsLimitConfiguration
	}).(TemplatePluginVisualItemsLimitConfigurationPtrOutput)
}

// Determines how data is sorted in the response.
func (o TemplatePluginVisualTableQuerySortOutput) RowSort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v TemplatePluginVisualTableQuerySort) []TemplateFieldSortOptions { return v.RowSort }).(TemplateFieldSortOptionsArrayOutput)
}

type TemplatePluginVisualTableQuerySortPtrOutput struct{ *pulumi.OutputState }

func (TemplatePluginVisualTableQuerySortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePluginVisualTableQuerySort)(nil)).Elem()
}

func (o TemplatePluginVisualTableQuerySortPtrOutput) ToTemplatePluginVisualTableQuerySortPtrOutput() TemplatePluginVisualTableQuerySortPtrOutput {
	return o
}

func (o TemplatePluginVisualTableQuerySortPtrOutput) ToTemplatePluginVisualTableQuerySortPtrOutputWithContext(ctx context.Context) TemplatePluginVisualTableQuerySortPtrOutput {
	return o
}

func (o TemplatePluginVisualTableQuerySortPtrOutput) Elem() TemplatePluginVisualTableQuerySortOutput {
	return o.ApplyT(func(v *TemplatePluginVisualTableQuerySort) TemplatePluginVisualTableQuerySort {
		if v != nil {
			return *v
		}
		var ret TemplatePluginVisualTableQuerySort
		return ret
	}).(TemplatePluginVisualTableQuerySortOutput)
}

// The maximum amount of data to be returned by a query.
func (o TemplatePluginVisualTableQuerySortPtrOutput) ItemsLimitConfiguration() TemplatePluginVisualItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplatePluginVisualTableQuerySort) *TemplatePluginVisualItemsLimitConfiguration {
		if v == nil {
			return nil
		}
		return v.ItemsLimitConfiguration
	}).(TemplatePluginVisualItemsLimitConfigurationPtrOutput)
}

// Determines how data is sorted in the response.
func (o TemplatePluginVisualTableQuerySortPtrOutput) RowSort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v *TemplatePluginVisualTableQuerySort) []TemplateFieldSortOptions {
		if v == nil {
			return nil
		}
		return v.RowSort
	}).(TemplateFieldSortOptionsArrayOutput)
}

type TemplatePredefinedHierarchy struct {
	// The list of columns that define the predefined hierarchy.
	Columns []TemplateColumnIdentifier `pulumi:"columns"`
	// The option that determines the drill down filters for the predefined hierarchy.
	DrillDownFilters []TemplateDrillDownFilter `pulumi:"drillDownFilters"`
	// The hierarchy ID of the predefined hierarchy.
	HierarchyId string `pulumi:"hierarchyId"`
}

// TemplatePredefinedHierarchyInput is an input type that accepts TemplatePredefinedHierarchyArgs and TemplatePredefinedHierarchyOutput values.
// You can construct a concrete instance of `TemplatePredefinedHierarchyInput` via:
//
//	TemplatePredefinedHierarchyArgs{...}
type TemplatePredefinedHierarchyInput interface {
	pulumi.Input

	ToTemplatePredefinedHierarchyOutput() TemplatePredefinedHierarchyOutput
	ToTemplatePredefinedHierarchyOutputWithContext(context.Context) TemplatePredefinedHierarchyOutput
}

type TemplatePredefinedHierarchyArgs struct {
	// The list of columns that define the predefined hierarchy.
	Columns TemplateColumnIdentifierArrayInput `pulumi:"columns"`
	// The option that determines the drill down filters for the predefined hierarchy.
	DrillDownFilters TemplateDrillDownFilterArrayInput `pulumi:"drillDownFilters"`
	// The hierarchy ID of the predefined hierarchy.
	HierarchyId pulumi.StringInput `pulumi:"hierarchyId"`
}

func (TemplatePredefinedHierarchyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePredefinedHierarchy)(nil)).Elem()
}

func (i TemplatePredefinedHierarchyArgs) ToTemplatePredefinedHierarchyOutput() TemplatePredefinedHierarchyOutput {
	return i.ToTemplatePredefinedHierarchyOutputWithContext(context.Background())
}

func (i TemplatePredefinedHierarchyArgs) ToTemplatePredefinedHierarchyOutputWithContext(ctx context.Context) TemplatePredefinedHierarchyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePredefinedHierarchyOutput)
}

func (i TemplatePredefinedHierarchyArgs) ToTemplatePredefinedHierarchyPtrOutput() TemplatePredefinedHierarchyPtrOutput {
	return i.ToTemplatePredefinedHierarchyPtrOutputWithContext(context.Background())
}

func (i TemplatePredefinedHierarchyArgs) ToTemplatePredefinedHierarchyPtrOutputWithContext(ctx context.Context) TemplatePredefinedHierarchyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePredefinedHierarchyOutput).ToTemplatePredefinedHierarchyPtrOutputWithContext(ctx)
}

// TemplatePredefinedHierarchyPtrInput is an input type that accepts TemplatePredefinedHierarchyArgs, TemplatePredefinedHierarchyPtr and TemplatePredefinedHierarchyPtrOutput values.
// You can construct a concrete instance of `TemplatePredefinedHierarchyPtrInput` via:
//
//	        TemplatePredefinedHierarchyArgs{...}
//
//	or:
//
//	        nil
type TemplatePredefinedHierarchyPtrInput interface {
	pulumi.Input

	ToTemplatePredefinedHierarchyPtrOutput() TemplatePredefinedHierarchyPtrOutput
	ToTemplatePredefinedHierarchyPtrOutputWithContext(context.Context) TemplatePredefinedHierarchyPtrOutput
}

type templatePredefinedHierarchyPtrType TemplatePredefinedHierarchyArgs

func TemplatePredefinedHierarchyPtr(v *TemplatePredefinedHierarchyArgs) TemplatePredefinedHierarchyPtrInput {
	return (*templatePredefinedHierarchyPtrType)(v)
}

func (*templatePredefinedHierarchyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePredefinedHierarchy)(nil)).Elem()
}

func (i *templatePredefinedHierarchyPtrType) ToTemplatePredefinedHierarchyPtrOutput() TemplatePredefinedHierarchyPtrOutput {
	return i.ToTemplatePredefinedHierarchyPtrOutputWithContext(context.Background())
}

func (i *templatePredefinedHierarchyPtrType) ToTemplatePredefinedHierarchyPtrOutputWithContext(ctx context.Context) TemplatePredefinedHierarchyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePredefinedHierarchyPtrOutput)
}

type TemplatePredefinedHierarchyOutput struct{ *pulumi.OutputState }

func (TemplatePredefinedHierarchyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplatePredefinedHierarchy)(nil)).Elem()
}

func (o TemplatePredefinedHierarchyOutput) ToTemplatePredefinedHierarchyOutput() TemplatePredefinedHierarchyOutput {
	return o
}

func (o TemplatePredefinedHierarchyOutput) ToTemplatePredefinedHierarchyOutputWithContext(ctx context.Context) TemplatePredefinedHierarchyOutput {
	return o
}

func (o TemplatePredefinedHierarchyOutput) ToTemplatePredefinedHierarchyPtrOutput() TemplatePredefinedHierarchyPtrOutput {
	return o.ToTemplatePredefinedHierarchyPtrOutputWithContext(context.Background())
}

func (o TemplatePredefinedHierarchyOutput) ToTemplatePredefinedHierarchyPtrOutputWithContext(ctx context.Context) TemplatePredefinedHierarchyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplatePredefinedHierarchy) *TemplatePredefinedHierarchy {
		return &v
	}).(TemplatePredefinedHierarchyPtrOutput)
}

// The list of columns that define the predefined hierarchy.
func (o TemplatePredefinedHierarchyOutput) Columns() TemplateColumnIdentifierArrayOutput {
	return o.ApplyT(func(v TemplatePredefinedHierarchy) []TemplateColumnIdentifier { return v.Columns }).(TemplateColumnIdentifierArrayOutput)
}

// The option that determines the drill down filters for the predefined hierarchy.
func (o TemplatePredefinedHierarchyOutput) DrillDownFilters() TemplateDrillDownFilterArrayOutput {
	return o.ApplyT(func(v TemplatePredefinedHierarchy) []TemplateDrillDownFilter { return v.DrillDownFilters }).(TemplateDrillDownFilterArrayOutput)
}

// The hierarchy ID of the predefined hierarchy.
func (o TemplatePredefinedHierarchyOutput) HierarchyId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplatePredefinedHierarchy) string { return v.HierarchyId }).(pulumi.StringOutput)
}

type TemplatePredefinedHierarchyPtrOutput struct{ *pulumi.OutputState }

func (TemplatePredefinedHierarchyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplatePredefinedHierarchy)(nil)).Elem()
}

func (o TemplatePredefinedHierarchyPtrOutput) ToTemplatePredefinedHierarchyPtrOutput() TemplatePredefinedHierarchyPtrOutput {
	return o
}

func (o TemplatePredefinedHierarchyPtrOutput) ToTemplatePredefinedHierarchyPtrOutputWithContext(ctx context.Context) TemplatePredefinedHierarchyPtrOutput {
	return o
}

func (o TemplatePredefinedHierarchyPtrOutput) Elem() TemplatePredefinedHierarchyOutput {
	return o.ApplyT(func(v *TemplatePredefinedHierarchy) TemplatePredefinedHierarchy {
		if v != nil {
			return *v
		}
		var ret TemplatePredefinedHierarchy
		return ret
	}).(TemplatePredefinedHierarchyOutput)
}

// The list of columns that define the predefined hierarchy.
func (o TemplatePredefinedHierarchyPtrOutput) Columns() TemplateColumnIdentifierArrayOutput {
	return o.ApplyT(func(v *TemplatePredefinedHierarchy) []TemplateColumnIdentifier {
		if v == nil {
			return nil
		}
		return v.Columns
	}).(TemplateColumnIdentifierArrayOutput)
}

// The option that determines the drill down filters for the predefined hierarchy.
func (o TemplatePredefinedHierarchyPtrOutput) DrillDownFilters() TemplateDrillDownFilterArrayOutput {
	return o.ApplyT(func(v *TemplatePredefinedHierarchy) []TemplateDrillDownFilter {
		if v == nil {
			return nil
		}
		return v.DrillDownFilters
	}).(TemplateDrillDownFilterArrayOutput)
}

// The hierarchy ID of the predefined hierarchy.
func (o TemplatePredefinedHierarchyPtrOutput) HierarchyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplatePredefinedHierarchy) *string {
		if v == nil {
			return nil
		}
		return &v.HierarchyId
	}).(pulumi.StringPtrOutput)
}

type TemplateProgressBarOptions struct {
	// The visibility of the progress bar.
	Visibility interface{} `pulumi:"visibility"`
}

// TemplateProgressBarOptionsInput is an input type that accepts TemplateProgressBarOptionsArgs and TemplateProgressBarOptionsOutput values.
// You can construct a concrete instance of `TemplateProgressBarOptionsInput` via:
//
//	TemplateProgressBarOptionsArgs{...}
type TemplateProgressBarOptionsInput interface {
	pulumi.Input

	ToTemplateProgressBarOptionsOutput() TemplateProgressBarOptionsOutput
	ToTemplateProgressBarOptionsOutputWithContext(context.Context) TemplateProgressBarOptionsOutput
}

type TemplateProgressBarOptionsArgs struct {
	// The visibility of the progress bar.
	Visibility pulumi.Input `pulumi:"visibility"`
}

func (TemplateProgressBarOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateProgressBarOptions)(nil)).Elem()
}

func (i TemplateProgressBarOptionsArgs) ToTemplateProgressBarOptionsOutput() TemplateProgressBarOptionsOutput {
	return i.ToTemplateProgressBarOptionsOutputWithContext(context.Background())
}

func (i TemplateProgressBarOptionsArgs) ToTemplateProgressBarOptionsOutputWithContext(ctx context.Context) TemplateProgressBarOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateProgressBarOptionsOutput)
}

func (i TemplateProgressBarOptionsArgs) ToTemplateProgressBarOptionsPtrOutput() TemplateProgressBarOptionsPtrOutput {
	return i.ToTemplateProgressBarOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateProgressBarOptionsArgs) ToTemplateProgressBarOptionsPtrOutputWithContext(ctx context.Context) TemplateProgressBarOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateProgressBarOptionsOutput).ToTemplateProgressBarOptionsPtrOutputWithContext(ctx)
}

// TemplateProgressBarOptionsPtrInput is an input type that accepts TemplateProgressBarOptionsArgs, TemplateProgressBarOptionsPtr and TemplateProgressBarOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateProgressBarOptionsPtrInput` via:
//
//	        TemplateProgressBarOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateProgressBarOptionsPtrInput interface {
	pulumi.Input

	ToTemplateProgressBarOptionsPtrOutput() TemplateProgressBarOptionsPtrOutput
	ToTemplateProgressBarOptionsPtrOutputWithContext(context.Context) TemplateProgressBarOptionsPtrOutput
}

type templateProgressBarOptionsPtrType TemplateProgressBarOptionsArgs

func TemplateProgressBarOptionsPtr(v *TemplateProgressBarOptionsArgs) TemplateProgressBarOptionsPtrInput {
	return (*templateProgressBarOptionsPtrType)(v)
}

func (*templateProgressBarOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateProgressBarOptions)(nil)).Elem()
}

func (i *templateProgressBarOptionsPtrType) ToTemplateProgressBarOptionsPtrOutput() TemplateProgressBarOptionsPtrOutput {
	return i.ToTemplateProgressBarOptionsPtrOutputWithContext(context.Background())
}

func (i *templateProgressBarOptionsPtrType) ToTemplateProgressBarOptionsPtrOutputWithContext(ctx context.Context) TemplateProgressBarOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateProgressBarOptionsPtrOutput)
}

type TemplateProgressBarOptionsOutput struct{ *pulumi.OutputState }

func (TemplateProgressBarOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateProgressBarOptions)(nil)).Elem()
}

func (o TemplateProgressBarOptionsOutput) ToTemplateProgressBarOptionsOutput() TemplateProgressBarOptionsOutput {
	return o
}

func (o TemplateProgressBarOptionsOutput) ToTemplateProgressBarOptionsOutputWithContext(ctx context.Context) TemplateProgressBarOptionsOutput {
	return o
}

func (o TemplateProgressBarOptionsOutput) ToTemplateProgressBarOptionsPtrOutput() TemplateProgressBarOptionsPtrOutput {
	return o.ToTemplateProgressBarOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateProgressBarOptionsOutput) ToTemplateProgressBarOptionsPtrOutputWithContext(ctx context.Context) TemplateProgressBarOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateProgressBarOptions) *TemplateProgressBarOptions {
		return &v
	}).(TemplateProgressBarOptionsPtrOutput)
}

// The visibility of the progress bar.
func (o TemplateProgressBarOptionsOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateProgressBarOptions) interface{} { return v.Visibility }).(pulumi.AnyOutput)
}

type TemplateProgressBarOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateProgressBarOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateProgressBarOptions)(nil)).Elem()
}

func (o TemplateProgressBarOptionsPtrOutput) ToTemplateProgressBarOptionsPtrOutput() TemplateProgressBarOptionsPtrOutput {
	return o
}

func (o TemplateProgressBarOptionsPtrOutput) ToTemplateProgressBarOptionsPtrOutputWithContext(ctx context.Context) TemplateProgressBarOptionsPtrOutput {
	return o
}

func (o TemplateProgressBarOptionsPtrOutput) Elem() TemplateProgressBarOptionsOutput {
	return o.ApplyT(func(v *TemplateProgressBarOptions) TemplateProgressBarOptions {
		if v != nil {
			return *v
		}
		var ret TemplateProgressBarOptions
		return ret
	}).(TemplateProgressBarOptionsOutput)
}

// The visibility of the progress bar.
func (o TemplateProgressBarOptionsPtrOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateProgressBarOptions) interface{} {
		if v == nil {
			return nil
		}
		return v.Visibility
	}).(pulumi.AnyOutput)
}

type TemplateQueryExecutionOptions struct {
	// A structure that describes the query execution mode.
	QueryExecutionMode *TemplateQueryExecutionMode `pulumi:"queryExecutionMode"`
}

// TemplateQueryExecutionOptionsInput is an input type that accepts TemplateQueryExecutionOptionsArgs and TemplateQueryExecutionOptionsOutput values.
// You can construct a concrete instance of `TemplateQueryExecutionOptionsInput` via:
//
//	TemplateQueryExecutionOptionsArgs{...}
type TemplateQueryExecutionOptionsInput interface {
	pulumi.Input

	ToTemplateQueryExecutionOptionsOutput() TemplateQueryExecutionOptionsOutput
	ToTemplateQueryExecutionOptionsOutputWithContext(context.Context) TemplateQueryExecutionOptionsOutput
}

type TemplateQueryExecutionOptionsArgs struct {
	// A structure that describes the query execution mode.
	QueryExecutionMode TemplateQueryExecutionModePtrInput `pulumi:"queryExecutionMode"`
}

func (TemplateQueryExecutionOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateQueryExecutionOptions)(nil)).Elem()
}

func (i TemplateQueryExecutionOptionsArgs) ToTemplateQueryExecutionOptionsOutput() TemplateQueryExecutionOptionsOutput {
	return i.ToTemplateQueryExecutionOptionsOutputWithContext(context.Background())
}

func (i TemplateQueryExecutionOptionsArgs) ToTemplateQueryExecutionOptionsOutputWithContext(ctx context.Context) TemplateQueryExecutionOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateQueryExecutionOptionsOutput)
}

func (i TemplateQueryExecutionOptionsArgs) ToTemplateQueryExecutionOptionsPtrOutput() TemplateQueryExecutionOptionsPtrOutput {
	return i.ToTemplateQueryExecutionOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateQueryExecutionOptionsArgs) ToTemplateQueryExecutionOptionsPtrOutputWithContext(ctx context.Context) TemplateQueryExecutionOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateQueryExecutionOptionsOutput).ToTemplateQueryExecutionOptionsPtrOutputWithContext(ctx)
}

// TemplateQueryExecutionOptionsPtrInput is an input type that accepts TemplateQueryExecutionOptionsArgs, TemplateQueryExecutionOptionsPtr and TemplateQueryExecutionOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateQueryExecutionOptionsPtrInput` via:
//
//	        TemplateQueryExecutionOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateQueryExecutionOptionsPtrInput interface {
	pulumi.Input

	ToTemplateQueryExecutionOptionsPtrOutput() TemplateQueryExecutionOptionsPtrOutput
	ToTemplateQueryExecutionOptionsPtrOutputWithContext(context.Context) TemplateQueryExecutionOptionsPtrOutput
}

type templateQueryExecutionOptionsPtrType TemplateQueryExecutionOptionsArgs

func TemplateQueryExecutionOptionsPtr(v *TemplateQueryExecutionOptionsArgs) TemplateQueryExecutionOptionsPtrInput {
	return (*templateQueryExecutionOptionsPtrType)(v)
}

func (*templateQueryExecutionOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateQueryExecutionOptions)(nil)).Elem()
}

func (i *templateQueryExecutionOptionsPtrType) ToTemplateQueryExecutionOptionsPtrOutput() TemplateQueryExecutionOptionsPtrOutput {
	return i.ToTemplateQueryExecutionOptionsPtrOutputWithContext(context.Background())
}

func (i *templateQueryExecutionOptionsPtrType) ToTemplateQueryExecutionOptionsPtrOutputWithContext(ctx context.Context) TemplateQueryExecutionOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateQueryExecutionOptionsPtrOutput)
}

type TemplateQueryExecutionOptionsOutput struct{ *pulumi.OutputState }

func (TemplateQueryExecutionOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateQueryExecutionOptions)(nil)).Elem()
}

func (o TemplateQueryExecutionOptionsOutput) ToTemplateQueryExecutionOptionsOutput() TemplateQueryExecutionOptionsOutput {
	return o
}

func (o TemplateQueryExecutionOptionsOutput) ToTemplateQueryExecutionOptionsOutputWithContext(ctx context.Context) TemplateQueryExecutionOptionsOutput {
	return o
}

func (o TemplateQueryExecutionOptionsOutput) ToTemplateQueryExecutionOptionsPtrOutput() TemplateQueryExecutionOptionsPtrOutput {
	return o.ToTemplateQueryExecutionOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateQueryExecutionOptionsOutput) ToTemplateQueryExecutionOptionsPtrOutputWithContext(ctx context.Context) TemplateQueryExecutionOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateQueryExecutionOptions) *TemplateQueryExecutionOptions {
		return &v
	}).(TemplateQueryExecutionOptionsPtrOutput)
}

// A structure that describes the query execution mode.
func (o TemplateQueryExecutionOptionsOutput) QueryExecutionMode() TemplateQueryExecutionModePtrOutput {
	return o.ApplyT(func(v TemplateQueryExecutionOptions) *TemplateQueryExecutionMode { return v.QueryExecutionMode }).(TemplateQueryExecutionModePtrOutput)
}

type TemplateQueryExecutionOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateQueryExecutionOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateQueryExecutionOptions)(nil)).Elem()
}

func (o TemplateQueryExecutionOptionsPtrOutput) ToTemplateQueryExecutionOptionsPtrOutput() TemplateQueryExecutionOptionsPtrOutput {
	return o
}

func (o TemplateQueryExecutionOptionsPtrOutput) ToTemplateQueryExecutionOptionsPtrOutputWithContext(ctx context.Context) TemplateQueryExecutionOptionsPtrOutput {
	return o
}

func (o TemplateQueryExecutionOptionsPtrOutput) Elem() TemplateQueryExecutionOptionsOutput {
	return o.ApplyT(func(v *TemplateQueryExecutionOptions) TemplateQueryExecutionOptions {
		if v != nil {
			return *v
		}
		var ret TemplateQueryExecutionOptions
		return ret
	}).(TemplateQueryExecutionOptionsOutput)
}

// A structure that describes the query execution mode.
func (o TemplateQueryExecutionOptionsPtrOutput) QueryExecutionMode() TemplateQueryExecutionModePtrOutput {
	return o.ApplyT(func(v *TemplateQueryExecutionOptions) *TemplateQueryExecutionMode {
		if v == nil {
			return nil
		}
		return v.QueryExecutionMode
	}).(TemplateQueryExecutionModePtrOutput)
}

type TemplateRadarChartAggregatedFieldWells struct {
	// The aggregated field well categories of a radar chart.
	Category []TemplateDimensionField `pulumi:"category"`
	// The color that are assigned to the aggregated field wells of a radar chart.
	Color []TemplateDimensionField `pulumi:"color"`
	// The values that are assigned to the aggregated field wells of a radar chart.
	Values []TemplateMeasureField `pulumi:"values"`
}

// TemplateRadarChartAggregatedFieldWellsInput is an input type that accepts TemplateRadarChartAggregatedFieldWellsArgs and TemplateRadarChartAggregatedFieldWellsOutput values.
// You can construct a concrete instance of `TemplateRadarChartAggregatedFieldWellsInput` via:
//
//	TemplateRadarChartAggregatedFieldWellsArgs{...}
type TemplateRadarChartAggregatedFieldWellsInput interface {
	pulumi.Input

	ToTemplateRadarChartAggregatedFieldWellsOutput() TemplateRadarChartAggregatedFieldWellsOutput
	ToTemplateRadarChartAggregatedFieldWellsOutputWithContext(context.Context) TemplateRadarChartAggregatedFieldWellsOutput
}

type TemplateRadarChartAggregatedFieldWellsArgs struct {
	// The aggregated field well categories of a radar chart.
	Category TemplateDimensionFieldArrayInput `pulumi:"category"`
	// The color that are assigned to the aggregated field wells of a radar chart.
	Color TemplateDimensionFieldArrayInput `pulumi:"color"`
	// The values that are assigned to the aggregated field wells of a radar chart.
	Values TemplateMeasureFieldArrayInput `pulumi:"values"`
}

func (TemplateRadarChartAggregatedFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateRadarChartAggregatedFieldWells)(nil)).Elem()
}

func (i TemplateRadarChartAggregatedFieldWellsArgs) ToTemplateRadarChartAggregatedFieldWellsOutput() TemplateRadarChartAggregatedFieldWellsOutput {
	return i.ToTemplateRadarChartAggregatedFieldWellsOutputWithContext(context.Background())
}

func (i TemplateRadarChartAggregatedFieldWellsArgs) ToTemplateRadarChartAggregatedFieldWellsOutputWithContext(ctx context.Context) TemplateRadarChartAggregatedFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateRadarChartAggregatedFieldWellsOutput)
}

func (i TemplateRadarChartAggregatedFieldWellsArgs) ToTemplateRadarChartAggregatedFieldWellsPtrOutput() TemplateRadarChartAggregatedFieldWellsPtrOutput {
	return i.ToTemplateRadarChartAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i TemplateRadarChartAggregatedFieldWellsArgs) ToTemplateRadarChartAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateRadarChartAggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateRadarChartAggregatedFieldWellsOutput).ToTemplateRadarChartAggregatedFieldWellsPtrOutputWithContext(ctx)
}

// TemplateRadarChartAggregatedFieldWellsPtrInput is an input type that accepts TemplateRadarChartAggregatedFieldWellsArgs, TemplateRadarChartAggregatedFieldWellsPtr and TemplateRadarChartAggregatedFieldWellsPtrOutput values.
// You can construct a concrete instance of `TemplateRadarChartAggregatedFieldWellsPtrInput` via:
//
//	        TemplateRadarChartAggregatedFieldWellsArgs{...}
//
//	or:
//
//	        nil
type TemplateRadarChartAggregatedFieldWellsPtrInput interface {
	pulumi.Input

	ToTemplateRadarChartAggregatedFieldWellsPtrOutput() TemplateRadarChartAggregatedFieldWellsPtrOutput
	ToTemplateRadarChartAggregatedFieldWellsPtrOutputWithContext(context.Context) TemplateRadarChartAggregatedFieldWellsPtrOutput
}

type templateRadarChartAggregatedFieldWellsPtrType TemplateRadarChartAggregatedFieldWellsArgs

func TemplateRadarChartAggregatedFieldWellsPtr(v *TemplateRadarChartAggregatedFieldWellsArgs) TemplateRadarChartAggregatedFieldWellsPtrInput {
	return (*templateRadarChartAggregatedFieldWellsPtrType)(v)
}

func (*templateRadarChartAggregatedFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateRadarChartAggregatedFieldWells)(nil)).Elem()
}

func (i *templateRadarChartAggregatedFieldWellsPtrType) ToTemplateRadarChartAggregatedFieldWellsPtrOutput() TemplateRadarChartAggregatedFieldWellsPtrOutput {
	return i.ToTemplateRadarChartAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i *templateRadarChartAggregatedFieldWellsPtrType) ToTemplateRadarChartAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateRadarChartAggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateRadarChartAggregatedFieldWellsPtrOutput)
}

type TemplateRadarChartAggregatedFieldWellsOutput struct{ *pulumi.OutputState }

func (TemplateRadarChartAggregatedFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateRadarChartAggregatedFieldWells)(nil)).Elem()
}

func (o TemplateRadarChartAggregatedFieldWellsOutput) ToTemplateRadarChartAggregatedFieldWellsOutput() TemplateRadarChartAggregatedFieldWellsOutput {
	return o
}

func (o TemplateRadarChartAggregatedFieldWellsOutput) ToTemplateRadarChartAggregatedFieldWellsOutputWithContext(ctx context.Context) TemplateRadarChartAggregatedFieldWellsOutput {
	return o
}

func (o TemplateRadarChartAggregatedFieldWellsOutput) ToTemplateRadarChartAggregatedFieldWellsPtrOutput() TemplateRadarChartAggregatedFieldWellsPtrOutput {
	return o.ToTemplateRadarChartAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (o TemplateRadarChartAggregatedFieldWellsOutput) ToTemplateRadarChartAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateRadarChartAggregatedFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateRadarChartAggregatedFieldWells) *TemplateRadarChartAggregatedFieldWells {
		return &v
	}).(TemplateRadarChartAggregatedFieldWellsPtrOutput)
}

// The aggregated field well categories of a radar chart.
func (o TemplateRadarChartAggregatedFieldWellsOutput) Category() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v TemplateRadarChartAggregatedFieldWells) []TemplateDimensionField { return v.Category }).(TemplateDimensionFieldArrayOutput)
}

// The color that are assigned to the aggregated field wells of a radar chart.
func (o TemplateRadarChartAggregatedFieldWellsOutput) Color() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v TemplateRadarChartAggregatedFieldWells) []TemplateDimensionField { return v.Color }).(TemplateDimensionFieldArrayOutput)
}

// The values that are assigned to the aggregated field wells of a radar chart.
func (o TemplateRadarChartAggregatedFieldWellsOutput) Values() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v TemplateRadarChartAggregatedFieldWells) []TemplateMeasureField { return v.Values }).(TemplateMeasureFieldArrayOutput)
}

type TemplateRadarChartAggregatedFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (TemplateRadarChartAggregatedFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateRadarChartAggregatedFieldWells)(nil)).Elem()
}

func (o TemplateRadarChartAggregatedFieldWellsPtrOutput) ToTemplateRadarChartAggregatedFieldWellsPtrOutput() TemplateRadarChartAggregatedFieldWellsPtrOutput {
	return o
}

func (o TemplateRadarChartAggregatedFieldWellsPtrOutput) ToTemplateRadarChartAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateRadarChartAggregatedFieldWellsPtrOutput {
	return o
}

func (o TemplateRadarChartAggregatedFieldWellsPtrOutput) Elem() TemplateRadarChartAggregatedFieldWellsOutput {
	return o.ApplyT(func(v *TemplateRadarChartAggregatedFieldWells) TemplateRadarChartAggregatedFieldWells {
		if v != nil {
			return *v
		}
		var ret TemplateRadarChartAggregatedFieldWells
		return ret
	}).(TemplateRadarChartAggregatedFieldWellsOutput)
}

// The aggregated field well categories of a radar chart.
func (o TemplateRadarChartAggregatedFieldWellsPtrOutput) Category() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v *TemplateRadarChartAggregatedFieldWells) []TemplateDimensionField {
		if v == nil {
			return nil
		}
		return v.Category
	}).(TemplateDimensionFieldArrayOutput)
}

// The color that are assigned to the aggregated field wells of a radar chart.
func (o TemplateRadarChartAggregatedFieldWellsPtrOutput) Color() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v *TemplateRadarChartAggregatedFieldWells) []TemplateDimensionField {
		if v == nil {
			return nil
		}
		return v.Color
	}).(TemplateDimensionFieldArrayOutput)
}

// The values that are assigned to the aggregated field wells of a radar chart.
func (o TemplateRadarChartAggregatedFieldWellsPtrOutput) Values() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v *TemplateRadarChartAggregatedFieldWells) []TemplateMeasureField {
		if v == nil {
			return nil
		}
		return v.Values
	}).(TemplateMeasureFieldArrayOutput)
}

type TemplateRadarChartAreaStyleSettings struct {
	// The visibility settings of a radar chart.
	Visibility interface{} `pulumi:"visibility"`
}

// TemplateRadarChartAreaStyleSettingsInput is an input type that accepts TemplateRadarChartAreaStyleSettingsArgs and TemplateRadarChartAreaStyleSettingsOutput values.
// You can construct a concrete instance of `TemplateRadarChartAreaStyleSettingsInput` via:
//
//	TemplateRadarChartAreaStyleSettingsArgs{...}
type TemplateRadarChartAreaStyleSettingsInput interface {
	pulumi.Input

	ToTemplateRadarChartAreaStyleSettingsOutput() TemplateRadarChartAreaStyleSettingsOutput
	ToTemplateRadarChartAreaStyleSettingsOutputWithContext(context.Context) TemplateRadarChartAreaStyleSettingsOutput
}

type TemplateRadarChartAreaStyleSettingsArgs struct {
	// The visibility settings of a radar chart.
	Visibility pulumi.Input `pulumi:"visibility"`
}

func (TemplateRadarChartAreaStyleSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateRadarChartAreaStyleSettings)(nil)).Elem()
}

func (i TemplateRadarChartAreaStyleSettingsArgs) ToTemplateRadarChartAreaStyleSettingsOutput() TemplateRadarChartAreaStyleSettingsOutput {
	return i.ToTemplateRadarChartAreaStyleSettingsOutputWithContext(context.Background())
}

func (i TemplateRadarChartAreaStyleSettingsArgs) ToTemplateRadarChartAreaStyleSettingsOutputWithContext(ctx context.Context) TemplateRadarChartAreaStyleSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateRadarChartAreaStyleSettingsOutput)
}

func (i TemplateRadarChartAreaStyleSettingsArgs) ToTemplateRadarChartAreaStyleSettingsPtrOutput() TemplateRadarChartAreaStyleSettingsPtrOutput {
	return i.ToTemplateRadarChartAreaStyleSettingsPtrOutputWithContext(context.Background())
}

func (i TemplateRadarChartAreaStyleSettingsArgs) ToTemplateRadarChartAreaStyleSettingsPtrOutputWithContext(ctx context.Context) TemplateRadarChartAreaStyleSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateRadarChartAreaStyleSettingsOutput).ToTemplateRadarChartAreaStyleSettingsPtrOutputWithContext(ctx)
}

// TemplateRadarChartAreaStyleSettingsPtrInput is an input type that accepts TemplateRadarChartAreaStyleSettingsArgs, TemplateRadarChartAreaStyleSettingsPtr and TemplateRadarChartAreaStyleSettingsPtrOutput values.
// You can construct a concrete instance of `TemplateRadarChartAreaStyleSettingsPtrInput` via:
//
//	        TemplateRadarChartAreaStyleSettingsArgs{...}
//
//	or:
//
//	        nil
type TemplateRadarChartAreaStyleSettingsPtrInput interface {
	pulumi.Input

	ToTemplateRadarChartAreaStyleSettingsPtrOutput() TemplateRadarChartAreaStyleSettingsPtrOutput
	ToTemplateRadarChartAreaStyleSettingsPtrOutputWithContext(context.Context) TemplateRadarChartAreaStyleSettingsPtrOutput
}

type templateRadarChartAreaStyleSettingsPtrType TemplateRadarChartAreaStyleSettingsArgs

func TemplateRadarChartAreaStyleSettingsPtr(v *TemplateRadarChartAreaStyleSettingsArgs) TemplateRadarChartAreaStyleSettingsPtrInput {
	return (*templateRadarChartAreaStyleSettingsPtrType)(v)
}

func (*templateRadarChartAreaStyleSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateRadarChartAreaStyleSettings)(nil)).Elem()
}

func (i *templateRadarChartAreaStyleSettingsPtrType) ToTemplateRadarChartAreaStyleSettingsPtrOutput() TemplateRadarChartAreaStyleSettingsPtrOutput {
	return i.ToTemplateRadarChartAreaStyleSettingsPtrOutputWithContext(context.Background())
}

func (i *templateRadarChartAreaStyleSettingsPtrType) ToTemplateRadarChartAreaStyleSettingsPtrOutputWithContext(ctx context.Context) TemplateRadarChartAreaStyleSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateRadarChartAreaStyleSettingsPtrOutput)
}

type TemplateRadarChartAreaStyleSettingsOutput struct{ *pulumi.OutputState }

func (TemplateRadarChartAreaStyleSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateRadarChartAreaStyleSettings)(nil)).Elem()
}

func (o TemplateRadarChartAreaStyleSettingsOutput) ToTemplateRadarChartAreaStyleSettingsOutput() TemplateRadarChartAreaStyleSettingsOutput {
	return o
}

func (o TemplateRadarChartAreaStyleSettingsOutput) ToTemplateRadarChartAreaStyleSettingsOutputWithContext(ctx context.Context) TemplateRadarChartAreaStyleSettingsOutput {
	return o
}

func (o TemplateRadarChartAreaStyleSettingsOutput) ToTemplateRadarChartAreaStyleSettingsPtrOutput() TemplateRadarChartAreaStyleSettingsPtrOutput {
	return o.ToTemplateRadarChartAreaStyleSettingsPtrOutputWithContext(context.Background())
}

func (o TemplateRadarChartAreaStyleSettingsOutput) ToTemplateRadarChartAreaStyleSettingsPtrOutputWithContext(ctx context.Context) TemplateRadarChartAreaStyleSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateRadarChartAreaStyleSettings) *TemplateRadarChartAreaStyleSettings {
		return &v
	}).(TemplateRadarChartAreaStyleSettingsPtrOutput)
}

// The visibility settings of a radar chart.
func (o TemplateRadarChartAreaStyleSettingsOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateRadarChartAreaStyleSettings) interface{} { return v.Visibility }).(pulumi.AnyOutput)
}

type TemplateRadarChartAreaStyleSettingsPtrOutput struct{ *pulumi.OutputState }

func (TemplateRadarChartAreaStyleSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateRadarChartAreaStyleSettings)(nil)).Elem()
}

func (o TemplateRadarChartAreaStyleSettingsPtrOutput) ToTemplateRadarChartAreaStyleSettingsPtrOutput() TemplateRadarChartAreaStyleSettingsPtrOutput {
	return o
}

func (o TemplateRadarChartAreaStyleSettingsPtrOutput) ToTemplateRadarChartAreaStyleSettingsPtrOutputWithContext(ctx context.Context) TemplateRadarChartAreaStyleSettingsPtrOutput {
	return o
}

func (o TemplateRadarChartAreaStyleSettingsPtrOutput) Elem() TemplateRadarChartAreaStyleSettingsOutput {
	return o.ApplyT(func(v *TemplateRadarChartAreaStyleSettings) TemplateRadarChartAreaStyleSettings {
		if v != nil {
			return *v
		}
		var ret TemplateRadarChartAreaStyleSettings
		return ret
	}).(TemplateRadarChartAreaStyleSettingsOutput)
}

// The visibility settings of a radar chart.
func (o TemplateRadarChartAreaStyleSettingsPtrOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateRadarChartAreaStyleSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.Visibility
	}).(pulumi.AnyOutput)
}

type TemplateRadarChartConfiguration struct {
	// Determines the visibility of the colors of alternatign bands in a radar chart.
	AlternateBandColorsVisibility interface{} `pulumi:"alternateBandColorsVisibility"`
	// The color of the even-numbered alternate bands of a radar chart.
	AlternateBandEvenColor *string `pulumi:"alternateBandEvenColor"`
	// The color of the odd-numbered alternate bands of a radar chart.
	AlternateBandOddColor *string `pulumi:"alternateBandOddColor"`
	// The axis behavior options of a radar chart.
	AxesRangeScale *TemplateRadarChartAxesRangeScale `pulumi:"axesRangeScale"`
	// The base sreies settings of a radar chart.
	BaseSeriesSettings *TemplateRadarChartSeriesSettings `pulumi:"baseSeriesSettings"`
	// The category axis of a radar chart.
	CategoryAxis *TemplateAxisDisplayOptions `pulumi:"categoryAxis"`
	// The category label options of a radar chart.
	CategoryLabelOptions *TemplateChartAxisLabelOptions `pulumi:"categoryLabelOptions"`
	// The color axis of a radar chart.
	ColorAxis *TemplateAxisDisplayOptions `pulumi:"colorAxis"`
	// The color label options of a radar chart.
	ColorLabelOptions *TemplateChartAxisLabelOptions `pulumi:"colorLabelOptions"`
	// The field well configuration of a `RadarChartVisual` .
	FieldWells *TemplateRadarChartFieldWells `pulumi:"fieldWells"`
	// The general visual interactions setup for a visual.
	Interactions *TemplateVisualInteractionOptions `pulumi:"interactions"`
	// The legend display setup of the visual.
	Legend *TemplateLegendOptions `pulumi:"legend"`
	// The shape of the radar chart.
	Shape *TemplateRadarChartShape `pulumi:"shape"`
	// The sort configuration of a `RadarChartVisual` .
	SortConfiguration *TemplateRadarChartSortConfiguration `pulumi:"sortConfiguration"`
	// The start angle of a radar chart's axis.
	StartAngle *float64 `pulumi:"startAngle"`
	// The palette (chart color) display setup of the visual.
	VisualPalette *TemplateVisualPalette `pulumi:"visualPalette"`
}

// TemplateRadarChartConfigurationInput is an input type that accepts TemplateRadarChartConfigurationArgs and TemplateRadarChartConfigurationOutput values.
// You can construct a concrete instance of `TemplateRadarChartConfigurationInput` via:
//
//	TemplateRadarChartConfigurationArgs{...}
type TemplateRadarChartConfigurationInput interface {
	pulumi.Input

	ToTemplateRadarChartConfigurationOutput() TemplateRadarChartConfigurationOutput
	ToTemplateRadarChartConfigurationOutputWithContext(context.Context) TemplateRadarChartConfigurationOutput
}

type TemplateRadarChartConfigurationArgs struct {
	// Determines the visibility of the colors of alternatign bands in a radar chart.
	AlternateBandColorsVisibility pulumi.Input `pulumi:"alternateBandColorsVisibility"`
	// The color of the even-numbered alternate bands of a radar chart.
	AlternateBandEvenColor pulumi.StringPtrInput `pulumi:"alternateBandEvenColor"`
	// The color of the odd-numbered alternate bands of a radar chart.
	AlternateBandOddColor pulumi.StringPtrInput `pulumi:"alternateBandOddColor"`
	// The axis behavior options of a radar chart.
	AxesRangeScale TemplateRadarChartAxesRangeScalePtrInput `pulumi:"axesRangeScale"`
	// The base sreies settings of a radar chart.
	BaseSeriesSettings TemplateRadarChartSeriesSettingsPtrInput `pulumi:"baseSeriesSettings"`
	// The category axis of a radar chart.
	CategoryAxis TemplateAxisDisplayOptionsPtrInput `pulumi:"categoryAxis"`
	// The category label options of a radar chart.
	CategoryLabelOptions TemplateChartAxisLabelOptionsPtrInput `pulumi:"categoryLabelOptions"`
	// The color axis of a radar chart.
	ColorAxis TemplateAxisDisplayOptionsPtrInput `pulumi:"colorAxis"`
	// The color label options of a radar chart.
	ColorLabelOptions TemplateChartAxisLabelOptionsPtrInput `pulumi:"colorLabelOptions"`
	// The field well configuration of a `RadarChartVisual` .
	FieldWells TemplateRadarChartFieldWellsPtrInput `pulumi:"fieldWells"`
	// The general visual interactions setup for a visual.
	Interactions TemplateVisualInteractionOptionsPtrInput `pulumi:"interactions"`
	// The legend display setup of the visual.
	Legend TemplateLegendOptionsPtrInput `pulumi:"legend"`
	// The shape of the radar chart.
	Shape TemplateRadarChartShapePtrInput `pulumi:"shape"`
	// The sort configuration of a `RadarChartVisual` .
	SortConfiguration TemplateRadarChartSortConfigurationPtrInput `pulumi:"sortConfiguration"`
	// The start angle of a radar chart's axis.
	StartAngle pulumi.Float64PtrInput `pulumi:"startAngle"`
	// The palette (chart color) display setup of the visual.
	VisualPalette TemplateVisualPalettePtrInput `pulumi:"visualPalette"`
}

func (TemplateRadarChartConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateRadarChartConfiguration)(nil)).Elem()
}

func (i TemplateRadarChartConfigurationArgs) ToTemplateRadarChartConfigurationOutput() TemplateRadarChartConfigurationOutput {
	return i.ToTemplateRadarChartConfigurationOutputWithContext(context.Background())
}

func (i TemplateRadarChartConfigurationArgs) ToTemplateRadarChartConfigurationOutputWithContext(ctx context.Context) TemplateRadarChartConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateRadarChartConfigurationOutput)
}

func (i TemplateRadarChartConfigurationArgs) ToTemplateRadarChartConfigurationPtrOutput() TemplateRadarChartConfigurationPtrOutput {
	return i.ToTemplateRadarChartConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateRadarChartConfigurationArgs) ToTemplateRadarChartConfigurationPtrOutputWithContext(ctx context.Context) TemplateRadarChartConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateRadarChartConfigurationOutput).ToTemplateRadarChartConfigurationPtrOutputWithContext(ctx)
}

// TemplateRadarChartConfigurationPtrInput is an input type that accepts TemplateRadarChartConfigurationArgs, TemplateRadarChartConfigurationPtr and TemplateRadarChartConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateRadarChartConfigurationPtrInput` via:
//
//	        TemplateRadarChartConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateRadarChartConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateRadarChartConfigurationPtrOutput() TemplateRadarChartConfigurationPtrOutput
	ToTemplateRadarChartConfigurationPtrOutputWithContext(context.Context) TemplateRadarChartConfigurationPtrOutput
}

type templateRadarChartConfigurationPtrType TemplateRadarChartConfigurationArgs

func TemplateRadarChartConfigurationPtr(v *TemplateRadarChartConfigurationArgs) TemplateRadarChartConfigurationPtrInput {
	return (*templateRadarChartConfigurationPtrType)(v)
}

func (*templateRadarChartConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateRadarChartConfiguration)(nil)).Elem()
}

func (i *templateRadarChartConfigurationPtrType) ToTemplateRadarChartConfigurationPtrOutput() TemplateRadarChartConfigurationPtrOutput {
	return i.ToTemplateRadarChartConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateRadarChartConfigurationPtrType) ToTemplateRadarChartConfigurationPtrOutputWithContext(ctx context.Context) TemplateRadarChartConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateRadarChartConfigurationPtrOutput)
}

type TemplateRadarChartConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateRadarChartConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateRadarChartConfiguration)(nil)).Elem()
}

func (o TemplateRadarChartConfigurationOutput) ToTemplateRadarChartConfigurationOutput() TemplateRadarChartConfigurationOutput {
	return o
}

func (o TemplateRadarChartConfigurationOutput) ToTemplateRadarChartConfigurationOutputWithContext(ctx context.Context) TemplateRadarChartConfigurationOutput {
	return o
}

func (o TemplateRadarChartConfigurationOutput) ToTemplateRadarChartConfigurationPtrOutput() TemplateRadarChartConfigurationPtrOutput {
	return o.ToTemplateRadarChartConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateRadarChartConfigurationOutput) ToTemplateRadarChartConfigurationPtrOutputWithContext(ctx context.Context) TemplateRadarChartConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateRadarChartConfiguration) *TemplateRadarChartConfiguration {
		return &v
	}).(TemplateRadarChartConfigurationPtrOutput)
}

// Determines the visibility of the colors of alternatign bands in a radar chart.
func (o TemplateRadarChartConfigurationOutput) AlternateBandColorsVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateRadarChartConfiguration) interface{} { return v.AlternateBandColorsVisibility }).(pulumi.AnyOutput)
}

// The color of the even-numbered alternate bands of a radar chart.
func (o TemplateRadarChartConfigurationOutput) AlternateBandEvenColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateRadarChartConfiguration) *string { return v.AlternateBandEvenColor }).(pulumi.StringPtrOutput)
}

// The color of the odd-numbered alternate bands of a radar chart.
func (o TemplateRadarChartConfigurationOutput) AlternateBandOddColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateRadarChartConfiguration) *string { return v.AlternateBandOddColor }).(pulumi.StringPtrOutput)
}

// The axis behavior options of a radar chart.
func (o TemplateRadarChartConfigurationOutput) AxesRangeScale() TemplateRadarChartAxesRangeScalePtrOutput {
	return o.ApplyT(func(v TemplateRadarChartConfiguration) *TemplateRadarChartAxesRangeScale { return v.AxesRangeScale }).(TemplateRadarChartAxesRangeScalePtrOutput)
}

// The base sreies settings of a radar chart.
func (o TemplateRadarChartConfigurationOutput) BaseSeriesSettings() TemplateRadarChartSeriesSettingsPtrOutput {
	return o.ApplyT(func(v TemplateRadarChartConfiguration) *TemplateRadarChartSeriesSettings { return v.BaseSeriesSettings }).(TemplateRadarChartSeriesSettingsPtrOutput)
}

// The category axis of a radar chart.
func (o TemplateRadarChartConfigurationOutput) CategoryAxis() TemplateAxisDisplayOptionsPtrOutput {
	return o.ApplyT(func(v TemplateRadarChartConfiguration) *TemplateAxisDisplayOptions { return v.CategoryAxis }).(TemplateAxisDisplayOptionsPtrOutput)
}

// The category label options of a radar chart.
func (o TemplateRadarChartConfigurationOutput) CategoryLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateRadarChartConfiguration) *TemplateChartAxisLabelOptions { return v.CategoryLabelOptions }).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The color axis of a radar chart.
func (o TemplateRadarChartConfigurationOutput) ColorAxis() TemplateAxisDisplayOptionsPtrOutput {
	return o.ApplyT(func(v TemplateRadarChartConfiguration) *TemplateAxisDisplayOptions { return v.ColorAxis }).(TemplateAxisDisplayOptionsPtrOutput)
}

// The color label options of a radar chart.
func (o TemplateRadarChartConfigurationOutput) ColorLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateRadarChartConfiguration) *TemplateChartAxisLabelOptions { return v.ColorLabelOptions }).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The field well configuration of a `RadarChartVisual` .
func (o TemplateRadarChartConfigurationOutput) FieldWells() TemplateRadarChartFieldWellsPtrOutput {
	return o.ApplyT(func(v TemplateRadarChartConfiguration) *TemplateRadarChartFieldWells { return v.FieldWells }).(TemplateRadarChartFieldWellsPtrOutput)
}

// The general visual interactions setup for a visual.
func (o TemplateRadarChartConfigurationOutput) Interactions() TemplateVisualInteractionOptionsPtrOutput {
	return o.ApplyT(func(v TemplateRadarChartConfiguration) *TemplateVisualInteractionOptions { return v.Interactions }).(TemplateVisualInteractionOptionsPtrOutput)
}

// The legend display setup of the visual.
func (o TemplateRadarChartConfigurationOutput) Legend() TemplateLegendOptionsPtrOutput {
	return o.ApplyT(func(v TemplateRadarChartConfiguration) *TemplateLegendOptions { return v.Legend }).(TemplateLegendOptionsPtrOutput)
}

// The shape of the radar chart.
func (o TemplateRadarChartConfigurationOutput) Shape() TemplateRadarChartShapePtrOutput {
	return o.ApplyT(func(v TemplateRadarChartConfiguration) *TemplateRadarChartShape { return v.Shape }).(TemplateRadarChartShapePtrOutput)
}

// The sort configuration of a `RadarChartVisual` .
func (o TemplateRadarChartConfigurationOutput) SortConfiguration() TemplateRadarChartSortConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateRadarChartConfiguration) *TemplateRadarChartSortConfiguration {
		return v.SortConfiguration
	}).(TemplateRadarChartSortConfigurationPtrOutput)
}

// The start angle of a radar chart's axis.
func (o TemplateRadarChartConfigurationOutput) StartAngle() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateRadarChartConfiguration) *float64 { return v.StartAngle }).(pulumi.Float64PtrOutput)
}

// The palette (chart color) display setup of the visual.
func (o TemplateRadarChartConfigurationOutput) VisualPalette() TemplateVisualPalettePtrOutput {
	return o.ApplyT(func(v TemplateRadarChartConfiguration) *TemplateVisualPalette { return v.VisualPalette }).(TemplateVisualPalettePtrOutput)
}

type TemplateRadarChartConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateRadarChartConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateRadarChartConfiguration)(nil)).Elem()
}

func (o TemplateRadarChartConfigurationPtrOutput) ToTemplateRadarChartConfigurationPtrOutput() TemplateRadarChartConfigurationPtrOutput {
	return o
}

func (o TemplateRadarChartConfigurationPtrOutput) ToTemplateRadarChartConfigurationPtrOutputWithContext(ctx context.Context) TemplateRadarChartConfigurationPtrOutput {
	return o
}

func (o TemplateRadarChartConfigurationPtrOutput) Elem() TemplateRadarChartConfigurationOutput {
	return o.ApplyT(func(v *TemplateRadarChartConfiguration) TemplateRadarChartConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateRadarChartConfiguration
		return ret
	}).(TemplateRadarChartConfigurationOutput)
}

// Determines the visibility of the colors of alternatign bands in a radar chart.
func (o TemplateRadarChartConfigurationPtrOutput) AlternateBandColorsVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateRadarChartConfiguration) interface{} {
		if v == nil {
			return nil
		}
		return v.AlternateBandColorsVisibility
	}).(pulumi.AnyOutput)
}

// The color of the even-numbered alternate bands of a radar chart.
func (o TemplateRadarChartConfigurationPtrOutput) AlternateBandEvenColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateRadarChartConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.AlternateBandEvenColor
	}).(pulumi.StringPtrOutput)
}

// The color of the odd-numbered alternate bands of a radar chart.
func (o TemplateRadarChartConfigurationPtrOutput) AlternateBandOddColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateRadarChartConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.AlternateBandOddColor
	}).(pulumi.StringPtrOutput)
}

// The axis behavior options of a radar chart.
func (o TemplateRadarChartConfigurationPtrOutput) AxesRangeScale() TemplateRadarChartAxesRangeScalePtrOutput {
	return o.ApplyT(func(v *TemplateRadarChartConfiguration) *TemplateRadarChartAxesRangeScale {
		if v == nil {
			return nil
		}
		return v.AxesRangeScale
	}).(TemplateRadarChartAxesRangeScalePtrOutput)
}

// The base sreies settings of a radar chart.
func (o TemplateRadarChartConfigurationPtrOutput) BaseSeriesSettings() TemplateRadarChartSeriesSettingsPtrOutput {
	return o.ApplyT(func(v *TemplateRadarChartConfiguration) *TemplateRadarChartSeriesSettings {
		if v == nil {
			return nil
		}
		return v.BaseSeriesSettings
	}).(TemplateRadarChartSeriesSettingsPtrOutput)
}

// The category axis of a radar chart.
func (o TemplateRadarChartConfigurationPtrOutput) CategoryAxis() TemplateAxisDisplayOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateRadarChartConfiguration) *TemplateAxisDisplayOptions {
		if v == nil {
			return nil
		}
		return v.CategoryAxis
	}).(TemplateAxisDisplayOptionsPtrOutput)
}

// The category label options of a radar chart.
func (o TemplateRadarChartConfigurationPtrOutput) CategoryLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateRadarChartConfiguration) *TemplateChartAxisLabelOptions {
		if v == nil {
			return nil
		}
		return v.CategoryLabelOptions
	}).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The color axis of a radar chart.
func (o TemplateRadarChartConfigurationPtrOutput) ColorAxis() TemplateAxisDisplayOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateRadarChartConfiguration) *TemplateAxisDisplayOptions {
		if v == nil {
			return nil
		}
		return v.ColorAxis
	}).(TemplateAxisDisplayOptionsPtrOutput)
}

// The color label options of a radar chart.
func (o TemplateRadarChartConfigurationPtrOutput) ColorLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateRadarChartConfiguration) *TemplateChartAxisLabelOptions {
		if v == nil {
			return nil
		}
		return v.ColorLabelOptions
	}).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The field well configuration of a `RadarChartVisual` .
func (o TemplateRadarChartConfigurationPtrOutput) FieldWells() TemplateRadarChartFieldWellsPtrOutput {
	return o.ApplyT(func(v *TemplateRadarChartConfiguration) *TemplateRadarChartFieldWells {
		if v == nil {
			return nil
		}
		return v.FieldWells
	}).(TemplateRadarChartFieldWellsPtrOutput)
}

// The general visual interactions setup for a visual.
func (o TemplateRadarChartConfigurationPtrOutput) Interactions() TemplateVisualInteractionOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateRadarChartConfiguration) *TemplateVisualInteractionOptions {
		if v == nil {
			return nil
		}
		return v.Interactions
	}).(TemplateVisualInteractionOptionsPtrOutput)
}

// The legend display setup of the visual.
func (o TemplateRadarChartConfigurationPtrOutput) Legend() TemplateLegendOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateRadarChartConfiguration) *TemplateLegendOptions {
		if v == nil {
			return nil
		}
		return v.Legend
	}).(TemplateLegendOptionsPtrOutput)
}

// The shape of the radar chart.
func (o TemplateRadarChartConfigurationPtrOutput) Shape() TemplateRadarChartShapePtrOutput {
	return o.ApplyT(func(v *TemplateRadarChartConfiguration) *TemplateRadarChartShape {
		if v == nil {
			return nil
		}
		return v.Shape
	}).(TemplateRadarChartShapePtrOutput)
}

// The sort configuration of a `RadarChartVisual` .
func (o TemplateRadarChartConfigurationPtrOutput) SortConfiguration() TemplateRadarChartSortConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateRadarChartConfiguration) *TemplateRadarChartSortConfiguration {
		if v == nil {
			return nil
		}
		return v.SortConfiguration
	}).(TemplateRadarChartSortConfigurationPtrOutput)
}

// The start angle of a radar chart's axis.
func (o TemplateRadarChartConfigurationPtrOutput) StartAngle() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateRadarChartConfiguration) *float64 {
		if v == nil {
			return nil
		}
		return v.StartAngle
	}).(pulumi.Float64PtrOutput)
}

// The palette (chart color) display setup of the visual.
func (o TemplateRadarChartConfigurationPtrOutput) VisualPalette() TemplateVisualPalettePtrOutput {
	return o.ApplyT(func(v *TemplateRadarChartConfiguration) *TemplateVisualPalette {
		if v == nil {
			return nil
		}
		return v.VisualPalette
	}).(TemplateVisualPalettePtrOutput)
}

type TemplateRadarChartFieldWells struct {
	// The aggregated field wells of a radar chart visual.
	RadarChartAggregatedFieldWells *TemplateRadarChartAggregatedFieldWells `pulumi:"radarChartAggregatedFieldWells"`
}

// TemplateRadarChartFieldWellsInput is an input type that accepts TemplateRadarChartFieldWellsArgs and TemplateRadarChartFieldWellsOutput values.
// You can construct a concrete instance of `TemplateRadarChartFieldWellsInput` via:
//
//	TemplateRadarChartFieldWellsArgs{...}
type TemplateRadarChartFieldWellsInput interface {
	pulumi.Input

	ToTemplateRadarChartFieldWellsOutput() TemplateRadarChartFieldWellsOutput
	ToTemplateRadarChartFieldWellsOutputWithContext(context.Context) TemplateRadarChartFieldWellsOutput
}

type TemplateRadarChartFieldWellsArgs struct {
	// The aggregated field wells of a radar chart visual.
	RadarChartAggregatedFieldWells TemplateRadarChartAggregatedFieldWellsPtrInput `pulumi:"radarChartAggregatedFieldWells"`
}

func (TemplateRadarChartFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateRadarChartFieldWells)(nil)).Elem()
}

func (i TemplateRadarChartFieldWellsArgs) ToTemplateRadarChartFieldWellsOutput() TemplateRadarChartFieldWellsOutput {
	return i.ToTemplateRadarChartFieldWellsOutputWithContext(context.Background())
}

func (i TemplateRadarChartFieldWellsArgs) ToTemplateRadarChartFieldWellsOutputWithContext(ctx context.Context) TemplateRadarChartFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateRadarChartFieldWellsOutput)
}

func (i TemplateRadarChartFieldWellsArgs) ToTemplateRadarChartFieldWellsPtrOutput() TemplateRadarChartFieldWellsPtrOutput {
	return i.ToTemplateRadarChartFieldWellsPtrOutputWithContext(context.Background())
}

func (i TemplateRadarChartFieldWellsArgs) ToTemplateRadarChartFieldWellsPtrOutputWithContext(ctx context.Context) TemplateRadarChartFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateRadarChartFieldWellsOutput).ToTemplateRadarChartFieldWellsPtrOutputWithContext(ctx)
}

// TemplateRadarChartFieldWellsPtrInput is an input type that accepts TemplateRadarChartFieldWellsArgs, TemplateRadarChartFieldWellsPtr and TemplateRadarChartFieldWellsPtrOutput values.
// You can construct a concrete instance of `TemplateRadarChartFieldWellsPtrInput` via:
//
//	        TemplateRadarChartFieldWellsArgs{...}
//
//	or:
//
//	        nil
type TemplateRadarChartFieldWellsPtrInput interface {
	pulumi.Input

	ToTemplateRadarChartFieldWellsPtrOutput() TemplateRadarChartFieldWellsPtrOutput
	ToTemplateRadarChartFieldWellsPtrOutputWithContext(context.Context) TemplateRadarChartFieldWellsPtrOutput
}

type templateRadarChartFieldWellsPtrType TemplateRadarChartFieldWellsArgs

func TemplateRadarChartFieldWellsPtr(v *TemplateRadarChartFieldWellsArgs) TemplateRadarChartFieldWellsPtrInput {
	return (*templateRadarChartFieldWellsPtrType)(v)
}

func (*templateRadarChartFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateRadarChartFieldWells)(nil)).Elem()
}

func (i *templateRadarChartFieldWellsPtrType) ToTemplateRadarChartFieldWellsPtrOutput() TemplateRadarChartFieldWellsPtrOutput {
	return i.ToTemplateRadarChartFieldWellsPtrOutputWithContext(context.Background())
}

func (i *templateRadarChartFieldWellsPtrType) ToTemplateRadarChartFieldWellsPtrOutputWithContext(ctx context.Context) TemplateRadarChartFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateRadarChartFieldWellsPtrOutput)
}

type TemplateRadarChartFieldWellsOutput struct{ *pulumi.OutputState }

func (TemplateRadarChartFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateRadarChartFieldWells)(nil)).Elem()
}

func (o TemplateRadarChartFieldWellsOutput) ToTemplateRadarChartFieldWellsOutput() TemplateRadarChartFieldWellsOutput {
	return o
}

func (o TemplateRadarChartFieldWellsOutput) ToTemplateRadarChartFieldWellsOutputWithContext(ctx context.Context) TemplateRadarChartFieldWellsOutput {
	return o
}

func (o TemplateRadarChartFieldWellsOutput) ToTemplateRadarChartFieldWellsPtrOutput() TemplateRadarChartFieldWellsPtrOutput {
	return o.ToTemplateRadarChartFieldWellsPtrOutputWithContext(context.Background())
}

func (o TemplateRadarChartFieldWellsOutput) ToTemplateRadarChartFieldWellsPtrOutputWithContext(ctx context.Context) TemplateRadarChartFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateRadarChartFieldWells) *TemplateRadarChartFieldWells {
		return &v
	}).(TemplateRadarChartFieldWellsPtrOutput)
}

// The aggregated field wells of a radar chart visual.
func (o TemplateRadarChartFieldWellsOutput) RadarChartAggregatedFieldWells() TemplateRadarChartAggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v TemplateRadarChartFieldWells) *TemplateRadarChartAggregatedFieldWells {
		return v.RadarChartAggregatedFieldWells
	}).(TemplateRadarChartAggregatedFieldWellsPtrOutput)
}

type TemplateRadarChartFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (TemplateRadarChartFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateRadarChartFieldWells)(nil)).Elem()
}

func (o TemplateRadarChartFieldWellsPtrOutput) ToTemplateRadarChartFieldWellsPtrOutput() TemplateRadarChartFieldWellsPtrOutput {
	return o
}

func (o TemplateRadarChartFieldWellsPtrOutput) ToTemplateRadarChartFieldWellsPtrOutputWithContext(ctx context.Context) TemplateRadarChartFieldWellsPtrOutput {
	return o
}

func (o TemplateRadarChartFieldWellsPtrOutput) Elem() TemplateRadarChartFieldWellsOutput {
	return o.ApplyT(func(v *TemplateRadarChartFieldWells) TemplateRadarChartFieldWells {
		if v != nil {
			return *v
		}
		var ret TemplateRadarChartFieldWells
		return ret
	}).(TemplateRadarChartFieldWellsOutput)
}

// The aggregated field wells of a radar chart visual.
func (o TemplateRadarChartFieldWellsPtrOutput) RadarChartAggregatedFieldWells() TemplateRadarChartAggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v *TemplateRadarChartFieldWells) *TemplateRadarChartAggregatedFieldWells {
		if v == nil {
			return nil
		}
		return v.RadarChartAggregatedFieldWells
	}).(TemplateRadarChartAggregatedFieldWellsPtrOutput)
}

type TemplateRadarChartSeriesSettings struct {
	// The area style settings of a radar chart.
	AreaStyleSettings *TemplateRadarChartAreaStyleSettings `pulumi:"areaStyleSettings"`
}

// TemplateRadarChartSeriesSettingsInput is an input type that accepts TemplateRadarChartSeriesSettingsArgs and TemplateRadarChartSeriesSettingsOutput values.
// You can construct a concrete instance of `TemplateRadarChartSeriesSettingsInput` via:
//
//	TemplateRadarChartSeriesSettingsArgs{...}
type TemplateRadarChartSeriesSettingsInput interface {
	pulumi.Input

	ToTemplateRadarChartSeriesSettingsOutput() TemplateRadarChartSeriesSettingsOutput
	ToTemplateRadarChartSeriesSettingsOutputWithContext(context.Context) TemplateRadarChartSeriesSettingsOutput
}

type TemplateRadarChartSeriesSettingsArgs struct {
	// The area style settings of a radar chart.
	AreaStyleSettings TemplateRadarChartAreaStyleSettingsPtrInput `pulumi:"areaStyleSettings"`
}

func (TemplateRadarChartSeriesSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateRadarChartSeriesSettings)(nil)).Elem()
}

func (i TemplateRadarChartSeriesSettingsArgs) ToTemplateRadarChartSeriesSettingsOutput() TemplateRadarChartSeriesSettingsOutput {
	return i.ToTemplateRadarChartSeriesSettingsOutputWithContext(context.Background())
}

func (i TemplateRadarChartSeriesSettingsArgs) ToTemplateRadarChartSeriesSettingsOutputWithContext(ctx context.Context) TemplateRadarChartSeriesSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateRadarChartSeriesSettingsOutput)
}

func (i TemplateRadarChartSeriesSettingsArgs) ToTemplateRadarChartSeriesSettingsPtrOutput() TemplateRadarChartSeriesSettingsPtrOutput {
	return i.ToTemplateRadarChartSeriesSettingsPtrOutputWithContext(context.Background())
}

func (i TemplateRadarChartSeriesSettingsArgs) ToTemplateRadarChartSeriesSettingsPtrOutputWithContext(ctx context.Context) TemplateRadarChartSeriesSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateRadarChartSeriesSettingsOutput).ToTemplateRadarChartSeriesSettingsPtrOutputWithContext(ctx)
}

// TemplateRadarChartSeriesSettingsPtrInput is an input type that accepts TemplateRadarChartSeriesSettingsArgs, TemplateRadarChartSeriesSettingsPtr and TemplateRadarChartSeriesSettingsPtrOutput values.
// You can construct a concrete instance of `TemplateRadarChartSeriesSettingsPtrInput` via:
//
//	        TemplateRadarChartSeriesSettingsArgs{...}
//
//	or:
//
//	        nil
type TemplateRadarChartSeriesSettingsPtrInput interface {
	pulumi.Input

	ToTemplateRadarChartSeriesSettingsPtrOutput() TemplateRadarChartSeriesSettingsPtrOutput
	ToTemplateRadarChartSeriesSettingsPtrOutputWithContext(context.Context) TemplateRadarChartSeriesSettingsPtrOutput
}

type templateRadarChartSeriesSettingsPtrType TemplateRadarChartSeriesSettingsArgs

func TemplateRadarChartSeriesSettingsPtr(v *TemplateRadarChartSeriesSettingsArgs) TemplateRadarChartSeriesSettingsPtrInput {
	return (*templateRadarChartSeriesSettingsPtrType)(v)
}

func (*templateRadarChartSeriesSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateRadarChartSeriesSettings)(nil)).Elem()
}

func (i *templateRadarChartSeriesSettingsPtrType) ToTemplateRadarChartSeriesSettingsPtrOutput() TemplateRadarChartSeriesSettingsPtrOutput {
	return i.ToTemplateRadarChartSeriesSettingsPtrOutputWithContext(context.Background())
}

func (i *templateRadarChartSeriesSettingsPtrType) ToTemplateRadarChartSeriesSettingsPtrOutputWithContext(ctx context.Context) TemplateRadarChartSeriesSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateRadarChartSeriesSettingsPtrOutput)
}

type TemplateRadarChartSeriesSettingsOutput struct{ *pulumi.OutputState }

func (TemplateRadarChartSeriesSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateRadarChartSeriesSettings)(nil)).Elem()
}

func (o TemplateRadarChartSeriesSettingsOutput) ToTemplateRadarChartSeriesSettingsOutput() TemplateRadarChartSeriesSettingsOutput {
	return o
}

func (o TemplateRadarChartSeriesSettingsOutput) ToTemplateRadarChartSeriesSettingsOutputWithContext(ctx context.Context) TemplateRadarChartSeriesSettingsOutput {
	return o
}

func (o TemplateRadarChartSeriesSettingsOutput) ToTemplateRadarChartSeriesSettingsPtrOutput() TemplateRadarChartSeriesSettingsPtrOutput {
	return o.ToTemplateRadarChartSeriesSettingsPtrOutputWithContext(context.Background())
}

func (o TemplateRadarChartSeriesSettingsOutput) ToTemplateRadarChartSeriesSettingsPtrOutputWithContext(ctx context.Context) TemplateRadarChartSeriesSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateRadarChartSeriesSettings) *TemplateRadarChartSeriesSettings {
		return &v
	}).(TemplateRadarChartSeriesSettingsPtrOutput)
}

// The area style settings of a radar chart.
func (o TemplateRadarChartSeriesSettingsOutput) AreaStyleSettings() TemplateRadarChartAreaStyleSettingsPtrOutput {
	return o.ApplyT(func(v TemplateRadarChartSeriesSettings) *TemplateRadarChartAreaStyleSettings {
		return v.AreaStyleSettings
	}).(TemplateRadarChartAreaStyleSettingsPtrOutput)
}

type TemplateRadarChartSeriesSettingsPtrOutput struct{ *pulumi.OutputState }

func (TemplateRadarChartSeriesSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateRadarChartSeriesSettings)(nil)).Elem()
}

func (o TemplateRadarChartSeriesSettingsPtrOutput) ToTemplateRadarChartSeriesSettingsPtrOutput() TemplateRadarChartSeriesSettingsPtrOutput {
	return o
}

func (o TemplateRadarChartSeriesSettingsPtrOutput) ToTemplateRadarChartSeriesSettingsPtrOutputWithContext(ctx context.Context) TemplateRadarChartSeriesSettingsPtrOutput {
	return o
}

func (o TemplateRadarChartSeriesSettingsPtrOutput) Elem() TemplateRadarChartSeriesSettingsOutput {
	return o.ApplyT(func(v *TemplateRadarChartSeriesSettings) TemplateRadarChartSeriesSettings {
		if v != nil {
			return *v
		}
		var ret TemplateRadarChartSeriesSettings
		return ret
	}).(TemplateRadarChartSeriesSettingsOutput)
}

// The area style settings of a radar chart.
func (o TemplateRadarChartSeriesSettingsPtrOutput) AreaStyleSettings() TemplateRadarChartAreaStyleSettingsPtrOutput {
	return o.ApplyT(func(v *TemplateRadarChartSeriesSettings) *TemplateRadarChartAreaStyleSettings {
		if v == nil {
			return nil
		}
		return v.AreaStyleSettings
	}).(TemplateRadarChartAreaStyleSettingsPtrOutput)
}

type TemplateRadarChartSortConfiguration struct {
	// The category items limit for a radar chart.
	CategoryItemsLimit *TemplateItemsLimitConfiguration `pulumi:"categoryItemsLimit"`
	// The category sort options of a radar chart.
	CategorySort []TemplateFieldSortOptions `pulumi:"categorySort"`
	// The color items limit of a radar chart.
	ColorItemsLimit *TemplateItemsLimitConfiguration `pulumi:"colorItemsLimit"`
	// The color sort configuration of a radar chart.
	ColorSort []TemplateFieldSortOptions `pulumi:"colorSort"`
}

// TemplateRadarChartSortConfigurationInput is an input type that accepts TemplateRadarChartSortConfigurationArgs and TemplateRadarChartSortConfigurationOutput values.
// You can construct a concrete instance of `TemplateRadarChartSortConfigurationInput` via:
//
//	TemplateRadarChartSortConfigurationArgs{...}
type TemplateRadarChartSortConfigurationInput interface {
	pulumi.Input

	ToTemplateRadarChartSortConfigurationOutput() TemplateRadarChartSortConfigurationOutput
	ToTemplateRadarChartSortConfigurationOutputWithContext(context.Context) TemplateRadarChartSortConfigurationOutput
}

type TemplateRadarChartSortConfigurationArgs struct {
	// The category items limit for a radar chart.
	CategoryItemsLimit TemplateItemsLimitConfigurationPtrInput `pulumi:"categoryItemsLimit"`
	// The category sort options of a radar chart.
	CategorySort TemplateFieldSortOptionsArrayInput `pulumi:"categorySort"`
	// The color items limit of a radar chart.
	ColorItemsLimit TemplateItemsLimitConfigurationPtrInput `pulumi:"colorItemsLimit"`
	// The color sort configuration of a radar chart.
	ColorSort TemplateFieldSortOptionsArrayInput `pulumi:"colorSort"`
}

func (TemplateRadarChartSortConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateRadarChartSortConfiguration)(nil)).Elem()
}

func (i TemplateRadarChartSortConfigurationArgs) ToTemplateRadarChartSortConfigurationOutput() TemplateRadarChartSortConfigurationOutput {
	return i.ToTemplateRadarChartSortConfigurationOutputWithContext(context.Background())
}

func (i TemplateRadarChartSortConfigurationArgs) ToTemplateRadarChartSortConfigurationOutputWithContext(ctx context.Context) TemplateRadarChartSortConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateRadarChartSortConfigurationOutput)
}

func (i TemplateRadarChartSortConfigurationArgs) ToTemplateRadarChartSortConfigurationPtrOutput() TemplateRadarChartSortConfigurationPtrOutput {
	return i.ToTemplateRadarChartSortConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateRadarChartSortConfigurationArgs) ToTemplateRadarChartSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateRadarChartSortConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateRadarChartSortConfigurationOutput).ToTemplateRadarChartSortConfigurationPtrOutputWithContext(ctx)
}

// TemplateRadarChartSortConfigurationPtrInput is an input type that accepts TemplateRadarChartSortConfigurationArgs, TemplateRadarChartSortConfigurationPtr and TemplateRadarChartSortConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateRadarChartSortConfigurationPtrInput` via:
//
//	        TemplateRadarChartSortConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateRadarChartSortConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateRadarChartSortConfigurationPtrOutput() TemplateRadarChartSortConfigurationPtrOutput
	ToTemplateRadarChartSortConfigurationPtrOutputWithContext(context.Context) TemplateRadarChartSortConfigurationPtrOutput
}

type templateRadarChartSortConfigurationPtrType TemplateRadarChartSortConfigurationArgs

func TemplateRadarChartSortConfigurationPtr(v *TemplateRadarChartSortConfigurationArgs) TemplateRadarChartSortConfigurationPtrInput {
	return (*templateRadarChartSortConfigurationPtrType)(v)
}

func (*templateRadarChartSortConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateRadarChartSortConfiguration)(nil)).Elem()
}

func (i *templateRadarChartSortConfigurationPtrType) ToTemplateRadarChartSortConfigurationPtrOutput() TemplateRadarChartSortConfigurationPtrOutput {
	return i.ToTemplateRadarChartSortConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateRadarChartSortConfigurationPtrType) ToTemplateRadarChartSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateRadarChartSortConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateRadarChartSortConfigurationPtrOutput)
}

type TemplateRadarChartSortConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateRadarChartSortConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateRadarChartSortConfiguration)(nil)).Elem()
}

func (o TemplateRadarChartSortConfigurationOutput) ToTemplateRadarChartSortConfigurationOutput() TemplateRadarChartSortConfigurationOutput {
	return o
}

func (o TemplateRadarChartSortConfigurationOutput) ToTemplateRadarChartSortConfigurationOutputWithContext(ctx context.Context) TemplateRadarChartSortConfigurationOutput {
	return o
}

func (o TemplateRadarChartSortConfigurationOutput) ToTemplateRadarChartSortConfigurationPtrOutput() TemplateRadarChartSortConfigurationPtrOutput {
	return o.ToTemplateRadarChartSortConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateRadarChartSortConfigurationOutput) ToTemplateRadarChartSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateRadarChartSortConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateRadarChartSortConfiguration) *TemplateRadarChartSortConfiguration {
		return &v
	}).(TemplateRadarChartSortConfigurationPtrOutput)
}

// The category items limit for a radar chart.
func (o TemplateRadarChartSortConfigurationOutput) CategoryItemsLimit() TemplateItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateRadarChartSortConfiguration) *TemplateItemsLimitConfiguration {
		return v.CategoryItemsLimit
	}).(TemplateItemsLimitConfigurationPtrOutput)
}

// The category sort options of a radar chart.
func (o TemplateRadarChartSortConfigurationOutput) CategorySort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v TemplateRadarChartSortConfiguration) []TemplateFieldSortOptions { return v.CategorySort }).(TemplateFieldSortOptionsArrayOutput)
}

// The color items limit of a radar chart.
func (o TemplateRadarChartSortConfigurationOutput) ColorItemsLimit() TemplateItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateRadarChartSortConfiguration) *TemplateItemsLimitConfiguration { return v.ColorItemsLimit }).(TemplateItemsLimitConfigurationPtrOutput)
}

// The color sort configuration of a radar chart.
func (o TemplateRadarChartSortConfigurationOutput) ColorSort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v TemplateRadarChartSortConfiguration) []TemplateFieldSortOptions { return v.ColorSort }).(TemplateFieldSortOptionsArrayOutput)
}

type TemplateRadarChartSortConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateRadarChartSortConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateRadarChartSortConfiguration)(nil)).Elem()
}

func (o TemplateRadarChartSortConfigurationPtrOutput) ToTemplateRadarChartSortConfigurationPtrOutput() TemplateRadarChartSortConfigurationPtrOutput {
	return o
}

func (o TemplateRadarChartSortConfigurationPtrOutput) ToTemplateRadarChartSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateRadarChartSortConfigurationPtrOutput {
	return o
}

func (o TemplateRadarChartSortConfigurationPtrOutput) Elem() TemplateRadarChartSortConfigurationOutput {
	return o.ApplyT(func(v *TemplateRadarChartSortConfiguration) TemplateRadarChartSortConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateRadarChartSortConfiguration
		return ret
	}).(TemplateRadarChartSortConfigurationOutput)
}

// The category items limit for a radar chart.
func (o TemplateRadarChartSortConfigurationPtrOutput) CategoryItemsLimit() TemplateItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateRadarChartSortConfiguration) *TemplateItemsLimitConfiguration {
		if v == nil {
			return nil
		}
		return v.CategoryItemsLimit
	}).(TemplateItemsLimitConfigurationPtrOutput)
}

// The category sort options of a radar chart.
func (o TemplateRadarChartSortConfigurationPtrOutput) CategorySort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v *TemplateRadarChartSortConfiguration) []TemplateFieldSortOptions {
		if v == nil {
			return nil
		}
		return v.CategorySort
	}).(TemplateFieldSortOptionsArrayOutput)
}

// The color items limit of a radar chart.
func (o TemplateRadarChartSortConfigurationPtrOutput) ColorItemsLimit() TemplateItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateRadarChartSortConfiguration) *TemplateItemsLimitConfiguration {
		if v == nil {
			return nil
		}
		return v.ColorItemsLimit
	}).(TemplateItemsLimitConfigurationPtrOutput)
}

// The color sort configuration of a radar chart.
func (o TemplateRadarChartSortConfigurationPtrOutput) ColorSort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v *TemplateRadarChartSortConfiguration) []TemplateFieldSortOptions {
		if v == nil {
			return nil
		}
		return v.ColorSort
	}).(TemplateFieldSortOptionsArrayOutput)
}

type TemplateRadarChartVisual struct {
	// The list of custom actions that are configured for a visual.
	Actions []TemplateVisualCustomAction `pulumi:"actions"`
	// The configuration settings of the visual.
	ChartConfiguration *TemplateRadarChartConfiguration `pulumi:"chartConfiguration"`
	// The column hierarchy that is used during drill-downs and drill-ups.
	ColumnHierarchies []TemplateColumnHierarchy `pulumi:"columnHierarchies"`
	// The subtitle that is displayed on the visual.
	Subtitle *TemplateVisualSubtitleLabelOptions `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title *TemplateVisualTitleLabelOptions `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText *string `pulumi:"visualContentAltText"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
	VisualId string `pulumi:"visualId"`
}

// TemplateRadarChartVisualInput is an input type that accepts TemplateRadarChartVisualArgs and TemplateRadarChartVisualOutput values.
// You can construct a concrete instance of `TemplateRadarChartVisualInput` via:
//
//	TemplateRadarChartVisualArgs{...}
type TemplateRadarChartVisualInput interface {
	pulumi.Input

	ToTemplateRadarChartVisualOutput() TemplateRadarChartVisualOutput
	ToTemplateRadarChartVisualOutputWithContext(context.Context) TemplateRadarChartVisualOutput
}

type TemplateRadarChartVisualArgs struct {
	// The list of custom actions that are configured for a visual.
	Actions TemplateVisualCustomActionArrayInput `pulumi:"actions"`
	// The configuration settings of the visual.
	ChartConfiguration TemplateRadarChartConfigurationPtrInput `pulumi:"chartConfiguration"`
	// The column hierarchy that is used during drill-downs and drill-ups.
	ColumnHierarchies TemplateColumnHierarchyArrayInput `pulumi:"columnHierarchies"`
	// The subtitle that is displayed on the visual.
	Subtitle TemplateVisualSubtitleLabelOptionsPtrInput `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title TemplateVisualTitleLabelOptionsPtrInput `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText pulumi.StringPtrInput `pulumi:"visualContentAltText"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
	VisualId pulumi.StringInput `pulumi:"visualId"`
}

func (TemplateRadarChartVisualArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateRadarChartVisual)(nil)).Elem()
}

func (i TemplateRadarChartVisualArgs) ToTemplateRadarChartVisualOutput() TemplateRadarChartVisualOutput {
	return i.ToTemplateRadarChartVisualOutputWithContext(context.Background())
}

func (i TemplateRadarChartVisualArgs) ToTemplateRadarChartVisualOutputWithContext(ctx context.Context) TemplateRadarChartVisualOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateRadarChartVisualOutput)
}

func (i TemplateRadarChartVisualArgs) ToTemplateRadarChartVisualPtrOutput() TemplateRadarChartVisualPtrOutput {
	return i.ToTemplateRadarChartVisualPtrOutputWithContext(context.Background())
}

func (i TemplateRadarChartVisualArgs) ToTemplateRadarChartVisualPtrOutputWithContext(ctx context.Context) TemplateRadarChartVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateRadarChartVisualOutput).ToTemplateRadarChartVisualPtrOutputWithContext(ctx)
}

// TemplateRadarChartVisualPtrInput is an input type that accepts TemplateRadarChartVisualArgs, TemplateRadarChartVisualPtr and TemplateRadarChartVisualPtrOutput values.
// You can construct a concrete instance of `TemplateRadarChartVisualPtrInput` via:
//
//	        TemplateRadarChartVisualArgs{...}
//
//	or:
//
//	        nil
type TemplateRadarChartVisualPtrInput interface {
	pulumi.Input

	ToTemplateRadarChartVisualPtrOutput() TemplateRadarChartVisualPtrOutput
	ToTemplateRadarChartVisualPtrOutputWithContext(context.Context) TemplateRadarChartVisualPtrOutput
}

type templateRadarChartVisualPtrType TemplateRadarChartVisualArgs

func TemplateRadarChartVisualPtr(v *TemplateRadarChartVisualArgs) TemplateRadarChartVisualPtrInput {
	return (*templateRadarChartVisualPtrType)(v)
}

func (*templateRadarChartVisualPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateRadarChartVisual)(nil)).Elem()
}

func (i *templateRadarChartVisualPtrType) ToTemplateRadarChartVisualPtrOutput() TemplateRadarChartVisualPtrOutput {
	return i.ToTemplateRadarChartVisualPtrOutputWithContext(context.Background())
}

func (i *templateRadarChartVisualPtrType) ToTemplateRadarChartVisualPtrOutputWithContext(ctx context.Context) TemplateRadarChartVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateRadarChartVisualPtrOutput)
}

type TemplateRadarChartVisualOutput struct{ *pulumi.OutputState }

func (TemplateRadarChartVisualOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateRadarChartVisual)(nil)).Elem()
}

func (o TemplateRadarChartVisualOutput) ToTemplateRadarChartVisualOutput() TemplateRadarChartVisualOutput {
	return o
}

func (o TemplateRadarChartVisualOutput) ToTemplateRadarChartVisualOutputWithContext(ctx context.Context) TemplateRadarChartVisualOutput {
	return o
}

func (o TemplateRadarChartVisualOutput) ToTemplateRadarChartVisualPtrOutput() TemplateRadarChartVisualPtrOutput {
	return o.ToTemplateRadarChartVisualPtrOutputWithContext(context.Background())
}

func (o TemplateRadarChartVisualOutput) ToTemplateRadarChartVisualPtrOutputWithContext(ctx context.Context) TemplateRadarChartVisualPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateRadarChartVisual) *TemplateRadarChartVisual {
		return &v
	}).(TemplateRadarChartVisualPtrOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplateRadarChartVisualOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v TemplateRadarChartVisual) []TemplateVisualCustomAction { return v.Actions }).(TemplateVisualCustomActionArrayOutput)
}

// The configuration settings of the visual.
func (o TemplateRadarChartVisualOutput) ChartConfiguration() TemplateRadarChartConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateRadarChartVisual) *TemplateRadarChartConfiguration { return v.ChartConfiguration }).(TemplateRadarChartConfigurationPtrOutput)
}

// The column hierarchy that is used during drill-downs and drill-ups.
func (o TemplateRadarChartVisualOutput) ColumnHierarchies() TemplateColumnHierarchyArrayOutput {
	return o.ApplyT(func(v TemplateRadarChartVisual) []TemplateColumnHierarchy { return v.ColumnHierarchies }).(TemplateColumnHierarchyArrayOutput)
}

// The subtitle that is displayed on the visual.
func (o TemplateRadarChartVisualOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateRadarChartVisual) *TemplateVisualSubtitleLabelOptions { return v.Subtitle }).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o TemplateRadarChartVisualOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateRadarChartVisual) *TemplateVisualTitleLabelOptions { return v.Title }).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o TemplateRadarChartVisualOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateRadarChartVisual) *string { return v.VisualContentAltText }).(pulumi.StringPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
func (o TemplateRadarChartVisualOutput) VisualId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateRadarChartVisual) string { return v.VisualId }).(pulumi.StringOutput)
}

type TemplateRadarChartVisualPtrOutput struct{ *pulumi.OutputState }

func (TemplateRadarChartVisualPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateRadarChartVisual)(nil)).Elem()
}

func (o TemplateRadarChartVisualPtrOutput) ToTemplateRadarChartVisualPtrOutput() TemplateRadarChartVisualPtrOutput {
	return o
}

func (o TemplateRadarChartVisualPtrOutput) ToTemplateRadarChartVisualPtrOutputWithContext(ctx context.Context) TemplateRadarChartVisualPtrOutput {
	return o
}

func (o TemplateRadarChartVisualPtrOutput) Elem() TemplateRadarChartVisualOutput {
	return o.ApplyT(func(v *TemplateRadarChartVisual) TemplateRadarChartVisual {
		if v != nil {
			return *v
		}
		var ret TemplateRadarChartVisual
		return ret
	}).(TemplateRadarChartVisualOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplateRadarChartVisualPtrOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v *TemplateRadarChartVisual) []TemplateVisualCustomAction {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(TemplateVisualCustomActionArrayOutput)
}

// The configuration settings of the visual.
func (o TemplateRadarChartVisualPtrOutput) ChartConfiguration() TemplateRadarChartConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateRadarChartVisual) *TemplateRadarChartConfiguration {
		if v == nil {
			return nil
		}
		return v.ChartConfiguration
	}).(TemplateRadarChartConfigurationPtrOutput)
}

// The column hierarchy that is used during drill-downs and drill-ups.
func (o TemplateRadarChartVisualPtrOutput) ColumnHierarchies() TemplateColumnHierarchyArrayOutput {
	return o.ApplyT(func(v *TemplateRadarChartVisual) []TemplateColumnHierarchy {
		if v == nil {
			return nil
		}
		return v.ColumnHierarchies
	}).(TemplateColumnHierarchyArrayOutput)
}

// The subtitle that is displayed on the visual.
func (o TemplateRadarChartVisualPtrOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateRadarChartVisual) *TemplateVisualSubtitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Subtitle
	}).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o TemplateRadarChartVisualPtrOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateRadarChartVisual) *TemplateVisualTitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Title
	}).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o TemplateRadarChartVisualPtrOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateRadarChartVisual) *string {
		if v == nil {
			return nil
		}
		return v.VisualContentAltText
	}).(pulumi.StringPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
func (o TemplateRadarChartVisualPtrOutput) VisualId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateRadarChartVisual) *string {
		if v == nil {
			return nil
		}
		return &v.VisualId
	}).(pulumi.StringPtrOutput)
}

type TemplateRangeEndsLabelType struct {
	// The visibility of the range ends label.
	Visibility interface{} `pulumi:"visibility"`
}

// TemplateRangeEndsLabelTypeInput is an input type that accepts TemplateRangeEndsLabelTypeArgs and TemplateRangeEndsLabelTypeOutput values.
// You can construct a concrete instance of `TemplateRangeEndsLabelTypeInput` via:
//
//	TemplateRangeEndsLabelTypeArgs{...}
type TemplateRangeEndsLabelTypeInput interface {
	pulumi.Input

	ToTemplateRangeEndsLabelTypeOutput() TemplateRangeEndsLabelTypeOutput
	ToTemplateRangeEndsLabelTypeOutputWithContext(context.Context) TemplateRangeEndsLabelTypeOutput
}

type TemplateRangeEndsLabelTypeArgs struct {
	// The visibility of the range ends label.
	Visibility pulumi.Input `pulumi:"visibility"`
}

func (TemplateRangeEndsLabelTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateRangeEndsLabelType)(nil)).Elem()
}

func (i TemplateRangeEndsLabelTypeArgs) ToTemplateRangeEndsLabelTypeOutput() TemplateRangeEndsLabelTypeOutput {
	return i.ToTemplateRangeEndsLabelTypeOutputWithContext(context.Background())
}

func (i TemplateRangeEndsLabelTypeArgs) ToTemplateRangeEndsLabelTypeOutputWithContext(ctx context.Context) TemplateRangeEndsLabelTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateRangeEndsLabelTypeOutput)
}

func (i TemplateRangeEndsLabelTypeArgs) ToTemplateRangeEndsLabelTypePtrOutput() TemplateRangeEndsLabelTypePtrOutput {
	return i.ToTemplateRangeEndsLabelTypePtrOutputWithContext(context.Background())
}

func (i TemplateRangeEndsLabelTypeArgs) ToTemplateRangeEndsLabelTypePtrOutputWithContext(ctx context.Context) TemplateRangeEndsLabelTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateRangeEndsLabelTypeOutput).ToTemplateRangeEndsLabelTypePtrOutputWithContext(ctx)
}

// TemplateRangeEndsLabelTypePtrInput is an input type that accepts TemplateRangeEndsLabelTypeArgs, TemplateRangeEndsLabelTypePtr and TemplateRangeEndsLabelTypePtrOutput values.
// You can construct a concrete instance of `TemplateRangeEndsLabelTypePtrInput` via:
//
//	        TemplateRangeEndsLabelTypeArgs{...}
//
//	or:
//
//	        nil
type TemplateRangeEndsLabelTypePtrInput interface {
	pulumi.Input

	ToTemplateRangeEndsLabelTypePtrOutput() TemplateRangeEndsLabelTypePtrOutput
	ToTemplateRangeEndsLabelTypePtrOutputWithContext(context.Context) TemplateRangeEndsLabelTypePtrOutput
}

type templateRangeEndsLabelTypePtrType TemplateRangeEndsLabelTypeArgs

func TemplateRangeEndsLabelTypePtr(v *TemplateRangeEndsLabelTypeArgs) TemplateRangeEndsLabelTypePtrInput {
	return (*templateRangeEndsLabelTypePtrType)(v)
}

func (*templateRangeEndsLabelTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateRangeEndsLabelType)(nil)).Elem()
}

func (i *templateRangeEndsLabelTypePtrType) ToTemplateRangeEndsLabelTypePtrOutput() TemplateRangeEndsLabelTypePtrOutput {
	return i.ToTemplateRangeEndsLabelTypePtrOutputWithContext(context.Background())
}

func (i *templateRangeEndsLabelTypePtrType) ToTemplateRangeEndsLabelTypePtrOutputWithContext(ctx context.Context) TemplateRangeEndsLabelTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateRangeEndsLabelTypePtrOutput)
}

type TemplateRangeEndsLabelTypeOutput struct{ *pulumi.OutputState }

func (TemplateRangeEndsLabelTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateRangeEndsLabelType)(nil)).Elem()
}

func (o TemplateRangeEndsLabelTypeOutput) ToTemplateRangeEndsLabelTypeOutput() TemplateRangeEndsLabelTypeOutput {
	return o
}

func (o TemplateRangeEndsLabelTypeOutput) ToTemplateRangeEndsLabelTypeOutputWithContext(ctx context.Context) TemplateRangeEndsLabelTypeOutput {
	return o
}

func (o TemplateRangeEndsLabelTypeOutput) ToTemplateRangeEndsLabelTypePtrOutput() TemplateRangeEndsLabelTypePtrOutput {
	return o.ToTemplateRangeEndsLabelTypePtrOutputWithContext(context.Background())
}

func (o TemplateRangeEndsLabelTypeOutput) ToTemplateRangeEndsLabelTypePtrOutputWithContext(ctx context.Context) TemplateRangeEndsLabelTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateRangeEndsLabelType) *TemplateRangeEndsLabelType {
		return &v
	}).(TemplateRangeEndsLabelTypePtrOutput)
}

// The visibility of the range ends label.
func (o TemplateRangeEndsLabelTypeOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateRangeEndsLabelType) interface{} { return v.Visibility }).(pulumi.AnyOutput)
}

type TemplateRangeEndsLabelTypePtrOutput struct{ *pulumi.OutputState }

func (TemplateRangeEndsLabelTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateRangeEndsLabelType)(nil)).Elem()
}

func (o TemplateRangeEndsLabelTypePtrOutput) ToTemplateRangeEndsLabelTypePtrOutput() TemplateRangeEndsLabelTypePtrOutput {
	return o
}

func (o TemplateRangeEndsLabelTypePtrOutput) ToTemplateRangeEndsLabelTypePtrOutputWithContext(ctx context.Context) TemplateRangeEndsLabelTypePtrOutput {
	return o
}

func (o TemplateRangeEndsLabelTypePtrOutput) Elem() TemplateRangeEndsLabelTypeOutput {
	return o.ApplyT(func(v *TemplateRangeEndsLabelType) TemplateRangeEndsLabelType {
		if v != nil {
			return *v
		}
		var ret TemplateRangeEndsLabelType
		return ret
	}).(TemplateRangeEndsLabelTypeOutput)
}

// The visibility of the range ends label.
func (o TemplateRangeEndsLabelTypePtrOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateRangeEndsLabelType) interface{} {
		if v == nil {
			return nil
		}
		return v.Visibility
	}).(pulumi.AnyOutput)
}

type TemplateReferenceLine struct {
	// The data configuration of the reference line.
	DataConfiguration TemplateReferenceLineDataConfiguration `pulumi:"dataConfiguration"`
	// The label configuration of the reference line.
	LabelConfiguration *TemplateReferenceLineLabelConfiguration `pulumi:"labelConfiguration"`
	// The status of the reference line. Choose one of the following options:
	//
	// - `ENABLE`
	// - `DISABLE`
	Status *TemplateWidgetStatus `pulumi:"status"`
	// The style configuration of the reference line.
	StyleConfiguration *TemplateReferenceLineStyleConfiguration `pulumi:"styleConfiguration"`
}

// TemplateReferenceLineInput is an input type that accepts TemplateReferenceLineArgs and TemplateReferenceLineOutput values.
// You can construct a concrete instance of `TemplateReferenceLineInput` via:
//
//	TemplateReferenceLineArgs{...}
type TemplateReferenceLineInput interface {
	pulumi.Input

	ToTemplateReferenceLineOutput() TemplateReferenceLineOutput
	ToTemplateReferenceLineOutputWithContext(context.Context) TemplateReferenceLineOutput
}

type TemplateReferenceLineArgs struct {
	// The data configuration of the reference line.
	DataConfiguration TemplateReferenceLineDataConfigurationInput `pulumi:"dataConfiguration"`
	// The label configuration of the reference line.
	LabelConfiguration TemplateReferenceLineLabelConfigurationPtrInput `pulumi:"labelConfiguration"`
	// The status of the reference line. Choose one of the following options:
	//
	// - `ENABLE`
	// - `DISABLE`
	Status TemplateWidgetStatusPtrInput `pulumi:"status"`
	// The style configuration of the reference line.
	StyleConfiguration TemplateReferenceLineStyleConfigurationPtrInput `pulumi:"styleConfiguration"`
}

func (TemplateReferenceLineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateReferenceLine)(nil)).Elem()
}

func (i TemplateReferenceLineArgs) ToTemplateReferenceLineOutput() TemplateReferenceLineOutput {
	return i.ToTemplateReferenceLineOutputWithContext(context.Background())
}

func (i TemplateReferenceLineArgs) ToTemplateReferenceLineOutputWithContext(ctx context.Context) TemplateReferenceLineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateReferenceLineOutput)
}

// TemplateReferenceLineArrayInput is an input type that accepts TemplateReferenceLineArray and TemplateReferenceLineArrayOutput values.
// You can construct a concrete instance of `TemplateReferenceLineArrayInput` via:
//
//	TemplateReferenceLineArray{ TemplateReferenceLineArgs{...} }
type TemplateReferenceLineArrayInput interface {
	pulumi.Input

	ToTemplateReferenceLineArrayOutput() TemplateReferenceLineArrayOutput
	ToTemplateReferenceLineArrayOutputWithContext(context.Context) TemplateReferenceLineArrayOutput
}

type TemplateReferenceLineArray []TemplateReferenceLineInput

func (TemplateReferenceLineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateReferenceLine)(nil)).Elem()
}

func (i TemplateReferenceLineArray) ToTemplateReferenceLineArrayOutput() TemplateReferenceLineArrayOutput {
	return i.ToTemplateReferenceLineArrayOutputWithContext(context.Background())
}

func (i TemplateReferenceLineArray) ToTemplateReferenceLineArrayOutputWithContext(ctx context.Context) TemplateReferenceLineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateReferenceLineArrayOutput)
}

type TemplateReferenceLineOutput struct{ *pulumi.OutputState }

func (TemplateReferenceLineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateReferenceLine)(nil)).Elem()
}

func (o TemplateReferenceLineOutput) ToTemplateReferenceLineOutput() TemplateReferenceLineOutput {
	return o
}

func (o TemplateReferenceLineOutput) ToTemplateReferenceLineOutputWithContext(ctx context.Context) TemplateReferenceLineOutput {
	return o
}

// The data configuration of the reference line.
func (o TemplateReferenceLineOutput) DataConfiguration() TemplateReferenceLineDataConfigurationOutput {
	return o.ApplyT(func(v TemplateReferenceLine) TemplateReferenceLineDataConfiguration { return v.DataConfiguration }).(TemplateReferenceLineDataConfigurationOutput)
}

// The label configuration of the reference line.
func (o TemplateReferenceLineOutput) LabelConfiguration() TemplateReferenceLineLabelConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateReferenceLine) *TemplateReferenceLineLabelConfiguration { return v.LabelConfiguration }).(TemplateReferenceLineLabelConfigurationPtrOutput)
}

// The status of the reference line. Choose one of the following options:
//
// - `ENABLE`
// - `DISABLE`
func (o TemplateReferenceLineOutput) Status() TemplateWidgetStatusPtrOutput {
	return o.ApplyT(func(v TemplateReferenceLine) *TemplateWidgetStatus { return v.Status }).(TemplateWidgetStatusPtrOutput)
}

// The style configuration of the reference line.
func (o TemplateReferenceLineOutput) StyleConfiguration() TemplateReferenceLineStyleConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateReferenceLine) *TemplateReferenceLineStyleConfiguration { return v.StyleConfiguration }).(TemplateReferenceLineStyleConfigurationPtrOutput)
}

type TemplateReferenceLineArrayOutput struct{ *pulumi.OutputState }

func (TemplateReferenceLineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateReferenceLine)(nil)).Elem()
}

func (o TemplateReferenceLineArrayOutput) ToTemplateReferenceLineArrayOutput() TemplateReferenceLineArrayOutput {
	return o
}

func (o TemplateReferenceLineArrayOutput) ToTemplateReferenceLineArrayOutputWithContext(ctx context.Context) TemplateReferenceLineArrayOutput {
	return o
}

func (o TemplateReferenceLineArrayOutput) Index(i pulumi.IntInput) TemplateReferenceLineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateReferenceLine {
		return vs[0].([]TemplateReferenceLine)[vs[1].(int)]
	}).(TemplateReferenceLineOutput)
}

type TemplateReferenceLineCustomLabelConfiguration struct {
	// The string text of the custom label.
	CustomLabel string `pulumi:"customLabel"`
}

// TemplateReferenceLineCustomLabelConfigurationInput is an input type that accepts TemplateReferenceLineCustomLabelConfigurationArgs and TemplateReferenceLineCustomLabelConfigurationOutput values.
// You can construct a concrete instance of `TemplateReferenceLineCustomLabelConfigurationInput` via:
//
//	TemplateReferenceLineCustomLabelConfigurationArgs{...}
type TemplateReferenceLineCustomLabelConfigurationInput interface {
	pulumi.Input

	ToTemplateReferenceLineCustomLabelConfigurationOutput() TemplateReferenceLineCustomLabelConfigurationOutput
	ToTemplateReferenceLineCustomLabelConfigurationOutputWithContext(context.Context) TemplateReferenceLineCustomLabelConfigurationOutput
}

type TemplateReferenceLineCustomLabelConfigurationArgs struct {
	// The string text of the custom label.
	CustomLabel pulumi.StringInput `pulumi:"customLabel"`
}

func (TemplateReferenceLineCustomLabelConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateReferenceLineCustomLabelConfiguration)(nil)).Elem()
}

func (i TemplateReferenceLineCustomLabelConfigurationArgs) ToTemplateReferenceLineCustomLabelConfigurationOutput() TemplateReferenceLineCustomLabelConfigurationOutput {
	return i.ToTemplateReferenceLineCustomLabelConfigurationOutputWithContext(context.Background())
}

func (i TemplateReferenceLineCustomLabelConfigurationArgs) ToTemplateReferenceLineCustomLabelConfigurationOutputWithContext(ctx context.Context) TemplateReferenceLineCustomLabelConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateReferenceLineCustomLabelConfigurationOutput)
}

func (i TemplateReferenceLineCustomLabelConfigurationArgs) ToTemplateReferenceLineCustomLabelConfigurationPtrOutput() TemplateReferenceLineCustomLabelConfigurationPtrOutput {
	return i.ToTemplateReferenceLineCustomLabelConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateReferenceLineCustomLabelConfigurationArgs) ToTemplateReferenceLineCustomLabelConfigurationPtrOutputWithContext(ctx context.Context) TemplateReferenceLineCustomLabelConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateReferenceLineCustomLabelConfigurationOutput).ToTemplateReferenceLineCustomLabelConfigurationPtrOutputWithContext(ctx)
}

// TemplateReferenceLineCustomLabelConfigurationPtrInput is an input type that accepts TemplateReferenceLineCustomLabelConfigurationArgs, TemplateReferenceLineCustomLabelConfigurationPtr and TemplateReferenceLineCustomLabelConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateReferenceLineCustomLabelConfigurationPtrInput` via:
//
//	        TemplateReferenceLineCustomLabelConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateReferenceLineCustomLabelConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateReferenceLineCustomLabelConfigurationPtrOutput() TemplateReferenceLineCustomLabelConfigurationPtrOutput
	ToTemplateReferenceLineCustomLabelConfigurationPtrOutputWithContext(context.Context) TemplateReferenceLineCustomLabelConfigurationPtrOutput
}

type templateReferenceLineCustomLabelConfigurationPtrType TemplateReferenceLineCustomLabelConfigurationArgs

func TemplateReferenceLineCustomLabelConfigurationPtr(v *TemplateReferenceLineCustomLabelConfigurationArgs) TemplateReferenceLineCustomLabelConfigurationPtrInput {
	return (*templateReferenceLineCustomLabelConfigurationPtrType)(v)
}

func (*templateReferenceLineCustomLabelConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateReferenceLineCustomLabelConfiguration)(nil)).Elem()
}

func (i *templateReferenceLineCustomLabelConfigurationPtrType) ToTemplateReferenceLineCustomLabelConfigurationPtrOutput() TemplateReferenceLineCustomLabelConfigurationPtrOutput {
	return i.ToTemplateReferenceLineCustomLabelConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateReferenceLineCustomLabelConfigurationPtrType) ToTemplateReferenceLineCustomLabelConfigurationPtrOutputWithContext(ctx context.Context) TemplateReferenceLineCustomLabelConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateReferenceLineCustomLabelConfigurationPtrOutput)
}

type TemplateReferenceLineCustomLabelConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateReferenceLineCustomLabelConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateReferenceLineCustomLabelConfiguration)(nil)).Elem()
}

func (o TemplateReferenceLineCustomLabelConfigurationOutput) ToTemplateReferenceLineCustomLabelConfigurationOutput() TemplateReferenceLineCustomLabelConfigurationOutput {
	return o
}

func (o TemplateReferenceLineCustomLabelConfigurationOutput) ToTemplateReferenceLineCustomLabelConfigurationOutputWithContext(ctx context.Context) TemplateReferenceLineCustomLabelConfigurationOutput {
	return o
}

func (o TemplateReferenceLineCustomLabelConfigurationOutput) ToTemplateReferenceLineCustomLabelConfigurationPtrOutput() TemplateReferenceLineCustomLabelConfigurationPtrOutput {
	return o.ToTemplateReferenceLineCustomLabelConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateReferenceLineCustomLabelConfigurationOutput) ToTemplateReferenceLineCustomLabelConfigurationPtrOutputWithContext(ctx context.Context) TemplateReferenceLineCustomLabelConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateReferenceLineCustomLabelConfiguration) *TemplateReferenceLineCustomLabelConfiguration {
		return &v
	}).(TemplateReferenceLineCustomLabelConfigurationPtrOutput)
}

// The string text of the custom label.
func (o TemplateReferenceLineCustomLabelConfigurationOutput) CustomLabel() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateReferenceLineCustomLabelConfiguration) string { return v.CustomLabel }).(pulumi.StringOutput)
}

type TemplateReferenceLineCustomLabelConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateReferenceLineCustomLabelConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateReferenceLineCustomLabelConfiguration)(nil)).Elem()
}

func (o TemplateReferenceLineCustomLabelConfigurationPtrOutput) ToTemplateReferenceLineCustomLabelConfigurationPtrOutput() TemplateReferenceLineCustomLabelConfigurationPtrOutput {
	return o
}

func (o TemplateReferenceLineCustomLabelConfigurationPtrOutput) ToTemplateReferenceLineCustomLabelConfigurationPtrOutputWithContext(ctx context.Context) TemplateReferenceLineCustomLabelConfigurationPtrOutput {
	return o
}

func (o TemplateReferenceLineCustomLabelConfigurationPtrOutput) Elem() TemplateReferenceLineCustomLabelConfigurationOutput {
	return o.ApplyT(func(v *TemplateReferenceLineCustomLabelConfiguration) TemplateReferenceLineCustomLabelConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateReferenceLineCustomLabelConfiguration
		return ret
	}).(TemplateReferenceLineCustomLabelConfigurationOutput)
}

// The string text of the custom label.
func (o TemplateReferenceLineCustomLabelConfigurationPtrOutput) CustomLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateReferenceLineCustomLabelConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.CustomLabel
	}).(pulumi.StringPtrOutput)
}

type TemplateReferenceLineDataConfiguration struct {
	// The axis binding type of the reference line. Choose one of the following options:
	//
	// - `PrimaryY`
	// - `SecondaryY`
	AxisBinding *TemplateAxisBinding `pulumi:"axisBinding"`
	// The dynamic configuration of the reference line data configuration.
	DynamicConfiguration *TemplateReferenceLineDynamicDataConfiguration `pulumi:"dynamicConfiguration"`
	// The series type of the reference line data configuration. Choose one of the following options:
	//
	// - `BAR`
	// - `LINE`
	SeriesType *TemplateReferenceLineSeriesType `pulumi:"seriesType"`
	// The static data configuration of the reference line data configuration.
	StaticConfiguration *TemplateReferenceLineStaticDataConfiguration `pulumi:"staticConfiguration"`
}

// TemplateReferenceLineDataConfigurationInput is an input type that accepts TemplateReferenceLineDataConfigurationArgs and TemplateReferenceLineDataConfigurationOutput values.
// You can construct a concrete instance of `TemplateReferenceLineDataConfigurationInput` via:
//
//	TemplateReferenceLineDataConfigurationArgs{...}
type TemplateReferenceLineDataConfigurationInput interface {
	pulumi.Input

	ToTemplateReferenceLineDataConfigurationOutput() TemplateReferenceLineDataConfigurationOutput
	ToTemplateReferenceLineDataConfigurationOutputWithContext(context.Context) TemplateReferenceLineDataConfigurationOutput
}

type TemplateReferenceLineDataConfigurationArgs struct {
	// The axis binding type of the reference line. Choose one of the following options:
	//
	// - `PrimaryY`
	// - `SecondaryY`
	AxisBinding TemplateAxisBindingPtrInput `pulumi:"axisBinding"`
	// The dynamic configuration of the reference line data configuration.
	DynamicConfiguration TemplateReferenceLineDynamicDataConfigurationPtrInput `pulumi:"dynamicConfiguration"`
	// The series type of the reference line data configuration. Choose one of the following options:
	//
	// - `BAR`
	// - `LINE`
	SeriesType TemplateReferenceLineSeriesTypePtrInput `pulumi:"seriesType"`
	// The static data configuration of the reference line data configuration.
	StaticConfiguration TemplateReferenceLineStaticDataConfigurationPtrInput `pulumi:"staticConfiguration"`
}

func (TemplateReferenceLineDataConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateReferenceLineDataConfiguration)(nil)).Elem()
}

func (i TemplateReferenceLineDataConfigurationArgs) ToTemplateReferenceLineDataConfigurationOutput() TemplateReferenceLineDataConfigurationOutput {
	return i.ToTemplateReferenceLineDataConfigurationOutputWithContext(context.Background())
}

func (i TemplateReferenceLineDataConfigurationArgs) ToTemplateReferenceLineDataConfigurationOutputWithContext(ctx context.Context) TemplateReferenceLineDataConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateReferenceLineDataConfigurationOutput)
}

type TemplateReferenceLineDataConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateReferenceLineDataConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateReferenceLineDataConfiguration)(nil)).Elem()
}

func (o TemplateReferenceLineDataConfigurationOutput) ToTemplateReferenceLineDataConfigurationOutput() TemplateReferenceLineDataConfigurationOutput {
	return o
}

func (o TemplateReferenceLineDataConfigurationOutput) ToTemplateReferenceLineDataConfigurationOutputWithContext(ctx context.Context) TemplateReferenceLineDataConfigurationOutput {
	return o
}

// The axis binding type of the reference line. Choose one of the following options:
//
// - `PrimaryY`
// - `SecondaryY`
func (o TemplateReferenceLineDataConfigurationOutput) AxisBinding() TemplateAxisBindingPtrOutput {
	return o.ApplyT(func(v TemplateReferenceLineDataConfiguration) *TemplateAxisBinding { return v.AxisBinding }).(TemplateAxisBindingPtrOutput)
}

// The dynamic configuration of the reference line data configuration.
func (o TemplateReferenceLineDataConfigurationOutput) DynamicConfiguration() TemplateReferenceLineDynamicDataConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateReferenceLineDataConfiguration) *TemplateReferenceLineDynamicDataConfiguration {
		return v.DynamicConfiguration
	}).(TemplateReferenceLineDynamicDataConfigurationPtrOutput)
}

// The series type of the reference line data configuration. Choose one of the following options:
//
// - `BAR`
// - `LINE`
func (o TemplateReferenceLineDataConfigurationOutput) SeriesType() TemplateReferenceLineSeriesTypePtrOutput {
	return o.ApplyT(func(v TemplateReferenceLineDataConfiguration) *TemplateReferenceLineSeriesType { return v.SeriesType }).(TemplateReferenceLineSeriesTypePtrOutput)
}

// The static data configuration of the reference line data configuration.
func (o TemplateReferenceLineDataConfigurationOutput) StaticConfiguration() TemplateReferenceLineStaticDataConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateReferenceLineDataConfiguration) *TemplateReferenceLineStaticDataConfiguration {
		return v.StaticConfiguration
	}).(TemplateReferenceLineStaticDataConfigurationPtrOutput)
}

type TemplateReferenceLineDynamicDataConfiguration struct {
	// The calculation that is used in the dynamic data.
	Calculation TemplateNumericalAggregationFunction `pulumi:"calculation"`
	// The column that the dynamic data targets.
	Column TemplateColumnIdentifier `pulumi:"column"`
	// The aggregation function that is used in the dynamic data.
	MeasureAggregationFunction *TemplateAggregationFunction `pulumi:"measureAggregationFunction"`
}

// TemplateReferenceLineDynamicDataConfigurationInput is an input type that accepts TemplateReferenceLineDynamicDataConfigurationArgs and TemplateReferenceLineDynamicDataConfigurationOutput values.
// You can construct a concrete instance of `TemplateReferenceLineDynamicDataConfigurationInput` via:
//
//	TemplateReferenceLineDynamicDataConfigurationArgs{...}
type TemplateReferenceLineDynamicDataConfigurationInput interface {
	pulumi.Input

	ToTemplateReferenceLineDynamicDataConfigurationOutput() TemplateReferenceLineDynamicDataConfigurationOutput
	ToTemplateReferenceLineDynamicDataConfigurationOutputWithContext(context.Context) TemplateReferenceLineDynamicDataConfigurationOutput
}

type TemplateReferenceLineDynamicDataConfigurationArgs struct {
	// The calculation that is used in the dynamic data.
	Calculation TemplateNumericalAggregationFunctionInput `pulumi:"calculation"`
	// The column that the dynamic data targets.
	Column TemplateColumnIdentifierInput `pulumi:"column"`
	// The aggregation function that is used in the dynamic data.
	MeasureAggregationFunction TemplateAggregationFunctionPtrInput `pulumi:"measureAggregationFunction"`
}

func (TemplateReferenceLineDynamicDataConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateReferenceLineDynamicDataConfiguration)(nil)).Elem()
}

func (i TemplateReferenceLineDynamicDataConfigurationArgs) ToTemplateReferenceLineDynamicDataConfigurationOutput() TemplateReferenceLineDynamicDataConfigurationOutput {
	return i.ToTemplateReferenceLineDynamicDataConfigurationOutputWithContext(context.Background())
}

func (i TemplateReferenceLineDynamicDataConfigurationArgs) ToTemplateReferenceLineDynamicDataConfigurationOutputWithContext(ctx context.Context) TemplateReferenceLineDynamicDataConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateReferenceLineDynamicDataConfigurationOutput)
}

func (i TemplateReferenceLineDynamicDataConfigurationArgs) ToTemplateReferenceLineDynamicDataConfigurationPtrOutput() TemplateReferenceLineDynamicDataConfigurationPtrOutput {
	return i.ToTemplateReferenceLineDynamicDataConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateReferenceLineDynamicDataConfigurationArgs) ToTemplateReferenceLineDynamicDataConfigurationPtrOutputWithContext(ctx context.Context) TemplateReferenceLineDynamicDataConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateReferenceLineDynamicDataConfigurationOutput).ToTemplateReferenceLineDynamicDataConfigurationPtrOutputWithContext(ctx)
}

// TemplateReferenceLineDynamicDataConfigurationPtrInput is an input type that accepts TemplateReferenceLineDynamicDataConfigurationArgs, TemplateReferenceLineDynamicDataConfigurationPtr and TemplateReferenceLineDynamicDataConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateReferenceLineDynamicDataConfigurationPtrInput` via:
//
//	        TemplateReferenceLineDynamicDataConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateReferenceLineDynamicDataConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateReferenceLineDynamicDataConfigurationPtrOutput() TemplateReferenceLineDynamicDataConfigurationPtrOutput
	ToTemplateReferenceLineDynamicDataConfigurationPtrOutputWithContext(context.Context) TemplateReferenceLineDynamicDataConfigurationPtrOutput
}

type templateReferenceLineDynamicDataConfigurationPtrType TemplateReferenceLineDynamicDataConfigurationArgs

func TemplateReferenceLineDynamicDataConfigurationPtr(v *TemplateReferenceLineDynamicDataConfigurationArgs) TemplateReferenceLineDynamicDataConfigurationPtrInput {
	return (*templateReferenceLineDynamicDataConfigurationPtrType)(v)
}

func (*templateReferenceLineDynamicDataConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateReferenceLineDynamicDataConfiguration)(nil)).Elem()
}

func (i *templateReferenceLineDynamicDataConfigurationPtrType) ToTemplateReferenceLineDynamicDataConfigurationPtrOutput() TemplateReferenceLineDynamicDataConfigurationPtrOutput {
	return i.ToTemplateReferenceLineDynamicDataConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateReferenceLineDynamicDataConfigurationPtrType) ToTemplateReferenceLineDynamicDataConfigurationPtrOutputWithContext(ctx context.Context) TemplateReferenceLineDynamicDataConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateReferenceLineDynamicDataConfigurationPtrOutput)
}

type TemplateReferenceLineDynamicDataConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateReferenceLineDynamicDataConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateReferenceLineDynamicDataConfiguration)(nil)).Elem()
}

func (o TemplateReferenceLineDynamicDataConfigurationOutput) ToTemplateReferenceLineDynamicDataConfigurationOutput() TemplateReferenceLineDynamicDataConfigurationOutput {
	return o
}

func (o TemplateReferenceLineDynamicDataConfigurationOutput) ToTemplateReferenceLineDynamicDataConfigurationOutputWithContext(ctx context.Context) TemplateReferenceLineDynamicDataConfigurationOutput {
	return o
}

func (o TemplateReferenceLineDynamicDataConfigurationOutput) ToTemplateReferenceLineDynamicDataConfigurationPtrOutput() TemplateReferenceLineDynamicDataConfigurationPtrOutput {
	return o.ToTemplateReferenceLineDynamicDataConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateReferenceLineDynamicDataConfigurationOutput) ToTemplateReferenceLineDynamicDataConfigurationPtrOutputWithContext(ctx context.Context) TemplateReferenceLineDynamicDataConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateReferenceLineDynamicDataConfiguration) *TemplateReferenceLineDynamicDataConfiguration {
		return &v
	}).(TemplateReferenceLineDynamicDataConfigurationPtrOutput)
}

// The calculation that is used in the dynamic data.
func (o TemplateReferenceLineDynamicDataConfigurationOutput) Calculation() TemplateNumericalAggregationFunctionOutput {
	return o.ApplyT(func(v TemplateReferenceLineDynamicDataConfiguration) TemplateNumericalAggregationFunction {
		return v.Calculation
	}).(TemplateNumericalAggregationFunctionOutput)
}

// The column that the dynamic data targets.
func (o TemplateReferenceLineDynamicDataConfigurationOutput) Column() TemplateColumnIdentifierOutput {
	return o.ApplyT(func(v TemplateReferenceLineDynamicDataConfiguration) TemplateColumnIdentifier { return v.Column }).(TemplateColumnIdentifierOutput)
}

// The aggregation function that is used in the dynamic data.
func (o TemplateReferenceLineDynamicDataConfigurationOutput) MeasureAggregationFunction() TemplateAggregationFunctionPtrOutput {
	return o.ApplyT(func(v TemplateReferenceLineDynamicDataConfiguration) *TemplateAggregationFunction {
		return v.MeasureAggregationFunction
	}).(TemplateAggregationFunctionPtrOutput)
}

type TemplateReferenceLineDynamicDataConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateReferenceLineDynamicDataConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateReferenceLineDynamicDataConfiguration)(nil)).Elem()
}

func (o TemplateReferenceLineDynamicDataConfigurationPtrOutput) ToTemplateReferenceLineDynamicDataConfigurationPtrOutput() TemplateReferenceLineDynamicDataConfigurationPtrOutput {
	return o
}

func (o TemplateReferenceLineDynamicDataConfigurationPtrOutput) ToTemplateReferenceLineDynamicDataConfigurationPtrOutputWithContext(ctx context.Context) TemplateReferenceLineDynamicDataConfigurationPtrOutput {
	return o
}

func (o TemplateReferenceLineDynamicDataConfigurationPtrOutput) Elem() TemplateReferenceLineDynamicDataConfigurationOutput {
	return o.ApplyT(func(v *TemplateReferenceLineDynamicDataConfiguration) TemplateReferenceLineDynamicDataConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateReferenceLineDynamicDataConfiguration
		return ret
	}).(TemplateReferenceLineDynamicDataConfigurationOutput)
}

// The calculation that is used in the dynamic data.
func (o TemplateReferenceLineDynamicDataConfigurationPtrOutput) Calculation() TemplateNumericalAggregationFunctionPtrOutput {
	return o.ApplyT(func(v *TemplateReferenceLineDynamicDataConfiguration) *TemplateNumericalAggregationFunction {
		if v == nil {
			return nil
		}
		return &v.Calculation
	}).(TemplateNumericalAggregationFunctionPtrOutput)
}

// The column that the dynamic data targets.
func (o TemplateReferenceLineDynamicDataConfigurationPtrOutput) Column() TemplateColumnIdentifierPtrOutput {
	return o.ApplyT(func(v *TemplateReferenceLineDynamicDataConfiguration) *TemplateColumnIdentifier {
		if v == nil {
			return nil
		}
		return &v.Column
	}).(TemplateColumnIdentifierPtrOutput)
}

// The aggregation function that is used in the dynamic data.
func (o TemplateReferenceLineDynamicDataConfigurationPtrOutput) MeasureAggregationFunction() TemplateAggregationFunctionPtrOutput {
	return o.ApplyT(func(v *TemplateReferenceLineDynamicDataConfiguration) *TemplateAggregationFunction {
		if v == nil {
			return nil
		}
		return v.MeasureAggregationFunction
	}).(TemplateAggregationFunctionPtrOutput)
}

type TemplateReferenceLineLabelConfiguration struct {
	// The custom label configuration of the label in a reference line.
	CustomLabelConfiguration *TemplateReferenceLineCustomLabelConfiguration `pulumi:"customLabelConfiguration"`
	// The font color configuration of the label in a reference line.
	FontColor *string `pulumi:"fontColor"`
	// The font configuration of the label in a reference line.
	FontConfiguration *TemplateFontConfiguration `pulumi:"fontConfiguration"`
	// The horizontal position configuration of the label in a reference line. Choose one of the following options:
	//
	// - `LEFT`
	// - `CENTER`
	// - `RIGHT`
	HorizontalPosition *TemplateReferenceLineLabelHorizontalPosition `pulumi:"horizontalPosition"`
	// The value label configuration of the label in a reference line.
	ValueLabelConfiguration *TemplateReferenceLineValueLabelConfiguration `pulumi:"valueLabelConfiguration"`
	// The vertical position configuration of the label in a reference line. Choose one of the following options:
	//
	// - `ABOVE`
	// - `BELOW`
	VerticalPosition *TemplateReferenceLineLabelVerticalPosition `pulumi:"verticalPosition"`
}

// TemplateReferenceLineLabelConfigurationInput is an input type that accepts TemplateReferenceLineLabelConfigurationArgs and TemplateReferenceLineLabelConfigurationOutput values.
// You can construct a concrete instance of `TemplateReferenceLineLabelConfigurationInput` via:
//
//	TemplateReferenceLineLabelConfigurationArgs{...}
type TemplateReferenceLineLabelConfigurationInput interface {
	pulumi.Input

	ToTemplateReferenceLineLabelConfigurationOutput() TemplateReferenceLineLabelConfigurationOutput
	ToTemplateReferenceLineLabelConfigurationOutputWithContext(context.Context) TemplateReferenceLineLabelConfigurationOutput
}

type TemplateReferenceLineLabelConfigurationArgs struct {
	// The custom label configuration of the label in a reference line.
	CustomLabelConfiguration TemplateReferenceLineCustomLabelConfigurationPtrInput `pulumi:"customLabelConfiguration"`
	// The font color configuration of the label in a reference line.
	FontColor pulumi.StringPtrInput `pulumi:"fontColor"`
	// The font configuration of the label in a reference line.
	FontConfiguration TemplateFontConfigurationPtrInput `pulumi:"fontConfiguration"`
	// The horizontal position configuration of the label in a reference line. Choose one of the following options:
	//
	// - `LEFT`
	// - `CENTER`
	// - `RIGHT`
	HorizontalPosition TemplateReferenceLineLabelHorizontalPositionPtrInput `pulumi:"horizontalPosition"`
	// The value label configuration of the label in a reference line.
	ValueLabelConfiguration TemplateReferenceLineValueLabelConfigurationPtrInput `pulumi:"valueLabelConfiguration"`
	// The vertical position configuration of the label in a reference line. Choose one of the following options:
	//
	// - `ABOVE`
	// - `BELOW`
	VerticalPosition TemplateReferenceLineLabelVerticalPositionPtrInput `pulumi:"verticalPosition"`
}

func (TemplateReferenceLineLabelConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateReferenceLineLabelConfiguration)(nil)).Elem()
}

func (i TemplateReferenceLineLabelConfigurationArgs) ToTemplateReferenceLineLabelConfigurationOutput() TemplateReferenceLineLabelConfigurationOutput {
	return i.ToTemplateReferenceLineLabelConfigurationOutputWithContext(context.Background())
}

func (i TemplateReferenceLineLabelConfigurationArgs) ToTemplateReferenceLineLabelConfigurationOutputWithContext(ctx context.Context) TemplateReferenceLineLabelConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateReferenceLineLabelConfigurationOutput)
}

func (i TemplateReferenceLineLabelConfigurationArgs) ToTemplateReferenceLineLabelConfigurationPtrOutput() TemplateReferenceLineLabelConfigurationPtrOutput {
	return i.ToTemplateReferenceLineLabelConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateReferenceLineLabelConfigurationArgs) ToTemplateReferenceLineLabelConfigurationPtrOutputWithContext(ctx context.Context) TemplateReferenceLineLabelConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateReferenceLineLabelConfigurationOutput).ToTemplateReferenceLineLabelConfigurationPtrOutputWithContext(ctx)
}

// TemplateReferenceLineLabelConfigurationPtrInput is an input type that accepts TemplateReferenceLineLabelConfigurationArgs, TemplateReferenceLineLabelConfigurationPtr and TemplateReferenceLineLabelConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateReferenceLineLabelConfigurationPtrInput` via:
//
//	        TemplateReferenceLineLabelConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateReferenceLineLabelConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateReferenceLineLabelConfigurationPtrOutput() TemplateReferenceLineLabelConfigurationPtrOutput
	ToTemplateReferenceLineLabelConfigurationPtrOutputWithContext(context.Context) TemplateReferenceLineLabelConfigurationPtrOutput
}

type templateReferenceLineLabelConfigurationPtrType TemplateReferenceLineLabelConfigurationArgs

func TemplateReferenceLineLabelConfigurationPtr(v *TemplateReferenceLineLabelConfigurationArgs) TemplateReferenceLineLabelConfigurationPtrInput {
	return (*templateReferenceLineLabelConfigurationPtrType)(v)
}

func (*templateReferenceLineLabelConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateReferenceLineLabelConfiguration)(nil)).Elem()
}

func (i *templateReferenceLineLabelConfigurationPtrType) ToTemplateReferenceLineLabelConfigurationPtrOutput() TemplateReferenceLineLabelConfigurationPtrOutput {
	return i.ToTemplateReferenceLineLabelConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateReferenceLineLabelConfigurationPtrType) ToTemplateReferenceLineLabelConfigurationPtrOutputWithContext(ctx context.Context) TemplateReferenceLineLabelConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateReferenceLineLabelConfigurationPtrOutput)
}

type TemplateReferenceLineLabelConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateReferenceLineLabelConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateReferenceLineLabelConfiguration)(nil)).Elem()
}

func (o TemplateReferenceLineLabelConfigurationOutput) ToTemplateReferenceLineLabelConfigurationOutput() TemplateReferenceLineLabelConfigurationOutput {
	return o
}

func (o TemplateReferenceLineLabelConfigurationOutput) ToTemplateReferenceLineLabelConfigurationOutputWithContext(ctx context.Context) TemplateReferenceLineLabelConfigurationOutput {
	return o
}

func (o TemplateReferenceLineLabelConfigurationOutput) ToTemplateReferenceLineLabelConfigurationPtrOutput() TemplateReferenceLineLabelConfigurationPtrOutput {
	return o.ToTemplateReferenceLineLabelConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateReferenceLineLabelConfigurationOutput) ToTemplateReferenceLineLabelConfigurationPtrOutputWithContext(ctx context.Context) TemplateReferenceLineLabelConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateReferenceLineLabelConfiguration) *TemplateReferenceLineLabelConfiguration {
		return &v
	}).(TemplateReferenceLineLabelConfigurationPtrOutput)
}

// The custom label configuration of the label in a reference line.
func (o TemplateReferenceLineLabelConfigurationOutput) CustomLabelConfiguration() TemplateReferenceLineCustomLabelConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateReferenceLineLabelConfiguration) *TemplateReferenceLineCustomLabelConfiguration {
		return v.CustomLabelConfiguration
	}).(TemplateReferenceLineCustomLabelConfigurationPtrOutput)
}

// The font color configuration of the label in a reference line.
func (o TemplateReferenceLineLabelConfigurationOutput) FontColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateReferenceLineLabelConfiguration) *string { return v.FontColor }).(pulumi.StringPtrOutput)
}

// The font configuration of the label in a reference line.
func (o TemplateReferenceLineLabelConfigurationOutput) FontConfiguration() TemplateFontConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateReferenceLineLabelConfiguration) *TemplateFontConfiguration { return v.FontConfiguration }).(TemplateFontConfigurationPtrOutput)
}

// The horizontal position configuration of the label in a reference line. Choose one of the following options:
//
// - `LEFT`
// - `CENTER`
// - `RIGHT`
func (o TemplateReferenceLineLabelConfigurationOutput) HorizontalPosition() TemplateReferenceLineLabelHorizontalPositionPtrOutput {
	return o.ApplyT(func(v TemplateReferenceLineLabelConfiguration) *TemplateReferenceLineLabelHorizontalPosition {
		return v.HorizontalPosition
	}).(TemplateReferenceLineLabelHorizontalPositionPtrOutput)
}

// The value label configuration of the label in a reference line.
func (o TemplateReferenceLineLabelConfigurationOutput) ValueLabelConfiguration() TemplateReferenceLineValueLabelConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateReferenceLineLabelConfiguration) *TemplateReferenceLineValueLabelConfiguration {
		return v.ValueLabelConfiguration
	}).(TemplateReferenceLineValueLabelConfigurationPtrOutput)
}

// The vertical position configuration of the label in a reference line. Choose one of the following options:
//
// - `ABOVE`
// - `BELOW`
func (o TemplateReferenceLineLabelConfigurationOutput) VerticalPosition() TemplateReferenceLineLabelVerticalPositionPtrOutput {
	return o.ApplyT(func(v TemplateReferenceLineLabelConfiguration) *TemplateReferenceLineLabelVerticalPosition {
		return v.VerticalPosition
	}).(TemplateReferenceLineLabelVerticalPositionPtrOutput)
}

type TemplateReferenceLineLabelConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateReferenceLineLabelConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateReferenceLineLabelConfiguration)(nil)).Elem()
}

func (o TemplateReferenceLineLabelConfigurationPtrOutput) ToTemplateReferenceLineLabelConfigurationPtrOutput() TemplateReferenceLineLabelConfigurationPtrOutput {
	return o
}

func (o TemplateReferenceLineLabelConfigurationPtrOutput) ToTemplateReferenceLineLabelConfigurationPtrOutputWithContext(ctx context.Context) TemplateReferenceLineLabelConfigurationPtrOutput {
	return o
}

func (o TemplateReferenceLineLabelConfigurationPtrOutput) Elem() TemplateReferenceLineLabelConfigurationOutput {
	return o.ApplyT(func(v *TemplateReferenceLineLabelConfiguration) TemplateReferenceLineLabelConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateReferenceLineLabelConfiguration
		return ret
	}).(TemplateReferenceLineLabelConfigurationOutput)
}

// The custom label configuration of the label in a reference line.
func (o TemplateReferenceLineLabelConfigurationPtrOutput) CustomLabelConfiguration() TemplateReferenceLineCustomLabelConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateReferenceLineLabelConfiguration) *TemplateReferenceLineCustomLabelConfiguration {
		if v == nil {
			return nil
		}
		return v.CustomLabelConfiguration
	}).(TemplateReferenceLineCustomLabelConfigurationPtrOutput)
}

// The font color configuration of the label in a reference line.
func (o TemplateReferenceLineLabelConfigurationPtrOutput) FontColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateReferenceLineLabelConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.FontColor
	}).(pulumi.StringPtrOutput)
}

// The font configuration of the label in a reference line.
func (o TemplateReferenceLineLabelConfigurationPtrOutput) FontConfiguration() TemplateFontConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateReferenceLineLabelConfiguration) *TemplateFontConfiguration {
		if v == nil {
			return nil
		}
		return v.FontConfiguration
	}).(TemplateFontConfigurationPtrOutput)
}

// The horizontal position configuration of the label in a reference line. Choose one of the following options:
//
// - `LEFT`
// - `CENTER`
// - `RIGHT`
func (o TemplateReferenceLineLabelConfigurationPtrOutput) HorizontalPosition() TemplateReferenceLineLabelHorizontalPositionPtrOutput {
	return o.ApplyT(func(v *TemplateReferenceLineLabelConfiguration) *TemplateReferenceLineLabelHorizontalPosition {
		if v == nil {
			return nil
		}
		return v.HorizontalPosition
	}).(TemplateReferenceLineLabelHorizontalPositionPtrOutput)
}

// The value label configuration of the label in a reference line.
func (o TemplateReferenceLineLabelConfigurationPtrOutput) ValueLabelConfiguration() TemplateReferenceLineValueLabelConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateReferenceLineLabelConfiguration) *TemplateReferenceLineValueLabelConfiguration {
		if v == nil {
			return nil
		}
		return v.ValueLabelConfiguration
	}).(TemplateReferenceLineValueLabelConfigurationPtrOutput)
}

// The vertical position configuration of the label in a reference line. Choose one of the following options:
//
// - `ABOVE`
// - `BELOW`
func (o TemplateReferenceLineLabelConfigurationPtrOutput) VerticalPosition() TemplateReferenceLineLabelVerticalPositionPtrOutput {
	return o.ApplyT(func(v *TemplateReferenceLineLabelConfiguration) *TemplateReferenceLineLabelVerticalPosition {
		if v == nil {
			return nil
		}
		return v.VerticalPosition
	}).(TemplateReferenceLineLabelVerticalPositionPtrOutput)
}

type TemplateReferenceLineStaticDataConfiguration struct {
	// The double input of the static data.
	Value float64 `pulumi:"value"`
}

// TemplateReferenceLineStaticDataConfigurationInput is an input type that accepts TemplateReferenceLineStaticDataConfigurationArgs and TemplateReferenceLineStaticDataConfigurationOutput values.
// You can construct a concrete instance of `TemplateReferenceLineStaticDataConfigurationInput` via:
//
//	TemplateReferenceLineStaticDataConfigurationArgs{...}
type TemplateReferenceLineStaticDataConfigurationInput interface {
	pulumi.Input

	ToTemplateReferenceLineStaticDataConfigurationOutput() TemplateReferenceLineStaticDataConfigurationOutput
	ToTemplateReferenceLineStaticDataConfigurationOutputWithContext(context.Context) TemplateReferenceLineStaticDataConfigurationOutput
}

type TemplateReferenceLineStaticDataConfigurationArgs struct {
	// The double input of the static data.
	Value pulumi.Float64Input `pulumi:"value"`
}

func (TemplateReferenceLineStaticDataConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateReferenceLineStaticDataConfiguration)(nil)).Elem()
}

func (i TemplateReferenceLineStaticDataConfigurationArgs) ToTemplateReferenceLineStaticDataConfigurationOutput() TemplateReferenceLineStaticDataConfigurationOutput {
	return i.ToTemplateReferenceLineStaticDataConfigurationOutputWithContext(context.Background())
}

func (i TemplateReferenceLineStaticDataConfigurationArgs) ToTemplateReferenceLineStaticDataConfigurationOutputWithContext(ctx context.Context) TemplateReferenceLineStaticDataConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateReferenceLineStaticDataConfigurationOutput)
}

func (i TemplateReferenceLineStaticDataConfigurationArgs) ToTemplateReferenceLineStaticDataConfigurationPtrOutput() TemplateReferenceLineStaticDataConfigurationPtrOutput {
	return i.ToTemplateReferenceLineStaticDataConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateReferenceLineStaticDataConfigurationArgs) ToTemplateReferenceLineStaticDataConfigurationPtrOutputWithContext(ctx context.Context) TemplateReferenceLineStaticDataConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateReferenceLineStaticDataConfigurationOutput).ToTemplateReferenceLineStaticDataConfigurationPtrOutputWithContext(ctx)
}

// TemplateReferenceLineStaticDataConfigurationPtrInput is an input type that accepts TemplateReferenceLineStaticDataConfigurationArgs, TemplateReferenceLineStaticDataConfigurationPtr and TemplateReferenceLineStaticDataConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateReferenceLineStaticDataConfigurationPtrInput` via:
//
//	        TemplateReferenceLineStaticDataConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateReferenceLineStaticDataConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateReferenceLineStaticDataConfigurationPtrOutput() TemplateReferenceLineStaticDataConfigurationPtrOutput
	ToTemplateReferenceLineStaticDataConfigurationPtrOutputWithContext(context.Context) TemplateReferenceLineStaticDataConfigurationPtrOutput
}

type templateReferenceLineStaticDataConfigurationPtrType TemplateReferenceLineStaticDataConfigurationArgs

func TemplateReferenceLineStaticDataConfigurationPtr(v *TemplateReferenceLineStaticDataConfigurationArgs) TemplateReferenceLineStaticDataConfigurationPtrInput {
	return (*templateReferenceLineStaticDataConfigurationPtrType)(v)
}

func (*templateReferenceLineStaticDataConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateReferenceLineStaticDataConfiguration)(nil)).Elem()
}

func (i *templateReferenceLineStaticDataConfigurationPtrType) ToTemplateReferenceLineStaticDataConfigurationPtrOutput() TemplateReferenceLineStaticDataConfigurationPtrOutput {
	return i.ToTemplateReferenceLineStaticDataConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateReferenceLineStaticDataConfigurationPtrType) ToTemplateReferenceLineStaticDataConfigurationPtrOutputWithContext(ctx context.Context) TemplateReferenceLineStaticDataConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateReferenceLineStaticDataConfigurationPtrOutput)
}

type TemplateReferenceLineStaticDataConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateReferenceLineStaticDataConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateReferenceLineStaticDataConfiguration)(nil)).Elem()
}

func (o TemplateReferenceLineStaticDataConfigurationOutput) ToTemplateReferenceLineStaticDataConfigurationOutput() TemplateReferenceLineStaticDataConfigurationOutput {
	return o
}

func (o TemplateReferenceLineStaticDataConfigurationOutput) ToTemplateReferenceLineStaticDataConfigurationOutputWithContext(ctx context.Context) TemplateReferenceLineStaticDataConfigurationOutput {
	return o
}

func (o TemplateReferenceLineStaticDataConfigurationOutput) ToTemplateReferenceLineStaticDataConfigurationPtrOutput() TemplateReferenceLineStaticDataConfigurationPtrOutput {
	return o.ToTemplateReferenceLineStaticDataConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateReferenceLineStaticDataConfigurationOutput) ToTemplateReferenceLineStaticDataConfigurationPtrOutputWithContext(ctx context.Context) TemplateReferenceLineStaticDataConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateReferenceLineStaticDataConfiguration) *TemplateReferenceLineStaticDataConfiguration {
		return &v
	}).(TemplateReferenceLineStaticDataConfigurationPtrOutput)
}

// The double input of the static data.
func (o TemplateReferenceLineStaticDataConfigurationOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v TemplateReferenceLineStaticDataConfiguration) float64 { return v.Value }).(pulumi.Float64Output)
}

type TemplateReferenceLineStaticDataConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateReferenceLineStaticDataConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateReferenceLineStaticDataConfiguration)(nil)).Elem()
}

func (o TemplateReferenceLineStaticDataConfigurationPtrOutput) ToTemplateReferenceLineStaticDataConfigurationPtrOutput() TemplateReferenceLineStaticDataConfigurationPtrOutput {
	return o
}

func (o TemplateReferenceLineStaticDataConfigurationPtrOutput) ToTemplateReferenceLineStaticDataConfigurationPtrOutputWithContext(ctx context.Context) TemplateReferenceLineStaticDataConfigurationPtrOutput {
	return o
}

func (o TemplateReferenceLineStaticDataConfigurationPtrOutput) Elem() TemplateReferenceLineStaticDataConfigurationOutput {
	return o.ApplyT(func(v *TemplateReferenceLineStaticDataConfiguration) TemplateReferenceLineStaticDataConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateReferenceLineStaticDataConfiguration
		return ret
	}).(TemplateReferenceLineStaticDataConfigurationOutput)
}

// The double input of the static data.
func (o TemplateReferenceLineStaticDataConfigurationPtrOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateReferenceLineStaticDataConfiguration) *float64 {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.Float64PtrOutput)
}

type TemplateReferenceLineStyleConfiguration struct {
	// The hex color of the reference line.
	Color *string `pulumi:"color"`
	// The pattern type of the line style. Choose one of the following options:
	//
	// - `SOLID`
	// - `DASHED`
	// - `DOTTED`
	Pattern *TemplateReferenceLinePatternType `pulumi:"pattern"`
}

// TemplateReferenceLineStyleConfigurationInput is an input type that accepts TemplateReferenceLineStyleConfigurationArgs and TemplateReferenceLineStyleConfigurationOutput values.
// You can construct a concrete instance of `TemplateReferenceLineStyleConfigurationInput` via:
//
//	TemplateReferenceLineStyleConfigurationArgs{...}
type TemplateReferenceLineStyleConfigurationInput interface {
	pulumi.Input

	ToTemplateReferenceLineStyleConfigurationOutput() TemplateReferenceLineStyleConfigurationOutput
	ToTemplateReferenceLineStyleConfigurationOutputWithContext(context.Context) TemplateReferenceLineStyleConfigurationOutput
}

type TemplateReferenceLineStyleConfigurationArgs struct {
	// The hex color of the reference line.
	Color pulumi.StringPtrInput `pulumi:"color"`
	// The pattern type of the line style. Choose one of the following options:
	//
	// - `SOLID`
	// - `DASHED`
	// - `DOTTED`
	Pattern TemplateReferenceLinePatternTypePtrInput `pulumi:"pattern"`
}

func (TemplateReferenceLineStyleConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateReferenceLineStyleConfiguration)(nil)).Elem()
}

func (i TemplateReferenceLineStyleConfigurationArgs) ToTemplateReferenceLineStyleConfigurationOutput() TemplateReferenceLineStyleConfigurationOutput {
	return i.ToTemplateReferenceLineStyleConfigurationOutputWithContext(context.Background())
}

func (i TemplateReferenceLineStyleConfigurationArgs) ToTemplateReferenceLineStyleConfigurationOutputWithContext(ctx context.Context) TemplateReferenceLineStyleConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateReferenceLineStyleConfigurationOutput)
}

func (i TemplateReferenceLineStyleConfigurationArgs) ToTemplateReferenceLineStyleConfigurationPtrOutput() TemplateReferenceLineStyleConfigurationPtrOutput {
	return i.ToTemplateReferenceLineStyleConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateReferenceLineStyleConfigurationArgs) ToTemplateReferenceLineStyleConfigurationPtrOutputWithContext(ctx context.Context) TemplateReferenceLineStyleConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateReferenceLineStyleConfigurationOutput).ToTemplateReferenceLineStyleConfigurationPtrOutputWithContext(ctx)
}

// TemplateReferenceLineStyleConfigurationPtrInput is an input type that accepts TemplateReferenceLineStyleConfigurationArgs, TemplateReferenceLineStyleConfigurationPtr and TemplateReferenceLineStyleConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateReferenceLineStyleConfigurationPtrInput` via:
//
//	        TemplateReferenceLineStyleConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateReferenceLineStyleConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateReferenceLineStyleConfigurationPtrOutput() TemplateReferenceLineStyleConfigurationPtrOutput
	ToTemplateReferenceLineStyleConfigurationPtrOutputWithContext(context.Context) TemplateReferenceLineStyleConfigurationPtrOutput
}

type templateReferenceLineStyleConfigurationPtrType TemplateReferenceLineStyleConfigurationArgs

func TemplateReferenceLineStyleConfigurationPtr(v *TemplateReferenceLineStyleConfigurationArgs) TemplateReferenceLineStyleConfigurationPtrInput {
	return (*templateReferenceLineStyleConfigurationPtrType)(v)
}

func (*templateReferenceLineStyleConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateReferenceLineStyleConfiguration)(nil)).Elem()
}

func (i *templateReferenceLineStyleConfigurationPtrType) ToTemplateReferenceLineStyleConfigurationPtrOutput() TemplateReferenceLineStyleConfigurationPtrOutput {
	return i.ToTemplateReferenceLineStyleConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateReferenceLineStyleConfigurationPtrType) ToTemplateReferenceLineStyleConfigurationPtrOutputWithContext(ctx context.Context) TemplateReferenceLineStyleConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateReferenceLineStyleConfigurationPtrOutput)
}

type TemplateReferenceLineStyleConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateReferenceLineStyleConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateReferenceLineStyleConfiguration)(nil)).Elem()
}

func (o TemplateReferenceLineStyleConfigurationOutput) ToTemplateReferenceLineStyleConfigurationOutput() TemplateReferenceLineStyleConfigurationOutput {
	return o
}

func (o TemplateReferenceLineStyleConfigurationOutput) ToTemplateReferenceLineStyleConfigurationOutputWithContext(ctx context.Context) TemplateReferenceLineStyleConfigurationOutput {
	return o
}

func (o TemplateReferenceLineStyleConfigurationOutput) ToTemplateReferenceLineStyleConfigurationPtrOutput() TemplateReferenceLineStyleConfigurationPtrOutput {
	return o.ToTemplateReferenceLineStyleConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateReferenceLineStyleConfigurationOutput) ToTemplateReferenceLineStyleConfigurationPtrOutputWithContext(ctx context.Context) TemplateReferenceLineStyleConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateReferenceLineStyleConfiguration) *TemplateReferenceLineStyleConfiguration {
		return &v
	}).(TemplateReferenceLineStyleConfigurationPtrOutput)
}

// The hex color of the reference line.
func (o TemplateReferenceLineStyleConfigurationOutput) Color() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateReferenceLineStyleConfiguration) *string { return v.Color }).(pulumi.StringPtrOutput)
}

// The pattern type of the line style. Choose one of the following options:
//
// - `SOLID`
// - `DASHED`
// - `DOTTED`
func (o TemplateReferenceLineStyleConfigurationOutput) Pattern() TemplateReferenceLinePatternTypePtrOutput {
	return o.ApplyT(func(v TemplateReferenceLineStyleConfiguration) *TemplateReferenceLinePatternType { return v.Pattern }).(TemplateReferenceLinePatternTypePtrOutput)
}

type TemplateReferenceLineStyleConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateReferenceLineStyleConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateReferenceLineStyleConfiguration)(nil)).Elem()
}

func (o TemplateReferenceLineStyleConfigurationPtrOutput) ToTemplateReferenceLineStyleConfigurationPtrOutput() TemplateReferenceLineStyleConfigurationPtrOutput {
	return o
}

func (o TemplateReferenceLineStyleConfigurationPtrOutput) ToTemplateReferenceLineStyleConfigurationPtrOutputWithContext(ctx context.Context) TemplateReferenceLineStyleConfigurationPtrOutput {
	return o
}

func (o TemplateReferenceLineStyleConfigurationPtrOutput) Elem() TemplateReferenceLineStyleConfigurationOutput {
	return o.ApplyT(func(v *TemplateReferenceLineStyleConfiguration) TemplateReferenceLineStyleConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateReferenceLineStyleConfiguration
		return ret
	}).(TemplateReferenceLineStyleConfigurationOutput)
}

// The hex color of the reference line.
func (o TemplateReferenceLineStyleConfigurationPtrOutput) Color() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateReferenceLineStyleConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Color
	}).(pulumi.StringPtrOutput)
}

// The pattern type of the line style. Choose one of the following options:
//
// - `SOLID`
// - `DASHED`
// - `DOTTED`
func (o TemplateReferenceLineStyleConfigurationPtrOutput) Pattern() TemplateReferenceLinePatternTypePtrOutput {
	return o.ApplyT(func(v *TemplateReferenceLineStyleConfiguration) *TemplateReferenceLinePatternType {
		if v == nil {
			return nil
		}
		return v.Pattern
	}).(TemplateReferenceLinePatternTypePtrOutput)
}

type TemplateReferenceLineValueLabelConfiguration struct {
	// The format configuration of the value label.
	FormatConfiguration *TemplateNumericFormatConfiguration `pulumi:"formatConfiguration"`
	// The relative position of the value label. Choose one of the following options:
	//
	// - `BEFORE_CUSTOM_LABEL`
	// - `AFTER_CUSTOM_LABEL`
	RelativePosition *TemplateReferenceLineValueLabelRelativePosition `pulumi:"relativePosition"`
}

// TemplateReferenceLineValueLabelConfigurationInput is an input type that accepts TemplateReferenceLineValueLabelConfigurationArgs and TemplateReferenceLineValueLabelConfigurationOutput values.
// You can construct a concrete instance of `TemplateReferenceLineValueLabelConfigurationInput` via:
//
//	TemplateReferenceLineValueLabelConfigurationArgs{...}
type TemplateReferenceLineValueLabelConfigurationInput interface {
	pulumi.Input

	ToTemplateReferenceLineValueLabelConfigurationOutput() TemplateReferenceLineValueLabelConfigurationOutput
	ToTemplateReferenceLineValueLabelConfigurationOutputWithContext(context.Context) TemplateReferenceLineValueLabelConfigurationOutput
}

type TemplateReferenceLineValueLabelConfigurationArgs struct {
	// The format configuration of the value label.
	FormatConfiguration TemplateNumericFormatConfigurationPtrInput `pulumi:"formatConfiguration"`
	// The relative position of the value label. Choose one of the following options:
	//
	// - `BEFORE_CUSTOM_LABEL`
	// - `AFTER_CUSTOM_LABEL`
	RelativePosition TemplateReferenceLineValueLabelRelativePositionPtrInput `pulumi:"relativePosition"`
}

func (TemplateReferenceLineValueLabelConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateReferenceLineValueLabelConfiguration)(nil)).Elem()
}

func (i TemplateReferenceLineValueLabelConfigurationArgs) ToTemplateReferenceLineValueLabelConfigurationOutput() TemplateReferenceLineValueLabelConfigurationOutput {
	return i.ToTemplateReferenceLineValueLabelConfigurationOutputWithContext(context.Background())
}

func (i TemplateReferenceLineValueLabelConfigurationArgs) ToTemplateReferenceLineValueLabelConfigurationOutputWithContext(ctx context.Context) TemplateReferenceLineValueLabelConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateReferenceLineValueLabelConfigurationOutput)
}

func (i TemplateReferenceLineValueLabelConfigurationArgs) ToTemplateReferenceLineValueLabelConfigurationPtrOutput() TemplateReferenceLineValueLabelConfigurationPtrOutput {
	return i.ToTemplateReferenceLineValueLabelConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateReferenceLineValueLabelConfigurationArgs) ToTemplateReferenceLineValueLabelConfigurationPtrOutputWithContext(ctx context.Context) TemplateReferenceLineValueLabelConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateReferenceLineValueLabelConfigurationOutput).ToTemplateReferenceLineValueLabelConfigurationPtrOutputWithContext(ctx)
}

// TemplateReferenceLineValueLabelConfigurationPtrInput is an input type that accepts TemplateReferenceLineValueLabelConfigurationArgs, TemplateReferenceLineValueLabelConfigurationPtr and TemplateReferenceLineValueLabelConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateReferenceLineValueLabelConfigurationPtrInput` via:
//
//	        TemplateReferenceLineValueLabelConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateReferenceLineValueLabelConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateReferenceLineValueLabelConfigurationPtrOutput() TemplateReferenceLineValueLabelConfigurationPtrOutput
	ToTemplateReferenceLineValueLabelConfigurationPtrOutputWithContext(context.Context) TemplateReferenceLineValueLabelConfigurationPtrOutput
}

type templateReferenceLineValueLabelConfigurationPtrType TemplateReferenceLineValueLabelConfigurationArgs

func TemplateReferenceLineValueLabelConfigurationPtr(v *TemplateReferenceLineValueLabelConfigurationArgs) TemplateReferenceLineValueLabelConfigurationPtrInput {
	return (*templateReferenceLineValueLabelConfigurationPtrType)(v)
}

func (*templateReferenceLineValueLabelConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateReferenceLineValueLabelConfiguration)(nil)).Elem()
}

func (i *templateReferenceLineValueLabelConfigurationPtrType) ToTemplateReferenceLineValueLabelConfigurationPtrOutput() TemplateReferenceLineValueLabelConfigurationPtrOutput {
	return i.ToTemplateReferenceLineValueLabelConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateReferenceLineValueLabelConfigurationPtrType) ToTemplateReferenceLineValueLabelConfigurationPtrOutputWithContext(ctx context.Context) TemplateReferenceLineValueLabelConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateReferenceLineValueLabelConfigurationPtrOutput)
}

type TemplateReferenceLineValueLabelConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateReferenceLineValueLabelConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateReferenceLineValueLabelConfiguration)(nil)).Elem()
}

func (o TemplateReferenceLineValueLabelConfigurationOutput) ToTemplateReferenceLineValueLabelConfigurationOutput() TemplateReferenceLineValueLabelConfigurationOutput {
	return o
}

func (o TemplateReferenceLineValueLabelConfigurationOutput) ToTemplateReferenceLineValueLabelConfigurationOutputWithContext(ctx context.Context) TemplateReferenceLineValueLabelConfigurationOutput {
	return o
}

func (o TemplateReferenceLineValueLabelConfigurationOutput) ToTemplateReferenceLineValueLabelConfigurationPtrOutput() TemplateReferenceLineValueLabelConfigurationPtrOutput {
	return o.ToTemplateReferenceLineValueLabelConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateReferenceLineValueLabelConfigurationOutput) ToTemplateReferenceLineValueLabelConfigurationPtrOutputWithContext(ctx context.Context) TemplateReferenceLineValueLabelConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateReferenceLineValueLabelConfiguration) *TemplateReferenceLineValueLabelConfiguration {
		return &v
	}).(TemplateReferenceLineValueLabelConfigurationPtrOutput)
}

// The format configuration of the value label.
func (o TemplateReferenceLineValueLabelConfigurationOutput) FormatConfiguration() TemplateNumericFormatConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateReferenceLineValueLabelConfiguration) *TemplateNumericFormatConfiguration {
		return v.FormatConfiguration
	}).(TemplateNumericFormatConfigurationPtrOutput)
}

// The relative position of the value label. Choose one of the following options:
//
// - `BEFORE_CUSTOM_LABEL`
// - `AFTER_CUSTOM_LABEL`
func (o TemplateReferenceLineValueLabelConfigurationOutput) RelativePosition() TemplateReferenceLineValueLabelRelativePositionPtrOutput {
	return o.ApplyT(func(v TemplateReferenceLineValueLabelConfiguration) *TemplateReferenceLineValueLabelRelativePosition {
		return v.RelativePosition
	}).(TemplateReferenceLineValueLabelRelativePositionPtrOutput)
}

type TemplateReferenceLineValueLabelConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateReferenceLineValueLabelConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateReferenceLineValueLabelConfiguration)(nil)).Elem()
}

func (o TemplateReferenceLineValueLabelConfigurationPtrOutput) ToTemplateReferenceLineValueLabelConfigurationPtrOutput() TemplateReferenceLineValueLabelConfigurationPtrOutput {
	return o
}

func (o TemplateReferenceLineValueLabelConfigurationPtrOutput) ToTemplateReferenceLineValueLabelConfigurationPtrOutputWithContext(ctx context.Context) TemplateReferenceLineValueLabelConfigurationPtrOutput {
	return o
}

func (o TemplateReferenceLineValueLabelConfigurationPtrOutput) Elem() TemplateReferenceLineValueLabelConfigurationOutput {
	return o.ApplyT(func(v *TemplateReferenceLineValueLabelConfiguration) TemplateReferenceLineValueLabelConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateReferenceLineValueLabelConfiguration
		return ret
	}).(TemplateReferenceLineValueLabelConfigurationOutput)
}

// The format configuration of the value label.
func (o TemplateReferenceLineValueLabelConfigurationPtrOutput) FormatConfiguration() TemplateNumericFormatConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateReferenceLineValueLabelConfiguration) *TemplateNumericFormatConfiguration {
		if v == nil {
			return nil
		}
		return v.FormatConfiguration
	}).(TemplateNumericFormatConfigurationPtrOutput)
}

// The relative position of the value label. Choose one of the following options:
//
// - `BEFORE_CUSTOM_LABEL`
// - `AFTER_CUSTOM_LABEL`
func (o TemplateReferenceLineValueLabelConfigurationPtrOutput) RelativePosition() TemplateReferenceLineValueLabelRelativePositionPtrOutput {
	return o.ApplyT(func(v *TemplateReferenceLineValueLabelConfiguration) *TemplateReferenceLineValueLabelRelativePosition {
		if v == nil {
			return nil
		}
		return v.RelativePosition
	}).(TemplateReferenceLineValueLabelRelativePositionPtrOutput)
}

type TemplateRelativeDateTimeControlDisplayOptions struct {
	// Customize how dates are formatted in controls.
	DateTimeFormat *string `pulumi:"dateTimeFormat"`
	// The configuration of info icon label options.
	InfoIconLabelOptions *TemplateSheetControlInfoIconLabelOptions `pulumi:"infoIconLabelOptions"`
	// The options to configure the title visibility, name, and font size.
	TitleOptions *TemplateLabelOptions `pulumi:"titleOptions"`
}

// TemplateRelativeDateTimeControlDisplayOptionsInput is an input type that accepts TemplateRelativeDateTimeControlDisplayOptionsArgs and TemplateRelativeDateTimeControlDisplayOptionsOutput values.
// You can construct a concrete instance of `TemplateRelativeDateTimeControlDisplayOptionsInput` via:
//
//	TemplateRelativeDateTimeControlDisplayOptionsArgs{...}
type TemplateRelativeDateTimeControlDisplayOptionsInput interface {
	pulumi.Input

	ToTemplateRelativeDateTimeControlDisplayOptionsOutput() TemplateRelativeDateTimeControlDisplayOptionsOutput
	ToTemplateRelativeDateTimeControlDisplayOptionsOutputWithContext(context.Context) TemplateRelativeDateTimeControlDisplayOptionsOutput
}

type TemplateRelativeDateTimeControlDisplayOptionsArgs struct {
	// Customize how dates are formatted in controls.
	DateTimeFormat pulumi.StringPtrInput `pulumi:"dateTimeFormat"`
	// The configuration of info icon label options.
	InfoIconLabelOptions TemplateSheetControlInfoIconLabelOptionsPtrInput `pulumi:"infoIconLabelOptions"`
	// The options to configure the title visibility, name, and font size.
	TitleOptions TemplateLabelOptionsPtrInput `pulumi:"titleOptions"`
}

func (TemplateRelativeDateTimeControlDisplayOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateRelativeDateTimeControlDisplayOptions)(nil)).Elem()
}

func (i TemplateRelativeDateTimeControlDisplayOptionsArgs) ToTemplateRelativeDateTimeControlDisplayOptionsOutput() TemplateRelativeDateTimeControlDisplayOptionsOutput {
	return i.ToTemplateRelativeDateTimeControlDisplayOptionsOutputWithContext(context.Background())
}

func (i TemplateRelativeDateTimeControlDisplayOptionsArgs) ToTemplateRelativeDateTimeControlDisplayOptionsOutputWithContext(ctx context.Context) TemplateRelativeDateTimeControlDisplayOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateRelativeDateTimeControlDisplayOptionsOutput)
}

func (i TemplateRelativeDateTimeControlDisplayOptionsArgs) ToTemplateRelativeDateTimeControlDisplayOptionsPtrOutput() TemplateRelativeDateTimeControlDisplayOptionsPtrOutput {
	return i.ToTemplateRelativeDateTimeControlDisplayOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateRelativeDateTimeControlDisplayOptionsArgs) ToTemplateRelativeDateTimeControlDisplayOptionsPtrOutputWithContext(ctx context.Context) TemplateRelativeDateTimeControlDisplayOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateRelativeDateTimeControlDisplayOptionsOutput).ToTemplateRelativeDateTimeControlDisplayOptionsPtrOutputWithContext(ctx)
}

// TemplateRelativeDateTimeControlDisplayOptionsPtrInput is an input type that accepts TemplateRelativeDateTimeControlDisplayOptionsArgs, TemplateRelativeDateTimeControlDisplayOptionsPtr and TemplateRelativeDateTimeControlDisplayOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateRelativeDateTimeControlDisplayOptionsPtrInput` via:
//
//	        TemplateRelativeDateTimeControlDisplayOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateRelativeDateTimeControlDisplayOptionsPtrInput interface {
	pulumi.Input

	ToTemplateRelativeDateTimeControlDisplayOptionsPtrOutput() TemplateRelativeDateTimeControlDisplayOptionsPtrOutput
	ToTemplateRelativeDateTimeControlDisplayOptionsPtrOutputWithContext(context.Context) TemplateRelativeDateTimeControlDisplayOptionsPtrOutput
}

type templateRelativeDateTimeControlDisplayOptionsPtrType TemplateRelativeDateTimeControlDisplayOptionsArgs

func TemplateRelativeDateTimeControlDisplayOptionsPtr(v *TemplateRelativeDateTimeControlDisplayOptionsArgs) TemplateRelativeDateTimeControlDisplayOptionsPtrInput {
	return (*templateRelativeDateTimeControlDisplayOptionsPtrType)(v)
}

func (*templateRelativeDateTimeControlDisplayOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateRelativeDateTimeControlDisplayOptions)(nil)).Elem()
}

func (i *templateRelativeDateTimeControlDisplayOptionsPtrType) ToTemplateRelativeDateTimeControlDisplayOptionsPtrOutput() TemplateRelativeDateTimeControlDisplayOptionsPtrOutput {
	return i.ToTemplateRelativeDateTimeControlDisplayOptionsPtrOutputWithContext(context.Background())
}

func (i *templateRelativeDateTimeControlDisplayOptionsPtrType) ToTemplateRelativeDateTimeControlDisplayOptionsPtrOutputWithContext(ctx context.Context) TemplateRelativeDateTimeControlDisplayOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateRelativeDateTimeControlDisplayOptionsPtrOutput)
}

type TemplateRelativeDateTimeControlDisplayOptionsOutput struct{ *pulumi.OutputState }

func (TemplateRelativeDateTimeControlDisplayOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateRelativeDateTimeControlDisplayOptions)(nil)).Elem()
}

func (o TemplateRelativeDateTimeControlDisplayOptionsOutput) ToTemplateRelativeDateTimeControlDisplayOptionsOutput() TemplateRelativeDateTimeControlDisplayOptionsOutput {
	return o
}

func (o TemplateRelativeDateTimeControlDisplayOptionsOutput) ToTemplateRelativeDateTimeControlDisplayOptionsOutputWithContext(ctx context.Context) TemplateRelativeDateTimeControlDisplayOptionsOutput {
	return o
}

func (o TemplateRelativeDateTimeControlDisplayOptionsOutput) ToTemplateRelativeDateTimeControlDisplayOptionsPtrOutput() TemplateRelativeDateTimeControlDisplayOptionsPtrOutput {
	return o.ToTemplateRelativeDateTimeControlDisplayOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateRelativeDateTimeControlDisplayOptionsOutput) ToTemplateRelativeDateTimeControlDisplayOptionsPtrOutputWithContext(ctx context.Context) TemplateRelativeDateTimeControlDisplayOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateRelativeDateTimeControlDisplayOptions) *TemplateRelativeDateTimeControlDisplayOptions {
		return &v
	}).(TemplateRelativeDateTimeControlDisplayOptionsPtrOutput)
}

// Customize how dates are formatted in controls.
func (o TemplateRelativeDateTimeControlDisplayOptionsOutput) DateTimeFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateRelativeDateTimeControlDisplayOptions) *string { return v.DateTimeFormat }).(pulumi.StringPtrOutput)
}

// The configuration of info icon label options.
func (o TemplateRelativeDateTimeControlDisplayOptionsOutput) InfoIconLabelOptions() TemplateSheetControlInfoIconLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateRelativeDateTimeControlDisplayOptions) *TemplateSheetControlInfoIconLabelOptions {
		return v.InfoIconLabelOptions
	}).(TemplateSheetControlInfoIconLabelOptionsPtrOutput)
}

// The options to configure the title visibility, name, and font size.
func (o TemplateRelativeDateTimeControlDisplayOptionsOutput) TitleOptions() TemplateLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateRelativeDateTimeControlDisplayOptions) *TemplateLabelOptions { return v.TitleOptions }).(TemplateLabelOptionsPtrOutput)
}

type TemplateRelativeDateTimeControlDisplayOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateRelativeDateTimeControlDisplayOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateRelativeDateTimeControlDisplayOptions)(nil)).Elem()
}

func (o TemplateRelativeDateTimeControlDisplayOptionsPtrOutput) ToTemplateRelativeDateTimeControlDisplayOptionsPtrOutput() TemplateRelativeDateTimeControlDisplayOptionsPtrOutput {
	return o
}

func (o TemplateRelativeDateTimeControlDisplayOptionsPtrOutput) ToTemplateRelativeDateTimeControlDisplayOptionsPtrOutputWithContext(ctx context.Context) TemplateRelativeDateTimeControlDisplayOptionsPtrOutput {
	return o
}

func (o TemplateRelativeDateTimeControlDisplayOptionsPtrOutput) Elem() TemplateRelativeDateTimeControlDisplayOptionsOutput {
	return o.ApplyT(func(v *TemplateRelativeDateTimeControlDisplayOptions) TemplateRelativeDateTimeControlDisplayOptions {
		if v != nil {
			return *v
		}
		var ret TemplateRelativeDateTimeControlDisplayOptions
		return ret
	}).(TemplateRelativeDateTimeControlDisplayOptionsOutput)
}

// Customize how dates are formatted in controls.
func (o TemplateRelativeDateTimeControlDisplayOptionsPtrOutput) DateTimeFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateRelativeDateTimeControlDisplayOptions) *string {
		if v == nil {
			return nil
		}
		return v.DateTimeFormat
	}).(pulumi.StringPtrOutput)
}

// The configuration of info icon label options.
func (o TemplateRelativeDateTimeControlDisplayOptionsPtrOutput) InfoIconLabelOptions() TemplateSheetControlInfoIconLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateRelativeDateTimeControlDisplayOptions) *TemplateSheetControlInfoIconLabelOptions {
		if v == nil {
			return nil
		}
		return v.InfoIconLabelOptions
	}).(TemplateSheetControlInfoIconLabelOptionsPtrOutput)
}

// The options to configure the title visibility, name, and font size.
func (o TemplateRelativeDateTimeControlDisplayOptionsPtrOutput) TitleOptions() TemplateLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateRelativeDateTimeControlDisplayOptions) *TemplateLabelOptions {
		if v == nil {
			return nil
		}
		return v.TitleOptions
	}).(TemplateLabelOptionsPtrOutput)
}

type TemplateRelativeDatesFilter struct {
	// The date configuration of the filter.
	AnchorDateConfiguration TemplateAnchorDateConfiguration `pulumi:"anchorDateConfiguration"`
	// The column that the filter is applied to.
	Column TemplateColumnIdentifier `pulumi:"column"`
	// The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
	DefaultFilterControlConfiguration *TemplateDefaultFilterControlConfiguration `pulumi:"defaultFilterControlConfiguration"`
	// The configuration for the exclude period of the filter.
	ExcludePeriodConfiguration *TemplateExcludePeriodConfiguration `pulumi:"excludePeriodConfiguration"`
	// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
	FilterId string `pulumi:"filterId"`
	// The minimum granularity (period granularity) of the relative dates filter.
	MinimumGranularity *TemplateTimeGranularity `pulumi:"minimumGranularity"`
	// This option determines how null values should be treated when filtering data.
	//
	// - `ALL_VALUES` : Include null values in filtered results.
	// - `NULLS_ONLY` : Only include null values in filtered results.
	// - `NON_NULLS_ONLY` : Exclude null values from filtered results.
	NullOption TemplateFilterNullOption `pulumi:"nullOption"`
	// The parameter whose value should be used for the filter value.
	ParameterName *string `pulumi:"parameterName"`
	// The range date type of the filter. Choose one of the options below:
	//
	// - `PREVIOUS`
	// - `THIS`
	// - `LAST`
	// - `NOW`
	// - `NEXT`
	RelativeDateType TemplateRelativeDateType `pulumi:"relativeDateType"`
	// The date value of the filter.
	RelativeDateValue *float64 `pulumi:"relativeDateValue"`
	// The level of time precision that is used to aggregate `DateTime` values.
	TimeGranularity TemplateTimeGranularity `pulumi:"timeGranularity"`
}

// TemplateRelativeDatesFilterInput is an input type that accepts TemplateRelativeDatesFilterArgs and TemplateRelativeDatesFilterOutput values.
// You can construct a concrete instance of `TemplateRelativeDatesFilterInput` via:
//
//	TemplateRelativeDatesFilterArgs{...}
type TemplateRelativeDatesFilterInput interface {
	pulumi.Input

	ToTemplateRelativeDatesFilterOutput() TemplateRelativeDatesFilterOutput
	ToTemplateRelativeDatesFilterOutputWithContext(context.Context) TemplateRelativeDatesFilterOutput
}

type TemplateRelativeDatesFilterArgs struct {
	// The date configuration of the filter.
	AnchorDateConfiguration TemplateAnchorDateConfigurationInput `pulumi:"anchorDateConfiguration"`
	// The column that the filter is applied to.
	Column TemplateColumnIdentifierInput `pulumi:"column"`
	// The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
	DefaultFilterControlConfiguration TemplateDefaultFilterControlConfigurationPtrInput `pulumi:"defaultFilterControlConfiguration"`
	// The configuration for the exclude period of the filter.
	ExcludePeriodConfiguration TemplateExcludePeriodConfigurationPtrInput `pulumi:"excludePeriodConfiguration"`
	// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
	FilterId pulumi.StringInput `pulumi:"filterId"`
	// The minimum granularity (period granularity) of the relative dates filter.
	MinimumGranularity TemplateTimeGranularityPtrInput `pulumi:"minimumGranularity"`
	// This option determines how null values should be treated when filtering data.
	//
	// - `ALL_VALUES` : Include null values in filtered results.
	// - `NULLS_ONLY` : Only include null values in filtered results.
	// - `NON_NULLS_ONLY` : Exclude null values from filtered results.
	NullOption TemplateFilterNullOptionInput `pulumi:"nullOption"`
	// The parameter whose value should be used for the filter value.
	ParameterName pulumi.StringPtrInput `pulumi:"parameterName"`
	// The range date type of the filter. Choose one of the options below:
	//
	// - `PREVIOUS`
	// - `THIS`
	// - `LAST`
	// - `NOW`
	// - `NEXT`
	RelativeDateType TemplateRelativeDateTypeInput `pulumi:"relativeDateType"`
	// The date value of the filter.
	RelativeDateValue pulumi.Float64PtrInput `pulumi:"relativeDateValue"`
	// The level of time precision that is used to aggregate `DateTime` values.
	TimeGranularity TemplateTimeGranularityInput `pulumi:"timeGranularity"`
}

func (TemplateRelativeDatesFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateRelativeDatesFilter)(nil)).Elem()
}

func (i TemplateRelativeDatesFilterArgs) ToTemplateRelativeDatesFilterOutput() TemplateRelativeDatesFilterOutput {
	return i.ToTemplateRelativeDatesFilterOutputWithContext(context.Background())
}

func (i TemplateRelativeDatesFilterArgs) ToTemplateRelativeDatesFilterOutputWithContext(ctx context.Context) TemplateRelativeDatesFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateRelativeDatesFilterOutput)
}

func (i TemplateRelativeDatesFilterArgs) ToTemplateRelativeDatesFilterPtrOutput() TemplateRelativeDatesFilterPtrOutput {
	return i.ToTemplateRelativeDatesFilterPtrOutputWithContext(context.Background())
}

func (i TemplateRelativeDatesFilterArgs) ToTemplateRelativeDatesFilterPtrOutputWithContext(ctx context.Context) TemplateRelativeDatesFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateRelativeDatesFilterOutput).ToTemplateRelativeDatesFilterPtrOutputWithContext(ctx)
}

// TemplateRelativeDatesFilterPtrInput is an input type that accepts TemplateRelativeDatesFilterArgs, TemplateRelativeDatesFilterPtr and TemplateRelativeDatesFilterPtrOutput values.
// You can construct a concrete instance of `TemplateRelativeDatesFilterPtrInput` via:
//
//	        TemplateRelativeDatesFilterArgs{...}
//
//	or:
//
//	        nil
type TemplateRelativeDatesFilterPtrInput interface {
	pulumi.Input

	ToTemplateRelativeDatesFilterPtrOutput() TemplateRelativeDatesFilterPtrOutput
	ToTemplateRelativeDatesFilterPtrOutputWithContext(context.Context) TemplateRelativeDatesFilterPtrOutput
}

type templateRelativeDatesFilterPtrType TemplateRelativeDatesFilterArgs

func TemplateRelativeDatesFilterPtr(v *TemplateRelativeDatesFilterArgs) TemplateRelativeDatesFilterPtrInput {
	return (*templateRelativeDatesFilterPtrType)(v)
}

func (*templateRelativeDatesFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateRelativeDatesFilter)(nil)).Elem()
}

func (i *templateRelativeDatesFilterPtrType) ToTemplateRelativeDatesFilterPtrOutput() TemplateRelativeDatesFilterPtrOutput {
	return i.ToTemplateRelativeDatesFilterPtrOutputWithContext(context.Background())
}

func (i *templateRelativeDatesFilterPtrType) ToTemplateRelativeDatesFilterPtrOutputWithContext(ctx context.Context) TemplateRelativeDatesFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateRelativeDatesFilterPtrOutput)
}

type TemplateRelativeDatesFilterOutput struct{ *pulumi.OutputState }

func (TemplateRelativeDatesFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateRelativeDatesFilter)(nil)).Elem()
}

func (o TemplateRelativeDatesFilterOutput) ToTemplateRelativeDatesFilterOutput() TemplateRelativeDatesFilterOutput {
	return o
}

func (o TemplateRelativeDatesFilterOutput) ToTemplateRelativeDatesFilterOutputWithContext(ctx context.Context) TemplateRelativeDatesFilterOutput {
	return o
}

func (o TemplateRelativeDatesFilterOutput) ToTemplateRelativeDatesFilterPtrOutput() TemplateRelativeDatesFilterPtrOutput {
	return o.ToTemplateRelativeDatesFilterPtrOutputWithContext(context.Background())
}

func (o TemplateRelativeDatesFilterOutput) ToTemplateRelativeDatesFilterPtrOutputWithContext(ctx context.Context) TemplateRelativeDatesFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateRelativeDatesFilter) *TemplateRelativeDatesFilter {
		return &v
	}).(TemplateRelativeDatesFilterPtrOutput)
}

// The date configuration of the filter.
func (o TemplateRelativeDatesFilterOutput) AnchorDateConfiguration() TemplateAnchorDateConfigurationOutput {
	return o.ApplyT(func(v TemplateRelativeDatesFilter) TemplateAnchorDateConfiguration { return v.AnchorDateConfiguration }).(TemplateAnchorDateConfigurationOutput)
}

// The column that the filter is applied to.
func (o TemplateRelativeDatesFilterOutput) Column() TemplateColumnIdentifierOutput {
	return o.ApplyT(func(v TemplateRelativeDatesFilter) TemplateColumnIdentifier { return v.Column }).(TemplateColumnIdentifierOutput)
}

// The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
func (o TemplateRelativeDatesFilterOutput) DefaultFilterControlConfiguration() TemplateDefaultFilterControlConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateRelativeDatesFilter) *TemplateDefaultFilterControlConfiguration {
		return v.DefaultFilterControlConfiguration
	}).(TemplateDefaultFilterControlConfigurationPtrOutput)
}

// The configuration for the exclude period of the filter.
func (o TemplateRelativeDatesFilterOutput) ExcludePeriodConfiguration() TemplateExcludePeriodConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateRelativeDatesFilter) *TemplateExcludePeriodConfiguration {
		return v.ExcludePeriodConfiguration
	}).(TemplateExcludePeriodConfigurationPtrOutput)
}

// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
func (o TemplateRelativeDatesFilterOutput) FilterId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateRelativeDatesFilter) string { return v.FilterId }).(pulumi.StringOutput)
}

// The minimum granularity (period granularity) of the relative dates filter.
func (o TemplateRelativeDatesFilterOutput) MinimumGranularity() TemplateTimeGranularityPtrOutput {
	return o.ApplyT(func(v TemplateRelativeDatesFilter) *TemplateTimeGranularity { return v.MinimumGranularity }).(TemplateTimeGranularityPtrOutput)
}

// This option determines how null values should be treated when filtering data.
//
// - `ALL_VALUES` : Include null values in filtered results.
// - `NULLS_ONLY` : Only include null values in filtered results.
// - `NON_NULLS_ONLY` : Exclude null values from filtered results.
func (o TemplateRelativeDatesFilterOutput) NullOption() TemplateFilterNullOptionOutput {
	return o.ApplyT(func(v TemplateRelativeDatesFilter) TemplateFilterNullOption { return v.NullOption }).(TemplateFilterNullOptionOutput)
}

// The parameter whose value should be used for the filter value.
func (o TemplateRelativeDatesFilterOutput) ParameterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateRelativeDatesFilter) *string { return v.ParameterName }).(pulumi.StringPtrOutput)
}

// The range date type of the filter. Choose one of the options below:
//
// - `PREVIOUS`
// - `THIS`
// - `LAST`
// - `NOW`
// - `NEXT`
func (o TemplateRelativeDatesFilterOutput) RelativeDateType() TemplateRelativeDateTypeOutput {
	return o.ApplyT(func(v TemplateRelativeDatesFilter) TemplateRelativeDateType { return v.RelativeDateType }).(TemplateRelativeDateTypeOutput)
}

// The date value of the filter.
func (o TemplateRelativeDatesFilterOutput) RelativeDateValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateRelativeDatesFilter) *float64 { return v.RelativeDateValue }).(pulumi.Float64PtrOutput)
}

// The level of time precision that is used to aggregate `DateTime` values.
func (o TemplateRelativeDatesFilterOutput) TimeGranularity() TemplateTimeGranularityOutput {
	return o.ApplyT(func(v TemplateRelativeDatesFilter) TemplateTimeGranularity { return v.TimeGranularity }).(TemplateTimeGranularityOutput)
}

type TemplateRelativeDatesFilterPtrOutput struct{ *pulumi.OutputState }

func (TemplateRelativeDatesFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateRelativeDatesFilter)(nil)).Elem()
}

func (o TemplateRelativeDatesFilterPtrOutput) ToTemplateRelativeDatesFilterPtrOutput() TemplateRelativeDatesFilterPtrOutput {
	return o
}

func (o TemplateRelativeDatesFilterPtrOutput) ToTemplateRelativeDatesFilterPtrOutputWithContext(ctx context.Context) TemplateRelativeDatesFilterPtrOutput {
	return o
}

func (o TemplateRelativeDatesFilterPtrOutput) Elem() TemplateRelativeDatesFilterOutput {
	return o.ApplyT(func(v *TemplateRelativeDatesFilter) TemplateRelativeDatesFilter {
		if v != nil {
			return *v
		}
		var ret TemplateRelativeDatesFilter
		return ret
	}).(TemplateRelativeDatesFilterOutput)
}

// The date configuration of the filter.
func (o TemplateRelativeDatesFilterPtrOutput) AnchorDateConfiguration() TemplateAnchorDateConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateRelativeDatesFilter) *TemplateAnchorDateConfiguration {
		if v == nil {
			return nil
		}
		return &v.AnchorDateConfiguration
	}).(TemplateAnchorDateConfigurationPtrOutput)
}

// The column that the filter is applied to.
func (o TemplateRelativeDatesFilterPtrOutput) Column() TemplateColumnIdentifierPtrOutput {
	return o.ApplyT(func(v *TemplateRelativeDatesFilter) *TemplateColumnIdentifier {
		if v == nil {
			return nil
		}
		return &v.Column
	}).(TemplateColumnIdentifierPtrOutput)
}

// The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
func (o TemplateRelativeDatesFilterPtrOutput) DefaultFilterControlConfiguration() TemplateDefaultFilterControlConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateRelativeDatesFilter) *TemplateDefaultFilterControlConfiguration {
		if v == nil {
			return nil
		}
		return v.DefaultFilterControlConfiguration
	}).(TemplateDefaultFilterControlConfigurationPtrOutput)
}

// The configuration for the exclude period of the filter.
func (o TemplateRelativeDatesFilterPtrOutput) ExcludePeriodConfiguration() TemplateExcludePeriodConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateRelativeDatesFilter) *TemplateExcludePeriodConfiguration {
		if v == nil {
			return nil
		}
		return v.ExcludePeriodConfiguration
	}).(TemplateExcludePeriodConfigurationPtrOutput)
}

// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
func (o TemplateRelativeDatesFilterPtrOutput) FilterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateRelativeDatesFilter) *string {
		if v == nil {
			return nil
		}
		return &v.FilterId
	}).(pulumi.StringPtrOutput)
}

// The minimum granularity (period granularity) of the relative dates filter.
func (o TemplateRelativeDatesFilterPtrOutput) MinimumGranularity() TemplateTimeGranularityPtrOutput {
	return o.ApplyT(func(v *TemplateRelativeDatesFilter) *TemplateTimeGranularity {
		if v == nil {
			return nil
		}
		return v.MinimumGranularity
	}).(TemplateTimeGranularityPtrOutput)
}

// This option determines how null values should be treated when filtering data.
//
// - `ALL_VALUES` : Include null values in filtered results.
// - `NULLS_ONLY` : Only include null values in filtered results.
// - `NON_NULLS_ONLY` : Exclude null values from filtered results.
func (o TemplateRelativeDatesFilterPtrOutput) NullOption() TemplateFilterNullOptionPtrOutput {
	return o.ApplyT(func(v *TemplateRelativeDatesFilter) *TemplateFilterNullOption {
		if v == nil {
			return nil
		}
		return &v.NullOption
	}).(TemplateFilterNullOptionPtrOutput)
}

// The parameter whose value should be used for the filter value.
func (o TemplateRelativeDatesFilterPtrOutput) ParameterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateRelativeDatesFilter) *string {
		if v == nil {
			return nil
		}
		return v.ParameterName
	}).(pulumi.StringPtrOutput)
}

// The range date type of the filter. Choose one of the options below:
//
// - `PREVIOUS`
// - `THIS`
// - `LAST`
// - `NOW`
// - `NEXT`
func (o TemplateRelativeDatesFilterPtrOutput) RelativeDateType() TemplateRelativeDateTypePtrOutput {
	return o.ApplyT(func(v *TemplateRelativeDatesFilter) *TemplateRelativeDateType {
		if v == nil {
			return nil
		}
		return &v.RelativeDateType
	}).(TemplateRelativeDateTypePtrOutput)
}

// The date value of the filter.
func (o TemplateRelativeDatesFilterPtrOutput) RelativeDateValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateRelativeDatesFilter) *float64 {
		if v == nil {
			return nil
		}
		return v.RelativeDateValue
	}).(pulumi.Float64PtrOutput)
}

// The level of time precision that is used to aggregate `DateTime` values.
func (o TemplateRelativeDatesFilterPtrOutput) TimeGranularity() TemplateTimeGranularityPtrOutput {
	return o.ApplyT(func(v *TemplateRelativeDatesFilter) *TemplateTimeGranularity {
		if v == nil {
			return nil
		}
		return &v.TimeGranularity
	}).(TemplateTimeGranularityPtrOutput)
}

// <p>Permission for the resource.</p>
type TemplateResourcePermission struct {
	// <p>The IAM action to grant or revoke permissions on.</p>
	Actions []string `pulumi:"actions"`
	// <p>The Amazon Resource Name (ARN) of the principal. This can be one of the
	//             following:</p>
	//          <ul>
	//             <li>
	//                <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p>
	//             </li>
	//             <li>
	//                <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p>
	//             </li>
	//             <li>
	//                <p>The ARN of an Amazon Web Services account root: This is an IAM ARN rather than a QuickSight
	//                     ARN. Use this option only to share resources (templates) across Amazon Web Services accounts.
	//                     (This is less common.) </p>
	//             </li>
	//          </ul>
	Principal string `pulumi:"principal"`
}

// TemplateResourcePermissionInput is an input type that accepts TemplateResourcePermissionArgs and TemplateResourcePermissionOutput values.
// You can construct a concrete instance of `TemplateResourcePermissionInput` via:
//
//	TemplateResourcePermissionArgs{...}
type TemplateResourcePermissionInput interface {
	pulumi.Input

	ToTemplateResourcePermissionOutput() TemplateResourcePermissionOutput
	ToTemplateResourcePermissionOutputWithContext(context.Context) TemplateResourcePermissionOutput
}

// <p>Permission for the resource.</p>
type TemplateResourcePermissionArgs struct {
	// <p>The IAM action to grant or revoke permissions on.</p>
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// <p>The Amazon Resource Name (ARN) of the principal. This can be one of the
	//             following:</p>
	//          <ul>
	//             <li>
	//                <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p>
	//             </li>
	//             <li>
	//                <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p>
	//             </li>
	//             <li>
	//                <p>The ARN of an Amazon Web Services account root: This is an IAM ARN rather than a QuickSight
	//                     ARN. Use this option only to share resources (templates) across Amazon Web Services accounts.
	//                     (This is less common.) </p>
	//             </li>
	//          </ul>
	Principal pulumi.StringInput `pulumi:"principal"`
}

func (TemplateResourcePermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateResourcePermission)(nil)).Elem()
}

func (i TemplateResourcePermissionArgs) ToTemplateResourcePermissionOutput() TemplateResourcePermissionOutput {
	return i.ToTemplateResourcePermissionOutputWithContext(context.Background())
}

func (i TemplateResourcePermissionArgs) ToTemplateResourcePermissionOutputWithContext(ctx context.Context) TemplateResourcePermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateResourcePermissionOutput)
}

// TemplateResourcePermissionArrayInput is an input type that accepts TemplateResourcePermissionArray and TemplateResourcePermissionArrayOutput values.
// You can construct a concrete instance of `TemplateResourcePermissionArrayInput` via:
//
//	TemplateResourcePermissionArray{ TemplateResourcePermissionArgs{...} }
type TemplateResourcePermissionArrayInput interface {
	pulumi.Input

	ToTemplateResourcePermissionArrayOutput() TemplateResourcePermissionArrayOutput
	ToTemplateResourcePermissionArrayOutputWithContext(context.Context) TemplateResourcePermissionArrayOutput
}

type TemplateResourcePermissionArray []TemplateResourcePermissionInput

func (TemplateResourcePermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateResourcePermission)(nil)).Elem()
}

func (i TemplateResourcePermissionArray) ToTemplateResourcePermissionArrayOutput() TemplateResourcePermissionArrayOutput {
	return i.ToTemplateResourcePermissionArrayOutputWithContext(context.Background())
}

func (i TemplateResourcePermissionArray) ToTemplateResourcePermissionArrayOutputWithContext(ctx context.Context) TemplateResourcePermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateResourcePermissionArrayOutput)
}

// <p>Permission for the resource.</p>
type TemplateResourcePermissionOutput struct{ *pulumi.OutputState }

func (TemplateResourcePermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateResourcePermission)(nil)).Elem()
}

func (o TemplateResourcePermissionOutput) ToTemplateResourcePermissionOutput() TemplateResourcePermissionOutput {
	return o
}

func (o TemplateResourcePermissionOutput) ToTemplateResourcePermissionOutputWithContext(ctx context.Context) TemplateResourcePermissionOutput {
	return o
}

// <p>The IAM action to grant or revoke permissions on.</p>
func (o TemplateResourcePermissionOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TemplateResourcePermission) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// <p>The Amazon Resource Name (ARN) of the principal. This can be one of the
//
//	   following:</p>
//	<ul>
//	   <li>
//	      <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p>
//	   </li>
//	   <li>
//	      <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p>
//	   </li>
//	   <li>
//	      <p>The ARN of an Amazon Web Services account root: This is an IAM ARN rather than a QuickSight
//	           ARN. Use this option only to share resources (templates) across Amazon Web Services accounts.
//	           (This is less common.) </p>
//	   </li>
//	</ul>
func (o TemplateResourcePermissionOutput) Principal() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateResourcePermission) string { return v.Principal }).(pulumi.StringOutput)
}

type TemplateResourcePermissionArrayOutput struct{ *pulumi.OutputState }

func (TemplateResourcePermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateResourcePermission)(nil)).Elem()
}

func (o TemplateResourcePermissionArrayOutput) ToTemplateResourcePermissionArrayOutput() TemplateResourcePermissionArrayOutput {
	return o
}

func (o TemplateResourcePermissionArrayOutput) ToTemplateResourcePermissionArrayOutputWithContext(ctx context.Context) TemplateResourcePermissionArrayOutput {
	return o
}

func (o TemplateResourcePermissionArrayOutput) Index(i pulumi.IntInput) TemplateResourcePermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateResourcePermission {
		return vs[0].([]TemplateResourcePermission)[vs[1].(int)]
	}).(TemplateResourcePermissionOutput)
}

type TemplateRollingDateConfiguration struct {
	// The data set that is used in the rolling date configuration.
	DataSetIdentifier *string `pulumi:"dataSetIdentifier"`
	// The expression of the rolling date configuration.
	Expression string `pulumi:"expression"`
}

// TemplateRollingDateConfigurationInput is an input type that accepts TemplateRollingDateConfigurationArgs and TemplateRollingDateConfigurationOutput values.
// You can construct a concrete instance of `TemplateRollingDateConfigurationInput` via:
//
//	TemplateRollingDateConfigurationArgs{...}
type TemplateRollingDateConfigurationInput interface {
	pulumi.Input

	ToTemplateRollingDateConfigurationOutput() TemplateRollingDateConfigurationOutput
	ToTemplateRollingDateConfigurationOutputWithContext(context.Context) TemplateRollingDateConfigurationOutput
}

type TemplateRollingDateConfigurationArgs struct {
	// The data set that is used in the rolling date configuration.
	DataSetIdentifier pulumi.StringPtrInput `pulumi:"dataSetIdentifier"`
	// The expression of the rolling date configuration.
	Expression pulumi.StringInput `pulumi:"expression"`
}

func (TemplateRollingDateConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateRollingDateConfiguration)(nil)).Elem()
}

func (i TemplateRollingDateConfigurationArgs) ToTemplateRollingDateConfigurationOutput() TemplateRollingDateConfigurationOutput {
	return i.ToTemplateRollingDateConfigurationOutputWithContext(context.Background())
}

func (i TemplateRollingDateConfigurationArgs) ToTemplateRollingDateConfigurationOutputWithContext(ctx context.Context) TemplateRollingDateConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateRollingDateConfigurationOutput)
}

func (i TemplateRollingDateConfigurationArgs) ToTemplateRollingDateConfigurationPtrOutput() TemplateRollingDateConfigurationPtrOutput {
	return i.ToTemplateRollingDateConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateRollingDateConfigurationArgs) ToTemplateRollingDateConfigurationPtrOutputWithContext(ctx context.Context) TemplateRollingDateConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateRollingDateConfigurationOutput).ToTemplateRollingDateConfigurationPtrOutputWithContext(ctx)
}

// TemplateRollingDateConfigurationPtrInput is an input type that accepts TemplateRollingDateConfigurationArgs, TemplateRollingDateConfigurationPtr and TemplateRollingDateConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateRollingDateConfigurationPtrInput` via:
//
//	        TemplateRollingDateConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateRollingDateConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateRollingDateConfigurationPtrOutput() TemplateRollingDateConfigurationPtrOutput
	ToTemplateRollingDateConfigurationPtrOutputWithContext(context.Context) TemplateRollingDateConfigurationPtrOutput
}

type templateRollingDateConfigurationPtrType TemplateRollingDateConfigurationArgs

func TemplateRollingDateConfigurationPtr(v *TemplateRollingDateConfigurationArgs) TemplateRollingDateConfigurationPtrInput {
	return (*templateRollingDateConfigurationPtrType)(v)
}

func (*templateRollingDateConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateRollingDateConfiguration)(nil)).Elem()
}

func (i *templateRollingDateConfigurationPtrType) ToTemplateRollingDateConfigurationPtrOutput() TemplateRollingDateConfigurationPtrOutput {
	return i.ToTemplateRollingDateConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateRollingDateConfigurationPtrType) ToTemplateRollingDateConfigurationPtrOutputWithContext(ctx context.Context) TemplateRollingDateConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateRollingDateConfigurationPtrOutput)
}

type TemplateRollingDateConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateRollingDateConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateRollingDateConfiguration)(nil)).Elem()
}

func (o TemplateRollingDateConfigurationOutput) ToTemplateRollingDateConfigurationOutput() TemplateRollingDateConfigurationOutput {
	return o
}

func (o TemplateRollingDateConfigurationOutput) ToTemplateRollingDateConfigurationOutputWithContext(ctx context.Context) TemplateRollingDateConfigurationOutput {
	return o
}

func (o TemplateRollingDateConfigurationOutput) ToTemplateRollingDateConfigurationPtrOutput() TemplateRollingDateConfigurationPtrOutput {
	return o.ToTemplateRollingDateConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateRollingDateConfigurationOutput) ToTemplateRollingDateConfigurationPtrOutputWithContext(ctx context.Context) TemplateRollingDateConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateRollingDateConfiguration) *TemplateRollingDateConfiguration {
		return &v
	}).(TemplateRollingDateConfigurationPtrOutput)
}

// The data set that is used in the rolling date configuration.
func (o TemplateRollingDateConfigurationOutput) DataSetIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateRollingDateConfiguration) *string { return v.DataSetIdentifier }).(pulumi.StringPtrOutput)
}

// The expression of the rolling date configuration.
func (o TemplateRollingDateConfigurationOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateRollingDateConfiguration) string { return v.Expression }).(pulumi.StringOutput)
}

type TemplateRollingDateConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateRollingDateConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateRollingDateConfiguration)(nil)).Elem()
}

func (o TemplateRollingDateConfigurationPtrOutput) ToTemplateRollingDateConfigurationPtrOutput() TemplateRollingDateConfigurationPtrOutput {
	return o
}

func (o TemplateRollingDateConfigurationPtrOutput) ToTemplateRollingDateConfigurationPtrOutputWithContext(ctx context.Context) TemplateRollingDateConfigurationPtrOutput {
	return o
}

func (o TemplateRollingDateConfigurationPtrOutput) Elem() TemplateRollingDateConfigurationOutput {
	return o.ApplyT(func(v *TemplateRollingDateConfiguration) TemplateRollingDateConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateRollingDateConfiguration
		return ret
	}).(TemplateRollingDateConfigurationOutput)
}

// The data set that is used in the rolling date configuration.
func (o TemplateRollingDateConfigurationPtrOutput) DataSetIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateRollingDateConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.DataSetIdentifier
	}).(pulumi.StringPtrOutput)
}

// The expression of the rolling date configuration.
func (o TemplateRollingDateConfigurationPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateRollingDateConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

type TemplateRowAlternateColorOptions struct {
	// Determines the list of row alternate colors.
	RowAlternateColors []string `pulumi:"rowAlternateColors"`
	// Determines the widget status.
	Status *TemplateWidgetStatus `pulumi:"status"`
	// The primary background color options for alternate rows.
	UsePrimaryBackgroundColor *TemplateWidgetStatus `pulumi:"usePrimaryBackgroundColor"`
}

// TemplateRowAlternateColorOptionsInput is an input type that accepts TemplateRowAlternateColorOptionsArgs and TemplateRowAlternateColorOptionsOutput values.
// You can construct a concrete instance of `TemplateRowAlternateColorOptionsInput` via:
//
//	TemplateRowAlternateColorOptionsArgs{...}
type TemplateRowAlternateColorOptionsInput interface {
	pulumi.Input

	ToTemplateRowAlternateColorOptionsOutput() TemplateRowAlternateColorOptionsOutput
	ToTemplateRowAlternateColorOptionsOutputWithContext(context.Context) TemplateRowAlternateColorOptionsOutput
}

type TemplateRowAlternateColorOptionsArgs struct {
	// Determines the list of row alternate colors.
	RowAlternateColors pulumi.StringArrayInput `pulumi:"rowAlternateColors"`
	// Determines the widget status.
	Status TemplateWidgetStatusPtrInput `pulumi:"status"`
	// The primary background color options for alternate rows.
	UsePrimaryBackgroundColor TemplateWidgetStatusPtrInput `pulumi:"usePrimaryBackgroundColor"`
}

func (TemplateRowAlternateColorOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateRowAlternateColorOptions)(nil)).Elem()
}

func (i TemplateRowAlternateColorOptionsArgs) ToTemplateRowAlternateColorOptionsOutput() TemplateRowAlternateColorOptionsOutput {
	return i.ToTemplateRowAlternateColorOptionsOutputWithContext(context.Background())
}

func (i TemplateRowAlternateColorOptionsArgs) ToTemplateRowAlternateColorOptionsOutputWithContext(ctx context.Context) TemplateRowAlternateColorOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateRowAlternateColorOptionsOutput)
}

func (i TemplateRowAlternateColorOptionsArgs) ToTemplateRowAlternateColorOptionsPtrOutput() TemplateRowAlternateColorOptionsPtrOutput {
	return i.ToTemplateRowAlternateColorOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateRowAlternateColorOptionsArgs) ToTemplateRowAlternateColorOptionsPtrOutputWithContext(ctx context.Context) TemplateRowAlternateColorOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateRowAlternateColorOptionsOutput).ToTemplateRowAlternateColorOptionsPtrOutputWithContext(ctx)
}

// TemplateRowAlternateColorOptionsPtrInput is an input type that accepts TemplateRowAlternateColorOptionsArgs, TemplateRowAlternateColorOptionsPtr and TemplateRowAlternateColorOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateRowAlternateColorOptionsPtrInput` via:
//
//	        TemplateRowAlternateColorOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateRowAlternateColorOptionsPtrInput interface {
	pulumi.Input

	ToTemplateRowAlternateColorOptionsPtrOutput() TemplateRowAlternateColorOptionsPtrOutput
	ToTemplateRowAlternateColorOptionsPtrOutputWithContext(context.Context) TemplateRowAlternateColorOptionsPtrOutput
}

type templateRowAlternateColorOptionsPtrType TemplateRowAlternateColorOptionsArgs

func TemplateRowAlternateColorOptionsPtr(v *TemplateRowAlternateColorOptionsArgs) TemplateRowAlternateColorOptionsPtrInput {
	return (*templateRowAlternateColorOptionsPtrType)(v)
}

func (*templateRowAlternateColorOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateRowAlternateColorOptions)(nil)).Elem()
}

func (i *templateRowAlternateColorOptionsPtrType) ToTemplateRowAlternateColorOptionsPtrOutput() TemplateRowAlternateColorOptionsPtrOutput {
	return i.ToTemplateRowAlternateColorOptionsPtrOutputWithContext(context.Background())
}

func (i *templateRowAlternateColorOptionsPtrType) ToTemplateRowAlternateColorOptionsPtrOutputWithContext(ctx context.Context) TemplateRowAlternateColorOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateRowAlternateColorOptionsPtrOutput)
}

type TemplateRowAlternateColorOptionsOutput struct{ *pulumi.OutputState }

func (TemplateRowAlternateColorOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateRowAlternateColorOptions)(nil)).Elem()
}

func (o TemplateRowAlternateColorOptionsOutput) ToTemplateRowAlternateColorOptionsOutput() TemplateRowAlternateColorOptionsOutput {
	return o
}

func (o TemplateRowAlternateColorOptionsOutput) ToTemplateRowAlternateColorOptionsOutputWithContext(ctx context.Context) TemplateRowAlternateColorOptionsOutput {
	return o
}

func (o TemplateRowAlternateColorOptionsOutput) ToTemplateRowAlternateColorOptionsPtrOutput() TemplateRowAlternateColorOptionsPtrOutput {
	return o.ToTemplateRowAlternateColorOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateRowAlternateColorOptionsOutput) ToTemplateRowAlternateColorOptionsPtrOutputWithContext(ctx context.Context) TemplateRowAlternateColorOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateRowAlternateColorOptions) *TemplateRowAlternateColorOptions {
		return &v
	}).(TemplateRowAlternateColorOptionsPtrOutput)
}

// Determines the list of row alternate colors.
func (o TemplateRowAlternateColorOptionsOutput) RowAlternateColors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TemplateRowAlternateColorOptions) []string { return v.RowAlternateColors }).(pulumi.StringArrayOutput)
}

// Determines the widget status.
func (o TemplateRowAlternateColorOptionsOutput) Status() TemplateWidgetStatusPtrOutput {
	return o.ApplyT(func(v TemplateRowAlternateColorOptions) *TemplateWidgetStatus { return v.Status }).(TemplateWidgetStatusPtrOutput)
}

// The primary background color options for alternate rows.
func (o TemplateRowAlternateColorOptionsOutput) UsePrimaryBackgroundColor() TemplateWidgetStatusPtrOutput {
	return o.ApplyT(func(v TemplateRowAlternateColorOptions) *TemplateWidgetStatus { return v.UsePrimaryBackgroundColor }).(TemplateWidgetStatusPtrOutput)
}

type TemplateRowAlternateColorOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateRowAlternateColorOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateRowAlternateColorOptions)(nil)).Elem()
}

func (o TemplateRowAlternateColorOptionsPtrOutput) ToTemplateRowAlternateColorOptionsPtrOutput() TemplateRowAlternateColorOptionsPtrOutput {
	return o
}

func (o TemplateRowAlternateColorOptionsPtrOutput) ToTemplateRowAlternateColorOptionsPtrOutputWithContext(ctx context.Context) TemplateRowAlternateColorOptionsPtrOutput {
	return o
}

func (o TemplateRowAlternateColorOptionsPtrOutput) Elem() TemplateRowAlternateColorOptionsOutput {
	return o.ApplyT(func(v *TemplateRowAlternateColorOptions) TemplateRowAlternateColorOptions {
		if v != nil {
			return *v
		}
		var ret TemplateRowAlternateColorOptions
		return ret
	}).(TemplateRowAlternateColorOptionsOutput)
}

// Determines the list of row alternate colors.
func (o TemplateRowAlternateColorOptionsPtrOutput) RowAlternateColors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TemplateRowAlternateColorOptions) []string {
		if v == nil {
			return nil
		}
		return v.RowAlternateColors
	}).(pulumi.StringArrayOutput)
}

// Determines the widget status.
func (o TemplateRowAlternateColorOptionsPtrOutput) Status() TemplateWidgetStatusPtrOutput {
	return o.ApplyT(func(v *TemplateRowAlternateColorOptions) *TemplateWidgetStatus {
		if v == nil {
			return nil
		}
		return v.Status
	}).(TemplateWidgetStatusPtrOutput)
}

// The primary background color options for alternate rows.
func (o TemplateRowAlternateColorOptionsPtrOutput) UsePrimaryBackgroundColor() TemplateWidgetStatusPtrOutput {
	return o.ApplyT(func(v *TemplateRowAlternateColorOptions) *TemplateWidgetStatus {
		if v == nil {
			return nil
		}
		return v.UsePrimaryBackgroundColor
	}).(TemplateWidgetStatusPtrOutput)
}

type TemplateSameSheetTargetVisualConfiguration struct {
	// The options that choose the target visual in the same sheet.
	//
	// Valid values are defined as follows:
	//
	// - `ALL_VISUALS` : Applies the filter operation to all visuals in the same sheet.
	TargetVisualOptions *TemplateTargetVisualOptions `pulumi:"targetVisualOptions"`
	// A list of the target visual IDs that are located in the same sheet of the analysis.
	TargetVisuals []string `pulumi:"targetVisuals"`
}

// TemplateSameSheetTargetVisualConfigurationInput is an input type that accepts TemplateSameSheetTargetVisualConfigurationArgs and TemplateSameSheetTargetVisualConfigurationOutput values.
// You can construct a concrete instance of `TemplateSameSheetTargetVisualConfigurationInput` via:
//
//	TemplateSameSheetTargetVisualConfigurationArgs{...}
type TemplateSameSheetTargetVisualConfigurationInput interface {
	pulumi.Input

	ToTemplateSameSheetTargetVisualConfigurationOutput() TemplateSameSheetTargetVisualConfigurationOutput
	ToTemplateSameSheetTargetVisualConfigurationOutputWithContext(context.Context) TemplateSameSheetTargetVisualConfigurationOutput
}

type TemplateSameSheetTargetVisualConfigurationArgs struct {
	// The options that choose the target visual in the same sheet.
	//
	// Valid values are defined as follows:
	//
	// - `ALL_VISUALS` : Applies the filter operation to all visuals in the same sheet.
	TargetVisualOptions TemplateTargetVisualOptionsPtrInput `pulumi:"targetVisualOptions"`
	// A list of the target visual IDs that are located in the same sheet of the analysis.
	TargetVisuals pulumi.StringArrayInput `pulumi:"targetVisuals"`
}

func (TemplateSameSheetTargetVisualConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSameSheetTargetVisualConfiguration)(nil)).Elem()
}

func (i TemplateSameSheetTargetVisualConfigurationArgs) ToTemplateSameSheetTargetVisualConfigurationOutput() TemplateSameSheetTargetVisualConfigurationOutput {
	return i.ToTemplateSameSheetTargetVisualConfigurationOutputWithContext(context.Background())
}

func (i TemplateSameSheetTargetVisualConfigurationArgs) ToTemplateSameSheetTargetVisualConfigurationOutputWithContext(ctx context.Context) TemplateSameSheetTargetVisualConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSameSheetTargetVisualConfigurationOutput)
}

func (i TemplateSameSheetTargetVisualConfigurationArgs) ToTemplateSameSheetTargetVisualConfigurationPtrOutput() TemplateSameSheetTargetVisualConfigurationPtrOutput {
	return i.ToTemplateSameSheetTargetVisualConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateSameSheetTargetVisualConfigurationArgs) ToTemplateSameSheetTargetVisualConfigurationPtrOutputWithContext(ctx context.Context) TemplateSameSheetTargetVisualConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSameSheetTargetVisualConfigurationOutput).ToTemplateSameSheetTargetVisualConfigurationPtrOutputWithContext(ctx)
}

// TemplateSameSheetTargetVisualConfigurationPtrInput is an input type that accepts TemplateSameSheetTargetVisualConfigurationArgs, TemplateSameSheetTargetVisualConfigurationPtr and TemplateSameSheetTargetVisualConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateSameSheetTargetVisualConfigurationPtrInput` via:
//
//	        TemplateSameSheetTargetVisualConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateSameSheetTargetVisualConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateSameSheetTargetVisualConfigurationPtrOutput() TemplateSameSheetTargetVisualConfigurationPtrOutput
	ToTemplateSameSheetTargetVisualConfigurationPtrOutputWithContext(context.Context) TemplateSameSheetTargetVisualConfigurationPtrOutput
}

type templateSameSheetTargetVisualConfigurationPtrType TemplateSameSheetTargetVisualConfigurationArgs

func TemplateSameSheetTargetVisualConfigurationPtr(v *TemplateSameSheetTargetVisualConfigurationArgs) TemplateSameSheetTargetVisualConfigurationPtrInput {
	return (*templateSameSheetTargetVisualConfigurationPtrType)(v)
}

func (*templateSameSheetTargetVisualConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSameSheetTargetVisualConfiguration)(nil)).Elem()
}

func (i *templateSameSheetTargetVisualConfigurationPtrType) ToTemplateSameSheetTargetVisualConfigurationPtrOutput() TemplateSameSheetTargetVisualConfigurationPtrOutput {
	return i.ToTemplateSameSheetTargetVisualConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateSameSheetTargetVisualConfigurationPtrType) ToTemplateSameSheetTargetVisualConfigurationPtrOutputWithContext(ctx context.Context) TemplateSameSheetTargetVisualConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSameSheetTargetVisualConfigurationPtrOutput)
}

type TemplateSameSheetTargetVisualConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateSameSheetTargetVisualConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSameSheetTargetVisualConfiguration)(nil)).Elem()
}

func (o TemplateSameSheetTargetVisualConfigurationOutput) ToTemplateSameSheetTargetVisualConfigurationOutput() TemplateSameSheetTargetVisualConfigurationOutput {
	return o
}

func (o TemplateSameSheetTargetVisualConfigurationOutput) ToTemplateSameSheetTargetVisualConfigurationOutputWithContext(ctx context.Context) TemplateSameSheetTargetVisualConfigurationOutput {
	return o
}

func (o TemplateSameSheetTargetVisualConfigurationOutput) ToTemplateSameSheetTargetVisualConfigurationPtrOutput() TemplateSameSheetTargetVisualConfigurationPtrOutput {
	return o.ToTemplateSameSheetTargetVisualConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateSameSheetTargetVisualConfigurationOutput) ToTemplateSameSheetTargetVisualConfigurationPtrOutputWithContext(ctx context.Context) TemplateSameSheetTargetVisualConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateSameSheetTargetVisualConfiguration) *TemplateSameSheetTargetVisualConfiguration {
		return &v
	}).(TemplateSameSheetTargetVisualConfigurationPtrOutput)
}

// The options that choose the target visual in the same sheet.
//
// Valid values are defined as follows:
//
// - `ALL_VISUALS` : Applies the filter operation to all visuals in the same sheet.
func (o TemplateSameSheetTargetVisualConfigurationOutput) TargetVisualOptions() TemplateTargetVisualOptionsPtrOutput {
	return o.ApplyT(func(v TemplateSameSheetTargetVisualConfiguration) *TemplateTargetVisualOptions {
		return v.TargetVisualOptions
	}).(TemplateTargetVisualOptionsPtrOutput)
}

// A list of the target visual IDs that are located in the same sheet of the analysis.
func (o TemplateSameSheetTargetVisualConfigurationOutput) TargetVisuals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TemplateSameSheetTargetVisualConfiguration) []string { return v.TargetVisuals }).(pulumi.StringArrayOutput)
}

type TemplateSameSheetTargetVisualConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateSameSheetTargetVisualConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSameSheetTargetVisualConfiguration)(nil)).Elem()
}

func (o TemplateSameSheetTargetVisualConfigurationPtrOutput) ToTemplateSameSheetTargetVisualConfigurationPtrOutput() TemplateSameSheetTargetVisualConfigurationPtrOutput {
	return o
}

func (o TemplateSameSheetTargetVisualConfigurationPtrOutput) ToTemplateSameSheetTargetVisualConfigurationPtrOutputWithContext(ctx context.Context) TemplateSameSheetTargetVisualConfigurationPtrOutput {
	return o
}

func (o TemplateSameSheetTargetVisualConfigurationPtrOutput) Elem() TemplateSameSheetTargetVisualConfigurationOutput {
	return o.ApplyT(func(v *TemplateSameSheetTargetVisualConfiguration) TemplateSameSheetTargetVisualConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateSameSheetTargetVisualConfiguration
		return ret
	}).(TemplateSameSheetTargetVisualConfigurationOutput)
}

// The options that choose the target visual in the same sheet.
//
// Valid values are defined as follows:
//
// - `ALL_VISUALS` : Applies the filter operation to all visuals in the same sheet.
func (o TemplateSameSheetTargetVisualConfigurationPtrOutput) TargetVisualOptions() TemplateTargetVisualOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateSameSheetTargetVisualConfiguration) *TemplateTargetVisualOptions {
		if v == nil {
			return nil
		}
		return v.TargetVisualOptions
	}).(TemplateTargetVisualOptionsPtrOutput)
}

// A list of the target visual IDs that are located in the same sheet of the analysis.
func (o TemplateSameSheetTargetVisualConfigurationPtrOutput) TargetVisuals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TemplateSameSheetTargetVisualConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.TargetVisuals
	}).(pulumi.StringArrayOutput)
}

type TemplateSankeyDiagramAggregatedFieldWells struct {
	// The destination field wells of a sankey diagram.
	Destination []TemplateDimensionField `pulumi:"destination"`
	// The source field wells of a sankey diagram.
	Source []TemplateDimensionField `pulumi:"source"`
	// The weight field wells of a sankey diagram.
	Weight []TemplateMeasureField `pulumi:"weight"`
}

// TemplateSankeyDiagramAggregatedFieldWellsInput is an input type that accepts TemplateSankeyDiagramAggregatedFieldWellsArgs and TemplateSankeyDiagramAggregatedFieldWellsOutput values.
// You can construct a concrete instance of `TemplateSankeyDiagramAggregatedFieldWellsInput` via:
//
//	TemplateSankeyDiagramAggregatedFieldWellsArgs{...}
type TemplateSankeyDiagramAggregatedFieldWellsInput interface {
	pulumi.Input

	ToTemplateSankeyDiagramAggregatedFieldWellsOutput() TemplateSankeyDiagramAggregatedFieldWellsOutput
	ToTemplateSankeyDiagramAggregatedFieldWellsOutputWithContext(context.Context) TemplateSankeyDiagramAggregatedFieldWellsOutput
}

type TemplateSankeyDiagramAggregatedFieldWellsArgs struct {
	// The destination field wells of a sankey diagram.
	Destination TemplateDimensionFieldArrayInput `pulumi:"destination"`
	// The source field wells of a sankey diagram.
	Source TemplateDimensionFieldArrayInput `pulumi:"source"`
	// The weight field wells of a sankey diagram.
	Weight TemplateMeasureFieldArrayInput `pulumi:"weight"`
}

func (TemplateSankeyDiagramAggregatedFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSankeyDiagramAggregatedFieldWells)(nil)).Elem()
}

func (i TemplateSankeyDiagramAggregatedFieldWellsArgs) ToTemplateSankeyDiagramAggregatedFieldWellsOutput() TemplateSankeyDiagramAggregatedFieldWellsOutput {
	return i.ToTemplateSankeyDiagramAggregatedFieldWellsOutputWithContext(context.Background())
}

func (i TemplateSankeyDiagramAggregatedFieldWellsArgs) ToTemplateSankeyDiagramAggregatedFieldWellsOutputWithContext(ctx context.Context) TemplateSankeyDiagramAggregatedFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSankeyDiagramAggregatedFieldWellsOutput)
}

func (i TemplateSankeyDiagramAggregatedFieldWellsArgs) ToTemplateSankeyDiagramAggregatedFieldWellsPtrOutput() TemplateSankeyDiagramAggregatedFieldWellsPtrOutput {
	return i.ToTemplateSankeyDiagramAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i TemplateSankeyDiagramAggregatedFieldWellsArgs) ToTemplateSankeyDiagramAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateSankeyDiagramAggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSankeyDiagramAggregatedFieldWellsOutput).ToTemplateSankeyDiagramAggregatedFieldWellsPtrOutputWithContext(ctx)
}

// TemplateSankeyDiagramAggregatedFieldWellsPtrInput is an input type that accepts TemplateSankeyDiagramAggregatedFieldWellsArgs, TemplateSankeyDiagramAggregatedFieldWellsPtr and TemplateSankeyDiagramAggregatedFieldWellsPtrOutput values.
// You can construct a concrete instance of `TemplateSankeyDiagramAggregatedFieldWellsPtrInput` via:
//
//	        TemplateSankeyDiagramAggregatedFieldWellsArgs{...}
//
//	or:
//
//	        nil
type TemplateSankeyDiagramAggregatedFieldWellsPtrInput interface {
	pulumi.Input

	ToTemplateSankeyDiagramAggregatedFieldWellsPtrOutput() TemplateSankeyDiagramAggregatedFieldWellsPtrOutput
	ToTemplateSankeyDiagramAggregatedFieldWellsPtrOutputWithContext(context.Context) TemplateSankeyDiagramAggregatedFieldWellsPtrOutput
}

type templateSankeyDiagramAggregatedFieldWellsPtrType TemplateSankeyDiagramAggregatedFieldWellsArgs

func TemplateSankeyDiagramAggregatedFieldWellsPtr(v *TemplateSankeyDiagramAggregatedFieldWellsArgs) TemplateSankeyDiagramAggregatedFieldWellsPtrInput {
	return (*templateSankeyDiagramAggregatedFieldWellsPtrType)(v)
}

func (*templateSankeyDiagramAggregatedFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSankeyDiagramAggregatedFieldWells)(nil)).Elem()
}

func (i *templateSankeyDiagramAggregatedFieldWellsPtrType) ToTemplateSankeyDiagramAggregatedFieldWellsPtrOutput() TemplateSankeyDiagramAggregatedFieldWellsPtrOutput {
	return i.ToTemplateSankeyDiagramAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i *templateSankeyDiagramAggregatedFieldWellsPtrType) ToTemplateSankeyDiagramAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateSankeyDiagramAggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSankeyDiagramAggregatedFieldWellsPtrOutput)
}

type TemplateSankeyDiagramAggregatedFieldWellsOutput struct{ *pulumi.OutputState }

func (TemplateSankeyDiagramAggregatedFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSankeyDiagramAggregatedFieldWells)(nil)).Elem()
}

func (o TemplateSankeyDiagramAggregatedFieldWellsOutput) ToTemplateSankeyDiagramAggregatedFieldWellsOutput() TemplateSankeyDiagramAggregatedFieldWellsOutput {
	return o
}

func (o TemplateSankeyDiagramAggregatedFieldWellsOutput) ToTemplateSankeyDiagramAggregatedFieldWellsOutputWithContext(ctx context.Context) TemplateSankeyDiagramAggregatedFieldWellsOutput {
	return o
}

func (o TemplateSankeyDiagramAggregatedFieldWellsOutput) ToTemplateSankeyDiagramAggregatedFieldWellsPtrOutput() TemplateSankeyDiagramAggregatedFieldWellsPtrOutput {
	return o.ToTemplateSankeyDiagramAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (o TemplateSankeyDiagramAggregatedFieldWellsOutput) ToTemplateSankeyDiagramAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateSankeyDiagramAggregatedFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateSankeyDiagramAggregatedFieldWells) *TemplateSankeyDiagramAggregatedFieldWells {
		return &v
	}).(TemplateSankeyDiagramAggregatedFieldWellsPtrOutput)
}

// The destination field wells of a sankey diagram.
func (o TemplateSankeyDiagramAggregatedFieldWellsOutput) Destination() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v TemplateSankeyDiagramAggregatedFieldWells) []TemplateDimensionField { return v.Destination }).(TemplateDimensionFieldArrayOutput)
}

// The source field wells of a sankey diagram.
func (o TemplateSankeyDiagramAggregatedFieldWellsOutput) Source() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v TemplateSankeyDiagramAggregatedFieldWells) []TemplateDimensionField { return v.Source }).(TemplateDimensionFieldArrayOutput)
}

// The weight field wells of a sankey diagram.
func (o TemplateSankeyDiagramAggregatedFieldWellsOutput) Weight() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v TemplateSankeyDiagramAggregatedFieldWells) []TemplateMeasureField { return v.Weight }).(TemplateMeasureFieldArrayOutput)
}

type TemplateSankeyDiagramAggregatedFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (TemplateSankeyDiagramAggregatedFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSankeyDiagramAggregatedFieldWells)(nil)).Elem()
}

func (o TemplateSankeyDiagramAggregatedFieldWellsPtrOutput) ToTemplateSankeyDiagramAggregatedFieldWellsPtrOutput() TemplateSankeyDiagramAggregatedFieldWellsPtrOutput {
	return o
}

func (o TemplateSankeyDiagramAggregatedFieldWellsPtrOutput) ToTemplateSankeyDiagramAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateSankeyDiagramAggregatedFieldWellsPtrOutput {
	return o
}

func (o TemplateSankeyDiagramAggregatedFieldWellsPtrOutput) Elem() TemplateSankeyDiagramAggregatedFieldWellsOutput {
	return o.ApplyT(func(v *TemplateSankeyDiagramAggregatedFieldWells) TemplateSankeyDiagramAggregatedFieldWells {
		if v != nil {
			return *v
		}
		var ret TemplateSankeyDiagramAggregatedFieldWells
		return ret
	}).(TemplateSankeyDiagramAggregatedFieldWellsOutput)
}

// The destination field wells of a sankey diagram.
func (o TemplateSankeyDiagramAggregatedFieldWellsPtrOutput) Destination() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v *TemplateSankeyDiagramAggregatedFieldWells) []TemplateDimensionField {
		if v == nil {
			return nil
		}
		return v.Destination
	}).(TemplateDimensionFieldArrayOutput)
}

// The source field wells of a sankey diagram.
func (o TemplateSankeyDiagramAggregatedFieldWellsPtrOutput) Source() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v *TemplateSankeyDiagramAggregatedFieldWells) []TemplateDimensionField {
		if v == nil {
			return nil
		}
		return v.Source
	}).(TemplateDimensionFieldArrayOutput)
}

// The weight field wells of a sankey diagram.
func (o TemplateSankeyDiagramAggregatedFieldWellsPtrOutput) Weight() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v *TemplateSankeyDiagramAggregatedFieldWells) []TemplateMeasureField {
		if v == nil {
			return nil
		}
		return v.Weight
	}).(TemplateMeasureFieldArrayOutput)
}

type TemplateSankeyDiagramChartConfiguration struct {
	// The data label configuration of a sankey diagram.
	DataLabels *TemplateDataLabelOptions `pulumi:"dataLabels"`
	// The field well configuration of a sankey diagram.
	FieldWells *TemplateSankeyDiagramFieldWells `pulumi:"fieldWells"`
	// The general visual interactions setup for a visual.
	Interactions *TemplateVisualInteractionOptions `pulumi:"interactions"`
	// The sort configuration of a sankey diagram.
	SortConfiguration *TemplateSankeyDiagramSortConfiguration `pulumi:"sortConfiguration"`
}

// TemplateSankeyDiagramChartConfigurationInput is an input type that accepts TemplateSankeyDiagramChartConfigurationArgs and TemplateSankeyDiagramChartConfigurationOutput values.
// You can construct a concrete instance of `TemplateSankeyDiagramChartConfigurationInput` via:
//
//	TemplateSankeyDiagramChartConfigurationArgs{...}
type TemplateSankeyDiagramChartConfigurationInput interface {
	pulumi.Input

	ToTemplateSankeyDiagramChartConfigurationOutput() TemplateSankeyDiagramChartConfigurationOutput
	ToTemplateSankeyDiagramChartConfigurationOutputWithContext(context.Context) TemplateSankeyDiagramChartConfigurationOutput
}

type TemplateSankeyDiagramChartConfigurationArgs struct {
	// The data label configuration of a sankey diagram.
	DataLabels TemplateDataLabelOptionsPtrInput `pulumi:"dataLabels"`
	// The field well configuration of a sankey diagram.
	FieldWells TemplateSankeyDiagramFieldWellsPtrInput `pulumi:"fieldWells"`
	// The general visual interactions setup for a visual.
	Interactions TemplateVisualInteractionOptionsPtrInput `pulumi:"interactions"`
	// The sort configuration of a sankey diagram.
	SortConfiguration TemplateSankeyDiagramSortConfigurationPtrInput `pulumi:"sortConfiguration"`
}

func (TemplateSankeyDiagramChartConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSankeyDiagramChartConfiguration)(nil)).Elem()
}

func (i TemplateSankeyDiagramChartConfigurationArgs) ToTemplateSankeyDiagramChartConfigurationOutput() TemplateSankeyDiagramChartConfigurationOutput {
	return i.ToTemplateSankeyDiagramChartConfigurationOutputWithContext(context.Background())
}

func (i TemplateSankeyDiagramChartConfigurationArgs) ToTemplateSankeyDiagramChartConfigurationOutputWithContext(ctx context.Context) TemplateSankeyDiagramChartConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSankeyDiagramChartConfigurationOutput)
}

func (i TemplateSankeyDiagramChartConfigurationArgs) ToTemplateSankeyDiagramChartConfigurationPtrOutput() TemplateSankeyDiagramChartConfigurationPtrOutput {
	return i.ToTemplateSankeyDiagramChartConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateSankeyDiagramChartConfigurationArgs) ToTemplateSankeyDiagramChartConfigurationPtrOutputWithContext(ctx context.Context) TemplateSankeyDiagramChartConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSankeyDiagramChartConfigurationOutput).ToTemplateSankeyDiagramChartConfigurationPtrOutputWithContext(ctx)
}

// TemplateSankeyDiagramChartConfigurationPtrInput is an input type that accepts TemplateSankeyDiagramChartConfigurationArgs, TemplateSankeyDiagramChartConfigurationPtr and TemplateSankeyDiagramChartConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateSankeyDiagramChartConfigurationPtrInput` via:
//
//	        TemplateSankeyDiagramChartConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateSankeyDiagramChartConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateSankeyDiagramChartConfigurationPtrOutput() TemplateSankeyDiagramChartConfigurationPtrOutput
	ToTemplateSankeyDiagramChartConfigurationPtrOutputWithContext(context.Context) TemplateSankeyDiagramChartConfigurationPtrOutput
}

type templateSankeyDiagramChartConfigurationPtrType TemplateSankeyDiagramChartConfigurationArgs

func TemplateSankeyDiagramChartConfigurationPtr(v *TemplateSankeyDiagramChartConfigurationArgs) TemplateSankeyDiagramChartConfigurationPtrInput {
	return (*templateSankeyDiagramChartConfigurationPtrType)(v)
}

func (*templateSankeyDiagramChartConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSankeyDiagramChartConfiguration)(nil)).Elem()
}

func (i *templateSankeyDiagramChartConfigurationPtrType) ToTemplateSankeyDiagramChartConfigurationPtrOutput() TemplateSankeyDiagramChartConfigurationPtrOutput {
	return i.ToTemplateSankeyDiagramChartConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateSankeyDiagramChartConfigurationPtrType) ToTemplateSankeyDiagramChartConfigurationPtrOutputWithContext(ctx context.Context) TemplateSankeyDiagramChartConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSankeyDiagramChartConfigurationPtrOutput)
}

type TemplateSankeyDiagramChartConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateSankeyDiagramChartConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSankeyDiagramChartConfiguration)(nil)).Elem()
}

func (o TemplateSankeyDiagramChartConfigurationOutput) ToTemplateSankeyDiagramChartConfigurationOutput() TemplateSankeyDiagramChartConfigurationOutput {
	return o
}

func (o TemplateSankeyDiagramChartConfigurationOutput) ToTemplateSankeyDiagramChartConfigurationOutputWithContext(ctx context.Context) TemplateSankeyDiagramChartConfigurationOutput {
	return o
}

func (o TemplateSankeyDiagramChartConfigurationOutput) ToTemplateSankeyDiagramChartConfigurationPtrOutput() TemplateSankeyDiagramChartConfigurationPtrOutput {
	return o.ToTemplateSankeyDiagramChartConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateSankeyDiagramChartConfigurationOutput) ToTemplateSankeyDiagramChartConfigurationPtrOutputWithContext(ctx context.Context) TemplateSankeyDiagramChartConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateSankeyDiagramChartConfiguration) *TemplateSankeyDiagramChartConfiguration {
		return &v
	}).(TemplateSankeyDiagramChartConfigurationPtrOutput)
}

// The data label configuration of a sankey diagram.
func (o TemplateSankeyDiagramChartConfigurationOutput) DataLabels() TemplateDataLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateSankeyDiagramChartConfiguration) *TemplateDataLabelOptions { return v.DataLabels }).(TemplateDataLabelOptionsPtrOutput)
}

// The field well configuration of a sankey diagram.
func (o TemplateSankeyDiagramChartConfigurationOutput) FieldWells() TemplateSankeyDiagramFieldWellsPtrOutput {
	return o.ApplyT(func(v TemplateSankeyDiagramChartConfiguration) *TemplateSankeyDiagramFieldWells { return v.FieldWells }).(TemplateSankeyDiagramFieldWellsPtrOutput)
}

// The general visual interactions setup for a visual.
func (o TemplateSankeyDiagramChartConfigurationOutput) Interactions() TemplateVisualInteractionOptionsPtrOutput {
	return o.ApplyT(func(v TemplateSankeyDiagramChartConfiguration) *TemplateVisualInteractionOptions {
		return v.Interactions
	}).(TemplateVisualInteractionOptionsPtrOutput)
}

// The sort configuration of a sankey diagram.
func (o TemplateSankeyDiagramChartConfigurationOutput) SortConfiguration() TemplateSankeyDiagramSortConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateSankeyDiagramChartConfiguration) *TemplateSankeyDiagramSortConfiguration {
		return v.SortConfiguration
	}).(TemplateSankeyDiagramSortConfigurationPtrOutput)
}

type TemplateSankeyDiagramChartConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateSankeyDiagramChartConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSankeyDiagramChartConfiguration)(nil)).Elem()
}

func (o TemplateSankeyDiagramChartConfigurationPtrOutput) ToTemplateSankeyDiagramChartConfigurationPtrOutput() TemplateSankeyDiagramChartConfigurationPtrOutput {
	return o
}

func (o TemplateSankeyDiagramChartConfigurationPtrOutput) ToTemplateSankeyDiagramChartConfigurationPtrOutputWithContext(ctx context.Context) TemplateSankeyDiagramChartConfigurationPtrOutput {
	return o
}

func (o TemplateSankeyDiagramChartConfigurationPtrOutput) Elem() TemplateSankeyDiagramChartConfigurationOutput {
	return o.ApplyT(func(v *TemplateSankeyDiagramChartConfiguration) TemplateSankeyDiagramChartConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateSankeyDiagramChartConfiguration
		return ret
	}).(TemplateSankeyDiagramChartConfigurationOutput)
}

// The data label configuration of a sankey diagram.
func (o TemplateSankeyDiagramChartConfigurationPtrOutput) DataLabels() TemplateDataLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateSankeyDiagramChartConfiguration) *TemplateDataLabelOptions {
		if v == nil {
			return nil
		}
		return v.DataLabels
	}).(TemplateDataLabelOptionsPtrOutput)
}

// The field well configuration of a sankey diagram.
func (o TemplateSankeyDiagramChartConfigurationPtrOutput) FieldWells() TemplateSankeyDiagramFieldWellsPtrOutput {
	return o.ApplyT(func(v *TemplateSankeyDiagramChartConfiguration) *TemplateSankeyDiagramFieldWells {
		if v == nil {
			return nil
		}
		return v.FieldWells
	}).(TemplateSankeyDiagramFieldWellsPtrOutput)
}

// The general visual interactions setup for a visual.
func (o TemplateSankeyDiagramChartConfigurationPtrOutput) Interactions() TemplateVisualInteractionOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateSankeyDiagramChartConfiguration) *TemplateVisualInteractionOptions {
		if v == nil {
			return nil
		}
		return v.Interactions
	}).(TemplateVisualInteractionOptionsPtrOutput)
}

// The sort configuration of a sankey diagram.
func (o TemplateSankeyDiagramChartConfigurationPtrOutput) SortConfiguration() TemplateSankeyDiagramSortConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateSankeyDiagramChartConfiguration) *TemplateSankeyDiagramSortConfiguration {
		if v == nil {
			return nil
		}
		return v.SortConfiguration
	}).(TemplateSankeyDiagramSortConfigurationPtrOutput)
}

type TemplateSankeyDiagramFieldWells struct {
	// The field well configuration of a sankey diagram.
	SankeyDiagramAggregatedFieldWells *TemplateSankeyDiagramAggregatedFieldWells `pulumi:"sankeyDiagramAggregatedFieldWells"`
}

// TemplateSankeyDiagramFieldWellsInput is an input type that accepts TemplateSankeyDiagramFieldWellsArgs and TemplateSankeyDiagramFieldWellsOutput values.
// You can construct a concrete instance of `TemplateSankeyDiagramFieldWellsInput` via:
//
//	TemplateSankeyDiagramFieldWellsArgs{...}
type TemplateSankeyDiagramFieldWellsInput interface {
	pulumi.Input

	ToTemplateSankeyDiagramFieldWellsOutput() TemplateSankeyDiagramFieldWellsOutput
	ToTemplateSankeyDiagramFieldWellsOutputWithContext(context.Context) TemplateSankeyDiagramFieldWellsOutput
}

type TemplateSankeyDiagramFieldWellsArgs struct {
	// The field well configuration of a sankey diagram.
	SankeyDiagramAggregatedFieldWells TemplateSankeyDiagramAggregatedFieldWellsPtrInput `pulumi:"sankeyDiagramAggregatedFieldWells"`
}

func (TemplateSankeyDiagramFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSankeyDiagramFieldWells)(nil)).Elem()
}

func (i TemplateSankeyDiagramFieldWellsArgs) ToTemplateSankeyDiagramFieldWellsOutput() TemplateSankeyDiagramFieldWellsOutput {
	return i.ToTemplateSankeyDiagramFieldWellsOutputWithContext(context.Background())
}

func (i TemplateSankeyDiagramFieldWellsArgs) ToTemplateSankeyDiagramFieldWellsOutputWithContext(ctx context.Context) TemplateSankeyDiagramFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSankeyDiagramFieldWellsOutput)
}

func (i TemplateSankeyDiagramFieldWellsArgs) ToTemplateSankeyDiagramFieldWellsPtrOutput() TemplateSankeyDiagramFieldWellsPtrOutput {
	return i.ToTemplateSankeyDiagramFieldWellsPtrOutputWithContext(context.Background())
}

func (i TemplateSankeyDiagramFieldWellsArgs) ToTemplateSankeyDiagramFieldWellsPtrOutputWithContext(ctx context.Context) TemplateSankeyDiagramFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSankeyDiagramFieldWellsOutput).ToTemplateSankeyDiagramFieldWellsPtrOutputWithContext(ctx)
}

// TemplateSankeyDiagramFieldWellsPtrInput is an input type that accepts TemplateSankeyDiagramFieldWellsArgs, TemplateSankeyDiagramFieldWellsPtr and TemplateSankeyDiagramFieldWellsPtrOutput values.
// You can construct a concrete instance of `TemplateSankeyDiagramFieldWellsPtrInput` via:
//
//	        TemplateSankeyDiagramFieldWellsArgs{...}
//
//	or:
//
//	        nil
type TemplateSankeyDiagramFieldWellsPtrInput interface {
	pulumi.Input

	ToTemplateSankeyDiagramFieldWellsPtrOutput() TemplateSankeyDiagramFieldWellsPtrOutput
	ToTemplateSankeyDiagramFieldWellsPtrOutputWithContext(context.Context) TemplateSankeyDiagramFieldWellsPtrOutput
}

type templateSankeyDiagramFieldWellsPtrType TemplateSankeyDiagramFieldWellsArgs

func TemplateSankeyDiagramFieldWellsPtr(v *TemplateSankeyDiagramFieldWellsArgs) TemplateSankeyDiagramFieldWellsPtrInput {
	return (*templateSankeyDiagramFieldWellsPtrType)(v)
}

func (*templateSankeyDiagramFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSankeyDiagramFieldWells)(nil)).Elem()
}

func (i *templateSankeyDiagramFieldWellsPtrType) ToTemplateSankeyDiagramFieldWellsPtrOutput() TemplateSankeyDiagramFieldWellsPtrOutput {
	return i.ToTemplateSankeyDiagramFieldWellsPtrOutputWithContext(context.Background())
}

func (i *templateSankeyDiagramFieldWellsPtrType) ToTemplateSankeyDiagramFieldWellsPtrOutputWithContext(ctx context.Context) TemplateSankeyDiagramFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSankeyDiagramFieldWellsPtrOutput)
}

type TemplateSankeyDiagramFieldWellsOutput struct{ *pulumi.OutputState }

func (TemplateSankeyDiagramFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSankeyDiagramFieldWells)(nil)).Elem()
}

func (o TemplateSankeyDiagramFieldWellsOutput) ToTemplateSankeyDiagramFieldWellsOutput() TemplateSankeyDiagramFieldWellsOutput {
	return o
}

func (o TemplateSankeyDiagramFieldWellsOutput) ToTemplateSankeyDiagramFieldWellsOutputWithContext(ctx context.Context) TemplateSankeyDiagramFieldWellsOutput {
	return o
}

func (o TemplateSankeyDiagramFieldWellsOutput) ToTemplateSankeyDiagramFieldWellsPtrOutput() TemplateSankeyDiagramFieldWellsPtrOutput {
	return o.ToTemplateSankeyDiagramFieldWellsPtrOutputWithContext(context.Background())
}

func (o TemplateSankeyDiagramFieldWellsOutput) ToTemplateSankeyDiagramFieldWellsPtrOutputWithContext(ctx context.Context) TemplateSankeyDiagramFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateSankeyDiagramFieldWells) *TemplateSankeyDiagramFieldWells {
		return &v
	}).(TemplateSankeyDiagramFieldWellsPtrOutput)
}

// The field well configuration of a sankey diagram.
func (o TemplateSankeyDiagramFieldWellsOutput) SankeyDiagramAggregatedFieldWells() TemplateSankeyDiagramAggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v TemplateSankeyDiagramFieldWells) *TemplateSankeyDiagramAggregatedFieldWells {
		return v.SankeyDiagramAggregatedFieldWells
	}).(TemplateSankeyDiagramAggregatedFieldWellsPtrOutput)
}

type TemplateSankeyDiagramFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (TemplateSankeyDiagramFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSankeyDiagramFieldWells)(nil)).Elem()
}

func (o TemplateSankeyDiagramFieldWellsPtrOutput) ToTemplateSankeyDiagramFieldWellsPtrOutput() TemplateSankeyDiagramFieldWellsPtrOutput {
	return o
}

func (o TemplateSankeyDiagramFieldWellsPtrOutput) ToTemplateSankeyDiagramFieldWellsPtrOutputWithContext(ctx context.Context) TemplateSankeyDiagramFieldWellsPtrOutput {
	return o
}

func (o TemplateSankeyDiagramFieldWellsPtrOutput) Elem() TemplateSankeyDiagramFieldWellsOutput {
	return o.ApplyT(func(v *TemplateSankeyDiagramFieldWells) TemplateSankeyDiagramFieldWells {
		if v != nil {
			return *v
		}
		var ret TemplateSankeyDiagramFieldWells
		return ret
	}).(TemplateSankeyDiagramFieldWellsOutput)
}

// The field well configuration of a sankey diagram.
func (o TemplateSankeyDiagramFieldWellsPtrOutput) SankeyDiagramAggregatedFieldWells() TemplateSankeyDiagramAggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v *TemplateSankeyDiagramFieldWells) *TemplateSankeyDiagramAggregatedFieldWells {
		if v == nil {
			return nil
		}
		return v.SankeyDiagramAggregatedFieldWells
	}).(TemplateSankeyDiagramAggregatedFieldWellsPtrOutput)
}

type TemplateSankeyDiagramSortConfiguration struct {
	// The limit on the number of destination nodes that are displayed in a sankey diagram.
	DestinationItemsLimit *TemplateItemsLimitConfiguration `pulumi:"destinationItemsLimit"`
	// The limit on the number of source nodes that are displayed in a sankey diagram.
	SourceItemsLimit *TemplateItemsLimitConfiguration `pulumi:"sourceItemsLimit"`
	// The sort configuration of the weight fields.
	WeightSort []TemplateFieldSortOptions `pulumi:"weightSort"`
}

// TemplateSankeyDiagramSortConfigurationInput is an input type that accepts TemplateSankeyDiagramSortConfigurationArgs and TemplateSankeyDiagramSortConfigurationOutput values.
// You can construct a concrete instance of `TemplateSankeyDiagramSortConfigurationInput` via:
//
//	TemplateSankeyDiagramSortConfigurationArgs{...}
type TemplateSankeyDiagramSortConfigurationInput interface {
	pulumi.Input

	ToTemplateSankeyDiagramSortConfigurationOutput() TemplateSankeyDiagramSortConfigurationOutput
	ToTemplateSankeyDiagramSortConfigurationOutputWithContext(context.Context) TemplateSankeyDiagramSortConfigurationOutput
}

type TemplateSankeyDiagramSortConfigurationArgs struct {
	// The limit on the number of destination nodes that are displayed in a sankey diagram.
	DestinationItemsLimit TemplateItemsLimitConfigurationPtrInput `pulumi:"destinationItemsLimit"`
	// The limit on the number of source nodes that are displayed in a sankey diagram.
	SourceItemsLimit TemplateItemsLimitConfigurationPtrInput `pulumi:"sourceItemsLimit"`
	// The sort configuration of the weight fields.
	WeightSort TemplateFieldSortOptionsArrayInput `pulumi:"weightSort"`
}

func (TemplateSankeyDiagramSortConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSankeyDiagramSortConfiguration)(nil)).Elem()
}

func (i TemplateSankeyDiagramSortConfigurationArgs) ToTemplateSankeyDiagramSortConfigurationOutput() TemplateSankeyDiagramSortConfigurationOutput {
	return i.ToTemplateSankeyDiagramSortConfigurationOutputWithContext(context.Background())
}

func (i TemplateSankeyDiagramSortConfigurationArgs) ToTemplateSankeyDiagramSortConfigurationOutputWithContext(ctx context.Context) TemplateSankeyDiagramSortConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSankeyDiagramSortConfigurationOutput)
}

func (i TemplateSankeyDiagramSortConfigurationArgs) ToTemplateSankeyDiagramSortConfigurationPtrOutput() TemplateSankeyDiagramSortConfigurationPtrOutput {
	return i.ToTemplateSankeyDiagramSortConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateSankeyDiagramSortConfigurationArgs) ToTemplateSankeyDiagramSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateSankeyDiagramSortConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSankeyDiagramSortConfigurationOutput).ToTemplateSankeyDiagramSortConfigurationPtrOutputWithContext(ctx)
}

// TemplateSankeyDiagramSortConfigurationPtrInput is an input type that accepts TemplateSankeyDiagramSortConfigurationArgs, TemplateSankeyDiagramSortConfigurationPtr and TemplateSankeyDiagramSortConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateSankeyDiagramSortConfigurationPtrInput` via:
//
//	        TemplateSankeyDiagramSortConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateSankeyDiagramSortConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateSankeyDiagramSortConfigurationPtrOutput() TemplateSankeyDiagramSortConfigurationPtrOutput
	ToTemplateSankeyDiagramSortConfigurationPtrOutputWithContext(context.Context) TemplateSankeyDiagramSortConfigurationPtrOutput
}

type templateSankeyDiagramSortConfigurationPtrType TemplateSankeyDiagramSortConfigurationArgs

func TemplateSankeyDiagramSortConfigurationPtr(v *TemplateSankeyDiagramSortConfigurationArgs) TemplateSankeyDiagramSortConfigurationPtrInput {
	return (*templateSankeyDiagramSortConfigurationPtrType)(v)
}

func (*templateSankeyDiagramSortConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSankeyDiagramSortConfiguration)(nil)).Elem()
}

func (i *templateSankeyDiagramSortConfigurationPtrType) ToTemplateSankeyDiagramSortConfigurationPtrOutput() TemplateSankeyDiagramSortConfigurationPtrOutput {
	return i.ToTemplateSankeyDiagramSortConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateSankeyDiagramSortConfigurationPtrType) ToTemplateSankeyDiagramSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateSankeyDiagramSortConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSankeyDiagramSortConfigurationPtrOutput)
}

type TemplateSankeyDiagramSortConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateSankeyDiagramSortConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSankeyDiagramSortConfiguration)(nil)).Elem()
}

func (o TemplateSankeyDiagramSortConfigurationOutput) ToTemplateSankeyDiagramSortConfigurationOutput() TemplateSankeyDiagramSortConfigurationOutput {
	return o
}

func (o TemplateSankeyDiagramSortConfigurationOutput) ToTemplateSankeyDiagramSortConfigurationOutputWithContext(ctx context.Context) TemplateSankeyDiagramSortConfigurationOutput {
	return o
}

func (o TemplateSankeyDiagramSortConfigurationOutput) ToTemplateSankeyDiagramSortConfigurationPtrOutput() TemplateSankeyDiagramSortConfigurationPtrOutput {
	return o.ToTemplateSankeyDiagramSortConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateSankeyDiagramSortConfigurationOutput) ToTemplateSankeyDiagramSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateSankeyDiagramSortConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateSankeyDiagramSortConfiguration) *TemplateSankeyDiagramSortConfiguration {
		return &v
	}).(TemplateSankeyDiagramSortConfigurationPtrOutput)
}

// The limit on the number of destination nodes that are displayed in a sankey diagram.
func (o TemplateSankeyDiagramSortConfigurationOutput) DestinationItemsLimit() TemplateItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateSankeyDiagramSortConfiguration) *TemplateItemsLimitConfiguration {
		return v.DestinationItemsLimit
	}).(TemplateItemsLimitConfigurationPtrOutput)
}

// The limit on the number of source nodes that are displayed in a sankey diagram.
func (o TemplateSankeyDiagramSortConfigurationOutput) SourceItemsLimit() TemplateItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateSankeyDiagramSortConfiguration) *TemplateItemsLimitConfiguration {
		return v.SourceItemsLimit
	}).(TemplateItemsLimitConfigurationPtrOutput)
}

// The sort configuration of the weight fields.
func (o TemplateSankeyDiagramSortConfigurationOutput) WeightSort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v TemplateSankeyDiagramSortConfiguration) []TemplateFieldSortOptions { return v.WeightSort }).(TemplateFieldSortOptionsArrayOutput)
}

type TemplateSankeyDiagramSortConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateSankeyDiagramSortConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSankeyDiagramSortConfiguration)(nil)).Elem()
}

func (o TemplateSankeyDiagramSortConfigurationPtrOutput) ToTemplateSankeyDiagramSortConfigurationPtrOutput() TemplateSankeyDiagramSortConfigurationPtrOutput {
	return o
}

func (o TemplateSankeyDiagramSortConfigurationPtrOutput) ToTemplateSankeyDiagramSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateSankeyDiagramSortConfigurationPtrOutput {
	return o
}

func (o TemplateSankeyDiagramSortConfigurationPtrOutput) Elem() TemplateSankeyDiagramSortConfigurationOutput {
	return o.ApplyT(func(v *TemplateSankeyDiagramSortConfiguration) TemplateSankeyDiagramSortConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateSankeyDiagramSortConfiguration
		return ret
	}).(TemplateSankeyDiagramSortConfigurationOutput)
}

// The limit on the number of destination nodes that are displayed in a sankey diagram.
func (o TemplateSankeyDiagramSortConfigurationPtrOutput) DestinationItemsLimit() TemplateItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateSankeyDiagramSortConfiguration) *TemplateItemsLimitConfiguration {
		if v == nil {
			return nil
		}
		return v.DestinationItemsLimit
	}).(TemplateItemsLimitConfigurationPtrOutput)
}

// The limit on the number of source nodes that are displayed in a sankey diagram.
func (o TemplateSankeyDiagramSortConfigurationPtrOutput) SourceItemsLimit() TemplateItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateSankeyDiagramSortConfiguration) *TemplateItemsLimitConfiguration {
		if v == nil {
			return nil
		}
		return v.SourceItemsLimit
	}).(TemplateItemsLimitConfigurationPtrOutput)
}

// The sort configuration of the weight fields.
func (o TemplateSankeyDiagramSortConfigurationPtrOutput) WeightSort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v *TemplateSankeyDiagramSortConfiguration) []TemplateFieldSortOptions {
		if v == nil {
			return nil
		}
		return v.WeightSort
	}).(TemplateFieldSortOptionsArrayOutput)
}

type TemplateSankeyDiagramVisual struct {
	// The list of custom actions that are configured for a visual.
	Actions []TemplateVisualCustomAction `pulumi:"actions"`
	// The configuration of a sankey diagram.
	ChartConfiguration *TemplateSankeyDiagramChartConfiguration `pulumi:"chartConfiguration"`
	// The subtitle that is displayed on the visual.
	Subtitle *TemplateVisualSubtitleLabelOptions `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title *TemplateVisualTitleLabelOptions `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText *string `pulumi:"visualContentAltText"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
	VisualId string `pulumi:"visualId"`
}

// TemplateSankeyDiagramVisualInput is an input type that accepts TemplateSankeyDiagramVisualArgs and TemplateSankeyDiagramVisualOutput values.
// You can construct a concrete instance of `TemplateSankeyDiagramVisualInput` via:
//
//	TemplateSankeyDiagramVisualArgs{...}
type TemplateSankeyDiagramVisualInput interface {
	pulumi.Input

	ToTemplateSankeyDiagramVisualOutput() TemplateSankeyDiagramVisualOutput
	ToTemplateSankeyDiagramVisualOutputWithContext(context.Context) TemplateSankeyDiagramVisualOutput
}

type TemplateSankeyDiagramVisualArgs struct {
	// The list of custom actions that are configured for a visual.
	Actions TemplateVisualCustomActionArrayInput `pulumi:"actions"`
	// The configuration of a sankey diagram.
	ChartConfiguration TemplateSankeyDiagramChartConfigurationPtrInput `pulumi:"chartConfiguration"`
	// The subtitle that is displayed on the visual.
	Subtitle TemplateVisualSubtitleLabelOptionsPtrInput `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title TemplateVisualTitleLabelOptionsPtrInput `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText pulumi.StringPtrInput `pulumi:"visualContentAltText"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
	VisualId pulumi.StringInput `pulumi:"visualId"`
}

func (TemplateSankeyDiagramVisualArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSankeyDiagramVisual)(nil)).Elem()
}

func (i TemplateSankeyDiagramVisualArgs) ToTemplateSankeyDiagramVisualOutput() TemplateSankeyDiagramVisualOutput {
	return i.ToTemplateSankeyDiagramVisualOutputWithContext(context.Background())
}

func (i TemplateSankeyDiagramVisualArgs) ToTemplateSankeyDiagramVisualOutputWithContext(ctx context.Context) TemplateSankeyDiagramVisualOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSankeyDiagramVisualOutput)
}

func (i TemplateSankeyDiagramVisualArgs) ToTemplateSankeyDiagramVisualPtrOutput() TemplateSankeyDiagramVisualPtrOutput {
	return i.ToTemplateSankeyDiagramVisualPtrOutputWithContext(context.Background())
}

func (i TemplateSankeyDiagramVisualArgs) ToTemplateSankeyDiagramVisualPtrOutputWithContext(ctx context.Context) TemplateSankeyDiagramVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSankeyDiagramVisualOutput).ToTemplateSankeyDiagramVisualPtrOutputWithContext(ctx)
}

// TemplateSankeyDiagramVisualPtrInput is an input type that accepts TemplateSankeyDiagramVisualArgs, TemplateSankeyDiagramVisualPtr and TemplateSankeyDiagramVisualPtrOutput values.
// You can construct a concrete instance of `TemplateSankeyDiagramVisualPtrInput` via:
//
//	        TemplateSankeyDiagramVisualArgs{...}
//
//	or:
//
//	        nil
type TemplateSankeyDiagramVisualPtrInput interface {
	pulumi.Input

	ToTemplateSankeyDiagramVisualPtrOutput() TemplateSankeyDiagramVisualPtrOutput
	ToTemplateSankeyDiagramVisualPtrOutputWithContext(context.Context) TemplateSankeyDiagramVisualPtrOutput
}

type templateSankeyDiagramVisualPtrType TemplateSankeyDiagramVisualArgs

func TemplateSankeyDiagramVisualPtr(v *TemplateSankeyDiagramVisualArgs) TemplateSankeyDiagramVisualPtrInput {
	return (*templateSankeyDiagramVisualPtrType)(v)
}

func (*templateSankeyDiagramVisualPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSankeyDiagramVisual)(nil)).Elem()
}

func (i *templateSankeyDiagramVisualPtrType) ToTemplateSankeyDiagramVisualPtrOutput() TemplateSankeyDiagramVisualPtrOutput {
	return i.ToTemplateSankeyDiagramVisualPtrOutputWithContext(context.Background())
}

func (i *templateSankeyDiagramVisualPtrType) ToTemplateSankeyDiagramVisualPtrOutputWithContext(ctx context.Context) TemplateSankeyDiagramVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSankeyDiagramVisualPtrOutput)
}

type TemplateSankeyDiagramVisualOutput struct{ *pulumi.OutputState }

func (TemplateSankeyDiagramVisualOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSankeyDiagramVisual)(nil)).Elem()
}

func (o TemplateSankeyDiagramVisualOutput) ToTemplateSankeyDiagramVisualOutput() TemplateSankeyDiagramVisualOutput {
	return o
}

func (o TemplateSankeyDiagramVisualOutput) ToTemplateSankeyDiagramVisualOutputWithContext(ctx context.Context) TemplateSankeyDiagramVisualOutput {
	return o
}

func (o TemplateSankeyDiagramVisualOutput) ToTemplateSankeyDiagramVisualPtrOutput() TemplateSankeyDiagramVisualPtrOutput {
	return o.ToTemplateSankeyDiagramVisualPtrOutputWithContext(context.Background())
}

func (o TemplateSankeyDiagramVisualOutput) ToTemplateSankeyDiagramVisualPtrOutputWithContext(ctx context.Context) TemplateSankeyDiagramVisualPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateSankeyDiagramVisual) *TemplateSankeyDiagramVisual {
		return &v
	}).(TemplateSankeyDiagramVisualPtrOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplateSankeyDiagramVisualOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v TemplateSankeyDiagramVisual) []TemplateVisualCustomAction { return v.Actions }).(TemplateVisualCustomActionArrayOutput)
}

// The configuration of a sankey diagram.
func (o TemplateSankeyDiagramVisualOutput) ChartConfiguration() TemplateSankeyDiagramChartConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateSankeyDiagramVisual) *TemplateSankeyDiagramChartConfiguration {
		return v.ChartConfiguration
	}).(TemplateSankeyDiagramChartConfigurationPtrOutput)
}

// The subtitle that is displayed on the visual.
func (o TemplateSankeyDiagramVisualOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateSankeyDiagramVisual) *TemplateVisualSubtitleLabelOptions { return v.Subtitle }).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o TemplateSankeyDiagramVisualOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateSankeyDiagramVisual) *TemplateVisualTitleLabelOptions { return v.Title }).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o TemplateSankeyDiagramVisualOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateSankeyDiagramVisual) *string { return v.VisualContentAltText }).(pulumi.StringPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
func (o TemplateSankeyDiagramVisualOutput) VisualId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateSankeyDiagramVisual) string { return v.VisualId }).(pulumi.StringOutput)
}

type TemplateSankeyDiagramVisualPtrOutput struct{ *pulumi.OutputState }

func (TemplateSankeyDiagramVisualPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSankeyDiagramVisual)(nil)).Elem()
}

func (o TemplateSankeyDiagramVisualPtrOutput) ToTemplateSankeyDiagramVisualPtrOutput() TemplateSankeyDiagramVisualPtrOutput {
	return o
}

func (o TemplateSankeyDiagramVisualPtrOutput) ToTemplateSankeyDiagramVisualPtrOutputWithContext(ctx context.Context) TemplateSankeyDiagramVisualPtrOutput {
	return o
}

func (o TemplateSankeyDiagramVisualPtrOutput) Elem() TemplateSankeyDiagramVisualOutput {
	return o.ApplyT(func(v *TemplateSankeyDiagramVisual) TemplateSankeyDiagramVisual {
		if v != nil {
			return *v
		}
		var ret TemplateSankeyDiagramVisual
		return ret
	}).(TemplateSankeyDiagramVisualOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplateSankeyDiagramVisualPtrOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v *TemplateSankeyDiagramVisual) []TemplateVisualCustomAction {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(TemplateVisualCustomActionArrayOutput)
}

// The configuration of a sankey diagram.
func (o TemplateSankeyDiagramVisualPtrOutput) ChartConfiguration() TemplateSankeyDiagramChartConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateSankeyDiagramVisual) *TemplateSankeyDiagramChartConfiguration {
		if v == nil {
			return nil
		}
		return v.ChartConfiguration
	}).(TemplateSankeyDiagramChartConfigurationPtrOutput)
}

// The subtitle that is displayed on the visual.
func (o TemplateSankeyDiagramVisualPtrOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateSankeyDiagramVisual) *TemplateVisualSubtitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Subtitle
	}).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o TemplateSankeyDiagramVisualPtrOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateSankeyDiagramVisual) *TemplateVisualTitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Title
	}).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o TemplateSankeyDiagramVisualPtrOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateSankeyDiagramVisual) *string {
		if v == nil {
			return nil
		}
		return v.VisualContentAltText
	}).(pulumi.StringPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
func (o TemplateSankeyDiagramVisualPtrOutput) VisualId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateSankeyDiagramVisual) *string {
		if v == nil {
			return nil
		}
		return &v.VisualId
	}).(pulumi.StringPtrOutput)
}

type TemplateScatterPlotCategoricallyAggregatedFieldWells struct {
	// The category field well of a scatter plot.
	Category []TemplateDimensionField `pulumi:"category"`
	// The label field well of a scatter plot.
	Label []TemplateDimensionField `pulumi:"label"`
	// The size field well of a scatter plot.
	Size []TemplateMeasureField `pulumi:"size"`
	// The x-axis field well of a scatter plot.
	//
	// The x-axis is aggregated by category.
	XAxis []TemplateMeasureField `pulumi:"xAxis"`
	// The y-axis field well of a scatter plot.
	//
	// The y-axis is aggregated by category.
	YAxis []TemplateMeasureField `pulumi:"yAxis"`
}

// TemplateScatterPlotCategoricallyAggregatedFieldWellsInput is an input type that accepts TemplateScatterPlotCategoricallyAggregatedFieldWellsArgs and TemplateScatterPlotCategoricallyAggregatedFieldWellsOutput values.
// You can construct a concrete instance of `TemplateScatterPlotCategoricallyAggregatedFieldWellsInput` via:
//
//	TemplateScatterPlotCategoricallyAggregatedFieldWellsArgs{...}
type TemplateScatterPlotCategoricallyAggregatedFieldWellsInput interface {
	pulumi.Input

	ToTemplateScatterPlotCategoricallyAggregatedFieldWellsOutput() TemplateScatterPlotCategoricallyAggregatedFieldWellsOutput
	ToTemplateScatterPlotCategoricallyAggregatedFieldWellsOutputWithContext(context.Context) TemplateScatterPlotCategoricallyAggregatedFieldWellsOutput
}

type TemplateScatterPlotCategoricallyAggregatedFieldWellsArgs struct {
	// The category field well of a scatter plot.
	Category TemplateDimensionFieldArrayInput `pulumi:"category"`
	// The label field well of a scatter plot.
	Label TemplateDimensionFieldArrayInput `pulumi:"label"`
	// The size field well of a scatter plot.
	Size TemplateMeasureFieldArrayInput `pulumi:"size"`
	// The x-axis field well of a scatter plot.
	//
	// The x-axis is aggregated by category.
	XAxis TemplateMeasureFieldArrayInput `pulumi:"xAxis"`
	// The y-axis field well of a scatter plot.
	//
	// The y-axis is aggregated by category.
	YAxis TemplateMeasureFieldArrayInput `pulumi:"yAxis"`
}

func (TemplateScatterPlotCategoricallyAggregatedFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateScatterPlotCategoricallyAggregatedFieldWells)(nil)).Elem()
}

func (i TemplateScatterPlotCategoricallyAggregatedFieldWellsArgs) ToTemplateScatterPlotCategoricallyAggregatedFieldWellsOutput() TemplateScatterPlotCategoricallyAggregatedFieldWellsOutput {
	return i.ToTemplateScatterPlotCategoricallyAggregatedFieldWellsOutputWithContext(context.Background())
}

func (i TemplateScatterPlotCategoricallyAggregatedFieldWellsArgs) ToTemplateScatterPlotCategoricallyAggregatedFieldWellsOutputWithContext(ctx context.Context) TemplateScatterPlotCategoricallyAggregatedFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateScatterPlotCategoricallyAggregatedFieldWellsOutput)
}

func (i TemplateScatterPlotCategoricallyAggregatedFieldWellsArgs) ToTemplateScatterPlotCategoricallyAggregatedFieldWellsPtrOutput() TemplateScatterPlotCategoricallyAggregatedFieldWellsPtrOutput {
	return i.ToTemplateScatterPlotCategoricallyAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i TemplateScatterPlotCategoricallyAggregatedFieldWellsArgs) ToTemplateScatterPlotCategoricallyAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateScatterPlotCategoricallyAggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateScatterPlotCategoricallyAggregatedFieldWellsOutput).ToTemplateScatterPlotCategoricallyAggregatedFieldWellsPtrOutputWithContext(ctx)
}

// TemplateScatterPlotCategoricallyAggregatedFieldWellsPtrInput is an input type that accepts TemplateScatterPlotCategoricallyAggregatedFieldWellsArgs, TemplateScatterPlotCategoricallyAggregatedFieldWellsPtr and TemplateScatterPlotCategoricallyAggregatedFieldWellsPtrOutput values.
// You can construct a concrete instance of `TemplateScatterPlotCategoricallyAggregatedFieldWellsPtrInput` via:
//
//	        TemplateScatterPlotCategoricallyAggregatedFieldWellsArgs{...}
//
//	or:
//
//	        nil
type TemplateScatterPlotCategoricallyAggregatedFieldWellsPtrInput interface {
	pulumi.Input

	ToTemplateScatterPlotCategoricallyAggregatedFieldWellsPtrOutput() TemplateScatterPlotCategoricallyAggregatedFieldWellsPtrOutput
	ToTemplateScatterPlotCategoricallyAggregatedFieldWellsPtrOutputWithContext(context.Context) TemplateScatterPlotCategoricallyAggregatedFieldWellsPtrOutput
}

type templateScatterPlotCategoricallyAggregatedFieldWellsPtrType TemplateScatterPlotCategoricallyAggregatedFieldWellsArgs

func TemplateScatterPlotCategoricallyAggregatedFieldWellsPtr(v *TemplateScatterPlotCategoricallyAggregatedFieldWellsArgs) TemplateScatterPlotCategoricallyAggregatedFieldWellsPtrInput {
	return (*templateScatterPlotCategoricallyAggregatedFieldWellsPtrType)(v)
}

func (*templateScatterPlotCategoricallyAggregatedFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateScatterPlotCategoricallyAggregatedFieldWells)(nil)).Elem()
}

func (i *templateScatterPlotCategoricallyAggregatedFieldWellsPtrType) ToTemplateScatterPlotCategoricallyAggregatedFieldWellsPtrOutput() TemplateScatterPlotCategoricallyAggregatedFieldWellsPtrOutput {
	return i.ToTemplateScatterPlotCategoricallyAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i *templateScatterPlotCategoricallyAggregatedFieldWellsPtrType) ToTemplateScatterPlotCategoricallyAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateScatterPlotCategoricallyAggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateScatterPlotCategoricallyAggregatedFieldWellsPtrOutput)
}

type TemplateScatterPlotCategoricallyAggregatedFieldWellsOutput struct{ *pulumi.OutputState }

func (TemplateScatterPlotCategoricallyAggregatedFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateScatterPlotCategoricallyAggregatedFieldWells)(nil)).Elem()
}

func (o TemplateScatterPlotCategoricallyAggregatedFieldWellsOutput) ToTemplateScatterPlotCategoricallyAggregatedFieldWellsOutput() TemplateScatterPlotCategoricallyAggregatedFieldWellsOutput {
	return o
}

func (o TemplateScatterPlotCategoricallyAggregatedFieldWellsOutput) ToTemplateScatterPlotCategoricallyAggregatedFieldWellsOutputWithContext(ctx context.Context) TemplateScatterPlotCategoricallyAggregatedFieldWellsOutput {
	return o
}

func (o TemplateScatterPlotCategoricallyAggregatedFieldWellsOutput) ToTemplateScatterPlotCategoricallyAggregatedFieldWellsPtrOutput() TemplateScatterPlotCategoricallyAggregatedFieldWellsPtrOutput {
	return o.ToTemplateScatterPlotCategoricallyAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (o TemplateScatterPlotCategoricallyAggregatedFieldWellsOutput) ToTemplateScatterPlotCategoricallyAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateScatterPlotCategoricallyAggregatedFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateScatterPlotCategoricallyAggregatedFieldWells) *TemplateScatterPlotCategoricallyAggregatedFieldWells {
		return &v
	}).(TemplateScatterPlotCategoricallyAggregatedFieldWellsPtrOutput)
}

// The category field well of a scatter plot.
func (o TemplateScatterPlotCategoricallyAggregatedFieldWellsOutput) Category() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v TemplateScatterPlotCategoricallyAggregatedFieldWells) []TemplateDimensionField {
		return v.Category
	}).(TemplateDimensionFieldArrayOutput)
}

// The label field well of a scatter plot.
func (o TemplateScatterPlotCategoricallyAggregatedFieldWellsOutput) Label() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v TemplateScatterPlotCategoricallyAggregatedFieldWells) []TemplateDimensionField { return v.Label }).(TemplateDimensionFieldArrayOutput)
}

// The size field well of a scatter plot.
func (o TemplateScatterPlotCategoricallyAggregatedFieldWellsOutput) Size() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v TemplateScatterPlotCategoricallyAggregatedFieldWells) []TemplateMeasureField { return v.Size }).(TemplateMeasureFieldArrayOutput)
}

// The x-axis field well of a scatter plot.
//
// The x-axis is aggregated by category.
func (o TemplateScatterPlotCategoricallyAggregatedFieldWellsOutput) XAxis() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v TemplateScatterPlotCategoricallyAggregatedFieldWells) []TemplateMeasureField { return v.XAxis }).(TemplateMeasureFieldArrayOutput)
}

// The y-axis field well of a scatter plot.
//
// The y-axis is aggregated by category.
func (o TemplateScatterPlotCategoricallyAggregatedFieldWellsOutput) YAxis() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v TemplateScatterPlotCategoricallyAggregatedFieldWells) []TemplateMeasureField { return v.YAxis }).(TemplateMeasureFieldArrayOutput)
}

type TemplateScatterPlotCategoricallyAggregatedFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (TemplateScatterPlotCategoricallyAggregatedFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateScatterPlotCategoricallyAggregatedFieldWells)(nil)).Elem()
}

func (o TemplateScatterPlotCategoricallyAggregatedFieldWellsPtrOutput) ToTemplateScatterPlotCategoricallyAggregatedFieldWellsPtrOutput() TemplateScatterPlotCategoricallyAggregatedFieldWellsPtrOutput {
	return o
}

func (o TemplateScatterPlotCategoricallyAggregatedFieldWellsPtrOutput) ToTemplateScatterPlotCategoricallyAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateScatterPlotCategoricallyAggregatedFieldWellsPtrOutput {
	return o
}

func (o TemplateScatterPlotCategoricallyAggregatedFieldWellsPtrOutput) Elem() TemplateScatterPlotCategoricallyAggregatedFieldWellsOutput {
	return o.ApplyT(func(v *TemplateScatterPlotCategoricallyAggregatedFieldWells) TemplateScatterPlotCategoricallyAggregatedFieldWells {
		if v != nil {
			return *v
		}
		var ret TemplateScatterPlotCategoricallyAggregatedFieldWells
		return ret
	}).(TemplateScatterPlotCategoricallyAggregatedFieldWellsOutput)
}

// The category field well of a scatter plot.
func (o TemplateScatterPlotCategoricallyAggregatedFieldWellsPtrOutput) Category() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v *TemplateScatterPlotCategoricallyAggregatedFieldWells) []TemplateDimensionField {
		if v == nil {
			return nil
		}
		return v.Category
	}).(TemplateDimensionFieldArrayOutput)
}

// The label field well of a scatter plot.
func (o TemplateScatterPlotCategoricallyAggregatedFieldWellsPtrOutput) Label() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v *TemplateScatterPlotCategoricallyAggregatedFieldWells) []TemplateDimensionField {
		if v == nil {
			return nil
		}
		return v.Label
	}).(TemplateDimensionFieldArrayOutput)
}

// The size field well of a scatter plot.
func (o TemplateScatterPlotCategoricallyAggregatedFieldWellsPtrOutput) Size() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v *TemplateScatterPlotCategoricallyAggregatedFieldWells) []TemplateMeasureField {
		if v == nil {
			return nil
		}
		return v.Size
	}).(TemplateMeasureFieldArrayOutput)
}

// The x-axis field well of a scatter plot.
//
// The x-axis is aggregated by category.
func (o TemplateScatterPlotCategoricallyAggregatedFieldWellsPtrOutput) XAxis() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v *TemplateScatterPlotCategoricallyAggregatedFieldWells) []TemplateMeasureField {
		if v == nil {
			return nil
		}
		return v.XAxis
	}).(TemplateMeasureFieldArrayOutput)
}

// The y-axis field well of a scatter plot.
//
// The y-axis is aggregated by category.
func (o TemplateScatterPlotCategoricallyAggregatedFieldWellsPtrOutput) YAxis() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v *TemplateScatterPlotCategoricallyAggregatedFieldWells) []TemplateMeasureField {
		if v == nil {
			return nil
		}
		return v.YAxis
	}).(TemplateMeasureFieldArrayOutput)
}

type TemplateScatterPlotConfiguration struct {
	// The options that determine if visual data labels are displayed.
	DataLabels *TemplateDataLabelOptions `pulumi:"dataLabels"`
	// The field wells of the visual.
	FieldWells *TemplateScatterPlotFieldWells `pulumi:"fieldWells"`
	// The general visual interactions setup for a visual.
	Interactions *TemplateVisualInteractionOptions `pulumi:"interactions"`
	// The legend display setup of the visual.
	Legend *TemplateLegendOptions `pulumi:"legend"`
	// The sort configuration of a scatter plot.
	SortConfiguration *TemplateScatterPlotSortConfiguration `pulumi:"sortConfiguration"`
	// The legend display setup of the visual.
	Tooltip *TemplateTooltipOptions `pulumi:"tooltip"`
	// The palette (chart color) display setup of the visual.
	VisualPalette *TemplateVisualPalette `pulumi:"visualPalette"`
	// The label display options (grid line, range, scale, and axis step) of the scatter plot's x-axis.
	XAxisDisplayOptions *TemplateAxisDisplayOptions `pulumi:"xAxisDisplayOptions"`
	// The label options (label text, label visibility, and sort icon visibility) of the scatter plot's x-axis.
	XAxisLabelOptions *TemplateChartAxisLabelOptions `pulumi:"xAxisLabelOptions"`
	// The label display options (grid line, range, scale, and axis step) of the scatter plot's y-axis.
	YAxisDisplayOptions *TemplateAxisDisplayOptions `pulumi:"yAxisDisplayOptions"`
	// The label options (label text, label visibility, and sort icon visibility) of the scatter plot's y-axis.
	YAxisLabelOptions *TemplateChartAxisLabelOptions `pulumi:"yAxisLabelOptions"`
}

// TemplateScatterPlotConfigurationInput is an input type that accepts TemplateScatterPlotConfigurationArgs and TemplateScatterPlotConfigurationOutput values.
// You can construct a concrete instance of `TemplateScatterPlotConfigurationInput` via:
//
//	TemplateScatterPlotConfigurationArgs{...}
type TemplateScatterPlotConfigurationInput interface {
	pulumi.Input

	ToTemplateScatterPlotConfigurationOutput() TemplateScatterPlotConfigurationOutput
	ToTemplateScatterPlotConfigurationOutputWithContext(context.Context) TemplateScatterPlotConfigurationOutput
}

type TemplateScatterPlotConfigurationArgs struct {
	// The options that determine if visual data labels are displayed.
	DataLabels TemplateDataLabelOptionsPtrInput `pulumi:"dataLabels"`
	// The field wells of the visual.
	FieldWells TemplateScatterPlotFieldWellsPtrInput `pulumi:"fieldWells"`
	// The general visual interactions setup for a visual.
	Interactions TemplateVisualInteractionOptionsPtrInput `pulumi:"interactions"`
	// The legend display setup of the visual.
	Legend TemplateLegendOptionsPtrInput `pulumi:"legend"`
	// The sort configuration of a scatter plot.
	SortConfiguration TemplateScatterPlotSortConfigurationPtrInput `pulumi:"sortConfiguration"`
	// The legend display setup of the visual.
	Tooltip TemplateTooltipOptionsPtrInput `pulumi:"tooltip"`
	// The palette (chart color) display setup of the visual.
	VisualPalette TemplateVisualPalettePtrInput `pulumi:"visualPalette"`
	// The label display options (grid line, range, scale, and axis step) of the scatter plot's x-axis.
	XAxisDisplayOptions TemplateAxisDisplayOptionsPtrInput `pulumi:"xAxisDisplayOptions"`
	// The label options (label text, label visibility, and sort icon visibility) of the scatter plot's x-axis.
	XAxisLabelOptions TemplateChartAxisLabelOptionsPtrInput `pulumi:"xAxisLabelOptions"`
	// The label display options (grid line, range, scale, and axis step) of the scatter plot's y-axis.
	YAxisDisplayOptions TemplateAxisDisplayOptionsPtrInput `pulumi:"yAxisDisplayOptions"`
	// The label options (label text, label visibility, and sort icon visibility) of the scatter plot's y-axis.
	YAxisLabelOptions TemplateChartAxisLabelOptionsPtrInput `pulumi:"yAxisLabelOptions"`
}

func (TemplateScatterPlotConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateScatterPlotConfiguration)(nil)).Elem()
}

func (i TemplateScatterPlotConfigurationArgs) ToTemplateScatterPlotConfigurationOutput() TemplateScatterPlotConfigurationOutput {
	return i.ToTemplateScatterPlotConfigurationOutputWithContext(context.Background())
}

func (i TemplateScatterPlotConfigurationArgs) ToTemplateScatterPlotConfigurationOutputWithContext(ctx context.Context) TemplateScatterPlotConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateScatterPlotConfigurationOutput)
}

func (i TemplateScatterPlotConfigurationArgs) ToTemplateScatterPlotConfigurationPtrOutput() TemplateScatterPlotConfigurationPtrOutput {
	return i.ToTemplateScatterPlotConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateScatterPlotConfigurationArgs) ToTemplateScatterPlotConfigurationPtrOutputWithContext(ctx context.Context) TemplateScatterPlotConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateScatterPlotConfigurationOutput).ToTemplateScatterPlotConfigurationPtrOutputWithContext(ctx)
}

// TemplateScatterPlotConfigurationPtrInput is an input type that accepts TemplateScatterPlotConfigurationArgs, TemplateScatterPlotConfigurationPtr and TemplateScatterPlotConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateScatterPlotConfigurationPtrInput` via:
//
//	        TemplateScatterPlotConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateScatterPlotConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateScatterPlotConfigurationPtrOutput() TemplateScatterPlotConfigurationPtrOutput
	ToTemplateScatterPlotConfigurationPtrOutputWithContext(context.Context) TemplateScatterPlotConfigurationPtrOutput
}

type templateScatterPlotConfigurationPtrType TemplateScatterPlotConfigurationArgs

func TemplateScatterPlotConfigurationPtr(v *TemplateScatterPlotConfigurationArgs) TemplateScatterPlotConfigurationPtrInput {
	return (*templateScatterPlotConfigurationPtrType)(v)
}

func (*templateScatterPlotConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateScatterPlotConfiguration)(nil)).Elem()
}

func (i *templateScatterPlotConfigurationPtrType) ToTemplateScatterPlotConfigurationPtrOutput() TemplateScatterPlotConfigurationPtrOutput {
	return i.ToTemplateScatterPlotConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateScatterPlotConfigurationPtrType) ToTemplateScatterPlotConfigurationPtrOutputWithContext(ctx context.Context) TemplateScatterPlotConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateScatterPlotConfigurationPtrOutput)
}

type TemplateScatterPlotConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateScatterPlotConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateScatterPlotConfiguration)(nil)).Elem()
}

func (o TemplateScatterPlotConfigurationOutput) ToTemplateScatterPlotConfigurationOutput() TemplateScatterPlotConfigurationOutput {
	return o
}

func (o TemplateScatterPlotConfigurationOutput) ToTemplateScatterPlotConfigurationOutputWithContext(ctx context.Context) TemplateScatterPlotConfigurationOutput {
	return o
}

func (o TemplateScatterPlotConfigurationOutput) ToTemplateScatterPlotConfigurationPtrOutput() TemplateScatterPlotConfigurationPtrOutput {
	return o.ToTemplateScatterPlotConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateScatterPlotConfigurationOutput) ToTemplateScatterPlotConfigurationPtrOutputWithContext(ctx context.Context) TemplateScatterPlotConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateScatterPlotConfiguration) *TemplateScatterPlotConfiguration {
		return &v
	}).(TemplateScatterPlotConfigurationPtrOutput)
}

// The options that determine if visual data labels are displayed.
func (o TemplateScatterPlotConfigurationOutput) DataLabels() TemplateDataLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateScatterPlotConfiguration) *TemplateDataLabelOptions { return v.DataLabels }).(TemplateDataLabelOptionsPtrOutput)
}

// The field wells of the visual.
func (o TemplateScatterPlotConfigurationOutput) FieldWells() TemplateScatterPlotFieldWellsPtrOutput {
	return o.ApplyT(func(v TemplateScatterPlotConfiguration) *TemplateScatterPlotFieldWells { return v.FieldWells }).(TemplateScatterPlotFieldWellsPtrOutput)
}

// The general visual interactions setup for a visual.
func (o TemplateScatterPlotConfigurationOutput) Interactions() TemplateVisualInteractionOptionsPtrOutput {
	return o.ApplyT(func(v TemplateScatterPlotConfiguration) *TemplateVisualInteractionOptions { return v.Interactions }).(TemplateVisualInteractionOptionsPtrOutput)
}

// The legend display setup of the visual.
func (o TemplateScatterPlotConfigurationOutput) Legend() TemplateLegendOptionsPtrOutput {
	return o.ApplyT(func(v TemplateScatterPlotConfiguration) *TemplateLegendOptions { return v.Legend }).(TemplateLegendOptionsPtrOutput)
}

// The sort configuration of a scatter plot.
func (o TemplateScatterPlotConfigurationOutput) SortConfiguration() TemplateScatterPlotSortConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateScatterPlotConfiguration) *TemplateScatterPlotSortConfiguration {
		return v.SortConfiguration
	}).(TemplateScatterPlotSortConfigurationPtrOutput)
}

// The legend display setup of the visual.
func (o TemplateScatterPlotConfigurationOutput) Tooltip() TemplateTooltipOptionsPtrOutput {
	return o.ApplyT(func(v TemplateScatterPlotConfiguration) *TemplateTooltipOptions { return v.Tooltip }).(TemplateTooltipOptionsPtrOutput)
}

// The palette (chart color) display setup of the visual.
func (o TemplateScatterPlotConfigurationOutput) VisualPalette() TemplateVisualPalettePtrOutput {
	return o.ApplyT(func(v TemplateScatterPlotConfiguration) *TemplateVisualPalette { return v.VisualPalette }).(TemplateVisualPalettePtrOutput)
}

// The label display options (grid line, range, scale, and axis step) of the scatter plot's x-axis.
func (o TemplateScatterPlotConfigurationOutput) XAxisDisplayOptions() TemplateAxisDisplayOptionsPtrOutput {
	return o.ApplyT(func(v TemplateScatterPlotConfiguration) *TemplateAxisDisplayOptions { return v.XAxisDisplayOptions }).(TemplateAxisDisplayOptionsPtrOutput)
}

// The label options (label text, label visibility, and sort icon visibility) of the scatter plot's x-axis.
func (o TemplateScatterPlotConfigurationOutput) XAxisLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateScatterPlotConfiguration) *TemplateChartAxisLabelOptions { return v.XAxisLabelOptions }).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The label display options (grid line, range, scale, and axis step) of the scatter plot's y-axis.
func (o TemplateScatterPlotConfigurationOutput) YAxisDisplayOptions() TemplateAxisDisplayOptionsPtrOutput {
	return o.ApplyT(func(v TemplateScatterPlotConfiguration) *TemplateAxisDisplayOptions { return v.YAxisDisplayOptions }).(TemplateAxisDisplayOptionsPtrOutput)
}

// The label options (label text, label visibility, and sort icon visibility) of the scatter plot's y-axis.
func (o TemplateScatterPlotConfigurationOutput) YAxisLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateScatterPlotConfiguration) *TemplateChartAxisLabelOptions { return v.YAxisLabelOptions }).(TemplateChartAxisLabelOptionsPtrOutput)
}

type TemplateScatterPlotConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateScatterPlotConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateScatterPlotConfiguration)(nil)).Elem()
}

func (o TemplateScatterPlotConfigurationPtrOutput) ToTemplateScatterPlotConfigurationPtrOutput() TemplateScatterPlotConfigurationPtrOutput {
	return o
}

func (o TemplateScatterPlotConfigurationPtrOutput) ToTemplateScatterPlotConfigurationPtrOutputWithContext(ctx context.Context) TemplateScatterPlotConfigurationPtrOutput {
	return o
}

func (o TemplateScatterPlotConfigurationPtrOutput) Elem() TemplateScatterPlotConfigurationOutput {
	return o.ApplyT(func(v *TemplateScatterPlotConfiguration) TemplateScatterPlotConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateScatterPlotConfiguration
		return ret
	}).(TemplateScatterPlotConfigurationOutput)
}

// The options that determine if visual data labels are displayed.
func (o TemplateScatterPlotConfigurationPtrOutput) DataLabels() TemplateDataLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateScatterPlotConfiguration) *TemplateDataLabelOptions {
		if v == nil {
			return nil
		}
		return v.DataLabels
	}).(TemplateDataLabelOptionsPtrOutput)
}

// The field wells of the visual.
func (o TemplateScatterPlotConfigurationPtrOutput) FieldWells() TemplateScatterPlotFieldWellsPtrOutput {
	return o.ApplyT(func(v *TemplateScatterPlotConfiguration) *TemplateScatterPlotFieldWells {
		if v == nil {
			return nil
		}
		return v.FieldWells
	}).(TemplateScatterPlotFieldWellsPtrOutput)
}

// The general visual interactions setup for a visual.
func (o TemplateScatterPlotConfigurationPtrOutput) Interactions() TemplateVisualInteractionOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateScatterPlotConfiguration) *TemplateVisualInteractionOptions {
		if v == nil {
			return nil
		}
		return v.Interactions
	}).(TemplateVisualInteractionOptionsPtrOutput)
}

// The legend display setup of the visual.
func (o TemplateScatterPlotConfigurationPtrOutput) Legend() TemplateLegendOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateScatterPlotConfiguration) *TemplateLegendOptions {
		if v == nil {
			return nil
		}
		return v.Legend
	}).(TemplateLegendOptionsPtrOutput)
}

// The sort configuration of a scatter plot.
func (o TemplateScatterPlotConfigurationPtrOutput) SortConfiguration() TemplateScatterPlotSortConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateScatterPlotConfiguration) *TemplateScatterPlotSortConfiguration {
		if v == nil {
			return nil
		}
		return v.SortConfiguration
	}).(TemplateScatterPlotSortConfigurationPtrOutput)
}

// The legend display setup of the visual.
func (o TemplateScatterPlotConfigurationPtrOutput) Tooltip() TemplateTooltipOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateScatterPlotConfiguration) *TemplateTooltipOptions {
		if v == nil {
			return nil
		}
		return v.Tooltip
	}).(TemplateTooltipOptionsPtrOutput)
}

// The palette (chart color) display setup of the visual.
func (o TemplateScatterPlotConfigurationPtrOutput) VisualPalette() TemplateVisualPalettePtrOutput {
	return o.ApplyT(func(v *TemplateScatterPlotConfiguration) *TemplateVisualPalette {
		if v == nil {
			return nil
		}
		return v.VisualPalette
	}).(TemplateVisualPalettePtrOutput)
}

// The label display options (grid line, range, scale, and axis step) of the scatter plot's x-axis.
func (o TemplateScatterPlotConfigurationPtrOutput) XAxisDisplayOptions() TemplateAxisDisplayOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateScatterPlotConfiguration) *TemplateAxisDisplayOptions {
		if v == nil {
			return nil
		}
		return v.XAxisDisplayOptions
	}).(TemplateAxisDisplayOptionsPtrOutput)
}

// The label options (label text, label visibility, and sort icon visibility) of the scatter plot's x-axis.
func (o TemplateScatterPlotConfigurationPtrOutput) XAxisLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateScatterPlotConfiguration) *TemplateChartAxisLabelOptions {
		if v == nil {
			return nil
		}
		return v.XAxisLabelOptions
	}).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The label display options (grid line, range, scale, and axis step) of the scatter plot's y-axis.
func (o TemplateScatterPlotConfigurationPtrOutput) YAxisDisplayOptions() TemplateAxisDisplayOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateScatterPlotConfiguration) *TemplateAxisDisplayOptions {
		if v == nil {
			return nil
		}
		return v.YAxisDisplayOptions
	}).(TemplateAxisDisplayOptionsPtrOutput)
}

// The label options (label text, label visibility, and sort icon visibility) of the scatter plot's y-axis.
func (o TemplateScatterPlotConfigurationPtrOutput) YAxisLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateScatterPlotConfiguration) *TemplateChartAxisLabelOptions {
		if v == nil {
			return nil
		}
		return v.YAxisLabelOptions
	}).(TemplateChartAxisLabelOptionsPtrOutput)
}

type TemplateScatterPlotFieldWells struct {
	// The aggregated field wells of a scatter plot. The x and y-axes of scatter plots with aggregated field wells are aggregated by category, label, or both.
	ScatterPlotCategoricallyAggregatedFieldWells *TemplateScatterPlotCategoricallyAggregatedFieldWells `pulumi:"scatterPlotCategoricallyAggregatedFieldWells"`
	// The unaggregated field wells of a scatter plot. The x and y-axes of these scatter plots are unaggregated.
	ScatterPlotUnaggregatedFieldWells *TemplateScatterPlotUnaggregatedFieldWells `pulumi:"scatterPlotUnaggregatedFieldWells"`
}

// TemplateScatterPlotFieldWellsInput is an input type that accepts TemplateScatterPlotFieldWellsArgs and TemplateScatterPlotFieldWellsOutput values.
// You can construct a concrete instance of `TemplateScatterPlotFieldWellsInput` via:
//
//	TemplateScatterPlotFieldWellsArgs{...}
type TemplateScatterPlotFieldWellsInput interface {
	pulumi.Input

	ToTemplateScatterPlotFieldWellsOutput() TemplateScatterPlotFieldWellsOutput
	ToTemplateScatterPlotFieldWellsOutputWithContext(context.Context) TemplateScatterPlotFieldWellsOutput
}

type TemplateScatterPlotFieldWellsArgs struct {
	// The aggregated field wells of a scatter plot. The x and y-axes of scatter plots with aggregated field wells are aggregated by category, label, or both.
	ScatterPlotCategoricallyAggregatedFieldWells TemplateScatterPlotCategoricallyAggregatedFieldWellsPtrInput `pulumi:"scatterPlotCategoricallyAggregatedFieldWells"`
	// The unaggregated field wells of a scatter plot. The x and y-axes of these scatter plots are unaggregated.
	ScatterPlotUnaggregatedFieldWells TemplateScatterPlotUnaggregatedFieldWellsPtrInput `pulumi:"scatterPlotUnaggregatedFieldWells"`
}

func (TemplateScatterPlotFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateScatterPlotFieldWells)(nil)).Elem()
}

func (i TemplateScatterPlotFieldWellsArgs) ToTemplateScatterPlotFieldWellsOutput() TemplateScatterPlotFieldWellsOutput {
	return i.ToTemplateScatterPlotFieldWellsOutputWithContext(context.Background())
}

func (i TemplateScatterPlotFieldWellsArgs) ToTemplateScatterPlotFieldWellsOutputWithContext(ctx context.Context) TemplateScatterPlotFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateScatterPlotFieldWellsOutput)
}

func (i TemplateScatterPlotFieldWellsArgs) ToTemplateScatterPlotFieldWellsPtrOutput() TemplateScatterPlotFieldWellsPtrOutput {
	return i.ToTemplateScatterPlotFieldWellsPtrOutputWithContext(context.Background())
}

func (i TemplateScatterPlotFieldWellsArgs) ToTemplateScatterPlotFieldWellsPtrOutputWithContext(ctx context.Context) TemplateScatterPlotFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateScatterPlotFieldWellsOutput).ToTemplateScatterPlotFieldWellsPtrOutputWithContext(ctx)
}

// TemplateScatterPlotFieldWellsPtrInput is an input type that accepts TemplateScatterPlotFieldWellsArgs, TemplateScatterPlotFieldWellsPtr and TemplateScatterPlotFieldWellsPtrOutput values.
// You can construct a concrete instance of `TemplateScatterPlotFieldWellsPtrInput` via:
//
//	        TemplateScatterPlotFieldWellsArgs{...}
//
//	or:
//
//	        nil
type TemplateScatterPlotFieldWellsPtrInput interface {
	pulumi.Input

	ToTemplateScatterPlotFieldWellsPtrOutput() TemplateScatterPlotFieldWellsPtrOutput
	ToTemplateScatterPlotFieldWellsPtrOutputWithContext(context.Context) TemplateScatterPlotFieldWellsPtrOutput
}

type templateScatterPlotFieldWellsPtrType TemplateScatterPlotFieldWellsArgs

func TemplateScatterPlotFieldWellsPtr(v *TemplateScatterPlotFieldWellsArgs) TemplateScatterPlotFieldWellsPtrInput {
	return (*templateScatterPlotFieldWellsPtrType)(v)
}

func (*templateScatterPlotFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateScatterPlotFieldWells)(nil)).Elem()
}

func (i *templateScatterPlotFieldWellsPtrType) ToTemplateScatterPlotFieldWellsPtrOutput() TemplateScatterPlotFieldWellsPtrOutput {
	return i.ToTemplateScatterPlotFieldWellsPtrOutputWithContext(context.Background())
}

func (i *templateScatterPlotFieldWellsPtrType) ToTemplateScatterPlotFieldWellsPtrOutputWithContext(ctx context.Context) TemplateScatterPlotFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateScatterPlotFieldWellsPtrOutput)
}

type TemplateScatterPlotFieldWellsOutput struct{ *pulumi.OutputState }

func (TemplateScatterPlotFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateScatterPlotFieldWells)(nil)).Elem()
}

func (o TemplateScatterPlotFieldWellsOutput) ToTemplateScatterPlotFieldWellsOutput() TemplateScatterPlotFieldWellsOutput {
	return o
}

func (o TemplateScatterPlotFieldWellsOutput) ToTemplateScatterPlotFieldWellsOutputWithContext(ctx context.Context) TemplateScatterPlotFieldWellsOutput {
	return o
}

func (o TemplateScatterPlotFieldWellsOutput) ToTemplateScatterPlotFieldWellsPtrOutput() TemplateScatterPlotFieldWellsPtrOutput {
	return o.ToTemplateScatterPlotFieldWellsPtrOutputWithContext(context.Background())
}

func (o TemplateScatterPlotFieldWellsOutput) ToTemplateScatterPlotFieldWellsPtrOutputWithContext(ctx context.Context) TemplateScatterPlotFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateScatterPlotFieldWells) *TemplateScatterPlotFieldWells {
		return &v
	}).(TemplateScatterPlotFieldWellsPtrOutput)
}

// The aggregated field wells of a scatter plot. The x and y-axes of scatter plots with aggregated field wells are aggregated by category, label, or both.
func (o TemplateScatterPlotFieldWellsOutput) ScatterPlotCategoricallyAggregatedFieldWells() TemplateScatterPlotCategoricallyAggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v TemplateScatterPlotFieldWells) *TemplateScatterPlotCategoricallyAggregatedFieldWells {
		return v.ScatterPlotCategoricallyAggregatedFieldWells
	}).(TemplateScatterPlotCategoricallyAggregatedFieldWellsPtrOutput)
}

// The unaggregated field wells of a scatter plot. The x and y-axes of these scatter plots are unaggregated.
func (o TemplateScatterPlotFieldWellsOutput) ScatterPlotUnaggregatedFieldWells() TemplateScatterPlotUnaggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v TemplateScatterPlotFieldWells) *TemplateScatterPlotUnaggregatedFieldWells {
		return v.ScatterPlotUnaggregatedFieldWells
	}).(TemplateScatterPlotUnaggregatedFieldWellsPtrOutput)
}

type TemplateScatterPlotFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (TemplateScatterPlotFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateScatterPlotFieldWells)(nil)).Elem()
}

func (o TemplateScatterPlotFieldWellsPtrOutput) ToTemplateScatterPlotFieldWellsPtrOutput() TemplateScatterPlotFieldWellsPtrOutput {
	return o
}

func (o TemplateScatterPlotFieldWellsPtrOutput) ToTemplateScatterPlotFieldWellsPtrOutputWithContext(ctx context.Context) TemplateScatterPlotFieldWellsPtrOutput {
	return o
}

func (o TemplateScatterPlotFieldWellsPtrOutput) Elem() TemplateScatterPlotFieldWellsOutput {
	return o.ApplyT(func(v *TemplateScatterPlotFieldWells) TemplateScatterPlotFieldWells {
		if v != nil {
			return *v
		}
		var ret TemplateScatterPlotFieldWells
		return ret
	}).(TemplateScatterPlotFieldWellsOutput)
}

// The aggregated field wells of a scatter plot. The x and y-axes of scatter plots with aggregated field wells are aggregated by category, label, or both.
func (o TemplateScatterPlotFieldWellsPtrOutput) ScatterPlotCategoricallyAggregatedFieldWells() TemplateScatterPlotCategoricallyAggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v *TemplateScatterPlotFieldWells) *TemplateScatterPlotCategoricallyAggregatedFieldWells {
		if v == nil {
			return nil
		}
		return v.ScatterPlotCategoricallyAggregatedFieldWells
	}).(TemplateScatterPlotCategoricallyAggregatedFieldWellsPtrOutput)
}

// The unaggregated field wells of a scatter plot. The x and y-axes of these scatter plots are unaggregated.
func (o TemplateScatterPlotFieldWellsPtrOutput) ScatterPlotUnaggregatedFieldWells() TemplateScatterPlotUnaggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v *TemplateScatterPlotFieldWells) *TemplateScatterPlotUnaggregatedFieldWells {
		if v == nil {
			return nil
		}
		return v.ScatterPlotUnaggregatedFieldWells
	}).(TemplateScatterPlotUnaggregatedFieldWellsPtrOutput)
}

type TemplateScatterPlotSortConfiguration struct {
	ScatterPlotLimitConfiguration *TemplateItemsLimitConfiguration `pulumi:"scatterPlotLimitConfiguration"`
}

// TemplateScatterPlotSortConfigurationInput is an input type that accepts TemplateScatterPlotSortConfigurationArgs and TemplateScatterPlotSortConfigurationOutput values.
// You can construct a concrete instance of `TemplateScatterPlotSortConfigurationInput` via:
//
//	TemplateScatterPlotSortConfigurationArgs{...}
type TemplateScatterPlotSortConfigurationInput interface {
	pulumi.Input

	ToTemplateScatterPlotSortConfigurationOutput() TemplateScatterPlotSortConfigurationOutput
	ToTemplateScatterPlotSortConfigurationOutputWithContext(context.Context) TemplateScatterPlotSortConfigurationOutput
}

type TemplateScatterPlotSortConfigurationArgs struct {
	ScatterPlotLimitConfiguration TemplateItemsLimitConfigurationPtrInput `pulumi:"scatterPlotLimitConfiguration"`
}

func (TemplateScatterPlotSortConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateScatterPlotSortConfiguration)(nil)).Elem()
}

func (i TemplateScatterPlotSortConfigurationArgs) ToTemplateScatterPlotSortConfigurationOutput() TemplateScatterPlotSortConfigurationOutput {
	return i.ToTemplateScatterPlotSortConfigurationOutputWithContext(context.Background())
}

func (i TemplateScatterPlotSortConfigurationArgs) ToTemplateScatterPlotSortConfigurationOutputWithContext(ctx context.Context) TemplateScatterPlotSortConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateScatterPlotSortConfigurationOutput)
}

func (i TemplateScatterPlotSortConfigurationArgs) ToTemplateScatterPlotSortConfigurationPtrOutput() TemplateScatterPlotSortConfigurationPtrOutput {
	return i.ToTemplateScatterPlotSortConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateScatterPlotSortConfigurationArgs) ToTemplateScatterPlotSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateScatterPlotSortConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateScatterPlotSortConfigurationOutput).ToTemplateScatterPlotSortConfigurationPtrOutputWithContext(ctx)
}

// TemplateScatterPlotSortConfigurationPtrInput is an input type that accepts TemplateScatterPlotSortConfigurationArgs, TemplateScatterPlotSortConfigurationPtr and TemplateScatterPlotSortConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateScatterPlotSortConfigurationPtrInput` via:
//
//	        TemplateScatterPlotSortConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateScatterPlotSortConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateScatterPlotSortConfigurationPtrOutput() TemplateScatterPlotSortConfigurationPtrOutput
	ToTemplateScatterPlotSortConfigurationPtrOutputWithContext(context.Context) TemplateScatterPlotSortConfigurationPtrOutput
}

type templateScatterPlotSortConfigurationPtrType TemplateScatterPlotSortConfigurationArgs

func TemplateScatterPlotSortConfigurationPtr(v *TemplateScatterPlotSortConfigurationArgs) TemplateScatterPlotSortConfigurationPtrInput {
	return (*templateScatterPlotSortConfigurationPtrType)(v)
}

func (*templateScatterPlotSortConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateScatterPlotSortConfiguration)(nil)).Elem()
}

func (i *templateScatterPlotSortConfigurationPtrType) ToTemplateScatterPlotSortConfigurationPtrOutput() TemplateScatterPlotSortConfigurationPtrOutput {
	return i.ToTemplateScatterPlotSortConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateScatterPlotSortConfigurationPtrType) ToTemplateScatterPlotSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateScatterPlotSortConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateScatterPlotSortConfigurationPtrOutput)
}

type TemplateScatterPlotSortConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateScatterPlotSortConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateScatterPlotSortConfiguration)(nil)).Elem()
}

func (o TemplateScatterPlotSortConfigurationOutput) ToTemplateScatterPlotSortConfigurationOutput() TemplateScatterPlotSortConfigurationOutput {
	return o
}

func (o TemplateScatterPlotSortConfigurationOutput) ToTemplateScatterPlotSortConfigurationOutputWithContext(ctx context.Context) TemplateScatterPlotSortConfigurationOutput {
	return o
}

func (o TemplateScatterPlotSortConfigurationOutput) ToTemplateScatterPlotSortConfigurationPtrOutput() TemplateScatterPlotSortConfigurationPtrOutput {
	return o.ToTemplateScatterPlotSortConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateScatterPlotSortConfigurationOutput) ToTemplateScatterPlotSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateScatterPlotSortConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateScatterPlotSortConfiguration) *TemplateScatterPlotSortConfiguration {
		return &v
	}).(TemplateScatterPlotSortConfigurationPtrOutput)
}

func (o TemplateScatterPlotSortConfigurationOutput) ScatterPlotLimitConfiguration() TemplateItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateScatterPlotSortConfiguration) *TemplateItemsLimitConfiguration {
		return v.ScatterPlotLimitConfiguration
	}).(TemplateItemsLimitConfigurationPtrOutput)
}

type TemplateScatterPlotSortConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateScatterPlotSortConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateScatterPlotSortConfiguration)(nil)).Elem()
}

func (o TemplateScatterPlotSortConfigurationPtrOutput) ToTemplateScatterPlotSortConfigurationPtrOutput() TemplateScatterPlotSortConfigurationPtrOutput {
	return o
}

func (o TemplateScatterPlotSortConfigurationPtrOutput) ToTemplateScatterPlotSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateScatterPlotSortConfigurationPtrOutput {
	return o
}

func (o TemplateScatterPlotSortConfigurationPtrOutput) Elem() TemplateScatterPlotSortConfigurationOutput {
	return o.ApplyT(func(v *TemplateScatterPlotSortConfiguration) TemplateScatterPlotSortConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateScatterPlotSortConfiguration
		return ret
	}).(TemplateScatterPlotSortConfigurationOutput)
}

func (o TemplateScatterPlotSortConfigurationPtrOutput) ScatterPlotLimitConfiguration() TemplateItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateScatterPlotSortConfiguration) *TemplateItemsLimitConfiguration {
		if v == nil {
			return nil
		}
		return v.ScatterPlotLimitConfiguration
	}).(TemplateItemsLimitConfigurationPtrOutput)
}

type TemplateScatterPlotUnaggregatedFieldWells struct {
	// The category field well of a scatter plot.
	Category []TemplateDimensionField `pulumi:"category"`
	// The label field well of a scatter plot.
	Label []TemplateDimensionField `pulumi:"label"`
	// The size field well of a scatter plot.
	Size []TemplateMeasureField `pulumi:"size"`
	// The x-axis field well of a scatter plot.
	//
	// The x-axis is a dimension field and cannot be aggregated.
	XAxis []TemplateDimensionField `pulumi:"xAxis"`
	// The y-axis field well of a scatter plot.
	//
	// The y-axis is a dimension field and cannot be aggregated.
	YAxis []TemplateDimensionField `pulumi:"yAxis"`
}

// TemplateScatterPlotUnaggregatedFieldWellsInput is an input type that accepts TemplateScatterPlotUnaggregatedFieldWellsArgs and TemplateScatterPlotUnaggregatedFieldWellsOutput values.
// You can construct a concrete instance of `TemplateScatterPlotUnaggregatedFieldWellsInput` via:
//
//	TemplateScatterPlotUnaggregatedFieldWellsArgs{...}
type TemplateScatterPlotUnaggregatedFieldWellsInput interface {
	pulumi.Input

	ToTemplateScatterPlotUnaggregatedFieldWellsOutput() TemplateScatterPlotUnaggregatedFieldWellsOutput
	ToTemplateScatterPlotUnaggregatedFieldWellsOutputWithContext(context.Context) TemplateScatterPlotUnaggregatedFieldWellsOutput
}

type TemplateScatterPlotUnaggregatedFieldWellsArgs struct {
	// The category field well of a scatter plot.
	Category TemplateDimensionFieldArrayInput `pulumi:"category"`
	// The label field well of a scatter plot.
	Label TemplateDimensionFieldArrayInput `pulumi:"label"`
	// The size field well of a scatter plot.
	Size TemplateMeasureFieldArrayInput `pulumi:"size"`
	// The x-axis field well of a scatter plot.
	//
	// The x-axis is a dimension field and cannot be aggregated.
	XAxis TemplateDimensionFieldArrayInput `pulumi:"xAxis"`
	// The y-axis field well of a scatter plot.
	//
	// The y-axis is a dimension field and cannot be aggregated.
	YAxis TemplateDimensionFieldArrayInput `pulumi:"yAxis"`
}

func (TemplateScatterPlotUnaggregatedFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateScatterPlotUnaggregatedFieldWells)(nil)).Elem()
}

func (i TemplateScatterPlotUnaggregatedFieldWellsArgs) ToTemplateScatterPlotUnaggregatedFieldWellsOutput() TemplateScatterPlotUnaggregatedFieldWellsOutput {
	return i.ToTemplateScatterPlotUnaggregatedFieldWellsOutputWithContext(context.Background())
}

func (i TemplateScatterPlotUnaggregatedFieldWellsArgs) ToTemplateScatterPlotUnaggregatedFieldWellsOutputWithContext(ctx context.Context) TemplateScatterPlotUnaggregatedFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateScatterPlotUnaggregatedFieldWellsOutput)
}

func (i TemplateScatterPlotUnaggregatedFieldWellsArgs) ToTemplateScatterPlotUnaggregatedFieldWellsPtrOutput() TemplateScatterPlotUnaggregatedFieldWellsPtrOutput {
	return i.ToTemplateScatterPlotUnaggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i TemplateScatterPlotUnaggregatedFieldWellsArgs) ToTemplateScatterPlotUnaggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateScatterPlotUnaggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateScatterPlotUnaggregatedFieldWellsOutput).ToTemplateScatterPlotUnaggregatedFieldWellsPtrOutputWithContext(ctx)
}

// TemplateScatterPlotUnaggregatedFieldWellsPtrInput is an input type that accepts TemplateScatterPlotUnaggregatedFieldWellsArgs, TemplateScatterPlotUnaggregatedFieldWellsPtr and TemplateScatterPlotUnaggregatedFieldWellsPtrOutput values.
// You can construct a concrete instance of `TemplateScatterPlotUnaggregatedFieldWellsPtrInput` via:
//
//	        TemplateScatterPlotUnaggregatedFieldWellsArgs{...}
//
//	or:
//
//	        nil
type TemplateScatterPlotUnaggregatedFieldWellsPtrInput interface {
	pulumi.Input

	ToTemplateScatterPlotUnaggregatedFieldWellsPtrOutput() TemplateScatterPlotUnaggregatedFieldWellsPtrOutput
	ToTemplateScatterPlotUnaggregatedFieldWellsPtrOutputWithContext(context.Context) TemplateScatterPlotUnaggregatedFieldWellsPtrOutput
}

type templateScatterPlotUnaggregatedFieldWellsPtrType TemplateScatterPlotUnaggregatedFieldWellsArgs

func TemplateScatterPlotUnaggregatedFieldWellsPtr(v *TemplateScatterPlotUnaggregatedFieldWellsArgs) TemplateScatterPlotUnaggregatedFieldWellsPtrInput {
	return (*templateScatterPlotUnaggregatedFieldWellsPtrType)(v)
}

func (*templateScatterPlotUnaggregatedFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateScatterPlotUnaggregatedFieldWells)(nil)).Elem()
}

func (i *templateScatterPlotUnaggregatedFieldWellsPtrType) ToTemplateScatterPlotUnaggregatedFieldWellsPtrOutput() TemplateScatterPlotUnaggregatedFieldWellsPtrOutput {
	return i.ToTemplateScatterPlotUnaggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i *templateScatterPlotUnaggregatedFieldWellsPtrType) ToTemplateScatterPlotUnaggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateScatterPlotUnaggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateScatterPlotUnaggregatedFieldWellsPtrOutput)
}

type TemplateScatterPlotUnaggregatedFieldWellsOutput struct{ *pulumi.OutputState }

func (TemplateScatterPlotUnaggregatedFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateScatterPlotUnaggregatedFieldWells)(nil)).Elem()
}

func (o TemplateScatterPlotUnaggregatedFieldWellsOutput) ToTemplateScatterPlotUnaggregatedFieldWellsOutput() TemplateScatterPlotUnaggregatedFieldWellsOutput {
	return o
}

func (o TemplateScatterPlotUnaggregatedFieldWellsOutput) ToTemplateScatterPlotUnaggregatedFieldWellsOutputWithContext(ctx context.Context) TemplateScatterPlotUnaggregatedFieldWellsOutput {
	return o
}

func (o TemplateScatterPlotUnaggregatedFieldWellsOutput) ToTemplateScatterPlotUnaggregatedFieldWellsPtrOutput() TemplateScatterPlotUnaggregatedFieldWellsPtrOutput {
	return o.ToTemplateScatterPlotUnaggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (o TemplateScatterPlotUnaggregatedFieldWellsOutput) ToTemplateScatterPlotUnaggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateScatterPlotUnaggregatedFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateScatterPlotUnaggregatedFieldWells) *TemplateScatterPlotUnaggregatedFieldWells {
		return &v
	}).(TemplateScatterPlotUnaggregatedFieldWellsPtrOutput)
}

// The category field well of a scatter plot.
func (o TemplateScatterPlotUnaggregatedFieldWellsOutput) Category() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v TemplateScatterPlotUnaggregatedFieldWells) []TemplateDimensionField { return v.Category }).(TemplateDimensionFieldArrayOutput)
}

// The label field well of a scatter plot.
func (o TemplateScatterPlotUnaggregatedFieldWellsOutput) Label() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v TemplateScatterPlotUnaggregatedFieldWells) []TemplateDimensionField { return v.Label }).(TemplateDimensionFieldArrayOutput)
}

// The size field well of a scatter plot.
func (o TemplateScatterPlotUnaggregatedFieldWellsOutput) Size() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v TemplateScatterPlotUnaggregatedFieldWells) []TemplateMeasureField { return v.Size }).(TemplateMeasureFieldArrayOutput)
}

// The x-axis field well of a scatter plot.
//
// The x-axis is a dimension field and cannot be aggregated.
func (o TemplateScatterPlotUnaggregatedFieldWellsOutput) XAxis() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v TemplateScatterPlotUnaggregatedFieldWells) []TemplateDimensionField { return v.XAxis }).(TemplateDimensionFieldArrayOutput)
}

// The y-axis field well of a scatter plot.
//
// The y-axis is a dimension field and cannot be aggregated.
func (o TemplateScatterPlotUnaggregatedFieldWellsOutput) YAxis() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v TemplateScatterPlotUnaggregatedFieldWells) []TemplateDimensionField { return v.YAxis }).(TemplateDimensionFieldArrayOutput)
}

type TemplateScatterPlotUnaggregatedFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (TemplateScatterPlotUnaggregatedFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateScatterPlotUnaggregatedFieldWells)(nil)).Elem()
}

func (o TemplateScatterPlotUnaggregatedFieldWellsPtrOutput) ToTemplateScatterPlotUnaggregatedFieldWellsPtrOutput() TemplateScatterPlotUnaggregatedFieldWellsPtrOutput {
	return o
}

func (o TemplateScatterPlotUnaggregatedFieldWellsPtrOutput) ToTemplateScatterPlotUnaggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateScatterPlotUnaggregatedFieldWellsPtrOutput {
	return o
}

func (o TemplateScatterPlotUnaggregatedFieldWellsPtrOutput) Elem() TemplateScatterPlotUnaggregatedFieldWellsOutput {
	return o.ApplyT(func(v *TemplateScatterPlotUnaggregatedFieldWells) TemplateScatterPlotUnaggregatedFieldWells {
		if v != nil {
			return *v
		}
		var ret TemplateScatterPlotUnaggregatedFieldWells
		return ret
	}).(TemplateScatterPlotUnaggregatedFieldWellsOutput)
}

// The category field well of a scatter plot.
func (o TemplateScatterPlotUnaggregatedFieldWellsPtrOutput) Category() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v *TemplateScatterPlotUnaggregatedFieldWells) []TemplateDimensionField {
		if v == nil {
			return nil
		}
		return v.Category
	}).(TemplateDimensionFieldArrayOutput)
}

// The label field well of a scatter plot.
func (o TemplateScatterPlotUnaggregatedFieldWellsPtrOutput) Label() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v *TemplateScatterPlotUnaggregatedFieldWells) []TemplateDimensionField {
		if v == nil {
			return nil
		}
		return v.Label
	}).(TemplateDimensionFieldArrayOutput)
}

// The size field well of a scatter plot.
func (o TemplateScatterPlotUnaggregatedFieldWellsPtrOutput) Size() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v *TemplateScatterPlotUnaggregatedFieldWells) []TemplateMeasureField {
		if v == nil {
			return nil
		}
		return v.Size
	}).(TemplateMeasureFieldArrayOutput)
}

// The x-axis field well of a scatter plot.
//
// The x-axis is a dimension field and cannot be aggregated.
func (o TemplateScatterPlotUnaggregatedFieldWellsPtrOutput) XAxis() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v *TemplateScatterPlotUnaggregatedFieldWells) []TemplateDimensionField {
		if v == nil {
			return nil
		}
		return v.XAxis
	}).(TemplateDimensionFieldArrayOutput)
}

// The y-axis field well of a scatter plot.
//
// The y-axis is a dimension field and cannot be aggregated.
func (o TemplateScatterPlotUnaggregatedFieldWellsPtrOutput) YAxis() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v *TemplateScatterPlotUnaggregatedFieldWells) []TemplateDimensionField {
		if v == nil {
			return nil
		}
		return v.YAxis
	}).(TemplateDimensionFieldArrayOutput)
}

type TemplateScatterPlotVisual struct {
	// The list of custom actions that are configured for a visual.
	Actions []TemplateVisualCustomAction `pulumi:"actions"`
	// The configuration settings of the visual.
	ChartConfiguration *TemplateScatterPlotConfiguration `pulumi:"chartConfiguration"`
	// The column hierarchy that is used during drill-downs and drill-ups.
	ColumnHierarchies []TemplateColumnHierarchy `pulumi:"columnHierarchies"`
	// The subtitle that is displayed on the visual.
	Subtitle *TemplateVisualSubtitleLabelOptions `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title *TemplateVisualTitleLabelOptions `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText *string `pulumi:"visualContentAltText"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
	VisualId string `pulumi:"visualId"`
}

// TemplateScatterPlotVisualInput is an input type that accepts TemplateScatterPlotVisualArgs and TemplateScatterPlotVisualOutput values.
// You can construct a concrete instance of `TemplateScatterPlotVisualInput` via:
//
//	TemplateScatterPlotVisualArgs{...}
type TemplateScatterPlotVisualInput interface {
	pulumi.Input

	ToTemplateScatterPlotVisualOutput() TemplateScatterPlotVisualOutput
	ToTemplateScatterPlotVisualOutputWithContext(context.Context) TemplateScatterPlotVisualOutput
}

type TemplateScatterPlotVisualArgs struct {
	// The list of custom actions that are configured for a visual.
	Actions TemplateVisualCustomActionArrayInput `pulumi:"actions"`
	// The configuration settings of the visual.
	ChartConfiguration TemplateScatterPlotConfigurationPtrInput `pulumi:"chartConfiguration"`
	// The column hierarchy that is used during drill-downs and drill-ups.
	ColumnHierarchies TemplateColumnHierarchyArrayInput `pulumi:"columnHierarchies"`
	// The subtitle that is displayed on the visual.
	Subtitle TemplateVisualSubtitleLabelOptionsPtrInput `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title TemplateVisualTitleLabelOptionsPtrInput `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText pulumi.StringPtrInput `pulumi:"visualContentAltText"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
	VisualId pulumi.StringInput `pulumi:"visualId"`
}

func (TemplateScatterPlotVisualArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateScatterPlotVisual)(nil)).Elem()
}

func (i TemplateScatterPlotVisualArgs) ToTemplateScatterPlotVisualOutput() TemplateScatterPlotVisualOutput {
	return i.ToTemplateScatterPlotVisualOutputWithContext(context.Background())
}

func (i TemplateScatterPlotVisualArgs) ToTemplateScatterPlotVisualOutputWithContext(ctx context.Context) TemplateScatterPlotVisualOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateScatterPlotVisualOutput)
}

func (i TemplateScatterPlotVisualArgs) ToTemplateScatterPlotVisualPtrOutput() TemplateScatterPlotVisualPtrOutput {
	return i.ToTemplateScatterPlotVisualPtrOutputWithContext(context.Background())
}

func (i TemplateScatterPlotVisualArgs) ToTemplateScatterPlotVisualPtrOutputWithContext(ctx context.Context) TemplateScatterPlotVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateScatterPlotVisualOutput).ToTemplateScatterPlotVisualPtrOutputWithContext(ctx)
}

// TemplateScatterPlotVisualPtrInput is an input type that accepts TemplateScatterPlotVisualArgs, TemplateScatterPlotVisualPtr and TemplateScatterPlotVisualPtrOutput values.
// You can construct a concrete instance of `TemplateScatterPlotVisualPtrInput` via:
//
//	        TemplateScatterPlotVisualArgs{...}
//
//	or:
//
//	        nil
type TemplateScatterPlotVisualPtrInput interface {
	pulumi.Input

	ToTemplateScatterPlotVisualPtrOutput() TemplateScatterPlotVisualPtrOutput
	ToTemplateScatterPlotVisualPtrOutputWithContext(context.Context) TemplateScatterPlotVisualPtrOutput
}

type templateScatterPlotVisualPtrType TemplateScatterPlotVisualArgs

func TemplateScatterPlotVisualPtr(v *TemplateScatterPlotVisualArgs) TemplateScatterPlotVisualPtrInput {
	return (*templateScatterPlotVisualPtrType)(v)
}

func (*templateScatterPlotVisualPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateScatterPlotVisual)(nil)).Elem()
}

func (i *templateScatterPlotVisualPtrType) ToTemplateScatterPlotVisualPtrOutput() TemplateScatterPlotVisualPtrOutput {
	return i.ToTemplateScatterPlotVisualPtrOutputWithContext(context.Background())
}

func (i *templateScatterPlotVisualPtrType) ToTemplateScatterPlotVisualPtrOutputWithContext(ctx context.Context) TemplateScatterPlotVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateScatterPlotVisualPtrOutput)
}

type TemplateScatterPlotVisualOutput struct{ *pulumi.OutputState }

func (TemplateScatterPlotVisualOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateScatterPlotVisual)(nil)).Elem()
}

func (o TemplateScatterPlotVisualOutput) ToTemplateScatterPlotVisualOutput() TemplateScatterPlotVisualOutput {
	return o
}

func (o TemplateScatterPlotVisualOutput) ToTemplateScatterPlotVisualOutputWithContext(ctx context.Context) TemplateScatterPlotVisualOutput {
	return o
}

func (o TemplateScatterPlotVisualOutput) ToTemplateScatterPlotVisualPtrOutput() TemplateScatterPlotVisualPtrOutput {
	return o.ToTemplateScatterPlotVisualPtrOutputWithContext(context.Background())
}

func (o TemplateScatterPlotVisualOutput) ToTemplateScatterPlotVisualPtrOutputWithContext(ctx context.Context) TemplateScatterPlotVisualPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateScatterPlotVisual) *TemplateScatterPlotVisual {
		return &v
	}).(TemplateScatterPlotVisualPtrOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplateScatterPlotVisualOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v TemplateScatterPlotVisual) []TemplateVisualCustomAction { return v.Actions }).(TemplateVisualCustomActionArrayOutput)
}

// The configuration settings of the visual.
func (o TemplateScatterPlotVisualOutput) ChartConfiguration() TemplateScatterPlotConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateScatterPlotVisual) *TemplateScatterPlotConfiguration { return v.ChartConfiguration }).(TemplateScatterPlotConfigurationPtrOutput)
}

// The column hierarchy that is used during drill-downs and drill-ups.
func (o TemplateScatterPlotVisualOutput) ColumnHierarchies() TemplateColumnHierarchyArrayOutput {
	return o.ApplyT(func(v TemplateScatterPlotVisual) []TemplateColumnHierarchy { return v.ColumnHierarchies }).(TemplateColumnHierarchyArrayOutput)
}

// The subtitle that is displayed on the visual.
func (o TemplateScatterPlotVisualOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateScatterPlotVisual) *TemplateVisualSubtitleLabelOptions { return v.Subtitle }).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o TemplateScatterPlotVisualOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateScatterPlotVisual) *TemplateVisualTitleLabelOptions { return v.Title }).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o TemplateScatterPlotVisualOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateScatterPlotVisual) *string { return v.VisualContentAltText }).(pulumi.StringPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
func (o TemplateScatterPlotVisualOutput) VisualId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateScatterPlotVisual) string { return v.VisualId }).(pulumi.StringOutput)
}

type TemplateScatterPlotVisualPtrOutput struct{ *pulumi.OutputState }

func (TemplateScatterPlotVisualPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateScatterPlotVisual)(nil)).Elem()
}

func (o TemplateScatterPlotVisualPtrOutput) ToTemplateScatterPlotVisualPtrOutput() TemplateScatterPlotVisualPtrOutput {
	return o
}

func (o TemplateScatterPlotVisualPtrOutput) ToTemplateScatterPlotVisualPtrOutputWithContext(ctx context.Context) TemplateScatterPlotVisualPtrOutput {
	return o
}

func (o TemplateScatterPlotVisualPtrOutput) Elem() TemplateScatterPlotVisualOutput {
	return o.ApplyT(func(v *TemplateScatterPlotVisual) TemplateScatterPlotVisual {
		if v != nil {
			return *v
		}
		var ret TemplateScatterPlotVisual
		return ret
	}).(TemplateScatterPlotVisualOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplateScatterPlotVisualPtrOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v *TemplateScatterPlotVisual) []TemplateVisualCustomAction {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(TemplateVisualCustomActionArrayOutput)
}

// The configuration settings of the visual.
func (o TemplateScatterPlotVisualPtrOutput) ChartConfiguration() TemplateScatterPlotConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateScatterPlotVisual) *TemplateScatterPlotConfiguration {
		if v == nil {
			return nil
		}
		return v.ChartConfiguration
	}).(TemplateScatterPlotConfigurationPtrOutput)
}

// The column hierarchy that is used during drill-downs and drill-ups.
func (o TemplateScatterPlotVisualPtrOutput) ColumnHierarchies() TemplateColumnHierarchyArrayOutput {
	return o.ApplyT(func(v *TemplateScatterPlotVisual) []TemplateColumnHierarchy {
		if v == nil {
			return nil
		}
		return v.ColumnHierarchies
	}).(TemplateColumnHierarchyArrayOutput)
}

// The subtitle that is displayed on the visual.
func (o TemplateScatterPlotVisualPtrOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateScatterPlotVisual) *TemplateVisualSubtitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Subtitle
	}).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o TemplateScatterPlotVisualPtrOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateScatterPlotVisual) *TemplateVisualTitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Title
	}).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o TemplateScatterPlotVisualPtrOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateScatterPlotVisual) *string {
		if v == nil {
			return nil
		}
		return v.VisualContentAltText
	}).(pulumi.StringPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
func (o TemplateScatterPlotVisualPtrOutput) VisualId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateScatterPlotVisual) *string {
		if v == nil {
			return nil
		}
		return &v.VisualId
	}).(pulumi.StringPtrOutput)
}

type TemplateScrollBarOptions struct {
	// The visibility of the data zoom scroll bar.
	Visibility interface{} `pulumi:"visibility"`
	// The visibility range for the data zoom scroll bar.
	VisibleRange *TemplateVisibleRangeOptions `pulumi:"visibleRange"`
}

// TemplateScrollBarOptionsInput is an input type that accepts TemplateScrollBarOptionsArgs and TemplateScrollBarOptionsOutput values.
// You can construct a concrete instance of `TemplateScrollBarOptionsInput` via:
//
//	TemplateScrollBarOptionsArgs{...}
type TemplateScrollBarOptionsInput interface {
	pulumi.Input

	ToTemplateScrollBarOptionsOutput() TemplateScrollBarOptionsOutput
	ToTemplateScrollBarOptionsOutputWithContext(context.Context) TemplateScrollBarOptionsOutput
}

type TemplateScrollBarOptionsArgs struct {
	// The visibility of the data zoom scroll bar.
	Visibility pulumi.Input `pulumi:"visibility"`
	// The visibility range for the data zoom scroll bar.
	VisibleRange TemplateVisibleRangeOptionsPtrInput `pulumi:"visibleRange"`
}

func (TemplateScrollBarOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateScrollBarOptions)(nil)).Elem()
}

func (i TemplateScrollBarOptionsArgs) ToTemplateScrollBarOptionsOutput() TemplateScrollBarOptionsOutput {
	return i.ToTemplateScrollBarOptionsOutputWithContext(context.Background())
}

func (i TemplateScrollBarOptionsArgs) ToTemplateScrollBarOptionsOutputWithContext(ctx context.Context) TemplateScrollBarOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateScrollBarOptionsOutput)
}

func (i TemplateScrollBarOptionsArgs) ToTemplateScrollBarOptionsPtrOutput() TemplateScrollBarOptionsPtrOutput {
	return i.ToTemplateScrollBarOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateScrollBarOptionsArgs) ToTemplateScrollBarOptionsPtrOutputWithContext(ctx context.Context) TemplateScrollBarOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateScrollBarOptionsOutput).ToTemplateScrollBarOptionsPtrOutputWithContext(ctx)
}

// TemplateScrollBarOptionsPtrInput is an input type that accepts TemplateScrollBarOptionsArgs, TemplateScrollBarOptionsPtr and TemplateScrollBarOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateScrollBarOptionsPtrInput` via:
//
//	        TemplateScrollBarOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateScrollBarOptionsPtrInput interface {
	pulumi.Input

	ToTemplateScrollBarOptionsPtrOutput() TemplateScrollBarOptionsPtrOutput
	ToTemplateScrollBarOptionsPtrOutputWithContext(context.Context) TemplateScrollBarOptionsPtrOutput
}

type templateScrollBarOptionsPtrType TemplateScrollBarOptionsArgs

func TemplateScrollBarOptionsPtr(v *TemplateScrollBarOptionsArgs) TemplateScrollBarOptionsPtrInput {
	return (*templateScrollBarOptionsPtrType)(v)
}

func (*templateScrollBarOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateScrollBarOptions)(nil)).Elem()
}

func (i *templateScrollBarOptionsPtrType) ToTemplateScrollBarOptionsPtrOutput() TemplateScrollBarOptionsPtrOutput {
	return i.ToTemplateScrollBarOptionsPtrOutputWithContext(context.Background())
}

func (i *templateScrollBarOptionsPtrType) ToTemplateScrollBarOptionsPtrOutputWithContext(ctx context.Context) TemplateScrollBarOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateScrollBarOptionsPtrOutput)
}

type TemplateScrollBarOptionsOutput struct{ *pulumi.OutputState }

func (TemplateScrollBarOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateScrollBarOptions)(nil)).Elem()
}

func (o TemplateScrollBarOptionsOutput) ToTemplateScrollBarOptionsOutput() TemplateScrollBarOptionsOutput {
	return o
}

func (o TemplateScrollBarOptionsOutput) ToTemplateScrollBarOptionsOutputWithContext(ctx context.Context) TemplateScrollBarOptionsOutput {
	return o
}

func (o TemplateScrollBarOptionsOutput) ToTemplateScrollBarOptionsPtrOutput() TemplateScrollBarOptionsPtrOutput {
	return o.ToTemplateScrollBarOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateScrollBarOptionsOutput) ToTemplateScrollBarOptionsPtrOutputWithContext(ctx context.Context) TemplateScrollBarOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateScrollBarOptions) *TemplateScrollBarOptions {
		return &v
	}).(TemplateScrollBarOptionsPtrOutput)
}

// The visibility of the data zoom scroll bar.
func (o TemplateScrollBarOptionsOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateScrollBarOptions) interface{} { return v.Visibility }).(pulumi.AnyOutput)
}

// The visibility range for the data zoom scroll bar.
func (o TemplateScrollBarOptionsOutput) VisibleRange() TemplateVisibleRangeOptionsPtrOutput {
	return o.ApplyT(func(v TemplateScrollBarOptions) *TemplateVisibleRangeOptions { return v.VisibleRange }).(TemplateVisibleRangeOptionsPtrOutput)
}

type TemplateScrollBarOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateScrollBarOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateScrollBarOptions)(nil)).Elem()
}

func (o TemplateScrollBarOptionsPtrOutput) ToTemplateScrollBarOptionsPtrOutput() TemplateScrollBarOptionsPtrOutput {
	return o
}

func (o TemplateScrollBarOptionsPtrOutput) ToTemplateScrollBarOptionsPtrOutputWithContext(ctx context.Context) TemplateScrollBarOptionsPtrOutput {
	return o
}

func (o TemplateScrollBarOptionsPtrOutput) Elem() TemplateScrollBarOptionsOutput {
	return o.ApplyT(func(v *TemplateScrollBarOptions) TemplateScrollBarOptions {
		if v != nil {
			return *v
		}
		var ret TemplateScrollBarOptions
		return ret
	}).(TemplateScrollBarOptionsOutput)
}

// The visibility of the data zoom scroll bar.
func (o TemplateScrollBarOptionsPtrOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateScrollBarOptions) interface{} {
		if v == nil {
			return nil
		}
		return v.Visibility
	}).(pulumi.AnyOutput)
}

// The visibility range for the data zoom scroll bar.
func (o TemplateScrollBarOptionsPtrOutput) VisibleRange() TemplateVisibleRangeOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateScrollBarOptions) *TemplateVisibleRangeOptions {
		if v == nil {
			return nil
		}
		return v.VisibleRange
	}).(TemplateVisibleRangeOptionsPtrOutput)
}

type TemplateSecondaryValueOptions struct {
	// Determines the visibility of the secondary value.
	Visibility interface{} `pulumi:"visibility"`
}

// TemplateSecondaryValueOptionsInput is an input type that accepts TemplateSecondaryValueOptionsArgs and TemplateSecondaryValueOptionsOutput values.
// You can construct a concrete instance of `TemplateSecondaryValueOptionsInput` via:
//
//	TemplateSecondaryValueOptionsArgs{...}
type TemplateSecondaryValueOptionsInput interface {
	pulumi.Input

	ToTemplateSecondaryValueOptionsOutput() TemplateSecondaryValueOptionsOutput
	ToTemplateSecondaryValueOptionsOutputWithContext(context.Context) TemplateSecondaryValueOptionsOutput
}

type TemplateSecondaryValueOptionsArgs struct {
	// Determines the visibility of the secondary value.
	Visibility pulumi.Input `pulumi:"visibility"`
}

func (TemplateSecondaryValueOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSecondaryValueOptions)(nil)).Elem()
}

func (i TemplateSecondaryValueOptionsArgs) ToTemplateSecondaryValueOptionsOutput() TemplateSecondaryValueOptionsOutput {
	return i.ToTemplateSecondaryValueOptionsOutputWithContext(context.Background())
}

func (i TemplateSecondaryValueOptionsArgs) ToTemplateSecondaryValueOptionsOutputWithContext(ctx context.Context) TemplateSecondaryValueOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSecondaryValueOptionsOutput)
}

func (i TemplateSecondaryValueOptionsArgs) ToTemplateSecondaryValueOptionsPtrOutput() TemplateSecondaryValueOptionsPtrOutput {
	return i.ToTemplateSecondaryValueOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateSecondaryValueOptionsArgs) ToTemplateSecondaryValueOptionsPtrOutputWithContext(ctx context.Context) TemplateSecondaryValueOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSecondaryValueOptionsOutput).ToTemplateSecondaryValueOptionsPtrOutputWithContext(ctx)
}

// TemplateSecondaryValueOptionsPtrInput is an input type that accepts TemplateSecondaryValueOptionsArgs, TemplateSecondaryValueOptionsPtr and TemplateSecondaryValueOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateSecondaryValueOptionsPtrInput` via:
//
//	        TemplateSecondaryValueOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateSecondaryValueOptionsPtrInput interface {
	pulumi.Input

	ToTemplateSecondaryValueOptionsPtrOutput() TemplateSecondaryValueOptionsPtrOutput
	ToTemplateSecondaryValueOptionsPtrOutputWithContext(context.Context) TemplateSecondaryValueOptionsPtrOutput
}

type templateSecondaryValueOptionsPtrType TemplateSecondaryValueOptionsArgs

func TemplateSecondaryValueOptionsPtr(v *TemplateSecondaryValueOptionsArgs) TemplateSecondaryValueOptionsPtrInput {
	return (*templateSecondaryValueOptionsPtrType)(v)
}

func (*templateSecondaryValueOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSecondaryValueOptions)(nil)).Elem()
}

func (i *templateSecondaryValueOptionsPtrType) ToTemplateSecondaryValueOptionsPtrOutput() TemplateSecondaryValueOptionsPtrOutput {
	return i.ToTemplateSecondaryValueOptionsPtrOutputWithContext(context.Background())
}

func (i *templateSecondaryValueOptionsPtrType) ToTemplateSecondaryValueOptionsPtrOutputWithContext(ctx context.Context) TemplateSecondaryValueOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSecondaryValueOptionsPtrOutput)
}

type TemplateSecondaryValueOptionsOutput struct{ *pulumi.OutputState }

func (TemplateSecondaryValueOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSecondaryValueOptions)(nil)).Elem()
}

func (o TemplateSecondaryValueOptionsOutput) ToTemplateSecondaryValueOptionsOutput() TemplateSecondaryValueOptionsOutput {
	return o
}

func (o TemplateSecondaryValueOptionsOutput) ToTemplateSecondaryValueOptionsOutputWithContext(ctx context.Context) TemplateSecondaryValueOptionsOutput {
	return o
}

func (o TemplateSecondaryValueOptionsOutput) ToTemplateSecondaryValueOptionsPtrOutput() TemplateSecondaryValueOptionsPtrOutput {
	return o.ToTemplateSecondaryValueOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateSecondaryValueOptionsOutput) ToTemplateSecondaryValueOptionsPtrOutputWithContext(ctx context.Context) TemplateSecondaryValueOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateSecondaryValueOptions) *TemplateSecondaryValueOptions {
		return &v
	}).(TemplateSecondaryValueOptionsPtrOutput)
}

// Determines the visibility of the secondary value.
func (o TemplateSecondaryValueOptionsOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateSecondaryValueOptions) interface{} { return v.Visibility }).(pulumi.AnyOutput)
}

type TemplateSecondaryValueOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateSecondaryValueOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSecondaryValueOptions)(nil)).Elem()
}

func (o TemplateSecondaryValueOptionsPtrOutput) ToTemplateSecondaryValueOptionsPtrOutput() TemplateSecondaryValueOptionsPtrOutput {
	return o
}

func (o TemplateSecondaryValueOptionsPtrOutput) ToTemplateSecondaryValueOptionsPtrOutputWithContext(ctx context.Context) TemplateSecondaryValueOptionsPtrOutput {
	return o
}

func (o TemplateSecondaryValueOptionsPtrOutput) Elem() TemplateSecondaryValueOptionsOutput {
	return o.ApplyT(func(v *TemplateSecondaryValueOptions) TemplateSecondaryValueOptions {
		if v != nil {
			return *v
		}
		var ret TemplateSecondaryValueOptions
		return ret
	}).(TemplateSecondaryValueOptionsOutput)
}

// Determines the visibility of the secondary value.
func (o TemplateSecondaryValueOptionsPtrOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateSecondaryValueOptions) interface{} {
		if v == nil {
			return nil
		}
		return v.Visibility
	}).(pulumi.AnyOutput)
}

type TemplateSectionAfterPageBreak struct {
	// The option that enables or disables a page break at the end of a section.
	Status *TemplateSectionPageBreakStatus `pulumi:"status"`
}

// TemplateSectionAfterPageBreakInput is an input type that accepts TemplateSectionAfterPageBreakArgs and TemplateSectionAfterPageBreakOutput values.
// You can construct a concrete instance of `TemplateSectionAfterPageBreakInput` via:
//
//	TemplateSectionAfterPageBreakArgs{...}
type TemplateSectionAfterPageBreakInput interface {
	pulumi.Input

	ToTemplateSectionAfterPageBreakOutput() TemplateSectionAfterPageBreakOutput
	ToTemplateSectionAfterPageBreakOutputWithContext(context.Context) TemplateSectionAfterPageBreakOutput
}

type TemplateSectionAfterPageBreakArgs struct {
	// The option that enables or disables a page break at the end of a section.
	Status TemplateSectionPageBreakStatusPtrInput `pulumi:"status"`
}

func (TemplateSectionAfterPageBreakArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSectionAfterPageBreak)(nil)).Elem()
}

func (i TemplateSectionAfterPageBreakArgs) ToTemplateSectionAfterPageBreakOutput() TemplateSectionAfterPageBreakOutput {
	return i.ToTemplateSectionAfterPageBreakOutputWithContext(context.Background())
}

func (i TemplateSectionAfterPageBreakArgs) ToTemplateSectionAfterPageBreakOutputWithContext(ctx context.Context) TemplateSectionAfterPageBreakOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSectionAfterPageBreakOutput)
}

func (i TemplateSectionAfterPageBreakArgs) ToTemplateSectionAfterPageBreakPtrOutput() TemplateSectionAfterPageBreakPtrOutput {
	return i.ToTemplateSectionAfterPageBreakPtrOutputWithContext(context.Background())
}

func (i TemplateSectionAfterPageBreakArgs) ToTemplateSectionAfterPageBreakPtrOutputWithContext(ctx context.Context) TemplateSectionAfterPageBreakPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSectionAfterPageBreakOutput).ToTemplateSectionAfterPageBreakPtrOutputWithContext(ctx)
}

// TemplateSectionAfterPageBreakPtrInput is an input type that accepts TemplateSectionAfterPageBreakArgs, TemplateSectionAfterPageBreakPtr and TemplateSectionAfterPageBreakPtrOutput values.
// You can construct a concrete instance of `TemplateSectionAfterPageBreakPtrInput` via:
//
//	        TemplateSectionAfterPageBreakArgs{...}
//
//	or:
//
//	        nil
type TemplateSectionAfterPageBreakPtrInput interface {
	pulumi.Input

	ToTemplateSectionAfterPageBreakPtrOutput() TemplateSectionAfterPageBreakPtrOutput
	ToTemplateSectionAfterPageBreakPtrOutputWithContext(context.Context) TemplateSectionAfterPageBreakPtrOutput
}

type templateSectionAfterPageBreakPtrType TemplateSectionAfterPageBreakArgs

func TemplateSectionAfterPageBreakPtr(v *TemplateSectionAfterPageBreakArgs) TemplateSectionAfterPageBreakPtrInput {
	return (*templateSectionAfterPageBreakPtrType)(v)
}

func (*templateSectionAfterPageBreakPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSectionAfterPageBreak)(nil)).Elem()
}

func (i *templateSectionAfterPageBreakPtrType) ToTemplateSectionAfterPageBreakPtrOutput() TemplateSectionAfterPageBreakPtrOutput {
	return i.ToTemplateSectionAfterPageBreakPtrOutputWithContext(context.Background())
}

func (i *templateSectionAfterPageBreakPtrType) ToTemplateSectionAfterPageBreakPtrOutputWithContext(ctx context.Context) TemplateSectionAfterPageBreakPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSectionAfterPageBreakPtrOutput)
}

type TemplateSectionAfterPageBreakOutput struct{ *pulumi.OutputState }

func (TemplateSectionAfterPageBreakOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSectionAfterPageBreak)(nil)).Elem()
}

func (o TemplateSectionAfterPageBreakOutput) ToTemplateSectionAfterPageBreakOutput() TemplateSectionAfterPageBreakOutput {
	return o
}

func (o TemplateSectionAfterPageBreakOutput) ToTemplateSectionAfterPageBreakOutputWithContext(ctx context.Context) TemplateSectionAfterPageBreakOutput {
	return o
}

func (o TemplateSectionAfterPageBreakOutput) ToTemplateSectionAfterPageBreakPtrOutput() TemplateSectionAfterPageBreakPtrOutput {
	return o.ToTemplateSectionAfterPageBreakPtrOutputWithContext(context.Background())
}

func (o TemplateSectionAfterPageBreakOutput) ToTemplateSectionAfterPageBreakPtrOutputWithContext(ctx context.Context) TemplateSectionAfterPageBreakPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateSectionAfterPageBreak) *TemplateSectionAfterPageBreak {
		return &v
	}).(TemplateSectionAfterPageBreakPtrOutput)
}

// The option that enables or disables a page break at the end of a section.
func (o TemplateSectionAfterPageBreakOutput) Status() TemplateSectionPageBreakStatusPtrOutput {
	return o.ApplyT(func(v TemplateSectionAfterPageBreak) *TemplateSectionPageBreakStatus { return v.Status }).(TemplateSectionPageBreakStatusPtrOutput)
}

type TemplateSectionAfterPageBreakPtrOutput struct{ *pulumi.OutputState }

func (TemplateSectionAfterPageBreakPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSectionAfterPageBreak)(nil)).Elem()
}

func (o TemplateSectionAfterPageBreakPtrOutput) ToTemplateSectionAfterPageBreakPtrOutput() TemplateSectionAfterPageBreakPtrOutput {
	return o
}

func (o TemplateSectionAfterPageBreakPtrOutput) ToTemplateSectionAfterPageBreakPtrOutputWithContext(ctx context.Context) TemplateSectionAfterPageBreakPtrOutput {
	return o
}

func (o TemplateSectionAfterPageBreakPtrOutput) Elem() TemplateSectionAfterPageBreakOutput {
	return o.ApplyT(func(v *TemplateSectionAfterPageBreak) TemplateSectionAfterPageBreak {
		if v != nil {
			return *v
		}
		var ret TemplateSectionAfterPageBreak
		return ret
	}).(TemplateSectionAfterPageBreakOutput)
}

// The option that enables or disables a page break at the end of a section.
func (o TemplateSectionAfterPageBreakPtrOutput) Status() TemplateSectionPageBreakStatusPtrOutput {
	return o.ApplyT(func(v *TemplateSectionAfterPageBreak) *TemplateSectionPageBreakStatus {
		if v == nil {
			return nil
		}
		return v.Status
	}).(TemplateSectionPageBreakStatusPtrOutput)
}

type TemplateSectionBasedLayoutCanvasSizeOptions struct {
	// The options for a paper canvas of a section-based layout.
	PaperCanvasSizeOptions *TemplateSectionBasedLayoutPaperCanvasSizeOptions `pulumi:"paperCanvasSizeOptions"`
}

// TemplateSectionBasedLayoutCanvasSizeOptionsInput is an input type that accepts TemplateSectionBasedLayoutCanvasSizeOptionsArgs and TemplateSectionBasedLayoutCanvasSizeOptionsOutput values.
// You can construct a concrete instance of `TemplateSectionBasedLayoutCanvasSizeOptionsInput` via:
//
//	TemplateSectionBasedLayoutCanvasSizeOptionsArgs{...}
type TemplateSectionBasedLayoutCanvasSizeOptionsInput interface {
	pulumi.Input

	ToTemplateSectionBasedLayoutCanvasSizeOptionsOutput() TemplateSectionBasedLayoutCanvasSizeOptionsOutput
	ToTemplateSectionBasedLayoutCanvasSizeOptionsOutputWithContext(context.Context) TemplateSectionBasedLayoutCanvasSizeOptionsOutput
}

type TemplateSectionBasedLayoutCanvasSizeOptionsArgs struct {
	// The options for a paper canvas of a section-based layout.
	PaperCanvasSizeOptions TemplateSectionBasedLayoutPaperCanvasSizeOptionsPtrInput `pulumi:"paperCanvasSizeOptions"`
}

func (TemplateSectionBasedLayoutCanvasSizeOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSectionBasedLayoutCanvasSizeOptions)(nil)).Elem()
}

func (i TemplateSectionBasedLayoutCanvasSizeOptionsArgs) ToTemplateSectionBasedLayoutCanvasSizeOptionsOutput() TemplateSectionBasedLayoutCanvasSizeOptionsOutput {
	return i.ToTemplateSectionBasedLayoutCanvasSizeOptionsOutputWithContext(context.Background())
}

func (i TemplateSectionBasedLayoutCanvasSizeOptionsArgs) ToTemplateSectionBasedLayoutCanvasSizeOptionsOutputWithContext(ctx context.Context) TemplateSectionBasedLayoutCanvasSizeOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSectionBasedLayoutCanvasSizeOptionsOutput)
}

func (i TemplateSectionBasedLayoutCanvasSizeOptionsArgs) ToTemplateSectionBasedLayoutCanvasSizeOptionsPtrOutput() TemplateSectionBasedLayoutCanvasSizeOptionsPtrOutput {
	return i.ToTemplateSectionBasedLayoutCanvasSizeOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateSectionBasedLayoutCanvasSizeOptionsArgs) ToTemplateSectionBasedLayoutCanvasSizeOptionsPtrOutputWithContext(ctx context.Context) TemplateSectionBasedLayoutCanvasSizeOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSectionBasedLayoutCanvasSizeOptionsOutput).ToTemplateSectionBasedLayoutCanvasSizeOptionsPtrOutputWithContext(ctx)
}

// TemplateSectionBasedLayoutCanvasSizeOptionsPtrInput is an input type that accepts TemplateSectionBasedLayoutCanvasSizeOptionsArgs, TemplateSectionBasedLayoutCanvasSizeOptionsPtr and TemplateSectionBasedLayoutCanvasSizeOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateSectionBasedLayoutCanvasSizeOptionsPtrInput` via:
//
//	        TemplateSectionBasedLayoutCanvasSizeOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateSectionBasedLayoutCanvasSizeOptionsPtrInput interface {
	pulumi.Input

	ToTemplateSectionBasedLayoutCanvasSizeOptionsPtrOutput() TemplateSectionBasedLayoutCanvasSizeOptionsPtrOutput
	ToTemplateSectionBasedLayoutCanvasSizeOptionsPtrOutputWithContext(context.Context) TemplateSectionBasedLayoutCanvasSizeOptionsPtrOutput
}

type templateSectionBasedLayoutCanvasSizeOptionsPtrType TemplateSectionBasedLayoutCanvasSizeOptionsArgs

func TemplateSectionBasedLayoutCanvasSizeOptionsPtr(v *TemplateSectionBasedLayoutCanvasSizeOptionsArgs) TemplateSectionBasedLayoutCanvasSizeOptionsPtrInput {
	return (*templateSectionBasedLayoutCanvasSizeOptionsPtrType)(v)
}

func (*templateSectionBasedLayoutCanvasSizeOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSectionBasedLayoutCanvasSizeOptions)(nil)).Elem()
}

func (i *templateSectionBasedLayoutCanvasSizeOptionsPtrType) ToTemplateSectionBasedLayoutCanvasSizeOptionsPtrOutput() TemplateSectionBasedLayoutCanvasSizeOptionsPtrOutput {
	return i.ToTemplateSectionBasedLayoutCanvasSizeOptionsPtrOutputWithContext(context.Background())
}

func (i *templateSectionBasedLayoutCanvasSizeOptionsPtrType) ToTemplateSectionBasedLayoutCanvasSizeOptionsPtrOutputWithContext(ctx context.Context) TemplateSectionBasedLayoutCanvasSizeOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSectionBasedLayoutCanvasSizeOptionsPtrOutput)
}

type TemplateSectionBasedLayoutCanvasSizeOptionsOutput struct{ *pulumi.OutputState }

func (TemplateSectionBasedLayoutCanvasSizeOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSectionBasedLayoutCanvasSizeOptions)(nil)).Elem()
}

func (o TemplateSectionBasedLayoutCanvasSizeOptionsOutput) ToTemplateSectionBasedLayoutCanvasSizeOptionsOutput() TemplateSectionBasedLayoutCanvasSizeOptionsOutput {
	return o
}

func (o TemplateSectionBasedLayoutCanvasSizeOptionsOutput) ToTemplateSectionBasedLayoutCanvasSizeOptionsOutputWithContext(ctx context.Context) TemplateSectionBasedLayoutCanvasSizeOptionsOutput {
	return o
}

func (o TemplateSectionBasedLayoutCanvasSizeOptionsOutput) ToTemplateSectionBasedLayoutCanvasSizeOptionsPtrOutput() TemplateSectionBasedLayoutCanvasSizeOptionsPtrOutput {
	return o.ToTemplateSectionBasedLayoutCanvasSizeOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateSectionBasedLayoutCanvasSizeOptionsOutput) ToTemplateSectionBasedLayoutCanvasSizeOptionsPtrOutputWithContext(ctx context.Context) TemplateSectionBasedLayoutCanvasSizeOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateSectionBasedLayoutCanvasSizeOptions) *TemplateSectionBasedLayoutCanvasSizeOptions {
		return &v
	}).(TemplateSectionBasedLayoutCanvasSizeOptionsPtrOutput)
}

// The options for a paper canvas of a section-based layout.
func (o TemplateSectionBasedLayoutCanvasSizeOptionsOutput) PaperCanvasSizeOptions() TemplateSectionBasedLayoutPaperCanvasSizeOptionsPtrOutput {
	return o.ApplyT(func(v TemplateSectionBasedLayoutCanvasSizeOptions) *TemplateSectionBasedLayoutPaperCanvasSizeOptions {
		return v.PaperCanvasSizeOptions
	}).(TemplateSectionBasedLayoutPaperCanvasSizeOptionsPtrOutput)
}

type TemplateSectionBasedLayoutCanvasSizeOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateSectionBasedLayoutCanvasSizeOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSectionBasedLayoutCanvasSizeOptions)(nil)).Elem()
}

func (o TemplateSectionBasedLayoutCanvasSizeOptionsPtrOutput) ToTemplateSectionBasedLayoutCanvasSizeOptionsPtrOutput() TemplateSectionBasedLayoutCanvasSizeOptionsPtrOutput {
	return o
}

func (o TemplateSectionBasedLayoutCanvasSizeOptionsPtrOutput) ToTemplateSectionBasedLayoutCanvasSizeOptionsPtrOutputWithContext(ctx context.Context) TemplateSectionBasedLayoutCanvasSizeOptionsPtrOutput {
	return o
}

func (o TemplateSectionBasedLayoutCanvasSizeOptionsPtrOutput) Elem() TemplateSectionBasedLayoutCanvasSizeOptionsOutput {
	return o.ApplyT(func(v *TemplateSectionBasedLayoutCanvasSizeOptions) TemplateSectionBasedLayoutCanvasSizeOptions {
		if v != nil {
			return *v
		}
		var ret TemplateSectionBasedLayoutCanvasSizeOptions
		return ret
	}).(TemplateSectionBasedLayoutCanvasSizeOptionsOutput)
}

// The options for a paper canvas of a section-based layout.
func (o TemplateSectionBasedLayoutCanvasSizeOptionsPtrOutput) PaperCanvasSizeOptions() TemplateSectionBasedLayoutPaperCanvasSizeOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateSectionBasedLayoutCanvasSizeOptions) *TemplateSectionBasedLayoutPaperCanvasSizeOptions {
		if v == nil {
			return nil
		}
		return v.PaperCanvasSizeOptions
	}).(TemplateSectionBasedLayoutPaperCanvasSizeOptionsPtrOutput)
}

type TemplateSectionBasedLayoutConfiguration struct {
	// A list of body section configurations.
	BodySections []TemplateBodySectionConfiguration `pulumi:"bodySections"`
	// The options for the canvas of a section-based layout.
	CanvasSizeOptions TemplateSectionBasedLayoutCanvasSizeOptions `pulumi:"canvasSizeOptions"`
	// A list of footer section configurations.
	FooterSections []TemplateHeaderFooterSectionConfiguration `pulumi:"footerSections"`
	// A list of header section configurations.
	HeaderSections []TemplateHeaderFooterSectionConfiguration `pulumi:"headerSections"`
}

// TemplateSectionBasedLayoutConfigurationInput is an input type that accepts TemplateSectionBasedLayoutConfigurationArgs and TemplateSectionBasedLayoutConfigurationOutput values.
// You can construct a concrete instance of `TemplateSectionBasedLayoutConfigurationInput` via:
//
//	TemplateSectionBasedLayoutConfigurationArgs{...}
type TemplateSectionBasedLayoutConfigurationInput interface {
	pulumi.Input

	ToTemplateSectionBasedLayoutConfigurationOutput() TemplateSectionBasedLayoutConfigurationOutput
	ToTemplateSectionBasedLayoutConfigurationOutputWithContext(context.Context) TemplateSectionBasedLayoutConfigurationOutput
}

type TemplateSectionBasedLayoutConfigurationArgs struct {
	// A list of body section configurations.
	BodySections TemplateBodySectionConfigurationArrayInput `pulumi:"bodySections"`
	// The options for the canvas of a section-based layout.
	CanvasSizeOptions TemplateSectionBasedLayoutCanvasSizeOptionsInput `pulumi:"canvasSizeOptions"`
	// A list of footer section configurations.
	FooterSections TemplateHeaderFooterSectionConfigurationArrayInput `pulumi:"footerSections"`
	// A list of header section configurations.
	HeaderSections TemplateHeaderFooterSectionConfigurationArrayInput `pulumi:"headerSections"`
}

func (TemplateSectionBasedLayoutConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSectionBasedLayoutConfiguration)(nil)).Elem()
}

func (i TemplateSectionBasedLayoutConfigurationArgs) ToTemplateSectionBasedLayoutConfigurationOutput() TemplateSectionBasedLayoutConfigurationOutput {
	return i.ToTemplateSectionBasedLayoutConfigurationOutputWithContext(context.Background())
}

func (i TemplateSectionBasedLayoutConfigurationArgs) ToTemplateSectionBasedLayoutConfigurationOutputWithContext(ctx context.Context) TemplateSectionBasedLayoutConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSectionBasedLayoutConfigurationOutput)
}

func (i TemplateSectionBasedLayoutConfigurationArgs) ToTemplateSectionBasedLayoutConfigurationPtrOutput() TemplateSectionBasedLayoutConfigurationPtrOutput {
	return i.ToTemplateSectionBasedLayoutConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateSectionBasedLayoutConfigurationArgs) ToTemplateSectionBasedLayoutConfigurationPtrOutputWithContext(ctx context.Context) TemplateSectionBasedLayoutConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSectionBasedLayoutConfigurationOutput).ToTemplateSectionBasedLayoutConfigurationPtrOutputWithContext(ctx)
}

// TemplateSectionBasedLayoutConfigurationPtrInput is an input type that accepts TemplateSectionBasedLayoutConfigurationArgs, TemplateSectionBasedLayoutConfigurationPtr and TemplateSectionBasedLayoutConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateSectionBasedLayoutConfigurationPtrInput` via:
//
//	        TemplateSectionBasedLayoutConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateSectionBasedLayoutConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateSectionBasedLayoutConfigurationPtrOutput() TemplateSectionBasedLayoutConfigurationPtrOutput
	ToTemplateSectionBasedLayoutConfigurationPtrOutputWithContext(context.Context) TemplateSectionBasedLayoutConfigurationPtrOutput
}

type templateSectionBasedLayoutConfigurationPtrType TemplateSectionBasedLayoutConfigurationArgs

func TemplateSectionBasedLayoutConfigurationPtr(v *TemplateSectionBasedLayoutConfigurationArgs) TemplateSectionBasedLayoutConfigurationPtrInput {
	return (*templateSectionBasedLayoutConfigurationPtrType)(v)
}

func (*templateSectionBasedLayoutConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSectionBasedLayoutConfiguration)(nil)).Elem()
}

func (i *templateSectionBasedLayoutConfigurationPtrType) ToTemplateSectionBasedLayoutConfigurationPtrOutput() TemplateSectionBasedLayoutConfigurationPtrOutput {
	return i.ToTemplateSectionBasedLayoutConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateSectionBasedLayoutConfigurationPtrType) ToTemplateSectionBasedLayoutConfigurationPtrOutputWithContext(ctx context.Context) TemplateSectionBasedLayoutConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSectionBasedLayoutConfigurationPtrOutput)
}

type TemplateSectionBasedLayoutConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateSectionBasedLayoutConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSectionBasedLayoutConfiguration)(nil)).Elem()
}

func (o TemplateSectionBasedLayoutConfigurationOutput) ToTemplateSectionBasedLayoutConfigurationOutput() TemplateSectionBasedLayoutConfigurationOutput {
	return o
}

func (o TemplateSectionBasedLayoutConfigurationOutput) ToTemplateSectionBasedLayoutConfigurationOutputWithContext(ctx context.Context) TemplateSectionBasedLayoutConfigurationOutput {
	return o
}

func (o TemplateSectionBasedLayoutConfigurationOutput) ToTemplateSectionBasedLayoutConfigurationPtrOutput() TemplateSectionBasedLayoutConfigurationPtrOutput {
	return o.ToTemplateSectionBasedLayoutConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateSectionBasedLayoutConfigurationOutput) ToTemplateSectionBasedLayoutConfigurationPtrOutputWithContext(ctx context.Context) TemplateSectionBasedLayoutConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateSectionBasedLayoutConfiguration) *TemplateSectionBasedLayoutConfiguration {
		return &v
	}).(TemplateSectionBasedLayoutConfigurationPtrOutput)
}

// A list of body section configurations.
func (o TemplateSectionBasedLayoutConfigurationOutput) BodySections() TemplateBodySectionConfigurationArrayOutput {
	return o.ApplyT(func(v TemplateSectionBasedLayoutConfiguration) []TemplateBodySectionConfiguration {
		return v.BodySections
	}).(TemplateBodySectionConfigurationArrayOutput)
}

// The options for the canvas of a section-based layout.
func (o TemplateSectionBasedLayoutConfigurationOutput) CanvasSizeOptions() TemplateSectionBasedLayoutCanvasSizeOptionsOutput {
	return o.ApplyT(func(v TemplateSectionBasedLayoutConfiguration) TemplateSectionBasedLayoutCanvasSizeOptions {
		return v.CanvasSizeOptions
	}).(TemplateSectionBasedLayoutCanvasSizeOptionsOutput)
}

// A list of footer section configurations.
func (o TemplateSectionBasedLayoutConfigurationOutput) FooterSections() TemplateHeaderFooterSectionConfigurationArrayOutput {
	return o.ApplyT(func(v TemplateSectionBasedLayoutConfiguration) []TemplateHeaderFooterSectionConfiguration {
		return v.FooterSections
	}).(TemplateHeaderFooterSectionConfigurationArrayOutput)
}

// A list of header section configurations.
func (o TemplateSectionBasedLayoutConfigurationOutput) HeaderSections() TemplateHeaderFooterSectionConfigurationArrayOutput {
	return o.ApplyT(func(v TemplateSectionBasedLayoutConfiguration) []TemplateHeaderFooterSectionConfiguration {
		return v.HeaderSections
	}).(TemplateHeaderFooterSectionConfigurationArrayOutput)
}

type TemplateSectionBasedLayoutConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateSectionBasedLayoutConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSectionBasedLayoutConfiguration)(nil)).Elem()
}

func (o TemplateSectionBasedLayoutConfigurationPtrOutput) ToTemplateSectionBasedLayoutConfigurationPtrOutput() TemplateSectionBasedLayoutConfigurationPtrOutput {
	return o
}

func (o TemplateSectionBasedLayoutConfigurationPtrOutput) ToTemplateSectionBasedLayoutConfigurationPtrOutputWithContext(ctx context.Context) TemplateSectionBasedLayoutConfigurationPtrOutput {
	return o
}

func (o TemplateSectionBasedLayoutConfigurationPtrOutput) Elem() TemplateSectionBasedLayoutConfigurationOutput {
	return o.ApplyT(func(v *TemplateSectionBasedLayoutConfiguration) TemplateSectionBasedLayoutConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateSectionBasedLayoutConfiguration
		return ret
	}).(TemplateSectionBasedLayoutConfigurationOutput)
}

// A list of body section configurations.
func (o TemplateSectionBasedLayoutConfigurationPtrOutput) BodySections() TemplateBodySectionConfigurationArrayOutput {
	return o.ApplyT(func(v *TemplateSectionBasedLayoutConfiguration) []TemplateBodySectionConfiguration {
		if v == nil {
			return nil
		}
		return v.BodySections
	}).(TemplateBodySectionConfigurationArrayOutput)
}

// The options for the canvas of a section-based layout.
func (o TemplateSectionBasedLayoutConfigurationPtrOutput) CanvasSizeOptions() TemplateSectionBasedLayoutCanvasSizeOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateSectionBasedLayoutConfiguration) *TemplateSectionBasedLayoutCanvasSizeOptions {
		if v == nil {
			return nil
		}
		return &v.CanvasSizeOptions
	}).(TemplateSectionBasedLayoutCanvasSizeOptionsPtrOutput)
}

// A list of footer section configurations.
func (o TemplateSectionBasedLayoutConfigurationPtrOutput) FooterSections() TemplateHeaderFooterSectionConfigurationArrayOutput {
	return o.ApplyT(func(v *TemplateSectionBasedLayoutConfiguration) []TemplateHeaderFooterSectionConfiguration {
		if v == nil {
			return nil
		}
		return v.FooterSections
	}).(TemplateHeaderFooterSectionConfigurationArrayOutput)
}

// A list of header section configurations.
func (o TemplateSectionBasedLayoutConfigurationPtrOutput) HeaderSections() TemplateHeaderFooterSectionConfigurationArrayOutput {
	return o.ApplyT(func(v *TemplateSectionBasedLayoutConfiguration) []TemplateHeaderFooterSectionConfiguration {
		if v == nil {
			return nil
		}
		return v.HeaderSections
	}).(TemplateHeaderFooterSectionConfigurationArrayOutput)
}

type TemplateSectionBasedLayoutPaperCanvasSizeOptions struct {
	// Defines the spacing between the canvas content and the top, bottom, left, and right edges.
	PaperMargin *TemplateSpacing `pulumi:"paperMargin"`
	// The paper orientation that is used to define canvas dimensions. Choose one of the following options:
	//
	// - PORTRAIT
	// - LANDSCAPE
	PaperOrientation *TemplatePaperOrientation `pulumi:"paperOrientation"`
	// The paper size that is used to define canvas dimensions.
	PaperSize *TemplatePaperSize `pulumi:"paperSize"`
}

// TemplateSectionBasedLayoutPaperCanvasSizeOptionsInput is an input type that accepts TemplateSectionBasedLayoutPaperCanvasSizeOptionsArgs and TemplateSectionBasedLayoutPaperCanvasSizeOptionsOutput values.
// You can construct a concrete instance of `TemplateSectionBasedLayoutPaperCanvasSizeOptionsInput` via:
//
//	TemplateSectionBasedLayoutPaperCanvasSizeOptionsArgs{...}
type TemplateSectionBasedLayoutPaperCanvasSizeOptionsInput interface {
	pulumi.Input

	ToTemplateSectionBasedLayoutPaperCanvasSizeOptionsOutput() TemplateSectionBasedLayoutPaperCanvasSizeOptionsOutput
	ToTemplateSectionBasedLayoutPaperCanvasSizeOptionsOutputWithContext(context.Context) TemplateSectionBasedLayoutPaperCanvasSizeOptionsOutput
}

type TemplateSectionBasedLayoutPaperCanvasSizeOptionsArgs struct {
	// Defines the spacing between the canvas content and the top, bottom, left, and right edges.
	PaperMargin TemplateSpacingPtrInput `pulumi:"paperMargin"`
	// The paper orientation that is used to define canvas dimensions. Choose one of the following options:
	//
	// - PORTRAIT
	// - LANDSCAPE
	PaperOrientation TemplatePaperOrientationPtrInput `pulumi:"paperOrientation"`
	// The paper size that is used to define canvas dimensions.
	PaperSize TemplatePaperSizePtrInput `pulumi:"paperSize"`
}

func (TemplateSectionBasedLayoutPaperCanvasSizeOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSectionBasedLayoutPaperCanvasSizeOptions)(nil)).Elem()
}

func (i TemplateSectionBasedLayoutPaperCanvasSizeOptionsArgs) ToTemplateSectionBasedLayoutPaperCanvasSizeOptionsOutput() TemplateSectionBasedLayoutPaperCanvasSizeOptionsOutput {
	return i.ToTemplateSectionBasedLayoutPaperCanvasSizeOptionsOutputWithContext(context.Background())
}

func (i TemplateSectionBasedLayoutPaperCanvasSizeOptionsArgs) ToTemplateSectionBasedLayoutPaperCanvasSizeOptionsOutputWithContext(ctx context.Context) TemplateSectionBasedLayoutPaperCanvasSizeOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSectionBasedLayoutPaperCanvasSizeOptionsOutput)
}

func (i TemplateSectionBasedLayoutPaperCanvasSizeOptionsArgs) ToTemplateSectionBasedLayoutPaperCanvasSizeOptionsPtrOutput() TemplateSectionBasedLayoutPaperCanvasSizeOptionsPtrOutput {
	return i.ToTemplateSectionBasedLayoutPaperCanvasSizeOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateSectionBasedLayoutPaperCanvasSizeOptionsArgs) ToTemplateSectionBasedLayoutPaperCanvasSizeOptionsPtrOutputWithContext(ctx context.Context) TemplateSectionBasedLayoutPaperCanvasSizeOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSectionBasedLayoutPaperCanvasSizeOptionsOutput).ToTemplateSectionBasedLayoutPaperCanvasSizeOptionsPtrOutputWithContext(ctx)
}

// TemplateSectionBasedLayoutPaperCanvasSizeOptionsPtrInput is an input type that accepts TemplateSectionBasedLayoutPaperCanvasSizeOptionsArgs, TemplateSectionBasedLayoutPaperCanvasSizeOptionsPtr and TemplateSectionBasedLayoutPaperCanvasSizeOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateSectionBasedLayoutPaperCanvasSizeOptionsPtrInput` via:
//
//	        TemplateSectionBasedLayoutPaperCanvasSizeOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateSectionBasedLayoutPaperCanvasSizeOptionsPtrInput interface {
	pulumi.Input

	ToTemplateSectionBasedLayoutPaperCanvasSizeOptionsPtrOutput() TemplateSectionBasedLayoutPaperCanvasSizeOptionsPtrOutput
	ToTemplateSectionBasedLayoutPaperCanvasSizeOptionsPtrOutputWithContext(context.Context) TemplateSectionBasedLayoutPaperCanvasSizeOptionsPtrOutput
}

type templateSectionBasedLayoutPaperCanvasSizeOptionsPtrType TemplateSectionBasedLayoutPaperCanvasSizeOptionsArgs

func TemplateSectionBasedLayoutPaperCanvasSizeOptionsPtr(v *TemplateSectionBasedLayoutPaperCanvasSizeOptionsArgs) TemplateSectionBasedLayoutPaperCanvasSizeOptionsPtrInput {
	return (*templateSectionBasedLayoutPaperCanvasSizeOptionsPtrType)(v)
}

func (*templateSectionBasedLayoutPaperCanvasSizeOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSectionBasedLayoutPaperCanvasSizeOptions)(nil)).Elem()
}

func (i *templateSectionBasedLayoutPaperCanvasSizeOptionsPtrType) ToTemplateSectionBasedLayoutPaperCanvasSizeOptionsPtrOutput() TemplateSectionBasedLayoutPaperCanvasSizeOptionsPtrOutput {
	return i.ToTemplateSectionBasedLayoutPaperCanvasSizeOptionsPtrOutputWithContext(context.Background())
}

func (i *templateSectionBasedLayoutPaperCanvasSizeOptionsPtrType) ToTemplateSectionBasedLayoutPaperCanvasSizeOptionsPtrOutputWithContext(ctx context.Context) TemplateSectionBasedLayoutPaperCanvasSizeOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSectionBasedLayoutPaperCanvasSizeOptionsPtrOutput)
}

type TemplateSectionBasedLayoutPaperCanvasSizeOptionsOutput struct{ *pulumi.OutputState }

func (TemplateSectionBasedLayoutPaperCanvasSizeOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSectionBasedLayoutPaperCanvasSizeOptions)(nil)).Elem()
}

func (o TemplateSectionBasedLayoutPaperCanvasSizeOptionsOutput) ToTemplateSectionBasedLayoutPaperCanvasSizeOptionsOutput() TemplateSectionBasedLayoutPaperCanvasSizeOptionsOutput {
	return o
}

func (o TemplateSectionBasedLayoutPaperCanvasSizeOptionsOutput) ToTemplateSectionBasedLayoutPaperCanvasSizeOptionsOutputWithContext(ctx context.Context) TemplateSectionBasedLayoutPaperCanvasSizeOptionsOutput {
	return o
}

func (o TemplateSectionBasedLayoutPaperCanvasSizeOptionsOutput) ToTemplateSectionBasedLayoutPaperCanvasSizeOptionsPtrOutput() TemplateSectionBasedLayoutPaperCanvasSizeOptionsPtrOutput {
	return o.ToTemplateSectionBasedLayoutPaperCanvasSizeOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateSectionBasedLayoutPaperCanvasSizeOptionsOutput) ToTemplateSectionBasedLayoutPaperCanvasSizeOptionsPtrOutputWithContext(ctx context.Context) TemplateSectionBasedLayoutPaperCanvasSizeOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateSectionBasedLayoutPaperCanvasSizeOptions) *TemplateSectionBasedLayoutPaperCanvasSizeOptions {
		return &v
	}).(TemplateSectionBasedLayoutPaperCanvasSizeOptionsPtrOutput)
}

// Defines the spacing between the canvas content and the top, bottom, left, and right edges.
func (o TemplateSectionBasedLayoutPaperCanvasSizeOptionsOutput) PaperMargin() TemplateSpacingPtrOutput {
	return o.ApplyT(func(v TemplateSectionBasedLayoutPaperCanvasSizeOptions) *TemplateSpacing { return v.PaperMargin }).(TemplateSpacingPtrOutput)
}

// The paper orientation that is used to define canvas dimensions. Choose one of the following options:
//
// - PORTRAIT
// - LANDSCAPE
func (o TemplateSectionBasedLayoutPaperCanvasSizeOptionsOutput) PaperOrientation() TemplatePaperOrientationPtrOutput {
	return o.ApplyT(func(v TemplateSectionBasedLayoutPaperCanvasSizeOptions) *TemplatePaperOrientation {
		return v.PaperOrientation
	}).(TemplatePaperOrientationPtrOutput)
}

// The paper size that is used to define canvas dimensions.
func (o TemplateSectionBasedLayoutPaperCanvasSizeOptionsOutput) PaperSize() TemplatePaperSizePtrOutput {
	return o.ApplyT(func(v TemplateSectionBasedLayoutPaperCanvasSizeOptions) *TemplatePaperSize { return v.PaperSize }).(TemplatePaperSizePtrOutput)
}

type TemplateSectionBasedLayoutPaperCanvasSizeOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateSectionBasedLayoutPaperCanvasSizeOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSectionBasedLayoutPaperCanvasSizeOptions)(nil)).Elem()
}

func (o TemplateSectionBasedLayoutPaperCanvasSizeOptionsPtrOutput) ToTemplateSectionBasedLayoutPaperCanvasSizeOptionsPtrOutput() TemplateSectionBasedLayoutPaperCanvasSizeOptionsPtrOutput {
	return o
}

func (o TemplateSectionBasedLayoutPaperCanvasSizeOptionsPtrOutput) ToTemplateSectionBasedLayoutPaperCanvasSizeOptionsPtrOutputWithContext(ctx context.Context) TemplateSectionBasedLayoutPaperCanvasSizeOptionsPtrOutput {
	return o
}

func (o TemplateSectionBasedLayoutPaperCanvasSizeOptionsPtrOutput) Elem() TemplateSectionBasedLayoutPaperCanvasSizeOptionsOutput {
	return o.ApplyT(func(v *TemplateSectionBasedLayoutPaperCanvasSizeOptions) TemplateSectionBasedLayoutPaperCanvasSizeOptions {
		if v != nil {
			return *v
		}
		var ret TemplateSectionBasedLayoutPaperCanvasSizeOptions
		return ret
	}).(TemplateSectionBasedLayoutPaperCanvasSizeOptionsOutput)
}

// Defines the spacing between the canvas content and the top, bottom, left, and right edges.
func (o TemplateSectionBasedLayoutPaperCanvasSizeOptionsPtrOutput) PaperMargin() TemplateSpacingPtrOutput {
	return o.ApplyT(func(v *TemplateSectionBasedLayoutPaperCanvasSizeOptions) *TemplateSpacing {
		if v == nil {
			return nil
		}
		return v.PaperMargin
	}).(TemplateSpacingPtrOutput)
}

// The paper orientation that is used to define canvas dimensions. Choose one of the following options:
//
// - PORTRAIT
// - LANDSCAPE
func (o TemplateSectionBasedLayoutPaperCanvasSizeOptionsPtrOutput) PaperOrientation() TemplatePaperOrientationPtrOutput {
	return o.ApplyT(func(v *TemplateSectionBasedLayoutPaperCanvasSizeOptions) *TemplatePaperOrientation {
		if v == nil {
			return nil
		}
		return v.PaperOrientation
	}).(TemplatePaperOrientationPtrOutput)
}

// The paper size that is used to define canvas dimensions.
func (o TemplateSectionBasedLayoutPaperCanvasSizeOptionsPtrOutput) PaperSize() TemplatePaperSizePtrOutput {
	return o.ApplyT(func(v *TemplateSectionBasedLayoutPaperCanvasSizeOptions) *TemplatePaperSize {
		if v == nil {
			return nil
		}
		return v.PaperSize
	}).(TemplatePaperSizePtrOutput)
}

type TemplateSectionLayoutConfiguration struct {
	// The free-form layout configuration of a section.
	FreeFormLayout TemplateFreeFormSectionLayoutConfiguration `pulumi:"freeFormLayout"`
}

// TemplateSectionLayoutConfigurationInput is an input type that accepts TemplateSectionLayoutConfigurationArgs and TemplateSectionLayoutConfigurationOutput values.
// You can construct a concrete instance of `TemplateSectionLayoutConfigurationInput` via:
//
//	TemplateSectionLayoutConfigurationArgs{...}
type TemplateSectionLayoutConfigurationInput interface {
	pulumi.Input

	ToTemplateSectionLayoutConfigurationOutput() TemplateSectionLayoutConfigurationOutput
	ToTemplateSectionLayoutConfigurationOutputWithContext(context.Context) TemplateSectionLayoutConfigurationOutput
}

type TemplateSectionLayoutConfigurationArgs struct {
	// The free-form layout configuration of a section.
	FreeFormLayout TemplateFreeFormSectionLayoutConfigurationInput `pulumi:"freeFormLayout"`
}

func (TemplateSectionLayoutConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSectionLayoutConfiguration)(nil)).Elem()
}

func (i TemplateSectionLayoutConfigurationArgs) ToTemplateSectionLayoutConfigurationOutput() TemplateSectionLayoutConfigurationOutput {
	return i.ToTemplateSectionLayoutConfigurationOutputWithContext(context.Background())
}

func (i TemplateSectionLayoutConfigurationArgs) ToTemplateSectionLayoutConfigurationOutputWithContext(ctx context.Context) TemplateSectionLayoutConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSectionLayoutConfigurationOutput)
}

func (i TemplateSectionLayoutConfigurationArgs) ToTemplateSectionLayoutConfigurationPtrOutput() TemplateSectionLayoutConfigurationPtrOutput {
	return i.ToTemplateSectionLayoutConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateSectionLayoutConfigurationArgs) ToTemplateSectionLayoutConfigurationPtrOutputWithContext(ctx context.Context) TemplateSectionLayoutConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSectionLayoutConfigurationOutput).ToTemplateSectionLayoutConfigurationPtrOutputWithContext(ctx)
}

// TemplateSectionLayoutConfigurationPtrInput is an input type that accepts TemplateSectionLayoutConfigurationArgs, TemplateSectionLayoutConfigurationPtr and TemplateSectionLayoutConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateSectionLayoutConfigurationPtrInput` via:
//
//	        TemplateSectionLayoutConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateSectionLayoutConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateSectionLayoutConfigurationPtrOutput() TemplateSectionLayoutConfigurationPtrOutput
	ToTemplateSectionLayoutConfigurationPtrOutputWithContext(context.Context) TemplateSectionLayoutConfigurationPtrOutput
}

type templateSectionLayoutConfigurationPtrType TemplateSectionLayoutConfigurationArgs

func TemplateSectionLayoutConfigurationPtr(v *TemplateSectionLayoutConfigurationArgs) TemplateSectionLayoutConfigurationPtrInput {
	return (*templateSectionLayoutConfigurationPtrType)(v)
}

func (*templateSectionLayoutConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSectionLayoutConfiguration)(nil)).Elem()
}

func (i *templateSectionLayoutConfigurationPtrType) ToTemplateSectionLayoutConfigurationPtrOutput() TemplateSectionLayoutConfigurationPtrOutput {
	return i.ToTemplateSectionLayoutConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateSectionLayoutConfigurationPtrType) ToTemplateSectionLayoutConfigurationPtrOutputWithContext(ctx context.Context) TemplateSectionLayoutConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSectionLayoutConfigurationPtrOutput)
}

type TemplateSectionLayoutConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateSectionLayoutConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSectionLayoutConfiguration)(nil)).Elem()
}

func (o TemplateSectionLayoutConfigurationOutput) ToTemplateSectionLayoutConfigurationOutput() TemplateSectionLayoutConfigurationOutput {
	return o
}

func (o TemplateSectionLayoutConfigurationOutput) ToTemplateSectionLayoutConfigurationOutputWithContext(ctx context.Context) TemplateSectionLayoutConfigurationOutput {
	return o
}

func (o TemplateSectionLayoutConfigurationOutput) ToTemplateSectionLayoutConfigurationPtrOutput() TemplateSectionLayoutConfigurationPtrOutput {
	return o.ToTemplateSectionLayoutConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateSectionLayoutConfigurationOutput) ToTemplateSectionLayoutConfigurationPtrOutputWithContext(ctx context.Context) TemplateSectionLayoutConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateSectionLayoutConfiguration) *TemplateSectionLayoutConfiguration {
		return &v
	}).(TemplateSectionLayoutConfigurationPtrOutput)
}

// The free-form layout configuration of a section.
func (o TemplateSectionLayoutConfigurationOutput) FreeFormLayout() TemplateFreeFormSectionLayoutConfigurationOutput {
	return o.ApplyT(func(v TemplateSectionLayoutConfiguration) TemplateFreeFormSectionLayoutConfiguration {
		return v.FreeFormLayout
	}).(TemplateFreeFormSectionLayoutConfigurationOutput)
}

type TemplateSectionLayoutConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateSectionLayoutConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSectionLayoutConfiguration)(nil)).Elem()
}

func (o TemplateSectionLayoutConfigurationPtrOutput) ToTemplateSectionLayoutConfigurationPtrOutput() TemplateSectionLayoutConfigurationPtrOutput {
	return o
}

func (o TemplateSectionLayoutConfigurationPtrOutput) ToTemplateSectionLayoutConfigurationPtrOutputWithContext(ctx context.Context) TemplateSectionLayoutConfigurationPtrOutput {
	return o
}

func (o TemplateSectionLayoutConfigurationPtrOutput) Elem() TemplateSectionLayoutConfigurationOutput {
	return o.ApplyT(func(v *TemplateSectionLayoutConfiguration) TemplateSectionLayoutConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateSectionLayoutConfiguration
		return ret
	}).(TemplateSectionLayoutConfigurationOutput)
}

// The free-form layout configuration of a section.
func (o TemplateSectionLayoutConfigurationPtrOutput) FreeFormLayout() TemplateFreeFormSectionLayoutConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateSectionLayoutConfiguration) *TemplateFreeFormSectionLayoutConfiguration {
		if v == nil {
			return nil
		}
		return &v.FreeFormLayout
	}).(TemplateFreeFormSectionLayoutConfigurationPtrOutput)
}

type TemplateSectionPageBreakConfiguration struct {
	// The configuration of a page break after a section.
	After *TemplateSectionAfterPageBreak `pulumi:"after"`
}

// TemplateSectionPageBreakConfigurationInput is an input type that accepts TemplateSectionPageBreakConfigurationArgs and TemplateSectionPageBreakConfigurationOutput values.
// You can construct a concrete instance of `TemplateSectionPageBreakConfigurationInput` via:
//
//	TemplateSectionPageBreakConfigurationArgs{...}
type TemplateSectionPageBreakConfigurationInput interface {
	pulumi.Input

	ToTemplateSectionPageBreakConfigurationOutput() TemplateSectionPageBreakConfigurationOutput
	ToTemplateSectionPageBreakConfigurationOutputWithContext(context.Context) TemplateSectionPageBreakConfigurationOutput
}

type TemplateSectionPageBreakConfigurationArgs struct {
	// The configuration of a page break after a section.
	After TemplateSectionAfterPageBreakPtrInput `pulumi:"after"`
}

func (TemplateSectionPageBreakConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSectionPageBreakConfiguration)(nil)).Elem()
}

func (i TemplateSectionPageBreakConfigurationArgs) ToTemplateSectionPageBreakConfigurationOutput() TemplateSectionPageBreakConfigurationOutput {
	return i.ToTemplateSectionPageBreakConfigurationOutputWithContext(context.Background())
}

func (i TemplateSectionPageBreakConfigurationArgs) ToTemplateSectionPageBreakConfigurationOutputWithContext(ctx context.Context) TemplateSectionPageBreakConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSectionPageBreakConfigurationOutput)
}

func (i TemplateSectionPageBreakConfigurationArgs) ToTemplateSectionPageBreakConfigurationPtrOutput() TemplateSectionPageBreakConfigurationPtrOutput {
	return i.ToTemplateSectionPageBreakConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateSectionPageBreakConfigurationArgs) ToTemplateSectionPageBreakConfigurationPtrOutputWithContext(ctx context.Context) TemplateSectionPageBreakConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSectionPageBreakConfigurationOutput).ToTemplateSectionPageBreakConfigurationPtrOutputWithContext(ctx)
}

// TemplateSectionPageBreakConfigurationPtrInput is an input type that accepts TemplateSectionPageBreakConfigurationArgs, TemplateSectionPageBreakConfigurationPtr and TemplateSectionPageBreakConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateSectionPageBreakConfigurationPtrInput` via:
//
//	        TemplateSectionPageBreakConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateSectionPageBreakConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateSectionPageBreakConfigurationPtrOutput() TemplateSectionPageBreakConfigurationPtrOutput
	ToTemplateSectionPageBreakConfigurationPtrOutputWithContext(context.Context) TemplateSectionPageBreakConfigurationPtrOutput
}

type templateSectionPageBreakConfigurationPtrType TemplateSectionPageBreakConfigurationArgs

func TemplateSectionPageBreakConfigurationPtr(v *TemplateSectionPageBreakConfigurationArgs) TemplateSectionPageBreakConfigurationPtrInput {
	return (*templateSectionPageBreakConfigurationPtrType)(v)
}

func (*templateSectionPageBreakConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSectionPageBreakConfiguration)(nil)).Elem()
}

func (i *templateSectionPageBreakConfigurationPtrType) ToTemplateSectionPageBreakConfigurationPtrOutput() TemplateSectionPageBreakConfigurationPtrOutput {
	return i.ToTemplateSectionPageBreakConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateSectionPageBreakConfigurationPtrType) ToTemplateSectionPageBreakConfigurationPtrOutputWithContext(ctx context.Context) TemplateSectionPageBreakConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSectionPageBreakConfigurationPtrOutput)
}

type TemplateSectionPageBreakConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateSectionPageBreakConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSectionPageBreakConfiguration)(nil)).Elem()
}

func (o TemplateSectionPageBreakConfigurationOutput) ToTemplateSectionPageBreakConfigurationOutput() TemplateSectionPageBreakConfigurationOutput {
	return o
}

func (o TemplateSectionPageBreakConfigurationOutput) ToTemplateSectionPageBreakConfigurationOutputWithContext(ctx context.Context) TemplateSectionPageBreakConfigurationOutput {
	return o
}

func (o TemplateSectionPageBreakConfigurationOutput) ToTemplateSectionPageBreakConfigurationPtrOutput() TemplateSectionPageBreakConfigurationPtrOutput {
	return o.ToTemplateSectionPageBreakConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateSectionPageBreakConfigurationOutput) ToTemplateSectionPageBreakConfigurationPtrOutputWithContext(ctx context.Context) TemplateSectionPageBreakConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateSectionPageBreakConfiguration) *TemplateSectionPageBreakConfiguration {
		return &v
	}).(TemplateSectionPageBreakConfigurationPtrOutput)
}

// The configuration of a page break after a section.
func (o TemplateSectionPageBreakConfigurationOutput) After() TemplateSectionAfterPageBreakPtrOutput {
	return o.ApplyT(func(v TemplateSectionPageBreakConfiguration) *TemplateSectionAfterPageBreak { return v.After }).(TemplateSectionAfterPageBreakPtrOutput)
}

type TemplateSectionPageBreakConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateSectionPageBreakConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSectionPageBreakConfiguration)(nil)).Elem()
}

func (o TemplateSectionPageBreakConfigurationPtrOutput) ToTemplateSectionPageBreakConfigurationPtrOutput() TemplateSectionPageBreakConfigurationPtrOutput {
	return o
}

func (o TemplateSectionPageBreakConfigurationPtrOutput) ToTemplateSectionPageBreakConfigurationPtrOutputWithContext(ctx context.Context) TemplateSectionPageBreakConfigurationPtrOutput {
	return o
}

func (o TemplateSectionPageBreakConfigurationPtrOutput) Elem() TemplateSectionPageBreakConfigurationOutput {
	return o.ApplyT(func(v *TemplateSectionPageBreakConfiguration) TemplateSectionPageBreakConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateSectionPageBreakConfiguration
		return ret
	}).(TemplateSectionPageBreakConfigurationOutput)
}

// The configuration of a page break after a section.
func (o TemplateSectionPageBreakConfigurationPtrOutput) After() TemplateSectionAfterPageBreakPtrOutput {
	return o.ApplyT(func(v *TemplateSectionPageBreakConfiguration) *TemplateSectionAfterPageBreak {
		if v == nil {
			return nil
		}
		return v.After
	}).(TemplateSectionAfterPageBreakPtrOutput)
}

type TemplateSectionStyle struct {
	// String based length that is composed of value and unit in px
	Height *string `pulumi:"height"`
	// The spacing between section content and its top, bottom, left, and right edges.
	//
	// There is no padding by default.
	Padding *TemplateSpacing `pulumi:"padding"`
}

// TemplateSectionStyleInput is an input type that accepts TemplateSectionStyleArgs and TemplateSectionStyleOutput values.
// You can construct a concrete instance of `TemplateSectionStyleInput` via:
//
//	TemplateSectionStyleArgs{...}
type TemplateSectionStyleInput interface {
	pulumi.Input

	ToTemplateSectionStyleOutput() TemplateSectionStyleOutput
	ToTemplateSectionStyleOutputWithContext(context.Context) TemplateSectionStyleOutput
}

type TemplateSectionStyleArgs struct {
	// String based length that is composed of value and unit in px
	Height pulumi.StringPtrInput `pulumi:"height"`
	// The spacing between section content and its top, bottom, left, and right edges.
	//
	// There is no padding by default.
	Padding TemplateSpacingPtrInput `pulumi:"padding"`
}

func (TemplateSectionStyleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSectionStyle)(nil)).Elem()
}

func (i TemplateSectionStyleArgs) ToTemplateSectionStyleOutput() TemplateSectionStyleOutput {
	return i.ToTemplateSectionStyleOutputWithContext(context.Background())
}

func (i TemplateSectionStyleArgs) ToTemplateSectionStyleOutputWithContext(ctx context.Context) TemplateSectionStyleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSectionStyleOutput)
}

func (i TemplateSectionStyleArgs) ToTemplateSectionStylePtrOutput() TemplateSectionStylePtrOutput {
	return i.ToTemplateSectionStylePtrOutputWithContext(context.Background())
}

func (i TemplateSectionStyleArgs) ToTemplateSectionStylePtrOutputWithContext(ctx context.Context) TemplateSectionStylePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSectionStyleOutput).ToTemplateSectionStylePtrOutputWithContext(ctx)
}

// TemplateSectionStylePtrInput is an input type that accepts TemplateSectionStyleArgs, TemplateSectionStylePtr and TemplateSectionStylePtrOutput values.
// You can construct a concrete instance of `TemplateSectionStylePtrInput` via:
//
//	        TemplateSectionStyleArgs{...}
//
//	or:
//
//	        nil
type TemplateSectionStylePtrInput interface {
	pulumi.Input

	ToTemplateSectionStylePtrOutput() TemplateSectionStylePtrOutput
	ToTemplateSectionStylePtrOutputWithContext(context.Context) TemplateSectionStylePtrOutput
}

type templateSectionStylePtrType TemplateSectionStyleArgs

func TemplateSectionStylePtr(v *TemplateSectionStyleArgs) TemplateSectionStylePtrInput {
	return (*templateSectionStylePtrType)(v)
}

func (*templateSectionStylePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSectionStyle)(nil)).Elem()
}

func (i *templateSectionStylePtrType) ToTemplateSectionStylePtrOutput() TemplateSectionStylePtrOutput {
	return i.ToTemplateSectionStylePtrOutputWithContext(context.Background())
}

func (i *templateSectionStylePtrType) ToTemplateSectionStylePtrOutputWithContext(ctx context.Context) TemplateSectionStylePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSectionStylePtrOutput)
}

type TemplateSectionStyleOutput struct{ *pulumi.OutputState }

func (TemplateSectionStyleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSectionStyle)(nil)).Elem()
}

func (o TemplateSectionStyleOutput) ToTemplateSectionStyleOutput() TemplateSectionStyleOutput {
	return o
}

func (o TemplateSectionStyleOutput) ToTemplateSectionStyleOutputWithContext(ctx context.Context) TemplateSectionStyleOutput {
	return o
}

func (o TemplateSectionStyleOutput) ToTemplateSectionStylePtrOutput() TemplateSectionStylePtrOutput {
	return o.ToTemplateSectionStylePtrOutputWithContext(context.Background())
}

func (o TemplateSectionStyleOutput) ToTemplateSectionStylePtrOutputWithContext(ctx context.Context) TemplateSectionStylePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateSectionStyle) *TemplateSectionStyle {
		return &v
	}).(TemplateSectionStylePtrOutput)
}

// String based length that is composed of value and unit in px
func (o TemplateSectionStyleOutput) Height() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateSectionStyle) *string { return v.Height }).(pulumi.StringPtrOutput)
}

// The spacing between section content and its top, bottom, left, and right edges.
//
// There is no padding by default.
func (o TemplateSectionStyleOutput) Padding() TemplateSpacingPtrOutput {
	return o.ApplyT(func(v TemplateSectionStyle) *TemplateSpacing { return v.Padding }).(TemplateSpacingPtrOutput)
}

type TemplateSectionStylePtrOutput struct{ *pulumi.OutputState }

func (TemplateSectionStylePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSectionStyle)(nil)).Elem()
}

func (o TemplateSectionStylePtrOutput) ToTemplateSectionStylePtrOutput() TemplateSectionStylePtrOutput {
	return o
}

func (o TemplateSectionStylePtrOutput) ToTemplateSectionStylePtrOutputWithContext(ctx context.Context) TemplateSectionStylePtrOutput {
	return o
}

func (o TemplateSectionStylePtrOutput) Elem() TemplateSectionStyleOutput {
	return o.ApplyT(func(v *TemplateSectionStyle) TemplateSectionStyle {
		if v != nil {
			return *v
		}
		var ret TemplateSectionStyle
		return ret
	}).(TemplateSectionStyleOutput)
}

// String based length that is composed of value and unit in px
func (o TemplateSectionStylePtrOutput) Height() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateSectionStyle) *string {
		if v == nil {
			return nil
		}
		return v.Height
	}).(pulumi.StringPtrOutput)
}

// The spacing between section content and its top, bottom, left, and right edges.
//
// There is no padding by default.
func (o TemplateSectionStylePtrOutput) Padding() TemplateSpacingPtrOutput {
	return o.ApplyT(func(v *TemplateSectionStyle) *TemplateSpacing {
		if v == nil {
			return nil
		}
		return v.Padding
	}).(TemplateSpacingPtrOutput)
}

type TemplateSelectedSheetsFilterScopeConfiguration struct {
	// The sheet ID and visual IDs of the sheet and visuals that the filter is applied to.
	SheetVisualScopingConfigurations []TemplateSheetVisualScopingConfiguration `pulumi:"sheetVisualScopingConfigurations"`
}

// TemplateSelectedSheetsFilterScopeConfigurationInput is an input type that accepts TemplateSelectedSheetsFilterScopeConfigurationArgs and TemplateSelectedSheetsFilterScopeConfigurationOutput values.
// You can construct a concrete instance of `TemplateSelectedSheetsFilterScopeConfigurationInput` via:
//
//	TemplateSelectedSheetsFilterScopeConfigurationArgs{...}
type TemplateSelectedSheetsFilterScopeConfigurationInput interface {
	pulumi.Input

	ToTemplateSelectedSheetsFilterScopeConfigurationOutput() TemplateSelectedSheetsFilterScopeConfigurationOutput
	ToTemplateSelectedSheetsFilterScopeConfigurationOutputWithContext(context.Context) TemplateSelectedSheetsFilterScopeConfigurationOutput
}

type TemplateSelectedSheetsFilterScopeConfigurationArgs struct {
	// The sheet ID and visual IDs of the sheet and visuals that the filter is applied to.
	SheetVisualScopingConfigurations TemplateSheetVisualScopingConfigurationArrayInput `pulumi:"sheetVisualScopingConfigurations"`
}

func (TemplateSelectedSheetsFilterScopeConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSelectedSheetsFilterScopeConfiguration)(nil)).Elem()
}

func (i TemplateSelectedSheetsFilterScopeConfigurationArgs) ToTemplateSelectedSheetsFilterScopeConfigurationOutput() TemplateSelectedSheetsFilterScopeConfigurationOutput {
	return i.ToTemplateSelectedSheetsFilterScopeConfigurationOutputWithContext(context.Background())
}

func (i TemplateSelectedSheetsFilterScopeConfigurationArgs) ToTemplateSelectedSheetsFilterScopeConfigurationOutputWithContext(ctx context.Context) TemplateSelectedSheetsFilterScopeConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSelectedSheetsFilterScopeConfigurationOutput)
}

func (i TemplateSelectedSheetsFilterScopeConfigurationArgs) ToTemplateSelectedSheetsFilterScopeConfigurationPtrOutput() TemplateSelectedSheetsFilterScopeConfigurationPtrOutput {
	return i.ToTemplateSelectedSheetsFilterScopeConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateSelectedSheetsFilterScopeConfigurationArgs) ToTemplateSelectedSheetsFilterScopeConfigurationPtrOutputWithContext(ctx context.Context) TemplateSelectedSheetsFilterScopeConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSelectedSheetsFilterScopeConfigurationOutput).ToTemplateSelectedSheetsFilterScopeConfigurationPtrOutputWithContext(ctx)
}

// TemplateSelectedSheetsFilterScopeConfigurationPtrInput is an input type that accepts TemplateSelectedSheetsFilterScopeConfigurationArgs, TemplateSelectedSheetsFilterScopeConfigurationPtr and TemplateSelectedSheetsFilterScopeConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateSelectedSheetsFilterScopeConfigurationPtrInput` via:
//
//	        TemplateSelectedSheetsFilterScopeConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateSelectedSheetsFilterScopeConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateSelectedSheetsFilterScopeConfigurationPtrOutput() TemplateSelectedSheetsFilterScopeConfigurationPtrOutput
	ToTemplateSelectedSheetsFilterScopeConfigurationPtrOutputWithContext(context.Context) TemplateSelectedSheetsFilterScopeConfigurationPtrOutput
}

type templateSelectedSheetsFilterScopeConfigurationPtrType TemplateSelectedSheetsFilterScopeConfigurationArgs

func TemplateSelectedSheetsFilterScopeConfigurationPtr(v *TemplateSelectedSheetsFilterScopeConfigurationArgs) TemplateSelectedSheetsFilterScopeConfigurationPtrInput {
	return (*templateSelectedSheetsFilterScopeConfigurationPtrType)(v)
}

func (*templateSelectedSheetsFilterScopeConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSelectedSheetsFilterScopeConfiguration)(nil)).Elem()
}

func (i *templateSelectedSheetsFilterScopeConfigurationPtrType) ToTemplateSelectedSheetsFilterScopeConfigurationPtrOutput() TemplateSelectedSheetsFilterScopeConfigurationPtrOutput {
	return i.ToTemplateSelectedSheetsFilterScopeConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateSelectedSheetsFilterScopeConfigurationPtrType) ToTemplateSelectedSheetsFilterScopeConfigurationPtrOutputWithContext(ctx context.Context) TemplateSelectedSheetsFilterScopeConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSelectedSheetsFilterScopeConfigurationPtrOutput)
}

type TemplateSelectedSheetsFilterScopeConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateSelectedSheetsFilterScopeConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSelectedSheetsFilterScopeConfiguration)(nil)).Elem()
}

func (o TemplateSelectedSheetsFilterScopeConfigurationOutput) ToTemplateSelectedSheetsFilterScopeConfigurationOutput() TemplateSelectedSheetsFilterScopeConfigurationOutput {
	return o
}

func (o TemplateSelectedSheetsFilterScopeConfigurationOutput) ToTemplateSelectedSheetsFilterScopeConfigurationOutputWithContext(ctx context.Context) TemplateSelectedSheetsFilterScopeConfigurationOutput {
	return o
}

func (o TemplateSelectedSheetsFilterScopeConfigurationOutput) ToTemplateSelectedSheetsFilterScopeConfigurationPtrOutput() TemplateSelectedSheetsFilterScopeConfigurationPtrOutput {
	return o.ToTemplateSelectedSheetsFilterScopeConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateSelectedSheetsFilterScopeConfigurationOutput) ToTemplateSelectedSheetsFilterScopeConfigurationPtrOutputWithContext(ctx context.Context) TemplateSelectedSheetsFilterScopeConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateSelectedSheetsFilterScopeConfiguration) *TemplateSelectedSheetsFilterScopeConfiguration {
		return &v
	}).(TemplateSelectedSheetsFilterScopeConfigurationPtrOutput)
}

// The sheet ID and visual IDs of the sheet and visuals that the filter is applied to.
func (o TemplateSelectedSheetsFilterScopeConfigurationOutput) SheetVisualScopingConfigurations() TemplateSheetVisualScopingConfigurationArrayOutput {
	return o.ApplyT(func(v TemplateSelectedSheetsFilterScopeConfiguration) []TemplateSheetVisualScopingConfiguration {
		return v.SheetVisualScopingConfigurations
	}).(TemplateSheetVisualScopingConfigurationArrayOutput)
}

type TemplateSelectedSheetsFilterScopeConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateSelectedSheetsFilterScopeConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSelectedSheetsFilterScopeConfiguration)(nil)).Elem()
}

func (o TemplateSelectedSheetsFilterScopeConfigurationPtrOutput) ToTemplateSelectedSheetsFilterScopeConfigurationPtrOutput() TemplateSelectedSheetsFilterScopeConfigurationPtrOutput {
	return o
}

func (o TemplateSelectedSheetsFilterScopeConfigurationPtrOutput) ToTemplateSelectedSheetsFilterScopeConfigurationPtrOutputWithContext(ctx context.Context) TemplateSelectedSheetsFilterScopeConfigurationPtrOutput {
	return o
}

func (o TemplateSelectedSheetsFilterScopeConfigurationPtrOutput) Elem() TemplateSelectedSheetsFilterScopeConfigurationOutput {
	return o.ApplyT(func(v *TemplateSelectedSheetsFilterScopeConfiguration) TemplateSelectedSheetsFilterScopeConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateSelectedSheetsFilterScopeConfiguration
		return ret
	}).(TemplateSelectedSheetsFilterScopeConfigurationOutput)
}

// The sheet ID and visual IDs of the sheet and visuals that the filter is applied to.
func (o TemplateSelectedSheetsFilterScopeConfigurationPtrOutput) SheetVisualScopingConfigurations() TemplateSheetVisualScopingConfigurationArrayOutput {
	return o.ApplyT(func(v *TemplateSelectedSheetsFilterScopeConfiguration) []TemplateSheetVisualScopingConfiguration {
		if v == nil {
			return nil
		}
		return v.SheetVisualScopingConfigurations
	}).(TemplateSheetVisualScopingConfigurationArrayOutput)
}

type TemplateSeriesItem struct {
	// The data field series item configuration of a line chart.
	DataFieldSeriesItem *TemplateDataFieldSeriesItem `pulumi:"dataFieldSeriesItem"`
	// The field series item configuration of a line chart.
	FieldSeriesItem *TemplateFieldSeriesItem `pulumi:"fieldSeriesItem"`
}

// TemplateSeriesItemInput is an input type that accepts TemplateSeriesItemArgs and TemplateSeriesItemOutput values.
// You can construct a concrete instance of `TemplateSeriesItemInput` via:
//
//	TemplateSeriesItemArgs{...}
type TemplateSeriesItemInput interface {
	pulumi.Input

	ToTemplateSeriesItemOutput() TemplateSeriesItemOutput
	ToTemplateSeriesItemOutputWithContext(context.Context) TemplateSeriesItemOutput
}

type TemplateSeriesItemArgs struct {
	// The data field series item configuration of a line chart.
	DataFieldSeriesItem TemplateDataFieldSeriesItemPtrInput `pulumi:"dataFieldSeriesItem"`
	// The field series item configuration of a line chart.
	FieldSeriesItem TemplateFieldSeriesItemPtrInput `pulumi:"fieldSeriesItem"`
}

func (TemplateSeriesItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSeriesItem)(nil)).Elem()
}

func (i TemplateSeriesItemArgs) ToTemplateSeriesItemOutput() TemplateSeriesItemOutput {
	return i.ToTemplateSeriesItemOutputWithContext(context.Background())
}

func (i TemplateSeriesItemArgs) ToTemplateSeriesItemOutputWithContext(ctx context.Context) TemplateSeriesItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSeriesItemOutput)
}

// TemplateSeriesItemArrayInput is an input type that accepts TemplateSeriesItemArray and TemplateSeriesItemArrayOutput values.
// You can construct a concrete instance of `TemplateSeriesItemArrayInput` via:
//
//	TemplateSeriesItemArray{ TemplateSeriesItemArgs{...} }
type TemplateSeriesItemArrayInput interface {
	pulumi.Input

	ToTemplateSeriesItemArrayOutput() TemplateSeriesItemArrayOutput
	ToTemplateSeriesItemArrayOutputWithContext(context.Context) TemplateSeriesItemArrayOutput
}

type TemplateSeriesItemArray []TemplateSeriesItemInput

func (TemplateSeriesItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateSeriesItem)(nil)).Elem()
}

func (i TemplateSeriesItemArray) ToTemplateSeriesItemArrayOutput() TemplateSeriesItemArrayOutput {
	return i.ToTemplateSeriesItemArrayOutputWithContext(context.Background())
}

func (i TemplateSeriesItemArray) ToTemplateSeriesItemArrayOutputWithContext(ctx context.Context) TemplateSeriesItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSeriesItemArrayOutput)
}

type TemplateSeriesItemOutput struct{ *pulumi.OutputState }

func (TemplateSeriesItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSeriesItem)(nil)).Elem()
}

func (o TemplateSeriesItemOutput) ToTemplateSeriesItemOutput() TemplateSeriesItemOutput {
	return o
}

func (o TemplateSeriesItemOutput) ToTemplateSeriesItemOutputWithContext(ctx context.Context) TemplateSeriesItemOutput {
	return o
}

// The data field series item configuration of a line chart.
func (o TemplateSeriesItemOutput) DataFieldSeriesItem() TemplateDataFieldSeriesItemPtrOutput {
	return o.ApplyT(func(v TemplateSeriesItem) *TemplateDataFieldSeriesItem { return v.DataFieldSeriesItem }).(TemplateDataFieldSeriesItemPtrOutput)
}

// The field series item configuration of a line chart.
func (o TemplateSeriesItemOutput) FieldSeriesItem() TemplateFieldSeriesItemPtrOutput {
	return o.ApplyT(func(v TemplateSeriesItem) *TemplateFieldSeriesItem { return v.FieldSeriesItem }).(TemplateFieldSeriesItemPtrOutput)
}

type TemplateSeriesItemArrayOutput struct{ *pulumi.OutputState }

func (TemplateSeriesItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateSeriesItem)(nil)).Elem()
}

func (o TemplateSeriesItemArrayOutput) ToTemplateSeriesItemArrayOutput() TemplateSeriesItemArrayOutput {
	return o
}

func (o TemplateSeriesItemArrayOutput) ToTemplateSeriesItemArrayOutputWithContext(ctx context.Context) TemplateSeriesItemArrayOutput {
	return o
}

func (o TemplateSeriesItemArrayOutput) Index(i pulumi.IntInput) TemplateSeriesItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateSeriesItem {
		return vs[0].([]TemplateSeriesItem)[vs[1].(int)]
	}).(TemplateSeriesItemOutput)
}

type TemplateSetParameterValueConfiguration struct {
	// The destination parameter name of the `SetParameterValueConfiguration` .
	DestinationParameterName string                                         `pulumi:"destinationParameterName"`
	Value                    TemplateDestinationParameterValueConfiguration `pulumi:"value"`
}

// TemplateSetParameterValueConfigurationInput is an input type that accepts TemplateSetParameterValueConfigurationArgs and TemplateSetParameterValueConfigurationOutput values.
// You can construct a concrete instance of `TemplateSetParameterValueConfigurationInput` via:
//
//	TemplateSetParameterValueConfigurationArgs{...}
type TemplateSetParameterValueConfigurationInput interface {
	pulumi.Input

	ToTemplateSetParameterValueConfigurationOutput() TemplateSetParameterValueConfigurationOutput
	ToTemplateSetParameterValueConfigurationOutputWithContext(context.Context) TemplateSetParameterValueConfigurationOutput
}

type TemplateSetParameterValueConfigurationArgs struct {
	// The destination parameter name of the `SetParameterValueConfiguration` .
	DestinationParameterName pulumi.StringInput                                  `pulumi:"destinationParameterName"`
	Value                    TemplateDestinationParameterValueConfigurationInput `pulumi:"value"`
}

func (TemplateSetParameterValueConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSetParameterValueConfiguration)(nil)).Elem()
}

func (i TemplateSetParameterValueConfigurationArgs) ToTemplateSetParameterValueConfigurationOutput() TemplateSetParameterValueConfigurationOutput {
	return i.ToTemplateSetParameterValueConfigurationOutputWithContext(context.Background())
}

func (i TemplateSetParameterValueConfigurationArgs) ToTemplateSetParameterValueConfigurationOutputWithContext(ctx context.Context) TemplateSetParameterValueConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSetParameterValueConfigurationOutput)
}

// TemplateSetParameterValueConfigurationArrayInput is an input type that accepts TemplateSetParameterValueConfigurationArray and TemplateSetParameterValueConfigurationArrayOutput values.
// You can construct a concrete instance of `TemplateSetParameterValueConfigurationArrayInput` via:
//
//	TemplateSetParameterValueConfigurationArray{ TemplateSetParameterValueConfigurationArgs{...} }
type TemplateSetParameterValueConfigurationArrayInput interface {
	pulumi.Input

	ToTemplateSetParameterValueConfigurationArrayOutput() TemplateSetParameterValueConfigurationArrayOutput
	ToTemplateSetParameterValueConfigurationArrayOutputWithContext(context.Context) TemplateSetParameterValueConfigurationArrayOutput
}

type TemplateSetParameterValueConfigurationArray []TemplateSetParameterValueConfigurationInput

func (TemplateSetParameterValueConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateSetParameterValueConfiguration)(nil)).Elem()
}

func (i TemplateSetParameterValueConfigurationArray) ToTemplateSetParameterValueConfigurationArrayOutput() TemplateSetParameterValueConfigurationArrayOutput {
	return i.ToTemplateSetParameterValueConfigurationArrayOutputWithContext(context.Background())
}

func (i TemplateSetParameterValueConfigurationArray) ToTemplateSetParameterValueConfigurationArrayOutputWithContext(ctx context.Context) TemplateSetParameterValueConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSetParameterValueConfigurationArrayOutput)
}

type TemplateSetParameterValueConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateSetParameterValueConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSetParameterValueConfiguration)(nil)).Elem()
}

func (o TemplateSetParameterValueConfigurationOutput) ToTemplateSetParameterValueConfigurationOutput() TemplateSetParameterValueConfigurationOutput {
	return o
}

func (o TemplateSetParameterValueConfigurationOutput) ToTemplateSetParameterValueConfigurationOutputWithContext(ctx context.Context) TemplateSetParameterValueConfigurationOutput {
	return o
}

// The destination parameter name of the `SetParameterValueConfiguration` .
func (o TemplateSetParameterValueConfigurationOutput) DestinationParameterName() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateSetParameterValueConfiguration) string { return v.DestinationParameterName }).(pulumi.StringOutput)
}

func (o TemplateSetParameterValueConfigurationOutput) Value() TemplateDestinationParameterValueConfigurationOutput {
	return o.ApplyT(func(v TemplateSetParameterValueConfiguration) TemplateDestinationParameterValueConfiguration {
		return v.Value
	}).(TemplateDestinationParameterValueConfigurationOutput)
}

type TemplateSetParameterValueConfigurationArrayOutput struct{ *pulumi.OutputState }

func (TemplateSetParameterValueConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateSetParameterValueConfiguration)(nil)).Elem()
}

func (o TemplateSetParameterValueConfigurationArrayOutput) ToTemplateSetParameterValueConfigurationArrayOutput() TemplateSetParameterValueConfigurationArrayOutput {
	return o
}

func (o TemplateSetParameterValueConfigurationArrayOutput) ToTemplateSetParameterValueConfigurationArrayOutputWithContext(ctx context.Context) TemplateSetParameterValueConfigurationArrayOutput {
	return o
}

func (o TemplateSetParameterValueConfigurationArrayOutput) Index(i pulumi.IntInput) TemplateSetParameterValueConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateSetParameterValueConfiguration {
		return vs[0].([]TemplateSetParameterValueConfiguration)[vs[1].(int)]
	}).(TemplateSetParameterValueConfigurationOutput)
}

type TemplateShapeConditionalFormat struct {
	// The conditional formatting for the shape background color of a filled map visual.
	BackgroundColor TemplateConditionalFormattingColor `pulumi:"backgroundColor"`
}

// TemplateShapeConditionalFormatInput is an input type that accepts TemplateShapeConditionalFormatArgs and TemplateShapeConditionalFormatOutput values.
// You can construct a concrete instance of `TemplateShapeConditionalFormatInput` via:
//
//	TemplateShapeConditionalFormatArgs{...}
type TemplateShapeConditionalFormatInput interface {
	pulumi.Input

	ToTemplateShapeConditionalFormatOutput() TemplateShapeConditionalFormatOutput
	ToTemplateShapeConditionalFormatOutputWithContext(context.Context) TemplateShapeConditionalFormatOutput
}

type TemplateShapeConditionalFormatArgs struct {
	// The conditional formatting for the shape background color of a filled map visual.
	BackgroundColor TemplateConditionalFormattingColorInput `pulumi:"backgroundColor"`
}

func (TemplateShapeConditionalFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateShapeConditionalFormat)(nil)).Elem()
}

func (i TemplateShapeConditionalFormatArgs) ToTemplateShapeConditionalFormatOutput() TemplateShapeConditionalFormatOutput {
	return i.ToTemplateShapeConditionalFormatOutputWithContext(context.Background())
}

func (i TemplateShapeConditionalFormatArgs) ToTemplateShapeConditionalFormatOutputWithContext(ctx context.Context) TemplateShapeConditionalFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateShapeConditionalFormatOutput)
}

func (i TemplateShapeConditionalFormatArgs) ToTemplateShapeConditionalFormatPtrOutput() TemplateShapeConditionalFormatPtrOutput {
	return i.ToTemplateShapeConditionalFormatPtrOutputWithContext(context.Background())
}

func (i TemplateShapeConditionalFormatArgs) ToTemplateShapeConditionalFormatPtrOutputWithContext(ctx context.Context) TemplateShapeConditionalFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateShapeConditionalFormatOutput).ToTemplateShapeConditionalFormatPtrOutputWithContext(ctx)
}

// TemplateShapeConditionalFormatPtrInput is an input type that accepts TemplateShapeConditionalFormatArgs, TemplateShapeConditionalFormatPtr and TemplateShapeConditionalFormatPtrOutput values.
// You can construct a concrete instance of `TemplateShapeConditionalFormatPtrInput` via:
//
//	        TemplateShapeConditionalFormatArgs{...}
//
//	or:
//
//	        nil
type TemplateShapeConditionalFormatPtrInput interface {
	pulumi.Input

	ToTemplateShapeConditionalFormatPtrOutput() TemplateShapeConditionalFormatPtrOutput
	ToTemplateShapeConditionalFormatPtrOutputWithContext(context.Context) TemplateShapeConditionalFormatPtrOutput
}

type templateShapeConditionalFormatPtrType TemplateShapeConditionalFormatArgs

func TemplateShapeConditionalFormatPtr(v *TemplateShapeConditionalFormatArgs) TemplateShapeConditionalFormatPtrInput {
	return (*templateShapeConditionalFormatPtrType)(v)
}

func (*templateShapeConditionalFormatPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateShapeConditionalFormat)(nil)).Elem()
}

func (i *templateShapeConditionalFormatPtrType) ToTemplateShapeConditionalFormatPtrOutput() TemplateShapeConditionalFormatPtrOutput {
	return i.ToTemplateShapeConditionalFormatPtrOutputWithContext(context.Background())
}

func (i *templateShapeConditionalFormatPtrType) ToTemplateShapeConditionalFormatPtrOutputWithContext(ctx context.Context) TemplateShapeConditionalFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateShapeConditionalFormatPtrOutput)
}

type TemplateShapeConditionalFormatOutput struct{ *pulumi.OutputState }

func (TemplateShapeConditionalFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateShapeConditionalFormat)(nil)).Elem()
}

func (o TemplateShapeConditionalFormatOutput) ToTemplateShapeConditionalFormatOutput() TemplateShapeConditionalFormatOutput {
	return o
}

func (o TemplateShapeConditionalFormatOutput) ToTemplateShapeConditionalFormatOutputWithContext(ctx context.Context) TemplateShapeConditionalFormatOutput {
	return o
}

func (o TemplateShapeConditionalFormatOutput) ToTemplateShapeConditionalFormatPtrOutput() TemplateShapeConditionalFormatPtrOutput {
	return o.ToTemplateShapeConditionalFormatPtrOutputWithContext(context.Background())
}

func (o TemplateShapeConditionalFormatOutput) ToTemplateShapeConditionalFormatPtrOutputWithContext(ctx context.Context) TemplateShapeConditionalFormatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateShapeConditionalFormat) *TemplateShapeConditionalFormat {
		return &v
	}).(TemplateShapeConditionalFormatPtrOutput)
}

// The conditional formatting for the shape background color of a filled map visual.
func (o TemplateShapeConditionalFormatOutput) BackgroundColor() TemplateConditionalFormattingColorOutput {
	return o.ApplyT(func(v TemplateShapeConditionalFormat) TemplateConditionalFormattingColor { return v.BackgroundColor }).(TemplateConditionalFormattingColorOutput)
}

type TemplateShapeConditionalFormatPtrOutput struct{ *pulumi.OutputState }

func (TemplateShapeConditionalFormatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateShapeConditionalFormat)(nil)).Elem()
}

func (o TemplateShapeConditionalFormatPtrOutput) ToTemplateShapeConditionalFormatPtrOutput() TemplateShapeConditionalFormatPtrOutput {
	return o
}

func (o TemplateShapeConditionalFormatPtrOutput) ToTemplateShapeConditionalFormatPtrOutputWithContext(ctx context.Context) TemplateShapeConditionalFormatPtrOutput {
	return o
}

func (o TemplateShapeConditionalFormatPtrOutput) Elem() TemplateShapeConditionalFormatOutput {
	return o.ApplyT(func(v *TemplateShapeConditionalFormat) TemplateShapeConditionalFormat {
		if v != nil {
			return *v
		}
		var ret TemplateShapeConditionalFormat
		return ret
	}).(TemplateShapeConditionalFormatOutput)
}

// The conditional formatting for the shape background color of a filled map visual.
func (o TemplateShapeConditionalFormatPtrOutput) BackgroundColor() TemplateConditionalFormattingColorPtrOutput {
	return o.ApplyT(func(v *TemplateShapeConditionalFormat) *TemplateConditionalFormattingColor {
		if v == nil {
			return nil
		}
		return &v.BackgroundColor
	}).(TemplateConditionalFormattingColorPtrOutput)
}

// <p>A <i>sheet</i>, which is an object that contains a set of visuals that
//
//	are viewed together on one page in Amazon QuickSight. Every analysis and dashboard
//	contains at least one sheet. Each sheet contains at least one visualization widget, for
//	example a chart, pivot table, or narrative insight. Sheets can be associated with other
//	components, such as controls, filters, and so on.</p>
type TemplateSheet struct {
	// <p>The name of a sheet. This name is displayed on the sheet's tab in the Amazon QuickSight
	//             console.</p>
	Name *string `pulumi:"name"`
	// <p>The unique identifier associated with a sheet.</p>
	SheetId *string `pulumi:"sheetId"`
}

// <p>A <i>sheet</i>, which is an object that contains a set of visuals that
//
//	are viewed together on one page in Amazon QuickSight. Every analysis and dashboard
//	contains at least one sheet. Each sheet contains at least one visualization widget, for
//	example a chart, pivot table, or narrative insight. Sheets can be associated with other
//	components, such as controls, filters, and so on.</p>
type TemplateSheetOutput struct{ *pulumi.OutputState }

func (TemplateSheetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSheet)(nil)).Elem()
}

func (o TemplateSheetOutput) ToTemplateSheetOutput() TemplateSheetOutput {
	return o
}

func (o TemplateSheetOutput) ToTemplateSheetOutputWithContext(ctx context.Context) TemplateSheetOutput {
	return o
}

// <p>The name of a sheet. This name is displayed on the sheet's tab in the Amazon QuickSight
//
//	console.</p>
func (o TemplateSheetOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateSheet) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// <p>The unique identifier associated with a sheet.</p>
func (o TemplateSheetOutput) SheetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateSheet) *string { return v.SheetId }).(pulumi.StringPtrOutput)
}

type TemplateSheetArrayOutput struct{ *pulumi.OutputState }

func (TemplateSheetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateSheet)(nil)).Elem()
}

func (o TemplateSheetArrayOutput) ToTemplateSheetArrayOutput() TemplateSheetArrayOutput {
	return o
}

func (o TemplateSheetArrayOutput) ToTemplateSheetArrayOutputWithContext(ctx context.Context) TemplateSheetArrayOutput {
	return o
}

func (o TemplateSheetArrayOutput) Index(i pulumi.IntInput) TemplateSheetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateSheet {
		return vs[0].([]TemplateSheet)[vs[1].(int)]
	}).(TemplateSheetOutput)
}

type TemplateSheetControlInfoIconLabelOptions struct {
	// The text content of info icon.
	InfoIconText *string `pulumi:"infoIconText"`
	// The visibility configuration of info icon label options.
	Visibility interface{} `pulumi:"visibility"`
}

// TemplateSheetControlInfoIconLabelOptionsInput is an input type that accepts TemplateSheetControlInfoIconLabelOptionsArgs and TemplateSheetControlInfoIconLabelOptionsOutput values.
// You can construct a concrete instance of `TemplateSheetControlInfoIconLabelOptionsInput` via:
//
//	TemplateSheetControlInfoIconLabelOptionsArgs{...}
type TemplateSheetControlInfoIconLabelOptionsInput interface {
	pulumi.Input

	ToTemplateSheetControlInfoIconLabelOptionsOutput() TemplateSheetControlInfoIconLabelOptionsOutput
	ToTemplateSheetControlInfoIconLabelOptionsOutputWithContext(context.Context) TemplateSheetControlInfoIconLabelOptionsOutput
}

type TemplateSheetControlInfoIconLabelOptionsArgs struct {
	// The text content of info icon.
	InfoIconText pulumi.StringPtrInput `pulumi:"infoIconText"`
	// The visibility configuration of info icon label options.
	Visibility pulumi.Input `pulumi:"visibility"`
}

func (TemplateSheetControlInfoIconLabelOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSheetControlInfoIconLabelOptions)(nil)).Elem()
}

func (i TemplateSheetControlInfoIconLabelOptionsArgs) ToTemplateSheetControlInfoIconLabelOptionsOutput() TemplateSheetControlInfoIconLabelOptionsOutput {
	return i.ToTemplateSheetControlInfoIconLabelOptionsOutputWithContext(context.Background())
}

func (i TemplateSheetControlInfoIconLabelOptionsArgs) ToTemplateSheetControlInfoIconLabelOptionsOutputWithContext(ctx context.Context) TemplateSheetControlInfoIconLabelOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSheetControlInfoIconLabelOptionsOutput)
}

func (i TemplateSheetControlInfoIconLabelOptionsArgs) ToTemplateSheetControlInfoIconLabelOptionsPtrOutput() TemplateSheetControlInfoIconLabelOptionsPtrOutput {
	return i.ToTemplateSheetControlInfoIconLabelOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateSheetControlInfoIconLabelOptionsArgs) ToTemplateSheetControlInfoIconLabelOptionsPtrOutputWithContext(ctx context.Context) TemplateSheetControlInfoIconLabelOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSheetControlInfoIconLabelOptionsOutput).ToTemplateSheetControlInfoIconLabelOptionsPtrOutputWithContext(ctx)
}

// TemplateSheetControlInfoIconLabelOptionsPtrInput is an input type that accepts TemplateSheetControlInfoIconLabelOptionsArgs, TemplateSheetControlInfoIconLabelOptionsPtr and TemplateSheetControlInfoIconLabelOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateSheetControlInfoIconLabelOptionsPtrInput` via:
//
//	        TemplateSheetControlInfoIconLabelOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateSheetControlInfoIconLabelOptionsPtrInput interface {
	pulumi.Input

	ToTemplateSheetControlInfoIconLabelOptionsPtrOutput() TemplateSheetControlInfoIconLabelOptionsPtrOutput
	ToTemplateSheetControlInfoIconLabelOptionsPtrOutputWithContext(context.Context) TemplateSheetControlInfoIconLabelOptionsPtrOutput
}

type templateSheetControlInfoIconLabelOptionsPtrType TemplateSheetControlInfoIconLabelOptionsArgs

func TemplateSheetControlInfoIconLabelOptionsPtr(v *TemplateSheetControlInfoIconLabelOptionsArgs) TemplateSheetControlInfoIconLabelOptionsPtrInput {
	return (*templateSheetControlInfoIconLabelOptionsPtrType)(v)
}

func (*templateSheetControlInfoIconLabelOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSheetControlInfoIconLabelOptions)(nil)).Elem()
}

func (i *templateSheetControlInfoIconLabelOptionsPtrType) ToTemplateSheetControlInfoIconLabelOptionsPtrOutput() TemplateSheetControlInfoIconLabelOptionsPtrOutput {
	return i.ToTemplateSheetControlInfoIconLabelOptionsPtrOutputWithContext(context.Background())
}

func (i *templateSheetControlInfoIconLabelOptionsPtrType) ToTemplateSheetControlInfoIconLabelOptionsPtrOutputWithContext(ctx context.Context) TemplateSheetControlInfoIconLabelOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSheetControlInfoIconLabelOptionsPtrOutput)
}

type TemplateSheetControlInfoIconLabelOptionsOutput struct{ *pulumi.OutputState }

func (TemplateSheetControlInfoIconLabelOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSheetControlInfoIconLabelOptions)(nil)).Elem()
}

func (o TemplateSheetControlInfoIconLabelOptionsOutput) ToTemplateSheetControlInfoIconLabelOptionsOutput() TemplateSheetControlInfoIconLabelOptionsOutput {
	return o
}

func (o TemplateSheetControlInfoIconLabelOptionsOutput) ToTemplateSheetControlInfoIconLabelOptionsOutputWithContext(ctx context.Context) TemplateSheetControlInfoIconLabelOptionsOutput {
	return o
}

func (o TemplateSheetControlInfoIconLabelOptionsOutput) ToTemplateSheetControlInfoIconLabelOptionsPtrOutput() TemplateSheetControlInfoIconLabelOptionsPtrOutput {
	return o.ToTemplateSheetControlInfoIconLabelOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateSheetControlInfoIconLabelOptionsOutput) ToTemplateSheetControlInfoIconLabelOptionsPtrOutputWithContext(ctx context.Context) TemplateSheetControlInfoIconLabelOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateSheetControlInfoIconLabelOptions) *TemplateSheetControlInfoIconLabelOptions {
		return &v
	}).(TemplateSheetControlInfoIconLabelOptionsPtrOutput)
}

// The text content of info icon.
func (o TemplateSheetControlInfoIconLabelOptionsOutput) InfoIconText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateSheetControlInfoIconLabelOptions) *string { return v.InfoIconText }).(pulumi.StringPtrOutput)
}

// The visibility configuration of info icon label options.
func (o TemplateSheetControlInfoIconLabelOptionsOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateSheetControlInfoIconLabelOptions) interface{} { return v.Visibility }).(pulumi.AnyOutput)
}

type TemplateSheetControlInfoIconLabelOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateSheetControlInfoIconLabelOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSheetControlInfoIconLabelOptions)(nil)).Elem()
}

func (o TemplateSheetControlInfoIconLabelOptionsPtrOutput) ToTemplateSheetControlInfoIconLabelOptionsPtrOutput() TemplateSheetControlInfoIconLabelOptionsPtrOutput {
	return o
}

func (o TemplateSheetControlInfoIconLabelOptionsPtrOutput) ToTemplateSheetControlInfoIconLabelOptionsPtrOutputWithContext(ctx context.Context) TemplateSheetControlInfoIconLabelOptionsPtrOutput {
	return o
}

func (o TemplateSheetControlInfoIconLabelOptionsPtrOutput) Elem() TemplateSheetControlInfoIconLabelOptionsOutput {
	return o.ApplyT(func(v *TemplateSheetControlInfoIconLabelOptions) TemplateSheetControlInfoIconLabelOptions {
		if v != nil {
			return *v
		}
		var ret TemplateSheetControlInfoIconLabelOptions
		return ret
	}).(TemplateSheetControlInfoIconLabelOptionsOutput)
}

// The text content of info icon.
func (o TemplateSheetControlInfoIconLabelOptionsPtrOutput) InfoIconText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateSheetControlInfoIconLabelOptions) *string {
		if v == nil {
			return nil
		}
		return v.InfoIconText
	}).(pulumi.StringPtrOutput)
}

// The visibility configuration of info icon label options.
func (o TemplateSheetControlInfoIconLabelOptionsPtrOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateSheetControlInfoIconLabelOptions) interface{} {
		if v == nil {
			return nil
		}
		return v.Visibility
	}).(pulumi.AnyOutput)
}

type TemplateSheetControlLayout struct {
	// The configuration that determines the elements and canvas size options of sheet control.
	Configuration TemplateSheetControlLayoutConfiguration `pulumi:"configuration"`
}

// TemplateSheetControlLayoutInput is an input type that accepts TemplateSheetControlLayoutArgs and TemplateSheetControlLayoutOutput values.
// You can construct a concrete instance of `TemplateSheetControlLayoutInput` via:
//
//	TemplateSheetControlLayoutArgs{...}
type TemplateSheetControlLayoutInput interface {
	pulumi.Input

	ToTemplateSheetControlLayoutOutput() TemplateSheetControlLayoutOutput
	ToTemplateSheetControlLayoutOutputWithContext(context.Context) TemplateSheetControlLayoutOutput
}

type TemplateSheetControlLayoutArgs struct {
	// The configuration that determines the elements and canvas size options of sheet control.
	Configuration TemplateSheetControlLayoutConfigurationInput `pulumi:"configuration"`
}

func (TemplateSheetControlLayoutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSheetControlLayout)(nil)).Elem()
}

func (i TemplateSheetControlLayoutArgs) ToTemplateSheetControlLayoutOutput() TemplateSheetControlLayoutOutput {
	return i.ToTemplateSheetControlLayoutOutputWithContext(context.Background())
}

func (i TemplateSheetControlLayoutArgs) ToTemplateSheetControlLayoutOutputWithContext(ctx context.Context) TemplateSheetControlLayoutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSheetControlLayoutOutput)
}

// TemplateSheetControlLayoutArrayInput is an input type that accepts TemplateSheetControlLayoutArray and TemplateSheetControlLayoutArrayOutput values.
// You can construct a concrete instance of `TemplateSheetControlLayoutArrayInput` via:
//
//	TemplateSheetControlLayoutArray{ TemplateSheetControlLayoutArgs{...} }
type TemplateSheetControlLayoutArrayInput interface {
	pulumi.Input

	ToTemplateSheetControlLayoutArrayOutput() TemplateSheetControlLayoutArrayOutput
	ToTemplateSheetControlLayoutArrayOutputWithContext(context.Context) TemplateSheetControlLayoutArrayOutput
}

type TemplateSheetControlLayoutArray []TemplateSheetControlLayoutInput

func (TemplateSheetControlLayoutArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateSheetControlLayout)(nil)).Elem()
}

func (i TemplateSheetControlLayoutArray) ToTemplateSheetControlLayoutArrayOutput() TemplateSheetControlLayoutArrayOutput {
	return i.ToTemplateSheetControlLayoutArrayOutputWithContext(context.Background())
}

func (i TemplateSheetControlLayoutArray) ToTemplateSheetControlLayoutArrayOutputWithContext(ctx context.Context) TemplateSheetControlLayoutArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSheetControlLayoutArrayOutput)
}

type TemplateSheetControlLayoutOutput struct{ *pulumi.OutputState }

func (TemplateSheetControlLayoutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSheetControlLayout)(nil)).Elem()
}

func (o TemplateSheetControlLayoutOutput) ToTemplateSheetControlLayoutOutput() TemplateSheetControlLayoutOutput {
	return o
}

func (o TemplateSheetControlLayoutOutput) ToTemplateSheetControlLayoutOutputWithContext(ctx context.Context) TemplateSheetControlLayoutOutput {
	return o
}

// The configuration that determines the elements and canvas size options of sheet control.
func (o TemplateSheetControlLayoutOutput) Configuration() TemplateSheetControlLayoutConfigurationOutput {
	return o.ApplyT(func(v TemplateSheetControlLayout) TemplateSheetControlLayoutConfiguration { return v.Configuration }).(TemplateSheetControlLayoutConfigurationOutput)
}

type TemplateSheetControlLayoutArrayOutput struct{ *pulumi.OutputState }

func (TemplateSheetControlLayoutArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateSheetControlLayout)(nil)).Elem()
}

func (o TemplateSheetControlLayoutArrayOutput) ToTemplateSheetControlLayoutArrayOutput() TemplateSheetControlLayoutArrayOutput {
	return o
}

func (o TemplateSheetControlLayoutArrayOutput) ToTemplateSheetControlLayoutArrayOutputWithContext(ctx context.Context) TemplateSheetControlLayoutArrayOutput {
	return o
}

func (o TemplateSheetControlLayoutArrayOutput) Index(i pulumi.IntInput) TemplateSheetControlLayoutOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateSheetControlLayout {
		return vs[0].([]TemplateSheetControlLayout)[vs[1].(int)]
	}).(TemplateSheetControlLayoutOutput)
}

type TemplateSheetControlLayoutConfiguration struct {
	// The configuration that determines the elements and canvas size options of sheet control.
	GridLayout *TemplateGridLayoutConfiguration `pulumi:"gridLayout"`
}

// TemplateSheetControlLayoutConfigurationInput is an input type that accepts TemplateSheetControlLayoutConfigurationArgs and TemplateSheetControlLayoutConfigurationOutput values.
// You can construct a concrete instance of `TemplateSheetControlLayoutConfigurationInput` via:
//
//	TemplateSheetControlLayoutConfigurationArgs{...}
type TemplateSheetControlLayoutConfigurationInput interface {
	pulumi.Input

	ToTemplateSheetControlLayoutConfigurationOutput() TemplateSheetControlLayoutConfigurationOutput
	ToTemplateSheetControlLayoutConfigurationOutputWithContext(context.Context) TemplateSheetControlLayoutConfigurationOutput
}

type TemplateSheetControlLayoutConfigurationArgs struct {
	// The configuration that determines the elements and canvas size options of sheet control.
	GridLayout TemplateGridLayoutConfigurationPtrInput `pulumi:"gridLayout"`
}

func (TemplateSheetControlLayoutConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSheetControlLayoutConfiguration)(nil)).Elem()
}

func (i TemplateSheetControlLayoutConfigurationArgs) ToTemplateSheetControlLayoutConfigurationOutput() TemplateSheetControlLayoutConfigurationOutput {
	return i.ToTemplateSheetControlLayoutConfigurationOutputWithContext(context.Background())
}

func (i TemplateSheetControlLayoutConfigurationArgs) ToTemplateSheetControlLayoutConfigurationOutputWithContext(ctx context.Context) TemplateSheetControlLayoutConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSheetControlLayoutConfigurationOutput)
}

type TemplateSheetControlLayoutConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateSheetControlLayoutConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSheetControlLayoutConfiguration)(nil)).Elem()
}

func (o TemplateSheetControlLayoutConfigurationOutput) ToTemplateSheetControlLayoutConfigurationOutput() TemplateSheetControlLayoutConfigurationOutput {
	return o
}

func (o TemplateSheetControlLayoutConfigurationOutput) ToTemplateSheetControlLayoutConfigurationOutputWithContext(ctx context.Context) TemplateSheetControlLayoutConfigurationOutput {
	return o
}

// The configuration that determines the elements and canvas size options of sheet control.
func (o TemplateSheetControlLayoutConfigurationOutput) GridLayout() TemplateGridLayoutConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateSheetControlLayoutConfiguration) *TemplateGridLayoutConfiguration { return v.GridLayout }).(TemplateGridLayoutConfigurationPtrOutput)
}

type TemplateSheetDefinition struct {
	// The layout content type of the sheet. Choose one of the following options:
	//
	// - `PAGINATED` : Creates a sheet for a paginated report.
	// - `INTERACTIVE` : Creates a sheet for an interactive dashboard.
	ContentType *TemplateSheetContentType `pulumi:"contentType"`
	// A description of the sheet.
	Description *string `pulumi:"description"`
	// The list of filter controls that are on a sheet.
	//
	// For more information, see [Adding filter controls to analysis sheets](https://docs.aws.amazon.com/quicksight/latest/user/filter-controls.html) in the *Amazon QuickSight User Guide* .
	FilterControls []TemplateFilterControl `pulumi:"filterControls"`
	// A list of images on a sheet.
	Images []TemplateSheetImage `pulumi:"images"`
	// Layouts define how the components of a sheet are arranged.
	//
	// For more information, see [Types of layout](https://docs.aws.amazon.com/quicksight/latest/user/types-of-layout.html) in the *Amazon QuickSight User Guide* .
	Layouts []TemplateLayout `pulumi:"layouts"`
	// The name of the sheet. This name is displayed on the sheet's tab in the Amazon QuickSight console.
	Name *string `pulumi:"name"`
	// The list of parameter controls that are on a sheet.
	//
	// For more information, see [Using a Control with a Parameter in Amazon QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/parameters-controls.html) in the *Amazon QuickSight User Guide* .
	ParameterControls []TemplateParameterControl `pulumi:"parameterControls"`
	// The control layouts of the sheet.
	SheetControlLayouts []TemplateSheetControlLayout `pulumi:"sheetControlLayouts"`
	// The unique identifier of a sheet.
	SheetId string `pulumi:"sheetId"`
	// The text boxes that are on a sheet.
	TextBoxes []TemplateSheetTextBox `pulumi:"textBoxes"`
	// The title of the sheet.
	Title *string `pulumi:"title"`
	// A list of the visuals that are on a sheet. Visual placement is determined by the layout of the sheet.
	Visuals []TemplateVisual `pulumi:"visuals"`
}

// TemplateSheetDefinitionInput is an input type that accepts TemplateSheetDefinitionArgs and TemplateSheetDefinitionOutput values.
// You can construct a concrete instance of `TemplateSheetDefinitionInput` via:
//
//	TemplateSheetDefinitionArgs{...}
type TemplateSheetDefinitionInput interface {
	pulumi.Input

	ToTemplateSheetDefinitionOutput() TemplateSheetDefinitionOutput
	ToTemplateSheetDefinitionOutputWithContext(context.Context) TemplateSheetDefinitionOutput
}

type TemplateSheetDefinitionArgs struct {
	// The layout content type of the sheet. Choose one of the following options:
	//
	// - `PAGINATED` : Creates a sheet for a paginated report.
	// - `INTERACTIVE` : Creates a sheet for an interactive dashboard.
	ContentType TemplateSheetContentTypePtrInput `pulumi:"contentType"`
	// A description of the sheet.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The list of filter controls that are on a sheet.
	//
	// For more information, see [Adding filter controls to analysis sheets](https://docs.aws.amazon.com/quicksight/latest/user/filter-controls.html) in the *Amazon QuickSight User Guide* .
	FilterControls TemplateFilterControlArrayInput `pulumi:"filterControls"`
	// A list of images on a sheet.
	Images TemplateSheetImageArrayInput `pulumi:"images"`
	// Layouts define how the components of a sheet are arranged.
	//
	// For more information, see [Types of layout](https://docs.aws.amazon.com/quicksight/latest/user/types-of-layout.html) in the *Amazon QuickSight User Guide* .
	Layouts TemplateLayoutArrayInput `pulumi:"layouts"`
	// The name of the sheet. This name is displayed on the sheet's tab in the Amazon QuickSight console.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The list of parameter controls that are on a sheet.
	//
	// For more information, see [Using a Control with a Parameter in Amazon QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/parameters-controls.html) in the *Amazon QuickSight User Guide* .
	ParameterControls TemplateParameterControlArrayInput `pulumi:"parameterControls"`
	// The control layouts of the sheet.
	SheetControlLayouts TemplateSheetControlLayoutArrayInput `pulumi:"sheetControlLayouts"`
	// The unique identifier of a sheet.
	SheetId pulumi.StringInput `pulumi:"sheetId"`
	// The text boxes that are on a sheet.
	TextBoxes TemplateSheetTextBoxArrayInput `pulumi:"textBoxes"`
	// The title of the sheet.
	Title pulumi.StringPtrInput `pulumi:"title"`
	// A list of the visuals that are on a sheet. Visual placement is determined by the layout of the sheet.
	Visuals TemplateVisualArrayInput `pulumi:"visuals"`
}

func (TemplateSheetDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSheetDefinition)(nil)).Elem()
}

func (i TemplateSheetDefinitionArgs) ToTemplateSheetDefinitionOutput() TemplateSheetDefinitionOutput {
	return i.ToTemplateSheetDefinitionOutputWithContext(context.Background())
}

func (i TemplateSheetDefinitionArgs) ToTemplateSheetDefinitionOutputWithContext(ctx context.Context) TemplateSheetDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSheetDefinitionOutput)
}

// TemplateSheetDefinitionArrayInput is an input type that accepts TemplateSheetDefinitionArray and TemplateSheetDefinitionArrayOutput values.
// You can construct a concrete instance of `TemplateSheetDefinitionArrayInput` via:
//
//	TemplateSheetDefinitionArray{ TemplateSheetDefinitionArgs{...} }
type TemplateSheetDefinitionArrayInput interface {
	pulumi.Input

	ToTemplateSheetDefinitionArrayOutput() TemplateSheetDefinitionArrayOutput
	ToTemplateSheetDefinitionArrayOutputWithContext(context.Context) TemplateSheetDefinitionArrayOutput
}

type TemplateSheetDefinitionArray []TemplateSheetDefinitionInput

func (TemplateSheetDefinitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateSheetDefinition)(nil)).Elem()
}

func (i TemplateSheetDefinitionArray) ToTemplateSheetDefinitionArrayOutput() TemplateSheetDefinitionArrayOutput {
	return i.ToTemplateSheetDefinitionArrayOutputWithContext(context.Background())
}

func (i TemplateSheetDefinitionArray) ToTemplateSheetDefinitionArrayOutputWithContext(ctx context.Context) TemplateSheetDefinitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSheetDefinitionArrayOutput)
}

type TemplateSheetDefinitionOutput struct{ *pulumi.OutputState }

func (TemplateSheetDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSheetDefinition)(nil)).Elem()
}

func (o TemplateSheetDefinitionOutput) ToTemplateSheetDefinitionOutput() TemplateSheetDefinitionOutput {
	return o
}

func (o TemplateSheetDefinitionOutput) ToTemplateSheetDefinitionOutputWithContext(ctx context.Context) TemplateSheetDefinitionOutput {
	return o
}

// The layout content type of the sheet. Choose one of the following options:
//
// - `PAGINATED` : Creates a sheet for a paginated report.
// - `INTERACTIVE` : Creates a sheet for an interactive dashboard.
func (o TemplateSheetDefinitionOutput) ContentType() TemplateSheetContentTypePtrOutput {
	return o.ApplyT(func(v TemplateSheetDefinition) *TemplateSheetContentType { return v.ContentType }).(TemplateSheetContentTypePtrOutput)
}

// A description of the sheet.
func (o TemplateSheetDefinitionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateSheetDefinition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The list of filter controls that are on a sheet.
//
// For more information, see [Adding filter controls to analysis sheets](https://docs.aws.amazon.com/quicksight/latest/user/filter-controls.html) in the *Amazon QuickSight User Guide* .
func (o TemplateSheetDefinitionOutput) FilterControls() TemplateFilterControlArrayOutput {
	return o.ApplyT(func(v TemplateSheetDefinition) []TemplateFilterControl { return v.FilterControls }).(TemplateFilterControlArrayOutput)
}

// A list of images on a sheet.
func (o TemplateSheetDefinitionOutput) Images() TemplateSheetImageArrayOutput {
	return o.ApplyT(func(v TemplateSheetDefinition) []TemplateSheetImage { return v.Images }).(TemplateSheetImageArrayOutput)
}

// Layouts define how the components of a sheet are arranged.
//
// For more information, see [Types of layout](https://docs.aws.amazon.com/quicksight/latest/user/types-of-layout.html) in the *Amazon QuickSight User Guide* .
func (o TemplateSheetDefinitionOutput) Layouts() TemplateLayoutArrayOutput {
	return o.ApplyT(func(v TemplateSheetDefinition) []TemplateLayout { return v.Layouts }).(TemplateLayoutArrayOutput)
}

// The name of the sheet. This name is displayed on the sheet's tab in the Amazon QuickSight console.
func (o TemplateSheetDefinitionOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateSheetDefinition) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The list of parameter controls that are on a sheet.
//
// For more information, see [Using a Control with a Parameter in Amazon QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/parameters-controls.html) in the *Amazon QuickSight User Guide* .
func (o TemplateSheetDefinitionOutput) ParameterControls() TemplateParameterControlArrayOutput {
	return o.ApplyT(func(v TemplateSheetDefinition) []TemplateParameterControl { return v.ParameterControls }).(TemplateParameterControlArrayOutput)
}

// The control layouts of the sheet.
func (o TemplateSheetDefinitionOutput) SheetControlLayouts() TemplateSheetControlLayoutArrayOutput {
	return o.ApplyT(func(v TemplateSheetDefinition) []TemplateSheetControlLayout { return v.SheetControlLayouts }).(TemplateSheetControlLayoutArrayOutput)
}

// The unique identifier of a sheet.
func (o TemplateSheetDefinitionOutput) SheetId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateSheetDefinition) string { return v.SheetId }).(pulumi.StringOutput)
}

// The text boxes that are on a sheet.
func (o TemplateSheetDefinitionOutput) TextBoxes() TemplateSheetTextBoxArrayOutput {
	return o.ApplyT(func(v TemplateSheetDefinition) []TemplateSheetTextBox { return v.TextBoxes }).(TemplateSheetTextBoxArrayOutput)
}

// The title of the sheet.
func (o TemplateSheetDefinitionOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateSheetDefinition) *string { return v.Title }).(pulumi.StringPtrOutput)
}

// A list of the visuals that are on a sheet. Visual placement is determined by the layout of the sheet.
func (o TemplateSheetDefinitionOutput) Visuals() TemplateVisualArrayOutput {
	return o.ApplyT(func(v TemplateSheetDefinition) []TemplateVisual { return v.Visuals }).(TemplateVisualArrayOutput)
}

type TemplateSheetDefinitionArrayOutput struct{ *pulumi.OutputState }

func (TemplateSheetDefinitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateSheetDefinition)(nil)).Elem()
}

func (o TemplateSheetDefinitionArrayOutput) ToTemplateSheetDefinitionArrayOutput() TemplateSheetDefinitionArrayOutput {
	return o
}

func (o TemplateSheetDefinitionArrayOutput) ToTemplateSheetDefinitionArrayOutputWithContext(ctx context.Context) TemplateSheetDefinitionArrayOutput {
	return o
}

func (o TemplateSheetDefinitionArrayOutput) Index(i pulumi.IntInput) TemplateSheetDefinitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateSheetDefinition {
		return vs[0].([]TemplateSheetDefinition)[vs[1].(int)]
	}).(TemplateSheetDefinitionOutput)
}

type TemplateSheetElementConfigurationOverrides struct {
	// Determines whether or not the overrides are visible. Choose one of the following options:
	//
	// - `VISIBLE`
	// - `HIDDEN`
	Visibility interface{} `pulumi:"visibility"`
}

// TemplateSheetElementConfigurationOverridesInput is an input type that accepts TemplateSheetElementConfigurationOverridesArgs and TemplateSheetElementConfigurationOverridesOutput values.
// You can construct a concrete instance of `TemplateSheetElementConfigurationOverridesInput` via:
//
//	TemplateSheetElementConfigurationOverridesArgs{...}
type TemplateSheetElementConfigurationOverridesInput interface {
	pulumi.Input

	ToTemplateSheetElementConfigurationOverridesOutput() TemplateSheetElementConfigurationOverridesOutput
	ToTemplateSheetElementConfigurationOverridesOutputWithContext(context.Context) TemplateSheetElementConfigurationOverridesOutput
}

type TemplateSheetElementConfigurationOverridesArgs struct {
	// Determines whether or not the overrides are visible. Choose one of the following options:
	//
	// - `VISIBLE`
	// - `HIDDEN`
	Visibility pulumi.Input `pulumi:"visibility"`
}

func (TemplateSheetElementConfigurationOverridesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSheetElementConfigurationOverrides)(nil)).Elem()
}

func (i TemplateSheetElementConfigurationOverridesArgs) ToTemplateSheetElementConfigurationOverridesOutput() TemplateSheetElementConfigurationOverridesOutput {
	return i.ToTemplateSheetElementConfigurationOverridesOutputWithContext(context.Background())
}

func (i TemplateSheetElementConfigurationOverridesArgs) ToTemplateSheetElementConfigurationOverridesOutputWithContext(ctx context.Context) TemplateSheetElementConfigurationOverridesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSheetElementConfigurationOverridesOutput)
}

type TemplateSheetElementConfigurationOverridesOutput struct{ *pulumi.OutputState }

func (TemplateSheetElementConfigurationOverridesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSheetElementConfigurationOverrides)(nil)).Elem()
}

func (o TemplateSheetElementConfigurationOverridesOutput) ToTemplateSheetElementConfigurationOverridesOutput() TemplateSheetElementConfigurationOverridesOutput {
	return o
}

func (o TemplateSheetElementConfigurationOverridesOutput) ToTemplateSheetElementConfigurationOverridesOutputWithContext(ctx context.Context) TemplateSheetElementConfigurationOverridesOutput {
	return o
}

// Determines whether or not the overrides are visible. Choose one of the following options:
//
// - `VISIBLE`
// - `HIDDEN`
func (o TemplateSheetElementConfigurationOverridesOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateSheetElementConfigurationOverrides) interface{} { return v.Visibility }).(pulumi.AnyOutput)
}

type TemplateSheetElementRenderingRule struct {
	// The override configuration of the rendering rules of a sheet.
	ConfigurationOverrides TemplateSheetElementConfigurationOverrides `pulumi:"configurationOverrides"`
	// The expression of the rendering rules of a sheet.
	Expression string `pulumi:"expression"`
}

// TemplateSheetElementRenderingRuleInput is an input type that accepts TemplateSheetElementRenderingRuleArgs and TemplateSheetElementRenderingRuleOutput values.
// You can construct a concrete instance of `TemplateSheetElementRenderingRuleInput` via:
//
//	TemplateSheetElementRenderingRuleArgs{...}
type TemplateSheetElementRenderingRuleInput interface {
	pulumi.Input

	ToTemplateSheetElementRenderingRuleOutput() TemplateSheetElementRenderingRuleOutput
	ToTemplateSheetElementRenderingRuleOutputWithContext(context.Context) TemplateSheetElementRenderingRuleOutput
}

type TemplateSheetElementRenderingRuleArgs struct {
	// The override configuration of the rendering rules of a sheet.
	ConfigurationOverrides TemplateSheetElementConfigurationOverridesInput `pulumi:"configurationOverrides"`
	// The expression of the rendering rules of a sheet.
	Expression pulumi.StringInput `pulumi:"expression"`
}

func (TemplateSheetElementRenderingRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSheetElementRenderingRule)(nil)).Elem()
}

func (i TemplateSheetElementRenderingRuleArgs) ToTemplateSheetElementRenderingRuleOutput() TemplateSheetElementRenderingRuleOutput {
	return i.ToTemplateSheetElementRenderingRuleOutputWithContext(context.Background())
}

func (i TemplateSheetElementRenderingRuleArgs) ToTemplateSheetElementRenderingRuleOutputWithContext(ctx context.Context) TemplateSheetElementRenderingRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSheetElementRenderingRuleOutput)
}

// TemplateSheetElementRenderingRuleArrayInput is an input type that accepts TemplateSheetElementRenderingRuleArray and TemplateSheetElementRenderingRuleArrayOutput values.
// You can construct a concrete instance of `TemplateSheetElementRenderingRuleArrayInput` via:
//
//	TemplateSheetElementRenderingRuleArray{ TemplateSheetElementRenderingRuleArgs{...} }
type TemplateSheetElementRenderingRuleArrayInput interface {
	pulumi.Input

	ToTemplateSheetElementRenderingRuleArrayOutput() TemplateSheetElementRenderingRuleArrayOutput
	ToTemplateSheetElementRenderingRuleArrayOutputWithContext(context.Context) TemplateSheetElementRenderingRuleArrayOutput
}

type TemplateSheetElementRenderingRuleArray []TemplateSheetElementRenderingRuleInput

func (TemplateSheetElementRenderingRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateSheetElementRenderingRule)(nil)).Elem()
}

func (i TemplateSheetElementRenderingRuleArray) ToTemplateSheetElementRenderingRuleArrayOutput() TemplateSheetElementRenderingRuleArrayOutput {
	return i.ToTemplateSheetElementRenderingRuleArrayOutputWithContext(context.Background())
}

func (i TemplateSheetElementRenderingRuleArray) ToTemplateSheetElementRenderingRuleArrayOutputWithContext(ctx context.Context) TemplateSheetElementRenderingRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSheetElementRenderingRuleArrayOutput)
}

type TemplateSheetElementRenderingRuleOutput struct{ *pulumi.OutputState }

func (TemplateSheetElementRenderingRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSheetElementRenderingRule)(nil)).Elem()
}

func (o TemplateSheetElementRenderingRuleOutput) ToTemplateSheetElementRenderingRuleOutput() TemplateSheetElementRenderingRuleOutput {
	return o
}

func (o TemplateSheetElementRenderingRuleOutput) ToTemplateSheetElementRenderingRuleOutputWithContext(ctx context.Context) TemplateSheetElementRenderingRuleOutput {
	return o
}

// The override configuration of the rendering rules of a sheet.
func (o TemplateSheetElementRenderingRuleOutput) ConfigurationOverrides() TemplateSheetElementConfigurationOverridesOutput {
	return o.ApplyT(func(v TemplateSheetElementRenderingRule) TemplateSheetElementConfigurationOverrides {
		return v.ConfigurationOverrides
	}).(TemplateSheetElementConfigurationOverridesOutput)
}

// The expression of the rendering rules of a sheet.
func (o TemplateSheetElementRenderingRuleOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateSheetElementRenderingRule) string { return v.Expression }).(pulumi.StringOutput)
}

type TemplateSheetElementRenderingRuleArrayOutput struct{ *pulumi.OutputState }

func (TemplateSheetElementRenderingRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateSheetElementRenderingRule)(nil)).Elem()
}

func (o TemplateSheetElementRenderingRuleArrayOutput) ToTemplateSheetElementRenderingRuleArrayOutput() TemplateSheetElementRenderingRuleArrayOutput {
	return o
}

func (o TemplateSheetElementRenderingRuleArrayOutput) ToTemplateSheetElementRenderingRuleArrayOutputWithContext(ctx context.Context) TemplateSheetElementRenderingRuleArrayOutput {
	return o
}

func (o TemplateSheetElementRenderingRuleArrayOutput) Index(i pulumi.IntInput) TemplateSheetElementRenderingRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateSheetElementRenderingRule {
		return vs[0].([]TemplateSheetElementRenderingRule)[vs[1].(int)]
	}).(TemplateSheetElementRenderingRuleOutput)
}

type TemplateSheetImage struct {
	// A list of custom actions that are configured for an image.
	Actions []TemplateImageCustomAction `pulumi:"actions"`
	// The alt text for the image.
	ImageContentAltText *string `pulumi:"imageContentAltText"`
	// The general image interactions setup for an image.
	Interactions *TemplateImageInteractionOptions `pulumi:"interactions"`
	// Determines how the image is scaled.
	Scaling *TemplateSheetImageScalingConfiguration `pulumi:"scaling"`
	// The ID of the sheet image.
	SheetImageId string `pulumi:"sheetImageId"`
	// The source of the image.
	Source TemplateSheetImageSource `pulumi:"source"`
	// The tooltip to be shown when hovering over the image.
	Tooltip *TemplateSheetImageTooltipConfiguration `pulumi:"tooltip"`
}

// TemplateSheetImageInput is an input type that accepts TemplateSheetImageArgs and TemplateSheetImageOutput values.
// You can construct a concrete instance of `TemplateSheetImageInput` via:
//
//	TemplateSheetImageArgs{...}
type TemplateSheetImageInput interface {
	pulumi.Input

	ToTemplateSheetImageOutput() TemplateSheetImageOutput
	ToTemplateSheetImageOutputWithContext(context.Context) TemplateSheetImageOutput
}

type TemplateSheetImageArgs struct {
	// A list of custom actions that are configured for an image.
	Actions TemplateImageCustomActionArrayInput `pulumi:"actions"`
	// The alt text for the image.
	ImageContentAltText pulumi.StringPtrInput `pulumi:"imageContentAltText"`
	// The general image interactions setup for an image.
	Interactions TemplateImageInteractionOptionsPtrInput `pulumi:"interactions"`
	// Determines how the image is scaled.
	Scaling TemplateSheetImageScalingConfigurationPtrInput `pulumi:"scaling"`
	// The ID of the sheet image.
	SheetImageId pulumi.StringInput `pulumi:"sheetImageId"`
	// The source of the image.
	Source TemplateSheetImageSourceInput `pulumi:"source"`
	// The tooltip to be shown when hovering over the image.
	Tooltip TemplateSheetImageTooltipConfigurationPtrInput `pulumi:"tooltip"`
}

func (TemplateSheetImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSheetImage)(nil)).Elem()
}

func (i TemplateSheetImageArgs) ToTemplateSheetImageOutput() TemplateSheetImageOutput {
	return i.ToTemplateSheetImageOutputWithContext(context.Background())
}

func (i TemplateSheetImageArgs) ToTemplateSheetImageOutputWithContext(ctx context.Context) TemplateSheetImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSheetImageOutput)
}

// TemplateSheetImageArrayInput is an input type that accepts TemplateSheetImageArray and TemplateSheetImageArrayOutput values.
// You can construct a concrete instance of `TemplateSheetImageArrayInput` via:
//
//	TemplateSheetImageArray{ TemplateSheetImageArgs{...} }
type TemplateSheetImageArrayInput interface {
	pulumi.Input

	ToTemplateSheetImageArrayOutput() TemplateSheetImageArrayOutput
	ToTemplateSheetImageArrayOutputWithContext(context.Context) TemplateSheetImageArrayOutput
}

type TemplateSheetImageArray []TemplateSheetImageInput

func (TemplateSheetImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateSheetImage)(nil)).Elem()
}

func (i TemplateSheetImageArray) ToTemplateSheetImageArrayOutput() TemplateSheetImageArrayOutput {
	return i.ToTemplateSheetImageArrayOutputWithContext(context.Background())
}

func (i TemplateSheetImageArray) ToTemplateSheetImageArrayOutputWithContext(ctx context.Context) TemplateSheetImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSheetImageArrayOutput)
}

type TemplateSheetImageOutput struct{ *pulumi.OutputState }

func (TemplateSheetImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSheetImage)(nil)).Elem()
}

func (o TemplateSheetImageOutput) ToTemplateSheetImageOutput() TemplateSheetImageOutput {
	return o
}

func (o TemplateSheetImageOutput) ToTemplateSheetImageOutputWithContext(ctx context.Context) TemplateSheetImageOutput {
	return o
}

// A list of custom actions that are configured for an image.
func (o TemplateSheetImageOutput) Actions() TemplateImageCustomActionArrayOutput {
	return o.ApplyT(func(v TemplateSheetImage) []TemplateImageCustomAction { return v.Actions }).(TemplateImageCustomActionArrayOutput)
}

// The alt text for the image.
func (o TemplateSheetImageOutput) ImageContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateSheetImage) *string { return v.ImageContentAltText }).(pulumi.StringPtrOutput)
}

// The general image interactions setup for an image.
func (o TemplateSheetImageOutput) Interactions() TemplateImageInteractionOptionsPtrOutput {
	return o.ApplyT(func(v TemplateSheetImage) *TemplateImageInteractionOptions { return v.Interactions }).(TemplateImageInteractionOptionsPtrOutput)
}

// Determines how the image is scaled.
func (o TemplateSheetImageOutput) Scaling() TemplateSheetImageScalingConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateSheetImage) *TemplateSheetImageScalingConfiguration { return v.Scaling }).(TemplateSheetImageScalingConfigurationPtrOutput)
}

// The ID of the sheet image.
func (o TemplateSheetImageOutput) SheetImageId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateSheetImage) string { return v.SheetImageId }).(pulumi.StringOutput)
}

// The source of the image.
func (o TemplateSheetImageOutput) Source() TemplateSheetImageSourceOutput {
	return o.ApplyT(func(v TemplateSheetImage) TemplateSheetImageSource { return v.Source }).(TemplateSheetImageSourceOutput)
}

// The tooltip to be shown when hovering over the image.
func (o TemplateSheetImageOutput) Tooltip() TemplateSheetImageTooltipConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateSheetImage) *TemplateSheetImageTooltipConfiguration { return v.Tooltip }).(TemplateSheetImageTooltipConfigurationPtrOutput)
}

type TemplateSheetImageArrayOutput struct{ *pulumi.OutputState }

func (TemplateSheetImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateSheetImage)(nil)).Elem()
}

func (o TemplateSheetImageArrayOutput) ToTemplateSheetImageArrayOutput() TemplateSheetImageArrayOutput {
	return o
}

func (o TemplateSheetImageArrayOutput) ToTemplateSheetImageArrayOutputWithContext(ctx context.Context) TemplateSheetImageArrayOutput {
	return o
}

func (o TemplateSheetImageArrayOutput) Index(i pulumi.IntInput) TemplateSheetImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateSheetImage {
		return vs[0].([]TemplateSheetImage)[vs[1].(int)]
	}).(TemplateSheetImageOutput)
}

type TemplateSheetImageScalingConfiguration struct {
	// The scaling option to use when fitting the image inside the container.
	//
	// Valid values are defined as follows:
	//
	// - `SCALE_TO_WIDTH` : The image takes up the entire width of the container. The image aspect ratio is preserved.
	// - `SCALE_TO_HEIGHT` : The image takes up the entire height of the container. The image aspect ratio is preserved.
	// - `SCALE_TO_CONTAINER` : The image takes up the entire width and height of the container. The image aspect ratio is not preserved.
	// - `SCALE_NONE` : The image is displayed in its original size and is not scaled to the container.
	ScalingType *TemplateSheetImageScalingType `pulumi:"scalingType"`
}

// TemplateSheetImageScalingConfigurationInput is an input type that accepts TemplateSheetImageScalingConfigurationArgs and TemplateSheetImageScalingConfigurationOutput values.
// You can construct a concrete instance of `TemplateSheetImageScalingConfigurationInput` via:
//
//	TemplateSheetImageScalingConfigurationArgs{...}
type TemplateSheetImageScalingConfigurationInput interface {
	pulumi.Input

	ToTemplateSheetImageScalingConfigurationOutput() TemplateSheetImageScalingConfigurationOutput
	ToTemplateSheetImageScalingConfigurationOutputWithContext(context.Context) TemplateSheetImageScalingConfigurationOutput
}

type TemplateSheetImageScalingConfigurationArgs struct {
	// The scaling option to use when fitting the image inside the container.
	//
	// Valid values are defined as follows:
	//
	// - `SCALE_TO_WIDTH` : The image takes up the entire width of the container. The image aspect ratio is preserved.
	// - `SCALE_TO_HEIGHT` : The image takes up the entire height of the container. The image aspect ratio is preserved.
	// - `SCALE_TO_CONTAINER` : The image takes up the entire width and height of the container. The image aspect ratio is not preserved.
	// - `SCALE_NONE` : The image is displayed in its original size and is not scaled to the container.
	ScalingType TemplateSheetImageScalingTypePtrInput `pulumi:"scalingType"`
}

func (TemplateSheetImageScalingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSheetImageScalingConfiguration)(nil)).Elem()
}

func (i TemplateSheetImageScalingConfigurationArgs) ToTemplateSheetImageScalingConfigurationOutput() TemplateSheetImageScalingConfigurationOutput {
	return i.ToTemplateSheetImageScalingConfigurationOutputWithContext(context.Background())
}

func (i TemplateSheetImageScalingConfigurationArgs) ToTemplateSheetImageScalingConfigurationOutputWithContext(ctx context.Context) TemplateSheetImageScalingConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSheetImageScalingConfigurationOutput)
}

func (i TemplateSheetImageScalingConfigurationArgs) ToTemplateSheetImageScalingConfigurationPtrOutput() TemplateSheetImageScalingConfigurationPtrOutput {
	return i.ToTemplateSheetImageScalingConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateSheetImageScalingConfigurationArgs) ToTemplateSheetImageScalingConfigurationPtrOutputWithContext(ctx context.Context) TemplateSheetImageScalingConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSheetImageScalingConfigurationOutput).ToTemplateSheetImageScalingConfigurationPtrOutputWithContext(ctx)
}

// TemplateSheetImageScalingConfigurationPtrInput is an input type that accepts TemplateSheetImageScalingConfigurationArgs, TemplateSheetImageScalingConfigurationPtr and TemplateSheetImageScalingConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateSheetImageScalingConfigurationPtrInput` via:
//
//	        TemplateSheetImageScalingConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateSheetImageScalingConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateSheetImageScalingConfigurationPtrOutput() TemplateSheetImageScalingConfigurationPtrOutput
	ToTemplateSheetImageScalingConfigurationPtrOutputWithContext(context.Context) TemplateSheetImageScalingConfigurationPtrOutput
}

type templateSheetImageScalingConfigurationPtrType TemplateSheetImageScalingConfigurationArgs

func TemplateSheetImageScalingConfigurationPtr(v *TemplateSheetImageScalingConfigurationArgs) TemplateSheetImageScalingConfigurationPtrInput {
	return (*templateSheetImageScalingConfigurationPtrType)(v)
}

func (*templateSheetImageScalingConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSheetImageScalingConfiguration)(nil)).Elem()
}

func (i *templateSheetImageScalingConfigurationPtrType) ToTemplateSheetImageScalingConfigurationPtrOutput() TemplateSheetImageScalingConfigurationPtrOutput {
	return i.ToTemplateSheetImageScalingConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateSheetImageScalingConfigurationPtrType) ToTemplateSheetImageScalingConfigurationPtrOutputWithContext(ctx context.Context) TemplateSheetImageScalingConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSheetImageScalingConfigurationPtrOutput)
}

type TemplateSheetImageScalingConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateSheetImageScalingConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSheetImageScalingConfiguration)(nil)).Elem()
}

func (o TemplateSheetImageScalingConfigurationOutput) ToTemplateSheetImageScalingConfigurationOutput() TemplateSheetImageScalingConfigurationOutput {
	return o
}

func (o TemplateSheetImageScalingConfigurationOutput) ToTemplateSheetImageScalingConfigurationOutputWithContext(ctx context.Context) TemplateSheetImageScalingConfigurationOutput {
	return o
}

func (o TemplateSheetImageScalingConfigurationOutput) ToTemplateSheetImageScalingConfigurationPtrOutput() TemplateSheetImageScalingConfigurationPtrOutput {
	return o.ToTemplateSheetImageScalingConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateSheetImageScalingConfigurationOutput) ToTemplateSheetImageScalingConfigurationPtrOutputWithContext(ctx context.Context) TemplateSheetImageScalingConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateSheetImageScalingConfiguration) *TemplateSheetImageScalingConfiguration {
		return &v
	}).(TemplateSheetImageScalingConfigurationPtrOutput)
}

// The scaling option to use when fitting the image inside the container.
//
// Valid values are defined as follows:
//
// - `SCALE_TO_WIDTH` : The image takes up the entire width of the container. The image aspect ratio is preserved.
// - `SCALE_TO_HEIGHT` : The image takes up the entire height of the container. The image aspect ratio is preserved.
// - `SCALE_TO_CONTAINER` : The image takes up the entire width and height of the container. The image aspect ratio is not preserved.
// - `SCALE_NONE` : The image is displayed in its original size and is not scaled to the container.
func (o TemplateSheetImageScalingConfigurationOutput) ScalingType() TemplateSheetImageScalingTypePtrOutput {
	return o.ApplyT(func(v TemplateSheetImageScalingConfiguration) *TemplateSheetImageScalingType { return v.ScalingType }).(TemplateSheetImageScalingTypePtrOutput)
}

type TemplateSheetImageScalingConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateSheetImageScalingConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSheetImageScalingConfiguration)(nil)).Elem()
}

func (o TemplateSheetImageScalingConfigurationPtrOutput) ToTemplateSheetImageScalingConfigurationPtrOutput() TemplateSheetImageScalingConfigurationPtrOutput {
	return o
}

func (o TemplateSheetImageScalingConfigurationPtrOutput) ToTemplateSheetImageScalingConfigurationPtrOutputWithContext(ctx context.Context) TemplateSheetImageScalingConfigurationPtrOutput {
	return o
}

func (o TemplateSheetImageScalingConfigurationPtrOutput) Elem() TemplateSheetImageScalingConfigurationOutput {
	return o.ApplyT(func(v *TemplateSheetImageScalingConfiguration) TemplateSheetImageScalingConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateSheetImageScalingConfiguration
		return ret
	}).(TemplateSheetImageScalingConfigurationOutput)
}

// The scaling option to use when fitting the image inside the container.
//
// Valid values are defined as follows:
//
// - `SCALE_TO_WIDTH` : The image takes up the entire width of the container. The image aspect ratio is preserved.
// - `SCALE_TO_HEIGHT` : The image takes up the entire height of the container. The image aspect ratio is preserved.
// - `SCALE_TO_CONTAINER` : The image takes up the entire width and height of the container. The image aspect ratio is not preserved.
// - `SCALE_NONE` : The image is displayed in its original size and is not scaled to the container.
func (o TemplateSheetImageScalingConfigurationPtrOutput) ScalingType() TemplateSheetImageScalingTypePtrOutput {
	return o.ApplyT(func(v *TemplateSheetImageScalingConfiguration) *TemplateSheetImageScalingType {
		if v == nil {
			return nil
		}
		return v.ScalingType
	}).(TemplateSheetImageScalingTypePtrOutput)
}

type TemplateSheetImageSource struct {
	// The source of the static file that contains the image.
	SheetImageStaticFileSource *TemplateSheetImageStaticFileSource `pulumi:"sheetImageStaticFileSource"`
}

// TemplateSheetImageSourceInput is an input type that accepts TemplateSheetImageSourceArgs and TemplateSheetImageSourceOutput values.
// You can construct a concrete instance of `TemplateSheetImageSourceInput` via:
//
//	TemplateSheetImageSourceArgs{...}
type TemplateSheetImageSourceInput interface {
	pulumi.Input

	ToTemplateSheetImageSourceOutput() TemplateSheetImageSourceOutput
	ToTemplateSheetImageSourceOutputWithContext(context.Context) TemplateSheetImageSourceOutput
}

type TemplateSheetImageSourceArgs struct {
	// The source of the static file that contains the image.
	SheetImageStaticFileSource TemplateSheetImageStaticFileSourcePtrInput `pulumi:"sheetImageStaticFileSource"`
}

func (TemplateSheetImageSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSheetImageSource)(nil)).Elem()
}

func (i TemplateSheetImageSourceArgs) ToTemplateSheetImageSourceOutput() TemplateSheetImageSourceOutput {
	return i.ToTemplateSheetImageSourceOutputWithContext(context.Background())
}

func (i TemplateSheetImageSourceArgs) ToTemplateSheetImageSourceOutputWithContext(ctx context.Context) TemplateSheetImageSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSheetImageSourceOutput)
}

type TemplateSheetImageSourceOutput struct{ *pulumi.OutputState }

func (TemplateSheetImageSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSheetImageSource)(nil)).Elem()
}

func (o TemplateSheetImageSourceOutput) ToTemplateSheetImageSourceOutput() TemplateSheetImageSourceOutput {
	return o
}

func (o TemplateSheetImageSourceOutput) ToTemplateSheetImageSourceOutputWithContext(ctx context.Context) TemplateSheetImageSourceOutput {
	return o
}

// The source of the static file that contains the image.
func (o TemplateSheetImageSourceOutput) SheetImageStaticFileSource() TemplateSheetImageStaticFileSourcePtrOutput {
	return o.ApplyT(func(v TemplateSheetImageSource) *TemplateSheetImageStaticFileSource {
		return v.SheetImageStaticFileSource
	}).(TemplateSheetImageStaticFileSourcePtrOutput)
}

type TemplateSheetImageStaticFileSource struct {
	// The ID of the static file that contains the image.
	StaticFileId string `pulumi:"staticFileId"`
}

// TemplateSheetImageStaticFileSourceInput is an input type that accepts TemplateSheetImageStaticFileSourceArgs and TemplateSheetImageStaticFileSourceOutput values.
// You can construct a concrete instance of `TemplateSheetImageStaticFileSourceInput` via:
//
//	TemplateSheetImageStaticFileSourceArgs{...}
type TemplateSheetImageStaticFileSourceInput interface {
	pulumi.Input

	ToTemplateSheetImageStaticFileSourceOutput() TemplateSheetImageStaticFileSourceOutput
	ToTemplateSheetImageStaticFileSourceOutputWithContext(context.Context) TemplateSheetImageStaticFileSourceOutput
}

type TemplateSheetImageStaticFileSourceArgs struct {
	// The ID of the static file that contains the image.
	StaticFileId pulumi.StringInput `pulumi:"staticFileId"`
}

func (TemplateSheetImageStaticFileSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSheetImageStaticFileSource)(nil)).Elem()
}

func (i TemplateSheetImageStaticFileSourceArgs) ToTemplateSheetImageStaticFileSourceOutput() TemplateSheetImageStaticFileSourceOutput {
	return i.ToTemplateSheetImageStaticFileSourceOutputWithContext(context.Background())
}

func (i TemplateSheetImageStaticFileSourceArgs) ToTemplateSheetImageStaticFileSourceOutputWithContext(ctx context.Context) TemplateSheetImageStaticFileSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSheetImageStaticFileSourceOutput)
}

func (i TemplateSheetImageStaticFileSourceArgs) ToTemplateSheetImageStaticFileSourcePtrOutput() TemplateSheetImageStaticFileSourcePtrOutput {
	return i.ToTemplateSheetImageStaticFileSourcePtrOutputWithContext(context.Background())
}

func (i TemplateSheetImageStaticFileSourceArgs) ToTemplateSheetImageStaticFileSourcePtrOutputWithContext(ctx context.Context) TemplateSheetImageStaticFileSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSheetImageStaticFileSourceOutput).ToTemplateSheetImageStaticFileSourcePtrOutputWithContext(ctx)
}

// TemplateSheetImageStaticFileSourcePtrInput is an input type that accepts TemplateSheetImageStaticFileSourceArgs, TemplateSheetImageStaticFileSourcePtr and TemplateSheetImageStaticFileSourcePtrOutput values.
// You can construct a concrete instance of `TemplateSheetImageStaticFileSourcePtrInput` via:
//
//	        TemplateSheetImageStaticFileSourceArgs{...}
//
//	or:
//
//	        nil
type TemplateSheetImageStaticFileSourcePtrInput interface {
	pulumi.Input

	ToTemplateSheetImageStaticFileSourcePtrOutput() TemplateSheetImageStaticFileSourcePtrOutput
	ToTemplateSheetImageStaticFileSourcePtrOutputWithContext(context.Context) TemplateSheetImageStaticFileSourcePtrOutput
}

type templateSheetImageStaticFileSourcePtrType TemplateSheetImageStaticFileSourceArgs

func TemplateSheetImageStaticFileSourcePtr(v *TemplateSheetImageStaticFileSourceArgs) TemplateSheetImageStaticFileSourcePtrInput {
	return (*templateSheetImageStaticFileSourcePtrType)(v)
}

func (*templateSheetImageStaticFileSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSheetImageStaticFileSource)(nil)).Elem()
}

func (i *templateSheetImageStaticFileSourcePtrType) ToTemplateSheetImageStaticFileSourcePtrOutput() TemplateSheetImageStaticFileSourcePtrOutput {
	return i.ToTemplateSheetImageStaticFileSourcePtrOutputWithContext(context.Background())
}

func (i *templateSheetImageStaticFileSourcePtrType) ToTemplateSheetImageStaticFileSourcePtrOutputWithContext(ctx context.Context) TemplateSheetImageStaticFileSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSheetImageStaticFileSourcePtrOutput)
}

type TemplateSheetImageStaticFileSourceOutput struct{ *pulumi.OutputState }

func (TemplateSheetImageStaticFileSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSheetImageStaticFileSource)(nil)).Elem()
}

func (o TemplateSheetImageStaticFileSourceOutput) ToTemplateSheetImageStaticFileSourceOutput() TemplateSheetImageStaticFileSourceOutput {
	return o
}

func (o TemplateSheetImageStaticFileSourceOutput) ToTemplateSheetImageStaticFileSourceOutputWithContext(ctx context.Context) TemplateSheetImageStaticFileSourceOutput {
	return o
}

func (o TemplateSheetImageStaticFileSourceOutput) ToTemplateSheetImageStaticFileSourcePtrOutput() TemplateSheetImageStaticFileSourcePtrOutput {
	return o.ToTemplateSheetImageStaticFileSourcePtrOutputWithContext(context.Background())
}

func (o TemplateSheetImageStaticFileSourceOutput) ToTemplateSheetImageStaticFileSourcePtrOutputWithContext(ctx context.Context) TemplateSheetImageStaticFileSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateSheetImageStaticFileSource) *TemplateSheetImageStaticFileSource {
		return &v
	}).(TemplateSheetImageStaticFileSourcePtrOutput)
}

// The ID of the static file that contains the image.
func (o TemplateSheetImageStaticFileSourceOutput) StaticFileId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateSheetImageStaticFileSource) string { return v.StaticFileId }).(pulumi.StringOutput)
}

type TemplateSheetImageStaticFileSourcePtrOutput struct{ *pulumi.OutputState }

func (TemplateSheetImageStaticFileSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSheetImageStaticFileSource)(nil)).Elem()
}

func (o TemplateSheetImageStaticFileSourcePtrOutput) ToTemplateSheetImageStaticFileSourcePtrOutput() TemplateSheetImageStaticFileSourcePtrOutput {
	return o
}

func (o TemplateSheetImageStaticFileSourcePtrOutput) ToTemplateSheetImageStaticFileSourcePtrOutputWithContext(ctx context.Context) TemplateSheetImageStaticFileSourcePtrOutput {
	return o
}

func (o TemplateSheetImageStaticFileSourcePtrOutput) Elem() TemplateSheetImageStaticFileSourceOutput {
	return o.ApplyT(func(v *TemplateSheetImageStaticFileSource) TemplateSheetImageStaticFileSource {
		if v != nil {
			return *v
		}
		var ret TemplateSheetImageStaticFileSource
		return ret
	}).(TemplateSheetImageStaticFileSourceOutput)
}

// The ID of the static file that contains the image.
func (o TemplateSheetImageStaticFileSourcePtrOutput) StaticFileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateSheetImageStaticFileSource) *string {
		if v == nil {
			return nil
		}
		return &v.StaticFileId
	}).(pulumi.StringPtrOutput)
}

type TemplateSheetImageTooltipConfiguration struct {
	// The text that appears in the tooltip.
	TooltipText *TemplateSheetImageTooltipText `pulumi:"tooltipText"`
	// The visibility of the tooltip.
	Visibility interface{} `pulumi:"visibility"`
}

// TemplateSheetImageTooltipConfigurationInput is an input type that accepts TemplateSheetImageTooltipConfigurationArgs and TemplateSheetImageTooltipConfigurationOutput values.
// You can construct a concrete instance of `TemplateSheetImageTooltipConfigurationInput` via:
//
//	TemplateSheetImageTooltipConfigurationArgs{...}
type TemplateSheetImageTooltipConfigurationInput interface {
	pulumi.Input

	ToTemplateSheetImageTooltipConfigurationOutput() TemplateSheetImageTooltipConfigurationOutput
	ToTemplateSheetImageTooltipConfigurationOutputWithContext(context.Context) TemplateSheetImageTooltipConfigurationOutput
}

type TemplateSheetImageTooltipConfigurationArgs struct {
	// The text that appears in the tooltip.
	TooltipText TemplateSheetImageTooltipTextPtrInput `pulumi:"tooltipText"`
	// The visibility of the tooltip.
	Visibility pulumi.Input `pulumi:"visibility"`
}

func (TemplateSheetImageTooltipConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSheetImageTooltipConfiguration)(nil)).Elem()
}

func (i TemplateSheetImageTooltipConfigurationArgs) ToTemplateSheetImageTooltipConfigurationOutput() TemplateSheetImageTooltipConfigurationOutput {
	return i.ToTemplateSheetImageTooltipConfigurationOutputWithContext(context.Background())
}

func (i TemplateSheetImageTooltipConfigurationArgs) ToTemplateSheetImageTooltipConfigurationOutputWithContext(ctx context.Context) TemplateSheetImageTooltipConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSheetImageTooltipConfigurationOutput)
}

func (i TemplateSheetImageTooltipConfigurationArgs) ToTemplateSheetImageTooltipConfigurationPtrOutput() TemplateSheetImageTooltipConfigurationPtrOutput {
	return i.ToTemplateSheetImageTooltipConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateSheetImageTooltipConfigurationArgs) ToTemplateSheetImageTooltipConfigurationPtrOutputWithContext(ctx context.Context) TemplateSheetImageTooltipConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSheetImageTooltipConfigurationOutput).ToTemplateSheetImageTooltipConfigurationPtrOutputWithContext(ctx)
}

// TemplateSheetImageTooltipConfigurationPtrInput is an input type that accepts TemplateSheetImageTooltipConfigurationArgs, TemplateSheetImageTooltipConfigurationPtr and TemplateSheetImageTooltipConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateSheetImageTooltipConfigurationPtrInput` via:
//
//	        TemplateSheetImageTooltipConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateSheetImageTooltipConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateSheetImageTooltipConfigurationPtrOutput() TemplateSheetImageTooltipConfigurationPtrOutput
	ToTemplateSheetImageTooltipConfigurationPtrOutputWithContext(context.Context) TemplateSheetImageTooltipConfigurationPtrOutput
}

type templateSheetImageTooltipConfigurationPtrType TemplateSheetImageTooltipConfigurationArgs

func TemplateSheetImageTooltipConfigurationPtr(v *TemplateSheetImageTooltipConfigurationArgs) TemplateSheetImageTooltipConfigurationPtrInput {
	return (*templateSheetImageTooltipConfigurationPtrType)(v)
}

func (*templateSheetImageTooltipConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSheetImageTooltipConfiguration)(nil)).Elem()
}

func (i *templateSheetImageTooltipConfigurationPtrType) ToTemplateSheetImageTooltipConfigurationPtrOutput() TemplateSheetImageTooltipConfigurationPtrOutput {
	return i.ToTemplateSheetImageTooltipConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateSheetImageTooltipConfigurationPtrType) ToTemplateSheetImageTooltipConfigurationPtrOutputWithContext(ctx context.Context) TemplateSheetImageTooltipConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSheetImageTooltipConfigurationPtrOutput)
}

type TemplateSheetImageTooltipConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateSheetImageTooltipConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSheetImageTooltipConfiguration)(nil)).Elem()
}

func (o TemplateSheetImageTooltipConfigurationOutput) ToTemplateSheetImageTooltipConfigurationOutput() TemplateSheetImageTooltipConfigurationOutput {
	return o
}

func (o TemplateSheetImageTooltipConfigurationOutput) ToTemplateSheetImageTooltipConfigurationOutputWithContext(ctx context.Context) TemplateSheetImageTooltipConfigurationOutput {
	return o
}

func (o TemplateSheetImageTooltipConfigurationOutput) ToTemplateSheetImageTooltipConfigurationPtrOutput() TemplateSheetImageTooltipConfigurationPtrOutput {
	return o.ToTemplateSheetImageTooltipConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateSheetImageTooltipConfigurationOutput) ToTemplateSheetImageTooltipConfigurationPtrOutputWithContext(ctx context.Context) TemplateSheetImageTooltipConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateSheetImageTooltipConfiguration) *TemplateSheetImageTooltipConfiguration {
		return &v
	}).(TemplateSheetImageTooltipConfigurationPtrOutput)
}

// The text that appears in the tooltip.
func (o TemplateSheetImageTooltipConfigurationOutput) TooltipText() TemplateSheetImageTooltipTextPtrOutput {
	return o.ApplyT(func(v TemplateSheetImageTooltipConfiguration) *TemplateSheetImageTooltipText { return v.TooltipText }).(TemplateSheetImageTooltipTextPtrOutput)
}

// The visibility of the tooltip.
func (o TemplateSheetImageTooltipConfigurationOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateSheetImageTooltipConfiguration) interface{} { return v.Visibility }).(pulumi.AnyOutput)
}

type TemplateSheetImageTooltipConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateSheetImageTooltipConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSheetImageTooltipConfiguration)(nil)).Elem()
}

func (o TemplateSheetImageTooltipConfigurationPtrOutput) ToTemplateSheetImageTooltipConfigurationPtrOutput() TemplateSheetImageTooltipConfigurationPtrOutput {
	return o
}

func (o TemplateSheetImageTooltipConfigurationPtrOutput) ToTemplateSheetImageTooltipConfigurationPtrOutputWithContext(ctx context.Context) TemplateSheetImageTooltipConfigurationPtrOutput {
	return o
}

func (o TemplateSheetImageTooltipConfigurationPtrOutput) Elem() TemplateSheetImageTooltipConfigurationOutput {
	return o.ApplyT(func(v *TemplateSheetImageTooltipConfiguration) TemplateSheetImageTooltipConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateSheetImageTooltipConfiguration
		return ret
	}).(TemplateSheetImageTooltipConfigurationOutput)
}

// The text that appears in the tooltip.
func (o TemplateSheetImageTooltipConfigurationPtrOutput) TooltipText() TemplateSheetImageTooltipTextPtrOutput {
	return o.ApplyT(func(v *TemplateSheetImageTooltipConfiguration) *TemplateSheetImageTooltipText {
		if v == nil {
			return nil
		}
		return v.TooltipText
	}).(TemplateSheetImageTooltipTextPtrOutput)
}

// The visibility of the tooltip.
func (o TemplateSheetImageTooltipConfigurationPtrOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateSheetImageTooltipConfiguration) interface{} {
		if v == nil {
			return nil
		}
		return v.Visibility
	}).(pulumi.AnyOutput)
}

type TemplateSheetImageTooltipText struct {
	// The plain text format.
	PlainText *string `pulumi:"plainText"`
}

// TemplateSheetImageTooltipTextInput is an input type that accepts TemplateSheetImageTooltipTextArgs and TemplateSheetImageTooltipTextOutput values.
// You can construct a concrete instance of `TemplateSheetImageTooltipTextInput` via:
//
//	TemplateSheetImageTooltipTextArgs{...}
type TemplateSheetImageTooltipTextInput interface {
	pulumi.Input

	ToTemplateSheetImageTooltipTextOutput() TemplateSheetImageTooltipTextOutput
	ToTemplateSheetImageTooltipTextOutputWithContext(context.Context) TemplateSheetImageTooltipTextOutput
}

type TemplateSheetImageTooltipTextArgs struct {
	// The plain text format.
	PlainText pulumi.StringPtrInput `pulumi:"plainText"`
}

func (TemplateSheetImageTooltipTextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSheetImageTooltipText)(nil)).Elem()
}

func (i TemplateSheetImageTooltipTextArgs) ToTemplateSheetImageTooltipTextOutput() TemplateSheetImageTooltipTextOutput {
	return i.ToTemplateSheetImageTooltipTextOutputWithContext(context.Background())
}

func (i TemplateSheetImageTooltipTextArgs) ToTemplateSheetImageTooltipTextOutputWithContext(ctx context.Context) TemplateSheetImageTooltipTextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSheetImageTooltipTextOutput)
}

func (i TemplateSheetImageTooltipTextArgs) ToTemplateSheetImageTooltipTextPtrOutput() TemplateSheetImageTooltipTextPtrOutput {
	return i.ToTemplateSheetImageTooltipTextPtrOutputWithContext(context.Background())
}

func (i TemplateSheetImageTooltipTextArgs) ToTemplateSheetImageTooltipTextPtrOutputWithContext(ctx context.Context) TemplateSheetImageTooltipTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSheetImageTooltipTextOutput).ToTemplateSheetImageTooltipTextPtrOutputWithContext(ctx)
}

// TemplateSheetImageTooltipTextPtrInput is an input type that accepts TemplateSheetImageTooltipTextArgs, TemplateSheetImageTooltipTextPtr and TemplateSheetImageTooltipTextPtrOutput values.
// You can construct a concrete instance of `TemplateSheetImageTooltipTextPtrInput` via:
//
//	        TemplateSheetImageTooltipTextArgs{...}
//
//	or:
//
//	        nil
type TemplateSheetImageTooltipTextPtrInput interface {
	pulumi.Input

	ToTemplateSheetImageTooltipTextPtrOutput() TemplateSheetImageTooltipTextPtrOutput
	ToTemplateSheetImageTooltipTextPtrOutputWithContext(context.Context) TemplateSheetImageTooltipTextPtrOutput
}

type templateSheetImageTooltipTextPtrType TemplateSheetImageTooltipTextArgs

func TemplateSheetImageTooltipTextPtr(v *TemplateSheetImageTooltipTextArgs) TemplateSheetImageTooltipTextPtrInput {
	return (*templateSheetImageTooltipTextPtrType)(v)
}

func (*templateSheetImageTooltipTextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSheetImageTooltipText)(nil)).Elem()
}

func (i *templateSheetImageTooltipTextPtrType) ToTemplateSheetImageTooltipTextPtrOutput() TemplateSheetImageTooltipTextPtrOutput {
	return i.ToTemplateSheetImageTooltipTextPtrOutputWithContext(context.Background())
}

func (i *templateSheetImageTooltipTextPtrType) ToTemplateSheetImageTooltipTextPtrOutputWithContext(ctx context.Context) TemplateSheetImageTooltipTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSheetImageTooltipTextPtrOutput)
}

type TemplateSheetImageTooltipTextOutput struct{ *pulumi.OutputState }

func (TemplateSheetImageTooltipTextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSheetImageTooltipText)(nil)).Elem()
}

func (o TemplateSheetImageTooltipTextOutput) ToTemplateSheetImageTooltipTextOutput() TemplateSheetImageTooltipTextOutput {
	return o
}

func (o TemplateSheetImageTooltipTextOutput) ToTemplateSheetImageTooltipTextOutputWithContext(ctx context.Context) TemplateSheetImageTooltipTextOutput {
	return o
}

func (o TemplateSheetImageTooltipTextOutput) ToTemplateSheetImageTooltipTextPtrOutput() TemplateSheetImageTooltipTextPtrOutput {
	return o.ToTemplateSheetImageTooltipTextPtrOutputWithContext(context.Background())
}

func (o TemplateSheetImageTooltipTextOutput) ToTemplateSheetImageTooltipTextPtrOutputWithContext(ctx context.Context) TemplateSheetImageTooltipTextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateSheetImageTooltipText) *TemplateSheetImageTooltipText {
		return &v
	}).(TemplateSheetImageTooltipTextPtrOutput)
}

// The plain text format.
func (o TemplateSheetImageTooltipTextOutput) PlainText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateSheetImageTooltipText) *string { return v.PlainText }).(pulumi.StringPtrOutput)
}

type TemplateSheetImageTooltipTextPtrOutput struct{ *pulumi.OutputState }

func (TemplateSheetImageTooltipTextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSheetImageTooltipText)(nil)).Elem()
}

func (o TemplateSheetImageTooltipTextPtrOutput) ToTemplateSheetImageTooltipTextPtrOutput() TemplateSheetImageTooltipTextPtrOutput {
	return o
}

func (o TemplateSheetImageTooltipTextPtrOutput) ToTemplateSheetImageTooltipTextPtrOutputWithContext(ctx context.Context) TemplateSheetImageTooltipTextPtrOutput {
	return o
}

func (o TemplateSheetImageTooltipTextPtrOutput) Elem() TemplateSheetImageTooltipTextOutput {
	return o.ApplyT(func(v *TemplateSheetImageTooltipText) TemplateSheetImageTooltipText {
		if v != nil {
			return *v
		}
		var ret TemplateSheetImageTooltipText
		return ret
	}).(TemplateSheetImageTooltipTextOutput)
}

// The plain text format.
func (o TemplateSheetImageTooltipTextPtrOutput) PlainText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateSheetImageTooltipText) *string {
		if v == nil {
			return nil
		}
		return v.PlainText
	}).(pulumi.StringPtrOutput)
}

type TemplateSheetTextBox struct {
	// The content that is displayed in the text box.
	Content      *string     `pulumi:"content"`
	Interactions interface{} `pulumi:"interactions"`
	// The unique identifier for a text box. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have text boxes that share identifiers.
	SheetTextBoxId string `pulumi:"sheetTextBoxId"`
}

// TemplateSheetTextBoxInput is an input type that accepts TemplateSheetTextBoxArgs and TemplateSheetTextBoxOutput values.
// You can construct a concrete instance of `TemplateSheetTextBoxInput` via:
//
//	TemplateSheetTextBoxArgs{...}
type TemplateSheetTextBoxInput interface {
	pulumi.Input

	ToTemplateSheetTextBoxOutput() TemplateSheetTextBoxOutput
	ToTemplateSheetTextBoxOutputWithContext(context.Context) TemplateSheetTextBoxOutput
}

type TemplateSheetTextBoxArgs struct {
	// The content that is displayed in the text box.
	Content      pulumi.StringPtrInput `pulumi:"content"`
	Interactions pulumi.Input          `pulumi:"interactions"`
	// The unique identifier for a text box. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have text boxes that share identifiers.
	SheetTextBoxId pulumi.StringInput `pulumi:"sheetTextBoxId"`
}

func (TemplateSheetTextBoxArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSheetTextBox)(nil)).Elem()
}

func (i TemplateSheetTextBoxArgs) ToTemplateSheetTextBoxOutput() TemplateSheetTextBoxOutput {
	return i.ToTemplateSheetTextBoxOutputWithContext(context.Background())
}

func (i TemplateSheetTextBoxArgs) ToTemplateSheetTextBoxOutputWithContext(ctx context.Context) TemplateSheetTextBoxOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSheetTextBoxOutput)
}

// TemplateSheetTextBoxArrayInput is an input type that accepts TemplateSheetTextBoxArray and TemplateSheetTextBoxArrayOutput values.
// You can construct a concrete instance of `TemplateSheetTextBoxArrayInput` via:
//
//	TemplateSheetTextBoxArray{ TemplateSheetTextBoxArgs{...} }
type TemplateSheetTextBoxArrayInput interface {
	pulumi.Input

	ToTemplateSheetTextBoxArrayOutput() TemplateSheetTextBoxArrayOutput
	ToTemplateSheetTextBoxArrayOutputWithContext(context.Context) TemplateSheetTextBoxArrayOutput
}

type TemplateSheetTextBoxArray []TemplateSheetTextBoxInput

func (TemplateSheetTextBoxArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateSheetTextBox)(nil)).Elem()
}

func (i TemplateSheetTextBoxArray) ToTemplateSheetTextBoxArrayOutput() TemplateSheetTextBoxArrayOutput {
	return i.ToTemplateSheetTextBoxArrayOutputWithContext(context.Background())
}

func (i TemplateSheetTextBoxArray) ToTemplateSheetTextBoxArrayOutputWithContext(ctx context.Context) TemplateSheetTextBoxArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSheetTextBoxArrayOutput)
}

type TemplateSheetTextBoxOutput struct{ *pulumi.OutputState }

func (TemplateSheetTextBoxOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSheetTextBox)(nil)).Elem()
}

func (o TemplateSheetTextBoxOutput) ToTemplateSheetTextBoxOutput() TemplateSheetTextBoxOutput {
	return o
}

func (o TemplateSheetTextBoxOutput) ToTemplateSheetTextBoxOutputWithContext(ctx context.Context) TemplateSheetTextBoxOutput {
	return o
}

// The content that is displayed in the text box.
func (o TemplateSheetTextBoxOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateSheetTextBox) *string { return v.Content }).(pulumi.StringPtrOutput)
}

func (o TemplateSheetTextBoxOutput) Interactions() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateSheetTextBox) interface{} { return v.Interactions }).(pulumi.AnyOutput)
}

// The unique identifier for a text box. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have text boxes that share identifiers.
func (o TemplateSheetTextBoxOutput) SheetTextBoxId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateSheetTextBox) string { return v.SheetTextBoxId }).(pulumi.StringOutput)
}

type TemplateSheetTextBoxArrayOutput struct{ *pulumi.OutputState }

func (TemplateSheetTextBoxArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateSheetTextBox)(nil)).Elem()
}

func (o TemplateSheetTextBoxArrayOutput) ToTemplateSheetTextBoxArrayOutput() TemplateSheetTextBoxArrayOutput {
	return o
}

func (o TemplateSheetTextBoxArrayOutput) ToTemplateSheetTextBoxArrayOutputWithContext(ctx context.Context) TemplateSheetTextBoxArrayOutput {
	return o
}

func (o TemplateSheetTextBoxArrayOutput) Index(i pulumi.IntInput) TemplateSheetTextBoxOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateSheetTextBox {
		return vs[0].([]TemplateSheetTextBox)[vs[1].(int)]
	}).(TemplateSheetTextBoxOutput)
}

type TemplateSheetVisualScopingConfiguration struct {
	// The scope of the applied entities. Choose one of the following options:
	//
	// - `ALL_VISUALS`
	// - `SELECTED_VISUALS`
	Scope TemplateFilterVisualScope `pulumi:"scope"`
	// The selected sheet that the filter is applied to.
	SheetId string `pulumi:"sheetId"`
	// The selected visuals that the filter is applied to.
	VisualIds []string `pulumi:"visualIds"`
}

// TemplateSheetVisualScopingConfigurationInput is an input type that accepts TemplateSheetVisualScopingConfigurationArgs and TemplateSheetVisualScopingConfigurationOutput values.
// You can construct a concrete instance of `TemplateSheetVisualScopingConfigurationInput` via:
//
//	TemplateSheetVisualScopingConfigurationArgs{...}
type TemplateSheetVisualScopingConfigurationInput interface {
	pulumi.Input

	ToTemplateSheetVisualScopingConfigurationOutput() TemplateSheetVisualScopingConfigurationOutput
	ToTemplateSheetVisualScopingConfigurationOutputWithContext(context.Context) TemplateSheetVisualScopingConfigurationOutput
}

type TemplateSheetVisualScopingConfigurationArgs struct {
	// The scope of the applied entities. Choose one of the following options:
	//
	// - `ALL_VISUALS`
	// - `SELECTED_VISUALS`
	Scope TemplateFilterVisualScopeInput `pulumi:"scope"`
	// The selected sheet that the filter is applied to.
	SheetId pulumi.StringInput `pulumi:"sheetId"`
	// The selected visuals that the filter is applied to.
	VisualIds pulumi.StringArrayInput `pulumi:"visualIds"`
}

func (TemplateSheetVisualScopingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSheetVisualScopingConfiguration)(nil)).Elem()
}

func (i TemplateSheetVisualScopingConfigurationArgs) ToTemplateSheetVisualScopingConfigurationOutput() TemplateSheetVisualScopingConfigurationOutput {
	return i.ToTemplateSheetVisualScopingConfigurationOutputWithContext(context.Background())
}

func (i TemplateSheetVisualScopingConfigurationArgs) ToTemplateSheetVisualScopingConfigurationOutputWithContext(ctx context.Context) TemplateSheetVisualScopingConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSheetVisualScopingConfigurationOutput)
}

// TemplateSheetVisualScopingConfigurationArrayInput is an input type that accepts TemplateSheetVisualScopingConfigurationArray and TemplateSheetVisualScopingConfigurationArrayOutput values.
// You can construct a concrete instance of `TemplateSheetVisualScopingConfigurationArrayInput` via:
//
//	TemplateSheetVisualScopingConfigurationArray{ TemplateSheetVisualScopingConfigurationArgs{...} }
type TemplateSheetVisualScopingConfigurationArrayInput interface {
	pulumi.Input

	ToTemplateSheetVisualScopingConfigurationArrayOutput() TemplateSheetVisualScopingConfigurationArrayOutput
	ToTemplateSheetVisualScopingConfigurationArrayOutputWithContext(context.Context) TemplateSheetVisualScopingConfigurationArrayOutput
}

type TemplateSheetVisualScopingConfigurationArray []TemplateSheetVisualScopingConfigurationInput

func (TemplateSheetVisualScopingConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateSheetVisualScopingConfiguration)(nil)).Elem()
}

func (i TemplateSheetVisualScopingConfigurationArray) ToTemplateSheetVisualScopingConfigurationArrayOutput() TemplateSheetVisualScopingConfigurationArrayOutput {
	return i.ToTemplateSheetVisualScopingConfigurationArrayOutputWithContext(context.Background())
}

func (i TemplateSheetVisualScopingConfigurationArray) ToTemplateSheetVisualScopingConfigurationArrayOutputWithContext(ctx context.Context) TemplateSheetVisualScopingConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSheetVisualScopingConfigurationArrayOutput)
}

type TemplateSheetVisualScopingConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateSheetVisualScopingConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSheetVisualScopingConfiguration)(nil)).Elem()
}

func (o TemplateSheetVisualScopingConfigurationOutput) ToTemplateSheetVisualScopingConfigurationOutput() TemplateSheetVisualScopingConfigurationOutput {
	return o
}

func (o TemplateSheetVisualScopingConfigurationOutput) ToTemplateSheetVisualScopingConfigurationOutputWithContext(ctx context.Context) TemplateSheetVisualScopingConfigurationOutput {
	return o
}

// The scope of the applied entities. Choose one of the following options:
//
// - `ALL_VISUALS`
// - `SELECTED_VISUALS`
func (o TemplateSheetVisualScopingConfigurationOutput) Scope() TemplateFilterVisualScopeOutput {
	return o.ApplyT(func(v TemplateSheetVisualScopingConfiguration) TemplateFilterVisualScope { return v.Scope }).(TemplateFilterVisualScopeOutput)
}

// The selected sheet that the filter is applied to.
func (o TemplateSheetVisualScopingConfigurationOutput) SheetId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateSheetVisualScopingConfiguration) string { return v.SheetId }).(pulumi.StringOutput)
}

// The selected visuals that the filter is applied to.
func (o TemplateSheetVisualScopingConfigurationOutput) VisualIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TemplateSheetVisualScopingConfiguration) []string { return v.VisualIds }).(pulumi.StringArrayOutput)
}

type TemplateSheetVisualScopingConfigurationArrayOutput struct{ *pulumi.OutputState }

func (TemplateSheetVisualScopingConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateSheetVisualScopingConfiguration)(nil)).Elem()
}

func (o TemplateSheetVisualScopingConfigurationArrayOutput) ToTemplateSheetVisualScopingConfigurationArrayOutput() TemplateSheetVisualScopingConfigurationArrayOutput {
	return o
}

func (o TemplateSheetVisualScopingConfigurationArrayOutput) ToTemplateSheetVisualScopingConfigurationArrayOutputWithContext(ctx context.Context) TemplateSheetVisualScopingConfigurationArrayOutput {
	return o
}

func (o TemplateSheetVisualScopingConfigurationArrayOutput) Index(i pulumi.IntInput) TemplateSheetVisualScopingConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateSheetVisualScopingConfiguration {
		return vs[0].([]TemplateSheetVisualScopingConfiguration)[vs[1].(int)]
	}).(TemplateSheetVisualScopingConfigurationOutput)
}

type TemplateShortFormatText struct {
	// Plain text format.
	PlainText *string `pulumi:"plainText"`
	// Rich text. Examples of rich text include bold, underline, and italics.
	RichText *string `pulumi:"richText"`
}

// TemplateShortFormatTextInput is an input type that accepts TemplateShortFormatTextArgs and TemplateShortFormatTextOutput values.
// You can construct a concrete instance of `TemplateShortFormatTextInput` via:
//
//	TemplateShortFormatTextArgs{...}
type TemplateShortFormatTextInput interface {
	pulumi.Input

	ToTemplateShortFormatTextOutput() TemplateShortFormatTextOutput
	ToTemplateShortFormatTextOutputWithContext(context.Context) TemplateShortFormatTextOutput
}

type TemplateShortFormatTextArgs struct {
	// Plain text format.
	PlainText pulumi.StringPtrInput `pulumi:"plainText"`
	// Rich text. Examples of rich text include bold, underline, and italics.
	RichText pulumi.StringPtrInput `pulumi:"richText"`
}

func (TemplateShortFormatTextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateShortFormatText)(nil)).Elem()
}

func (i TemplateShortFormatTextArgs) ToTemplateShortFormatTextOutput() TemplateShortFormatTextOutput {
	return i.ToTemplateShortFormatTextOutputWithContext(context.Background())
}

func (i TemplateShortFormatTextArgs) ToTemplateShortFormatTextOutputWithContext(ctx context.Context) TemplateShortFormatTextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateShortFormatTextOutput)
}

func (i TemplateShortFormatTextArgs) ToTemplateShortFormatTextPtrOutput() TemplateShortFormatTextPtrOutput {
	return i.ToTemplateShortFormatTextPtrOutputWithContext(context.Background())
}

func (i TemplateShortFormatTextArgs) ToTemplateShortFormatTextPtrOutputWithContext(ctx context.Context) TemplateShortFormatTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateShortFormatTextOutput).ToTemplateShortFormatTextPtrOutputWithContext(ctx)
}

// TemplateShortFormatTextPtrInput is an input type that accepts TemplateShortFormatTextArgs, TemplateShortFormatTextPtr and TemplateShortFormatTextPtrOutput values.
// You can construct a concrete instance of `TemplateShortFormatTextPtrInput` via:
//
//	        TemplateShortFormatTextArgs{...}
//
//	or:
//
//	        nil
type TemplateShortFormatTextPtrInput interface {
	pulumi.Input

	ToTemplateShortFormatTextPtrOutput() TemplateShortFormatTextPtrOutput
	ToTemplateShortFormatTextPtrOutputWithContext(context.Context) TemplateShortFormatTextPtrOutput
}

type templateShortFormatTextPtrType TemplateShortFormatTextArgs

func TemplateShortFormatTextPtr(v *TemplateShortFormatTextArgs) TemplateShortFormatTextPtrInput {
	return (*templateShortFormatTextPtrType)(v)
}

func (*templateShortFormatTextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateShortFormatText)(nil)).Elem()
}

func (i *templateShortFormatTextPtrType) ToTemplateShortFormatTextPtrOutput() TemplateShortFormatTextPtrOutput {
	return i.ToTemplateShortFormatTextPtrOutputWithContext(context.Background())
}

func (i *templateShortFormatTextPtrType) ToTemplateShortFormatTextPtrOutputWithContext(ctx context.Context) TemplateShortFormatTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateShortFormatTextPtrOutput)
}

type TemplateShortFormatTextOutput struct{ *pulumi.OutputState }

func (TemplateShortFormatTextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateShortFormatText)(nil)).Elem()
}

func (o TemplateShortFormatTextOutput) ToTemplateShortFormatTextOutput() TemplateShortFormatTextOutput {
	return o
}

func (o TemplateShortFormatTextOutput) ToTemplateShortFormatTextOutputWithContext(ctx context.Context) TemplateShortFormatTextOutput {
	return o
}

func (o TemplateShortFormatTextOutput) ToTemplateShortFormatTextPtrOutput() TemplateShortFormatTextPtrOutput {
	return o.ToTemplateShortFormatTextPtrOutputWithContext(context.Background())
}

func (o TemplateShortFormatTextOutput) ToTemplateShortFormatTextPtrOutputWithContext(ctx context.Context) TemplateShortFormatTextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateShortFormatText) *TemplateShortFormatText {
		return &v
	}).(TemplateShortFormatTextPtrOutput)
}

// Plain text format.
func (o TemplateShortFormatTextOutput) PlainText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateShortFormatText) *string { return v.PlainText }).(pulumi.StringPtrOutput)
}

// Rich text. Examples of rich text include bold, underline, and italics.
func (o TemplateShortFormatTextOutput) RichText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateShortFormatText) *string { return v.RichText }).(pulumi.StringPtrOutput)
}

type TemplateShortFormatTextPtrOutput struct{ *pulumi.OutputState }

func (TemplateShortFormatTextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateShortFormatText)(nil)).Elem()
}

func (o TemplateShortFormatTextPtrOutput) ToTemplateShortFormatTextPtrOutput() TemplateShortFormatTextPtrOutput {
	return o
}

func (o TemplateShortFormatTextPtrOutput) ToTemplateShortFormatTextPtrOutputWithContext(ctx context.Context) TemplateShortFormatTextPtrOutput {
	return o
}

func (o TemplateShortFormatTextPtrOutput) Elem() TemplateShortFormatTextOutput {
	return o.ApplyT(func(v *TemplateShortFormatText) TemplateShortFormatText {
		if v != nil {
			return *v
		}
		var ret TemplateShortFormatText
		return ret
	}).(TemplateShortFormatTextOutput)
}

// Plain text format.
func (o TemplateShortFormatTextPtrOutput) PlainText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateShortFormatText) *string {
		if v == nil {
			return nil
		}
		return v.PlainText
	}).(pulumi.StringPtrOutput)
}

// Rich text. Examples of rich text include bold, underline, and italics.
func (o TemplateShortFormatTextPtrOutput) RichText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateShortFormatText) *string {
		if v == nil {
			return nil
		}
		return v.RichText
	}).(pulumi.StringPtrOutput)
}

type TemplateSimpleClusterMarker struct {
	// The color of the simple cluster marker.
	Color *string `pulumi:"color"`
}

// TemplateSimpleClusterMarkerInput is an input type that accepts TemplateSimpleClusterMarkerArgs and TemplateSimpleClusterMarkerOutput values.
// You can construct a concrete instance of `TemplateSimpleClusterMarkerInput` via:
//
//	TemplateSimpleClusterMarkerArgs{...}
type TemplateSimpleClusterMarkerInput interface {
	pulumi.Input

	ToTemplateSimpleClusterMarkerOutput() TemplateSimpleClusterMarkerOutput
	ToTemplateSimpleClusterMarkerOutputWithContext(context.Context) TemplateSimpleClusterMarkerOutput
}

type TemplateSimpleClusterMarkerArgs struct {
	// The color of the simple cluster marker.
	Color pulumi.StringPtrInput `pulumi:"color"`
}

func (TemplateSimpleClusterMarkerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSimpleClusterMarker)(nil)).Elem()
}

func (i TemplateSimpleClusterMarkerArgs) ToTemplateSimpleClusterMarkerOutput() TemplateSimpleClusterMarkerOutput {
	return i.ToTemplateSimpleClusterMarkerOutputWithContext(context.Background())
}

func (i TemplateSimpleClusterMarkerArgs) ToTemplateSimpleClusterMarkerOutputWithContext(ctx context.Context) TemplateSimpleClusterMarkerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSimpleClusterMarkerOutput)
}

func (i TemplateSimpleClusterMarkerArgs) ToTemplateSimpleClusterMarkerPtrOutput() TemplateSimpleClusterMarkerPtrOutput {
	return i.ToTemplateSimpleClusterMarkerPtrOutputWithContext(context.Background())
}

func (i TemplateSimpleClusterMarkerArgs) ToTemplateSimpleClusterMarkerPtrOutputWithContext(ctx context.Context) TemplateSimpleClusterMarkerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSimpleClusterMarkerOutput).ToTemplateSimpleClusterMarkerPtrOutputWithContext(ctx)
}

// TemplateSimpleClusterMarkerPtrInput is an input type that accepts TemplateSimpleClusterMarkerArgs, TemplateSimpleClusterMarkerPtr and TemplateSimpleClusterMarkerPtrOutput values.
// You can construct a concrete instance of `TemplateSimpleClusterMarkerPtrInput` via:
//
//	        TemplateSimpleClusterMarkerArgs{...}
//
//	or:
//
//	        nil
type TemplateSimpleClusterMarkerPtrInput interface {
	pulumi.Input

	ToTemplateSimpleClusterMarkerPtrOutput() TemplateSimpleClusterMarkerPtrOutput
	ToTemplateSimpleClusterMarkerPtrOutputWithContext(context.Context) TemplateSimpleClusterMarkerPtrOutput
}

type templateSimpleClusterMarkerPtrType TemplateSimpleClusterMarkerArgs

func TemplateSimpleClusterMarkerPtr(v *TemplateSimpleClusterMarkerArgs) TemplateSimpleClusterMarkerPtrInput {
	return (*templateSimpleClusterMarkerPtrType)(v)
}

func (*templateSimpleClusterMarkerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSimpleClusterMarker)(nil)).Elem()
}

func (i *templateSimpleClusterMarkerPtrType) ToTemplateSimpleClusterMarkerPtrOutput() TemplateSimpleClusterMarkerPtrOutput {
	return i.ToTemplateSimpleClusterMarkerPtrOutputWithContext(context.Background())
}

func (i *templateSimpleClusterMarkerPtrType) ToTemplateSimpleClusterMarkerPtrOutputWithContext(ctx context.Context) TemplateSimpleClusterMarkerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSimpleClusterMarkerPtrOutput)
}

type TemplateSimpleClusterMarkerOutput struct{ *pulumi.OutputState }

func (TemplateSimpleClusterMarkerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSimpleClusterMarker)(nil)).Elem()
}

func (o TemplateSimpleClusterMarkerOutput) ToTemplateSimpleClusterMarkerOutput() TemplateSimpleClusterMarkerOutput {
	return o
}

func (o TemplateSimpleClusterMarkerOutput) ToTemplateSimpleClusterMarkerOutputWithContext(ctx context.Context) TemplateSimpleClusterMarkerOutput {
	return o
}

func (o TemplateSimpleClusterMarkerOutput) ToTemplateSimpleClusterMarkerPtrOutput() TemplateSimpleClusterMarkerPtrOutput {
	return o.ToTemplateSimpleClusterMarkerPtrOutputWithContext(context.Background())
}

func (o TemplateSimpleClusterMarkerOutput) ToTemplateSimpleClusterMarkerPtrOutputWithContext(ctx context.Context) TemplateSimpleClusterMarkerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateSimpleClusterMarker) *TemplateSimpleClusterMarker {
		return &v
	}).(TemplateSimpleClusterMarkerPtrOutput)
}

// The color of the simple cluster marker.
func (o TemplateSimpleClusterMarkerOutput) Color() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateSimpleClusterMarker) *string { return v.Color }).(pulumi.StringPtrOutput)
}

type TemplateSimpleClusterMarkerPtrOutput struct{ *pulumi.OutputState }

func (TemplateSimpleClusterMarkerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSimpleClusterMarker)(nil)).Elem()
}

func (o TemplateSimpleClusterMarkerPtrOutput) ToTemplateSimpleClusterMarkerPtrOutput() TemplateSimpleClusterMarkerPtrOutput {
	return o
}

func (o TemplateSimpleClusterMarkerPtrOutput) ToTemplateSimpleClusterMarkerPtrOutputWithContext(ctx context.Context) TemplateSimpleClusterMarkerPtrOutput {
	return o
}

func (o TemplateSimpleClusterMarkerPtrOutput) Elem() TemplateSimpleClusterMarkerOutput {
	return o.ApplyT(func(v *TemplateSimpleClusterMarker) TemplateSimpleClusterMarker {
		if v != nil {
			return *v
		}
		var ret TemplateSimpleClusterMarker
		return ret
	}).(TemplateSimpleClusterMarkerOutput)
}

// The color of the simple cluster marker.
func (o TemplateSimpleClusterMarkerPtrOutput) Color() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateSimpleClusterMarker) *string {
		if v == nil {
			return nil
		}
		return v.Color
	}).(pulumi.StringPtrOutput)
}

type TemplateSingleAxisOptions struct {
	// The Y axis options of a single axis configuration.
	YAxisOptions *TemplateYAxisOptions `pulumi:"yAxisOptions"`
}

// TemplateSingleAxisOptionsInput is an input type that accepts TemplateSingleAxisOptionsArgs and TemplateSingleAxisOptionsOutput values.
// You can construct a concrete instance of `TemplateSingleAxisOptionsInput` via:
//
//	TemplateSingleAxisOptionsArgs{...}
type TemplateSingleAxisOptionsInput interface {
	pulumi.Input

	ToTemplateSingleAxisOptionsOutput() TemplateSingleAxisOptionsOutput
	ToTemplateSingleAxisOptionsOutputWithContext(context.Context) TemplateSingleAxisOptionsOutput
}

type TemplateSingleAxisOptionsArgs struct {
	// The Y axis options of a single axis configuration.
	YAxisOptions TemplateYAxisOptionsPtrInput `pulumi:"yAxisOptions"`
}

func (TemplateSingleAxisOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSingleAxisOptions)(nil)).Elem()
}

func (i TemplateSingleAxisOptionsArgs) ToTemplateSingleAxisOptionsOutput() TemplateSingleAxisOptionsOutput {
	return i.ToTemplateSingleAxisOptionsOutputWithContext(context.Background())
}

func (i TemplateSingleAxisOptionsArgs) ToTemplateSingleAxisOptionsOutputWithContext(ctx context.Context) TemplateSingleAxisOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSingleAxisOptionsOutput)
}

func (i TemplateSingleAxisOptionsArgs) ToTemplateSingleAxisOptionsPtrOutput() TemplateSingleAxisOptionsPtrOutput {
	return i.ToTemplateSingleAxisOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateSingleAxisOptionsArgs) ToTemplateSingleAxisOptionsPtrOutputWithContext(ctx context.Context) TemplateSingleAxisOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSingleAxisOptionsOutput).ToTemplateSingleAxisOptionsPtrOutputWithContext(ctx)
}

// TemplateSingleAxisOptionsPtrInput is an input type that accepts TemplateSingleAxisOptionsArgs, TemplateSingleAxisOptionsPtr and TemplateSingleAxisOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateSingleAxisOptionsPtrInput` via:
//
//	        TemplateSingleAxisOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateSingleAxisOptionsPtrInput interface {
	pulumi.Input

	ToTemplateSingleAxisOptionsPtrOutput() TemplateSingleAxisOptionsPtrOutput
	ToTemplateSingleAxisOptionsPtrOutputWithContext(context.Context) TemplateSingleAxisOptionsPtrOutput
}

type templateSingleAxisOptionsPtrType TemplateSingleAxisOptionsArgs

func TemplateSingleAxisOptionsPtr(v *TemplateSingleAxisOptionsArgs) TemplateSingleAxisOptionsPtrInput {
	return (*templateSingleAxisOptionsPtrType)(v)
}

func (*templateSingleAxisOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSingleAxisOptions)(nil)).Elem()
}

func (i *templateSingleAxisOptionsPtrType) ToTemplateSingleAxisOptionsPtrOutput() TemplateSingleAxisOptionsPtrOutput {
	return i.ToTemplateSingleAxisOptionsPtrOutputWithContext(context.Background())
}

func (i *templateSingleAxisOptionsPtrType) ToTemplateSingleAxisOptionsPtrOutputWithContext(ctx context.Context) TemplateSingleAxisOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSingleAxisOptionsPtrOutput)
}

type TemplateSingleAxisOptionsOutput struct{ *pulumi.OutputState }

func (TemplateSingleAxisOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSingleAxisOptions)(nil)).Elem()
}

func (o TemplateSingleAxisOptionsOutput) ToTemplateSingleAxisOptionsOutput() TemplateSingleAxisOptionsOutput {
	return o
}

func (o TemplateSingleAxisOptionsOutput) ToTemplateSingleAxisOptionsOutputWithContext(ctx context.Context) TemplateSingleAxisOptionsOutput {
	return o
}

func (o TemplateSingleAxisOptionsOutput) ToTemplateSingleAxisOptionsPtrOutput() TemplateSingleAxisOptionsPtrOutput {
	return o.ToTemplateSingleAxisOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateSingleAxisOptionsOutput) ToTemplateSingleAxisOptionsPtrOutputWithContext(ctx context.Context) TemplateSingleAxisOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateSingleAxisOptions) *TemplateSingleAxisOptions {
		return &v
	}).(TemplateSingleAxisOptionsPtrOutput)
}

// The Y axis options of a single axis configuration.
func (o TemplateSingleAxisOptionsOutput) YAxisOptions() TemplateYAxisOptionsPtrOutput {
	return o.ApplyT(func(v TemplateSingleAxisOptions) *TemplateYAxisOptions { return v.YAxisOptions }).(TemplateYAxisOptionsPtrOutput)
}

type TemplateSingleAxisOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateSingleAxisOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSingleAxisOptions)(nil)).Elem()
}

func (o TemplateSingleAxisOptionsPtrOutput) ToTemplateSingleAxisOptionsPtrOutput() TemplateSingleAxisOptionsPtrOutput {
	return o
}

func (o TemplateSingleAxisOptionsPtrOutput) ToTemplateSingleAxisOptionsPtrOutputWithContext(ctx context.Context) TemplateSingleAxisOptionsPtrOutput {
	return o
}

func (o TemplateSingleAxisOptionsPtrOutput) Elem() TemplateSingleAxisOptionsOutput {
	return o.ApplyT(func(v *TemplateSingleAxisOptions) TemplateSingleAxisOptions {
		if v != nil {
			return *v
		}
		var ret TemplateSingleAxisOptions
		return ret
	}).(TemplateSingleAxisOptionsOutput)
}

// The Y axis options of a single axis configuration.
func (o TemplateSingleAxisOptionsPtrOutput) YAxisOptions() TemplateYAxisOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateSingleAxisOptions) *TemplateYAxisOptions {
		if v == nil {
			return nil
		}
		return v.YAxisOptions
	}).(TemplateYAxisOptionsPtrOutput)
}

type TemplateSliderControlDisplayOptions struct {
	// The configuration of info icon label options.
	InfoIconLabelOptions *TemplateSheetControlInfoIconLabelOptions `pulumi:"infoIconLabelOptions"`
	// The options to configure the title visibility, name, and font size.
	TitleOptions *TemplateLabelOptions `pulumi:"titleOptions"`
}

// TemplateSliderControlDisplayOptionsInput is an input type that accepts TemplateSliderControlDisplayOptionsArgs and TemplateSliderControlDisplayOptionsOutput values.
// You can construct a concrete instance of `TemplateSliderControlDisplayOptionsInput` via:
//
//	TemplateSliderControlDisplayOptionsArgs{...}
type TemplateSliderControlDisplayOptionsInput interface {
	pulumi.Input

	ToTemplateSliderControlDisplayOptionsOutput() TemplateSliderControlDisplayOptionsOutput
	ToTemplateSliderControlDisplayOptionsOutputWithContext(context.Context) TemplateSliderControlDisplayOptionsOutput
}

type TemplateSliderControlDisplayOptionsArgs struct {
	// The configuration of info icon label options.
	InfoIconLabelOptions TemplateSheetControlInfoIconLabelOptionsPtrInput `pulumi:"infoIconLabelOptions"`
	// The options to configure the title visibility, name, and font size.
	TitleOptions TemplateLabelOptionsPtrInput `pulumi:"titleOptions"`
}

func (TemplateSliderControlDisplayOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSliderControlDisplayOptions)(nil)).Elem()
}

func (i TemplateSliderControlDisplayOptionsArgs) ToTemplateSliderControlDisplayOptionsOutput() TemplateSliderControlDisplayOptionsOutput {
	return i.ToTemplateSliderControlDisplayOptionsOutputWithContext(context.Background())
}

func (i TemplateSliderControlDisplayOptionsArgs) ToTemplateSliderControlDisplayOptionsOutputWithContext(ctx context.Context) TemplateSliderControlDisplayOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSliderControlDisplayOptionsOutput)
}

func (i TemplateSliderControlDisplayOptionsArgs) ToTemplateSliderControlDisplayOptionsPtrOutput() TemplateSliderControlDisplayOptionsPtrOutput {
	return i.ToTemplateSliderControlDisplayOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateSliderControlDisplayOptionsArgs) ToTemplateSliderControlDisplayOptionsPtrOutputWithContext(ctx context.Context) TemplateSliderControlDisplayOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSliderControlDisplayOptionsOutput).ToTemplateSliderControlDisplayOptionsPtrOutputWithContext(ctx)
}

// TemplateSliderControlDisplayOptionsPtrInput is an input type that accepts TemplateSliderControlDisplayOptionsArgs, TemplateSliderControlDisplayOptionsPtr and TemplateSliderControlDisplayOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateSliderControlDisplayOptionsPtrInput` via:
//
//	        TemplateSliderControlDisplayOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateSliderControlDisplayOptionsPtrInput interface {
	pulumi.Input

	ToTemplateSliderControlDisplayOptionsPtrOutput() TemplateSliderControlDisplayOptionsPtrOutput
	ToTemplateSliderControlDisplayOptionsPtrOutputWithContext(context.Context) TemplateSliderControlDisplayOptionsPtrOutput
}

type templateSliderControlDisplayOptionsPtrType TemplateSliderControlDisplayOptionsArgs

func TemplateSliderControlDisplayOptionsPtr(v *TemplateSliderControlDisplayOptionsArgs) TemplateSliderControlDisplayOptionsPtrInput {
	return (*templateSliderControlDisplayOptionsPtrType)(v)
}

func (*templateSliderControlDisplayOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSliderControlDisplayOptions)(nil)).Elem()
}

func (i *templateSliderControlDisplayOptionsPtrType) ToTemplateSliderControlDisplayOptionsPtrOutput() TemplateSliderControlDisplayOptionsPtrOutput {
	return i.ToTemplateSliderControlDisplayOptionsPtrOutputWithContext(context.Background())
}

func (i *templateSliderControlDisplayOptionsPtrType) ToTemplateSliderControlDisplayOptionsPtrOutputWithContext(ctx context.Context) TemplateSliderControlDisplayOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSliderControlDisplayOptionsPtrOutput)
}

type TemplateSliderControlDisplayOptionsOutput struct{ *pulumi.OutputState }

func (TemplateSliderControlDisplayOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSliderControlDisplayOptions)(nil)).Elem()
}

func (o TemplateSliderControlDisplayOptionsOutput) ToTemplateSliderControlDisplayOptionsOutput() TemplateSliderControlDisplayOptionsOutput {
	return o
}

func (o TemplateSliderControlDisplayOptionsOutput) ToTemplateSliderControlDisplayOptionsOutputWithContext(ctx context.Context) TemplateSliderControlDisplayOptionsOutput {
	return o
}

func (o TemplateSliderControlDisplayOptionsOutput) ToTemplateSliderControlDisplayOptionsPtrOutput() TemplateSliderControlDisplayOptionsPtrOutput {
	return o.ToTemplateSliderControlDisplayOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateSliderControlDisplayOptionsOutput) ToTemplateSliderControlDisplayOptionsPtrOutputWithContext(ctx context.Context) TemplateSliderControlDisplayOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateSliderControlDisplayOptions) *TemplateSliderControlDisplayOptions {
		return &v
	}).(TemplateSliderControlDisplayOptionsPtrOutput)
}

// The configuration of info icon label options.
func (o TemplateSliderControlDisplayOptionsOutput) InfoIconLabelOptions() TemplateSheetControlInfoIconLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateSliderControlDisplayOptions) *TemplateSheetControlInfoIconLabelOptions {
		return v.InfoIconLabelOptions
	}).(TemplateSheetControlInfoIconLabelOptionsPtrOutput)
}

// The options to configure the title visibility, name, and font size.
func (o TemplateSliderControlDisplayOptionsOutput) TitleOptions() TemplateLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateSliderControlDisplayOptions) *TemplateLabelOptions { return v.TitleOptions }).(TemplateLabelOptionsPtrOutput)
}

type TemplateSliderControlDisplayOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateSliderControlDisplayOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSliderControlDisplayOptions)(nil)).Elem()
}

func (o TemplateSliderControlDisplayOptionsPtrOutput) ToTemplateSliderControlDisplayOptionsPtrOutput() TemplateSliderControlDisplayOptionsPtrOutput {
	return o
}

func (o TemplateSliderControlDisplayOptionsPtrOutput) ToTemplateSliderControlDisplayOptionsPtrOutputWithContext(ctx context.Context) TemplateSliderControlDisplayOptionsPtrOutput {
	return o
}

func (o TemplateSliderControlDisplayOptionsPtrOutput) Elem() TemplateSliderControlDisplayOptionsOutput {
	return o.ApplyT(func(v *TemplateSliderControlDisplayOptions) TemplateSliderControlDisplayOptions {
		if v != nil {
			return *v
		}
		var ret TemplateSliderControlDisplayOptions
		return ret
	}).(TemplateSliderControlDisplayOptionsOutput)
}

// The configuration of info icon label options.
func (o TemplateSliderControlDisplayOptionsPtrOutput) InfoIconLabelOptions() TemplateSheetControlInfoIconLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateSliderControlDisplayOptions) *TemplateSheetControlInfoIconLabelOptions {
		if v == nil {
			return nil
		}
		return v.InfoIconLabelOptions
	}).(TemplateSheetControlInfoIconLabelOptionsPtrOutput)
}

// The options to configure the title visibility, name, and font size.
func (o TemplateSliderControlDisplayOptionsPtrOutput) TitleOptions() TemplateLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateSliderControlDisplayOptions) *TemplateLabelOptions {
		if v == nil {
			return nil
		}
		return v.TitleOptions
	}).(TemplateLabelOptionsPtrOutput)
}

type TemplateSmallMultiplesAxisProperties struct {
	// Defines the placement of the axis. By default, axes are rendered `OUTSIDE` of the panels. Axes with `INDEPENDENT` scale are rendered `INSIDE` the panels.
	Placement *TemplateSmallMultiplesAxisPlacement `pulumi:"placement"`
	// Determines whether scale of the axes are shared or independent. The default value is `SHARED` .
	Scale *TemplateSmallMultiplesAxisScale `pulumi:"scale"`
}

// TemplateSmallMultiplesAxisPropertiesInput is an input type that accepts TemplateSmallMultiplesAxisPropertiesArgs and TemplateSmallMultiplesAxisPropertiesOutput values.
// You can construct a concrete instance of `TemplateSmallMultiplesAxisPropertiesInput` via:
//
//	TemplateSmallMultiplesAxisPropertiesArgs{...}
type TemplateSmallMultiplesAxisPropertiesInput interface {
	pulumi.Input

	ToTemplateSmallMultiplesAxisPropertiesOutput() TemplateSmallMultiplesAxisPropertiesOutput
	ToTemplateSmallMultiplesAxisPropertiesOutputWithContext(context.Context) TemplateSmallMultiplesAxisPropertiesOutput
}

type TemplateSmallMultiplesAxisPropertiesArgs struct {
	// Defines the placement of the axis. By default, axes are rendered `OUTSIDE` of the panels. Axes with `INDEPENDENT` scale are rendered `INSIDE` the panels.
	Placement TemplateSmallMultiplesAxisPlacementPtrInput `pulumi:"placement"`
	// Determines whether scale of the axes are shared or independent. The default value is `SHARED` .
	Scale TemplateSmallMultiplesAxisScalePtrInput `pulumi:"scale"`
}

func (TemplateSmallMultiplesAxisPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSmallMultiplesAxisProperties)(nil)).Elem()
}

func (i TemplateSmallMultiplesAxisPropertiesArgs) ToTemplateSmallMultiplesAxisPropertiesOutput() TemplateSmallMultiplesAxisPropertiesOutput {
	return i.ToTemplateSmallMultiplesAxisPropertiesOutputWithContext(context.Background())
}

func (i TemplateSmallMultiplesAxisPropertiesArgs) ToTemplateSmallMultiplesAxisPropertiesOutputWithContext(ctx context.Context) TemplateSmallMultiplesAxisPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSmallMultiplesAxisPropertiesOutput)
}

func (i TemplateSmallMultiplesAxisPropertiesArgs) ToTemplateSmallMultiplesAxisPropertiesPtrOutput() TemplateSmallMultiplesAxisPropertiesPtrOutput {
	return i.ToTemplateSmallMultiplesAxisPropertiesPtrOutputWithContext(context.Background())
}

func (i TemplateSmallMultiplesAxisPropertiesArgs) ToTemplateSmallMultiplesAxisPropertiesPtrOutputWithContext(ctx context.Context) TemplateSmallMultiplesAxisPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSmallMultiplesAxisPropertiesOutput).ToTemplateSmallMultiplesAxisPropertiesPtrOutputWithContext(ctx)
}

// TemplateSmallMultiplesAxisPropertiesPtrInput is an input type that accepts TemplateSmallMultiplesAxisPropertiesArgs, TemplateSmallMultiplesAxisPropertiesPtr and TemplateSmallMultiplesAxisPropertiesPtrOutput values.
// You can construct a concrete instance of `TemplateSmallMultiplesAxisPropertiesPtrInput` via:
//
//	        TemplateSmallMultiplesAxisPropertiesArgs{...}
//
//	or:
//
//	        nil
type TemplateSmallMultiplesAxisPropertiesPtrInput interface {
	pulumi.Input

	ToTemplateSmallMultiplesAxisPropertiesPtrOutput() TemplateSmallMultiplesAxisPropertiesPtrOutput
	ToTemplateSmallMultiplesAxisPropertiesPtrOutputWithContext(context.Context) TemplateSmallMultiplesAxisPropertiesPtrOutput
}

type templateSmallMultiplesAxisPropertiesPtrType TemplateSmallMultiplesAxisPropertiesArgs

func TemplateSmallMultiplesAxisPropertiesPtr(v *TemplateSmallMultiplesAxisPropertiesArgs) TemplateSmallMultiplesAxisPropertiesPtrInput {
	return (*templateSmallMultiplesAxisPropertiesPtrType)(v)
}

func (*templateSmallMultiplesAxisPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSmallMultiplesAxisProperties)(nil)).Elem()
}

func (i *templateSmallMultiplesAxisPropertiesPtrType) ToTemplateSmallMultiplesAxisPropertiesPtrOutput() TemplateSmallMultiplesAxisPropertiesPtrOutput {
	return i.ToTemplateSmallMultiplesAxisPropertiesPtrOutputWithContext(context.Background())
}

func (i *templateSmallMultiplesAxisPropertiesPtrType) ToTemplateSmallMultiplesAxisPropertiesPtrOutputWithContext(ctx context.Context) TemplateSmallMultiplesAxisPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSmallMultiplesAxisPropertiesPtrOutput)
}

type TemplateSmallMultiplesAxisPropertiesOutput struct{ *pulumi.OutputState }

func (TemplateSmallMultiplesAxisPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSmallMultiplesAxisProperties)(nil)).Elem()
}

func (o TemplateSmallMultiplesAxisPropertiesOutput) ToTemplateSmallMultiplesAxisPropertiesOutput() TemplateSmallMultiplesAxisPropertiesOutput {
	return o
}

func (o TemplateSmallMultiplesAxisPropertiesOutput) ToTemplateSmallMultiplesAxisPropertiesOutputWithContext(ctx context.Context) TemplateSmallMultiplesAxisPropertiesOutput {
	return o
}

func (o TemplateSmallMultiplesAxisPropertiesOutput) ToTemplateSmallMultiplesAxisPropertiesPtrOutput() TemplateSmallMultiplesAxisPropertiesPtrOutput {
	return o.ToTemplateSmallMultiplesAxisPropertiesPtrOutputWithContext(context.Background())
}

func (o TemplateSmallMultiplesAxisPropertiesOutput) ToTemplateSmallMultiplesAxisPropertiesPtrOutputWithContext(ctx context.Context) TemplateSmallMultiplesAxisPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateSmallMultiplesAxisProperties) *TemplateSmallMultiplesAxisProperties {
		return &v
	}).(TemplateSmallMultiplesAxisPropertiesPtrOutput)
}

// Defines the placement of the axis. By default, axes are rendered `OUTSIDE` of the panels. Axes with `INDEPENDENT` scale are rendered `INSIDE` the panels.
func (o TemplateSmallMultiplesAxisPropertiesOutput) Placement() TemplateSmallMultiplesAxisPlacementPtrOutput {
	return o.ApplyT(func(v TemplateSmallMultiplesAxisProperties) *TemplateSmallMultiplesAxisPlacement { return v.Placement }).(TemplateSmallMultiplesAxisPlacementPtrOutput)
}

// Determines whether scale of the axes are shared or independent. The default value is `SHARED` .
func (o TemplateSmallMultiplesAxisPropertiesOutput) Scale() TemplateSmallMultiplesAxisScalePtrOutput {
	return o.ApplyT(func(v TemplateSmallMultiplesAxisProperties) *TemplateSmallMultiplesAxisScale { return v.Scale }).(TemplateSmallMultiplesAxisScalePtrOutput)
}

type TemplateSmallMultiplesAxisPropertiesPtrOutput struct{ *pulumi.OutputState }

func (TemplateSmallMultiplesAxisPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSmallMultiplesAxisProperties)(nil)).Elem()
}

func (o TemplateSmallMultiplesAxisPropertiesPtrOutput) ToTemplateSmallMultiplesAxisPropertiesPtrOutput() TemplateSmallMultiplesAxisPropertiesPtrOutput {
	return o
}

func (o TemplateSmallMultiplesAxisPropertiesPtrOutput) ToTemplateSmallMultiplesAxisPropertiesPtrOutputWithContext(ctx context.Context) TemplateSmallMultiplesAxisPropertiesPtrOutput {
	return o
}

func (o TemplateSmallMultiplesAxisPropertiesPtrOutput) Elem() TemplateSmallMultiplesAxisPropertiesOutput {
	return o.ApplyT(func(v *TemplateSmallMultiplesAxisProperties) TemplateSmallMultiplesAxisProperties {
		if v != nil {
			return *v
		}
		var ret TemplateSmallMultiplesAxisProperties
		return ret
	}).(TemplateSmallMultiplesAxisPropertiesOutput)
}

// Defines the placement of the axis. By default, axes are rendered `OUTSIDE` of the panels. Axes with `INDEPENDENT` scale are rendered `INSIDE` the panels.
func (o TemplateSmallMultiplesAxisPropertiesPtrOutput) Placement() TemplateSmallMultiplesAxisPlacementPtrOutput {
	return o.ApplyT(func(v *TemplateSmallMultiplesAxisProperties) *TemplateSmallMultiplesAxisPlacement {
		if v == nil {
			return nil
		}
		return v.Placement
	}).(TemplateSmallMultiplesAxisPlacementPtrOutput)
}

// Determines whether scale of the axes are shared or independent. The default value is `SHARED` .
func (o TemplateSmallMultiplesAxisPropertiesPtrOutput) Scale() TemplateSmallMultiplesAxisScalePtrOutput {
	return o.ApplyT(func(v *TemplateSmallMultiplesAxisProperties) *TemplateSmallMultiplesAxisScale {
		if v == nil {
			return nil
		}
		return v.Scale
	}).(TemplateSmallMultiplesAxisScalePtrOutput)
}

type TemplateSmallMultiplesOptions struct {
	// Sets the maximum number of visible columns to display in the grid of small multiples panels.
	//
	// The default is `Auto` , which automatically adjusts the columns in the grid to fit the overall layout and size of the given chart.
	MaxVisibleColumns *float64 `pulumi:"maxVisibleColumns"`
	// Sets the maximum number of visible rows to display in the grid of small multiples panels.
	//
	// The default value is `Auto` , which automatically adjusts the rows in the grid to fit the overall layout and size of the given chart.
	MaxVisibleRows *float64 `pulumi:"maxVisibleRows"`
	// Configures the display options for each small multiples panel.
	PanelConfiguration *TemplatePanelConfiguration `pulumi:"panelConfiguration"`
	// The properties of a small multiples X axis.
	XAxis *TemplateSmallMultiplesAxisProperties `pulumi:"xAxis"`
	// The properties of a small multiples Y axis.
	YAxis *TemplateSmallMultiplesAxisProperties `pulumi:"yAxis"`
}

// TemplateSmallMultiplesOptionsInput is an input type that accepts TemplateSmallMultiplesOptionsArgs and TemplateSmallMultiplesOptionsOutput values.
// You can construct a concrete instance of `TemplateSmallMultiplesOptionsInput` via:
//
//	TemplateSmallMultiplesOptionsArgs{...}
type TemplateSmallMultiplesOptionsInput interface {
	pulumi.Input

	ToTemplateSmallMultiplesOptionsOutput() TemplateSmallMultiplesOptionsOutput
	ToTemplateSmallMultiplesOptionsOutputWithContext(context.Context) TemplateSmallMultiplesOptionsOutput
}

type TemplateSmallMultiplesOptionsArgs struct {
	// Sets the maximum number of visible columns to display in the grid of small multiples panels.
	//
	// The default is `Auto` , which automatically adjusts the columns in the grid to fit the overall layout and size of the given chart.
	MaxVisibleColumns pulumi.Float64PtrInput `pulumi:"maxVisibleColumns"`
	// Sets the maximum number of visible rows to display in the grid of small multiples panels.
	//
	// The default value is `Auto` , which automatically adjusts the rows in the grid to fit the overall layout and size of the given chart.
	MaxVisibleRows pulumi.Float64PtrInput `pulumi:"maxVisibleRows"`
	// Configures the display options for each small multiples panel.
	PanelConfiguration TemplatePanelConfigurationPtrInput `pulumi:"panelConfiguration"`
	// The properties of a small multiples X axis.
	XAxis TemplateSmallMultiplesAxisPropertiesPtrInput `pulumi:"xAxis"`
	// The properties of a small multiples Y axis.
	YAxis TemplateSmallMultiplesAxisPropertiesPtrInput `pulumi:"yAxis"`
}

func (TemplateSmallMultiplesOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSmallMultiplesOptions)(nil)).Elem()
}

func (i TemplateSmallMultiplesOptionsArgs) ToTemplateSmallMultiplesOptionsOutput() TemplateSmallMultiplesOptionsOutput {
	return i.ToTemplateSmallMultiplesOptionsOutputWithContext(context.Background())
}

func (i TemplateSmallMultiplesOptionsArgs) ToTemplateSmallMultiplesOptionsOutputWithContext(ctx context.Context) TemplateSmallMultiplesOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSmallMultiplesOptionsOutput)
}

func (i TemplateSmallMultiplesOptionsArgs) ToTemplateSmallMultiplesOptionsPtrOutput() TemplateSmallMultiplesOptionsPtrOutput {
	return i.ToTemplateSmallMultiplesOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateSmallMultiplesOptionsArgs) ToTemplateSmallMultiplesOptionsPtrOutputWithContext(ctx context.Context) TemplateSmallMultiplesOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSmallMultiplesOptionsOutput).ToTemplateSmallMultiplesOptionsPtrOutputWithContext(ctx)
}

// TemplateSmallMultiplesOptionsPtrInput is an input type that accepts TemplateSmallMultiplesOptionsArgs, TemplateSmallMultiplesOptionsPtr and TemplateSmallMultiplesOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateSmallMultiplesOptionsPtrInput` via:
//
//	        TemplateSmallMultiplesOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateSmallMultiplesOptionsPtrInput interface {
	pulumi.Input

	ToTemplateSmallMultiplesOptionsPtrOutput() TemplateSmallMultiplesOptionsPtrOutput
	ToTemplateSmallMultiplesOptionsPtrOutputWithContext(context.Context) TemplateSmallMultiplesOptionsPtrOutput
}

type templateSmallMultiplesOptionsPtrType TemplateSmallMultiplesOptionsArgs

func TemplateSmallMultiplesOptionsPtr(v *TemplateSmallMultiplesOptionsArgs) TemplateSmallMultiplesOptionsPtrInput {
	return (*templateSmallMultiplesOptionsPtrType)(v)
}

func (*templateSmallMultiplesOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSmallMultiplesOptions)(nil)).Elem()
}

func (i *templateSmallMultiplesOptionsPtrType) ToTemplateSmallMultiplesOptionsPtrOutput() TemplateSmallMultiplesOptionsPtrOutput {
	return i.ToTemplateSmallMultiplesOptionsPtrOutputWithContext(context.Background())
}

func (i *templateSmallMultiplesOptionsPtrType) ToTemplateSmallMultiplesOptionsPtrOutputWithContext(ctx context.Context) TemplateSmallMultiplesOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSmallMultiplesOptionsPtrOutput)
}

type TemplateSmallMultiplesOptionsOutput struct{ *pulumi.OutputState }

func (TemplateSmallMultiplesOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSmallMultiplesOptions)(nil)).Elem()
}

func (o TemplateSmallMultiplesOptionsOutput) ToTemplateSmallMultiplesOptionsOutput() TemplateSmallMultiplesOptionsOutput {
	return o
}

func (o TemplateSmallMultiplesOptionsOutput) ToTemplateSmallMultiplesOptionsOutputWithContext(ctx context.Context) TemplateSmallMultiplesOptionsOutput {
	return o
}

func (o TemplateSmallMultiplesOptionsOutput) ToTemplateSmallMultiplesOptionsPtrOutput() TemplateSmallMultiplesOptionsPtrOutput {
	return o.ToTemplateSmallMultiplesOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateSmallMultiplesOptionsOutput) ToTemplateSmallMultiplesOptionsPtrOutputWithContext(ctx context.Context) TemplateSmallMultiplesOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateSmallMultiplesOptions) *TemplateSmallMultiplesOptions {
		return &v
	}).(TemplateSmallMultiplesOptionsPtrOutput)
}

// Sets the maximum number of visible columns to display in the grid of small multiples panels.
//
// The default is `Auto` , which automatically adjusts the columns in the grid to fit the overall layout and size of the given chart.
func (o TemplateSmallMultiplesOptionsOutput) MaxVisibleColumns() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateSmallMultiplesOptions) *float64 { return v.MaxVisibleColumns }).(pulumi.Float64PtrOutput)
}

// Sets the maximum number of visible rows to display in the grid of small multiples panels.
//
// The default value is `Auto` , which automatically adjusts the rows in the grid to fit the overall layout and size of the given chart.
func (o TemplateSmallMultiplesOptionsOutput) MaxVisibleRows() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateSmallMultiplesOptions) *float64 { return v.MaxVisibleRows }).(pulumi.Float64PtrOutput)
}

// Configures the display options for each small multiples panel.
func (o TemplateSmallMultiplesOptionsOutput) PanelConfiguration() TemplatePanelConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateSmallMultiplesOptions) *TemplatePanelConfiguration { return v.PanelConfiguration }).(TemplatePanelConfigurationPtrOutput)
}

// The properties of a small multiples X axis.
func (o TemplateSmallMultiplesOptionsOutput) XAxis() TemplateSmallMultiplesAxisPropertiesPtrOutput {
	return o.ApplyT(func(v TemplateSmallMultiplesOptions) *TemplateSmallMultiplesAxisProperties { return v.XAxis }).(TemplateSmallMultiplesAxisPropertiesPtrOutput)
}

// The properties of a small multiples Y axis.
func (o TemplateSmallMultiplesOptionsOutput) YAxis() TemplateSmallMultiplesAxisPropertiesPtrOutput {
	return o.ApplyT(func(v TemplateSmallMultiplesOptions) *TemplateSmallMultiplesAxisProperties { return v.YAxis }).(TemplateSmallMultiplesAxisPropertiesPtrOutput)
}

type TemplateSmallMultiplesOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateSmallMultiplesOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSmallMultiplesOptions)(nil)).Elem()
}

func (o TemplateSmallMultiplesOptionsPtrOutput) ToTemplateSmallMultiplesOptionsPtrOutput() TemplateSmallMultiplesOptionsPtrOutput {
	return o
}

func (o TemplateSmallMultiplesOptionsPtrOutput) ToTemplateSmallMultiplesOptionsPtrOutputWithContext(ctx context.Context) TemplateSmallMultiplesOptionsPtrOutput {
	return o
}

func (o TemplateSmallMultiplesOptionsPtrOutput) Elem() TemplateSmallMultiplesOptionsOutput {
	return o.ApplyT(func(v *TemplateSmallMultiplesOptions) TemplateSmallMultiplesOptions {
		if v != nil {
			return *v
		}
		var ret TemplateSmallMultiplesOptions
		return ret
	}).(TemplateSmallMultiplesOptionsOutput)
}

// Sets the maximum number of visible columns to display in the grid of small multiples panels.
//
// The default is `Auto` , which automatically adjusts the columns in the grid to fit the overall layout and size of the given chart.
func (o TemplateSmallMultiplesOptionsPtrOutput) MaxVisibleColumns() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateSmallMultiplesOptions) *float64 {
		if v == nil {
			return nil
		}
		return v.MaxVisibleColumns
	}).(pulumi.Float64PtrOutput)
}

// Sets the maximum number of visible rows to display in the grid of small multiples panels.
//
// The default value is `Auto` , which automatically adjusts the rows in the grid to fit the overall layout and size of the given chart.
func (o TemplateSmallMultiplesOptionsPtrOutput) MaxVisibleRows() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateSmallMultiplesOptions) *float64 {
		if v == nil {
			return nil
		}
		return v.MaxVisibleRows
	}).(pulumi.Float64PtrOutput)
}

// Configures the display options for each small multiples panel.
func (o TemplateSmallMultiplesOptionsPtrOutput) PanelConfiguration() TemplatePanelConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateSmallMultiplesOptions) *TemplatePanelConfiguration {
		if v == nil {
			return nil
		}
		return v.PanelConfiguration
	}).(TemplatePanelConfigurationPtrOutput)
}

// The properties of a small multiples X axis.
func (o TemplateSmallMultiplesOptionsPtrOutput) XAxis() TemplateSmallMultiplesAxisPropertiesPtrOutput {
	return o.ApplyT(func(v *TemplateSmallMultiplesOptions) *TemplateSmallMultiplesAxisProperties {
		if v == nil {
			return nil
		}
		return v.XAxis
	}).(TemplateSmallMultiplesAxisPropertiesPtrOutput)
}

// The properties of a small multiples Y axis.
func (o TemplateSmallMultiplesOptionsPtrOutput) YAxis() TemplateSmallMultiplesAxisPropertiesPtrOutput {
	return o.ApplyT(func(v *TemplateSmallMultiplesOptions) *TemplateSmallMultiplesAxisProperties {
		if v == nil {
			return nil
		}
		return v.YAxis
	}).(TemplateSmallMultiplesAxisPropertiesPtrOutput)
}

// <p>The source analysis of the template.</p>
type TemplateSourceAnalysis struct {
	// <p>The Amazon Resource Name (ARN) of the resource.</p>
	Arn string `pulumi:"arn"`
	// <p>A structure containing information about the dataset references used as placeholders
	//             in the template.</p>
	DataSetReferences []TemplateDataSetReference `pulumi:"dataSetReferences"`
}

// TemplateSourceAnalysisInput is an input type that accepts TemplateSourceAnalysisArgs and TemplateSourceAnalysisOutput values.
// You can construct a concrete instance of `TemplateSourceAnalysisInput` via:
//
//	TemplateSourceAnalysisArgs{...}
type TemplateSourceAnalysisInput interface {
	pulumi.Input

	ToTemplateSourceAnalysisOutput() TemplateSourceAnalysisOutput
	ToTemplateSourceAnalysisOutputWithContext(context.Context) TemplateSourceAnalysisOutput
}

// <p>The source analysis of the template.</p>
type TemplateSourceAnalysisArgs struct {
	// <p>The Amazon Resource Name (ARN) of the resource.</p>
	Arn pulumi.StringInput `pulumi:"arn"`
	// <p>A structure containing information about the dataset references used as placeholders
	//             in the template.</p>
	DataSetReferences TemplateDataSetReferenceArrayInput `pulumi:"dataSetReferences"`
}

func (TemplateSourceAnalysisArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSourceAnalysis)(nil)).Elem()
}

func (i TemplateSourceAnalysisArgs) ToTemplateSourceAnalysisOutput() TemplateSourceAnalysisOutput {
	return i.ToTemplateSourceAnalysisOutputWithContext(context.Background())
}

func (i TemplateSourceAnalysisArgs) ToTemplateSourceAnalysisOutputWithContext(ctx context.Context) TemplateSourceAnalysisOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSourceAnalysisOutput)
}

func (i TemplateSourceAnalysisArgs) ToTemplateSourceAnalysisPtrOutput() TemplateSourceAnalysisPtrOutput {
	return i.ToTemplateSourceAnalysisPtrOutputWithContext(context.Background())
}

func (i TemplateSourceAnalysisArgs) ToTemplateSourceAnalysisPtrOutputWithContext(ctx context.Context) TemplateSourceAnalysisPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSourceAnalysisOutput).ToTemplateSourceAnalysisPtrOutputWithContext(ctx)
}

// TemplateSourceAnalysisPtrInput is an input type that accepts TemplateSourceAnalysisArgs, TemplateSourceAnalysisPtr and TemplateSourceAnalysisPtrOutput values.
// You can construct a concrete instance of `TemplateSourceAnalysisPtrInput` via:
//
//	        TemplateSourceAnalysisArgs{...}
//
//	or:
//
//	        nil
type TemplateSourceAnalysisPtrInput interface {
	pulumi.Input

	ToTemplateSourceAnalysisPtrOutput() TemplateSourceAnalysisPtrOutput
	ToTemplateSourceAnalysisPtrOutputWithContext(context.Context) TemplateSourceAnalysisPtrOutput
}

type templateSourceAnalysisPtrType TemplateSourceAnalysisArgs

func TemplateSourceAnalysisPtr(v *TemplateSourceAnalysisArgs) TemplateSourceAnalysisPtrInput {
	return (*templateSourceAnalysisPtrType)(v)
}

func (*templateSourceAnalysisPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSourceAnalysis)(nil)).Elem()
}

func (i *templateSourceAnalysisPtrType) ToTemplateSourceAnalysisPtrOutput() TemplateSourceAnalysisPtrOutput {
	return i.ToTemplateSourceAnalysisPtrOutputWithContext(context.Background())
}

func (i *templateSourceAnalysisPtrType) ToTemplateSourceAnalysisPtrOutputWithContext(ctx context.Context) TemplateSourceAnalysisPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSourceAnalysisPtrOutput)
}

// <p>The source analysis of the template.</p>
type TemplateSourceAnalysisOutput struct{ *pulumi.OutputState }

func (TemplateSourceAnalysisOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSourceAnalysis)(nil)).Elem()
}

func (o TemplateSourceAnalysisOutput) ToTemplateSourceAnalysisOutput() TemplateSourceAnalysisOutput {
	return o
}

func (o TemplateSourceAnalysisOutput) ToTemplateSourceAnalysisOutputWithContext(ctx context.Context) TemplateSourceAnalysisOutput {
	return o
}

func (o TemplateSourceAnalysisOutput) ToTemplateSourceAnalysisPtrOutput() TemplateSourceAnalysisPtrOutput {
	return o.ToTemplateSourceAnalysisPtrOutputWithContext(context.Background())
}

func (o TemplateSourceAnalysisOutput) ToTemplateSourceAnalysisPtrOutputWithContext(ctx context.Context) TemplateSourceAnalysisPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateSourceAnalysis) *TemplateSourceAnalysis {
		return &v
	}).(TemplateSourceAnalysisPtrOutput)
}

// <p>The Amazon Resource Name (ARN) of the resource.</p>
func (o TemplateSourceAnalysisOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateSourceAnalysis) string { return v.Arn }).(pulumi.StringOutput)
}

// <p>A structure containing information about the dataset references used as placeholders
//
//	in the template.</p>
func (o TemplateSourceAnalysisOutput) DataSetReferences() TemplateDataSetReferenceArrayOutput {
	return o.ApplyT(func(v TemplateSourceAnalysis) []TemplateDataSetReference { return v.DataSetReferences }).(TemplateDataSetReferenceArrayOutput)
}

type TemplateSourceAnalysisPtrOutput struct{ *pulumi.OutputState }

func (TemplateSourceAnalysisPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSourceAnalysis)(nil)).Elem()
}

func (o TemplateSourceAnalysisPtrOutput) ToTemplateSourceAnalysisPtrOutput() TemplateSourceAnalysisPtrOutput {
	return o
}

func (o TemplateSourceAnalysisPtrOutput) ToTemplateSourceAnalysisPtrOutputWithContext(ctx context.Context) TemplateSourceAnalysisPtrOutput {
	return o
}

func (o TemplateSourceAnalysisPtrOutput) Elem() TemplateSourceAnalysisOutput {
	return o.ApplyT(func(v *TemplateSourceAnalysis) TemplateSourceAnalysis {
		if v != nil {
			return *v
		}
		var ret TemplateSourceAnalysis
		return ret
	}).(TemplateSourceAnalysisOutput)
}

// <p>The Amazon Resource Name (ARN) of the resource.</p>
func (o TemplateSourceAnalysisPtrOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateSourceAnalysis) *string {
		if v == nil {
			return nil
		}
		return &v.Arn
	}).(pulumi.StringPtrOutput)
}

// <p>A structure containing information about the dataset references used as placeholders
//
//	in the template.</p>
func (o TemplateSourceAnalysisPtrOutput) DataSetReferences() TemplateDataSetReferenceArrayOutput {
	return o.ApplyT(func(v *TemplateSourceAnalysis) []TemplateDataSetReference {
		if v == nil {
			return nil
		}
		return v.DataSetReferences
	}).(TemplateDataSetReferenceArrayOutput)
}

// <p>The source entity of the template.</p>
type TemplateSourceEntity struct {
	// The source analysis, if it is based on an analysis.
	SourceAnalysis *TemplateSourceAnalysis `pulumi:"sourceAnalysis"`
	// The source template, if it is based on an template.
	SourceTemplate *TemplateSourceTemplate `pulumi:"sourceTemplate"`
}

// TemplateSourceEntityInput is an input type that accepts TemplateSourceEntityArgs and TemplateSourceEntityOutput values.
// You can construct a concrete instance of `TemplateSourceEntityInput` via:
//
//	TemplateSourceEntityArgs{...}
type TemplateSourceEntityInput interface {
	pulumi.Input

	ToTemplateSourceEntityOutput() TemplateSourceEntityOutput
	ToTemplateSourceEntityOutputWithContext(context.Context) TemplateSourceEntityOutput
}

// <p>The source entity of the template.</p>
type TemplateSourceEntityArgs struct {
	// The source analysis, if it is based on an analysis.
	SourceAnalysis TemplateSourceAnalysisPtrInput `pulumi:"sourceAnalysis"`
	// The source template, if it is based on an template.
	SourceTemplate TemplateSourceTemplatePtrInput `pulumi:"sourceTemplate"`
}

func (TemplateSourceEntityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSourceEntity)(nil)).Elem()
}

func (i TemplateSourceEntityArgs) ToTemplateSourceEntityOutput() TemplateSourceEntityOutput {
	return i.ToTemplateSourceEntityOutputWithContext(context.Background())
}

func (i TemplateSourceEntityArgs) ToTemplateSourceEntityOutputWithContext(ctx context.Context) TemplateSourceEntityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSourceEntityOutput)
}

func (i TemplateSourceEntityArgs) ToTemplateSourceEntityPtrOutput() TemplateSourceEntityPtrOutput {
	return i.ToTemplateSourceEntityPtrOutputWithContext(context.Background())
}

func (i TemplateSourceEntityArgs) ToTemplateSourceEntityPtrOutputWithContext(ctx context.Context) TemplateSourceEntityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSourceEntityOutput).ToTemplateSourceEntityPtrOutputWithContext(ctx)
}

// TemplateSourceEntityPtrInput is an input type that accepts TemplateSourceEntityArgs, TemplateSourceEntityPtr and TemplateSourceEntityPtrOutput values.
// You can construct a concrete instance of `TemplateSourceEntityPtrInput` via:
//
//	        TemplateSourceEntityArgs{...}
//
//	or:
//
//	        nil
type TemplateSourceEntityPtrInput interface {
	pulumi.Input

	ToTemplateSourceEntityPtrOutput() TemplateSourceEntityPtrOutput
	ToTemplateSourceEntityPtrOutputWithContext(context.Context) TemplateSourceEntityPtrOutput
}

type templateSourceEntityPtrType TemplateSourceEntityArgs

func TemplateSourceEntityPtr(v *TemplateSourceEntityArgs) TemplateSourceEntityPtrInput {
	return (*templateSourceEntityPtrType)(v)
}

func (*templateSourceEntityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSourceEntity)(nil)).Elem()
}

func (i *templateSourceEntityPtrType) ToTemplateSourceEntityPtrOutput() TemplateSourceEntityPtrOutput {
	return i.ToTemplateSourceEntityPtrOutputWithContext(context.Background())
}

func (i *templateSourceEntityPtrType) ToTemplateSourceEntityPtrOutputWithContext(ctx context.Context) TemplateSourceEntityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSourceEntityPtrOutput)
}

// <p>The source entity of the template.</p>
type TemplateSourceEntityOutput struct{ *pulumi.OutputState }

func (TemplateSourceEntityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSourceEntity)(nil)).Elem()
}

func (o TemplateSourceEntityOutput) ToTemplateSourceEntityOutput() TemplateSourceEntityOutput {
	return o
}

func (o TemplateSourceEntityOutput) ToTemplateSourceEntityOutputWithContext(ctx context.Context) TemplateSourceEntityOutput {
	return o
}

func (o TemplateSourceEntityOutput) ToTemplateSourceEntityPtrOutput() TemplateSourceEntityPtrOutput {
	return o.ToTemplateSourceEntityPtrOutputWithContext(context.Background())
}

func (o TemplateSourceEntityOutput) ToTemplateSourceEntityPtrOutputWithContext(ctx context.Context) TemplateSourceEntityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateSourceEntity) *TemplateSourceEntity {
		return &v
	}).(TemplateSourceEntityPtrOutput)
}

// The source analysis, if it is based on an analysis.
func (o TemplateSourceEntityOutput) SourceAnalysis() TemplateSourceAnalysisPtrOutput {
	return o.ApplyT(func(v TemplateSourceEntity) *TemplateSourceAnalysis { return v.SourceAnalysis }).(TemplateSourceAnalysisPtrOutput)
}

// The source template, if it is based on an template.
func (o TemplateSourceEntityOutput) SourceTemplate() TemplateSourceTemplatePtrOutput {
	return o.ApplyT(func(v TemplateSourceEntity) *TemplateSourceTemplate { return v.SourceTemplate }).(TemplateSourceTemplatePtrOutput)
}

type TemplateSourceEntityPtrOutput struct{ *pulumi.OutputState }

func (TemplateSourceEntityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSourceEntity)(nil)).Elem()
}

func (o TemplateSourceEntityPtrOutput) ToTemplateSourceEntityPtrOutput() TemplateSourceEntityPtrOutput {
	return o
}

func (o TemplateSourceEntityPtrOutput) ToTemplateSourceEntityPtrOutputWithContext(ctx context.Context) TemplateSourceEntityPtrOutput {
	return o
}

func (o TemplateSourceEntityPtrOutput) Elem() TemplateSourceEntityOutput {
	return o.ApplyT(func(v *TemplateSourceEntity) TemplateSourceEntity {
		if v != nil {
			return *v
		}
		var ret TemplateSourceEntity
		return ret
	}).(TemplateSourceEntityOutput)
}

// The source analysis, if it is based on an analysis.
func (o TemplateSourceEntityPtrOutput) SourceAnalysis() TemplateSourceAnalysisPtrOutput {
	return o.ApplyT(func(v *TemplateSourceEntity) *TemplateSourceAnalysis {
		if v == nil {
			return nil
		}
		return v.SourceAnalysis
	}).(TemplateSourceAnalysisPtrOutput)
}

// The source template, if it is based on an template.
func (o TemplateSourceEntityPtrOutput) SourceTemplate() TemplateSourceTemplatePtrOutput {
	return o.ApplyT(func(v *TemplateSourceEntity) *TemplateSourceTemplate {
		if v == nil {
			return nil
		}
		return v.SourceTemplate
	}).(TemplateSourceTemplatePtrOutput)
}

// <p>The source template of the template.</p>
type TemplateSourceTemplate struct {
	// <p>The Amazon Resource Name (ARN) of the resource.</p>
	Arn string `pulumi:"arn"`
}

// TemplateSourceTemplateInput is an input type that accepts TemplateSourceTemplateArgs and TemplateSourceTemplateOutput values.
// You can construct a concrete instance of `TemplateSourceTemplateInput` via:
//
//	TemplateSourceTemplateArgs{...}
type TemplateSourceTemplateInput interface {
	pulumi.Input

	ToTemplateSourceTemplateOutput() TemplateSourceTemplateOutput
	ToTemplateSourceTemplateOutputWithContext(context.Context) TemplateSourceTemplateOutput
}

// <p>The source template of the template.</p>
type TemplateSourceTemplateArgs struct {
	// <p>The Amazon Resource Name (ARN) of the resource.</p>
	Arn pulumi.StringInput `pulumi:"arn"`
}

func (TemplateSourceTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSourceTemplate)(nil)).Elem()
}

func (i TemplateSourceTemplateArgs) ToTemplateSourceTemplateOutput() TemplateSourceTemplateOutput {
	return i.ToTemplateSourceTemplateOutputWithContext(context.Background())
}

func (i TemplateSourceTemplateArgs) ToTemplateSourceTemplateOutputWithContext(ctx context.Context) TemplateSourceTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSourceTemplateOutput)
}

func (i TemplateSourceTemplateArgs) ToTemplateSourceTemplatePtrOutput() TemplateSourceTemplatePtrOutput {
	return i.ToTemplateSourceTemplatePtrOutputWithContext(context.Background())
}

func (i TemplateSourceTemplateArgs) ToTemplateSourceTemplatePtrOutputWithContext(ctx context.Context) TemplateSourceTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSourceTemplateOutput).ToTemplateSourceTemplatePtrOutputWithContext(ctx)
}

// TemplateSourceTemplatePtrInput is an input type that accepts TemplateSourceTemplateArgs, TemplateSourceTemplatePtr and TemplateSourceTemplatePtrOutput values.
// You can construct a concrete instance of `TemplateSourceTemplatePtrInput` via:
//
//	        TemplateSourceTemplateArgs{...}
//
//	or:
//
//	        nil
type TemplateSourceTemplatePtrInput interface {
	pulumi.Input

	ToTemplateSourceTemplatePtrOutput() TemplateSourceTemplatePtrOutput
	ToTemplateSourceTemplatePtrOutputWithContext(context.Context) TemplateSourceTemplatePtrOutput
}

type templateSourceTemplatePtrType TemplateSourceTemplateArgs

func TemplateSourceTemplatePtr(v *TemplateSourceTemplateArgs) TemplateSourceTemplatePtrInput {
	return (*templateSourceTemplatePtrType)(v)
}

func (*templateSourceTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSourceTemplate)(nil)).Elem()
}

func (i *templateSourceTemplatePtrType) ToTemplateSourceTemplatePtrOutput() TemplateSourceTemplatePtrOutput {
	return i.ToTemplateSourceTemplatePtrOutputWithContext(context.Background())
}

func (i *templateSourceTemplatePtrType) ToTemplateSourceTemplatePtrOutputWithContext(ctx context.Context) TemplateSourceTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSourceTemplatePtrOutput)
}

// <p>The source template of the template.</p>
type TemplateSourceTemplateOutput struct{ *pulumi.OutputState }

func (TemplateSourceTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSourceTemplate)(nil)).Elem()
}

func (o TemplateSourceTemplateOutput) ToTemplateSourceTemplateOutput() TemplateSourceTemplateOutput {
	return o
}

func (o TemplateSourceTemplateOutput) ToTemplateSourceTemplateOutputWithContext(ctx context.Context) TemplateSourceTemplateOutput {
	return o
}

func (o TemplateSourceTemplateOutput) ToTemplateSourceTemplatePtrOutput() TemplateSourceTemplatePtrOutput {
	return o.ToTemplateSourceTemplatePtrOutputWithContext(context.Background())
}

func (o TemplateSourceTemplateOutput) ToTemplateSourceTemplatePtrOutputWithContext(ctx context.Context) TemplateSourceTemplatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateSourceTemplate) *TemplateSourceTemplate {
		return &v
	}).(TemplateSourceTemplatePtrOutput)
}

// <p>The Amazon Resource Name (ARN) of the resource.</p>
func (o TemplateSourceTemplateOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateSourceTemplate) string { return v.Arn }).(pulumi.StringOutput)
}

type TemplateSourceTemplatePtrOutput struct{ *pulumi.OutputState }

func (TemplateSourceTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSourceTemplate)(nil)).Elem()
}

func (o TemplateSourceTemplatePtrOutput) ToTemplateSourceTemplatePtrOutput() TemplateSourceTemplatePtrOutput {
	return o
}

func (o TemplateSourceTemplatePtrOutput) ToTemplateSourceTemplatePtrOutputWithContext(ctx context.Context) TemplateSourceTemplatePtrOutput {
	return o
}

func (o TemplateSourceTemplatePtrOutput) Elem() TemplateSourceTemplateOutput {
	return o.ApplyT(func(v *TemplateSourceTemplate) TemplateSourceTemplate {
		if v != nil {
			return *v
		}
		var ret TemplateSourceTemplate
		return ret
	}).(TemplateSourceTemplateOutput)
}

// <p>The Amazon Resource Name (ARN) of the resource.</p>
func (o TemplateSourceTemplatePtrOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateSourceTemplate) *string {
		if v == nil {
			return nil
		}
		return &v.Arn
	}).(pulumi.StringPtrOutput)
}

type TemplateSpacing struct {
	// String based length that is composed of value and unit
	Bottom *string `pulumi:"bottom"`
	// String based length that is composed of value and unit
	Left *string `pulumi:"left"`
	// String based length that is composed of value and unit
	Right *string `pulumi:"right"`
	// String based length that is composed of value and unit
	Top *string `pulumi:"top"`
}

// TemplateSpacingInput is an input type that accepts TemplateSpacingArgs and TemplateSpacingOutput values.
// You can construct a concrete instance of `TemplateSpacingInput` via:
//
//	TemplateSpacingArgs{...}
type TemplateSpacingInput interface {
	pulumi.Input

	ToTemplateSpacingOutput() TemplateSpacingOutput
	ToTemplateSpacingOutputWithContext(context.Context) TemplateSpacingOutput
}

type TemplateSpacingArgs struct {
	// String based length that is composed of value and unit
	Bottom pulumi.StringPtrInput `pulumi:"bottom"`
	// String based length that is composed of value and unit
	Left pulumi.StringPtrInput `pulumi:"left"`
	// String based length that is composed of value and unit
	Right pulumi.StringPtrInput `pulumi:"right"`
	// String based length that is composed of value and unit
	Top pulumi.StringPtrInput `pulumi:"top"`
}

func (TemplateSpacingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSpacing)(nil)).Elem()
}

func (i TemplateSpacingArgs) ToTemplateSpacingOutput() TemplateSpacingOutput {
	return i.ToTemplateSpacingOutputWithContext(context.Background())
}

func (i TemplateSpacingArgs) ToTemplateSpacingOutputWithContext(ctx context.Context) TemplateSpacingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSpacingOutput)
}

func (i TemplateSpacingArgs) ToTemplateSpacingPtrOutput() TemplateSpacingPtrOutput {
	return i.ToTemplateSpacingPtrOutputWithContext(context.Background())
}

func (i TemplateSpacingArgs) ToTemplateSpacingPtrOutputWithContext(ctx context.Context) TemplateSpacingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSpacingOutput).ToTemplateSpacingPtrOutputWithContext(ctx)
}

// TemplateSpacingPtrInput is an input type that accepts TemplateSpacingArgs, TemplateSpacingPtr and TemplateSpacingPtrOutput values.
// You can construct a concrete instance of `TemplateSpacingPtrInput` via:
//
//	        TemplateSpacingArgs{...}
//
//	or:
//
//	        nil
type TemplateSpacingPtrInput interface {
	pulumi.Input

	ToTemplateSpacingPtrOutput() TemplateSpacingPtrOutput
	ToTemplateSpacingPtrOutputWithContext(context.Context) TemplateSpacingPtrOutput
}

type templateSpacingPtrType TemplateSpacingArgs

func TemplateSpacingPtr(v *TemplateSpacingArgs) TemplateSpacingPtrInput {
	return (*templateSpacingPtrType)(v)
}

func (*templateSpacingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSpacing)(nil)).Elem()
}

func (i *templateSpacingPtrType) ToTemplateSpacingPtrOutput() TemplateSpacingPtrOutput {
	return i.ToTemplateSpacingPtrOutputWithContext(context.Background())
}

func (i *templateSpacingPtrType) ToTemplateSpacingPtrOutputWithContext(ctx context.Context) TemplateSpacingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSpacingPtrOutput)
}

type TemplateSpacingOutput struct{ *pulumi.OutputState }

func (TemplateSpacingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSpacing)(nil)).Elem()
}

func (o TemplateSpacingOutput) ToTemplateSpacingOutput() TemplateSpacingOutput {
	return o
}

func (o TemplateSpacingOutput) ToTemplateSpacingOutputWithContext(ctx context.Context) TemplateSpacingOutput {
	return o
}

func (o TemplateSpacingOutput) ToTemplateSpacingPtrOutput() TemplateSpacingPtrOutput {
	return o.ToTemplateSpacingPtrOutputWithContext(context.Background())
}

func (o TemplateSpacingOutput) ToTemplateSpacingPtrOutputWithContext(ctx context.Context) TemplateSpacingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateSpacing) *TemplateSpacing {
		return &v
	}).(TemplateSpacingPtrOutput)
}

// String based length that is composed of value and unit
func (o TemplateSpacingOutput) Bottom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateSpacing) *string { return v.Bottom }).(pulumi.StringPtrOutput)
}

// String based length that is composed of value and unit
func (o TemplateSpacingOutput) Left() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateSpacing) *string { return v.Left }).(pulumi.StringPtrOutput)
}

// String based length that is composed of value and unit
func (o TemplateSpacingOutput) Right() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateSpacing) *string { return v.Right }).(pulumi.StringPtrOutput)
}

// String based length that is composed of value and unit
func (o TemplateSpacingOutput) Top() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateSpacing) *string { return v.Top }).(pulumi.StringPtrOutput)
}

type TemplateSpacingPtrOutput struct{ *pulumi.OutputState }

func (TemplateSpacingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSpacing)(nil)).Elem()
}

func (o TemplateSpacingPtrOutput) ToTemplateSpacingPtrOutput() TemplateSpacingPtrOutput {
	return o
}

func (o TemplateSpacingPtrOutput) ToTemplateSpacingPtrOutputWithContext(ctx context.Context) TemplateSpacingPtrOutput {
	return o
}

func (o TemplateSpacingPtrOutput) Elem() TemplateSpacingOutput {
	return o.ApplyT(func(v *TemplateSpacing) TemplateSpacing {
		if v != nil {
			return *v
		}
		var ret TemplateSpacing
		return ret
	}).(TemplateSpacingOutput)
}

// String based length that is composed of value and unit
func (o TemplateSpacingPtrOutput) Bottom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateSpacing) *string {
		if v == nil {
			return nil
		}
		return v.Bottom
	}).(pulumi.StringPtrOutput)
}

// String based length that is composed of value and unit
func (o TemplateSpacingPtrOutput) Left() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateSpacing) *string {
		if v == nil {
			return nil
		}
		return v.Left
	}).(pulumi.StringPtrOutput)
}

// String based length that is composed of value and unit
func (o TemplateSpacingPtrOutput) Right() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateSpacing) *string {
		if v == nil {
			return nil
		}
		return v.Right
	}).(pulumi.StringPtrOutput)
}

// String based length that is composed of value and unit
func (o TemplateSpacingPtrOutput) Top() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateSpacing) *string {
		if v == nil {
			return nil
		}
		return v.Top
	}).(pulumi.StringPtrOutput)
}

type TemplateStringDefaultValues struct {
	// The dynamic value of the `StringDefaultValues` . Different defaults displayed according to users, groups, and values mapping.
	DynamicValue *TemplateDynamicDefaultValue `pulumi:"dynamicValue"`
	// The static values of the `DecimalDefaultValues` .
	StaticValues []string `pulumi:"staticValues"`
}

// TemplateStringDefaultValuesInput is an input type that accepts TemplateStringDefaultValuesArgs and TemplateStringDefaultValuesOutput values.
// You can construct a concrete instance of `TemplateStringDefaultValuesInput` via:
//
//	TemplateStringDefaultValuesArgs{...}
type TemplateStringDefaultValuesInput interface {
	pulumi.Input

	ToTemplateStringDefaultValuesOutput() TemplateStringDefaultValuesOutput
	ToTemplateStringDefaultValuesOutputWithContext(context.Context) TemplateStringDefaultValuesOutput
}

type TemplateStringDefaultValuesArgs struct {
	// The dynamic value of the `StringDefaultValues` . Different defaults displayed according to users, groups, and values mapping.
	DynamicValue TemplateDynamicDefaultValuePtrInput `pulumi:"dynamicValue"`
	// The static values of the `DecimalDefaultValues` .
	StaticValues pulumi.StringArrayInput `pulumi:"staticValues"`
}

func (TemplateStringDefaultValuesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateStringDefaultValues)(nil)).Elem()
}

func (i TemplateStringDefaultValuesArgs) ToTemplateStringDefaultValuesOutput() TemplateStringDefaultValuesOutput {
	return i.ToTemplateStringDefaultValuesOutputWithContext(context.Background())
}

func (i TemplateStringDefaultValuesArgs) ToTemplateStringDefaultValuesOutputWithContext(ctx context.Context) TemplateStringDefaultValuesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateStringDefaultValuesOutput)
}

func (i TemplateStringDefaultValuesArgs) ToTemplateStringDefaultValuesPtrOutput() TemplateStringDefaultValuesPtrOutput {
	return i.ToTemplateStringDefaultValuesPtrOutputWithContext(context.Background())
}

func (i TemplateStringDefaultValuesArgs) ToTemplateStringDefaultValuesPtrOutputWithContext(ctx context.Context) TemplateStringDefaultValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateStringDefaultValuesOutput).ToTemplateStringDefaultValuesPtrOutputWithContext(ctx)
}

// TemplateStringDefaultValuesPtrInput is an input type that accepts TemplateStringDefaultValuesArgs, TemplateStringDefaultValuesPtr and TemplateStringDefaultValuesPtrOutput values.
// You can construct a concrete instance of `TemplateStringDefaultValuesPtrInput` via:
//
//	        TemplateStringDefaultValuesArgs{...}
//
//	or:
//
//	        nil
type TemplateStringDefaultValuesPtrInput interface {
	pulumi.Input

	ToTemplateStringDefaultValuesPtrOutput() TemplateStringDefaultValuesPtrOutput
	ToTemplateStringDefaultValuesPtrOutputWithContext(context.Context) TemplateStringDefaultValuesPtrOutput
}

type templateStringDefaultValuesPtrType TemplateStringDefaultValuesArgs

func TemplateStringDefaultValuesPtr(v *TemplateStringDefaultValuesArgs) TemplateStringDefaultValuesPtrInput {
	return (*templateStringDefaultValuesPtrType)(v)
}

func (*templateStringDefaultValuesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateStringDefaultValues)(nil)).Elem()
}

func (i *templateStringDefaultValuesPtrType) ToTemplateStringDefaultValuesPtrOutput() TemplateStringDefaultValuesPtrOutput {
	return i.ToTemplateStringDefaultValuesPtrOutputWithContext(context.Background())
}

func (i *templateStringDefaultValuesPtrType) ToTemplateStringDefaultValuesPtrOutputWithContext(ctx context.Context) TemplateStringDefaultValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateStringDefaultValuesPtrOutput)
}

type TemplateStringDefaultValuesOutput struct{ *pulumi.OutputState }

func (TemplateStringDefaultValuesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateStringDefaultValues)(nil)).Elem()
}

func (o TemplateStringDefaultValuesOutput) ToTemplateStringDefaultValuesOutput() TemplateStringDefaultValuesOutput {
	return o
}

func (o TemplateStringDefaultValuesOutput) ToTemplateStringDefaultValuesOutputWithContext(ctx context.Context) TemplateStringDefaultValuesOutput {
	return o
}

func (o TemplateStringDefaultValuesOutput) ToTemplateStringDefaultValuesPtrOutput() TemplateStringDefaultValuesPtrOutput {
	return o.ToTemplateStringDefaultValuesPtrOutputWithContext(context.Background())
}

func (o TemplateStringDefaultValuesOutput) ToTemplateStringDefaultValuesPtrOutputWithContext(ctx context.Context) TemplateStringDefaultValuesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateStringDefaultValues) *TemplateStringDefaultValues {
		return &v
	}).(TemplateStringDefaultValuesPtrOutput)
}

// The dynamic value of the `StringDefaultValues` . Different defaults displayed according to users, groups, and values mapping.
func (o TemplateStringDefaultValuesOutput) DynamicValue() TemplateDynamicDefaultValuePtrOutput {
	return o.ApplyT(func(v TemplateStringDefaultValues) *TemplateDynamicDefaultValue { return v.DynamicValue }).(TemplateDynamicDefaultValuePtrOutput)
}

// The static values of the `DecimalDefaultValues` .
func (o TemplateStringDefaultValuesOutput) StaticValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TemplateStringDefaultValues) []string { return v.StaticValues }).(pulumi.StringArrayOutput)
}

type TemplateStringDefaultValuesPtrOutput struct{ *pulumi.OutputState }

func (TemplateStringDefaultValuesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateStringDefaultValues)(nil)).Elem()
}

func (o TemplateStringDefaultValuesPtrOutput) ToTemplateStringDefaultValuesPtrOutput() TemplateStringDefaultValuesPtrOutput {
	return o
}

func (o TemplateStringDefaultValuesPtrOutput) ToTemplateStringDefaultValuesPtrOutputWithContext(ctx context.Context) TemplateStringDefaultValuesPtrOutput {
	return o
}

func (o TemplateStringDefaultValuesPtrOutput) Elem() TemplateStringDefaultValuesOutput {
	return o.ApplyT(func(v *TemplateStringDefaultValues) TemplateStringDefaultValues {
		if v != nil {
			return *v
		}
		var ret TemplateStringDefaultValues
		return ret
	}).(TemplateStringDefaultValuesOutput)
}

// The dynamic value of the `StringDefaultValues` . Different defaults displayed according to users, groups, and values mapping.
func (o TemplateStringDefaultValuesPtrOutput) DynamicValue() TemplateDynamicDefaultValuePtrOutput {
	return o.ApplyT(func(v *TemplateStringDefaultValues) *TemplateDynamicDefaultValue {
		if v == nil {
			return nil
		}
		return v.DynamicValue
	}).(TemplateDynamicDefaultValuePtrOutput)
}

// The static values of the `DecimalDefaultValues` .
func (o TemplateStringDefaultValuesPtrOutput) StaticValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TemplateStringDefaultValues) []string {
		if v == nil {
			return nil
		}
		return v.StaticValues
	}).(pulumi.StringArrayOutput)
}

type TemplateStringFormatConfiguration struct {
	// The options that determine the null value format configuration.
	NullValueFormatConfiguration *TemplateNullValueFormatConfiguration `pulumi:"nullValueFormatConfiguration"`
	// The formatting configuration for numeric strings.
	NumericFormatConfiguration *TemplateNumericFormatConfiguration `pulumi:"numericFormatConfiguration"`
}

// TemplateStringFormatConfigurationInput is an input type that accepts TemplateStringFormatConfigurationArgs and TemplateStringFormatConfigurationOutput values.
// You can construct a concrete instance of `TemplateStringFormatConfigurationInput` via:
//
//	TemplateStringFormatConfigurationArgs{...}
type TemplateStringFormatConfigurationInput interface {
	pulumi.Input

	ToTemplateStringFormatConfigurationOutput() TemplateStringFormatConfigurationOutput
	ToTemplateStringFormatConfigurationOutputWithContext(context.Context) TemplateStringFormatConfigurationOutput
}

type TemplateStringFormatConfigurationArgs struct {
	// The options that determine the null value format configuration.
	NullValueFormatConfiguration TemplateNullValueFormatConfigurationPtrInput `pulumi:"nullValueFormatConfiguration"`
	// The formatting configuration for numeric strings.
	NumericFormatConfiguration TemplateNumericFormatConfigurationPtrInput `pulumi:"numericFormatConfiguration"`
}

func (TemplateStringFormatConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateStringFormatConfiguration)(nil)).Elem()
}

func (i TemplateStringFormatConfigurationArgs) ToTemplateStringFormatConfigurationOutput() TemplateStringFormatConfigurationOutput {
	return i.ToTemplateStringFormatConfigurationOutputWithContext(context.Background())
}

func (i TemplateStringFormatConfigurationArgs) ToTemplateStringFormatConfigurationOutputWithContext(ctx context.Context) TemplateStringFormatConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateStringFormatConfigurationOutput)
}

func (i TemplateStringFormatConfigurationArgs) ToTemplateStringFormatConfigurationPtrOutput() TemplateStringFormatConfigurationPtrOutput {
	return i.ToTemplateStringFormatConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateStringFormatConfigurationArgs) ToTemplateStringFormatConfigurationPtrOutputWithContext(ctx context.Context) TemplateStringFormatConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateStringFormatConfigurationOutput).ToTemplateStringFormatConfigurationPtrOutputWithContext(ctx)
}

// TemplateStringFormatConfigurationPtrInput is an input type that accepts TemplateStringFormatConfigurationArgs, TemplateStringFormatConfigurationPtr and TemplateStringFormatConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateStringFormatConfigurationPtrInput` via:
//
//	        TemplateStringFormatConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateStringFormatConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateStringFormatConfigurationPtrOutput() TemplateStringFormatConfigurationPtrOutput
	ToTemplateStringFormatConfigurationPtrOutputWithContext(context.Context) TemplateStringFormatConfigurationPtrOutput
}

type templateStringFormatConfigurationPtrType TemplateStringFormatConfigurationArgs

func TemplateStringFormatConfigurationPtr(v *TemplateStringFormatConfigurationArgs) TemplateStringFormatConfigurationPtrInput {
	return (*templateStringFormatConfigurationPtrType)(v)
}

func (*templateStringFormatConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateStringFormatConfiguration)(nil)).Elem()
}

func (i *templateStringFormatConfigurationPtrType) ToTemplateStringFormatConfigurationPtrOutput() TemplateStringFormatConfigurationPtrOutput {
	return i.ToTemplateStringFormatConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateStringFormatConfigurationPtrType) ToTemplateStringFormatConfigurationPtrOutputWithContext(ctx context.Context) TemplateStringFormatConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateStringFormatConfigurationPtrOutput)
}

type TemplateStringFormatConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateStringFormatConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateStringFormatConfiguration)(nil)).Elem()
}

func (o TemplateStringFormatConfigurationOutput) ToTemplateStringFormatConfigurationOutput() TemplateStringFormatConfigurationOutput {
	return o
}

func (o TemplateStringFormatConfigurationOutput) ToTemplateStringFormatConfigurationOutputWithContext(ctx context.Context) TemplateStringFormatConfigurationOutput {
	return o
}

func (o TemplateStringFormatConfigurationOutput) ToTemplateStringFormatConfigurationPtrOutput() TemplateStringFormatConfigurationPtrOutput {
	return o.ToTemplateStringFormatConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateStringFormatConfigurationOutput) ToTemplateStringFormatConfigurationPtrOutputWithContext(ctx context.Context) TemplateStringFormatConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateStringFormatConfiguration) *TemplateStringFormatConfiguration {
		return &v
	}).(TemplateStringFormatConfigurationPtrOutput)
}

// The options that determine the null value format configuration.
func (o TemplateStringFormatConfigurationOutput) NullValueFormatConfiguration() TemplateNullValueFormatConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateStringFormatConfiguration) *TemplateNullValueFormatConfiguration {
		return v.NullValueFormatConfiguration
	}).(TemplateNullValueFormatConfigurationPtrOutput)
}

// The formatting configuration for numeric strings.
func (o TemplateStringFormatConfigurationOutput) NumericFormatConfiguration() TemplateNumericFormatConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateStringFormatConfiguration) *TemplateNumericFormatConfiguration {
		return v.NumericFormatConfiguration
	}).(TemplateNumericFormatConfigurationPtrOutput)
}

type TemplateStringFormatConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateStringFormatConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateStringFormatConfiguration)(nil)).Elem()
}

func (o TemplateStringFormatConfigurationPtrOutput) ToTemplateStringFormatConfigurationPtrOutput() TemplateStringFormatConfigurationPtrOutput {
	return o
}

func (o TemplateStringFormatConfigurationPtrOutput) ToTemplateStringFormatConfigurationPtrOutputWithContext(ctx context.Context) TemplateStringFormatConfigurationPtrOutput {
	return o
}

func (o TemplateStringFormatConfigurationPtrOutput) Elem() TemplateStringFormatConfigurationOutput {
	return o.ApplyT(func(v *TemplateStringFormatConfiguration) TemplateStringFormatConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateStringFormatConfiguration
		return ret
	}).(TemplateStringFormatConfigurationOutput)
}

// The options that determine the null value format configuration.
func (o TemplateStringFormatConfigurationPtrOutput) NullValueFormatConfiguration() TemplateNullValueFormatConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateStringFormatConfiguration) *TemplateNullValueFormatConfiguration {
		if v == nil {
			return nil
		}
		return v.NullValueFormatConfiguration
	}).(TemplateNullValueFormatConfigurationPtrOutput)
}

// The formatting configuration for numeric strings.
func (o TemplateStringFormatConfigurationPtrOutput) NumericFormatConfiguration() TemplateNumericFormatConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateStringFormatConfiguration) *TemplateNumericFormatConfiguration {
		if v == nil {
			return nil
		}
		return v.NumericFormatConfiguration
	}).(TemplateNumericFormatConfigurationPtrOutput)
}

type TemplateStringParameterDeclaration struct {
	// The default values of a parameter. If the parameter is a single-value parameter, a maximum of one default value can be provided.
	DefaultValues           *TemplateStringDefaultValues     `pulumi:"defaultValues"`
	MappedDataSetParameters []TemplateMappedDataSetParameter `pulumi:"mappedDataSetParameters"`
	// The name of the parameter that is being declared.
	Name string `pulumi:"name"`
	// The value type determines whether the parameter is a single-value or multi-value parameter.
	ParameterValueType TemplateParameterValueType `pulumi:"parameterValueType"`
	// The configuration that defines the default value of a `String` parameter when a value has not been set.
	ValueWhenUnset *TemplateStringValueWhenUnsetConfiguration `pulumi:"valueWhenUnset"`
}

// TemplateStringParameterDeclarationInput is an input type that accepts TemplateStringParameterDeclarationArgs and TemplateStringParameterDeclarationOutput values.
// You can construct a concrete instance of `TemplateStringParameterDeclarationInput` via:
//
//	TemplateStringParameterDeclarationArgs{...}
type TemplateStringParameterDeclarationInput interface {
	pulumi.Input

	ToTemplateStringParameterDeclarationOutput() TemplateStringParameterDeclarationOutput
	ToTemplateStringParameterDeclarationOutputWithContext(context.Context) TemplateStringParameterDeclarationOutput
}

type TemplateStringParameterDeclarationArgs struct {
	// The default values of a parameter. If the parameter is a single-value parameter, a maximum of one default value can be provided.
	DefaultValues           TemplateStringDefaultValuesPtrInput      `pulumi:"defaultValues"`
	MappedDataSetParameters TemplateMappedDataSetParameterArrayInput `pulumi:"mappedDataSetParameters"`
	// The name of the parameter that is being declared.
	Name pulumi.StringInput `pulumi:"name"`
	// The value type determines whether the parameter is a single-value or multi-value parameter.
	ParameterValueType TemplateParameterValueTypeInput `pulumi:"parameterValueType"`
	// The configuration that defines the default value of a `String` parameter when a value has not been set.
	ValueWhenUnset TemplateStringValueWhenUnsetConfigurationPtrInput `pulumi:"valueWhenUnset"`
}

func (TemplateStringParameterDeclarationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateStringParameterDeclaration)(nil)).Elem()
}

func (i TemplateStringParameterDeclarationArgs) ToTemplateStringParameterDeclarationOutput() TemplateStringParameterDeclarationOutput {
	return i.ToTemplateStringParameterDeclarationOutputWithContext(context.Background())
}

func (i TemplateStringParameterDeclarationArgs) ToTemplateStringParameterDeclarationOutputWithContext(ctx context.Context) TemplateStringParameterDeclarationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateStringParameterDeclarationOutput)
}

func (i TemplateStringParameterDeclarationArgs) ToTemplateStringParameterDeclarationPtrOutput() TemplateStringParameterDeclarationPtrOutput {
	return i.ToTemplateStringParameterDeclarationPtrOutputWithContext(context.Background())
}

func (i TemplateStringParameterDeclarationArgs) ToTemplateStringParameterDeclarationPtrOutputWithContext(ctx context.Context) TemplateStringParameterDeclarationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateStringParameterDeclarationOutput).ToTemplateStringParameterDeclarationPtrOutputWithContext(ctx)
}

// TemplateStringParameterDeclarationPtrInput is an input type that accepts TemplateStringParameterDeclarationArgs, TemplateStringParameterDeclarationPtr and TemplateStringParameterDeclarationPtrOutput values.
// You can construct a concrete instance of `TemplateStringParameterDeclarationPtrInput` via:
//
//	        TemplateStringParameterDeclarationArgs{...}
//
//	or:
//
//	        nil
type TemplateStringParameterDeclarationPtrInput interface {
	pulumi.Input

	ToTemplateStringParameterDeclarationPtrOutput() TemplateStringParameterDeclarationPtrOutput
	ToTemplateStringParameterDeclarationPtrOutputWithContext(context.Context) TemplateStringParameterDeclarationPtrOutput
}

type templateStringParameterDeclarationPtrType TemplateStringParameterDeclarationArgs

func TemplateStringParameterDeclarationPtr(v *TemplateStringParameterDeclarationArgs) TemplateStringParameterDeclarationPtrInput {
	return (*templateStringParameterDeclarationPtrType)(v)
}

func (*templateStringParameterDeclarationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateStringParameterDeclaration)(nil)).Elem()
}

func (i *templateStringParameterDeclarationPtrType) ToTemplateStringParameterDeclarationPtrOutput() TemplateStringParameterDeclarationPtrOutput {
	return i.ToTemplateStringParameterDeclarationPtrOutputWithContext(context.Background())
}

func (i *templateStringParameterDeclarationPtrType) ToTemplateStringParameterDeclarationPtrOutputWithContext(ctx context.Context) TemplateStringParameterDeclarationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateStringParameterDeclarationPtrOutput)
}

type TemplateStringParameterDeclarationOutput struct{ *pulumi.OutputState }

func (TemplateStringParameterDeclarationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateStringParameterDeclaration)(nil)).Elem()
}

func (o TemplateStringParameterDeclarationOutput) ToTemplateStringParameterDeclarationOutput() TemplateStringParameterDeclarationOutput {
	return o
}

func (o TemplateStringParameterDeclarationOutput) ToTemplateStringParameterDeclarationOutputWithContext(ctx context.Context) TemplateStringParameterDeclarationOutput {
	return o
}

func (o TemplateStringParameterDeclarationOutput) ToTemplateStringParameterDeclarationPtrOutput() TemplateStringParameterDeclarationPtrOutput {
	return o.ToTemplateStringParameterDeclarationPtrOutputWithContext(context.Background())
}

func (o TemplateStringParameterDeclarationOutput) ToTemplateStringParameterDeclarationPtrOutputWithContext(ctx context.Context) TemplateStringParameterDeclarationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateStringParameterDeclaration) *TemplateStringParameterDeclaration {
		return &v
	}).(TemplateStringParameterDeclarationPtrOutput)
}

// The default values of a parameter. If the parameter is a single-value parameter, a maximum of one default value can be provided.
func (o TemplateStringParameterDeclarationOutput) DefaultValues() TemplateStringDefaultValuesPtrOutput {
	return o.ApplyT(func(v TemplateStringParameterDeclaration) *TemplateStringDefaultValues { return v.DefaultValues }).(TemplateStringDefaultValuesPtrOutput)
}

func (o TemplateStringParameterDeclarationOutput) MappedDataSetParameters() TemplateMappedDataSetParameterArrayOutput {
	return o.ApplyT(func(v TemplateStringParameterDeclaration) []TemplateMappedDataSetParameter {
		return v.MappedDataSetParameters
	}).(TemplateMappedDataSetParameterArrayOutput)
}

// The name of the parameter that is being declared.
func (o TemplateStringParameterDeclarationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateStringParameterDeclaration) string { return v.Name }).(pulumi.StringOutput)
}

// The value type determines whether the parameter is a single-value or multi-value parameter.
func (o TemplateStringParameterDeclarationOutput) ParameterValueType() TemplateParameterValueTypeOutput {
	return o.ApplyT(func(v TemplateStringParameterDeclaration) TemplateParameterValueType { return v.ParameterValueType }).(TemplateParameterValueTypeOutput)
}

// The configuration that defines the default value of a `String` parameter when a value has not been set.
func (o TemplateStringParameterDeclarationOutput) ValueWhenUnset() TemplateStringValueWhenUnsetConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateStringParameterDeclaration) *TemplateStringValueWhenUnsetConfiguration {
		return v.ValueWhenUnset
	}).(TemplateStringValueWhenUnsetConfigurationPtrOutput)
}

type TemplateStringParameterDeclarationPtrOutput struct{ *pulumi.OutputState }

func (TemplateStringParameterDeclarationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateStringParameterDeclaration)(nil)).Elem()
}

func (o TemplateStringParameterDeclarationPtrOutput) ToTemplateStringParameterDeclarationPtrOutput() TemplateStringParameterDeclarationPtrOutput {
	return o
}

func (o TemplateStringParameterDeclarationPtrOutput) ToTemplateStringParameterDeclarationPtrOutputWithContext(ctx context.Context) TemplateStringParameterDeclarationPtrOutput {
	return o
}

func (o TemplateStringParameterDeclarationPtrOutput) Elem() TemplateStringParameterDeclarationOutput {
	return o.ApplyT(func(v *TemplateStringParameterDeclaration) TemplateStringParameterDeclaration {
		if v != nil {
			return *v
		}
		var ret TemplateStringParameterDeclaration
		return ret
	}).(TemplateStringParameterDeclarationOutput)
}

// The default values of a parameter. If the parameter is a single-value parameter, a maximum of one default value can be provided.
func (o TemplateStringParameterDeclarationPtrOutput) DefaultValues() TemplateStringDefaultValuesPtrOutput {
	return o.ApplyT(func(v *TemplateStringParameterDeclaration) *TemplateStringDefaultValues {
		if v == nil {
			return nil
		}
		return v.DefaultValues
	}).(TemplateStringDefaultValuesPtrOutput)
}

func (o TemplateStringParameterDeclarationPtrOutput) MappedDataSetParameters() TemplateMappedDataSetParameterArrayOutput {
	return o.ApplyT(func(v *TemplateStringParameterDeclaration) []TemplateMappedDataSetParameter {
		if v == nil {
			return nil
		}
		return v.MappedDataSetParameters
	}).(TemplateMappedDataSetParameterArrayOutput)
}

// The name of the parameter that is being declared.
func (o TemplateStringParameterDeclarationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateStringParameterDeclaration) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The value type determines whether the parameter is a single-value or multi-value parameter.
func (o TemplateStringParameterDeclarationPtrOutput) ParameterValueType() TemplateParameterValueTypePtrOutput {
	return o.ApplyT(func(v *TemplateStringParameterDeclaration) *TemplateParameterValueType {
		if v == nil {
			return nil
		}
		return &v.ParameterValueType
	}).(TemplateParameterValueTypePtrOutput)
}

// The configuration that defines the default value of a `String` parameter when a value has not been set.
func (o TemplateStringParameterDeclarationPtrOutput) ValueWhenUnset() TemplateStringValueWhenUnsetConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateStringParameterDeclaration) *TemplateStringValueWhenUnsetConfiguration {
		if v == nil {
			return nil
		}
		return v.ValueWhenUnset
	}).(TemplateStringValueWhenUnsetConfigurationPtrOutput)
}

type TemplateStringValueWhenUnsetConfiguration struct {
	// A custom value that's used when the value of a parameter isn't set.
	CustomValue *string `pulumi:"customValue"`
	// The built-in options for default values. The value can be one of the following:
	//
	// - `RECOMMENDED` : The recommended value.
	// - `NULL` : The `NULL` value.
	ValueWhenUnsetOption *TemplateValueWhenUnsetOption `pulumi:"valueWhenUnsetOption"`
}

// TemplateStringValueWhenUnsetConfigurationInput is an input type that accepts TemplateStringValueWhenUnsetConfigurationArgs and TemplateStringValueWhenUnsetConfigurationOutput values.
// You can construct a concrete instance of `TemplateStringValueWhenUnsetConfigurationInput` via:
//
//	TemplateStringValueWhenUnsetConfigurationArgs{...}
type TemplateStringValueWhenUnsetConfigurationInput interface {
	pulumi.Input

	ToTemplateStringValueWhenUnsetConfigurationOutput() TemplateStringValueWhenUnsetConfigurationOutput
	ToTemplateStringValueWhenUnsetConfigurationOutputWithContext(context.Context) TemplateStringValueWhenUnsetConfigurationOutput
}

type TemplateStringValueWhenUnsetConfigurationArgs struct {
	// A custom value that's used when the value of a parameter isn't set.
	CustomValue pulumi.StringPtrInput `pulumi:"customValue"`
	// The built-in options for default values. The value can be one of the following:
	//
	// - `RECOMMENDED` : The recommended value.
	// - `NULL` : The `NULL` value.
	ValueWhenUnsetOption TemplateValueWhenUnsetOptionPtrInput `pulumi:"valueWhenUnsetOption"`
}

func (TemplateStringValueWhenUnsetConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateStringValueWhenUnsetConfiguration)(nil)).Elem()
}

func (i TemplateStringValueWhenUnsetConfigurationArgs) ToTemplateStringValueWhenUnsetConfigurationOutput() TemplateStringValueWhenUnsetConfigurationOutput {
	return i.ToTemplateStringValueWhenUnsetConfigurationOutputWithContext(context.Background())
}

func (i TemplateStringValueWhenUnsetConfigurationArgs) ToTemplateStringValueWhenUnsetConfigurationOutputWithContext(ctx context.Context) TemplateStringValueWhenUnsetConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateStringValueWhenUnsetConfigurationOutput)
}

func (i TemplateStringValueWhenUnsetConfigurationArgs) ToTemplateStringValueWhenUnsetConfigurationPtrOutput() TemplateStringValueWhenUnsetConfigurationPtrOutput {
	return i.ToTemplateStringValueWhenUnsetConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateStringValueWhenUnsetConfigurationArgs) ToTemplateStringValueWhenUnsetConfigurationPtrOutputWithContext(ctx context.Context) TemplateStringValueWhenUnsetConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateStringValueWhenUnsetConfigurationOutput).ToTemplateStringValueWhenUnsetConfigurationPtrOutputWithContext(ctx)
}

// TemplateStringValueWhenUnsetConfigurationPtrInput is an input type that accepts TemplateStringValueWhenUnsetConfigurationArgs, TemplateStringValueWhenUnsetConfigurationPtr and TemplateStringValueWhenUnsetConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateStringValueWhenUnsetConfigurationPtrInput` via:
//
//	        TemplateStringValueWhenUnsetConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateStringValueWhenUnsetConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateStringValueWhenUnsetConfigurationPtrOutput() TemplateStringValueWhenUnsetConfigurationPtrOutput
	ToTemplateStringValueWhenUnsetConfigurationPtrOutputWithContext(context.Context) TemplateStringValueWhenUnsetConfigurationPtrOutput
}

type templateStringValueWhenUnsetConfigurationPtrType TemplateStringValueWhenUnsetConfigurationArgs

func TemplateStringValueWhenUnsetConfigurationPtr(v *TemplateStringValueWhenUnsetConfigurationArgs) TemplateStringValueWhenUnsetConfigurationPtrInput {
	return (*templateStringValueWhenUnsetConfigurationPtrType)(v)
}

func (*templateStringValueWhenUnsetConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateStringValueWhenUnsetConfiguration)(nil)).Elem()
}

func (i *templateStringValueWhenUnsetConfigurationPtrType) ToTemplateStringValueWhenUnsetConfigurationPtrOutput() TemplateStringValueWhenUnsetConfigurationPtrOutput {
	return i.ToTemplateStringValueWhenUnsetConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateStringValueWhenUnsetConfigurationPtrType) ToTemplateStringValueWhenUnsetConfigurationPtrOutputWithContext(ctx context.Context) TemplateStringValueWhenUnsetConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateStringValueWhenUnsetConfigurationPtrOutput)
}

type TemplateStringValueWhenUnsetConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateStringValueWhenUnsetConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateStringValueWhenUnsetConfiguration)(nil)).Elem()
}

func (o TemplateStringValueWhenUnsetConfigurationOutput) ToTemplateStringValueWhenUnsetConfigurationOutput() TemplateStringValueWhenUnsetConfigurationOutput {
	return o
}

func (o TemplateStringValueWhenUnsetConfigurationOutput) ToTemplateStringValueWhenUnsetConfigurationOutputWithContext(ctx context.Context) TemplateStringValueWhenUnsetConfigurationOutput {
	return o
}

func (o TemplateStringValueWhenUnsetConfigurationOutput) ToTemplateStringValueWhenUnsetConfigurationPtrOutput() TemplateStringValueWhenUnsetConfigurationPtrOutput {
	return o.ToTemplateStringValueWhenUnsetConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateStringValueWhenUnsetConfigurationOutput) ToTemplateStringValueWhenUnsetConfigurationPtrOutputWithContext(ctx context.Context) TemplateStringValueWhenUnsetConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateStringValueWhenUnsetConfiguration) *TemplateStringValueWhenUnsetConfiguration {
		return &v
	}).(TemplateStringValueWhenUnsetConfigurationPtrOutput)
}

// A custom value that's used when the value of a parameter isn't set.
func (o TemplateStringValueWhenUnsetConfigurationOutput) CustomValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateStringValueWhenUnsetConfiguration) *string { return v.CustomValue }).(pulumi.StringPtrOutput)
}

// The built-in options for default values. The value can be one of the following:
//
// - `RECOMMENDED` : The recommended value.
// - `NULL` : The `NULL` value.
func (o TemplateStringValueWhenUnsetConfigurationOutput) ValueWhenUnsetOption() TemplateValueWhenUnsetOptionPtrOutput {
	return o.ApplyT(func(v TemplateStringValueWhenUnsetConfiguration) *TemplateValueWhenUnsetOption {
		return v.ValueWhenUnsetOption
	}).(TemplateValueWhenUnsetOptionPtrOutput)
}

type TemplateStringValueWhenUnsetConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateStringValueWhenUnsetConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateStringValueWhenUnsetConfiguration)(nil)).Elem()
}

func (o TemplateStringValueWhenUnsetConfigurationPtrOutput) ToTemplateStringValueWhenUnsetConfigurationPtrOutput() TemplateStringValueWhenUnsetConfigurationPtrOutput {
	return o
}

func (o TemplateStringValueWhenUnsetConfigurationPtrOutput) ToTemplateStringValueWhenUnsetConfigurationPtrOutputWithContext(ctx context.Context) TemplateStringValueWhenUnsetConfigurationPtrOutput {
	return o
}

func (o TemplateStringValueWhenUnsetConfigurationPtrOutput) Elem() TemplateStringValueWhenUnsetConfigurationOutput {
	return o.ApplyT(func(v *TemplateStringValueWhenUnsetConfiguration) TemplateStringValueWhenUnsetConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateStringValueWhenUnsetConfiguration
		return ret
	}).(TemplateStringValueWhenUnsetConfigurationOutput)
}

// A custom value that's used when the value of a parameter isn't set.
func (o TemplateStringValueWhenUnsetConfigurationPtrOutput) CustomValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateStringValueWhenUnsetConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.CustomValue
	}).(pulumi.StringPtrOutput)
}

// The built-in options for default values. The value can be one of the following:
//
// - `RECOMMENDED` : The recommended value.
// - `NULL` : The `NULL` value.
func (o TemplateStringValueWhenUnsetConfigurationPtrOutput) ValueWhenUnsetOption() TemplateValueWhenUnsetOptionPtrOutput {
	return o.ApplyT(func(v *TemplateStringValueWhenUnsetConfiguration) *TemplateValueWhenUnsetOption {
		if v == nil {
			return nil
		}
		return v.ValueWhenUnsetOption
	}).(TemplateValueWhenUnsetOptionPtrOutput)
}

type TemplateSubtotalOptions struct {
	// The custom label string for the subtotal cells.
	CustomLabel *string `pulumi:"customLabel"`
	// The field level (all, custom, last) for the subtotal cells.
	FieldLevel *TemplatePivotTableSubtotalLevel `pulumi:"fieldLevel"`
	// The optional configuration of subtotal cells.
	FieldLevelOptions []TemplatePivotTableFieldSubtotalOptions `pulumi:"fieldLevelOptions"`
	// The cell styling options for the subtotals of header cells.
	MetricHeaderCellStyle *TemplateTableCellStyle `pulumi:"metricHeaderCellStyle"`
	// The style targets options for subtotals.
	StyleTargets []TemplateTableStyleTarget `pulumi:"styleTargets"`
	// The cell styling options for the subtotal cells.
	TotalCellStyle *TemplateTableCellStyle `pulumi:"totalCellStyle"`
	// The visibility configuration for the subtotal cells.
	TotalsVisibility interface{} `pulumi:"totalsVisibility"`
	// The cell styling options for the subtotals of value cells.
	ValueCellStyle *TemplateTableCellStyle `pulumi:"valueCellStyle"`
}

// TemplateSubtotalOptionsInput is an input type that accepts TemplateSubtotalOptionsArgs and TemplateSubtotalOptionsOutput values.
// You can construct a concrete instance of `TemplateSubtotalOptionsInput` via:
//
//	TemplateSubtotalOptionsArgs{...}
type TemplateSubtotalOptionsInput interface {
	pulumi.Input

	ToTemplateSubtotalOptionsOutput() TemplateSubtotalOptionsOutput
	ToTemplateSubtotalOptionsOutputWithContext(context.Context) TemplateSubtotalOptionsOutput
}

type TemplateSubtotalOptionsArgs struct {
	// The custom label string for the subtotal cells.
	CustomLabel pulumi.StringPtrInput `pulumi:"customLabel"`
	// The field level (all, custom, last) for the subtotal cells.
	FieldLevel TemplatePivotTableSubtotalLevelPtrInput `pulumi:"fieldLevel"`
	// The optional configuration of subtotal cells.
	FieldLevelOptions TemplatePivotTableFieldSubtotalOptionsArrayInput `pulumi:"fieldLevelOptions"`
	// The cell styling options for the subtotals of header cells.
	MetricHeaderCellStyle TemplateTableCellStylePtrInput `pulumi:"metricHeaderCellStyle"`
	// The style targets options for subtotals.
	StyleTargets TemplateTableStyleTargetArrayInput `pulumi:"styleTargets"`
	// The cell styling options for the subtotal cells.
	TotalCellStyle TemplateTableCellStylePtrInput `pulumi:"totalCellStyle"`
	// The visibility configuration for the subtotal cells.
	TotalsVisibility pulumi.Input `pulumi:"totalsVisibility"`
	// The cell styling options for the subtotals of value cells.
	ValueCellStyle TemplateTableCellStylePtrInput `pulumi:"valueCellStyle"`
}

func (TemplateSubtotalOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSubtotalOptions)(nil)).Elem()
}

func (i TemplateSubtotalOptionsArgs) ToTemplateSubtotalOptionsOutput() TemplateSubtotalOptionsOutput {
	return i.ToTemplateSubtotalOptionsOutputWithContext(context.Background())
}

func (i TemplateSubtotalOptionsArgs) ToTemplateSubtotalOptionsOutputWithContext(ctx context.Context) TemplateSubtotalOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSubtotalOptionsOutput)
}

func (i TemplateSubtotalOptionsArgs) ToTemplateSubtotalOptionsPtrOutput() TemplateSubtotalOptionsPtrOutput {
	return i.ToTemplateSubtotalOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateSubtotalOptionsArgs) ToTemplateSubtotalOptionsPtrOutputWithContext(ctx context.Context) TemplateSubtotalOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSubtotalOptionsOutput).ToTemplateSubtotalOptionsPtrOutputWithContext(ctx)
}

// TemplateSubtotalOptionsPtrInput is an input type that accepts TemplateSubtotalOptionsArgs, TemplateSubtotalOptionsPtr and TemplateSubtotalOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateSubtotalOptionsPtrInput` via:
//
//	        TemplateSubtotalOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateSubtotalOptionsPtrInput interface {
	pulumi.Input

	ToTemplateSubtotalOptionsPtrOutput() TemplateSubtotalOptionsPtrOutput
	ToTemplateSubtotalOptionsPtrOutputWithContext(context.Context) TemplateSubtotalOptionsPtrOutput
}

type templateSubtotalOptionsPtrType TemplateSubtotalOptionsArgs

func TemplateSubtotalOptionsPtr(v *TemplateSubtotalOptionsArgs) TemplateSubtotalOptionsPtrInput {
	return (*templateSubtotalOptionsPtrType)(v)
}

func (*templateSubtotalOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSubtotalOptions)(nil)).Elem()
}

func (i *templateSubtotalOptionsPtrType) ToTemplateSubtotalOptionsPtrOutput() TemplateSubtotalOptionsPtrOutput {
	return i.ToTemplateSubtotalOptionsPtrOutputWithContext(context.Background())
}

func (i *templateSubtotalOptionsPtrType) ToTemplateSubtotalOptionsPtrOutputWithContext(ctx context.Context) TemplateSubtotalOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSubtotalOptionsPtrOutput)
}

type TemplateSubtotalOptionsOutput struct{ *pulumi.OutputState }

func (TemplateSubtotalOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSubtotalOptions)(nil)).Elem()
}

func (o TemplateSubtotalOptionsOutput) ToTemplateSubtotalOptionsOutput() TemplateSubtotalOptionsOutput {
	return o
}

func (o TemplateSubtotalOptionsOutput) ToTemplateSubtotalOptionsOutputWithContext(ctx context.Context) TemplateSubtotalOptionsOutput {
	return o
}

func (o TemplateSubtotalOptionsOutput) ToTemplateSubtotalOptionsPtrOutput() TemplateSubtotalOptionsPtrOutput {
	return o.ToTemplateSubtotalOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateSubtotalOptionsOutput) ToTemplateSubtotalOptionsPtrOutputWithContext(ctx context.Context) TemplateSubtotalOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateSubtotalOptions) *TemplateSubtotalOptions {
		return &v
	}).(TemplateSubtotalOptionsPtrOutput)
}

// The custom label string for the subtotal cells.
func (o TemplateSubtotalOptionsOutput) CustomLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateSubtotalOptions) *string { return v.CustomLabel }).(pulumi.StringPtrOutput)
}

// The field level (all, custom, last) for the subtotal cells.
func (o TemplateSubtotalOptionsOutput) FieldLevel() TemplatePivotTableSubtotalLevelPtrOutput {
	return o.ApplyT(func(v TemplateSubtotalOptions) *TemplatePivotTableSubtotalLevel { return v.FieldLevel }).(TemplatePivotTableSubtotalLevelPtrOutput)
}

// The optional configuration of subtotal cells.
func (o TemplateSubtotalOptionsOutput) FieldLevelOptions() TemplatePivotTableFieldSubtotalOptionsArrayOutput {
	return o.ApplyT(func(v TemplateSubtotalOptions) []TemplatePivotTableFieldSubtotalOptions { return v.FieldLevelOptions }).(TemplatePivotTableFieldSubtotalOptionsArrayOutput)
}

// The cell styling options for the subtotals of header cells.
func (o TemplateSubtotalOptionsOutput) MetricHeaderCellStyle() TemplateTableCellStylePtrOutput {
	return o.ApplyT(func(v TemplateSubtotalOptions) *TemplateTableCellStyle { return v.MetricHeaderCellStyle }).(TemplateTableCellStylePtrOutput)
}

// The style targets options for subtotals.
func (o TemplateSubtotalOptionsOutput) StyleTargets() TemplateTableStyleTargetArrayOutput {
	return o.ApplyT(func(v TemplateSubtotalOptions) []TemplateTableStyleTarget { return v.StyleTargets }).(TemplateTableStyleTargetArrayOutput)
}

// The cell styling options for the subtotal cells.
func (o TemplateSubtotalOptionsOutput) TotalCellStyle() TemplateTableCellStylePtrOutput {
	return o.ApplyT(func(v TemplateSubtotalOptions) *TemplateTableCellStyle { return v.TotalCellStyle }).(TemplateTableCellStylePtrOutput)
}

// The visibility configuration for the subtotal cells.
func (o TemplateSubtotalOptionsOutput) TotalsVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateSubtotalOptions) interface{} { return v.TotalsVisibility }).(pulumi.AnyOutput)
}

// The cell styling options for the subtotals of value cells.
func (o TemplateSubtotalOptionsOutput) ValueCellStyle() TemplateTableCellStylePtrOutput {
	return o.ApplyT(func(v TemplateSubtotalOptions) *TemplateTableCellStyle { return v.ValueCellStyle }).(TemplateTableCellStylePtrOutput)
}

type TemplateSubtotalOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateSubtotalOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateSubtotalOptions)(nil)).Elem()
}

func (o TemplateSubtotalOptionsPtrOutput) ToTemplateSubtotalOptionsPtrOutput() TemplateSubtotalOptionsPtrOutput {
	return o
}

func (o TemplateSubtotalOptionsPtrOutput) ToTemplateSubtotalOptionsPtrOutputWithContext(ctx context.Context) TemplateSubtotalOptionsPtrOutput {
	return o
}

func (o TemplateSubtotalOptionsPtrOutput) Elem() TemplateSubtotalOptionsOutput {
	return o.ApplyT(func(v *TemplateSubtotalOptions) TemplateSubtotalOptions {
		if v != nil {
			return *v
		}
		var ret TemplateSubtotalOptions
		return ret
	}).(TemplateSubtotalOptionsOutput)
}

// The custom label string for the subtotal cells.
func (o TemplateSubtotalOptionsPtrOutput) CustomLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateSubtotalOptions) *string {
		if v == nil {
			return nil
		}
		return v.CustomLabel
	}).(pulumi.StringPtrOutput)
}

// The field level (all, custom, last) for the subtotal cells.
func (o TemplateSubtotalOptionsPtrOutput) FieldLevel() TemplatePivotTableSubtotalLevelPtrOutput {
	return o.ApplyT(func(v *TemplateSubtotalOptions) *TemplatePivotTableSubtotalLevel {
		if v == nil {
			return nil
		}
		return v.FieldLevel
	}).(TemplatePivotTableSubtotalLevelPtrOutput)
}

// The optional configuration of subtotal cells.
func (o TemplateSubtotalOptionsPtrOutput) FieldLevelOptions() TemplatePivotTableFieldSubtotalOptionsArrayOutput {
	return o.ApplyT(func(v *TemplateSubtotalOptions) []TemplatePivotTableFieldSubtotalOptions {
		if v == nil {
			return nil
		}
		return v.FieldLevelOptions
	}).(TemplatePivotTableFieldSubtotalOptionsArrayOutput)
}

// The cell styling options for the subtotals of header cells.
func (o TemplateSubtotalOptionsPtrOutput) MetricHeaderCellStyle() TemplateTableCellStylePtrOutput {
	return o.ApplyT(func(v *TemplateSubtotalOptions) *TemplateTableCellStyle {
		if v == nil {
			return nil
		}
		return v.MetricHeaderCellStyle
	}).(TemplateTableCellStylePtrOutput)
}

// The style targets options for subtotals.
func (o TemplateSubtotalOptionsPtrOutput) StyleTargets() TemplateTableStyleTargetArrayOutput {
	return o.ApplyT(func(v *TemplateSubtotalOptions) []TemplateTableStyleTarget {
		if v == nil {
			return nil
		}
		return v.StyleTargets
	}).(TemplateTableStyleTargetArrayOutput)
}

// The cell styling options for the subtotal cells.
func (o TemplateSubtotalOptionsPtrOutput) TotalCellStyle() TemplateTableCellStylePtrOutput {
	return o.ApplyT(func(v *TemplateSubtotalOptions) *TemplateTableCellStyle {
		if v == nil {
			return nil
		}
		return v.TotalCellStyle
	}).(TemplateTableCellStylePtrOutput)
}

// The visibility configuration for the subtotal cells.
func (o TemplateSubtotalOptionsPtrOutput) TotalsVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateSubtotalOptions) interface{} {
		if v == nil {
			return nil
		}
		return v.TotalsVisibility
	}).(pulumi.AnyOutput)
}

// The cell styling options for the subtotals of value cells.
func (o TemplateSubtotalOptionsPtrOutput) ValueCellStyle() TemplateTableCellStylePtrOutput {
	return o.ApplyT(func(v *TemplateSubtotalOptions) *TemplateTableCellStyle {
		if v == nil {
			return nil
		}
		return v.ValueCellStyle
	}).(TemplateTableCellStylePtrOutput)
}

type TemplateTableAggregatedFieldWells struct {
	// The group by field well for a pivot table. Values are grouped by group by fields.
	GroupBy []TemplateDimensionField `pulumi:"groupBy"`
	// The values field well for a pivot table. Values are aggregated based on group by fields.
	Values []TemplateMeasureField `pulumi:"values"`
}

// TemplateTableAggregatedFieldWellsInput is an input type that accepts TemplateTableAggregatedFieldWellsArgs and TemplateTableAggregatedFieldWellsOutput values.
// You can construct a concrete instance of `TemplateTableAggregatedFieldWellsInput` via:
//
//	TemplateTableAggregatedFieldWellsArgs{...}
type TemplateTableAggregatedFieldWellsInput interface {
	pulumi.Input

	ToTemplateTableAggregatedFieldWellsOutput() TemplateTableAggregatedFieldWellsOutput
	ToTemplateTableAggregatedFieldWellsOutputWithContext(context.Context) TemplateTableAggregatedFieldWellsOutput
}

type TemplateTableAggregatedFieldWellsArgs struct {
	// The group by field well for a pivot table. Values are grouped by group by fields.
	GroupBy TemplateDimensionFieldArrayInput `pulumi:"groupBy"`
	// The values field well for a pivot table. Values are aggregated based on group by fields.
	Values TemplateMeasureFieldArrayInput `pulumi:"values"`
}

func (TemplateTableAggregatedFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableAggregatedFieldWells)(nil)).Elem()
}

func (i TemplateTableAggregatedFieldWellsArgs) ToTemplateTableAggregatedFieldWellsOutput() TemplateTableAggregatedFieldWellsOutput {
	return i.ToTemplateTableAggregatedFieldWellsOutputWithContext(context.Background())
}

func (i TemplateTableAggregatedFieldWellsArgs) ToTemplateTableAggregatedFieldWellsOutputWithContext(ctx context.Context) TemplateTableAggregatedFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableAggregatedFieldWellsOutput)
}

func (i TemplateTableAggregatedFieldWellsArgs) ToTemplateTableAggregatedFieldWellsPtrOutput() TemplateTableAggregatedFieldWellsPtrOutput {
	return i.ToTemplateTableAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i TemplateTableAggregatedFieldWellsArgs) ToTemplateTableAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateTableAggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableAggregatedFieldWellsOutput).ToTemplateTableAggregatedFieldWellsPtrOutputWithContext(ctx)
}

// TemplateTableAggregatedFieldWellsPtrInput is an input type that accepts TemplateTableAggregatedFieldWellsArgs, TemplateTableAggregatedFieldWellsPtr and TemplateTableAggregatedFieldWellsPtrOutput values.
// You can construct a concrete instance of `TemplateTableAggregatedFieldWellsPtrInput` via:
//
//	        TemplateTableAggregatedFieldWellsArgs{...}
//
//	or:
//
//	        nil
type TemplateTableAggregatedFieldWellsPtrInput interface {
	pulumi.Input

	ToTemplateTableAggregatedFieldWellsPtrOutput() TemplateTableAggregatedFieldWellsPtrOutput
	ToTemplateTableAggregatedFieldWellsPtrOutputWithContext(context.Context) TemplateTableAggregatedFieldWellsPtrOutput
}

type templateTableAggregatedFieldWellsPtrType TemplateTableAggregatedFieldWellsArgs

func TemplateTableAggregatedFieldWellsPtr(v *TemplateTableAggregatedFieldWellsArgs) TemplateTableAggregatedFieldWellsPtrInput {
	return (*templateTableAggregatedFieldWellsPtrType)(v)
}

func (*templateTableAggregatedFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableAggregatedFieldWells)(nil)).Elem()
}

func (i *templateTableAggregatedFieldWellsPtrType) ToTemplateTableAggregatedFieldWellsPtrOutput() TemplateTableAggregatedFieldWellsPtrOutput {
	return i.ToTemplateTableAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i *templateTableAggregatedFieldWellsPtrType) ToTemplateTableAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateTableAggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableAggregatedFieldWellsPtrOutput)
}

type TemplateTableAggregatedFieldWellsOutput struct{ *pulumi.OutputState }

func (TemplateTableAggregatedFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableAggregatedFieldWells)(nil)).Elem()
}

func (o TemplateTableAggregatedFieldWellsOutput) ToTemplateTableAggregatedFieldWellsOutput() TemplateTableAggregatedFieldWellsOutput {
	return o
}

func (o TemplateTableAggregatedFieldWellsOutput) ToTemplateTableAggregatedFieldWellsOutputWithContext(ctx context.Context) TemplateTableAggregatedFieldWellsOutput {
	return o
}

func (o TemplateTableAggregatedFieldWellsOutput) ToTemplateTableAggregatedFieldWellsPtrOutput() TemplateTableAggregatedFieldWellsPtrOutput {
	return o.ToTemplateTableAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (o TemplateTableAggregatedFieldWellsOutput) ToTemplateTableAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateTableAggregatedFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTableAggregatedFieldWells) *TemplateTableAggregatedFieldWells {
		return &v
	}).(TemplateTableAggregatedFieldWellsPtrOutput)
}

// The group by field well for a pivot table. Values are grouped by group by fields.
func (o TemplateTableAggregatedFieldWellsOutput) GroupBy() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v TemplateTableAggregatedFieldWells) []TemplateDimensionField { return v.GroupBy }).(TemplateDimensionFieldArrayOutput)
}

// The values field well for a pivot table. Values are aggregated based on group by fields.
func (o TemplateTableAggregatedFieldWellsOutput) Values() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v TemplateTableAggregatedFieldWells) []TemplateMeasureField { return v.Values }).(TemplateMeasureFieldArrayOutput)
}

type TemplateTableAggregatedFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (TemplateTableAggregatedFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableAggregatedFieldWells)(nil)).Elem()
}

func (o TemplateTableAggregatedFieldWellsPtrOutput) ToTemplateTableAggregatedFieldWellsPtrOutput() TemplateTableAggregatedFieldWellsPtrOutput {
	return o
}

func (o TemplateTableAggregatedFieldWellsPtrOutput) ToTemplateTableAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateTableAggregatedFieldWellsPtrOutput {
	return o
}

func (o TemplateTableAggregatedFieldWellsPtrOutput) Elem() TemplateTableAggregatedFieldWellsOutput {
	return o.ApplyT(func(v *TemplateTableAggregatedFieldWells) TemplateTableAggregatedFieldWells {
		if v != nil {
			return *v
		}
		var ret TemplateTableAggregatedFieldWells
		return ret
	}).(TemplateTableAggregatedFieldWellsOutput)
}

// The group by field well for a pivot table. Values are grouped by group by fields.
func (o TemplateTableAggregatedFieldWellsPtrOutput) GroupBy() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v *TemplateTableAggregatedFieldWells) []TemplateDimensionField {
		if v == nil {
			return nil
		}
		return v.GroupBy
	}).(TemplateDimensionFieldArrayOutput)
}

// The values field well for a pivot table. Values are aggregated based on group by fields.
func (o TemplateTableAggregatedFieldWellsPtrOutput) Values() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v *TemplateTableAggregatedFieldWells) []TemplateMeasureField {
		if v == nil {
			return nil
		}
		return v.Values
	}).(TemplateMeasureFieldArrayOutput)
}

type TemplateTableBorderOptions struct {
	// The color of a table border.
	Color *string `pulumi:"color"`
	// The style (none, solid) of a table border.
	Style *TemplateTableBorderStyle `pulumi:"style"`
	// The thickness of a table border.
	Thickness *float64 `pulumi:"thickness"`
}

// TemplateTableBorderOptionsInput is an input type that accepts TemplateTableBorderOptionsArgs and TemplateTableBorderOptionsOutput values.
// You can construct a concrete instance of `TemplateTableBorderOptionsInput` via:
//
//	TemplateTableBorderOptionsArgs{...}
type TemplateTableBorderOptionsInput interface {
	pulumi.Input

	ToTemplateTableBorderOptionsOutput() TemplateTableBorderOptionsOutput
	ToTemplateTableBorderOptionsOutputWithContext(context.Context) TemplateTableBorderOptionsOutput
}

type TemplateTableBorderOptionsArgs struct {
	// The color of a table border.
	Color pulumi.StringPtrInput `pulumi:"color"`
	// The style (none, solid) of a table border.
	Style TemplateTableBorderStylePtrInput `pulumi:"style"`
	// The thickness of a table border.
	Thickness pulumi.Float64PtrInput `pulumi:"thickness"`
}

func (TemplateTableBorderOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableBorderOptions)(nil)).Elem()
}

func (i TemplateTableBorderOptionsArgs) ToTemplateTableBorderOptionsOutput() TemplateTableBorderOptionsOutput {
	return i.ToTemplateTableBorderOptionsOutputWithContext(context.Background())
}

func (i TemplateTableBorderOptionsArgs) ToTemplateTableBorderOptionsOutputWithContext(ctx context.Context) TemplateTableBorderOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableBorderOptionsOutput)
}

func (i TemplateTableBorderOptionsArgs) ToTemplateTableBorderOptionsPtrOutput() TemplateTableBorderOptionsPtrOutput {
	return i.ToTemplateTableBorderOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateTableBorderOptionsArgs) ToTemplateTableBorderOptionsPtrOutputWithContext(ctx context.Context) TemplateTableBorderOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableBorderOptionsOutput).ToTemplateTableBorderOptionsPtrOutputWithContext(ctx)
}

// TemplateTableBorderOptionsPtrInput is an input type that accepts TemplateTableBorderOptionsArgs, TemplateTableBorderOptionsPtr and TemplateTableBorderOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateTableBorderOptionsPtrInput` via:
//
//	        TemplateTableBorderOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateTableBorderOptionsPtrInput interface {
	pulumi.Input

	ToTemplateTableBorderOptionsPtrOutput() TemplateTableBorderOptionsPtrOutput
	ToTemplateTableBorderOptionsPtrOutputWithContext(context.Context) TemplateTableBorderOptionsPtrOutput
}

type templateTableBorderOptionsPtrType TemplateTableBorderOptionsArgs

func TemplateTableBorderOptionsPtr(v *TemplateTableBorderOptionsArgs) TemplateTableBorderOptionsPtrInput {
	return (*templateTableBorderOptionsPtrType)(v)
}

func (*templateTableBorderOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableBorderOptions)(nil)).Elem()
}

func (i *templateTableBorderOptionsPtrType) ToTemplateTableBorderOptionsPtrOutput() TemplateTableBorderOptionsPtrOutput {
	return i.ToTemplateTableBorderOptionsPtrOutputWithContext(context.Background())
}

func (i *templateTableBorderOptionsPtrType) ToTemplateTableBorderOptionsPtrOutputWithContext(ctx context.Context) TemplateTableBorderOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableBorderOptionsPtrOutput)
}

type TemplateTableBorderOptionsOutput struct{ *pulumi.OutputState }

func (TemplateTableBorderOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableBorderOptions)(nil)).Elem()
}

func (o TemplateTableBorderOptionsOutput) ToTemplateTableBorderOptionsOutput() TemplateTableBorderOptionsOutput {
	return o
}

func (o TemplateTableBorderOptionsOutput) ToTemplateTableBorderOptionsOutputWithContext(ctx context.Context) TemplateTableBorderOptionsOutput {
	return o
}

func (o TemplateTableBorderOptionsOutput) ToTemplateTableBorderOptionsPtrOutput() TemplateTableBorderOptionsPtrOutput {
	return o.ToTemplateTableBorderOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateTableBorderOptionsOutput) ToTemplateTableBorderOptionsPtrOutputWithContext(ctx context.Context) TemplateTableBorderOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTableBorderOptions) *TemplateTableBorderOptions {
		return &v
	}).(TemplateTableBorderOptionsPtrOutput)
}

// The color of a table border.
func (o TemplateTableBorderOptionsOutput) Color() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateTableBorderOptions) *string { return v.Color }).(pulumi.StringPtrOutput)
}

// The style (none, solid) of a table border.
func (o TemplateTableBorderOptionsOutput) Style() TemplateTableBorderStylePtrOutput {
	return o.ApplyT(func(v TemplateTableBorderOptions) *TemplateTableBorderStyle { return v.Style }).(TemplateTableBorderStylePtrOutput)
}

// The thickness of a table border.
func (o TemplateTableBorderOptionsOutput) Thickness() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateTableBorderOptions) *float64 { return v.Thickness }).(pulumi.Float64PtrOutput)
}

type TemplateTableBorderOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateTableBorderOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableBorderOptions)(nil)).Elem()
}

func (o TemplateTableBorderOptionsPtrOutput) ToTemplateTableBorderOptionsPtrOutput() TemplateTableBorderOptionsPtrOutput {
	return o
}

func (o TemplateTableBorderOptionsPtrOutput) ToTemplateTableBorderOptionsPtrOutputWithContext(ctx context.Context) TemplateTableBorderOptionsPtrOutput {
	return o
}

func (o TemplateTableBorderOptionsPtrOutput) Elem() TemplateTableBorderOptionsOutput {
	return o.ApplyT(func(v *TemplateTableBorderOptions) TemplateTableBorderOptions {
		if v != nil {
			return *v
		}
		var ret TemplateTableBorderOptions
		return ret
	}).(TemplateTableBorderOptionsOutput)
}

// The color of a table border.
func (o TemplateTableBorderOptionsPtrOutput) Color() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateTableBorderOptions) *string {
		if v == nil {
			return nil
		}
		return v.Color
	}).(pulumi.StringPtrOutput)
}

// The style (none, solid) of a table border.
func (o TemplateTableBorderOptionsPtrOutput) Style() TemplateTableBorderStylePtrOutput {
	return o.ApplyT(func(v *TemplateTableBorderOptions) *TemplateTableBorderStyle {
		if v == nil {
			return nil
		}
		return v.Style
	}).(TemplateTableBorderStylePtrOutput)
}

// The thickness of a table border.
func (o TemplateTableBorderOptionsPtrOutput) Thickness() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateTableBorderOptions) *float64 {
		if v == nil {
			return nil
		}
		return v.Thickness
	}).(pulumi.Float64PtrOutput)
}

type TemplateTableCellConditionalFormatting struct {
	// The field ID of the cell for conditional formatting.
	FieldId string `pulumi:"fieldId"`
	// The text format of the cell for conditional formatting.
	TextFormat *TemplateTextConditionalFormat `pulumi:"textFormat"`
}

// TemplateTableCellConditionalFormattingInput is an input type that accepts TemplateTableCellConditionalFormattingArgs and TemplateTableCellConditionalFormattingOutput values.
// You can construct a concrete instance of `TemplateTableCellConditionalFormattingInput` via:
//
//	TemplateTableCellConditionalFormattingArgs{...}
type TemplateTableCellConditionalFormattingInput interface {
	pulumi.Input

	ToTemplateTableCellConditionalFormattingOutput() TemplateTableCellConditionalFormattingOutput
	ToTemplateTableCellConditionalFormattingOutputWithContext(context.Context) TemplateTableCellConditionalFormattingOutput
}

type TemplateTableCellConditionalFormattingArgs struct {
	// The field ID of the cell for conditional formatting.
	FieldId pulumi.StringInput `pulumi:"fieldId"`
	// The text format of the cell for conditional formatting.
	TextFormat TemplateTextConditionalFormatPtrInput `pulumi:"textFormat"`
}

func (TemplateTableCellConditionalFormattingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableCellConditionalFormatting)(nil)).Elem()
}

func (i TemplateTableCellConditionalFormattingArgs) ToTemplateTableCellConditionalFormattingOutput() TemplateTableCellConditionalFormattingOutput {
	return i.ToTemplateTableCellConditionalFormattingOutputWithContext(context.Background())
}

func (i TemplateTableCellConditionalFormattingArgs) ToTemplateTableCellConditionalFormattingOutputWithContext(ctx context.Context) TemplateTableCellConditionalFormattingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableCellConditionalFormattingOutput)
}

func (i TemplateTableCellConditionalFormattingArgs) ToTemplateTableCellConditionalFormattingPtrOutput() TemplateTableCellConditionalFormattingPtrOutput {
	return i.ToTemplateTableCellConditionalFormattingPtrOutputWithContext(context.Background())
}

func (i TemplateTableCellConditionalFormattingArgs) ToTemplateTableCellConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplateTableCellConditionalFormattingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableCellConditionalFormattingOutput).ToTemplateTableCellConditionalFormattingPtrOutputWithContext(ctx)
}

// TemplateTableCellConditionalFormattingPtrInput is an input type that accepts TemplateTableCellConditionalFormattingArgs, TemplateTableCellConditionalFormattingPtr and TemplateTableCellConditionalFormattingPtrOutput values.
// You can construct a concrete instance of `TemplateTableCellConditionalFormattingPtrInput` via:
//
//	        TemplateTableCellConditionalFormattingArgs{...}
//
//	or:
//
//	        nil
type TemplateTableCellConditionalFormattingPtrInput interface {
	pulumi.Input

	ToTemplateTableCellConditionalFormattingPtrOutput() TemplateTableCellConditionalFormattingPtrOutput
	ToTemplateTableCellConditionalFormattingPtrOutputWithContext(context.Context) TemplateTableCellConditionalFormattingPtrOutput
}

type templateTableCellConditionalFormattingPtrType TemplateTableCellConditionalFormattingArgs

func TemplateTableCellConditionalFormattingPtr(v *TemplateTableCellConditionalFormattingArgs) TemplateTableCellConditionalFormattingPtrInput {
	return (*templateTableCellConditionalFormattingPtrType)(v)
}

func (*templateTableCellConditionalFormattingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableCellConditionalFormatting)(nil)).Elem()
}

func (i *templateTableCellConditionalFormattingPtrType) ToTemplateTableCellConditionalFormattingPtrOutput() TemplateTableCellConditionalFormattingPtrOutput {
	return i.ToTemplateTableCellConditionalFormattingPtrOutputWithContext(context.Background())
}

func (i *templateTableCellConditionalFormattingPtrType) ToTemplateTableCellConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplateTableCellConditionalFormattingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableCellConditionalFormattingPtrOutput)
}

type TemplateTableCellConditionalFormattingOutput struct{ *pulumi.OutputState }

func (TemplateTableCellConditionalFormattingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableCellConditionalFormatting)(nil)).Elem()
}

func (o TemplateTableCellConditionalFormattingOutput) ToTemplateTableCellConditionalFormattingOutput() TemplateTableCellConditionalFormattingOutput {
	return o
}

func (o TemplateTableCellConditionalFormattingOutput) ToTemplateTableCellConditionalFormattingOutputWithContext(ctx context.Context) TemplateTableCellConditionalFormattingOutput {
	return o
}

func (o TemplateTableCellConditionalFormattingOutput) ToTemplateTableCellConditionalFormattingPtrOutput() TemplateTableCellConditionalFormattingPtrOutput {
	return o.ToTemplateTableCellConditionalFormattingPtrOutputWithContext(context.Background())
}

func (o TemplateTableCellConditionalFormattingOutput) ToTemplateTableCellConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplateTableCellConditionalFormattingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTableCellConditionalFormatting) *TemplateTableCellConditionalFormatting {
		return &v
	}).(TemplateTableCellConditionalFormattingPtrOutput)
}

// The field ID of the cell for conditional formatting.
func (o TemplateTableCellConditionalFormattingOutput) FieldId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateTableCellConditionalFormatting) string { return v.FieldId }).(pulumi.StringOutput)
}

// The text format of the cell for conditional formatting.
func (o TemplateTableCellConditionalFormattingOutput) TextFormat() TemplateTextConditionalFormatPtrOutput {
	return o.ApplyT(func(v TemplateTableCellConditionalFormatting) *TemplateTextConditionalFormat { return v.TextFormat }).(TemplateTextConditionalFormatPtrOutput)
}

type TemplateTableCellConditionalFormattingPtrOutput struct{ *pulumi.OutputState }

func (TemplateTableCellConditionalFormattingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableCellConditionalFormatting)(nil)).Elem()
}

func (o TemplateTableCellConditionalFormattingPtrOutput) ToTemplateTableCellConditionalFormattingPtrOutput() TemplateTableCellConditionalFormattingPtrOutput {
	return o
}

func (o TemplateTableCellConditionalFormattingPtrOutput) ToTemplateTableCellConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplateTableCellConditionalFormattingPtrOutput {
	return o
}

func (o TemplateTableCellConditionalFormattingPtrOutput) Elem() TemplateTableCellConditionalFormattingOutput {
	return o.ApplyT(func(v *TemplateTableCellConditionalFormatting) TemplateTableCellConditionalFormatting {
		if v != nil {
			return *v
		}
		var ret TemplateTableCellConditionalFormatting
		return ret
	}).(TemplateTableCellConditionalFormattingOutput)
}

// The field ID of the cell for conditional formatting.
func (o TemplateTableCellConditionalFormattingPtrOutput) FieldId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateTableCellConditionalFormatting) *string {
		if v == nil {
			return nil
		}
		return &v.FieldId
	}).(pulumi.StringPtrOutput)
}

// The text format of the cell for conditional formatting.
func (o TemplateTableCellConditionalFormattingPtrOutput) TextFormat() TemplateTextConditionalFormatPtrOutput {
	return o.ApplyT(func(v *TemplateTableCellConditionalFormatting) *TemplateTextConditionalFormat {
		if v == nil {
			return nil
		}
		return v.TextFormat
	}).(TemplateTextConditionalFormatPtrOutput)
}

type TemplateTableCellImageSizingConfiguration struct {
	// The cell scaling configuration of the sizing options for the table image configuration.
	TableCellImageScalingConfiguration *TemplateTableCellImageScalingConfiguration `pulumi:"tableCellImageScalingConfiguration"`
}

// TemplateTableCellImageSizingConfigurationInput is an input type that accepts TemplateTableCellImageSizingConfigurationArgs and TemplateTableCellImageSizingConfigurationOutput values.
// You can construct a concrete instance of `TemplateTableCellImageSizingConfigurationInput` via:
//
//	TemplateTableCellImageSizingConfigurationArgs{...}
type TemplateTableCellImageSizingConfigurationInput interface {
	pulumi.Input

	ToTemplateTableCellImageSizingConfigurationOutput() TemplateTableCellImageSizingConfigurationOutput
	ToTemplateTableCellImageSizingConfigurationOutputWithContext(context.Context) TemplateTableCellImageSizingConfigurationOutput
}

type TemplateTableCellImageSizingConfigurationArgs struct {
	// The cell scaling configuration of the sizing options for the table image configuration.
	TableCellImageScalingConfiguration TemplateTableCellImageScalingConfigurationPtrInput `pulumi:"tableCellImageScalingConfiguration"`
}

func (TemplateTableCellImageSizingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableCellImageSizingConfiguration)(nil)).Elem()
}

func (i TemplateTableCellImageSizingConfigurationArgs) ToTemplateTableCellImageSizingConfigurationOutput() TemplateTableCellImageSizingConfigurationOutput {
	return i.ToTemplateTableCellImageSizingConfigurationOutputWithContext(context.Background())
}

func (i TemplateTableCellImageSizingConfigurationArgs) ToTemplateTableCellImageSizingConfigurationOutputWithContext(ctx context.Context) TemplateTableCellImageSizingConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableCellImageSizingConfigurationOutput)
}

func (i TemplateTableCellImageSizingConfigurationArgs) ToTemplateTableCellImageSizingConfigurationPtrOutput() TemplateTableCellImageSizingConfigurationPtrOutput {
	return i.ToTemplateTableCellImageSizingConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateTableCellImageSizingConfigurationArgs) ToTemplateTableCellImageSizingConfigurationPtrOutputWithContext(ctx context.Context) TemplateTableCellImageSizingConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableCellImageSizingConfigurationOutput).ToTemplateTableCellImageSizingConfigurationPtrOutputWithContext(ctx)
}

// TemplateTableCellImageSizingConfigurationPtrInput is an input type that accepts TemplateTableCellImageSizingConfigurationArgs, TemplateTableCellImageSizingConfigurationPtr and TemplateTableCellImageSizingConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateTableCellImageSizingConfigurationPtrInput` via:
//
//	        TemplateTableCellImageSizingConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateTableCellImageSizingConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateTableCellImageSizingConfigurationPtrOutput() TemplateTableCellImageSizingConfigurationPtrOutput
	ToTemplateTableCellImageSizingConfigurationPtrOutputWithContext(context.Context) TemplateTableCellImageSizingConfigurationPtrOutput
}

type templateTableCellImageSizingConfigurationPtrType TemplateTableCellImageSizingConfigurationArgs

func TemplateTableCellImageSizingConfigurationPtr(v *TemplateTableCellImageSizingConfigurationArgs) TemplateTableCellImageSizingConfigurationPtrInput {
	return (*templateTableCellImageSizingConfigurationPtrType)(v)
}

func (*templateTableCellImageSizingConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableCellImageSizingConfiguration)(nil)).Elem()
}

func (i *templateTableCellImageSizingConfigurationPtrType) ToTemplateTableCellImageSizingConfigurationPtrOutput() TemplateTableCellImageSizingConfigurationPtrOutput {
	return i.ToTemplateTableCellImageSizingConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateTableCellImageSizingConfigurationPtrType) ToTemplateTableCellImageSizingConfigurationPtrOutputWithContext(ctx context.Context) TemplateTableCellImageSizingConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableCellImageSizingConfigurationPtrOutput)
}

type TemplateTableCellImageSizingConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateTableCellImageSizingConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableCellImageSizingConfiguration)(nil)).Elem()
}

func (o TemplateTableCellImageSizingConfigurationOutput) ToTemplateTableCellImageSizingConfigurationOutput() TemplateTableCellImageSizingConfigurationOutput {
	return o
}

func (o TemplateTableCellImageSizingConfigurationOutput) ToTemplateTableCellImageSizingConfigurationOutputWithContext(ctx context.Context) TemplateTableCellImageSizingConfigurationOutput {
	return o
}

func (o TemplateTableCellImageSizingConfigurationOutput) ToTemplateTableCellImageSizingConfigurationPtrOutput() TemplateTableCellImageSizingConfigurationPtrOutput {
	return o.ToTemplateTableCellImageSizingConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateTableCellImageSizingConfigurationOutput) ToTemplateTableCellImageSizingConfigurationPtrOutputWithContext(ctx context.Context) TemplateTableCellImageSizingConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTableCellImageSizingConfiguration) *TemplateTableCellImageSizingConfiguration {
		return &v
	}).(TemplateTableCellImageSizingConfigurationPtrOutput)
}

// The cell scaling configuration of the sizing options for the table image configuration.
func (o TemplateTableCellImageSizingConfigurationOutput) TableCellImageScalingConfiguration() TemplateTableCellImageScalingConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateTableCellImageSizingConfiguration) *TemplateTableCellImageScalingConfiguration {
		return v.TableCellImageScalingConfiguration
	}).(TemplateTableCellImageScalingConfigurationPtrOutput)
}

type TemplateTableCellImageSizingConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateTableCellImageSizingConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableCellImageSizingConfiguration)(nil)).Elem()
}

func (o TemplateTableCellImageSizingConfigurationPtrOutput) ToTemplateTableCellImageSizingConfigurationPtrOutput() TemplateTableCellImageSizingConfigurationPtrOutput {
	return o
}

func (o TemplateTableCellImageSizingConfigurationPtrOutput) ToTemplateTableCellImageSizingConfigurationPtrOutputWithContext(ctx context.Context) TemplateTableCellImageSizingConfigurationPtrOutput {
	return o
}

func (o TemplateTableCellImageSizingConfigurationPtrOutput) Elem() TemplateTableCellImageSizingConfigurationOutput {
	return o.ApplyT(func(v *TemplateTableCellImageSizingConfiguration) TemplateTableCellImageSizingConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateTableCellImageSizingConfiguration
		return ret
	}).(TemplateTableCellImageSizingConfigurationOutput)
}

// The cell scaling configuration of the sizing options for the table image configuration.
func (o TemplateTableCellImageSizingConfigurationPtrOutput) TableCellImageScalingConfiguration() TemplateTableCellImageScalingConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateTableCellImageSizingConfiguration) *TemplateTableCellImageScalingConfiguration {
		if v == nil {
			return nil
		}
		return v.TableCellImageScalingConfiguration
	}).(TemplateTableCellImageScalingConfigurationPtrOutput)
}

type TemplateTableCellStyle struct {
	// The background color for the table cells.
	BackgroundColor *string `pulumi:"backgroundColor"`
	// The borders for the table cells.
	Border *TemplateGlobalTableBorderOptions `pulumi:"border"`
	// The font configuration of the table cells.
	FontConfiguration *TemplateFontConfiguration `pulumi:"fontConfiguration"`
	// The height color for the table cells.
	Height *float64 `pulumi:"height"`
	// The horizontal text alignment (left, center, right, auto) for the table cells.
	HorizontalTextAlignment *TemplateHorizontalTextAlignment `pulumi:"horizontalTextAlignment"`
	// The text wrap (none, wrap) for the table cells.
	TextWrap *TemplateTextWrap `pulumi:"textWrap"`
	// The vertical text alignment (top, middle, bottom) for the table cells.
	VerticalTextAlignment *TemplateVerticalTextAlignment `pulumi:"verticalTextAlignment"`
	// The visibility of the table cells.
	Visibility interface{} `pulumi:"visibility"`
}

// TemplateTableCellStyleInput is an input type that accepts TemplateTableCellStyleArgs and TemplateTableCellStyleOutput values.
// You can construct a concrete instance of `TemplateTableCellStyleInput` via:
//
//	TemplateTableCellStyleArgs{...}
type TemplateTableCellStyleInput interface {
	pulumi.Input

	ToTemplateTableCellStyleOutput() TemplateTableCellStyleOutput
	ToTemplateTableCellStyleOutputWithContext(context.Context) TemplateTableCellStyleOutput
}

type TemplateTableCellStyleArgs struct {
	// The background color for the table cells.
	BackgroundColor pulumi.StringPtrInput `pulumi:"backgroundColor"`
	// The borders for the table cells.
	Border TemplateGlobalTableBorderOptionsPtrInput `pulumi:"border"`
	// The font configuration of the table cells.
	FontConfiguration TemplateFontConfigurationPtrInput `pulumi:"fontConfiguration"`
	// The height color for the table cells.
	Height pulumi.Float64PtrInput `pulumi:"height"`
	// The horizontal text alignment (left, center, right, auto) for the table cells.
	HorizontalTextAlignment TemplateHorizontalTextAlignmentPtrInput `pulumi:"horizontalTextAlignment"`
	// The text wrap (none, wrap) for the table cells.
	TextWrap TemplateTextWrapPtrInput `pulumi:"textWrap"`
	// The vertical text alignment (top, middle, bottom) for the table cells.
	VerticalTextAlignment TemplateVerticalTextAlignmentPtrInput `pulumi:"verticalTextAlignment"`
	// The visibility of the table cells.
	Visibility pulumi.Input `pulumi:"visibility"`
}

func (TemplateTableCellStyleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableCellStyle)(nil)).Elem()
}

func (i TemplateTableCellStyleArgs) ToTemplateTableCellStyleOutput() TemplateTableCellStyleOutput {
	return i.ToTemplateTableCellStyleOutputWithContext(context.Background())
}

func (i TemplateTableCellStyleArgs) ToTemplateTableCellStyleOutputWithContext(ctx context.Context) TemplateTableCellStyleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableCellStyleOutput)
}

func (i TemplateTableCellStyleArgs) ToTemplateTableCellStylePtrOutput() TemplateTableCellStylePtrOutput {
	return i.ToTemplateTableCellStylePtrOutputWithContext(context.Background())
}

func (i TemplateTableCellStyleArgs) ToTemplateTableCellStylePtrOutputWithContext(ctx context.Context) TemplateTableCellStylePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableCellStyleOutput).ToTemplateTableCellStylePtrOutputWithContext(ctx)
}

// TemplateTableCellStylePtrInput is an input type that accepts TemplateTableCellStyleArgs, TemplateTableCellStylePtr and TemplateTableCellStylePtrOutput values.
// You can construct a concrete instance of `TemplateTableCellStylePtrInput` via:
//
//	        TemplateTableCellStyleArgs{...}
//
//	or:
//
//	        nil
type TemplateTableCellStylePtrInput interface {
	pulumi.Input

	ToTemplateTableCellStylePtrOutput() TemplateTableCellStylePtrOutput
	ToTemplateTableCellStylePtrOutputWithContext(context.Context) TemplateTableCellStylePtrOutput
}

type templateTableCellStylePtrType TemplateTableCellStyleArgs

func TemplateTableCellStylePtr(v *TemplateTableCellStyleArgs) TemplateTableCellStylePtrInput {
	return (*templateTableCellStylePtrType)(v)
}

func (*templateTableCellStylePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableCellStyle)(nil)).Elem()
}

func (i *templateTableCellStylePtrType) ToTemplateTableCellStylePtrOutput() TemplateTableCellStylePtrOutput {
	return i.ToTemplateTableCellStylePtrOutputWithContext(context.Background())
}

func (i *templateTableCellStylePtrType) ToTemplateTableCellStylePtrOutputWithContext(ctx context.Context) TemplateTableCellStylePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableCellStylePtrOutput)
}

type TemplateTableCellStyleOutput struct{ *pulumi.OutputState }

func (TemplateTableCellStyleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableCellStyle)(nil)).Elem()
}

func (o TemplateTableCellStyleOutput) ToTemplateTableCellStyleOutput() TemplateTableCellStyleOutput {
	return o
}

func (o TemplateTableCellStyleOutput) ToTemplateTableCellStyleOutputWithContext(ctx context.Context) TemplateTableCellStyleOutput {
	return o
}

func (o TemplateTableCellStyleOutput) ToTemplateTableCellStylePtrOutput() TemplateTableCellStylePtrOutput {
	return o.ToTemplateTableCellStylePtrOutputWithContext(context.Background())
}

func (o TemplateTableCellStyleOutput) ToTemplateTableCellStylePtrOutputWithContext(ctx context.Context) TemplateTableCellStylePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTableCellStyle) *TemplateTableCellStyle {
		return &v
	}).(TemplateTableCellStylePtrOutput)
}

// The background color for the table cells.
func (o TemplateTableCellStyleOutput) BackgroundColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateTableCellStyle) *string { return v.BackgroundColor }).(pulumi.StringPtrOutput)
}

// The borders for the table cells.
func (o TemplateTableCellStyleOutput) Border() TemplateGlobalTableBorderOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTableCellStyle) *TemplateGlobalTableBorderOptions { return v.Border }).(TemplateGlobalTableBorderOptionsPtrOutput)
}

// The font configuration of the table cells.
func (o TemplateTableCellStyleOutput) FontConfiguration() TemplateFontConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateTableCellStyle) *TemplateFontConfiguration { return v.FontConfiguration }).(TemplateFontConfigurationPtrOutput)
}

// The height color for the table cells.
func (o TemplateTableCellStyleOutput) Height() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateTableCellStyle) *float64 { return v.Height }).(pulumi.Float64PtrOutput)
}

// The horizontal text alignment (left, center, right, auto) for the table cells.
func (o TemplateTableCellStyleOutput) HorizontalTextAlignment() TemplateHorizontalTextAlignmentPtrOutput {
	return o.ApplyT(func(v TemplateTableCellStyle) *TemplateHorizontalTextAlignment { return v.HorizontalTextAlignment }).(TemplateHorizontalTextAlignmentPtrOutput)
}

// The text wrap (none, wrap) for the table cells.
func (o TemplateTableCellStyleOutput) TextWrap() TemplateTextWrapPtrOutput {
	return o.ApplyT(func(v TemplateTableCellStyle) *TemplateTextWrap { return v.TextWrap }).(TemplateTextWrapPtrOutput)
}

// The vertical text alignment (top, middle, bottom) for the table cells.
func (o TemplateTableCellStyleOutput) VerticalTextAlignment() TemplateVerticalTextAlignmentPtrOutput {
	return o.ApplyT(func(v TemplateTableCellStyle) *TemplateVerticalTextAlignment { return v.VerticalTextAlignment }).(TemplateVerticalTextAlignmentPtrOutput)
}

// The visibility of the table cells.
func (o TemplateTableCellStyleOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateTableCellStyle) interface{} { return v.Visibility }).(pulumi.AnyOutput)
}

type TemplateTableCellStylePtrOutput struct{ *pulumi.OutputState }

func (TemplateTableCellStylePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableCellStyle)(nil)).Elem()
}

func (o TemplateTableCellStylePtrOutput) ToTemplateTableCellStylePtrOutput() TemplateTableCellStylePtrOutput {
	return o
}

func (o TemplateTableCellStylePtrOutput) ToTemplateTableCellStylePtrOutputWithContext(ctx context.Context) TemplateTableCellStylePtrOutput {
	return o
}

func (o TemplateTableCellStylePtrOutput) Elem() TemplateTableCellStyleOutput {
	return o.ApplyT(func(v *TemplateTableCellStyle) TemplateTableCellStyle {
		if v != nil {
			return *v
		}
		var ret TemplateTableCellStyle
		return ret
	}).(TemplateTableCellStyleOutput)
}

// The background color for the table cells.
func (o TemplateTableCellStylePtrOutput) BackgroundColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateTableCellStyle) *string {
		if v == nil {
			return nil
		}
		return v.BackgroundColor
	}).(pulumi.StringPtrOutput)
}

// The borders for the table cells.
func (o TemplateTableCellStylePtrOutput) Border() TemplateGlobalTableBorderOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTableCellStyle) *TemplateGlobalTableBorderOptions {
		if v == nil {
			return nil
		}
		return v.Border
	}).(TemplateGlobalTableBorderOptionsPtrOutput)
}

// The font configuration of the table cells.
func (o TemplateTableCellStylePtrOutput) FontConfiguration() TemplateFontConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateTableCellStyle) *TemplateFontConfiguration {
		if v == nil {
			return nil
		}
		return v.FontConfiguration
	}).(TemplateFontConfigurationPtrOutput)
}

// The height color for the table cells.
func (o TemplateTableCellStylePtrOutput) Height() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateTableCellStyle) *float64 {
		if v == nil {
			return nil
		}
		return v.Height
	}).(pulumi.Float64PtrOutput)
}

// The horizontal text alignment (left, center, right, auto) for the table cells.
func (o TemplateTableCellStylePtrOutput) HorizontalTextAlignment() TemplateHorizontalTextAlignmentPtrOutput {
	return o.ApplyT(func(v *TemplateTableCellStyle) *TemplateHorizontalTextAlignment {
		if v == nil {
			return nil
		}
		return v.HorizontalTextAlignment
	}).(TemplateHorizontalTextAlignmentPtrOutput)
}

// The text wrap (none, wrap) for the table cells.
func (o TemplateTableCellStylePtrOutput) TextWrap() TemplateTextWrapPtrOutput {
	return o.ApplyT(func(v *TemplateTableCellStyle) *TemplateTextWrap {
		if v == nil {
			return nil
		}
		return v.TextWrap
	}).(TemplateTextWrapPtrOutput)
}

// The vertical text alignment (top, middle, bottom) for the table cells.
func (o TemplateTableCellStylePtrOutput) VerticalTextAlignment() TemplateVerticalTextAlignmentPtrOutput {
	return o.ApplyT(func(v *TemplateTableCellStyle) *TemplateVerticalTextAlignment {
		if v == nil {
			return nil
		}
		return v.VerticalTextAlignment
	}).(TemplateVerticalTextAlignmentPtrOutput)
}

// The visibility of the table cells.
func (o TemplateTableCellStylePtrOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateTableCellStyle) interface{} {
		if v == nil {
			return nil
		}
		return v.Visibility
	}).(pulumi.AnyOutput)
}

type TemplateTableConditionalFormatting struct {
	// Conditional formatting options for a `PivotTableVisual` .
	ConditionalFormattingOptions []TemplateTableConditionalFormattingOption `pulumi:"conditionalFormattingOptions"`
}

// TemplateTableConditionalFormattingInput is an input type that accepts TemplateTableConditionalFormattingArgs and TemplateTableConditionalFormattingOutput values.
// You can construct a concrete instance of `TemplateTableConditionalFormattingInput` via:
//
//	TemplateTableConditionalFormattingArgs{...}
type TemplateTableConditionalFormattingInput interface {
	pulumi.Input

	ToTemplateTableConditionalFormattingOutput() TemplateTableConditionalFormattingOutput
	ToTemplateTableConditionalFormattingOutputWithContext(context.Context) TemplateTableConditionalFormattingOutput
}

type TemplateTableConditionalFormattingArgs struct {
	// Conditional formatting options for a `PivotTableVisual` .
	ConditionalFormattingOptions TemplateTableConditionalFormattingOptionArrayInput `pulumi:"conditionalFormattingOptions"`
}

func (TemplateTableConditionalFormattingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableConditionalFormatting)(nil)).Elem()
}

func (i TemplateTableConditionalFormattingArgs) ToTemplateTableConditionalFormattingOutput() TemplateTableConditionalFormattingOutput {
	return i.ToTemplateTableConditionalFormattingOutputWithContext(context.Background())
}

func (i TemplateTableConditionalFormattingArgs) ToTemplateTableConditionalFormattingOutputWithContext(ctx context.Context) TemplateTableConditionalFormattingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableConditionalFormattingOutput)
}

func (i TemplateTableConditionalFormattingArgs) ToTemplateTableConditionalFormattingPtrOutput() TemplateTableConditionalFormattingPtrOutput {
	return i.ToTemplateTableConditionalFormattingPtrOutputWithContext(context.Background())
}

func (i TemplateTableConditionalFormattingArgs) ToTemplateTableConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplateTableConditionalFormattingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableConditionalFormattingOutput).ToTemplateTableConditionalFormattingPtrOutputWithContext(ctx)
}

// TemplateTableConditionalFormattingPtrInput is an input type that accepts TemplateTableConditionalFormattingArgs, TemplateTableConditionalFormattingPtr and TemplateTableConditionalFormattingPtrOutput values.
// You can construct a concrete instance of `TemplateTableConditionalFormattingPtrInput` via:
//
//	        TemplateTableConditionalFormattingArgs{...}
//
//	or:
//
//	        nil
type TemplateTableConditionalFormattingPtrInput interface {
	pulumi.Input

	ToTemplateTableConditionalFormattingPtrOutput() TemplateTableConditionalFormattingPtrOutput
	ToTemplateTableConditionalFormattingPtrOutputWithContext(context.Context) TemplateTableConditionalFormattingPtrOutput
}

type templateTableConditionalFormattingPtrType TemplateTableConditionalFormattingArgs

func TemplateTableConditionalFormattingPtr(v *TemplateTableConditionalFormattingArgs) TemplateTableConditionalFormattingPtrInput {
	return (*templateTableConditionalFormattingPtrType)(v)
}

func (*templateTableConditionalFormattingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableConditionalFormatting)(nil)).Elem()
}

func (i *templateTableConditionalFormattingPtrType) ToTemplateTableConditionalFormattingPtrOutput() TemplateTableConditionalFormattingPtrOutput {
	return i.ToTemplateTableConditionalFormattingPtrOutputWithContext(context.Background())
}

func (i *templateTableConditionalFormattingPtrType) ToTemplateTableConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplateTableConditionalFormattingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableConditionalFormattingPtrOutput)
}

type TemplateTableConditionalFormattingOutput struct{ *pulumi.OutputState }

func (TemplateTableConditionalFormattingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableConditionalFormatting)(nil)).Elem()
}

func (o TemplateTableConditionalFormattingOutput) ToTemplateTableConditionalFormattingOutput() TemplateTableConditionalFormattingOutput {
	return o
}

func (o TemplateTableConditionalFormattingOutput) ToTemplateTableConditionalFormattingOutputWithContext(ctx context.Context) TemplateTableConditionalFormattingOutput {
	return o
}

func (o TemplateTableConditionalFormattingOutput) ToTemplateTableConditionalFormattingPtrOutput() TemplateTableConditionalFormattingPtrOutput {
	return o.ToTemplateTableConditionalFormattingPtrOutputWithContext(context.Background())
}

func (o TemplateTableConditionalFormattingOutput) ToTemplateTableConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplateTableConditionalFormattingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTableConditionalFormatting) *TemplateTableConditionalFormatting {
		return &v
	}).(TemplateTableConditionalFormattingPtrOutput)
}

// Conditional formatting options for a `PivotTableVisual` .
func (o TemplateTableConditionalFormattingOutput) ConditionalFormattingOptions() TemplateTableConditionalFormattingOptionArrayOutput {
	return o.ApplyT(func(v TemplateTableConditionalFormatting) []TemplateTableConditionalFormattingOption {
		return v.ConditionalFormattingOptions
	}).(TemplateTableConditionalFormattingOptionArrayOutput)
}

type TemplateTableConditionalFormattingPtrOutput struct{ *pulumi.OutputState }

func (TemplateTableConditionalFormattingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableConditionalFormatting)(nil)).Elem()
}

func (o TemplateTableConditionalFormattingPtrOutput) ToTemplateTableConditionalFormattingPtrOutput() TemplateTableConditionalFormattingPtrOutput {
	return o
}

func (o TemplateTableConditionalFormattingPtrOutput) ToTemplateTableConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplateTableConditionalFormattingPtrOutput {
	return o
}

func (o TemplateTableConditionalFormattingPtrOutput) Elem() TemplateTableConditionalFormattingOutput {
	return o.ApplyT(func(v *TemplateTableConditionalFormatting) TemplateTableConditionalFormatting {
		if v != nil {
			return *v
		}
		var ret TemplateTableConditionalFormatting
		return ret
	}).(TemplateTableConditionalFormattingOutput)
}

// Conditional formatting options for a `PivotTableVisual` .
func (o TemplateTableConditionalFormattingPtrOutput) ConditionalFormattingOptions() TemplateTableConditionalFormattingOptionArrayOutput {
	return o.ApplyT(func(v *TemplateTableConditionalFormatting) []TemplateTableConditionalFormattingOption {
		if v == nil {
			return nil
		}
		return v.ConditionalFormattingOptions
	}).(TemplateTableConditionalFormattingOptionArrayOutput)
}

type TemplateTableConditionalFormattingOption struct {
	// The cell conditional formatting option for a table.
	Cell *TemplateTableCellConditionalFormatting `pulumi:"cell"`
	// The row conditional formatting option for a table.
	Row *TemplateTableRowConditionalFormatting `pulumi:"row"`
}

// TemplateTableConditionalFormattingOptionInput is an input type that accepts TemplateTableConditionalFormattingOptionArgs and TemplateTableConditionalFormattingOptionOutput values.
// You can construct a concrete instance of `TemplateTableConditionalFormattingOptionInput` via:
//
//	TemplateTableConditionalFormattingOptionArgs{...}
type TemplateTableConditionalFormattingOptionInput interface {
	pulumi.Input

	ToTemplateTableConditionalFormattingOptionOutput() TemplateTableConditionalFormattingOptionOutput
	ToTemplateTableConditionalFormattingOptionOutputWithContext(context.Context) TemplateTableConditionalFormattingOptionOutput
}

type TemplateTableConditionalFormattingOptionArgs struct {
	// The cell conditional formatting option for a table.
	Cell TemplateTableCellConditionalFormattingPtrInput `pulumi:"cell"`
	// The row conditional formatting option for a table.
	Row TemplateTableRowConditionalFormattingPtrInput `pulumi:"row"`
}

func (TemplateTableConditionalFormattingOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableConditionalFormattingOption)(nil)).Elem()
}

func (i TemplateTableConditionalFormattingOptionArgs) ToTemplateTableConditionalFormattingOptionOutput() TemplateTableConditionalFormattingOptionOutput {
	return i.ToTemplateTableConditionalFormattingOptionOutputWithContext(context.Background())
}

func (i TemplateTableConditionalFormattingOptionArgs) ToTemplateTableConditionalFormattingOptionOutputWithContext(ctx context.Context) TemplateTableConditionalFormattingOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableConditionalFormattingOptionOutput)
}

// TemplateTableConditionalFormattingOptionArrayInput is an input type that accepts TemplateTableConditionalFormattingOptionArray and TemplateTableConditionalFormattingOptionArrayOutput values.
// You can construct a concrete instance of `TemplateTableConditionalFormattingOptionArrayInput` via:
//
//	TemplateTableConditionalFormattingOptionArray{ TemplateTableConditionalFormattingOptionArgs{...} }
type TemplateTableConditionalFormattingOptionArrayInput interface {
	pulumi.Input

	ToTemplateTableConditionalFormattingOptionArrayOutput() TemplateTableConditionalFormattingOptionArrayOutput
	ToTemplateTableConditionalFormattingOptionArrayOutputWithContext(context.Context) TemplateTableConditionalFormattingOptionArrayOutput
}

type TemplateTableConditionalFormattingOptionArray []TemplateTableConditionalFormattingOptionInput

func (TemplateTableConditionalFormattingOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateTableConditionalFormattingOption)(nil)).Elem()
}

func (i TemplateTableConditionalFormattingOptionArray) ToTemplateTableConditionalFormattingOptionArrayOutput() TemplateTableConditionalFormattingOptionArrayOutput {
	return i.ToTemplateTableConditionalFormattingOptionArrayOutputWithContext(context.Background())
}

func (i TemplateTableConditionalFormattingOptionArray) ToTemplateTableConditionalFormattingOptionArrayOutputWithContext(ctx context.Context) TemplateTableConditionalFormattingOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableConditionalFormattingOptionArrayOutput)
}

type TemplateTableConditionalFormattingOptionOutput struct{ *pulumi.OutputState }

func (TemplateTableConditionalFormattingOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableConditionalFormattingOption)(nil)).Elem()
}

func (o TemplateTableConditionalFormattingOptionOutput) ToTemplateTableConditionalFormattingOptionOutput() TemplateTableConditionalFormattingOptionOutput {
	return o
}

func (o TemplateTableConditionalFormattingOptionOutput) ToTemplateTableConditionalFormattingOptionOutputWithContext(ctx context.Context) TemplateTableConditionalFormattingOptionOutput {
	return o
}

// The cell conditional formatting option for a table.
func (o TemplateTableConditionalFormattingOptionOutput) Cell() TemplateTableCellConditionalFormattingPtrOutput {
	return o.ApplyT(func(v TemplateTableConditionalFormattingOption) *TemplateTableCellConditionalFormatting {
		return v.Cell
	}).(TemplateTableCellConditionalFormattingPtrOutput)
}

// The row conditional formatting option for a table.
func (o TemplateTableConditionalFormattingOptionOutput) Row() TemplateTableRowConditionalFormattingPtrOutput {
	return o.ApplyT(func(v TemplateTableConditionalFormattingOption) *TemplateTableRowConditionalFormatting { return v.Row }).(TemplateTableRowConditionalFormattingPtrOutput)
}

type TemplateTableConditionalFormattingOptionArrayOutput struct{ *pulumi.OutputState }

func (TemplateTableConditionalFormattingOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateTableConditionalFormattingOption)(nil)).Elem()
}

func (o TemplateTableConditionalFormattingOptionArrayOutput) ToTemplateTableConditionalFormattingOptionArrayOutput() TemplateTableConditionalFormattingOptionArrayOutput {
	return o
}

func (o TemplateTableConditionalFormattingOptionArrayOutput) ToTemplateTableConditionalFormattingOptionArrayOutputWithContext(ctx context.Context) TemplateTableConditionalFormattingOptionArrayOutput {
	return o
}

func (o TemplateTableConditionalFormattingOptionArrayOutput) Index(i pulumi.IntInput) TemplateTableConditionalFormattingOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateTableConditionalFormattingOption {
		return vs[0].([]TemplateTableConditionalFormattingOption)[vs[1].(int)]
	}).(TemplateTableConditionalFormattingOptionOutput)
}

type TemplateTableConfiguration struct {
	// The field options for a table visual.
	FieldOptions *TemplateTableFieldOptions `pulumi:"fieldOptions"`
	// The field wells of the visual.
	FieldWells *TemplateTableFieldWells `pulumi:"fieldWells"`
	// The general visual interactions setup for a visual.
	Interactions *TemplateVisualInteractionOptions `pulumi:"interactions"`
	// The paginated report options for a table visual.
	PaginatedReportOptions *TemplateTablePaginatedReportOptions `pulumi:"paginatedReportOptions"`
	// The sort configuration for a `TableVisual` .
	SortConfiguration *TemplateTableSortConfiguration `pulumi:"sortConfiguration"`
	// A collection of inline visualizations to display within a chart.
	TableInlineVisualizations []TemplateTableInlineVisualization `pulumi:"tableInlineVisualizations"`
	// The table options for a table visual.
	TableOptions *TemplateTableOptions `pulumi:"tableOptions"`
	// The total options for a table visual.
	TotalOptions *TemplateTotalOptions `pulumi:"totalOptions"`
}

// TemplateTableConfigurationInput is an input type that accepts TemplateTableConfigurationArgs and TemplateTableConfigurationOutput values.
// You can construct a concrete instance of `TemplateTableConfigurationInput` via:
//
//	TemplateTableConfigurationArgs{...}
type TemplateTableConfigurationInput interface {
	pulumi.Input

	ToTemplateTableConfigurationOutput() TemplateTableConfigurationOutput
	ToTemplateTableConfigurationOutputWithContext(context.Context) TemplateTableConfigurationOutput
}

type TemplateTableConfigurationArgs struct {
	// The field options for a table visual.
	FieldOptions TemplateTableFieldOptionsPtrInput `pulumi:"fieldOptions"`
	// The field wells of the visual.
	FieldWells TemplateTableFieldWellsPtrInput `pulumi:"fieldWells"`
	// The general visual interactions setup for a visual.
	Interactions TemplateVisualInteractionOptionsPtrInput `pulumi:"interactions"`
	// The paginated report options for a table visual.
	PaginatedReportOptions TemplateTablePaginatedReportOptionsPtrInput `pulumi:"paginatedReportOptions"`
	// The sort configuration for a `TableVisual` .
	SortConfiguration TemplateTableSortConfigurationPtrInput `pulumi:"sortConfiguration"`
	// A collection of inline visualizations to display within a chart.
	TableInlineVisualizations TemplateTableInlineVisualizationArrayInput `pulumi:"tableInlineVisualizations"`
	// The table options for a table visual.
	TableOptions TemplateTableOptionsPtrInput `pulumi:"tableOptions"`
	// The total options for a table visual.
	TotalOptions TemplateTotalOptionsPtrInput `pulumi:"totalOptions"`
}

func (TemplateTableConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableConfiguration)(nil)).Elem()
}

func (i TemplateTableConfigurationArgs) ToTemplateTableConfigurationOutput() TemplateTableConfigurationOutput {
	return i.ToTemplateTableConfigurationOutputWithContext(context.Background())
}

func (i TemplateTableConfigurationArgs) ToTemplateTableConfigurationOutputWithContext(ctx context.Context) TemplateTableConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableConfigurationOutput)
}

func (i TemplateTableConfigurationArgs) ToTemplateTableConfigurationPtrOutput() TemplateTableConfigurationPtrOutput {
	return i.ToTemplateTableConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateTableConfigurationArgs) ToTemplateTableConfigurationPtrOutputWithContext(ctx context.Context) TemplateTableConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableConfigurationOutput).ToTemplateTableConfigurationPtrOutputWithContext(ctx)
}

// TemplateTableConfigurationPtrInput is an input type that accepts TemplateTableConfigurationArgs, TemplateTableConfigurationPtr and TemplateTableConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateTableConfigurationPtrInput` via:
//
//	        TemplateTableConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateTableConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateTableConfigurationPtrOutput() TemplateTableConfigurationPtrOutput
	ToTemplateTableConfigurationPtrOutputWithContext(context.Context) TemplateTableConfigurationPtrOutput
}

type templateTableConfigurationPtrType TemplateTableConfigurationArgs

func TemplateTableConfigurationPtr(v *TemplateTableConfigurationArgs) TemplateTableConfigurationPtrInput {
	return (*templateTableConfigurationPtrType)(v)
}

func (*templateTableConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableConfiguration)(nil)).Elem()
}

func (i *templateTableConfigurationPtrType) ToTemplateTableConfigurationPtrOutput() TemplateTableConfigurationPtrOutput {
	return i.ToTemplateTableConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateTableConfigurationPtrType) ToTemplateTableConfigurationPtrOutputWithContext(ctx context.Context) TemplateTableConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableConfigurationPtrOutput)
}

type TemplateTableConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateTableConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableConfiguration)(nil)).Elem()
}

func (o TemplateTableConfigurationOutput) ToTemplateTableConfigurationOutput() TemplateTableConfigurationOutput {
	return o
}

func (o TemplateTableConfigurationOutput) ToTemplateTableConfigurationOutputWithContext(ctx context.Context) TemplateTableConfigurationOutput {
	return o
}

func (o TemplateTableConfigurationOutput) ToTemplateTableConfigurationPtrOutput() TemplateTableConfigurationPtrOutput {
	return o.ToTemplateTableConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateTableConfigurationOutput) ToTemplateTableConfigurationPtrOutputWithContext(ctx context.Context) TemplateTableConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTableConfiguration) *TemplateTableConfiguration {
		return &v
	}).(TemplateTableConfigurationPtrOutput)
}

// The field options for a table visual.
func (o TemplateTableConfigurationOutput) FieldOptions() TemplateTableFieldOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTableConfiguration) *TemplateTableFieldOptions { return v.FieldOptions }).(TemplateTableFieldOptionsPtrOutput)
}

// The field wells of the visual.
func (o TemplateTableConfigurationOutput) FieldWells() TemplateTableFieldWellsPtrOutput {
	return o.ApplyT(func(v TemplateTableConfiguration) *TemplateTableFieldWells { return v.FieldWells }).(TemplateTableFieldWellsPtrOutput)
}

// The general visual interactions setup for a visual.
func (o TemplateTableConfigurationOutput) Interactions() TemplateVisualInteractionOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTableConfiguration) *TemplateVisualInteractionOptions { return v.Interactions }).(TemplateVisualInteractionOptionsPtrOutput)
}

// The paginated report options for a table visual.
func (o TemplateTableConfigurationOutput) PaginatedReportOptions() TemplateTablePaginatedReportOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTableConfiguration) *TemplateTablePaginatedReportOptions {
		return v.PaginatedReportOptions
	}).(TemplateTablePaginatedReportOptionsPtrOutput)
}

// The sort configuration for a `TableVisual` .
func (o TemplateTableConfigurationOutput) SortConfiguration() TemplateTableSortConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateTableConfiguration) *TemplateTableSortConfiguration { return v.SortConfiguration }).(TemplateTableSortConfigurationPtrOutput)
}

// A collection of inline visualizations to display within a chart.
func (o TemplateTableConfigurationOutput) TableInlineVisualizations() TemplateTableInlineVisualizationArrayOutput {
	return o.ApplyT(func(v TemplateTableConfiguration) []TemplateTableInlineVisualization {
		return v.TableInlineVisualizations
	}).(TemplateTableInlineVisualizationArrayOutput)
}

// The table options for a table visual.
func (o TemplateTableConfigurationOutput) TableOptions() TemplateTableOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTableConfiguration) *TemplateTableOptions { return v.TableOptions }).(TemplateTableOptionsPtrOutput)
}

// The total options for a table visual.
func (o TemplateTableConfigurationOutput) TotalOptions() TemplateTotalOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTableConfiguration) *TemplateTotalOptions { return v.TotalOptions }).(TemplateTotalOptionsPtrOutput)
}

type TemplateTableConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateTableConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableConfiguration)(nil)).Elem()
}

func (o TemplateTableConfigurationPtrOutput) ToTemplateTableConfigurationPtrOutput() TemplateTableConfigurationPtrOutput {
	return o
}

func (o TemplateTableConfigurationPtrOutput) ToTemplateTableConfigurationPtrOutputWithContext(ctx context.Context) TemplateTableConfigurationPtrOutput {
	return o
}

func (o TemplateTableConfigurationPtrOutput) Elem() TemplateTableConfigurationOutput {
	return o.ApplyT(func(v *TemplateTableConfiguration) TemplateTableConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateTableConfiguration
		return ret
	}).(TemplateTableConfigurationOutput)
}

// The field options for a table visual.
func (o TemplateTableConfigurationPtrOutput) FieldOptions() TemplateTableFieldOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTableConfiguration) *TemplateTableFieldOptions {
		if v == nil {
			return nil
		}
		return v.FieldOptions
	}).(TemplateTableFieldOptionsPtrOutput)
}

// The field wells of the visual.
func (o TemplateTableConfigurationPtrOutput) FieldWells() TemplateTableFieldWellsPtrOutput {
	return o.ApplyT(func(v *TemplateTableConfiguration) *TemplateTableFieldWells {
		if v == nil {
			return nil
		}
		return v.FieldWells
	}).(TemplateTableFieldWellsPtrOutput)
}

// The general visual interactions setup for a visual.
func (o TemplateTableConfigurationPtrOutput) Interactions() TemplateVisualInteractionOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTableConfiguration) *TemplateVisualInteractionOptions {
		if v == nil {
			return nil
		}
		return v.Interactions
	}).(TemplateVisualInteractionOptionsPtrOutput)
}

// The paginated report options for a table visual.
func (o TemplateTableConfigurationPtrOutput) PaginatedReportOptions() TemplateTablePaginatedReportOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTableConfiguration) *TemplateTablePaginatedReportOptions {
		if v == nil {
			return nil
		}
		return v.PaginatedReportOptions
	}).(TemplateTablePaginatedReportOptionsPtrOutput)
}

// The sort configuration for a `TableVisual` .
func (o TemplateTableConfigurationPtrOutput) SortConfiguration() TemplateTableSortConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateTableConfiguration) *TemplateTableSortConfiguration {
		if v == nil {
			return nil
		}
		return v.SortConfiguration
	}).(TemplateTableSortConfigurationPtrOutput)
}

// A collection of inline visualizations to display within a chart.
func (o TemplateTableConfigurationPtrOutput) TableInlineVisualizations() TemplateTableInlineVisualizationArrayOutput {
	return o.ApplyT(func(v *TemplateTableConfiguration) []TemplateTableInlineVisualization {
		if v == nil {
			return nil
		}
		return v.TableInlineVisualizations
	}).(TemplateTableInlineVisualizationArrayOutput)
}

// The table options for a table visual.
func (o TemplateTableConfigurationPtrOutput) TableOptions() TemplateTableOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTableConfiguration) *TemplateTableOptions {
		if v == nil {
			return nil
		}
		return v.TableOptions
	}).(TemplateTableOptionsPtrOutput)
}

// The total options for a table visual.
func (o TemplateTableConfigurationPtrOutput) TotalOptions() TemplateTotalOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTableConfiguration) *TemplateTotalOptions {
		if v == nil {
			return nil
		}
		return v.TotalOptions
	}).(TemplateTotalOptionsPtrOutput)
}

type TemplateTableFieldCustomIconContent struct {
	// The icon set type (link) of the custom icon content for table URL link content.
	Icon *TemplateTableFieldIconSetType `pulumi:"icon"`
}

// TemplateTableFieldCustomIconContentInput is an input type that accepts TemplateTableFieldCustomIconContentArgs and TemplateTableFieldCustomIconContentOutput values.
// You can construct a concrete instance of `TemplateTableFieldCustomIconContentInput` via:
//
//	TemplateTableFieldCustomIconContentArgs{...}
type TemplateTableFieldCustomIconContentInput interface {
	pulumi.Input

	ToTemplateTableFieldCustomIconContentOutput() TemplateTableFieldCustomIconContentOutput
	ToTemplateTableFieldCustomIconContentOutputWithContext(context.Context) TemplateTableFieldCustomIconContentOutput
}

type TemplateTableFieldCustomIconContentArgs struct {
	// The icon set type (link) of the custom icon content for table URL link content.
	Icon TemplateTableFieldIconSetTypePtrInput `pulumi:"icon"`
}

func (TemplateTableFieldCustomIconContentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableFieldCustomIconContent)(nil)).Elem()
}

func (i TemplateTableFieldCustomIconContentArgs) ToTemplateTableFieldCustomIconContentOutput() TemplateTableFieldCustomIconContentOutput {
	return i.ToTemplateTableFieldCustomIconContentOutputWithContext(context.Background())
}

func (i TemplateTableFieldCustomIconContentArgs) ToTemplateTableFieldCustomIconContentOutputWithContext(ctx context.Context) TemplateTableFieldCustomIconContentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableFieldCustomIconContentOutput)
}

func (i TemplateTableFieldCustomIconContentArgs) ToTemplateTableFieldCustomIconContentPtrOutput() TemplateTableFieldCustomIconContentPtrOutput {
	return i.ToTemplateTableFieldCustomIconContentPtrOutputWithContext(context.Background())
}

func (i TemplateTableFieldCustomIconContentArgs) ToTemplateTableFieldCustomIconContentPtrOutputWithContext(ctx context.Context) TemplateTableFieldCustomIconContentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableFieldCustomIconContentOutput).ToTemplateTableFieldCustomIconContentPtrOutputWithContext(ctx)
}

// TemplateTableFieldCustomIconContentPtrInput is an input type that accepts TemplateTableFieldCustomIconContentArgs, TemplateTableFieldCustomIconContentPtr and TemplateTableFieldCustomIconContentPtrOutput values.
// You can construct a concrete instance of `TemplateTableFieldCustomIconContentPtrInput` via:
//
//	        TemplateTableFieldCustomIconContentArgs{...}
//
//	or:
//
//	        nil
type TemplateTableFieldCustomIconContentPtrInput interface {
	pulumi.Input

	ToTemplateTableFieldCustomIconContentPtrOutput() TemplateTableFieldCustomIconContentPtrOutput
	ToTemplateTableFieldCustomIconContentPtrOutputWithContext(context.Context) TemplateTableFieldCustomIconContentPtrOutput
}

type templateTableFieldCustomIconContentPtrType TemplateTableFieldCustomIconContentArgs

func TemplateTableFieldCustomIconContentPtr(v *TemplateTableFieldCustomIconContentArgs) TemplateTableFieldCustomIconContentPtrInput {
	return (*templateTableFieldCustomIconContentPtrType)(v)
}

func (*templateTableFieldCustomIconContentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableFieldCustomIconContent)(nil)).Elem()
}

func (i *templateTableFieldCustomIconContentPtrType) ToTemplateTableFieldCustomIconContentPtrOutput() TemplateTableFieldCustomIconContentPtrOutput {
	return i.ToTemplateTableFieldCustomIconContentPtrOutputWithContext(context.Background())
}

func (i *templateTableFieldCustomIconContentPtrType) ToTemplateTableFieldCustomIconContentPtrOutputWithContext(ctx context.Context) TemplateTableFieldCustomIconContentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableFieldCustomIconContentPtrOutput)
}

type TemplateTableFieldCustomIconContentOutput struct{ *pulumi.OutputState }

func (TemplateTableFieldCustomIconContentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableFieldCustomIconContent)(nil)).Elem()
}

func (o TemplateTableFieldCustomIconContentOutput) ToTemplateTableFieldCustomIconContentOutput() TemplateTableFieldCustomIconContentOutput {
	return o
}

func (o TemplateTableFieldCustomIconContentOutput) ToTemplateTableFieldCustomIconContentOutputWithContext(ctx context.Context) TemplateTableFieldCustomIconContentOutput {
	return o
}

func (o TemplateTableFieldCustomIconContentOutput) ToTemplateTableFieldCustomIconContentPtrOutput() TemplateTableFieldCustomIconContentPtrOutput {
	return o.ToTemplateTableFieldCustomIconContentPtrOutputWithContext(context.Background())
}

func (o TemplateTableFieldCustomIconContentOutput) ToTemplateTableFieldCustomIconContentPtrOutputWithContext(ctx context.Context) TemplateTableFieldCustomIconContentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTableFieldCustomIconContent) *TemplateTableFieldCustomIconContent {
		return &v
	}).(TemplateTableFieldCustomIconContentPtrOutput)
}

// The icon set type (link) of the custom icon content for table URL link content.
func (o TemplateTableFieldCustomIconContentOutput) Icon() TemplateTableFieldIconSetTypePtrOutput {
	return o.ApplyT(func(v TemplateTableFieldCustomIconContent) *TemplateTableFieldIconSetType { return v.Icon }).(TemplateTableFieldIconSetTypePtrOutput)
}

type TemplateTableFieldCustomIconContentPtrOutput struct{ *pulumi.OutputState }

func (TemplateTableFieldCustomIconContentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableFieldCustomIconContent)(nil)).Elem()
}

func (o TemplateTableFieldCustomIconContentPtrOutput) ToTemplateTableFieldCustomIconContentPtrOutput() TemplateTableFieldCustomIconContentPtrOutput {
	return o
}

func (o TemplateTableFieldCustomIconContentPtrOutput) ToTemplateTableFieldCustomIconContentPtrOutputWithContext(ctx context.Context) TemplateTableFieldCustomIconContentPtrOutput {
	return o
}

func (o TemplateTableFieldCustomIconContentPtrOutput) Elem() TemplateTableFieldCustomIconContentOutput {
	return o.ApplyT(func(v *TemplateTableFieldCustomIconContent) TemplateTableFieldCustomIconContent {
		if v != nil {
			return *v
		}
		var ret TemplateTableFieldCustomIconContent
		return ret
	}).(TemplateTableFieldCustomIconContentOutput)
}

// The icon set type (link) of the custom icon content for table URL link content.
func (o TemplateTableFieldCustomIconContentPtrOutput) Icon() TemplateTableFieldIconSetTypePtrOutput {
	return o.ApplyT(func(v *TemplateTableFieldCustomIconContent) *TemplateTableFieldIconSetType {
		if v == nil {
			return nil
		}
		return v.Icon
	}).(TemplateTableFieldIconSetTypePtrOutput)
}

type TemplateTableFieldCustomTextContent struct {
	// The font configuration of the custom text content for the table URL link content.
	FontConfiguration TemplateFontConfiguration `pulumi:"fontConfiguration"`
	// The string value of the custom text content for the table URL link content.
	Value *string `pulumi:"value"`
}

// TemplateTableFieldCustomTextContentInput is an input type that accepts TemplateTableFieldCustomTextContentArgs and TemplateTableFieldCustomTextContentOutput values.
// You can construct a concrete instance of `TemplateTableFieldCustomTextContentInput` via:
//
//	TemplateTableFieldCustomTextContentArgs{...}
type TemplateTableFieldCustomTextContentInput interface {
	pulumi.Input

	ToTemplateTableFieldCustomTextContentOutput() TemplateTableFieldCustomTextContentOutput
	ToTemplateTableFieldCustomTextContentOutputWithContext(context.Context) TemplateTableFieldCustomTextContentOutput
}

type TemplateTableFieldCustomTextContentArgs struct {
	// The font configuration of the custom text content for the table URL link content.
	FontConfiguration TemplateFontConfigurationInput `pulumi:"fontConfiguration"`
	// The string value of the custom text content for the table URL link content.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (TemplateTableFieldCustomTextContentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableFieldCustomTextContent)(nil)).Elem()
}

func (i TemplateTableFieldCustomTextContentArgs) ToTemplateTableFieldCustomTextContentOutput() TemplateTableFieldCustomTextContentOutput {
	return i.ToTemplateTableFieldCustomTextContentOutputWithContext(context.Background())
}

func (i TemplateTableFieldCustomTextContentArgs) ToTemplateTableFieldCustomTextContentOutputWithContext(ctx context.Context) TemplateTableFieldCustomTextContentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableFieldCustomTextContentOutput)
}

func (i TemplateTableFieldCustomTextContentArgs) ToTemplateTableFieldCustomTextContentPtrOutput() TemplateTableFieldCustomTextContentPtrOutput {
	return i.ToTemplateTableFieldCustomTextContentPtrOutputWithContext(context.Background())
}

func (i TemplateTableFieldCustomTextContentArgs) ToTemplateTableFieldCustomTextContentPtrOutputWithContext(ctx context.Context) TemplateTableFieldCustomTextContentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableFieldCustomTextContentOutput).ToTemplateTableFieldCustomTextContentPtrOutputWithContext(ctx)
}

// TemplateTableFieldCustomTextContentPtrInput is an input type that accepts TemplateTableFieldCustomTextContentArgs, TemplateTableFieldCustomTextContentPtr and TemplateTableFieldCustomTextContentPtrOutput values.
// You can construct a concrete instance of `TemplateTableFieldCustomTextContentPtrInput` via:
//
//	        TemplateTableFieldCustomTextContentArgs{...}
//
//	or:
//
//	        nil
type TemplateTableFieldCustomTextContentPtrInput interface {
	pulumi.Input

	ToTemplateTableFieldCustomTextContentPtrOutput() TemplateTableFieldCustomTextContentPtrOutput
	ToTemplateTableFieldCustomTextContentPtrOutputWithContext(context.Context) TemplateTableFieldCustomTextContentPtrOutput
}

type templateTableFieldCustomTextContentPtrType TemplateTableFieldCustomTextContentArgs

func TemplateTableFieldCustomTextContentPtr(v *TemplateTableFieldCustomTextContentArgs) TemplateTableFieldCustomTextContentPtrInput {
	return (*templateTableFieldCustomTextContentPtrType)(v)
}

func (*templateTableFieldCustomTextContentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableFieldCustomTextContent)(nil)).Elem()
}

func (i *templateTableFieldCustomTextContentPtrType) ToTemplateTableFieldCustomTextContentPtrOutput() TemplateTableFieldCustomTextContentPtrOutput {
	return i.ToTemplateTableFieldCustomTextContentPtrOutputWithContext(context.Background())
}

func (i *templateTableFieldCustomTextContentPtrType) ToTemplateTableFieldCustomTextContentPtrOutputWithContext(ctx context.Context) TemplateTableFieldCustomTextContentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableFieldCustomTextContentPtrOutput)
}

type TemplateTableFieldCustomTextContentOutput struct{ *pulumi.OutputState }

func (TemplateTableFieldCustomTextContentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableFieldCustomTextContent)(nil)).Elem()
}

func (o TemplateTableFieldCustomTextContentOutput) ToTemplateTableFieldCustomTextContentOutput() TemplateTableFieldCustomTextContentOutput {
	return o
}

func (o TemplateTableFieldCustomTextContentOutput) ToTemplateTableFieldCustomTextContentOutputWithContext(ctx context.Context) TemplateTableFieldCustomTextContentOutput {
	return o
}

func (o TemplateTableFieldCustomTextContentOutput) ToTemplateTableFieldCustomTextContentPtrOutput() TemplateTableFieldCustomTextContentPtrOutput {
	return o.ToTemplateTableFieldCustomTextContentPtrOutputWithContext(context.Background())
}

func (o TemplateTableFieldCustomTextContentOutput) ToTemplateTableFieldCustomTextContentPtrOutputWithContext(ctx context.Context) TemplateTableFieldCustomTextContentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTableFieldCustomTextContent) *TemplateTableFieldCustomTextContent {
		return &v
	}).(TemplateTableFieldCustomTextContentPtrOutput)
}

// The font configuration of the custom text content for the table URL link content.
func (o TemplateTableFieldCustomTextContentOutput) FontConfiguration() TemplateFontConfigurationOutput {
	return o.ApplyT(func(v TemplateTableFieldCustomTextContent) TemplateFontConfiguration { return v.FontConfiguration }).(TemplateFontConfigurationOutput)
}

// The string value of the custom text content for the table URL link content.
func (o TemplateTableFieldCustomTextContentOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateTableFieldCustomTextContent) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type TemplateTableFieldCustomTextContentPtrOutput struct{ *pulumi.OutputState }

func (TemplateTableFieldCustomTextContentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableFieldCustomTextContent)(nil)).Elem()
}

func (o TemplateTableFieldCustomTextContentPtrOutput) ToTemplateTableFieldCustomTextContentPtrOutput() TemplateTableFieldCustomTextContentPtrOutput {
	return o
}

func (o TemplateTableFieldCustomTextContentPtrOutput) ToTemplateTableFieldCustomTextContentPtrOutputWithContext(ctx context.Context) TemplateTableFieldCustomTextContentPtrOutput {
	return o
}

func (o TemplateTableFieldCustomTextContentPtrOutput) Elem() TemplateTableFieldCustomTextContentOutput {
	return o.ApplyT(func(v *TemplateTableFieldCustomTextContent) TemplateTableFieldCustomTextContent {
		if v != nil {
			return *v
		}
		var ret TemplateTableFieldCustomTextContent
		return ret
	}).(TemplateTableFieldCustomTextContentOutput)
}

// The font configuration of the custom text content for the table URL link content.
func (o TemplateTableFieldCustomTextContentPtrOutput) FontConfiguration() TemplateFontConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateTableFieldCustomTextContent) *TemplateFontConfiguration {
		if v == nil {
			return nil
		}
		return &v.FontConfiguration
	}).(TemplateFontConfigurationPtrOutput)
}

// The string value of the custom text content for the table URL link content.
func (o TemplateTableFieldCustomTextContentPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateTableFieldCustomTextContent) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type TemplateTableFieldImageConfiguration struct {
	// The sizing options for the table image configuration.
	SizingOptions *TemplateTableCellImageSizingConfiguration `pulumi:"sizingOptions"`
}

// TemplateTableFieldImageConfigurationInput is an input type that accepts TemplateTableFieldImageConfigurationArgs and TemplateTableFieldImageConfigurationOutput values.
// You can construct a concrete instance of `TemplateTableFieldImageConfigurationInput` via:
//
//	TemplateTableFieldImageConfigurationArgs{...}
type TemplateTableFieldImageConfigurationInput interface {
	pulumi.Input

	ToTemplateTableFieldImageConfigurationOutput() TemplateTableFieldImageConfigurationOutput
	ToTemplateTableFieldImageConfigurationOutputWithContext(context.Context) TemplateTableFieldImageConfigurationOutput
}

type TemplateTableFieldImageConfigurationArgs struct {
	// The sizing options for the table image configuration.
	SizingOptions TemplateTableCellImageSizingConfigurationPtrInput `pulumi:"sizingOptions"`
}

func (TemplateTableFieldImageConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableFieldImageConfiguration)(nil)).Elem()
}

func (i TemplateTableFieldImageConfigurationArgs) ToTemplateTableFieldImageConfigurationOutput() TemplateTableFieldImageConfigurationOutput {
	return i.ToTemplateTableFieldImageConfigurationOutputWithContext(context.Background())
}

func (i TemplateTableFieldImageConfigurationArgs) ToTemplateTableFieldImageConfigurationOutputWithContext(ctx context.Context) TemplateTableFieldImageConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableFieldImageConfigurationOutput)
}

func (i TemplateTableFieldImageConfigurationArgs) ToTemplateTableFieldImageConfigurationPtrOutput() TemplateTableFieldImageConfigurationPtrOutput {
	return i.ToTemplateTableFieldImageConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateTableFieldImageConfigurationArgs) ToTemplateTableFieldImageConfigurationPtrOutputWithContext(ctx context.Context) TemplateTableFieldImageConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableFieldImageConfigurationOutput).ToTemplateTableFieldImageConfigurationPtrOutputWithContext(ctx)
}

// TemplateTableFieldImageConfigurationPtrInput is an input type that accepts TemplateTableFieldImageConfigurationArgs, TemplateTableFieldImageConfigurationPtr and TemplateTableFieldImageConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateTableFieldImageConfigurationPtrInput` via:
//
//	        TemplateTableFieldImageConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateTableFieldImageConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateTableFieldImageConfigurationPtrOutput() TemplateTableFieldImageConfigurationPtrOutput
	ToTemplateTableFieldImageConfigurationPtrOutputWithContext(context.Context) TemplateTableFieldImageConfigurationPtrOutput
}

type templateTableFieldImageConfigurationPtrType TemplateTableFieldImageConfigurationArgs

func TemplateTableFieldImageConfigurationPtr(v *TemplateTableFieldImageConfigurationArgs) TemplateTableFieldImageConfigurationPtrInput {
	return (*templateTableFieldImageConfigurationPtrType)(v)
}

func (*templateTableFieldImageConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableFieldImageConfiguration)(nil)).Elem()
}

func (i *templateTableFieldImageConfigurationPtrType) ToTemplateTableFieldImageConfigurationPtrOutput() TemplateTableFieldImageConfigurationPtrOutput {
	return i.ToTemplateTableFieldImageConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateTableFieldImageConfigurationPtrType) ToTemplateTableFieldImageConfigurationPtrOutputWithContext(ctx context.Context) TemplateTableFieldImageConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableFieldImageConfigurationPtrOutput)
}

type TemplateTableFieldImageConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateTableFieldImageConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableFieldImageConfiguration)(nil)).Elem()
}

func (o TemplateTableFieldImageConfigurationOutput) ToTemplateTableFieldImageConfigurationOutput() TemplateTableFieldImageConfigurationOutput {
	return o
}

func (o TemplateTableFieldImageConfigurationOutput) ToTemplateTableFieldImageConfigurationOutputWithContext(ctx context.Context) TemplateTableFieldImageConfigurationOutput {
	return o
}

func (o TemplateTableFieldImageConfigurationOutput) ToTemplateTableFieldImageConfigurationPtrOutput() TemplateTableFieldImageConfigurationPtrOutput {
	return o.ToTemplateTableFieldImageConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateTableFieldImageConfigurationOutput) ToTemplateTableFieldImageConfigurationPtrOutputWithContext(ctx context.Context) TemplateTableFieldImageConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTableFieldImageConfiguration) *TemplateTableFieldImageConfiguration {
		return &v
	}).(TemplateTableFieldImageConfigurationPtrOutput)
}

// The sizing options for the table image configuration.
func (o TemplateTableFieldImageConfigurationOutput) SizingOptions() TemplateTableCellImageSizingConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateTableFieldImageConfiguration) *TemplateTableCellImageSizingConfiguration {
		return v.SizingOptions
	}).(TemplateTableCellImageSizingConfigurationPtrOutput)
}

type TemplateTableFieldImageConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateTableFieldImageConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableFieldImageConfiguration)(nil)).Elem()
}

func (o TemplateTableFieldImageConfigurationPtrOutput) ToTemplateTableFieldImageConfigurationPtrOutput() TemplateTableFieldImageConfigurationPtrOutput {
	return o
}

func (o TemplateTableFieldImageConfigurationPtrOutput) ToTemplateTableFieldImageConfigurationPtrOutputWithContext(ctx context.Context) TemplateTableFieldImageConfigurationPtrOutput {
	return o
}

func (o TemplateTableFieldImageConfigurationPtrOutput) Elem() TemplateTableFieldImageConfigurationOutput {
	return o.ApplyT(func(v *TemplateTableFieldImageConfiguration) TemplateTableFieldImageConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateTableFieldImageConfiguration
		return ret
	}).(TemplateTableFieldImageConfigurationOutput)
}

// The sizing options for the table image configuration.
func (o TemplateTableFieldImageConfigurationPtrOutput) SizingOptions() TemplateTableCellImageSizingConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateTableFieldImageConfiguration) *TemplateTableCellImageSizingConfiguration {
		if v == nil {
			return nil
		}
		return v.SizingOptions
	}).(TemplateTableCellImageSizingConfigurationPtrOutput)
}

type TemplateTableFieldLinkConfiguration struct {
	// The URL content (text, icon) for the table link configuration.
	Content TemplateTableFieldLinkContentConfiguration `pulumi:"content"`
	// The URL target (new tab, new window, same tab) for the table link configuration.
	Target TemplateUrlTargetConfiguration `pulumi:"target"`
}

// TemplateTableFieldLinkConfigurationInput is an input type that accepts TemplateTableFieldLinkConfigurationArgs and TemplateTableFieldLinkConfigurationOutput values.
// You can construct a concrete instance of `TemplateTableFieldLinkConfigurationInput` via:
//
//	TemplateTableFieldLinkConfigurationArgs{...}
type TemplateTableFieldLinkConfigurationInput interface {
	pulumi.Input

	ToTemplateTableFieldLinkConfigurationOutput() TemplateTableFieldLinkConfigurationOutput
	ToTemplateTableFieldLinkConfigurationOutputWithContext(context.Context) TemplateTableFieldLinkConfigurationOutput
}

type TemplateTableFieldLinkConfigurationArgs struct {
	// The URL content (text, icon) for the table link configuration.
	Content TemplateTableFieldLinkContentConfigurationInput `pulumi:"content"`
	// The URL target (new tab, new window, same tab) for the table link configuration.
	Target TemplateUrlTargetConfigurationInput `pulumi:"target"`
}

func (TemplateTableFieldLinkConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableFieldLinkConfiguration)(nil)).Elem()
}

func (i TemplateTableFieldLinkConfigurationArgs) ToTemplateTableFieldLinkConfigurationOutput() TemplateTableFieldLinkConfigurationOutput {
	return i.ToTemplateTableFieldLinkConfigurationOutputWithContext(context.Background())
}

func (i TemplateTableFieldLinkConfigurationArgs) ToTemplateTableFieldLinkConfigurationOutputWithContext(ctx context.Context) TemplateTableFieldLinkConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableFieldLinkConfigurationOutput)
}

func (i TemplateTableFieldLinkConfigurationArgs) ToTemplateTableFieldLinkConfigurationPtrOutput() TemplateTableFieldLinkConfigurationPtrOutput {
	return i.ToTemplateTableFieldLinkConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateTableFieldLinkConfigurationArgs) ToTemplateTableFieldLinkConfigurationPtrOutputWithContext(ctx context.Context) TemplateTableFieldLinkConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableFieldLinkConfigurationOutput).ToTemplateTableFieldLinkConfigurationPtrOutputWithContext(ctx)
}

// TemplateTableFieldLinkConfigurationPtrInput is an input type that accepts TemplateTableFieldLinkConfigurationArgs, TemplateTableFieldLinkConfigurationPtr and TemplateTableFieldLinkConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateTableFieldLinkConfigurationPtrInput` via:
//
//	        TemplateTableFieldLinkConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateTableFieldLinkConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateTableFieldLinkConfigurationPtrOutput() TemplateTableFieldLinkConfigurationPtrOutput
	ToTemplateTableFieldLinkConfigurationPtrOutputWithContext(context.Context) TemplateTableFieldLinkConfigurationPtrOutput
}

type templateTableFieldLinkConfigurationPtrType TemplateTableFieldLinkConfigurationArgs

func TemplateTableFieldLinkConfigurationPtr(v *TemplateTableFieldLinkConfigurationArgs) TemplateTableFieldLinkConfigurationPtrInput {
	return (*templateTableFieldLinkConfigurationPtrType)(v)
}

func (*templateTableFieldLinkConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableFieldLinkConfiguration)(nil)).Elem()
}

func (i *templateTableFieldLinkConfigurationPtrType) ToTemplateTableFieldLinkConfigurationPtrOutput() TemplateTableFieldLinkConfigurationPtrOutput {
	return i.ToTemplateTableFieldLinkConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateTableFieldLinkConfigurationPtrType) ToTemplateTableFieldLinkConfigurationPtrOutputWithContext(ctx context.Context) TemplateTableFieldLinkConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableFieldLinkConfigurationPtrOutput)
}

type TemplateTableFieldLinkConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateTableFieldLinkConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableFieldLinkConfiguration)(nil)).Elem()
}

func (o TemplateTableFieldLinkConfigurationOutput) ToTemplateTableFieldLinkConfigurationOutput() TemplateTableFieldLinkConfigurationOutput {
	return o
}

func (o TemplateTableFieldLinkConfigurationOutput) ToTemplateTableFieldLinkConfigurationOutputWithContext(ctx context.Context) TemplateTableFieldLinkConfigurationOutput {
	return o
}

func (o TemplateTableFieldLinkConfigurationOutput) ToTemplateTableFieldLinkConfigurationPtrOutput() TemplateTableFieldLinkConfigurationPtrOutput {
	return o.ToTemplateTableFieldLinkConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateTableFieldLinkConfigurationOutput) ToTemplateTableFieldLinkConfigurationPtrOutputWithContext(ctx context.Context) TemplateTableFieldLinkConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTableFieldLinkConfiguration) *TemplateTableFieldLinkConfiguration {
		return &v
	}).(TemplateTableFieldLinkConfigurationPtrOutput)
}

// The URL content (text, icon) for the table link configuration.
func (o TemplateTableFieldLinkConfigurationOutput) Content() TemplateTableFieldLinkContentConfigurationOutput {
	return o.ApplyT(func(v TemplateTableFieldLinkConfiguration) TemplateTableFieldLinkContentConfiguration {
		return v.Content
	}).(TemplateTableFieldLinkContentConfigurationOutput)
}

// The URL target (new tab, new window, same tab) for the table link configuration.
func (o TemplateTableFieldLinkConfigurationOutput) Target() TemplateUrlTargetConfigurationOutput {
	return o.ApplyT(func(v TemplateTableFieldLinkConfiguration) TemplateUrlTargetConfiguration { return v.Target }).(TemplateUrlTargetConfigurationOutput)
}

type TemplateTableFieldLinkConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateTableFieldLinkConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableFieldLinkConfiguration)(nil)).Elem()
}

func (o TemplateTableFieldLinkConfigurationPtrOutput) ToTemplateTableFieldLinkConfigurationPtrOutput() TemplateTableFieldLinkConfigurationPtrOutput {
	return o
}

func (o TemplateTableFieldLinkConfigurationPtrOutput) ToTemplateTableFieldLinkConfigurationPtrOutputWithContext(ctx context.Context) TemplateTableFieldLinkConfigurationPtrOutput {
	return o
}

func (o TemplateTableFieldLinkConfigurationPtrOutput) Elem() TemplateTableFieldLinkConfigurationOutput {
	return o.ApplyT(func(v *TemplateTableFieldLinkConfiguration) TemplateTableFieldLinkConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateTableFieldLinkConfiguration
		return ret
	}).(TemplateTableFieldLinkConfigurationOutput)
}

// The URL content (text, icon) for the table link configuration.
func (o TemplateTableFieldLinkConfigurationPtrOutput) Content() TemplateTableFieldLinkContentConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateTableFieldLinkConfiguration) *TemplateTableFieldLinkContentConfiguration {
		if v == nil {
			return nil
		}
		return &v.Content
	}).(TemplateTableFieldLinkContentConfigurationPtrOutput)
}

// The URL target (new tab, new window, same tab) for the table link configuration.
func (o TemplateTableFieldLinkConfigurationPtrOutput) Target() TemplateUrlTargetConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateTableFieldLinkConfiguration) *TemplateUrlTargetConfiguration {
		if v == nil {
			return nil
		}
		return &v.Target
	}).(TemplateUrlTargetConfigurationPtrOutput)
}

type TemplateTableFieldLinkContentConfiguration struct {
	// The custom icon content for the table link content configuration.
	CustomIconContent *TemplateTableFieldCustomIconContent `pulumi:"customIconContent"`
	// The custom text content (value, font configuration) for the table link content configuration.
	CustomTextContent *TemplateTableFieldCustomTextContent `pulumi:"customTextContent"`
}

// TemplateTableFieldLinkContentConfigurationInput is an input type that accepts TemplateTableFieldLinkContentConfigurationArgs and TemplateTableFieldLinkContentConfigurationOutput values.
// You can construct a concrete instance of `TemplateTableFieldLinkContentConfigurationInput` via:
//
//	TemplateTableFieldLinkContentConfigurationArgs{...}
type TemplateTableFieldLinkContentConfigurationInput interface {
	pulumi.Input

	ToTemplateTableFieldLinkContentConfigurationOutput() TemplateTableFieldLinkContentConfigurationOutput
	ToTemplateTableFieldLinkContentConfigurationOutputWithContext(context.Context) TemplateTableFieldLinkContentConfigurationOutput
}

type TemplateTableFieldLinkContentConfigurationArgs struct {
	// The custom icon content for the table link content configuration.
	CustomIconContent TemplateTableFieldCustomIconContentPtrInput `pulumi:"customIconContent"`
	// The custom text content (value, font configuration) for the table link content configuration.
	CustomTextContent TemplateTableFieldCustomTextContentPtrInput `pulumi:"customTextContent"`
}

func (TemplateTableFieldLinkContentConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableFieldLinkContentConfiguration)(nil)).Elem()
}

func (i TemplateTableFieldLinkContentConfigurationArgs) ToTemplateTableFieldLinkContentConfigurationOutput() TemplateTableFieldLinkContentConfigurationOutput {
	return i.ToTemplateTableFieldLinkContentConfigurationOutputWithContext(context.Background())
}

func (i TemplateTableFieldLinkContentConfigurationArgs) ToTemplateTableFieldLinkContentConfigurationOutputWithContext(ctx context.Context) TemplateTableFieldLinkContentConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableFieldLinkContentConfigurationOutput)
}

func (i TemplateTableFieldLinkContentConfigurationArgs) ToTemplateTableFieldLinkContentConfigurationPtrOutput() TemplateTableFieldLinkContentConfigurationPtrOutput {
	return i.ToTemplateTableFieldLinkContentConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateTableFieldLinkContentConfigurationArgs) ToTemplateTableFieldLinkContentConfigurationPtrOutputWithContext(ctx context.Context) TemplateTableFieldLinkContentConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableFieldLinkContentConfigurationOutput).ToTemplateTableFieldLinkContentConfigurationPtrOutputWithContext(ctx)
}

// TemplateTableFieldLinkContentConfigurationPtrInput is an input type that accepts TemplateTableFieldLinkContentConfigurationArgs, TemplateTableFieldLinkContentConfigurationPtr and TemplateTableFieldLinkContentConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateTableFieldLinkContentConfigurationPtrInput` via:
//
//	        TemplateTableFieldLinkContentConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateTableFieldLinkContentConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateTableFieldLinkContentConfigurationPtrOutput() TemplateTableFieldLinkContentConfigurationPtrOutput
	ToTemplateTableFieldLinkContentConfigurationPtrOutputWithContext(context.Context) TemplateTableFieldLinkContentConfigurationPtrOutput
}

type templateTableFieldLinkContentConfigurationPtrType TemplateTableFieldLinkContentConfigurationArgs

func TemplateTableFieldLinkContentConfigurationPtr(v *TemplateTableFieldLinkContentConfigurationArgs) TemplateTableFieldLinkContentConfigurationPtrInput {
	return (*templateTableFieldLinkContentConfigurationPtrType)(v)
}

func (*templateTableFieldLinkContentConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableFieldLinkContentConfiguration)(nil)).Elem()
}

func (i *templateTableFieldLinkContentConfigurationPtrType) ToTemplateTableFieldLinkContentConfigurationPtrOutput() TemplateTableFieldLinkContentConfigurationPtrOutput {
	return i.ToTemplateTableFieldLinkContentConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateTableFieldLinkContentConfigurationPtrType) ToTemplateTableFieldLinkContentConfigurationPtrOutputWithContext(ctx context.Context) TemplateTableFieldLinkContentConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableFieldLinkContentConfigurationPtrOutput)
}

type TemplateTableFieldLinkContentConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateTableFieldLinkContentConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableFieldLinkContentConfiguration)(nil)).Elem()
}

func (o TemplateTableFieldLinkContentConfigurationOutput) ToTemplateTableFieldLinkContentConfigurationOutput() TemplateTableFieldLinkContentConfigurationOutput {
	return o
}

func (o TemplateTableFieldLinkContentConfigurationOutput) ToTemplateTableFieldLinkContentConfigurationOutputWithContext(ctx context.Context) TemplateTableFieldLinkContentConfigurationOutput {
	return o
}

func (o TemplateTableFieldLinkContentConfigurationOutput) ToTemplateTableFieldLinkContentConfigurationPtrOutput() TemplateTableFieldLinkContentConfigurationPtrOutput {
	return o.ToTemplateTableFieldLinkContentConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateTableFieldLinkContentConfigurationOutput) ToTemplateTableFieldLinkContentConfigurationPtrOutputWithContext(ctx context.Context) TemplateTableFieldLinkContentConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTableFieldLinkContentConfiguration) *TemplateTableFieldLinkContentConfiguration {
		return &v
	}).(TemplateTableFieldLinkContentConfigurationPtrOutput)
}

// The custom icon content for the table link content configuration.
func (o TemplateTableFieldLinkContentConfigurationOutput) CustomIconContent() TemplateTableFieldCustomIconContentPtrOutput {
	return o.ApplyT(func(v TemplateTableFieldLinkContentConfiguration) *TemplateTableFieldCustomIconContent {
		return v.CustomIconContent
	}).(TemplateTableFieldCustomIconContentPtrOutput)
}

// The custom text content (value, font configuration) for the table link content configuration.
func (o TemplateTableFieldLinkContentConfigurationOutput) CustomTextContent() TemplateTableFieldCustomTextContentPtrOutput {
	return o.ApplyT(func(v TemplateTableFieldLinkContentConfiguration) *TemplateTableFieldCustomTextContent {
		return v.CustomTextContent
	}).(TemplateTableFieldCustomTextContentPtrOutput)
}

type TemplateTableFieldLinkContentConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateTableFieldLinkContentConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableFieldLinkContentConfiguration)(nil)).Elem()
}

func (o TemplateTableFieldLinkContentConfigurationPtrOutput) ToTemplateTableFieldLinkContentConfigurationPtrOutput() TemplateTableFieldLinkContentConfigurationPtrOutput {
	return o
}

func (o TemplateTableFieldLinkContentConfigurationPtrOutput) ToTemplateTableFieldLinkContentConfigurationPtrOutputWithContext(ctx context.Context) TemplateTableFieldLinkContentConfigurationPtrOutput {
	return o
}

func (o TemplateTableFieldLinkContentConfigurationPtrOutput) Elem() TemplateTableFieldLinkContentConfigurationOutput {
	return o.ApplyT(func(v *TemplateTableFieldLinkContentConfiguration) TemplateTableFieldLinkContentConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateTableFieldLinkContentConfiguration
		return ret
	}).(TemplateTableFieldLinkContentConfigurationOutput)
}

// The custom icon content for the table link content configuration.
func (o TemplateTableFieldLinkContentConfigurationPtrOutput) CustomIconContent() TemplateTableFieldCustomIconContentPtrOutput {
	return o.ApplyT(func(v *TemplateTableFieldLinkContentConfiguration) *TemplateTableFieldCustomIconContent {
		if v == nil {
			return nil
		}
		return v.CustomIconContent
	}).(TemplateTableFieldCustomIconContentPtrOutput)
}

// The custom text content (value, font configuration) for the table link content configuration.
func (o TemplateTableFieldLinkContentConfigurationPtrOutput) CustomTextContent() TemplateTableFieldCustomTextContentPtrOutput {
	return o.ApplyT(func(v *TemplateTableFieldLinkContentConfiguration) *TemplateTableFieldCustomTextContent {
		if v == nil {
			return nil
		}
		return v.CustomTextContent
	}).(TemplateTableFieldCustomTextContentPtrOutput)
}

type TemplateTableFieldOption struct {
	// The custom label for a table field.
	CustomLabel *string `pulumi:"customLabel"`
	// The field ID for a table field.
	FieldId string `pulumi:"fieldId"`
	// The URL configuration for a table field.
	UrlStyling *TemplateTableFieldUrlConfiguration `pulumi:"urlStyling"`
	// The visibility of a table field.
	Visibility interface{} `pulumi:"visibility"`
	// String based length that is composed of value and unit in px
	Width *string `pulumi:"width"`
}

// TemplateTableFieldOptionInput is an input type that accepts TemplateTableFieldOptionArgs and TemplateTableFieldOptionOutput values.
// You can construct a concrete instance of `TemplateTableFieldOptionInput` via:
//
//	TemplateTableFieldOptionArgs{...}
type TemplateTableFieldOptionInput interface {
	pulumi.Input

	ToTemplateTableFieldOptionOutput() TemplateTableFieldOptionOutput
	ToTemplateTableFieldOptionOutputWithContext(context.Context) TemplateTableFieldOptionOutput
}

type TemplateTableFieldOptionArgs struct {
	// The custom label for a table field.
	CustomLabel pulumi.StringPtrInput `pulumi:"customLabel"`
	// The field ID for a table field.
	FieldId pulumi.StringInput `pulumi:"fieldId"`
	// The URL configuration for a table field.
	UrlStyling TemplateTableFieldUrlConfigurationPtrInput `pulumi:"urlStyling"`
	// The visibility of a table field.
	Visibility pulumi.Input `pulumi:"visibility"`
	// String based length that is composed of value and unit in px
	Width pulumi.StringPtrInput `pulumi:"width"`
}

func (TemplateTableFieldOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableFieldOption)(nil)).Elem()
}

func (i TemplateTableFieldOptionArgs) ToTemplateTableFieldOptionOutput() TemplateTableFieldOptionOutput {
	return i.ToTemplateTableFieldOptionOutputWithContext(context.Background())
}

func (i TemplateTableFieldOptionArgs) ToTemplateTableFieldOptionOutputWithContext(ctx context.Context) TemplateTableFieldOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableFieldOptionOutput)
}

// TemplateTableFieldOptionArrayInput is an input type that accepts TemplateTableFieldOptionArray and TemplateTableFieldOptionArrayOutput values.
// You can construct a concrete instance of `TemplateTableFieldOptionArrayInput` via:
//
//	TemplateTableFieldOptionArray{ TemplateTableFieldOptionArgs{...} }
type TemplateTableFieldOptionArrayInput interface {
	pulumi.Input

	ToTemplateTableFieldOptionArrayOutput() TemplateTableFieldOptionArrayOutput
	ToTemplateTableFieldOptionArrayOutputWithContext(context.Context) TemplateTableFieldOptionArrayOutput
}

type TemplateTableFieldOptionArray []TemplateTableFieldOptionInput

func (TemplateTableFieldOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateTableFieldOption)(nil)).Elem()
}

func (i TemplateTableFieldOptionArray) ToTemplateTableFieldOptionArrayOutput() TemplateTableFieldOptionArrayOutput {
	return i.ToTemplateTableFieldOptionArrayOutputWithContext(context.Background())
}

func (i TemplateTableFieldOptionArray) ToTemplateTableFieldOptionArrayOutputWithContext(ctx context.Context) TemplateTableFieldOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableFieldOptionArrayOutput)
}

type TemplateTableFieldOptionOutput struct{ *pulumi.OutputState }

func (TemplateTableFieldOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableFieldOption)(nil)).Elem()
}

func (o TemplateTableFieldOptionOutput) ToTemplateTableFieldOptionOutput() TemplateTableFieldOptionOutput {
	return o
}

func (o TemplateTableFieldOptionOutput) ToTemplateTableFieldOptionOutputWithContext(ctx context.Context) TemplateTableFieldOptionOutput {
	return o
}

// The custom label for a table field.
func (o TemplateTableFieldOptionOutput) CustomLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateTableFieldOption) *string { return v.CustomLabel }).(pulumi.StringPtrOutput)
}

// The field ID for a table field.
func (o TemplateTableFieldOptionOutput) FieldId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateTableFieldOption) string { return v.FieldId }).(pulumi.StringOutput)
}

// The URL configuration for a table field.
func (o TemplateTableFieldOptionOutput) UrlStyling() TemplateTableFieldUrlConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateTableFieldOption) *TemplateTableFieldUrlConfiguration { return v.UrlStyling }).(TemplateTableFieldUrlConfigurationPtrOutput)
}

// The visibility of a table field.
func (o TemplateTableFieldOptionOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateTableFieldOption) interface{} { return v.Visibility }).(pulumi.AnyOutput)
}

// String based length that is composed of value and unit in px
func (o TemplateTableFieldOptionOutput) Width() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateTableFieldOption) *string { return v.Width }).(pulumi.StringPtrOutput)
}

type TemplateTableFieldOptionArrayOutput struct{ *pulumi.OutputState }

func (TemplateTableFieldOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateTableFieldOption)(nil)).Elem()
}

func (o TemplateTableFieldOptionArrayOutput) ToTemplateTableFieldOptionArrayOutput() TemplateTableFieldOptionArrayOutput {
	return o
}

func (o TemplateTableFieldOptionArrayOutput) ToTemplateTableFieldOptionArrayOutputWithContext(ctx context.Context) TemplateTableFieldOptionArrayOutput {
	return o
}

func (o TemplateTableFieldOptionArrayOutput) Index(i pulumi.IntInput) TemplateTableFieldOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateTableFieldOption {
		return vs[0].([]TemplateTableFieldOption)[vs[1].(int)]
	}).(TemplateTableFieldOptionOutput)
}

type TemplateTableFieldOptions struct {
	// The order of the field IDs that are configured as field options for a table visual.
	Order []string `pulumi:"order"`
	// The settings for the pinned columns of a table visual.
	PinnedFieldOptions *TemplateTablePinnedFieldOptions `pulumi:"pinnedFieldOptions"`
	// The field options to be configured to a table.
	SelectedFieldOptions []TemplateTableFieldOption `pulumi:"selectedFieldOptions"`
}

// TemplateTableFieldOptionsInput is an input type that accepts TemplateTableFieldOptionsArgs and TemplateTableFieldOptionsOutput values.
// You can construct a concrete instance of `TemplateTableFieldOptionsInput` via:
//
//	TemplateTableFieldOptionsArgs{...}
type TemplateTableFieldOptionsInput interface {
	pulumi.Input

	ToTemplateTableFieldOptionsOutput() TemplateTableFieldOptionsOutput
	ToTemplateTableFieldOptionsOutputWithContext(context.Context) TemplateTableFieldOptionsOutput
}

type TemplateTableFieldOptionsArgs struct {
	// The order of the field IDs that are configured as field options for a table visual.
	Order pulumi.StringArrayInput `pulumi:"order"`
	// The settings for the pinned columns of a table visual.
	PinnedFieldOptions TemplateTablePinnedFieldOptionsPtrInput `pulumi:"pinnedFieldOptions"`
	// The field options to be configured to a table.
	SelectedFieldOptions TemplateTableFieldOptionArrayInput `pulumi:"selectedFieldOptions"`
}

func (TemplateTableFieldOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableFieldOptions)(nil)).Elem()
}

func (i TemplateTableFieldOptionsArgs) ToTemplateTableFieldOptionsOutput() TemplateTableFieldOptionsOutput {
	return i.ToTemplateTableFieldOptionsOutputWithContext(context.Background())
}

func (i TemplateTableFieldOptionsArgs) ToTemplateTableFieldOptionsOutputWithContext(ctx context.Context) TemplateTableFieldOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableFieldOptionsOutput)
}

func (i TemplateTableFieldOptionsArgs) ToTemplateTableFieldOptionsPtrOutput() TemplateTableFieldOptionsPtrOutput {
	return i.ToTemplateTableFieldOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateTableFieldOptionsArgs) ToTemplateTableFieldOptionsPtrOutputWithContext(ctx context.Context) TemplateTableFieldOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableFieldOptionsOutput).ToTemplateTableFieldOptionsPtrOutputWithContext(ctx)
}

// TemplateTableFieldOptionsPtrInput is an input type that accepts TemplateTableFieldOptionsArgs, TemplateTableFieldOptionsPtr and TemplateTableFieldOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateTableFieldOptionsPtrInput` via:
//
//	        TemplateTableFieldOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateTableFieldOptionsPtrInput interface {
	pulumi.Input

	ToTemplateTableFieldOptionsPtrOutput() TemplateTableFieldOptionsPtrOutput
	ToTemplateTableFieldOptionsPtrOutputWithContext(context.Context) TemplateTableFieldOptionsPtrOutput
}

type templateTableFieldOptionsPtrType TemplateTableFieldOptionsArgs

func TemplateTableFieldOptionsPtr(v *TemplateTableFieldOptionsArgs) TemplateTableFieldOptionsPtrInput {
	return (*templateTableFieldOptionsPtrType)(v)
}

func (*templateTableFieldOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableFieldOptions)(nil)).Elem()
}

func (i *templateTableFieldOptionsPtrType) ToTemplateTableFieldOptionsPtrOutput() TemplateTableFieldOptionsPtrOutput {
	return i.ToTemplateTableFieldOptionsPtrOutputWithContext(context.Background())
}

func (i *templateTableFieldOptionsPtrType) ToTemplateTableFieldOptionsPtrOutputWithContext(ctx context.Context) TemplateTableFieldOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableFieldOptionsPtrOutput)
}

type TemplateTableFieldOptionsOutput struct{ *pulumi.OutputState }

func (TemplateTableFieldOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableFieldOptions)(nil)).Elem()
}

func (o TemplateTableFieldOptionsOutput) ToTemplateTableFieldOptionsOutput() TemplateTableFieldOptionsOutput {
	return o
}

func (o TemplateTableFieldOptionsOutput) ToTemplateTableFieldOptionsOutputWithContext(ctx context.Context) TemplateTableFieldOptionsOutput {
	return o
}

func (o TemplateTableFieldOptionsOutput) ToTemplateTableFieldOptionsPtrOutput() TemplateTableFieldOptionsPtrOutput {
	return o.ToTemplateTableFieldOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateTableFieldOptionsOutput) ToTemplateTableFieldOptionsPtrOutputWithContext(ctx context.Context) TemplateTableFieldOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTableFieldOptions) *TemplateTableFieldOptions {
		return &v
	}).(TemplateTableFieldOptionsPtrOutput)
}

// The order of the field IDs that are configured as field options for a table visual.
func (o TemplateTableFieldOptionsOutput) Order() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TemplateTableFieldOptions) []string { return v.Order }).(pulumi.StringArrayOutput)
}

// The settings for the pinned columns of a table visual.
func (o TemplateTableFieldOptionsOutput) PinnedFieldOptions() TemplateTablePinnedFieldOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTableFieldOptions) *TemplateTablePinnedFieldOptions { return v.PinnedFieldOptions }).(TemplateTablePinnedFieldOptionsPtrOutput)
}

// The field options to be configured to a table.
func (o TemplateTableFieldOptionsOutput) SelectedFieldOptions() TemplateTableFieldOptionArrayOutput {
	return o.ApplyT(func(v TemplateTableFieldOptions) []TemplateTableFieldOption { return v.SelectedFieldOptions }).(TemplateTableFieldOptionArrayOutput)
}

type TemplateTableFieldOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateTableFieldOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableFieldOptions)(nil)).Elem()
}

func (o TemplateTableFieldOptionsPtrOutput) ToTemplateTableFieldOptionsPtrOutput() TemplateTableFieldOptionsPtrOutput {
	return o
}

func (o TemplateTableFieldOptionsPtrOutput) ToTemplateTableFieldOptionsPtrOutputWithContext(ctx context.Context) TemplateTableFieldOptionsPtrOutput {
	return o
}

func (o TemplateTableFieldOptionsPtrOutput) Elem() TemplateTableFieldOptionsOutput {
	return o.ApplyT(func(v *TemplateTableFieldOptions) TemplateTableFieldOptions {
		if v != nil {
			return *v
		}
		var ret TemplateTableFieldOptions
		return ret
	}).(TemplateTableFieldOptionsOutput)
}

// The order of the field IDs that are configured as field options for a table visual.
func (o TemplateTableFieldOptionsPtrOutput) Order() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TemplateTableFieldOptions) []string {
		if v == nil {
			return nil
		}
		return v.Order
	}).(pulumi.StringArrayOutput)
}

// The settings for the pinned columns of a table visual.
func (o TemplateTableFieldOptionsPtrOutput) PinnedFieldOptions() TemplateTablePinnedFieldOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTableFieldOptions) *TemplateTablePinnedFieldOptions {
		if v == nil {
			return nil
		}
		return v.PinnedFieldOptions
	}).(TemplateTablePinnedFieldOptionsPtrOutput)
}

// The field options to be configured to a table.
func (o TemplateTableFieldOptionsPtrOutput) SelectedFieldOptions() TemplateTableFieldOptionArrayOutput {
	return o.ApplyT(func(v *TemplateTableFieldOptions) []TemplateTableFieldOption {
		if v == nil {
			return nil
		}
		return v.SelectedFieldOptions
	}).(TemplateTableFieldOptionArrayOutput)
}

type TemplateTableFieldUrlConfiguration struct {
	// The image configuration of a table field URL.
	ImageConfiguration *TemplateTableFieldImageConfiguration `pulumi:"imageConfiguration"`
	// The link configuration of a table field URL.
	LinkConfiguration *TemplateTableFieldLinkConfiguration `pulumi:"linkConfiguration"`
}

// TemplateTableFieldUrlConfigurationInput is an input type that accepts TemplateTableFieldUrlConfigurationArgs and TemplateTableFieldUrlConfigurationOutput values.
// You can construct a concrete instance of `TemplateTableFieldUrlConfigurationInput` via:
//
//	TemplateTableFieldUrlConfigurationArgs{...}
type TemplateTableFieldUrlConfigurationInput interface {
	pulumi.Input

	ToTemplateTableFieldUrlConfigurationOutput() TemplateTableFieldUrlConfigurationOutput
	ToTemplateTableFieldUrlConfigurationOutputWithContext(context.Context) TemplateTableFieldUrlConfigurationOutput
}

type TemplateTableFieldUrlConfigurationArgs struct {
	// The image configuration of a table field URL.
	ImageConfiguration TemplateTableFieldImageConfigurationPtrInput `pulumi:"imageConfiguration"`
	// The link configuration of a table field URL.
	LinkConfiguration TemplateTableFieldLinkConfigurationPtrInput `pulumi:"linkConfiguration"`
}

func (TemplateTableFieldUrlConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableFieldUrlConfiguration)(nil)).Elem()
}

func (i TemplateTableFieldUrlConfigurationArgs) ToTemplateTableFieldUrlConfigurationOutput() TemplateTableFieldUrlConfigurationOutput {
	return i.ToTemplateTableFieldUrlConfigurationOutputWithContext(context.Background())
}

func (i TemplateTableFieldUrlConfigurationArgs) ToTemplateTableFieldUrlConfigurationOutputWithContext(ctx context.Context) TemplateTableFieldUrlConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableFieldUrlConfigurationOutput)
}

func (i TemplateTableFieldUrlConfigurationArgs) ToTemplateTableFieldUrlConfigurationPtrOutput() TemplateTableFieldUrlConfigurationPtrOutput {
	return i.ToTemplateTableFieldUrlConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateTableFieldUrlConfigurationArgs) ToTemplateTableFieldUrlConfigurationPtrOutputWithContext(ctx context.Context) TemplateTableFieldUrlConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableFieldUrlConfigurationOutput).ToTemplateTableFieldUrlConfigurationPtrOutputWithContext(ctx)
}

// TemplateTableFieldUrlConfigurationPtrInput is an input type that accepts TemplateTableFieldUrlConfigurationArgs, TemplateTableFieldUrlConfigurationPtr and TemplateTableFieldUrlConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateTableFieldUrlConfigurationPtrInput` via:
//
//	        TemplateTableFieldUrlConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateTableFieldUrlConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateTableFieldUrlConfigurationPtrOutput() TemplateTableFieldUrlConfigurationPtrOutput
	ToTemplateTableFieldUrlConfigurationPtrOutputWithContext(context.Context) TemplateTableFieldUrlConfigurationPtrOutput
}

type templateTableFieldUrlConfigurationPtrType TemplateTableFieldUrlConfigurationArgs

func TemplateTableFieldUrlConfigurationPtr(v *TemplateTableFieldUrlConfigurationArgs) TemplateTableFieldUrlConfigurationPtrInput {
	return (*templateTableFieldUrlConfigurationPtrType)(v)
}

func (*templateTableFieldUrlConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableFieldUrlConfiguration)(nil)).Elem()
}

func (i *templateTableFieldUrlConfigurationPtrType) ToTemplateTableFieldUrlConfigurationPtrOutput() TemplateTableFieldUrlConfigurationPtrOutput {
	return i.ToTemplateTableFieldUrlConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateTableFieldUrlConfigurationPtrType) ToTemplateTableFieldUrlConfigurationPtrOutputWithContext(ctx context.Context) TemplateTableFieldUrlConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableFieldUrlConfigurationPtrOutput)
}

type TemplateTableFieldUrlConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateTableFieldUrlConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableFieldUrlConfiguration)(nil)).Elem()
}

func (o TemplateTableFieldUrlConfigurationOutput) ToTemplateTableFieldUrlConfigurationOutput() TemplateTableFieldUrlConfigurationOutput {
	return o
}

func (o TemplateTableFieldUrlConfigurationOutput) ToTemplateTableFieldUrlConfigurationOutputWithContext(ctx context.Context) TemplateTableFieldUrlConfigurationOutput {
	return o
}

func (o TemplateTableFieldUrlConfigurationOutput) ToTemplateTableFieldUrlConfigurationPtrOutput() TemplateTableFieldUrlConfigurationPtrOutput {
	return o.ToTemplateTableFieldUrlConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateTableFieldUrlConfigurationOutput) ToTemplateTableFieldUrlConfigurationPtrOutputWithContext(ctx context.Context) TemplateTableFieldUrlConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTableFieldUrlConfiguration) *TemplateTableFieldUrlConfiguration {
		return &v
	}).(TemplateTableFieldUrlConfigurationPtrOutput)
}

// The image configuration of a table field URL.
func (o TemplateTableFieldUrlConfigurationOutput) ImageConfiguration() TemplateTableFieldImageConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateTableFieldUrlConfiguration) *TemplateTableFieldImageConfiguration {
		return v.ImageConfiguration
	}).(TemplateTableFieldImageConfigurationPtrOutput)
}

// The link configuration of a table field URL.
func (o TemplateTableFieldUrlConfigurationOutput) LinkConfiguration() TemplateTableFieldLinkConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateTableFieldUrlConfiguration) *TemplateTableFieldLinkConfiguration {
		return v.LinkConfiguration
	}).(TemplateTableFieldLinkConfigurationPtrOutput)
}

type TemplateTableFieldUrlConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateTableFieldUrlConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableFieldUrlConfiguration)(nil)).Elem()
}

func (o TemplateTableFieldUrlConfigurationPtrOutput) ToTemplateTableFieldUrlConfigurationPtrOutput() TemplateTableFieldUrlConfigurationPtrOutput {
	return o
}

func (o TemplateTableFieldUrlConfigurationPtrOutput) ToTemplateTableFieldUrlConfigurationPtrOutputWithContext(ctx context.Context) TemplateTableFieldUrlConfigurationPtrOutput {
	return o
}

func (o TemplateTableFieldUrlConfigurationPtrOutput) Elem() TemplateTableFieldUrlConfigurationOutput {
	return o.ApplyT(func(v *TemplateTableFieldUrlConfiguration) TemplateTableFieldUrlConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateTableFieldUrlConfiguration
		return ret
	}).(TemplateTableFieldUrlConfigurationOutput)
}

// The image configuration of a table field URL.
func (o TemplateTableFieldUrlConfigurationPtrOutput) ImageConfiguration() TemplateTableFieldImageConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateTableFieldUrlConfiguration) *TemplateTableFieldImageConfiguration {
		if v == nil {
			return nil
		}
		return v.ImageConfiguration
	}).(TemplateTableFieldImageConfigurationPtrOutput)
}

// The link configuration of a table field URL.
func (o TemplateTableFieldUrlConfigurationPtrOutput) LinkConfiguration() TemplateTableFieldLinkConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateTableFieldUrlConfiguration) *TemplateTableFieldLinkConfiguration {
		if v == nil {
			return nil
		}
		return v.LinkConfiguration
	}).(TemplateTableFieldLinkConfigurationPtrOutput)
}

type TemplateTableFieldWells struct {
	// The aggregated field well for the table.
	TableAggregatedFieldWells *TemplateTableAggregatedFieldWells `pulumi:"tableAggregatedFieldWells"`
	// The unaggregated field well for the table.
	TableUnaggregatedFieldWells *TemplateTableUnaggregatedFieldWells `pulumi:"tableUnaggregatedFieldWells"`
}

// TemplateTableFieldWellsInput is an input type that accepts TemplateTableFieldWellsArgs and TemplateTableFieldWellsOutput values.
// You can construct a concrete instance of `TemplateTableFieldWellsInput` via:
//
//	TemplateTableFieldWellsArgs{...}
type TemplateTableFieldWellsInput interface {
	pulumi.Input

	ToTemplateTableFieldWellsOutput() TemplateTableFieldWellsOutput
	ToTemplateTableFieldWellsOutputWithContext(context.Context) TemplateTableFieldWellsOutput
}

type TemplateTableFieldWellsArgs struct {
	// The aggregated field well for the table.
	TableAggregatedFieldWells TemplateTableAggregatedFieldWellsPtrInput `pulumi:"tableAggregatedFieldWells"`
	// The unaggregated field well for the table.
	TableUnaggregatedFieldWells TemplateTableUnaggregatedFieldWellsPtrInput `pulumi:"tableUnaggregatedFieldWells"`
}

func (TemplateTableFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableFieldWells)(nil)).Elem()
}

func (i TemplateTableFieldWellsArgs) ToTemplateTableFieldWellsOutput() TemplateTableFieldWellsOutput {
	return i.ToTemplateTableFieldWellsOutputWithContext(context.Background())
}

func (i TemplateTableFieldWellsArgs) ToTemplateTableFieldWellsOutputWithContext(ctx context.Context) TemplateTableFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableFieldWellsOutput)
}

func (i TemplateTableFieldWellsArgs) ToTemplateTableFieldWellsPtrOutput() TemplateTableFieldWellsPtrOutput {
	return i.ToTemplateTableFieldWellsPtrOutputWithContext(context.Background())
}

func (i TemplateTableFieldWellsArgs) ToTemplateTableFieldWellsPtrOutputWithContext(ctx context.Context) TemplateTableFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableFieldWellsOutput).ToTemplateTableFieldWellsPtrOutputWithContext(ctx)
}

// TemplateTableFieldWellsPtrInput is an input type that accepts TemplateTableFieldWellsArgs, TemplateTableFieldWellsPtr and TemplateTableFieldWellsPtrOutput values.
// You can construct a concrete instance of `TemplateTableFieldWellsPtrInput` via:
//
//	        TemplateTableFieldWellsArgs{...}
//
//	or:
//
//	        nil
type TemplateTableFieldWellsPtrInput interface {
	pulumi.Input

	ToTemplateTableFieldWellsPtrOutput() TemplateTableFieldWellsPtrOutput
	ToTemplateTableFieldWellsPtrOutputWithContext(context.Context) TemplateTableFieldWellsPtrOutput
}

type templateTableFieldWellsPtrType TemplateTableFieldWellsArgs

func TemplateTableFieldWellsPtr(v *TemplateTableFieldWellsArgs) TemplateTableFieldWellsPtrInput {
	return (*templateTableFieldWellsPtrType)(v)
}

func (*templateTableFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableFieldWells)(nil)).Elem()
}

func (i *templateTableFieldWellsPtrType) ToTemplateTableFieldWellsPtrOutput() TemplateTableFieldWellsPtrOutput {
	return i.ToTemplateTableFieldWellsPtrOutputWithContext(context.Background())
}

func (i *templateTableFieldWellsPtrType) ToTemplateTableFieldWellsPtrOutputWithContext(ctx context.Context) TemplateTableFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableFieldWellsPtrOutput)
}

type TemplateTableFieldWellsOutput struct{ *pulumi.OutputState }

func (TemplateTableFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableFieldWells)(nil)).Elem()
}

func (o TemplateTableFieldWellsOutput) ToTemplateTableFieldWellsOutput() TemplateTableFieldWellsOutput {
	return o
}

func (o TemplateTableFieldWellsOutput) ToTemplateTableFieldWellsOutputWithContext(ctx context.Context) TemplateTableFieldWellsOutput {
	return o
}

func (o TemplateTableFieldWellsOutput) ToTemplateTableFieldWellsPtrOutput() TemplateTableFieldWellsPtrOutput {
	return o.ToTemplateTableFieldWellsPtrOutputWithContext(context.Background())
}

func (o TemplateTableFieldWellsOutput) ToTemplateTableFieldWellsPtrOutputWithContext(ctx context.Context) TemplateTableFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTableFieldWells) *TemplateTableFieldWells {
		return &v
	}).(TemplateTableFieldWellsPtrOutput)
}

// The aggregated field well for the table.
func (o TemplateTableFieldWellsOutput) TableAggregatedFieldWells() TemplateTableAggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v TemplateTableFieldWells) *TemplateTableAggregatedFieldWells { return v.TableAggregatedFieldWells }).(TemplateTableAggregatedFieldWellsPtrOutput)
}

// The unaggregated field well for the table.
func (o TemplateTableFieldWellsOutput) TableUnaggregatedFieldWells() TemplateTableUnaggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v TemplateTableFieldWells) *TemplateTableUnaggregatedFieldWells {
		return v.TableUnaggregatedFieldWells
	}).(TemplateTableUnaggregatedFieldWellsPtrOutput)
}

type TemplateTableFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (TemplateTableFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableFieldWells)(nil)).Elem()
}

func (o TemplateTableFieldWellsPtrOutput) ToTemplateTableFieldWellsPtrOutput() TemplateTableFieldWellsPtrOutput {
	return o
}

func (o TemplateTableFieldWellsPtrOutput) ToTemplateTableFieldWellsPtrOutputWithContext(ctx context.Context) TemplateTableFieldWellsPtrOutput {
	return o
}

func (o TemplateTableFieldWellsPtrOutput) Elem() TemplateTableFieldWellsOutput {
	return o.ApplyT(func(v *TemplateTableFieldWells) TemplateTableFieldWells {
		if v != nil {
			return *v
		}
		var ret TemplateTableFieldWells
		return ret
	}).(TemplateTableFieldWellsOutput)
}

// The aggregated field well for the table.
func (o TemplateTableFieldWellsPtrOutput) TableAggregatedFieldWells() TemplateTableAggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v *TemplateTableFieldWells) *TemplateTableAggregatedFieldWells {
		if v == nil {
			return nil
		}
		return v.TableAggregatedFieldWells
	}).(TemplateTableAggregatedFieldWellsPtrOutput)
}

// The unaggregated field well for the table.
func (o TemplateTableFieldWellsPtrOutput) TableUnaggregatedFieldWells() TemplateTableUnaggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v *TemplateTableFieldWells) *TemplateTableUnaggregatedFieldWells {
		if v == nil {
			return nil
		}
		return v.TableUnaggregatedFieldWells
	}).(TemplateTableUnaggregatedFieldWellsPtrOutput)
}

type TemplateTableInlineVisualization struct {
	// The configuration of the inline visualization of the data bars within a chart.
	DataBars *TemplateDataBarsOptions `pulumi:"dataBars"`
}

// TemplateTableInlineVisualizationInput is an input type that accepts TemplateTableInlineVisualizationArgs and TemplateTableInlineVisualizationOutput values.
// You can construct a concrete instance of `TemplateTableInlineVisualizationInput` via:
//
//	TemplateTableInlineVisualizationArgs{...}
type TemplateTableInlineVisualizationInput interface {
	pulumi.Input

	ToTemplateTableInlineVisualizationOutput() TemplateTableInlineVisualizationOutput
	ToTemplateTableInlineVisualizationOutputWithContext(context.Context) TemplateTableInlineVisualizationOutput
}

type TemplateTableInlineVisualizationArgs struct {
	// The configuration of the inline visualization of the data bars within a chart.
	DataBars TemplateDataBarsOptionsPtrInput `pulumi:"dataBars"`
}

func (TemplateTableInlineVisualizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableInlineVisualization)(nil)).Elem()
}

func (i TemplateTableInlineVisualizationArgs) ToTemplateTableInlineVisualizationOutput() TemplateTableInlineVisualizationOutput {
	return i.ToTemplateTableInlineVisualizationOutputWithContext(context.Background())
}

func (i TemplateTableInlineVisualizationArgs) ToTemplateTableInlineVisualizationOutputWithContext(ctx context.Context) TemplateTableInlineVisualizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableInlineVisualizationOutput)
}

// TemplateTableInlineVisualizationArrayInput is an input type that accepts TemplateTableInlineVisualizationArray and TemplateTableInlineVisualizationArrayOutput values.
// You can construct a concrete instance of `TemplateTableInlineVisualizationArrayInput` via:
//
//	TemplateTableInlineVisualizationArray{ TemplateTableInlineVisualizationArgs{...} }
type TemplateTableInlineVisualizationArrayInput interface {
	pulumi.Input

	ToTemplateTableInlineVisualizationArrayOutput() TemplateTableInlineVisualizationArrayOutput
	ToTemplateTableInlineVisualizationArrayOutputWithContext(context.Context) TemplateTableInlineVisualizationArrayOutput
}

type TemplateTableInlineVisualizationArray []TemplateTableInlineVisualizationInput

func (TemplateTableInlineVisualizationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateTableInlineVisualization)(nil)).Elem()
}

func (i TemplateTableInlineVisualizationArray) ToTemplateTableInlineVisualizationArrayOutput() TemplateTableInlineVisualizationArrayOutput {
	return i.ToTemplateTableInlineVisualizationArrayOutputWithContext(context.Background())
}

func (i TemplateTableInlineVisualizationArray) ToTemplateTableInlineVisualizationArrayOutputWithContext(ctx context.Context) TemplateTableInlineVisualizationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableInlineVisualizationArrayOutput)
}

type TemplateTableInlineVisualizationOutput struct{ *pulumi.OutputState }

func (TemplateTableInlineVisualizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableInlineVisualization)(nil)).Elem()
}

func (o TemplateTableInlineVisualizationOutput) ToTemplateTableInlineVisualizationOutput() TemplateTableInlineVisualizationOutput {
	return o
}

func (o TemplateTableInlineVisualizationOutput) ToTemplateTableInlineVisualizationOutputWithContext(ctx context.Context) TemplateTableInlineVisualizationOutput {
	return o
}

// The configuration of the inline visualization of the data bars within a chart.
func (o TemplateTableInlineVisualizationOutput) DataBars() TemplateDataBarsOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTableInlineVisualization) *TemplateDataBarsOptions { return v.DataBars }).(TemplateDataBarsOptionsPtrOutput)
}

type TemplateTableInlineVisualizationArrayOutput struct{ *pulumi.OutputState }

func (TemplateTableInlineVisualizationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateTableInlineVisualization)(nil)).Elem()
}

func (o TemplateTableInlineVisualizationArrayOutput) ToTemplateTableInlineVisualizationArrayOutput() TemplateTableInlineVisualizationArrayOutput {
	return o
}

func (o TemplateTableInlineVisualizationArrayOutput) ToTemplateTableInlineVisualizationArrayOutputWithContext(ctx context.Context) TemplateTableInlineVisualizationArrayOutput {
	return o
}

func (o TemplateTableInlineVisualizationArrayOutput) Index(i pulumi.IntInput) TemplateTableInlineVisualizationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateTableInlineVisualization {
		return vs[0].([]TemplateTableInlineVisualization)[vs[1].(int)]
	}).(TemplateTableInlineVisualizationOutput)
}

type TemplateTableOptions struct {
	// The table cell style of table cells.
	CellStyle *TemplateTableCellStyle `pulumi:"cellStyle"`
	// The table cell style of a table header.
	HeaderStyle *TemplateTableCellStyle `pulumi:"headerStyle"`
	// The orientation (vertical, horizontal) for a table.
	Orientation *TemplateTableOrientation `pulumi:"orientation"`
	// The row alternate color options (widget status, row alternate colors) for a table.
	RowAlternateColorOptions *TemplateRowAlternateColorOptions `pulumi:"rowAlternateColorOptions"`
}

// TemplateTableOptionsInput is an input type that accepts TemplateTableOptionsArgs and TemplateTableOptionsOutput values.
// You can construct a concrete instance of `TemplateTableOptionsInput` via:
//
//	TemplateTableOptionsArgs{...}
type TemplateTableOptionsInput interface {
	pulumi.Input

	ToTemplateTableOptionsOutput() TemplateTableOptionsOutput
	ToTemplateTableOptionsOutputWithContext(context.Context) TemplateTableOptionsOutput
}

type TemplateTableOptionsArgs struct {
	// The table cell style of table cells.
	CellStyle TemplateTableCellStylePtrInput `pulumi:"cellStyle"`
	// The table cell style of a table header.
	HeaderStyle TemplateTableCellStylePtrInput `pulumi:"headerStyle"`
	// The orientation (vertical, horizontal) for a table.
	Orientation TemplateTableOrientationPtrInput `pulumi:"orientation"`
	// The row alternate color options (widget status, row alternate colors) for a table.
	RowAlternateColorOptions TemplateRowAlternateColorOptionsPtrInput `pulumi:"rowAlternateColorOptions"`
}

func (TemplateTableOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableOptions)(nil)).Elem()
}

func (i TemplateTableOptionsArgs) ToTemplateTableOptionsOutput() TemplateTableOptionsOutput {
	return i.ToTemplateTableOptionsOutputWithContext(context.Background())
}

func (i TemplateTableOptionsArgs) ToTemplateTableOptionsOutputWithContext(ctx context.Context) TemplateTableOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableOptionsOutput)
}

func (i TemplateTableOptionsArgs) ToTemplateTableOptionsPtrOutput() TemplateTableOptionsPtrOutput {
	return i.ToTemplateTableOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateTableOptionsArgs) ToTemplateTableOptionsPtrOutputWithContext(ctx context.Context) TemplateTableOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableOptionsOutput).ToTemplateTableOptionsPtrOutputWithContext(ctx)
}

// TemplateTableOptionsPtrInput is an input type that accepts TemplateTableOptionsArgs, TemplateTableOptionsPtr and TemplateTableOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateTableOptionsPtrInput` via:
//
//	        TemplateTableOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateTableOptionsPtrInput interface {
	pulumi.Input

	ToTemplateTableOptionsPtrOutput() TemplateTableOptionsPtrOutput
	ToTemplateTableOptionsPtrOutputWithContext(context.Context) TemplateTableOptionsPtrOutput
}

type templateTableOptionsPtrType TemplateTableOptionsArgs

func TemplateTableOptionsPtr(v *TemplateTableOptionsArgs) TemplateTableOptionsPtrInput {
	return (*templateTableOptionsPtrType)(v)
}

func (*templateTableOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableOptions)(nil)).Elem()
}

func (i *templateTableOptionsPtrType) ToTemplateTableOptionsPtrOutput() TemplateTableOptionsPtrOutput {
	return i.ToTemplateTableOptionsPtrOutputWithContext(context.Background())
}

func (i *templateTableOptionsPtrType) ToTemplateTableOptionsPtrOutputWithContext(ctx context.Context) TemplateTableOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableOptionsPtrOutput)
}

type TemplateTableOptionsOutput struct{ *pulumi.OutputState }

func (TemplateTableOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableOptions)(nil)).Elem()
}

func (o TemplateTableOptionsOutput) ToTemplateTableOptionsOutput() TemplateTableOptionsOutput {
	return o
}

func (o TemplateTableOptionsOutput) ToTemplateTableOptionsOutputWithContext(ctx context.Context) TemplateTableOptionsOutput {
	return o
}

func (o TemplateTableOptionsOutput) ToTemplateTableOptionsPtrOutput() TemplateTableOptionsPtrOutput {
	return o.ToTemplateTableOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateTableOptionsOutput) ToTemplateTableOptionsPtrOutputWithContext(ctx context.Context) TemplateTableOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTableOptions) *TemplateTableOptions {
		return &v
	}).(TemplateTableOptionsPtrOutput)
}

// The table cell style of table cells.
func (o TemplateTableOptionsOutput) CellStyle() TemplateTableCellStylePtrOutput {
	return o.ApplyT(func(v TemplateTableOptions) *TemplateTableCellStyle { return v.CellStyle }).(TemplateTableCellStylePtrOutput)
}

// The table cell style of a table header.
func (o TemplateTableOptionsOutput) HeaderStyle() TemplateTableCellStylePtrOutput {
	return o.ApplyT(func(v TemplateTableOptions) *TemplateTableCellStyle { return v.HeaderStyle }).(TemplateTableCellStylePtrOutput)
}

// The orientation (vertical, horizontal) for a table.
func (o TemplateTableOptionsOutput) Orientation() TemplateTableOrientationPtrOutput {
	return o.ApplyT(func(v TemplateTableOptions) *TemplateTableOrientation { return v.Orientation }).(TemplateTableOrientationPtrOutput)
}

// The row alternate color options (widget status, row alternate colors) for a table.
func (o TemplateTableOptionsOutput) RowAlternateColorOptions() TemplateRowAlternateColorOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTableOptions) *TemplateRowAlternateColorOptions { return v.RowAlternateColorOptions }).(TemplateRowAlternateColorOptionsPtrOutput)
}

type TemplateTableOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateTableOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableOptions)(nil)).Elem()
}

func (o TemplateTableOptionsPtrOutput) ToTemplateTableOptionsPtrOutput() TemplateTableOptionsPtrOutput {
	return o
}

func (o TemplateTableOptionsPtrOutput) ToTemplateTableOptionsPtrOutputWithContext(ctx context.Context) TemplateTableOptionsPtrOutput {
	return o
}

func (o TemplateTableOptionsPtrOutput) Elem() TemplateTableOptionsOutput {
	return o.ApplyT(func(v *TemplateTableOptions) TemplateTableOptions {
		if v != nil {
			return *v
		}
		var ret TemplateTableOptions
		return ret
	}).(TemplateTableOptionsOutput)
}

// The table cell style of table cells.
func (o TemplateTableOptionsPtrOutput) CellStyle() TemplateTableCellStylePtrOutput {
	return o.ApplyT(func(v *TemplateTableOptions) *TemplateTableCellStyle {
		if v == nil {
			return nil
		}
		return v.CellStyle
	}).(TemplateTableCellStylePtrOutput)
}

// The table cell style of a table header.
func (o TemplateTableOptionsPtrOutput) HeaderStyle() TemplateTableCellStylePtrOutput {
	return o.ApplyT(func(v *TemplateTableOptions) *TemplateTableCellStyle {
		if v == nil {
			return nil
		}
		return v.HeaderStyle
	}).(TemplateTableCellStylePtrOutput)
}

// The orientation (vertical, horizontal) for a table.
func (o TemplateTableOptionsPtrOutput) Orientation() TemplateTableOrientationPtrOutput {
	return o.ApplyT(func(v *TemplateTableOptions) *TemplateTableOrientation {
		if v == nil {
			return nil
		}
		return v.Orientation
	}).(TemplateTableOrientationPtrOutput)
}

// The row alternate color options (widget status, row alternate colors) for a table.
func (o TemplateTableOptionsPtrOutput) RowAlternateColorOptions() TemplateRowAlternateColorOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTableOptions) *TemplateRowAlternateColorOptions {
		if v == nil {
			return nil
		}
		return v.RowAlternateColorOptions
	}).(TemplateRowAlternateColorOptionsPtrOutput)
}

type TemplateTablePaginatedReportOptions struct {
	// The visibility of repeating header rows on each page.
	OverflowColumnHeaderVisibility interface{} `pulumi:"overflowColumnHeaderVisibility"`
	// The visibility of printing table overflow across pages.
	VerticalOverflowVisibility interface{} `pulumi:"verticalOverflowVisibility"`
}

// TemplateTablePaginatedReportOptionsInput is an input type that accepts TemplateTablePaginatedReportOptionsArgs and TemplateTablePaginatedReportOptionsOutput values.
// You can construct a concrete instance of `TemplateTablePaginatedReportOptionsInput` via:
//
//	TemplateTablePaginatedReportOptionsArgs{...}
type TemplateTablePaginatedReportOptionsInput interface {
	pulumi.Input

	ToTemplateTablePaginatedReportOptionsOutput() TemplateTablePaginatedReportOptionsOutput
	ToTemplateTablePaginatedReportOptionsOutputWithContext(context.Context) TemplateTablePaginatedReportOptionsOutput
}

type TemplateTablePaginatedReportOptionsArgs struct {
	// The visibility of repeating header rows on each page.
	OverflowColumnHeaderVisibility pulumi.Input `pulumi:"overflowColumnHeaderVisibility"`
	// The visibility of printing table overflow across pages.
	VerticalOverflowVisibility pulumi.Input `pulumi:"verticalOverflowVisibility"`
}

func (TemplateTablePaginatedReportOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTablePaginatedReportOptions)(nil)).Elem()
}

func (i TemplateTablePaginatedReportOptionsArgs) ToTemplateTablePaginatedReportOptionsOutput() TemplateTablePaginatedReportOptionsOutput {
	return i.ToTemplateTablePaginatedReportOptionsOutputWithContext(context.Background())
}

func (i TemplateTablePaginatedReportOptionsArgs) ToTemplateTablePaginatedReportOptionsOutputWithContext(ctx context.Context) TemplateTablePaginatedReportOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTablePaginatedReportOptionsOutput)
}

func (i TemplateTablePaginatedReportOptionsArgs) ToTemplateTablePaginatedReportOptionsPtrOutput() TemplateTablePaginatedReportOptionsPtrOutput {
	return i.ToTemplateTablePaginatedReportOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateTablePaginatedReportOptionsArgs) ToTemplateTablePaginatedReportOptionsPtrOutputWithContext(ctx context.Context) TemplateTablePaginatedReportOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTablePaginatedReportOptionsOutput).ToTemplateTablePaginatedReportOptionsPtrOutputWithContext(ctx)
}

// TemplateTablePaginatedReportOptionsPtrInput is an input type that accepts TemplateTablePaginatedReportOptionsArgs, TemplateTablePaginatedReportOptionsPtr and TemplateTablePaginatedReportOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateTablePaginatedReportOptionsPtrInput` via:
//
//	        TemplateTablePaginatedReportOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateTablePaginatedReportOptionsPtrInput interface {
	pulumi.Input

	ToTemplateTablePaginatedReportOptionsPtrOutput() TemplateTablePaginatedReportOptionsPtrOutput
	ToTemplateTablePaginatedReportOptionsPtrOutputWithContext(context.Context) TemplateTablePaginatedReportOptionsPtrOutput
}

type templateTablePaginatedReportOptionsPtrType TemplateTablePaginatedReportOptionsArgs

func TemplateTablePaginatedReportOptionsPtr(v *TemplateTablePaginatedReportOptionsArgs) TemplateTablePaginatedReportOptionsPtrInput {
	return (*templateTablePaginatedReportOptionsPtrType)(v)
}

func (*templateTablePaginatedReportOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTablePaginatedReportOptions)(nil)).Elem()
}

func (i *templateTablePaginatedReportOptionsPtrType) ToTemplateTablePaginatedReportOptionsPtrOutput() TemplateTablePaginatedReportOptionsPtrOutput {
	return i.ToTemplateTablePaginatedReportOptionsPtrOutputWithContext(context.Background())
}

func (i *templateTablePaginatedReportOptionsPtrType) ToTemplateTablePaginatedReportOptionsPtrOutputWithContext(ctx context.Context) TemplateTablePaginatedReportOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTablePaginatedReportOptionsPtrOutput)
}

type TemplateTablePaginatedReportOptionsOutput struct{ *pulumi.OutputState }

func (TemplateTablePaginatedReportOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTablePaginatedReportOptions)(nil)).Elem()
}

func (o TemplateTablePaginatedReportOptionsOutput) ToTemplateTablePaginatedReportOptionsOutput() TemplateTablePaginatedReportOptionsOutput {
	return o
}

func (o TemplateTablePaginatedReportOptionsOutput) ToTemplateTablePaginatedReportOptionsOutputWithContext(ctx context.Context) TemplateTablePaginatedReportOptionsOutput {
	return o
}

func (o TemplateTablePaginatedReportOptionsOutput) ToTemplateTablePaginatedReportOptionsPtrOutput() TemplateTablePaginatedReportOptionsPtrOutput {
	return o.ToTemplateTablePaginatedReportOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateTablePaginatedReportOptionsOutput) ToTemplateTablePaginatedReportOptionsPtrOutputWithContext(ctx context.Context) TemplateTablePaginatedReportOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTablePaginatedReportOptions) *TemplateTablePaginatedReportOptions {
		return &v
	}).(TemplateTablePaginatedReportOptionsPtrOutput)
}

// The visibility of repeating header rows on each page.
func (o TemplateTablePaginatedReportOptionsOutput) OverflowColumnHeaderVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateTablePaginatedReportOptions) interface{} { return v.OverflowColumnHeaderVisibility }).(pulumi.AnyOutput)
}

// The visibility of printing table overflow across pages.
func (o TemplateTablePaginatedReportOptionsOutput) VerticalOverflowVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateTablePaginatedReportOptions) interface{} { return v.VerticalOverflowVisibility }).(pulumi.AnyOutput)
}

type TemplateTablePaginatedReportOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateTablePaginatedReportOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTablePaginatedReportOptions)(nil)).Elem()
}

func (o TemplateTablePaginatedReportOptionsPtrOutput) ToTemplateTablePaginatedReportOptionsPtrOutput() TemplateTablePaginatedReportOptionsPtrOutput {
	return o
}

func (o TemplateTablePaginatedReportOptionsPtrOutput) ToTemplateTablePaginatedReportOptionsPtrOutputWithContext(ctx context.Context) TemplateTablePaginatedReportOptionsPtrOutput {
	return o
}

func (o TemplateTablePaginatedReportOptionsPtrOutput) Elem() TemplateTablePaginatedReportOptionsOutput {
	return o.ApplyT(func(v *TemplateTablePaginatedReportOptions) TemplateTablePaginatedReportOptions {
		if v != nil {
			return *v
		}
		var ret TemplateTablePaginatedReportOptions
		return ret
	}).(TemplateTablePaginatedReportOptionsOutput)
}

// The visibility of repeating header rows on each page.
func (o TemplateTablePaginatedReportOptionsPtrOutput) OverflowColumnHeaderVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateTablePaginatedReportOptions) interface{} {
		if v == nil {
			return nil
		}
		return v.OverflowColumnHeaderVisibility
	}).(pulumi.AnyOutput)
}

// The visibility of printing table overflow across pages.
func (o TemplateTablePaginatedReportOptionsPtrOutput) VerticalOverflowVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateTablePaginatedReportOptions) interface{} {
		if v == nil {
			return nil
		}
		return v.VerticalOverflowVisibility
	}).(pulumi.AnyOutput)
}

type TemplateTablePinnedFieldOptions struct {
	// A list of columns to be pinned to the left of a table visual.
	PinnedLeftFields []string `pulumi:"pinnedLeftFields"`
}

// TemplateTablePinnedFieldOptionsInput is an input type that accepts TemplateTablePinnedFieldOptionsArgs and TemplateTablePinnedFieldOptionsOutput values.
// You can construct a concrete instance of `TemplateTablePinnedFieldOptionsInput` via:
//
//	TemplateTablePinnedFieldOptionsArgs{...}
type TemplateTablePinnedFieldOptionsInput interface {
	pulumi.Input

	ToTemplateTablePinnedFieldOptionsOutput() TemplateTablePinnedFieldOptionsOutput
	ToTemplateTablePinnedFieldOptionsOutputWithContext(context.Context) TemplateTablePinnedFieldOptionsOutput
}

type TemplateTablePinnedFieldOptionsArgs struct {
	// A list of columns to be pinned to the left of a table visual.
	PinnedLeftFields pulumi.StringArrayInput `pulumi:"pinnedLeftFields"`
}

func (TemplateTablePinnedFieldOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTablePinnedFieldOptions)(nil)).Elem()
}

func (i TemplateTablePinnedFieldOptionsArgs) ToTemplateTablePinnedFieldOptionsOutput() TemplateTablePinnedFieldOptionsOutput {
	return i.ToTemplateTablePinnedFieldOptionsOutputWithContext(context.Background())
}

func (i TemplateTablePinnedFieldOptionsArgs) ToTemplateTablePinnedFieldOptionsOutputWithContext(ctx context.Context) TemplateTablePinnedFieldOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTablePinnedFieldOptionsOutput)
}

func (i TemplateTablePinnedFieldOptionsArgs) ToTemplateTablePinnedFieldOptionsPtrOutput() TemplateTablePinnedFieldOptionsPtrOutput {
	return i.ToTemplateTablePinnedFieldOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateTablePinnedFieldOptionsArgs) ToTemplateTablePinnedFieldOptionsPtrOutputWithContext(ctx context.Context) TemplateTablePinnedFieldOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTablePinnedFieldOptionsOutput).ToTemplateTablePinnedFieldOptionsPtrOutputWithContext(ctx)
}

// TemplateTablePinnedFieldOptionsPtrInput is an input type that accepts TemplateTablePinnedFieldOptionsArgs, TemplateTablePinnedFieldOptionsPtr and TemplateTablePinnedFieldOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateTablePinnedFieldOptionsPtrInput` via:
//
//	        TemplateTablePinnedFieldOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateTablePinnedFieldOptionsPtrInput interface {
	pulumi.Input

	ToTemplateTablePinnedFieldOptionsPtrOutput() TemplateTablePinnedFieldOptionsPtrOutput
	ToTemplateTablePinnedFieldOptionsPtrOutputWithContext(context.Context) TemplateTablePinnedFieldOptionsPtrOutput
}

type templateTablePinnedFieldOptionsPtrType TemplateTablePinnedFieldOptionsArgs

func TemplateTablePinnedFieldOptionsPtr(v *TemplateTablePinnedFieldOptionsArgs) TemplateTablePinnedFieldOptionsPtrInput {
	return (*templateTablePinnedFieldOptionsPtrType)(v)
}

func (*templateTablePinnedFieldOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTablePinnedFieldOptions)(nil)).Elem()
}

func (i *templateTablePinnedFieldOptionsPtrType) ToTemplateTablePinnedFieldOptionsPtrOutput() TemplateTablePinnedFieldOptionsPtrOutput {
	return i.ToTemplateTablePinnedFieldOptionsPtrOutputWithContext(context.Background())
}

func (i *templateTablePinnedFieldOptionsPtrType) ToTemplateTablePinnedFieldOptionsPtrOutputWithContext(ctx context.Context) TemplateTablePinnedFieldOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTablePinnedFieldOptionsPtrOutput)
}

type TemplateTablePinnedFieldOptionsOutput struct{ *pulumi.OutputState }

func (TemplateTablePinnedFieldOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTablePinnedFieldOptions)(nil)).Elem()
}

func (o TemplateTablePinnedFieldOptionsOutput) ToTemplateTablePinnedFieldOptionsOutput() TemplateTablePinnedFieldOptionsOutput {
	return o
}

func (o TemplateTablePinnedFieldOptionsOutput) ToTemplateTablePinnedFieldOptionsOutputWithContext(ctx context.Context) TemplateTablePinnedFieldOptionsOutput {
	return o
}

func (o TemplateTablePinnedFieldOptionsOutput) ToTemplateTablePinnedFieldOptionsPtrOutput() TemplateTablePinnedFieldOptionsPtrOutput {
	return o.ToTemplateTablePinnedFieldOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateTablePinnedFieldOptionsOutput) ToTemplateTablePinnedFieldOptionsPtrOutputWithContext(ctx context.Context) TemplateTablePinnedFieldOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTablePinnedFieldOptions) *TemplateTablePinnedFieldOptions {
		return &v
	}).(TemplateTablePinnedFieldOptionsPtrOutput)
}

// A list of columns to be pinned to the left of a table visual.
func (o TemplateTablePinnedFieldOptionsOutput) PinnedLeftFields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TemplateTablePinnedFieldOptions) []string { return v.PinnedLeftFields }).(pulumi.StringArrayOutput)
}

type TemplateTablePinnedFieldOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateTablePinnedFieldOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTablePinnedFieldOptions)(nil)).Elem()
}

func (o TemplateTablePinnedFieldOptionsPtrOutput) ToTemplateTablePinnedFieldOptionsPtrOutput() TemplateTablePinnedFieldOptionsPtrOutput {
	return o
}

func (o TemplateTablePinnedFieldOptionsPtrOutput) ToTemplateTablePinnedFieldOptionsPtrOutputWithContext(ctx context.Context) TemplateTablePinnedFieldOptionsPtrOutput {
	return o
}

func (o TemplateTablePinnedFieldOptionsPtrOutput) Elem() TemplateTablePinnedFieldOptionsOutput {
	return o.ApplyT(func(v *TemplateTablePinnedFieldOptions) TemplateTablePinnedFieldOptions {
		if v != nil {
			return *v
		}
		var ret TemplateTablePinnedFieldOptions
		return ret
	}).(TemplateTablePinnedFieldOptionsOutput)
}

// A list of columns to be pinned to the left of a table visual.
func (o TemplateTablePinnedFieldOptionsPtrOutput) PinnedLeftFields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TemplateTablePinnedFieldOptions) []string {
		if v == nil {
			return nil
		}
		return v.PinnedLeftFields
	}).(pulumi.StringArrayOutput)
}

type TemplateTableRowConditionalFormatting struct {
	// The conditional formatting color (solid, gradient) of the background for a table row.
	BackgroundColor *TemplateConditionalFormattingColor `pulumi:"backgroundColor"`
	// The conditional formatting color (solid, gradient) of the text for a table row.
	TextColor *TemplateConditionalFormattingColor `pulumi:"textColor"`
}

// TemplateTableRowConditionalFormattingInput is an input type that accepts TemplateTableRowConditionalFormattingArgs and TemplateTableRowConditionalFormattingOutput values.
// You can construct a concrete instance of `TemplateTableRowConditionalFormattingInput` via:
//
//	TemplateTableRowConditionalFormattingArgs{...}
type TemplateTableRowConditionalFormattingInput interface {
	pulumi.Input

	ToTemplateTableRowConditionalFormattingOutput() TemplateTableRowConditionalFormattingOutput
	ToTemplateTableRowConditionalFormattingOutputWithContext(context.Context) TemplateTableRowConditionalFormattingOutput
}

type TemplateTableRowConditionalFormattingArgs struct {
	// The conditional formatting color (solid, gradient) of the background for a table row.
	BackgroundColor TemplateConditionalFormattingColorPtrInput `pulumi:"backgroundColor"`
	// The conditional formatting color (solid, gradient) of the text for a table row.
	TextColor TemplateConditionalFormattingColorPtrInput `pulumi:"textColor"`
}

func (TemplateTableRowConditionalFormattingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableRowConditionalFormatting)(nil)).Elem()
}

func (i TemplateTableRowConditionalFormattingArgs) ToTemplateTableRowConditionalFormattingOutput() TemplateTableRowConditionalFormattingOutput {
	return i.ToTemplateTableRowConditionalFormattingOutputWithContext(context.Background())
}

func (i TemplateTableRowConditionalFormattingArgs) ToTemplateTableRowConditionalFormattingOutputWithContext(ctx context.Context) TemplateTableRowConditionalFormattingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableRowConditionalFormattingOutput)
}

func (i TemplateTableRowConditionalFormattingArgs) ToTemplateTableRowConditionalFormattingPtrOutput() TemplateTableRowConditionalFormattingPtrOutput {
	return i.ToTemplateTableRowConditionalFormattingPtrOutputWithContext(context.Background())
}

func (i TemplateTableRowConditionalFormattingArgs) ToTemplateTableRowConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplateTableRowConditionalFormattingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableRowConditionalFormattingOutput).ToTemplateTableRowConditionalFormattingPtrOutputWithContext(ctx)
}

// TemplateTableRowConditionalFormattingPtrInput is an input type that accepts TemplateTableRowConditionalFormattingArgs, TemplateTableRowConditionalFormattingPtr and TemplateTableRowConditionalFormattingPtrOutput values.
// You can construct a concrete instance of `TemplateTableRowConditionalFormattingPtrInput` via:
//
//	        TemplateTableRowConditionalFormattingArgs{...}
//
//	or:
//
//	        nil
type TemplateTableRowConditionalFormattingPtrInput interface {
	pulumi.Input

	ToTemplateTableRowConditionalFormattingPtrOutput() TemplateTableRowConditionalFormattingPtrOutput
	ToTemplateTableRowConditionalFormattingPtrOutputWithContext(context.Context) TemplateTableRowConditionalFormattingPtrOutput
}

type templateTableRowConditionalFormattingPtrType TemplateTableRowConditionalFormattingArgs

func TemplateTableRowConditionalFormattingPtr(v *TemplateTableRowConditionalFormattingArgs) TemplateTableRowConditionalFormattingPtrInput {
	return (*templateTableRowConditionalFormattingPtrType)(v)
}

func (*templateTableRowConditionalFormattingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableRowConditionalFormatting)(nil)).Elem()
}

func (i *templateTableRowConditionalFormattingPtrType) ToTemplateTableRowConditionalFormattingPtrOutput() TemplateTableRowConditionalFormattingPtrOutput {
	return i.ToTemplateTableRowConditionalFormattingPtrOutputWithContext(context.Background())
}

func (i *templateTableRowConditionalFormattingPtrType) ToTemplateTableRowConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplateTableRowConditionalFormattingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableRowConditionalFormattingPtrOutput)
}

type TemplateTableRowConditionalFormattingOutput struct{ *pulumi.OutputState }

func (TemplateTableRowConditionalFormattingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableRowConditionalFormatting)(nil)).Elem()
}

func (o TemplateTableRowConditionalFormattingOutput) ToTemplateTableRowConditionalFormattingOutput() TemplateTableRowConditionalFormattingOutput {
	return o
}

func (o TemplateTableRowConditionalFormattingOutput) ToTemplateTableRowConditionalFormattingOutputWithContext(ctx context.Context) TemplateTableRowConditionalFormattingOutput {
	return o
}

func (o TemplateTableRowConditionalFormattingOutput) ToTemplateTableRowConditionalFormattingPtrOutput() TemplateTableRowConditionalFormattingPtrOutput {
	return o.ToTemplateTableRowConditionalFormattingPtrOutputWithContext(context.Background())
}

func (o TemplateTableRowConditionalFormattingOutput) ToTemplateTableRowConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplateTableRowConditionalFormattingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTableRowConditionalFormatting) *TemplateTableRowConditionalFormatting {
		return &v
	}).(TemplateTableRowConditionalFormattingPtrOutput)
}

// The conditional formatting color (solid, gradient) of the background for a table row.
func (o TemplateTableRowConditionalFormattingOutput) BackgroundColor() TemplateConditionalFormattingColorPtrOutput {
	return o.ApplyT(func(v TemplateTableRowConditionalFormatting) *TemplateConditionalFormattingColor {
		return v.BackgroundColor
	}).(TemplateConditionalFormattingColorPtrOutput)
}

// The conditional formatting color (solid, gradient) of the text for a table row.
func (o TemplateTableRowConditionalFormattingOutput) TextColor() TemplateConditionalFormattingColorPtrOutput {
	return o.ApplyT(func(v TemplateTableRowConditionalFormatting) *TemplateConditionalFormattingColor { return v.TextColor }).(TemplateConditionalFormattingColorPtrOutput)
}

type TemplateTableRowConditionalFormattingPtrOutput struct{ *pulumi.OutputState }

func (TemplateTableRowConditionalFormattingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableRowConditionalFormatting)(nil)).Elem()
}

func (o TemplateTableRowConditionalFormattingPtrOutput) ToTemplateTableRowConditionalFormattingPtrOutput() TemplateTableRowConditionalFormattingPtrOutput {
	return o
}

func (o TemplateTableRowConditionalFormattingPtrOutput) ToTemplateTableRowConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplateTableRowConditionalFormattingPtrOutput {
	return o
}

func (o TemplateTableRowConditionalFormattingPtrOutput) Elem() TemplateTableRowConditionalFormattingOutput {
	return o.ApplyT(func(v *TemplateTableRowConditionalFormatting) TemplateTableRowConditionalFormatting {
		if v != nil {
			return *v
		}
		var ret TemplateTableRowConditionalFormatting
		return ret
	}).(TemplateTableRowConditionalFormattingOutput)
}

// The conditional formatting color (solid, gradient) of the background for a table row.
func (o TemplateTableRowConditionalFormattingPtrOutput) BackgroundColor() TemplateConditionalFormattingColorPtrOutput {
	return o.ApplyT(func(v *TemplateTableRowConditionalFormatting) *TemplateConditionalFormattingColor {
		if v == nil {
			return nil
		}
		return v.BackgroundColor
	}).(TemplateConditionalFormattingColorPtrOutput)
}

// The conditional formatting color (solid, gradient) of the text for a table row.
func (o TemplateTableRowConditionalFormattingPtrOutput) TextColor() TemplateConditionalFormattingColorPtrOutput {
	return o.ApplyT(func(v *TemplateTableRowConditionalFormatting) *TemplateConditionalFormattingColor {
		if v == nil {
			return nil
		}
		return v.TextColor
	}).(TemplateConditionalFormattingColorPtrOutput)
}

type TemplateTableSideBorderOptions struct {
	// The table border options of the bottom border.
	Bottom *TemplateTableBorderOptions `pulumi:"bottom"`
	// The table border options of the inner horizontal border.
	InnerHorizontal *TemplateTableBorderOptions `pulumi:"innerHorizontal"`
	// The table border options of the inner vertical border.
	InnerVertical *TemplateTableBorderOptions `pulumi:"innerVertical"`
	// The table border options of the left border.
	Left *TemplateTableBorderOptions `pulumi:"left"`
	// The table border options of the right border.
	Right *TemplateTableBorderOptions `pulumi:"right"`
	// The table border options of the top border.
	Top *TemplateTableBorderOptions `pulumi:"top"`
}

// TemplateTableSideBorderOptionsInput is an input type that accepts TemplateTableSideBorderOptionsArgs and TemplateTableSideBorderOptionsOutput values.
// You can construct a concrete instance of `TemplateTableSideBorderOptionsInput` via:
//
//	TemplateTableSideBorderOptionsArgs{...}
type TemplateTableSideBorderOptionsInput interface {
	pulumi.Input

	ToTemplateTableSideBorderOptionsOutput() TemplateTableSideBorderOptionsOutput
	ToTemplateTableSideBorderOptionsOutputWithContext(context.Context) TemplateTableSideBorderOptionsOutput
}

type TemplateTableSideBorderOptionsArgs struct {
	// The table border options of the bottom border.
	Bottom TemplateTableBorderOptionsPtrInput `pulumi:"bottom"`
	// The table border options of the inner horizontal border.
	InnerHorizontal TemplateTableBorderOptionsPtrInput `pulumi:"innerHorizontal"`
	// The table border options of the inner vertical border.
	InnerVertical TemplateTableBorderOptionsPtrInput `pulumi:"innerVertical"`
	// The table border options of the left border.
	Left TemplateTableBorderOptionsPtrInput `pulumi:"left"`
	// The table border options of the right border.
	Right TemplateTableBorderOptionsPtrInput `pulumi:"right"`
	// The table border options of the top border.
	Top TemplateTableBorderOptionsPtrInput `pulumi:"top"`
}

func (TemplateTableSideBorderOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableSideBorderOptions)(nil)).Elem()
}

func (i TemplateTableSideBorderOptionsArgs) ToTemplateTableSideBorderOptionsOutput() TemplateTableSideBorderOptionsOutput {
	return i.ToTemplateTableSideBorderOptionsOutputWithContext(context.Background())
}

func (i TemplateTableSideBorderOptionsArgs) ToTemplateTableSideBorderOptionsOutputWithContext(ctx context.Context) TemplateTableSideBorderOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableSideBorderOptionsOutput)
}

func (i TemplateTableSideBorderOptionsArgs) ToTemplateTableSideBorderOptionsPtrOutput() TemplateTableSideBorderOptionsPtrOutput {
	return i.ToTemplateTableSideBorderOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateTableSideBorderOptionsArgs) ToTemplateTableSideBorderOptionsPtrOutputWithContext(ctx context.Context) TemplateTableSideBorderOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableSideBorderOptionsOutput).ToTemplateTableSideBorderOptionsPtrOutputWithContext(ctx)
}

// TemplateTableSideBorderOptionsPtrInput is an input type that accepts TemplateTableSideBorderOptionsArgs, TemplateTableSideBorderOptionsPtr and TemplateTableSideBorderOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateTableSideBorderOptionsPtrInput` via:
//
//	        TemplateTableSideBorderOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateTableSideBorderOptionsPtrInput interface {
	pulumi.Input

	ToTemplateTableSideBorderOptionsPtrOutput() TemplateTableSideBorderOptionsPtrOutput
	ToTemplateTableSideBorderOptionsPtrOutputWithContext(context.Context) TemplateTableSideBorderOptionsPtrOutput
}

type templateTableSideBorderOptionsPtrType TemplateTableSideBorderOptionsArgs

func TemplateTableSideBorderOptionsPtr(v *TemplateTableSideBorderOptionsArgs) TemplateTableSideBorderOptionsPtrInput {
	return (*templateTableSideBorderOptionsPtrType)(v)
}

func (*templateTableSideBorderOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableSideBorderOptions)(nil)).Elem()
}

func (i *templateTableSideBorderOptionsPtrType) ToTemplateTableSideBorderOptionsPtrOutput() TemplateTableSideBorderOptionsPtrOutput {
	return i.ToTemplateTableSideBorderOptionsPtrOutputWithContext(context.Background())
}

func (i *templateTableSideBorderOptionsPtrType) ToTemplateTableSideBorderOptionsPtrOutputWithContext(ctx context.Context) TemplateTableSideBorderOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableSideBorderOptionsPtrOutput)
}

type TemplateTableSideBorderOptionsOutput struct{ *pulumi.OutputState }

func (TemplateTableSideBorderOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableSideBorderOptions)(nil)).Elem()
}

func (o TemplateTableSideBorderOptionsOutput) ToTemplateTableSideBorderOptionsOutput() TemplateTableSideBorderOptionsOutput {
	return o
}

func (o TemplateTableSideBorderOptionsOutput) ToTemplateTableSideBorderOptionsOutputWithContext(ctx context.Context) TemplateTableSideBorderOptionsOutput {
	return o
}

func (o TemplateTableSideBorderOptionsOutput) ToTemplateTableSideBorderOptionsPtrOutput() TemplateTableSideBorderOptionsPtrOutput {
	return o.ToTemplateTableSideBorderOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateTableSideBorderOptionsOutput) ToTemplateTableSideBorderOptionsPtrOutputWithContext(ctx context.Context) TemplateTableSideBorderOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTableSideBorderOptions) *TemplateTableSideBorderOptions {
		return &v
	}).(TemplateTableSideBorderOptionsPtrOutput)
}

// The table border options of the bottom border.
func (o TemplateTableSideBorderOptionsOutput) Bottom() TemplateTableBorderOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTableSideBorderOptions) *TemplateTableBorderOptions { return v.Bottom }).(TemplateTableBorderOptionsPtrOutput)
}

// The table border options of the inner horizontal border.
func (o TemplateTableSideBorderOptionsOutput) InnerHorizontal() TemplateTableBorderOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTableSideBorderOptions) *TemplateTableBorderOptions { return v.InnerHorizontal }).(TemplateTableBorderOptionsPtrOutput)
}

// The table border options of the inner vertical border.
func (o TemplateTableSideBorderOptionsOutput) InnerVertical() TemplateTableBorderOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTableSideBorderOptions) *TemplateTableBorderOptions { return v.InnerVertical }).(TemplateTableBorderOptionsPtrOutput)
}

// The table border options of the left border.
func (o TemplateTableSideBorderOptionsOutput) Left() TemplateTableBorderOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTableSideBorderOptions) *TemplateTableBorderOptions { return v.Left }).(TemplateTableBorderOptionsPtrOutput)
}

// The table border options of the right border.
func (o TemplateTableSideBorderOptionsOutput) Right() TemplateTableBorderOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTableSideBorderOptions) *TemplateTableBorderOptions { return v.Right }).(TemplateTableBorderOptionsPtrOutput)
}

// The table border options of the top border.
func (o TemplateTableSideBorderOptionsOutput) Top() TemplateTableBorderOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTableSideBorderOptions) *TemplateTableBorderOptions { return v.Top }).(TemplateTableBorderOptionsPtrOutput)
}

type TemplateTableSideBorderOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateTableSideBorderOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableSideBorderOptions)(nil)).Elem()
}

func (o TemplateTableSideBorderOptionsPtrOutput) ToTemplateTableSideBorderOptionsPtrOutput() TemplateTableSideBorderOptionsPtrOutput {
	return o
}

func (o TemplateTableSideBorderOptionsPtrOutput) ToTemplateTableSideBorderOptionsPtrOutputWithContext(ctx context.Context) TemplateTableSideBorderOptionsPtrOutput {
	return o
}

func (o TemplateTableSideBorderOptionsPtrOutput) Elem() TemplateTableSideBorderOptionsOutput {
	return o.ApplyT(func(v *TemplateTableSideBorderOptions) TemplateTableSideBorderOptions {
		if v != nil {
			return *v
		}
		var ret TemplateTableSideBorderOptions
		return ret
	}).(TemplateTableSideBorderOptionsOutput)
}

// The table border options of the bottom border.
func (o TemplateTableSideBorderOptionsPtrOutput) Bottom() TemplateTableBorderOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTableSideBorderOptions) *TemplateTableBorderOptions {
		if v == nil {
			return nil
		}
		return v.Bottom
	}).(TemplateTableBorderOptionsPtrOutput)
}

// The table border options of the inner horizontal border.
func (o TemplateTableSideBorderOptionsPtrOutput) InnerHorizontal() TemplateTableBorderOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTableSideBorderOptions) *TemplateTableBorderOptions {
		if v == nil {
			return nil
		}
		return v.InnerHorizontal
	}).(TemplateTableBorderOptionsPtrOutput)
}

// The table border options of the inner vertical border.
func (o TemplateTableSideBorderOptionsPtrOutput) InnerVertical() TemplateTableBorderOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTableSideBorderOptions) *TemplateTableBorderOptions {
		if v == nil {
			return nil
		}
		return v.InnerVertical
	}).(TemplateTableBorderOptionsPtrOutput)
}

// The table border options of the left border.
func (o TemplateTableSideBorderOptionsPtrOutput) Left() TemplateTableBorderOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTableSideBorderOptions) *TemplateTableBorderOptions {
		if v == nil {
			return nil
		}
		return v.Left
	}).(TemplateTableBorderOptionsPtrOutput)
}

// The table border options of the right border.
func (o TemplateTableSideBorderOptionsPtrOutput) Right() TemplateTableBorderOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTableSideBorderOptions) *TemplateTableBorderOptions {
		if v == nil {
			return nil
		}
		return v.Right
	}).(TemplateTableBorderOptionsPtrOutput)
}

// The table border options of the top border.
func (o TemplateTableSideBorderOptionsPtrOutput) Top() TemplateTableBorderOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTableSideBorderOptions) *TemplateTableBorderOptions {
		if v == nil {
			return nil
		}
		return v.Top
	}).(TemplateTableBorderOptionsPtrOutput)
}

type TemplateTableSortConfiguration struct {
	// The pagination configuration (page size, page number) for the table.
	PaginationConfiguration *TemplatePaginationConfiguration `pulumi:"paginationConfiguration"`
	// The field sort options for rows in the table.
	RowSort []TemplateFieldSortOptions `pulumi:"rowSort"`
}

// TemplateTableSortConfigurationInput is an input type that accepts TemplateTableSortConfigurationArgs and TemplateTableSortConfigurationOutput values.
// You can construct a concrete instance of `TemplateTableSortConfigurationInput` via:
//
//	TemplateTableSortConfigurationArgs{...}
type TemplateTableSortConfigurationInput interface {
	pulumi.Input

	ToTemplateTableSortConfigurationOutput() TemplateTableSortConfigurationOutput
	ToTemplateTableSortConfigurationOutputWithContext(context.Context) TemplateTableSortConfigurationOutput
}

type TemplateTableSortConfigurationArgs struct {
	// The pagination configuration (page size, page number) for the table.
	PaginationConfiguration TemplatePaginationConfigurationPtrInput `pulumi:"paginationConfiguration"`
	// The field sort options for rows in the table.
	RowSort TemplateFieldSortOptionsArrayInput `pulumi:"rowSort"`
}

func (TemplateTableSortConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableSortConfiguration)(nil)).Elem()
}

func (i TemplateTableSortConfigurationArgs) ToTemplateTableSortConfigurationOutput() TemplateTableSortConfigurationOutput {
	return i.ToTemplateTableSortConfigurationOutputWithContext(context.Background())
}

func (i TemplateTableSortConfigurationArgs) ToTemplateTableSortConfigurationOutputWithContext(ctx context.Context) TemplateTableSortConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableSortConfigurationOutput)
}

func (i TemplateTableSortConfigurationArgs) ToTemplateTableSortConfigurationPtrOutput() TemplateTableSortConfigurationPtrOutput {
	return i.ToTemplateTableSortConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateTableSortConfigurationArgs) ToTemplateTableSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateTableSortConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableSortConfigurationOutput).ToTemplateTableSortConfigurationPtrOutputWithContext(ctx)
}

// TemplateTableSortConfigurationPtrInput is an input type that accepts TemplateTableSortConfigurationArgs, TemplateTableSortConfigurationPtr and TemplateTableSortConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateTableSortConfigurationPtrInput` via:
//
//	        TemplateTableSortConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateTableSortConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateTableSortConfigurationPtrOutput() TemplateTableSortConfigurationPtrOutput
	ToTemplateTableSortConfigurationPtrOutputWithContext(context.Context) TemplateTableSortConfigurationPtrOutput
}

type templateTableSortConfigurationPtrType TemplateTableSortConfigurationArgs

func TemplateTableSortConfigurationPtr(v *TemplateTableSortConfigurationArgs) TemplateTableSortConfigurationPtrInput {
	return (*templateTableSortConfigurationPtrType)(v)
}

func (*templateTableSortConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableSortConfiguration)(nil)).Elem()
}

func (i *templateTableSortConfigurationPtrType) ToTemplateTableSortConfigurationPtrOutput() TemplateTableSortConfigurationPtrOutput {
	return i.ToTemplateTableSortConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateTableSortConfigurationPtrType) ToTemplateTableSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateTableSortConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableSortConfigurationPtrOutput)
}

type TemplateTableSortConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateTableSortConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableSortConfiguration)(nil)).Elem()
}

func (o TemplateTableSortConfigurationOutput) ToTemplateTableSortConfigurationOutput() TemplateTableSortConfigurationOutput {
	return o
}

func (o TemplateTableSortConfigurationOutput) ToTemplateTableSortConfigurationOutputWithContext(ctx context.Context) TemplateTableSortConfigurationOutput {
	return o
}

func (o TemplateTableSortConfigurationOutput) ToTemplateTableSortConfigurationPtrOutput() TemplateTableSortConfigurationPtrOutput {
	return o.ToTemplateTableSortConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateTableSortConfigurationOutput) ToTemplateTableSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateTableSortConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTableSortConfiguration) *TemplateTableSortConfiguration {
		return &v
	}).(TemplateTableSortConfigurationPtrOutput)
}

// The pagination configuration (page size, page number) for the table.
func (o TemplateTableSortConfigurationOutput) PaginationConfiguration() TemplatePaginationConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateTableSortConfiguration) *TemplatePaginationConfiguration {
		return v.PaginationConfiguration
	}).(TemplatePaginationConfigurationPtrOutput)
}

// The field sort options for rows in the table.
func (o TemplateTableSortConfigurationOutput) RowSort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v TemplateTableSortConfiguration) []TemplateFieldSortOptions { return v.RowSort }).(TemplateFieldSortOptionsArrayOutput)
}

type TemplateTableSortConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateTableSortConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableSortConfiguration)(nil)).Elem()
}

func (o TemplateTableSortConfigurationPtrOutput) ToTemplateTableSortConfigurationPtrOutput() TemplateTableSortConfigurationPtrOutput {
	return o
}

func (o TemplateTableSortConfigurationPtrOutput) ToTemplateTableSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateTableSortConfigurationPtrOutput {
	return o
}

func (o TemplateTableSortConfigurationPtrOutput) Elem() TemplateTableSortConfigurationOutput {
	return o.ApplyT(func(v *TemplateTableSortConfiguration) TemplateTableSortConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateTableSortConfiguration
		return ret
	}).(TemplateTableSortConfigurationOutput)
}

// The pagination configuration (page size, page number) for the table.
func (o TemplateTableSortConfigurationPtrOutput) PaginationConfiguration() TemplatePaginationConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateTableSortConfiguration) *TemplatePaginationConfiguration {
		if v == nil {
			return nil
		}
		return v.PaginationConfiguration
	}).(TemplatePaginationConfigurationPtrOutput)
}

// The field sort options for rows in the table.
func (o TemplateTableSortConfigurationPtrOutput) RowSort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v *TemplateTableSortConfiguration) []TemplateFieldSortOptions {
		if v == nil {
			return nil
		}
		return v.RowSort
	}).(TemplateFieldSortOptionsArrayOutput)
}

type TemplateTableStyleTarget struct {
	// The cell type of the table style target.
	CellType TemplateStyledCellType `pulumi:"cellType"`
}

// TemplateTableStyleTargetInput is an input type that accepts TemplateTableStyleTargetArgs and TemplateTableStyleTargetOutput values.
// You can construct a concrete instance of `TemplateTableStyleTargetInput` via:
//
//	TemplateTableStyleTargetArgs{...}
type TemplateTableStyleTargetInput interface {
	pulumi.Input

	ToTemplateTableStyleTargetOutput() TemplateTableStyleTargetOutput
	ToTemplateTableStyleTargetOutputWithContext(context.Context) TemplateTableStyleTargetOutput
}

type TemplateTableStyleTargetArgs struct {
	// The cell type of the table style target.
	CellType TemplateStyledCellTypeInput `pulumi:"cellType"`
}

func (TemplateTableStyleTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableStyleTarget)(nil)).Elem()
}

func (i TemplateTableStyleTargetArgs) ToTemplateTableStyleTargetOutput() TemplateTableStyleTargetOutput {
	return i.ToTemplateTableStyleTargetOutputWithContext(context.Background())
}

func (i TemplateTableStyleTargetArgs) ToTemplateTableStyleTargetOutputWithContext(ctx context.Context) TemplateTableStyleTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableStyleTargetOutput)
}

// TemplateTableStyleTargetArrayInput is an input type that accepts TemplateTableStyleTargetArray and TemplateTableStyleTargetArrayOutput values.
// You can construct a concrete instance of `TemplateTableStyleTargetArrayInput` via:
//
//	TemplateTableStyleTargetArray{ TemplateTableStyleTargetArgs{...} }
type TemplateTableStyleTargetArrayInput interface {
	pulumi.Input

	ToTemplateTableStyleTargetArrayOutput() TemplateTableStyleTargetArrayOutput
	ToTemplateTableStyleTargetArrayOutputWithContext(context.Context) TemplateTableStyleTargetArrayOutput
}

type TemplateTableStyleTargetArray []TemplateTableStyleTargetInput

func (TemplateTableStyleTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateTableStyleTarget)(nil)).Elem()
}

func (i TemplateTableStyleTargetArray) ToTemplateTableStyleTargetArrayOutput() TemplateTableStyleTargetArrayOutput {
	return i.ToTemplateTableStyleTargetArrayOutputWithContext(context.Background())
}

func (i TemplateTableStyleTargetArray) ToTemplateTableStyleTargetArrayOutputWithContext(ctx context.Context) TemplateTableStyleTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableStyleTargetArrayOutput)
}

type TemplateTableStyleTargetOutput struct{ *pulumi.OutputState }

func (TemplateTableStyleTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableStyleTarget)(nil)).Elem()
}

func (o TemplateTableStyleTargetOutput) ToTemplateTableStyleTargetOutput() TemplateTableStyleTargetOutput {
	return o
}

func (o TemplateTableStyleTargetOutput) ToTemplateTableStyleTargetOutputWithContext(ctx context.Context) TemplateTableStyleTargetOutput {
	return o
}

// The cell type of the table style target.
func (o TemplateTableStyleTargetOutput) CellType() TemplateStyledCellTypeOutput {
	return o.ApplyT(func(v TemplateTableStyleTarget) TemplateStyledCellType { return v.CellType }).(TemplateStyledCellTypeOutput)
}

type TemplateTableStyleTargetArrayOutput struct{ *pulumi.OutputState }

func (TemplateTableStyleTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateTableStyleTarget)(nil)).Elem()
}

func (o TemplateTableStyleTargetArrayOutput) ToTemplateTableStyleTargetArrayOutput() TemplateTableStyleTargetArrayOutput {
	return o
}

func (o TemplateTableStyleTargetArrayOutput) ToTemplateTableStyleTargetArrayOutputWithContext(ctx context.Context) TemplateTableStyleTargetArrayOutput {
	return o
}

func (o TemplateTableStyleTargetArrayOutput) Index(i pulumi.IntInput) TemplateTableStyleTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateTableStyleTarget {
		return vs[0].([]TemplateTableStyleTarget)[vs[1].(int)]
	}).(TemplateTableStyleTargetOutput)
}

type TemplateTableUnaggregatedFieldWells struct {
	// The values field well for a pivot table. Values are unaggregated for an unaggregated table.
	Values []TemplateUnaggregatedField `pulumi:"values"`
}

// TemplateTableUnaggregatedFieldWellsInput is an input type that accepts TemplateTableUnaggregatedFieldWellsArgs and TemplateTableUnaggregatedFieldWellsOutput values.
// You can construct a concrete instance of `TemplateTableUnaggregatedFieldWellsInput` via:
//
//	TemplateTableUnaggregatedFieldWellsArgs{...}
type TemplateTableUnaggregatedFieldWellsInput interface {
	pulumi.Input

	ToTemplateTableUnaggregatedFieldWellsOutput() TemplateTableUnaggregatedFieldWellsOutput
	ToTemplateTableUnaggregatedFieldWellsOutputWithContext(context.Context) TemplateTableUnaggregatedFieldWellsOutput
}

type TemplateTableUnaggregatedFieldWellsArgs struct {
	// The values field well for a pivot table. Values are unaggregated for an unaggregated table.
	Values TemplateUnaggregatedFieldArrayInput `pulumi:"values"`
}

func (TemplateTableUnaggregatedFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableUnaggregatedFieldWells)(nil)).Elem()
}

func (i TemplateTableUnaggregatedFieldWellsArgs) ToTemplateTableUnaggregatedFieldWellsOutput() TemplateTableUnaggregatedFieldWellsOutput {
	return i.ToTemplateTableUnaggregatedFieldWellsOutputWithContext(context.Background())
}

func (i TemplateTableUnaggregatedFieldWellsArgs) ToTemplateTableUnaggregatedFieldWellsOutputWithContext(ctx context.Context) TemplateTableUnaggregatedFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableUnaggregatedFieldWellsOutput)
}

func (i TemplateTableUnaggregatedFieldWellsArgs) ToTemplateTableUnaggregatedFieldWellsPtrOutput() TemplateTableUnaggregatedFieldWellsPtrOutput {
	return i.ToTemplateTableUnaggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i TemplateTableUnaggregatedFieldWellsArgs) ToTemplateTableUnaggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateTableUnaggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableUnaggregatedFieldWellsOutput).ToTemplateTableUnaggregatedFieldWellsPtrOutputWithContext(ctx)
}

// TemplateTableUnaggregatedFieldWellsPtrInput is an input type that accepts TemplateTableUnaggregatedFieldWellsArgs, TemplateTableUnaggregatedFieldWellsPtr and TemplateTableUnaggregatedFieldWellsPtrOutput values.
// You can construct a concrete instance of `TemplateTableUnaggregatedFieldWellsPtrInput` via:
//
//	        TemplateTableUnaggregatedFieldWellsArgs{...}
//
//	or:
//
//	        nil
type TemplateTableUnaggregatedFieldWellsPtrInput interface {
	pulumi.Input

	ToTemplateTableUnaggregatedFieldWellsPtrOutput() TemplateTableUnaggregatedFieldWellsPtrOutput
	ToTemplateTableUnaggregatedFieldWellsPtrOutputWithContext(context.Context) TemplateTableUnaggregatedFieldWellsPtrOutput
}

type templateTableUnaggregatedFieldWellsPtrType TemplateTableUnaggregatedFieldWellsArgs

func TemplateTableUnaggregatedFieldWellsPtr(v *TemplateTableUnaggregatedFieldWellsArgs) TemplateTableUnaggregatedFieldWellsPtrInput {
	return (*templateTableUnaggregatedFieldWellsPtrType)(v)
}

func (*templateTableUnaggregatedFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableUnaggregatedFieldWells)(nil)).Elem()
}

func (i *templateTableUnaggregatedFieldWellsPtrType) ToTemplateTableUnaggregatedFieldWellsPtrOutput() TemplateTableUnaggregatedFieldWellsPtrOutput {
	return i.ToTemplateTableUnaggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i *templateTableUnaggregatedFieldWellsPtrType) ToTemplateTableUnaggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateTableUnaggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableUnaggregatedFieldWellsPtrOutput)
}

type TemplateTableUnaggregatedFieldWellsOutput struct{ *pulumi.OutputState }

func (TemplateTableUnaggregatedFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableUnaggregatedFieldWells)(nil)).Elem()
}

func (o TemplateTableUnaggregatedFieldWellsOutput) ToTemplateTableUnaggregatedFieldWellsOutput() TemplateTableUnaggregatedFieldWellsOutput {
	return o
}

func (o TemplateTableUnaggregatedFieldWellsOutput) ToTemplateTableUnaggregatedFieldWellsOutputWithContext(ctx context.Context) TemplateTableUnaggregatedFieldWellsOutput {
	return o
}

func (o TemplateTableUnaggregatedFieldWellsOutput) ToTemplateTableUnaggregatedFieldWellsPtrOutput() TemplateTableUnaggregatedFieldWellsPtrOutput {
	return o.ToTemplateTableUnaggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (o TemplateTableUnaggregatedFieldWellsOutput) ToTemplateTableUnaggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateTableUnaggregatedFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTableUnaggregatedFieldWells) *TemplateTableUnaggregatedFieldWells {
		return &v
	}).(TemplateTableUnaggregatedFieldWellsPtrOutput)
}

// The values field well for a pivot table. Values are unaggregated for an unaggregated table.
func (o TemplateTableUnaggregatedFieldWellsOutput) Values() TemplateUnaggregatedFieldArrayOutput {
	return o.ApplyT(func(v TemplateTableUnaggregatedFieldWells) []TemplateUnaggregatedField { return v.Values }).(TemplateUnaggregatedFieldArrayOutput)
}

type TemplateTableUnaggregatedFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (TemplateTableUnaggregatedFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableUnaggregatedFieldWells)(nil)).Elem()
}

func (o TemplateTableUnaggregatedFieldWellsPtrOutput) ToTemplateTableUnaggregatedFieldWellsPtrOutput() TemplateTableUnaggregatedFieldWellsPtrOutput {
	return o
}

func (o TemplateTableUnaggregatedFieldWellsPtrOutput) ToTemplateTableUnaggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateTableUnaggregatedFieldWellsPtrOutput {
	return o
}

func (o TemplateTableUnaggregatedFieldWellsPtrOutput) Elem() TemplateTableUnaggregatedFieldWellsOutput {
	return o.ApplyT(func(v *TemplateTableUnaggregatedFieldWells) TemplateTableUnaggregatedFieldWells {
		if v != nil {
			return *v
		}
		var ret TemplateTableUnaggregatedFieldWells
		return ret
	}).(TemplateTableUnaggregatedFieldWellsOutput)
}

// The values field well for a pivot table. Values are unaggregated for an unaggregated table.
func (o TemplateTableUnaggregatedFieldWellsPtrOutput) Values() TemplateUnaggregatedFieldArrayOutput {
	return o.ApplyT(func(v *TemplateTableUnaggregatedFieldWells) []TemplateUnaggregatedField {
		if v == nil {
			return nil
		}
		return v.Values
	}).(TemplateUnaggregatedFieldArrayOutput)
}

type TemplateTableVisual struct {
	// The list of custom actions that are configured for a visual.
	Actions []TemplateVisualCustomAction `pulumi:"actions"`
	// The configuration settings of the visual.
	ChartConfiguration *TemplateTableConfiguration `pulumi:"chartConfiguration"`
	// The conditional formatting for a `PivotTableVisual` .
	ConditionalFormatting *TemplateTableConditionalFormatting `pulumi:"conditionalFormatting"`
	// The subtitle that is displayed on the visual.
	Subtitle *TemplateVisualSubtitleLabelOptions `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title *TemplateVisualTitleLabelOptions `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText *string `pulumi:"visualContentAltText"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
	VisualId string `pulumi:"visualId"`
}

// TemplateTableVisualInput is an input type that accepts TemplateTableVisualArgs and TemplateTableVisualOutput values.
// You can construct a concrete instance of `TemplateTableVisualInput` via:
//
//	TemplateTableVisualArgs{...}
type TemplateTableVisualInput interface {
	pulumi.Input

	ToTemplateTableVisualOutput() TemplateTableVisualOutput
	ToTemplateTableVisualOutputWithContext(context.Context) TemplateTableVisualOutput
}

type TemplateTableVisualArgs struct {
	// The list of custom actions that are configured for a visual.
	Actions TemplateVisualCustomActionArrayInput `pulumi:"actions"`
	// The configuration settings of the visual.
	ChartConfiguration TemplateTableConfigurationPtrInput `pulumi:"chartConfiguration"`
	// The conditional formatting for a `PivotTableVisual` .
	ConditionalFormatting TemplateTableConditionalFormattingPtrInput `pulumi:"conditionalFormatting"`
	// The subtitle that is displayed on the visual.
	Subtitle TemplateVisualSubtitleLabelOptionsPtrInput `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title TemplateVisualTitleLabelOptionsPtrInput `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText pulumi.StringPtrInput `pulumi:"visualContentAltText"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
	VisualId pulumi.StringInput `pulumi:"visualId"`
}

func (TemplateTableVisualArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableVisual)(nil)).Elem()
}

func (i TemplateTableVisualArgs) ToTemplateTableVisualOutput() TemplateTableVisualOutput {
	return i.ToTemplateTableVisualOutputWithContext(context.Background())
}

func (i TemplateTableVisualArgs) ToTemplateTableVisualOutputWithContext(ctx context.Context) TemplateTableVisualOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableVisualOutput)
}

func (i TemplateTableVisualArgs) ToTemplateTableVisualPtrOutput() TemplateTableVisualPtrOutput {
	return i.ToTemplateTableVisualPtrOutputWithContext(context.Background())
}

func (i TemplateTableVisualArgs) ToTemplateTableVisualPtrOutputWithContext(ctx context.Context) TemplateTableVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableVisualOutput).ToTemplateTableVisualPtrOutputWithContext(ctx)
}

// TemplateTableVisualPtrInput is an input type that accepts TemplateTableVisualArgs, TemplateTableVisualPtr and TemplateTableVisualPtrOutput values.
// You can construct a concrete instance of `TemplateTableVisualPtrInput` via:
//
//	        TemplateTableVisualArgs{...}
//
//	or:
//
//	        nil
type TemplateTableVisualPtrInput interface {
	pulumi.Input

	ToTemplateTableVisualPtrOutput() TemplateTableVisualPtrOutput
	ToTemplateTableVisualPtrOutputWithContext(context.Context) TemplateTableVisualPtrOutput
}

type templateTableVisualPtrType TemplateTableVisualArgs

func TemplateTableVisualPtr(v *TemplateTableVisualArgs) TemplateTableVisualPtrInput {
	return (*templateTableVisualPtrType)(v)
}

func (*templateTableVisualPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableVisual)(nil)).Elem()
}

func (i *templateTableVisualPtrType) ToTemplateTableVisualPtrOutput() TemplateTableVisualPtrOutput {
	return i.ToTemplateTableVisualPtrOutputWithContext(context.Background())
}

func (i *templateTableVisualPtrType) ToTemplateTableVisualPtrOutputWithContext(ctx context.Context) TemplateTableVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableVisualPtrOutput)
}

type TemplateTableVisualOutput struct{ *pulumi.OutputState }

func (TemplateTableVisualOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableVisual)(nil)).Elem()
}

func (o TemplateTableVisualOutput) ToTemplateTableVisualOutput() TemplateTableVisualOutput {
	return o
}

func (o TemplateTableVisualOutput) ToTemplateTableVisualOutputWithContext(ctx context.Context) TemplateTableVisualOutput {
	return o
}

func (o TemplateTableVisualOutput) ToTemplateTableVisualPtrOutput() TemplateTableVisualPtrOutput {
	return o.ToTemplateTableVisualPtrOutputWithContext(context.Background())
}

func (o TemplateTableVisualOutput) ToTemplateTableVisualPtrOutputWithContext(ctx context.Context) TemplateTableVisualPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTableVisual) *TemplateTableVisual {
		return &v
	}).(TemplateTableVisualPtrOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplateTableVisualOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v TemplateTableVisual) []TemplateVisualCustomAction { return v.Actions }).(TemplateVisualCustomActionArrayOutput)
}

// The configuration settings of the visual.
func (o TemplateTableVisualOutput) ChartConfiguration() TemplateTableConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateTableVisual) *TemplateTableConfiguration { return v.ChartConfiguration }).(TemplateTableConfigurationPtrOutput)
}

// The conditional formatting for a `PivotTableVisual` .
func (o TemplateTableVisualOutput) ConditionalFormatting() TemplateTableConditionalFormattingPtrOutput {
	return o.ApplyT(func(v TemplateTableVisual) *TemplateTableConditionalFormatting { return v.ConditionalFormatting }).(TemplateTableConditionalFormattingPtrOutput)
}

// The subtitle that is displayed on the visual.
func (o TemplateTableVisualOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTableVisual) *TemplateVisualSubtitleLabelOptions { return v.Subtitle }).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o TemplateTableVisualOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTableVisual) *TemplateVisualTitleLabelOptions { return v.Title }).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o TemplateTableVisualOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateTableVisual) *string { return v.VisualContentAltText }).(pulumi.StringPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
func (o TemplateTableVisualOutput) VisualId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateTableVisual) string { return v.VisualId }).(pulumi.StringOutput)
}

type TemplateTableVisualPtrOutput struct{ *pulumi.OutputState }

func (TemplateTableVisualPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableVisual)(nil)).Elem()
}

func (o TemplateTableVisualPtrOutput) ToTemplateTableVisualPtrOutput() TemplateTableVisualPtrOutput {
	return o
}

func (o TemplateTableVisualPtrOutput) ToTemplateTableVisualPtrOutputWithContext(ctx context.Context) TemplateTableVisualPtrOutput {
	return o
}

func (o TemplateTableVisualPtrOutput) Elem() TemplateTableVisualOutput {
	return o.ApplyT(func(v *TemplateTableVisual) TemplateTableVisual {
		if v != nil {
			return *v
		}
		var ret TemplateTableVisual
		return ret
	}).(TemplateTableVisualOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplateTableVisualPtrOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v *TemplateTableVisual) []TemplateVisualCustomAction {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(TemplateVisualCustomActionArrayOutput)
}

// The configuration settings of the visual.
func (o TemplateTableVisualPtrOutput) ChartConfiguration() TemplateTableConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateTableVisual) *TemplateTableConfiguration {
		if v == nil {
			return nil
		}
		return v.ChartConfiguration
	}).(TemplateTableConfigurationPtrOutput)
}

// The conditional formatting for a `PivotTableVisual` .
func (o TemplateTableVisualPtrOutput) ConditionalFormatting() TemplateTableConditionalFormattingPtrOutput {
	return o.ApplyT(func(v *TemplateTableVisual) *TemplateTableConditionalFormatting {
		if v == nil {
			return nil
		}
		return v.ConditionalFormatting
	}).(TemplateTableConditionalFormattingPtrOutput)
}

// The subtitle that is displayed on the visual.
func (o TemplateTableVisualPtrOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTableVisual) *TemplateVisualSubtitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Subtitle
	}).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o TemplateTableVisualPtrOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTableVisual) *TemplateVisualTitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Title
	}).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o TemplateTableVisualPtrOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateTableVisual) *string {
		if v == nil {
			return nil
		}
		return v.VisualContentAltText
	}).(pulumi.StringPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
func (o TemplateTableVisualPtrOutput) VisualId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateTableVisual) *string {
		if v == nil {
			return nil
		}
		return &v.VisualId
	}).(pulumi.StringPtrOutput)
}

// <p>The key or keys of the key-value pairs for the resource tag or tags assigned to the
//
//	resource.</p>
type TemplateTag struct {
	// <p>Tag key.</p>
	Key string `pulumi:"key"`
	// <p>Tag value.</p>
	Value string `pulumi:"value"`
}

type TemplateTextAreaControlDisplayOptions struct {
	// The configuration of info icon label options.
	InfoIconLabelOptions *TemplateSheetControlInfoIconLabelOptions `pulumi:"infoIconLabelOptions"`
	// The configuration of the placeholder options in a text area control.
	PlaceholderOptions *TemplateTextControlPlaceholderOptions `pulumi:"placeholderOptions"`
	// The options to configure the title visibility, name, and font size.
	TitleOptions *TemplateLabelOptions `pulumi:"titleOptions"`
}

// TemplateTextAreaControlDisplayOptionsInput is an input type that accepts TemplateTextAreaControlDisplayOptionsArgs and TemplateTextAreaControlDisplayOptionsOutput values.
// You can construct a concrete instance of `TemplateTextAreaControlDisplayOptionsInput` via:
//
//	TemplateTextAreaControlDisplayOptionsArgs{...}
type TemplateTextAreaControlDisplayOptionsInput interface {
	pulumi.Input

	ToTemplateTextAreaControlDisplayOptionsOutput() TemplateTextAreaControlDisplayOptionsOutput
	ToTemplateTextAreaControlDisplayOptionsOutputWithContext(context.Context) TemplateTextAreaControlDisplayOptionsOutput
}

type TemplateTextAreaControlDisplayOptionsArgs struct {
	// The configuration of info icon label options.
	InfoIconLabelOptions TemplateSheetControlInfoIconLabelOptionsPtrInput `pulumi:"infoIconLabelOptions"`
	// The configuration of the placeholder options in a text area control.
	PlaceholderOptions TemplateTextControlPlaceholderOptionsPtrInput `pulumi:"placeholderOptions"`
	// The options to configure the title visibility, name, and font size.
	TitleOptions TemplateLabelOptionsPtrInput `pulumi:"titleOptions"`
}

func (TemplateTextAreaControlDisplayOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTextAreaControlDisplayOptions)(nil)).Elem()
}

func (i TemplateTextAreaControlDisplayOptionsArgs) ToTemplateTextAreaControlDisplayOptionsOutput() TemplateTextAreaControlDisplayOptionsOutput {
	return i.ToTemplateTextAreaControlDisplayOptionsOutputWithContext(context.Background())
}

func (i TemplateTextAreaControlDisplayOptionsArgs) ToTemplateTextAreaControlDisplayOptionsOutputWithContext(ctx context.Context) TemplateTextAreaControlDisplayOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTextAreaControlDisplayOptionsOutput)
}

func (i TemplateTextAreaControlDisplayOptionsArgs) ToTemplateTextAreaControlDisplayOptionsPtrOutput() TemplateTextAreaControlDisplayOptionsPtrOutput {
	return i.ToTemplateTextAreaControlDisplayOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateTextAreaControlDisplayOptionsArgs) ToTemplateTextAreaControlDisplayOptionsPtrOutputWithContext(ctx context.Context) TemplateTextAreaControlDisplayOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTextAreaControlDisplayOptionsOutput).ToTemplateTextAreaControlDisplayOptionsPtrOutputWithContext(ctx)
}

// TemplateTextAreaControlDisplayOptionsPtrInput is an input type that accepts TemplateTextAreaControlDisplayOptionsArgs, TemplateTextAreaControlDisplayOptionsPtr and TemplateTextAreaControlDisplayOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateTextAreaControlDisplayOptionsPtrInput` via:
//
//	        TemplateTextAreaControlDisplayOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateTextAreaControlDisplayOptionsPtrInput interface {
	pulumi.Input

	ToTemplateTextAreaControlDisplayOptionsPtrOutput() TemplateTextAreaControlDisplayOptionsPtrOutput
	ToTemplateTextAreaControlDisplayOptionsPtrOutputWithContext(context.Context) TemplateTextAreaControlDisplayOptionsPtrOutput
}

type templateTextAreaControlDisplayOptionsPtrType TemplateTextAreaControlDisplayOptionsArgs

func TemplateTextAreaControlDisplayOptionsPtr(v *TemplateTextAreaControlDisplayOptionsArgs) TemplateTextAreaControlDisplayOptionsPtrInput {
	return (*templateTextAreaControlDisplayOptionsPtrType)(v)
}

func (*templateTextAreaControlDisplayOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTextAreaControlDisplayOptions)(nil)).Elem()
}

func (i *templateTextAreaControlDisplayOptionsPtrType) ToTemplateTextAreaControlDisplayOptionsPtrOutput() TemplateTextAreaControlDisplayOptionsPtrOutput {
	return i.ToTemplateTextAreaControlDisplayOptionsPtrOutputWithContext(context.Background())
}

func (i *templateTextAreaControlDisplayOptionsPtrType) ToTemplateTextAreaControlDisplayOptionsPtrOutputWithContext(ctx context.Context) TemplateTextAreaControlDisplayOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTextAreaControlDisplayOptionsPtrOutput)
}

type TemplateTextAreaControlDisplayOptionsOutput struct{ *pulumi.OutputState }

func (TemplateTextAreaControlDisplayOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTextAreaControlDisplayOptions)(nil)).Elem()
}

func (o TemplateTextAreaControlDisplayOptionsOutput) ToTemplateTextAreaControlDisplayOptionsOutput() TemplateTextAreaControlDisplayOptionsOutput {
	return o
}

func (o TemplateTextAreaControlDisplayOptionsOutput) ToTemplateTextAreaControlDisplayOptionsOutputWithContext(ctx context.Context) TemplateTextAreaControlDisplayOptionsOutput {
	return o
}

func (o TemplateTextAreaControlDisplayOptionsOutput) ToTemplateTextAreaControlDisplayOptionsPtrOutput() TemplateTextAreaControlDisplayOptionsPtrOutput {
	return o.ToTemplateTextAreaControlDisplayOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateTextAreaControlDisplayOptionsOutput) ToTemplateTextAreaControlDisplayOptionsPtrOutputWithContext(ctx context.Context) TemplateTextAreaControlDisplayOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTextAreaControlDisplayOptions) *TemplateTextAreaControlDisplayOptions {
		return &v
	}).(TemplateTextAreaControlDisplayOptionsPtrOutput)
}

// The configuration of info icon label options.
func (o TemplateTextAreaControlDisplayOptionsOutput) InfoIconLabelOptions() TemplateSheetControlInfoIconLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTextAreaControlDisplayOptions) *TemplateSheetControlInfoIconLabelOptions {
		return v.InfoIconLabelOptions
	}).(TemplateSheetControlInfoIconLabelOptionsPtrOutput)
}

// The configuration of the placeholder options in a text area control.
func (o TemplateTextAreaControlDisplayOptionsOutput) PlaceholderOptions() TemplateTextControlPlaceholderOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTextAreaControlDisplayOptions) *TemplateTextControlPlaceholderOptions {
		return v.PlaceholderOptions
	}).(TemplateTextControlPlaceholderOptionsPtrOutput)
}

// The options to configure the title visibility, name, and font size.
func (o TemplateTextAreaControlDisplayOptionsOutput) TitleOptions() TemplateLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTextAreaControlDisplayOptions) *TemplateLabelOptions { return v.TitleOptions }).(TemplateLabelOptionsPtrOutput)
}

type TemplateTextAreaControlDisplayOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateTextAreaControlDisplayOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTextAreaControlDisplayOptions)(nil)).Elem()
}

func (o TemplateTextAreaControlDisplayOptionsPtrOutput) ToTemplateTextAreaControlDisplayOptionsPtrOutput() TemplateTextAreaControlDisplayOptionsPtrOutput {
	return o
}

func (o TemplateTextAreaControlDisplayOptionsPtrOutput) ToTemplateTextAreaControlDisplayOptionsPtrOutputWithContext(ctx context.Context) TemplateTextAreaControlDisplayOptionsPtrOutput {
	return o
}

func (o TemplateTextAreaControlDisplayOptionsPtrOutput) Elem() TemplateTextAreaControlDisplayOptionsOutput {
	return o.ApplyT(func(v *TemplateTextAreaControlDisplayOptions) TemplateTextAreaControlDisplayOptions {
		if v != nil {
			return *v
		}
		var ret TemplateTextAreaControlDisplayOptions
		return ret
	}).(TemplateTextAreaControlDisplayOptionsOutput)
}

// The configuration of info icon label options.
func (o TemplateTextAreaControlDisplayOptionsPtrOutput) InfoIconLabelOptions() TemplateSheetControlInfoIconLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTextAreaControlDisplayOptions) *TemplateSheetControlInfoIconLabelOptions {
		if v == nil {
			return nil
		}
		return v.InfoIconLabelOptions
	}).(TemplateSheetControlInfoIconLabelOptionsPtrOutput)
}

// The configuration of the placeholder options in a text area control.
func (o TemplateTextAreaControlDisplayOptionsPtrOutput) PlaceholderOptions() TemplateTextControlPlaceholderOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTextAreaControlDisplayOptions) *TemplateTextControlPlaceholderOptions {
		if v == nil {
			return nil
		}
		return v.PlaceholderOptions
	}).(TemplateTextControlPlaceholderOptionsPtrOutput)
}

// The options to configure the title visibility, name, and font size.
func (o TemplateTextAreaControlDisplayOptionsPtrOutput) TitleOptions() TemplateLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTextAreaControlDisplayOptions) *TemplateLabelOptions {
		if v == nil {
			return nil
		}
		return v.TitleOptions
	}).(TemplateLabelOptionsPtrOutput)
}

type TemplateTextConditionalFormat struct {
	// The conditional formatting for the text background color.
	BackgroundColor *TemplateConditionalFormattingColor `pulumi:"backgroundColor"`
	// The conditional formatting for the icon.
	Icon *TemplateConditionalFormattingIcon `pulumi:"icon"`
	// The conditional formatting for the text color.
	TextColor *TemplateConditionalFormattingColor `pulumi:"textColor"`
}

// TemplateTextConditionalFormatInput is an input type that accepts TemplateTextConditionalFormatArgs and TemplateTextConditionalFormatOutput values.
// You can construct a concrete instance of `TemplateTextConditionalFormatInput` via:
//
//	TemplateTextConditionalFormatArgs{...}
type TemplateTextConditionalFormatInput interface {
	pulumi.Input

	ToTemplateTextConditionalFormatOutput() TemplateTextConditionalFormatOutput
	ToTemplateTextConditionalFormatOutputWithContext(context.Context) TemplateTextConditionalFormatOutput
}

type TemplateTextConditionalFormatArgs struct {
	// The conditional formatting for the text background color.
	BackgroundColor TemplateConditionalFormattingColorPtrInput `pulumi:"backgroundColor"`
	// The conditional formatting for the icon.
	Icon TemplateConditionalFormattingIconPtrInput `pulumi:"icon"`
	// The conditional formatting for the text color.
	TextColor TemplateConditionalFormattingColorPtrInput `pulumi:"textColor"`
}

func (TemplateTextConditionalFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTextConditionalFormat)(nil)).Elem()
}

func (i TemplateTextConditionalFormatArgs) ToTemplateTextConditionalFormatOutput() TemplateTextConditionalFormatOutput {
	return i.ToTemplateTextConditionalFormatOutputWithContext(context.Background())
}

func (i TemplateTextConditionalFormatArgs) ToTemplateTextConditionalFormatOutputWithContext(ctx context.Context) TemplateTextConditionalFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTextConditionalFormatOutput)
}

func (i TemplateTextConditionalFormatArgs) ToTemplateTextConditionalFormatPtrOutput() TemplateTextConditionalFormatPtrOutput {
	return i.ToTemplateTextConditionalFormatPtrOutputWithContext(context.Background())
}

func (i TemplateTextConditionalFormatArgs) ToTemplateTextConditionalFormatPtrOutputWithContext(ctx context.Context) TemplateTextConditionalFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTextConditionalFormatOutput).ToTemplateTextConditionalFormatPtrOutputWithContext(ctx)
}

// TemplateTextConditionalFormatPtrInput is an input type that accepts TemplateTextConditionalFormatArgs, TemplateTextConditionalFormatPtr and TemplateTextConditionalFormatPtrOutput values.
// You can construct a concrete instance of `TemplateTextConditionalFormatPtrInput` via:
//
//	        TemplateTextConditionalFormatArgs{...}
//
//	or:
//
//	        nil
type TemplateTextConditionalFormatPtrInput interface {
	pulumi.Input

	ToTemplateTextConditionalFormatPtrOutput() TemplateTextConditionalFormatPtrOutput
	ToTemplateTextConditionalFormatPtrOutputWithContext(context.Context) TemplateTextConditionalFormatPtrOutput
}

type templateTextConditionalFormatPtrType TemplateTextConditionalFormatArgs

func TemplateTextConditionalFormatPtr(v *TemplateTextConditionalFormatArgs) TemplateTextConditionalFormatPtrInput {
	return (*templateTextConditionalFormatPtrType)(v)
}

func (*templateTextConditionalFormatPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTextConditionalFormat)(nil)).Elem()
}

func (i *templateTextConditionalFormatPtrType) ToTemplateTextConditionalFormatPtrOutput() TemplateTextConditionalFormatPtrOutput {
	return i.ToTemplateTextConditionalFormatPtrOutputWithContext(context.Background())
}

func (i *templateTextConditionalFormatPtrType) ToTemplateTextConditionalFormatPtrOutputWithContext(ctx context.Context) TemplateTextConditionalFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTextConditionalFormatPtrOutput)
}

type TemplateTextConditionalFormatOutput struct{ *pulumi.OutputState }

func (TemplateTextConditionalFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTextConditionalFormat)(nil)).Elem()
}

func (o TemplateTextConditionalFormatOutput) ToTemplateTextConditionalFormatOutput() TemplateTextConditionalFormatOutput {
	return o
}

func (o TemplateTextConditionalFormatOutput) ToTemplateTextConditionalFormatOutputWithContext(ctx context.Context) TemplateTextConditionalFormatOutput {
	return o
}

func (o TemplateTextConditionalFormatOutput) ToTemplateTextConditionalFormatPtrOutput() TemplateTextConditionalFormatPtrOutput {
	return o.ToTemplateTextConditionalFormatPtrOutputWithContext(context.Background())
}

func (o TemplateTextConditionalFormatOutput) ToTemplateTextConditionalFormatPtrOutputWithContext(ctx context.Context) TemplateTextConditionalFormatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTextConditionalFormat) *TemplateTextConditionalFormat {
		return &v
	}).(TemplateTextConditionalFormatPtrOutput)
}

// The conditional formatting for the text background color.
func (o TemplateTextConditionalFormatOutput) BackgroundColor() TemplateConditionalFormattingColorPtrOutput {
	return o.ApplyT(func(v TemplateTextConditionalFormat) *TemplateConditionalFormattingColor { return v.BackgroundColor }).(TemplateConditionalFormattingColorPtrOutput)
}

// The conditional formatting for the icon.
func (o TemplateTextConditionalFormatOutput) Icon() TemplateConditionalFormattingIconPtrOutput {
	return o.ApplyT(func(v TemplateTextConditionalFormat) *TemplateConditionalFormattingIcon { return v.Icon }).(TemplateConditionalFormattingIconPtrOutput)
}

// The conditional formatting for the text color.
func (o TemplateTextConditionalFormatOutput) TextColor() TemplateConditionalFormattingColorPtrOutput {
	return o.ApplyT(func(v TemplateTextConditionalFormat) *TemplateConditionalFormattingColor { return v.TextColor }).(TemplateConditionalFormattingColorPtrOutput)
}

type TemplateTextConditionalFormatPtrOutput struct{ *pulumi.OutputState }

func (TemplateTextConditionalFormatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTextConditionalFormat)(nil)).Elem()
}

func (o TemplateTextConditionalFormatPtrOutput) ToTemplateTextConditionalFormatPtrOutput() TemplateTextConditionalFormatPtrOutput {
	return o
}

func (o TemplateTextConditionalFormatPtrOutput) ToTemplateTextConditionalFormatPtrOutputWithContext(ctx context.Context) TemplateTextConditionalFormatPtrOutput {
	return o
}

func (o TemplateTextConditionalFormatPtrOutput) Elem() TemplateTextConditionalFormatOutput {
	return o.ApplyT(func(v *TemplateTextConditionalFormat) TemplateTextConditionalFormat {
		if v != nil {
			return *v
		}
		var ret TemplateTextConditionalFormat
		return ret
	}).(TemplateTextConditionalFormatOutput)
}

// The conditional formatting for the text background color.
func (o TemplateTextConditionalFormatPtrOutput) BackgroundColor() TemplateConditionalFormattingColorPtrOutput {
	return o.ApplyT(func(v *TemplateTextConditionalFormat) *TemplateConditionalFormattingColor {
		if v == nil {
			return nil
		}
		return v.BackgroundColor
	}).(TemplateConditionalFormattingColorPtrOutput)
}

// The conditional formatting for the icon.
func (o TemplateTextConditionalFormatPtrOutput) Icon() TemplateConditionalFormattingIconPtrOutput {
	return o.ApplyT(func(v *TemplateTextConditionalFormat) *TemplateConditionalFormattingIcon {
		if v == nil {
			return nil
		}
		return v.Icon
	}).(TemplateConditionalFormattingIconPtrOutput)
}

// The conditional formatting for the text color.
func (o TemplateTextConditionalFormatPtrOutput) TextColor() TemplateConditionalFormattingColorPtrOutput {
	return o.ApplyT(func(v *TemplateTextConditionalFormat) *TemplateConditionalFormattingColor {
		if v == nil {
			return nil
		}
		return v.TextColor
	}).(TemplateConditionalFormattingColorPtrOutput)
}

type TemplateTextControlPlaceholderOptions struct {
	// The visibility configuration of the placeholder options in a text control.
	Visibility interface{} `pulumi:"visibility"`
}

// TemplateTextControlPlaceholderOptionsInput is an input type that accepts TemplateTextControlPlaceholderOptionsArgs and TemplateTextControlPlaceholderOptionsOutput values.
// You can construct a concrete instance of `TemplateTextControlPlaceholderOptionsInput` via:
//
//	TemplateTextControlPlaceholderOptionsArgs{...}
type TemplateTextControlPlaceholderOptionsInput interface {
	pulumi.Input

	ToTemplateTextControlPlaceholderOptionsOutput() TemplateTextControlPlaceholderOptionsOutput
	ToTemplateTextControlPlaceholderOptionsOutputWithContext(context.Context) TemplateTextControlPlaceholderOptionsOutput
}

type TemplateTextControlPlaceholderOptionsArgs struct {
	// The visibility configuration of the placeholder options in a text control.
	Visibility pulumi.Input `pulumi:"visibility"`
}

func (TemplateTextControlPlaceholderOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTextControlPlaceholderOptions)(nil)).Elem()
}

func (i TemplateTextControlPlaceholderOptionsArgs) ToTemplateTextControlPlaceholderOptionsOutput() TemplateTextControlPlaceholderOptionsOutput {
	return i.ToTemplateTextControlPlaceholderOptionsOutputWithContext(context.Background())
}

func (i TemplateTextControlPlaceholderOptionsArgs) ToTemplateTextControlPlaceholderOptionsOutputWithContext(ctx context.Context) TemplateTextControlPlaceholderOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTextControlPlaceholderOptionsOutput)
}

func (i TemplateTextControlPlaceholderOptionsArgs) ToTemplateTextControlPlaceholderOptionsPtrOutput() TemplateTextControlPlaceholderOptionsPtrOutput {
	return i.ToTemplateTextControlPlaceholderOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateTextControlPlaceholderOptionsArgs) ToTemplateTextControlPlaceholderOptionsPtrOutputWithContext(ctx context.Context) TemplateTextControlPlaceholderOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTextControlPlaceholderOptionsOutput).ToTemplateTextControlPlaceholderOptionsPtrOutputWithContext(ctx)
}

// TemplateTextControlPlaceholderOptionsPtrInput is an input type that accepts TemplateTextControlPlaceholderOptionsArgs, TemplateTextControlPlaceholderOptionsPtr and TemplateTextControlPlaceholderOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateTextControlPlaceholderOptionsPtrInput` via:
//
//	        TemplateTextControlPlaceholderOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateTextControlPlaceholderOptionsPtrInput interface {
	pulumi.Input

	ToTemplateTextControlPlaceholderOptionsPtrOutput() TemplateTextControlPlaceholderOptionsPtrOutput
	ToTemplateTextControlPlaceholderOptionsPtrOutputWithContext(context.Context) TemplateTextControlPlaceholderOptionsPtrOutput
}

type templateTextControlPlaceholderOptionsPtrType TemplateTextControlPlaceholderOptionsArgs

func TemplateTextControlPlaceholderOptionsPtr(v *TemplateTextControlPlaceholderOptionsArgs) TemplateTextControlPlaceholderOptionsPtrInput {
	return (*templateTextControlPlaceholderOptionsPtrType)(v)
}

func (*templateTextControlPlaceholderOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTextControlPlaceholderOptions)(nil)).Elem()
}

func (i *templateTextControlPlaceholderOptionsPtrType) ToTemplateTextControlPlaceholderOptionsPtrOutput() TemplateTextControlPlaceholderOptionsPtrOutput {
	return i.ToTemplateTextControlPlaceholderOptionsPtrOutputWithContext(context.Background())
}

func (i *templateTextControlPlaceholderOptionsPtrType) ToTemplateTextControlPlaceholderOptionsPtrOutputWithContext(ctx context.Context) TemplateTextControlPlaceholderOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTextControlPlaceholderOptionsPtrOutput)
}

type TemplateTextControlPlaceholderOptionsOutput struct{ *pulumi.OutputState }

func (TemplateTextControlPlaceholderOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTextControlPlaceholderOptions)(nil)).Elem()
}

func (o TemplateTextControlPlaceholderOptionsOutput) ToTemplateTextControlPlaceholderOptionsOutput() TemplateTextControlPlaceholderOptionsOutput {
	return o
}

func (o TemplateTextControlPlaceholderOptionsOutput) ToTemplateTextControlPlaceholderOptionsOutputWithContext(ctx context.Context) TemplateTextControlPlaceholderOptionsOutput {
	return o
}

func (o TemplateTextControlPlaceholderOptionsOutput) ToTemplateTextControlPlaceholderOptionsPtrOutput() TemplateTextControlPlaceholderOptionsPtrOutput {
	return o.ToTemplateTextControlPlaceholderOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateTextControlPlaceholderOptionsOutput) ToTemplateTextControlPlaceholderOptionsPtrOutputWithContext(ctx context.Context) TemplateTextControlPlaceholderOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTextControlPlaceholderOptions) *TemplateTextControlPlaceholderOptions {
		return &v
	}).(TemplateTextControlPlaceholderOptionsPtrOutput)
}

// The visibility configuration of the placeholder options in a text control.
func (o TemplateTextControlPlaceholderOptionsOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateTextControlPlaceholderOptions) interface{} { return v.Visibility }).(pulumi.AnyOutput)
}

type TemplateTextControlPlaceholderOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateTextControlPlaceholderOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTextControlPlaceholderOptions)(nil)).Elem()
}

func (o TemplateTextControlPlaceholderOptionsPtrOutput) ToTemplateTextControlPlaceholderOptionsPtrOutput() TemplateTextControlPlaceholderOptionsPtrOutput {
	return o
}

func (o TemplateTextControlPlaceholderOptionsPtrOutput) ToTemplateTextControlPlaceholderOptionsPtrOutputWithContext(ctx context.Context) TemplateTextControlPlaceholderOptionsPtrOutput {
	return o
}

func (o TemplateTextControlPlaceholderOptionsPtrOutput) Elem() TemplateTextControlPlaceholderOptionsOutput {
	return o.ApplyT(func(v *TemplateTextControlPlaceholderOptions) TemplateTextControlPlaceholderOptions {
		if v != nil {
			return *v
		}
		var ret TemplateTextControlPlaceholderOptions
		return ret
	}).(TemplateTextControlPlaceholderOptionsOutput)
}

// The visibility configuration of the placeholder options in a text control.
func (o TemplateTextControlPlaceholderOptionsPtrOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateTextControlPlaceholderOptions) interface{} {
		if v == nil {
			return nil
		}
		return v.Visibility
	}).(pulumi.AnyOutput)
}

type TemplateTextFieldControlDisplayOptions struct {
	// The configuration of info icon label options.
	InfoIconLabelOptions *TemplateSheetControlInfoIconLabelOptions `pulumi:"infoIconLabelOptions"`
	// The configuration of the placeholder options in a text field control.
	PlaceholderOptions *TemplateTextControlPlaceholderOptions `pulumi:"placeholderOptions"`
	// The options to configure the title visibility, name, and font size.
	TitleOptions *TemplateLabelOptions `pulumi:"titleOptions"`
}

// TemplateTextFieldControlDisplayOptionsInput is an input type that accepts TemplateTextFieldControlDisplayOptionsArgs and TemplateTextFieldControlDisplayOptionsOutput values.
// You can construct a concrete instance of `TemplateTextFieldControlDisplayOptionsInput` via:
//
//	TemplateTextFieldControlDisplayOptionsArgs{...}
type TemplateTextFieldControlDisplayOptionsInput interface {
	pulumi.Input

	ToTemplateTextFieldControlDisplayOptionsOutput() TemplateTextFieldControlDisplayOptionsOutput
	ToTemplateTextFieldControlDisplayOptionsOutputWithContext(context.Context) TemplateTextFieldControlDisplayOptionsOutput
}

type TemplateTextFieldControlDisplayOptionsArgs struct {
	// The configuration of info icon label options.
	InfoIconLabelOptions TemplateSheetControlInfoIconLabelOptionsPtrInput `pulumi:"infoIconLabelOptions"`
	// The configuration of the placeholder options in a text field control.
	PlaceholderOptions TemplateTextControlPlaceholderOptionsPtrInput `pulumi:"placeholderOptions"`
	// The options to configure the title visibility, name, and font size.
	TitleOptions TemplateLabelOptionsPtrInput `pulumi:"titleOptions"`
}

func (TemplateTextFieldControlDisplayOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTextFieldControlDisplayOptions)(nil)).Elem()
}

func (i TemplateTextFieldControlDisplayOptionsArgs) ToTemplateTextFieldControlDisplayOptionsOutput() TemplateTextFieldControlDisplayOptionsOutput {
	return i.ToTemplateTextFieldControlDisplayOptionsOutputWithContext(context.Background())
}

func (i TemplateTextFieldControlDisplayOptionsArgs) ToTemplateTextFieldControlDisplayOptionsOutputWithContext(ctx context.Context) TemplateTextFieldControlDisplayOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTextFieldControlDisplayOptionsOutput)
}

func (i TemplateTextFieldControlDisplayOptionsArgs) ToTemplateTextFieldControlDisplayOptionsPtrOutput() TemplateTextFieldControlDisplayOptionsPtrOutput {
	return i.ToTemplateTextFieldControlDisplayOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateTextFieldControlDisplayOptionsArgs) ToTemplateTextFieldControlDisplayOptionsPtrOutputWithContext(ctx context.Context) TemplateTextFieldControlDisplayOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTextFieldControlDisplayOptionsOutput).ToTemplateTextFieldControlDisplayOptionsPtrOutputWithContext(ctx)
}

// TemplateTextFieldControlDisplayOptionsPtrInput is an input type that accepts TemplateTextFieldControlDisplayOptionsArgs, TemplateTextFieldControlDisplayOptionsPtr and TemplateTextFieldControlDisplayOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateTextFieldControlDisplayOptionsPtrInput` via:
//
//	        TemplateTextFieldControlDisplayOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateTextFieldControlDisplayOptionsPtrInput interface {
	pulumi.Input

	ToTemplateTextFieldControlDisplayOptionsPtrOutput() TemplateTextFieldControlDisplayOptionsPtrOutput
	ToTemplateTextFieldControlDisplayOptionsPtrOutputWithContext(context.Context) TemplateTextFieldControlDisplayOptionsPtrOutput
}

type templateTextFieldControlDisplayOptionsPtrType TemplateTextFieldControlDisplayOptionsArgs

func TemplateTextFieldControlDisplayOptionsPtr(v *TemplateTextFieldControlDisplayOptionsArgs) TemplateTextFieldControlDisplayOptionsPtrInput {
	return (*templateTextFieldControlDisplayOptionsPtrType)(v)
}

func (*templateTextFieldControlDisplayOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTextFieldControlDisplayOptions)(nil)).Elem()
}

func (i *templateTextFieldControlDisplayOptionsPtrType) ToTemplateTextFieldControlDisplayOptionsPtrOutput() TemplateTextFieldControlDisplayOptionsPtrOutput {
	return i.ToTemplateTextFieldControlDisplayOptionsPtrOutputWithContext(context.Background())
}

func (i *templateTextFieldControlDisplayOptionsPtrType) ToTemplateTextFieldControlDisplayOptionsPtrOutputWithContext(ctx context.Context) TemplateTextFieldControlDisplayOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTextFieldControlDisplayOptionsPtrOutput)
}

type TemplateTextFieldControlDisplayOptionsOutput struct{ *pulumi.OutputState }

func (TemplateTextFieldControlDisplayOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTextFieldControlDisplayOptions)(nil)).Elem()
}

func (o TemplateTextFieldControlDisplayOptionsOutput) ToTemplateTextFieldControlDisplayOptionsOutput() TemplateTextFieldControlDisplayOptionsOutput {
	return o
}

func (o TemplateTextFieldControlDisplayOptionsOutput) ToTemplateTextFieldControlDisplayOptionsOutputWithContext(ctx context.Context) TemplateTextFieldControlDisplayOptionsOutput {
	return o
}

func (o TemplateTextFieldControlDisplayOptionsOutput) ToTemplateTextFieldControlDisplayOptionsPtrOutput() TemplateTextFieldControlDisplayOptionsPtrOutput {
	return o.ToTemplateTextFieldControlDisplayOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateTextFieldControlDisplayOptionsOutput) ToTemplateTextFieldControlDisplayOptionsPtrOutputWithContext(ctx context.Context) TemplateTextFieldControlDisplayOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTextFieldControlDisplayOptions) *TemplateTextFieldControlDisplayOptions {
		return &v
	}).(TemplateTextFieldControlDisplayOptionsPtrOutput)
}

// The configuration of info icon label options.
func (o TemplateTextFieldControlDisplayOptionsOutput) InfoIconLabelOptions() TemplateSheetControlInfoIconLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTextFieldControlDisplayOptions) *TemplateSheetControlInfoIconLabelOptions {
		return v.InfoIconLabelOptions
	}).(TemplateSheetControlInfoIconLabelOptionsPtrOutput)
}

// The configuration of the placeholder options in a text field control.
func (o TemplateTextFieldControlDisplayOptionsOutput) PlaceholderOptions() TemplateTextControlPlaceholderOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTextFieldControlDisplayOptions) *TemplateTextControlPlaceholderOptions {
		return v.PlaceholderOptions
	}).(TemplateTextControlPlaceholderOptionsPtrOutput)
}

// The options to configure the title visibility, name, and font size.
func (o TemplateTextFieldControlDisplayOptionsOutput) TitleOptions() TemplateLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTextFieldControlDisplayOptions) *TemplateLabelOptions { return v.TitleOptions }).(TemplateLabelOptionsPtrOutput)
}

type TemplateTextFieldControlDisplayOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateTextFieldControlDisplayOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTextFieldControlDisplayOptions)(nil)).Elem()
}

func (o TemplateTextFieldControlDisplayOptionsPtrOutput) ToTemplateTextFieldControlDisplayOptionsPtrOutput() TemplateTextFieldControlDisplayOptionsPtrOutput {
	return o
}

func (o TemplateTextFieldControlDisplayOptionsPtrOutput) ToTemplateTextFieldControlDisplayOptionsPtrOutputWithContext(ctx context.Context) TemplateTextFieldControlDisplayOptionsPtrOutput {
	return o
}

func (o TemplateTextFieldControlDisplayOptionsPtrOutput) Elem() TemplateTextFieldControlDisplayOptionsOutput {
	return o.ApplyT(func(v *TemplateTextFieldControlDisplayOptions) TemplateTextFieldControlDisplayOptions {
		if v != nil {
			return *v
		}
		var ret TemplateTextFieldControlDisplayOptions
		return ret
	}).(TemplateTextFieldControlDisplayOptionsOutput)
}

// The configuration of info icon label options.
func (o TemplateTextFieldControlDisplayOptionsPtrOutput) InfoIconLabelOptions() TemplateSheetControlInfoIconLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTextFieldControlDisplayOptions) *TemplateSheetControlInfoIconLabelOptions {
		if v == nil {
			return nil
		}
		return v.InfoIconLabelOptions
	}).(TemplateSheetControlInfoIconLabelOptionsPtrOutput)
}

// The configuration of the placeholder options in a text field control.
func (o TemplateTextFieldControlDisplayOptionsPtrOutput) PlaceholderOptions() TemplateTextControlPlaceholderOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTextFieldControlDisplayOptions) *TemplateTextControlPlaceholderOptions {
		if v == nil {
			return nil
		}
		return v.PlaceholderOptions
	}).(TemplateTextControlPlaceholderOptionsPtrOutput)
}

// The options to configure the title visibility, name, and font size.
func (o TemplateTextFieldControlDisplayOptionsPtrOutput) TitleOptions() TemplateLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTextFieldControlDisplayOptions) *TemplateLabelOptions {
		if v == nil {
			return nil
		}
		return v.TitleOptions
	}).(TemplateLabelOptionsPtrOutput)
}

type TemplateThousandSeparatorOptions struct {
	// Determines the way numbers are styled to accommodate different readability standards. The `DEFAULT` value uses the standard international grouping system and groups numbers by the thousands. The `LAKHS` value uses the Indian numbering system and groups numbers by lakhs and crores.
	GroupingStyle *TemplateDigitGroupingStyle `pulumi:"groupingStyle"`
	// Determines the thousands separator symbol.
	Symbol *TemplateNumericSeparatorSymbol `pulumi:"symbol"`
	// Determines the visibility of the thousands separator.
	Visibility interface{} `pulumi:"visibility"`
}

// TemplateThousandSeparatorOptionsInput is an input type that accepts TemplateThousandSeparatorOptionsArgs and TemplateThousandSeparatorOptionsOutput values.
// You can construct a concrete instance of `TemplateThousandSeparatorOptionsInput` via:
//
//	TemplateThousandSeparatorOptionsArgs{...}
type TemplateThousandSeparatorOptionsInput interface {
	pulumi.Input

	ToTemplateThousandSeparatorOptionsOutput() TemplateThousandSeparatorOptionsOutput
	ToTemplateThousandSeparatorOptionsOutputWithContext(context.Context) TemplateThousandSeparatorOptionsOutput
}

type TemplateThousandSeparatorOptionsArgs struct {
	// Determines the way numbers are styled to accommodate different readability standards. The `DEFAULT` value uses the standard international grouping system and groups numbers by the thousands. The `LAKHS` value uses the Indian numbering system and groups numbers by lakhs and crores.
	GroupingStyle TemplateDigitGroupingStylePtrInput `pulumi:"groupingStyle"`
	// Determines the thousands separator symbol.
	Symbol TemplateNumericSeparatorSymbolPtrInput `pulumi:"symbol"`
	// Determines the visibility of the thousands separator.
	Visibility pulumi.Input `pulumi:"visibility"`
}

func (TemplateThousandSeparatorOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateThousandSeparatorOptions)(nil)).Elem()
}

func (i TemplateThousandSeparatorOptionsArgs) ToTemplateThousandSeparatorOptionsOutput() TemplateThousandSeparatorOptionsOutput {
	return i.ToTemplateThousandSeparatorOptionsOutputWithContext(context.Background())
}

func (i TemplateThousandSeparatorOptionsArgs) ToTemplateThousandSeparatorOptionsOutputWithContext(ctx context.Context) TemplateThousandSeparatorOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateThousandSeparatorOptionsOutput)
}

func (i TemplateThousandSeparatorOptionsArgs) ToTemplateThousandSeparatorOptionsPtrOutput() TemplateThousandSeparatorOptionsPtrOutput {
	return i.ToTemplateThousandSeparatorOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateThousandSeparatorOptionsArgs) ToTemplateThousandSeparatorOptionsPtrOutputWithContext(ctx context.Context) TemplateThousandSeparatorOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateThousandSeparatorOptionsOutput).ToTemplateThousandSeparatorOptionsPtrOutputWithContext(ctx)
}

// TemplateThousandSeparatorOptionsPtrInput is an input type that accepts TemplateThousandSeparatorOptionsArgs, TemplateThousandSeparatorOptionsPtr and TemplateThousandSeparatorOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateThousandSeparatorOptionsPtrInput` via:
//
//	        TemplateThousandSeparatorOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateThousandSeparatorOptionsPtrInput interface {
	pulumi.Input

	ToTemplateThousandSeparatorOptionsPtrOutput() TemplateThousandSeparatorOptionsPtrOutput
	ToTemplateThousandSeparatorOptionsPtrOutputWithContext(context.Context) TemplateThousandSeparatorOptionsPtrOutput
}

type templateThousandSeparatorOptionsPtrType TemplateThousandSeparatorOptionsArgs

func TemplateThousandSeparatorOptionsPtr(v *TemplateThousandSeparatorOptionsArgs) TemplateThousandSeparatorOptionsPtrInput {
	return (*templateThousandSeparatorOptionsPtrType)(v)
}

func (*templateThousandSeparatorOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateThousandSeparatorOptions)(nil)).Elem()
}

func (i *templateThousandSeparatorOptionsPtrType) ToTemplateThousandSeparatorOptionsPtrOutput() TemplateThousandSeparatorOptionsPtrOutput {
	return i.ToTemplateThousandSeparatorOptionsPtrOutputWithContext(context.Background())
}

func (i *templateThousandSeparatorOptionsPtrType) ToTemplateThousandSeparatorOptionsPtrOutputWithContext(ctx context.Context) TemplateThousandSeparatorOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateThousandSeparatorOptionsPtrOutput)
}

type TemplateThousandSeparatorOptionsOutput struct{ *pulumi.OutputState }

func (TemplateThousandSeparatorOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateThousandSeparatorOptions)(nil)).Elem()
}

func (o TemplateThousandSeparatorOptionsOutput) ToTemplateThousandSeparatorOptionsOutput() TemplateThousandSeparatorOptionsOutput {
	return o
}

func (o TemplateThousandSeparatorOptionsOutput) ToTemplateThousandSeparatorOptionsOutputWithContext(ctx context.Context) TemplateThousandSeparatorOptionsOutput {
	return o
}

func (o TemplateThousandSeparatorOptionsOutput) ToTemplateThousandSeparatorOptionsPtrOutput() TemplateThousandSeparatorOptionsPtrOutput {
	return o.ToTemplateThousandSeparatorOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateThousandSeparatorOptionsOutput) ToTemplateThousandSeparatorOptionsPtrOutputWithContext(ctx context.Context) TemplateThousandSeparatorOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateThousandSeparatorOptions) *TemplateThousandSeparatorOptions {
		return &v
	}).(TemplateThousandSeparatorOptionsPtrOutput)
}

// Determines the way numbers are styled to accommodate different readability standards. The `DEFAULT` value uses the standard international grouping system and groups numbers by the thousands. The `LAKHS` value uses the Indian numbering system and groups numbers by lakhs and crores.
func (o TemplateThousandSeparatorOptionsOutput) GroupingStyle() TemplateDigitGroupingStylePtrOutput {
	return o.ApplyT(func(v TemplateThousandSeparatorOptions) *TemplateDigitGroupingStyle { return v.GroupingStyle }).(TemplateDigitGroupingStylePtrOutput)
}

// Determines the thousands separator symbol.
func (o TemplateThousandSeparatorOptionsOutput) Symbol() TemplateNumericSeparatorSymbolPtrOutput {
	return o.ApplyT(func(v TemplateThousandSeparatorOptions) *TemplateNumericSeparatorSymbol { return v.Symbol }).(TemplateNumericSeparatorSymbolPtrOutput)
}

// Determines the visibility of the thousands separator.
func (o TemplateThousandSeparatorOptionsOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateThousandSeparatorOptions) interface{} { return v.Visibility }).(pulumi.AnyOutput)
}

type TemplateThousandSeparatorOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateThousandSeparatorOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateThousandSeparatorOptions)(nil)).Elem()
}

func (o TemplateThousandSeparatorOptionsPtrOutput) ToTemplateThousandSeparatorOptionsPtrOutput() TemplateThousandSeparatorOptionsPtrOutput {
	return o
}

func (o TemplateThousandSeparatorOptionsPtrOutput) ToTemplateThousandSeparatorOptionsPtrOutputWithContext(ctx context.Context) TemplateThousandSeparatorOptionsPtrOutput {
	return o
}

func (o TemplateThousandSeparatorOptionsPtrOutput) Elem() TemplateThousandSeparatorOptionsOutput {
	return o.ApplyT(func(v *TemplateThousandSeparatorOptions) TemplateThousandSeparatorOptions {
		if v != nil {
			return *v
		}
		var ret TemplateThousandSeparatorOptions
		return ret
	}).(TemplateThousandSeparatorOptionsOutput)
}

// Determines the way numbers are styled to accommodate different readability standards. The `DEFAULT` value uses the standard international grouping system and groups numbers by the thousands. The `LAKHS` value uses the Indian numbering system and groups numbers by lakhs and crores.
func (o TemplateThousandSeparatorOptionsPtrOutput) GroupingStyle() TemplateDigitGroupingStylePtrOutput {
	return o.ApplyT(func(v *TemplateThousandSeparatorOptions) *TemplateDigitGroupingStyle {
		if v == nil {
			return nil
		}
		return v.GroupingStyle
	}).(TemplateDigitGroupingStylePtrOutput)
}

// Determines the thousands separator symbol.
func (o TemplateThousandSeparatorOptionsPtrOutput) Symbol() TemplateNumericSeparatorSymbolPtrOutput {
	return o.ApplyT(func(v *TemplateThousandSeparatorOptions) *TemplateNumericSeparatorSymbol {
		if v == nil {
			return nil
		}
		return v.Symbol
	}).(TemplateNumericSeparatorSymbolPtrOutput)
}

// Determines the visibility of the thousands separator.
func (o TemplateThousandSeparatorOptionsPtrOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateThousandSeparatorOptions) interface{} {
		if v == nil {
			return nil
		}
		return v.Visibility
	}).(pulumi.AnyOutput)
}

type TemplateTimeBasedForecastProperties struct {
	// The lower boundary setup of a forecast computation.
	LowerBoundary *float64 `pulumi:"lowerBoundary"`
	// The periods backward setup of a forecast computation.
	PeriodsBackward *float64 `pulumi:"periodsBackward"`
	// The periods forward setup of a forecast computation.
	PeriodsForward *float64 `pulumi:"periodsForward"`
	// The prediction interval setup of a forecast computation.
	PredictionInterval *float64 `pulumi:"predictionInterval"`
	// The seasonality setup of a forecast computation. Choose one of the following options:
	//
	// - `NULL` : The input is set to `NULL` .
	// - `NON_NULL` : The input is set to a custom value.
	Seasonality *float64 `pulumi:"seasonality"`
	// The upper boundary setup of a forecast computation.
	UpperBoundary *float64 `pulumi:"upperBoundary"`
}

// TemplateTimeBasedForecastPropertiesInput is an input type that accepts TemplateTimeBasedForecastPropertiesArgs and TemplateTimeBasedForecastPropertiesOutput values.
// You can construct a concrete instance of `TemplateTimeBasedForecastPropertiesInput` via:
//
//	TemplateTimeBasedForecastPropertiesArgs{...}
type TemplateTimeBasedForecastPropertiesInput interface {
	pulumi.Input

	ToTemplateTimeBasedForecastPropertiesOutput() TemplateTimeBasedForecastPropertiesOutput
	ToTemplateTimeBasedForecastPropertiesOutputWithContext(context.Context) TemplateTimeBasedForecastPropertiesOutput
}

type TemplateTimeBasedForecastPropertiesArgs struct {
	// The lower boundary setup of a forecast computation.
	LowerBoundary pulumi.Float64PtrInput `pulumi:"lowerBoundary"`
	// The periods backward setup of a forecast computation.
	PeriodsBackward pulumi.Float64PtrInput `pulumi:"periodsBackward"`
	// The periods forward setup of a forecast computation.
	PeriodsForward pulumi.Float64PtrInput `pulumi:"periodsForward"`
	// The prediction interval setup of a forecast computation.
	PredictionInterval pulumi.Float64PtrInput `pulumi:"predictionInterval"`
	// The seasonality setup of a forecast computation. Choose one of the following options:
	//
	// - `NULL` : The input is set to `NULL` .
	// - `NON_NULL` : The input is set to a custom value.
	Seasonality pulumi.Float64PtrInput `pulumi:"seasonality"`
	// The upper boundary setup of a forecast computation.
	UpperBoundary pulumi.Float64PtrInput `pulumi:"upperBoundary"`
}

func (TemplateTimeBasedForecastPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTimeBasedForecastProperties)(nil)).Elem()
}

func (i TemplateTimeBasedForecastPropertiesArgs) ToTemplateTimeBasedForecastPropertiesOutput() TemplateTimeBasedForecastPropertiesOutput {
	return i.ToTemplateTimeBasedForecastPropertiesOutputWithContext(context.Background())
}

func (i TemplateTimeBasedForecastPropertiesArgs) ToTemplateTimeBasedForecastPropertiesOutputWithContext(ctx context.Context) TemplateTimeBasedForecastPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTimeBasedForecastPropertiesOutput)
}

func (i TemplateTimeBasedForecastPropertiesArgs) ToTemplateTimeBasedForecastPropertiesPtrOutput() TemplateTimeBasedForecastPropertiesPtrOutput {
	return i.ToTemplateTimeBasedForecastPropertiesPtrOutputWithContext(context.Background())
}

func (i TemplateTimeBasedForecastPropertiesArgs) ToTemplateTimeBasedForecastPropertiesPtrOutputWithContext(ctx context.Context) TemplateTimeBasedForecastPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTimeBasedForecastPropertiesOutput).ToTemplateTimeBasedForecastPropertiesPtrOutputWithContext(ctx)
}

// TemplateTimeBasedForecastPropertiesPtrInput is an input type that accepts TemplateTimeBasedForecastPropertiesArgs, TemplateTimeBasedForecastPropertiesPtr and TemplateTimeBasedForecastPropertiesPtrOutput values.
// You can construct a concrete instance of `TemplateTimeBasedForecastPropertiesPtrInput` via:
//
//	        TemplateTimeBasedForecastPropertiesArgs{...}
//
//	or:
//
//	        nil
type TemplateTimeBasedForecastPropertiesPtrInput interface {
	pulumi.Input

	ToTemplateTimeBasedForecastPropertiesPtrOutput() TemplateTimeBasedForecastPropertiesPtrOutput
	ToTemplateTimeBasedForecastPropertiesPtrOutputWithContext(context.Context) TemplateTimeBasedForecastPropertiesPtrOutput
}

type templateTimeBasedForecastPropertiesPtrType TemplateTimeBasedForecastPropertiesArgs

func TemplateTimeBasedForecastPropertiesPtr(v *TemplateTimeBasedForecastPropertiesArgs) TemplateTimeBasedForecastPropertiesPtrInput {
	return (*templateTimeBasedForecastPropertiesPtrType)(v)
}

func (*templateTimeBasedForecastPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTimeBasedForecastProperties)(nil)).Elem()
}

func (i *templateTimeBasedForecastPropertiesPtrType) ToTemplateTimeBasedForecastPropertiesPtrOutput() TemplateTimeBasedForecastPropertiesPtrOutput {
	return i.ToTemplateTimeBasedForecastPropertiesPtrOutputWithContext(context.Background())
}

func (i *templateTimeBasedForecastPropertiesPtrType) ToTemplateTimeBasedForecastPropertiesPtrOutputWithContext(ctx context.Context) TemplateTimeBasedForecastPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTimeBasedForecastPropertiesPtrOutput)
}

type TemplateTimeBasedForecastPropertiesOutput struct{ *pulumi.OutputState }

func (TemplateTimeBasedForecastPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTimeBasedForecastProperties)(nil)).Elem()
}

func (o TemplateTimeBasedForecastPropertiesOutput) ToTemplateTimeBasedForecastPropertiesOutput() TemplateTimeBasedForecastPropertiesOutput {
	return o
}

func (o TemplateTimeBasedForecastPropertiesOutput) ToTemplateTimeBasedForecastPropertiesOutputWithContext(ctx context.Context) TemplateTimeBasedForecastPropertiesOutput {
	return o
}

func (o TemplateTimeBasedForecastPropertiesOutput) ToTemplateTimeBasedForecastPropertiesPtrOutput() TemplateTimeBasedForecastPropertiesPtrOutput {
	return o.ToTemplateTimeBasedForecastPropertiesPtrOutputWithContext(context.Background())
}

func (o TemplateTimeBasedForecastPropertiesOutput) ToTemplateTimeBasedForecastPropertiesPtrOutputWithContext(ctx context.Context) TemplateTimeBasedForecastPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTimeBasedForecastProperties) *TemplateTimeBasedForecastProperties {
		return &v
	}).(TemplateTimeBasedForecastPropertiesPtrOutput)
}

// The lower boundary setup of a forecast computation.
func (o TemplateTimeBasedForecastPropertiesOutput) LowerBoundary() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateTimeBasedForecastProperties) *float64 { return v.LowerBoundary }).(pulumi.Float64PtrOutput)
}

// The periods backward setup of a forecast computation.
func (o TemplateTimeBasedForecastPropertiesOutput) PeriodsBackward() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateTimeBasedForecastProperties) *float64 { return v.PeriodsBackward }).(pulumi.Float64PtrOutput)
}

// The periods forward setup of a forecast computation.
func (o TemplateTimeBasedForecastPropertiesOutput) PeriodsForward() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateTimeBasedForecastProperties) *float64 { return v.PeriodsForward }).(pulumi.Float64PtrOutput)
}

// The prediction interval setup of a forecast computation.
func (o TemplateTimeBasedForecastPropertiesOutput) PredictionInterval() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateTimeBasedForecastProperties) *float64 { return v.PredictionInterval }).(pulumi.Float64PtrOutput)
}

// The seasonality setup of a forecast computation. Choose one of the following options:
//
// - `NULL` : The input is set to `NULL` .
// - `NON_NULL` : The input is set to a custom value.
func (o TemplateTimeBasedForecastPropertiesOutput) Seasonality() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateTimeBasedForecastProperties) *float64 { return v.Seasonality }).(pulumi.Float64PtrOutput)
}

// The upper boundary setup of a forecast computation.
func (o TemplateTimeBasedForecastPropertiesOutput) UpperBoundary() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateTimeBasedForecastProperties) *float64 { return v.UpperBoundary }).(pulumi.Float64PtrOutput)
}

type TemplateTimeBasedForecastPropertiesPtrOutput struct{ *pulumi.OutputState }

func (TemplateTimeBasedForecastPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTimeBasedForecastProperties)(nil)).Elem()
}

func (o TemplateTimeBasedForecastPropertiesPtrOutput) ToTemplateTimeBasedForecastPropertiesPtrOutput() TemplateTimeBasedForecastPropertiesPtrOutput {
	return o
}

func (o TemplateTimeBasedForecastPropertiesPtrOutput) ToTemplateTimeBasedForecastPropertiesPtrOutputWithContext(ctx context.Context) TemplateTimeBasedForecastPropertiesPtrOutput {
	return o
}

func (o TemplateTimeBasedForecastPropertiesPtrOutput) Elem() TemplateTimeBasedForecastPropertiesOutput {
	return o.ApplyT(func(v *TemplateTimeBasedForecastProperties) TemplateTimeBasedForecastProperties {
		if v != nil {
			return *v
		}
		var ret TemplateTimeBasedForecastProperties
		return ret
	}).(TemplateTimeBasedForecastPropertiesOutput)
}

// The lower boundary setup of a forecast computation.
func (o TemplateTimeBasedForecastPropertiesPtrOutput) LowerBoundary() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateTimeBasedForecastProperties) *float64 {
		if v == nil {
			return nil
		}
		return v.LowerBoundary
	}).(pulumi.Float64PtrOutput)
}

// The periods backward setup of a forecast computation.
func (o TemplateTimeBasedForecastPropertiesPtrOutput) PeriodsBackward() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateTimeBasedForecastProperties) *float64 {
		if v == nil {
			return nil
		}
		return v.PeriodsBackward
	}).(pulumi.Float64PtrOutput)
}

// The periods forward setup of a forecast computation.
func (o TemplateTimeBasedForecastPropertiesPtrOutput) PeriodsForward() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateTimeBasedForecastProperties) *float64 {
		if v == nil {
			return nil
		}
		return v.PeriodsForward
	}).(pulumi.Float64PtrOutput)
}

// The prediction interval setup of a forecast computation.
func (o TemplateTimeBasedForecastPropertiesPtrOutput) PredictionInterval() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateTimeBasedForecastProperties) *float64 {
		if v == nil {
			return nil
		}
		return v.PredictionInterval
	}).(pulumi.Float64PtrOutput)
}

// The seasonality setup of a forecast computation. Choose one of the following options:
//
// - `NULL` : The input is set to `NULL` .
// - `NON_NULL` : The input is set to a custom value.
func (o TemplateTimeBasedForecastPropertiesPtrOutput) Seasonality() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateTimeBasedForecastProperties) *float64 {
		if v == nil {
			return nil
		}
		return v.Seasonality
	}).(pulumi.Float64PtrOutput)
}

// The upper boundary setup of a forecast computation.
func (o TemplateTimeBasedForecastPropertiesPtrOutput) UpperBoundary() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateTimeBasedForecastProperties) *float64 {
		if v == nil {
			return nil
		}
		return v.UpperBoundary
	}).(pulumi.Float64PtrOutput)
}

type TemplateTimeEqualityFilter struct {
	// The column that the filter is applied to.
	Column TemplateColumnIdentifier `pulumi:"column"`
	// The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
	DefaultFilterControlConfiguration *TemplateDefaultFilterControlConfiguration `pulumi:"defaultFilterControlConfiguration"`
	// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
	FilterId string `pulumi:"filterId"`
	// The parameter whose value should be used for the filter value.
	//
	// This field is mutually exclusive to `Value` and `RollingDate` .
	ParameterName *string `pulumi:"parameterName"`
	// The rolling date input for the `TimeEquality` filter.
	//
	// This field is mutually exclusive to `Value` and `ParameterName` .
	RollingDate *TemplateRollingDateConfiguration `pulumi:"rollingDate"`
	// The level of time precision that is used to aggregate `DateTime` values.
	TimeGranularity *TemplateTimeGranularity `pulumi:"timeGranularity"`
	// The value of a `TimeEquality` filter.
	//
	// This field is mutually exclusive to `RollingDate` and `ParameterName` .
	Value *string `pulumi:"value"`
}

// TemplateTimeEqualityFilterInput is an input type that accepts TemplateTimeEqualityFilterArgs and TemplateTimeEqualityFilterOutput values.
// You can construct a concrete instance of `TemplateTimeEqualityFilterInput` via:
//
//	TemplateTimeEqualityFilterArgs{...}
type TemplateTimeEqualityFilterInput interface {
	pulumi.Input

	ToTemplateTimeEqualityFilterOutput() TemplateTimeEqualityFilterOutput
	ToTemplateTimeEqualityFilterOutputWithContext(context.Context) TemplateTimeEqualityFilterOutput
}

type TemplateTimeEqualityFilterArgs struct {
	// The column that the filter is applied to.
	Column TemplateColumnIdentifierInput `pulumi:"column"`
	// The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
	DefaultFilterControlConfiguration TemplateDefaultFilterControlConfigurationPtrInput `pulumi:"defaultFilterControlConfiguration"`
	// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
	FilterId pulumi.StringInput `pulumi:"filterId"`
	// The parameter whose value should be used for the filter value.
	//
	// This field is mutually exclusive to `Value` and `RollingDate` .
	ParameterName pulumi.StringPtrInput `pulumi:"parameterName"`
	// The rolling date input for the `TimeEquality` filter.
	//
	// This field is mutually exclusive to `Value` and `ParameterName` .
	RollingDate TemplateRollingDateConfigurationPtrInput `pulumi:"rollingDate"`
	// The level of time precision that is used to aggregate `DateTime` values.
	TimeGranularity TemplateTimeGranularityPtrInput `pulumi:"timeGranularity"`
	// The value of a `TimeEquality` filter.
	//
	// This field is mutually exclusive to `RollingDate` and `ParameterName` .
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (TemplateTimeEqualityFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTimeEqualityFilter)(nil)).Elem()
}

func (i TemplateTimeEqualityFilterArgs) ToTemplateTimeEqualityFilterOutput() TemplateTimeEqualityFilterOutput {
	return i.ToTemplateTimeEqualityFilterOutputWithContext(context.Background())
}

func (i TemplateTimeEqualityFilterArgs) ToTemplateTimeEqualityFilterOutputWithContext(ctx context.Context) TemplateTimeEqualityFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTimeEqualityFilterOutput)
}

func (i TemplateTimeEqualityFilterArgs) ToTemplateTimeEqualityFilterPtrOutput() TemplateTimeEqualityFilterPtrOutput {
	return i.ToTemplateTimeEqualityFilterPtrOutputWithContext(context.Background())
}

func (i TemplateTimeEqualityFilterArgs) ToTemplateTimeEqualityFilterPtrOutputWithContext(ctx context.Context) TemplateTimeEqualityFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTimeEqualityFilterOutput).ToTemplateTimeEqualityFilterPtrOutputWithContext(ctx)
}

// TemplateTimeEqualityFilterPtrInput is an input type that accepts TemplateTimeEqualityFilterArgs, TemplateTimeEqualityFilterPtr and TemplateTimeEqualityFilterPtrOutput values.
// You can construct a concrete instance of `TemplateTimeEqualityFilterPtrInput` via:
//
//	        TemplateTimeEqualityFilterArgs{...}
//
//	or:
//
//	        nil
type TemplateTimeEqualityFilterPtrInput interface {
	pulumi.Input

	ToTemplateTimeEqualityFilterPtrOutput() TemplateTimeEqualityFilterPtrOutput
	ToTemplateTimeEqualityFilterPtrOutputWithContext(context.Context) TemplateTimeEqualityFilterPtrOutput
}

type templateTimeEqualityFilterPtrType TemplateTimeEqualityFilterArgs

func TemplateTimeEqualityFilterPtr(v *TemplateTimeEqualityFilterArgs) TemplateTimeEqualityFilterPtrInput {
	return (*templateTimeEqualityFilterPtrType)(v)
}

func (*templateTimeEqualityFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTimeEqualityFilter)(nil)).Elem()
}

func (i *templateTimeEqualityFilterPtrType) ToTemplateTimeEqualityFilterPtrOutput() TemplateTimeEqualityFilterPtrOutput {
	return i.ToTemplateTimeEqualityFilterPtrOutputWithContext(context.Background())
}

func (i *templateTimeEqualityFilterPtrType) ToTemplateTimeEqualityFilterPtrOutputWithContext(ctx context.Context) TemplateTimeEqualityFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTimeEqualityFilterPtrOutput)
}

type TemplateTimeEqualityFilterOutput struct{ *pulumi.OutputState }

func (TemplateTimeEqualityFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTimeEqualityFilter)(nil)).Elem()
}

func (o TemplateTimeEqualityFilterOutput) ToTemplateTimeEqualityFilterOutput() TemplateTimeEqualityFilterOutput {
	return o
}

func (o TemplateTimeEqualityFilterOutput) ToTemplateTimeEqualityFilterOutputWithContext(ctx context.Context) TemplateTimeEqualityFilterOutput {
	return o
}

func (o TemplateTimeEqualityFilterOutput) ToTemplateTimeEqualityFilterPtrOutput() TemplateTimeEqualityFilterPtrOutput {
	return o.ToTemplateTimeEqualityFilterPtrOutputWithContext(context.Background())
}

func (o TemplateTimeEqualityFilterOutput) ToTemplateTimeEqualityFilterPtrOutputWithContext(ctx context.Context) TemplateTimeEqualityFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTimeEqualityFilter) *TemplateTimeEqualityFilter {
		return &v
	}).(TemplateTimeEqualityFilterPtrOutput)
}

// The column that the filter is applied to.
func (o TemplateTimeEqualityFilterOutput) Column() TemplateColumnIdentifierOutput {
	return o.ApplyT(func(v TemplateTimeEqualityFilter) TemplateColumnIdentifier { return v.Column }).(TemplateColumnIdentifierOutput)
}

// The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
func (o TemplateTimeEqualityFilterOutput) DefaultFilterControlConfiguration() TemplateDefaultFilterControlConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateTimeEqualityFilter) *TemplateDefaultFilterControlConfiguration {
		return v.DefaultFilterControlConfiguration
	}).(TemplateDefaultFilterControlConfigurationPtrOutput)
}

// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
func (o TemplateTimeEqualityFilterOutput) FilterId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateTimeEqualityFilter) string { return v.FilterId }).(pulumi.StringOutput)
}

// The parameter whose value should be used for the filter value.
//
// This field is mutually exclusive to `Value` and `RollingDate` .
func (o TemplateTimeEqualityFilterOutput) ParameterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateTimeEqualityFilter) *string { return v.ParameterName }).(pulumi.StringPtrOutput)
}

// The rolling date input for the `TimeEquality` filter.
//
// This field is mutually exclusive to `Value` and `ParameterName` .
func (o TemplateTimeEqualityFilterOutput) RollingDate() TemplateRollingDateConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateTimeEqualityFilter) *TemplateRollingDateConfiguration { return v.RollingDate }).(TemplateRollingDateConfigurationPtrOutput)
}

// The level of time precision that is used to aggregate `DateTime` values.
func (o TemplateTimeEqualityFilterOutput) TimeGranularity() TemplateTimeGranularityPtrOutput {
	return o.ApplyT(func(v TemplateTimeEqualityFilter) *TemplateTimeGranularity { return v.TimeGranularity }).(TemplateTimeGranularityPtrOutput)
}

// The value of a `TimeEquality` filter.
//
// This field is mutually exclusive to `RollingDate` and `ParameterName` .
func (o TemplateTimeEqualityFilterOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateTimeEqualityFilter) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type TemplateTimeEqualityFilterPtrOutput struct{ *pulumi.OutputState }

func (TemplateTimeEqualityFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTimeEqualityFilter)(nil)).Elem()
}

func (o TemplateTimeEqualityFilterPtrOutput) ToTemplateTimeEqualityFilterPtrOutput() TemplateTimeEqualityFilterPtrOutput {
	return o
}

func (o TemplateTimeEqualityFilterPtrOutput) ToTemplateTimeEqualityFilterPtrOutputWithContext(ctx context.Context) TemplateTimeEqualityFilterPtrOutput {
	return o
}

func (o TemplateTimeEqualityFilterPtrOutput) Elem() TemplateTimeEqualityFilterOutput {
	return o.ApplyT(func(v *TemplateTimeEqualityFilter) TemplateTimeEqualityFilter {
		if v != nil {
			return *v
		}
		var ret TemplateTimeEqualityFilter
		return ret
	}).(TemplateTimeEqualityFilterOutput)
}

// The column that the filter is applied to.
func (o TemplateTimeEqualityFilterPtrOutput) Column() TemplateColumnIdentifierPtrOutput {
	return o.ApplyT(func(v *TemplateTimeEqualityFilter) *TemplateColumnIdentifier {
		if v == nil {
			return nil
		}
		return &v.Column
	}).(TemplateColumnIdentifierPtrOutput)
}

// The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
func (o TemplateTimeEqualityFilterPtrOutput) DefaultFilterControlConfiguration() TemplateDefaultFilterControlConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateTimeEqualityFilter) *TemplateDefaultFilterControlConfiguration {
		if v == nil {
			return nil
		}
		return v.DefaultFilterControlConfiguration
	}).(TemplateDefaultFilterControlConfigurationPtrOutput)
}

// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
func (o TemplateTimeEqualityFilterPtrOutput) FilterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateTimeEqualityFilter) *string {
		if v == nil {
			return nil
		}
		return &v.FilterId
	}).(pulumi.StringPtrOutput)
}

// The parameter whose value should be used for the filter value.
//
// This field is mutually exclusive to `Value` and `RollingDate` .
func (o TemplateTimeEqualityFilterPtrOutput) ParameterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateTimeEqualityFilter) *string {
		if v == nil {
			return nil
		}
		return v.ParameterName
	}).(pulumi.StringPtrOutput)
}

// The rolling date input for the `TimeEquality` filter.
//
// This field is mutually exclusive to `Value` and `ParameterName` .
func (o TemplateTimeEqualityFilterPtrOutput) RollingDate() TemplateRollingDateConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateTimeEqualityFilter) *TemplateRollingDateConfiguration {
		if v == nil {
			return nil
		}
		return v.RollingDate
	}).(TemplateRollingDateConfigurationPtrOutput)
}

// The level of time precision that is used to aggregate `DateTime` values.
func (o TemplateTimeEqualityFilterPtrOutput) TimeGranularity() TemplateTimeGranularityPtrOutput {
	return o.ApplyT(func(v *TemplateTimeEqualityFilter) *TemplateTimeGranularity {
		if v == nil {
			return nil
		}
		return v.TimeGranularity
	}).(TemplateTimeGranularityPtrOutput)
}

// The value of a `TimeEquality` filter.
//
// This field is mutually exclusive to `RollingDate` and `ParameterName` .
func (o TemplateTimeEqualityFilterPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateTimeEqualityFilter) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type TemplateTimeRangeDrillDownFilter struct {
	// The column that the filter is applied to.
	Column TemplateColumnIdentifier `pulumi:"column"`
	// The maximum value for the filter value range.
	RangeMaximum string `pulumi:"rangeMaximum"`
	// The minimum value for the filter value range.
	RangeMinimum string `pulumi:"rangeMinimum"`
	// The level of time precision that is used to aggregate `DateTime` values.
	TimeGranularity TemplateTimeGranularity `pulumi:"timeGranularity"`
}

// TemplateTimeRangeDrillDownFilterInput is an input type that accepts TemplateTimeRangeDrillDownFilterArgs and TemplateTimeRangeDrillDownFilterOutput values.
// You can construct a concrete instance of `TemplateTimeRangeDrillDownFilterInput` via:
//
//	TemplateTimeRangeDrillDownFilterArgs{...}
type TemplateTimeRangeDrillDownFilterInput interface {
	pulumi.Input

	ToTemplateTimeRangeDrillDownFilterOutput() TemplateTimeRangeDrillDownFilterOutput
	ToTemplateTimeRangeDrillDownFilterOutputWithContext(context.Context) TemplateTimeRangeDrillDownFilterOutput
}

type TemplateTimeRangeDrillDownFilterArgs struct {
	// The column that the filter is applied to.
	Column TemplateColumnIdentifierInput `pulumi:"column"`
	// The maximum value for the filter value range.
	RangeMaximum pulumi.StringInput `pulumi:"rangeMaximum"`
	// The minimum value for the filter value range.
	RangeMinimum pulumi.StringInput `pulumi:"rangeMinimum"`
	// The level of time precision that is used to aggregate `DateTime` values.
	TimeGranularity TemplateTimeGranularityInput `pulumi:"timeGranularity"`
}

func (TemplateTimeRangeDrillDownFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTimeRangeDrillDownFilter)(nil)).Elem()
}

func (i TemplateTimeRangeDrillDownFilterArgs) ToTemplateTimeRangeDrillDownFilterOutput() TemplateTimeRangeDrillDownFilterOutput {
	return i.ToTemplateTimeRangeDrillDownFilterOutputWithContext(context.Background())
}

func (i TemplateTimeRangeDrillDownFilterArgs) ToTemplateTimeRangeDrillDownFilterOutputWithContext(ctx context.Context) TemplateTimeRangeDrillDownFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTimeRangeDrillDownFilterOutput)
}

func (i TemplateTimeRangeDrillDownFilterArgs) ToTemplateTimeRangeDrillDownFilterPtrOutput() TemplateTimeRangeDrillDownFilterPtrOutput {
	return i.ToTemplateTimeRangeDrillDownFilterPtrOutputWithContext(context.Background())
}

func (i TemplateTimeRangeDrillDownFilterArgs) ToTemplateTimeRangeDrillDownFilterPtrOutputWithContext(ctx context.Context) TemplateTimeRangeDrillDownFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTimeRangeDrillDownFilterOutput).ToTemplateTimeRangeDrillDownFilterPtrOutputWithContext(ctx)
}

// TemplateTimeRangeDrillDownFilterPtrInput is an input type that accepts TemplateTimeRangeDrillDownFilterArgs, TemplateTimeRangeDrillDownFilterPtr and TemplateTimeRangeDrillDownFilterPtrOutput values.
// You can construct a concrete instance of `TemplateTimeRangeDrillDownFilterPtrInput` via:
//
//	        TemplateTimeRangeDrillDownFilterArgs{...}
//
//	or:
//
//	        nil
type TemplateTimeRangeDrillDownFilterPtrInput interface {
	pulumi.Input

	ToTemplateTimeRangeDrillDownFilterPtrOutput() TemplateTimeRangeDrillDownFilterPtrOutput
	ToTemplateTimeRangeDrillDownFilterPtrOutputWithContext(context.Context) TemplateTimeRangeDrillDownFilterPtrOutput
}

type templateTimeRangeDrillDownFilterPtrType TemplateTimeRangeDrillDownFilterArgs

func TemplateTimeRangeDrillDownFilterPtr(v *TemplateTimeRangeDrillDownFilterArgs) TemplateTimeRangeDrillDownFilterPtrInput {
	return (*templateTimeRangeDrillDownFilterPtrType)(v)
}

func (*templateTimeRangeDrillDownFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTimeRangeDrillDownFilter)(nil)).Elem()
}

func (i *templateTimeRangeDrillDownFilterPtrType) ToTemplateTimeRangeDrillDownFilterPtrOutput() TemplateTimeRangeDrillDownFilterPtrOutput {
	return i.ToTemplateTimeRangeDrillDownFilterPtrOutputWithContext(context.Background())
}

func (i *templateTimeRangeDrillDownFilterPtrType) ToTemplateTimeRangeDrillDownFilterPtrOutputWithContext(ctx context.Context) TemplateTimeRangeDrillDownFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTimeRangeDrillDownFilterPtrOutput)
}

type TemplateTimeRangeDrillDownFilterOutput struct{ *pulumi.OutputState }

func (TemplateTimeRangeDrillDownFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTimeRangeDrillDownFilter)(nil)).Elem()
}

func (o TemplateTimeRangeDrillDownFilterOutput) ToTemplateTimeRangeDrillDownFilterOutput() TemplateTimeRangeDrillDownFilterOutput {
	return o
}

func (o TemplateTimeRangeDrillDownFilterOutput) ToTemplateTimeRangeDrillDownFilterOutputWithContext(ctx context.Context) TemplateTimeRangeDrillDownFilterOutput {
	return o
}

func (o TemplateTimeRangeDrillDownFilterOutput) ToTemplateTimeRangeDrillDownFilterPtrOutput() TemplateTimeRangeDrillDownFilterPtrOutput {
	return o.ToTemplateTimeRangeDrillDownFilterPtrOutputWithContext(context.Background())
}

func (o TemplateTimeRangeDrillDownFilterOutput) ToTemplateTimeRangeDrillDownFilterPtrOutputWithContext(ctx context.Context) TemplateTimeRangeDrillDownFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTimeRangeDrillDownFilter) *TemplateTimeRangeDrillDownFilter {
		return &v
	}).(TemplateTimeRangeDrillDownFilterPtrOutput)
}

// The column that the filter is applied to.
func (o TemplateTimeRangeDrillDownFilterOutput) Column() TemplateColumnIdentifierOutput {
	return o.ApplyT(func(v TemplateTimeRangeDrillDownFilter) TemplateColumnIdentifier { return v.Column }).(TemplateColumnIdentifierOutput)
}

// The maximum value for the filter value range.
func (o TemplateTimeRangeDrillDownFilterOutput) RangeMaximum() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateTimeRangeDrillDownFilter) string { return v.RangeMaximum }).(pulumi.StringOutput)
}

// The minimum value for the filter value range.
func (o TemplateTimeRangeDrillDownFilterOutput) RangeMinimum() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateTimeRangeDrillDownFilter) string { return v.RangeMinimum }).(pulumi.StringOutput)
}

// The level of time precision that is used to aggregate `DateTime` values.
func (o TemplateTimeRangeDrillDownFilterOutput) TimeGranularity() TemplateTimeGranularityOutput {
	return o.ApplyT(func(v TemplateTimeRangeDrillDownFilter) TemplateTimeGranularity { return v.TimeGranularity }).(TemplateTimeGranularityOutput)
}

type TemplateTimeRangeDrillDownFilterPtrOutput struct{ *pulumi.OutputState }

func (TemplateTimeRangeDrillDownFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTimeRangeDrillDownFilter)(nil)).Elem()
}

func (o TemplateTimeRangeDrillDownFilterPtrOutput) ToTemplateTimeRangeDrillDownFilterPtrOutput() TemplateTimeRangeDrillDownFilterPtrOutput {
	return o
}

func (o TemplateTimeRangeDrillDownFilterPtrOutput) ToTemplateTimeRangeDrillDownFilterPtrOutputWithContext(ctx context.Context) TemplateTimeRangeDrillDownFilterPtrOutput {
	return o
}

func (o TemplateTimeRangeDrillDownFilterPtrOutput) Elem() TemplateTimeRangeDrillDownFilterOutput {
	return o.ApplyT(func(v *TemplateTimeRangeDrillDownFilter) TemplateTimeRangeDrillDownFilter {
		if v != nil {
			return *v
		}
		var ret TemplateTimeRangeDrillDownFilter
		return ret
	}).(TemplateTimeRangeDrillDownFilterOutput)
}

// The column that the filter is applied to.
func (o TemplateTimeRangeDrillDownFilterPtrOutput) Column() TemplateColumnIdentifierPtrOutput {
	return o.ApplyT(func(v *TemplateTimeRangeDrillDownFilter) *TemplateColumnIdentifier {
		if v == nil {
			return nil
		}
		return &v.Column
	}).(TemplateColumnIdentifierPtrOutput)
}

// The maximum value for the filter value range.
func (o TemplateTimeRangeDrillDownFilterPtrOutput) RangeMaximum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateTimeRangeDrillDownFilter) *string {
		if v == nil {
			return nil
		}
		return &v.RangeMaximum
	}).(pulumi.StringPtrOutput)
}

// The minimum value for the filter value range.
func (o TemplateTimeRangeDrillDownFilterPtrOutput) RangeMinimum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateTimeRangeDrillDownFilter) *string {
		if v == nil {
			return nil
		}
		return &v.RangeMinimum
	}).(pulumi.StringPtrOutput)
}

// The level of time precision that is used to aggregate `DateTime` values.
func (o TemplateTimeRangeDrillDownFilterPtrOutput) TimeGranularity() TemplateTimeGranularityPtrOutput {
	return o.ApplyT(func(v *TemplateTimeRangeDrillDownFilter) *TemplateTimeGranularity {
		if v == nil {
			return nil
		}
		return &v.TimeGranularity
	}).(TemplateTimeGranularityPtrOutput)
}

type TemplateTimeRangeFilter struct {
	// The column that the filter is applied to.
	Column TemplateColumnIdentifier `pulumi:"column"`
	// The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
	DefaultFilterControlConfiguration *TemplateDefaultFilterControlConfiguration `pulumi:"defaultFilterControlConfiguration"`
	// The exclude period of the time range filter.
	ExcludePeriodConfiguration *TemplateExcludePeriodConfiguration `pulumi:"excludePeriodConfiguration"`
	// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
	FilterId string `pulumi:"filterId"`
	// Determines whether the maximum value in the filter value range should be included in the filtered results.
	IncludeMaximum *bool `pulumi:"includeMaximum"`
	// Determines whether the minimum value in the filter value range should be included in the filtered results.
	IncludeMinimum *bool `pulumi:"includeMinimum"`
	// This option determines how null values should be treated when filtering data.
	//
	// - `ALL_VALUES` : Include null values in filtered results.
	// - `NULLS_ONLY` : Only include null values in filtered results.
	// - `NON_NULLS_ONLY` : Exclude null values from filtered results.
	NullOption TemplateFilterNullOption `pulumi:"nullOption"`
	// The maximum value for the filter value range.
	RangeMaximumValue *TemplateTimeRangeFilterValue `pulumi:"rangeMaximumValue"`
	// The minimum value for the filter value range.
	RangeMinimumValue *TemplateTimeRangeFilterValue `pulumi:"rangeMinimumValue"`
	// The level of time precision that is used to aggregate `DateTime` values.
	TimeGranularity *TemplateTimeGranularity `pulumi:"timeGranularity"`
}

// TemplateTimeRangeFilterInput is an input type that accepts TemplateTimeRangeFilterArgs and TemplateTimeRangeFilterOutput values.
// You can construct a concrete instance of `TemplateTimeRangeFilterInput` via:
//
//	TemplateTimeRangeFilterArgs{...}
type TemplateTimeRangeFilterInput interface {
	pulumi.Input

	ToTemplateTimeRangeFilterOutput() TemplateTimeRangeFilterOutput
	ToTemplateTimeRangeFilterOutputWithContext(context.Context) TemplateTimeRangeFilterOutput
}

type TemplateTimeRangeFilterArgs struct {
	// The column that the filter is applied to.
	Column TemplateColumnIdentifierInput `pulumi:"column"`
	// The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
	DefaultFilterControlConfiguration TemplateDefaultFilterControlConfigurationPtrInput `pulumi:"defaultFilterControlConfiguration"`
	// The exclude period of the time range filter.
	ExcludePeriodConfiguration TemplateExcludePeriodConfigurationPtrInput `pulumi:"excludePeriodConfiguration"`
	// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
	FilterId pulumi.StringInput `pulumi:"filterId"`
	// Determines whether the maximum value in the filter value range should be included in the filtered results.
	IncludeMaximum pulumi.BoolPtrInput `pulumi:"includeMaximum"`
	// Determines whether the minimum value in the filter value range should be included in the filtered results.
	IncludeMinimum pulumi.BoolPtrInput `pulumi:"includeMinimum"`
	// This option determines how null values should be treated when filtering data.
	//
	// - `ALL_VALUES` : Include null values in filtered results.
	// - `NULLS_ONLY` : Only include null values in filtered results.
	// - `NON_NULLS_ONLY` : Exclude null values from filtered results.
	NullOption TemplateFilterNullOptionInput `pulumi:"nullOption"`
	// The maximum value for the filter value range.
	RangeMaximumValue TemplateTimeRangeFilterValuePtrInput `pulumi:"rangeMaximumValue"`
	// The minimum value for the filter value range.
	RangeMinimumValue TemplateTimeRangeFilterValuePtrInput `pulumi:"rangeMinimumValue"`
	// The level of time precision that is used to aggregate `DateTime` values.
	TimeGranularity TemplateTimeGranularityPtrInput `pulumi:"timeGranularity"`
}

func (TemplateTimeRangeFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTimeRangeFilter)(nil)).Elem()
}

func (i TemplateTimeRangeFilterArgs) ToTemplateTimeRangeFilterOutput() TemplateTimeRangeFilterOutput {
	return i.ToTemplateTimeRangeFilterOutputWithContext(context.Background())
}

func (i TemplateTimeRangeFilterArgs) ToTemplateTimeRangeFilterOutputWithContext(ctx context.Context) TemplateTimeRangeFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTimeRangeFilterOutput)
}

func (i TemplateTimeRangeFilterArgs) ToTemplateTimeRangeFilterPtrOutput() TemplateTimeRangeFilterPtrOutput {
	return i.ToTemplateTimeRangeFilterPtrOutputWithContext(context.Background())
}

func (i TemplateTimeRangeFilterArgs) ToTemplateTimeRangeFilterPtrOutputWithContext(ctx context.Context) TemplateTimeRangeFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTimeRangeFilterOutput).ToTemplateTimeRangeFilterPtrOutputWithContext(ctx)
}

// TemplateTimeRangeFilterPtrInput is an input type that accepts TemplateTimeRangeFilterArgs, TemplateTimeRangeFilterPtr and TemplateTimeRangeFilterPtrOutput values.
// You can construct a concrete instance of `TemplateTimeRangeFilterPtrInput` via:
//
//	        TemplateTimeRangeFilterArgs{...}
//
//	or:
//
//	        nil
type TemplateTimeRangeFilterPtrInput interface {
	pulumi.Input

	ToTemplateTimeRangeFilterPtrOutput() TemplateTimeRangeFilterPtrOutput
	ToTemplateTimeRangeFilterPtrOutputWithContext(context.Context) TemplateTimeRangeFilterPtrOutput
}

type templateTimeRangeFilterPtrType TemplateTimeRangeFilterArgs

func TemplateTimeRangeFilterPtr(v *TemplateTimeRangeFilterArgs) TemplateTimeRangeFilterPtrInput {
	return (*templateTimeRangeFilterPtrType)(v)
}

func (*templateTimeRangeFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTimeRangeFilter)(nil)).Elem()
}

func (i *templateTimeRangeFilterPtrType) ToTemplateTimeRangeFilterPtrOutput() TemplateTimeRangeFilterPtrOutput {
	return i.ToTemplateTimeRangeFilterPtrOutputWithContext(context.Background())
}

func (i *templateTimeRangeFilterPtrType) ToTemplateTimeRangeFilterPtrOutputWithContext(ctx context.Context) TemplateTimeRangeFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTimeRangeFilterPtrOutput)
}

type TemplateTimeRangeFilterOutput struct{ *pulumi.OutputState }

func (TemplateTimeRangeFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTimeRangeFilter)(nil)).Elem()
}

func (o TemplateTimeRangeFilterOutput) ToTemplateTimeRangeFilterOutput() TemplateTimeRangeFilterOutput {
	return o
}

func (o TemplateTimeRangeFilterOutput) ToTemplateTimeRangeFilterOutputWithContext(ctx context.Context) TemplateTimeRangeFilterOutput {
	return o
}

func (o TemplateTimeRangeFilterOutput) ToTemplateTimeRangeFilterPtrOutput() TemplateTimeRangeFilterPtrOutput {
	return o.ToTemplateTimeRangeFilterPtrOutputWithContext(context.Background())
}

func (o TemplateTimeRangeFilterOutput) ToTemplateTimeRangeFilterPtrOutputWithContext(ctx context.Context) TemplateTimeRangeFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTimeRangeFilter) *TemplateTimeRangeFilter {
		return &v
	}).(TemplateTimeRangeFilterPtrOutput)
}

// The column that the filter is applied to.
func (o TemplateTimeRangeFilterOutput) Column() TemplateColumnIdentifierOutput {
	return o.ApplyT(func(v TemplateTimeRangeFilter) TemplateColumnIdentifier { return v.Column }).(TemplateColumnIdentifierOutput)
}

// The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
func (o TemplateTimeRangeFilterOutput) DefaultFilterControlConfiguration() TemplateDefaultFilterControlConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateTimeRangeFilter) *TemplateDefaultFilterControlConfiguration {
		return v.DefaultFilterControlConfiguration
	}).(TemplateDefaultFilterControlConfigurationPtrOutput)
}

// The exclude period of the time range filter.
func (o TemplateTimeRangeFilterOutput) ExcludePeriodConfiguration() TemplateExcludePeriodConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateTimeRangeFilter) *TemplateExcludePeriodConfiguration {
		return v.ExcludePeriodConfiguration
	}).(TemplateExcludePeriodConfigurationPtrOutput)
}

// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
func (o TemplateTimeRangeFilterOutput) FilterId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateTimeRangeFilter) string { return v.FilterId }).(pulumi.StringOutput)
}

// Determines whether the maximum value in the filter value range should be included in the filtered results.
func (o TemplateTimeRangeFilterOutput) IncludeMaximum() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TemplateTimeRangeFilter) *bool { return v.IncludeMaximum }).(pulumi.BoolPtrOutput)
}

// Determines whether the minimum value in the filter value range should be included in the filtered results.
func (o TemplateTimeRangeFilterOutput) IncludeMinimum() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TemplateTimeRangeFilter) *bool { return v.IncludeMinimum }).(pulumi.BoolPtrOutput)
}

// This option determines how null values should be treated when filtering data.
//
// - `ALL_VALUES` : Include null values in filtered results.
// - `NULLS_ONLY` : Only include null values in filtered results.
// - `NON_NULLS_ONLY` : Exclude null values from filtered results.
func (o TemplateTimeRangeFilterOutput) NullOption() TemplateFilterNullOptionOutput {
	return o.ApplyT(func(v TemplateTimeRangeFilter) TemplateFilterNullOption { return v.NullOption }).(TemplateFilterNullOptionOutput)
}

// The maximum value for the filter value range.
func (o TemplateTimeRangeFilterOutput) RangeMaximumValue() TemplateTimeRangeFilterValuePtrOutput {
	return o.ApplyT(func(v TemplateTimeRangeFilter) *TemplateTimeRangeFilterValue { return v.RangeMaximumValue }).(TemplateTimeRangeFilterValuePtrOutput)
}

// The minimum value for the filter value range.
func (o TemplateTimeRangeFilterOutput) RangeMinimumValue() TemplateTimeRangeFilterValuePtrOutput {
	return o.ApplyT(func(v TemplateTimeRangeFilter) *TemplateTimeRangeFilterValue { return v.RangeMinimumValue }).(TemplateTimeRangeFilterValuePtrOutput)
}

// The level of time precision that is used to aggregate `DateTime` values.
func (o TemplateTimeRangeFilterOutput) TimeGranularity() TemplateTimeGranularityPtrOutput {
	return o.ApplyT(func(v TemplateTimeRangeFilter) *TemplateTimeGranularity { return v.TimeGranularity }).(TemplateTimeGranularityPtrOutput)
}

type TemplateTimeRangeFilterPtrOutput struct{ *pulumi.OutputState }

func (TemplateTimeRangeFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTimeRangeFilter)(nil)).Elem()
}

func (o TemplateTimeRangeFilterPtrOutput) ToTemplateTimeRangeFilterPtrOutput() TemplateTimeRangeFilterPtrOutput {
	return o
}

func (o TemplateTimeRangeFilterPtrOutput) ToTemplateTimeRangeFilterPtrOutputWithContext(ctx context.Context) TemplateTimeRangeFilterPtrOutput {
	return o
}

func (o TemplateTimeRangeFilterPtrOutput) Elem() TemplateTimeRangeFilterOutput {
	return o.ApplyT(func(v *TemplateTimeRangeFilter) TemplateTimeRangeFilter {
		if v != nil {
			return *v
		}
		var ret TemplateTimeRangeFilter
		return ret
	}).(TemplateTimeRangeFilterOutput)
}

// The column that the filter is applied to.
func (o TemplateTimeRangeFilterPtrOutput) Column() TemplateColumnIdentifierPtrOutput {
	return o.ApplyT(func(v *TemplateTimeRangeFilter) *TemplateColumnIdentifier {
		if v == nil {
			return nil
		}
		return &v.Column
	}).(TemplateColumnIdentifierPtrOutput)
}

// The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
func (o TemplateTimeRangeFilterPtrOutput) DefaultFilterControlConfiguration() TemplateDefaultFilterControlConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateTimeRangeFilter) *TemplateDefaultFilterControlConfiguration {
		if v == nil {
			return nil
		}
		return v.DefaultFilterControlConfiguration
	}).(TemplateDefaultFilterControlConfigurationPtrOutput)
}

// The exclude period of the time range filter.
func (o TemplateTimeRangeFilterPtrOutput) ExcludePeriodConfiguration() TemplateExcludePeriodConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateTimeRangeFilter) *TemplateExcludePeriodConfiguration {
		if v == nil {
			return nil
		}
		return v.ExcludePeriodConfiguration
	}).(TemplateExcludePeriodConfigurationPtrOutput)
}

// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
func (o TemplateTimeRangeFilterPtrOutput) FilterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateTimeRangeFilter) *string {
		if v == nil {
			return nil
		}
		return &v.FilterId
	}).(pulumi.StringPtrOutput)
}

// Determines whether the maximum value in the filter value range should be included in the filtered results.
func (o TemplateTimeRangeFilterPtrOutput) IncludeMaximum() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TemplateTimeRangeFilter) *bool {
		if v == nil {
			return nil
		}
		return v.IncludeMaximum
	}).(pulumi.BoolPtrOutput)
}

// Determines whether the minimum value in the filter value range should be included in the filtered results.
func (o TemplateTimeRangeFilterPtrOutput) IncludeMinimum() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TemplateTimeRangeFilter) *bool {
		if v == nil {
			return nil
		}
		return v.IncludeMinimum
	}).(pulumi.BoolPtrOutput)
}

// This option determines how null values should be treated when filtering data.
//
// - `ALL_VALUES` : Include null values in filtered results.
// - `NULLS_ONLY` : Only include null values in filtered results.
// - `NON_NULLS_ONLY` : Exclude null values from filtered results.
func (o TemplateTimeRangeFilterPtrOutput) NullOption() TemplateFilterNullOptionPtrOutput {
	return o.ApplyT(func(v *TemplateTimeRangeFilter) *TemplateFilterNullOption {
		if v == nil {
			return nil
		}
		return &v.NullOption
	}).(TemplateFilterNullOptionPtrOutput)
}

// The maximum value for the filter value range.
func (o TemplateTimeRangeFilterPtrOutput) RangeMaximumValue() TemplateTimeRangeFilterValuePtrOutput {
	return o.ApplyT(func(v *TemplateTimeRangeFilter) *TemplateTimeRangeFilterValue {
		if v == nil {
			return nil
		}
		return v.RangeMaximumValue
	}).(TemplateTimeRangeFilterValuePtrOutput)
}

// The minimum value for the filter value range.
func (o TemplateTimeRangeFilterPtrOutput) RangeMinimumValue() TemplateTimeRangeFilterValuePtrOutput {
	return o.ApplyT(func(v *TemplateTimeRangeFilter) *TemplateTimeRangeFilterValue {
		if v == nil {
			return nil
		}
		return v.RangeMinimumValue
	}).(TemplateTimeRangeFilterValuePtrOutput)
}

// The level of time precision that is used to aggregate `DateTime` values.
func (o TemplateTimeRangeFilterPtrOutput) TimeGranularity() TemplateTimeGranularityPtrOutput {
	return o.ApplyT(func(v *TemplateTimeRangeFilter) *TemplateTimeGranularity {
		if v == nil {
			return nil
		}
		return v.TimeGranularity
	}).(TemplateTimeGranularityPtrOutput)
}

type TemplateTimeRangeFilterValue struct {
	// The parameter type input value.
	Parameter *string `pulumi:"parameter"`
	// The rolling date input value.
	RollingDate *TemplateRollingDateConfiguration `pulumi:"rollingDate"`
	// The static input value.
	StaticValue *string `pulumi:"staticValue"`
}

// TemplateTimeRangeFilterValueInput is an input type that accepts TemplateTimeRangeFilterValueArgs and TemplateTimeRangeFilterValueOutput values.
// You can construct a concrete instance of `TemplateTimeRangeFilterValueInput` via:
//
//	TemplateTimeRangeFilterValueArgs{...}
type TemplateTimeRangeFilterValueInput interface {
	pulumi.Input

	ToTemplateTimeRangeFilterValueOutput() TemplateTimeRangeFilterValueOutput
	ToTemplateTimeRangeFilterValueOutputWithContext(context.Context) TemplateTimeRangeFilterValueOutput
}

type TemplateTimeRangeFilterValueArgs struct {
	// The parameter type input value.
	Parameter pulumi.StringPtrInput `pulumi:"parameter"`
	// The rolling date input value.
	RollingDate TemplateRollingDateConfigurationPtrInput `pulumi:"rollingDate"`
	// The static input value.
	StaticValue pulumi.StringPtrInput `pulumi:"staticValue"`
}

func (TemplateTimeRangeFilterValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTimeRangeFilterValue)(nil)).Elem()
}

func (i TemplateTimeRangeFilterValueArgs) ToTemplateTimeRangeFilterValueOutput() TemplateTimeRangeFilterValueOutput {
	return i.ToTemplateTimeRangeFilterValueOutputWithContext(context.Background())
}

func (i TemplateTimeRangeFilterValueArgs) ToTemplateTimeRangeFilterValueOutputWithContext(ctx context.Context) TemplateTimeRangeFilterValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTimeRangeFilterValueOutput)
}

func (i TemplateTimeRangeFilterValueArgs) ToTemplateTimeRangeFilterValuePtrOutput() TemplateTimeRangeFilterValuePtrOutput {
	return i.ToTemplateTimeRangeFilterValuePtrOutputWithContext(context.Background())
}

func (i TemplateTimeRangeFilterValueArgs) ToTemplateTimeRangeFilterValuePtrOutputWithContext(ctx context.Context) TemplateTimeRangeFilterValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTimeRangeFilterValueOutput).ToTemplateTimeRangeFilterValuePtrOutputWithContext(ctx)
}

// TemplateTimeRangeFilterValuePtrInput is an input type that accepts TemplateTimeRangeFilterValueArgs, TemplateTimeRangeFilterValuePtr and TemplateTimeRangeFilterValuePtrOutput values.
// You can construct a concrete instance of `TemplateTimeRangeFilterValuePtrInput` via:
//
//	        TemplateTimeRangeFilterValueArgs{...}
//
//	or:
//
//	        nil
type TemplateTimeRangeFilterValuePtrInput interface {
	pulumi.Input

	ToTemplateTimeRangeFilterValuePtrOutput() TemplateTimeRangeFilterValuePtrOutput
	ToTemplateTimeRangeFilterValuePtrOutputWithContext(context.Context) TemplateTimeRangeFilterValuePtrOutput
}

type templateTimeRangeFilterValuePtrType TemplateTimeRangeFilterValueArgs

func TemplateTimeRangeFilterValuePtr(v *TemplateTimeRangeFilterValueArgs) TemplateTimeRangeFilterValuePtrInput {
	return (*templateTimeRangeFilterValuePtrType)(v)
}

func (*templateTimeRangeFilterValuePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTimeRangeFilterValue)(nil)).Elem()
}

func (i *templateTimeRangeFilterValuePtrType) ToTemplateTimeRangeFilterValuePtrOutput() TemplateTimeRangeFilterValuePtrOutput {
	return i.ToTemplateTimeRangeFilterValuePtrOutputWithContext(context.Background())
}

func (i *templateTimeRangeFilterValuePtrType) ToTemplateTimeRangeFilterValuePtrOutputWithContext(ctx context.Context) TemplateTimeRangeFilterValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTimeRangeFilterValuePtrOutput)
}

type TemplateTimeRangeFilterValueOutput struct{ *pulumi.OutputState }

func (TemplateTimeRangeFilterValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTimeRangeFilterValue)(nil)).Elem()
}

func (o TemplateTimeRangeFilterValueOutput) ToTemplateTimeRangeFilterValueOutput() TemplateTimeRangeFilterValueOutput {
	return o
}

func (o TemplateTimeRangeFilterValueOutput) ToTemplateTimeRangeFilterValueOutputWithContext(ctx context.Context) TemplateTimeRangeFilterValueOutput {
	return o
}

func (o TemplateTimeRangeFilterValueOutput) ToTemplateTimeRangeFilterValuePtrOutput() TemplateTimeRangeFilterValuePtrOutput {
	return o.ToTemplateTimeRangeFilterValuePtrOutputWithContext(context.Background())
}

func (o TemplateTimeRangeFilterValueOutput) ToTemplateTimeRangeFilterValuePtrOutputWithContext(ctx context.Context) TemplateTimeRangeFilterValuePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTimeRangeFilterValue) *TemplateTimeRangeFilterValue {
		return &v
	}).(TemplateTimeRangeFilterValuePtrOutput)
}

// The parameter type input value.
func (o TemplateTimeRangeFilterValueOutput) Parameter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateTimeRangeFilterValue) *string { return v.Parameter }).(pulumi.StringPtrOutput)
}

// The rolling date input value.
func (o TemplateTimeRangeFilterValueOutput) RollingDate() TemplateRollingDateConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateTimeRangeFilterValue) *TemplateRollingDateConfiguration { return v.RollingDate }).(TemplateRollingDateConfigurationPtrOutput)
}

// The static input value.
func (o TemplateTimeRangeFilterValueOutput) StaticValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateTimeRangeFilterValue) *string { return v.StaticValue }).(pulumi.StringPtrOutput)
}

type TemplateTimeRangeFilterValuePtrOutput struct{ *pulumi.OutputState }

func (TemplateTimeRangeFilterValuePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTimeRangeFilterValue)(nil)).Elem()
}

func (o TemplateTimeRangeFilterValuePtrOutput) ToTemplateTimeRangeFilterValuePtrOutput() TemplateTimeRangeFilterValuePtrOutput {
	return o
}

func (o TemplateTimeRangeFilterValuePtrOutput) ToTemplateTimeRangeFilterValuePtrOutputWithContext(ctx context.Context) TemplateTimeRangeFilterValuePtrOutput {
	return o
}

func (o TemplateTimeRangeFilterValuePtrOutput) Elem() TemplateTimeRangeFilterValueOutput {
	return o.ApplyT(func(v *TemplateTimeRangeFilterValue) TemplateTimeRangeFilterValue {
		if v != nil {
			return *v
		}
		var ret TemplateTimeRangeFilterValue
		return ret
	}).(TemplateTimeRangeFilterValueOutput)
}

// The parameter type input value.
func (o TemplateTimeRangeFilterValuePtrOutput) Parameter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateTimeRangeFilterValue) *string {
		if v == nil {
			return nil
		}
		return v.Parameter
	}).(pulumi.StringPtrOutput)
}

// The rolling date input value.
func (o TemplateTimeRangeFilterValuePtrOutput) RollingDate() TemplateRollingDateConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateTimeRangeFilterValue) *TemplateRollingDateConfiguration {
		if v == nil {
			return nil
		}
		return v.RollingDate
	}).(TemplateRollingDateConfigurationPtrOutput)
}

// The static input value.
func (o TemplateTimeRangeFilterValuePtrOutput) StaticValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateTimeRangeFilterValue) *string {
		if v == nil {
			return nil
		}
		return v.StaticValue
	}).(pulumi.StringPtrOutput)
}

type TemplateTooltipItem struct {
	// The tooltip item for the columns that are not part of a field well.
	ColumnTooltipItem *TemplateColumnTooltipItem `pulumi:"columnTooltipItem"`
	// The tooltip item for the fields.
	FieldTooltipItem *TemplateFieldTooltipItem `pulumi:"fieldTooltipItem"`
}

// TemplateTooltipItemInput is an input type that accepts TemplateTooltipItemArgs and TemplateTooltipItemOutput values.
// You can construct a concrete instance of `TemplateTooltipItemInput` via:
//
//	TemplateTooltipItemArgs{...}
type TemplateTooltipItemInput interface {
	pulumi.Input

	ToTemplateTooltipItemOutput() TemplateTooltipItemOutput
	ToTemplateTooltipItemOutputWithContext(context.Context) TemplateTooltipItemOutput
}

type TemplateTooltipItemArgs struct {
	// The tooltip item for the columns that are not part of a field well.
	ColumnTooltipItem TemplateColumnTooltipItemPtrInput `pulumi:"columnTooltipItem"`
	// The tooltip item for the fields.
	FieldTooltipItem TemplateFieldTooltipItemPtrInput `pulumi:"fieldTooltipItem"`
}

func (TemplateTooltipItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTooltipItem)(nil)).Elem()
}

func (i TemplateTooltipItemArgs) ToTemplateTooltipItemOutput() TemplateTooltipItemOutput {
	return i.ToTemplateTooltipItemOutputWithContext(context.Background())
}

func (i TemplateTooltipItemArgs) ToTemplateTooltipItemOutputWithContext(ctx context.Context) TemplateTooltipItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTooltipItemOutput)
}

// TemplateTooltipItemArrayInput is an input type that accepts TemplateTooltipItemArray and TemplateTooltipItemArrayOutput values.
// You can construct a concrete instance of `TemplateTooltipItemArrayInput` via:
//
//	TemplateTooltipItemArray{ TemplateTooltipItemArgs{...} }
type TemplateTooltipItemArrayInput interface {
	pulumi.Input

	ToTemplateTooltipItemArrayOutput() TemplateTooltipItemArrayOutput
	ToTemplateTooltipItemArrayOutputWithContext(context.Context) TemplateTooltipItemArrayOutput
}

type TemplateTooltipItemArray []TemplateTooltipItemInput

func (TemplateTooltipItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateTooltipItem)(nil)).Elem()
}

func (i TemplateTooltipItemArray) ToTemplateTooltipItemArrayOutput() TemplateTooltipItemArrayOutput {
	return i.ToTemplateTooltipItemArrayOutputWithContext(context.Background())
}

func (i TemplateTooltipItemArray) ToTemplateTooltipItemArrayOutputWithContext(ctx context.Context) TemplateTooltipItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTooltipItemArrayOutput)
}

type TemplateTooltipItemOutput struct{ *pulumi.OutputState }

func (TemplateTooltipItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTooltipItem)(nil)).Elem()
}

func (o TemplateTooltipItemOutput) ToTemplateTooltipItemOutput() TemplateTooltipItemOutput {
	return o
}

func (o TemplateTooltipItemOutput) ToTemplateTooltipItemOutputWithContext(ctx context.Context) TemplateTooltipItemOutput {
	return o
}

// The tooltip item for the columns that are not part of a field well.
func (o TemplateTooltipItemOutput) ColumnTooltipItem() TemplateColumnTooltipItemPtrOutput {
	return o.ApplyT(func(v TemplateTooltipItem) *TemplateColumnTooltipItem { return v.ColumnTooltipItem }).(TemplateColumnTooltipItemPtrOutput)
}

// The tooltip item for the fields.
func (o TemplateTooltipItemOutput) FieldTooltipItem() TemplateFieldTooltipItemPtrOutput {
	return o.ApplyT(func(v TemplateTooltipItem) *TemplateFieldTooltipItem { return v.FieldTooltipItem }).(TemplateFieldTooltipItemPtrOutput)
}

type TemplateTooltipItemArrayOutput struct{ *pulumi.OutputState }

func (TemplateTooltipItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateTooltipItem)(nil)).Elem()
}

func (o TemplateTooltipItemArrayOutput) ToTemplateTooltipItemArrayOutput() TemplateTooltipItemArrayOutput {
	return o
}

func (o TemplateTooltipItemArrayOutput) ToTemplateTooltipItemArrayOutputWithContext(ctx context.Context) TemplateTooltipItemArrayOutput {
	return o
}

func (o TemplateTooltipItemArrayOutput) Index(i pulumi.IntInput) TemplateTooltipItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateTooltipItem {
		return vs[0].([]TemplateTooltipItem)[vs[1].(int)]
	}).(TemplateTooltipItemOutput)
}

type TemplateTooltipOptions struct {
	// The setup for the detailed tooltip. The tooltip setup is always saved. The display type is decided based on the tooltip type.
	FieldBasedTooltip *TemplateFieldBasedTooltip `pulumi:"fieldBasedTooltip"`
	// The selected type for the tooltip. Choose one of the following options:
	//
	// - `BASIC` : A basic tooltip.
	// - `DETAILED` : A detailed tooltip.
	SelectedTooltipType *TemplateSelectedTooltipType `pulumi:"selectedTooltipType"`
	// Determines whether or not the tooltip is visible.
	TooltipVisibility interface{} `pulumi:"tooltipVisibility"`
}

// TemplateTooltipOptionsInput is an input type that accepts TemplateTooltipOptionsArgs and TemplateTooltipOptionsOutput values.
// You can construct a concrete instance of `TemplateTooltipOptionsInput` via:
//
//	TemplateTooltipOptionsArgs{...}
type TemplateTooltipOptionsInput interface {
	pulumi.Input

	ToTemplateTooltipOptionsOutput() TemplateTooltipOptionsOutput
	ToTemplateTooltipOptionsOutputWithContext(context.Context) TemplateTooltipOptionsOutput
}

type TemplateTooltipOptionsArgs struct {
	// The setup for the detailed tooltip. The tooltip setup is always saved. The display type is decided based on the tooltip type.
	FieldBasedTooltip TemplateFieldBasedTooltipPtrInput `pulumi:"fieldBasedTooltip"`
	// The selected type for the tooltip. Choose one of the following options:
	//
	// - `BASIC` : A basic tooltip.
	// - `DETAILED` : A detailed tooltip.
	SelectedTooltipType TemplateSelectedTooltipTypePtrInput `pulumi:"selectedTooltipType"`
	// Determines whether or not the tooltip is visible.
	TooltipVisibility pulumi.Input `pulumi:"tooltipVisibility"`
}

func (TemplateTooltipOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTooltipOptions)(nil)).Elem()
}

func (i TemplateTooltipOptionsArgs) ToTemplateTooltipOptionsOutput() TemplateTooltipOptionsOutput {
	return i.ToTemplateTooltipOptionsOutputWithContext(context.Background())
}

func (i TemplateTooltipOptionsArgs) ToTemplateTooltipOptionsOutputWithContext(ctx context.Context) TemplateTooltipOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTooltipOptionsOutput)
}

func (i TemplateTooltipOptionsArgs) ToTemplateTooltipOptionsPtrOutput() TemplateTooltipOptionsPtrOutput {
	return i.ToTemplateTooltipOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateTooltipOptionsArgs) ToTemplateTooltipOptionsPtrOutputWithContext(ctx context.Context) TemplateTooltipOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTooltipOptionsOutput).ToTemplateTooltipOptionsPtrOutputWithContext(ctx)
}

// TemplateTooltipOptionsPtrInput is an input type that accepts TemplateTooltipOptionsArgs, TemplateTooltipOptionsPtr and TemplateTooltipOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateTooltipOptionsPtrInput` via:
//
//	        TemplateTooltipOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateTooltipOptionsPtrInput interface {
	pulumi.Input

	ToTemplateTooltipOptionsPtrOutput() TemplateTooltipOptionsPtrOutput
	ToTemplateTooltipOptionsPtrOutputWithContext(context.Context) TemplateTooltipOptionsPtrOutput
}

type templateTooltipOptionsPtrType TemplateTooltipOptionsArgs

func TemplateTooltipOptionsPtr(v *TemplateTooltipOptionsArgs) TemplateTooltipOptionsPtrInput {
	return (*templateTooltipOptionsPtrType)(v)
}

func (*templateTooltipOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTooltipOptions)(nil)).Elem()
}

func (i *templateTooltipOptionsPtrType) ToTemplateTooltipOptionsPtrOutput() TemplateTooltipOptionsPtrOutput {
	return i.ToTemplateTooltipOptionsPtrOutputWithContext(context.Background())
}

func (i *templateTooltipOptionsPtrType) ToTemplateTooltipOptionsPtrOutputWithContext(ctx context.Context) TemplateTooltipOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTooltipOptionsPtrOutput)
}

type TemplateTooltipOptionsOutput struct{ *pulumi.OutputState }

func (TemplateTooltipOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTooltipOptions)(nil)).Elem()
}

func (o TemplateTooltipOptionsOutput) ToTemplateTooltipOptionsOutput() TemplateTooltipOptionsOutput {
	return o
}

func (o TemplateTooltipOptionsOutput) ToTemplateTooltipOptionsOutputWithContext(ctx context.Context) TemplateTooltipOptionsOutput {
	return o
}

func (o TemplateTooltipOptionsOutput) ToTemplateTooltipOptionsPtrOutput() TemplateTooltipOptionsPtrOutput {
	return o.ToTemplateTooltipOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateTooltipOptionsOutput) ToTemplateTooltipOptionsPtrOutputWithContext(ctx context.Context) TemplateTooltipOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTooltipOptions) *TemplateTooltipOptions {
		return &v
	}).(TemplateTooltipOptionsPtrOutput)
}

// The setup for the detailed tooltip. The tooltip setup is always saved. The display type is decided based on the tooltip type.
func (o TemplateTooltipOptionsOutput) FieldBasedTooltip() TemplateFieldBasedTooltipPtrOutput {
	return o.ApplyT(func(v TemplateTooltipOptions) *TemplateFieldBasedTooltip { return v.FieldBasedTooltip }).(TemplateFieldBasedTooltipPtrOutput)
}

// The selected type for the tooltip. Choose one of the following options:
//
// - `BASIC` : A basic tooltip.
// - `DETAILED` : A detailed tooltip.
func (o TemplateTooltipOptionsOutput) SelectedTooltipType() TemplateSelectedTooltipTypePtrOutput {
	return o.ApplyT(func(v TemplateTooltipOptions) *TemplateSelectedTooltipType { return v.SelectedTooltipType }).(TemplateSelectedTooltipTypePtrOutput)
}

// Determines whether or not the tooltip is visible.
func (o TemplateTooltipOptionsOutput) TooltipVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateTooltipOptions) interface{} { return v.TooltipVisibility }).(pulumi.AnyOutput)
}

type TemplateTooltipOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateTooltipOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTooltipOptions)(nil)).Elem()
}

func (o TemplateTooltipOptionsPtrOutput) ToTemplateTooltipOptionsPtrOutput() TemplateTooltipOptionsPtrOutput {
	return o
}

func (o TemplateTooltipOptionsPtrOutput) ToTemplateTooltipOptionsPtrOutputWithContext(ctx context.Context) TemplateTooltipOptionsPtrOutput {
	return o
}

func (o TemplateTooltipOptionsPtrOutput) Elem() TemplateTooltipOptionsOutput {
	return o.ApplyT(func(v *TemplateTooltipOptions) TemplateTooltipOptions {
		if v != nil {
			return *v
		}
		var ret TemplateTooltipOptions
		return ret
	}).(TemplateTooltipOptionsOutput)
}

// The setup for the detailed tooltip. The tooltip setup is always saved. The display type is decided based on the tooltip type.
func (o TemplateTooltipOptionsPtrOutput) FieldBasedTooltip() TemplateFieldBasedTooltipPtrOutput {
	return o.ApplyT(func(v *TemplateTooltipOptions) *TemplateFieldBasedTooltip {
		if v == nil {
			return nil
		}
		return v.FieldBasedTooltip
	}).(TemplateFieldBasedTooltipPtrOutput)
}

// The selected type for the tooltip. Choose one of the following options:
//
// - `BASIC` : A basic tooltip.
// - `DETAILED` : A detailed tooltip.
func (o TemplateTooltipOptionsPtrOutput) SelectedTooltipType() TemplateSelectedTooltipTypePtrOutput {
	return o.ApplyT(func(v *TemplateTooltipOptions) *TemplateSelectedTooltipType {
		if v == nil {
			return nil
		}
		return v.SelectedTooltipType
	}).(TemplateSelectedTooltipTypePtrOutput)
}

// Determines whether or not the tooltip is visible.
func (o TemplateTooltipOptionsPtrOutput) TooltipVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateTooltipOptions) interface{} {
		if v == nil {
			return nil
		}
		return v.TooltipVisibility
	}).(pulumi.AnyOutput)
}

type TemplateTopBottomFilter struct {
	// The aggregation and sort configuration of the top bottom filter.
	AggregationSortConfigurations []TemplateAggregationSortConfiguration `pulumi:"aggregationSortConfigurations"`
	// The column that the filter is applied to.
	Column TemplateColumnIdentifier `pulumi:"column"`
	// The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
	DefaultFilterControlConfiguration *TemplateDefaultFilterControlConfiguration `pulumi:"defaultFilterControlConfiguration"`
	// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
	FilterId string `pulumi:"filterId"`
	// The number of items to include in the top bottom filter results.
	Limit *float64 `pulumi:"limit"`
	// The parameter whose value should be used for the filter value.
	ParameterName *string `pulumi:"parameterName"`
	// The level of time precision that is used to aggregate `DateTime` values.
	TimeGranularity *TemplateTimeGranularity `pulumi:"timeGranularity"`
}

// TemplateTopBottomFilterInput is an input type that accepts TemplateTopBottomFilterArgs and TemplateTopBottomFilterOutput values.
// You can construct a concrete instance of `TemplateTopBottomFilterInput` via:
//
//	TemplateTopBottomFilterArgs{...}
type TemplateTopBottomFilterInput interface {
	pulumi.Input

	ToTemplateTopBottomFilterOutput() TemplateTopBottomFilterOutput
	ToTemplateTopBottomFilterOutputWithContext(context.Context) TemplateTopBottomFilterOutput
}

type TemplateTopBottomFilterArgs struct {
	// The aggregation and sort configuration of the top bottom filter.
	AggregationSortConfigurations TemplateAggregationSortConfigurationArrayInput `pulumi:"aggregationSortConfigurations"`
	// The column that the filter is applied to.
	Column TemplateColumnIdentifierInput `pulumi:"column"`
	// The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
	DefaultFilterControlConfiguration TemplateDefaultFilterControlConfigurationPtrInput `pulumi:"defaultFilterControlConfiguration"`
	// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
	FilterId pulumi.StringInput `pulumi:"filterId"`
	// The number of items to include in the top bottom filter results.
	Limit pulumi.Float64PtrInput `pulumi:"limit"`
	// The parameter whose value should be used for the filter value.
	ParameterName pulumi.StringPtrInput `pulumi:"parameterName"`
	// The level of time precision that is used to aggregate `DateTime` values.
	TimeGranularity TemplateTimeGranularityPtrInput `pulumi:"timeGranularity"`
}

func (TemplateTopBottomFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTopBottomFilter)(nil)).Elem()
}

func (i TemplateTopBottomFilterArgs) ToTemplateTopBottomFilterOutput() TemplateTopBottomFilterOutput {
	return i.ToTemplateTopBottomFilterOutputWithContext(context.Background())
}

func (i TemplateTopBottomFilterArgs) ToTemplateTopBottomFilterOutputWithContext(ctx context.Context) TemplateTopBottomFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTopBottomFilterOutput)
}

func (i TemplateTopBottomFilterArgs) ToTemplateTopBottomFilterPtrOutput() TemplateTopBottomFilterPtrOutput {
	return i.ToTemplateTopBottomFilterPtrOutputWithContext(context.Background())
}

func (i TemplateTopBottomFilterArgs) ToTemplateTopBottomFilterPtrOutputWithContext(ctx context.Context) TemplateTopBottomFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTopBottomFilterOutput).ToTemplateTopBottomFilterPtrOutputWithContext(ctx)
}

// TemplateTopBottomFilterPtrInput is an input type that accepts TemplateTopBottomFilterArgs, TemplateTopBottomFilterPtr and TemplateTopBottomFilterPtrOutput values.
// You can construct a concrete instance of `TemplateTopBottomFilterPtrInput` via:
//
//	        TemplateTopBottomFilterArgs{...}
//
//	or:
//
//	        nil
type TemplateTopBottomFilterPtrInput interface {
	pulumi.Input

	ToTemplateTopBottomFilterPtrOutput() TemplateTopBottomFilterPtrOutput
	ToTemplateTopBottomFilterPtrOutputWithContext(context.Context) TemplateTopBottomFilterPtrOutput
}

type templateTopBottomFilterPtrType TemplateTopBottomFilterArgs

func TemplateTopBottomFilterPtr(v *TemplateTopBottomFilterArgs) TemplateTopBottomFilterPtrInput {
	return (*templateTopBottomFilterPtrType)(v)
}

func (*templateTopBottomFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTopBottomFilter)(nil)).Elem()
}

func (i *templateTopBottomFilterPtrType) ToTemplateTopBottomFilterPtrOutput() TemplateTopBottomFilterPtrOutput {
	return i.ToTemplateTopBottomFilterPtrOutputWithContext(context.Background())
}

func (i *templateTopBottomFilterPtrType) ToTemplateTopBottomFilterPtrOutputWithContext(ctx context.Context) TemplateTopBottomFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTopBottomFilterPtrOutput)
}

type TemplateTopBottomFilterOutput struct{ *pulumi.OutputState }

func (TemplateTopBottomFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTopBottomFilter)(nil)).Elem()
}

func (o TemplateTopBottomFilterOutput) ToTemplateTopBottomFilterOutput() TemplateTopBottomFilterOutput {
	return o
}

func (o TemplateTopBottomFilterOutput) ToTemplateTopBottomFilterOutputWithContext(ctx context.Context) TemplateTopBottomFilterOutput {
	return o
}

func (o TemplateTopBottomFilterOutput) ToTemplateTopBottomFilterPtrOutput() TemplateTopBottomFilterPtrOutput {
	return o.ToTemplateTopBottomFilterPtrOutputWithContext(context.Background())
}

func (o TemplateTopBottomFilterOutput) ToTemplateTopBottomFilterPtrOutputWithContext(ctx context.Context) TemplateTopBottomFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTopBottomFilter) *TemplateTopBottomFilter {
		return &v
	}).(TemplateTopBottomFilterPtrOutput)
}

// The aggregation and sort configuration of the top bottom filter.
func (o TemplateTopBottomFilterOutput) AggregationSortConfigurations() TemplateAggregationSortConfigurationArrayOutput {
	return o.ApplyT(func(v TemplateTopBottomFilter) []TemplateAggregationSortConfiguration {
		return v.AggregationSortConfigurations
	}).(TemplateAggregationSortConfigurationArrayOutput)
}

// The column that the filter is applied to.
func (o TemplateTopBottomFilterOutput) Column() TemplateColumnIdentifierOutput {
	return o.ApplyT(func(v TemplateTopBottomFilter) TemplateColumnIdentifier { return v.Column }).(TemplateColumnIdentifierOutput)
}

// The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
func (o TemplateTopBottomFilterOutput) DefaultFilterControlConfiguration() TemplateDefaultFilterControlConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateTopBottomFilter) *TemplateDefaultFilterControlConfiguration {
		return v.DefaultFilterControlConfiguration
	}).(TemplateDefaultFilterControlConfigurationPtrOutput)
}

// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
func (o TemplateTopBottomFilterOutput) FilterId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateTopBottomFilter) string { return v.FilterId }).(pulumi.StringOutput)
}

// The number of items to include in the top bottom filter results.
func (o TemplateTopBottomFilterOutput) Limit() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateTopBottomFilter) *float64 { return v.Limit }).(pulumi.Float64PtrOutput)
}

// The parameter whose value should be used for the filter value.
func (o TemplateTopBottomFilterOutput) ParameterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateTopBottomFilter) *string { return v.ParameterName }).(pulumi.StringPtrOutput)
}

// The level of time precision that is used to aggregate `DateTime` values.
func (o TemplateTopBottomFilterOutput) TimeGranularity() TemplateTimeGranularityPtrOutput {
	return o.ApplyT(func(v TemplateTopBottomFilter) *TemplateTimeGranularity { return v.TimeGranularity }).(TemplateTimeGranularityPtrOutput)
}

type TemplateTopBottomFilterPtrOutput struct{ *pulumi.OutputState }

func (TemplateTopBottomFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTopBottomFilter)(nil)).Elem()
}

func (o TemplateTopBottomFilterPtrOutput) ToTemplateTopBottomFilterPtrOutput() TemplateTopBottomFilterPtrOutput {
	return o
}

func (o TemplateTopBottomFilterPtrOutput) ToTemplateTopBottomFilterPtrOutputWithContext(ctx context.Context) TemplateTopBottomFilterPtrOutput {
	return o
}

func (o TemplateTopBottomFilterPtrOutput) Elem() TemplateTopBottomFilterOutput {
	return o.ApplyT(func(v *TemplateTopBottomFilter) TemplateTopBottomFilter {
		if v != nil {
			return *v
		}
		var ret TemplateTopBottomFilter
		return ret
	}).(TemplateTopBottomFilterOutput)
}

// The aggregation and sort configuration of the top bottom filter.
func (o TemplateTopBottomFilterPtrOutput) AggregationSortConfigurations() TemplateAggregationSortConfigurationArrayOutput {
	return o.ApplyT(func(v *TemplateTopBottomFilter) []TemplateAggregationSortConfiguration {
		if v == nil {
			return nil
		}
		return v.AggregationSortConfigurations
	}).(TemplateAggregationSortConfigurationArrayOutput)
}

// The column that the filter is applied to.
func (o TemplateTopBottomFilterPtrOutput) Column() TemplateColumnIdentifierPtrOutput {
	return o.ApplyT(func(v *TemplateTopBottomFilter) *TemplateColumnIdentifier {
		if v == nil {
			return nil
		}
		return &v.Column
	}).(TemplateColumnIdentifierPtrOutput)
}

// The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
func (o TemplateTopBottomFilterPtrOutput) DefaultFilterControlConfiguration() TemplateDefaultFilterControlConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateTopBottomFilter) *TemplateDefaultFilterControlConfiguration {
		if v == nil {
			return nil
		}
		return v.DefaultFilterControlConfiguration
	}).(TemplateDefaultFilterControlConfigurationPtrOutput)
}

// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
func (o TemplateTopBottomFilterPtrOutput) FilterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateTopBottomFilter) *string {
		if v == nil {
			return nil
		}
		return &v.FilterId
	}).(pulumi.StringPtrOutput)
}

// The number of items to include in the top bottom filter results.
func (o TemplateTopBottomFilterPtrOutput) Limit() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateTopBottomFilter) *float64 {
		if v == nil {
			return nil
		}
		return v.Limit
	}).(pulumi.Float64PtrOutput)
}

// The parameter whose value should be used for the filter value.
func (o TemplateTopBottomFilterPtrOutput) ParameterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateTopBottomFilter) *string {
		if v == nil {
			return nil
		}
		return v.ParameterName
	}).(pulumi.StringPtrOutput)
}

// The level of time precision that is used to aggregate `DateTime` values.
func (o TemplateTopBottomFilterPtrOutput) TimeGranularity() TemplateTimeGranularityPtrOutput {
	return o.ApplyT(func(v *TemplateTopBottomFilter) *TemplateTimeGranularity {
		if v == nil {
			return nil
		}
		return v.TimeGranularity
	}).(TemplateTimeGranularityPtrOutput)
}

type TemplateTopBottomMoversComputation struct {
	// The category field that is used in a computation.
	Category *TemplateDimensionField `pulumi:"category"`
	// The ID for a computation.
	ComputationId string `pulumi:"computationId"`
	// The mover size setup of the top and bottom movers computation.
	MoverSize *float64 `pulumi:"moverSize"`
	// The name of a computation.
	Name *string `pulumi:"name"`
	// The sort order setup of the top and bottom movers computation.
	SortOrder *TemplateTopBottomSortOrder `pulumi:"sortOrder"`
	// The time field that is used in a computation.
	Time *TemplateDimensionField `pulumi:"time"`
	// The computation type. Choose from the following options:
	//
	// - TOP: Top movers computation.
	// - BOTTOM: Bottom movers computation.
	Type TemplateTopBottomComputationType `pulumi:"type"`
	// The value field that is used in a computation.
	Value *TemplateMeasureField `pulumi:"value"`
}

// TemplateTopBottomMoversComputationInput is an input type that accepts TemplateTopBottomMoversComputationArgs and TemplateTopBottomMoversComputationOutput values.
// You can construct a concrete instance of `TemplateTopBottomMoversComputationInput` via:
//
//	TemplateTopBottomMoversComputationArgs{...}
type TemplateTopBottomMoversComputationInput interface {
	pulumi.Input

	ToTemplateTopBottomMoversComputationOutput() TemplateTopBottomMoversComputationOutput
	ToTemplateTopBottomMoversComputationOutputWithContext(context.Context) TemplateTopBottomMoversComputationOutput
}

type TemplateTopBottomMoversComputationArgs struct {
	// The category field that is used in a computation.
	Category TemplateDimensionFieldPtrInput `pulumi:"category"`
	// The ID for a computation.
	ComputationId pulumi.StringInput `pulumi:"computationId"`
	// The mover size setup of the top and bottom movers computation.
	MoverSize pulumi.Float64PtrInput `pulumi:"moverSize"`
	// The name of a computation.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The sort order setup of the top and bottom movers computation.
	SortOrder TemplateTopBottomSortOrderPtrInput `pulumi:"sortOrder"`
	// The time field that is used in a computation.
	Time TemplateDimensionFieldPtrInput `pulumi:"time"`
	// The computation type. Choose from the following options:
	//
	// - TOP: Top movers computation.
	// - BOTTOM: Bottom movers computation.
	Type TemplateTopBottomComputationTypeInput `pulumi:"type"`
	// The value field that is used in a computation.
	Value TemplateMeasureFieldPtrInput `pulumi:"value"`
}

func (TemplateTopBottomMoversComputationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTopBottomMoversComputation)(nil)).Elem()
}

func (i TemplateTopBottomMoversComputationArgs) ToTemplateTopBottomMoversComputationOutput() TemplateTopBottomMoversComputationOutput {
	return i.ToTemplateTopBottomMoversComputationOutputWithContext(context.Background())
}

func (i TemplateTopBottomMoversComputationArgs) ToTemplateTopBottomMoversComputationOutputWithContext(ctx context.Context) TemplateTopBottomMoversComputationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTopBottomMoversComputationOutput)
}

func (i TemplateTopBottomMoversComputationArgs) ToTemplateTopBottomMoversComputationPtrOutput() TemplateTopBottomMoversComputationPtrOutput {
	return i.ToTemplateTopBottomMoversComputationPtrOutputWithContext(context.Background())
}

func (i TemplateTopBottomMoversComputationArgs) ToTemplateTopBottomMoversComputationPtrOutputWithContext(ctx context.Context) TemplateTopBottomMoversComputationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTopBottomMoversComputationOutput).ToTemplateTopBottomMoversComputationPtrOutputWithContext(ctx)
}

// TemplateTopBottomMoversComputationPtrInput is an input type that accepts TemplateTopBottomMoversComputationArgs, TemplateTopBottomMoversComputationPtr and TemplateTopBottomMoversComputationPtrOutput values.
// You can construct a concrete instance of `TemplateTopBottomMoversComputationPtrInput` via:
//
//	        TemplateTopBottomMoversComputationArgs{...}
//
//	or:
//
//	        nil
type TemplateTopBottomMoversComputationPtrInput interface {
	pulumi.Input

	ToTemplateTopBottomMoversComputationPtrOutput() TemplateTopBottomMoversComputationPtrOutput
	ToTemplateTopBottomMoversComputationPtrOutputWithContext(context.Context) TemplateTopBottomMoversComputationPtrOutput
}

type templateTopBottomMoversComputationPtrType TemplateTopBottomMoversComputationArgs

func TemplateTopBottomMoversComputationPtr(v *TemplateTopBottomMoversComputationArgs) TemplateTopBottomMoversComputationPtrInput {
	return (*templateTopBottomMoversComputationPtrType)(v)
}

func (*templateTopBottomMoversComputationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTopBottomMoversComputation)(nil)).Elem()
}

func (i *templateTopBottomMoversComputationPtrType) ToTemplateTopBottomMoversComputationPtrOutput() TemplateTopBottomMoversComputationPtrOutput {
	return i.ToTemplateTopBottomMoversComputationPtrOutputWithContext(context.Background())
}

func (i *templateTopBottomMoversComputationPtrType) ToTemplateTopBottomMoversComputationPtrOutputWithContext(ctx context.Context) TemplateTopBottomMoversComputationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTopBottomMoversComputationPtrOutput)
}

type TemplateTopBottomMoversComputationOutput struct{ *pulumi.OutputState }

func (TemplateTopBottomMoversComputationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTopBottomMoversComputation)(nil)).Elem()
}

func (o TemplateTopBottomMoversComputationOutput) ToTemplateTopBottomMoversComputationOutput() TemplateTopBottomMoversComputationOutput {
	return o
}

func (o TemplateTopBottomMoversComputationOutput) ToTemplateTopBottomMoversComputationOutputWithContext(ctx context.Context) TemplateTopBottomMoversComputationOutput {
	return o
}

func (o TemplateTopBottomMoversComputationOutput) ToTemplateTopBottomMoversComputationPtrOutput() TemplateTopBottomMoversComputationPtrOutput {
	return o.ToTemplateTopBottomMoversComputationPtrOutputWithContext(context.Background())
}

func (o TemplateTopBottomMoversComputationOutput) ToTemplateTopBottomMoversComputationPtrOutputWithContext(ctx context.Context) TemplateTopBottomMoversComputationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTopBottomMoversComputation) *TemplateTopBottomMoversComputation {
		return &v
	}).(TemplateTopBottomMoversComputationPtrOutput)
}

// The category field that is used in a computation.
func (o TemplateTopBottomMoversComputationOutput) Category() TemplateDimensionFieldPtrOutput {
	return o.ApplyT(func(v TemplateTopBottomMoversComputation) *TemplateDimensionField { return v.Category }).(TemplateDimensionFieldPtrOutput)
}

// The ID for a computation.
func (o TemplateTopBottomMoversComputationOutput) ComputationId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateTopBottomMoversComputation) string { return v.ComputationId }).(pulumi.StringOutput)
}

// The mover size setup of the top and bottom movers computation.
func (o TemplateTopBottomMoversComputationOutput) MoverSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateTopBottomMoversComputation) *float64 { return v.MoverSize }).(pulumi.Float64PtrOutput)
}

// The name of a computation.
func (o TemplateTopBottomMoversComputationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateTopBottomMoversComputation) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The sort order setup of the top and bottom movers computation.
func (o TemplateTopBottomMoversComputationOutput) SortOrder() TemplateTopBottomSortOrderPtrOutput {
	return o.ApplyT(func(v TemplateTopBottomMoversComputation) *TemplateTopBottomSortOrder { return v.SortOrder }).(TemplateTopBottomSortOrderPtrOutput)
}

// The time field that is used in a computation.
func (o TemplateTopBottomMoversComputationOutput) Time() TemplateDimensionFieldPtrOutput {
	return o.ApplyT(func(v TemplateTopBottomMoversComputation) *TemplateDimensionField { return v.Time }).(TemplateDimensionFieldPtrOutput)
}

// The computation type. Choose from the following options:
//
// - TOP: Top movers computation.
// - BOTTOM: Bottom movers computation.
func (o TemplateTopBottomMoversComputationOutput) Type() TemplateTopBottomComputationTypeOutput {
	return o.ApplyT(func(v TemplateTopBottomMoversComputation) TemplateTopBottomComputationType { return v.Type }).(TemplateTopBottomComputationTypeOutput)
}

// The value field that is used in a computation.
func (o TemplateTopBottomMoversComputationOutput) Value() TemplateMeasureFieldPtrOutput {
	return o.ApplyT(func(v TemplateTopBottomMoversComputation) *TemplateMeasureField { return v.Value }).(TemplateMeasureFieldPtrOutput)
}

type TemplateTopBottomMoversComputationPtrOutput struct{ *pulumi.OutputState }

func (TemplateTopBottomMoversComputationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTopBottomMoversComputation)(nil)).Elem()
}

func (o TemplateTopBottomMoversComputationPtrOutput) ToTemplateTopBottomMoversComputationPtrOutput() TemplateTopBottomMoversComputationPtrOutput {
	return o
}

func (o TemplateTopBottomMoversComputationPtrOutput) ToTemplateTopBottomMoversComputationPtrOutputWithContext(ctx context.Context) TemplateTopBottomMoversComputationPtrOutput {
	return o
}

func (o TemplateTopBottomMoversComputationPtrOutput) Elem() TemplateTopBottomMoversComputationOutput {
	return o.ApplyT(func(v *TemplateTopBottomMoversComputation) TemplateTopBottomMoversComputation {
		if v != nil {
			return *v
		}
		var ret TemplateTopBottomMoversComputation
		return ret
	}).(TemplateTopBottomMoversComputationOutput)
}

// The category field that is used in a computation.
func (o TemplateTopBottomMoversComputationPtrOutput) Category() TemplateDimensionFieldPtrOutput {
	return o.ApplyT(func(v *TemplateTopBottomMoversComputation) *TemplateDimensionField {
		if v == nil {
			return nil
		}
		return v.Category
	}).(TemplateDimensionFieldPtrOutput)
}

// The ID for a computation.
func (o TemplateTopBottomMoversComputationPtrOutput) ComputationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateTopBottomMoversComputation) *string {
		if v == nil {
			return nil
		}
		return &v.ComputationId
	}).(pulumi.StringPtrOutput)
}

// The mover size setup of the top and bottom movers computation.
func (o TemplateTopBottomMoversComputationPtrOutput) MoverSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateTopBottomMoversComputation) *float64 {
		if v == nil {
			return nil
		}
		return v.MoverSize
	}).(pulumi.Float64PtrOutput)
}

// The name of a computation.
func (o TemplateTopBottomMoversComputationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateTopBottomMoversComputation) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The sort order setup of the top and bottom movers computation.
func (o TemplateTopBottomMoversComputationPtrOutput) SortOrder() TemplateTopBottomSortOrderPtrOutput {
	return o.ApplyT(func(v *TemplateTopBottomMoversComputation) *TemplateTopBottomSortOrder {
		if v == nil {
			return nil
		}
		return v.SortOrder
	}).(TemplateTopBottomSortOrderPtrOutput)
}

// The time field that is used in a computation.
func (o TemplateTopBottomMoversComputationPtrOutput) Time() TemplateDimensionFieldPtrOutput {
	return o.ApplyT(func(v *TemplateTopBottomMoversComputation) *TemplateDimensionField {
		if v == nil {
			return nil
		}
		return v.Time
	}).(TemplateDimensionFieldPtrOutput)
}

// The computation type. Choose from the following options:
//
// - TOP: Top movers computation.
// - BOTTOM: Bottom movers computation.
func (o TemplateTopBottomMoversComputationPtrOutput) Type() TemplateTopBottomComputationTypePtrOutput {
	return o.ApplyT(func(v *TemplateTopBottomMoversComputation) *TemplateTopBottomComputationType {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(TemplateTopBottomComputationTypePtrOutput)
}

// The value field that is used in a computation.
func (o TemplateTopBottomMoversComputationPtrOutput) Value() TemplateMeasureFieldPtrOutput {
	return o.ApplyT(func(v *TemplateTopBottomMoversComputation) *TemplateMeasureField {
		if v == nil {
			return nil
		}
		return v.Value
	}).(TemplateMeasureFieldPtrOutput)
}

type TemplateTopBottomRankedComputation struct {
	// The category field that is used in a computation.
	Category *TemplateDimensionField `pulumi:"category"`
	// The ID for a computation.
	ComputationId string `pulumi:"computationId"`
	// The name of a computation.
	Name *string `pulumi:"name"`
	// The result size of a top and bottom ranked computation.
	ResultSize *float64 `pulumi:"resultSize"`
	// The computation type. Choose one of the following options:
	//
	// - TOP: A top ranked computation.
	// - BOTTOM: A bottom ranked computation.
	Type TemplateTopBottomComputationType `pulumi:"type"`
	// The value field that is used in a computation.
	Value *TemplateMeasureField `pulumi:"value"`
}

// TemplateTopBottomRankedComputationInput is an input type that accepts TemplateTopBottomRankedComputationArgs and TemplateTopBottomRankedComputationOutput values.
// You can construct a concrete instance of `TemplateTopBottomRankedComputationInput` via:
//
//	TemplateTopBottomRankedComputationArgs{...}
type TemplateTopBottomRankedComputationInput interface {
	pulumi.Input

	ToTemplateTopBottomRankedComputationOutput() TemplateTopBottomRankedComputationOutput
	ToTemplateTopBottomRankedComputationOutputWithContext(context.Context) TemplateTopBottomRankedComputationOutput
}

type TemplateTopBottomRankedComputationArgs struct {
	// The category field that is used in a computation.
	Category TemplateDimensionFieldPtrInput `pulumi:"category"`
	// The ID for a computation.
	ComputationId pulumi.StringInput `pulumi:"computationId"`
	// The name of a computation.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The result size of a top and bottom ranked computation.
	ResultSize pulumi.Float64PtrInput `pulumi:"resultSize"`
	// The computation type. Choose one of the following options:
	//
	// - TOP: A top ranked computation.
	// - BOTTOM: A bottom ranked computation.
	Type TemplateTopBottomComputationTypeInput `pulumi:"type"`
	// The value field that is used in a computation.
	Value TemplateMeasureFieldPtrInput `pulumi:"value"`
}

func (TemplateTopBottomRankedComputationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTopBottomRankedComputation)(nil)).Elem()
}

func (i TemplateTopBottomRankedComputationArgs) ToTemplateTopBottomRankedComputationOutput() TemplateTopBottomRankedComputationOutput {
	return i.ToTemplateTopBottomRankedComputationOutputWithContext(context.Background())
}

func (i TemplateTopBottomRankedComputationArgs) ToTemplateTopBottomRankedComputationOutputWithContext(ctx context.Context) TemplateTopBottomRankedComputationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTopBottomRankedComputationOutput)
}

func (i TemplateTopBottomRankedComputationArgs) ToTemplateTopBottomRankedComputationPtrOutput() TemplateTopBottomRankedComputationPtrOutput {
	return i.ToTemplateTopBottomRankedComputationPtrOutputWithContext(context.Background())
}

func (i TemplateTopBottomRankedComputationArgs) ToTemplateTopBottomRankedComputationPtrOutputWithContext(ctx context.Context) TemplateTopBottomRankedComputationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTopBottomRankedComputationOutput).ToTemplateTopBottomRankedComputationPtrOutputWithContext(ctx)
}

// TemplateTopBottomRankedComputationPtrInput is an input type that accepts TemplateTopBottomRankedComputationArgs, TemplateTopBottomRankedComputationPtr and TemplateTopBottomRankedComputationPtrOutput values.
// You can construct a concrete instance of `TemplateTopBottomRankedComputationPtrInput` via:
//
//	        TemplateTopBottomRankedComputationArgs{...}
//
//	or:
//
//	        nil
type TemplateTopBottomRankedComputationPtrInput interface {
	pulumi.Input

	ToTemplateTopBottomRankedComputationPtrOutput() TemplateTopBottomRankedComputationPtrOutput
	ToTemplateTopBottomRankedComputationPtrOutputWithContext(context.Context) TemplateTopBottomRankedComputationPtrOutput
}

type templateTopBottomRankedComputationPtrType TemplateTopBottomRankedComputationArgs

func TemplateTopBottomRankedComputationPtr(v *TemplateTopBottomRankedComputationArgs) TemplateTopBottomRankedComputationPtrInput {
	return (*templateTopBottomRankedComputationPtrType)(v)
}

func (*templateTopBottomRankedComputationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTopBottomRankedComputation)(nil)).Elem()
}

func (i *templateTopBottomRankedComputationPtrType) ToTemplateTopBottomRankedComputationPtrOutput() TemplateTopBottomRankedComputationPtrOutput {
	return i.ToTemplateTopBottomRankedComputationPtrOutputWithContext(context.Background())
}

func (i *templateTopBottomRankedComputationPtrType) ToTemplateTopBottomRankedComputationPtrOutputWithContext(ctx context.Context) TemplateTopBottomRankedComputationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTopBottomRankedComputationPtrOutput)
}

type TemplateTopBottomRankedComputationOutput struct{ *pulumi.OutputState }

func (TemplateTopBottomRankedComputationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTopBottomRankedComputation)(nil)).Elem()
}

func (o TemplateTopBottomRankedComputationOutput) ToTemplateTopBottomRankedComputationOutput() TemplateTopBottomRankedComputationOutput {
	return o
}

func (o TemplateTopBottomRankedComputationOutput) ToTemplateTopBottomRankedComputationOutputWithContext(ctx context.Context) TemplateTopBottomRankedComputationOutput {
	return o
}

func (o TemplateTopBottomRankedComputationOutput) ToTemplateTopBottomRankedComputationPtrOutput() TemplateTopBottomRankedComputationPtrOutput {
	return o.ToTemplateTopBottomRankedComputationPtrOutputWithContext(context.Background())
}

func (o TemplateTopBottomRankedComputationOutput) ToTemplateTopBottomRankedComputationPtrOutputWithContext(ctx context.Context) TemplateTopBottomRankedComputationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTopBottomRankedComputation) *TemplateTopBottomRankedComputation {
		return &v
	}).(TemplateTopBottomRankedComputationPtrOutput)
}

// The category field that is used in a computation.
func (o TemplateTopBottomRankedComputationOutput) Category() TemplateDimensionFieldPtrOutput {
	return o.ApplyT(func(v TemplateTopBottomRankedComputation) *TemplateDimensionField { return v.Category }).(TemplateDimensionFieldPtrOutput)
}

// The ID for a computation.
func (o TemplateTopBottomRankedComputationOutput) ComputationId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateTopBottomRankedComputation) string { return v.ComputationId }).(pulumi.StringOutput)
}

// The name of a computation.
func (o TemplateTopBottomRankedComputationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateTopBottomRankedComputation) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The result size of a top and bottom ranked computation.
func (o TemplateTopBottomRankedComputationOutput) ResultSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateTopBottomRankedComputation) *float64 { return v.ResultSize }).(pulumi.Float64PtrOutput)
}

// The computation type. Choose one of the following options:
//
// - TOP: A top ranked computation.
// - BOTTOM: A bottom ranked computation.
func (o TemplateTopBottomRankedComputationOutput) Type() TemplateTopBottomComputationTypeOutput {
	return o.ApplyT(func(v TemplateTopBottomRankedComputation) TemplateTopBottomComputationType { return v.Type }).(TemplateTopBottomComputationTypeOutput)
}

// The value field that is used in a computation.
func (o TemplateTopBottomRankedComputationOutput) Value() TemplateMeasureFieldPtrOutput {
	return o.ApplyT(func(v TemplateTopBottomRankedComputation) *TemplateMeasureField { return v.Value }).(TemplateMeasureFieldPtrOutput)
}

type TemplateTopBottomRankedComputationPtrOutput struct{ *pulumi.OutputState }

func (TemplateTopBottomRankedComputationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTopBottomRankedComputation)(nil)).Elem()
}

func (o TemplateTopBottomRankedComputationPtrOutput) ToTemplateTopBottomRankedComputationPtrOutput() TemplateTopBottomRankedComputationPtrOutput {
	return o
}

func (o TemplateTopBottomRankedComputationPtrOutput) ToTemplateTopBottomRankedComputationPtrOutputWithContext(ctx context.Context) TemplateTopBottomRankedComputationPtrOutput {
	return o
}

func (o TemplateTopBottomRankedComputationPtrOutput) Elem() TemplateTopBottomRankedComputationOutput {
	return o.ApplyT(func(v *TemplateTopBottomRankedComputation) TemplateTopBottomRankedComputation {
		if v != nil {
			return *v
		}
		var ret TemplateTopBottomRankedComputation
		return ret
	}).(TemplateTopBottomRankedComputationOutput)
}

// The category field that is used in a computation.
func (o TemplateTopBottomRankedComputationPtrOutput) Category() TemplateDimensionFieldPtrOutput {
	return o.ApplyT(func(v *TemplateTopBottomRankedComputation) *TemplateDimensionField {
		if v == nil {
			return nil
		}
		return v.Category
	}).(TemplateDimensionFieldPtrOutput)
}

// The ID for a computation.
func (o TemplateTopBottomRankedComputationPtrOutput) ComputationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateTopBottomRankedComputation) *string {
		if v == nil {
			return nil
		}
		return &v.ComputationId
	}).(pulumi.StringPtrOutput)
}

// The name of a computation.
func (o TemplateTopBottomRankedComputationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateTopBottomRankedComputation) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The result size of a top and bottom ranked computation.
func (o TemplateTopBottomRankedComputationPtrOutput) ResultSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateTopBottomRankedComputation) *float64 {
		if v == nil {
			return nil
		}
		return v.ResultSize
	}).(pulumi.Float64PtrOutput)
}

// The computation type. Choose one of the following options:
//
// - TOP: A top ranked computation.
// - BOTTOM: A bottom ranked computation.
func (o TemplateTopBottomRankedComputationPtrOutput) Type() TemplateTopBottomComputationTypePtrOutput {
	return o.ApplyT(func(v *TemplateTopBottomRankedComputation) *TemplateTopBottomComputationType {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(TemplateTopBottomComputationTypePtrOutput)
}

// The value field that is used in a computation.
func (o TemplateTopBottomRankedComputationPtrOutput) Value() TemplateMeasureFieldPtrOutput {
	return o.ApplyT(func(v *TemplateTopBottomRankedComputation) *TemplateMeasureField {
		if v == nil {
			return nil
		}
		return v.Value
	}).(TemplateMeasureFieldPtrOutput)
}

type TemplateTotalAggregationComputation struct {
	// The ID for a computation.
	ComputationId string `pulumi:"computationId"`
	// The name of a computation.
	Name *string `pulumi:"name"`
	// The value field that is used in a computation.
	Value *TemplateMeasureField `pulumi:"value"`
}

// TemplateTotalAggregationComputationInput is an input type that accepts TemplateTotalAggregationComputationArgs and TemplateTotalAggregationComputationOutput values.
// You can construct a concrete instance of `TemplateTotalAggregationComputationInput` via:
//
//	TemplateTotalAggregationComputationArgs{...}
type TemplateTotalAggregationComputationInput interface {
	pulumi.Input

	ToTemplateTotalAggregationComputationOutput() TemplateTotalAggregationComputationOutput
	ToTemplateTotalAggregationComputationOutputWithContext(context.Context) TemplateTotalAggregationComputationOutput
}

type TemplateTotalAggregationComputationArgs struct {
	// The ID for a computation.
	ComputationId pulumi.StringInput `pulumi:"computationId"`
	// The name of a computation.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The value field that is used in a computation.
	Value TemplateMeasureFieldPtrInput `pulumi:"value"`
}

func (TemplateTotalAggregationComputationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTotalAggregationComputation)(nil)).Elem()
}

func (i TemplateTotalAggregationComputationArgs) ToTemplateTotalAggregationComputationOutput() TemplateTotalAggregationComputationOutput {
	return i.ToTemplateTotalAggregationComputationOutputWithContext(context.Background())
}

func (i TemplateTotalAggregationComputationArgs) ToTemplateTotalAggregationComputationOutputWithContext(ctx context.Context) TemplateTotalAggregationComputationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTotalAggregationComputationOutput)
}

func (i TemplateTotalAggregationComputationArgs) ToTemplateTotalAggregationComputationPtrOutput() TemplateTotalAggregationComputationPtrOutput {
	return i.ToTemplateTotalAggregationComputationPtrOutputWithContext(context.Background())
}

func (i TemplateTotalAggregationComputationArgs) ToTemplateTotalAggregationComputationPtrOutputWithContext(ctx context.Context) TemplateTotalAggregationComputationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTotalAggregationComputationOutput).ToTemplateTotalAggregationComputationPtrOutputWithContext(ctx)
}

// TemplateTotalAggregationComputationPtrInput is an input type that accepts TemplateTotalAggregationComputationArgs, TemplateTotalAggregationComputationPtr and TemplateTotalAggregationComputationPtrOutput values.
// You can construct a concrete instance of `TemplateTotalAggregationComputationPtrInput` via:
//
//	        TemplateTotalAggregationComputationArgs{...}
//
//	or:
//
//	        nil
type TemplateTotalAggregationComputationPtrInput interface {
	pulumi.Input

	ToTemplateTotalAggregationComputationPtrOutput() TemplateTotalAggregationComputationPtrOutput
	ToTemplateTotalAggregationComputationPtrOutputWithContext(context.Context) TemplateTotalAggregationComputationPtrOutput
}

type templateTotalAggregationComputationPtrType TemplateTotalAggregationComputationArgs

func TemplateTotalAggregationComputationPtr(v *TemplateTotalAggregationComputationArgs) TemplateTotalAggregationComputationPtrInput {
	return (*templateTotalAggregationComputationPtrType)(v)
}

func (*templateTotalAggregationComputationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTotalAggregationComputation)(nil)).Elem()
}

func (i *templateTotalAggregationComputationPtrType) ToTemplateTotalAggregationComputationPtrOutput() TemplateTotalAggregationComputationPtrOutput {
	return i.ToTemplateTotalAggregationComputationPtrOutputWithContext(context.Background())
}

func (i *templateTotalAggregationComputationPtrType) ToTemplateTotalAggregationComputationPtrOutputWithContext(ctx context.Context) TemplateTotalAggregationComputationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTotalAggregationComputationPtrOutput)
}

type TemplateTotalAggregationComputationOutput struct{ *pulumi.OutputState }

func (TemplateTotalAggregationComputationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTotalAggregationComputation)(nil)).Elem()
}

func (o TemplateTotalAggregationComputationOutput) ToTemplateTotalAggregationComputationOutput() TemplateTotalAggregationComputationOutput {
	return o
}

func (o TemplateTotalAggregationComputationOutput) ToTemplateTotalAggregationComputationOutputWithContext(ctx context.Context) TemplateTotalAggregationComputationOutput {
	return o
}

func (o TemplateTotalAggregationComputationOutput) ToTemplateTotalAggregationComputationPtrOutput() TemplateTotalAggregationComputationPtrOutput {
	return o.ToTemplateTotalAggregationComputationPtrOutputWithContext(context.Background())
}

func (o TemplateTotalAggregationComputationOutput) ToTemplateTotalAggregationComputationPtrOutputWithContext(ctx context.Context) TemplateTotalAggregationComputationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTotalAggregationComputation) *TemplateTotalAggregationComputation {
		return &v
	}).(TemplateTotalAggregationComputationPtrOutput)
}

// The ID for a computation.
func (o TemplateTotalAggregationComputationOutput) ComputationId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateTotalAggregationComputation) string { return v.ComputationId }).(pulumi.StringOutput)
}

// The name of a computation.
func (o TemplateTotalAggregationComputationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateTotalAggregationComputation) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The value field that is used in a computation.
func (o TemplateTotalAggregationComputationOutput) Value() TemplateMeasureFieldPtrOutput {
	return o.ApplyT(func(v TemplateTotalAggregationComputation) *TemplateMeasureField { return v.Value }).(TemplateMeasureFieldPtrOutput)
}

type TemplateTotalAggregationComputationPtrOutput struct{ *pulumi.OutputState }

func (TemplateTotalAggregationComputationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTotalAggregationComputation)(nil)).Elem()
}

func (o TemplateTotalAggregationComputationPtrOutput) ToTemplateTotalAggregationComputationPtrOutput() TemplateTotalAggregationComputationPtrOutput {
	return o
}

func (o TemplateTotalAggregationComputationPtrOutput) ToTemplateTotalAggregationComputationPtrOutputWithContext(ctx context.Context) TemplateTotalAggregationComputationPtrOutput {
	return o
}

func (o TemplateTotalAggregationComputationPtrOutput) Elem() TemplateTotalAggregationComputationOutput {
	return o.ApplyT(func(v *TemplateTotalAggregationComputation) TemplateTotalAggregationComputation {
		if v != nil {
			return *v
		}
		var ret TemplateTotalAggregationComputation
		return ret
	}).(TemplateTotalAggregationComputationOutput)
}

// The ID for a computation.
func (o TemplateTotalAggregationComputationPtrOutput) ComputationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateTotalAggregationComputation) *string {
		if v == nil {
			return nil
		}
		return &v.ComputationId
	}).(pulumi.StringPtrOutput)
}

// The name of a computation.
func (o TemplateTotalAggregationComputationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateTotalAggregationComputation) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The value field that is used in a computation.
func (o TemplateTotalAggregationComputationPtrOutput) Value() TemplateMeasureFieldPtrOutput {
	return o.ApplyT(func(v *TemplateTotalAggregationComputation) *TemplateMeasureField {
		if v == nil {
			return nil
		}
		return v.Value
	}).(TemplateMeasureFieldPtrOutput)
}

type TemplateTotalAggregationFunction struct {
	// A built in aggregation function for total values.
	SimpleTotalAggregationFunction *TemplateSimpleTotalAggregationFunction `pulumi:"simpleTotalAggregationFunction"`
}

// TemplateTotalAggregationFunctionInput is an input type that accepts TemplateTotalAggregationFunctionArgs and TemplateTotalAggregationFunctionOutput values.
// You can construct a concrete instance of `TemplateTotalAggregationFunctionInput` via:
//
//	TemplateTotalAggregationFunctionArgs{...}
type TemplateTotalAggregationFunctionInput interface {
	pulumi.Input

	ToTemplateTotalAggregationFunctionOutput() TemplateTotalAggregationFunctionOutput
	ToTemplateTotalAggregationFunctionOutputWithContext(context.Context) TemplateTotalAggregationFunctionOutput
}

type TemplateTotalAggregationFunctionArgs struct {
	// A built in aggregation function for total values.
	SimpleTotalAggregationFunction TemplateSimpleTotalAggregationFunctionPtrInput `pulumi:"simpleTotalAggregationFunction"`
}

func (TemplateTotalAggregationFunctionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTotalAggregationFunction)(nil)).Elem()
}

func (i TemplateTotalAggregationFunctionArgs) ToTemplateTotalAggregationFunctionOutput() TemplateTotalAggregationFunctionOutput {
	return i.ToTemplateTotalAggregationFunctionOutputWithContext(context.Background())
}

func (i TemplateTotalAggregationFunctionArgs) ToTemplateTotalAggregationFunctionOutputWithContext(ctx context.Context) TemplateTotalAggregationFunctionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTotalAggregationFunctionOutput)
}

type TemplateTotalAggregationFunctionOutput struct{ *pulumi.OutputState }

func (TemplateTotalAggregationFunctionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTotalAggregationFunction)(nil)).Elem()
}

func (o TemplateTotalAggregationFunctionOutput) ToTemplateTotalAggregationFunctionOutput() TemplateTotalAggregationFunctionOutput {
	return o
}

func (o TemplateTotalAggregationFunctionOutput) ToTemplateTotalAggregationFunctionOutputWithContext(ctx context.Context) TemplateTotalAggregationFunctionOutput {
	return o
}

// A built in aggregation function for total values.
func (o TemplateTotalAggregationFunctionOutput) SimpleTotalAggregationFunction() TemplateSimpleTotalAggregationFunctionPtrOutput {
	return o.ApplyT(func(v TemplateTotalAggregationFunction) *TemplateSimpleTotalAggregationFunction {
		return v.SimpleTotalAggregationFunction
	}).(TemplateSimpleTotalAggregationFunctionPtrOutput)
}

type TemplateTotalAggregationOption struct {
	// The field id that's associated with the total aggregation option.
	FieldId string `pulumi:"fieldId"`
	// The total aggregation function that you want to set for a specified field id.
	TotalAggregationFunction TemplateTotalAggregationFunction `pulumi:"totalAggregationFunction"`
}

// TemplateTotalAggregationOptionInput is an input type that accepts TemplateTotalAggregationOptionArgs and TemplateTotalAggregationOptionOutput values.
// You can construct a concrete instance of `TemplateTotalAggregationOptionInput` via:
//
//	TemplateTotalAggregationOptionArgs{...}
type TemplateTotalAggregationOptionInput interface {
	pulumi.Input

	ToTemplateTotalAggregationOptionOutput() TemplateTotalAggregationOptionOutput
	ToTemplateTotalAggregationOptionOutputWithContext(context.Context) TemplateTotalAggregationOptionOutput
}

type TemplateTotalAggregationOptionArgs struct {
	// The field id that's associated with the total aggregation option.
	FieldId pulumi.StringInput `pulumi:"fieldId"`
	// The total aggregation function that you want to set for a specified field id.
	TotalAggregationFunction TemplateTotalAggregationFunctionInput `pulumi:"totalAggregationFunction"`
}

func (TemplateTotalAggregationOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTotalAggregationOption)(nil)).Elem()
}

func (i TemplateTotalAggregationOptionArgs) ToTemplateTotalAggregationOptionOutput() TemplateTotalAggregationOptionOutput {
	return i.ToTemplateTotalAggregationOptionOutputWithContext(context.Background())
}

func (i TemplateTotalAggregationOptionArgs) ToTemplateTotalAggregationOptionOutputWithContext(ctx context.Context) TemplateTotalAggregationOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTotalAggregationOptionOutput)
}

// TemplateTotalAggregationOptionArrayInput is an input type that accepts TemplateTotalAggregationOptionArray and TemplateTotalAggregationOptionArrayOutput values.
// You can construct a concrete instance of `TemplateTotalAggregationOptionArrayInput` via:
//
//	TemplateTotalAggregationOptionArray{ TemplateTotalAggregationOptionArgs{...} }
type TemplateTotalAggregationOptionArrayInput interface {
	pulumi.Input

	ToTemplateTotalAggregationOptionArrayOutput() TemplateTotalAggregationOptionArrayOutput
	ToTemplateTotalAggregationOptionArrayOutputWithContext(context.Context) TemplateTotalAggregationOptionArrayOutput
}

type TemplateTotalAggregationOptionArray []TemplateTotalAggregationOptionInput

func (TemplateTotalAggregationOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateTotalAggregationOption)(nil)).Elem()
}

func (i TemplateTotalAggregationOptionArray) ToTemplateTotalAggregationOptionArrayOutput() TemplateTotalAggregationOptionArrayOutput {
	return i.ToTemplateTotalAggregationOptionArrayOutputWithContext(context.Background())
}

func (i TemplateTotalAggregationOptionArray) ToTemplateTotalAggregationOptionArrayOutputWithContext(ctx context.Context) TemplateTotalAggregationOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTotalAggregationOptionArrayOutput)
}

type TemplateTotalAggregationOptionOutput struct{ *pulumi.OutputState }

func (TemplateTotalAggregationOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTotalAggregationOption)(nil)).Elem()
}

func (o TemplateTotalAggregationOptionOutput) ToTemplateTotalAggregationOptionOutput() TemplateTotalAggregationOptionOutput {
	return o
}

func (o TemplateTotalAggregationOptionOutput) ToTemplateTotalAggregationOptionOutputWithContext(ctx context.Context) TemplateTotalAggregationOptionOutput {
	return o
}

// The field id that's associated with the total aggregation option.
func (o TemplateTotalAggregationOptionOutput) FieldId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateTotalAggregationOption) string { return v.FieldId }).(pulumi.StringOutput)
}

// The total aggregation function that you want to set for a specified field id.
func (o TemplateTotalAggregationOptionOutput) TotalAggregationFunction() TemplateTotalAggregationFunctionOutput {
	return o.ApplyT(func(v TemplateTotalAggregationOption) TemplateTotalAggregationFunction {
		return v.TotalAggregationFunction
	}).(TemplateTotalAggregationFunctionOutput)
}

type TemplateTotalAggregationOptionArrayOutput struct{ *pulumi.OutputState }

func (TemplateTotalAggregationOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateTotalAggregationOption)(nil)).Elem()
}

func (o TemplateTotalAggregationOptionArrayOutput) ToTemplateTotalAggregationOptionArrayOutput() TemplateTotalAggregationOptionArrayOutput {
	return o
}

func (o TemplateTotalAggregationOptionArrayOutput) ToTemplateTotalAggregationOptionArrayOutputWithContext(ctx context.Context) TemplateTotalAggregationOptionArrayOutput {
	return o
}

func (o TemplateTotalAggregationOptionArrayOutput) Index(i pulumi.IntInput) TemplateTotalAggregationOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateTotalAggregationOption {
		return vs[0].([]TemplateTotalAggregationOption)[vs[1].(int)]
	}).(TemplateTotalAggregationOptionOutput)
}

type TemplateTotalOptions struct {
	// The custom label string for the total cells.
	CustomLabel *string `pulumi:"customLabel"`
	// The placement (start, end) for the total cells.
	Placement *TemplateTableTotalsPlacement `pulumi:"placement"`
	// The scroll status (pinned, scrolled) for the total cells.
	ScrollStatus *TemplateTableTotalsScrollStatus `pulumi:"scrollStatus"`
	// The total aggregation settings for each value field.
	TotalAggregationOptions []TemplateTotalAggregationOption `pulumi:"totalAggregationOptions"`
	// Cell styling options for the total cells.
	TotalCellStyle *TemplateTableCellStyle `pulumi:"totalCellStyle"`
	// The visibility configuration for the total cells.
	TotalsVisibility interface{} `pulumi:"totalsVisibility"`
}

// TemplateTotalOptionsInput is an input type that accepts TemplateTotalOptionsArgs and TemplateTotalOptionsOutput values.
// You can construct a concrete instance of `TemplateTotalOptionsInput` via:
//
//	TemplateTotalOptionsArgs{...}
type TemplateTotalOptionsInput interface {
	pulumi.Input

	ToTemplateTotalOptionsOutput() TemplateTotalOptionsOutput
	ToTemplateTotalOptionsOutputWithContext(context.Context) TemplateTotalOptionsOutput
}

type TemplateTotalOptionsArgs struct {
	// The custom label string for the total cells.
	CustomLabel pulumi.StringPtrInput `pulumi:"customLabel"`
	// The placement (start, end) for the total cells.
	Placement TemplateTableTotalsPlacementPtrInput `pulumi:"placement"`
	// The scroll status (pinned, scrolled) for the total cells.
	ScrollStatus TemplateTableTotalsScrollStatusPtrInput `pulumi:"scrollStatus"`
	// The total aggregation settings for each value field.
	TotalAggregationOptions TemplateTotalAggregationOptionArrayInput `pulumi:"totalAggregationOptions"`
	// Cell styling options for the total cells.
	TotalCellStyle TemplateTableCellStylePtrInput `pulumi:"totalCellStyle"`
	// The visibility configuration for the total cells.
	TotalsVisibility pulumi.Input `pulumi:"totalsVisibility"`
}

func (TemplateTotalOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTotalOptions)(nil)).Elem()
}

func (i TemplateTotalOptionsArgs) ToTemplateTotalOptionsOutput() TemplateTotalOptionsOutput {
	return i.ToTemplateTotalOptionsOutputWithContext(context.Background())
}

func (i TemplateTotalOptionsArgs) ToTemplateTotalOptionsOutputWithContext(ctx context.Context) TemplateTotalOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTotalOptionsOutput)
}

func (i TemplateTotalOptionsArgs) ToTemplateTotalOptionsPtrOutput() TemplateTotalOptionsPtrOutput {
	return i.ToTemplateTotalOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateTotalOptionsArgs) ToTemplateTotalOptionsPtrOutputWithContext(ctx context.Context) TemplateTotalOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTotalOptionsOutput).ToTemplateTotalOptionsPtrOutputWithContext(ctx)
}

// TemplateTotalOptionsPtrInput is an input type that accepts TemplateTotalOptionsArgs, TemplateTotalOptionsPtr and TemplateTotalOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateTotalOptionsPtrInput` via:
//
//	        TemplateTotalOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateTotalOptionsPtrInput interface {
	pulumi.Input

	ToTemplateTotalOptionsPtrOutput() TemplateTotalOptionsPtrOutput
	ToTemplateTotalOptionsPtrOutputWithContext(context.Context) TemplateTotalOptionsPtrOutput
}

type templateTotalOptionsPtrType TemplateTotalOptionsArgs

func TemplateTotalOptionsPtr(v *TemplateTotalOptionsArgs) TemplateTotalOptionsPtrInput {
	return (*templateTotalOptionsPtrType)(v)
}

func (*templateTotalOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTotalOptions)(nil)).Elem()
}

func (i *templateTotalOptionsPtrType) ToTemplateTotalOptionsPtrOutput() TemplateTotalOptionsPtrOutput {
	return i.ToTemplateTotalOptionsPtrOutputWithContext(context.Background())
}

func (i *templateTotalOptionsPtrType) ToTemplateTotalOptionsPtrOutputWithContext(ctx context.Context) TemplateTotalOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTotalOptionsPtrOutput)
}

type TemplateTotalOptionsOutput struct{ *pulumi.OutputState }

func (TemplateTotalOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTotalOptions)(nil)).Elem()
}

func (o TemplateTotalOptionsOutput) ToTemplateTotalOptionsOutput() TemplateTotalOptionsOutput {
	return o
}

func (o TemplateTotalOptionsOutput) ToTemplateTotalOptionsOutputWithContext(ctx context.Context) TemplateTotalOptionsOutput {
	return o
}

func (o TemplateTotalOptionsOutput) ToTemplateTotalOptionsPtrOutput() TemplateTotalOptionsPtrOutput {
	return o.ToTemplateTotalOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateTotalOptionsOutput) ToTemplateTotalOptionsPtrOutputWithContext(ctx context.Context) TemplateTotalOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTotalOptions) *TemplateTotalOptions {
		return &v
	}).(TemplateTotalOptionsPtrOutput)
}

// The custom label string for the total cells.
func (o TemplateTotalOptionsOutput) CustomLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateTotalOptions) *string { return v.CustomLabel }).(pulumi.StringPtrOutput)
}

// The placement (start, end) for the total cells.
func (o TemplateTotalOptionsOutput) Placement() TemplateTableTotalsPlacementPtrOutput {
	return o.ApplyT(func(v TemplateTotalOptions) *TemplateTableTotalsPlacement { return v.Placement }).(TemplateTableTotalsPlacementPtrOutput)
}

// The scroll status (pinned, scrolled) for the total cells.
func (o TemplateTotalOptionsOutput) ScrollStatus() TemplateTableTotalsScrollStatusPtrOutput {
	return o.ApplyT(func(v TemplateTotalOptions) *TemplateTableTotalsScrollStatus { return v.ScrollStatus }).(TemplateTableTotalsScrollStatusPtrOutput)
}

// The total aggregation settings for each value field.
func (o TemplateTotalOptionsOutput) TotalAggregationOptions() TemplateTotalAggregationOptionArrayOutput {
	return o.ApplyT(func(v TemplateTotalOptions) []TemplateTotalAggregationOption { return v.TotalAggregationOptions }).(TemplateTotalAggregationOptionArrayOutput)
}

// Cell styling options for the total cells.
func (o TemplateTotalOptionsOutput) TotalCellStyle() TemplateTableCellStylePtrOutput {
	return o.ApplyT(func(v TemplateTotalOptions) *TemplateTableCellStyle { return v.TotalCellStyle }).(TemplateTableCellStylePtrOutput)
}

// The visibility configuration for the total cells.
func (o TemplateTotalOptionsOutput) TotalsVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateTotalOptions) interface{} { return v.TotalsVisibility }).(pulumi.AnyOutput)
}

type TemplateTotalOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateTotalOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTotalOptions)(nil)).Elem()
}

func (o TemplateTotalOptionsPtrOutput) ToTemplateTotalOptionsPtrOutput() TemplateTotalOptionsPtrOutput {
	return o
}

func (o TemplateTotalOptionsPtrOutput) ToTemplateTotalOptionsPtrOutputWithContext(ctx context.Context) TemplateTotalOptionsPtrOutput {
	return o
}

func (o TemplateTotalOptionsPtrOutput) Elem() TemplateTotalOptionsOutput {
	return o.ApplyT(func(v *TemplateTotalOptions) TemplateTotalOptions {
		if v != nil {
			return *v
		}
		var ret TemplateTotalOptions
		return ret
	}).(TemplateTotalOptionsOutput)
}

// The custom label string for the total cells.
func (o TemplateTotalOptionsPtrOutput) CustomLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateTotalOptions) *string {
		if v == nil {
			return nil
		}
		return v.CustomLabel
	}).(pulumi.StringPtrOutput)
}

// The placement (start, end) for the total cells.
func (o TemplateTotalOptionsPtrOutput) Placement() TemplateTableTotalsPlacementPtrOutput {
	return o.ApplyT(func(v *TemplateTotalOptions) *TemplateTableTotalsPlacement {
		if v == nil {
			return nil
		}
		return v.Placement
	}).(TemplateTableTotalsPlacementPtrOutput)
}

// The scroll status (pinned, scrolled) for the total cells.
func (o TemplateTotalOptionsPtrOutput) ScrollStatus() TemplateTableTotalsScrollStatusPtrOutput {
	return o.ApplyT(func(v *TemplateTotalOptions) *TemplateTableTotalsScrollStatus {
		if v == nil {
			return nil
		}
		return v.ScrollStatus
	}).(TemplateTableTotalsScrollStatusPtrOutput)
}

// The total aggregation settings for each value field.
func (o TemplateTotalOptionsPtrOutput) TotalAggregationOptions() TemplateTotalAggregationOptionArrayOutput {
	return o.ApplyT(func(v *TemplateTotalOptions) []TemplateTotalAggregationOption {
		if v == nil {
			return nil
		}
		return v.TotalAggregationOptions
	}).(TemplateTotalAggregationOptionArrayOutput)
}

// Cell styling options for the total cells.
func (o TemplateTotalOptionsPtrOutput) TotalCellStyle() TemplateTableCellStylePtrOutput {
	return o.ApplyT(func(v *TemplateTotalOptions) *TemplateTableCellStyle {
		if v == nil {
			return nil
		}
		return v.TotalCellStyle
	}).(TemplateTableCellStylePtrOutput)
}

// The visibility configuration for the total cells.
func (o TemplateTotalOptionsPtrOutput) TotalsVisibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateTotalOptions) interface{} {
		if v == nil {
			return nil
		}
		return v.TotalsVisibility
	}).(pulumi.AnyOutput)
}

type TemplateTreeMapAggregatedFieldWells struct {
	// The color field well of a tree map. Values are grouped by aggregations based on group by fields.
	Colors []TemplateMeasureField `pulumi:"colors"`
	// The group by field well of a tree map. Values are grouped based on group by fields.
	Groups []TemplateDimensionField `pulumi:"groups"`
	// The size field well of a tree map. Values are aggregated based on group by fields.
	Sizes []TemplateMeasureField `pulumi:"sizes"`
}

// TemplateTreeMapAggregatedFieldWellsInput is an input type that accepts TemplateTreeMapAggregatedFieldWellsArgs and TemplateTreeMapAggregatedFieldWellsOutput values.
// You can construct a concrete instance of `TemplateTreeMapAggregatedFieldWellsInput` via:
//
//	TemplateTreeMapAggregatedFieldWellsArgs{...}
type TemplateTreeMapAggregatedFieldWellsInput interface {
	pulumi.Input

	ToTemplateTreeMapAggregatedFieldWellsOutput() TemplateTreeMapAggregatedFieldWellsOutput
	ToTemplateTreeMapAggregatedFieldWellsOutputWithContext(context.Context) TemplateTreeMapAggregatedFieldWellsOutput
}

type TemplateTreeMapAggregatedFieldWellsArgs struct {
	// The color field well of a tree map. Values are grouped by aggregations based on group by fields.
	Colors TemplateMeasureFieldArrayInput `pulumi:"colors"`
	// The group by field well of a tree map. Values are grouped based on group by fields.
	Groups TemplateDimensionFieldArrayInput `pulumi:"groups"`
	// The size field well of a tree map. Values are aggregated based on group by fields.
	Sizes TemplateMeasureFieldArrayInput `pulumi:"sizes"`
}

func (TemplateTreeMapAggregatedFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTreeMapAggregatedFieldWells)(nil)).Elem()
}

func (i TemplateTreeMapAggregatedFieldWellsArgs) ToTemplateTreeMapAggregatedFieldWellsOutput() TemplateTreeMapAggregatedFieldWellsOutput {
	return i.ToTemplateTreeMapAggregatedFieldWellsOutputWithContext(context.Background())
}

func (i TemplateTreeMapAggregatedFieldWellsArgs) ToTemplateTreeMapAggregatedFieldWellsOutputWithContext(ctx context.Context) TemplateTreeMapAggregatedFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTreeMapAggregatedFieldWellsOutput)
}

func (i TemplateTreeMapAggregatedFieldWellsArgs) ToTemplateTreeMapAggregatedFieldWellsPtrOutput() TemplateTreeMapAggregatedFieldWellsPtrOutput {
	return i.ToTemplateTreeMapAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i TemplateTreeMapAggregatedFieldWellsArgs) ToTemplateTreeMapAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateTreeMapAggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTreeMapAggregatedFieldWellsOutput).ToTemplateTreeMapAggregatedFieldWellsPtrOutputWithContext(ctx)
}

// TemplateTreeMapAggregatedFieldWellsPtrInput is an input type that accepts TemplateTreeMapAggregatedFieldWellsArgs, TemplateTreeMapAggregatedFieldWellsPtr and TemplateTreeMapAggregatedFieldWellsPtrOutput values.
// You can construct a concrete instance of `TemplateTreeMapAggregatedFieldWellsPtrInput` via:
//
//	        TemplateTreeMapAggregatedFieldWellsArgs{...}
//
//	or:
//
//	        nil
type TemplateTreeMapAggregatedFieldWellsPtrInput interface {
	pulumi.Input

	ToTemplateTreeMapAggregatedFieldWellsPtrOutput() TemplateTreeMapAggregatedFieldWellsPtrOutput
	ToTemplateTreeMapAggregatedFieldWellsPtrOutputWithContext(context.Context) TemplateTreeMapAggregatedFieldWellsPtrOutput
}

type templateTreeMapAggregatedFieldWellsPtrType TemplateTreeMapAggregatedFieldWellsArgs

func TemplateTreeMapAggregatedFieldWellsPtr(v *TemplateTreeMapAggregatedFieldWellsArgs) TemplateTreeMapAggregatedFieldWellsPtrInput {
	return (*templateTreeMapAggregatedFieldWellsPtrType)(v)
}

func (*templateTreeMapAggregatedFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTreeMapAggregatedFieldWells)(nil)).Elem()
}

func (i *templateTreeMapAggregatedFieldWellsPtrType) ToTemplateTreeMapAggregatedFieldWellsPtrOutput() TemplateTreeMapAggregatedFieldWellsPtrOutput {
	return i.ToTemplateTreeMapAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i *templateTreeMapAggregatedFieldWellsPtrType) ToTemplateTreeMapAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateTreeMapAggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTreeMapAggregatedFieldWellsPtrOutput)
}

type TemplateTreeMapAggregatedFieldWellsOutput struct{ *pulumi.OutputState }

func (TemplateTreeMapAggregatedFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTreeMapAggregatedFieldWells)(nil)).Elem()
}

func (o TemplateTreeMapAggregatedFieldWellsOutput) ToTemplateTreeMapAggregatedFieldWellsOutput() TemplateTreeMapAggregatedFieldWellsOutput {
	return o
}

func (o TemplateTreeMapAggregatedFieldWellsOutput) ToTemplateTreeMapAggregatedFieldWellsOutputWithContext(ctx context.Context) TemplateTreeMapAggregatedFieldWellsOutput {
	return o
}

func (o TemplateTreeMapAggregatedFieldWellsOutput) ToTemplateTreeMapAggregatedFieldWellsPtrOutput() TemplateTreeMapAggregatedFieldWellsPtrOutput {
	return o.ToTemplateTreeMapAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (o TemplateTreeMapAggregatedFieldWellsOutput) ToTemplateTreeMapAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateTreeMapAggregatedFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTreeMapAggregatedFieldWells) *TemplateTreeMapAggregatedFieldWells {
		return &v
	}).(TemplateTreeMapAggregatedFieldWellsPtrOutput)
}

// The color field well of a tree map. Values are grouped by aggregations based on group by fields.
func (o TemplateTreeMapAggregatedFieldWellsOutput) Colors() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v TemplateTreeMapAggregatedFieldWells) []TemplateMeasureField { return v.Colors }).(TemplateMeasureFieldArrayOutput)
}

// The group by field well of a tree map. Values are grouped based on group by fields.
func (o TemplateTreeMapAggregatedFieldWellsOutput) Groups() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v TemplateTreeMapAggregatedFieldWells) []TemplateDimensionField { return v.Groups }).(TemplateDimensionFieldArrayOutput)
}

// The size field well of a tree map. Values are aggregated based on group by fields.
func (o TemplateTreeMapAggregatedFieldWellsOutput) Sizes() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v TemplateTreeMapAggregatedFieldWells) []TemplateMeasureField { return v.Sizes }).(TemplateMeasureFieldArrayOutput)
}

type TemplateTreeMapAggregatedFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (TemplateTreeMapAggregatedFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTreeMapAggregatedFieldWells)(nil)).Elem()
}

func (o TemplateTreeMapAggregatedFieldWellsPtrOutput) ToTemplateTreeMapAggregatedFieldWellsPtrOutput() TemplateTreeMapAggregatedFieldWellsPtrOutput {
	return o
}

func (o TemplateTreeMapAggregatedFieldWellsPtrOutput) ToTemplateTreeMapAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateTreeMapAggregatedFieldWellsPtrOutput {
	return o
}

func (o TemplateTreeMapAggregatedFieldWellsPtrOutput) Elem() TemplateTreeMapAggregatedFieldWellsOutput {
	return o.ApplyT(func(v *TemplateTreeMapAggregatedFieldWells) TemplateTreeMapAggregatedFieldWells {
		if v != nil {
			return *v
		}
		var ret TemplateTreeMapAggregatedFieldWells
		return ret
	}).(TemplateTreeMapAggregatedFieldWellsOutput)
}

// The color field well of a tree map. Values are grouped by aggregations based on group by fields.
func (o TemplateTreeMapAggregatedFieldWellsPtrOutput) Colors() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v *TemplateTreeMapAggregatedFieldWells) []TemplateMeasureField {
		if v == nil {
			return nil
		}
		return v.Colors
	}).(TemplateMeasureFieldArrayOutput)
}

// The group by field well of a tree map. Values are grouped based on group by fields.
func (o TemplateTreeMapAggregatedFieldWellsPtrOutput) Groups() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v *TemplateTreeMapAggregatedFieldWells) []TemplateDimensionField {
		if v == nil {
			return nil
		}
		return v.Groups
	}).(TemplateDimensionFieldArrayOutput)
}

// The size field well of a tree map. Values are aggregated based on group by fields.
func (o TemplateTreeMapAggregatedFieldWellsPtrOutput) Sizes() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v *TemplateTreeMapAggregatedFieldWells) []TemplateMeasureField {
		if v == nil {
			return nil
		}
		return v.Sizes
	}).(TemplateMeasureFieldArrayOutput)
}

type TemplateTreeMapConfiguration struct {
	// The label options (label text, label visibility) for the colors displayed in a tree map.
	ColorLabelOptions *TemplateChartAxisLabelOptions `pulumi:"colorLabelOptions"`
	// The color options (gradient color, point of divergence) of a tree map.
	ColorScale *TemplateColorScale `pulumi:"colorScale"`
	// The options that determine if visual data labels are displayed.
	DataLabels *TemplateDataLabelOptions `pulumi:"dataLabels"`
	// The field wells of the visual.
	FieldWells *TemplateTreeMapFieldWells `pulumi:"fieldWells"`
	// The label options (label text, label visibility) of the groups that are displayed in a tree map.
	GroupLabelOptions *TemplateChartAxisLabelOptions `pulumi:"groupLabelOptions"`
	// The general visual interactions setup for a visual.
	Interactions *TemplateVisualInteractionOptions `pulumi:"interactions"`
	// The legend display setup of the visual.
	Legend *TemplateLegendOptions `pulumi:"legend"`
	// The label options (label text, label visibility) of the sizes that are displayed in a tree map.
	SizeLabelOptions *TemplateChartAxisLabelOptions `pulumi:"sizeLabelOptions"`
	// The sort configuration of a tree map.
	SortConfiguration *TemplateTreeMapSortConfiguration `pulumi:"sortConfiguration"`
	// The tooltip display setup of the visual.
	Tooltip *TemplateTooltipOptions `pulumi:"tooltip"`
}

// TemplateTreeMapConfigurationInput is an input type that accepts TemplateTreeMapConfigurationArgs and TemplateTreeMapConfigurationOutput values.
// You can construct a concrete instance of `TemplateTreeMapConfigurationInput` via:
//
//	TemplateTreeMapConfigurationArgs{...}
type TemplateTreeMapConfigurationInput interface {
	pulumi.Input

	ToTemplateTreeMapConfigurationOutput() TemplateTreeMapConfigurationOutput
	ToTemplateTreeMapConfigurationOutputWithContext(context.Context) TemplateTreeMapConfigurationOutput
}

type TemplateTreeMapConfigurationArgs struct {
	// The label options (label text, label visibility) for the colors displayed in a tree map.
	ColorLabelOptions TemplateChartAxisLabelOptionsPtrInput `pulumi:"colorLabelOptions"`
	// The color options (gradient color, point of divergence) of a tree map.
	ColorScale TemplateColorScalePtrInput `pulumi:"colorScale"`
	// The options that determine if visual data labels are displayed.
	DataLabels TemplateDataLabelOptionsPtrInput `pulumi:"dataLabels"`
	// The field wells of the visual.
	FieldWells TemplateTreeMapFieldWellsPtrInput `pulumi:"fieldWells"`
	// The label options (label text, label visibility) of the groups that are displayed in a tree map.
	GroupLabelOptions TemplateChartAxisLabelOptionsPtrInput `pulumi:"groupLabelOptions"`
	// The general visual interactions setup for a visual.
	Interactions TemplateVisualInteractionOptionsPtrInput `pulumi:"interactions"`
	// The legend display setup of the visual.
	Legend TemplateLegendOptionsPtrInput `pulumi:"legend"`
	// The label options (label text, label visibility) of the sizes that are displayed in a tree map.
	SizeLabelOptions TemplateChartAxisLabelOptionsPtrInput `pulumi:"sizeLabelOptions"`
	// The sort configuration of a tree map.
	SortConfiguration TemplateTreeMapSortConfigurationPtrInput `pulumi:"sortConfiguration"`
	// The tooltip display setup of the visual.
	Tooltip TemplateTooltipOptionsPtrInput `pulumi:"tooltip"`
}

func (TemplateTreeMapConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTreeMapConfiguration)(nil)).Elem()
}

func (i TemplateTreeMapConfigurationArgs) ToTemplateTreeMapConfigurationOutput() TemplateTreeMapConfigurationOutput {
	return i.ToTemplateTreeMapConfigurationOutputWithContext(context.Background())
}

func (i TemplateTreeMapConfigurationArgs) ToTemplateTreeMapConfigurationOutputWithContext(ctx context.Context) TemplateTreeMapConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTreeMapConfigurationOutput)
}

func (i TemplateTreeMapConfigurationArgs) ToTemplateTreeMapConfigurationPtrOutput() TemplateTreeMapConfigurationPtrOutput {
	return i.ToTemplateTreeMapConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateTreeMapConfigurationArgs) ToTemplateTreeMapConfigurationPtrOutputWithContext(ctx context.Context) TemplateTreeMapConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTreeMapConfigurationOutput).ToTemplateTreeMapConfigurationPtrOutputWithContext(ctx)
}

// TemplateTreeMapConfigurationPtrInput is an input type that accepts TemplateTreeMapConfigurationArgs, TemplateTreeMapConfigurationPtr and TemplateTreeMapConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateTreeMapConfigurationPtrInput` via:
//
//	        TemplateTreeMapConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateTreeMapConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateTreeMapConfigurationPtrOutput() TemplateTreeMapConfigurationPtrOutput
	ToTemplateTreeMapConfigurationPtrOutputWithContext(context.Context) TemplateTreeMapConfigurationPtrOutput
}

type templateTreeMapConfigurationPtrType TemplateTreeMapConfigurationArgs

func TemplateTreeMapConfigurationPtr(v *TemplateTreeMapConfigurationArgs) TemplateTreeMapConfigurationPtrInput {
	return (*templateTreeMapConfigurationPtrType)(v)
}

func (*templateTreeMapConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTreeMapConfiguration)(nil)).Elem()
}

func (i *templateTreeMapConfigurationPtrType) ToTemplateTreeMapConfigurationPtrOutput() TemplateTreeMapConfigurationPtrOutput {
	return i.ToTemplateTreeMapConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateTreeMapConfigurationPtrType) ToTemplateTreeMapConfigurationPtrOutputWithContext(ctx context.Context) TemplateTreeMapConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTreeMapConfigurationPtrOutput)
}

type TemplateTreeMapConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateTreeMapConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTreeMapConfiguration)(nil)).Elem()
}

func (o TemplateTreeMapConfigurationOutput) ToTemplateTreeMapConfigurationOutput() TemplateTreeMapConfigurationOutput {
	return o
}

func (o TemplateTreeMapConfigurationOutput) ToTemplateTreeMapConfigurationOutputWithContext(ctx context.Context) TemplateTreeMapConfigurationOutput {
	return o
}

func (o TemplateTreeMapConfigurationOutput) ToTemplateTreeMapConfigurationPtrOutput() TemplateTreeMapConfigurationPtrOutput {
	return o.ToTemplateTreeMapConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateTreeMapConfigurationOutput) ToTemplateTreeMapConfigurationPtrOutputWithContext(ctx context.Context) TemplateTreeMapConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTreeMapConfiguration) *TemplateTreeMapConfiguration {
		return &v
	}).(TemplateTreeMapConfigurationPtrOutput)
}

// The label options (label text, label visibility) for the colors displayed in a tree map.
func (o TemplateTreeMapConfigurationOutput) ColorLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTreeMapConfiguration) *TemplateChartAxisLabelOptions { return v.ColorLabelOptions }).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The color options (gradient color, point of divergence) of a tree map.
func (o TemplateTreeMapConfigurationOutput) ColorScale() TemplateColorScalePtrOutput {
	return o.ApplyT(func(v TemplateTreeMapConfiguration) *TemplateColorScale { return v.ColorScale }).(TemplateColorScalePtrOutput)
}

// The options that determine if visual data labels are displayed.
func (o TemplateTreeMapConfigurationOutput) DataLabels() TemplateDataLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTreeMapConfiguration) *TemplateDataLabelOptions { return v.DataLabels }).(TemplateDataLabelOptionsPtrOutput)
}

// The field wells of the visual.
func (o TemplateTreeMapConfigurationOutput) FieldWells() TemplateTreeMapFieldWellsPtrOutput {
	return o.ApplyT(func(v TemplateTreeMapConfiguration) *TemplateTreeMapFieldWells { return v.FieldWells }).(TemplateTreeMapFieldWellsPtrOutput)
}

// The label options (label text, label visibility) of the groups that are displayed in a tree map.
func (o TemplateTreeMapConfigurationOutput) GroupLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTreeMapConfiguration) *TemplateChartAxisLabelOptions { return v.GroupLabelOptions }).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The general visual interactions setup for a visual.
func (o TemplateTreeMapConfigurationOutput) Interactions() TemplateVisualInteractionOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTreeMapConfiguration) *TemplateVisualInteractionOptions { return v.Interactions }).(TemplateVisualInteractionOptionsPtrOutput)
}

// The legend display setup of the visual.
func (o TemplateTreeMapConfigurationOutput) Legend() TemplateLegendOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTreeMapConfiguration) *TemplateLegendOptions { return v.Legend }).(TemplateLegendOptionsPtrOutput)
}

// The label options (label text, label visibility) of the sizes that are displayed in a tree map.
func (o TemplateTreeMapConfigurationOutput) SizeLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTreeMapConfiguration) *TemplateChartAxisLabelOptions { return v.SizeLabelOptions }).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The sort configuration of a tree map.
func (o TemplateTreeMapConfigurationOutput) SortConfiguration() TemplateTreeMapSortConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateTreeMapConfiguration) *TemplateTreeMapSortConfiguration { return v.SortConfiguration }).(TemplateTreeMapSortConfigurationPtrOutput)
}

// The tooltip display setup of the visual.
func (o TemplateTreeMapConfigurationOutput) Tooltip() TemplateTooltipOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTreeMapConfiguration) *TemplateTooltipOptions { return v.Tooltip }).(TemplateTooltipOptionsPtrOutput)
}

type TemplateTreeMapConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateTreeMapConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTreeMapConfiguration)(nil)).Elem()
}

func (o TemplateTreeMapConfigurationPtrOutput) ToTemplateTreeMapConfigurationPtrOutput() TemplateTreeMapConfigurationPtrOutput {
	return o
}

func (o TemplateTreeMapConfigurationPtrOutput) ToTemplateTreeMapConfigurationPtrOutputWithContext(ctx context.Context) TemplateTreeMapConfigurationPtrOutput {
	return o
}

func (o TemplateTreeMapConfigurationPtrOutput) Elem() TemplateTreeMapConfigurationOutput {
	return o.ApplyT(func(v *TemplateTreeMapConfiguration) TemplateTreeMapConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateTreeMapConfiguration
		return ret
	}).(TemplateTreeMapConfigurationOutput)
}

// The label options (label text, label visibility) for the colors displayed in a tree map.
func (o TemplateTreeMapConfigurationPtrOutput) ColorLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTreeMapConfiguration) *TemplateChartAxisLabelOptions {
		if v == nil {
			return nil
		}
		return v.ColorLabelOptions
	}).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The color options (gradient color, point of divergence) of a tree map.
func (o TemplateTreeMapConfigurationPtrOutput) ColorScale() TemplateColorScalePtrOutput {
	return o.ApplyT(func(v *TemplateTreeMapConfiguration) *TemplateColorScale {
		if v == nil {
			return nil
		}
		return v.ColorScale
	}).(TemplateColorScalePtrOutput)
}

// The options that determine if visual data labels are displayed.
func (o TemplateTreeMapConfigurationPtrOutput) DataLabels() TemplateDataLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTreeMapConfiguration) *TemplateDataLabelOptions {
		if v == nil {
			return nil
		}
		return v.DataLabels
	}).(TemplateDataLabelOptionsPtrOutput)
}

// The field wells of the visual.
func (o TemplateTreeMapConfigurationPtrOutput) FieldWells() TemplateTreeMapFieldWellsPtrOutput {
	return o.ApplyT(func(v *TemplateTreeMapConfiguration) *TemplateTreeMapFieldWells {
		if v == nil {
			return nil
		}
		return v.FieldWells
	}).(TemplateTreeMapFieldWellsPtrOutput)
}

// The label options (label text, label visibility) of the groups that are displayed in a tree map.
func (o TemplateTreeMapConfigurationPtrOutput) GroupLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTreeMapConfiguration) *TemplateChartAxisLabelOptions {
		if v == nil {
			return nil
		}
		return v.GroupLabelOptions
	}).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The general visual interactions setup for a visual.
func (o TemplateTreeMapConfigurationPtrOutput) Interactions() TemplateVisualInteractionOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTreeMapConfiguration) *TemplateVisualInteractionOptions {
		if v == nil {
			return nil
		}
		return v.Interactions
	}).(TemplateVisualInteractionOptionsPtrOutput)
}

// The legend display setup of the visual.
func (o TemplateTreeMapConfigurationPtrOutput) Legend() TemplateLegendOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTreeMapConfiguration) *TemplateLegendOptions {
		if v == nil {
			return nil
		}
		return v.Legend
	}).(TemplateLegendOptionsPtrOutput)
}

// The label options (label text, label visibility) of the sizes that are displayed in a tree map.
func (o TemplateTreeMapConfigurationPtrOutput) SizeLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTreeMapConfiguration) *TemplateChartAxisLabelOptions {
		if v == nil {
			return nil
		}
		return v.SizeLabelOptions
	}).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The sort configuration of a tree map.
func (o TemplateTreeMapConfigurationPtrOutput) SortConfiguration() TemplateTreeMapSortConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateTreeMapConfiguration) *TemplateTreeMapSortConfiguration {
		if v == nil {
			return nil
		}
		return v.SortConfiguration
	}).(TemplateTreeMapSortConfigurationPtrOutput)
}

// The tooltip display setup of the visual.
func (o TemplateTreeMapConfigurationPtrOutput) Tooltip() TemplateTooltipOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTreeMapConfiguration) *TemplateTooltipOptions {
		if v == nil {
			return nil
		}
		return v.Tooltip
	}).(TemplateTooltipOptionsPtrOutput)
}

type TemplateTreeMapFieldWells struct {
	// The aggregated field wells of a tree map.
	TreeMapAggregatedFieldWells *TemplateTreeMapAggregatedFieldWells `pulumi:"treeMapAggregatedFieldWells"`
}

// TemplateTreeMapFieldWellsInput is an input type that accepts TemplateTreeMapFieldWellsArgs and TemplateTreeMapFieldWellsOutput values.
// You can construct a concrete instance of `TemplateTreeMapFieldWellsInput` via:
//
//	TemplateTreeMapFieldWellsArgs{...}
type TemplateTreeMapFieldWellsInput interface {
	pulumi.Input

	ToTemplateTreeMapFieldWellsOutput() TemplateTreeMapFieldWellsOutput
	ToTemplateTreeMapFieldWellsOutputWithContext(context.Context) TemplateTreeMapFieldWellsOutput
}

type TemplateTreeMapFieldWellsArgs struct {
	// The aggregated field wells of a tree map.
	TreeMapAggregatedFieldWells TemplateTreeMapAggregatedFieldWellsPtrInput `pulumi:"treeMapAggregatedFieldWells"`
}

func (TemplateTreeMapFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTreeMapFieldWells)(nil)).Elem()
}

func (i TemplateTreeMapFieldWellsArgs) ToTemplateTreeMapFieldWellsOutput() TemplateTreeMapFieldWellsOutput {
	return i.ToTemplateTreeMapFieldWellsOutputWithContext(context.Background())
}

func (i TemplateTreeMapFieldWellsArgs) ToTemplateTreeMapFieldWellsOutputWithContext(ctx context.Context) TemplateTreeMapFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTreeMapFieldWellsOutput)
}

func (i TemplateTreeMapFieldWellsArgs) ToTemplateTreeMapFieldWellsPtrOutput() TemplateTreeMapFieldWellsPtrOutput {
	return i.ToTemplateTreeMapFieldWellsPtrOutputWithContext(context.Background())
}

func (i TemplateTreeMapFieldWellsArgs) ToTemplateTreeMapFieldWellsPtrOutputWithContext(ctx context.Context) TemplateTreeMapFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTreeMapFieldWellsOutput).ToTemplateTreeMapFieldWellsPtrOutputWithContext(ctx)
}

// TemplateTreeMapFieldWellsPtrInput is an input type that accepts TemplateTreeMapFieldWellsArgs, TemplateTreeMapFieldWellsPtr and TemplateTreeMapFieldWellsPtrOutput values.
// You can construct a concrete instance of `TemplateTreeMapFieldWellsPtrInput` via:
//
//	        TemplateTreeMapFieldWellsArgs{...}
//
//	or:
//
//	        nil
type TemplateTreeMapFieldWellsPtrInput interface {
	pulumi.Input

	ToTemplateTreeMapFieldWellsPtrOutput() TemplateTreeMapFieldWellsPtrOutput
	ToTemplateTreeMapFieldWellsPtrOutputWithContext(context.Context) TemplateTreeMapFieldWellsPtrOutput
}

type templateTreeMapFieldWellsPtrType TemplateTreeMapFieldWellsArgs

func TemplateTreeMapFieldWellsPtr(v *TemplateTreeMapFieldWellsArgs) TemplateTreeMapFieldWellsPtrInput {
	return (*templateTreeMapFieldWellsPtrType)(v)
}

func (*templateTreeMapFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTreeMapFieldWells)(nil)).Elem()
}

func (i *templateTreeMapFieldWellsPtrType) ToTemplateTreeMapFieldWellsPtrOutput() TemplateTreeMapFieldWellsPtrOutput {
	return i.ToTemplateTreeMapFieldWellsPtrOutputWithContext(context.Background())
}

func (i *templateTreeMapFieldWellsPtrType) ToTemplateTreeMapFieldWellsPtrOutputWithContext(ctx context.Context) TemplateTreeMapFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTreeMapFieldWellsPtrOutput)
}

type TemplateTreeMapFieldWellsOutput struct{ *pulumi.OutputState }

func (TemplateTreeMapFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTreeMapFieldWells)(nil)).Elem()
}

func (o TemplateTreeMapFieldWellsOutput) ToTemplateTreeMapFieldWellsOutput() TemplateTreeMapFieldWellsOutput {
	return o
}

func (o TemplateTreeMapFieldWellsOutput) ToTemplateTreeMapFieldWellsOutputWithContext(ctx context.Context) TemplateTreeMapFieldWellsOutput {
	return o
}

func (o TemplateTreeMapFieldWellsOutput) ToTemplateTreeMapFieldWellsPtrOutput() TemplateTreeMapFieldWellsPtrOutput {
	return o.ToTemplateTreeMapFieldWellsPtrOutputWithContext(context.Background())
}

func (o TemplateTreeMapFieldWellsOutput) ToTemplateTreeMapFieldWellsPtrOutputWithContext(ctx context.Context) TemplateTreeMapFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTreeMapFieldWells) *TemplateTreeMapFieldWells {
		return &v
	}).(TemplateTreeMapFieldWellsPtrOutput)
}

// The aggregated field wells of a tree map.
func (o TemplateTreeMapFieldWellsOutput) TreeMapAggregatedFieldWells() TemplateTreeMapAggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v TemplateTreeMapFieldWells) *TemplateTreeMapAggregatedFieldWells {
		return v.TreeMapAggregatedFieldWells
	}).(TemplateTreeMapAggregatedFieldWellsPtrOutput)
}

type TemplateTreeMapFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (TemplateTreeMapFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTreeMapFieldWells)(nil)).Elem()
}

func (o TemplateTreeMapFieldWellsPtrOutput) ToTemplateTreeMapFieldWellsPtrOutput() TemplateTreeMapFieldWellsPtrOutput {
	return o
}

func (o TemplateTreeMapFieldWellsPtrOutput) ToTemplateTreeMapFieldWellsPtrOutputWithContext(ctx context.Context) TemplateTreeMapFieldWellsPtrOutput {
	return o
}

func (o TemplateTreeMapFieldWellsPtrOutput) Elem() TemplateTreeMapFieldWellsOutput {
	return o.ApplyT(func(v *TemplateTreeMapFieldWells) TemplateTreeMapFieldWells {
		if v != nil {
			return *v
		}
		var ret TemplateTreeMapFieldWells
		return ret
	}).(TemplateTreeMapFieldWellsOutput)
}

// The aggregated field wells of a tree map.
func (o TemplateTreeMapFieldWellsPtrOutput) TreeMapAggregatedFieldWells() TemplateTreeMapAggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v *TemplateTreeMapFieldWells) *TemplateTreeMapAggregatedFieldWells {
		if v == nil {
			return nil
		}
		return v.TreeMapAggregatedFieldWells
	}).(TemplateTreeMapAggregatedFieldWellsPtrOutput)
}

type TemplateTreeMapSortConfiguration struct {
	// The limit on the number of groups that are displayed.
	TreeMapGroupItemsLimitConfiguration *TemplateItemsLimitConfiguration `pulumi:"treeMapGroupItemsLimitConfiguration"`
	// The sort configuration of group by fields.
	TreeMapSort []TemplateFieldSortOptions `pulumi:"treeMapSort"`
}

// TemplateTreeMapSortConfigurationInput is an input type that accepts TemplateTreeMapSortConfigurationArgs and TemplateTreeMapSortConfigurationOutput values.
// You can construct a concrete instance of `TemplateTreeMapSortConfigurationInput` via:
//
//	TemplateTreeMapSortConfigurationArgs{...}
type TemplateTreeMapSortConfigurationInput interface {
	pulumi.Input

	ToTemplateTreeMapSortConfigurationOutput() TemplateTreeMapSortConfigurationOutput
	ToTemplateTreeMapSortConfigurationOutputWithContext(context.Context) TemplateTreeMapSortConfigurationOutput
}

type TemplateTreeMapSortConfigurationArgs struct {
	// The limit on the number of groups that are displayed.
	TreeMapGroupItemsLimitConfiguration TemplateItemsLimitConfigurationPtrInput `pulumi:"treeMapGroupItemsLimitConfiguration"`
	// The sort configuration of group by fields.
	TreeMapSort TemplateFieldSortOptionsArrayInput `pulumi:"treeMapSort"`
}

func (TemplateTreeMapSortConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTreeMapSortConfiguration)(nil)).Elem()
}

func (i TemplateTreeMapSortConfigurationArgs) ToTemplateTreeMapSortConfigurationOutput() TemplateTreeMapSortConfigurationOutput {
	return i.ToTemplateTreeMapSortConfigurationOutputWithContext(context.Background())
}

func (i TemplateTreeMapSortConfigurationArgs) ToTemplateTreeMapSortConfigurationOutputWithContext(ctx context.Context) TemplateTreeMapSortConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTreeMapSortConfigurationOutput)
}

func (i TemplateTreeMapSortConfigurationArgs) ToTemplateTreeMapSortConfigurationPtrOutput() TemplateTreeMapSortConfigurationPtrOutput {
	return i.ToTemplateTreeMapSortConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateTreeMapSortConfigurationArgs) ToTemplateTreeMapSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateTreeMapSortConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTreeMapSortConfigurationOutput).ToTemplateTreeMapSortConfigurationPtrOutputWithContext(ctx)
}

// TemplateTreeMapSortConfigurationPtrInput is an input type that accepts TemplateTreeMapSortConfigurationArgs, TemplateTreeMapSortConfigurationPtr and TemplateTreeMapSortConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateTreeMapSortConfigurationPtrInput` via:
//
//	        TemplateTreeMapSortConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateTreeMapSortConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateTreeMapSortConfigurationPtrOutput() TemplateTreeMapSortConfigurationPtrOutput
	ToTemplateTreeMapSortConfigurationPtrOutputWithContext(context.Context) TemplateTreeMapSortConfigurationPtrOutput
}

type templateTreeMapSortConfigurationPtrType TemplateTreeMapSortConfigurationArgs

func TemplateTreeMapSortConfigurationPtr(v *TemplateTreeMapSortConfigurationArgs) TemplateTreeMapSortConfigurationPtrInput {
	return (*templateTreeMapSortConfigurationPtrType)(v)
}

func (*templateTreeMapSortConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTreeMapSortConfiguration)(nil)).Elem()
}

func (i *templateTreeMapSortConfigurationPtrType) ToTemplateTreeMapSortConfigurationPtrOutput() TemplateTreeMapSortConfigurationPtrOutput {
	return i.ToTemplateTreeMapSortConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateTreeMapSortConfigurationPtrType) ToTemplateTreeMapSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateTreeMapSortConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTreeMapSortConfigurationPtrOutput)
}

type TemplateTreeMapSortConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateTreeMapSortConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTreeMapSortConfiguration)(nil)).Elem()
}

func (o TemplateTreeMapSortConfigurationOutput) ToTemplateTreeMapSortConfigurationOutput() TemplateTreeMapSortConfigurationOutput {
	return o
}

func (o TemplateTreeMapSortConfigurationOutput) ToTemplateTreeMapSortConfigurationOutputWithContext(ctx context.Context) TemplateTreeMapSortConfigurationOutput {
	return o
}

func (o TemplateTreeMapSortConfigurationOutput) ToTemplateTreeMapSortConfigurationPtrOutput() TemplateTreeMapSortConfigurationPtrOutput {
	return o.ToTemplateTreeMapSortConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateTreeMapSortConfigurationOutput) ToTemplateTreeMapSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateTreeMapSortConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTreeMapSortConfiguration) *TemplateTreeMapSortConfiguration {
		return &v
	}).(TemplateTreeMapSortConfigurationPtrOutput)
}

// The limit on the number of groups that are displayed.
func (o TemplateTreeMapSortConfigurationOutput) TreeMapGroupItemsLimitConfiguration() TemplateItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateTreeMapSortConfiguration) *TemplateItemsLimitConfiguration {
		return v.TreeMapGroupItemsLimitConfiguration
	}).(TemplateItemsLimitConfigurationPtrOutput)
}

// The sort configuration of group by fields.
func (o TemplateTreeMapSortConfigurationOutput) TreeMapSort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v TemplateTreeMapSortConfiguration) []TemplateFieldSortOptions { return v.TreeMapSort }).(TemplateFieldSortOptionsArrayOutput)
}

type TemplateTreeMapSortConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateTreeMapSortConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTreeMapSortConfiguration)(nil)).Elem()
}

func (o TemplateTreeMapSortConfigurationPtrOutput) ToTemplateTreeMapSortConfigurationPtrOutput() TemplateTreeMapSortConfigurationPtrOutput {
	return o
}

func (o TemplateTreeMapSortConfigurationPtrOutput) ToTemplateTreeMapSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateTreeMapSortConfigurationPtrOutput {
	return o
}

func (o TemplateTreeMapSortConfigurationPtrOutput) Elem() TemplateTreeMapSortConfigurationOutput {
	return o.ApplyT(func(v *TemplateTreeMapSortConfiguration) TemplateTreeMapSortConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateTreeMapSortConfiguration
		return ret
	}).(TemplateTreeMapSortConfigurationOutput)
}

// The limit on the number of groups that are displayed.
func (o TemplateTreeMapSortConfigurationPtrOutput) TreeMapGroupItemsLimitConfiguration() TemplateItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateTreeMapSortConfiguration) *TemplateItemsLimitConfiguration {
		if v == nil {
			return nil
		}
		return v.TreeMapGroupItemsLimitConfiguration
	}).(TemplateItemsLimitConfigurationPtrOutput)
}

// The sort configuration of group by fields.
func (o TemplateTreeMapSortConfigurationPtrOutput) TreeMapSort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v *TemplateTreeMapSortConfiguration) []TemplateFieldSortOptions {
		if v == nil {
			return nil
		}
		return v.TreeMapSort
	}).(TemplateFieldSortOptionsArrayOutput)
}

type TemplateTreeMapVisual struct {
	// The list of custom actions that are configured for a visual.
	Actions []TemplateVisualCustomAction `pulumi:"actions"`
	// The configuration settings of the visual.
	ChartConfiguration *TemplateTreeMapConfiguration `pulumi:"chartConfiguration"`
	// The column hierarchy that is used during drill-downs and drill-ups.
	ColumnHierarchies []TemplateColumnHierarchy `pulumi:"columnHierarchies"`
	// The subtitle that is displayed on the visual.
	Subtitle *TemplateVisualSubtitleLabelOptions `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title *TemplateVisualTitleLabelOptions `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText *string `pulumi:"visualContentAltText"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
	VisualId string `pulumi:"visualId"`
}

// TemplateTreeMapVisualInput is an input type that accepts TemplateTreeMapVisualArgs and TemplateTreeMapVisualOutput values.
// You can construct a concrete instance of `TemplateTreeMapVisualInput` via:
//
//	TemplateTreeMapVisualArgs{...}
type TemplateTreeMapVisualInput interface {
	pulumi.Input

	ToTemplateTreeMapVisualOutput() TemplateTreeMapVisualOutput
	ToTemplateTreeMapVisualOutputWithContext(context.Context) TemplateTreeMapVisualOutput
}

type TemplateTreeMapVisualArgs struct {
	// The list of custom actions that are configured for a visual.
	Actions TemplateVisualCustomActionArrayInput `pulumi:"actions"`
	// The configuration settings of the visual.
	ChartConfiguration TemplateTreeMapConfigurationPtrInput `pulumi:"chartConfiguration"`
	// The column hierarchy that is used during drill-downs and drill-ups.
	ColumnHierarchies TemplateColumnHierarchyArrayInput `pulumi:"columnHierarchies"`
	// The subtitle that is displayed on the visual.
	Subtitle TemplateVisualSubtitleLabelOptionsPtrInput `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title TemplateVisualTitleLabelOptionsPtrInput `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText pulumi.StringPtrInput `pulumi:"visualContentAltText"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
	VisualId pulumi.StringInput `pulumi:"visualId"`
}

func (TemplateTreeMapVisualArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTreeMapVisual)(nil)).Elem()
}

func (i TemplateTreeMapVisualArgs) ToTemplateTreeMapVisualOutput() TemplateTreeMapVisualOutput {
	return i.ToTemplateTreeMapVisualOutputWithContext(context.Background())
}

func (i TemplateTreeMapVisualArgs) ToTemplateTreeMapVisualOutputWithContext(ctx context.Context) TemplateTreeMapVisualOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTreeMapVisualOutput)
}

func (i TemplateTreeMapVisualArgs) ToTemplateTreeMapVisualPtrOutput() TemplateTreeMapVisualPtrOutput {
	return i.ToTemplateTreeMapVisualPtrOutputWithContext(context.Background())
}

func (i TemplateTreeMapVisualArgs) ToTemplateTreeMapVisualPtrOutputWithContext(ctx context.Context) TemplateTreeMapVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTreeMapVisualOutput).ToTemplateTreeMapVisualPtrOutputWithContext(ctx)
}

// TemplateTreeMapVisualPtrInput is an input type that accepts TemplateTreeMapVisualArgs, TemplateTreeMapVisualPtr and TemplateTreeMapVisualPtrOutput values.
// You can construct a concrete instance of `TemplateTreeMapVisualPtrInput` via:
//
//	        TemplateTreeMapVisualArgs{...}
//
//	or:
//
//	        nil
type TemplateTreeMapVisualPtrInput interface {
	pulumi.Input

	ToTemplateTreeMapVisualPtrOutput() TemplateTreeMapVisualPtrOutput
	ToTemplateTreeMapVisualPtrOutputWithContext(context.Context) TemplateTreeMapVisualPtrOutput
}

type templateTreeMapVisualPtrType TemplateTreeMapVisualArgs

func TemplateTreeMapVisualPtr(v *TemplateTreeMapVisualArgs) TemplateTreeMapVisualPtrInput {
	return (*templateTreeMapVisualPtrType)(v)
}

func (*templateTreeMapVisualPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTreeMapVisual)(nil)).Elem()
}

func (i *templateTreeMapVisualPtrType) ToTemplateTreeMapVisualPtrOutput() TemplateTreeMapVisualPtrOutput {
	return i.ToTemplateTreeMapVisualPtrOutputWithContext(context.Background())
}

func (i *templateTreeMapVisualPtrType) ToTemplateTreeMapVisualPtrOutputWithContext(ctx context.Context) TemplateTreeMapVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTreeMapVisualPtrOutput)
}

type TemplateTreeMapVisualOutput struct{ *pulumi.OutputState }

func (TemplateTreeMapVisualOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTreeMapVisual)(nil)).Elem()
}

func (o TemplateTreeMapVisualOutput) ToTemplateTreeMapVisualOutput() TemplateTreeMapVisualOutput {
	return o
}

func (o TemplateTreeMapVisualOutput) ToTemplateTreeMapVisualOutputWithContext(ctx context.Context) TemplateTreeMapVisualOutput {
	return o
}

func (o TemplateTreeMapVisualOutput) ToTemplateTreeMapVisualPtrOutput() TemplateTreeMapVisualPtrOutput {
	return o.ToTemplateTreeMapVisualPtrOutputWithContext(context.Background())
}

func (o TemplateTreeMapVisualOutput) ToTemplateTreeMapVisualPtrOutputWithContext(ctx context.Context) TemplateTreeMapVisualPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTreeMapVisual) *TemplateTreeMapVisual {
		return &v
	}).(TemplateTreeMapVisualPtrOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplateTreeMapVisualOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v TemplateTreeMapVisual) []TemplateVisualCustomAction { return v.Actions }).(TemplateVisualCustomActionArrayOutput)
}

// The configuration settings of the visual.
func (o TemplateTreeMapVisualOutput) ChartConfiguration() TemplateTreeMapConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateTreeMapVisual) *TemplateTreeMapConfiguration { return v.ChartConfiguration }).(TemplateTreeMapConfigurationPtrOutput)
}

// The column hierarchy that is used during drill-downs and drill-ups.
func (o TemplateTreeMapVisualOutput) ColumnHierarchies() TemplateColumnHierarchyArrayOutput {
	return o.ApplyT(func(v TemplateTreeMapVisual) []TemplateColumnHierarchy { return v.ColumnHierarchies }).(TemplateColumnHierarchyArrayOutput)
}

// The subtitle that is displayed on the visual.
func (o TemplateTreeMapVisualOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTreeMapVisual) *TemplateVisualSubtitleLabelOptions { return v.Subtitle }).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o TemplateTreeMapVisualOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTreeMapVisual) *TemplateVisualTitleLabelOptions { return v.Title }).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o TemplateTreeMapVisualOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateTreeMapVisual) *string { return v.VisualContentAltText }).(pulumi.StringPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
func (o TemplateTreeMapVisualOutput) VisualId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateTreeMapVisual) string { return v.VisualId }).(pulumi.StringOutput)
}

type TemplateTreeMapVisualPtrOutput struct{ *pulumi.OutputState }

func (TemplateTreeMapVisualPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTreeMapVisual)(nil)).Elem()
}

func (o TemplateTreeMapVisualPtrOutput) ToTemplateTreeMapVisualPtrOutput() TemplateTreeMapVisualPtrOutput {
	return o
}

func (o TemplateTreeMapVisualPtrOutput) ToTemplateTreeMapVisualPtrOutputWithContext(ctx context.Context) TemplateTreeMapVisualPtrOutput {
	return o
}

func (o TemplateTreeMapVisualPtrOutput) Elem() TemplateTreeMapVisualOutput {
	return o.ApplyT(func(v *TemplateTreeMapVisual) TemplateTreeMapVisual {
		if v != nil {
			return *v
		}
		var ret TemplateTreeMapVisual
		return ret
	}).(TemplateTreeMapVisualOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplateTreeMapVisualPtrOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v *TemplateTreeMapVisual) []TemplateVisualCustomAction {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(TemplateVisualCustomActionArrayOutput)
}

// The configuration settings of the visual.
func (o TemplateTreeMapVisualPtrOutput) ChartConfiguration() TemplateTreeMapConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateTreeMapVisual) *TemplateTreeMapConfiguration {
		if v == nil {
			return nil
		}
		return v.ChartConfiguration
	}).(TemplateTreeMapConfigurationPtrOutput)
}

// The column hierarchy that is used during drill-downs and drill-ups.
func (o TemplateTreeMapVisualPtrOutput) ColumnHierarchies() TemplateColumnHierarchyArrayOutput {
	return o.ApplyT(func(v *TemplateTreeMapVisual) []TemplateColumnHierarchy {
		if v == nil {
			return nil
		}
		return v.ColumnHierarchies
	}).(TemplateColumnHierarchyArrayOutput)
}

// The subtitle that is displayed on the visual.
func (o TemplateTreeMapVisualPtrOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTreeMapVisual) *TemplateVisualSubtitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Subtitle
	}).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o TemplateTreeMapVisualPtrOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTreeMapVisual) *TemplateVisualTitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Title
	}).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o TemplateTreeMapVisualPtrOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateTreeMapVisual) *string {
		if v == nil {
			return nil
		}
		return v.VisualContentAltText
	}).(pulumi.StringPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
func (o TemplateTreeMapVisualPtrOutput) VisualId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateTreeMapVisual) *string {
		if v == nil {
			return nil
		}
		return &v.VisualId
	}).(pulumi.StringPtrOutput)
}

type TemplateTrendArrowOptions struct {
	// The visibility of the trend arrows.
	Visibility interface{} `pulumi:"visibility"`
}

// TemplateTrendArrowOptionsInput is an input type that accepts TemplateTrendArrowOptionsArgs and TemplateTrendArrowOptionsOutput values.
// You can construct a concrete instance of `TemplateTrendArrowOptionsInput` via:
//
//	TemplateTrendArrowOptionsArgs{...}
type TemplateTrendArrowOptionsInput interface {
	pulumi.Input

	ToTemplateTrendArrowOptionsOutput() TemplateTrendArrowOptionsOutput
	ToTemplateTrendArrowOptionsOutputWithContext(context.Context) TemplateTrendArrowOptionsOutput
}

type TemplateTrendArrowOptionsArgs struct {
	// The visibility of the trend arrows.
	Visibility pulumi.Input `pulumi:"visibility"`
}

func (TemplateTrendArrowOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTrendArrowOptions)(nil)).Elem()
}

func (i TemplateTrendArrowOptionsArgs) ToTemplateTrendArrowOptionsOutput() TemplateTrendArrowOptionsOutput {
	return i.ToTemplateTrendArrowOptionsOutputWithContext(context.Background())
}

func (i TemplateTrendArrowOptionsArgs) ToTemplateTrendArrowOptionsOutputWithContext(ctx context.Context) TemplateTrendArrowOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTrendArrowOptionsOutput)
}

func (i TemplateTrendArrowOptionsArgs) ToTemplateTrendArrowOptionsPtrOutput() TemplateTrendArrowOptionsPtrOutput {
	return i.ToTemplateTrendArrowOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateTrendArrowOptionsArgs) ToTemplateTrendArrowOptionsPtrOutputWithContext(ctx context.Context) TemplateTrendArrowOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTrendArrowOptionsOutput).ToTemplateTrendArrowOptionsPtrOutputWithContext(ctx)
}

// TemplateTrendArrowOptionsPtrInput is an input type that accepts TemplateTrendArrowOptionsArgs, TemplateTrendArrowOptionsPtr and TemplateTrendArrowOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateTrendArrowOptionsPtrInput` via:
//
//	        TemplateTrendArrowOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateTrendArrowOptionsPtrInput interface {
	pulumi.Input

	ToTemplateTrendArrowOptionsPtrOutput() TemplateTrendArrowOptionsPtrOutput
	ToTemplateTrendArrowOptionsPtrOutputWithContext(context.Context) TemplateTrendArrowOptionsPtrOutput
}

type templateTrendArrowOptionsPtrType TemplateTrendArrowOptionsArgs

func TemplateTrendArrowOptionsPtr(v *TemplateTrendArrowOptionsArgs) TemplateTrendArrowOptionsPtrInput {
	return (*templateTrendArrowOptionsPtrType)(v)
}

func (*templateTrendArrowOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTrendArrowOptions)(nil)).Elem()
}

func (i *templateTrendArrowOptionsPtrType) ToTemplateTrendArrowOptionsPtrOutput() TemplateTrendArrowOptionsPtrOutput {
	return i.ToTemplateTrendArrowOptionsPtrOutputWithContext(context.Background())
}

func (i *templateTrendArrowOptionsPtrType) ToTemplateTrendArrowOptionsPtrOutputWithContext(ctx context.Context) TemplateTrendArrowOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTrendArrowOptionsPtrOutput)
}

type TemplateTrendArrowOptionsOutput struct{ *pulumi.OutputState }

func (TemplateTrendArrowOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTrendArrowOptions)(nil)).Elem()
}

func (o TemplateTrendArrowOptionsOutput) ToTemplateTrendArrowOptionsOutput() TemplateTrendArrowOptionsOutput {
	return o
}

func (o TemplateTrendArrowOptionsOutput) ToTemplateTrendArrowOptionsOutputWithContext(ctx context.Context) TemplateTrendArrowOptionsOutput {
	return o
}

func (o TemplateTrendArrowOptionsOutput) ToTemplateTrendArrowOptionsPtrOutput() TemplateTrendArrowOptionsPtrOutput {
	return o.ToTemplateTrendArrowOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateTrendArrowOptionsOutput) ToTemplateTrendArrowOptionsPtrOutputWithContext(ctx context.Context) TemplateTrendArrowOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTrendArrowOptions) *TemplateTrendArrowOptions {
		return &v
	}).(TemplateTrendArrowOptionsPtrOutput)
}

// The visibility of the trend arrows.
func (o TemplateTrendArrowOptionsOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateTrendArrowOptions) interface{} { return v.Visibility }).(pulumi.AnyOutput)
}

type TemplateTrendArrowOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateTrendArrowOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTrendArrowOptions)(nil)).Elem()
}

func (o TemplateTrendArrowOptionsPtrOutput) ToTemplateTrendArrowOptionsPtrOutput() TemplateTrendArrowOptionsPtrOutput {
	return o
}

func (o TemplateTrendArrowOptionsPtrOutput) ToTemplateTrendArrowOptionsPtrOutputWithContext(ctx context.Context) TemplateTrendArrowOptionsPtrOutput {
	return o
}

func (o TemplateTrendArrowOptionsPtrOutput) Elem() TemplateTrendArrowOptionsOutput {
	return o.ApplyT(func(v *TemplateTrendArrowOptions) TemplateTrendArrowOptions {
		if v != nil {
			return *v
		}
		var ret TemplateTrendArrowOptions
		return ret
	}).(TemplateTrendArrowOptionsOutput)
}

// The visibility of the trend arrows.
func (o TemplateTrendArrowOptionsPtrOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateTrendArrowOptions) interface{} {
		if v == nil {
			return nil
		}
		return v.Visibility
	}).(pulumi.AnyOutput)
}

type TemplateUnaggregatedField struct {
	// The column that is used in the `UnaggregatedField` .
	Column TemplateColumnIdentifier `pulumi:"column"`
	// The custom field ID.
	FieldId string `pulumi:"fieldId"`
	// The format configuration of the field.
	FormatConfiguration *TemplateFormatConfiguration `pulumi:"formatConfiguration"`
}

// TemplateUnaggregatedFieldInput is an input type that accepts TemplateUnaggregatedFieldArgs and TemplateUnaggregatedFieldOutput values.
// You can construct a concrete instance of `TemplateUnaggregatedFieldInput` via:
//
//	TemplateUnaggregatedFieldArgs{...}
type TemplateUnaggregatedFieldInput interface {
	pulumi.Input

	ToTemplateUnaggregatedFieldOutput() TemplateUnaggregatedFieldOutput
	ToTemplateUnaggregatedFieldOutputWithContext(context.Context) TemplateUnaggregatedFieldOutput
}

type TemplateUnaggregatedFieldArgs struct {
	// The column that is used in the `UnaggregatedField` .
	Column TemplateColumnIdentifierInput `pulumi:"column"`
	// The custom field ID.
	FieldId pulumi.StringInput `pulumi:"fieldId"`
	// The format configuration of the field.
	FormatConfiguration TemplateFormatConfigurationPtrInput `pulumi:"formatConfiguration"`
}

func (TemplateUnaggregatedFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateUnaggregatedField)(nil)).Elem()
}

func (i TemplateUnaggregatedFieldArgs) ToTemplateUnaggregatedFieldOutput() TemplateUnaggregatedFieldOutput {
	return i.ToTemplateUnaggregatedFieldOutputWithContext(context.Background())
}

func (i TemplateUnaggregatedFieldArgs) ToTemplateUnaggregatedFieldOutputWithContext(ctx context.Context) TemplateUnaggregatedFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateUnaggregatedFieldOutput)
}

// TemplateUnaggregatedFieldArrayInput is an input type that accepts TemplateUnaggregatedFieldArray and TemplateUnaggregatedFieldArrayOutput values.
// You can construct a concrete instance of `TemplateUnaggregatedFieldArrayInput` via:
//
//	TemplateUnaggregatedFieldArray{ TemplateUnaggregatedFieldArgs{...} }
type TemplateUnaggregatedFieldArrayInput interface {
	pulumi.Input

	ToTemplateUnaggregatedFieldArrayOutput() TemplateUnaggregatedFieldArrayOutput
	ToTemplateUnaggregatedFieldArrayOutputWithContext(context.Context) TemplateUnaggregatedFieldArrayOutput
}

type TemplateUnaggregatedFieldArray []TemplateUnaggregatedFieldInput

func (TemplateUnaggregatedFieldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateUnaggregatedField)(nil)).Elem()
}

func (i TemplateUnaggregatedFieldArray) ToTemplateUnaggregatedFieldArrayOutput() TemplateUnaggregatedFieldArrayOutput {
	return i.ToTemplateUnaggregatedFieldArrayOutputWithContext(context.Background())
}

func (i TemplateUnaggregatedFieldArray) ToTemplateUnaggregatedFieldArrayOutputWithContext(ctx context.Context) TemplateUnaggregatedFieldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateUnaggregatedFieldArrayOutput)
}

type TemplateUnaggregatedFieldOutput struct{ *pulumi.OutputState }

func (TemplateUnaggregatedFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateUnaggregatedField)(nil)).Elem()
}

func (o TemplateUnaggregatedFieldOutput) ToTemplateUnaggregatedFieldOutput() TemplateUnaggregatedFieldOutput {
	return o
}

func (o TemplateUnaggregatedFieldOutput) ToTemplateUnaggregatedFieldOutputWithContext(ctx context.Context) TemplateUnaggregatedFieldOutput {
	return o
}

// The column that is used in the `UnaggregatedField` .
func (o TemplateUnaggregatedFieldOutput) Column() TemplateColumnIdentifierOutput {
	return o.ApplyT(func(v TemplateUnaggregatedField) TemplateColumnIdentifier { return v.Column }).(TemplateColumnIdentifierOutput)
}

// The custom field ID.
func (o TemplateUnaggregatedFieldOutput) FieldId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateUnaggregatedField) string { return v.FieldId }).(pulumi.StringOutput)
}

// The format configuration of the field.
func (o TemplateUnaggregatedFieldOutput) FormatConfiguration() TemplateFormatConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateUnaggregatedField) *TemplateFormatConfiguration { return v.FormatConfiguration }).(TemplateFormatConfigurationPtrOutput)
}

type TemplateUnaggregatedFieldArrayOutput struct{ *pulumi.OutputState }

func (TemplateUnaggregatedFieldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateUnaggregatedField)(nil)).Elem()
}

func (o TemplateUnaggregatedFieldArrayOutput) ToTemplateUnaggregatedFieldArrayOutput() TemplateUnaggregatedFieldArrayOutput {
	return o
}

func (o TemplateUnaggregatedFieldArrayOutput) ToTemplateUnaggregatedFieldArrayOutputWithContext(ctx context.Context) TemplateUnaggregatedFieldArrayOutput {
	return o
}

func (o TemplateUnaggregatedFieldArrayOutput) Index(i pulumi.IntInput) TemplateUnaggregatedFieldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateUnaggregatedField {
		return vs[0].([]TemplateUnaggregatedField)[vs[1].(int)]
	}).(TemplateUnaggregatedFieldOutput)
}

type TemplateUniqueValuesComputation struct {
	// The category field that is used in a computation.
	Category *TemplateDimensionField `pulumi:"category"`
	// The ID for a computation.
	ComputationId string `pulumi:"computationId"`
	// The name of a computation.
	Name *string `pulumi:"name"`
}

// TemplateUniqueValuesComputationInput is an input type that accepts TemplateUniqueValuesComputationArgs and TemplateUniqueValuesComputationOutput values.
// You can construct a concrete instance of `TemplateUniqueValuesComputationInput` via:
//
//	TemplateUniqueValuesComputationArgs{...}
type TemplateUniqueValuesComputationInput interface {
	pulumi.Input

	ToTemplateUniqueValuesComputationOutput() TemplateUniqueValuesComputationOutput
	ToTemplateUniqueValuesComputationOutputWithContext(context.Context) TemplateUniqueValuesComputationOutput
}

type TemplateUniqueValuesComputationArgs struct {
	// The category field that is used in a computation.
	Category TemplateDimensionFieldPtrInput `pulumi:"category"`
	// The ID for a computation.
	ComputationId pulumi.StringInput `pulumi:"computationId"`
	// The name of a computation.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (TemplateUniqueValuesComputationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateUniqueValuesComputation)(nil)).Elem()
}

func (i TemplateUniqueValuesComputationArgs) ToTemplateUniqueValuesComputationOutput() TemplateUniqueValuesComputationOutput {
	return i.ToTemplateUniqueValuesComputationOutputWithContext(context.Background())
}

func (i TemplateUniqueValuesComputationArgs) ToTemplateUniqueValuesComputationOutputWithContext(ctx context.Context) TemplateUniqueValuesComputationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateUniqueValuesComputationOutput)
}

func (i TemplateUniqueValuesComputationArgs) ToTemplateUniqueValuesComputationPtrOutput() TemplateUniqueValuesComputationPtrOutput {
	return i.ToTemplateUniqueValuesComputationPtrOutputWithContext(context.Background())
}

func (i TemplateUniqueValuesComputationArgs) ToTemplateUniqueValuesComputationPtrOutputWithContext(ctx context.Context) TemplateUniqueValuesComputationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateUniqueValuesComputationOutput).ToTemplateUniqueValuesComputationPtrOutputWithContext(ctx)
}

// TemplateUniqueValuesComputationPtrInput is an input type that accepts TemplateUniqueValuesComputationArgs, TemplateUniqueValuesComputationPtr and TemplateUniqueValuesComputationPtrOutput values.
// You can construct a concrete instance of `TemplateUniqueValuesComputationPtrInput` via:
//
//	        TemplateUniqueValuesComputationArgs{...}
//
//	or:
//
//	        nil
type TemplateUniqueValuesComputationPtrInput interface {
	pulumi.Input

	ToTemplateUniqueValuesComputationPtrOutput() TemplateUniqueValuesComputationPtrOutput
	ToTemplateUniqueValuesComputationPtrOutputWithContext(context.Context) TemplateUniqueValuesComputationPtrOutput
}

type templateUniqueValuesComputationPtrType TemplateUniqueValuesComputationArgs

func TemplateUniqueValuesComputationPtr(v *TemplateUniqueValuesComputationArgs) TemplateUniqueValuesComputationPtrInput {
	return (*templateUniqueValuesComputationPtrType)(v)
}

func (*templateUniqueValuesComputationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateUniqueValuesComputation)(nil)).Elem()
}

func (i *templateUniqueValuesComputationPtrType) ToTemplateUniqueValuesComputationPtrOutput() TemplateUniqueValuesComputationPtrOutput {
	return i.ToTemplateUniqueValuesComputationPtrOutputWithContext(context.Background())
}

func (i *templateUniqueValuesComputationPtrType) ToTemplateUniqueValuesComputationPtrOutputWithContext(ctx context.Context) TemplateUniqueValuesComputationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateUniqueValuesComputationPtrOutput)
}

type TemplateUniqueValuesComputationOutput struct{ *pulumi.OutputState }

func (TemplateUniqueValuesComputationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateUniqueValuesComputation)(nil)).Elem()
}

func (o TemplateUniqueValuesComputationOutput) ToTemplateUniqueValuesComputationOutput() TemplateUniqueValuesComputationOutput {
	return o
}

func (o TemplateUniqueValuesComputationOutput) ToTemplateUniqueValuesComputationOutputWithContext(ctx context.Context) TemplateUniqueValuesComputationOutput {
	return o
}

func (o TemplateUniqueValuesComputationOutput) ToTemplateUniqueValuesComputationPtrOutput() TemplateUniqueValuesComputationPtrOutput {
	return o.ToTemplateUniqueValuesComputationPtrOutputWithContext(context.Background())
}

func (o TemplateUniqueValuesComputationOutput) ToTemplateUniqueValuesComputationPtrOutputWithContext(ctx context.Context) TemplateUniqueValuesComputationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateUniqueValuesComputation) *TemplateUniqueValuesComputation {
		return &v
	}).(TemplateUniqueValuesComputationPtrOutput)
}

// The category field that is used in a computation.
func (o TemplateUniqueValuesComputationOutput) Category() TemplateDimensionFieldPtrOutput {
	return o.ApplyT(func(v TemplateUniqueValuesComputation) *TemplateDimensionField { return v.Category }).(TemplateDimensionFieldPtrOutput)
}

// The ID for a computation.
func (o TemplateUniqueValuesComputationOutput) ComputationId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateUniqueValuesComputation) string { return v.ComputationId }).(pulumi.StringOutput)
}

// The name of a computation.
func (o TemplateUniqueValuesComputationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateUniqueValuesComputation) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type TemplateUniqueValuesComputationPtrOutput struct{ *pulumi.OutputState }

func (TemplateUniqueValuesComputationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateUniqueValuesComputation)(nil)).Elem()
}

func (o TemplateUniqueValuesComputationPtrOutput) ToTemplateUniqueValuesComputationPtrOutput() TemplateUniqueValuesComputationPtrOutput {
	return o
}

func (o TemplateUniqueValuesComputationPtrOutput) ToTemplateUniqueValuesComputationPtrOutputWithContext(ctx context.Context) TemplateUniqueValuesComputationPtrOutput {
	return o
}

func (o TemplateUniqueValuesComputationPtrOutput) Elem() TemplateUniqueValuesComputationOutput {
	return o.ApplyT(func(v *TemplateUniqueValuesComputation) TemplateUniqueValuesComputation {
		if v != nil {
			return *v
		}
		var ret TemplateUniqueValuesComputation
		return ret
	}).(TemplateUniqueValuesComputationOutput)
}

// The category field that is used in a computation.
func (o TemplateUniqueValuesComputationPtrOutput) Category() TemplateDimensionFieldPtrOutput {
	return o.ApplyT(func(v *TemplateUniqueValuesComputation) *TemplateDimensionField {
		if v == nil {
			return nil
		}
		return v.Category
	}).(TemplateDimensionFieldPtrOutput)
}

// The ID for a computation.
func (o TemplateUniqueValuesComputationPtrOutput) ComputationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateUniqueValuesComputation) *string {
		if v == nil {
			return nil
		}
		return &v.ComputationId
	}).(pulumi.StringPtrOutput)
}

// The name of a computation.
func (o TemplateUniqueValuesComputationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateUniqueValuesComputation) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// <p>The option to relax the validation that is required to create and update analyses, dashboards, and templates with definition objects. When you set this value to <code>LENIENT</code>, validation is skipped for specific errors.</p>
type TemplateValidationStrategy struct {
	// The mode of validation for the asset to be created or updated. When you set this value to `STRICT` , strict validation for every error is enforced. When you set this value to `LENIENT` , validation is skipped for specific UI errors.
	Mode TemplateValidationStrategyMode `pulumi:"mode"`
}

// TemplateValidationStrategyInput is an input type that accepts TemplateValidationStrategyArgs and TemplateValidationStrategyOutput values.
// You can construct a concrete instance of `TemplateValidationStrategyInput` via:
//
//	TemplateValidationStrategyArgs{...}
type TemplateValidationStrategyInput interface {
	pulumi.Input

	ToTemplateValidationStrategyOutput() TemplateValidationStrategyOutput
	ToTemplateValidationStrategyOutputWithContext(context.Context) TemplateValidationStrategyOutput
}

// <p>The option to relax the validation that is required to create and update analyses, dashboards, and templates with definition objects. When you set this value to <code>LENIENT</code>, validation is skipped for specific errors.</p>
type TemplateValidationStrategyArgs struct {
	// The mode of validation for the asset to be created or updated. When you set this value to `STRICT` , strict validation for every error is enforced. When you set this value to `LENIENT` , validation is skipped for specific UI errors.
	Mode TemplateValidationStrategyModeInput `pulumi:"mode"`
}

func (TemplateValidationStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateValidationStrategy)(nil)).Elem()
}

func (i TemplateValidationStrategyArgs) ToTemplateValidationStrategyOutput() TemplateValidationStrategyOutput {
	return i.ToTemplateValidationStrategyOutputWithContext(context.Background())
}

func (i TemplateValidationStrategyArgs) ToTemplateValidationStrategyOutputWithContext(ctx context.Context) TemplateValidationStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateValidationStrategyOutput)
}

func (i TemplateValidationStrategyArgs) ToTemplateValidationStrategyPtrOutput() TemplateValidationStrategyPtrOutput {
	return i.ToTemplateValidationStrategyPtrOutputWithContext(context.Background())
}

func (i TemplateValidationStrategyArgs) ToTemplateValidationStrategyPtrOutputWithContext(ctx context.Context) TemplateValidationStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateValidationStrategyOutput).ToTemplateValidationStrategyPtrOutputWithContext(ctx)
}

// TemplateValidationStrategyPtrInput is an input type that accepts TemplateValidationStrategyArgs, TemplateValidationStrategyPtr and TemplateValidationStrategyPtrOutput values.
// You can construct a concrete instance of `TemplateValidationStrategyPtrInput` via:
//
//	        TemplateValidationStrategyArgs{...}
//
//	or:
//
//	        nil
type TemplateValidationStrategyPtrInput interface {
	pulumi.Input

	ToTemplateValidationStrategyPtrOutput() TemplateValidationStrategyPtrOutput
	ToTemplateValidationStrategyPtrOutputWithContext(context.Context) TemplateValidationStrategyPtrOutput
}

type templateValidationStrategyPtrType TemplateValidationStrategyArgs

func TemplateValidationStrategyPtr(v *TemplateValidationStrategyArgs) TemplateValidationStrategyPtrInput {
	return (*templateValidationStrategyPtrType)(v)
}

func (*templateValidationStrategyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateValidationStrategy)(nil)).Elem()
}

func (i *templateValidationStrategyPtrType) ToTemplateValidationStrategyPtrOutput() TemplateValidationStrategyPtrOutput {
	return i.ToTemplateValidationStrategyPtrOutputWithContext(context.Background())
}

func (i *templateValidationStrategyPtrType) ToTemplateValidationStrategyPtrOutputWithContext(ctx context.Context) TemplateValidationStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateValidationStrategyPtrOutput)
}

// <p>The option to relax the validation that is required to create and update analyses, dashboards, and templates with definition objects. When you set this value to <code>LENIENT</code>, validation is skipped for specific errors.</p>
type TemplateValidationStrategyOutput struct{ *pulumi.OutputState }

func (TemplateValidationStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateValidationStrategy)(nil)).Elem()
}

func (o TemplateValidationStrategyOutput) ToTemplateValidationStrategyOutput() TemplateValidationStrategyOutput {
	return o
}

func (o TemplateValidationStrategyOutput) ToTemplateValidationStrategyOutputWithContext(ctx context.Context) TemplateValidationStrategyOutput {
	return o
}

func (o TemplateValidationStrategyOutput) ToTemplateValidationStrategyPtrOutput() TemplateValidationStrategyPtrOutput {
	return o.ToTemplateValidationStrategyPtrOutputWithContext(context.Background())
}

func (o TemplateValidationStrategyOutput) ToTemplateValidationStrategyPtrOutputWithContext(ctx context.Context) TemplateValidationStrategyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateValidationStrategy) *TemplateValidationStrategy {
		return &v
	}).(TemplateValidationStrategyPtrOutput)
}

// The mode of validation for the asset to be created or updated. When you set this value to `STRICT` , strict validation for every error is enforced. When you set this value to `LENIENT` , validation is skipped for specific UI errors.
func (o TemplateValidationStrategyOutput) Mode() TemplateValidationStrategyModeOutput {
	return o.ApplyT(func(v TemplateValidationStrategy) TemplateValidationStrategyMode { return v.Mode }).(TemplateValidationStrategyModeOutput)
}

type TemplateValidationStrategyPtrOutput struct{ *pulumi.OutputState }

func (TemplateValidationStrategyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateValidationStrategy)(nil)).Elem()
}

func (o TemplateValidationStrategyPtrOutput) ToTemplateValidationStrategyPtrOutput() TemplateValidationStrategyPtrOutput {
	return o
}

func (o TemplateValidationStrategyPtrOutput) ToTemplateValidationStrategyPtrOutputWithContext(ctx context.Context) TemplateValidationStrategyPtrOutput {
	return o
}

func (o TemplateValidationStrategyPtrOutput) Elem() TemplateValidationStrategyOutput {
	return o.ApplyT(func(v *TemplateValidationStrategy) TemplateValidationStrategy {
		if v != nil {
			return *v
		}
		var ret TemplateValidationStrategy
		return ret
	}).(TemplateValidationStrategyOutput)
}

// The mode of validation for the asset to be created or updated. When you set this value to `STRICT` , strict validation for every error is enforced. When you set this value to `LENIENT` , validation is skipped for specific UI errors.
func (o TemplateValidationStrategyPtrOutput) Mode() TemplateValidationStrategyModePtrOutput {
	return o.ApplyT(func(v *TemplateValidationStrategy) *TemplateValidationStrategyMode {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(TemplateValidationStrategyModePtrOutput)
}

// <p>A version of a template.</p>
type TemplateVersion struct {
	// <p>The time that this template version was created.</p>
	CreatedTime *string `pulumi:"createdTime"`
	// <p>Schema of the dataset identified by the placeholder. Any dashboard created from this
	//             template should be bound to new datasets matching the same schema described through this
	//             API operation.</p>
	DataSetConfigurations []TemplateDataSetConfiguration `pulumi:"dataSetConfigurations"`
	// <p>The description of the template.</p>
	Description *string `pulumi:"description"`
	// <p>Errors associated with this template version.</p>
	Errors []TemplateError `pulumi:"errors"`
	// <p>A list of the associated sheets with the unique identifier and name of each sheet.</p>
	Sheets []TemplateSheet `pulumi:"sheets"`
	// <p>The Amazon Resource Name (ARN) of an analysis or template that was used to create this
	//             template.</p>
	SourceEntityArn *string `pulumi:"sourceEntityArn"`
	// The status that is associated with the template.
	//
	// - `CREATION_IN_PROGRESS`
	// - `CREATION_SUCCESSFUL`
	// - `CREATION_FAILED`
	// - `UPDATE_IN_PROGRESS`
	// - `UPDATE_SUCCESSFUL`
	// - `UPDATE_FAILED`
	// - `DELETED`
	Status *TemplateResourceStatus `pulumi:"status"`
	// <p>The ARN of the theme associated with this version of the template.</p>
	ThemeArn *string `pulumi:"themeArn"`
	// <p>The version number of the template version.</p>
	VersionNumber *float64 `pulumi:"versionNumber"`
}

// <p>A version of a template.</p>
type TemplateVersionOutput struct{ *pulumi.OutputState }

func (TemplateVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateVersion)(nil)).Elem()
}

func (o TemplateVersionOutput) ToTemplateVersionOutput() TemplateVersionOutput {
	return o
}

func (o TemplateVersionOutput) ToTemplateVersionOutputWithContext(ctx context.Context) TemplateVersionOutput {
	return o
}

// <p>The time that this template version was created.</p>
func (o TemplateVersionOutput) CreatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateVersion) *string { return v.CreatedTime }).(pulumi.StringPtrOutput)
}

// <p>Schema of the dataset identified by the placeholder. Any dashboard created from this
//
//	template should be bound to new datasets matching the same schema described through this
//	API operation.</p>
func (o TemplateVersionOutput) DataSetConfigurations() TemplateDataSetConfigurationArrayOutput {
	return o.ApplyT(func(v TemplateVersion) []TemplateDataSetConfiguration { return v.DataSetConfigurations }).(TemplateDataSetConfigurationArrayOutput)
}

// <p>The description of the template.</p>
func (o TemplateVersionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateVersion) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// <p>Errors associated with this template version.</p>
func (o TemplateVersionOutput) Errors() TemplateErrorArrayOutput {
	return o.ApplyT(func(v TemplateVersion) []TemplateError { return v.Errors }).(TemplateErrorArrayOutput)
}

// <p>A list of the associated sheets with the unique identifier and name of each sheet.</p>
func (o TemplateVersionOutput) Sheets() TemplateSheetArrayOutput {
	return o.ApplyT(func(v TemplateVersion) []TemplateSheet { return v.Sheets }).(TemplateSheetArrayOutput)
}

// <p>The Amazon Resource Name (ARN) of an analysis or template that was used to create this
//
//	template.</p>
func (o TemplateVersionOutput) SourceEntityArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateVersion) *string { return v.SourceEntityArn }).(pulumi.StringPtrOutput)
}

// The status that is associated with the template.
//
// - `CREATION_IN_PROGRESS`
// - `CREATION_SUCCESSFUL`
// - `CREATION_FAILED`
// - `UPDATE_IN_PROGRESS`
// - `UPDATE_SUCCESSFUL`
// - `UPDATE_FAILED`
// - `DELETED`
func (o TemplateVersionOutput) Status() TemplateResourceStatusPtrOutput {
	return o.ApplyT(func(v TemplateVersion) *TemplateResourceStatus { return v.Status }).(TemplateResourceStatusPtrOutput)
}

// <p>The ARN of the theme associated with this version of the template.</p>
func (o TemplateVersionOutput) ThemeArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateVersion) *string { return v.ThemeArn }).(pulumi.StringPtrOutput)
}

// <p>The version number of the template version.</p>
func (o TemplateVersionOutput) VersionNumber() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateVersion) *float64 { return v.VersionNumber }).(pulumi.Float64PtrOutput)
}

type TemplateVersionPtrOutput struct{ *pulumi.OutputState }

func (TemplateVersionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateVersion)(nil)).Elem()
}

func (o TemplateVersionPtrOutput) ToTemplateVersionPtrOutput() TemplateVersionPtrOutput {
	return o
}

func (o TemplateVersionPtrOutput) ToTemplateVersionPtrOutputWithContext(ctx context.Context) TemplateVersionPtrOutput {
	return o
}

func (o TemplateVersionPtrOutput) Elem() TemplateVersionOutput {
	return o.ApplyT(func(v *TemplateVersion) TemplateVersion {
		if v != nil {
			return *v
		}
		var ret TemplateVersion
		return ret
	}).(TemplateVersionOutput)
}

// <p>The time that this template version was created.</p>
func (o TemplateVersionPtrOutput) CreatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateVersion) *string {
		if v == nil {
			return nil
		}
		return v.CreatedTime
	}).(pulumi.StringPtrOutput)
}

// <p>Schema of the dataset identified by the placeholder. Any dashboard created from this
//
//	template should be bound to new datasets matching the same schema described through this
//	API operation.</p>
func (o TemplateVersionPtrOutput) DataSetConfigurations() TemplateDataSetConfigurationArrayOutput {
	return o.ApplyT(func(v *TemplateVersion) []TemplateDataSetConfiguration {
		if v == nil {
			return nil
		}
		return v.DataSetConfigurations
	}).(TemplateDataSetConfigurationArrayOutput)
}

// <p>The description of the template.</p>
func (o TemplateVersionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateVersion) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// <p>Errors associated with this template version.</p>
func (o TemplateVersionPtrOutput) Errors() TemplateErrorArrayOutput {
	return o.ApplyT(func(v *TemplateVersion) []TemplateError {
		if v == nil {
			return nil
		}
		return v.Errors
	}).(TemplateErrorArrayOutput)
}

// <p>A list of the associated sheets with the unique identifier and name of each sheet.</p>
func (o TemplateVersionPtrOutput) Sheets() TemplateSheetArrayOutput {
	return o.ApplyT(func(v *TemplateVersion) []TemplateSheet {
		if v == nil {
			return nil
		}
		return v.Sheets
	}).(TemplateSheetArrayOutput)
}

// <p>The Amazon Resource Name (ARN) of an analysis or template that was used to create this
//
//	template.</p>
func (o TemplateVersionPtrOutput) SourceEntityArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateVersion) *string {
		if v == nil {
			return nil
		}
		return v.SourceEntityArn
	}).(pulumi.StringPtrOutput)
}

// The status that is associated with the template.
//
// - `CREATION_IN_PROGRESS`
// - `CREATION_SUCCESSFUL`
// - `CREATION_FAILED`
// - `UPDATE_IN_PROGRESS`
// - `UPDATE_SUCCESSFUL`
// - `UPDATE_FAILED`
// - `DELETED`
func (o TemplateVersionPtrOutput) Status() TemplateResourceStatusPtrOutput {
	return o.ApplyT(func(v *TemplateVersion) *TemplateResourceStatus {
		if v == nil {
			return nil
		}
		return v.Status
	}).(TemplateResourceStatusPtrOutput)
}

// <p>The ARN of the theme associated with this version of the template.</p>
func (o TemplateVersionPtrOutput) ThemeArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateVersion) *string {
		if v == nil {
			return nil
		}
		return v.ThemeArn
	}).(pulumi.StringPtrOutput)
}

// <p>The version number of the template version.</p>
func (o TemplateVersionPtrOutput) VersionNumber() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateVersion) *float64 {
		if v == nil {
			return nil
		}
		return v.VersionNumber
	}).(pulumi.Float64PtrOutput)
}

type TemplateVersionDefinition struct {
	AnalysisDefaults *TemplateAnalysisDefaults `pulumi:"analysisDefaults"`
	// An array of calculated field definitions for the template.
	CalculatedFields []TemplateCalculatedField `pulumi:"calculatedFields"`
	// An array of template-level column configurations. Column configurations are used to set default formatting for a column that's used throughout a template.
	ColumnConfigurations []TemplateColumnConfiguration `pulumi:"columnConfigurations"`
	// An array of dataset configurations. These configurations define the required columns for each dataset used within a template.
	DataSetConfigurations []TemplateDataSetConfiguration `pulumi:"dataSetConfigurations"`
	// Filter definitions for a template.
	//
	// For more information, see [Filtering Data](https://docs.aws.amazon.com/quicksight/latest/user/filtering-visual-data.html) in the *Amazon QuickSight User Guide* .
	FilterGroups []TemplateFilterGroup `pulumi:"filterGroups"`
	// An array of option definitions for a template.
	Options *TemplateAssetOptions `pulumi:"options"`
	// An array of parameter declarations for a template.
	//
	// *Parameters* are named variables that can transfer a value for use by an action or an object.
	//
	// For more information, see [Parameters in Amazon QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/parameters-in-quicksight.html) in the *Amazon QuickSight User Guide* .
	ParameterDeclarations []TemplateParameterDeclaration `pulumi:"parameterDeclarations"`
	QueryExecutionOptions *TemplateQueryExecutionOptions `pulumi:"queryExecutionOptions"`
	// An array of sheet definitions for a template.
	Sheets []TemplateSheetDefinition `pulumi:"sheets"`
}

// TemplateVersionDefinitionInput is an input type that accepts TemplateVersionDefinitionArgs and TemplateVersionDefinitionOutput values.
// You can construct a concrete instance of `TemplateVersionDefinitionInput` via:
//
//	TemplateVersionDefinitionArgs{...}
type TemplateVersionDefinitionInput interface {
	pulumi.Input

	ToTemplateVersionDefinitionOutput() TemplateVersionDefinitionOutput
	ToTemplateVersionDefinitionOutputWithContext(context.Context) TemplateVersionDefinitionOutput
}

type TemplateVersionDefinitionArgs struct {
	AnalysisDefaults TemplateAnalysisDefaultsPtrInput `pulumi:"analysisDefaults"`
	// An array of calculated field definitions for the template.
	CalculatedFields TemplateCalculatedFieldArrayInput `pulumi:"calculatedFields"`
	// An array of template-level column configurations. Column configurations are used to set default formatting for a column that's used throughout a template.
	ColumnConfigurations TemplateColumnConfigurationArrayInput `pulumi:"columnConfigurations"`
	// An array of dataset configurations. These configurations define the required columns for each dataset used within a template.
	DataSetConfigurations TemplateDataSetConfigurationArrayInput `pulumi:"dataSetConfigurations"`
	// Filter definitions for a template.
	//
	// For more information, see [Filtering Data](https://docs.aws.amazon.com/quicksight/latest/user/filtering-visual-data.html) in the *Amazon QuickSight User Guide* .
	FilterGroups TemplateFilterGroupArrayInput `pulumi:"filterGroups"`
	// An array of option definitions for a template.
	Options TemplateAssetOptionsPtrInput `pulumi:"options"`
	// An array of parameter declarations for a template.
	//
	// *Parameters* are named variables that can transfer a value for use by an action or an object.
	//
	// For more information, see [Parameters in Amazon QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/parameters-in-quicksight.html) in the *Amazon QuickSight User Guide* .
	ParameterDeclarations TemplateParameterDeclarationArrayInput `pulumi:"parameterDeclarations"`
	QueryExecutionOptions TemplateQueryExecutionOptionsPtrInput  `pulumi:"queryExecutionOptions"`
	// An array of sheet definitions for a template.
	Sheets TemplateSheetDefinitionArrayInput `pulumi:"sheets"`
}

func (TemplateVersionDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateVersionDefinition)(nil)).Elem()
}

func (i TemplateVersionDefinitionArgs) ToTemplateVersionDefinitionOutput() TemplateVersionDefinitionOutput {
	return i.ToTemplateVersionDefinitionOutputWithContext(context.Background())
}

func (i TemplateVersionDefinitionArgs) ToTemplateVersionDefinitionOutputWithContext(ctx context.Context) TemplateVersionDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateVersionDefinitionOutput)
}

func (i TemplateVersionDefinitionArgs) ToTemplateVersionDefinitionPtrOutput() TemplateVersionDefinitionPtrOutput {
	return i.ToTemplateVersionDefinitionPtrOutputWithContext(context.Background())
}

func (i TemplateVersionDefinitionArgs) ToTemplateVersionDefinitionPtrOutputWithContext(ctx context.Context) TemplateVersionDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateVersionDefinitionOutput).ToTemplateVersionDefinitionPtrOutputWithContext(ctx)
}

// TemplateVersionDefinitionPtrInput is an input type that accepts TemplateVersionDefinitionArgs, TemplateVersionDefinitionPtr and TemplateVersionDefinitionPtrOutput values.
// You can construct a concrete instance of `TemplateVersionDefinitionPtrInput` via:
//
//	        TemplateVersionDefinitionArgs{...}
//
//	or:
//
//	        nil
type TemplateVersionDefinitionPtrInput interface {
	pulumi.Input

	ToTemplateVersionDefinitionPtrOutput() TemplateVersionDefinitionPtrOutput
	ToTemplateVersionDefinitionPtrOutputWithContext(context.Context) TemplateVersionDefinitionPtrOutput
}

type templateVersionDefinitionPtrType TemplateVersionDefinitionArgs

func TemplateVersionDefinitionPtr(v *TemplateVersionDefinitionArgs) TemplateVersionDefinitionPtrInput {
	return (*templateVersionDefinitionPtrType)(v)
}

func (*templateVersionDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateVersionDefinition)(nil)).Elem()
}

func (i *templateVersionDefinitionPtrType) ToTemplateVersionDefinitionPtrOutput() TemplateVersionDefinitionPtrOutput {
	return i.ToTemplateVersionDefinitionPtrOutputWithContext(context.Background())
}

func (i *templateVersionDefinitionPtrType) ToTemplateVersionDefinitionPtrOutputWithContext(ctx context.Context) TemplateVersionDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateVersionDefinitionPtrOutput)
}

type TemplateVersionDefinitionOutput struct{ *pulumi.OutputState }

func (TemplateVersionDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateVersionDefinition)(nil)).Elem()
}

func (o TemplateVersionDefinitionOutput) ToTemplateVersionDefinitionOutput() TemplateVersionDefinitionOutput {
	return o
}

func (o TemplateVersionDefinitionOutput) ToTemplateVersionDefinitionOutputWithContext(ctx context.Context) TemplateVersionDefinitionOutput {
	return o
}

func (o TemplateVersionDefinitionOutput) ToTemplateVersionDefinitionPtrOutput() TemplateVersionDefinitionPtrOutput {
	return o.ToTemplateVersionDefinitionPtrOutputWithContext(context.Background())
}

func (o TemplateVersionDefinitionOutput) ToTemplateVersionDefinitionPtrOutputWithContext(ctx context.Context) TemplateVersionDefinitionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateVersionDefinition) *TemplateVersionDefinition {
		return &v
	}).(TemplateVersionDefinitionPtrOutput)
}

func (o TemplateVersionDefinitionOutput) AnalysisDefaults() TemplateAnalysisDefaultsPtrOutput {
	return o.ApplyT(func(v TemplateVersionDefinition) *TemplateAnalysisDefaults { return v.AnalysisDefaults }).(TemplateAnalysisDefaultsPtrOutput)
}

// An array of calculated field definitions for the template.
func (o TemplateVersionDefinitionOutput) CalculatedFields() TemplateCalculatedFieldArrayOutput {
	return o.ApplyT(func(v TemplateVersionDefinition) []TemplateCalculatedField { return v.CalculatedFields }).(TemplateCalculatedFieldArrayOutput)
}

// An array of template-level column configurations. Column configurations are used to set default formatting for a column that's used throughout a template.
func (o TemplateVersionDefinitionOutput) ColumnConfigurations() TemplateColumnConfigurationArrayOutput {
	return o.ApplyT(func(v TemplateVersionDefinition) []TemplateColumnConfiguration { return v.ColumnConfigurations }).(TemplateColumnConfigurationArrayOutput)
}

// An array of dataset configurations. These configurations define the required columns for each dataset used within a template.
func (o TemplateVersionDefinitionOutput) DataSetConfigurations() TemplateDataSetConfigurationArrayOutput {
	return o.ApplyT(func(v TemplateVersionDefinition) []TemplateDataSetConfiguration { return v.DataSetConfigurations }).(TemplateDataSetConfigurationArrayOutput)
}

// Filter definitions for a template.
//
// For more information, see [Filtering Data](https://docs.aws.amazon.com/quicksight/latest/user/filtering-visual-data.html) in the *Amazon QuickSight User Guide* .
func (o TemplateVersionDefinitionOutput) FilterGroups() TemplateFilterGroupArrayOutput {
	return o.ApplyT(func(v TemplateVersionDefinition) []TemplateFilterGroup { return v.FilterGroups }).(TemplateFilterGroupArrayOutput)
}

// An array of option definitions for a template.
func (o TemplateVersionDefinitionOutput) Options() TemplateAssetOptionsPtrOutput {
	return o.ApplyT(func(v TemplateVersionDefinition) *TemplateAssetOptions { return v.Options }).(TemplateAssetOptionsPtrOutput)
}

// An array of parameter declarations for a template.
//
// *Parameters* are named variables that can transfer a value for use by an action or an object.
//
// For more information, see [Parameters in Amazon QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/parameters-in-quicksight.html) in the *Amazon QuickSight User Guide* .
func (o TemplateVersionDefinitionOutput) ParameterDeclarations() TemplateParameterDeclarationArrayOutput {
	return o.ApplyT(func(v TemplateVersionDefinition) []TemplateParameterDeclaration { return v.ParameterDeclarations }).(TemplateParameterDeclarationArrayOutput)
}

func (o TemplateVersionDefinitionOutput) QueryExecutionOptions() TemplateQueryExecutionOptionsPtrOutput {
	return o.ApplyT(func(v TemplateVersionDefinition) *TemplateQueryExecutionOptions { return v.QueryExecutionOptions }).(TemplateQueryExecutionOptionsPtrOutput)
}

// An array of sheet definitions for a template.
func (o TemplateVersionDefinitionOutput) Sheets() TemplateSheetDefinitionArrayOutput {
	return o.ApplyT(func(v TemplateVersionDefinition) []TemplateSheetDefinition { return v.Sheets }).(TemplateSheetDefinitionArrayOutput)
}

type TemplateVersionDefinitionPtrOutput struct{ *pulumi.OutputState }

func (TemplateVersionDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateVersionDefinition)(nil)).Elem()
}

func (o TemplateVersionDefinitionPtrOutput) ToTemplateVersionDefinitionPtrOutput() TemplateVersionDefinitionPtrOutput {
	return o
}

func (o TemplateVersionDefinitionPtrOutput) ToTemplateVersionDefinitionPtrOutputWithContext(ctx context.Context) TemplateVersionDefinitionPtrOutput {
	return o
}

func (o TemplateVersionDefinitionPtrOutput) Elem() TemplateVersionDefinitionOutput {
	return o.ApplyT(func(v *TemplateVersionDefinition) TemplateVersionDefinition {
		if v != nil {
			return *v
		}
		var ret TemplateVersionDefinition
		return ret
	}).(TemplateVersionDefinitionOutput)
}

func (o TemplateVersionDefinitionPtrOutput) AnalysisDefaults() TemplateAnalysisDefaultsPtrOutput {
	return o.ApplyT(func(v *TemplateVersionDefinition) *TemplateAnalysisDefaults {
		if v == nil {
			return nil
		}
		return v.AnalysisDefaults
	}).(TemplateAnalysisDefaultsPtrOutput)
}

// An array of calculated field definitions for the template.
func (o TemplateVersionDefinitionPtrOutput) CalculatedFields() TemplateCalculatedFieldArrayOutput {
	return o.ApplyT(func(v *TemplateVersionDefinition) []TemplateCalculatedField {
		if v == nil {
			return nil
		}
		return v.CalculatedFields
	}).(TemplateCalculatedFieldArrayOutput)
}

// An array of template-level column configurations. Column configurations are used to set default formatting for a column that's used throughout a template.
func (o TemplateVersionDefinitionPtrOutput) ColumnConfigurations() TemplateColumnConfigurationArrayOutput {
	return o.ApplyT(func(v *TemplateVersionDefinition) []TemplateColumnConfiguration {
		if v == nil {
			return nil
		}
		return v.ColumnConfigurations
	}).(TemplateColumnConfigurationArrayOutput)
}

// An array of dataset configurations. These configurations define the required columns for each dataset used within a template.
func (o TemplateVersionDefinitionPtrOutput) DataSetConfigurations() TemplateDataSetConfigurationArrayOutput {
	return o.ApplyT(func(v *TemplateVersionDefinition) []TemplateDataSetConfiguration {
		if v == nil {
			return nil
		}
		return v.DataSetConfigurations
	}).(TemplateDataSetConfigurationArrayOutput)
}

// Filter definitions for a template.
//
// For more information, see [Filtering Data](https://docs.aws.amazon.com/quicksight/latest/user/filtering-visual-data.html) in the *Amazon QuickSight User Guide* .
func (o TemplateVersionDefinitionPtrOutput) FilterGroups() TemplateFilterGroupArrayOutput {
	return o.ApplyT(func(v *TemplateVersionDefinition) []TemplateFilterGroup {
		if v == nil {
			return nil
		}
		return v.FilterGroups
	}).(TemplateFilterGroupArrayOutput)
}

// An array of option definitions for a template.
func (o TemplateVersionDefinitionPtrOutput) Options() TemplateAssetOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateVersionDefinition) *TemplateAssetOptions {
		if v == nil {
			return nil
		}
		return v.Options
	}).(TemplateAssetOptionsPtrOutput)
}

// An array of parameter declarations for a template.
//
// *Parameters* are named variables that can transfer a value for use by an action or an object.
//
// For more information, see [Parameters in Amazon QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/parameters-in-quicksight.html) in the *Amazon QuickSight User Guide* .
func (o TemplateVersionDefinitionPtrOutput) ParameterDeclarations() TemplateParameterDeclarationArrayOutput {
	return o.ApplyT(func(v *TemplateVersionDefinition) []TemplateParameterDeclaration {
		if v == nil {
			return nil
		}
		return v.ParameterDeclarations
	}).(TemplateParameterDeclarationArrayOutput)
}

func (o TemplateVersionDefinitionPtrOutput) QueryExecutionOptions() TemplateQueryExecutionOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateVersionDefinition) *TemplateQueryExecutionOptions {
		if v == nil {
			return nil
		}
		return v.QueryExecutionOptions
	}).(TemplateQueryExecutionOptionsPtrOutput)
}

// An array of sheet definitions for a template.
func (o TemplateVersionDefinitionPtrOutput) Sheets() TemplateSheetDefinitionArrayOutput {
	return o.ApplyT(func(v *TemplateVersionDefinition) []TemplateSheetDefinition {
		if v == nil {
			return nil
		}
		return v.Sheets
	}).(TemplateSheetDefinitionArrayOutput)
}

type TemplateVisibleRangeOptions struct {
	// The percent range in the visible range.
	PercentRange *TemplatePercentVisibleRange `pulumi:"percentRange"`
}

// TemplateVisibleRangeOptionsInput is an input type that accepts TemplateVisibleRangeOptionsArgs and TemplateVisibleRangeOptionsOutput values.
// You can construct a concrete instance of `TemplateVisibleRangeOptionsInput` via:
//
//	TemplateVisibleRangeOptionsArgs{...}
type TemplateVisibleRangeOptionsInput interface {
	pulumi.Input

	ToTemplateVisibleRangeOptionsOutput() TemplateVisibleRangeOptionsOutput
	ToTemplateVisibleRangeOptionsOutputWithContext(context.Context) TemplateVisibleRangeOptionsOutput
}

type TemplateVisibleRangeOptionsArgs struct {
	// The percent range in the visible range.
	PercentRange TemplatePercentVisibleRangePtrInput `pulumi:"percentRange"`
}

func (TemplateVisibleRangeOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateVisibleRangeOptions)(nil)).Elem()
}

func (i TemplateVisibleRangeOptionsArgs) ToTemplateVisibleRangeOptionsOutput() TemplateVisibleRangeOptionsOutput {
	return i.ToTemplateVisibleRangeOptionsOutputWithContext(context.Background())
}

func (i TemplateVisibleRangeOptionsArgs) ToTemplateVisibleRangeOptionsOutputWithContext(ctx context.Context) TemplateVisibleRangeOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateVisibleRangeOptionsOutput)
}

func (i TemplateVisibleRangeOptionsArgs) ToTemplateVisibleRangeOptionsPtrOutput() TemplateVisibleRangeOptionsPtrOutput {
	return i.ToTemplateVisibleRangeOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateVisibleRangeOptionsArgs) ToTemplateVisibleRangeOptionsPtrOutputWithContext(ctx context.Context) TemplateVisibleRangeOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateVisibleRangeOptionsOutput).ToTemplateVisibleRangeOptionsPtrOutputWithContext(ctx)
}

// TemplateVisibleRangeOptionsPtrInput is an input type that accepts TemplateVisibleRangeOptionsArgs, TemplateVisibleRangeOptionsPtr and TemplateVisibleRangeOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateVisibleRangeOptionsPtrInput` via:
//
//	        TemplateVisibleRangeOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateVisibleRangeOptionsPtrInput interface {
	pulumi.Input

	ToTemplateVisibleRangeOptionsPtrOutput() TemplateVisibleRangeOptionsPtrOutput
	ToTemplateVisibleRangeOptionsPtrOutputWithContext(context.Context) TemplateVisibleRangeOptionsPtrOutput
}

type templateVisibleRangeOptionsPtrType TemplateVisibleRangeOptionsArgs

func TemplateVisibleRangeOptionsPtr(v *TemplateVisibleRangeOptionsArgs) TemplateVisibleRangeOptionsPtrInput {
	return (*templateVisibleRangeOptionsPtrType)(v)
}

func (*templateVisibleRangeOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateVisibleRangeOptions)(nil)).Elem()
}

func (i *templateVisibleRangeOptionsPtrType) ToTemplateVisibleRangeOptionsPtrOutput() TemplateVisibleRangeOptionsPtrOutput {
	return i.ToTemplateVisibleRangeOptionsPtrOutputWithContext(context.Background())
}

func (i *templateVisibleRangeOptionsPtrType) ToTemplateVisibleRangeOptionsPtrOutputWithContext(ctx context.Context) TemplateVisibleRangeOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateVisibleRangeOptionsPtrOutput)
}

type TemplateVisibleRangeOptionsOutput struct{ *pulumi.OutputState }

func (TemplateVisibleRangeOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateVisibleRangeOptions)(nil)).Elem()
}

func (o TemplateVisibleRangeOptionsOutput) ToTemplateVisibleRangeOptionsOutput() TemplateVisibleRangeOptionsOutput {
	return o
}

func (o TemplateVisibleRangeOptionsOutput) ToTemplateVisibleRangeOptionsOutputWithContext(ctx context.Context) TemplateVisibleRangeOptionsOutput {
	return o
}

func (o TemplateVisibleRangeOptionsOutput) ToTemplateVisibleRangeOptionsPtrOutput() TemplateVisibleRangeOptionsPtrOutput {
	return o.ToTemplateVisibleRangeOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateVisibleRangeOptionsOutput) ToTemplateVisibleRangeOptionsPtrOutputWithContext(ctx context.Context) TemplateVisibleRangeOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateVisibleRangeOptions) *TemplateVisibleRangeOptions {
		return &v
	}).(TemplateVisibleRangeOptionsPtrOutput)
}

// The percent range in the visible range.
func (o TemplateVisibleRangeOptionsOutput) PercentRange() TemplatePercentVisibleRangePtrOutput {
	return o.ApplyT(func(v TemplateVisibleRangeOptions) *TemplatePercentVisibleRange { return v.PercentRange }).(TemplatePercentVisibleRangePtrOutput)
}

type TemplateVisibleRangeOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateVisibleRangeOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateVisibleRangeOptions)(nil)).Elem()
}

func (o TemplateVisibleRangeOptionsPtrOutput) ToTemplateVisibleRangeOptionsPtrOutput() TemplateVisibleRangeOptionsPtrOutput {
	return o
}

func (o TemplateVisibleRangeOptionsPtrOutput) ToTemplateVisibleRangeOptionsPtrOutputWithContext(ctx context.Context) TemplateVisibleRangeOptionsPtrOutput {
	return o
}

func (o TemplateVisibleRangeOptionsPtrOutput) Elem() TemplateVisibleRangeOptionsOutput {
	return o.ApplyT(func(v *TemplateVisibleRangeOptions) TemplateVisibleRangeOptions {
		if v != nil {
			return *v
		}
		var ret TemplateVisibleRangeOptions
		return ret
	}).(TemplateVisibleRangeOptionsOutput)
}

// The percent range in the visible range.
func (o TemplateVisibleRangeOptionsPtrOutput) PercentRange() TemplatePercentVisibleRangePtrOutput {
	return o.ApplyT(func(v *TemplateVisibleRangeOptions) *TemplatePercentVisibleRange {
		if v == nil {
			return nil
		}
		return v.PercentRange
	}).(TemplatePercentVisibleRangePtrOutput)
}

type TemplateVisual struct {
	// A bar chart.
	//
	// For more information, see [Using bar charts](https://docs.aws.amazon.com/quicksight/latest/user/bar-charts.html) in the *Amazon QuickSight User Guide* .
	BarChartVisual *TemplateBarChartVisual `pulumi:"barChartVisual"`
	// A box plot.
	//
	// For more information, see [Using box plots](https://docs.aws.amazon.com/quicksight/latest/user/box-plots.html) in the *Amazon QuickSight User Guide* .
	BoxPlotVisual *TemplateBoxPlotVisual `pulumi:"boxPlotVisual"`
	// A combo chart.
	//
	// For more information, see [Using combo charts](https://docs.aws.amazon.com/quicksight/latest/user/combo-charts.html) in the *Amazon QuickSight User Guide* .
	ComboChartVisual *TemplateComboChartVisual `pulumi:"comboChartVisual"`
	// A visual that contains custom content.
	//
	// For more information, see [Using custom visual content](https://docs.aws.amazon.com/quicksight/latest/user/custom-visual-content.html) in the *Amazon QuickSight User Guide* .
	CustomContentVisual *TemplateCustomContentVisual `pulumi:"customContentVisual"`
	// An empty visual.
	EmptyVisual *TemplateEmptyVisual `pulumi:"emptyVisual"`
	// A filled map.
	//
	// For more information, see [Creating filled maps](https://docs.aws.amazon.com/quicksight/latest/user/filled-maps.html) in the *Amazon QuickSight User Guide* .
	FilledMapVisual *TemplateFilledMapVisual `pulumi:"filledMapVisual"`
	// A funnel chart.
	//
	// For more information, see [Using funnel charts](https://docs.aws.amazon.com/quicksight/latest/user/funnel-visual-content.html) in the *Amazon QuickSight User Guide* .
	FunnelChartVisual *TemplateFunnelChartVisual `pulumi:"funnelChartVisual"`
	// A gauge chart.
	//
	// For more information, see [Using gauge charts](https://docs.aws.amazon.com/quicksight/latest/user/gauge-chart.html) in the *Amazon QuickSight User Guide* .
	GaugeChartVisual *TemplateGaugeChartVisual `pulumi:"gaugeChartVisual"`
	// A geospatial map or a points on map visual.
	//
	// For more information, see [Creating point maps](https://docs.aws.amazon.com/quicksight/latest/user/point-maps.html) in the *Amazon QuickSight User Guide* .
	GeospatialMapVisual *TemplateGeospatialMapVisual `pulumi:"geospatialMapVisual"`
	// A heat map.
	//
	// For more information, see [Using heat maps](https://docs.aws.amazon.com/quicksight/latest/user/heat-map.html) in the *Amazon QuickSight User Guide* .
	HeatMapVisual *TemplateHeatMapVisual `pulumi:"heatMapVisual"`
	// A histogram.
	//
	// For more information, see [Using histograms](https://docs.aws.amazon.com/quicksight/latest/user/histogram-charts.html) in the *Amazon QuickSight User Guide* .
	HistogramVisual *TemplateHistogramVisual `pulumi:"histogramVisual"`
	// An insight visual.
	//
	// For more information, see [Working with insights](https://docs.aws.amazon.com/quicksight/latest/user/computational-insights.html) in the *Amazon QuickSight User Guide* .
	InsightVisual *TemplateInsightVisual `pulumi:"insightVisual"`
	// A key performance indicator (KPI).
	//
	// For more information, see [Using KPIs](https://docs.aws.amazon.com/quicksight/latest/user/kpi.html) in the *Amazon QuickSight User Guide* .
	KpiVisual *TemplateKpiVisual `pulumi:"kpiVisual"`
	// A line chart.
	//
	// For more information, see [Using line charts](https://docs.aws.amazon.com/quicksight/latest/user/line-charts.html) in the *Amazon QuickSight User Guide* .
	LineChartVisual *TemplateLineChartVisual `pulumi:"lineChartVisual"`
	// A pie or donut chart.
	//
	// For more information, see [Using pie charts](https://docs.aws.amazon.com/quicksight/latest/user/pie-chart.html) in the *Amazon QuickSight User Guide* .
	PieChartVisual *TemplatePieChartVisual `pulumi:"pieChartVisual"`
	// A pivot table.
	//
	// For more information, see [Using pivot tables](https://docs.aws.amazon.com/quicksight/latest/user/pivot-table.html) in the *Amazon QuickSight User Guide* .
	PivotTableVisual *TemplatePivotTableVisual `pulumi:"pivotTableVisual"`
	// The custom plugin visual type.
	PluginVisual *TemplatePluginVisual `pulumi:"pluginVisual"`
	// A radar chart visual.
	//
	// For more information, see [Using radar charts](https://docs.aws.amazon.com/quicksight/latest/user/radar-chart.html) in the *Amazon QuickSight User Guide* .
	RadarChartVisual *TemplateRadarChartVisual `pulumi:"radarChartVisual"`
	// A sankey diagram.
	//
	// For more information, see [Using Sankey diagrams](https://docs.aws.amazon.com/quicksight/latest/user/sankey-diagram.html) in the *Amazon QuickSight User Guide* .
	SankeyDiagramVisual *TemplateSankeyDiagramVisual `pulumi:"sankeyDiagramVisual"`
	// A scatter plot.
	//
	// For more information, see [Using scatter plots](https://docs.aws.amazon.com/quicksight/latest/user/scatter-plot.html) in the *Amazon QuickSight User Guide* .
	ScatterPlotVisual *TemplateScatterPlotVisual `pulumi:"scatterPlotVisual"`
	// A table visual.
	//
	// For more information, see [Using tables as visuals](https://docs.aws.amazon.com/quicksight/latest/user/tabular.html) in the *Amazon QuickSight User Guide* .
	TableVisual *TemplateTableVisual `pulumi:"tableVisual"`
	// A tree map.
	//
	// For more information, see [Using tree maps](https://docs.aws.amazon.com/quicksight/latest/user/tree-map.html) in the *Amazon QuickSight User Guide* .
	TreeMapVisual *TemplateTreeMapVisual `pulumi:"treeMapVisual"`
	// A waterfall chart.
	//
	// For more information, see [Using waterfall charts](https://docs.aws.amazon.com/quicksight/latest/user/waterfall-chart.html) in the *Amazon QuickSight User Guide* .
	WaterfallVisual *TemplateWaterfallVisual `pulumi:"waterfallVisual"`
	// A word cloud.
	//
	// For more information, see [Using word clouds](https://docs.aws.amazon.com/quicksight/latest/user/word-cloud.html) in the *Amazon QuickSight User Guide* .
	WordCloudVisual *TemplateWordCloudVisual `pulumi:"wordCloudVisual"`
}

// TemplateVisualInput is an input type that accepts TemplateVisualArgs and TemplateVisualOutput values.
// You can construct a concrete instance of `TemplateVisualInput` via:
//
//	TemplateVisualArgs{...}
type TemplateVisualInput interface {
	pulumi.Input

	ToTemplateVisualOutput() TemplateVisualOutput
	ToTemplateVisualOutputWithContext(context.Context) TemplateVisualOutput
}

type TemplateVisualArgs struct {
	// A bar chart.
	//
	// For more information, see [Using bar charts](https://docs.aws.amazon.com/quicksight/latest/user/bar-charts.html) in the *Amazon QuickSight User Guide* .
	BarChartVisual TemplateBarChartVisualPtrInput `pulumi:"barChartVisual"`
	// A box plot.
	//
	// For more information, see [Using box plots](https://docs.aws.amazon.com/quicksight/latest/user/box-plots.html) in the *Amazon QuickSight User Guide* .
	BoxPlotVisual TemplateBoxPlotVisualPtrInput `pulumi:"boxPlotVisual"`
	// A combo chart.
	//
	// For more information, see [Using combo charts](https://docs.aws.amazon.com/quicksight/latest/user/combo-charts.html) in the *Amazon QuickSight User Guide* .
	ComboChartVisual TemplateComboChartVisualPtrInput `pulumi:"comboChartVisual"`
	// A visual that contains custom content.
	//
	// For more information, see [Using custom visual content](https://docs.aws.amazon.com/quicksight/latest/user/custom-visual-content.html) in the *Amazon QuickSight User Guide* .
	CustomContentVisual TemplateCustomContentVisualPtrInput `pulumi:"customContentVisual"`
	// An empty visual.
	EmptyVisual TemplateEmptyVisualPtrInput `pulumi:"emptyVisual"`
	// A filled map.
	//
	// For more information, see [Creating filled maps](https://docs.aws.amazon.com/quicksight/latest/user/filled-maps.html) in the *Amazon QuickSight User Guide* .
	FilledMapVisual TemplateFilledMapVisualPtrInput `pulumi:"filledMapVisual"`
	// A funnel chart.
	//
	// For more information, see [Using funnel charts](https://docs.aws.amazon.com/quicksight/latest/user/funnel-visual-content.html) in the *Amazon QuickSight User Guide* .
	FunnelChartVisual TemplateFunnelChartVisualPtrInput `pulumi:"funnelChartVisual"`
	// A gauge chart.
	//
	// For more information, see [Using gauge charts](https://docs.aws.amazon.com/quicksight/latest/user/gauge-chart.html) in the *Amazon QuickSight User Guide* .
	GaugeChartVisual TemplateGaugeChartVisualPtrInput `pulumi:"gaugeChartVisual"`
	// A geospatial map or a points on map visual.
	//
	// For more information, see [Creating point maps](https://docs.aws.amazon.com/quicksight/latest/user/point-maps.html) in the *Amazon QuickSight User Guide* .
	GeospatialMapVisual TemplateGeospatialMapVisualPtrInput `pulumi:"geospatialMapVisual"`
	// A heat map.
	//
	// For more information, see [Using heat maps](https://docs.aws.amazon.com/quicksight/latest/user/heat-map.html) in the *Amazon QuickSight User Guide* .
	HeatMapVisual TemplateHeatMapVisualPtrInput `pulumi:"heatMapVisual"`
	// A histogram.
	//
	// For more information, see [Using histograms](https://docs.aws.amazon.com/quicksight/latest/user/histogram-charts.html) in the *Amazon QuickSight User Guide* .
	HistogramVisual TemplateHistogramVisualPtrInput `pulumi:"histogramVisual"`
	// An insight visual.
	//
	// For more information, see [Working with insights](https://docs.aws.amazon.com/quicksight/latest/user/computational-insights.html) in the *Amazon QuickSight User Guide* .
	InsightVisual TemplateInsightVisualPtrInput `pulumi:"insightVisual"`
	// A key performance indicator (KPI).
	//
	// For more information, see [Using KPIs](https://docs.aws.amazon.com/quicksight/latest/user/kpi.html) in the *Amazon QuickSight User Guide* .
	KpiVisual TemplateKpiVisualPtrInput `pulumi:"kpiVisual"`
	// A line chart.
	//
	// For more information, see [Using line charts](https://docs.aws.amazon.com/quicksight/latest/user/line-charts.html) in the *Amazon QuickSight User Guide* .
	LineChartVisual TemplateLineChartVisualPtrInput `pulumi:"lineChartVisual"`
	// A pie or donut chart.
	//
	// For more information, see [Using pie charts](https://docs.aws.amazon.com/quicksight/latest/user/pie-chart.html) in the *Amazon QuickSight User Guide* .
	PieChartVisual TemplatePieChartVisualPtrInput `pulumi:"pieChartVisual"`
	// A pivot table.
	//
	// For more information, see [Using pivot tables](https://docs.aws.amazon.com/quicksight/latest/user/pivot-table.html) in the *Amazon QuickSight User Guide* .
	PivotTableVisual TemplatePivotTableVisualPtrInput `pulumi:"pivotTableVisual"`
	// The custom plugin visual type.
	PluginVisual TemplatePluginVisualPtrInput `pulumi:"pluginVisual"`
	// A radar chart visual.
	//
	// For more information, see [Using radar charts](https://docs.aws.amazon.com/quicksight/latest/user/radar-chart.html) in the *Amazon QuickSight User Guide* .
	RadarChartVisual TemplateRadarChartVisualPtrInput `pulumi:"radarChartVisual"`
	// A sankey diagram.
	//
	// For more information, see [Using Sankey diagrams](https://docs.aws.amazon.com/quicksight/latest/user/sankey-diagram.html) in the *Amazon QuickSight User Guide* .
	SankeyDiagramVisual TemplateSankeyDiagramVisualPtrInput `pulumi:"sankeyDiagramVisual"`
	// A scatter plot.
	//
	// For more information, see [Using scatter plots](https://docs.aws.amazon.com/quicksight/latest/user/scatter-plot.html) in the *Amazon QuickSight User Guide* .
	ScatterPlotVisual TemplateScatterPlotVisualPtrInput `pulumi:"scatterPlotVisual"`
	// A table visual.
	//
	// For more information, see [Using tables as visuals](https://docs.aws.amazon.com/quicksight/latest/user/tabular.html) in the *Amazon QuickSight User Guide* .
	TableVisual TemplateTableVisualPtrInput `pulumi:"tableVisual"`
	// A tree map.
	//
	// For more information, see [Using tree maps](https://docs.aws.amazon.com/quicksight/latest/user/tree-map.html) in the *Amazon QuickSight User Guide* .
	TreeMapVisual TemplateTreeMapVisualPtrInput `pulumi:"treeMapVisual"`
	// A waterfall chart.
	//
	// For more information, see [Using waterfall charts](https://docs.aws.amazon.com/quicksight/latest/user/waterfall-chart.html) in the *Amazon QuickSight User Guide* .
	WaterfallVisual TemplateWaterfallVisualPtrInput `pulumi:"waterfallVisual"`
	// A word cloud.
	//
	// For more information, see [Using word clouds](https://docs.aws.amazon.com/quicksight/latest/user/word-cloud.html) in the *Amazon QuickSight User Guide* .
	WordCloudVisual TemplateWordCloudVisualPtrInput `pulumi:"wordCloudVisual"`
}

func (TemplateVisualArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateVisual)(nil)).Elem()
}

func (i TemplateVisualArgs) ToTemplateVisualOutput() TemplateVisualOutput {
	return i.ToTemplateVisualOutputWithContext(context.Background())
}

func (i TemplateVisualArgs) ToTemplateVisualOutputWithContext(ctx context.Context) TemplateVisualOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateVisualOutput)
}

// TemplateVisualArrayInput is an input type that accepts TemplateVisualArray and TemplateVisualArrayOutput values.
// You can construct a concrete instance of `TemplateVisualArrayInput` via:
//
//	TemplateVisualArray{ TemplateVisualArgs{...} }
type TemplateVisualArrayInput interface {
	pulumi.Input

	ToTemplateVisualArrayOutput() TemplateVisualArrayOutput
	ToTemplateVisualArrayOutputWithContext(context.Context) TemplateVisualArrayOutput
}

type TemplateVisualArray []TemplateVisualInput

func (TemplateVisualArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateVisual)(nil)).Elem()
}

func (i TemplateVisualArray) ToTemplateVisualArrayOutput() TemplateVisualArrayOutput {
	return i.ToTemplateVisualArrayOutputWithContext(context.Background())
}

func (i TemplateVisualArray) ToTemplateVisualArrayOutputWithContext(ctx context.Context) TemplateVisualArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateVisualArrayOutput)
}

type TemplateVisualOutput struct{ *pulumi.OutputState }

func (TemplateVisualOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateVisual)(nil)).Elem()
}

func (o TemplateVisualOutput) ToTemplateVisualOutput() TemplateVisualOutput {
	return o
}

func (o TemplateVisualOutput) ToTemplateVisualOutputWithContext(ctx context.Context) TemplateVisualOutput {
	return o
}

// A bar chart.
//
// For more information, see [Using bar charts](https://docs.aws.amazon.com/quicksight/latest/user/bar-charts.html) in the *Amazon QuickSight User Guide* .
func (o TemplateVisualOutput) BarChartVisual() TemplateBarChartVisualPtrOutput {
	return o.ApplyT(func(v TemplateVisual) *TemplateBarChartVisual { return v.BarChartVisual }).(TemplateBarChartVisualPtrOutput)
}

// A box plot.
//
// For more information, see [Using box plots](https://docs.aws.amazon.com/quicksight/latest/user/box-plots.html) in the *Amazon QuickSight User Guide* .
func (o TemplateVisualOutput) BoxPlotVisual() TemplateBoxPlotVisualPtrOutput {
	return o.ApplyT(func(v TemplateVisual) *TemplateBoxPlotVisual { return v.BoxPlotVisual }).(TemplateBoxPlotVisualPtrOutput)
}

// A combo chart.
//
// For more information, see [Using combo charts](https://docs.aws.amazon.com/quicksight/latest/user/combo-charts.html) in the *Amazon QuickSight User Guide* .
func (o TemplateVisualOutput) ComboChartVisual() TemplateComboChartVisualPtrOutput {
	return o.ApplyT(func(v TemplateVisual) *TemplateComboChartVisual { return v.ComboChartVisual }).(TemplateComboChartVisualPtrOutput)
}

// A visual that contains custom content.
//
// For more information, see [Using custom visual content](https://docs.aws.amazon.com/quicksight/latest/user/custom-visual-content.html) in the *Amazon QuickSight User Guide* .
func (o TemplateVisualOutput) CustomContentVisual() TemplateCustomContentVisualPtrOutput {
	return o.ApplyT(func(v TemplateVisual) *TemplateCustomContentVisual { return v.CustomContentVisual }).(TemplateCustomContentVisualPtrOutput)
}

// An empty visual.
func (o TemplateVisualOutput) EmptyVisual() TemplateEmptyVisualPtrOutput {
	return o.ApplyT(func(v TemplateVisual) *TemplateEmptyVisual { return v.EmptyVisual }).(TemplateEmptyVisualPtrOutput)
}

// A filled map.
//
// For more information, see [Creating filled maps](https://docs.aws.amazon.com/quicksight/latest/user/filled-maps.html) in the *Amazon QuickSight User Guide* .
func (o TemplateVisualOutput) FilledMapVisual() TemplateFilledMapVisualPtrOutput {
	return o.ApplyT(func(v TemplateVisual) *TemplateFilledMapVisual { return v.FilledMapVisual }).(TemplateFilledMapVisualPtrOutput)
}

// A funnel chart.
//
// For more information, see [Using funnel charts](https://docs.aws.amazon.com/quicksight/latest/user/funnel-visual-content.html) in the *Amazon QuickSight User Guide* .
func (o TemplateVisualOutput) FunnelChartVisual() TemplateFunnelChartVisualPtrOutput {
	return o.ApplyT(func(v TemplateVisual) *TemplateFunnelChartVisual { return v.FunnelChartVisual }).(TemplateFunnelChartVisualPtrOutput)
}

// A gauge chart.
//
// For more information, see [Using gauge charts](https://docs.aws.amazon.com/quicksight/latest/user/gauge-chart.html) in the *Amazon QuickSight User Guide* .
func (o TemplateVisualOutput) GaugeChartVisual() TemplateGaugeChartVisualPtrOutput {
	return o.ApplyT(func(v TemplateVisual) *TemplateGaugeChartVisual { return v.GaugeChartVisual }).(TemplateGaugeChartVisualPtrOutput)
}

// A geospatial map or a points on map visual.
//
// For more information, see [Creating point maps](https://docs.aws.amazon.com/quicksight/latest/user/point-maps.html) in the *Amazon QuickSight User Guide* .
func (o TemplateVisualOutput) GeospatialMapVisual() TemplateGeospatialMapVisualPtrOutput {
	return o.ApplyT(func(v TemplateVisual) *TemplateGeospatialMapVisual { return v.GeospatialMapVisual }).(TemplateGeospatialMapVisualPtrOutput)
}

// A heat map.
//
// For more information, see [Using heat maps](https://docs.aws.amazon.com/quicksight/latest/user/heat-map.html) in the *Amazon QuickSight User Guide* .
func (o TemplateVisualOutput) HeatMapVisual() TemplateHeatMapVisualPtrOutput {
	return o.ApplyT(func(v TemplateVisual) *TemplateHeatMapVisual { return v.HeatMapVisual }).(TemplateHeatMapVisualPtrOutput)
}

// A histogram.
//
// For more information, see [Using histograms](https://docs.aws.amazon.com/quicksight/latest/user/histogram-charts.html) in the *Amazon QuickSight User Guide* .
func (o TemplateVisualOutput) HistogramVisual() TemplateHistogramVisualPtrOutput {
	return o.ApplyT(func(v TemplateVisual) *TemplateHistogramVisual { return v.HistogramVisual }).(TemplateHistogramVisualPtrOutput)
}

// An insight visual.
//
// For more information, see [Working with insights](https://docs.aws.amazon.com/quicksight/latest/user/computational-insights.html) in the *Amazon QuickSight User Guide* .
func (o TemplateVisualOutput) InsightVisual() TemplateInsightVisualPtrOutput {
	return o.ApplyT(func(v TemplateVisual) *TemplateInsightVisual { return v.InsightVisual }).(TemplateInsightVisualPtrOutput)
}

// A key performance indicator (KPI).
//
// For more information, see [Using KPIs](https://docs.aws.amazon.com/quicksight/latest/user/kpi.html) in the *Amazon QuickSight User Guide* .
func (o TemplateVisualOutput) KpiVisual() TemplateKpiVisualPtrOutput {
	return o.ApplyT(func(v TemplateVisual) *TemplateKpiVisual { return v.KpiVisual }).(TemplateKpiVisualPtrOutput)
}

// A line chart.
//
// For more information, see [Using line charts](https://docs.aws.amazon.com/quicksight/latest/user/line-charts.html) in the *Amazon QuickSight User Guide* .
func (o TemplateVisualOutput) LineChartVisual() TemplateLineChartVisualPtrOutput {
	return o.ApplyT(func(v TemplateVisual) *TemplateLineChartVisual { return v.LineChartVisual }).(TemplateLineChartVisualPtrOutput)
}

// A pie or donut chart.
//
// For more information, see [Using pie charts](https://docs.aws.amazon.com/quicksight/latest/user/pie-chart.html) in the *Amazon QuickSight User Guide* .
func (o TemplateVisualOutput) PieChartVisual() TemplatePieChartVisualPtrOutput {
	return o.ApplyT(func(v TemplateVisual) *TemplatePieChartVisual { return v.PieChartVisual }).(TemplatePieChartVisualPtrOutput)
}

// A pivot table.
//
// For more information, see [Using pivot tables](https://docs.aws.amazon.com/quicksight/latest/user/pivot-table.html) in the *Amazon QuickSight User Guide* .
func (o TemplateVisualOutput) PivotTableVisual() TemplatePivotTableVisualPtrOutput {
	return o.ApplyT(func(v TemplateVisual) *TemplatePivotTableVisual { return v.PivotTableVisual }).(TemplatePivotTableVisualPtrOutput)
}

// The custom plugin visual type.
func (o TemplateVisualOutput) PluginVisual() TemplatePluginVisualPtrOutput {
	return o.ApplyT(func(v TemplateVisual) *TemplatePluginVisual { return v.PluginVisual }).(TemplatePluginVisualPtrOutput)
}

// A radar chart visual.
//
// For more information, see [Using radar charts](https://docs.aws.amazon.com/quicksight/latest/user/radar-chart.html) in the *Amazon QuickSight User Guide* .
func (o TemplateVisualOutput) RadarChartVisual() TemplateRadarChartVisualPtrOutput {
	return o.ApplyT(func(v TemplateVisual) *TemplateRadarChartVisual { return v.RadarChartVisual }).(TemplateRadarChartVisualPtrOutput)
}

// A sankey diagram.
//
// For more information, see [Using Sankey diagrams](https://docs.aws.amazon.com/quicksight/latest/user/sankey-diagram.html) in the *Amazon QuickSight User Guide* .
func (o TemplateVisualOutput) SankeyDiagramVisual() TemplateSankeyDiagramVisualPtrOutput {
	return o.ApplyT(func(v TemplateVisual) *TemplateSankeyDiagramVisual { return v.SankeyDiagramVisual }).(TemplateSankeyDiagramVisualPtrOutput)
}

// A scatter plot.
//
// For more information, see [Using scatter plots](https://docs.aws.amazon.com/quicksight/latest/user/scatter-plot.html) in the *Amazon QuickSight User Guide* .
func (o TemplateVisualOutput) ScatterPlotVisual() TemplateScatterPlotVisualPtrOutput {
	return o.ApplyT(func(v TemplateVisual) *TemplateScatterPlotVisual { return v.ScatterPlotVisual }).(TemplateScatterPlotVisualPtrOutput)
}

// A table visual.
//
// For more information, see [Using tables as visuals](https://docs.aws.amazon.com/quicksight/latest/user/tabular.html) in the *Amazon QuickSight User Guide* .
func (o TemplateVisualOutput) TableVisual() TemplateTableVisualPtrOutput {
	return o.ApplyT(func(v TemplateVisual) *TemplateTableVisual { return v.TableVisual }).(TemplateTableVisualPtrOutput)
}

// A tree map.
//
// For more information, see [Using tree maps](https://docs.aws.amazon.com/quicksight/latest/user/tree-map.html) in the *Amazon QuickSight User Guide* .
func (o TemplateVisualOutput) TreeMapVisual() TemplateTreeMapVisualPtrOutput {
	return o.ApplyT(func(v TemplateVisual) *TemplateTreeMapVisual { return v.TreeMapVisual }).(TemplateTreeMapVisualPtrOutput)
}

// A waterfall chart.
//
// For more information, see [Using waterfall charts](https://docs.aws.amazon.com/quicksight/latest/user/waterfall-chart.html) in the *Amazon QuickSight User Guide* .
func (o TemplateVisualOutput) WaterfallVisual() TemplateWaterfallVisualPtrOutput {
	return o.ApplyT(func(v TemplateVisual) *TemplateWaterfallVisual { return v.WaterfallVisual }).(TemplateWaterfallVisualPtrOutput)
}

// A word cloud.
//
// For more information, see [Using word clouds](https://docs.aws.amazon.com/quicksight/latest/user/word-cloud.html) in the *Amazon QuickSight User Guide* .
func (o TemplateVisualOutput) WordCloudVisual() TemplateWordCloudVisualPtrOutput {
	return o.ApplyT(func(v TemplateVisual) *TemplateWordCloudVisual { return v.WordCloudVisual }).(TemplateWordCloudVisualPtrOutput)
}

type TemplateVisualArrayOutput struct{ *pulumi.OutputState }

func (TemplateVisualArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateVisual)(nil)).Elem()
}

func (o TemplateVisualArrayOutput) ToTemplateVisualArrayOutput() TemplateVisualArrayOutput {
	return o
}

func (o TemplateVisualArrayOutput) ToTemplateVisualArrayOutputWithContext(ctx context.Context) TemplateVisualArrayOutput {
	return o
}

func (o TemplateVisualArrayOutput) Index(i pulumi.IntInput) TemplateVisualOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateVisual {
		return vs[0].([]TemplateVisual)[vs[1].(int)]
	}).(TemplateVisualOutput)
}

type TemplateVisualCustomAction struct {
	// A list of `VisualCustomActionOperations` .
	//
	// This is a union type structure. For this structure to be valid, only one of the attributes can be defined.
	ActionOperations []TemplateVisualCustomActionOperation `pulumi:"actionOperations"`
	// The ID of the `VisualCustomAction` .
	CustomActionId string `pulumi:"customActionId"`
	// The name of the `VisualCustomAction` .
	Name string `pulumi:"name"`
	// The status of the `VisualCustomAction` .
	Status *TemplateWidgetStatus `pulumi:"status"`
	// The trigger of the `VisualCustomAction` .
	//
	// Valid values are defined as follows:
	//
	// - `DATA_POINT_CLICK` : Initiates a custom action by a left pointer click on a data point.
	// - `DATA_POINT_MENU` : Initiates a custom action by right pointer click from the menu.
	Trigger TemplateVisualCustomActionTrigger `pulumi:"trigger"`
}

// TemplateVisualCustomActionInput is an input type that accepts TemplateVisualCustomActionArgs and TemplateVisualCustomActionOutput values.
// You can construct a concrete instance of `TemplateVisualCustomActionInput` via:
//
//	TemplateVisualCustomActionArgs{...}
type TemplateVisualCustomActionInput interface {
	pulumi.Input

	ToTemplateVisualCustomActionOutput() TemplateVisualCustomActionOutput
	ToTemplateVisualCustomActionOutputWithContext(context.Context) TemplateVisualCustomActionOutput
}

type TemplateVisualCustomActionArgs struct {
	// A list of `VisualCustomActionOperations` .
	//
	// This is a union type structure. For this structure to be valid, only one of the attributes can be defined.
	ActionOperations TemplateVisualCustomActionOperationArrayInput `pulumi:"actionOperations"`
	// The ID of the `VisualCustomAction` .
	CustomActionId pulumi.StringInput `pulumi:"customActionId"`
	// The name of the `VisualCustomAction` .
	Name pulumi.StringInput `pulumi:"name"`
	// The status of the `VisualCustomAction` .
	Status TemplateWidgetStatusPtrInput `pulumi:"status"`
	// The trigger of the `VisualCustomAction` .
	//
	// Valid values are defined as follows:
	//
	// - `DATA_POINT_CLICK` : Initiates a custom action by a left pointer click on a data point.
	// - `DATA_POINT_MENU` : Initiates a custom action by right pointer click from the menu.
	Trigger TemplateVisualCustomActionTriggerInput `pulumi:"trigger"`
}

func (TemplateVisualCustomActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateVisualCustomAction)(nil)).Elem()
}

func (i TemplateVisualCustomActionArgs) ToTemplateVisualCustomActionOutput() TemplateVisualCustomActionOutput {
	return i.ToTemplateVisualCustomActionOutputWithContext(context.Background())
}

func (i TemplateVisualCustomActionArgs) ToTemplateVisualCustomActionOutputWithContext(ctx context.Context) TemplateVisualCustomActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateVisualCustomActionOutput)
}

// TemplateVisualCustomActionArrayInput is an input type that accepts TemplateVisualCustomActionArray and TemplateVisualCustomActionArrayOutput values.
// You can construct a concrete instance of `TemplateVisualCustomActionArrayInput` via:
//
//	TemplateVisualCustomActionArray{ TemplateVisualCustomActionArgs{...} }
type TemplateVisualCustomActionArrayInput interface {
	pulumi.Input

	ToTemplateVisualCustomActionArrayOutput() TemplateVisualCustomActionArrayOutput
	ToTemplateVisualCustomActionArrayOutputWithContext(context.Context) TemplateVisualCustomActionArrayOutput
}

type TemplateVisualCustomActionArray []TemplateVisualCustomActionInput

func (TemplateVisualCustomActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateVisualCustomAction)(nil)).Elem()
}

func (i TemplateVisualCustomActionArray) ToTemplateVisualCustomActionArrayOutput() TemplateVisualCustomActionArrayOutput {
	return i.ToTemplateVisualCustomActionArrayOutputWithContext(context.Background())
}

func (i TemplateVisualCustomActionArray) ToTemplateVisualCustomActionArrayOutputWithContext(ctx context.Context) TemplateVisualCustomActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateVisualCustomActionArrayOutput)
}

type TemplateVisualCustomActionOutput struct{ *pulumi.OutputState }

func (TemplateVisualCustomActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateVisualCustomAction)(nil)).Elem()
}

func (o TemplateVisualCustomActionOutput) ToTemplateVisualCustomActionOutput() TemplateVisualCustomActionOutput {
	return o
}

func (o TemplateVisualCustomActionOutput) ToTemplateVisualCustomActionOutputWithContext(ctx context.Context) TemplateVisualCustomActionOutput {
	return o
}

// A list of `VisualCustomActionOperations` .
//
// This is a union type structure. For this structure to be valid, only one of the attributes can be defined.
func (o TemplateVisualCustomActionOutput) ActionOperations() TemplateVisualCustomActionOperationArrayOutput {
	return o.ApplyT(func(v TemplateVisualCustomAction) []TemplateVisualCustomActionOperation { return v.ActionOperations }).(TemplateVisualCustomActionOperationArrayOutput)
}

// The ID of the `VisualCustomAction` .
func (o TemplateVisualCustomActionOutput) CustomActionId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateVisualCustomAction) string { return v.CustomActionId }).(pulumi.StringOutput)
}

// The name of the `VisualCustomAction` .
func (o TemplateVisualCustomActionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateVisualCustomAction) string { return v.Name }).(pulumi.StringOutput)
}

// The status of the `VisualCustomAction` .
func (o TemplateVisualCustomActionOutput) Status() TemplateWidgetStatusPtrOutput {
	return o.ApplyT(func(v TemplateVisualCustomAction) *TemplateWidgetStatus { return v.Status }).(TemplateWidgetStatusPtrOutput)
}

// The trigger of the `VisualCustomAction` .
//
// Valid values are defined as follows:
//
// - `DATA_POINT_CLICK` : Initiates a custom action by a left pointer click on a data point.
// - `DATA_POINT_MENU` : Initiates a custom action by right pointer click from the menu.
func (o TemplateVisualCustomActionOutput) Trigger() TemplateVisualCustomActionTriggerOutput {
	return o.ApplyT(func(v TemplateVisualCustomAction) TemplateVisualCustomActionTrigger { return v.Trigger }).(TemplateVisualCustomActionTriggerOutput)
}

type TemplateVisualCustomActionArrayOutput struct{ *pulumi.OutputState }

func (TemplateVisualCustomActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateVisualCustomAction)(nil)).Elem()
}

func (o TemplateVisualCustomActionArrayOutput) ToTemplateVisualCustomActionArrayOutput() TemplateVisualCustomActionArrayOutput {
	return o
}

func (o TemplateVisualCustomActionArrayOutput) ToTemplateVisualCustomActionArrayOutputWithContext(ctx context.Context) TemplateVisualCustomActionArrayOutput {
	return o
}

func (o TemplateVisualCustomActionArrayOutput) Index(i pulumi.IntInput) TemplateVisualCustomActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateVisualCustomAction {
		return vs[0].([]TemplateVisualCustomAction)[vs[1].(int)]
	}).(TemplateVisualCustomActionOutput)
}

type TemplateVisualCustomActionOperation struct {
	// The filter operation that filters data included in a visual or in an entire sheet.
	FilterOperation *TemplateCustomActionFilterOperation `pulumi:"filterOperation"`
	// The navigation operation that navigates between different sheets in the same analysis.
	NavigationOperation *TemplateCustomActionNavigationOperation `pulumi:"navigationOperation"`
	// The set parameter operation that sets parameters in custom action.
	SetParametersOperation *TemplateCustomActionSetParametersOperation `pulumi:"setParametersOperation"`
	// The URL operation that opens a link to another webpage.
	UrlOperation *TemplateCustomActionUrlOperation `pulumi:"urlOperation"`
}

// TemplateVisualCustomActionOperationInput is an input type that accepts TemplateVisualCustomActionOperationArgs and TemplateVisualCustomActionOperationOutput values.
// You can construct a concrete instance of `TemplateVisualCustomActionOperationInput` via:
//
//	TemplateVisualCustomActionOperationArgs{...}
type TemplateVisualCustomActionOperationInput interface {
	pulumi.Input

	ToTemplateVisualCustomActionOperationOutput() TemplateVisualCustomActionOperationOutput
	ToTemplateVisualCustomActionOperationOutputWithContext(context.Context) TemplateVisualCustomActionOperationOutput
}

type TemplateVisualCustomActionOperationArgs struct {
	// The filter operation that filters data included in a visual or in an entire sheet.
	FilterOperation TemplateCustomActionFilterOperationPtrInput `pulumi:"filterOperation"`
	// The navigation operation that navigates between different sheets in the same analysis.
	NavigationOperation TemplateCustomActionNavigationOperationPtrInput `pulumi:"navigationOperation"`
	// The set parameter operation that sets parameters in custom action.
	SetParametersOperation TemplateCustomActionSetParametersOperationPtrInput `pulumi:"setParametersOperation"`
	// The URL operation that opens a link to another webpage.
	UrlOperation TemplateCustomActionUrlOperationPtrInput `pulumi:"urlOperation"`
}

func (TemplateVisualCustomActionOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateVisualCustomActionOperation)(nil)).Elem()
}

func (i TemplateVisualCustomActionOperationArgs) ToTemplateVisualCustomActionOperationOutput() TemplateVisualCustomActionOperationOutput {
	return i.ToTemplateVisualCustomActionOperationOutputWithContext(context.Background())
}

func (i TemplateVisualCustomActionOperationArgs) ToTemplateVisualCustomActionOperationOutputWithContext(ctx context.Context) TemplateVisualCustomActionOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateVisualCustomActionOperationOutput)
}

// TemplateVisualCustomActionOperationArrayInput is an input type that accepts TemplateVisualCustomActionOperationArray and TemplateVisualCustomActionOperationArrayOutput values.
// You can construct a concrete instance of `TemplateVisualCustomActionOperationArrayInput` via:
//
//	TemplateVisualCustomActionOperationArray{ TemplateVisualCustomActionOperationArgs{...} }
type TemplateVisualCustomActionOperationArrayInput interface {
	pulumi.Input

	ToTemplateVisualCustomActionOperationArrayOutput() TemplateVisualCustomActionOperationArrayOutput
	ToTemplateVisualCustomActionOperationArrayOutputWithContext(context.Context) TemplateVisualCustomActionOperationArrayOutput
}

type TemplateVisualCustomActionOperationArray []TemplateVisualCustomActionOperationInput

func (TemplateVisualCustomActionOperationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateVisualCustomActionOperation)(nil)).Elem()
}

func (i TemplateVisualCustomActionOperationArray) ToTemplateVisualCustomActionOperationArrayOutput() TemplateVisualCustomActionOperationArrayOutput {
	return i.ToTemplateVisualCustomActionOperationArrayOutputWithContext(context.Background())
}

func (i TemplateVisualCustomActionOperationArray) ToTemplateVisualCustomActionOperationArrayOutputWithContext(ctx context.Context) TemplateVisualCustomActionOperationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateVisualCustomActionOperationArrayOutput)
}

type TemplateVisualCustomActionOperationOutput struct{ *pulumi.OutputState }

func (TemplateVisualCustomActionOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateVisualCustomActionOperation)(nil)).Elem()
}

func (o TemplateVisualCustomActionOperationOutput) ToTemplateVisualCustomActionOperationOutput() TemplateVisualCustomActionOperationOutput {
	return o
}

func (o TemplateVisualCustomActionOperationOutput) ToTemplateVisualCustomActionOperationOutputWithContext(ctx context.Context) TemplateVisualCustomActionOperationOutput {
	return o
}

// The filter operation that filters data included in a visual or in an entire sheet.
func (o TemplateVisualCustomActionOperationOutput) FilterOperation() TemplateCustomActionFilterOperationPtrOutput {
	return o.ApplyT(func(v TemplateVisualCustomActionOperation) *TemplateCustomActionFilterOperation {
		return v.FilterOperation
	}).(TemplateCustomActionFilterOperationPtrOutput)
}

// The navigation operation that navigates between different sheets in the same analysis.
func (o TemplateVisualCustomActionOperationOutput) NavigationOperation() TemplateCustomActionNavigationOperationPtrOutput {
	return o.ApplyT(func(v TemplateVisualCustomActionOperation) *TemplateCustomActionNavigationOperation {
		return v.NavigationOperation
	}).(TemplateCustomActionNavigationOperationPtrOutput)
}

// The set parameter operation that sets parameters in custom action.
func (o TemplateVisualCustomActionOperationOutput) SetParametersOperation() TemplateCustomActionSetParametersOperationPtrOutput {
	return o.ApplyT(func(v TemplateVisualCustomActionOperation) *TemplateCustomActionSetParametersOperation {
		return v.SetParametersOperation
	}).(TemplateCustomActionSetParametersOperationPtrOutput)
}

// The URL operation that opens a link to another webpage.
func (o TemplateVisualCustomActionOperationOutput) UrlOperation() TemplateCustomActionUrlOperationPtrOutput {
	return o.ApplyT(func(v TemplateVisualCustomActionOperation) *TemplateCustomActionUrlOperation { return v.UrlOperation }).(TemplateCustomActionUrlOperationPtrOutput)
}

type TemplateVisualCustomActionOperationArrayOutput struct{ *pulumi.OutputState }

func (TemplateVisualCustomActionOperationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateVisualCustomActionOperation)(nil)).Elem()
}

func (o TemplateVisualCustomActionOperationArrayOutput) ToTemplateVisualCustomActionOperationArrayOutput() TemplateVisualCustomActionOperationArrayOutput {
	return o
}

func (o TemplateVisualCustomActionOperationArrayOutput) ToTemplateVisualCustomActionOperationArrayOutputWithContext(ctx context.Context) TemplateVisualCustomActionOperationArrayOutput {
	return o
}

func (o TemplateVisualCustomActionOperationArrayOutput) Index(i pulumi.IntInput) TemplateVisualCustomActionOperationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateVisualCustomActionOperation {
		return vs[0].([]TemplateVisualCustomActionOperation)[vs[1].(int)]
	}).(TemplateVisualCustomActionOperationOutput)
}

type TemplateVisualInteractionOptions struct {
	// The context menu options for a visual.
	ContextMenuOption *TemplateContextMenuOption `pulumi:"contextMenuOption"`
	// The on-visual menu options for a visual.
	VisualMenuOption *TemplateVisualMenuOption `pulumi:"visualMenuOption"`
}

// TemplateVisualInteractionOptionsInput is an input type that accepts TemplateVisualInteractionOptionsArgs and TemplateVisualInteractionOptionsOutput values.
// You can construct a concrete instance of `TemplateVisualInteractionOptionsInput` via:
//
//	TemplateVisualInteractionOptionsArgs{...}
type TemplateVisualInteractionOptionsInput interface {
	pulumi.Input

	ToTemplateVisualInteractionOptionsOutput() TemplateVisualInteractionOptionsOutput
	ToTemplateVisualInteractionOptionsOutputWithContext(context.Context) TemplateVisualInteractionOptionsOutput
}

type TemplateVisualInteractionOptionsArgs struct {
	// The context menu options for a visual.
	ContextMenuOption TemplateContextMenuOptionPtrInput `pulumi:"contextMenuOption"`
	// The on-visual menu options for a visual.
	VisualMenuOption TemplateVisualMenuOptionPtrInput `pulumi:"visualMenuOption"`
}

func (TemplateVisualInteractionOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateVisualInteractionOptions)(nil)).Elem()
}

func (i TemplateVisualInteractionOptionsArgs) ToTemplateVisualInteractionOptionsOutput() TemplateVisualInteractionOptionsOutput {
	return i.ToTemplateVisualInteractionOptionsOutputWithContext(context.Background())
}

func (i TemplateVisualInteractionOptionsArgs) ToTemplateVisualInteractionOptionsOutputWithContext(ctx context.Context) TemplateVisualInteractionOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateVisualInteractionOptionsOutput)
}

func (i TemplateVisualInteractionOptionsArgs) ToTemplateVisualInteractionOptionsPtrOutput() TemplateVisualInteractionOptionsPtrOutput {
	return i.ToTemplateVisualInteractionOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateVisualInteractionOptionsArgs) ToTemplateVisualInteractionOptionsPtrOutputWithContext(ctx context.Context) TemplateVisualInteractionOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateVisualInteractionOptionsOutput).ToTemplateVisualInteractionOptionsPtrOutputWithContext(ctx)
}

// TemplateVisualInteractionOptionsPtrInput is an input type that accepts TemplateVisualInteractionOptionsArgs, TemplateVisualInteractionOptionsPtr and TemplateVisualInteractionOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateVisualInteractionOptionsPtrInput` via:
//
//	        TemplateVisualInteractionOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateVisualInteractionOptionsPtrInput interface {
	pulumi.Input

	ToTemplateVisualInteractionOptionsPtrOutput() TemplateVisualInteractionOptionsPtrOutput
	ToTemplateVisualInteractionOptionsPtrOutputWithContext(context.Context) TemplateVisualInteractionOptionsPtrOutput
}

type templateVisualInteractionOptionsPtrType TemplateVisualInteractionOptionsArgs

func TemplateVisualInteractionOptionsPtr(v *TemplateVisualInteractionOptionsArgs) TemplateVisualInteractionOptionsPtrInput {
	return (*templateVisualInteractionOptionsPtrType)(v)
}

func (*templateVisualInteractionOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateVisualInteractionOptions)(nil)).Elem()
}

func (i *templateVisualInteractionOptionsPtrType) ToTemplateVisualInteractionOptionsPtrOutput() TemplateVisualInteractionOptionsPtrOutput {
	return i.ToTemplateVisualInteractionOptionsPtrOutputWithContext(context.Background())
}

func (i *templateVisualInteractionOptionsPtrType) ToTemplateVisualInteractionOptionsPtrOutputWithContext(ctx context.Context) TemplateVisualInteractionOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateVisualInteractionOptionsPtrOutput)
}

type TemplateVisualInteractionOptionsOutput struct{ *pulumi.OutputState }

func (TemplateVisualInteractionOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateVisualInteractionOptions)(nil)).Elem()
}

func (o TemplateVisualInteractionOptionsOutput) ToTemplateVisualInteractionOptionsOutput() TemplateVisualInteractionOptionsOutput {
	return o
}

func (o TemplateVisualInteractionOptionsOutput) ToTemplateVisualInteractionOptionsOutputWithContext(ctx context.Context) TemplateVisualInteractionOptionsOutput {
	return o
}

func (o TemplateVisualInteractionOptionsOutput) ToTemplateVisualInteractionOptionsPtrOutput() TemplateVisualInteractionOptionsPtrOutput {
	return o.ToTemplateVisualInteractionOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateVisualInteractionOptionsOutput) ToTemplateVisualInteractionOptionsPtrOutputWithContext(ctx context.Context) TemplateVisualInteractionOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateVisualInteractionOptions) *TemplateVisualInteractionOptions {
		return &v
	}).(TemplateVisualInteractionOptionsPtrOutput)
}

// The context menu options for a visual.
func (o TemplateVisualInteractionOptionsOutput) ContextMenuOption() TemplateContextMenuOptionPtrOutput {
	return o.ApplyT(func(v TemplateVisualInteractionOptions) *TemplateContextMenuOption { return v.ContextMenuOption }).(TemplateContextMenuOptionPtrOutput)
}

// The on-visual menu options for a visual.
func (o TemplateVisualInteractionOptionsOutput) VisualMenuOption() TemplateVisualMenuOptionPtrOutput {
	return o.ApplyT(func(v TemplateVisualInteractionOptions) *TemplateVisualMenuOption { return v.VisualMenuOption }).(TemplateVisualMenuOptionPtrOutput)
}

type TemplateVisualInteractionOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateVisualInteractionOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateVisualInteractionOptions)(nil)).Elem()
}

func (o TemplateVisualInteractionOptionsPtrOutput) ToTemplateVisualInteractionOptionsPtrOutput() TemplateVisualInteractionOptionsPtrOutput {
	return o
}

func (o TemplateVisualInteractionOptionsPtrOutput) ToTemplateVisualInteractionOptionsPtrOutputWithContext(ctx context.Context) TemplateVisualInteractionOptionsPtrOutput {
	return o
}

func (o TemplateVisualInteractionOptionsPtrOutput) Elem() TemplateVisualInteractionOptionsOutput {
	return o.ApplyT(func(v *TemplateVisualInteractionOptions) TemplateVisualInteractionOptions {
		if v != nil {
			return *v
		}
		var ret TemplateVisualInteractionOptions
		return ret
	}).(TemplateVisualInteractionOptionsOutput)
}

// The context menu options for a visual.
func (o TemplateVisualInteractionOptionsPtrOutput) ContextMenuOption() TemplateContextMenuOptionPtrOutput {
	return o.ApplyT(func(v *TemplateVisualInteractionOptions) *TemplateContextMenuOption {
		if v == nil {
			return nil
		}
		return v.ContextMenuOption
	}).(TemplateContextMenuOptionPtrOutput)
}

// The on-visual menu options for a visual.
func (o TemplateVisualInteractionOptionsPtrOutput) VisualMenuOption() TemplateVisualMenuOptionPtrOutput {
	return o.ApplyT(func(v *TemplateVisualInteractionOptions) *TemplateVisualMenuOption {
		if v == nil {
			return nil
		}
		return v.VisualMenuOption
	}).(TemplateVisualMenuOptionPtrOutput)
}

type TemplateVisualMenuOption struct {
	// The availaiblity status of a visual's menu options.
	AvailabilityStatus *TemplateDashboardBehavior `pulumi:"availabilityStatus"`
}

// TemplateVisualMenuOptionInput is an input type that accepts TemplateVisualMenuOptionArgs and TemplateVisualMenuOptionOutput values.
// You can construct a concrete instance of `TemplateVisualMenuOptionInput` via:
//
//	TemplateVisualMenuOptionArgs{...}
type TemplateVisualMenuOptionInput interface {
	pulumi.Input

	ToTemplateVisualMenuOptionOutput() TemplateVisualMenuOptionOutput
	ToTemplateVisualMenuOptionOutputWithContext(context.Context) TemplateVisualMenuOptionOutput
}

type TemplateVisualMenuOptionArgs struct {
	// The availaiblity status of a visual's menu options.
	AvailabilityStatus TemplateDashboardBehaviorPtrInput `pulumi:"availabilityStatus"`
}

func (TemplateVisualMenuOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateVisualMenuOption)(nil)).Elem()
}

func (i TemplateVisualMenuOptionArgs) ToTemplateVisualMenuOptionOutput() TemplateVisualMenuOptionOutput {
	return i.ToTemplateVisualMenuOptionOutputWithContext(context.Background())
}

func (i TemplateVisualMenuOptionArgs) ToTemplateVisualMenuOptionOutputWithContext(ctx context.Context) TemplateVisualMenuOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateVisualMenuOptionOutput)
}

func (i TemplateVisualMenuOptionArgs) ToTemplateVisualMenuOptionPtrOutput() TemplateVisualMenuOptionPtrOutput {
	return i.ToTemplateVisualMenuOptionPtrOutputWithContext(context.Background())
}

func (i TemplateVisualMenuOptionArgs) ToTemplateVisualMenuOptionPtrOutputWithContext(ctx context.Context) TemplateVisualMenuOptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateVisualMenuOptionOutput).ToTemplateVisualMenuOptionPtrOutputWithContext(ctx)
}

// TemplateVisualMenuOptionPtrInput is an input type that accepts TemplateVisualMenuOptionArgs, TemplateVisualMenuOptionPtr and TemplateVisualMenuOptionPtrOutput values.
// You can construct a concrete instance of `TemplateVisualMenuOptionPtrInput` via:
//
//	        TemplateVisualMenuOptionArgs{...}
//
//	or:
//
//	        nil
type TemplateVisualMenuOptionPtrInput interface {
	pulumi.Input

	ToTemplateVisualMenuOptionPtrOutput() TemplateVisualMenuOptionPtrOutput
	ToTemplateVisualMenuOptionPtrOutputWithContext(context.Context) TemplateVisualMenuOptionPtrOutput
}

type templateVisualMenuOptionPtrType TemplateVisualMenuOptionArgs

func TemplateVisualMenuOptionPtr(v *TemplateVisualMenuOptionArgs) TemplateVisualMenuOptionPtrInput {
	return (*templateVisualMenuOptionPtrType)(v)
}

func (*templateVisualMenuOptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateVisualMenuOption)(nil)).Elem()
}

func (i *templateVisualMenuOptionPtrType) ToTemplateVisualMenuOptionPtrOutput() TemplateVisualMenuOptionPtrOutput {
	return i.ToTemplateVisualMenuOptionPtrOutputWithContext(context.Background())
}

func (i *templateVisualMenuOptionPtrType) ToTemplateVisualMenuOptionPtrOutputWithContext(ctx context.Context) TemplateVisualMenuOptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateVisualMenuOptionPtrOutput)
}

type TemplateVisualMenuOptionOutput struct{ *pulumi.OutputState }

func (TemplateVisualMenuOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateVisualMenuOption)(nil)).Elem()
}

func (o TemplateVisualMenuOptionOutput) ToTemplateVisualMenuOptionOutput() TemplateVisualMenuOptionOutput {
	return o
}

func (o TemplateVisualMenuOptionOutput) ToTemplateVisualMenuOptionOutputWithContext(ctx context.Context) TemplateVisualMenuOptionOutput {
	return o
}

func (o TemplateVisualMenuOptionOutput) ToTemplateVisualMenuOptionPtrOutput() TemplateVisualMenuOptionPtrOutput {
	return o.ToTemplateVisualMenuOptionPtrOutputWithContext(context.Background())
}

func (o TemplateVisualMenuOptionOutput) ToTemplateVisualMenuOptionPtrOutputWithContext(ctx context.Context) TemplateVisualMenuOptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateVisualMenuOption) *TemplateVisualMenuOption {
		return &v
	}).(TemplateVisualMenuOptionPtrOutput)
}

// The availaiblity status of a visual's menu options.
func (o TemplateVisualMenuOptionOutput) AvailabilityStatus() TemplateDashboardBehaviorPtrOutput {
	return o.ApplyT(func(v TemplateVisualMenuOption) *TemplateDashboardBehavior { return v.AvailabilityStatus }).(TemplateDashboardBehaviorPtrOutput)
}

type TemplateVisualMenuOptionPtrOutput struct{ *pulumi.OutputState }

func (TemplateVisualMenuOptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateVisualMenuOption)(nil)).Elem()
}

func (o TemplateVisualMenuOptionPtrOutput) ToTemplateVisualMenuOptionPtrOutput() TemplateVisualMenuOptionPtrOutput {
	return o
}

func (o TemplateVisualMenuOptionPtrOutput) ToTemplateVisualMenuOptionPtrOutputWithContext(ctx context.Context) TemplateVisualMenuOptionPtrOutput {
	return o
}

func (o TemplateVisualMenuOptionPtrOutput) Elem() TemplateVisualMenuOptionOutput {
	return o.ApplyT(func(v *TemplateVisualMenuOption) TemplateVisualMenuOption {
		if v != nil {
			return *v
		}
		var ret TemplateVisualMenuOption
		return ret
	}).(TemplateVisualMenuOptionOutput)
}

// The availaiblity status of a visual's menu options.
func (o TemplateVisualMenuOptionPtrOutput) AvailabilityStatus() TemplateDashboardBehaviorPtrOutput {
	return o.ApplyT(func(v *TemplateVisualMenuOption) *TemplateDashboardBehavior {
		if v == nil {
			return nil
		}
		return v.AvailabilityStatus
	}).(TemplateDashboardBehaviorPtrOutput)
}

type TemplateVisualPalette struct {
	// The chart color options for the visual palette.
	ChartColor *string `pulumi:"chartColor"`
	// The color map options for the visual palette.
	ColorMap []TemplateDataPathColor `pulumi:"colorMap"`
}

// TemplateVisualPaletteInput is an input type that accepts TemplateVisualPaletteArgs and TemplateVisualPaletteOutput values.
// You can construct a concrete instance of `TemplateVisualPaletteInput` via:
//
//	TemplateVisualPaletteArgs{...}
type TemplateVisualPaletteInput interface {
	pulumi.Input

	ToTemplateVisualPaletteOutput() TemplateVisualPaletteOutput
	ToTemplateVisualPaletteOutputWithContext(context.Context) TemplateVisualPaletteOutput
}

type TemplateVisualPaletteArgs struct {
	// The chart color options for the visual palette.
	ChartColor pulumi.StringPtrInput `pulumi:"chartColor"`
	// The color map options for the visual palette.
	ColorMap TemplateDataPathColorArrayInput `pulumi:"colorMap"`
}

func (TemplateVisualPaletteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateVisualPalette)(nil)).Elem()
}

func (i TemplateVisualPaletteArgs) ToTemplateVisualPaletteOutput() TemplateVisualPaletteOutput {
	return i.ToTemplateVisualPaletteOutputWithContext(context.Background())
}

func (i TemplateVisualPaletteArgs) ToTemplateVisualPaletteOutputWithContext(ctx context.Context) TemplateVisualPaletteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateVisualPaletteOutput)
}

func (i TemplateVisualPaletteArgs) ToTemplateVisualPalettePtrOutput() TemplateVisualPalettePtrOutput {
	return i.ToTemplateVisualPalettePtrOutputWithContext(context.Background())
}

func (i TemplateVisualPaletteArgs) ToTemplateVisualPalettePtrOutputWithContext(ctx context.Context) TemplateVisualPalettePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateVisualPaletteOutput).ToTemplateVisualPalettePtrOutputWithContext(ctx)
}

// TemplateVisualPalettePtrInput is an input type that accepts TemplateVisualPaletteArgs, TemplateVisualPalettePtr and TemplateVisualPalettePtrOutput values.
// You can construct a concrete instance of `TemplateVisualPalettePtrInput` via:
//
//	        TemplateVisualPaletteArgs{...}
//
//	or:
//
//	        nil
type TemplateVisualPalettePtrInput interface {
	pulumi.Input

	ToTemplateVisualPalettePtrOutput() TemplateVisualPalettePtrOutput
	ToTemplateVisualPalettePtrOutputWithContext(context.Context) TemplateVisualPalettePtrOutput
}

type templateVisualPalettePtrType TemplateVisualPaletteArgs

func TemplateVisualPalettePtr(v *TemplateVisualPaletteArgs) TemplateVisualPalettePtrInput {
	return (*templateVisualPalettePtrType)(v)
}

func (*templateVisualPalettePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateVisualPalette)(nil)).Elem()
}

func (i *templateVisualPalettePtrType) ToTemplateVisualPalettePtrOutput() TemplateVisualPalettePtrOutput {
	return i.ToTemplateVisualPalettePtrOutputWithContext(context.Background())
}

func (i *templateVisualPalettePtrType) ToTemplateVisualPalettePtrOutputWithContext(ctx context.Context) TemplateVisualPalettePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateVisualPalettePtrOutput)
}

type TemplateVisualPaletteOutput struct{ *pulumi.OutputState }

func (TemplateVisualPaletteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateVisualPalette)(nil)).Elem()
}

func (o TemplateVisualPaletteOutput) ToTemplateVisualPaletteOutput() TemplateVisualPaletteOutput {
	return o
}

func (o TemplateVisualPaletteOutput) ToTemplateVisualPaletteOutputWithContext(ctx context.Context) TemplateVisualPaletteOutput {
	return o
}

func (o TemplateVisualPaletteOutput) ToTemplateVisualPalettePtrOutput() TemplateVisualPalettePtrOutput {
	return o.ToTemplateVisualPalettePtrOutputWithContext(context.Background())
}

func (o TemplateVisualPaletteOutput) ToTemplateVisualPalettePtrOutputWithContext(ctx context.Context) TemplateVisualPalettePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateVisualPalette) *TemplateVisualPalette {
		return &v
	}).(TemplateVisualPalettePtrOutput)
}

// The chart color options for the visual palette.
func (o TemplateVisualPaletteOutput) ChartColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateVisualPalette) *string { return v.ChartColor }).(pulumi.StringPtrOutput)
}

// The color map options for the visual palette.
func (o TemplateVisualPaletteOutput) ColorMap() TemplateDataPathColorArrayOutput {
	return o.ApplyT(func(v TemplateVisualPalette) []TemplateDataPathColor { return v.ColorMap }).(TemplateDataPathColorArrayOutput)
}

type TemplateVisualPalettePtrOutput struct{ *pulumi.OutputState }

func (TemplateVisualPalettePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateVisualPalette)(nil)).Elem()
}

func (o TemplateVisualPalettePtrOutput) ToTemplateVisualPalettePtrOutput() TemplateVisualPalettePtrOutput {
	return o
}

func (o TemplateVisualPalettePtrOutput) ToTemplateVisualPalettePtrOutputWithContext(ctx context.Context) TemplateVisualPalettePtrOutput {
	return o
}

func (o TemplateVisualPalettePtrOutput) Elem() TemplateVisualPaletteOutput {
	return o.ApplyT(func(v *TemplateVisualPalette) TemplateVisualPalette {
		if v != nil {
			return *v
		}
		var ret TemplateVisualPalette
		return ret
	}).(TemplateVisualPaletteOutput)
}

// The chart color options for the visual palette.
func (o TemplateVisualPalettePtrOutput) ChartColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateVisualPalette) *string {
		if v == nil {
			return nil
		}
		return v.ChartColor
	}).(pulumi.StringPtrOutput)
}

// The color map options for the visual palette.
func (o TemplateVisualPalettePtrOutput) ColorMap() TemplateDataPathColorArrayOutput {
	return o.ApplyT(func(v *TemplateVisualPalette) []TemplateDataPathColor {
		if v == nil {
			return nil
		}
		return v.ColorMap
	}).(TemplateDataPathColorArrayOutput)
}

type TemplateVisualSubtitleLabelOptions struct {
	// The long text format of the subtitle label, such as plain text or rich text.
	FormatText *TemplateLongFormatText `pulumi:"formatText"`
	// The visibility of the subtitle label.
	Visibility interface{} `pulumi:"visibility"`
}

// TemplateVisualSubtitleLabelOptionsInput is an input type that accepts TemplateVisualSubtitleLabelOptionsArgs and TemplateVisualSubtitleLabelOptionsOutput values.
// You can construct a concrete instance of `TemplateVisualSubtitleLabelOptionsInput` via:
//
//	TemplateVisualSubtitleLabelOptionsArgs{...}
type TemplateVisualSubtitleLabelOptionsInput interface {
	pulumi.Input

	ToTemplateVisualSubtitleLabelOptionsOutput() TemplateVisualSubtitleLabelOptionsOutput
	ToTemplateVisualSubtitleLabelOptionsOutputWithContext(context.Context) TemplateVisualSubtitleLabelOptionsOutput
}

type TemplateVisualSubtitleLabelOptionsArgs struct {
	// The long text format of the subtitle label, such as plain text or rich text.
	FormatText TemplateLongFormatTextPtrInput `pulumi:"formatText"`
	// The visibility of the subtitle label.
	Visibility pulumi.Input `pulumi:"visibility"`
}

func (TemplateVisualSubtitleLabelOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateVisualSubtitleLabelOptions)(nil)).Elem()
}

func (i TemplateVisualSubtitleLabelOptionsArgs) ToTemplateVisualSubtitleLabelOptionsOutput() TemplateVisualSubtitleLabelOptionsOutput {
	return i.ToTemplateVisualSubtitleLabelOptionsOutputWithContext(context.Background())
}

func (i TemplateVisualSubtitleLabelOptionsArgs) ToTemplateVisualSubtitleLabelOptionsOutputWithContext(ctx context.Context) TemplateVisualSubtitleLabelOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateVisualSubtitleLabelOptionsOutput)
}

func (i TemplateVisualSubtitleLabelOptionsArgs) ToTemplateVisualSubtitleLabelOptionsPtrOutput() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return i.ToTemplateVisualSubtitleLabelOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateVisualSubtitleLabelOptionsArgs) ToTemplateVisualSubtitleLabelOptionsPtrOutputWithContext(ctx context.Context) TemplateVisualSubtitleLabelOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateVisualSubtitleLabelOptionsOutput).ToTemplateVisualSubtitleLabelOptionsPtrOutputWithContext(ctx)
}

// TemplateVisualSubtitleLabelOptionsPtrInput is an input type that accepts TemplateVisualSubtitleLabelOptionsArgs, TemplateVisualSubtitleLabelOptionsPtr and TemplateVisualSubtitleLabelOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateVisualSubtitleLabelOptionsPtrInput` via:
//
//	        TemplateVisualSubtitleLabelOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateVisualSubtitleLabelOptionsPtrInput interface {
	pulumi.Input

	ToTemplateVisualSubtitleLabelOptionsPtrOutput() TemplateVisualSubtitleLabelOptionsPtrOutput
	ToTemplateVisualSubtitleLabelOptionsPtrOutputWithContext(context.Context) TemplateVisualSubtitleLabelOptionsPtrOutput
}

type templateVisualSubtitleLabelOptionsPtrType TemplateVisualSubtitleLabelOptionsArgs

func TemplateVisualSubtitleLabelOptionsPtr(v *TemplateVisualSubtitleLabelOptionsArgs) TemplateVisualSubtitleLabelOptionsPtrInput {
	return (*templateVisualSubtitleLabelOptionsPtrType)(v)
}

func (*templateVisualSubtitleLabelOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateVisualSubtitleLabelOptions)(nil)).Elem()
}

func (i *templateVisualSubtitleLabelOptionsPtrType) ToTemplateVisualSubtitleLabelOptionsPtrOutput() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return i.ToTemplateVisualSubtitleLabelOptionsPtrOutputWithContext(context.Background())
}

func (i *templateVisualSubtitleLabelOptionsPtrType) ToTemplateVisualSubtitleLabelOptionsPtrOutputWithContext(ctx context.Context) TemplateVisualSubtitleLabelOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

type TemplateVisualSubtitleLabelOptionsOutput struct{ *pulumi.OutputState }

func (TemplateVisualSubtitleLabelOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateVisualSubtitleLabelOptions)(nil)).Elem()
}

func (o TemplateVisualSubtitleLabelOptionsOutput) ToTemplateVisualSubtitleLabelOptionsOutput() TemplateVisualSubtitleLabelOptionsOutput {
	return o
}

func (o TemplateVisualSubtitleLabelOptionsOutput) ToTemplateVisualSubtitleLabelOptionsOutputWithContext(ctx context.Context) TemplateVisualSubtitleLabelOptionsOutput {
	return o
}

func (o TemplateVisualSubtitleLabelOptionsOutput) ToTemplateVisualSubtitleLabelOptionsPtrOutput() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ToTemplateVisualSubtitleLabelOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateVisualSubtitleLabelOptionsOutput) ToTemplateVisualSubtitleLabelOptionsPtrOutputWithContext(ctx context.Context) TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateVisualSubtitleLabelOptions) *TemplateVisualSubtitleLabelOptions {
		return &v
	}).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The long text format of the subtitle label, such as plain text or rich text.
func (o TemplateVisualSubtitleLabelOptionsOutput) FormatText() TemplateLongFormatTextPtrOutput {
	return o.ApplyT(func(v TemplateVisualSubtitleLabelOptions) *TemplateLongFormatText { return v.FormatText }).(TemplateLongFormatTextPtrOutput)
}

// The visibility of the subtitle label.
func (o TemplateVisualSubtitleLabelOptionsOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateVisualSubtitleLabelOptions) interface{} { return v.Visibility }).(pulumi.AnyOutput)
}

type TemplateVisualSubtitleLabelOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateVisualSubtitleLabelOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateVisualSubtitleLabelOptions)(nil)).Elem()
}

func (o TemplateVisualSubtitleLabelOptionsPtrOutput) ToTemplateVisualSubtitleLabelOptionsPtrOutput() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o
}

func (o TemplateVisualSubtitleLabelOptionsPtrOutput) ToTemplateVisualSubtitleLabelOptionsPtrOutputWithContext(ctx context.Context) TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o
}

func (o TemplateVisualSubtitleLabelOptionsPtrOutput) Elem() TemplateVisualSubtitleLabelOptionsOutput {
	return o.ApplyT(func(v *TemplateVisualSubtitleLabelOptions) TemplateVisualSubtitleLabelOptions {
		if v != nil {
			return *v
		}
		var ret TemplateVisualSubtitleLabelOptions
		return ret
	}).(TemplateVisualSubtitleLabelOptionsOutput)
}

// The long text format of the subtitle label, such as plain text or rich text.
func (o TemplateVisualSubtitleLabelOptionsPtrOutput) FormatText() TemplateLongFormatTextPtrOutput {
	return o.ApplyT(func(v *TemplateVisualSubtitleLabelOptions) *TemplateLongFormatText {
		if v == nil {
			return nil
		}
		return v.FormatText
	}).(TemplateLongFormatTextPtrOutput)
}

// The visibility of the subtitle label.
func (o TemplateVisualSubtitleLabelOptionsPtrOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateVisualSubtitleLabelOptions) interface{} {
		if v == nil {
			return nil
		}
		return v.Visibility
	}).(pulumi.AnyOutput)
}

type TemplateVisualTitleLabelOptions struct {
	// The short text format of the title label, such as plain text or rich text.
	FormatText *TemplateShortFormatText `pulumi:"formatText"`
	// The visibility of the title label.
	Visibility interface{} `pulumi:"visibility"`
}

// TemplateVisualTitleLabelOptionsInput is an input type that accepts TemplateVisualTitleLabelOptionsArgs and TemplateVisualTitleLabelOptionsOutput values.
// You can construct a concrete instance of `TemplateVisualTitleLabelOptionsInput` via:
//
//	TemplateVisualTitleLabelOptionsArgs{...}
type TemplateVisualTitleLabelOptionsInput interface {
	pulumi.Input

	ToTemplateVisualTitleLabelOptionsOutput() TemplateVisualTitleLabelOptionsOutput
	ToTemplateVisualTitleLabelOptionsOutputWithContext(context.Context) TemplateVisualTitleLabelOptionsOutput
}

type TemplateVisualTitleLabelOptionsArgs struct {
	// The short text format of the title label, such as plain text or rich text.
	FormatText TemplateShortFormatTextPtrInput `pulumi:"formatText"`
	// The visibility of the title label.
	Visibility pulumi.Input `pulumi:"visibility"`
}

func (TemplateVisualTitleLabelOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateVisualTitleLabelOptions)(nil)).Elem()
}

func (i TemplateVisualTitleLabelOptionsArgs) ToTemplateVisualTitleLabelOptionsOutput() TemplateVisualTitleLabelOptionsOutput {
	return i.ToTemplateVisualTitleLabelOptionsOutputWithContext(context.Background())
}

func (i TemplateVisualTitleLabelOptionsArgs) ToTemplateVisualTitleLabelOptionsOutputWithContext(ctx context.Context) TemplateVisualTitleLabelOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateVisualTitleLabelOptionsOutput)
}

func (i TemplateVisualTitleLabelOptionsArgs) ToTemplateVisualTitleLabelOptionsPtrOutput() TemplateVisualTitleLabelOptionsPtrOutput {
	return i.ToTemplateVisualTitleLabelOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateVisualTitleLabelOptionsArgs) ToTemplateVisualTitleLabelOptionsPtrOutputWithContext(ctx context.Context) TemplateVisualTitleLabelOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateVisualTitleLabelOptionsOutput).ToTemplateVisualTitleLabelOptionsPtrOutputWithContext(ctx)
}

// TemplateVisualTitleLabelOptionsPtrInput is an input type that accepts TemplateVisualTitleLabelOptionsArgs, TemplateVisualTitleLabelOptionsPtr and TemplateVisualTitleLabelOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateVisualTitleLabelOptionsPtrInput` via:
//
//	        TemplateVisualTitleLabelOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateVisualTitleLabelOptionsPtrInput interface {
	pulumi.Input

	ToTemplateVisualTitleLabelOptionsPtrOutput() TemplateVisualTitleLabelOptionsPtrOutput
	ToTemplateVisualTitleLabelOptionsPtrOutputWithContext(context.Context) TemplateVisualTitleLabelOptionsPtrOutput
}

type templateVisualTitleLabelOptionsPtrType TemplateVisualTitleLabelOptionsArgs

func TemplateVisualTitleLabelOptionsPtr(v *TemplateVisualTitleLabelOptionsArgs) TemplateVisualTitleLabelOptionsPtrInput {
	return (*templateVisualTitleLabelOptionsPtrType)(v)
}

func (*templateVisualTitleLabelOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateVisualTitleLabelOptions)(nil)).Elem()
}

func (i *templateVisualTitleLabelOptionsPtrType) ToTemplateVisualTitleLabelOptionsPtrOutput() TemplateVisualTitleLabelOptionsPtrOutput {
	return i.ToTemplateVisualTitleLabelOptionsPtrOutputWithContext(context.Background())
}

func (i *templateVisualTitleLabelOptionsPtrType) ToTemplateVisualTitleLabelOptionsPtrOutputWithContext(ctx context.Context) TemplateVisualTitleLabelOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateVisualTitleLabelOptionsPtrOutput)
}

type TemplateVisualTitleLabelOptionsOutput struct{ *pulumi.OutputState }

func (TemplateVisualTitleLabelOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateVisualTitleLabelOptions)(nil)).Elem()
}

func (o TemplateVisualTitleLabelOptionsOutput) ToTemplateVisualTitleLabelOptionsOutput() TemplateVisualTitleLabelOptionsOutput {
	return o
}

func (o TemplateVisualTitleLabelOptionsOutput) ToTemplateVisualTitleLabelOptionsOutputWithContext(ctx context.Context) TemplateVisualTitleLabelOptionsOutput {
	return o
}

func (o TemplateVisualTitleLabelOptionsOutput) ToTemplateVisualTitleLabelOptionsPtrOutput() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ToTemplateVisualTitleLabelOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateVisualTitleLabelOptionsOutput) ToTemplateVisualTitleLabelOptionsPtrOutputWithContext(ctx context.Context) TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateVisualTitleLabelOptions) *TemplateVisualTitleLabelOptions {
		return &v
	}).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The short text format of the title label, such as plain text or rich text.
func (o TemplateVisualTitleLabelOptionsOutput) FormatText() TemplateShortFormatTextPtrOutput {
	return o.ApplyT(func(v TemplateVisualTitleLabelOptions) *TemplateShortFormatText { return v.FormatText }).(TemplateShortFormatTextPtrOutput)
}

// The visibility of the title label.
func (o TemplateVisualTitleLabelOptionsOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v TemplateVisualTitleLabelOptions) interface{} { return v.Visibility }).(pulumi.AnyOutput)
}

type TemplateVisualTitleLabelOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateVisualTitleLabelOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateVisualTitleLabelOptions)(nil)).Elem()
}

func (o TemplateVisualTitleLabelOptionsPtrOutput) ToTemplateVisualTitleLabelOptionsPtrOutput() TemplateVisualTitleLabelOptionsPtrOutput {
	return o
}

func (o TemplateVisualTitleLabelOptionsPtrOutput) ToTemplateVisualTitleLabelOptionsPtrOutputWithContext(ctx context.Context) TemplateVisualTitleLabelOptionsPtrOutput {
	return o
}

func (o TemplateVisualTitleLabelOptionsPtrOutput) Elem() TemplateVisualTitleLabelOptionsOutput {
	return o.ApplyT(func(v *TemplateVisualTitleLabelOptions) TemplateVisualTitleLabelOptions {
		if v != nil {
			return *v
		}
		var ret TemplateVisualTitleLabelOptions
		return ret
	}).(TemplateVisualTitleLabelOptionsOutput)
}

// The short text format of the title label, such as plain text or rich text.
func (o TemplateVisualTitleLabelOptionsPtrOutput) FormatText() TemplateShortFormatTextPtrOutput {
	return o.ApplyT(func(v *TemplateVisualTitleLabelOptions) *TemplateShortFormatText {
		if v == nil {
			return nil
		}
		return v.FormatText
	}).(TemplateShortFormatTextPtrOutput)
}

// The visibility of the title label.
func (o TemplateVisualTitleLabelOptionsPtrOutput) Visibility() pulumi.AnyOutput {
	return o.ApplyT(func(v *TemplateVisualTitleLabelOptions) interface{} {
		if v == nil {
			return nil
		}
		return v.Visibility
	}).(pulumi.AnyOutput)
}

type TemplateWaterfallChartAggregatedFieldWells struct {
	// The breakdown field wells of a waterfall visual.
	Breakdowns []TemplateDimensionField `pulumi:"breakdowns"`
	// The category field wells of a waterfall visual.
	Categories []TemplateDimensionField `pulumi:"categories"`
	// The value field wells of a waterfall visual.
	Values []TemplateMeasureField `pulumi:"values"`
}

// TemplateWaterfallChartAggregatedFieldWellsInput is an input type that accepts TemplateWaterfallChartAggregatedFieldWellsArgs and TemplateWaterfallChartAggregatedFieldWellsOutput values.
// You can construct a concrete instance of `TemplateWaterfallChartAggregatedFieldWellsInput` via:
//
//	TemplateWaterfallChartAggregatedFieldWellsArgs{...}
type TemplateWaterfallChartAggregatedFieldWellsInput interface {
	pulumi.Input

	ToTemplateWaterfallChartAggregatedFieldWellsOutput() TemplateWaterfallChartAggregatedFieldWellsOutput
	ToTemplateWaterfallChartAggregatedFieldWellsOutputWithContext(context.Context) TemplateWaterfallChartAggregatedFieldWellsOutput
}

type TemplateWaterfallChartAggregatedFieldWellsArgs struct {
	// The breakdown field wells of a waterfall visual.
	Breakdowns TemplateDimensionFieldArrayInput `pulumi:"breakdowns"`
	// The category field wells of a waterfall visual.
	Categories TemplateDimensionFieldArrayInput `pulumi:"categories"`
	// The value field wells of a waterfall visual.
	Values TemplateMeasureFieldArrayInput `pulumi:"values"`
}

func (TemplateWaterfallChartAggregatedFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWaterfallChartAggregatedFieldWells)(nil)).Elem()
}

func (i TemplateWaterfallChartAggregatedFieldWellsArgs) ToTemplateWaterfallChartAggregatedFieldWellsOutput() TemplateWaterfallChartAggregatedFieldWellsOutput {
	return i.ToTemplateWaterfallChartAggregatedFieldWellsOutputWithContext(context.Background())
}

func (i TemplateWaterfallChartAggregatedFieldWellsArgs) ToTemplateWaterfallChartAggregatedFieldWellsOutputWithContext(ctx context.Context) TemplateWaterfallChartAggregatedFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWaterfallChartAggregatedFieldWellsOutput)
}

func (i TemplateWaterfallChartAggregatedFieldWellsArgs) ToTemplateWaterfallChartAggregatedFieldWellsPtrOutput() TemplateWaterfallChartAggregatedFieldWellsPtrOutput {
	return i.ToTemplateWaterfallChartAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i TemplateWaterfallChartAggregatedFieldWellsArgs) ToTemplateWaterfallChartAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartAggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWaterfallChartAggregatedFieldWellsOutput).ToTemplateWaterfallChartAggregatedFieldWellsPtrOutputWithContext(ctx)
}

// TemplateWaterfallChartAggregatedFieldWellsPtrInput is an input type that accepts TemplateWaterfallChartAggregatedFieldWellsArgs, TemplateWaterfallChartAggregatedFieldWellsPtr and TemplateWaterfallChartAggregatedFieldWellsPtrOutput values.
// You can construct a concrete instance of `TemplateWaterfallChartAggregatedFieldWellsPtrInput` via:
//
//	        TemplateWaterfallChartAggregatedFieldWellsArgs{...}
//
//	or:
//
//	        nil
type TemplateWaterfallChartAggregatedFieldWellsPtrInput interface {
	pulumi.Input

	ToTemplateWaterfallChartAggregatedFieldWellsPtrOutput() TemplateWaterfallChartAggregatedFieldWellsPtrOutput
	ToTemplateWaterfallChartAggregatedFieldWellsPtrOutputWithContext(context.Context) TemplateWaterfallChartAggregatedFieldWellsPtrOutput
}

type templateWaterfallChartAggregatedFieldWellsPtrType TemplateWaterfallChartAggregatedFieldWellsArgs

func TemplateWaterfallChartAggregatedFieldWellsPtr(v *TemplateWaterfallChartAggregatedFieldWellsArgs) TemplateWaterfallChartAggregatedFieldWellsPtrInput {
	return (*templateWaterfallChartAggregatedFieldWellsPtrType)(v)
}

func (*templateWaterfallChartAggregatedFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWaterfallChartAggregatedFieldWells)(nil)).Elem()
}

func (i *templateWaterfallChartAggregatedFieldWellsPtrType) ToTemplateWaterfallChartAggregatedFieldWellsPtrOutput() TemplateWaterfallChartAggregatedFieldWellsPtrOutput {
	return i.ToTemplateWaterfallChartAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i *templateWaterfallChartAggregatedFieldWellsPtrType) ToTemplateWaterfallChartAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartAggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWaterfallChartAggregatedFieldWellsPtrOutput)
}

type TemplateWaterfallChartAggregatedFieldWellsOutput struct{ *pulumi.OutputState }

func (TemplateWaterfallChartAggregatedFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWaterfallChartAggregatedFieldWells)(nil)).Elem()
}

func (o TemplateWaterfallChartAggregatedFieldWellsOutput) ToTemplateWaterfallChartAggregatedFieldWellsOutput() TemplateWaterfallChartAggregatedFieldWellsOutput {
	return o
}

func (o TemplateWaterfallChartAggregatedFieldWellsOutput) ToTemplateWaterfallChartAggregatedFieldWellsOutputWithContext(ctx context.Context) TemplateWaterfallChartAggregatedFieldWellsOutput {
	return o
}

func (o TemplateWaterfallChartAggregatedFieldWellsOutput) ToTemplateWaterfallChartAggregatedFieldWellsPtrOutput() TemplateWaterfallChartAggregatedFieldWellsPtrOutput {
	return o.ToTemplateWaterfallChartAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (o TemplateWaterfallChartAggregatedFieldWellsOutput) ToTemplateWaterfallChartAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartAggregatedFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateWaterfallChartAggregatedFieldWells) *TemplateWaterfallChartAggregatedFieldWells {
		return &v
	}).(TemplateWaterfallChartAggregatedFieldWellsPtrOutput)
}

// The breakdown field wells of a waterfall visual.
func (o TemplateWaterfallChartAggregatedFieldWellsOutput) Breakdowns() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v TemplateWaterfallChartAggregatedFieldWells) []TemplateDimensionField { return v.Breakdowns }).(TemplateDimensionFieldArrayOutput)
}

// The category field wells of a waterfall visual.
func (o TemplateWaterfallChartAggregatedFieldWellsOutput) Categories() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v TemplateWaterfallChartAggregatedFieldWells) []TemplateDimensionField { return v.Categories }).(TemplateDimensionFieldArrayOutput)
}

// The value field wells of a waterfall visual.
func (o TemplateWaterfallChartAggregatedFieldWellsOutput) Values() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v TemplateWaterfallChartAggregatedFieldWells) []TemplateMeasureField { return v.Values }).(TemplateMeasureFieldArrayOutput)
}

type TemplateWaterfallChartAggregatedFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (TemplateWaterfallChartAggregatedFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWaterfallChartAggregatedFieldWells)(nil)).Elem()
}

func (o TemplateWaterfallChartAggregatedFieldWellsPtrOutput) ToTemplateWaterfallChartAggregatedFieldWellsPtrOutput() TemplateWaterfallChartAggregatedFieldWellsPtrOutput {
	return o
}

func (o TemplateWaterfallChartAggregatedFieldWellsPtrOutput) ToTemplateWaterfallChartAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartAggregatedFieldWellsPtrOutput {
	return o
}

func (o TemplateWaterfallChartAggregatedFieldWellsPtrOutput) Elem() TemplateWaterfallChartAggregatedFieldWellsOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartAggregatedFieldWells) TemplateWaterfallChartAggregatedFieldWells {
		if v != nil {
			return *v
		}
		var ret TemplateWaterfallChartAggregatedFieldWells
		return ret
	}).(TemplateWaterfallChartAggregatedFieldWellsOutput)
}

// The breakdown field wells of a waterfall visual.
func (o TemplateWaterfallChartAggregatedFieldWellsPtrOutput) Breakdowns() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartAggregatedFieldWells) []TemplateDimensionField {
		if v == nil {
			return nil
		}
		return v.Breakdowns
	}).(TemplateDimensionFieldArrayOutput)
}

// The category field wells of a waterfall visual.
func (o TemplateWaterfallChartAggregatedFieldWellsPtrOutput) Categories() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartAggregatedFieldWells) []TemplateDimensionField {
		if v == nil {
			return nil
		}
		return v.Categories
	}).(TemplateDimensionFieldArrayOutput)
}

// The value field wells of a waterfall visual.
func (o TemplateWaterfallChartAggregatedFieldWellsPtrOutput) Values() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartAggregatedFieldWells) []TemplateMeasureField {
		if v == nil {
			return nil
		}
		return v.Values
	}).(TemplateMeasureFieldArrayOutput)
}

type TemplateWaterfallChartColorConfiguration struct {
	// The color configuration for individual groups within a waterfall visual.
	GroupColorConfiguration *TemplateWaterfallChartGroupColorConfiguration `pulumi:"groupColorConfiguration"`
}

// TemplateWaterfallChartColorConfigurationInput is an input type that accepts TemplateWaterfallChartColorConfigurationArgs and TemplateWaterfallChartColorConfigurationOutput values.
// You can construct a concrete instance of `TemplateWaterfallChartColorConfigurationInput` via:
//
//	TemplateWaterfallChartColorConfigurationArgs{...}
type TemplateWaterfallChartColorConfigurationInput interface {
	pulumi.Input

	ToTemplateWaterfallChartColorConfigurationOutput() TemplateWaterfallChartColorConfigurationOutput
	ToTemplateWaterfallChartColorConfigurationOutputWithContext(context.Context) TemplateWaterfallChartColorConfigurationOutput
}

type TemplateWaterfallChartColorConfigurationArgs struct {
	// The color configuration for individual groups within a waterfall visual.
	GroupColorConfiguration TemplateWaterfallChartGroupColorConfigurationPtrInput `pulumi:"groupColorConfiguration"`
}

func (TemplateWaterfallChartColorConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWaterfallChartColorConfiguration)(nil)).Elem()
}

func (i TemplateWaterfallChartColorConfigurationArgs) ToTemplateWaterfallChartColorConfigurationOutput() TemplateWaterfallChartColorConfigurationOutput {
	return i.ToTemplateWaterfallChartColorConfigurationOutputWithContext(context.Background())
}

func (i TemplateWaterfallChartColorConfigurationArgs) ToTemplateWaterfallChartColorConfigurationOutputWithContext(ctx context.Context) TemplateWaterfallChartColorConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWaterfallChartColorConfigurationOutput)
}

func (i TemplateWaterfallChartColorConfigurationArgs) ToTemplateWaterfallChartColorConfigurationPtrOutput() TemplateWaterfallChartColorConfigurationPtrOutput {
	return i.ToTemplateWaterfallChartColorConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateWaterfallChartColorConfigurationArgs) ToTemplateWaterfallChartColorConfigurationPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartColorConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWaterfallChartColorConfigurationOutput).ToTemplateWaterfallChartColorConfigurationPtrOutputWithContext(ctx)
}

// TemplateWaterfallChartColorConfigurationPtrInput is an input type that accepts TemplateWaterfallChartColorConfigurationArgs, TemplateWaterfallChartColorConfigurationPtr and TemplateWaterfallChartColorConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateWaterfallChartColorConfigurationPtrInput` via:
//
//	        TemplateWaterfallChartColorConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateWaterfallChartColorConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateWaterfallChartColorConfigurationPtrOutput() TemplateWaterfallChartColorConfigurationPtrOutput
	ToTemplateWaterfallChartColorConfigurationPtrOutputWithContext(context.Context) TemplateWaterfallChartColorConfigurationPtrOutput
}

type templateWaterfallChartColorConfigurationPtrType TemplateWaterfallChartColorConfigurationArgs

func TemplateWaterfallChartColorConfigurationPtr(v *TemplateWaterfallChartColorConfigurationArgs) TemplateWaterfallChartColorConfigurationPtrInput {
	return (*templateWaterfallChartColorConfigurationPtrType)(v)
}

func (*templateWaterfallChartColorConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWaterfallChartColorConfiguration)(nil)).Elem()
}

func (i *templateWaterfallChartColorConfigurationPtrType) ToTemplateWaterfallChartColorConfigurationPtrOutput() TemplateWaterfallChartColorConfigurationPtrOutput {
	return i.ToTemplateWaterfallChartColorConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateWaterfallChartColorConfigurationPtrType) ToTemplateWaterfallChartColorConfigurationPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartColorConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWaterfallChartColorConfigurationPtrOutput)
}

type TemplateWaterfallChartColorConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateWaterfallChartColorConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWaterfallChartColorConfiguration)(nil)).Elem()
}

func (o TemplateWaterfallChartColorConfigurationOutput) ToTemplateWaterfallChartColorConfigurationOutput() TemplateWaterfallChartColorConfigurationOutput {
	return o
}

func (o TemplateWaterfallChartColorConfigurationOutput) ToTemplateWaterfallChartColorConfigurationOutputWithContext(ctx context.Context) TemplateWaterfallChartColorConfigurationOutput {
	return o
}

func (o TemplateWaterfallChartColorConfigurationOutput) ToTemplateWaterfallChartColorConfigurationPtrOutput() TemplateWaterfallChartColorConfigurationPtrOutput {
	return o.ToTemplateWaterfallChartColorConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateWaterfallChartColorConfigurationOutput) ToTemplateWaterfallChartColorConfigurationPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartColorConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateWaterfallChartColorConfiguration) *TemplateWaterfallChartColorConfiguration {
		return &v
	}).(TemplateWaterfallChartColorConfigurationPtrOutput)
}

// The color configuration for individual groups within a waterfall visual.
func (o TemplateWaterfallChartColorConfigurationOutput) GroupColorConfiguration() TemplateWaterfallChartGroupColorConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateWaterfallChartColorConfiguration) *TemplateWaterfallChartGroupColorConfiguration {
		return v.GroupColorConfiguration
	}).(TemplateWaterfallChartGroupColorConfigurationPtrOutput)
}

type TemplateWaterfallChartColorConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateWaterfallChartColorConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWaterfallChartColorConfiguration)(nil)).Elem()
}

func (o TemplateWaterfallChartColorConfigurationPtrOutput) ToTemplateWaterfallChartColorConfigurationPtrOutput() TemplateWaterfallChartColorConfigurationPtrOutput {
	return o
}

func (o TemplateWaterfallChartColorConfigurationPtrOutput) ToTemplateWaterfallChartColorConfigurationPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartColorConfigurationPtrOutput {
	return o
}

func (o TemplateWaterfallChartColorConfigurationPtrOutput) Elem() TemplateWaterfallChartColorConfigurationOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartColorConfiguration) TemplateWaterfallChartColorConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateWaterfallChartColorConfiguration
		return ret
	}).(TemplateWaterfallChartColorConfigurationOutput)
}

// The color configuration for individual groups within a waterfall visual.
func (o TemplateWaterfallChartColorConfigurationPtrOutput) GroupColorConfiguration() TemplateWaterfallChartGroupColorConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartColorConfiguration) *TemplateWaterfallChartGroupColorConfiguration {
		if v == nil {
			return nil
		}
		return v.GroupColorConfiguration
	}).(TemplateWaterfallChartGroupColorConfigurationPtrOutput)
}

type TemplateWaterfallChartConfiguration struct {
	// The options that determine the presentation of the category axis.
	CategoryAxisDisplayOptions *TemplateAxisDisplayOptions `pulumi:"categoryAxisDisplayOptions"`
	// The options that determine the presentation of the category axis label.
	CategoryAxisLabelOptions *TemplateChartAxisLabelOptions `pulumi:"categoryAxisLabelOptions"`
	// The color configuration of a waterfall visual.
	ColorConfiguration *TemplateWaterfallChartColorConfiguration `pulumi:"colorConfiguration"`
	// The data label configuration of a waterfall visual.
	DataLabels *TemplateDataLabelOptions `pulumi:"dataLabels"`
	// The field well configuration of a waterfall visual.
	FieldWells *TemplateWaterfallChartFieldWells `pulumi:"fieldWells"`
	// The general visual interactions setup for a visual.
	Interactions *TemplateVisualInteractionOptions `pulumi:"interactions"`
	// The legend configuration of a waterfall visual.
	Legend *TemplateLegendOptions `pulumi:"legend"`
	// The options that determine the presentation of the y-axis.
	PrimaryYAxisDisplayOptions *TemplateAxisDisplayOptions `pulumi:"primaryYAxisDisplayOptions"`
	// The options that determine the presentation of the y-axis label.
	PrimaryYAxisLabelOptions *TemplateChartAxisLabelOptions `pulumi:"primaryYAxisLabelOptions"`
	// The sort configuration of a waterfall visual.
	SortConfiguration *TemplateWaterfallChartSortConfiguration `pulumi:"sortConfiguration"`
	// The visual palette configuration of a waterfall visual.
	VisualPalette *TemplateVisualPalette `pulumi:"visualPalette"`
	// The options that determine the presentation of a waterfall visual.
	WaterfallChartOptions *TemplateWaterfallChartOptions `pulumi:"waterfallChartOptions"`
}

// TemplateWaterfallChartConfigurationInput is an input type that accepts TemplateWaterfallChartConfigurationArgs and TemplateWaterfallChartConfigurationOutput values.
// You can construct a concrete instance of `TemplateWaterfallChartConfigurationInput` via:
//
//	TemplateWaterfallChartConfigurationArgs{...}
type TemplateWaterfallChartConfigurationInput interface {
	pulumi.Input

	ToTemplateWaterfallChartConfigurationOutput() TemplateWaterfallChartConfigurationOutput
	ToTemplateWaterfallChartConfigurationOutputWithContext(context.Context) TemplateWaterfallChartConfigurationOutput
}

type TemplateWaterfallChartConfigurationArgs struct {
	// The options that determine the presentation of the category axis.
	CategoryAxisDisplayOptions TemplateAxisDisplayOptionsPtrInput `pulumi:"categoryAxisDisplayOptions"`
	// The options that determine the presentation of the category axis label.
	CategoryAxisLabelOptions TemplateChartAxisLabelOptionsPtrInput `pulumi:"categoryAxisLabelOptions"`
	// The color configuration of a waterfall visual.
	ColorConfiguration TemplateWaterfallChartColorConfigurationPtrInput `pulumi:"colorConfiguration"`
	// The data label configuration of a waterfall visual.
	DataLabels TemplateDataLabelOptionsPtrInput `pulumi:"dataLabels"`
	// The field well configuration of a waterfall visual.
	FieldWells TemplateWaterfallChartFieldWellsPtrInput `pulumi:"fieldWells"`
	// The general visual interactions setup for a visual.
	Interactions TemplateVisualInteractionOptionsPtrInput `pulumi:"interactions"`
	// The legend configuration of a waterfall visual.
	Legend TemplateLegendOptionsPtrInput `pulumi:"legend"`
	// The options that determine the presentation of the y-axis.
	PrimaryYAxisDisplayOptions TemplateAxisDisplayOptionsPtrInput `pulumi:"primaryYAxisDisplayOptions"`
	// The options that determine the presentation of the y-axis label.
	PrimaryYAxisLabelOptions TemplateChartAxisLabelOptionsPtrInput `pulumi:"primaryYAxisLabelOptions"`
	// The sort configuration of a waterfall visual.
	SortConfiguration TemplateWaterfallChartSortConfigurationPtrInput `pulumi:"sortConfiguration"`
	// The visual palette configuration of a waterfall visual.
	VisualPalette TemplateVisualPalettePtrInput `pulumi:"visualPalette"`
	// The options that determine the presentation of a waterfall visual.
	WaterfallChartOptions TemplateWaterfallChartOptionsPtrInput `pulumi:"waterfallChartOptions"`
}

func (TemplateWaterfallChartConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWaterfallChartConfiguration)(nil)).Elem()
}

func (i TemplateWaterfallChartConfigurationArgs) ToTemplateWaterfallChartConfigurationOutput() TemplateWaterfallChartConfigurationOutput {
	return i.ToTemplateWaterfallChartConfigurationOutputWithContext(context.Background())
}

func (i TemplateWaterfallChartConfigurationArgs) ToTemplateWaterfallChartConfigurationOutputWithContext(ctx context.Context) TemplateWaterfallChartConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWaterfallChartConfigurationOutput)
}

func (i TemplateWaterfallChartConfigurationArgs) ToTemplateWaterfallChartConfigurationPtrOutput() TemplateWaterfallChartConfigurationPtrOutput {
	return i.ToTemplateWaterfallChartConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateWaterfallChartConfigurationArgs) ToTemplateWaterfallChartConfigurationPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWaterfallChartConfigurationOutput).ToTemplateWaterfallChartConfigurationPtrOutputWithContext(ctx)
}

// TemplateWaterfallChartConfigurationPtrInput is an input type that accepts TemplateWaterfallChartConfigurationArgs, TemplateWaterfallChartConfigurationPtr and TemplateWaterfallChartConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateWaterfallChartConfigurationPtrInput` via:
//
//	        TemplateWaterfallChartConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateWaterfallChartConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateWaterfallChartConfigurationPtrOutput() TemplateWaterfallChartConfigurationPtrOutput
	ToTemplateWaterfallChartConfigurationPtrOutputWithContext(context.Context) TemplateWaterfallChartConfigurationPtrOutput
}

type templateWaterfallChartConfigurationPtrType TemplateWaterfallChartConfigurationArgs

func TemplateWaterfallChartConfigurationPtr(v *TemplateWaterfallChartConfigurationArgs) TemplateWaterfallChartConfigurationPtrInput {
	return (*templateWaterfallChartConfigurationPtrType)(v)
}

func (*templateWaterfallChartConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWaterfallChartConfiguration)(nil)).Elem()
}

func (i *templateWaterfallChartConfigurationPtrType) ToTemplateWaterfallChartConfigurationPtrOutput() TemplateWaterfallChartConfigurationPtrOutput {
	return i.ToTemplateWaterfallChartConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateWaterfallChartConfigurationPtrType) ToTemplateWaterfallChartConfigurationPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWaterfallChartConfigurationPtrOutput)
}

type TemplateWaterfallChartConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateWaterfallChartConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWaterfallChartConfiguration)(nil)).Elem()
}

func (o TemplateWaterfallChartConfigurationOutput) ToTemplateWaterfallChartConfigurationOutput() TemplateWaterfallChartConfigurationOutput {
	return o
}

func (o TemplateWaterfallChartConfigurationOutput) ToTemplateWaterfallChartConfigurationOutputWithContext(ctx context.Context) TemplateWaterfallChartConfigurationOutput {
	return o
}

func (o TemplateWaterfallChartConfigurationOutput) ToTemplateWaterfallChartConfigurationPtrOutput() TemplateWaterfallChartConfigurationPtrOutput {
	return o.ToTemplateWaterfallChartConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateWaterfallChartConfigurationOutput) ToTemplateWaterfallChartConfigurationPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateWaterfallChartConfiguration) *TemplateWaterfallChartConfiguration {
		return &v
	}).(TemplateWaterfallChartConfigurationPtrOutput)
}

// The options that determine the presentation of the category axis.
func (o TemplateWaterfallChartConfigurationOutput) CategoryAxisDisplayOptions() TemplateAxisDisplayOptionsPtrOutput {
	return o.ApplyT(func(v TemplateWaterfallChartConfiguration) *TemplateAxisDisplayOptions {
		return v.CategoryAxisDisplayOptions
	}).(TemplateAxisDisplayOptionsPtrOutput)
}

// The options that determine the presentation of the category axis label.
func (o TemplateWaterfallChartConfigurationOutput) CategoryAxisLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateWaterfallChartConfiguration) *TemplateChartAxisLabelOptions {
		return v.CategoryAxisLabelOptions
	}).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The color configuration of a waterfall visual.
func (o TemplateWaterfallChartConfigurationOutput) ColorConfiguration() TemplateWaterfallChartColorConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateWaterfallChartConfiguration) *TemplateWaterfallChartColorConfiguration {
		return v.ColorConfiguration
	}).(TemplateWaterfallChartColorConfigurationPtrOutput)
}

// The data label configuration of a waterfall visual.
func (o TemplateWaterfallChartConfigurationOutput) DataLabels() TemplateDataLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateWaterfallChartConfiguration) *TemplateDataLabelOptions { return v.DataLabels }).(TemplateDataLabelOptionsPtrOutput)
}

// The field well configuration of a waterfall visual.
func (o TemplateWaterfallChartConfigurationOutput) FieldWells() TemplateWaterfallChartFieldWellsPtrOutput {
	return o.ApplyT(func(v TemplateWaterfallChartConfiguration) *TemplateWaterfallChartFieldWells { return v.FieldWells }).(TemplateWaterfallChartFieldWellsPtrOutput)
}

// The general visual interactions setup for a visual.
func (o TemplateWaterfallChartConfigurationOutput) Interactions() TemplateVisualInteractionOptionsPtrOutput {
	return o.ApplyT(func(v TemplateWaterfallChartConfiguration) *TemplateVisualInteractionOptions { return v.Interactions }).(TemplateVisualInteractionOptionsPtrOutput)
}

// The legend configuration of a waterfall visual.
func (o TemplateWaterfallChartConfigurationOutput) Legend() TemplateLegendOptionsPtrOutput {
	return o.ApplyT(func(v TemplateWaterfallChartConfiguration) *TemplateLegendOptions { return v.Legend }).(TemplateLegendOptionsPtrOutput)
}

// The options that determine the presentation of the y-axis.
func (o TemplateWaterfallChartConfigurationOutput) PrimaryYAxisDisplayOptions() TemplateAxisDisplayOptionsPtrOutput {
	return o.ApplyT(func(v TemplateWaterfallChartConfiguration) *TemplateAxisDisplayOptions {
		return v.PrimaryYAxisDisplayOptions
	}).(TemplateAxisDisplayOptionsPtrOutput)
}

// The options that determine the presentation of the y-axis label.
func (o TemplateWaterfallChartConfigurationOutput) PrimaryYAxisLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateWaterfallChartConfiguration) *TemplateChartAxisLabelOptions {
		return v.PrimaryYAxisLabelOptions
	}).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The sort configuration of a waterfall visual.
func (o TemplateWaterfallChartConfigurationOutput) SortConfiguration() TemplateWaterfallChartSortConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateWaterfallChartConfiguration) *TemplateWaterfallChartSortConfiguration {
		return v.SortConfiguration
	}).(TemplateWaterfallChartSortConfigurationPtrOutput)
}

// The visual palette configuration of a waterfall visual.
func (o TemplateWaterfallChartConfigurationOutput) VisualPalette() TemplateVisualPalettePtrOutput {
	return o.ApplyT(func(v TemplateWaterfallChartConfiguration) *TemplateVisualPalette { return v.VisualPalette }).(TemplateVisualPalettePtrOutput)
}

// The options that determine the presentation of a waterfall visual.
func (o TemplateWaterfallChartConfigurationOutput) WaterfallChartOptions() TemplateWaterfallChartOptionsPtrOutput {
	return o.ApplyT(func(v TemplateWaterfallChartConfiguration) *TemplateWaterfallChartOptions {
		return v.WaterfallChartOptions
	}).(TemplateWaterfallChartOptionsPtrOutput)
}

type TemplateWaterfallChartConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateWaterfallChartConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWaterfallChartConfiguration)(nil)).Elem()
}

func (o TemplateWaterfallChartConfigurationPtrOutput) ToTemplateWaterfallChartConfigurationPtrOutput() TemplateWaterfallChartConfigurationPtrOutput {
	return o
}

func (o TemplateWaterfallChartConfigurationPtrOutput) ToTemplateWaterfallChartConfigurationPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartConfigurationPtrOutput {
	return o
}

func (o TemplateWaterfallChartConfigurationPtrOutput) Elem() TemplateWaterfallChartConfigurationOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartConfiguration) TemplateWaterfallChartConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateWaterfallChartConfiguration
		return ret
	}).(TemplateWaterfallChartConfigurationOutput)
}

// The options that determine the presentation of the category axis.
func (o TemplateWaterfallChartConfigurationPtrOutput) CategoryAxisDisplayOptions() TemplateAxisDisplayOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartConfiguration) *TemplateAxisDisplayOptions {
		if v == nil {
			return nil
		}
		return v.CategoryAxisDisplayOptions
	}).(TemplateAxisDisplayOptionsPtrOutput)
}

// The options that determine the presentation of the category axis label.
func (o TemplateWaterfallChartConfigurationPtrOutput) CategoryAxisLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartConfiguration) *TemplateChartAxisLabelOptions {
		if v == nil {
			return nil
		}
		return v.CategoryAxisLabelOptions
	}).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The color configuration of a waterfall visual.
func (o TemplateWaterfallChartConfigurationPtrOutput) ColorConfiguration() TemplateWaterfallChartColorConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartConfiguration) *TemplateWaterfallChartColorConfiguration {
		if v == nil {
			return nil
		}
		return v.ColorConfiguration
	}).(TemplateWaterfallChartColorConfigurationPtrOutput)
}

// The data label configuration of a waterfall visual.
func (o TemplateWaterfallChartConfigurationPtrOutput) DataLabels() TemplateDataLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartConfiguration) *TemplateDataLabelOptions {
		if v == nil {
			return nil
		}
		return v.DataLabels
	}).(TemplateDataLabelOptionsPtrOutput)
}

// The field well configuration of a waterfall visual.
func (o TemplateWaterfallChartConfigurationPtrOutput) FieldWells() TemplateWaterfallChartFieldWellsPtrOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartConfiguration) *TemplateWaterfallChartFieldWells {
		if v == nil {
			return nil
		}
		return v.FieldWells
	}).(TemplateWaterfallChartFieldWellsPtrOutput)
}

// The general visual interactions setup for a visual.
func (o TemplateWaterfallChartConfigurationPtrOutput) Interactions() TemplateVisualInteractionOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartConfiguration) *TemplateVisualInteractionOptions {
		if v == nil {
			return nil
		}
		return v.Interactions
	}).(TemplateVisualInteractionOptionsPtrOutput)
}

// The legend configuration of a waterfall visual.
func (o TemplateWaterfallChartConfigurationPtrOutput) Legend() TemplateLegendOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartConfiguration) *TemplateLegendOptions {
		if v == nil {
			return nil
		}
		return v.Legend
	}).(TemplateLegendOptionsPtrOutput)
}

// The options that determine the presentation of the y-axis.
func (o TemplateWaterfallChartConfigurationPtrOutput) PrimaryYAxisDisplayOptions() TemplateAxisDisplayOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartConfiguration) *TemplateAxisDisplayOptions {
		if v == nil {
			return nil
		}
		return v.PrimaryYAxisDisplayOptions
	}).(TemplateAxisDisplayOptionsPtrOutput)
}

// The options that determine the presentation of the y-axis label.
func (o TemplateWaterfallChartConfigurationPtrOutput) PrimaryYAxisLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartConfiguration) *TemplateChartAxisLabelOptions {
		if v == nil {
			return nil
		}
		return v.PrimaryYAxisLabelOptions
	}).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The sort configuration of a waterfall visual.
func (o TemplateWaterfallChartConfigurationPtrOutput) SortConfiguration() TemplateWaterfallChartSortConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartConfiguration) *TemplateWaterfallChartSortConfiguration {
		if v == nil {
			return nil
		}
		return v.SortConfiguration
	}).(TemplateWaterfallChartSortConfigurationPtrOutput)
}

// The visual palette configuration of a waterfall visual.
func (o TemplateWaterfallChartConfigurationPtrOutput) VisualPalette() TemplateVisualPalettePtrOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartConfiguration) *TemplateVisualPalette {
		if v == nil {
			return nil
		}
		return v.VisualPalette
	}).(TemplateVisualPalettePtrOutput)
}

// The options that determine the presentation of a waterfall visual.
func (o TemplateWaterfallChartConfigurationPtrOutput) WaterfallChartOptions() TemplateWaterfallChartOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartConfiguration) *TemplateWaterfallChartOptions {
		if v == nil {
			return nil
		}
		return v.WaterfallChartOptions
	}).(TemplateWaterfallChartOptionsPtrOutput)
}

type TemplateWaterfallChartFieldWells struct {
	// The field well configuration of a waterfall visual.
	WaterfallChartAggregatedFieldWells *TemplateWaterfallChartAggregatedFieldWells `pulumi:"waterfallChartAggregatedFieldWells"`
}

// TemplateWaterfallChartFieldWellsInput is an input type that accepts TemplateWaterfallChartFieldWellsArgs and TemplateWaterfallChartFieldWellsOutput values.
// You can construct a concrete instance of `TemplateWaterfallChartFieldWellsInput` via:
//
//	TemplateWaterfallChartFieldWellsArgs{...}
type TemplateWaterfallChartFieldWellsInput interface {
	pulumi.Input

	ToTemplateWaterfallChartFieldWellsOutput() TemplateWaterfallChartFieldWellsOutput
	ToTemplateWaterfallChartFieldWellsOutputWithContext(context.Context) TemplateWaterfallChartFieldWellsOutput
}

type TemplateWaterfallChartFieldWellsArgs struct {
	// The field well configuration of a waterfall visual.
	WaterfallChartAggregatedFieldWells TemplateWaterfallChartAggregatedFieldWellsPtrInput `pulumi:"waterfallChartAggregatedFieldWells"`
}

func (TemplateWaterfallChartFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWaterfallChartFieldWells)(nil)).Elem()
}

func (i TemplateWaterfallChartFieldWellsArgs) ToTemplateWaterfallChartFieldWellsOutput() TemplateWaterfallChartFieldWellsOutput {
	return i.ToTemplateWaterfallChartFieldWellsOutputWithContext(context.Background())
}

func (i TemplateWaterfallChartFieldWellsArgs) ToTemplateWaterfallChartFieldWellsOutputWithContext(ctx context.Context) TemplateWaterfallChartFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWaterfallChartFieldWellsOutput)
}

func (i TemplateWaterfallChartFieldWellsArgs) ToTemplateWaterfallChartFieldWellsPtrOutput() TemplateWaterfallChartFieldWellsPtrOutput {
	return i.ToTemplateWaterfallChartFieldWellsPtrOutputWithContext(context.Background())
}

func (i TemplateWaterfallChartFieldWellsArgs) ToTemplateWaterfallChartFieldWellsPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWaterfallChartFieldWellsOutput).ToTemplateWaterfallChartFieldWellsPtrOutputWithContext(ctx)
}

// TemplateWaterfallChartFieldWellsPtrInput is an input type that accepts TemplateWaterfallChartFieldWellsArgs, TemplateWaterfallChartFieldWellsPtr and TemplateWaterfallChartFieldWellsPtrOutput values.
// You can construct a concrete instance of `TemplateWaterfallChartFieldWellsPtrInput` via:
//
//	        TemplateWaterfallChartFieldWellsArgs{...}
//
//	or:
//
//	        nil
type TemplateWaterfallChartFieldWellsPtrInput interface {
	pulumi.Input

	ToTemplateWaterfallChartFieldWellsPtrOutput() TemplateWaterfallChartFieldWellsPtrOutput
	ToTemplateWaterfallChartFieldWellsPtrOutputWithContext(context.Context) TemplateWaterfallChartFieldWellsPtrOutput
}

type templateWaterfallChartFieldWellsPtrType TemplateWaterfallChartFieldWellsArgs

func TemplateWaterfallChartFieldWellsPtr(v *TemplateWaterfallChartFieldWellsArgs) TemplateWaterfallChartFieldWellsPtrInput {
	return (*templateWaterfallChartFieldWellsPtrType)(v)
}

func (*templateWaterfallChartFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWaterfallChartFieldWells)(nil)).Elem()
}

func (i *templateWaterfallChartFieldWellsPtrType) ToTemplateWaterfallChartFieldWellsPtrOutput() TemplateWaterfallChartFieldWellsPtrOutput {
	return i.ToTemplateWaterfallChartFieldWellsPtrOutputWithContext(context.Background())
}

func (i *templateWaterfallChartFieldWellsPtrType) ToTemplateWaterfallChartFieldWellsPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWaterfallChartFieldWellsPtrOutput)
}

type TemplateWaterfallChartFieldWellsOutput struct{ *pulumi.OutputState }

func (TemplateWaterfallChartFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWaterfallChartFieldWells)(nil)).Elem()
}

func (o TemplateWaterfallChartFieldWellsOutput) ToTemplateWaterfallChartFieldWellsOutput() TemplateWaterfallChartFieldWellsOutput {
	return o
}

func (o TemplateWaterfallChartFieldWellsOutput) ToTemplateWaterfallChartFieldWellsOutputWithContext(ctx context.Context) TemplateWaterfallChartFieldWellsOutput {
	return o
}

func (o TemplateWaterfallChartFieldWellsOutput) ToTemplateWaterfallChartFieldWellsPtrOutput() TemplateWaterfallChartFieldWellsPtrOutput {
	return o.ToTemplateWaterfallChartFieldWellsPtrOutputWithContext(context.Background())
}

func (o TemplateWaterfallChartFieldWellsOutput) ToTemplateWaterfallChartFieldWellsPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateWaterfallChartFieldWells) *TemplateWaterfallChartFieldWells {
		return &v
	}).(TemplateWaterfallChartFieldWellsPtrOutput)
}

// The field well configuration of a waterfall visual.
func (o TemplateWaterfallChartFieldWellsOutput) WaterfallChartAggregatedFieldWells() TemplateWaterfallChartAggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v TemplateWaterfallChartFieldWells) *TemplateWaterfallChartAggregatedFieldWells {
		return v.WaterfallChartAggregatedFieldWells
	}).(TemplateWaterfallChartAggregatedFieldWellsPtrOutput)
}

type TemplateWaterfallChartFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (TemplateWaterfallChartFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWaterfallChartFieldWells)(nil)).Elem()
}

func (o TemplateWaterfallChartFieldWellsPtrOutput) ToTemplateWaterfallChartFieldWellsPtrOutput() TemplateWaterfallChartFieldWellsPtrOutput {
	return o
}

func (o TemplateWaterfallChartFieldWellsPtrOutput) ToTemplateWaterfallChartFieldWellsPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartFieldWellsPtrOutput {
	return o
}

func (o TemplateWaterfallChartFieldWellsPtrOutput) Elem() TemplateWaterfallChartFieldWellsOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartFieldWells) TemplateWaterfallChartFieldWells {
		if v != nil {
			return *v
		}
		var ret TemplateWaterfallChartFieldWells
		return ret
	}).(TemplateWaterfallChartFieldWellsOutput)
}

// The field well configuration of a waterfall visual.
func (o TemplateWaterfallChartFieldWellsPtrOutput) WaterfallChartAggregatedFieldWells() TemplateWaterfallChartAggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartFieldWells) *TemplateWaterfallChartAggregatedFieldWells {
		if v == nil {
			return nil
		}
		return v.WaterfallChartAggregatedFieldWells
	}).(TemplateWaterfallChartAggregatedFieldWellsPtrOutput)
}

type TemplateWaterfallChartGroupColorConfiguration struct {
	// Defines the color for the negative bars of a waterfall chart.
	NegativeBarColor *string `pulumi:"negativeBarColor"`
	// Defines the color for the positive bars of a waterfall chart.
	PositiveBarColor *string `pulumi:"positiveBarColor"`
	// Defines the color for the total bars of a waterfall chart.
	TotalBarColor *string `pulumi:"totalBarColor"`
}

// TemplateWaterfallChartGroupColorConfigurationInput is an input type that accepts TemplateWaterfallChartGroupColorConfigurationArgs and TemplateWaterfallChartGroupColorConfigurationOutput values.
// You can construct a concrete instance of `TemplateWaterfallChartGroupColorConfigurationInput` via:
//
//	TemplateWaterfallChartGroupColorConfigurationArgs{...}
type TemplateWaterfallChartGroupColorConfigurationInput interface {
	pulumi.Input

	ToTemplateWaterfallChartGroupColorConfigurationOutput() TemplateWaterfallChartGroupColorConfigurationOutput
	ToTemplateWaterfallChartGroupColorConfigurationOutputWithContext(context.Context) TemplateWaterfallChartGroupColorConfigurationOutput
}

type TemplateWaterfallChartGroupColorConfigurationArgs struct {
	// Defines the color for the negative bars of a waterfall chart.
	NegativeBarColor pulumi.StringPtrInput `pulumi:"negativeBarColor"`
	// Defines the color for the positive bars of a waterfall chart.
	PositiveBarColor pulumi.StringPtrInput `pulumi:"positiveBarColor"`
	// Defines the color for the total bars of a waterfall chart.
	TotalBarColor pulumi.StringPtrInput `pulumi:"totalBarColor"`
}

func (TemplateWaterfallChartGroupColorConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWaterfallChartGroupColorConfiguration)(nil)).Elem()
}

func (i TemplateWaterfallChartGroupColorConfigurationArgs) ToTemplateWaterfallChartGroupColorConfigurationOutput() TemplateWaterfallChartGroupColorConfigurationOutput {
	return i.ToTemplateWaterfallChartGroupColorConfigurationOutputWithContext(context.Background())
}

func (i TemplateWaterfallChartGroupColorConfigurationArgs) ToTemplateWaterfallChartGroupColorConfigurationOutputWithContext(ctx context.Context) TemplateWaterfallChartGroupColorConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWaterfallChartGroupColorConfigurationOutput)
}

func (i TemplateWaterfallChartGroupColorConfigurationArgs) ToTemplateWaterfallChartGroupColorConfigurationPtrOutput() TemplateWaterfallChartGroupColorConfigurationPtrOutput {
	return i.ToTemplateWaterfallChartGroupColorConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateWaterfallChartGroupColorConfigurationArgs) ToTemplateWaterfallChartGroupColorConfigurationPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartGroupColorConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWaterfallChartGroupColorConfigurationOutput).ToTemplateWaterfallChartGroupColorConfigurationPtrOutputWithContext(ctx)
}

// TemplateWaterfallChartGroupColorConfigurationPtrInput is an input type that accepts TemplateWaterfallChartGroupColorConfigurationArgs, TemplateWaterfallChartGroupColorConfigurationPtr and TemplateWaterfallChartGroupColorConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateWaterfallChartGroupColorConfigurationPtrInput` via:
//
//	        TemplateWaterfallChartGroupColorConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateWaterfallChartGroupColorConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateWaterfallChartGroupColorConfigurationPtrOutput() TemplateWaterfallChartGroupColorConfigurationPtrOutput
	ToTemplateWaterfallChartGroupColorConfigurationPtrOutputWithContext(context.Context) TemplateWaterfallChartGroupColorConfigurationPtrOutput
}

type templateWaterfallChartGroupColorConfigurationPtrType TemplateWaterfallChartGroupColorConfigurationArgs

func TemplateWaterfallChartGroupColorConfigurationPtr(v *TemplateWaterfallChartGroupColorConfigurationArgs) TemplateWaterfallChartGroupColorConfigurationPtrInput {
	return (*templateWaterfallChartGroupColorConfigurationPtrType)(v)
}

func (*templateWaterfallChartGroupColorConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWaterfallChartGroupColorConfiguration)(nil)).Elem()
}

func (i *templateWaterfallChartGroupColorConfigurationPtrType) ToTemplateWaterfallChartGroupColorConfigurationPtrOutput() TemplateWaterfallChartGroupColorConfigurationPtrOutput {
	return i.ToTemplateWaterfallChartGroupColorConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateWaterfallChartGroupColorConfigurationPtrType) ToTemplateWaterfallChartGroupColorConfigurationPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartGroupColorConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWaterfallChartGroupColorConfigurationPtrOutput)
}

type TemplateWaterfallChartGroupColorConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateWaterfallChartGroupColorConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWaterfallChartGroupColorConfiguration)(nil)).Elem()
}

func (o TemplateWaterfallChartGroupColorConfigurationOutput) ToTemplateWaterfallChartGroupColorConfigurationOutput() TemplateWaterfallChartGroupColorConfigurationOutput {
	return o
}

func (o TemplateWaterfallChartGroupColorConfigurationOutput) ToTemplateWaterfallChartGroupColorConfigurationOutputWithContext(ctx context.Context) TemplateWaterfallChartGroupColorConfigurationOutput {
	return o
}

func (o TemplateWaterfallChartGroupColorConfigurationOutput) ToTemplateWaterfallChartGroupColorConfigurationPtrOutput() TemplateWaterfallChartGroupColorConfigurationPtrOutput {
	return o.ToTemplateWaterfallChartGroupColorConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateWaterfallChartGroupColorConfigurationOutput) ToTemplateWaterfallChartGroupColorConfigurationPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartGroupColorConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateWaterfallChartGroupColorConfiguration) *TemplateWaterfallChartGroupColorConfiguration {
		return &v
	}).(TemplateWaterfallChartGroupColorConfigurationPtrOutput)
}

// Defines the color for the negative bars of a waterfall chart.
func (o TemplateWaterfallChartGroupColorConfigurationOutput) NegativeBarColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateWaterfallChartGroupColorConfiguration) *string { return v.NegativeBarColor }).(pulumi.StringPtrOutput)
}

// Defines the color for the positive bars of a waterfall chart.
func (o TemplateWaterfallChartGroupColorConfigurationOutput) PositiveBarColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateWaterfallChartGroupColorConfiguration) *string { return v.PositiveBarColor }).(pulumi.StringPtrOutput)
}

// Defines the color for the total bars of a waterfall chart.
func (o TemplateWaterfallChartGroupColorConfigurationOutput) TotalBarColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateWaterfallChartGroupColorConfiguration) *string { return v.TotalBarColor }).(pulumi.StringPtrOutput)
}

type TemplateWaterfallChartGroupColorConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateWaterfallChartGroupColorConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWaterfallChartGroupColorConfiguration)(nil)).Elem()
}

func (o TemplateWaterfallChartGroupColorConfigurationPtrOutput) ToTemplateWaterfallChartGroupColorConfigurationPtrOutput() TemplateWaterfallChartGroupColorConfigurationPtrOutput {
	return o
}

func (o TemplateWaterfallChartGroupColorConfigurationPtrOutput) ToTemplateWaterfallChartGroupColorConfigurationPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartGroupColorConfigurationPtrOutput {
	return o
}

func (o TemplateWaterfallChartGroupColorConfigurationPtrOutput) Elem() TemplateWaterfallChartGroupColorConfigurationOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartGroupColorConfiguration) TemplateWaterfallChartGroupColorConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateWaterfallChartGroupColorConfiguration
		return ret
	}).(TemplateWaterfallChartGroupColorConfigurationOutput)
}

// Defines the color for the negative bars of a waterfall chart.
func (o TemplateWaterfallChartGroupColorConfigurationPtrOutput) NegativeBarColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartGroupColorConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.NegativeBarColor
	}).(pulumi.StringPtrOutput)
}

// Defines the color for the positive bars of a waterfall chart.
func (o TemplateWaterfallChartGroupColorConfigurationPtrOutput) PositiveBarColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartGroupColorConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.PositiveBarColor
	}).(pulumi.StringPtrOutput)
}

// Defines the color for the total bars of a waterfall chart.
func (o TemplateWaterfallChartGroupColorConfigurationPtrOutput) TotalBarColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartGroupColorConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.TotalBarColor
	}).(pulumi.StringPtrOutput)
}

type TemplateWaterfallChartOptions struct {
	// This option determines the total bar label of a waterfall visual.
	TotalBarLabel *string `pulumi:"totalBarLabel"`
}

// TemplateWaterfallChartOptionsInput is an input type that accepts TemplateWaterfallChartOptionsArgs and TemplateWaterfallChartOptionsOutput values.
// You can construct a concrete instance of `TemplateWaterfallChartOptionsInput` via:
//
//	TemplateWaterfallChartOptionsArgs{...}
type TemplateWaterfallChartOptionsInput interface {
	pulumi.Input

	ToTemplateWaterfallChartOptionsOutput() TemplateWaterfallChartOptionsOutput
	ToTemplateWaterfallChartOptionsOutputWithContext(context.Context) TemplateWaterfallChartOptionsOutput
}

type TemplateWaterfallChartOptionsArgs struct {
	// This option determines the total bar label of a waterfall visual.
	TotalBarLabel pulumi.StringPtrInput `pulumi:"totalBarLabel"`
}

func (TemplateWaterfallChartOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWaterfallChartOptions)(nil)).Elem()
}

func (i TemplateWaterfallChartOptionsArgs) ToTemplateWaterfallChartOptionsOutput() TemplateWaterfallChartOptionsOutput {
	return i.ToTemplateWaterfallChartOptionsOutputWithContext(context.Background())
}

func (i TemplateWaterfallChartOptionsArgs) ToTemplateWaterfallChartOptionsOutputWithContext(ctx context.Context) TemplateWaterfallChartOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWaterfallChartOptionsOutput)
}

func (i TemplateWaterfallChartOptionsArgs) ToTemplateWaterfallChartOptionsPtrOutput() TemplateWaterfallChartOptionsPtrOutput {
	return i.ToTemplateWaterfallChartOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateWaterfallChartOptionsArgs) ToTemplateWaterfallChartOptionsPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWaterfallChartOptionsOutput).ToTemplateWaterfallChartOptionsPtrOutputWithContext(ctx)
}

// TemplateWaterfallChartOptionsPtrInput is an input type that accepts TemplateWaterfallChartOptionsArgs, TemplateWaterfallChartOptionsPtr and TemplateWaterfallChartOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateWaterfallChartOptionsPtrInput` via:
//
//	        TemplateWaterfallChartOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateWaterfallChartOptionsPtrInput interface {
	pulumi.Input

	ToTemplateWaterfallChartOptionsPtrOutput() TemplateWaterfallChartOptionsPtrOutput
	ToTemplateWaterfallChartOptionsPtrOutputWithContext(context.Context) TemplateWaterfallChartOptionsPtrOutput
}

type templateWaterfallChartOptionsPtrType TemplateWaterfallChartOptionsArgs

func TemplateWaterfallChartOptionsPtr(v *TemplateWaterfallChartOptionsArgs) TemplateWaterfallChartOptionsPtrInput {
	return (*templateWaterfallChartOptionsPtrType)(v)
}

func (*templateWaterfallChartOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWaterfallChartOptions)(nil)).Elem()
}

func (i *templateWaterfallChartOptionsPtrType) ToTemplateWaterfallChartOptionsPtrOutput() TemplateWaterfallChartOptionsPtrOutput {
	return i.ToTemplateWaterfallChartOptionsPtrOutputWithContext(context.Background())
}

func (i *templateWaterfallChartOptionsPtrType) ToTemplateWaterfallChartOptionsPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWaterfallChartOptionsPtrOutput)
}

type TemplateWaterfallChartOptionsOutput struct{ *pulumi.OutputState }

func (TemplateWaterfallChartOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWaterfallChartOptions)(nil)).Elem()
}

func (o TemplateWaterfallChartOptionsOutput) ToTemplateWaterfallChartOptionsOutput() TemplateWaterfallChartOptionsOutput {
	return o
}

func (o TemplateWaterfallChartOptionsOutput) ToTemplateWaterfallChartOptionsOutputWithContext(ctx context.Context) TemplateWaterfallChartOptionsOutput {
	return o
}

func (o TemplateWaterfallChartOptionsOutput) ToTemplateWaterfallChartOptionsPtrOutput() TemplateWaterfallChartOptionsPtrOutput {
	return o.ToTemplateWaterfallChartOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateWaterfallChartOptionsOutput) ToTemplateWaterfallChartOptionsPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateWaterfallChartOptions) *TemplateWaterfallChartOptions {
		return &v
	}).(TemplateWaterfallChartOptionsPtrOutput)
}

// This option determines the total bar label of a waterfall visual.
func (o TemplateWaterfallChartOptionsOutput) TotalBarLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateWaterfallChartOptions) *string { return v.TotalBarLabel }).(pulumi.StringPtrOutput)
}

type TemplateWaterfallChartOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateWaterfallChartOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWaterfallChartOptions)(nil)).Elem()
}

func (o TemplateWaterfallChartOptionsPtrOutput) ToTemplateWaterfallChartOptionsPtrOutput() TemplateWaterfallChartOptionsPtrOutput {
	return o
}

func (o TemplateWaterfallChartOptionsPtrOutput) ToTemplateWaterfallChartOptionsPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartOptionsPtrOutput {
	return o
}

func (o TemplateWaterfallChartOptionsPtrOutput) Elem() TemplateWaterfallChartOptionsOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartOptions) TemplateWaterfallChartOptions {
		if v != nil {
			return *v
		}
		var ret TemplateWaterfallChartOptions
		return ret
	}).(TemplateWaterfallChartOptionsOutput)
}

// This option determines the total bar label of a waterfall visual.
func (o TemplateWaterfallChartOptionsPtrOutput) TotalBarLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartOptions) *string {
		if v == nil {
			return nil
		}
		return v.TotalBarLabel
	}).(pulumi.StringPtrOutput)
}

type TemplateWaterfallChartSortConfiguration struct {
	// The limit on the number of bar groups that are displayed.
	BreakdownItemsLimit *TemplateItemsLimitConfiguration `pulumi:"breakdownItemsLimit"`
	// The sort configuration of the category fields.
	CategorySort []TemplateFieldSortOptions `pulumi:"categorySort"`
}

// TemplateWaterfallChartSortConfigurationInput is an input type that accepts TemplateWaterfallChartSortConfigurationArgs and TemplateWaterfallChartSortConfigurationOutput values.
// You can construct a concrete instance of `TemplateWaterfallChartSortConfigurationInput` via:
//
//	TemplateWaterfallChartSortConfigurationArgs{...}
type TemplateWaterfallChartSortConfigurationInput interface {
	pulumi.Input

	ToTemplateWaterfallChartSortConfigurationOutput() TemplateWaterfallChartSortConfigurationOutput
	ToTemplateWaterfallChartSortConfigurationOutputWithContext(context.Context) TemplateWaterfallChartSortConfigurationOutput
}

type TemplateWaterfallChartSortConfigurationArgs struct {
	// The limit on the number of bar groups that are displayed.
	BreakdownItemsLimit TemplateItemsLimitConfigurationPtrInput `pulumi:"breakdownItemsLimit"`
	// The sort configuration of the category fields.
	CategorySort TemplateFieldSortOptionsArrayInput `pulumi:"categorySort"`
}

func (TemplateWaterfallChartSortConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWaterfallChartSortConfiguration)(nil)).Elem()
}

func (i TemplateWaterfallChartSortConfigurationArgs) ToTemplateWaterfallChartSortConfigurationOutput() TemplateWaterfallChartSortConfigurationOutput {
	return i.ToTemplateWaterfallChartSortConfigurationOutputWithContext(context.Background())
}

func (i TemplateWaterfallChartSortConfigurationArgs) ToTemplateWaterfallChartSortConfigurationOutputWithContext(ctx context.Context) TemplateWaterfallChartSortConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWaterfallChartSortConfigurationOutput)
}

func (i TemplateWaterfallChartSortConfigurationArgs) ToTemplateWaterfallChartSortConfigurationPtrOutput() TemplateWaterfallChartSortConfigurationPtrOutput {
	return i.ToTemplateWaterfallChartSortConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateWaterfallChartSortConfigurationArgs) ToTemplateWaterfallChartSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartSortConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWaterfallChartSortConfigurationOutput).ToTemplateWaterfallChartSortConfigurationPtrOutputWithContext(ctx)
}

// TemplateWaterfallChartSortConfigurationPtrInput is an input type that accepts TemplateWaterfallChartSortConfigurationArgs, TemplateWaterfallChartSortConfigurationPtr and TemplateWaterfallChartSortConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateWaterfallChartSortConfigurationPtrInput` via:
//
//	        TemplateWaterfallChartSortConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateWaterfallChartSortConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateWaterfallChartSortConfigurationPtrOutput() TemplateWaterfallChartSortConfigurationPtrOutput
	ToTemplateWaterfallChartSortConfigurationPtrOutputWithContext(context.Context) TemplateWaterfallChartSortConfigurationPtrOutput
}

type templateWaterfallChartSortConfigurationPtrType TemplateWaterfallChartSortConfigurationArgs

func TemplateWaterfallChartSortConfigurationPtr(v *TemplateWaterfallChartSortConfigurationArgs) TemplateWaterfallChartSortConfigurationPtrInput {
	return (*templateWaterfallChartSortConfigurationPtrType)(v)
}

func (*templateWaterfallChartSortConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWaterfallChartSortConfiguration)(nil)).Elem()
}

func (i *templateWaterfallChartSortConfigurationPtrType) ToTemplateWaterfallChartSortConfigurationPtrOutput() TemplateWaterfallChartSortConfigurationPtrOutput {
	return i.ToTemplateWaterfallChartSortConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateWaterfallChartSortConfigurationPtrType) ToTemplateWaterfallChartSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartSortConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWaterfallChartSortConfigurationPtrOutput)
}

type TemplateWaterfallChartSortConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateWaterfallChartSortConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWaterfallChartSortConfiguration)(nil)).Elem()
}

func (o TemplateWaterfallChartSortConfigurationOutput) ToTemplateWaterfallChartSortConfigurationOutput() TemplateWaterfallChartSortConfigurationOutput {
	return o
}

func (o TemplateWaterfallChartSortConfigurationOutput) ToTemplateWaterfallChartSortConfigurationOutputWithContext(ctx context.Context) TemplateWaterfallChartSortConfigurationOutput {
	return o
}

func (o TemplateWaterfallChartSortConfigurationOutput) ToTemplateWaterfallChartSortConfigurationPtrOutput() TemplateWaterfallChartSortConfigurationPtrOutput {
	return o.ToTemplateWaterfallChartSortConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateWaterfallChartSortConfigurationOutput) ToTemplateWaterfallChartSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartSortConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateWaterfallChartSortConfiguration) *TemplateWaterfallChartSortConfiguration {
		return &v
	}).(TemplateWaterfallChartSortConfigurationPtrOutput)
}

// The limit on the number of bar groups that are displayed.
func (o TemplateWaterfallChartSortConfigurationOutput) BreakdownItemsLimit() TemplateItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateWaterfallChartSortConfiguration) *TemplateItemsLimitConfiguration {
		return v.BreakdownItemsLimit
	}).(TemplateItemsLimitConfigurationPtrOutput)
}

// The sort configuration of the category fields.
func (o TemplateWaterfallChartSortConfigurationOutput) CategorySort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v TemplateWaterfallChartSortConfiguration) []TemplateFieldSortOptions { return v.CategorySort }).(TemplateFieldSortOptionsArrayOutput)
}

type TemplateWaterfallChartSortConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateWaterfallChartSortConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWaterfallChartSortConfiguration)(nil)).Elem()
}

func (o TemplateWaterfallChartSortConfigurationPtrOutput) ToTemplateWaterfallChartSortConfigurationPtrOutput() TemplateWaterfallChartSortConfigurationPtrOutput {
	return o
}

func (o TemplateWaterfallChartSortConfigurationPtrOutput) ToTemplateWaterfallChartSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartSortConfigurationPtrOutput {
	return o
}

func (o TemplateWaterfallChartSortConfigurationPtrOutput) Elem() TemplateWaterfallChartSortConfigurationOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartSortConfiguration) TemplateWaterfallChartSortConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateWaterfallChartSortConfiguration
		return ret
	}).(TemplateWaterfallChartSortConfigurationOutput)
}

// The limit on the number of bar groups that are displayed.
func (o TemplateWaterfallChartSortConfigurationPtrOutput) BreakdownItemsLimit() TemplateItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartSortConfiguration) *TemplateItemsLimitConfiguration {
		if v == nil {
			return nil
		}
		return v.BreakdownItemsLimit
	}).(TemplateItemsLimitConfigurationPtrOutput)
}

// The sort configuration of the category fields.
func (o TemplateWaterfallChartSortConfigurationPtrOutput) CategorySort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartSortConfiguration) []TemplateFieldSortOptions {
		if v == nil {
			return nil
		}
		return v.CategorySort
	}).(TemplateFieldSortOptionsArrayOutput)
}

type TemplateWaterfallVisual struct {
	// The list of custom actions that are configured for a visual.
	Actions []TemplateVisualCustomAction `pulumi:"actions"`
	// The configuration for a waterfall visual.
	ChartConfiguration *TemplateWaterfallChartConfiguration `pulumi:"chartConfiguration"`
	// The column hierarchy that is used during drill-downs and drill-ups.
	ColumnHierarchies []TemplateColumnHierarchy `pulumi:"columnHierarchies"`
	// The subtitle that is displayed on the visual.
	Subtitle *TemplateVisualSubtitleLabelOptions `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title *TemplateVisualTitleLabelOptions `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText *string `pulumi:"visualContentAltText"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
	VisualId string `pulumi:"visualId"`
}

// TemplateWaterfallVisualInput is an input type that accepts TemplateWaterfallVisualArgs and TemplateWaterfallVisualOutput values.
// You can construct a concrete instance of `TemplateWaterfallVisualInput` via:
//
//	TemplateWaterfallVisualArgs{...}
type TemplateWaterfallVisualInput interface {
	pulumi.Input

	ToTemplateWaterfallVisualOutput() TemplateWaterfallVisualOutput
	ToTemplateWaterfallVisualOutputWithContext(context.Context) TemplateWaterfallVisualOutput
}

type TemplateWaterfallVisualArgs struct {
	// The list of custom actions that are configured for a visual.
	Actions TemplateVisualCustomActionArrayInput `pulumi:"actions"`
	// The configuration for a waterfall visual.
	ChartConfiguration TemplateWaterfallChartConfigurationPtrInput `pulumi:"chartConfiguration"`
	// The column hierarchy that is used during drill-downs and drill-ups.
	ColumnHierarchies TemplateColumnHierarchyArrayInput `pulumi:"columnHierarchies"`
	// The subtitle that is displayed on the visual.
	Subtitle TemplateVisualSubtitleLabelOptionsPtrInput `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title TemplateVisualTitleLabelOptionsPtrInput `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText pulumi.StringPtrInput `pulumi:"visualContentAltText"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
	VisualId pulumi.StringInput `pulumi:"visualId"`
}

func (TemplateWaterfallVisualArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWaterfallVisual)(nil)).Elem()
}

func (i TemplateWaterfallVisualArgs) ToTemplateWaterfallVisualOutput() TemplateWaterfallVisualOutput {
	return i.ToTemplateWaterfallVisualOutputWithContext(context.Background())
}

func (i TemplateWaterfallVisualArgs) ToTemplateWaterfallVisualOutputWithContext(ctx context.Context) TemplateWaterfallVisualOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWaterfallVisualOutput)
}

func (i TemplateWaterfallVisualArgs) ToTemplateWaterfallVisualPtrOutput() TemplateWaterfallVisualPtrOutput {
	return i.ToTemplateWaterfallVisualPtrOutputWithContext(context.Background())
}

func (i TemplateWaterfallVisualArgs) ToTemplateWaterfallVisualPtrOutputWithContext(ctx context.Context) TemplateWaterfallVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWaterfallVisualOutput).ToTemplateWaterfallVisualPtrOutputWithContext(ctx)
}

// TemplateWaterfallVisualPtrInput is an input type that accepts TemplateWaterfallVisualArgs, TemplateWaterfallVisualPtr and TemplateWaterfallVisualPtrOutput values.
// You can construct a concrete instance of `TemplateWaterfallVisualPtrInput` via:
//
//	        TemplateWaterfallVisualArgs{...}
//
//	or:
//
//	        nil
type TemplateWaterfallVisualPtrInput interface {
	pulumi.Input

	ToTemplateWaterfallVisualPtrOutput() TemplateWaterfallVisualPtrOutput
	ToTemplateWaterfallVisualPtrOutputWithContext(context.Context) TemplateWaterfallVisualPtrOutput
}

type templateWaterfallVisualPtrType TemplateWaterfallVisualArgs

func TemplateWaterfallVisualPtr(v *TemplateWaterfallVisualArgs) TemplateWaterfallVisualPtrInput {
	return (*templateWaterfallVisualPtrType)(v)
}

func (*templateWaterfallVisualPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWaterfallVisual)(nil)).Elem()
}

func (i *templateWaterfallVisualPtrType) ToTemplateWaterfallVisualPtrOutput() TemplateWaterfallVisualPtrOutput {
	return i.ToTemplateWaterfallVisualPtrOutputWithContext(context.Background())
}

func (i *templateWaterfallVisualPtrType) ToTemplateWaterfallVisualPtrOutputWithContext(ctx context.Context) TemplateWaterfallVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWaterfallVisualPtrOutput)
}

type TemplateWaterfallVisualOutput struct{ *pulumi.OutputState }

func (TemplateWaterfallVisualOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWaterfallVisual)(nil)).Elem()
}

func (o TemplateWaterfallVisualOutput) ToTemplateWaterfallVisualOutput() TemplateWaterfallVisualOutput {
	return o
}

func (o TemplateWaterfallVisualOutput) ToTemplateWaterfallVisualOutputWithContext(ctx context.Context) TemplateWaterfallVisualOutput {
	return o
}

func (o TemplateWaterfallVisualOutput) ToTemplateWaterfallVisualPtrOutput() TemplateWaterfallVisualPtrOutput {
	return o.ToTemplateWaterfallVisualPtrOutputWithContext(context.Background())
}

func (o TemplateWaterfallVisualOutput) ToTemplateWaterfallVisualPtrOutputWithContext(ctx context.Context) TemplateWaterfallVisualPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateWaterfallVisual) *TemplateWaterfallVisual {
		return &v
	}).(TemplateWaterfallVisualPtrOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplateWaterfallVisualOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v TemplateWaterfallVisual) []TemplateVisualCustomAction { return v.Actions }).(TemplateVisualCustomActionArrayOutput)
}

// The configuration for a waterfall visual.
func (o TemplateWaterfallVisualOutput) ChartConfiguration() TemplateWaterfallChartConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateWaterfallVisual) *TemplateWaterfallChartConfiguration { return v.ChartConfiguration }).(TemplateWaterfallChartConfigurationPtrOutput)
}

// The column hierarchy that is used during drill-downs and drill-ups.
func (o TemplateWaterfallVisualOutput) ColumnHierarchies() TemplateColumnHierarchyArrayOutput {
	return o.ApplyT(func(v TemplateWaterfallVisual) []TemplateColumnHierarchy { return v.ColumnHierarchies }).(TemplateColumnHierarchyArrayOutput)
}

// The subtitle that is displayed on the visual.
func (o TemplateWaterfallVisualOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateWaterfallVisual) *TemplateVisualSubtitleLabelOptions { return v.Subtitle }).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o TemplateWaterfallVisualOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateWaterfallVisual) *TemplateVisualTitleLabelOptions { return v.Title }).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o TemplateWaterfallVisualOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateWaterfallVisual) *string { return v.VisualContentAltText }).(pulumi.StringPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
func (o TemplateWaterfallVisualOutput) VisualId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateWaterfallVisual) string { return v.VisualId }).(pulumi.StringOutput)
}

type TemplateWaterfallVisualPtrOutput struct{ *pulumi.OutputState }

func (TemplateWaterfallVisualPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWaterfallVisual)(nil)).Elem()
}

func (o TemplateWaterfallVisualPtrOutput) ToTemplateWaterfallVisualPtrOutput() TemplateWaterfallVisualPtrOutput {
	return o
}

func (o TemplateWaterfallVisualPtrOutput) ToTemplateWaterfallVisualPtrOutputWithContext(ctx context.Context) TemplateWaterfallVisualPtrOutput {
	return o
}

func (o TemplateWaterfallVisualPtrOutput) Elem() TemplateWaterfallVisualOutput {
	return o.ApplyT(func(v *TemplateWaterfallVisual) TemplateWaterfallVisual {
		if v != nil {
			return *v
		}
		var ret TemplateWaterfallVisual
		return ret
	}).(TemplateWaterfallVisualOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplateWaterfallVisualPtrOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v *TemplateWaterfallVisual) []TemplateVisualCustomAction {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(TemplateVisualCustomActionArrayOutput)
}

// The configuration for a waterfall visual.
func (o TemplateWaterfallVisualPtrOutput) ChartConfiguration() TemplateWaterfallChartConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateWaterfallVisual) *TemplateWaterfallChartConfiguration {
		if v == nil {
			return nil
		}
		return v.ChartConfiguration
	}).(TemplateWaterfallChartConfigurationPtrOutput)
}

// The column hierarchy that is used during drill-downs and drill-ups.
func (o TemplateWaterfallVisualPtrOutput) ColumnHierarchies() TemplateColumnHierarchyArrayOutput {
	return o.ApplyT(func(v *TemplateWaterfallVisual) []TemplateColumnHierarchy {
		if v == nil {
			return nil
		}
		return v.ColumnHierarchies
	}).(TemplateColumnHierarchyArrayOutput)
}

// The subtitle that is displayed on the visual.
func (o TemplateWaterfallVisualPtrOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateWaterfallVisual) *TemplateVisualSubtitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Subtitle
	}).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o TemplateWaterfallVisualPtrOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateWaterfallVisual) *TemplateVisualTitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Title
	}).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o TemplateWaterfallVisualPtrOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateWaterfallVisual) *string {
		if v == nil {
			return nil
		}
		return v.VisualContentAltText
	}).(pulumi.StringPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
func (o TemplateWaterfallVisualPtrOutput) VisualId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateWaterfallVisual) *string {
		if v == nil {
			return nil
		}
		return &v.VisualId
	}).(pulumi.StringPtrOutput)
}

type TemplateWhatIfPointScenario struct {
	// The date that you need the forecast results for.
	Date string `pulumi:"date"`
	// The target value that you want to meet for the provided date.
	Value float64 `pulumi:"value"`
}

// TemplateWhatIfPointScenarioInput is an input type that accepts TemplateWhatIfPointScenarioArgs and TemplateWhatIfPointScenarioOutput values.
// You can construct a concrete instance of `TemplateWhatIfPointScenarioInput` via:
//
//	TemplateWhatIfPointScenarioArgs{...}
type TemplateWhatIfPointScenarioInput interface {
	pulumi.Input

	ToTemplateWhatIfPointScenarioOutput() TemplateWhatIfPointScenarioOutput
	ToTemplateWhatIfPointScenarioOutputWithContext(context.Context) TemplateWhatIfPointScenarioOutput
}

type TemplateWhatIfPointScenarioArgs struct {
	// The date that you need the forecast results for.
	Date pulumi.StringInput `pulumi:"date"`
	// The target value that you want to meet for the provided date.
	Value pulumi.Float64Input `pulumi:"value"`
}

func (TemplateWhatIfPointScenarioArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWhatIfPointScenario)(nil)).Elem()
}

func (i TemplateWhatIfPointScenarioArgs) ToTemplateWhatIfPointScenarioOutput() TemplateWhatIfPointScenarioOutput {
	return i.ToTemplateWhatIfPointScenarioOutputWithContext(context.Background())
}

func (i TemplateWhatIfPointScenarioArgs) ToTemplateWhatIfPointScenarioOutputWithContext(ctx context.Context) TemplateWhatIfPointScenarioOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWhatIfPointScenarioOutput)
}

func (i TemplateWhatIfPointScenarioArgs) ToTemplateWhatIfPointScenarioPtrOutput() TemplateWhatIfPointScenarioPtrOutput {
	return i.ToTemplateWhatIfPointScenarioPtrOutputWithContext(context.Background())
}

func (i TemplateWhatIfPointScenarioArgs) ToTemplateWhatIfPointScenarioPtrOutputWithContext(ctx context.Context) TemplateWhatIfPointScenarioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWhatIfPointScenarioOutput).ToTemplateWhatIfPointScenarioPtrOutputWithContext(ctx)
}

// TemplateWhatIfPointScenarioPtrInput is an input type that accepts TemplateWhatIfPointScenarioArgs, TemplateWhatIfPointScenarioPtr and TemplateWhatIfPointScenarioPtrOutput values.
// You can construct a concrete instance of `TemplateWhatIfPointScenarioPtrInput` via:
//
//	        TemplateWhatIfPointScenarioArgs{...}
//
//	or:
//
//	        nil
type TemplateWhatIfPointScenarioPtrInput interface {
	pulumi.Input

	ToTemplateWhatIfPointScenarioPtrOutput() TemplateWhatIfPointScenarioPtrOutput
	ToTemplateWhatIfPointScenarioPtrOutputWithContext(context.Context) TemplateWhatIfPointScenarioPtrOutput
}

type templateWhatIfPointScenarioPtrType TemplateWhatIfPointScenarioArgs

func TemplateWhatIfPointScenarioPtr(v *TemplateWhatIfPointScenarioArgs) TemplateWhatIfPointScenarioPtrInput {
	return (*templateWhatIfPointScenarioPtrType)(v)
}

func (*templateWhatIfPointScenarioPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWhatIfPointScenario)(nil)).Elem()
}

func (i *templateWhatIfPointScenarioPtrType) ToTemplateWhatIfPointScenarioPtrOutput() TemplateWhatIfPointScenarioPtrOutput {
	return i.ToTemplateWhatIfPointScenarioPtrOutputWithContext(context.Background())
}

func (i *templateWhatIfPointScenarioPtrType) ToTemplateWhatIfPointScenarioPtrOutputWithContext(ctx context.Context) TemplateWhatIfPointScenarioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWhatIfPointScenarioPtrOutput)
}

type TemplateWhatIfPointScenarioOutput struct{ *pulumi.OutputState }

func (TemplateWhatIfPointScenarioOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWhatIfPointScenario)(nil)).Elem()
}

func (o TemplateWhatIfPointScenarioOutput) ToTemplateWhatIfPointScenarioOutput() TemplateWhatIfPointScenarioOutput {
	return o
}

func (o TemplateWhatIfPointScenarioOutput) ToTemplateWhatIfPointScenarioOutputWithContext(ctx context.Context) TemplateWhatIfPointScenarioOutput {
	return o
}

func (o TemplateWhatIfPointScenarioOutput) ToTemplateWhatIfPointScenarioPtrOutput() TemplateWhatIfPointScenarioPtrOutput {
	return o.ToTemplateWhatIfPointScenarioPtrOutputWithContext(context.Background())
}

func (o TemplateWhatIfPointScenarioOutput) ToTemplateWhatIfPointScenarioPtrOutputWithContext(ctx context.Context) TemplateWhatIfPointScenarioPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateWhatIfPointScenario) *TemplateWhatIfPointScenario {
		return &v
	}).(TemplateWhatIfPointScenarioPtrOutput)
}

// The date that you need the forecast results for.
func (o TemplateWhatIfPointScenarioOutput) Date() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateWhatIfPointScenario) string { return v.Date }).(pulumi.StringOutput)
}

// The target value that you want to meet for the provided date.
func (o TemplateWhatIfPointScenarioOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v TemplateWhatIfPointScenario) float64 { return v.Value }).(pulumi.Float64Output)
}

type TemplateWhatIfPointScenarioPtrOutput struct{ *pulumi.OutputState }

func (TemplateWhatIfPointScenarioPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWhatIfPointScenario)(nil)).Elem()
}

func (o TemplateWhatIfPointScenarioPtrOutput) ToTemplateWhatIfPointScenarioPtrOutput() TemplateWhatIfPointScenarioPtrOutput {
	return o
}

func (o TemplateWhatIfPointScenarioPtrOutput) ToTemplateWhatIfPointScenarioPtrOutputWithContext(ctx context.Context) TemplateWhatIfPointScenarioPtrOutput {
	return o
}

func (o TemplateWhatIfPointScenarioPtrOutput) Elem() TemplateWhatIfPointScenarioOutput {
	return o.ApplyT(func(v *TemplateWhatIfPointScenario) TemplateWhatIfPointScenario {
		if v != nil {
			return *v
		}
		var ret TemplateWhatIfPointScenario
		return ret
	}).(TemplateWhatIfPointScenarioOutput)
}

// The date that you need the forecast results for.
func (o TemplateWhatIfPointScenarioPtrOutput) Date() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateWhatIfPointScenario) *string {
		if v == nil {
			return nil
		}
		return &v.Date
	}).(pulumi.StringPtrOutput)
}

// The target value that you want to meet for the provided date.
func (o TemplateWhatIfPointScenarioPtrOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateWhatIfPointScenario) *float64 {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.Float64PtrOutput)
}

type TemplateWhatIfRangeScenario struct {
	// The end date in the date range that you need the forecast results for.
	EndDate string `pulumi:"endDate"`
	// The start date in the date range that you need the forecast results for.
	StartDate string `pulumi:"startDate"`
	// The target value that you want to meet for the provided date range.
	Value float64 `pulumi:"value"`
}

// TemplateWhatIfRangeScenarioInput is an input type that accepts TemplateWhatIfRangeScenarioArgs and TemplateWhatIfRangeScenarioOutput values.
// You can construct a concrete instance of `TemplateWhatIfRangeScenarioInput` via:
//
//	TemplateWhatIfRangeScenarioArgs{...}
type TemplateWhatIfRangeScenarioInput interface {
	pulumi.Input

	ToTemplateWhatIfRangeScenarioOutput() TemplateWhatIfRangeScenarioOutput
	ToTemplateWhatIfRangeScenarioOutputWithContext(context.Context) TemplateWhatIfRangeScenarioOutput
}

type TemplateWhatIfRangeScenarioArgs struct {
	// The end date in the date range that you need the forecast results for.
	EndDate pulumi.StringInput `pulumi:"endDate"`
	// The start date in the date range that you need the forecast results for.
	StartDate pulumi.StringInput `pulumi:"startDate"`
	// The target value that you want to meet for the provided date range.
	Value pulumi.Float64Input `pulumi:"value"`
}

func (TemplateWhatIfRangeScenarioArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWhatIfRangeScenario)(nil)).Elem()
}

func (i TemplateWhatIfRangeScenarioArgs) ToTemplateWhatIfRangeScenarioOutput() TemplateWhatIfRangeScenarioOutput {
	return i.ToTemplateWhatIfRangeScenarioOutputWithContext(context.Background())
}

func (i TemplateWhatIfRangeScenarioArgs) ToTemplateWhatIfRangeScenarioOutputWithContext(ctx context.Context) TemplateWhatIfRangeScenarioOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWhatIfRangeScenarioOutput)
}

func (i TemplateWhatIfRangeScenarioArgs) ToTemplateWhatIfRangeScenarioPtrOutput() TemplateWhatIfRangeScenarioPtrOutput {
	return i.ToTemplateWhatIfRangeScenarioPtrOutputWithContext(context.Background())
}

func (i TemplateWhatIfRangeScenarioArgs) ToTemplateWhatIfRangeScenarioPtrOutputWithContext(ctx context.Context) TemplateWhatIfRangeScenarioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWhatIfRangeScenarioOutput).ToTemplateWhatIfRangeScenarioPtrOutputWithContext(ctx)
}

// TemplateWhatIfRangeScenarioPtrInput is an input type that accepts TemplateWhatIfRangeScenarioArgs, TemplateWhatIfRangeScenarioPtr and TemplateWhatIfRangeScenarioPtrOutput values.
// You can construct a concrete instance of `TemplateWhatIfRangeScenarioPtrInput` via:
//
//	        TemplateWhatIfRangeScenarioArgs{...}
//
//	or:
//
//	        nil
type TemplateWhatIfRangeScenarioPtrInput interface {
	pulumi.Input

	ToTemplateWhatIfRangeScenarioPtrOutput() TemplateWhatIfRangeScenarioPtrOutput
	ToTemplateWhatIfRangeScenarioPtrOutputWithContext(context.Context) TemplateWhatIfRangeScenarioPtrOutput
}

type templateWhatIfRangeScenarioPtrType TemplateWhatIfRangeScenarioArgs

func TemplateWhatIfRangeScenarioPtr(v *TemplateWhatIfRangeScenarioArgs) TemplateWhatIfRangeScenarioPtrInput {
	return (*templateWhatIfRangeScenarioPtrType)(v)
}

func (*templateWhatIfRangeScenarioPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWhatIfRangeScenario)(nil)).Elem()
}

func (i *templateWhatIfRangeScenarioPtrType) ToTemplateWhatIfRangeScenarioPtrOutput() TemplateWhatIfRangeScenarioPtrOutput {
	return i.ToTemplateWhatIfRangeScenarioPtrOutputWithContext(context.Background())
}

func (i *templateWhatIfRangeScenarioPtrType) ToTemplateWhatIfRangeScenarioPtrOutputWithContext(ctx context.Context) TemplateWhatIfRangeScenarioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWhatIfRangeScenarioPtrOutput)
}

type TemplateWhatIfRangeScenarioOutput struct{ *pulumi.OutputState }

func (TemplateWhatIfRangeScenarioOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWhatIfRangeScenario)(nil)).Elem()
}

func (o TemplateWhatIfRangeScenarioOutput) ToTemplateWhatIfRangeScenarioOutput() TemplateWhatIfRangeScenarioOutput {
	return o
}

func (o TemplateWhatIfRangeScenarioOutput) ToTemplateWhatIfRangeScenarioOutputWithContext(ctx context.Context) TemplateWhatIfRangeScenarioOutput {
	return o
}

func (o TemplateWhatIfRangeScenarioOutput) ToTemplateWhatIfRangeScenarioPtrOutput() TemplateWhatIfRangeScenarioPtrOutput {
	return o.ToTemplateWhatIfRangeScenarioPtrOutputWithContext(context.Background())
}

func (o TemplateWhatIfRangeScenarioOutput) ToTemplateWhatIfRangeScenarioPtrOutputWithContext(ctx context.Context) TemplateWhatIfRangeScenarioPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateWhatIfRangeScenario) *TemplateWhatIfRangeScenario {
		return &v
	}).(TemplateWhatIfRangeScenarioPtrOutput)
}

// The end date in the date range that you need the forecast results for.
func (o TemplateWhatIfRangeScenarioOutput) EndDate() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateWhatIfRangeScenario) string { return v.EndDate }).(pulumi.StringOutput)
}

// The start date in the date range that you need the forecast results for.
func (o TemplateWhatIfRangeScenarioOutput) StartDate() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateWhatIfRangeScenario) string { return v.StartDate }).(pulumi.StringOutput)
}

// The target value that you want to meet for the provided date range.
func (o TemplateWhatIfRangeScenarioOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v TemplateWhatIfRangeScenario) float64 { return v.Value }).(pulumi.Float64Output)
}

type TemplateWhatIfRangeScenarioPtrOutput struct{ *pulumi.OutputState }

func (TemplateWhatIfRangeScenarioPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWhatIfRangeScenario)(nil)).Elem()
}

func (o TemplateWhatIfRangeScenarioPtrOutput) ToTemplateWhatIfRangeScenarioPtrOutput() TemplateWhatIfRangeScenarioPtrOutput {
	return o
}

func (o TemplateWhatIfRangeScenarioPtrOutput) ToTemplateWhatIfRangeScenarioPtrOutputWithContext(ctx context.Context) TemplateWhatIfRangeScenarioPtrOutput {
	return o
}

func (o TemplateWhatIfRangeScenarioPtrOutput) Elem() TemplateWhatIfRangeScenarioOutput {
	return o.ApplyT(func(v *TemplateWhatIfRangeScenario) TemplateWhatIfRangeScenario {
		if v != nil {
			return *v
		}
		var ret TemplateWhatIfRangeScenario
		return ret
	}).(TemplateWhatIfRangeScenarioOutput)
}

// The end date in the date range that you need the forecast results for.
func (o TemplateWhatIfRangeScenarioPtrOutput) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateWhatIfRangeScenario) *string {
		if v == nil {
			return nil
		}
		return &v.EndDate
	}).(pulumi.StringPtrOutput)
}

// The start date in the date range that you need the forecast results for.
func (o TemplateWhatIfRangeScenarioPtrOutput) StartDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateWhatIfRangeScenario) *string {
		if v == nil {
			return nil
		}
		return &v.StartDate
	}).(pulumi.StringPtrOutput)
}

// The target value that you want to meet for the provided date range.
func (o TemplateWhatIfRangeScenarioPtrOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateWhatIfRangeScenario) *float64 {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.Float64PtrOutput)
}

type TemplateWordCloudAggregatedFieldWells struct {
	// The group by field well of a word cloud. Values are grouped by group by fields.
	GroupBy []TemplateDimensionField `pulumi:"groupBy"`
	// The size field well of a word cloud. Values are aggregated based on group by fields.
	Size []TemplateMeasureField `pulumi:"size"`
}

// TemplateWordCloudAggregatedFieldWellsInput is an input type that accepts TemplateWordCloudAggregatedFieldWellsArgs and TemplateWordCloudAggregatedFieldWellsOutput values.
// You can construct a concrete instance of `TemplateWordCloudAggregatedFieldWellsInput` via:
//
//	TemplateWordCloudAggregatedFieldWellsArgs{...}
type TemplateWordCloudAggregatedFieldWellsInput interface {
	pulumi.Input

	ToTemplateWordCloudAggregatedFieldWellsOutput() TemplateWordCloudAggregatedFieldWellsOutput
	ToTemplateWordCloudAggregatedFieldWellsOutputWithContext(context.Context) TemplateWordCloudAggregatedFieldWellsOutput
}

type TemplateWordCloudAggregatedFieldWellsArgs struct {
	// The group by field well of a word cloud. Values are grouped by group by fields.
	GroupBy TemplateDimensionFieldArrayInput `pulumi:"groupBy"`
	// The size field well of a word cloud. Values are aggregated based on group by fields.
	Size TemplateMeasureFieldArrayInput `pulumi:"size"`
}

func (TemplateWordCloudAggregatedFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWordCloudAggregatedFieldWells)(nil)).Elem()
}

func (i TemplateWordCloudAggregatedFieldWellsArgs) ToTemplateWordCloudAggregatedFieldWellsOutput() TemplateWordCloudAggregatedFieldWellsOutput {
	return i.ToTemplateWordCloudAggregatedFieldWellsOutputWithContext(context.Background())
}

func (i TemplateWordCloudAggregatedFieldWellsArgs) ToTemplateWordCloudAggregatedFieldWellsOutputWithContext(ctx context.Context) TemplateWordCloudAggregatedFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWordCloudAggregatedFieldWellsOutput)
}

func (i TemplateWordCloudAggregatedFieldWellsArgs) ToTemplateWordCloudAggregatedFieldWellsPtrOutput() TemplateWordCloudAggregatedFieldWellsPtrOutput {
	return i.ToTemplateWordCloudAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i TemplateWordCloudAggregatedFieldWellsArgs) ToTemplateWordCloudAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateWordCloudAggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWordCloudAggregatedFieldWellsOutput).ToTemplateWordCloudAggregatedFieldWellsPtrOutputWithContext(ctx)
}

// TemplateWordCloudAggregatedFieldWellsPtrInput is an input type that accepts TemplateWordCloudAggregatedFieldWellsArgs, TemplateWordCloudAggregatedFieldWellsPtr and TemplateWordCloudAggregatedFieldWellsPtrOutput values.
// You can construct a concrete instance of `TemplateWordCloudAggregatedFieldWellsPtrInput` via:
//
//	        TemplateWordCloudAggregatedFieldWellsArgs{...}
//
//	or:
//
//	        nil
type TemplateWordCloudAggregatedFieldWellsPtrInput interface {
	pulumi.Input

	ToTemplateWordCloudAggregatedFieldWellsPtrOutput() TemplateWordCloudAggregatedFieldWellsPtrOutput
	ToTemplateWordCloudAggregatedFieldWellsPtrOutputWithContext(context.Context) TemplateWordCloudAggregatedFieldWellsPtrOutput
}

type templateWordCloudAggregatedFieldWellsPtrType TemplateWordCloudAggregatedFieldWellsArgs

func TemplateWordCloudAggregatedFieldWellsPtr(v *TemplateWordCloudAggregatedFieldWellsArgs) TemplateWordCloudAggregatedFieldWellsPtrInput {
	return (*templateWordCloudAggregatedFieldWellsPtrType)(v)
}

func (*templateWordCloudAggregatedFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWordCloudAggregatedFieldWells)(nil)).Elem()
}

func (i *templateWordCloudAggregatedFieldWellsPtrType) ToTemplateWordCloudAggregatedFieldWellsPtrOutput() TemplateWordCloudAggregatedFieldWellsPtrOutput {
	return i.ToTemplateWordCloudAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i *templateWordCloudAggregatedFieldWellsPtrType) ToTemplateWordCloudAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateWordCloudAggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWordCloudAggregatedFieldWellsPtrOutput)
}

type TemplateWordCloudAggregatedFieldWellsOutput struct{ *pulumi.OutputState }

func (TemplateWordCloudAggregatedFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWordCloudAggregatedFieldWells)(nil)).Elem()
}

func (o TemplateWordCloudAggregatedFieldWellsOutput) ToTemplateWordCloudAggregatedFieldWellsOutput() TemplateWordCloudAggregatedFieldWellsOutput {
	return o
}

func (o TemplateWordCloudAggregatedFieldWellsOutput) ToTemplateWordCloudAggregatedFieldWellsOutputWithContext(ctx context.Context) TemplateWordCloudAggregatedFieldWellsOutput {
	return o
}

func (o TemplateWordCloudAggregatedFieldWellsOutput) ToTemplateWordCloudAggregatedFieldWellsPtrOutput() TemplateWordCloudAggregatedFieldWellsPtrOutput {
	return o.ToTemplateWordCloudAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (o TemplateWordCloudAggregatedFieldWellsOutput) ToTemplateWordCloudAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateWordCloudAggregatedFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateWordCloudAggregatedFieldWells) *TemplateWordCloudAggregatedFieldWells {
		return &v
	}).(TemplateWordCloudAggregatedFieldWellsPtrOutput)
}

// The group by field well of a word cloud. Values are grouped by group by fields.
func (o TemplateWordCloudAggregatedFieldWellsOutput) GroupBy() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v TemplateWordCloudAggregatedFieldWells) []TemplateDimensionField { return v.GroupBy }).(TemplateDimensionFieldArrayOutput)
}

// The size field well of a word cloud. Values are aggregated based on group by fields.
func (o TemplateWordCloudAggregatedFieldWellsOutput) Size() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v TemplateWordCloudAggregatedFieldWells) []TemplateMeasureField { return v.Size }).(TemplateMeasureFieldArrayOutput)
}

type TemplateWordCloudAggregatedFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (TemplateWordCloudAggregatedFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWordCloudAggregatedFieldWells)(nil)).Elem()
}

func (o TemplateWordCloudAggregatedFieldWellsPtrOutput) ToTemplateWordCloudAggregatedFieldWellsPtrOutput() TemplateWordCloudAggregatedFieldWellsPtrOutput {
	return o
}

func (o TemplateWordCloudAggregatedFieldWellsPtrOutput) ToTemplateWordCloudAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateWordCloudAggregatedFieldWellsPtrOutput {
	return o
}

func (o TemplateWordCloudAggregatedFieldWellsPtrOutput) Elem() TemplateWordCloudAggregatedFieldWellsOutput {
	return o.ApplyT(func(v *TemplateWordCloudAggregatedFieldWells) TemplateWordCloudAggregatedFieldWells {
		if v != nil {
			return *v
		}
		var ret TemplateWordCloudAggregatedFieldWells
		return ret
	}).(TemplateWordCloudAggregatedFieldWellsOutput)
}

// The group by field well of a word cloud. Values are grouped by group by fields.
func (o TemplateWordCloudAggregatedFieldWellsPtrOutput) GroupBy() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v *TemplateWordCloudAggregatedFieldWells) []TemplateDimensionField {
		if v == nil {
			return nil
		}
		return v.GroupBy
	}).(TemplateDimensionFieldArrayOutput)
}

// The size field well of a word cloud. Values are aggregated based on group by fields.
func (o TemplateWordCloudAggregatedFieldWellsPtrOutput) Size() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v *TemplateWordCloudAggregatedFieldWells) []TemplateMeasureField {
		if v == nil {
			return nil
		}
		return v.Size
	}).(TemplateMeasureFieldArrayOutput)
}

type TemplateWordCloudChartConfiguration struct {
	// The label options (label text, label visibility, and sort icon visibility) for the word cloud category.
	CategoryLabelOptions *TemplateChartAxisLabelOptions `pulumi:"categoryLabelOptions"`
	// The field wells of the visual.
	FieldWells *TemplateWordCloudFieldWells `pulumi:"fieldWells"`
	// The general visual interactions setup for a visual.
	Interactions *TemplateVisualInteractionOptions `pulumi:"interactions"`
	// The sort configuration of a word cloud visual.
	SortConfiguration *TemplateWordCloudSortConfiguration `pulumi:"sortConfiguration"`
	// The options for a word cloud visual.
	WordCloudOptions *TemplateWordCloudOptions `pulumi:"wordCloudOptions"`
}

// TemplateWordCloudChartConfigurationInput is an input type that accepts TemplateWordCloudChartConfigurationArgs and TemplateWordCloudChartConfigurationOutput values.
// You can construct a concrete instance of `TemplateWordCloudChartConfigurationInput` via:
//
//	TemplateWordCloudChartConfigurationArgs{...}
type TemplateWordCloudChartConfigurationInput interface {
	pulumi.Input

	ToTemplateWordCloudChartConfigurationOutput() TemplateWordCloudChartConfigurationOutput
	ToTemplateWordCloudChartConfigurationOutputWithContext(context.Context) TemplateWordCloudChartConfigurationOutput
}

type TemplateWordCloudChartConfigurationArgs struct {
	// The label options (label text, label visibility, and sort icon visibility) for the word cloud category.
	CategoryLabelOptions TemplateChartAxisLabelOptionsPtrInput `pulumi:"categoryLabelOptions"`
	// The field wells of the visual.
	FieldWells TemplateWordCloudFieldWellsPtrInput `pulumi:"fieldWells"`
	// The general visual interactions setup for a visual.
	Interactions TemplateVisualInteractionOptionsPtrInput `pulumi:"interactions"`
	// The sort configuration of a word cloud visual.
	SortConfiguration TemplateWordCloudSortConfigurationPtrInput `pulumi:"sortConfiguration"`
	// The options for a word cloud visual.
	WordCloudOptions TemplateWordCloudOptionsPtrInput `pulumi:"wordCloudOptions"`
}

func (TemplateWordCloudChartConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWordCloudChartConfiguration)(nil)).Elem()
}

func (i TemplateWordCloudChartConfigurationArgs) ToTemplateWordCloudChartConfigurationOutput() TemplateWordCloudChartConfigurationOutput {
	return i.ToTemplateWordCloudChartConfigurationOutputWithContext(context.Background())
}

func (i TemplateWordCloudChartConfigurationArgs) ToTemplateWordCloudChartConfigurationOutputWithContext(ctx context.Context) TemplateWordCloudChartConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWordCloudChartConfigurationOutput)
}

func (i TemplateWordCloudChartConfigurationArgs) ToTemplateWordCloudChartConfigurationPtrOutput() TemplateWordCloudChartConfigurationPtrOutput {
	return i.ToTemplateWordCloudChartConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateWordCloudChartConfigurationArgs) ToTemplateWordCloudChartConfigurationPtrOutputWithContext(ctx context.Context) TemplateWordCloudChartConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWordCloudChartConfigurationOutput).ToTemplateWordCloudChartConfigurationPtrOutputWithContext(ctx)
}

// TemplateWordCloudChartConfigurationPtrInput is an input type that accepts TemplateWordCloudChartConfigurationArgs, TemplateWordCloudChartConfigurationPtr and TemplateWordCloudChartConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateWordCloudChartConfigurationPtrInput` via:
//
//	        TemplateWordCloudChartConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateWordCloudChartConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateWordCloudChartConfigurationPtrOutput() TemplateWordCloudChartConfigurationPtrOutput
	ToTemplateWordCloudChartConfigurationPtrOutputWithContext(context.Context) TemplateWordCloudChartConfigurationPtrOutput
}

type templateWordCloudChartConfigurationPtrType TemplateWordCloudChartConfigurationArgs

func TemplateWordCloudChartConfigurationPtr(v *TemplateWordCloudChartConfigurationArgs) TemplateWordCloudChartConfigurationPtrInput {
	return (*templateWordCloudChartConfigurationPtrType)(v)
}

func (*templateWordCloudChartConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWordCloudChartConfiguration)(nil)).Elem()
}

func (i *templateWordCloudChartConfigurationPtrType) ToTemplateWordCloudChartConfigurationPtrOutput() TemplateWordCloudChartConfigurationPtrOutput {
	return i.ToTemplateWordCloudChartConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateWordCloudChartConfigurationPtrType) ToTemplateWordCloudChartConfigurationPtrOutputWithContext(ctx context.Context) TemplateWordCloudChartConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWordCloudChartConfigurationPtrOutput)
}

type TemplateWordCloudChartConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateWordCloudChartConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWordCloudChartConfiguration)(nil)).Elem()
}

func (o TemplateWordCloudChartConfigurationOutput) ToTemplateWordCloudChartConfigurationOutput() TemplateWordCloudChartConfigurationOutput {
	return o
}

func (o TemplateWordCloudChartConfigurationOutput) ToTemplateWordCloudChartConfigurationOutputWithContext(ctx context.Context) TemplateWordCloudChartConfigurationOutput {
	return o
}

func (o TemplateWordCloudChartConfigurationOutput) ToTemplateWordCloudChartConfigurationPtrOutput() TemplateWordCloudChartConfigurationPtrOutput {
	return o.ToTemplateWordCloudChartConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateWordCloudChartConfigurationOutput) ToTemplateWordCloudChartConfigurationPtrOutputWithContext(ctx context.Context) TemplateWordCloudChartConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateWordCloudChartConfiguration) *TemplateWordCloudChartConfiguration {
		return &v
	}).(TemplateWordCloudChartConfigurationPtrOutput)
}

// The label options (label text, label visibility, and sort icon visibility) for the word cloud category.
func (o TemplateWordCloudChartConfigurationOutput) CategoryLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateWordCloudChartConfiguration) *TemplateChartAxisLabelOptions {
		return v.CategoryLabelOptions
	}).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The field wells of the visual.
func (o TemplateWordCloudChartConfigurationOutput) FieldWells() TemplateWordCloudFieldWellsPtrOutput {
	return o.ApplyT(func(v TemplateWordCloudChartConfiguration) *TemplateWordCloudFieldWells { return v.FieldWells }).(TemplateWordCloudFieldWellsPtrOutput)
}

// The general visual interactions setup for a visual.
func (o TemplateWordCloudChartConfigurationOutput) Interactions() TemplateVisualInteractionOptionsPtrOutput {
	return o.ApplyT(func(v TemplateWordCloudChartConfiguration) *TemplateVisualInteractionOptions { return v.Interactions }).(TemplateVisualInteractionOptionsPtrOutput)
}

// The sort configuration of a word cloud visual.
func (o TemplateWordCloudChartConfigurationOutput) SortConfiguration() TemplateWordCloudSortConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateWordCloudChartConfiguration) *TemplateWordCloudSortConfiguration {
		return v.SortConfiguration
	}).(TemplateWordCloudSortConfigurationPtrOutput)
}

// The options for a word cloud visual.
func (o TemplateWordCloudChartConfigurationOutput) WordCloudOptions() TemplateWordCloudOptionsPtrOutput {
	return o.ApplyT(func(v TemplateWordCloudChartConfiguration) *TemplateWordCloudOptions { return v.WordCloudOptions }).(TemplateWordCloudOptionsPtrOutput)
}

type TemplateWordCloudChartConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateWordCloudChartConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWordCloudChartConfiguration)(nil)).Elem()
}

func (o TemplateWordCloudChartConfigurationPtrOutput) ToTemplateWordCloudChartConfigurationPtrOutput() TemplateWordCloudChartConfigurationPtrOutput {
	return o
}

func (o TemplateWordCloudChartConfigurationPtrOutput) ToTemplateWordCloudChartConfigurationPtrOutputWithContext(ctx context.Context) TemplateWordCloudChartConfigurationPtrOutput {
	return o
}

func (o TemplateWordCloudChartConfigurationPtrOutput) Elem() TemplateWordCloudChartConfigurationOutput {
	return o.ApplyT(func(v *TemplateWordCloudChartConfiguration) TemplateWordCloudChartConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateWordCloudChartConfiguration
		return ret
	}).(TemplateWordCloudChartConfigurationOutput)
}

// The label options (label text, label visibility, and sort icon visibility) for the word cloud category.
func (o TemplateWordCloudChartConfigurationPtrOutput) CategoryLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateWordCloudChartConfiguration) *TemplateChartAxisLabelOptions {
		if v == nil {
			return nil
		}
		return v.CategoryLabelOptions
	}).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The field wells of the visual.
func (o TemplateWordCloudChartConfigurationPtrOutput) FieldWells() TemplateWordCloudFieldWellsPtrOutput {
	return o.ApplyT(func(v *TemplateWordCloudChartConfiguration) *TemplateWordCloudFieldWells {
		if v == nil {
			return nil
		}
		return v.FieldWells
	}).(TemplateWordCloudFieldWellsPtrOutput)
}

// The general visual interactions setup for a visual.
func (o TemplateWordCloudChartConfigurationPtrOutput) Interactions() TemplateVisualInteractionOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateWordCloudChartConfiguration) *TemplateVisualInteractionOptions {
		if v == nil {
			return nil
		}
		return v.Interactions
	}).(TemplateVisualInteractionOptionsPtrOutput)
}

// The sort configuration of a word cloud visual.
func (o TemplateWordCloudChartConfigurationPtrOutput) SortConfiguration() TemplateWordCloudSortConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateWordCloudChartConfiguration) *TemplateWordCloudSortConfiguration {
		if v == nil {
			return nil
		}
		return v.SortConfiguration
	}).(TemplateWordCloudSortConfigurationPtrOutput)
}

// The options for a word cloud visual.
func (o TemplateWordCloudChartConfigurationPtrOutput) WordCloudOptions() TemplateWordCloudOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateWordCloudChartConfiguration) *TemplateWordCloudOptions {
		if v == nil {
			return nil
		}
		return v.WordCloudOptions
	}).(TemplateWordCloudOptionsPtrOutput)
}

type TemplateWordCloudFieldWells struct {
	// The aggregated field wells of a word cloud.
	WordCloudAggregatedFieldWells *TemplateWordCloudAggregatedFieldWells `pulumi:"wordCloudAggregatedFieldWells"`
}

// TemplateWordCloudFieldWellsInput is an input type that accepts TemplateWordCloudFieldWellsArgs and TemplateWordCloudFieldWellsOutput values.
// You can construct a concrete instance of `TemplateWordCloudFieldWellsInput` via:
//
//	TemplateWordCloudFieldWellsArgs{...}
type TemplateWordCloudFieldWellsInput interface {
	pulumi.Input

	ToTemplateWordCloudFieldWellsOutput() TemplateWordCloudFieldWellsOutput
	ToTemplateWordCloudFieldWellsOutputWithContext(context.Context) TemplateWordCloudFieldWellsOutput
}

type TemplateWordCloudFieldWellsArgs struct {
	// The aggregated field wells of a word cloud.
	WordCloudAggregatedFieldWells TemplateWordCloudAggregatedFieldWellsPtrInput `pulumi:"wordCloudAggregatedFieldWells"`
}

func (TemplateWordCloudFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWordCloudFieldWells)(nil)).Elem()
}

func (i TemplateWordCloudFieldWellsArgs) ToTemplateWordCloudFieldWellsOutput() TemplateWordCloudFieldWellsOutput {
	return i.ToTemplateWordCloudFieldWellsOutputWithContext(context.Background())
}

func (i TemplateWordCloudFieldWellsArgs) ToTemplateWordCloudFieldWellsOutputWithContext(ctx context.Context) TemplateWordCloudFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWordCloudFieldWellsOutput)
}

func (i TemplateWordCloudFieldWellsArgs) ToTemplateWordCloudFieldWellsPtrOutput() TemplateWordCloudFieldWellsPtrOutput {
	return i.ToTemplateWordCloudFieldWellsPtrOutputWithContext(context.Background())
}

func (i TemplateWordCloudFieldWellsArgs) ToTemplateWordCloudFieldWellsPtrOutputWithContext(ctx context.Context) TemplateWordCloudFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWordCloudFieldWellsOutput).ToTemplateWordCloudFieldWellsPtrOutputWithContext(ctx)
}

// TemplateWordCloudFieldWellsPtrInput is an input type that accepts TemplateWordCloudFieldWellsArgs, TemplateWordCloudFieldWellsPtr and TemplateWordCloudFieldWellsPtrOutput values.
// You can construct a concrete instance of `TemplateWordCloudFieldWellsPtrInput` via:
//
//	        TemplateWordCloudFieldWellsArgs{...}
//
//	or:
//
//	        nil
type TemplateWordCloudFieldWellsPtrInput interface {
	pulumi.Input

	ToTemplateWordCloudFieldWellsPtrOutput() TemplateWordCloudFieldWellsPtrOutput
	ToTemplateWordCloudFieldWellsPtrOutputWithContext(context.Context) TemplateWordCloudFieldWellsPtrOutput
}

type templateWordCloudFieldWellsPtrType TemplateWordCloudFieldWellsArgs

func TemplateWordCloudFieldWellsPtr(v *TemplateWordCloudFieldWellsArgs) TemplateWordCloudFieldWellsPtrInput {
	return (*templateWordCloudFieldWellsPtrType)(v)
}

func (*templateWordCloudFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWordCloudFieldWells)(nil)).Elem()
}

func (i *templateWordCloudFieldWellsPtrType) ToTemplateWordCloudFieldWellsPtrOutput() TemplateWordCloudFieldWellsPtrOutput {
	return i.ToTemplateWordCloudFieldWellsPtrOutputWithContext(context.Background())
}

func (i *templateWordCloudFieldWellsPtrType) ToTemplateWordCloudFieldWellsPtrOutputWithContext(ctx context.Context) TemplateWordCloudFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWordCloudFieldWellsPtrOutput)
}

type TemplateWordCloudFieldWellsOutput struct{ *pulumi.OutputState }

func (TemplateWordCloudFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWordCloudFieldWells)(nil)).Elem()
}

func (o TemplateWordCloudFieldWellsOutput) ToTemplateWordCloudFieldWellsOutput() TemplateWordCloudFieldWellsOutput {
	return o
}

func (o TemplateWordCloudFieldWellsOutput) ToTemplateWordCloudFieldWellsOutputWithContext(ctx context.Context) TemplateWordCloudFieldWellsOutput {
	return o
}

func (o TemplateWordCloudFieldWellsOutput) ToTemplateWordCloudFieldWellsPtrOutput() TemplateWordCloudFieldWellsPtrOutput {
	return o.ToTemplateWordCloudFieldWellsPtrOutputWithContext(context.Background())
}

func (o TemplateWordCloudFieldWellsOutput) ToTemplateWordCloudFieldWellsPtrOutputWithContext(ctx context.Context) TemplateWordCloudFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateWordCloudFieldWells) *TemplateWordCloudFieldWells {
		return &v
	}).(TemplateWordCloudFieldWellsPtrOutput)
}

// The aggregated field wells of a word cloud.
func (o TemplateWordCloudFieldWellsOutput) WordCloudAggregatedFieldWells() TemplateWordCloudAggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v TemplateWordCloudFieldWells) *TemplateWordCloudAggregatedFieldWells {
		return v.WordCloudAggregatedFieldWells
	}).(TemplateWordCloudAggregatedFieldWellsPtrOutput)
}

type TemplateWordCloudFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (TemplateWordCloudFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWordCloudFieldWells)(nil)).Elem()
}

func (o TemplateWordCloudFieldWellsPtrOutput) ToTemplateWordCloudFieldWellsPtrOutput() TemplateWordCloudFieldWellsPtrOutput {
	return o
}

func (o TemplateWordCloudFieldWellsPtrOutput) ToTemplateWordCloudFieldWellsPtrOutputWithContext(ctx context.Context) TemplateWordCloudFieldWellsPtrOutput {
	return o
}

func (o TemplateWordCloudFieldWellsPtrOutput) Elem() TemplateWordCloudFieldWellsOutput {
	return o.ApplyT(func(v *TemplateWordCloudFieldWells) TemplateWordCloudFieldWells {
		if v != nil {
			return *v
		}
		var ret TemplateWordCloudFieldWells
		return ret
	}).(TemplateWordCloudFieldWellsOutput)
}

// The aggregated field wells of a word cloud.
func (o TemplateWordCloudFieldWellsPtrOutput) WordCloudAggregatedFieldWells() TemplateWordCloudAggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v *TemplateWordCloudFieldWells) *TemplateWordCloudAggregatedFieldWells {
		if v == nil {
			return nil
		}
		return v.WordCloudAggregatedFieldWells
	}).(TemplateWordCloudAggregatedFieldWellsPtrOutput)
}

type TemplateWordCloudOptions struct {
	// The cloud layout options (fluid, normal) of a word cloud.
	CloudLayout *TemplateWordCloudCloudLayout `pulumi:"cloudLayout"`
	// The length limit of each word from 1-100.
	MaximumStringLength *float64 `pulumi:"maximumStringLength"`
	// The word casing options (lower_case, existing_case) for the words in a word cloud.
	WordCasing *TemplateWordCloudWordCasing `pulumi:"wordCasing"`
	// The word orientation options (horizontal, horizontal_and_vertical) for the words in a word cloud.
	WordOrientation *TemplateWordCloudWordOrientation `pulumi:"wordOrientation"`
	// The word padding options (none, small, medium, large) for the words in a word cloud.
	WordPadding *TemplateWordCloudWordPadding `pulumi:"wordPadding"`
	// The word scaling options (emphasize, normal) for the words in a word cloud.
	WordScaling *TemplateWordCloudWordScaling `pulumi:"wordScaling"`
}

// TemplateWordCloudOptionsInput is an input type that accepts TemplateWordCloudOptionsArgs and TemplateWordCloudOptionsOutput values.
// You can construct a concrete instance of `TemplateWordCloudOptionsInput` via:
//
//	TemplateWordCloudOptionsArgs{...}
type TemplateWordCloudOptionsInput interface {
	pulumi.Input

	ToTemplateWordCloudOptionsOutput() TemplateWordCloudOptionsOutput
	ToTemplateWordCloudOptionsOutputWithContext(context.Context) TemplateWordCloudOptionsOutput
}

type TemplateWordCloudOptionsArgs struct {
	// The cloud layout options (fluid, normal) of a word cloud.
	CloudLayout TemplateWordCloudCloudLayoutPtrInput `pulumi:"cloudLayout"`
	// The length limit of each word from 1-100.
	MaximumStringLength pulumi.Float64PtrInput `pulumi:"maximumStringLength"`
	// The word casing options (lower_case, existing_case) for the words in a word cloud.
	WordCasing TemplateWordCloudWordCasingPtrInput `pulumi:"wordCasing"`
	// The word orientation options (horizontal, horizontal_and_vertical) for the words in a word cloud.
	WordOrientation TemplateWordCloudWordOrientationPtrInput `pulumi:"wordOrientation"`
	// The word padding options (none, small, medium, large) for the words in a word cloud.
	WordPadding TemplateWordCloudWordPaddingPtrInput `pulumi:"wordPadding"`
	// The word scaling options (emphasize, normal) for the words in a word cloud.
	WordScaling TemplateWordCloudWordScalingPtrInput `pulumi:"wordScaling"`
}

func (TemplateWordCloudOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWordCloudOptions)(nil)).Elem()
}

func (i TemplateWordCloudOptionsArgs) ToTemplateWordCloudOptionsOutput() TemplateWordCloudOptionsOutput {
	return i.ToTemplateWordCloudOptionsOutputWithContext(context.Background())
}

func (i TemplateWordCloudOptionsArgs) ToTemplateWordCloudOptionsOutputWithContext(ctx context.Context) TemplateWordCloudOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWordCloudOptionsOutput)
}

func (i TemplateWordCloudOptionsArgs) ToTemplateWordCloudOptionsPtrOutput() TemplateWordCloudOptionsPtrOutput {
	return i.ToTemplateWordCloudOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateWordCloudOptionsArgs) ToTemplateWordCloudOptionsPtrOutputWithContext(ctx context.Context) TemplateWordCloudOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWordCloudOptionsOutput).ToTemplateWordCloudOptionsPtrOutputWithContext(ctx)
}

// TemplateWordCloudOptionsPtrInput is an input type that accepts TemplateWordCloudOptionsArgs, TemplateWordCloudOptionsPtr and TemplateWordCloudOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateWordCloudOptionsPtrInput` via:
//
//	        TemplateWordCloudOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateWordCloudOptionsPtrInput interface {
	pulumi.Input

	ToTemplateWordCloudOptionsPtrOutput() TemplateWordCloudOptionsPtrOutput
	ToTemplateWordCloudOptionsPtrOutputWithContext(context.Context) TemplateWordCloudOptionsPtrOutput
}

type templateWordCloudOptionsPtrType TemplateWordCloudOptionsArgs

func TemplateWordCloudOptionsPtr(v *TemplateWordCloudOptionsArgs) TemplateWordCloudOptionsPtrInput {
	return (*templateWordCloudOptionsPtrType)(v)
}

func (*templateWordCloudOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWordCloudOptions)(nil)).Elem()
}

func (i *templateWordCloudOptionsPtrType) ToTemplateWordCloudOptionsPtrOutput() TemplateWordCloudOptionsPtrOutput {
	return i.ToTemplateWordCloudOptionsPtrOutputWithContext(context.Background())
}

func (i *templateWordCloudOptionsPtrType) ToTemplateWordCloudOptionsPtrOutputWithContext(ctx context.Context) TemplateWordCloudOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWordCloudOptionsPtrOutput)
}

type TemplateWordCloudOptionsOutput struct{ *pulumi.OutputState }

func (TemplateWordCloudOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWordCloudOptions)(nil)).Elem()
}

func (o TemplateWordCloudOptionsOutput) ToTemplateWordCloudOptionsOutput() TemplateWordCloudOptionsOutput {
	return o
}

func (o TemplateWordCloudOptionsOutput) ToTemplateWordCloudOptionsOutputWithContext(ctx context.Context) TemplateWordCloudOptionsOutput {
	return o
}

func (o TemplateWordCloudOptionsOutput) ToTemplateWordCloudOptionsPtrOutput() TemplateWordCloudOptionsPtrOutput {
	return o.ToTemplateWordCloudOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateWordCloudOptionsOutput) ToTemplateWordCloudOptionsPtrOutputWithContext(ctx context.Context) TemplateWordCloudOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateWordCloudOptions) *TemplateWordCloudOptions {
		return &v
	}).(TemplateWordCloudOptionsPtrOutput)
}

// The cloud layout options (fluid, normal) of a word cloud.
func (o TemplateWordCloudOptionsOutput) CloudLayout() TemplateWordCloudCloudLayoutPtrOutput {
	return o.ApplyT(func(v TemplateWordCloudOptions) *TemplateWordCloudCloudLayout { return v.CloudLayout }).(TemplateWordCloudCloudLayoutPtrOutput)
}

// The length limit of each word from 1-100.
func (o TemplateWordCloudOptionsOutput) MaximumStringLength() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateWordCloudOptions) *float64 { return v.MaximumStringLength }).(pulumi.Float64PtrOutput)
}

// The word casing options (lower_case, existing_case) for the words in a word cloud.
func (o TemplateWordCloudOptionsOutput) WordCasing() TemplateWordCloudWordCasingPtrOutput {
	return o.ApplyT(func(v TemplateWordCloudOptions) *TemplateWordCloudWordCasing { return v.WordCasing }).(TemplateWordCloudWordCasingPtrOutput)
}

// The word orientation options (horizontal, horizontal_and_vertical) for the words in a word cloud.
func (o TemplateWordCloudOptionsOutput) WordOrientation() TemplateWordCloudWordOrientationPtrOutput {
	return o.ApplyT(func(v TemplateWordCloudOptions) *TemplateWordCloudWordOrientation { return v.WordOrientation }).(TemplateWordCloudWordOrientationPtrOutput)
}

// The word padding options (none, small, medium, large) for the words in a word cloud.
func (o TemplateWordCloudOptionsOutput) WordPadding() TemplateWordCloudWordPaddingPtrOutput {
	return o.ApplyT(func(v TemplateWordCloudOptions) *TemplateWordCloudWordPadding { return v.WordPadding }).(TemplateWordCloudWordPaddingPtrOutput)
}

// The word scaling options (emphasize, normal) for the words in a word cloud.
func (o TemplateWordCloudOptionsOutput) WordScaling() TemplateWordCloudWordScalingPtrOutput {
	return o.ApplyT(func(v TemplateWordCloudOptions) *TemplateWordCloudWordScaling { return v.WordScaling }).(TemplateWordCloudWordScalingPtrOutput)
}

type TemplateWordCloudOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateWordCloudOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWordCloudOptions)(nil)).Elem()
}

func (o TemplateWordCloudOptionsPtrOutput) ToTemplateWordCloudOptionsPtrOutput() TemplateWordCloudOptionsPtrOutput {
	return o
}

func (o TemplateWordCloudOptionsPtrOutput) ToTemplateWordCloudOptionsPtrOutputWithContext(ctx context.Context) TemplateWordCloudOptionsPtrOutput {
	return o
}

func (o TemplateWordCloudOptionsPtrOutput) Elem() TemplateWordCloudOptionsOutput {
	return o.ApplyT(func(v *TemplateWordCloudOptions) TemplateWordCloudOptions {
		if v != nil {
			return *v
		}
		var ret TemplateWordCloudOptions
		return ret
	}).(TemplateWordCloudOptionsOutput)
}

// The cloud layout options (fluid, normal) of a word cloud.
func (o TemplateWordCloudOptionsPtrOutput) CloudLayout() TemplateWordCloudCloudLayoutPtrOutput {
	return o.ApplyT(func(v *TemplateWordCloudOptions) *TemplateWordCloudCloudLayout {
		if v == nil {
			return nil
		}
		return v.CloudLayout
	}).(TemplateWordCloudCloudLayoutPtrOutput)
}

// The length limit of each word from 1-100.
func (o TemplateWordCloudOptionsPtrOutput) MaximumStringLength() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateWordCloudOptions) *float64 {
		if v == nil {
			return nil
		}
		return v.MaximumStringLength
	}).(pulumi.Float64PtrOutput)
}

// The word casing options (lower_case, existing_case) for the words in a word cloud.
func (o TemplateWordCloudOptionsPtrOutput) WordCasing() TemplateWordCloudWordCasingPtrOutput {
	return o.ApplyT(func(v *TemplateWordCloudOptions) *TemplateWordCloudWordCasing {
		if v == nil {
			return nil
		}
		return v.WordCasing
	}).(TemplateWordCloudWordCasingPtrOutput)
}

// The word orientation options (horizontal, horizontal_and_vertical) for the words in a word cloud.
func (o TemplateWordCloudOptionsPtrOutput) WordOrientation() TemplateWordCloudWordOrientationPtrOutput {
	return o.ApplyT(func(v *TemplateWordCloudOptions) *TemplateWordCloudWordOrientation {
		if v == nil {
			return nil
		}
		return v.WordOrientation
	}).(TemplateWordCloudWordOrientationPtrOutput)
}

// The word padding options (none, small, medium, large) for the words in a word cloud.
func (o TemplateWordCloudOptionsPtrOutput) WordPadding() TemplateWordCloudWordPaddingPtrOutput {
	return o.ApplyT(func(v *TemplateWordCloudOptions) *TemplateWordCloudWordPadding {
		if v == nil {
			return nil
		}
		return v.WordPadding
	}).(TemplateWordCloudWordPaddingPtrOutput)
}

// The word scaling options (emphasize, normal) for the words in a word cloud.
func (o TemplateWordCloudOptionsPtrOutput) WordScaling() TemplateWordCloudWordScalingPtrOutput {
	return o.ApplyT(func(v *TemplateWordCloudOptions) *TemplateWordCloudWordScaling {
		if v == nil {
			return nil
		}
		return v.WordScaling
	}).(TemplateWordCloudWordScalingPtrOutput)
}

type TemplateWordCloudSortConfiguration struct {
	// The limit on the number of groups that are displayed in a word cloud.
	CategoryItemsLimit *TemplateItemsLimitConfiguration `pulumi:"categoryItemsLimit"`
	// The sort configuration of group by fields.
	CategorySort []TemplateFieldSortOptions `pulumi:"categorySort"`
}

// TemplateWordCloudSortConfigurationInput is an input type that accepts TemplateWordCloudSortConfigurationArgs and TemplateWordCloudSortConfigurationOutput values.
// You can construct a concrete instance of `TemplateWordCloudSortConfigurationInput` via:
//
//	TemplateWordCloudSortConfigurationArgs{...}
type TemplateWordCloudSortConfigurationInput interface {
	pulumi.Input

	ToTemplateWordCloudSortConfigurationOutput() TemplateWordCloudSortConfigurationOutput
	ToTemplateWordCloudSortConfigurationOutputWithContext(context.Context) TemplateWordCloudSortConfigurationOutput
}

type TemplateWordCloudSortConfigurationArgs struct {
	// The limit on the number of groups that are displayed in a word cloud.
	CategoryItemsLimit TemplateItemsLimitConfigurationPtrInput `pulumi:"categoryItemsLimit"`
	// The sort configuration of group by fields.
	CategorySort TemplateFieldSortOptionsArrayInput `pulumi:"categorySort"`
}

func (TemplateWordCloudSortConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWordCloudSortConfiguration)(nil)).Elem()
}

func (i TemplateWordCloudSortConfigurationArgs) ToTemplateWordCloudSortConfigurationOutput() TemplateWordCloudSortConfigurationOutput {
	return i.ToTemplateWordCloudSortConfigurationOutputWithContext(context.Background())
}

func (i TemplateWordCloudSortConfigurationArgs) ToTemplateWordCloudSortConfigurationOutputWithContext(ctx context.Context) TemplateWordCloudSortConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWordCloudSortConfigurationOutput)
}

func (i TemplateWordCloudSortConfigurationArgs) ToTemplateWordCloudSortConfigurationPtrOutput() TemplateWordCloudSortConfigurationPtrOutput {
	return i.ToTemplateWordCloudSortConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateWordCloudSortConfigurationArgs) ToTemplateWordCloudSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateWordCloudSortConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWordCloudSortConfigurationOutput).ToTemplateWordCloudSortConfigurationPtrOutputWithContext(ctx)
}

// TemplateWordCloudSortConfigurationPtrInput is an input type that accepts TemplateWordCloudSortConfigurationArgs, TemplateWordCloudSortConfigurationPtr and TemplateWordCloudSortConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateWordCloudSortConfigurationPtrInput` via:
//
//	        TemplateWordCloudSortConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateWordCloudSortConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateWordCloudSortConfigurationPtrOutput() TemplateWordCloudSortConfigurationPtrOutput
	ToTemplateWordCloudSortConfigurationPtrOutputWithContext(context.Context) TemplateWordCloudSortConfigurationPtrOutput
}

type templateWordCloudSortConfigurationPtrType TemplateWordCloudSortConfigurationArgs

func TemplateWordCloudSortConfigurationPtr(v *TemplateWordCloudSortConfigurationArgs) TemplateWordCloudSortConfigurationPtrInput {
	return (*templateWordCloudSortConfigurationPtrType)(v)
}

func (*templateWordCloudSortConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWordCloudSortConfiguration)(nil)).Elem()
}

func (i *templateWordCloudSortConfigurationPtrType) ToTemplateWordCloudSortConfigurationPtrOutput() TemplateWordCloudSortConfigurationPtrOutput {
	return i.ToTemplateWordCloudSortConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateWordCloudSortConfigurationPtrType) ToTemplateWordCloudSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateWordCloudSortConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWordCloudSortConfigurationPtrOutput)
}

type TemplateWordCloudSortConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateWordCloudSortConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWordCloudSortConfiguration)(nil)).Elem()
}

func (o TemplateWordCloudSortConfigurationOutput) ToTemplateWordCloudSortConfigurationOutput() TemplateWordCloudSortConfigurationOutput {
	return o
}

func (o TemplateWordCloudSortConfigurationOutput) ToTemplateWordCloudSortConfigurationOutputWithContext(ctx context.Context) TemplateWordCloudSortConfigurationOutput {
	return o
}

func (o TemplateWordCloudSortConfigurationOutput) ToTemplateWordCloudSortConfigurationPtrOutput() TemplateWordCloudSortConfigurationPtrOutput {
	return o.ToTemplateWordCloudSortConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateWordCloudSortConfigurationOutput) ToTemplateWordCloudSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateWordCloudSortConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateWordCloudSortConfiguration) *TemplateWordCloudSortConfiguration {
		return &v
	}).(TemplateWordCloudSortConfigurationPtrOutput)
}

// The limit on the number of groups that are displayed in a word cloud.
func (o TemplateWordCloudSortConfigurationOutput) CategoryItemsLimit() TemplateItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateWordCloudSortConfiguration) *TemplateItemsLimitConfiguration {
		return v.CategoryItemsLimit
	}).(TemplateItemsLimitConfigurationPtrOutput)
}

// The sort configuration of group by fields.
func (o TemplateWordCloudSortConfigurationOutput) CategorySort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v TemplateWordCloudSortConfiguration) []TemplateFieldSortOptions { return v.CategorySort }).(TemplateFieldSortOptionsArrayOutput)
}

type TemplateWordCloudSortConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateWordCloudSortConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWordCloudSortConfiguration)(nil)).Elem()
}

func (o TemplateWordCloudSortConfigurationPtrOutput) ToTemplateWordCloudSortConfigurationPtrOutput() TemplateWordCloudSortConfigurationPtrOutput {
	return o
}

func (o TemplateWordCloudSortConfigurationPtrOutput) ToTemplateWordCloudSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateWordCloudSortConfigurationPtrOutput {
	return o
}

func (o TemplateWordCloudSortConfigurationPtrOutput) Elem() TemplateWordCloudSortConfigurationOutput {
	return o.ApplyT(func(v *TemplateWordCloudSortConfiguration) TemplateWordCloudSortConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateWordCloudSortConfiguration
		return ret
	}).(TemplateWordCloudSortConfigurationOutput)
}

// The limit on the number of groups that are displayed in a word cloud.
func (o TemplateWordCloudSortConfigurationPtrOutput) CategoryItemsLimit() TemplateItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateWordCloudSortConfiguration) *TemplateItemsLimitConfiguration {
		if v == nil {
			return nil
		}
		return v.CategoryItemsLimit
	}).(TemplateItemsLimitConfigurationPtrOutput)
}

// The sort configuration of group by fields.
func (o TemplateWordCloudSortConfigurationPtrOutput) CategorySort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v *TemplateWordCloudSortConfiguration) []TemplateFieldSortOptions {
		if v == nil {
			return nil
		}
		return v.CategorySort
	}).(TemplateFieldSortOptionsArrayOutput)
}

type TemplateWordCloudVisual struct {
	// The list of custom actions that are configured for a visual.
	Actions []TemplateVisualCustomAction `pulumi:"actions"`
	// The configuration settings of the visual.
	ChartConfiguration *TemplateWordCloudChartConfiguration `pulumi:"chartConfiguration"`
	// The column hierarchy that is used during drill-downs and drill-ups.
	ColumnHierarchies []TemplateColumnHierarchy `pulumi:"columnHierarchies"`
	// The subtitle that is displayed on the visual.
	Subtitle *TemplateVisualSubtitleLabelOptions `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title *TemplateVisualTitleLabelOptions `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText *string `pulumi:"visualContentAltText"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
	VisualId string `pulumi:"visualId"`
}

// TemplateWordCloudVisualInput is an input type that accepts TemplateWordCloudVisualArgs and TemplateWordCloudVisualOutput values.
// You can construct a concrete instance of `TemplateWordCloudVisualInput` via:
//
//	TemplateWordCloudVisualArgs{...}
type TemplateWordCloudVisualInput interface {
	pulumi.Input

	ToTemplateWordCloudVisualOutput() TemplateWordCloudVisualOutput
	ToTemplateWordCloudVisualOutputWithContext(context.Context) TemplateWordCloudVisualOutput
}

type TemplateWordCloudVisualArgs struct {
	// The list of custom actions that are configured for a visual.
	Actions TemplateVisualCustomActionArrayInput `pulumi:"actions"`
	// The configuration settings of the visual.
	ChartConfiguration TemplateWordCloudChartConfigurationPtrInput `pulumi:"chartConfiguration"`
	// The column hierarchy that is used during drill-downs and drill-ups.
	ColumnHierarchies TemplateColumnHierarchyArrayInput `pulumi:"columnHierarchies"`
	// The subtitle that is displayed on the visual.
	Subtitle TemplateVisualSubtitleLabelOptionsPtrInput `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title TemplateVisualTitleLabelOptionsPtrInput `pulumi:"title"`
	// The alt text for the visual.
	VisualContentAltText pulumi.StringPtrInput `pulumi:"visualContentAltText"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
	VisualId pulumi.StringInput `pulumi:"visualId"`
}

func (TemplateWordCloudVisualArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWordCloudVisual)(nil)).Elem()
}

func (i TemplateWordCloudVisualArgs) ToTemplateWordCloudVisualOutput() TemplateWordCloudVisualOutput {
	return i.ToTemplateWordCloudVisualOutputWithContext(context.Background())
}

func (i TemplateWordCloudVisualArgs) ToTemplateWordCloudVisualOutputWithContext(ctx context.Context) TemplateWordCloudVisualOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWordCloudVisualOutput)
}

func (i TemplateWordCloudVisualArgs) ToTemplateWordCloudVisualPtrOutput() TemplateWordCloudVisualPtrOutput {
	return i.ToTemplateWordCloudVisualPtrOutputWithContext(context.Background())
}

func (i TemplateWordCloudVisualArgs) ToTemplateWordCloudVisualPtrOutputWithContext(ctx context.Context) TemplateWordCloudVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWordCloudVisualOutput).ToTemplateWordCloudVisualPtrOutputWithContext(ctx)
}

// TemplateWordCloudVisualPtrInput is an input type that accepts TemplateWordCloudVisualArgs, TemplateWordCloudVisualPtr and TemplateWordCloudVisualPtrOutput values.
// You can construct a concrete instance of `TemplateWordCloudVisualPtrInput` via:
//
//	        TemplateWordCloudVisualArgs{...}
//
//	or:
//
//	        nil
type TemplateWordCloudVisualPtrInput interface {
	pulumi.Input

	ToTemplateWordCloudVisualPtrOutput() TemplateWordCloudVisualPtrOutput
	ToTemplateWordCloudVisualPtrOutputWithContext(context.Context) TemplateWordCloudVisualPtrOutput
}

type templateWordCloudVisualPtrType TemplateWordCloudVisualArgs

func TemplateWordCloudVisualPtr(v *TemplateWordCloudVisualArgs) TemplateWordCloudVisualPtrInput {
	return (*templateWordCloudVisualPtrType)(v)
}

func (*templateWordCloudVisualPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWordCloudVisual)(nil)).Elem()
}

func (i *templateWordCloudVisualPtrType) ToTemplateWordCloudVisualPtrOutput() TemplateWordCloudVisualPtrOutput {
	return i.ToTemplateWordCloudVisualPtrOutputWithContext(context.Background())
}

func (i *templateWordCloudVisualPtrType) ToTemplateWordCloudVisualPtrOutputWithContext(ctx context.Context) TemplateWordCloudVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWordCloudVisualPtrOutput)
}

type TemplateWordCloudVisualOutput struct{ *pulumi.OutputState }

func (TemplateWordCloudVisualOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWordCloudVisual)(nil)).Elem()
}

func (o TemplateWordCloudVisualOutput) ToTemplateWordCloudVisualOutput() TemplateWordCloudVisualOutput {
	return o
}

func (o TemplateWordCloudVisualOutput) ToTemplateWordCloudVisualOutputWithContext(ctx context.Context) TemplateWordCloudVisualOutput {
	return o
}

func (o TemplateWordCloudVisualOutput) ToTemplateWordCloudVisualPtrOutput() TemplateWordCloudVisualPtrOutput {
	return o.ToTemplateWordCloudVisualPtrOutputWithContext(context.Background())
}

func (o TemplateWordCloudVisualOutput) ToTemplateWordCloudVisualPtrOutputWithContext(ctx context.Context) TemplateWordCloudVisualPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateWordCloudVisual) *TemplateWordCloudVisual {
		return &v
	}).(TemplateWordCloudVisualPtrOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplateWordCloudVisualOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v TemplateWordCloudVisual) []TemplateVisualCustomAction { return v.Actions }).(TemplateVisualCustomActionArrayOutput)
}

// The configuration settings of the visual.
func (o TemplateWordCloudVisualOutput) ChartConfiguration() TemplateWordCloudChartConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateWordCloudVisual) *TemplateWordCloudChartConfiguration { return v.ChartConfiguration }).(TemplateWordCloudChartConfigurationPtrOutput)
}

// The column hierarchy that is used during drill-downs and drill-ups.
func (o TemplateWordCloudVisualOutput) ColumnHierarchies() TemplateColumnHierarchyArrayOutput {
	return o.ApplyT(func(v TemplateWordCloudVisual) []TemplateColumnHierarchy { return v.ColumnHierarchies }).(TemplateColumnHierarchyArrayOutput)
}

// The subtitle that is displayed on the visual.
func (o TemplateWordCloudVisualOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateWordCloudVisual) *TemplateVisualSubtitleLabelOptions { return v.Subtitle }).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o TemplateWordCloudVisualOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateWordCloudVisual) *TemplateVisualTitleLabelOptions { return v.Title }).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o TemplateWordCloudVisualOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateWordCloudVisual) *string { return v.VisualContentAltText }).(pulumi.StringPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
func (o TemplateWordCloudVisualOutput) VisualId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateWordCloudVisual) string { return v.VisualId }).(pulumi.StringOutput)
}

type TemplateWordCloudVisualPtrOutput struct{ *pulumi.OutputState }

func (TemplateWordCloudVisualPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWordCloudVisual)(nil)).Elem()
}

func (o TemplateWordCloudVisualPtrOutput) ToTemplateWordCloudVisualPtrOutput() TemplateWordCloudVisualPtrOutput {
	return o
}

func (o TemplateWordCloudVisualPtrOutput) ToTemplateWordCloudVisualPtrOutputWithContext(ctx context.Context) TemplateWordCloudVisualPtrOutput {
	return o
}

func (o TemplateWordCloudVisualPtrOutput) Elem() TemplateWordCloudVisualOutput {
	return o.ApplyT(func(v *TemplateWordCloudVisual) TemplateWordCloudVisual {
		if v != nil {
			return *v
		}
		var ret TemplateWordCloudVisual
		return ret
	}).(TemplateWordCloudVisualOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplateWordCloudVisualPtrOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v *TemplateWordCloudVisual) []TemplateVisualCustomAction {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(TemplateVisualCustomActionArrayOutput)
}

// The configuration settings of the visual.
func (o TemplateWordCloudVisualPtrOutput) ChartConfiguration() TemplateWordCloudChartConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateWordCloudVisual) *TemplateWordCloudChartConfiguration {
		if v == nil {
			return nil
		}
		return v.ChartConfiguration
	}).(TemplateWordCloudChartConfigurationPtrOutput)
}

// The column hierarchy that is used during drill-downs and drill-ups.
func (o TemplateWordCloudVisualPtrOutput) ColumnHierarchies() TemplateColumnHierarchyArrayOutput {
	return o.ApplyT(func(v *TemplateWordCloudVisual) []TemplateColumnHierarchy {
		if v == nil {
			return nil
		}
		return v.ColumnHierarchies
	}).(TemplateColumnHierarchyArrayOutput)
}

// The subtitle that is displayed on the visual.
func (o TemplateWordCloudVisualPtrOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateWordCloudVisual) *TemplateVisualSubtitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Subtitle
	}).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o TemplateWordCloudVisualPtrOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateWordCloudVisual) *TemplateVisualTitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Title
	}).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The alt text for the visual.
func (o TemplateWordCloudVisualPtrOutput) VisualContentAltText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateWordCloudVisual) *string {
		if v == nil {
			return nil
		}
		return v.VisualContentAltText
	}).(pulumi.StringPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
func (o TemplateWordCloudVisualPtrOutput) VisualId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateWordCloudVisual) *string {
		if v == nil {
			return nil
		}
		return &v.VisualId
	}).(pulumi.StringPtrOutput)
}

type TemplateYAxisOptions struct {
	// The Y axis type to be used in the chart.
	//
	// If you choose `PRIMARY_Y_AXIS` , the primary Y Axis is located on the leftmost vertical axis of the chart.
	YAxis TemplateSingleYAxisOption `pulumi:"yAxis"`
}

// TemplateYAxisOptionsInput is an input type that accepts TemplateYAxisOptionsArgs and TemplateYAxisOptionsOutput values.
// You can construct a concrete instance of `TemplateYAxisOptionsInput` via:
//
//	TemplateYAxisOptionsArgs{...}
type TemplateYAxisOptionsInput interface {
	pulumi.Input

	ToTemplateYAxisOptionsOutput() TemplateYAxisOptionsOutput
	ToTemplateYAxisOptionsOutputWithContext(context.Context) TemplateYAxisOptionsOutput
}

type TemplateYAxisOptionsArgs struct {
	// The Y axis type to be used in the chart.
	//
	// If you choose `PRIMARY_Y_AXIS` , the primary Y Axis is located on the leftmost vertical axis of the chart.
	YAxis TemplateSingleYAxisOptionInput `pulumi:"yAxis"`
}

func (TemplateYAxisOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateYAxisOptions)(nil)).Elem()
}

func (i TemplateYAxisOptionsArgs) ToTemplateYAxisOptionsOutput() TemplateYAxisOptionsOutput {
	return i.ToTemplateYAxisOptionsOutputWithContext(context.Background())
}

func (i TemplateYAxisOptionsArgs) ToTemplateYAxisOptionsOutputWithContext(ctx context.Context) TemplateYAxisOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateYAxisOptionsOutput)
}

func (i TemplateYAxisOptionsArgs) ToTemplateYAxisOptionsPtrOutput() TemplateYAxisOptionsPtrOutput {
	return i.ToTemplateYAxisOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateYAxisOptionsArgs) ToTemplateYAxisOptionsPtrOutputWithContext(ctx context.Context) TemplateYAxisOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateYAxisOptionsOutput).ToTemplateYAxisOptionsPtrOutputWithContext(ctx)
}

// TemplateYAxisOptionsPtrInput is an input type that accepts TemplateYAxisOptionsArgs, TemplateYAxisOptionsPtr and TemplateYAxisOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateYAxisOptionsPtrInput` via:
//
//	        TemplateYAxisOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateYAxisOptionsPtrInput interface {
	pulumi.Input

	ToTemplateYAxisOptionsPtrOutput() TemplateYAxisOptionsPtrOutput
	ToTemplateYAxisOptionsPtrOutputWithContext(context.Context) TemplateYAxisOptionsPtrOutput
}

type templateYAxisOptionsPtrType TemplateYAxisOptionsArgs

func TemplateYAxisOptionsPtr(v *TemplateYAxisOptionsArgs) TemplateYAxisOptionsPtrInput {
	return (*templateYAxisOptionsPtrType)(v)
}

func (*templateYAxisOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateYAxisOptions)(nil)).Elem()
}

func (i *templateYAxisOptionsPtrType) ToTemplateYAxisOptionsPtrOutput() TemplateYAxisOptionsPtrOutput {
	return i.ToTemplateYAxisOptionsPtrOutputWithContext(context.Background())
}

func (i *templateYAxisOptionsPtrType) ToTemplateYAxisOptionsPtrOutputWithContext(ctx context.Context) TemplateYAxisOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateYAxisOptionsPtrOutput)
}

type TemplateYAxisOptionsOutput struct{ *pulumi.OutputState }

func (TemplateYAxisOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateYAxisOptions)(nil)).Elem()
}

func (o TemplateYAxisOptionsOutput) ToTemplateYAxisOptionsOutput() TemplateYAxisOptionsOutput {
	return o
}

func (o TemplateYAxisOptionsOutput) ToTemplateYAxisOptionsOutputWithContext(ctx context.Context) TemplateYAxisOptionsOutput {
	return o
}

func (o TemplateYAxisOptionsOutput) ToTemplateYAxisOptionsPtrOutput() TemplateYAxisOptionsPtrOutput {
	return o.ToTemplateYAxisOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateYAxisOptionsOutput) ToTemplateYAxisOptionsPtrOutputWithContext(ctx context.Context) TemplateYAxisOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateYAxisOptions) *TemplateYAxisOptions {
		return &v
	}).(TemplateYAxisOptionsPtrOutput)
}

// The Y axis type to be used in the chart.
//
// If you choose `PRIMARY_Y_AXIS` , the primary Y Axis is located on the leftmost vertical axis of the chart.
func (o TemplateYAxisOptionsOutput) YAxis() TemplateSingleYAxisOptionOutput {
	return o.ApplyT(func(v TemplateYAxisOptions) TemplateSingleYAxisOption { return v.YAxis }).(TemplateSingleYAxisOptionOutput)
}

type TemplateYAxisOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateYAxisOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateYAxisOptions)(nil)).Elem()
}

func (o TemplateYAxisOptionsPtrOutput) ToTemplateYAxisOptionsPtrOutput() TemplateYAxisOptionsPtrOutput {
	return o
}

func (o TemplateYAxisOptionsPtrOutput) ToTemplateYAxisOptionsPtrOutputWithContext(ctx context.Context) TemplateYAxisOptionsPtrOutput {
	return o
}

func (o TemplateYAxisOptionsPtrOutput) Elem() TemplateYAxisOptionsOutput {
	return o.ApplyT(func(v *TemplateYAxisOptions) TemplateYAxisOptions {
		if v != nil {
			return *v
		}
		var ret TemplateYAxisOptions
		return ret
	}).(TemplateYAxisOptionsOutput)
}

// The Y axis type to be used in the chart.
//
// If you choose `PRIMARY_Y_AXIS` , the primary Y Axis is located on the leftmost vertical axis of the chart.
func (o TemplateYAxisOptionsPtrOutput) YAxis() TemplateSingleYAxisOptionPtrOutput {
	return o.ApplyT(func(v *TemplateYAxisOptions) *TemplateSingleYAxisOption {
		if v == nil {
			return nil
		}
		return &v.YAxis
	}).(TemplateSingleYAxisOptionPtrOutput)
}

// <p>The display options for tile borders for visuals.</p>
type ThemeBorderStyle struct {
	// <p>The option to enable display of borders for visuals.</p>
	Show *bool `pulumi:"show"`
}

// ThemeBorderStyleInput is an input type that accepts ThemeBorderStyleArgs and ThemeBorderStyleOutput values.
// You can construct a concrete instance of `ThemeBorderStyleInput` via:
//
//	ThemeBorderStyleArgs{...}
type ThemeBorderStyleInput interface {
	pulumi.Input

	ToThemeBorderStyleOutput() ThemeBorderStyleOutput
	ToThemeBorderStyleOutputWithContext(context.Context) ThemeBorderStyleOutput
}

// <p>The display options for tile borders for visuals.</p>
type ThemeBorderStyleArgs struct {
	// <p>The option to enable display of borders for visuals.</p>
	Show pulumi.BoolPtrInput `pulumi:"show"`
}

func (ThemeBorderStyleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeBorderStyle)(nil)).Elem()
}

func (i ThemeBorderStyleArgs) ToThemeBorderStyleOutput() ThemeBorderStyleOutput {
	return i.ToThemeBorderStyleOutputWithContext(context.Background())
}

func (i ThemeBorderStyleArgs) ToThemeBorderStyleOutputWithContext(ctx context.Context) ThemeBorderStyleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeBorderStyleOutput)
}

func (i ThemeBorderStyleArgs) ToThemeBorderStylePtrOutput() ThemeBorderStylePtrOutput {
	return i.ToThemeBorderStylePtrOutputWithContext(context.Background())
}

func (i ThemeBorderStyleArgs) ToThemeBorderStylePtrOutputWithContext(ctx context.Context) ThemeBorderStylePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeBorderStyleOutput).ToThemeBorderStylePtrOutputWithContext(ctx)
}

// ThemeBorderStylePtrInput is an input type that accepts ThemeBorderStyleArgs, ThemeBorderStylePtr and ThemeBorderStylePtrOutput values.
// You can construct a concrete instance of `ThemeBorderStylePtrInput` via:
//
//	        ThemeBorderStyleArgs{...}
//
//	or:
//
//	        nil
type ThemeBorderStylePtrInput interface {
	pulumi.Input

	ToThemeBorderStylePtrOutput() ThemeBorderStylePtrOutput
	ToThemeBorderStylePtrOutputWithContext(context.Context) ThemeBorderStylePtrOutput
}

type themeBorderStylePtrType ThemeBorderStyleArgs

func ThemeBorderStylePtr(v *ThemeBorderStyleArgs) ThemeBorderStylePtrInput {
	return (*themeBorderStylePtrType)(v)
}

func (*themeBorderStylePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeBorderStyle)(nil)).Elem()
}

func (i *themeBorderStylePtrType) ToThemeBorderStylePtrOutput() ThemeBorderStylePtrOutput {
	return i.ToThemeBorderStylePtrOutputWithContext(context.Background())
}

func (i *themeBorderStylePtrType) ToThemeBorderStylePtrOutputWithContext(ctx context.Context) ThemeBorderStylePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeBorderStylePtrOutput)
}

// <p>The display options for tile borders for visuals.</p>
type ThemeBorderStyleOutput struct{ *pulumi.OutputState }

func (ThemeBorderStyleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeBorderStyle)(nil)).Elem()
}

func (o ThemeBorderStyleOutput) ToThemeBorderStyleOutput() ThemeBorderStyleOutput {
	return o
}

func (o ThemeBorderStyleOutput) ToThemeBorderStyleOutputWithContext(ctx context.Context) ThemeBorderStyleOutput {
	return o
}

func (o ThemeBorderStyleOutput) ToThemeBorderStylePtrOutput() ThemeBorderStylePtrOutput {
	return o.ToThemeBorderStylePtrOutputWithContext(context.Background())
}

func (o ThemeBorderStyleOutput) ToThemeBorderStylePtrOutputWithContext(ctx context.Context) ThemeBorderStylePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThemeBorderStyle) *ThemeBorderStyle {
		return &v
	}).(ThemeBorderStylePtrOutput)
}

// <p>The option to enable display of borders for visuals.</p>
func (o ThemeBorderStyleOutput) Show() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThemeBorderStyle) *bool { return v.Show }).(pulumi.BoolPtrOutput)
}

type ThemeBorderStylePtrOutput struct{ *pulumi.OutputState }

func (ThemeBorderStylePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeBorderStyle)(nil)).Elem()
}

func (o ThemeBorderStylePtrOutput) ToThemeBorderStylePtrOutput() ThemeBorderStylePtrOutput {
	return o
}

func (o ThemeBorderStylePtrOutput) ToThemeBorderStylePtrOutputWithContext(ctx context.Context) ThemeBorderStylePtrOutput {
	return o
}

func (o ThemeBorderStylePtrOutput) Elem() ThemeBorderStyleOutput {
	return o.ApplyT(func(v *ThemeBorderStyle) ThemeBorderStyle {
		if v != nil {
			return *v
		}
		var ret ThemeBorderStyle
		return ret
	}).(ThemeBorderStyleOutput)
}

// <p>The option to enable display of borders for visuals.</p>
func (o ThemeBorderStylePtrOutput) Show() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThemeBorderStyle) *bool {
		if v == nil {
			return nil
		}
		return v.Show
	}).(pulumi.BoolPtrOutput)
}

// <p>The theme configuration. This configuration contains all of the display properties for
//
//	a theme.</p>
type ThemeConfiguration struct {
	// Color properties that apply to chart data colors.
	DataColorPalette *ThemeDataColorPalette `pulumi:"dataColorPalette"`
	// Display options related to sheets.
	Sheet *ThemeSheetStyle `pulumi:"sheet"`
	// Determines the typography options.
	Typography *ThemeTypography `pulumi:"typography"`
	// Color properties that apply to the UI and to charts, excluding the colors that apply to data.
	UiColorPalette *ThemeUiColorPalette `pulumi:"uiColorPalette"`
}

// ThemeConfigurationInput is an input type that accepts ThemeConfigurationArgs and ThemeConfigurationOutput values.
// You can construct a concrete instance of `ThemeConfigurationInput` via:
//
//	ThemeConfigurationArgs{...}
type ThemeConfigurationInput interface {
	pulumi.Input

	ToThemeConfigurationOutput() ThemeConfigurationOutput
	ToThemeConfigurationOutputWithContext(context.Context) ThemeConfigurationOutput
}

// <p>The theme configuration. This configuration contains all of the display properties for
//
//	a theme.</p>
type ThemeConfigurationArgs struct {
	// Color properties that apply to chart data colors.
	DataColorPalette ThemeDataColorPalettePtrInput `pulumi:"dataColorPalette"`
	// Display options related to sheets.
	Sheet ThemeSheetStylePtrInput `pulumi:"sheet"`
	// Determines the typography options.
	Typography ThemeTypographyPtrInput `pulumi:"typography"`
	// Color properties that apply to the UI and to charts, excluding the colors that apply to data.
	UiColorPalette ThemeUiColorPalettePtrInput `pulumi:"uiColorPalette"`
}

func (ThemeConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeConfiguration)(nil)).Elem()
}

func (i ThemeConfigurationArgs) ToThemeConfigurationOutput() ThemeConfigurationOutput {
	return i.ToThemeConfigurationOutputWithContext(context.Background())
}

func (i ThemeConfigurationArgs) ToThemeConfigurationOutputWithContext(ctx context.Context) ThemeConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeConfigurationOutput)
}

// <p>The theme configuration. This configuration contains all of the display properties for
//
//	a theme.</p>
type ThemeConfigurationOutput struct{ *pulumi.OutputState }

func (ThemeConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeConfiguration)(nil)).Elem()
}

func (o ThemeConfigurationOutput) ToThemeConfigurationOutput() ThemeConfigurationOutput {
	return o
}

func (o ThemeConfigurationOutput) ToThemeConfigurationOutputWithContext(ctx context.Context) ThemeConfigurationOutput {
	return o
}

// Color properties that apply to chart data colors.
func (o ThemeConfigurationOutput) DataColorPalette() ThemeDataColorPalettePtrOutput {
	return o.ApplyT(func(v ThemeConfiguration) *ThemeDataColorPalette { return v.DataColorPalette }).(ThemeDataColorPalettePtrOutput)
}

// Display options related to sheets.
func (o ThemeConfigurationOutput) Sheet() ThemeSheetStylePtrOutput {
	return o.ApplyT(func(v ThemeConfiguration) *ThemeSheetStyle { return v.Sheet }).(ThemeSheetStylePtrOutput)
}

// Determines the typography options.
func (o ThemeConfigurationOutput) Typography() ThemeTypographyPtrOutput {
	return o.ApplyT(func(v ThemeConfiguration) *ThemeTypography { return v.Typography }).(ThemeTypographyPtrOutput)
}

// Color properties that apply to the UI and to charts, excluding the colors that apply to data.
func (o ThemeConfigurationOutput) UiColorPalette() ThemeUiColorPalettePtrOutput {
	return o.ApplyT(func(v ThemeConfiguration) *ThemeUiColorPalette { return v.UiColorPalette }).(ThemeUiColorPalettePtrOutput)
}

type ThemeConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ThemeConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeConfiguration)(nil)).Elem()
}

func (o ThemeConfigurationPtrOutput) ToThemeConfigurationPtrOutput() ThemeConfigurationPtrOutput {
	return o
}

func (o ThemeConfigurationPtrOutput) ToThemeConfigurationPtrOutputWithContext(ctx context.Context) ThemeConfigurationPtrOutput {
	return o
}

func (o ThemeConfigurationPtrOutput) Elem() ThemeConfigurationOutput {
	return o.ApplyT(func(v *ThemeConfiguration) ThemeConfiguration {
		if v != nil {
			return *v
		}
		var ret ThemeConfiguration
		return ret
	}).(ThemeConfigurationOutput)
}

// Color properties that apply to chart data colors.
func (o ThemeConfigurationPtrOutput) DataColorPalette() ThemeDataColorPalettePtrOutput {
	return o.ApplyT(func(v *ThemeConfiguration) *ThemeDataColorPalette {
		if v == nil {
			return nil
		}
		return v.DataColorPalette
	}).(ThemeDataColorPalettePtrOutput)
}

// Display options related to sheets.
func (o ThemeConfigurationPtrOutput) Sheet() ThemeSheetStylePtrOutput {
	return o.ApplyT(func(v *ThemeConfiguration) *ThemeSheetStyle {
		if v == nil {
			return nil
		}
		return v.Sheet
	}).(ThemeSheetStylePtrOutput)
}

// Determines the typography options.
func (o ThemeConfigurationPtrOutput) Typography() ThemeTypographyPtrOutput {
	return o.ApplyT(func(v *ThemeConfiguration) *ThemeTypography {
		if v == nil {
			return nil
		}
		return v.Typography
	}).(ThemeTypographyPtrOutput)
}

// Color properties that apply to the UI and to charts, excluding the colors that apply to data.
func (o ThemeConfigurationPtrOutput) UiColorPalette() ThemeUiColorPalettePtrOutput {
	return o.ApplyT(func(v *ThemeConfiguration) *ThemeUiColorPalette {
		if v == nil {
			return nil
		}
		return v.UiColorPalette
	}).(ThemeUiColorPalettePtrOutput)
}

// <p>The theme colors that are used for data colors in charts. The colors description is a
//
//	hexadecimal color code that consists of six alphanumerical characters, prefixed with
//	    <code>#</code>, for example #37BFF5. </p>
type ThemeDataColorPalette struct {
	// <p>The hexadecimal codes for the colors.</p>
	Colors []string `pulumi:"colors"`
	// <p>The hexadecimal code of a color that applies to charts where a lack of data is
	//             highlighted.</p>
	EmptyFillColor *string `pulumi:"emptyFillColor"`
	// <p>The minimum and maximum hexadecimal codes that describe a color gradient. </p>
	MinMaxGradient []string `pulumi:"minMaxGradient"`
}

// ThemeDataColorPaletteInput is an input type that accepts ThemeDataColorPaletteArgs and ThemeDataColorPaletteOutput values.
// You can construct a concrete instance of `ThemeDataColorPaletteInput` via:
//
//	ThemeDataColorPaletteArgs{...}
type ThemeDataColorPaletteInput interface {
	pulumi.Input

	ToThemeDataColorPaletteOutput() ThemeDataColorPaletteOutput
	ToThemeDataColorPaletteOutputWithContext(context.Context) ThemeDataColorPaletteOutput
}

// <p>The theme colors that are used for data colors in charts. The colors description is a
//
//	hexadecimal color code that consists of six alphanumerical characters, prefixed with
//	    <code>#</code>, for example #37BFF5. </p>
type ThemeDataColorPaletteArgs struct {
	// <p>The hexadecimal codes for the colors.</p>
	Colors pulumi.StringArrayInput `pulumi:"colors"`
	// <p>The hexadecimal code of a color that applies to charts where a lack of data is
	//             highlighted.</p>
	EmptyFillColor pulumi.StringPtrInput `pulumi:"emptyFillColor"`
	// <p>The minimum and maximum hexadecimal codes that describe a color gradient. </p>
	MinMaxGradient pulumi.StringArrayInput `pulumi:"minMaxGradient"`
}

func (ThemeDataColorPaletteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeDataColorPalette)(nil)).Elem()
}

func (i ThemeDataColorPaletteArgs) ToThemeDataColorPaletteOutput() ThemeDataColorPaletteOutput {
	return i.ToThemeDataColorPaletteOutputWithContext(context.Background())
}

func (i ThemeDataColorPaletteArgs) ToThemeDataColorPaletteOutputWithContext(ctx context.Context) ThemeDataColorPaletteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeDataColorPaletteOutput)
}

func (i ThemeDataColorPaletteArgs) ToThemeDataColorPalettePtrOutput() ThemeDataColorPalettePtrOutput {
	return i.ToThemeDataColorPalettePtrOutputWithContext(context.Background())
}

func (i ThemeDataColorPaletteArgs) ToThemeDataColorPalettePtrOutputWithContext(ctx context.Context) ThemeDataColorPalettePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeDataColorPaletteOutput).ToThemeDataColorPalettePtrOutputWithContext(ctx)
}

// ThemeDataColorPalettePtrInput is an input type that accepts ThemeDataColorPaletteArgs, ThemeDataColorPalettePtr and ThemeDataColorPalettePtrOutput values.
// You can construct a concrete instance of `ThemeDataColorPalettePtrInput` via:
//
//	        ThemeDataColorPaletteArgs{...}
//
//	or:
//
//	        nil
type ThemeDataColorPalettePtrInput interface {
	pulumi.Input

	ToThemeDataColorPalettePtrOutput() ThemeDataColorPalettePtrOutput
	ToThemeDataColorPalettePtrOutputWithContext(context.Context) ThemeDataColorPalettePtrOutput
}

type themeDataColorPalettePtrType ThemeDataColorPaletteArgs

func ThemeDataColorPalettePtr(v *ThemeDataColorPaletteArgs) ThemeDataColorPalettePtrInput {
	return (*themeDataColorPalettePtrType)(v)
}

func (*themeDataColorPalettePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeDataColorPalette)(nil)).Elem()
}

func (i *themeDataColorPalettePtrType) ToThemeDataColorPalettePtrOutput() ThemeDataColorPalettePtrOutput {
	return i.ToThemeDataColorPalettePtrOutputWithContext(context.Background())
}

func (i *themeDataColorPalettePtrType) ToThemeDataColorPalettePtrOutputWithContext(ctx context.Context) ThemeDataColorPalettePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeDataColorPalettePtrOutput)
}

// <p>The theme colors that are used for data colors in charts. The colors description is a
//
//	hexadecimal color code that consists of six alphanumerical characters, prefixed with
//	    <code>#</code>, for example #37BFF5. </p>
type ThemeDataColorPaletteOutput struct{ *pulumi.OutputState }

func (ThemeDataColorPaletteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeDataColorPalette)(nil)).Elem()
}

func (o ThemeDataColorPaletteOutput) ToThemeDataColorPaletteOutput() ThemeDataColorPaletteOutput {
	return o
}

func (o ThemeDataColorPaletteOutput) ToThemeDataColorPaletteOutputWithContext(ctx context.Context) ThemeDataColorPaletteOutput {
	return o
}

func (o ThemeDataColorPaletteOutput) ToThemeDataColorPalettePtrOutput() ThemeDataColorPalettePtrOutput {
	return o.ToThemeDataColorPalettePtrOutputWithContext(context.Background())
}

func (o ThemeDataColorPaletteOutput) ToThemeDataColorPalettePtrOutputWithContext(ctx context.Context) ThemeDataColorPalettePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThemeDataColorPalette) *ThemeDataColorPalette {
		return &v
	}).(ThemeDataColorPalettePtrOutput)
}

// <p>The hexadecimal codes for the colors.</p>
func (o ThemeDataColorPaletteOutput) Colors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThemeDataColorPalette) []string { return v.Colors }).(pulumi.StringArrayOutput)
}

// <p>The hexadecimal code of a color that applies to charts where a lack of data is
//
//	highlighted.</p>
func (o ThemeDataColorPaletteOutput) EmptyFillColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeDataColorPalette) *string { return v.EmptyFillColor }).(pulumi.StringPtrOutput)
}

// <p>The minimum and maximum hexadecimal codes that describe a color gradient. </p>
func (o ThemeDataColorPaletteOutput) MinMaxGradient() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThemeDataColorPalette) []string { return v.MinMaxGradient }).(pulumi.StringArrayOutput)
}

type ThemeDataColorPalettePtrOutput struct{ *pulumi.OutputState }

func (ThemeDataColorPalettePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeDataColorPalette)(nil)).Elem()
}

func (o ThemeDataColorPalettePtrOutput) ToThemeDataColorPalettePtrOutput() ThemeDataColorPalettePtrOutput {
	return o
}

func (o ThemeDataColorPalettePtrOutput) ToThemeDataColorPalettePtrOutputWithContext(ctx context.Context) ThemeDataColorPalettePtrOutput {
	return o
}

func (o ThemeDataColorPalettePtrOutput) Elem() ThemeDataColorPaletteOutput {
	return o.ApplyT(func(v *ThemeDataColorPalette) ThemeDataColorPalette {
		if v != nil {
			return *v
		}
		var ret ThemeDataColorPalette
		return ret
	}).(ThemeDataColorPaletteOutput)
}

// <p>The hexadecimal codes for the colors.</p>
func (o ThemeDataColorPalettePtrOutput) Colors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ThemeDataColorPalette) []string {
		if v == nil {
			return nil
		}
		return v.Colors
	}).(pulumi.StringArrayOutput)
}

// <p>The hexadecimal code of a color that applies to charts where a lack of data is
//
//	highlighted.</p>
func (o ThemeDataColorPalettePtrOutput) EmptyFillColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeDataColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.EmptyFillColor
	}).(pulumi.StringPtrOutput)
}

// <p>The minimum and maximum hexadecimal codes that describe a color gradient. </p>
func (o ThemeDataColorPalettePtrOutput) MinMaxGradient() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ThemeDataColorPalette) []string {
		if v == nil {
			return nil
		}
		return v.MinMaxGradient
	}).(pulumi.StringArrayOutput)
}

// <p>Theme error.</p>
type ThemeError struct {
	// <p>The error message.</p>
	Message *string `pulumi:"message"`
	// The type of error.
	Type *ThemeErrorType `pulumi:"type"`
}

// <p>Theme error.</p>
type ThemeErrorOutput struct{ *pulumi.OutputState }

func (ThemeErrorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeError)(nil)).Elem()
}

func (o ThemeErrorOutput) ToThemeErrorOutput() ThemeErrorOutput {
	return o
}

func (o ThemeErrorOutput) ToThemeErrorOutputWithContext(ctx context.Context) ThemeErrorOutput {
	return o
}

// <p>The error message.</p>
func (o ThemeErrorOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeError) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The type of error.
func (o ThemeErrorOutput) Type() ThemeErrorTypePtrOutput {
	return o.ApplyT(func(v ThemeError) *ThemeErrorType { return v.Type }).(ThemeErrorTypePtrOutput)
}

type ThemeErrorArrayOutput struct{ *pulumi.OutputState }

func (ThemeErrorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThemeError)(nil)).Elem()
}

func (o ThemeErrorArrayOutput) ToThemeErrorArrayOutput() ThemeErrorArrayOutput {
	return o
}

func (o ThemeErrorArrayOutput) ToThemeErrorArrayOutputWithContext(ctx context.Context) ThemeErrorArrayOutput {
	return o
}

func (o ThemeErrorArrayOutput) Index(i pulumi.IntInput) ThemeErrorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThemeError {
		return vs[0].([]ThemeError)[vs[1].(int)]
	}).(ThemeErrorOutput)
}

type ThemeFont struct {
	// Determines the font family settings.
	FontFamily *string `pulumi:"fontFamily"`
}

// ThemeFontInput is an input type that accepts ThemeFontArgs and ThemeFontOutput values.
// You can construct a concrete instance of `ThemeFontInput` via:
//
//	ThemeFontArgs{...}
type ThemeFontInput interface {
	pulumi.Input

	ToThemeFontOutput() ThemeFontOutput
	ToThemeFontOutputWithContext(context.Context) ThemeFontOutput
}

type ThemeFontArgs struct {
	// Determines the font family settings.
	FontFamily pulumi.StringPtrInput `pulumi:"fontFamily"`
}

func (ThemeFontArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeFont)(nil)).Elem()
}

func (i ThemeFontArgs) ToThemeFontOutput() ThemeFontOutput {
	return i.ToThemeFontOutputWithContext(context.Background())
}

func (i ThemeFontArgs) ToThemeFontOutputWithContext(ctx context.Context) ThemeFontOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeFontOutput)
}

// ThemeFontArrayInput is an input type that accepts ThemeFontArray and ThemeFontArrayOutput values.
// You can construct a concrete instance of `ThemeFontArrayInput` via:
//
//	ThemeFontArray{ ThemeFontArgs{...} }
type ThemeFontArrayInput interface {
	pulumi.Input

	ToThemeFontArrayOutput() ThemeFontArrayOutput
	ToThemeFontArrayOutputWithContext(context.Context) ThemeFontArrayOutput
}

type ThemeFontArray []ThemeFontInput

func (ThemeFontArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThemeFont)(nil)).Elem()
}

func (i ThemeFontArray) ToThemeFontArrayOutput() ThemeFontArrayOutput {
	return i.ToThemeFontArrayOutputWithContext(context.Background())
}

func (i ThemeFontArray) ToThemeFontArrayOutputWithContext(ctx context.Context) ThemeFontArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeFontArrayOutput)
}

type ThemeFontOutput struct{ *pulumi.OutputState }

func (ThemeFontOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeFont)(nil)).Elem()
}

func (o ThemeFontOutput) ToThemeFontOutput() ThemeFontOutput {
	return o
}

func (o ThemeFontOutput) ToThemeFontOutputWithContext(ctx context.Context) ThemeFontOutput {
	return o
}

// Determines the font family settings.
func (o ThemeFontOutput) FontFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeFont) *string { return v.FontFamily }).(pulumi.StringPtrOutput)
}

type ThemeFontArrayOutput struct{ *pulumi.OutputState }

func (ThemeFontArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThemeFont)(nil)).Elem()
}

func (o ThemeFontArrayOutput) ToThemeFontArrayOutput() ThemeFontArrayOutput {
	return o
}

func (o ThemeFontArrayOutput) ToThemeFontArrayOutputWithContext(ctx context.Context) ThemeFontArrayOutput {
	return o
}

func (o ThemeFontArrayOutput) Index(i pulumi.IntInput) ThemeFontOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThemeFont {
		return vs[0].([]ThemeFont)[vs[1].(int)]
	}).(ThemeFontOutput)
}

// <p>The display options for gutter spacing between tiles on a sheet.</p>
type ThemeGutterStyle struct {
	// <p>This Boolean value controls whether to display a gutter space between sheet tiles.
	//         </p>
	Show *bool `pulumi:"show"`
}

// ThemeGutterStyleInput is an input type that accepts ThemeGutterStyleArgs and ThemeGutterStyleOutput values.
// You can construct a concrete instance of `ThemeGutterStyleInput` via:
//
//	ThemeGutterStyleArgs{...}
type ThemeGutterStyleInput interface {
	pulumi.Input

	ToThemeGutterStyleOutput() ThemeGutterStyleOutput
	ToThemeGutterStyleOutputWithContext(context.Context) ThemeGutterStyleOutput
}

// <p>The display options for gutter spacing between tiles on a sheet.</p>
type ThemeGutterStyleArgs struct {
	// <p>This Boolean value controls whether to display a gutter space between sheet tiles.
	//         </p>
	Show pulumi.BoolPtrInput `pulumi:"show"`
}

func (ThemeGutterStyleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeGutterStyle)(nil)).Elem()
}

func (i ThemeGutterStyleArgs) ToThemeGutterStyleOutput() ThemeGutterStyleOutput {
	return i.ToThemeGutterStyleOutputWithContext(context.Background())
}

func (i ThemeGutterStyleArgs) ToThemeGutterStyleOutputWithContext(ctx context.Context) ThemeGutterStyleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeGutterStyleOutput)
}

func (i ThemeGutterStyleArgs) ToThemeGutterStylePtrOutput() ThemeGutterStylePtrOutput {
	return i.ToThemeGutterStylePtrOutputWithContext(context.Background())
}

func (i ThemeGutterStyleArgs) ToThemeGutterStylePtrOutputWithContext(ctx context.Context) ThemeGutterStylePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeGutterStyleOutput).ToThemeGutterStylePtrOutputWithContext(ctx)
}

// ThemeGutterStylePtrInput is an input type that accepts ThemeGutterStyleArgs, ThemeGutterStylePtr and ThemeGutterStylePtrOutput values.
// You can construct a concrete instance of `ThemeGutterStylePtrInput` via:
//
//	        ThemeGutterStyleArgs{...}
//
//	or:
//
//	        nil
type ThemeGutterStylePtrInput interface {
	pulumi.Input

	ToThemeGutterStylePtrOutput() ThemeGutterStylePtrOutput
	ToThemeGutterStylePtrOutputWithContext(context.Context) ThemeGutterStylePtrOutput
}

type themeGutterStylePtrType ThemeGutterStyleArgs

func ThemeGutterStylePtr(v *ThemeGutterStyleArgs) ThemeGutterStylePtrInput {
	return (*themeGutterStylePtrType)(v)
}

func (*themeGutterStylePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeGutterStyle)(nil)).Elem()
}

func (i *themeGutterStylePtrType) ToThemeGutterStylePtrOutput() ThemeGutterStylePtrOutput {
	return i.ToThemeGutterStylePtrOutputWithContext(context.Background())
}

func (i *themeGutterStylePtrType) ToThemeGutterStylePtrOutputWithContext(ctx context.Context) ThemeGutterStylePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeGutterStylePtrOutput)
}

// <p>The display options for gutter spacing between tiles on a sheet.</p>
type ThemeGutterStyleOutput struct{ *pulumi.OutputState }

func (ThemeGutterStyleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeGutterStyle)(nil)).Elem()
}

func (o ThemeGutterStyleOutput) ToThemeGutterStyleOutput() ThemeGutterStyleOutput {
	return o
}

func (o ThemeGutterStyleOutput) ToThemeGutterStyleOutputWithContext(ctx context.Context) ThemeGutterStyleOutput {
	return o
}

func (o ThemeGutterStyleOutput) ToThemeGutterStylePtrOutput() ThemeGutterStylePtrOutput {
	return o.ToThemeGutterStylePtrOutputWithContext(context.Background())
}

func (o ThemeGutterStyleOutput) ToThemeGutterStylePtrOutputWithContext(ctx context.Context) ThemeGutterStylePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThemeGutterStyle) *ThemeGutterStyle {
		return &v
	}).(ThemeGutterStylePtrOutput)
}

// <p>This Boolean value controls whether to display a gutter space between sheet tiles.
//
//	</p>
func (o ThemeGutterStyleOutput) Show() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThemeGutterStyle) *bool { return v.Show }).(pulumi.BoolPtrOutput)
}

type ThemeGutterStylePtrOutput struct{ *pulumi.OutputState }

func (ThemeGutterStylePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeGutterStyle)(nil)).Elem()
}

func (o ThemeGutterStylePtrOutput) ToThemeGutterStylePtrOutput() ThemeGutterStylePtrOutput {
	return o
}

func (o ThemeGutterStylePtrOutput) ToThemeGutterStylePtrOutputWithContext(ctx context.Context) ThemeGutterStylePtrOutput {
	return o
}

func (o ThemeGutterStylePtrOutput) Elem() ThemeGutterStyleOutput {
	return o.ApplyT(func(v *ThemeGutterStyle) ThemeGutterStyle {
		if v != nil {
			return *v
		}
		var ret ThemeGutterStyle
		return ret
	}).(ThemeGutterStyleOutput)
}

// <p>This Boolean value controls whether to display a gutter space between sheet tiles.
//
//	</p>
func (o ThemeGutterStylePtrOutput) Show() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThemeGutterStyle) *bool {
		if v == nil {
			return nil
		}
		return v.Show
	}).(pulumi.BoolPtrOutput)
}

// <p>The display options for margins around the outside edge of sheets.</p>
type ThemeMarginStyle struct {
	// <p>This Boolean value controls whether to display sheet margins.</p>
	Show *bool `pulumi:"show"`
}

// ThemeMarginStyleInput is an input type that accepts ThemeMarginStyleArgs and ThemeMarginStyleOutput values.
// You can construct a concrete instance of `ThemeMarginStyleInput` via:
//
//	ThemeMarginStyleArgs{...}
type ThemeMarginStyleInput interface {
	pulumi.Input

	ToThemeMarginStyleOutput() ThemeMarginStyleOutput
	ToThemeMarginStyleOutputWithContext(context.Context) ThemeMarginStyleOutput
}

// <p>The display options for margins around the outside edge of sheets.</p>
type ThemeMarginStyleArgs struct {
	// <p>This Boolean value controls whether to display sheet margins.</p>
	Show pulumi.BoolPtrInput `pulumi:"show"`
}

func (ThemeMarginStyleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeMarginStyle)(nil)).Elem()
}

func (i ThemeMarginStyleArgs) ToThemeMarginStyleOutput() ThemeMarginStyleOutput {
	return i.ToThemeMarginStyleOutputWithContext(context.Background())
}

func (i ThemeMarginStyleArgs) ToThemeMarginStyleOutputWithContext(ctx context.Context) ThemeMarginStyleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeMarginStyleOutput)
}

func (i ThemeMarginStyleArgs) ToThemeMarginStylePtrOutput() ThemeMarginStylePtrOutput {
	return i.ToThemeMarginStylePtrOutputWithContext(context.Background())
}

func (i ThemeMarginStyleArgs) ToThemeMarginStylePtrOutputWithContext(ctx context.Context) ThemeMarginStylePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeMarginStyleOutput).ToThemeMarginStylePtrOutputWithContext(ctx)
}

// ThemeMarginStylePtrInput is an input type that accepts ThemeMarginStyleArgs, ThemeMarginStylePtr and ThemeMarginStylePtrOutput values.
// You can construct a concrete instance of `ThemeMarginStylePtrInput` via:
//
//	        ThemeMarginStyleArgs{...}
//
//	or:
//
//	        nil
type ThemeMarginStylePtrInput interface {
	pulumi.Input

	ToThemeMarginStylePtrOutput() ThemeMarginStylePtrOutput
	ToThemeMarginStylePtrOutputWithContext(context.Context) ThemeMarginStylePtrOutput
}

type themeMarginStylePtrType ThemeMarginStyleArgs

func ThemeMarginStylePtr(v *ThemeMarginStyleArgs) ThemeMarginStylePtrInput {
	return (*themeMarginStylePtrType)(v)
}

func (*themeMarginStylePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeMarginStyle)(nil)).Elem()
}

func (i *themeMarginStylePtrType) ToThemeMarginStylePtrOutput() ThemeMarginStylePtrOutput {
	return i.ToThemeMarginStylePtrOutputWithContext(context.Background())
}

func (i *themeMarginStylePtrType) ToThemeMarginStylePtrOutputWithContext(ctx context.Context) ThemeMarginStylePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeMarginStylePtrOutput)
}

// <p>The display options for margins around the outside edge of sheets.</p>
type ThemeMarginStyleOutput struct{ *pulumi.OutputState }

func (ThemeMarginStyleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeMarginStyle)(nil)).Elem()
}

func (o ThemeMarginStyleOutput) ToThemeMarginStyleOutput() ThemeMarginStyleOutput {
	return o
}

func (o ThemeMarginStyleOutput) ToThemeMarginStyleOutputWithContext(ctx context.Context) ThemeMarginStyleOutput {
	return o
}

func (o ThemeMarginStyleOutput) ToThemeMarginStylePtrOutput() ThemeMarginStylePtrOutput {
	return o.ToThemeMarginStylePtrOutputWithContext(context.Background())
}

func (o ThemeMarginStyleOutput) ToThemeMarginStylePtrOutputWithContext(ctx context.Context) ThemeMarginStylePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThemeMarginStyle) *ThemeMarginStyle {
		return &v
	}).(ThemeMarginStylePtrOutput)
}

// <p>This Boolean value controls whether to display sheet margins.</p>
func (o ThemeMarginStyleOutput) Show() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThemeMarginStyle) *bool { return v.Show }).(pulumi.BoolPtrOutput)
}

type ThemeMarginStylePtrOutput struct{ *pulumi.OutputState }

func (ThemeMarginStylePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeMarginStyle)(nil)).Elem()
}

func (o ThemeMarginStylePtrOutput) ToThemeMarginStylePtrOutput() ThemeMarginStylePtrOutput {
	return o
}

func (o ThemeMarginStylePtrOutput) ToThemeMarginStylePtrOutputWithContext(ctx context.Context) ThemeMarginStylePtrOutput {
	return o
}

func (o ThemeMarginStylePtrOutput) Elem() ThemeMarginStyleOutput {
	return o.ApplyT(func(v *ThemeMarginStyle) ThemeMarginStyle {
		if v != nil {
			return *v
		}
		var ret ThemeMarginStyle
		return ret
	}).(ThemeMarginStyleOutput)
}

// <p>This Boolean value controls whether to display sheet margins.</p>
func (o ThemeMarginStylePtrOutput) Show() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThemeMarginStyle) *bool {
		if v == nil {
			return nil
		}
		return v.Show
	}).(pulumi.BoolPtrOutput)
}

// <p>Permission for the resource.</p>
type ThemeResourcePermission struct {
	// <p>The IAM action to grant or revoke permissions on.</p>
	Actions []string `pulumi:"actions"`
	// <p>The Amazon Resource Name (ARN) of the principal. This can be one of the
	//             following:</p>
	//          <ul>
	//             <li>
	//                <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p>
	//             </li>
	//             <li>
	//                <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p>
	//             </li>
	//             <li>
	//                <p>The ARN of an Amazon Web Services account root: This is an IAM ARN rather than a QuickSight
	//                     ARN. Use this option only to share resources (templates) across Amazon Web Services accounts.
	//                     (This is less common.) </p>
	//             </li>
	//          </ul>
	Principal string `pulumi:"principal"`
}

// ThemeResourcePermissionInput is an input type that accepts ThemeResourcePermissionArgs and ThemeResourcePermissionOutput values.
// You can construct a concrete instance of `ThemeResourcePermissionInput` via:
//
//	ThemeResourcePermissionArgs{...}
type ThemeResourcePermissionInput interface {
	pulumi.Input

	ToThemeResourcePermissionOutput() ThemeResourcePermissionOutput
	ToThemeResourcePermissionOutputWithContext(context.Context) ThemeResourcePermissionOutput
}

// <p>Permission for the resource.</p>
type ThemeResourcePermissionArgs struct {
	// <p>The IAM action to grant or revoke permissions on.</p>
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// <p>The Amazon Resource Name (ARN) of the principal. This can be one of the
	//             following:</p>
	//          <ul>
	//             <li>
	//                <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p>
	//             </li>
	//             <li>
	//                <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p>
	//             </li>
	//             <li>
	//                <p>The ARN of an Amazon Web Services account root: This is an IAM ARN rather than a QuickSight
	//                     ARN. Use this option only to share resources (templates) across Amazon Web Services accounts.
	//                     (This is less common.) </p>
	//             </li>
	//          </ul>
	Principal pulumi.StringInput `pulumi:"principal"`
}

func (ThemeResourcePermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeResourcePermission)(nil)).Elem()
}

func (i ThemeResourcePermissionArgs) ToThemeResourcePermissionOutput() ThemeResourcePermissionOutput {
	return i.ToThemeResourcePermissionOutputWithContext(context.Background())
}

func (i ThemeResourcePermissionArgs) ToThemeResourcePermissionOutputWithContext(ctx context.Context) ThemeResourcePermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeResourcePermissionOutput)
}

// ThemeResourcePermissionArrayInput is an input type that accepts ThemeResourcePermissionArray and ThemeResourcePermissionArrayOutput values.
// You can construct a concrete instance of `ThemeResourcePermissionArrayInput` via:
//
//	ThemeResourcePermissionArray{ ThemeResourcePermissionArgs{...} }
type ThemeResourcePermissionArrayInput interface {
	pulumi.Input

	ToThemeResourcePermissionArrayOutput() ThemeResourcePermissionArrayOutput
	ToThemeResourcePermissionArrayOutputWithContext(context.Context) ThemeResourcePermissionArrayOutput
}

type ThemeResourcePermissionArray []ThemeResourcePermissionInput

func (ThemeResourcePermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThemeResourcePermission)(nil)).Elem()
}

func (i ThemeResourcePermissionArray) ToThemeResourcePermissionArrayOutput() ThemeResourcePermissionArrayOutput {
	return i.ToThemeResourcePermissionArrayOutputWithContext(context.Background())
}

func (i ThemeResourcePermissionArray) ToThemeResourcePermissionArrayOutputWithContext(ctx context.Context) ThemeResourcePermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeResourcePermissionArrayOutput)
}

// <p>Permission for the resource.</p>
type ThemeResourcePermissionOutput struct{ *pulumi.OutputState }

func (ThemeResourcePermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeResourcePermission)(nil)).Elem()
}

func (o ThemeResourcePermissionOutput) ToThemeResourcePermissionOutput() ThemeResourcePermissionOutput {
	return o
}

func (o ThemeResourcePermissionOutput) ToThemeResourcePermissionOutputWithContext(ctx context.Context) ThemeResourcePermissionOutput {
	return o
}

// <p>The IAM action to grant or revoke permissions on.</p>
func (o ThemeResourcePermissionOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThemeResourcePermission) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// <p>The Amazon Resource Name (ARN) of the principal. This can be one of the
//
//	   following:</p>
//	<ul>
//	   <li>
//	      <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p>
//	   </li>
//	   <li>
//	      <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p>
//	   </li>
//	   <li>
//	      <p>The ARN of an Amazon Web Services account root: This is an IAM ARN rather than a QuickSight
//	           ARN. Use this option only to share resources (templates) across Amazon Web Services accounts.
//	           (This is less common.) </p>
//	   </li>
//	</ul>
func (o ThemeResourcePermissionOutput) Principal() pulumi.StringOutput {
	return o.ApplyT(func(v ThemeResourcePermission) string { return v.Principal }).(pulumi.StringOutput)
}

type ThemeResourcePermissionArrayOutput struct{ *pulumi.OutputState }

func (ThemeResourcePermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThemeResourcePermission)(nil)).Elem()
}

func (o ThemeResourcePermissionArrayOutput) ToThemeResourcePermissionArrayOutput() ThemeResourcePermissionArrayOutput {
	return o
}

func (o ThemeResourcePermissionArrayOutput) ToThemeResourcePermissionArrayOutputWithContext(ctx context.Context) ThemeResourcePermissionArrayOutput {
	return o
}

func (o ThemeResourcePermissionArrayOutput) Index(i pulumi.IntInput) ThemeResourcePermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThemeResourcePermission {
		return vs[0].([]ThemeResourcePermission)[vs[1].(int)]
	}).(ThemeResourcePermissionOutput)
}

// <p>The theme display options for sheets. </p>
type ThemeSheetStyle struct {
	// The display options for tiles.
	Tile *ThemeTileStyle `pulumi:"tile"`
	// The layout options for tiles.
	TileLayout *ThemeTileLayoutStyle `pulumi:"tileLayout"`
}

// ThemeSheetStyleInput is an input type that accepts ThemeSheetStyleArgs and ThemeSheetStyleOutput values.
// You can construct a concrete instance of `ThemeSheetStyleInput` via:
//
//	ThemeSheetStyleArgs{...}
type ThemeSheetStyleInput interface {
	pulumi.Input

	ToThemeSheetStyleOutput() ThemeSheetStyleOutput
	ToThemeSheetStyleOutputWithContext(context.Context) ThemeSheetStyleOutput
}

// <p>The theme display options for sheets. </p>
type ThemeSheetStyleArgs struct {
	// The display options for tiles.
	Tile ThemeTileStylePtrInput `pulumi:"tile"`
	// The layout options for tiles.
	TileLayout ThemeTileLayoutStylePtrInput `pulumi:"tileLayout"`
}

func (ThemeSheetStyleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeSheetStyle)(nil)).Elem()
}

func (i ThemeSheetStyleArgs) ToThemeSheetStyleOutput() ThemeSheetStyleOutput {
	return i.ToThemeSheetStyleOutputWithContext(context.Background())
}

func (i ThemeSheetStyleArgs) ToThemeSheetStyleOutputWithContext(ctx context.Context) ThemeSheetStyleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeSheetStyleOutput)
}

func (i ThemeSheetStyleArgs) ToThemeSheetStylePtrOutput() ThemeSheetStylePtrOutput {
	return i.ToThemeSheetStylePtrOutputWithContext(context.Background())
}

func (i ThemeSheetStyleArgs) ToThemeSheetStylePtrOutputWithContext(ctx context.Context) ThemeSheetStylePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeSheetStyleOutput).ToThemeSheetStylePtrOutputWithContext(ctx)
}

// ThemeSheetStylePtrInput is an input type that accepts ThemeSheetStyleArgs, ThemeSheetStylePtr and ThemeSheetStylePtrOutput values.
// You can construct a concrete instance of `ThemeSheetStylePtrInput` via:
//
//	        ThemeSheetStyleArgs{...}
//
//	or:
//
//	        nil
type ThemeSheetStylePtrInput interface {
	pulumi.Input

	ToThemeSheetStylePtrOutput() ThemeSheetStylePtrOutput
	ToThemeSheetStylePtrOutputWithContext(context.Context) ThemeSheetStylePtrOutput
}

type themeSheetStylePtrType ThemeSheetStyleArgs

func ThemeSheetStylePtr(v *ThemeSheetStyleArgs) ThemeSheetStylePtrInput {
	return (*themeSheetStylePtrType)(v)
}

func (*themeSheetStylePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeSheetStyle)(nil)).Elem()
}

func (i *themeSheetStylePtrType) ToThemeSheetStylePtrOutput() ThemeSheetStylePtrOutput {
	return i.ToThemeSheetStylePtrOutputWithContext(context.Background())
}

func (i *themeSheetStylePtrType) ToThemeSheetStylePtrOutputWithContext(ctx context.Context) ThemeSheetStylePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeSheetStylePtrOutput)
}

// <p>The theme display options for sheets. </p>
type ThemeSheetStyleOutput struct{ *pulumi.OutputState }

func (ThemeSheetStyleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeSheetStyle)(nil)).Elem()
}

func (o ThemeSheetStyleOutput) ToThemeSheetStyleOutput() ThemeSheetStyleOutput {
	return o
}

func (o ThemeSheetStyleOutput) ToThemeSheetStyleOutputWithContext(ctx context.Context) ThemeSheetStyleOutput {
	return o
}

func (o ThemeSheetStyleOutput) ToThemeSheetStylePtrOutput() ThemeSheetStylePtrOutput {
	return o.ToThemeSheetStylePtrOutputWithContext(context.Background())
}

func (o ThemeSheetStyleOutput) ToThemeSheetStylePtrOutputWithContext(ctx context.Context) ThemeSheetStylePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThemeSheetStyle) *ThemeSheetStyle {
		return &v
	}).(ThemeSheetStylePtrOutput)
}

// The display options for tiles.
func (o ThemeSheetStyleOutput) Tile() ThemeTileStylePtrOutput {
	return o.ApplyT(func(v ThemeSheetStyle) *ThemeTileStyle { return v.Tile }).(ThemeTileStylePtrOutput)
}

// The layout options for tiles.
func (o ThemeSheetStyleOutput) TileLayout() ThemeTileLayoutStylePtrOutput {
	return o.ApplyT(func(v ThemeSheetStyle) *ThemeTileLayoutStyle { return v.TileLayout }).(ThemeTileLayoutStylePtrOutput)
}

type ThemeSheetStylePtrOutput struct{ *pulumi.OutputState }

func (ThemeSheetStylePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeSheetStyle)(nil)).Elem()
}

func (o ThemeSheetStylePtrOutput) ToThemeSheetStylePtrOutput() ThemeSheetStylePtrOutput {
	return o
}

func (o ThemeSheetStylePtrOutput) ToThemeSheetStylePtrOutputWithContext(ctx context.Context) ThemeSheetStylePtrOutput {
	return o
}

func (o ThemeSheetStylePtrOutput) Elem() ThemeSheetStyleOutput {
	return o.ApplyT(func(v *ThemeSheetStyle) ThemeSheetStyle {
		if v != nil {
			return *v
		}
		var ret ThemeSheetStyle
		return ret
	}).(ThemeSheetStyleOutput)
}

// The display options for tiles.
func (o ThemeSheetStylePtrOutput) Tile() ThemeTileStylePtrOutput {
	return o.ApplyT(func(v *ThemeSheetStyle) *ThemeTileStyle {
		if v == nil {
			return nil
		}
		return v.Tile
	}).(ThemeTileStylePtrOutput)
}

// The layout options for tiles.
func (o ThemeSheetStylePtrOutput) TileLayout() ThemeTileLayoutStylePtrOutput {
	return o.ApplyT(func(v *ThemeSheetStyle) *ThemeTileLayoutStyle {
		if v == nil {
			return nil
		}
		return v.TileLayout
	}).(ThemeTileLayoutStylePtrOutput)
}

// <p>The key or keys of the key-value pairs for the resource tag or tags assigned to the
//
//	resource.</p>
type ThemeTag struct {
	// <p>Tag key.</p>
	Key string `pulumi:"key"`
	// <p>Tag value.</p>
	Value string `pulumi:"value"`
}

// <p>The display options for the layout of tiles on a sheet.</p>
type ThemeTileLayoutStyle struct {
	// The gutter settings that apply between tiles.
	Gutter *ThemeGutterStyle `pulumi:"gutter"`
	// The margin settings that apply around the outside edge of sheets.
	Margin *ThemeMarginStyle `pulumi:"margin"`
}

// ThemeTileLayoutStyleInput is an input type that accepts ThemeTileLayoutStyleArgs and ThemeTileLayoutStyleOutput values.
// You can construct a concrete instance of `ThemeTileLayoutStyleInput` via:
//
//	ThemeTileLayoutStyleArgs{...}
type ThemeTileLayoutStyleInput interface {
	pulumi.Input

	ToThemeTileLayoutStyleOutput() ThemeTileLayoutStyleOutput
	ToThemeTileLayoutStyleOutputWithContext(context.Context) ThemeTileLayoutStyleOutput
}

// <p>The display options for the layout of tiles on a sheet.</p>
type ThemeTileLayoutStyleArgs struct {
	// The gutter settings that apply between tiles.
	Gutter ThemeGutterStylePtrInput `pulumi:"gutter"`
	// The margin settings that apply around the outside edge of sheets.
	Margin ThemeMarginStylePtrInput `pulumi:"margin"`
}

func (ThemeTileLayoutStyleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeTileLayoutStyle)(nil)).Elem()
}

func (i ThemeTileLayoutStyleArgs) ToThemeTileLayoutStyleOutput() ThemeTileLayoutStyleOutput {
	return i.ToThemeTileLayoutStyleOutputWithContext(context.Background())
}

func (i ThemeTileLayoutStyleArgs) ToThemeTileLayoutStyleOutputWithContext(ctx context.Context) ThemeTileLayoutStyleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeTileLayoutStyleOutput)
}

func (i ThemeTileLayoutStyleArgs) ToThemeTileLayoutStylePtrOutput() ThemeTileLayoutStylePtrOutput {
	return i.ToThemeTileLayoutStylePtrOutputWithContext(context.Background())
}

func (i ThemeTileLayoutStyleArgs) ToThemeTileLayoutStylePtrOutputWithContext(ctx context.Context) ThemeTileLayoutStylePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeTileLayoutStyleOutput).ToThemeTileLayoutStylePtrOutputWithContext(ctx)
}

// ThemeTileLayoutStylePtrInput is an input type that accepts ThemeTileLayoutStyleArgs, ThemeTileLayoutStylePtr and ThemeTileLayoutStylePtrOutput values.
// You can construct a concrete instance of `ThemeTileLayoutStylePtrInput` via:
//
//	        ThemeTileLayoutStyleArgs{...}
//
//	or:
//
//	        nil
type ThemeTileLayoutStylePtrInput interface {
	pulumi.Input

	ToThemeTileLayoutStylePtrOutput() ThemeTileLayoutStylePtrOutput
	ToThemeTileLayoutStylePtrOutputWithContext(context.Context) ThemeTileLayoutStylePtrOutput
}

type themeTileLayoutStylePtrType ThemeTileLayoutStyleArgs

func ThemeTileLayoutStylePtr(v *ThemeTileLayoutStyleArgs) ThemeTileLayoutStylePtrInput {
	return (*themeTileLayoutStylePtrType)(v)
}

func (*themeTileLayoutStylePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeTileLayoutStyle)(nil)).Elem()
}

func (i *themeTileLayoutStylePtrType) ToThemeTileLayoutStylePtrOutput() ThemeTileLayoutStylePtrOutput {
	return i.ToThemeTileLayoutStylePtrOutputWithContext(context.Background())
}

func (i *themeTileLayoutStylePtrType) ToThemeTileLayoutStylePtrOutputWithContext(ctx context.Context) ThemeTileLayoutStylePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeTileLayoutStylePtrOutput)
}

// <p>The display options for the layout of tiles on a sheet.</p>
type ThemeTileLayoutStyleOutput struct{ *pulumi.OutputState }

func (ThemeTileLayoutStyleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeTileLayoutStyle)(nil)).Elem()
}

func (o ThemeTileLayoutStyleOutput) ToThemeTileLayoutStyleOutput() ThemeTileLayoutStyleOutput {
	return o
}

func (o ThemeTileLayoutStyleOutput) ToThemeTileLayoutStyleOutputWithContext(ctx context.Context) ThemeTileLayoutStyleOutput {
	return o
}

func (o ThemeTileLayoutStyleOutput) ToThemeTileLayoutStylePtrOutput() ThemeTileLayoutStylePtrOutput {
	return o.ToThemeTileLayoutStylePtrOutputWithContext(context.Background())
}

func (o ThemeTileLayoutStyleOutput) ToThemeTileLayoutStylePtrOutputWithContext(ctx context.Context) ThemeTileLayoutStylePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThemeTileLayoutStyle) *ThemeTileLayoutStyle {
		return &v
	}).(ThemeTileLayoutStylePtrOutput)
}

// The gutter settings that apply between tiles.
func (o ThemeTileLayoutStyleOutput) Gutter() ThemeGutterStylePtrOutput {
	return o.ApplyT(func(v ThemeTileLayoutStyle) *ThemeGutterStyle { return v.Gutter }).(ThemeGutterStylePtrOutput)
}

// The margin settings that apply around the outside edge of sheets.
func (o ThemeTileLayoutStyleOutput) Margin() ThemeMarginStylePtrOutput {
	return o.ApplyT(func(v ThemeTileLayoutStyle) *ThemeMarginStyle { return v.Margin }).(ThemeMarginStylePtrOutput)
}

type ThemeTileLayoutStylePtrOutput struct{ *pulumi.OutputState }

func (ThemeTileLayoutStylePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeTileLayoutStyle)(nil)).Elem()
}

func (o ThemeTileLayoutStylePtrOutput) ToThemeTileLayoutStylePtrOutput() ThemeTileLayoutStylePtrOutput {
	return o
}

func (o ThemeTileLayoutStylePtrOutput) ToThemeTileLayoutStylePtrOutputWithContext(ctx context.Context) ThemeTileLayoutStylePtrOutput {
	return o
}

func (o ThemeTileLayoutStylePtrOutput) Elem() ThemeTileLayoutStyleOutput {
	return o.ApplyT(func(v *ThemeTileLayoutStyle) ThemeTileLayoutStyle {
		if v != nil {
			return *v
		}
		var ret ThemeTileLayoutStyle
		return ret
	}).(ThemeTileLayoutStyleOutput)
}

// The gutter settings that apply between tiles.
func (o ThemeTileLayoutStylePtrOutput) Gutter() ThemeGutterStylePtrOutput {
	return o.ApplyT(func(v *ThemeTileLayoutStyle) *ThemeGutterStyle {
		if v == nil {
			return nil
		}
		return v.Gutter
	}).(ThemeGutterStylePtrOutput)
}

// The margin settings that apply around the outside edge of sheets.
func (o ThemeTileLayoutStylePtrOutput) Margin() ThemeMarginStylePtrOutput {
	return o.ApplyT(func(v *ThemeTileLayoutStyle) *ThemeMarginStyle {
		if v == nil {
			return nil
		}
		return v.Margin
	}).(ThemeMarginStylePtrOutput)
}

// <p>Display options related to tiles on a sheet.</p>
type ThemeTileStyle struct {
	// The border around a tile.
	Border *ThemeBorderStyle `pulumi:"border"`
}

// ThemeTileStyleInput is an input type that accepts ThemeTileStyleArgs and ThemeTileStyleOutput values.
// You can construct a concrete instance of `ThemeTileStyleInput` via:
//
//	ThemeTileStyleArgs{...}
type ThemeTileStyleInput interface {
	pulumi.Input

	ToThemeTileStyleOutput() ThemeTileStyleOutput
	ToThemeTileStyleOutputWithContext(context.Context) ThemeTileStyleOutput
}

// <p>Display options related to tiles on a sheet.</p>
type ThemeTileStyleArgs struct {
	// The border around a tile.
	Border ThemeBorderStylePtrInput `pulumi:"border"`
}

func (ThemeTileStyleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeTileStyle)(nil)).Elem()
}

func (i ThemeTileStyleArgs) ToThemeTileStyleOutput() ThemeTileStyleOutput {
	return i.ToThemeTileStyleOutputWithContext(context.Background())
}

func (i ThemeTileStyleArgs) ToThemeTileStyleOutputWithContext(ctx context.Context) ThemeTileStyleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeTileStyleOutput)
}

func (i ThemeTileStyleArgs) ToThemeTileStylePtrOutput() ThemeTileStylePtrOutput {
	return i.ToThemeTileStylePtrOutputWithContext(context.Background())
}

func (i ThemeTileStyleArgs) ToThemeTileStylePtrOutputWithContext(ctx context.Context) ThemeTileStylePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeTileStyleOutput).ToThemeTileStylePtrOutputWithContext(ctx)
}

// ThemeTileStylePtrInput is an input type that accepts ThemeTileStyleArgs, ThemeTileStylePtr and ThemeTileStylePtrOutput values.
// You can construct a concrete instance of `ThemeTileStylePtrInput` via:
//
//	        ThemeTileStyleArgs{...}
//
//	or:
//
//	        nil
type ThemeTileStylePtrInput interface {
	pulumi.Input

	ToThemeTileStylePtrOutput() ThemeTileStylePtrOutput
	ToThemeTileStylePtrOutputWithContext(context.Context) ThemeTileStylePtrOutput
}

type themeTileStylePtrType ThemeTileStyleArgs

func ThemeTileStylePtr(v *ThemeTileStyleArgs) ThemeTileStylePtrInput {
	return (*themeTileStylePtrType)(v)
}

func (*themeTileStylePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeTileStyle)(nil)).Elem()
}

func (i *themeTileStylePtrType) ToThemeTileStylePtrOutput() ThemeTileStylePtrOutput {
	return i.ToThemeTileStylePtrOutputWithContext(context.Background())
}

func (i *themeTileStylePtrType) ToThemeTileStylePtrOutputWithContext(ctx context.Context) ThemeTileStylePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeTileStylePtrOutput)
}

// <p>Display options related to tiles on a sheet.</p>
type ThemeTileStyleOutput struct{ *pulumi.OutputState }

func (ThemeTileStyleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeTileStyle)(nil)).Elem()
}

func (o ThemeTileStyleOutput) ToThemeTileStyleOutput() ThemeTileStyleOutput {
	return o
}

func (o ThemeTileStyleOutput) ToThemeTileStyleOutputWithContext(ctx context.Context) ThemeTileStyleOutput {
	return o
}

func (o ThemeTileStyleOutput) ToThemeTileStylePtrOutput() ThemeTileStylePtrOutput {
	return o.ToThemeTileStylePtrOutputWithContext(context.Background())
}

func (o ThemeTileStyleOutput) ToThemeTileStylePtrOutputWithContext(ctx context.Context) ThemeTileStylePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThemeTileStyle) *ThemeTileStyle {
		return &v
	}).(ThemeTileStylePtrOutput)
}

// The border around a tile.
func (o ThemeTileStyleOutput) Border() ThemeBorderStylePtrOutput {
	return o.ApplyT(func(v ThemeTileStyle) *ThemeBorderStyle { return v.Border }).(ThemeBorderStylePtrOutput)
}

type ThemeTileStylePtrOutput struct{ *pulumi.OutputState }

func (ThemeTileStylePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeTileStyle)(nil)).Elem()
}

func (o ThemeTileStylePtrOutput) ToThemeTileStylePtrOutput() ThemeTileStylePtrOutput {
	return o
}

func (o ThemeTileStylePtrOutput) ToThemeTileStylePtrOutputWithContext(ctx context.Context) ThemeTileStylePtrOutput {
	return o
}

func (o ThemeTileStylePtrOutput) Elem() ThemeTileStyleOutput {
	return o.ApplyT(func(v *ThemeTileStyle) ThemeTileStyle {
		if v != nil {
			return *v
		}
		var ret ThemeTileStyle
		return ret
	}).(ThemeTileStyleOutput)
}

// The border around a tile.
func (o ThemeTileStylePtrOutput) Border() ThemeBorderStylePtrOutput {
	return o.ApplyT(func(v *ThemeTileStyle) *ThemeBorderStyle {
		if v == nil {
			return nil
		}
		return v.Border
	}).(ThemeBorderStylePtrOutput)
}

type ThemeTypography struct {
	// Determines the list of font families.
	FontFamilies []ThemeFont `pulumi:"fontFamilies"`
}

// ThemeTypographyInput is an input type that accepts ThemeTypographyArgs and ThemeTypographyOutput values.
// You can construct a concrete instance of `ThemeTypographyInput` via:
//
//	ThemeTypographyArgs{...}
type ThemeTypographyInput interface {
	pulumi.Input

	ToThemeTypographyOutput() ThemeTypographyOutput
	ToThemeTypographyOutputWithContext(context.Context) ThemeTypographyOutput
}

type ThemeTypographyArgs struct {
	// Determines the list of font families.
	FontFamilies ThemeFontArrayInput `pulumi:"fontFamilies"`
}

func (ThemeTypographyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeTypography)(nil)).Elem()
}

func (i ThemeTypographyArgs) ToThemeTypographyOutput() ThemeTypographyOutput {
	return i.ToThemeTypographyOutputWithContext(context.Background())
}

func (i ThemeTypographyArgs) ToThemeTypographyOutputWithContext(ctx context.Context) ThemeTypographyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeTypographyOutput)
}

func (i ThemeTypographyArgs) ToThemeTypographyPtrOutput() ThemeTypographyPtrOutput {
	return i.ToThemeTypographyPtrOutputWithContext(context.Background())
}

func (i ThemeTypographyArgs) ToThemeTypographyPtrOutputWithContext(ctx context.Context) ThemeTypographyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeTypographyOutput).ToThemeTypographyPtrOutputWithContext(ctx)
}

// ThemeTypographyPtrInput is an input type that accepts ThemeTypographyArgs, ThemeTypographyPtr and ThemeTypographyPtrOutput values.
// You can construct a concrete instance of `ThemeTypographyPtrInput` via:
//
//	        ThemeTypographyArgs{...}
//
//	or:
//
//	        nil
type ThemeTypographyPtrInput interface {
	pulumi.Input

	ToThemeTypographyPtrOutput() ThemeTypographyPtrOutput
	ToThemeTypographyPtrOutputWithContext(context.Context) ThemeTypographyPtrOutput
}

type themeTypographyPtrType ThemeTypographyArgs

func ThemeTypographyPtr(v *ThemeTypographyArgs) ThemeTypographyPtrInput {
	return (*themeTypographyPtrType)(v)
}

func (*themeTypographyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeTypography)(nil)).Elem()
}

func (i *themeTypographyPtrType) ToThemeTypographyPtrOutput() ThemeTypographyPtrOutput {
	return i.ToThemeTypographyPtrOutputWithContext(context.Background())
}

func (i *themeTypographyPtrType) ToThemeTypographyPtrOutputWithContext(ctx context.Context) ThemeTypographyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeTypographyPtrOutput)
}

type ThemeTypographyOutput struct{ *pulumi.OutputState }

func (ThemeTypographyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeTypography)(nil)).Elem()
}

func (o ThemeTypographyOutput) ToThemeTypographyOutput() ThemeTypographyOutput {
	return o
}

func (o ThemeTypographyOutput) ToThemeTypographyOutputWithContext(ctx context.Context) ThemeTypographyOutput {
	return o
}

func (o ThemeTypographyOutput) ToThemeTypographyPtrOutput() ThemeTypographyPtrOutput {
	return o.ToThemeTypographyPtrOutputWithContext(context.Background())
}

func (o ThemeTypographyOutput) ToThemeTypographyPtrOutputWithContext(ctx context.Context) ThemeTypographyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThemeTypography) *ThemeTypography {
		return &v
	}).(ThemeTypographyPtrOutput)
}

// Determines the list of font families.
func (o ThemeTypographyOutput) FontFamilies() ThemeFontArrayOutput {
	return o.ApplyT(func(v ThemeTypography) []ThemeFont { return v.FontFamilies }).(ThemeFontArrayOutput)
}

type ThemeTypographyPtrOutput struct{ *pulumi.OutputState }

func (ThemeTypographyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeTypography)(nil)).Elem()
}

func (o ThemeTypographyPtrOutput) ToThemeTypographyPtrOutput() ThemeTypographyPtrOutput {
	return o
}

func (o ThemeTypographyPtrOutput) ToThemeTypographyPtrOutputWithContext(ctx context.Context) ThemeTypographyPtrOutput {
	return o
}

func (o ThemeTypographyPtrOutput) Elem() ThemeTypographyOutput {
	return o.ApplyT(func(v *ThemeTypography) ThemeTypography {
		if v != nil {
			return *v
		}
		var ret ThemeTypography
		return ret
	}).(ThemeTypographyOutput)
}

// Determines the list of font families.
func (o ThemeTypographyPtrOutput) FontFamilies() ThemeFontArrayOutput {
	return o.ApplyT(func(v *ThemeTypography) []ThemeFont {
		if v == nil {
			return nil
		}
		return v.FontFamilies
	}).(ThemeFontArrayOutput)
}

// <p>The theme colors that apply to UI and to charts, excluding data colors. The colors
//
//	   description is a hexadecimal color code that consists of six alphanumerical characters,
//	   prefixed with <code>#</code>, for example #37BFF5. For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/themes-in-quicksight.html">Using Themes in Amazon QuickSight</a> in the <i>Amazon QuickSight User
//	       Guide.</i>
//	</p>
type ThemeUiColorPalette struct {
	// <p>This color is that applies to selected states and buttons.</p>
	Accent *string `pulumi:"accent"`
	// <p>The foreground color that applies to any text or other elements that appear over the
	//             accent color.</p>
	AccentForeground *string `pulumi:"accentForeground"`
	// <p>The color that applies to error messages.</p>
	Danger *string `pulumi:"danger"`
	// <p>The foreground color that applies to any text or other elements that appear over the
	//             error color.</p>
	DangerForeground *string `pulumi:"dangerForeground"`
	// <p>The color that applies to the names of fields that are identified as
	//             dimensions.</p>
	Dimension *string `pulumi:"dimension"`
	// <p>The foreground color that applies to any text or other elements that appear over the
	//             dimension color.</p>
	DimensionForeground *string `pulumi:"dimensionForeground"`
	// <p>The color that applies to the names of fields that are identified as measures.</p>
	Measure *string `pulumi:"measure"`
	// <p>The foreground color that applies to any text or other elements that appear over the
	//             measure color.</p>
	MeasureForeground *string `pulumi:"measureForeground"`
	// <p>The background color that applies to visuals and other high emphasis UI.</p>
	PrimaryBackground *string `pulumi:"primaryBackground"`
	// <p>The color of text and other foreground elements that appear over the primary
	//             background regions, such as grid lines, borders, table banding, icons, and so on.</p>
	PrimaryForeground *string `pulumi:"primaryForeground"`
	// <p>The background color that applies to the sheet background and sheet controls.</p>
	SecondaryBackground *string `pulumi:"secondaryBackground"`
	// <p>The foreground color that applies to any sheet title, sheet control text, or UI that
	//             appears over the secondary background.</p>
	SecondaryForeground *string `pulumi:"secondaryForeground"`
	// <p>The color that applies to success messages, for example the check mark for a
	//             successful download.</p>
	Success *string `pulumi:"success"`
	// <p>The foreground color that applies to any text or other elements that appear over the
	//             success color.</p>
	SuccessForeground *string `pulumi:"successForeground"`
	// <p>This color that applies to warning and informational messages.</p>
	Warning *string `pulumi:"warning"`
	// <p>The foreground color that applies to any text or other elements that appear over the
	//             warning color.</p>
	WarningForeground *string `pulumi:"warningForeground"`
}

// ThemeUiColorPaletteInput is an input type that accepts ThemeUiColorPaletteArgs and ThemeUiColorPaletteOutput values.
// You can construct a concrete instance of `ThemeUiColorPaletteInput` via:
//
//	ThemeUiColorPaletteArgs{...}
type ThemeUiColorPaletteInput interface {
	pulumi.Input

	ToThemeUiColorPaletteOutput() ThemeUiColorPaletteOutput
	ToThemeUiColorPaletteOutputWithContext(context.Context) ThemeUiColorPaletteOutput
}

// <p>The theme colors that apply to UI and to charts, excluding data colors. The colors
//
//	   description is a hexadecimal color code that consists of six alphanumerical characters,
//	   prefixed with <code>#</code>, for example #37BFF5. For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/themes-in-quicksight.html">Using Themes in Amazon QuickSight</a> in the <i>Amazon QuickSight User
//	       Guide.</i>
//	</p>
type ThemeUiColorPaletteArgs struct {
	// <p>This color is that applies to selected states and buttons.</p>
	Accent pulumi.StringPtrInput `pulumi:"accent"`
	// <p>The foreground color that applies to any text or other elements that appear over the
	//             accent color.</p>
	AccentForeground pulumi.StringPtrInput `pulumi:"accentForeground"`
	// <p>The color that applies to error messages.</p>
	Danger pulumi.StringPtrInput `pulumi:"danger"`
	// <p>The foreground color that applies to any text or other elements that appear over the
	//             error color.</p>
	DangerForeground pulumi.StringPtrInput `pulumi:"dangerForeground"`
	// <p>The color that applies to the names of fields that are identified as
	//             dimensions.</p>
	Dimension pulumi.StringPtrInput `pulumi:"dimension"`
	// <p>The foreground color that applies to any text or other elements that appear over the
	//             dimension color.</p>
	DimensionForeground pulumi.StringPtrInput `pulumi:"dimensionForeground"`
	// <p>The color that applies to the names of fields that are identified as measures.</p>
	Measure pulumi.StringPtrInput `pulumi:"measure"`
	// <p>The foreground color that applies to any text or other elements that appear over the
	//             measure color.</p>
	MeasureForeground pulumi.StringPtrInput `pulumi:"measureForeground"`
	// <p>The background color that applies to visuals and other high emphasis UI.</p>
	PrimaryBackground pulumi.StringPtrInput `pulumi:"primaryBackground"`
	// <p>The color of text and other foreground elements that appear over the primary
	//             background regions, such as grid lines, borders, table banding, icons, and so on.</p>
	PrimaryForeground pulumi.StringPtrInput `pulumi:"primaryForeground"`
	// <p>The background color that applies to the sheet background and sheet controls.</p>
	SecondaryBackground pulumi.StringPtrInput `pulumi:"secondaryBackground"`
	// <p>The foreground color that applies to any sheet title, sheet control text, or UI that
	//             appears over the secondary background.</p>
	SecondaryForeground pulumi.StringPtrInput `pulumi:"secondaryForeground"`
	// <p>The color that applies to success messages, for example the check mark for a
	//             successful download.</p>
	Success pulumi.StringPtrInput `pulumi:"success"`
	// <p>The foreground color that applies to any text or other elements that appear over the
	//             success color.</p>
	SuccessForeground pulumi.StringPtrInput `pulumi:"successForeground"`
	// <p>This color that applies to warning and informational messages.</p>
	Warning pulumi.StringPtrInput `pulumi:"warning"`
	// <p>The foreground color that applies to any text or other elements that appear over the
	//             warning color.</p>
	WarningForeground pulumi.StringPtrInput `pulumi:"warningForeground"`
}

func (ThemeUiColorPaletteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeUiColorPalette)(nil)).Elem()
}

func (i ThemeUiColorPaletteArgs) ToThemeUiColorPaletteOutput() ThemeUiColorPaletteOutput {
	return i.ToThemeUiColorPaletteOutputWithContext(context.Background())
}

func (i ThemeUiColorPaletteArgs) ToThemeUiColorPaletteOutputWithContext(ctx context.Context) ThemeUiColorPaletteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeUiColorPaletteOutput)
}

func (i ThemeUiColorPaletteArgs) ToThemeUiColorPalettePtrOutput() ThemeUiColorPalettePtrOutput {
	return i.ToThemeUiColorPalettePtrOutputWithContext(context.Background())
}

func (i ThemeUiColorPaletteArgs) ToThemeUiColorPalettePtrOutputWithContext(ctx context.Context) ThemeUiColorPalettePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeUiColorPaletteOutput).ToThemeUiColorPalettePtrOutputWithContext(ctx)
}

// ThemeUiColorPalettePtrInput is an input type that accepts ThemeUiColorPaletteArgs, ThemeUiColorPalettePtr and ThemeUiColorPalettePtrOutput values.
// You can construct a concrete instance of `ThemeUiColorPalettePtrInput` via:
//
//	        ThemeUiColorPaletteArgs{...}
//
//	or:
//
//	        nil
type ThemeUiColorPalettePtrInput interface {
	pulumi.Input

	ToThemeUiColorPalettePtrOutput() ThemeUiColorPalettePtrOutput
	ToThemeUiColorPalettePtrOutputWithContext(context.Context) ThemeUiColorPalettePtrOutput
}

type themeUiColorPalettePtrType ThemeUiColorPaletteArgs

func ThemeUiColorPalettePtr(v *ThemeUiColorPaletteArgs) ThemeUiColorPalettePtrInput {
	return (*themeUiColorPalettePtrType)(v)
}

func (*themeUiColorPalettePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeUiColorPalette)(nil)).Elem()
}

func (i *themeUiColorPalettePtrType) ToThemeUiColorPalettePtrOutput() ThemeUiColorPalettePtrOutput {
	return i.ToThemeUiColorPalettePtrOutputWithContext(context.Background())
}

func (i *themeUiColorPalettePtrType) ToThemeUiColorPalettePtrOutputWithContext(ctx context.Context) ThemeUiColorPalettePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeUiColorPalettePtrOutput)
}

// <p>The theme colors that apply to UI and to charts, excluding data colors. The colors
//
//	   description is a hexadecimal color code that consists of six alphanumerical characters,
//	   prefixed with <code>#</code>, for example #37BFF5. For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/themes-in-quicksight.html">Using Themes in Amazon QuickSight</a> in the <i>Amazon QuickSight User
//	       Guide.</i>
//	</p>
type ThemeUiColorPaletteOutput struct{ *pulumi.OutputState }

func (ThemeUiColorPaletteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeUiColorPalette)(nil)).Elem()
}

func (o ThemeUiColorPaletteOutput) ToThemeUiColorPaletteOutput() ThemeUiColorPaletteOutput {
	return o
}

func (o ThemeUiColorPaletteOutput) ToThemeUiColorPaletteOutputWithContext(ctx context.Context) ThemeUiColorPaletteOutput {
	return o
}

func (o ThemeUiColorPaletteOutput) ToThemeUiColorPalettePtrOutput() ThemeUiColorPalettePtrOutput {
	return o.ToThemeUiColorPalettePtrOutputWithContext(context.Background())
}

func (o ThemeUiColorPaletteOutput) ToThemeUiColorPalettePtrOutputWithContext(ctx context.Context) ThemeUiColorPalettePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThemeUiColorPalette) *ThemeUiColorPalette {
		return &v
	}).(ThemeUiColorPalettePtrOutput)
}

// <p>This color is that applies to selected states and buttons.</p>
func (o ThemeUiColorPaletteOutput) Accent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeUiColorPalette) *string { return v.Accent }).(pulumi.StringPtrOutput)
}

// <p>The foreground color that applies to any text or other elements that appear over the
//
//	accent color.</p>
func (o ThemeUiColorPaletteOutput) AccentForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeUiColorPalette) *string { return v.AccentForeground }).(pulumi.StringPtrOutput)
}

// <p>The color that applies to error messages.</p>
func (o ThemeUiColorPaletteOutput) Danger() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeUiColorPalette) *string { return v.Danger }).(pulumi.StringPtrOutput)
}

// <p>The foreground color that applies to any text or other elements that appear over the
//
//	error color.</p>
func (o ThemeUiColorPaletteOutput) DangerForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeUiColorPalette) *string { return v.DangerForeground }).(pulumi.StringPtrOutput)
}

// <p>The color that applies to the names of fields that are identified as
//
//	dimensions.</p>
func (o ThemeUiColorPaletteOutput) Dimension() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeUiColorPalette) *string { return v.Dimension }).(pulumi.StringPtrOutput)
}

// <p>The foreground color that applies to any text or other elements that appear over the
//
//	dimension color.</p>
func (o ThemeUiColorPaletteOutput) DimensionForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeUiColorPalette) *string { return v.DimensionForeground }).(pulumi.StringPtrOutput)
}

// <p>The color that applies to the names of fields that are identified as measures.</p>
func (o ThemeUiColorPaletteOutput) Measure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeUiColorPalette) *string { return v.Measure }).(pulumi.StringPtrOutput)
}

// <p>The foreground color that applies to any text or other elements that appear over the
//
//	measure color.</p>
func (o ThemeUiColorPaletteOutput) MeasureForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeUiColorPalette) *string { return v.MeasureForeground }).(pulumi.StringPtrOutput)
}

// <p>The background color that applies to visuals and other high emphasis UI.</p>
func (o ThemeUiColorPaletteOutput) PrimaryBackground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeUiColorPalette) *string { return v.PrimaryBackground }).(pulumi.StringPtrOutput)
}

// <p>The color of text and other foreground elements that appear over the primary
//
//	background regions, such as grid lines, borders, table banding, icons, and so on.</p>
func (o ThemeUiColorPaletteOutput) PrimaryForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeUiColorPalette) *string { return v.PrimaryForeground }).(pulumi.StringPtrOutput)
}

// <p>The background color that applies to the sheet background and sheet controls.</p>
func (o ThemeUiColorPaletteOutput) SecondaryBackground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeUiColorPalette) *string { return v.SecondaryBackground }).(pulumi.StringPtrOutput)
}

// <p>The foreground color that applies to any sheet title, sheet control text, or UI that
//
//	appears over the secondary background.</p>
func (o ThemeUiColorPaletteOutput) SecondaryForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeUiColorPalette) *string { return v.SecondaryForeground }).(pulumi.StringPtrOutput)
}

// <p>The color that applies to success messages, for example the check mark for a
//
//	successful download.</p>
func (o ThemeUiColorPaletteOutput) Success() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeUiColorPalette) *string { return v.Success }).(pulumi.StringPtrOutput)
}

// <p>The foreground color that applies to any text or other elements that appear over the
//
//	success color.</p>
func (o ThemeUiColorPaletteOutput) SuccessForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeUiColorPalette) *string { return v.SuccessForeground }).(pulumi.StringPtrOutput)
}

// <p>This color that applies to warning and informational messages.</p>
func (o ThemeUiColorPaletteOutput) Warning() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeUiColorPalette) *string { return v.Warning }).(pulumi.StringPtrOutput)
}

// <p>The foreground color that applies to any text or other elements that appear over the
//
//	warning color.</p>
func (o ThemeUiColorPaletteOutput) WarningForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeUiColorPalette) *string { return v.WarningForeground }).(pulumi.StringPtrOutput)
}

type ThemeUiColorPalettePtrOutput struct{ *pulumi.OutputState }

func (ThemeUiColorPalettePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeUiColorPalette)(nil)).Elem()
}

func (o ThemeUiColorPalettePtrOutput) ToThemeUiColorPalettePtrOutput() ThemeUiColorPalettePtrOutput {
	return o
}

func (o ThemeUiColorPalettePtrOutput) ToThemeUiColorPalettePtrOutputWithContext(ctx context.Context) ThemeUiColorPalettePtrOutput {
	return o
}

func (o ThemeUiColorPalettePtrOutput) Elem() ThemeUiColorPaletteOutput {
	return o.ApplyT(func(v *ThemeUiColorPalette) ThemeUiColorPalette {
		if v != nil {
			return *v
		}
		var ret ThemeUiColorPalette
		return ret
	}).(ThemeUiColorPaletteOutput)
}

// <p>This color is that applies to selected states and buttons.</p>
func (o ThemeUiColorPalettePtrOutput) Accent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeUiColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.Accent
	}).(pulumi.StringPtrOutput)
}

// <p>The foreground color that applies to any text or other elements that appear over the
//
//	accent color.</p>
func (o ThemeUiColorPalettePtrOutput) AccentForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeUiColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.AccentForeground
	}).(pulumi.StringPtrOutput)
}

// <p>The color that applies to error messages.</p>
func (o ThemeUiColorPalettePtrOutput) Danger() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeUiColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.Danger
	}).(pulumi.StringPtrOutput)
}

// <p>The foreground color that applies to any text or other elements that appear over the
//
//	error color.</p>
func (o ThemeUiColorPalettePtrOutput) DangerForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeUiColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.DangerForeground
	}).(pulumi.StringPtrOutput)
}

// <p>The color that applies to the names of fields that are identified as
//
//	dimensions.</p>
func (o ThemeUiColorPalettePtrOutput) Dimension() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeUiColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.Dimension
	}).(pulumi.StringPtrOutput)
}

// <p>The foreground color that applies to any text or other elements that appear over the
//
//	dimension color.</p>
func (o ThemeUiColorPalettePtrOutput) DimensionForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeUiColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.DimensionForeground
	}).(pulumi.StringPtrOutput)
}

// <p>The color that applies to the names of fields that are identified as measures.</p>
func (o ThemeUiColorPalettePtrOutput) Measure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeUiColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.Measure
	}).(pulumi.StringPtrOutput)
}

// <p>The foreground color that applies to any text or other elements that appear over the
//
//	measure color.</p>
func (o ThemeUiColorPalettePtrOutput) MeasureForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeUiColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.MeasureForeground
	}).(pulumi.StringPtrOutput)
}

// <p>The background color that applies to visuals and other high emphasis UI.</p>
func (o ThemeUiColorPalettePtrOutput) PrimaryBackground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeUiColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.PrimaryBackground
	}).(pulumi.StringPtrOutput)
}

// <p>The color of text and other foreground elements that appear over the primary
//
//	background regions, such as grid lines, borders, table banding, icons, and so on.</p>
func (o ThemeUiColorPalettePtrOutput) PrimaryForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeUiColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.PrimaryForeground
	}).(pulumi.StringPtrOutput)
}

// <p>The background color that applies to the sheet background and sheet controls.</p>
func (o ThemeUiColorPalettePtrOutput) SecondaryBackground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeUiColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.SecondaryBackground
	}).(pulumi.StringPtrOutput)
}

// <p>The foreground color that applies to any sheet title, sheet control text, or UI that
//
//	appears over the secondary background.</p>
func (o ThemeUiColorPalettePtrOutput) SecondaryForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeUiColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.SecondaryForeground
	}).(pulumi.StringPtrOutput)
}

// <p>The color that applies to success messages, for example the check mark for a
//
//	successful download.</p>
func (o ThemeUiColorPalettePtrOutput) Success() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeUiColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.Success
	}).(pulumi.StringPtrOutput)
}

// <p>The foreground color that applies to any text or other elements that appear over the
//
//	success color.</p>
func (o ThemeUiColorPalettePtrOutput) SuccessForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeUiColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.SuccessForeground
	}).(pulumi.StringPtrOutput)
}

// <p>This color that applies to warning and informational messages.</p>
func (o ThemeUiColorPalettePtrOutput) Warning() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeUiColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.Warning
	}).(pulumi.StringPtrOutput)
}

// <p>The foreground color that applies to any text or other elements that appear over the
//
//	warning color.</p>
func (o ThemeUiColorPalettePtrOutput) WarningForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeUiColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.WarningForeground
	}).(pulumi.StringPtrOutput)
}

// <p>A version of a theme.</p>
type ThemeVersion struct {
	// <p>The Amazon Resource Name (ARN) of the resource.</p>
	Arn *string `pulumi:"arn"`
	// <p>The Amazon QuickSight-defined ID of the theme that a custom theme inherits from. All
	//             themes initially inherit from a default Amazon QuickSight theme.</p>
	BaseThemeId *string `pulumi:"baseThemeId"`
	// The theme configuration, which contains all the theme display properties.
	Configuration *ThemeConfiguration `pulumi:"configuration"`
	// <p>The date and time that this theme version was created.</p>
	CreatedTime *string `pulumi:"createdTime"`
	// <p>The description of the theme.</p>
	Description *string `pulumi:"description"`
	// <p>Errors associated with the theme.</p>
	Errors []ThemeError `pulumi:"errors"`
	// The status of the theme version.
	Status *ThemeResourceStatus `pulumi:"status"`
	// <p>The version number of the theme.</p>
	VersionNumber *float64 `pulumi:"versionNumber"`
}

// <p>A version of a theme.</p>
type ThemeVersionOutput struct{ *pulumi.OutputState }

func (ThemeVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeVersion)(nil)).Elem()
}

func (o ThemeVersionOutput) ToThemeVersionOutput() ThemeVersionOutput {
	return o
}

func (o ThemeVersionOutput) ToThemeVersionOutputWithContext(ctx context.Context) ThemeVersionOutput {
	return o
}

// <p>The Amazon Resource Name (ARN) of the resource.</p>
func (o ThemeVersionOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeVersion) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// <p>The Amazon QuickSight-defined ID of the theme that a custom theme inherits from. All
//
//	themes initially inherit from a default Amazon QuickSight theme.</p>
func (o ThemeVersionOutput) BaseThemeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeVersion) *string { return v.BaseThemeId }).(pulumi.StringPtrOutput)
}

// The theme configuration, which contains all the theme display properties.
func (o ThemeVersionOutput) Configuration() ThemeConfigurationPtrOutput {
	return o.ApplyT(func(v ThemeVersion) *ThemeConfiguration { return v.Configuration }).(ThemeConfigurationPtrOutput)
}

// <p>The date and time that this theme version was created.</p>
func (o ThemeVersionOutput) CreatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeVersion) *string { return v.CreatedTime }).(pulumi.StringPtrOutput)
}

// <p>The description of the theme.</p>
func (o ThemeVersionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeVersion) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// <p>Errors associated with the theme.</p>
func (o ThemeVersionOutput) Errors() ThemeErrorArrayOutput {
	return o.ApplyT(func(v ThemeVersion) []ThemeError { return v.Errors }).(ThemeErrorArrayOutput)
}

// The status of the theme version.
func (o ThemeVersionOutput) Status() ThemeResourceStatusPtrOutput {
	return o.ApplyT(func(v ThemeVersion) *ThemeResourceStatus { return v.Status }).(ThemeResourceStatusPtrOutput)
}

// <p>The version number of the theme.</p>
func (o ThemeVersionOutput) VersionNumber() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ThemeVersion) *float64 { return v.VersionNumber }).(pulumi.Float64PtrOutput)
}

type ThemeVersionPtrOutput struct{ *pulumi.OutputState }

func (ThemeVersionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeVersion)(nil)).Elem()
}

func (o ThemeVersionPtrOutput) ToThemeVersionPtrOutput() ThemeVersionPtrOutput {
	return o
}

func (o ThemeVersionPtrOutput) ToThemeVersionPtrOutputWithContext(ctx context.Context) ThemeVersionPtrOutput {
	return o
}

func (o ThemeVersionPtrOutput) Elem() ThemeVersionOutput {
	return o.ApplyT(func(v *ThemeVersion) ThemeVersion {
		if v != nil {
			return *v
		}
		var ret ThemeVersion
		return ret
	}).(ThemeVersionOutput)
}

// <p>The Amazon Resource Name (ARN) of the resource.</p>
func (o ThemeVersionPtrOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeVersion) *string {
		if v == nil {
			return nil
		}
		return v.Arn
	}).(pulumi.StringPtrOutput)
}

// <p>The Amazon QuickSight-defined ID of the theme that a custom theme inherits from. All
//
//	themes initially inherit from a default Amazon QuickSight theme.</p>
func (o ThemeVersionPtrOutput) BaseThemeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeVersion) *string {
		if v == nil {
			return nil
		}
		return v.BaseThemeId
	}).(pulumi.StringPtrOutput)
}

// The theme configuration, which contains all the theme display properties.
func (o ThemeVersionPtrOutput) Configuration() ThemeConfigurationPtrOutput {
	return o.ApplyT(func(v *ThemeVersion) *ThemeConfiguration {
		if v == nil {
			return nil
		}
		return v.Configuration
	}).(ThemeConfigurationPtrOutput)
}

// <p>The date and time that this theme version was created.</p>
func (o ThemeVersionPtrOutput) CreatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeVersion) *string {
		if v == nil {
			return nil
		}
		return v.CreatedTime
	}).(pulumi.StringPtrOutput)
}

// <p>The description of the theme.</p>
func (o ThemeVersionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeVersion) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// <p>Errors associated with the theme.</p>
func (o ThemeVersionPtrOutput) Errors() ThemeErrorArrayOutput {
	return o.ApplyT(func(v *ThemeVersion) []ThemeError {
		if v == nil {
			return nil
		}
		return v.Errors
	}).(ThemeErrorArrayOutput)
}

// The status of the theme version.
func (o ThemeVersionPtrOutput) Status() ThemeResourceStatusPtrOutput {
	return o.ApplyT(func(v *ThemeVersion) *ThemeResourceStatus {
		if v == nil {
			return nil
		}
		return v.Status
	}).(ThemeResourceStatusPtrOutput)
}

// <p>The version number of the theme.</p>
func (o ThemeVersionPtrOutput) VersionNumber() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ThemeVersion) *float64 {
		if v == nil {
			return nil
		}
		return v.VersionNumber
	}).(pulumi.Float64PtrOutput)
}

type TopicCalculatedField struct {
	// The default aggregation. Valid values for this structure are `SUM` , `MAX` , `MIN` , `COUNT` , `DISTINCT_COUNT` , and `AVERAGE` .
	Aggregation *TopicDefaultAggregation `pulumi:"aggregation"`
	// The list of aggregation types that are allowed for the calculated field. Valid values for this structure are `COUNT` , `DISTINCT_COUNT` , `MIN` , `MAX` , `MEDIAN` , `SUM` , `AVERAGE` , `STDEV` , `STDEVP` , `VAR` , `VARP` , and `PERCENTILE` .
	AllowedAggregations []TopicAuthorSpecifiedAggregation `pulumi:"allowedAggregations"`
	// The calculated field description.
	CalculatedFieldDescription *string `pulumi:"calculatedFieldDescription"`
	// The calculated field name.
	CalculatedFieldName string `pulumi:"calculatedFieldName"`
	// The other names or aliases for the calculated field.
	CalculatedFieldSynonyms []string `pulumi:"calculatedFieldSynonyms"`
	// The other names or aliases for the calculated field cell value.
	CellValueSynonyms []TopicCellValueSynonym `pulumi:"cellValueSynonyms"`
	// The column data role for a calculated field. Valid values for this structure are `DIMENSION` and `MEASURE` .
	ColumnDataRole *TopicColumnDataRole `pulumi:"columnDataRole"`
	// The order in which data is displayed for the calculated field when it's used in a comparative context.
	ComparativeOrder *TopicComparativeOrder `pulumi:"comparativeOrder"`
	// The default formatting definition.
	DefaultFormatting *TopicDefaultFormatting `pulumi:"defaultFormatting"`
	// A Boolean value that indicates if a calculated field is visible in the autocomplete.
	DisableIndexing *bool `pulumi:"disableIndexing"`
	// The calculated field expression.
	Expression string `pulumi:"expression"`
	// A boolean value that indicates if a calculated field is included in the topic.
	IsIncludedInTopic *bool `pulumi:"isIncludedInTopic"`
	// A Boolean value that indicates whether to never aggregate calculated field in filters.
	NeverAggregateInFilter *bool `pulumi:"neverAggregateInFilter"`
	// The non additive for the table style target.
	NonAdditive *bool `pulumi:"nonAdditive"`
	// The list of aggregation types that are not allowed for the calculated field. Valid values for this structure are `COUNT` , `DISTINCT_COUNT` , `MIN` , `MAX` , `MEDIAN` , `SUM` , `AVERAGE` , `STDEV` , `STDEVP` , `VAR` , `VARP` , and `PERCENTILE` .
	NotAllowedAggregations []TopicAuthorSpecifiedAggregation `pulumi:"notAllowedAggregations"`
	// The semantic type.
	SemanticType *TopicSemanticType `pulumi:"semanticType"`
	// The level of time precision that is used to aggregate `DateTime` values.
	TimeGranularity *TopicTimeGranularity `pulumi:"timeGranularity"`
}

// TopicCalculatedFieldInput is an input type that accepts TopicCalculatedFieldArgs and TopicCalculatedFieldOutput values.
// You can construct a concrete instance of `TopicCalculatedFieldInput` via:
//
//	TopicCalculatedFieldArgs{...}
type TopicCalculatedFieldInput interface {
	pulumi.Input

	ToTopicCalculatedFieldOutput() TopicCalculatedFieldOutput
	ToTopicCalculatedFieldOutputWithContext(context.Context) TopicCalculatedFieldOutput
}

type TopicCalculatedFieldArgs struct {
	// The default aggregation. Valid values for this structure are `SUM` , `MAX` , `MIN` , `COUNT` , `DISTINCT_COUNT` , and `AVERAGE` .
	Aggregation TopicDefaultAggregationPtrInput `pulumi:"aggregation"`
	// The list of aggregation types that are allowed for the calculated field. Valid values for this structure are `COUNT` , `DISTINCT_COUNT` , `MIN` , `MAX` , `MEDIAN` , `SUM` , `AVERAGE` , `STDEV` , `STDEVP` , `VAR` , `VARP` , and `PERCENTILE` .
	AllowedAggregations TopicAuthorSpecifiedAggregationArrayInput `pulumi:"allowedAggregations"`
	// The calculated field description.
	CalculatedFieldDescription pulumi.StringPtrInput `pulumi:"calculatedFieldDescription"`
	// The calculated field name.
	CalculatedFieldName pulumi.StringInput `pulumi:"calculatedFieldName"`
	// The other names or aliases for the calculated field.
	CalculatedFieldSynonyms pulumi.StringArrayInput `pulumi:"calculatedFieldSynonyms"`
	// The other names or aliases for the calculated field cell value.
	CellValueSynonyms TopicCellValueSynonymArrayInput `pulumi:"cellValueSynonyms"`
	// The column data role for a calculated field. Valid values for this structure are `DIMENSION` and `MEASURE` .
	ColumnDataRole TopicColumnDataRolePtrInput `pulumi:"columnDataRole"`
	// The order in which data is displayed for the calculated field when it's used in a comparative context.
	ComparativeOrder TopicComparativeOrderPtrInput `pulumi:"comparativeOrder"`
	// The default formatting definition.
	DefaultFormatting TopicDefaultFormattingPtrInput `pulumi:"defaultFormatting"`
	// A Boolean value that indicates if a calculated field is visible in the autocomplete.
	DisableIndexing pulumi.BoolPtrInput `pulumi:"disableIndexing"`
	// The calculated field expression.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A boolean value that indicates if a calculated field is included in the topic.
	IsIncludedInTopic pulumi.BoolPtrInput `pulumi:"isIncludedInTopic"`
	// A Boolean value that indicates whether to never aggregate calculated field in filters.
	NeverAggregateInFilter pulumi.BoolPtrInput `pulumi:"neverAggregateInFilter"`
	// The non additive for the table style target.
	NonAdditive pulumi.BoolPtrInput `pulumi:"nonAdditive"`
	// The list of aggregation types that are not allowed for the calculated field. Valid values for this structure are `COUNT` , `DISTINCT_COUNT` , `MIN` , `MAX` , `MEDIAN` , `SUM` , `AVERAGE` , `STDEV` , `STDEVP` , `VAR` , `VARP` , and `PERCENTILE` .
	NotAllowedAggregations TopicAuthorSpecifiedAggregationArrayInput `pulumi:"notAllowedAggregations"`
	// The semantic type.
	SemanticType TopicSemanticTypePtrInput `pulumi:"semanticType"`
	// The level of time precision that is used to aggregate `DateTime` values.
	TimeGranularity TopicTimeGranularityPtrInput `pulumi:"timeGranularity"`
}

func (TopicCalculatedFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicCalculatedField)(nil)).Elem()
}

func (i TopicCalculatedFieldArgs) ToTopicCalculatedFieldOutput() TopicCalculatedFieldOutput {
	return i.ToTopicCalculatedFieldOutputWithContext(context.Background())
}

func (i TopicCalculatedFieldArgs) ToTopicCalculatedFieldOutputWithContext(ctx context.Context) TopicCalculatedFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicCalculatedFieldOutput)
}

// TopicCalculatedFieldArrayInput is an input type that accepts TopicCalculatedFieldArray and TopicCalculatedFieldArrayOutput values.
// You can construct a concrete instance of `TopicCalculatedFieldArrayInput` via:
//
//	TopicCalculatedFieldArray{ TopicCalculatedFieldArgs{...} }
type TopicCalculatedFieldArrayInput interface {
	pulumi.Input

	ToTopicCalculatedFieldArrayOutput() TopicCalculatedFieldArrayOutput
	ToTopicCalculatedFieldArrayOutputWithContext(context.Context) TopicCalculatedFieldArrayOutput
}

type TopicCalculatedFieldArray []TopicCalculatedFieldInput

func (TopicCalculatedFieldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicCalculatedField)(nil)).Elem()
}

func (i TopicCalculatedFieldArray) ToTopicCalculatedFieldArrayOutput() TopicCalculatedFieldArrayOutput {
	return i.ToTopicCalculatedFieldArrayOutputWithContext(context.Background())
}

func (i TopicCalculatedFieldArray) ToTopicCalculatedFieldArrayOutputWithContext(ctx context.Context) TopicCalculatedFieldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicCalculatedFieldArrayOutput)
}

type TopicCalculatedFieldOutput struct{ *pulumi.OutputState }

func (TopicCalculatedFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicCalculatedField)(nil)).Elem()
}

func (o TopicCalculatedFieldOutput) ToTopicCalculatedFieldOutput() TopicCalculatedFieldOutput {
	return o
}

func (o TopicCalculatedFieldOutput) ToTopicCalculatedFieldOutputWithContext(ctx context.Context) TopicCalculatedFieldOutput {
	return o
}

// The default aggregation. Valid values for this structure are `SUM` , `MAX` , `MIN` , `COUNT` , `DISTINCT_COUNT` , and `AVERAGE` .
func (o TopicCalculatedFieldOutput) Aggregation() TopicDefaultAggregationPtrOutput {
	return o.ApplyT(func(v TopicCalculatedField) *TopicDefaultAggregation { return v.Aggregation }).(TopicDefaultAggregationPtrOutput)
}

// The list of aggregation types that are allowed for the calculated field. Valid values for this structure are `COUNT` , `DISTINCT_COUNT` , `MIN` , `MAX` , `MEDIAN` , `SUM` , `AVERAGE` , `STDEV` , `STDEVP` , `VAR` , `VARP` , and `PERCENTILE` .
func (o TopicCalculatedFieldOutput) AllowedAggregations() TopicAuthorSpecifiedAggregationArrayOutput {
	return o.ApplyT(func(v TopicCalculatedField) []TopicAuthorSpecifiedAggregation { return v.AllowedAggregations }).(TopicAuthorSpecifiedAggregationArrayOutput)
}

// The calculated field description.
func (o TopicCalculatedFieldOutput) CalculatedFieldDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicCalculatedField) *string { return v.CalculatedFieldDescription }).(pulumi.StringPtrOutput)
}

// The calculated field name.
func (o TopicCalculatedFieldOutput) CalculatedFieldName() pulumi.StringOutput {
	return o.ApplyT(func(v TopicCalculatedField) string { return v.CalculatedFieldName }).(pulumi.StringOutput)
}

// The other names or aliases for the calculated field.
func (o TopicCalculatedFieldOutput) CalculatedFieldSynonyms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TopicCalculatedField) []string { return v.CalculatedFieldSynonyms }).(pulumi.StringArrayOutput)
}

// The other names or aliases for the calculated field cell value.
func (o TopicCalculatedFieldOutput) CellValueSynonyms() TopicCellValueSynonymArrayOutput {
	return o.ApplyT(func(v TopicCalculatedField) []TopicCellValueSynonym { return v.CellValueSynonyms }).(TopicCellValueSynonymArrayOutput)
}

// The column data role for a calculated field. Valid values for this structure are `DIMENSION` and `MEASURE` .
func (o TopicCalculatedFieldOutput) ColumnDataRole() TopicColumnDataRolePtrOutput {
	return o.ApplyT(func(v TopicCalculatedField) *TopicColumnDataRole { return v.ColumnDataRole }).(TopicColumnDataRolePtrOutput)
}

// The order in which data is displayed for the calculated field when it's used in a comparative context.
func (o TopicCalculatedFieldOutput) ComparativeOrder() TopicComparativeOrderPtrOutput {
	return o.ApplyT(func(v TopicCalculatedField) *TopicComparativeOrder { return v.ComparativeOrder }).(TopicComparativeOrderPtrOutput)
}

// The default formatting definition.
func (o TopicCalculatedFieldOutput) DefaultFormatting() TopicDefaultFormattingPtrOutput {
	return o.ApplyT(func(v TopicCalculatedField) *TopicDefaultFormatting { return v.DefaultFormatting }).(TopicDefaultFormattingPtrOutput)
}

// A Boolean value that indicates if a calculated field is visible in the autocomplete.
func (o TopicCalculatedFieldOutput) DisableIndexing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TopicCalculatedField) *bool { return v.DisableIndexing }).(pulumi.BoolPtrOutput)
}

// The calculated field expression.
func (o TopicCalculatedFieldOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v TopicCalculatedField) string { return v.Expression }).(pulumi.StringOutput)
}

// A boolean value that indicates if a calculated field is included in the topic.
func (o TopicCalculatedFieldOutput) IsIncludedInTopic() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TopicCalculatedField) *bool { return v.IsIncludedInTopic }).(pulumi.BoolPtrOutput)
}

// A Boolean value that indicates whether to never aggregate calculated field in filters.
func (o TopicCalculatedFieldOutput) NeverAggregateInFilter() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TopicCalculatedField) *bool { return v.NeverAggregateInFilter }).(pulumi.BoolPtrOutput)
}

// The non additive for the table style target.
func (o TopicCalculatedFieldOutput) NonAdditive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TopicCalculatedField) *bool { return v.NonAdditive }).(pulumi.BoolPtrOutput)
}

// The list of aggregation types that are not allowed for the calculated field. Valid values for this structure are `COUNT` , `DISTINCT_COUNT` , `MIN` , `MAX` , `MEDIAN` , `SUM` , `AVERAGE` , `STDEV` , `STDEVP` , `VAR` , `VARP` , and `PERCENTILE` .
func (o TopicCalculatedFieldOutput) NotAllowedAggregations() TopicAuthorSpecifiedAggregationArrayOutput {
	return o.ApplyT(func(v TopicCalculatedField) []TopicAuthorSpecifiedAggregation { return v.NotAllowedAggregations }).(TopicAuthorSpecifiedAggregationArrayOutput)
}

// The semantic type.
func (o TopicCalculatedFieldOutput) SemanticType() TopicSemanticTypePtrOutput {
	return o.ApplyT(func(v TopicCalculatedField) *TopicSemanticType { return v.SemanticType }).(TopicSemanticTypePtrOutput)
}

// The level of time precision that is used to aggregate `DateTime` values.
func (o TopicCalculatedFieldOutput) TimeGranularity() TopicTimeGranularityPtrOutput {
	return o.ApplyT(func(v TopicCalculatedField) *TopicTimeGranularity { return v.TimeGranularity }).(TopicTimeGranularityPtrOutput)
}

type TopicCalculatedFieldArrayOutput struct{ *pulumi.OutputState }

func (TopicCalculatedFieldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicCalculatedField)(nil)).Elem()
}

func (o TopicCalculatedFieldArrayOutput) ToTopicCalculatedFieldArrayOutput() TopicCalculatedFieldArrayOutput {
	return o
}

func (o TopicCalculatedFieldArrayOutput) ToTopicCalculatedFieldArrayOutputWithContext(ctx context.Context) TopicCalculatedFieldArrayOutput {
	return o
}

func (o TopicCalculatedFieldArrayOutput) Index(i pulumi.IntInput) TopicCalculatedFieldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TopicCalculatedField {
		return vs[0].([]TopicCalculatedField)[vs[1].(int)]
	}).(TopicCalculatedFieldOutput)
}

type TopicCategoryFilter struct {
	// The category filter function. Valid values for this structure are `EXACT` and `CONTAINS` .
	CategoryFilterFunction *TopicCategoryFilterFunction `pulumi:"categoryFilterFunction"`
	// The category filter type. This element is used to specify whether a filter is a simple category filter or an inverse category filter.
	CategoryFilterType *TopicCategoryFilterType `pulumi:"categoryFilterType"`
	// The constant used in a category filter.
	Constant *TopicCategoryFilterConstant `pulumi:"constant"`
	// A Boolean value that indicates if the filter is inverse.
	Inverse *bool `pulumi:"inverse"`
}

// TopicCategoryFilterInput is an input type that accepts TopicCategoryFilterArgs and TopicCategoryFilterOutput values.
// You can construct a concrete instance of `TopicCategoryFilterInput` via:
//
//	TopicCategoryFilterArgs{...}
type TopicCategoryFilterInput interface {
	pulumi.Input

	ToTopicCategoryFilterOutput() TopicCategoryFilterOutput
	ToTopicCategoryFilterOutputWithContext(context.Context) TopicCategoryFilterOutput
}

type TopicCategoryFilterArgs struct {
	// The category filter function. Valid values for this structure are `EXACT` and `CONTAINS` .
	CategoryFilterFunction TopicCategoryFilterFunctionPtrInput `pulumi:"categoryFilterFunction"`
	// The category filter type. This element is used to specify whether a filter is a simple category filter or an inverse category filter.
	CategoryFilterType TopicCategoryFilterTypePtrInput `pulumi:"categoryFilterType"`
	// The constant used in a category filter.
	Constant TopicCategoryFilterConstantPtrInput `pulumi:"constant"`
	// A Boolean value that indicates if the filter is inverse.
	Inverse pulumi.BoolPtrInput `pulumi:"inverse"`
}

func (TopicCategoryFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicCategoryFilter)(nil)).Elem()
}

func (i TopicCategoryFilterArgs) ToTopicCategoryFilterOutput() TopicCategoryFilterOutput {
	return i.ToTopicCategoryFilterOutputWithContext(context.Background())
}

func (i TopicCategoryFilterArgs) ToTopicCategoryFilterOutputWithContext(ctx context.Context) TopicCategoryFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicCategoryFilterOutput)
}

func (i TopicCategoryFilterArgs) ToTopicCategoryFilterPtrOutput() TopicCategoryFilterPtrOutput {
	return i.ToTopicCategoryFilterPtrOutputWithContext(context.Background())
}

func (i TopicCategoryFilterArgs) ToTopicCategoryFilterPtrOutputWithContext(ctx context.Context) TopicCategoryFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicCategoryFilterOutput).ToTopicCategoryFilterPtrOutputWithContext(ctx)
}

// TopicCategoryFilterPtrInput is an input type that accepts TopicCategoryFilterArgs, TopicCategoryFilterPtr and TopicCategoryFilterPtrOutput values.
// You can construct a concrete instance of `TopicCategoryFilterPtrInput` via:
//
//	        TopicCategoryFilterArgs{...}
//
//	or:
//
//	        nil
type TopicCategoryFilterPtrInput interface {
	pulumi.Input

	ToTopicCategoryFilterPtrOutput() TopicCategoryFilterPtrOutput
	ToTopicCategoryFilterPtrOutputWithContext(context.Context) TopicCategoryFilterPtrOutput
}

type topicCategoryFilterPtrType TopicCategoryFilterArgs

func TopicCategoryFilterPtr(v *TopicCategoryFilterArgs) TopicCategoryFilterPtrInput {
	return (*topicCategoryFilterPtrType)(v)
}

func (*topicCategoryFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicCategoryFilter)(nil)).Elem()
}

func (i *topicCategoryFilterPtrType) ToTopicCategoryFilterPtrOutput() TopicCategoryFilterPtrOutput {
	return i.ToTopicCategoryFilterPtrOutputWithContext(context.Background())
}

func (i *topicCategoryFilterPtrType) ToTopicCategoryFilterPtrOutputWithContext(ctx context.Context) TopicCategoryFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicCategoryFilterPtrOutput)
}

type TopicCategoryFilterOutput struct{ *pulumi.OutputState }

func (TopicCategoryFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicCategoryFilter)(nil)).Elem()
}

func (o TopicCategoryFilterOutput) ToTopicCategoryFilterOutput() TopicCategoryFilterOutput {
	return o
}

func (o TopicCategoryFilterOutput) ToTopicCategoryFilterOutputWithContext(ctx context.Context) TopicCategoryFilterOutput {
	return o
}

func (o TopicCategoryFilterOutput) ToTopicCategoryFilterPtrOutput() TopicCategoryFilterPtrOutput {
	return o.ToTopicCategoryFilterPtrOutputWithContext(context.Background())
}

func (o TopicCategoryFilterOutput) ToTopicCategoryFilterPtrOutputWithContext(ctx context.Context) TopicCategoryFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicCategoryFilter) *TopicCategoryFilter {
		return &v
	}).(TopicCategoryFilterPtrOutput)
}

// The category filter function. Valid values for this structure are `EXACT` and `CONTAINS` .
func (o TopicCategoryFilterOutput) CategoryFilterFunction() TopicCategoryFilterFunctionPtrOutput {
	return o.ApplyT(func(v TopicCategoryFilter) *TopicCategoryFilterFunction { return v.CategoryFilterFunction }).(TopicCategoryFilterFunctionPtrOutput)
}

// The category filter type. This element is used to specify whether a filter is a simple category filter or an inverse category filter.
func (o TopicCategoryFilterOutput) CategoryFilterType() TopicCategoryFilterTypePtrOutput {
	return o.ApplyT(func(v TopicCategoryFilter) *TopicCategoryFilterType { return v.CategoryFilterType }).(TopicCategoryFilterTypePtrOutput)
}

// The constant used in a category filter.
func (o TopicCategoryFilterOutput) Constant() TopicCategoryFilterConstantPtrOutput {
	return o.ApplyT(func(v TopicCategoryFilter) *TopicCategoryFilterConstant { return v.Constant }).(TopicCategoryFilterConstantPtrOutput)
}

// A Boolean value that indicates if the filter is inverse.
func (o TopicCategoryFilterOutput) Inverse() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TopicCategoryFilter) *bool { return v.Inverse }).(pulumi.BoolPtrOutput)
}

type TopicCategoryFilterPtrOutput struct{ *pulumi.OutputState }

func (TopicCategoryFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicCategoryFilter)(nil)).Elem()
}

func (o TopicCategoryFilterPtrOutput) ToTopicCategoryFilterPtrOutput() TopicCategoryFilterPtrOutput {
	return o
}

func (o TopicCategoryFilterPtrOutput) ToTopicCategoryFilterPtrOutputWithContext(ctx context.Context) TopicCategoryFilterPtrOutput {
	return o
}

func (o TopicCategoryFilterPtrOutput) Elem() TopicCategoryFilterOutput {
	return o.ApplyT(func(v *TopicCategoryFilter) TopicCategoryFilter {
		if v != nil {
			return *v
		}
		var ret TopicCategoryFilter
		return ret
	}).(TopicCategoryFilterOutput)
}

// The category filter function. Valid values for this structure are `EXACT` and `CONTAINS` .
func (o TopicCategoryFilterPtrOutput) CategoryFilterFunction() TopicCategoryFilterFunctionPtrOutput {
	return o.ApplyT(func(v *TopicCategoryFilter) *TopicCategoryFilterFunction {
		if v == nil {
			return nil
		}
		return v.CategoryFilterFunction
	}).(TopicCategoryFilterFunctionPtrOutput)
}

// The category filter type. This element is used to specify whether a filter is a simple category filter or an inverse category filter.
func (o TopicCategoryFilterPtrOutput) CategoryFilterType() TopicCategoryFilterTypePtrOutput {
	return o.ApplyT(func(v *TopicCategoryFilter) *TopicCategoryFilterType {
		if v == nil {
			return nil
		}
		return v.CategoryFilterType
	}).(TopicCategoryFilterTypePtrOutput)
}

// The constant used in a category filter.
func (o TopicCategoryFilterPtrOutput) Constant() TopicCategoryFilterConstantPtrOutput {
	return o.ApplyT(func(v *TopicCategoryFilter) *TopicCategoryFilterConstant {
		if v == nil {
			return nil
		}
		return v.Constant
	}).(TopicCategoryFilterConstantPtrOutput)
}

// A Boolean value that indicates if the filter is inverse.
func (o TopicCategoryFilterPtrOutput) Inverse() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TopicCategoryFilter) *bool {
		if v == nil {
			return nil
		}
		return v.Inverse
	}).(pulumi.BoolPtrOutput)
}

type TopicCategoryFilterConstant struct {
	// A collective constant used in a category filter. This element is used to specify a list of values for the constant.
	CollectiveConstant *TopicCollectiveConstant `pulumi:"collectiveConstant"`
	// The type of category filter constant. This element is used to specify whether a constant is a singular or collective. Valid values are `SINGULAR` and `COLLECTIVE` .
	ConstantType *TopicConstantType `pulumi:"constantType"`
	// A singular constant used in a category filter. This element is used to specify a single value for the constant.
	SingularConstant *string `pulumi:"singularConstant"`
}

// TopicCategoryFilterConstantInput is an input type that accepts TopicCategoryFilterConstantArgs and TopicCategoryFilterConstantOutput values.
// You can construct a concrete instance of `TopicCategoryFilterConstantInput` via:
//
//	TopicCategoryFilterConstantArgs{...}
type TopicCategoryFilterConstantInput interface {
	pulumi.Input

	ToTopicCategoryFilterConstantOutput() TopicCategoryFilterConstantOutput
	ToTopicCategoryFilterConstantOutputWithContext(context.Context) TopicCategoryFilterConstantOutput
}

type TopicCategoryFilterConstantArgs struct {
	// A collective constant used in a category filter. This element is used to specify a list of values for the constant.
	CollectiveConstant TopicCollectiveConstantPtrInput `pulumi:"collectiveConstant"`
	// The type of category filter constant. This element is used to specify whether a constant is a singular or collective. Valid values are `SINGULAR` and `COLLECTIVE` .
	ConstantType TopicConstantTypePtrInput `pulumi:"constantType"`
	// A singular constant used in a category filter. This element is used to specify a single value for the constant.
	SingularConstant pulumi.StringPtrInput `pulumi:"singularConstant"`
}

func (TopicCategoryFilterConstantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicCategoryFilterConstant)(nil)).Elem()
}

func (i TopicCategoryFilterConstantArgs) ToTopicCategoryFilterConstantOutput() TopicCategoryFilterConstantOutput {
	return i.ToTopicCategoryFilterConstantOutputWithContext(context.Background())
}

func (i TopicCategoryFilterConstantArgs) ToTopicCategoryFilterConstantOutputWithContext(ctx context.Context) TopicCategoryFilterConstantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicCategoryFilterConstantOutput)
}

func (i TopicCategoryFilterConstantArgs) ToTopicCategoryFilterConstantPtrOutput() TopicCategoryFilterConstantPtrOutput {
	return i.ToTopicCategoryFilterConstantPtrOutputWithContext(context.Background())
}

func (i TopicCategoryFilterConstantArgs) ToTopicCategoryFilterConstantPtrOutputWithContext(ctx context.Context) TopicCategoryFilterConstantPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicCategoryFilterConstantOutput).ToTopicCategoryFilterConstantPtrOutputWithContext(ctx)
}

// TopicCategoryFilterConstantPtrInput is an input type that accepts TopicCategoryFilterConstantArgs, TopicCategoryFilterConstantPtr and TopicCategoryFilterConstantPtrOutput values.
// You can construct a concrete instance of `TopicCategoryFilterConstantPtrInput` via:
//
//	        TopicCategoryFilterConstantArgs{...}
//
//	or:
//
//	        nil
type TopicCategoryFilterConstantPtrInput interface {
	pulumi.Input

	ToTopicCategoryFilterConstantPtrOutput() TopicCategoryFilterConstantPtrOutput
	ToTopicCategoryFilterConstantPtrOutputWithContext(context.Context) TopicCategoryFilterConstantPtrOutput
}

type topicCategoryFilterConstantPtrType TopicCategoryFilterConstantArgs

func TopicCategoryFilterConstantPtr(v *TopicCategoryFilterConstantArgs) TopicCategoryFilterConstantPtrInput {
	return (*topicCategoryFilterConstantPtrType)(v)
}

func (*topicCategoryFilterConstantPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicCategoryFilterConstant)(nil)).Elem()
}

func (i *topicCategoryFilterConstantPtrType) ToTopicCategoryFilterConstantPtrOutput() TopicCategoryFilterConstantPtrOutput {
	return i.ToTopicCategoryFilterConstantPtrOutputWithContext(context.Background())
}

func (i *topicCategoryFilterConstantPtrType) ToTopicCategoryFilterConstantPtrOutputWithContext(ctx context.Context) TopicCategoryFilterConstantPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicCategoryFilterConstantPtrOutput)
}

type TopicCategoryFilterConstantOutput struct{ *pulumi.OutputState }

func (TopicCategoryFilterConstantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicCategoryFilterConstant)(nil)).Elem()
}

func (o TopicCategoryFilterConstantOutput) ToTopicCategoryFilterConstantOutput() TopicCategoryFilterConstantOutput {
	return o
}

func (o TopicCategoryFilterConstantOutput) ToTopicCategoryFilterConstantOutputWithContext(ctx context.Context) TopicCategoryFilterConstantOutput {
	return o
}

func (o TopicCategoryFilterConstantOutput) ToTopicCategoryFilterConstantPtrOutput() TopicCategoryFilterConstantPtrOutput {
	return o.ToTopicCategoryFilterConstantPtrOutputWithContext(context.Background())
}

func (o TopicCategoryFilterConstantOutput) ToTopicCategoryFilterConstantPtrOutputWithContext(ctx context.Context) TopicCategoryFilterConstantPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicCategoryFilterConstant) *TopicCategoryFilterConstant {
		return &v
	}).(TopicCategoryFilterConstantPtrOutput)
}

// A collective constant used in a category filter. This element is used to specify a list of values for the constant.
func (o TopicCategoryFilterConstantOutput) CollectiveConstant() TopicCollectiveConstantPtrOutput {
	return o.ApplyT(func(v TopicCategoryFilterConstant) *TopicCollectiveConstant { return v.CollectiveConstant }).(TopicCollectiveConstantPtrOutput)
}

// The type of category filter constant. This element is used to specify whether a constant is a singular or collective. Valid values are `SINGULAR` and `COLLECTIVE` .
func (o TopicCategoryFilterConstantOutput) ConstantType() TopicConstantTypePtrOutput {
	return o.ApplyT(func(v TopicCategoryFilterConstant) *TopicConstantType { return v.ConstantType }).(TopicConstantTypePtrOutput)
}

// A singular constant used in a category filter. This element is used to specify a single value for the constant.
func (o TopicCategoryFilterConstantOutput) SingularConstant() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicCategoryFilterConstant) *string { return v.SingularConstant }).(pulumi.StringPtrOutput)
}

type TopicCategoryFilterConstantPtrOutput struct{ *pulumi.OutputState }

func (TopicCategoryFilterConstantPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicCategoryFilterConstant)(nil)).Elem()
}

func (o TopicCategoryFilterConstantPtrOutput) ToTopicCategoryFilterConstantPtrOutput() TopicCategoryFilterConstantPtrOutput {
	return o
}

func (o TopicCategoryFilterConstantPtrOutput) ToTopicCategoryFilterConstantPtrOutputWithContext(ctx context.Context) TopicCategoryFilterConstantPtrOutput {
	return o
}

func (o TopicCategoryFilterConstantPtrOutput) Elem() TopicCategoryFilterConstantOutput {
	return o.ApplyT(func(v *TopicCategoryFilterConstant) TopicCategoryFilterConstant {
		if v != nil {
			return *v
		}
		var ret TopicCategoryFilterConstant
		return ret
	}).(TopicCategoryFilterConstantOutput)
}

// A collective constant used in a category filter. This element is used to specify a list of values for the constant.
func (o TopicCategoryFilterConstantPtrOutput) CollectiveConstant() TopicCollectiveConstantPtrOutput {
	return o.ApplyT(func(v *TopicCategoryFilterConstant) *TopicCollectiveConstant {
		if v == nil {
			return nil
		}
		return v.CollectiveConstant
	}).(TopicCollectiveConstantPtrOutput)
}

// The type of category filter constant. This element is used to specify whether a constant is a singular or collective. Valid values are `SINGULAR` and `COLLECTIVE` .
func (o TopicCategoryFilterConstantPtrOutput) ConstantType() TopicConstantTypePtrOutput {
	return o.ApplyT(func(v *TopicCategoryFilterConstant) *TopicConstantType {
		if v == nil {
			return nil
		}
		return v.ConstantType
	}).(TopicConstantTypePtrOutput)
}

// A singular constant used in a category filter. This element is used to specify a single value for the constant.
func (o TopicCategoryFilterConstantPtrOutput) SingularConstant() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicCategoryFilterConstant) *string {
		if v == nil {
			return nil
		}
		return v.SingularConstant
	}).(pulumi.StringPtrOutput)
}

type TopicCellValueSynonym struct {
	// The cell value.
	CellValue *string `pulumi:"cellValue"`
	// Other names or aliases for the cell value.
	Synonyms []string `pulumi:"synonyms"`
}

// TopicCellValueSynonymInput is an input type that accepts TopicCellValueSynonymArgs and TopicCellValueSynonymOutput values.
// You can construct a concrete instance of `TopicCellValueSynonymInput` via:
//
//	TopicCellValueSynonymArgs{...}
type TopicCellValueSynonymInput interface {
	pulumi.Input

	ToTopicCellValueSynonymOutput() TopicCellValueSynonymOutput
	ToTopicCellValueSynonymOutputWithContext(context.Context) TopicCellValueSynonymOutput
}

type TopicCellValueSynonymArgs struct {
	// The cell value.
	CellValue pulumi.StringPtrInput `pulumi:"cellValue"`
	// Other names or aliases for the cell value.
	Synonyms pulumi.StringArrayInput `pulumi:"synonyms"`
}

func (TopicCellValueSynonymArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicCellValueSynonym)(nil)).Elem()
}

func (i TopicCellValueSynonymArgs) ToTopicCellValueSynonymOutput() TopicCellValueSynonymOutput {
	return i.ToTopicCellValueSynonymOutputWithContext(context.Background())
}

func (i TopicCellValueSynonymArgs) ToTopicCellValueSynonymOutputWithContext(ctx context.Context) TopicCellValueSynonymOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicCellValueSynonymOutput)
}

// TopicCellValueSynonymArrayInput is an input type that accepts TopicCellValueSynonymArray and TopicCellValueSynonymArrayOutput values.
// You can construct a concrete instance of `TopicCellValueSynonymArrayInput` via:
//
//	TopicCellValueSynonymArray{ TopicCellValueSynonymArgs{...} }
type TopicCellValueSynonymArrayInput interface {
	pulumi.Input

	ToTopicCellValueSynonymArrayOutput() TopicCellValueSynonymArrayOutput
	ToTopicCellValueSynonymArrayOutputWithContext(context.Context) TopicCellValueSynonymArrayOutput
}

type TopicCellValueSynonymArray []TopicCellValueSynonymInput

func (TopicCellValueSynonymArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicCellValueSynonym)(nil)).Elem()
}

func (i TopicCellValueSynonymArray) ToTopicCellValueSynonymArrayOutput() TopicCellValueSynonymArrayOutput {
	return i.ToTopicCellValueSynonymArrayOutputWithContext(context.Background())
}

func (i TopicCellValueSynonymArray) ToTopicCellValueSynonymArrayOutputWithContext(ctx context.Context) TopicCellValueSynonymArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicCellValueSynonymArrayOutput)
}

type TopicCellValueSynonymOutput struct{ *pulumi.OutputState }

func (TopicCellValueSynonymOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicCellValueSynonym)(nil)).Elem()
}

func (o TopicCellValueSynonymOutput) ToTopicCellValueSynonymOutput() TopicCellValueSynonymOutput {
	return o
}

func (o TopicCellValueSynonymOutput) ToTopicCellValueSynonymOutputWithContext(ctx context.Context) TopicCellValueSynonymOutput {
	return o
}

// The cell value.
func (o TopicCellValueSynonymOutput) CellValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicCellValueSynonym) *string { return v.CellValue }).(pulumi.StringPtrOutput)
}

// Other names or aliases for the cell value.
func (o TopicCellValueSynonymOutput) Synonyms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TopicCellValueSynonym) []string { return v.Synonyms }).(pulumi.StringArrayOutput)
}

type TopicCellValueSynonymArrayOutput struct{ *pulumi.OutputState }

func (TopicCellValueSynonymArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicCellValueSynonym)(nil)).Elem()
}

func (o TopicCellValueSynonymArrayOutput) ToTopicCellValueSynonymArrayOutput() TopicCellValueSynonymArrayOutput {
	return o
}

func (o TopicCellValueSynonymArrayOutput) ToTopicCellValueSynonymArrayOutputWithContext(ctx context.Context) TopicCellValueSynonymArrayOutput {
	return o
}

func (o TopicCellValueSynonymArrayOutput) Index(i pulumi.IntInput) TopicCellValueSynonymOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TopicCellValueSynonym {
		return vs[0].([]TopicCellValueSynonym)[vs[1].(int)]
	}).(TopicCellValueSynonymOutput)
}

type TopicCollectiveConstant struct {
	// A list of values for the collective constant.
	ValueList []string `pulumi:"valueList"`
}

// TopicCollectiveConstantInput is an input type that accepts TopicCollectiveConstantArgs and TopicCollectiveConstantOutput values.
// You can construct a concrete instance of `TopicCollectiveConstantInput` via:
//
//	TopicCollectiveConstantArgs{...}
type TopicCollectiveConstantInput interface {
	pulumi.Input

	ToTopicCollectiveConstantOutput() TopicCollectiveConstantOutput
	ToTopicCollectiveConstantOutputWithContext(context.Context) TopicCollectiveConstantOutput
}

type TopicCollectiveConstantArgs struct {
	// A list of values for the collective constant.
	ValueList pulumi.StringArrayInput `pulumi:"valueList"`
}

func (TopicCollectiveConstantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicCollectiveConstant)(nil)).Elem()
}

func (i TopicCollectiveConstantArgs) ToTopicCollectiveConstantOutput() TopicCollectiveConstantOutput {
	return i.ToTopicCollectiveConstantOutputWithContext(context.Background())
}

func (i TopicCollectiveConstantArgs) ToTopicCollectiveConstantOutputWithContext(ctx context.Context) TopicCollectiveConstantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicCollectiveConstantOutput)
}

func (i TopicCollectiveConstantArgs) ToTopicCollectiveConstantPtrOutput() TopicCollectiveConstantPtrOutput {
	return i.ToTopicCollectiveConstantPtrOutputWithContext(context.Background())
}

func (i TopicCollectiveConstantArgs) ToTopicCollectiveConstantPtrOutputWithContext(ctx context.Context) TopicCollectiveConstantPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicCollectiveConstantOutput).ToTopicCollectiveConstantPtrOutputWithContext(ctx)
}

// TopicCollectiveConstantPtrInput is an input type that accepts TopicCollectiveConstantArgs, TopicCollectiveConstantPtr and TopicCollectiveConstantPtrOutput values.
// You can construct a concrete instance of `TopicCollectiveConstantPtrInput` via:
//
//	        TopicCollectiveConstantArgs{...}
//
//	or:
//
//	        nil
type TopicCollectiveConstantPtrInput interface {
	pulumi.Input

	ToTopicCollectiveConstantPtrOutput() TopicCollectiveConstantPtrOutput
	ToTopicCollectiveConstantPtrOutputWithContext(context.Context) TopicCollectiveConstantPtrOutput
}

type topicCollectiveConstantPtrType TopicCollectiveConstantArgs

func TopicCollectiveConstantPtr(v *TopicCollectiveConstantArgs) TopicCollectiveConstantPtrInput {
	return (*topicCollectiveConstantPtrType)(v)
}

func (*topicCollectiveConstantPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicCollectiveConstant)(nil)).Elem()
}

func (i *topicCollectiveConstantPtrType) ToTopicCollectiveConstantPtrOutput() TopicCollectiveConstantPtrOutput {
	return i.ToTopicCollectiveConstantPtrOutputWithContext(context.Background())
}

func (i *topicCollectiveConstantPtrType) ToTopicCollectiveConstantPtrOutputWithContext(ctx context.Context) TopicCollectiveConstantPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicCollectiveConstantPtrOutput)
}

type TopicCollectiveConstantOutput struct{ *pulumi.OutputState }

func (TopicCollectiveConstantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicCollectiveConstant)(nil)).Elem()
}

func (o TopicCollectiveConstantOutput) ToTopicCollectiveConstantOutput() TopicCollectiveConstantOutput {
	return o
}

func (o TopicCollectiveConstantOutput) ToTopicCollectiveConstantOutputWithContext(ctx context.Context) TopicCollectiveConstantOutput {
	return o
}

func (o TopicCollectiveConstantOutput) ToTopicCollectiveConstantPtrOutput() TopicCollectiveConstantPtrOutput {
	return o.ToTopicCollectiveConstantPtrOutputWithContext(context.Background())
}

func (o TopicCollectiveConstantOutput) ToTopicCollectiveConstantPtrOutputWithContext(ctx context.Context) TopicCollectiveConstantPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicCollectiveConstant) *TopicCollectiveConstant {
		return &v
	}).(TopicCollectiveConstantPtrOutput)
}

// A list of values for the collective constant.
func (o TopicCollectiveConstantOutput) ValueList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TopicCollectiveConstant) []string { return v.ValueList }).(pulumi.StringArrayOutput)
}

type TopicCollectiveConstantPtrOutput struct{ *pulumi.OutputState }

func (TopicCollectiveConstantPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicCollectiveConstant)(nil)).Elem()
}

func (o TopicCollectiveConstantPtrOutput) ToTopicCollectiveConstantPtrOutput() TopicCollectiveConstantPtrOutput {
	return o
}

func (o TopicCollectiveConstantPtrOutput) ToTopicCollectiveConstantPtrOutputWithContext(ctx context.Context) TopicCollectiveConstantPtrOutput {
	return o
}

func (o TopicCollectiveConstantPtrOutput) Elem() TopicCollectiveConstantOutput {
	return o.ApplyT(func(v *TopicCollectiveConstant) TopicCollectiveConstant {
		if v != nil {
			return *v
		}
		var ret TopicCollectiveConstant
		return ret
	}).(TopicCollectiveConstantOutput)
}

// A list of values for the collective constant.
func (o TopicCollectiveConstantPtrOutput) ValueList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TopicCollectiveConstant) []string {
		if v == nil {
			return nil
		}
		return v.ValueList
	}).(pulumi.StringArrayOutput)
}

type TopicColumn struct {
	// The type of aggregation that is performed on the column data when it's queried.
	Aggregation *TopicDefaultAggregation `pulumi:"aggregation"`
	// The list of aggregation types that are allowed for the column. Valid values for this structure are `COUNT` , `DISTINCT_COUNT` , `MIN` , `MAX` , `MEDIAN` , `SUM` , `AVERAGE` , `STDEV` , `STDEVP` , `VAR` , `VARP` , and `PERCENTILE` .
	AllowedAggregations []TopicAuthorSpecifiedAggregation `pulumi:"allowedAggregations"`
	// The other names or aliases for the column cell value.
	CellValueSynonyms []TopicCellValueSynonym `pulumi:"cellValueSynonyms"`
	// The role of the column in the data. Valid values are `DIMENSION` and `MEASURE` .
	ColumnDataRole *TopicColumnDataRole `pulumi:"columnDataRole"`
	// A description of the column and its contents.
	ColumnDescription *string `pulumi:"columnDescription"`
	// A user-friendly name for the column.
	ColumnFriendlyName *string `pulumi:"columnFriendlyName"`
	// The name of the column.
	ColumnName string `pulumi:"columnName"`
	// The other names or aliases for the column.
	ColumnSynonyms []string `pulumi:"columnSynonyms"`
	// The order in which data is displayed for the column when it's used in a comparative context.
	ComparativeOrder *TopicComparativeOrder `pulumi:"comparativeOrder"`
	// The default formatting used for values in the column.
	DefaultFormatting *TopicDefaultFormatting `pulumi:"defaultFormatting"`
	// A Boolean value that indicates whether the column shows in the autocomplete functionality.
	DisableIndexing *bool `pulumi:"disableIndexing"`
	// A Boolean value that indicates whether the column is included in the query results.
	IsIncludedInTopic *bool `pulumi:"isIncludedInTopic"`
	// A Boolean value that indicates whether to aggregate the column data when it's used in a filter context.
	NeverAggregateInFilter *bool `pulumi:"neverAggregateInFilter"`
	// The non additive value for the column.
	NonAdditive *bool `pulumi:"nonAdditive"`
	// The list of aggregation types that are not allowed for the column. Valid values for this structure are `COUNT` , `DISTINCT_COUNT` , `MIN` , `MAX` , `MEDIAN` , `SUM` , `AVERAGE` , `STDEV` , `STDEVP` , `VAR` , `VARP` , and `PERCENTILE` .
	NotAllowedAggregations []TopicAuthorSpecifiedAggregation `pulumi:"notAllowedAggregations"`
	// The semantic type of data contained in the column.
	SemanticType *TopicSemanticType `pulumi:"semanticType"`
	// The level of time precision that is used to aggregate `DateTime` values.
	TimeGranularity *TopicTimeGranularity `pulumi:"timeGranularity"`
}

// TopicColumnInput is an input type that accepts TopicColumnArgs and TopicColumnOutput values.
// You can construct a concrete instance of `TopicColumnInput` via:
//
//	TopicColumnArgs{...}
type TopicColumnInput interface {
	pulumi.Input

	ToTopicColumnOutput() TopicColumnOutput
	ToTopicColumnOutputWithContext(context.Context) TopicColumnOutput
}

type TopicColumnArgs struct {
	// The type of aggregation that is performed on the column data when it's queried.
	Aggregation TopicDefaultAggregationPtrInput `pulumi:"aggregation"`
	// The list of aggregation types that are allowed for the column. Valid values for this structure are `COUNT` , `DISTINCT_COUNT` , `MIN` , `MAX` , `MEDIAN` , `SUM` , `AVERAGE` , `STDEV` , `STDEVP` , `VAR` , `VARP` , and `PERCENTILE` .
	AllowedAggregations TopicAuthorSpecifiedAggregationArrayInput `pulumi:"allowedAggregations"`
	// The other names or aliases for the column cell value.
	CellValueSynonyms TopicCellValueSynonymArrayInput `pulumi:"cellValueSynonyms"`
	// The role of the column in the data. Valid values are `DIMENSION` and `MEASURE` .
	ColumnDataRole TopicColumnDataRolePtrInput `pulumi:"columnDataRole"`
	// A description of the column and its contents.
	ColumnDescription pulumi.StringPtrInput `pulumi:"columnDescription"`
	// A user-friendly name for the column.
	ColumnFriendlyName pulumi.StringPtrInput `pulumi:"columnFriendlyName"`
	// The name of the column.
	ColumnName pulumi.StringInput `pulumi:"columnName"`
	// The other names or aliases for the column.
	ColumnSynonyms pulumi.StringArrayInput `pulumi:"columnSynonyms"`
	// The order in which data is displayed for the column when it's used in a comparative context.
	ComparativeOrder TopicComparativeOrderPtrInput `pulumi:"comparativeOrder"`
	// The default formatting used for values in the column.
	DefaultFormatting TopicDefaultFormattingPtrInput `pulumi:"defaultFormatting"`
	// A Boolean value that indicates whether the column shows in the autocomplete functionality.
	DisableIndexing pulumi.BoolPtrInput `pulumi:"disableIndexing"`
	// A Boolean value that indicates whether the column is included in the query results.
	IsIncludedInTopic pulumi.BoolPtrInput `pulumi:"isIncludedInTopic"`
	// A Boolean value that indicates whether to aggregate the column data when it's used in a filter context.
	NeverAggregateInFilter pulumi.BoolPtrInput `pulumi:"neverAggregateInFilter"`
	// The non additive value for the column.
	NonAdditive pulumi.BoolPtrInput `pulumi:"nonAdditive"`
	// The list of aggregation types that are not allowed for the column. Valid values for this structure are `COUNT` , `DISTINCT_COUNT` , `MIN` , `MAX` , `MEDIAN` , `SUM` , `AVERAGE` , `STDEV` , `STDEVP` , `VAR` , `VARP` , and `PERCENTILE` .
	NotAllowedAggregations TopicAuthorSpecifiedAggregationArrayInput `pulumi:"notAllowedAggregations"`
	// The semantic type of data contained in the column.
	SemanticType TopicSemanticTypePtrInput `pulumi:"semanticType"`
	// The level of time precision that is used to aggregate `DateTime` values.
	TimeGranularity TopicTimeGranularityPtrInput `pulumi:"timeGranularity"`
}

func (TopicColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicColumn)(nil)).Elem()
}

func (i TopicColumnArgs) ToTopicColumnOutput() TopicColumnOutput {
	return i.ToTopicColumnOutputWithContext(context.Background())
}

func (i TopicColumnArgs) ToTopicColumnOutputWithContext(ctx context.Context) TopicColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicColumnOutput)
}

// TopicColumnArrayInput is an input type that accepts TopicColumnArray and TopicColumnArrayOutput values.
// You can construct a concrete instance of `TopicColumnArrayInput` via:
//
//	TopicColumnArray{ TopicColumnArgs{...} }
type TopicColumnArrayInput interface {
	pulumi.Input

	ToTopicColumnArrayOutput() TopicColumnArrayOutput
	ToTopicColumnArrayOutputWithContext(context.Context) TopicColumnArrayOutput
}

type TopicColumnArray []TopicColumnInput

func (TopicColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicColumn)(nil)).Elem()
}

func (i TopicColumnArray) ToTopicColumnArrayOutput() TopicColumnArrayOutput {
	return i.ToTopicColumnArrayOutputWithContext(context.Background())
}

func (i TopicColumnArray) ToTopicColumnArrayOutputWithContext(ctx context.Context) TopicColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicColumnArrayOutput)
}

type TopicColumnOutput struct{ *pulumi.OutputState }

func (TopicColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicColumn)(nil)).Elem()
}

func (o TopicColumnOutput) ToTopicColumnOutput() TopicColumnOutput {
	return o
}

func (o TopicColumnOutput) ToTopicColumnOutputWithContext(ctx context.Context) TopicColumnOutput {
	return o
}

// The type of aggregation that is performed on the column data when it's queried.
func (o TopicColumnOutput) Aggregation() TopicDefaultAggregationPtrOutput {
	return o.ApplyT(func(v TopicColumn) *TopicDefaultAggregation { return v.Aggregation }).(TopicDefaultAggregationPtrOutput)
}

// The list of aggregation types that are allowed for the column. Valid values for this structure are `COUNT` , `DISTINCT_COUNT` , `MIN` , `MAX` , `MEDIAN` , `SUM` , `AVERAGE` , `STDEV` , `STDEVP` , `VAR` , `VARP` , and `PERCENTILE` .
func (o TopicColumnOutput) AllowedAggregations() TopicAuthorSpecifiedAggregationArrayOutput {
	return o.ApplyT(func(v TopicColumn) []TopicAuthorSpecifiedAggregation { return v.AllowedAggregations }).(TopicAuthorSpecifiedAggregationArrayOutput)
}

// The other names or aliases for the column cell value.
func (o TopicColumnOutput) CellValueSynonyms() TopicCellValueSynonymArrayOutput {
	return o.ApplyT(func(v TopicColumn) []TopicCellValueSynonym { return v.CellValueSynonyms }).(TopicCellValueSynonymArrayOutput)
}

// The role of the column in the data. Valid values are `DIMENSION` and `MEASURE` .
func (o TopicColumnOutput) ColumnDataRole() TopicColumnDataRolePtrOutput {
	return o.ApplyT(func(v TopicColumn) *TopicColumnDataRole { return v.ColumnDataRole }).(TopicColumnDataRolePtrOutput)
}

// A description of the column and its contents.
func (o TopicColumnOutput) ColumnDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicColumn) *string { return v.ColumnDescription }).(pulumi.StringPtrOutput)
}

// A user-friendly name for the column.
func (o TopicColumnOutput) ColumnFriendlyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicColumn) *string { return v.ColumnFriendlyName }).(pulumi.StringPtrOutput)
}

// The name of the column.
func (o TopicColumnOutput) ColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v TopicColumn) string { return v.ColumnName }).(pulumi.StringOutput)
}

// The other names or aliases for the column.
func (o TopicColumnOutput) ColumnSynonyms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TopicColumn) []string { return v.ColumnSynonyms }).(pulumi.StringArrayOutput)
}

// The order in which data is displayed for the column when it's used in a comparative context.
func (o TopicColumnOutput) ComparativeOrder() TopicComparativeOrderPtrOutput {
	return o.ApplyT(func(v TopicColumn) *TopicComparativeOrder { return v.ComparativeOrder }).(TopicComparativeOrderPtrOutput)
}

// The default formatting used for values in the column.
func (o TopicColumnOutput) DefaultFormatting() TopicDefaultFormattingPtrOutput {
	return o.ApplyT(func(v TopicColumn) *TopicDefaultFormatting { return v.DefaultFormatting }).(TopicDefaultFormattingPtrOutput)
}

// A Boolean value that indicates whether the column shows in the autocomplete functionality.
func (o TopicColumnOutput) DisableIndexing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TopicColumn) *bool { return v.DisableIndexing }).(pulumi.BoolPtrOutput)
}

// A Boolean value that indicates whether the column is included in the query results.
func (o TopicColumnOutput) IsIncludedInTopic() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TopicColumn) *bool { return v.IsIncludedInTopic }).(pulumi.BoolPtrOutput)
}

// A Boolean value that indicates whether to aggregate the column data when it's used in a filter context.
func (o TopicColumnOutput) NeverAggregateInFilter() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TopicColumn) *bool { return v.NeverAggregateInFilter }).(pulumi.BoolPtrOutput)
}

// The non additive value for the column.
func (o TopicColumnOutput) NonAdditive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TopicColumn) *bool { return v.NonAdditive }).(pulumi.BoolPtrOutput)
}

// The list of aggregation types that are not allowed for the column. Valid values for this structure are `COUNT` , `DISTINCT_COUNT` , `MIN` , `MAX` , `MEDIAN` , `SUM` , `AVERAGE` , `STDEV` , `STDEVP` , `VAR` , `VARP` , and `PERCENTILE` .
func (o TopicColumnOutput) NotAllowedAggregations() TopicAuthorSpecifiedAggregationArrayOutput {
	return o.ApplyT(func(v TopicColumn) []TopicAuthorSpecifiedAggregation { return v.NotAllowedAggregations }).(TopicAuthorSpecifiedAggregationArrayOutput)
}

// The semantic type of data contained in the column.
func (o TopicColumnOutput) SemanticType() TopicSemanticTypePtrOutput {
	return o.ApplyT(func(v TopicColumn) *TopicSemanticType { return v.SemanticType }).(TopicSemanticTypePtrOutput)
}

// The level of time precision that is used to aggregate `DateTime` values.
func (o TopicColumnOutput) TimeGranularity() TopicTimeGranularityPtrOutput {
	return o.ApplyT(func(v TopicColumn) *TopicTimeGranularity { return v.TimeGranularity }).(TopicTimeGranularityPtrOutput)
}

type TopicColumnArrayOutput struct{ *pulumi.OutputState }

func (TopicColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicColumn)(nil)).Elem()
}

func (o TopicColumnArrayOutput) ToTopicColumnArrayOutput() TopicColumnArrayOutput {
	return o
}

func (o TopicColumnArrayOutput) ToTopicColumnArrayOutputWithContext(ctx context.Context) TopicColumnArrayOutput {
	return o
}

func (o TopicColumnArrayOutput) Index(i pulumi.IntInput) TopicColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TopicColumn {
		return vs[0].([]TopicColumn)[vs[1].(int)]
	}).(TopicColumnOutput)
}

type TopicComparativeOrder struct {
	// The list of columns to be used in the ordering.
	SpecifedOrder []string `pulumi:"specifedOrder"`
	// The treat of undefined specified values. Valid values for this structure are `LEAST` and `MOST` .
	TreatUndefinedSpecifiedValues *TopicUndefinedSpecifiedValueType `pulumi:"treatUndefinedSpecifiedValues"`
	// The ordering type for a column. Valid values for this structure are `GREATER_IS_BETTER` , `LESSER_IS_BETTER` and `SPECIFIED` .
	UseOrdering *TopicColumnOrderingType `pulumi:"useOrdering"`
}

// TopicComparativeOrderInput is an input type that accepts TopicComparativeOrderArgs and TopicComparativeOrderOutput values.
// You can construct a concrete instance of `TopicComparativeOrderInput` via:
//
//	TopicComparativeOrderArgs{...}
type TopicComparativeOrderInput interface {
	pulumi.Input

	ToTopicComparativeOrderOutput() TopicComparativeOrderOutput
	ToTopicComparativeOrderOutputWithContext(context.Context) TopicComparativeOrderOutput
}

type TopicComparativeOrderArgs struct {
	// The list of columns to be used in the ordering.
	SpecifedOrder pulumi.StringArrayInput `pulumi:"specifedOrder"`
	// The treat of undefined specified values. Valid values for this structure are `LEAST` and `MOST` .
	TreatUndefinedSpecifiedValues TopicUndefinedSpecifiedValueTypePtrInput `pulumi:"treatUndefinedSpecifiedValues"`
	// The ordering type for a column. Valid values for this structure are `GREATER_IS_BETTER` , `LESSER_IS_BETTER` and `SPECIFIED` .
	UseOrdering TopicColumnOrderingTypePtrInput `pulumi:"useOrdering"`
}

func (TopicComparativeOrderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicComparativeOrder)(nil)).Elem()
}

func (i TopicComparativeOrderArgs) ToTopicComparativeOrderOutput() TopicComparativeOrderOutput {
	return i.ToTopicComparativeOrderOutputWithContext(context.Background())
}

func (i TopicComparativeOrderArgs) ToTopicComparativeOrderOutputWithContext(ctx context.Context) TopicComparativeOrderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicComparativeOrderOutput)
}

func (i TopicComparativeOrderArgs) ToTopicComparativeOrderPtrOutput() TopicComparativeOrderPtrOutput {
	return i.ToTopicComparativeOrderPtrOutputWithContext(context.Background())
}

func (i TopicComparativeOrderArgs) ToTopicComparativeOrderPtrOutputWithContext(ctx context.Context) TopicComparativeOrderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicComparativeOrderOutput).ToTopicComparativeOrderPtrOutputWithContext(ctx)
}

// TopicComparativeOrderPtrInput is an input type that accepts TopicComparativeOrderArgs, TopicComparativeOrderPtr and TopicComparativeOrderPtrOutput values.
// You can construct a concrete instance of `TopicComparativeOrderPtrInput` via:
//
//	        TopicComparativeOrderArgs{...}
//
//	or:
//
//	        nil
type TopicComparativeOrderPtrInput interface {
	pulumi.Input

	ToTopicComparativeOrderPtrOutput() TopicComparativeOrderPtrOutput
	ToTopicComparativeOrderPtrOutputWithContext(context.Context) TopicComparativeOrderPtrOutput
}

type topicComparativeOrderPtrType TopicComparativeOrderArgs

func TopicComparativeOrderPtr(v *TopicComparativeOrderArgs) TopicComparativeOrderPtrInput {
	return (*topicComparativeOrderPtrType)(v)
}

func (*topicComparativeOrderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicComparativeOrder)(nil)).Elem()
}

func (i *topicComparativeOrderPtrType) ToTopicComparativeOrderPtrOutput() TopicComparativeOrderPtrOutput {
	return i.ToTopicComparativeOrderPtrOutputWithContext(context.Background())
}

func (i *topicComparativeOrderPtrType) ToTopicComparativeOrderPtrOutputWithContext(ctx context.Context) TopicComparativeOrderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicComparativeOrderPtrOutput)
}

type TopicComparativeOrderOutput struct{ *pulumi.OutputState }

func (TopicComparativeOrderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicComparativeOrder)(nil)).Elem()
}

func (o TopicComparativeOrderOutput) ToTopicComparativeOrderOutput() TopicComparativeOrderOutput {
	return o
}

func (o TopicComparativeOrderOutput) ToTopicComparativeOrderOutputWithContext(ctx context.Context) TopicComparativeOrderOutput {
	return o
}

func (o TopicComparativeOrderOutput) ToTopicComparativeOrderPtrOutput() TopicComparativeOrderPtrOutput {
	return o.ToTopicComparativeOrderPtrOutputWithContext(context.Background())
}

func (o TopicComparativeOrderOutput) ToTopicComparativeOrderPtrOutputWithContext(ctx context.Context) TopicComparativeOrderPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicComparativeOrder) *TopicComparativeOrder {
		return &v
	}).(TopicComparativeOrderPtrOutput)
}

// The list of columns to be used in the ordering.
func (o TopicComparativeOrderOutput) SpecifedOrder() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TopicComparativeOrder) []string { return v.SpecifedOrder }).(pulumi.StringArrayOutput)
}

// The treat of undefined specified values. Valid values for this structure are `LEAST` and `MOST` .
func (o TopicComparativeOrderOutput) TreatUndefinedSpecifiedValues() TopicUndefinedSpecifiedValueTypePtrOutput {
	return o.ApplyT(func(v TopicComparativeOrder) *TopicUndefinedSpecifiedValueType {
		return v.TreatUndefinedSpecifiedValues
	}).(TopicUndefinedSpecifiedValueTypePtrOutput)
}

// The ordering type for a column. Valid values for this structure are `GREATER_IS_BETTER` , `LESSER_IS_BETTER` and `SPECIFIED` .
func (o TopicComparativeOrderOutput) UseOrdering() TopicColumnOrderingTypePtrOutput {
	return o.ApplyT(func(v TopicComparativeOrder) *TopicColumnOrderingType { return v.UseOrdering }).(TopicColumnOrderingTypePtrOutput)
}

type TopicComparativeOrderPtrOutput struct{ *pulumi.OutputState }

func (TopicComparativeOrderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicComparativeOrder)(nil)).Elem()
}

func (o TopicComparativeOrderPtrOutput) ToTopicComparativeOrderPtrOutput() TopicComparativeOrderPtrOutput {
	return o
}

func (o TopicComparativeOrderPtrOutput) ToTopicComparativeOrderPtrOutputWithContext(ctx context.Context) TopicComparativeOrderPtrOutput {
	return o
}

func (o TopicComparativeOrderPtrOutput) Elem() TopicComparativeOrderOutput {
	return o.ApplyT(func(v *TopicComparativeOrder) TopicComparativeOrder {
		if v != nil {
			return *v
		}
		var ret TopicComparativeOrder
		return ret
	}).(TopicComparativeOrderOutput)
}

// The list of columns to be used in the ordering.
func (o TopicComparativeOrderPtrOutput) SpecifedOrder() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TopicComparativeOrder) []string {
		if v == nil {
			return nil
		}
		return v.SpecifedOrder
	}).(pulumi.StringArrayOutput)
}

// The treat of undefined specified values. Valid values for this structure are `LEAST` and `MOST` .
func (o TopicComparativeOrderPtrOutput) TreatUndefinedSpecifiedValues() TopicUndefinedSpecifiedValueTypePtrOutput {
	return o.ApplyT(func(v *TopicComparativeOrder) *TopicUndefinedSpecifiedValueType {
		if v == nil {
			return nil
		}
		return v.TreatUndefinedSpecifiedValues
	}).(TopicUndefinedSpecifiedValueTypePtrOutput)
}

// The ordering type for a column. Valid values for this structure are `GREATER_IS_BETTER` , `LESSER_IS_BETTER` and `SPECIFIED` .
func (o TopicComparativeOrderPtrOutput) UseOrdering() TopicColumnOrderingTypePtrOutput {
	return o.ApplyT(func(v *TopicComparativeOrder) *TopicColumnOrderingType {
		if v == nil {
			return nil
		}
		return v.UseOrdering
	}).(TopicColumnOrderingTypePtrOutput)
}

// Model for configuration of a Topic
type TopicConfigOptions struct {
	// Enables Amazon Q Business Insights for a `Topic` .
	QBusinessInsightsEnabled *bool `pulumi:"qBusinessInsightsEnabled"`
}

// TopicConfigOptionsInput is an input type that accepts TopicConfigOptionsArgs and TopicConfigOptionsOutput values.
// You can construct a concrete instance of `TopicConfigOptionsInput` via:
//
//	TopicConfigOptionsArgs{...}
type TopicConfigOptionsInput interface {
	pulumi.Input

	ToTopicConfigOptionsOutput() TopicConfigOptionsOutput
	ToTopicConfigOptionsOutputWithContext(context.Context) TopicConfigOptionsOutput
}

// Model for configuration of a Topic
type TopicConfigOptionsArgs struct {
	// Enables Amazon Q Business Insights for a `Topic` .
	QBusinessInsightsEnabled pulumi.BoolPtrInput `pulumi:"qBusinessInsightsEnabled"`
}

func (TopicConfigOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicConfigOptions)(nil)).Elem()
}

func (i TopicConfigOptionsArgs) ToTopicConfigOptionsOutput() TopicConfigOptionsOutput {
	return i.ToTopicConfigOptionsOutputWithContext(context.Background())
}

func (i TopicConfigOptionsArgs) ToTopicConfigOptionsOutputWithContext(ctx context.Context) TopicConfigOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicConfigOptionsOutput)
}

func (i TopicConfigOptionsArgs) ToTopicConfigOptionsPtrOutput() TopicConfigOptionsPtrOutput {
	return i.ToTopicConfigOptionsPtrOutputWithContext(context.Background())
}

func (i TopicConfigOptionsArgs) ToTopicConfigOptionsPtrOutputWithContext(ctx context.Context) TopicConfigOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicConfigOptionsOutput).ToTopicConfigOptionsPtrOutputWithContext(ctx)
}

// TopicConfigOptionsPtrInput is an input type that accepts TopicConfigOptionsArgs, TopicConfigOptionsPtr and TopicConfigOptionsPtrOutput values.
// You can construct a concrete instance of `TopicConfigOptionsPtrInput` via:
//
//	        TopicConfigOptionsArgs{...}
//
//	or:
//
//	        nil
type TopicConfigOptionsPtrInput interface {
	pulumi.Input

	ToTopicConfigOptionsPtrOutput() TopicConfigOptionsPtrOutput
	ToTopicConfigOptionsPtrOutputWithContext(context.Context) TopicConfigOptionsPtrOutput
}

type topicConfigOptionsPtrType TopicConfigOptionsArgs

func TopicConfigOptionsPtr(v *TopicConfigOptionsArgs) TopicConfigOptionsPtrInput {
	return (*topicConfigOptionsPtrType)(v)
}

func (*topicConfigOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicConfigOptions)(nil)).Elem()
}

func (i *topicConfigOptionsPtrType) ToTopicConfigOptionsPtrOutput() TopicConfigOptionsPtrOutput {
	return i.ToTopicConfigOptionsPtrOutputWithContext(context.Background())
}

func (i *topicConfigOptionsPtrType) ToTopicConfigOptionsPtrOutputWithContext(ctx context.Context) TopicConfigOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicConfigOptionsPtrOutput)
}

// Model for configuration of a Topic
type TopicConfigOptionsOutput struct{ *pulumi.OutputState }

func (TopicConfigOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicConfigOptions)(nil)).Elem()
}

func (o TopicConfigOptionsOutput) ToTopicConfigOptionsOutput() TopicConfigOptionsOutput {
	return o
}

func (o TopicConfigOptionsOutput) ToTopicConfigOptionsOutputWithContext(ctx context.Context) TopicConfigOptionsOutput {
	return o
}

func (o TopicConfigOptionsOutput) ToTopicConfigOptionsPtrOutput() TopicConfigOptionsPtrOutput {
	return o.ToTopicConfigOptionsPtrOutputWithContext(context.Background())
}

func (o TopicConfigOptionsOutput) ToTopicConfigOptionsPtrOutputWithContext(ctx context.Context) TopicConfigOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicConfigOptions) *TopicConfigOptions {
		return &v
	}).(TopicConfigOptionsPtrOutput)
}

// Enables Amazon Q Business Insights for a `Topic` .
func (o TopicConfigOptionsOutput) QBusinessInsightsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TopicConfigOptions) *bool { return v.QBusinessInsightsEnabled }).(pulumi.BoolPtrOutput)
}

type TopicConfigOptionsPtrOutput struct{ *pulumi.OutputState }

func (TopicConfigOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicConfigOptions)(nil)).Elem()
}

func (o TopicConfigOptionsPtrOutput) ToTopicConfigOptionsPtrOutput() TopicConfigOptionsPtrOutput {
	return o
}

func (o TopicConfigOptionsPtrOutput) ToTopicConfigOptionsPtrOutputWithContext(ctx context.Context) TopicConfigOptionsPtrOutput {
	return o
}

func (o TopicConfigOptionsPtrOutput) Elem() TopicConfigOptionsOutput {
	return o.ApplyT(func(v *TopicConfigOptions) TopicConfigOptions {
		if v != nil {
			return *v
		}
		var ret TopicConfigOptions
		return ret
	}).(TopicConfigOptionsOutput)
}

// Enables Amazon Q Business Insights for a `Topic` .
func (o TopicConfigOptionsPtrOutput) QBusinessInsightsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TopicConfigOptions) *bool {
		if v == nil {
			return nil
		}
		return v.QBusinessInsightsEnabled
	}).(pulumi.BoolPtrOutput)
}

type TopicDataAggregation struct {
	// The level of time precision that is used to aggregate `DateTime` values.
	DatasetRowDateGranularity *TopicTimeGranularity `pulumi:"datasetRowDateGranularity"`
	// The column name for the default date.
	DefaultDateColumnName *string `pulumi:"defaultDateColumnName"`
}

// TopicDataAggregationInput is an input type that accepts TopicDataAggregationArgs and TopicDataAggregationOutput values.
// You can construct a concrete instance of `TopicDataAggregationInput` via:
//
//	TopicDataAggregationArgs{...}
type TopicDataAggregationInput interface {
	pulumi.Input

	ToTopicDataAggregationOutput() TopicDataAggregationOutput
	ToTopicDataAggregationOutputWithContext(context.Context) TopicDataAggregationOutput
}

type TopicDataAggregationArgs struct {
	// The level of time precision that is used to aggregate `DateTime` values.
	DatasetRowDateGranularity TopicTimeGranularityPtrInput `pulumi:"datasetRowDateGranularity"`
	// The column name for the default date.
	DefaultDateColumnName pulumi.StringPtrInput `pulumi:"defaultDateColumnName"`
}

func (TopicDataAggregationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicDataAggregation)(nil)).Elem()
}

func (i TopicDataAggregationArgs) ToTopicDataAggregationOutput() TopicDataAggregationOutput {
	return i.ToTopicDataAggregationOutputWithContext(context.Background())
}

func (i TopicDataAggregationArgs) ToTopicDataAggregationOutputWithContext(ctx context.Context) TopicDataAggregationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicDataAggregationOutput)
}

func (i TopicDataAggregationArgs) ToTopicDataAggregationPtrOutput() TopicDataAggregationPtrOutput {
	return i.ToTopicDataAggregationPtrOutputWithContext(context.Background())
}

func (i TopicDataAggregationArgs) ToTopicDataAggregationPtrOutputWithContext(ctx context.Context) TopicDataAggregationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicDataAggregationOutput).ToTopicDataAggregationPtrOutputWithContext(ctx)
}

// TopicDataAggregationPtrInput is an input type that accepts TopicDataAggregationArgs, TopicDataAggregationPtr and TopicDataAggregationPtrOutput values.
// You can construct a concrete instance of `TopicDataAggregationPtrInput` via:
//
//	        TopicDataAggregationArgs{...}
//
//	or:
//
//	        nil
type TopicDataAggregationPtrInput interface {
	pulumi.Input

	ToTopicDataAggregationPtrOutput() TopicDataAggregationPtrOutput
	ToTopicDataAggregationPtrOutputWithContext(context.Context) TopicDataAggregationPtrOutput
}

type topicDataAggregationPtrType TopicDataAggregationArgs

func TopicDataAggregationPtr(v *TopicDataAggregationArgs) TopicDataAggregationPtrInput {
	return (*topicDataAggregationPtrType)(v)
}

func (*topicDataAggregationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicDataAggregation)(nil)).Elem()
}

func (i *topicDataAggregationPtrType) ToTopicDataAggregationPtrOutput() TopicDataAggregationPtrOutput {
	return i.ToTopicDataAggregationPtrOutputWithContext(context.Background())
}

func (i *topicDataAggregationPtrType) ToTopicDataAggregationPtrOutputWithContext(ctx context.Context) TopicDataAggregationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicDataAggregationPtrOutput)
}

type TopicDataAggregationOutput struct{ *pulumi.OutputState }

func (TopicDataAggregationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicDataAggregation)(nil)).Elem()
}

func (o TopicDataAggregationOutput) ToTopicDataAggregationOutput() TopicDataAggregationOutput {
	return o
}

func (o TopicDataAggregationOutput) ToTopicDataAggregationOutputWithContext(ctx context.Context) TopicDataAggregationOutput {
	return o
}

func (o TopicDataAggregationOutput) ToTopicDataAggregationPtrOutput() TopicDataAggregationPtrOutput {
	return o.ToTopicDataAggregationPtrOutputWithContext(context.Background())
}

func (o TopicDataAggregationOutput) ToTopicDataAggregationPtrOutputWithContext(ctx context.Context) TopicDataAggregationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicDataAggregation) *TopicDataAggregation {
		return &v
	}).(TopicDataAggregationPtrOutput)
}

// The level of time precision that is used to aggregate `DateTime` values.
func (o TopicDataAggregationOutput) DatasetRowDateGranularity() TopicTimeGranularityPtrOutput {
	return o.ApplyT(func(v TopicDataAggregation) *TopicTimeGranularity { return v.DatasetRowDateGranularity }).(TopicTimeGranularityPtrOutput)
}

// The column name for the default date.
func (o TopicDataAggregationOutput) DefaultDateColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicDataAggregation) *string { return v.DefaultDateColumnName }).(pulumi.StringPtrOutput)
}

type TopicDataAggregationPtrOutput struct{ *pulumi.OutputState }

func (TopicDataAggregationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicDataAggregation)(nil)).Elem()
}

func (o TopicDataAggregationPtrOutput) ToTopicDataAggregationPtrOutput() TopicDataAggregationPtrOutput {
	return o
}

func (o TopicDataAggregationPtrOutput) ToTopicDataAggregationPtrOutputWithContext(ctx context.Context) TopicDataAggregationPtrOutput {
	return o
}

func (o TopicDataAggregationPtrOutput) Elem() TopicDataAggregationOutput {
	return o.ApplyT(func(v *TopicDataAggregation) TopicDataAggregation {
		if v != nil {
			return *v
		}
		var ret TopicDataAggregation
		return ret
	}).(TopicDataAggregationOutput)
}

// The level of time precision that is used to aggregate `DateTime` values.
func (o TopicDataAggregationPtrOutput) DatasetRowDateGranularity() TopicTimeGranularityPtrOutput {
	return o.ApplyT(func(v *TopicDataAggregation) *TopicTimeGranularity {
		if v == nil {
			return nil
		}
		return v.DatasetRowDateGranularity
	}).(TopicTimeGranularityPtrOutput)
}

// The column name for the default date.
func (o TopicDataAggregationPtrOutput) DefaultDateColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicDataAggregation) *string {
		if v == nil {
			return nil
		}
		return v.DefaultDateColumnName
	}).(pulumi.StringPtrOutput)
}

type TopicDatasetMetadata struct {
	// The list of calculated field definitions.
	CalculatedFields []TopicCalculatedField `pulumi:"calculatedFields"`
	// The list of column definitions.
	Columns []TopicColumn `pulumi:"columns"`
	// The definition of a data aggregation.
	DataAggregation *TopicDataAggregation `pulumi:"dataAggregation"`
	// The Amazon Resource Name (ARN) of the dataset.
	DatasetArn string `pulumi:"datasetArn"`
	// The description of the dataset.
	DatasetDescription *string `pulumi:"datasetDescription"`
	// The name of the dataset.
	DatasetName *string `pulumi:"datasetName"`
	// The list of filter definitions.
	Filters []TopicFilter `pulumi:"filters"`
	// The list of named entities definitions.
	NamedEntities []TopicNamedEntity `pulumi:"namedEntities"`
}

// TopicDatasetMetadataInput is an input type that accepts TopicDatasetMetadataArgs and TopicDatasetMetadataOutput values.
// You can construct a concrete instance of `TopicDatasetMetadataInput` via:
//
//	TopicDatasetMetadataArgs{...}
type TopicDatasetMetadataInput interface {
	pulumi.Input

	ToTopicDatasetMetadataOutput() TopicDatasetMetadataOutput
	ToTopicDatasetMetadataOutputWithContext(context.Context) TopicDatasetMetadataOutput
}

type TopicDatasetMetadataArgs struct {
	// The list of calculated field definitions.
	CalculatedFields TopicCalculatedFieldArrayInput `pulumi:"calculatedFields"`
	// The list of column definitions.
	Columns TopicColumnArrayInput `pulumi:"columns"`
	// The definition of a data aggregation.
	DataAggregation TopicDataAggregationPtrInput `pulumi:"dataAggregation"`
	// The Amazon Resource Name (ARN) of the dataset.
	DatasetArn pulumi.StringInput `pulumi:"datasetArn"`
	// The description of the dataset.
	DatasetDescription pulumi.StringPtrInput `pulumi:"datasetDescription"`
	// The name of the dataset.
	DatasetName pulumi.StringPtrInput `pulumi:"datasetName"`
	// The list of filter definitions.
	Filters TopicFilterArrayInput `pulumi:"filters"`
	// The list of named entities definitions.
	NamedEntities TopicNamedEntityArrayInput `pulumi:"namedEntities"`
}

func (TopicDatasetMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicDatasetMetadata)(nil)).Elem()
}

func (i TopicDatasetMetadataArgs) ToTopicDatasetMetadataOutput() TopicDatasetMetadataOutput {
	return i.ToTopicDatasetMetadataOutputWithContext(context.Background())
}

func (i TopicDatasetMetadataArgs) ToTopicDatasetMetadataOutputWithContext(ctx context.Context) TopicDatasetMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicDatasetMetadataOutput)
}

// TopicDatasetMetadataArrayInput is an input type that accepts TopicDatasetMetadataArray and TopicDatasetMetadataArrayOutput values.
// You can construct a concrete instance of `TopicDatasetMetadataArrayInput` via:
//
//	TopicDatasetMetadataArray{ TopicDatasetMetadataArgs{...} }
type TopicDatasetMetadataArrayInput interface {
	pulumi.Input

	ToTopicDatasetMetadataArrayOutput() TopicDatasetMetadataArrayOutput
	ToTopicDatasetMetadataArrayOutputWithContext(context.Context) TopicDatasetMetadataArrayOutput
}

type TopicDatasetMetadataArray []TopicDatasetMetadataInput

func (TopicDatasetMetadataArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicDatasetMetadata)(nil)).Elem()
}

func (i TopicDatasetMetadataArray) ToTopicDatasetMetadataArrayOutput() TopicDatasetMetadataArrayOutput {
	return i.ToTopicDatasetMetadataArrayOutputWithContext(context.Background())
}

func (i TopicDatasetMetadataArray) ToTopicDatasetMetadataArrayOutputWithContext(ctx context.Context) TopicDatasetMetadataArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicDatasetMetadataArrayOutput)
}

type TopicDatasetMetadataOutput struct{ *pulumi.OutputState }

func (TopicDatasetMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicDatasetMetadata)(nil)).Elem()
}

func (o TopicDatasetMetadataOutput) ToTopicDatasetMetadataOutput() TopicDatasetMetadataOutput {
	return o
}

func (o TopicDatasetMetadataOutput) ToTopicDatasetMetadataOutputWithContext(ctx context.Context) TopicDatasetMetadataOutput {
	return o
}

// The list of calculated field definitions.
func (o TopicDatasetMetadataOutput) CalculatedFields() TopicCalculatedFieldArrayOutput {
	return o.ApplyT(func(v TopicDatasetMetadata) []TopicCalculatedField { return v.CalculatedFields }).(TopicCalculatedFieldArrayOutput)
}

// The list of column definitions.
func (o TopicDatasetMetadataOutput) Columns() TopicColumnArrayOutput {
	return o.ApplyT(func(v TopicDatasetMetadata) []TopicColumn { return v.Columns }).(TopicColumnArrayOutput)
}

// The definition of a data aggregation.
func (o TopicDatasetMetadataOutput) DataAggregation() TopicDataAggregationPtrOutput {
	return o.ApplyT(func(v TopicDatasetMetadata) *TopicDataAggregation { return v.DataAggregation }).(TopicDataAggregationPtrOutput)
}

// The Amazon Resource Name (ARN) of the dataset.
func (o TopicDatasetMetadataOutput) DatasetArn() pulumi.StringOutput {
	return o.ApplyT(func(v TopicDatasetMetadata) string { return v.DatasetArn }).(pulumi.StringOutput)
}

// The description of the dataset.
func (o TopicDatasetMetadataOutput) DatasetDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicDatasetMetadata) *string { return v.DatasetDescription }).(pulumi.StringPtrOutput)
}

// The name of the dataset.
func (o TopicDatasetMetadataOutput) DatasetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicDatasetMetadata) *string { return v.DatasetName }).(pulumi.StringPtrOutput)
}

// The list of filter definitions.
func (o TopicDatasetMetadataOutput) Filters() TopicFilterArrayOutput {
	return o.ApplyT(func(v TopicDatasetMetadata) []TopicFilter { return v.Filters }).(TopicFilterArrayOutput)
}

// The list of named entities definitions.
func (o TopicDatasetMetadataOutput) NamedEntities() TopicNamedEntityArrayOutput {
	return o.ApplyT(func(v TopicDatasetMetadata) []TopicNamedEntity { return v.NamedEntities }).(TopicNamedEntityArrayOutput)
}

type TopicDatasetMetadataArrayOutput struct{ *pulumi.OutputState }

func (TopicDatasetMetadataArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicDatasetMetadata)(nil)).Elem()
}

func (o TopicDatasetMetadataArrayOutput) ToTopicDatasetMetadataArrayOutput() TopicDatasetMetadataArrayOutput {
	return o
}

func (o TopicDatasetMetadataArrayOutput) ToTopicDatasetMetadataArrayOutputWithContext(ctx context.Context) TopicDatasetMetadataArrayOutput {
	return o
}

func (o TopicDatasetMetadataArrayOutput) Index(i pulumi.IntInput) TopicDatasetMetadataOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TopicDatasetMetadata {
		return vs[0].([]TopicDatasetMetadata)[vs[1].(int)]
	}).(TopicDatasetMetadataOutput)
}

type TopicDateRangeFilter struct {
	// The constant used in a date range filter.
	Constant *TopicRangeFilterConstant `pulumi:"constant"`
	// A Boolean value that indicates whether the date range filter should include the boundary values. If set to true, the filter includes the start and end dates. If set to false, the filter excludes them.
	Inclusive *bool `pulumi:"inclusive"`
}

// TopicDateRangeFilterInput is an input type that accepts TopicDateRangeFilterArgs and TopicDateRangeFilterOutput values.
// You can construct a concrete instance of `TopicDateRangeFilterInput` via:
//
//	TopicDateRangeFilterArgs{...}
type TopicDateRangeFilterInput interface {
	pulumi.Input

	ToTopicDateRangeFilterOutput() TopicDateRangeFilterOutput
	ToTopicDateRangeFilterOutputWithContext(context.Context) TopicDateRangeFilterOutput
}

type TopicDateRangeFilterArgs struct {
	// The constant used in a date range filter.
	Constant TopicRangeFilterConstantPtrInput `pulumi:"constant"`
	// A Boolean value that indicates whether the date range filter should include the boundary values. If set to true, the filter includes the start and end dates. If set to false, the filter excludes them.
	Inclusive pulumi.BoolPtrInput `pulumi:"inclusive"`
}

func (TopicDateRangeFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicDateRangeFilter)(nil)).Elem()
}

func (i TopicDateRangeFilterArgs) ToTopicDateRangeFilterOutput() TopicDateRangeFilterOutput {
	return i.ToTopicDateRangeFilterOutputWithContext(context.Background())
}

func (i TopicDateRangeFilterArgs) ToTopicDateRangeFilterOutputWithContext(ctx context.Context) TopicDateRangeFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicDateRangeFilterOutput)
}

func (i TopicDateRangeFilterArgs) ToTopicDateRangeFilterPtrOutput() TopicDateRangeFilterPtrOutput {
	return i.ToTopicDateRangeFilterPtrOutputWithContext(context.Background())
}

func (i TopicDateRangeFilterArgs) ToTopicDateRangeFilterPtrOutputWithContext(ctx context.Context) TopicDateRangeFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicDateRangeFilterOutput).ToTopicDateRangeFilterPtrOutputWithContext(ctx)
}

// TopicDateRangeFilterPtrInput is an input type that accepts TopicDateRangeFilterArgs, TopicDateRangeFilterPtr and TopicDateRangeFilterPtrOutput values.
// You can construct a concrete instance of `TopicDateRangeFilterPtrInput` via:
//
//	        TopicDateRangeFilterArgs{...}
//
//	or:
//
//	        nil
type TopicDateRangeFilterPtrInput interface {
	pulumi.Input

	ToTopicDateRangeFilterPtrOutput() TopicDateRangeFilterPtrOutput
	ToTopicDateRangeFilterPtrOutputWithContext(context.Context) TopicDateRangeFilterPtrOutput
}

type topicDateRangeFilterPtrType TopicDateRangeFilterArgs

func TopicDateRangeFilterPtr(v *TopicDateRangeFilterArgs) TopicDateRangeFilterPtrInput {
	return (*topicDateRangeFilterPtrType)(v)
}

func (*topicDateRangeFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicDateRangeFilter)(nil)).Elem()
}

func (i *topicDateRangeFilterPtrType) ToTopicDateRangeFilterPtrOutput() TopicDateRangeFilterPtrOutput {
	return i.ToTopicDateRangeFilterPtrOutputWithContext(context.Background())
}

func (i *topicDateRangeFilterPtrType) ToTopicDateRangeFilterPtrOutputWithContext(ctx context.Context) TopicDateRangeFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicDateRangeFilterPtrOutput)
}

type TopicDateRangeFilterOutput struct{ *pulumi.OutputState }

func (TopicDateRangeFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicDateRangeFilter)(nil)).Elem()
}

func (o TopicDateRangeFilterOutput) ToTopicDateRangeFilterOutput() TopicDateRangeFilterOutput {
	return o
}

func (o TopicDateRangeFilterOutput) ToTopicDateRangeFilterOutputWithContext(ctx context.Context) TopicDateRangeFilterOutput {
	return o
}

func (o TopicDateRangeFilterOutput) ToTopicDateRangeFilterPtrOutput() TopicDateRangeFilterPtrOutput {
	return o.ToTopicDateRangeFilterPtrOutputWithContext(context.Background())
}

func (o TopicDateRangeFilterOutput) ToTopicDateRangeFilterPtrOutputWithContext(ctx context.Context) TopicDateRangeFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicDateRangeFilter) *TopicDateRangeFilter {
		return &v
	}).(TopicDateRangeFilterPtrOutput)
}

// The constant used in a date range filter.
func (o TopicDateRangeFilterOutput) Constant() TopicRangeFilterConstantPtrOutput {
	return o.ApplyT(func(v TopicDateRangeFilter) *TopicRangeFilterConstant { return v.Constant }).(TopicRangeFilterConstantPtrOutput)
}

// A Boolean value that indicates whether the date range filter should include the boundary values. If set to true, the filter includes the start and end dates. If set to false, the filter excludes them.
func (o TopicDateRangeFilterOutput) Inclusive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TopicDateRangeFilter) *bool { return v.Inclusive }).(pulumi.BoolPtrOutput)
}

type TopicDateRangeFilterPtrOutput struct{ *pulumi.OutputState }

func (TopicDateRangeFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicDateRangeFilter)(nil)).Elem()
}

func (o TopicDateRangeFilterPtrOutput) ToTopicDateRangeFilterPtrOutput() TopicDateRangeFilterPtrOutput {
	return o
}

func (o TopicDateRangeFilterPtrOutput) ToTopicDateRangeFilterPtrOutputWithContext(ctx context.Context) TopicDateRangeFilterPtrOutput {
	return o
}

func (o TopicDateRangeFilterPtrOutput) Elem() TopicDateRangeFilterOutput {
	return o.ApplyT(func(v *TopicDateRangeFilter) TopicDateRangeFilter {
		if v != nil {
			return *v
		}
		var ret TopicDateRangeFilter
		return ret
	}).(TopicDateRangeFilterOutput)
}

// The constant used in a date range filter.
func (o TopicDateRangeFilterPtrOutput) Constant() TopicRangeFilterConstantPtrOutput {
	return o.ApplyT(func(v *TopicDateRangeFilter) *TopicRangeFilterConstant {
		if v == nil {
			return nil
		}
		return v.Constant
	}).(TopicRangeFilterConstantPtrOutput)
}

// A Boolean value that indicates whether the date range filter should include the boundary values. If set to true, the filter includes the start and end dates. If set to false, the filter excludes them.
func (o TopicDateRangeFilterPtrOutput) Inclusive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TopicDateRangeFilter) *bool {
		if v == nil {
			return nil
		}
		return v.Inclusive
	}).(pulumi.BoolPtrOutput)
}

type TopicDefaultFormatting struct {
	// The display format. Valid values for this structure are `AUTO` , `PERCENT` , `CURRENCY` , `NUMBER` , `DATE` , and `STRING` .
	DisplayFormat *TopicDisplayFormat `pulumi:"displayFormat"`
	// The additional options for display formatting.
	DisplayFormatOptions *TopicDisplayFormatOptions `pulumi:"displayFormatOptions"`
}

// TopicDefaultFormattingInput is an input type that accepts TopicDefaultFormattingArgs and TopicDefaultFormattingOutput values.
// You can construct a concrete instance of `TopicDefaultFormattingInput` via:
//
//	TopicDefaultFormattingArgs{...}
type TopicDefaultFormattingInput interface {
	pulumi.Input

	ToTopicDefaultFormattingOutput() TopicDefaultFormattingOutput
	ToTopicDefaultFormattingOutputWithContext(context.Context) TopicDefaultFormattingOutput
}

type TopicDefaultFormattingArgs struct {
	// The display format. Valid values for this structure are `AUTO` , `PERCENT` , `CURRENCY` , `NUMBER` , `DATE` , and `STRING` .
	DisplayFormat TopicDisplayFormatPtrInput `pulumi:"displayFormat"`
	// The additional options for display formatting.
	DisplayFormatOptions TopicDisplayFormatOptionsPtrInput `pulumi:"displayFormatOptions"`
}

func (TopicDefaultFormattingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicDefaultFormatting)(nil)).Elem()
}

func (i TopicDefaultFormattingArgs) ToTopicDefaultFormattingOutput() TopicDefaultFormattingOutput {
	return i.ToTopicDefaultFormattingOutputWithContext(context.Background())
}

func (i TopicDefaultFormattingArgs) ToTopicDefaultFormattingOutputWithContext(ctx context.Context) TopicDefaultFormattingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicDefaultFormattingOutput)
}

func (i TopicDefaultFormattingArgs) ToTopicDefaultFormattingPtrOutput() TopicDefaultFormattingPtrOutput {
	return i.ToTopicDefaultFormattingPtrOutputWithContext(context.Background())
}

func (i TopicDefaultFormattingArgs) ToTopicDefaultFormattingPtrOutputWithContext(ctx context.Context) TopicDefaultFormattingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicDefaultFormattingOutput).ToTopicDefaultFormattingPtrOutputWithContext(ctx)
}

// TopicDefaultFormattingPtrInput is an input type that accepts TopicDefaultFormattingArgs, TopicDefaultFormattingPtr and TopicDefaultFormattingPtrOutput values.
// You can construct a concrete instance of `TopicDefaultFormattingPtrInput` via:
//
//	        TopicDefaultFormattingArgs{...}
//
//	or:
//
//	        nil
type TopicDefaultFormattingPtrInput interface {
	pulumi.Input

	ToTopicDefaultFormattingPtrOutput() TopicDefaultFormattingPtrOutput
	ToTopicDefaultFormattingPtrOutputWithContext(context.Context) TopicDefaultFormattingPtrOutput
}

type topicDefaultFormattingPtrType TopicDefaultFormattingArgs

func TopicDefaultFormattingPtr(v *TopicDefaultFormattingArgs) TopicDefaultFormattingPtrInput {
	return (*topicDefaultFormattingPtrType)(v)
}

func (*topicDefaultFormattingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicDefaultFormatting)(nil)).Elem()
}

func (i *topicDefaultFormattingPtrType) ToTopicDefaultFormattingPtrOutput() TopicDefaultFormattingPtrOutput {
	return i.ToTopicDefaultFormattingPtrOutputWithContext(context.Background())
}

func (i *topicDefaultFormattingPtrType) ToTopicDefaultFormattingPtrOutputWithContext(ctx context.Context) TopicDefaultFormattingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicDefaultFormattingPtrOutput)
}

type TopicDefaultFormattingOutput struct{ *pulumi.OutputState }

func (TopicDefaultFormattingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicDefaultFormatting)(nil)).Elem()
}

func (o TopicDefaultFormattingOutput) ToTopicDefaultFormattingOutput() TopicDefaultFormattingOutput {
	return o
}

func (o TopicDefaultFormattingOutput) ToTopicDefaultFormattingOutputWithContext(ctx context.Context) TopicDefaultFormattingOutput {
	return o
}

func (o TopicDefaultFormattingOutput) ToTopicDefaultFormattingPtrOutput() TopicDefaultFormattingPtrOutput {
	return o.ToTopicDefaultFormattingPtrOutputWithContext(context.Background())
}

func (o TopicDefaultFormattingOutput) ToTopicDefaultFormattingPtrOutputWithContext(ctx context.Context) TopicDefaultFormattingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicDefaultFormatting) *TopicDefaultFormatting {
		return &v
	}).(TopicDefaultFormattingPtrOutput)
}

// The display format. Valid values for this structure are `AUTO` , `PERCENT` , `CURRENCY` , `NUMBER` , `DATE` , and `STRING` .
func (o TopicDefaultFormattingOutput) DisplayFormat() TopicDisplayFormatPtrOutput {
	return o.ApplyT(func(v TopicDefaultFormatting) *TopicDisplayFormat { return v.DisplayFormat }).(TopicDisplayFormatPtrOutput)
}

// The additional options for display formatting.
func (o TopicDefaultFormattingOutput) DisplayFormatOptions() TopicDisplayFormatOptionsPtrOutput {
	return o.ApplyT(func(v TopicDefaultFormatting) *TopicDisplayFormatOptions { return v.DisplayFormatOptions }).(TopicDisplayFormatOptionsPtrOutput)
}

type TopicDefaultFormattingPtrOutput struct{ *pulumi.OutputState }

func (TopicDefaultFormattingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicDefaultFormatting)(nil)).Elem()
}

func (o TopicDefaultFormattingPtrOutput) ToTopicDefaultFormattingPtrOutput() TopicDefaultFormattingPtrOutput {
	return o
}

func (o TopicDefaultFormattingPtrOutput) ToTopicDefaultFormattingPtrOutputWithContext(ctx context.Context) TopicDefaultFormattingPtrOutput {
	return o
}

func (o TopicDefaultFormattingPtrOutput) Elem() TopicDefaultFormattingOutput {
	return o.ApplyT(func(v *TopicDefaultFormatting) TopicDefaultFormatting {
		if v != nil {
			return *v
		}
		var ret TopicDefaultFormatting
		return ret
	}).(TopicDefaultFormattingOutput)
}

// The display format. Valid values for this structure are `AUTO` , `PERCENT` , `CURRENCY` , `NUMBER` , `DATE` , and `STRING` .
func (o TopicDefaultFormattingPtrOutput) DisplayFormat() TopicDisplayFormatPtrOutput {
	return o.ApplyT(func(v *TopicDefaultFormatting) *TopicDisplayFormat {
		if v == nil {
			return nil
		}
		return v.DisplayFormat
	}).(TopicDisplayFormatPtrOutput)
}

// The additional options for display formatting.
func (o TopicDefaultFormattingPtrOutput) DisplayFormatOptions() TopicDisplayFormatOptionsPtrOutput {
	return o.ApplyT(func(v *TopicDefaultFormatting) *TopicDisplayFormatOptions {
		if v == nil {
			return nil
		}
		return v.DisplayFormatOptions
	}).(TopicDisplayFormatOptionsPtrOutput)
}

type TopicDisplayFormatOptions struct {
	// Determines the blank cell format.
	BlankCellFormat *string `pulumi:"blankCellFormat"`
	// The currency symbol, such as `USD` .
	CurrencySymbol *string `pulumi:"currencySymbol"`
	// Determines the `DateTime` format.
	DateFormat *string `pulumi:"dateFormat"`
	// Determines the decimal separator.
	DecimalSeparator *TopicNumericSeparatorSymbol `pulumi:"decimalSeparator"`
	// Determines the number of fraction digits.
	FractionDigits *float64 `pulumi:"fractionDigits"`
	// Determines the grouping separator.
	GroupingSeparator *string `pulumi:"groupingSeparator"`
	// The negative format.
	NegativeFormat *TopicNegativeFormat `pulumi:"negativeFormat"`
	// The prefix value for a display format.
	Prefix *string `pulumi:"prefix"`
	// The suffix value for a display format.
	Suffix *string `pulumi:"suffix"`
	// The unit scaler. Valid values for this structure are: `NONE` , `AUTO` , `THOUSANDS` , `MILLIONS` , `BILLIONS` , and `TRILLIONS` .
	UnitScaler *TopicNumberScale `pulumi:"unitScaler"`
	// A Boolean value that indicates whether to use blank cell format.
	UseBlankCellFormat *bool `pulumi:"useBlankCellFormat"`
	// A Boolean value that indicates whether to use grouping.
	UseGrouping *bool `pulumi:"useGrouping"`
}

// TopicDisplayFormatOptionsInput is an input type that accepts TopicDisplayFormatOptionsArgs and TopicDisplayFormatOptionsOutput values.
// You can construct a concrete instance of `TopicDisplayFormatOptionsInput` via:
//
//	TopicDisplayFormatOptionsArgs{...}
type TopicDisplayFormatOptionsInput interface {
	pulumi.Input

	ToTopicDisplayFormatOptionsOutput() TopicDisplayFormatOptionsOutput
	ToTopicDisplayFormatOptionsOutputWithContext(context.Context) TopicDisplayFormatOptionsOutput
}

type TopicDisplayFormatOptionsArgs struct {
	// Determines the blank cell format.
	BlankCellFormat pulumi.StringPtrInput `pulumi:"blankCellFormat"`
	// The currency symbol, such as `USD` .
	CurrencySymbol pulumi.StringPtrInput `pulumi:"currencySymbol"`
	// Determines the `DateTime` format.
	DateFormat pulumi.StringPtrInput `pulumi:"dateFormat"`
	// Determines the decimal separator.
	DecimalSeparator TopicNumericSeparatorSymbolPtrInput `pulumi:"decimalSeparator"`
	// Determines the number of fraction digits.
	FractionDigits pulumi.Float64PtrInput `pulumi:"fractionDigits"`
	// Determines the grouping separator.
	GroupingSeparator pulumi.StringPtrInput `pulumi:"groupingSeparator"`
	// The negative format.
	NegativeFormat TopicNegativeFormatPtrInput `pulumi:"negativeFormat"`
	// The prefix value for a display format.
	Prefix pulumi.StringPtrInput `pulumi:"prefix"`
	// The suffix value for a display format.
	Suffix pulumi.StringPtrInput `pulumi:"suffix"`
	// The unit scaler. Valid values for this structure are: `NONE` , `AUTO` , `THOUSANDS` , `MILLIONS` , `BILLIONS` , and `TRILLIONS` .
	UnitScaler TopicNumberScalePtrInput `pulumi:"unitScaler"`
	// A Boolean value that indicates whether to use blank cell format.
	UseBlankCellFormat pulumi.BoolPtrInput `pulumi:"useBlankCellFormat"`
	// A Boolean value that indicates whether to use grouping.
	UseGrouping pulumi.BoolPtrInput `pulumi:"useGrouping"`
}

func (TopicDisplayFormatOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicDisplayFormatOptions)(nil)).Elem()
}

func (i TopicDisplayFormatOptionsArgs) ToTopicDisplayFormatOptionsOutput() TopicDisplayFormatOptionsOutput {
	return i.ToTopicDisplayFormatOptionsOutputWithContext(context.Background())
}

func (i TopicDisplayFormatOptionsArgs) ToTopicDisplayFormatOptionsOutputWithContext(ctx context.Context) TopicDisplayFormatOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicDisplayFormatOptionsOutput)
}

func (i TopicDisplayFormatOptionsArgs) ToTopicDisplayFormatOptionsPtrOutput() TopicDisplayFormatOptionsPtrOutput {
	return i.ToTopicDisplayFormatOptionsPtrOutputWithContext(context.Background())
}

func (i TopicDisplayFormatOptionsArgs) ToTopicDisplayFormatOptionsPtrOutputWithContext(ctx context.Context) TopicDisplayFormatOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicDisplayFormatOptionsOutput).ToTopicDisplayFormatOptionsPtrOutputWithContext(ctx)
}

// TopicDisplayFormatOptionsPtrInput is an input type that accepts TopicDisplayFormatOptionsArgs, TopicDisplayFormatOptionsPtr and TopicDisplayFormatOptionsPtrOutput values.
// You can construct a concrete instance of `TopicDisplayFormatOptionsPtrInput` via:
//
//	        TopicDisplayFormatOptionsArgs{...}
//
//	or:
//
//	        nil
type TopicDisplayFormatOptionsPtrInput interface {
	pulumi.Input

	ToTopicDisplayFormatOptionsPtrOutput() TopicDisplayFormatOptionsPtrOutput
	ToTopicDisplayFormatOptionsPtrOutputWithContext(context.Context) TopicDisplayFormatOptionsPtrOutput
}

type topicDisplayFormatOptionsPtrType TopicDisplayFormatOptionsArgs

func TopicDisplayFormatOptionsPtr(v *TopicDisplayFormatOptionsArgs) TopicDisplayFormatOptionsPtrInput {
	return (*topicDisplayFormatOptionsPtrType)(v)
}

func (*topicDisplayFormatOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicDisplayFormatOptions)(nil)).Elem()
}

func (i *topicDisplayFormatOptionsPtrType) ToTopicDisplayFormatOptionsPtrOutput() TopicDisplayFormatOptionsPtrOutput {
	return i.ToTopicDisplayFormatOptionsPtrOutputWithContext(context.Background())
}

func (i *topicDisplayFormatOptionsPtrType) ToTopicDisplayFormatOptionsPtrOutputWithContext(ctx context.Context) TopicDisplayFormatOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicDisplayFormatOptionsPtrOutput)
}

type TopicDisplayFormatOptionsOutput struct{ *pulumi.OutputState }

func (TopicDisplayFormatOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicDisplayFormatOptions)(nil)).Elem()
}

func (o TopicDisplayFormatOptionsOutput) ToTopicDisplayFormatOptionsOutput() TopicDisplayFormatOptionsOutput {
	return o
}

func (o TopicDisplayFormatOptionsOutput) ToTopicDisplayFormatOptionsOutputWithContext(ctx context.Context) TopicDisplayFormatOptionsOutput {
	return o
}

func (o TopicDisplayFormatOptionsOutput) ToTopicDisplayFormatOptionsPtrOutput() TopicDisplayFormatOptionsPtrOutput {
	return o.ToTopicDisplayFormatOptionsPtrOutputWithContext(context.Background())
}

func (o TopicDisplayFormatOptionsOutput) ToTopicDisplayFormatOptionsPtrOutputWithContext(ctx context.Context) TopicDisplayFormatOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicDisplayFormatOptions) *TopicDisplayFormatOptions {
		return &v
	}).(TopicDisplayFormatOptionsPtrOutput)
}

// Determines the blank cell format.
func (o TopicDisplayFormatOptionsOutput) BlankCellFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicDisplayFormatOptions) *string { return v.BlankCellFormat }).(pulumi.StringPtrOutput)
}

// The currency symbol, such as `USD` .
func (o TopicDisplayFormatOptionsOutput) CurrencySymbol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicDisplayFormatOptions) *string { return v.CurrencySymbol }).(pulumi.StringPtrOutput)
}

// Determines the `DateTime` format.
func (o TopicDisplayFormatOptionsOutput) DateFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicDisplayFormatOptions) *string { return v.DateFormat }).(pulumi.StringPtrOutput)
}

// Determines the decimal separator.
func (o TopicDisplayFormatOptionsOutput) DecimalSeparator() TopicNumericSeparatorSymbolPtrOutput {
	return o.ApplyT(func(v TopicDisplayFormatOptions) *TopicNumericSeparatorSymbol { return v.DecimalSeparator }).(TopicNumericSeparatorSymbolPtrOutput)
}

// Determines the number of fraction digits.
func (o TopicDisplayFormatOptionsOutput) FractionDigits() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TopicDisplayFormatOptions) *float64 { return v.FractionDigits }).(pulumi.Float64PtrOutput)
}

// Determines the grouping separator.
func (o TopicDisplayFormatOptionsOutput) GroupingSeparator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicDisplayFormatOptions) *string { return v.GroupingSeparator }).(pulumi.StringPtrOutput)
}

// The negative format.
func (o TopicDisplayFormatOptionsOutput) NegativeFormat() TopicNegativeFormatPtrOutput {
	return o.ApplyT(func(v TopicDisplayFormatOptions) *TopicNegativeFormat { return v.NegativeFormat }).(TopicNegativeFormatPtrOutput)
}

// The prefix value for a display format.
func (o TopicDisplayFormatOptionsOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicDisplayFormatOptions) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

// The suffix value for a display format.
func (o TopicDisplayFormatOptionsOutput) Suffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicDisplayFormatOptions) *string { return v.Suffix }).(pulumi.StringPtrOutput)
}

// The unit scaler. Valid values for this structure are: `NONE` , `AUTO` , `THOUSANDS` , `MILLIONS` , `BILLIONS` , and `TRILLIONS` .
func (o TopicDisplayFormatOptionsOutput) UnitScaler() TopicNumberScalePtrOutput {
	return o.ApplyT(func(v TopicDisplayFormatOptions) *TopicNumberScale { return v.UnitScaler }).(TopicNumberScalePtrOutput)
}

// A Boolean value that indicates whether to use blank cell format.
func (o TopicDisplayFormatOptionsOutput) UseBlankCellFormat() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TopicDisplayFormatOptions) *bool { return v.UseBlankCellFormat }).(pulumi.BoolPtrOutput)
}

// A Boolean value that indicates whether to use grouping.
func (o TopicDisplayFormatOptionsOutput) UseGrouping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TopicDisplayFormatOptions) *bool { return v.UseGrouping }).(pulumi.BoolPtrOutput)
}

type TopicDisplayFormatOptionsPtrOutput struct{ *pulumi.OutputState }

func (TopicDisplayFormatOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicDisplayFormatOptions)(nil)).Elem()
}

func (o TopicDisplayFormatOptionsPtrOutput) ToTopicDisplayFormatOptionsPtrOutput() TopicDisplayFormatOptionsPtrOutput {
	return o
}

func (o TopicDisplayFormatOptionsPtrOutput) ToTopicDisplayFormatOptionsPtrOutputWithContext(ctx context.Context) TopicDisplayFormatOptionsPtrOutput {
	return o
}

func (o TopicDisplayFormatOptionsPtrOutput) Elem() TopicDisplayFormatOptionsOutput {
	return o.ApplyT(func(v *TopicDisplayFormatOptions) TopicDisplayFormatOptions {
		if v != nil {
			return *v
		}
		var ret TopicDisplayFormatOptions
		return ret
	}).(TopicDisplayFormatOptionsOutput)
}

// Determines the blank cell format.
func (o TopicDisplayFormatOptionsPtrOutput) BlankCellFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicDisplayFormatOptions) *string {
		if v == nil {
			return nil
		}
		return v.BlankCellFormat
	}).(pulumi.StringPtrOutput)
}

// The currency symbol, such as `USD` .
func (o TopicDisplayFormatOptionsPtrOutput) CurrencySymbol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicDisplayFormatOptions) *string {
		if v == nil {
			return nil
		}
		return v.CurrencySymbol
	}).(pulumi.StringPtrOutput)
}

// Determines the `DateTime` format.
func (o TopicDisplayFormatOptionsPtrOutput) DateFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicDisplayFormatOptions) *string {
		if v == nil {
			return nil
		}
		return v.DateFormat
	}).(pulumi.StringPtrOutput)
}

// Determines the decimal separator.
func (o TopicDisplayFormatOptionsPtrOutput) DecimalSeparator() TopicNumericSeparatorSymbolPtrOutput {
	return o.ApplyT(func(v *TopicDisplayFormatOptions) *TopicNumericSeparatorSymbol {
		if v == nil {
			return nil
		}
		return v.DecimalSeparator
	}).(TopicNumericSeparatorSymbolPtrOutput)
}

// Determines the number of fraction digits.
func (o TopicDisplayFormatOptionsPtrOutput) FractionDigits() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TopicDisplayFormatOptions) *float64 {
		if v == nil {
			return nil
		}
		return v.FractionDigits
	}).(pulumi.Float64PtrOutput)
}

// Determines the grouping separator.
func (o TopicDisplayFormatOptionsPtrOutput) GroupingSeparator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicDisplayFormatOptions) *string {
		if v == nil {
			return nil
		}
		return v.GroupingSeparator
	}).(pulumi.StringPtrOutput)
}

// The negative format.
func (o TopicDisplayFormatOptionsPtrOutput) NegativeFormat() TopicNegativeFormatPtrOutput {
	return o.ApplyT(func(v *TopicDisplayFormatOptions) *TopicNegativeFormat {
		if v == nil {
			return nil
		}
		return v.NegativeFormat
	}).(TopicNegativeFormatPtrOutput)
}

// The prefix value for a display format.
func (o TopicDisplayFormatOptionsPtrOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicDisplayFormatOptions) *string {
		if v == nil {
			return nil
		}
		return v.Prefix
	}).(pulumi.StringPtrOutput)
}

// The suffix value for a display format.
func (o TopicDisplayFormatOptionsPtrOutput) Suffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicDisplayFormatOptions) *string {
		if v == nil {
			return nil
		}
		return v.Suffix
	}).(pulumi.StringPtrOutput)
}

// The unit scaler. Valid values for this structure are: `NONE` , `AUTO` , `THOUSANDS` , `MILLIONS` , `BILLIONS` , and `TRILLIONS` .
func (o TopicDisplayFormatOptionsPtrOutput) UnitScaler() TopicNumberScalePtrOutput {
	return o.ApplyT(func(v *TopicDisplayFormatOptions) *TopicNumberScale {
		if v == nil {
			return nil
		}
		return v.UnitScaler
	}).(TopicNumberScalePtrOutput)
}

// A Boolean value that indicates whether to use blank cell format.
func (o TopicDisplayFormatOptionsPtrOutput) UseBlankCellFormat() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TopicDisplayFormatOptions) *bool {
		if v == nil {
			return nil
		}
		return v.UseBlankCellFormat
	}).(pulumi.BoolPtrOutput)
}

// A Boolean value that indicates whether to use grouping.
func (o TopicDisplayFormatOptionsPtrOutput) UseGrouping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TopicDisplayFormatOptions) *bool {
		if v == nil {
			return nil
		}
		return v.UseGrouping
	}).(pulumi.BoolPtrOutput)
}

type TopicFilter struct {
	// The category filter that is associated with this filter.
	CategoryFilter *TopicCategoryFilter `pulumi:"categoryFilter"`
	// The date range filter.
	DateRangeFilter *TopicDateRangeFilter `pulumi:"dateRangeFilter"`
	// The class of the filter. Valid values for this structure are `ENFORCED_VALUE_FILTER` , `CONDITIONAL_VALUE_FILTER` , and `NAMED_VALUE_FILTER` .
	FilterClass *TopicFilterClass `pulumi:"filterClass"`
	// A description of the filter used to select items for a topic.
	FilterDescription *string `pulumi:"filterDescription"`
	// The name of the filter.
	FilterName string `pulumi:"filterName"`
	// The other names or aliases for the filter.
	FilterSynonyms []string `pulumi:"filterSynonyms"`
	// The type of the filter. Valid values for this structure are `CATEGORY_FILTER` , `NUMERIC_EQUALITY_FILTER` , `NUMERIC_RANGE_FILTER` , `DATE_RANGE_FILTER` , and `RELATIVE_DATE_FILTER` .
	FilterType *TopicNamedFilterType `pulumi:"filterType"`
	// The numeric equality filter.
	NumericEqualityFilter *TopicNumericEqualityFilter `pulumi:"numericEqualityFilter"`
	// The numeric range filter.
	NumericRangeFilter *TopicNumericRangeFilter `pulumi:"numericRangeFilter"`
	// The name of the field that the filter operates on.
	OperandFieldName string `pulumi:"operandFieldName"`
	// The relative date filter.
	RelativeDateFilter *TopicRelativeDateFilter `pulumi:"relativeDateFilter"`
}

// TopicFilterInput is an input type that accepts TopicFilterArgs and TopicFilterOutput values.
// You can construct a concrete instance of `TopicFilterInput` via:
//
//	TopicFilterArgs{...}
type TopicFilterInput interface {
	pulumi.Input

	ToTopicFilterOutput() TopicFilterOutput
	ToTopicFilterOutputWithContext(context.Context) TopicFilterOutput
}

type TopicFilterArgs struct {
	// The category filter that is associated with this filter.
	CategoryFilter TopicCategoryFilterPtrInput `pulumi:"categoryFilter"`
	// The date range filter.
	DateRangeFilter TopicDateRangeFilterPtrInput `pulumi:"dateRangeFilter"`
	// The class of the filter. Valid values for this structure are `ENFORCED_VALUE_FILTER` , `CONDITIONAL_VALUE_FILTER` , and `NAMED_VALUE_FILTER` .
	FilterClass TopicFilterClassPtrInput `pulumi:"filterClass"`
	// A description of the filter used to select items for a topic.
	FilterDescription pulumi.StringPtrInput `pulumi:"filterDescription"`
	// The name of the filter.
	FilterName pulumi.StringInput `pulumi:"filterName"`
	// The other names or aliases for the filter.
	FilterSynonyms pulumi.StringArrayInput `pulumi:"filterSynonyms"`
	// The type of the filter. Valid values for this structure are `CATEGORY_FILTER` , `NUMERIC_EQUALITY_FILTER` , `NUMERIC_RANGE_FILTER` , `DATE_RANGE_FILTER` , and `RELATIVE_DATE_FILTER` .
	FilterType TopicNamedFilterTypePtrInput `pulumi:"filterType"`
	// The numeric equality filter.
	NumericEqualityFilter TopicNumericEqualityFilterPtrInput `pulumi:"numericEqualityFilter"`
	// The numeric range filter.
	NumericRangeFilter TopicNumericRangeFilterPtrInput `pulumi:"numericRangeFilter"`
	// The name of the field that the filter operates on.
	OperandFieldName pulumi.StringInput `pulumi:"operandFieldName"`
	// The relative date filter.
	RelativeDateFilter TopicRelativeDateFilterPtrInput `pulumi:"relativeDateFilter"`
}

func (TopicFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicFilter)(nil)).Elem()
}

func (i TopicFilterArgs) ToTopicFilterOutput() TopicFilterOutput {
	return i.ToTopicFilterOutputWithContext(context.Background())
}

func (i TopicFilterArgs) ToTopicFilterOutputWithContext(ctx context.Context) TopicFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicFilterOutput)
}

// TopicFilterArrayInput is an input type that accepts TopicFilterArray and TopicFilterArrayOutput values.
// You can construct a concrete instance of `TopicFilterArrayInput` via:
//
//	TopicFilterArray{ TopicFilterArgs{...} }
type TopicFilterArrayInput interface {
	pulumi.Input

	ToTopicFilterArrayOutput() TopicFilterArrayOutput
	ToTopicFilterArrayOutputWithContext(context.Context) TopicFilterArrayOutput
}

type TopicFilterArray []TopicFilterInput

func (TopicFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicFilter)(nil)).Elem()
}

func (i TopicFilterArray) ToTopicFilterArrayOutput() TopicFilterArrayOutput {
	return i.ToTopicFilterArrayOutputWithContext(context.Background())
}

func (i TopicFilterArray) ToTopicFilterArrayOutputWithContext(ctx context.Context) TopicFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicFilterArrayOutput)
}

type TopicFilterOutput struct{ *pulumi.OutputState }

func (TopicFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicFilter)(nil)).Elem()
}

func (o TopicFilterOutput) ToTopicFilterOutput() TopicFilterOutput {
	return o
}

func (o TopicFilterOutput) ToTopicFilterOutputWithContext(ctx context.Context) TopicFilterOutput {
	return o
}

// The category filter that is associated with this filter.
func (o TopicFilterOutput) CategoryFilter() TopicCategoryFilterPtrOutput {
	return o.ApplyT(func(v TopicFilter) *TopicCategoryFilter { return v.CategoryFilter }).(TopicCategoryFilterPtrOutput)
}

// The date range filter.
func (o TopicFilterOutput) DateRangeFilter() TopicDateRangeFilterPtrOutput {
	return o.ApplyT(func(v TopicFilter) *TopicDateRangeFilter { return v.DateRangeFilter }).(TopicDateRangeFilterPtrOutput)
}

// The class of the filter. Valid values for this structure are `ENFORCED_VALUE_FILTER` , `CONDITIONAL_VALUE_FILTER` , and `NAMED_VALUE_FILTER` .
func (o TopicFilterOutput) FilterClass() TopicFilterClassPtrOutput {
	return o.ApplyT(func(v TopicFilter) *TopicFilterClass { return v.FilterClass }).(TopicFilterClassPtrOutput)
}

// A description of the filter used to select items for a topic.
func (o TopicFilterOutput) FilterDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicFilter) *string { return v.FilterDescription }).(pulumi.StringPtrOutput)
}

// The name of the filter.
func (o TopicFilterOutput) FilterName() pulumi.StringOutput {
	return o.ApplyT(func(v TopicFilter) string { return v.FilterName }).(pulumi.StringOutput)
}

// The other names or aliases for the filter.
func (o TopicFilterOutput) FilterSynonyms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TopicFilter) []string { return v.FilterSynonyms }).(pulumi.StringArrayOutput)
}

// The type of the filter. Valid values for this structure are `CATEGORY_FILTER` , `NUMERIC_EQUALITY_FILTER` , `NUMERIC_RANGE_FILTER` , `DATE_RANGE_FILTER` , and `RELATIVE_DATE_FILTER` .
func (o TopicFilterOutput) FilterType() TopicNamedFilterTypePtrOutput {
	return o.ApplyT(func(v TopicFilter) *TopicNamedFilterType { return v.FilterType }).(TopicNamedFilterTypePtrOutput)
}

// The numeric equality filter.
func (o TopicFilterOutput) NumericEqualityFilter() TopicNumericEqualityFilterPtrOutput {
	return o.ApplyT(func(v TopicFilter) *TopicNumericEqualityFilter { return v.NumericEqualityFilter }).(TopicNumericEqualityFilterPtrOutput)
}

// The numeric range filter.
func (o TopicFilterOutput) NumericRangeFilter() TopicNumericRangeFilterPtrOutput {
	return o.ApplyT(func(v TopicFilter) *TopicNumericRangeFilter { return v.NumericRangeFilter }).(TopicNumericRangeFilterPtrOutput)
}

// The name of the field that the filter operates on.
func (o TopicFilterOutput) OperandFieldName() pulumi.StringOutput {
	return o.ApplyT(func(v TopicFilter) string { return v.OperandFieldName }).(pulumi.StringOutput)
}

// The relative date filter.
func (o TopicFilterOutput) RelativeDateFilter() TopicRelativeDateFilterPtrOutput {
	return o.ApplyT(func(v TopicFilter) *TopicRelativeDateFilter { return v.RelativeDateFilter }).(TopicRelativeDateFilterPtrOutput)
}

type TopicFilterArrayOutput struct{ *pulumi.OutputState }

func (TopicFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicFilter)(nil)).Elem()
}

func (o TopicFilterArrayOutput) ToTopicFilterArrayOutput() TopicFilterArrayOutput {
	return o
}

func (o TopicFilterArrayOutput) ToTopicFilterArrayOutputWithContext(ctx context.Context) TopicFilterArrayOutput {
	return o
}

func (o TopicFilterArrayOutput) Index(i pulumi.IntInput) TopicFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TopicFilter {
		return vs[0].([]TopicFilter)[vs[1].(int)]
	}).(TopicFilterOutput)
}

type TopicNamedEntity struct {
	// The definition of a named entity.
	Definition []TopicNamedEntityDefinition `pulumi:"definition"`
	// The description of the named entity.
	EntityDescription *string `pulumi:"entityDescription"`
	// The name of the named entity.
	EntityName string `pulumi:"entityName"`
	// The other names or aliases for the named entity.
	EntitySynonyms []string `pulumi:"entitySynonyms"`
	// The type of named entity that a topic represents.
	SemanticEntityType *TopicSemanticEntityType `pulumi:"semanticEntityType"`
}

// TopicNamedEntityInput is an input type that accepts TopicNamedEntityArgs and TopicNamedEntityOutput values.
// You can construct a concrete instance of `TopicNamedEntityInput` via:
//
//	TopicNamedEntityArgs{...}
type TopicNamedEntityInput interface {
	pulumi.Input

	ToTopicNamedEntityOutput() TopicNamedEntityOutput
	ToTopicNamedEntityOutputWithContext(context.Context) TopicNamedEntityOutput
}

type TopicNamedEntityArgs struct {
	// The definition of a named entity.
	Definition TopicNamedEntityDefinitionArrayInput `pulumi:"definition"`
	// The description of the named entity.
	EntityDescription pulumi.StringPtrInput `pulumi:"entityDescription"`
	// The name of the named entity.
	EntityName pulumi.StringInput `pulumi:"entityName"`
	// The other names or aliases for the named entity.
	EntitySynonyms pulumi.StringArrayInput `pulumi:"entitySynonyms"`
	// The type of named entity that a topic represents.
	SemanticEntityType TopicSemanticEntityTypePtrInput `pulumi:"semanticEntityType"`
}

func (TopicNamedEntityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicNamedEntity)(nil)).Elem()
}

func (i TopicNamedEntityArgs) ToTopicNamedEntityOutput() TopicNamedEntityOutput {
	return i.ToTopicNamedEntityOutputWithContext(context.Background())
}

func (i TopicNamedEntityArgs) ToTopicNamedEntityOutputWithContext(ctx context.Context) TopicNamedEntityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicNamedEntityOutput)
}

// TopicNamedEntityArrayInput is an input type that accepts TopicNamedEntityArray and TopicNamedEntityArrayOutput values.
// You can construct a concrete instance of `TopicNamedEntityArrayInput` via:
//
//	TopicNamedEntityArray{ TopicNamedEntityArgs{...} }
type TopicNamedEntityArrayInput interface {
	pulumi.Input

	ToTopicNamedEntityArrayOutput() TopicNamedEntityArrayOutput
	ToTopicNamedEntityArrayOutputWithContext(context.Context) TopicNamedEntityArrayOutput
}

type TopicNamedEntityArray []TopicNamedEntityInput

func (TopicNamedEntityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicNamedEntity)(nil)).Elem()
}

func (i TopicNamedEntityArray) ToTopicNamedEntityArrayOutput() TopicNamedEntityArrayOutput {
	return i.ToTopicNamedEntityArrayOutputWithContext(context.Background())
}

func (i TopicNamedEntityArray) ToTopicNamedEntityArrayOutputWithContext(ctx context.Context) TopicNamedEntityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicNamedEntityArrayOutput)
}

type TopicNamedEntityOutput struct{ *pulumi.OutputState }

func (TopicNamedEntityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicNamedEntity)(nil)).Elem()
}

func (o TopicNamedEntityOutput) ToTopicNamedEntityOutput() TopicNamedEntityOutput {
	return o
}

func (o TopicNamedEntityOutput) ToTopicNamedEntityOutputWithContext(ctx context.Context) TopicNamedEntityOutput {
	return o
}

// The definition of a named entity.
func (o TopicNamedEntityOutput) Definition() TopicNamedEntityDefinitionArrayOutput {
	return o.ApplyT(func(v TopicNamedEntity) []TopicNamedEntityDefinition { return v.Definition }).(TopicNamedEntityDefinitionArrayOutput)
}

// The description of the named entity.
func (o TopicNamedEntityOutput) EntityDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicNamedEntity) *string { return v.EntityDescription }).(pulumi.StringPtrOutput)
}

// The name of the named entity.
func (o TopicNamedEntityOutput) EntityName() pulumi.StringOutput {
	return o.ApplyT(func(v TopicNamedEntity) string { return v.EntityName }).(pulumi.StringOutput)
}

// The other names or aliases for the named entity.
func (o TopicNamedEntityOutput) EntitySynonyms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TopicNamedEntity) []string { return v.EntitySynonyms }).(pulumi.StringArrayOutput)
}

// The type of named entity that a topic represents.
func (o TopicNamedEntityOutput) SemanticEntityType() TopicSemanticEntityTypePtrOutput {
	return o.ApplyT(func(v TopicNamedEntity) *TopicSemanticEntityType { return v.SemanticEntityType }).(TopicSemanticEntityTypePtrOutput)
}

type TopicNamedEntityArrayOutput struct{ *pulumi.OutputState }

func (TopicNamedEntityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicNamedEntity)(nil)).Elem()
}

func (o TopicNamedEntityArrayOutput) ToTopicNamedEntityArrayOutput() TopicNamedEntityArrayOutput {
	return o
}

func (o TopicNamedEntityArrayOutput) ToTopicNamedEntityArrayOutputWithContext(ctx context.Context) TopicNamedEntityArrayOutput {
	return o
}

func (o TopicNamedEntityArrayOutput) Index(i pulumi.IntInput) TopicNamedEntityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TopicNamedEntity {
		return vs[0].([]TopicNamedEntity)[vs[1].(int)]
	}).(TopicNamedEntityOutput)
}

type TopicNamedEntityDefinition struct {
	// The name of the entity.
	FieldName *string `pulumi:"fieldName"`
	// The definition of a metric.
	Metric *TopicNamedEntityDefinitionMetric `pulumi:"metric"`
	// The property name to be used for the named entity.
	PropertyName *string `pulumi:"propertyName"`
	// The property role. Valid values for this structure are `PRIMARY` and `ID` .
	PropertyRole *TopicPropertyRole `pulumi:"propertyRole"`
	// The property usage. Valid values for this structure are `INHERIT` , `DIMENSION` , and `MEASURE` .
	PropertyUsage *TopicPropertyUsage `pulumi:"propertyUsage"`
}

// TopicNamedEntityDefinitionInput is an input type that accepts TopicNamedEntityDefinitionArgs and TopicNamedEntityDefinitionOutput values.
// You can construct a concrete instance of `TopicNamedEntityDefinitionInput` via:
//
//	TopicNamedEntityDefinitionArgs{...}
type TopicNamedEntityDefinitionInput interface {
	pulumi.Input

	ToTopicNamedEntityDefinitionOutput() TopicNamedEntityDefinitionOutput
	ToTopicNamedEntityDefinitionOutputWithContext(context.Context) TopicNamedEntityDefinitionOutput
}

type TopicNamedEntityDefinitionArgs struct {
	// The name of the entity.
	FieldName pulumi.StringPtrInput `pulumi:"fieldName"`
	// The definition of a metric.
	Metric TopicNamedEntityDefinitionMetricPtrInput `pulumi:"metric"`
	// The property name to be used for the named entity.
	PropertyName pulumi.StringPtrInput `pulumi:"propertyName"`
	// The property role. Valid values for this structure are `PRIMARY` and `ID` .
	PropertyRole TopicPropertyRolePtrInput `pulumi:"propertyRole"`
	// The property usage. Valid values for this structure are `INHERIT` , `DIMENSION` , and `MEASURE` .
	PropertyUsage TopicPropertyUsagePtrInput `pulumi:"propertyUsage"`
}

func (TopicNamedEntityDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicNamedEntityDefinition)(nil)).Elem()
}

func (i TopicNamedEntityDefinitionArgs) ToTopicNamedEntityDefinitionOutput() TopicNamedEntityDefinitionOutput {
	return i.ToTopicNamedEntityDefinitionOutputWithContext(context.Background())
}

func (i TopicNamedEntityDefinitionArgs) ToTopicNamedEntityDefinitionOutputWithContext(ctx context.Context) TopicNamedEntityDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicNamedEntityDefinitionOutput)
}

// TopicNamedEntityDefinitionArrayInput is an input type that accepts TopicNamedEntityDefinitionArray and TopicNamedEntityDefinitionArrayOutput values.
// You can construct a concrete instance of `TopicNamedEntityDefinitionArrayInput` via:
//
//	TopicNamedEntityDefinitionArray{ TopicNamedEntityDefinitionArgs{...} }
type TopicNamedEntityDefinitionArrayInput interface {
	pulumi.Input

	ToTopicNamedEntityDefinitionArrayOutput() TopicNamedEntityDefinitionArrayOutput
	ToTopicNamedEntityDefinitionArrayOutputWithContext(context.Context) TopicNamedEntityDefinitionArrayOutput
}

type TopicNamedEntityDefinitionArray []TopicNamedEntityDefinitionInput

func (TopicNamedEntityDefinitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicNamedEntityDefinition)(nil)).Elem()
}

func (i TopicNamedEntityDefinitionArray) ToTopicNamedEntityDefinitionArrayOutput() TopicNamedEntityDefinitionArrayOutput {
	return i.ToTopicNamedEntityDefinitionArrayOutputWithContext(context.Background())
}

func (i TopicNamedEntityDefinitionArray) ToTopicNamedEntityDefinitionArrayOutputWithContext(ctx context.Context) TopicNamedEntityDefinitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicNamedEntityDefinitionArrayOutput)
}

type TopicNamedEntityDefinitionOutput struct{ *pulumi.OutputState }

func (TopicNamedEntityDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicNamedEntityDefinition)(nil)).Elem()
}

func (o TopicNamedEntityDefinitionOutput) ToTopicNamedEntityDefinitionOutput() TopicNamedEntityDefinitionOutput {
	return o
}

func (o TopicNamedEntityDefinitionOutput) ToTopicNamedEntityDefinitionOutputWithContext(ctx context.Context) TopicNamedEntityDefinitionOutput {
	return o
}

// The name of the entity.
func (o TopicNamedEntityDefinitionOutput) FieldName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicNamedEntityDefinition) *string { return v.FieldName }).(pulumi.StringPtrOutput)
}

// The definition of a metric.
func (o TopicNamedEntityDefinitionOutput) Metric() TopicNamedEntityDefinitionMetricPtrOutput {
	return o.ApplyT(func(v TopicNamedEntityDefinition) *TopicNamedEntityDefinitionMetric { return v.Metric }).(TopicNamedEntityDefinitionMetricPtrOutput)
}

// The property name to be used for the named entity.
func (o TopicNamedEntityDefinitionOutput) PropertyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicNamedEntityDefinition) *string { return v.PropertyName }).(pulumi.StringPtrOutput)
}

// The property role. Valid values for this structure are `PRIMARY` and `ID` .
func (o TopicNamedEntityDefinitionOutput) PropertyRole() TopicPropertyRolePtrOutput {
	return o.ApplyT(func(v TopicNamedEntityDefinition) *TopicPropertyRole { return v.PropertyRole }).(TopicPropertyRolePtrOutput)
}

// The property usage. Valid values for this structure are `INHERIT` , `DIMENSION` , and `MEASURE` .
func (o TopicNamedEntityDefinitionOutput) PropertyUsage() TopicPropertyUsagePtrOutput {
	return o.ApplyT(func(v TopicNamedEntityDefinition) *TopicPropertyUsage { return v.PropertyUsage }).(TopicPropertyUsagePtrOutput)
}

type TopicNamedEntityDefinitionArrayOutput struct{ *pulumi.OutputState }

func (TopicNamedEntityDefinitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicNamedEntityDefinition)(nil)).Elem()
}

func (o TopicNamedEntityDefinitionArrayOutput) ToTopicNamedEntityDefinitionArrayOutput() TopicNamedEntityDefinitionArrayOutput {
	return o
}

func (o TopicNamedEntityDefinitionArrayOutput) ToTopicNamedEntityDefinitionArrayOutputWithContext(ctx context.Context) TopicNamedEntityDefinitionArrayOutput {
	return o
}

func (o TopicNamedEntityDefinitionArrayOutput) Index(i pulumi.IntInput) TopicNamedEntityDefinitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TopicNamedEntityDefinition {
		return vs[0].([]TopicNamedEntityDefinition)[vs[1].(int)]
	}).(TopicNamedEntityDefinitionOutput)
}

type TopicNamedEntityDefinitionMetric struct {
	// The aggregation of a named entity. Valid values for this structure are `SUM` , `MIN` , `MAX` , `COUNT` , `AVERAGE` , `DISTINCT_COUNT` , `STDEV` , `STDEVP` , `VAR` , `VARP` , `PERCENTILE` , `MEDIAN` , and `CUSTOM` .
	Aggregation *TopicNamedEntityAggType `pulumi:"aggregation"`
	// The additional parameters for an aggregation function.
	AggregationFunctionParameters map[string]string `pulumi:"aggregationFunctionParameters"`
}

// TopicNamedEntityDefinitionMetricInput is an input type that accepts TopicNamedEntityDefinitionMetricArgs and TopicNamedEntityDefinitionMetricOutput values.
// You can construct a concrete instance of `TopicNamedEntityDefinitionMetricInput` via:
//
//	TopicNamedEntityDefinitionMetricArgs{...}
type TopicNamedEntityDefinitionMetricInput interface {
	pulumi.Input

	ToTopicNamedEntityDefinitionMetricOutput() TopicNamedEntityDefinitionMetricOutput
	ToTopicNamedEntityDefinitionMetricOutputWithContext(context.Context) TopicNamedEntityDefinitionMetricOutput
}

type TopicNamedEntityDefinitionMetricArgs struct {
	// The aggregation of a named entity. Valid values for this structure are `SUM` , `MIN` , `MAX` , `COUNT` , `AVERAGE` , `DISTINCT_COUNT` , `STDEV` , `STDEVP` , `VAR` , `VARP` , `PERCENTILE` , `MEDIAN` , and `CUSTOM` .
	Aggregation TopicNamedEntityAggTypePtrInput `pulumi:"aggregation"`
	// The additional parameters for an aggregation function.
	AggregationFunctionParameters pulumi.StringMapInput `pulumi:"aggregationFunctionParameters"`
}

func (TopicNamedEntityDefinitionMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicNamedEntityDefinitionMetric)(nil)).Elem()
}

func (i TopicNamedEntityDefinitionMetricArgs) ToTopicNamedEntityDefinitionMetricOutput() TopicNamedEntityDefinitionMetricOutput {
	return i.ToTopicNamedEntityDefinitionMetricOutputWithContext(context.Background())
}

func (i TopicNamedEntityDefinitionMetricArgs) ToTopicNamedEntityDefinitionMetricOutputWithContext(ctx context.Context) TopicNamedEntityDefinitionMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicNamedEntityDefinitionMetricOutput)
}

func (i TopicNamedEntityDefinitionMetricArgs) ToTopicNamedEntityDefinitionMetricPtrOutput() TopicNamedEntityDefinitionMetricPtrOutput {
	return i.ToTopicNamedEntityDefinitionMetricPtrOutputWithContext(context.Background())
}

func (i TopicNamedEntityDefinitionMetricArgs) ToTopicNamedEntityDefinitionMetricPtrOutputWithContext(ctx context.Context) TopicNamedEntityDefinitionMetricPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicNamedEntityDefinitionMetricOutput).ToTopicNamedEntityDefinitionMetricPtrOutputWithContext(ctx)
}

// TopicNamedEntityDefinitionMetricPtrInput is an input type that accepts TopicNamedEntityDefinitionMetricArgs, TopicNamedEntityDefinitionMetricPtr and TopicNamedEntityDefinitionMetricPtrOutput values.
// You can construct a concrete instance of `TopicNamedEntityDefinitionMetricPtrInput` via:
//
//	        TopicNamedEntityDefinitionMetricArgs{...}
//
//	or:
//
//	        nil
type TopicNamedEntityDefinitionMetricPtrInput interface {
	pulumi.Input

	ToTopicNamedEntityDefinitionMetricPtrOutput() TopicNamedEntityDefinitionMetricPtrOutput
	ToTopicNamedEntityDefinitionMetricPtrOutputWithContext(context.Context) TopicNamedEntityDefinitionMetricPtrOutput
}

type topicNamedEntityDefinitionMetricPtrType TopicNamedEntityDefinitionMetricArgs

func TopicNamedEntityDefinitionMetricPtr(v *TopicNamedEntityDefinitionMetricArgs) TopicNamedEntityDefinitionMetricPtrInput {
	return (*topicNamedEntityDefinitionMetricPtrType)(v)
}

func (*topicNamedEntityDefinitionMetricPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicNamedEntityDefinitionMetric)(nil)).Elem()
}

func (i *topicNamedEntityDefinitionMetricPtrType) ToTopicNamedEntityDefinitionMetricPtrOutput() TopicNamedEntityDefinitionMetricPtrOutput {
	return i.ToTopicNamedEntityDefinitionMetricPtrOutputWithContext(context.Background())
}

func (i *topicNamedEntityDefinitionMetricPtrType) ToTopicNamedEntityDefinitionMetricPtrOutputWithContext(ctx context.Context) TopicNamedEntityDefinitionMetricPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicNamedEntityDefinitionMetricPtrOutput)
}

type TopicNamedEntityDefinitionMetricOutput struct{ *pulumi.OutputState }

func (TopicNamedEntityDefinitionMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicNamedEntityDefinitionMetric)(nil)).Elem()
}

func (o TopicNamedEntityDefinitionMetricOutput) ToTopicNamedEntityDefinitionMetricOutput() TopicNamedEntityDefinitionMetricOutput {
	return o
}

func (o TopicNamedEntityDefinitionMetricOutput) ToTopicNamedEntityDefinitionMetricOutputWithContext(ctx context.Context) TopicNamedEntityDefinitionMetricOutput {
	return o
}

func (o TopicNamedEntityDefinitionMetricOutput) ToTopicNamedEntityDefinitionMetricPtrOutput() TopicNamedEntityDefinitionMetricPtrOutput {
	return o.ToTopicNamedEntityDefinitionMetricPtrOutputWithContext(context.Background())
}

func (o TopicNamedEntityDefinitionMetricOutput) ToTopicNamedEntityDefinitionMetricPtrOutputWithContext(ctx context.Context) TopicNamedEntityDefinitionMetricPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicNamedEntityDefinitionMetric) *TopicNamedEntityDefinitionMetric {
		return &v
	}).(TopicNamedEntityDefinitionMetricPtrOutput)
}

// The aggregation of a named entity. Valid values for this structure are `SUM` , `MIN` , `MAX` , `COUNT` , `AVERAGE` , `DISTINCT_COUNT` , `STDEV` , `STDEVP` , `VAR` , `VARP` , `PERCENTILE` , `MEDIAN` , and `CUSTOM` .
func (o TopicNamedEntityDefinitionMetricOutput) Aggregation() TopicNamedEntityAggTypePtrOutput {
	return o.ApplyT(func(v TopicNamedEntityDefinitionMetric) *TopicNamedEntityAggType { return v.Aggregation }).(TopicNamedEntityAggTypePtrOutput)
}

// The additional parameters for an aggregation function.
func (o TopicNamedEntityDefinitionMetricOutput) AggregationFunctionParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v TopicNamedEntityDefinitionMetric) map[string]string { return v.AggregationFunctionParameters }).(pulumi.StringMapOutput)
}

type TopicNamedEntityDefinitionMetricPtrOutput struct{ *pulumi.OutputState }

func (TopicNamedEntityDefinitionMetricPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicNamedEntityDefinitionMetric)(nil)).Elem()
}

func (o TopicNamedEntityDefinitionMetricPtrOutput) ToTopicNamedEntityDefinitionMetricPtrOutput() TopicNamedEntityDefinitionMetricPtrOutput {
	return o
}

func (o TopicNamedEntityDefinitionMetricPtrOutput) ToTopicNamedEntityDefinitionMetricPtrOutputWithContext(ctx context.Context) TopicNamedEntityDefinitionMetricPtrOutput {
	return o
}

func (o TopicNamedEntityDefinitionMetricPtrOutput) Elem() TopicNamedEntityDefinitionMetricOutput {
	return o.ApplyT(func(v *TopicNamedEntityDefinitionMetric) TopicNamedEntityDefinitionMetric {
		if v != nil {
			return *v
		}
		var ret TopicNamedEntityDefinitionMetric
		return ret
	}).(TopicNamedEntityDefinitionMetricOutput)
}

// The aggregation of a named entity. Valid values for this structure are `SUM` , `MIN` , `MAX` , `COUNT` , `AVERAGE` , `DISTINCT_COUNT` , `STDEV` , `STDEVP` , `VAR` , `VARP` , `PERCENTILE` , `MEDIAN` , and `CUSTOM` .
func (o TopicNamedEntityDefinitionMetricPtrOutput) Aggregation() TopicNamedEntityAggTypePtrOutput {
	return o.ApplyT(func(v *TopicNamedEntityDefinitionMetric) *TopicNamedEntityAggType {
		if v == nil {
			return nil
		}
		return v.Aggregation
	}).(TopicNamedEntityAggTypePtrOutput)
}

// The additional parameters for an aggregation function.
func (o TopicNamedEntityDefinitionMetricPtrOutput) AggregationFunctionParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TopicNamedEntityDefinitionMetric) map[string]string {
		if v == nil {
			return nil
		}
		return v.AggregationFunctionParameters
	}).(pulumi.StringMapOutput)
}

type TopicNegativeFormat struct {
	// The prefix for a negative format.
	Prefix *string `pulumi:"prefix"`
	// The suffix for a negative format.
	Suffix *string `pulumi:"suffix"`
}

// TopicNegativeFormatInput is an input type that accepts TopicNegativeFormatArgs and TopicNegativeFormatOutput values.
// You can construct a concrete instance of `TopicNegativeFormatInput` via:
//
//	TopicNegativeFormatArgs{...}
type TopicNegativeFormatInput interface {
	pulumi.Input

	ToTopicNegativeFormatOutput() TopicNegativeFormatOutput
	ToTopicNegativeFormatOutputWithContext(context.Context) TopicNegativeFormatOutput
}

type TopicNegativeFormatArgs struct {
	// The prefix for a negative format.
	Prefix pulumi.StringPtrInput `pulumi:"prefix"`
	// The suffix for a negative format.
	Suffix pulumi.StringPtrInput `pulumi:"suffix"`
}

func (TopicNegativeFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicNegativeFormat)(nil)).Elem()
}

func (i TopicNegativeFormatArgs) ToTopicNegativeFormatOutput() TopicNegativeFormatOutput {
	return i.ToTopicNegativeFormatOutputWithContext(context.Background())
}

func (i TopicNegativeFormatArgs) ToTopicNegativeFormatOutputWithContext(ctx context.Context) TopicNegativeFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicNegativeFormatOutput)
}

func (i TopicNegativeFormatArgs) ToTopicNegativeFormatPtrOutput() TopicNegativeFormatPtrOutput {
	return i.ToTopicNegativeFormatPtrOutputWithContext(context.Background())
}

func (i TopicNegativeFormatArgs) ToTopicNegativeFormatPtrOutputWithContext(ctx context.Context) TopicNegativeFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicNegativeFormatOutput).ToTopicNegativeFormatPtrOutputWithContext(ctx)
}

// TopicNegativeFormatPtrInput is an input type that accepts TopicNegativeFormatArgs, TopicNegativeFormatPtr and TopicNegativeFormatPtrOutput values.
// You can construct a concrete instance of `TopicNegativeFormatPtrInput` via:
//
//	        TopicNegativeFormatArgs{...}
//
//	or:
//
//	        nil
type TopicNegativeFormatPtrInput interface {
	pulumi.Input

	ToTopicNegativeFormatPtrOutput() TopicNegativeFormatPtrOutput
	ToTopicNegativeFormatPtrOutputWithContext(context.Context) TopicNegativeFormatPtrOutput
}

type topicNegativeFormatPtrType TopicNegativeFormatArgs

func TopicNegativeFormatPtr(v *TopicNegativeFormatArgs) TopicNegativeFormatPtrInput {
	return (*topicNegativeFormatPtrType)(v)
}

func (*topicNegativeFormatPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicNegativeFormat)(nil)).Elem()
}

func (i *topicNegativeFormatPtrType) ToTopicNegativeFormatPtrOutput() TopicNegativeFormatPtrOutput {
	return i.ToTopicNegativeFormatPtrOutputWithContext(context.Background())
}

func (i *topicNegativeFormatPtrType) ToTopicNegativeFormatPtrOutputWithContext(ctx context.Context) TopicNegativeFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicNegativeFormatPtrOutput)
}

type TopicNegativeFormatOutput struct{ *pulumi.OutputState }

func (TopicNegativeFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicNegativeFormat)(nil)).Elem()
}

func (o TopicNegativeFormatOutput) ToTopicNegativeFormatOutput() TopicNegativeFormatOutput {
	return o
}

func (o TopicNegativeFormatOutput) ToTopicNegativeFormatOutputWithContext(ctx context.Context) TopicNegativeFormatOutput {
	return o
}

func (o TopicNegativeFormatOutput) ToTopicNegativeFormatPtrOutput() TopicNegativeFormatPtrOutput {
	return o.ToTopicNegativeFormatPtrOutputWithContext(context.Background())
}

func (o TopicNegativeFormatOutput) ToTopicNegativeFormatPtrOutputWithContext(ctx context.Context) TopicNegativeFormatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicNegativeFormat) *TopicNegativeFormat {
		return &v
	}).(TopicNegativeFormatPtrOutput)
}

// The prefix for a negative format.
func (o TopicNegativeFormatOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicNegativeFormat) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

// The suffix for a negative format.
func (o TopicNegativeFormatOutput) Suffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicNegativeFormat) *string { return v.Suffix }).(pulumi.StringPtrOutput)
}

type TopicNegativeFormatPtrOutput struct{ *pulumi.OutputState }

func (TopicNegativeFormatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicNegativeFormat)(nil)).Elem()
}

func (o TopicNegativeFormatPtrOutput) ToTopicNegativeFormatPtrOutput() TopicNegativeFormatPtrOutput {
	return o
}

func (o TopicNegativeFormatPtrOutput) ToTopicNegativeFormatPtrOutputWithContext(ctx context.Context) TopicNegativeFormatPtrOutput {
	return o
}

func (o TopicNegativeFormatPtrOutput) Elem() TopicNegativeFormatOutput {
	return o.ApplyT(func(v *TopicNegativeFormat) TopicNegativeFormat {
		if v != nil {
			return *v
		}
		var ret TopicNegativeFormat
		return ret
	}).(TopicNegativeFormatOutput)
}

// The prefix for a negative format.
func (o TopicNegativeFormatPtrOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicNegativeFormat) *string {
		if v == nil {
			return nil
		}
		return v.Prefix
	}).(pulumi.StringPtrOutput)
}

// The suffix for a negative format.
func (o TopicNegativeFormatPtrOutput) Suffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicNegativeFormat) *string {
		if v == nil {
			return nil
		}
		return v.Suffix
	}).(pulumi.StringPtrOutput)
}

type TopicNumericEqualityFilter struct {
	// An aggregation function that specifies how to calculate the value of a numeric field for a topic. Valid values for this structure are `NO_AGGREGATION` , `SUM` , `AVERAGE` , `COUNT` , `DISTINCT_COUNT` , `MAX` , `MEDIAN` , `MIN` , `STDEV` , `STDEVP` , `VAR` , and `VARP` .
	Aggregation *TopicNamedFilterAggType `pulumi:"aggregation"`
	// The constant used in a numeric equality filter.
	Constant *TopicSingularFilterConstant `pulumi:"constant"`
}

// TopicNumericEqualityFilterInput is an input type that accepts TopicNumericEqualityFilterArgs and TopicNumericEqualityFilterOutput values.
// You can construct a concrete instance of `TopicNumericEqualityFilterInput` via:
//
//	TopicNumericEqualityFilterArgs{...}
type TopicNumericEqualityFilterInput interface {
	pulumi.Input

	ToTopicNumericEqualityFilterOutput() TopicNumericEqualityFilterOutput
	ToTopicNumericEqualityFilterOutputWithContext(context.Context) TopicNumericEqualityFilterOutput
}

type TopicNumericEqualityFilterArgs struct {
	// An aggregation function that specifies how to calculate the value of a numeric field for a topic. Valid values for this structure are `NO_AGGREGATION` , `SUM` , `AVERAGE` , `COUNT` , `DISTINCT_COUNT` , `MAX` , `MEDIAN` , `MIN` , `STDEV` , `STDEVP` , `VAR` , and `VARP` .
	Aggregation TopicNamedFilterAggTypePtrInput `pulumi:"aggregation"`
	// The constant used in a numeric equality filter.
	Constant TopicSingularFilterConstantPtrInput `pulumi:"constant"`
}

func (TopicNumericEqualityFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicNumericEqualityFilter)(nil)).Elem()
}

func (i TopicNumericEqualityFilterArgs) ToTopicNumericEqualityFilterOutput() TopicNumericEqualityFilterOutput {
	return i.ToTopicNumericEqualityFilterOutputWithContext(context.Background())
}

func (i TopicNumericEqualityFilterArgs) ToTopicNumericEqualityFilterOutputWithContext(ctx context.Context) TopicNumericEqualityFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicNumericEqualityFilterOutput)
}

func (i TopicNumericEqualityFilterArgs) ToTopicNumericEqualityFilterPtrOutput() TopicNumericEqualityFilterPtrOutput {
	return i.ToTopicNumericEqualityFilterPtrOutputWithContext(context.Background())
}

func (i TopicNumericEqualityFilterArgs) ToTopicNumericEqualityFilterPtrOutputWithContext(ctx context.Context) TopicNumericEqualityFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicNumericEqualityFilterOutput).ToTopicNumericEqualityFilterPtrOutputWithContext(ctx)
}

// TopicNumericEqualityFilterPtrInput is an input type that accepts TopicNumericEqualityFilterArgs, TopicNumericEqualityFilterPtr and TopicNumericEqualityFilterPtrOutput values.
// You can construct a concrete instance of `TopicNumericEqualityFilterPtrInput` via:
//
//	        TopicNumericEqualityFilterArgs{...}
//
//	or:
//
//	        nil
type TopicNumericEqualityFilterPtrInput interface {
	pulumi.Input

	ToTopicNumericEqualityFilterPtrOutput() TopicNumericEqualityFilterPtrOutput
	ToTopicNumericEqualityFilterPtrOutputWithContext(context.Context) TopicNumericEqualityFilterPtrOutput
}

type topicNumericEqualityFilterPtrType TopicNumericEqualityFilterArgs

func TopicNumericEqualityFilterPtr(v *TopicNumericEqualityFilterArgs) TopicNumericEqualityFilterPtrInput {
	return (*topicNumericEqualityFilterPtrType)(v)
}

func (*topicNumericEqualityFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicNumericEqualityFilter)(nil)).Elem()
}

func (i *topicNumericEqualityFilterPtrType) ToTopicNumericEqualityFilterPtrOutput() TopicNumericEqualityFilterPtrOutput {
	return i.ToTopicNumericEqualityFilterPtrOutputWithContext(context.Background())
}

func (i *topicNumericEqualityFilterPtrType) ToTopicNumericEqualityFilterPtrOutputWithContext(ctx context.Context) TopicNumericEqualityFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicNumericEqualityFilterPtrOutput)
}

type TopicNumericEqualityFilterOutput struct{ *pulumi.OutputState }

func (TopicNumericEqualityFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicNumericEqualityFilter)(nil)).Elem()
}

func (o TopicNumericEqualityFilterOutput) ToTopicNumericEqualityFilterOutput() TopicNumericEqualityFilterOutput {
	return o
}

func (o TopicNumericEqualityFilterOutput) ToTopicNumericEqualityFilterOutputWithContext(ctx context.Context) TopicNumericEqualityFilterOutput {
	return o
}

func (o TopicNumericEqualityFilterOutput) ToTopicNumericEqualityFilterPtrOutput() TopicNumericEqualityFilterPtrOutput {
	return o.ToTopicNumericEqualityFilterPtrOutputWithContext(context.Background())
}

func (o TopicNumericEqualityFilterOutput) ToTopicNumericEqualityFilterPtrOutputWithContext(ctx context.Context) TopicNumericEqualityFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicNumericEqualityFilter) *TopicNumericEqualityFilter {
		return &v
	}).(TopicNumericEqualityFilterPtrOutput)
}

// An aggregation function that specifies how to calculate the value of a numeric field for a topic. Valid values for this structure are `NO_AGGREGATION` , `SUM` , `AVERAGE` , `COUNT` , `DISTINCT_COUNT` , `MAX` , `MEDIAN` , `MIN` , `STDEV` , `STDEVP` , `VAR` , and `VARP` .
func (o TopicNumericEqualityFilterOutput) Aggregation() TopicNamedFilterAggTypePtrOutput {
	return o.ApplyT(func(v TopicNumericEqualityFilter) *TopicNamedFilterAggType { return v.Aggregation }).(TopicNamedFilterAggTypePtrOutput)
}

// The constant used in a numeric equality filter.
func (o TopicNumericEqualityFilterOutput) Constant() TopicSingularFilterConstantPtrOutput {
	return o.ApplyT(func(v TopicNumericEqualityFilter) *TopicSingularFilterConstant { return v.Constant }).(TopicSingularFilterConstantPtrOutput)
}

type TopicNumericEqualityFilterPtrOutput struct{ *pulumi.OutputState }

func (TopicNumericEqualityFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicNumericEqualityFilter)(nil)).Elem()
}

func (o TopicNumericEqualityFilterPtrOutput) ToTopicNumericEqualityFilterPtrOutput() TopicNumericEqualityFilterPtrOutput {
	return o
}

func (o TopicNumericEqualityFilterPtrOutput) ToTopicNumericEqualityFilterPtrOutputWithContext(ctx context.Context) TopicNumericEqualityFilterPtrOutput {
	return o
}

func (o TopicNumericEqualityFilterPtrOutput) Elem() TopicNumericEqualityFilterOutput {
	return o.ApplyT(func(v *TopicNumericEqualityFilter) TopicNumericEqualityFilter {
		if v != nil {
			return *v
		}
		var ret TopicNumericEqualityFilter
		return ret
	}).(TopicNumericEqualityFilterOutput)
}

// An aggregation function that specifies how to calculate the value of a numeric field for a topic. Valid values for this structure are `NO_AGGREGATION` , `SUM` , `AVERAGE` , `COUNT` , `DISTINCT_COUNT` , `MAX` , `MEDIAN` , `MIN` , `STDEV` , `STDEVP` , `VAR` , and `VARP` .
func (o TopicNumericEqualityFilterPtrOutput) Aggregation() TopicNamedFilterAggTypePtrOutput {
	return o.ApplyT(func(v *TopicNumericEqualityFilter) *TopicNamedFilterAggType {
		if v == nil {
			return nil
		}
		return v.Aggregation
	}).(TopicNamedFilterAggTypePtrOutput)
}

// The constant used in a numeric equality filter.
func (o TopicNumericEqualityFilterPtrOutput) Constant() TopicSingularFilterConstantPtrOutput {
	return o.ApplyT(func(v *TopicNumericEqualityFilter) *TopicSingularFilterConstant {
		if v == nil {
			return nil
		}
		return v.Constant
	}).(TopicSingularFilterConstantPtrOutput)
}

type TopicNumericRangeFilter struct {
	// An aggregation function that specifies how to calculate the value of a numeric field for a topic, Valid values for this structure are `NO_AGGREGATION` , `SUM` , `AVERAGE` , `COUNT` , `DISTINCT_COUNT` , `MAX` , `MEDIAN` , `MIN` , `STDEV` , `STDEVP` , `VAR` , and `VARP` .
	Aggregation *TopicNamedFilterAggType `pulumi:"aggregation"`
	// The constant used in a numeric range filter.
	Constant *TopicRangeFilterConstant `pulumi:"constant"`
	// A Boolean value that indicates whether the endpoints of the numeric range are included in the filter. If set to true, topics whose numeric field value is equal to the endpoint values will be included in the filter. If set to false, topics whose numeric field value is equal to the endpoint values will be excluded from the filter.
	Inclusive *bool `pulumi:"inclusive"`
}

// TopicNumericRangeFilterInput is an input type that accepts TopicNumericRangeFilterArgs and TopicNumericRangeFilterOutput values.
// You can construct a concrete instance of `TopicNumericRangeFilterInput` via:
//
//	TopicNumericRangeFilterArgs{...}
type TopicNumericRangeFilterInput interface {
	pulumi.Input

	ToTopicNumericRangeFilterOutput() TopicNumericRangeFilterOutput
	ToTopicNumericRangeFilterOutputWithContext(context.Context) TopicNumericRangeFilterOutput
}

type TopicNumericRangeFilterArgs struct {
	// An aggregation function that specifies how to calculate the value of a numeric field for a topic, Valid values for this structure are `NO_AGGREGATION` , `SUM` , `AVERAGE` , `COUNT` , `DISTINCT_COUNT` , `MAX` , `MEDIAN` , `MIN` , `STDEV` , `STDEVP` , `VAR` , and `VARP` .
	Aggregation TopicNamedFilterAggTypePtrInput `pulumi:"aggregation"`
	// The constant used in a numeric range filter.
	Constant TopicRangeFilterConstantPtrInput `pulumi:"constant"`
	// A Boolean value that indicates whether the endpoints of the numeric range are included in the filter. If set to true, topics whose numeric field value is equal to the endpoint values will be included in the filter. If set to false, topics whose numeric field value is equal to the endpoint values will be excluded from the filter.
	Inclusive pulumi.BoolPtrInput `pulumi:"inclusive"`
}

func (TopicNumericRangeFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicNumericRangeFilter)(nil)).Elem()
}

func (i TopicNumericRangeFilterArgs) ToTopicNumericRangeFilterOutput() TopicNumericRangeFilterOutput {
	return i.ToTopicNumericRangeFilterOutputWithContext(context.Background())
}

func (i TopicNumericRangeFilterArgs) ToTopicNumericRangeFilterOutputWithContext(ctx context.Context) TopicNumericRangeFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicNumericRangeFilterOutput)
}

func (i TopicNumericRangeFilterArgs) ToTopicNumericRangeFilterPtrOutput() TopicNumericRangeFilterPtrOutput {
	return i.ToTopicNumericRangeFilterPtrOutputWithContext(context.Background())
}

func (i TopicNumericRangeFilterArgs) ToTopicNumericRangeFilterPtrOutputWithContext(ctx context.Context) TopicNumericRangeFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicNumericRangeFilterOutput).ToTopicNumericRangeFilterPtrOutputWithContext(ctx)
}

// TopicNumericRangeFilterPtrInput is an input type that accepts TopicNumericRangeFilterArgs, TopicNumericRangeFilterPtr and TopicNumericRangeFilterPtrOutput values.
// You can construct a concrete instance of `TopicNumericRangeFilterPtrInput` via:
//
//	        TopicNumericRangeFilterArgs{...}
//
//	or:
//
//	        nil
type TopicNumericRangeFilterPtrInput interface {
	pulumi.Input

	ToTopicNumericRangeFilterPtrOutput() TopicNumericRangeFilterPtrOutput
	ToTopicNumericRangeFilterPtrOutputWithContext(context.Context) TopicNumericRangeFilterPtrOutput
}

type topicNumericRangeFilterPtrType TopicNumericRangeFilterArgs

func TopicNumericRangeFilterPtr(v *TopicNumericRangeFilterArgs) TopicNumericRangeFilterPtrInput {
	return (*topicNumericRangeFilterPtrType)(v)
}

func (*topicNumericRangeFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicNumericRangeFilter)(nil)).Elem()
}

func (i *topicNumericRangeFilterPtrType) ToTopicNumericRangeFilterPtrOutput() TopicNumericRangeFilterPtrOutput {
	return i.ToTopicNumericRangeFilterPtrOutputWithContext(context.Background())
}

func (i *topicNumericRangeFilterPtrType) ToTopicNumericRangeFilterPtrOutputWithContext(ctx context.Context) TopicNumericRangeFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicNumericRangeFilterPtrOutput)
}

type TopicNumericRangeFilterOutput struct{ *pulumi.OutputState }

func (TopicNumericRangeFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicNumericRangeFilter)(nil)).Elem()
}

func (o TopicNumericRangeFilterOutput) ToTopicNumericRangeFilterOutput() TopicNumericRangeFilterOutput {
	return o
}

func (o TopicNumericRangeFilterOutput) ToTopicNumericRangeFilterOutputWithContext(ctx context.Context) TopicNumericRangeFilterOutput {
	return o
}

func (o TopicNumericRangeFilterOutput) ToTopicNumericRangeFilterPtrOutput() TopicNumericRangeFilterPtrOutput {
	return o.ToTopicNumericRangeFilterPtrOutputWithContext(context.Background())
}

func (o TopicNumericRangeFilterOutput) ToTopicNumericRangeFilterPtrOutputWithContext(ctx context.Context) TopicNumericRangeFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicNumericRangeFilter) *TopicNumericRangeFilter {
		return &v
	}).(TopicNumericRangeFilterPtrOutput)
}

// An aggregation function that specifies how to calculate the value of a numeric field for a topic, Valid values for this structure are `NO_AGGREGATION` , `SUM` , `AVERAGE` , `COUNT` , `DISTINCT_COUNT` , `MAX` , `MEDIAN` , `MIN` , `STDEV` , `STDEVP` , `VAR` , and `VARP` .
func (o TopicNumericRangeFilterOutput) Aggregation() TopicNamedFilterAggTypePtrOutput {
	return o.ApplyT(func(v TopicNumericRangeFilter) *TopicNamedFilterAggType { return v.Aggregation }).(TopicNamedFilterAggTypePtrOutput)
}

// The constant used in a numeric range filter.
func (o TopicNumericRangeFilterOutput) Constant() TopicRangeFilterConstantPtrOutput {
	return o.ApplyT(func(v TopicNumericRangeFilter) *TopicRangeFilterConstant { return v.Constant }).(TopicRangeFilterConstantPtrOutput)
}

// A Boolean value that indicates whether the endpoints of the numeric range are included in the filter. If set to true, topics whose numeric field value is equal to the endpoint values will be included in the filter. If set to false, topics whose numeric field value is equal to the endpoint values will be excluded from the filter.
func (o TopicNumericRangeFilterOutput) Inclusive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TopicNumericRangeFilter) *bool { return v.Inclusive }).(pulumi.BoolPtrOutput)
}

type TopicNumericRangeFilterPtrOutput struct{ *pulumi.OutputState }

func (TopicNumericRangeFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicNumericRangeFilter)(nil)).Elem()
}

func (o TopicNumericRangeFilterPtrOutput) ToTopicNumericRangeFilterPtrOutput() TopicNumericRangeFilterPtrOutput {
	return o
}

func (o TopicNumericRangeFilterPtrOutput) ToTopicNumericRangeFilterPtrOutputWithContext(ctx context.Context) TopicNumericRangeFilterPtrOutput {
	return o
}

func (o TopicNumericRangeFilterPtrOutput) Elem() TopicNumericRangeFilterOutput {
	return o.ApplyT(func(v *TopicNumericRangeFilter) TopicNumericRangeFilter {
		if v != nil {
			return *v
		}
		var ret TopicNumericRangeFilter
		return ret
	}).(TopicNumericRangeFilterOutput)
}

// An aggregation function that specifies how to calculate the value of a numeric field for a topic, Valid values for this structure are `NO_AGGREGATION` , `SUM` , `AVERAGE` , `COUNT` , `DISTINCT_COUNT` , `MAX` , `MEDIAN` , `MIN` , `STDEV` , `STDEVP` , `VAR` , and `VARP` .
func (o TopicNumericRangeFilterPtrOutput) Aggregation() TopicNamedFilterAggTypePtrOutput {
	return o.ApplyT(func(v *TopicNumericRangeFilter) *TopicNamedFilterAggType {
		if v == nil {
			return nil
		}
		return v.Aggregation
	}).(TopicNamedFilterAggTypePtrOutput)
}

// The constant used in a numeric range filter.
func (o TopicNumericRangeFilterPtrOutput) Constant() TopicRangeFilterConstantPtrOutput {
	return o.ApplyT(func(v *TopicNumericRangeFilter) *TopicRangeFilterConstant {
		if v == nil {
			return nil
		}
		return v.Constant
	}).(TopicRangeFilterConstantPtrOutput)
}

// A Boolean value that indicates whether the endpoints of the numeric range are included in the filter. If set to true, topics whose numeric field value is equal to the endpoint values will be included in the filter. If set to false, topics whose numeric field value is equal to the endpoint values will be excluded from the filter.
func (o TopicNumericRangeFilterPtrOutput) Inclusive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TopicNumericRangeFilter) *bool {
		if v == nil {
			return nil
		}
		return v.Inclusive
	}).(pulumi.BoolPtrOutput)
}

type TopicRangeConstant struct {
	// The maximum value for a range constant.
	Maximum *string `pulumi:"maximum"`
	// The minimum value for a range constant.
	Minimum *string `pulumi:"minimum"`
}

// TopicRangeConstantInput is an input type that accepts TopicRangeConstantArgs and TopicRangeConstantOutput values.
// You can construct a concrete instance of `TopicRangeConstantInput` via:
//
//	TopicRangeConstantArgs{...}
type TopicRangeConstantInput interface {
	pulumi.Input

	ToTopicRangeConstantOutput() TopicRangeConstantOutput
	ToTopicRangeConstantOutputWithContext(context.Context) TopicRangeConstantOutput
}

type TopicRangeConstantArgs struct {
	// The maximum value for a range constant.
	Maximum pulumi.StringPtrInput `pulumi:"maximum"`
	// The minimum value for a range constant.
	Minimum pulumi.StringPtrInput `pulumi:"minimum"`
}

func (TopicRangeConstantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRangeConstant)(nil)).Elem()
}

func (i TopicRangeConstantArgs) ToTopicRangeConstantOutput() TopicRangeConstantOutput {
	return i.ToTopicRangeConstantOutputWithContext(context.Background())
}

func (i TopicRangeConstantArgs) ToTopicRangeConstantOutputWithContext(ctx context.Context) TopicRangeConstantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRangeConstantOutput)
}

func (i TopicRangeConstantArgs) ToTopicRangeConstantPtrOutput() TopicRangeConstantPtrOutput {
	return i.ToTopicRangeConstantPtrOutputWithContext(context.Background())
}

func (i TopicRangeConstantArgs) ToTopicRangeConstantPtrOutputWithContext(ctx context.Context) TopicRangeConstantPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRangeConstantOutput).ToTopicRangeConstantPtrOutputWithContext(ctx)
}

// TopicRangeConstantPtrInput is an input type that accepts TopicRangeConstantArgs, TopicRangeConstantPtr and TopicRangeConstantPtrOutput values.
// You can construct a concrete instance of `TopicRangeConstantPtrInput` via:
//
//	        TopicRangeConstantArgs{...}
//
//	or:
//
//	        nil
type TopicRangeConstantPtrInput interface {
	pulumi.Input

	ToTopicRangeConstantPtrOutput() TopicRangeConstantPtrOutput
	ToTopicRangeConstantPtrOutputWithContext(context.Context) TopicRangeConstantPtrOutput
}

type topicRangeConstantPtrType TopicRangeConstantArgs

func TopicRangeConstantPtr(v *TopicRangeConstantArgs) TopicRangeConstantPtrInput {
	return (*topicRangeConstantPtrType)(v)
}

func (*topicRangeConstantPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicRangeConstant)(nil)).Elem()
}

func (i *topicRangeConstantPtrType) ToTopicRangeConstantPtrOutput() TopicRangeConstantPtrOutput {
	return i.ToTopicRangeConstantPtrOutputWithContext(context.Background())
}

func (i *topicRangeConstantPtrType) ToTopicRangeConstantPtrOutputWithContext(ctx context.Context) TopicRangeConstantPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRangeConstantPtrOutput)
}

type TopicRangeConstantOutput struct{ *pulumi.OutputState }

func (TopicRangeConstantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRangeConstant)(nil)).Elem()
}

func (o TopicRangeConstantOutput) ToTopicRangeConstantOutput() TopicRangeConstantOutput {
	return o
}

func (o TopicRangeConstantOutput) ToTopicRangeConstantOutputWithContext(ctx context.Context) TopicRangeConstantOutput {
	return o
}

func (o TopicRangeConstantOutput) ToTopicRangeConstantPtrOutput() TopicRangeConstantPtrOutput {
	return o.ToTopicRangeConstantPtrOutputWithContext(context.Background())
}

func (o TopicRangeConstantOutput) ToTopicRangeConstantPtrOutputWithContext(ctx context.Context) TopicRangeConstantPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicRangeConstant) *TopicRangeConstant {
		return &v
	}).(TopicRangeConstantPtrOutput)
}

// The maximum value for a range constant.
func (o TopicRangeConstantOutput) Maximum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicRangeConstant) *string { return v.Maximum }).(pulumi.StringPtrOutput)
}

// The minimum value for a range constant.
func (o TopicRangeConstantOutput) Minimum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicRangeConstant) *string { return v.Minimum }).(pulumi.StringPtrOutput)
}

type TopicRangeConstantPtrOutput struct{ *pulumi.OutputState }

func (TopicRangeConstantPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicRangeConstant)(nil)).Elem()
}

func (o TopicRangeConstantPtrOutput) ToTopicRangeConstantPtrOutput() TopicRangeConstantPtrOutput {
	return o
}

func (o TopicRangeConstantPtrOutput) ToTopicRangeConstantPtrOutputWithContext(ctx context.Context) TopicRangeConstantPtrOutput {
	return o
}

func (o TopicRangeConstantPtrOutput) Elem() TopicRangeConstantOutput {
	return o.ApplyT(func(v *TopicRangeConstant) TopicRangeConstant {
		if v != nil {
			return *v
		}
		var ret TopicRangeConstant
		return ret
	}).(TopicRangeConstantOutput)
}

// The maximum value for a range constant.
func (o TopicRangeConstantPtrOutput) Maximum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicRangeConstant) *string {
		if v == nil {
			return nil
		}
		return v.Maximum
	}).(pulumi.StringPtrOutput)
}

// The minimum value for a range constant.
func (o TopicRangeConstantPtrOutput) Minimum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicRangeConstant) *string {
		if v == nil {
			return nil
		}
		return v.Minimum
	}).(pulumi.StringPtrOutput)
}

type TopicRangeFilterConstant struct {
	// The data type of the constant value that is used in a range filter. Valid values for this structure are `RANGE` .
	ConstantType *TopicConstantType `pulumi:"constantType"`
	// The value of the constant that is used to specify the endpoints of a range filter.
	RangeConstant *TopicRangeConstant `pulumi:"rangeConstant"`
}

// TopicRangeFilterConstantInput is an input type that accepts TopicRangeFilterConstantArgs and TopicRangeFilterConstantOutput values.
// You can construct a concrete instance of `TopicRangeFilterConstantInput` via:
//
//	TopicRangeFilterConstantArgs{...}
type TopicRangeFilterConstantInput interface {
	pulumi.Input

	ToTopicRangeFilterConstantOutput() TopicRangeFilterConstantOutput
	ToTopicRangeFilterConstantOutputWithContext(context.Context) TopicRangeFilterConstantOutput
}

type TopicRangeFilterConstantArgs struct {
	// The data type of the constant value that is used in a range filter. Valid values for this structure are `RANGE` .
	ConstantType TopicConstantTypePtrInput `pulumi:"constantType"`
	// The value of the constant that is used to specify the endpoints of a range filter.
	RangeConstant TopicRangeConstantPtrInput `pulumi:"rangeConstant"`
}

func (TopicRangeFilterConstantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRangeFilterConstant)(nil)).Elem()
}

func (i TopicRangeFilterConstantArgs) ToTopicRangeFilterConstantOutput() TopicRangeFilterConstantOutput {
	return i.ToTopicRangeFilterConstantOutputWithContext(context.Background())
}

func (i TopicRangeFilterConstantArgs) ToTopicRangeFilterConstantOutputWithContext(ctx context.Context) TopicRangeFilterConstantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRangeFilterConstantOutput)
}

func (i TopicRangeFilterConstantArgs) ToTopicRangeFilterConstantPtrOutput() TopicRangeFilterConstantPtrOutput {
	return i.ToTopicRangeFilterConstantPtrOutputWithContext(context.Background())
}

func (i TopicRangeFilterConstantArgs) ToTopicRangeFilterConstantPtrOutputWithContext(ctx context.Context) TopicRangeFilterConstantPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRangeFilterConstantOutput).ToTopicRangeFilterConstantPtrOutputWithContext(ctx)
}

// TopicRangeFilterConstantPtrInput is an input type that accepts TopicRangeFilterConstantArgs, TopicRangeFilterConstantPtr and TopicRangeFilterConstantPtrOutput values.
// You can construct a concrete instance of `TopicRangeFilterConstantPtrInput` via:
//
//	        TopicRangeFilterConstantArgs{...}
//
//	or:
//
//	        nil
type TopicRangeFilterConstantPtrInput interface {
	pulumi.Input

	ToTopicRangeFilterConstantPtrOutput() TopicRangeFilterConstantPtrOutput
	ToTopicRangeFilterConstantPtrOutputWithContext(context.Context) TopicRangeFilterConstantPtrOutput
}

type topicRangeFilterConstantPtrType TopicRangeFilterConstantArgs

func TopicRangeFilterConstantPtr(v *TopicRangeFilterConstantArgs) TopicRangeFilterConstantPtrInput {
	return (*topicRangeFilterConstantPtrType)(v)
}

func (*topicRangeFilterConstantPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicRangeFilterConstant)(nil)).Elem()
}

func (i *topicRangeFilterConstantPtrType) ToTopicRangeFilterConstantPtrOutput() TopicRangeFilterConstantPtrOutput {
	return i.ToTopicRangeFilterConstantPtrOutputWithContext(context.Background())
}

func (i *topicRangeFilterConstantPtrType) ToTopicRangeFilterConstantPtrOutputWithContext(ctx context.Context) TopicRangeFilterConstantPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRangeFilterConstantPtrOutput)
}

type TopicRangeFilterConstantOutput struct{ *pulumi.OutputState }

func (TopicRangeFilterConstantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRangeFilterConstant)(nil)).Elem()
}

func (o TopicRangeFilterConstantOutput) ToTopicRangeFilterConstantOutput() TopicRangeFilterConstantOutput {
	return o
}

func (o TopicRangeFilterConstantOutput) ToTopicRangeFilterConstantOutputWithContext(ctx context.Context) TopicRangeFilterConstantOutput {
	return o
}

func (o TopicRangeFilterConstantOutput) ToTopicRangeFilterConstantPtrOutput() TopicRangeFilterConstantPtrOutput {
	return o.ToTopicRangeFilterConstantPtrOutputWithContext(context.Background())
}

func (o TopicRangeFilterConstantOutput) ToTopicRangeFilterConstantPtrOutputWithContext(ctx context.Context) TopicRangeFilterConstantPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicRangeFilterConstant) *TopicRangeFilterConstant {
		return &v
	}).(TopicRangeFilterConstantPtrOutput)
}

// The data type of the constant value that is used in a range filter. Valid values for this structure are `RANGE` .
func (o TopicRangeFilterConstantOutput) ConstantType() TopicConstantTypePtrOutput {
	return o.ApplyT(func(v TopicRangeFilterConstant) *TopicConstantType { return v.ConstantType }).(TopicConstantTypePtrOutput)
}

// The value of the constant that is used to specify the endpoints of a range filter.
func (o TopicRangeFilterConstantOutput) RangeConstant() TopicRangeConstantPtrOutput {
	return o.ApplyT(func(v TopicRangeFilterConstant) *TopicRangeConstant { return v.RangeConstant }).(TopicRangeConstantPtrOutput)
}

type TopicRangeFilterConstantPtrOutput struct{ *pulumi.OutputState }

func (TopicRangeFilterConstantPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicRangeFilterConstant)(nil)).Elem()
}

func (o TopicRangeFilterConstantPtrOutput) ToTopicRangeFilterConstantPtrOutput() TopicRangeFilterConstantPtrOutput {
	return o
}

func (o TopicRangeFilterConstantPtrOutput) ToTopicRangeFilterConstantPtrOutputWithContext(ctx context.Context) TopicRangeFilterConstantPtrOutput {
	return o
}

func (o TopicRangeFilterConstantPtrOutput) Elem() TopicRangeFilterConstantOutput {
	return o.ApplyT(func(v *TopicRangeFilterConstant) TopicRangeFilterConstant {
		if v != nil {
			return *v
		}
		var ret TopicRangeFilterConstant
		return ret
	}).(TopicRangeFilterConstantOutput)
}

// The data type of the constant value that is used in a range filter. Valid values for this structure are `RANGE` .
func (o TopicRangeFilterConstantPtrOutput) ConstantType() TopicConstantTypePtrOutput {
	return o.ApplyT(func(v *TopicRangeFilterConstant) *TopicConstantType {
		if v == nil {
			return nil
		}
		return v.ConstantType
	}).(TopicConstantTypePtrOutput)
}

// The value of the constant that is used to specify the endpoints of a range filter.
func (o TopicRangeFilterConstantPtrOutput) RangeConstant() TopicRangeConstantPtrOutput {
	return o.ApplyT(func(v *TopicRangeFilterConstant) *TopicRangeConstant {
		if v == nil {
			return nil
		}
		return v.RangeConstant
	}).(TopicRangeConstantPtrOutput)
}

type TopicRelativeDateFilter struct {
	// The constant used in a relative date filter.
	Constant *TopicSingularFilterConstant `pulumi:"constant"`
	// The function to be used in a relative date filter to determine the range of dates to include in the results. Valid values for this structure are `BEFORE` , `AFTER` , and `BETWEEN` .
	RelativeDateFilterFunction *TopicRelativeDateFilterFunction `pulumi:"relativeDateFilterFunction"`
	// The level of time precision that is used to aggregate `DateTime` values.
	TimeGranularity *TopicTimeGranularity `pulumi:"timeGranularity"`
}

// TopicRelativeDateFilterInput is an input type that accepts TopicRelativeDateFilterArgs and TopicRelativeDateFilterOutput values.
// You can construct a concrete instance of `TopicRelativeDateFilterInput` via:
//
//	TopicRelativeDateFilterArgs{...}
type TopicRelativeDateFilterInput interface {
	pulumi.Input

	ToTopicRelativeDateFilterOutput() TopicRelativeDateFilterOutput
	ToTopicRelativeDateFilterOutputWithContext(context.Context) TopicRelativeDateFilterOutput
}

type TopicRelativeDateFilterArgs struct {
	// The constant used in a relative date filter.
	Constant TopicSingularFilterConstantPtrInput `pulumi:"constant"`
	// The function to be used in a relative date filter to determine the range of dates to include in the results. Valid values for this structure are `BEFORE` , `AFTER` , and `BETWEEN` .
	RelativeDateFilterFunction TopicRelativeDateFilterFunctionPtrInput `pulumi:"relativeDateFilterFunction"`
	// The level of time precision that is used to aggregate `DateTime` values.
	TimeGranularity TopicTimeGranularityPtrInput `pulumi:"timeGranularity"`
}

func (TopicRelativeDateFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRelativeDateFilter)(nil)).Elem()
}

func (i TopicRelativeDateFilterArgs) ToTopicRelativeDateFilterOutput() TopicRelativeDateFilterOutput {
	return i.ToTopicRelativeDateFilterOutputWithContext(context.Background())
}

func (i TopicRelativeDateFilterArgs) ToTopicRelativeDateFilterOutputWithContext(ctx context.Context) TopicRelativeDateFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRelativeDateFilterOutput)
}

func (i TopicRelativeDateFilterArgs) ToTopicRelativeDateFilterPtrOutput() TopicRelativeDateFilterPtrOutput {
	return i.ToTopicRelativeDateFilterPtrOutputWithContext(context.Background())
}

func (i TopicRelativeDateFilterArgs) ToTopicRelativeDateFilterPtrOutputWithContext(ctx context.Context) TopicRelativeDateFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRelativeDateFilterOutput).ToTopicRelativeDateFilterPtrOutputWithContext(ctx)
}

// TopicRelativeDateFilterPtrInput is an input type that accepts TopicRelativeDateFilterArgs, TopicRelativeDateFilterPtr and TopicRelativeDateFilterPtrOutput values.
// You can construct a concrete instance of `TopicRelativeDateFilterPtrInput` via:
//
//	        TopicRelativeDateFilterArgs{...}
//
//	or:
//
//	        nil
type TopicRelativeDateFilterPtrInput interface {
	pulumi.Input

	ToTopicRelativeDateFilterPtrOutput() TopicRelativeDateFilterPtrOutput
	ToTopicRelativeDateFilterPtrOutputWithContext(context.Context) TopicRelativeDateFilterPtrOutput
}

type topicRelativeDateFilterPtrType TopicRelativeDateFilterArgs

func TopicRelativeDateFilterPtr(v *TopicRelativeDateFilterArgs) TopicRelativeDateFilterPtrInput {
	return (*topicRelativeDateFilterPtrType)(v)
}

func (*topicRelativeDateFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicRelativeDateFilter)(nil)).Elem()
}

func (i *topicRelativeDateFilterPtrType) ToTopicRelativeDateFilterPtrOutput() TopicRelativeDateFilterPtrOutput {
	return i.ToTopicRelativeDateFilterPtrOutputWithContext(context.Background())
}

func (i *topicRelativeDateFilterPtrType) ToTopicRelativeDateFilterPtrOutputWithContext(ctx context.Context) TopicRelativeDateFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRelativeDateFilterPtrOutput)
}

type TopicRelativeDateFilterOutput struct{ *pulumi.OutputState }

func (TopicRelativeDateFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRelativeDateFilter)(nil)).Elem()
}

func (o TopicRelativeDateFilterOutput) ToTopicRelativeDateFilterOutput() TopicRelativeDateFilterOutput {
	return o
}

func (o TopicRelativeDateFilterOutput) ToTopicRelativeDateFilterOutputWithContext(ctx context.Context) TopicRelativeDateFilterOutput {
	return o
}

func (o TopicRelativeDateFilterOutput) ToTopicRelativeDateFilterPtrOutput() TopicRelativeDateFilterPtrOutput {
	return o.ToTopicRelativeDateFilterPtrOutputWithContext(context.Background())
}

func (o TopicRelativeDateFilterOutput) ToTopicRelativeDateFilterPtrOutputWithContext(ctx context.Context) TopicRelativeDateFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicRelativeDateFilter) *TopicRelativeDateFilter {
		return &v
	}).(TopicRelativeDateFilterPtrOutput)
}

// The constant used in a relative date filter.
func (o TopicRelativeDateFilterOutput) Constant() TopicSingularFilterConstantPtrOutput {
	return o.ApplyT(func(v TopicRelativeDateFilter) *TopicSingularFilterConstant { return v.Constant }).(TopicSingularFilterConstantPtrOutput)
}

// The function to be used in a relative date filter to determine the range of dates to include in the results. Valid values for this structure are `BEFORE` , `AFTER` , and `BETWEEN` .
func (o TopicRelativeDateFilterOutput) RelativeDateFilterFunction() TopicRelativeDateFilterFunctionPtrOutput {
	return o.ApplyT(func(v TopicRelativeDateFilter) *TopicRelativeDateFilterFunction { return v.RelativeDateFilterFunction }).(TopicRelativeDateFilterFunctionPtrOutput)
}

// The level of time precision that is used to aggregate `DateTime` values.
func (o TopicRelativeDateFilterOutput) TimeGranularity() TopicTimeGranularityPtrOutput {
	return o.ApplyT(func(v TopicRelativeDateFilter) *TopicTimeGranularity { return v.TimeGranularity }).(TopicTimeGranularityPtrOutput)
}

type TopicRelativeDateFilterPtrOutput struct{ *pulumi.OutputState }

func (TopicRelativeDateFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicRelativeDateFilter)(nil)).Elem()
}

func (o TopicRelativeDateFilterPtrOutput) ToTopicRelativeDateFilterPtrOutput() TopicRelativeDateFilterPtrOutput {
	return o
}

func (o TopicRelativeDateFilterPtrOutput) ToTopicRelativeDateFilterPtrOutputWithContext(ctx context.Context) TopicRelativeDateFilterPtrOutput {
	return o
}

func (o TopicRelativeDateFilterPtrOutput) Elem() TopicRelativeDateFilterOutput {
	return o.ApplyT(func(v *TopicRelativeDateFilter) TopicRelativeDateFilter {
		if v != nil {
			return *v
		}
		var ret TopicRelativeDateFilter
		return ret
	}).(TopicRelativeDateFilterOutput)
}

// The constant used in a relative date filter.
func (o TopicRelativeDateFilterPtrOutput) Constant() TopicSingularFilterConstantPtrOutput {
	return o.ApplyT(func(v *TopicRelativeDateFilter) *TopicSingularFilterConstant {
		if v == nil {
			return nil
		}
		return v.Constant
	}).(TopicSingularFilterConstantPtrOutput)
}

// The function to be used in a relative date filter to determine the range of dates to include in the results. Valid values for this structure are `BEFORE` , `AFTER` , and `BETWEEN` .
func (o TopicRelativeDateFilterPtrOutput) RelativeDateFilterFunction() TopicRelativeDateFilterFunctionPtrOutput {
	return o.ApplyT(func(v *TopicRelativeDateFilter) *TopicRelativeDateFilterFunction {
		if v == nil {
			return nil
		}
		return v.RelativeDateFilterFunction
	}).(TopicRelativeDateFilterFunctionPtrOutput)
}

// The level of time precision that is used to aggregate `DateTime` values.
func (o TopicRelativeDateFilterPtrOutput) TimeGranularity() TopicTimeGranularityPtrOutput {
	return o.ApplyT(func(v *TopicRelativeDateFilter) *TopicTimeGranularity {
		if v == nil {
			return nil
		}
		return v.TimeGranularity
	}).(TopicTimeGranularityPtrOutput)
}

type TopicSemanticEntityType struct {
	// The semantic entity sub type name.
	SubTypeName *string `pulumi:"subTypeName"`
	// The semantic entity type name.
	TypeName *string `pulumi:"typeName"`
	// The semantic entity type parameters.
	TypeParameters map[string]string `pulumi:"typeParameters"`
}

// TopicSemanticEntityTypeInput is an input type that accepts TopicSemanticEntityTypeArgs and TopicSemanticEntityTypeOutput values.
// You can construct a concrete instance of `TopicSemanticEntityTypeInput` via:
//
//	TopicSemanticEntityTypeArgs{...}
type TopicSemanticEntityTypeInput interface {
	pulumi.Input

	ToTopicSemanticEntityTypeOutput() TopicSemanticEntityTypeOutput
	ToTopicSemanticEntityTypeOutputWithContext(context.Context) TopicSemanticEntityTypeOutput
}

type TopicSemanticEntityTypeArgs struct {
	// The semantic entity sub type name.
	SubTypeName pulumi.StringPtrInput `pulumi:"subTypeName"`
	// The semantic entity type name.
	TypeName pulumi.StringPtrInput `pulumi:"typeName"`
	// The semantic entity type parameters.
	TypeParameters pulumi.StringMapInput `pulumi:"typeParameters"`
}

func (TopicSemanticEntityTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSemanticEntityType)(nil)).Elem()
}

func (i TopicSemanticEntityTypeArgs) ToTopicSemanticEntityTypeOutput() TopicSemanticEntityTypeOutput {
	return i.ToTopicSemanticEntityTypeOutputWithContext(context.Background())
}

func (i TopicSemanticEntityTypeArgs) ToTopicSemanticEntityTypeOutputWithContext(ctx context.Context) TopicSemanticEntityTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSemanticEntityTypeOutput)
}

func (i TopicSemanticEntityTypeArgs) ToTopicSemanticEntityTypePtrOutput() TopicSemanticEntityTypePtrOutput {
	return i.ToTopicSemanticEntityTypePtrOutputWithContext(context.Background())
}

func (i TopicSemanticEntityTypeArgs) ToTopicSemanticEntityTypePtrOutputWithContext(ctx context.Context) TopicSemanticEntityTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSemanticEntityTypeOutput).ToTopicSemanticEntityTypePtrOutputWithContext(ctx)
}

// TopicSemanticEntityTypePtrInput is an input type that accepts TopicSemanticEntityTypeArgs, TopicSemanticEntityTypePtr and TopicSemanticEntityTypePtrOutput values.
// You can construct a concrete instance of `TopicSemanticEntityTypePtrInput` via:
//
//	        TopicSemanticEntityTypeArgs{...}
//
//	or:
//
//	        nil
type TopicSemanticEntityTypePtrInput interface {
	pulumi.Input

	ToTopicSemanticEntityTypePtrOutput() TopicSemanticEntityTypePtrOutput
	ToTopicSemanticEntityTypePtrOutputWithContext(context.Context) TopicSemanticEntityTypePtrOutput
}

type topicSemanticEntityTypePtrType TopicSemanticEntityTypeArgs

func TopicSemanticEntityTypePtr(v *TopicSemanticEntityTypeArgs) TopicSemanticEntityTypePtrInput {
	return (*topicSemanticEntityTypePtrType)(v)
}

func (*topicSemanticEntityTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicSemanticEntityType)(nil)).Elem()
}

func (i *topicSemanticEntityTypePtrType) ToTopicSemanticEntityTypePtrOutput() TopicSemanticEntityTypePtrOutput {
	return i.ToTopicSemanticEntityTypePtrOutputWithContext(context.Background())
}

func (i *topicSemanticEntityTypePtrType) ToTopicSemanticEntityTypePtrOutputWithContext(ctx context.Context) TopicSemanticEntityTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSemanticEntityTypePtrOutput)
}

type TopicSemanticEntityTypeOutput struct{ *pulumi.OutputState }

func (TopicSemanticEntityTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSemanticEntityType)(nil)).Elem()
}

func (o TopicSemanticEntityTypeOutput) ToTopicSemanticEntityTypeOutput() TopicSemanticEntityTypeOutput {
	return o
}

func (o TopicSemanticEntityTypeOutput) ToTopicSemanticEntityTypeOutputWithContext(ctx context.Context) TopicSemanticEntityTypeOutput {
	return o
}

func (o TopicSemanticEntityTypeOutput) ToTopicSemanticEntityTypePtrOutput() TopicSemanticEntityTypePtrOutput {
	return o.ToTopicSemanticEntityTypePtrOutputWithContext(context.Background())
}

func (o TopicSemanticEntityTypeOutput) ToTopicSemanticEntityTypePtrOutputWithContext(ctx context.Context) TopicSemanticEntityTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicSemanticEntityType) *TopicSemanticEntityType {
		return &v
	}).(TopicSemanticEntityTypePtrOutput)
}

// The semantic entity sub type name.
func (o TopicSemanticEntityTypeOutput) SubTypeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicSemanticEntityType) *string { return v.SubTypeName }).(pulumi.StringPtrOutput)
}

// The semantic entity type name.
func (o TopicSemanticEntityTypeOutput) TypeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicSemanticEntityType) *string { return v.TypeName }).(pulumi.StringPtrOutput)
}

// The semantic entity type parameters.
func (o TopicSemanticEntityTypeOutput) TypeParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v TopicSemanticEntityType) map[string]string { return v.TypeParameters }).(pulumi.StringMapOutput)
}

type TopicSemanticEntityTypePtrOutput struct{ *pulumi.OutputState }

func (TopicSemanticEntityTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicSemanticEntityType)(nil)).Elem()
}

func (o TopicSemanticEntityTypePtrOutput) ToTopicSemanticEntityTypePtrOutput() TopicSemanticEntityTypePtrOutput {
	return o
}

func (o TopicSemanticEntityTypePtrOutput) ToTopicSemanticEntityTypePtrOutputWithContext(ctx context.Context) TopicSemanticEntityTypePtrOutput {
	return o
}

func (o TopicSemanticEntityTypePtrOutput) Elem() TopicSemanticEntityTypeOutput {
	return o.ApplyT(func(v *TopicSemanticEntityType) TopicSemanticEntityType {
		if v != nil {
			return *v
		}
		var ret TopicSemanticEntityType
		return ret
	}).(TopicSemanticEntityTypeOutput)
}

// The semantic entity sub type name.
func (o TopicSemanticEntityTypePtrOutput) SubTypeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicSemanticEntityType) *string {
		if v == nil {
			return nil
		}
		return v.SubTypeName
	}).(pulumi.StringPtrOutput)
}

// The semantic entity type name.
func (o TopicSemanticEntityTypePtrOutput) TypeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicSemanticEntityType) *string {
		if v == nil {
			return nil
		}
		return v.TypeName
	}).(pulumi.StringPtrOutput)
}

// The semantic entity type parameters.
func (o TopicSemanticEntityTypePtrOutput) TypeParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TopicSemanticEntityType) map[string]string {
		if v == nil {
			return nil
		}
		return v.TypeParameters
	}).(pulumi.StringMapOutput)
}

type TopicSemanticType struct {
	// The semantic type falsey cell value.
	FalseyCellValue *string `pulumi:"falseyCellValue"`
	// The other names or aliases for the false cell value.
	FalseyCellValueSynonyms []string `pulumi:"falseyCellValueSynonyms"`
	// The semantic type sub type name.
	SubTypeName *string `pulumi:"subTypeName"`
	// The semantic type truthy cell value.
	TruthyCellValue *string `pulumi:"truthyCellValue"`
	// The other names or aliases for the true cell value.
	TruthyCellValueSynonyms []string `pulumi:"truthyCellValueSynonyms"`
	// The semantic type name.
	TypeName *string `pulumi:"typeName"`
	// The semantic type parameters.
	TypeParameters map[string]string `pulumi:"typeParameters"`
}

// TopicSemanticTypeInput is an input type that accepts TopicSemanticTypeArgs and TopicSemanticTypeOutput values.
// You can construct a concrete instance of `TopicSemanticTypeInput` via:
//
//	TopicSemanticTypeArgs{...}
type TopicSemanticTypeInput interface {
	pulumi.Input

	ToTopicSemanticTypeOutput() TopicSemanticTypeOutput
	ToTopicSemanticTypeOutputWithContext(context.Context) TopicSemanticTypeOutput
}

type TopicSemanticTypeArgs struct {
	// The semantic type falsey cell value.
	FalseyCellValue pulumi.StringPtrInput `pulumi:"falseyCellValue"`
	// The other names or aliases for the false cell value.
	FalseyCellValueSynonyms pulumi.StringArrayInput `pulumi:"falseyCellValueSynonyms"`
	// The semantic type sub type name.
	SubTypeName pulumi.StringPtrInput `pulumi:"subTypeName"`
	// The semantic type truthy cell value.
	TruthyCellValue pulumi.StringPtrInput `pulumi:"truthyCellValue"`
	// The other names or aliases for the true cell value.
	TruthyCellValueSynonyms pulumi.StringArrayInput `pulumi:"truthyCellValueSynonyms"`
	// The semantic type name.
	TypeName pulumi.StringPtrInput `pulumi:"typeName"`
	// The semantic type parameters.
	TypeParameters pulumi.StringMapInput `pulumi:"typeParameters"`
}

func (TopicSemanticTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSemanticType)(nil)).Elem()
}

func (i TopicSemanticTypeArgs) ToTopicSemanticTypeOutput() TopicSemanticTypeOutput {
	return i.ToTopicSemanticTypeOutputWithContext(context.Background())
}

func (i TopicSemanticTypeArgs) ToTopicSemanticTypeOutputWithContext(ctx context.Context) TopicSemanticTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSemanticTypeOutput)
}

func (i TopicSemanticTypeArgs) ToTopicSemanticTypePtrOutput() TopicSemanticTypePtrOutput {
	return i.ToTopicSemanticTypePtrOutputWithContext(context.Background())
}

func (i TopicSemanticTypeArgs) ToTopicSemanticTypePtrOutputWithContext(ctx context.Context) TopicSemanticTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSemanticTypeOutput).ToTopicSemanticTypePtrOutputWithContext(ctx)
}

// TopicSemanticTypePtrInput is an input type that accepts TopicSemanticTypeArgs, TopicSemanticTypePtr and TopicSemanticTypePtrOutput values.
// You can construct a concrete instance of `TopicSemanticTypePtrInput` via:
//
//	        TopicSemanticTypeArgs{...}
//
//	or:
//
//	        nil
type TopicSemanticTypePtrInput interface {
	pulumi.Input

	ToTopicSemanticTypePtrOutput() TopicSemanticTypePtrOutput
	ToTopicSemanticTypePtrOutputWithContext(context.Context) TopicSemanticTypePtrOutput
}

type topicSemanticTypePtrType TopicSemanticTypeArgs

func TopicSemanticTypePtr(v *TopicSemanticTypeArgs) TopicSemanticTypePtrInput {
	return (*topicSemanticTypePtrType)(v)
}

func (*topicSemanticTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicSemanticType)(nil)).Elem()
}

func (i *topicSemanticTypePtrType) ToTopicSemanticTypePtrOutput() TopicSemanticTypePtrOutput {
	return i.ToTopicSemanticTypePtrOutputWithContext(context.Background())
}

func (i *topicSemanticTypePtrType) ToTopicSemanticTypePtrOutputWithContext(ctx context.Context) TopicSemanticTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSemanticTypePtrOutput)
}

type TopicSemanticTypeOutput struct{ *pulumi.OutputState }

func (TopicSemanticTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSemanticType)(nil)).Elem()
}

func (o TopicSemanticTypeOutput) ToTopicSemanticTypeOutput() TopicSemanticTypeOutput {
	return o
}

func (o TopicSemanticTypeOutput) ToTopicSemanticTypeOutputWithContext(ctx context.Context) TopicSemanticTypeOutput {
	return o
}

func (o TopicSemanticTypeOutput) ToTopicSemanticTypePtrOutput() TopicSemanticTypePtrOutput {
	return o.ToTopicSemanticTypePtrOutputWithContext(context.Background())
}

func (o TopicSemanticTypeOutput) ToTopicSemanticTypePtrOutputWithContext(ctx context.Context) TopicSemanticTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicSemanticType) *TopicSemanticType {
		return &v
	}).(TopicSemanticTypePtrOutput)
}

// The semantic type falsey cell value.
func (o TopicSemanticTypeOutput) FalseyCellValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicSemanticType) *string { return v.FalseyCellValue }).(pulumi.StringPtrOutput)
}

// The other names or aliases for the false cell value.
func (o TopicSemanticTypeOutput) FalseyCellValueSynonyms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TopicSemanticType) []string { return v.FalseyCellValueSynonyms }).(pulumi.StringArrayOutput)
}

// The semantic type sub type name.
func (o TopicSemanticTypeOutput) SubTypeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicSemanticType) *string { return v.SubTypeName }).(pulumi.StringPtrOutput)
}

// The semantic type truthy cell value.
func (o TopicSemanticTypeOutput) TruthyCellValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicSemanticType) *string { return v.TruthyCellValue }).(pulumi.StringPtrOutput)
}

// The other names or aliases for the true cell value.
func (o TopicSemanticTypeOutput) TruthyCellValueSynonyms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TopicSemanticType) []string { return v.TruthyCellValueSynonyms }).(pulumi.StringArrayOutput)
}

// The semantic type name.
func (o TopicSemanticTypeOutput) TypeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicSemanticType) *string { return v.TypeName }).(pulumi.StringPtrOutput)
}

// The semantic type parameters.
func (o TopicSemanticTypeOutput) TypeParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v TopicSemanticType) map[string]string { return v.TypeParameters }).(pulumi.StringMapOutput)
}

type TopicSemanticTypePtrOutput struct{ *pulumi.OutputState }

func (TopicSemanticTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicSemanticType)(nil)).Elem()
}

func (o TopicSemanticTypePtrOutput) ToTopicSemanticTypePtrOutput() TopicSemanticTypePtrOutput {
	return o
}

func (o TopicSemanticTypePtrOutput) ToTopicSemanticTypePtrOutputWithContext(ctx context.Context) TopicSemanticTypePtrOutput {
	return o
}

func (o TopicSemanticTypePtrOutput) Elem() TopicSemanticTypeOutput {
	return o.ApplyT(func(v *TopicSemanticType) TopicSemanticType {
		if v != nil {
			return *v
		}
		var ret TopicSemanticType
		return ret
	}).(TopicSemanticTypeOutput)
}

// The semantic type falsey cell value.
func (o TopicSemanticTypePtrOutput) FalseyCellValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicSemanticType) *string {
		if v == nil {
			return nil
		}
		return v.FalseyCellValue
	}).(pulumi.StringPtrOutput)
}

// The other names or aliases for the false cell value.
func (o TopicSemanticTypePtrOutput) FalseyCellValueSynonyms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TopicSemanticType) []string {
		if v == nil {
			return nil
		}
		return v.FalseyCellValueSynonyms
	}).(pulumi.StringArrayOutput)
}

// The semantic type sub type name.
func (o TopicSemanticTypePtrOutput) SubTypeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicSemanticType) *string {
		if v == nil {
			return nil
		}
		return v.SubTypeName
	}).(pulumi.StringPtrOutput)
}

// The semantic type truthy cell value.
func (o TopicSemanticTypePtrOutput) TruthyCellValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicSemanticType) *string {
		if v == nil {
			return nil
		}
		return v.TruthyCellValue
	}).(pulumi.StringPtrOutput)
}

// The other names or aliases for the true cell value.
func (o TopicSemanticTypePtrOutput) TruthyCellValueSynonyms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TopicSemanticType) []string {
		if v == nil {
			return nil
		}
		return v.TruthyCellValueSynonyms
	}).(pulumi.StringArrayOutput)
}

// The semantic type name.
func (o TopicSemanticTypePtrOutput) TypeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicSemanticType) *string {
		if v == nil {
			return nil
		}
		return v.TypeName
	}).(pulumi.StringPtrOutput)
}

// The semantic type parameters.
func (o TopicSemanticTypePtrOutput) TypeParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TopicSemanticType) map[string]string {
		if v == nil {
			return nil
		}
		return v.TypeParameters
	}).(pulumi.StringMapOutput)
}

type TopicSingularFilterConstant struct {
	// The type of the singular filter constant. Valid values for this structure are `SINGULAR` .
	ConstantType *TopicConstantType `pulumi:"constantType"`
	// The value of the singular filter constant.
	SingularConstant *string `pulumi:"singularConstant"`
}

// TopicSingularFilterConstantInput is an input type that accepts TopicSingularFilterConstantArgs and TopicSingularFilterConstantOutput values.
// You can construct a concrete instance of `TopicSingularFilterConstantInput` via:
//
//	TopicSingularFilterConstantArgs{...}
type TopicSingularFilterConstantInput interface {
	pulumi.Input

	ToTopicSingularFilterConstantOutput() TopicSingularFilterConstantOutput
	ToTopicSingularFilterConstantOutputWithContext(context.Context) TopicSingularFilterConstantOutput
}

type TopicSingularFilterConstantArgs struct {
	// The type of the singular filter constant. Valid values for this structure are `SINGULAR` .
	ConstantType TopicConstantTypePtrInput `pulumi:"constantType"`
	// The value of the singular filter constant.
	SingularConstant pulumi.StringPtrInput `pulumi:"singularConstant"`
}

func (TopicSingularFilterConstantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSingularFilterConstant)(nil)).Elem()
}

func (i TopicSingularFilterConstantArgs) ToTopicSingularFilterConstantOutput() TopicSingularFilterConstantOutput {
	return i.ToTopicSingularFilterConstantOutputWithContext(context.Background())
}

func (i TopicSingularFilterConstantArgs) ToTopicSingularFilterConstantOutputWithContext(ctx context.Context) TopicSingularFilterConstantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSingularFilterConstantOutput)
}

func (i TopicSingularFilterConstantArgs) ToTopicSingularFilterConstantPtrOutput() TopicSingularFilterConstantPtrOutput {
	return i.ToTopicSingularFilterConstantPtrOutputWithContext(context.Background())
}

func (i TopicSingularFilterConstantArgs) ToTopicSingularFilterConstantPtrOutputWithContext(ctx context.Context) TopicSingularFilterConstantPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSingularFilterConstantOutput).ToTopicSingularFilterConstantPtrOutputWithContext(ctx)
}

// TopicSingularFilterConstantPtrInput is an input type that accepts TopicSingularFilterConstantArgs, TopicSingularFilterConstantPtr and TopicSingularFilterConstantPtrOutput values.
// You can construct a concrete instance of `TopicSingularFilterConstantPtrInput` via:
//
//	        TopicSingularFilterConstantArgs{...}
//
//	or:
//
//	        nil
type TopicSingularFilterConstantPtrInput interface {
	pulumi.Input

	ToTopicSingularFilterConstantPtrOutput() TopicSingularFilterConstantPtrOutput
	ToTopicSingularFilterConstantPtrOutputWithContext(context.Context) TopicSingularFilterConstantPtrOutput
}

type topicSingularFilterConstantPtrType TopicSingularFilterConstantArgs

func TopicSingularFilterConstantPtr(v *TopicSingularFilterConstantArgs) TopicSingularFilterConstantPtrInput {
	return (*topicSingularFilterConstantPtrType)(v)
}

func (*topicSingularFilterConstantPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicSingularFilterConstant)(nil)).Elem()
}

func (i *topicSingularFilterConstantPtrType) ToTopicSingularFilterConstantPtrOutput() TopicSingularFilterConstantPtrOutput {
	return i.ToTopicSingularFilterConstantPtrOutputWithContext(context.Background())
}

func (i *topicSingularFilterConstantPtrType) ToTopicSingularFilterConstantPtrOutputWithContext(ctx context.Context) TopicSingularFilterConstantPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSingularFilterConstantPtrOutput)
}

type TopicSingularFilterConstantOutput struct{ *pulumi.OutputState }

func (TopicSingularFilterConstantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSingularFilterConstant)(nil)).Elem()
}

func (o TopicSingularFilterConstantOutput) ToTopicSingularFilterConstantOutput() TopicSingularFilterConstantOutput {
	return o
}

func (o TopicSingularFilterConstantOutput) ToTopicSingularFilterConstantOutputWithContext(ctx context.Context) TopicSingularFilterConstantOutput {
	return o
}

func (o TopicSingularFilterConstantOutput) ToTopicSingularFilterConstantPtrOutput() TopicSingularFilterConstantPtrOutput {
	return o.ToTopicSingularFilterConstantPtrOutputWithContext(context.Background())
}

func (o TopicSingularFilterConstantOutput) ToTopicSingularFilterConstantPtrOutputWithContext(ctx context.Context) TopicSingularFilterConstantPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicSingularFilterConstant) *TopicSingularFilterConstant {
		return &v
	}).(TopicSingularFilterConstantPtrOutput)
}

// The type of the singular filter constant. Valid values for this structure are `SINGULAR` .
func (o TopicSingularFilterConstantOutput) ConstantType() TopicConstantTypePtrOutput {
	return o.ApplyT(func(v TopicSingularFilterConstant) *TopicConstantType { return v.ConstantType }).(TopicConstantTypePtrOutput)
}

// The value of the singular filter constant.
func (o TopicSingularFilterConstantOutput) SingularConstant() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicSingularFilterConstant) *string { return v.SingularConstant }).(pulumi.StringPtrOutput)
}

type TopicSingularFilterConstantPtrOutput struct{ *pulumi.OutputState }

func (TopicSingularFilterConstantPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicSingularFilterConstant)(nil)).Elem()
}

func (o TopicSingularFilterConstantPtrOutput) ToTopicSingularFilterConstantPtrOutput() TopicSingularFilterConstantPtrOutput {
	return o
}

func (o TopicSingularFilterConstantPtrOutput) ToTopicSingularFilterConstantPtrOutputWithContext(ctx context.Context) TopicSingularFilterConstantPtrOutput {
	return o
}

func (o TopicSingularFilterConstantPtrOutput) Elem() TopicSingularFilterConstantOutput {
	return o.ApplyT(func(v *TopicSingularFilterConstant) TopicSingularFilterConstant {
		if v != nil {
			return *v
		}
		var ret TopicSingularFilterConstant
		return ret
	}).(TopicSingularFilterConstantOutput)
}

// The type of the singular filter constant. Valid values for this structure are `SINGULAR` .
func (o TopicSingularFilterConstantPtrOutput) ConstantType() TopicConstantTypePtrOutput {
	return o.ApplyT(func(v *TopicSingularFilterConstant) *TopicConstantType {
		if v == nil {
			return nil
		}
		return v.ConstantType
	}).(TopicConstantTypePtrOutput)
}

// The value of the singular filter constant.
func (o TopicSingularFilterConstantPtrOutput) SingularConstant() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicSingularFilterConstant) *string {
		if v == nil {
			return nil
		}
		return v.SingularConstant
	}).(pulumi.StringPtrOutput)
}

// <p>The structure that contains information about a network interface.</p>
type VpcConnectionNetworkInterface struct {
	// <p>The availability zone that the network interface resides in.</p>
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// <p>An error message.</p>
	ErrorMessage *string `pulumi:"errorMessage"`
	// <p>The network interface ID.</p>
	NetworkInterfaceId *string `pulumi:"networkInterfaceId"`
	// The status of the network interface.
	Status *VpcConnectionNetworkInterfaceStatus `pulumi:"status"`
	// <p>The subnet ID associated with the network interface.</p>
	SubnetId *string `pulumi:"subnetId"`
}

// <p>The structure that contains information about a network interface.</p>
type VpcConnectionNetworkInterfaceOutput struct{ *pulumi.OutputState }

func (VpcConnectionNetworkInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcConnectionNetworkInterface)(nil)).Elem()
}

func (o VpcConnectionNetworkInterfaceOutput) ToVpcConnectionNetworkInterfaceOutput() VpcConnectionNetworkInterfaceOutput {
	return o
}

func (o VpcConnectionNetworkInterfaceOutput) ToVpcConnectionNetworkInterfaceOutputWithContext(ctx context.Context) VpcConnectionNetworkInterfaceOutput {
	return o
}

// <p>The availability zone that the network interface resides in.</p>
func (o VpcConnectionNetworkInterfaceOutput) AvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcConnectionNetworkInterface) *string { return v.AvailabilityZone }).(pulumi.StringPtrOutput)
}

// <p>An error message.</p>
func (o VpcConnectionNetworkInterfaceOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcConnectionNetworkInterface) *string { return v.ErrorMessage }).(pulumi.StringPtrOutput)
}

// <p>The network interface ID.</p>
func (o VpcConnectionNetworkInterfaceOutput) NetworkInterfaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcConnectionNetworkInterface) *string { return v.NetworkInterfaceId }).(pulumi.StringPtrOutput)
}

// The status of the network interface.
func (o VpcConnectionNetworkInterfaceOutput) Status() VpcConnectionNetworkInterfaceStatusPtrOutput {
	return o.ApplyT(func(v VpcConnectionNetworkInterface) *VpcConnectionNetworkInterfaceStatus { return v.Status }).(VpcConnectionNetworkInterfaceStatusPtrOutput)
}

// <p>The subnet ID associated with the network interface.</p>
func (o VpcConnectionNetworkInterfaceOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcConnectionNetworkInterface) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

type VpcConnectionNetworkInterfaceArrayOutput struct{ *pulumi.OutputState }

func (VpcConnectionNetworkInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpcConnectionNetworkInterface)(nil)).Elem()
}

func (o VpcConnectionNetworkInterfaceArrayOutput) ToVpcConnectionNetworkInterfaceArrayOutput() VpcConnectionNetworkInterfaceArrayOutput {
	return o
}

func (o VpcConnectionNetworkInterfaceArrayOutput) ToVpcConnectionNetworkInterfaceArrayOutputWithContext(ctx context.Context) VpcConnectionNetworkInterfaceArrayOutput {
	return o
}

func (o VpcConnectionNetworkInterfaceArrayOutput) Index(i pulumi.IntInput) VpcConnectionNetworkInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VpcConnectionNetworkInterface {
		return vs[0].([]VpcConnectionNetworkInterface)[vs[1].(int)]
	}).(VpcConnectionNetworkInterfaceOutput)
}

// <p>The key or keys of the key-value pairs for the resource tag or tags assigned to the
//
//	resource.</p>
type VpcConnectionTag struct {
	// <p>Tag key.</p>
	Key string `pulumi:"key"`
	// <p>Tag value.</p>
	Value string `pulumi:"value"`
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateMaximumLabelTypeInput)(nil)).Elem(), TemplateMaximumLabelTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateMaximumLabelTypePtrInput)(nil)).Elem(), TemplateMaximumLabelTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateMaximumMinimumComputationInput)(nil)).Elem(), TemplateMaximumMinimumComputationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateMaximumMinimumComputationPtrInput)(nil)).Elem(), TemplateMaximumMinimumComputationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateMeasureFieldInput)(nil)).Elem(), TemplateMeasureFieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateMeasureFieldPtrInput)(nil)).Elem(), TemplateMeasureFieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateMeasureFieldArrayInput)(nil)).Elem(), TemplateMeasureFieldArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateMetricComparisonComputationInput)(nil)).Elem(), TemplateMetricComparisonComputationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateMetricComparisonComputationPtrInput)(nil)).Elem(), TemplateMetricComparisonComputationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateMinimumLabelTypeInput)(nil)).Elem(), TemplateMinimumLabelTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateMinimumLabelTypePtrInput)(nil)).Elem(), TemplateMinimumLabelTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateMissingDataConfigurationInput)(nil)).Elem(), TemplateMissingDataConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateMissingDataConfigurationArrayInput)(nil)).Elem(), TemplateMissingDataConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateNegativeValueConfigurationInput)(nil)).Elem(), TemplateNegativeValueConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateNegativeValueConfigurationPtrInput)(nil)).Elem(), TemplateNegativeValueConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateNestedFilterInput)(nil)).Elem(), TemplateNestedFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateNestedFilterPtrInput)(nil)).Elem(), TemplateNestedFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateNullValueFormatConfigurationInput)(nil)).Elem(), TemplateNullValueFormatConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateNullValueFormatConfigurationPtrInput)(nil)).Elem(), TemplateNullValueFormatConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateNumberDisplayFormatConfigurationInput)(nil)).Elem(), TemplateNumberDisplayFormatConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateNumberDisplayFormatConfigurationPtrInput)(nil)).Elem(), TemplateNumberDisplayFormatConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateNumberFormatConfigurationInput)(nil)).Elem(), TemplateNumberFormatConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateNumberFormatConfigurationPtrInput)(nil)).Elem(), TemplateNumberFormatConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateNumericAxisOptionsInput)(nil)).Elem(), TemplateNumericAxisOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateNumericAxisOptionsPtrInput)(nil)).Elem(), TemplateNumericAxisOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateNumericEqualityDrillDownFilterInput)(nil)).Elem(), TemplateNumericEqualityDrillDownFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateNumericEqualityDrillDownFilterPtrInput)(nil)).Elem(), TemplateNumericEqualityDrillDownFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateNumericEqualityFilterInput)(nil)).Elem(), TemplateNumericEqualityFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateNumericEqualityFilterPtrInput)(nil)).Elem(), TemplateNumericEqualityFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateNumericFormatConfigurationInput)(nil)).Elem(), TemplateNumericFormatConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateNumericFormatConfigurationPtrInput)(nil)).Elem(), TemplateNumericFormatConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateNumericRangeFilterInput)(nil)).Elem(), TemplateNumericRangeFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateNumericRangeFilterPtrInput)(nil)).Elem(), TemplateNumericRangeFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateNumericRangeFilterValueInput)(nil)).Elem(), TemplateNumericRangeFilterValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateNumericRangeFilterValuePtrInput)(nil)).Elem(), TemplateNumericRangeFilterValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateNumericSeparatorConfigurationInput)(nil)).Elem(), TemplateNumericSeparatorConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateNumericSeparatorConfigurationPtrInput)(nil)).Elem(), TemplateNumericSeparatorConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateNumericalAggregationFunctionInput)(nil)).Elem(), TemplateNumericalAggregationFunctionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateNumericalAggregationFunctionPtrInput)(nil)).Elem(), TemplateNumericalAggregationFunctionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateNumericalDimensionFieldInput)(nil)).Elem(), TemplateNumericalDimensionFieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateNumericalDimensionFieldPtrInput)(nil)).Elem(), TemplateNumericalDimensionFieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateNumericalMeasureFieldInput)(nil)).Elem(), TemplateNumericalMeasureFieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateNumericalMeasureFieldPtrInput)(nil)).Elem(), TemplateNumericalMeasureFieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePaginationConfigurationInput)(nil)).Elem(), TemplatePaginationConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePaginationConfigurationPtrInput)(nil)).Elem(), TemplatePaginationConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePanelConfigurationInput)(nil)).Elem(), TemplatePanelConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePanelConfigurationPtrInput)(nil)).Elem(), TemplatePanelConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePanelTitleOptionsInput)(nil)).Elem(), TemplatePanelTitleOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePanelTitleOptionsPtrInput)(nil)).Elem(), TemplatePanelTitleOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateParameterControlInput)(nil)).Elem(), TemplateParameterControlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateParameterControlArrayInput)(nil)).Elem(), TemplateParameterControlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateParameterDateTimePickerControlInput)(nil)).Elem(), TemplateParameterDateTimePickerControlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateParameterDateTimePickerControlPtrInput)(nil)).Elem(), TemplateParameterDateTimePickerControlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateParameterDeclarationInput)(nil)).Elem(), TemplateParameterDeclarationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateParameterDeclarationArrayInput)(nil)).Elem(), TemplateParameterDeclarationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateParameterDropDownControlInput)(nil)).Elem(), TemplateParameterDropDownControlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateParameterDropDownControlPtrInput)(nil)).Elem(), TemplateParameterDropDownControlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateParameterListControlInput)(nil)).Elem(), TemplateParameterListControlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateParameterListControlPtrInput)(nil)).Elem(), TemplateParameterListControlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateParameterSelectableValuesInput)(nil)).Elem(), TemplateParameterSelectableValuesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateParameterSelectableValuesPtrInput)(nil)).Elem(), TemplateParameterSelectableValuesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateParameterSliderControlInput)(nil)).Elem(), TemplateParameterSliderControlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateParameterSliderControlPtrInput)(nil)).Elem(), TemplateParameterSliderControlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateParameterTextAreaControlInput)(nil)).Elem(), TemplateParameterTextAreaControlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateParameterTextAreaControlPtrInput)(nil)).Elem(), TemplateParameterTextAreaControlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateParameterTextFieldControlInput)(nil)).Elem(), TemplateParameterTextFieldControlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateParameterTextFieldControlPtrInput)(nil)).Elem(), TemplateParameterTextFieldControlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePercentVisibleRangeInput)(nil)).Elem(), TemplatePercentVisibleRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePercentVisibleRangePtrInput)(nil)).Elem(), TemplatePercentVisibleRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePercentageDisplayFormatConfigurationInput)(nil)).Elem(), TemplatePercentageDisplayFormatConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePercentageDisplayFormatConfigurationPtrInput)(nil)).Elem(), TemplatePercentageDisplayFormatConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePercentileAggregationInput)(nil)).Elem(), TemplatePercentileAggregationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePercentileAggregationPtrInput)(nil)).Elem(), TemplatePercentileAggregationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePeriodOverPeriodComputationInput)(nil)).Elem(), TemplatePeriodOverPeriodComputationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePeriodOverPeriodComputationPtrInput)(nil)).Elem(), TemplatePeriodOverPeriodComputationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePeriodToDateComputationInput)(nil)).Elem(), TemplatePeriodToDateComputationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePeriodToDateComputationPtrInput)(nil)).Elem(), TemplatePeriodToDateComputationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePieChartAggregatedFieldWellsInput)(nil)).Elem(), TemplatePieChartAggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePieChartAggregatedFieldWellsPtrInput)(nil)).Elem(), TemplatePieChartAggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePieChartConfigurationInput)(nil)).Elem(), TemplatePieChartConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePieChartConfigurationPtrInput)(nil)).Elem(), TemplatePieChartConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePieChartFieldWellsInput)(nil)).Elem(), TemplatePieChartFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePieChartFieldWellsPtrInput)(nil)).Elem(), TemplatePieChartFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePieChartSortConfigurationInput)(nil)).Elem(), TemplatePieChartSortConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePieChartSortConfigurationPtrInput)(nil)).Elem(), TemplatePieChartSortConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePieChartVisualInput)(nil)).Elem(), TemplatePieChartVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePieChartVisualPtrInput)(nil)).Elem(), TemplatePieChartVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePivotFieldSortOptionsInput)(nil)).Elem(), TemplatePivotFieldSortOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePivotFieldSortOptionsArrayInput)(nil)).Elem(), TemplatePivotFieldSortOptionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePivotTableAggregatedFieldWellsInput)(nil)).Elem(), TemplatePivotTableAggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePivotTableAggregatedFieldWellsPtrInput)(nil)).Elem(), TemplatePivotTableAggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePivotTableCellConditionalFormattingInput)(nil)).Elem(), TemplatePivotTableCellConditionalFormattingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePivotTableCellConditionalFormattingPtrInput)(nil)).Elem(), TemplatePivotTableCellConditionalFormattingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePivotTableConditionalFormattingInput)(nil)).Elem(), TemplatePivotTableConditionalFormattingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePivotTableConditionalFormattingPtrInput)(nil)).Elem(), TemplatePivotTableConditionalFormattingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePivotTableConditionalFormattingOptionInput)(nil)).Elem(), TemplatePivotTableConditionalFormattingOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePivotTableConditionalFormattingOptionArrayInput)(nil)).Elem(), TemplatePivotTableConditionalFormattingOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePivotTableConditionalFormattingScopeInput)(nil)).Elem(), TemplatePivotTableConditionalFormattingScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePivotTableConditionalFormattingScopePtrInput)(nil)).Elem(), TemplatePivotTableConditionalFormattingScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePivotTableConditionalFormattingScopeArrayInput)(nil)).Elem(), TemplatePivotTableConditionalFormattingScopeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePivotTableConfigurationInput)(nil)).Elem(), TemplatePivotTableConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePivotTableConfigurationPtrInput)(nil)).Elem(), TemplatePivotTableConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePivotTableDataPathOptionInput)(nil)).Elem(), TemplatePivotTableDataPathOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePivotTableDataPathOptionArrayInput)(nil)).Elem(), TemplatePivotTableDataPathOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePivotTableFieldCollapseStateOptionInput)(nil)).Elem(), TemplatePivotTableFieldCollapseStateOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePivotTableFieldCollapseStateOptionArrayInput)(nil)).Elem(), TemplatePivotTableFieldCollapseStateOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePivotTableFieldCollapseStateTargetInput)(nil)).Elem(), TemplatePivotTableFieldCollapseStateTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePivotTableFieldOptionInput)(nil)).Elem(), TemplatePivotTableFieldOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePivotTableFieldOptionArrayInput)(nil)).Elem(), TemplatePivotTableFieldOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePivotTableFieldOptionsInput)(nil)).Elem(), TemplatePivotTableFieldOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePivotTableFieldOptionsPtrInput)(nil)).Elem(), TemplatePivotTableFieldOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePivotTableFieldSubtotalOptionsInput)(nil)).Elem(), TemplatePivotTableFieldSubtotalOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePivotTableFieldSubtotalOptionsArrayInput)(nil)).Elem(), TemplatePivotTableFieldSubtotalOptionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePivotTableFieldWellsInput)(nil)).Elem(), TemplatePivotTableFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePivotTableFieldWellsPtrInput)(nil)).Elem(), TemplatePivotTableFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePivotTableOptionsInput)(nil)).Elem(), TemplatePivotTableOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePivotTableOptionsPtrInput)(nil)).Elem(), TemplatePivotTableOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePivotTablePaginatedReportOptionsInput)(nil)).Elem(), TemplatePivotTablePaginatedReportOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePivotTablePaginatedReportOptionsPtrInput)(nil)).Elem(), TemplatePivotTablePaginatedReportOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePivotTableRowsLabelOptionsInput)(nil)).Elem(), TemplatePivotTableRowsLabelOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePivotTableRowsLabelOptionsPtrInput)(nil)).Elem(), TemplatePivotTableRowsLabelOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePivotTableSortByInput)(nil)).Elem(), TemplatePivotTableSortByArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePivotTableSortConfigurationInput)(nil)).Elem(), TemplatePivotTableSortConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePivotTableSortConfigurationPtrInput)(nil)).Elem(), TemplatePivotTableSortConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePivotTableTotalOptionsInput)(nil)).Elem(), TemplatePivotTableTotalOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePivotTableTotalOptionsPtrInput)(nil)).Elem(), TemplatePivotTableTotalOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePivotTableVisualInput)(nil)).Elem(), TemplatePivotTableVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePivotTableVisualPtrInput)(nil)).Elem(), TemplatePivotTableVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePivotTotalOptionsInput)(nil)).Elem(), TemplatePivotTotalOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePivotTotalOptionsPtrInput)(nil)).Elem(), TemplatePivotTotalOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePluginVisualInput)(nil)).Elem(), TemplatePluginVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePluginVisualPtrInput)(nil)).Elem(), TemplatePluginVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePluginVisualConfigurationInput)(nil)).Elem(), TemplatePluginVisualConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePluginVisualConfigurationPtrInput)(nil)).Elem(), TemplatePluginVisualConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePluginVisualFieldWellInput)(nil)).Elem(), TemplatePluginVisualFieldWellArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePluginVisualFieldWellArrayInput)(nil)).Elem(), TemplatePluginVisualFieldWellArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePluginVisualItemsLimitConfigurationInput)(nil)).Elem(), TemplatePluginVisualItemsLimitConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePluginVisualItemsLimitConfigurationPtrInput)(nil)).Elem(), TemplatePluginVisualItemsLimitConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePluginVisualOptionsInput)(nil)).Elem(), TemplatePluginVisualOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePluginVisualOptionsPtrInput)(nil)).Elem(), TemplatePluginVisualOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePluginVisualPropertyInput)(nil)).Elem(), TemplatePluginVisualPropertyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePluginVisualPropertyArrayInput)(nil)).Elem(), TemplatePluginVisualPropertyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePluginVisualSortConfigurationInput)(nil)).Elem(), TemplatePluginVisualSortConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePluginVisualSortConfigurationPtrInput)(nil)).Elem(), TemplatePluginVisualSortConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePluginVisualTableQuerySortInput)(nil)).Elem(), TemplatePluginVisualTableQuerySortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePluginVisualTableQuerySortPtrInput)(nil)).Elem(), TemplatePluginVisualTableQuerySortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePredefinedHierarchyInput)(nil)).Elem(), TemplatePredefinedHierarchyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplatePredefinedHierarchyPtrInput)(nil)).Elem(), TemplatePredefinedHierarchyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateProgressBarOptionsInput)(nil)).Elem(), TemplateProgressBarOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateProgressBarOptionsPtrInput)(nil)).Elem(), TemplateProgressBarOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateQueryExecutionOptionsInput)(nil)).Elem(), TemplateQueryExecutionOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateQueryExecutionOptionsPtrInput)(nil)).Elem(), TemplateQueryExecutionOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateRadarChartAggregatedFieldWellsInput)(nil)).Elem(), TemplateRadarChartAggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateRadarChartAggregatedFieldWellsPtrInput)(nil)).Elem(), TemplateRadarChartAggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateRadarChartAreaStyleSettingsInput)(nil)).Elem(), TemplateRadarChartAreaStyleSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateRadarChartAreaStyleSettingsPtrInput)(nil)).Elem(), TemplateRadarChartAreaStyleSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateRadarChartConfigurationInput)(nil)).Elem(), TemplateRadarChartConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateRadarChartConfigurationPtrInput)(nil)).Elem(), TemplateRadarChartConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateRadarChartFieldWellsInput)(nil)).Elem(), TemplateRadarChartFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateRadarChartFieldWellsPtrInput)(nil)).Elem(), TemplateRadarChartFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateRadarChartSeriesSettingsInput)(nil)).Elem(), TemplateRadarChartSeriesSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateRadarChartSeriesSettingsPtrInput)(nil)).Elem(), TemplateRadarChartSeriesSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateRadarChartSortConfigurationInput)(nil)).Elem(), TemplateRadarChartSortConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateRadarChartSortConfigurationPtrInput)(nil)).Elem(), TemplateRadarChartSortConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateRadarChartVisualInput)(nil)).Elem(), TemplateRadarChartVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateRadarChartVisualPtrInput)(nil)).Elem(), TemplateRadarChartVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateRangeEndsLabelTypeInput)(nil)).Elem(), TemplateRangeEndsLabelTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateRangeEndsLabelTypePtrInput)(nil)).Elem(), TemplateRangeEndsLabelTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateReferenceLineInput)(nil)).Elem(), TemplateReferenceLineArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateReferenceLineArrayInput)(nil)).Elem(), TemplateReferenceLineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateReferenceLineCustomLabelConfigurationInput)(nil)).Elem(), TemplateReferenceLineCustomLabelConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateReferenceLineCustomLabelConfigurationPtrInput)(nil)).Elem(), TemplateReferenceLineCustomLabelConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateReferenceLineDataConfigurationInput)(nil)).Elem(), TemplateReferenceLineDataConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateReferenceLineDynamicDataConfigurationInput)(nil)).Elem(), TemplateReferenceLineDynamicDataConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateReferenceLineDynamicDataConfigurationPtrInput)(nil)).Elem(), TemplateReferenceLineDynamicDataConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateReferenceLineLabelConfigurationInput)(nil)).Elem(), TemplateReferenceLineLabelConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateReferenceLineLabelConfigurationPtrInput)(nil)).Elem(), TemplateReferenceLineLabelConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateReferenceLineStaticDataConfigurationInput)(nil)).Elem(), TemplateReferenceLineStaticDataConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateReferenceLineStaticDataConfigurationPtrInput)(nil)).Elem(), TemplateReferenceLineStaticDataConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateReferenceLineStyleConfigurationInput)(nil)).Elem(), TemplateReferenceLineStyleConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateReferenceLineStyleConfigurationPtrInput)(nil)).Elem(), TemplateReferenceLineStyleConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateReferenceLineValueLabelConfigurationInput)(nil)).Elem(), TemplateReferenceLineValueLabelConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateReferenceLineValueLabelConfigurationPtrInput)(nil)).Elem(), TemplateReferenceLineValueLabelConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateRelativeDateTimeControlDisplayOptionsInput)(nil)).Elem(), TemplateRelativeDateTimeControlDisplayOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateRelativeDateTimeControlDisplayOptionsPtrInput)(nil)).Elem(), TemplateRelativeDateTimeControlDisplayOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateRelativeDatesFilterInput)(nil)).Elem(), TemplateRelativeDatesFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateRelativeDatesFilterPtrInput)(nil)).Elem(), TemplateRelativeDatesFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateResourcePermissionInput)(nil)).Elem(), TemplateResourcePermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateResourcePermissionArrayInput)(nil)).Elem(), TemplateResourcePermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateRollingDateConfigurationInput)(nil)).Elem(), TemplateRollingDateConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateRollingDateConfigurationPtrInput)(nil)).Elem(), TemplateRollingDateConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateRowAlternateColorOptionsInput)(nil)).Elem(), TemplateRowAlternateColorOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateRowAlternateColorOptionsPtrInput)(nil)).Elem(), TemplateRowAlternateColorOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSameSheetTargetVisualConfigurationInput)(nil)).Elem(), TemplateSameSheetTargetVisualConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSameSheetTargetVisualConfigurationPtrInput)(nil)).Elem(), TemplateSameSheetTargetVisualConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSankeyDiagramAggregatedFieldWellsInput)(nil)).Elem(), TemplateSankeyDiagramAggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSankeyDiagramAggregatedFieldWellsPtrInput)(nil)).Elem(), TemplateSankeyDiagramAggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSankeyDiagramChartConfigurationInput)(nil)).Elem(), TemplateSankeyDiagramChartConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSankeyDiagramChartConfigurationPtrInput)(nil)).Elem(), TemplateSankeyDiagramChartConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSankeyDiagramFieldWellsInput)(nil)).Elem(), TemplateSankeyDiagramFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSankeyDiagramFieldWellsPtrInput)(nil)).Elem(), TemplateSankeyDiagramFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSankeyDiagramSortConfigurationInput)(nil)).Elem(), TemplateSankeyDiagramSortConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSankeyDiagramSortConfigurationPtrInput)(nil)).Elem(), TemplateSankeyDiagramSortConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSankeyDiagramVisualInput)(nil)).Elem(), TemplateSankeyDiagramVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSankeyDiagramVisualPtrInput)(nil)).Elem(), TemplateSankeyDiagramVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateScatterPlotCategoricallyAggregatedFieldWellsInput)(nil)).Elem(), TemplateScatterPlotCategoricallyAggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateScatterPlotCategoricallyAggregatedFieldWellsPtrInput)(nil)).Elem(), TemplateScatterPlotCategoricallyAggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateScatterPlotConfigurationInput)(nil)).Elem(), TemplateScatterPlotConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateScatterPlotConfigurationPtrInput)(nil)).Elem(), TemplateScatterPlotConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateScatterPlotFieldWellsInput)(nil)).Elem(), TemplateScatterPlotFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateScatterPlotFieldWellsPtrInput)(nil)).Elem(), TemplateScatterPlotFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateScatterPlotSortConfigurationInput)(nil)).Elem(), TemplateScatterPlotSortConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateScatterPlotSortConfigurationPtrInput)(nil)).Elem(), TemplateScatterPlotSortConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateScatterPlotUnaggregatedFieldWellsInput)(nil)).Elem(), TemplateScatterPlotUnaggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateScatterPlotUnaggregatedFieldWellsPtrInput)(nil)).Elem(), TemplateScatterPlotUnaggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateScatterPlotVisualInput)(nil)).Elem(), TemplateScatterPlotVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateScatterPlotVisualPtrInput)(nil)).Elem(), TemplateScatterPlotVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateScrollBarOptionsInput)(nil)).Elem(), TemplateScrollBarOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateScrollBarOptionsPtrInput)(nil)).Elem(), TemplateScrollBarOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSecondaryValueOptionsInput)(nil)).Elem(), TemplateSecondaryValueOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSecondaryValueOptionsPtrInput)(nil)).Elem(), TemplateSecondaryValueOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSectionAfterPageBreakInput)(nil)).Elem(), TemplateSectionAfterPageBreakArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSectionAfterPageBreakPtrInput)(nil)).Elem(), TemplateSectionAfterPageBreakArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSectionBasedLayoutCanvasSizeOptionsInput)(nil)).Elem(), TemplateSectionBasedLayoutCanvasSizeOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSectionBasedLayoutCanvasSizeOptionsPtrInput)(nil)).Elem(), TemplateSectionBasedLayoutCanvasSizeOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSectionBasedLayoutConfigurationInput)(nil)).Elem(), TemplateSectionBasedLayoutConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSectionBasedLayoutConfigurationPtrInput)(nil)).Elem(), TemplateSectionBasedLayoutConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSectionBasedLayoutPaperCanvasSizeOptionsInput)(nil)).Elem(), TemplateSectionBasedLayoutPaperCanvasSizeOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSectionBasedLayoutPaperCanvasSizeOptionsPtrInput)(nil)).Elem(), TemplateSectionBasedLayoutPaperCanvasSizeOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSectionLayoutConfigurationInput)(nil)).Elem(), TemplateSectionLayoutConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSectionLayoutConfigurationPtrInput)(nil)).Elem(), TemplateSectionLayoutConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSectionPageBreakConfigurationInput)(nil)).Elem(), TemplateSectionPageBreakConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSectionPageBreakConfigurationPtrInput)(nil)).Elem(), TemplateSectionPageBreakConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSectionStyleInput)(nil)).Elem(), TemplateSectionStyleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSectionStylePtrInput)(nil)).Elem(), TemplateSectionStyleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSelectedSheetsFilterScopeConfigurationInput)(nil)).Elem(), TemplateSelectedSheetsFilterScopeConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSelectedSheetsFilterScopeConfigurationPtrInput)(nil)).Elem(), TemplateSelectedSheetsFilterScopeConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSeriesItemInput)(nil)).Elem(), TemplateSeriesItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSeriesItemArrayInput)(nil)).Elem(), TemplateSeriesItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSetParameterValueConfigurationInput)(nil)).Elem(), TemplateSetParameterValueConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSetParameterValueConfigurationArrayInput)(nil)).Elem(), TemplateSetParameterValueConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateShapeConditionalFormatInput)(nil)).Elem(), TemplateShapeConditionalFormatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateShapeConditionalFormatPtrInput)(nil)).Elem(), TemplateShapeConditionalFormatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSheetControlInfoIconLabelOptionsInput)(nil)).Elem(), TemplateSheetControlInfoIconLabelOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSheetControlInfoIconLabelOptionsPtrInput)(nil)).Elem(), TemplateSheetControlInfoIconLabelOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSheetControlLayoutInput)(nil)).Elem(), TemplateSheetControlLayoutArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSheetControlLayoutArrayInput)(nil)).Elem(), TemplateSheetControlLayoutArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSheetControlLayoutConfigurationInput)(nil)).Elem(), TemplateSheetControlLayoutConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSheetDefinitionInput)(nil)).Elem(), TemplateSheetDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSheetDefinitionArrayInput)(nil)).Elem(), TemplateSheetDefinitionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSheetElementConfigurationOverridesInput)(nil)).Elem(), TemplateSheetElementConfigurationOverridesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSheetElementRenderingRuleInput)(nil)).Elem(), TemplateSheetElementRenderingRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSheetElementRenderingRuleArrayInput)(nil)).Elem(), TemplateSheetElementRenderingRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSheetImageInput)(nil)).Elem(), TemplateSheetImageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSheetImageArrayInput)(nil)).Elem(), TemplateSheetImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSheetImageScalingConfigurationInput)(nil)).Elem(), TemplateSheetImageScalingConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSheetImageScalingConfigurationPtrInput)(nil)).Elem(), TemplateSheetImageScalingConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSheetImageSourceInput)(nil)).Elem(), TemplateSheetImageSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSheetImageStaticFileSourceInput)(nil)).Elem(), TemplateSheetImageStaticFileSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSheetImageStaticFileSourcePtrInput)(nil)).Elem(), TemplateSheetImageStaticFileSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSheetImageTooltipConfigurationInput)(nil)).Elem(), TemplateSheetImageTooltipConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSheetImageTooltipConfigurationPtrInput)(nil)).Elem(), TemplateSheetImageTooltipConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSheetImageTooltipTextInput)(nil)).Elem(), TemplateSheetImageTooltipTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSheetImageTooltipTextPtrInput)(nil)).Elem(), TemplateSheetImageTooltipTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSheetTextBoxInput)(nil)).Elem(), TemplateSheetTextBoxArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSheetTextBoxArrayInput)(nil)).Elem(), TemplateSheetTextBoxArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSheetVisualScopingConfigurationInput)(nil)).Elem(), TemplateSheetVisualScopingConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSheetVisualScopingConfigurationArrayInput)(nil)).Elem(), TemplateSheetVisualScopingConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateShortFormatTextInput)(nil)).Elem(), TemplateShortFormatTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateShortFormatTextPtrInput)(nil)).Elem(), TemplateShortFormatTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSimpleClusterMarkerInput)(nil)).Elem(), TemplateSimpleClusterMarkerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSimpleClusterMarkerPtrInput)(nil)).Elem(), TemplateSimpleClusterMarkerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSingleAxisOptionsInput)(nil)).Elem(), TemplateSingleAxisOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSingleAxisOptionsPtrInput)(nil)).Elem(), TemplateSingleAxisOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSliderControlDisplayOptionsInput)(nil)).Elem(), TemplateSliderControlDisplayOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSliderControlDisplayOptionsPtrInput)(nil)).Elem(), TemplateSliderControlDisplayOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSmallMultiplesAxisPropertiesInput)(nil)).Elem(), TemplateSmallMultiplesAxisPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSmallMultiplesAxisPropertiesPtrInput)(nil)).Elem(), TemplateSmallMultiplesAxisPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSmallMultiplesOptionsInput)(nil)).Elem(), TemplateSmallMultiplesOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSmallMultiplesOptionsPtrInput)(nil)).Elem(), TemplateSmallMultiplesOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSourceAnalysisInput)(nil)).Elem(), TemplateSourceAnalysisArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSourceAnalysisPtrInput)(nil)).Elem(), TemplateSourceAnalysisArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSourceEntityInput)(nil)).Elem(), TemplateSourceEntityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSourceEntityPtrInput)(nil)).Elem(), TemplateSourceEntityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSourceTemplateInput)(nil)).Elem(), TemplateSourceTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSourceTemplatePtrInput)(nil)).Elem(), TemplateSourceTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSpacingInput)(nil)).Elem(), TemplateSpacingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSpacingPtrInput)(nil)).Elem(), TemplateSpacingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateStringDefaultValuesInput)(nil)).Elem(), TemplateStringDefaultValuesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateStringDefaultValuesPtrInput)(nil)).Elem(), TemplateStringDefaultValuesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateStringFormatConfigurationInput)(nil)).Elem(), TemplateStringFormatConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateStringFormatConfigurationPtrInput)(nil)).Elem(), TemplateStringFormatConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateStringParameterDeclarationInput)(nil)).Elem(), TemplateStringParameterDeclarationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateStringParameterDeclarationPtrInput)(nil)).Elem(), TemplateStringParameterDeclarationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateStringValueWhenUnsetConfigurationInput)(nil)).Elem(), TemplateStringValueWhenUnsetConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateStringValueWhenUnsetConfigurationPtrInput)(nil)).Elem(), TemplateStringValueWhenUnsetConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSubtotalOptionsInput)(nil)).Elem(), TemplateSubtotalOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSubtotalOptionsPtrInput)(nil)).Elem(), TemplateSubtotalOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableAggregatedFieldWellsInput)(nil)).Elem(), TemplateTableAggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableAggregatedFieldWellsPtrInput)(nil)).Elem(), TemplateTableAggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableBorderOptionsInput)(nil)).Elem(), TemplateTableBorderOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableBorderOptionsPtrInput)(nil)).Elem(), TemplateTableBorderOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableCellConditionalFormattingInput)(nil)).Elem(), TemplateTableCellConditionalFormattingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableCellConditionalFormattingPtrInput)(nil)).Elem(), TemplateTableCellConditionalFormattingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableCellImageSizingConfigurationInput)(nil)).Elem(), TemplateTableCellImageSizingConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableCellImageSizingConfigurationPtrInput)(nil)).Elem(), TemplateTableCellImageSizingConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableCellStyleInput)(nil)).Elem(), TemplateTableCellStyleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableCellStylePtrInput)(nil)).Elem(), TemplateTableCellStyleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableConditionalFormattingInput)(nil)).Elem(), TemplateTableConditionalFormattingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableConditionalFormattingPtrInput)(nil)).Elem(), TemplateTableConditionalFormattingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableConditionalFormattingOptionInput)(nil)).Elem(), TemplateTableConditionalFormattingOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableConditionalFormattingOptionArrayInput)(nil)).Elem(), TemplateTableConditionalFormattingOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableConfigurationInput)(nil)).Elem(), TemplateTableConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableConfigurationPtrInput)(nil)).Elem(), TemplateTableConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableFieldCustomIconContentInput)(nil)).Elem(), TemplateTableFieldCustomIconContentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableFieldCustomIconContentPtrInput)(nil)).Elem(), TemplateTableFieldCustomIconContentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableFieldCustomTextContentInput)(nil)).Elem(), TemplateTableFieldCustomTextContentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableFieldCustomTextContentPtrInput)(nil)).Elem(), TemplateTableFieldCustomTextContentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableFieldImageConfigurationInput)(nil)).Elem(), TemplateTableFieldImageConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableFieldImageConfigurationPtrInput)(nil)).Elem(), TemplateTableFieldImageConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableFieldLinkConfigurationInput)(nil)).Elem(), TemplateTableFieldLinkConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableFieldLinkConfigurationPtrInput)(nil)).Elem(), TemplateTableFieldLinkConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableFieldLinkContentConfigurationInput)(nil)).Elem(), TemplateTableFieldLinkContentConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableFieldLinkContentConfigurationPtrInput)(nil)).Elem(), TemplateTableFieldLinkContentConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableFieldOptionInput)(nil)).Elem(), TemplateTableFieldOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableFieldOptionArrayInput)(nil)).Elem(), TemplateTableFieldOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableFieldOptionsInput)(nil)).Elem(), TemplateTableFieldOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableFieldOptionsPtrInput)(nil)).Elem(), TemplateTableFieldOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableFieldUrlConfigurationInput)(nil)).Elem(), TemplateTableFieldUrlConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableFieldUrlConfigurationPtrInput)(nil)).Elem(), TemplateTableFieldUrlConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableFieldWellsInput)(nil)).Elem(), TemplateTableFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableFieldWellsPtrInput)(nil)).Elem(), TemplateTableFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableInlineVisualizationInput)(nil)).Elem(), TemplateTableInlineVisualizationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableInlineVisualizationArrayInput)(nil)).Elem(), TemplateTableInlineVisualizationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableOptionsInput)(nil)).Elem(), TemplateTableOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableOptionsPtrInput)(nil)).Elem(), TemplateTableOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTablePaginatedReportOptionsInput)(nil)).Elem(), TemplateTablePaginatedReportOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTablePaginatedReportOptionsPtrInput)(nil)).Elem(), TemplateTablePaginatedReportOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTablePinnedFieldOptionsInput)(nil)).Elem(), TemplateTablePinnedFieldOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTablePinnedFieldOptionsPtrInput)(nil)).Elem(), TemplateTablePinnedFieldOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableRowConditionalFormattingInput)(nil)).Elem(), TemplateTableRowConditionalFormattingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableRowConditionalFormattingPtrInput)(nil)).Elem(), TemplateTableRowConditionalFormattingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableSideBorderOptionsInput)(nil)).Elem(), TemplateTableSideBorderOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableSideBorderOptionsPtrInput)(nil)).Elem(), TemplateTableSideBorderOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableSortConfigurationInput)(nil)).Elem(), TemplateTableSortConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableSortConfigurationPtrInput)(nil)).Elem(), TemplateTableSortConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableStyleTargetInput)(nil)).Elem(), TemplateTableStyleTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableStyleTargetArrayInput)(nil)).Elem(), TemplateTableStyleTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableUnaggregatedFieldWellsInput)(nil)).Elem(), TemplateTableUnaggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableUnaggregatedFieldWellsPtrInput)(nil)).Elem(), TemplateTableUnaggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableVisualInput)(nil)).Elem(), TemplateTableVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableVisualPtrInput)(nil)).Elem(), TemplateTableVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTextAreaControlDisplayOptionsInput)(nil)).Elem(), TemplateTextAreaControlDisplayOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTextAreaControlDisplayOptionsPtrInput)(nil)).Elem(), TemplateTextAreaControlDisplayOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTextConditionalFormatInput)(nil)).Elem(), TemplateTextConditionalFormatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTextConditionalFormatPtrInput)(nil)).Elem(), TemplateTextConditionalFormatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTextControlPlaceholderOptionsInput)(nil)).Elem(), TemplateTextControlPlaceholderOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTextControlPlaceholderOptionsPtrInput)(nil)).Elem(), TemplateTextControlPlaceholderOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTextFieldControlDisplayOptionsInput)(nil)).Elem(), TemplateTextFieldControlDisplayOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTextFieldControlDisplayOptionsPtrInput)(nil)).Elem(), TemplateTextFieldControlDisplayOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateThousandSeparatorOptionsInput)(nil)).Elem(), TemplateThousandSeparatorOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateThousandSeparatorOptionsPtrInput)(nil)).Elem(), TemplateThousandSeparatorOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTimeBasedForecastPropertiesInput)(nil)).Elem(), TemplateTimeBasedForecastPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTimeBasedForecastPropertiesPtrInput)(nil)).Elem(), TemplateTimeBasedForecastPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTimeEqualityFilterInput)(nil)).Elem(), TemplateTimeEqualityFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTimeEqualityFilterPtrInput)(nil)).Elem(), TemplateTimeEqualityFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTimeRangeDrillDownFilterInput)(nil)).Elem(), TemplateTimeRangeDrillDownFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTimeRangeDrillDownFilterPtrInput)(nil)).Elem(), TemplateTimeRangeDrillDownFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTimeRangeFilterInput)(nil)).Elem(), TemplateTimeRangeFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTimeRangeFilterPtrInput)(nil)).Elem(), TemplateTimeRangeFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTimeRangeFilterValueInput)(nil)).Elem(), TemplateTimeRangeFilterValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTimeRangeFilterValuePtrInput)(nil)).Elem(), TemplateTimeRangeFilterValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTooltipItemInput)(nil)).Elem(), TemplateTooltipItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTooltipItemArrayInput)(nil)).Elem(), TemplateTooltipItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTooltipOptionsInput)(nil)).Elem(), TemplateTooltipOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTooltipOptionsPtrInput)(nil)).Elem(), TemplateTooltipOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTopBottomFilterInput)(nil)).Elem(), TemplateTopBottomFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTopBottomFilterPtrInput)(nil)).Elem(), TemplateTopBottomFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTopBottomMoversComputationInput)(nil)).Elem(), TemplateTopBottomMoversComputationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTopBottomMoversComputationPtrInput)(nil)).Elem(), TemplateTopBottomMoversComputationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTopBottomRankedComputationInput)(nil)).Elem(), TemplateTopBottomRankedComputationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTopBottomRankedComputationPtrInput)(nil)).Elem(), TemplateTopBottomRankedComputationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTotalAggregationComputationInput)(nil)).Elem(), TemplateTotalAggregationComputationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTotalAggregationComputationPtrInput)(nil)).Elem(), TemplateTotalAggregationComputationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTotalAggregationFunctionInput)(nil)).Elem(), TemplateTotalAggregationFunctionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTotalAggregationOptionInput)(nil)).Elem(), TemplateTotalAggregationOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTotalAggregationOptionArrayInput)(nil)).Elem(), TemplateTotalAggregationOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTotalOptionsInput)(nil)).Elem(), TemplateTotalOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTotalOptionsPtrInput)(nil)).Elem(), TemplateTotalOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTreeMapAggregatedFieldWellsInput)(nil)).Elem(), TemplateTreeMapAggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTreeMapAggregatedFieldWellsPtrInput)(nil)).Elem(), TemplateTreeMapAggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTreeMapConfigurationInput)(nil)).Elem(), TemplateTreeMapConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTreeMapConfigurationPtrInput)(nil)).Elem(), TemplateTreeMapConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTreeMapFieldWellsInput)(nil)).Elem(), TemplateTreeMapFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTreeMapFieldWellsPtrInput)(nil)).Elem(), TemplateTreeMapFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTreeMapSortConfigurationInput)(nil)).Elem(), TemplateTreeMapSortConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTreeMapSortConfigurationPtrInput)(nil)).Elem(), TemplateTreeMapSortConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTreeMapVisualInput)(nil)).Elem(), TemplateTreeMapVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTreeMapVisualPtrInput)(nil)).Elem(), TemplateTreeMapVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTrendArrowOptionsInput)(nil)).Elem(), TemplateTrendArrowOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTrendArrowOptionsPtrInput)(nil)).Elem(), TemplateTrendArrowOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateUnaggregatedFieldInput)(nil)).Elem(), TemplateUnaggregatedFieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateUnaggregatedFieldArrayInput)(nil)).Elem(), TemplateUnaggregatedFieldArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateUniqueValuesComputationInput)(nil)).Elem(), TemplateUniqueValuesComputationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateUniqueValuesComputationPtrInput)(nil)).Elem(), TemplateUniqueValuesComputationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateValidationStrategyInput)(nil)).Elem(), TemplateValidationStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateValidationStrategyPtrInput)(nil)).Elem(), TemplateValidationStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateVersionDefinitionInput)(nil)).Elem(), TemplateVersionDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateVersionDefinitionPtrInput)(nil)).Elem(), TemplateVersionDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateVisibleRangeOptionsInput)(nil)).Elem(), TemplateVisibleRangeOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateVisibleRangeOptionsPtrInput)(nil)).Elem(), TemplateVisibleRangeOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateVisualInput)(nil)).Elem(), TemplateVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateVisualArrayInput)(nil)).Elem(), TemplateVisualArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateVisualCustomActionInput)(nil)).Elem(), TemplateVisualCustomActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateVisualCustomActionArrayInput)(nil)).Elem(), TemplateVisualCustomActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateVisualCustomActionOperationInput)(nil)).Elem(), TemplateVisualCustomActionOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateVisualCustomActionOperationArrayInput)(nil)).Elem(), TemplateVisualCustomActionOperationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateVisualInteractionOptionsInput)(nil)).Elem(), TemplateVisualInteractionOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateVisualInteractionOptionsPtrInput)(nil)).Elem(), TemplateVisualInteractionOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateVisualMenuOptionInput)(nil)).Elem(), TemplateVisualMenuOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateVisualMenuOptionPtrInput)(nil)).Elem(), TemplateVisualMenuOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateVisualPaletteInput)(nil)).Elem(), TemplateVisualPaletteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateVisualPalettePtrInput)(nil)).Elem(), TemplateVisualPaletteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateVisualSubtitleLabelOptionsInput)(nil)).Elem(), TemplateVisualSubtitleLabelOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateVisualSubtitleLabelOptionsPtrInput)(nil)).Elem(), TemplateVisualSubtitleLabelOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateVisualTitleLabelOptionsInput)(nil)).Elem(), TemplateVisualTitleLabelOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateVisualTitleLabelOptionsPtrInput)(nil)).Elem(), TemplateVisualTitleLabelOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWaterfallChartAggregatedFieldWellsInput)(nil)).Elem(), TemplateWaterfallChartAggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWaterfallChartAggregatedFieldWellsPtrInput)(nil)).Elem(), TemplateWaterfallChartAggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWaterfallChartColorConfigurationInput)(nil)).Elem(), TemplateWaterfallChartColorConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWaterfallChartColorConfigurationPtrInput)(nil)).Elem(), TemplateWaterfallChartColorConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWaterfallChartConfigurationInput)(nil)).Elem(), TemplateWaterfallChartConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWaterfallChartConfigurationPtrInput)(nil)).Elem(), TemplateWaterfallChartConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWaterfallChartFieldWellsInput)(nil)).Elem(), TemplateWaterfallChartFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWaterfallChartFieldWellsPtrInput)(nil)).Elem(), TemplateWaterfallChartFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWaterfallChartGroupColorConfigurationInput)(nil)).Elem(), TemplateWaterfallChartGroupColorConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWaterfallChartGroupColorConfigurationPtrInput)(nil)).Elem(), TemplateWaterfallChartGroupColorConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWaterfallChartOptionsInput)(nil)).Elem(), TemplateWaterfallChartOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWaterfallChartOptionsPtrInput)(nil)).Elem(), TemplateWaterfallChartOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWaterfallChartSortConfigurationInput)(nil)).Elem(), TemplateWaterfallChartSortConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWaterfallChartSortConfigurationPtrInput)(nil)).Elem(), TemplateWaterfallChartSortConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWaterfallVisualInput)(nil)).Elem(), TemplateWaterfallVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWaterfallVisualPtrInput)(nil)).Elem(), TemplateWaterfallVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWhatIfPointScenarioInput)(nil)).Elem(), TemplateWhatIfPointScenarioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWhatIfPointScenarioPtrInput)(nil)).Elem(), TemplateWhatIfPointScenarioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWhatIfRangeScenarioInput)(nil)).Elem(), TemplateWhatIfRangeScenarioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWhatIfRangeScenarioPtrInput)(nil)).Elem(), TemplateWhatIfRangeScenarioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWordCloudAggregatedFieldWellsInput)(nil)).Elem(), TemplateWordCloudAggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWordCloudAggregatedFieldWellsPtrInput)(nil)).Elem(), TemplateWordCloudAggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWordCloudChartConfigurationInput)(nil)).Elem(), TemplateWordCloudChartConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWordCloudChartConfigurationPtrInput)(nil)).Elem(), TemplateWordCloudChartConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWordCloudFieldWellsInput)(nil)).Elem(), TemplateWordCloudFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWordCloudFieldWellsPtrInput)(nil)).Elem(), TemplateWordCloudFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWordCloudOptionsInput)(nil)).Elem(), TemplateWordCloudOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWordCloudOptionsPtrInput)(nil)).Elem(), TemplateWordCloudOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWordCloudSortConfigurationInput)(nil)).Elem(), TemplateWordCloudSortConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWordCloudSortConfigurationPtrInput)(nil)).Elem(), TemplateWordCloudSortConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWordCloudVisualInput)(nil)).Elem(), TemplateWordCloudVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWordCloudVisualPtrInput)(nil)).Elem(), TemplateWordCloudVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateYAxisOptionsInput)(nil)).Elem(), TemplateYAxisOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateYAxisOptionsPtrInput)(nil)).Elem(), TemplateYAxisOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeBorderStyleInput)(nil)).Elem(), ThemeBorderStyleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeBorderStylePtrInput)(nil)).Elem(), ThemeBorderStyleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeConfigurationInput)(nil)).Elem(), ThemeConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeDataColorPaletteInput)(nil)).Elem(), ThemeDataColorPaletteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeDataColorPalettePtrInput)(nil)).Elem(), ThemeDataColorPaletteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeFontInput)(nil)).Elem(), ThemeFontArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeFontArrayInput)(nil)).Elem(), ThemeFontArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeGutterStyleInput)(nil)).Elem(), ThemeGutterStyleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeGutterStylePtrInput)(nil)).Elem(), ThemeGutterStyleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeMarginStyleInput)(nil)).Elem(), ThemeMarginStyleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeMarginStylePtrInput)(nil)).Elem(), ThemeMarginStyleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeResourcePermissionInput)(nil)).Elem(), ThemeResourcePermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeResourcePermissionArrayInput)(nil)).Elem(), ThemeResourcePermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeSheetStyleInput)(nil)).Elem(), ThemeSheetStyleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeSheetStylePtrInput)(nil)).Elem(), ThemeSheetStyleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeTileLayoutStyleInput)(nil)).Elem(), ThemeTileLayoutStyleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeTileLayoutStylePtrInput)(nil)).Elem(), ThemeTileLayoutStyleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeTileStyleInput)(nil)).Elem(), ThemeTileStyleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeTileStylePtrInput)(nil)).Elem(), ThemeTileStyleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeTypographyInput)(nil)).Elem(), ThemeTypographyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeTypographyPtrInput)(nil)).Elem(), ThemeTypographyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeUiColorPaletteInput)(nil)).Elem(), ThemeUiColorPaletteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeUiColorPalettePtrInput)(nil)).Elem(), ThemeUiColorPaletteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicCalculatedFieldInput)(nil)).Elem(), TopicCalculatedFieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicCalculatedFieldArrayInput)(nil)).Elem(), TopicCalculatedFieldArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicCategoryFilterInput)(nil)).Elem(), TopicCategoryFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicCategoryFilterPtrInput)(nil)).Elem(), TopicCategoryFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicCategoryFilterConstantInput)(nil)).Elem(), TopicCategoryFilterConstantArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicCategoryFilterConstantPtrInput)(nil)).Elem(), TopicCategoryFilterConstantArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicCellValueSynonymInput)(nil)).Elem(), TopicCellValueSynonymArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicCellValueSynonymArrayInput)(nil)).Elem(), TopicCellValueSynonymArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicCollectiveConstantInput)(nil)).Elem(), TopicCollectiveConstantArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicCollectiveConstantPtrInput)(nil)).Elem(), TopicCollectiveConstantArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicColumnInput)(nil)).Elem(), TopicColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicColumnArrayInput)(nil)).Elem(), TopicColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicComparativeOrderInput)(nil)).Elem(), TopicComparativeOrderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicComparativeOrderPtrInput)(nil)).Elem(), TopicComparativeOrderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicConfigOptionsInput)(nil)).Elem(), TopicConfigOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicConfigOptionsPtrInput)(nil)).Elem(), TopicConfigOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicDataAggregationInput)(nil)).Elem(), TopicDataAggregationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicDataAggregationPtrInput)(nil)).Elem(), TopicDataAggregationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicDatasetMetadataInput)(nil)).Elem(), TopicDatasetMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicDatasetMetadataArrayInput)(nil)).Elem(), TopicDatasetMetadataArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicDateRangeFilterInput)(nil)).Elem(), TopicDateRangeFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicDateRangeFilterPtrInput)(nil)).Elem(), TopicDateRangeFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicDefaultFormattingInput)(nil)).Elem(), TopicDefaultFormattingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicDefaultFormattingPtrInput)(nil)).Elem(), TopicDefaultFormattingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicDisplayFormatOptionsInput)(nil)).Elem(), TopicDisplayFormatOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicDisplayFormatOptionsPtrInput)(nil)).Elem(), TopicDisplayFormatOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicFilterInput)(nil)).Elem(), TopicFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicFilterArrayInput)(nil)).Elem(), TopicFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicNamedEntityInput)(nil)).Elem(), TopicNamedEntityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicNamedEntityArrayInput)(nil)).Elem(), TopicNamedEntityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicNamedEntityDefinitionInput)(nil)).Elem(), TopicNamedEntityDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicNamedEntityDefinitionArrayInput)(nil)).Elem(), TopicNamedEntityDefinitionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicNamedEntityDefinitionMetricInput)(nil)).Elem(), TopicNamedEntityDefinitionMetricArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicNamedEntityDefinitionMetricPtrInput)(nil)).Elem(), TopicNamedEntityDefinitionMetricArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicNegativeFormatInput)(nil)).Elem(), TopicNegativeFormatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicNegativeFormatPtrInput)(nil)).Elem(), TopicNegativeFormatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicNumericEqualityFilterInput)(nil)).Elem(), TopicNumericEqualityFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicNumericEqualityFilterPtrInput)(nil)).Elem(), TopicNumericEqualityFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicNumericRangeFilterInput)(nil)).Elem(), TopicNumericRangeFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicNumericRangeFilterPtrInput)(nil)).Elem(), TopicNumericRangeFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicRangeConstantInput)(nil)).Elem(), TopicRangeConstantArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicRangeConstantPtrInput)(nil)).Elem(), TopicRangeConstantArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicRangeFilterConstantInput)(nil)).Elem(), TopicRangeFilterConstantArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicRangeFilterConstantPtrInput)(nil)).Elem(), TopicRangeFilterConstantArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicRelativeDateFilterInput)(nil)).Elem(), TopicRelativeDateFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicRelativeDateFilterPtrInput)(nil)).Elem(), TopicRelativeDateFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicSemanticEntityTypeInput)(nil)).Elem(), TopicSemanticEntityTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicSemanticEntityTypePtrInput)(nil)).Elem(), TopicSemanticEntityTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicSemanticTypeInput)(nil)).Elem(), TopicSemanticTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicSemanticTypePtrInput)(nil)).Elem(), TopicSemanticTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicSingularFilterConstantInput)(nil)).Elem(), TopicSingularFilterConstantArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicSingularFilterConstantPtrInput)(nil)).Elem(), TopicSingularFilterConstantArgs{})
	pulumi.RegisterOutputType(TemplateMaximumLabelTypeOutput{})
	pulumi.RegisterOutputType(TemplateMaximumLabelTypePtrOutput{})
	pulumi.RegisterOutputType(TemplateMaximumMinimumComputationOutput{})
	pulumi.RegisterOutputType(TemplateMaximumMinimumComputationPtrOutput{})
	pulumi.RegisterOutputType(TemplateMeasureFieldOutput{})
	pulumi.RegisterOutputType(TemplateMeasureFieldPtrOutput{})
	pulumi.RegisterOutputType(TemplateMeasureFieldArrayOutput{})
	pulumi.RegisterOutputType(TemplateMetricComparisonComputationOutput{})
	pulumi.RegisterOutputType(TemplateMetricComparisonComputationPtrOutput{})
	pulumi.RegisterOutputType(TemplateMinimumLabelTypeOutput{})
	pulumi.RegisterOutputType(TemplateMinimumLabelTypePtrOutput{})
	pulumi.RegisterOutputType(TemplateMissingDataConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateMissingDataConfigurationArrayOutput{})
	pulumi.RegisterOutputType(TemplateNegativeValueConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateNegativeValueConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateNestedFilterOutput{})
	pulumi.RegisterOutputType(TemplateNestedFilterPtrOutput{})
	pulumi.RegisterOutputType(TemplateNullValueFormatConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateNullValueFormatConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateNumberDisplayFormatConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateNumberDisplayFormatConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateNumberFormatConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateNumberFormatConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateNumericAxisOptionsOutput{})
	pulumi.RegisterOutputType(TemplateNumericAxisOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateNumericEqualityDrillDownFilterOutput{})
	pulumi.RegisterOutputType(TemplateNumericEqualityDrillDownFilterPtrOutput{})
	pulumi.RegisterOutputType(TemplateNumericEqualityFilterOutput{})
	pulumi.RegisterOutputType(TemplateNumericEqualityFilterPtrOutput{})
	pulumi.RegisterOutputType(TemplateNumericFormatConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateNumericFormatConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateNumericRangeFilterOutput{})
	pulumi.RegisterOutputType(TemplateNumericRangeFilterPtrOutput{})
	pulumi.RegisterOutputType(TemplateNumericRangeFilterValueOutput{})
	pulumi.RegisterOutputType(TemplateNumericRangeFilterValuePtrOutput{})
	pulumi.RegisterOutputType(TemplateNumericSeparatorConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateNumericSeparatorConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateNumericalAggregationFunctionOutput{})
	pulumi.RegisterOutputType(TemplateNumericalAggregationFunctionPtrOutput{})
	pulumi.RegisterOutputType(TemplateNumericalDimensionFieldOutput{})
	pulumi.RegisterOutputType(TemplateNumericalDimensionFieldPtrOutput{})
	pulumi.RegisterOutputType(TemplateNumericalMeasureFieldOutput{})
	pulumi.RegisterOutputType(TemplateNumericalMeasureFieldPtrOutput{})
	pulumi.RegisterOutputType(TemplatePaginationConfigurationOutput{})
	pulumi.RegisterOutputType(TemplatePaginationConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplatePanelConfigurationOutput{})
	pulumi.RegisterOutputType(TemplatePanelConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplatePanelTitleOptionsOutput{})
	pulumi.RegisterOutputType(TemplatePanelTitleOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateParameterControlOutput{})
	pulumi.RegisterOutputType(TemplateParameterControlArrayOutput{})
	pulumi.RegisterOutputType(TemplateParameterDateTimePickerControlOutput{})
	pulumi.RegisterOutputType(TemplateParameterDateTimePickerControlPtrOutput{})
	pulumi.RegisterOutputType(TemplateParameterDeclarationOutput{})
	pulumi.RegisterOutputType(TemplateParameterDeclarationArrayOutput{})
	pulumi.RegisterOutputType(TemplateParameterDropDownControlOutput{})
	pulumi.RegisterOutputType(TemplateParameterDropDownControlPtrOutput{})
	pulumi.RegisterOutputType(TemplateParameterListControlOutput{})
	pulumi.RegisterOutputType(TemplateParameterListControlPtrOutput{})
	pulumi.RegisterOutputType(TemplateParameterSelectableValuesOutput{})
	pulumi.RegisterOutputType(TemplateParameterSelectableValuesPtrOutput{})
	pulumi.RegisterOutputType(TemplateParameterSliderControlOutput{})
	pulumi.RegisterOutputType(TemplateParameterSliderControlPtrOutput{})
	pulumi.RegisterOutputType(TemplateParameterTextAreaControlOutput{})
	pulumi.RegisterOutputType(TemplateParameterTextAreaControlPtrOutput{})
	pulumi.RegisterOutputType(TemplateParameterTextFieldControlOutput{})
	pulumi.RegisterOutputType(TemplateParameterTextFieldControlPtrOutput{})
	pulumi.RegisterOutputType(TemplatePercentVisibleRangeOutput{})
	pulumi.RegisterOutputType(TemplatePercentVisibleRangePtrOutput{})
	pulumi.RegisterOutputType(TemplatePercentageDisplayFormatConfigurationOutput{})
	pulumi.RegisterOutputType(TemplatePercentageDisplayFormatConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplatePercentileAggregationOutput{})
	pulumi.RegisterOutputType(TemplatePercentileAggregationPtrOutput{})
	pulumi.RegisterOutputType(TemplatePeriodOverPeriodComputationOutput{})
	pulumi.RegisterOutputType(TemplatePeriodOverPeriodComputationPtrOutput{})
	pulumi.RegisterOutputType(TemplatePeriodToDateComputationOutput{})
	pulumi.RegisterOutputType(TemplatePeriodToDateComputationPtrOutput{})
	pulumi.RegisterOutputType(TemplatePieChartAggregatedFieldWellsOutput{})
	pulumi.RegisterOutputType(TemplatePieChartAggregatedFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(TemplatePieChartConfigurationOutput{})
	pulumi.RegisterOutputType(TemplatePieChartConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplatePieChartFieldWellsOutput{})
	pulumi.RegisterOutputType(TemplatePieChartFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(TemplatePieChartSortConfigurationOutput{})
	pulumi.RegisterOutputType(TemplatePieChartSortConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplatePieChartVisualOutput{})
	pulumi.RegisterOutputType(TemplatePieChartVisualPtrOutput{})
	pulumi.RegisterOutputType(TemplatePivotFieldSortOptionsOutput{})
	pulumi.RegisterOutputType(TemplatePivotFieldSortOptionsArrayOutput{})
	pulumi.RegisterOutputType(TemplatePivotTableAggregatedFieldWellsOutput{})
	pulumi.RegisterOutputType(TemplatePivotTableAggregatedFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(TemplatePivotTableCellConditionalFormattingOutput{})
	pulumi.RegisterOutputType(TemplatePivotTableCellConditionalFormattingPtrOutput{})
	pulumi.RegisterOutputType(TemplatePivotTableConditionalFormattingOutput{})
	pulumi.RegisterOutputType(TemplatePivotTableConditionalFormattingPtrOutput{})
	pulumi.RegisterOutputType(TemplatePivotTableConditionalFormattingOptionOutput{})
	pulumi.RegisterOutputType(TemplatePivotTableConditionalFormattingOptionArrayOutput{})
	pulumi.RegisterOutputType(TemplatePivotTableConditionalFormattingScopeOutput{})
	pulumi.RegisterOutputType(TemplatePivotTableConditionalFormattingScopePtrOutput{})
	pulumi.RegisterOutputType(TemplatePivotTableConditionalFormattingScopeArrayOutput{})
	pulumi.RegisterOutputType(TemplatePivotTableConfigurationOutput{})
	pulumi.RegisterOutputType(TemplatePivotTableConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplatePivotTableDataPathOptionOutput{})
	pulumi.RegisterOutputType(TemplatePivotTableDataPathOptionArrayOutput{})
	pulumi.RegisterOutputType(TemplatePivotTableFieldCollapseStateOptionOutput{})
	pulumi.RegisterOutputType(TemplatePivotTableFieldCollapseStateOptionArrayOutput{})
	pulumi.RegisterOutputType(TemplatePivotTableFieldCollapseStateTargetOutput{})
	pulumi.RegisterOutputType(TemplatePivotTableFieldOptionOutput{})
	pulumi.RegisterOutputType(TemplatePivotTableFieldOptionArrayOutput{})
	pulumi.RegisterOutputType(TemplatePivotTableFieldOptionsOutput{})
	pulumi.RegisterOutputType(TemplatePivotTableFieldOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplatePivotTableFieldSubtotalOptionsOutput{})
	pulumi.RegisterOutputType(TemplatePivotTableFieldSubtotalOptionsArrayOutput{})
	pulumi.RegisterOutputType(TemplatePivotTableFieldWellsOutput{})
	pulumi.RegisterOutputType(TemplatePivotTableFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(TemplatePivotTableOptionsOutput{})
	pulumi.RegisterOutputType(TemplatePivotTableOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplatePivotTablePaginatedReportOptionsOutput{})
	pulumi.RegisterOutputType(TemplatePivotTablePaginatedReportOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplatePivotTableRowsLabelOptionsOutput{})
	pulumi.RegisterOutputType(TemplatePivotTableRowsLabelOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplatePivotTableSortByOutput{})
	pulumi.RegisterOutputType(TemplatePivotTableSortConfigurationOutput{})
	pulumi.RegisterOutputType(TemplatePivotTableSortConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplatePivotTableTotalOptionsOutput{})
	pulumi.RegisterOutputType(TemplatePivotTableTotalOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplatePivotTableVisualOutput{})
	pulumi.RegisterOutputType(TemplatePivotTableVisualPtrOutput{})
	pulumi.RegisterOutputType(TemplatePivotTotalOptionsOutput{})
	pulumi.RegisterOutputType(TemplatePivotTotalOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplatePluginVisualOutput{})
	pulumi.RegisterOutputType(TemplatePluginVisualPtrOutput{})
	pulumi.RegisterOutputType(TemplatePluginVisualConfigurationOutput{})
	pulumi.RegisterOutputType(TemplatePluginVisualConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplatePluginVisualFieldWellOutput{})
	pulumi.RegisterOutputType(TemplatePluginVisualFieldWellArrayOutput{})
	pulumi.RegisterOutputType(TemplatePluginVisualItemsLimitConfigurationOutput{})
	pulumi.RegisterOutputType(TemplatePluginVisualItemsLimitConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplatePluginVisualOptionsOutput{})
	pulumi.RegisterOutputType(TemplatePluginVisualOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplatePluginVisualPropertyOutput{})
	pulumi.RegisterOutputType(TemplatePluginVisualPropertyArrayOutput{})
	pulumi.RegisterOutputType(TemplatePluginVisualSortConfigurationOutput{})
	pulumi.RegisterOutputType(TemplatePluginVisualSortConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplatePluginVisualTableQuerySortOutput{})
	pulumi.RegisterOutputType(TemplatePluginVisualTableQuerySortPtrOutput{})
	pulumi.RegisterOutputType(TemplatePredefinedHierarchyOutput{})
	pulumi.RegisterOutputType(TemplatePredefinedHierarchyPtrOutput{})
	pulumi.RegisterOutputType(TemplateProgressBarOptionsOutput{})
	pulumi.RegisterOutputType(TemplateProgressBarOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateQueryExecutionOptionsOutput{})
	pulumi.RegisterOutputType(TemplateQueryExecutionOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateRadarChartAggregatedFieldWellsOutput{})
	pulumi.RegisterOutputType(TemplateRadarChartAggregatedFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(TemplateRadarChartAreaStyleSettingsOutput{})
	pulumi.RegisterOutputType(TemplateRadarChartAreaStyleSettingsPtrOutput{})
	pulumi.RegisterOutputType(TemplateRadarChartConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateRadarChartConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateRadarChartFieldWellsOutput{})
	pulumi.RegisterOutputType(TemplateRadarChartFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(TemplateRadarChartSeriesSettingsOutput{})
	pulumi.RegisterOutputType(TemplateRadarChartSeriesSettingsPtrOutput{})
	pulumi.RegisterOutputType(TemplateRadarChartSortConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateRadarChartSortConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateRadarChartVisualOutput{})
	pulumi.RegisterOutputType(TemplateRadarChartVisualPtrOutput{})
	pulumi.RegisterOutputType(TemplateRangeEndsLabelTypeOutput{})
	pulumi.RegisterOutputType(TemplateRangeEndsLabelTypePtrOutput{})
	pulumi.RegisterOutputType(TemplateReferenceLineOutput{})
	pulumi.RegisterOutputType(TemplateReferenceLineArrayOutput{})
	pulumi.RegisterOutputType(TemplateReferenceLineCustomLabelConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateReferenceLineCustomLabelConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateReferenceLineDataConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateReferenceLineDynamicDataConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateReferenceLineDynamicDataConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateReferenceLineLabelConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateReferenceLineLabelConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateReferenceLineStaticDataConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateReferenceLineStaticDataConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateReferenceLineStyleConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateReferenceLineStyleConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateReferenceLineValueLabelConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateReferenceLineValueLabelConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateRelativeDateTimeControlDisplayOptionsOutput{})
	pulumi.RegisterOutputType(TemplateRelativeDateTimeControlDisplayOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateRelativeDatesFilterOutput{})
	pulumi.RegisterOutputType(TemplateRelativeDatesFilterPtrOutput{})
	pulumi.RegisterOutputType(TemplateResourcePermissionOutput{})
	pulumi.RegisterOutputType(TemplateResourcePermissionArrayOutput{})
	pulumi.RegisterOutputType(TemplateRollingDateConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateRollingDateConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateRowAlternateColorOptionsOutput{})
	pulumi.RegisterOutputType(TemplateRowAlternateColorOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateSameSheetTargetVisualConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateSameSheetTargetVisualConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateSankeyDiagramAggregatedFieldWellsOutput{})
	pulumi.RegisterOutputType(TemplateSankeyDiagramAggregatedFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(TemplateSankeyDiagramChartConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateSankeyDiagramChartConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateSankeyDiagramFieldWellsOutput{})
	pulumi.RegisterOutputType(TemplateSankeyDiagramFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(TemplateSankeyDiagramSortConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateSankeyDiagramSortConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateSankeyDiagramVisualOutput{})
	pulumi.RegisterOutputType(TemplateSankeyDiagramVisualPtrOutput{})
	pulumi.RegisterOutputType(TemplateScatterPlotCategoricallyAggregatedFieldWellsOutput{})
	pulumi.RegisterOutputType(TemplateScatterPlotCategoricallyAggregatedFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(TemplateScatterPlotConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateScatterPlotConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateScatterPlotFieldWellsOutput{})
	pulumi.RegisterOutputType(TemplateScatterPlotFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(TemplateScatterPlotSortConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateScatterPlotSortConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateScatterPlotUnaggregatedFieldWellsOutput{})
	pulumi.RegisterOutputType(TemplateScatterPlotUnaggregatedFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(TemplateScatterPlotVisualOutput{})
	pulumi.RegisterOutputType(TemplateScatterPlotVisualPtrOutput{})
	pulumi.RegisterOutputType(TemplateScrollBarOptionsOutput{})
	pulumi.RegisterOutputType(TemplateScrollBarOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateSecondaryValueOptionsOutput{})
	pulumi.RegisterOutputType(TemplateSecondaryValueOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateSectionAfterPageBreakOutput{})
	pulumi.RegisterOutputType(TemplateSectionAfterPageBreakPtrOutput{})
	pulumi.RegisterOutputType(TemplateSectionBasedLayoutCanvasSizeOptionsOutput{})
	pulumi.RegisterOutputType(TemplateSectionBasedLayoutCanvasSizeOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateSectionBasedLayoutConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateSectionBasedLayoutConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateSectionBasedLayoutPaperCanvasSizeOptionsOutput{})
	pulumi.RegisterOutputType(TemplateSectionBasedLayoutPaperCanvasSizeOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateSectionLayoutConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateSectionLayoutConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateSectionPageBreakConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateSectionPageBreakConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateSectionStyleOutput{})
	pulumi.RegisterOutputType(TemplateSectionStylePtrOutput{})
	pulumi.RegisterOutputType(TemplateSelectedSheetsFilterScopeConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateSelectedSheetsFilterScopeConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateSeriesItemOutput{})
	pulumi.RegisterOutputType(TemplateSeriesItemArrayOutput{})
	pulumi.RegisterOutputType(TemplateSetParameterValueConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateSetParameterValueConfigurationArrayOutput{})
	pulumi.RegisterOutputType(TemplateShapeConditionalFormatOutput{})
	pulumi.RegisterOutputType(TemplateShapeConditionalFormatPtrOutput{})
	pulumi.RegisterOutputType(TemplateSheetOutput{})
	pulumi.RegisterOutputType(TemplateSheetArrayOutput{})
	pulumi.RegisterOutputType(TemplateSheetControlInfoIconLabelOptionsOutput{})
	pulumi.RegisterOutputType(TemplateSheetControlInfoIconLabelOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateSheetControlLayoutOutput{})
	pulumi.RegisterOutputType(TemplateSheetControlLayoutArrayOutput{})
	pulumi.RegisterOutputType(TemplateSheetControlLayoutConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateSheetDefinitionOutput{})
	pulumi.RegisterOutputType(TemplateSheetDefinitionArrayOutput{})
	pulumi.RegisterOutputType(TemplateSheetElementConfigurationOverridesOutput{})
	pulumi.RegisterOutputType(TemplateSheetElementRenderingRuleOutput{})
	pulumi.RegisterOutputType(TemplateSheetElementRenderingRuleArrayOutput{})
	pulumi.RegisterOutputType(TemplateSheetImageOutput{})
	pulumi.RegisterOutputType(TemplateSheetImageArrayOutput{})
	pulumi.RegisterOutputType(TemplateSheetImageScalingConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateSheetImageScalingConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateSheetImageSourceOutput{})
	pulumi.RegisterOutputType(TemplateSheetImageStaticFileSourceOutput{})
	pulumi.RegisterOutputType(TemplateSheetImageStaticFileSourcePtrOutput{})
	pulumi.RegisterOutputType(TemplateSheetImageTooltipConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateSheetImageTooltipConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateSheetImageTooltipTextOutput{})
	pulumi.RegisterOutputType(TemplateSheetImageTooltipTextPtrOutput{})
	pulumi.RegisterOutputType(TemplateSheetTextBoxOutput{})
	pulumi.RegisterOutputType(TemplateSheetTextBoxArrayOutput{})
	pulumi.RegisterOutputType(TemplateSheetVisualScopingConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateSheetVisualScopingConfigurationArrayOutput{})
	pulumi.RegisterOutputType(TemplateShortFormatTextOutput{})
	pulumi.RegisterOutputType(TemplateShortFormatTextPtrOutput{})
	pulumi.RegisterOutputType(TemplateSimpleClusterMarkerOutput{})
	pulumi.RegisterOutputType(TemplateSimpleClusterMarkerPtrOutput{})
	pulumi.RegisterOutputType(TemplateSingleAxisOptionsOutput{})
	pulumi.RegisterOutputType(TemplateSingleAxisOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateSliderControlDisplayOptionsOutput{})
	pulumi.RegisterOutputType(TemplateSliderControlDisplayOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateSmallMultiplesAxisPropertiesOutput{})
	pulumi.RegisterOutputType(TemplateSmallMultiplesAxisPropertiesPtrOutput{})
	pulumi.RegisterOutputType(TemplateSmallMultiplesOptionsOutput{})
	pulumi.RegisterOutputType(TemplateSmallMultiplesOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateSourceAnalysisOutput{})
	pulumi.RegisterOutputType(TemplateSourceAnalysisPtrOutput{})
	pulumi.RegisterOutputType(TemplateSourceEntityOutput{})
	pulumi.RegisterOutputType(TemplateSourceEntityPtrOutput{})
	pulumi.RegisterOutputType(TemplateSourceTemplateOutput{})
	pulumi.RegisterOutputType(TemplateSourceTemplatePtrOutput{})
	pulumi.RegisterOutputType(TemplateSpacingOutput{})
	pulumi.RegisterOutputType(TemplateSpacingPtrOutput{})
	pulumi.RegisterOutputType(TemplateStringDefaultValuesOutput{})
	pulumi.RegisterOutputType(TemplateStringDefaultValuesPtrOutput{})
	pulumi.RegisterOutputType(TemplateStringFormatConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateStringFormatConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateStringParameterDeclarationOutput{})
	pulumi.RegisterOutputType(TemplateStringParameterDeclarationPtrOutput{})
	pulumi.RegisterOutputType(TemplateStringValueWhenUnsetConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateStringValueWhenUnsetConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateSubtotalOptionsOutput{})
	pulumi.RegisterOutputType(TemplateSubtotalOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateTableAggregatedFieldWellsOutput{})
	pulumi.RegisterOutputType(TemplateTableAggregatedFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(TemplateTableBorderOptionsOutput{})
	pulumi.RegisterOutputType(TemplateTableBorderOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateTableCellConditionalFormattingOutput{})
	pulumi.RegisterOutputType(TemplateTableCellConditionalFormattingPtrOutput{})
	pulumi.RegisterOutputType(TemplateTableCellImageSizingConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateTableCellImageSizingConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateTableCellStyleOutput{})
	pulumi.RegisterOutputType(TemplateTableCellStylePtrOutput{})
	pulumi.RegisterOutputType(TemplateTableConditionalFormattingOutput{})
	pulumi.RegisterOutputType(TemplateTableConditionalFormattingPtrOutput{})
	pulumi.RegisterOutputType(TemplateTableConditionalFormattingOptionOutput{})
	pulumi.RegisterOutputType(TemplateTableConditionalFormattingOptionArrayOutput{})
	pulumi.RegisterOutputType(TemplateTableConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateTableConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateTableFieldCustomIconContentOutput{})
	pulumi.RegisterOutputType(TemplateTableFieldCustomIconContentPtrOutput{})
	pulumi.RegisterOutputType(TemplateTableFieldCustomTextContentOutput{})
	pulumi.RegisterOutputType(TemplateTableFieldCustomTextContentPtrOutput{})
	pulumi.RegisterOutputType(TemplateTableFieldImageConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateTableFieldImageConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateTableFieldLinkConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateTableFieldLinkConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateTableFieldLinkContentConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateTableFieldLinkContentConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateTableFieldOptionOutput{})
	pulumi.RegisterOutputType(TemplateTableFieldOptionArrayOutput{})
	pulumi.RegisterOutputType(TemplateTableFieldOptionsOutput{})
	pulumi.RegisterOutputType(TemplateTableFieldOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateTableFieldUrlConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateTableFieldUrlConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateTableFieldWellsOutput{})
	pulumi.RegisterOutputType(TemplateTableFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(TemplateTableInlineVisualizationOutput{})
	pulumi.RegisterOutputType(TemplateTableInlineVisualizationArrayOutput{})
	pulumi.RegisterOutputType(TemplateTableOptionsOutput{})
	pulumi.RegisterOutputType(TemplateTableOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateTablePaginatedReportOptionsOutput{})
	pulumi.RegisterOutputType(TemplateTablePaginatedReportOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateTablePinnedFieldOptionsOutput{})
	pulumi.RegisterOutputType(TemplateTablePinnedFieldOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateTableRowConditionalFormattingOutput{})
	pulumi.RegisterOutputType(TemplateTableRowConditionalFormattingPtrOutput{})
	pulumi.RegisterOutputType(TemplateTableSideBorderOptionsOutput{})
	pulumi.RegisterOutputType(TemplateTableSideBorderOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateTableSortConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateTableSortConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateTableStyleTargetOutput{})
	pulumi.RegisterOutputType(TemplateTableStyleTargetArrayOutput{})
	pulumi.RegisterOutputType(TemplateTableUnaggregatedFieldWellsOutput{})
	pulumi.RegisterOutputType(TemplateTableUnaggregatedFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(TemplateTableVisualOutput{})
	pulumi.RegisterOutputType(TemplateTableVisualPtrOutput{})
	pulumi.RegisterOutputType(TemplateTextAreaControlDisplayOptionsOutput{})
	pulumi.RegisterOutputType(TemplateTextAreaControlDisplayOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateTextConditionalFormatOutput{})
	pulumi.RegisterOutputType(TemplateTextConditionalFormatPtrOutput{})
	pulumi.RegisterOutputType(TemplateTextControlPlaceholderOptionsOutput{})
	pulumi.RegisterOutputType(TemplateTextControlPlaceholderOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateTextFieldControlDisplayOptionsOutput{})
	pulumi.RegisterOutputType(TemplateTextFieldControlDisplayOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateThousandSeparatorOptionsOutput{})
	pulumi.RegisterOutputType(TemplateThousandSeparatorOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateTimeBasedForecastPropertiesOutput{})
	pulumi.RegisterOutputType(TemplateTimeBasedForecastPropertiesPtrOutput{})
	pulumi.RegisterOutputType(TemplateTimeEqualityFilterOutput{})
	pulumi.RegisterOutputType(TemplateTimeEqualityFilterPtrOutput{})
	pulumi.RegisterOutputType(TemplateTimeRangeDrillDownFilterOutput{})
	pulumi.RegisterOutputType(TemplateTimeRangeDrillDownFilterPtrOutput{})
	pulumi.RegisterOutputType(TemplateTimeRangeFilterOutput{})
	pulumi.RegisterOutputType(TemplateTimeRangeFilterPtrOutput{})
	pulumi.RegisterOutputType(TemplateTimeRangeFilterValueOutput{})
	pulumi.RegisterOutputType(TemplateTimeRangeFilterValuePtrOutput{})
	pulumi.RegisterOutputType(TemplateTooltipItemOutput{})
	pulumi.RegisterOutputType(TemplateTooltipItemArrayOutput{})
	pulumi.RegisterOutputType(TemplateTooltipOptionsOutput{})
	pulumi.RegisterOutputType(TemplateTooltipOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateTopBottomFilterOutput{})
	pulumi.RegisterOutputType(TemplateTopBottomFilterPtrOutput{})
	pulumi.RegisterOutputType(TemplateTopBottomMoversComputationOutput{})
	pulumi.RegisterOutputType(TemplateTopBottomMoversComputationPtrOutput{})
	pulumi.RegisterOutputType(TemplateTopBottomRankedComputationOutput{})
	pulumi.RegisterOutputType(TemplateTopBottomRankedComputationPtrOutput{})
	pulumi.RegisterOutputType(TemplateTotalAggregationComputationOutput{})
	pulumi.RegisterOutputType(TemplateTotalAggregationComputationPtrOutput{})
	pulumi.RegisterOutputType(TemplateTotalAggregationFunctionOutput{})
	pulumi.RegisterOutputType(TemplateTotalAggregationOptionOutput{})
	pulumi.RegisterOutputType(TemplateTotalAggregationOptionArrayOutput{})
	pulumi.RegisterOutputType(TemplateTotalOptionsOutput{})
	pulumi.RegisterOutputType(TemplateTotalOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateTreeMapAggregatedFieldWellsOutput{})
	pulumi.RegisterOutputType(TemplateTreeMapAggregatedFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(TemplateTreeMapConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateTreeMapConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateTreeMapFieldWellsOutput{})
	pulumi.RegisterOutputType(TemplateTreeMapFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(TemplateTreeMapSortConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateTreeMapSortConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateTreeMapVisualOutput{})
	pulumi.RegisterOutputType(TemplateTreeMapVisualPtrOutput{})
	pulumi.RegisterOutputType(TemplateTrendArrowOptionsOutput{})
	pulumi.RegisterOutputType(TemplateTrendArrowOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateUnaggregatedFieldOutput{})
	pulumi.RegisterOutputType(TemplateUnaggregatedFieldArrayOutput{})
	pulumi.RegisterOutputType(TemplateUniqueValuesComputationOutput{})
	pulumi.RegisterOutputType(TemplateUniqueValuesComputationPtrOutput{})
	pulumi.RegisterOutputType(TemplateValidationStrategyOutput{})
	pulumi.RegisterOutputType(TemplateValidationStrategyPtrOutput{})
	pulumi.RegisterOutputType(TemplateVersionOutput{})
	pulumi.RegisterOutputType(TemplateVersionPtrOutput{})
	pulumi.RegisterOutputType(TemplateVersionDefinitionOutput{})
	pulumi.RegisterOutputType(TemplateVersionDefinitionPtrOutput{})
	pulumi.RegisterOutputType(TemplateVisibleRangeOptionsOutput{})
	pulumi.RegisterOutputType(TemplateVisibleRangeOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateVisualOutput{})
	pulumi.RegisterOutputType(TemplateVisualArrayOutput{})
	pulumi.RegisterOutputType(TemplateVisualCustomActionOutput{})
	pulumi.RegisterOutputType(TemplateVisualCustomActionArrayOutput{})
	pulumi.RegisterOutputType(TemplateVisualCustomActionOperationOutput{})
	pulumi.RegisterOutputType(TemplateVisualCustomActionOperationArrayOutput{})
	pulumi.RegisterOutputType(TemplateVisualInteractionOptionsOutput{})
	pulumi.RegisterOutputType(TemplateVisualInteractionOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateVisualMenuOptionOutput{})
	pulumi.RegisterOutputType(TemplateVisualMenuOptionPtrOutput{})
	pulumi.RegisterOutputType(TemplateVisualPaletteOutput{})
	pulumi.RegisterOutputType(TemplateVisualPalettePtrOutput{})
	pulumi.RegisterOutputType(TemplateVisualSubtitleLabelOptionsOutput{})
	pulumi.RegisterOutputType(TemplateVisualSubtitleLabelOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateVisualTitleLabelOptionsOutput{})
	pulumi.RegisterOutputType(TemplateVisualTitleLabelOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateWaterfallChartAggregatedFieldWellsOutput{})
	pulumi.RegisterOutputType(TemplateWaterfallChartAggregatedFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(TemplateWaterfallChartColorConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateWaterfallChartColorConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateWaterfallChartConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateWaterfallChartConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateWaterfallChartFieldWellsOutput{})
	pulumi.RegisterOutputType(TemplateWaterfallChartFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(TemplateWaterfallChartGroupColorConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateWaterfallChartGroupColorConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateWaterfallChartOptionsOutput{})
	pulumi.RegisterOutputType(TemplateWaterfallChartOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateWaterfallChartSortConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateWaterfallChartSortConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateWaterfallVisualOutput{})
	pulumi.RegisterOutputType(TemplateWaterfallVisualPtrOutput{})
	pulumi.RegisterOutputType(TemplateWhatIfPointScenarioOutput{})
	pulumi.RegisterOutputType(TemplateWhatIfPointScenarioPtrOutput{})
	pulumi.RegisterOutputType(TemplateWhatIfRangeScenarioOutput{})
	pulumi.RegisterOutputType(TemplateWhatIfRangeScenarioPtrOutput{})
	pulumi.RegisterOutputType(TemplateWordCloudAggregatedFieldWellsOutput{})
	pulumi.RegisterOutputType(TemplateWordCloudAggregatedFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(TemplateWordCloudChartConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateWordCloudChartConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateWordCloudFieldWellsOutput{})
	pulumi.RegisterOutputType(TemplateWordCloudFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(TemplateWordCloudOptionsOutput{})
	pulumi.RegisterOutputType(TemplateWordCloudOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateWordCloudSortConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateWordCloudSortConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateWordCloudVisualOutput{})
	pulumi.RegisterOutputType(TemplateWordCloudVisualPtrOutput{})
	pulumi.RegisterOutputType(TemplateYAxisOptionsOutput{})
	pulumi.RegisterOutputType(TemplateYAxisOptionsPtrOutput{})
	pulumi.RegisterOutputType(ThemeBorderStyleOutput{})
	pulumi.RegisterOutputType(ThemeBorderStylePtrOutput{})
	pulumi.RegisterOutputType(ThemeConfigurationOutput{})
	pulumi.RegisterOutputType(ThemeConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ThemeDataColorPaletteOutput{})
	pulumi.RegisterOutputType(ThemeDataColorPalettePtrOutput{})
	pulumi.RegisterOutputType(ThemeErrorOutput{})
	pulumi.RegisterOutputType(ThemeErrorArrayOutput{})
	pulumi.RegisterOutputType(ThemeFontOutput{})
	pulumi.RegisterOutputType(ThemeFontArrayOutput{})
	pulumi.RegisterOutputType(ThemeGutterStyleOutput{})
	pulumi.RegisterOutputType(ThemeGutterStylePtrOutput{})
	pulumi.RegisterOutputType(ThemeMarginStyleOutput{})
	pulumi.RegisterOutputType(ThemeMarginStylePtrOutput{})
	pulumi.RegisterOutputType(ThemeResourcePermissionOutput{})
	pulumi.RegisterOutputType(ThemeResourcePermissionArrayOutput{})
	pulumi.RegisterOutputType(ThemeSheetStyleOutput{})
	pulumi.RegisterOutputType(ThemeSheetStylePtrOutput{})
	pulumi.RegisterOutputType(ThemeTileLayoutStyleOutput{})
	pulumi.RegisterOutputType(ThemeTileLayoutStylePtrOutput{})
	pulumi.RegisterOutputType(ThemeTileStyleOutput{})
	pulumi.RegisterOutputType(ThemeTileStylePtrOutput{})
	pulumi.RegisterOutputType(ThemeTypographyOutput{})
	pulumi.RegisterOutputType(ThemeTypographyPtrOutput{})
	pulumi.RegisterOutputType(ThemeUiColorPaletteOutput{})
	pulumi.RegisterOutputType(ThemeUiColorPalettePtrOutput{})
	pulumi.RegisterOutputType(ThemeVersionOutput{})
	pulumi.RegisterOutputType(ThemeVersionPtrOutput{})
	pulumi.RegisterOutputType(TopicCalculatedFieldOutput{})
	pulumi.RegisterOutputType(TopicCalculatedFieldArrayOutput{})
	pulumi.RegisterOutputType(TopicCategoryFilterOutput{})
	pulumi.RegisterOutputType(TopicCategoryFilterPtrOutput{})
	pulumi.RegisterOutputType(TopicCategoryFilterConstantOutput{})
	pulumi.RegisterOutputType(TopicCategoryFilterConstantPtrOutput{})
	pulumi.RegisterOutputType(TopicCellValueSynonymOutput{})
	pulumi.RegisterOutputType(TopicCellValueSynonymArrayOutput{})
	pulumi.RegisterOutputType(TopicCollectiveConstantOutput{})
	pulumi.RegisterOutputType(TopicCollectiveConstantPtrOutput{})
	pulumi.RegisterOutputType(TopicColumnOutput{})
	pulumi.RegisterOutputType(TopicColumnArrayOutput{})
	pulumi.RegisterOutputType(TopicComparativeOrderOutput{})
	pulumi.RegisterOutputType(TopicComparativeOrderPtrOutput{})
	pulumi.RegisterOutputType(TopicConfigOptionsOutput{})
	pulumi.RegisterOutputType(TopicConfigOptionsPtrOutput{})
	pulumi.RegisterOutputType(TopicDataAggregationOutput{})
	pulumi.RegisterOutputType(TopicDataAggregationPtrOutput{})
	pulumi.RegisterOutputType(TopicDatasetMetadataOutput{})
	pulumi.RegisterOutputType(TopicDatasetMetadataArrayOutput{})
	pulumi.RegisterOutputType(TopicDateRangeFilterOutput{})
	pulumi.RegisterOutputType(TopicDateRangeFilterPtrOutput{})
	pulumi.RegisterOutputType(TopicDefaultFormattingOutput{})
	pulumi.RegisterOutputType(TopicDefaultFormattingPtrOutput{})
	pulumi.RegisterOutputType(TopicDisplayFormatOptionsOutput{})
	pulumi.RegisterOutputType(TopicDisplayFormatOptionsPtrOutput{})
	pulumi.RegisterOutputType(TopicFilterOutput{})
	pulumi.RegisterOutputType(TopicFilterArrayOutput{})
	pulumi.RegisterOutputType(TopicNamedEntityOutput{})
	pulumi.RegisterOutputType(TopicNamedEntityArrayOutput{})
	pulumi.RegisterOutputType(TopicNamedEntityDefinitionOutput{})
	pulumi.RegisterOutputType(TopicNamedEntityDefinitionArrayOutput{})
	pulumi.RegisterOutputType(TopicNamedEntityDefinitionMetricOutput{})
	pulumi.RegisterOutputType(TopicNamedEntityDefinitionMetricPtrOutput{})
	pulumi.RegisterOutputType(TopicNegativeFormatOutput{})
	pulumi.RegisterOutputType(TopicNegativeFormatPtrOutput{})
	pulumi.RegisterOutputType(TopicNumericEqualityFilterOutput{})
	pulumi.RegisterOutputType(TopicNumericEqualityFilterPtrOutput{})
	pulumi.RegisterOutputType(TopicNumericRangeFilterOutput{})
	pulumi.RegisterOutputType(TopicNumericRangeFilterPtrOutput{})
	pulumi.RegisterOutputType(TopicRangeConstantOutput{})
	pulumi.RegisterOutputType(TopicRangeConstantPtrOutput{})
	pulumi.RegisterOutputType(TopicRangeFilterConstantOutput{})
	pulumi.RegisterOutputType(TopicRangeFilterConstantPtrOutput{})
	pulumi.RegisterOutputType(TopicRelativeDateFilterOutput{})
	pulumi.RegisterOutputType(TopicRelativeDateFilterPtrOutput{})
	pulumi.RegisterOutputType(TopicSemanticEntityTypeOutput{})
	pulumi.RegisterOutputType(TopicSemanticEntityTypePtrOutput{})
	pulumi.RegisterOutputType(TopicSemanticTypeOutput{})
	pulumi.RegisterOutputType(TopicSemanticTypePtrOutput{})
	pulumi.RegisterOutputType(TopicSingularFilterConstantOutput{})
	pulumi.RegisterOutputType(TopicSingularFilterConstantPtrOutput{})
	pulumi.RegisterOutputType(VpcConnectionNetworkInterfaceOutput{})
	pulumi.RegisterOutputType(VpcConnectionNetworkInterfaceArrayOutput{})
}
