// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package quicksight

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type TopicColumn struct {
	Aggregation            *TopicDefaultAggregation          `pulumi:"aggregation"`
	AllowedAggregations    []TopicAuthorSpecifiedAggregation `pulumi:"allowedAggregations"`
	CellValueSynonyms      []TopicCellValueSynonym           `pulumi:"cellValueSynonyms"`
	ColumnDataRole         *TopicColumnDataRole              `pulumi:"columnDataRole"`
	ColumnDescription      *string                           `pulumi:"columnDescription"`
	ColumnFriendlyName     *string                           `pulumi:"columnFriendlyName"`
	ColumnName             string                            `pulumi:"columnName"`
	ColumnSynonyms         []string                          `pulumi:"columnSynonyms"`
	ComparativeOrder       *TopicComparativeOrder            `pulumi:"comparativeOrder"`
	DefaultFormatting      *TopicDefaultFormatting           `pulumi:"defaultFormatting"`
	IsIncludedInTopic      *bool                             `pulumi:"isIncludedInTopic"`
	NeverAggregateInFilter *bool                             `pulumi:"neverAggregateInFilter"`
	NonAdditive            *bool                             `pulumi:"nonAdditive"`
	NotAllowedAggregations []TopicAuthorSpecifiedAggregation `pulumi:"notAllowedAggregations"`
	SemanticType           *TopicSemanticType                `pulumi:"semanticType"`
	TimeGranularity        *TopicTimeGranularity             `pulumi:"timeGranularity"`
}

// TopicColumnInput is an input type that accepts TopicColumnArgs and TopicColumnOutput values.
// You can construct a concrete instance of `TopicColumnInput` via:
//
//	TopicColumnArgs{...}
type TopicColumnInput interface {
	pulumi.Input

	ToTopicColumnOutput() TopicColumnOutput
	ToTopicColumnOutputWithContext(context.Context) TopicColumnOutput
}

type TopicColumnArgs struct {
	Aggregation            TopicDefaultAggregationPtrInput           `pulumi:"aggregation"`
	AllowedAggregations    TopicAuthorSpecifiedAggregationArrayInput `pulumi:"allowedAggregations"`
	CellValueSynonyms      TopicCellValueSynonymArrayInput           `pulumi:"cellValueSynonyms"`
	ColumnDataRole         TopicColumnDataRolePtrInput               `pulumi:"columnDataRole"`
	ColumnDescription      pulumi.StringPtrInput                     `pulumi:"columnDescription"`
	ColumnFriendlyName     pulumi.StringPtrInput                     `pulumi:"columnFriendlyName"`
	ColumnName             pulumi.StringInput                        `pulumi:"columnName"`
	ColumnSynonyms         pulumi.StringArrayInput                   `pulumi:"columnSynonyms"`
	ComparativeOrder       TopicComparativeOrderPtrInput             `pulumi:"comparativeOrder"`
	DefaultFormatting      TopicDefaultFormattingPtrInput            `pulumi:"defaultFormatting"`
	IsIncludedInTopic      pulumi.BoolPtrInput                       `pulumi:"isIncludedInTopic"`
	NeverAggregateInFilter pulumi.BoolPtrInput                       `pulumi:"neverAggregateInFilter"`
	NonAdditive            pulumi.BoolPtrInput                       `pulumi:"nonAdditive"`
	NotAllowedAggregations TopicAuthorSpecifiedAggregationArrayInput `pulumi:"notAllowedAggregations"`
	SemanticType           TopicSemanticTypePtrInput                 `pulumi:"semanticType"`
	TimeGranularity        TopicTimeGranularityPtrInput              `pulumi:"timeGranularity"`
}

func (TopicColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicColumn)(nil)).Elem()
}

func (i TopicColumnArgs) ToTopicColumnOutput() TopicColumnOutput {
	return i.ToTopicColumnOutputWithContext(context.Background())
}

func (i TopicColumnArgs) ToTopicColumnOutputWithContext(ctx context.Context) TopicColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicColumnOutput)
}

func (i TopicColumnArgs) ToOutput(ctx context.Context) pulumix.Output[TopicColumn] {
	return pulumix.Output[TopicColumn]{
		OutputState: i.ToTopicColumnOutputWithContext(ctx).OutputState,
	}
}

// TopicColumnArrayInput is an input type that accepts TopicColumnArray and TopicColumnArrayOutput values.
// You can construct a concrete instance of `TopicColumnArrayInput` via:
//
//	TopicColumnArray{ TopicColumnArgs{...} }
type TopicColumnArrayInput interface {
	pulumi.Input

	ToTopicColumnArrayOutput() TopicColumnArrayOutput
	ToTopicColumnArrayOutputWithContext(context.Context) TopicColumnArrayOutput
}

type TopicColumnArray []TopicColumnInput

func (TopicColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicColumn)(nil)).Elem()
}

func (i TopicColumnArray) ToTopicColumnArrayOutput() TopicColumnArrayOutput {
	return i.ToTopicColumnArrayOutputWithContext(context.Background())
}

func (i TopicColumnArray) ToTopicColumnArrayOutputWithContext(ctx context.Context) TopicColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicColumnArrayOutput)
}

func (i TopicColumnArray) ToOutput(ctx context.Context) pulumix.Output[[]TopicColumn] {
	return pulumix.Output[[]TopicColumn]{
		OutputState: i.ToTopicColumnArrayOutputWithContext(ctx).OutputState,
	}
}

type TopicColumnOutput struct{ *pulumi.OutputState }

func (TopicColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicColumn)(nil)).Elem()
}

func (o TopicColumnOutput) ToTopicColumnOutput() TopicColumnOutput {
	return o
}

func (o TopicColumnOutput) ToTopicColumnOutputWithContext(ctx context.Context) TopicColumnOutput {
	return o
}

func (o TopicColumnOutput) ToOutput(ctx context.Context) pulumix.Output[TopicColumn] {
	return pulumix.Output[TopicColumn]{
		OutputState: o.OutputState,
	}
}

func (o TopicColumnOutput) Aggregation() TopicDefaultAggregationPtrOutput {
	return o.ApplyT(func(v TopicColumn) *TopicDefaultAggregation { return v.Aggregation }).(TopicDefaultAggregationPtrOutput)
}

func (o TopicColumnOutput) AllowedAggregations() TopicAuthorSpecifiedAggregationArrayOutput {
	return o.ApplyT(func(v TopicColumn) []TopicAuthorSpecifiedAggregation { return v.AllowedAggregations }).(TopicAuthorSpecifiedAggregationArrayOutput)
}

func (o TopicColumnOutput) CellValueSynonyms() TopicCellValueSynonymArrayOutput {
	return o.ApplyT(func(v TopicColumn) []TopicCellValueSynonym { return v.CellValueSynonyms }).(TopicCellValueSynonymArrayOutput)
}

func (o TopicColumnOutput) ColumnDataRole() TopicColumnDataRolePtrOutput {
	return o.ApplyT(func(v TopicColumn) *TopicColumnDataRole { return v.ColumnDataRole }).(TopicColumnDataRolePtrOutput)
}

func (o TopicColumnOutput) ColumnDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicColumn) *string { return v.ColumnDescription }).(pulumi.StringPtrOutput)
}

func (o TopicColumnOutput) ColumnFriendlyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicColumn) *string { return v.ColumnFriendlyName }).(pulumi.StringPtrOutput)
}

func (o TopicColumnOutput) ColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v TopicColumn) string { return v.ColumnName }).(pulumi.StringOutput)
}

func (o TopicColumnOutput) ColumnSynonyms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TopicColumn) []string { return v.ColumnSynonyms }).(pulumi.StringArrayOutput)
}

func (o TopicColumnOutput) ComparativeOrder() TopicComparativeOrderPtrOutput {
	return o.ApplyT(func(v TopicColumn) *TopicComparativeOrder { return v.ComparativeOrder }).(TopicComparativeOrderPtrOutput)
}

func (o TopicColumnOutput) DefaultFormatting() TopicDefaultFormattingPtrOutput {
	return o.ApplyT(func(v TopicColumn) *TopicDefaultFormatting { return v.DefaultFormatting }).(TopicDefaultFormattingPtrOutput)
}

func (o TopicColumnOutput) IsIncludedInTopic() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TopicColumn) *bool { return v.IsIncludedInTopic }).(pulumi.BoolPtrOutput)
}

func (o TopicColumnOutput) NeverAggregateInFilter() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TopicColumn) *bool { return v.NeverAggregateInFilter }).(pulumi.BoolPtrOutput)
}

func (o TopicColumnOutput) NonAdditive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TopicColumn) *bool { return v.NonAdditive }).(pulumi.BoolPtrOutput)
}

func (o TopicColumnOutput) NotAllowedAggregations() TopicAuthorSpecifiedAggregationArrayOutput {
	return o.ApplyT(func(v TopicColumn) []TopicAuthorSpecifiedAggregation { return v.NotAllowedAggregations }).(TopicAuthorSpecifiedAggregationArrayOutput)
}

func (o TopicColumnOutput) SemanticType() TopicSemanticTypePtrOutput {
	return o.ApplyT(func(v TopicColumn) *TopicSemanticType { return v.SemanticType }).(TopicSemanticTypePtrOutput)
}

func (o TopicColumnOutput) TimeGranularity() TopicTimeGranularityPtrOutput {
	return o.ApplyT(func(v TopicColumn) *TopicTimeGranularity { return v.TimeGranularity }).(TopicTimeGranularityPtrOutput)
}

type TopicColumnArrayOutput struct{ *pulumi.OutputState }

func (TopicColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicColumn)(nil)).Elem()
}

func (o TopicColumnArrayOutput) ToTopicColumnArrayOutput() TopicColumnArrayOutput {
	return o
}

func (o TopicColumnArrayOutput) ToTopicColumnArrayOutputWithContext(ctx context.Context) TopicColumnArrayOutput {
	return o
}

func (o TopicColumnArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]TopicColumn] {
	return pulumix.Output[[]TopicColumn]{
		OutputState: o.OutputState,
	}
}

func (o TopicColumnArrayOutput) Index(i pulumi.IntInput) TopicColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TopicColumn {
		return vs[0].([]TopicColumn)[vs[1].(int)]
	}).(TopicColumnOutput)
}

type TopicComparativeOrder struct {
	SpecifedOrder                 []string                          `pulumi:"specifedOrder"`
	TreatUndefinedSpecifiedValues *TopicUndefinedSpecifiedValueType `pulumi:"treatUndefinedSpecifiedValues"`
	UseOrdering                   *TopicColumnOrderingType          `pulumi:"useOrdering"`
}

// TopicComparativeOrderInput is an input type that accepts TopicComparativeOrderArgs and TopicComparativeOrderOutput values.
// You can construct a concrete instance of `TopicComparativeOrderInput` via:
//
//	TopicComparativeOrderArgs{...}
type TopicComparativeOrderInput interface {
	pulumi.Input

	ToTopicComparativeOrderOutput() TopicComparativeOrderOutput
	ToTopicComparativeOrderOutputWithContext(context.Context) TopicComparativeOrderOutput
}

type TopicComparativeOrderArgs struct {
	SpecifedOrder                 pulumi.StringArrayInput                  `pulumi:"specifedOrder"`
	TreatUndefinedSpecifiedValues TopicUndefinedSpecifiedValueTypePtrInput `pulumi:"treatUndefinedSpecifiedValues"`
	UseOrdering                   TopicColumnOrderingTypePtrInput          `pulumi:"useOrdering"`
}

func (TopicComparativeOrderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicComparativeOrder)(nil)).Elem()
}

func (i TopicComparativeOrderArgs) ToTopicComparativeOrderOutput() TopicComparativeOrderOutput {
	return i.ToTopicComparativeOrderOutputWithContext(context.Background())
}

func (i TopicComparativeOrderArgs) ToTopicComparativeOrderOutputWithContext(ctx context.Context) TopicComparativeOrderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicComparativeOrderOutput)
}

func (i TopicComparativeOrderArgs) ToOutput(ctx context.Context) pulumix.Output[TopicComparativeOrder] {
	return pulumix.Output[TopicComparativeOrder]{
		OutputState: i.ToTopicComparativeOrderOutputWithContext(ctx).OutputState,
	}
}

func (i TopicComparativeOrderArgs) ToTopicComparativeOrderPtrOutput() TopicComparativeOrderPtrOutput {
	return i.ToTopicComparativeOrderPtrOutputWithContext(context.Background())
}

func (i TopicComparativeOrderArgs) ToTopicComparativeOrderPtrOutputWithContext(ctx context.Context) TopicComparativeOrderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicComparativeOrderOutput).ToTopicComparativeOrderPtrOutputWithContext(ctx)
}

// TopicComparativeOrderPtrInput is an input type that accepts TopicComparativeOrderArgs, TopicComparativeOrderPtr and TopicComparativeOrderPtrOutput values.
// You can construct a concrete instance of `TopicComparativeOrderPtrInput` via:
//
//	        TopicComparativeOrderArgs{...}
//
//	or:
//
//	        nil
type TopicComparativeOrderPtrInput interface {
	pulumi.Input

	ToTopicComparativeOrderPtrOutput() TopicComparativeOrderPtrOutput
	ToTopicComparativeOrderPtrOutputWithContext(context.Context) TopicComparativeOrderPtrOutput
}

type topicComparativeOrderPtrType TopicComparativeOrderArgs

func TopicComparativeOrderPtr(v *TopicComparativeOrderArgs) TopicComparativeOrderPtrInput {
	return (*topicComparativeOrderPtrType)(v)
}

func (*topicComparativeOrderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicComparativeOrder)(nil)).Elem()
}

func (i *topicComparativeOrderPtrType) ToTopicComparativeOrderPtrOutput() TopicComparativeOrderPtrOutput {
	return i.ToTopicComparativeOrderPtrOutputWithContext(context.Background())
}

func (i *topicComparativeOrderPtrType) ToTopicComparativeOrderPtrOutputWithContext(ctx context.Context) TopicComparativeOrderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicComparativeOrderPtrOutput)
}

func (i *topicComparativeOrderPtrType) ToOutput(ctx context.Context) pulumix.Output[*TopicComparativeOrder] {
	return pulumix.Output[*TopicComparativeOrder]{
		OutputState: i.ToTopicComparativeOrderPtrOutputWithContext(ctx).OutputState,
	}
}

type TopicComparativeOrderOutput struct{ *pulumi.OutputState }

func (TopicComparativeOrderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicComparativeOrder)(nil)).Elem()
}

func (o TopicComparativeOrderOutput) ToTopicComparativeOrderOutput() TopicComparativeOrderOutput {
	return o
}

func (o TopicComparativeOrderOutput) ToTopicComparativeOrderOutputWithContext(ctx context.Context) TopicComparativeOrderOutput {
	return o
}

func (o TopicComparativeOrderOutput) ToTopicComparativeOrderPtrOutput() TopicComparativeOrderPtrOutput {
	return o.ToTopicComparativeOrderPtrOutputWithContext(context.Background())
}

func (o TopicComparativeOrderOutput) ToTopicComparativeOrderPtrOutputWithContext(ctx context.Context) TopicComparativeOrderPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicComparativeOrder) *TopicComparativeOrder {
		return &v
	}).(TopicComparativeOrderPtrOutput)
}

func (o TopicComparativeOrderOutput) ToOutput(ctx context.Context) pulumix.Output[TopicComparativeOrder] {
	return pulumix.Output[TopicComparativeOrder]{
		OutputState: o.OutputState,
	}
}

func (o TopicComparativeOrderOutput) SpecifedOrder() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TopicComparativeOrder) []string { return v.SpecifedOrder }).(pulumi.StringArrayOutput)
}

func (o TopicComparativeOrderOutput) TreatUndefinedSpecifiedValues() TopicUndefinedSpecifiedValueTypePtrOutput {
	return o.ApplyT(func(v TopicComparativeOrder) *TopicUndefinedSpecifiedValueType {
		return v.TreatUndefinedSpecifiedValues
	}).(TopicUndefinedSpecifiedValueTypePtrOutput)
}

func (o TopicComparativeOrderOutput) UseOrdering() TopicColumnOrderingTypePtrOutput {
	return o.ApplyT(func(v TopicComparativeOrder) *TopicColumnOrderingType { return v.UseOrdering }).(TopicColumnOrderingTypePtrOutput)
}

type TopicComparativeOrderPtrOutput struct{ *pulumi.OutputState }

func (TopicComparativeOrderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicComparativeOrder)(nil)).Elem()
}

func (o TopicComparativeOrderPtrOutput) ToTopicComparativeOrderPtrOutput() TopicComparativeOrderPtrOutput {
	return o
}

func (o TopicComparativeOrderPtrOutput) ToTopicComparativeOrderPtrOutputWithContext(ctx context.Context) TopicComparativeOrderPtrOutput {
	return o
}

func (o TopicComparativeOrderPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TopicComparativeOrder] {
	return pulumix.Output[*TopicComparativeOrder]{
		OutputState: o.OutputState,
	}
}

func (o TopicComparativeOrderPtrOutput) Elem() TopicComparativeOrderOutput {
	return o.ApplyT(func(v *TopicComparativeOrder) TopicComparativeOrder {
		if v != nil {
			return *v
		}
		var ret TopicComparativeOrder
		return ret
	}).(TopicComparativeOrderOutput)
}

func (o TopicComparativeOrderPtrOutput) SpecifedOrder() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TopicComparativeOrder) []string {
		if v == nil {
			return nil
		}
		return v.SpecifedOrder
	}).(pulumi.StringArrayOutput)
}

func (o TopicComparativeOrderPtrOutput) TreatUndefinedSpecifiedValues() TopicUndefinedSpecifiedValueTypePtrOutput {
	return o.ApplyT(func(v *TopicComparativeOrder) *TopicUndefinedSpecifiedValueType {
		if v == nil {
			return nil
		}
		return v.TreatUndefinedSpecifiedValues
	}).(TopicUndefinedSpecifiedValueTypePtrOutput)
}

func (o TopicComparativeOrderPtrOutput) UseOrdering() TopicColumnOrderingTypePtrOutput {
	return o.ApplyT(func(v *TopicComparativeOrder) *TopicColumnOrderingType {
		if v == nil {
			return nil
		}
		return v.UseOrdering
	}).(TopicColumnOrderingTypePtrOutput)
}

type TopicDataAggregation struct {
	DatasetRowDateGranularity *TopicTimeGranularity `pulumi:"datasetRowDateGranularity"`
	DefaultDateColumnName     *string               `pulumi:"defaultDateColumnName"`
}

// TopicDataAggregationInput is an input type that accepts TopicDataAggregationArgs and TopicDataAggregationOutput values.
// You can construct a concrete instance of `TopicDataAggregationInput` via:
//
//	TopicDataAggregationArgs{...}
type TopicDataAggregationInput interface {
	pulumi.Input

	ToTopicDataAggregationOutput() TopicDataAggregationOutput
	ToTopicDataAggregationOutputWithContext(context.Context) TopicDataAggregationOutput
}

type TopicDataAggregationArgs struct {
	DatasetRowDateGranularity TopicTimeGranularityPtrInput `pulumi:"datasetRowDateGranularity"`
	DefaultDateColumnName     pulumi.StringPtrInput        `pulumi:"defaultDateColumnName"`
}

func (TopicDataAggregationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicDataAggregation)(nil)).Elem()
}

func (i TopicDataAggregationArgs) ToTopicDataAggregationOutput() TopicDataAggregationOutput {
	return i.ToTopicDataAggregationOutputWithContext(context.Background())
}

func (i TopicDataAggregationArgs) ToTopicDataAggregationOutputWithContext(ctx context.Context) TopicDataAggregationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicDataAggregationOutput)
}

func (i TopicDataAggregationArgs) ToOutput(ctx context.Context) pulumix.Output[TopicDataAggregation] {
	return pulumix.Output[TopicDataAggregation]{
		OutputState: i.ToTopicDataAggregationOutputWithContext(ctx).OutputState,
	}
}

func (i TopicDataAggregationArgs) ToTopicDataAggregationPtrOutput() TopicDataAggregationPtrOutput {
	return i.ToTopicDataAggregationPtrOutputWithContext(context.Background())
}

func (i TopicDataAggregationArgs) ToTopicDataAggregationPtrOutputWithContext(ctx context.Context) TopicDataAggregationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicDataAggregationOutput).ToTopicDataAggregationPtrOutputWithContext(ctx)
}

// TopicDataAggregationPtrInput is an input type that accepts TopicDataAggregationArgs, TopicDataAggregationPtr and TopicDataAggregationPtrOutput values.
// You can construct a concrete instance of `TopicDataAggregationPtrInput` via:
//
//	        TopicDataAggregationArgs{...}
//
//	or:
//
//	        nil
type TopicDataAggregationPtrInput interface {
	pulumi.Input

	ToTopicDataAggregationPtrOutput() TopicDataAggregationPtrOutput
	ToTopicDataAggregationPtrOutputWithContext(context.Context) TopicDataAggregationPtrOutput
}

type topicDataAggregationPtrType TopicDataAggregationArgs

func TopicDataAggregationPtr(v *TopicDataAggregationArgs) TopicDataAggregationPtrInput {
	return (*topicDataAggregationPtrType)(v)
}

func (*topicDataAggregationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicDataAggregation)(nil)).Elem()
}

func (i *topicDataAggregationPtrType) ToTopicDataAggregationPtrOutput() TopicDataAggregationPtrOutput {
	return i.ToTopicDataAggregationPtrOutputWithContext(context.Background())
}

func (i *topicDataAggregationPtrType) ToTopicDataAggregationPtrOutputWithContext(ctx context.Context) TopicDataAggregationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicDataAggregationPtrOutput)
}

func (i *topicDataAggregationPtrType) ToOutput(ctx context.Context) pulumix.Output[*TopicDataAggregation] {
	return pulumix.Output[*TopicDataAggregation]{
		OutputState: i.ToTopicDataAggregationPtrOutputWithContext(ctx).OutputState,
	}
}

type TopicDataAggregationOutput struct{ *pulumi.OutputState }

func (TopicDataAggregationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicDataAggregation)(nil)).Elem()
}

func (o TopicDataAggregationOutput) ToTopicDataAggregationOutput() TopicDataAggregationOutput {
	return o
}

func (o TopicDataAggregationOutput) ToTopicDataAggregationOutputWithContext(ctx context.Context) TopicDataAggregationOutput {
	return o
}

func (o TopicDataAggregationOutput) ToTopicDataAggregationPtrOutput() TopicDataAggregationPtrOutput {
	return o.ToTopicDataAggregationPtrOutputWithContext(context.Background())
}

func (o TopicDataAggregationOutput) ToTopicDataAggregationPtrOutputWithContext(ctx context.Context) TopicDataAggregationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicDataAggregation) *TopicDataAggregation {
		return &v
	}).(TopicDataAggregationPtrOutput)
}

func (o TopicDataAggregationOutput) ToOutput(ctx context.Context) pulumix.Output[TopicDataAggregation] {
	return pulumix.Output[TopicDataAggregation]{
		OutputState: o.OutputState,
	}
}

func (o TopicDataAggregationOutput) DatasetRowDateGranularity() TopicTimeGranularityPtrOutput {
	return o.ApplyT(func(v TopicDataAggregation) *TopicTimeGranularity { return v.DatasetRowDateGranularity }).(TopicTimeGranularityPtrOutput)
}

func (o TopicDataAggregationOutput) DefaultDateColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicDataAggregation) *string { return v.DefaultDateColumnName }).(pulumi.StringPtrOutput)
}

type TopicDataAggregationPtrOutput struct{ *pulumi.OutputState }

func (TopicDataAggregationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicDataAggregation)(nil)).Elem()
}

func (o TopicDataAggregationPtrOutput) ToTopicDataAggregationPtrOutput() TopicDataAggregationPtrOutput {
	return o
}

func (o TopicDataAggregationPtrOutput) ToTopicDataAggregationPtrOutputWithContext(ctx context.Context) TopicDataAggregationPtrOutput {
	return o
}

func (o TopicDataAggregationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TopicDataAggregation] {
	return pulumix.Output[*TopicDataAggregation]{
		OutputState: o.OutputState,
	}
}

func (o TopicDataAggregationPtrOutput) Elem() TopicDataAggregationOutput {
	return o.ApplyT(func(v *TopicDataAggregation) TopicDataAggregation {
		if v != nil {
			return *v
		}
		var ret TopicDataAggregation
		return ret
	}).(TopicDataAggregationOutput)
}

func (o TopicDataAggregationPtrOutput) DatasetRowDateGranularity() TopicTimeGranularityPtrOutput {
	return o.ApplyT(func(v *TopicDataAggregation) *TopicTimeGranularity {
		if v == nil {
			return nil
		}
		return v.DatasetRowDateGranularity
	}).(TopicTimeGranularityPtrOutput)
}

func (o TopicDataAggregationPtrOutput) DefaultDateColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicDataAggregation) *string {
		if v == nil {
			return nil
		}
		return v.DefaultDateColumnName
	}).(pulumi.StringPtrOutput)
}

type TopicDatasetMetadata struct {
	CalculatedFields   []TopicCalculatedField `pulumi:"calculatedFields"`
	Columns            []TopicColumn          `pulumi:"columns"`
	DataAggregation    *TopicDataAggregation  `pulumi:"dataAggregation"`
	DatasetArn         string                 `pulumi:"datasetArn"`
	DatasetDescription *string                `pulumi:"datasetDescription"`
	DatasetName        *string                `pulumi:"datasetName"`
	Filters            []TopicFilter          `pulumi:"filters"`
	NamedEntities      []TopicNamedEntity     `pulumi:"namedEntities"`
}

// TopicDatasetMetadataInput is an input type that accepts TopicDatasetMetadataArgs and TopicDatasetMetadataOutput values.
// You can construct a concrete instance of `TopicDatasetMetadataInput` via:
//
//	TopicDatasetMetadataArgs{...}
type TopicDatasetMetadataInput interface {
	pulumi.Input

	ToTopicDatasetMetadataOutput() TopicDatasetMetadataOutput
	ToTopicDatasetMetadataOutputWithContext(context.Context) TopicDatasetMetadataOutput
}

type TopicDatasetMetadataArgs struct {
	CalculatedFields   TopicCalculatedFieldArrayInput `pulumi:"calculatedFields"`
	Columns            TopicColumnArrayInput          `pulumi:"columns"`
	DataAggregation    TopicDataAggregationPtrInput   `pulumi:"dataAggregation"`
	DatasetArn         pulumi.StringInput             `pulumi:"datasetArn"`
	DatasetDescription pulumi.StringPtrInput          `pulumi:"datasetDescription"`
	DatasetName        pulumi.StringPtrInput          `pulumi:"datasetName"`
	Filters            TopicFilterArrayInput          `pulumi:"filters"`
	NamedEntities      TopicNamedEntityArrayInput     `pulumi:"namedEntities"`
}

func (TopicDatasetMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicDatasetMetadata)(nil)).Elem()
}

func (i TopicDatasetMetadataArgs) ToTopicDatasetMetadataOutput() TopicDatasetMetadataOutput {
	return i.ToTopicDatasetMetadataOutputWithContext(context.Background())
}

func (i TopicDatasetMetadataArgs) ToTopicDatasetMetadataOutputWithContext(ctx context.Context) TopicDatasetMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicDatasetMetadataOutput)
}

func (i TopicDatasetMetadataArgs) ToOutput(ctx context.Context) pulumix.Output[TopicDatasetMetadata] {
	return pulumix.Output[TopicDatasetMetadata]{
		OutputState: i.ToTopicDatasetMetadataOutputWithContext(ctx).OutputState,
	}
}

// TopicDatasetMetadataArrayInput is an input type that accepts TopicDatasetMetadataArray and TopicDatasetMetadataArrayOutput values.
// You can construct a concrete instance of `TopicDatasetMetadataArrayInput` via:
//
//	TopicDatasetMetadataArray{ TopicDatasetMetadataArgs{...} }
type TopicDatasetMetadataArrayInput interface {
	pulumi.Input

	ToTopicDatasetMetadataArrayOutput() TopicDatasetMetadataArrayOutput
	ToTopicDatasetMetadataArrayOutputWithContext(context.Context) TopicDatasetMetadataArrayOutput
}

type TopicDatasetMetadataArray []TopicDatasetMetadataInput

func (TopicDatasetMetadataArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicDatasetMetadata)(nil)).Elem()
}

func (i TopicDatasetMetadataArray) ToTopicDatasetMetadataArrayOutput() TopicDatasetMetadataArrayOutput {
	return i.ToTopicDatasetMetadataArrayOutputWithContext(context.Background())
}

func (i TopicDatasetMetadataArray) ToTopicDatasetMetadataArrayOutputWithContext(ctx context.Context) TopicDatasetMetadataArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicDatasetMetadataArrayOutput)
}

func (i TopicDatasetMetadataArray) ToOutput(ctx context.Context) pulumix.Output[[]TopicDatasetMetadata] {
	return pulumix.Output[[]TopicDatasetMetadata]{
		OutputState: i.ToTopicDatasetMetadataArrayOutputWithContext(ctx).OutputState,
	}
}

type TopicDatasetMetadataOutput struct{ *pulumi.OutputState }

func (TopicDatasetMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicDatasetMetadata)(nil)).Elem()
}

func (o TopicDatasetMetadataOutput) ToTopicDatasetMetadataOutput() TopicDatasetMetadataOutput {
	return o
}

func (o TopicDatasetMetadataOutput) ToTopicDatasetMetadataOutputWithContext(ctx context.Context) TopicDatasetMetadataOutput {
	return o
}

func (o TopicDatasetMetadataOutput) ToOutput(ctx context.Context) pulumix.Output[TopicDatasetMetadata] {
	return pulumix.Output[TopicDatasetMetadata]{
		OutputState: o.OutputState,
	}
}

func (o TopicDatasetMetadataOutput) CalculatedFields() TopicCalculatedFieldArrayOutput {
	return o.ApplyT(func(v TopicDatasetMetadata) []TopicCalculatedField { return v.CalculatedFields }).(TopicCalculatedFieldArrayOutput)
}

func (o TopicDatasetMetadataOutput) Columns() TopicColumnArrayOutput {
	return o.ApplyT(func(v TopicDatasetMetadata) []TopicColumn { return v.Columns }).(TopicColumnArrayOutput)
}

func (o TopicDatasetMetadataOutput) DataAggregation() TopicDataAggregationPtrOutput {
	return o.ApplyT(func(v TopicDatasetMetadata) *TopicDataAggregation { return v.DataAggregation }).(TopicDataAggregationPtrOutput)
}

func (o TopicDatasetMetadataOutput) DatasetArn() pulumi.StringOutput {
	return o.ApplyT(func(v TopicDatasetMetadata) string { return v.DatasetArn }).(pulumi.StringOutput)
}

func (o TopicDatasetMetadataOutput) DatasetDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicDatasetMetadata) *string { return v.DatasetDescription }).(pulumi.StringPtrOutput)
}

func (o TopicDatasetMetadataOutput) DatasetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicDatasetMetadata) *string { return v.DatasetName }).(pulumi.StringPtrOutput)
}

func (o TopicDatasetMetadataOutput) Filters() TopicFilterArrayOutput {
	return o.ApplyT(func(v TopicDatasetMetadata) []TopicFilter { return v.Filters }).(TopicFilterArrayOutput)
}

func (o TopicDatasetMetadataOutput) NamedEntities() TopicNamedEntityArrayOutput {
	return o.ApplyT(func(v TopicDatasetMetadata) []TopicNamedEntity { return v.NamedEntities }).(TopicNamedEntityArrayOutput)
}

type TopicDatasetMetadataArrayOutput struct{ *pulumi.OutputState }

func (TopicDatasetMetadataArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicDatasetMetadata)(nil)).Elem()
}

func (o TopicDatasetMetadataArrayOutput) ToTopicDatasetMetadataArrayOutput() TopicDatasetMetadataArrayOutput {
	return o
}

func (o TopicDatasetMetadataArrayOutput) ToTopicDatasetMetadataArrayOutputWithContext(ctx context.Context) TopicDatasetMetadataArrayOutput {
	return o
}

func (o TopicDatasetMetadataArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]TopicDatasetMetadata] {
	return pulumix.Output[[]TopicDatasetMetadata]{
		OutputState: o.OutputState,
	}
}

func (o TopicDatasetMetadataArrayOutput) Index(i pulumi.IntInput) TopicDatasetMetadataOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TopicDatasetMetadata {
		return vs[0].([]TopicDatasetMetadata)[vs[1].(int)]
	}).(TopicDatasetMetadataOutput)
}

type TopicDateRangeFilter struct {
	Constant  *TopicRangeFilterConstant `pulumi:"constant"`
	Inclusive *bool                     `pulumi:"inclusive"`
}

// TopicDateRangeFilterInput is an input type that accepts TopicDateRangeFilterArgs and TopicDateRangeFilterOutput values.
// You can construct a concrete instance of `TopicDateRangeFilterInput` via:
//
//	TopicDateRangeFilterArgs{...}
type TopicDateRangeFilterInput interface {
	pulumi.Input

	ToTopicDateRangeFilterOutput() TopicDateRangeFilterOutput
	ToTopicDateRangeFilterOutputWithContext(context.Context) TopicDateRangeFilterOutput
}

type TopicDateRangeFilterArgs struct {
	Constant  TopicRangeFilterConstantPtrInput `pulumi:"constant"`
	Inclusive pulumi.BoolPtrInput              `pulumi:"inclusive"`
}

func (TopicDateRangeFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicDateRangeFilter)(nil)).Elem()
}

func (i TopicDateRangeFilterArgs) ToTopicDateRangeFilterOutput() TopicDateRangeFilterOutput {
	return i.ToTopicDateRangeFilterOutputWithContext(context.Background())
}

func (i TopicDateRangeFilterArgs) ToTopicDateRangeFilterOutputWithContext(ctx context.Context) TopicDateRangeFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicDateRangeFilterOutput)
}

func (i TopicDateRangeFilterArgs) ToOutput(ctx context.Context) pulumix.Output[TopicDateRangeFilter] {
	return pulumix.Output[TopicDateRangeFilter]{
		OutputState: i.ToTopicDateRangeFilterOutputWithContext(ctx).OutputState,
	}
}

func (i TopicDateRangeFilterArgs) ToTopicDateRangeFilterPtrOutput() TopicDateRangeFilterPtrOutput {
	return i.ToTopicDateRangeFilterPtrOutputWithContext(context.Background())
}

func (i TopicDateRangeFilterArgs) ToTopicDateRangeFilterPtrOutputWithContext(ctx context.Context) TopicDateRangeFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicDateRangeFilterOutput).ToTopicDateRangeFilterPtrOutputWithContext(ctx)
}

// TopicDateRangeFilterPtrInput is an input type that accepts TopicDateRangeFilterArgs, TopicDateRangeFilterPtr and TopicDateRangeFilterPtrOutput values.
// You can construct a concrete instance of `TopicDateRangeFilterPtrInput` via:
//
//	        TopicDateRangeFilterArgs{...}
//
//	or:
//
//	        nil
type TopicDateRangeFilterPtrInput interface {
	pulumi.Input

	ToTopicDateRangeFilterPtrOutput() TopicDateRangeFilterPtrOutput
	ToTopicDateRangeFilterPtrOutputWithContext(context.Context) TopicDateRangeFilterPtrOutput
}

type topicDateRangeFilterPtrType TopicDateRangeFilterArgs

func TopicDateRangeFilterPtr(v *TopicDateRangeFilterArgs) TopicDateRangeFilterPtrInput {
	return (*topicDateRangeFilterPtrType)(v)
}

func (*topicDateRangeFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicDateRangeFilter)(nil)).Elem()
}

func (i *topicDateRangeFilterPtrType) ToTopicDateRangeFilterPtrOutput() TopicDateRangeFilterPtrOutput {
	return i.ToTopicDateRangeFilterPtrOutputWithContext(context.Background())
}

func (i *topicDateRangeFilterPtrType) ToTopicDateRangeFilterPtrOutputWithContext(ctx context.Context) TopicDateRangeFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicDateRangeFilterPtrOutput)
}

func (i *topicDateRangeFilterPtrType) ToOutput(ctx context.Context) pulumix.Output[*TopicDateRangeFilter] {
	return pulumix.Output[*TopicDateRangeFilter]{
		OutputState: i.ToTopicDateRangeFilterPtrOutputWithContext(ctx).OutputState,
	}
}

type TopicDateRangeFilterOutput struct{ *pulumi.OutputState }

func (TopicDateRangeFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicDateRangeFilter)(nil)).Elem()
}

func (o TopicDateRangeFilterOutput) ToTopicDateRangeFilterOutput() TopicDateRangeFilterOutput {
	return o
}

func (o TopicDateRangeFilterOutput) ToTopicDateRangeFilterOutputWithContext(ctx context.Context) TopicDateRangeFilterOutput {
	return o
}

func (o TopicDateRangeFilterOutput) ToTopicDateRangeFilterPtrOutput() TopicDateRangeFilterPtrOutput {
	return o.ToTopicDateRangeFilterPtrOutputWithContext(context.Background())
}

func (o TopicDateRangeFilterOutput) ToTopicDateRangeFilterPtrOutputWithContext(ctx context.Context) TopicDateRangeFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicDateRangeFilter) *TopicDateRangeFilter {
		return &v
	}).(TopicDateRangeFilterPtrOutput)
}

func (o TopicDateRangeFilterOutput) ToOutput(ctx context.Context) pulumix.Output[TopicDateRangeFilter] {
	return pulumix.Output[TopicDateRangeFilter]{
		OutputState: o.OutputState,
	}
}

func (o TopicDateRangeFilterOutput) Constant() TopicRangeFilterConstantPtrOutput {
	return o.ApplyT(func(v TopicDateRangeFilter) *TopicRangeFilterConstant { return v.Constant }).(TopicRangeFilterConstantPtrOutput)
}

func (o TopicDateRangeFilterOutput) Inclusive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TopicDateRangeFilter) *bool { return v.Inclusive }).(pulumi.BoolPtrOutput)
}

type TopicDateRangeFilterPtrOutput struct{ *pulumi.OutputState }

func (TopicDateRangeFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicDateRangeFilter)(nil)).Elem()
}

func (o TopicDateRangeFilterPtrOutput) ToTopicDateRangeFilterPtrOutput() TopicDateRangeFilterPtrOutput {
	return o
}

func (o TopicDateRangeFilterPtrOutput) ToTopicDateRangeFilterPtrOutputWithContext(ctx context.Context) TopicDateRangeFilterPtrOutput {
	return o
}

func (o TopicDateRangeFilterPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TopicDateRangeFilter] {
	return pulumix.Output[*TopicDateRangeFilter]{
		OutputState: o.OutputState,
	}
}

func (o TopicDateRangeFilterPtrOutput) Elem() TopicDateRangeFilterOutput {
	return o.ApplyT(func(v *TopicDateRangeFilter) TopicDateRangeFilter {
		if v != nil {
			return *v
		}
		var ret TopicDateRangeFilter
		return ret
	}).(TopicDateRangeFilterOutput)
}

func (o TopicDateRangeFilterPtrOutput) Constant() TopicRangeFilterConstantPtrOutput {
	return o.ApplyT(func(v *TopicDateRangeFilter) *TopicRangeFilterConstant {
		if v == nil {
			return nil
		}
		return v.Constant
	}).(TopicRangeFilterConstantPtrOutput)
}

func (o TopicDateRangeFilterPtrOutput) Inclusive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TopicDateRangeFilter) *bool {
		if v == nil {
			return nil
		}
		return v.Inclusive
	}).(pulumi.BoolPtrOutput)
}

type TopicDefaultFormatting struct {
	DisplayFormat        *TopicDisplayFormat        `pulumi:"displayFormat"`
	DisplayFormatOptions *TopicDisplayFormatOptions `pulumi:"displayFormatOptions"`
}

// TopicDefaultFormattingInput is an input type that accepts TopicDefaultFormattingArgs and TopicDefaultFormattingOutput values.
// You can construct a concrete instance of `TopicDefaultFormattingInput` via:
//
//	TopicDefaultFormattingArgs{...}
type TopicDefaultFormattingInput interface {
	pulumi.Input

	ToTopicDefaultFormattingOutput() TopicDefaultFormattingOutput
	ToTopicDefaultFormattingOutputWithContext(context.Context) TopicDefaultFormattingOutput
}

type TopicDefaultFormattingArgs struct {
	DisplayFormat        TopicDisplayFormatPtrInput        `pulumi:"displayFormat"`
	DisplayFormatOptions TopicDisplayFormatOptionsPtrInput `pulumi:"displayFormatOptions"`
}

func (TopicDefaultFormattingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicDefaultFormatting)(nil)).Elem()
}

func (i TopicDefaultFormattingArgs) ToTopicDefaultFormattingOutput() TopicDefaultFormattingOutput {
	return i.ToTopicDefaultFormattingOutputWithContext(context.Background())
}

func (i TopicDefaultFormattingArgs) ToTopicDefaultFormattingOutputWithContext(ctx context.Context) TopicDefaultFormattingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicDefaultFormattingOutput)
}

func (i TopicDefaultFormattingArgs) ToOutput(ctx context.Context) pulumix.Output[TopicDefaultFormatting] {
	return pulumix.Output[TopicDefaultFormatting]{
		OutputState: i.ToTopicDefaultFormattingOutputWithContext(ctx).OutputState,
	}
}

func (i TopicDefaultFormattingArgs) ToTopicDefaultFormattingPtrOutput() TopicDefaultFormattingPtrOutput {
	return i.ToTopicDefaultFormattingPtrOutputWithContext(context.Background())
}

func (i TopicDefaultFormattingArgs) ToTopicDefaultFormattingPtrOutputWithContext(ctx context.Context) TopicDefaultFormattingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicDefaultFormattingOutput).ToTopicDefaultFormattingPtrOutputWithContext(ctx)
}

// TopicDefaultFormattingPtrInput is an input type that accepts TopicDefaultFormattingArgs, TopicDefaultFormattingPtr and TopicDefaultFormattingPtrOutput values.
// You can construct a concrete instance of `TopicDefaultFormattingPtrInput` via:
//
//	        TopicDefaultFormattingArgs{...}
//
//	or:
//
//	        nil
type TopicDefaultFormattingPtrInput interface {
	pulumi.Input

	ToTopicDefaultFormattingPtrOutput() TopicDefaultFormattingPtrOutput
	ToTopicDefaultFormattingPtrOutputWithContext(context.Context) TopicDefaultFormattingPtrOutput
}

type topicDefaultFormattingPtrType TopicDefaultFormattingArgs

func TopicDefaultFormattingPtr(v *TopicDefaultFormattingArgs) TopicDefaultFormattingPtrInput {
	return (*topicDefaultFormattingPtrType)(v)
}

func (*topicDefaultFormattingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicDefaultFormatting)(nil)).Elem()
}

func (i *topicDefaultFormattingPtrType) ToTopicDefaultFormattingPtrOutput() TopicDefaultFormattingPtrOutput {
	return i.ToTopicDefaultFormattingPtrOutputWithContext(context.Background())
}

func (i *topicDefaultFormattingPtrType) ToTopicDefaultFormattingPtrOutputWithContext(ctx context.Context) TopicDefaultFormattingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicDefaultFormattingPtrOutput)
}

func (i *topicDefaultFormattingPtrType) ToOutput(ctx context.Context) pulumix.Output[*TopicDefaultFormatting] {
	return pulumix.Output[*TopicDefaultFormatting]{
		OutputState: i.ToTopicDefaultFormattingPtrOutputWithContext(ctx).OutputState,
	}
}

type TopicDefaultFormattingOutput struct{ *pulumi.OutputState }

func (TopicDefaultFormattingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicDefaultFormatting)(nil)).Elem()
}

func (o TopicDefaultFormattingOutput) ToTopicDefaultFormattingOutput() TopicDefaultFormattingOutput {
	return o
}

func (o TopicDefaultFormattingOutput) ToTopicDefaultFormattingOutputWithContext(ctx context.Context) TopicDefaultFormattingOutput {
	return o
}

func (o TopicDefaultFormattingOutput) ToTopicDefaultFormattingPtrOutput() TopicDefaultFormattingPtrOutput {
	return o.ToTopicDefaultFormattingPtrOutputWithContext(context.Background())
}

func (o TopicDefaultFormattingOutput) ToTopicDefaultFormattingPtrOutputWithContext(ctx context.Context) TopicDefaultFormattingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicDefaultFormatting) *TopicDefaultFormatting {
		return &v
	}).(TopicDefaultFormattingPtrOutput)
}

func (o TopicDefaultFormattingOutput) ToOutput(ctx context.Context) pulumix.Output[TopicDefaultFormatting] {
	return pulumix.Output[TopicDefaultFormatting]{
		OutputState: o.OutputState,
	}
}

func (o TopicDefaultFormattingOutput) DisplayFormat() TopicDisplayFormatPtrOutput {
	return o.ApplyT(func(v TopicDefaultFormatting) *TopicDisplayFormat { return v.DisplayFormat }).(TopicDisplayFormatPtrOutput)
}

func (o TopicDefaultFormattingOutput) DisplayFormatOptions() TopicDisplayFormatOptionsPtrOutput {
	return o.ApplyT(func(v TopicDefaultFormatting) *TopicDisplayFormatOptions { return v.DisplayFormatOptions }).(TopicDisplayFormatOptionsPtrOutput)
}

type TopicDefaultFormattingPtrOutput struct{ *pulumi.OutputState }

func (TopicDefaultFormattingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicDefaultFormatting)(nil)).Elem()
}

func (o TopicDefaultFormattingPtrOutput) ToTopicDefaultFormattingPtrOutput() TopicDefaultFormattingPtrOutput {
	return o
}

func (o TopicDefaultFormattingPtrOutput) ToTopicDefaultFormattingPtrOutputWithContext(ctx context.Context) TopicDefaultFormattingPtrOutput {
	return o
}

func (o TopicDefaultFormattingPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TopicDefaultFormatting] {
	return pulumix.Output[*TopicDefaultFormatting]{
		OutputState: o.OutputState,
	}
}

func (o TopicDefaultFormattingPtrOutput) Elem() TopicDefaultFormattingOutput {
	return o.ApplyT(func(v *TopicDefaultFormatting) TopicDefaultFormatting {
		if v != nil {
			return *v
		}
		var ret TopicDefaultFormatting
		return ret
	}).(TopicDefaultFormattingOutput)
}

func (o TopicDefaultFormattingPtrOutput) DisplayFormat() TopicDisplayFormatPtrOutput {
	return o.ApplyT(func(v *TopicDefaultFormatting) *TopicDisplayFormat {
		if v == nil {
			return nil
		}
		return v.DisplayFormat
	}).(TopicDisplayFormatPtrOutput)
}

func (o TopicDefaultFormattingPtrOutput) DisplayFormatOptions() TopicDisplayFormatOptionsPtrOutput {
	return o.ApplyT(func(v *TopicDefaultFormatting) *TopicDisplayFormatOptions {
		if v == nil {
			return nil
		}
		return v.DisplayFormatOptions
	}).(TopicDisplayFormatOptionsPtrOutput)
}

type TopicDisplayFormatOptions struct {
	BlankCellFormat    *string                      `pulumi:"blankCellFormat"`
	CurrencySymbol     *string                      `pulumi:"currencySymbol"`
	DateFormat         *string                      `pulumi:"dateFormat"`
	DecimalSeparator   *TopicNumericSeparatorSymbol `pulumi:"decimalSeparator"`
	FractionDigits     *float64                     `pulumi:"fractionDigits"`
	GroupingSeparator  *string                      `pulumi:"groupingSeparator"`
	NegativeFormat     *TopicNegativeFormat         `pulumi:"negativeFormat"`
	Prefix             *string                      `pulumi:"prefix"`
	Suffix             *string                      `pulumi:"suffix"`
	UnitScaler         *TopicNumberScale            `pulumi:"unitScaler"`
	UseBlankCellFormat *bool                        `pulumi:"useBlankCellFormat"`
	UseGrouping        *bool                        `pulumi:"useGrouping"`
}

// TopicDisplayFormatOptionsInput is an input type that accepts TopicDisplayFormatOptionsArgs and TopicDisplayFormatOptionsOutput values.
// You can construct a concrete instance of `TopicDisplayFormatOptionsInput` via:
//
//	TopicDisplayFormatOptionsArgs{...}
type TopicDisplayFormatOptionsInput interface {
	pulumi.Input

	ToTopicDisplayFormatOptionsOutput() TopicDisplayFormatOptionsOutput
	ToTopicDisplayFormatOptionsOutputWithContext(context.Context) TopicDisplayFormatOptionsOutput
}

type TopicDisplayFormatOptionsArgs struct {
	BlankCellFormat    pulumi.StringPtrInput               `pulumi:"blankCellFormat"`
	CurrencySymbol     pulumi.StringPtrInput               `pulumi:"currencySymbol"`
	DateFormat         pulumi.StringPtrInput               `pulumi:"dateFormat"`
	DecimalSeparator   TopicNumericSeparatorSymbolPtrInput `pulumi:"decimalSeparator"`
	FractionDigits     pulumi.Float64PtrInput              `pulumi:"fractionDigits"`
	GroupingSeparator  pulumi.StringPtrInput               `pulumi:"groupingSeparator"`
	NegativeFormat     TopicNegativeFormatPtrInput         `pulumi:"negativeFormat"`
	Prefix             pulumi.StringPtrInput               `pulumi:"prefix"`
	Suffix             pulumi.StringPtrInput               `pulumi:"suffix"`
	UnitScaler         TopicNumberScalePtrInput            `pulumi:"unitScaler"`
	UseBlankCellFormat pulumi.BoolPtrInput                 `pulumi:"useBlankCellFormat"`
	UseGrouping        pulumi.BoolPtrInput                 `pulumi:"useGrouping"`
}

func (TopicDisplayFormatOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicDisplayFormatOptions)(nil)).Elem()
}

func (i TopicDisplayFormatOptionsArgs) ToTopicDisplayFormatOptionsOutput() TopicDisplayFormatOptionsOutput {
	return i.ToTopicDisplayFormatOptionsOutputWithContext(context.Background())
}

func (i TopicDisplayFormatOptionsArgs) ToTopicDisplayFormatOptionsOutputWithContext(ctx context.Context) TopicDisplayFormatOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicDisplayFormatOptionsOutput)
}

func (i TopicDisplayFormatOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[TopicDisplayFormatOptions] {
	return pulumix.Output[TopicDisplayFormatOptions]{
		OutputState: i.ToTopicDisplayFormatOptionsOutputWithContext(ctx).OutputState,
	}
}

func (i TopicDisplayFormatOptionsArgs) ToTopicDisplayFormatOptionsPtrOutput() TopicDisplayFormatOptionsPtrOutput {
	return i.ToTopicDisplayFormatOptionsPtrOutputWithContext(context.Background())
}

func (i TopicDisplayFormatOptionsArgs) ToTopicDisplayFormatOptionsPtrOutputWithContext(ctx context.Context) TopicDisplayFormatOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicDisplayFormatOptionsOutput).ToTopicDisplayFormatOptionsPtrOutputWithContext(ctx)
}

// TopicDisplayFormatOptionsPtrInput is an input type that accepts TopicDisplayFormatOptionsArgs, TopicDisplayFormatOptionsPtr and TopicDisplayFormatOptionsPtrOutput values.
// You can construct a concrete instance of `TopicDisplayFormatOptionsPtrInput` via:
//
//	        TopicDisplayFormatOptionsArgs{...}
//
//	or:
//
//	        nil
type TopicDisplayFormatOptionsPtrInput interface {
	pulumi.Input

	ToTopicDisplayFormatOptionsPtrOutput() TopicDisplayFormatOptionsPtrOutput
	ToTopicDisplayFormatOptionsPtrOutputWithContext(context.Context) TopicDisplayFormatOptionsPtrOutput
}

type topicDisplayFormatOptionsPtrType TopicDisplayFormatOptionsArgs

func TopicDisplayFormatOptionsPtr(v *TopicDisplayFormatOptionsArgs) TopicDisplayFormatOptionsPtrInput {
	return (*topicDisplayFormatOptionsPtrType)(v)
}

func (*topicDisplayFormatOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicDisplayFormatOptions)(nil)).Elem()
}

func (i *topicDisplayFormatOptionsPtrType) ToTopicDisplayFormatOptionsPtrOutput() TopicDisplayFormatOptionsPtrOutput {
	return i.ToTopicDisplayFormatOptionsPtrOutputWithContext(context.Background())
}

func (i *topicDisplayFormatOptionsPtrType) ToTopicDisplayFormatOptionsPtrOutputWithContext(ctx context.Context) TopicDisplayFormatOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicDisplayFormatOptionsPtrOutput)
}

func (i *topicDisplayFormatOptionsPtrType) ToOutput(ctx context.Context) pulumix.Output[*TopicDisplayFormatOptions] {
	return pulumix.Output[*TopicDisplayFormatOptions]{
		OutputState: i.ToTopicDisplayFormatOptionsPtrOutputWithContext(ctx).OutputState,
	}
}

type TopicDisplayFormatOptionsOutput struct{ *pulumi.OutputState }

func (TopicDisplayFormatOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicDisplayFormatOptions)(nil)).Elem()
}

func (o TopicDisplayFormatOptionsOutput) ToTopicDisplayFormatOptionsOutput() TopicDisplayFormatOptionsOutput {
	return o
}

func (o TopicDisplayFormatOptionsOutput) ToTopicDisplayFormatOptionsOutputWithContext(ctx context.Context) TopicDisplayFormatOptionsOutput {
	return o
}

func (o TopicDisplayFormatOptionsOutput) ToTopicDisplayFormatOptionsPtrOutput() TopicDisplayFormatOptionsPtrOutput {
	return o.ToTopicDisplayFormatOptionsPtrOutputWithContext(context.Background())
}

func (o TopicDisplayFormatOptionsOutput) ToTopicDisplayFormatOptionsPtrOutputWithContext(ctx context.Context) TopicDisplayFormatOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicDisplayFormatOptions) *TopicDisplayFormatOptions {
		return &v
	}).(TopicDisplayFormatOptionsPtrOutput)
}

func (o TopicDisplayFormatOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[TopicDisplayFormatOptions] {
	return pulumix.Output[TopicDisplayFormatOptions]{
		OutputState: o.OutputState,
	}
}

func (o TopicDisplayFormatOptionsOutput) BlankCellFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicDisplayFormatOptions) *string { return v.BlankCellFormat }).(pulumi.StringPtrOutput)
}

func (o TopicDisplayFormatOptionsOutput) CurrencySymbol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicDisplayFormatOptions) *string { return v.CurrencySymbol }).(pulumi.StringPtrOutput)
}

func (o TopicDisplayFormatOptionsOutput) DateFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicDisplayFormatOptions) *string { return v.DateFormat }).(pulumi.StringPtrOutput)
}

func (o TopicDisplayFormatOptionsOutput) DecimalSeparator() TopicNumericSeparatorSymbolPtrOutput {
	return o.ApplyT(func(v TopicDisplayFormatOptions) *TopicNumericSeparatorSymbol { return v.DecimalSeparator }).(TopicNumericSeparatorSymbolPtrOutput)
}

func (o TopicDisplayFormatOptionsOutput) FractionDigits() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TopicDisplayFormatOptions) *float64 { return v.FractionDigits }).(pulumi.Float64PtrOutput)
}

func (o TopicDisplayFormatOptionsOutput) GroupingSeparator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicDisplayFormatOptions) *string { return v.GroupingSeparator }).(pulumi.StringPtrOutput)
}

func (o TopicDisplayFormatOptionsOutput) NegativeFormat() TopicNegativeFormatPtrOutput {
	return o.ApplyT(func(v TopicDisplayFormatOptions) *TopicNegativeFormat { return v.NegativeFormat }).(TopicNegativeFormatPtrOutput)
}

func (o TopicDisplayFormatOptionsOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicDisplayFormatOptions) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

func (o TopicDisplayFormatOptionsOutput) Suffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicDisplayFormatOptions) *string { return v.Suffix }).(pulumi.StringPtrOutput)
}

func (o TopicDisplayFormatOptionsOutput) UnitScaler() TopicNumberScalePtrOutput {
	return o.ApplyT(func(v TopicDisplayFormatOptions) *TopicNumberScale { return v.UnitScaler }).(TopicNumberScalePtrOutput)
}

func (o TopicDisplayFormatOptionsOutput) UseBlankCellFormat() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TopicDisplayFormatOptions) *bool { return v.UseBlankCellFormat }).(pulumi.BoolPtrOutput)
}

func (o TopicDisplayFormatOptionsOutput) UseGrouping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TopicDisplayFormatOptions) *bool { return v.UseGrouping }).(pulumi.BoolPtrOutput)
}

type TopicDisplayFormatOptionsPtrOutput struct{ *pulumi.OutputState }

func (TopicDisplayFormatOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicDisplayFormatOptions)(nil)).Elem()
}

func (o TopicDisplayFormatOptionsPtrOutput) ToTopicDisplayFormatOptionsPtrOutput() TopicDisplayFormatOptionsPtrOutput {
	return o
}

func (o TopicDisplayFormatOptionsPtrOutput) ToTopicDisplayFormatOptionsPtrOutputWithContext(ctx context.Context) TopicDisplayFormatOptionsPtrOutput {
	return o
}

func (o TopicDisplayFormatOptionsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TopicDisplayFormatOptions] {
	return pulumix.Output[*TopicDisplayFormatOptions]{
		OutputState: o.OutputState,
	}
}

func (o TopicDisplayFormatOptionsPtrOutput) Elem() TopicDisplayFormatOptionsOutput {
	return o.ApplyT(func(v *TopicDisplayFormatOptions) TopicDisplayFormatOptions {
		if v != nil {
			return *v
		}
		var ret TopicDisplayFormatOptions
		return ret
	}).(TopicDisplayFormatOptionsOutput)
}

func (o TopicDisplayFormatOptionsPtrOutput) BlankCellFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicDisplayFormatOptions) *string {
		if v == nil {
			return nil
		}
		return v.BlankCellFormat
	}).(pulumi.StringPtrOutput)
}

func (o TopicDisplayFormatOptionsPtrOutput) CurrencySymbol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicDisplayFormatOptions) *string {
		if v == nil {
			return nil
		}
		return v.CurrencySymbol
	}).(pulumi.StringPtrOutput)
}

func (o TopicDisplayFormatOptionsPtrOutput) DateFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicDisplayFormatOptions) *string {
		if v == nil {
			return nil
		}
		return v.DateFormat
	}).(pulumi.StringPtrOutput)
}

func (o TopicDisplayFormatOptionsPtrOutput) DecimalSeparator() TopicNumericSeparatorSymbolPtrOutput {
	return o.ApplyT(func(v *TopicDisplayFormatOptions) *TopicNumericSeparatorSymbol {
		if v == nil {
			return nil
		}
		return v.DecimalSeparator
	}).(TopicNumericSeparatorSymbolPtrOutput)
}

func (o TopicDisplayFormatOptionsPtrOutput) FractionDigits() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TopicDisplayFormatOptions) *float64 {
		if v == nil {
			return nil
		}
		return v.FractionDigits
	}).(pulumi.Float64PtrOutput)
}

func (o TopicDisplayFormatOptionsPtrOutput) GroupingSeparator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicDisplayFormatOptions) *string {
		if v == nil {
			return nil
		}
		return v.GroupingSeparator
	}).(pulumi.StringPtrOutput)
}

func (o TopicDisplayFormatOptionsPtrOutput) NegativeFormat() TopicNegativeFormatPtrOutput {
	return o.ApplyT(func(v *TopicDisplayFormatOptions) *TopicNegativeFormat {
		if v == nil {
			return nil
		}
		return v.NegativeFormat
	}).(TopicNegativeFormatPtrOutput)
}

func (o TopicDisplayFormatOptionsPtrOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicDisplayFormatOptions) *string {
		if v == nil {
			return nil
		}
		return v.Prefix
	}).(pulumi.StringPtrOutput)
}

func (o TopicDisplayFormatOptionsPtrOutput) Suffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicDisplayFormatOptions) *string {
		if v == nil {
			return nil
		}
		return v.Suffix
	}).(pulumi.StringPtrOutput)
}

func (o TopicDisplayFormatOptionsPtrOutput) UnitScaler() TopicNumberScalePtrOutput {
	return o.ApplyT(func(v *TopicDisplayFormatOptions) *TopicNumberScale {
		if v == nil {
			return nil
		}
		return v.UnitScaler
	}).(TopicNumberScalePtrOutput)
}

func (o TopicDisplayFormatOptionsPtrOutput) UseBlankCellFormat() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TopicDisplayFormatOptions) *bool {
		if v == nil {
			return nil
		}
		return v.UseBlankCellFormat
	}).(pulumi.BoolPtrOutput)
}

func (o TopicDisplayFormatOptionsPtrOutput) UseGrouping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TopicDisplayFormatOptions) *bool {
		if v == nil {
			return nil
		}
		return v.UseGrouping
	}).(pulumi.BoolPtrOutput)
}

type TopicFilter struct {
	CategoryFilter        *TopicCategoryFilter        `pulumi:"categoryFilter"`
	DateRangeFilter       *TopicDateRangeFilter       `pulumi:"dateRangeFilter"`
	FilterClass           *TopicFilterClass           `pulumi:"filterClass"`
	FilterDescription     *string                     `pulumi:"filterDescription"`
	FilterName            string                      `pulumi:"filterName"`
	FilterSynonyms        []string                    `pulumi:"filterSynonyms"`
	FilterType            *TopicNamedFilterType       `pulumi:"filterType"`
	NumericEqualityFilter *TopicNumericEqualityFilter `pulumi:"numericEqualityFilter"`
	NumericRangeFilter    *TopicNumericRangeFilter    `pulumi:"numericRangeFilter"`
	OperandFieldName      string                      `pulumi:"operandFieldName"`
	RelativeDateFilter    *TopicRelativeDateFilter    `pulumi:"relativeDateFilter"`
}

// TopicFilterInput is an input type that accepts TopicFilterArgs and TopicFilterOutput values.
// You can construct a concrete instance of `TopicFilterInput` via:
//
//	TopicFilterArgs{...}
type TopicFilterInput interface {
	pulumi.Input

	ToTopicFilterOutput() TopicFilterOutput
	ToTopicFilterOutputWithContext(context.Context) TopicFilterOutput
}

type TopicFilterArgs struct {
	CategoryFilter        TopicCategoryFilterPtrInput        `pulumi:"categoryFilter"`
	DateRangeFilter       TopicDateRangeFilterPtrInput       `pulumi:"dateRangeFilter"`
	FilterClass           TopicFilterClassPtrInput           `pulumi:"filterClass"`
	FilterDescription     pulumi.StringPtrInput              `pulumi:"filterDescription"`
	FilterName            pulumi.StringInput                 `pulumi:"filterName"`
	FilterSynonyms        pulumi.StringArrayInput            `pulumi:"filterSynonyms"`
	FilterType            TopicNamedFilterTypePtrInput       `pulumi:"filterType"`
	NumericEqualityFilter TopicNumericEqualityFilterPtrInput `pulumi:"numericEqualityFilter"`
	NumericRangeFilter    TopicNumericRangeFilterPtrInput    `pulumi:"numericRangeFilter"`
	OperandFieldName      pulumi.StringInput                 `pulumi:"operandFieldName"`
	RelativeDateFilter    TopicRelativeDateFilterPtrInput    `pulumi:"relativeDateFilter"`
}

func (TopicFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicFilter)(nil)).Elem()
}

func (i TopicFilterArgs) ToTopicFilterOutput() TopicFilterOutput {
	return i.ToTopicFilterOutputWithContext(context.Background())
}

func (i TopicFilterArgs) ToTopicFilterOutputWithContext(ctx context.Context) TopicFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicFilterOutput)
}

func (i TopicFilterArgs) ToOutput(ctx context.Context) pulumix.Output[TopicFilter] {
	return pulumix.Output[TopicFilter]{
		OutputState: i.ToTopicFilterOutputWithContext(ctx).OutputState,
	}
}

// TopicFilterArrayInput is an input type that accepts TopicFilterArray and TopicFilterArrayOutput values.
// You can construct a concrete instance of `TopicFilterArrayInput` via:
//
//	TopicFilterArray{ TopicFilterArgs{...} }
type TopicFilterArrayInput interface {
	pulumi.Input

	ToTopicFilterArrayOutput() TopicFilterArrayOutput
	ToTopicFilterArrayOutputWithContext(context.Context) TopicFilterArrayOutput
}

type TopicFilterArray []TopicFilterInput

func (TopicFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicFilter)(nil)).Elem()
}

func (i TopicFilterArray) ToTopicFilterArrayOutput() TopicFilterArrayOutput {
	return i.ToTopicFilterArrayOutputWithContext(context.Background())
}

func (i TopicFilterArray) ToTopicFilterArrayOutputWithContext(ctx context.Context) TopicFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicFilterArrayOutput)
}

func (i TopicFilterArray) ToOutput(ctx context.Context) pulumix.Output[[]TopicFilter] {
	return pulumix.Output[[]TopicFilter]{
		OutputState: i.ToTopicFilterArrayOutputWithContext(ctx).OutputState,
	}
}

type TopicFilterOutput struct{ *pulumi.OutputState }

func (TopicFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicFilter)(nil)).Elem()
}

func (o TopicFilterOutput) ToTopicFilterOutput() TopicFilterOutput {
	return o
}

func (o TopicFilterOutput) ToTopicFilterOutputWithContext(ctx context.Context) TopicFilterOutput {
	return o
}

func (o TopicFilterOutput) ToOutput(ctx context.Context) pulumix.Output[TopicFilter] {
	return pulumix.Output[TopicFilter]{
		OutputState: o.OutputState,
	}
}

func (o TopicFilterOutput) CategoryFilter() TopicCategoryFilterPtrOutput {
	return o.ApplyT(func(v TopicFilter) *TopicCategoryFilter { return v.CategoryFilter }).(TopicCategoryFilterPtrOutput)
}

func (o TopicFilterOutput) DateRangeFilter() TopicDateRangeFilterPtrOutput {
	return o.ApplyT(func(v TopicFilter) *TopicDateRangeFilter { return v.DateRangeFilter }).(TopicDateRangeFilterPtrOutput)
}

func (o TopicFilterOutput) FilterClass() TopicFilterClassPtrOutput {
	return o.ApplyT(func(v TopicFilter) *TopicFilterClass { return v.FilterClass }).(TopicFilterClassPtrOutput)
}

func (o TopicFilterOutput) FilterDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicFilter) *string { return v.FilterDescription }).(pulumi.StringPtrOutput)
}

func (o TopicFilterOutput) FilterName() pulumi.StringOutput {
	return o.ApplyT(func(v TopicFilter) string { return v.FilterName }).(pulumi.StringOutput)
}

func (o TopicFilterOutput) FilterSynonyms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TopicFilter) []string { return v.FilterSynonyms }).(pulumi.StringArrayOutput)
}

func (o TopicFilterOutput) FilterType() TopicNamedFilterTypePtrOutput {
	return o.ApplyT(func(v TopicFilter) *TopicNamedFilterType { return v.FilterType }).(TopicNamedFilterTypePtrOutput)
}

func (o TopicFilterOutput) NumericEqualityFilter() TopicNumericEqualityFilterPtrOutput {
	return o.ApplyT(func(v TopicFilter) *TopicNumericEqualityFilter { return v.NumericEqualityFilter }).(TopicNumericEqualityFilterPtrOutput)
}

func (o TopicFilterOutput) NumericRangeFilter() TopicNumericRangeFilterPtrOutput {
	return o.ApplyT(func(v TopicFilter) *TopicNumericRangeFilter { return v.NumericRangeFilter }).(TopicNumericRangeFilterPtrOutput)
}

func (o TopicFilterOutput) OperandFieldName() pulumi.StringOutput {
	return o.ApplyT(func(v TopicFilter) string { return v.OperandFieldName }).(pulumi.StringOutput)
}

func (o TopicFilterOutput) RelativeDateFilter() TopicRelativeDateFilterPtrOutput {
	return o.ApplyT(func(v TopicFilter) *TopicRelativeDateFilter { return v.RelativeDateFilter }).(TopicRelativeDateFilterPtrOutput)
}

type TopicFilterArrayOutput struct{ *pulumi.OutputState }

func (TopicFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicFilter)(nil)).Elem()
}

func (o TopicFilterArrayOutput) ToTopicFilterArrayOutput() TopicFilterArrayOutput {
	return o
}

func (o TopicFilterArrayOutput) ToTopicFilterArrayOutputWithContext(ctx context.Context) TopicFilterArrayOutput {
	return o
}

func (o TopicFilterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]TopicFilter] {
	return pulumix.Output[[]TopicFilter]{
		OutputState: o.OutputState,
	}
}

func (o TopicFilterArrayOutput) Index(i pulumi.IntInput) TopicFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TopicFilter {
		return vs[0].([]TopicFilter)[vs[1].(int)]
	}).(TopicFilterOutput)
}

type TopicNamedEntity struct {
	Definition         []TopicNamedEntityDefinition `pulumi:"definition"`
	EntityDescription  *string                      `pulumi:"entityDescription"`
	EntityName         string                       `pulumi:"entityName"`
	EntitySynonyms     []string                     `pulumi:"entitySynonyms"`
	SemanticEntityType *TopicSemanticEntityType     `pulumi:"semanticEntityType"`
}

// TopicNamedEntityInput is an input type that accepts TopicNamedEntityArgs and TopicNamedEntityOutput values.
// You can construct a concrete instance of `TopicNamedEntityInput` via:
//
//	TopicNamedEntityArgs{...}
type TopicNamedEntityInput interface {
	pulumi.Input

	ToTopicNamedEntityOutput() TopicNamedEntityOutput
	ToTopicNamedEntityOutputWithContext(context.Context) TopicNamedEntityOutput
}

type TopicNamedEntityArgs struct {
	Definition         TopicNamedEntityDefinitionArrayInput `pulumi:"definition"`
	EntityDescription  pulumi.StringPtrInput                `pulumi:"entityDescription"`
	EntityName         pulumi.StringInput                   `pulumi:"entityName"`
	EntitySynonyms     pulumi.StringArrayInput              `pulumi:"entitySynonyms"`
	SemanticEntityType TopicSemanticEntityTypePtrInput      `pulumi:"semanticEntityType"`
}

func (TopicNamedEntityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicNamedEntity)(nil)).Elem()
}

func (i TopicNamedEntityArgs) ToTopicNamedEntityOutput() TopicNamedEntityOutput {
	return i.ToTopicNamedEntityOutputWithContext(context.Background())
}

func (i TopicNamedEntityArgs) ToTopicNamedEntityOutputWithContext(ctx context.Context) TopicNamedEntityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicNamedEntityOutput)
}

func (i TopicNamedEntityArgs) ToOutput(ctx context.Context) pulumix.Output[TopicNamedEntity] {
	return pulumix.Output[TopicNamedEntity]{
		OutputState: i.ToTopicNamedEntityOutputWithContext(ctx).OutputState,
	}
}

// TopicNamedEntityArrayInput is an input type that accepts TopicNamedEntityArray and TopicNamedEntityArrayOutput values.
// You can construct a concrete instance of `TopicNamedEntityArrayInput` via:
//
//	TopicNamedEntityArray{ TopicNamedEntityArgs{...} }
type TopicNamedEntityArrayInput interface {
	pulumi.Input

	ToTopicNamedEntityArrayOutput() TopicNamedEntityArrayOutput
	ToTopicNamedEntityArrayOutputWithContext(context.Context) TopicNamedEntityArrayOutput
}

type TopicNamedEntityArray []TopicNamedEntityInput

func (TopicNamedEntityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicNamedEntity)(nil)).Elem()
}

func (i TopicNamedEntityArray) ToTopicNamedEntityArrayOutput() TopicNamedEntityArrayOutput {
	return i.ToTopicNamedEntityArrayOutputWithContext(context.Background())
}

func (i TopicNamedEntityArray) ToTopicNamedEntityArrayOutputWithContext(ctx context.Context) TopicNamedEntityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicNamedEntityArrayOutput)
}

func (i TopicNamedEntityArray) ToOutput(ctx context.Context) pulumix.Output[[]TopicNamedEntity] {
	return pulumix.Output[[]TopicNamedEntity]{
		OutputState: i.ToTopicNamedEntityArrayOutputWithContext(ctx).OutputState,
	}
}

type TopicNamedEntityOutput struct{ *pulumi.OutputState }

func (TopicNamedEntityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicNamedEntity)(nil)).Elem()
}

func (o TopicNamedEntityOutput) ToTopicNamedEntityOutput() TopicNamedEntityOutput {
	return o
}

func (o TopicNamedEntityOutput) ToTopicNamedEntityOutputWithContext(ctx context.Context) TopicNamedEntityOutput {
	return o
}

func (o TopicNamedEntityOutput) ToOutput(ctx context.Context) pulumix.Output[TopicNamedEntity] {
	return pulumix.Output[TopicNamedEntity]{
		OutputState: o.OutputState,
	}
}

func (o TopicNamedEntityOutput) Definition() TopicNamedEntityDefinitionArrayOutput {
	return o.ApplyT(func(v TopicNamedEntity) []TopicNamedEntityDefinition { return v.Definition }).(TopicNamedEntityDefinitionArrayOutput)
}

func (o TopicNamedEntityOutput) EntityDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicNamedEntity) *string { return v.EntityDescription }).(pulumi.StringPtrOutput)
}

func (o TopicNamedEntityOutput) EntityName() pulumi.StringOutput {
	return o.ApplyT(func(v TopicNamedEntity) string { return v.EntityName }).(pulumi.StringOutput)
}

func (o TopicNamedEntityOutput) EntitySynonyms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TopicNamedEntity) []string { return v.EntitySynonyms }).(pulumi.StringArrayOutput)
}

func (o TopicNamedEntityOutput) SemanticEntityType() TopicSemanticEntityTypePtrOutput {
	return o.ApplyT(func(v TopicNamedEntity) *TopicSemanticEntityType { return v.SemanticEntityType }).(TopicSemanticEntityTypePtrOutput)
}

type TopicNamedEntityArrayOutput struct{ *pulumi.OutputState }

func (TopicNamedEntityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicNamedEntity)(nil)).Elem()
}

func (o TopicNamedEntityArrayOutput) ToTopicNamedEntityArrayOutput() TopicNamedEntityArrayOutput {
	return o
}

func (o TopicNamedEntityArrayOutput) ToTopicNamedEntityArrayOutputWithContext(ctx context.Context) TopicNamedEntityArrayOutput {
	return o
}

func (o TopicNamedEntityArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]TopicNamedEntity] {
	return pulumix.Output[[]TopicNamedEntity]{
		OutputState: o.OutputState,
	}
}

func (o TopicNamedEntityArrayOutput) Index(i pulumi.IntInput) TopicNamedEntityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TopicNamedEntity {
		return vs[0].([]TopicNamedEntity)[vs[1].(int)]
	}).(TopicNamedEntityOutput)
}

type TopicNamedEntityDefinition struct {
	FieldName     *string                           `pulumi:"fieldName"`
	Metric        *TopicNamedEntityDefinitionMetric `pulumi:"metric"`
	PropertyName  *string                           `pulumi:"propertyName"`
	PropertyRole  *TopicPropertyRole                `pulumi:"propertyRole"`
	PropertyUsage *TopicPropertyUsage               `pulumi:"propertyUsage"`
}

// TopicNamedEntityDefinitionInput is an input type that accepts TopicNamedEntityDefinitionArgs and TopicNamedEntityDefinitionOutput values.
// You can construct a concrete instance of `TopicNamedEntityDefinitionInput` via:
//
//	TopicNamedEntityDefinitionArgs{...}
type TopicNamedEntityDefinitionInput interface {
	pulumi.Input

	ToTopicNamedEntityDefinitionOutput() TopicNamedEntityDefinitionOutput
	ToTopicNamedEntityDefinitionOutputWithContext(context.Context) TopicNamedEntityDefinitionOutput
}

type TopicNamedEntityDefinitionArgs struct {
	FieldName     pulumi.StringPtrInput                    `pulumi:"fieldName"`
	Metric        TopicNamedEntityDefinitionMetricPtrInput `pulumi:"metric"`
	PropertyName  pulumi.StringPtrInput                    `pulumi:"propertyName"`
	PropertyRole  TopicPropertyRolePtrInput                `pulumi:"propertyRole"`
	PropertyUsage TopicPropertyUsagePtrInput               `pulumi:"propertyUsage"`
}

func (TopicNamedEntityDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicNamedEntityDefinition)(nil)).Elem()
}

func (i TopicNamedEntityDefinitionArgs) ToTopicNamedEntityDefinitionOutput() TopicNamedEntityDefinitionOutput {
	return i.ToTopicNamedEntityDefinitionOutputWithContext(context.Background())
}

func (i TopicNamedEntityDefinitionArgs) ToTopicNamedEntityDefinitionOutputWithContext(ctx context.Context) TopicNamedEntityDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicNamedEntityDefinitionOutput)
}

func (i TopicNamedEntityDefinitionArgs) ToOutput(ctx context.Context) pulumix.Output[TopicNamedEntityDefinition] {
	return pulumix.Output[TopicNamedEntityDefinition]{
		OutputState: i.ToTopicNamedEntityDefinitionOutputWithContext(ctx).OutputState,
	}
}

// TopicNamedEntityDefinitionArrayInput is an input type that accepts TopicNamedEntityDefinitionArray and TopicNamedEntityDefinitionArrayOutput values.
// You can construct a concrete instance of `TopicNamedEntityDefinitionArrayInput` via:
//
//	TopicNamedEntityDefinitionArray{ TopicNamedEntityDefinitionArgs{...} }
type TopicNamedEntityDefinitionArrayInput interface {
	pulumi.Input

	ToTopicNamedEntityDefinitionArrayOutput() TopicNamedEntityDefinitionArrayOutput
	ToTopicNamedEntityDefinitionArrayOutputWithContext(context.Context) TopicNamedEntityDefinitionArrayOutput
}

type TopicNamedEntityDefinitionArray []TopicNamedEntityDefinitionInput

func (TopicNamedEntityDefinitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicNamedEntityDefinition)(nil)).Elem()
}

func (i TopicNamedEntityDefinitionArray) ToTopicNamedEntityDefinitionArrayOutput() TopicNamedEntityDefinitionArrayOutput {
	return i.ToTopicNamedEntityDefinitionArrayOutputWithContext(context.Background())
}

func (i TopicNamedEntityDefinitionArray) ToTopicNamedEntityDefinitionArrayOutputWithContext(ctx context.Context) TopicNamedEntityDefinitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicNamedEntityDefinitionArrayOutput)
}

func (i TopicNamedEntityDefinitionArray) ToOutput(ctx context.Context) pulumix.Output[[]TopicNamedEntityDefinition] {
	return pulumix.Output[[]TopicNamedEntityDefinition]{
		OutputState: i.ToTopicNamedEntityDefinitionArrayOutputWithContext(ctx).OutputState,
	}
}

type TopicNamedEntityDefinitionOutput struct{ *pulumi.OutputState }

func (TopicNamedEntityDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicNamedEntityDefinition)(nil)).Elem()
}

func (o TopicNamedEntityDefinitionOutput) ToTopicNamedEntityDefinitionOutput() TopicNamedEntityDefinitionOutput {
	return o
}

func (o TopicNamedEntityDefinitionOutput) ToTopicNamedEntityDefinitionOutputWithContext(ctx context.Context) TopicNamedEntityDefinitionOutput {
	return o
}

func (o TopicNamedEntityDefinitionOutput) ToOutput(ctx context.Context) pulumix.Output[TopicNamedEntityDefinition] {
	return pulumix.Output[TopicNamedEntityDefinition]{
		OutputState: o.OutputState,
	}
}

func (o TopicNamedEntityDefinitionOutput) FieldName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicNamedEntityDefinition) *string { return v.FieldName }).(pulumi.StringPtrOutput)
}

func (o TopicNamedEntityDefinitionOutput) Metric() TopicNamedEntityDefinitionMetricPtrOutput {
	return o.ApplyT(func(v TopicNamedEntityDefinition) *TopicNamedEntityDefinitionMetric { return v.Metric }).(TopicNamedEntityDefinitionMetricPtrOutput)
}

func (o TopicNamedEntityDefinitionOutput) PropertyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicNamedEntityDefinition) *string { return v.PropertyName }).(pulumi.StringPtrOutput)
}

func (o TopicNamedEntityDefinitionOutput) PropertyRole() TopicPropertyRolePtrOutput {
	return o.ApplyT(func(v TopicNamedEntityDefinition) *TopicPropertyRole { return v.PropertyRole }).(TopicPropertyRolePtrOutput)
}

func (o TopicNamedEntityDefinitionOutput) PropertyUsage() TopicPropertyUsagePtrOutput {
	return o.ApplyT(func(v TopicNamedEntityDefinition) *TopicPropertyUsage { return v.PropertyUsage }).(TopicPropertyUsagePtrOutput)
}

type TopicNamedEntityDefinitionArrayOutput struct{ *pulumi.OutputState }

func (TopicNamedEntityDefinitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicNamedEntityDefinition)(nil)).Elem()
}

func (o TopicNamedEntityDefinitionArrayOutput) ToTopicNamedEntityDefinitionArrayOutput() TopicNamedEntityDefinitionArrayOutput {
	return o
}

func (o TopicNamedEntityDefinitionArrayOutput) ToTopicNamedEntityDefinitionArrayOutputWithContext(ctx context.Context) TopicNamedEntityDefinitionArrayOutput {
	return o
}

func (o TopicNamedEntityDefinitionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]TopicNamedEntityDefinition] {
	return pulumix.Output[[]TopicNamedEntityDefinition]{
		OutputState: o.OutputState,
	}
}

func (o TopicNamedEntityDefinitionArrayOutput) Index(i pulumi.IntInput) TopicNamedEntityDefinitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TopicNamedEntityDefinition {
		return vs[0].([]TopicNamedEntityDefinition)[vs[1].(int)]
	}).(TopicNamedEntityDefinitionOutput)
}

type TopicNamedEntityDefinitionMetric struct {
	Aggregation                   *TopicNamedEntityAggType            `pulumi:"aggregation"`
	AggregationFunctionParameters *TopicAggregationFunctionParameters `pulumi:"aggregationFunctionParameters"`
}

// TopicNamedEntityDefinitionMetricInput is an input type that accepts TopicNamedEntityDefinitionMetricArgs and TopicNamedEntityDefinitionMetricOutput values.
// You can construct a concrete instance of `TopicNamedEntityDefinitionMetricInput` via:
//
//	TopicNamedEntityDefinitionMetricArgs{...}
type TopicNamedEntityDefinitionMetricInput interface {
	pulumi.Input

	ToTopicNamedEntityDefinitionMetricOutput() TopicNamedEntityDefinitionMetricOutput
	ToTopicNamedEntityDefinitionMetricOutputWithContext(context.Context) TopicNamedEntityDefinitionMetricOutput
}

type TopicNamedEntityDefinitionMetricArgs struct {
	Aggregation                   TopicNamedEntityAggTypePtrInput            `pulumi:"aggregation"`
	AggregationFunctionParameters TopicAggregationFunctionParametersPtrInput `pulumi:"aggregationFunctionParameters"`
}

func (TopicNamedEntityDefinitionMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicNamedEntityDefinitionMetric)(nil)).Elem()
}

func (i TopicNamedEntityDefinitionMetricArgs) ToTopicNamedEntityDefinitionMetricOutput() TopicNamedEntityDefinitionMetricOutput {
	return i.ToTopicNamedEntityDefinitionMetricOutputWithContext(context.Background())
}

func (i TopicNamedEntityDefinitionMetricArgs) ToTopicNamedEntityDefinitionMetricOutputWithContext(ctx context.Context) TopicNamedEntityDefinitionMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicNamedEntityDefinitionMetricOutput)
}

func (i TopicNamedEntityDefinitionMetricArgs) ToOutput(ctx context.Context) pulumix.Output[TopicNamedEntityDefinitionMetric] {
	return pulumix.Output[TopicNamedEntityDefinitionMetric]{
		OutputState: i.ToTopicNamedEntityDefinitionMetricOutputWithContext(ctx).OutputState,
	}
}

func (i TopicNamedEntityDefinitionMetricArgs) ToTopicNamedEntityDefinitionMetricPtrOutput() TopicNamedEntityDefinitionMetricPtrOutput {
	return i.ToTopicNamedEntityDefinitionMetricPtrOutputWithContext(context.Background())
}

func (i TopicNamedEntityDefinitionMetricArgs) ToTopicNamedEntityDefinitionMetricPtrOutputWithContext(ctx context.Context) TopicNamedEntityDefinitionMetricPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicNamedEntityDefinitionMetricOutput).ToTopicNamedEntityDefinitionMetricPtrOutputWithContext(ctx)
}

// TopicNamedEntityDefinitionMetricPtrInput is an input type that accepts TopicNamedEntityDefinitionMetricArgs, TopicNamedEntityDefinitionMetricPtr and TopicNamedEntityDefinitionMetricPtrOutput values.
// You can construct a concrete instance of `TopicNamedEntityDefinitionMetricPtrInput` via:
//
//	        TopicNamedEntityDefinitionMetricArgs{...}
//
//	or:
//
//	        nil
type TopicNamedEntityDefinitionMetricPtrInput interface {
	pulumi.Input

	ToTopicNamedEntityDefinitionMetricPtrOutput() TopicNamedEntityDefinitionMetricPtrOutput
	ToTopicNamedEntityDefinitionMetricPtrOutputWithContext(context.Context) TopicNamedEntityDefinitionMetricPtrOutput
}

type topicNamedEntityDefinitionMetricPtrType TopicNamedEntityDefinitionMetricArgs

func TopicNamedEntityDefinitionMetricPtr(v *TopicNamedEntityDefinitionMetricArgs) TopicNamedEntityDefinitionMetricPtrInput {
	return (*topicNamedEntityDefinitionMetricPtrType)(v)
}

func (*topicNamedEntityDefinitionMetricPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicNamedEntityDefinitionMetric)(nil)).Elem()
}

func (i *topicNamedEntityDefinitionMetricPtrType) ToTopicNamedEntityDefinitionMetricPtrOutput() TopicNamedEntityDefinitionMetricPtrOutput {
	return i.ToTopicNamedEntityDefinitionMetricPtrOutputWithContext(context.Background())
}

func (i *topicNamedEntityDefinitionMetricPtrType) ToTopicNamedEntityDefinitionMetricPtrOutputWithContext(ctx context.Context) TopicNamedEntityDefinitionMetricPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicNamedEntityDefinitionMetricPtrOutput)
}

func (i *topicNamedEntityDefinitionMetricPtrType) ToOutput(ctx context.Context) pulumix.Output[*TopicNamedEntityDefinitionMetric] {
	return pulumix.Output[*TopicNamedEntityDefinitionMetric]{
		OutputState: i.ToTopicNamedEntityDefinitionMetricPtrOutputWithContext(ctx).OutputState,
	}
}

type TopicNamedEntityDefinitionMetricOutput struct{ *pulumi.OutputState }

func (TopicNamedEntityDefinitionMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicNamedEntityDefinitionMetric)(nil)).Elem()
}

func (o TopicNamedEntityDefinitionMetricOutput) ToTopicNamedEntityDefinitionMetricOutput() TopicNamedEntityDefinitionMetricOutput {
	return o
}

func (o TopicNamedEntityDefinitionMetricOutput) ToTopicNamedEntityDefinitionMetricOutputWithContext(ctx context.Context) TopicNamedEntityDefinitionMetricOutput {
	return o
}

func (o TopicNamedEntityDefinitionMetricOutput) ToTopicNamedEntityDefinitionMetricPtrOutput() TopicNamedEntityDefinitionMetricPtrOutput {
	return o.ToTopicNamedEntityDefinitionMetricPtrOutputWithContext(context.Background())
}

func (o TopicNamedEntityDefinitionMetricOutput) ToTopicNamedEntityDefinitionMetricPtrOutputWithContext(ctx context.Context) TopicNamedEntityDefinitionMetricPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicNamedEntityDefinitionMetric) *TopicNamedEntityDefinitionMetric {
		return &v
	}).(TopicNamedEntityDefinitionMetricPtrOutput)
}

func (o TopicNamedEntityDefinitionMetricOutput) ToOutput(ctx context.Context) pulumix.Output[TopicNamedEntityDefinitionMetric] {
	return pulumix.Output[TopicNamedEntityDefinitionMetric]{
		OutputState: o.OutputState,
	}
}

func (o TopicNamedEntityDefinitionMetricOutput) Aggregation() TopicNamedEntityAggTypePtrOutput {
	return o.ApplyT(func(v TopicNamedEntityDefinitionMetric) *TopicNamedEntityAggType { return v.Aggregation }).(TopicNamedEntityAggTypePtrOutput)
}

func (o TopicNamedEntityDefinitionMetricOutput) AggregationFunctionParameters() TopicAggregationFunctionParametersPtrOutput {
	return o.ApplyT(func(v TopicNamedEntityDefinitionMetric) *TopicAggregationFunctionParameters {
		return v.AggregationFunctionParameters
	}).(TopicAggregationFunctionParametersPtrOutput)
}

type TopicNamedEntityDefinitionMetricPtrOutput struct{ *pulumi.OutputState }

func (TopicNamedEntityDefinitionMetricPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicNamedEntityDefinitionMetric)(nil)).Elem()
}

func (o TopicNamedEntityDefinitionMetricPtrOutput) ToTopicNamedEntityDefinitionMetricPtrOutput() TopicNamedEntityDefinitionMetricPtrOutput {
	return o
}

func (o TopicNamedEntityDefinitionMetricPtrOutput) ToTopicNamedEntityDefinitionMetricPtrOutputWithContext(ctx context.Context) TopicNamedEntityDefinitionMetricPtrOutput {
	return o
}

func (o TopicNamedEntityDefinitionMetricPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TopicNamedEntityDefinitionMetric] {
	return pulumix.Output[*TopicNamedEntityDefinitionMetric]{
		OutputState: o.OutputState,
	}
}

func (o TopicNamedEntityDefinitionMetricPtrOutput) Elem() TopicNamedEntityDefinitionMetricOutput {
	return o.ApplyT(func(v *TopicNamedEntityDefinitionMetric) TopicNamedEntityDefinitionMetric {
		if v != nil {
			return *v
		}
		var ret TopicNamedEntityDefinitionMetric
		return ret
	}).(TopicNamedEntityDefinitionMetricOutput)
}

func (o TopicNamedEntityDefinitionMetricPtrOutput) Aggregation() TopicNamedEntityAggTypePtrOutput {
	return o.ApplyT(func(v *TopicNamedEntityDefinitionMetric) *TopicNamedEntityAggType {
		if v == nil {
			return nil
		}
		return v.Aggregation
	}).(TopicNamedEntityAggTypePtrOutput)
}

func (o TopicNamedEntityDefinitionMetricPtrOutput) AggregationFunctionParameters() TopicAggregationFunctionParametersPtrOutput {
	return o.ApplyT(func(v *TopicNamedEntityDefinitionMetric) *TopicAggregationFunctionParameters {
		if v == nil {
			return nil
		}
		return v.AggregationFunctionParameters
	}).(TopicAggregationFunctionParametersPtrOutput)
}

type TopicNegativeFormat struct {
	Prefix *string `pulumi:"prefix"`
	Suffix *string `pulumi:"suffix"`
}

// TopicNegativeFormatInput is an input type that accepts TopicNegativeFormatArgs and TopicNegativeFormatOutput values.
// You can construct a concrete instance of `TopicNegativeFormatInput` via:
//
//	TopicNegativeFormatArgs{...}
type TopicNegativeFormatInput interface {
	pulumi.Input

	ToTopicNegativeFormatOutput() TopicNegativeFormatOutput
	ToTopicNegativeFormatOutputWithContext(context.Context) TopicNegativeFormatOutput
}

type TopicNegativeFormatArgs struct {
	Prefix pulumi.StringPtrInput `pulumi:"prefix"`
	Suffix pulumi.StringPtrInput `pulumi:"suffix"`
}

func (TopicNegativeFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicNegativeFormat)(nil)).Elem()
}

func (i TopicNegativeFormatArgs) ToTopicNegativeFormatOutput() TopicNegativeFormatOutput {
	return i.ToTopicNegativeFormatOutputWithContext(context.Background())
}

func (i TopicNegativeFormatArgs) ToTopicNegativeFormatOutputWithContext(ctx context.Context) TopicNegativeFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicNegativeFormatOutput)
}

func (i TopicNegativeFormatArgs) ToOutput(ctx context.Context) pulumix.Output[TopicNegativeFormat] {
	return pulumix.Output[TopicNegativeFormat]{
		OutputState: i.ToTopicNegativeFormatOutputWithContext(ctx).OutputState,
	}
}

func (i TopicNegativeFormatArgs) ToTopicNegativeFormatPtrOutput() TopicNegativeFormatPtrOutput {
	return i.ToTopicNegativeFormatPtrOutputWithContext(context.Background())
}

func (i TopicNegativeFormatArgs) ToTopicNegativeFormatPtrOutputWithContext(ctx context.Context) TopicNegativeFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicNegativeFormatOutput).ToTopicNegativeFormatPtrOutputWithContext(ctx)
}

// TopicNegativeFormatPtrInput is an input type that accepts TopicNegativeFormatArgs, TopicNegativeFormatPtr and TopicNegativeFormatPtrOutput values.
// You can construct a concrete instance of `TopicNegativeFormatPtrInput` via:
//
//	        TopicNegativeFormatArgs{...}
//
//	or:
//
//	        nil
type TopicNegativeFormatPtrInput interface {
	pulumi.Input

	ToTopicNegativeFormatPtrOutput() TopicNegativeFormatPtrOutput
	ToTopicNegativeFormatPtrOutputWithContext(context.Context) TopicNegativeFormatPtrOutput
}

type topicNegativeFormatPtrType TopicNegativeFormatArgs

func TopicNegativeFormatPtr(v *TopicNegativeFormatArgs) TopicNegativeFormatPtrInput {
	return (*topicNegativeFormatPtrType)(v)
}

func (*topicNegativeFormatPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicNegativeFormat)(nil)).Elem()
}

func (i *topicNegativeFormatPtrType) ToTopicNegativeFormatPtrOutput() TopicNegativeFormatPtrOutput {
	return i.ToTopicNegativeFormatPtrOutputWithContext(context.Background())
}

func (i *topicNegativeFormatPtrType) ToTopicNegativeFormatPtrOutputWithContext(ctx context.Context) TopicNegativeFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicNegativeFormatPtrOutput)
}

func (i *topicNegativeFormatPtrType) ToOutput(ctx context.Context) pulumix.Output[*TopicNegativeFormat] {
	return pulumix.Output[*TopicNegativeFormat]{
		OutputState: i.ToTopicNegativeFormatPtrOutputWithContext(ctx).OutputState,
	}
}

type TopicNegativeFormatOutput struct{ *pulumi.OutputState }

func (TopicNegativeFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicNegativeFormat)(nil)).Elem()
}

func (o TopicNegativeFormatOutput) ToTopicNegativeFormatOutput() TopicNegativeFormatOutput {
	return o
}

func (o TopicNegativeFormatOutput) ToTopicNegativeFormatOutputWithContext(ctx context.Context) TopicNegativeFormatOutput {
	return o
}

func (o TopicNegativeFormatOutput) ToTopicNegativeFormatPtrOutput() TopicNegativeFormatPtrOutput {
	return o.ToTopicNegativeFormatPtrOutputWithContext(context.Background())
}

func (o TopicNegativeFormatOutput) ToTopicNegativeFormatPtrOutputWithContext(ctx context.Context) TopicNegativeFormatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicNegativeFormat) *TopicNegativeFormat {
		return &v
	}).(TopicNegativeFormatPtrOutput)
}

func (o TopicNegativeFormatOutput) ToOutput(ctx context.Context) pulumix.Output[TopicNegativeFormat] {
	return pulumix.Output[TopicNegativeFormat]{
		OutputState: o.OutputState,
	}
}

func (o TopicNegativeFormatOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicNegativeFormat) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

func (o TopicNegativeFormatOutput) Suffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicNegativeFormat) *string { return v.Suffix }).(pulumi.StringPtrOutput)
}

type TopicNegativeFormatPtrOutput struct{ *pulumi.OutputState }

func (TopicNegativeFormatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicNegativeFormat)(nil)).Elem()
}

func (o TopicNegativeFormatPtrOutput) ToTopicNegativeFormatPtrOutput() TopicNegativeFormatPtrOutput {
	return o
}

func (o TopicNegativeFormatPtrOutput) ToTopicNegativeFormatPtrOutputWithContext(ctx context.Context) TopicNegativeFormatPtrOutput {
	return o
}

func (o TopicNegativeFormatPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TopicNegativeFormat] {
	return pulumix.Output[*TopicNegativeFormat]{
		OutputState: o.OutputState,
	}
}

func (o TopicNegativeFormatPtrOutput) Elem() TopicNegativeFormatOutput {
	return o.ApplyT(func(v *TopicNegativeFormat) TopicNegativeFormat {
		if v != nil {
			return *v
		}
		var ret TopicNegativeFormat
		return ret
	}).(TopicNegativeFormatOutput)
}

func (o TopicNegativeFormatPtrOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicNegativeFormat) *string {
		if v == nil {
			return nil
		}
		return v.Prefix
	}).(pulumi.StringPtrOutput)
}

func (o TopicNegativeFormatPtrOutput) Suffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicNegativeFormat) *string {
		if v == nil {
			return nil
		}
		return v.Suffix
	}).(pulumi.StringPtrOutput)
}

type TopicNumericEqualityFilter struct {
	Aggregation *TopicNamedFilterAggType     `pulumi:"aggregation"`
	Constant    *TopicSingularFilterConstant `pulumi:"constant"`
}

// TopicNumericEqualityFilterInput is an input type that accepts TopicNumericEqualityFilterArgs and TopicNumericEqualityFilterOutput values.
// You can construct a concrete instance of `TopicNumericEqualityFilterInput` via:
//
//	TopicNumericEqualityFilterArgs{...}
type TopicNumericEqualityFilterInput interface {
	pulumi.Input

	ToTopicNumericEqualityFilterOutput() TopicNumericEqualityFilterOutput
	ToTopicNumericEqualityFilterOutputWithContext(context.Context) TopicNumericEqualityFilterOutput
}

type TopicNumericEqualityFilterArgs struct {
	Aggregation TopicNamedFilterAggTypePtrInput     `pulumi:"aggregation"`
	Constant    TopicSingularFilterConstantPtrInput `pulumi:"constant"`
}

func (TopicNumericEqualityFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicNumericEqualityFilter)(nil)).Elem()
}

func (i TopicNumericEqualityFilterArgs) ToTopicNumericEqualityFilterOutput() TopicNumericEqualityFilterOutput {
	return i.ToTopicNumericEqualityFilterOutputWithContext(context.Background())
}

func (i TopicNumericEqualityFilterArgs) ToTopicNumericEqualityFilterOutputWithContext(ctx context.Context) TopicNumericEqualityFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicNumericEqualityFilterOutput)
}

func (i TopicNumericEqualityFilterArgs) ToOutput(ctx context.Context) pulumix.Output[TopicNumericEqualityFilter] {
	return pulumix.Output[TopicNumericEqualityFilter]{
		OutputState: i.ToTopicNumericEqualityFilterOutputWithContext(ctx).OutputState,
	}
}

func (i TopicNumericEqualityFilterArgs) ToTopicNumericEqualityFilterPtrOutput() TopicNumericEqualityFilterPtrOutput {
	return i.ToTopicNumericEqualityFilterPtrOutputWithContext(context.Background())
}

func (i TopicNumericEqualityFilterArgs) ToTopicNumericEqualityFilterPtrOutputWithContext(ctx context.Context) TopicNumericEqualityFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicNumericEqualityFilterOutput).ToTopicNumericEqualityFilterPtrOutputWithContext(ctx)
}

// TopicNumericEqualityFilterPtrInput is an input type that accepts TopicNumericEqualityFilterArgs, TopicNumericEqualityFilterPtr and TopicNumericEqualityFilterPtrOutput values.
// You can construct a concrete instance of `TopicNumericEqualityFilterPtrInput` via:
//
//	        TopicNumericEqualityFilterArgs{...}
//
//	or:
//
//	        nil
type TopicNumericEqualityFilterPtrInput interface {
	pulumi.Input

	ToTopicNumericEqualityFilterPtrOutput() TopicNumericEqualityFilterPtrOutput
	ToTopicNumericEqualityFilterPtrOutputWithContext(context.Context) TopicNumericEqualityFilterPtrOutput
}

type topicNumericEqualityFilterPtrType TopicNumericEqualityFilterArgs

func TopicNumericEqualityFilterPtr(v *TopicNumericEqualityFilterArgs) TopicNumericEqualityFilterPtrInput {
	return (*topicNumericEqualityFilterPtrType)(v)
}

func (*topicNumericEqualityFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicNumericEqualityFilter)(nil)).Elem()
}

func (i *topicNumericEqualityFilterPtrType) ToTopicNumericEqualityFilterPtrOutput() TopicNumericEqualityFilterPtrOutput {
	return i.ToTopicNumericEqualityFilterPtrOutputWithContext(context.Background())
}

func (i *topicNumericEqualityFilterPtrType) ToTopicNumericEqualityFilterPtrOutputWithContext(ctx context.Context) TopicNumericEqualityFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicNumericEqualityFilterPtrOutput)
}

func (i *topicNumericEqualityFilterPtrType) ToOutput(ctx context.Context) pulumix.Output[*TopicNumericEqualityFilter] {
	return pulumix.Output[*TopicNumericEqualityFilter]{
		OutputState: i.ToTopicNumericEqualityFilterPtrOutputWithContext(ctx).OutputState,
	}
}

type TopicNumericEqualityFilterOutput struct{ *pulumi.OutputState }

func (TopicNumericEqualityFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicNumericEqualityFilter)(nil)).Elem()
}

func (o TopicNumericEqualityFilterOutput) ToTopicNumericEqualityFilterOutput() TopicNumericEqualityFilterOutput {
	return o
}

func (o TopicNumericEqualityFilterOutput) ToTopicNumericEqualityFilterOutputWithContext(ctx context.Context) TopicNumericEqualityFilterOutput {
	return o
}

func (o TopicNumericEqualityFilterOutput) ToTopicNumericEqualityFilterPtrOutput() TopicNumericEqualityFilterPtrOutput {
	return o.ToTopicNumericEqualityFilterPtrOutputWithContext(context.Background())
}

func (o TopicNumericEqualityFilterOutput) ToTopicNumericEqualityFilterPtrOutputWithContext(ctx context.Context) TopicNumericEqualityFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicNumericEqualityFilter) *TopicNumericEqualityFilter {
		return &v
	}).(TopicNumericEqualityFilterPtrOutput)
}

func (o TopicNumericEqualityFilterOutput) ToOutput(ctx context.Context) pulumix.Output[TopicNumericEqualityFilter] {
	return pulumix.Output[TopicNumericEqualityFilter]{
		OutputState: o.OutputState,
	}
}

func (o TopicNumericEqualityFilterOutput) Aggregation() TopicNamedFilterAggTypePtrOutput {
	return o.ApplyT(func(v TopicNumericEqualityFilter) *TopicNamedFilterAggType { return v.Aggregation }).(TopicNamedFilterAggTypePtrOutput)
}

func (o TopicNumericEqualityFilterOutput) Constant() TopicSingularFilterConstantPtrOutput {
	return o.ApplyT(func(v TopicNumericEqualityFilter) *TopicSingularFilterConstant { return v.Constant }).(TopicSingularFilterConstantPtrOutput)
}

type TopicNumericEqualityFilterPtrOutput struct{ *pulumi.OutputState }

func (TopicNumericEqualityFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicNumericEqualityFilter)(nil)).Elem()
}

func (o TopicNumericEqualityFilterPtrOutput) ToTopicNumericEqualityFilterPtrOutput() TopicNumericEqualityFilterPtrOutput {
	return o
}

func (o TopicNumericEqualityFilterPtrOutput) ToTopicNumericEqualityFilterPtrOutputWithContext(ctx context.Context) TopicNumericEqualityFilterPtrOutput {
	return o
}

func (o TopicNumericEqualityFilterPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TopicNumericEqualityFilter] {
	return pulumix.Output[*TopicNumericEqualityFilter]{
		OutputState: o.OutputState,
	}
}

func (o TopicNumericEqualityFilterPtrOutput) Elem() TopicNumericEqualityFilterOutput {
	return o.ApplyT(func(v *TopicNumericEqualityFilter) TopicNumericEqualityFilter {
		if v != nil {
			return *v
		}
		var ret TopicNumericEqualityFilter
		return ret
	}).(TopicNumericEqualityFilterOutput)
}

func (o TopicNumericEqualityFilterPtrOutput) Aggregation() TopicNamedFilterAggTypePtrOutput {
	return o.ApplyT(func(v *TopicNumericEqualityFilter) *TopicNamedFilterAggType {
		if v == nil {
			return nil
		}
		return v.Aggregation
	}).(TopicNamedFilterAggTypePtrOutput)
}

func (o TopicNumericEqualityFilterPtrOutput) Constant() TopicSingularFilterConstantPtrOutput {
	return o.ApplyT(func(v *TopicNumericEqualityFilter) *TopicSingularFilterConstant {
		if v == nil {
			return nil
		}
		return v.Constant
	}).(TopicSingularFilterConstantPtrOutput)
}

type TopicNumericRangeFilter struct {
	Aggregation *TopicNamedFilterAggType  `pulumi:"aggregation"`
	Constant    *TopicRangeFilterConstant `pulumi:"constant"`
	Inclusive   *bool                     `pulumi:"inclusive"`
}

// TopicNumericRangeFilterInput is an input type that accepts TopicNumericRangeFilterArgs and TopicNumericRangeFilterOutput values.
// You can construct a concrete instance of `TopicNumericRangeFilterInput` via:
//
//	TopicNumericRangeFilterArgs{...}
type TopicNumericRangeFilterInput interface {
	pulumi.Input

	ToTopicNumericRangeFilterOutput() TopicNumericRangeFilterOutput
	ToTopicNumericRangeFilterOutputWithContext(context.Context) TopicNumericRangeFilterOutput
}

type TopicNumericRangeFilterArgs struct {
	Aggregation TopicNamedFilterAggTypePtrInput  `pulumi:"aggregation"`
	Constant    TopicRangeFilterConstantPtrInput `pulumi:"constant"`
	Inclusive   pulumi.BoolPtrInput              `pulumi:"inclusive"`
}

func (TopicNumericRangeFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicNumericRangeFilter)(nil)).Elem()
}

func (i TopicNumericRangeFilterArgs) ToTopicNumericRangeFilterOutput() TopicNumericRangeFilterOutput {
	return i.ToTopicNumericRangeFilterOutputWithContext(context.Background())
}

func (i TopicNumericRangeFilterArgs) ToTopicNumericRangeFilterOutputWithContext(ctx context.Context) TopicNumericRangeFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicNumericRangeFilterOutput)
}

func (i TopicNumericRangeFilterArgs) ToOutput(ctx context.Context) pulumix.Output[TopicNumericRangeFilter] {
	return pulumix.Output[TopicNumericRangeFilter]{
		OutputState: i.ToTopicNumericRangeFilterOutputWithContext(ctx).OutputState,
	}
}

func (i TopicNumericRangeFilterArgs) ToTopicNumericRangeFilterPtrOutput() TopicNumericRangeFilterPtrOutput {
	return i.ToTopicNumericRangeFilterPtrOutputWithContext(context.Background())
}

func (i TopicNumericRangeFilterArgs) ToTopicNumericRangeFilterPtrOutputWithContext(ctx context.Context) TopicNumericRangeFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicNumericRangeFilterOutput).ToTopicNumericRangeFilterPtrOutputWithContext(ctx)
}

// TopicNumericRangeFilterPtrInput is an input type that accepts TopicNumericRangeFilterArgs, TopicNumericRangeFilterPtr and TopicNumericRangeFilterPtrOutput values.
// You can construct a concrete instance of `TopicNumericRangeFilterPtrInput` via:
//
//	        TopicNumericRangeFilterArgs{...}
//
//	or:
//
//	        nil
type TopicNumericRangeFilterPtrInput interface {
	pulumi.Input

	ToTopicNumericRangeFilterPtrOutput() TopicNumericRangeFilterPtrOutput
	ToTopicNumericRangeFilterPtrOutputWithContext(context.Context) TopicNumericRangeFilterPtrOutput
}

type topicNumericRangeFilterPtrType TopicNumericRangeFilterArgs

func TopicNumericRangeFilterPtr(v *TopicNumericRangeFilterArgs) TopicNumericRangeFilterPtrInput {
	return (*topicNumericRangeFilterPtrType)(v)
}

func (*topicNumericRangeFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicNumericRangeFilter)(nil)).Elem()
}

func (i *topicNumericRangeFilterPtrType) ToTopicNumericRangeFilterPtrOutput() TopicNumericRangeFilterPtrOutput {
	return i.ToTopicNumericRangeFilterPtrOutputWithContext(context.Background())
}

func (i *topicNumericRangeFilterPtrType) ToTopicNumericRangeFilterPtrOutputWithContext(ctx context.Context) TopicNumericRangeFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicNumericRangeFilterPtrOutput)
}

func (i *topicNumericRangeFilterPtrType) ToOutput(ctx context.Context) pulumix.Output[*TopicNumericRangeFilter] {
	return pulumix.Output[*TopicNumericRangeFilter]{
		OutputState: i.ToTopicNumericRangeFilterPtrOutputWithContext(ctx).OutputState,
	}
}

type TopicNumericRangeFilterOutput struct{ *pulumi.OutputState }

func (TopicNumericRangeFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicNumericRangeFilter)(nil)).Elem()
}

func (o TopicNumericRangeFilterOutput) ToTopicNumericRangeFilterOutput() TopicNumericRangeFilterOutput {
	return o
}

func (o TopicNumericRangeFilterOutput) ToTopicNumericRangeFilterOutputWithContext(ctx context.Context) TopicNumericRangeFilterOutput {
	return o
}

func (o TopicNumericRangeFilterOutput) ToTopicNumericRangeFilterPtrOutput() TopicNumericRangeFilterPtrOutput {
	return o.ToTopicNumericRangeFilterPtrOutputWithContext(context.Background())
}

func (o TopicNumericRangeFilterOutput) ToTopicNumericRangeFilterPtrOutputWithContext(ctx context.Context) TopicNumericRangeFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicNumericRangeFilter) *TopicNumericRangeFilter {
		return &v
	}).(TopicNumericRangeFilterPtrOutput)
}

func (o TopicNumericRangeFilterOutput) ToOutput(ctx context.Context) pulumix.Output[TopicNumericRangeFilter] {
	return pulumix.Output[TopicNumericRangeFilter]{
		OutputState: o.OutputState,
	}
}

func (o TopicNumericRangeFilterOutput) Aggregation() TopicNamedFilterAggTypePtrOutput {
	return o.ApplyT(func(v TopicNumericRangeFilter) *TopicNamedFilterAggType { return v.Aggregation }).(TopicNamedFilterAggTypePtrOutput)
}

func (o TopicNumericRangeFilterOutput) Constant() TopicRangeFilterConstantPtrOutput {
	return o.ApplyT(func(v TopicNumericRangeFilter) *TopicRangeFilterConstant { return v.Constant }).(TopicRangeFilterConstantPtrOutput)
}

func (o TopicNumericRangeFilterOutput) Inclusive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TopicNumericRangeFilter) *bool { return v.Inclusive }).(pulumi.BoolPtrOutput)
}

type TopicNumericRangeFilterPtrOutput struct{ *pulumi.OutputState }

func (TopicNumericRangeFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicNumericRangeFilter)(nil)).Elem()
}

func (o TopicNumericRangeFilterPtrOutput) ToTopicNumericRangeFilterPtrOutput() TopicNumericRangeFilterPtrOutput {
	return o
}

func (o TopicNumericRangeFilterPtrOutput) ToTopicNumericRangeFilterPtrOutputWithContext(ctx context.Context) TopicNumericRangeFilterPtrOutput {
	return o
}

func (o TopicNumericRangeFilterPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TopicNumericRangeFilter] {
	return pulumix.Output[*TopicNumericRangeFilter]{
		OutputState: o.OutputState,
	}
}

func (o TopicNumericRangeFilterPtrOutput) Elem() TopicNumericRangeFilterOutput {
	return o.ApplyT(func(v *TopicNumericRangeFilter) TopicNumericRangeFilter {
		if v != nil {
			return *v
		}
		var ret TopicNumericRangeFilter
		return ret
	}).(TopicNumericRangeFilterOutput)
}

func (o TopicNumericRangeFilterPtrOutput) Aggregation() TopicNamedFilterAggTypePtrOutput {
	return o.ApplyT(func(v *TopicNumericRangeFilter) *TopicNamedFilterAggType {
		if v == nil {
			return nil
		}
		return v.Aggregation
	}).(TopicNamedFilterAggTypePtrOutput)
}

func (o TopicNumericRangeFilterPtrOutput) Constant() TopicRangeFilterConstantPtrOutput {
	return o.ApplyT(func(v *TopicNumericRangeFilter) *TopicRangeFilterConstant {
		if v == nil {
			return nil
		}
		return v.Constant
	}).(TopicRangeFilterConstantPtrOutput)
}

func (o TopicNumericRangeFilterPtrOutput) Inclusive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TopicNumericRangeFilter) *bool {
		if v == nil {
			return nil
		}
		return v.Inclusive
	}).(pulumi.BoolPtrOutput)
}

type TopicRangeConstant struct {
	Maximum *string `pulumi:"maximum"`
	Minimum *string `pulumi:"minimum"`
}

// TopicRangeConstantInput is an input type that accepts TopicRangeConstantArgs and TopicRangeConstantOutput values.
// You can construct a concrete instance of `TopicRangeConstantInput` via:
//
//	TopicRangeConstantArgs{...}
type TopicRangeConstantInput interface {
	pulumi.Input

	ToTopicRangeConstantOutput() TopicRangeConstantOutput
	ToTopicRangeConstantOutputWithContext(context.Context) TopicRangeConstantOutput
}

type TopicRangeConstantArgs struct {
	Maximum pulumi.StringPtrInput `pulumi:"maximum"`
	Minimum pulumi.StringPtrInput `pulumi:"minimum"`
}

func (TopicRangeConstantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRangeConstant)(nil)).Elem()
}

func (i TopicRangeConstantArgs) ToTopicRangeConstantOutput() TopicRangeConstantOutput {
	return i.ToTopicRangeConstantOutputWithContext(context.Background())
}

func (i TopicRangeConstantArgs) ToTopicRangeConstantOutputWithContext(ctx context.Context) TopicRangeConstantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRangeConstantOutput)
}

func (i TopicRangeConstantArgs) ToOutput(ctx context.Context) pulumix.Output[TopicRangeConstant] {
	return pulumix.Output[TopicRangeConstant]{
		OutputState: i.ToTopicRangeConstantOutputWithContext(ctx).OutputState,
	}
}

func (i TopicRangeConstantArgs) ToTopicRangeConstantPtrOutput() TopicRangeConstantPtrOutput {
	return i.ToTopicRangeConstantPtrOutputWithContext(context.Background())
}

func (i TopicRangeConstantArgs) ToTopicRangeConstantPtrOutputWithContext(ctx context.Context) TopicRangeConstantPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRangeConstantOutput).ToTopicRangeConstantPtrOutputWithContext(ctx)
}

// TopicRangeConstantPtrInput is an input type that accepts TopicRangeConstantArgs, TopicRangeConstantPtr and TopicRangeConstantPtrOutput values.
// You can construct a concrete instance of `TopicRangeConstantPtrInput` via:
//
//	        TopicRangeConstantArgs{...}
//
//	or:
//
//	        nil
type TopicRangeConstantPtrInput interface {
	pulumi.Input

	ToTopicRangeConstantPtrOutput() TopicRangeConstantPtrOutput
	ToTopicRangeConstantPtrOutputWithContext(context.Context) TopicRangeConstantPtrOutput
}

type topicRangeConstantPtrType TopicRangeConstantArgs

func TopicRangeConstantPtr(v *TopicRangeConstantArgs) TopicRangeConstantPtrInput {
	return (*topicRangeConstantPtrType)(v)
}

func (*topicRangeConstantPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicRangeConstant)(nil)).Elem()
}

func (i *topicRangeConstantPtrType) ToTopicRangeConstantPtrOutput() TopicRangeConstantPtrOutput {
	return i.ToTopicRangeConstantPtrOutputWithContext(context.Background())
}

func (i *topicRangeConstantPtrType) ToTopicRangeConstantPtrOutputWithContext(ctx context.Context) TopicRangeConstantPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRangeConstantPtrOutput)
}

func (i *topicRangeConstantPtrType) ToOutput(ctx context.Context) pulumix.Output[*TopicRangeConstant] {
	return pulumix.Output[*TopicRangeConstant]{
		OutputState: i.ToTopicRangeConstantPtrOutputWithContext(ctx).OutputState,
	}
}

type TopicRangeConstantOutput struct{ *pulumi.OutputState }

func (TopicRangeConstantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRangeConstant)(nil)).Elem()
}

func (o TopicRangeConstantOutput) ToTopicRangeConstantOutput() TopicRangeConstantOutput {
	return o
}

func (o TopicRangeConstantOutput) ToTopicRangeConstantOutputWithContext(ctx context.Context) TopicRangeConstantOutput {
	return o
}

func (o TopicRangeConstantOutput) ToTopicRangeConstantPtrOutput() TopicRangeConstantPtrOutput {
	return o.ToTopicRangeConstantPtrOutputWithContext(context.Background())
}

func (o TopicRangeConstantOutput) ToTopicRangeConstantPtrOutputWithContext(ctx context.Context) TopicRangeConstantPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicRangeConstant) *TopicRangeConstant {
		return &v
	}).(TopicRangeConstantPtrOutput)
}

func (o TopicRangeConstantOutput) ToOutput(ctx context.Context) pulumix.Output[TopicRangeConstant] {
	return pulumix.Output[TopicRangeConstant]{
		OutputState: o.OutputState,
	}
}

func (o TopicRangeConstantOutput) Maximum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicRangeConstant) *string { return v.Maximum }).(pulumi.StringPtrOutput)
}

func (o TopicRangeConstantOutput) Minimum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicRangeConstant) *string { return v.Minimum }).(pulumi.StringPtrOutput)
}

type TopicRangeConstantPtrOutput struct{ *pulumi.OutputState }

func (TopicRangeConstantPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicRangeConstant)(nil)).Elem()
}

func (o TopicRangeConstantPtrOutput) ToTopicRangeConstantPtrOutput() TopicRangeConstantPtrOutput {
	return o
}

func (o TopicRangeConstantPtrOutput) ToTopicRangeConstantPtrOutputWithContext(ctx context.Context) TopicRangeConstantPtrOutput {
	return o
}

func (o TopicRangeConstantPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TopicRangeConstant] {
	return pulumix.Output[*TopicRangeConstant]{
		OutputState: o.OutputState,
	}
}

func (o TopicRangeConstantPtrOutput) Elem() TopicRangeConstantOutput {
	return o.ApplyT(func(v *TopicRangeConstant) TopicRangeConstant {
		if v != nil {
			return *v
		}
		var ret TopicRangeConstant
		return ret
	}).(TopicRangeConstantOutput)
}

func (o TopicRangeConstantPtrOutput) Maximum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicRangeConstant) *string {
		if v == nil {
			return nil
		}
		return v.Maximum
	}).(pulumi.StringPtrOutput)
}

func (o TopicRangeConstantPtrOutput) Minimum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicRangeConstant) *string {
		if v == nil {
			return nil
		}
		return v.Minimum
	}).(pulumi.StringPtrOutput)
}

type TopicRangeFilterConstant struct {
	ConstantType  *TopicConstantType  `pulumi:"constantType"`
	RangeConstant *TopicRangeConstant `pulumi:"rangeConstant"`
}

// TopicRangeFilterConstantInput is an input type that accepts TopicRangeFilterConstantArgs and TopicRangeFilterConstantOutput values.
// You can construct a concrete instance of `TopicRangeFilterConstantInput` via:
//
//	TopicRangeFilterConstantArgs{...}
type TopicRangeFilterConstantInput interface {
	pulumi.Input

	ToTopicRangeFilterConstantOutput() TopicRangeFilterConstantOutput
	ToTopicRangeFilterConstantOutputWithContext(context.Context) TopicRangeFilterConstantOutput
}

type TopicRangeFilterConstantArgs struct {
	ConstantType  TopicConstantTypePtrInput  `pulumi:"constantType"`
	RangeConstant TopicRangeConstantPtrInput `pulumi:"rangeConstant"`
}

func (TopicRangeFilterConstantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRangeFilterConstant)(nil)).Elem()
}

func (i TopicRangeFilterConstantArgs) ToTopicRangeFilterConstantOutput() TopicRangeFilterConstantOutput {
	return i.ToTopicRangeFilterConstantOutputWithContext(context.Background())
}

func (i TopicRangeFilterConstantArgs) ToTopicRangeFilterConstantOutputWithContext(ctx context.Context) TopicRangeFilterConstantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRangeFilterConstantOutput)
}

func (i TopicRangeFilterConstantArgs) ToOutput(ctx context.Context) pulumix.Output[TopicRangeFilterConstant] {
	return pulumix.Output[TopicRangeFilterConstant]{
		OutputState: i.ToTopicRangeFilterConstantOutputWithContext(ctx).OutputState,
	}
}

func (i TopicRangeFilterConstantArgs) ToTopicRangeFilterConstantPtrOutput() TopicRangeFilterConstantPtrOutput {
	return i.ToTopicRangeFilterConstantPtrOutputWithContext(context.Background())
}

func (i TopicRangeFilterConstantArgs) ToTopicRangeFilterConstantPtrOutputWithContext(ctx context.Context) TopicRangeFilterConstantPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRangeFilterConstantOutput).ToTopicRangeFilterConstantPtrOutputWithContext(ctx)
}

// TopicRangeFilterConstantPtrInput is an input type that accepts TopicRangeFilterConstantArgs, TopicRangeFilterConstantPtr and TopicRangeFilterConstantPtrOutput values.
// You can construct a concrete instance of `TopicRangeFilterConstantPtrInput` via:
//
//	        TopicRangeFilterConstantArgs{...}
//
//	or:
//
//	        nil
type TopicRangeFilterConstantPtrInput interface {
	pulumi.Input

	ToTopicRangeFilterConstantPtrOutput() TopicRangeFilterConstantPtrOutput
	ToTopicRangeFilterConstantPtrOutputWithContext(context.Context) TopicRangeFilterConstantPtrOutput
}

type topicRangeFilterConstantPtrType TopicRangeFilterConstantArgs

func TopicRangeFilterConstantPtr(v *TopicRangeFilterConstantArgs) TopicRangeFilterConstantPtrInput {
	return (*topicRangeFilterConstantPtrType)(v)
}

func (*topicRangeFilterConstantPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicRangeFilterConstant)(nil)).Elem()
}

func (i *topicRangeFilterConstantPtrType) ToTopicRangeFilterConstantPtrOutput() TopicRangeFilterConstantPtrOutput {
	return i.ToTopicRangeFilterConstantPtrOutputWithContext(context.Background())
}

func (i *topicRangeFilterConstantPtrType) ToTopicRangeFilterConstantPtrOutputWithContext(ctx context.Context) TopicRangeFilterConstantPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRangeFilterConstantPtrOutput)
}

func (i *topicRangeFilterConstantPtrType) ToOutput(ctx context.Context) pulumix.Output[*TopicRangeFilterConstant] {
	return pulumix.Output[*TopicRangeFilterConstant]{
		OutputState: i.ToTopicRangeFilterConstantPtrOutputWithContext(ctx).OutputState,
	}
}

type TopicRangeFilterConstantOutput struct{ *pulumi.OutputState }

func (TopicRangeFilterConstantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRangeFilterConstant)(nil)).Elem()
}

func (o TopicRangeFilterConstantOutput) ToTopicRangeFilterConstantOutput() TopicRangeFilterConstantOutput {
	return o
}

func (o TopicRangeFilterConstantOutput) ToTopicRangeFilterConstantOutputWithContext(ctx context.Context) TopicRangeFilterConstantOutput {
	return o
}

func (o TopicRangeFilterConstantOutput) ToTopicRangeFilterConstantPtrOutput() TopicRangeFilterConstantPtrOutput {
	return o.ToTopicRangeFilterConstantPtrOutputWithContext(context.Background())
}

func (o TopicRangeFilterConstantOutput) ToTopicRangeFilterConstantPtrOutputWithContext(ctx context.Context) TopicRangeFilterConstantPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicRangeFilterConstant) *TopicRangeFilterConstant {
		return &v
	}).(TopicRangeFilterConstantPtrOutput)
}

func (o TopicRangeFilterConstantOutput) ToOutput(ctx context.Context) pulumix.Output[TopicRangeFilterConstant] {
	return pulumix.Output[TopicRangeFilterConstant]{
		OutputState: o.OutputState,
	}
}

func (o TopicRangeFilterConstantOutput) ConstantType() TopicConstantTypePtrOutput {
	return o.ApplyT(func(v TopicRangeFilterConstant) *TopicConstantType { return v.ConstantType }).(TopicConstantTypePtrOutput)
}

func (o TopicRangeFilterConstantOutput) RangeConstant() TopicRangeConstantPtrOutput {
	return o.ApplyT(func(v TopicRangeFilterConstant) *TopicRangeConstant { return v.RangeConstant }).(TopicRangeConstantPtrOutput)
}

type TopicRangeFilterConstantPtrOutput struct{ *pulumi.OutputState }

func (TopicRangeFilterConstantPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicRangeFilterConstant)(nil)).Elem()
}

func (o TopicRangeFilterConstantPtrOutput) ToTopicRangeFilterConstantPtrOutput() TopicRangeFilterConstantPtrOutput {
	return o
}

func (o TopicRangeFilterConstantPtrOutput) ToTopicRangeFilterConstantPtrOutputWithContext(ctx context.Context) TopicRangeFilterConstantPtrOutput {
	return o
}

func (o TopicRangeFilterConstantPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TopicRangeFilterConstant] {
	return pulumix.Output[*TopicRangeFilterConstant]{
		OutputState: o.OutputState,
	}
}

func (o TopicRangeFilterConstantPtrOutput) Elem() TopicRangeFilterConstantOutput {
	return o.ApplyT(func(v *TopicRangeFilterConstant) TopicRangeFilterConstant {
		if v != nil {
			return *v
		}
		var ret TopicRangeFilterConstant
		return ret
	}).(TopicRangeFilterConstantOutput)
}

func (o TopicRangeFilterConstantPtrOutput) ConstantType() TopicConstantTypePtrOutput {
	return o.ApplyT(func(v *TopicRangeFilterConstant) *TopicConstantType {
		if v == nil {
			return nil
		}
		return v.ConstantType
	}).(TopicConstantTypePtrOutput)
}

func (o TopicRangeFilterConstantPtrOutput) RangeConstant() TopicRangeConstantPtrOutput {
	return o.ApplyT(func(v *TopicRangeFilterConstant) *TopicRangeConstant {
		if v == nil {
			return nil
		}
		return v.RangeConstant
	}).(TopicRangeConstantPtrOutput)
}

type TopicRelativeDateFilter struct {
	Constant                   *TopicSingularFilterConstant     `pulumi:"constant"`
	RelativeDateFilterFunction *TopicRelativeDateFilterFunction `pulumi:"relativeDateFilterFunction"`
	TimeGranularity            *TopicTimeGranularity            `pulumi:"timeGranularity"`
}

// TopicRelativeDateFilterInput is an input type that accepts TopicRelativeDateFilterArgs and TopicRelativeDateFilterOutput values.
// You can construct a concrete instance of `TopicRelativeDateFilterInput` via:
//
//	TopicRelativeDateFilterArgs{...}
type TopicRelativeDateFilterInput interface {
	pulumi.Input

	ToTopicRelativeDateFilterOutput() TopicRelativeDateFilterOutput
	ToTopicRelativeDateFilterOutputWithContext(context.Context) TopicRelativeDateFilterOutput
}

type TopicRelativeDateFilterArgs struct {
	Constant                   TopicSingularFilterConstantPtrInput     `pulumi:"constant"`
	RelativeDateFilterFunction TopicRelativeDateFilterFunctionPtrInput `pulumi:"relativeDateFilterFunction"`
	TimeGranularity            TopicTimeGranularityPtrInput            `pulumi:"timeGranularity"`
}

func (TopicRelativeDateFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRelativeDateFilter)(nil)).Elem()
}

func (i TopicRelativeDateFilterArgs) ToTopicRelativeDateFilterOutput() TopicRelativeDateFilterOutput {
	return i.ToTopicRelativeDateFilterOutputWithContext(context.Background())
}

func (i TopicRelativeDateFilterArgs) ToTopicRelativeDateFilterOutputWithContext(ctx context.Context) TopicRelativeDateFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRelativeDateFilterOutput)
}

func (i TopicRelativeDateFilterArgs) ToOutput(ctx context.Context) pulumix.Output[TopicRelativeDateFilter] {
	return pulumix.Output[TopicRelativeDateFilter]{
		OutputState: i.ToTopicRelativeDateFilterOutputWithContext(ctx).OutputState,
	}
}

func (i TopicRelativeDateFilterArgs) ToTopicRelativeDateFilterPtrOutput() TopicRelativeDateFilterPtrOutput {
	return i.ToTopicRelativeDateFilterPtrOutputWithContext(context.Background())
}

func (i TopicRelativeDateFilterArgs) ToTopicRelativeDateFilterPtrOutputWithContext(ctx context.Context) TopicRelativeDateFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRelativeDateFilterOutput).ToTopicRelativeDateFilterPtrOutputWithContext(ctx)
}

// TopicRelativeDateFilterPtrInput is an input type that accepts TopicRelativeDateFilterArgs, TopicRelativeDateFilterPtr and TopicRelativeDateFilterPtrOutput values.
// You can construct a concrete instance of `TopicRelativeDateFilterPtrInput` via:
//
//	        TopicRelativeDateFilterArgs{...}
//
//	or:
//
//	        nil
type TopicRelativeDateFilterPtrInput interface {
	pulumi.Input

	ToTopicRelativeDateFilterPtrOutput() TopicRelativeDateFilterPtrOutput
	ToTopicRelativeDateFilterPtrOutputWithContext(context.Context) TopicRelativeDateFilterPtrOutput
}

type topicRelativeDateFilterPtrType TopicRelativeDateFilterArgs

func TopicRelativeDateFilterPtr(v *TopicRelativeDateFilterArgs) TopicRelativeDateFilterPtrInput {
	return (*topicRelativeDateFilterPtrType)(v)
}

func (*topicRelativeDateFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicRelativeDateFilter)(nil)).Elem()
}

func (i *topicRelativeDateFilterPtrType) ToTopicRelativeDateFilterPtrOutput() TopicRelativeDateFilterPtrOutput {
	return i.ToTopicRelativeDateFilterPtrOutputWithContext(context.Background())
}

func (i *topicRelativeDateFilterPtrType) ToTopicRelativeDateFilterPtrOutputWithContext(ctx context.Context) TopicRelativeDateFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRelativeDateFilterPtrOutput)
}

func (i *topicRelativeDateFilterPtrType) ToOutput(ctx context.Context) pulumix.Output[*TopicRelativeDateFilter] {
	return pulumix.Output[*TopicRelativeDateFilter]{
		OutputState: i.ToTopicRelativeDateFilterPtrOutputWithContext(ctx).OutputState,
	}
}

type TopicRelativeDateFilterOutput struct{ *pulumi.OutputState }

func (TopicRelativeDateFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRelativeDateFilter)(nil)).Elem()
}

func (o TopicRelativeDateFilterOutput) ToTopicRelativeDateFilterOutput() TopicRelativeDateFilterOutput {
	return o
}

func (o TopicRelativeDateFilterOutput) ToTopicRelativeDateFilterOutputWithContext(ctx context.Context) TopicRelativeDateFilterOutput {
	return o
}

func (o TopicRelativeDateFilterOutput) ToTopicRelativeDateFilterPtrOutput() TopicRelativeDateFilterPtrOutput {
	return o.ToTopicRelativeDateFilterPtrOutputWithContext(context.Background())
}

func (o TopicRelativeDateFilterOutput) ToTopicRelativeDateFilterPtrOutputWithContext(ctx context.Context) TopicRelativeDateFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicRelativeDateFilter) *TopicRelativeDateFilter {
		return &v
	}).(TopicRelativeDateFilterPtrOutput)
}

func (o TopicRelativeDateFilterOutput) ToOutput(ctx context.Context) pulumix.Output[TopicRelativeDateFilter] {
	return pulumix.Output[TopicRelativeDateFilter]{
		OutputState: o.OutputState,
	}
}

func (o TopicRelativeDateFilterOutput) Constant() TopicSingularFilterConstantPtrOutput {
	return o.ApplyT(func(v TopicRelativeDateFilter) *TopicSingularFilterConstant { return v.Constant }).(TopicSingularFilterConstantPtrOutput)
}

func (o TopicRelativeDateFilterOutput) RelativeDateFilterFunction() TopicRelativeDateFilterFunctionPtrOutput {
	return o.ApplyT(func(v TopicRelativeDateFilter) *TopicRelativeDateFilterFunction { return v.RelativeDateFilterFunction }).(TopicRelativeDateFilterFunctionPtrOutput)
}

func (o TopicRelativeDateFilterOutput) TimeGranularity() TopicTimeGranularityPtrOutput {
	return o.ApplyT(func(v TopicRelativeDateFilter) *TopicTimeGranularity { return v.TimeGranularity }).(TopicTimeGranularityPtrOutput)
}

type TopicRelativeDateFilterPtrOutput struct{ *pulumi.OutputState }

func (TopicRelativeDateFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicRelativeDateFilter)(nil)).Elem()
}

func (o TopicRelativeDateFilterPtrOutput) ToTopicRelativeDateFilterPtrOutput() TopicRelativeDateFilterPtrOutput {
	return o
}

func (o TopicRelativeDateFilterPtrOutput) ToTopicRelativeDateFilterPtrOutputWithContext(ctx context.Context) TopicRelativeDateFilterPtrOutput {
	return o
}

func (o TopicRelativeDateFilterPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TopicRelativeDateFilter] {
	return pulumix.Output[*TopicRelativeDateFilter]{
		OutputState: o.OutputState,
	}
}

func (o TopicRelativeDateFilterPtrOutput) Elem() TopicRelativeDateFilterOutput {
	return o.ApplyT(func(v *TopicRelativeDateFilter) TopicRelativeDateFilter {
		if v != nil {
			return *v
		}
		var ret TopicRelativeDateFilter
		return ret
	}).(TopicRelativeDateFilterOutput)
}

func (o TopicRelativeDateFilterPtrOutput) Constant() TopicSingularFilterConstantPtrOutput {
	return o.ApplyT(func(v *TopicRelativeDateFilter) *TopicSingularFilterConstant {
		if v == nil {
			return nil
		}
		return v.Constant
	}).(TopicSingularFilterConstantPtrOutput)
}

func (o TopicRelativeDateFilterPtrOutput) RelativeDateFilterFunction() TopicRelativeDateFilterFunctionPtrOutput {
	return o.ApplyT(func(v *TopicRelativeDateFilter) *TopicRelativeDateFilterFunction {
		if v == nil {
			return nil
		}
		return v.RelativeDateFilterFunction
	}).(TopicRelativeDateFilterFunctionPtrOutput)
}

func (o TopicRelativeDateFilterPtrOutput) TimeGranularity() TopicTimeGranularityPtrOutput {
	return o.ApplyT(func(v *TopicRelativeDateFilter) *TopicTimeGranularity {
		if v == nil {
			return nil
		}
		return v.TimeGranularity
	}).(TopicTimeGranularityPtrOutput)
}

type TopicSemanticEntityType struct {
	SubTypeName    *string              `pulumi:"subTypeName"`
	TypeName       *string              `pulumi:"typeName"`
	TypeParameters *TopicTypeParameters `pulumi:"typeParameters"`
}

// TopicSemanticEntityTypeInput is an input type that accepts TopicSemanticEntityTypeArgs and TopicSemanticEntityTypeOutput values.
// You can construct a concrete instance of `TopicSemanticEntityTypeInput` via:
//
//	TopicSemanticEntityTypeArgs{...}
type TopicSemanticEntityTypeInput interface {
	pulumi.Input

	ToTopicSemanticEntityTypeOutput() TopicSemanticEntityTypeOutput
	ToTopicSemanticEntityTypeOutputWithContext(context.Context) TopicSemanticEntityTypeOutput
}

type TopicSemanticEntityTypeArgs struct {
	SubTypeName    pulumi.StringPtrInput       `pulumi:"subTypeName"`
	TypeName       pulumi.StringPtrInput       `pulumi:"typeName"`
	TypeParameters TopicTypeParametersPtrInput `pulumi:"typeParameters"`
}

func (TopicSemanticEntityTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSemanticEntityType)(nil)).Elem()
}

func (i TopicSemanticEntityTypeArgs) ToTopicSemanticEntityTypeOutput() TopicSemanticEntityTypeOutput {
	return i.ToTopicSemanticEntityTypeOutputWithContext(context.Background())
}

func (i TopicSemanticEntityTypeArgs) ToTopicSemanticEntityTypeOutputWithContext(ctx context.Context) TopicSemanticEntityTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSemanticEntityTypeOutput)
}

func (i TopicSemanticEntityTypeArgs) ToOutput(ctx context.Context) pulumix.Output[TopicSemanticEntityType] {
	return pulumix.Output[TopicSemanticEntityType]{
		OutputState: i.ToTopicSemanticEntityTypeOutputWithContext(ctx).OutputState,
	}
}

func (i TopicSemanticEntityTypeArgs) ToTopicSemanticEntityTypePtrOutput() TopicSemanticEntityTypePtrOutput {
	return i.ToTopicSemanticEntityTypePtrOutputWithContext(context.Background())
}

func (i TopicSemanticEntityTypeArgs) ToTopicSemanticEntityTypePtrOutputWithContext(ctx context.Context) TopicSemanticEntityTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSemanticEntityTypeOutput).ToTopicSemanticEntityTypePtrOutputWithContext(ctx)
}

// TopicSemanticEntityTypePtrInput is an input type that accepts TopicSemanticEntityTypeArgs, TopicSemanticEntityTypePtr and TopicSemanticEntityTypePtrOutput values.
// You can construct a concrete instance of `TopicSemanticEntityTypePtrInput` via:
//
//	        TopicSemanticEntityTypeArgs{...}
//
//	or:
//
//	        nil
type TopicSemanticEntityTypePtrInput interface {
	pulumi.Input

	ToTopicSemanticEntityTypePtrOutput() TopicSemanticEntityTypePtrOutput
	ToTopicSemanticEntityTypePtrOutputWithContext(context.Context) TopicSemanticEntityTypePtrOutput
}

type topicSemanticEntityTypePtrType TopicSemanticEntityTypeArgs

func TopicSemanticEntityTypePtr(v *TopicSemanticEntityTypeArgs) TopicSemanticEntityTypePtrInput {
	return (*topicSemanticEntityTypePtrType)(v)
}

func (*topicSemanticEntityTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicSemanticEntityType)(nil)).Elem()
}

func (i *topicSemanticEntityTypePtrType) ToTopicSemanticEntityTypePtrOutput() TopicSemanticEntityTypePtrOutput {
	return i.ToTopicSemanticEntityTypePtrOutputWithContext(context.Background())
}

func (i *topicSemanticEntityTypePtrType) ToTopicSemanticEntityTypePtrOutputWithContext(ctx context.Context) TopicSemanticEntityTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSemanticEntityTypePtrOutput)
}

func (i *topicSemanticEntityTypePtrType) ToOutput(ctx context.Context) pulumix.Output[*TopicSemanticEntityType] {
	return pulumix.Output[*TopicSemanticEntityType]{
		OutputState: i.ToTopicSemanticEntityTypePtrOutputWithContext(ctx).OutputState,
	}
}

type TopicSemanticEntityTypeOutput struct{ *pulumi.OutputState }

func (TopicSemanticEntityTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSemanticEntityType)(nil)).Elem()
}

func (o TopicSemanticEntityTypeOutput) ToTopicSemanticEntityTypeOutput() TopicSemanticEntityTypeOutput {
	return o
}

func (o TopicSemanticEntityTypeOutput) ToTopicSemanticEntityTypeOutputWithContext(ctx context.Context) TopicSemanticEntityTypeOutput {
	return o
}

func (o TopicSemanticEntityTypeOutput) ToTopicSemanticEntityTypePtrOutput() TopicSemanticEntityTypePtrOutput {
	return o.ToTopicSemanticEntityTypePtrOutputWithContext(context.Background())
}

func (o TopicSemanticEntityTypeOutput) ToTopicSemanticEntityTypePtrOutputWithContext(ctx context.Context) TopicSemanticEntityTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicSemanticEntityType) *TopicSemanticEntityType {
		return &v
	}).(TopicSemanticEntityTypePtrOutput)
}

func (o TopicSemanticEntityTypeOutput) ToOutput(ctx context.Context) pulumix.Output[TopicSemanticEntityType] {
	return pulumix.Output[TopicSemanticEntityType]{
		OutputState: o.OutputState,
	}
}

func (o TopicSemanticEntityTypeOutput) SubTypeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicSemanticEntityType) *string { return v.SubTypeName }).(pulumi.StringPtrOutput)
}

func (o TopicSemanticEntityTypeOutput) TypeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicSemanticEntityType) *string { return v.TypeName }).(pulumi.StringPtrOutput)
}

func (o TopicSemanticEntityTypeOutput) TypeParameters() TopicTypeParametersPtrOutput {
	return o.ApplyT(func(v TopicSemanticEntityType) *TopicTypeParameters { return v.TypeParameters }).(TopicTypeParametersPtrOutput)
}

type TopicSemanticEntityTypePtrOutput struct{ *pulumi.OutputState }

func (TopicSemanticEntityTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicSemanticEntityType)(nil)).Elem()
}

func (o TopicSemanticEntityTypePtrOutput) ToTopicSemanticEntityTypePtrOutput() TopicSemanticEntityTypePtrOutput {
	return o
}

func (o TopicSemanticEntityTypePtrOutput) ToTopicSemanticEntityTypePtrOutputWithContext(ctx context.Context) TopicSemanticEntityTypePtrOutput {
	return o
}

func (o TopicSemanticEntityTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TopicSemanticEntityType] {
	return pulumix.Output[*TopicSemanticEntityType]{
		OutputState: o.OutputState,
	}
}

func (o TopicSemanticEntityTypePtrOutput) Elem() TopicSemanticEntityTypeOutput {
	return o.ApplyT(func(v *TopicSemanticEntityType) TopicSemanticEntityType {
		if v != nil {
			return *v
		}
		var ret TopicSemanticEntityType
		return ret
	}).(TopicSemanticEntityTypeOutput)
}

func (o TopicSemanticEntityTypePtrOutput) SubTypeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicSemanticEntityType) *string {
		if v == nil {
			return nil
		}
		return v.SubTypeName
	}).(pulumi.StringPtrOutput)
}

func (o TopicSemanticEntityTypePtrOutput) TypeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicSemanticEntityType) *string {
		if v == nil {
			return nil
		}
		return v.TypeName
	}).(pulumi.StringPtrOutput)
}

func (o TopicSemanticEntityTypePtrOutput) TypeParameters() TopicTypeParametersPtrOutput {
	return o.ApplyT(func(v *TopicSemanticEntityType) *TopicTypeParameters {
		if v == nil {
			return nil
		}
		return v.TypeParameters
	}).(TopicTypeParametersPtrOutput)
}

type TopicSemanticType struct {
	FalseyCellValue         *string              `pulumi:"falseyCellValue"`
	FalseyCellValueSynonyms []string             `pulumi:"falseyCellValueSynonyms"`
	SubTypeName             *string              `pulumi:"subTypeName"`
	TruthyCellValue         *string              `pulumi:"truthyCellValue"`
	TruthyCellValueSynonyms []string             `pulumi:"truthyCellValueSynonyms"`
	TypeName                *string              `pulumi:"typeName"`
	TypeParameters          *TopicTypeParameters `pulumi:"typeParameters"`
}

// TopicSemanticTypeInput is an input type that accepts TopicSemanticTypeArgs and TopicSemanticTypeOutput values.
// You can construct a concrete instance of `TopicSemanticTypeInput` via:
//
//	TopicSemanticTypeArgs{...}
type TopicSemanticTypeInput interface {
	pulumi.Input

	ToTopicSemanticTypeOutput() TopicSemanticTypeOutput
	ToTopicSemanticTypeOutputWithContext(context.Context) TopicSemanticTypeOutput
}

type TopicSemanticTypeArgs struct {
	FalseyCellValue         pulumi.StringPtrInput       `pulumi:"falseyCellValue"`
	FalseyCellValueSynonyms pulumi.StringArrayInput     `pulumi:"falseyCellValueSynonyms"`
	SubTypeName             pulumi.StringPtrInput       `pulumi:"subTypeName"`
	TruthyCellValue         pulumi.StringPtrInput       `pulumi:"truthyCellValue"`
	TruthyCellValueSynonyms pulumi.StringArrayInput     `pulumi:"truthyCellValueSynonyms"`
	TypeName                pulumi.StringPtrInput       `pulumi:"typeName"`
	TypeParameters          TopicTypeParametersPtrInput `pulumi:"typeParameters"`
}

func (TopicSemanticTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSemanticType)(nil)).Elem()
}

func (i TopicSemanticTypeArgs) ToTopicSemanticTypeOutput() TopicSemanticTypeOutput {
	return i.ToTopicSemanticTypeOutputWithContext(context.Background())
}

func (i TopicSemanticTypeArgs) ToTopicSemanticTypeOutputWithContext(ctx context.Context) TopicSemanticTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSemanticTypeOutput)
}

func (i TopicSemanticTypeArgs) ToOutput(ctx context.Context) pulumix.Output[TopicSemanticType] {
	return pulumix.Output[TopicSemanticType]{
		OutputState: i.ToTopicSemanticTypeOutputWithContext(ctx).OutputState,
	}
}

func (i TopicSemanticTypeArgs) ToTopicSemanticTypePtrOutput() TopicSemanticTypePtrOutput {
	return i.ToTopicSemanticTypePtrOutputWithContext(context.Background())
}

func (i TopicSemanticTypeArgs) ToTopicSemanticTypePtrOutputWithContext(ctx context.Context) TopicSemanticTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSemanticTypeOutput).ToTopicSemanticTypePtrOutputWithContext(ctx)
}

// TopicSemanticTypePtrInput is an input type that accepts TopicSemanticTypeArgs, TopicSemanticTypePtr and TopicSemanticTypePtrOutput values.
// You can construct a concrete instance of `TopicSemanticTypePtrInput` via:
//
//	        TopicSemanticTypeArgs{...}
//
//	or:
//
//	        nil
type TopicSemanticTypePtrInput interface {
	pulumi.Input

	ToTopicSemanticTypePtrOutput() TopicSemanticTypePtrOutput
	ToTopicSemanticTypePtrOutputWithContext(context.Context) TopicSemanticTypePtrOutput
}

type topicSemanticTypePtrType TopicSemanticTypeArgs

func TopicSemanticTypePtr(v *TopicSemanticTypeArgs) TopicSemanticTypePtrInput {
	return (*topicSemanticTypePtrType)(v)
}

func (*topicSemanticTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicSemanticType)(nil)).Elem()
}

func (i *topicSemanticTypePtrType) ToTopicSemanticTypePtrOutput() TopicSemanticTypePtrOutput {
	return i.ToTopicSemanticTypePtrOutputWithContext(context.Background())
}

func (i *topicSemanticTypePtrType) ToTopicSemanticTypePtrOutputWithContext(ctx context.Context) TopicSemanticTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSemanticTypePtrOutput)
}

func (i *topicSemanticTypePtrType) ToOutput(ctx context.Context) pulumix.Output[*TopicSemanticType] {
	return pulumix.Output[*TopicSemanticType]{
		OutputState: i.ToTopicSemanticTypePtrOutputWithContext(ctx).OutputState,
	}
}

type TopicSemanticTypeOutput struct{ *pulumi.OutputState }

func (TopicSemanticTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSemanticType)(nil)).Elem()
}

func (o TopicSemanticTypeOutput) ToTopicSemanticTypeOutput() TopicSemanticTypeOutput {
	return o
}

func (o TopicSemanticTypeOutput) ToTopicSemanticTypeOutputWithContext(ctx context.Context) TopicSemanticTypeOutput {
	return o
}

func (o TopicSemanticTypeOutput) ToTopicSemanticTypePtrOutput() TopicSemanticTypePtrOutput {
	return o.ToTopicSemanticTypePtrOutputWithContext(context.Background())
}

func (o TopicSemanticTypeOutput) ToTopicSemanticTypePtrOutputWithContext(ctx context.Context) TopicSemanticTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicSemanticType) *TopicSemanticType {
		return &v
	}).(TopicSemanticTypePtrOutput)
}

func (o TopicSemanticTypeOutput) ToOutput(ctx context.Context) pulumix.Output[TopicSemanticType] {
	return pulumix.Output[TopicSemanticType]{
		OutputState: o.OutputState,
	}
}

func (o TopicSemanticTypeOutput) FalseyCellValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicSemanticType) *string { return v.FalseyCellValue }).(pulumi.StringPtrOutput)
}

func (o TopicSemanticTypeOutput) FalseyCellValueSynonyms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TopicSemanticType) []string { return v.FalseyCellValueSynonyms }).(pulumi.StringArrayOutput)
}

func (o TopicSemanticTypeOutput) SubTypeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicSemanticType) *string { return v.SubTypeName }).(pulumi.StringPtrOutput)
}

func (o TopicSemanticTypeOutput) TruthyCellValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicSemanticType) *string { return v.TruthyCellValue }).(pulumi.StringPtrOutput)
}

func (o TopicSemanticTypeOutput) TruthyCellValueSynonyms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TopicSemanticType) []string { return v.TruthyCellValueSynonyms }).(pulumi.StringArrayOutput)
}

func (o TopicSemanticTypeOutput) TypeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicSemanticType) *string { return v.TypeName }).(pulumi.StringPtrOutput)
}

func (o TopicSemanticTypeOutput) TypeParameters() TopicTypeParametersPtrOutput {
	return o.ApplyT(func(v TopicSemanticType) *TopicTypeParameters { return v.TypeParameters }).(TopicTypeParametersPtrOutput)
}

type TopicSemanticTypePtrOutput struct{ *pulumi.OutputState }

func (TopicSemanticTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicSemanticType)(nil)).Elem()
}

func (o TopicSemanticTypePtrOutput) ToTopicSemanticTypePtrOutput() TopicSemanticTypePtrOutput {
	return o
}

func (o TopicSemanticTypePtrOutput) ToTopicSemanticTypePtrOutputWithContext(ctx context.Context) TopicSemanticTypePtrOutput {
	return o
}

func (o TopicSemanticTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TopicSemanticType] {
	return pulumix.Output[*TopicSemanticType]{
		OutputState: o.OutputState,
	}
}

func (o TopicSemanticTypePtrOutput) Elem() TopicSemanticTypeOutput {
	return o.ApplyT(func(v *TopicSemanticType) TopicSemanticType {
		if v != nil {
			return *v
		}
		var ret TopicSemanticType
		return ret
	}).(TopicSemanticTypeOutput)
}

func (o TopicSemanticTypePtrOutput) FalseyCellValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicSemanticType) *string {
		if v == nil {
			return nil
		}
		return v.FalseyCellValue
	}).(pulumi.StringPtrOutput)
}

func (o TopicSemanticTypePtrOutput) FalseyCellValueSynonyms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TopicSemanticType) []string {
		if v == nil {
			return nil
		}
		return v.FalseyCellValueSynonyms
	}).(pulumi.StringArrayOutput)
}

func (o TopicSemanticTypePtrOutput) SubTypeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicSemanticType) *string {
		if v == nil {
			return nil
		}
		return v.SubTypeName
	}).(pulumi.StringPtrOutput)
}

func (o TopicSemanticTypePtrOutput) TruthyCellValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicSemanticType) *string {
		if v == nil {
			return nil
		}
		return v.TruthyCellValue
	}).(pulumi.StringPtrOutput)
}

func (o TopicSemanticTypePtrOutput) TruthyCellValueSynonyms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TopicSemanticType) []string {
		if v == nil {
			return nil
		}
		return v.TruthyCellValueSynonyms
	}).(pulumi.StringArrayOutput)
}

func (o TopicSemanticTypePtrOutput) TypeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicSemanticType) *string {
		if v == nil {
			return nil
		}
		return v.TypeName
	}).(pulumi.StringPtrOutput)
}

func (o TopicSemanticTypePtrOutput) TypeParameters() TopicTypeParametersPtrOutput {
	return o.ApplyT(func(v *TopicSemanticType) *TopicTypeParameters {
		if v == nil {
			return nil
		}
		return v.TypeParameters
	}).(TopicTypeParametersPtrOutput)
}

type TopicSingularFilterConstant struct {
	ConstantType     *TopicConstantType `pulumi:"constantType"`
	SingularConstant *string            `pulumi:"singularConstant"`
}

// TopicSingularFilterConstantInput is an input type that accepts TopicSingularFilterConstantArgs and TopicSingularFilterConstantOutput values.
// You can construct a concrete instance of `TopicSingularFilterConstantInput` via:
//
//	TopicSingularFilterConstantArgs{...}
type TopicSingularFilterConstantInput interface {
	pulumi.Input

	ToTopicSingularFilterConstantOutput() TopicSingularFilterConstantOutput
	ToTopicSingularFilterConstantOutputWithContext(context.Context) TopicSingularFilterConstantOutput
}

type TopicSingularFilterConstantArgs struct {
	ConstantType     TopicConstantTypePtrInput `pulumi:"constantType"`
	SingularConstant pulumi.StringPtrInput     `pulumi:"singularConstant"`
}

func (TopicSingularFilterConstantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSingularFilterConstant)(nil)).Elem()
}

func (i TopicSingularFilterConstantArgs) ToTopicSingularFilterConstantOutput() TopicSingularFilterConstantOutput {
	return i.ToTopicSingularFilterConstantOutputWithContext(context.Background())
}

func (i TopicSingularFilterConstantArgs) ToTopicSingularFilterConstantOutputWithContext(ctx context.Context) TopicSingularFilterConstantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSingularFilterConstantOutput)
}

func (i TopicSingularFilterConstantArgs) ToOutput(ctx context.Context) pulumix.Output[TopicSingularFilterConstant] {
	return pulumix.Output[TopicSingularFilterConstant]{
		OutputState: i.ToTopicSingularFilterConstantOutputWithContext(ctx).OutputState,
	}
}

func (i TopicSingularFilterConstantArgs) ToTopicSingularFilterConstantPtrOutput() TopicSingularFilterConstantPtrOutput {
	return i.ToTopicSingularFilterConstantPtrOutputWithContext(context.Background())
}

func (i TopicSingularFilterConstantArgs) ToTopicSingularFilterConstantPtrOutputWithContext(ctx context.Context) TopicSingularFilterConstantPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSingularFilterConstantOutput).ToTopicSingularFilterConstantPtrOutputWithContext(ctx)
}

// TopicSingularFilterConstantPtrInput is an input type that accepts TopicSingularFilterConstantArgs, TopicSingularFilterConstantPtr and TopicSingularFilterConstantPtrOutput values.
// You can construct a concrete instance of `TopicSingularFilterConstantPtrInput` via:
//
//	        TopicSingularFilterConstantArgs{...}
//
//	or:
//
//	        nil
type TopicSingularFilterConstantPtrInput interface {
	pulumi.Input

	ToTopicSingularFilterConstantPtrOutput() TopicSingularFilterConstantPtrOutput
	ToTopicSingularFilterConstantPtrOutputWithContext(context.Context) TopicSingularFilterConstantPtrOutput
}

type topicSingularFilterConstantPtrType TopicSingularFilterConstantArgs

func TopicSingularFilterConstantPtr(v *TopicSingularFilterConstantArgs) TopicSingularFilterConstantPtrInput {
	return (*topicSingularFilterConstantPtrType)(v)
}

func (*topicSingularFilterConstantPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicSingularFilterConstant)(nil)).Elem()
}

func (i *topicSingularFilterConstantPtrType) ToTopicSingularFilterConstantPtrOutput() TopicSingularFilterConstantPtrOutput {
	return i.ToTopicSingularFilterConstantPtrOutputWithContext(context.Background())
}

func (i *topicSingularFilterConstantPtrType) ToTopicSingularFilterConstantPtrOutputWithContext(ctx context.Context) TopicSingularFilterConstantPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSingularFilterConstantPtrOutput)
}

func (i *topicSingularFilterConstantPtrType) ToOutput(ctx context.Context) pulumix.Output[*TopicSingularFilterConstant] {
	return pulumix.Output[*TopicSingularFilterConstant]{
		OutputState: i.ToTopicSingularFilterConstantPtrOutputWithContext(ctx).OutputState,
	}
}

type TopicSingularFilterConstantOutput struct{ *pulumi.OutputState }

func (TopicSingularFilterConstantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSingularFilterConstant)(nil)).Elem()
}

func (o TopicSingularFilterConstantOutput) ToTopicSingularFilterConstantOutput() TopicSingularFilterConstantOutput {
	return o
}

func (o TopicSingularFilterConstantOutput) ToTopicSingularFilterConstantOutputWithContext(ctx context.Context) TopicSingularFilterConstantOutput {
	return o
}

func (o TopicSingularFilterConstantOutput) ToTopicSingularFilterConstantPtrOutput() TopicSingularFilterConstantPtrOutput {
	return o.ToTopicSingularFilterConstantPtrOutputWithContext(context.Background())
}

func (o TopicSingularFilterConstantOutput) ToTopicSingularFilterConstantPtrOutputWithContext(ctx context.Context) TopicSingularFilterConstantPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicSingularFilterConstant) *TopicSingularFilterConstant {
		return &v
	}).(TopicSingularFilterConstantPtrOutput)
}

func (o TopicSingularFilterConstantOutput) ToOutput(ctx context.Context) pulumix.Output[TopicSingularFilterConstant] {
	return pulumix.Output[TopicSingularFilterConstant]{
		OutputState: o.OutputState,
	}
}

func (o TopicSingularFilterConstantOutput) ConstantType() TopicConstantTypePtrOutput {
	return o.ApplyT(func(v TopicSingularFilterConstant) *TopicConstantType { return v.ConstantType }).(TopicConstantTypePtrOutput)
}

func (o TopicSingularFilterConstantOutput) SingularConstant() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicSingularFilterConstant) *string { return v.SingularConstant }).(pulumi.StringPtrOutput)
}

type TopicSingularFilterConstantPtrOutput struct{ *pulumi.OutputState }

func (TopicSingularFilterConstantPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicSingularFilterConstant)(nil)).Elem()
}

func (o TopicSingularFilterConstantPtrOutput) ToTopicSingularFilterConstantPtrOutput() TopicSingularFilterConstantPtrOutput {
	return o
}

func (o TopicSingularFilterConstantPtrOutput) ToTopicSingularFilterConstantPtrOutputWithContext(ctx context.Context) TopicSingularFilterConstantPtrOutput {
	return o
}

func (o TopicSingularFilterConstantPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TopicSingularFilterConstant] {
	return pulumix.Output[*TopicSingularFilterConstant]{
		OutputState: o.OutputState,
	}
}

func (o TopicSingularFilterConstantPtrOutput) Elem() TopicSingularFilterConstantOutput {
	return o.ApplyT(func(v *TopicSingularFilterConstant) TopicSingularFilterConstant {
		if v != nil {
			return *v
		}
		var ret TopicSingularFilterConstant
		return ret
	}).(TopicSingularFilterConstantOutput)
}

func (o TopicSingularFilterConstantPtrOutput) ConstantType() TopicConstantTypePtrOutput {
	return o.ApplyT(func(v *TopicSingularFilterConstant) *TopicConstantType {
		if v == nil {
			return nil
		}
		return v.ConstantType
	}).(TopicConstantTypePtrOutput)
}

func (o TopicSingularFilterConstantPtrOutput) SingularConstant() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicSingularFilterConstant) *string {
		if v == nil {
			return nil
		}
		return v.SingularConstant
	}).(pulumi.StringPtrOutput)
}

type TopicTypeParameters struct {
}

// TopicTypeParametersInput is an input type that accepts TopicTypeParametersArgs and TopicTypeParametersOutput values.
// You can construct a concrete instance of `TopicTypeParametersInput` via:
//
//	TopicTypeParametersArgs{...}
type TopicTypeParametersInput interface {
	pulumi.Input

	ToTopicTypeParametersOutput() TopicTypeParametersOutput
	ToTopicTypeParametersOutputWithContext(context.Context) TopicTypeParametersOutput
}

type TopicTypeParametersArgs struct {
}

func (TopicTypeParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicTypeParameters)(nil)).Elem()
}

func (i TopicTypeParametersArgs) ToTopicTypeParametersOutput() TopicTypeParametersOutput {
	return i.ToTopicTypeParametersOutputWithContext(context.Background())
}

func (i TopicTypeParametersArgs) ToTopicTypeParametersOutputWithContext(ctx context.Context) TopicTypeParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicTypeParametersOutput)
}

func (i TopicTypeParametersArgs) ToOutput(ctx context.Context) pulumix.Output[TopicTypeParameters] {
	return pulumix.Output[TopicTypeParameters]{
		OutputState: i.ToTopicTypeParametersOutputWithContext(ctx).OutputState,
	}
}

func (i TopicTypeParametersArgs) ToTopicTypeParametersPtrOutput() TopicTypeParametersPtrOutput {
	return i.ToTopicTypeParametersPtrOutputWithContext(context.Background())
}

func (i TopicTypeParametersArgs) ToTopicTypeParametersPtrOutputWithContext(ctx context.Context) TopicTypeParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicTypeParametersOutput).ToTopicTypeParametersPtrOutputWithContext(ctx)
}

// TopicTypeParametersPtrInput is an input type that accepts TopicTypeParametersArgs, TopicTypeParametersPtr and TopicTypeParametersPtrOutput values.
// You can construct a concrete instance of `TopicTypeParametersPtrInput` via:
//
//	        TopicTypeParametersArgs{...}
//
//	or:
//
//	        nil
type TopicTypeParametersPtrInput interface {
	pulumi.Input

	ToTopicTypeParametersPtrOutput() TopicTypeParametersPtrOutput
	ToTopicTypeParametersPtrOutputWithContext(context.Context) TopicTypeParametersPtrOutput
}

type topicTypeParametersPtrType TopicTypeParametersArgs

func TopicTypeParametersPtr(v *TopicTypeParametersArgs) TopicTypeParametersPtrInput {
	return (*topicTypeParametersPtrType)(v)
}

func (*topicTypeParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicTypeParameters)(nil)).Elem()
}

func (i *topicTypeParametersPtrType) ToTopicTypeParametersPtrOutput() TopicTypeParametersPtrOutput {
	return i.ToTopicTypeParametersPtrOutputWithContext(context.Background())
}

func (i *topicTypeParametersPtrType) ToTopicTypeParametersPtrOutputWithContext(ctx context.Context) TopicTypeParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicTypeParametersPtrOutput)
}

func (i *topicTypeParametersPtrType) ToOutput(ctx context.Context) pulumix.Output[*TopicTypeParameters] {
	return pulumix.Output[*TopicTypeParameters]{
		OutputState: i.ToTopicTypeParametersPtrOutputWithContext(ctx).OutputState,
	}
}

type TopicTypeParametersOutput struct{ *pulumi.OutputState }

func (TopicTypeParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicTypeParameters)(nil)).Elem()
}

func (o TopicTypeParametersOutput) ToTopicTypeParametersOutput() TopicTypeParametersOutput {
	return o
}

func (o TopicTypeParametersOutput) ToTopicTypeParametersOutputWithContext(ctx context.Context) TopicTypeParametersOutput {
	return o
}

func (o TopicTypeParametersOutput) ToTopicTypeParametersPtrOutput() TopicTypeParametersPtrOutput {
	return o.ToTopicTypeParametersPtrOutputWithContext(context.Background())
}

func (o TopicTypeParametersOutput) ToTopicTypeParametersPtrOutputWithContext(ctx context.Context) TopicTypeParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicTypeParameters) *TopicTypeParameters {
		return &v
	}).(TopicTypeParametersPtrOutput)
}

func (o TopicTypeParametersOutput) ToOutput(ctx context.Context) pulumix.Output[TopicTypeParameters] {
	return pulumix.Output[TopicTypeParameters]{
		OutputState: o.OutputState,
	}
}

type TopicTypeParametersPtrOutput struct{ *pulumi.OutputState }

func (TopicTypeParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicTypeParameters)(nil)).Elem()
}

func (o TopicTypeParametersPtrOutput) ToTopicTypeParametersPtrOutput() TopicTypeParametersPtrOutput {
	return o
}

func (o TopicTypeParametersPtrOutput) ToTopicTypeParametersPtrOutputWithContext(ctx context.Context) TopicTypeParametersPtrOutput {
	return o
}

func (o TopicTypeParametersPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TopicTypeParameters] {
	return pulumix.Output[*TopicTypeParameters]{
		OutputState: o.OutputState,
	}
}

func (o TopicTypeParametersPtrOutput) Elem() TopicTypeParametersOutput {
	return o.ApplyT(func(v *TopicTypeParameters) TopicTypeParameters {
		if v != nil {
			return *v
		}
		var ret TopicTypeParameters
		return ret
	}).(TopicTypeParametersOutput)
}

type VpcConnectionNetworkInterface struct {
	AvailabilityZone   *string                              `pulumi:"availabilityZone"`
	ErrorMessage       *string                              `pulumi:"errorMessage"`
	NetworkInterfaceId *string                              `pulumi:"networkInterfaceId"`
	Status             *VpcConnectionNetworkInterfaceStatus `pulumi:"status"`
	SubnetId           *string                              `pulumi:"subnetId"`
}

type VpcConnectionNetworkInterfaceOutput struct{ *pulumi.OutputState }

func (VpcConnectionNetworkInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcConnectionNetworkInterface)(nil)).Elem()
}

func (o VpcConnectionNetworkInterfaceOutput) ToVpcConnectionNetworkInterfaceOutput() VpcConnectionNetworkInterfaceOutput {
	return o
}

func (o VpcConnectionNetworkInterfaceOutput) ToVpcConnectionNetworkInterfaceOutputWithContext(ctx context.Context) VpcConnectionNetworkInterfaceOutput {
	return o
}

func (o VpcConnectionNetworkInterfaceOutput) ToOutput(ctx context.Context) pulumix.Output[VpcConnectionNetworkInterface] {
	return pulumix.Output[VpcConnectionNetworkInterface]{
		OutputState: o.OutputState,
	}
}

func (o VpcConnectionNetworkInterfaceOutput) AvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcConnectionNetworkInterface) *string { return v.AvailabilityZone }).(pulumi.StringPtrOutput)
}

func (o VpcConnectionNetworkInterfaceOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcConnectionNetworkInterface) *string { return v.ErrorMessage }).(pulumi.StringPtrOutput)
}

func (o VpcConnectionNetworkInterfaceOutput) NetworkInterfaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcConnectionNetworkInterface) *string { return v.NetworkInterfaceId }).(pulumi.StringPtrOutput)
}

func (o VpcConnectionNetworkInterfaceOutput) Status() VpcConnectionNetworkInterfaceStatusPtrOutput {
	return o.ApplyT(func(v VpcConnectionNetworkInterface) *VpcConnectionNetworkInterfaceStatus { return v.Status }).(VpcConnectionNetworkInterfaceStatusPtrOutput)
}

func (o VpcConnectionNetworkInterfaceOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcConnectionNetworkInterface) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

type VpcConnectionNetworkInterfaceArrayOutput struct{ *pulumi.OutputState }

func (VpcConnectionNetworkInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpcConnectionNetworkInterface)(nil)).Elem()
}

func (o VpcConnectionNetworkInterfaceArrayOutput) ToVpcConnectionNetworkInterfaceArrayOutput() VpcConnectionNetworkInterfaceArrayOutput {
	return o
}

func (o VpcConnectionNetworkInterfaceArrayOutput) ToVpcConnectionNetworkInterfaceArrayOutputWithContext(ctx context.Context) VpcConnectionNetworkInterfaceArrayOutput {
	return o
}

func (o VpcConnectionNetworkInterfaceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]VpcConnectionNetworkInterface] {
	return pulumix.Output[[]VpcConnectionNetworkInterface]{
		OutputState: o.OutputState,
	}
}

func (o VpcConnectionNetworkInterfaceArrayOutput) Index(i pulumi.IntInput) VpcConnectionNetworkInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VpcConnectionNetworkInterface {
		return vs[0].([]VpcConnectionNetworkInterface)[vs[1].(int)]
	}).(VpcConnectionNetworkInterfaceOutput)
}

type VpcConnectionTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// VpcConnectionTagInput is an input type that accepts VpcConnectionTagArgs and VpcConnectionTagOutput values.
// You can construct a concrete instance of `VpcConnectionTagInput` via:
//
//	VpcConnectionTagArgs{...}
type VpcConnectionTagInput interface {
	pulumi.Input

	ToVpcConnectionTagOutput() VpcConnectionTagOutput
	ToVpcConnectionTagOutputWithContext(context.Context) VpcConnectionTagOutput
}

type VpcConnectionTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (VpcConnectionTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcConnectionTag)(nil)).Elem()
}

func (i VpcConnectionTagArgs) ToVpcConnectionTagOutput() VpcConnectionTagOutput {
	return i.ToVpcConnectionTagOutputWithContext(context.Background())
}

func (i VpcConnectionTagArgs) ToVpcConnectionTagOutputWithContext(ctx context.Context) VpcConnectionTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcConnectionTagOutput)
}

func (i VpcConnectionTagArgs) ToOutput(ctx context.Context) pulumix.Output[VpcConnectionTag] {
	return pulumix.Output[VpcConnectionTag]{
		OutputState: i.ToVpcConnectionTagOutputWithContext(ctx).OutputState,
	}
}

// VpcConnectionTagArrayInput is an input type that accepts VpcConnectionTagArray and VpcConnectionTagArrayOutput values.
// You can construct a concrete instance of `VpcConnectionTagArrayInput` via:
//
//	VpcConnectionTagArray{ VpcConnectionTagArgs{...} }
type VpcConnectionTagArrayInput interface {
	pulumi.Input

	ToVpcConnectionTagArrayOutput() VpcConnectionTagArrayOutput
	ToVpcConnectionTagArrayOutputWithContext(context.Context) VpcConnectionTagArrayOutput
}

type VpcConnectionTagArray []VpcConnectionTagInput

func (VpcConnectionTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpcConnectionTag)(nil)).Elem()
}

func (i VpcConnectionTagArray) ToVpcConnectionTagArrayOutput() VpcConnectionTagArrayOutput {
	return i.ToVpcConnectionTagArrayOutputWithContext(context.Background())
}

func (i VpcConnectionTagArray) ToVpcConnectionTagArrayOutputWithContext(ctx context.Context) VpcConnectionTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcConnectionTagArrayOutput)
}

func (i VpcConnectionTagArray) ToOutput(ctx context.Context) pulumix.Output[[]VpcConnectionTag] {
	return pulumix.Output[[]VpcConnectionTag]{
		OutputState: i.ToVpcConnectionTagArrayOutputWithContext(ctx).OutputState,
	}
}

type VpcConnectionTagOutput struct{ *pulumi.OutputState }

func (VpcConnectionTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcConnectionTag)(nil)).Elem()
}

func (o VpcConnectionTagOutput) ToVpcConnectionTagOutput() VpcConnectionTagOutput {
	return o
}

func (o VpcConnectionTagOutput) ToVpcConnectionTagOutputWithContext(ctx context.Context) VpcConnectionTagOutput {
	return o
}

func (o VpcConnectionTagOutput) ToOutput(ctx context.Context) pulumix.Output[VpcConnectionTag] {
	return pulumix.Output[VpcConnectionTag]{
		OutputState: o.OutputState,
	}
}

func (o VpcConnectionTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v VpcConnectionTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o VpcConnectionTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v VpcConnectionTag) string { return v.Value }).(pulumi.StringOutput)
}

type VpcConnectionTagArrayOutput struct{ *pulumi.OutputState }

func (VpcConnectionTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpcConnectionTag)(nil)).Elem()
}

func (o VpcConnectionTagArrayOutput) ToVpcConnectionTagArrayOutput() VpcConnectionTagArrayOutput {
	return o
}

func (o VpcConnectionTagArrayOutput) ToVpcConnectionTagArrayOutputWithContext(ctx context.Context) VpcConnectionTagArrayOutput {
	return o
}

func (o VpcConnectionTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]VpcConnectionTag] {
	return pulumix.Output[[]VpcConnectionTag]{
		OutputState: o.OutputState,
	}
}

func (o VpcConnectionTagArrayOutput) Index(i pulumi.IntInput) VpcConnectionTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VpcConnectionTag {
		return vs[0].([]VpcConnectionTag)[vs[1].(int)]
	}).(VpcConnectionTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TopicColumnInput)(nil)).Elem(), TopicColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicColumnArrayInput)(nil)).Elem(), TopicColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicComparativeOrderInput)(nil)).Elem(), TopicComparativeOrderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicComparativeOrderPtrInput)(nil)).Elem(), TopicComparativeOrderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicDataAggregationInput)(nil)).Elem(), TopicDataAggregationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicDataAggregationPtrInput)(nil)).Elem(), TopicDataAggregationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicDatasetMetadataInput)(nil)).Elem(), TopicDatasetMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicDatasetMetadataArrayInput)(nil)).Elem(), TopicDatasetMetadataArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicDateRangeFilterInput)(nil)).Elem(), TopicDateRangeFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicDateRangeFilterPtrInput)(nil)).Elem(), TopicDateRangeFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicDefaultFormattingInput)(nil)).Elem(), TopicDefaultFormattingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicDefaultFormattingPtrInput)(nil)).Elem(), TopicDefaultFormattingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicDisplayFormatOptionsInput)(nil)).Elem(), TopicDisplayFormatOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicDisplayFormatOptionsPtrInput)(nil)).Elem(), TopicDisplayFormatOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicFilterInput)(nil)).Elem(), TopicFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicFilterArrayInput)(nil)).Elem(), TopicFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicNamedEntityInput)(nil)).Elem(), TopicNamedEntityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicNamedEntityArrayInput)(nil)).Elem(), TopicNamedEntityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicNamedEntityDefinitionInput)(nil)).Elem(), TopicNamedEntityDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicNamedEntityDefinitionArrayInput)(nil)).Elem(), TopicNamedEntityDefinitionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicNamedEntityDefinitionMetricInput)(nil)).Elem(), TopicNamedEntityDefinitionMetricArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicNamedEntityDefinitionMetricPtrInput)(nil)).Elem(), TopicNamedEntityDefinitionMetricArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicNegativeFormatInput)(nil)).Elem(), TopicNegativeFormatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicNegativeFormatPtrInput)(nil)).Elem(), TopicNegativeFormatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicNumericEqualityFilterInput)(nil)).Elem(), TopicNumericEqualityFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicNumericEqualityFilterPtrInput)(nil)).Elem(), TopicNumericEqualityFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicNumericRangeFilterInput)(nil)).Elem(), TopicNumericRangeFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicNumericRangeFilterPtrInput)(nil)).Elem(), TopicNumericRangeFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicRangeConstantInput)(nil)).Elem(), TopicRangeConstantArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicRangeConstantPtrInput)(nil)).Elem(), TopicRangeConstantArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicRangeFilterConstantInput)(nil)).Elem(), TopicRangeFilterConstantArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicRangeFilterConstantPtrInput)(nil)).Elem(), TopicRangeFilterConstantArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicRelativeDateFilterInput)(nil)).Elem(), TopicRelativeDateFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicRelativeDateFilterPtrInput)(nil)).Elem(), TopicRelativeDateFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicSemanticEntityTypeInput)(nil)).Elem(), TopicSemanticEntityTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicSemanticEntityTypePtrInput)(nil)).Elem(), TopicSemanticEntityTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicSemanticTypeInput)(nil)).Elem(), TopicSemanticTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicSemanticTypePtrInput)(nil)).Elem(), TopicSemanticTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicSingularFilterConstantInput)(nil)).Elem(), TopicSingularFilterConstantArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicSingularFilterConstantPtrInput)(nil)).Elem(), TopicSingularFilterConstantArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicTypeParametersInput)(nil)).Elem(), TopicTypeParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicTypeParametersPtrInput)(nil)).Elem(), TopicTypeParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcConnectionTagInput)(nil)).Elem(), VpcConnectionTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcConnectionTagArrayInput)(nil)).Elem(), VpcConnectionTagArray{})
	pulumi.RegisterOutputType(TopicColumnOutput{})
	pulumi.RegisterOutputType(TopicColumnArrayOutput{})
	pulumi.RegisterOutputType(TopicComparativeOrderOutput{})
	pulumi.RegisterOutputType(TopicComparativeOrderPtrOutput{})
	pulumi.RegisterOutputType(TopicDataAggregationOutput{})
	pulumi.RegisterOutputType(TopicDataAggregationPtrOutput{})
	pulumi.RegisterOutputType(TopicDatasetMetadataOutput{})
	pulumi.RegisterOutputType(TopicDatasetMetadataArrayOutput{})
	pulumi.RegisterOutputType(TopicDateRangeFilterOutput{})
	pulumi.RegisterOutputType(TopicDateRangeFilterPtrOutput{})
	pulumi.RegisterOutputType(TopicDefaultFormattingOutput{})
	pulumi.RegisterOutputType(TopicDefaultFormattingPtrOutput{})
	pulumi.RegisterOutputType(TopicDisplayFormatOptionsOutput{})
	pulumi.RegisterOutputType(TopicDisplayFormatOptionsPtrOutput{})
	pulumi.RegisterOutputType(TopicFilterOutput{})
	pulumi.RegisterOutputType(TopicFilterArrayOutput{})
	pulumi.RegisterOutputType(TopicNamedEntityOutput{})
	pulumi.RegisterOutputType(TopicNamedEntityArrayOutput{})
	pulumi.RegisterOutputType(TopicNamedEntityDefinitionOutput{})
	pulumi.RegisterOutputType(TopicNamedEntityDefinitionArrayOutput{})
	pulumi.RegisterOutputType(TopicNamedEntityDefinitionMetricOutput{})
	pulumi.RegisterOutputType(TopicNamedEntityDefinitionMetricPtrOutput{})
	pulumi.RegisterOutputType(TopicNegativeFormatOutput{})
	pulumi.RegisterOutputType(TopicNegativeFormatPtrOutput{})
	pulumi.RegisterOutputType(TopicNumericEqualityFilterOutput{})
	pulumi.RegisterOutputType(TopicNumericEqualityFilterPtrOutput{})
	pulumi.RegisterOutputType(TopicNumericRangeFilterOutput{})
	pulumi.RegisterOutputType(TopicNumericRangeFilterPtrOutput{})
	pulumi.RegisterOutputType(TopicRangeConstantOutput{})
	pulumi.RegisterOutputType(TopicRangeConstantPtrOutput{})
	pulumi.RegisterOutputType(TopicRangeFilterConstantOutput{})
	pulumi.RegisterOutputType(TopicRangeFilterConstantPtrOutput{})
	pulumi.RegisterOutputType(TopicRelativeDateFilterOutput{})
	pulumi.RegisterOutputType(TopicRelativeDateFilterPtrOutput{})
	pulumi.RegisterOutputType(TopicSemanticEntityTypeOutput{})
	pulumi.RegisterOutputType(TopicSemanticEntityTypePtrOutput{})
	pulumi.RegisterOutputType(TopicSemanticTypeOutput{})
	pulumi.RegisterOutputType(TopicSemanticTypePtrOutput{})
	pulumi.RegisterOutputType(TopicSingularFilterConstantOutput{})
	pulumi.RegisterOutputType(TopicSingularFilterConstantPtrOutput{})
	pulumi.RegisterOutputType(TopicTypeParametersOutput{})
	pulumi.RegisterOutputType(TopicTypeParametersPtrOutput{})
	pulumi.RegisterOutputType(VpcConnectionNetworkInterfaceOutput{})
	pulumi.RegisterOutputType(VpcConnectionNetworkInterfaceArrayOutput{})
	pulumi.RegisterOutputType(VpcConnectionTagOutput{})
	pulumi.RegisterOutputType(VpcConnectionTagArrayOutput{})
}
