// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package quicksight

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type TemplateTableFieldOption struct {
	// The custom label for a table field.
	CustomLabel *string `pulumi:"customLabel"`
	// The field ID for a table field.
	FieldId string `pulumi:"fieldId"`
	// The URL configuration for a table field.
	UrlStyling *TemplateTableFieldUrlConfiguration `pulumi:"urlStyling"`
	// The visibility of a table field.
	Visibility *TemplateVisibility `pulumi:"visibility"`
	// String based length that is composed of value and unit in px
	Width *string `pulumi:"width"`
}

// TemplateTableFieldOptionInput is an input type that accepts TemplateTableFieldOptionArgs and TemplateTableFieldOptionOutput values.
// You can construct a concrete instance of `TemplateTableFieldOptionInput` via:
//
//	TemplateTableFieldOptionArgs{...}
type TemplateTableFieldOptionInput interface {
	pulumi.Input

	ToTemplateTableFieldOptionOutput() TemplateTableFieldOptionOutput
	ToTemplateTableFieldOptionOutputWithContext(context.Context) TemplateTableFieldOptionOutput
}

type TemplateTableFieldOptionArgs struct {
	// The custom label for a table field.
	CustomLabel pulumi.StringPtrInput `pulumi:"customLabel"`
	// The field ID for a table field.
	FieldId pulumi.StringInput `pulumi:"fieldId"`
	// The URL configuration for a table field.
	UrlStyling TemplateTableFieldUrlConfigurationPtrInput `pulumi:"urlStyling"`
	// The visibility of a table field.
	Visibility TemplateVisibilityPtrInput `pulumi:"visibility"`
	// String based length that is composed of value and unit in px
	Width pulumi.StringPtrInput `pulumi:"width"`
}

func (TemplateTableFieldOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableFieldOption)(nil)).Elem()
}

func (i TemplateTableFieldOptionArgs) ToTemplateTableFieldOptionOutput() TemplateTableFieldOptionOutput {
	return i.ToTemplateTableFieldOptionOutputWithContext(context.Background())
}

func (i TemplateTableFieldOptionArgs) ToTemplateTableFieldOptionOutputWithContext(ctx context.Context) TemplateTableFieldOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableFieldOptionOutput)
}

// TemplateTableFieldOptionArrayInput is an input type that accepts TemplateTableFieldOptionArray and TemplateTableFieldOptionArrayOutput values.
// You can construct a concrete instance of `TemplateTableFieldOptionArrayInput` via:
//
//	TemplateTableFieldOptionArray{ TemplateTableFieldOptionArgs{...} }
type TemplateTableFieldOptionArrayInput interface {
	pulumi.Input

	ToTemplateTableFieldOptionArrayOutput() TemplateTableFieldOptionArrayOutput
	ToTemplateTableFieldOptionArrayOutputWithContext(context.Context) TemplateTableFieldOptionArrayOutput
}

type TemplateTableFieldOptionArray []TemplateTableFieldOptionInput

func (TemplateTableFieldOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateTableFieldOption)(nil)).Elem()
}

func (i TemplateTableFieldOptionArray) ToTemplateTableFieldOptionArrayOutput() TemplateTableFieldOptionArrayOutput {
	return i.ToTemplateTableFieldOptionArrayOutputWithContext(context.Background())
}

func (i TemplateTableFieldOptionArray) ToTemplateTableFieldOptionArrayOutputWithContext(ctx context.Context) TemplateTableFieldOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableFieldOptionArrayOutput)
}

type TemplateTableFieldOptionOutput struct{ *pulumi.OutputState }

func (TemplateTableFieldOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableFieldOption)(nil)).Elem()
}

func (o TemplateTableFieldOptionOutput) ToTemplateTableFieldOptionOutput() TemplateTableFieldOptionOutput {
	return o
}

func (o TemplateTableFieldOptionOutput) ToTemplateTableFieldOptionOutputWithContext(ctx context.Context) TemplateTableFieldOptionOutput {
	return o
}

// The custom label for a table field.
func (o TemplateTableFieldOptionOutput) CustomLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateTableFieldOption) *string { return v.CustomLabel }).(pulumi.StringPtrOutput)
}

// The field ID for a table field.
func (o TemplateTableFieldOptionOutput) FieldId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateTableFieldOption) string { return v.FieldId }).(pulumi.StringOutput)
}

// The URL configuration for a table field.
func (o TemplateTableFieldOptionOutput) UrlStyling() TemplateTableFieldUrlConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateTableFieldOption) *TemplateTableFieldUrlConfiguration { return v.UrlStyling }).(TemplateTableFieldUrlConfigurationPtrOutput)
}

// The visibility of a table field.
func (o TemplateTableFieldOptionOutput) Visibility() TemplateVisibilityPtrOutput {
	return o.ApplyT(func(v TemplateTableFieldOption) *TemplateVisibility { return v.Visibility }).(TemplateVisibilityPtrOutput)
}

// String based length that is composed of value and unit in px
func (o TemplateTableFieldOptionOutput) Width() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateTableFieldOption) *string { return v.Width }).(pulumi.StringPtrOutput)
}

type TemplateTableFieldOptionArrayOutput struct{ *pulumi.OutputState }

func (TemplateTableFieldOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateTableFieldOption)(nil)).Elem()
}

func (o TemplateTableFieldOptionArrayOutput) ToTemplateTableFieldOptionArrayOutput() TemplateTableFieldOptionArrayOutput {
	return o
}

func (o TemplateTableFieldOptionArrayOutput) ToTemplateTableFieldOptionArrayOutputWithContext(ctx context.Context) TemplateTableFieldOptionArrayOutput {
	return o
}

func (o TemplateTableFieldOptionArrayOutput) Index(i pulumi.IntInput) TemplateTableFieldOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateTableFieldOption {
		return vs[0].([]TemplateTableFieldOption)[vs[1].(int)]
	}).(TemplateTableFieldOptionOutput)
}

type TemplateTableFieldOptions struct {
	// The order of the field IDs that are configured as field options for a table visual.
	Order []string `pulumi:"order"`
	// The settings for the pinned columns of a table visual.
	PinnedFieldOptions *TemplateTablePinnedFieldOptions `pulumi:"pinnedFieldOptions"`
	// The field options to be configured to a table.
	SelectedFieldOptions []TemplateTableFieldOption `pulumi:"selectedFieldOptions"`
}

// TemplateTableFieldOptionsInput is an input type that accepts TemplateTableFieldOptionsArgs and TemplateTableFieldOptionsOutput values.
// You can construct a concrete instance of `TemplateTableFieldOptionsInput` via:
//
//	TemplateTableFieldOptionsArgs{...}
type TemplateTableFieldOptionsInput interface {
	pulumi.Input

	ToTemplateTableFieldOptionsOutput() TemplateTableFieldOptionsOutput
	ToTemplateTableFieldOptionsOutputWithContext(context.Context) TemplateTableFieldOptionsOutput
}

type TemplateTableFieldOptionsArgs struct {
	// The order of the field IDs that are configured as field options for a table visual.
	Order pulumi.StringArrayInput `pulumi:"order"`
	// The settings for the pinned columns of a table visual.
	PinnedFieldOptions TemplateTablePinnedFieldOptionsPtrInput `pulumi:"pinnedFieldOptions"`
	// The field options to be configured to a table.
	SelectedFieldOptions TemplateTableFieldOptionArrayInput `pulumi:"selectedFieldOptions"`
}

func (TemplateTableFieldOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableFieldOptions)(nil)).Elem()
}

func (i TemplateTableFieldOptionsArgs) ToTemplateTableFieldOptionsOutput() TemplateTableFieldOptionsOutput {
	return i.ToTemplateTableFieldOptionsOutputWithContext(context.Background())
}

func (i TemplateTableFieldOptionsArgs) ToTemplateTableFieldOptionsOutputWithContext(ctx context.Context) TemplateTableFieldOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableFieldOptionsOutput)
}

func (i TemplateTableFieldOptionsArgs) ToTemplateTableFieldOptionsPtrOutput() TemplateTableFieldOptionsPtrOutput {
	return i.ToTemplateTableFieldOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateTableFieldOptionsArgs) ToTemplateTableFieldOptionsPtrOutputWithContext(ctx context.Context) TemplateTableFieldOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableFieldOptionsOutput).ToTemplateTableFieldOptionsPtrOutputWithContext(ctx)
}

// TemplateTableFieldOptionsPtrInput is an input type that accepts TemplateTableFieldOptionsArgs, TemplateTableFieldOptionsPtr and TemplateTableFieldOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateTableFieldOptionsPtrInput` via:
//
//	        TemplateTableFieldOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateTableFieldOptionsPtrInput interface {
	pulumi.Input

	ToTemplateTableFieldOptionsPtrOutput() TemplateTableFieldOptionsPtrOutput
	ToTemplateTableFieldOptionsPtrOutputWithContext(context.Context) TemplateTableFieldOptionsPtrOutput
}

type templateTableFieldOptionsPtrType TemplateTableFieldOptionsArgs

func TemplateTableFieldOptionsPtr(v *TemplateTableFieldOptionsArgs) TemplateTableFieldOptionsPtrInput {
	return (*templateTableFieldOptionsPtrType)(v)
}

func (*templateTableFieldOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableFieldOptions)(nil)).Elem()
}

func (i *templateTableFieldOptionsPtrType) ToTemplateTableFieldOptionsPtrOutput() TemplateTableFieldOptionsPtrOutput {
	return i.ToTemplateTableFieldOptionsPtrOutputWithContext(context.Background())
}

func (i *templateTableFieldOptionsPtrType) ToTemplateTableFieldOptionsPtrOutputWithContext(ctx context.Context) TemplateTableFieldOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableFieldOptionsPtrOutput)
}

type TemplateTableFieldOptionsOutput struct{ *pulumi.OutputState }

func (TemplateTableFieldOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableFieldOptions)(nil)).Elem()
}

func (o TemplateTableFieldOptionsOutput) ToTemplateTableFieldOptionsOutput() TemplateTableFieldOptionsOutput {
	return o
}

func (o TemplateTableFieldOptionsOutput) ToTemplateTableFieldOptionsOutputWithContext(ctx context.Context) TemplateTableFieldOptionsOutput {
	return o
}

func (o TemplateTableFieldOptionsOutput) ToTemplateTableFieldOptionsPtrOutput() TemplateTableFieldOptionsPtrOutput {
	return o.ToTemplateTableFieldOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateTableFieldOptionsOutput) ToTemplateTableFieldOptionsPtrOutputWithContext(ctx context.Context) TemplateTableFieldOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTableFieldOptions) *TemplateTableFieldOptions {
		return &v
	}).(TemplateTableFieldOptionsPtrOutput)
}

// The order of the field IDs that are configured as field options for a table visual.
func (o TemplateTableFieldOptionsOutput) Order() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TemplateTableFieldOptions) []string { return v.Order }).(pulumi.StringArrayOutput)
}

// The settings for the pinned columns of a table visual.
func (o TemplateTableFieldOptionsOutput) PinnedFieldOptions() TemplateTablePinnedFieldOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTableFieldOptions) *TemplateTablePinnedFieldOptions { return v.PinnedFieldOptions }).(TemplateTablePinnedFieldOptionsPtrOutput)
}

// The field options to be configured to a table.
func (o TemplateTableFieldOptionsOutput) SelectedFieldOptions() TemplateTableFieldOptionArrayOutput {
	return o.ApplyT(func(v TemplateTableFieldOptions) []TemplateTableFieldOption { return v.SelectedFieldOptions }).(TemplateTableFieldOptionArrayOutput)
}

type TemplateTableFieldOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateTableFieldOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableFieldOptions)(nil)).Elem()
}

func (o TemplateTableFieldOptionsPtrOutput) ToTemplateTableFieldOptionsPtrOutput() TemplateTableFieldOptionsPtrOutput {
	return o
}

func (o TemplateTableFieldOptionsPtrOutput) ToTemplateTableFieldOptionsPtrOutputWithContext(ctx context.Context) TemplateTableFieldOptionsPtrOutput {
	return o
}

func (o TemplateTableFieldOptionsPtrOutput) Elem() TemplateTableFieldOptionsOutput {
	return o.ApplyT(func(v *TemplateTableFieldOptions) TemplateTableFieldOptions {
		if v != nil {
			return *v
		}
		var ret TemplateTableFieldOptions
		return ret
	}).(TemplateTableFieldOptionsOutput)
}

// The order of the field IDs that are configured as field options for a table visual.
func (o TemplateTableFieldOptionsPtrOutput) Order() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TemplateTableFieldOptions) []string {
		if v == nil {
			return nil
		}
		return v.Order
	}).(pulumi.StringArrayOutput)
}

// The settings for the pinned columns of a table visual.
func (o TemplateTableFieldOptionsPtrOutput) PinnedFieldOptions() TemplateTablePinnedFieldOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTableFieldOptions) *TemplateTablePinnedFieldOptions {
		if v == nil {
			return nil
		}
		return v.PinnedFieldOptions
	}).(TemplateTablePinnedFieldOptionsPtrOutput)
}

// The field options to be configured to a table.
func (o TemplateTableFieldOptionsPtrOutput) SelectedFieldOptions() TemplateTableFieldOptionArrayOutput {
	return o.ApplyT(func(v *TemplateTableFieldOptions) []TemplateTableFieldOption {
		if v == nil {
			return nil
		}
		return v.SelectedFieldOptions
	}).(TemplateTableFieldOptionArrayOutput)
}

type TemplateTableFieldUrlConfiguration struct {
	// The image configuration of a table field URL.
	ImageConfiguration *TemplateTableFieldImageConfiguration `pulumi:"imageConfiguration"`
	// The link configuration of a table field URL.
	LinkConfiguration *TemplateTableFieldLinkConfiguration `pulumi:"linkConfiguration"`
}

// TemplateTableFieldUrlConfigurationInput is an input type that accepts TemplateTableFieldUrlConfigurationArgs and TemplateTableFieldUrlConfigurationOutput values.
// You can construct a concrete instance of `TemplateTableFieldUrlConfigurationInput` via:
//
//	TemplateTableFieldUrlConfigurationArgs{...}
type TemplateTableFieldUrlConfigurationInput interface {
	pulumi.Input

	ToTemplateTableFieldUrlConfigurationOutput() TemplateTableFieldUrlConfigurationOutput
	ToTemplateTableFieldUrlConfigurationOutputWithContext(context.Context) TemplateTableFieldUrlConfigurationOutput
}

type TemplateTableFieldUrlConfigurationArgs struct {
	// The image configuration of a table field URL.
	ImageConfiguration TemplateTableFieldImageConfigurationPtrInput `pulumi:"imageConfiguration"`
	// The link configuration of a table field URL.
	LinkConfiguration TemplateTableFieldLinkConfigurationPtrInput `pulumi:"linkConfiguration"`
}

func (TemplateTableFieldUrlConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableFieldUrlConfiguration)(nil)).Elem()
}

func (i TemplateTableFieldUrlConfigurationArgs) ToTemplateTableFieldUrlConfigurationOutput() TemplateTableFieldUrlConfigurationOutput {
	return i.ToTemplateTableFieldUrlConfigurationOutputWithContext(context.Background())
}

func (i TemplateTableFieldUrlConfigurationArgs) ToTemplateTableFieldUrlConfigurationOutputWithContext(ctx context.Context) TemplateTableFieldUrlConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableFieldUrlConfigurationOutput)
}

func (i TemplateTableFieldUrlConfigurationArgs) ToTemplateTableFieldUrlConfigurationPtrOutput() TemplateTableFieldUrlConfigurationPtrOutput {
	return i.ToTemplateTableFieldUrlConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateTableFieldUrlConfigurationArgs) ToTemplateTableFieldUrlConfigurationPtrOutputWithContext(ctx context.Context) TemplateTableFieldUrlConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableFieldUrlConfigurationOutput).ToTemplateTableFieldUrlConfigurationPtrOutputWithContext(ctx)
}

// TemplateTableFieldUrlConfigurationPtrInput is an input type that accepts TemplateTableFieldUrlConfigurationArgs, TemplateTableFieldUrlConfigurationPtr and TemplateTableFieldUrlConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateTableFieldUrlConfigurationPtrInput` via:
//
//	        TemplateTableFieldUrlConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateTableFieldUrlConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateTableFieldUrlConfigurationPtrOutput() TemplateTableFieldUrlConfigurationPtrOutput
	ToTemplateTableFieldUrlConfigurationPtrOutputWithContext(context.Context) TemplateTableFieldUrlConfigurationPtrOutput
}

type templateTableFieldUrlConfigurationPtrType TemplateTableFieldUrlConfigurationArgs

func TemplateTableFieldUrlConfigurationPtr(v *TemplateTableFieldUrlConfigurationArgs) TemplateTableFieldUrlConfigurationPtrInput {
	return (*templateTableFieldUrlConfigurationPtrType)(v)
}

func (*templateTableFieldUrlConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableFieldUrlConfiguration)(nil)).Elem()
}

func (i *templateTableFieldUrlConfigurationPtrType) ToTemplateTableFieldUrlConfigurationPtrOutput() TemplateTableFieldUrlConfigurationPtrOutput {
	return i.ToTemplateTableFieldUrlConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateTableFieldUrlConfigurationPtrType) ToTemplateTableFieldUrlConfigurationPtrOutputWithContext(ctx context.Context) TemplateTableFieldUrlConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableFieldUrlConfigurationPtrOutput)
}

type TemplateTableFieldUrlConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateTableFieldUrlConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableFieldUrlConfiguration)(nil)).Elem()
}

func (o TemplateTableFieldUrlConfigurationOutput) ToTemplateTableFieldUrlConfigurationOutput() TemplateTableFieldUrlConfigurationOutput {
	return o
}

func (o TemplateTableFieldUrlConfigurationOutput) ToTemplateTableFieldUrlConfigurationOutputWithContext(ctx context.Context) TemplateTableFieldUrlConfigurationOutput {
	return o
}

func (o TemplateTableFieldUrlConfigurationOutput) ToTemplateTableFieldUrlConfigurationPtrOutput() TemplateTableFieldUrlConfigurationPtrOutput {
	return o.ToTemplateTableFieldUrlConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateTableFieldUrlConfigurationOutput) ToTemplateTableFieldUrlConfigurationPtrOutputWithContext(ctx context.Context) TemplateTableFieldUrlConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTableFieldUrlConfiguration) *TemplateTableFieldUrlConfiguration {
		return &v
	}).(TemplateTableFieldUrlConfigurationPtrOutput)
}

// The image configuration of a table field URL.
func (o TemplateTableFieldUrlConfigurationOutput) ImageConfiguration() TemplateTableFieldImageConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateTableFieldUrlConfiguration) *TemplateTableFieldImageConfiguration {
		return v.ImageConfiguration
	}).(TemplateTableFieldImageConfigurationPtrOutput)
}

// The link configuration of a table field URL.
func (o TemplateTableFieldUrlConfigurationOutput) LinkConfiguration() TemplateTableFieldLinkConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateTableFieldUrlConfiguration) *TemplateTableFieldLinkConfiguration {
		return v.LinkConfiguration
	}).(TemplateTableFieldLinkConfigurationPtrOutput)
}

type TemplateTableFieldUrlConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateTableFieldUrlConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableFieldUrlConfiguration)(nil)).Elem()
}

func (o TemplateTableFieldUrlConfigurationPtrOutput) ToTemplateTableFieldUrlConfigurationPtrOutput() TemplateTableFieldUrlConfigurationPtrOutput {
	return o
}

func (o TemplateTableFieldUrlConfigurationPtrOutput) ToTemplateTableFieldUrlConfigurationPtrOutputWithContext(ctx context.Context) TemplateTableFieldUrlConfigurationPtrOutput {
	return o
}

func (o TemplateTableFieldUrlConfigurationPtrOutput) Elem() TemplateTableFieldUrlConfigurationOutput {
	return o.ApplyT(func(v *TemplateTableFieldUrlConfiguration) TemplateTableFieldUrlConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateTableFieldUrlConfiguration
		return ret
	}).(TemplateTableFieldUrlConfigurationOutput)
}

// The image configuration of a table field URL.
func (o TemplateTableFieldUrlConfigurationPtrOutput) ImageConfiguration() TemplateTableFieldImageConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateTableFieldUrlConfiguration) *TemplateTableFieldImageConfiguration {
		if v == nil {
			return nil
		}
		return v.ImageConfiguration
	}).(TemplateTableFieldImageConfigurationPtrOutput)
}

// The link configuration of a table field URL.
func (o TemplateTableFieldUrlConfigurationPtrOutput) LinkConfiguration() TemplateTableFieldLinkConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateTableFieldUrlConfiguration) *TemplateTableFieldLinkConfiguration {
		if v == nil {
			return nil
		}
		return v.LinkConfiguration
	}).(TemplateTableFieldLinkConfigurationPtrOutput)
}

type TemplateTableFieldWells struct {
	// The aggregated field well for the table.
	TableAggregatedFieldWells *TemplateTableAggregatedFieldWells `pulumi:"tableAggregatedFieldWells"`
	// The unaggregated field well for the table.
	TableUnaggregatedFieldWells *TemplateTableUnaggregatedFieldWells `pulumi:"tableUnaggregatedFieldWells"`
}

// TemplateTableFieldWellsInput is an input type that accepts TemplateTableFieldWellsArgs and TemplateTableFieldWellsOutput values.
// You can construct a concrete instance of `TemplateTableFieldWellsInput` via:
//
//	TemplateTableFieldWellsArgs{...}
type TemplateTableFieldWellsInput interface {
	pulumi.Input

	ToTemplateTableFieldWellsOutput() TemplateTableFieldWellsOutput
	ToTemplateTableFieldWellsOutputWithContext(context.Context) TemplateTableFieldWellsOutput
}

type TemplateTableFieldWellsArgs struct {
	// The aggregated field well for the table.
	TableAggregatedFieldWells TemplateTableAggregatedFieldWellsPtrInput `pulumi:"tableAggregatedFieldWells"`
	// The unaggregated field well for the table.
	TableUnaggregatedFieldWells TemplateTableUnaggregatedFieldWellsPtrInput `pulumi:"tableUnaggregatedFieldWells"`
}

func (TemplateTableFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableFieldWells)(nil)).Elem()
}

func (i TemplateTableFieldWellsArgs) ToTemplateTableFieldWellsOutput() TemplateTableFieldWellsOutput {
	return i.ToTemplateTableFieldWellsOutputWithContext(context.Background())
}

func (i TemplateTableFieldWellsArgs) ToTemplateTableFieldWellsOutputWithContext(ctx context.Context) TemplateTableFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableFieldWellsOutput)
}

func (i TemplateTableFieldWellsArgs) ToTemplateTableFieldWellsPtrOutput() TemplateTableFieldWellsPtrOutput {
	return i.ToTemplateTableFieldWellsPtrOutputWithContext(context.Background())
}

func (i TemplateTableFieldWellsArgs) ToTemplateTableFieldWellsPtrOutputWithContext(ctx context.Context) TemplateTableFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableFieldWellsOutput).ToTemplateTableFieldWellsPtrOutputWithContext(ctx)
}

// TemplateTableFieldWellsPtrInput is an input type that accepts TemplateTableFieldWellsArgs, TemplateTableFieldWellsPtr and TemplateTableFieldWellsPtrOutput values.
// You can construct a concrete instance of `TemplateTableFieldWellsPtrInput` via:
//
//	        TemplateTableFieldWellsArgs{...}
//
//	or:
//
//	        nil
type TemplateTableFieldWellsPtrInput interface {
	pulumi.Input

	ToTemplateTableFieldWellsPtrOutput() TemplateTableFieldWellsPtrOutput
	ToTemplateTableFieldWellsPtrOutputWithContext(context.Context) TemplateTableFieldWellsPtrOutput
}

type templateTableFieldWellsPtrType TemplateTableFieldWellsArgs

func TemplateTableFieldWellsPtr(v *TemplateTableFieldWellsArgs) TemplateTableFieldWellsPtrInput {
	return (*templateTableFieldWellsPtrType)(v)
}

func (*templateTableFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableFieldWells)(nil)).Elem()
}

func (i *templateTableFieldWellsPtrType) ToTemplateTableFieldWellsPtrOutput() TemplateTableFieldWellsPtrOutput {
	return i.ToTemplateTableFieldWellsPtrOutputWithContext(context.Background())
}

func (i *templateTableFieldWellsPtrType) ToTemplateTableFieldWellsPtrOutputWithContext(ctx context.Context) TemplateTableFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableFieldWellsPtrOutput)
}

type TemplateTableFieldWellsOutput struct{ *pulumi.OutputState }

func (TemplateTableFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableFieldWells)(nil)).Elem()
}

func (o TemplateTableFieldWellsOutput) ToTemplateTableFieldWellsOutput() TemplateTableFieldWellsOutput {
	return o
}

func (o TemplateTableFieldWellsOutput) ToTemplateTableFieldWellsOutputWithContext(ctx context.Context) TemplateTableFieldWellsOutput {
	return o
}

func (o TemplateTableFieldWellsOutput) ToTemplateTableFieldWellsPtrOutput() TemplateTableFieldWellsPtrOutput {
	return o.ToTemplateTableFieldWellsPtrOutputWithContext(context.Background())
}

func (o TemplateTableFieldWellsOutput) ToTemplateTableFieldWellsPtrOutputWithContext(ctx context.Context) TemplateTableFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTableFieldWells) *TemplateTableFieldWells {
		return &v
	}).(TemplateTableFieldWellsPtrOutput)
}

// The aggregated field well for the table.
func (o TemplateTableFieldWellsOutput) TableAggregatedFieldWells() TemplateTableAggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v TemplateTableFieldWells) *TemplateTableAggregatedFieldWells { return v.TableAggregatedFieldWells }).(TemplateTableAggregatedFieldWellsPtrOutput)
}

// The unaggregated field well for the table.
func (o TemplateTableFieldWellsOutput) TableUnaggregatedFieldWells() TemplateTableUnaggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v TemplateTableFieldWells) *TemplateTableUnaggregatedFieldWells {
		return v.TableUnaggregatedFieldWells
	}).(TemplateTableUnaggregatedFieldWellsPtrOutput)
}

type TemplateTableFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (TemplateTableFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableFieldWells)(nil)).Elem()
}

func (o TemplateTableFieldWellsPtrOutput) ToTemplateTableFieldWellsPtrOutput() TemplateTableFieldWellsPtrOutput {
	return o
}

func (o TemplateTableFieldWellsPtrOutput) ToTemplateTableFieldWellsPtrOutputWithContext(ctx context.Context) TemplateTableFieldWellsPtrOutput {
	return o
}

func (o TemplateTableFieldWellsPtrOutput) Elem() TemplateTableFieldWellsOutput {
	return o.ApplyT(func(v *TemplateTableFieldWells) TemplateTableFieldWells {
		if v != nil {
			return *v
		}
		var ret TemplateTableFieldWells
		return ret
	}).(TemplateTableFieldWellsOutput)
}

// The aggregated field well for the table.
func (o TemplateTableFieldWellsPtrOutput) TableAggregatedFieldWells() TemplateTableAggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v *TemplateTableFieldWells) *TemplateTableAggregatedFieldWells {
		if v == nil {
			return nil
		}
		return v.TableAggregatedFieldWells
	}).(TemplateTableAggregatedFieldWellsPtrOutput)
}

// The unaggregated field well for the table.
func (o TemplateTableFieldWellsPtrOutput) TableUnaggregatedFieldWells() TemplateTableUnaggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v *TemplateTableFieldWells) *TemplateTableUnaggregatedFieldWells {
		if v == nil {
			return nil
		}
		return v.TableUnaggregatedFieldWells
	}).(TemplateTableUnaggregatedFieldWellsPtrOutput)
}

type TemplateTableInlineVisualization struct {
	// The configuration of the inline visualization of the data bars within a chart.
	DataBars *TemplateDataBarsOptions `pulumi:"dataBars"`
}

// TemplateTableInlineVisualizationInput is an input type that accepts TemplateTableInlineVisualizationArgs and TemplateTableInlineVisualizationOutput values.
// You can construct a concrete instance of `TemplateTableInlineVisualizationInput` via:
//
//	TemplateTableInlineVisualizationArgs{...}
type TemplateTableInlineVisualizationInput interface {
	pulumi.Input

	ToTemplateTableInlineVisualizationOutput() TemplateTableInlineVisualizationOutput
	ToTemplateTableInlineVisualizationOutputWithContext(context.Context) TemplateTableInlineVisualizationOutput
}

type TemplateTableInlineVisualizationArgs struct {
	// The configuration of the inline visualization of the data bars within a chart.
	DataBars TemplateDataBarsOptionsPtrInput `pulumi:"dataBars"`
}

func (TemplateTableInlineVisualizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableInlineVisualization)(nil)).Elem()
}

func (i TemplateTableInlineVisualizationArgs) ToTemplateTableInlineVisualizationOutput() TemplateTableInlineVisualizationOutput {
	return i.ToTemplateTableInlineVisualizationOutputWithContext(context.Background())
}

func (i TemplateTableInlineVisualizationArgs) ToTemplateTableInlineVisualizationOutputWithContext(ctx context.Context) TemplateTableInlineVisualizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableInlineVisualizationOutput)
}

// TemplateTableInlineVisualizationArrayInput is an input type that accepts TemplateTableInlineVisualizationArray and TemplateTableInlineVisualizationArrayOutput values.
// You can construct a concrete instance of `TemplateTableInlineVisualizationArrayInput` via:
//
//	TemplateTableInlineVisualizationArray{ TemplateTableInlineVisualizationArgs{...} }
type TemplateTableInlineVisualizationArrayInput interface {
	pulumi.Input

	ToTemplateTableInlineVisualizationArrayOutput() TemplateTableInlineVisualizationArrayOutput
	ToTemplateTableInlineVisualizationArrayOutputWithContext(context.Context) TemplateTableInlineVisualizationArrayOutput
}

type TemplateTableInlineVisualizationArray []TemplateTableInlineVisualizationInput

func (TemplateTableInlineVisualizationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateTableInlineVisualization)(nil)).Elem()
}

func (i TemplateTableInlineVisualizationArray) ToTemplateTableInlineVisualizationArrayOutput() TemplateTableInlineVisualizationArrayOutput {
	return i.ToTemplateTableInlineVisualizationArrayOutputWithContext(context.Background())
}

func (i TemplateTableInlineVisualizationArray) ToTemplateTableInlineVisualizationArrayOutputWithContext(ctx context.Context) TemplateTableInlineVisualizationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableInlineVisualizationArrayOutput)
}

type TemplateTableInlineVisualizationOutput struct{ *pulumi.OutputState }

func (TemplateTableInlineVisualizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableInlineVisualization)(nil)).Elem()
}

func (o TemplateTableInlineVisualizationOutput) ToTemplateTableInlineVisualizationOutput() TemplateTableInlineVisualizationOutput {
	return o
}

func (o TemplateTableInlineVisualizationOutput) ToTemplateTableInlineVisualizationOutputWithContext(ctx context.Context) TemplateTableInlineVisualizationOutput {
	return o
}

// The configuration of the inline visualization of the data bars within a chart.
func (o TemplateTableInlineVisualizationOutput) DataBars() TemplateDataBarsOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTableInlineVisualization) *TemplateDataBarsOptions { return v.DataBars }).(TemplateDataBarsOptionsPtrOutput)
}

type TemplateTableInlineVisualizationArrayOutput struct{ *pulumi.OutputState }

func (TemplateTableInlineVisualizationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateTableInlineVisualization)(nil)).Elem()
}

func (o TemplateTableInlineVisualizationArrayOutput) ToTemplateTableInlineVisualizationArrayOutput() TemplateTableInlineVisualizationArrayOutput {
	return o
}

func (o TemplateTableInlineVisualizationArrayOutput) ToTemplateTableInlineVisualizationArrayOutputWithContext(ctx context.Context) TemplateTableInlineVisualizationArrayOutput {
	return o
}

func (o TemplateTableInlineVisualizationArrayOutput) Index(i pulumi.IntInput) TemplateTableInlineVisualizationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateTableInlineVisualization {
		return vs[0].([]TemplateTableInlineVisualization)[vs[1].(int)]
	}).(TemplateTableInlineVisualizationOutput)
}

type TemplateTableOptions struct {
	// The table cell style of table cells.
	CellStyle *TemplateTableCellStyle `pulumi:"cellStyle"`
	// The table cell style of a table header.
	HeaderStyle *TemplateTableCellStyle `pulumi:"headerStyle"`
	// The orientation (vertical, horizontal) for a table.
	Orientation *TemplateTableOrientation `pulumi:"orientation"`
	// The row alternate color options (widget status, row alternate colors) for a table.
	RowAlternateColorOptions *TemplateRowAlternateColorOptions `pulumi:"rowAlternateColorOptions"`
}

// TemplateTableOptionsInput is an input type that accepts TemplateTableOptionsArgs and TemplateTableOptionsOutput values.
// You can construct a concrete instance of `TemplateTableOptionsInput` via:
//
//	TemplateTableOptionsArgs{...}
type TemplateTableOptionsInput interface {
	pulumi.Input

	ToTemplateTableOptionsOutput() TemplateTableOptionsOutput
	ToTemplateTableOptionsOutputWithContext(context.Context) TemplateTableOptionsOutput
}

type TemplateTableOptionsArgs struct {
	// The table cell style of table cells.
	CellStyle TemplateTableCellStylePtrInput `pulumi:"cellStyle"`
	// The table cell style of a table header.
	HeaderStyle TemplateTableCellStylePtrInput `pulumi:"headerStyle"`
	// The orientation (vertical, horizontal) for a table.
	Orientation TemplateTableOrientationPtrInput `pulumi:"orientation"`
	// The row alternate color options (widget status, row alternate colors) for a table.
	RowAlternateColorOptions TemplateRowAlternateColorOptionsPtrInput `pulumi:"rowAlternateColorOptions"`
}

func (TemplateTableOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableOptions)(nil)).Elem()
}

func (i TemplateTableOptionsArgs) ToTemplateTableOptionsOutput() TemplateTableOptionsOutput {
	return i.ToTemplateTableOptionsOutputWithContext(context.Background())
}

func (i TemplateTableOptionsArgs) ToTemplateTableOptionsOutputWithContext(ctx context.Context) TemplateTableOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableOptionsOutput)
}

func (i TemplateTableOptionsArgs) ToTemplateTableOptionsPtrOutput() TemplateTableOptionsPtrOutput {
	return i.ToTemplateTableOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateTableOptionsArgs) ToTemplateTableOptionsPtrOutputWithContext(ctx context.Context) TemplateTableOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableOptionsOutput).ToTemplateTableOptionsPtrOutputWithContext(ctx)
}

// TemplateTableOptionsPtrInput is an input type that accepts TemplateTableOptionsArgs, TemplateTableOptionsPtr and TemplateTableOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateTableOptionsPtrInput` via:
//
//	        TemplateTableOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateTableOptionsPtrInput interface {
	pulumi.Input

	ToTemplateTableOptionsPtrOutput() TemplateTableOptionsPtrOutput
	ToTemplateTableOptionsPtrOutputWithContext(context.Context) TemplateTableOptionsPtrOutput
}

type templateTableOptionsPtrType TemplateTableOptionsArgs

func TemplateTableOptionsPtr(v *TemplateTableOptionsArgs) TemplateTableOptionsPtrInput {
	return (*templateTableOptionsPtrType)(v)
}

func (*templateTableOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableOptions)(nil)).Elem()
}

func (i *templateTableOptionsPtrType) ToTemplateTableOptionsPtrOutput() TemplateTableOptionsPtrOutput {
	return i.ToTemplateTableOptionsPtrOutputWithContext(context.Background())
}

func (i *templateTableOptionsPtrType) ToTemplateTableOptionsPtrOutputWithContext(ctx context.Context) TemplateTableOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableOptionsPtrOutput)
}

type TemplateTableOptionsOutput struct{ *pulumi.OutputState }

func (TemplateTableOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableOptions)(nil)).Elem()
}

func (o TemplateTableOptionsOutput) ToTemplateTableOptionsOutput() TemplateTableOptionsOutput {
	return o
}

func (o TemplateTableOptionsOutput) ToTemplateTableOptionsOutputWithContext(ctx context.Context) TemplateTableOptionsOutput {
	return o
}

func (o TemplateTableOptionsOutput) ToTemplateTableOptionsPtrOutput() TemplateTableOptionsPtrOutput {
	return o.ToTemplateTableOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateTableOptionsOutput) ToTemplateTableOptionsPtrOutputWithContext(ctx context.Context) TemplateTableOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTableOptions) *TemplateTableOptions {
		return &v
	}).(TemplateTableOptionsPtrOutput)
}

// The table cell style of table cells.
func (o TemplateTableOptionsOutput) CellStyle() TemplateTableCellStylePtrOutput {
	return o.ApplyT(func(v TemplateTableOptions) *TemplateTableCellStyle { return v.CellStyle }).(TemplateTableCellStylePtrOutput)
}

// The table cell style of a table header.
func (o TemplateTableOptionsOutput) HeaderStyle() TemplateTableCellStylePtrOutput {
	return o.ApplyT(func(v TemplateTableOptions) *TemplateTableCellStyle { return v.HeaderStyle }).(TemplateTableCellStylePtrOutput)
}

// The orientation (vertical, horizontal) for a table.
func (o TemplateTableOptionsOutput) Orientation() TemplateTableOrientationPtrOutput {
	return o.ApplyT(func(v TemplateTableOptions) *TemplateTableOrientation { return v.Orientation }).(TemplateTableOrientationPtrOutput)
}

// The row alternate color options (widget status, row alternate colors) for a table.
func (o TemplateTableOptionsOutput) RowAlternateColorOptions() TemplateRowAlternateColorOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTableOptions) *TemplateRowAlternateColorOptions { return v.RowAlternateColorOptions }).(TemplateRowAlternateColorOptionsPtrOutput)
}

type TemplateTableOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateTableOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableOptions)(nil)).Elem()
}

func (o TemplateTableOptionsPtrOutput) ToTemplateTableOptionsPtrOutput() TemplateTableOptionsPtrOutput {
	return o
}

func (o TemplateTableOptionsPtrOutput) ToTemplateTableOptionsPtrOutputWithContext(ctx context.Context) TemplateTableOptionsPtrOutput {
	return o
}

func (o TemplateTableOptionsPtrOutput) Elem() TemplateTableOptionsOutput {
	return o.ApplyT(func(v *TemplateTableOptions) TemplateTableOptions {
		if v != nil {
			return *v
		}
		var ret TemplateTableOptions
		return ret
	}).(TemplateTableOptionsOutput)
}

// The table cell style of table cells.
func (o TemplateTableOptionsPtrOutput) CellStyle() TemplateTableCellStylePtrOutput {
	return o.ApplyT(func(v *TemplateTableOptions) *TemplateTableCellStyle {
		if v == nil {
			return nil
		}
		return v.CellStyle
	}).(TemplateTableCellStylePtrOutput)
}

// The table cell style of a table header.
func (o TemplateTableOptionsPtrOutput) HeaderStyle() TemplateTableCellStylePtrOutput {
	return o.ApplyT(func(v *TemplateTableOptions) *TemplateTableCellStyle {
		if v == nil {
			return nil
		}
		return v.HeaderStyle
	}).(TemplateTableCellStylePtrOutput)
}

// The orientation (vertical, horizontal) for a table.
func (o TemplateTableOptionsPtrOutput) Orientation() TemplateTableOrientationPtrOutput {
	return o.ApplyT(func(v *TemplateTableOptions) *TemplateTableOrientation {
		if v == nil {
			return nil
		}
		return v.Orientation
	}).(TemplateTableOrientationPtrOutput)
}

// The row alternate color options (widget status, row alternate colors) for a table.
func (o TemplateTableOptionsPtrOutput) RowAlternateColorOptions() TemplateRowAlternateColorOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTableOptions) *TemplateRowAlternateColorOptions {
		if v == nil {
			return nil
		}
		return v.RowAlternateColorOptions
	}).(TemplateRowAlternateColorOptionsPtrOutput)
}

type TemplateTablePaginatedReportOptions struct {
	// The visibility of repeating header rows on each page.
	OverflowColumnHeaderVisibility *TemplateVisibility `pulumi:"overflowColumnHeaderVisibility"`
	// The visibility of printing table overflow across pages.
	VerticalOverflowVisibility *TemplateVisibility `pulumi:"verticalOverflowVisibility"`
}

// TemplateTablePaginatedReportOptionsInput is an input type that accepts TemplateTablePaginatedReportOptionsArgs and TemplateTablePaginatedReportOptionsOutput values.
// You can construct a concrete instance of `TemplateTablePaginatedReportOptionsInput` via:
//
//	TemplateTablePaginatedReportOptionsArgs{...}
type TemplateTablePaginatedReportOptionsInput interface {
	pulumi.Input

	ToTemplateTablePaginatedReportOptionsOutput() TemplateTablePaginatedReportOptionsOutput
	ToTemplateTablePaginatedReportOptionsOutputWithContext(context.Context) TemplateTablePaginatedReportOptionsOutput
}

type TemplateTablePaginatedReportOptionsArgs struct {
	// The visibility of repeating header rows on each page.
	OverflowColumnHeaderVisibility TemplateVisibilityPtrInput `pulumi:"overflowColumnHeaderVisibility"`
	// The visibility of printing table overflow across pages.
	VerticalOverflowVisibility TemplateVisibilityPtrInput `pulumi:"verticalOverflowVisibility"`
}

func (TemplateTablePaginatedReportOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTablePaginatedReportOptions)(nil)).Elem()
}

func (i TemplateTablePaginatedReportOptionsArgs) ToTemplateTablePaginatedReportOptionsOutput() TemplateTablePaginatedReportOptionsOutput {
	return i.ToTemplateTablePaginatedReportOptionsOutputWithContext(context.Background())
}

func (i TemplateTablePaginatedReportOptionsArgs) ToTemplateTablePaginatedReportOptionsOutputWithContext(ctx context.Context) TemplateTablePaginatedReportOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTablePaginatedReportOptionsOutput)
}

func (i TemplateTablePaginatedReportOptionsArgs) ToTemplateTablePaginatedReportOptionsPtrOutput() TemplateTablePaginatedReportOptionsPtrOutput {
	return i.ToTemplateTablePaginatedReportOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateTablePaginatedReportOptionsArgs) ToTemplateTablePaginatedReportOptionsPtrOutputWithContext(ctx context.Context) TemplateTablePaginatedReportOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTablePaginatedReportOptionsOutput).ToTemplateTablePaginatedReportOptionsPtrOutputWithContext(ctx)
}

// TemplateTablePaginatedReportOptionsPtrInput is an input type that accepts TemplateTablePaginatedReportOptionsArgs, TemplateTablePaginatedReportOptionsPtr and TemplateTablePaginatedReportOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateTablePaginatedReportOptionsPtrInput` via:
//
//	        TemplateTablePaginatedReportOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateTablePaginatedReportOptionsPtrInput interface {
	pulumi.Input

	ToTemplateTablePaginatedReportOptionsPtrOutput() TemplateTablePaginatedReportOptionsPtrOutput
	ToTemplateTablePaginatedReportOptionsPtrOutputWithContext(context.Context) TemplateTablePaginatedReportOptionsPtrOutput
}

type templateTablePaginatedReportOptionsPtrType TemplateTablePaginatedReportOptionsArgs

func TemplateTablePaginatedReportOptionsPtr(v *TemplateTablePaginatedReportOptionsArgs) TemplateTablePaginatedReportOptionsPtrInput {
	return (*templateTablePaginatedReportOptionsPtrType)(v)
}

func (*templateTablePaginatedReportOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTablePaginatedReportOptions)(nil)).Elem()
}

func (i *templateTablePaginatedReportOptionsPtrType) ToTemplateTablePaginatedReportOptionsPtrOutput() TemplateTablePaginatedReportOptionsPtrOutput {
	return i.ToTemplateTablePaginatedReportOptionsPtrOutputWithContext(context.Background())
}

func (i *templateTablePaginatedReportOptionsPtrType) ToTemplateTablePaginatedReportOptionsPtrOutputWithContext(ctx context.Context) TemplateTablePaginatedReportOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTablePaginatedReportOptionsPtrOutput)
}

type TemplateTablePaginatedReportOptionsOutput struct{ *pulumi.OutputState }

func (TemplateTablePaginatedReportOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTablePaginatedReportOptions)(nil)).Elem()
}

func (o TemplateTablePaginatedReportOptionsOutput) ToTemplateTablePaginatedReportOptionsOutput() TemplateTablePaginatedReportOptionsOutput {
	return o
}

func (o TemplateTablePaginatedReportOptionsOutput) ToTemplateTablePaginatedReportOptionsOutputWithContext(ctx context.Context) TemplateTablePaginatedReportOptionsOutput {
	return o
}

func (o TemplateTablePaginatedReportOptionsOutput) ToTemplateTablePaginatedReportOptionsPtrOutput() TemplateTablePaginatedReportOptionsPtrOutput {
	return o.ToTemplateTablePaginatedReportOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateTablePaginatedReportOptionsOutput) ToTemplateTablePaginatedReportOptionsPtrOutputWithContext(ctx context.Context) TemplateTablePaginatedReportOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTablePaginatedReportOptions) *TemplateTablePaginatedReportOptions {
		return &v
	}).(TemplateTablePaginatedReportOptionsPtrOutput)
}

// The visibility of repeating header rows on each page.
func (o TemplateTablePaginatedReportOptionsOutput) OverflowColumnHeaderVisibility() TemplateVisibilityPtrOutput {
	return o.ApplyT(func(v TemplateTablePaginatedReportOptions) *TemplateVisibility {
		return v.OverflowColumnHeaderVisibility
	}).(TemplateVisibilityPtrOutput)
}

// The visibility of printing table overflow across pages.
func (o TemplateTablePaginatedReportOptionsOutput) VerticalOverflowVisibility() TemplateVisibilityPtrOutput {
	return o.ApplyT(func(v TemplateTablePaginatedReportOptions) *TemplateVisibility { return v.VerticalOverflowVisibility }).(TemplateVisibilityPtrOutput)
}

type TemplateTablePaginatedReportOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateTablePaginatedReportOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTablePaginatedReportOptions)(nil)).Elem()
}

func (o TemplateTablePaginatedReportOptionsPtrOutput) ToTemplateTablePaginatedReportOptionsPtrOutput() TemplateTablePaginatedReportOptionsPtrOutput {
	return o
}

func (o TemplateTablePaginatedReportOptionsPtrOutput) ToTemplateTablePaginatedReportOptionsPtrOutputWithContext(ctx context.Context) TemplateTablePaginatedReportOptionsPtrOutput {
	return o
}

func (o TemplateTablePaginatedReportOptionsPtrOutput) Elem() TemplateTablePaginatedReportOptionsOutput {
	return o.ApplyT(func(v *TemplateTablePaginatedReportOptions) TemplateTablePaginatedReportOptions {
		if v != nil {
			return *v
		}
		var ret TemplateTablePaginatedReportOptions
		return ret
	}).(TemplateTablePaginatedReportOptionsOutput)
}

// The visibility of repeating header rows on each page.
func (o TemplateTablePaginatedReportOptionsPtrOutput) OverflowColumnHeaderVisibility() TemplateVisibilityPtrOutput {
	return o.ApplyT(func(v *TemplateTablePaginatedReportOptions) *TemplateVisibility {
		if v == nil {
			return nil
		}
		return v.OverflowColumnHeaderVisibility
	}).(TemplateVisibilityPtrOutput)
}

// The visibility of printing table overflow across pages.
func (o TemplateTablePaginatedReportOptionsPtrOutput) VerticalOverflowVisibility() TemplateVisibilityPtrOutput {
	return o.ApplyT(func(v *TemplateTablePaginatedReportOptions) *TemplateVisibility {
		if v == nil {
			return nil
		}
		return v.VerticalOverflowVisibility
	}).(TemplateVisibilityPtrOutput)
}

type TemplateTablePinnedFieldOptions struct {
	// A list of columns to be pinned to the left of a table visual.
	PinnedLeftFields []string `pulumi:"pinnedLeftFields"`
}

// TemplateTablePinnedFieldOptionsInput is an input type that accepts TemplateTablePinnedFieldOptionsArgs and TemplateTablePinnedFieldOptionsOutput values.
// You can construct a concrete instance of `TemplateTablePinnedFieldOptionsInput` via:
//
//	TemplateTablePinnedFieldOptionsArgs{...}
type TemplateTablePinnedFieldOptionsInput interface {
	pulumi.Input

	ToTemplateTablePinnedFieldOptionsOutput() TemplateTablePinnedFieldOptionsOutput
	ToTemplateTablePinnedFieldOptionsOutputWithContext(context.Context) TemplateTablePinnedFieldOptionsOutput
}

type TemplateTablePinnedFieldOptionsArgs struct {
	// A list of columns to be pinned to the left of a table visual.
	PinnedLeftFields pulumi.StringArrayInput `pulumi:"pinnedLeftFields"`
}

func (TemplateTablePinnedFieldOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTablePinnedFieldOptions)(nil)).Elem()
}

func (i TemplateTablePinnedFieldOptionsArgs) ToTemplateTablePinnedFieldOptionsOutput() TemplateTablePinnedFieldOptionsOutput {
	return i.ToTemplateTablePinnedFieldOptionsOutputWithContext(context.Background())
}

func (i TemplateTablePinnedFieldOptionsArgs) ToTemplateTablePinnedFieldOptionsOutputWithContext(ctx context.Context) TemplateTablePinnedFieldOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTablePinnedFieldOptionsOutput)
}

func (i TemplateTablePinnedFieldOptionsArgs) ToTemplateTablePinnedFieldOptionsPtrOutput() TemplateTablePinnedFieldOptionsPtrOutput {
	return i.ToTemplateTablePinnedFieldOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateTablePinnedFieldOptionsArgs) ToTemplateTablePinnedFieldOptionsPtrOutputWithContext(ctx context.Context) TemplateTablePinnedFieldOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTablePinnedFieldOptionsOutput).ToTemplateTablePinnedFieldOptionsPtrOutputWithContext(ctx)
}

// TemplateTablePinnedFieldOptionsPtrInput is an input type that accepts TemplateTablePinnedFieldOptionsArgs, TemplateTablePinnedFieldOptionsPtr and TemplateTablePinnedFieldOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateTablePinnedFieldOptionsPtrInput` via:
//
//	        TemplateTablePinnedFieldOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateTablePinnedFieldOptionsPtrInput interface {
	pulumi.Input

	ToTemplateTablePinnedFieldOptionsPtrOutput() TemplateTablePinnedFieldOptionsPtrOutput
	ToTemplateTablePinnedFieldOptionsPtrOutputWithContext(context.Context) TemplateTablePinnedFieldOptionsPtrOutput
}

type templateTablePinnedFieldOptionsPtrType TemplateTablePinnedFieldOptionsArgs

func TemplateTablePinnedFieldOptionsPtr(v *TemplateTablePinnedFieldOptionsArgs) TemplateTablePinnedFieldOptionsPtrInput {
	return (*templateTablePinnedFieldOptionsPtrType)(v)
}

func (*templateTablePinnedFieldOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTablePinnedFieldOptions)(nil)).Elem()
}

func (i *templateTablePinnedFieldOptionsPtrType) ToTemplateTablePinnedFieldOptionsPtrOutput() TemplateTablePinnedFieldOptionsPtrOutput {
	return i.ToTemplateTablePinnedFieldOptionsPtrOutputWithContext(context.Background())
}

func (i *templateTablePinnedFieldOptionsPtrType) ToTemplateTablePinnedFieldOptionsPtrOutputWithContext(ctx context.Context) TemplateTablePinnedFieldOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTablePinnedFieldOptionsPtrOutput)
}

type TemplateTablePinnedFieldOptionsOutput struct{ *pulumi.OutputState }

func (TemplateTablePinnedFieldOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTablePinnedFieldOptions)(nil)).Elem()
}

func (o TemplateTablePinnedFieldOptionsOutput) ToTemplateTablePinnedFieldOptionsOutput() TemplateTablePinnedFieldOptionsOutput {
	return o
}

func (o TemplateTablePinnedFieldOptionsOutput) ToTemplateTablePinnedFieldOptionsOutputWithContext(ctx context.Context) TemplateTablePinnedFieldOptionsOutput {
	return o
}

func (o TemplateTablePinnedFieldOptionsOutput) ToTemplateTablePinnedFieldOptionsPtrOutput() TemplateTablePinnedFieldOptionsPtrOutput {
	return o.ToTemplateTablePinnedFieldOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateTablePinnedFieldOptionsOutput) ToTemplateTablePinnedFieldOptionsPtrOutputWithContext(ctx context.Context) TemplateTablePinnedFieldOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTablePinnedFieldOptions) *TemplateTablePinnedFieldOptions {
		return &v
	}).(TemplateTablePinnedFieldOptionsPtrOutput)
}

// A list of columns to be pinned to the left of a table visual.
func (o TemplateTablePinnedFieldOptionsOutput) PinnedLeftFields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TemplateTablePinnedFieldOptions) []string { return v.PinnedLeftFields }).(pulumi.StringArrayOutput)
}

type TemplateTablePinnedFieldOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateTablePinnedFieldOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTablePinnedFieldOptions)(nil)).Elem()
}

func (o TemplateTablePinnedFieldOptionsPtrOutput) ToTemplateTablePinnedFieldOptionsPtrOutput() TemplateTablePinnedFieldOptionsPtrOutput {
	return o
}

func (o TemplateTablePinnedFieldOptionsPtrOutput) ToTemplateTablePinnedFieldOptionsPtrOutputWithContext(ctx context.Context) TemplateTablePinnedFieldOptionsPtrOutput {
	return o
}

func (o TemplateTablePinnedFieldOptionsPtrOutput) Elem() TemplateTablePinnedFieldOptionsOutput {
	return o.ApplyT(func(v *TemplateTablePinnedFieldOptions) TemplateTablePinnedFieldOptions {
		if v != nil {
			return *v
		}
		var ret TemplateTablePinnedFieldOptions
		return ret
	}).(TemplateTablePinnedFieldOptionsOutput)
}

// A list of columns to be pinned to the left of a table visual.
func (o TemplateTablePinnedFieldOptionsPtrOutput) PinnedLeftFields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TemplateTablePinnedFieldOptions) []string {
		if v == nil {
			return nil
		}
		return v.PinnedLeftFields
	}).(pulumi.StringArrayOutput)
}

type TemplateTableRowConditionalFormatting struct {
	// The conditional formatting color (solid, gradient) of the background for a table row.
	BackgroundColor *TemplateConditionalFormattingColor `pulumi:"backgroundColor"`
	// The conditional formatting color (solid, gradient) of the text for a table row.
	TextColor *TemplateConditionalFormattingColor `pulumi:"textColor"`
}

// TemplateTableRowConditionalFormattingInput is an input type that accepts TemplateTableRowConditionalFormattingArgs and TemplateTableRowConditionalFormattingOutput values.
// You can construct a concrete instance of `TemplateTableRowConditionalFormattingInput` via:
//
//	TemplateTableRowConditionalFormattingArgs{...}
type TemplateTableRowConditionalFormattingInput interface {
	pulumi.Input

	ToTemplateTableRowConditionalFormattingOutput() TemplateTableRowConditionalFormattingOutput
	ToTemplateTableRowConditionalFormattingOutputWithContext(context.Context) TemplateTableRowConditionalFormattingOutput
}

type TemplateTableRowConditionalFormattingArgs struct {
	// The conditional formatting color (solid, gradient) of the background for a table row.
	BackgroundColor TemplateConditionalFormattingColorPtrInput `pulumi:"backgroundColor"`
	// The conditional formatting color (solid, gradient) of the text for a table row.
	TextColor TemplateConditionalFormattingColorPtrInput `pulumi:"textColor"`
}

func (TemplateTableRowConditionalFormattingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableRowConditionalFormatting)(nil)).Elem()
}

func (i TemplateTableRowConditionalFormattingArgs) ToTemplateTableRowConditionalFormattingOutput() TemplateTableRowConditionalFormattingOutput {
	return i.ToTemplateTableRowConditionalFormattingOutputWithContext(context.Background())
}

func (i TemplateTableRowConditionalFormattingArgs) ToTemplateTableRowConditionalFormattingOutputWithContext(ctx context.Context) TemplateTableRowConditionalFormattingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableRowConditionalFormattingOutput)
}

func (i TemplateTableRowConditionalFormattingArgs) ToTemplateTableRowConditionalFormattingPtrOutput() TemplateTableRowConditionalFormattingPtrOutput {
	return i.ToTemplateTableRowConditionalFormattingPtrOutputWithContext(context.Background())
}

func (i TemplateTableRowConditionalFormattingArgs) ToTemplateTableRowConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplateTableRowConditionalFormattingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableRowConditionalFormattingOutput).ToTemplateTableRowConditionalFormattingPtrOutputWithContext(ctx)
}

// TemplateTableRowConditionalFormattingPtrInput is an input type that accepts TemplateTableRowConditionalFormattingArgs, TemplateTableRowConditionalFormattingPtr and TemplateTableRowConditionalFormattingPtrOutput values.
// You can construct a concrete instance of `TemplateTableRowConditionalFormattingPtrInput` via:
//
//	        TemplateTableRowConditionalFormattingArgs{...}
//
//	or:
//
//	        nil
type TemplateTableRowConditionalFormattingPtrInput interface {
	pulumi.Input

	ToTemplateTableRowConditionalFormattingPtrOutput() TemplateTableRowConditionalFormattingPtrOutput
	ToTemplateTableRowConditionalFormattingPtrOutputWithContext(context.Context) TemplateTableRowConditionalFormattingPtrOutput
}

type templateTableRowConditionalFormattingPtrType TemplateTableRowConditionalFormattingArgs

func TemplateTableRowConditionalFormattingPtr(v *TemplateTableRowConditionalFormattingArgs) TemplateTableRowConditionalFormattingPtrInput {
	return (*templateTableRowConditionalFormattingPtrType)(v)
}

func (*templateTableRowConditionalFormattingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableRowConditionalFormatting)(nil)).Elem()
}

func (i *templateTableRowConditionalFormattingPtrType) ToTemplateTableRowConditionalFormattingPtrOutput() TemplateTableRowConditionalFormattingPtrOutput {
	return i.ToTemplateTableRowConditionalFormattingPtrOutputWithContext(context.Background())
}

func (i *templateTableRowConditionalFormattingPtrType) ToTemplateTableRowConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplateTableRowConditionalFormattingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableRowConditionalFormattingPtrOutput)
}

type TemplateTableRowConditionalFormattingOutput struct{ *pulumi.OutputState }

func (TemplateTableRowConditionalFormattingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableRowConditionalFormatting)(nil)).Elem()
}

func (o TemplateTableRowConditionalFormattingOutput) ToTemplateTableRowConditionalFormattingOutput() TemplateTableRowConditionalFormattingOutput {
	return o
}

func (o TemplateTableRowConditionalFormattingOutput) ToTemplateTableRowConditionalFormattingOutputWithContext(ctx context.Context) TemplateTableRowConditionalFormattingOutput {
	return o
}

func (o TemplateTableRowConditionalFormattingOutput) ToTemplateTableRowConditionalFormattingPtrOutput() TemplateTableRowConditionalFormattingPtrOutput {
	return o.ToTemplateTableRowConditionalFormattingPtrOutputWithContext(context.Background())
}

func (o TemplateTableRowConditionalFormattingOutput) ToTemplateTableRowConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplateTableRowConditionalFormattingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTableRowConditionalFormatting) *TemplateTableRowConditionalFormatting {
		return &v
	}).(TemplateTableRowConditionalFormattingPtrOutput)
}

// The conditional formatting color (solid, gradient) of the background for a table row.
func (o TemplateTableRowConditionalFormattingOutput) BackgroundColor() TemplateConditionalFormattingColorPtrOutput {
	return o.ApplyT(func(v TemplateTableRowConditionalFormatting) *TemplateConditionalFormattingColor {
		return v.BackgroundColor
	}).(TemplateConditionalFormattingColorPtrOutput)
}

// The conditional formatting color (solid, gradient) of the text for a table row.
func (o TemplateTableRowConditionalFormattingOutput) TextColor() TemplateConditionalFormattingColorPtrOutput {
	return o.ApplyT(func(v TemplateTableRowConditionalFormatting) *TemplateConditionalFormattingColor { return v.TextColor }).(TemplateConditionalFormattingColorPtrOutput)
}

type TemplateTableRowConditionalFormattingPtrOutput struct{ *pulumi.OutputState }

func (TemplateTableRowConditionalFormattingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableRowConditionalFormatting)(nil)).Elem()
}

func (o TemplateTableRowConditionalFormattingPtrOutput) ToTemplateTableRowConditionalFormattingPtrOutput() TemplateTableRowConditionalFormattingPtrOutput {
	return o
}

func (o TemplateTableRowConditionalFormattingPtrOutput) ToTemplateTableRowConditionalFormattingPtrOutputWithContext(ctx context.Context) TemplateTableRowConditionalFormattingPtrOutput {
	return o
}

func (o TemplateTableRowConditionalFormattingPtrOutput) Elem() TemplateTableRowConditionalFormattingOutput {
	return o.ApplyT(func(v *TemplateTableRowConditionalFormatting) TemplateTableRowConditionalFormatting {
		if v != nil {
			return *v
		}
		var ret TemplateTableRowConditionalFormatting
		return ret
	}).(TemplateTableRowConditionalFormattingOutput)
}

// The conditional formatting color (solid, gradient) of the background for a table row.
func (o TemplateTableRowConditionalFormattingPtrOutput) BackgroundColor() TemplateConditionalFormattingColorPtrOutput {
	return o.ApplyT(func(v *TemplateTableRowConditionalFormatting) *TemplateConditionalFormattingColor {
		if v == nil {
			return nil
		}
		return v.BackgroundColor
	}).(TemplateConditionalFormattingColorPtrOutput)
}

// The conditional formatting color (solid, gradient) of the text for a table row.
func (o TemplateTableRowConditionalFormattingPtrOutput) TextColor() TemplateConditionalFormattingColorPtrOutput {
	return o.ApplyT(func(v *TemplateTableRowConditionalFormatting) *TemplateConditionalFormattingColor {
		if v == nil {
			return nil
		}
		return v.TextColor
	}).(TemplateConditionalFormattingColorPtrOutput)
}

type TemplateTableSideBorderOptions struct {
	// The table border options of the bottom border.
	Bottom *TemplateTableBorderOptions `pulumi:"bottom"`
	// The table border options of the inner horizontal border.
	InnerHorizontal *TemplateTableBorderOptions `pulumi:"innerHorizontal"`
	// The table border options of the inner vertical border.
	InnerVertical *TemplateTableBorderOptions `pulumi:"innerVertical"`
	// The table border options of the left border.
	Left *TemplateTableBorderOptions `pulumi:"left"`
	// The table border options of the right border.
	Right *TemplateTableBorderOptions `pulumi:"right"`
	// The table border options of the top border.
	Top *TemplateTableBorderOptions `pulumi:"top"`
}

// TemplateTableSideBorderOptionsInput is an input type that accepts TemplateTableSideBorderOptionsArgs and TemplateTableSideBorderOptionsOutput values.
// You can construct a concrete instance of `TemplateTableSideBorderOptionsInput` via:
//
//	TemplateTableSideBorderOptionsArgs{...}
type TemplateTableSideBorderOptionsInput interface {
	pulumi.Input

	ToTemplateTableSideBorderOptionsOutput() TemplateTableSideBorderOptionsOutput
	ToTemplateTableSideBorderOptionsOutputWithContext(context.Context) TemplateTableSideBorderOptionsOutput
}

type TemplateTableSideBorderOptionsArgs struct {
	// The table border options of the bottom border.
	Bottom TemplateTableBorderOptionsPtrInput `pulumi:"bottom"`
	// The table border options of the inner horizontal border.
	InnerHorizontal TemplateTableBorderOptionsPtrInput `pulumi:"innerHorizontal"`
	// The table border options of the inner vertical border.
	InnerVertical TemplateTableBorderOptionsPtrInput `pulumi:"innerVertical"`
	// The table border options of the left border.
	Left TemplateTableBorderOptionsPtrInput `pulumi:"left"`
	// The table border options of the right border.
	Right TemplateTableBorderOptionsPtrInput `pulumi:"right"`
	// The table border options of the top border.
	Top TemplateTableBorderOptionsPtrInput `pulumi:"top"`
}

func (TemplateTableSideBorderOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableSideBorderOptions)(nil)).Elem()
}

func (i TemplateTableSideBorderOptionsArgs) ToTemplateTableSideBorderOptionsOutput() TemplateTableSideBorderOptionsOutput {
	return i.ToTemplateTableSideBorderOptionsOutputWithContext(context.Background())
}

func (i TemplateTableSideBorderOptionsArgs) ToTemplateTableSideBorderOptionsOutputWithContext(ctx context.Context) TemplateTableSideBorderOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableSideBorderOptionsOutput)
}

func (i TemplateTableSideBorderOptionsArgs) ToTemplateTableSideBorderOptionsPtrOutput() TemplateTableSideBorderOptionsPtrOutput {
	return i.ToTemplateTableSideBorderOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateTableSideBorderOptionsArgs) ToTemplateTableSideBorderOptionsPtrOutputWithContext(ctx context.Context) TemplateTableSideBorderOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableSideBorderOptionsOutput).ToTemplateTableSideBorderOptionsPtrOutputWithContext(ctx)
}

// TemplateTableSideBorderOptionsPtrInput is an input type that accepts TemplateTableSideBorderOptionsArgs, TemplateTableSideBorderOptionsPtr and TemplateTableSideBorderOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateTableSideBorderOptionsPtrInput` via:
//
//	        TemplateTableSideBorderOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateTableSideBorderOptionsPtrInput interface {
	pulumi.Input

	ToTemplateTableSideBorderOptionsPtrOutput() TemplateTableSideBorderOptionsPtrOutput
	ToTemplateTableSideBorderOptionsPtrOutputWithContext(context.Context) TemplateTableSideBorderOptionsPtrOutput
}

type templateTableSideBorderOptionsPtrType TemplateTableSideBorderOptionsArgs

func TemplateTableSideBorderOptionsPtr(v *TemplateTableSideBorderOptionsArgs) TemplateTableSideBorderOptionsPtrInput {
	return (*templateTableSideBorderOptionsPtrType)(v)
}

func (*templateTableSideBorderOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableSideBorderOptions)(nil)).Elem()
}

func (i *templateTableSideBorderOptionsPtrType) ToTemplateTableSideBorderOptionsPtrOutput() TemplateTableSideBorderOptionsPtrOutput {
	return i.ToTemplateTableSideBorderOptionsPtrOutputWithContext(context.Background())
}

func (i *templateTableSideBorderOptionsPtrType) ToTemplateTableSideBorderOptionsPtrOutputWithContext(ctx context.Context) TemplateTableSideBorderOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableSideBorderOptionsPtrOutput)
}

type TemplateTableSideBorderOptionsOutput struct{ *pulumi.OutputState }

func (TemplateTableSideBorderOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableSideBorderOptions)(nil)).Elem()
}

func (o TemplateTableSideBorderOptionsOutput) ToTemplateTableSideBorderOptionsOutput() TemplateTableSideBorderOptionsOutput {
	return o
}

func (o TemplateTableSideBorderOptionsOutput) ToTemplateTableSideBorderOptionsOutputWithContext(ctx context.Context) TemplateTableSideBorderOptionsOutput {
	return o
}

func (o TemplateTableSideBorderOptionsOutput) ToTemplateTableSideBorderOptionsPtrOutput() TemplateTableSideBorderOptionsPtrOutput {
	return o.ToTemplateTableSideBorderOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateTableSideBorderOptionsOutput) ToTemplateTableSideBorderOptionsPtrOutputWithContext(ctx context.Context) TemplateTableSideBorderOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTableSideBorderOptions) *TemplateTableSideBorderOptions {
		return &v
	}).(TemplateTableSideBorderOptionsPtrOutput)
}

// The table border options of the bottom border.
func (o TemplateTableSideBorderOptionsOutput) Bottom() TemplateTableBorderOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTableSideBorderOptions) *TemplateTableBorderOptions { return v.Bottom }).(TemplateTableBorderOptionsPtrOutput)
}

// The table border options of the inner horizontal border.
func (o TemplateTableSideBorderOptionsOutput) InnerHorizontal() TemplateTableBorderOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTableSideBorderOptions) *TemplateTableBorderOptions { return v.InnerHorizontal }).(TemplateTableBorderOptionsPtrOutput)
}

// The table border options of the inner vertical border.
func (o TemplateTableSideBorderOptionsOutput) InnerVertical() TemplateTableBorderOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTableSideBorderOptions) *TemplateTableBorderOptions { return v.InnerVertical }).(TemplateTableBorderOptionsPtrOutput)
}

// The table border options of the left border.
func (o TemplateTableSideBorderOptionsOutput) Left() TemplateTableBorderOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTableSideBorderOptions) *TemplateTableBorderOptions { return v.Left }).(TemplateTableBorderOptionsPtrOutput)
}

// The table border options of the right border.
func (o TemplateTableSideBorderOptionsOutput) Right() TemplateTableBorderOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTableSideBorderOptions) *TemplateTableBorderOptions { return v.Right }).(TemplateTableBorderOptionsPtrOutput)
}

// The table border options of the top border.
func (o TemplateTableSideBorderOptionsOutput) Top() TemplateTableBorderOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTableSideBorderOptions) *TemplateTableBorderOptions { return v.Top }).(TemplateTableBorderOptionsPtrOutput)
}

type TemplateTableSideBorderOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateTableSideBorderOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableSideBorderOptions)(nil)).Elem()
}

func (o TemplateTableSideBorderOptionsPtrOutput) ToTemplateTableSideBorderOptionsPtrOutput() TemplateTableSideBorderOptionsPtrOutput {
	return o
}

func (o TemplateTableSideBorderOptionsPtrOutput) ToTemplateTableSideBorderOptionsPtrOutputWithContext(ctx context.Context) TemplateTableSideBorderOptionsPtrOutput {
	return o
}

func (o TemplateTableSideBorderOptionsPtrOutput) Elem() TemplateTableSideBorderOptionsOutput {
	return o.ApplyT(func(v *TemplateTableSideBorderOptions) TemplateTableSideBorderOptions {
		if v != nil {
			return *v
		}
		var ret TemplateTableSideBorderOptions
		return ret
	}).(TemplateTableSideBorderOptionsOutput)
}

// The table border options of the bottom border.
func (o TemplateTableSideBorderOptionsPtrOutput) Bottom() TemplateTableBorderOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTableSideBorderOptions) *TemplateTableBorderOptions {
		if v == nil {
			return nil
		}
		return v.Bottom
	}).(TemplateTableBorderOptionsPtrOutput)
}

// The table border options of the inner horizontal border.
func (o TemplateTableSideBorderOptionsPtrOutput) InnerHorizontal() TemplateTableBorderOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTableSideBorderOptions) *TemplateTableBorderOptions {
		if v == nil {
			return nil
		}
		return v.InnerHorizontal
	}).(TemplateTableBorderOptionsPtrOutput)
}

// The table border options of the inner vertical border.
func (o TemplateTableSideBorderOptionsPtrOutput) InnerVertical() TemplateTableBorderOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTableSideBorderOptions) *TemplateTableBorderOptions {
		if v == nil {
			return nil
		}
		return v.InnerVertical
	}).(TemplateTableBorderOptionsPtrOutput)
}

// The table border options of the left border.
func (o TemplateTableSideBorderOptionsPtrOutput) Left() TemplateTableBorderOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTableSideBorderOptions) *TemplateTableBorderOptions {
		if v == nil {
			return nil
		}
		return v.Left
	}).(TemplateTableBorderOptionsPtrOutput)
}

// The table border options of the right border.
func (o TemplateTableSideBorderOptionsPtrOutput) Right() TemplateTableBorderOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTableSideBorderOptions) *TemplateTableBorderOptions {
		if v == nil {
			return nil
		}
		return v.Right
	}).(TemplateTableBorderOptionsPtrOutput)
}

// The table border options of the top border.
func (o TemplateTableSideBorderOptionsPtrOutput) Top() TemplateTableBorderOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTableSideBorderOptions) *TemplateTableBorderOptions {
		if v == nil {
			return nil
		}
		return v.Top
	}).(TemplateTableBorderOptionsPtrOutput)
}

type TemplateTableSortConfiguration struct {
	// The pagination configuration (page size, page number) for the table.
	PaginationConfiguration *TemplatePaginationConfiguration `pulumi:"paginationConfiguration"`
	// The field sort options for rows in the table.
	RowSort []TemplateFieldSortOptions `pulumi:"rowSort"`
}

// TemplateTableSortConfigurationInput is an input type that accepts TemplateTableSortConfigurationArgs and TemplateTableSortConfigurationOutput values.
// You can construct a concrete instance of `TemplateTableSortConfigurationInput` via:
//
//	TemplateTableSortConfigurationArgs{...}
type TemplateTableSortConfigurationInput interface {
	pulumi.Input

	ToTemplateTableSortConfigurationOutput() TemplateTableSortConfigurationOutput
	ToTemplateTableSortConfigurationOutputWithContext(context.Context) TemplateTableSortConfigurationOutput
}

type TemplateTableSortConfigurationArgs struct {
	// The pagination configuration (page size, page number) for the table.
	PaginationConfiguration TemplatePaginationConfigurationPtrInput `pulumi:"paginationConfiguration"`
	// The field sort options for rows in the table.
	RowSort TemplateFieldSortOptionsArrayInput `pulumi:"rowSort"`
}

func (TemplateTableSortConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableSortConfiguration)(nil)).Elem()
}

func (i TemplateTableSortConfigurationArgs) ToTemplateTableSortConfigurationOutput() TemplateTableSortConfigurationOutput {
	return i.ToTemplateTableSortConfigurationOutputWithContext(context.Background())
}

func (i TemplateTableSortConfigurationArgs) ToTemplateTableSortConfigurationOutputWithContext(ctx context.Context) TemplateTableSortConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableSortConfigurationOutput)
}

func (i TemplateTableSortConfigurationArgs) ToTemplateTableSortConfigurationPtrOutput() TemplateTableSortConfigurationPtrOutput {
	return i.ToTemplateTableSortConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateTableSortConfigurationArgs) ToTemplateTableSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateTableSortConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableSortConfigurationOutput).ToTemplateTableSortConfigurationPtrOutputWithContext(ctx)
}

// TemplateTableSortConfigurationPtrInput is an input type that accepts TemplateTableSortConfigurationArgs, TemplateTableSortConfigurationPtr and TemplateTableSortConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateTableSortConfigurationPtrInput` via:
//
//	        TemplateTableSortConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateTableSortConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateTableSortConfigurationPtrOutput() TemplateTableSortConfigurationPtrOutput
	ToTemplateTableSortConfigurationPtrOutputWithContext(context.Context) TemplateTableSortConfigurationPtrOutput
}

type templateTableSortConfigurationPtrType TemplateTableSortConfigurationArgs

func TemplateTableSortConfigurationPtr(v *TemplateTableSortConfigurationArgs) TemplateTableSortConfigurationPtrInput {
	return (*templateTableSortConfigurationPtrType)(v)
}

func (*templateTableSortConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableSortConfiguration)(nil)).Elem()
}

func (i *templateTableSortConfigurationPtrType) ToTemplateTableSortConfigurationPtrOutput() TemplateTableSortConfigurationPtrOutput {
	return i.ToTemplateTableSortConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateTableSortConfigurationPtrType) ToTemplateTableSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateTableSortConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableSortConfigurationPtrOutput)
}

type TemplateTableSortConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateTableSortConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableSortConfiguration)(nil)).Elem()
}

func (o TemplateTableSortConfigurationOutput) ToTemplateTableSortConfigurationOutput() TemplateTableSortConfigurationOutput {
	return o
}

func (o TemplateTableSortConfigurationOutput) ToTemplateTableSortConfigurationOutputWithContext(ctx context.Context) TemplateTableSortConfigurationOutput {
	return o
}

func (o TemplateTableSortConfigurationOutput) ToTemplateTableSortConfigurationPtrOutput() TemplateTableSortConfigurationPtrOutput {
	return o.ToTemplateTableSortConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateTableSortConfigurationOutput) ToTemplateTableSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateTableSortConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTableSortConfiguration) *TemplateTableSortConfiguration {
		return &v
	}).(TemplateTableSortConfigurationPtrOutput)
}

// The pagination configuration (page size, page number) for the table.
func (o TemplateTableSortConfigurationOutput) PaginationConfiguration() TemplatePaginationConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateTableSortConfiguration) *TemplatePaginationConfiguration {
		return v.PaginationConfiguration
	}).(TemplatePaginationConfigurationPtrOutput)
}

// The field sort options for rows in the table.
func (o TemplateTableSortConfigurationOutput) RowSort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v TemplateTableSortConfiguration) []TemplateFieldSortOptions { return v.RowSort }).(TemplateFieldSortOptionsArrayOutput)
}

type TemplateTableSortConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateTableSortConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableSortConfiguration)(nil)).Elem()
}

func (o TemplateTableSortConfigurationPtrOutput) ToTemplateTableSortConfigurationPtrOutput() TemplateTableSortConfigurationPtrOutput {
	return o
}

func (o TemplateTableSortConfigurationPtrOutput) ToTemplateTableSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateTableSortConfigurationPtrOutput {
	return o
}

func (o TemplateTableSortConfigurationPtrOutput) Elem() TemplateTableSortConfigurationOutput {
	return o.ApplyT(func(v *TemplateTableSortConfiguration) TemplateTableSortConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateTableSortConfiguration
		return ret
	}).(TemplateTableSortConfigurationOutput)
}

// The pagination configuration (page size, page number) for the table.
func (o TemplateTableSortConfigurationPtrOutput) PaginationConfiguration() TemplatePaginationConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateTableSortConfiguration) *TemplatePaginationConfiguration {
		if v == nil {
			return nil
		}
		return v.PaginationConfiguration
	}).(TemplatePaginationConfigurationPtrOutput)
}

// The field sort options for rows in the table.
func (o TemplateTableSortConfigurationPtrOutput) RowSort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v *TemplateTableSortConfiguration) []TemplateFieldSortOptions {
		if v == nil {
			return nil
		}
		return v.RowSort
	}).(TemplateFieldSortOptionsArrayOutput)
}

type TemplateTableStyleTarget struct {
	// The cell type of the table style target.
	CellType TemplateStyledCellType `pulumi:"cellType"`
}

// TemplateTableStyleTargetInput is an input type that accepts TemplateTableStyleTargetArgs and TemplateTableStyleTargetOutput values.
// You can construct a concrete instance of `TemplateTableStyleTargetInput` via:
//
//	TemplateTableStyleTargetArgs{...}
type TemplateTableStyleTargetInput interface {
	pulumi.Input

	ToTemplateTableStyleTargetOutput() TemplateTableStyleTargetOutput
	ToTemplateTableStyleTargetOutputWithContext(context.Context) TemplateTableStyleTargetOutput
}

type TemplateTableStyleTargetArgs struct {
	// The cell type of the table style target.
	CellType TemplateStyledCellTypeInput `pulumi:"cellType"`
}

func (TemplateTableStyleTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableStyleTarget)(nil)).Elem()
}

func (i TemplateTableStyleTargetArgs) ToTemplateTableStyleTargetOutput() TemplateTableStyleTargetOutput {
	return i.ToTemplateTableStyleTargetOutputWithContext(context.Background())
}

func (i TemplateTableStyleTargetArgs) ToTemplateTableStyleTargetOutputWithContext(ctx context.Context) TemplateTableStyleTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableStyleTargetOutput)
}

// TemplateTableStyleTargetArrayInput is an input type that accepts TemplateTableStyleTargetArray and TemplateTableStyleTargetArrayOutput values.
// You can construct a concrete instance of `TemplateTableStyleTargetArrayInput` via:
//
//	TemplateTableStyleTargetArray{ TemplateTableStyleTargetArgs{...} }
type TemplateTableStyleTargetArrayInput interface {
	pulumi.Input

	ToTemplateTableStyleTargetArrayOutput() TemplateTableStyleTargetArrayOutput
	ToTemplateTableStyleTargetArrayOutputWithContext(context.Context) TemplateTableStyleTargetArrayOutput
}

type TemplateTableStyleTargetArray []TemplateTableStyleTargetInput

func (TemplateTableStyleTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateTableStyleTarget)(nil)).Elem()
}

func (i TemplateTableStyleTargetArray) ToTemplateTableStyleTargetArrayOutput() TemplateTableStyleTargetArrayOutput {
	return i.ToTemplateTableStyleTargetArrayOutputWithContext(context.Background())
}

func (i TemplateTableStyleTargetArray) ToTemplateTableStyleTargetArrayOutputWithContext(ctx context.Context) TemplateTableStyleTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableStyleTargetArrayOutput)
}

type TemplateTableStyleTargetOutput struct{ *pulumi.OutputState }

func (TemplateTableStyleTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableStyleTarget)(nil)).Elem()
}

func (o TemplateTableStyleTargetOutput) ToTemplateTableStyleTargetOutput() TemplateTableStyleTargetOutput {
	return o
}

func (o TemplateTableStyleTargetOutput) ToTemplateTableStyleTargetOutputWithContext(ctx context.Context) TemplateTableStyleTargetOutput {
	return o
}

// The cell type of the table style target.
func (o TemplateTableStyleTargetOutput) CellType() TemplateStyledCellTypeOutput {
	return o.ApplyT(func(v TemplateTableStyleTarget) TemplateStyledCellType { return v.CellType }).(TemplateStyledCellTypeOutput)
}

type TemplateTableStyleTargetArrayOutput struct{ *pulumi.OutputState }

func (TemplateTableStyleTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateTableStyleTarget)(nil)).Elem()
}

func (o TemplateTableStyleTargetArrayOutput) ToTemplateTableStyleTargetArrayOutput() TemplateTableStyleTargetArrayOutput {
	return o
}

func (o TemplateTableStyleTargetArrayOutput) ToTemplateTableStyleTargetArrayOutputWithContext(ctx context.Context) TemplateTableStyleTargetArrayOutput {
	return o
}

func (o TemplateTableStyleTargetArrayOutput) Index(i pulumi.IntInput) TemplateTableStyleTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateTableStyleTarget {
		return vs[0].([]TemplateTableStyleTarget)[vs[1].(int)]
	}).(TemplateTableStyleTargetOutput)
}

type TemplateTableUnaggregatedFieldWells struct {
	// The values field well for a pivot table. Values are unaggregated for an unaggregated table.
	Values []TemplateUnaggregatedField `pulumi:"values"`
}

// TemplateTableUnaggregatedFieldWellsInput is an input type that accepts TemplateTableUnaggregatedFieldWellsArgs and TemplateTableUnaggregatedFieldWellsOutput values.
// You can construct a concrete instance of `TemplateTableUnaggregatedFieldWellsInput` via:
//
//	TemplateTableUnaggregatedFieldWellsArgs{...}
type TemplateTableUnaggregatedFieldWellsInput interface {
	pulumi.Input

	ToTemplateTableUnaggregatedFieldWellsOutput() TemplateTableUnaggregatedFieldWellsOutput
	ToTemplateTableUnaggregatedFieldWellsOutputWithContext(context.Context) TemplateTableUnaggregatedFieldWellsOutput
}

type TemplateTableUnaggregatedFieldWellsArgs struct {
	// The values field well for a pivot table. Values are unaggregated for an unaggregated table.
	Values TemplateUnaggregatedFieldArrayInput `pulumi:"values"`
}

func (TemplateTableUnaggregatedFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableUnaggregatedFieldWells)(nil)).Elem()
}

func (i TemplateTableUnaggregatedFieldWellsArgs) ToTemplateTableUnaggregatedFieldWellsOutput() TemplateTableUnaggregatedFieldWellsOutput {
	return i.ToTemplateTableUnaggregatedFieldWellsOutputWithContext(context.Background())
}

func (i TemplateTableUnaggregatedFieldWellsArgs) ToTemplateTableUnaggregatedFieldWellsOutputWithContext(ctx context.Context) TemplateTableUnaggregatedFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableUnaggregatedFieldWellsOutput)
}

func (i TemplateTableUnaggregatedFieldWellsArgs) ToTemplateTableUnaggregatedFieldWellsPtrOutput() TemplateTableUnaggregatedFieldWellsPtrOutput {
	return i.ToTemplateTableUnaggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i TemplateTableUnaggregatedFieldWellsArgs) ToTemplateTableUnaggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateTableUnaggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableUnaggregatedFieldWellsOutput).ToTemplateTableUnaggregatedFieldWellsPtrOutputWithContext(ctx)
}

// TemplateTableUnaggregatedFieldWellsPtrInput is an input type that accepts TemplateTableUnaggregatedFieldWellsArgs, TemplateTableUnaggregatedFieldWellsPtr and TemplateTableUnaggregatedFieldWellsPtrOutput values.
// You can construct a concrete instance of `TemplateTableUnaggregatedFieldWellsPtrInput` via:
//
//	        TemplateTableUnaggregatedFieldWellsArgs{...}
//
//	or:
//
//	        nil
type TemplateTableUnaggregatedFieldWellsPtrInput interface {
	pulumi.Input

	ToTemplateTableUnaggregatedFieldWellsPtrOutput() TemplateTableUnaggregatedFieldWellsPtrOutput
	ToTemplateTableUnaggregatedFieldWellsPtrOutputWithContext(context.Context) TemplateTableUnaggregatedFieldWellsPtrOutput
}

type templateTableUnaggregatedFieldWellsPtrType TemplateTableUnaggregatedFieldWellsArgs

func TemplateTableUnaggregatedFieldWellsPtr(v *TemplateTableUnaggregatedFieldWellsArgs) TemplateTableUnaggregatedFieldWellsPtrInput {
	return (*templateTableUnaggregatedFieldWellsPtrType)(v)
}

func (*templateTableUnaggregatedFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableUnaggregatedFieldWells)(nil)).Elem()
}

func (i *templateTableUnaggregatedFieldWellsPtrType) ToTemplateTableUnaggregatedFieldWellsPtrOutput() TemplateTableUnaggregatedFieldWellsPtrOutput {
	return i.ToTemplateTableUnaggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i *templateTableUnaggregatedFieldWellsPtrType) ToTemplateTableUnaggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateTableUnaggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableUnaggregatedFieldWellsPtrOutput)
}

type TemplateTableUnaggregatedFieldWellsOutput struct{ *pulumi.OutputState }

func (TemplateTableUnaggregatedFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableUnaggregatedFieldWells)(nil)).Elem()
}

func (o TemplateTableUnaggregatedFieldWellsOutput) ToTemplateTableUnaggregatedFieldWellsOutput() TemplateTableUnaggregatedFieldWellsOutput {
	return o
}

func (o TemplateTableUnaggregatedFieldWellsOutput) ToTemplateTableUnaggregatedFieldWellsOutputWithContext(ctx context.Context) TemplateTableUnaggregatedFieldWellsOutput {
	return o
}

func (o TemplateTableUnaggregatedFieldWellsOutput) ToTemplateTableUnaggregatedFieldWellsPtrOutput() TemplateTableUnaggregatedFieldWellsPtrOutput {
	return o.ToTemplateTableUnaggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (o TemplateTableUnaggregatedFieldWellsOutput) ToTemplateTableUnaggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateTableUnaggregatedFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTableUnaggregatedFieldWells) *TemplateTableUnaggregatedFieldWells {
		return &v
	}).(TemplateTableUnaggregatedFieldWellsPtrOutput)
}

// The values field well for a pivot table. Values are unaggregated for an unaggregated table.
func (o TemplateTableUnaggregatedFieldWellsOutput) Values() TemplateUnaggregatedFieldArrayOutput {
	return o.ApplyT(func(v TemplateTableUnaggregatedFieldWells) []TemplateUnaggregatedField { return v.Values }).(TemplateUnaggregatedFieldArrayOutput)
}

type TemplateTableUnaggregatedFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (TemplateTableUnaggregatedFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableUnaggregatedFieldWells)(nil)).Elem()
}

func (o TemplateTableUnaggregatedFieldWellsPtrOutput) ToTemplateTableUnaggregatedFieldWellsPtrOutput() TemplateTableUnaggregatedFieldWellsPtrOutput {
	return o
}

func (o TemplateTableUnaggregatedFieldWellsPtrOutput) ToTemplateTableUnaggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateTableUnaggregatedFieldWellsPtrOutput {
	return o
}

func (o TemplateTableUnaggregatedFieldWellsPtrOutput) Elem() TemplateTableUnaggregatedFieldWellsOutput {
	return o.ApplyT(func(v *TemplateTableUnaggregatedFieldWells) TemplateTableUnaggregatedFieldWells {
		if v != nil {
			return *v
		}
		var ret TemplateTableUnaggregatedFieldWells
		return ret
	}).(TemplateTableUnaggregatedFieldWellsOutput)
}

// The values field well for a pivot table. Values are unaggregated for an unaggregated table.
func (o TemplateTableUnaggregatedFieldWellsPtrOutput) Values() TemplateUnaggregatedFieldArrayOutput {
	return o.ApplyT(func(v *TemplateTableUnaggregatedFieldWells) []TemplateUnaggregatedField {
		if v == nil {
			return nil
		}
		return v.Values
	}).(TemplateUnaggregatedFieldArrayOutput)
}

type TemplateTableVisual struct {
	// The list of custom actions that are configured for a visual.
	Actions []TemplateVisualCustomAction `pulumi:"actions"`
	// The configuration settings of the visual.
	ChartConfiguration *TemplateTableConfiguration `pulumi:"chartConfiguration"`
	// The conditional formatting for a `PivotTableVisual` .
	ConditionalFormatting *TemplateTableConditionalFormatting `pulumi:"conditionalFormatting"`
	// The subtitle that is displayed on the visual.
	Subtitle *TemplateVisualSubtitleLabelOptions `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title *TemplateVisualTitleLabelOptions `pulumi:"title"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
	VisualId string `pulumi:"visualId"`
}

// TemplateTableVisualInput is an input type that accepts TemplateTableVisualArgs and TemplateTableVisualOutput values.
// You can construct a concrete instance of `TemplateTableVisualInput` via:
//
//	TemplateTableVisualArgs{...}
type TemplateTableVisualInput interface {
	pulumi.Input

	ToTemplateTableVisualOutput() TemplateTableVisualOutput
	ToTemplateTableVisualOutputWithContext(context.Context) TemplateTableVisualOutput
}

type TemplateTableVisualArgs struct {
	// The list of custom actions that are configured for a visual.
	Actions TemplateVisualCustomActionArrayInput `pulumi:"actions"`
	// The configuration settings of the visual.
	ChartConfiguration TemplateTableConfigurationPtrInput `pulumi:"chartConfiguration"`
	// The conditional formatting for a `PivotTableVisual` .
	ConditionalFormatting TemplateTableConditionalFormattingPtrInput `pulumi:"conditionalFormatting"`
	// The subtitle that is displayed on the visual.
	Subtitle TemplateVisualSubtitleLabelOptionsPtrInput `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title TemplateVisualTitleLabelOptionsPtrInput `pulumi:"title"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
	VisualId pulumi.StringInput `pulumi:"visualId"`
}

func (TemplateTableVisualArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableVisual)(nil)).Elem()
}

func (i TemplateTableVisualArgs) ToTemplateTableVisualOutput() TemplateTableVisualOutput {
	return i.ToTemplateTableVisualOutputWithContext(context.Background())
}

func (i TemplateTableVisualArgs) ToTemplateTableVisualOutputWithContext(ctx context.Context) TemplateTableVisualOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableVisualOutput)
}

func (i TemplateTableVisualArgs) ToTemplateTableVisualPtrOutput() TemplateTableVisualPtrOutput {
	return i.ToTemplateTableVisualPtrOutputWithContext(context.Background())
}

func (i TemplateTableVisualArgs) ToTemplateTableVisualPtrOutputWithContext(ctx context.Context) TemplateTableVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableVisualOutput).ToTemplateTableVisualPtrOutputWithContext(ctx)
}

// TemplateTableVisualPtrInput is an input type that accepts TemplateTableVisualArgs, TemplateTableVisualPtr and TemplateTableVisualPtrOutput values.
// You can construct a concrete instance of `TemplateTableVisualPtrInput` via:
//
//	        TemplateTableVisualArgs{...}
//
//	or:
//
//	        nil
type TemplateTableVisualPtrInput interface {
	pulumi.Input

	ToTemplateTableVisualPtrOutput() TemplateTableVisualPtrOutput
	ToTemplateTableVisualPtrOutputWithContext(context.Context) TemplateTableVisualPtrOutput
}

type templateTableVisualPtrType TemplateTableVisualArgs

func TemplateTableVisualPtr(v *TemplateTableVisualArgs) TemplateTableVisualPtrInput {
	return (*templateTableVisualPtrType)(v)
}

func (*templateTableVisualPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableVisual)(nil)).Elem()
}

func (i *templateTableVisualPtrType) ToTemplateTableVisualPtrOutput() TemplateTableVisualPtrOutput {
	return i.ToTemplateTableVisualPtrOutputWithContext(context.Background())
}

func (i *templateTableVisualPtrType) ToTemplateTableVisualPtrOutputWithContext(ctx context.Context) TemplateTableVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTableVisualPtrOutput)
}

type TemplateTableVisualOutput struct{ *pulumi.OutputState }

func (TemplateTableVisualOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTableVisual)(nil)).Elem()
}

func (o TemplateTableVisualOutput) ToTemplateTableVisualOutput() TemplateTableVisualOutput {
	return o
}

func (o TemplateTableVisualOutput) ToTemplateTableVisualOutputWithContext(ctx context.Context) TemplateTableVisualOutput {
	return o
}

func (o TemplateTableVisualOutput) ToTemplateTableVisualPtrOutput() TemplateTableVisualPtrOutput {
	return o.ToTemplateTableVisualPtrOutputWithContext(context.Background())
}

func (o TemplateTableVisualOutput) ToTemplateTableVisualPtrOutputWithContext(ctx context.Context) TemplateTableVisualPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTableVisual) *TemplateTableVisual {
		return &v
	}).(TemplateTableVisualPtrOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplateTableVisualOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v TemplateTableVisual) []TemplateVisualCustomAction { return v.Actions }).(TemplateVisualCustomActionArrayOutput)
}

// The configuration settings of the visual.
func (o TemplateTableVisualOutput) ChartConfiguration() TemplateTableConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateTableVisual) *TemplateTableConfiguration { return v.ChartConfiguration }).(TemplateTableConfigurationPtrOutput)
}

// The conditional formatting for a `PivotTableVisual` .
func (o TemplateTableVisualOutput) ConditionalFormatting() TemplateTableConditionalFormattingPtrOutput {
	return o.ApplyT(func(v TemplateTableVisual) *TemplateTableConditionalFormatting { return v.ConditionalFormatting }).(TemplateTableConditionalFormattingPtrOutput)
}

// The subtitle that is displayed on the visual.
func (o TemplateTableVisualOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTableVisual) *TemplateVisualSubtitleLabelOptions { return v.Subtitle }).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o TemplateTableVisualOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTableVisual) *TemplateVisualTitleLabelOptions { return v.Title }).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
func (o TemplateTableVisualOutput) VisualId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateTableVisual) string { return v.VisualId }).(pulumi.StringOutput)
}

type TemplateTableVisualPtrOutput struct{ *pulumi.OutputState }

func (TemplateTableVisualPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTableVisual)(nil)).Elem()
}

func (o TemplateTableVisualPtrOutput) ToTemplateTableVisualPtrOutput() TemplateTableVisualPtrOutput {
	return o
}

func (o TemplateTableVisualPtrOutput) ToTemplateTableVisualPtrOutputWithContext(ctx context.Context) TemplateTableVisualPtrOutput {
	return o
}

func (o TemplateTableVisualPtrOutput) Elem() TemplateTableVisualOutput {
	return o.ApplyT(func(v *TemplateTableVisual) TemplateTableVisual {
		if v != nil {
			return *v
		}
		var ret TemplateTableVisual
		return ret
	}).(TemplateTableVisualOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplateTableVisualPtrOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v *TemplateTableVisual) []TemplateVisualCustomAction {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(TemplateVisualCustomActionArrayOutput)
}

// The configuration settings of the visual.
func (o TemplateTableVisualPtrOutput) ChartConfiguration() TemplateTableConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateTableVisual) *TemplateTableConfiguration {
		if v == nil {
			return nil
		}
		return v.ChartConfiguration
	}).(TemplateTableConfigurationPtrOutput)
}

// The conditional formatting for a `PivotTableVisual` .
func (o TemplateTableVisualPtrOutput) ConditionalFormatting() TemplateTableConditionalFormattingPtrOutput {
	return o.ApplyT(func(v *TemplateTableVisual) *TemplateTableConditionalFormatting {
		if v == nil {
			return nil
		}
		return v.ConditionalFormatting
	}).(TemplateTableConditionalFormattingPtrOutput)
}

// The subtitle that is displayed on the visual.
func (o TemplateTableVisualPtrOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTableVisual) *TemplateVisualSubtitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Subtitle
	}).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o TemplateTableVisualPtrOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTableVisual) *TemplateVisualTitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Title
	}).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
func (o TemplateTableVisualPtrOutput) VisualId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateTableVisual) *string {
		if v == nil {
			return nil
		}
		return &v.VisualId
	}).(pulumi.StringPtrOutput)
}

// <p>The key or keys of the key-value pairs for the resource tag or tags assigned to the
//
//	resource.</p>
type TemplateTag struct {
	// <p>Tag key.</p>
	Key string `pulumi:"key"`
	// <p>Tag value.</p>
	Value string `pulumi:"value"`
}

type TemplateTextAreaControlDisplayOptions struct {
	// The configuration of info icon label options.
	InfoIconLabelOptions *TemplateSheetControlInfoIconLabelOptions `pulumi:"infoIconLabelOptions"`
	// The configuration of the placeholder options in a text area control.
	PlaceholderOptions *TemplateTextControlPlaceholderOptions `pulumi:"placeholderOptions"`
	// The options to configure the title visibility, name, and font size.
	TitleOptions *TemplateLabelOptions `pulumi:"titleOptions"`
}

// TemplateTextAreaControlDisplayOptionsInput is an input type that accepts TemplateTextAreaControlDisplayOptionsArgs and TemplateTextAreaControlDisplayOptionsOutput values.
// You can construct a concrete instance of `TemplateTextAreaControlDisplayOptionsInput` via:
//
//	TemplateTextAreaControlDisplayOptionsArgs{...}
type TemplateTextAreaControlDisplayOptionsInput interface {
	pulumi.Input

	ToTemplateTextAreaControlDisplayOptionsOutput() TemplateTextAreaControlDisplayOptionsOutput
	ToTemplateTextAreaControlDisplayOptionsOutputWithContext(context.Context) TemplateTextAreaControlDisplayOptionsOutput
}

type TemplateTextAreaControlDisplayOptionsArgs struct {
	// The configuration of info icon label options.
	InfoIconLabelOptions TemplateSheetControlInfoIconLabelOptionsPtrInput `pulumi:"infoIconLabelOptions"`
	// The configuration of the placeholder options in a text area control.
	PlaceholderOptions TemplateTextControlPlaceholderOptionsPtrInput `pulumi:"placeholderOptions"`
	// The options to configure the title visibility, name, and font size.
	TitleOptions TemplateLabelOptionsPtrInput `pulumi:"titleOptions"`
}

func (TemplateTextAreaControlDisplayOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTextAreaControlDisplayOptions)(nil)).Elem()
}

func (i TemplateTextAreaControlDisplayOptionsArgs) ToTemplateTextAreaControlDisplayOptionsOutput() TemplateTextAreaControlDisplayOptionsOutput {
	return i.ToTemplateTextAreaControlDisplayOptionsOutputWithContext(context.Background())
}

func (i TemplateTextAreaControlDisplayOptionsArgs) ToTemplateTextAreaControlDisplayOptionsOutputWithContext(ctx context.Context) TemplateTextAreaControlDisplayOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTextAreaControlDisplayOptionsOutput)
}

func (i TemplateTextAreaControlDisplayOptionsArgs) ToTemplateTextAreaControlDisplayOptionsPtrOutput() TemplateTextAreaControlDisplayOptionsPtrOutput {
	return i.ToTemplateTextAreaControlDisplayOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateTextAreaControlDisplayOptionsArgs) ToTemplateTextAreaControlDisplayOptionsPtrOutputWithContext(ctx context.Context) TemplateTextAreaControlDisplayOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTextAreaControlDisplayOptionsOutput).ToTemplateTextAreaControlDisplayOptionsPtrOutputWithContext(ctx)
}

// TemplateTextAreaControlDisplayOptionsPtrInput is an input type that accepts TemplateTextAreaControlDisplayOptionsArgs, TemplateTextAreaControlDisplayOptionsPtr and TemplateTextAreaControlDisplayOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateTextAreaControlDisplayOptionsPtrInput` via:
//
//	        TemplateTextAreaControlDisplayOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateTextAreaControlDisplayOptionsPtrInput interface {
	pulumi.Input

	ToTemplateTextAreaControlDisplayOptionsPtrOutput() TemplateTextAreaControlDisplayOptionsPtrOutput
	ToTemplateTextAreaControlDisplayOptionsPtrOutputWithContext(context.Context) TemplateTextAreaControlDisplayOptionsPtrOutput
}

type templateTextAreaControlDisplayOptionsPtrType TemplateTextAreaControlDisplayOptionsArgs

func TemplateTextAreaControlDisplayOptionsPtr(v *TemplateTextAreaControlDisplayOptionsArgs) TemplateTextAreaControlDisplayOptionsPtrInput {
	return (*templateTextAreaControlDisplayOptionsPtrType)(v)
}

func (*templateTextAreaControlDisplayOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTextAreaControlDisplayOptions)(nil)).Elem()
}

func (i *templateTextAreaControlDisplayOptionsPtrType) ToTemplateTextAreaControlDisplayOptionsPtrOutput() TemplateTextAreaControlDisplayOptionsPtrOutput {
	return i.ToTemplateTextAreaControlDisplayOptionsPtrOutputWithContext(context.Background())
}

func (i *templateTextAreaControlDisplayOptionsPtrType) ToTemplateTextAreaControlDisplayOptionsPtrOutputWithContext(ctx context.Context) TemplateTextAreaControlDisplayOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTextAreaControlDisplayOptionsPtrOutput)
}

type TemplateTextAreaControlDisplayOptionsOutput struct{ *pulumi.OutputState }

func (TemplateTextAreaControlDisplayOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTextAreaControlDisplayOptions)(nil)).Elem()
}

func (o TemplateTextAreaControlDisplayOptionsOutput) ToTemplateTextAreaControlDisplayOptionsOutput() TemplateTextAreaControlDisplayOptionsOutput {
	return o
}

func (o TemplateTextAreaControlDisplayOptionsOutput) ToTemplateTextAreaControlDisplayOptionsOutputWithContext(ctx context.Context) TemplateTextAreaControlDisplayOptionsOutput {
	return o
}

func (o TemplateTextAreaControlDisplayOptionsOutput) ToTemplateTextAreaControlDisplayOptionsPtrOutput() TemplateTextAreaControlDisplayOptionsPtrOutput {
	return o.ToTemplateTextAreaControlDisplayOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateTextAreaControlDisplayOptionsOutput) ToTemplateTextAreaControlDisplayOptionsPtrOutputWithContext(ctx context.Context) TemplateTextAreaControlDisplayOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTextAreaControlDisplayOptions) *TemplateTextAreaControlDisplayOptions {
		return &v
	}).(TemplateTextAreaControlDisplayOptionsPtrOutput)
}

// The configuration of info icon label options.
func (o TemplateTextAreaControlDisplayOptionsOutput) InfoIconLabelOptions() TemplateSheetControlInfoIconLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTextAreaControlDisplayOptions) *TemplateSheetControlInfoIconLabelOptions {
		return v.InfoIconLabelOptions
	}).(TemplateSheetControlInfoIconLabelOptionsPtrOutput)
}

// The configuration of the placeholder options in a text area control.
func (o TemplateTextAreaControlDisplayOptionsOutput) PlaceholderOptions() TemplateTextControlPlaceholderOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTextAreaControlDisplayOptions) *TemplateTextControlPlaceholderOptions {
		return v.PlaceholderOptions
	}).(TemplateTextControlPlaceholderOptionsPtrOutput)
}

// The options to configure the title visibility, name, and font size.
func (o TemplateTextAreaControlDisplayOptionsOutput) TitleOptions() TemplateLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTextAreaControlDisplayOptions) *TemplateLabelOptions { return v.TitleOptions }).(TemplateLabelOptionsPtrOutput)
}

type TemplateTextAreaControlDisplayOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateTextAreaControlDisplayOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTextAreaControlDisplayOptions)(nil)).Elem()
}

func (o TemplateTextAreaControlDisplayOptionsPtrOutput) ToTemplateTextAreaControlDisplayOptionsPtrOutput() TemplateTextAreaControlDisplayOptionsPtrOutput {
	return o
}

func (o TemplateTextAreaControlDisplayOptionsPtrOutput) ToTemplateTextAreaControlDisplayOptionsPtrOutputWithContext(ctx context.Context) TemplateTextAreaControlDisplayOptionsPtrOutput {
	return o
}

func (o TemplateTextAreaControlDisplayOptionsPtrOutput) Elem() TemplateTextAreaControlDisplayOptionsOutput {
	return o.ApplyT(func(v *TemplateTextAreaControlDisplayOptions) TemplateTextAreaControlDisplayOptions {
		if v != nil {
			return *v
		}
		var ret TemplateTextAreaControlDisplayOptions
		return ret
	}).(TemplateTextAreaControlDisplayOptionsOutput)
}

// The configuration of info icon label options.
func (o TemplateTextAreaControlDisplayOptionsPtrOutput) InfoIconLabelOptions() TemplateSheetControlInfoIconLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTextAreaControlDisplayOptions) *TemplateSheetControlInfoIconLabelOptions {
		if v == nil {
			return nil
		}
		return v.InfoIconLabelOptions
	}).(TemplateSheetControlInfoIconLabelOptionsPtrOutput)
}

// The configuration of the placeholder options in a text area control.
func (o TemplateTextAreaControlDisplayOptionsPtrOutput) PlaceholderOptions() TemplateTextControlPlaceholderOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTextAreaControlDisplayOptions) *TemplateTextControlPlaceholderOptions {
		if v == nil {
			return nil
		}
		return v.PlaceholderOptions
	}).(TemplateTextControlPlaceholderOptionsPtrOutput)
}

// The options to configure the title visibility, name, and font size.
func (o TemplateTextAreaControlDisplayOptionsPtrOutput) TitleOptions() TemplateLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTextAreaControlDisplayOptions) *TemplateLabelOptions {
		if v == nil {
			return nil
		}
		return v.TitleOptions
	}).(TemplateLabelOptionsPtrOutput)
}

type TemplateTextConditionalFormat struct {
	// The conditional formatting for the text background color.
	BackgroundColor *TemplateConditionalFormattingColor `pulumi:"backgroundColor"`
	// The conditional formatting for the icon.
	Icon *TemplateConditionalFormattingIcon `pulumi:"icon"`
	// The conditional formatting for the text color.
	TextColor *TemplateConditionalFormattingColor `pulumi:"textColor"`
}

// TemplateTextConditionalFormatInput is an input type that accepts TemplateTextConditionalFormatArgs and TemplateTextConditionalFormatOutput values.
// You can construct a concrete instance of `TemplateTextConditionalFormatInput` via:
//
//	TemplateTextConditionalFormatArgs{...}
type TemplateTextConditionalFormatInput interface {
	pulumi.Input

	ToTemplateTextConditionalFormatOutput() TemplateTextConditionalFormatOutput
	ToTemplateTextConditionalFormatOutputWithContext(context.Context) TemplateTextConditionalFormatOutput
}

type TemplateTextConditionalFormatArgs struct {
	// The conditional formatting for the text background color.
	BackgroundColor TemplateConditionalFormattingColorPtrInput `pulumi:"backgroundColor"`
	// The conditional formatting for the icon.
	Icon TemplateConditionalFormattingIconPtrInput `pulumi:"icon"`
	// The conditional formatting for the text color.
	TextColor TemplateConditionalFormattingColorPtrInput `pulumi:"textColor"`
}

func (TemplateTextConditionalFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTextConditionalFormat)(nil)).Elem()
}

func (i TemplateTextConditionalFormatArgs) ToTemplateTextConditionalFormatOutput() TemplateTextConditionalFormatOutput {
	return i.ToTemplateTextConditionalFormatOutputWithContext(context.Background())
}

func (i TemplateTextConditionalFormatArgs) ToTemplateTextConditionalFormatOutputWithContext(ctx context.Context) TemplateTextConditionalFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTextConditionalFormatOutput)
}

func (i TemplateTextConditionalFormatArgs) ToTemplateTextConditionalFormatPtrOutput() TemplateTextConditionalFormatPtrOutput {
	return i.ToTemplateTextConditionalFormatPtrOutputWithContext(context.Background())
}

func (i TemplateTextConditionalFormatArgs) ToTemplateTextConditionalFormatPtrOutputWithContext(ctx context.Context) TemplateTextConditionalFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTextConditionalFormatOutput).ToTemplateTextConditionalFormatPtrOutputWithContext(ctx)
}

// TemplateTextConditionalFormatPtrInput is an input type that accepts TemplateTextConditionalFormatArgs, TemplateTextConditionalFormatPtr and TemplateTextConditionalFormatPtrOutput values.
// You can construct a concrete instance of `TemplateTextConditionalFormatPtrInput` via:
//
//	        TemplateTextConditionalFormatArgs{...}
//
//	or:
//
//	        nil
type TemplateTextConditionalFormatPtrInput interface {
	pulumi.Input

	ToTemplateTextConditionalFormatPtrOutput() TemplateTextConditionalFormatPtrOutput
	ToTemplateTextConditionalFormatPtrOutputWithContext(context.Context) TemplateTextConditionalFormatPtrOutput
}

type templateTextConditionalFormatPtrType TemplateTextConditionalFormatArgs

func TemplateTextConditionalFormatPtr(v *TemplateTextConditionalFormatArgs) TemplateTextConditionalFormatPtrInput {
	return (*templateTextConditionalFormatPtrType)(v)
}

func (*templateTextConditionalFormatPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTextConditionalFormat)(nil)).Elem()
}

func (i *templateTextConditionalFormatPtrType) ToTemplateTextConditionalFormatPtrOutput() TemplateTextConditionalFormatPtrOutput {
	return i.ToTemplateTextConditionalFormatPtrOutputWithContext(context.Background())
}

func (i *templateTextConditionalFormatPtrType) ToTemplateTextConditionalFormatPtrOutputWithContext(ctx context.Context) TemplateTextConditionalFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTextConditionalFormatPtrOutput)
}

type TemplateTextConditionalFormatOutput struct{ *pulumi.OutputState }

func (TemplateTextConditionalFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTextConditionalFormat)(nil)).Elem()
}

func (o TemplateTextConditionalFormatOutput) ToTemplateTextConditionalFormatOutput() TemplateTextConditionalFormatOutput {
	return o
}

func (o TemplateTextConditionalFormatOutput) ToTemplateTextConditionalFormatOutputWithContext(ctx context.Context) TemplateTextConditionalFormatOutput {
	return o
}

func (o TemplateTextConditionalFormatOutput) ToTemplateTextConditionalFormatPtrOutput() TemplateTextConditionalFormatPtrOutput {
	return o.ToTemplateTextConditionalFormatPtrOutputWithContext(context.Background())
}

func (o TemplateTextConditionalFormatOutput) ToTemplateTextConditionalFormatPtrOutputWithContext(ctx context.Context) TemplateTextConditionalFormatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTextConditionalFormat) *TemplateTextConditionalFormat {
		return &v
	}).(TemplateTextConditionalFormatPtrOutput)
}

// The conditional formatting for the text background color.
func (o TemplateTextConditionalFormatOutput) BackgroundColor() TemplateConditionalFormattingColorPtrOutput {
	return o.ApplyT(func(v TemplateTextConditionalFormat) *TemplateConditionalFormattingColor { return v.BackgroundColor }).(TemplateConditionalFormattingColorPtrOutput)
}

// The conditional formatting for the icon.
func (o TemplateTextConditionalFormatOutput) Icon() TemplateConditionalFormattingIconPtrOutput {
	return o.ApplyT(func(v TemplateTextConditionalFormat) *TemplateConditionalFormattingIcon { return v.Icon }).(TemplateConditionalFormattingIconPtrOutput)
}

// The conditional formatting for the text color.
func (o TemplateTextConditionalFormatOutput) TextColor() TemplateConditionalFormattingColorPtrOutput {
	return o.ApplyT(func(v TemplateTextConditionalFormat) *TemplateConditionalFormattingColor { return v.TextColor }).(TemplateConditionalFormattingColorPtrOutput)
}

type TemplateTextConditionalFormatPtrOutput struct{ *pulumi.OutputState }

func (TemplateTextConditionalFormatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTextConditionalFormat)(nil)).Elem()
}

func (o TemplateTextConditionalFormatPtrOutput) ToTemplateTextConditionalFormatPtrOutput() TemplateTextConditionalFormatPtrOutput {
	return o
}

func (o TemplateTextConditionalFormatPtrOutput) ToTemplateTextConditionalFormatPtrOutputWithContext(ctx context.Context) TemplateTextConditionalFormatPtrOutput {
	return o
}

func (o TemplateTextConditionalFormatPtrOutput) Elem() TemplateTextConditionalFormatOutput {
	return o.ApplyT(func(v *TemplateTextConditionalFormat) TemplateTextConditionalFormat {
		if v != nil {
			return *v
		}
		var ret TemplateTextConditionalFormat
		return ret
	}).(TemplateTextConditionalFormatOutput)
}

// The conditional formatting for the text background color.
func (o TemplateTextConditionalFormatPtrOutput) BackgroundColor() TemplateConditionalFormattingColorPtrOutput {
	return o.ApplyT(func(v *TemplateTextConditionalFormat) *TemplateConditionalFormattingColor {
		if v == nil {
			return nil
		}
		return v.BackgroundColor
	}).(TemplateConditionalFormattingColorPtrOutput)
}

// The conditional formatting for the icon.
func (o TemplateTextConditionalFormatPtrOutput) Icon() TemplateConditionalFormattingIconPtrOutput {
	return o.ApplyT(func(v *TemplateTextConditionalFormat) *TemplateConditionalFormattingIcon {
		if v == nil {
			return nil
		}
		return v.Icon
	}).(TemplateConditionalFormattingIconPtrOutput)
}

// The conditional formatting for the text color.
func (o TemplateTextConditionalFormatPtrOutput) TextColor() TemplateConditionalFormattingColorPtrOutput {
	return o.ApplyT(func(v *TemplateTextConditionalFormat) *TemplateConditionalFormattingColor {
		if v == nil {
			return nil
		}
		return v.TextColor
	}).(TemplateConditionalFormattingColorPtrOutput)
}

type TemplateTextControlPlaceholderOptions struct {
	// The visibility configuration of the placeholder options in a text control.
	Visibility *TemplateVisibility `pulumi:"visibility"`
}

// TemplateTextControlPlaceholderOptionsInput is an input type that accepts TemplateTextControlPlaceholderOptionsArgs and TemplateTextControlPlaceholderOptionsOutput values.
// You can construct a concrete instance of `TemplateTextControlPlaceholderOptionsInput` via:
//
//	TemplateTextControlPlaceholderOptionsArgs{...}
type TemplateTextControlPlaceholderOptionsInput interface {
	pulumi.Input

	ToTemplateTextControlPlaceholderOptionsOutput() TemplateTextControlPlaceholderOptionsOutput
	ToTemplateTextControlPlaceholderOptionsOutputWithContext(context.Context) TemplateTextControlPlaceholderOptionsOutput
}

type TemplateTextControlPlaceholderOptionsArgs struct {
	// The visibility configuration of the placeholder options in a text control.
	Visibility TemplateVisibilityPtrInput `pulumi:"visibility"`
}

func (TemplateTextControlPlaceholderOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTextControlPlaceholderOptions)(nil)).Elem()
}

func (i TemplateTextControlPlaceholderOptionsArgs) ToTemplateTextControlPlaceholderOptionsOutput() TemplateTextControlPlaceholderOptionsOutput {
	return i.ToTemplateTextControlPlaceholderOptionsOutputWithContext(context.Background())
}

func (i TemplateTextControlPlaceholderOptionsArgs) ToTemplateTextControlPlaceholderOptionsOutputWithContext(ctx context.Context) TemplateTextControlPlaceholderOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTextControlPlaceholderOptionsOutput)
}

func (i TemplateTextControlPlaceholderOptionsArgs) ToTemplateTextControlPlaceholderOptionsPtrOutput() TemplateTextControlPlaceholderOptionsPtrOutput {
	return i.ToTemplateTextControlPlaceholderOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateTextControlPlaceholderOptionsArgs) ToTemplateTextControlPlaceholderOptionsPtrOutputWithContext(ctx context.Context) TemplateTextControlPlaceholderOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTextControlPlaceholderOptionsOutput).ToTemplateTextControlPlaceholderOptionsPtrOutputWithContext(ctx)
}

// TemplateTextControlPlaceholderOptionsPtrInput is an input type that accepts TemplateTextControlPlaceholderOptionsArgs, TemplateTextControlPlaceholderOptionsPtr and TemplateTextControlPlaceholderOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateTextControlPlaceholderOptionsPtrInput` via:
//
//	        TemplateTextControlPlaceholderOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateTextControlPlaceholderOptionsPtrInput interface {
	pulumi.Input

	ToTemplateTextControlPlaceholderOptionsPtrOutput() TemplateTextControlPlaceholderOptionsPtrOutput
	ToTemplateTextControlPlaceholderOptionsPtrOutputWithContext(context.Context) TemplateTextControlPlaceholderOptionsPtrOutput
}

type templateTextControlPlaceholderOptionsPtrType TemplateTextControlPlaceholderOptionsArgs

func TemplateTextControlPlaceholderOptionsPtr(v *TemplateTextControlPlaceholderOptionsArgs) TemplateTextControlPlaceholderOptionsPtrInput {
	return (*templateTextControlPlaceholderOptionsPtrType)(v)
}

func (*templateTextControlPlaceholderOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTextControlPlaceholderOptions)(nil)).Elem()
}

func (i *templateTextControlPlaceholderOptionsPtrType) ToTemplateTextControlPlaceholderOptionsPtrOutput() TemplateTextControlPlaceholderOptionsPtrOutput {
	return i.ToTemplateTextControlPlaceholderOptionsPtrOutputWithContext(context.Background())
}

func (i *templateTextControlPlaceholderOptionsPtrType) ToTemplateTextControlPlaceholderOptionsPtrOutputWithContext(ctx context.Context) TemplateTextControlPlaceholderOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTextControlPlaceholderOptionsPtrOutput)
}

type TemplateTextControlPlaceholderOptionsOutput struct{ *pulumi.OutputState }

func (TemplateTextControlPlaceholderOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTextControlPlaceholderOptions)(nil)).Elem()
}

func (o TemplateTextControlPlaceholderOptionsOutput) ToTemplateTextControlPlaceholderOptionsOutput() TemplateTextControlPlaceholderOptionsOutput {
	return o
}

func (o TemplateTextControlPlaceholderOptionsOutput) ToTemplateTextControlPlaceholderOptionsOutputWithContext(ctx context.Context) TemplateTextControlPlaceholderOptionsOutput {
	return o
}

func (o TemplateTextControlPlaceholderOptionsOutput) ToTemplateTextControlPlaceholderOptionsPtrOutput() TemplateTextControlPlaceholderOptionsPtrOutput {
	return o.ToTemplateTextControlPlaceholderOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateTextControlPlaceholderOptionsOutput) ToTemplateTextControlPlaceholderOptionsPtrOutputWithContext(ctx context.Context) TemplateTextControlPlaceholderOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTextControlPlaceholderOptions) *TemplateTextControlPlaceholderOptions {
		return &v
	}).(TemplateTextControlPlaceholderOptionsPtrOutput)
}

// The visibility configuration of the placeholder options in a text control.
func (o TemplateTextControlPlaceholderOptionsOutput) Visibility() TemplateVisibilityPtrOutput {
	return o.ApplyT(func(v TemplateTextControlPlaceholderOptions) *TemplateVisibility { return v.Visibility }).(TemplateVisibilityPtrOutput)
}

type TemplateTextControlPlaceholderOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateTextControlPlaceholderOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTextControlPlaceholderOptions)(nil)).Elem()
}

func (o TemplateTextControlPlaceholderOptionsPtrOutput) ToTemplateTextControlPlaceholderOptionsPtrOutput() TemplateTextControlPlaceholderOptionsPtrOutput {
	return o
}

func (o TemplateTextControlPlaceholderOptionsPtrOutput) ToTemplateTextControlPlaceholderOptionsPtrOutputWithContext(ctx context.Context) TemplateTextControlPlaceholderOptionsPtrOutput {
	return o
}

func (o TemplateTextControlPlaceholderOptionsPtrOutput) Elem() TemplateTextControlPlaceholderOptionsOutput {
	return o.ApplyT(func(v *TemplateTextControlPlaceholderOptions) TemplateTextControlPlaceholderOptions {
		if v != nil {
			return *v
		}
		var ret TemplateTextControlPlaceholderOptions
		return ret
	}).(TemplateTextControlPlaceholderOptionsOutput)
}

// The visibility configuration of the placeholder options in a text control.
func (o TemplateTextControlPlaceholderOptionsPtrOutput) Visibility() TemplateVisibilityPtrOutput {
	return o.ApplyT(func(v *TemplateTextControlPlaceholderOptions) *TemplateVisibility {
		if v == nil {
			return nil
		}
		return v.Visibility
	}).(TemplateVisibilityPtrOutput)
}

type TemplateTextFieldControlDisplayOptions struct {
	// The configuration of info icon label options.
	InfoIconLabelOptions *TemplateSheetControlInfoIconLabelOptions `pulumi:"infoIconLabelOptions"`
	// The configuration of the placeholder options in a text field control.
	PlaceholderOptions *TemplateTextControlPlaceholderOptions `pulumi:"placeholderOptions"`
	// The options to configure the title visibility, name, and font size.
	TitleOptions *TemplateLabelOptions `pulumi:"titleOptions"`
}

// TemplateTextFieldControlDisplayOptionsInput is an input type that accepts TemplateTextFieldControlDisplayOptionsArgs and TemplateTextFieldControlDisplayOptionsOutput values.
// You can construct a concrete instance of `TemplateTextFieldControlDisplayOptionsInput` via:
//
//	TemplateTextFieldControlDisplayOptionsArgs{...}
type TemplateTextFieldControlDisplayOptionsInput interface {
	pulumi.Input

	ToTemplateTextFieldControlDisplayOptionsOutput() TemplateTextFieldControlDisplayOptionsOutput
	ToTemplateTextFieldControlDisplayOptionsOutputWithContext(context.Context) TemplateTextFieldControlDisplayOptionsOutput
}

type TemplateTextFieldControlDisplayOptionsArgs struct {
	// The configuration of info icon label options.
	InfoIconLabelOptions TemplateSheetControlInfoIconLabelOptionsPtrInput `pulumi:"infoIconLabelOptions"`
	// The configuration of the placeholder options in a text field control.
	PlaceholderOptions TemplateTextControlPlaceholderOptionsPtrInput `pulumi:"placeholderOptions"`
	// The options to configure the title visibility, name, and font size.
	TitleOptions TemplateLabelOptionsPtrInput `pulumi:"titleOptions"`
}

func (TemplateTextFieldControlDisplayOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTextFieldControlDisplayOptions)(nil)).Elem()
}

func (i TemplateTextFieldControlDisplayOptionsArgs) ToTemplateTextFieldControlDisplayOptionsOutput() TemplateTextFieldControlDisplayOptionsOutput {
	return i.ToTemplateTextFieldControlDisplayOptionsOutputWithContext(context.Background())
}

func (i TemplateTextFieldControlDisplayOptionsArgs) ToTemplateTextFieldControlDisplayOptionsOutputWithContext(ctx context.Context) TemplateTextFieldControlDisplayOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTextFieldControlDisplayOptionsOutput)
}

func (i TemplateTextFieldControlDisplayOptionsArgs) ToTemplateTextFieldControlDisplayOptionsPtrOutput() TemplateTextFieldControlDisplayOptionsPtrOutput {
	return i.ToTemplateTextFieldControlDisplayOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateTextFieldControlDisplayOptionsArgs) ToTemplateTextFieldControlDisplayOptionsPtrOutputWithContext(ctx context.Context) TemplateTextFieldControlDisplayOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTextFieldControlDisplayOptionsOutput).ToTemplateTextFieldControlDisplayOptionsPtrOutputWithContext(ctx)
}

// TemplateTextFieldControlDisplayOptionsPtrInput is an input type that accepts TemplateTextFieldControlDisplayOptionsArgs, TemplateTextFieldControlDisplayOptionsPtr and TemplateTextFieldControlDisplayOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateTextFieldControlDisplayOptionsPtrInput` via:
//
//	        TemplateTextFieldControlDisplayOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateTextFieldControlDisplayOptionsPtrInput interface {
	pulumi.Input

	ToTemplateTextFieldControlDisplayOptionsPtrOutput() TemplateTextFieldControlDisplayOptionsPtrOutput
	ToTemplateTextFieldControlDisplayOptionsPtrOutputWithContext(context.Context) TemplateTextFieldControlDisplayOptionsPtrOutput
}

type templateTextFieldControlDisplayOptionsPtrType TemplateTextFieldControlDisplayOptionsArgs

func TemplateTextFieldControlDisplayOptionsPtr(v *TemplateTextFieldControlDisplayOptionsArgs) TemplateTextFieldControlDisplayOptionsPtrInput {
	return (*templateTextFieldControlDisplayOptionsPtrType)(v)
}

func (*templateTextFieldControlDisplayOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTextFieldControlDisplayOptions)(nil)).Elem()
}

func (i *templateTextFieldControlDisplayOptionsPtrType) ToTemplateTextFieldControlDisplayOptionsPtrOutput() TemplateTextFieldControlDisplayOptionsPtrOutput {
	return i.ToTemplateTextFieldControlDisplayOptionsPtrOutputWithContext(context.Background())
}

func (i *templateTextFieldControlDisplayOptionsPtrType) ToTemplateTextFieldControlDisplayOptionsPtrOutputWithContext(ctx context.Context) TemplateTextFieldControlDisplayOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTextFieldControlDisplayOptionsPtrOutput)
}

type TemplateTextFieldControlDisplayOptionsOutput struct{ *pulumi.OutputState }

func (TemplateTextFieldControlDisplayOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTextFieldControlDisplayOptions)(nil)).Elem()
}

func (o TemplateTextFieldControlDisplayOptionsOutput) ToTemplateTextFieldControlDisplayOptionsOutput() TemplateTextFieldControlDisplayOptionsOutput {
	return o
}

func (o TemplateTextFieldControlDisplayOptionsOutput) ToTemplateTextFieldControlDisplayOptionsOutputWithContext(ctx context.Context) TemplateTextFieldControlDisplayOptionsOutput {
	return o
}

func (o TemplateTextFieldControlDisplayOptionsOutput) ToTemplateTextFieldControlDisplayOptionsPtrOutput() TemplateTextFieldControlDisplayOptionsPtrOutput {
	return o.ToTemplateTextFieldControlDisplayOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateTextFieldControlDisplayOptionsOutput) ToTemplateTextFieldControlDisplayOptionsPtrOutputWithContext(ctx context.Context) TemplateTextFieldControlDisplayOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTextFieldControlDisplayOptions) *TemplateTextFieldControlDisplayOptions {
		return &v
	}).(TemplateTextFieldControlDisplayOptionsPtrOutput)
}

// The configuration of info icon label options.
func (o TemplateTextFieldControlDisplayOptionsOutput) InfoIconLabelOptions() TemplateSheetControlInfoIconLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTextFieldControlDisplayOptions) *TemplateSheetControlInfoIconLabelOptions {
		return v.InfoIconLabelOptions
	}).(TemplateSheetControlInfoIconLabelOptionsPtrOutput)
}

// The configuration of the placeholder options in a text field control.
func (o TemplateTextFieldControlDisplayOptionsOutput) PlaceholderOptions() TemplateTextControlPlaceholderOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTextFieldControlDisplayOptions) *TemplateTextControlPlaceholderOptions {
		return v.PlaceholderOptions
	}).(TemplateTextControlPlaceholderOptionsPtrOutput)
}

// The options to configure the title visibility, name, and font size.
func (o TemplateTextFieldControlDisplayOptionsOutput) TitleOptions() TemplateLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTextFieldControlDisplayOptions) *TemplateLabelOptions { return v.TitleOptions }).(TemplateLabelOptionsPtrOutput)
}

type TemplateTextFieldControlDisplayOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateTextFieldControlDisplayOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTextFieldControlDisplayOptions)(nil)).Elem()
}

func (o TemplateTextFieldControlDisplayOptionsPtrOutput) ToTemplateTextFieldControlDisplayOptionsPtrOutput() TemplateTextFieldControlDisplayOptionsPtrOutput {
	return o
}

func (o TemplateTextFieldControlDisplayOptionsPtrOutput) ToTemplateTextFieldControlDisplayOptionsPtrOutputWithContext(ctx context.Context) TemplateTextFieldControlDisplayOptionsPtrOutput {
	return o
}

func (o TemplateTextFieldControlDisplayOptionsPtrOutput) Elem() TemplateTextFieldControlDisplayOptionsOutput {
	return o.ApplyT(func(v *TemplateTextFieldControlDisplayOptions) TemplateTextFieldControlDisplayOptions {
		if v != nil {
			return *v
		}
		var ret TemplateTextFieldControlDisplayOptions
		return ret
	}).(TemplateTextFieldControlDisplayOptionsOutput)
}

// The configuration of info icon label options.
func (o TemplateTextFieldControlDisplayOptionsPtrOutput) InfoIconLabelOptions() TemplateSheetControlInfoIconLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTextFieldControlDisplayOptions) *TemplateSheetControlInfoIconLabelOptions {
		if v == nil {
			return nil
		}
		return v.InfoIconLabelOptions
	}).(TemplateSheetControlInfoIconLabelOptionsPtrOutput)
}

// The configuration of the placeholder options in a text field control.
func (o TemplateTextFieldControlDisplayOptionsPtrOutput) PlaceholderOptions() TemplateTextControlPlaceholderOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTextFieldControlDisplayOptions) *TemplateTextControlPlaceholderOptions {
		if v == nil {
			return nil
		}
		return v.PlaceholderOptions
	}).(TemplateTextControlPlaceholderOptionsPtrOutput)
}

// The options to configure the title visibility, name, and font size.
func (o TemplateTextFieldControlDisplayOptionsPtrOutput) TitleOptions() TemplateLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTextFieldControlDisplayOptions) *TemplateLabelOptions {
		if v == nil {
			return nil
		}
		return v.TitleOptions
	}).(TemplateLabelOptionsPtrOutput)
}

type TemplateThousandSeparatorOptions struct {
	// Determines the thousands separator symbol.
	Symbol *TemplateNumericSeparatorSymbol `pulumi:"symbol"`
	// Determines the visibility of the thousands separator.
	Visibility *TemplateVisibility `pulumi:"visibility"`
}

// TemplateThousandSeparatorOptionsInput is an input type that accepts TemplateThousandSeparatorOptionsArgs and TemplateThousandSeparatorOptionsOutput values.
// You can construct a concrete instance of `TemplateThousandSeparatorOptionsInput` via:
//
//	TemplateThousandSeparatorOptionsArgs{...}
type TemplateThousandSeparatorOptionsInput interface {
	pulumi.Input

	ToTemplateThousandSeparatorOptionsOutput() TemplateThousandSeparatorOptionsOutput
	ToTemplateThousandSeparatorOptionsOutputWithContext(context.Context) TemplateThousandSeparatorOptionsOutput
}

type TemplateThousandSeparatorOptionsArgs struct {
	// Determines the thousands separator symbol.
	Symbol TemplateNumericSeparatorSymbolPtrInput `pulumi:"symbol"`
	// Determines the visibility of the thousands separator.
	Visibility TemplateVisibilityPtrInput `pulumi:"visibility"`
}

func (TemplateThousandSeparatorOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateThousandSeparatorOptions)(nil)).Elem()
}

func (i TemplateThousandSeparatorOptionsArgs) ToTemplateThousandSeparatorOptionsOutput() TemplateThousandSeparatorOptionsOutput {
	return i.ToTemplateThousandSeparatorOptionsOutputWithContext(context.Background())
}

func (i TemplateThousandSeparatorOptionsArgs) ToTemplateThousandSeparatorOptionsOutputWithContext(ctx context.Context) TemplateThousandSeparatorOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateThousandSeparatorOptionsOutput)
}

func (i TemplateThousandSeparatorOptionsArgs) ToTemplateThousandSeparatorOptionsPtrOutput() TemplateThousandSeparatorOptionsPtrOutput {
	return i.ToTemplateThousandSeparatorOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateThousandSeparatorOptionsArgs) ToTemplateThousandSeparatorOptionsPtrOutputWithContext(ctx context.Context) TemplateThousandSeparatorOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateThousandSeparatorOptionsOutput).ToTemplateThousandSeparatorOptionsPtrOutputWithContext(ctx)
}

// TemplateThousandSeparatorOptionsPtrInput is an input type that accepts TemplateThousandSeparatorOptionsArgs, TemplateThousandSeparatorOptionsPtr and TemplateThousandSeparatorOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateThousandSeparatorOptionsPtrInput` via:
//
//	        TemplateThousandSeparatorOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateThousandSeparatorOptionsPtrInput interface {
	pulumi.Input

	ToTemplateThousandSeparatorOptionsPtrOutput() TemplateThousandSeparatorOptionsPtrOutput
	ToTemplateThousandSeparatorOptionsPtrOutputWithContext(context.Context) TemplateThousandSeparatorOptionsPtrOutput
}

type templateThousandSeparatorOptionsPtrType TemplateThousandSeparatorOptionsArgs

func TemplateThousandSeparatorOptionsPtr(v *TemplateThousandSeparatorOptionsArgs) TemplateThousandSeparatorOptionsPtrInput {
	return (*templateThousandSeparatorOptionsPtrType)(v)
}

func (*templateThousandSeparatorOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateThousandSeparatorOptions)(nil)).Elem()
}

func (i *templateThousandSeparatorOptionsPtrType) ToTemplateThousandSeparatorOptionsPtrOutput() TemplateThousandSeparatorOptionsPtrOutput {
	return i.ToTemplateThousandSeparatorOptionsPtrOutputWithContext(context.Background())
}

func (i *templateThousandSeparatorOptionsPtrType) ToTemplateThousandSeparatorOptionsPtrOutputWithContext(ctx context.Context) TemplateThousandSeparatorOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateThousandSeparatorOptionsPtrOutput)
}

type TemplateThousandSeparatorOptionsOutput struct{ *pulumi.OutputState }

func (TemplateThousandSeparatorOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateThousandSeparatorOptions)(nil)).Elem()
}

func (o TemplateThousandSeparatorOptionsOutput) ToTemplateThousandSeparatorOptionsOutput() TemplateThousandSeparatorOptionsOutput {
	return o
}

func (o TemplateThousandSeparatorOptionsOutput) ToTemplateThousandSeparatorOptionsOutputWithContext(ctx context.Context) TemplateThousandSeparatorOptionsOutput {
	return o
}

func (o TemplateThousandSeparatorOptionsOutput) ToTemplateThousandSeparatorOptionsPtrOutput() TemplateThousandSeparatorOptionsPtrOutput {
	return o.ToTemplateThousandSeparatorOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateThousandSeparatorOptionsOutput) ToTemplateThousandSeparatorOptionsPtrOutputWithContext(ctx context.Context) TemplateThousandSeparatorOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateThousandSeparatorOptions) *TemplateThousandSeparatorOptions {
		return &v
	}).(TemplateThousandSeparatorOptionsPtrOutput)
}

// Determines the thousands separator symbol.
func (o TemplateThousandSeparatorOptionsOutput) Symbol() TemplateNumericSeparatorSymbolPtrOutput {
	return o.ApplyT(func(v TemplateThousandSeparatorOptions) *TemplateNumericSeparatorSymbol { return v.Symbol }).(TemplateNumericSeparatorSymbolPtrOutput)
}

// Determines the visibility of the thousands separator.
func (o TemplateThousandSeparatorOptionsOutput) Visibility() TemplateVisibilityPtrOutput {
	return o.ApplyT(func(v TemplateThousandSeparatorOptions) *TemplateVisibility { return v.Visibility }).(TemplateVisibilityPtrOutput)
}

type TemplateThousandSeparatorOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateThousandSeparatorOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateThousandSeparatorOptions)(nil)).Elem()
}

func (o TemplateThousandSeparatorOptionsPtrOutput) ToTemplateThousandSeparatorOptionsPtrOutput() TemplateThousandSeparatorOptionsPtrOutput {
	return o
}

func (o TemplateThousandSeparatorOptionsPtrOutput) ToTemplateThousandSeparatorOptionsPtrOutputWithContext(ctx context.Context) TemplateThousandSeparatorOptionsPtrOutput {
	return o
}

func (o TemplateThousandSeparatorOptionsPtrOutput) Elem() TemplateThousandSeparatorOptionsOutput {
	return o.ApplyT(func(v *TemplateThousandSeparatorOptions) TemplateThousandSeparatorOptions {
		if v != nil {
			return *v
		}
		var ret TemplateThousandSeparatorOptions
		return ret
	}).(TemplateThousandSeparatorOptionsOutput)
}

// Determines the thousands separator symbol.
func (o TemplateThousandSeparatorOptionsPtrOutput) Symbol() TemplateNumericSeparatorSymbolPtrOutput {
	return o.ApplyT(func(v *TemplateThousandSeparatorOptions) *TemplateNumericSeparatorSymbol {
		if v == nil {
			return nil
		}
		return v.Symbol
	}).(TemplateNumericSeparatorSymbolPtrOutput)
}

// Determines the visibility of the thousands separator.
func (o TemplateThousandSeparatorOptionsPtrOutput) Visibility() TemplateVisibilityPtrOutput {
	return o.ApplyT(func(v *TemplateThousandSeparatorOptions) *TemplateVisibility {
		if v == nil {
			return nil
		}
		return v.Visibility
	}).(TemplateVisibilityPtrOutput)
}

type TemplateTimeBasedForecastProperties struct {
	// The lower boundary setup of a forecast computation.
	LowerBoundary *float64 `pulumi:"lowerBoundary"`
	// The periods backward setup of a forecast computation.
	PeriodsBackward *float64 `pulumi:"periodsBackward"`
	// The periods forward setup of a forecast computation.
	PeriodsForward *float64 `pulumi:"periodsForward"`
	// The prediction interval setup of a forecast computation.
	PredictionInterval *float64 `pulumi:"predictionInterval"`
	// The seasonality setup of a forecast computation. Choose one of the following options:
	//
	// - `NULL` : The input is set to `NULL` .
	// - `NON_NULL` : The input is set to a custom value.
	Seasonality *float64 `pulumi:"seasonality"`
	// The upper boundary setup of a forecast computation.
	UpperBoundary *float64 `pulumi:"upperBoundary"`
}

// TemplateTimeBasedForecastPropertiesInput is an input type that accepts TemplateTimeBasedForecastPropertiesArgs and TemplateTimeBasedForecastPropertiesOutput values.
// You can construct a concrete instance of `TemplateTimeBasedForecastPropertiesInput` via:
//
//	TemplateTimeBasedForecastPropertiesArgs{...}
type TemplateTimeBasedForecastPropertiesInput interface {
	pulumi.Input

	ToTemplateTimeBasedForecastPropertiesOutput() TemplateTimeBasedForecastPropertiesOutput
	ToTemplateTimeBasedForecastPropertiesOutputWithContext(context.Context) TemplateTimeBasedForecastPropertiesOutput
}

type TemplateTimeBasedForecastPropertiesArgs struct {
	// The lower boundary setup of a forecast computation.
	LowerBoundary pulumi.Float64PtrInput `pulumi:"lowerBoundary"`
	// The periods backward setup of a forecast computation.
	PeriodsBackward pulumi.Float64PtrInput `pulumi:"periodsBackward"`
	// The periods forward setup of a forecast computation.
	PeriodsForward pulumi.Float64PtrInput `pulumi:"periodsForward"`
	// The prediction interval setup of a forecast computation.
	PredictionInterval pulumi.Float64PtrInput `pulumi:"predictionInterval"`
	// The seasonality setup of a forecast computation. Choose one of the following options:
	//
	// - `NULL` : The input is set to `NULL` .
	// - `NON_NULL` : The input is set to a custom value.
	Seasonality pulumi.Float64PtrInput `pulumi:"seasonality"`
	// The upper boundary setup of a forecast computation.
	UpperBoundary pulumi.Float64PtrInput `pulumi:"upperBoundary"`
}

func (TemplateTimeBasedForecastPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTimeBasedForecastProperties)(nil)).Elem()
}

func (i TemplateTimeBasedForecastPropertiesArgs) ToTemplateTimeBasedForecastPropertiesOutput() TemplateTimeBasedForecastPropertiesOutput {
	return i.ToTemplateTimeBasedForecastPropertiesOutputWithContext(context.Background())
}

func (i TemplateTimeBasedForecastPropertiesArgs) ToTemplateTimeBasedForecastPropertiesOutputWithContext(ctx context.Context) TemplateTimeBasedForecastPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTimeBasedForecastPropertiesOutput)
}

func (i TemplateTimeBasedForecastPropertiesArgs) ToTemplateTimeBasedForecastPropertiesPtrOutput() TemplateTimeBasedForecastPropertiesPtrOutput {
	return i.ToTemplateTimeBasedForecastPropertiesPtrOutputWithContext(context.Background())
}

func (i TemplateTimeBasedForecastPropertiesArgs) ToTemplateTimeBasedForecastPropertiesPtrOutputWithContext(ctx context.Context) TemplateTimeBasedForecastPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTimeBasedForecastPropertiesOutput).ToTemplateTimeBasedForecastPropertiesPtrOutputWithContext(ctx)
}

// TemplateTimeBasedForecastPropertiesPtrInput is an input type that accepts TemplateTimeBasedForecastPropertiesArgs, TemplateTimeBasedForecastPropertiesPtr and TemplateTimeBasedForecastPropertiesPtrOutput values.
// You can construct a concrete instance of `TemplateTimeBasedForecastPropertiesPtrInput` via:
//
//	        TemplateTimeBasedForecastPropertiesArgs{...}
//
//	or:
//
//	        nil
type TemplateTimeBasedForecastPropertiesPtrInput interface {
	pulumi.Input

	ToTemplateTimeBasedForecastPropertiesPtrOutput() TemplateTimeBasedForecastPropertiesPtrOutput
	ToTemplateTimeBasedForecastPropertiesPtrOutputWithContext(context.Context) TemplateTimeBasedForecastPropertiesPtrOutput
}

type templateTimeBasedForecastPropertiesPtrType TemplateTimeBasedForecastPropertiesArgs

func TemplateTimeBasedForecastPropertiesPtr(v *TemplateTimeBasedForecastPropertiesArgs) TemplateTimeBasedForecastPropertiesPtrInput {
	return (*templateTimeBasedForecastPropertiesPtrType)(v)
}

func (*templateTimeBasedForecastPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTimeBasedForecastProperties)(nil)).Elem()
}

func (i *templateTimeBasedForecastPropertiesPtrType) ToTemplateTimeBasedForecastPropertiesPtrOutput() TemplateTimeBasedForecastPropertiesPtrOutput {
	return i.ToTemplateTimeBasedForecastPropertiesPtrOutputWithContext(context.Background())
}

func (i *templateTimeBasedForecastPropertiesPtrType) ToTemplateTimeBasedForecastPropertiesPtrOutputWithContext(ctx context.Context) TemplateTimeBasedForecastPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTimeBasedForecastPropertiesPtrOutput)
}

type TemplateTimeBasedForecastPropertiesOutput struct{ *pulumi.OutputState }

func (TemplateTimeBasedForecastPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTimeBasedForecastProperties)(nil)).Elem()
}

func (o TemplateTimeBasedForecastPropertiesOutput) ToTemplateTimeBasedForecastPropertiesOutput() TemplateTimeBasedForecastPropertiesOutput {
	return o
}

func (o TemplateTimeBasedForecastPropertiesOutput) ToTemplateTimeBasedForecastPropertiesOutputWithContext(ctx context.Context) TemplateTimeBasedForecastPropertiesOutput {
	return o
}

func (o TemplateTimeBasedForecastPropertiesOutput) ToTemplateTimeBasedForecastPropertiesPtrOutput() TemplateTimeBasedForecastPropertiesPtrOutput {
	return o.ToTemplateTimeBasedForecastPropertiesPtrOutputWithContext(context.Background())
}

func (o TemplateTimeBasedForecastPropertiesOutput) ToTemplateTimeBasedForecastPropertiesPtrOutputWithContext(ctx context.Context) TemplateTimeBasedForecastPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTimeBasedForecastProperties) *TemplateTimeBasedForecastProperties {
		return &v
	}).(TemplateTimeBasedForecastPropertiesPtrOutput)
}

// The lower boundary setup of a forecast computation.
func (o TemplateTimeBasedForecastPropertiesOutput) LowerBoundary() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateTimeBasedForecastProperties) *float64 { return v.LowerBoundary }).(pulumi.Float64PtrOutput)
}

// The periods backward setup of a forecast computation.
func (o TemplateTimeBasedForecastPropertiesOutput) PeriodsBackward() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateTimeBasedForecastProperties) *float64 { return v.PeriodsBackward }).(pulumi.Float64PtrOutput)
}

// The periods forward setup of a forecast computation.
func (o TemplateTimeBasedForecastPropertiesOutput) PeriodsForward() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateTimeBasedForecastProperties) *float64 { return v.PeriodsForward }).(pulumi.Float64PtrOutput)
}

// The prediction interval setup of a forecast computation.
func (o TemplateTimeBasedForecastPropertiesOutput) PredictionInterval() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateTimeBasedForecastProperties) *float64 { return v.PredictionInterval }).(pulumi.Float64PtrOutput)
}

// The seasonality setup of a forecast computation. Choose one of the following options:
//
// - `NULL` : The input is set to `NULL` .
// - `NON_NULL` : The input is set to a custom value.
func (o TemplateTimeBasedForecastPropertiesOutput) Seasonality() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateTimeBasedForecastProperties) *float64 { return v.Seasonality }).(pulumi.Float64PtrOutput)
}

// The upper boundary setup of a forecast computation.
func (o TemplateTimeBasedForecastPropertiesOutput) UpperBoundary() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateTimeBasedForecastProperties) *float64 { return v.UpperBoundary }).(pulumi.Float64PtrOutput)
}

type TemplateTimeBasedForecastPropertiesPtrOutput struct{ *pulumi.OutputState }

func (TemplateTimeBasedForecastPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTimeBasedForecastProperties)(nil)).Elem()
}

func (o TemplateTimeBasedForecastPropertiesPtrOutput) ToTemplateTimeBasedForecastPropertiesPtrOutput() TemplateTimeBasedForecastPropertiesPtrOutput {
	return o
}

func (o TemplateTimeBasedForecastPropertiesPtrOutput) ToTemplateTimeBasedForecastPropertiesPtrOutputWithContext(ctx context.Context) TemplateTimeBasedForecastPropertiesPtrOutput {
	return o
}

func (o TemplateTimeBasedForecastPropertiesPtrOutput) Elem() TemplateTimeBasedForecastPropertiesOutput {
	return o.ApplyT(func(v *TemplateTimeBasedForecastProperties) TemplateTimeBasedForecastProperties {
		if v != nil {
			return *v
		}
		var ret TemplateTimeBasedForecastProperties
		return ret
	}).(TemplateTimeBasedForecastPropertiesOutput)
}

// The lower boundary setup of a forecast computation.
func (o TemplateTimeBasedForecastPropertiesPtrOutput) LowerBoundary() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateTimeBasedForecastProperties) *float64 {
		if v == nil {
			return nil
		}
		return v.LowerBoundary
	}).(pulumi.Float64PtrOutput)
}

// The periods backward setup of a forecast computation.
func (o TemplateTimeBasedForecastPropertiesPtrOutput) PeriodsBackward() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateTimeBasedForecastProperties) *float64 {
		if v == nil {
			return nil
		}
		return v.PeriodsBackward
	}).(pulumi.Float64PtrOutput)
}

// The periods forward setup of a forecast computation.
func (o TemplateTimeBasedForecastPropertiesPtrOutput) PeriodsForward() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateTimeBasedForecastProperties) *float64 {
		if v == nil {
			return nil
		}
		return v.PeriodsForward
	}).(pulumi.Float64PtrOutput)
}

// The prediction interval setup of a forecast computation.
func (o TemplateTimeBasedForecastPropertiesPtrOutput) PredictionInterval() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateTimeBasedForecastProperties) *float64 {
		if v == nil {
			return nil
		}
		return v.PredictionInterval
	}).(pulumi.Float64PtrOutput)
}

// The seasonality setup of a forecast computation. Choose one of the following options:
//
// - `NULL` : The input is set to `NULL` .
// - `NON_NULL` : The input is set to a custom value.
func (o TemplateTimeBasedForecastPropertiesPtrOutput) Seasonality() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateTimeBasedForecastProperties) *float64 {
		if v == nil {
			return nil
		}
		return v.Seasonality
	}).(pulumi.Float64PtrOutput)
}

// The upper boundary setup of a forecast computation.
func (o TemplateTimeBasedForecastPropertiesPtrOutput) UpperBoundary() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateTimeBasedForecastProperties) *float64 {
		if v == nil {
			return nil
		}
		return v.UpperBoundary
	}).(pulumi.Float64PtrOutput)
}

type TemplateTimeEqualityFilter struct {
	// The column that the filter is applied to.
	Column TemplateColumnIdentifier `pulumi:"column"`
	// The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
	DefaultFilterControlConfiguration *TemplateDefaultFilterControlConfiguration `pulumi:"defaultFilterControlConfiguration"`
	// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
	FilterId string `pulumi:"filterId"`
	// The parameter whose value should be used for the filter value.
	//
	// This field is mutually exclusive to `Value` and `RollingDate` .
	ParameterName *string `pulumi:"parameterName"`
	// The rolling date input for the `TimeEquality` filter.
	//
	// This field is mutually exclusive to `Value` and `ParameterName` .
	RollingDate *TemplateRollingDateConfiguration `pulumi:"rollingDate"`
	// The level of time precision that is used to aggregate `DateTime` values.
	TimeGranularity *TemplateTimeGranularity `pulumi:"timeGranularity"`
	// The value of a `TimeEquality` filter.
	//
	// This field is mutually exclusive to `RollingDate` and `ParameterName` .
	Value *string `pulumi:"value"`
}

// TemplateTimeEqualityFilterInput is an input type that accepts TemplateTimeEqualityFilterArgs and TemplateTimeEqualityFilterOutput values.
// You can construct a concrete instance of `TemplateTimeEqualityFilterInput` via:
//
//	TemplateTimeEqualityFilterArgs{...}
type TemplateTimeEqualityFilterInput interface {
	pulumi.Input

	ToTemplateTimeEqualityFilterOutput() TemplateTimeEqualityFilterOutput
	ToTemplateTimeEqualityFilterOutputWithContext(context.Context) TemplateTimeEqualityFilterOutput
}

type TemplateTimeEqualityFilterArgs struct {
	// The column that the filter is applied to.
	Column TemplateColumnIdentifierInput `pulumi:"column"`
	// The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
	DefaultFilterControlConfiguration TemplateDefaultFilterControlConfigurationPtrInput `pulumi:"defaultFilterControlConfiguration"`
	// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
	FilterId pulumi.StringInput `pulumi:"filterId"`
	// The parameter whose value should be used for the filter value.
	//
	// This field is mutually exclusive to `Value` and `RollingDate` .
	ParameterName pulumi.StringPtrInput `pulumi:"parameterName"`
	// The rolling date input for the `TimeEquality` filter.
	//
	// This field is mutually exclusive to `Value` and `ParameterName` .
	RollingDate TemplateRollingDateConfigurationPtrInput `pulumi:"rollingDate"`
	// The level of time precision that is used to aggregate `DateTime` values.
	TimeGranularity TemplateTimeGranularityPtrInput `pulumi:"timeGranularity"`
	// The value of a `TimeEquality` filter.
	//
	// This field is mutually exclusive to `RollingDate` and `ParameterName` .
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (TemplateTimeEqualityFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTimeEqualityFilter)(nil)).Elem()
}

func (i TemplateTimeEqualityFilterArgs) ToTemplateTimeEqualityFilterOutput() TemplateTimeEqualityFilterOutput {
	return i.ToTemplateTimeEqualityFilterOutputWithContext(context.Background())
}

func (i TemplateTimeEqualityFilterArgs) ToTemplateTimeEqualityFilterOutputWithContext(ctx context.Context) TemplateTimeEqualityFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTimeEqualityFilterOutput)
}

func (i TemplateTimeEqualityFilterArgs) ToTemplateTimeEqualityFilterPtrOutput() TemplateTimeEqualityFilterPtrOutput {
	return i.ToTemplateTimeEqualityFilterPtrOutputWithContext(context.Background())
}

func (i TemplateTimeEqualityFilterArgs) ToTemplateTimeEqualityFilterPtrOutputWithContext(ctx context.Context) TemplateTimeEqualityFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTimeEqualityFilterOutput).ToTemplateTimeEqualityFilterPtrOutputWithContext(ctx)
}

// TemplateTimeEqualityFilterPtrInput is an input type that accepts TemplateTimeEqualityFilterArgs, TemplateTimeEqualityFilterPtr and TemplateTimeEqualityFilterPtrOutput values.
// You can construct a concrete instance of `TemplateTimeEqualityFilterPtrInput` via:
//
//	        TemplateTimeEqualityFilterArgs{...}
//
//	or:
//
//	        nil
type TemplateTimeEqualityFilterPtrInput interface {
	pulumi.Input

	ToTemplateTimeEqualityFilterPtrOutput() TemplateTimeEqualityFilterPtrOutput
	ToTemplateTimeEqualityFilterPtrOutputWithContext(context.Context) TemplateTimeEqualityFilterPtrOutput
}

type templateTimeEqualityFilterPtrType TemplateTimeEqualityFilterArgs

func TemplateTimeEqualityFilterPtr(v *TemplateTimeEqualityFilterArgs) TemplateTimeEqualityFilterPtrInput {
	return (*templateTimeEqualityFilterPtrType)(v)
}

func (*templateTimeEqualityFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTimeEqualityFilter)(nil)).Elem()
}

func (i *templateTimeEqualityFilterPtrType) ToTemplateTimeEqualityFilterPtrOutput() TemplateTimeEqualityFilterPtrOutput {
	return i.ToTemplateTimeEqualityFilterPtrOutputWithContext(context.Background())
}

func (i *templateTimeEqualityFilterPtrType) ToTemplateTimeEqualityFilterPtrOutputWithContext(ctx context.Context) TemplateTimeEqualityFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTimeEqualityFilterPtrOutput)
}

type TemplateTimeEqualityFilterOutput struct{ *pulumi.OutputState }

func (TemplateTimeEqualityFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTimeEqualityFilter)(nil)).Elem()
}

func (o TemplateTimeEqualityFilterOutput) ToTemplateTimeEqualityFilterOutput() TemplateTimeEqualityFilterOutput {
	return o
}

func (o TemplateTimeEqualityFilterOutput) ToTemplateTimeEqualityFilterOutputWithContext(ctx context.Context) TemplateTimeEqualityFilterOutput {
	return o
}

func (o TemplateTimeEqualityFilterOutput) ToTemplateTimeEqualityFilterPtrOutput() TemplateTimeEqualityFilterPtrOutput {
	return o.ToTemplateTimeEqualityFilterPtrOutputWithContext(context.Background())
}

func (o TemplateTimeEqualityFilterOutput) ToTemplateTimeEqualityFilterPtrOutputWithContext(ctx context.Context) TemplateTimeEqualityFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTimeEqualityFilter) *TemplateTimeEqualityFilter {
		return &v
	}).(TemplateTimeEqualityFilterPtrOutput)
}

// The column that the filter is applied to.
func (o TemplateTimeEqualityFilterOutput) Column() TemplateColumnIdentifierOutput {
	return o.ApplyT(func(v TemplateTimeEqualityFilter) TemplateColumnIdentifier { return v.Column }).(TemplateColumnIdentifierOutput)
}

// The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
func (o TemplateTimeEqualityFilterOutput) DefaultFilterControlConfiguration() TemplateDefaultFilterControlConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateTimeEqualityFilter) *TemplateDefaultFilterControlConfiguration {
		return v.DefaultFilterControlConfiguration
	}).(TemplateDefaultFilterControlConfigurationPtrOutput)
}

// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
func (o TemplateTimeEqualityFilterOutput) FilterId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateTimeEqualityFilter) string { return v.FilterId }).(pulumi.StringOutput)
}

// The parameter whose value should be used for the filter value.
//
// This field is mutually exclusive to `Value` and `RollingDate` .
func (o TemplateTimeEqualityFilterOutput) ParameterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateTimeEqualityFilter) *string { return v.ParameterName }).(pulumi.StringPtrOutput)
}

// The rolling date input for the `TimeEquality` filter.
//
// This field is mutually exclusive to `Value` and `ParameterName` .
func (o TemplateTimeEqualityFilterOutput) RollingDate() TemplateRollingDateConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateTimeEqualityFilter) *TemplateRollingDateConfiguration { return v.RollingDate }).(TemplateRollingDateConfigurationPtrOutput)
}

// The level of time precision that is used to aggregate `DateTime` values.
func (o TemplateTimeEqualityFilterOutput) TimeGranularity() TemplateTimeGranularityPtrOutput {
	return o.ApplyT(func(v TemplateTimeEqualityFilter) *TemplateTimeGranularity { return v.TimeGranularity }).(TemplateTimeGranularityPtrOutput)
}

// The value of a `TimeEquality` filter.
//
// This field is mutually exclusive to `RollingDate` and `ParameterName` .
func (o TemplateTimeEqualityFilterOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateTimeEqualityFilter) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type TemplateTimeEqualityFilterPtrOutput struct{ *pulumi.OutputState }

func (TemplateTimeEqualityFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTimeEqualityFilter)(nil)).Elem()
}

func (o TemplateTimeEqualityFilterPtrOutput) ToTemplateTimeEqualityFilterPtrOutput() TemplateTimeEqualityFilterPtrOutput {
	return o
}

func (o TemplateTimeEqualityFilterPtrOutput) ToTemplateTimeEqualityFilterPtrOutputWithContext(ctx context.Context) TemplateTimeEqualityFilterPtrOutput {
	return o
}

func (o TemplateTimeEqualityFilterPtrOutput) Elem() TemplateTimeEqualityFilterOutput {
	return o.ApplyT(func(v *TemplateTimeEqualityFilter) TemplateTimeEqualityFilter {
		if v != nil {
			return *v
		}
		var ret TemplateTimeEqualityFilter
		return ret
	}).(TemplateTimeEqualityFilterOutput)
}

// The column that the filter is applied to.
func (o TemplateTimeEqualityFilterPtrOutput) Column() TemplateColumnIdentifierPtrOutput {
	return o.ApplyT(func(v *TemplateTimeEqualityFilter) *TemplateColumnIdentifier {
		if v == nil {
			return nil
		}
		return &v.Column
	}).(TemplateColumnIdentifierPtrOutput)
}

// The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
func (o TemplateTimeEqualityFilterPtrOutput) DefaultFilterControlConfiguration() TemplateDefaultFilterControlConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateTimeEqualityFilter) *TemplateDefaultFilterControlConfiguration {
		if v == nil {
			return nil
		}
		return v.DefaultFilterControlConfiguration
	}).(TemplateDefaultFilterControlConfigurationPtrOutput)
}

// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
func (o TemplateTimeEqualityFilterPtrOutput) FilterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateTimeEqualityFilter) *string {
		if v == nil {
			return nil
		}
		return &v.FilterId
	}).(pulumi.StringPtrOutput)
}

// The parameter whose value should be used for the filter value.
//
// This field is mutually exclusive to `Value` and `RollingDate` .
func (o TemplateTimeEqualityFilterPtrOutput) ParameterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateTimeEqualityFilter) *string {
		if v == nil {
			return nil
		}
		return v.ParameterName
	}).(pulumi.StringPtrOutput)
}

// The rolling date input for the `TimeEquality` filter.
//
// This field is mutually exclusive to `Value` and `ParameterName` .
func (o TemplateTimeEqualityFilterPtrOutput) RollingDate() TemplateRollingDateConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateTimeEqualityFilter) *TemplateRollingDateConfiguration {
		if v == nil {
			return nil
		}
		return v.RollingDate
	}).(TemplateRollingDateConfigurationPtrOutput)
}

// The level of time precision that is used to aggregate `DateTime` values.
func (o TemplateTimeEqualityFilterPtrOutput) TimeGranularity() TemplateTimeGranularityPtrOutput {
	return o.ApplyT(func(v *TemplateTimeEqualityFilter) *TemplateTimeGranularity {
		if v == nil {
			return nil
		}
		return v.TimeGranularity
	}).(TemplateTimeGranularityPtrOutput)
}

// The value of a `TimeEquality` filter.
//
// This field is mutually exclusive to `RollingDate` and `ParameterName` .
func (o TemplateTimeEqualityFilterPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateTimeEqualityFilter) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type TemplateTimeRangeDrillDownFilter struct {
	// The column that the filter is applied to.
	Column TemplateColumnIdentifier `pulumi:"column"`
	// The maximum value for the filter value range.
	RangeMaximum string `pulumi:"rangeMaximum"`
	// The minimum value for the filter value range.
	RangeMinimum string `pulumi:"rangeMinimum"`
	// The level of time precision that is used to aggregate `DateTime` values.
	TimeGranularity TemplateTimeGranularity `pulumi:"timeGranularity"`
}

// TemplateTimeRangeDrillDownFilterInput is an input type that accepts TemplateTimeRangeDrillDownFilterArgs and TemplateTimeRangeDrillDownFilterOutput values.
// You can construct a concrete instance of `TemplateTimeRangeDrillDownFilterInput` via:
//
//	TemplateTimeRangeDrillDownFilterArgs{...}
type TemplateTimeRangeDrillDownFilterInput interface {
	pulumi.Input

	ToTemplateTimeRangeDrillDownFilterOutput() TemplateTimeRangeDrillDownFilterOutput
	ToTemplateTimeRangeDrillDownFilterOutputWithContext(context.Context) TemplateTimeRangeDrillDownFilterOutput
}

type TemplateTimeRangeDrillDownFilterArgs struct {
	// The column that the filter is applied to.
	Column TemplateColumnIdentifierInput `pulumi:"column"`
	// The maximum value for the filter value range.
	RangeMaximum pulumi.StringInput `pulumi:"rangeMaximum"`
	// The minimum value for the filter value range.
	RangeMinimum pulumi.StringInput `pulumi:"rangeMinimum"`
	// The level of time precision that is used to aggregate `DateTime` values.
	TimeGranularity TemplateTimeGranularityInput `pulumi:"timeGranularity"`
}

func (TemplateTimeRangeDrillDownFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTimeRangeDrillDownFilter)(nil)).Elem()
}

func (i TemplateTimeRangeDrillDownFilterArgs) ToTemplateTimeRangeDrillDownFilterOutput() TemplateTimeRangeDrillDownFilterOutput {
	return i.ToTemplateTimeRangeDrillDownFilterOutputWithContext(context.Background())
}

func (i TemplateTimeRangeDrillDownFilterArgs) ToTemplateTimeRangeDrillDownFilterOutputWithContext(ctx context.Context) TemplateTimeRangeDrillDownFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTimeRangeDrillDownFilterOutput)
}

func (i TemplateTimeRangeDrillDownFilterArgs) ToTemplateTimeRangeDrillDownFilterPtrOutput() TemplateTimeRangeDrillDownFilterPtrOutput {
	return i.ToTemplateTimeRangeDrillDownFilterPtrOutputWithContext(context.Background())
}

func (i TemplateTimeRangeDrillDownFilterArgs) ToTemplateTimeRangeDrillDownFilterPtrOutputWithContext(ctx context.Context) TemplateTimeRangeDrillDownFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTimeRangeDrillDownFilterOutput).ToTemplateTimeRangeDrillDownFilterPtrOutputWithContext(ctx)
}

// TemplateTimeRangeDrillDownFilterPtrInput is an input type that accepts TemplateTimeRangeDrillDownFilterArgs, TemplateTimeRangeDrillDownFilterPtr and TemplateTimeRangeDrillDownFilterPtrOutput values.
// You can construct a concrete instance of `TemplateTimeRangeDrillDownFilterPtrInput` via:
//
//	        TemplateTimeRangeDrillDownFilterArgs{...}
//
//	or:
//
//	        nil
type TemplateTimeRangeDrillDownFilterPtrInput interface {
	pulumi.Input

	ToTemplateTimeRangeDrillDownFilterPtrOutput() TemplateTimeRangeDrillDownFilterPtrOutput
	ToTemplateTimeRangeDrillDownFilterPtrOutputWithContext(context.Context) TemplateTimeRangeDrillDownFilterPtrOutput
}

type templateTimeRangeDrillDownFilterPtrType TemplateTimeRangeDrillDownFilterArgs

func TemplateTimeRangeDrillDownFilterPtr(v *TemplateTimeRangeDrillDownFilterArgs) TemplateTimeRangeDrillDownFilterPtrInput {
	return (*templateTimeRangeDrillDownFilterPtrType)(v)
}

func (*templateTimeRangeDrillDownFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTimeRangeDrillDownFilter)(nil)).Elem()
}

func (i *templateTimeRangeDrillDownFilterPtrType) ToTemplateTimeRangeDrillDownFilterPtrOutput() TemplateTimeRangeDrillDownFilterPtrOutput {
	return i.ToTemplateTimeRangeDrillDownFilterPtrOutputWithContext(context.Background())
}

func (i *templateTimeRangeDrillDownFilterPtrType) ToTemplateTimeRangeDrillDownFilterPtrOutputWithContext(ctx context.Context) TemplateTimeRangeDrillDownFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTimeRangeDrillDownFilterPtrOutput)
}

type TemplateTimeRangeDrillDownFilterOutput struct{ *pulumi.OutputState }

func (TemplateTimeRangeDrillDownFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTimeRangeDrillDownFilter)(nil)).Elem()
}

func (o TemplateTimeRangeDrillDownFilterOutput) ToTemplateTimeRangeDrillDownFilterOutput() TemplateTimeRangeDrillDownFilterOutput {
	return o
}

func (o TemplateTimeRangeDrillDownFilterOutput) ToTemplateTimeRangeDrillDownFilterOutputWithContext(ctx context.Context) TemplateTimeRangeDrillDownFilterOutput {
	return o
}

func (o TemplateTimeRangeDrillDownFilterOutput) ToTemplateTimeRangeDrillDownFilterPtrOutput() TemplateTimeRangeDrillDownFilterPtrOutput {
	return o.ToTemplateTimeRangeDrillDownFilterPtrOutputWithContext(context.Background())
}

func (o TemplateTimeRangeDrillDownFilterOutput) ToTemplateTimeRangeDrillDownFilterPtrOutputWithContext(ctx context.Context) TemplateTimeRangeDrillDownFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTimeRangeDrillDownFilter) *TemplateTimeRangeDrillDownFilter {
		return &v
	}).(TemplateTimeRangeDrillDownFilterPtrOutput)
}

// The column that the filter is applied to.
func (o TemplateTimeRangeDrillDownFilterOutput) Column() TemplateColumnIdentifierOutput {
	return o.ApplyT(func(v TemplateTimeRangeDrillDownFilter) TemplateColumnIdentifier { return v.Column }).(TemplateColumnIdentifierOutput)
}

// The maximum value for the filter value range.
func (o TemplateTimeRangeDrillDownFilterOutput) RangeMaximum() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateTimeRangeDrillDownFilter) string { return v.RangeMaximum }).(pulumi.StringOutput)
}

// The minimum value for the filter value range.
func (o TemplateTimeRangeDrillDownFilterOutput) RangeMinimum() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateTimeRangeDrillDownFilter) string { return v.RangeMinimum }).(pulumi.StringOutput)
}

// The level of time precision that is used to aggregate `DateTime` values.
func (o TemplateTimeRangeDrillDownFilterOutput) TimeGranularity() TemplateTimeGranularityOutput {
	return o.ApplyT(func(v TemplateTimeRangeDrillDownFilter) TemplateTimeGranularity { return v.TimeGranularity }).(TemplateTimeGranularityOutput)
}

type TemplateTimeRangeDrillDownFilterPtrOutput struct{ *pulumi.OutputState }

func (TemplateTimeRangeDrillDownFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTimeRangeDrillDownFilter)(nil)).Elem()
}

func (o TemplateTimeRangeDrillDownFilterPtrOutput) ToTemplateTimeRangeDrillDownFilterPtrOutput() TemplateTimeRangeDrillDownFilterPtrOutput {
	return o
}

func (o TemplateTimeRangeDrillDownFilterPtrOutput) ToTemplateTimeRangeDrillDownFilterPtrOutputWithContext(ctx context.Context) TemplateTimeRangeDrillDownFilterPtrOutput {
	return o
}

func (o TemplateTimeRangeDrillDownFilterPtrOutput) Elem() TemplateTimeRangeDrillDownFilterOutput {
	return o.ApplyT(func(v *TemplateTimeRangeDrillDownFilter) TemplateTimeRangeDrillDownFilter {
		if v != nil {
			return *v
		}
		var ret TemplateTimeRangeDrillDownFilter
		return ret
	}).(TemplateTimeRangeDrillDownFilterOutput)
}

// The column that the filter is applied to.
func (o TemplateTimeRangeDrillDownFilterPtrOutput) Column() TemplateColumnIdentifierPtrOutput {
	return o.ApplyT(func(v *TemplateTimeRangeDrillDownFilter) *TemplateColumnIdentifier {
		if v == nil {
			return nil
		}
		return &v.Column
	}).(TemplateColumnIdentifierPtrOutput)
}

// The maximum value for the filter value range.
func (o TemplateTimeRangeDrillDownFilterPtrOutput) RangeMaximum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateTimeRangeDrillDownFilter) *string {
		if v == nil {
			return nil
		}
		return &v.RangeMaximum
	}).(pulumi.StringPtrOutput)
}

// The minimum value for the filter value range.
func (o TemplateTimeRangeDrillDownFilterPtrOutput) RangeMinimum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateTimeRangeDrillDownFilter) *string {
		if v == nil {
			return nil
		}
		return &v.RangeMinimum
	}).(pulumi.StringPtrOutput)
}

// The level of time precision that is used to aggregate `DateTime` values.
func (o TemplateTimeRangeDrillDownFilterPtrOutput) TimeGranularity() TemplateTimeGranularityPtrOutput {
	return o.ApplyT(func(v *TemplateTimeRangeDrillDownFilter) *TemplateTimeGranularity {
		if v == nil {
			return nil
		}
		return &v.TimeGranularity
	}).(TemplateTimeGranularityPtrOutput)
}

type TemplateTimeRangeFilter struct {
	// The column that the filter is applied to.
	Column TemplateColumnIdentifier `pulumi:"column"`
	// The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
	DefaultFilterControlConfiguration *TemplateDefaultFilterControlConfiguration `pulumi:"defaultFilterControlConfiguration"`
	// The exclude period of the time range filter.
	ExcludePeriodConfiguration *TemplateExcludePeriodConfiguration `pulumi:"excludePeriodConfiguration"`
	// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
	FilterId string `pulumi:"filterId"`
	// Determines whether the maximum value in the filter value range should be included in the filtered results.
	IncludeMaximum *bool `pulumi:"includeMaximum"`
	// Determines whether the minimum value in the filter value range should be included in the filtered results.
	IncludeMinimum *bool `pulumi:"includeMinimum"`
	// This option determines how null values should be treated when filtering data.
	//
	// - `ALL_VALUES` : Include null values in filtered results.
	// - `NULLS_ONLY` : Only include null values in filtered results.
	// - `NON_NULLS_ONLY` : Exclude null values from filtered results.
	NullOption TemplateFilterNullOption `pulumi:"nullOption"`
	// The maximum value for the filter value range.
	RangeMaximumValue *TemplateTimeRangeFilterValue `pulumi:"rangeMaximumValue"`
	// The minimum value for the filter value range.
	RangeMinimumValue *TemplateTimeRangeFilterValue `pulumi:"rangeMinimumValue"`
	// The level of time precision that is used to aggregate `DateTime` values.
	TimeGranularity *TemplateTimeGranularity `pulumi:"timeGranularity"`
}

// TemplateTimeRangeFilterInput is an input type that accepts TemplateTimeRangeFilterArgs and TemplateTimeRangeFilterOutput values.
// You can construct a concrete instance of `TemplateTimeRangeFilterInput` via:
//
//	TemplateTimeRangeFilterArgs{...}
type TemplateTimeRangeFilterInput interface {
	pulumi.Input

	ToTemplateTimeRangeFilterOutput() TemplateTimeRangeFilterOutput
	ToTemplateTimeRangeFilterOutputWithContext(context.Context) TemplateTimeRangeFilterOutput
}

type TemplateTimeRangeFilterArgs struct {
	// The column that the filter is applied to.
	Column TemplateColumnIdentifierInput `pulumi:"column"`
	// The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
	DefaultFilterControlConfiguration TemplateDefaultFilterControlConfigurationPtrInput `pulumi:"defaultFilterControlConfiguration"`
	// The exclude period of the time range filter.
	ExcludePeriodConfiguration TemplateExcludePeriodConfigurationPtrInput `pulumi:"excludePeriodConfiguration"`
	// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
	FilterId pulumi.StringInput `pulumi:"filterId"`
	// Determines whether the maximum value in the filter value range should be included in the filtered results.
	IncludeMaximum pulumi.BoolPtrInput `pulumi:"includeMaximum"`
	// Determines whether the minimum value in the filter value range should be included in the filtered results.
	IncludeMinimum pulumi.BoolPtrInput `pulumi:"includeMinimum"`
	// This option determines how null values should be treated when filtering data.
	//
	// - `ALL_VALUES` : Include null values in filtered results.
	// - `NULLS_ONLY` : Only include null values in filtered results.
	// - `NON_NULLS_ONLY` : Exclude null values from filtered results.
	NullOption TemplateFilterNullOptionInput `pulumi:"nullOption"`
	// The maximum value for the filter value range.
	RangeMaximumValue TemplateTimeRangeFilterValuePtrInput `pulumi:"rangeMaximumValue"`
	// The minimum value for the filter value range.
	RangeMinimumValue TemplateTimeRangeFilterValuePtrInput `pulumi:"rangeMinimumValue"`
	// The level of time precision that is used to aggregate `DateTime` values.
	TimeGranularity TemplateTimeGranularityPtrInput `pulumi:"timeGranularity"`
}

func (TemplateTimeRangeFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTimeRangeFilter)(nil)).Elem()
}

func (i TemplateTimeRangeFilterArgs) ToTemplateTimeRangeFilterOutput() TemplateTimeRangeFilterOutput {
	return i.ToTemplateTimeRangeFilterOutputWithContext(context.Background())
}

func (i TemplateTimeRangeFilterArgs) ToTemplateTimeRangeFilterOutputWithContext(ctx context.Context) TemplateTimeRangeFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTimeRangeFilterOutput)
}

func (i TemplateTimeRangeFilterArgs) ToTemplateTimeRangeFilterPtrOutput() TemplateTimeRangeFilterPtrOutput {
	return i.ToTemplateTimeRangeFilterPtrOutputWithContext(context.Background())
}

func (i TemplateTimeRangeFilterArgs) ToTemplateTimeRangeFilterPtrOutputWithContext(ctx context.Context) TemplateTimeRangeFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTimeRangeFilterOutput).ToTemplateTimeRangeFilterPtrOutputWithContext(ctx)
}

// TemplateTimeRangeFilterPtrInput is an input type that accepts TemplateTimeRangeFilterArgs, TemplateTimeRangeFilterPtr and TemplateTimeRangeFilterPtrOutput values.
// You can construct a concrete instance of `TemplateTimeRangeFilterPtrInput` via:
//
//	        TemplateTimeRangeFilterArgs{...}
//
//	or:
//
//	        nil
type TemplateTimeRangeFilterPtrInput interface {
	pulumi.Input

	ToTemplateTimeRangeFilterPtrOutput() TemplateTimeRangeFilterPtrOutput
	ToTemplateTimeRangeFilterPtrOutputWithContext(context.Context) TemplateTimeRangeFilterPtrOutput
}

type templateTimeRangeFilterPtrType TemplateTimeRangeFilterArgs

func TemplateTimeRangeFilterPtr(v *TemplateTimeRangeFilterArgs) TemplateTimeRangeFilterPtrInput {
	return (*templateTimeRangeFilterPtrType)(v)
}

func (*templateTimeRangeFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTimeRangeFilter)(nil)).Elem()
}

func (i *templateTimeRangeFilterPtrType) ToTemplateTimeRangeFilterPtrOutput() TemplateTimeRangeFilterPtrOutput {
	return i.ToTemplateTimeRangeFilterPtrOutputWithContext(context.Background())
}

func (i *templateTimeRangeFilterPtrType) ToTemplateTimeRangeFilterPtrOutputWithContext(ctx context.Context) TemplateTimeRangeFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTimeRangeFilterPtrOutput)
}

type TemplateTimeRangeFilterOutput struct{ *pulumi.OutputState }

func (TemplateTimeRangeFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTimeRangeFilter)(nil)).Elem()
}

func (o TemplateTimeRangeFilterOutput) ToTemplateTimeRangeFilterOutput() TemplateTimeRangeFilterOutput {
	return o
}

func (o TemplateTimeRangeFilterOutput) ToTemplateTimeRangeFilterOutputWithContext(ctx context.Context) TemplateTimeRangeFilterOutput {
	return o
}

func (o TemplateTimeRangeFilterOutput) ToTemplateTimeRangeFilterPtrOutput() TemplateTimeRangeFilterPtrOutput {
	return o.ToTemplateTimeRangeFilterPtrOutputWithContext(context.Background())
}

func (o TemplateTimeRangeFilterOutput) ToTemplateTimeRangeFilterPtrOutputWithContext(ctx context.Context) TemplateTimeRangeFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTimeRangeFilter) *TemplateTimeRangeFilter {
		return &v
	}).(TemplateTimeRangeFilterPtrOutput)
}

// The column that the filter is applied to.
func (o TemplateTimeRangeFilterOutput) Column() TemplateColumnIdentifierOutput {
	return o.ApplyT(func(v TemplateTimeRangeFilter) TemplateColumnIdentifier { return v.Column }).(TemplateColumnIdentifierOutput)
}

// The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
func (o TemplateTimeRangeFilterOutput) DefaultFilterControlConfiguration() TemplateDefaultFilterControlConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateTimeRangeFilter) *TemplateDefaultFilterControlConfiguration {
		return v.DefaultFilterControlConfiguration
	}).(TemplateDefaultFilterControlConfigurationPtrOutput)
}

// The exclude period of the time range filter.
func (o TemplateTimeRangeFilterOutput) ExcludePeriodConfiguration() TemplateExcludePeriodConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateTimeRangeFilter) *TemplateExcludePeriodConfiguration {
		return v.ExcludePeriodConfiguration
	}).(TemplateExcludePeriodConfigurationPtrOutput)
}

// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
func (o TemplateTimeRangeFilterOutput) FilterId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateTimeRangeFilter) string { return v.FilterId }).(pulumi.StringOutput)
}

// Determines whether the maximum value in the filter value range should be included in the filtered results.
func (o TemplateTimeRangeFilterOutput) IncludeMaximum() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TemplateTimeRangeFilter) *bool { return v.IncludeMaximum }).(pulumi.BoolPtrOutput)
}

// Determines whether the minimum value in the filter value range should be included in the filtered results.
func (o TemplateTimeRangeFilterOutput) IncludeMinimum() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TemplateTimeRangeFilter) *bool { return v.IncludeMinimum }).(pulumi.BoolPtrOutput)
}

// This option determines how null values should be treated when filtering data.
//
// - `ALL_VALUES` : Include null values in filtered results.
// - `NULLS_ONLY` : Only include null values in filtered results.
// - `NON_NULLS_ONLY` : Exclude null values from filtered results.
func (o TemplateTimeRangeFilterOutput) NullOption() TemplateFilterNullOptionOutput {
	return o.ApplyT(func(v TemplateTimeRangeFilter) TemplateFilterNullOption { return v.NullOption }).(TemplateFilterNullOptionOutput)
}

// The maximum value for the filter value range.
func (o TemplateTimeRangeFilterOutput) RangeMaximumValue() TemplateTimeRangeFilterValuePtrOutput {
	return o.ApplyT(func(v TemplateTimeRangeFilter) *TemplateTimeRangeFilterValue { return v.RangeMaximumValue }).(TemplateTimeRangeFilterValuePtrOutput)
}

// The minimum value for the filter value range.
func (o TemplateTimeRangeFilterOutput) RangeMinimumValue() TemplateTimeRangeFilterValuePtrOutput {
	return o.ApplyT(func(v TemplateTimeRangeFilter) *TemplateTimeRangeFilterValue { return v.RangeMinimumValue }).(TemplateTimeRangeFilterValuePtrOutput)
}

// The level of time precision that is used to aggregate `DateTime` values.
func (o TemplateTimeRangeFilterOutput) TimeGranularity() TemplateTimeGranularityPtrOutput {
	return o.ApplyT(func(v TemplateTimeRangeFilter) *TemplateTimeGranularity { return v.TimeGranularity }).(TemplateTimeGranularityPtrOutput)
}

type TemplateTimeRangeFilterPtrOutput struct{ *pulumi.OutputState }

func (TemplateTimeRangeFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTimeRangeFilter)(nil)).Elem()
}

func (o TemplateTimeRangeFilterPtrOutput) ToTemplateTimeRangeFilterPtrOutput() TemplateTimeRangeFilterPtrOutput {
	return o
}

func (o TemplateTimeRangeFilterPtrOutput) ToTemplateTimeRangeFilterPtrOutputWithContext(ctx context.Context) TemplateTimeRangeFilterPtrOutput {
	return o
}

func (o TemplateTimeRangeFilterPtrOutput) Elem() TemplateTimeRangeFilterOutput {
	return o.ApplyT(func(v *TemplateTimeRangeFilter) TemplateTimeRangeFilter {
		if v != nil {
			return *v
		}
		var ret TemplateTimeRangeFilter
		return ret
	}).(TemplateTimeRangeFilterOutput)
}

// The column that the filter is applied to.
func (o TemplateTimeRangeFilterPtrOutput) Column() TemplateColumnIdentifierPtrOutput {
	return o.ApplyT(func(v *TemplateTimeRangeFilter) *TemplateColumnIdentifier {
		if v == nil {
			return nil
		}
		return &v.Column
	}).(TemplateColumnIdentifierPtrOutput)
}

// The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
func (o TemplateTimeRangeFilterPtrOutput) DefaultFilterControlConfiguration() TemplateDefaultFilterControlConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateTimeRangeFilter) *TemplateDefaultFilterControlConfiguration {
		if v == nil {
			return nil
		}
		return v.DefaultFilterControlConfiguration
	}).(TemplateDefaultFilterControlConfigurationPtrOutput)
}

// The exclude period of the time range filter.
func (o TemplateTimeRangeFilterPtrOutput) ExcludePeriodConfiguration() TemplateExcludePeriodConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateTimeRangeFilter) *TemplateExcludePeriodConfiguration {
		if v == nil {
			return nil
		}
		return v.ExcludePeriodConfiguration
	}).(TemplateExcludePeriodConfigurationPtrOutput)
}

// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
func (o TemplateTimeRangeFilterPtrOutput) FilterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateTimeRangeFilter) *string {
		if v == nil {
			return nil
		}
		return &v.FilterId
	}).(pulumi.StringPtrOutput)
}

// Determines whether the maximum value in the filter value range should be included in the filtered results.
func (o TemplateTimeRangeFilterPtrOutput) IncludeMaximum() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TemplateTimeRangeFilter) *bool {
		if v == nil {
			return nil
		}
		return v.IncludeMaximum
	}).(pulumi.BoolPtrOutput)
}

// Determines whether the minimum value in the filter value range should be included in the filtered results.
func (o TemplateTimeRangeFilterPtrOutput) IncludeMinimum() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TemplateTimeRangeFilter) *bool {
		if v == nil {
			return nil
		}
		return v.IncludeMinimum
	}).(pulumi.BoolPtrOutput)
}

// This option determines how null values should be treated when filtering data.
//
// - `ALL_VALUES` : Include null values in filtered results.
// - `NULLS_ONLY` : Only include null values in filtered results.
// - `NON_NULLS_ONLY` : Exclude null values from filtered results.
func (o TemplateTimeRangeFilterPtrOutput) NullOption() TemplateFilterNullOptionPtrOutput {
	return o.ApplyT(func(v *TemplateTimeRangeFilter) *TemplateFilterNullOption {
		if v == nil {
			return nil
		}
		return &v.NullOption
	}).(TemplateFilterNullOptionPtrOutput)
}

// The maximum value for the filter value range.
func (o TemplateTimeRangeFilterPtrOutput) RangeMaximumValue() TemplateTimeRangeFilterValuePtrOutput {
	return o.ApplyT(func(v *TemplateTimeRangeFilter) *TemplateTimeRangeFilterValue {
		if v == nil {
			return nil
		}
		return v.RangeMaximumValue
	}).(TemplateTimeRangeFilterValuePtrOutput)
}

// The minimum value for the filter value range.
func (o TemplateTimeRangeFilterPtrOutput) RangeMinimumValue() TemplateTimeRangeFilterValuePtrOutput {
	return o.ApplyT(func(v *TemplateTimeRangeFilter) *TemplateTimeRangeFilterValue {
		if v == nil {
			return nil
		}
		return v.RangeMinimumValue
	}).(TemplateTimeRangeFilterValuePtrOutput)
}

// The level of time precision that is used to aggregate `DateTime` values.
func (o TemplateTimeRangeFilterPtrOutput) TimeGranularity() TemplateTimeGranularityPtrOutput {
	return o.ApplyT(func(v *TemplateTimeRangeFilter) *TemplateTimeGranularity {
		if v == nil {
			return nil
		}
		return v.TimeGranularity
	}).(TemplateTimeGranularityPtrOutput)
}

type TemplateTimeRangeFilterValue struct {
	// The parameter type input value.
	Parameter *string `pulumi:"parameter"`
	// The rolling date input value.
	RollingDate *TemplateRollingDateConfiguration `pulumi:"rollingDate"`
	// The static input value.
	StaticValue *string `pulumi:"staticValue"`
}

// TemplateTimeRangeFilterValueInput is an input type that accepts TemplateTimeRangeFilterValueArgs and TemplateTimeRangeFilterValueOutput values.
// You can construct a concrete instance of `TemplateTimeRangeFilterValueInput` via:
//
//	TemplateTimeRangeFilterValueArgs{...}
type TemplateTimeRangeFilterValueInput interface {
	pulumi.Input

	ToTemplateTimeRangeFilterValueOutput() TemplateTimeRangeFilterValueOutput
	ToTemplateTimeRangeFilterValueOutputWithContext(context.Context) TemplateTimeRangeFilterValueOutput
}

type TemplateTimeRangeFilterValueArgs struct {
	// The parameter type input value.
	Parameter pulumi.StringPtrInput `pulumi:"parameter"`
	// The rolling date input value.
	RollingDate TemplateRollingDateConfigurationPtrInput `pulumi:"rollingDate"`
	// The static input value.
	StaticValue pulumi.StringPtrInput `pulumi:"staticValue"`
}

func (TemplateTimeRangeFilterValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTimeRangeFilterValue)(nil)).Elem()
}

func (i TemplateTimeRangeFilterValueArgs) ToTemplateTimeRangeFilterValueOutput() TemplateTimeRangeFilterValueOutput {
	return i.ToTemplateTimeRangeFilterValueOutputWithContext(context.Background())
}

func (i TemplateTimeRangeFilterValueArgs) ToTemplateTimeRangeFilterValueOutputWithContext(ctx context.Context) TemplateTimeRangeFilterValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTimeRangeFilterValueOutput)
}

func (i TemplateTimeRangeFilterValueArgs) ToTemplateTimeRangeFilterValuePtrOutput() TemplateTimeRangeFilterValuePtrOutput {
	return i.ToTemplateTimeRangeFilterValuePtrOutputWithContext(context.Background())
}

func (i TemplateTimeRangeFilterValueArgs) ToTemplateTimeRangeFilterValuePtrOutputWithContext(ctx context.Context) TemplateTimeRangeFilterValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTimeRangeFilterValueOutput).ToTemplateTimeRangeFilterValuePtrOutputWithContext(ctx)
}

// TemplateTimeRangeFilterValuePtrInput is an input type that accepts TemplateTimeRangeFilterValueArgs, TemplateTimeRangeFilterValuePtr and TemplateTimeRangeFilterValuePtrOutput values.
// You can construct a concrete instance of `TemplateTimeRangeFilterValuePtrInput` via:
//
//	        TemplateTimeRangeFilterValueArgs{...}
//
//	or:
//
//	        nil
type TemplateTimeRangeFilterValuePtrInput interface {
	pulumi.Input

	ToTemplateTimeRangeFilterValuePtrOutput() TemplateTimeRangeFilterValuePtrOutput
	ToTemplateTimeRangeFilterValuePtrOutputWithContext(context.Context) TemplateTimeRangeFilterValuePtrOutput
}

type templateTimeRangeFilterValuePtrType TemplateTimeRangeFilterValueArgs

func TemplateTimeRangeFilterValuePtr(v *TemplateTimeRangeFilterValueArgs) TemplateTimeRangeFilterValuePtrInput {
	return (*templateTimeRangeFilterValuePtrType)(v)
}

func (*templateTimeRangeFilterValuePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTimeRangeFilterValue)(nil)).Elem()
}

func (i *templateTimeRangeFilterValuePtrType) ToTemplateTimeRangeFilterValuePtrOutput() TemplateTimeRangeFilterValuePtrOutput {
	return i.ToTemplateTimeRangeFilterValuePtrOutputWithContext(context.Background())
}

func (i *templateTimeRangeFilterValuePtrType) ToTemplateTimeRangeFilterValuePtrOutputWithContext(ctx context.Context) TemplateTimeRangeFilterValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTimeRangeFilterValuePtrOutput)
}

type TemplateTimeRangeFilterValueOutput struct{ *pulumi.OutputState }

func (TemplateTimeRangeFilterValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTimeRangeFilterValue)(nil)).Elem()
}

func (o TemplateTimeRangeFilterValueOutput) ToTemplateTimeRangeFilterValueOutput() TemplateTimeRangeFilterValueOutput {
	return o
}

func (o TemplateTimeRangeFilterValueOutput) ToTemplateTimeRangeFilterValueOutputWithContext(ctx context.Context) TemplateTimeRangeFilterValueOutput {
	return o
}

func (o TemplateTimeRangeFilterValueOutput) ToTemplateTimeRangeFilterValuePtrOutput() TemplateTimeRangeFilterValuePtrOutput {
	return o.ToTemplateTimeRangeFilterValuePtrOutputWithContext(context.Background())
}

func (o TemplateTimeRangeFilterValueOutput) ToTemplateTimeRangeFilterValuePtrOutputWithContext(ctx context.Context) TemplateTimeRangeFilterValuePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTimeRangeFilterValue) *TemplateTimeRangeFilterValue {
		return &v
	}).(TemplateTimeRangeFilterValuePtrOutput)
}

// The parameter type input value.
func (o TemplateTimeRangeFilterValueOutput) Parameter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateTimeRangeFilterValue) *string { return v.Parameter }).(pulumi.StringPtrOutput)
}

// The rolling date input value.
func (o TemplateTimeRangeFilterValueOutput) RollingDate() TemplateRollingDateConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateTimeRangeFilterValue) *TemplateRollingDateConfiguration { return v.RollingDate }).(TemplateRollingDateConfigurationPtrOutput)
}

// The static input value.
func (o TemplateTimeRangeFilterValueOutput) StaticValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateTimeRangeFilterValue) *string { return v.StaticValue }).(pulumi.StringPtrOutput)
}

type TemplateTimeRangeFilterValuePtrOutput struct{ *pulumi.OutputState }

func (TemplateTimeRangeFilterValuePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTimeRangeFilterValue)(nil)).Elem()
}

func (o TemplateTimeRangeFilterValuePtrOutput) ToTemplateTimeRangeFilterValuePtrOutput() TemplateTimeRangeFilterValuePtrOutput {
	return o
}

func (o TemplateTimeRangeFilterValuePtrOutput) ToTemplateTimeRangeFilterValuePtrOutputWithContext(ctx context.Context) TemplateTimeRangeFilterValuePtrOutput {
	return o
}

func (o TemplateTimeRangeFilterValuePtrOutput) Elem() TemplateTimeRangeFilterValueOutput {
	return o.ApplyT(func(v *TemplateTimeRangeFilterValue) TemplateTimeRangeFilterValue {
		if v != nil {
			return *v
		}
		var ret TemplateTimeRangeFilterValue
		return ret
	}).(TemplateTimeRangeFilterValueOutput)
}

// The parameter type input value.
func (o TemplateTimeRangeFilterValuePtrOutput) Parameter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateTimeRangeFilterValue) *string {
		if v == nil {
			return nil
		}
		return v.Parameter
	}).(pulumi.StringPtrOutput)
}

// The rolling date input value.
func (o TemplateTimeRangeFilterValuePtrOutput) RollingDate() TemplateRollingDateConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateTimeRangeFilterValue) *TemplateRollingDateConfiguration {
		if v == nil {
			return nil
		}
		return v.RollingDate
	}).(TemplateRollingDateConfigurationPtrOutput)
}

// The static input value.
func (o TemplateTimeRangeFilterValuePtrOutput) StaticValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateTimeRangeFilterValue) *string {
		if v == nil {
			return nil
		}
		return v.StaticValue
	}).(pulumi.StringPtrOutput)
}

type TemplateTooltipItem struct {
	// The tooltip item for the columns that are not part of a field well.
	ColumnTooltipItem *TemplateColumnTooltipItem `pulumi:"columnTooltipItem"`
	// The tooltip item for the fields.
	FieldTooltipItem *TemplateFieldTooltipItem `pulumi:"fieldTooltipItem"`
}

// TemplateTooltipItemInput is an input type that accepts TemplateTooltipItemArgs and TemplateTooltipItemOutput values.
// You can construct a concrete instance of `TemplateTooltipItemInput` via:
//
//	TemplateTooltipItemArgs{...}
type TemplateTooltipItemInput interface {
	pulumi.Input

	ToTemplateTooltipItemOutput() TemplateTooltipItemOutput
	ToTemplateTooltipItemOutputWithContext(context.Context) TemplateTooltipItemOutput
}

type TemplateTooltipItemArgs struct {
	// The tooltip item for the columns that are not part of a field well.
	ColumnTooltipItem TemplateColumnTooltipItemPtrInput `pulumi:"columnTooltipItem"`
	// The tooltip item for the fields.
	FieldTooltipItem TemplateFieldTooltipItemPtrInput `pulumi:"fieldTooltipItem"`
}

func (TemplateTooltipItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTooltipItem)(nil)).Elem()
}

func (i TemplateTooltipItemArgs) ToTemplateTooltipItemOutput() TemplateTooltipItemOutput {
	return i.ToTemplateTooltipItemOutputWithContext(context.Background())
}

func (i TemplateTooltipItemArgs) ToTemplateTooltipItemOutputWithContext(ctx context.Context) TemplateTooltipItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTooltipItemOutput)
}

// TemplateTooltipItemArrayInput is an input type that accepts TemplateTooltipItemArray and TemplateTooltipItemArrayOutput values.
// You can construct a concrete instance of `TemplateTooltipItemArrayInput` via:
//
//	TemplateTooltipItemArray{ TemplateTooltipItemArgs{...} }
type TemplateTooltipItemArrayInput interface {
	pulumi.Input

	ToTemplateTooltipItemArrayOutput() TemplateTooltipItemArrayOutput
	ToTemplateTooltipItemArrayOutputWithContext(context.Context) TemplateTooltipItemArrayOutput
}

type TemplateTooltipItemArray []TemplateTooltipItemInput

func (TemplateTooltipItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateTooltipItem)(nil)).Elem()
}

func (i TemplateTooltipItemArray) ToTemplateTooltipItemArrayOutput() TemplateTooltipItemArrayOutput {
	return i.ToTemplateTooltipItemArrayOutputWithContext(context.Background())
}

func (i TemplateTooltipItemArray) ToTemplateTooltipItemArrayOutputWithContext(ctx context.Context) TemplateTooltipItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTooltipItemArrayOutput)
}

type TemplateTooltipItemOutput struct{ *pulumi.OutputState }

func (TemplateTooltipItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTooltipItem)(nil)).Elem()
}

func (o TemplateTooltipItemOutput) ToTemplateTooltipItemOutput() TemplateTooltipItemOutput {
	return o
}

func (o TemplateTooltipItemOutput) ToTemplateTooltipItemOutputWithContext(ctx context.Context) TemplateTooltipItemOutput {
	return o
}

// The tooltip item for the columns that are not part of a field well.
func (o TemplateTooltipItemOutput) ColumnTooltipItem() TemplateColumnTooltipItemPtrOutput {
	return o.ApplyT(func(v TemplateTooltipItem) *TemplateColumnTooltipItem { return v.ColumnTooltipItem }).(TemplateColumnTooltipItemPtrOutput)
}

// The tooltip item for the fields.
func (o TemplateTooltipItemOutput) FieldTooltipItem() TemplateFieldTooltipItemPtrOutput {
	return o.ApplyT(func(v TemplateTooltipItem) *TemplateFieldTooltipItem { return v.FieldTooltipItem }).(TemplateFieldTooltipItemPtrOutput)
}

type TemplateTooltipItemArrayOutput struct{ *pulumi.OutputState }

func (TemplateTooltipItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateTooltipItem)(nil)).Elem()
}

func (o TemplateTooltipItemArrayOutput) ToTemplateTooltipItemArrayOutput() TemplateTooltipItemArrayOutput {
	return o
}

func (o TemplateTooltipItemArrayOutput) ToTemplateTooltipItemArrayOutputWithContext(ctx context.Context) TemplateTooltipItemArrayOutput {
	return o
}

func (o TemplateTooltipItemArrayOutput) Index(i pulumi.IntInput) TemplateTooltipItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateTooltipItem {
		return vs[0].([]TemplateTooltipItem)[vs[1].(int)]
	}).(TemplateTooltipItemOutput)
}

type TemplateTooltipOptions struct {
	// The setup for the detailed tooltip. The tooltip setup is always saved. The display type is decided based on the tooltip type.
	FieldBasedTooltip *TemplateFieldBasedTooltip `pulumi:"fieldBasedTooltip"`
	// The selected type for the tooltip. Choose one of the following options:
	//
	// - `BASIC` : A basic tooltip.
	// - `DETAILED` : A detailed tooltip.
	SelectedTooltipType *TemplateSelectedTooltipType `pulumi:"selectedTooltipType"`
	// Determines whether or not the tooltip is visible.
	TooltipVisibility *TemplateVisibility `pulumi:"tooltipVisibility"`
}

// TemplateTooltipOptionsInput is an input type that accepts TemplateTooltipOptionsArgs and TemplateTooltipOptionsOutput values.
// You can construct a concrete instance of `TemplateTooltipOptionsInput` via:
//
//	TemplateTooltipOptionsArgs{...}
type TemplateTooltipOptionsInput interface {
	pulumi.Input

	ToTemplateTooltipOptionsOutput() TemplateTooltipOptionsOutput
	ToTemplateTooltipOptionsOutputWithContext(context.Context) TemplateTooltipOptionsOutput
}

type TemplateTooltipOptionsArgs struct {
	// The setup for the detailed tooltip. The tooltip setup is always saved. The display type is decided based on the tooltip type.
	FieldBasedTooltip TemplateFieldBasedTooltipPtrInput `pulumi:"fieldBasedTooltip"`
	// The selected type for the tooltip. Choose one of the following options:
	//
	// - `BASIC` : A basic tooltip.
	// - `DETAILED` : A detailed tooltip.
	SelectedTooltipType TemplateSelectedTooltipTypePtrInput `pulumi:"selectedTooltipType"`
	// Determines whether or not the tooltip is visible.
	TooltipVisibility TemplateVisibilityPtrInput `pulumi:"tooltipVisibility"`
}

func (TemplateTooltipOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTooltipOptions)(nil)).Elem()
}

func (i TemplateTooltipOptionsArgs) ToTemplateTooltipOptionsOutput() TemplateTooltipOptionsOutput {
	return i.ToTemplateTooltipOptionsOutputWithContext(context.Background())
}

func (i TemplateTooltipOptionsArgs) ToTemplateTooltipOptionsOutputWithContext(ctx context.Context) TemplateTooltipOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTooltipOptionsOutput)
}

func (i TemplateTooltipOptionsArgs) ToTemplateTooltipOptionsPtrOutput() TemplateTooltipOptionsPtrOutput {
	return i.ToTemplateTooltipOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateTooltipOptionsArgs) ToTemplateTooltipOptionsPtrOutputWithContext(ctx context.Context) TemplateTooltipOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTooltipOptionsOutput).ToTemplateTooltipOptionsPtrOutputWithContext(ctx)
}

// TemplateTooltipOptionsPtrInput is an input type that accepts TemplateTooltipOptionsArgs, TemplateTooltipOptionsPtr and TemplateTooltipOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateTooltipOptionsPtrInput` via:
//
//	        TemplateTooltipOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateTooltipOptionsPtrInput interface {
	pulumi.Input

	ToTemplateTooltipOptionsPtrOutput() TemplateTooltipOptionsPtrOutput
	ToTemplateTooltipOptionsPtrOutputWithContext(context.Context) TemplateTooltipOptionsPtrOutput
}

type templateTooltipOptionsPtrType TemplateTooltipOptionsArgs

func TemplateTooltipOptionsPtr(v *TemplateTooltipOptionsArgs) TemplateTooltipOptionsPtrInput {
	return (*templateTooltipOptionsPtrType)(v)
}

func (*templateTooltipOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTooltipOptions)(nil)).Elem()
}

func (i *templateTooltipOptionsPtrType) ToTemplateTooltipOptionsPtrOutput() TemplateTooltipOptionsPtrOutput {
	return i.ToTemplateTooltipOptionsPtrOutputWithContext(context.Background())
}

func (i *templateTooltipOptionsPtrType) ToTemplateTooltipOptionsPtrOutputWithContext(ctx context.Context) TemplateTooltipOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTooltipOptionsPtrOutput)
}

type TemplateTooltipOptionsOutput struct{ *pulumi.OutputState }

func (TemplateTooltipOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTooltipOptions)(nil)).Elem()
}

func (o TemplateTooltipOptionsOutput) ToTemplateTooltipOptionsOutput() TemplateTooltipOptionsOutput {
	return o
}

func (o TemplateTooltipOptionsOutput) ToTemplateTooltipOptionsOutputWithContext(ctx context.Context) TemplateTooltipOptionsOutput {
	return o
}

func (o TemplateTooltipOptionsOutput) ToTemplateTooltipOptionsPtrOutput() TemplateTooltipOptionsPtrOutput {
	return o.ToTemplateTooltipOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateTooltipOptionsOutput) ToTemplateTooltipOptionsPtrOutputWithContext(ctx context.Context) TemplateTooltipOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTooltipOptions) *TemplateTooltipOptions {
		return &v
	}).(TemplateTooltipOptionsPtrOutput)
}

// The setup for the detailed tooltip. The tooltip setup is always saved. The display type is decided based on the tooltip type.
func (o TemplateTooltipOptionsOutput) FieldBasedTooltip() TemplateFieldBasedTooltipPtrOutput {
	return o.ApplyT(func(v TemplateTooltipOptions) *TemplateFieldBasedTooltip { return v.FieldBasedTooltip }).(TemplateFieldBasedTooltipPtrOutput)
}

// The selected type for the tooltip. Choose one of the following options:
//
// - `BASIC` : A basic tooltip.
// - `DETAILED` : A detailed tooltip.
func (o TemplateTooltipOptionsOutput) SelectedTooltipType() TemplateSelectedTooltipTypePtrOutput {
	return o.ApplyT(func(v TemplateTooltipOptions) *TemplateSelectedTooltipType { return v.SelectedTooltipType }).(TemplateSelectedTooltipTypePtrOutput)
}

// Determines whether or not the tooltip is visible.
func (o TemplateTooltipOptionsOutput) TooltipVisibility() TemplateVisibilityPtrOutput {
	return o.ApplyT(func(v TemplateTooltipOptions) *TemplateVisibility { return v.TooltipVisibility }).(TemplateVisibilityPtrOutput)
}

type TemplateTooltipOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateTooltipOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTooltipOptions)(nil)).Elem()
}

func (o TemplateTooltipOptionsPtrOutput) ToTemplateTooltipOptionsPtrOutput() TemplateTooltipOptionsPtrOutput {
	return o
}

func (o TemplateTooltipOptionsPtrOutput) ToTemplateTooltipOptionsPtrOutputWithContext(ctx context.Context) TemplateTooltipOptionsPtrOutput {
	return o
}

func (o TemplateTooltipOptionsPtrOutput) Elem() TemplateTooltipOptionsOutput {
	return o.ApplyT(func(v *TemplateTooltipOptions) TemplateTooltipOptions {
		if v != nil {
			return *v
		}
		var ret TemplateTooltipOptions
		return ret
	}).(TemplateTooltipOptionsOutput)
}

// The setup for the detailed tooltip. The tooltip setup is always saved. The display type is decided based on the tooltip type.
func (o TemplateTooltipOptionsPtrOutput) FieldBasedTooltip() TemplateFieldBasedTooltipPtrOutput {
	return o.ApplyT(func(v *TemplateTooltipOptions) *TemplateFieldBasedTooltip {
		if v == nil {
			return nil
		}
		return v.FieldBasedTooltip
	}).(TemplateFieldBasedTooltipPtrOutput)
}

// The selected type for the tooltip. Choose one of the following options:
//
// - `BASIC` : A basic tooltip.
// - `DETAILED` : A detailed tooltip.
func (o TemplateTooltipOptionsPtrOutput) SelectedTooltipType() TemplateSelectedTooltipTypePtrOutput {
	return o.ApplyT(func(v *TemplateTooltipOptions) *TemplateSelectedTooltipType {
		if v == nil {
			return nil
		}
		return v.SelectedTooltipType
	}).(TemplateSelectedTooltipTypePtrOutput)
}

// Determines whether or not the tooltip is visible.
func (o TemplateTooltipOptionsPtrOutput) TooltipVisibility() TemplateVisibilityPtrOutput {
	return o.ApplyT(func(v *TemplateTooltipOptions) *TemplateVisibility {
		if v == nil {
			return nil
		}
		return v.TooltipVisibility
	}).(TemplateVisibilityPtrOutput)
}

type TemplateTopBottomFilter struct {
	// The aggregation and sort configuration of the top bottom filter.
	AggregationSortConfigurations []TemplateAggregationSortConfiguration `pulumi:"aggregationSortConfigurations"`
	// The column that the filter is applied to.
	Column TemplateColumnIdentifier `pulumi:"column"`
	// The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
	DefaultFilterControlConfiguration *TemplateDefaultFilterControlConfiguration `pulumi:"defaultFilterControlConfiguration"`
	// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
	FilterId string `pulumi:"filterId"`
	// The number of items to include in the top bottom filter results.
	Limit *float64 `pulumi:"limit"`
	// The parameter whose value should be used for the filter value.
	ParameterName *string `pulumi:"parameterName"`
	// The level of time precision that is used to aggregate `DateTime` values.
	TimeGranularity *TemplateTimeGranularity `pulumi:"timeGranularity"`
}

// TemplateTopBottomFilterInput is an input type that accepts TemplateTopBottomFilterArgs and TemplateTopBottomFilterOutput values.
// You can construct a concrete instance of `TemplateTopBottomFilterInput` via:
//
//	TemplateTopBottomFilterArgs{...}
type TemplateTopBottomFilterInput interface {
	pulumi.Input

	ToTemplateTopBottomFilterOutput() TemplateTopBottomFilterOutput
	ToTemplateTopBottomFilterOutputWithContext(context.Context) TemplateTopBottomFilterOutput
}

type TemplateTopBottomFilterArgs struct {
	// The aggregation and sort configuration of the top bottom filter.
	AggregationSortConfigurations TemplateAggregationSortConfigurationArrayInput `pulumi:"aggregationSortConfigurations"`
	// The column that the filter is applied to.
	Column TemplateColumnIdentifierInput `pulumi:"column"`
	// The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
	DefaultFilterControlConfiguration TemplateDefaultFilterControlConfigurationPtrInput `pulumi:"defaultFilterControlConfiguration"`
	// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
	FilterId pulumi.StringInput `pulumi:"filterId"`
	// The number of items to include in the top bottom filter results.
	Limit pulumi.Float64PtrInput `pulumi:"limit"`
	// The parameter whose value should be used for the filter value.
	ParameterName pulumi.StringPtrInput `pulumi:"parameterName"`
	// The level of time precision that is used to aggregate `DateTime` values.
	TimeGranularity TemplateTimeGranularityPtrInput `pulumi:"timeGranularity"`
}

func (TemplateTopBottomFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTopBottomFilter)(nil)).Elem()
}

func (i TemplateTopBottomFilterArgs) ToTemplateTopBottomFilterOutput() TemplateTopBottomFilterOutput {
	return i.ToTemplateTopBottomFilterOutputWithContext(context.Background())
}

func (i TemplateTopBottomFilterArgs) ToTemplateTopBottomFilterOutputWithContext(ctx context.Context) TemplateTopBottomFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTopBottomFilterOutput)
}

func (i TemplateTopBottomFilterArgs) ToTemplateTopBottomFilterPtrOutput() TemplateTopBottomFilterPtrOutput {
	return i.ToTemplateTopBottomFilterPtrOutputWithContext(context.Background())
}

func (i TemplateTopBottomFilterArgs) ToTemplateTopBottomFilterPtrOutputWithContext(ctx context.Context) TemplateTopBottomFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTopBottomFilterOutput).ToTemplateTopBottomFilterPtrOutputWithContext(ctx)
}

// TemplateTopBottomFilterPtrInput is an input type that accepts TemplateTopBottomFilterArgs, TemplateTopBottomFilterPtr and TemplateTopBottomFilterPtrOutput values.
// You can construct a concrete instance of `TemplateTopBottomFilterPtrInput` via:
//
//	        TemplateTopBottomFilterArgs{...}
//
//	or:
//
//	        nil
type TemplateTopBottomFilterPtrInput interface {
	pulumi.Input

	ToTemplateTopBottomFilterPtrOutput() TemplateTopBottomFilterPtrOutput
	ToTemplateTopBottomFilterPtrOutputWithContext(context.Context) TemplateTopBottomFilterPtrOutput
}

type templateTopBottomFilterPtrType TemplateTopBottomFilterArgs

func TemplateTopBottomFilterPtr(v *TemplateTopBottomFilterArgs) TemplateTopBottomFilterPtrInput {
	return (*templateTopBottomFilterPtrType)(v)
}

func (*templateTopBottomFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTopBottomFilter)(nil)).Elem()
}

func (i *templateTopBottomFilterPtrType) ToTemplateTopBottomFilterPtrOutput() TemplateTopBottomFilterPtrOutput {
	return i.ToTemplateTopBottomFilterPtrOutputWithContext(context.Background())
}

func (i *templateTopBottomFilterPtrType) ToTemplateTopBottomFilterPtrOutputWithContext(ctx context.Context) TemplateTopBottomFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTopBottomFilterPtrOutput)
}

type TemplateTopBottomFilterOutput struct{ *pulumi.OutputState }

func (TemplateTopBottomFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTopBottomFilter)(nil)).Elem()
}

func (o TemplateTopBottomFilterOutput) ToTemplateTopBottomFilterOutput() TemplateTopBottomFilterOutput {
	return o
}

func (o TemplateTopBottomFilterOutput) ToTemplateTopBottomFilterOutputWithContext(ctx context.Context) TemplateTopBottomFilterOutput {
	return o
}

func (o TemplateTopBottomFilterOutput) ToTemplateTopBottomFilterPtrOutput() TemplateTopBottomFilterPtrOutput {
	return o.ToTemplateTopBottomFilterPtrOutputWithContext(context.Background())
}

func (o TemplateTopBottomFilterOutput) ToTemplateTopBottomFilterPtrOutputWithContext(ctx context.Context) TemplateTopBottomFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTopBottomFilter) *TemplateTopBottomFilter {
		return &v
	}).(TemplateTopBottomFilterPtrOutput)
}

// The aggregation and sort configuration of the top bottom filter.
func (o TemplateTopBottomFilterOutput) AggregationSortConfigurations() TemplateAggregationSortConfigurationArrayOutput {
	return o.ApplyT(func(v TemplateTopBottomFilter) []TemplateAggregationSortConfiguration {
		return v.AggregationSortConfigurations
	}).(TemplateAggregationSortConfigurationArrayOutput)
}

// The column that the filter is applied to.
func (o TemplateTopBottomFilterOutput) Column() TemplateColumnIdentifierOutput {
	return o.ApplyT(func(v TemplateTopBottomFilter) TemplateColumnIdentifier { return v.Column }).(TemplateColumnIdentifierOutput)
}

// The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
func (o TemplateTopBottomFilterOutput) DefaultFilterControlConfiguration() TemplateDefaultFilterControlConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateTopBottomFilter) *TemplateDefaultFilterControlConfiguration {
		return v.DefaultFilterControlConfiguration
	}).(TemplateDefaultFilterControlConfigurationPtrOutput)
}

// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
func (o TemplateTopBottomFilterOutput) FilterId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateTopBottomFilter) string { return v.FilterId }).(pulumi.StringOutput)
}

// The number of items to include in the top bottom filter results.
func (o TemplateTopBottomFilterOutput) Limit() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateTopBottomFilter) *float64 { return v.Limit }).(pulumi.Float64PtrOutput)
}

// The parameter whose value should be used for the filter value.
func (o TemplateTopBottomFilterOutput) ParameterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateTopBottomFilter) *string { return v.ParameterName }).(pulumi.StringPtrOutput)
}

// The level of time precision that is used to aggregate `DateTime` values.
func (o TemplateTopBottomFilterOutput) TimeGranularity() TemplateTimeGranularityPtrOutput {
	return o.ApplyT(func(v TemplateTopBottomFilter) *TemplateTimeGranularity { return v.TimeGranularity }).(TemplateTimeGranularityPtrOutput)
}

type TemplateTopBottomFilterPtrOutput struct{ *pulumi.OutputState }

func (TemplateTopBottomFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTopBottomFilter)(nil)).Elem()
}

func (o TemplateTopBottomFilterPtrOutput) ToTemplateTopBottomFilterPtrOutput() TemplateTopBottomFilterPtrOutput {
	return o
}

func (o TemplateTopBottomFilterPtrOutput) ToTemplateTopBottomFilterPtrOutputWithContext(ctx context.Context) TemplateTopBottomFilterPtrOutput {
	return o
}

func (o TemplateTopBottomFilterPtrOutput) Elem() TemplateTopBottomFilterOutput {
	return o.ApplyT(func(v *TemplateTopBottomFilter) TemplateTopBottomFilter {
		if v != nil {
			return *v
		}
		var ret TemplateTopBottomFilter
		return ret
	}).(TemplateTopBottomFilterOutput)
}

// The aggregation and sort configuration of the top bottom filter.
func (o TemplateTopBottomFilterPtrOutput) AggregationSortConfigurations() TemplateAggregationSortConfigurationArrayOutput {
	return o.ApplyT(func(v *TemplateTopBottomFilter) []TemplateAggregationSortConfiguration {
		if v == nil {
			return nil
		}
		return v.AggregationSortConfigurations
	}).(TemplateAggregationSortConfigurationArrayOutput)
}

// The column that the filter is applied to.
func (o TemplateTopBottomFilterPtrOutput) Column() TemplateColumnIdentifierPtrOutput {
	return o.ApplyT(func(v *TemplateTopBottomFilter) *TemplateColumnIdentifier {
		if v == nil {
			return nil
		}
		return &v.Column
	}).(TemplateColumnIdentifierPtrOutput)
}

// The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
func (o TemplateTopBottomFilterPtrOutput) DefaultFilterControlConfiguration() TemplateDefaultFilterControlConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateTopBottomFilter) *TemplateDefaultFilterControlConfiguration {
		if v == nil {
			return nil
		}
		return v.DefaultFilterControlConfiguration
	}).(TemplateDefaultFilterControlConfigurationPtrOutput)
}

// An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
func (o TemplateTopBottomFilterPtrOutput) FilterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateTopBottomFilter) *string {
		if v == nil {
			return nil
		}
		return &v.FilterId
	}).(pulumi.StringPtrOutput)
}

// The number of items to include in the top bottom filter results.
func (o TemplateTopBottomFilterPtrOutput) Limit() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateTopBottomFilter) *float64 {
		if v == nil {
			return nil
		}
		return v.Limit
	}).(pulumi.Float64PtrOutput)
}

// The parameter whose value should be used for the filter value.
func (o TemplateTopBottomFilterPtrOutput) ParameterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateTopBottomFilter) *string {
		if v == nil {
			return nil
		}
		return v.ParameterName
	}).(pulumi.StringPtrOutput)
}

// The level of time precision that is used to aggregate `DateTime` values.
func (o TemplateTopBottomFilterPtrOutput) TimeGranularity() TemplateTimeGranularityPtrOutput {
	return o.ApplyT(func(v *TemplateTopBottomFilter) *TemplateTimeGranularity {
		if v == nil {
			return nil
		}
		return v.TimeGranularity
	}).(TemplateTimeGranularityPtrOutput)
}

type TemplateTopBottomMoversComputation struct {
	// The category field that is used in a computation.
	Category *TemplateDimensionField `pulumi:"category"`
	// The ID for a computation.
	ComputationId string `pulumi:"computationId"`
	// The mover size setup of the top and bottom movers computation.
	MoverSize *float64 `pulumi:"moverSize"`
	// The name of a computation.
	Name *string `pulumi:"name"`
	// The sort order setup of the top and bottom movers computation.
	SortOrder *TemplateTopBottomSortOrder `pulumi:"sortOrder"`
	// The time field that is used in a computation.
	Time *TemplateDimensionField `pulumi:"time"`
	// The computation type. Choose from the following options:
	//
	// - TOP: Top movers computation.
	// - BOTTOM: Bottom movers computation.
	Type TemplateTopBottomComputationType `pulumi:"type"`
	// The value field that is used in a computation.
	Value *TemplateMeasureField `pulumi:"value"`
}

// TemplateTopBottomMoversComputationInput is an input type that accepts TemplateTopBottomMoversComputationArgs and TemplateTopBottomMoversComputationOutput values.
// You can construct a concrete instance of `TemplateTopBottomMoversComputationInput` via:
//
//	TemplateTopBottomMoversComputationArgs{...}
type TemplateTopBottomMoversComputationInput interface {
	pulumi.Input

	ToTemplateTopBottomMoversComputationOutput() TemplateTopBottomMoversComputationOutput
	ToTemplateTopBottomMoversComputationOutputWithContext(context.Context) TemplateTopBottomMoversComputationOutput
}

type TemplateTopBottomMoversComputationArgs struct {
	// The category field that is used in a computation.
	Category TemplateDimensionFieldPtrInput `pulumi:"category"`
	// The ID for a computation.
	ComputationId pulumi.StringInput `pulumi:"computationId"`
	// The mover size setup of the top and bottom movers computation.
	MoverSize pulumi.Float64PtrInput `pulumi:"moverSize"`
	// The name of a computation.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The sort order setup of the top and bottom movers computation.
	SortOrder TemplateTopBottomSortOrderPtrInput `pulumi:"sortOrder"`
	// The time field that is used in a computation.
	Time TemplateDimensionFieldPtrInput `pulumi:"time"`
	// The computation type. Choose from the following options:
	//
	// - TOP: Top movers computation.
	// - BOTTOM: Bottom movers computation.
	Type TemplateTopBottomComputationTypeInput `pulumi:"type"`
	// The value field that is used in a computation.
	Value TemplateMeasureFieldPtrInput `pulumi:"value"`
}

func (TemplateTopBottomMoversComputationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTopBottomMoversComputation)(nil)).Elem()
}

func (i TemplateTopBottomMoversComputationArgs) ToTemplateTopBottomMoversComputationOutput() TemplateTopBottomMoversComputationOutput {
	return i.ToTemplateTopBottomMoversComputationOutputWithContext(context.Background())
}

func (i TemplateTopBottomMoversComputationArgs) ToTemplateTopBottomMoversComputationOutputWithContext(ctx context.Context) TemplateTopBottomMoversComputationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTopBottomMoversComputationOutput)
}

func (i TemplateTopBottomMoversComputationArgs) ToTemplateTopBottomMoversComputationPtrOutput() TemplateTopBottomMoversComputationPtrOutput {
	return i.ToTemplateTopBottomMoversComputationPtrOutputWithContext(context.Background())
}

func (i TemplateTopBottomMoversComputationArgs) ToTemplateTopBottomMoversComputationPtrOutputWithContext(ctx context.Context) TemplateTopBottomMoversComputationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTopBottomMoversComputationOutput).ToTemplateTopBottomMoversComputationPtrOutputWithContext(ctx)
}

// TemplateTopBottomMoversComputationPtrInput is an input type that accepts TemplateTopBottomMoversComputationArgs, TemplateTopBottomMoversComputationPtr and TemplateTopBottomMoversComputationPtrOutput values.
// You can construct a concrete instance of `TemplateTopBottomMoversComputationPtrInput` via:
//
//	        TemplateTopBottomMoversComputationArgs{...}
//
//	or:
//
//	        nil
type TemplateTopBottomMoversComputationPtrInput interface {
	pulumi.Input

	ToTemplateTopBottomMoversComputationPtrOutput() TemplateTopBottomMoversComputationPtrOutput
	ToTemplateTopBottomMoversComputationPtrOutputWithContext(context.Context) TemplateTopBottomMoversComputationPtrOutput
}

type templateTopBottomMoversComputationPtrType TemplateTopBottomMoversComputationArgs

func TemplateTopBottomMoversComputationPtr(v *TemplateTopBottomMoversComputationArgs) TemplateTopBottomMoversComputationPtrInput {
	return (*templateTopBottomMoversComputationPtrType)(v)
}

func (*templateTopBottomMoversComputationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTopBottomMoversComputation)(nil)).Elem()
}

func (i *templateTopBottomMoversComputationPtrType) ToTemplateTopBottomMoversComputationPtrOutput() TemplateTopBottomMoversComputationPtrOutput {
	return i.ToTemplateTopBottomMoversComputationPtrOutputWithContext(context.Background())
}

func (i *templateTopBottomMoversComputationPtrType) ToTemplateTopBottomMoversComputationPtrOutputWithContext(ctx context.Context) TemplateTopBottomMoversComputationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTopBottomMoversComputationPtrOutput)
}

type TemplateTopBottomMoversComputationOutput struct{ *pulumi.OutputState }

func (TemplateTopBottomMoversComputationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTopBottomMoversComputation)(nil)).Elem()
}

func (o TemplateTopBottomMoversComputationOutput) ToTemplateTopBottomMoversComputationOutput() TemplateTopBottomMoversComputationOutput {
	return o
}

func (o TemplateTopBottomMoversComputationOutput) ToTemplateTopBottomMoversComputationOutputWithContext(ctx context.Context) TemplateTopBottomMoversComputationOutput {
	return o
}

func (o TemplateTopBottomMoversComputationOutput) ToTemplateTopBottomMoversComputationPtrOutput() TemplateTopBottomMoversComputationPtrOutput {
	return o.ToTemplateTopBottomMoversComputationPtrOutputWithContext(context.Background())
}

func (o TemplateTopBottomMoversComputationOutput) ToTemplateTopBottomMoversComputationPtrOutputWithContext(ctx context.Context) TemplateTopBottomMoversComputationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTopBottomMoversComputation) *TemplateTopBottomMoversComputation {
		return &v
	}).(TemplateTopBottomMoversComputationPtrOutput)
}

// The category field that is used in a computation.
func (o TemplateTopBottomMoversComputationOutput) Category() TemplateDimensionFieldPtrOutput {
	return o.ApplyT(func(v TemplateTopBottomMoversComputation) *TemplateDimensionField { return v.Category }).(TemplateDimensionFieldPtrOutput)
}

// The ID for a computation.
func (o TemplateTopBottomMoversComputationOutput) ComputationId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateTopBottomMoversComputation) string { return v.ComputationId }).(pulumi.StringOutput)
}

// The mover size setup of the top and bottom movers computation.
func (o TemplateTopBottomMoversComputationOutput) MoverSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateTopBottomMoversComputation) *float64 { return v.MoverSize }).(pulumi.Float64PtrOutput)
}

// The name of a computation.
func (o TemplateTopBottomMoversComputationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateTopBottomMoversComputation) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The sort order setup of the top and bottom movers computation.
func (o TemplateTopBottomMoversComputationOutput) SortOrder() TemplateTopBottomSortOrderPtrOutput {
	return o.ApplyT(func(v TemplateTopBottomMoversComputation) *TemplateTopBottomSortOrder { return v.SortOrder }).(TemplateTopBottomSortOrderPtrOutput)
}

// The time field that is used in a computation.
func (o TemplateTopBottomMoversComputationOutput) Time() TemplateDimensionFieldPtrOutput {
	return o.ApplyT(func(v TemplateTopBottomMoversComputation) *TemplateDimensionField { return v.Time }).(TemplateDimensionFieldPtrOutput)
}

// The computation type. Choose from the following options:
//
// - TOP: Top movers computation.
// - BOTTOM: Bottom movers computation.
func (o TemplateTopBottomMoversComputationOutput) Type() TemplateTopBottomComputationTypeOutput {
	return o.ApplyT(func(v TemplateTopBottomMoversComputation) TemplateTopBottomComputationType { return v.Type }).(TemplateTopBottomComputationTypeOutput)
}

// The value field that is used in a computation.
func (o TemplateTopBottomMoversComputationOutput) Value() TemplateMeasureFieldPtrOutput {
	return o.ApplyT(func(v TemplateTopBottomMoversComputation) *TemplateMeasureField { return v.Value }).(TemplateMeasureFieldPtrOutput)
}

type TemplateTopBottomMoversComputationPtrOutput struct{ *pulumi.OutputState }

func (TemplateTopBottomMoversComputationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTopBottomMoversComputation)(nil)).Elem()
}

func (o TemplateTopBottomMoversComputationPtrOutput) ToTemplateTopBottomMoversComputationPtrOutput() TemplateTopBottomMoversComputationPtrOutput {
	return o
}

func (o TemplateTopBottomMoversComputationPtrOutput) ToTemplateTopBottomMoversComputationPtrOutputWithContext(ctx context.Context) TemplateTopBottomMoversComputationPtrOutput {
	return o
}

func (o TemplateTopBottomMoversComputationPtrOutput) Elem() TemplateTopBottomMoversComputationOutput {
	return o.ApplyT(func(v *TemplateTopBottomMoversComputation) TemplateTopBottomMoversComputation {
		if v != nil {
			return *v
		}
		var ret TemplateTopBottomMoversComputation
		return ret
	}).(TemplateTopBottomMoversComputationOutput)
}

// The category field that is used in a computation.
func (o TemplateTopBottomMoversComputationPtrOutput) Category() TemplateDimensionFieldPtrOutput {
	return o.ApplyT(func(v *TemplateTopBottomMoversComputation) *TemplateDimensionField {
		if v == nil {
			return nil
		}
		return v.Category
	}).(TemplateDimensionFieldPtrOutput)
}

// The ID for a computation.
func (o TemplateTopBottomMoversComputationPtrOutput) ComputationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateTopBottomMoversComputation) *string {
		if v == nil {
			return nil
		}
		return &v.ComputationId
	}).(pulumi.StringPtrOutput)
}

// The mover size setup of the top and bottom movers computation.
func (o TemplateTopBottomMoversComputationPtrOutput) MoverSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateTopBottomMoversComputation) *float64 {
		if v == nil {
			return nil
		}
		return v.MoverSize
	}).(pulumi.Float64PtrOutput)
}

// The name of a computation.
func (o TemplateTopBottomMoversComputationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateTopBottomMoversComputation) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The sort order setup of the top and bottom movers computation.
func (o TemplateTopBottomMoversComputationPtrOutput) SortOrder() TemplateTopBottomSortOrderPtrOutput {
	return o.ApplyT(func(v *TemplateTopBottomMoversComputation) *TemplateTopBottomSortOrder {
		if v == nil {
			return nil
		}
		return v.SortOrder
	}).(TemplateTopBottomSortOrderPtrOutput)
}

// The time field that is used in a computation.
func (o TemplateTopBottomMoversComputationPtrOutput) Time() TemplateDimensionFieldPtrOutput {
	return o.ApplyT(func(v *TemplateTopBottomMoversComputation) *TemplateDimensionField {
		if v == nil {
			return nil
		}
		return v.Time
	}).(TemplateDimensionFieldPtrOutput)
}

// The computation type. Choose from the following options:
//
// - TOP: Top movers computation.
// - BOTTOM: Bottom movers computation.
func (o TemplateTopBottomMoversComputationPtrOutput) Type() TemplateTopBottomComputationTypePtrOutput {
	return o.ApplyT(func(v *TemplateTopBottomMoversComputation) *TemplateTopBottomComputationType {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(TemplateTopBottomComputationTypePtrOutput)
}

// The value field that is used in a computation.
func (o TemplateTopBottomMoversComputationPtrOutput) Value() TemplateMeasureFieldPtrOutput {
	return o.ApplyT(func(v *TemplateTopBottomMoversComputation) *TemplateMeasureField {
		if v == nil {
			return nil
		}
		return v.Value
	}).(TemplateMeasureFieldPtrOutput)
}

type TemplateTopBottomRankedComputation struct {
	// The category field that is used in a computation.
	Category *TemplateDimensionField `pulumi:"category"`
	// The ID for a computation.
	ComputationId string `pulumi:"computationId"`
	// The name of a computation.
	Name *string `pulumi:"name"`
	// The result size of a top and bottom ranked computation.
	ResultSize *float64 `pulumi:"resultSize"`
	// The computation type. Choose one of the following options:
	//
	// - TOP: A top ranked computation.
	// - BOTTOM: A bottom ranked computation.
	Type TemplateTopBottomComputationType `pulumi:"type"`
	// The value field that is used in a computation.
	Value *TemplateMeasureField `pulumi:"value"`
}

// TemplateTopBottomRankedComputationInput is an input type that accepts TemplateTopBottomRankedComputationArgs and TemplateTopBottomRankedComputationOutput values.
// You can construct a concrete instance of `TemplateTopBottomRankedComputationInput` via:
//
//	TemplateTopBottomRankedComputationArgs{...}
type TemplateTopBottomRankedComputationInput interface {
	pulumi.Input

	ToTemplateTopBottomRankedComputationOutput() TemplateTopBottomRankedComputationOutput
	ToTemplateTopBottomRankedComputationOutputWithContext(context.Context) TemplateTopBottomRankedComputationOutput
}

type TemplateTopBottomRankedComputationArgs struct {
	// The category field that is used in a computation.
	Category TemplateDimensionFieldPtrInput `pulumi:"category"`
	// The ID for a computation.
	ComputationId pulumi.StringInput `pulumi:"computationId"`
	// The name of a computation.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The result size of a top and bottom ranked computation.
	ResultSize pulumi.Float64PtrInput `pulumi:"resultSize"`
	// The computation type. Choose one of the following options:
	//
	// - TOP: A top ranked computation.
	// - BOTTOM: A bottom ranked computation.
	Type TemplateTopBottomComputationTypeInput `pulumi:"type"`
	// The value field that is used in a computation.
	Value TemplateMeasureFieldPtrInput `pulumi:"value"`
}

func (TemplateTopBottomRankedComputationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTopBottomRankedComputation)(nil)).Elem()
}

func (i TemplateTopBottomRankedComputationArgs) ToTemplateTopBottomRankedComputationOutput() TemplateTopBottomRankedComputationOutput {
	return i.ToTemplateTopBottomRankedComputationOutputWithContext(context.Background())
}

func (i TemplateTopBottomRankedComputationArgs) ToTemplateTopBottomRankedComputationOutputWithContext(ctx context.Context) TemplateTopBottomRankedComputationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTopBottomRankedComputationOutput)
}

func (i TemplateTopBottomRankedComputationArgs) ToTemplateTopBottomRankedComputationPtrOutput() TemplateTopBottomRankedComputationPtrOutput {
	return i.ToTemplateTopBottomRankedComputationPtrOutputWithContext(context.Background())
}

func (i TemplateTopBottomRankedComputationArgs) ToTemplateTopBottomRankedComputationPtrOutputWithContext(ctx context.Context) TemplateTopBottomRankedComputationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTopBottomRankedComputationOutput).ToTemplateTopBottomRankedComputationPtrOutputWithContext(ctx)
}

// TemplateTopBottomRankedComputationPtrInput is an input type that accepts TemplateTopBottomRankedComputationArgs, TemplateTopBottomRankedComputationPtr and TemplateTopBottomRankedComputationPtrOutput values.
// You can construct a concrete instance of `TemplateTopBottomRankedComputationPtrInput` via:
//
//	        TemplateTopBottomRankedComputationArgs{...}
//
//	or:
//
//	        nil
type TemplateTopBottomRankedComputationPtrInput interface {
	pulumi.Input

	ToTemplateTopBottomRankedComputationPtrOutput() TemplateTopBottomRankedComputationPtrOutput
	ToTemplateTopBottomRankedComputationPtrOutputWithContext(context.Context) TemplateTopBottomRankedComputationPtrOutput
}

type templateTopBottomRankedComputationPtrType TemplateTopBottomRankedComputationArgs

func TemplateTopBottomRankedComputationPtr(v *TemplateTopBottomRankedComputationArgs) TemplateTopBottomRankedComputationPtrInput {
	return (*templateTopBottomRankedComputationPtrType)(v)
}

func (*templateTopBottomRankedComputationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTopBottomRankedComputation)(nil)).Elem()
}

func (i *templateTopBottomRankedComputationPtrType) ToTemplateTopBottomRankedComputationPtrOutput() TemplateTopBottomRankedComputationPtrOutput {
	return i.ToTemplateTopBottomRankedComputationPtrOutputWithContext(context.Background())
}

func (i *templateTopBottomRankedComputationPtrType) ToTemplateTopBottomRankedComputationPtrOutputWithContext(ctx context.Context) TemplateTopBottomRankedComputationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTopBottomRankedComputationPtrOutput)
}

type TemplateTopBottomRankedComputationOutput struct{ *pulumi.OutputState }

func (TemplateTopBottomRankedComputationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTopBottomRankedComputation)(nil)).Elem()
}

func (o TemplateTopBottomRankedComputationOutput) ToTemplateTopBottomRankedComputationOutput() TemplateTopBottomRankedComputationOutput {
	return o
}

func (o TemplateTopBottomRankedComputationOutput) ToTemplateTopBottomRankedComputationOutputWithContext(ctx context.Context) TemplateTopBottomRankedComputationOutput {
	return o
}

func (o TemplateTopBottomRankedComputationOutput) ToTemplateTopBottomRankedComputationPtrOutput() TemplateTopBottomRankedComputationPtrOutput {
	return o.ToTemplateTopBottomRankedComputationPtrOutputWithContext(context.Background())
}

func (o TemplateTopBottomRankedComputationOutput) ToTemplateTopBottomRankedComputationPtrOutputWithContext(ctx context.Context) TemplateTopBottomRankedComputationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTopBottomRankedComputation) *TemplateTopBottomRankedComputation {
		return &v
	}).(TemplateTopBottomRankedComputationPtrOutput)
}

// The category field that is used in a computation.
func (o TemplateTopBottomRankedComputationOutput) Category() TemplateDimensionFieldPtrOutput {
	return o.ApplyT(func(v TemplateTopBottomRankedComputation) *TemplateDimensionField { return v.Category }).(TemplateDimensionFieldPtrOutput)
}

// The ID for a computation.
func (o TemplateTopBottomRankedComputationOutput) ComputationId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateTopBottomRankedComputation) string { return v.ComputationId }).(pulumi.StringOutput)
}

// The name of a computation.
func (o TemplateTopBottomRankedComputationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateTopBottomRankedComputation) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The result size of a top and bottom ranked computation.
func (o TemplateTopBottomRankedComputationOutput) ResultSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateTopBottomRankedComputation) *float64 { return v.ResultSize }).(pulumi.Float64PtrOutput)
}

// The computation type. Choose one of the following options:
//
// - TOP: A top ranked computation.
// - BOTTOM: A bottom ranked computation.
func (o TemplateTopBottomRankedComputationOutput) Type() TemplateTopBottomComputationTypeOutput {
	return o.ApplyT(func(v TemplateTopBottomRankedComputation) TemplateTopBottomComputationType { return v.Type }).(TemplateTopBottomComputationTypeOutput)
}

// The value field that is used in a computation.
func (o TemplateTopBottomRankedComputationOutput) Value() TemplateMeasureFieldPtrOutput {
	return o.ApplyT(func(v TemplateTopBottomRankedComputation) *TemplateMeasureField { return v.Value }).(TemplateMeasureFieldPtrOutput)
}

type TemplateTopBottomRankedComputationPtrOutput struct{ *pulumi.OutputState }

func (TemplateTopBottomRankedComputationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTopBottomRankedComputation)(nil)).Elem()
}

func (o TemplateTopBottomRankedComputationPtrOutput) ToTemplateTopBottomRankedComputationPtrOutput() TemplateTopBottomRankedComputationPtrOutput {
	return o
}

func (o TemplateTopBottomRankedComputationPtrOutput) ToTemplateTopBottomRankedComputationPtrOutputWithContext(ctx context.Context) TemplateTopBottomRankedComputationPtrOutput {
	return o
}

func (o TemplateTopBottomRankedComputationPtrOutput) Elem() TemplateTopBottomRankedComputationOutput {
	return o.ApplyT(func(v *TemplateTopBottomRankedComputation) TemplateTopBottomRankedComputation {
		if v != nil {
			return *v
		}
		var ret TemplateTopBottomRankedComputation
		return ret
	}).(TemplateTopBottomRankedComputationOutput)
}

// The category field that is used in a computation.
func (o TemplateTopBottomRankedComputationPtrOutput) Category() TemplateDimensionFieldPtrOutput {
	return o.ApplyT(func(v *TemplateTopBottomRankedComputation) *TemplateDimensionField {
		if v == nil {
			return nil
		}
		return v.Category
	}).(TemplateDimensionFieldPtrOutput)
}

// The ID for a computation.
func (o TemplateTopBottomRankedComputationPtrOutput) ComputationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateTopBottomRankedComputation) *string {
		if v == nil {
			return nil
		}
		return &v.ComputationId
	}).(pulumi.StringPtrOutput)
}

// The name of a computation.
func (o TemplateTopBottomRankedComputationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateTopBottomRankedComputation) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The result size of a top and bottom ranked computation.
func (o TemplateTopBottomRankedComputationPtrOutput) ResultSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateTopBottomRankedComputation) *float64 {
		if v == nil {
			return nil
		}
		return v.ResultSize
	}).(pulumi.Float64PtrOutput)
}

// The computation type. Choose one of the following options:
//
// - TOP: A top ranked computation.
// - BOTTOM: A bottom ranked computation.
func (o TemplateTopBottomRankedComputationPtrOutput) Type() TemplateTopBottomComputationTypePtrOutput {
	return o.ApplyT(func(v *TemplateTopBottomRankedComputation) *TemplateTopBottomComputationType {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(TemplateTopBottomComputationTypePtrOutput)
}

// The value field that is used in a computation.
func (o TemplateTopBottomRankedComputationPtrOutput) Value() TemplateMeasureFieldPtrOutput {
	return o.ApplyT(func(v *TemplateTopBottomRankedComputation) *TemplateMeasureField {
		if v == nil {
			return nil
		}
		return v.Value
	}).(TemplateMeasureFieldPtrOutput)
}

type TemplateTotalAggregationComputation struct {
	// The ID for a computation.
	ComputationId string `pulumi:"computationId"`
	// The name of a computation.
	Name *string `pulumi:"name"`
	// The value field that is used in a computation.
	Value *TemplateMeasureField `pulumi:"value"`
}

// TemplateTotalAggregationComputationInput is an input type that accepts TemplateTotalAggregationComputationArgs and TemplateTotalAggregationComputationOutput values.
// You can construct a concrete instance of `TemplateTotalAggregationComputationInput` via:
//
//	TemplateTotalAggregationComputationArgs{...}
type TemplateTotalAggregationComputationInput interface {
	pulumi.Input

	ToTemplateTotalAggregationComputationOutput() TemplateTotalAggregationComputationOutput
	ToTemplateTotalAggregationComputationOutputWithContext(context.Context) TemplateTotalAggregationComputationOutput
}

type TemplateTotalAggregationComputationArgs struct {
	// The ID for a computation.
	ComputationId pulumi.StringInput `pulumi:"computationId"`
	// The name of a computation.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The value field that is used in a computation.
	Value TemplateMeasureFieldPtrInput `pulumi:"value"`
}

func (TemplateTotalAggregationComputationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTotalAggregationComputation)(nil)).Elem()
}

func (i TemplateTotalAggregationComputationArgs) ToTemplateTotalAggregationComputationOutput() TemplateTotalAggregationComputationOutput {
	return i.ToTemplateTotalAggregationComputationOutputWithContext(context.Background())
}

func (i TemplateTotalAggregationComputationArgs) ToTemplateTotalAggregationComputationOutputWithContext(ctx context.Context) TemplateTotalAggregationComputationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTotalAggregationComputationOutput)
}

func (i TemplateTotalAggregationComputationArgs) ToTemplateTotalAggregationComputationPtrOutput() TemplateTotalAggregationComputationPtrOutput {
	return i.ToTemplateTotalAggregationComputationPtrOutputWithContext(context.Background())
}

func (i TemplateTotalAggregationComputationArgs) ToTemplateTotalAggregationComputationPtrOutputWithContext(ctx context.Context) TemplateTotalAggregationComputationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTotalAggregationComputationOutput).ToTemplateTotalAggregationComputationPtrOutputWithContext(ctx)
}

// TemplateTotalAggregationComputationPtrInput is an input type that accepts TemplateTotalAggregationComputationArgs, TemplateTotalAggregationComputationPtr and TemplateTotalAggregationComputationPtrOutput values.
// You can construct a concrete instance of `TemplateTotalAggregationComputationPtrInput` via:
//
//	        TemplateTotalAggregationComputationArgs{...}
//
//	or:
//
//	        nil
type TemplateTotalAggregationComputationPtrInput interface {
	pulumi.Input

	ToTemplateTotalAggregationComputationPtrOutput() TemplateTotalAggregationComputationPtrOutput
	ToTemplateTotalAggregationComputationPtrOutputWithContext(context.Context) TemplateTotalAggregationComputationPtrOutput
}

type templateTotalAggregationComputationPtrType TemplateTotalAggregationComputationArgs

func TemplateTotalAggregationComputationPtr(v *TemplateTotalAggregationComputationArgs) TemplateTotalAggregationComputationPtrInput {
	return (*templateTotalAggregationComputationPtrType)(v)
}

func (*templateTotalAggregationComputationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTotalAggregationComputation)(nil)).Elem()
}

func (i *templateTotalAggregationComputationPtrType) ToTemplateTotalAggregationComputationPtrOutput() TemplateTotalAggregationComputationPtrOutput {
	return i.ToTemplateTotalAggregationComputationPtrOutputWithContext(context.Background())
}

func (i *templateTotalAggregationComputationPtrType) ToTemplateTotalAggregationComputationPtrOutputWithContext(ctx context.Context) TemplateTotalAggregationComputationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTotalAggregationComputationPtrOutput)
}

type TemplateTotalAggregationComputationOutput struct{ *pulumi.OutputState }

func (TemplateTotalAggregationComputationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTotalAggregationComputation)(nil)).Elem()
}

func (o TemplateTotalAggregationComputationOutput) ToTemplateTotalAggregationComputationOutput() TemplateTotalAggregationComputationOutput {
	return o
}

func (o TemplateTotalAggregationComputationOutput) ToTemplateTotalAggregationComputationOutputWithContext(ctx context.Context) TemplateTotalAggregationComputationOutput {
	return o
}

func (o TemplateTotalAggregationComputationOutput) ToTemplateTotalAggregationComputationPtrOutput() TemplateTotalAggregationComputationPtrOutput {
	return o.ToTemplateTotalAggregationComputationPtrOutputWithContext(context.Background())
}

func (o TemplateTotalAggregationComputationOutput) ToTemplateTotalAggregationComputationPtrOutputWithContext(ctx context.Context) TemplateTotalAggregationComputationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTotalAggregationComputation) *TemplateTotalAggregationComputation {
		return &v
	}).(TemplateTotalAggregationComputationPtrOutput)
}

// The ID for a computation.
func (o TemplateTotalAggregationComputationOutput) ComputationId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateTotalAggregationComputation) string { return v.ComputationId }).(pulumi.StringOutput)
}

// The name of a computation.
func (o TemplateTotalAggregationComputationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateTotalAggregationComputation) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The value field that is used in a computation.
func (o TemplateTotalAggregationComputationOutput) Value() TemplateMeasureFieldPtrOutput {
	return o.ApplyT(func(v TemplateTotalAggregationComputation) *TemplateMeasureField { return v.Value }).(TemplateMeasureFieldPtrOutput)
}

type TemplateTotalAggregationComputationPtrOutput struct{ *pulumi.OutputState }

func (TemplateTotalAggregationComputationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTotalAggregationComputation)(nil)).Elem()
}

func (o TemplateTotalAggregationComputationPtrOutput) ToTemplateTotalAggregationComputationPtrOutput() TemplateTotalAggregationComputationPtrOutput {
	return o
}

func (o TemplateTotalAggregationComputationPtrOutput) ToTemplateTotalAggregationComputationPtrOutputWithContext(ctx context.Context) TemplateTotalAggregationComputationPtrOutput {
	return o
}

func (o TemplateTotalAggregationComputationPtrOutput) Elem() TemplateTotalAggregationComputationOutput {
	return o.ApplyT(func(v *TemplateTotalAggregationComputation) TemplateTotalAggregationComputation {
		if v != nil {
			return *v
		}
		var ret TemplateTotalAggregationComputation
		return ret
	}).(TemplateTotalAggregationComputationOutput)
}

// The ID for a computation.
func (o TemplateTotalAggregationComputationPtrOutput) ComputationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateTotalAggregationComputation) *string {
		if v == nil {
			return nil
		}
		return &v.ComputationId
	}).(pulumi.StringPtrOutput)
}

// The name of a computation.
func (o TemplateTotalAggregationComputationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateTotalAggregationComputation) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The value field that is used in a computation.
func (o TemplateTotalAggregationComputationPtrOutput) Value() TemplateMeasureFieldPtrOutput {
	return o.ApplyT(func(v *TemplateTotalAggregationComputation) *TemplateMeasureField {
		if v == nil {
			return nil
		}
		return v.Value
	}).(TemplateMeasureFieldPtrOutput)
}

type TemplateTotalAggregationFunction struct {
	// A built in aggregation function for total values.
	SimpleTotalAggregationFunction *TemplateSimpleTotalAggregationFunction `pulumi:"simpleTotalAggregationFunction"`
}

// TemplateTotalAggregationFunctionInput is an input type that accepts TemplateTotalAggregationFunctionArgs and TemplateTotalAggregationFunctionOutput values.
// You can construct a concrete instance of `TemplateTotalAggregationFunctionInput` via:
//
//	TemplateTotalAggregationFunctionArgs{...}
type TemplateTotalAggregationFunctionInput interface {
	pulumi.Input

	ToTemplateTotalAggregationFunctionOutput() TemplateTotalAggregationFunctionOutput
	ToTemplateTotalAggregationFunctionOutputWithContext(context.Context) TemplateTotalAggregationFunctionOutput
}

type TemplateTotalAggregationFunctionArgs struct {
	// A built in aggregation function for total values.
	SimpleTotalAggregationFunction TemplateSimpleTotalAggregationFunctionPtrInput `pulumi:"simpleTotalAggregationFunction"`
}

func (TemplateTotalAggregationFunctionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTotalAggregationFunction)(nil)).Elem()
}

func (i TemplateTotalAggregationFunctionArgs) ToTemplateTotalAggregationFunctionOutput() TemplateTotalAggregationFunctionOutput {
	return i.ToTemplateTotalAggregationFunctionOutputWithContext(context.Background())
}

func (i TemplateTotalAggregationFunctionArgs) ToTemplateTotalAggregationFunctionOutputWithContext(ctx context.Context) TemplateTotalAggregationFunctionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTotalAggregationFunctionOutput)
}

type TemplateTotalAggregationFunctionOutput struct{ *pulumi.OutputState }

func (TemplateTotalAggregationFunctionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTotalAggregationFunction)(nil)).Elem()
}

func (o TemplateTotalAggregationFunctionOutput) ToTemplateTotalAggregationFunctionOutput() TemplateTotalAggregationFunctionOutput {
	return o
}

func (o TemplateTotalAggregationFunctionOutput) ToTemplateTotalAggregationFunctionOutputWithContext(ctx context.Context) TemplateTotalAggregationFunctionOutput {
	return o
}

// A built in aggregation function for total values.
func (o TemplateTotalAggregationFunctionOutput) SimpleTotalAggregationFunction() TemplateSimpleTotalAggregationFunctionPtrOutput {
	return o.ApplyT(func(v TemplateTotalAggregationFunction) *TemplateSimpleTotalAggregationFunction {
		return v.SimpleTotalAggregationFunction
	}).(TemplateSimpleTotalAggregationFunctionPtrOutput)
}

type TemplateTotalAggregationOption struct {
	// The field id that's associated with the total aggregation option.
	FieldId string `pulumi:"fieldId"`
	// The total aggregation function that you want to set for a specified field id.
	TotalAggregationFunction TemplateTotalAggregationFunction `pulumi:"totalAggregationFunction"`
}

// TemplateTotalAggregationOptionInput is an input type that accepts TemplateTotalAggregationOptionArgs and TemplateTotalAggregationOptionOutput values.
// You can construct a concrete instance of `TemplateTotalAggregationOptionInput` via:
//
//	TemplateTotalAggregationOptionArgs{...}
type TemplateTotalAggregationOptionInput interface {
	pulumi.Input

	ToTemplateTotalAggregationOptionOutput() TemplateTotalAggregationOptionOutput
	ToTemplateTotalAggregationOptionOutputWithContext(context.Context) TemplateTotalAggregationOptionOutput
}

type TemplateTotalAggregationOptionArgs struct {
	// The field id that's associated with the total aggregation option.
	FieldId pulumi.StringInput `pulumi:"fieldId"`
	// The total aggregation function that you want to set for a specified field id.
	TotalAggregationFunction TemplateTotalAggregationFunctionInput `pulumi:"totalAggregationFunction"`
}

func (TemplateTotalAggregationOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTotalAggregationOption)(nil)).Elem()
}

func (i TemplateTotalAggregationOptionArgs) ToTemplateTotalAggregationOptionOutput() TemplateTotalAggregationOptionOutput {
	return i.ToTemplateTotalAggregationOptionOutputWithContext(context.Background())
}

func (i TemplateTotalAggregationOptionArgs) ToTemplateTotalAggregationOptionOutputWithContext(ctx context.Context) TemplateTotalAggregationOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTotalAggregationOptionOutput)
}

// TemplateTotalAggregationOptionArrayInput is an input type that accepts TemplateTotalAggregationOptionArray and TemplateTotalAggregationOptionArrayOutput values.
// You can construct a concrete instance of `TemplateTotalAggregationOptionArrayInput` via:
//
//	TemplateTotalAggregationOptionArray{ TemplateTotalAggregationOptionArgs{...} }
type TemplateTotalAggregationOptionArrayInput interface {
	pulumi.Input

	ToTemplateTotalAggregationOptionArrayOutput() TemplateTotalAggregationOptionArrayOutput
	ToTemplateTotalAggregationOptionArrayOutputWithContext(context.Context) TemplateTotalAggregationOptionArrayOutput
}

type TemplateTotalAggregationOptionArray []TemplateTotalAggregationOptionInput

func (TemplateTotalAggregationOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateTotalAggregationOption)(nil)).Elem()
}

func (i TemplateTotalAggregationOptionArray) ToTemplateTotalAggregationOptionArrayOutput() TemplateTotalAggregationOptionArrayOutput {
	return i.ToTemplateTotalAggregationOptionArrayOutputWithContext(context.Background())
}

func (i TemplateTotalAggregationOptionArray) ToTemplateTotalAggregationOptionArrayOutputWithContext(ctx context.Context) TemplateTotalAggregationOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTotalAggregationOptionArrayOutput)
}

type TemplateTotalAggregationOptionOutput struct{ *pulumi.OutputState }

func (TemplateTotalAggregationOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTotalAggregationOption)(nil)).Elem()
}

func (o TemplateTotalAggregationOptionOutput) ToTemplateTotalAggregationOptionOutput() TemplateTotalAggregationOptionOutput {
	return o
}

func (o TemplateTotalAggregationOptionOutput) ToTemplateTotalAggregationOptionOutputWithContext(ctx context.Context) TemplateTotalAggregationOptionOutput {
	return o
}

// The field id that's associated with the total aggregation option.
func (o TemplateTotalAggregationOptionOutput) FieldId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateTotalAggregationOption) string { return v.FieldId }).(pulumi.StringOutput)
}

// The total aggregation function that you want to set for a specified field id.
func (o TemplateTotalAggregationOptionOutput) TotalAggregationFunction() TemplateTotalAggregationFunctionOutput {
	return o.ApplyT(func(v TemplateTotalAggregationOption) TemplateTotalAggregationFunction {
		return v.TotalAggregationFunction
	}).(TemplateTotalAggregationFunctionOutput)
}

type TemplateTotalAggregationOptionArrayOutput struct{ *pulumi.OutputState }

func (TemplateTotalAggregationOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateTotalAggregationOption)(nil)).Elem()
}

func (o TemplateTotalAggregationOptionArrayOutput) ToTemplateTotalAggregationOptionArrayOutput() TemplateTotalAggregationOptionArrayOutput {
	return o
}

func (o TemplateTotalAggregationOptionArrayOutput) ToTemplateTotalAggregationOptionArrayOutputWithContext(ctx context.Context) TemplateTotalAggregationOptionArrayOutput {
	return o
}

func (o TemplateTotalAggregationOptionArrayOutput) Index(i pulumi.IntInput) TemplateTotalAggregationOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateTotalAggregationOption {
		return vs[0].([]TemplateTotalAggregationOption)[vs[1].(int)]
	}).(TemplateTotalAggregationOptionOutput)
}

type TemplateTotalOptions struct {
	// The custom label string for the total cells.
	CustomLabel *string `pulumi:"customLabel"`
	// The placement (start, end) for the total cells.
	Placement *TemplateTableTotalsPlacement `pulumi:"placement"`
	// The scroll status (pinned, scrolled) for the total cells.
	ScrollStatus *TemplateTableTotalsScrollStatus `pulumi:"scrollStatus"`
	// The total aggregation settings for each value field.
	TotalAggregationOptions []TemplateTotalAggregationOption `pulumi:"totalAggregationOptions"`
	// Cell styling options for the total cells.
	TotalCellStyle *TemplateTableCellStyle `pulumi:"totalCellStyle"`
	// The visibility configuration for the total cells.
	TotalsVisibility *TemplateVisibility `pulumi:"totalsVisibility"`
}

// TemplateTotalOptionsInput is an input type that accepts TemplateTotalOptionsArgs and TemplateTotalOptionsOutput values.
// You can construct a concrete instance of `TemplateTotalOptionsInput` via:
//
//	TemplateTotalOptionsArgs{...}
type TemplateTotalOptionsInput interface {
	pulumi.Input

	ToTemplateTotalOptionsOutput() TemplateTotalOptionsOutput
	ToTemplateTotalOptionsOutputWithContext(context.Context) TemplateTotalOptionsOutput
}

type TemplateTotalOptionsArgs struct {
	// The custom label string for the total cells.
	CustomLabel pulumi.StringPtrInput `pulumi:"customLabel"`
	// The placement (start, end) for the total cells.
	Placement TemplateTableTotalsPlacementPtrInput `pulumi:"placement"`
	// The scroll status (pinned, scrolled) for the total cells.
	ScrollStatus TemplateTableTotalsScrollStatusPtrInput `pulumi:"scrollStatus"`
	// The total aggregation settings for each value field.
	TotalAggregationOptions TemplateTotalAggregationOptionArrayInput `pulumi:"totalAggregationOptions"`
	// Cell styling options for the total cells.
	TotalCellStyle TemplateTableCellStylePtrInput `pulumi:"totalCellStyle"`
	// The visibility configuration for the total cells.
	TotalsVisibility TemplateVisibilityPtrInput `pulumi:"totalsVisibility"`
}

func (TemplateTotalOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTotalOptions)(nil)).Elem()
}

func (i TemplateTotalOptionsArgs) ToTemplateTotalOptionsOutput() TemplateTotalOptionsOutput {
	return i.ToTemplateTotalOptionsOutputWithContext(context.Background())
}

func (i TemplateTotalOptionsArgs) ToTemplateTotalOptionsOutputWithContext(ctx context.Context) TemplateTotalOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTotalOptionsOutput)
}

func (i TemplateTotalOptionsArgs) ToTemplateTotalOptionsPtrOutput() TemplateTotalOptionsPtrOutput {
	return i.ToTemplateTotalOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateTotalOptionsArgs) ToTemplateTotalOptionsPtrOutputWithContext(ctx context.Context) TemplateTotalOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTotalOptionsOutput).ToTemplateTotalOptionsPtrOutputWithContext(ctx)
}

// TemplateTotalOptionsPtrInput is an input type that accepts TemplateTotalOptionsArgs, TemplateTotalOptionsPtr and TemplateTotalOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateTotalOptionsPtrInput` via:
//
//	        TemplateTotalOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateTotalOptionsPtrInput interface {
	pulumi.Input

	ToTemplateTotalOptionsPtrOutput() TemplateTotalOptionsPtrOutput
	ToTemplateTotalOptionsPtrOutputWithContext(context.Context) TemplateTotalOptionsPtrOutput
}

type templateTotalOptionsPtrType TemplateTotalOptionsArgs

func TemplateTotalOptionsPtr(v *TemplateTotalOptionsArgs) TemplateTotalOptionsPtrInput {
	return (*templateTotalOptionsPtrType)(v)
}

func (*templateTotalOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTotalOptions)(nil)).Elem()
}

func (i *templateTotalOptionsPtrType) ToTemplateTotalOptionsPtrOutput() TemplateTotalOptionsPtrOutput {
	return i.ToTemplateTotalOptionsPtrOutputWithContext(context.Background())
}

func (i *templateTotalOptionsPtrType) ToTemplateTotalOptionsPtrOutputWithContext(ctx context.Context) TemplateTotalOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTotalOptionsPtrOutput)
}

type TemplateTotalOptionsOutput struct{ *pulumi.OutputState }

func (TemplateTotalOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTotalOptions)(nil)).Elem()
}

func (o TemplateTotalOptionsOutput) ToTemplateTotalOptionsOutput() TemplateTotalOptionsOutput {
	return o
}

func (o TemplateTotalOptionsOutput) ToTemplateTotalOptionsOutputWithContext(ctx context.Context) TemplateTotalOptionsOutput {
	return o
}

func (o TemplateTotalOptionsOutput) ToTemplateTotalOptionsPtrOutput() TemplateTotalOptionsPtrOutput {
	return o.ToTemplateTotalOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateTotalOptionsOutput) ToTemplateTotalOptionsPtrOutputWithContext(ctx context.Context) TemplateTotalOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTotalOptions) *TemplateTotalOptions {
		return &v
	}).(TemplateTotalOptionsPtrOutput)
}

// The custom label string for the total cells.
func (o TemplateTotalOptionsOutput) CustomLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateTotalOptions) *string { return v.CustomLabel }).(pulumi.StringPtrOutput)
}

// The placement (start, end) for the total cells.
func (o TemplateTotalOptionsOutput) Placement() TemplateTableTotalsPlacementPtrOutput {
	return o.ApplyT(func(v TemplateTotalOptions) *TemplateTableTotalsPlacement { return v.Placement }).(TemplateTableTotalsPlacementPtrOutput)
}

// The scroll status (pinned, scrolled) for the total cells.
func (o TemplateTotalOptionsOutput) ScrollStatus() TemplateTableTotalsScrollStatusPtrOutput {
	return o.ApplyT(func(v TemplateTotalOptions) *TemplateTableTotalsScrollStatus { return v.ScrollStatus }).(TemplateTableTotalsScrollStatusPtrOutput)
}

// The total aggregation settings for each value field.
func (o TemplateTotalOptionsOutput) TotalAggregationOptions() TemplateTotalAggregationOptionArrayOutput {
	return o.ApplyT(func(v TemplateTotalOptions) []TemplateTotalAggregationOption { return v.TotalAggregationOptions }).(TemplateTotalAggregationOptionArrayOutput)
}

// Cell styling options for the total cells.
func (o TemplateTotalOptionsOutput) TotalCellStyle() TemplateTableCellStylePtrOutput {
	return o.ApplyT(func(v TemplateTotalOptions) *TemplateTableCellStyle { return v.TotalCellStyle }).(TemplateTableCellStylePtrOutput)
}

// The visibility configuration for the total cells.
func (o TemplateTotalOptionsOutput) TotalsVisibility() TemplateVisibilityPtrOutput {
	return o.ApplyT(func(v TemplateTotalOptions) *TemplateVisibility { return v.TotalsVisibility }).(TemplateVisibilityPtrOutput)
}

type TemplateTotalOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateTotalOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTotalOptions)(nil)).Elem()
}

func (o TemplateTotalOptionsPtrOutput) ToTemplateTotalOptionsPtrOutput() TemplateTotalOptionsPtrOutput {
	return o
}

func (o TemplateTotalOptionsPtrOutput) ToTemplateTotalOptionsPtrOutputWithContext(ctx context.Context) TemplateTotalOptionsPtrOutput {
	return o
}

func (o TemplateTotalOptionsPtrOutput) Elem() TemplateTotalOptionsOutput {
	return o.ApplyT(func(v *TemplateTotalOptions) TemplateTotalOptions {
		if v != nil {
			return *v
		}
		var ret TemplateTotalOptions
		return ret
	}).(TemplateTotalOptionsOutput)
}

// The custom label string for the total cells.
func (o TemplateTotalOptionsPtrOutput) CustomLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateTotalOptions) *string {
		if v == nil {
			return nil
		}
		return v.CustomLabel
	}).(pulumi.StringPtrOutput)
}

// The placement (start, end) for the total cells.
func (o TemplateTotalOptionsPtrOutput) Placement() TemplateTableTotalsPlacementPtrOutput {
	return o.ApplyT(func(v *TemplateTotalOptions) *TemplateTableTotalsPlacement {
		if v == nil {
			return nil
		}
		return v.Placement
	}).(TemplateTableTotalsPlacementPtrOutput)
}

// The scroll status (pinned, scrolled) for the total cells.
func (o TemplateTotalOptionsPtrOutput) ScrollStatus() TemplateTableTotalsScrollStatusPtrOutput {
	return o.ApplyT(func(v *TemplateTotalOptions) *TemplateTableTotalsScrollStatus {
		if v == nil {
			return nil
		}
		return v.ScrollStatus
	}).(TemplateTableTotalsScrollStatusPtrOutput)
}

// The total aggregation settings for each value field.
func (o TemplateTotalOptionsPtrOutput) TotalAggregationOptions() TemplateTotalAggregationOptionArrayOutput {
	return o.ApplyT(func(v *TemplateTotalOptions) []TemplateTotalAggregationOption {
		if v == nil {
			return nil
		}
		return v.TotalAggregationOptions
	}).(TemplateTotalAggregationOptionArrayOutput)
}

// Cell styling options for the total cells.
func (o TemplateTotalOptionsPtrOutput) TotalCellStyle() TemplateTableCellStylePtrOutput {
	return o.ApplyT(func(v *TemplateTotalOptions) *TemplateTableCellStyle {
		if v == nil {
			return nil
		}
		return v.TotalCellStyle
	}).(TemplateTableCellStylePtrOutput)
}

// The visibility configuration for the total cells.
func (o TemplateTotalOptionsPtrOutput) TotalsVisibility() TemplateVisibilityPtrOutput {
	return o.ApplyT(func(v *TemplateTotalOptions) *TemplateVisibility {
		if v == nil {
			return nil
		}
		return v.TotalsVisibility
	}).(TemplateVisibilityPtrOutput)
}

type TemplateTreeMapAggregatedFieldWells struct {
	// The color field well of a tree map. Values are grouped by aggregations based on group by fields.
	Colors []TemplateMeasureField `pulumi:"colors"`
	// The group by field well of a tree map. Values are grouped based on group by fields.
	Groups []TemplateDimensionField `pulumi:"groups"`
	// The size field well of a tree map. Values are aggregated based on group by fields.
	Sizes []TemplateMeasureField `pulumi:"sizes"`
}

// TemplateTreeMapAggregatedFieldWellsInput is an input type that accepts TemplateTreeMapAggregatedFieldWellsArgs and TemplateTreeMapAggregatedFieldWellsOutput values.
// You can construct a concrete instance of `TemplateTreeMapAggregatedFieldWellsInput` via:
//
//	TemplateTreeMapAggregatedFieldWellsArgs{...}
type TemplateTreeMapAggregatedFieldWellsInput interface {
	pulumi.Input

	ToTemplateTreeMapAggregatedFieldWellsOutput() TemplateTreeMapAggregatedFieldWellsOutput
	ToTemplateTreeMapAggregatedFieldWellsOutputWithContext(context.Context) TemplateTreeMapAggregatedFieldWellsOutput
}

type TemplateTreeMapAggregatedFieldWellsArgs struct {
	// The color field well of a tree map. Values are grouped by aggregations based on group by fields.
	Colors TemplateMeasureFieldArrayInput `pulumi:"colors"`
	// The group by field well of a tree map. Values are grouped based on group by fields.
	Groups TemplateDimensionFieldArrayInput `pulumi:"groups"`
	// The size field well of a tree map. Values are aggregated based on group by fields.
	Sizes TemplateMeasureFieldArrayInput `pulumi:"sizes"`
}

func (TemplateTreeMapAggregatedFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTreeMapAggregatedFieldWells)(nil)).Elem()
}

func (i TemplateTreeMapAggregatedFieldWellsArgs) ToTemplateTreeMapAggregatedFieldWellsOutput() TemplateTreeMapAggregatedFieldWellsOutput {
	return i.ToTemplateTreeMapAggregatedFieldWellsOutputWithContext(context.Background())
}

func (i TemplateTreeMapAggregatedFieldWellsArgs) ToTemplateTreeMapAggregatedFieldWellsOutputWithContext(ctx context.Context) TemplateTreeMapAggregatedFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTreeMapAggregatedFieldWellsOutput)
}

func (i TemplateTreeMapAggregatedFieldWellsArgs) ToTemplateTreeMapAggregatedFieldWellsPtrOutput() TemplateTreeMapAggregatedFieldWellsPtrOutput {
	return i.ToTemplateTreeMapAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i TemplateTreeMapAggregatedFieldWellsArgs) ToTemplateTreeMapAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateTreeMapAggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTreeMapAggregatedFieldWellsOutput).ToTemplateTreeMapAggregatedFieldWellsPtrOutputWithContext(ctx)
}

// TemplateTreeMapAggregatedFieldWellsPtrInput is an input type that accepts TemplateTreeMapAggregatedFieldWellsArgs, TemplateTreeMapAggregatedFieldWellsPtr and TemplateTreeMapAggregatedFieldWellsPtrOutput values.
// You can construct a concrete instance of `TemplateTreeMapAggregatedFieldWellsPtrInput` via:
//
//	        TemplateTreeMapAggregatedFieldWellsArgs{...}
//
//	or:
//
//	        nil
type TemplateTreeMapAggregatedFieldWellsPtrInput interface {
	pulumi.Input

	ToTemplateTreeMapAggregatedFieldWellsPtrOutput() TemplateTreeMapAggregatedFieldWellsPtrOutput
	ToTemplateTreeMapAggregatedFieldWellsPtrOutputWithContext(context.Context) TemplateTreeMapAggregatedFieldWellsPtrOutput
}

type templateTreeMapAggregatedFieldWellsPtrType TemplateTreeMapAggregatedFieldWellsArgs

func TemplateTreeMapAggregatedFieldWellsPtr(v *TemplateTreeMapAggregatedFieldWellsArgs) TemplateTreeMapAggregatedFieldWellsPtrInput {
	return (*templateTreeMapAggregatedFieldWellsPtrType)(v)
}

func (*templateTreeMapAggregatedFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTreeMapAggregatedFieldWells)(nil)).Elem()
}

func (i *templateTreeMapAggregatedFieldWellsPtrType) ToTemplateTreeMapAggregatedFieldWellsPtrOutput() TemplateTreeMapAggregatedFieldWellsPtrOutput {
	return i.ToTemplateTreeMapAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i *templateTreeMapAggregatedFieldWellsPtrType) ToTemplateTreeMapAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateTreeMapAggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTreeMapAggregatedFieldWellsPtrOutput)
}

type TemplateTreeMapAggregatedFieldWellsOutput struct{ *pulumi.OutputState }

func (TemplateTreeMapAggregatedFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTreeMapAggregatedFieldWells)(nil)).Elem()
}

func (o TemplateTreeMapAggregatedFieldWellsOutput) ToTemplateTreeMapAggregatedFieldWellsOutput() TemplateTreeMapAggregatedFieldWellsOutput {
	return o
}

func (o TemplateTreeMapAggregatedFieldWellsOutput) ToTemplateTreeMapAggregatedFieldWellsOutputWithContext(ctx context.Context) TemplateTreeMapAggregatedFieldWellsOutput {
	return o
}

func (o TemplateTreeMapAggregatedFieldWellsOutput) ToTemplateTreeMapAggregatedFieldWellsPtrOutput() TemplateTreeMapAggregatedFieldWellsPtrOutput {
	return o.ToTemplateTreeMapAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (o TemplateTreeMapAggregatedFieldWellsOutput) ToTemplateTreeMapAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateTreeMapAggregatedFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTreeMapAggregatedFieldWells) *TemplateTreeMapAggregatedFieldWells {
		return &v
	}).(TemplateTreeMapAggregatedFieldWellsPtrOutput)
}

// The color field well of a tree map. Values are grouped by aggregations based on group by fields.
func (o TemplateTreeMapAggregatedFieldWellsOutput) Colors() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v TemplateTreeMapAggregatedFieldWells) []TemplateMeasureField { return v.Colors }).(TemplateMeasureFieldArrayOutput)
}

// The group by field well of a tree map. Values are grouped based on group by fields.
func (o TemplateTreeMapAggregatedFieldWellsOutput) Groups() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v TemplateTreeMapAggregatedFieldWells) []TemplateDimensionField { return v.Groups }).(TemplateDimensionFieldArrayOutput)
}

// The size field well of a tree map. Values are aggregated based on group by fields.
func (o TemplateTreeMapAggregatedFieldWellsOutput) Sizes() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v TemplateTreeMapAggregatedFieldWells) []TemplateMeasureField { return v.Sizes }).(TemplateMeasureFieldArrayOutput)
}

type TemplateTreeMapAggregatedFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (TemplateTreeMapAggregatedFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTreeMapAggregatedFieldWells)(nil)).Elem()
}

func (o TemplateTreeMapAggregatedFieldWellsPtrOutput) ToTemplateTreeMapAggregatedFieldWellsPtrOutput() TemplateTreeMapAggregatedFieldWellsPtrOutput {
	return o
}

func (o TemplateTreeMapAggregatedFieldWellsPtrOutput) ToTemplateTreeMapAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateTreeMapAggregatedFieldWellsPtrOutput {
	return o
}

func (o TemplateTreeMapAggregatedFieldWellsPtrOutput) Elem() TemplateTreeMapAggregatedFieldWellsOutput {
	return o.ApplyT(func(v *TemplateTreeMapAggregatedFieldWells) TemplateTreeMapAggregatedFieldWells {
		if v != nil {
			return *v
		}
		var ret TemplateTreeMapAggregatedFieldWells
		return ret
	}).(TemplateTreeMapAggregatedFieldWellsOutput)
}

// The color field well of a tree map. Values are grouped by aggregations based on group by fields.
func (o TemplateTreeMapAggregatedFieldWellsPtrOutput) Colors() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v *TemplateTreeMapAggregatedFieldWells) []TemplateMeasureField {
		if v == nil {
			return nil
		}
		return v.Colors
	}).(TemplateMeasureFieldArrayOutput)
}

// The group by field well of a tree map. Values are grouped based on group by fields.
func (o TemplateTreeMapAggregatedFieldWellsPtrOutput) Groups() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v *TemplateTreeMapAggregatedFieldWells) []TemplateDimensionField {
		if v == nil {
			return nil
		}
		return v.Groups
	}).(TemplateDimensionFieldArrayOutput)
}

// The size field well of a tree map. Values are aggregated based on group by fields.
func (o TemplateTreeMapAggregatedFieldWellsPtrOutput) Sizes() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v *TemplateTreeMapAggregatedFieldWells) []TemplateMeasureField {
		if v == nil {
			return nil
		}
		return v.Sizes
	}).(TemplateMeasureFieldArrayOutput)
}

type TemplateTreeMapConfiguration struct {
	// The label options (label text, label visibility) for the colors displayed in a tree map.
	ColorLabelOptions *TemplateChartAxisLabelOptions `pulumi:"colorLabelOptions"`
	// The color options (gradient color, point of divergence) of a tree map.
	ColorScale *TemplateColorScale `pulumi:"colorScale"`
	// The options that determine if visual data labels are displayed.
	DataLabels *TemplateDataLabelOptions `pulumi:"dataLabels"`
	// The field wells of the visual.
	FieldWells *TemplateTreeMapFieldWells `pulumi:"fieldWells"`
	// The label options (label text, label visibility) of the groups that are displayed in a tree map.
	GroupLabelOptions *TemplateChartAxisLabelOptions `pulumi:"groupLabelOptions"`
	// The legend display setup of the visual.
	Legend *TemplateLegendOptions `pulumi:"legend"`
	// The label options (label text, label visibility) of the sizes that are displayed in a tree map.
	SizeLabelOptions *TemplateChartAxisLabelOptions `pulumi:"sizeLabelOptions"`
	// The sort configuration of a tree map.
	SortConfiguration *TemplateTreeMapSortConfiguration `pulumi:"sortConfiguration"`
	// The tooltip display setup of the visual.
	Tooltip *TemplateTooltipOptions `pulumi:"tooltip"`
}

// TemplateTreeMapConfigurationInput is an input type that accepts TemplateTreeMapConfigurationArgs and TemplateTreeMapConfigurationOutput values.
// You can construct a concrete instance of `TemplateTreeMapConfigurationInput` via:
//
//	TemplateTreeMapConfigurationArgs{...}
type TemplateTreeMapConfigurationInput interface {
	pulumi.Input

	ToTemplateTreeMapConfigurationOutput() TemplateTreeMapConfigurationOutput
	ToTemplateTreeMapConfigurationOutputWithContext(context.Context) TemplateTreeMapConfigurationOutput
}

type TemplateTreeMapConfigurationArgs struct {
	// The label options (label text, label visibility) for the colors displayed in a tree map.
	ColorLabelOptions TemplateChartAxisLabelOptionsPtrInput `pulumi:"colorLabelOptions"`
	// The color options (gradient color, point of divergence) of a tree map.
	ColorScale TemplateColorScalePtrInput `pulumi:"colorScale"`
	// The options that determine if visual data labels are displayed.
	DataLabels TemplateDataLabelOptionsPtrInput `pulumi:"dataLabels"`
	// The field wells of the visual.
	FieldWells TemplateTreeMapFieldWellsPtrInput `pulumi:"fieldWells"`
	// The label options (label text, label visibility) of the groups that are displayed in a tree map.
	GroupLabelOptions TemplateChartAxisLabelOptionsPtrInput `pulumi:"groupLabelOptions"`
	// The legend display setup of the visual.
	Legend TemplateLegendOptionsPtrInput `pulumi:"legend"`
	// The label options (label text, label visibility) of the sizes that are displayed in a tree map.
	SizeLabelOptions TemplateChartAxisLabelOptionsPtrInput `pulumi:"sizeLabelOptions"`
	// The sort configuration of a tree map.
	SortConfiguration TemplateTreeMapSortConfigurationPtrInput `pulumi:"sortConfiguration"`
	// The tooltip display setup of the visual.
	Tooltip TemplateTooltipOptionsPtrInput `pulumi:"tooltip"`
}

func (TemplateTreeMapConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTreeMapConfiguration)(nil)).Elem()
}

func (i TemplateTreeMapConfigurationArgs) ToTemplateTreeMapConfigurationOutput() TemplateTreeMapConfigurationOutput {
	return i.ToTemplateTreeMapConfigurationOutputWithContext(context.Background())
}

func (i TemplateTreeMapConfigurationArgs) ToTemplateTreeMapConfigurationOutputWithContext(ctx context.Context) TemplateTreeMapConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTreeMapConfigurationOutput)
}

func (i TemplateTreeMapConfigurationArgs) ToTemplateTreeMapConfigurationPtrOutput() TemplateTreeMapConfigurationPtrOutput {
	return i.ToTemplateTreeMapConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateTreeMapConfigurationArgs) ToTemplateTreeMapConfigurationPtrOutputWithContext(ctx context.Context) TemplateTreeMapConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTreeMapConfigurationOutput).ToTemplateTreeMapConfigurationPtrOutputWithContext(ctx)
}

// TemplateTreeMapConfigurationPtrInput is an input type that accepts TemplateTreeMapConfigurationArgs, TemplateTreeMapConfigurationPtr and TemplateTreeMapConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateTreeMapConfigurationPtrInput` via:
//
//	        TemplateTreeMapConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateTreeMapConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateTreeMapConfigurationPtrOutput() TemplateTreeMapConfigurationPtrOutput
	ToTemplateTreeMapConfigurationPtrOutputWithContext(context.Context) TemplateTreeMapConfigurationPtrOutput
}

type templateTreeMapConfigurationPtrType TemplateTreeMapConfigurationArgs

func TemplateTreeMapConfigurationPtr(v *TemplateTreeMapConfigurationArgs) TemplateTreeMapConfigurationPtrInput {
	return (*templateTreeMapConfigurationPtrType)(v)
}

func (*templateTreeMapConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTreeMapConfiguration)(nil)).Elem()
}

func (i *templateTreeMapConfigurationPtrType) ToTemplateTreeMapConfigurationPtrOutput() TemplateTreeMapConfigurationPtrOutput {
	return i.ToTemplateTreeMapConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateTreeMapConfigurationPtrType) ToTemplateTreeMapConfigurationPtrOutputWithContext(ctx context.Context) TemplateTreeMapConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTreeMapConfigurationPtrOutput)
}

type TemplateTreeMapConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateTreeMapConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTreeMapConfiguration)(nil)).Elem()
}

func (o TemplateTreeMapConfigurationOutput) ToTemplateTreeMapConfigurationOutput() TemplateTreeMapConfigurationOutput {
	return o
}

func (o TemplateTreeMapConfigurationOutput) ToTemplateTreeMapConfigurationOutputWithContext(ctx context.Context) TemplateTreeMapConfigurationOutput {
	return o
}

func (o TemplateTreeMapConfigurationOutput) ToTemplateTreeMapConfigurationPtrOutput() TemplateTreeMapConfigurationPtrOutput {
	return o.ToTemplateTreeMapConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateTreeMapConfigurationOutput) ToTemplateTreeMapConfigurationPtrOutputWithContext(ctx context.Context) TemplateTreeMapConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTreeMapConfiguration) *TemplateTreeMapConfiguration {
		return &v
	}).(TemplateTreeMapConfigurationPtrOutput)
}

// The label options (label text, label visibility) for the colors displayed in a tree map.
func (o TemplateTreeMapConfigurationOutput) ColorLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTreeMapConfiguration) *TemplateChartAxisLabelOptions { return v.ColorLabelOptions }).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The color options (gradient color, point of divergence) of a tree map.
func (o TemplateTreeMapConfigurationOutput) ColorScale() TemplateColorScalePtrOutput {
	return o.ApplyT(func(v TemplateTreeMapConfiguration) *TemplateColorScale { return v.ColorScale }).(TemplateColorScalePtrOutput)
}

// The options that determine if visual data labels are displayed.
func (o TemplateTreeMapConfigurationOutput) DataLabels() TemplateDataLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTreeMapConfiguration) *TemplateDataLabelOptions { return v.DataLabels }).(TemplateDataLabelOptionsPtrOutput)
}

// The field wells of the visual.
func (o TemplateTreeMapConfigurationOutput) FieldWells() TemplateTreeMapFieldWellsPtrOutput {
	return o.ApplyT(func(v TemplateTreeMapConfiguration) *TemplateTreeMapFieldWells { return v.FieldWells }).(TemplateTreeMapFieldWellsPtrOutput)
}

// The label options (label text, label visibility) of the groups that are displayed in a tree map.
func (o TemplateTreeMapConfigurationOutput) GroupLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTreeMapConfiguration) *TemplateChartAxisLabelOptions { return v.GroupLabelOptions }).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The legend display setup of the visual.
func (o TemplateTreeMapConfigurationOutput) Legend() TemplateLegendOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTreeMapConfiguration) *TemplateLegendOptions { return v.Legend }).(TemplateLegendOptionsPtrOutput)
}

// The label options (label text, label visibility) of the sizes that are displayed in a tree map.
func (o TemplateTreeMapConfigurationOutput) SizeLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTreeMapConfiguration) *TemplateChartAxisLabelOptions { return v.SizeLabelOptions }).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The sort configuration of a tree map.
func (o TemplateTreeMapConfigurationOutput) SortConfiguration() TemplateTreeMapSortConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateTreeMapConfiguration) *TemplateTreeMapSortConfiguration { return v.SortConfiguration }).(TemplateTreeMapSortConfigurationPtrOutput)
}

// The tooltip display setup of the visual.
func (o TemplateTreeMapConfigurationOutput) Tooltip() TemplateTooltipOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTreeMapConfiguration) *TemplateTooltipOptions { return v.Tooltip }).(TemplateTooltipOptionsPtrOutput)
}

type TemplateTreeMapConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateTreeMapConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTreeMapConfiguration)(nil)).Elem()
}

func (o TemplateTreeMapConfigurationPtrOutput) ToTemplateTreeMapConfigurationPtrOutput() TemplateTreeMapConfigurationPtrOutput {
	return o
}

func (o TemplateTreeMapConfigurationPtrOutput) ToTemplateTreeMapConfigurationPtrOutputWithContext(ctx context.Context) TemplateTreeMapConfigurationPtrOutput {
	return o
}

func (o TemplateTreeMapConfigurationPtrOutput) Elem() TemplateTreeMapConfigurationOutput {
	return o.ApplyT(func(v *TemplateTreeMapConfiguration) TemplateTreeMapConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateTreeMapConfiguration
		return ret
	}).(TemplateTreeMapConfigurationOutput)
}

// The label options (label text, label visibility) for the colors displayed in a tree map.
func (o TemplateTreeMapConfigurationPtrOutput) ColorLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTreeMapConfiguration) *TemplateChartAxisLabelOptions {
		if v == nil {
			return nil
		}
		return v.ColorLabelOptions
	}).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The color options (gradient color, point of divergence) of a tree map.
func (o TemplateTreeMapConfigurationPtrOutput) ColorScale() TemplateColorScalePtrOutput {
	return o.ApplyT(func(v *TemplateTreeMapConfiguration) *TemplateColorScale {
		if v == nil {
			return nil
		}
		return v.ColorScale
	}).(TemplateColorScalePtrOutput)
}

// The options that determine if visual data labels are displayed.
func (o TemplateTreeMapConfigurationPtrOutput) DataLabels() TemplateDataLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTreeMapConfiguration) *TemplateDataLabelOptions {
		if v == nil {
			return nil
		}
		return v.DataLabels
	}).(TemplateDataLabelOptionsPtrOutput)
}

// The field wells of the visual.
func (o TemplateTreeMapConfigurationPtrOutput) FieldWells() TemplateTreeMapFieldWellsPtrOutput {
	return o.ApplyT(func(v *TemplateTreeMapConfiguration) *TemplateTreeMapFieldWells {
		if v == nil {
			return nil
		}
		return v.FieldWells
	}).(TemplateTreeMapFieldWellsPtrOutput)
}

// The label options (label text, label visibility) of the groups that are displayed in a tree map.
func (o TemplateTreeMapConfigurationPtrOutput) GroupLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTreeMapConfiguration) *TemplateChartAxisLabelOptions {
		if v == nil {
			return nil
		}
		return v.GroupLabelOptions
	}).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The legend display setup of the visual.
func (o TemplateTreeMapConfigurationPtrOutput) Legend() TemplateLegendOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTreeMapConfiguration) *TemplateLegendOptions {
		if v == nil {
			return nil
		}
		return v.Legend
	}).(TemplateLegendOptionsPtrOutput)
}

// The label options (label text, label visibility) of the sizes that are displayed in a tree map.
func (o TemplateTreeMapConfigurationPtrOutput) SizeLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTreeMapConfiguration) *TemplateChartAxisLabelOptions {
		if v == nil {
			return nil
		}
		return v.SizeLabelOptions
	}).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The sort configuration of a tree map.
func (o TemplateTreeMapConfigurationPtrOutput) SortConfiguration() TemplateTreeMapSortConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateTreeMapConfiguration) *TemplateTreeMapSortConfiguration {
		if v == nil {
			return nil
		}
		return v.SortConfiguration
	}).(TemplateTreeMapSortConfigurationPtrOutput)
}

// The tooltip display setup of the visual.
func (o TemplateTreeMapConfigurationPtrOutput) Tooltip() TemplateTooltipOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTreeMapConfiguration) *TemplateTooltipOptions {
		if v == nil {
			return nil
		}
		return v.Tooltip
	}).(TemplateTooltipOptionsPtrOutput)
}

type TemplateTreeMapFieldWells struct {
	// The aggregated field wells of a tree map.
	TreeMapAggregatedFieldWells *TemplateTreeMapAggregatedFieldWells `pulumi:"treeMapAggregatedFieldWells"`
}

// TemplateTreeMapFieldWellsInput is an input type that accepts TemplateTreeMapFieldWellsArgs and TemplateTreeMapFieldWellsOutput values.
// You can construct a concrete instance of `TemplateTreeMapFieldWellsInput` via:
//
//	TemplateTreeMapFieldWellsArgs{...}
type TemplateTreeMapFieldWellsInput interface {
	pulumi.Input

	ToTemplateTreeMapFieldWellsOutput() TemplateTreeMapFieldWellsOutput
	ToTemplateTreeMapFieldWellsOutputWithContext(context.Context) TemplateTreeMapFieldWellsOutput
}

type TemplateTreeMapFieldWellsArgs struct {
	// The aggregated field wells of a tree map.
	TreeMapAggregatedFieldWells TemplateTreeMapAggregatedFieldWellsPtrInput `pulumi:"treeMapAggregatedFieldWells"`
}

func (TemplateTreeMapFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTreeMapFieldWells)(nil)).Elem()
}

func (i TemplateTreeMapFieldWellsArgs) ToTemplateTreeMapFieldWellsOutput() TemplateTreeMapFieldWellsOutput {
	return i.ToTemplateTreeMapFieldWellsOutputWithContext(context.Background())
}

func (i TemplateTreeMapFieldWellsArgs) ToTemplateTreeMapFieldWellsOutputWithContext(ctx context.Context) TemplateTreeMapFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTreeMapFieldWellsOutput)
}

func (i TemplateTreeMapFieldWellsArgs) ToTemplateTreeMapFieldWellsPtrOutput() TemplateTreeMapFieldWellsPtrOutput {
	return i.ToTemplateTreeMapFieldWellsPtrOutputWithContext(context.Background())
}

func (i TemplateTreeMapFieldWellsArgs) ToTemplateTreeMapFieldWellsPtrOutputWithContext(ctx context.Context) TemplateTreeMapFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTreeMapFieldWellsOutput).ToTemplateTreeMapFieldWellsPtrOutputWithContext(ctx)
}

// TemplateTreeMapFieldWellsPtrInput is an input type that accepts TemplateTreeMapFieldWellsArgs, TemplateTreeMapFieldWellsPtr and TemplateTreeMapFieldWellsPtrOutput values.
// You can construct a concrete instance of `TemplateTreeMapFieldWellsPtrInput` via:
//
//	        TemplateTreeMapFieldWellsArgs{...}
//
//	or:
//
//	        nil
type TemplateTreeMapFieldWellsPtrInput interface {
	pulumi.Input

	ToTemplateTreeMapFieldWellsPtrOutput() TemplateTreeMapFieldWellsPtrOutput
	ToTemplateTreeMapFieldWellsPtrOutputWithContext(context.Context) TemplateTreeMapFieldWellsPtrOutput
}

type templateTreeMapFieldWellsPtrType TemplateTreeMapFieldWellsArgs

func TemplateTreeMapFieldWellsPtr(v *TemplateTreeMapFieldWellsArgs) TemplateTreeMapFieldWellsPtrInput {
	return (*templateTreeMapFieldWellsPtrType)(v)
}

func (*templateTreeMapFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTreeMapFieldWells)(nil)).Elem()
}

func (i *templateTreeMapFieldWellsPtrType) ToTemplateTreeMapFieldWellsPtrOutput() TemplateTreeMapFieldWellsPtrOutput {
	return i.ToTemplateTreeMapFieldWellsPtrOutputWithContext(context.Background())
}

func (i *templateTreeMapFieldWellsPtrType) ToTemplateTreeMapFieldWellsPtrOutputWithContext(ctx context.Context) TemplateTreeMapFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTreeMapFieldWellsPtrOutput)
}

type TemplateTreeMapFieldWellsOutput struct{ *pulumi.OutputState }

func (TemplateTreeMapFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTreeMapFieldWells)(nil)).Elem()
}

func (o TemplateTreeMapFieldWellsOutput) ToTemplateTreeMapFieldWellsOutput() TemplateTreeMapFieldWellsOutput {
	return o
}

func (o TemplateTreeMapFieldWellsOutput) ToTemplateTreeMapFieldWellsOutputWithContext(ctx context.Context) TemplateTreeMapFieldWellsOutput {
	return o
}

func (o TemplateTreeMapFieldWellsOutput) ToTemplateTreeMapFieldWellsPtrOutput() TemplateTreeMapFieldWellsPtrOutput {
	return o.ToTemplateTreeMapFieldWellsPtrOutputWithContext(context.Background())
}

func (o TemplateTreeMapFieldWellsOutput) ToTemplateTreeMapFieldWellsPtrOutputWithContext(ctx context.Context) TemplateTreeMapFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTreeMapFieldWells) *TemplateTreeMapFieldWells {
		return &v
	}).(TemplateTreeMapFieldWellsPtrOutput)
}

// The aggregated field wells of a tree map.
func (o TemplateTreeMapFieldWellsOutput) TreeMapAggregatedFieldWells() TemplateTreeMapAggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v TemplateTreeMapFieldWells) *TemplateTreeMapAggregatedFieldWells {
		return v.TreeMapAggregatedFieldWells
	}).(TemplateTreeMapAggregatedFieldWellsPtrOutput)
}

type TemplateTreeMapFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (TemplateTreeMapFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTreeMapFieldWells)(nil)).Elem()
}

func (o TemplateTreeMapFieldWellsPtrOutput) ToTemplateTreeMapFieldWellsPtrOutput() TemplateTreeMapFieldWellsPtrOutput {
	return o
}

func (o TemplateTreeMapFieldWellsPtrOutput) ToTemplateTreeMapFieldWellsPtrOutputWithContext(ctx context.Context) TemplateTreeMapFieldWellsPtrOutput {
	return o
}

func (o TemplateTreeMapFieldWellsPtrOutput) Elem() TemplateTreeMapFieldWellsOutput {
	return o.ApplyT(func(v *TemplateTreeMapFieldWells) TemplateTreeMapFieldWells {
		if v != nil {
			return *v
		}
		var ret TemplateTreeMapFieldWells
		return ret
	}).(TemplateTreeMapFieldWellsOutput)
}

// The aggregated field wells of a tree map.
func (o TemplateTreeMapFieldWellsPtrOutput) TreeMapAggregatedFieldWells() TemplateTreeMapAggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v *TemplateTreeMapFieldWells) *TemplateTreeMapAggregatedFieldWells {
		if v == nil {
			return nil
		}
		return v.TreeMapAggregatedFieldWells
	}).(TemplateTreeMapAggregatedFieldWellsPtrOutput)
}

type TemplateTreeMapSortConfiguration struct {
	// The limit on the number of groups that are displayed.
	TreeMapGroupItemsLimitConfiguration *TemplateItemsLimitConfiguration `pulumi:"treeMapGroupItemsLimitConfiguration"`
	// The sort configuration of group by fields.
	TreeMapSort []TemplateFieldSortOptions `pulumi:"treeMapSort"`
}

// TemplateTreeMapSortConfigurationInput is an input type that accepts TemplateTreeMapSortConfigurationArgs and TemplateTreeMapSortConfigurationOutput values.
// You can construct a concrete instance of `TemplateTreeMapSortConfigurationInput` via:
//
//	TemplateTreeMapSortConfigurationArgs{...}
type TemplateTreeMapSortConfigurationInput interface {
	pulumi.Input

	ToTemplateTreeMapSortConfigurationOutput() TemplateTreeMapSortConfigurationOutput
	ToTemplateTreeMapSortConfigurationOutputWithContext(context.Context) TemplateTreeMapSortConfigurationOutput
}

type TemplateTreeMapSortConfigurationArgs struct {
	// The limit on the number of groups that are displayed.
	TreeMapGroupItemsLimitConfiguration TemplateItemsLimitConfigurationPtrInput `pulumi:"treeMapGroupItemsLimitConfiguration"`
	// The sort configuration of group by fields.
	TreeMapSort TemplateFieldSortOptionsArrayInput `pulumi:"treeMapSort"`
}

func (TemplateTreeMapSortConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTreeMapSortConfiguration)(nil)).Elem()
}

func (i TemplateTreeMapSortConfigurationArgs) ToTemplateTreeMapSortConfigurationOutput() TemplateTreeMapSortConfigurationOutput {
	return i.ToTemplateTreeMapSortConfigurationOutputWithContext(context.Background())
}

func (i TemplateTreeMapSortConfigurationArgs) ToTemplateTreeMapSortConfigurationOutputWithContext(ctx context.Context) TemplateTreeMapSortConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTreeMapSortConfigurationOutput)
}

func (i TemplateTreeMapSortConfigurationArgs) ToTemplateTreeMapSortConfigurationPtrOutput() TemplateTreeMapSortConfigurationPtrOutput {
	return i.ToTemplateTreeMapSortConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateTreeMapSortConfigurationArgs) ToTemplateTreeMapSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateTreeMapSortConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTreeMapSortConfigurationOutput).ToTemplateTreeMapSortConfigurationPtrOutputWithContext(ctx)
}

// TemplateTreeMapSortConfigurationPtrInput is an input type that accepts TemplateTreeMapSortConfigurationArgs, TemplateTreeMapSortConfigurationPtr and TemplateTreeMapSortConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateTreeMapSortConfigurationPtrInput` via:
//
//	        TemplateTreeMapSortConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateTreeMapSortConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateTreeMapSortConfigurationPtrOutput() TemplateTreeMapSortConfigurationPtrOutput
	ToTemplateTreeMapSortConfigurationPtrOutputWithContext(context.Context) TemplateTreeMapSortConfigurationPtrOutput
}

type templateTreeMapSortConfigurationPtrType TemplateTreeMapSortConfigurationArgs

func TemplateTreeMapSortConfigurationPtr(v *TemplateTreeMapSortConfigurationArgs) TemplateTreeMapSortConfigurationPtrInput {
	return (*templateTreeMapSortConfigurationPtrType)(v)
}

func (*templateTreeMapSortConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTreeMapSortConfiguration)(nil)).Elem()
}

func (i *templateTreeMapSortConfigurationPtrType) ToTemplateTreeMapSortConfigurationPtrOutput() TemplateTreeMapSortConfigurationPtrOutput {
	return i.ToTemplateTreeMapSortConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateTreeMapSortConfigurationPtrType) ToTemplateTreeMapSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateTreeMapSortConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTreeMapSortConfigurationPtrOutput)
}

type TemplateTreeMapSortConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateTreeMapSortConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTreeMapSortConfiguration)(nil)).Elem()
}

func (o TemplateTreeMapSortConfigurationOutput) ToTemplateTreeMapSortConfigurationOutput() TemplateTreeMapSortConfigurationOutput {
	return o
}

func (o TemplateTreeMapSortConfigurationOutput) ToTemplateTreeMapSortConfigurationOutputWithContext(ctx context.Context) TemplateTreeMapSortConfigurationOutput {
	return o
}

func (o TemplateTreeMapSortConfigurationOutput) ToTemplateTreeMapSortConfigurationPtrOutput() TemplateTreeMapSortConfigurationPtrOutput {
	return o.ToTemplateTreeMapSortConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateTreeMapSortConfigurationOutput) ToTemplateTreeMapSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateTreeMapSortConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTreeMapSortConfiguration) *TemplateTreeMapSortConfiguration {
		return &v
	}).(TemplateTreeMapSortConfigurationPtrOutput)
}

// The limit on the number of groups that are displayed.
func (o TemplateTreeMapSortConfigurationOutput) TreeMapGroupItemsLimitConfiguration() TemplateItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateTreeMapSortConfiguration) *TemplateItemsLimitConfiguration {
		return v.TreeMapGroupItemsLimitConfiguration
	}).(TemplateItemsLimitConfigurationPtrOutput)
}

// The sort configuration of group by fields.
func (o TemplateTreeMapSortConfigurationOutput) TreeMapSort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v TemplateTreeMapSortConfiguration) []TemplateFieldSortOptions { return v.TreeMapSort }).(TemplateFieldSortOptionsArrayOutput)
}

type TemplateTreeMapSortConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateTreeMapSortConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTreeMapSortConfiguration)(nil)).Elem()
}

func (o TemplateTreeMapSortConfigurationPtrOutput) ToTemplateTreeMapSortConfigurationPtrOutput() TemplateTreeMapSortConfigurationPtrOutput {
	return o
}

func (o TemplateTreeMapSortConfigurationPtrOutput) ToTemplateTreeMapSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateTreeMapSortConfigurationPtrOutput {
	return o
}

func (o TemplateTreeMapSortConfigurationPtrOutput) Elem() TemplateTreeMapSortConfigurationOutput {
	return o.ApplyT(func(v *TemplateTreeMapSortConfiguration) TemplateTreeMapSortConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateTreeMapSortConfiguration
		return ret
	}).(TemplateTreeMapSortConfigurationOutput)
}

// The limit on the number of groups that are displayed.
func (o TemplateTreeMapSortConfigurationPtrOutput) TreeMapGroupItemsLimitConfiguration() TemplateItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateTreeMapSortConfiguration) *TemplateItemsLimitConfiguration {
		if v == nil {
			return nil
		}
		return v.TreeMapGroupItemsLimitConfiguration
	}).(TemplateItemsLimitConfigurationPtrOutput)
}

// The sort configuration of group by fields.
func (o TemplateTreeMapSortConfigurationPtrOutput) TreeMapSort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v *TemplateTreeMapSortConfiguration) []TemplateFieldSortOptions {
		if v == nil {
			return nil
		}
		return v.TreeMapSort
	}).(TemplateFieldSortOptionsArrayOutput)
}

type TemplateTreeMapVisual struct {
	// The list of custom actions that are configured for a visual.
	Actions []TemplateVisualCustomAction `pulumi:"actions"`
	// The configuration settings of the visual.
	ChartConfiguration *TemplateTreeMapConfiguration `pulumi:"chartConfiguration"`
	// The column hierarchy that is used during drill-downs and drill-ups.
	ColumnHierarchies []TemplateColumnHierarchy `pulumi:"columnHierarchies"`
	// The subtitle that is displayed on the visual.
	Subtitle *TemplateVisualSubtitleLabelOptions `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title *TemplateVisualTitleLabelOptions `pulumi:"title"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
	VisualId string `pulumi:"visualId"`
}

// TemplateTreeMapVisualInput is an input type that accepts TemplateTreeMapVisualArgs and TemplateTreeMapVisualOutput values.
// You can construct a concrete instance of `TemplateTreeMapVisualInput` via:
//
//	TemplateTreeMapVisualArgs{...}
type TemplateTreeMapVisualInput interface {
	pulumi.Input

	ToTemplateTreeMapVisualOutput() TemplateTreeMapVisualOutput
	ToTemplateTreeMapVisualOutputWithContext(context.Context) TemplateTreeMapVisualOutput
}

type TemplateTreeMapVisualArgs struct {
	// The list of custom actions that are configured for a visual.
	Actions TemplateVisualCustomActionArrayInput `pulumi:"actions"`
	// The configuration settings of the visual.
	ChartConfiguration TemplateTreeMapConfigurationPtrInput `pulumi:"chartConfiguration"`
	// The column hierarchy that is used during drill-downs and drill-ups.
	ColumnHierarchies TemplateColumnHierarchyArrayInput `pulumi:"columnHierarchies"`
	// The subtitle that is displayed on the visual.
	Subtitle TemplateVisualSubtitleLabelOptionsPtrInput `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title TemplateVisualTitleLabelOptionsPtrInput `pulumi:"title"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
	VisualId pulumi.StringInput `pulumi:"visualId"`
}

func (TemplateTreeMapVisualArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTreeMapVisual)(nil)).Elem()
}

func (i TemplateTreeMapVisualArgs) ToTemplateTreeMapVisualOutput() TemplateTreeMapVisualOutput {
	return i.ToTemplateTreeMapVisualOutputWithContext(context.Background())
}

func (i TemplateTreeMapVisualArgs) ToTemplateTreeMapVisualOutputWithContext(ctx context.Context) TemplateTreeMapVisualOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTreeMapVisualOutput)
}

func (i TemplateTreeMapVisualArgs) ToTemplateTreeMapVisualPtrOutput() TemplateTreeMapVisualPtrOutput {
	return i.ToTemplateTreeMapVisualPtrOutputWithContext(context.Background())
}

func (i TemplateTreeMapVisualArgs) ToTemplateTreeMapVisualPtrOutputWithContext(ctx context.Context) TemplateTreeMapVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTreeMapVisualOutput).ToTemplateTreeMapVisualPtrOutputWithContext(ctx)
}

// TemplateTreeMapVisualPtrInput is an input type that accepts TemplateTreeMapVisualArgs, TemplateTreeMapVisualPtr and TemplateTreeMapVisualPtrOutput values.
// You can construct a concrete instance of `TemplateTreeMapVisualPtrInput` via:
//
//	        TemplateTreeMapVisualArgs{...}
//
//	or:
//
//	        nil
type TemplateTreeMapVisualPtrInput interface {
	pulumi.Input

	ToTemplateTreeMapVisualPtrOutput() TemplateTreeMapVisualPtrOutput
	ToTemplateTreeMapVisualPtrOutputWithContext(context.Context) TemplateTreeMapVisualPtrOutput
}

type templateTreeMapVisualPtrType TemplateTreeMapVisualArgs

func TemplateTreeMapVisualPtr(v *TemplateTreeMapVisualArgs) TemplateTreeMapVisualPtrInput {
	return (*templateTreeMapVisualPtrType)(v)
}

func (*templateTreeMapVisualPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTreeMapVisual)(nil)).Elem()
}

func (i *templateTreeMapVisualPtrType) ToTemplateTreeMapVisualPtrOutput() TemplateTreeMapVisualPtrOutput {
	return i.ToTemplateTreeMapVisualPtrOutputWithContext(context.Background())
}

func (i *templateTreeMapVisualPtrType) ToTemplateTreeMapVisualPtrOutputWithContext(ctx context.Context) TemplateTreeMapVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTreeMapVisualPtrOutput)
}

type TemplateTreeMapVisualOutput struct{ *pulumi.OutputState }

func (TemplateTreeMapVisualOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTreeMapVisual)(nil)).Elem()
}

func (o TemplateTreeMapVisualOutput) ToTemplateTreeMapVisualOutput() TemplateTreeMapVisualOutput {
	return o
}

func (o TemplateTreeMapVisualOutput) ToTemplateTreeMapVisualOutputWithContext(ctx context.Context) TemplateTreeMapVisualOutput {
	return o
}

func (o TemplateTreeMapVisualOutput) ToTemplateTreeMapVisualPtrOutput() TemplateTreeMapVisualPtrOutput {
	return o.ToTemplateTreeMapVisualPtrOutputWithContext(context.Background())
}

func (o TemplateTreeMapVisualOutput) ToTemplateTreeMapVisualPtrOutputWithContext(ctx context.Context) TemplateTreeMapVisualPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTreeMapVisual) *TemplateTreeMapVisual {
		return &v
	}).(TemplateTreeMapVisualPtrOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplateTreeMapVisualOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v TemplateTreeMapVisual) []TemplateVisualCustomAction { return v.Actions }).(TemplateVisualCustomActionArrayOutput)
}

// The configuration settings of the visual.
func (o TemplateTreeMapVisualOutput) ChartConfiguration() TemplateTreeMapConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateTreeMapVisual) *TemplateTreeMapConfiguration { return v.ChartConfiguration }).(TemplateTreeMapConfigurationPtrOutput)
}

// The column hierarchy that is used during drill-downs and drill-ups.
func (o TemplateTreeMapVisualOutput) ColumnHierarchies() TemplateColumnHierarchyArrayOutput {
	return o.ApplyT(func(v TemplateTreeMapVisual) []TemplateColumnHierarchy { return v.ColumnHierarchies }).(TemplateColumnHierarchyArrayOutput)
}

// The subtitle that is displayed on the visual.
func (o TemplateTreeMapVisualOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTreeMapVisual) *TemplateVisualSubtitleLabelOptions { return v.Subtitle }).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o TemplateTreeMapVisualOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateTreeMapVisual) *TemplateVisualTitleLabelOptions { return v.Title }).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
func (o TemplateTreeMapVisualOutput) VisualId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateTreeMapVisual) string { return v.VisualId }).(pulumi.StringOutput)
}

type TemplateTreeMapVisualPtrOutput struct{ *pulumi.OutputState }

func (TemplateTreeMapVisualPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTreeMapVisual)(nil)).Elem()
}

func (o TemplateTreeMapVisualPtrOutput) ToTemplateTreeMapVisualPtrOutput() TemplateTreeMapVisualPtrOutput {
	return o
}

func (o TemplateTreeMapVisualPtrOutput) ToTemplateTreeMapVisualPtrOutputWithContext(ctx context.Context) TemplateTreeMapVisualPtrOutput {
	return o
}

func (o TemplateTreeMapVisualPtrOutput) Elem() TemplateTreeMapVisualOutput {
	return o.ApplyT(func(v *TemplateTreeMapVisual) TemplateTreeMapVisual {
		if v != nil {
			return *v
		}
		var ret TemplateTreeMapVisual
		return ret
	}).(TemplateTreeMapVisualOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplateTreeMapVisualPtrOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v *TemplateTreeMapVisual) []TemplateVisualCustomAction {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(TemplateVisualCustomActionArrayOutput)
}

// The configuration settings of the visual.
func (o TemplateTreeMapVisualPtrOutput) ChartConfiguration() TemplateTreeMapConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateTreeMapVisual) *TemplateTreeMapConfiguration {
		if v == nil {
			return nil
		}
		return v.ChartConfiguration
	}).(TemplateTreeMapConfigurationPtrOutput)
}

// The column hierarchy that is used during drill-downs and drill-ups.
func (o TemplateTreeMapVisualPtrOutput) ColumnHierarchies() TemplateColumnHierarchyArrayOutput {
	return o.ApplyT(func(v *TemplateTreeMapVisual) []TemplateColumnHierarchy {
		if v == nil {
			return nil
		}
		return v.ColumnHierarchies
	}).(TemplateColumnHierarchyArrayOutput)
}

// The subtitle that is displayed on the visual.
func (o TemplateTreeMapVisualPtrOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTreeMapVisual) *TemplateVisualSubtitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Subtitle
	}).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o TemplateTreeMapVisualPtrOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateTreeMapVisual) *TemplateVisualTitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Title
	}).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
func (o TemplateTreeMapVisualPtrOutput) VisualId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateTreeMapVisual) *string {
		if v == nil {
			return nil
		}
		return &v.VisualId
	}).(pulumi.StringPtrOutput)
}

type TemplateTrendArrowOptions struct {
	// The visibility of the trend arrows.
	Visibility *TemplateVisibility `pulumi:"visibility"`
}

// TemplateTrendArrowOptionsInput is an input type that accepts TemplateTrendArrowOptionsArgs and TemplateTrendArrowOptionsOutput values.
// You can construct a concrete instance of `TemplateTrendArrowOptionsInput` via:
//
//	TemplateTrendArrowOptionsArgs{...}
type TemplateTrendArrowOptionsInput interface {
	pulumi.Input

	ToTemplateTrendArrowOptionsOutput() TemplateTrendArrowOptionsOutput
	ToTemplateTrendArrowOptionsOutputWithContext(context.Context) TemplateTrendArrowOptionsOutput
}

type TemplateTrendArrowOptionsArgs struct {
	// The visibility of the trend arrows.
	Visibility TemplateVisibilityPtrInput `pulumi:"visibility"`
}

func (TemplateTrendArrowOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTrendArrowOptions)(nil)).Elem()
}

func (i TemplateTrendArrowOptionsArgs) ToTemplateTrendArrowOptionsOutput() TemplateTrendArrowOptionsOutput {
	return i.ToTemplateTrendArrowOptionsOutputWithContext(context.Background())
}

func (i TemplateTrendArrowOptionsArgs) ToTemplateTrendArrowOptionsOutputWithContext(ctx context.Context) TemplateTrendArrowOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTrendArrowOptionsOutput)
}

func (i TemplateTrendArrowOptionsArgs) ToTemplateTrendArrowOptionsPtrOutput() TemplateTrendArrowOptionsPtrOutput {
	return i.ToTemplateTrendArrowOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateTrendArrowOptionsArgs) ToTemplateTrendArrowOptionsPtrOutputWithContext(ctx context.Context) TemplateTrendArrowOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTrendArrowOptionsOutput).ToTemplateTrendArrowOptionsPtrOutputWithContext(ctx)
}

// TemplateTrendArrowOptionsPtrInput is an input type that accepts TemplateTrendArrowOptionsArgs, TemplateTrendArrowOptionsPtr and TemplateTrendArrowOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateTrendArrowOptionsPtrInput` via:
//
//	        TemplateTrendArrowOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateTrendArrowOptionsPtrInput interface {
	pulumi.Input

	ToTemplateTrendArrowOptionsPtrOutput() TemplateTrendArrowOptionsPtrOutput
	ToTemplateTrendArrowOptionsPtrOutputWithContext(context.Context) TemplateTrendArrowOptionsPtrOutput
}

type templateTrendArrowOptionsPtrType TemplateTrendArrowOptionsArgs

func TemplateTrendArrowOptionsPtr(v *TemplateTrendArrowOptionsArgs) TemplateTrendArrowOptionsPtrInput {
	return (*templateTrendArrowOptionsPtrType)(v)
}

func (*templateTrendArrowOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTrendArrowOptions)(nil)).Elem()
}

func (i *templateTrendArrowOptionsPtrType) ToTemplateTrendArrowOptionsPtrOutput() TemplateTrendArrowOptionsPtrOutput {
	return i.ToTemplateTrendArrowOptionsPtrOutputWithContext(context.Background())
}

func (i *templateTrendArrowOptionsPtrType) ToTemplateTrendArrowOptionsPtrOutputWithContext(ctx context.Context) TemplateTrendArrowOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateTrendArrowOptionsPtrOutput)
}

type TemplateTrendArrowOptionsOutput struct{ *pulumi.OutputState }

func (TemplateTrendArrowOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateTrendArrowOptions)(nil)).Elem()
}

func (o TemplateTrendArrowOptionsOutput) ToTemplateTrendArrowOptionsOutput() TemplateTrendArrowOptionsOutput {
	return o
}

func (o TemplateTrendArrowOptionsOutput) ToTemplateTrendArrowOptionsOutputWithContext(ctx context.Context) TemplateTrendArrowOptionsOutput {
	return o
}

func (o TemplateTrendArrowOptionsOutput) ToTemplateTrendArrowOptionsPtrOutput() TemplateTrendArrowOptionsPtrOutput {
	return o.ToTemplateTrendArrowOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateTrendArrowOptionsOutput) ToTemplateTrendArrowOptionsPtrOutputWithContext(ctx context.Context) TemplateTrendArrowOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateTrendArrowOptions) *TemplateTrendArrowOptions {
		return &v
	}).(TemplateTrendArrowOptionsPtrOutput)
}

// The visibility of the trend arrows.
func (o TemplateTrendArrowOptionsOutput) Visibility() TemplateVisibilityPtrOutput {
	return o.ApplyT(func(v TemplateTrendArrowOptions) *TemplateVisibility { return v.Visibility }).(TemplateVisibilityPtrOutput)
}

type TemplateTrendArrowOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateTrendArrowOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateTrendArrowOptions)(nil)).Elem()
}

func (o TemplateTrendArrowOptionsPtrOutput) ToTemplateTrendArrowOptionsPtrOutput() TemplateTrendArrowOptionsPtrOutput {
	return o
}

func (o TemplateTrendArrowOptionsPtrOutput) ToTemplateTrendArrowOptionsPtrOutputWithContext(ctx context.Context) TemplateTrendArrowOptionsPtrOutput {
	return o
}

func (o TemplateTrendArrowOptionsPtrOutput) Elem() TemplateTrendArrowOptionsOutput {
	return o.ApplyT(func(v *TemplateTrendArrowOptions) TemplateTrendArrowOptions {
		if v != nil {
			return *v
		}
		var ret TemplateTrendArrowOptions
		return ret
	}).(TemplateTrendArrowOptionsOutput)
}

// The visibility of the trend arrows.
func (o TemplateTrendArrowOptionsPtrOutput) Visibility() TemplateVisibilityPtrOutput {
	return o.ApplyT(func(v *TemplateTrendArrowOptions) *TemplateVisibility {
		if v == nil {
			return nil
		}
		return v.Visibility
	}).(TemplateVisibilityPtrOutput)
}

type TemplateUnaggregatedField struct {
	// The column that is used in the `UnaggregatedField` .
	Column TemplateColumnIdentifier `pulumi:"column"`
	// The custom field ID.
	FieldId string `pulumi:"fieldId"`
	// The format configuration of the field.
	FormatConfiguration *TemplateFormatConfiguration `pulumi:"formatConfiguration"`
}

// TemplateUnaggregatedFieldInput is an input type that accepts TemplateUnaggregatedFieldArgs and TemplateUnaggregatedFieldOutput values.
// You can construct a concrete instance of `TemplateUnaggregatedFieldInput` via:
//
//	TemplateUnaggregatedFieldArgs{...}
type TemplateUnaggregatedFieldInput interface {
	pulumi.Input

	ToTemplateUnaggregatedFieldOutput() TemplateUnaggregatedFieldOutput
	ToTemplateUnaggregatedFieldOutputWithContext(context.Context) TemplateUnaggregatedFieldOutput
}

type TemplateUnaggregatedFieldArgs struct {
	// The column that is used in the `UnaggregatedField` .
	Column TemplateColumnIdentifierInput `pulumi:"column"`
	// The custom field ID.
	FieldId pulumi.StringInput `pulumi:"fieldId"`
	// The format configuration of the field.
	FormatConfiguration TemplateFormatConfigurationPtrInput `pulumi:"formatConfiguration"`
}

func (TemplateUnaggregatedFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateUnaggregatedField)(nil)).Elem()
}

func (i TemplateUnaggregatedFieldArgs) ToTemplateUnaggregatedFieldOutput() TemplateUnaggregatedFieldOutput {
	return i.ToTemplateUnaggregatedFieldOutputWithContext(context.Background())
}

func (i TemplateUnaggregatedFieldArgs) ToTemplateUnaggregatedFieldOutputWithContext(ctx context.Context) TemplateUnaggregatedFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateUnaggregatedFieldOutput)
}

// TemplateUnaggregatedFieldArrayInput is an input type that accepts TemplateUnaggregatedFieldArray and TemplateUnaggregatedFieldArrayOutput values.
// You can construct a concrete instance of `TemplateUnaggregatedFieldArrayInput` via:
//
//	TemplateUnaggregatedFieldArray{ TemplateUnaggregatedFieldArgs{...} }
type TemplateUnaggregatedFieldArrayInput interface {
	pulumi.Input

	ToTemplateUnaggregatedFieldArrayOutput() TemplateUnaggregatedFieldArrayOutput
	ToTemplateUnaggregatedFieldArrayOutputWithContext(context.Context) TemplateUnaggregatedFieldArrayOutput
}

type TemplateUnaggregatedFieldArray []TemplateUnaggregatedFieldInput

func (TemplateUnaggregatedFieldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateUnaggregatedField)(nil)).Elem()
}

func (i TemplateUnaggregatedFieldArray) ToTemplateUnaggregatedFieldArrayOutput() TemplateUnaggregatedFieldArrayOutput {
	return i.ToTemplateUnaggregatedFieldArrayOutputWithContext(context.Background())
}

func (i TemplateUnaggregatedFieldArray) ToTemplateUnaggregatedFieldArrayOutputWithContext(ctx context.Context) TemplateUnaggregatedFieldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateUnaggregatedFieldArrayOutput)
}

type TemplateUnaggregatedFieldOutput struct{ *pulumi.OutputState }

func (TemplateUnaggregatedFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateUnaggregatedField)(nil)).Elem()
}

func (o TemplateUnaggregatedFieldOutput) ToTemplateUnaggregatedFieldOutput() TemplateUnaggregatedFieldOutput {
	return o
}

func (o TemplateUnaggregatedFieldOutput) ToTemplateUnaggregatedFieldOutputWithContext(ctx context.Context) TemplateUnaggregatedFieldOutput {
	return o
}

// The column that is used in the `UnaggregatedField` .
func (o TemplateUnaggregatedFieldOutput) Column() TemplateColumnIdentifierOutput {
	return o.ApplyT(func(v TemplateUnaggregatedField) TemplateColumnIdentifier { return v.Column }).(TemplateColumnIdentifierOutput)
}

// The custom field ID.
func (o TemplateUnaggregatedFieldOutput) FieldId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateUnaggregatedField) string { return v.FieldId }).(pulumi.StringOutput)
}

// The format configuration of the field.
func (o TemplateUnaggregatedFieldOutput) FormatConfiguration() TemplateFormatConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateUnaggregatedField) *TemplateFormatConfiguration { return v.FormatConfiguration }).(TemplateFormatConfigurationPtrOutput)
}

type TemplateUnaggregatedFieldArrayOutput struct{ *pulumi.OutputState }

func (TemplateUnaggregatedFieldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateUnaggregatedField)(nil)).Elem()
}

func (o TemplateUnaggregatedFieldArrayOutput) ToTemplateUnaggregatedFieldArrayOutput() TemplateUnaggregatedFieldArrayOutput {
	return o
}

func (o TemplateUnaggregatedFieldArrayOutput) ToTemplateUnaggregatedFieldArrayOutputWithContext(ctx context.Context) TemplateUnaggregatedFieldArrayOutput {
	return o
}

func (o TemplateUnaggregatedFieldArrayOutput) Index(i pulumi.IntInput) TemplateUnaggregatedFieldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateUnaggregatedField {
		return vs[0].([]TemplateUnaggregatedField)[vs[1].(int)]
	}).(TemplateUnaggregatedFieldOutput)
}

type TemplateUniqueValuesComputation struct {
	// The category field that is used in a computation.
	Category *TemplateDimensionField `pulumi:"category"`
	// The ID for a computation.
	ComputationId string `pulumi:"computationId"`
	// The name of a computation.
	Name *string `pulumi:"name"`
}

// TemplateUniqueValuesComputationInput is an input type that accepts TemplateUniqueValuesComputationArgs and TemplateUniqueValuesComputationOutput values.
// You can construct a concrete instance of `TemplateUniqueValuesComputationInput` via:
//
//	TemplateUniqueValuesComputationArgs{...}
type TemplateUniqueValuesComputationInput interface {
	pulumi.Input

	ToTemplateUniqueValuesComputationOutput() TemplateUniqueValuesComputationOutput
	ToTemplateUniqueValuesComputationOutputWithContext(context.Context) TemplateUniqueValuesComputationOutput
}

type TemplateUniqueValuesComputationArgs struct {
	// The category field that is used in a computation.
	Category TemplateDimensionFieldPtrInput `pulumi:"category"`
	// The ID for a computation.
	ComputationId pulumi.StringInput `pulumi:"computationId"`
	// The name of a computation.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (TemplateUniqueValuesComputationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateUniqueValuesComputation)(nil)).Elem()
}

func (i TemplateUniqueValuesComputationArgs) ToTemplateUniqueValuesComputationOutput() TemplateUniqueValuesComputationOutput {
	return i.ToTemplateUniqueValuesComputationOutputWithContext(context.Background())
}

func (i TemplateUniqueValuesComputationArgs) ToTemplateUniqueValuesComputationOutputWithContext(ctx context.Context) TemplateUniqueValuesComputationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateUniqueValuesComputationOutput)
}

func (i TemplateUniqueValuesComputationArgs) ToTemplateUniqueValuesComputationPtrOutput() TemplateUniqueValuesComputationPtrOutput {
	return i.ToTemplateUniqueValuesComputationPtrOutputWithContext(context.Background())
}

func (i TemplateUniqueValuesComputationArgs) ToTemplateUniqueValuesComputationPtrOutputWithContext(ctx context.Context) TemplateUniqueValuesComputationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateUniqueValuesComputationOutput).ToTemplateUniqueValuesComputationPtrOutputWithContext(ctx)
}

// TemplateUniqueValuesComputationPtrInput is an input type that accepts TemplateUniqueValuesComputationArgs, TemplateUniqueValuesComputationPtr and TemplateUniqueValuesComputationPtrOutput values.
// You can construct a concrete instance of `TemplateUniqueValuesComputationPtrInput` via:
//
//	        TemplateUniqueValuesComputationArgs{...}
//
//	or:
//
//	        nil
type TemplateUniqueValuesComputationPtrInput interface {
	pulumi.Input

	ToTemplateUniqueValuesComputationPtrOutput() TemplateUniqueValuesComputationPtrOutput
	ToTemplateUniqueValuesComputationPtrOutputWithContext(context.Context) TemplateUniqueValuesComputationPtrOutput
}

type templateUniqueValuesComputationPtrType TemplateUniqueValuesComputationArgs

func TemplateUniqueValuesComputationPtr(v *TemplateUniqueValuesComputationArgs) TemplateUniqueValuesComputationPtrInput {
	return (*templateUniqueValuesComputationPtrType)(v)
}

func (*templateUniqueValuesComputationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateUniqueValuesComputation)(nil)).Elem()
}

func (i *templateUniqueValuesComputationPtrType) ToTemplateUniqueValuesComputationPtrOutput() TemplateUniqueValuesComputationPtrOutput {
	return i.ToTemplateUniqueValuesComputationPtrOutputWithContext(context.Background())
}

func (i *templateUniqueValuesComputationPtrType) ToTemplateUniqueValuesComputationPtrOutputWithContext(ctx context.Context) TemplateUniqueValuesComputationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateUniqueValuesComputationPtrOutput)
}

type TemplateUniqueValuesComputationOutput struct{ *pulumi.OutputState }

func (TemplateUniqueValuesComputationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateUniqueValuesComputation)(nil)).Elem()
}

func (o TemplateUniqueValuesComputationOutput) ToTemplateUniqueValuesComputationOutput() TemplateUniqueValuesComputationOutput {
	return o
}

func (o TemplateUniqueValuesComputationOutput) ToTemplateUniqueValuesComputationOutputWithContext(ctx context.Context) TemplateUniqueValuesComputationOutput {
	return o
}

func (o TemplateUniqueValuesComputationOutput) ToTemplateUniqueValuesComputationPtrOutput() TemplateUniqueValuesComputationPtrOutput {
	return o.ToTemplateUniqueValuesComputationPtrOutputWithContext(context.Background())
}

func (o TemplateUniqueValuesComputationOutput) ToTemplateUniqueValuesComputationPtrOutputWithContext(ctx context.Context) TemplateUniqueValuesComputationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateUniqueValuesComputation) *TemplateUniqueValuesComputation {
		return &v
	}).(TemplateUniqueValuesComputationPtrOutput)
}

// The category field that is used in a computation.
func (o TemplateUniqueValuesComputationOutput) Category() TemplateDimensionFieldPtrOutput {
	return o.ApplyT(func(v TemplateUniqueValuesComputation) *TemplateDimensionField { return v.Category }).(TemplateDimensionFieldPtrOutput)
}

// The ID for a computation.
func (o TemplateUniqueValuesComputationOutput) ComputationId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateUniqueValuesComputation) string { return v.ComputationId }).(pulumi.StringOutput)
}

// The name of a computation.
func (o TemplateUniqueValuesComputationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateUniqueValuesComputation) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type TemplateUniqueValuesComputationPtrOutput struct{ *pulumi.OutputState }

func (TemplateUniqueValuesComputationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateUniqueValuesComputation)(nil)).Elem()
}

func (o TemplateUniqueValuesComputationPtrOutput) ToTemplateUniqueValuesComputationPtrOutput() TemplateUniqueValuesComputationPtrOutput {
	return o
}

func (o TemplateUniqueValuesComputationPtrOutput) ToTemplateUniqueValuesComputationPtrOutputWithContext(ctx context.Context) TemplateUniqueValuesComputationPtrOutput {
	return o
}

func (o TemplateUniqueValuesComputationPtrOutput) Elem() TemplateUniqueValuesComputationOutput {
	return o.ApplyT(func(v *TemplateUniqueValuesComputation) TemplateUniqueValuesComputation {
		if v != nil {
			return *v
		}
		var ret TemplateUniqueValuesComputation
		return ret
	}).(TemplateUniqueValuesComputationOutput)
}

// The category field that is used in a computation.
func (o TemplateUniqueValuesComputationPtrOutput) Category() TemplateDimensionFieldPtrOutput {
	return o.ApplyT(func(v *TemplateUniqueValuesComputation) *TemplateDimensionField {
		if v == nil {
			return nil
		}
		return v.Category
	}).(TemplateDimensionFieldPtrOutput)
}

// The ID for a computation.
func (o TemplateUniqueValuesComputationPtrOutput) ComputationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateUniqueValuesComputation) *string {
		if v == nil {
			return nil
		}
		return &v.ComputationId
	}).(pulumi.StringPtrOutput)
}

// The name of a computation.
func (o TemplateUniqueValuesComputationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateUniqueValuesComputation) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// <p>The option to relax the validation that is required to create and update analyses, dashboards, and templates with definition objects. When you set this value to <code>LENIENT</code>, validation is skipped for specific errors.</p>
type TemplateValidationStrategy struct {
	// The mode of validation for the asset to be created or updated. When you set this value to `STRICT` , strict validation for every error is enforced. When you set this value to `LENIENT` , validation is skipped for specific UI errors.
	Mode TemplateValidationStrategyMode `pulumi:"mode"`
}

// TemplateValidationStrategyInput is an input type that accepts TemplateValidationStrategyArgs and TemplateValidationStrategyOutput values.
// You can construct a concrete instance of `TemplateValidationStrategyInput` via:
//
//	TemplateValidationStrategyArgs{...}
type TemplateValidationStrategyInput interface {
	pulumi.Input

	ToTemplateValidationStrategyOutput() TemplateValidationStrategyOutput
	ToTemplateValidationStrategyOutputWithContext(context.Context) TemplateValidationStrategyOutput
}

// <p>The option to relax the validation that is required to create and update analyses, dashboards, and templates with definition objects. When you set this value to <code>LENIENT</code>, validation is skipped for specific errors.</p>
type TemplateValidationStrategyArgs struct {
	// The mode of validation for the asset to be created or updated. When you set this value to `STRICT` , strict validation for every error is enforced. When you set this value to `LENIENT` , validation is skipped for specific UI errors.
	Mode TemplateValidationStrategyModeInput `pulumi:"mode"`
}

func (TemplateValidationStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateValidationStrategy)(nil)).Elem()
}

func (i TemplateValidationStrategyArgs) ToTemplateValidationStrategyOutput() TemplateValidationStrategyOutput {
	return i.ToTemplateValidationStrategyOutputWithContext(context.Background())
}

func (i TemplateValidationStrategyArgs) ToTemplateValidationStrategyOutputWithContext(ctx context.Context) TemplateValidationStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateValidationStrategyOutput)
}

func (i TemplateValidationStrategyArgs) ToTemplateValidationStrategyPtrOutput() TemplateValidationStrategyPtrOutput {
	return i.ToTemplateValidationStrategyPtrOutputWithContext(context.Background())
}

func (i TemplateValidationStrategyArgs) ToTemplateValidationStrategyPtrOutputWithContext(ctx context.Context) TemplateValidationStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateValidationStrategyOutput).ToTemplateValidationStrategyPtrOutputWithContext(ctx)
}

// TemplateValidationStrategyPtrInput is an input type that accepts TemplateValidationStrategyArgs, TemplateValidationStrategyPtr and TemplateValidationStrategyPtrOutput values.
// You can construct a concrete instance of `TemplateValidationStrategyPtrInput` via:
//
//	        TemplateValidationStrategyArgs{...}
//
//	or:
//
//	        nil
type TemplateValidationStrategyPtrInput interface {
	pulumi.Input

	ToTemplateValidationStrategyPtrOutput() TemplateValidationStrategyPtrOutput
	ToTemplateValidationStrategyPtrOutputWithContext(context.Context) TemplateValidationStrategyPtrOutput
}

type templateValidationStrategyPtrType TemplateValidationStrategyArgs

func TemplateValidationStrategyPtr(v *TemplateValidationStrategyArgs) TemplateValidationStrategyPtrInput {
	return (*templateValidationStrategyPtrType)(v)
}

func (*templateValidationStrategyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateValidationStrategy)(nil)).Elem()
}

func (i *templateValidationStrategyPtrType) ToTemplateValidationStrategyPtrOutput() TemplateValidationStrategyPtrOutput {
	return i.ToTemplateValidationStrategyPtrOutputWithContext(context.Background())
}

func (i *templateValidationStrategyPtrType) ToTemplateValidationStrategyPtrOutputWithContext(ctx context.Context) TemplateValidationStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateValidationStrategyPtrOutput)
}

// <p>The option to relax the validation that is required to create and update analyses, dashboards, and templates with definition objects. When you set this value to <code>LENIENT</code>, validation is skipped for specific errors.</p>
type TemplateValidationStrategyOutput struct{ *pulumi.OutputState }

func (TemplateValidationStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateValidationStrategy)(nil)).Elem()
}

func (o TemplateValidationStrategyOutput) ToTemplateValidationStrategyOutput() TemplateValidationStrategyOutput {
	return o
}

func (o TemplateValidationStrategyOutput) ToTemplateValidationStrategyOutputWithContext(ctx context.Context) TemplateValidationStrategyOutput {
	return o
}

func (o TemplateValidationStrategyOutput) ToTemplateValidationStrategyPtrOutput() TemplateValidationStrategyPtrOutput {
	return o.ToTemplateValidationStrategyPtrOutputWithContext(context.Background())
}

func (o TemplateValidationStrategyOutput) ToTemplateValidationStrategyPtrOutputWithContext(ctx context.Context) TemplateValidationStrategyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateValidationStrategy) *TemplateValidationStrategy {
		return &v
	}).(TemplateValidationStrategyPtrOutput)
}

// The mode of validation for the asset to be created or updated. When you set this value to `STRICT` , strict validation for every error is enforced. When you set this value to `LENIENT` , validation is skipped for specific UI errors.
func (o TemplateValidationStrategyOutput) Mode() TemplateValidationStrategyModeOutput {
	return o.ApplyT(func(v TemplateValidationStrategy) TemplateValidationStrategyMode { return v.Mode }).(TemplateValidationStrategyModeOutput)
}

type TemplateValidationStrategyPtrOutput struct{ *pulumi.OutputState }

func (TemplateValidationStrategyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateValidationStrategy)(nil)).Elem()
}

func (o TemplateValidationStrategyPtrOutput) ToTemplateValidationStrategyPtrOutput() TemplateValidationStrategyPtrOutput {
	return o
}

func (o TemplateValidationStrategyPtrOutput) ToTemplateValidationStrategyPtrOutputWithContext(ctx context.Context) TemplateValidationStrategyPtrOutput {
	return o
}

func (o TemplateValidationStrategyPtrOutput) Elem() TemplateValidationStrategyOutput {
	return o.ApplyT(func(v *TemplateValidationStrategy) TemplateValidationStrategy {
		if v != nil {
			return *v
		}
		var ret TemplateValidationStrategy
		return ret
	}).(TemplateValidationStrategyOutput)
}

// The mode of validation for the asset to be created or updated. When you set this value to `STRICT` , strict validation for every error is enforced. When you set this value to `LENIENT` , validation is skipped for specific UI errors.
func (o TemplateValidationStrategyPtrOutput) Mode() TemplateValidationStrategyModePtrOutput {
	return o.ApplyT(func(v *TemplateValidationStrategy) *TemplateValidationStrategyMode {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(TemplateValidationStrategyModePtrOutput)
}

// <p>A version of a template.</p>
type TemplateVersion struct {
	// <p>The time that this template version was created.</p>
	CreatedTime *string `pulumi:"createdTime"`
	// <p>Schema of the dataset identified by the placeholder. Any dashboard created from this
	//             template should be bound to new datasets matching the same schema described through this
	//             API operation.</p>
	DataSetConfigurations []TemplateDataSetConfiguration `pulumi:"dataSetConfigurations"`
	// <p>The description of the template.</p>
	Description *string `pulumi:"description"`
	// <p>Errors associated with this template version.</p>
	Errors []TemplateError `pulumi:"errors"`
	// <p>A list of the associated sheets with the unique identifier and name of each sheet.</p>
	Sheets []TemplateSheet `pulumi:"sheets"`
	// <p>The Amazon Resource Name (ARN) of an analysis or template that was used to create this
	//             template.</p>
	SourceEntityArn *string `pulumi:"sourceEntityArn"`
	// The status that is associated with the template.
	//
	// - `CREATION_IN_PROGRESS`
	// - `CREATION_SUCCESSFUL`
	// - `CREATION_FAILED`
	// - `UPDATE_IN_PROGRESS`
	// - `UPDATE_SUCCESSFUL`
	// - `UPDATE_FAILED`
	// - `DELETED`
	Status *TemplateResourceStatus `pulumi:"status"`
	// <p>The ARN of the theme associated with this version of the template.</p>
	ThemeArn *string `pulumi:"themeArn"`
	// <p>The version number of the template version.</p>
	VersionNumber *float64 `pulumi:"versionNumber"`
}

// <p>A version of a template.</p>
type TemplateVersionOutput struct{ *pulumi.OutputState }

func (TemplateVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateVersion)(nil)).Elem()
}

func (o TemplateVersionOutput) ToTemplateVersionOutput() TemplateVersionOutput {
	return o
}

func (o TemplateVersionOutput) ToTemplateVersionOutputWithContext(ctx context.Context) TemplateVersionOutput {
	return o
}

// <p>The time that this template version was created.</p>
func (o TemplateVersionOutput) CreatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateVersion) *string { return v.CreatedTime }).(pulumi.StringPtrOutput)
}

// <p>Schema of the dataset identified by the placeholder. Any dashboard created from this
//
//	template should be bound to new datasets matching the same schema described through this
//	API operation.</p>
func (o TemplateVersionOutput) DataSetConfigurations() TemplateDataSetConfigurationArrayOutput {
	return o.ApplyT(func(v TemplateVersion) []TemplateDataSetConfiguration { return v.DataSetConfigurations }).(TemplateDataSetConfigurationArrayOutput)
}

// <p>The description of the template.</p>
func (o TemplateVersionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateVersion) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// <p>Errors associated with this template version.</p>
func (o TemplateVersionOutput) Errors() TemplateErrorArrayOutput {
	return o.ApplyT(func(v TemplateVersion) []TemplateError { return v.Errors }).(TemplateErrorArrayOutput)
}

// <p>A list of the associated sheets with the unique identifier and name of each sheet.</p>
func (o TemplateVersionOutput) Sheets() TemplateSheetArrayOutput {
	return o.ApplyT(func(v TemplateVersion) []TemplateSheet { return v.Sheets }).(TemplateSheetArrayOutput)
}

// <p>The Amazon Resource Name (ARN) of an analysis or template that was used to create this
//
//	template.</p>
func (o TemplateVersionOutput) SourceEntityArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateVersion) *string { return v.SourceEntityArn }).(pulumi.StringPtrOutput)
}

// The status that is associated with the template.
//
// - `CREATION_IN_PROGRESS`
// - `CREATION_SUCCESSFUL`
// - `CREATION_FAILED`
// - `UPDATE_IN_PROGRESS`
// - `UPDATE_SUCCESSFUL`
// - `UPDATE_FAILED`
// - `DELETED`
func (o TemplateVersionOutput) Status() TemplateResourceStatusPtrOutput {
	return o.ApplyT(func(v TemplateVersion) *TemplateResourceStatus { return v.Status }).(TemplateResourceStatusPtrOutput)
}

// <p>The ARN of the theme associated with this version of the template.</p>
func (o TemplateVersionOutput) ThemeArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateVersion) *string { return v.ThemeArn }).(pulumi.StringPtrOutput)
}

// <p>The version number of the template version.</p>
func (o TemplateVersionOutput) VersionNumber() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateVersion) *float64 { return v.VersionNumber }).(pulumi.Float64PtrOutput)
}

type TemplateVersionPtrOutput struct{ *pulumi.OutputState }

func (TemplateVersionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateVersion)(nil)).Elem()
}

func (o TemplateVersionPtrOutput) ToTemplateVersionPtrOutput() TemplateVersionPtrOutput {
	return o
}

func (o TemplateVersionPtrOutput) ToTemplateVersionPtrOutputWithContext(ctx context.Context) TemplateVersionPtrOutput {
	return o
}

func (o TemplateVersionPtrOutput) Elem() TemplateVersionOutput {
	return o.ApplyT(func(v *TemplateVersion) TemplateVersion {
		if v != nil {
			return *v
		}
		var ret TemplateVersion
		return ret
	}).(TemplateVersionOutput)
}

// <p>The time that this template version was created.</p>
func (o TemplateVersionPtrOutput) CreatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateVersion) *string {
		if v == nil {
			return nil
		}
		return v.CreatedTime
	}).(pulumi.StringPtrOutput)
}

// <p>Schema of the dataset identified by the placeholder. Any dashboard created from this
//
//	template should be bound to new datasets matching the same schema described through this
//	API operation.</p>
func (o TemplateVersionPtrOutput) DataSetConfigurations() TemplateDataSetConfigurationArrayOutput {
	return o.ApplyT(func(v *TemplateVersion) []TemplateDataSetConfiguration {
		if v == nil {
			return nil
		}
		return v.DataSetConfigurations
	}).(TemplateDataSetConfigurationArrayOutput)
}

// <p>The description of the template.</p>
func (o TemplateVersionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateVersion) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// <p>Errors associated with this template version.</p>
func (o TemplateVersionPtrOutput) Errors() TemplateErrorArrayOutput {
	return o.ApplyT(func(v *TemplateVersion) []TemplateError {
		if v == nil {
			return nil
		}
		return v.Errors
	}).(TemplateErrorArrayOutput)
}

// <p>A list of the associated sheets with the unique identifier and name of each sheet.</p>
func (o TemplateVersionPtrOutput) Sheets() TemplateSheetArrayOutput {
	return o.ApplyT(func(v *TemplateVersion) []TemplateSheet {
		if v == nil {
			return nil
		}
		return v.Sheets
	}).(TemplateSheetArrayOutput)
}

// <p>The Amazon Resource Name (ARN) of an analysis or template that was used to create this
//
//	template.</p>
func (o TemplateVersionPtrOutput) SourceEntityArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateVersion) *string {
		if v == nil {
			return nil
		}
		return v.SourceEntityArn
	}).(pulumi.StringPtrOutput)
}

// The status that is associated with the template.
//
// - `CREATION_IN_PROGRESS`
// - `CREATION_SUCCESSFUL`
// - `CREATION_FAILED`
// - `UPDATE_IN_PROGRESS`
// - `UPDATE_SUCCESSFUL`
// - `UPDATE_FAILED`
// - `DELETED`
func (o TemplateVersionPtrOutput) Status() TemplateResourceStatusPtrOutput {
	return o.ApplyT(func(v *TemplateVersion) *TemplateResourceStatus {
		if v == nil {
			return nil
		}
		return v.Status
	}).(TemplateResourceStatusPtrOutput)
}

// <p>The ARN of the theme associated with this version of the template.</p>
func (o TemplateVersionPtrOutput) ThemeArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateVersion) *string {
		if v == nil {
			return nil
		}
		return v.ThemeArn
	}).(pulumi.StringPtrOutput)
}

// <p>The version number of the template version.</p>
func (o TemplateVersionPtrOutput) VersionNumber() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateVersion) *float64 {
		if v == nil {
			return nil
		}
		return v.VersionNumber
	}).(pulumi.Float64PtrOutput)
}

type TemplateVersionDefinition struct {
	AnalysisDefaults *TemplateAnalysisDefaults `pulumi:"analysisDefaults"`
	// An array of calculated field definitions for the template.
	CalculatedFields []TemplateCalculatedField `pulumi:"calculatedFields"`
	// An array of template-level column configurations. Column configurations are used to set default formatting for a column that's used throughout a template.
	ColumnConfigurations []TemplateColumnConfiguration `pulumi:"columnConfigurations"`
	// An array of dataset configurations. These configurations define the required columns for each dataset used within a template.
	DataSetConfigurations []TemplateDataSetConfiguration `pulumi:"dataSetConfigurations"`
	// Filter definitions for a template.
	//
	// For more information, see [Filtering Data](https://docs.aws.amazon.com/quicksight/latest/user/filtering-visual-data.html) in the *Amazon QuickSight User Guide* .
	FilterGroups []TemplateFilterGroup `pulumi:"filterGroups"`
	// An array of option definitions for a template.
	Options *TemplateAssetOptions `pulumi:"options"`
	// An array of parameter declarations for a template.
	//
	// *Parameters* are named variables that can transfer a value for use by an action or an object.
	//
	// For more information, see [Parameters in Amazon QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/parameters-in-quicksight.html) in the *Amazon QuickSight User Guide* .
	ParameterDeclarations []TemplateParameterDeclaration `pulumi:"parameterDeclarations"`
	// An array of sheet definitions for a template.
	Sheets []TemplateSheetDefinition `pulumi:"sheets"`
}

// TemplateVersionDefinitionInput is an input type that accepts TemplateVersionDefinitionArgs and TemplateVersionDefinitionOutput values.
// You can construct a concrete instance of `TemplateVersionDefinitionInput` via:
//
//	TemplateVersionDefinitionArgs{...}
type TemplateVersionDefinitionInput interface {
	pulumi.Input

	ToTemplateVersionDefinitionOutput() TemplateVersionDefinitionOutput
	ToTemplateVersionDefinitionOutputWithContext(context.Context) TemplateVersionDefinitionOutput
}

type TemplateVersionDefinitionArgs struct {
	AnalysisDefaults TemplateAnalysisDefaultsPtrInput `pulumi:"analysisDefaults"`
	// An array of calculated field definitions for the template.
	CalculatedFields TemplateCalculatedFieldArrayInput `pulumi:"calculatedFields"`
	// An array of template-level column configurations. Column configurations are used to set default formatting for a column that's used throughout a template.
	ColumnConfigurations TemplateColumnConfigurationArrayInput `pulumi:"columnConfigurations"`
	// An array of dataset configurations. These configurations define the required columns for each dataset used within a template.
	DataSetConfigurations TemplateDataSetConfigurationArrayInput `pulumi:"dataSetConfigurations"`
	// Filter definitions for a template.
	//
	// For more information, see [Filtering Data](https://docs.aws.amazon.com/quicksight/latest/user/filtering-visual-data.html) in the *Amazon QuickSight User Guide* .
	FilterGroups TemplateFilterGroupArrayInput `pulumi:"filterGroups"`
	// An array of option definitions for a template.
	Options TemplateAssetOptionsPtrInput `pulumi:"options"`
	// An array of parameter declarations for a template.
	//
	// *Parameters* are named variables that can transfer a value for use by an action or an object.
	//
	// For more information, see [Parameters in Amazon QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/parameters-in-quicksight.html) in the *Amazon QuickSight User Guide* .
	ParameterDeclarations TemplateParameterDeclarationArrayInput `pulumi:"parameterDeclarations"`
	// An array of sheet definitions for a template.
	Sheets TemplateSheetDefinitionArrayInput `pulumi:"sheets"`
}

func (TemplateVersionDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateVersionDefinition)(nil)).Elem()
}

func (i TemplateVersionDefinitionArgs) ToTemplateVersionDefinitionOutput() TemplateVersionDefinitionOutput {
	return i.ToTemplateVersionDefinitionOutputWithContext(context.Background())
}

func (i TemplateVersionDefinitionArgs) ToTemplateVersionDefinitionOutputWithContext(ctx context.Context) TemplateVersionDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateVersionDefinitionOutput)
}

func (i TemplateVersionDefinitionArgs) ToTemplateVersionDefinitionPtrOutput() TemplateVersionDefinitionPtrOutput {
	return i.ToTemplateVersionDefinitionPtrOutputWithContext(context.Background())
}

func (i TemplateVersionDefinitionArgs) ToTemplateVersionDefinitionPtrOutputWithContext(ctx context.Context) TemplateVersionDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateVersionDefinitionOutput).ToTemplateVersionDefinitionPtrOutputWithContext(ctx)
}

// TemplateVersionDefinitionPtrInput is an input type that accepts TemplateVersionDefinitionArgs, TemplateVersionDefinitionPtr and TemplateVersionDefinitionPtrOutput values.
// You can construct a concrete instance of `TemplateVersionDefinitionPtrInput` via:
//
//	        TemplateVersionDefinitionArgs{...}
//
//	or:
//
//	        nil
type TemplateVersionDefinitionPtrInput interface {
	pulumi.Input

	ToTemplateVersionDefinitionPtrOutput() TemplateVersionDefinitionPtrOutput
	ToTemplateVersionDefinitionPtrOutputWithContext(context.Context) TemplateVersionDefinitionPtrOutput
}

type templateVersionDefinitionPtrType TemplateVersionDefinitionArgs

func TemplateVersionDefinitionPtr(v *TemplateVersionDefinitionArgs) TemplateVersionDefinitionPtrInput {
	return (*templateVersionDefinitionPtrType)(v)
}

func (*templateVersionDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateVersionDefinition)(nil)).Elem()
}

func (i *templateVersionDefinitionPtrType) ToTemplateVersionDefinitionPtrOutput() TemplateVersionDefinitionPtrOutput {
	return i.ToTemplateVersionDefinitionPtrOutputWithContext(context.Background())
}

func (i *templateVersionDefinitionPtrType) ToTemplateVersionDefinitionPtrOutputWithContext(ctx context.Context) TemplateVersionDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateVersionDefinitionPtrOutput)
}

type TemplateVersionDefinitionOutput struct{ *pulumi.OutputState }

func (TemplateVersionDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateVersionDefinition)(nil)).Elem()
}

func (o TemplateVersionDefinitionOutput) ToTemplateVersionDefinitionOutput() TemplateVersionDefinitionOutput {
	return o
}

func (o TemplateVersionDefinitionOutput) ToTemplateVersionDefinitionOutputWithContext(ctx context.Context) TemplateVersionDefinitionOutput {
	return o
}

func (o TemplateVersionDefinitionOutput) ToTemplateVersionDefinitionPtrOutput() TemplateVersionDefinitionPtrOutput {
	return o.ToTemplateVersionDefinitionPtrOutputWithContext(context.Background())
}

func (o TemplateVersionDefinitionOutput) ToTemplateVersionDefinitionPtrOutputWithContext(ctx context.Context) TemplateVersionDefinitionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateVersionDefinition) *TemplateVersionDefinition {
		return &v
	}).(TemplateVersionDefinitionPtrOutput)
}

func (o TemplateVersionDefinitionOutput) AnalysisDefaults() TemplateAnalysisDefaultsPtrOutput {
	return o.ApplyT(func(v TemplateVersionDefinition) *TemplateAnalysisDefaults { return v.AnalysisDefaults }).(TemplateAnalysisDefaultsPtrOutput)
}

// An array of calculated field definitions for the template.
func (o TemplateVersionDefinitionOutput) CalculatedFields() TemplateCalculatedFieldArrayOutput {
	return o.ApplyT(func(v TemplateVersionDefinition) []TemplateCalculatedField { return v.CalculatedFields }).(TemplateCalculatedFieldArrayOutput)
}

// An array of template-level column configurations. Column configurations are used to set default formatting for a column that's used throughout a template.
func (o TemplateVersionDefinitionOutput) ColumnConfigurations() TemplateColumnConfigurationArrayOutput {
	return o.ApplyT(func(v TemplateVersionDefinition) []TemplateColumnConfiguration { return v.ColumnConfigurations }).(TemplateColumnConfigurationArrayOutput)
}

// An array of dataset configurations. These configurations define the required columns for each dataset used within a template.
func (o TemplateVersionDefinitionOutput) DataSetConfigurations() TemplateDataSetConfigurationArrayOutput {
	return o.ApplyT(func(v TemplateVersionDefinition) []TemplateDataSetConfiguration { return v.DataSetConfigurations }).(TemplateDataSetConfigurationArrayOutput)
}

// Filter definitions for a template.
//
// For more information, see [Filtering Data](https://docs.aws.amazon.com/quicksight/latest/user/filtering-visual-data.html) in the *Amazon QuickSight User Guide* .
func (o TemplateVersionDefinitionOutput) FilterGroups() TemplateFilterGroupArrayOutput {
	return o.ApplyT(func(v TemplateVersionDefinition) []TemplateFilterGroup { return v.FilterGroups }).(TemplateFilterGroupArrayOutput)
}

// An array of option definitions for a template.
func (o TemplateVersionDefinitionOutput) Options() TemplateAssetOptionsPtrOutput {
	return o.ApplyT(func(v TemplateVersionDefinition) *TemplateAssetOptions { return v.Options }).(TemplateAssetOptionsPtrOutput)
}

// An array of parameter declarations for a template.
//
// *Parameters* are named variables that can transfer a value for use by an action or an object.
//
// For more information, see [Parameters in Amazon QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/parameters-in-quicksight.html) in the *Amazon QuickSight User Guide* .
func (o TemplateVersionDefinitionOutput) ParameterDeclarations() TemplateParameterDeclarationArrayOutput {
	return o.ApplyT(func(v TemplateVersionDefinition) []TemplateParameterDeclaration { return v.ParameterDeclarations }).(TemplateParameterDeclarationArrayOutput)
}

// An array of sheet definitions for a template.
func (o TemplateVersionDefinitionOutput) Sheets() TemplateSheetDefinitionArrayOutput {
	return o.ApplyT(func(v TemplateVersionDefinition) []TemplateSheetDefinition { return v.Sheets }).(TemplateSheetDefinitionArrayOutput)
}

type TemplateVersionDefinitionPtrOutput struct{ *pulumi.OutputState }

func (TemplateVersionDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateVersionDefinition)(nil)).Elem()
}

func (o TemplateVersionDefinitionPtrOutput) ToTemplateVersionDefinitionPtrOutput() TemplateVersionDefinitionPtrOutput {
	return o
}

func (o TemplateVersionDefinitionPtrOutput) ToTemplateVersionDefinitionPtrOutputWithContext(ctx context.Context) TemplateVersionDefinitionPtrOutput {
	return o
}

func (o TemplateVersionDefinitionPtrOutput) Elem() TemplateVersionDefinitionOutput {
	return o.ApplyT(func(v *TemplateVersionDefinition) TemplateVersionDefinition {
		if v != nil {
			return *v
		}
		var ret TemplateVersionDefinition
		return ret
	}).(TemplateVersionDefinitionOutput)
}

func (o TemplateVersionDefinitionPtrOutput) AnalysisDefaults() TemplateAnalysisDefaultsPtrOutput {
	return o.ApplyT(func(v *TemplateVersionDefinition) *TemplateAnalysisDefaults {
		if v == nil {
			return nil
		}
		return v.AnalysisDefaults
	}).(TemplateAnalysisDefaultsPtrOutput)
}

// An array of calculated field definitions for the template.
func (o TemplateVersionDefinitionPtrOutput) CalculatedFields() TemplateCalculatedFieldArrayOutput {
	return o.ApplyT(func(v *TemplateVersionDefinition) []TemplateCalculatedField {
		if v == nil {
			return nil
		}
		return v.CalculatedFields
	}).(TemplateCalculatedFieldArrayOutput)
}

// An array of template-level column configurations. Column configurations are used to set default formatting for a column that's used throughout a template.
func (o TemplateVersionDefinitionPtrOutput) ColumnConfigurations() TemplateColumnConfigurationArrayOutput {
	return o.ApplyT(func(v *TemplateVersionDefinition) []TemplateColumnConfiguration {
		if v == nil {
			return nil
		}
		return v.ColumnConfigurations
	}).(TemplateColumnConfigurationArrayOutput)
}

// An array of dataset configurations. These configurations define the required columns for each dataset used within a template.
func (o TemplateVersionDefinitionPtrOutput) DataSetConfigurations() TemplateDataSetConfigurationArrayOutput {
	return o.ApplyT(func(v *TemplateVersionDefinition) []TemplateDataSetConfiguration {
		if v == nil {
			return nil
		}
		return v.DataSetConfigurations
	}).(TemplateDataSetConfigurationArrayOutput)
}

// Filter definitions for a template.
//
// For more information, see [Filtering Data](https://docs.aws.amazon.com/quicksight/latest/user/filtering-visual-data.html) in the *Amazon QuickSight User Guide* .
func (o TemplateVersionDefinitionPtrOutput) FilterGroups() TemplateFilterGroupArrayOutput {
	return o.ApplyT(func(v *TemplateVersionDefinition) []TemplateFilterGroup {
		if v == nil {
			return nil
		}
		return v.FilterGroups
	}).(TemplateFilterGroupArrayOutput)
}

// An array of option definitions for a template.
func (o TemplateVersionDefinitionPtrOutput) Options() TemplateAssetOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateVersionDefinition) *TemplateAssetOptions {
		if v == nil {
			return nil
		}
		return v.Options
	}).(TemplateAssetOptionsPtrOutput)
}

// An array of parameter declarations for a template.
//
// *Parameters* are named variables that can transfer a value for use by an action or an object.
//
// For more information, see [Parameters in Amazon QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/parameters-in-quicksight.html) in the *Amazon QuickSight User Guide* .
func (o TemplateVersionDefinitionPtrOutput) ParameterDeclarations() TemplateParameterDeclarationArrayOutput {
	return o.ApplyT(func(v *TemplateVersionDefinition) []TemplateParameterDeclaration {
		if v == nil {
			return nil
		}
		return v.ParameterDeclarations
	}).(TemplateParameterDeclarationArrayOutput)
}

// An array of sheet definitions for a template.
func (o TemplateVersionDefinitionPtrOutput) Sheets() TemplateSheetDefinitionArrayOutput {
	return o.ApplyT(func(v *TemplateVersionDefinition) []TemplateSheetDefinition {
		if v == nil {
			return nil
		}
		return v.Sheets
	}).(TemplateSheetDefinitionArrayOutput)
}

type TemplateVisibleRangeOptions struct {
	// The percent range in the visible range.
	PercentRange *TemplatePercentVisibleRange `pulumi:"percentRange"`
}

// TemplateVisibleRangeOptionsInput is an input type that accepts TemplateVisibleRangeOptionsArgs and TemplateVisibleRangeOptionsOutput values.
// You can construct a concrete instance of `TemplateVisibleRangeOptionsInput` via:
//
//	TemplateVisibleRangeOptionsArgs{...}
type TemplateVisibleRangeOptionsInput interface {
	pulumi.Input

	ToTemplateVisibleRangeOptionsOutput() TemplateVisibleRangeOptionsOutput
	ToTemplateVisibleRangeOptionsOutputWithContext(context.Context) TemplateVisibleRangeOptionsOutput
}

type TemplateVisibleRangeOptionsArgs struct {
	// The percent range in the visible range.
	PercentRange TemplatePercentVisibleRangePtrInput `pulumi:"percentRange"`
}

func (TemplateVisibleRangeOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateVisibleRangeOptions)(nil)).Elem()
}

func (i TemplateVisibleRangeOptionsArgs) ToTemplateVisibleRangeOptionsOutput() TemplateVisibleRangeOptionsOutput {
	return i.ToTemplateVisibleRangeOptionsOutputWithContext(context.Background())
}

func (i TemplateVisibleRangeOptionsArgs) ToTemplateVisibleRangeOptionsOutputWithContext(ctx context.Context) TemplateVisibleRangeOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateVisibleRangeOptionsOutput)
}

func (i TemplateVisibleRangeOptionsArgs) ToTemplateVisibleRangeOptionsPtrOutput() TemplateVisibleRangeOptionsPtrOutput {
	return i.ToTemplateVisibleRangeOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateVisibleRangeOptionsArgs) ToTemplateVisibleRangeOptionsPtrOutputWithContext(ctx context.Context) TemplateVisibleRangeOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateVisibleRangeOptionsOutput).ToTemplateVisibleRangeOptionsPtrOutputWithContext(ctx)
}

// TemplateVisibleRangeOptionsPtrInput is an input type that accepts TemplateVisibleRangeOptionsArgs, TemplateVisibleRangeOptionsPtr and TemplateVisibleRangeOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateVisibleRangeOptionsPtrInput` via:
//
//	        TemplateVisibleRangeOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateVisibleRangeOptionsPtrInput interface {
	pulumi.Input

	ToTemplateVisibleRangeOptionsPtrOutput() TemplateVisibleRangeOptionsPtrOutput
	ToTemplateVisibleRangeOptionsPtrOutputWithContext(context.Context) TemplateVisibleRangeOptionsPtrOutput
}

type templateVisibleRangeOptionsPtrType TemplateVisibleRangeOptionsArgs

func TemplateVisibleRangeOptionsPtr(v *TemplateVisibleRangeOptionsArgs) TemplateVisibleRangeOptionsPtrInput {
	return (*templateVisibleRangeOptionsPtrType)(v)
}

func (*templateVisibleRangeOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateVisibleRangeOptions)(nil)).Elem()
}

func (i *templateVisibleRangeOptionsPtrType) ToTemplateVisibleRangeOptionsPtrOutput() TemplateVisibleRangeOptionsPtrOutput {
	return i.ToTemplateVisibleRangeOptionsPtrOutputWithContext(context.Background())
}

func (i *templateVisibleRangeOptionsPtrType) ToTemplateVisibleRangeOptionsPtrOutputWithContext(ctx context.Context) TemplateVisibleRangeOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateVisibleRangeOptionsPtrOutput)
}

type TemplateVisibleRangeOptionsOutput struct{ *pulumi.OutputState }

func (TemplateVisibleRangeOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateVisibleRangeOptions)(nil)).Elem()
}

func (o TemplateVisibleRangeOptionsOutput) ToTemplateVisibleRangeOptionsOutput() TemplateVisibleRangeOptionsOutput {
	return o
}

func (o TemplateVisibleRangeOptionsOutput) ToTemplateVisibleRangeOptionsOutputWithContext(ctx context.Context) TemplateVisibleRangeOptionsOutput {
	return o
}

func (o TemplateVisibleRangeOptionsOutput) ToTemplateVisibleRangeOptionsPtrOutput() TemplateVisibleRangeOptionsPtrOutput {
	return o.ToTemplateVisibleRangeOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateVisibleRangeOptionsOutput) ToTemplateVisibleRangeOptionsPtrOutputWithContext(ctx context.Context) TemplateVisibleRangeOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateVisibleRangeOptions) *TemplateVisibleRangeOptions {
		return &v
	}).(TemplateVisibleRangeOptionsPtrOutput)
}

// The percent range in the visible range.
func (o TemplateVisibleRangeOptionsOutput) PercentRange() TemplatePercentVisibleRangePtrOutput {
	return o.ApplyT(func(v TemplateVisibleRangeOptions) *TemplatePercentVisibleRange { return v.PercentRange }).(TemplatePercentVisibleRangePtrOutput)
}

type TemplateVisibleRangeOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateVisibleRangeOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateVisibleRangeOptions)(nil)).Elem()
}

func (o TemplateVisibleRangeOptionsPtrOutput) ToTemplateVisibleRangeOptionsPtrOutput() TemplateVisibleRangeOptionsPtrOutput {
	return o
}

func (o TemplateVisibleRangeOptionsPtrOutput) ToTemplateVisibleRangeOptionsPtrOutputWithContext(ctx context.Context) TemplateVisibleRangeOptionsPtrOutput {
	return o
}

func (o TemplateVisibleRangeOptionsPtrOutput) Elem() TemplateVisibleRangeOptionsOutput {
	return o.ApplyT(func(v *TemplateVisibleRangeOptions) TemplateVisibleRangeOptions {
		if v != nil {
			return *v
		}
		var ret TemplateVisibleRangeOptions
		return ret
	}).(TemplateVisibleRangeOptionsOutput)
}

// The percent range in the visible range.
func (o TemplateVisibleRangeOptionsPtrOutput) PercentRange() TemplatePercentVisibleRangePtrOutput {
	return o.ApplyT(func(v *TemplateVisibleRangeOptions) *TemplatePercentVisibleRange {
		if v == nil {
			return nil
		}
		return v.PercentRange
	}).(TemplatePercentVisibleRangePtrOutput)
}

type TemplateVisual struct {
	// A bar chart.
	//
	// For more information, see [Using bar charts](https://docs.aws.amazon.com/quicksight/latest/user/bar-charts.html) in the *Amazon QuickSight User Guide* .
	BarChartVisual *TemplateBarChartVisual `pulumi:"barChartVisual"`
	// A box plot.
	//
	// For more information, see [Using box plots](https://docs.aws.amazon.com/quicksight/latest/user/box-plots.html) in the *Amazon QuickSight User Guide* .
	BoxPlotVisual *TemplateBoxPlotVisual `pulumi:"boxPlotVisual"`
	// A combo chart.
	//
	// For more information, see [Using combo charts](https://docs.aws.amazon.com/quicksight/latest/user/combo-charts.html) in the *Amazon QuickSight User Guide* .
	ComboChartVisual *TemplateComboChartVisual `pulumi:"comboChartVisual"`
	// A visual that contains custom content.
	//
	// For more information, see [Using custom visual content](https://docs.aws.amazon.com/quicksight/latest/user/custom-visual-content.html) in the *Amazon QuickSight User Guide* .
	CustomContentVisual *TemplateCustomContentVisual `pulumi:"customContentVisual"`
	// An empty visual.
	EmptyVisual *TemplateEmptyVisual `pulumi:"emptyVisual"`
	// A filled map.
	//
	// For more information, see [Creating filled maps](https://docs.aws.amazon.com/quicksight/latest/user/filled-maps.html) in the *Amazon QuickSight User Guide* .
	FilledMapVisual *TemplateFilledMapVisual `pulumi:"filledMapVisual"`
	// A funnel chart.
	//
	// For more information, see [Using funnel charts](https://docs.aws.amazon.com/quicksight/latest/user/funnel-visual-content.html) in the *Amazon QuickSight User Guide* .
	FunnelChartVisual *TemplateFunnelChartVisual `pulumi:"funnelChartVisual"`
	// A gauge chart.
	//
	// For more information, see [Using gauge charts](https://docs.aws.amazon.com/quicksight/latest/user/gauge-chart.html) in the *Amazon QuickSight User Guide* .
	GaugeChartVisual *TemplateGaugeChartVisual `pulumi:"gaugeChartVisual"`
	// A geospatial map or a points on map visual.
	//
	// For more information, see [Creating point maps](https://docs.aws.amazon.com/quicksight/latest/user/point-maps.html) in the *Amazon QuickSight User Guide* .
	GeospatialMapVisual *TemplateGeospatialMapVisual `pulumi:"geospatialMapVisual"`
	// A heat map.
	//
	// For more information, see [Using heat maps](https://docs.aws.amazon.com/quicksight/latest/user/heat-map.html) in the *Amazon QuickSight User Guide* .
	HeatMapVisual *TemplateHeatMapVisual `pulumi:"heatMapVisual"`
	// A histogram.
	//
	// For more information, see [Using histograms](https://docs.aws.amazon.com/quicksight/latest/user/histogram-charts.html) in the *Amazon QuickSight User Guide* .
	HistogramVisual *TemplateHistogramVisual `pulumi:"histogramVisual"`
	// An insight visual.
	//
	// For more information, see [Working with insights](https://docs.aws.amazon.com/quicksight/latest/user/computational-insights.html) in the *Amazon QuickSight User Guide* .
	InsightVisual *TemplateInsightVisual `pulumi:"insightVisual"`
	// A key performance indicator (KPI).
	//
	// For more information, see [Using KPIs](https://docs.aws.amazon.com/quicksight/latest/user/kpi.html) in the *Amazon QuickSight User Guide* .
	KpiVisual *TemplateKpiVisual `pulumi:"kpiVisual"`
	// A line chart.
	//
	// For more information, see [Using line charts](https://docs.aws.amazon.com/quicksight/latest/user/line-charts.html) in the *Amazon QuickSight User Guide* .
	LineChartVisual *TemplateLineChartVisual `pulumi:"lineChartVisual"`
	// A pie or donut chart.
	//
	// For more information, see [Using pie charts](https://docs.aws.amazon.com/quicksight/latest/user/pie-chart.html) in the *Amazon QuickSight User Guide* .
	PieChartVisual *TemplatePieChartVisual `pulumi:"pieChartVisual"`
	// A pivot table.
	//
	// For more information, see [Using pivot tables](https://docs.aws.amazon.com/quicksight/latest/user/pivot-table.html) in the *Amazon QuickSight User Guide* .
	PivotTableVisual *TemplatePivotTableVisual `pulumi:"pivotTableVisual"`
	// A radar chart visual.
	//
	// For more information, see [Using radar charts](https://docs.aws.amazon.com/quicksight/latest/user/radar-chart.html) in the *Amazon QuickSight User Guide* .
	RadarChartVisual *TemplateRadarChartVisual `pulumi:"radarChartVisual"`
	// A sankey diagram.
	//
	// For more information, see [Using Sankey diagrams](https://docs.aws.amazon.com/quicksight/latest/user/sankey-diagram.html) in the *Amazon QuickSight User Guide* .
	SankeyDiagramVisual *TemplateSankeyDiagramVisual `pulumi:"sankeyDiagramVisual"`
	// A scatter plot.
	//
	// For more information, see [Using scatter plots](https://docs.aws.amazon.com/quicksight/latest/user/scatter-plot.html) in the *Amazon QuickSight User Guide* .
	ScatterPlotVisual *TemplateScatterPlotVisual `pulumi:"scatterPlotVisual"`
	// A table visual.
	//
	// For more information, see [Using tables as visuals](https://docs.aws.amazon.com/quicksight/latest/user/tabular.html) in the *Amazon QuickSight User Guide* .
	TableVisual *TemplateTableVisual `pulumi:"tableVisual"`
	// A tree map.
	//
	// For more information, see [Using tree maps](https://docs.aws.amazon.com/quicksight/latest/user/tree-map.html) in the *Amazon QuickSight User Guide* .
	TreeMapVisual *TemplateTreeMapVisual `pulumi:"treeMapVisual"`
	// A waterfall chart.
	//
	// For more information, see [Using waterfall charts](https://docs.aws.amazon.com/quicksight/latest/user/waterfall-chart.html) in the *Amazon QuickSight User Guide* .
	WaterfallVisual *TemplateWaterfallVisual `pulumi:"waterfallVisual"`
	// A word cloud.
	//
	// For more information, see [Using word clouds](https://docs.aws.amazon.com/quicksight/latest/user/word-cloud.html) in the *Amazon QuickSight User Guide* .
	WordCloudVisual *TemplateWordCloudVisual `pulumi:"wordCloudVisual"`
}

// TemplateVisualInput is an input type that accepts TemplateVisualArgs and TemplateVisualOutput values.
// You can construct a concrete instance of `TemplateVisualInput` via:
//
//	TemplateVisualArgs{...}
type TemplateVisualInput interface {
	pulumi.Input

	ToTemplateVisualOutput() TemplateVisualOutput
	ToTemplateVisualOutputWithContext(context.Context) TemplateVisualOutput
}

type TemplateVisualArgs struct {
	// A bar chart.
	//
	// For more information, see [Using bar charts](https://docs.aws.amazon.com/quicksight/latest/user/bar-charts.html) in the *Amazon QuickSight User Guide* .
	BarChartVisual TemplateBarChartVisualPtrInput `pulumi:"barChartVisual"`
	// A box plot.
	//
	// For more information, see [Using box plots](https://docs.aws.amazon.com/quicksight/latest/user/box-plots.html) in the *Amazon QuickSight User Guide* .
	BoxPlotVisual TemplateBoxPlotVisualPtrInput `pulumi:"boxPlotVisual"`
	// A combo chart.
	//
	// For more information, see [Using combo charts](https://docs.aws.amazon.com/quicksight/latest/user/combo-charts.html) in the *Amazon QuickSight User Guide* .
	ComboChartVisual TemplateComboChartVisualPtrInput `pulumi:"comboChartVisual"`
	// A visual that contains custom content.
	//
	// For more information, see [Using custom visual content](https://docs.aws.amazon.com/quicksight/latest/user/custom-visual-content.html) in the *Amazon QuickSight User Guide* .
	CustomContentVisual TemplateCustomContentVisualPtrInput `pulumi:"customContentVisual"`
	// An empty visual.
	EmptyVisual TemplateEmptyVisualPtrInput `pulumi:"emptyVisual"`
	// A filled map.
	//
	// For more information, see [Creating filled maps](https://docs.aws.amazon.com/quicksight/latest/user/filled-maps.html) in the *Amazon QuickSight User Guide* .
	FilledMapVisual TemplateFilledMapVisualPtrInput `pulumi:"filledMapVisual"`
	// A funnel chart.
	//
	// For more information, see [Using funnel charts](https://docs.aws.amazon.com/quicksight/latest/user/funnel-visual-content.html) in the *Amazon QuickSight User Guide* .
	FunnelChartVisual TemplateFunnelChartVisualPtrInput `pulumi:"funnelChartVisual"`
	// A gauge chart.
	//
	// For more information, see [Using gauge charts](https://docs.aws.amazon.com/quicksight/latest/user/gauge-chart.html) in the *Amazon QuickSight User Guide* .
	GaugeChartVisual TemplateGaugeChartVisualPtrInput `pulumi:"gaugeChartVisual"`
	// A geospatial map or a points on map visual.
	//
	// For more information, see [Creating point maps](https://docs.aws.amazon.com/quicksight/latest/user/point-maps.html) in the *Amazon QuickSight User Guide* .
	GeospatialMapVisual TemplateGeospatialMapVisualPtrInput `pulumi:"geospatialMapVisual"`
	// A heat map.
	//
	// For more information, see [Using heat maps](https://docs.aws.amazon.com/quicksight/latest/user/heat-map.html) in the *Amazon QuickSight User Guide* .
	HeatMapVisual TemplateHeatMapVisualPtrInput `pulumi:"heatMapVisual"`
	// A histogram.
	//
	// For more information, see [Using histograms](https://docs.aws.amazon.com/quicksight/latest/user/histogram-charts.html) in the *Amazon QuickSight User Guide* .
	HistogramVisual TemplateHistogramVisualPtrInput `pulumi:"histogramVisual"`
	// An insight visual.
	//
	// For more information, see [Working with insights](https://docs.aws.amazon.com/quicksight/latest/user/computational-insights.html) in the *Amazon QuickSight User Guide* .
	InsightVisual TemplateInsightVisualPtrInput `pulumi:"insightVisual"`
	// A key performance indicator (KPI).
	//
	// For more information, see [Using KPIs](https://docs.aws.amazon.com/quicksight/latest/user/kpi.html) in the *Amazon QuickSight User Guide* .
	KpiVisual TemplateKpiVisualPtrInput `pulumi:"kpiVisual"`
	// A line chart.
	//
	// For more information, see [Using line charts](https://docs.aws.amazon.com/quicksight/latest/user/line-charts.html) in the *Amazon QuickSight User Guide* .
	LineChartVisual TemplateLineChartVisualPtrInput `pulumi:"lineChartVisual"`
	// A pie or donut chart.
	//
	// For more information, see [Using pie charts](https://docs.aws.amazon.com/quicksight/latest/user/pie-chart.html) in the *Amazon QuickSight User Guide* .
	PieChartVisual TemplatePieChartVisualPtrInput `pulumi:"pieChartVisual"`
	// A pivot table.
	//
	// For more information, see [Using pivot tables](https://docs.aws.amazon.com/quicksight/latest/user/pivot-table.html) in the *Amazon QuickSight User Guide* .
	PivotTableVisual TemplatePivotTableVisualPtrInput `pulumi:"pivotTableVisual"`
	// A radar chart visual.
	//
	// For more information, see [Using radar charts](https://docs.aws.amazon.com/quicksight/latest/user/radar-chart.html) in the *Amazon QuickSight User Guide* .
	RadarChartVisual TemplateRadarChartVisualPtrInput `pulumi:"radarChartVisual"`
	// A sankey diagram.
	//
	// For more information, see [Using Sankey diagrams](https://docs.aws.amazon.com/quicksight/latest/user/sankey-diagram.html) in the *Amazon QuickSight User Guide* .
	SankeyDiagramVisual TemplateSankeyDiagramVisualPtrInput `pulumi:"sankeyDiagramVisual"`
	// A scatter plot.
	//
	// For more information, see [Using scatter plots](https://docs.aws.amazon.com/quicksight/latest/user/scatter-plot.html) in the *Amazon QuickSight User Guide* .
	ScatterPlotVisual TemplateScatterPlotVisualPtrInput `pulumi:"scatterPlotVisual"`
	// A table visual.
	//
	// For more information, see [Using tables as visuals](https://docs.aws.amazon.com/quicksight/latest/user/tabular.html) in the *Amazon QuickSight User Guide* .
	TableVisual TemplateTableVisualPtrInput `pulumi:"tableVisual"`
	// A tree map.
	//
	// For more information, see [Using tree maps](https://docs.aws.amazon.com/quicksight/latest/user/tree-map.html) in the *Amazon QuickSight User Guide* .
	TreeMapVisual TemplateTreeMapVisualPtrInput `pulumi:"treeMapVisual"`
	// A waterfall chart.
	//
	// For more information, see [Using waterfall charts](https://docs.aws.amazon.com/quicksight/latest/user/waterfall-chart.html) in the *Amazon QuickSight User Guide* .
	WaterfallVisual TemplateWaterfallVisualPtrInput `pulumi:"waterfallVisual"`
	// A word cloud.
	//
	// For more information, see [Using word clouds](https://docs.aws.amazon.com/quicksight/latest/user/word-cloud.html) in the *Amazon QuickSight User Guide* .
	WordCloudVisual TemplateWordCloudVisualPtrInput `pulumi:"wordCloudVisual"`
}

func (TemplateVisualArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateVisual)(nil)).Elem()
}

func (i TemplateVisualArgs) ToTemplateVisualOutput() TemplateVisualOutput {
	return i.ToTemplateVisualOutputWithContext(context.Background())
}

func (i TemplateVisualArgs) ToTemplateVisualOutputWithContext(ctx context.Context) TemplateVisualOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateVisualOutput)
}

// TemplateVisualArrayInput is an input type that accepts TemplateVisualArray and TemplateVisualArrayOutput values.
// You can construct a concrete instance of `TemplateVisualArrayInput` via:
//
//	TemplateVisualArray{ TemplateVisualArgs{...} }
type TemplateVisualArrayInput interface {
	pulumi.Input

	ToTemplateVisualArrayOutput() TemplateVisualArrayOutput
	ToTemplateVisualArrayOutputWithContext(context.Context) TemplateVisualArrayOutput
}

type TemplateVisualArray []TemplateVisualInput

func (TemplateVisualArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateVisual)(nil)).Elem()
}

func (i TemplateVisualArray) ToTemplateVisualArrayOutput() TemplateVisualArrayOutput {
	return i.ToTemplateVisualArrayOutputWithContext(context.Background())
}

func (i TemplateVisualArray) ToTemplateVisualArrayOutputWithContext(ctx context.Context) TemplateVisualArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateVisualArrayOutput)
}

type TemplateVisualOutput struct{ *pulumi.OutputState }

func (TemplateVisualOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateVisual)(nil)).Elem()
}

func (o TemplateVisualOutput) ToTemplateVisualOutput() TemplateVisualOutput {
	return o
}

func (o TemplateVisualOutput) ToTemplateVisualOutputWithContext(ctx context.Context) TemplateVisualOutput {
	return o
}

// A bar chart.
//
// For more information, see [Using bar charts](https://docs.aws.amazon.com/quicksight/latest/user/bar-charts.html) in the *Amazon QuickSight User Guide* .
func (o TemplateVisualOutput) BarChartVisual() TemplateBarChartVisualPtrOutput {
	return o.ApplyT(func(v TemplateVisual) *TemplateBarChartVisual { return v.BarChartVisual }).(TemplateBarChartVisualPtrOutput)
}

// A box plot.
//
// For more information, see [Using box plots](https://docs.aws.amazon.com/quicksight/latest/user/box-plots.html) in the *Amazon QuickSight User Guide* .
func (o TemplateVisualOutput) BoxPlotVisual() TemplateBoxPlotVisualPtrOutput {
	return o.ApplyT(func(v TemplateVisual) *TemplateBoxPlotVisual { return v.BoxPlotVisual }).(TemplateBoxPlotVisualPtrOutput)
}

// A combo chart.
//
// For more information, see [Using combo charts](https://docs.aws.amazon.com/quicksight/latest/user/combo-charts.html) in the *Amazon QuickSight User Guide* .
func (o TemplateVisualOutput) ComboChartVisual() TemplateComboChartVisualPtrOutput {
	return o.ApplyT(func(v TemplateVisual) *TemplateComboChartVisual { return v.ComboChartVisual }).(TemplateComboChartVisualPtrOutput)
}

// A visual that contains custom content.
//
// For more information, see [Using custom visual content](https://docs.aws.amazon.com/quicksight/latest/user/custom-visual-content.html) in the *Amazon QuickSight User Guide* .
func (o TemplateVisualOutput) CustomContentVisual() TemplateCustomContentVisualPtrOutput {
	return o.ApplyT(func(v TemplateVisual) *TemplateCustomContentVisual { return v.CustomContentVisual }).(TemplateCustomContentVisualPtrOutput)
}

// An empty visual.
func (o TemplateVisualOutput) EmptyVisual() TemplateEmptyVisualPtrOutput {
	return o.ApplyT(func(v TemplateVisual) *TemplateEmptyVisual { return v.EmptyVisual }).(TemplateEmptyVisualPtrOutput)
}

// A filled map.
//
// For more information, see [Creating filled maps](https://docs.aws.amazon.com/quicksight/latest/user/filled-maps.html) in the *Amazon QuickSight User Guide* .
func (o TemplateVisualOutput) FilledMapVisual() TemplateFilledMapVisualPtrOutput {
	return o.ApplyT(func(v TemplateVisual) *TemplateFilledMapVisual { return v.FilledMapVisual }).(TemplateFilledMapVisualPtrOutput)
}

// A funnel chart.
//
// For more information, see [Using funnel charts](https://docs.aws.amazon.com/quicksight/latest/user/funnel-visual-content.html) in the *Amazon QuickSight User Guide* .
func (o TemplateVisualOutput) FunnelChartVisual() TemplateFunnelChartVisualPtrOutput {
	return o.ApplyT(func(v TemplateVisual) *TemplateFunnelChartVisual { return v.FunnelChartVisual }).(TemplateFunnelChartVisualPtrOutput)
}

// A gauge chart.
//
// For more information, see [Using gauge charts](https://docs.aws.amazon.com/quicksight/latest/user/gauge-chart.html) in the *Amazon QuickSight User Guide* .
func (o TemplateVisualOutput) GaugeChartVisual() TemplateGaugeChartVisualPtrOutput {
	return o.ApplyT(func(v TemplateVisual) *TemplateGaugeChartVisual { return v.GaugeChartVisual }).(TemplateGaugeChartVisualPtrOutput)
}

// A geospatial map or a points on map visual.
//
// For more information, see [Creating point maps](https://docs.aws.amazon.com/quicksight/latest/user/point-maps.html) in the *Amazon QuickSight User Guide* .
func (o TemplateVisualOutput) GeospatialMapVisual() TemplateGeospatialMapVisualPtrOutput {
	return o.ApplyT(func(v TemplateVisual) *TemplateGeospatialMapVisual { return v.GeospatialMapVisual }).(TemplateGeospatialMapVisualPtrOutput)
}

// A heat map.
//
// For more information, see [Using heat maps](https://docs.aws.amazon.com/quicksight/latest/user/heat-map.html) in the *Amazon QuickSight User Guide* .
func (o TemplateVisualOutput) HeatMapVisual() TemplateHeatMapVisualPtrOutput {
	return o.ApplyT(func(v TemplateVisual) *TemplateHeatMapVisual { return v.HeatMapVisual }).(TemplateHeatMapVisualPtrOutput)
}

// A histogram.
//
// For more information, see [Using histograms](https://docs.aws.amazon.com/quicksight/latest/user/histogram-charts.html) in the *Amazon QuickSight User Guide* .
func (o TemplateVisualOutput) HistogramVisual() TemplateHistogramVisualPtrOutput {
	return o.ApplyT(func(v TemplateVisual) *TemplateHistogramVisual { return v.HistogramVisual }).(TemplateHistogramVisualPtrOutput)
}

// An insight visual.
//
// For more information, see [Working with insights](https://docs.aws.amazon.com/quicksight/latest/user/computational-insights.html) in the *Amazon QuickSight User Guide* .
func (o TemplateVisualOutput) InsightVisual() TemplateInsightVisualPtrOutput {
	return o.ApplyT(func(v TemplateVisual) *TemplateInsightVisual { return v.InsightVisual }).(TemplateInsightVisualPtrOutput)
}

// A key performance indicator (KPI).
//
// For more information, see [Using KPIs](https://docs.aws.amazon.com/quicksight/latest/user/kpi.html) in the *Amazon QuickSight User Guide* .
func (o TemplateVisualOutput) KpiVisual() TemplateKpiVisualPtrOutput {
	return o.ApplyT(func(v TemplateVisual) *TemplateKpiVisual { return v.KpiVisual }).(TemplateKpiVisualPtrOutput)
}

// A line chart.
//
// For more information, see [Using line charts](https://docs.aws.amazon.com/quicksight/latest/user/line-charts.html) in the *Amazon QuickSight User Guide* .
func (o TemplateVisualOutput) LineChartVisual() TemplateLineChartVisualPtrOutput {
	return o.ApplyT(func(v TemplateVisual) *TemplateLineChartVisual { return v.LineChartVisual }).(TemplateLineChartVisualPtrOutput)
}

// A pie or donut chart.
//
// For more information, see [Using pie charts](https://docs.aws.amazon.com/quicksight/latest/user/pie-chart.html) in the *Amazon QuickSight User Guide* .
func (o TemplateVisualOutput) PieChartVisual() TemplatePieChartVisualPtrOutput {
	return o.ApplyT(func(v TemplateVisual) *TemplatePieChartVisual { return v.PieChartVisual }).(TemplatePieChartVisualPtrOutput)
}

// A pivot table.
//
// For more information, see [Using pivot tables](https://docs.aws.amazon.com/quicksight/latest/user/pivot-table.html) in the *Amazon QuickSight User Guide* .
func (o TemplateVisualOutput) PivotTableVisual() TemplatePivotTableVisualPtrOutput {
	return o.ApplyT(func(v TemplateVisual) *TemplatePivotTableVisual { return v.PivotTableVisual }).(TemplatePivotTableVisualPtrOutput)
}

// A radar chart visual.
//
// For more information, see [Using radar charts](https://docs.aws.amazon.com/quicksight/latest/user/radar-chart.html) in the *Amazon QuickSight User Guide* .
func (o TemplateVisualOutput) RadarChartVisual() TemplateRadarChartVisualPtrOutput {
	return o.ApplyT(func(v TemplateVisual) *TemplateRadarChartVisual { return v.RadarChartVisual }).(TemplateRadarChartVisualPtrOutput)
}

// A sankey diagram.
//
// For more information, see [Using Sankey diagrams](https://docs.aws.amazon.com/quicksight/latest/user/sankey-diagram.html) in the *Amazon QuickSight User Guide* .
func (o TemplateVisualOutput) SankeyDiagramVisual() TemplateSankeyDiagramVisualPtrOutput {
	return o.ApplyT(func(v TemplateVisual) *TemplateSankeyDiagramVisual { return v.SankeyDiagramVisual }).(TemplateSankeyDiagramVisualPtrOutput)
}

// A scatter plot.
//
// For more information, see [Using scatter plots](https://docs.aws.amazon.com/quicksight/latest/user/scatter-plot.html) in the *Amazon QuickSight User Guide* .
func (o TemplateVisualOutput) ScatterPlotVisual() TemplateScatterPlotVisualPtrOutput {
	return o.ApplyT(func(v TemplateVisual) *TemplateScatterPlotVisual { return v.ScatterPlotVisual }).(TemplateScatterPlotVisualPtrOutput)
}

// A table visual.
//
// For more information, see [Using tables as visuals](https://docs.aws.amazon.com/quicksight/latest/user/tabular.html) in the *Amazon QuickSight User Guide* .
func (o TemplateVisualOutput) TableVisual() TemplateTableVisualPtrOutput {
	return o.ApplyT(func(v TemplateVisual) *TemplateTableVisual { return v.TableVisual }).(TemplateTableVisualPtrOutput)
}

// A tree map.
//
// For more information, see [Using tree maps](https://docs.aws.amazon.com/quicksight/latest/user/tree-map.html) in the *Amazon QuickSight User Guide* .
func (o TemplateVisualOutput) TreeMapVisual() TemplateTreeMapVisualPtrOutput {
	return o.ApplyT(func(v TemplateVisual) *TemplateTreeMapVisual { return v.TreeMapVisual }).(TemplateTreeMapVisualPtrOutput)
}

// A waterfall chart.
//
// For more information, see [Using waterfall charts](https://docs.aws.amazon.com/quicksight/latest/user/waterfall-chart.html) in the *Amazon QuickSight User Guide* .
func (o TemplateVisualOutput) WaterfallVisual() TemplateWaterfallVisualPtrOutput {
	return o.ApplyT(func(v TemplateVisual) *TemplateWaterfallVisual { return v.WaterfallVisual }).(TemplateWaterfallVisualPtrOutput)
}

// A word cloud.
//
// For more information, see [Using word clouds](https://docs.aws.amazon.com/quicksight/latest/user/word-cloud.html) in the *Amazon QuickSight User Guide* .
func (o TemplateVisualOutput) WordCloudVisual() TemplateWordCloudVisualPtrOutput {
	return o.ApplyT(func(v TemplateVisual) *TemplateWordCloudVisual { return v.WordCloudVisual }).(TemplateWordCloudVisualPtrOutput)
}

type TemplateVisualArrayOutput struct{ *pulumi.OutputState }

func (TemplateVisualArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateVisual)(nil)).Elem()
}

func (o TemplateVisualArrayOutput) ToTemplateVisualArrayOutput() TemplateVisualArrayOutput {
	return o
}

func (o TemplateVisualArrayOutput) ToTemplateVisualArrayOutputWithContext(ctx context.Context) TemplateVisualArrayOutput {
	return o
}

func (o TemplateVisualArrayOutput) Index(i pulumi.IntInput) TemplateVisualOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateVisual {
		return vs[0].([]TemplateVisual)[vs[1].(int)]
	}).(TemplateVisualOutput)
}

type TemplateVisualCustomAction struct {
	// A list of `VisualCustomActionOperations` .
	//
	// This is a union type structure. For this structure to be valid, only one of the attributes can be defined.
	ActionOperations []TemplateVisualCustomActionOperation `pulumi:"actionOperations"`
	// The ID of the `VisualCustomAction` .
	CustomActionId string `pulumi:"customActionId"`
	// The name of the `VisualCustomAction` .
	Name string `pulumi:"name"`
	// The status of the `VisualCustomAction` .
	Status *TemplateWidgetStatus `pulumi:"status"`
	// The trigger of the `VisualCustomAction` .
	//
	// Valid values are defined as follows:
	//
	// - `DATA_POINT_CLICK` : Initiates a custom action by a left pointer click on a data point.
	// - `DATA_POINT_MENU` : Initiates a custom action by right pointer click from the menu.
	Trigger TemplateVisualCustomActionTrigger `pulumi:"trigger"`
}

// TemplateVisualCustomActionInput is an input type that accepts TemplateVisualCustomActionArgs and TemplateVisualCustomActionOutput values.
// You can construct a concrete instance of `TemplateVisualCustomActionInput` via:
//
//	TemplateVisualCustomActionArgs{...}
type TemplateVisualCustomActionInput interface {
	pulumi.Input

	ToTemplateVisualCustomActionOutput() TemplateVisualCustomActionOutput
	ToTemplateVisualCustomActionOutputWithContext(context.Context) TemplateVisualCustomActionOutput
}

type TemplateVisualCustomActionArgs struct {
	// A list of `VisualCustomActionOperations` .
	//
	// This is a union type structure. For this structure to be valid, only one of the attributes can be defined.
	ActionOperations TemplateVisualCustomActionOperationArrayInput `pulumi:"actionOperations"`
	// The ID of the `VisualCustomAction` .
	CustomActionId pulumi.StringInput `pulumi:"customActionId"`
	// The name of the `VisualCustomAction` .
	Name pulumi.StringInput `pulumi:"name"`
	// The status of the `VisualCustomAction` .
	Status TemplateWidgetStatusPtrInput `pulumi:"status"`
	// The trigger of the `VisualCustomAction` .
	//
	// Valid values are defined as follows:
	//
	// - `DATA_POINT_CLICK` : Initiates a custom action by a left pointer click on a data point.
	// - `DATA_POINT_MENU` : Initiates a custom action by right pointer click from the menu.
	Trigger TemplateVisualCustomActionTriggerInput `pulumi:"trigger"`
}

func (TemplateVisualCustomActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateVisualCustomAction)(nil)).Elem()
}

func (i TemplateVisualCustomActionArgs) ToTemplateVisualCustomActionOutput() TemplateVisualCustomActionOutput {
	return i.ToTemplateVisualCustomActionOutputWithContext(context.Background())
}

func (i TemplateVisualCustomActionArgs) ToTemplateVisualCustomActionOutputWithContext(ctx context.Context) TemplateVisualCustomActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateVisualCustomActionOutput)
}

// TemplateVisualCustomActionArrayInput is an input type that accepts TemplateVisualCustomActionArray and TemplateVisualCustomActionArrayOutput values.
// You can construct a concrete instance of `TemplateVisualCustomActionArrayInput` via:
//
//	TemplateVisualCustomActionArray{ TemplateVisualCustomActionArgs{...} }
type TemplateVisualCustomActionArrayInput interface {
	pulumi.Input

	ToTemplateVisualCustomActionArrayOutput() TemplateVisualCustomActionArrayOutput
	ToTemplateVisualCustomActionArrayOutputWithContext(context.Context) TemplateVisualCustomActionArrayOutput
}

type TemplateVisualCustomActionArray []TemplateVisualCustomActionInput

func (TemplateVisualCustomActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateVisualCustomAction)(nil)).Elem()
}

func (i TemplateVisualCustomActionArray) ToTemplateVisualCustomActionArrayOutput() TemplateVisualCustomActionArrayOutput {
	return i.ToTemplateVisualCustomActionArrayOutputWithContext(context.Background())
}

func (i TemplateVisualCustomActionArray) ToTemplateVisualCustomActionArrayOutputWithContext(ctx context.Context) TemplateVisualCustomActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateVisualCustomActionArrayOutput)
}

type TemplateVisualCustomActionOutput struct{ *pulumi.OutputState }

func (TemplateVisualCustomActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateVisualCustomAction)(nil)).Elem()
}

func (o TemplateVisualCustomActionOutput) ToTemplateVisualCustomActionOutput() TemplateVisualCustomActionOutput {
	return o
}

func (o TemplateVisualCustomActionOutput) ToTemplateVisualCustomActionOutputWithContext(ctx context.Context) TemplateVisualCustomActionOutput {
	return o
}

// A list of `VisualCustomActionOperations` .
//
// This is a union type structure. For this structure to be valid, only one of the attributes can be defined.
func (o TemplateVisualCustomActionOutput) ActionOperations() TemplateVisualCustomActionOperationArrayOutput {
	return o.ApplyT(func(v TemplateVisualCustomAction) []TemplateVisualCustomActionOperation { return v.ActionOperations }).(TemplateVisualCustomActionOperationArrayOutput)
}

// The ID of the `VisualCustomAction` .
func (o TemplateVisualCustomActionOutput) CustomActionId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateVisualCustomAction) string { return v.CustomActionId }).(pulumi.StringOutput)
}

// The name of the `VisualCustomAction` .
func (o TemplateVisualCustomActionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateVisualCustomAction) string { return v.Name }).(pulumi.StringOutput)
}

// The status of the `VisualCustomAction` .
func (o TemplateVisualCustomActionOutput) Status() TemplateWidgetStatusPtrOutput {
	return o.ApplyT(func(v TemplateVisualCustomAction) *TemplateWidgetStatus { return v.Status }).(TemplateWidgetStatusPtrOutput)
}

// The trigger of the `VisualCustomAction` .
//
// Valid values are defined as follows:
//
// - `DATA_POINT_CLICK` : Initiates a custom action by a left pointer click on a data point.
// - `DATA_POINT_MENU` : Initiates a custom action by right pointer click from the menu.
func (o TemplateVisualCustomActionOutput) Trigger() TemplateVisualCustomActionTriggerOutput {
	return o.ApplyT(func(v TemplateVisualCustomAction) TemplateVisualCustomActionTrigger { return v.Trigger }).(TemplateVisualCustomActionTriggerOutput)
}

type TemplateVisualCustomActionArrayOutput struct{ *pulumi.OutputState }

func (TemplateVisualCustomActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateVisualCustomAction)(nil)).Elem()
}

func (o TemplateVisualCustomActionArrayOutput) ToTemplateVisualCustomActionArrayOutput() TemplateVisualCustomActionArrayOutput {
	return o
}

func (o TemplateVisualCustomActionArrayOutput) ToTemplateVisualCustomActionArrayOutputWithContext(ctx context.Context) TemplateVisualCustomActionArrayOutput {
	return o
}

func (o TemplateVisualCustomActionArrayOutput) Index(i pulumi.IntInput) TemplateVisualCustomActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateVisualCustomAction {
		return vs[0].([]TemplateVisualCustomAction)[vs[1].(int)]
	}).(TemplateVisualCustomActionOutput)
}

type TemplateVisualCustomActionOperation struct {
	// The filter operation that filters data included in a visual or in an entire sheet.
	FilterOperation *TemplateCustomActionFilterOperation `pulumi:"filterOperation"`
	// The navigation operation that navigates between different sheets in the same analysis.
	NavigationOperation *TemplateCustomActionNavigationOperation `pulumi:"navigationOperation"`
	// The set parameter operation that sets parameters in custom action.
	SetParametersOperation *TemplateCustomActionSetParametersOperation `pulumi:"setParametersOperation"`
	// The URL operation that opens a link to another webpage.
	UrlOperation *TemplateCustomActionUrlOperation `pulumi:"urlOperation"`
}

// TemplateVisualCustomActionOperationInput is an input type that accepts TemplateVisualCustomActionOperationArgs and TemplateVisualCustomActionOperationOutput values.
// You can construct a concrete instance of `TemplateVisualCustomActionOperationInput` via:
//
//	TemplateVisualCustomActionOperationArgs{...}
type TemplateVisualCustomActionOperationInput interface {
	pulumi.Input

	ToTemplateVisualCustomActionOperationOutput() TemplateVisualCustomActionOperationOutput
	ToTemplateVisualCustomActionOperationOutputWithContext(context.Context) TemplateVisualCustomActionOperationOutput
}

type TemplateVisualCustomActionOperationArgs struct {
	// The filter operation that filters data included in a visual or in an entire sheet.
	FilterOperation TemplateCustomActionFilterOperationPtrInput `pulumi:"filterOperation"`
	// The navigation operation that navigates between different sheets in the same analysis.
	NavigationOperation TemplateCustomActionNavigationOperationPtrInput `pulumi:"navigationOperation"`
	// The set parameter operation that sets parameters in custom action.
	SetParametersOperation TemplateCustomActionSetParametersOperationPtrInput `pulumi:"setParametersOperation"`
	// The URL operation that opens a link to another webpage.
	UrlOperation TemplateCustomActionUrlOperationPtrInput `pulumi:"urlOperation"`
}

func (TemplateVisualCustomActionOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateVisualCustomActionOperation)(nil)).Elem()
}

func (i TemplateVisualCustomActionOperationArgs) ToTemplateVisualCustomActionOperationOutput() TemplateVisualCustomActionOperationOutput {
	return i.ToTemplateVisualCustomActionOperationOutputWithContext(context.Background())
}

func (i TemplateVisualCustomActionOperationArgs) ToTemplateVisualCustomActionOperationOutputWithContext(ctx context.Context) TemplateVisualCustomActionOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateVisualCustomActionOperationOutput)
}

// TemplateVisualCustomActionOperationArrayInput is an input type that accepts TemplateVisualCustomActionOperationArray and TemplateVisualCustomActionOperationArrayOutput values.
// You can construct a concrete instance of `TemplateVisualCustomActionOperationArrayInput` via:
//
//	TemplateVisualCustomActionOperationArray{ TemplateVisualCustomActionOperationArgs{...} }
type TemplateVisualCustomActionOperationArrayInput interface {
	pulumi.Input

	ToTemplateVisualCustomActionOperationArrayOutput() TemplateVisualCustomActionOperationArrayOutput
	ToTemplateVisualCustomActionOperationArrayOutputWithContext(context.Context) TemplateVisualCustomActionOperationArrayOutput
}

type TemplateVisualCustomActionOperationArray []TemplateVisualCustomActionOperationInput

func (TemplateVisualCustomActionOperationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateVisualCustomActionOperation)(nil)).Elem()
}

func (i TemplateVisualCustomActionOperationArray) ToTemplateVisualCustomActionOperationArrayOutput() TemplateVisualCustomActionOperationArrayOutput {
	return i.ToTemplateVisualCustomActionOperationArrayOutputWithContext(context.Background())
}

func (i TemplateVisualCustomActionOperationArray) ToTemplateVisualCustomActionOperationArrayOutputWithContext(ctx context.Context) TemplateVisualCustomActionOperationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateVisualCustomActionOperationArrayOutput)
}

type TemplateVisualCustomActionOperationOutput struct{ *pulumi.OutputState }

func (TemplateVisualCustomActionOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateVisualCustomActionOperation)(nil)).Elem()
}

func (o TemplateVisualCustomActionOperationOutput) ToTemplateVisualCustomActionOperationOutput() TemplateVisualCustomActionOperationOutput {
	return o
}

func (o TemplateVisualCustomActionOperationOutput) ToTemplateVisualCustomActionOperationOutputWithContext(ctx context.Context) TemplateVisualCustomActionOperationOutput {
	return o
}

// The filter operation that filters data included in a visual or in an entire sheet.
func (o TemplateVisualCustomActionOperationOutput) FilterOperation() TemplateCustomActionFilterOperationPtrOutput {
	return o.ApplyT(func(v TemplateVisualCustomActionOperation) *TemplateCustomActionFilterOperation {
		return v.FilterOperation
	}).(TemplateCustomActionFilterOperationPtrOutput)
}

// The navigation operation that navigates between different sheets in the same analysis.
func (o TemplateVisualCustomActionOperationOutput) NavigationOperation() TemplateCustomActionNavigationOperationPtrOutput {
	return o.ApplyT(func(v TemplateVisualCustomActionOperation) *TemplateCustomActionNavigationOperation {
		return v.NavigationOperation
	}).(TemplateCustomActionNavigationOperationPtrOutput)
}

// The set parameter operation that sets parameters in custom action.
func (o TemplateVisualCustomActionOperationOutput) SetParametersOperation() TemplateCustomActionSetParametersOperationPtrOutput {
	return o.ApplyT(func(v TemplateVisualCustomActionOperation) *TemplateCustomActionSetParametersOperation {
		return v.SetParametersOperation
	}).(TemplateCustomActionSetParametersOperationPtrOutput)
}

// The URL operation that opens a link to another webpage.
func (o TemplateVisualCustomActionOperationOutput) UrlOperation() TemplateCustomActionUrlOperationPtrOutput {
	return o.ApplyT(func(v TemplateVisualCustomActionOperation) *TemplateCustomActionUrlOperation { return v.UrlOperation }).(TemplateCustomActionUrlOperationPtrOutput)
}

type TemplateVisualCustomActionOperationArrayOutput struct{ *pulumi.OutputState }

func (TemplateVisualCustomActionOperationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateVisualCustomActionOperation)(nil)).Elem()
}

func (o TemplateVisualCustomActionOperationArrayOutput) ToTemplateVisualCustomActionOperationArrayOutput() TemplateVisualCustomActionOperationArrayOutput {
	return o
}

func (o TemplateVisualCustomActionOperationArrayOutput) ToTemplateVisualCustomActionOperationArrayOutputWithContext(ctx context.Context) TemplateVisualCustomActionOperationArrayOutput {
	return o
}

func (o TemplateVisualCustomActionOperationArrayOutput) Index(i pulumi.IntInput) TemplateVisualCustomActionOperationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateVisualCustomActionOperation {
		return vs[0].([]TemplateVisualCustomActionOperation)[vs[1].(int)]
	}).(TemplateVisualCustomActionOperationOutput)
}

type TemplateVisualPalette struct {
	// The chart color options for the visual palette.
	ChartColor *string `pulumi:"chartColor"`
	// The color map options for the visual palette.
	ColorMap []TemplateDataPathColor `pulumi:"colorMap"`
}

// TemplateVisualPaletteInput is an input type that accepts TemplateVisualPaletteArgs and TemplateVisualPaletteOutput values.
// You can construct a concrete instance of `TemplateVisualPaletteInput` via:
//
//	TemplateVisualPaletteArgs{...}
type TemplateVisualPaletteInput interface {
	pulumi.Input

	ToTemplateVisualPaletteOutput() TemplateVisualPaletteOutput
	ToTemplateVisualPaletteOutputWithContext(context.Context) TemplateVisualPaletteOutput
}

type TemplateVisualPaletteArgs struct {
	// The chart color options for the visual palette.
	ChartColor pulumi.StringPtrInput `pulumi:"chartColor"`
	// The color map options for the visual palette.
	ColorMap TemplateDataPathColorArrayInput `pulumi:"colorMap"`
}

func (TemplateVisualPaletteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateVisualPalette)(nil)).Elem()
}

func (i TemplateVisualPaletteArgs) ToTemplateVisualPaletteOutput() TemplateVisualPaletteOutput {
	return i.ToTemplateVisualPaletteOutputWithContext(context.Background())
}

func (i TemplateVisualPaletteArgs) ToTemplateVisualPaletteOutputWithContext(ctx context.Context) TemplateVisualPaletteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateVisualPaletteOutput)
}

func (i TemplateVisualPaletteArgs) ToTemplateVisualPalettePtrOutput() TemplateVisualPalettePtrOutput {
	return i.ToTemplateVisualPalettePtrOutputWithContext(context.Background())
}

func (i TemplateVisualPaletteArgs) ToTemplateVisualPalettePtrOutputWithContext(ctx context.Context) TemplateVisualPalettePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateVisualPaletteOutput).ToTemplateVisualPalettePtrOutputWithContext(ctx)
}

// TemplateVisualPalettePtrInput is an input type that accepts TemplateVisualPaletteArgs, TemplateVisualPalettePtr and TemplateVisualPalettePtrOutput values.
// You can construct a concrete instance of `TemplateVisualPalettePtrInput` via:
//
//	        TemplateVisualPaletteArgs{...}
//
//	or:
//
//	        nil
type TemplateVisualPalettePtrInput interface {
	pulumi.Input

	ToTemplateVisualPalettePtrOutput() TemplateVisualPalettePtrOutput
	ToTemplateVisualPalettePtrOutputWithContext(context.Context) TemplateVisualPalettePtrOutput
}

type templateVisualPalettePtrType TemplateVisualPaletteArgs

func TemplateVisualPalettePtr(v *TemplateVisualPaletteArgs) TemplateVisualPalettePtrInput {
	return (*templateVisualPalettePtrType)(v)
}

func (*templateVisualPalettePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateVisualPalette)(nil)).Elem()
}

func (i *templateVisualPalettePtrType) ToTemplateVisualPalettePtrOutput() TemplateVisualPalettePtrOutput {
	return i.ToTemplateVisualPalettePtrOutputWithContext(context.Background())
}

func (i *templateVisualPalettePtrType) ToTemplateVisualPalettePtrOutputWithContext(ctx context.Context) TemplateVisualPalettePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateVisualPalettePtrOutput)
}

type TemplateVisualPaletteOutput struct{ *pulumi.OutputState }

func (TemplateVisualPaletteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateVisualPalette)(nil)).Elem()
}

func (o TemplateVisualPaletteOutput) ToTemplateVisualPaletteOutput() TemplateVisualPaletteOutput {
	return o
}

func (o TemplateVisualPaletteOutput) ToTemplateVisualPaletteOutputWithContext(ctx context.Context) TemplateVisualPaletteOutput {
	return o
}

func (o TemplateVisualPaletteOutput) ToTemplateVisualPalettePtrOutput() TemplateVisualPalettePtrOutput {
	return o.ToTemplateVisualPalettePtrOutputWithContext(context.Background())
}

func (o TemplateVisualPaletteOutput) ToTemplateVisualPalettePtrOutputWithContext(ctx context.Context) TemplateVisualPalettePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateVisualPalette) *TemplateVisualPalette {
		return &v
	}).(TemplateVisualPalettePtrOutput)
}

// The chart color options for the visual palette.
func (o TemplateVisualPaletteOutput) ChartColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateVisualPalette) *string { return v.ChartColor }).(pulumi.StringPtrOutput)
}

// The color map options for the visual palette.
func (o TemplateVisualPaletteOutput) ColorMap() TemplateDataPathColorArrayOutput {
	return o.ApplyT(func(v TemplateVisualPalette) []TemplateDataPathColor { return v.ColorMap }).(TemplateDataPathColorArrayOutput)
}

type TemplateVisualPalettePtrOutput struct{ *pulumi.OutputState }

func (TemplateVisualPalettePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateVisualPalette)(nil)).Elem()
}

func (o TemplateVisualPalettePtrOutput) ToTemplateVisualPalettePtrOutput() TemplateVisualPalettePtrOutput {
	return o
}

func (o TemplateVisualPalettePtrOutput) ToTemplateVisualPalettePtrOutputWithContext(ctx context.Context) TemplateVisualPalettePtrOutput {
	return o
}

func (o TemplateVisualPalettePtrOutput) Elem() TemplateVisualPaletteOutput {
	return o.ApplyT(func(v *TemplateVisualPalette) TemplateVisualPalette {
		if v != nil {
			return *v
		}
		var ret TemplateVisualPalette
		return ret
	}).(TemplateVisualPaletteOutput)
}

// The chart color options for the visual palette.
func (o TemplateVisualPalettePtrOutput) ChartColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateVisualPalette) *string {
		if v == nil {
			return nil
		}
		return v.ChartColor
	}).(pulumi.StringPtrOutput)
}

// The color map options for the visual palette.
func (o TemplateVisualPalettePtrOutput) ColorMap() TemplateDataPathColorArrayOutput {
	return o.ApplyT(func(v *TemplateVisualPalette) []TemplateDataPathColor {
		if v == nil {
			return nil
		}
		return v.ColorMap
	}).(TemplateDataPathColorArrayOutput)
}

type TemplateVisualSubtitleLabelOptions struct {
	// The long text format of the subtitle label, such as plain text or rich text.
	FormatText *TemplateLongFormatText `pulumi:"formatText"`
	// The visibility of the subtitle label.
	Visibility *TemplateVisibility `pulumi:"visibility"`
}

// TemplateVisualSubtitleLabelOptionsInput is an input type that accepts TemplateVisualSubtitleLabelOptionsArgs and TemplateVisualSubtitleLabelOptionsOutput values.
// You can construct a concrete instance of `TemplateVisualSubtitleLabelOptionsInput` via:
//
//	TemplateVisualSubtitleLabelOptionsArgs{...}
type TemplateVisualSubtitleLabelOptionsInput interface {
	pulumi.Input

	ToTemplateVisualSubtitleLabelOptionsOutput() TemplateVisualSubtitleLabelOptionsOutput
	ToTemplateVisualSubtitleLabelOptionsOutputWithContext(context.Context) TemplateVisualSubtitleLabelOptionsOutput
}

type TemplateVisualSubtitleLabelOptionsArgs struct {
	// The long text format of the subtitle label, such as plain text or rich text.
	FormatText TemplateLongFormatTextPtrInput `pulumi:"formatText"`
	// The visibility of the subtitle label.
	Visibility TemplateVisibilityPtrInput `pulumi:"visibility"`
}

func (TemplateVisualSubtitleLabelOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateVisualSubtitleLabelOptions)(nil)).Elem()
}

func (i TemplateVisualSubtitleLabelOptionsArgs) ToTemplateVisualSubtitleLabelOptionsOutput() TemplateVisualSubtitleLabelOptionsOutput {
	return i.ToTemplateVisualSubtitleLabelOptionsOutputWithContext(context.Background())
}

func (i TemplateVisualSubtitleLabelOptionsArgs) ToTemplateVisualSubtitleLabelOptionsOutputWithContext(ctx context.Context) TemplateVisualSubtitleLabelOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateVisualSubtitleLabelOptionsOutput)
}

func (i TemplateVisualSubtitleLabelOptionsArgs) ToTemplateVisualSubtitleLabelOptionsPtrOutput() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return i.ToTemplateVisualSubtitleLabelOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateVisualSubtitleLabelOptionsArgs) ToTemplateVisualSubtitleLabelOptionsPtrOutputWithContext(ctx context.Context) TemplateVisualSubtitleLabelOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateVisualSubtitleLabelOptionsOutput).ToTemplateVisualSubtitleLabelOptionsPtrOutputWithContext(ctx)
}

// TemplateVisualSubtitleLabelOptionsPtrInput is an input type that accepts TemplateVisualSubtitleLabelOptionsArgs, TemplateVisualSubtitleLabelOptionsPtr and TemplateVisualSubtitleLabelOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateVisualSubtitleLabelOptionsPtrInput` via:
//
//	        TemplateVisualSubtitleLabelOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateVisualSubtitleLabelOptionsPtrInput interface {
	pulumi.Input

	ToTemplateVisualSubtitleLabelOptionsPtrOutput() TemplateVisualSubtitleLabelOptionsPtrOutput
	ToTemplateVisualSubtitleLabelOptionsPtrOutputWithContext(context.Context) TemplateVisualSubtitleLabelOptionsPtrOutput
}

type templateVisualSubtitleLabelOptionsPtrType TemplateVisualSubtitleLabelOptionsArgs

func TemplateVisualSubtitleLabelOptionsPtr(v *TemplateVisualSubtitleLabelOptionsArgs) TemplateVisualSubtitleLabelOptionsPtrInput {
	return (*templateVisualSubtitleLabelOptionsPtrType)(v)
}

func (*templateVisualSubtitleLabelOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateVisualSubtitleLabelOptions)(nil)).Elem()
}

func (i *templateVisualSubtitleLabelOptionsPtrType) ToTemplateVisualSubtitleLabelOptionsPtrOutput() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return i.ToTemplateVisualSubtitleLabelOptionsPtrOutputWithContext(context.Background())
}

func (i *templateVisualSubtitleLabelOptionsPtrType) ToTemplateVisualSubtitleLabelOptionsPtrOutputWithContext(ctx context.Context) TemplateVisualSubtitleLabelOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

type TemplateVisualSubtitleLabelOptionsOutput struct{ *pulumi.OutputState }

func (TemplateVisualSubtitleLabelOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateVisualSubtitleLabelOptions)(nil)).Elem()
}

func (o TemplateVisualSubtitleLabelOptionsOutput) ToTemplateVisualSubtitleLabelOptionsOutput() TemplateVisualSubtitleLabelOptionsOutput {
	return o
}

func (o TemplateVisualSubtitleLabelOptionsOutput) ToTemplateVisualSubtitleLabelOptionsOutputWithContext(ctx context.Context) TemplateVisualSubtitleLabelOptionsOutput {
	return o
}

func (o TemplateVisualSubtitleLabelOptionsOutput) ToTemplateVisualSubtitleLabelOptionsPtrOutput() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ToTemplateVisualSubtitleLabelOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateVisualSubtitleLabelOptionsOutput) ToTemplateVisualSubtitleLabelOptionsPtrOutputWithContext(ctx context.Context) TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateVisualSubtitleLabelOptions) *TemplateVisualSubtitleLabelOptions {
		return &v
	}).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The long text format of the subtitle label, such as plain text or rich text.
func (o TemplateVisualSubtitleLabelOptionsOutput) FormatText() TemplateLongFormatTextPtrOutput {
	return o.ApplyT(func(v TemplateVisualSubtitleLabelOptions) *TemplateLongFormatText { return v.FormatText }).(TemplateLongFormatTextPtrOutput)
}

// The visibility of the subtitle label.
func (o TemplateVisualSubtitleLabelOptionsOutput) Visibility() TemplateVisibilityPtrOutput {
	return o.ApplyT(func(v TemplateVisualSubtitleLabelOptions) *TemplateVisibility { return v.Visibility }).(TemplateVisibilityPtrOutput)
}

type TemplateVisualSubtitleLabelOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateVisualSubtitleLabelOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateVisualSubtitleLabelOptions)(nil)).Elem()
}

func (o TemplateVisualSubtitleLabelOptionsPtrOutput) ToTemplateVisualSubtitleLabelOptionsPtrOutput() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o
}

func (o TemplateVisualSubtitleLabelOptionsPtrOutput) ToTemplateVisualSubtitleLabelOptionsPtrOutputWithContext(ctx context.Context) TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o
}

func (o TemplateVisualSubtitleLabelOptionsPtrOutput) Elem() TemplateVisualSubtitleLabelOptionsOutput {
	return o.ApplyT(func(v *TemplateVisualSubtitleLabelOptions) TemplateVisualSubtitleLabelOptions {
		if v != nil {
			return *v
		}
		var ret TemplateVisualSubtitleLabelOptions
		return ret
	}).(TemplateVisualSubtitleLabelOptionsOutput)
}

// The long text format of the subtitle label, such as plain text or rich text.
func (o TemplateVisualSubtitleLabelOptionsPtrOutput) FormatText() TemplateLongFormatTextPtrOutput {
	return o.ApplyT(func(v *TemplateVisualSubtitleLabelOptions) *TemplateLongFormatText {
		if v == nil {
			return nil
		}
		return v.FormatText
	}).(TemplateLongFormatTextPtrOutput)
}

// The visibility of the subtitle label.
func (o TemplateVisualSubtitleLabelOptionsPtrOutput) Visibility() TemplateVisibilityPtrOutput {
	return o.ApplyT(func(v *TemplateVisualSubtitleLabelOptions) *TemplateVisibility {
		if v == nil {
			return nil
		}
		return v.Visibility
	}).(TemplateVisibilityPtrOutput)
}

type TemplateVisualTitleLabelOptions struct {
	// The short text format of the title label, such as plain text or rich text.
	FormatText *TemplateShortFormatText `pulumi:"formatText"`
	// The visibility of the title label.
	Visibility *TemplateVisibility `pulumi:"visibility"`
}

// TemplateVisualTitleLabelOptionsInput is an input type that accepts TemplateVisualTitleLabelOptionsArgs and TemplateVisualTitleLabelOptionsOutput values.
// You can construct a concrete instance of `TemplateVisualTitleLabelOptionsInput` via:
//
//	TemplateVisualTitleLabelOptionsArgs{...}
type TemplateVisualTitleLabelOptionsInput interface {
	pulumi.Input

	ToTemplateVisualTitleLabelOptionsOutput() TemplateVisualTitleLabelOptionsOutput
	ToTemplateVisualTitleLabelOptionsOutputWithContext(context.Context) TemplateVisualTitleLabelOptionsOutput
}

type TemplateVisualTitleLabelOptionsArgs struct {
	// The short text format of the title label, such as plain text or rich text.
	FormatText TemplateShortFormatTextPtrInput `pulumi:"formatText"`
	// The visibility of the title label.
	Visibility TemplateVisibilityPtrInput `pulumi:"visibility"`
}

func (TemplateVisualTitleLabelOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateVisualTitleLabelOptions)(nil)).Elem()
}

func (i TemplateVisualTitleLabelOptionsArgs) ToTemplateVisualTitleLabelOptionsOutput() TemplateVisualTitleLabelOptionsOutput {
	return i.ToTemplateVisualTitleLabelOptionsOutputWithContext(context.Background())
}

func (i TemplateVisualTitleLabelOptionsArgs) ToTemplateVisualTitleLabelOptionsOutputWithContext(ctx context.Context) TemplateVisualTitleLabelOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateVisualTitleLabelOptionsOutput)
}

func (i TemplateVisualTitleLabelOptionsArgs) ToTemplateVisualTitleLabelOptionsPtrOutput() TemplateVisualTitleLabelOptionsPtrOutput {
	return i.ToTemplateVisualTitleLabelOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateVisualTitleLabelOptionsArgs) ToTemplateVisualTitleLabelOptionsPtrOutputWithContext(ctx context.Context) TemplateVisualTitleLabelOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateVisualTitleLabelOptionsOutput).ToTemplateVisualTitleLabelOptionsPtrOutputWithContext(ctx)
}

// TemplateVisualTitleLabelOptionsPtrInput is an input type that accepts TemplateVisualTitleLabelOptionsArgs, TemplateVisualTitleLabelOptionsPtr and TemplateVisualTitleLabelOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateVisualTitleLabelOptionsPtrInput` via:
//
//	        TemplateVisualTitleLabelOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateVisualTitleLabelOptionsPtrInput interface {
	pulumi.Input

	ToTemplateVisualTitleLabelOptionsPtrOutput() TemplateVisualTitleLabelOptionsPtrOutput
	ToTemplateVisualTitleLabelOptionsPtrOutputWithContext(context.Context) TemplateVisualTitleLabelOptionsPtrOutput
}

type templateVisualTitleLabelOptionsPtrType TemplateVisualTitleLabelOptionsArgs

func TemplateVisualTitleLabelOptionsPtr(v *TemplateVisualTitleLabelOptionsArgs) TemplateVisualTitleLabelOptionsPtrInput {
	return (*templateVisualTitleLabelOptionsPtrType)(v)
}

func (*templateVisualTitleLabelOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateVisualTitleLabelOptions)(nil)).Elem()
}

func (i *templateVisualTitleLabelOptionsPtrType) ToTemplateVisualTitleLabelOptionsPtrOutput() TemplateVisualTitleLabelOptionsPtrOutput {
	return i.ToTemplateVisualTitleLabelOptionsPtrOutputWithContext(context.Background())
}

func (i *templateVisualTitleLabelOptionsPtrType) ToTemplateVisualTitleLabelOptionsPtrOutputWithContext(ctx context.Context) TemplateVisualTitleLabelOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateVisualTitleLabelOptionsPtrOutput)
}

type TemplateVisualTitleLabelOptionsOutput struct{ *pulumi.OutputState }

func (TemplateVisualTitleLabelOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateVisualTitleLabelOptions)(nil)).Elem()
}

func (o TemplateVisualTitleLabelOptionsOutput) ToTemplateVisualTitleLabelOptionsOutput() TemplateVisualTitleLabelOptionsOutput {
	return o
}

func (o TemplateVisualTitleLabelOptionsOutput) ToTemplateVisualTitleLabelOptionsOutputWithContext(ctx context.Context) TemplateVisualTitleLabelOptionsOutput {
	return o
}

func (o TemplateVisualTitleLabelOptionsOutput) ToTemplateVisualTitleLabelOptionsPtrOutput() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ToTemplateVisualTitleLabelOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateVisualTitleLabelOptionsOutput) ToTemplateVisualTitleLabelOptionsPtrOutputWithContext(ctx context.Context) TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateVisualTitleLabelOptions) *TemplateVisualTitleLabelOptions {
		return &v
	}).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The short text format of the title label, such as plain text or rich text.
func (o TemplateVisualTitleLabelOptionsOutput) FormatText() TemplateShortFormatTextPtrOutput {
	return o.ApplyT(func(v TemplateVisualTitleLabelOptions) *TemplateShortFormatText { return v.FormatText }).(TemplateShortFormatTextPtrOutput)
}

// The visibility of the title label.
func (o TemplateVisualTitleLabelOptionsOutput) Visibility() TemplateVisibilityPtrOutput {
	return o.ApplyT(func(v TemplateVisualTitleLabelOptions) *TemplateVisibility { return v.Visibility }).(TemplateVisibilityPtrOutput)
}

type TemplateVisualTitleLabelOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateVisualTitleLabelOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateVisualTitleLabelOptions)(nil)).Elem()
}

func (o TemplateVisualTitleLabelOptionsPtrOutput) ToTemplateVisualTitleLabelOptionsPtrOutput() TemplateVisualTitleLabelOptionsPtrOutput {
	return o
}

func (o TemplateVisualTitleLabelOptionsPtrOutput) ToTemplateVisualTitleLabelOptionsPtrOutputWithContext(ctx context.Context) TemplateVisualTitleLabelOptionsPtrOutput {
	return o
}

func (o TemplateVisualTitleLabelOptionsPtrOutput) Elem() TemplateVisualTitleLabelOptionsOutput {
	return o.ApplyT(func(v *TemplateVisualTitleLabelOptions) TemplateVisualTitleLabelOptions {
		if v != nil {
			return *v
		}
		var ret TemplateVisualTitleLabelOptions
		return ret
	}).(TemplateVisualTitleLabelOptionsOutput)
}

// The short text format of the title label, such as plain text or rich text.
func (o TemplateVisualTitleLabelOptionsPtrOutput) FormatText() TemplateShortFormatTextPtrOutput {
	return o.ApplyT(func(v *TemplateVisualTitleLabelOptions) *TemplateShortFormatText {
		if v == nil {
			return nil
		}
		return v.FormatText
	}).(TemplateShortFormatTextPtrOutput)
}

// The visibility of the title label.
func (o TemplateVisualTitleLabelOptionsPtrOutput) Visibility() TemplateVisibilityPtrOutput {
	return o.ApplyT(func(v *TemplateVisualTitleLabelOptions) *TemplateVisibility {
		if v == nil {
			return nil
		}
		return v.Visibility
	}).(TemplateVisibilityPtrOutput)
}

type TemplateWaterfallChartAggregatedFieldWells struct {
	// The breakdown field wells of a waterfall visual.
	Breakdowns []TemplateDimensionField `pulumi:"breakdowns"`
	// The category field wells of a waterfall visual.
	Categories []TemplateDimensionField `pulumi:"categories"`
	// The value field wells of a waterfall visual.
	Values []TemplateMeasureField `pulumi:"values"`
}

// TemplateWaterfallChartAggregatedFieldWellsInput is an input type that accepts TemplateWaterfallChartAggregatedFieldWellsArgs and TemplateWaterfallChartAggregatedFieldWellsOutput values.
// You can construct a concrete instance of `TemplateWaterfallChartAggregatedFieldWellsInput` via:
//
//	TemplateWaterfallChartAggregatedFieldWellsArgs{...}
type TemplateWaterfallChartAggregatedFieldWellsInput interface {
	pulumi.Input

	ToTemplateWaterfallChartAggregatedFieldWellsOutput() TemplateWaterfallChartAggregatedFieldWellsOutput
	ToTemplateWaterfallChartAggregatedFieldWellsOutputWithContext(context.Context) TemplateWaterfallChartAggregatedFieldWellsOutput
}

type TemplateWaterfallChartAggregatedFieldWellsArgs struct {
	// The breakdown field wells of a waterfall visual.
	Breakdowns TemplateDimensionFieldArrayInput `pulumi:"breakdowns"`
	// The category field wells of a waterfall visual.
	Categories TemplateDimensionFieldArrayInput `pulumi:"categories"`
	// The value field wells of a waterfall visual.
	Values TemplateMeasureFieldArrayInput `pulumi:"values"`
}

func (TemplateWaterfallChartAggregatedFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWaterfallChartAggregatedFieldWells)(nil)).Elem()
}

func (i TemplateWaterfallChartAggregatedFieldWellsArgs) ToTemplateWaterfallChartAggregatedFieldWellsOutput() TemplateWaterfallChartAggregatedFieldWellsOutput {
	return i.ToTemplateWaterfallChartAggregatedFieldWellsOutputWithContext(context.Background())
}

func (i TemplateWaterfallChartAggregatedFieldWellsArgs) ToTemplateWaterfallChartAggregatedFieldWellsOutputWithContext(ctx context.Context) TemplateWaterfallChartAggregatedFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWaterfallChartAggregatedFieldWellsOutput)
}

func (i TemplateWaterfallChartAggregatedFieldWellsArgs) ToTemplateWaterfallChartAggregatedFieldWellsPtrOutput() TemplateWaterfallChartAggregatedFieldWellsPtrOutput {
	return i.ToTemplateWaterfallChartAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i TemplateWaterfallChartAggregatedFieldWellsArgs) ToTemplateWaterfallChartAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartAggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWaterfallChartAggregatedFieldWellsOutput).ToTemplateWaterfallChartAggregatedFieldWellsPtrOutputWithContext(ctx)
}

// TemplateWaterfallChartAggregatedFieldWellsPtrInput is an input type that accepts TemplateWaterfallChartAggregatedFieldWellsArgs, TemplateWaterfallChartAggregatedFieldWellsPtr and TemplateWaterfallChartAggregatedFieldWellsPtrOutput values.
// You can construct a concrete instance of `TemplateWaterfallChartAggregatedFieldWellsPtrInput` via:
//
//	        TemplateWaterfallChartAggregatedFieldWellsArgs{...}
//
//	or:
//
//	        nil
type TemplateWaterfallChartAggregatedFieldWellsPtrInput interface {
	pulumi.Input

	ToTemplateWaterfallChartAggregatedFieldWellsPtrOutput() TemplateWaterfallChartAggregatedFieldWellsPtrOutput
	ToTemplateWaterfallChartAggregatedFieldWellsPtrOutputWithContext(context.Context) TemplateWaterfallChartAggregatedFieldWellsPtrOutput
}

type templateWaterfallChartAggregatedFieldWellsPtrType TemplateWaterfallChartAggregatedFieldWellsArgs

func TemplateWaterfallChartAggregatedFieldWellsPtr(v *TemplateWaterfallChartAggregatedFieldWellsArgs) TemplateWaterfallChartAggregatedFieldWellsPtrInput {
	return (*templateWaterfallChartAggregatedFieldWellsPtrType)(v)
}

func (*templateWaterfallChartAggregatedFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWaterfallChartAggregatedFieldWells)(nil)).Elem()
}

func (i *templateWaterfallChartAggregatedFieldWellsPtrType) ToTemplateWaterfallChartAggregatedFieldWellsPtrOutput() TemplateWaterfallChartAggregatedFieldWellsPtrOutput {
	return i.ToTemplateWaterfallChartAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i *templateWaterfallChartAggregatedFieldWellsPtrType) ToTemplateWaterfallChartAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartAggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWaterfallChartAggregatedFieldWellsPtrOutput)
}

type TemplateWaterfallChartAggregatedFieldWellsOutput struct{ *pulumi.OutputState }

func (TemplateWaterfallChartAggregatedFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWaterfallChartAggregatedFieldWells)(nil)).Elem()
}

func (o TemplateWaterfallChartAggregatedFieldWellsOutput) ToTemplateWaterfallChartAggregatedFieldWellsOutput() TemplateWaterfallChartAggregatedFieldWellsOutput {
	return o
}

func (o TemplateWaterfallChartAggregatedFieldWellsOutput) ToTemplateWaterfallChartAggregatedFieldWellsOutputWithContext(ctx context.Context) TemplateWaterfallChartAggregatedFieldWellsOutput {
	return o
}

func (o TemplateWaterfallChartAggregatedFieldWellsOutput) ToTemplateWaterfallChartAggregatedFieldWellsPtrOutput() TemplateWaterfallChartAggregatedFieldWellsPtrOutput {
	return o.ToTemplateWaterfallChartAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (o TemplateWaterfallChartAggregatedFieldWellsOutput) ToTemplateWaterfallChartAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartAggregatedFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateWaterfallChartAggregatedFieldWells) *TemplateWaterfallChartAggregatedFieldWells {
		return &v
	}).(TemplateWaterfallChartAggregatedFieldWellsPtrOutput)
}

// The breakdown field wells of a waterfall visual.
func (o TemplateWaterfallChartAggregatedFieldWellsOutput) Breakdowns() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v TemplateWaterfallChartAggregatedFieldWells) []TemplateDimensionField { return v.Breakdowns }).(TemplateDimensionFieldArrayOutput)
}

// The category field wells of a waterfall visual.
func (o TemplateWaterfallChartAggregatedFieldWellsOutput) Categories() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v TemplateWaterfallChartAggregatedFieldWells) []TemplateDimensionField { return v.Categories }).(TemplateDimensionFieldArrayOutput)
}

// The value field wells of a waterfall visual.
func (o TemplateWaterfallChartAggregatedFieldWellsOutput) Values() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v TemplateWaterfallChartAggregatedFieldWells) []TemplateMeasureField { return v.Values }).(TemplateMeasureFieldArrayOutput)
}

type TemplateWaterfallChartAggregatedFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (TemplateWaterfallChartAggregatedFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWaterfallChartAggregatedFieldWells)(nil)).Elem()
}

func (o TemplateWaterfallChartAggregatedFieldWellsPtrOutput) ToTemplateWaterfallChartAggregatedFieldWellsPtrOutput() TemplateWaterfallChartAggregatedFieldWellsPtrOutput {
	return o
}

func (o TemplateWaterfallChartAggregatedFieldWellsPtrOutput) ToTemplateWaterfallChartAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartAggregatedFieldWellsPtrOutput {
	return o
}

func (o TemplateWaterfallChartAggregatedFieldWellsPtrOutput) Elem() TemplateWaterfallChartAggregatedFieldWellsOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartAggregatedFieldWells) TemplateWaterfallChartAggregatedFieldWells {
		if v != nil {
			return *v
		}
		var ret TemplateWaterfallChartAggregatedFieldWells
		return ret
	}).(TemplateWaterfallChartAggregatedFieldWellsOutput)
}

// The breakdown field wells of a waterfall visual.
func (o TemplateWaterfallChartAggregatedFieldWellsPtrOutput) Breakdowns() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartAggregatedFieldWells) []TemplateDimensionField {
		if v == nil {
			return nil
		}
		return v.Breakdowns
	}).(TemplateDimensionFieldArrayOutput)
}

// The category field wells of a waterfall visual.
func (o TemplateWaterfallChartAggregatedFieldWellsPtrOutput) Categories() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartAggregatedFieldWells) []TemplateDimensionField {
		if v == nil {
			return nil
		}
		return v.Categories
	}).(TemplateDimensionFieldArrayOutput)
}

// The value field wells of a waterfall visual.
func (o TemplateWaterfallChartAggregatedFieldWellsPtrOutput) Values() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartAggregatedFieldWells) []TemplateMeasureField {
		if v == nil {
			return nil
		}
		return v.Values
	}).(TemplateMeasureFieldArrayOutput)
}

type TemplateWaterfallChartColorConfiguration struct {
	// The color configuration for individual groups within a waterfall visual.
	GroupColorConfiguration *TemplateWaterfallChartGroupColorConfiguration `pulumi:"groupColorConfiguration"`
}

// TemplateWaterfallChartColorConfigurationInput is an input type that accepts TemplateWaterfallChartColorConfigurationArgs and TemplateWaterfallChartColorConfigurationOutput values.
// You can construct a concrete instance of `TemplateWaterfallChartColorConfigurationInput` via:
//
//	TemplateWaterfallChartColorConfigurationArgs{...}
type TemplateWaterfallChartColorConfigurationInput interface {
	pulumi.Input

	ToTemplateWaterfallChartColorConfigurationOutput() TemplateWaterfallChartColorConfigurationOutput
	ToTemplateWaterfallChartColorConfigurationOutputWithContext(context.Context) TemplateWaterfallChartColorConfigurationOutput
}

type TemplateWaterfallChartColorConfigurationArgs struct {
	// The color configuration for individual groups within a waterfall visual.
	GroupColorConfiguration TemplateWaterfallChartGroupColorConfigurationPtrInput `pulumi:"groupColorConfiguration"`
}

func (TemplateWaterfallChartColorConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWaterfallChartColorConfiguration)(nil)).Elem()
}

func (i TemplateWaterfallChartColorConfigurationArgs) ToTemplateWaterfallChartColorConfigurationOutput() TemplateWaterfallChartColorConfigurationOutput {
	return i.ToTemplateWaterfallChartColorConfigurationOutputWithContext(context.Background())
}

func (i TemplateWaterfallChartColorConfigurationArgs) ToTemplateWaterfallChartColorConfigurationOutputWithContext(ctx context.Context) TemplateWaterfallChartColorConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWaterfallChartColorConfigurationOutput)
}

func (i TemplateWaterfallChartColorConfigurationArgs) ToTemplateWaterfallChartColorConfigurationPtrOutput() TemplateWaterfallChartColorConfigurationPtrOutput {
	return i.ToTemplateWaterfallChartColorConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateWaterfallChartColorConfigurationArgs) ToTemplateWaterfallChartColorConfigurationPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartColorConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWaterfallChartColorConfigurationOutput).ToTemplateWaterfallChartColorConfigurationPtrOutputWithContext(ctx)
}

// TemplateWaterfallChartColorConfigurationPtrInput is an input type that accepts TemplateWaterfallChartColorConfigurationArgs, TemplateWaterfallChartColorConfigurationPtr and TemplateWaterfallChartColorConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateWaterfallChartColorConfigurationPtrInput` via:
//
//	        TemplateWaterfallChartColorConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateWaterfallChartColorConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateWaterfallChartColorConfigurationPtrOutput() TemplateWaterfallChartColorConfigurationPtrOutput
	ToTemplateWaterfallChartColorConfigurationPtrOutputWithContext(context.Context) TemplateWaterfallChartColorConfigurationPtrOutput
}

type templateWaterfallChartColorConfigurationPtrType TemplateWaterfallChartColorConfigurationArgs

func TemplateWaterfallChartColorConfigurationPtr(v *TemplateWaterfallChartColorConfigurationArgs) TemplateWaterfallChartColorConfigurationPtrInput {
	return (*templateWaterfallChartColorConfigurationPtrType)(v)
}

func (*templateWaterfallChartColorConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWaterfallChartColorConfiguration)(nil)).Elem()
}

func (i *templateWaterfallChartColorConfigurationPtrType) ToTemplateWaterfallChartColorConfigurationPtrOutput() TemplateWaterfallChartColorConfigurationPtrOutput {
	return i.ToTemplateWaterfallChartColorConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateWaterfallChartColorConfigurationPtrType) ToTemplateWaterfallChartColorConfigurationPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartColorConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWaterfallChartColorConfigurationPtrOutput)
}

type TemplateWaterfallChartColorConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateWaterfallChartColorConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWaterfallChartColorConfiguration)(nil)).Elem()
}

func (o TemplateWaterfallChartColorConfigurationOutput) ToTemplateWaterfallChartColorConfigurationOutput() TemplateWaterfallChartColorConfigurationOutput {
	return o
}

func (o TemplateWaterfallChartColorConfigurationOutput) ToTemplateWaterfallChartColorConfigurationOutputWithContext(ctx context.Context) TemplateWaterfallChartColorConfigurationOutput {
	return o
}

func (o TemplateWaterfallChartColorConfigurationOutput) ToTemplateWaterfallChartColorConfigurationPtrOutput() TemplateWaterfallChartColorConfigurationPtrOutput {
	return o.ToTemplateWaterfallChartColorConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateWaterfallChartColorConfigurationOutput) ToTemplateWaterfallChartColorConfigurationPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartColorConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateWaterfallChartColorConfiguration) *TemplateWaterfallChartColorConfiguration {
		return &v
	}).(TemplateWaterfallChartColorConfigurationPtrOutput)
}

// The color configuration for individual groups within a waterfall visual.
func (o TemplateWaterfallChartColorConfigurationOutput) GroupColorConfiguration() TemplateWaterfallChartGroupColorConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateWaterfallChartColorConfiguration) *TemplateWaterfallChartGroupColorConfiguration {
		return v.GroupColorConfiguration
	}).(TemplateWaterfallChartGroupColorConfigurationPtrOutput)
}

type TemplateWaterfallChartColorConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateWaterfallChartColorConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWaterfallChartColorConfiguration)(nil)).Elem()
}

func (o TemplateWaterfallChartColorConfigurationPtrOutput) ToTemplateWaterfallChartColorConfigurationPtrOutput() TemplateWaterfallChartColorConfigurationPtrOutput {
	return o
}

func (o TemplateWaterfallChartColorConfigurationPtrOutput) ToTemplateWaterfallChartColorConfigurationPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartColorConfigurationPtrOutput {
	return o
}

func (o TemplateWaterfallChartColorConfigurationPtrOutput) Elem() TemplateWaterfallChartColorConfigurationOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartColorConfiguration) TemplateWaterfallChartColorConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateWaterfallChartColorConfiguration
		return ret
	}).(TemplateWaterfallChartColorConfigurationOutput)
}

// The color configuration for individual groups within a waterfall visual.
func (o TemplateWaterfallChartColorConfigurationPtrOutput) GroupColorConfiguration() TemplateWaterfallChartGroupColorConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartColorConfiguration) *TemplateWaterfallChartGroupColorConfiguration {
		if v == nil {
			return nil
		}
		return v.GroupColorConfiguration
	}).(TemplateWaterfallChartGroupColorConfigurationPtrOutput)
}

type TemplateWaterfallChartConfiguration struct {
	// The options that determine the presentation of the category axis.
	CategoryAxisDisplayOptions *TemplateAxisDisplayOptions `pulumi:"categoryAxisDisplayOptions"`
	// The options that determine the presentation of the category axis label.
	CategoryAxisLabelOptions *TemplateChartAxisLabelOptions `pulumi:"categoryAxisLabelOptions"`
	// The color configuration of a waterfall visual.
	ColorConfiguration *TemplateWaterfallChartColorConfiguration `pulumi:"colorConfiguration"`
	// The data label configuration of a waterfall visual.
	DataLabels *TemplateDataLabelOptions `pulumi:"dataLabels"`
	// The field well configuration of a waterfall visual.
	FieldWells *TemplateWaterfallChartFieldWells `pulumi:"fieldWells"`
	// The legend configuration of a waterfall visual.
	Legend *TemplateLegendOptions `pulumi:"legend"`
	// The options that determine the presentation of the y-axis.
	PrimaryYAxisDisplayOptions *TemplateAxisDisplayOptions `pulumi:"primaryYAxisDisplayOptions"`
	// The options that determine the presentation of the y-axis label.
	PrimaryYAxisLabelOptions *TemplateChartAxisLabelOptions `pulumi:"primaryYAxisLabelOptions"`
	// The sort configuration of a waterfall visual.
	SortConfiguration *TemplateWaterfallChartSortConfiguration `pulumi:"sortConfiguration"`
	// The visual palette configuration of a waterfall visual.
	VisualPalette *TemplateVisualPalette `pulumi:"visualPalette"`
	// The options that determine the presentation of a waterfall visual.
	WaterfallChartOptions *TemplateWaterfallChartOptions `pulumi:"waterfallChartOptions"`
}

// TemplateWaterfallChartConfigurationInput is an input type that accepts TemplateWaterfallChartConfigurationArgs and TemplateWaterfallChartConfigurationOutput values.
// You can construct a concrete instance of `TemplateWaterfallChartConfigurationInput` via:
//
//	TemplateWaterfallChartConfigurationArgs{...}
type TemplateWaterfallChartConfigurationInput interface {
	pulumi.Input

	ToTemplateWaterfallChartConfigurationOutput() TemplateWaterfallChartConfigurationOutput
	ToTemplateWaterfallChartConfigurationOutputWithContext(context.Context) TemplateWaterfallChartConfigurationOutput
}

type TemplateWaterfallChartConfigurationArgs struct {
	// The options that determine the presentation of the category axis.
	CategoryAxisDisplayOptions TemplateAxisDisplayOptionsPtrInput `pulumi:"categoryAxisDisplayOptions"`
	// The options that determine the presentation of the category axis label.
	CategoryAxisLabelOptions TemplateChartAxisLabelOptionsPtrInput `pulumi:"categoryAxisLabelOptions"`
	// The color configuration of a waterfall visual.
	ColorConfiguration TemplateWaterfallChartColorConfigurationPtrInput `pulumi:"colorConfiguration"`
	// The data label configuration of a waterfall visual.
	DataLabels TemplateDataLabelOptionsPtrInput `pulumi:"dataLabels"`
	// The field well configuration of a waterfall visual.
	FieldWells TemplateWaterfallChartFieldWellsPtrInput `pulumi:"fieldWells"`
	// The legend configuration of a waterfall visual.
	Legend TemplateLegendOptionsPtrInput `pulumi:"legend"`
	// The options that determine the presentation of the y-axis.
	PrimaryYAxisDisplayOptions TemplateAxisDisplayOptionsPtrInput `pulumi:"primaryYAxisDisplayOptions"`
	// The options that determine the presentation of the y-axis label.
	PrimaryYAxisLabelOptions TemplateChartAxisLabelOptionsPtrInput `pulumi:"primaryYAxisLabelOptions"`
	// The sort configuration of a waterfall visual.
	SortConfiguration TemplateWaterfallChartSortConfigurationPtrInput `pulumi:"sortConfiguration"`
	// The visual palette configuration of a waterfall visual.
	VisualPalette TemplateVisualPalettePtrInput `pulumi:"visualPalette"`
	// The options that determine the presentation of a waterfall visual.
	WaterfallChartOptions TemplateWaterfallChartOptionsPtrInput `pulumi:"waterfallChartOptions"`
}

func (TemplateWaterfallChartConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWaterfallChartConfiguration)(nil)).Elem()
}

func (i TemplateWaterfallChartConfigurationArgs) ToTemplateWaterfallChartConfigurationOutput() TemplateWaterfallChartConfigurationOutput {
	return i.ToTemplateWaterfallChartConfigurationOutputWithContext(context.Background())
}

func (i TemplateWaterfallChartConfigurationArgs) ToTemplateWaterfallChartConfigurationOutputWithContext(ctx context.Context) TemplateWaterfallChartConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWaterfallChartConfigurationOutput)
}

func (i TemplateWaterfallChartConfigurationArgs) ToTemplateWaterfallChartConfigurationPtrOutput() TemplateWaterfallChartConfigurationPtrOutput {
	return i.ToTemplateWaterfallChartConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateWaterfallChartConfigurationArgs) ToTemplateWaterfallChartConfigurationPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWaterfallChartConfigurationOutput).ToTemplateWaterfallChartConfigurationPtrOutputWithContext(ctx)
}

// TemplateWaterfallChartConfigurationPtrInput is an input type that accepts TemplateWaterfallChartConfigurationArgs, TemplateWaterfallChartConfigurationPtr and TemplateWaterfallChartConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateWaterfallChartConfigurationPtrInput` via:
//
//	        TemplateWaterfallChartConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateWaterfallChartConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateWaterfallChartConfigurationPtrOutput() TemplateWaterfallChartConfigurationPtrOutput
	ToTemplateWaterfallChartConfigurationPtrOutputWithContext(context.Context) TemplateWaterfallChartConfigurationPtrOutput
}

type templateWaterfallChartConfigurationPtrType TemplateWaterfallChartConfigurationArgs

func TemplateWaterfallChartConfigurationPtr(v *TemplateWaterfallChartConfigurationArgs) TemplateWaterfallChartConfigurationPtrInput {
	return (*templateWaterfallChartConfigurationPtrType)(v)
}

func (*templateWaterfallChartConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWaterfallChartConfiguration)(nil)).Elem()
}

func (i *templateWaterfallChartConfigurationPtrType) ToTemplateWaterfallChartConfigurationPtrOutput() TemplateWaterfallChartConfigurationPtrOutput {
	return i.ToTemplateWaterfallChartConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateWaterfallChartConfigurationPtrType) ToTemplateWaterfallChartConfigurationPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWaterfallChartConfigurationPtrOutput)
}

type TemplateWaterfallChartConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateWaterfallChartConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWaterfallChartConfiguration)(nil)).Elem()
}

func (o TemplateWaterfallChartConfigurationOutput) ToTemplateWaterfallChartConfigurationOutput() TemplateWaterfallChartConfigurationOutput {
	return o
}

func (o TemplateWaterfallChartConfigurationOutput) ToTemplateWaterfallChartConfigurationOutputWithContext(ctx context.Context) TemplateWaterfallChartConfigurationOutput {
	return o
}

func (o TemplateWaterfallChartConfigurationOutput) ToTemplateWaterfallChartConfigurationPtrOutput() TemplateWaterfallChartConfigurationPtrOutput {
	return o.ToTemplateWaterfallChartConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateWaterfallChartConfigurationOutput) ToTemplateWaterfallChartConfigurationPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateWaterfallChartConfiguration) *TemplateWaterfallChartConfiguration {
		return &v
	}).(TemplateWaterfallChartConfigurationPtrOutput)
}

// The options that determine the presentation of the category axis.
func (o TemplateWaterfallChartConfigurationOutput) CategoryAxisDisplayOptions() TemplateAxisDisplayOptionsPtrOutput {
	return o.ApplyT(func(v TemplateWaterfallChartConfiguration) *TemplateAxisDisplayOptions {
		return v.CategoryAxisDisplayOptions
	}).(TemplateAxisDisplayOptionsPtrOutput)
}

// The options that determine the presentation of the category axis label.
func (o TemplateWaterfallChartConfigurationOutput) CategoryAxisLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateWaterfallChartConfiguration) *TemplateChartAxisLabelOptions {
		return v.CategoryAxisLabelOptions
	}).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The color configuration of a waterfall visual.
func (o TemplateWaterfallChartConfigurationOutput) ColorConfiguration() TemplateWaterfallChartColorConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateWaterfallChartConfiguration) *TemplateWaterfallChartColorConfiguration {
		return v.ColorConfiguration
	}).(TemplateWaterfallChartColorConfigurationPtrOutput)
}

// The data label configuration of a waterfall visual.
func (o TemplateWaterfallChartConfigurationOutput) DataLabels() TemplateDataLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateWaterfallChartConfiguration) *TemplateDataLabelOptions { return v.DataLabels }).(TemplateDataLabelOptionsPtrOutput)
}

// The field well configuration of a waterfall visual.
func (o TemplateWaterfallChartConfigurationOutput) FieldWells() TemplateWaterfallChartFieldWellsPtrOutput {
	return o.ApplyT(func(v TemplateWaterfallChartConfiguration) *TemplateWaterfallChartFieldWells { return v.FieldWells }).(TemplateWaterfallChartFieldWellsPtrOutput)
}

// The legend configuration of a waterfall visual.
func (o TemplateWaterfallChartConfigurationOutput) Legend() TemplateLegendOptionsPtrOutput {
	return o.ApplyT(func(v TemplateWaterfallChartConfiguration) *TemplateLegendOptions { return v.Legend }).(TemplateLegendOptionsPtrOutput)
}

// The options that determine the presentation of the y-axis.
func (o TemplateWaterfallChartConfigurationOutput) PrimaryYAxisDisplayOptions() TemplateAxisDisplayOptionsPtrOutput {
	return o.ApplyT(func(v TemplateWaterfallChartConfiguration) *TemplateAxisDisplayOptions {
		return v.PrimaryYAxisDisplayOptions
	}).(TemplateAxisDisplayOptionsPtrOutput)
}

// The options that determine the presentation of the y-axis label.
func (o TemplateWaterfallChartConfigurationOutput) PrimaryYAxisLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateWaterfallChartConfiguration) *TemplateChartAxisLabelOptions {
		return v.PrimaryYAxisLabelOptions
	}).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The sort configuration of a waterfall visual.
func (o TemplateWaterfallChartConfigurationOutput) SortConfiguration() TemplateWaterfallChartSortConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateWaterfallChartConfiguration) *TemplateWaterfallChartSortConfiguration {
		return v.SortConfiguration
	}).(TemplateWaterfallChartSortConfigurationPtrOutput)
}

// The visual palette configuration of a waterfall visual.
func (o TemplateWaterfallChartConfigurationOutput) VisualPalette() TemplateVisualPalettePtrOutput {
	return o.ApplyT(func(v TemplateWaterfallChartConfiguration) *TemplateVisualPalette { return v.VisualPalette }).(TemplateVisualPalettePtrOutput)
}

// The options that determine the presentation of a waterfall visual.
func (o TemplateWaterfallChartConfigurationOutput) WaterfallChartOptions() TemplateWaterfallChartOptionsPtrOutput {
	return o.ApplyT(func(v TemplateWaterfallChartConfiguration) *TemplateWaterfallChartOptions {
		return v.WaterfallChartOptions
	}).(TemplateWaterfallChartOptionsPtrOutput)
}

type TemplateWaterfallChartConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateWaterfallChartConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWaterfallChartConfiguration)(nil)).Elem()
}

func (o TemplateWaterfallChartConfigurationPtrOutput) ToTemplateWaterfallChartConfigurationPtrOutput() TemplateWaterfallChartConfigurationPtrOutput {
	return o
}

func (o TemplateWaterfallChartConfigurationPtrOutput) ToTemplateWaterfallChartConfigurationPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartConfigurationPtrOutput {
	return o
}

func (o TemplateWaterfallChartConfigurationPtrOutput) Elem() TemplateWaterfallChartConfigurationOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartConfiguration) TemplateWaterfallChartConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateWaterfallChartConfiguration
		return ret
	}).(TemplateWaterfallChartConfigurationOutput)
}

// The options that determine the presentation of the category axis.
func (o TemplateWaterfallChartConfigurationPtrOutput) CategoryAxisDisplayOptions() TemplateAxisDisplayOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartConfiguration) *TemplateAxisDisplayOptions {
		if v == nil {
			return nil
		}
		return v.CategoryAxisDisplayOptions
	}).(TemplateAxisDisplayOptionsPtrOutput)
}

// The options that determine the presentation of the category axis label.
func (o TemplateWaterfallChartConfigurationPtrOutput) CategoryAxisLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartConfiguration) *TemplateChartAxisLabelOptions {
		if v == nil {
			return nil
		}
		return v.CategoryAxisLabelOptions
	}).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The color configuration of a waterfall visual.
func (o TemplateWaterfallChartConfigurationPtrOutput) ColorConfiguration() TemplateWaterfallChartColorConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartConfiguration) *TemplateWaterfallChartColorConfiguration {
		if v == nil {
			return nil
		}
		return v.ColorConfiguration
	}).(TemplateWaterfallChartColorConfigurationPtrOutput)
}

// The data label configuration of a waterfall visual.
func (o TemplateWaterfallChartConfigurationPtrOutput) DataLabels() TemplateDataLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartConfiguration) *TemplateDataLabelOptions {
		if v == nil {
			return nil
		}
		return v.DataLabels
	}).(TemplateDataLabelOptionsPtrOutput)
}

// The field well configuration of a waterfall visual.
func (o TemplateWaterfallChartConfigurationPtrOutput) FieldWells() TemplateWaterfallChartFieldWellsPtrOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartConfiguration) *TemplateWaterfallChartFieldWells {
		if v == nil {
			return nil
		}
		return v.FieldWells
	}).(TemplateWaterfallChartFieldWellsPtrOutput)
}

// The legend configuration of a waterfall visual.
func (o TemplateWaterfallChartConfigurationPtrOutput) Legend() TemplateLegendOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartConfiguration) *TemplateLegendOptions {
		if v == nil {
			return nil
		}
		return v.Legend
	}).(TemplateLegendOptionsPtrOutput)
}

// The options that determine the presentation of the y-axis.
func (o TemplateWaterfallChartConfigurationPtrOutput) PrimaryYAxisDisplayOptions() TemplateAxisDisplayOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartConfiguration) *TemplateAxisDisplayOptions {
		if v == nil {
			return nil
		}
		return v.PrimaryYAxisDisplayOptions
	}).(TemplateAxisDisplayOptionsPtrOutput)
}

// The options that determine the presentation of the y-axis label.
func (o TemplateWaterfallChartConfigurationPtrOutput) PrimaryYAxisLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartConfiguration) *TemplateChartAxisLabelOptions {
		if v == nil {
			return nil
		}
		return v.PrimaryYAxisLabelOptions
	}).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The sort configuration of a waterfall visual.
func (o TemplateWaterfallChartConfigurationPtrOutput) SortConfiguration() TemplateWaterfallChartSortConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartConfiguration) *TemplateWaterfallChartSortConfiguration {
		if v == nil {
			return nil
		}
		return v.SortConfiguration
	}).(TemplateWaterfallChartSortConfigurationPtrOutput)
}

// The visual palette configuration of a waterfall visual.
func (o TemplateWaterfallChartConfigurationPtrOutput) VisualPalette() TemplateVisualPalettePtrOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartConfiguration) *TemplateVisualPalette {
		if v == nil {
			return nil
		}
		return v.VisualPalette
	}).(TemplateVisualPalettePtrOutput)
}

// The options that determine the presentation of a waterfall visual.
func (o TemplateWaterfallChartConfigurationPtrOutput) WaterfallChartOptions() TemplateWaterfallChartOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartConfiguration) *TemplateWaterfallChartOptions {
		if v == nil {
			return nil
		}
		return v.WaterfallChartOptions
	}).(TemplateWaterfallChartOptionsPtrOutput)
}

type TemplateWaterfallChartFieldWells struct {
	// The field well configuration of a waterfall visual.
	WaterfallChartAggregatedFieldWells *TemplateWaterfallChartAggregatedFieldWells `pulumi:"waterfallChartAggregatedFieldWells"`
}

// TemplateWaterfallChartFieldWellsInput is an input type that accepts TemplateWaterfallChartFieldWellsArgs and TemplateWaterfallChartFieldWellsOutput values.
// You can construct a concrete instance of `TemplateWaterfallChartFieldWellsInput` via:
//
//	TemplateWaterfallChartFieldWellsArgs{...}
type TemplateWaterfallChartFieldWellsInput interface {
	pulumi.Input

	ToTemplateWaterfallChartFieldWellsOutput() TemplateWaterfallChartFieldWellsOutput
	ToTemplateWaterfallChartFieldWellsOutputWithContext(context.Context) TemplateWaterfallChartFieldWellsOutput
}

type TemplateWaterfallChartFieldWellsArgs struct {
	// The field well configuration of a waterfall visual.
	WaterfallChartAggregatedFieldWells TemplateWaterfallChartAggregatedFieldWellsPtrInput `pulumi:"waterfallChartAggregatedFieldWells"`
}

func (TemplateWaterfallChartFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWaterfallChartFieldWells)(nil)).Elem()
}

func (i TemplateWaterfallChartFieldWellsArgs) ToTemplateWaterfallChartFieldWellsOutput() TemplateWaterfallChartFieldWellsOutput {
	return i.ToTemplateWaterfallChartFieldWellsOutputWithContext(context.Background())
}

func (i TemplateWaterfallChartFieldWellsArgs) ToTemplateWaterfallChartFieldWellsOutputWithContext(ctx context.Context) TemplateWaterfallChartFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWaterfallChartFieldWellsOutput)
}

func (i TemplateWaterfallChartFieldWellsArgs) ToTemplateWaterfallChartFieldWellsPtrOutput() TemplateWaterfallChartFieldWellsPtrOutput {
	return i.ToTemplateWaterfallChartFieldWellsPtrOutputWithContext(context.Background())
}

func (i TemplateWaterfallChartFieldWellsArgs) ToTemplateWaterfallChartFieldWellsPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWaterfallChartFieldWellsOutput).ToTemplateWaterfallChartFieldWellsPtrOutputWithContext(ctx)
}

// TemplateWaterfallChartFieldWellsPtrInput is an input type that accepts TemplateWaterfallChartFieldWellsArgs, TemplateWaterfallChartFieldWellsPtr and TemplateWaterfallChartFieldWellsPtrOutput values.
// You can construct a concrete instance of `TemplateWaterfallChartFieldWellsPtrInput` via:
//
//	        TemplateWaterfallChartFieldWellsArgs{...}
//
//	or:
//
//	        nil
type TemplateWaterfallChartFieldWellsPtrInput interface {
	pulumi.Input

	ToTemplateWaterfallChartFieldWellsPtrOutput() TemplateWaterfallChartFieldWellsPtrOutput
	ToTemplateWaterfallChartFieldWellsPtrOutputWithContext(context.Context) TemplateWaterfallChartFieldWellsPtrOutput
}

type templateWaterfallChartFieldWellsPtrType TemplateWaterfallChartFieldWellsArgs

func TemplateWaterfallChartFieldWellsPtr(v *TemplateWaterfallChartFieldWellsArgs) TemplateWaterfallChartFieldWellsPtrInput {
	return (*templateWaterfallChartFieldWellsPtrType)(v)
}

func (*templateWaterfallChartFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWaterfallChartFieldWells)(nil)).Elem()
}

func (i *templateWaterfallChartFieldWellsPtrType) ToTemplateWaterfallChartFieldWellsPtrOutput() TemplateWaterfallChartFieldWellsPtrOutput {
	return i.ToTemplateWaterfallChartFieldWellsPtrOutputWithContext(context.Background())
}

func (i *templateWaterfallChartFieldWellsPtrType) ToTemplateWaterfallChartFieldWellsPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWaterfallChartFieldWellsPtrOutput)
}

type TemplateWaterfallChartFieldWellsOutput struct{ *pulumi.OutputState }

func (TemplateWaterfallChartFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWaterfallChartFieldWells)(nil)).Elem()
}

func (o TemplateWaterfallChartFieldWellsOutput) ToTemplateWaterfallChartFieldWellsOutput() TemplateWaterfallChartFieldWellsOutput {
	return o
}

func (o TemplateWaterfallChartFieldWellsOutput) ToTemplateWaterfallChartFieldWellsOutputWithContext(ctx context.Context) TemplateWaterfallChartFieldWellsOutput {
	return o
}

func (o TemplateWaterfallChartFieldWellsOutput) ToTemplateWaterfallChartFieldWellsPtrOutput() TemplateWaterfallChartFieldWellsPtrOutput {
	return o.ToTemplateWaterfallChartFieldWellsPtrOutputWithContext(context.Background())
}

func (o TemplateWaterfallChartFieldWellsOutput) ToTemplateWaterfallChartFieldWellsPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateWaterfallChartFieldWells) *TemplateWaterfallChartFieldWells {
		return &v
	}).(TemplateWaterfallChartFieldWellsPtrOutput)
}

// The field well configuration of a waterfall visual.
func (o TemplateWaterfallChartFieldWellsOutput) WaterfallChartAggregatedFieldWells() TemplateWaterfallChartAggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v TemplateWaterfallChartFieldWells) *TemplateWaterfallChartAggregatedFieldWells {
		return v.WaterfallChartAggregatedFieldWells
	}).(TemplateWaterfallChartAggregatedFieldWellsPtrOutput)
}

type TemplateWaterfallChartFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (TemplateWaterfallChartFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWaterfallChartFieldWells)(nil)).Elem()
}

func (o TemplateWaterfallChartFieldWellsPtrOutput) ToTemplateWaterfallChartFieldWellsPtrOutput() TemplateWaterfallChartFieldWellsPtrOutput {
	return o
}

func (o TemplateWaterfallChartFieldWellsPtrOutput) ToTemplateWaterfallChartFieldWellsPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartFieldWellsPtrOutput {
	return o
}

func (o TemplateWaterfallChartFieldWellsPtrOutput) Elem() TemplateWaterfallChartFieldWellsOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartFieldWells) TemplateWaterfallChartFieldWells {
		if v != nil {
			return *v
		}
		var ret TemplateWaterfallChartFieldWells
		return ret
	}).(TemplateWaterfallChartFieldWellsOutput)
}

// The field well configuration of a waterfall visual.
func (o TemplateWaterfallChartFieldWellsPtrOutput) WaterfallChartAggregatedFieldWells() TemplateWaterfallChartAggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartFieldWells) *TemplateWaterfallChartAggregatedFieldWells {
		if v == nil {
			return nil
		}
		return v.WaterfallChartAggregatedFieldWells
	}).(TemplateWaterfallChartAggregatedFieldWellsPtrOutput)
}

type TemplateWaterfallChartGroupColorConfiguration struct {
	// Defines the color for the negative bars of a waterfall chart.
	NegativeBarColor *string `pulumi:"negativeBarColor"`
	// Defines the color for the positive bars of a waterfall chart.
	PositiveBarColor *string `pulumi:"positiveBarColor"`
	// Defines the color for the total bars of a waterfall chart.
	TotalBarColor *string `pulumi:"totalBarColor"`
}

// TemplateWaterfallChartGroupColorConfigurationInput is an input type that accepts TemplateWaterfallChartGroupColorConfigurationArgs and TemplateWaterfallChartGroupColorConfigurationOutput values.
// You can construct a concrete instance of `TemplateWaterfallChartGroupColorConfigurationInput` via:
//
//	TemplateWaterfallChartGroupColorConfigurationArgs{...}
type TemplateWaterfallChartGroupColorConfigurationInput interface {
	pulumi.Input

	ToTemplateWaterfallChartGroupColorConfigurationOutput() TemplateWaterfallChartGroupColorConfigurationOutput
	ToTemplateWaterfallChartGroupColorConfigurationOutputWithContext(context.Context) TemplateWaterfallChartGroupColorConfigurationOutput
}

type TemplateWaterfallChartGroupColorConfigurationArgs struct {
	// Defines the color for the negative bars of a waterfall chart.
	NegativeBarColor pulumi.StringPtrInput `pulumi:"negativeBarColor"`
	// Defines the color for the positive bars of a waterfall chart.
	PositiveBarColor pulumi.StringPtrInput `pulumi:"positiveBarColor"`
	// Defines the color for the total bars of a waterfall chart.
	TotalBarColor pulumi.StringPtrInput `pulumi:"totalBarColor"`
}

func (TemplateWaterfallChartGroupColorConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWaterfallChartGroupColorConfiguration)(nil)).Elem()
}

func (i TemplateWaterfallChartGroupColorConfigurationArgs) ToTemplateWaterfallChartGroupColorConfigurationOutput() TemplateWaterfallChartGroupColorConfigurationOutput {
	return i.ToTemplateWaterfallChartGroupColorConfigurationOutputWithContext(context.Background())
}

func (i TemplateWaterfallChartGroupColorConfigurationArgs) ToTemplateWaterfallChartGroupColorConfigurationOutputWithContext(ctx context.Context) TemplateWaterfallChartGroupColorConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWaterfallChartGroupColorConfigurationOutput)
}

func (i TemplateWaterfallChartGroupColorConfigurationArgs) ToTemplateWaterfallChartGroupColorConfigurationPtrOutput() TemplateWaterfallChartGroupColorConfigurationPtrOutput {
	return i.ToTemplateWaterfallChartGroupColorConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateWaterfallChartGroupColorConfigurationArgs) ToTemplateWaterfallChartGroupColorConfigurationPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartGroupColorConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWaterfallChartGroupColorConfigurationOutput).ToTemplateWaterfallChartGroupColorConfigurationPtrOutputWithContext(ctx)
}

// TemplateWaterfallChartGroupColorConfigurationPtrInput is an input type that accepts TemplateWaterfallChartGroupColorConfigurationArgs, TemplateWaterfallChartGroupColorConfigurationPtr and TemplateWaterfallChartGroupColorConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateWaterfallChartGroupColorConfigurationPtrInput` via:
//
//	        TemplateWaterfallChartGroupColorConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateWaterfallChartGroupColorConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateWaterfallChartGroupColorConfigurationPtrOutput() TemplateWaterfallChartGroupColorConfigurationPtrOutput
	ToTemplateWaterfallChartGroupColorConfigurationPtrOutputWithContext(context.Context) TemplateWaterfallChartGroupColorConfigurationPtrOutput
}

type templateWaterfallChartGroupColorConfigurationPtrType TemplateWaterfallChartGroupColorConfigurationArgs

func TemplateWaterfallChartGroupColorConfigurationPtr(v *TemplateWaterfallChartGroupColorConfigurationArgs) TemplateWaterfallChartGroupColorConfigurationPtrInput {
	return (*templateWaterfallChartGroupColorConfigurationPtrType)(v)
}

func (*templateWaterfallChartGroupColorConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWaterfallChartGroupColorConfiguration)(nil)).Elem()
}

func (i *templateWaterfallChartGroupColorConfigurationPtrType) ToTemplateWaterfallChartGroupColorConfigurationPtrOutput() TemplateWaterfallChartGroupColorConfigurationPtrOutput {
	return i.ToTemplateWaterfallChartGroupColorConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateWaterfallChartGroupColorConfigurationPtrType) ToTemplateWaterfallChartGroupColorConfigurationPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartGroupColorConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWaterfallChartGroupColorConfigurationPtrOutput)
}

type TemplateWaterfallChartGroupColorConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateWaterfallChartGroupColorConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWaterfallChartGroupColorConfiguration)(nil)).Elem()
}

func (o TemplateWaterfallChartGroupColorConfigurationOutput) ToTemplateWaterfallChartGroupColorConfigurationOutput() TemplateWaterfallChartGroupColorConfigurationOutput {
	return o
}

func (o TemplateWaterfallChartGroupColorConfigurationOutput) ToTemplateWaterfallChartGroupColorConfigurationOutputWithContext(ctx context.Context) TemplateWaterfallChartGroupColorConfigurationOutput {
	return o
}

func (o TemplateWaterfallChartGroupColorConfigurationOutput) ToTemplateWaterfallChartGroupColorConfigurationPtrOutput() TemplateWaterfallChartGroupColorConfigurationPtrOutput {
	return o.ToTemplateWaterfallChartGroupColorConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateWaterfallChartGroupColorConfigurationOutput) ToTemplateWaterfallChartGroupColorConfigurationPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartGroupColorConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateWaterfallChartGroupColorConfiguration) *TemplateWaterfallChartGroupColorConfiguration {
		return &v
	}).(TemplateWaterfallChartGroupColorConfigurationPtrOutput)
}

// Defines the color for the negative bars of a waterfall chart.
func (o TemplateWaterfallChartGroupColorConfigurationOutput) NegativeBarColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateWaterfallChartGroupColorConfiguration) *string { return v.NegativeBarColor }).(pulumi.StringPtrOutput)
}

// Defines the color for the positive bars of a waterfall chart.
func (o TemplateWaterfallChartGroupColorConfigurationOutput) PositiveBarColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateWaterfallChartGroupColorConfiguration) *string { return v.PositiveBarColor }).(pulumi.StringPtrOutput)
}

// Defines the color for the total bars of a waterfall chart.
func (o TemplateWaterfallChartGroupColorConfigurationOutput) TotalBarColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateWaterfallChartGroupColorConfiguration) *string { return v.TotalBarColor }).(pulumi.StringPtrOutput)
}

type TemplateWaterfallChartGroupColorConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateWaterfallChartGroupColorConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWaterfallChartGroupColorConfiguration)(nil)).Elem()
}

func (o TemplateWaterfallChartGroupColorConfigurationPtrOutput) ToTemplateWaterfallChartGroupColorConfigurationPtrOutput() TemplateWaterfallChartGroupColorConfigurationPtrOutput {
	return o
}

func (o TemplateWaterfallChartGroupColorConfigurationPtrOutput) ToTemplateWaterfallChartGroupColorConfigurationPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartGroupColorConfigurationPtrOutput {
	return o
}

func (o TemplateWaterfallChartGroupColorConfigurationPtrOutput) Elem() TemplateWaterfallChartGroupColorConfigurationOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartGroupColorConfiguration) TemplateWaterfallChartGroupColorConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateWaterfallChartGroupColorConfiguration
		return ret
	}).(TemplateWaterfallChartGroupColorConfigurationOutput)
}

// Defines the color for the negative bars of a waterfall chart.
func (o TemplateWaterfallChartGroupColorConfigurationPtrOutput) NegativeBarColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartGroupColorConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.NegativeBarColor
	}).(pulumi.StringPtrOutput)
}

// Defines the color for the positive bars of a waterfall chart.
func (o TemplateWaterfallChartGroupColorConfigurationPtrOutput) PositiveBarColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartGroupColorConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.PositiveBarColor
	}).(pulumi.StringPtrOutput)
}

// Defines the color for the total bars of a waterfall chart.
func (o TemplateWaterfallChartGroupColorConfigurationPtrOutput) TotalBarColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartGroupColorConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.TotalBarColor
	}).(pulumi.StringPtrOutput)
}

type TemplateWaterfallChartOptions struct {
	// This option determines the total bar label of a waterfall visual.
	TotalBarLabel *string `pulumi:"totalBarLabel"`
}

// TemplateWaterfallChartOptionsInput is an input type that accepts TemplateWaterfallChartOptionsArgs and TemplateWaterfallChartOptionsOutput values.
// You can construct a concrete instance of `TemplateWaterfallChartOptionsInput` via:
//
//	TemplateWaterfallChartOptionsArgs{...}
type TemplateWaterfallChartOptionsInput interface {
	pulumi.Input

	ToTemplateWaterfallChartOptionsOutput() TemplateWaterfallChartOptionsOutput
	ToTemplateWaterfallChartOptionsOutputWithContext(context.Context) TemplateWaterfallChartOptionsOutput
}

type TemplateWaterfallChartOptionsArgs struct {
	// This option determines the total bar label of a waterfall visual.
	TotalBarLabel pulumi.StringPtrInput `pulumi:"totalBarLabel"`
}

func (TemplateWaterfallChartOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWaterfallChartOptions)(nil)).Elem()
}

func (i TemplateWaterfallChartOptionsArgs) ToTemplateWaterfallChartOptionsOutput() TemplateWaterfallChartOptionsOutput {
	return i.ToTemplateWaterfallChartOptionsOutputWithContext(context.Background())
}

func (i TemplateWaterfallChartOptionsArgs) ToTemplateWaterfallChartOptionsOutputWithContext(ctx context.Context) TemplateWaterfallChartOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWaterfallChartOptionsOutput)
}

func (i TemplateWaterfallChartOptionsArgs) ToTemplateWaterfallChartOptionsPtrOutput() TemplateWaterfallChartOptionsPtrOutput {
	return i.ToTemplateWaterfallChartOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateWaterfallChartOptionsArgs) ToTemplateWaterfallChartOptionsPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWaterfallChartOptionsOutput).ToTemplateWaterfallChartOptionsPtrOutputWithContext(ctx)
}

// TemplateWaterfallChartOptionsPtrInput is an input type that accepts TemplateWaterfallChartOptionsArgs, TemplateWaterfallChartOptionsPtr and TemplateWaterfallChartOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateWaterfallChartOptionsPtrInput` via:
//
//	        TemplateWaterfallChartOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateWaterfallChartOptionsPtrInput interface {
	pulumi.Input

	ToTemplateWaterfallChartOptionsPtrOutput() TemplateWaterfallChartOptionsPtrOutput
	ToTemplateWaterfallChartOptionsPtrOutputWithContext(context.Context) TemplateWaterfallChartOptionsPtrOutput
}

type templateWaterfallChartOptionsPtrType TemplateWaterfallChartOptionsArgs

func TemplateWaterfallChartOptionsPtr(v *TemplateWaterfallChartOptionsArgs) TemplateWaterfallChartOptionsPtrInput {
	return (*templateWaterfallChartOptionsPtrType)(v)
}

func (*templateWaterfallChartOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWaterfallChartOptions)(nil)).Elem()
}

func (i *templateWaterfallChartOptionsPtrType) ToTemplateWaterfallChartOptionsPtrOutput() TemplateWaterfallChartOptionsPtrOutput {
	return i.ToTemplateWaterfallChartOptionsPtrOutputWithContext(context.Background())
}

func (i *templateWaterfallChartOptionsPtrType) ToTemplateWaterfallChartOptionsPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWaterfallChartOptionsPtrOutput)
}

type TemplateWaterfallChartOptionsOutput struct{ *pulumi.OutputState }

func (TemplateWaterfallChartOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWaterfallChartOptions)(nil)).Elem()
}

func (o TemplateWaterfallChartOptionsOutput) ToTemplateWaterfallChartOptionsOutput() TemplateWaterfallChartOptionsOutput {
	return o
}

func (o TemplateWaterfallChartOptionsOutput) ToTemplateWaterfallChartOptionsOutputWithContext(ctx context.Context) TemplateWaterfallChartOptionsOutput {
	return o
}

func (o TemplateWaterfallChartOptionsOutput) ToTemplateWaterfallChartOptionsPtrOutput() TemplateWaterfallChartOptionsPtrOutput {
	return o.ToTemplateWaterfallChartOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateWaterfallChartOptionsOutput) ToTemplateWaterfallChartOptionsPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateWaterfallChartOptions) *TemplateWaterfallChartOptions {
		return &v
	}).(TemplateWaterfallChartOptionsPtrOutput)
}

// This option determines the total bar label of a waterfall visual.
func (o TemplateWaterfallChartOptionsOutput) TotalBarLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateWaterfallChartOptions) *string { return v.TotalBarLabel }).(pulumi.StringPtrOutput)
}

type TemplateWaterfallChartOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateWaterfallChartOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWaterfallChartOptions)(nil)).Elem()
}

func (o TemplateWaterfallChartOptionsPtrOutput) ToTemplateWaterfallChartOptionsPtrOutput() TemplateWaterfallChartOptionsPtrOutput {
	return o
}

func (o TemplateWaterfallChartOptionsPtrOutput) ToTemplateWaterfallChartOptionsPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartOptionsPtrOutput {
	return o
}

func (o TemplateWaterfallChartOptionsPtrOutput) Elem() TemplateWaterfallChartOptionsOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartOptions) TemplateWaterfallChartOptions {
		if v != nil {
			return *v
		}
		var ret TemplateWaterfallChartOptions
		return ret
	}).(TemplateWaterfallChartOptionsOutput)
}

// This option determines the total bar label of a waterfall visual.
func (o TemplateWaterfallChartOptionsPtrOutput) TotalBarLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartOptions) *string {
		if v == nil {
			return nil
		}
		return v.TotalBarLabel
	}).(pulumi.StringPtrOutput)
}

type TemplateWaterfallChartSortConfiguration struct {
	// The limit on the number of bar groups that are displayed.
	BreakdownItemsLimit *TemplateItemsLimitConfiguration `pulumi:"breakdownItemsLimit"`
	// The sort configuration of the category fields.
	CategorySort []TemplateFieldSortOptions `pulumi:"categorySort"`
}

// TemplateWaterfallChartSortConfigurationInput is an input type that accepts TemplateWaterfallChartSortConfigurationArgs and TemplateWaterfallChartSortConfigurationOutput values.
// You can construct a concrete instance of `TemplateWaterfallChartSortConfigurationInput` via:
//
//	TemplateWaterfallChartSortConfigurationArgs{...}
type TemplateWaterfallChartSortConfigurationInput interface {
	pulumi.Input

	ToTemplateWaterfallChartSortConfigurationOutput() TemplateWaterfallChartSortConfigurationOutput
	ToTemplateWaterfallChartSortConfigurationOutputWithContext(context.Context) TemplateWaterfallChartSortConfigurationOutput
}

type TemplateWaterfallChartSortConfigurationArgs struct {
	// The limit on the number of bar groups that are displayed.
	BreakdownItemsLimit TemplateItemsLimitConfigurationPtrInput `pulumi:"breakdownItemsLimit"`
	// The sort configuration of the category fields.
	CategorySort TemplateFieldSortOptionsArrayInput `pulumi:"categorySort"`
}

func (TemplateWaterfallChartSortConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWaterfallChartSortConfiguration)(nil)).Elem()
}

func (i TemplateWaterfallChartSortConfigurationArgs) ToTemplateWaterfallChartSortConfigurationOutput() TemplateWaterfallChartSortConfigurationOutput {
	return i.ToTemplateWaterfallChartSortConfigurationOutputWithContext(context.Background())
}

func (i TemplateWaterfallChartSortConfigurationArgs) ToTemplateWaterfallChartSortConfigurationOutputWithContext(ctx context.Context) TemplateWaterfallChartSortConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWaterfallChartSortConfigurationOutput)
}

func (i TemplateWaterfallChartSortConfigurationArgs) ToTemplateWaterfallChartSortConfigurationPtrOutput() TemplateWaterfallChartSortConfigurationPtrOutput {
	return i.ToTemplateWaterfallChartSortConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateWaterfallChartSortConfigurationArgs) ToTemplateWaterfallChartSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartSortConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWaterfallChartSortConfigurationOutput).ToTemplateWaterfallChartSortConfigurationPtrOutputWithContext(ctx)
}

// TemplateWaterfallChartSortConfigurationPtrInput is an input type that accepts TemplateWaterfallChartSortConfigurationArgs, TemplateWaterfallChartSortConfigurationPtr and TemplateWaterfallChartSortConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateWaterfallChartSortConfigurationPtrInput` via:
//
//	        TemplateWaterfallChartSortConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateWaterfallChartSortConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateWaterfallChartSortConfigurationPtrOutput() TemplateWaterfallChartSortConfigurationPtrOutput
	ToTemplateWaterfallChartSortConfigurationPtrOutputWithContext(context.Context) TemplateWaterfallChartSortConfigurationPtrOutput
}

type templateWaterfallChartSortConfigurationPtrType TemplateWaterfallChartSortConfigurationArgs

func TemplateWaterfallChartSortConfigurationPtr(v *TemplateWaterfallChartSortConfigurationArgs) TemplateWaterfallChartSortConfigurationPtrInput {
	return (*templateWaterfallChartSortConfigurationPtrType)(v)
}

func (*templateWaterfallChartSortConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWaterfallChartSortConfiguration)(nil)).Elem()
}

func (i *templateWaterfallChartSortConfigurationPtrType) ToTemplateWaterfallChartSortConfigurationPtrOutput() TemplateWaterfallChartSortConfigurationPtrOutput {
	return i.ToTemplateWaterfallChartSortConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateWaterfallChartSortConfigurationPtrType) ToTemplateWaterfallChartSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartSortConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWaterfallChartSortConfigurationPtrOutput)
}

type TemplateWaterfallChartSortConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateWaterfallChartSortConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWaterfallChartSortConfiguration)(nil)).Elem()
}

func (o TemplateWaterfallChartSortConfigurationOutput) ToTemplateWaterfallChartSortConfigurationOutput() TemplateWaterfallChartSortConfigurationOutput {
	return o
}

func (o TemplateWaterfallChartSortConfigurationOutput) ToTemplateWaterfallChartSortConfigurationOutputWithContext(ctx context.Context) TemplateWaterfallChartSortConfigurationOutput {
	return o
}

func (o TemplateWaterfallChartSortConfigurationOutput) ToTemplateWaterfallChartSortConfigurationPtrOutput() TemplateWaterfallChartSortConfigurationPtrOutput {
	return o.ToTemplateWaterfallChartSortConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateWaterfallChartSortConfigurationOutput) ToTemplateWaterfallChartSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartSortConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateWaterfallChartSortConfiguration) *TemplateWaterfallChartSortConfiguration {
		return &v
	}).(TemplateWaterfallChartSortConfigurationPtrOutput)
}

// The limit on the number of bar groups that are displayed.
func (o TemplateWaterfallChartSortConfigurationOutput) BreakdownItemsLimit() TemplateItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateWaterfallChartSortConfiguration) *TemplateItemsLimitConfiguration {
		return v.BreakdownItemsLimit
	}).(TemplateItemsLimitConfigurationPtrOutput)
}

// The sort configuration of the category fields.
func (o TemplateWaterfallChartSortConfigurationOutput) CategorySort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v TemplateWaterfallChartSortConfiguration) []TemplateFieldSortOptions { return v.CategorySort }).(TemplateFieldSortOptionsArrayOutput)
}

type TemplateWaterfallChartSortConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateWaterfallChartSortConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWaterfallChartSortConfiguration)(nil)).Elem()
}

func (o TemplateWaterfallChartSortConfigurationPtrOutput) ToTemplateWaterfallChartSortConfigurationPtrOutput() TemplateWaterfallChartSortConfigurationPtrOutput {
	return o
}

func (o TemplateWaterfallChartSortConfigurationPtrOutput) ToTemplateWaterfallChartSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateWaterfallChartSortConfigurationPtrOutput {
	return o
}

func (o TemplateWaterfallChartSortConfigurationPtrOutput) Elem() TemplateWaterfallChartSortConfigurationOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartSortConfiguration) TemplateWaterfallChartSortConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateWaterfallChartSortConfiguration
		return ret
	}).(TemplateWaterfallChartSortConfigurationOutput)
}

// The limit on the number of bar groups that are displayed.
func (o TemplateWaterfallChartSortConfigurationPtrOutput) BreakdownItemsLimit() TemplateItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartSortConfiguration) *TemplateItemsLimitConfiguration {
		if v == nil {
			return nil
		}
		return v.BreakdownItemsLimit
	}).(TemplateItemsLimitConfigurationPtrOutput)
}

// The sort configuration of the category fields.
func (o TemplateWaterfallChartSortConfigurationPtrOutput) CategorySort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v *TemplateWaterfallChartSortConfiguration) []TemplateFieldSortOptions {
		if v == nil {
			return nil
		}
		return v.CategorySort
	}).(TemplateFieldSortOptionsArrayOutput)
}

type TemplateWaterfallVisual struct {
	// The list of custom actions that are configured for a visual.
	Actions []TemplateVisualCustomAction `pulumi:"actions"`
	// The configuration for a waterfall visual.
	ChartConfiguration *TemplateWaterfallChartConfiguration `pulumi:"chartConfiguration"`
	// The column hierarchy that is used during drill-downs and drill-ups.
	ColumnHierarchies []TemplateColumnHierarchy `pulumi:"columnHierarchies"`
	// The subtitle that is displayed on the visual.
	Subtitle *TemplateVisualSubtitleLabelOptions `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title *TemplateVisualTitleLabelOptions `pulumi:"title"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
	VisualId string `pulumi:"visualId"`
}

// TemplateWaterfallVisualInput is an input type that accepts TemplateWaterfallVisualArgs and TemplateWaterfallVisualOutput values.
// You can construct a concrete instance of `TemplateWaterfallVisualInput` via:
//
//	TemplateWaterfallVisualArgs{...}
type TemplateWaterfallVisualInput interface {
	pulumi.Input

	ToTemplateWaterfallVisualOutput() TemplateWaterfallVisualOutput
	ToTemplateWaterfallVisualOutputWithContext(context.Context) TemplateWaterfallVisualOutput
}

type TemplateWaterfallVisualArgs struct {
	// The list of custom actions that are configured for a visual.
	Actions TemplateVisualCustomActionArrayInput `pulumi:"actions"`
	// The configuration for a waterfall visual.
	ChartConfiguration TemplateWaterfallChartConfigurationPtrInput `pulumi:"chartConfiguration"`
	// The column hierarchy that is used during drill-downs and drill-ups.
	ColumnHierarchies TemplateColumnHierarchyArrayInput `pulumi:"columnHierarchies"`
	// The subtitle that is displayed on the visual.
	Subtitle TemplateVisualSubtitleLabelOptionsPtrInput `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title TemplateVisualTitleLabelOptionsPtrInput `pulumi:"title"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
	VisualId pulumi.StringInput `pulumi:"visualId"`
}

func (TemplateWaterfallVisualArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWaterfallVisual)(nil)).Elem()
}

func (i TemplateWaterfallVisualArgs) ToTemplateWaterfallVisualOutput() TemplateWaterfallVisualOutput {
	return i.ToTemplateWaterfallVisualOutputWithContext(context.Background())
}

func (i TemplateWaterfallVisualArgs) ToTemplateWaterfallVisualOutputWithContext(ctx context.Context) TemplateWaterfallVisualOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWaterfallVisualOutput)
}

func (i TemplateWaterfallVisualArgs) ToTemplateWaterfallVisualPtrOutput() TemplateWaterfallVisualPtrOutput {
	return i.ToTemplateWaterfallVisualPtrOutputWithContext(context.Background())
}

func (i TemplateWaterfallVisualArgs) ToTemplateWaterfallVisualPtrOutputWithContext(ctx context.Context) TemplateWaterfallVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWaterfallVisualOutput).ToTemplateWaterfallVisualPtrOutputWithContext(ctx)
}

// TemplateWaterfallVisualPtrInput is an input type that accepts TemplateWaterfallVisualArgs, TemplateWaterfallVisualPtr and TemplateWaterfallVisualPtrOutput values.
// You can construct a concrete instance of `TemplateWaterfallVisualPtrInput` via:
//
//	        TemplateWaterfallVisualArgs{...}
//
//	or:
//
//	        nil
type TemplateWaterfallVisualPtrInput interface {
	pulumi.Input

	ToTemplateWaterfallVisualPtrOutput() TemplateWaterfallVisualPtrOutput
	ToTemplateWaterfallVisualPtrOutputWithContext(context.Context) TemplateWaterfallVisualPtrOutput
}

type templateWaterfallVisualPtrType TemplateWaterfallVisualArgs

func TemplateWaterfallVisualPtr(v *TemplateWaterfallVisualArgs) TemplateWaterfallVisualPtrInput {
	return (*templateWaterfallVisualPtrType)(v)
}

func (*templateWaterfallVisualPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWaterfallVisual)(nil)).Elem()
}

func (i *templateWaterfallVisualPtrType) ToTemplateWaterfallVisualPtrOutput() TemplateWaterfallVisualPtrOutput {
	return i.ToTemplateWaterfallVisualPtrOutputWithContext(context.Background())
}

func (i *templateWaterfallVisualPtrType) ToTemplateWaterfallVisualPtrOutputWithContext(ctx context.Context) TemplateWaterfallVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWaterfallVisualPtrOutput)
}

type TemplateWaterfallVisualOutput struct{ *pulumi.OutputState }

func (TemplateWaterfallVisualOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWaterfallVisual)(nil)).Elem()
}

func (o TemplateWaterfallVisualOutput) ToTemplateWaterfallVisualOutput() TemplateWaterfallVisualOutput {
	return o
}

func (o TemplateWaterfallVisualOutput) ToTemplateWaterfallVisualOutputWithContext(ctx context.Context) TemplateWaterfallVisualOutput {
	return o
}

func (o TemplateWaterfallVisualOutput) ToTemplateWaterfallVisualPtrOutput() TemplateWaterfallVisualPtrOutput {
	return o.ToTemplateWaterfallVisualPtrOutputWithContext(context.Background())
}

func (o TemplateWaterfallVisualOutput) ToTemplateWaterfallVisualPtrOutputWithContext(ctx context.Context) TemplateWaterfallVisualPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateWaterfallVisual) *TemplateWaterfallVisual {
		return &v
	}).(TemplateWaterfallVisualPtrOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplateWaterfallVisualOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v TemplateWaterfallVisual) []TemplateVisualCustomAction { return v.Actions }).(TemplateVisualCustomActionArrayOutput)
}

// The configuration for a waterfall visual.
func (o TemplateWaterfallVisualOutput) ChartConfiguration() TemplateWaterfallChartConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateWaterfallVisual) *TemplateWaterfallChartConfiguration { return v.ChartConfiguration }).(TemplateWaterfallChartConfigurationPtrOutput)
}

// The column hierarchy that is used during drill-downs and drill-ups.
func (o TemplateWaterfallVisualOutput) ColumnHierarchies() TemplateColumnHierarchyArrayOutput {
	return o.ApplyT(func(v TemplateWaterfallVisual) []TemplateColumnHierarchy { return v.ColumnHierarchies }).(TemplateColumnHierarchyArrayOutput)
}

// The subtitle that is displayed on the visual.
func (o TemplateWaterfallVisualOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateWaterfallVisual) *TemplateVisualSubtitleLabelOptions { return v.Subtitle }).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o TemplateWaterfallVisualOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateWaterfallVisual) *TemplateVisualTitleLabelOptions { return v.Title }).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
func (o TemplateWaterfallVisualOutput) VisualId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateWaterfallVisual) string { return v.VisualId }).(pulumi.StringOutput)
}

type TemplateWaterfallVisualPtrOutput struct{ *pulumi.OutputState }

func (TemplateWaterfallVisualPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWaterfallVisual)(nil)).Elem()
}

func (o TemplateWaterfallVisualPtrOutput) ToTemplateWaterfallVisualPtrOutput() TemplateWaterfallVisualPtrOutput {
	return o
}

func (o TemplateWaterfallVisualPtrOutput) ToTemplateWaterfallVisualPtrOutputWithContext(ctx context.Context) TemplateWaterfallVisualPtrOutput {
	return o
}

func (o TemplateWaterfallVisualPtrOutput) Elem() TemplateWaterfallVisualOutput {
	return o.ApplyT(func(v *TemplateWaterfallVisual) TemplateWaterfallVisual {
		if v != nil {
			return *v
		}
		var ret TemplateWaterfallVisual
		return ret
	}).(TemplateWaterfallVisualOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplateWaterfallVisualPtrOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v *TemplateWaterfallVisual) []TemplateVisualCustomAction {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(TemplateVisualCustomActionArrayOutput)
}

// The configuration for a waterfall visual.
func (o TemplateWaterfallVisualPtrOutput) ChartConfiguration() TemplateWaterfallChartConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateWaterfallVisual) *TemplateWaterfallChartConfiguration {
		if v == nil {
			return nil
		}
		return v.ChartConfiguration
	}).(TemplateWaterfallChartConfigurationPtrOutput)
}

// The column hierarchy that is used during drill-downs and drill-ups.
func (o TemplateWaterfallVisualPtrOutput) ColumnHierarchies() TemplateColumnHierarchyArrayOutput {
	return o.ApplyT(func(v *TemplateWaterfallVisual) []TemplateColumnHierarchy {
		if v == nil {
			return nil
		}
		return v.ColumnHierarchies
	}).(TemplateColumnHierarchyArrayOutput)
}

// The subtitle that is displayed on the visual.
func (o TemplateWaterfallVisualPtrOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateWaterfallVisual) *TemplateVisualSubtitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Subtitle
	}).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o TemplateWaterfallVisualPtrOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateWaterfallVisual) *TemplateVisualTitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Title
	}).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
func (o TemplateWaterfallVisualPtrOutput) VisualId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateWaterfallVisual) *string {
		if v == nil {
			return nil
		}
		return &v.VisualId
	}).(pulumi.StringPtrOutput)
}

type TemplateWhatIfPointScenario struct {
	// The date that you need the forecast results for.
	Date string `pulumi:"date"`
	// The target value that you want to meet for the provided date.
	Value float64 `pulumi:"value"`
}

// TemplateWhatIfPointScenarioInput is an input type that accepts TemplateWhatIfPointScenarioArgs and TemplateWhatIfPointScenarioOutput values.
// You can construct a concrete instance of `TemplateWhatIfPointScenarioInput` via:
//
//	TemplateWhatIfPointScenarioArgs{...}
type TemplateWhatIfPointScenarioInput interface {
	pulumi.Input

	ToTemplateWhatIfPointScenarioOutput() TemplateWhatIfPointScenarioOutput
	ToTemplateWhatIfPointScenarioOutputWithContext(context.Context) TemplateWhatIfPointScenarioOutput
}

type TemplateWhatIfPointScenarioArgs struct {
	// The date that you need the forecast results for.
	Date pulumi.StringInput `pulumi:"date"`
	// The target value that you want to meet for the provided date.
	Value pulumi.Float64Input `pulumi:"value"`
}

func (TemplateWhatIfPointScenarioArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWhatIfPointScenario)(nil)).Elem()
}

func (i TemplateWhatIfPointScenarioArgs) ToTemplateWhatIfPointScenarioOutput() TemplateWhatIfPointScenarioOutput {
	return i.ToTemplateWhatIfPointScenarioOutputWithContext(context.Background())
}

func (i TemplateWhatIfPointScenarioArgs) ToTemplateWhatIfPointScenarioOutputWithContext(ctx context.Context) TemplateWhatIfPointScenarioOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWhatIfPointScenarioOutput)
}

func (i TemplateWhatIfPointScenarioArgs) ToTemplateWhatIfPointScenarioPtrOutput() TemplateWhatIfPointScenarioPtrOutput {
	return i.ToTemplateWhatIfPointScenarioPtrOutputWithContext(context.Background())
}

func (i TemplateWhatIfPointScenarioArgs) ToTemplateWhatIfPointScenarioPtrOutputWithContext(ctx context.Context) TemplateWhatIfPointScenarioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWhatIfPointScenarioOutput).ToTemplateWhatIfPointScenarioPtrOutputWithContext(ctx)
}

// TemplateWhatIfPointScenarioPtrInput is an input type that accepts TemplateWhatIfPointScenarioArgs, TemplateWhatIfPointScenarioPtr and TemplateWhatIfPointScenarioPtrOutput values.
// You can construct a concrete instance of `TemplateWhatIfPointScenarioPtrInput` via:
//
//	        TemplateWhatIfPointScenarioArgs{...}
//
//	or:
//
//	        nil
type TemplateWhatIfPointScenarioPtrInput interface {
	pulumi.Input

	ToTemplateWhatIfPointScenarioPtrOutput() TemplateWhatIfPointScenarioPtrOutput
	ToTemplateWhatIfPointScenarioPtrOutputWithContext(context.Context) TemplateWhatIfPointScenarioPtrOutput
}

type templateWhatIfPointScenarioPtrType TemplateWhatIfPointScenarioArgs

func TemplateWhatIfPointScenarioPtr(v *TemplateWhatIfPointScenarioArgs) TemplateWhatIfPointScenarioPtrInput {
	return (*templateWhatIfPointScenarioPtrType)(v)
}

func (*templateWhatIfPointScenarioPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWhatIfPointScenario)(nil)).Elem()
}

func (i *templateWhatIfPointScenarioPtrType) ToTemplateWhatIfPointScenarioPtrOutput() TemplateWhatIfPointScenarioPtrOutput {
	return i.ToTemplateWhatIfPointScenarioPtrOutputWithContext(context.Background())
}

func (i *templateWhatIfPointScenarioPtrType) ToTemplateWhatIfPointScenarioPtrOutputWithContext(ctx context.Context) TemplateWhatIfPointScenarioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWhatIfPointScenarioPtrOutput)
}

type TemplateWhatIfPointScenarioOutput struct{ *pulumi.OutputState }

func (TemplateWhatIfPointScenarioOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWhatIfPointScenario)(nil)).Elem()
}

func (o TemplateWhatIfPointScenarioOutput) ToTemplateWhatIfPointScenarioOutput() TemplateWhatIfPointScenarioOutput {
	return o
}

func (o TemplateWhatIfPointScenarioOutput) ToTemplateWhatIfPointScenarioOutputWithContext(ctx context.Context) TemplateWhatIfPointScenarioOutput {
	return o
}

func (o TemplateWhatIfPointScenarioOutput) ToTemplateWhatIfPointScenarioPtrOutput() TemplateWhatIfPointScenarioPtrOutput {
	return o.ToTemplateWhatIfPointScenarioPtrOutputWithContext(context.Background())
}

func (o TemplateWhatIfPointScenarioOutput) ToTemplateWhatIfPointScenarioPtrOutputWithContext(ctx context.Context) TemplateWhatIfPointScenarioPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateWhatIfPointScenario) *TemplateWhatIfPointScenario {
		return &v
	}).(TemplateWhatIfPointScenarioPtrOutput)
}

// The date that you need the forecast results for.
func (o TemplateWhatIfPointScenarioOutput) Date() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateWhatIfPointScenario) string { return v.Date }).(pulumi.StringOutput)
}

// The target value that you want to meet for the provided date.
func (o TemplateWhatIfPointScenarioOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v TemplateWhatIfPointScenario) float64 { return v.Value }).(pulumi.Float64Output)
}

type TemplateWhatIfPointScenarioPtrOutput struct{ *pulumi.OutputState }

func (TemplateWhatIfPointScenarioPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWhatIfPointScenario)(nil)).Elem()
}

func (o TemplateWhatIfPointScenarioPtrOutput) ToTemplateWhatIfPointScenarioPtrOutput() TemplateWhatIfPointScenarioPtrOutput {
	return o
}

func (o TemplateWhatIfPointScenarioPtrOutput) ToTemplateWhatIfPointScenarioPtrOutputWithContext(ctx context.Context) TemplateWhatIfPointScenarioPtrOutput {
	return o
}

func (o TemplateWhatIfPointScenarioPtrOutput) Elem() TemplateWhatIfPointScenarioOutput {
	return o.ApplyT(func(v *TemplateWhatIfPointScenario) TemplateWhatIfPointScenario {
		if v != nil {
			return *v
		}
		var ret TemplateWhatIfPointScenario
		return ret
	}).(TemplateWhatIfPointScenarioOutput)
}

// The date that you need the forecast results for.
func (o TemplateWhatIfPointScenarioPtrOutput) Date() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateWhatIfPointScenario) *string {
		if v == nil {
			return nil
		}
		return &v.Date
	}).(pulumi.StringPtrOutput)
}

// The target value that you want to meet for the provided date.
func (o TemplateWhatIfPointScenarioPtrOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateWhatIfPointScenario) *float64 {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.Float64PtrOutput)
}

type TemplateWhatIfRangeScenario struct {
	// The end date in the date range that you need the forecast results for.
	EndDate string `pulumi:"endDate"`
	// The start date in the date range that you need the forecast results for.
	StartDate string `pulumi:"startDate"`
	// The target value that you want to meet for the provided date range.
	Value float64 `pulumi:"value"`
}

// TemplateWhatIfRangeScenarioInput is an input type that accepts TemplateWhatIfRangeScenarioArgs and TemplateWhatIfRangeScenarioOutput values.
// You can construct a concrete instance of `TemplateWhatIfRangeScenarioInput` via:
//
//	TemplateWhatIfRangeScenarioArgs{...}
type TemplateWhatIfRangeScenarioInput interface {
	pulumi.Input

	ToTemplateWhatIfRangeScenarioOutput() TemplateWhatIfRangeScenarioOutput
	ToTemplateWhatIfRangeScenarioOutputWithContext(context.Context) TemplateWhatIfRangeScenarioOutput
}

type TemplateWhatIfRangeScenarioArgs struct {
	// The end date in the date range that you need the forecast results for.
	EndDate pulumi.StringInput `pulumi:"endDate"`
	// The start date in the date range that you need the forecast results for.
	StartDate pulumi.StringInput `pulumi:"startDate"`
	// The target value that you want to meet for the provided date range.
	Value pulumi.Float64Input `pulumi:"value"`
}

func (TemplateWhatIfRangeScenarioArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWhatIfRangeScenario)(nil)).Elem()
}

func (i TemplateWhatIfRangeScenarioArgs) ToTemplateWhatIfRangeScenarioOutput() TemplateWhatIfRangeScenarioOutput {
	return i.ToTemplateWhatIfRangeScenarioOutputWithContext(context.Background())
}

func (i TemplateWhatIfRangeScenarioArgs) ToTemplateWhatIfRangeScenarioOutputWithContext(ctx context.Context) TemplateWhatIfRangeScenarioOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWhatIfRangeScenarioOutput)
}

func (i TemplateWhatIfRangeScenarioArgs) ToTemplateWhatIfRangeScenarioPtrOutput() TemplateWhatIfRangeScenarioPtrOutput {
	return i.ToTemplateWhatIfRangeScenarioPtrOutputWithContext(context.Background())
}

func (i TemplateWhatIfRangeScenarioArgs) ToTemplateWhatIfRangeScenarioPtrOutputWithContext(ctx context.Context) TemplateWhatIfRangeScenarioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWhatIfRangeScenarioOutput).ToTemplateWhatIfRangeScenarioPtrOutputWithContext(ctx)
}

// TemplateWhatIfRangeScenarioPtrInput is an input type that accepts TemplateWhatIfRangeScenarioArgs, TemplateWhatIfRangeScenarioPtr and TemplateWhatIfRangeScenarioPtrOutput values.
// You can construct a concrete instance of `TemplateWhatIfRangeScenarioPtrInput` via:
//
//	        TemplateWhatIfRangeScenarioArgs{...}
//
//	or:
//
//	        nil
type TemplateWhatIfRangeScenarioPtrInput interface {
	pulumi.Input

	ToTemplateWhatIfRangeScenarioPtrOutput() TemplateWhatIfRangeScenarioPtrOutput
	ToTemplateWhatIfRangeScenarioPtrOutputWithContext(context.Context) TemplateWhatIfRangeScenarioPtrOutput
}

type templateWhatIfRangeScenarioPtrType TemplateWhatIfRangeScenarioArgs

func TemplateWhatIfRangeScenarioPtr(v *TemplateWhatIfRangeScenarioArgs) TemplateWhatIfRangeScenarioPtrInput {
	return (*templateWhatIfRangeScenarioPtrType)(v)
}

func (*templateWhatIfRangeScenarioPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWhatIfRangeScenario)(nil)).Elem()
}

func (i *templateWhatIfRangeScenarioPtrType) ToTemplateWhatIfRangeScenarioPtrOutput() TemplateWhatIfRangeScenarioPtrOutput {
	return i.ToTemplateWhatIfRangeScenarioPtrOutputWithContext(context.Background())
}

func (i *templateWhatIfRangeScenarioPtrType) ToTemplateWhatIfRangeScenarioPtrOutputWithContext(ctx context.Context) TemplateWhatIfRangeScenarioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWhatIfRangeScenarioPtrOutput)
}

type TemplateWhatIfRangeScenarioOutput struct{ *pulumi.OutputState }

func (TemplateWhatIfRangeScenarioOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWhatIfRangeScenario)(nil)).Elem()
}

func (o TemplateWhatIfRangeScenarioOutput) ToTemplateWhatIfRangeScenarioOutput() TemplateWhatIfRangeScenarioOutput {
	return o
}

func (o TemplateWhatIfRangeScenarioOutput) ToTemplateWhatIfRangeScenarioOutputWithContext(ctx context.Context) TemplateWhatIfRangeScenarioOutput {
	return o
}

func (o TemplateWhatIfRangeScenarioOutput) ToTemplateWhatIfRangeScenarioPtrOutput() TemplateWhatIfRangeScenarioPtrOutput {
	return o.ToTemplateWhatIfRangeScenarioPtrOutputWithContext(context.Background())
}

func (o TemplateWhatIfRangeScenarioOutput) ToTemplateWhatIfRangeScenarioPtrOutputWithContext(ctx context.Context) TemplateWhatIfRangeScenarioPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateWhatIfRangeScenario) *TemplateWhatIfRangeScenario {
		return &v
	}).(TemplateWhatIfRangeScenarioPtrOutput)
}

// The end date in the date range that you need the forecast results for.
func (o TemplateWhatIfRangeScenarioOutput) EndDate() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateWhatIfRangeScenario) string { return v.EndDate }).(pulumi.StringOutput)
}

// The start date in the date range that you need the forecast results for.
func (o TemplateWhatIfRangeScenarioOutput) StartDate() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateWhatIfRangeScenario) string { return v.StartDate }).(pulumi.StringOutput)
}

// The target value that you want to meet for the provided date range.
func (o TemplateWhatIfRangeScenarioOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v TemplateWhatIfRangeScenario) float64 { return v.Value }).(pulumi.Float64Output)
}

type TemplateWhatIfRangeScenarioPtrOutput struct{ *pulumi.OutputState }

func (TemplateWhatIfRangeScenarioPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWhatIfRangeScenario)(nil)).Elem()
}

func (o TemplateWhatIfRangeScenarioPtrOutput) ToTemplateWhatIfRangeScenarioPtrOutput() TemplateWhatIfRangeScenarioPtrOutput {
	return o
}

func (o TemplateWhatIfRangeScenarioPtrOutput) ToTemplateWhatIfRangeScenarioPtrOutputWithContext(ctx context.Context) TemplateWhatIfRangeScenarioPtrOutput {
	return o
}

func (o TemplateWhatIfRangeScenarioPtrOutput) Elem() TemplateWhatIfRangeScenarioOutput {
	return o.ApplyT(func(v *TemplateWhatIfRangeScenario) TemplateWhatIfRangeScenario {
		if v != nil {
			return *v
		}
		var ret TemplateWhatIfRangeScenario
		return ret
	}).(TemplateWhatIfRangeScenarioOutput)
}

// The end date in the date range that you need the forecast results for.
func (o TemplateWhatIfRangeScenarioPtrOutput) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateWhatIfRangeScenario) *string {
		if v == nil {
			return nil
		}
		return &v.EndDate
	}).(pulumi.StringPtrOutput)
}

// The start date in the date range that you need the forecast results for.
func (o TemplateWhatIfRangeScenarioPtrOutput) StartDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateWhatIfRangeScenario) *string {
		if v == nil {
			return nil
		}
		return &v.StartDate
	}).(pulumi.StringPtrOutput)
}

// The target value that you want to meet for the provided date range.
func (o TemplateWhatIfRangeScenarioPtrOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateWhatIfRangeScenario) *float64 {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.Float64PtrOutput)
}

type TemplateWordCloudAggregatedFieldWells struct {
	// The group by field well of a word cloud. Values are grouped by group by fields.
	GroupBy []TemplateDimensionField `pulumi:"groupBy"`
	// The size field well of a word cloud. Values are aggregated based on group by fields.
	Size []TemplateMeasureField `pulumi:"size"`
}

// TemplateWordCloudAggregatedFieldWellsInput is an input type that accepts TemplateWordCloudAggregatedFieldWellsArgs and TemplateWordCloudAggregatedFieldWellsOutput values.
// You can construct a concrete instance of `TemplateWordCloudAggregatedFieldWellsInput` via:
//
//	TemplateWordCloudAggregatedFieldWellsArgs{...}
type TemplateWordCloudAggregatedFieldWellsInput interface {
	pulumi.Input

	ToTemplateWordCloudAggregatedFieldWellsOutput() TemplateWordCloudAggregatedFieldWellsOutput
	ToTemplateWordCloudAggregatedFieldWellsOutputWithContext(context.Context) TemplateWordCloudAggregatedFieldWellsOutput
}

type TemplateWordCloudAggregatedFieldWellsArgs struct {
	// The group by field well of a word cloud. Values are grouped by group by fields.
	GroupBy TemplateDimensionFieldArrayInput `pulumi:"groupBy"`
	// The size field well of a word cloud. Values are aggregated based on group by fields.
	Size TemplateMeasureFieldArrayInput `pulumi:"size"`
}

func (TemplateWordCloudAggregatedFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWordCloudAggregatedFieldWells)(nil)).Elem()
}

func (i TemplateWordCloudAggregatedFieldWellsArgs) ToTemplateWordCloudAggregatedFieldWellsOutput() TemplateWordCloudAggregatedFieldWellsOutput {
	return i.ToTemplateWordCloudAggregatedFieldWellsOutputWithContext(context.Background())
}

func (i TemplateWordCloudAggregatedFieldWellsArgs) ToTemplateWordCloudAggregatedFieldWellsOutputWithContext(ctx context.Context) TemplateWordCloudAggregatedFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWordCloudAggregatedFieldWellsOutput)
}

func (i TemplateWordCloudAggregatedFieldWellsArgs) ToTemplateWordCloudAggregatedFieldWellsPtrOutput() TemplateWordCloudAggregatedFieldWellsPtrOutput {
	return i.ToTemplateWordCloudAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i TemplateWordCloudAggregatedFieldWellsArgs) ToTemplateWordCloudAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateWordCloudAggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWordCloudAggregatedFieldWellsOutput).ToTemplateWordCloudAggregatedFieldWellsPtrOutputWithContext(ctx)
}

// TemplateWordCloudAggregatedFieldWellsPtrInput is an input type that accepts TemplateWordCloudAggregatedFieldWellsArgs, TemplateWordCloudAggregatedFieldWellsPtr and TemplateWordCloudAggregatedFieldWellsPtrOutput values.
// You can construct a concrete instance of `TemplateWordCloudAggregatedFieldWellsPtrInput` via:
//
//	        TemplateWordCloudAggregatedFieldWellsArgs{...}
//
//	or:
//
//	        nil
type TemplateWordCloudAggregatedFieldWellsPtrInput interface {
	pulumi.Input

	ToTemplateWordCloudAggregatedFieldWellsPtrOutput() TemplateWordCloudAggregatedFieldWellsPtrOutput
	ToTemplateWordCloudAggregatedFieldWellsPtrOutputWithContext(context.Context) TemplateWordCloudAggregatedFieldWellsPtrOutput
}

type templateWordCloudAggregatedFieldWellsPtrType TemplateWordCloudAggregatedFieldWellsArgs

func TemplateWordCloudAggregatedFieldWellsPtr(v *TemplateWordCloudAggregatedFieldWellsArgs) TemplateWordCloudAggregatedFieldWellsPtrInput {
	return (*templateWordCloudAggregatedFieldWellsPtrType)(v)
}

func (*templateWordCloudAggregatedFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWordCloudAggregatedFieldWells)(nil)).Elem()
}

func (i *templateWordCloudAggregatedFieldWellsPtrType) ToTemplateWordCloudAggregatedFieldWellsPtrOutput() TemplateWordCloudAggregatedFieldWellsPtrOutput {
	return i.ToTemplateWordCloudAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (i *templateWordCloudAggregatedFieldWellsPtrType) ToTemplateWordCloudAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateWordCloudAggregatedFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWordCloudAggregatedFieldWellsPtrOutput)
}

type TemplateWordCloudAggregatedFieldWellsOutput struct{ *pulumi.OutputState }

func (TemplateWordCloudAggregatedFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWordCloudAggregatedFieldWells)(nil)).Elem()
}

func (o TemplateWordCloudAggregatedFieldWellsOutput) ToTemplateWordCloudAggregatedFieldWellsOutput() TemplateWordCloudAggregatedFieldWellsOutput {
	return o
}

func (o TemplateWordCloudAggregatedFieldWellsOutput) ToTemplateWordCloudAggregatedFieldWellsOutputWithContext(ctx context.Context) TemplateWordCloudAggregatedFieldWellsOutput {
	return o
}

func (o TemplateWordCloudAggregatedFieldWellsOutput) ToTemplateWordCloudAggregatedFieldWellsPtrOutput() TemplateWordCloudAggregatedFieldWellsPtrOutput {
	return o.ToTemplateWordCloudAggregatedFieldWellsPtrOutputWithContext(context.Background())
}

func (o TemplateWordCloudAggregatedFieldWellsOutput) ToTemplateWordCloudAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateWordCloudAggregatedFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateWordCloudAggregatedFieldWells) *TemplateWordCloudAggregatedFieldWells {
		return &v
	}).(TemplateWordCloudAggregatedFieldWellsPtrOutput)
}

// The group by field well of a word cloud. Values are grouped by group by fields.
func (o TemplateWordCloudAggregatedFieldWellsOutput) GroupBy() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v TemplateWordCloudAggregatedFieldWells) []TemplateDimensionField { return v.GroupBy }).(TemplateDimensionFieldArrayOutput)
}

// The size field well of a word cloud. Values are aggregated based on group by fields.
func (o TemplateWordCloudAggregatedFieldWellsOutput) Size() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v TemplateWordCloudAggregatedFieldWells) []TemplateMeasureField { return v.Size }).(TemplateMeasureFieldArrayOutput)
}

type TemplateWordCloudAggregatedFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (TemplateWordCloudAggregatedFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWordCloudAggregatedFieldWells)(nil)).Elem()
}

func (o TemplateWordCloudAggregatedFieldWellsPtrOutput) ToTemplateWordCloudAggregatedFieldWellsPtrOutput() TemplateWordCloudAggregatedFieldWellsPtrOutput {
	return o
}

func (o TemplateWordCloudAggregatedFieldWellsPtrOutput) ToTemplateWordCloudAggregatedFieldWellsPtrOutputWithContext(ctx context.Context) TemplateWordCloudAggregatedFieldWellsPtrOutput {
	return o
}

func (o TemplateWordCloudAggregatedFieldWellsPtrOutput) Elem() TemplateWordCloudAggregatedFieldWellsOutput {
	return o.ApplyT(func(v *TemplateWordCloudAggregatedFieldWells) TemplateWordCloudAggregatedFieldWells {
		if v != nil {
			return *v
		}
		var ret TemplateWordCloudAggregatedFieldWells
		return ret
	}).(TemplateWordCloudAggregatedFieldWellsOutput)
}

// The group by field well of a word cloud. Values are grouped by group by fields.
func (o TemplateWordCloudAggregatedFieldWellsPtrOutput) GroupBy() TemplateDimensionFieldArrayOutput {
	return o.ApplyT(func(v *TemplateWordCloudAggregatedFieldWells) []TemplateDimensionField {
		if v == nil {
			return nil
		}
		return v.GroupBy
	}).(TemplateDimensionFieldArrayOutput)
}

// The size field well of a word cloud. Values are aggregated based on group by fields.
func (o TemplateWordCloudAggregatedFieldWellsPtrOutput) Size() TemplateMeasureFieldArrayOutput {
	return o.ApplyT(func(v *TemplateWordCloudAggregatedFieldWells) []TemplateMeasureField {
		if v == nil {
			return nil
		}
		return v.Size
	}).(TemplateMeasureFieldArrayOutput)
}

type TemplateWordCloudChartConfiguration struct {
	// The label options (label text, label visibility, and sort icon visibility) for the word cloud category.
	CategoryLabelOptions *TemplateChartAxisLabelOptions `pulumi:"categoryLabelOptions"`
	// The field wells of the visual.
	FieldWells *TemplateWordCloudFieldWells `pulumi:"fieldWells"`
	// The sort configuration of a word cloud visual.
	SortConfiguration *TemplateWordCloudSortConfiguration `pulumi:"sortConfiguration"`
	// The options for a word cloud visual.
	WordCloudOptions *TemplateWordCloudOptions `pulumi:"wordCloudOptions"`
}

// TemplateWordCloudChartConfigurationInput is an input type that accepts TemplateWordCloudChartConfigurationArgs and TemplateWordCloudChartConfigurationOutput values.
// You can construct a concrete instance of `TemplateWordCloudChartConfigurationInput` via:
//
//	TemplateWordCloudChartConfigurationArgs{...}
type TemplateWordCloudChartConfigurationInput interface {
	pulumi.Input

	ToTemplateWordCloudChartConfigurationOutput() TemplateWordCloudChartConfigurationOutput
	ToTemplateWordCloudChartConfigurationOutputWithContext(context.Context) TemplateWordCloudChartConfigurationOutput
}

type TemplateWordCloudChartConfigurationArgs struct {
	// The label options (label text, label visibility, and sort icon visibility) for the word cloud category.
	CategoryLabelOptions TemplateChartAxisLabelOptionsPtrInput `pulumi:"categoryLabelOptions"`
	// The field wells of the visual.
	FieldWells TemplateWordCloudFieldWellsPtrInput `pulumi:"fieldWells"`
	// The sort configuration of a word cloud visual.
	SortConfiguration TemplateWordCloudSortConfigurationPtrInput `pulumi:"sortConfiguration"`
	// The options for a word cloud visual.
	WordCloudOptions TemplateWordCloudOptionsPtrInput `pulumi:"wordCloudOptions"`
}

func (TemplateWordCloudChartConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWordCloudChartConfiguration)(nil)).Elem()
}

func (i TemplateWordCloudChartConfigurationArgs) ToTemplateWordCloudChartConfigurationOutput() TemplateWordCloudChartConfigurationOutput {
	return i.ToTemplateWordCloudChartConfigurationOutputWithContext(context.Background())
}

func (i TemplateWordCloudChartConfigurationArgs) ToTemplateWordCloudChartConfigurationOutputWithContext(ctx context.Context) TemplateWordCloudChartConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWordCloudChartConfigurationOutput)
}

func (i TemplateWordCloudChartConfigurationArgs) ToTemplateWordCloudChartConfigurationPtrOutput() TemplateWordCloudChartConfigurationPtrOutput {
	return i.ToTemplateWordCloudChartConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateWordCloudChartConfigurationArgs) ToTemplateWordCloudChartConfigurationPtrOutputWithContext(ctx context.Context) TemplateWordCloudChartConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWordCloudChartConfigurationOutput).ToTemplateWordCloudChartConfigurationPtrOutputWithContext(ctx)
}

// TemplateWordCloudChartConfigurationPtrInput is an input type that accepts TemplateWordCloudChartConfigurationArgs, TemplateWordCloudChartConfigurationPtr and TemplateWordCloudChartConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateWordCloudChartConfigurationPtrInput` via:
//
//	        TemplateWordCloudChartConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateWordCloudChartConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateWordCloudChartConfigurationPtrOutput() TemplateWordCloudChartConfigurationPtrOutput
	ToTemplateWordCloudChartConfigurationPtrOutputWithContext(context.Context) TemplateWordCloudChartConfigurationPtrOutput
}

type templateWordCloudChartConfigurationPtrType TemplateWordCloudChartConfigurationArgs

func TemplateWordCloudChartConfigurationPtr(v *TemplateWordCloudChartConfigurationArgs) TemplateWordCloudChartConfigurationPtrInput {
	return (*templateWordCloudChartConfigurationPtrType)(v)
}

func (*templateWordCloudChartConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWordCloudChartConfiguration)(nil)).Elem()
}

func (i *templateWordCloudChartConfigurationPtrType) ToTemplateWordCloudChartConfigurationPtrOutput() TemplateWordCloudChartConfigurationPtrOutput {
	return i.ToTemplateWordCloudChartConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateWordCloudChartConfigurationPtrType) ToTemplateWordCloudChartConfigurationPtrOutputWithContext(ctx context.Context) TemplateWordCloudChartConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWordCloudChartConfigurationPtrOutput)
}

type TemplateWordCloudChartConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateWordCloudChartConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWordCloudChartConfiguration)(nil)).Elem()
}

func (o TemplateWordCloudChartConfigurationOutput) ToTemplateWordCloudChartConfigurationOutput() TemplateWordCloudChartConfigurationOutput {
	return o
}

func (o TemplateWordCloudChartConfigurationOutput) ToTemplateWordCloudChartConfigurationOutputWithContext(ctx context.Context) TemplateWordCloudChartConfigurationOutput {
	return o
}

func (o TemplateWordCloudChartConfigurationOutput) ToTemplateWordCloudChartConfigurationPtrOutput() TemplateWordCloudChartConfigurationPtrOutput {
	return o.ToTemplateWordCloudChartConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateWordCloudChartConfigurationOutput) ToTemplateWordCloudChartConfigurationPtrOutputWithContext(ctx context.Context) TemplateWordCloudChartConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateWordCloudChartConfiguration) *TemplateWordCloudChartConfiguration {
		return &v
	}).(TemplateWordCloudChartConfigurationPtrOutput)
}

// The label options (label text, label visibility, and sort icon visibility) for the word cloud category.
func (o TemplateWordCloudChartConfigurationOutput) CategoryLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateWordCloudChartConfiguration) *TemplateChartAxisLabelOptions {
		return v.CategoryLabelOptions
	}).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The field wells of the visual.
func (o TemplateWordCloudChartConfigurationOutput) FieldWells() TemplateWordCloudFieldWellsPtrOutput {
	return o.ApplyT(func(v TemplateWordCloudChartConfiguration) *TemplateWordCloudFieldWells { return v.FieldWells }).(TemplateWordCloudFieldWellsPtrOutput)
}

// The sort configuration of a word cloud visual.
func (o TemplateWordCloudChartConfigurationOutput) SortConfiguration() TemplateWordCloudSortConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateWordCloudChartConfiguration) *TemplateWordCloudSortConfiguration {
		return v.SortConfiguration
	}).(TemplateWordCloudSortConfigurationPtrOutput)
}

// The options for a word cloud visual.
func (o TemplateWordCloudChartConfigurationOutput) WordCloudOptions() TemplateWordCloudOptionsPtrOutput {
	return o.ApplyT(func(v TemplateWordCloudChartConfiguration) *TemplateWordCloudOptions { return v.WordCloudOptions }).(TemplateWordCloudOptionsPtrOutput)
}

type TemplateWordCloudChartConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateWordCloudChartConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWordCloudChartConfiguration)(nil)).Elem()
}

func (o TemplateWordCloudChartConfigurationPtrOutput) ToTemplateWordCloudChartConfigurationPtrOutput() TemplateWordCloudChartConfigurationPtrOutput {
	return o
}

func (o TemplateWordCloudChartConfigurationPtrOutput) ToTemplateWordCloudChartConfigurationPtrOutputWithContext(ctx context.Context) TemplateWordCloudChartConfigurationPtrOutput {
	return o
}

func (o TemplateWordCloudChartConfigurationPtrOutput) Elem() TemplateWordCloudChartConfigurationOutput {
	return o.ApplyT(func(v *TemplateWordCloudChartConfiguration) TemplateWordCloudChartConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateWordCloudChartConfiguration
		return ret
	}).(TemplateWordCloudChartConfigurationOutput)
}

// The label options (label text, label visibility, and sort icon visibility) for the word cloud category.
func (o TemplateWordCloudChartConfigurationPtrOutput) CategoryLabelOptions() TemplateChartAxisLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateWordCloudChartConfiguration) *TemplateChartAxisLabelOptions {
		if v == nil {
			return nil
		}
		return v.CategoryLabelOptions
	}).(TemplateChartAxisLabelOptionsPtrOutput)
}

// The field wells of the visual.
func (o TemplateWordCloudChartConfigurationPtrOutput) FieldWells() TemplateWordCloudFieldWellsPtrOutput {
	return o.ApplyT(func(v *TemplateWordCloudChartConfiguration) *TemplateWordCloudFieldWells {
		if v == nil {
			return nil
		}
		return v.FieldWells
	}).(TemplateWordCloudFieldWellsPtrOutput)
}

// The sort configuration of a word cloud visual.
func (o TemplateWordCloudChartConfigurationPtrOutput) SortConfiguration() TemplateWordCloudSortConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateWordCloudChartConfiguration) *TemplateWordCloudSortConfiguration {
		if v == nil {
			return nil
		}
		return v.SortConfiguration
	}).(TemplateWordCloudSortConfigurationPtrOutput)
}

// The options for a word cloud visual.
func (o TemplateWordCloudChartConfigurationPtrOutput) WordCloudOptions() TemplateWordCloudOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateWordCloudChartConfiguration) *TemplateWordCloudOptions {
		if v == nil {
			return nil
		}
		return v.WordCloudOptions
	}).(TemplateWordCloudOptionsPtrOutput)
}

type TemplateWordCloudFieldWells struct {
	// The aggregated field wells of a word cloud.
	WordCloudAggregatedFieldWells *TemplateWordCloudAggregatedFieldWells `pulumi:"wordCloudAggregatedFieldWells"`
}

// TemplateWordCloudFieldWellsInput is an input type that accepts TemplateWordCloudFieldWellsArgs and TemplateWordCloudFieldWellsOutput values.
// You can construct a concrete instance of `TemplateWordCloudFieldWellsInput` via:
//
//	TemplateWordCloudFieldWellsArgs{...}
type TemplateWordCloudFieldWellsInput interface {
	pulumi.Input

	ToTemplateWordCloudFieldWellsOutput() TemplateWordCloudFieldWellsOutput
	ToTemplateWordCloudFieldWellsOutputWithContext(context.Context) TemplateWordCloudFieldWellsOutput
}

type TemplateWordCloudFieldWellsArgs struct {
	// The aggregated field wells of a word cloud.
	WordCloudAggregatedFieldWells TemplateWordCloudAggregatedFieldWellsPtrInput `pulumi:"wordCloudAggregatedFieldWells"`
}

func (TemplateWordCloudFieldWellsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWordCloudFieldWells)(nil)).Elem()
}

func (i TemplateWordCloudFieldWellsArgs) ToTemplateWordCloudFieldWellsOutput() TemplateWordCloudFieldWellsOutput {
	return i.ToTemplateWordCloudFieldWellsOutputWithContext(context.Background())
}

func (i TemplateWordCloudFieldWellsArgs) ToTemplateWordCloudFieldWellsOutputWithContext(ctx context.Context) TemplateWordCloudFieldWellsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWordCloudFieldWellsOutput)
}

func (i TemplateWordCloudFieldWellsArgs) ToTemplateWordCloudFieldWellsPtrOutput() TemplateWordCloudFieldWellsPtrOutput {
	return i.ToTemplateWordCloudFieldWellsPtrOutputWithContext(context.Background())
}

func (i TemplateWordCloudFieldWellsArgs) ToTemplateWordCloudFieldWellsPtrOutputWithContext(ctx context.Context) TemplateWordCloudFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWordCloudFieldWellsOutput).ToTemplateWordCloudFieldWellsPtrOutputWithContext(ctx)
}

// TemplateWordCloudFieldWellsPtrInput is an input type that accepts TemplateWordCloudFieldWellsArgs, TemplateWordCloudFieldWellsPtr and TemplateWordCloudFieldWellsPtrOutput values.
// You can construct a concrete instance of `TemplateWordCloudFieldWellsPtrInput` via:
//
//	        TemplateWordCloudFieldWellsArgs{...}
//
//	or:
//
//	        nil
type TemplateWordCloudFieldWellsPtrInput interface {
	pulumi.Input

	ToTemplateWordCloudFieldWellsPtrOutput() TemplateWordCloudFieldWellsPtrOutput
	ToTemplateWordCloudFieldWellsPtrOutputWithContext(context.Context) TemplateWordCloudFieldWellsPtrOutput
}

type templateWordCloudFieldWellsPtrType TemplateWordCloudFieldWellsArgs

func TemplateWordCloudFieldWellsPtr(v *TemplateWordCloudFieldWellsArgs) TemplateWordCloudFieldWellsPtrInput {
	return (*templateWordCloudFieldWellsPtrType)(v)
}

func (*templateWordCloudFieldWellsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWordCloudFieldWells)(nil)).Elem()
}

func (i *templateWordCloudFieldWellsPtrType) ToTemplateWordCloudFieldWellsPtrOutput() TemplateWordCloudFieldWellsPtrOutput {
	return i.ToTemplateWordCloudFieldWellsPtrOutputWithContext(context.Background())
}

func (i *templateWordCloudFieldWellsPtrType) ToTemplateWordCloudFieldWellsPtrOutputWithContext(ctx context.Context) TemplateWordCloudFieldWellsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWordCloudFieldWellsPtrOutput)
}

type TemplateWordCloudFieldWellsOutput struct{ *pulumi.OutputState }

func (TemplateWordCloudFieldWellsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWordCloudFieldWells)(nil)).Elem()
}

func (o TemplateWordCloudFieldWellsOutput) ToTemplateWordCloudFieldWellsOutput() TemplateWordCloudFieldWellsOutput {
	return o
}

func (o TemplateWordCloudFieldWellsOutput) ToTemplateWordCloudFieldWellsOutputWithContext(ctx context.Context) TemplateWordCloudFieldWellsOutput {
	return o
}

func (o TemplateWordCloudFieldWellsOutput) ToTemplateWordCloudFieldWellsPtrOutput() TemplateWordCloudFieldWellsPtrOutput {
	return o.ToTemplateWordCloudFieldWellsPtrOutputWithContext(context.Background())
}

func (o TemplateWordCloudFieldWellsOutput) ToTemplateWordCloudFieldWellsPtrOutputWithContext(ctx context.Context) TemplateWordCloudFieldWellsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateWordCloudFieldWells) *TemplateWordCloudFieldWells {
		return &v
	}).(TemplateWordCloudFieldWellsPtrOutput)
}

// The aggregated field wells of a word cloud.
func (o TemplateWordCloudFieldWellsOutput) WordCloudAggregatedFieldWells() TemplateWordCloudAggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v TemplateWordCloudFieldWells) *TemplateWordCloudAggregatedFieldWells {
		return v.WordCloudAggregatedFieldWells
	}).(TemplateWordCloudAggregatedFieldWellsPtrOutput)
}

type TemplateWordCloudFieldWellsPtrOutput struct{ *pulumi.OutputState }

func (TemplateWordCloudFieldWellsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWordCloudFieldWells)(nil)).Elem()
}

func (o TemplateWordCloudFieldWellsPtrOutput) ToTemplateWordCloudFieldWellsPtrOutput() TemplateWordCloudFieldWellsPtrOutput {
	return o
}

func (o TemplateWordCloudFieldWellsPtrOutput) ToTemplateWordCloudFieldWellsPtrOutputWithContext(ctx context.Context) TemplateWordCloudFieldWellsPtrOutput {
	return o
}

func (o TemplateWordCloudFieldWellsPtrOutput) Elem() TemplateWordCloudFieldWellsOutput {
	return o.ApplyT(func(v *TemplateWordCloudFieldWells) TemplateWordCloudFieldWells {
		if v != nil {
			return *v
		}
		var ret TemplateWordCloudFieldWells
		return ret
	}).(TemplateWordCloudFieldWellsOutput)
}

// The aggregated field wells of a word cloud.
func (o TemplateWordCloudFieldWellsPtrOutput) WordCloudAggregatedFieldWells() TemplateWordCloudAggregatedFieldWellsPtrOutput {
	return o.ApplyT(func(v *TemplateWordCloudFieldWells) *TemplateWordCloudAggregatedFieldWells {
		if v == nil {
			return nil
		}
		return v.WordCloudAggregatedFieldWells
	}).(TemplateWordCloudAggregatedFieldWellsPtrOutput)
}

type TemplateWordCloudOptions struct {
	// The cloud layout options (fluid, normal) of a word cloud.
	CloudLayout *TemplateWordCloudCloudLayout `pulumi:"cloudLayout"`
	// The length limit of each word from 1-100.
	MaximumStringLength *float64 `pulumi:"maximumStringLength"`
	// The word casing options (lower_case, existing_case) for the words in a word cloud.
	WordCasing *TemplateWordCloudWordCasing `pulumi:"wordCasing"`
	// The word orientation options (horizontal, horizontal_and_vertical) for the words in a word cloud.
	WordOrientation *TemplateWordCloudWordOrientation `pulumi:"wordOrientation"`
	// The word padding options (none, small, medium, large) for the words in a word cloud.
	WordPadding *TemplateWordCloudWordPadding `pulumi:"wordPadding"`
	// The word scaling options (emphasize, normal) for the words in a word cloud.
	WordScaling *TemplateWordCloudWordScaling `pulumi:"wordScaling"`
}

// TemplateWordCloudOptionsInput is an input type that accepts TemplateWordCloudOptionsArgs and TemplateWordCloudOptionsOutput values.
// You can construct a concrete instance of `TemplateWordCloudOptionsInput` via:
//
//	TemplateWordCloudOptionsArgs{...}
type TemplateWordCloudOptionsInput interface {
	pulumi.Input

	ToTemplateWordCloudOptionsOutput() TemplateWordCloudOptionsOutput
	ToTemplateWordCloudOptionsOutputWithContext(context.Context) TemplateWordCloudOptionsOutput
}

type TemplateWordCloudOptionsArgs struct {
	// The cloud layout options (fluid, normal) of a word cloud.
	CloudLayout TemplateWordCloudCloudLayoutPtrInput `pulumi:"cloudLayout"`
	// The length limit of each word from 1-100.
	MaximumStringLength pulumi.Float64PtrInput `pulumi:"maximumStringLength"`
	// The word casing options (lower_case, existing_case) for the words in a word cloud.
	WordCasing TemplateWordCloudWordCasingPtrInput `pulumi:"wordCasing"`
	// The word orientation options (horizontal, horizontal_and_vertical) for the words in a word cloud.
	WordOrientation TemplateWordCloudWordOrientationPtrInput `pulumi:"wordOrientation"`
	// The word padding options (none, small, medium, large) for the words in a word cloud.
	WordPadding TemplateWordCloudWordPaddingPtrInput `pulumi:"wordPadding"`
	// The word scaling options (emphasize, normal) for the words in a word cloud.
	WordScaling TemplateWordCloudWordScalingPtrInput `pulumi:"wordScaling"`
}

func (TemplateWordCloudOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWordCloudOptions)(nil)).Elem()
}

func (i TemplateWordCloudOptionsArgs) ToTemplateWordCloudOptionsOutput() TemplateWordCloudOptionsOutput {
	return i.ToTemplateWordCloudOptionsOutputWithContext(context.Background())
}

func (i TemplateWordCloudOptionsArgs) ToTemplateWordCloudOptionsOutputWithContext(ctx context.Context) TemplateWordCloudOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWordCloudOptionsOutput)
}

func (i TemplateWordCloudOptionsArgs) ToTemplateWordCloudOptionsPtrOutput() TemplateWordCloudOptionsPtrOutput {
	return i.ToTemplateWordCloudOptionsPtrOutputWithContext(context.Background())
}

func (i TemplateWordCloudOptionsArgs) ToTemplateWordCloudOptionsPtrOutputWithContext(ctx context.Context) TemplateWordCloudOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWordCloudOptionsOutput).ToTemplateWordCloudOptionsPtrOutputWithContext(ctx)
}

// TemplateWordCloudOptionsPtrInput is an input type that accepts TemplateWordCloudOptionsArgs, TemplateWordCloudOptionsPtr and TemplateWordCloudOptionsPtrOutput values.
// You can construct a concrete instance of `TemplateWordCloudOptionsPtrInput` via:
//
//	        TemplateWordCloudOptionsArgs{...}
//
//	or:
//
//	        nil
type TemplateWordCloudOptionsPtrInput interface {
	pulumi.Input

	ToTemplateWordCloudOptionsPtrOutput() TemplateWordCloudOptionsPtrOutput
	ToTemplateWordCloudOptionsPtrOutputWithContext(context.Context) TemplateWordCloudOptionsPtrOutput
}

type templateWordCloudOptionsPtrType TemplateWordCloudOptionsArgs

func TemplateWordCloudOptionsPtr(v *TemplateWordCloudOptionsArgs) TemplateWordCloudOptionsPtrInput {
	return (*templateWordCloudOptionsPtrType)(v)
}

func (*templateWordCloudOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWordCloudOptions)(nil)).Elem()
}

func (i *templateWordCloudOptionsPtrType) ToTemplateWordCloudOptionsPtrOutput() TemplateWordCloudOptionsPtrOutput {
	return i.ToTemplateWordCloudOptionsPtrOutputWithContext(context.Background())
}

func (i *templateWordCloudOptionsPtrType) ToTemplateWordCloudOptionsPtrOutputWithContext(ctx context.Context) TemplateWordCloudOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWordCloudOptionsPtrOutput)
}

type TemplateWordCloudOptionsOutput struct{ *pulumi.OutputState }

func (TemplateWordCloudOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWordCloudOptions)(nil)).Elem()
}

func (o TemplateWordCloudOptionsOutput) ToTemplateWordCloudOptionsOutput() TemplateWordCloudOptionsOutput {
	return o
}

func (o TemplateWordCloudOptionsOutput) ToTemplateWordCloudOptionsOutputWithContext(ctx context.Context) TemplateWordCloudOptionsOutput {
	return o
}

func (o TemplateWordCloudOptionsOutput) ToTemplateWordCloudOptionsPtrOutput() TemplateWordCloudOptionsPtrOutput {
	return o.ToTemplateWordCloudOptionsPtrOutputWithContext(context.Background())
}

func (o TemplateWordCloudOptionsOutput) ToTemplateWordCloudOptionsPtrOutputWithContext(ctx context.Context) TemplateWordCloudOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateWordCloudOptions) *TemplateWordCloudOptions {
		return &v
	}).(TemplateWordCloudOptionsPtrOutput)
}

// The cloud layout options (fluid, normal) of a word cloud.
func (o TemplateWordCloudOptionsOutput) CloudLayout() TemplateWordCloudCloudLayoutPtrOutput {
	return o.ApplyT(func(v TemplateWordCloudOptions) *TemplateWordCloudCloudLayout { return v.CloudLayout }).(TemplateWordCloudCloudLayoutPtrOutput)
}

// The length limit of each word from 1-100.
func (o TemplateWordCloudOptionsOutput) MaximumStringLength() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateWordCloudOptions) *float64 { return v.MaximumStringLength }).(pulumi.Float64PtrOutput)
}

// The word casing options (lower_case, existing_case) for the words in a word cloud.
func (o TemplateWordCloudOptionsOutput) WordCasing() TemplateWordCloudWordCasingPtrOutput {
	return o.ApplyT(func(v TemplateWordCloudOptions) *TemplateWordCloudWordCasing { return v.WordCasing }).(TemplateWordCloudWordCasingPtrOutput)
}

// The word orientation options (horizontal, horizontal_and_vertical) for the words in a word cloud.
func (o TemplateWordCloudOptionsOutput) WordOrientation() TemplateWordCloudWordOrientationPtrOutput {
	return o.ApplyT(func(v TemplateWordCloudOptions) *TemplateWordCloudWordOrientation { return v.WordOrientation }).(TemplateWordCloudWordOrientationPtrOutput)
}

// The word padding options (none, small, medium, large) for the words in a word cloud.
func (o TemplateWordCloudOptionsOutput) WordPadding() TemplateWordCloudWordPaddingPtrOutput {
	return o.ApplyT(func(v TemplateWordCloudOptions) *TemplateWordCloudWordPadding { return v.WordPadding }).(TemplateWordCloudWordPaddingPtrOutput)
}

// The word scaling options (emphasize, normal) for the words in a word cloud.
func (o TemplateWordCloudOptionsOutput) WordScaling() TemplateWordCloudWordScalingPtrOutput {
	return o.ApplyT(func(v TemplateWordCloudOptions) *TemplateWordCloudWordScaling { return v.WordScaling }).(TemplateWordCloudWordScalingPtrOutput)
}

type TemplateWordCloudOptionsPtrOutput struct{ *pulumi.OutputState }

func (TemplateWordCloudOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWordCloudOptions)(nil)).Elem()
}

func (o TemplateWordCloudOptionsPtrOutput) ToTemplateWordCloudOptionsPtrOutput() TemplateWordCloudOptionsPtrOutput {
	return o
}

func (o TemplateWordCloudOptionsPtrOutput) ToTemplateWordCloudOptionsPtrOutputWithContext(ctx context.Context) TemplateWordCloudOptionsPtrOutput {
	return o
}

func (o TemplateWordCloudOptionsPtrOutput) Elem() TemplateWordCloudOptionsOutput {
	return o.ApplyT(func(v *TemplateWordCloudOptions) TemplateWordCloudOptions {
		if v != nil {
			return *v
		}
		var ret TemplateWordCloudOptions
		return ret
	}).(TemplateWordCloudOptionsOutput)
}

// The cloud layout options (fluid, normal) of a word cloud.
func (o TemplateWordCloudOptionsPtrOutput) CloudLayout() TemplateWordCloudCloudLayoutPtrOutput {
	return o.ApplyT(func(v *TemplateWordCloudOptions) *TemplateWordCloudCloudLayout {
		if v == nil {
			return nil
		}
		return v.CloudLayout
	}).(TemplateWordCloudCloudLayoutPtrOutput)
}

// The length limit of each word from 1-100.
func (o TemplateWordCloudOptionsPtrOutput) MaximumStringLength() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateWordCloudOptions) *float64 {
		if v == nil {
			return nil
		}
		return v.MaximumStringLength
	}).(pulumi.Float64PtrOutput)
}

// The word casing options (lower_case, existing_case) for the words in a word cloud.
func (o TemplateWordCloudOptionsPtrOutput) WordCasing() TemplateWordCloudWordCasingPtrOutput {
	return o.ApplyT(func(v *TemplateWordCloudOptions) *TemplateWordCloudWordCasing {
		if v == nil {
			return nil
		}
		return v.WordCasing
	}).(TemplateWordCloudWordCasingPtrOutput)
}

// The word orientation options (horizontal, horizontal_and_vertical) for the words in a word cloud.
func (o TemplateWordCloudOptionsPtrOutput) WordOrientation() TemplateWordCloudWordOrientationPtrOutput {
	return o.ApplyT(func(v *TemplateWordCloudOptions) *TemplateWordCloudWordOrientation {
		if v == nil {
			return nil
		}
		return v.WordOrientation
	}).(TemplateWordCloudWordOrientationPtrOutput)
}

// The word padding options (none, small, medium, large) for the words in a word cloud.
func (o TemplateWordCloudOptionsPtrOutput) WordPadding() TemplateWordCloudWordPaddingPtrOutput {
	return o.ApplyT(func(v *TemplateWordCloudOptions) *TemplateWordCloudWordPadding {
		if v == nil {
			return nil
		}
		return v.WordPadding
	}).(TemplateWordCloudWordPaddingPtrOutput)
}

// The word scaling options (emphasize, normal) for the words in a word cloud.
func (o TemplateWordCloudOptionsPtrOutput) WordScaling() TemplateWordCloudWordScalingPtrOutput {
	return o.ApplyT(func(v *TemplateWordCloudOptions) *TemplateWordCloudWordScaling {
		if v == nil {
			return nil
		}
		return v.WordScaling
	}).(TemplateWordCloudWordScalingPtrOutput)
}

type TemplateWordCloudSortConfiguration struct {
	// The limit on the number of groups that are displayed in a word cloud.
	CategoryItemsLimit *TemplateItemsLimitConfiguration `pulumi:"categoryItemsLimit"`
	// The sort configuration of group by fields.
	CategorySort []TemplateFieldSortOptions `pulumi:"categorySort"`
}

// TemplateWordCloudSortConfigurationInput is an input type that accepts TemplateWordCloudSortConfigurationArgs and TemplateWordCloudSortConfigurationOutput values.
// You can construct a concrete instance of `TemplateWordCloudSortConfigurationInput` via:
//
//	TemplateWordCloudSortConfigurationArgs{...}
type TemplateWordCloudSortConfigurationInput interface {
	pulumi.Input

	ToTemplateWordCloudSortConfigurationOutput() TemplateWordCloudSortConfigurationOutput
	ToTemplateWordCloudSortConfigurationOutputWithContext(context.Context) TemplateWordCloudSortConfigurationOutput
}

type TemplateWordCloudSortConfigurationArgs struct {
	// The limit on the number of groups that are displayed in a word cloud.
	CategoryItemsLimit TemplateItemsLimitConfigurationPtrInput `pulumi:"categoryItemsLimit"`
	// The sort configuration of group by fields.
	CategorySort TemplateFieldSortOptionsArrayInput `pulumi:"categorySort"`
}

func (TemplateWordCloudSortConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWordCloudSortConfiguration)(nil)).Elem()
}

func (i TemplateWordCloudSortConfigurationArgs) ToTemplateWordCloudSortConfigurationOutput() TemplateWordCloudSortConfigurationOutput {
	return i.ToTemplateWordCloudSortConfigurationOutputWithContext(context.Background())
}

func (i TemplateWordCloudSortConfigurationArgs) ToTemplateWordCloudSortConfigurationOutputWithContext(ctx context.Context) TemplateWordCloudSortConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWordCloudSortConfigurationOutput)
}

func (i TemplateWordCloudSortConfigurationArgs) ToTemplateWordCloudSortConfigurationPtrOutput() TemplateWordCloudSortConfigurationPtrOutput {
	return i.ToTemplateWordCloudSortConfigurationPtrOutputWithContext(context.Background())
}

func (i TemplateWordCloudSortConfigurationArgs) ToTemplateWordCloudSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateWordCloudSortConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWordCloudSortConfigurationOutput).ToTemplateWordCloudSortConfigurationPtrOutputWithContext(ctx)
}

// TemplateWordCloudSortConfigurationPtrInput is an input type that accepts TemplateWordCloudSortConfigurationArgs, TemplateWordCloudSortConfigurationPtr and TemplateWordCloudSortConfigurationPtrOutput values.
// You can construct a concrete instance of `TemplateWordCloudSortConfigurationPtrInput` via:
//
//	        TemplateWordCloudSortConfigurationArgs{...}
//
//	or:
//
//	        nil
type TemplateWordCloudSortConfigurationPtrInput interface {
	pulumi.Input

	ToTemplateWordCloudSortConfigurationPtrOutput() TemplateWordCloudSortConfigurationPtrOutput
	ToTemplateWordCloudSortConfigurationPtrOutputWithContext(context.Context) TemplateWordCloudSortConfigurationPtrOutput
}

type templateWordCloudSortConfigurationPtrType TemplateWordCloudSortConfigurationArgs

func TemplateWordCloudSortConfigurationPtr(v *TemplateWordCloudSortConfigurationArgs) TemplateWordCloudSortConfigurationPtrInput {
	return (*templateWordCloudSortConfigurationPtrType)(v)
}

func (*templateWordCloudSortConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWordCloudSortConfiguration)(nil)).Elem()
}

func (i *templateWordCloudSortConfigurationPtrType) ToTemplateWordCloudSortConfigurationPtrOutput() TemplateWordCloudSortConfigurationPtrOutput {
	return i.ToTemplateWordCloudSortConfigurationPtrOutputWithContext(context.Background())
}

func (i *templateWordCloudSortConfigurationPtrType) ToTemplateWordCloudSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateWordCloudSortConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWordCloudSortConfigurationPtrOutput)
}

type TemplateWordCloudSortConfigurationOutput struct{ *pulumi.OutputState }

func (TemplateWordCloudSortConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWordCloudSortConfiguration)(nil)).Elem()
}

func (o TemplateWordCloudSortConfigurationOutput) ToTemplateWordCloudSortConfigurationOutput() TemplateWordCloudSortConfigurationOutput {
	return o
}

func (o TemplateWordCloudSortConfigurationOutput) ToTemplateWordCloudSortConfigurationOutputWithContext(ctx context.Context) TemplateWordCloudSortConfigurationOutput {
	return o
}

func (o TemplateWordCloudSortConfigurationOutput) ToTemplateWordCloudSortConfigurationPtrOutput() TemplateWordCloudSortConfigurationPtrOutput {
	return o.ToTemplateWordCloudSortConfigurationPtrOutputWithContext(context.Background())
}

func (o TemplateWordCloudSortConfigurationOutput) ToTemplateWordCloudSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateWordCloudSortConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateWordCloudSortConfiguration) *TemplateWordCloudSortConfiguration {
		return &v
	}).(TemplateWordCloudSortConfigurationPtrOutput)
}

// The limit on the number of groups that are displayed in a word cloud.
func (o TemplateWordCloudSortConfigurationOutput) CategoryItemsLimit() TemplateItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateWordCloudSortConfiguration) *TemplateItemsLimitConfiguration {
		return v.CategoryItemsLimit
	}).(TemplateItemsLimitConfigurationPtrOutput)
}

// The sort configuration of group by fields.
func (o TemplateWordCloudSortConfigurationOutput) CategorySort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v TemplateWordCloudSortConfiguration) []TemplateFieldSortOptions { return v.CategorySort }).(TemplateFieldSortOptionsArrayOutput)
}

type TemplateWordCloudSortConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TemplateWordCloudSortConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWordCloudSortConfiguration)(nil)).Elem()
}

func (o TemplateWordCloudSortConfigurationPtrOutput) ToTemplateWordCloudSortConfigurationPtrOutput() TemplateWordCloudSortConfigurationPtrOutput {
	return o
}

func (o TemplateWordCloudSortConfigurationPtrOutput) ToTemplateWordCloudSortConfigurationPtrOutputWithContext(ctx context.Context) TemplateWordCloudSortConfigurationPtrOutput {
	return o
}

func (o TemplateWordCloudSortConfigurationPtrOutput) Elem() TemplateWordCloudSortConfigurationOutput {
	return o.ApplyT(func(v *TemplateWordCloudSortConfiguration) TemplateWordCloudSortConfiguration {
		if v != nil {
			return *v
		}
		var ret TemplateWordCloudSortConfiguration
		return ret
	}).(TemplateWordCloudSortConfigurationOutput)
}

// The limit on the number of groups that are displayed in a word cloud.
func (o TemplateWordCloudSortConfigurationPtrOutput) CategoryItemsLimit() TemplateItemsLimitConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateWordCloudSortConfiguration) *TemplateItemsLimitConfiguration {
		if v == nil {
			return nil
		}
		return v.CategoryItemsLimit
	}).(TemplateItemsLimitConfigurationPtrOutput)
}

// The sort configuration of group by fields.
func (o TemplateWordCloudSortConfigurationPtrOutput) CategorySort() TemplateFieldSortOptionsArrayOutput {
	return o.ApplyT(func(v *TemplateWordCloudSortConfiguration) []TemplateFieldSortOptions {
		if v == nil {
			return nil
		}
		return v.CategorySort
	}).(TemplateFieldSortOptionsArrayOutput)
}

type TemplateWordCloudVisual struct {
	// The list of custom actions that are configured for a visual.
	Actions []TemplateVisualCustomAction `pulumi:"actions"`
	// The configuration settings of the visual.
	ChartConfiguration *TemplateWordCloudChartConfiguration `pulumi:"chartConfiguration"`
	// The column hierarchy that is used during drill-downs and drill-ups.
	ColumnHierarchies []TemplateColumnHierarchy `pulumi:"columnHierarchies"`
	// The subtitle that is displayed on the visual.
	Subtitle *TemplateVisualSubtitleLabelOptions `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title *TemplateVisualTitleLabelOptions `pulumi:"title"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
	VisualId string `pulumi:"visualId"`
}

// TemplateWordCloudVisualInput is an input type that accepts TemplateWordCloudVisualArgs and TemplateWordCloudVisualOutput values.
// You can construct a concrete instance of `TemplateWordCloudVisualInput` via:
//
//	TemplateWordCloudVisualArgs{...}
type TemplateWordCloudVisualInput interface {
	pulumi.Input

	ToTemplateWordCloudVisualOutput() TemplateWordCloudVisualOutput
	ToTemplateWordCloudVisualOutputWithContext(context.Context) TemplateWordCloudVisualOutput
}

type TemplateWordCloudVisualArgs struct {
	// The list of custom actions that are configured for a visual.
	Actions TemplateVisualCustomActionArrayInput `pulumi:"actions"`
	// The configuration settings of the visual.
	ChartConfiguration TemplateWordCloudChartConfigurationPtrInput `pulumi:"chartConfiguration"`
	// The column hierarchy that is used during drill-downs and drill-ups.
	ColumnHierarchies TemplateColumnHierarchyArrayInput `pulumi:"columnHierarchies"`
	// The subtitle that is displayed on the visual.
	Subtitle TemplateVisualSubtitleLabelOptionsPtrInput `pulumi:"subtitle"`
	// The title that is displayed on the visual.
	Title TemplateVisualTitleLabelOptionsPtrInput `pulumi:"title"`
	// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
	VisualId pulumi.StringInput `pulumi:"visualId"`
}

func (TemplateWordCloudVisualArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWordCloudVisual)(nil)).Elem()
}

func (i TemplateWordCloudVisualArgs) ToTemplateWordCloudVisualOutput() TemplateWordCloudVisualOutput {
	return i.ToTemplateWordCloudVisualOutputWithContext(context.Background())
}

func (i TemplateWordCloudVisualArgs) ToTemplateWordCloudVisualOutputWithContext(ctx context.Context) TemplateWordCloudVisualOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWordCloudVisualOutput)
}

func (i TemplateWordCloudVisualArgs) ToTemplateWordCloudVisualPtrOutput() TemplateWordCloudVisualPtrOutput {
	return i.ToTemplateWordCloudVisualPtrOutputWithContext(context.Background())
}

func (i TemplateWordCloudVisualArgs) ToTemplateWordCloudVisualPtrOutputWithContext(ctx context.Context) TemplateWordCloudVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWordCloudVisualOutput).ToTemplateWordCloudVisualPtrOutputWithContext(ctx)
}

// TemplateWordCloudVisualPtrInput is an input type that accepts TemplateWordCloudVisualArgs, TemplateWordCloudVisualPtr and TemplateWordCloudVisualPtrOutput values.
// You can construct a concrete instance of `TemplateWordCloudVisualPtrInput` via:
//
//	        TemplateWordCloudVisualArgs{...}
//
//	or:
//
//	        nil
type TemplateWordCloudVisualPtrInput interface {
	pulumi.Input

	ToTemplateWordCloudVisualPtrOutput() TemplateWordCloudVisualPtrOutput
	ToTemplateWordCloudVisualPtrOutputWithContext(context.Context) TemplateWordCloudVisualPtrOutput
}

type templateWordCloudVisualPtrType TemplateWordCloudVisualArgs

func TemplateWordCloudVisualPtr(v *TemplateWordCloudVisualArgs) TemplateWordCloudVisualPtrInput {
	return (*templateWordCloudVisualPtrType)(v)
}

func (*templateWordCloudVisualPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWordCloudVisual)(nil)).Elem()
}

func (i *templateWordCloudVisualPtrType) ToTemplateWordCloudVisualPtrOutput() TemplateWordCloudVisualPtrOutput {
	return i.ToTemplateWordCloudVisualPtrOutputWithContext(context.Background())
}

func (i *templateWordCloudVisualPtrType) ToTemplateWordCloudVisualPtrOutputWithContext(ctx context.Context) TemplateWordCloudVisualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateWordCloudVisualPtrOutput)
}

type TemplateWordCloudVisualOutput struct{ *pulumi.OutputState }

func (TemplateWordCloudVisualOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateWordCloudVisual)(nil)).Elem()
}

func (o TemplateWordCloudVisualOutput) ToTemplateWordCloudVisualOutput() TemplateWordCloudVisualOutput {
	return o
}

func (o TemplateWordCloudVisualOutput) ToTemplateWordCloudVisualOutputWithContext(ctx context.Context) TemplateWordCloudVisualOutput {
	return o
}

func (o TemplateWordCloudVisualOutput) ToTemplateWordCloudVisualPtrOutput() TemplateWordCloudVisualPtrOutput {
	return o.ToTemplateWordCloudVisualPtrOutputWithContext(context.Background())
}

func (o TemplateWordCloudVisualOutput) ToTemplateWordCloudVisualPtrOutputWithContext(ctx context.Context) TemplateWordCloudVisualPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateWordCloudVisual) *TemplateWordCloudVisual {
		return &v
	}).(TemplateWordCloudVisualPtrOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplateWordCloudVisualOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v TemplateWordCloudVisual) []TemplateVisualCustomAction { return v.Actions }).(TemplateVisualCustomActionArrayOutput)
}

// The configuration settings of the visual.
func (o TemplateWordCloudVisualOutput) ChartConfiguration() TemplateWordCloudChartConfigurationPtrOutput {
	return o.ApplyT(func(v TemplateWordCloudVisual) *TemplateWordCloudChartConfiguration { return v.ChartConfiguration }).(TemplateWordCloudChartConfigurationPtrOutput)
}

// The column hierarchy that is used during drill-downs and drill-ups.
func (o TemplateWordCloudVisualOutput) ColumnHierarchies() TemplateColumnHierarchyArrayOutput {
	return o.ApplyT(func(v TemplateWordCloudVisual) []TemplateColumnHierarchy { return v.ColumnHierarchies }).(TemplateColumnHierarchyArrayOutput)
}

// The subtitle that is displayed on the visual.
func (o TemplateWordCloudVisualOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateWordCloudVisual) *TemplateVisualSubtitleLabelOptions { return v.Subtitle }).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o TemplateWordCloudVisualOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v TemplateWordCloudVisual) *TemplateVisualTitleLabelOptions { return v.Title }).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
func (o TemplateWordCloudVisualOutput) VisualId() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateWordCloudVisual) string { return v.VisualId }).(pulumi.StringOutput)
}

type TemplateWordCloudVisualPtrOutput struct{ *pulumi.OutputState }

func (TemplateWordCloudVisualPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateWordCloudVisual)(nil)).Elem()
}

func (o TemplateWordCloudVisualPtrOutput) ToTemplateWordCloudVisualPtrOutput() TemplateWordCloudVisualPtrOutput {
	return o
}

func (o TemplateWordCloudVisualPtrOutput) ToTemplateWordCloudVisualPtrOutputWithContext(ctx context.Context) TemplateWordCloudVisualPtrOutput {
	return o
}

func (o TemplateWordCloudVisualPtrOutput) Elem() TemplateWordCloudVisualOutput {
	return o.ApplyT(func(v *TemplateWordCloudVisual) TemplateWordCloudVisual {
		if v != nil {
			return *v
		}
		var ret TemplateWordCloudVisual
		return ret
	}).(TemplateWordCloudVisualOutput)
}

// The list of custom actions that are configured for a visual.
func (o TemplateWordCloudVisualPtrOutput) Actions() TemplateVisualCustomActionArrayOutput {
	return o.ApplyT(func(v *TemplateWordCloudVisual) []TemplateVisualCustomAction {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(TemplateVisualCustomActionArrayOutput)
}

// The configuration settings of the visual.
func (o TemplateWordCloudVisualPtrOutput) ChartConfiguration() TemplateWordCloudChartConfigurationPtrOutput {
	return o.ApplyT(func(v *TemplateWordCloudVisual) *TemplateWordCloudChartConfiguration {
		if v == nil {
			return nil
		}
		return v.ChartConfiguration
	}).(TemplateWordCloudChartConfigurationPtrOutput)
}

// The column hierarchy that is used during drill-downs and drill-ups.
func (o TemplateWordCloudVisualPtrOutput) ColumnHierarchies() TemplateColumnHierarchyArrayOutput {
	return o.ApplyT(func(v *TemplateWordCloudVisual) []TemplateColumnHierarchy {
		if v == nil {
			return nil
		}
		return v.ColumnHierarchies
	}).(TemplateColumnHierarchyArrayOutput)
}

// The subtitle that is displayed on the visual.
func (o TemplateWordCloudVisualPtrOutput) Subtitle() TemplateVisualSubtitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateWordCloudVisual) *TemplateVisualSubtitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Subtitle
	}).(TemplateVisualSubtitleLabelOptionsPtrOutput)
}

// The title that is displayed on the visual.
func (o TemplateWordCloudVisualPtrOutput) Title() TemplateVisualTitleLabelOptionsPtrOutput {
	return o.ApplyT(func(v *TemplateWordCloudVisual) *TemplateVisualTitleLabelOptions {
		if v == nil {
			return nil
		}
		return v.Title
	}).(TemplateVisualTitleLabelOptionsPtrOutput)
}

// The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
func (o TemplateWordCloudVisualPtrOutput) VisualId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateWordCloudVisual) *string {
		if v == nil {
			return nil
		}
		return &v.VisualId
	}).(pulumi.StringPtrOutput)
}

// <p>The display options for tile borders for visuals.</p>
type ThemeBorderStyle struct {
	// <p>The option to enable display of borders for visuals.</p>
	Show *bool `pulumi:"show"`
}

// ThemeBorderStyleInput is an input type that accepts ThemeBorderStyleArgs and ThemeBorderStyleOutput values.
// You can construct a concrete instance of `ThemeBorderStyleInput` via:
//
//	ThemeBorderStyleArgs{...}
type ThemeBorderStyleInput interface {
	pulumi.Input

	ToThemeBorderStyleOutput() ThemeBorderStyleOutput
	ToThemeBorderStyleOutputWithContext(context.Context) ThemeBorderStyleOutput
}

// <p>The display options for tile borders for visuals.</p>
type ThemeBorderStyleArgs struct {
	// <p>The option to enable display of borders for visuals.</p>
	Show pulumi.BoolPtrInput `pulumi:"show"`
}

func (ThemeBorderStyleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeBorderStyle)(nil)).Elem()
}

func (i ThemeBorderStyleArgs) ToThemeBorderStyleOutput() ThemeBorderStyleOutput {
	return i.ToThemeBorderStyleOutputWithContext(context.Background())
}

func (i ThemeBorderStyleArgs) ToThemeBorderStyleOutputWithContext(ctx context.Context) ThemeBorderStyleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeBorderStyleOutput)
}

func (i ThemeBorderStyleArgs) ToThemeBorderStylePtrOutput() ThemeBorderStylePtrOutput {
	return i.ToThemeBorderStylePtrOutputWithContext(context.Background())
}

func (i ThemeBorderStyleArgs) ToThemeBorderStylePtrOutputWithContext(ctx context.Context) ThemeBorderStylePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeBorderStyleOutput).ToThemeBorderStylePtrOutputWithContext(ctx)
}

// ThemeBorderStylePtrInput is an input type that accepts ThemeBorderStyleArgs, ThemeBorderStylePtr and ThemeBorderStylePtrOutput values.
// You can construct a concrete instance of `ThemeBorderStylePtrInput` via:
//
//	        ThemeBorderStyleArgs{...}
//
//	or:
//
//	        nil
type ThemeBorderStylePtrInput interface {
	pulumi.Input

	ToThemeBorderStylePtrOutput() ThemeBorderStylePtrOutput
	ToThemeBorderStylePtrOutputWithContext(context.Context) ThemeBorderStylePtrOutput
}

type themeBorderStylePtrType ThemeBorderStyleArgs

func ThemeBorderStylePtr(v *ThemeBorderStyleArgs) ThemeBorderStylePtrInput {
	return (*themeBorderStylePtrType)(v)
}

func (*themeBorderStylePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeBorderStyle)(nil)).Elem()
}

func (i *themeBorderStylePtrType) ToThemeBorderStylePtrOutput() ThemeBorderStylePtrOutput {
	return i.ToThemeBorderStylePtrOutputWithContext(context.Background())
}

func (i *themeBorderStylePtrType) ToThemeBorderStylePtrOutputWithContext(ctx context.Context) ThemeBorderStylePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeBorderStylePtrOutput)
}

// <p>The display options for tile borders for visuals.</p>
type ThemeBorderStyleOutput struct{ *pulumi.OutputState }

func (ThemeBorderStyleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeBorderStyle)(nil)).Elem()
}

func (o ThemeBorderStyleOutput) ToThemeBorderStyleOutput() ThemeBorderStyleOutput {
	return o
}

func (o ThemeBorderStyleOutput) ToThemeBorderStyleOutputWithContext(ctx context.Context) ThemeBorderStyleOutput {
	return o
}

func (o ThemeBorderStyleOutput) ToThemeBorderStylePtrOutput() ThemeBorderStylePtrOutput {
	return o.ToThemeBorderStylePtrOutputWithContext(context.Background())
}

func (o ThemeBorderStyleOutput) ToThemeBorderStylePtrOutputWithContext(ctx context.Context) ThemeBorderStylePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThemeBorderStyle) *ThemeBorderStyle {
		return &v
	}).(ThemeBorderStylePtrOutput)
}

// <p>The option to enable display of borders for visuals.</p>
func (o ThemeBorderStyleOutput) Show() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThemeBorderStyle) *bool { return v.Show }).(pulumi.BoolPtrOutput)
}

type ThemeBorderStylePtrOutput struct{ *pulumi.OutputState }

func (ThemeBorderStylePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeBorderStyle)(nil)).Elem()
}

func (o ThemeBorderStylePtrOutput) ToThemeBorderStylePtrOutput() ThemeBorderStylePtrOutput {
	return o
}

func (o ThemeBorderStylePtrOutput) ToThemeBorderStylePtrOutputWithContext(ctx context.Context) ThemeBorderStylePtrOutput {
	return o
}

func (o ThemeBorderStylePtrOutput) Elem() ThemeBorderStyleOutput {
	return o.ApplyT(func(v *ThemeBorderStyle) ThemeBorderStyle {
		if v != nil {
			return *v
		}
		var ret ThemeBorderStyle
		return ret
	}).(ThemeBorderStyleOutput)
}

// <p>The option to enable display of borders for visuals.</p>
func (o ThemeBorderStylePtrOutput) Show() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThemeBorderStyle) *bool {
		if v == nil {
			return nil
		}
		return v.Show
	}).(pulumi.BoolPtrOutput)
}

// <p>The theme configuration. This configuration contains all of the display properties for
//
//	a theme.</p>
type ThemeConfiguration struct {
	// Color properties that apply to chart data colors.
	DataColorPalette *ThemeDataColorPalette `pulumi:"dataColorPalette"`
	// Display options related to sheets.
	Sheet      *ThemeSheetStyle `pulumi:"sheet"`
	Typography *ThemeTypography `pulumi:"typography"`
	// Color properties that apply to the UI and to charts, excluding the colors that apply to data.
	UiColorPalette *ThemeUiColorPalette `pulumi:"uiColorPalette"`
}

// ThemeConfigurationInput is an input type that accepts ThemeConfigurationArgs and ThemeConfigurationOutput values.
// You can construct a concrete instance of `ThemeConfigurationInput` via:
//
//	ThemeConfigurationArgs{...}
type ThemeConfigurationInput interface {
	pulumi.Input

	ToThemeConfigurationOutput() ThemeConfigurationOutput
	ToThemeConfigurationOutputWithContext(context.Context) ThemeConfigurationOutput
}

// <p>The theme configuration. This configuration contains all of the display properties for
//
//	a theme.</p>
type ThemeConfigurationArgs struct {
	// Color properties that apply to chart data colors.
	DataColorPalette ThemeDataColorPalettePtrInput `pulumi:"dataColorPalette"`
	// Display options related to sheets.
	Sheet      ThemeSheetStylePtrInput `pulumi:"sheet"`
	Typography ThemeTypographyPtrInput `pulumi:"typography"`
	// Color properties that apply to the UI and to charts, excluding the colors that apply to data.
	UiColorPalette ThemeUiColorPalettePtrInput `pulumi:"uiColorPalette"`
}

func (ThemeConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeConfiguration)(nil)).Elem()
}

func (i ThemeConfigurationArgs) ToThemeConfigurationOutput() ThemeConfigurationOutput {
	return i.ToThemeConfigurationOutputWithContext(context.Background())
}

func (i ThemeConfigurationArgs) ToThemeConfigurationOutputWithContext(ctx context.Context) ThemeConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeConfigurationOutput)
}

// <p>The theme configuration. This configuration contains all of the display properties for
//
//	a theme.</p>
type ThemeConfigurationOutput struct{ *pulumi.OutputState }

func (ThemeConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeConfiguration)(nil)).Elem()
}

func (o ThemeConfigurationOutput) ToThemeConfigurationOutput() ThemeConfigurationOutput {
	return o
}

func (o ThemeConfigurationOutput) ToThemeConfigurationOutputWithContext(ctx context.Context) ThemeConfigurationOutput {
	return o
}

// Color properties that apply to chart data colors.
func (o ThemeConfigurationOutput) DataColorPalette() ThemeDataColorPalettePtrOutput {
	return o.ApplyT(func(v ThemeConfiguration) *ThemeDataColorPalette { return v.DataColorPalette }).(ThemeDataColorPalettePtrOutput)
}

// Display options related to sheets.
func (o ThemeConfigurationOutput) Sheet() ThemeSheetStylePtrOutput {
	return o.ApplyT(func(v ThemeConfiguration) *ThemeSheetStyle { return v.Sheet }).(ThemeSheetStylePtrOutput)
}

func (o ThemeConfigurationOutput) Typography() ThemeTypographyPtrOutput {
	return o.ApplyT(func(v ThemeConfiguration) *ThemeTypography { return v.Typography }).(ThemeTypographyPtrOutput)
}

// Color properties that apply to the UI and to charts, excluding the colors that apply to data.
func (o ThemeConfigurationOutput) UiColorPalette() ThemeUiColorPalettePtrOutput {
	return o.ApplyT(func(v ThemeConfiguration) *ThemeUiColorPalette { return v.UiColorPalette }).(ThemeUiColorPalettePtrOutput)
}

type ThemeConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ThemeConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeConfiguration)(nil)).Elem()
}

func (o ThemeConfigurationPtrOutput) ToThemeConfigurationPtrOutput() ThemeConfigurationPtrOutput {
	return o
}

func (o ThemeConfigurationPtrOutput) ToThemeConfigurationPtrOutputWithContext(ctx context.Context) ThemeConfigurationPtrOutput {
	return o
}

func (o ThemeConfigurationPtrOutput) Elem() ThemeConfigurationOutput {
	return o.ApplyT(func(v *ThemeConfiguration) ThemeConfiguration {
		if v != nil {
			return *v
		}
		var ret ThemeConfiguration
		return ret
	}).(ThemeConfigurationOutput)
}

// Color properties that apply to chart data colors.
func (o ThemeConfigurationPtrOutput) DataColorPalette() ThemeDataColorPalettePtrOutput {
	return o.ApplyT(func(v *ThemeConfiguration) *ThemeDataColorPalette {
		if v == nil {
			return nil
		}
		return v.DataColorPalette
	}).(ThemeDataColorPalettePtrOutput)
}

// Display options related to sheets.
func (o ThemeConfigurationPtrOutput) Sheet() ThemeSheetStylePtrOutput {
	return o.ApplyT(func(v *ThemeConfiguration) *ThemeSheetStyle {
		if v == nil {
			return nil
		}
		return v.Sheet
	}).(ThemeSheetStylePtrOutput)
}

func (o ThemeConfigurationPtrOutput) Typography() ThemeTypographyPtrOutput {
	return o.ApplyT(func(v *ThemeConfiguration) *ThemeTypography {
		if v == nil {
			return nil
		}
		return v.Typography
	}).(ThemeTypographyPtrOutput)
}

// Color properties that apply to the UI and to charts, excluding the colors that apply to data.
func (o ThemeConfigurationPtrOutput) UiColorPalette() ThemeUiColorPalettePtrOutput {
	return o.ApplyT(func(v *ThemeConfiguration) *ThemeUiColorPalette {
		if v == nil {
			return nil
		}
		return v.UiColorPalette
	}).(ThemeUiColorPalettePtrOutput)
}

// <p>The theme colors that are used for data colors in charts. The colors description is a
//
//	hexadecimal color code that consists of six alphanumerical characters, prefixed with
//	    <code>#</code>, for example #37BFF5. </p>
type ThemeDataColorPalette struct {
	// <p>The hexadecimal codes for the colors.</p>
	Colors []string `pulumi:"colors"`
	// <p>The hexadecimal code of a color that applies to charts where a lack of data is
	//             highlighted.</p>
	EmptyFillColor *string `pulumi:"emptyFillColor"`
	// <p>The minimum and maximum hexadecimal codes that describe a color gradient. </p>
	MinMaxGradient []string `pulumi:"minMaxGradient"`
}

// ThemeDataColorPaletteInput is an input type that accepts ThemeDataColorPaletteArgs and ThemeDataColorPaletteOutput values.
// You can construct a concrete instance of `ThemeDataColorPaletteInput` via:
//
//	ThemeDataColorPaletteArgs{...}
type ThemeDataColorPaletteInput interface {
	pulumi.Input

	ToThemeDataColorPaletteOutput() ThemeDataColorPaletteOutput
	ToThemeDataColorPaletteOutputWithContext(context.Context) ThemeDataColorPaletteOutput
}

// <p>The theme colors that are used for data colors in charts. The colors description is a
//
//	hexadecimal color code that consists of six alphanumerical characters, prefixed with
//	    <code>#</code>, for example #37BFF5. </p>
type ThemeDataColorPaletteArgs struct {
	// <p>The hexadecimal codes for the colors.</p>
	Colors pulumi.StringArrayInput `pulumi:"colors"`
	// <p>The hexadecimal code of a color that applies to charts where a lack of data is
	//             highlighted.</p>
	EmptyFillColor pulumi.StringPtrInput `pulumi:"emptyFillColor"`
	// <p>The minimum and maximum hexadecimal codes that describe a color gradient. </p>
	MinMaxGradient pulumi.StringArrayInput `pulumi:"minMaxGradient"`
}

func (ThemeDataColorPaletteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeDataColorPalette)(nil)).Elem()
}

func (i ThemeDataColorPaletteArgs) ToThemeDataColorPaletteOutput() ThemeDataColorPaletteOutput {
	return i.ToThemeDataColorPaletteOutputWithContext(context.Background())
}

func (i ThemeDataColorPaletteArgs) ToThemeDataColorPaletteOutputWithContext(ctx context.Context) ThemeDataColorPaletteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeDataColorPaletteOutput)
}

func (i ThemeDataColorPaletteArgs) ToThemeDataColorPalettePtrOutput() ThemeDataColorPalettePtrOutput {
	return i.ToThemeDataColorPalettePtrOutputWithContext(context.Background())
}

func (i ThemeDataColorPaletteArgs) ToThemeDataColorPalettePtrOutputWithContext(ctx context.Context) ThemeDataColorPalettePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeDataColorPaletteOutput).ToThemeDataColorPalettePtrOutputWithContext(ctx)
}

// ThemeDataColorPalettePtrInput is an input type that accepts ThemeDataColorPaletteArgs, ThemeDataColorPalettePtr and ThemeDataColorPalettePtrOutput values.
// You can construct a concrete instance of `ThemeDataColorPalettePtrInput` via:
//
//	        ThemeDataColorPaletteArgs{...}
//
//	or:
//
//	        nil
type ThemeDataColorPalettePtrInput interface {
	pulumi.Input

	ToThemeDataColorPalettePtrOutput() ThemeDataColorPalettePtrOutput
	ToThemeDataColorPalettePtrOutputWithContext(context.Context) ThemeDataColorPalettePtrOutput
}

type themeDataColorPalettePtrType ThemeDataColorPaletteArgs

func ThemeDataColorPalettePtr(v *ThemeDataColorPaletteArgs) ThemeDataColorPalettePtrInput {
	return (*themeDataColorPalettePtrType)(v)
}

func (*themeDataColorPalettePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeDataColorPalette)(nil)).Elem()
}

func (i *themeDataColorPalettePtrType) ToThemeDataColorPalettePtrOutput() ThemeDataColorPalettePtrOutput {
	return i.ToThemeDataColorPalettePtrOutputWithContext(context.Background())
}

func (i *themeDataColorPalettePtrType) ToThemeDataColorPalettePtrOutputWithContext(ctx context.Context) ThemeDataColorPalettePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeDataColorPalettePtrOutput)
}

// <p>The theme colors that are used for data colors in charts. The colors description is a
//
//	hexadecimal color code that consists of six alphanumerical characters, prefixed with
//	    <code>#</code>, for example #37BFF5. </p>
type ThemeDataColorPaletteOutput struct{ *pulumi.OutputState }

func (ThemeDataColorPaletteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeDataColorPalette)(nil)).Elem()
}

func (o ThemeDataColorPaletteOutput) ToThemeDataColorPaletteOutput() ThemeDataColorPaletteOutput {
	return o
}

func (o ThemeDataColorPaletteOutput) ToThemeDataColorPaletteOutputWithContext(ctx context.Context) ThemeDataColorPaletteOutput {
	return o
}

func (o ThemeDataColorPaletteOutput) ToThemeDataColorPalettePtrOutput() ThemeDataColorPalettePtrOutput {
	return o.ToThemeDataColorPalettePtrOutputWithContext(context.Background())
}

func (o ThemeDataColorPaletteOutput) ToThemeDataColorPalettePtrOutputWithContext(ctx context.Context) ThemeDataColorPalettePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThemeDataColorPalette) *ThemeDataColorPalette {
		return &v
	}).(ThemeDataColorPalettePtrOutput)
}

// <p>The hexadecimal codes for the colors.</p>
func (o ThemeDataColorPaletteOutput) Colors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThemeDataColorPalette) []string { return v.Colors }).(pulumi.StringArrayOutput)
}

// <p>The hexadecimal code of a color that applies to charts where a lack of data is
//
//	highlighted.</p>
func (o ThemeDataColorPaletteOutput) EmptyFillColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeDataColorPalette) *string { return v.EmptyFillColor }).(pulumi.StringPtrOutput)
}

// <p>The minimum and maximum hexadecimal codes that describe a color gradient. </p>
func (o ThemeDataColorPaletteOutput) MinMaxGradient() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThemeDataColorPalette) []string { return v.MinMaxGradient }).(pulumi.StringArrayOutput)
}

type ThemeDataColorPalettePtrOutput struct{ *pulumi.OutputState }

func (ThemeDataColorPalettePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeDataColorPalette)(nil)).Elem()
}

func (o ThemeDataColorPalettePtrOutput) ToThemeDataColorPalettePtrOutput() ThemeDataColorPalettePtrOutput {
	return o
}

func (o ThemeDataColorPalettePtrOutput) ToThemeDataColorPalettePtrOutputWithContext(ctx context.Context) ThemeDataColorPalettePtrOutput {
	return o
}

func (o ThemeDataColorPalettePtrOutput) Elem() ThemeDataColorPaletteOutput {
	return o.ApplyT(func(v *ThemeDataColorPalette) ThemeDataColorPalette {
		if v != nil {
			return *v
		}
		var ret ThemeDataColorPalette
		return ret
	}).(ThemeDataColorPaletteOutput)
}

// <p>The hexadecimal codes for the colors.</p>
func (o ThemeDataColorPalettePtrOutput) Colors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ThemeDataColorPalette) []string {
		if v == nil {
			return nil
		}
		return v.Colors
	}).(pulumi.StringArrayOutput)
}

// <p>The hexadecimal code of a color that applies to charts where a lack of data is
//
//	highlighted.</p>
func (o ThemeDataColorPalettePtrOutput) EmptyFillColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeDataColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.EmptyFillColor
	}).(pulumi.StringPtrOutput)
}

// <p>The minimum and maximum hexadecimal codes that describe a color gradient. </p>
func (o ThemeDataColorPalettePtrOutput) MinMaxGradient() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ThemeDataColorPalette) []string {
		if v == nil {
			return nil
		}
		return v.MinMaxGradient
	}).(pulumi.StringArrayOutput)
}

// <p>Theme error.</p>
type ThemeError struct {
	// <p>The error message.</p>
	Message *string `pulumi:"message"`
	// The type of error.
	Type *ThemeErrorType `pulumi:"type"`
}

// <p>Theme error.</p>
type ThemeErrorOutput struct{ *pulumi.OutputState }

func (ThemeErrorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeError)(nil)).Elem()
}

func (o ThemeErrorOutput) ToThemeErrorOutput() ThemeErrorOutput {
	return o
}

func (o ThemeErrorOutput) ToThemeErrorOutputWithContext(ctx context.Context) ThemeErrorOutput {
	return o
}

// <p>The error message.</p>
func (o ThemeErrorOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeError) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The type of error.
func (o ThemeErrorOutput) Type() ThemeErrorTypePtrOutput {
	return o.ApplyT(func(v ThemeError) *ThemeErrorType { return v.Type }).(ThemeErrorTypePtrOutput)
}

type ThemeErrorArrayOutput struct{ *pulumi.OutputState }

func (ThemeErrorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThemeError)(nil)).Elem()
}

func (o ThemeErrorArrayOutput) ToThemeErrorArrayOutput() ThemeErrorArrayOutput {
	return o
}

func (o ThemeErrorArrayOutput) ToThemeErrorArrayOutputWithContext(ctx context.Context) ThemeErrorArrayOutput {
	return o
}

func (o ThemeErrorArrayOutput) Index(i pulumi.IntInput) ThemeErrorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThemeError {
		return vs[0].([]ThemeError)[vs[1].(int)]
	}).(ThemeErrorOutput)
}

type ThemeFont struct {
	// Determines the font family settings.
	FontFamily *string `pulumi:"fontFamily"`
}

// ThemeFontInput is an input type that accepts ThemeFontArgs and ThemeFontOutput values.
// You can construct a concrete instance of `ThemeFontInput` via:
//
//	ThemeFontArgs{...}
type ThemeFontInput interface {
	pulumi.Input

	ToThemeFontOutput() ThemeFontOutput
	ToThemeFontOutputWithContext(context.Context) ThemeFontOutput
}

type ThemeFontArgs struct {
	// Determines the font family settings.
	FontFamily pulumi.StringPtrInput `pulumi:"fontFamily"`
}

func (ThemeFontArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeFont)(nil)).Elem()
}

func (i ThemeFontArgs) ToThemeFontOutput() ThemeFontOutput {
	return i.ToThemeFontOutputWithContext(context.Background())
}

func (i ThemeFontArgs) ToThemeFontOutputWithContext(ctx context.Context) ThemeFontOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeFontOutput)
}

// ThemeFontArrayInput is an input type that accepts ThemeFontArray and ThemeFontArrayOutput values.
// You can construct a concrete instance of `ThemeFontArrayInput` via:
//
//	ThemeFontArray{ ThemeFontArgs{...} }
type ThemeFontArrayInput interface {
	pulumi.Input

	ToThemeFontArrayOutput() ThemeFontArrayOutput
	ToThemeFontArrayOutputWithContext(context.Context) ThemeFontArrayOutput
}

type ThemeFontArray []ThemeFontInput

func (ThemeFontArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThemeFont)(nil)).Elem()
}

func (i ThemeFontArray) ToThemeFontArrayOutput() ThemeFontArrayOutput {
	return i.ToThemeFontArrayOutputWithContext(context.Background())
}

func (i ThemeFontArray) ToThemeFontArrayOutputWithContext(ctx context.Context) ThemeFontArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeFontArrayOutput)
}

type ThemeFontOutput struct{ *pulumi.OutputState }

func (ThemeFontOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeFont)(nil)).Elem()
}

func (o ThemeFontOutput) ToThemeFontOutput() ThemeFontOutput {
	return o
}

func (o ThemeFontOutput) ToThemeFontOutputWithContext(ctx context.Context) ThemeFontOutput {
	return o
}

// Determines the font family settings.
func (o ThemeFontOutput) FontFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeFont) *string { return v.FontFamily }).(pulumi.StringPtrOutput)
}

type ThemeFontArrayOutput struct{ *pulumi.OutputState }

func (ThemeFontArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThemeFont)(nil)).Elem()
}

func (o ThemeFontArrayOutput) ToThemeFontArrayOutput() ThemeFontArrayOutput {
	return o
}

func (o ThemeFontArrayOutput) ToThemeFontArrayOutputWithContext(ctx context.Context) ThemeFontArrayOutput {
	return o
}

func (o ThemeFontArrayOutput) Index(i pulumi.IntInput) ThemeFontOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThemeFont {
		return vs[0].([]ThemeFont)[vs[1].(int)]
	}).(ThemeFontOutput)
}

// <p>The display options for gutter spacing between tiles on a sheet.</p>
type ThemeGutterStyle struct {
	// <p>This Boolean value controls whether to display a gutter space between sheet tiles.
	//         </p>
	Show *bool `pulumi:"show"`
}

// ThemeGutterStyleInput is an input type that accepts ThemeGutterStyleArgs and ThemeGutterStyleOutput values.
// You can construct a concrete instance of `ThemeGutterStyleInput` via:
//
//	ThemeGutterStyleArgs{...}
type ThemeGutterStyleInput interface {
	pulumi.Input

	ToThemeGutterStyleOutput() ThemeGutterStyleOutput
	ToThemeGutterStyleOutputWithContext(context.Context) ThemeGutterStyleOutput
}

// <p>The display options for gutter spacing between tiles on a sheet.</p>
type ThemeGutterStyleArgs struct {
	// <p>This Boolean value controls whether to display a gutter space between sheet tiles.
	//         </p>
	Show pulumi.BoolPtrInput `pulumi:"show"`
}

func (ThemeGutterStyleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeGutterStyle)(nil)).Elem()
}

func (i ThemeGutterStyleArgs) ToThemeGutterStyleOutput() ThemeGutterStyleOutput {
	return i.ToThemeGutterStyleOutputWithContext(context.Background())
}

func (i ThemeGutterStyleArgs) ToThemeGutterStyleOutputWithContext(ctx context.Context) ThemeGutterStyleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeGutterStyleOutput)
}

func (i ThemeGutterStyleArgs) ToThemeGutterStylePtrOutput() ThemeGutterStylePtrOutput {
	return i.ToThemeGutterStylePtrOutputWithContext(context.Background())
}

func (i ThemeGutterStyleArgs) ToThemeGutterStylePtrOutputWithContext(ctx context.Context) ThemeGutterStylePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeGutterStyleOutput).ToThemeGutterStylePtrOutputWithContext(ctx)
}

// ThemeGutterStylePtrInput is an input type that accepts ThemeGutterStyleArgs, ThemeGutterStylePtr and ThemeGutterStylePtrOutput values.
// You can construct a concrete instance of `ThemeGutterStylePtrInput` via:
//
//	        ThemeGutterStyleArgs{...}
//
//	or:
//
//	        nil
type ThemeGutterStylePtrInput interface {
	pulumi.Input

	ToThemeGutterStylePtrOutput() ThemeGutterStylePtrOutput
	ToThemeGutterStylePtrOutputWithContext(context.Context) ThemeGutterStylePtrOutput
}

type themeGutterStylePtrType ThemeGutterStyleArgs

func ThemeGutterStylePtr(v *ThemeGutterStyleArgs) ThemeGutterStylePtrInput {
	return (*themeGutterStylePtrType)(v)
}

func (*themeGutterStylePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeGutterStyle)(nil)).Elem()
}

func (i *themeGutterStylePtrType) ToThemeGutterStylePtrOutput() ThemeGutterStylePtrOutput {
	return i.ToThemeGutterStylePtrOutputWithContext(context.Background())
}

func (i *themeGutterStylePtrType) ToThemeGutterStylePtrOutputWithContext(ctx context.Context) ThemeGutterStylePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeGutterStylePtrOutput)
}

// <p>The display options for gutter spacing between tiles on a sheet.</p>
type ThemeGutterStyleOutput struct{ *pulumi.OutputState }

func (ThemeGutterStyleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeGutterStyle)(nil)).Elem()
}

func (o ThemeGutterStyleOutput) ToThemeGutterStyleOutput() ThemeGutterStyleOutput {
	return o
}

func (o ThemeGutterStyleOutput) ToThemeGutterStyleOutputWithContext(ctx context.Context) ThemeGutterStyleOutput {
	return o
}

func (o ThemeGutterStyleOutput) ToThemeGutterStylePtrOutput() ThemeGutterStylePtrOutput {
	return o.ToThemeGutterStylePtrOutputWithContext(context.Background())
}

func (o ThemeGutterStyleOutput) ToThemeGutterStylePtrOutputWithContext(ctx context.Context) ThemeGutterStylePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThemeGutterStyle) *ThemeGutterStyle {
		return &v
	}).(ThemeGutterStylePtrOutput)
}

// <p>This Boolean value controls whether to display a gutter space between sheet tiles.
//
//	</p>
func (o ThemeGutterStyleOutput) Show() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThemeGutterStyle) *bool { return v.Show }).(pulumi.BoolPtrOutput)
}

type ThemeGutterStylePtrOutput struct{ *pulumi.OutputState }

func (ThemeGutterStylePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeGutterStyle)(nil)).Elem()
}

func (o ThemeGutterStylePtrOutput) ToThemeGutterStylePtrOutput() ThemeGutterStylePtrOutput {
	return o
}

func (o ThemeGutterStylePtrOutput) ToThemeGutterStylePtrOutputWithContext(ctx context.Context) ThemeGutterStylePtrOutput {
	return o
}

func (o ThemeGutterStylePtrOutput) Elem() ThemeGutterStyleOutput {
	return o.ApplyT(func(v *ThemeGutterStyle) ThemeGutterStyle {
		if v != nil {
			return *v
		}
		var ret ThemeGutterStyle
		return ret
	}).(ThemeGutterStyleOutput)
}

// <p>This Boolean value controls whether to display a gutter space between sheet tiles.
//
//	</p>
func (o ThemeGutterStylePtrOutput) Show() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThemeGutterStyle) *bool {
		if v == nil {
			return nil
		}
		return v.Show
	}).(pulumi.BoolPtrOutput)
}

// <p>The display options for margins around the outside edge of sheets.</p>
type ThemeMarginStyle struct {
	// <p>This Boolean value controls whether to display sheet margins.</p>
	Show *bool `pulumi:"show"`
}

// ThemeMarginStyleInput is an input type that accepts ThemeMarginStyleArgs and ThemeMarginStyleOutput values.
// You can construct a concrete instance of `ThemeMarginStyleInput` via:
//
//	ThemeMarginStyleArgs{...}
type ThemeMarginStyleInput interface {
	pulumi.Input

	ToThemeMarginStyleOutput() ThemeMarginStyleOutput
	ToThemeMarginStyleOutputWithContext(context.Context) ThemeMarginStyleOutput
}

// <p>The display options for margins around the outside edge of sheets.</p>
type ThemeMarginStyleArgs struct {
	// <p>This Boolean value controls whether to display sheet margins.</p>
	Show pulumi.BoolPtrInput `pulumi:"show"`
}

func (ThemeMarginStyleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeMarginStyle)(nil)).Elem()
}

func (i ThemeMarginStyleArgs) ToThemeMarginStyleOutput() ThemeMarginStyleOutput {
	return i.ToThemeMarginStyleOutputWithContext(context.Background())
}

func (i ThemeMarginStyleArgs) ToThemeMarginStyleOutputWithContext(ctx context.Context) ThemeMarginStyleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeMarginStyleOutput)
}

func (i ThemeMarginStyleArgs) ToThemeMarginStylePtrOutput() ThemeMarginStylePtrOutput {
	return i.ToThemeMarginStylePtrOutputWithContext(context.Background())
}

func (i ThemeMarginStyleArgs) ToThemeMarginStylePtrOutputWithContext(ctx context.Context) ThemeMarginStylePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeMarginStyleOutput).ToThemeMarginStylePtrOutputWithContext(ctx)
}

// ThemeMarginStylePtrInput is an input type that accepts ThemeMarginStyleArgs, ThemeMarginStylePtr and ThemeMarginStylePtrOutput values.
// You can construct a concrete instance of `ThemeMarginStylePtrInput` via:
//
//	        ThemeMarginStyleArgs{...}
//
//	or:
//
//	        nil
type ThemeMarginStylePtrInput interface {
	pulumi.Input

	ToThemeMarginStylePtrOutput() ThemeMarginStylePtrOutput
	ToThemeMarginStylePtrOutputWithContext(context.Context) ThemeMarginStylePtrOutput
}

type themeMarginStylePtrType ThemeMarginStyleArgs

func ThemeMarginStylePtr(v *ThemeMarginStyleArgs) ThemeMarginStylePtrInput {
	return (*themeMarginStylePtrType)(v)
}

func (*themeMarginStylePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeMarginStyle)(nil)).Elem()
}

func (i *themeMarginStylePtrType) ToThemeMarginStylePtrOutput() ThemeMarginStylePtrOutput {
	return i.ToThemeMarginStylePtrOutputWithContext(context.Background())
}

func (i *themeMarginStylePtrType) ToThemeMarginStylePtrOutputWithContext(ctx context.Context) ThemeMarginStylePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeMarginStylePtrOutput)
}

// <p>The display options for margins around the outside edge of sheets.</p>
type ThemeMarginStyleOutput struct{ *pulumi.OutputState }

func (ThemeMarginStyleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeMarginStyle)(nil)).Elem()
}

func (o ThemeMarginStyleOutput) ToThemeMarginStyleOutput() ThemeMarginStyleOutput {
	return o
}

func (o ThemeMarginStyleOutput) ToThemeMarginStyleOutputWithContext(ctx context.Context) ThemeMarginStyleOutput {
	return o
}

func (o ThemeMarginStyleOutput) ToThemeMarginStylePtrOutput() ThemeMarginStylePtrOutput {
	return o.ToThemeMarginStylePtrOutputWithContext(context.Background())
}

func (o ThemeMarginStyleOutput) ToThemeMarginStylePtrOutputWithContext(ctx context.Context) ThemeMarginStylePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThemeMarginStyle) *ThemeMarginStyle {
		return &v
	}).(ThemeMarginStylePtrOutput)
}

// <p>This Boolean value controls whether to display sheet margins.</p>
func (o ThemeMarginStyleOutput) Show() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThemeMarginStyle) *bool { return v.Show }).(pulumi.BoolPtrOutput)
}

type ThemeMarginStylePtrOutput struct{ *pulumi.OutputState }

func (ThemeMarginStylePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeMarginStyle)(nil)).Elem()
}

func (o ThemeMarginStylePtrOutput) ToThemeMarginStylePtrOutput() ThemeMarginStylePtrOutput {
	return o
}

func (o ThemeMarginStylePtrOutput) ToThemeMarginStylePtrOutputWithContext(ctx context.Context) ThemeMarginStylePtrOutput {
	return o
}

func (o ThemeMarginStylePtrOutput) Elem() ThemeMarginStyleOutput {
	return o.ApplyT(func(v *ThemeMarginStyle) ThemeMarginStyle {
		if v != nil {
			return *v
		}
		var ret ThemeMarginStyle
		return ret
	}).(ThemeMarginStyleOutput)
}

// <p>This Boolean value controls whether to display sheet margins.</p>
func (o ThemeMarginStylePtrOutput) Show() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThemeMarginStyle) *bool {
		if v == nil {
			return nil
		}
		return v.Show
	}).(pulumi.BoolPtrOutput)
}

// <p>Permission for the resource.</p>
type ThemeResourcePermission struct {
	// <p>The IAM action to grant or revoke permissions on.</p>
	Actions []string `pulumi:"actions"`
	// <p>The Amazon Resource Name (ARN) of the principal. This can be one of the
	//             following:</p>
	//          <ul>
	//             <li>
	//                <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p>
	//             </li>
	//             <li>
	//                <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p>
	//             </li>
	//             <li>
	//                <p>The ARN of an Amazon Web Services account root: This is an IAM ARN rather than a QuickSight
	//                     ARN. Use this option only to share resources (templates) across Amazon Web Services accounts.
	//                     (This is less common.) </p>
	//             </li>
	//          </ul>
	Principal string `pulumi:"principal"`
}

// ThemeResourcePermissionInput is an input type that accepts ThemeResourcePermissionArgs and ThemeResourcePermissionOutput values.
// You can construct a concrete instance of `ThemeResourcePermissionInput` via:
//
//	ThemeResourcePermissionArgs{...}
type ThemeResourcePermissionInput interface {
	pulumi.Input

	ToThemeResourcePermissionOutput() ThemeResourcePermissionOutput
	ToThemeResourcePermissionOutputWithContext(context.Context) ThemeResourcePermissionOutput
}

// <p>Permission for the resource.</p>
type ThemeResourcePermissionArgs struct {
	// <p>The IAM action to grant or revoke permissions on.</p>
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// <p>The Amazon Resource Name (ARN) of the principal. This can be one of the
	//             following:</p>
	//          <ul>
	//             <li>
	//                <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p>
	//             </li>
	//             <li>
	//                <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p>
	//             </li>
	//             <li>
	//                <p>The ARN of an Amazon Web Services account root: This is an IAM ARN rather than a QuickSight
	//                     ARN. Use this option only to share resources (templates) across Amazon Web Services accounts.
	//                     (This is less common.) </p>
	//             </li>
	//          </ul>
	Principal pulumi.StringInput `pulumi:"principal"`
}

func (ThemeResourcePermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeResourcePermission)(nil)).Elem()
}

func (i ThemeResourcePermissionArgs) ToThemeResourcePermissionOutput() ThemeResourcePermissionOutput {
	return i.ToThemeResourcePermissionOutputWithContext(context.Background())
}

func (i ThemeResourcePermissionArgs) ToThemeResourcePermissionOutputWithContext(ctx context.Context) ThemeResourcePermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeResourcePermissionOutput)
}

// ThemeResourcePermissionArrayInput is an input type that accepts ThemeResourcePermissionArray and ThemeResourcePermissionArrayOutput values.
// You can construct a concrete instance of `ThemeResourcePermissionArrayInput` via:
//
//	ThemeResourcePermissionArray{ ThemeResourcePermissionArgs{...} }
type ThemeResourcePermissionArrayInput interface {
	pulumi.Input

	ToThemeResourcePermissionArrayOutput() ThemeResourcePermissionArrayOutput
	ToThemeResourcePermissionArrayOutputWithContext(context.Context) ThemeResourcePermissionArrayOutput
}

type ThemeResourcePermissionArray []ThemeResourcePermissionInput

func (ThemeResourcePermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThemeResourcePermission)(nil)).Elem()
}

func (i ThemeResourcePermissionArray) ToThemeResourcePermissionArrayOutput() ThemeResourcePermissionArrayOutput {
	return i.ToThemeResourcePermissionArrayOutputWithContext(context.Background())
}

func (i ThemeResourcePermissionArray) ToThemeResourcePermissionArrayOutputWithContext(ctx context.Context) ThemeResourcePermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeResourcePermissionArrayOutput)
}

// <p>Permission for the resource.</p>
type ThemeResourcePermissionOutput struct{ *pulumi.OutputState }

func (ThemeResourcePermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeResourcePermission)(nil)).Elem()
}

func (o ThemeResourcePermissionOutput) ToThemeResourcePermissionOutput() ThemeResourcePermissionOutput {
	return o
}

func (o ThemeResourcePermissionOutput) ToThemeResourcePermissionOutputWithContext(ctx context.Context) ThemeResourcePermissionOutput {
	return o
}

// <p>The IAM action to grant or revoke permissions on.</p>
func (o ThemeResourcePermissionOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThemeResourcePermission) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// <p>The Amazon Resource Name (ARN) of the principal. This can be one of the
//
//	   following:</p>
//	<ul>
//	   <li>
//	      <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p>
//	   </li>
//	   <li>
//	      <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p>
//	   </li>
//	   <li>
//	      <p>The ARN of an Amazon Web Services account root: This is an IAM ARN rather than a QuickSight
//	           ARN. Use this option only to share resources (templates) across Amazon Web Services accounts.
//	           (This is less common.) </p>
//	   </li>
//	</ul>
func (o ThemeResourcePermissionOutput) Principal() pulumi.StringOutput {
	return o.ApplyT(func(v ThemeResourcePermission) string { return v.Principal }).(pulumi.StringOutput)
}

type ThemeResourcePermissionArrayOutput struct{ *pulumi.OutputState }

func (ThemeResourcePermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThemeResourcePermission)(nil)).Elem()
}

func (o ThemeResourcePermissionArrayOutput) ToThemeResourcePermissionArrayOutput() ThemeResourcePermissionArrayOutput {
	return o
}

func (o ThemeResourcePermissionArrayOutput) ToThemeResourcePermissionArrayOutputWithContext(ctx context.Context) ThemeResourcePermissionArrayOutput {
	return o
}

func (o ThemeResourcePermissionArrayOutput) Index(i pulumi.IntInput) ThemeResourcePermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThemeResourcePermission {
		return vs[0].([]ThemeResourcePermission)[vs[1].(int)]
	}).(ThemeResourcePermissionOutput)
}

// <p>The theme display options for sheets. </p>
type ThemeSheetStyle struct {
	// The display options for tiles.
	Tile *ThemeTileStyle `pulumi:"tile"`
	// The layout options for tiles.
	TileLayout *ThemeTileLayoutStyle `pulumi:"tileLayout"`
}

// ThemeSheetStyleInput is an input type that accepts ThemeSheetStyleArgs and ThemeSheetStyleOutput values.
// You can construct a concrete instance of `ThemeSheetStyleInput` via:
//
//	ThemeSheetStyleArgs{...}
type ThemeSheetStyleInput interface {
	pulumi.Input

	ToThemeSheetStyleOutput() ThemeSheetStyleOutput
	ToThemeSheetStyleOutputWithContext(context.Context) ThemeSheetStyleOutput
}

// <p>The theme display options for sheets. </p>
type ThemeSheetStyleArgs struct {
	// The display options for tiles.
	Tile ThemeTileStylePtrInput `pulumi:"tile"`
	// The layout options for tiles.
	TileLayout ThemeTileLayoutStylePtrInput `pulumi:"tileLayout"`
}

func (ThemeSheetStyleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeSheetStyle)(nil)).Elem()
}

func (i ThemeSheetStyleArgs) ToThemeSheetStyleOutput() ThemeSheetStyleOutput {
	return i.ToThemeSheetStyleOutputWithContext(context.Background())
}

func (i ThemeSheetStyleArgs) ToThemeSheetStyleOutputWithContext(ctx context.Context) ThemeSheetStyleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeSheetStyleOutput)
}

func (i ThemeSheetStyleArgs) ToThemeSheetStylePtrOutput() ThemeSheetStylePtrOutput {
	return i.ToThemeSheetStylePtrOutputWithContext(context.Background())
}

func (i ThemeSheetStyleArgs) ToThemeSheetStylePtrOutputWithContext(ctx context.Context) ThemeSheetStylePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeSheetStyleOutput).ToThemeSheetStylePtrOutputWithContext(ctx)
}

// ThemeSheetStylePtrInput is an input type that accepts ThemeSheetStyleArgs, ThemeSheetStylePtr and ThemeSheetStylePtrOutput values.
// You can construct a concrete instance of `ThemeSheetStylePtrInput` via:
//
//	        ThemeSheetStyleArgs{...}
//
//	or:
//
//	        nil
type ThemeSheetStylePtrInput interface {
	pulumi.Input

	ToThemeSheetStylePtrOutput() ThemeSheetStylePtrOutput
	ToThemeSheetStylePtrOutputWithContext(context.Context) ThemeSheetStylePtrOutput
}

type themeSheetStylePtrType ThemeSheetStyleArgs

func ThemeSheetStylePtr(v *ThemeSheetStyleArgs) ThemeSheetStylePtrInput {
	return (*themeSheetStylePtrType)(v)
}

func (*themeSheetStylePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeSheetStyle)(nil)).Elem()
}

func (i *themeSheetStylePtrType) ToThemeSheetStylePtrOutput() ThemeSheetStylePtrOutput {
	return i.ToThemeSheetStylePtrOutputWithContext(context.Background())
}

func (i *themeSheetStylePtrType) ToThemeSheetStylePtrOutputWithContext(ctx context.Context) ThemeSheetStylePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeSheetStylePtrOutput)
}

// <p>The theme display options for sheets. </p>
type ThemeSheetStyleOutput struct{ *pulumi.OutputState }

func (ThemeSheetStyleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeSheetStyle)(nil)).Elem()
}

func (o ThemeSheetStyleOutput) ToThemeSheetStyleOutput() ThemeSheetStyleOutput {
	return o
}

func (o ThemeSheetStyleOutput) ToThemeSheetStyleOutputWithContext(ctx context.Context) ThemeSheetStyleOutput {
	return o
}

func (o ThemeSheetStyleOutput) ToThemeSheetStylePtrOutput() ThemeSheetStylePtrOutput {
	return o.ToThemeSheetStylePtrOutputWithContext(context.Background())
}

func (o ThemeSheetStyleOutput) ToThemeSheetStylePtrOutputWithContext(ctx context.Context) ThemeSheetStylePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThemeSheetStyle) *ThemeSheetStyle {
		return &v
	}).(ThemeSheetStylePtrOutput)
}

// The display options for tiles.
func (o ThemeSheetStyleOutput) Tile() ThemeTileStylePtrOutput {
	return o.ApplyT(func(v ThemeSheetStyle) *ThemeTileStyle { return v.Tile }).(ThemeTileStylePtrOutput)
}

// The layout options for tiles.
func (o ThemeSheetStyleOutput) TileLayout() ThemeTileLayoutStylePtrOutput {
	return o.ApplyT(func(v ThemeSheetStyle) *ThemeTileLayoutStyle { return v.TileLayout }).(ThemeTileLayoutStylePtrOutput)
}

type ThemeSheetStylePtrOutput struct{ *pulumi.OutputState }

func (ThemeSheetStylePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeSheetStyle)(nil)).Elem()
}

func (o ThemeSheetStylePtrOutput) ToThemeSheetStylePtrOutput() ThemeSheetStylePtrOutput {
	return o
}

func (o ThemeSheetStylePtrOutput) ToThemeSheetStylePtrOutputWithContext(ctx context.Context) ThemeSheetStylePtrOutput {
	return o
}

func (o ThemeSheetStylePtrOutput) Elem() ThemeSheetStyleOutput {
	return o.ApplyT(func(v *ThemeSheetStyle) ThemeSheetStyle {
		if v != nil {
			return *v
		}
		var ret ThemeSheetStyle
		return ret
	}).(ThemeSheetStyleOutput)
}

// The display options for tiles.
func (o ThemeSheetStylePtrOutput) Tile() ThemeTileStylePtrOutput {
	return o.ApplyT(func(v *ThemeSheetStyle) *ThemeTileStyle {
		if v == nil {
			return nil
		}
		return v.Tile
	}).(ThemeTileStylePtrOutput)
}

// The layout options for tiles.
func (o ThemeSheetStylePtrOutput) TileLayout() ThemeTileLayoutStylePtrOutput {
	return o.ApplyT(func(v *ThemeSheetStyle) *ThemeTileLayoutStyle {
		if v == nil {
			return nil
		}
		return v.TileLayout
	}).(ThemeTileLayoutStylePtrOutput)
}

// <p>The key or keys of the key-value pairs for the resource tag or tags assigned to the
//
//	resource.</p>
type ThemeTag struct {
	// <p>Tag key.</p>
	Key string `pulumi:"key"`
	// <p>Tag value.</p>
	Value string `pulumi:"value"`
}

// <p>The display options for the layout of tiles on a sheet.</p>
type ThemeTileLayoutStyle struct {
	// The gutter settings that apply between tiles.
	Gutter *ThemeGutterStyle `pulumi:"gutter"`
	// The margin settings that apply around the outside edge of sheets.
	Margin *ThemeMarginStyle `pulumi:"margin"`
}

// ThemeTileLayoutStyleInput is an input type that accepts ThemeTileLayoutStyleArgs and ThemeTileLayoutStyleOutput values.
// You can construct a concrete instance of `ThemeTileLayoutStyleInput` via:
//
//	ThemeTileLayoutStyleArgs{...}
type ThemeTileLayoutStyleInput interface {
	pulumi.Input

	ToThemeTileLayoutStyleOutput() ThemeTileLayoutStyleOutput
	ToThemeTileLayoutStyleOutputWithContext(context.Context) ThemeTileLayoutStyleOutput
}

// <p>The display options for the layout of tiles on a sheet.</p>
type ThemeTileLayoutStyleArgs struct {
	// The gutter settings that apply between tiles.
	Gutter ThemeGutterStylePtrInput `pulumi:"gutter"`
	// The margin settings that apply around the outside edge of sheets.
	Margin ThemeMarginStylePtrInput `pulumi:"margin"`
}

func (ThemeTileLayoutStyleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeTileLayoutStyle)(nil)).Elem()
}

func (i ThemeTileLayoutStyleArgs) ToThemeTileLayoutStyleOutput() ThemeTileLayoutStyleOutput {
	return i.ToThemeTileLayoutStyleOutputWithContext(context.Background())
}

func (i ThemeTileLayoutStyleArgs) ToThemeTileLayoutStyleOutputWithContext(ctx context.Context) ThemeTileLayoutStyleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeTileLayoutStyleOutput)
}

func (i ThemeTileLayoutStyleArgs) ToThemeTileLayoutStylePtrOutput() ThemeTileLayoutStylePtrOutput {
	return i.ToThemeTileLayoutStylePtrOutputWithContext(context.Background())
}

func (i ThemeTileLayoutStyleArgs) ToThemeTileLayoutStylePtrOutputWithContext(ctx context.Context) ThemeTileLayoutStylePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeTileLayoutStyleOutput).ToThemeTileLayoutStylePtrOutputWithContext(ctx)
}

// ThemeTileLayoutStylePtrInput is an input type that accepts ThemeTileLayoutStyleArgs, ThemeTileLayoutStylePtr and ThemeTileLayoutStylePtrOutput values.
// You can construct a concrete instance of `ThemeTileLayoutStylePtrInput` via:
//
//	        ThemeTileLayoutStyleArgs{...}
//
//	or:
//
//	        nil
type ThemeTileLayoutStylePtrInput interface {
	pulumi.Input

	ToThemeTileLayoutStylePtrOutput() ThemeTileLayoutStylePtrOutput
	ToThemeTileLayoutStylePtrOutputWithContext(context.Context) ThemeTileLayoutStylePtrOutput
}

type themeTileLayoutStylePtrType ThemeTileLayoutStyleArgs

func ThemeTileLayoutStylePtr(v *ThemeTileLayoutStyleArgs) ThemeTileLayoutStylePtrInput {
	return (*themeTileLayoutStylePtrType)(v)
}

func (*themeTileLayoutStylePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeTileLayoutStyle)(nil)).Elem()
}

func (i *themeTileLayoutStylePtrType) ToThemeTileLayoutStylePtrOutput() ThemeTileLayoutStylePtrOutput {
	return i.ToThemeTileLayoutStylePtrOutputWithContext(context.Background())
}

func (i *themeTileLayoutStylePtrType) ToThemeTileLayoutStylePtrOutputWithContext(ctx context.Context) ThemeTileLayoutStylePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeTileLayoutStylePtrOutput)
}

// <p>The display options for the layout of tiles on a sheet.</p>
type ThemeTileLayoutStyleOutput struct{ *pulumi.OutputState }

func (ThemeTileLayoutStyleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeTileLayoutStyle)(nil)).Elem()
}

func (o ThemeTileLayoutStyleOutput) ToThemeTileLayoutStyleOutput() ThemeTileLayoutStyleOutput {
	return o
}

func (o ThemeTileLayoutStyleOutput) ToThemeTileLayoutStyleOutputWithContext(ctx context.Context) ThemeTileLayoutStyleOutput {
	return o
}

func (o ThemeTileLayoutStyleOutput) ToThemeTileLayoutStylePtrOutput() ThemeTileLayoutStylePtrOutput {
	return o.ToThemeTileLayoutStylePtrOutputWithContext(context.Background())
}

func (o ThemeTileLayoutStyleOutput) ToThemeTileLayoutStylePtrOutputWithContext(ctx context.Context) ThemeTileLayoutStylePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThemeTileLayoutStyle) *ThemeTileLayoutStyle {
		return &v
	}).(ThemeTileLayoutStylePtrOutput)
}

// The gutter settings that apply between tiles.
func (o ThemeTileLayoutStyleOutput) Gutter() ThemeGutterStylePtrOutput {
	return o.ApplyT(func(v ThemeTileLayoutStyle) *ThemeGutterStyle { return v.Gutter }).(ThemeGutterStylePtrOutput)
}

// The margin settings that apply around the outside edge of sheets.
func (o ThemeTileLayoutStyleOutput) Margin() ThemeMarginStylePtrOutput {
	return o.ApplyT(func(v ThemeTileLayoutStyle) *ThemeMarginStyle { return v.Margin }).(ThemeMarginStylePtrOutput)
}

type ThemeTileLayoutStylePtrOutput struct{ *pulumi.OutputState }

func (ThemeTileLayoutStylePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeTileLayoutStyle)(nil)).Elem()
}

func (o ThemeTileLayoutStylePtrOutput) ToThemeTileLayoutStylePtrOutput() ThemeTileLayoutStylePtrOutput {
	return o
}

func (o ThemeTileLayoutStylePtrOutput) ToThemeTileLayoutStylePtrOutputWithContext(ctx context.Context) ThemeTileLayoutStylePtrOutput {
	return o
}

func (o ThemeTileLayoutStylePtrOutput) Elem() ThemeTileLayoutStyleOutput {
	return o.ApplyT(func(v *ThemeTileLayoutStyle) ThemeTileLayoutStyle {
		if v != nil {
			return *v
		}
		var ret ThemeTileLayoutStyle
		return ret
	}).(ThemeTileLayoutStyleOutput)
}

// The gutter settings that apply between tiles.
func (o ThemeTileLayoutStylePtrOutput) Gutter() ThemeGutterStylePtrOutput {
	return o.ApplyT(func(v *ThemeTileLayoutStyle) *ThemeGutterStyle {
		if v == nil {
			return nil
		}
		return v.Gutter
	}).(ThemeGutterStylePtrOutput)
}

// The margin settings that apply around the outside edge of sheets.
func (o ThemeTileLayoutStylePtrOutput) Margin() ThemeMarginStylePtrOutput {
	return o.ApplyT(func(v *ThemeTileLayoutStyle) *ThemeMarginStyle {
		if v == nil {
			return nil
		}
		return v.Margin
	}).(ThemeMarginStylePtrOutput)
}

// <p>Display options related to tiles on a sheet.</p>
type ThemeTileStyle struct {
	// The border around a tile.
	Border *ThemeBorderStyle `pulumi:"border"`
}

// ThemeTileStyleInput is an input type that accepts ThemeTileStyleArgs and ThemeTileStyleOutput values.
// You can construct a concrete instance of `ThemeTileStyleInput` via:
//
//	ThemeTileStyleArgs{...}
type ThemeTileStyleInput interface {
	pulumi.Input

	ToThemeTileStyleOutput() ThemeTileStyleOutput
	ToThemeTileStyleOutputWithContext(context.Context) ThemeTileStyleOutput
}

// <p>Display options related to tiles on a sheet.</p>
type ThemeTileStyleArgs struct {
	// The border around a tile.
	Border ThemeBorderStylePtrInput `pulumi:"border"`
}

func (ThemeTileStyleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeTileStyle)(nil)).Elem()
}

func (i ThemeTileStyleArgs) ToThemeTileStyleOutput() ThemeTileStyleOutput {
	return i.ToThemeTileStyleOutputWithContext(context.Background())
}

func (i ThemeTileStyleArgs) ToThemeTileStyleOutputWithContext(ctx context.Context) ThemeTileStyleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeTileStyleOutput)
}

func (i ThemeTileStyleArgs) ToThemeTileStylePtrOutput() ThemeTileStylePtrOutput {
	return i.ToThemeTileStylePtrOutputWithContext(context.Background())
}

func (i ThemeTileStyleArgs) ToThemeTileStylePtrOutputWithContext(ctx context.Context) ThemeTileStylePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeTileStyleOutput).ToThemeTileStylePtrOutputWithContext(ctx)
}

// ThemeTileStylePtrInput is an input type that accepts ThemeTileStyleArgs, ThemeTileStylePtr and ThemeTileStylePtrOutput values.
// You can construct a concrete instance of `ThemeTileStylePtrInput` via:
//
//	        ThemeTileStyleArgs{...}
//
//	or:
//
//	        nil
type ThemeTileStylePtrInput interface {
	pulumi.Input

	ToThemeTileStylePtrOutput() ThemeTileStylePtrOutput
	ToThemeTileStylePtrOutputWithContext(context.Context) ThemeTileStylePtrOutput
}

type themeTileStylePtrType ThemeTileStyleArgs

func ThemeTileStylePtr(v *ThemeTileStyleArgs) ThemeTileStylePtrInput {
	return (*themeTileStylePtrType)(v)
}

func (*themeTileStylePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeTileStyle)(nil)).Elem()
}

func (i *themeTileStylePtrType) ToThemeTileStylePtrOutput() ThemeTileStylePtrOutput {
	return i.ToThemeTileStylePtrOutputWithContext(context.Background())
}

func (i *themeTileStylePtrType) ToThemeTileStylePtrOutputWithContext(ctx context.Context) ThemeTileStylePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeTileStylePtrOutput)
}

// <p>Display options related to tiles on a sheet.</p>
type ThemeTileStyleOutput struct{ *pulumi.OutputState }

func (ThemeTileStyleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeTileStyle)(nil)).Elem()
}

func (o ThemeTileStyleOutput) ToThemeTileStyleOutput() ThemeTileStyleOutput {
	return o
}

func (o ThemeTileStyleOutput) ToThemeTileStyleOutputWithContext(ctx context.Context) ThemeTileStyleOutput {
	return o
}

func (o ThemeTileStyleOutput) ToThemeTileStylePtrOutput() ThemeTileStylePtrOutput {
	return o.ToThemeTileStylePtrOutputWithContext(context.Background())
}

func (o ThemeTileStyleOutput) ToThemeTileStylePtrOutputWithContext(ctx context.Context) ThemeTileStylePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThemeTileStyle) *ThemeTileStyle {
		return &v
	}).(ThemeTileStylePtrOutput)
}

// The border around a tile.
func (o ThemeTileStyleOutput) Border() ThemeBorderStylePtrOutput {
	return o.ApplyT(func(v ThemeTileStyle) *ThemeBorderStyle { return v.Border }).(ThemeBorderStylePtrOutput)
}

type ThemeTileStylePtrOutput struct{ *pulumi.OutputState }

func (ThemeTileStylePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeTileStyle)(nil)).Elem()
}

func (o ThemeTileStylePtrOutput) ToThemeTileStylePtrOutput() ThemeTileStylePtrOutput {
	return o
}

func (o ThemeTileStylePtrOutput) ToThemeTileStylePtrOutputWithContext(ctx context.Context) ThemeTileStylePtrOutput {
	return o
}

func (o ThemeTileStylePtrOutput) Elem() ThemeTileStyleOutput {
	return o.ApplyT(func(v *ThemeTileStyle) ThemeTileStyle {
		if v != nil {
			return *v
		}
		var ret ThemeTileStyle
		return ret
	}).(ThemeTileStyleOutput)
}

// The border around a tile.
func (o ThemeTileStylePtrOutput) Border() ThemeBorderStylePtrOutput {
	return o.ApplyT(func(v *ThemeTileStyle) *ThemeBorderStyle {
		if v == nil {
			return nil
		}
		return v.Border
	}).(ThemeBorderStylePtrOutput)
}

type ThemeTypography struct {
	// Determines the list of font families.
	FontFamilies []ThemeFont `pulumi:"fontFamilies"`
}

// ThemeTypographyInput is an input type that accepts ThemeTypographyArgs and ThemeTypographyOutput values.
// You can construct a concrete instance of `ThemeTypographyInput` via:
//
//	ThemeTypographyArgs{...}
type ThemeTypographyInput interface {
	pulumi.Input

	ToThemeTypographyOutput() ThemeTypographyOutput
	ToThemeTypographyOutputWithContext(context.Context) ThemeTypographyOutput
}

type ThemeTypographyArgs struct {
	// Determines the list of font families.
	FontFamilies ThemeFontArrayInput `pulumi:"fontFamilies"`
}

func (ThemeTypographyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeTypography)(nil)).Elem()
}

func (i ThemeTypographyArgs) ToThemeTypographyOutput() ThemeTypographyOutput {
	return i.ToThemeTypographyOutputWithContext(context.Background())
}

func (i ThemeTypographyArgs) ToThemeTypographyOutputWithContext(ctx context.Context) ThemeTypographyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeTypographyOutput)
}

func (i ThemeTypographyArgs) ToThemeTypographyPtrOutput() ThemeTypographyPtrOutput {
	return i.ToThemeTypographyPtrOutputWithContext(context.Background())
}

func (i ThemeTypographyArgs) ToThemeTypographyPtrOutputWithContext(ctx context.Context) ThemeTypographyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeTypographyOutput).ToThemeTypographyPtrOutputWithContext(ctx)
}

// ThemeTypographyPtrInput is an input type that accepts ThemeTypographyArgs, ThemeTypographyPtr and ThemeTypographyPtrOutput values.
// You can construct a concrete instance of `ThemeTypographyPtrInput` via:
//
//	        ThemeTypographyArgs{...}
//
//	or:
//
//	        nil
type ThemeTypographyPtrInput interface {
	pulumi.Input

	ToThemeTypographyPtrOutput() ThemeTypographyPtrOutput
	ToThemeTypographyPtrOutputWithContext(context.Context) ThemeTypographyPtrOutput
}

type themeTypographyPtrType ThemeTypographyArgs

func ThemeTypographyPtr(v *ThemeTypographyArgs) ThemeTypographyPtrInput {
	return (*themeTypographyPtrType)(v)
}

func (*themeTypographyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeTypography)(nil)).Elem()
}

func (i *themeTypographyPtrType) ToThemeTypographyPtrOutput() ThemeTypographyPtrOutput {
	return i.ToThemeTypographyPtrOutputWithContext(context.Background())
}

func (i *themeTypographyPtrType) ToThemeTypographyPtrOutputWithContext(ctx context.Context) ThemeTypographyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeTypographyPtrOutput)
}

type ThemeTypographyOutput struct{ *pulumi.OutputState }

func (ThemeTypographyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeTypography)(nil)).Elem()
}

func (o ThemeTypographyOutput) ToThemeTypographyOutput() ThemeTypographyOutput {
	return o
}

func (o ThemeTypographyOutput) ToThemeTypographyOutputWithContext(ctx context.Context) ThemeTypographyOutput {
	return o
}

func (o ThemeTypographyOutput) ToThemeTypographyPtrOutput() ThemeTypographyPtrOutput {
	return o.ToThemeTypographyPtrOutputWithContext(context.Background())
}

func (o ThemeTypographyOutput) ToThemeTypographyPtrOutputWithContext(ctx context.Context) ThemeTypographyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThemeTypography) *ThemeTypography {
		return &v
	}).(ThemeTypographyPtrOutput)
}

// Determines the list of font families.
func (o ThemeTypographyOutput) FontFamilies() ThemeFontArrayOutput {
	return o.ApplyT(func(v ThemeTypography) []ThemeFont { return v.FontFamilies }).(ThemeFontArrayOutput)
}

type ThemeTypographyPtrOutput struct{ *pulumi.OutputState }

func (ThemeTypographyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeTypography)(nil)).Elem()
}

func (o ThemeTypographyPtrOutput) ToThemeTypographyPtrOutput() ThemeTypographyPtrOutput {
	return o
}

func (o ThemeTypographyPtrOutput) ToThemeTypographyPtrOutputWithContext(ctx context.Context) ThemeTypographyPtrOutput {
	return o
}

func (o ThemeTypographyPtrOutput) Elem() ThemeTypographyOutput {
	return o.ApplyT(func(v *ThemeTypography) ThemeTypography {
		if v != nil {
			return *v
		}
		var ret ThemeTypography
		return ret
	}).(ThemeTypographyOutput)
}

// Determines the list of font families.
func (o ThemeTypographyPtrOutput) FontFamilies() ThemeFontArrayOutput {
	return o.ApplyT(func(v *ThemeTypography) []ThemeFont {
		if v == nil {
			return nil
		}
		return v.FontFamilies
	}).(ThemeFontArrayOutput)
}

// <p>The theme colors that apply to UI and to charts, excluding data colors. The colors
//
//	   description is a hexadecimal color code that consists of six alphanumerical characters,
//	   prefixed with <code>#</code>, for example #37BFF5. For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/themes-in-quicksight.html">Using Themes in Amazon QuickSight</a> in the <i>Amazon QuickSight User
//	       Guide.</i>
//	</p>
type ThemeUiColorPalette struct {
	// <p>This color is that applies to selected states and buttons.</p>
	Accent *string `pulumi:"accent"`
	// <p>The foreground color that applies to any text or other elements that appear over the
	//             accent color.</p>
	AccentForeground *string `pulumi:"accentForeground"`
	// <p>The color that applies to error messages.</p>
	Danger *string `pulumi:"danger"`
	// <p>The foreground color that applies to any text or other elements that appear over the
	//             error color.</p>
	DangerForeground *string `pulumi:"dangerForeground"`
	// <p>The color that applies to the names of fields that are identified as
	//             dimensions.</p>
	Dimension *string `pulumi:"dimension"`
	// <p>The foreground color that applies to any text or other elements that appear over the
	//             dimension color.</p>
	DimensionForeground *string `pulumi:"dimensionForeground"`
	// <p>The color that applies to the names of fields that are identified as measures.</p>
	Measure *string `pulumi:"measure"`
	// <p>The foreground color that applies to any text or other elements that appear over the
	//             measure color.</p>
	MeasureForeground *string `pulumi:"measureForeground"`
	// <p>The background color that applies to visuals and other high emphasis UI.</p>
	PrimaryBackground *string `pulumi:"primaryBackground"`
	// <p>The color of text and other foreground elements that appear over the primary
	//             background regions, such as grid lines, borders, table banding, icons, and so on.</p>
	PrimaryForeground *string `pulumi:"primaryForeground"`
	// <p>The background color that applies to the sheet background and sheet controls.</p>
	SecondaryBackground *string `pulumi:"secondaryBackground"`
	// <p>The foreground color that applies to any sheet title, sheet control text, or UI that
	//             appears over the secondary background.</p>
	SecondaryForeground *string `pulumi:"secondaryForeground"`
	// <p>The color that applies to success messages, for example the check mark for a
	//             successful download.</p>
	Success *string `pulumi:"success"`
	// <p>The foreground color that applies to any text or other elements that appear over the
	//             success color.</p>
	SuccessForeground *string `pulumi:"successForeground"`
	// <p>This color that applies to warning and informational messages.</p>
	Warning *string `pulumi:"warning"`
	// <p>The foreground color that applies to any text or other elements that appear over the
	//             warning color.</p>
	WarningForeground *string `pulumi:"warningForeground"`
}

// ThemeUiColorPaletteInput is an input type that accepts ThemeUiColorPaletteArgs and ThemeUiColorPaletteOutput values.
// You can construct a concrete instance of `ThemeUiColorPaletteInput` via:
//
//	ThemeUiColorPaletteArgs{...}
type ThemeUiColorPaletteInput interface {
	pulumi.Input

	ToThemeUiColorPaletteOutput() ThemeUiColorPaletteOutput
	ToThemeUiColorPaletteOutputWithContext(context.Context) ThemeUiColorPaletteOutput
}

// <p>The theme colors that apply to UI and to charts, excluding data colors. The colors
//
//	   description is a hexadecimal color code that consists of six alphanumerical characters,
//	   prefixed with <code>#</code>, for example #37BFF5. For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/themes-in-quicksight.html">Using Themes in Amazon QuickSight</a> in the <i>Amazon QuickSight User
//	       Guide.</i>
//	</p>
type ThemeUiColorPaletteArgs struct {
	// <p>This color is that applies to selected states and buttons.</p>
	Accent pulumi.StringPtrInput `pulumi:"accent"`
	// <p>The foreground color that applies to any text or other elements that appear over the
	//             accent color.</p>
	AccentForeground pulumi.StringPtrInput `pulumi:"accentForeground"`
	// <p>The color that applies to error messages.</p>
	Danger pulumi.StringPtrInput `pulumi:"danger"`
	// <p>The foreground color that applies to any text or other elements that appear over the
	//             error color.</p>
	DangerForeground pulumi.StringPtrInput `pulumi:"dangerForeground"`
	// <p>The color that applies to the names of fields that are identified as
	//             dimensions.</p>
	Dimension pulumi.StringPtrInput `pulumi:"dimension"`
	// <p>The foreground color that applies to any text or other elements that appear over the
	//             dimension color.</p>
	DimensionForeground pulumi.StringPtrInput `pulumi:"dimensionForeground"`
	// <p>The color that applies to the names of fields that are identified as measures.</p>
	Measure pulumi.StringPtrInput `pulumi:"measure"`
	// <p>The foreground color that applies to any text or other elements that appear over the
	//             measure color.</p>
	MeasureForeground pulumi.StringPtrInput `pulumi:"measureForeground"`
	// <p>The background color that applies to visuals and other high emphasis UI.</p>
	PrimaryBackground pulumi.StringPtrInput `pulumi:"primaryBackground"`
	// <p>The color of text and other foreground elements that appear over the primary
	//             background regions, such as grid lines, borders, table banding, icons, and so on.</p>
	PrimaryForeground pulumi.StringPtrInput `pulumi:"primaryForeground"`
	// <p>The background color that applies to the sheet background and sheet controls.</p>
	SecondaryBackground pulumi.StringPtrInput `pulumi:"secondaryBackground"`
	// <p>The foreground color that applies to any sheet title, sheet control text, or UI that
	//             appears over the secondary background.</p>
	SecondaryForeground pulumi.StringPtrInput `pulumi:"secondaryForeground"`
	// <p>The color that applies to success messages, for example the check mark for a
	//             successful download.</p>
	Success pulumi.StringPtrInput `pulumi:"success"`
	// <p>The foreground color that applies to any text or other elements that appear over the
	//             success color.</p>
	SuccessForeground pulumi.StringPtrInput `pulumi:"successForeground"`
	// <p>This color that applies to warning and informational messages.</p>
	Warning pulumi.StringPtrInput `pulumi:"warning"`
	// <p>The foreground color that applies to any text or other elements that appear over the
	//             warning color.</p>
	WarningForeground pulumi.StringPtrInput `pulumi:"warningForeground"`
}

func (ThemeUiColorPaletteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeUiColorPalette)(nil)).Elem()
}

func (i ThemeUiColorPaletteArgs) ToThemeUiColorPaletteOutput() ThemeUiColorPaletteOutput {
	return i.ToThemeUiColorPaletteOutputWithContext(context.Background())
}

func (i ThemeUiColorPaletteArgs) ToThemeUiColorPaletteOutputWithContext(ctx context.Context) ThemeUiColorPaletteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeUiColorPaletteOutput)
}

func (i ThemeUiColorPaletteArgs) ToThemeUiColorPalettePtrOutput() ThemeUiColorPalettePtrOutput {
	return i.ToThemeUiColorPalettePtrOutputWithContext(context.Background())
}

func (i ThemeUiColorPaletteArgs) ToThemeUiColorPalettePtrOutputWithContext(ctx context.Context) ThemeUiColorPalettePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeUiColorPaletteOutput).ToThemeUiColorPalettePtrOutputWithContext(ctx)
}

// ThemeUiColorPalettePtrInput is an input type that accepts ThemeUiColorPaletteArgs, ThemeUiColorPalettePtr and ThemeUiColorPalettePtrOutput values.
// You can construct a concrete instance of `ThemeUiColorPalettePtrInput` via:
//
//	        ThemeUiColorPaletteArgs{...}
//
//	or:
//
//	        nil
type ThemeUiColorPalettePtrInput interface {
	pulumi.Input

	ToThemeUiColorPalettePtrOutput() ThemeUiColorPalettePtrOutput
	ToThemeUiColorPalettePtrOutputWithContext(context.Context) ThemeUiColorPalettePtrOutput
}

type themeUiColorPalettePtrType ThemeUiColorPaletteArgs

func ThemeUiColorPalettePtr(v *ThemeUiColorPaletteArgs) ThemeUiColorPalettePtrInput {
	return (*themeUiColorPalettePtrType)(v)
}

func (*themeUiColorPalettePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeUiColorPalette)(nil)).Elem()
}

func (i *themeUiColorPalettePtrType) ToThemeUiColorPalettePtrOutput() ThemeUiColorPalettePtrOutput {
	return i.ToThemeUiColorPalettePtrOutputWithContext(context.Background())
}

func (i *themeUiColorPalettePtrType) ToThemeUiColorPalettePtrOutputWithContext(ctx context.Context) ThemeUiColorPalettePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeUiColorPalettePtrOutput)
}

// <p>The theme colors that apply to UI and to charts, excluding data colors. The colors
//
//	   description is a hexadecimal color code that consists of six alphanumerical characters,
//	   prefixed with <code>#</code>, for example #37BFF5. For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/themes-in-quicksight.html">Using Themes in Amazon QuickSight</a> in the <i>Amazon QuickSight User
//	       Guide.</i>
//	</p>
type ThemeUiColorPaletteOutput struct{ *pulumi.OutputState }

func (ThemeUiColorPaletteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeUiColorPalette)(nil)).Elem()
}

func (o ThemeUiColorPaletteOutput) ToThemeUiColorPaletteOutput() ThemeUiColorPaletteOutput {
	return o
}

func (o ThemeUiColorPaletteOutput) ToThemeUiColorPaletteOutputWithContext(ctx context.Context) ThemeUiColorPaletteOutput {
	return o
}

func (o ThemeUiColorPaletteOutput) ToThemeUiColorPalettePtrOutput() ThemeUiColorPalettePtrOutput {
	return o.ToThemeUiColorPalettePtrOutputWithContext(context.Background())
}

func (o ThemeUiColorPaletteOutput) ToThemeUiColorPalettePtrOutputWithContext(ctx context.Context) ThemeUiColorPalettePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThemeUiColorPalette) *ThemeUiColorPalette {
		return &v
	}).(ThemeUiColorPalettePtrOutput)
}

// <p>This color is that applies to selected states and buttons.</p>
func (o ThemeUiColorPaletteOutput) Accent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeUiColorPalette) *string { return v.Accent }).(pulumi.StringPtrOutput)
}

// <p>The foreground color that applies to any text or other elements that appear over the
//
//	accent color.</p>
func (o ThemeUiColorPaletteOutput) AccentForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeUiColorPalette) *string { return v.AccentForeground }).(pulumi.StringPtrOutput)
}

// <p>The color that applies to error messages.</p>
func (o ThemeUiColorPaletteOutput) Danger() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeUiColorPalette) *string { return v.Danger }).(pulumi.StringPtrOutput)
}

// <p>The foreground color that applies to any text or other elements that appear over the
//
//	error color.</p>
func (o ThemeUiColorPaletteOutput) DangerForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeUiColorPalette) *string { return v.DangerForeground }).(pulumi.StringPtrOutput)
}

// <p>The color that applies to the names of fields that are identified as
//
//	dimensions.</p>
func (o ThemeUiColorPaletteOutput) Dimension() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeUiColorPalette) *string { return v.Dimension }).(pulumi.StringPtrOutput)
}

// <p>The foreground color that applies to any text or other elements that appear over the
//
//	dimension color.</p>
func (o ThemeUiColorPaletteOutput) DimensionForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeUiColorPalette) *string { return v.DimensionForeground }).(pulumi.StringPtrOutput)
}

// <p>The color that applies to the names of fields that are identified as measures.</p>
func (o ThemeUiColorPaletteOutput) Measure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeUiColorPalette) *string { return v.Measure }).(pulumi.StringPtrOutput)
}

// <p>The foreground color that applies to any text or other elements that appear over the
//
//	measure color.</p>
func (o ThemeUiColorPaletteOutput) MeasureForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeUiColorPalette) *string { return v.MeasureForeground }).(pulumi.StringPtrOutput)
}

// <p>The background color that applies to visuals and other high emphasis UI.</p>
func (o ThemeUiColorPaletteOutput) PrimaryBackground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeUiColorPalette) *string { return v.PrimaryBackground }).(pulumi.StringPtrOutput)
}

// <p>The color of text and other foreground elements that appear over the primary
//
//	background regions, such as grid lines, borders, table banding, icons, and so on.</p>
func (o ThemeUiColorPaletteOutput) PrimaryForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeUiColorPalette) *string { return v.PrimaryForeground }).(pulumi.StringPtrOutput)
}

// <p>The background color that applies to the sheet background and sheet controls.</p>
func (o ThemeUiColorPaletteOutput) SecondaryBackground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeUiColorPalette) *string { return v.SecondaryBackground }).(pulumi.StringPtrOutput)
}

// <p>The foreground color that applies to any sheet title, sheet control text, or UI that
//
//	appears over the secondary background.</p>
func (o ThemeUiColorPaletteOutput) SecondaryForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeUiColorPalette) *string { return v.SecondaryForeground }).(pulumi.StringPtrOutput)
}

// <p>The color that applies to success messages, for example the check mark for a
//
//	successful download.</p>
func (o ThemeUiColorPaletteOutput) Success() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeUiColorPalette) *string { return v.Success }).(pulumi.StringPtrOutput)
}

// <p>The foreground color that applies to any text or other elements that appear over the
//
//	success color.</p>
func (o ThemeUiColorPaletteOutput) SuccessForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeUiColorPalette) *string { return v.SuccessForeground }).(pulumi.StringPtrOutput)
}

// <p>This color that applies to warning and informational messages.</p>
func (o ThemeUiColorPaletteOutput) Warning() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeUiColorPalette) *string { return v.Warning }).(pulumi.StringPtrOutput)
}

// <p>The foreground color that applies to any text or other elements that appear over the
//
//	warning color.</p>
func (o ThemeUiColorPaletteOutput) WarningForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeUiColorPalette) *string { return v.WarningForeground }).(pulumi.StringPtrOutput)
}

type ThemeUiColorPalettePtrOutput struct{ *pulumi.OutputState }

func (ThemeUiColorPalettePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeUiColorPalette)(nil)).Elem()
}

func (o ThemeUiColorPalettePtrOutput) ToThemeUiColorPalettePtrOutput() ThemeUiColorPalettePtrOutput {
	return o
}

func (o ThemeUiColorPalettePtrOutput) ToThemeUiColorPalettePtrOutputWithContext(ctx context.Context) ThemeUiColorPalettePtrOutput {
	return o
}

func (o ThemeUiColorPalettePtrOutput) Elem() ThemeUiColorPaletteOutput {
	return o.ApplyT(func(v *ThemeUiColorPalette) ThemeUiColorPalette {
		if v != nil {
			return *v
		}
		var ret ThemeUiColorPalette
		return ret
	}).(ThemeUiColorPaletteOutput)
}

// <p>This color is that applies to selected states and buttons.</p>
func (o ThemeUiColorPalettePtrOutput) Accent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeUiColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.Accent
	}).(pulumi.StringPtrOutput)
}

// <p>The foreground color that applies to any text or other elements that appear over the
//
//	accent color.</p>
func (o ThemeUiColorPalettePtrOutput) AccentForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeUiColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.AccentForeground
	}).(pulumi.StringPtrOutput)
}

// <p>The color that applies to error messages.</p>
func (o ThemeUiColorPalettePtrOutput) Danger() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeUiColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.Danger
	}).(pulumi.StringPtrOutput)
}

// <p>The foreground color that applies to any text or other elements that appear over the
//
//	error color.</p>
func (o ThemeUiColorPalettePtrOutput) DangerForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeUiColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.DangerForeground
	}).(pulumi.StringPtrOutput)
}

// <p>The color that applies to the names of fields that are identified as
//
//	dimensions.</p>
func (o ThemeUiColorPalettePtrOutput) Dimension() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeUiColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.Dimension
	}).(pulumi.StringPtrOutput)
}

// <p>The foreground color that applies to any text or other elements that appear over the
//
//	dimension color.</p>
func (o ThemeUiColorPalettePtrOutput) DimensionForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeUiColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.DimensionForeground
	}).(pulumi.StringPtrOutput)
}

// <p>The color that applies to the names of fields that are identified as measures.</p>
func (o ThemeUiColorPalettePtrOutput) Measure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeUiColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.Measure
	}).(pulumi.StringPtrOutput)
}

// <p>The foreground color that applies to any text or other elements that appear over the
//
//	measure color.</p>
func (o ThemeUiColorPalettePtrOutput) MeasureForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeUiColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.MeasureForeground
	}).(pulumi.StringPtrOutput)
}

// <p>The background color that applies to visuals and other high emphasis UI.</p>
func (o ThemeUiColorPalettePtrOutput) PrimaryBackground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeUiColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.PrimaryBackground
	}).(pulumi.StringPtrOutput)
}

// <p>The color of text and other foreground elements that appear over the primary
//
//	background regions, such as grid lines, borders, table banding, icons, and so on.</p>
func (o ThemeUiColorPalettePtrOutput) PrimaryForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeUiColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.PrimaryForeground
	}).(pulumi.StringPtrOutput)
}

// <p>The background color that applies to the sheet background and sheet controls.</p>
func (o ThemeUiColorPalettePtrOutput) SecondaryBackground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeUiColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.SecondaryBackground
	}).(pulumi.StringPtrOutput)
}

// <p>The foreground color that applies to any sheet title, sheet control text, or UI that
//
//	appears over the secondary background.</p>
func (o ThemeUiColorPalettePtrOutput) SecondaryForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeUiColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.SecondaryForeground
	}).(pulumi.StringPtrOutput)
}

// <p>The color that applies to success messages, for example the check mark for a
//
//	successful download.</p>
func (o ThemeUiColorPalettePtrOutput) Success() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeUiColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.Success
	}).(pulumi.StringPtrOutput)
}

// <p>The foreground color that applies to any text or other elements that appear over the
//
//	success color.</p>
func (o ThemeUiColorPalettePtrOutput) SuccessForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeUiColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.SuccessForeground
	}).(pulumi.StringPtrOutput)
}

// <p>This color that applies to warning and informational messages.</p>
func (o ThemeUiColorPalettePtrOutput) Warning() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeUiColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.Warning
	}).(pulumi.StringPtrOutput)
}

// <p>The foreground color that applies to any text or other elements that appear over the
//
//	warning color.</p>
func (o ThemeUiColorPalettePtrOutput) WarningForeground() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeUiColorPalette) *string {
		if v == nil {
			return nil
		}
		return v.WarningForeground
	}).(pulumi.StringPtrOutput)
}

// <p>A version of a theme.</p>
type ThemeVersion struct {
	// <p>The Amazon Resource Name (ARN) of the resource.</p>
	Arn *string `pulumi:"arn"`
	// <p>The Amazon QuickSight-defined ID of the theme that a custom theme inherits from. All
	//             themes initially inherit from a default Amazon QuickSight theme.</p>
	BaseThemeId *string `pulumi:"baseThemeId"`
	// The theme configuration, which contains all the theme display properties.
	Configuration *ThemeConfiguration `pulumi:"configuration"`
	// <p>The date and time that this theme version was created.</p>
	CreatedTime *string `pulumi:"createdTime"`
	// <p>The description of the theme.</p>
	Description *string `pulumi:"description"`
	// <p>Errors associated with the theme.</p>
	Errors []ThemeError `pulumi:"errors"`
	// The status of the theme version.
	Status *ThemeResourceStatus `pulumi:"status"`
	// <p>The version number of the theme.</p>
	VersionNumber *float64 `pulumi:"versionNumber"`
}

// <p>A version of a theme.</p>
type ThemeVersionOutput struct{ *pulumi.OutputState }

func (ThemeVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThemeVersion)(nil)).Elem()
}

func (o ThemeVersionOutput) ToThemeVersionOutput() ThemeVersionOutput {
	return o
}

func (o ThemeVersionOutput) ToThemeVersionOutputWithContext(ctx context.Context) ThemeVersionOutput {
	return o
}

// <p>The Amazon Resource Name (ARN) of the resource.</p>
func (o ThemeVersionOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeVersion) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// <p>The Amazon QuickSight-defined ID of the theme that a custom theme inherits from. All
//
//	themes initially inherit from a default Amazon QuickSight theme.</p>
func (o ThemeVersionOutput) BaseThemeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeVersion) *string { return v.BaseThemeId }).(pulumi.StringPtrOutput)
}

// The theme configuration, which contains all the theme display properties.
func (o ThemeVersionOutput) Configuration() ThemeConfigurationPtrOutput {
	return o.ApplyT(func(v ThemeVersion) *ThemeConfiguration { return v.Configuration }).(ThemeConfigurationPtrOutput)
}

// <p>The date and time that this theme version was created.</p>
func (o ThemeVersionOutput) CreatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeVersion) *string { return v.CreatedTime }).(pulumi.StringPtrOutput)
}

// <p>The description of the theme.</p>
func (o ThemeVersionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThemeVersion) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// <p>Errors associated with the theme.</p>
func (o ThemeVersionOutput) Errors() ThemeErrorArrayOutput {
	return o.ApplyT(func(v ThemeVersion) []ThemeError { return v.Errors }).(ThemeErrorArrayOutput)
}

// The status of the theme version.
func (o ThemeVersionOutput) Status() ThemeResourceStatusPtrOutput {
	return o.ApplyT(func(v ThemeVersion) *ThemeResourceStatus { return v.Status }).(ThemeResourceStatusPtrOutput)
}

// <p>The version number of the theme.</p>
func (o ThemeVersionOutput) VersionNumber() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ThemeVersion) *float64 { return v.VersionNumber }).(pulumi.Float64PtrOutput)
}

type ThemeVersionPtrOutput struct{ *pulumi.OutputState }

func (ThemeVersionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThemeVersion)(nil)).Elem()
}

func (o ThemeVersionPtrOutput) ToThemeVersionPtrOutput() ThemeVersionPtrOutput {
	return o
}

func (o ThemeVersionPtrOutput) ToThemeVersionPtrOutputWithContext(ctx context.Context) ThemeVersionPtrOutput {
	return o
}

func (o ThemeVersionPtrOutput) Elem() ThemeVersionOutput {
	return o.ApplyT(func(v *ThemeVersion) ThemeVersion {
		if v != nil {
			return *v
		}
		var ret ThemeVersion
		return ret
	}).(ThemeVersionOutput)
}

// <p>The Amazon Resource Name (ARN) of the resource.</p>
func (o ThemeVersionPtrOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeVersion) *string {
		if v == nil {
			return nil
		}
		return v.Arn
	}).(pulumi.StringPtrOutput)
}

// <p>The Amazon QuickSight-defined ID of the theme that a custom theme inherits from. All
//
//	themes initially inherit from a default Amazon QuickSight theme.</p>
func (o ThemeVersionPtrOutput) BaseThemeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeVersion) *string {
		if v == nil {
			return nil
		}
		return v.BaseThemeId
	}).(pulumi.StringPtrOutput)
}

// The theme configuration, which contains all the theme display properties.
func (o ThemeVersionPtrOutput) Configuration() ThemeConfigurationPtrOutput {
	return o.ApplyT(func(v *ThemeVersion) *ThemeConfiguration {
		if v == nil {
			return nil
		}
		return v.Configuration
	}).(ThemeConfigurationPtrOutput)
}

// <p>The date and time that this theme version was created.</p>
func (o ThemeVersionPtrOutput) CreatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeVersion) *string {
		if v == nil {
			return nil
		}
		return v.CreatedTime
	}).(pulumi.StringPtrOutput)
}

// <p>The description of the theme.</p>
func (o ThemeVersionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThemeVersion) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// <p>Errors associated with the theme.</p>
func (o ThemeVersionPtrOutput) Errors() ThemeErrorArrayOutput {
	return o.ApplyT(func(v *ThemeVersion) []ThemeError {
		if v == nil {
			return nil
		}
		return v.Errors
	}).(ThemeErrorArrayOutput)
}

// The status of the theme version.
func (o ThemeVersionPtrOutput) Status() ThemeResourceStatusPtrOutput {
	return o.ApplyT(func(v *ThemeVersion) *ThemeResourceStatus {
		if v == nil {
			return nil
		}
		return v.Status
	}).(ThemeResourceStatusPtrOutput)
}

// <p>The version number of the theme.</p>
func (o ThemeVersionPtrOutput) VersionNumber() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ThemeVersion) *float64 {
		if v == nil {
			return nil
		}
		return v.VersionNumber
	}).(pulumi.Float64PtrOutput)
}

type TopicCalculatedField struct {
	// The default aggregation. Valid values for this structure are `SUM` , `MAX` , `MIN` , `COUNT` , `DISTINCT_COUNT` , and `AVERAGE` .
	Aggregation *TopicDefaultAggregation `pulumi:"aggregation"`
	// The list of aggregation types that are allowed for the calculated field. Valid values for this structure are `COUNT` , `DISTINCT_COUNT` , `MIN` , `MAX` , `MEDIAN` , `SUM` , `AVERAGE` , `STDEV` , `STDEVP` , `VAR` , `VARP` , and `PERCENTILE` .
	AllowedAggregations []TopicAuthorSpecifiedAggregation `pulumi:"allowedAggregations"`
	// The calculated field description.
	CalculatedFieldDescription *string `pulumi:"calculatedFieldDescription"`
	// The calculated field name.
	CalculatedFieldName string `pulumi:"calculatedFieldName"`
	// The other names or aliases for the calculated field.
	CalculatedFieldSynonyms []string `pulumi:"calculatedFieldSynonyms"`
	// The other names or aliases for the calculated field cell value.
	CellValueSynonyms []TopicCellValueSynonym `pulumi:"cellValueSynonyms"`
	// The column data role for a calculated field. Valid values for this structure are `DIMENSION` and `MEASURE` .
	ColumnDataRole *TopicColumnDataRole `pulumi:"columnDataRole"`
	// The order in which data is displayed for the calculated field when it's used in a comparative context.
	ComparativeOrder *TopicComparativeOrder `pulumi:"comparativeOrder"`
	// The default formatting definition.
	DefaultFormatting *TopicDefaultFormatting `pulumi:"defaultFormatting"`
	// A Boolean value that indicates if a calculated field is visible in the autocomplete.
	DisableIndexing *bool `pulumi:"disableIndexing"`
	// The calculated field expression.
	Expression string `pulumi:"expression"`
	// A boolean value that indicates if a calculated field is included in the topic.
	IsIncludedInTopic *bool `pulumi:"isIncludedInTopic"`
	// A Boolean value that indicates whether to never aggregate calculated field in filters.
	NeverAggregateInFilter *bool `pulumi:"neverAggregateInFilter"`
	// The non additive for the table style target.
	NonAdditive *bool `pulumi:"nonAdditive"`
	// The list of aggregation types that are not allowed for the calculated field. Valid values for this structure are `COUNT` , `DISTINCT_COUNT` , `MIN` , `MAX` , `MEDIAN` , `SUM` , `AVERAGE` , `STDEV` , `STDEVP` , `VAR` , `VARP` , and `PERCENTILE` .
	NotAllowedAggregations []TopicAuthorSpecifiedAggregation `pulumi:"notAllowedAggregations"`
	// The semantic type.
	SemanticType *TopicSemanticType `pulumi:"semanticType"`
	// The level of time precision that is used to aggregate `DateTime` values.
	TimeGranularity *TopicTimeGranularity `pulumi:"timeGranularity"`
}

// TopicCalculatedFieldInput is an input type that accepts TopicCalculatedFieldArgs and TopicCalculatedFieldOutput values.
// You can construct a concrete instance of `TopicCalculatedFieldInput` via:
//
//	TopicCalculatedFieldArgs{...}
type TopicCalculatedFieldInput interface {
	pulumi.Input

	ToTopicCalculatedFieldOutput() TopicCalculatedFieldOutput
	ToTopicCalculatedFieldOutputWithContext(context.Context) TopicCalculatedFieldOutput
}

type TopicCalculatedFieldArgs struct {
	// The default aggregation. Valid values for this structure are `SUM` , `MAX` , `MIN` , `COUNT` , `DISTINCT_COUNT` , and `AVERAGE` .
	Aggregation TopicDefaultAggregationPtrInput `pulumi:"aggregation"`
	// The list of aggregation types that are allowed for the calculated field. Valid values for this structure are `COUNT` , `DISTINCT_COUNT` , `MIN` , `MAX` , `MEDIAN` , `SUM` , `AVERAGE` , `STDEV` , `STDEVP` , `VAR` , `VARP` , and `PERCENTILE` .
	AllowedAggregations TopicAuthorSpecifiedAggregationArrayInput `pulumi:"allowedAggregations"`
	// The calculated field description.
	CalculatedFieldDescription pulumi.StringPtrInput `pulumi:"calculatedFieldDescription"`
	// The calculated field name.
	CalculatedFieldName pulumi.StringInput `pulumi:"calculatedFieldName"`
	// The other names or aliases for the calculated field.
	CalculatedFieldSynonyms pulumi.StringArrayInput `pulumi:"calculatedFieldSynonyms"`
	// The other names or aliases for the calculated field cell value.
	CellValueSynonyms TopicCellValueSynonymArrayInput `pulumi:"cellValueSynonyms"`
	// The column data role for a calculated field. Valid values for this structure are `DIMENSION` and `MEASURE` .
	ColumnDataRole TopicColumnDataRolePtrInput `pulumi:"columnDataRole"`
	// The order in which data is displayed for the calculated field when it's used in a comparative context.
	ComparativeOrder TopicComparativeOrderPtrInput `pulumi:"comparativeOrder"`
	// The default formatting definition.
	DefaultFormatting TopicDefaultFormattingPtrInput `pulumi:"defaultFormatting"`
	// A Boolean value that indicates if a calculated field is visible in the autocomplete.
	DisableIndexing pulumi.BoolPtrInput `pulumi:"disableIndexing"`
	// The calculated field expression.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A boolean value that indicates if a calculated field is included in the topic.
	IsIncludedInTopic pulumi.BoolPtrInput `pulumi:"isIncludedInTopic"`
	// A Boolean value that indicates whether to never aggregate calculated field in filters.
	NeverAggregateInFilter pulumi.BoolPtrInput `pulumi:"neverAggregateInFilter"`
	// The non additive for the table style target.
	NonAdditive pulumi.BoolPtrInput `pulumi:"nonAdditive"`
	// The list of aggregation types that are not allowed for the calculated field. Valid values for this structure are `COUNT` , `DISTINCT_COUNT` , `MIN` , `MAX` , `MEDIAN` , `SUM` , `AVERAGE` , `STDEV` , `STDEVP` , `VAR` , `VARP` , and `PERCENTILE` .
	NotAllowedAggregations TopicAuthorSpecifiedAggregationArrayInput `pulumi:"notAllowedAggregations"`
	// The semantic type.
	SemanticType TopicSemanticTypePtrInput `pulumi:"semanticType"`
	// The level of time precision that is used to aggregate `DateTime` values.
	TimeGranularity TopicTimeGranularityPtrInput `pulumi:"timeGranularity"`
}

func (TopicCalculatedFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicCalculatedField)(nil)).Elem()
}

func (i TopicCalculatedFieldArgs) ToTopicCalculatedFieldOutput() TopicCalculatedFieldOutput {
	return i.ToTopicCalculatedFieldOutputWithContext(context.Background())
}

func (i TopicCalculatedFieldArgs) ToTopicCalculatedFieldOutputWithContext(ctx context.Context) TopicCalculatedFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicCalculatedFieldOutput)
}

// TopicCalculatedFieldArrayInput is an input type that accepts TopicCalculatedFieldArray and TopicCalculatedFieldArrayOutput values.
// You can construct a concrete instance of `TopicCalculatedFieldArrayInput` via:
//
//	TopicCalculatedFieldArray{ TopicCalculatedFieldArgs{...} }
type TopicCalculatedFieldArrayInput interface {
	pulumi.Input

	ToTopicCalculatedFieldArrayOutput() TopicCalculatedFieldArrayOutput
	ToTopicCalculatedFieldArrayOutputWithContext(context.Context) TopicCalculatedFieldArrayOutput
}

type TopicCalculatedFieldArray []TopicCalculatedFieldInput

func (TopicCalculatedFieldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicCalculatedField)(nil)).Elem()
}

func (i TopicCalculatedFieldArray) ToTopicCalculatedFieldArrayOutput() TopicCalculatedFieldArrayOutput {
	return i.ToTopicCalculatedFieldArrayOutputWithContext(context.Background())
}

func (i TopicCalculatedFieldArray) ToTopicCalculatedFieldArrayOutputWithContext(ctx context.Context) TopicCalculatedFieldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicCalculatedFieldArrayOutput)
}

type TopicCalculatedFieldOutput struct{ *pulumi.OutputState }

func (TopicCalculatedFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicCalculatedField)(nil)).Elem()
}

func (o TopicCalculatedFieldOutput) ToTopicCalculatedFieldOutput() TopicCalculatedFieldOutput {
	return o
}

func (o TopicCalculatedFieldOutput) ToTopicCalculatedFieldOutputWithContext(ctx context.Context) TopicCalculatedFieldOutput {
	return o
}

// The default aggregation. Valid values for this structure are `SUM` , `MAX` , `MIN` , `COUNT` , `DISTINCT_COUNT` , and `AVERAGE` .
func (o TopicCalculatedFieldOutput) Aggregation() TopicDefaultAggregationPtrOutput {
	return o.ApplyT(func(v TopicCalculatedField) *TopicDefaultAggregation { return v.Aggregation }).(TopicDefaultAggregationPtrOutput)
}

// The list of aggregation types that are allowed for the calculated field. Valid values for this structure are `COUNT` , `DISTINCT_COUNT` , `MIN` , `MAX` , `MEDIAN` , `SUM` , `AVERAGE` , `STDEV` , `STDEVP` , `VAR` , `VARP` , and `PERCENTILE` .
func (o TopicCalculatedFieldOutput) AllowedAggregations() TopicAuthorSpecifiedAggregationArrayOutput {
	return o.ApplyT(func(v TopicCalculatedField) []TopicAuthorSpecifiedAggregation { return v.AllowedAggregations }).(TopicAuthorSpecifiedAggregationArrayOutput)
}

// The calculated field description.
func (o TopicCalculatedFieldOutput) CalculatedFieldDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicCalculatedField) *string { return v.CalculatedFieldDescription }).(pulumi.StringPtrOutput)
}

// The calculated field name.
func (o TopicCalculatedFieldOutput) CalculatedFieldName() pulumi.StringOutput {
	return o.ApplyT(func(v TopicCalculatedField) string { return v.CalculatedFieldName }).(pulumi.StringOutput)
}

// The other names or aliases for the calculated field.
func (o TopicCalculatedFieldOutput) CalculatedFieldSynonyms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TopicCalculatedField) []string { return v.CalculatedFieldSynonyms }).(pulumi.StringArrayOutput)
}

// The other names or aliases for the calculated field cell value.
func (o TopicCalculatedFieldOutput) CellValueSynonyms() TopicCellValueSynonymArrayOutput {
	return o.ApplyT(func(v TopicCalculatedField) []TopicCellValueSynonym { return v.CellValueSynonyms }).(TopicCellValueSynonymArrayOutput)
}

// The column data role for a calculated field. Valid values for this structure are `DIMENSION` and `MEASURE` .
func (o TopicCalculatedFieldOutput) ColumnDataRole() TopicColumnDataRolePtrOutput {
	return o.ApplyT(func(v TopicCalculatedField) *TopicColumnDataRole { return v.ColumnDataRole }).(TopicColumnDataRolePtrOutput)
}

// The order in which data is displayed for the calculated field when it's used in a comparative context.
func (o TopicCalculatedFieldOutput) ComparativeOrder() TopicComparativeOrderPtrOutput {
	return o.ApplyT(func(v TopicCalculatedField) *TopicComparativeOrder { return v.ComparativeOrder }).(TopicComparativeOrderPtrOutput)
}

// The default formatting definition.
func (o TopicCalculatedFieldOutput) DefaultFormatting() TopicDefaultFormattingPtrOutput {
	return o.ApplyT(func(v TopicCalculatedField) *TopicDefaultFormatting { return v.DefaultFormatting }).(TopicDefaultFormattingPtrOutput)
}

// A Boolean value that indicates if a calculated field is visible in the autocomplete.
func (o TopicCalculatedFieldOutput) DisableIndexing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TopicCalculatedField) *bool { return v.DisableIndexing }).(pulumi.BoolPtrOutput)
}

// The calculated field expression.
func (o TopicCalculatedFieldOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v TopicCalculatedField) string { return v.Expression }).(pulumi.StringOutput)
}

// A boolean value that indicates if a calculated field is included in the topic.
func (o TopicCalculatedFieldOutput) IsIncludedInTopic() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TopicCalculatedField) *bool { return v.IsIncludedInTopic }).(pulumi.BoolPtrOutput)
}

// A Boolean value that indicates whether to never aggregate calculated field in filters.
func (o TopicCalculatedFieldOutput) NeverAggregateInFilter() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TopicCalculatedField) *bool { return v.NeverAggregateInFilter }).(pulumi.BoolPtrOutput)
}

// The non additive for the table style target.
func (o TopicCalculatedFieldOutput) NonAdditive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TopicCalculatedField) *bool { return v.NonAdditive }).(pulumi.BoolPtrOutput)
}

// The list of aggregation types that are not allowed for the calculated field. Valid values for this structure are `COUNT` , `DISTINCT_COUNT` , `MIN` , `MAX` , `MEDIAN` , `SUM` , `AVERAGE` , `STDEV` , `STDEVP` , `VAR` , `VARP` , and `PERCENTILE` .
func (o TopicCalculatedFieldOutput) NotAllowedAggregations() TopicAuthorSpecifiedAggregationArrayOutput {
	return o.ApplyT(func(v TopicCalculatedField) []TopicAuthorSpecifiedAggregation { return v.NotAllowedAggregations }).(TopicAuthorSpecifiedAggregationArrayOutput)
}

// The semantic type.
func (o TopicCalculatedFieldOutput) SemanticType() TopicSemanticTypePtrOutput {
	return o.ApplyT(func(v TopicCalculatedField) *TopicSemanticType { return v.SemanticType }).(TopicSemanticTypePtrOutput)
}

// The level of time precision that is used to aggregate `DateTime` values.
func (o TopicCalculatedFieldOutput) TimeGranularity() TopicTimeGranularityPtrOutput {
	return o.ApplyT(func(v TopicCalculatedField) *TopicTimeGranularity { return v.TimeGranularity }).(TopicTimeGranularityPtrOutput)
}

type TopicCalculatedFieldArrayOutput struct{ *pulumi.OutputState }

func (TopicCalculatedFieldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicCalculatedField)(nil)).Elem()
}

func (o TopicCalculatedFieldArrayOutput) ToTopicCalculatedFieldArrayOutput() TopicCalculatedFieldArrayOutput {
	return o
}

func (o TopicCalculatedFieldArrayOutput) ToTopicCalculatedFieldArrayOutputWithContext(ctx context.Context) TopicCalculatedFieldArrayOutput {
	return o
}

func (o TopicCalculatedFieldArrayOutput) Index(i pulumi.IntInput) TopicCalculatedFieldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TopicCalculatedField {
		return vs[0].([]TopicCalculatedField)[vs[1].(int)]
	}).(TopicCalculatedFieldOutput)
}

type TopicCategoryFilter struct {
	// The category filter function. Valid values for this structure are `EXACT` and `CONTAINS` .
	CategoryFilterFunction *TopicCategoryFilterFunction `pulumi:"categoryFilterFunction"`
	// The category filter type. This element is used to specify whether a filter is a simple category filter or an inverse category filter.
	CategoryFilterType *TopicCategoryFilterType `pulumi:"categoryFilterType"`
	// The constant used in a category filter.
	Constant *TopicCategoryFilterConstant `pulumi:"constant"`
	// A Boolean value that indicates if the filter is inverse.
	Inverse *bool `pulumi:"inverse"`
}

// TopicCategoryFilterInput is an input type that accepts TopicCategoryFilterArgs and TopicCategoryFilterOutput values.
// You can construct a concrete instance of `TopicCategoryFilterInput` via:
//
//	TopicCategoryFilterArgs{...}
type TopicCategoryFilterInput interface {
	pulumi.Input

	ToTopicCategoryFilterOutput() TopicCategoryFilterOutput
	ToTopicCategoryFilterOutputWithContext(context.Context) TopicCategoryFilterOutput
}

type TopicCategoryFilterArgs struct {
	// The category filter function. Valid values for this structure are `EXACT` and `CONTAINS` .
	CategoryFilterFunction TopicCategoryFilterFunctionPtrInput `pulumi:"categoryFilterFunction"`
	// The category filter type. This element is used to specify whether a filter is a simple category filter or an inverse category filter.
	CategoryFilterType TopicCategoryFilterTypePtrInput `pulumi:"categoryFilterType"`
	// The constant used in a category filter.
	Constant TopicCategoryFilterConstantPtrInput `pulumi:"constant"`
	// A Boolean value that indicates if the filter is inverse.
	Inverse pulumi.BoolPtrInput `pulumi:"inverse"`
}

func (TopicCategoryFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicCategoryFilter)(nil)).Elem()
}

func (i TopicCategoryFilterArgs) ToTopicCategoryFilterOutput() TopicCategoryFilterOutput {
	return i.ToTopicCategoryFilterOutputWithContext(context.Background())
}

func (i TopicCategoryFilterArgs) ToTopicCategoryFilterOutputWithContext(ctx context.Context) TopicCategoryFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicCategoryFilterOutput)
}

func (i TopicCategoryFilterArgs) ToTopicCategoryFilterPtrOutput() TopicCategoryFilterPtrOutput {
	return i.ToTopicCategoryFilterPtrOutputWithContext(context.Background())
}

func (i TopicCategoryFilterArgs) ToTopicCategoryFilterPtrOutputWithContext(ctx context.Context) TopicCategoryFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicCategoryFilterOutput).ToTopicCategoryFilterPtrOutputWithContext(ctx)
}

// TopicCategoryFilterPtrInput is an input type that accepts TopicCategoryFilterArgs, TopicCategoryFilterPtr and TopicCategoryFilterPtrOutput values.
// You can construct a concrete instance of `TopicCategoryFilterPtrInput` via:
//
//	        TopicCategoryFilterArgs{...}
//
//	or:
//
//	        nil
type TopicCategoryFilterPtrInput interface {
	pulumi.Input

	ToTopicCategoryFilterPtrOutput() TopicCategoryFilterPtrOutput
	ToTopicCategoryFilterPtrOutputWithContext(context.Context) TopicCategoryFilterPtrOutput
}

type topicCategoryFilterPtrType TopicCategoryFilterArgs

func TopicCategoryFilterPtr(v *TopicCategoryFilterArgs) TopicCategoryFilterPtrInput {
	return (*topicCategoryFilterPtrType)(v)
}

func (*topicCategoryFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicCategoryFilter)(nil)).Elem()
}

func (i *topicCategoryFilterPtrType) ToTopicCategoryFilterPtrOutput() TopicCategoryFilterPtrOutput {
	return i.ToTopicCategoryFilterPtrOutputWithContext(context.Background())
}

func (i *topicCategoryFilterPtrType) ToTopicCategoryFilterPtrOutputWithContext(ctx context.Context) TopicCategoryFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicCategoryFilterPtrOutput)
}

type TopicCategoryFilterOutput struct{ *pulumi.OutputState }

func (TopicCategoryFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicCategoryFilter)(nil)).Elem()
}

func (o TopicCategoryFilterOutput) ToTopicCategoryFilterOutput() TopicCategoryFilterOutput {
	return o
}

func (o TopicCategoryFilterOutput) ToTopicCategoryFilterOutputWithContext(ctx context.Context) TopicCategoryFilterOutput {
	return o
}

func (o TopicCategoryFilterOutput) ToTopicCategoryFilterPtrOutput() TopicCategoryFilterPtrOutput {
	return o.ToTopicCategoryFilterPtrOutputWithContext(context.Background())
}

func (o TopicCategoryFilterOutput) ToTopicCategoryFilterPtrOutputWithContext(ctx context.Context) TopicCategoryFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicCategoryFilter) *TopicCategoryFilter {
		return &v
	}).(TopicCategoryFilterPtrOutput)
}

// The category filter function. Valid values for this structure are `EXACT` and `CONTAINS` .
func (o TopicCategoryFilterOutput) CategoryFilterFunction() TopicCategoryFilterFunctionPtrOutput {
	return o.ApplyT(func(v TopicCategoryFilter) *TopicCategoryFilterFunction { return v.CategoryFilterFunction }).(TopicCategoryFilterFunctionPtrOutput)
}

// The category filter type. This element is used to specify whether a filter is a simple category filter or an inverse category filter.
func (o TopicCategoryFilterOutput) CategoryFilterType() TopicCategoryFilterTypePtrOutput {
	return o.ApplyT(func(v TopicCategoryFilter) *TopicCategoryFilterType { return v.CategoryFilterType }).(TopicCategoryFilterTypePtrOutput)
}

// The constant used in a category filter.
func (o TopicCategoryFilterOutput) Constant() TopicCategoryFilterConstantPtrOutput {
	return o.ApplyT(func(v TopicCategoryFilter) *TopicCategoryFilterConstant { return v.Constant }).(TopicCategoryFilterConstantPtrOutput)
}

// A Boolean value that indicates if the filter is inverse.
func (o TopicCategoryFilterOutput) Inverse() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TopicCategoryFilter) *bool { return v.Inverse }).(pulumi.BoolPtrOutput)
}

type TopicCategoryFilterPtrOutput struct{ *pulumi.OutputState }

func (TopicCategoryFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicCategoryFilter)(nil)).Elem()
}

func (o TopicCategoryFilterPtrOutput) ToTopicCategoryFilterPtrOutput() TopicCategoryFilterPtrOutput {
	return o
}

func (o TopicCategoryFilterPtrOutput) ToTopicCategoryFilterPtrOutputWithContext(ctx context.Context) TopicCategoryFilterPtrOutput {
	return o
}

func (o TopicCategoryFilterPtrOutput) Elem() TopicCategoryFilterOutput {
	return o.ApplyT(func(v *TopicCategoryFilter) TopicCategoryFilter {
		if v != nil {
			return *v
		}
		var ret TopicCategoryFilter
		return ret
	}).(TopicCategoryFilterOutput)
}

// The category filter function. Valid values for this structure are `EXACT` and `CONTAINS` .
func (o TopicCategoryFilterPtrOutput) CategoryFilterFunction() TopicCategoryFilterFunctionPtrOutput {
	return o.ApplyT(func(v *TopicCategoryFilter) *TopicCategoryFilterFunction {
		if v == nil {
			return nil
		}
		return v.CategoryFilterFunction
	}).(TopicCategoryFilterFunctionPtrOutput)
}

// The category filter type. This element is used to specify whether a filter is a simple category filter or an inverse category filter.
func (o TopicCategoryFilterPtrOutput) CategoryFilterType() TopicCategoryFilterTypePtrOutput {
	return o.ApplyT(func(v *TopicCategoryFilter) *TopicCategoryFilterType {
		if v == nil {
			return nil
		}
		return v.CategoryFilterType
	}).(TopicCategoryFilterTypePtrOutput)
}

// The constant used in a category filter.
func (o TopicCategoryFilterPtrOutput) Constant() TopicCategoryFilterConstantPtrOutput {
	return o.ApplyT(func(v *TopicCategoryFilter) *TopicCategoryFilterConstant {
		if v == nil {
			return nil
		}
		return v.Constant
	}).(TopicCategoryFilterConstantPtrOutput)
}

// A Boolean value that indicates if the filter is inverse.
func (o TopicCategoryFilterPtrOutput) Inverse() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TopicCategoryFilter) *bool {
		if v == nil {
			return nil
		}
		return v.Inverse
	}).(pulumi.BoolPtrOutput)
}

type TopicCategoryFilterConstant struct {
	// A collective constant used in a category filter. This element is used to specify a list of values for the constant.
	CollectiveConstant *TopicCollectiveConstant `pulumi:"collectiveConstant"`
	// The type of category filter constant. This element is used to specify whether a constant is a singular or collective. Valid values are `SINGULAR` and `COLLECTIVE` .
	ConstantType *TopicConstantType `pulumi:"constantType"`
	// A singular constant used in a category filter. This element is used to specify a single value for the constant.
	SingularConstant *string `pulumi:"singularConstant"`
}

// TopicCategoryFilterConstantInput is an input type that accepts TopicCategoryFilterConstantArgs and TopicCategoryFilterConstantOutput values.
// You can construct a concrete instance of `TopicCategoryFilterConstantInput` via:
//
//	TopicCategoryFilterConstantArgs{...}
type TopicCategoryFilterConstantInput interface {
	pulumi.Input

	ToTopicCategoryFilterConstantOutput() TopicCategoryFilterConstantOutput
	ToTopicCategoryFilterConstantOutputWithContext(context.Context) TopicCategoryFilterConstantOutput
}

type TopicCategoryFilterConstantArgs struct {
	// A collective constant used in a category filter. This element is used to specify a list of values for the constant.
	CollectiveConstant TopicCollectiveConstantPtrInput `pulumi:"collectiveConstant"`
	// The type of category filter constant. This element is used to specify whether a constant is a singular or collective. Valid values are `SINGULAR` and `COLLECTIVE` .
	ConstantType TopicConstantTypePtrInput `pulumi:"constantType"`
	// A singular constant used in a category filter. This element is used to specify a single value for the constant.
	SingularConstant pulumi.StringPtrInput `pulumi:"singularConstant"`
}

func (TopicCategoryFilterConstantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicCategoryFilterConstant)(nil)).Elem()
}

func (i TopicCategoryFilterConstantArgs) ToTopicCategoryFilterConstantOutput() TopicCategoryFilterConstantOutput {
	return i.ToTopicCategoryFilterConstantOutputWithContext(context.Background())
}

func (i TopicCategoryFilterConstantArgs) ToTopicCategoryFilterConstantOutputWithContext(ctx context.Context) TopicCategoryFilterConstantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicCategoryFilterConstantOutput)
}

func (i TopicCategoryFilterConstantArgs) ToTopicCategoryFilterConstantPtrOutput() TopicCategoryFilterConstantPtrOutput {
	return i.ToTopicCategoryFilterConstantPtrOutputWithContext(context.Background())
}

func (i TopicCategoryFilterConstantArgs) ToTopicCategoryFilterConstantPtrOutputWithContext(ctx context.Context) TopicCategoryFilterConstantPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicCategoryFilterConstantOutput).ToTopicCategoryFilterConstantPtrOutputWithContext(ctx)
}

// TopicCategoryFilterConstantPtrInput is an input type that accepts TopicCategoryFilterConstantArgs, TopicCategoryFilterConstantPtr and TopicCategoryFilterConstantPtrOutput values.
// You can construct a concrete instance of `TopicCategoryFilterConstantPtrInput` via:
//
//	        TopicCategoryFilterConstantArgs{...}
//
//	or:
//
//	        nil
type TopicCategoryFilterConstantPtrInput interface {
	pulumi.Input

	ToTopicCategoryFilterConstantPtrOutput() TopicCategoryFilterConstantPtrOutput
	ToTopicCategoryFilterConstantPtrOutputWithContext(context.Context) TopicCategoryFilterConstantPtrOutput
}

type topicCategoryFilterConstantPtrType TopicCategoryFilterConstantArgs

func TopicCategoryFilterConstantPtr(v *TopicCategoryFilterConstantArgs) TopicCategoryFilterConstantPtrInput {
	return (*topicCategoryFilterConstantPtrType)(v)
}

func (*topicCategoryFilterConstantPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicCategoryFilterConstant)(nil)).Elem()
}

func (i *topicCategoryFilterConstantPtrType) ToTopicCategoryFilterConstantPtrOutput() TopicCategoryFilterConstantPtrOutput {
	return i.ToTopicCategoryFilterConstantPtrOutputWithContext(context.Background())
}

func (i *topicCategoryFilterConstantPtrType) ToTopicCategoryFilterConstantPtrOutputWithContext(ctx context.Context) TopicCategoryFilterConstantPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicCategoryFilterConstantPtrOutput)
}

type TopicCategoryFilterConstantOutput struct{ *pulumi.OutputState }

func (TopicCategoryFilterConstantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicCategoryFilterConstant)(nil)).Elem()
}

func (o TopicCategoryFilterConstantOutput) ToTopicCategoryFilterConstantOutput() TopicCategoryFilterConstantOutput {
	return o
}

func (o TopicCategoryFilterConstantOutput) ToTopicCategoryFilterConstantOutputWithContext(ctx context.Context) TopicCategoryFilterConstantOutput {
	return o
}

func (o TopicCategoryFilterConstantOutput) ToTopicCategoryFilterConstantPtrOutput() TopicCategoryFilterConstantPtrOutput {
	return o.ToTopicCategoryFilterConstantPtrOutputWithContext(context.Background())
}

func (o TopicCategoryFilterConstantOutput) ToTopicCategoryFilterConstantPtrOutputWithContext(ctx context.Context) TopicCategoryFilterConstantPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicCategoryFilterConstant) *TopicCategoryFilterConstant {
		return &v
	}).(TopicCategoryFilterConstantPtrOutput)
}

// A collective constant used in a category filter. This element is used to specify a list of values for the constant.
func (o TopicCategoryFilterConstantOutput) CollectiveConstant() TopicCollectiveConstantPtrOutput {
	return o.ApplyT(func(v TopicCategoryFilterConstant) *TopicCollectiveConstant { return v.CollectiveConstant }).(TopicCollectiveConstantPtrOutput)
}

// The type of category filter constant. This element is used to specify whether a constant is a singular or collective. Valid values are `SINGULAR` and `COLLECTIVE` .
func (o TopicCategoryFilterConstantOutput) ConstantType() TopicConstantTypePtrOutput {
	return o.ApplyT(func(v TopicCategoryFilterConstant) *TopicConstantType { return v.ConstantType }).(TopicConstantTypePtrOutput)
}

// A singular constant used in a category filter. This element is used to specify a single value for the constant.
func (o TopicCategoryFilterConstantOutput) SingularConstant() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicCategoryFilterConstant) *string { return v.SingularConstant }).(pulumi.StringPtrOutput)
}

type TopicCategoryFilterConstantPtrOutput struct{ *pulumi.OutputState }

func (TopicCategoryFilterConstantPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicCategoryFilterConstant)(nil)).Elem()
}

func (o TopicCategoryFilterConstantPtrOutput) ToTopicCategoryFilterConstantPtrOutput() TopicCategoryFilterConstantPtrOutput {
	return o
}

func (o TopicCategoryFilterConstantPtrOutput) ToTopicCategoryFilterConstantPtrOutputWithContext(ctx context.Context) TopicCategoryFilterConstantPtrOutput {
	return o
}

func (o TopicCategoryFilterConstantPtrOutput) Elem() TopicCategoryFilterConstantOutput {
	return o.ApplyT(func(v *TopicCategoryFilterConstant) TopicCategoryFilterConstant {
		if v != nil {
			return *v
		}
		var ret TopicCategoryFilterConstant
		return ret
	}).(TopicCategoryFilterConstantOutput)
}

// A collective constant used in a category filter. This element is used to specify a list of values for the constant.
func (o TopicCategoryFilterConstantPtrOutput) CollectiveConstant() TopicCollectiveConstantPtrOutput {
	return o.ApplyT(func(v *TopicCategoryFilterConstant) *TopicCollectiveConstant {
		if v == nil {
			return nil
		}
		return v.CollectiveConstant
	}).(TopicCollectiveConstantPtrOutput)
}

// The type of category filter constant. This element is used to specify whether a constant is a singular or collective. Valid values are `SINGULAR` and `COLLECTIVE` .
func (o TopicCategoryFilterConstantPtrOutput) ConstantType() TopicConstantTypePtrOutput {
	return o.ApplyT(func(v *TopicCategoryFilterConstant) *TopicConstantType {
		if v == nil {
			return nil
		}
		return v.ConstantType
	}).(TopicConstantTypePtrOutput)
}

// A singular constant used in a category filter. This element is used to specify a single value for the constant.
func (o TopicCategoryFilterConstantPtrOutput) SingularConstant() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicCategoryFilterConstant) *string {
		if v == nil {
			return nil
		}
		return v.SingularConstant
	}).(pulumi.StringPtrOutput)
}

type TopicCellValueSynonym struct {
	// The cell value.
	CellValue *string `pulumi:"cellValue"`
	// Other names or aliases for the cell value.
	Synonyms []string `pulumi:"synonyms"`
}

// TopicCellValueSynonymInput is an input type that accepts TopicCellValueSynonymArgs and TopicCellValueSynonymOutput values.
// You can construct a concrete instance of `TopicCellValueSynonymInput` via:
//
//	TopicCellValueSynonymArgs{...}
type TopicCellValueSynonymInput interface {
	pulumi.Input

	ToTopicCellValueSynonymOutput() TopicCellValueSynonymOutput
	ToTopicCellValueSynonymOutputWithContext(context.Context) TopicCellValueSynonymOutput
}

type TopicCellValueSynonymArgs struct {
	// The cell value.
	CellValue pulumi.StringPtrInput `pulumi:"cellValue"`
	// Other names or aliases for the cell value.
	Synonyms pulumi.StringArrayInput `pulumi:"synonyms"`
}

func (TopicCellValueSynonymArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicCellValueSynonym)(nil)).Elem()
}

func (i TopicCellValueSynonymArgs) ToTopicCellValueSynonymOutput() TopicCellValueSynonymOutput {
	return i.ToTopicCellValueSynonymOutputWithContext(context.Background())
}

func (i TopicCellValueSynonymArgs) ToTopicCellValueSynonymOutputWithContext(ctx context.Context) TopicCellValueSynonymOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicCellValueSynonymOutput)
}

// TopicCellValueSynonymArrayInput is an input type that accepts TopicCellValueSynonymArray and TopicCellValueSynonymArrayOutput values.
// You can construct a concrete instance of `TopicCellValueSynonymArrayInput` via:
//
//	TopicCellValueSynonymArray{ TopicCellValueSynonymArgs{...} }
type TopicCellValueSynonymArrayInput interface {
	pulumi.Input

	ToTopicCellValueSynonymArrayOutput() TopicCellValueSynonymArrayOutput
	ToTopicCellValueSynonymArrayOutputWithContext(context.Context) TopicCellValueSynonymArrayOutput
}

type TopicCellValueSynonymArray []TopicCellValueSynonymInput

func (TopicCellValueSynonymArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicCellValueSynonym)(nil)).Elem()
}

func (i TopicCellValueSynonymArray) ToTopicCellValueSynonymArrayOutput() TopicCellValueSynonymArrayOutput {
	return i.ToTopicCellValueSynonymArrayOutputWithContext(context.Background())
}

func (i TopicCellValueSynonymArray) ToTopicCellValueSynonymArrayOutputWithContext(ctx context.Context) TopicCellValueSynonymArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicCellValueSynonymArrayOutput)
}

type TopicCellValueSynonymOutput struct{ *pulumi.OutputState }

func (TopicCellValueSynonymOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicCellValueSynonym)(nil)).Elem()
}

func (o TopicCellValueSynonymOutput) ToTopicCellValueSynonymOutput() TopicCellValueSynonymOutput {
	return o
}

func (o TopicCellValueSynonymOutput) ToTopicCellValueSynonymOutputWithContext(ctx context.Context) TopicCellValueSynonymOutput {
	return o
}

// The cell value.
func (o TopicCellValueSynonymOutput) CellValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicCellValueSynonym) *string { return v.CellValue }).(pulumi.StringPtrOutput)
}

// Other names or aliases for the cell value.
func (o TopicCellValueSynonymOutput) Synonyms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TopicCellValueSynonym) []string { return v.Synonyms }).(pulumi.StringArrayOutput)
}

type TopicCellValueSynonymArrayOutput struct{ *pulumi.OutputState }

func (TopicCellValueSynonymArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicCellValueSynonym)(nil)).Elem()
}

func (o TopicCellValueSynonymArrayOutput) ToTopicCellValueSynonymArrayOutput() TopicCellValueSynonymArrayOutput {
	return o
}

func (o TopicCellValueSynonymArrayOutput) ToTopicCellValueSynonymArrayOutputWithContext(ctx context.Context) TopicCellValueSynonymArrayOutput {
	return o
}

func (o TopicCellValueSynonymArrayOutput) Index(i pulumi.IntInput) TopicCellValueSynonymOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TopicCellValueSynonym {
		return vs[0].([]TopicCellValueSynonym)[vs[1].(int)]
	}).(TopicCellValueSynonymOutput)
}

type TopicCollectiveConstant struct {
	// A list of values for the collective constant.
	ValueList []string `pulumi:"valueList"`
}

// TopicCollectiveConstantInput is an input type that accepts TopicCollectiveConstantArgs and TopicCollectiveConstantOutput values.
// You can construct a concrete instance of `TopicCollectiveConstantInput` via:
//
//	TopicCollectiveConstantArgs{...}
type TopicCollectiveConstantInput interface {
	pulumi.Input

	ToTopicCollectiveConstantOutput() TopicCollectiveConstantOutput
	ToTopicCollectiveConstantOutputWithContext(context.Context) TopicCollectiveConstantOutput
}

type TopicCollectiveConstantArgs struct {
	// A list of values for the collective constant.
	ValueList pulumi.StringArrayInput `pulumi:"valueList"`
}

func (TopicCollectiveConstantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicCollectiveConstant)(nil)).Elem()
}

func (i TopicCollectiveConstantArgs) ToTopicCollectiveConstantOutput() TopicCollectiveConstantOutput {
	return i.ToTopicCollectiveConstantOutputWithContext(context.Background())
}

func (i TopicCollectiveConstantArgs) ToTopicCollectiveConstantOutputWithContext(ctx context.Context) TopicCollectiveConstantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicCollectiveConstantOutput)
}

func (i TopicCollectiveConstantArgs) ToTopicCollectiveConstantPtrOutput() TopicCollectiveConstantPtrOutput {
	return i.ToTopicCollectiveConstantPtrOutputWithContext(context.Background())
}

func (i TopicCollectiveConstantArgs) ToTopicCollectiveConstantPtrOutputWithContext(ctx context.Context) TopicCollectiveConstantPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicCollectiveConstantOutput).ToTopicCollectiveConstantPtrOutputWithContext(ctx)
}

// TopicCollectiveConstantPtrInput is an input type that accepts TopicCollectiveConstantArgs, TopicCollectiveConstantPtr and TopicCollectiveConstantPtrOutput values.
// You can construct a concrete instance of `TopicCollectiveConstantPtrInput` via:
//
//	        TopicCollectiveConstantArgs{...}
//
//	or:
//
//	        nil
type TopicCollectiveConstantPtrInput interface {
	pulumi.Input

	ToTopicCollectiveConstantPtrOutput() TopicCollectiveConstantPtrOutput
	ToTopicCollectiveConstantPtrOutputWithContext(context.Context) TopicCollectiveConstantPtrOutput
}

type topicCollectiveConstantPtrType TopicCollectiveConstantArgs

func TopicCollectiveConstantPtr(v *TopicCollectiveConstantArgs) TopicCollectiveConstantPtrInput {
	return (*topicCollectiveConstantPtrType)(v)
}

func (*topicCollectiveConstantPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicCollectiveConstant)(nil)).Elem()
}

func (i *topicCollectiveConstantPtrType) ToTopicCollectiveConstantPtrOutput() TopicCollectiveConstantPtrOutput {
	return i.ToTopicCollectiveConstantPtrOutputWithContext(context.Background())
}

func (i *topicCollectiveConstantPtrType) ToTopicCollectiveConstantPtrOutputWithContext(ctx context.Context) TopicCollectiveConstantPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicCollectiveConstantPtrOutput)
}

type TopicCollectiveConstantOutput struct{ *pulumi.OutputState }

func (TopicCollectiveConstantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicCollectiveConstant)(nil)).Elem()
}

func (o TopicCollectiveConstantOutput) ToTopicCollectiveConstantOutput() TopicCollectiveConstantOutput {
	return o
}

func (o TopicCollectiveConstantOutput) ToTopicCollectiveConstantOutputWithContext(ctx context.Context) TopicCollectiveConstantOutput {
	return o
}

func (o TopicCollectiveConstantOutput) ToTopicCollectiveConstantPtrOutput() TopicCollectiveConstantPtrOutput {
	return o.ToTopicCollectiveConstantPtrOutputWithContext(context.Background())
}

func (o TopicCollectiveConstantOutput) ToTopicCollectiveConstantPtrOutputWithContext(ctx context.Context) TopicCollectiveConstantPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicCollectiveConstant) *TopicCollectiveConstant {
		return &v
	}).(TopicCollectiveConstantPtrOutput)
}

// A list of values for the collective constant.
func (o TopicCollectiveConstantOutput) ValueList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TopicCollectiveConstant) []string { return v.ValueList }).(pulumi.StringArrayOutput)
}

type TopicCollectiveConstantPtrOutput struct{ *pulumi.OutputState }

func (TopicCollectiveConstantPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicCollectiveConstant)(nil)).Elem()
}

func (o TopicCollectiveConstantPtrOutput) ToTopicCollectiveConstantPtrOutput() TopicCollectiveConstantPtrOutput {
	return o
}

func (o TopicCollectiveConstantPtrOutput) ToTopicCollectiveConstantPtrOutputWithContext(ctx context.Context) TopicCollectiveConstantPtrOutput {
	return o
}

func (o TopicCollectiveConstantPtrOutput) Elem() TopicCollectiveConstantOutput {
	return o.ApplyT(func(v *TopicCollectiveConstant) TopicCollectiveConstant {
		if v != nil {
			return *v
		}
		var ret TopicCollectiveConstant
		return ret
	}).(TopicCollectiveConstantOutput)
}

// A list of values for the collective constant.
func (o TopicCollectiveConstantPtrOutput) ValueList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TopicCollectiveConstant) []string {
		if v == nil {
			return nil
		}
		return v.ValueList
	}).(pulumi.StringArrayOutput)
}

type TopicColumn struct {
	// The type of aggregation that is performed on the column data when it's queried.
	Aggregation *TopicDefaultAggregation `pulumi:"aggregation"`
	// The list of aggregation types that are allowed for the column. Valid values for this structure are `COUNT` , `DISTINCT_COUNT` , `MIN` , `MAX` , `MEDIAN` , `SUM` , `AVERAGE` , `STDEV` , `STDEVP` , `VAR` , `VARP` , and `PERCENTILE` .
	AllowedAggregations []TopicAuthorSpecifiedAggregation `pulumi:"allowedAggregations"`
	// The other names or aliases for the column cell value.
	CellValueSynonyms []TopicCellValueSynonym `pulumi:"cellValueSynonyms"`
	// The role of the column in the data. Valid values are `DIMENSION` and `MEASURE` .
	ColumnDataRole *TopicColumnDataRole `pulumi:"columnDataRole"`
	// A description of the column and its contents.
	ColumnDescription *string `pulumi:"columnDescription"`
	// A user-friendly name for the column.
	ColumnFriendlyName *string `pulumi:"columnFriendlyName"`
	// The name of the column.
	ColumnName string `pulumi:"columnName"`
	// The other names or aliases for the column.
	ColumnSynonyms []string `pulumi:"columnSynonyms"`
	// The order in which data is displayed for the column when it's used in a comparative context.
	ComparativeOrder *TopicComparativeOrder `pulumi:"comparativeOrder"`
	// The default formatting used for values in the column.
	DefaultFormatting *TopicDefaultFormatting `pulumi:"defaultFormatting"`
	// A Boolean value that indicates whether the column shows in the autocomplete functionality.
	DisableIndexing *bool `pulumi:"disableIndexing"`
	// A Boolean value that indicates whether the column is included in the query results.
	IsIncludedInTopic *bool `pulumi:"isIncludedInTopic"`
	// A Boolean value that indicates whether to aggregate the column data when it's used in a filter context.
	NeverAggregateInFilter *bool `pulumi:"neverAggregateInFilter"`
	// The non additive value for the column.
	NonAdditive *bool `pulumi:"nonAdditive"`
	// The list of aggregation types that are not allowed for the column. Valid values for this structure are `COUNT` , `DISTINCT_COUNT` , `MIN` , `MAX` , `MEDIAN` , `SUM` , `AVERAGE` , `STDEV` , `STDEVP` , `VAR` , `VARP` , and `PERCENTILE` .
	NotAllowedAggregations []TopicAuthorSpecifiedAggregation `pulumi:"notAllowedAggregations"`
	// The semantic type of data contained in the column.
	SemanticType *TopicSemanticType `pulumi:"semanticType"`
	// The level of time precision that is used to aggregate `DateTime` values.
	TimeGranularity *TopicTimeGranularity `pulumi:"timeGranularity"`
}

// TopicColumnInput is an input type that accepts TopicColumnArgs and TopicColumnOutput values.
// You can construct a concrete instance of `TopicColumnInput` via:
//
//	TopicColumnArgs{...}
type TopicColumnInput interface {
	pulumi.Input

	ToTopicColumnOutput() TopicColumnOutput
	ToTopicColumnOutputWithContext(context.Context) TopicColumnOutput
}

type TopicColumnArgs struct {
	// The type of aggregation that is performed on the column data when it's queried.
	Aggregation TopicDefaultAggregationPtrInput `pulumi:"aggregation"`
	// The list of aggregation types that are allowed for the column. Valid values for this structure are `COUNT` , `DISTINCT_COUNT` , `MIN` , `MAX` , `MEDIAN` , `SUM` , `AVERAGE` , `STDEV` , `STDEVP` , `VAR` , `VARP` , and `PERCENTILE` .
	AllowedAggregations TopicAuthorSpecifiedAggregationArrayInput `pulumi:"allowedAggregations"`
	// The other names or aliases for the column cell value.
	CellValueSynonyms TopicCellValueSynonymArrayInput `pulumi:"cellValueSynonyms"`
	// The role of the column in the data. Valid values are `DIMENSION` and `MEASURE` .
	ColumnDataRole TopicColumnDataRolePtrInput `pulumi:"columnDataRole"`
	// A description of the column and its contents.
	ColumnDescription pulumi.StringPtrInput `pulumi:"columnDescription"`
	// A user-friendly name for the column.
	ColumnFriendlyName pulumi.StringPtrInput `pulumi:"columnFriendlyName"`
	// The name of the column.
	ColumnName pulumi.StringInput `pulumi:"columnName"`
	// The other names or aliases for the column.
	ColumnSynonyms pulumi.StringArrayInput `pulumi:"columnSynonyms"`
	// The order in which data is displayed for the column when it's used in a comparative context.
	ComparativeOrder TopicComparativeOrderPtrInput `pulumi:"comparativeOrder"`
	// The default formatting used for values in the column.
	DefaultFormatting TopicDefaultFormattingPtrInput `pulumi:"defaultFormatting"`
	// A Boolean value that indicates whether the column shows in the autocomplete functionality.
	DisableIndexing pulumi.BoolPtrInput `pulumi:"disableIndexing"`
	// A Boolean value that indicates whether the column is included in the query results.
	IsIncludedInTopic pulumi.BoolPtrInput `pulumi:"isIncludedInTopic"`
	// A Boolean value that indicates whether to aggregate the column data when it's used in a filter context.
	NeverAggregateInFilter pulumi.BoolPtrInput `pulumi:"neverAggregateInFilter"`
	// The non additive value for the column.
	NonAdditive pulumi.BoolPtrInput `pulumi:"nonAdditive"`
	// The list of aggregation types that are not allowed for the column. Valid values for this structure are `COUNT` , `DISTINCT_COUNT` , `MIN` , `MAX` , `MEDIAN` , `SUM` , `AVERAGE` , `STDEV` , `STDEVP` , `VAR` , `VARP` , and `PERCENTILE` .
	NotAllowedAggregations TopicAuthorSpecifiedAggregationArrayInput `pulumi:"notAllowedAggregations"`
	// The semantic type of data contained in the column.
	SemanticType TopicSemanticTypePtrInput `pulumi:"semanticType"`
	// The level of time precision that is used to aggregate `DateTime` values.
	TimeGranularity TopicTimeGranularityPtrInput `pulumi:"timeGranularity"`
}

func (TopicColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicColumn)(nil)).Elem()
}

func (i TopicColumnArgs) ToTopicColumnOutput() TopicColumnOutput {
	return i.ToTopicColumnOutputWithContext(context.Background())
}

func (i TopicColumnArgs) ToTopicColumnOutputWithContext(ctx context.Context) TopicColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicColumnOutput)
}

// TopicColumnArrayInput is an input type that accepts TopicColumnArray and TopicColumnArrayOutput values.
// You can construct a concrete instance of `TopicColumnArrayInput` via:
//
//	TopicColumnArray{ TopicColumnArgs{...} }
type TopicColumnArrayInput interface {
	pulumi.Input

	ToTopicColumnArrayOutput() TopicColumnArrayOutput
	ToTopicColumnArrayOutputWithContext(context.Context) TopicColumnArrayOutput
}

type TopicColumnArray []TopicColumnInput

func (TopicColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicColumn)(nil)).Elem()
}

func (i TopicColumnArray) ToTopicColumnArrayOutput() TopicColumnArrayOutput {
	return i.ToTopicColumnArrayOutputWithContext(context.Background())
}

func (i TopicColumnArray) ToTopicColumnArrayOutputWithContext(ctx context.Context) TopicColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicColumnArrayOutput)
}

type TopicColumnOutput struct{ *pulumi.OutputState }

func (TopicColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicColumn)(nil)).Elem()
}

func (o TopicColumnOutput) ToTopicColumnOutput() TopicColumnOutput {
	return o
}

func (o TopicColumnOutput) ToTopicColumnOutputWithContext(ctx context.Context) TopicColumnOutput {
	return o
}

// The type of aggregation that is performed on the column data when it's queried.
func (o TopicColumnOutput) Aggregation() TopicDefaultAggregationPtrOutput {
	return o.ApplyT(func(v TopicColumn) *TopicDefaultAggregation { return v.Aggregation }).(TopicDefaultAggregationPtrOutput)
}

// The list of aggregation types that are allowed for the column. Valid values for this structure are `COUNT` , `DISTINCT_COUNT` , `MIN` , `MAX` , `MEDIAN` , `SUM` , `AVERAGE` , `STDEV` , `STDEVP` , `VAR` , `VARP` , and `PERCENTILE` .
func (o TopicColumnOutput) AllowedAggregations() TopicAuthorSpecifiedAggregationArrayOutput {
	return o.ApplyT(func(v TopicColumn) []TopicAuthorSpecifiedAggregation { return v.AllowedAggregations }).(TopicAuthorSpecifiedAggregationArrayOutput)
}

// The other names or aliases for the column cell value.
func (o TopicColumnOutput) CellValueSynonyms() TopicCellValueSynonymArrayOutput {
	return o.ApplyT(func(v TopicColumn) []TopicCellValueSynonym { return v.CellValueSynonyms }).(TopicCellValueSynonymArrayOutput)
}

// The role of the column in the data. Valid values are `DIMENSION` and `MEASURE` .
func (o TopicColumnOutput) ColumnDataRole() TopicColumnDataRolePtrOutput {
	return o.ApplyT(func(v TopicColumn) *TopicColumnDataRole { return v.ColumnDataRole }).(TopicColumnDataRolePtrOutput)
}

// A description of the column and its contents.
func (o TopicColumnOutput) ColumnDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicColumn) *string { return v.ColumnDescription }).(pulumi.StringPtrOutput)
}

// A user-friendly name for the column.
func (o TopicColumnOutput) ColumnFriendlyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicColumn) *string { return v.ColumnFriendlyName }).(pulumi.StringPtrOutput)
}

// The name of the column.
func (o TopicColumnOutput) ColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v TopicColumn) string { return v.ColumnName }).(pulumi.StringOutput)
}

// The other names or aliases for the column.
func (o TopicColumnOutput) ColumnSynonyms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TopicColumn) []string { return v.ColumnSynonyms }).(pulumi.StringArrayOutput)
}

// The order in which data is displayed for the column when it's used in a comparative context.
func (o TopicColumnOutput) ComparativeOrder() TopicComparativeOrderPtrOutput {
	return o.ApplyT(func(v TopicColumn) *TopicComparativeOrder { return v.ComparativeOrder }).(TopicComparativeOrderPtrOutput)
}

// The default formatting used for values in the column.
func (o TopicColumnOutput) DefaultFormatting() TopicDefaultFormattingPtrOutput {
	return o.ApplyT(func(v TopicColumn) *TopicDefaultFormatting { return v.DefaultFormatting }).(TopicDefaultFormattingPtrOutput)
}

// A Boolean value that indicates whether the column shows in the autocomplete functionality.
func (o TopicColumnOutput) DisableIndexing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TopicColumn) *bool { return v.DisableIndexing }).(pulumi.BoolPtrOutput)
}

// A Boolean value that indicates whether the column is included in the query results.
func (o TopicColumnOutput) IsIncludedInTopic() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TopicColumn) *bool { return v.IsIncludedInTopic }).(pulumi.BoolPtrOutput)
}

// A Boolean value that indicates whether to aggregate the column data when it's used in a filter context.
func (o TopicColumnOutput) NeverAggregateInFilter() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TopicColumn) *bool { return v.NeverAggregateInFilter }).(pulumi.BoolPtrOutput)
}

// The non additive value for the column.
func (o TopicColumnOutput) NonAdditive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TopicColumn) *bool { return v.NonAdditive }).(pulumi.BoolPtrOutput)
}

// The list of aggregation types that are not allowed for the column. Valid values for this structure are `COUNT` , `DISTINCT_COUNT` , `MIN` , `MAX` , `MEDIAN` , `SUM` , `AVERAGE` , `STDEV` , `STDEVP` , `VAR` , `VARP` , and `PERCENTILE` .
func (o TopicColumnOutput) NotAllowedAggregations() TopicAuthorSpecifiedAggregationArrayOutput {
	return o.ApplyT(func(v TopicColumn) []TopicAuthorSpecifiedAggregation { return v.NotAllowedAggregations }).(TopicAuthorSpecifiedAggregationArrayOutput)
}

// The semantic type of data contained in the column.
func (o TopicColumnOutput) SemanticType() TopicSemanticTypePtrOutput {
	return o.ApplyT(func(v TopicColumn) *TopicSemanticType { return v.SemanticType }).(TopicSemanticTypePtrOutput)
}

// The level of time precision that is used to aggregate `DateTime` values.
func (o TopicColumnOutput) TimeGranularity() TopicTimeGranularityPtrOutput {
	return o.ApplyT(func(v TopicColumn) *TopicTimeGranularity { return v.TimeGranularity }).(TopicTimeGranularityPtrOutput)
}

type TopicColumnArrayOutput struct{ *pulumi.OutputState }

func (TopicColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicColumn)(nil)).Elem()
}

func (o TopicColumnArrayOutput) ToTopicColumnArrayOutput() TopicColumnArrayOutput {
	return o
}

func (o TopicColumnArrayOutput) ToTopicColumnArrayOutputWithContext(ctx context.Context) TopicColumnArrayOutput {
	return o
}

func (o TopicColumnArrayOutput) Index(i pulumi.IntInput) TopicColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TopicColumn {
		return vs[0].([]TopicColumn)[vs[1].(int)]
	}).(TopicColumnOutput)
}

type TopicComparativeOrder struct {
	// The list of columns to be used in the ordering.
	SpecifedOrder []string `pulumi:"specifedOrder"`
	// The treat of undefined specified values. Valid values for this structure are `LEAST` and `MOST` .
	TreatUndefinedSpecifiedValues *TopicUndefinedSpecifiedValueType `pulumi:"treatUndefinedSpecifiedValues"`
	// The ordering type for a column. Valid values for this structure are `GREATER_IS_BETTER` , `LESSER_IS_BETTER` and `SPECIFIED` .
	UseOrdering *TopicColumnOrderingType `pulumi:"useOrdering"`
}

// TopicComparativeOrderInput is an input type that accepts TopicComparativeOrderArgs and TopicComparativeOrderOutput values.
// You can construct a concrete instance of `TopicComparativeOrderInput` via:
//
//	TopicComparativeOrderArgs{...}
type TopicComparativeOrderInput interface {
	pulumi.Input

	ToTopicComparativeOrderOutput() TopicComparativeOrderOutput
	ToTopicComparativeOrderOutputWithContext(context.Context) TopicComparativeOrderOutput
}

type TopicComparativeOrderArgs struct {
	// The list of columns to be used in the ordering.
	SpecifedOrder pulumi.StringArrayInput `pulumi:"specifedOrder"`
	// The treat of undefined specified values. Valid values for this structure are `LEAST` and `MOST` .
	TreatUndefinedSpecifiedValues TopicUndefinedSpecifiedValueTypePtrInput `pulumi:"treatUndefinedSpecifiedValues"`
	// The ordering type for a column. Valid values for this structure are `GREATER_IS_BETTER` , `LESSER_IS_BETTER` and `SPECIFIED` .
	UseOrdering TopicColumnOrderingTypePtrInput `pulumi:"useOrdering"`
}

func (TopicComparativeOrderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicComparativeOrder)(nil)).Elem()
}

func (i TopicComparativeOrderArgs) ToTopicComparativeOrderOutput() TopicComparativeOrderOutput {
	return i.ToTopicComparativeOrderOutputWithContext(context.Background())
}

func (i TopicComparativeOrderArgs) ToTopicComparativeOrderOutputWithContext(ctx context.Context) TopicComparativeOrderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicComparativeOrderOutput)
}

func (i TopicComparativeOrderArgs) ToTopicComparativeOrderPtrOutput() TopicComparativeOrderPtrOutput {
	return i.ToTopicComparativeOrderPtrOutputWithContext(context.Background())
}

func (i TopicComparativeOrderArgs) ToTopicComparativeOrderPtrOutputWithContext(ctx context.Context) TopicComparativeOrderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicComparativeOrderOutput).ToTopicComparativeOrderPtrOutputWithContext(ctx)
}

// TopicComparativeOrderPtrInput is an input type that accepts TopicComparativeOrderArgs, TopicComparativeOrderPtr and TopicComparativeOrderPtrOutput values.
// You can construct a concrete instance of `TopicComparativeOrderPtrInput` via:
//
//	        TopicComparativeOrderArgs{...}
//
//	or:
//
//	        nil
type TopicComparativeOrderPtrInput interface {
	pulumi.Input

	ToTopicComparativeOrderPtrOutput() TopicComparativeOrderPtrOutput
	ToTopicComparativeOrderPtrOutputWithContext(context.Context) TopicComparativeOrderPtrOutput
}

type topicComparativeOrderPtrType TopicComparativeOrderArgs

func TopicComparativeOrderPtr(v *TopicComparativeOrderArgs) TopicComparativeOrderPtrInput {
	return (*topicComparativeOrderPtrType)(v)
}

func (*topicComparativeOrderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicComparativeOrder)(nil)).Elem()
}

func (i *topicComparativeOrderPtrType) ToTopicComparativeOrderPtrOutput() TopicComparativeOrderPtrOutput {
	return i.ToTopicComparativeOrderPtrOutputWithContext(context.Background())
}

func (i *topicComparativeOrderPtrType) ToTopicComparativeOrderPtrOutputWithContext(ctx context.Context) TopicComparativeOrderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicComparativeOrderPtrOutput)
}

type TopicComparativeOrderOutput struct{ *pulumi.OutputState }

func (TopicComparativeOrderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicComparativeOrder)(nil)).Elem()
}

func (o TopicComparativeOrderOutput) ToTopicComparativeOrderOutput() TopicComparativeOrderOutput {
	return o
}

func (o TopicComparativeOrderOutput) ToTopicComparativeOrderOutputWithContext(ctx context.Context) TopicComparativeOrderOutput {
	return o
}

func (o TopicComparativeOrderOutput) ToTopicComparativeOrderPtrOutput() TopicComparativeOrderPtrOutput {
	return o.ToTopicComparativeOrderPtrOutputWithContext(context.Background())
}

func (o TopicComparativeOrderOutput) ToTopicComparativeOrderPtrOutputWithContext(ctx context.Context) TopicComparativeOrderPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicComparativeOrder) *TopicComparativeOrder {
		return &v
	}).(TopicComparativeOrderPtrOutput)
}

// The list of columns to be used in the ordering.
func (o TopicComparativeOrderOutput) SpecifedOrder() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TopicComparativeOrder) []string { return v.SpecifedOrder }).(pulumi.StringArrayOutput)
}

// The treat of undefined specified values. Valid values for this structure are `LEAST` and `MOST` .
func (o TopicComparativeOrderOutput) TreatUndefinedSpecifiedValues() TopicUndefinedSpecifiedValueTypePtrOutput {
	return o.ApplyT(func(v TopicComparativeOrder) *TopicUndefinedSpecifiedValueType {
		return v.TreatUndefinedSpecifiedValues
	}).(TopicUndefinedSpecifiedValueTypePtrOutput)
}

// The ordering type for a column. Valid values for this structure are `GREATER_IS_BETTER` , `LESSER_IS_BETTER` and `SPECIFIED` .
func (o TopicComparativeOrderOutput) UseOrdering() TopicColumnOrderingTypePtrOutput {
	return o.ApplyT(func(v TopicComparativeOrder) *TopicColumnOrderingType { return v.UseOrdering }).(TopicColumnOrderingTypePtrOutput)
}

type TopicComparativeOrderPtrOutput struct{ *pulumi.OutputState }

func (TopicComparativeOrderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicComparativeOrder)(nil)).Elem()
}

func (o TopicComparativeOrderPtrOutput) ToTopicComparativeOrderPtrOutput() TopicComparativeOrderPtrOutput {
	return o
}

func (o TopicComparativeOrderPtrOutput) ToTopicComparativeOrderPtrOutputWithContext(ctx context.Context) TopicComparativeOrderPtrOutput {
	return o
}

func (o TopicComparativeOrderPtrOutput) Elem() TopicComparativeOrderOutput {
	return o.ApplyT(func(v *TopicComparativeOrder) TopicComparativeOrder {
		if v != nil {
			return *v
		}
		var ret TopicComparativeOrder
		return ret
	}).(TopicComparativeOrderOutput)
}

// The list of columns to be used in the ordering.
func (o TopicComparativeOrderPtrOutput) SpecifedOrder() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TopicComparativeOrder) []string {
		if v == nil {
			return nil
		}
		return v.SpecifedOrder
	}).(pulumi.StringArrayOutput)
}

// The treat of undefined specified values. Valid values for this structure are `LEAST` and `MOST` .
func (o TopicComparativeOrderPtrOutput) TreatUndefinedSpecifiedValues() TopicUndefinedSpecifiedValueTypePtrOutput {
	return o.ApplyT(func(v *TopicComparativeOrder) *TopicUndefinedSpecifiedValueType {
		if v == nil {
			return nil
		}
		return v.TreatUndefinedSpecifiedValues
	}).(TopicUndefinedSpecifiedValueTypePtrOutput)
}

// The ordering type for a column. Valid values for this structure are `GREATER_IS_BETTER` , `LESSER_IS_BETTER` and `SPECIFIED` .
func (o TopicComparativeOrderPtrOutput) UseOrdering() TopicColumnOrderingTypePtrOutput {
	return o.ApplyT(func(v *TopicComparativeOrder) *TopicColumnOrderingType {
		if v == nil {
			return nil
		}
		return v.UseOrdering
	}).(TopicColumnOrderingTypePtrOutput)
}

type TopicDataAggregation struct {
	// The level of time precision that is used to aggregate `DateTime` values.
	DatasetRowDateGranularity *TopicTimeGranularity `pulumi:"datasetRowDateGranularity"`
	// The column name for the default date.
	DefaultDateColumnName *string `pulumi:"defaultDateColumnName"`
}

// TopicDataAggregationInput is an input type that accepts TopicDataAggregationArgs and TopicDataAggregationOutput values.
// You can construct a concrete instance of `TopicDataAggregationInput` via:
//
//	TopicDataAggregationArgs{...}
type TopicDataAggregationInput interface {
	pulumi.Input

	ToTopicDataAggregationOutput() TopicDataAggregationOutput
	ToTopicDataAggregationOutputWithContext(context.Context) TopicDataAggregationOutput
}

type TopicDataAggregationArgs struct {
	// The level of time precision that is used to aggregate `DateTime` values.
	DatasetRowDateGranularity TopicTimeGranularityPtrInput `pulumi:"datasetRowDateGranularity"`
	// The column name for the default date.
	DefaultDateColumnName pulumi.StringPtrInput `pulumi:"defaultDateColumnName"`
}

func (TopicDataAggregationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicDataAggregation)(nil)).Elem()
}

func (i TopicDataAggregationArgs) ToTopicDataAggregationOutput() TopicDataAggregationOutput {
	return i.ToTopicDataAggregationOutputWithContext(context.Background())
}

func (i TopicDataAggregationArgs) ToTopicDataAggregationOutputWithContext(ctx context.Context) TopicDataAggregationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicDataAggregationOutput)
}

func (i TopicDataAggregationArgs) ToTopicDataAggregationPtrOutput() TopicDataAggregationPtrOutput {
	return i.ToTopicDataAggregationPtrOutputWithContext(context.Background())
}

func (i TopicDataAggregationArgs) ToTopicDataAggregationPtrOutputWithContext(ctx context.Context) TopicDataAggregationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicDataAggregationOutput).ToTopicDataAggregationPtrOutputWithContext(ctx)
}

// TopicDataAggregationPtrInput is an input type that accepts TopicDataAggregationArgs, TopicDataAggregationPtr and TopicDataAggregationPtrOutput values.
// You can construct a concrete instance of `TopicDataAggregationPtrInput` via:
//
//	        TopicDataAggregationArgs{...}
//
//	or:
//
//	        nil
type TopicDataAggregationPtrInput interface {
	pulumi.Input

	ToTopicDataAggregationPtrOutput() TopicDataAggregationPtrOutput
	ToTopicDataAggregationPtrOutputWithContext(context.Context) TopicDataAggregationPtrOutput
}

type topicDataAggregationPtrType TopicDataAggregationArgs

func TopicDataAggregationPtr(v *TopicDataAggregationArgs) TopicDataAggregationPtrInput {
	return (*topicDataAggregationPtrType)(v)
}

func (*topicDataAggregationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicDataAggregation)(nil)).Elem()
}

func (i *topicDataAggregationPtrType) ToTopicDataAggregationPtrOutput() TopicDataAggregationPtrOutput {
	return i.ToTopicDataAggregationPtrOutputWithContext(context.Background())
}

func (i *topicDataAggregationPtrType) ToTopicDataAggregationPtrOutputWithContext(ctx context.Context) TopicDataAggregationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicDataAggregationPtrOutput)
}

type TopicDataAggregationOutput struct{ *pulumi.OutputState }

func (TopicDataAggregationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicDataAggregation)(nil)).Elem()
}

func (o TopicDataAggregationOutput) ToTopicDataAggregationOutput() TopicDataAggregationOutput {
	return o
}

func (o TopicDataAggregationOutput) ToTopicDataAggregationOutputWithContext(ctx context.Context) TopicDataAggregationOutput {
	return o
}

func (o TopicDataAggregationOutput) ToTopicDataAggregationPtrOutput() TopicDataAggregationPtrOutput {
	return o.ToTopicDataAggregationPtrOutputWithContext(context.Background())
}

func (o TopicDataAggregationOutput) ToTopicDataAggregationPtrOutputWithContext(ctx context.Context) TopicDataAggregationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicDataAggregation) *TopicDataAggregation {
		return &v
	}).(TopicDataAggregationPtrOutput)
}

// The level of time precision that is used to aggregate `DateTime` values.
func (o TopicDataAggregationOutput) DatasetRowDateGranularity() TopicTimeGranularityPtrOutput {
	return o.ApplyT(func(v TopicDataAggregation) *TopicTimeGranularity { return v.DatasetRowDateGranularity }).(TopicTimeGranularityPtrOutput)
}

// The column name for the default date.
func (o TopicDataAggregationOutput) DefaultDateColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicDataAggregation) *string { return v.DefaultDateColumnName }).(pulumi.StringPtrOutput)
}

type TopicDataAggregationPtrOutput struct{ *pulumi.OutputState }

func (TopicDataAggregationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicDataAggregation)(nil)).Elem()
}

func (o TopicDataAggregationPtrOutput) ToTopicDataAggregationPtrOutput() TopicDataAggregationPtrOutput {
	return o
}

func (o TopicDataAggregationPtrOutput) ToTopicDataAggregationPtrOutputWithContext(ctx context.Context) TopicDataAggregationPtrOutput {
	return o
}

func (o TopicDataAggregationPtrOutput) Elem() TopicDataAggregationOutput {
	return o.ApplyT(func(v *TopicDataAggregation) TopicDataAggregation {
		if v != nil {
			return *v
		}
		var ret TopicDataAggregation
		return ret
	}).(TopicDataAggregationOutput)
}

// The level of time precision that is used to aggregate `DateTime` values.
func (o TopicDataAggregationPtrOutput) DatasetRowDateGranularity() TopicTimeGranularityPtrOutput {
	return o.ApplyT(func(v *TopicDataAggregation) *TopicTimeGranularity {
		if v == nil {
			return nil
		}
		return v.DatasetRowDateGranularity
	}).(TopicTimeGranularityPtrOutput)
}

// The column name for the default date.
func (o TopicDataAggregationPtrOutput) DefaultDateColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicDataAggregation) *string {
		if v == nil {
			return nil
		}
		return v.DefaultDateColumnName
	}).(pulumi.StringPtrOutput)
}

type TopicDatasetMetadata struct {
	// The list of calculated field definitions.
	CalculatedFields []TopicCalculatedField `pulumi:"calculatedFields"`
	// The list of column definitions.
	Columns []TopicColumn `pulumi:"columns"`
	// The definition of a data aggregation.
	DataAggregation *TopicDataAggregation `pulumi:"dataAggregation"`
	// The Amazon Resource Name (ARN) of the dataset.
	DatasetArn string `pulumi:"datasetArn"`
	// The description of the dataset.
	DatasetDescription *string `pulumi:"datasetDescription"`
	// The name of the dataset.
	DatasetName *string `pulumi:"datasetName"`
	// The list of filter definitions.
	Filters []TopicFilter `pulumi:"filters"`
	// The list of named entities definitions.
	NamedEntities []TopicNamedEntity `pulumi:"namedEntities"`
}

// TopicDatasetMetadataInput is an input type that accepts TopicDatasetMetadataArgs and TopicDatasetMetadataOutput values.
// You can construct a concrete instance of `TopicDatasetMetadataInput` via:
//
//	TopicDatasetMetadataArgs{...}
type TopicDatasetMetadataInput interface {
	pulumi.Input

	ToTopicDatasetMetadataOutput() TopicDatasetMetadataOutput
	ToTopicDatasetMetadataOutputWithContext(context.Context) TopicDatasetMetadataOutput
}

type TopicDatasetMetadataArgs struct {
	// The list of calculated field definitions.
	CalculatedFields TopicCalculatedFieldArrayInput `pulumi:"calculatedFields"`
	// The list of column definitions.
	Columns TopicColumnArrayInput `pulumi:"columns"`
	// The definition of a data aggregation.
	DataAggregation TopicDataAggregationPtrInput `pulumi:"dataAggregation"`
	// The Amazon Resource Name (ARN) of the dataset.
	DatasetArn pulumi.StringInput `pulumi:"datasetArn"`
	// The description of the dataset.
	DatasetDescription pulumi.StringPtrInput `pulumi:"datasetDescription"`
	// The name of the dataset.
	DatasetName pulumi.StringPtrInput `pulumi:"datasetName"`
	// The list of filter definitions.
	Filters TopicFilterArrayInput `pulumi:"filters"`
	// The list of named entities definitions.
	NamedEntities TopicNamedEntityArrayInput `pulumi:"namedEntities"`
}

func (TopicDatasetMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicDatasetMetadata)(nil)).Elem()
}

func (i TopicDatasetMetadataArgs) ToTopicDatasetMetadataOutput() TopicDatasetMetadataOutput {
	return i.ToTopicDatasetMetadataOutputWithContext(context.Background())
}

func (i TopicDatasetMetadataArgs) ToTopicDatasetMetadataOutputWithContext(ctx context.Context) TopicDatasetMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicDatasetMetadataOutput)
}

// TopicDatasetMetadataArrayInput is an input type that accepts TopicDatasetMetadataArray and TopicDatasetMetadataArrayOutput values.
// You can construct a concrete instance of `TopicDatasetMetadataArrayInput` via:
//
//	TopicDatasetMetadataArray{ TopicDatasetMetadataArgs{...} }
type TopicDatasetMetadataArrayInput interface {
	pulumi.Input

	ToTopicDatasetMetadataArrayOutput() TopicDatasetMetadataArrayOutput
	ToTopicDatasetMetadataArrayOutputWithContext(context.Context) TopicDatasetMetadataArrayOutput
}

type TopicDatasetMetadataArray []TopicDatasetMetadataInput

func (TopicDatasetMetadataArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicDatasetMetadata)(nil)).Elem()
}

func (i TopicDatasetMetadataArray) ToTopicDatasetMetadataArrayOutput() TopicDatasetMetadataArrayOutput {
	return i.ToTopicDatasetMetadataArrayOutputWithContext(context.Background())
}

func (i TopicDatasetMetadataArray) ToTopicDatasetMetadataArrayOutputWithContext(ctx context.Context) TopicDatasetMetadataArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicDatasetMetadataArrayOutput)
}

type TopicDatasetMetadataOutput struct{ *pulumi.OutputState }

func (TopicDatasetMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicDatasetMetadata)(nil)).Elem()
}

func (o TopicDatasetMetadataOutput) ToTopicDatasetMetadataOutput() TopicDatasetMetadataOutput {
	return o
}

func (o TopicDatasetMetadataOutput) ToTopicDatasetMetadataOutputWithContext(ctx context.Context) TopicDatasetMetadataOutput {
	return o
}

// The list of calculated field definitions.
func (o TopicDatasetMetadataOutput) CalculatedFields() TopicCalculatedFieldArrayOutput {
	return o.ApplyT(func(v TopicDatasetMetadata) []TopicCalculatedField { return v.CalculatedFields }).(TopicCalculatedFieldArrayOutput)
}

// The list of column definitions.
func (o TopicDatasetMetadataOutput) Columns() TopicColumnArrayOutput {
	return o.ApplyT(func(v TopicDatasetMetadata) []TopicColumn { return v.Columns }).(TopicColumnArrayOutput)
}

// The definition of a data aggregation.
func (o TopicDatasetMetadataOutput) DataAggregation() TopicDataAggregationPtrOutput {
	return o.ApplyT(func(v TopicDatasetMetadata) *TopicDataAggregation { return v.DataAggregation }).(TopicDataAggregationPtrOutput)
}

// The Amazon Resource Name (ARN) of the dataset.
func (o TopicDatasetMetadataOutput) DatasetArn() pulumi.StringOutput {
	return o.ApplyT(func(v TopicDatasetMetadata) string { return v.DatasetArn }).(pulumi.StringOutput)
}

// The description of the dataset.
func (o TopicDatasetMetadataOutput) DatasetDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicDatasetMetadata) *string { return v.DatasetDescription }).(pulumi.StringPtrOutput)
}

// The name of the dataset.
func (o TopicDatasetMetadataOutput) DatasetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicDatasetMetadata) *string { return v.DatasetName }).(pulumi.StringPtrOutput)
}

// The list of filter definitions.
func (o TopicDatasetMetadataOutput) Filters() TopicFilterArrayOutput {
	return o.ApplyT(func(v TopicDatasetMetadata) []TopicFilter { return v.Filters }).(TopicFilterArrayOutput)
}

// The list of named entities definitions.
func (o TopicDatasetMetadataOutput) NamedEntities() TopicNamedEntityArrayOutput {
	return o.ApplyT(func(v TopicDatasetMetadata) []TopicNamedEntity { return v.NamedEntities }).(TopicNamedEntityArrayOutput)
}

type TopicDatasetMetadataArrayOutput struct{ *pulumi.OutputState }

func (TopicDatasetMetadataArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicDatasetMetadata)(nil)).Elem()
}

func (o TopicDatasetMetadataArrayOutput) ToTopicDatasetMetadataArrayOutput() TopicDatasetMetadataArrayOutput {
	return o
}

func (o TopicDatasetMetadataArrayOutput) ToTopicDatasetMetadataArrayOutputWithContext(ctx context.Context) TopicDatasetMetadataArrayOutput {
	return o
}

func (o TopicDatasetMetadataArrayOutput) Index(i pulumi.IntInput) TopicDatasetMetadataOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TopicDatasetMetadata {
		return vs[0].([]TopicDatasetMetadata)[vs[1].(int)]
	}).(TopicDatasetMetadataOutput)
}

type TopicDateRangeFilter struct {
	// The constant used in a date range filter.
	Constant *TopicRangeFilterConstant `pulumi:"constant"`
	// A Boolean value that indicates whether the date range filter should include the boundary values. If set to true, the filter includes the start and end dates. If set to false, the filter excludes them.
	Inclusive *bool `pulumi:"inclusive"`
}

// TopicDateRangeFilterInput is an input type that accepts TopicDateRangeFilterArgs and TopicDateRangeFilterOutput values.
// You can construct a concrete instance of `TopicDateRangeFilterInput` via:
//
//	TopicDateRangeFilterArgs{...}
type TopicDateRangeFilterInput interface {
	pulumi.Input

	ToTopicDateRangeFilterOutput() TopicDateRangeFilterOutput
	ToTopicDateRangeFilterOutputWithContext(context.Context) TopicDateRangeFilterOutput
}

type TopicDateRangeFilterArgs struct {
	// The constant used in a date range filter.
	Constant TopicRangeFilterConstantPtrInput `pulumi:"constant"`
	// A Boolean value that indicates whether the date range filter should include the boundary values. If set to true, the filter includes the start and end dates. If set to false, the filter excludes them.
	Inclusive pulumi.BoolPtrInput `pulumi:"inclusive"`
}

func (TopicDateRangeFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicDateRangeFilter)(nil)).Elem()
}

func (i TopicDateRangeFilterArgs) ToTopicDateRangeFilterOutput() TopicDateRangeFilterOutput {
	return i.ToTopicDateRangeFilterOutputWithContext(context.Background())
}

func (i TopicDateRangeFilterArgs) ToTopicDateRangeFilterOutputWithContext(ctx context.Context) TopicDateRangeFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicDateRangeFilterOutput)
}

func (i TopicDateRangeFilterArgs) ToTopicDateRangeFilterPtrOutput() TopicDateRangeFilterPtrOutput {
	return i.ToTopicDateRangeFilterPtrOutputWithContext(context.Background())
}

func (i TopicDateRangeFilterArgs) ToTopicDateRangeFilterPtrOutputWithContext(ctx context.Context) TopicDateRangeFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicDateRangeFilterOutput).ToTopicDateRangeFilterPtrOutputWithContext(ctx)
}

// TopicDateRangeFilterPtrInput is an input type that accepts TopicDateRangeFilterArgs, TopicDateRangeFilterPtr and TopicDateRangeFilterPtrOutput values.
// You can construct a concrete instance of `TopicDateRangeFilterPtrInput` via:
//
//	        TopicDateRangeFilterArgs{...}
//
//	or:
//
//	        nil
type TopicDateRangeFilterPtrInput interface {
	pulumi.Input

	ToTopicDateRangeFilterPtrOutput() TopicDateRangeFilterPtrOutput
	ToTopicDateRangeFilterPtrOutputWithContext(context.Context) TopicDateRangeFilterPtrOutput
}

type topicDateRangeFilterPtrType TopicDateRangeFilterArgs

func TopicDateRangeFilterPtr(v *TopicDateRangeFilterArgs) TopicDateRangeFilterPtrInput {
	return (*topicDateRangeFilterPtrType)(v)
}

func (*topicDateRangeFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicDateRangeFilter)(nil)).Elem()
}

func (i *topicDateRangeFilterPtrType) ToTopicDateRangeFilterPtrOutput() TopicDateRangeFilterPtrOutput {
	return i.ToTopicDateRangeFilterPtrOutputWithContext(context.Background())
}

func (i *topicDateRangeFilterPtrType) ToTopicDateRangeFilterPtrOutputWithContext(ctx context.Context) TopicDateRangeFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicDateRangeFilterPtrOutput)
}

type TopicDateRangeFilterOutput struct{ *pulumi.OutputState }

func (TopicDateRangeFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicDateRangeFilter)(nil)).Elem()
}

func (o TopicDateRangeFilterOutput) ToTopicDateRangeFilterOutput() TopicDateRangeFilterOutput {
	return o
}

func (o TopicDateRangeFilterOutput) ToTopicDateRangeFilterOutputWithContext(ctx context.Context) TopicDateRangeFilterOutput {
	return o
}

func (o TopicDateRangeFilterOutput) ToTopicDateRangeFilterPtrOutput() TopicDateRangeFilterPtrOutput {
	return o.ToTopicDateRangeFilterPtrOutputWithContext(context.Background())
}

func (o TopicDateRangeFilterOutput) ToTopicDateRangeFilterPtrOutputWithContext(ctx context.Context) TopicDateRangeFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicDateRangeFilter) *TopicDateRangeFilter {
		return &v
	}).(TopicDateRangeFilterPtrOutput)
}

// The constant used in a date range filter.
func (o TopicDateRangeFilterOutput) Constant() TopicRangeFilterConstantPtrOutput {
	return o.ApplyT(func(v TopicDateRangeFilter) *TopicRangeFilterConstant { return v.Constant }).(TopicRangeFilterConstantPtrOutput)
}

// A Boolean value that indicates whether the date range filter should include the boundary values. If set to true, the filter includes the start and end dates. If set to false, the filter excludes them.
func (o TopicDateRangeFilterOutput) Inclusive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TopicDateRangeFilter) *bool { return v.Inclusive }).(pulumi.BoolPtrOutput)
}

type TopicDateRangeFilterPtrOutput struct{ *pulumi.OutputState }

func (TopicDateRangeFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicDateRangeFilter)(nil)).Elem()
}

func (o TopicDateRangeFilterPtrOutput) ToTopicDateRangeFilterPtrOutput() TopicDateRangeFilterPtrOutput {
	return o
}

func (o TopicDateRangeFilterPtrOutput) ToTopicDateRangeFilterPtrOutputWithContext(ctx context.Context) TopicDateRangeFilterPtrOutput {
	return o
}

func (o TopicDateRangeFilterPtrOutput) Elem() TopicDateRangeFilterOutput {
	return o.ApplyT(func(v *TopicDateRangeFilter) TopicDateRangeFilter {
		if v != nil {
			return *v
		}
		var ret TopicDateRangeFilter
		return ret
	}).(TopicDateRangeFilterOutput)
}

// The constant used in a date range filter.
func (o TopicDateRangeFilterPtrOutput) Constant() TopicRangeFilterConstantPtrOutput {
	return o.ApplyT(func(v *TopicDateRangeFilter) *TopicRangeFilterConstant {
		if v == nil {
			return nil
		}
		return v.Constant
	}).(TopicRangeFilterConstantPtrOutput)
}

// A Boolean value that indicates whether the date range filter should include the boundary values. If set to true, the filter includes the start and end dates. If set to false, the filter excludes them.
func (o TopicDateRangeFilterPtrOutput) Inclusive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TopicDateRangeFilter) *bool {
		if v == nil {
			return nil
		}
		return v.Inclusive
	}).(pulumi.BoolPtrOutput)
}

type TopicDefaultFormatting struct {
	// The display format. Valid values for this structure are `AUTO` , `PERCENT` , `CURRENCY` , `NUMBER` , `DATE` , and `STRING` .
	DisplayFormat *TopicDisplayFormat `pulumi:"displayFormat"`
	// The additional options for display formatting.
	DisplayFormatOptions *TopicDisplayFormatOptions `pulumi:"displayFormatOptions"`
}

// TopicDefaultFormattingInput is an input type that accepts TopicDefaultFormattingArgs and TopicDefaultFormattingOutput values.
// You can construct a concrete instance of `TopicDefaultFormattingInput` via:
//
//	TopicDefaultFormattingArgs{...}
type TopicDefaultFormattingInput interface {
	pulumi.Input

	ToTopicDefaultFormattingOutput() TopicDefaultFormattingOutput
	ToTopicDefaultFormattingOutputWithContext(context.Context) TopicDefaultFormattingOutput
}

type TopicDefaultFormattingArgs struct {
	// The display format. Valid values for this structure are `AUTO` , `PERCENT` , `CURRENCY` , `NUMBER` , `DATE` , and `STRING` .
	DisplayFormat TopicDisplayFormatPtrInput `pulumi:"displayFormat"`
	// The additional options for display formatting.
	DisplayFormatOptions TopicDisplayFormatOptionsPtrInput `pulumi:"displayFormatOptions"`
}

func (TopicDefaultFormattingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicDefaultFormatting)(nil)).Elem()
}

func (i TopicDefaultFormattingArgs) ToTopicDefaultFormattingOutput() TopicDefaultFormattingOutput {
	return i.ToTopicDefaultFormattingOutputWithContext(context.Background())
}

func (i TopicDefaultFormattingArgs) ToTopicDefaultFormattingOutputWithContext(ctx context.Context) TopicDefaultFormattingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicDefaultFormattingOutput)
}

func (i TopicDefaultFormattingArgs) ToTopicDefaultFormattingPtrOutput() TopicDefaultFormattingPtrOutput {
	return i.ToTopicDefaultFormattingPtrOutputWithContext(context.Background())
}

func (i TopicDefaultFormattingArgs) ToTopicDefaultFormattingPtrOutputWithContext(ctx context.Context) TopicDefaultFormattingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicDefaultFormattingOutput).ToTopicDefaultFormattingPtrOutputWithContext(ctx)
}

// TopicDefaultFormattingPtrInput is an input type that accepts TopicDefaultFormattingArgs, TopicDefaultFormattingPtr and TopicDefaultFormattingPtrOutput values.
// You can construct a concrete instance of `TopicDefaultFormattingPtrInput` via:
//
//	        TopicDefaultFormattingArgs{...}
//
//	or:
//
//	        nil
type TopicDefaultFormattingPtrInput interface {
	pulumi.Input

	ToTopicDefaultFormattingPtrOutput() TopicDefaultFormattingPtrOutput
	ToTopicDefaultFormattingPtrOutputWithContext(context.Context) TopicDefaultFormattingPtrOutput
}

type topicDefaultFormattingPtrType TopicDefaultFormattingArgs

func TopicDefaultFormattingPtr(v *TopicDefaultFormattingArgs) TopicDefaultFormattingPtrInput {
	return (*topicDefaultFormattingPtrType)(v)
}

func (*topicDefaultFormattingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicDefaultFormatting)(nil)).Elem()
}

func (i *topicDefaultFormattingPtrType) ToTopicDefaultFormattingPtrOutput() TopicDefaultFormattingPtrOutput {
	return i.ToTopicDefaultFormattingPtrOutputWithContext(context.Background())
}

func (i *topicDefaultFormattingPtrType) ToTopicDefaultFormattingPtrOutputWithContext(ctx context.Context) TopicDefaultFormattingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicDefaultFormattingPtrOutput)
}

type TopicDefaultFormattingOutput struct{ *pulumi.OutputState }

func (TopicDefaultFormattingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicDefaultFormatting)(nil)).Elem()
}

func (o TopicDefaultFormattingOutput) ToTopicDefaultFormattingOutput() TopicDefaultFormattingOutput {
	return o
}

func (o TopicDefaultFormattingOutput) ToTopicDefaultFormattingOutputWithContext(ctx context.Context) TopicDefaultFormattingOutput {
	return o
}

func (o TopicDefaultFormattingOutput) ToTopicDefaultFormattingPtrOutput() TopicDefaultFormattingPtrOutput {
	return o.ToTopicDefaultFormattingPtrOutputWithContext(context.Background())
}

func (o TopicDefaultFormattingOutput) ToTopicDefaultFormattingPtrOutputWithContext(ctx context.Context) TopicDefaultFormattingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicDefaultFormatting) *TopicDefaultFormatting {
		return &v
	}).(TopicDefaultFormattingPtrOutput)
}

// The display format. Valid values for this structure are `AUTO` , `PERCENT` , `CURRENCY` , `NUMBER` , `DATE` , and `STRING` .
func (o TopicDefaultFormattingOutput) DisplayFormat() TopicDisplayFormatPtrOutput {
	return o.ApplyT(func(v TopicDefaultFormatting) *TopicDisplayFormat { return v.DisplayFormat }).(TopicDisplayFormatPtrOutput)
}

// The additional options for display formatting.
func (o TopicDefaultFormattingOutput) DisplayFormatOptions() TopicDisplayFormatOptionsPtrOutput {
	return o.ApplyT(func(v TopicDefaultFormatting) *TopicDisplayFormatOptions { return v.DisplayFormatOptions }).(TopicDisplayFormatOptionsPtrOutput)
}

type TopicDefaultFormattingPtrOutput struct{ *pulumi.OutputState }

func (TopicDefaultFormattingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicDefaultFormatting)(nil)).Elem()
}

func (o TopicDefaultFormattingPtrOutput) ToTopicDefaultFormattingPtrOutput() TopicDefaultFormattingPtrOutput {
	return o
}

func (o TopicDefaultFormattingPtrOutput) ToTopicDefaultFormattingPtrOutputWithContext(ctx context.Context) TopicDefaultFormattingPtrOutput {
	return o
}

func (o TopicDefaultFormattingPtrOutput) Elem() TopicDefaultFormattingOutput {
	return o.ApplyT(func(v *TopicDefaultFormatting) TopicDefaultFormatting {
		if v != nil {
			return *v
		}
		var ret TopicDefaultFormatting
		return ret
	}).(TopicDefaultFormattingOutput)
}

// The display format. Valid values for this structure are `AUTO` , `PERCENT` , `CURRENCY` , `NUMBER` , `DATE` , and `STRING` .
func (o TopicDefaultFormattingPtrOutput) DisplayFormat() TopicDisplayFormatPtrOutput {
	return o.ApplyT(func(v *TopicDefaultFormatting) *TopicDisplayFormat {
		if v == nil {
			return nil
		}
		return v.DisplayFormat
	}).(TopicDisplayFormatPtrOutput)
}

// The additional options for display formatting.
func (o TopicDefaultFormattingPtrOutput) DisplayFormatOptions() TopicDisplayFormatOptionsPtrOutput {
	return o.ApplyT(func(v *TopicDefaultFormatting) *TopicDisplayFormatOptions {
		if v == nil {
			return nil
		}
		return v.DisplayFormatOptions
	}).(TopicDisplayFormatOptionsPtrOutput)
}

type TopicDisplayFormatOptions struct {
	// Determines the blank cell format.
	BlankCellFormat *string `pulumi:"blankCellFormat"`
	// The currency symbol, such as `USD` .
	CurrencySymbol *string `pulumi:"currencySymbol"`
	// Determines the `DateTime` format.
	DateFormat *string `pulumi:"dateFormat"`
	// Determines the decimal separator.
	DecimalSeparator *TopicNumericSeparatorSymbol `pulumi:"decimalSeparator"`
	// Determines the number of fraction digits.
	FractionDigits *float64 `pulumi:"fractionDigits"`
	// Determines the grouping separator.
	GroupingSeparator *string `pulumi:"groupingSeparator"`
	// The negative format.
	NegativeFormat *TopicNegativeFormat `pulumi:"negativeFormat"`
	// The prefix value for a display format.
	Prefix *string `pulumi:"prefix"`
	// The suffix value for a display format.
	Suffix *string `pulumi:"suffix"`
	// The unit scaler. Valid values for this structure are: `NONE` , `AUTO` , `THOUSANDS` , `MILLIONS` , `BILLIONS` , and `TRILLIONS` .
	UnitScaler *TopicNumberScale `pulumi:"unitScaler"`
	// A Boolean value that indicates whether to use blank cell format.
	UseBlankCellFormat *bool `pulumi:"useBlankCellFormat"`
	// A Boolean value that indicates whether to use grouping.
	UseGrouping *bool `pulumi:"useGrouping"`
}

// TopicDisplayFormatOptionsInput is an input type that accepts TopicDisplayFormatOptionsArgs and TopicDisplayFormatOptionsOutput values.
// You can construct a concrete instance of `TopicDisplayFormatOptionsInput` via:
//
//	TopicDisplayFormatOptionsArgs{...}
type TopicDisplayFormatOptionsInput interface {
	pulumi.Input

	ToTopicDisplayFormatOptionsOutput() TopicDisplayFormatOptionsOutput
	ToTopicDisplayFormatOptionsOutputWithContext(context.Context) TopicDisplayFormatOptionsOutput
}

type TopicDisplayFormatOptionsArgs struct {
	// Determines the blank cell format.
	BlankCellFormat pulumi.StringPtrInput `pulumi:"blankCellFormat"`
	// The currency symbol, such as `USD` .
	CurrencySymbol pulumi.StringPtrInput `pulumi:"currencySymbol"`
	// Determines the `DateTime` format.
	DateFormat pulumi.StringPtrInput `pulumi:"dateFormat"`
	// Determines the decimal separator.
	DecimalSeparator TopicNumericSeparatorSymbolPtrInput `pulumi:"decimalSeparator"`
	// Determines the number of fraction digits.
	FractionDigits pulumi.Float64PtrInput `pulumi:"fractionDigits"`
	// Determines the grouping separator.
	GroupingSeparator pulumi.StringPtrInput `pulumi:"groupingSeparator"`
	// The negative format.
	NegativeFormat TopicNegativeFormatPtrInput `pulumi:"negativeFormat"`
	// The prefix value for a display format.
	Prefix pulumi.StringPtrInput `pulumi:"prefix"`
	// The suffix value for a display format.
	Suffix pulumi.StringPtrInput `pulumi:"suffix"`
	// The unit scaler. Valid values for this structure are: `NONE` , `AUTO` , `THOUSANDS` , `MILLIONS` , `BILLIONS` , and `TRILLIONS` .
	UnitScaler TopicNumberScalePtrInput `pulumi:"unitScaler"`
	// A Boolean value that indicates whether to use blank cell format.
	UseBlankCellFormat pulumi.BoolPtrInput `pulumi:"useBlankCellFormat"`
	// A Boolean value that indicates whether to use grouping.
	UseGrouping pulumi.BoolPtrInput `pulumi:"useGrouping"`
}

func (TopicDisplayFormatOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicDisplayFormatOptions)(nil)).Elem()
}

func (i TopicDisplayFormatOptionsArgs) ToTopicDisplayFormatOptionsOutput() TopicDisplayFormatOptionsOutput {
	return i.ToTopicDisplayFormatOptionsOutputWithContext(context.Background())
}

func (i TopicDisplayFormatOptionsArgs) ToTopicDisplayFormatOptionsOutputWithContext(ctx context.Context) TopicDisplayFormatOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicDisplayFormatOptionsOutput)
}

func (i TopicDisplayFormatOptionsArgs) ToTopicDisplayFormatOptionsPtrOutput() TopicDisplayFormatOptionsPtrOutput {
	return i.ToTopicDisplayFormatOptionsPtrOutputWithContext(context.Background())
}

func (i TopicDisplayFormatOptionsArgs) ToTopicDisplayFormatOptionsPtrOutputWithContext(ctx context.Context) TopicDisplayFormatOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicDisplayFormatOptionsOutput).ToTopicDisplayFormatOptionsPtrOutputWithContext(ctx)
}

// TopicDisplayFormatOptionsPtrInput is an input type that accepts TopicDisplayFormatOptionsArgs, TopicDisplayFormatOptionsPtr and TopicDisplayFormatOptionsPtrOutput values.
// You can construct a concrete instance of `TopicDisplayFormatOptionsPtrInput` via:
//
//	        TopicDisplayFormatOptionsArgs{...}
//
//	or:
//
//	        nil
type TopicDisplayFormatOptionsPtrInput interface {
	pulumi.Input

	ToTopicDisplayFormatOptionsPtrOutput() TopicDisplayFormatOptionsPtrOutput
	ToTopicDisplayFormatOptionsPtrOutputWithContext(context.Context) TopicDisplayFormatOptionsPtrOutput
}

type topicDisplayFormatOptionsPtrType TopicDisplayFormatOptionsArgs

func TopicDisplayFormatOptionsPtr(v *TopicDisplayFormatOptionsArgs) TopicDisplayFormatOptionsPtrInput {
	return (*topicDisplayFormatOptionsPtrType)(v)
}

func (*topicDisplayFormatOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicDisplayFormatOptions)(nil)).Elem()
}

func (i *topicDisplayFormatOptionsPtrType) ToTopicDisplayFormatOptionsPtrOutput() TopicDisplayFormatOptionsPtrOutput {
	return i.ToTopicDisplayFormatOptionsPtrOutputWithContext(context.Background())
}

func (i *topicDisplayFormatOptionsPtrType) ToTopicDisplayFormatOptionsPtrOutputWithContext(ctx context.Context) TopicDisplayFormatOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicDisplayFormatOptionsPtrOutput)
}

type TopicDisplayFormatOptionsOutput struct{ *pulumi.OutputState }

func (TopicDisplayFormatOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicDisplayFormatOptions)(nil)).Elem()
}

func (o TopicDisplayFormatOptionsOutput) ToTopicDisplayFormatOptionsOutput() TopicDisplayFormatOptionsOutput {
	return o
}

func (o TopicDisplayFormatOptionsOutput) ToTopicDisplayFormatOptionsOutputWithContext(ctx context.Context) TopicDisplayFormatOptionsOutput {
	return o
}

func (o TopicDisplayFormatOptionsOutput) ToTopicDisplayFormatOptionsPtrOutput() TopicDisplayFormatOptionsPtrOutput {
	return o.ToTopicDisplayFormatOptionsPtrOutputWithContext(context.Background())
}

func (o TopicDisplayFormatOptionsOutput) ToTopicDisplayFormatOptionsPtrOutputWithContext(ctx context.Context) TopicDisplayFormatOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicDisplayFormatOptions) *TopicDisplayFormatOptions {
		return &v
	}).(TopicDisplayFormatOptionsPtrOutput)
}

// Determines the blank cell format.
func (o TopicDisplayFormatOptionsOutput) BlankCellFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicDisplayFormatOptions) *string { return v.BlankCellFormat }).(pulumi.StringPtrOutput)
}

// The currency symbol, such as `USD` .
func (o TopicDisplayFormatOptionsOutput) CurrencySymbol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicDisplayFormatOptions) *string { return v.CurrencySymbol }).(pulumi.StringPtrOutput)
}

// Determines the `DateTime` format.
func (o TopicDisplayFormatOptionsOutput) DateFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicDisplayFormatOptions) *string { return v.DateFormat }).(pulumi.StringPtrOutput)
}

// Determines the decimal separator.
func (o TopicDisplayFormatOptionsOutput) DecimalSeparator() TopicNumericSeparatorSymbolPtrOutput {
	return o.ApplyT(func(v TopicDisplayFormatOptions) *TopicNumericSeparatorSymbol { return v.DecimalSeparator }).(TopicNumericSeparatorSymbolPtrOutput)
}

// Determines the number of fraction digits.
func (o TopicDisplayFormatOptionsOutput) FractionDigits() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TopicDisplayFormatOptions) *float64 { return v.FractionDigits }).(pulumi.Float64PtrOutput)
}

// Determines the grouping separator.
func (o TopicDisplayFormatOptionsOutput) GroupingSeparator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicDisplayFormatOptions) *string { return v.GroupingSeparator }).(pulumi.StringPtrOutput)
}

// The negative format.
func (o TopicDisplayFormatOptionsOutput) NegativeFormat() TopicNegativeFormatPtrOutput {
	return o.ApplyT(func(v TopicDisplayFormatOptions) *TopicNegativeFormat { return v.NegativeFormat }).(TopicNegativeFormatPtrOutput)
}

// The prefix value for a display format.
func (o TopicDisplayFormatOptionsOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicDisplayFormatOptions) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

// The suffix value for a display format.
func (o TopicDisplayFormatOptionsOutput) Suffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicDisplayFormatOptions) *string { return v.Suffix }).(pulumi.StringPtrOutput)
}

// The unit scaler. Valid values for this structure are: `NONE` , `AUTO` , `THOUSANDS` , `MILLIONS` , `BILLIONS` , and `TRILLIONS` .
func (o TopicDisplayFormatOptionsOutput) UnitScaler() TopicNumberScalePtrOutput {
	return o.ApplyT(func(v TopicDisplayFormatOptions) *TopicNumberScale { return v.UnitScaler }).(TopicNumberScalePtrOutput)
}

// A Boolean value that indicates whether to use blank cell format.
func (o TopicDisplayFormatOptionsOutput) UseBlankCellFormat() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TopicDisplayFormatOptions) *bool { return v.UseBlankCellFormat }).(pulumi.BoolPtrOutput)
}

// A Boolean value that indicates whether to use grouping.
func (o TopicDisplayFormatOptionsOutput) UseGrouping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TopicDisplayFormatOptions) *bool { return v.UseGrouping }).(pulumi.BoolPtrOutput)
}

type TopicDisplayFormatOptionsPtrOutput struct{ *pulumi.OutputState }

func (TopicDisplayFormatOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicDisplayFormatOptions)(nil)).Elem()
}

func (o TopicDisplayFormatOptionsPtrOutput) ToTopicDisplayFormatOptionsPtrOutput() TopicDisplayFormatOptionsPtrOutput {
	return o
}

func (o TopicDisplayFormatOptionsPtrOutput) ToTopicDisplayFormatOptionsPtrOutputWithContext(ctx context.Context) TopicDisplayFormatOptionsPtrOutput {
	return o
}

func (o TopicDisplayFormatOptionsPtrOutput) Elem() TopicDisplayFormatOptionsOutput {
	return o.ApplyT(func(v *TopicDisplayFormatOptions) TopicDisplayFormatOptions {
		if v != nil {
			return *v
		}
		var ret TopicDisplayFormatOptions
		return ret
	}).(TopicDisplayFormatOptionsOutput)
}

// Determines the blank cell format.
func (o TopicDisplayFormatOptionsPtrOutput) BlankCellFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicDisplayFormatOptions) *string {
		if v == nil {
			return nil
		}
		return v.BlankCellFormat
	}).(pulumi.StringPtrOutput)
}

// The currency symbol, such as `USD` .
func (o TopicDisplayFormatOptionsPtrOutput) CurrencySymbol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicDisplayFormatOptions) *string {
		if v == nil {
			return nil
		}
		return v.CurrencySymbol
	}).(pulumi.StringPtrOutput)
}

// Determines the `DateTime` format.
func (o TopicDisplayFormatOptionsPtrOutput) DateFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicDisplayFormatOptions) *string {
		if v == nil {
			return nil
		}
		return v.DateFormat
	}).(pulumi.StringPtrOutput)
}

// Determines the decimal separator.
func (o TopicDisplayFormatOptionsPtrOutput) DecimalSeparator() TopicNumericSeparatorSymbolPtrOutput {
	return o.ApplyT(func(v *TopicDisplayFormatOptions) *TopicNumericSeparatorSymbol {
		if v == nil {
			return nil
		}
		return v.DecimalSeparator
	}).(TopicNumericSeparatorSymbolPtrOutput)
}

// Determines the number of fraction digits.
func (o TopicDisplayFormatOptionsPtrOutput) FractionDigits() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TopicDisplayFormatOptions) *float64 {
		if v == nil {
			return nil
		}
		return v.FractionDigits
	}).(pulumi.Float64PtrOutput)
}

// Determines the grouping separator.
func (o TopicDisplayFormatOptionsPtrOutput) GroupingSeparator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicDisplayFormatOptions) *string {
		if v == nil {
			return nil
		}
		return v.GroupingSeparator
	}).(pulumi.StringPtrOutput)
}

// The negative format.
func (o TopicDisplayFormatOptionsPtrOutput) NegativeFormat() TopicNegativeFormatPtrOutput {
	return o.ApplyT(func(v *TopicDisplayFormatOptions) *TopicNegativeFormat {
		if v == nil {
			return nil
		}
		return v.NegativeFormat
	}).(TopicNegativeFormatPtrOutput)
}

// The prefix value for a display format.
func (o TopicDisplayFormatOptionsPtrOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicDisplayFormatOptions) *string {
		if v == nil {
			return nil
		}
		return v.Prefix
	}).(pulumi.StringPtrOutput)
}

// The suffix value for a display format.
func (o TopicDisplayFormatOptionsPtrOutput) Suffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicDisplayFormatOptions) *string {
		if v == nil {
			return nil
		}
		return v.Suffix
	}).(pulumi.StringPtrOutput)
}

// The unit scaler. Valid values for this structure are: `NONE` , `AUTO` , `THOUSANDS` , `MILLIONS` , `BILLIONS` , and `TRILLIONS` .
func (o TopicDisplayFormatOptionsPtrOutput) UnitScaler() TopicNumberScalePtrOutput {
	return o.ApplyT(func(v *TopicDisplayFormatOptions) *TopicNumberScale {
		if v == nil {
			return nil
		}
		return v.UnitScaler
	}).(TopicNumberScalePtrOutput)
}

// A Boolean value that indicates whether to use blank cell format.
func (o TopicDisplayFormatOptionsPtrOutput) UseBlankCellFormat() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TopicDisplayFormatOptions) *bool {
		if v == nil {
			return nil
		}
		return v.UseBlankCellFormat
	}).(pulumi.BoolPtrOutput)
}

// A Boolean value that indicates whether to use grouping.
func (o TopicDisplayFormatOptionsPtrOutput) UseGrouping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TopicDisplayFormatOptions) *bool {
		if v == nil {
			return nil
		}
		return v.UseGrouping
	}).(pulumi.BoolPtrOutput)
}

type TopicFilter struct {
	// The category filter that is associated with this filter.
	CategoryFilter *TopicCategoryFilter `pulumi:"categoryFilter"`
	// The date range filter.
	DateRangeFilter *TopicDateRangeFilter `pulumi:"dateRangeFilter"`
	// The class of the filter. Valid values for this structure are `ENFORCED_VALUE_FILTER` , `CONDITIONAL_VALUE_FILTER` , and `NAMED_VALUE_FILTER` .
	FilterClass *TopicFilterClass `pulumi:"filterClass"`
	// A description of the filter used to select items for a topic.
	FilterDescription *string `pulumi:"filterDescription"`
	// The name of the filter.
	FilterName string `pulumi:"filterName"`
	// The other names or aliases for the filter.
	FilterSynonyms []string `pulumi:"filterSynonyms"`
	// The type of the filter. Valid values for this structure are `CATEGORY_FILTER` , `NUMERIC_EQUALITY_FILTER` , `NUMERIC_RANGE_FILTER` , `DATE_RANGE_FILTER` , and `RELATIVE_DATE_FILTER` .
	FilterType *TopicNamedFilterType `pulumi:"filterType"`
	// The numeric equality filter.
	NumericEqualityFilter *TopicNumericEqualityFilter `pulumi:"numericEqualityFilter"`
	// The numeric range filter.
	NumericRangeFilter *TopicNumericRangeFilter `pulumi:"numericRangeFilter"`
	// The name of the field that the filter operates on.
	OperandFieldName string `pulumi:"operandFieldName"`
	// The relative date filter.
	RelativeDateFilter *TopicRelativeDateFilter `pulumi:"relativeDateFilter"`
}

// TopicFilterInput is an input type that accepts TopicFilterArgs and TopicFilterOutput values.
// You can construct a concrete instance of `TopicFilterInput` via:
//
//	TopicFilterArgs{...}
type TopicFilterInput interface {
	pulumi.Input

	ToTopicFilterOutput() TopicFilterOutput
	ToTopicFilterOutputWithContext(context.Context) TopicFilterOutput
}

type TopicFilterArgs struct {
	// The category filter that is associated with this filter.
	CategoryFilter TopicCategoryFilterPtrInput `pulumi:"categoryFilter"`
	// The date range filter.
	DateRangeFilter TopicDateRangeFilterPtrInput `pulumi:"dateRangeFilter"`
	// The class of the filter. Valid values for this structure are `ENFORCED_VALUE_FILTER` , `CONDITIONAL_VALUE_FILTER` , and `NAMED_VALUE_FILTER` .
	FilterClass TopicFilterClassPtrInput `pulumi:"filterClass"`
	// A description of the filter used to select items for a topic.
	FilterDescription pulumi.StringPtrInput `pulumi:"filterDescription"`
	// The name of the filter.
	FilterName pulumi.StringInput `pulumi:"filterName"`
	// The other names or aliases for the filter.
	FilterSynonyms pulumi.StringArrayInput `pulumi:"filterSynonyms"`
	// The type of the filter. Valid values for this structure are `CATEGORY_FILTER` , `NUMERIC_EQUALITY_FILTER` , `NUMERIC_RANGE_FILTER` , `DATE_RANGE_FILTER` , and `RELATIVE_DATE_FILTER` .
	FilterType TopicNamedFilterTypePtrInput `pulumi:"filterType"`
	// The numeric equality filter.
	NumericEqualityFilter TopicNumericEqualityFilterPtrInput `pulumi:"numericEqualityFilter"`
	// The numeric range filter.
	NumericRangeFilter TopicNumericRangeFilterPtrInput `pulumi:"numericRangeFilter"`
	// The name of the field that the filter operates on.
	OperandFieldName pulumi.StringInput `pulumi:"operandFieldName"`
	// The relative date filter.
	RelativeDateFilter TopicRelativeDateFilterPtrInput `pulumi:"relativeDateFilter"`
}

func (TopicFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicFilter)(nil)).Elem()
}

func (i TopicFilterArgs) ToTopicFilterOutput() TopicFilterOutput {
	return i.ToTopicFilterOutputWithContext(context.Background())
}

func (i TopicFilterArgs) ToTopicFilterOutputWithContext(ctx context.Context) TopicFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicFilterOutput)
}

// TopicFilterArrayInput is an input type that accepts TopicFilterArray and TopicFilterArrayOutput values.
// You can construct a concrete instance of `TopicFilterArrayInput` via:
//
//	TopicFilterArray{ TopicFilterArgs{...} }
type TopicFilterArrayInput interface {
	pulumi.Input

	ToTopicFilterArrayOutput() TopicFilterArrayOutput
	ToTopicFilterArrayOutputWithContext(context.Context) TopicFilterArrayOutput
}

type TopicFilterArray []TopicFilterInput

func (TopicFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicFilter)(nil)).Elem()
}

func (i TopicFilterArray) ToTopicFilterArrayOutput() TopicFilterArrayOutput {
	return i.ToTopicFilterArrayOutputWithContext(context.Background())
}

func (i TopicFilterArray) ToTopicFilterArrayOutputWithContext(ctx context.Context) TopicFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicFilterArrayOutput)
}

type TopicFilterOutput struct{ *pulumi.OutputState }

func (TopicFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicFilter)(nil)).Elem()
}

func (o TopicFilterOutput) ToTopicFilterOutput() TopicFilterOutput {
	return o
}

func (o TopicFilterOutput) ToTopicFilterOutputWithContext(ctx context.Context) TopicFilterOutput {
	return o
}

// The category filter that is associated with this filter.
func (o TopicFilterOutput) CategoryFilter() TopicCategoryFilterPtrOutput {
	return o.ApplyT(func(v TopicFilter) *TopicCategoryFilter { return v.CategoryFilter }).(TopicCategoryFilterPtrOutput)
}

// The date range filter.
func (o TopicFilterOutput) DateRangeFilter() TopicDateRangeFilterPtrOutput {
	return o.ApplyT(func(v TopicFilter) *TopicDateRangeFilter { return v.DateRangeFilter }).(TopicDateRangeFilterPtrOutput)
}

// The class of the filter. Valid values for this structure are `ENFORCED_VALUE_FILTER` , `CONDITIONAL_VALUE_FILTER` , and `NAMED_VALUE_FILTER` .
func (o TopicFilterOutput) FilterClass() TopicFilterClassPtrOutput {
	return o.ApplyT(func(v TopicFilter) *TopicFilterClass { return v.FilterClass }).(TopicFilterClassPtrOutput)
}

// A description of the filter used to select items for a topic.
func (o TopicFilterOutput) FilterDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicFilter) *string { return v.FilterDescription }).(pulumi.StringPtrOutput)
}

// The name of the filter.
func (o TopicFilterOutput) FilterName() pulumi.StringOutput {
	return o.ApplyT(func(v TopicFilter) string { return v.FilterName }).(pulumi.StringOutput)
}

// The other names or aliases for the filter.
func (o TopicFilterOutput) FilterSynonyms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TopicFilter) []string { return v.FilterSynonyms }).(pulumi.StringArrayOutput)
}

// The type of the filter. Valid values for this structure are `CATEGORY_FILTER` , `NUMERIC_EQUALITY_FILTER` , `NUMERIC_RANGE_FILTER` , `DATE_RANGE_FILTER` , and `RELATIVE_DATE_FILTER` .
func (o TopicFilterOutput) FilterType() TopicNamedFilterTypePtrOutput {
	return o.ApplyT(func(v TopicFilter) *TopicNamedFilterType { return v.FilterType }).(TopicNamedFilterTypePtrOutput)
}

// The numeric equality filter.
func (o TopicFilterOutput) NumericEqualityFilter() TopicNumericEqualityFilterPtrOutput {
	return o.ApplyT(func(v TopicFilter) *TopicNumericEqualityFilter { return v.NumericEqualityFilter }).(TopicNumericEqualityFilterPtrOutput)
}

// The numeric range filter.
func (o TopicFilterOutput) NumericRangeFilter() TopicNumericRangeFilterPtrOutput {
	return o.ApplyT(func(v TopicFilter) *TopicNumericRangeFilter { return v.NumericRangeFilter }).(TopicNumericRangeFilterPtrOutput)
}

// The name of the field that the filter operates on.
func (o TopicFilterOutput) OperandFieldName() pulumi.StringOutput {
	return o.ApplyT(func(v TopicFilter) string { return v.OperandFieldName }).(pulumi.StringOutput)
}

// The relative date filter.
func (o TopicFilterOutput) RelativeDateFilter() TopicRelativeDateFilterPtrOutput {
	return o.ApplyT(func(v TopicFilter) *TopicRelativeDateFilter { return v.RelativeDateFilter }).(TopicRelativeDateFilterPtrOutput)
}

type TopicFilterArrayOutput struct{ *pulumi.OutputState }

func (TopicFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicFilter)(nil)).Elem()
}

func (o TopicFilterArrayOutput) ToTopicFilterArrayOutput() TopicFilterArrayOutput {
	return o
}

func (o TopicFilterArrayOutput) ToTopicFilterArrayOutputWithContext(ctx context.Context) TopicFilterArrayOutput {
	return o
}

func (o TopicFilterArrayOutput) Index(i pulumi.IntInput) TopicFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TopicFilter {
		return vs[0].([]TopicFilter)[vs[1].(int)]
	}).(TopicFilterOutput)
}

type TopicNamedEntity struct {
	// The definition of a named entity.
	Definition []TopicNamedEntityDefinition `pulumi:"definition"`
	// The description of the named entity.
	EntityDescription *string `pulumi:"entityDescription"`
	// The name of the named entity.
	EntityName string `pulumi:"entityName"`
	// The other names or aliases for the named entity.
	EntitySynonyms []string `pulumi:"entitySynonyms"`
	// The type of named entity that a topic represents.
	SemanticEntityType *TopicSemanticEntityType `pulumi:"semanticEntityType"`
}

// TopicNamedEntityInput is an input type that accepts TopicNamedEntityArgs and TopicNamedEntityOutput values.
// You can construct a concrete instance of `TopicNamedEntityInput` via:
//
//	TopicNamedEntityArgs{...}
type TopicNamedEntityInput interface {
	pulumi.Input

	ToTopicNamedEntityOutput() TopicNamedEntityOutput
	ToTopicNamedEntityOutputWithContext(context.Context) TopicNamedEntityOutput
}

type TopicNamedEntityArgs struct {
	// The definition of a named entity.
	Definition TopicNamedEntityDefinitionArrayInput `pulumi:"definition"`
	// The description of the named entity.
	EntityDescription pulumi.StringPtrInput `pulumi:"entityDescription"`
	// The name of the named entity.
	EntityName pulumi.StringInput `pulumi:"entityName"`
	// The other names or aliases for the named entity.
	EntitySynonyms pulumi.StringArrayInput `pulumi:"entitySynonyms"`
	// The type of named entity that a topic represents.
	SemanticEntityType TopicSemanticEntityTypePtrInput `pulumi:"semanticEntityType"`
}

func (TopicNamedEntityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicNamedEntity)(nil)).Elem()
}

func (i TopicNamedEntityArgs) ToTopicNamedEntityOutput() TopicNamedEntityOutput {
	return i.ToTopicNamedEntityOutputWithContext(context.Background())
}

func (i TopicNamedEntityArgs) ToTopicNamedEntityOutputWithContext(ctx context.Context) TopicNamedEntityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicNamedEntityOutput)
}

// TopicNamedEntityArrayInput is an input type that accepts TopicNamedEntityArray and TopicNamedEntityArrayOutput values.
// You can construct a concrete instance of `TopicNamedEntityArrayInput` via:
//
//	TopicNamedEntityArray{ TopicNamedEntityArgs{...} }
type TopicNamedEntityArrayInput interface {
	pulumi.Input

	ToTopicNamedEntityArrayOutput() TopicNamedEntityArrayOutput
	ToTopicNamedEntityArrayOutputWithContext(context.Context) TopicNamedEntityArrayOutput
}

type TopicNamedEntityArray []TopicNamedEntityInput

func (TopicNamedEntityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicNamedEntity)(nil)).Elem()
}

func (i TopicNamedEntityArray) ToTopicNamedEntityArrayOutput() TopicNamedEntityArrayOutput {
	return i.ToTopicNamedEntityArrayOutputWithContext(context.Background())
}

func (i TopicNamedEntityArray) ToTopicNamedEntityArrayOutputWithContext(ctx context.Context) TopicNamedEntityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicNamedEntityArrayOutput)
}

type TopicNamedEntityOutput struct{ *pulumi.OutputState }

func (TopicNamedEntityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicNamedEntity)(nil)).Elem()
}

func (o TopicNamedEntityOutput) ToTopicNamedEntityOutput() TopicNamedEntityOutput {
	return o
}

func (o TopicNamedEntityOutput) ToTopicNamedEntityOutputWithContext(ctx context.Context) TopicNamedEntityOutput {
	return o
}

// The definition of a named entity.
func (o TopicNamedEntityOutput) Definition() TopicNamedEntityDefinitionArrayOutput {
	return o.ApplyT(func(v TopicNamedEntity) []TopicNamedEntityDefinition { return v.Definition }).(TopicNamedEntityDefinitionArrayOutput)
}

// The description of the named entity.
func (o TopicNamedEntityOutput) EntityDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicNamedEntity) *string { return v.EntityDescription }).(pulumi.StringPtrOutput)
}

// The name of the named entity.
func (o TopicNamedEntityOutput) EntityName() pulumi.StringOutput {
	return o.ApplyT(func(v TopicNamedEntity) string { return v.EntityName }).(pulumi.StringOutput)
}

// The other names or aliases for the named entity.
func (o TopicNamedEntityOutput) EntitySynonyms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TopicNamedEntity) []string { return v.EntitySynonyms }).(pulumi.StringArrayOutput)
}

// The type of named entity that a topic represents.
func (o TopicNamedEntityOutput) SemanticEntityType() TopicSemanticEntityTypePtrOutput {
	return o.ApplyT(func(v TopicNamedEntity) *TopicSemanticEntityType { return v.SemanticEntityType }).(TopicSemanticEntityTypePtrOutput)
}

type TopicNamedEntityArrayOutput struct{ *pulumi.OutputState }

func (TopicNamedEntityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicNamedEntity)(nil)).Elem()
}

func (o TopicNamedEntityArrayOutput) ToTopicNamedEntityArrayOutput() TopicNamedEntityArrayOutput {
	return o
}

func (o TopicNamedEntityArrayOutput) ToTopicNamedEntityArrayOutputWithContext(ctx context.Context) TopicNamedEntityArrayOutput {
	return o
}

func (o TopicNamedEntityArrayOutput) Index(i pulumi.IntInput) TopicNamedEntityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TopicNamedEntity {
		return vs[0].([]TopicNamedEntity)[vs[1].(int)]
	}).(TopicNamedEntityOutput)
}

type TopicNamedEntityDefinition struct {
	// The name of the entity.
	FieldName *string `pulumi:"fieldName"`
	// The definition of a metric.
	Metric *TopicNamedEntityDefinitionMetric `pulumi:"metric"`
	// The property name to be used for the named entity.
	PropertyName *string `pulumi:"propertyName"`
	// The property role. Valid values for this structure are `PRIMARY` and `ID` .
	PropertyRole *TopicPropertyRole `pulumi:"propertyRole"`
	// The property usage. Valid values for this structure are `INHERIT` , `DIMENSION` , and `MEASURE` .
	PropertyUsage *TopicPropertyUsage `pulumi:"propertyUsage"`
}

// TopicNamedEntityDefinitionInput is an input type that accepts TopicNamedEntityDefinitionArgs and TopicNamedEntityDefinitionOutput values.
// You can construct a concrete instance of `TopicNamedEntityDefinitionInput` via:
//
//	TopicNamedEntityDefinitionArgs{...}
type TopicNamedEntityDefinitionInput interface {
	pulumi.Input

	ToTopicNamedEntityDefinitionOutput() TopicNamedEntityDefinitionOutput
	ToTopicNamedEntityDefinitionOutputWithContext(context.Context) TopicNamedEntityDefinitionOutput
}

type TopicNamedEntityDefinitionArgs struct {
	// The name of the entity.
	FieldName pulumi.StringPtrInput `pulumi:"fieldName"`
	// The definition of a metric.
	Metric TopicNamedEntityDefinitionMetricPtrInput `pulumi:"metric"`
	// The property name to be used for the named entity.
	PropertyName pulumi.StringPtrInput `pulumi:"propertyName"`
	// The property role. Valid values for this structure are `PRIMARY` and `ID` .
	PropertyRole TopicPropertyRolePtrInput `pulumi:"propertyRole"`
	// The property usage. Valid values for this structure are `INHERIT` , `DIMENSION` , and `MEASURE` .
	PropertyUsage TopicPropertyUsagePtrInput `pulumi:"propertyUsage"`
}

func (TopicNamedEntityDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicNamedEntityDefinition)(nil)).Elem()
}

func (i TopicNamedEntityDefinitionArgs) ToTopicNamedEntityDefinitionOutput() TopicNamedEntityDefinitionOutput {
	return i.ToTopicNamedEntityDefinitionOutputWithContext(context.Background())
}

func (i TopicNamedEntityDefinitionArgs) ToTopicNamedEntityDefinitionOutputWithContext(ctx context.Context) TopicNamedEntityDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicNamedEntityDefinitionOutput)
}

// TopicNamedEntityDefinitionArrayInput is an input type that accepts TopicNamedEntityDefinitionArray and TopicNamedEntityDefinitionArrayOutput values.
// You can construct a concrete instance of `TopicNamedEntityDefinitionArrayInput` via:
//
//	TopicNamedEntityDefinitionArray{ TopicNamedEntityDefinitionArgs{...} }
type TopicNamedEntityDefinitionArrayInput interface {
	pulumi.Input

	ToTopicNamedEntityDefinitionArrayOutput() TopicNamedEntityDefinitionArrayOutput
	ToTopicNamedEntityDefinitionArrayOutputWithContext(context.Context) TopicNamedEntityDefinitionArrayOutput
}

type TopicNamedEntityDefinitionArray []TopicNamedEntityDefinitionInput

func (TopicNamedEntityDefinitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicNamedEntityDefinition)(nil)).Elem()
}

func (i TopicNamedEntityDefinitionArray) ToTopicNamedEntityDefinitionArrayOutput() TopicNamedEntityDefinitionArrayOutput {
	return i.ToTopicNamedEntityDefinitionArrayOutputWithContext(context.Background())
}

func (i TopicNamedEntityDefinitionArray) ToTopicNamedEntityDefinitionArrayOutputWithContext(ctx context.Context) TopicNamedEntityDefinitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicNamedEntityDefinitionArrayOutput)
}

type TopicNamedEntityDefinitionOutput struct{ *pulumi.OutputState }

func (TopicNamedEntityDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicNamedEntityDefinition)(nil)).Elem()
}

func (o TopicNamedEntityDefinitionOutput) ToTopicNamedEntityDefinitionOutput() TopicNamedEntityDefinitionOutput {
	return o
}

func (o TopicNamedEntityDefinitionOutput) ToTopicNamedEntityDefinitionOutputWithContext(ctx context.Context) TopicNamedEntityDefinitionOutput {
	return o
}

// The name of the entity.
func (o TopicNamedEntityDefinitionOutput) FieldName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicNamedEntityDefinition) *string { return v.FieldName }).(pulumi.StringPtrOutput)
}

// The definition of a metric.
func (o TopicNamedEntityDefinitionOutput) Metric() TopicNamedEntityDefinitionMetricPtrOutput {
	return o.ApplyT(func(v TopicNamedEntityDefinition) *TopicNamedEntityDefinitionMetric { return v.Metric }).(TopicNamedEntityDefinitionMetricPtrOutput)
}

// The property name to be used for the named entity.
func (o TopicNamedEntityDefinitionOutput) PropertyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicNamedEntityDefinition) *string { return v.PropertyName }).(pulumi.StringPtrOutput)
}

// The property role. Valid values for this structure are `PRIMARY` and `ID` .
func (o TopicNamedEntityDefinitionOutput) PropertyRole() TopicPropertyRolePtrOutput {
	return o.ApplyT(func(v TopicNamedEntityDefinition) *TopicPropertyRole { return v.PropertyRole }).(TopicPropertyRolePtrOutput)
}

// The property usage. Valid values for this structure are `INHERIT` , `DIMENSION` , and `MEASURE` .
func (o TopicNamedEntityDefinitionOutput) PropertyUsage() TopicPropertyUsagePtrOutput {
	return o.ApplyT(func(v TopicNamedEntityDefinition) *TopicPropertyUsage { return v.PropertyUsage }).(TopicPropertyUsagePtrOutput)
}

type TopicNamedEntityDefinitionArrayOutput struct{ *pulumi.OutputState }

func (TopicNamedEntityDefinitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicNamedEntityDefinition)(nil)).Elem()
}

func (o TopicNamedEntityDefinitionArrayOutput) ToTopicNamedEntityDefinitionArrayOutput() TopicNamedEntityDefinitionArrayOutput {
	return o
}

func (o TopicNamedEntityDefinitionArrayOutput) ToTopicNamedEntityDefinitionArrayOutputWithContext(ctx context.Context) TopicNamedEntityDefinitionArrayOutput {
	return o
}

func (o TopicNamedEntityDefinitionArrayOutput) Index(i pulumi.IntInput) TopicNamedEntityDefinitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TopicNamedEntityDefinition {
		return vs[0].([]TopicNamedEntityDefinition)[vs[1].(int)]
	}).(TopicNamedEntityDefinitionOutput)
}

type TopicNamedEntityDefinitionMetric struct {
	// The aggregation of a named entity. Valid values for this structure are `SUM` , `MIN` , `MAX` , `COUNT` , `AVERAGE` , `DISTINCT_COUNT` , `STDEV` , `STDEVP` , `VAR` , `VARP` , `PERCENTILE` , `MEDIAN` , and `CUSTOM` .
	Aggregation *TopicNamedEntityAggType `pulumi:"aggregation"`
	// The additional parameters for an aggregation function.
	AggregationFunctionParameters map[string]string `pulumi:"aggregationFunctionParameters"`
}

// TopicNamedEntityDefinitionMetricInput is an input type that accepts TopicNamedEntityDefinitionMetricArgs and TopicNamedEntityDefinitionMetricOutput values.
// You can construct a concrete instance of `TopicNamedEntityDefinitionMetricInput` via:
//
//	TopicNamedEntityDefinitionMetricArgs{...}
type TopicNamedEntityDefinitionMetricInput interface {
	pulumi.Input

	ToTopicNamedEntityDefinitionMetricOutput() TopicNamedEntityDefinitionMetricOutput
	ToTopicNamedEntityDefinitionMetricOutputWithContext(context.Context) TopicNamedEntityDefinitionMetricOutput
}

type TopicNamedEntityDefinitionMetricArgs struct {
	// The aggregation of a named entity. Valid values for this structure are `SUM` , `MIN` , `MAX` , `COUNT` , `AVERAGE` , `DISTINCT_COUNT` , `STDEV` , `STDEVP` , `VAR` , `VARP` , `PERCENTILE` , `MEDIAN` , and `CUSTOM` .
	Aggregation TopicNamedEntityAggTypePtrInput `pulumi:"aggregation"`
	// The additional parameters for an aggregation function.
	AggregationFunctionParameters pulumi.StringMapInput `pulumi:"aggregationFunctionParameters"`
}

func (TopicNamedEntityDefinitionMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicNamedEntityDefinitionMetric)(nil)).Elem()
}

func (i TopicNamedEntityDefinitionMetricArgs) ToTopicNamedEntityDefinitionMetricOutput() TopicNamedEntityDefinitionMetricOutput {
	return i.ToTopicNamedEntityDefinitionMetricOutputWithContext(context.Background())
}

func (i TopicNamedEntityDefinitionMetricArgs) ToTopicNamedEntityDefinitionMetricOutputWithContext(ctx context.Context) TopicNamedEntityDefinitionMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicNamedEntityDefinitionMetricOutput)
}

func (i TopicNamedEntityDefinitionMetricArgs) ToTopicNamedEntityDefinitionMetricPtrOutput() TopicNamedEntityDefinitionMetricPtrOutput {
	return i.ToTopicNamedEntityDefinitionMetricPtrOutputWithContext(context.Background())
}

func (i TopicNamedEntityDefinitionMetricArgs) ToTopicNamedEntityDefinitionMetricPtrOutputWithContext(ctx context.Context) TopicNamedEntityDefinitionMetricPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicNamedEntityDefinitionMetricOutput).ToTopicNamedEntityDefinitionMetricPtrOutputWithContext(ctx)
}

// TopicNamedEntityDefinitionMetricPtrInput is an input type that accepts TopicNamedEntityDefinitionMetricArgs, TopicNamedEntityDefinitionMetricPtr and TopicNamedEntityDefinitionMetricPtrOutput values.
// You can construct a concrete instance of `TopicNamedEntityDefinitionMetricPtrInput` via:
//
//	        TopicNamedEntityDefinitionMetricArgs{...}
//
//	or:
//
//	        nil
type TopicNamedEntityDefinitionMetricPtrInput interface {
	pulumi.Input

	ToTopicNamedEntityDefinitionMetricPtrOutput() TopicNamedEntityDefinitionMetricPtrOutput
	ToTopicNamedEntityDefinitionMetricPtrOutputWithContext(context.Context) TopicNamedEntityDefinitionMetricPtrOutput
}

type topicNamedEntityDefinitionMetricPtrType TopicNamedEntityDefinitionMetricArgs

func TopicNamedEntityDefinitionMetricPtr(v *TopicNamedEntityDefinitionMetricArgs) TopicNamedEntityDefinitionMetricPtrInput {
	return (*topicNamedEntityDefinitionMetricPtrType)(v)
}

func (*topicNamedEntityDefinitionMetricPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicNamedEntityDefinitionMetric)(nil)).Elem()
}

func (i *topicNamedEntityDefinitionMetricPtrType) ToTopicNamedEntityDefinitionMetricPtrOutput() TopicNamedEntityDefinitionMetricPtrOutput {
	return i.ToTopicNamedEntityDefinitionMetricPtrOutputWithContext(context.Background())
}

func (i *topicNamedEntityDefinitionMetricPtrType) ToTopicNamedEntityDefinitionMetricPtrOutputWithContext(ctx context.Context) TopicNamedEntityDefinitionMetricPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicNamedEntityDefinitionMetricPtrOutput)
}

type TopicNamedEntityDefinitionMetricOutput struct{ *pulumi.OutputState }

func (TopicNamedEntityDefinitionMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicNamedEntityDefinitionMetric)(nil)).Elem()
}

func (o TopicNamedEntityDefinitionMetricOutput) ToTopicNamedEntityDefinitionMetricOutput() TopicNamedEntityDefinitionMetricOutput {
	return o
}

func (o TopicNamedEntityDefinitionMetricOutput) ToTopicNamedEntityDefinitionMetricOutputWithContext(ctx context.Context) TopicNamedEntityDefinitionMetricOutput {
	return o
}

func (o TopicNamedEntityDefinitionMetricOutput) ToTopicNamedEntityDefinitionMetricPtrOutput() TopicNamedEntityDefinitionMetricPtrOutput {
	return o.ToTopicNamedEntityDefinitionMetricPtrOutputWithContext(context.Background())
}

func (o TopicNamedEntityDefinitionMetricOutput) ToTopicNamedEntityDefinitionMetricPtrOutputWithContext(ctx context.Context) TopicNamedEntityDefinitionMetricPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicNamedEntityDefinitionMetric) *TopicNamedEntityDefinitionMetric {
		return &v
	}).(TopicNamedEntityDefinitionMetricPtrOutput)
}

// The aggregation of a named entity. Valid values for this structure are `SUM` , `MIN` , `MAX` , `COUNT` , `AVERAGE` , `DISTINCT_COUNT` , `STDEV` , `STDEVP` , `VAR` , `VARP` , `PERCENTILE` , `MEDIAN` , and `CUSTOM` .
func (o TopicNamedEntityDefinitionMetricOutput) Aggregation() TopicNamedEntityAggTypePtrOutput {
	return o.ApplyT(func(v TopicNamedEntityDefinitionMetric) *TopicNamedEntityAggType { return v.Aggregation }).(TopicNamedEntityAggTypePtrOutput)
}

// The additional parameters for an aggregation function.
func (o TopicNamedEntityDefinitionMetricOutput) AggregationFunctionParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v TopicNamedEntityDefinitionMetric) map[string]string { return v.AggregationFunctionParameters }).(pulumi.StringMapOutput)
}

type TopicNamedEntityDefinitionMetricPtrOutput struct{ *pulumi.OutputState }

func (TopicNamedEntityDefinitionMetricPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicNamedEntityDefinitionMetric)(nil)).Elem()
}

func (o TopicNamedEntityDefinitionMetricPtrOutput) ToTopicNamedEntityDefinitionMetricPtrOutput() TopicNamedEntityDefinitionMetricPtrOutput {
	return o
}

func (o TopicNamedEntityDefinitionMetricPtrOutput) ToTopicNamedEntityDefinitionMetricPtrOutputWithContext(ctx context.Context) TopicNamedEntityDefinitionMetricPtrOutput {
	return o
}

func (o TopicNamedEntityDefinitionMetricPtrOutput) Elem() TopicNamedEntityDefinitionMetricOutput {
	return o.ApplyT(func(v *TopicNamedEntityDefinitionMetric) TopicNamedEntityDefinitionMetric {
		if v != nil {
			return *v
		}
		var ret TopicNamedEntityDefinitionMetric
		return ret
	}).(TopicNamedEntityDefinitionMetricOutput)
}

// The aggregation of a named entity. Valid values for this structure are `SUM` , `MIN` , `MAX` , `COUNT` , `AVERAGE` , `DISTINCT_COUNT` , `STDEV` , `STDEVP` , `VAR` , `VARP` , `PERCENTILE` , `MEDIAN` , and `CUSTOM` .
func (o TopicNamedEntityDefinitionMetricPtrOutput) Aggregation() TopicNamedEntityAggTypePtrOutput {
	return o.ApplyT(func(v *TopicNamedEntityDefinitionMetric) *TopicNamedEntityAggType {
		if v == nil {
			return nil
		}
		return v.Aggregation
	}).(TopicNamedEntityAggTypePtrOutput)
}

// The additional parameters for an aggregation function.
func (o TopicNamedEntityDefinitionMetricPtrOutput) AggregationFunctionParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TopicNamedEntityDefinitionMetric) map[string]string {
		if v == nil {
			return nil
		}
		return v.AggregationFunctionParameters
	}).(pulumi.StringMapOutput)
}

type TopicNegativeFormat struct {
	// The prefix for a negative format.
	Prefix *string `pulumi:"prefix"`
	// The suffix for a negative format.
	Suffix *string `pulumi:"suffix"`
}

// TopicNegativeFormatInput is an input type that accepts TopicNegativeFormatArgs and TopicNegativeFormatOutput values.
// You can construct a concrete instance of `TopicNegativeFormatInput` via:
//
//	TopicNegativeFormatArgs{...}
type TopicNegativeFormatInput interface {
	pulumi.Input

	ToTopicNegativeFormatOutput() TopicNegativeFormatOutput
	ToTopicNegativeFormatOutputWithContext(context.Context) TopicNegativeFormatOutput
}

type TopicNegativeFormatArgs struct {
	// The prefix for a negative format.
	Prefix pulumi.StringPtrInput `pulumi:"prefix"`
	// The suffix for a negative format.
	Suffix pulumi.StringPtrInput `pulumi:"suffix"`
}

func (TopicNegativeFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicNegativeFormat)(nil)).Elem()
}

func (i TopicNegativeFormatArgs) ToTopicNegativeFormatOutput() TopicNegativeFormatOutput {
	return i.ToTopicNegativeFormatOutputWithContext(context.Background())
}

func (i TopicNegativeFormatArgs) ToTopicNegativeFormatOutputWithContext(ctx context.Context) TopicNegativeFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicNegativeFormatOutput)
}

func (i TopicNegativeFormatArgs) ToTopicNegativeFormatPtrOutput() TopicNegativeFormatPtrOutput {
	return i.ToTopicNegativeFormatPtrOutputWithContext(context.Background())
}

func (i TopicNegativeFormatArgs) ToTopicNegativeFormatPtrOutputWithContext(ctx context.Context) TopicNegativeFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicNegativeFormatOutput).ToTopicNegativeFormatPtrOutputWithContext(ctx)
}

// TopicNegativeFormatPtrInput is an input type that accepts TopicNegativeFormatArgs, TopicNegativeFormatPtr and TopicNegativeFormatPtrOutput values.
// You can construct a concrete instance of `TopicNegativeFormatPtrInput` via:
//
//	        TopicNegativeFormatArgs{...}
//
//	or:
//
//	        nil
type TopicNegativeFormatPtrInput interface {
	pulumi.Input

	ToTopicNegativeFormatPtrOutput() TopicNegativeFormatPtrOutput
	ToTopicNegativeFormatPtrOutputWithContext(context.Context) TopicNegativeFormatPtrOutput
}

type topicNegativeFormatPtrType TopicNegativeFormatArgs

func TopicNegativeFormatPtr(v *TopicNegativeFormatArgs) TopicNegativeFormatPtrInput {
	return (*topicNegativeFormatPtrType)(v)
}

func (*topicNegativeFormatPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicNegativeFormat)(nil)).Elem()
}

func (i *topicNegativeFormatPtrType) ToTopicNegativeFormatPtrOutput() TopicNegativeFormatPtrOutput {
	return i.ToTopicNegativeFormatPtrOutputWithContext(context.Background())
}

func (i *topicNegativeFormatPtrType) ToTopicNegativeFormatPtrOutputWithContext(ctx context.Context) TopicNegativeFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicNegativeFormatPtrOutput)
}

type TopicNegativeFormatOutput struct{ *pulumi.OutputState }

func (TopicNegativeFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicNegativeFormat)(nil)).Elem()
}

func (o TopicNegativeFormatOutput) ToTopicNegativeFormatOutput() TopicNegativeFormatOutput {
	return o
}

func (o TopicNegativeFormatOutput) ToTopicNegativeFormatOutputWithContext(ctx context.Context) TopicNegativeFormatOutput {
	return o
}

func (o TopicNegativeFormatOutput) ToTopicNegativeFormatPtrOutput() TopicNegativeFormatPtrOutput {
	return o.ToTopicNegativeFormatPtrOutputWithContext(context.Background())
}

func (o TopicNegativeFormatOutput) ToTopicNegativeFormatPtrOutputWithContext(ctx context.Context) TopicNegativeFormatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicNegativeFormat) *TopicNegativeFormat {
		return &v
	}).(TopicNegativeFormatPtrOutput)
}

// The prefix for a negative format.
func (o TopicNegativeFormatOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicNegativeFormat) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

// The suffix for a negative format.
func (o TopicNegativeFormatOutput) Suffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicNegativeFormat) *string { return v.Suffix }).(pulumi.StringPtrOutput)
}

type TopicNegativeFormatPtrOutput struct{ *pulumi.OutputState }

func (TopicNegativeFormatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicNegativeFormat)(nil)).Elem()
}

func (o TopicNegativeFormatPtrOutput) ToTopicNegativeFormatPtrOutput() TopicNegativeFormatPtrOutput {
	return o
}

func (o TopicNegativeFormatPtrOutput) ToTopicNegativeFormatPtrOutputWithContext(ctx context.Context) TopicNegativeFormatPtrOutput {
	return o
}

func (o TopicNegativeFormatPtrOutput) Elem() TopicNegativeFormatOutput {
	return o.ApplyT(func(v *TopicNegativeFormat) TopicNegativeFormat {
		if v != nil {
			return *v
		}
		var ret TopicNegativeFormat
		return ret
	}).(TopicNegativeFormatOutput)
}

// The prefix for a negative format.
func (o TopicNegativeFormatPtrOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicNegativeFormat) *string {
		if v == nil {
			return nil
		}
		return v.Prefix
	}).(pulumi.StringPtrOutput)
}

// The suffix for a negative format.
func (o TopicNegativeFormatPtrOutput) Suffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicNegativeFormat) *string {
		if v == nil {
			return nil
		}
		return v.Suffix
	}).(pulumi.StringPtrOutput)
}

type TopicNumericEqualityFilter struct {
	// An aggregation function that specifies how to calculate the value of a numeric field for a topic. Valid values for this structure are `NO_AGGREGATION` , `SUM` , `AVERAGE` , `COUNT` , `DISTINCT_COUNT` , `MAX` , `MEDIAN` , `MIN` , `STDEV` , `STDEVP` , `VAR` , and `VARP` .
	Aggregation *TopicNamedFilterAggType `pulumi:"aggregation"`
	// The constant used in a numeric equality filter.
	Constant *TopicSingularFilterConstant `pulumi:"constant"`
}

// TopicNumericEqualityFilterInput is an input type that accepts TopicNumericEqualityFilterArgs and TopicNumericEqualityFilterOutput values.
// You can construct a concrete instance of `TopicNumericEqualityFilterInput` via:
//
//	TopicNumericEqualityFilterArgs{...}
type TopicNumericEqualityFilterInput interface {
	pulumi.Input

	ToTopicNumericEqualityFilterOutput() TopicNumericEqualityFilterOutput
	ToTopicNumericEqualityFilterOutputWithContext(context.Context) TopicNumericEqualityFilterOutput
}

type TopicNumericEqualityFilterArgs struct {
	// An aggregation function that specifies how to calculate the value of a numeric field for a topic. Valid values for this structure are `NO_AGGREGATION` , `SUM` , `AVERAGE` , `COUNT` , `DISTINCT_COUNT` , `MAX` , `MEDIAN` , `MIN` , `STDEV` , `STDEVP` , `VAR` , and `VARP` .
	Aggregation TopicNamedFilterAggTypePtrInput `pulumi:"aggregation"`
	// The constant used in a numeric equality filter.
	Constant TopicSingularFilterConstantPtrInput `pulumi:"constant"`
}

func (TopicNumericEqualityFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicNumericEqualityFilter)(nil)).Elem()
}

func (i TopicNumericEqualityFilterArgs) ToTopicNumericEqualityFilterOutput() TopicNumericEqualityFilterOutput {
	return i.ToTopicNumericEqualityFilterOutputWithContext(context.Background())
}

func (i TopicNumericEqualityFilterArgs) ToTopicNumericEqualityFilterOutputWithContext(ctx context.Context) TopicNumericEqualityFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicNumericEqualityFilterOutput)
}

func (i TopicNumericEqualityFilterArgs) ToTopicNumericEqualityFilterPtrOutput() TopicNumericEqualityFilterPtrOutput {
	return i.ToTopicNumericEqualityFilterPtrOutputWithContext(context.Background())
}

func (i TopicNumericEqualityFilterArgs) ToTopicNumericEqualityFilterPtrOutputWithContext(ctx context.Context) TopicNumericEqualityFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicNumericEqualityFilterOutput).ToTopicNumericEqualityFilterPtrOutputWithContext(ctx)
}

// TopicNumericEqualityFilterPtrInput is an input type that accepts TopicNumericEqualityFilterArgs, TopicNumericEqualityFilterPtr and TopicNumericEqualityFilterPtrOutput values.
// You can construct a concrete instance of `TopicNumericEqualityFilterPtrInput` via:
//
//	        TopicNumericEqualityFilterArgs{...}
//
//	or:
//
//	        nil
type TopicNumericEqualityFilterPtrInput interface {
	pulumi.Input

	ToTopicNumericEqualityFilterPtrOutput() TopicNumericEqualityFilterPtrOutput
	ToTopicNumericEqualityFilterPtrOutputWithContext(context.Context) TopicNumericEqualityFilterPtrOutput
}

type topicNumericEqualityFilterPtrType TopicNumericEqualityFilterArgs

func TopicNumericEqualityFilterPtr(v *TopicNumericEqualityFilterArgs) TopicNumericEqualityFilterPtrInput {
	return (*topicNumericEqualityFilterPtrType)(v)
}

func (*topicNumericEqualityFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicNumericEqualityFilter)(nil)).Elem()
}

func (i *topicNumericEqualityFilterPtrType) ToTopicNumericEqualityFilterPtrOutput() TopicNumericEqualityFilterPtrOutput {
	return i.ToTopicNumericEqualityFilterPtrOutputWithContext(context.Background())
}

func (i *topicNumericEqualityFilterPtrType) ToTopicNumericEqualityFilterPtrOutputWithContext(ctx context.Context) TopicNumericEqualityFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicNumericEqualityFilterPtrOutput)
}

type TopicNumericEqualityFilterOutput struct{ *pulumi.OutputState }

func (TopicNumericEqualityFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicNumericEqualityFilter)(nil)).Elem()
}

func (o TopicNumericEqualityFilterOutput) ToTopicNumericEqualityFilterOutput() TopicNumericEqualityFilterOutput {
	return o
}

func (o TopicNumericEqualityFilterOutput) ToTopicNumericEqualityFilterOutputWithContext(ctx context.Context) TopicNumericEqualityFilterOutput {
	return o
}

func (o TopicNumericEqualityFilterOutput) ToTopicNumericEqualityFilterPtrOutput() TopicNumericEqualityFilterPtrOutput {
	return o.ToTopicNumericEqualityFilterPtrOutputWithContext(context.Background())
}

func (o TopicNumericEqualityFilterOutput) ToTopicNumericEqualityFilterPtrOutputWithContext(ctx context.Context) TopicNumericEqualityFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicNumericEqualityFilter) *TopicNumericEqualityFilter {
		return &v
	}).(TopicNumericEqualityFilterPtrOutput)
}

// An aggregation function that specifies how to calculate the value of a numeric field for a topic. Valid values for this structure are `NO_AGGREGATION` , `SUM` , `AVERAGE` , `COUNT` , `DISTINCT_COUNT` , `MAX` , `MEDIAN` , `MIN` , `STDEV` , `STDEVP` , `VAR` , and `VARP` .
func (o TopicNumericEqualityFilterOutput) Aggregation() TopicNamedFilterAggTypePtrOutput {
	return o.ApplyT(func(v TopicNumericEqualityFilter) *TopicNamedFilterAggType { return v.Aggregation }).(TopicNamedFilterAggTypePtrOutput)
}

// The constant used in a numeric equality filter.
func (o TopicNumericEqualityFilterOutput) Constant() TopicSingularFilterConstantPtrOutput {
	return o.ApplyT(func(v TopicNumericEqualityFilter) *TopicSingularFilterConstant { return v.Constant }).(TopicSingularFilterConstantPtrOutput)
}

type TopicNumericEqualityFilterPtrOutput struct{ *pulumi.OutputState }

func (TopicNumericEqualityFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicNumericEqualityFilter)(nil)).Elem()
}

func (o TopicNumericEqualityFilterPtrOutput) ToTopicNumericEqualityFilterPtrOutput() TopicNumericEqualityFilterPtrOutput {
	return o
}

func (o TopicNumericEqualityFilterPtrOutput) ToTopicNumericEqualityFilterPtrOutputWithContext(ctx context.Context) TopicNumericEqualityFilterPtrOutput {
	return o
}

func (o TopicNumericEqualityFilterPtrOutput) Elem() TopicNumericEqualityFilterOutput {
	return o.ApplyT(func(v *TopicNumericEqualityFilter) TopicNumericEqualityFilter {
		if v != nil {
			return *v
		}
		var ret TopicNumericEqualityFilter
		return ret
	}).(TopicNumericEqualityFilterOutput)
}

// An aggregation function that specifies how to calculate the value of a numeric field for a topic. Valid values for this structure are `NO_AGGREGATION` , `SUM` , `AVERAGE` , `COUNT` , `DISTINCT_COUNT` , `MAX` , `MEDIAN` , `MIN` , `STDEV` , `STDEVP` , `VAR` , and `VARP` .
func (o TopicNumericEqualityFilterPtrOutput) Aggregation() TopicNamedFilterAggTypePtrOutput {
	return o.ApplyT(func(v *TopicNumericEqualityFilter) *TopicNamedFilterAggType {
		if v == nil {
			return nil
		}
		return v.Aggregation
	}).(TopicNamedFilterAggTypePtrOutput)
}

// The constant used in a numeric equality filter.
func (o TopicNumericEqualityFilterPtrOutput) Constant() TopicSingularFilterConstantPtrOutput {
	return o.ApplyT(func(v *TopicNumericEqualityFilter) *TopicSingularFilterConstant {
		if v == nil {
			return nil
		}
		return v.Constant
	}).(TopicSingularFilterConstantPtrOutput)
}

type TopicNumericRangeFilter struct {
	// An aggregation function that specifies how to calculate the value of a numeric field for a topic, Valid values for this structure are `NO_AGGREGATION` , `SUM` , `AVERAGE` , `COUNT` , `DISTINCT_COUNT` , `MAX` , `MEDIAN` , `MIN` , `STDEV` , `STDEVP` , `VAR` , and `VARP` .
	Aggregation *TopicNamedFilterAggType `pulumi:"aggregation"`
	// The constant used in a numeric range filter.
	Constant *TopicRangeFilterConstant `pulumi:"constant"`
	// A Boolean value that indicates whether the endpoints of the numeric range are included in the filter. If set to true, topics whose numeric field value is equal to the endpoint values will be included in the filter. If set to false, topics whose numeric field value is equal to the endpoint values will be excluded from the filter.
	Inclusive *bool `pulumi:"inclusive"`
}

// TopicNumericRangeFilterInput is an input type that accepts TopicNumericRangeFilterArgs and TopicNumericRangeFilterOutput values.
// You can construct a concrete instance of `TopicNumericRangeFilterInput` via:
//
//	TopicNumericRangeFilterArgs{...}
type TopicNumericRangeFilterInput interface {
	pulumi.Input

	ToTopicNumericRangeFilterOutput() TopicNumericRangeFilterOutput
	ToTopicNumericRangeFilterOutputWithContext(context.Context) TopicNumericRangeFilterOutput
}

type TopicNumericRangeFilterArgs struct {
	// An aggregation function that specifies how to calculate the value of a numeric field for a topic, Valid values for this structure are `NO_AGGREGATION` , `SUM` , `AVERAGE` , `COUNT` , `DISTINCT_COUNT` , `MAX` , `MEDIAN` , `MIN` , `STDEV` , `STDEVP` , `VAR` , and `VARP` .
	Aggregation TopicNamedFilterAggTypePtrInput `pulumi:"aggregation"`
	// The constant used in a numeric range filter.
	Constant TopicRangeFilterConstantPtrInput `pulumi:"constant"`
	// A Boolean value that indicates whether the endpoints of the numeric range are included in the filter. If set to true, topics whose numeric field value is equal to the endpoint values will be included in the filter. If set to false, topics whose numeric field value is equal to the endpoint values will be excluded from the filter.
	Inclusive pulumi.BoolPtrInput `pulumi:"inclusive"`
}

func (TopicNumericRangeFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicNumericRangeFilter)(nil)).Elem()
}

func (i TopicNumericRangeFilterArgs) ToTopicNumericRangeFilterOutput() TopicNumericRangeFilterOutput {
	return i.ToTopicNumericRangeFilterOutputWithContext(context.Background())
}

func (i TopicNumericRangeFilterArgs) ToTopicNumericRangeFilterOutputWithContext(ctx context.Context) TopicNumericRangeFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicNumericRangeFilterOutput)
}

func (i TopicNumericRangeFilterArgs) ToTopicNumericRangeFilterPtrOutput() TopicNumericRangeFilterPtrOutput {
	return i.ToTopicNumericRangeFilterPtrOutputWithContext(context.Background())
}

func (i TopicNumericRangeFilterArgs) ToTopicNumericRangeFilterPtrOutputWithContext(ctx context.Context) TopicNumericRangeFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicNumericRangeFilterOutput).ToTopicNumericRangeFilterPtrOutputWithContext(ctx)
}

// TopicNumericRangeFilterPtrInput is an input type that accepts TopicNumericRangeFilterArgs, TopicNumericRangeFilterPtr and TopicNumericRangeFilterPtrOutput values.
// You can construct a concrete instance of `TopicNumericRangeFilterPtrInput` via:
//
//	        TopicNumericRangeFilterArgs{...}
//
//	or:
//
//	        nil
type TopicNumericRangeFilterPtrInput interface {
	pulumi.Input

	ToTopicNumericRangeFilterPtrOutput() TopicNumericRangeFilterPtrOutput
	ToTopicNumericRangeFilterPtrOutputWithContext(context.Context) TopicNumericRangeFilterPtrOutput
}

type topicNumericRangeFilterPtrType TopicNumericRangeFilterArgs

func TopicNumericRangeFilterPtr(v *TopicNumericRangeFilterArgs) TopicNumericRangeFilterPtrInput {
	return (*topicNumericRangeFilterPtrType)(v)
}

func (*topicNumericRangeFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicNumericRangeFilter)(nil)).Elem()
}

func (i *topicNumericRangeFilterPtrType) ToTopicNumericRangeFilterPtrOutput() TopicNumericRangeFilterPtrOutput {
	return i.ToTopicNumericRangeFilterPtrOutputWithContext(context.Background())
}

func (i *topicNumericRangeFilterPtrType) ToTopicNumericRangeFilterPtrOutputWithContext(ctx context.Context) TopicNumericRangeFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicNumericRangeFilterPtrOutput)
}

type TopicNumericRangeFilterOutput struct{ *pulumi.OutputState }

func (TopicNumericRangeFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicNumericRangeFilter)(nil)).Elem()
}

func (o TopicNumericRangeFilterOutput) ToTopicNumericRangeFilterOutput() TopicNumericRangeFilterOutput {
	return o
}

func (o TopicNumericRangeFilterOutput) ToTopicNumericRangeFilterOutputWithContext(ctx context.Context) TopicNumericRangeFilterOutput {
	return o
}

func (o TopicNumericRangeFilterOutput) ToTopicNumericRangeFilterPtrOutput() TopicNumericRangeFilterPtrOutput {
	return o.ToTopicNumericRangeFilterPtrOutputWithContext(context.Background())
}

func (o TopicNumericRangeFilterOutput) ToTopicNumericRangeFilterPtrOutputWithContext(ctx context.Context) TopicNumericRangeFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicNumericRangeFilter) *TopicNumericRangeFilter {
		return &v
	}).(TopicNumericRangeFilterPtrOutput)
}

// An aggregation function that specifies how to calculate the value of a numeric field for a topic, Valid values for this structure are `NO_AGGREGATION` , `SUM` , `AVERAGE` , `COUNT` , `DISTINCT_COUNT` , `MAX` , `MEDIAN` , `MIN` , `STDEV` , `STDEVP` , `VAR` , and `VARP` .
func (o TopicNumericRangeFilterOutput) Aggregation() TopicNamedFilterAggTypePtrOutput {
	return o.ApplyT(func(v TopicNumericRangeFilter) *TopicNamedFilterAggType { return v.Aggregation }).(TopicNamedFilterAggTypePtrOutput)
}

// The constant used in a numeric range filter.
func (o TopicNumericRangeFilterOutput) Constant() TopicRangeFilterConstantPtrOutput {
	return o.ApplyT(func(v TopicNumericRangeFilter) *TopicRangeFilterConstant { return v.Constant }).(TopicRangeFilterConstantPtrOutput)
}

// A Boolean value that indicates whether the endpoints of the numeric range are included in the filter. If set to true, topics whose numeric field value is equal to the endpoint values will be included in the filter. If set to false, topics whose numeric field value is equal to the endpoint values will be excluded from the filter.
func (o TopicNumericRangeFilterOutput) Inclusive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TopicNumericRangeFilter) *bool { return v.Inclusive }).(pulumi.BoolPtrOutput)
}

type TopicNumericRangeFilterPtrOutput struct{ *pulumi.OutputState }

func (TopicNumericRangeFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicNumericRangeFilter)(nil)).Elem()
}

func (o TopicNumericRangeFilterPtrOutput) ToTopicNumericRangeFilterPtrOutput() TopicNumericRangeFilterPtrOutput {
	return o
}

func (o TopicNumericRangeFilterPtrOutput) ToTopicNumericRangeFilterPtrOutputWithContext(ctx context.Context) TopicNumericRangeFilterPtrOutput {
	return o
}

func (o TopicNumericRangeFilterPtrOutput) Elem() TopicNumericRangeFilterOutput {
	return o.ApplyT(func(v *TopicNumericRangeFilter) TopicNumericRangeFilter {
		if v != nil {
			return *v
		}
		var ret TopicNumericRangeFilter
		return ret
	}).(TopicNumericRangeFilterOutput)
}

// An aggregation function that specifies how to calculate the value of a numeric field for a topic, Valid values for this structure are `NO_AGGREGATION` , `SUM` , `AVERAGE` , `COUNT` , `DISTINCT_COUNT` , `MAX` , `MEDIAN` , `MIN` , `STDEV` , `STDEVP` , `VAR` , and `VARP` .
func (o TopicNumericRangeFilterPtrOutput) Aggregation() TopicNamedFilterAggTypePtrOutput {
	return o.ApplyT(func(v *TopicNumericRangeFilter) *TopicNamedFilterAggType {
		if v == nil {
			return nil
		}
		return v.Aggregation
	}).(TopicNamedFilterAggTypePtrOutput)
}

// The constant used in a numeric range filter.
func (o TopicNumericRangeFilterPtrOutput) Constant() TopicRangeFilterConstantPtrOutput {
	return o.ApplyT(func(v *TopicNumericRangeFilter) *TopicRangeFilterConstant {
		if v == nil {
			return nil
		}
		return v.Constant
	}).(TopicRangeFilterConstantPtrOutput)
}

// A Boolean value that indicates whether the endpoints of the numeric range are included in the filter. If set to true, topics whose numeric field value is equal to the endpoint values will be included in the filter. If set to false, topics whose numeric field value is equal to the endpoint values will be excluded from the filter.
func (o TopicNumericRangeFilterPtrOutput) Inclusive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TopicNumericRangeFilter) *bool {
		if v == nil {
			return nil
		}
		return v.Inclusive
	}).(pulumi.BoolPtrOutput)
}

type TopicRangeConstant struct {
	// The maximum value for a range constant.
	Maximum *string `pulumi:"maximum"`
	// The minimum value for a range constant.
	Minimum *string `pulumi:"minimum"`
}

// TopicRangeConstantInput is an input type that accepts TopicRangeConstantArgs and TopicRangeConstantOutput values.
// You can construct a concrete instance of `TopicRangeConstantInput` via:
//
//	TopicRangeConstantArgs{...}
type TopicRangeConstantInput interface {
	pulumi.Input

	ToTopicRangeConstantOutput() TopicRangeConstantOutput
	ToTopicRangeConstantOutputWithContext(context.Context) TopicRangeConstantOutput
}

type TopicRangeConstantArgs struct {
	// The maximum value for a range constant.
	Maximum pulumi.StringPtrInput `pulumi:"maximum"`
	// The minimum value for a range constant.
	Minimum pulumi.StringPtrInput `pulumi:"minimum"`
}

func (TopicRangeConstantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRangeConstant)(nil)).Elem()
}

func (i TopicRangeConstantArgs) ToTopicRangeConstantOutput() TopicRangeConstantOutput {
	return i.ToTopicRangeConstantOutputWithContext(context.Background())
}

func (i TopicRangeConstantArgs) ToTopicRangeConstantOutputWithContext(ctx context.Context) TopicRangeConstantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRangeConstantOutput)
}

func (i TopicRangeConstantArgs) ToTopicRangeConstantPtrOutput() TopicRangeConstantPtrOutput {
	return i.ToTopicRangeConstantPtrOutputWithContext(context.Background())
}

func (i TopicRangeConstantArgs) ToTopicRangeConstantPtrOutputWithContext(ctx context.Context) TopicRangeConstantPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRangeConstantOutput).ToTopicRangeConstantPtrOutputWithContext(ctx)
}

// TopicRangeConstantPtrInput is an input type that accepts TopicRangeConstantArgs, TopicRangeConstantPtr and TopicRangeConstantPtrOutput values.
// You can construct a concrete instance of `TopicRangeConstantPtrInput` via:
//
//	        TopicRangeConstantArgs{...}
//
//	or:
//
//	        nil
type TopicRangeConstantPtrInput interface {
	pulumi.Input

	ToTopicRangeConstantPtrOutput() TopicRangeConstantPtrOutput
	ToTopicRangeConstantPtrOutputWithContext(context.Context) TopicRangeConstantPtrOutput
}

type topicRangeConstantPtrType TopicRangeConstantArgs

func TopicRangeConstantPtr(v *TopicRangeConstantArgs) TopicRangeConstantPtrInput {
	return (*topicRangeConstantPtrType)(v)
}

func (*topicRangeConstantPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicRangeConstant)(nil)).Elem()
}

func (i *topicRangeConstantPtrType) ToTopicRangeConstantPtrOutput() TopicRangeConstantPtrOutput {
	return i.ToTopicRangeConstantPtrOutputWithContext(context.Background())
}

func (i *topicRangeConstantPtrType) ToTopicRangeConstantPtrOutputWithContext(ctx context.Context) TopicRangeConstantPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRangeConstantPtrOutput)
}

type TopicRangeConstantOutput struct{ *pulumi.OutputState }

func (TopicRangeConstantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRangeConstant)(nil)).Elem()
}

func (o TopicRangeConstantOutput) ToTopicRangeConstantOutput() TopicRangeConstantOutput {
	return o
}

func (o TopicRangeConstantOutput) ToTopicRangeConstantOutputWithContext(ctx context.Context) TopicRangeConstantOutput {
	return o
}

func (o TopicRangeConstantOutput) ToTopicRangeConstantPtrOutput() TopicRangeConstantPtrOutput {
	return o.ToTopicRangeConstantPtrOutputWithContext(context.Background())
}

func (o TopicRangeConstantOutput) ToTopicRangeConstantPtrOutputWithContext(ctx context.Context) TopicRangeConstantPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicRangeConstant) *TopicRangeConstant {
		return &v
	}).(TopicRangeConstantPtrOutput)
}

// The maximum value for a range constant.
func (o TopicRangeConstantOutput) Maximum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicRangeConstant) *string { return v.Maximum }).(pulumi.StringPtrOutput)
}

// The minimum value for a range constant.
func (o TopicRangeConstantOutput) Minimum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicRangeConstant) *string { return v.Minimum }).(pulumi.StringPtrOutput)
}

type TopicRangeConstantPtrOutput struct{ *pulumi.OutputState }

func (TopicRangeConstantPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicRangeConstant)(nil)).Elem()
}

func (o TopicRangeConstantPtrOutput) ToTopicRangeConstantPtrOutput() TopicRangeConstantPtrOutput {
	return o
}

func (o TopicRangeConstantPtrOutput) ToTopicRangeConstantPtrOutputWithContext(ctx context.Context) TopicRangeConstantPtrOutput {
	return o
}

func (o TopicRangeConstantPtrOutput) Elem() TopicRangeConstantOutput {
	return o.ApplyT(func(v *TopicRangeConstant) TopicRangeConstant {
		if v != nil {
			return *v
		}
		var ret TopicRangeConstant
		return ret
	}).(TopicRangeConstantOutput)
}

// The maximum value for a range constant.
func (o TopicRangeConstantPtrOutput) Maximum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicRangeConstant) *string {
		if v == nil {
			return nil
		}
		return v.Maximum
	}).(pulumi.StringPtrOutput)
}

// The minimum value for a range constant.
func (o TopicRangeConstantPtrOutput) Minimum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicRangeConstant) *string {
		if v == nil {
			return nil
		}
		return v.Minimum
	}).(pulumi.StringPtrOutput)
}

type TopicRangeFilterConstant struct {
	// The data type of the constant value that is used in a range filter. Valid values for this structure are `RANGE` .
	ConstantType *TopicConstantType `pulumi:"constantType"`
	// The value of the constant that is used to specify the endpoints of a range filter.
	RangeConstant *TopicRangeConstant `pulumi:"rangeConstant"`
}

// TopicRangeFilterConstantInput is an input type that accepts TopicRangeFilterConstantArgs and TopicRangeFilterConstantOutput values.
// You can construct a concrete instance of `TopicRangeFilterConstantInput` via:
//
//	TopicRangeFilterConstantArgs{...}
type TopicRangeFilterConstantInput interface {
	pulumi.Input

	ToTopicRangeFilterConstantOutput() TopicRangeFilterConstantOutput
	ToTopicRangeFilterConstantOutputWithContext(context.Context) TopicRangeFilterConstantOutput
}

type TopicRangeFilterConstantArgs struct {
	// The data type of the constant value that is used in a range filter. Valid values for this structure are `RANGE` .
	ConstantType TopicConstantTypePtrInput `pulumi:"constantType"`
	// The value of the constant that is used to specify the endpoints of a range filter.
	RangeConstant TopicRangeConstantPtrInput `pulumi:"rangeConstant"`
}

func (TopicRangeFilterConstantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRangeFilterConstant)(nil)).Elem()
}

func (i TopicRangeFilterConstantArgs) ToTopicRangeFilterConstantOutput() TopicRangeFilterConstantOutput {
	return i.ToTopicRangeFilterConstantOutputWithContext(context.Background())
}

func (i TopicRangeFilterConstantArgs) ToTopicRangeFilterConstantOutputWithContext(ctx context.Context) TopicRangeFilterConstantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRangeFilterConstantOutput)
}

func (i TopicRangeFilterConstantArgs) ToTopicRangeFilterConstantPtrOutput() TopicRangeFilterConstantPtrOutput {
	return i.ToTopicRangeFilterConstantPtrOutputWithContext(context.Background())
}

func (i TopicRangeFilterConstantArgs) ToTopicRangeFilterConstantPtrOutputWithContext(ctx context.Context) TopicRangeFilterConstantPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRangeFilterConstantOutput).ToTopicRangeFilterConstantPtrOutputWithContext(ctx)
}

// TopicRangeFilterConstantPtrInput is an input type that accepts TopicRangeFilterConstantArgs, TopicRangeFilterConstantPtr and TopicRangeFilterConstantPtrOutput values.
// You can construct a concrete instance of `TopicRangeFilterConstantPtrInput` via:
//
//	        TopicRangeFilterConstantArgs{...}
//
//	or:
//
//	        nil
type TopicRangeFilterConstantPtrInput interface {
	pulumi.Input

	ToTopicRangeFilterConstantPtrOutput() TopicRangeFilterConstantPtrOutput
	ToTopicRangeFilterConstantPtrOutputWithContext(context.Context) TopicRangeFilterConstantPtrOutput
}

type topicRangeFilterConstantPtrType TopicRangeFilterConstantArgs

func TopicRangeFilterConstantPtr(v *TopicRangeFilterConstantArgs) TopicRangeFilterConstantPtrInput {
	return (*topicRangeFilterConstantPtrType)(v)
}

func (*topicRangeFilterConstantPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicRangeFilterConstant)(nil)).Elem()
}

func (i *topicRangeFilterConstantPtrType) ToTopicRangeFilterConstantPtrOutput() TopicRangeFilterConstantPtrOutput {
	return i.ToTopicRangeFilterConstantPtrOutputWithContext(context.Background())
}

func (i *topicRangeFilterConstantPtrType) ToTopicRangeFilterConstantPtrOutputWithContext(ctx context.Context) TopicRangeFilterConstantPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRangeFilterConstantPtrOutput)
}

type TopicRangeFilterConstantOutput struct{ *pulumi.OutputState }

func (TopicRangeFilterConstantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRangeFilterConstant)(nil)).Elem()
}

func (o TopicRangeFilterConstantOutput) ToTopicRangeFilterConstantOutput() TopicRangeFilterConstantOutput {
	return o
}

func (o TopicRangeFilterConstantOutput) ToTopicRangeFilterConstantOutputWithContext(ctx context.Context) TopicRangeFilterConstantOutput {
	return o
}

func (o TopicRangeFilterConstantOutput) ToTopicRangeFilterConstantPtrOutput() TopicRangeFilterConstantPtrOutput {
	return o.ToTopicRangeFilterConstantPtrOutputWithContext(context.Background())
}

func (o TopicRangeFilterConstantOutput) ToTopicRangeFilterConstantPtrOutputWithContext(ctx context.Context) TopicRangeFilterConstantPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicRangeFilterConstant) *TopicRangeFilterConstant {
		return &v
	}).(TopicRangeFilterConstantPtrOutput)
}

// The data type of the constant value that is used in a range filter. Valid values for this structure are `RANGE` .
func (o TopicRangeFilterConstantOutput) ConstantType() TopicConstantTypePtrOutput {
	return o.ApplyT(func(v TopicRangeFilterConstant) *TopicConstantType { return v.ConstantType }).(TopicConstantTypePtrOutput)
}

// The value of the constant that is used to specify the endpoints of a range filter.
func (o TopicRangeFilterConstantOutput) RangeConstant() TopicRangeConstantPtrOutput {
	return o.ApplyT(func(v TopicRangeFilterConstant) *TopicRangeConstant { return v.RangeConstant }).(TopicRangeConstantPtrOutput)
}

type TopicRangeFilterConstantPtrOutput struct{ *pulumi.OutputState }

func (TopicRangeFilterConstantPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicRangeFilterConstant)(nil)).Elem()
}

func (o TopicRangeFilterConstantPtrOutput) ToTopicRangeFilterConstantPtrOutput() TopicRangeFilterConstantPtrOutput {
	return o
}

func (o TopicRangeFilterConstantPtrOutput) ToTopicRangeFilterConstantPtrOutputWithContext(ctx context.Context) TopicRangeFilterConstantPtrOutput {
	return o
}

func (o TopicRangeFilterConstantPtrOutput) Elem() TopicRangeFilterConstantOutput {
	return o.ApplyT(func(v *TopicRangeFilterConstant) TopicRangeFilterConstant {
		if v != nil {
			return *v
		}
		var ret TopicRangeFilterConstant
		return ret
	}).(TopicRangeFilterConstantOutput)
}

// The data type of the constant value that is used in a range filter. Valid values for this structure are `RANGE` .
func (o TopicRangeFilterConstantPtrOutput) ConstantType() TopicConstantTypePtrOutput {
	return o.ApplyT(func(v *TopicRangeFilterConstant) *TopicConstantType {
		if v == nil {
			return nil
		}
		return v.ConstantType
	}).(TopicConstantTypePtrOutput)
}

// The value of the constant that is used to specify the endpoints of a range filter.
func (o TopicRangeFilterConstantPtrOutput) RangeConstant() TopicRangeConstantPtrOutput {
	return o.ApplyT(func(v *TopicRangeFilterConstant) *TopicRangeConstant {
		if v == nil {
			return nil
		}
		return v.RangeConstant
	}).(TopicRangeConstantPtrOutput)
}

type TopicRelativeDateFilter struct {
	// The constant used in a relative date filter.
	Constant *TopicSingularFilterConstant `pulumi:"constant"`
	// The function to be used in a relative date filter to determine the range of dates to include in the results. Valid values for this structure are `BEFORE` , `AFTER` , and `BETWEEN` .
	RelativeDateFilterFunction *TopicRelativeDateFilterFunction `pulumi:"relativeDateFilterFunction"`
	// The level of time precision that is used to aggregate `DateTime` values.
	TimeGranularity *TopicTimeGranularity `pulumi:"timeGranularity"`
}

// TopicRelativeDateFilterInput is an input type that accepts TopicRelativeDateFilterArgs and TopicRelativeDateFilterOutput values.
// You can construct a concrete instance of `TopicRelativeDateFilterInput` via:
//
//	TopicRelativeDateFilterArgs{...}
type TopicRelativeDateFilterInput interface {
	pulumi.Input

	ToTopicRelativeDateFilterOutput() TopicRelativeDateFilterOutput
	ToTopicRelativeDateFilterOutputWithContext(context.Context) TopicRelativeDateFilterOutput
}

type TopicRelativeDateFilterArgs struct {
	// The constant used in a relative date filter.
	Constant TopicSingularFilterConstantPtrInput `pulumi:"constant"`
	// The function to be used in a relative date filter to determine the range of dates to include in the results. Valid values for this structure are `BEFORE` , `AFTER` , and `BETWEEN` .
	RelativeDateFilterFunction TopicRelativeDateFilterFunctionPtrInput `pulumi:"relativeDateFilterFunction"`
	// The level of time precision that is used to aggregate `DateTime` values.
	TimeGranularity TopicTimeGranularityPtrInput `pulumi:"timeGranularity"`
}

func (TopicRelativeDateFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRelativeDateFilter)(nil)).Elem()
}

func (i TopicRelativeDateFilterArgs) ToTopicRelativeDateFilterOutput() TopicRelativeDateFilterOutput {
	return i.ToTopicRelativeDateFilterOutputWithContext(context.Background())
}

func (i TopicRelativeDateFilterArgs) ToTopicRelativeDateFilterOutputWithContext(ctx context.Context) TopicRelativeDateFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRelativeDateFilterOutput)
}

func (i TopicRelativeDateFilterArgs) ToTopicRelativeDateFilterPtrOutput() TopicRelativeDateFilterPtrOutput {
	return i.ToTopicRelativeDateFilterPtrOutputWithContext(context.Background())
}

func (i TopicRelativeDateFilterArgs) ToTopicRelativeDateFilterPtrOutputWithContext(ctx context.Context) TopicRelativeDateFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRelativeDateFilterOutput).ToTopicRelativeDateFilterPtrOutputWithContext(ctx)
}

// TopicRelativeDateFilterPtrInput is an input type that accepts TopicRelativeDateFilterArgs, TopicRelativeDateFilterPtr and TopicRelativeDateFilterPtrOutput values.
// You can construct a concrete instance of `TopicRelativeDateFilterPtrInput` via:
//
//	        TopicRelativeDateFilterArgs{...}
//
//	or:
//
//	        nil
type TopicRelativeDateFilterPtrInput interface {
	pulumi.Input

	ToTopicRelativeDateFilterPtrOutput() TopicRelativeDateFilterPtrOutput
	ToTopicRelativeDateFilterPtrOutputWithContext(context.Context) TopicRelativeDateFilterPtrOutput
}

type topicRelativeDateFilterPtrType TopicRelativeDateFilterArgs

func TopicRelativeDateFilterPtr(v *TopicRelativeDateFilterArgs) TopicRelativeDateFilterPtrInput {
	return (*topicRelativeDateFilterPtrType)(v)
}

func (*topicRelativeDateFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicRelativeDateFilter)(nil)).Elem()
}

func (i *topicRelativeDateFilterPtrType) ToTopicRelativeDateFilterPtrOutput() TopicRelativeDateFilterPtrOutput {
	return i.ToTopicRelativeDateFilterPtrOutputWithContext(context.Background())
}

func (i *topicRelativeDateFilterPtrType) ToTopicRelativeDateFilterPtrOutputWithContext(ctx context.Context) TopicRelativeDateFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicRelativeDateFilterPtrOutput)
}

type TopicRelativeDateFilterOutput struct{ *pulumi.OutputState }

func (TopicRelativeDateFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicRelativeDateFilter)(nil)).Elem()
}

func (o TopicRelativeDateFilterOutput) ToTopicRelativeDateFilterOutput() TopicRelativeDateFilterOutput {
	return o
}

func (o TopicRelativeDateFilterOutput) ToTopicRelativeDateFilterOutputWithContext(ctx context.Context) TopicRelativeDateFilterOutput {
	return o
}

func (o TopicRelativeDateFilterOutput) ToTopicRelativeDateFilterPtrOutput() TopicRelativeDateFilterPtrOutput {
	return o.ToTopicRelativeDateFilterPtrOutputWithContext(context.Background())
}

func (o TopicRelativeDateFilterOutput) ToTopicRelativeDateFilterPtrOutputWithContext(ctx context.Context) TopicRelativeDateFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicRelativeDateFilter) *TopicRelativeDateFilter {
		return &v
	}).(TopicRelativeDateFilterPtrOutput)
}

// The constant used in a relative date filter.
func (o TopicRelativeDateFilterOutput) Constant() TopicSingularFilterConstantPtrOutput {
	return o.ApplyT(func(v TopicRelativeDateFilter) *TopicSingularFilterConstant { return v.Constant }).(TopicSingularFilterConstantPtrOutput)
}

// The function to be used in a relative date filter to determine the range of dates to include in the results. Valid values for this structure are `BEFORE` , `AFTER` , and `BETWEEN` .
func (o TopicRelativeDateFilterOutput) RelativeDateFilterFunction() TopicRelativeDateFilterFunctionPtrOutput {
	return o.ApplyT(func(v TopicRelativeDateFilter) *TopicRelativeDateFilterFunction { return v.RelativeDateFilterFunction }).(TopicRelativeDateFilterFunctionPtrOutput)
}

// The level of time precision that is used to aggregate `DateTime` values.
func (o TopicRelativeDateFilterOutput) TimeGranularity() TopicTimeGranularityPtrOutput {
	return o.ApplyT(func(v TopicRelativeDateFilter) *TopicTimeGranularity { return v.TimeGranularity }).(TopicTimeGranularityPtrOutput)
}

type TopicRelativeDateFilterPtrOutput struct{ *pulumi.OutputState }

func (TopicRelativeDateFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicRelativeDateFilter)(nil)).Elem()
}

func (o TopicRelativeDateFilterPtrOutput) ToTopicRelativeDateFilterPtrOutput() TopicRelativeDateFilterPtrOutput {
	return o
}

func (o TopicRelativeDateFilterPtrOutput) ToTopicRelativeDateFilterPtrOutputWithContext(ctx context.Context) TopicRelativeDateFilterPtrOutput {
	return o
}

func (o TopicRelativeDateFilterPtrOutput) Elem() TopicRelativeDateFilterOutput {
	return o.ApplyT(func(v *TopicRelativeDateFilter) TopicRelativeDateFilter {
		if v != nil {
			return *v
		}
		var ret TopicRelativeDateFilter
		return ret
	}).(TopicRelativeDateFilterOutput)
}

// The constant used in a relative date filter.
func (o TopicRelativeDateFilterPtrOutput) Constant() TopicSingularFilterConstantPtrOutput {
	return o.ApplyT(func(v *TopicRelativeDateFilter) *TopicSingularFilterConstant {
		if v == nil {
			return nil
		}
		return v.Constant
	}).(TopicSingularFilterConstantPtrOutput)
}

// The function to be used in a relative date filter to determine the range of dates to include in the results. Valid values for this structure are `BEFORE` , `AFTER` , and `BETWEEN` .
func (o TopicRelativeDateFilterPtrOutput) RelativeDateFilterFunction() TopicRelativeDateFilterFunctionPtrOutput {
	return o.ApplyT(func(v *TopicRelativeDateFilter) *TopicRelativeDateFilterFunction {
		if v == nil {
			return nil
		}
		return v.RelativeDateFilterFunction
	}).(TopicRelativeDateFilterFunctionPtrOutput)
}

// The level of time precision that is used to aggregate `DateTime` values.
func (o TopicRelativeDateFilterPtrOutput) TimeGranularity() TopicTimeGranularityPtrOutput {
	return o.ApplyT(func(v *TopicRelativeDateFilter) *TopicTimeGranularity {
		if v == nil {
			return nil
		}
		return v.TimeGranularity
	}).(TopicTimeGranularityPtrOutput)
}

type TopicSemanticEntityType struct {
	// The semantic entity sub type name.
	SubTypeName *string `pulumi:"subTypeName"`
	// The semantic entity type name.
	TypeName *string `pulumi:"typeName"`
	// The semantic entity type parameters.
	TypeParameters map[string]string `pulumi:"typeParameters"`
}

// TopicSemanticEntityTypeInput is an input type that accepts TopicSemanticEntityTypeArgs and TopicSemanticEntityTypeOutput values.
// You can construct a concrete instance of `TopicSemanticEntityTypeInput` via:
//
//	TopicSemanticEntityTypeArgs{...}
type TopicSemanticEntityTypeInput interface {
	pulumi.Input

	ToTopicSemanticEntityTypeOutput() TopicSemanticEntityTypeOutput
	ToTopicSemanticEntityTypeOutputWithContext(context.Context) TopicSemanticEntityTypeOutput
}

type TopicSemanticEntityTypeArgs struct {
	// The semantic entity sub type name.
	SubTypeName pulumi.StringPtrInput `pulumi:"subTypeName"`
	// The semantic entity type name.
	TypeName pulumi.StringPtrInput `pulumi:"typeName"`
	// The semantic entity type parameters.
	TypeParameters pulumi.StringMapInput `pulumi:"typeParameters"`
}

func (TopicSemanticEntityTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSemanticEntityType)(nil)).Elem()
}

func (i TopicSemanticEntityTypeArgs) ToTopicSemanticEntityTypeOutput() TopicSemanticEntityTypeOutput {
	return i.ToTopicSemanticEntityTypeOutputWithContext(context.Background())
}

func (i TopicSemanticEntityTypeArgs) ToTopicSemanticEntityTypeOutputWithContext(ctx context.Context) TopicSemanticEntityTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSemanticEntityTypeOutput)
}

func (i TopicSemanticEntityTypeArgs) ToTopicSemanticEntityTypePtrOutput() TopicSemanticEntityTypePtrOutput {
	return i.ToTopicSemanticEntityTypePtrOutputWithContext(context.Background())
}

func (i TopicSemanticEntityTypeArgs) ToTopicSemanticEntityTypePtrOutputWithContext(ctx context.Context) TopicSemanticEntityTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSemanticEntityTypeOutput).ToTopicSemanticEntityTypePtrOutputWithContext(ctx)
}

// TopicSemanticEntityTypePtrInput is an input type that accepts TopicSemanticEntityTypeArgs, TopicSemanticEntityTypePtr and TopicSemanticEntityTypePtrOutput values.
// You can construct a concrete instance of `TopicSemanticEntityTypePtrInput` via:
//
//	        TopicSemanticEntityTypeArgs{...}
//
//	or:
//
//	        nil
type TopicSemanticEntityTypePtrInput interface {
	pulumi.Input

	ToTopicSemanticEntityTypePtrOutput() TopicSemanticEntityTypePtrOutput
	ToTopicSemanticEntityTypePtrOutputWithContext(context.Context) TopicSemanticEntityTypePtrOutput
}

type topicSemanticEntityTypePtrType TopicSemanticEntityTypeArgs

func TopicSemanticEntityTypePtr(v *TopicSemanticEntityTypeArgs) TopicSemanticEntityTypePtrInput {
	return (*topicSemanticEntityTypePtrType)(v)
}

func (*topicSemanticEntityTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicSemanticEntityType)(nil)).Elem()
}

func (i *topicSemanticEntityTypePtrType) ToTopicSemanticEntityTypePtrOutput() TopicSemanticEntityTypePtrOutput {
	return i.ToTopicSemanticEntityTypePtrOutputWithContext(context.Background())
}

func (i *topicSemanticEntityTypePtrType) ToTopicSemanticEntityTypePtrOutputWithContext(ctx context.Context) TopicSemanticEntityTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSemanticEntityTypePtrOutput)
}

type TopicSemanticEntityTypeOutput struct{ *pulumi.OutputState }

func (TopicSemanticEntityTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSemanticEntityType)(nil)).Elem()
}

func (o TopicSemanticEntityTypeOutput) ToTopicSemanticEntityTypeOutput() TopicSemanticEntityTypeOutput {
	return o
}

func (o TopicSemanticEntityTypeOutput) ToTopicSemanticEntityTypeOutputWithContext(ctx context.Context) TopicSemanticEntityTypeOutput {
	return o
}

func (o TopicSemanticEntityTypeOutput) ToTopicSemanticEntityTypePtrOutput() TopicSemanticEntityTypePtrOutput {
	return o.ToTopicSemanticEntityTypePtrOutputWithContext(context.Background())
}

func (o TopicSemanticEntityTypeOutput) ToTopicSemanticEntityTypePtrOutputWithContext(ctx context.Context) TopicSemanticEntityTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicSemanticEntityType) *TopicSemanticEntityType {
		return &v
	}).(TopicSemanticEntityTypePtrOutput)
}

// The semantic entity sub type name.
func (o TopicSemanticEntityTypeOutput) SubTypeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicSemanticEntityType) *string { return v.SubTypeName }).(pulumi.StringPtrOutput)
}

// The semantic entity type name.
func (o TopicSemanticEntityTypeOutput) TypeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicSemanticEntityType) *string { return v.TypeName }).(pulumi.StringPtrOutput)
}

// The semantic entity type parameters.
func (o TopicSemanticEntityTypeOutput) TypeParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v TopicSemanticEntityType) map[string]string { return v.TypeParameters }).(pulumi.StringMapOutput)
}

type TopicSemanticEntityTypePtrOutput struct{ *pulumi.OutputState }

func (TopicSemanticEntityTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicSemanticEntityType)(nil)).Elem()
}

func (o TopicSemanticEntityTypePtrOutput) ToTopicSemanticEntityTypePtrOutput() TopicSemanticEntityTypePtrOutput {
	return o
}

func (o TopicSemanticEntityTypePtrOutput) ToTopicSemanticEntityTypePtrOutputWithContext(ctx context.Context) TopicSemanticEntityTypePtrOutput {
	return o
}

func (o TopicSemanticEntityTypePtrOutput) Elem() TopicSemanticEntityTypeOutput {
	return o.ApplyT(func(v *TopicSemanticEntityType) TopicSemanticEntityType {
		if v != nil {
			return *v
		}
		var ret TopicSemanticEntityType
		return ret
	}).(TopicSemanticEntityTypeOutput)
}

// The semantic entity sub type name.
func (o TopicSemanticEntityTypePtrOutput) SubTypeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicSemanticEntityType) *string {
		if v == nil {
			return nil
		}
		return v.SubTypeName
	}).(pulumi.StringPtrOutput)
}

// The semantic entity type name.
func (o TopicSemanticEntityTypePtrOutput) TypeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicSemanticEntityType) *string {
		if v == nil {
			return nil
		}
		return v.TypeName
	}).(pulumi.StringPtrOutput)
}

// The semantic entity type parameters.
func (o TopicSemanticEntityTypePtrOutput) TypeParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TopicSemanticEntityType) map[string]string {
		if v == nil {
			return nil
		}
		return v.TypeParameters
	}).(pulumi.StringMapOutput)
}

type TopicSemanticType struct {
	// The semantic type falsey cell value.
	FalseyCellValue *string `pulumi:"falseyCellValue"`
	// The other names or aliases for the false cell value.
	FalseyCellValueSynonyms []string `pulumi:"falseyCellValueSynonyms"`
	// The semantic type sub type name.
	SubTypeName *string `pulumi:"subTypeName"`
	// The semantic type truthy cell value.
	TruthyCellValue *string `pulumi:"truthyCellValue"`
	// The other names or aliases for the true cell value.
	TruthyCellValueSynonyms []string `pulumi:"truthyCellValueSynonyms"`
	// The semantic type name.
	TypeName *string `pulumi:"typeName"`
	// The semantic type parameters.
	TypeParameters map[string]string `pulumi:"typeParameters"`
}

// TopicSemanticTypeInput is an input type that accepts TopicSemanticTypeArgs and TopicSemanticTypeOutput values.
// You can construct a concrete instance of `TopicSemanticTypeInput` via:
//
//	TopicSemanticTypeArgs{...}
type TopicSemanticTypeInput interface {
	pulumi.Input

	ToTopicSemanticTypeOutput() TopicSemanticTypeOutput
	ToTopicSemanticTypeOutputWithContext(context.Context) TopicSemanticTypeOutput
}

type TopicSemanticTypeArgs struct {
	// The semantic type falsey cell value.
	FalseyCellValue pulumi.StringPtrInput `pulumi:"falseyCellValue"`
	// The other names or aliases for the false cell value.
	FalseyCellValueSynonyms pulumi.StringArrayInput `pulumi:"falseyCellValueSynonyms"`
	// The semantic type sub type name.
	SubTypeName pulumi.StringPtrInput `pulumi:"subTypeName"`
	// The semantic type truthy cell value.
	TruthyCellValue pulumi.StringPtrInput `pulumi:"truthyCellValue"`
	// The other names or aliases for the true cell value.
	TruthyCellValueSynonyms pulumi.StringArrayInput `pulumi:"truthyCellValueSynonyms"`
	// The semantic type name.
	TypeName pulumi.StringPtrInput `pulumi:"typeName"`
	// The semantic type parameters.
	TypeParameters pulumi.StringMapInput `pulumi:"typeParameters"`
}

func (TopicSemanticTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSemanticType)(nil)).Elem()
}

func (i TopicSemanticTypeArgs) ToTopicSemanticTypeOutput() TopicSemanticTypeOutput {
	return i.ToTopicSemanticTypeOutputWithContext(context.Background())
}

func (i TopicSemanticTypeArgs) ToTopicSemanticTypeOutputWithContext(ctx context.Context) TopicSemanticTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSemanticTypeOutput)
}

func (i TopicSemanticTypeArgs) ToTopicSemanticTypePtrOutput() TopicSemanticTypePtrOutput {
	return i.ToTopicSemanticTypePtrOutputWithContext(context.Background())
}

func (i TopicSemanticTypeArgs) ToTopicSemanticTypePtrOutputWithContext(ctx context.Context) TopicSemanticTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSemanticTypeOutput).ToTopicSemanticTypePtrOutputWithContext(ctx)
}

// TopicSemanticTypePtrInput is an input type that accepts TopicSemanticTypeArgs, TopicSemanticTypePtr and TopicSemanticTypePtrOutput values.
// You can construct a concrete instance of `TopicSemanticTypePtrInput` via:
//
//	        TopicSemanticTypeArgs{...}
//
//	or:
//
//	        nil
type TopicSemanticTypePtrInput interface {
	pulumi.Input

	ToTopicSemanticTypePtrOutput() TopicSemanticTypePtrOutput
	ToTopicSemanticTypePtrOutputWithContext(context.Context) TopicSemanticTypePtrOutput
}

type topicSemanticTypePtrType TopicSemanticTypeArgs

func TopicSemanticTypePtr(v *TopicSemanticTypeArgs) TopicSemanticTypePtrInput {
	return (*topicSemanticTypePtrType)(v)
}

func (*topicSemanticTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicSemanticType)(nil)).Elem()
}

func (i *topicSemanticTypePtrType) ToTopicSemanticTypePtrOutput() TopicSemanticTypePtrOutput {
	return i.ToTopicSemanticTypePtrOutputWithContext(context.Background())
}

func (i *topicSemanticTypePtrType) ToTopicSemanticTypePtrOutputWithContext(ctx context.Context) TopicSemanticTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSemanticTypePtrOutput)
}

type TopicSemanticTypeOutput struct{ *pulumi.OutputState }

func (TopicSemanticTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSemanticType)(nil)).Elem()
}

func (o TopicSemanticTypeOutput) ToTopicSemanticTypeOutput() TopicSemanticTypeOutput {
	return o
}

func (o TopicSemanticTypeOutput) ToTopicSemanticTypeOutputWithContext(ctx context.Context) TopicSemanticTypeOutput {
	return o
}

func (o TopicSemanticTypeOutput) ToTopicSemanticTypePtrOutput() TopicSemanticTypePtrOutput {
	return o.ToTopicSemanticTypePtrOutputWithContext(context.Background())
}

func (o TopicSemanticTypeOutput) ToTopicSemanticTypePtrOutputWithContext(ctx context.Context) TopicSemanticTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicSemanticType) *TopicSemanticType {
		return &v
	}).(TopicSemanticTypePtrOutput)
}

// The semantic type falsey cell value.
func (o TopicSemanticTypeOutput) FalseyCellValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicSemanticType) *string { return v.FalseyCellValue }).(pulumi.StringPtrOutput)
}

// The other names or aliases for the false cell value.
func (o TopicSemanticTypeOutput) FalseyCellValueSynonyms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TopicSemanticType) []string { return v.FalseyCellValueSynonyms }).(pulumi.StringArrayOutput)
}

// The semantic type sub type name.
func (o TopicSemanticTypeOutput) SubTypeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicSemanticType) *string { return v.SubTypeName }).(pulumi.StringPtrOutput)
}

// The semantic type truthy cell value.
func (o TopicSemanticTypeOutput) TruthyCellValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicSemanticType) *string { return v.TruthyCellValue }).(pulumi.StringPtrOutput)
}

// The other names or aliases for the true cell value.
func (o TopicSemanticTypeOutput) TruthyCellValueSynonyms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TopicSemanticType) []string { return v.TruthyCellValueSynonyms }).(pulumi.StringArrayOutput)
}

// The semantic type name.
func (o TopicSemanticTypeOutput) TypeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicSemanticType) *string { return v.TypeName }).(pulumi.StringPtrOutput)
}

// The semantic type parameters.
func (o TopicSemanticTypeOutput) TypeParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v TopicSemanticType) map[string]string { return v.TypeParameters }).(pulumi.StringMapOutput)
}

type TopicSemanticTypePtrOutput struct{ *pulumi.OutputState }

func (TopicSemanticTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicSemanticType)(nil)).Elem()
}

func (o TopicSemanticTypePtrOutput) ToTopicSemanticTypePtrOutput() TopicSemanticTypePtrOutput {
	return o
}

func (o TopicSemanticTypePtrOutput) ToTopicSemanticTypePtrOutputWithContext(ctx context.Context) TopicSemanticTypePtrOutput {
	return o
}

func (o TopicSemanticTypePtrOutput) Elem() TopicSemanticTypeOutput {
	return o.ApplyT(func(v *TopicSemanticType) TopicSemanticType {
		if v != nil {
			return *v
		}
		var ret TopicSemanticType
		return ret
	}).(TopicSemanticTypeOutput)
}

// The semantic type falsey cell value.
func (o TopicSemanticTypePtrOutput) FalseyCellValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicSemanticType) *string {
		if v == nil {
			return nil
		}
		return v.FalseyCellValue
	}).(pulumi.StringPtrOutput)
}

// The other names or aliases for the false cell value.
func (o TopicSemanticTypePtrOutput) FalseyCellValueSynonyms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TopicSemanticType) []string {
		if v == nil {
			return nil
		}
		return v.FalseyCellValueSynonyms
	}).(pulumi.StringArrayOutput)
}

// The semantic type sub type name.
func (o TopicSemanticTypePtrOutput) SubTypeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicSemanticType) *string {
		if v == nil {
			return nil
		}
		return v.SubTypeName
	}).(pulumi.StringPtrOutput)
}

// The semantic type truthy cell value.
func (o TopicSemanticTypePtrOutput) TruthyCellValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicSemanticType) *string {
		if v == nil {
			return nil
		}
		return v.TruthyCellValue
	}).(pulumi.StringPtrOutput)
}

// The other names or aliases for the true cell value.
func (o TopicSemanticTypePtrOutput) TruthyCellValueSynonyms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TopicSemanticType) []string {
		if v == nil {
			return nil
		}
		return v.TruthyCellValueSynonyms
	}).(pulumi.StringArrayOutput)
}

// The semantic type name.
func (o TopicSemanticTypePtrOutput) TypeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicSemanticType) *string {
		if v == nil {
			return nil
		}
		return v.TypeName
	}).(pulumi.StringPtrOutput)
}

// The semantic type parameters.
func (o TopicSemanticTypePtrOutput) TypeParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TopicSemanticType) map[string]string {
		if v == nil {
			return nil
		}
		return v.TypeParameters
	}).(pulumi.StringMapOutput)
}

type TopicSingularFilterConstant struct {
	// The type of the singular filter constant. Valid values for this structure are `SINGULAR` .
	ConstantType *TopicConstantType `pulumi:"constantType"`
	// The value of the singular filter constant.
	SingularConstant *string `pulumi:"singularConstant"`
}

// TopicSingularFilterConstantInput is an input type that accepts TopicSingularFilterConstantArgs and TopicSingularFilterConstantOutput values.
// You can construct a concrete instance of `TopicSingularFilterConstantInput` via:
//
//	TopicSingularFilterConstantArgs{...}
type TopicSingularFilterConstantInput interface {
	pulumi.Input

	ToTopicSingularFilterConstantOutput() TopicSingularFilterConstantOutput
	ToTopicSingularFilterConstantOutputWithContext(context.Context) TopicSingularFilterConstantOutput
}

type TopicSingularFilterConstantArgs struct {
	// The type of the singular filter constant. Valid values for this structure are `SINGULAR` .
	ConstantType TopicConstantTypePtrInput `pulumi:"constantType"`
	// The value of the singular filter constant.
	SingularConstant pulumi.StringPtrInput `pulumi:"singularConstant"`
}

func (TopicSingularFilterConstantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSingularFilterConstant)(nil)).Elem()
}

func (i TopicSingularFilterConstantArgs) ToTopicSingularFilterConstantOutput() TopicSingularFilterConstantOutput {
	return i.ToTopicSingularFilterConstantOutputWithContext(context.Background())
}

func (i TopicSingularFilterConstantArgs) ToTopicSingularFilterConstantOutputWithContext(ctx context.Context) TopicSingularFilterConstantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSingularFilterConstantOutput)
}

func (i TopicSingularFilterConstantArgs) ToTopicSingularFilterConstantPtrOutput() TopicSingularFilterConstantPtrOutput {
	return i.ToTopicSingularFilterConstantPtrOutputWithContext(context.Background())
}

func (i TopicSingularFilterConstantArgs) ToTopicSingularFilterConstantPtrOutputWithContext(ctx context.Context) TopicSingularFilterConstantPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSingularFilterConstantOutput).ToTopicSingularFilterConstantPtrOutputWithContext(ctx)
}

// TopicSingularFilterConstantPtrInput is an input type that accepts TopicSingularFilterConstantArgs, TopicSingularFilterConstantPtr and TopicSingularFilterConstantPtrOutput values.
// You can construct a concrete instance of `TopicSingularFilterConstantPtrInput` via:
//
//	        TopicSingularFilterConstantArgs{...}
//
//	or:
//
//	        nil
type TopicSingularFilterConstantPtrInput interface {
	pulumi.Input

	ToTopicSingularFilterConstantPtrOutput() TopicSingularFilterConstantPtrOutput
	ToTopicSingularFilterConstantPtrOutputWithContext(context.Context) TopicSingularFilterConstantPtrOutput
}

type topicSingularFilterConstantPtrType TopicSingularFilterConstantArgs

func TopicSingularFilterConstantPtr(v *TopicSingularFilterConstantArgs) TopicSingularFilterConstantPtrInput {
	return (*topicSingularFilterConstantPtrType)(v)
}

func (*topicSingularFilterConstantPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicSingularFilterConstant)(nil)).Elem()
}

func (i *topicSingularFilterConstantPtrType) ToTopicSingularFilterConstantPtrOutput() TopicSingularFilterConstantPtrOutput {
	return i.ToTopicSingularFilterConstantPtrOutputWithContext(context.Background())
}

func (i *topicSingularFilterConstantPtrType) ToTopicSingularFilterConstantPtrOutputWithContext(ctx context.Context) TopicSingularFilterConstantPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicSingularFilterConstantPtrOutput)
}

type TopicSingularFilterConstantOutput struct{ *pulumi.OutputState }

func (TopicSingularFilterConstantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicSingularFilterConstant)(nil)).Elem()
}

func (o TopicSingularFilterConstantOutput) ToTopicSingularFilterConstantOutput() TopicSingularFilterConstantOutput {
	return o
}

func (o TopicSingularFilterConstantOutput) ToTopicSingularFilterConstantOutputWithContext(ctx context.Context) TopicSingularFilterConstantOutput {
	return o
}

func (o TopicSingularFilterConstantOutput) ToTopicSingularFilterConstantPtrOutput() TopicSingularFilterConstantPtrOutput {
	return o.ToTopicSingularFilterConstantPtrOutputWithContext(context.Background())
}

func (o TopicSingularFilterConstantOutput) ToTopicSingularFilterConstantPtrOutputWithContext(ctx context.Context) TopicSingularFilterConstantPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicSingularFilterConstant) *TopicSingularFilterConstant {
		return &v
	}).(TopicSingularFilterConstantPtrOutput)
}

// The type of the singular filter constant. Valid values for this structure are `SINGULAR` .
func (o TopicSingularFilterConstantOutput) ConstantType() TopicConstantTypePtrOutput {
	return o.ApplyT(func(v TopicSingularFilterConstant) *TopicConstantType { return v.ConstantType }).(TopicConstantTypePtrOutput)
}

// The value of the singular filter constant.
func (o TopicSingularFilterConstantOutput) SingularConstant() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicSingularFilterConstant) *string { return v.SingularConstant }).(pulumi.StringPtrOutput)
}

type TopicSingularFilterConstantPtrOutput struct{ *pulumi.OutputState }

func (TopicSingularFilterConstantPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicSingularFilterConstant)(nil)).Elem()
}

func (o TopicSingularFilterConstantPtrOutput) ToTopicSingularFilterConstantPtrOutput() TopicSingularFilterConstantPtrOutput {
	return o
}

func (o TopicSingularFilterConstantPtrOutput) ToTopicSingularFilterConstantPtrOutputWithContext(ctx context.Context) TopicSingularFilterConstantPtrOutput {
	return o
}

func (o TopicSingularFilterConstantPtrOutput) Elem() TopicSingularFilterConstantOutput {
	return o.ApplyT(func(v *TopicSingularFilterConstant) TopicSingularFilterConstant {
		if v != nil {
			return *v
		}
		var ret TopicSingularFilterConstant
		return ret
	}).(TopicSingularFilterConstantOutput)
}

// The type of the singular filter constant. Valid values for this structure are `SINGULAR` .
func (o TopicSingularFilterConstantPtrOutput) ConstantType() TopicConstantTypePtrOutput {
	return o.ApplyT(func(v *TopicSingularFilterConstant) *TopicConstantType {
		if v == nil {
			return nil
		}
		return v.ConstantType
	}).(TopicConstantTypePtrOutput)
}

// The value of the singular filter constant.
func (o TopicSingularFilterConstantPtrOutput) SingularConstant() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicSingularFilterConstant) *string {
		if v == nil {
			return nil
		}
		return v.SingularConstant
	}).(pulumi.StringPtrOutput)
}

// <p>The structure that contains information about a network interface.</p>
type VpcConnectionNetworkInterface struct {
	// <p>The availability zone that the network interface resides in.</p>
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// <p>An error message.</p>
	ErrorMessage *string `pulumi:"errorMessage"`
	// <p>The network interface ID.</p>
	NetworkInterfaceId *string `pulumi:"networkInterfaceId"`
	// The status of the network interface.
	Status *VpcConnectionNetworkInterfaceStatus `pulumi:"status"`
	// <p>The subnet ID associated with the network interface.</p>
	SubnetId *string `pulumi:"subnetId"`
}

// <p>The structure that contains information about a network interface.</p>
type VpcConnectionNetworkInterfaceOutput struct{ *pulumi.OutputState }

func (VpcConnectionNetworkInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcConnectionNetworkInterface)(nil)).Elem()
}

func (o VpcConnectionNetworkInterfaceOutput) ToVpcConnectionNetworkInterfaceOutput() VpcConnectionNetworkInterfaceOutput {
	return o
}

func (o VpcConnectionNetworkInterfaceOutput) ToVpcConnectionNetworkInterfaceOutputWithContext(ctx context.Context) VpcConnectionNetworkInterfaceOutput {
	return o
}

// <p>The availability zone that the network interface resides in.</p>
func (o VpcConnectionNetworkInterfaceOutput) AvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcConnectionNetworkInterface) *string { return v.AvailabilityZone }).(pulumi.StringPtrOutput)
}

// <p>An error message.</p>
func (o VpcConnectionNetworkInterfaceOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcConnectionNetworkInterface) *string { return v.ErrorMessage }).(pulumi.StringPtrOutput)
}

// <p>The network interface ID.</p>
func (o VpcConnectionNetworkInterfaceOutput) NetworkInterfaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcConnectionNetworkInterface) *string { return v.NetworkInterfaceId }).(pulumi.StringPtrOutput)
}

// The status of the network interface.
func (o VpcConnectionNetworkInterfaceOutput) Status() VpcConnectionNetworkInterfaceStatusPtrOutput {
	return o.ApplyT(func(v VpcConnectionNetworkInterface) *VpcConnectionNetworkInterfaceStatus { return v.Status }).(VpcConnectionNetworkInterfaceStatusPtrOutput)
}

// <p>The subnet ID associated with the network interface.</p>
func (o VpcConnectionNetworkInterfaceOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcConnectionNetworkInterface) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

type VpcConnectionNetworkInterfaceArrayOutput struct{ *pulumi.OutputState }

func (VpcConnectionNetworkInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpcConnectionNetworkInterface)(nil)).Elem()
}

func (o VpcConnectionNetworkInterfaceArrayOutput) ToVpcConnectionNetworkInterfaceArrayOutput() VpcConnectionNetworkInterfaceArrayOutput {
	return o
}

func (o VpcConnectionNetworkInterfaceArrayOutput) ToVpcConnectionNetworkInterfaceArrayOutputWithContext(ctx context.Context) VpcConnectionNetworkInterfaceArrayOutput {
	return o
}

func (o VpcConnectionNetworkInterfaceArrayOutput) Index(i pulumi.IntInput) VpcConnectionNetworkInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VpcConnectionNetworkInterface {
		return vs[0].([]VpcConnectionNetworkInterface)[vs[1].(int)]
	}).(VpcConnectionNetworkInterfaceOutput)
}

// <p>The key or keys of the key-value pairs for the resource tag or tags assigned to the
//
//	resource.</p>
type VpcConnectionTag struct {
	// <p>Tag key.</p>
	Key string `pulumi:"key"`
	// <p>Tag value.</p>
	Value string `pulumi:"value"`
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableFieldOptionInput)(nil)).Elem(), TemplateTableFieldOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableFieldOptionArrayInput)(nil)).Elem(), TemplateTableFieldOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableFieldOptionsInput)(nil)).Elem(), TemplateTableFieldOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableFieldOptionsPtrInput)(nil)).Elem(), TemplateTableFieldOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableFieldUrlConfigurationInput)(nil)).Elem(), TemplateTableFieldUrlConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableFieldUrlConfigurationPtrInput)(nil)).Elem(), TemplateTableFieldUrlConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableFieldWellsInput)(nil)).Elem(), TemplateTableFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableFieldWellsPtrInput)(nil)).Elem(), TemplateTableFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableInlineVisualizationInput)(nil)).Elem(), TemplateTableInlineVisualizationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableInlineVisualizationArrayInput)(nil)).Elem(), TemplateTableInlineVisualizationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableOptionsInput)(nil)).Elem(), TemplateTableOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableOptionsPtrInput)(nil)).Elem(), TemplateTableOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTablePaginatedReportOptionsInput)(nil)).Elem(), TemplateTablePaginatedReportOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTablePaginatedReportOptionsPtrInput)(nil)).Elem(), TemplateTablePaginatedReportOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTablePinnedFieldOptionsInput)(nil)).Elem(), TemplateTablePinnedFieldOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTablePinnedFieldOptionsPtrInput)(nil)).Elem(), TemplateTablePinnedFieldOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableRowConditionalFormattingInput)(nil)).Elem(), TemplateTableRowConditionalFormattingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableRowConditionalFormattingPtrInput)(nil)).Elem(), TemplateTableRowConditionalFormattingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableSideBorderOptionsInput)(nil)).Elem(), TemplateTableSideBorderOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableSideBorderOptionsPtrInput)(nil)).Elem(), TemplateTableSideBorderOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableSortConfigurationInput)(nil)).Elem(), TemplateTableSortConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableSortConfigurationPtrInput)(nil)).Elem(), TemplateTableSortConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableStyleTargetInput)(nil)).Elem(), TemplateTableStyleTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableStyleTargetArrayInput)(nil)).Elem(), TemplateTableStyleTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableUnaggregatedFieldWellsInput)(nil)).Elem(), TemplateTableUnaggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableUnaggregatedFieldWellsPtrInput)(nil)).Elem(), TemplateTableUnaggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableVisualInput)(nil)).Elem(), TemplateTableVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTableVisualPtrInput)(nil)).Elem(), TemplateTableVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTextAreaControlDisplayOptionsInput)(nil)).Elem(), TemplateTextAreaControlDisplayOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTextAreaControlDisplayOptionsPtrInput)(nil)).Elem(), TemplateTextAreaControlDisplayOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTextConditionalFormatInput)(nil)).Elem(), TemplateTextConditionalFormatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTextConditionalFormatPtrInput)(nil)).Elem(), TemplateTextConditionalFormatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTextControlPlaceholderOptionsInput)(nil)).Elem(), TemplateTextControlPlaceholderOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTextControlPlaceholderOptionsPtrInput)(nil)).Elem(), TemplateTextControlPlaceholderOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTextFieldControlDisplayOptionsInput)(nil)).Elem(), TemplateTextFieldControlDisplayOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTextFieldControlDisplayOptionsPtrInput)(nil)).Elem(), TemplateTextFieldControlDisplayOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateThousandSeparatorOptionsInput)(nil)).Elem(), TemplateThousandSeparatorOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateThousandSeparatorOptionsPtrInput)(nil)).Elem(), TemplateThousandSeparatorOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTimeBasedForecastPropertiesInput)(nil)).Elem(), TemplateTimeBasedForecastPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTimeBasedForecastPropertiesPtrInput)(nil)).Elem(), TemplateTimeBasedForecastPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTimeEqualityFilterInput)(nil)).Elem(), TemplateTimeEqualityFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTimeEqualityFilterPtrInput)(nil)).Elem(), TemplateTimeEqualityFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTimeRangeDrillDownFilterInput)(nil)).Elem(), TemplateTimeRangeDrillDownFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTimeRangeDrillDownFilterPtrInput)(nil)).Elem(), TemplateTimeRangeDrillDownFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTimeRangeFilterInput)(nil)).Elem(), TemplateTimeRangeFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTimeRangeFilterPtrInput)(nil)).Elem(), TemplateTimeRangeFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTimeRangeFilterValueInput)(nil)).Elem(), TemplateTimeRangeFilterValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTimeRangeFilterValuePtrInput)(nil)).Elem(), TemplateTimeRangeFilterValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTooltipItemInput)(nil)).Elem(), TemplateTooltipItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTooltipItemArrayInput)(nil)).Elem(), TemplateTooltipItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTooltipOptionsInput)(nil)).Elem(), TemplateTooltipOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTooltipOptionsPtrInput)(nil)).Elem(), TemplateTooltipOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTopBottomFilterInput)(nil)).Elem(), TemplateTopBottomFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTopBottomFilterPtrInput)(nil)).Elem(), TemplateTopBottomFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTopBottomMoversComputationInput)(nil)).Elem(), TemplateTopBottomMoversComputationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTopBottomMoversComputationPtrInput)(nil)).Elem(), TemplateTopBottomMoversComputationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTopBottomRankedComputationInput)(nil)).Elem(), TemplateTopBottomRankedComputationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTopBottomRankedComputationPtrInput)(nil)).Elem(), TemplateTopBottomRankedComputationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTotalAggregationComputationInput)(nil)).Elem(), TemplateTotalAggregationComputationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTotalAggregationComputationPtrInput)(nil)).Elem(), TemplateTotalAggregationComputationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTotalAggregationFunctionInput)(nil)).Elem(), TemplateTotalAggregationFunctionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTotalAggregationOptionInput)(nil)).Elem(), TemplateTotalAggregationOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTotalAggregationOptionArrayInput)(nil)).Elem(), TemplateTotalAggregationOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTotalOptionsInput)(nil)).Elem(), TemplateTotalOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTotalOptionsPtrInput)(nil)).Elem(), TemplateTotalOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTreeMapAggregatedFieldWellsInput)(nil)).Elem(), TemplateTreeMapAggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTreeMapAggregatedFieldWellsPtrInput)(nil)).Elem(), TemplateTreeMapAggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTreeMapConfigurationInput)(nil)).Elem(), TemplateTreeMapConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTreeMapConfigurationPtrInput)(nil)).Elem(), TemplateTreeMapConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTreeMapFieldWellsInput)(nil)).Elem(), TemplateTreeMapFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTreeMapFieldWellsPtrInput)(nil)).Elem(), TemplateTreeMapFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTreeMapSortConfigurationInput)(nil)).Elem(), TemplateTreeMapSortConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTreeMapSortConfigurationPtrInput)(nil)).Elem(), TemplateTreeMapSortConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTreeMapVisualInput)(nil)).Elem(), TemplateTreeMapVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTreeMapVisualPtrInput)(nil)).Elem(), TemplateTreeMapVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTrendArrowOptionsInput)(nil)).Elem(), TemplateTrendArrowOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateTrendArrowOptionsPtrInput)(nil)).Elem(), TemplateTrendArrowOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateUnaggregatedFieldInput)(nil)).Elem(), TemplateUnaggregatedFieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateUnaggregatedFieldArrayInput)(nil)).Elem(), TemplateUnaggregatedFieldArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateUniqueValuesComputationInput)(nil)).Elem(), TemplateUniqueValuesComputationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateUniqueValuesComputationPtrInput)(nil)).Elem(), TemplateUniqueValuesComputationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateValidationStrategyInput)(nil)).Elem(), TemplateValidationStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateValidationStrategyPtrInput)(nil)).Elem(), TemplateValidationStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateVersionDefinitionInput)(nil)).Elem(), TemplateVersionDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateVersionDefinitionPtrInput)(nil)).Elem(), TemplateVersionDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateVisibleRangeOptionsInput)(nil)).Elem(), TemplateVisibleRangeOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateVisibleRangeOptionsPtrInput)(nil)).Elem(), TemplateVisibleRangeOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateVisualInput)(nil)).Elem(), TemplateVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateVisualArrayInput)(nil)).Elem(), TemplateVisualArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateVisualCustomActionInput)(nil)).Elem(), TemplateVisualCustomActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateVisualCustomActionArrayInput)(nil)).Elem(), TemplateVisualCustomActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateVisualCustomActionOperationInput)(nil)).Elem(), TemplateVisualCustomActionOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateVisualCustomActionOperationArrayInput)(nil)).Elem(), TemplateVisualCustomActionOperationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateVisualPaletteInput)(nil)).Elem(), TemplateVisualPaletteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateVisualPalettePtrInput)(nil)).Elem(), TemplateVisualPaletteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateVisualSubtitleLabelOptionsInput)(nil)).Elem(), TemplateVisualSubtitleLabelOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateVisualSubtitleLabelOptionsPtrInput)(nil)).Elem(), TemplateVisualSubtitleLabelOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateVisualTitleLabelOptionsInput)(nil)).Elem(), TemplateVisualTitleLabelOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateVisualTitleLabelOptionsPtrInput)(nil)).Elem(), TemplateVisualTitleLabelOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWaterfallChartAggregatedFieldWellsInput)(nil)).Elem(), TemplateWaterfallChartAggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWaterfallChartAggregatedFieldWellsPtrInput)(nil)).Elem(), TemplateWaterfallChartAggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWaterfallChartColorConfigurationInput)(nil)).Elem(), TemplateWaterfallChartColorConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWaterfallChartColorConfigurationPtrInput)(nil)).Elem(), TemplateWaterfallChartColorConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWaterfallChartConfigurationInput)(nil)).Elem(), TemplateWaterfallChartConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWaterfallChartConfigurationPtrInput)(nil)).Elem(), TemplateWaterfallChartConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWaterfallChartFieldWellsInput)(nil)).Elem(), TemplateWaterfallChartFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWaterfallChartFieldWellsPtrInput)(nil)).Elem(), TemplateWaterfallChartFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWaterfallChartGroupColorConfigurationInput)(nil)).Elem(), TemplateWaterfallChartGroupColorConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWaterfallChartGroupColorConfigurationPtrInput)(nil)).Elem(), TemplateWaterfallChartGroupColorConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWaterfallChartOptionsInput)(nil)).Elem(), TemplateWaterfallChartOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWaterfallChartOptionsPtrInput)(nil)).Elem(), TemplateWaterfallChartOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWaterfallChartSortConfigurationInput)(nil)).Elem(), TemplateWaterfallChartSortConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWaterfallChartSortConfigurationPtrInput)(nil)).Elem(), TemplateWaterfallChartSortConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWaterfallVisualInput)(nil)).Elem(), TemplateWaterfallVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWaterfallVisualPtrInput)(nil)).Elem(), TemplateWaterfallVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWhatIfPointScenarioInput)(nil)).Elem(), TemplateWhatIfPointScenarioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWhatIfPointScenarioPtrInput)(nil)).Elem(), TemplateWhatIfPointScenarioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWhatIfRangeScenarioInput)(nil)).Elem(), TemplateWhatIfRangeScenarioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWhatIfRangeScenarioPtrInput)(nil)).Elem(), TemplateWhatIfRangeScenarioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWordCloudAggregatedFieldWellsInput)(nil)).Elem(), TemplateWordCloudAggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWordCloudAggregatedFieldWellsPtrInput)(nil)).Elem(), TemplateWordCloudAggregatedFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWordCloudChartConfigurationInput)(nil)).Elem(), TemplateWordCloudChartConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWordCloudChartConfigurationPtrInput)(nil)).Elem(), TemplateWordCloudChartConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWordCloudFieldWellsInput)(nil)).Elem(), TemplateWordCloudFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWordCloudFieldWellsPtrInput)(nil)).Elem(), TemplateWordCloudFieldWellsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWordCloudOptionsInput)(nil)).Elem(), TemplateWordCloudOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWordCloudOptionsPtrInput)(nil)).Elem(), TemplateWordCloudOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWordCloudSortConfigurationInput)(nil)).Elem(), TemplateWordCloudSortConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWordCloudSortConfigurationPtrInput)(nil)).Elem(), TemplateWordCloudSortConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWordCloudVisualInput)(nil)).Elem(), TemplateWordCloudVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateWordCloudVisualPtrInput)(nil)).Elem(), TemplateWordCloudVisualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeBorderStyleInput)(nil)).Elem(), ThemeBorderStyleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeBorderStylePtrInput)(nil)).Elem(), ThemeBorderStyleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeConfigurationInput)(nil)).Elem(), ThemeConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeDataColorPaletteInput)(nil)).Elem(), ThemeDataColorPaletteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeDataColorPalettePtrInput)(nil)).Elem(), ThemeDataColorPaletteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeFontInput)(nil)).Elem(), ThemeFontArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeFontArrayInput)(nil)).Elem(), ThemeFontArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeGutterStyleInput)(nil)).Elem(), ThemeGutterStyleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeGutterStylePtrInput)(nil)).Elem(), ThemeGutterStyleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeMarginStyleInput)(nil)).Elem(), ThemeMarginStyleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeMarginStylePtrInput)(nil)).Elem(), ThemeMarginStyleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeResourcePermissionInput)(nil)).Elem(), ThemeResourcePermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeResourcePermissionArrayInput)(nil)).Elem(), ThemeResourcePermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeSheetStyleInput)(nil)).Elem(), ThemeSheetStyleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeSheetStylePtrInput)(nil)).Elem(), ThemeSheetStyleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeTileLayoutStyleInput)(nil)).Elem(), ThemeTileLayoutStyleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeTileLayoutStylePtrInput)(nil)).Elem(), ThemeTileLayoutStyleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeTileStyleInput)(nil)).Elem(), ThemeTileStyleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeTileStylePtrInput)(nil)).Elem(), ThemeTileStyleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeTypographyInput)(nil)).Elem(), ThemeTypographyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeTypographyPtrInput)(nil)).Elem(), ThemeTypographyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeUiColorPaletteInput)(nil)).Elem(), ThemeUiColorPaletteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeUiColorPalettePtrInput)(nil)).Elem(), ThemeUiColorPaletteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicCalculatedFieldInput)(nil)).Elem(), TopicCalculatedFieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicCalculatedFieldArrayInput)(nil)).Elem(), TopicCalculatedFieldArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicCategoryFilterInput)(nil)).Elem(), TopicCategoryFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicCategoryFilterPtrInput)(nil)).Elem(), TopicCategoryFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicCategoryFilterConstantInput)(nil)).Elem(), TopicCategoryFilterConstantArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicCategoryFilterConstantPtrInput)(nil)).Elem(), TopicCategoryFilterConstantArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicCellValueSynonymInput)(nil)).Elem(), TopicCellValueSynonymArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicCellValueSynonymArrayInput)(nil)).Elem(), TopicCellValueSynonymArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicCollectiveConstantInput)(nil)).Elem(), TopicCollectiveConstantArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicCollectiveConstantPtrInput)(nil)).Elem(), TopicCollectiveConstantArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicColumnInput)(nil)).Elem(), TopicColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicColumnArrayInput)(nil)).Elem(), TopicColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicComparativeOrderInput)(nil)).Elem(), TopicComparativeOrderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicComparativeOrderPtrInput)(nil)).Elem(), TopicComparativeOrderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicDataAggregationInput)(nil)).Elem(), TopicDataAggregationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicDataAggregationPtrInput)(nil)).Elem(), TopicDataAggregationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicDatasetMetadataInput)(nil)).Elem(), TopicDatasetMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicDatasetMetadataArrayInput)(nil)).Elem(), TopicDatasetMetadataArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicDateRangeFilterInput)(nil)).Elem(), TopicDateRangeFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicDateRangeFilterPtrInput)(nil)).Elem(), TopicDateRangeFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicDefaultFormattingInput)(nil)).Elem(), TopicDefaultFormattingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicDefaultFormattingPtrInput)(nil)).Elem(), TopicDefaultFormattingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicDisplayFormatOptionsInput)(nil)).Elem(), TopicDisplayFormatOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicDisplayFormatOptionsPtrInput)(nil)).Elem(), TopicDisplayFormatOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicFilterInput)(nil)).Elem(), TopicFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicFilterArrayInput)(nil)).Elem(), TopicFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicNamedEntityInput)(nil)).Elem(), TopicNamedEntityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicNamedEntityArrayInput)(nil)).Elem(), TopicNamedEntityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicNamedEntityDefinitionInput)(nil)).Elem(), TopicNamedEntityDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicNamedEntityDefinitionArrayInput)(nil)).Elem(), TopicNamedEntityDefinitionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicNamedEntityDefinitionMetricInput)(nil)).Elem(), TopicNamedEntityDefinitionMetricArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicNamedEntityDefinitionMetricPtrInput)(nil)).Elem(), TopicNamedEntityDefinitionMetricArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicNegativeFormatInput)(nil)).Elem(), TopicNegativeFormatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicNegativeFormatPtrInput)(nil)).Elem(), TopicNegativeFormatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicNumericEqualityFilterInput)(nil)).Elem(), TopicNumericEqualityFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicNumericEqualityFilterPtrInput)(nil)).Elem(), TopicNumericEqualityFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicNumericRangeFilterInput)(nil)).Elem(), TopicNumericRangeFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicNumericRangeFilterPtrInput)(nil)).Elem(), TopicNumericRangeFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicRangeConstantInput)(nil)).Elem(), TopicRangeConstantArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicRangeConstantPtrInput)(nil)).Elem(), TopicRangeConstantArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicRangeFilterConstantInput)(nil)).Elem(), TopicRangeFilterConstantArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicRangeFilterConstantPtrInput)(nil)).Elem(), TopicRangeFilterConstantArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicRelativeDateFilterInput)(nil)).Elem(), TopicRelativeDateFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicRelativeDateFilterPtrInput)(nil)).Elem(), TopicRelativeDateFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicSemanticEntityTypeInput)(nil)).Elem(), TopicSemanticEntityTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicSemanticEntityTypePtrInput)(nil)).Elem(), TopicSemanticEntityTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicSemanticTypeInput)(nil)).Elem(), TopicSemanticTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicSemanticTypePtrInput)(nil)).Elem(), TopicSemanticTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicSingularFilterConstantInput)(nil)).Elem(), TopicSingularFilterConstantArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicSingularFilterConstantPtrInput)(nil)).Elem(), TopicSingularFilterConstantArgs{})
	pulumi.RegisterOutputType(TemplateTableFieldOptionOutput{})
	pulumi.RegisterOutputType(TemplateTableFieldOptionArrayOutput{})
	pulumi.RegisterOutputType(TemplateTableFieldOptionsOutput{})
	pulumi.RegisterOutputType(TemplateTableFieldOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateTableFieldUrlConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateTableFieldUrlConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateTableFieldWellsOutput{})
	pulumi.RegisterOutputType(TemplateTableFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(TemplateTableInlineVisualizationOutput{})
	pulumi.RegisterOutputType(TemplateTableInlineVisualizationArrayOutput{})
	pulumi.RegisterOutputType(TemplateTableOptionsOutput{})
	pulumi.RegisterOutputType(TemplateTableOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateTablePaginatedReportOptionsOutput{})
	pulumi.RegisterOutputType(TemplateTablePaginatedReportOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateTablePinnedFieldOptionsOutput{})
	pulumi.RegisterOutputType(TemplateTablePinnedFieldOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateTableRowConditionalFormattingOutput{})
	pulumi.RegisterOutputType(TemplateTableRowConditionalFormattingPtrOutput{})
	pulumi.RegisterOutputType(TemplateTableSideBorderOptionsOutput{})
	pulumi.RegisterOutputType(TemplateTableSideBorderOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateTableSortConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateTableSortConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateTableStyleTargetOutput{})
	pulumi.RegisterOutputType(TemplateTableStyleTargetArrayOutput{})
	pulumi.RegisterOutputType(TemplateTableUnaggregatedFieldWellsOutput{})
	pulumi.RegisterOutputType(TemplateTableUnaggregatedFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(TemplateTableVisualOutput{})
	pulumi.RegisterOutputType(TemplateTableVisualPtrOutput{})
	pulumi.RegisterOutputType(TemplateTextAreaControlDisplayOptionsOutput{})
	pulumi.RegisterOutputType(TemplateTextAreaControlDisplayOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateTextConditionalFormatOutput{})
	pulumi.RegisterOutputType(TemplateTextConditionalFormatPtrOutput{})
	pulumi.RegisterOutputType(TemplateTextControlPlaceholderOptionsOutput{})
	pulumi.RegisterOutputType(TemplateTextControlPlaceholderOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateTextFieldControlDisplayOptionsOutput{})
	pulumi.RegisterOutputType(TemplateTextFieldControlDisplayOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateThousandSeparatorOptionsOutput{})
	pulumi.RegisterOutputType(TemplateThousandSeparatorOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateTimeBasedForecastPropertiesOutput{})
	pulumi.RegisterOutputType(TemplateTimeBasedForecastPropertiesPtrOutput{})
	pulumi.RegisterOutputType(TemplateTimeEqualityFilterOutput{})
	pulumi.RegisterOutputType(TemplateTimeEqualityFilterPtrOutput{})
	pulumi.RegisterOutputType(TemplateTimeRangeDrillDownFilterOutput{})
	pulumi.RegisterOutputType(TemplateTimeRangeDrillDownFilterPtrOutput{})
	pulumi.RegisterOutputType(TemplateTimeRangeFilterOutput{})
	pulumi.RegisterOutputType(TemplateTimeRangeFilterPtrOutput{})
	pulumi.RegisterOutputType(TemplateTimeRangeFilterValueOutput{})
	pulumi.RegisterOutputType(TemplateTimeRangeFilterValuePtrOutput{})
	pulumi.RegisterOutputType(TemplateTooltipItemOutput{})
	pulumi.RegisterOutputType(TemplateTooltipItemArrayOutput{})
	pulumi.RegisterOutputType(TemplateTooltipOptionsOutput{})
	pulumi.RegisterOutputType(TemplateTooltipOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateTopBottomFilterOutput{})
	pulumi.RegisterOutputType(TemplateTopBottomFilterPtrOutput{})
	pulumi.RegisterOutputType(TemplateTopBottomMoversComputationOutput{})
	pulumi.RegisterOutputType(TemplateTopBottomMoversComputationPtrOutput{})
	pulumi.RegisterOutputType(TemplateTopBottomRankedComputationOutput{})
	pulumi.RegisterOutputType(TemplateTopBottomRankedComputationPtrOutput{})
	pulumi.RegisterOutputType(TemplateTotalAggregationComputationOutput{})
	pulumi.RegisterOutputType(TemplateTotalAggregationComputationPtrOutput{})
	pulumi.RegisterOutputType(TemplateTotalAggregationFunctionOutput{})
	pulumi.RegisterOutputType(TemplateTotalAggregationOptionOutput{})
	pulumi.RegisterOutputType(TemplateTotalAggregationOptionArrayOutput{})
	pulumi.RegisterOutputType(TemplateTotalOptionsOutput{})
	pulumi.RegisterOutputType(TemplateTotalOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateTreeMapAggregatedFieldWellsOutput{})
	pulumi.RegisterOutputType(TemplateTreeMapAggregatedFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(TemplateTreeMapConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateTreeMapConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateTreeMapFieldWellsOutput{})
	pulumi.RegisterOutputType(TemplateTreeMapFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(TemplateTreeMapSortConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateTreeMapSortConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateTreeMapVisualOutput{})
	pulumi.RegisterOutputType(TemplateTreeMapVisualPtrOutput{})
	pulumi.RegisterOutputType(TemplateTrendArrowOptionsOutput{})
	pulumi.RegisterOutputType(TemplateTrendArrowOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateUnaggregatedFieldOutput{})
	pulumi.RegisterOutputType(TemplateUnaggregatedFieldArrayOutput{})
	pulumi.RegisterOutputType(TemplateUniqueValuesComputationOutput{})
	pulumi.RegisterOutputType(TemplateUniqueValuesComputationPtrOutput{})
	pulumi.RegisterOutputType(TemplateValidationStrategyOutput{})
	pulumi.RegisterOutputType(TemplateValidationStrategyPtrOutput{})
	pulumi.RegisterOutputType(TemplateVersionOutput{})
	pulumi.RegisterOutputType(TemplateVersionPtrOutput{})
	pulumi.RegisterOutputType(TemplateVersionDefinitionOutput{})
	pulumi.RegisterOutputType(TemplateVersionDefinitionPtrOutput{})
	pulumi.RegisterOutputType(TemplateVisibleRangeOptionsOutput{})
	pulumi.RegisterOutputType(TemplateVisibleRangeOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateVisualOutput{})
	pulumi.RegisterOutputType(TemplateVisualArrayOutput{})
	pulumi.RegisterOutputType(TemplateVisualCustomActionOutput{})
	pulumi.RegisterOutputType(TemplateVisualCustomActionArrayOutput{})
	pulumi.RegisterOutputType(TemplateVisualCustomActionOperationOutput{})
	pulumi.RegisterOutputType(TemplateVisualCustomActionOperationArrayOutput{})
	pulumi.RegisterOutputType(TemplateVisualPaletteOutput{})
	pulumi.RegisterOutputType(TemplateVisualPalettePtrOutput{})
	pulumi.RegisterOutputType(TemplateVisualSubtitleLabelOptionsOutput{})
	pulumi.RegisterOutputType(TemplateVisualSubtitleLabelOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateVisualTitleLabelOptionsOutput{})
	pulumi.RegisterOutputType(TemplateVisualTitleLabelOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateWaterfallChartAggregatedFieldWellsOutput{})
	pulumi.RegisterOutputType(TemplateWaterfallChartAggregatedFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(TemplateWaterfallChartColorConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateWaterfallChartColorConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateWaterfallChartConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateWaterfallChartConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateWaterfallChartFieldWellsOutput{})
	pulumi.RegisterOutputType(TemplateWaterfallChartFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(TemplateWaterfallChartGroupColorConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateWaterfallChartGroupColorConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateWaterfallChartOptionsOutput{})
	pulumi.RegisterOutputType(TemplateWaterfallChartOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateWaterfallChartSortConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateWaterfallChartSortConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateWaterfallVisualOutput{})
	pulumi.RegisterOutputType(TemplateWaterfallVisualPtrOutput{})
	pulumi.RegisterOutputType(TemplateWhatIfPointScenarioOutput{})
	pulumi.RegisterOutputType(TemplateWhatIfPointScenarioPtrOutput{})
	pulumi.RegisterOutputType(TemplateWhatIfRangeScenarioOutput{})
	pulumi.RegisterOutputType(TemplateWhatIfRangeScenarioPtrOutput{})
	pulumi.RegisterOutputType(TemplateWordCloudAggregatedFieldWellsOutput{})
	pulumi.RegisterOutputType(TemplateWordCloudAggregatedFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(TemplateWordCloudChartConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateWordCloudChartConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateWordCloudFieldWellsOutput{})
	pulumi.RegisterOutputType(TemplateWordCloudFieldWellsPtrOutput{})
	pulumi.RegisterOutputType(TemplateWordCloudOptionsOutput{})
	pulumi.RegisterOutputType(TemplateWordCloudOptionsPtrOutput{})
	pulumi.RegisterOutputType(TemplateWordCloudSortConfigurationOutput{})
	pulumi.RegisterOutputType(TemplateWordCloudSortConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TemplateWordCloudVisualOutput{})
	pulumi.RegisterOutputType(TemplateWordCloudVisualPtrOutput{})
	pulumi.RegisterOutputType(ThemeBorderStyleOutput{})
	pulumi.RegisterOutputType(ThemeBorderStylePtrOutput{})
	pulumi.RegisterOutputType(ThemeConfigurationOutput{})
	pulumi.RegisterOutputType(ThemeConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ThemeDataColorPaletteOutput{})
	pulumi.RegisterOutputType(ThemeDataColorPalettePtrOutput{})
	pulumi.RegisterOutputType(ThemeErrorOutput{})
	pulumi.RegisterOutputType(ThemeErrorArrayOutput{})
	pulumi.RegisterOutputType(ThemeFontOutput{})
	pulumi.RegisterOutputType(ThemeFontArrayOutput{})
	pulumi.RegisterOutputType(ThemeGutterStyleOutput{})
	pulumi.RegisterOutputType(ThemeGutterStylePtrOutput{})
	pulumi.RegisterOutputType(ThemeMarginStyleOutput{})
	pulumi.RegisterOutputType(ThemeMarginStylePtrOutput{})
	pulumi.RegisterOutputType(ThemeResourcePermissionOutput{})
	pulumi.RegisterOutputType(ThemeResourcePermissionArrayOutput{})
	pulumi.RegisterOutputType(ThemeSheetStyleOutput{})
	pulumi.RegisterOutputType(ThemeSheetStylePtrOutput{})
	pulumi.RegisterOutputType(ThemeTileLayoutStyleOutput{})
	pulumi.RegisterOutputType(ThemeTileLayoutStylePtrOutput{})
	pulumi.RegisterOutputType(ThemeTileStyleOutput{})
	pulumi.RegisterOutputType(ThemeTileStylePtrOutput{})
	pulumi.RegisterOutputType(ThemeTypographyOutput{})
	pulumi.RegisterOutputType(ThemeTypographyPtrOutput{})
	pulumi.RegisterOutputType(ThemeUiColorPaletteOutput{})
	pulumi.RegisterOutputType(ThemeUiColorPalettePtrOutput{})
	pulumi.RegisterOutputType(ThemeVersionOutput{})
	pulumi.RegisterOutputType(ThemeVersionPtrOutput{})
	pulumi.RegisterOutputType(TopicCalculatedFieldOutput{})
	pulumi.RegisterOutputType(TopicCalculatedFieldArrayOutput{})
	pulumi.RegisterOutputType(TopicCategoryFilterOutput{})
	pulumi.RegisterOutputType(TopicCategoryFilterPtrOutput{})
	pulumi.RegisterOutputType(TopicCategoryFilterConstantOutput{})
	pulumi.RegisterOutputType(TopicCategoryFilterConstantPtrOutput{})
	pulumi.RegisterOutputType(TopicCellValueSynonymOutput{})
	pulumi.RegisterOutputType(TopicCellValueSynonymArrayOutput{})
	pulumi.RegisterOutputType(TopicCollectiveConstantOutput{})
	pulumi.RegisterOutputType(TopicCollectiveConstantPtrOutput{})
	pulumi.RegisterOutputType(TopicColumnOutput{})
	pulumi.RegisterOutputType(TopicColumnArrayOutput{})
	pulumi.RegisterOutputType(TopicComparativeOrderOutput{})
	pulumi.RegisterOutputType(TopicComparativeOrderPtrOutput{})
	pulumi.RegisterOutputType(TopicDataAggregationOutput{})
	pulumi.RegisterOutputType(TopicDataAggregationPtrOutput{})
	pulumi.RegisterOutputType(TopicDatasetMetadataOutput{})
	pulumi.RegisterOutputType(TopicDatasetMetadataArrayOutput{})
	pulumi.RegisterOutputType(TopicDateRangeFilterOutput{})
	pulumi.RegisterOutputType(TopicDateRangeFilterPtrOutput{})
	pulumi.RegisterOutputType(TopicDefaultFormattingOutput{})
	pulumi.RegisterOutputType(TopicDefaultFormattingPtrOutput{})
	pulumi.RegisterOutputType(TopicDisplayFormatOptionsOutput{})
	pulumi.RegisterOutputType(TopicDisplayFormatOptionsPtrOutput{})
	pulumi.RegisterOutputType(TopicFilterOutput{})
	pulumi.RegisterOutputType(TopicFilterArrayOutput{})
	pulumi.RegisterOutputType(TopicNamedEntityOutput{})
	pulumi.RegisterOutputType(TopicNamedEntityArrayOutput{})
	pulumi.RegisterOutputType(TopicNamedEntityDefinitionOutput{})
	pulumi.RegisterOutputType(TopicNamedEntityDefinitionArrayOutput{})
	pulumi.RegisterOutputType(TopicNamedEntityDefinitionMetricOutput{})
	pulumi.RegisterOutputType(TopicNamedEntityDefinitionMetricPtrOutput{})
	pulumi.RegisterOutputType(TopicNegativeFormatOutput{})
	pulumi.RegisterOutputType(TopicNegativeFormatPtrOutput{})
	pulumi.RegisterOutputType(TopicNumericEqualityFilterOutput{})
	pulumi.RegisterOutputType(TopicNumericEqualityFilterPtrOutput{})
	pulumi.RegisterOutputType(TopicNumericRangeFilterOutput{})
	pulumi.RegisterOutputType(TopicNumericRangeFilterPtrOutput{})
	pulumi.RegisterOutputType(TopicRangeConstantOutput{})
	pulumi.RegisterOutputType(TopicRangeConstantPtrOutput{})
	pulumi.RegisterOutputType(TopicRangeFilterConstantOutput{})
	pulumi.RegisterOutputType(TopicRangeFilterConstantPtrOutput{})
	pulumi.RegisterOutputType(TopicRelativeDateFilterOutput{})
	pulumi.RegisterOutputType(TopicRelativeDateFilterPtrOutput{})
	pulumi.RegisterOutputType(TopicSemanticEntityTypeOutput{})
	pulumi.RegisterOutputType(TopicSemanticEntityTypePtrOutput{})
	pulumi.RegisterOutputType(TopicSemanticTypeOutput{})
	pulumi.RegisterOutputType(TopicSemanticTypePtrOutput{})
	pulumi.RegisterOutputType(TopicSingularFilterConstantOutput{})
	pulumi.RegisterOutputType(TopicSingularFilterConstantPtrOutput{})
	pulumi.RegisterOutputType(VpcConnectionNetworkInterfaceOutput{})
	pulumi.RegisterOutputType(VpcConnectionNetworkInterfaceArrayOutput{})
}
