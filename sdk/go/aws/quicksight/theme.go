// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package quicksight

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of the AWS::QuickSight::Theme Resource Type.
type Theme struct {
	pulumi.CustomResourceState

	Arn                pulumi.StringOutput                `pulumi:"arn"`
	AwsAccountId       pulumi.StringOutput                `pulumi:"awsAccountId"`
	BaseThemeId        pulumi.StringOutput                `pulumi:"baseThemeId"`
	Configuration      ThemeConfigurationOutput           `pulumi:"configuration"`
	CreatedTime        pulumi.StringOutput                `pulumi:"createdTime"`
	LastUpdatedTime    pulumi.StringOutput                `pulumi:"lastUpdatedTime"`
	Name               pulumi.StringOutput                `pulumi:"name"`
	Permissions        ThemeResourcePermissionArrayOutput `pulumi:"permissions"`
	Tags               ThemeTagArrayOutput                `pulumi:"tags"`
	ThemeId            pulumi.StringOutput                `pulumi:"themeId"`
	Type               ThemeTypeOutput                    `pulumi:"type"`
	Version            ThemeVersionOutput                 `pulumi:"version"`
	VersionDescription pulumi.StringPtrOutput             `pulumi:"versionDescription"`
}

// NewTheme registers a new resource with the given unique name, arguments, and options.
func NewTheme(ctx *pulumi.Context,
	name string, args *ThemeArgs, opts ...pulumi.ResourceOption) (*Theme, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AwsAccountId == nil {
		return nil, errors.New("invalid value for required argument 'AwsAccountId'")
	}
	if args.BaseThemeId == nil {
		return nil, errors.New("invalid value for required argument 'BaseThemeId'")
	}
	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.ThemeId == nil {
		return nil, errors.New("invalid value for required argument 'ThemeId'")
	}
	var resource Theme
	err := ctx.RegisterResource("aws-native:quicksight:Theme", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTheme gets an existing Theme resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTheme(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ThemeState, opts ...pulumi.ResourceOption) (*Theme, error) {
	var resource Theme
	err := ctx.ReadResource("aws-native:quicksight:Theme", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Theme resources.
type themeState struct {
}

type ThemeState struct {
}

func (ThemeState) ElementType() reflect.Type {
	return reflect.TypeOf((*themeState)(nil)).Elem()
}

type themeArgs struct {
	AwsAccountId       string                    `pulumi:"awsAccountId"`
	BaseThemeId        string                    `pulumi:"baseThemeId"`
	Configuration      ThemeConfiguration        `pulumi:"configuration"`
	Name               *string                   `pulumi:"name"`
	Permissions        []ThemeResourcePermission `pulumi:"permissions"`
	Tags               []ThemeTag                `pulumi:"tags"`
	ThemeId            string                    `pulumi:"themeId"`
	VersionDescription *string                   `pulumi:"versionDescription"`
}

// The set of arguments for constructing a Theme resource.
type ThemeArgs struct {
	AwsAccountId       pulumi.StringInput
	BaseThemeId        pulumi.StringInput
	Configuration      ThemeConfigurationInput
	Name               pulumi.StringPtrInput
	Permissions        ThemeResourcePermissionArrayInput
	Tags               ThemeTagArrayInput
	ThemeId            pulumi.StringInput
	VersionDescription pulumi.StringPtrInput
}

func (ThemeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*themeArgs)(nil)).Elem()
}

type ThemeInput interface {
	pulumi.Input

	ToThemeOutput() ThemeOutput
	ToThemeOutputWithContext(ctx context.Context) ThemeOutput
}

func (*Theme) ElementType() reflect.Type {
	return reflect.TypeOf((**Theme)(nil)).Elem()
}

func (i *Theme) ToThemeOutput() ThemeOutput {
	return i.ToThemeOutputWithContext(context.Background())
}

func (i *Theme) ToThemeOutputWithContext(ctx context.Context) ThemeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThemeOutput)
}

type ThemeOutput struct{ *pulumi.OutputState }

func (ThemeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Theme)(nil)).Elem()
}

func (o ThemeOutput) ToThemeOutput() ThemeOutput {
	return o
}

func (o ThemeOutput) ToThemeOutputWithContext(ctx context.Context) ThemeOutput {
	return o
}

func (o ThemeOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Theme) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o ThemeOutput) AwsAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *Theme) pulumi.StringOutput { return v.AwsAccountId }).(pulumi.StringOutput)
}

func (o ThemeOutput) BaseThemeId() pulumi.StringOutput {
	return o.ApplyT(func(v *Theme) pulumi.StringOutput { return v.BaseThemeId }).(pulumi.StringOutput)
}

func (o ThemeOutput) Configuration() ThemeConfigurationOutput {
	return o.ApplyT(func(v *Theme) ThemeConfigurationOutput { return v.Configuration }).(ThemeConfigurationOutput)
}

func (o ThemeOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Theme) pulumi.StringOutput { return v.CreatedTime }).(pulumi.StringOutput)
}

func (o ThemeOutput) LastUpdatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Theme) pulumi.StringOutput { return v.LastUpdatedTime }).(pulumi.StringOutput)
}

func (o ThemeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Theme) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ThemeOutput) Permissions() ThemeResourcePermissionArrayOutput {
	return o.ApplyT(func(v *Theme) ThemeResourcePermissionArrayOutput { return v.Permissions }).(ThemeResourcePermissionArrayOutput)
}

func (o ThemeOutput) Tags() ThemeTagArrayOutput {
	return o.ApplyT(func(v *Theme) ThemeTagArrayOutput { return v.Tags }).(ThemeTagArrayOutput)
}

func (o ThemeOutput) ThemeId() pulumi.StringOutput {
	return o.ApplyT(func(v *Theme) pulumi.StringOutput { return v.ThemeId }).(pulumi.StringOutput)
}

func (o ThemeOutput) Type() ThemeTypeOutput {
	return o.ApplyT(func(v *Theme) ThemeTypeOutput { return v.Type }).(ThemeTypeOutput)
}

func (o ThemeOutput) Version() ThemeVersionOutput {
	return o.ApplyT(func(v *Theme) ThemeVersionOutput { return v.Version }).(ThemeVersionOutput)
}

func (o ThemeOutput) VersionDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Theme) pulumi.StringPtrOutput { return v.VersionDescription }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ThemeInput)(nil)).Elem(), &Theme{})
	pulumi.RegisterOutputType(ThemeOutput{})
}
