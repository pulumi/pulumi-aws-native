// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package quicksight

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of the AWS::QuickSight::Dashboard Resource Type.
type Dashboard struct {
	pulumi.CustomResourceState

	// <p>The Amazon Resource Name (ARN) of the resource.</p>
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The ID of the AWS account where you want to create the dashboard.
	AwsAccountId pulumi.StringOutput `pulumi:"awsAccountId"`
	// <p>The time that this dashboard was created.</p>
	CreatedTime pulumi.StringOutput `pulumi:"createdTime"`
	// The ID for the dashboard, also added to the IAM policy.
	DashboardId pulumi.StringOutput `pulumi:"dashboardId"`
	// Options for publishing the dashboard when you create it:
	//
	// - `AvailabilityStatus` for `AdHocFilteringOption` - This status can be either `ENABLED` or `DISABLED` . When this is set to `DISABLED` , Amazon QuickSight disables the left filter pane on the published dashboard, which can be used for ad hoc (one-time) filtering. This option is `ENABLED` by default.
	// - `AvailabilityStatus` for `ExportToCSVOption` - This status can be either `ENABLED` or `DISABLED` . The visual option to export data to .CSV format isn't enabled when this is set to `DISABLED` . This option is `ENABLED` by default.
	// - `VisibilityState` for `SheetControlsOption` - This visibility state can be either `COLLAPSED` or `EXPANDED` . This option is `COLLAPSED` by default.
	DashboardPublishOptions DashboardPublishOptionsPtrOutput    `pulumi:"dashboardPublishOptions"`
	Definition              DashboardVersionDefinitionPtrOutput `pulumi:"definition"`
	FolderArns              pulumi.StringArrayOutput            `pulumi:"folderArns"`
	// <p>The last time that this dashboard was published.</p>
	LastPublishedTime pulumi.StringOutput `pulumi:"lastPublishedTime"`
	// <p>The last time that this dashboard was updated.</p>
	LastUpdatedTime pulumi.StringOutput `pulumi:"lastUpdatedTime"`
	// A list of analysis Amazon Resource Names (ARNs) to be linked to the dashboard.
	LinkEntities pulumi.StringArrayOutput `pulumi:"linkEntities"`
	// A structure that contains the link sharing configurations that you want to apply overrides to.
	LinkSharingConfiguration DashboardLinkSharingConfigurationPtrOutput `pulumi:"linkSharingConfiguration"`
	// The display name of the dashboard.
	Name pulumi.StringOutput `pulumi:"name"`
	// The parameters for the creation of the dashboard, which you want to use to override the default settings. A dashboard can have any type of parameters, and some parameters might accept multiple values.
	Parameters DashboardParametersPtrOutput `pulumi:"parameters"`
	// A structure that contains the permissions of the dashboard. You can use this structure for granting permissions by providing a list of IAM action information for each principal ARN.
	//
	// To specify no permissions, omit the permissions list.
	Permissions DashboardResourcePermissionArrayOutput `pulumi:"permissions"`
	// The entity that you are using as a source when you create the dashboard. In `SourceEntity` , you specify the type of object that you want to use. You can only create a dashboard from a template, so you use a `SourceTemplate` entity. If you need to create a dashboard from an analysis, first convert the analysis to a template by using the `CreateTemplate` API operation. For `SourceTemplate` , specify the Amazon Resource Name (ARN) of the source template. The `SourceTemplate` ARN can contain any AWS account; and any QuickSight-supported AWS Region .
	//
	// Use the `DataSetReferences` entity within `SourceTemplate` to list the replacement datasets for the placeholders listed in the original. The schema in each dataset must match its placeholder.
	SourceEntity DashboardSourceEntityPtrOutput `pulumi:"sourceEntity"`
	// Contains a map of the key-value pairs for the resource tag or tags assigned to the dashboard.
	Tags aws.TagArrayOutput `pulumi:"tags"`
	// The Amazon Resource Name (ARN) of the theme that is being used for this dashboard. If you add a value for this field, it overrides the value that is used in the source entity. The theme ARN must exist in the same AWS account where you create the dashboard.
	ThemeArn pulumi.StringPtrOutput `pulumi:"themeArn"`
	// The option to relax the validation that is required to create and update analyses, dashboards, and templates with definition objects. When you set this value to `LENIENT` , validation is skipped for specific errors.
	ValidationStrategy DashboardValidationStrategyPtrOutput `pulumi:"validationStrategy"`
	Version            DashboardVersionOutput               `pulumi:"version"`
	// A description for the first version of the dashboard being created.
	VersionDescription pulumi.StringPtrOutput `pulumi:"versionDescription"`
}

// NewDashboard registers a new resource with the given unique name, arguments, and options.
func NewDashboard(ctx *pulumi.Context,
	name string, args *DashboardArgs, opts ...pulumi.ResourceOption) (*Dashboard, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AwsAccountId == nil {
		return nil, errors.New("invalid value for required argument 'AwsAccountId'")
	}
	if args.DashboardId == nil {
		return nil, errors.New("invalid value for required argument 'DashboardId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"awsAccountId",
		"dashboardId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Dashboard
	err := ctx.RegisterResource("aws-native:quicksight:Dashboard", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDashboard gets an existing Dashboard resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDashboard(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DashboardState, opts ...pulumi.ResourceOption) (*Dashboard, error) {
	var resource Dashboard
	err := ctx.ReadResource("aws-native:quicksight:Dashboard", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Dashboard resources.
type dashboardState struct {
}

type DashboardState struct {
}

func (DashboardState) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardState)(nil)).Elem()
}

type dashboardArgs struct {
	// The ID of the AWS account where you want to create the dashboard.
	AwsAccountId string `pulumi:"awsAccountId"`
	// The ID for the dashboard, also added to the IAM policy.
	DashboardId string `pulumi:"dashboardId"`
	// Options for publishing the dashboard when you create it:
	//
	// - `AvailabilityStatus` for `AdHocFilteringOption` - This status can be either `ENABLED` or `DISABLED` . When this is set to `DISABLED` , Amazon QuickSight disables the left filter pane on the published dashboard, which can be used for ad hoc (one-time) filtering. This option is `ENABLED` by default.
	// - `AvailabilityStatus` for `ExportToCSVOption` - This status can be either `ENABLED` or `DISABLED` . The visual option to export data to .CSV format isn't enabled when this is set to `DISABLED` . This option is `ENABLED` by default.
	// - `VisibilityState` for `SheetControlsOption` - This visibility state can be either `COLLAPSED` or `EXPANDED` . This option is `COLLAPSED` by default.
	DashboardPublishOptions *DashboardPublishOptions    `pulumi:"dashboardPublishOptions"`
	Definition              *DashboardVersionDefinition `pulumi:"definition"`
	FolderArns              []string                    `pulumi:"folderArns"`
	// A list of analysis Amazon Resource Names (ARNs) to be linked to the dashboard.
	LinkEntities []string `pulumi:"linkEntities"`
	// A structure that contains the link sharing configurations that you want to apply overrides to.
	LinkSharingConfiguration *DashboardLinkSharingConfiguration `pulumi:"linkSharingConfiguration"`
	// The display name of the dashboard.
	Name *string `pulumi:"name"`
	// The parameters for the creation of the dashboard, which you want to use to override the default settings. A dashboard can have any type of parameters, and some parameters might accept multiple values.
	Parameters *DashboardParameters `pulumi:"parameters"`
	// A structure that contains the permissions of the dashboard. You can use this structure for granting permissions by providing a list of IAM action information for each principal ARN.
	//
	// To specify no permissions, omit the permissions list.
	Permissions []DashboardResourcePermission `pulumi:"permissions"`
	// The entity that you are using as a source when you create the dashboard. In `SourceEntity` , you specify the type of object that you want to use. You can only create a dashboard from a template, so you use a `SourceTemplate` entity. If you need to create a dashboard from an analysis, first convert the analysis to a template by using the `CreateTemplate` API operation. For `SourceTemplate` , specify the Amazon Resource Name (ARN) of the source template. The `SourceTemplate` ARN can contain any AWS account; and any QuickSight-supported AWS Region .
	//
	// Use the `DataSetReferences` entity within `SourceTemplate` to list the replacement datasets for the placeholders listed in the original. The schema in each dataset must match its placeholder.
	SourceEntity *DashboardSourceEntity `pulumi:"sourceEntity"`
	// Contains a map of the key-value pairs for the resource tag or tags assigned to the dashboard.
	Tags []aws.Tag `pulumi:"tags"`
	// The Amazon Resource Name (ARN) of the theme that is being used for this dashboard. If you add a value for this field, it overrides the value that is used in the source entity. The theme ARN must exist in the same AWS account where you create the dashboard.
	ThemeArn *string `pulumi:"themeArn"`
	// The option to relax the validation that is required to create and update analyses, dashboards, and templates with definition objects. When you set this value to `LENIENT` , validation is skipped for specific errors.
	ValidationStrategy *DashboardValidationStrategy `pulumi:"validationStrategy"`
	// A description for the first version of the dashboard being created.
	VersionDescription *string `pulumi:"versionDescription"`
}

// The set of arguments for constructing a Dashboard resource.
type DashboardArgs struct {
	// The ID of the AWS account where you want to create the dashboard.
	AwsAccountId pulumi.StringInput
	// The ID for the dashboard, also added to the IAM policy.
	DashboardId pulumi.StringInput
	// Options for publishing the dashboard when you create it:
	//
	// - `AvailabilityStatus` for `AdHocFilteringOption` - This status can be either `ENABLED` or `DISABLED` . When this is set to `DISABLED` , Amazon QuickSight disables the left filter pane on the published dashboard, which can be used for ad hoc (one-time) filtering. This option is `ENABLED` by default.
	// - `AvailabilityStatus` for `ExportToCSVOption` - This status can be either `ENABLED` or `DISABLED` . The visual option to export data to .CSV format isn't enabled when this is set to `DISABLED` . This option is `ENABLED` by default.
	// - `VisibilityState` for `SheetControlsOption` - This visibility state can be either `COLLAPSED` or `EXPANDED` . This option is `COLLAPSED` by default.
	DashboardPublishOptions DashboardPublishOptionsPtrInput
	Definition              DashboardVersionDefinitionPtrInput
	FolderArns              pulumi.StringArrayInput
	// A list of analysis Amazon Resource Names (ARNs) to be linked to the dashboard.
	LinkEntities pulumi.StringArrayInput
	// A structure that contains the link sharing configurations that you want to apply overrides to.
	LinkSharingConfiguration DashboardLinkSharingConfigurationPtrInput
	// The display name of the dashboard.
	Name pulumi.StringPtrInput
	// The parameters for the creation of the dashboard, which you want to use to override the default settings. A dashboard can have any type of parameters, and some parameters might accept multiple values.
	Parameters DashboardParametersPtrInput
	// A structure that contains the permissions of the dashboard. You can use this structure for granting permissions by providing a list of IAM action information for each principal ARN.
	//
	// To specify no permissions, omit the permissions list.
	Permissions DashboardResourcePermissionArrayInput
	// The entity that you are using as a source when you create the dashboard. In `SourceEntity` , you specify the type of object that you want to use. You can only create a dashboard from a template, so you use a `SourceTemplate` entity. If you need to create a dashboard from an analysis, first convert the analysis to a template by using the `CreateTemplate` API operation. For `SourceTemplate` , specify the Amazon Resource Name (ARN) of the source template. The `SourceTemplate` ARN can contain any AWS account; and any QuickSight-supported AWS Region .
	//
	// Use the `DataSetReferences` entity within `SourceTemplate` to list the replacement datasets for the placeholders listed in the original. The schema in each dataset must match its placeholder.
	SourceEntity DashboardSourceEntityPtrInput
	// Contains a map of the key-value pairs for the resource tag or tags assigned to the dashboard.
	Tags aws.TagArrayInput
	// The Amazon Resource Name (ARN) of the theme that is being used for this dashboard. If you add a value for this field, it overrides the value that is used in the source entity. The theme ARN must exist in the same AWS account where you create the dashboard.
	ThemeArn pulumi.StringPtrInput
	// The option to relax the validation that is required to create and update analyses, dashboards, and templates with definition objects. When you set this value to `LENIENT` , validation is skipped for specific errors.
	ValidationStrategy DashboardValidationStrategyPtrInput
	// A description for the first version of the dashboard being created.
	VersionDescription pulumi.StringPtrInput
}

func (DashboardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardArgs)(nil)).Elem()
}

type DashboardInput interface {
	pulumi.Input

	ToDashboardOutput() DashboardOutput
	ToDashboardOutputWithContext(ctx context.Context) DashboardOutput
}

func (*Dashboard) ElementType() reflect.Type {
	return reflect.TypeOf((**Dashboard)(nil)).Elem()
}

func (i *Dashboard) ToDashboardOutput() DashboardOutput {
	return i.ToDashboardOutputWithContext(context.Background())
}

func (i *Dashboard) ToDashboardOutputWithContext(ctx context.Context) DashboardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardOutput)
}

type DashboardOutput struct{ *pulumi.OutputState }

func (DashboardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Dashboard)(nil)).Elem()
}

func (o DashboardOutput) ToDashboardOutput() DashboardOutput {
	return o
}

func (o DashboardOutput) ToDashboardOutputWithContext(ctx context.Context) DashboardOutput {
	return o
}

// <p>The Amazon Resource Name (ARN) of the resource.</p>
func (o DashboardOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The ID of the AWS account where you want to create the dashboard.
func (o DashboardOutput) AwsAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.AwsAccountId }).(pulumi.StringOutput)
}

// <p>The time that this dashboard was created.</p>
func (o DashboardOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.CreatedTime }).(pulumi.StringOutput)
}

// The ID for the dashboard, also added to the IAM policy.
func (o DashboardOutput) DashboardId() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.DashboardId }).(pulumi.StringOutput)
}

// Options for publishing the dashboard when you create it:
//
// - `AvailabilityStatus` for `AdHocFilteringOption` - This status can be either `ENABLED` or `DISABLED` . When this is set to `DISABLED` , Amazon QuickSight disables the left filter pane on the published dashboard, which can be used for ad hoc (one-time) filtering. This option is `ENABLED` by default.
// - `AvailabilityStatus` for `ExportToCSVOption` - This status can be either `ENABLED` or `DISABLED` . The visual option to export data to .CSV format isn't enabled when this is set to `DISABLED` . This option is `ENABLED` by default.
// - `VisibilityState` for `SheetControlsOption` - This visibility state can be either `COLLAPSED` or `EXPANDED` . This option is `COLLAPSED` by default.
func (o DashboardOutput) DashboardPublishOptions() DashboardPublishOptionsPtrOutput {
	return o.ApplyT(func(v *Dashboard) DashboardPublishOptionsPtrOutput { return v.DashboardPublishOptions }).(DashboardPublishOptionsPtrOutput)
}

func (o DashboardOutput) Definition() DashboardVersionDefinitionPtrOutput {
	return o.ApplyT(func(v *Dashboard) DashboardVersionDefinitionPtrOutput { return v.Definition }).(DashboardVersionDefinitionPtrOutput)
}

func (o DashboardOutput) FolderArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringArrayOutput { return v.FolderArns }).(pulumi.StringArrayOutput)
}

// <p>The last time that this dashboard was published.</p>
func (o DashboardOutput) LastPublishedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.LastPublishedTime }).(pulumi.StringOutput)
}

// <p>The last time that this dashboard was updated.</p>
func (o DashboardOutput) LastUpdatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.LastUpdatedTime }).(pulumi.StringOutput)
}

// A list of analysis Amazon Resource Names (ARNs) to be linked to the dashboard.
func (o DashboardOutput) LinkEntities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringArrayOutput { return v.LinkEntities }).(pulumi.StringArrayOutput)
}

// A structure that contains the link sharing configurations that you want to apply overrides to.
func (o DashboardOutput) LinkSharingConfiguration() DashboardLinkSharingConfigurationPtrOutput {
	return o.ApplyT(func(v *Dashboard) DashboardLinkSharingConfigurationPtrOutput { return v.LinkSharingConfiguration }).(DashboardLinkSharingConfigurationPtrOutput)
}

// The display name of the dashboard.
func (o DashboardOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The parameters for the creation of the dashboard, which you want to use to override the default settings. A dashboard can have any type of parameters, and some parameters might accept multiple values.
func (o DashboardOutput) Parameters() DashboardParametersPtrOutput {
	return o.ApplyT(func(v *Dashboard) DashboardParametersPtrOutput { return v.Parameters }).(DashboardParametersPtrOutput)
}

// A structure that contains the permissions of the dashboard. You can use this structure for granting permissions by providing a list of IAM action information for each principal ARN.
//
// To specify no permissions, omit the permissions list.
func (o DashboardOutput) Permissions() DashboardResourcePermissionArrayOutput {
	return o.ApplyT(func(v *Dashboard) DashboardResourcePermissionArrayOutput { return v.Permissions }).(DashboardResourcePermissionArrayOutput)
}

// The entity that you are using as a source when you create the dashboard. In `SourceEntity` , you specify the type of object that you want to use. You can only create a dashboard from a template, so you use a `SourceTemplate` entity. If you need to create a dashboard from an analysis, first convert the analysis to a template by using the `CreateTemplate` API operation. For `SourceTemplate` , specify the Amazon Resource Name (ARN) of the source template. The `SourceTemplate` ARN can contain any AWS account; and any QuickSight-supported AWS Region .
//
// Use the `DataSetReferences` entity within `SourceTemplate` to list the replacement datasets for the placeholders listed in the original. The schema in each dataset must match its placeholder.
func (o DashboardOutput) SourceEntity() DashboardSourceEntityPtrOutput {
	return o.ApplyT(func(v *Dashboard) DashboardSourceEntityPtrOutput { return v.SourceEntity }).(DashboardSourceEntityPtrOutput)
}

// Contains a map of the key-value pairs for the resource tag or tags assigned to the dashboard.
func (o DashboardOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Dashboard) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

// The Amazon Resource Name (ARN) of the theme that is being used for this dashboard. If you add a value for this field, it overrides the value that is used in the source entity. The theme ARN must exist in the same AWS account where you create the dashboard.
func (o DashboardOutput) ThemeArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringPtrOutput { return v.ThemeArn }).(pulumi.StringPtrOutput)
}

// The option to relax the validation that is required to create and update analyses, dashboards, and templates with definition objects. When you set this value to `LENIENT` , validation is skipped for specific errors.
func (o DashboardOutput) ValidationStrategy() DashboardValidationStrategyPtrOutput {
	return o.ApplyT(func(v *Dashboard) DashboardValidationStrategyPtrOutput { return v.ValidationStrategy }).(DashboardValidationStrategyPtrOutput)
}

func (o DashboardOutput) Version() DashboardVersionOutput {
	return o.ApplyT(func(v *Dashboard) DashboardVersionOutput { return v.Version }).(DashboardVersionOutput)
}

// A description for the first version of the dashboard being created.
func (o DashboardOutput) VersionDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringPtrOutput { return v.VersionDescription }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardInput)(nil)).Elem(), &Dashboard{})
	pulumi.RegisterOutputType(DashboardOutput{})
}
