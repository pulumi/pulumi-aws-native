// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package quicksight

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of the AWS::QuickSight::Dashboard Resource Type.
type Dashboard struct {
	pulumi.CustomResourceState

	Arn                      pulumi.StringOutput                        `pulumi:"arn"`
	AwsAccountId             pulumi.StringOutput                        `pulumi:"awsAccountId"`
	CreatedTime              pulumi.StringOutput                        `pulumi:"createdTime"`
	DashboardId              pulumi.StringOutput                        `pulumi:"dashboardId"`
	DashboardPublishOptions  DashboardPublishOptionsPtrOutput           `pulumi:"dashboardPublishOptions"`
	Definition               DashboardVersionDefinitionPtrOutput        `pulumi:"definition"`
	LastPublishedTime        pulumi.StringOutput                        `pulumi:"lastPublishedTime"`
	LastUpdatedTime          pulumi.StringOutput                        `pulumi:"lastUpdatedTime"`
	LinkEntities             pulumi.StringArrayOutput                   `pulumi:"linkEntities"`
	LinkSharingConfiguration DashboardLinkSharingConfigurationPtrOutput `pulumi:"linkSharingConfiguration"`
	Name                     pulumi.StringOutput                        `pulumi:"name"`
	Parameters               DashboardParametersPtrOutput               `pulumi:"parameters"`
	Permissions              DashboardResourcePermissionArrayOutput     `pulumi:"permissions"`
	SourceEntity             DashboardSourceEntityPtrOutput             `pulumi:"sourceEntity"`
	Tags                     aws.TagArrayOutput                         `pulumi:"tags"`
	ThemeArn                 pulumi.StringPtrOutput                     `pulumi:"themeArn"`
	ValidationStrategy       DashboardValidationStrategyPtrOutput       `pulumi:"validationStrategy"`
	Version                  DashboardVersionOutput                     `pulumi:"version"`
	VersionDescription       pulumi.StringPtrOutput                     `pulumi:"versionDescription"`
}

// NewDashboard registers a new resource with the given unique name, arguments, and options.
func NewDashboard(ctx *pulumi.Context,
	name string, args *DashboardArgs, opts ...pulumi.ResourceOption) (*Dashboard, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AwsAccountId == nil {
		return nil, errors.New("invalid value for required argument 'AwsAccountId'")
	}
	if args.DashboardId == nil {
		return nil, errors.New("invalid value for required argument 'DashboardId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"awsAccountId",
		"dashboardId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Dashboard
	err := ctx.RegisterResource("aws-native:quicksight:Dashboard", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDashboard gets an existing Dashboard resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDashboard(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DashboardState, opts ...pulumi.ResourceOption) (*Dashboard, error) {
	var resource Dashboard
	err := ctx.ReadResource("aws-native:quicksight:Dashboard", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Dashboard resources.
type dashboardState struct {
}

type DashboardState struct {
}

func (DashboardState) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardState)(nil)).Elem()
}

type dashboardArgs struct {
	AwsAccountId             string                             `pulumi:"awsAccountId"`
	DashboardId              string                             `pulumi:"dashboardId"`
	DashboardPublishOptions  *DashboardPublishOptions           `pulumi:"dashboardPublishOptions"`
	Definition               *DashboardVersionDefinition        `pulumi:"definition"`
	LinkEntities             []string                           `pulumi:"linkEntities"`
	LinkSharingConfiguration *DashboardLinkSharingConfiguration `pulumi:"linkSharingConfiguration"`
	Name                     *string                            `pulumi:"name"`
	Parameters               *DashboardParameters               `pulumi:"parameters"`
	Permissions              []DashboardResourcePermission      `pulumi:"permissions"`
	SourceEntity             *DashboardSourceEntity             `pulumi:"sourceEntity"`
	Tags                     []aws.Tag                          `pulumi:"tags"`
	ThemeArn                 *string                            `pulumi:"themeArn"`
	ValidationStrategy       *DashboardValidationStrategy       `pulumi:"validationStrategy"`
	VersionDescription       *string                            `pulumi:"versionDescription"`
}

// The set of arguments for constructing a Dashboard resource.
type DashboardArgs struct {
	AwsAccountId             pulumi.StringInput
	DashboardId              pulumi.StringInput
	DashboardPublishOptions  DashboardPublishOptionsPtrInput
	Definition               DashboardVersionDefinitionPtrInput
	LinkEntities             pulumi.StringArrayInput
	LinkSharingConfiguration DashboardLinkSharingConfigurationPtrInput
	Name                     pulumi.StringPtrInput
	Parameters               DashboardParametersPtrInput
	Permissions              DashboardResourcePermissionArrayInput
	SourceEntity             DashboardSourceEntityPtrInput
	Tags                     aws.TagArrayInput
	ThemeArn                 pulumi.StringPtrInput
	ValidationStrategy       DashboardValidationStrategyPtrInput
	VersionDescription       pulumi.StringPtrInput
}

func (DashboardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardArgs)(nil)).Elem()
}

type DashboardInput interface {
	pulumi.Input

	ToDashboardOutput() DashboardOutput
	ToDashboardOutputWithContext(ctx context.Context) DashboardOutput
}

func (*Dashboard) ElementType() reflect.Type {
	return reflect.TypeOf((**Dashboard)(nil)).Elem()
}

func (i *Dashboard) ToDashboardOutput() DashboardOutput {
	return i.ToDashboardOutputWithContext(context.Background())
}

func (i *Dashboard) ToDashboardOutputWithContext(ctx context.Context) DashboardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardOutput)
}

type DashboardOutput struct{ *pulumi.OutputState }

func (DashboardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Dashboard)(nil)).Elem()
}

func (o DashboardOutput) ToDashboardOutput() DashboardOutput {
	return o
}

func (o DashboardOutput) ToDashboardOutputWithContext(ctx context.Context) DashboardOutput {
	return o
}

func (o DashboardOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o DashboardOutput) AwsAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.AwsAccountId }).(pulumi.StringOutput)
}

func (o DashboardOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.CreatedTime }).(pulumi.StringOutput)
}

func (o DashboardOutput) DashboardId() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.DashboardId }).(pulumi.StringOutput)
}

func (o DashboardOutput) DashboardPublishOptions() DashboardPublishOptionsPtrOutput {
	return o.ApplyT(func(v *Dashboard) DashboardPublishOptionsPtrOutput { return v.DashboardPublishOptions }).(DashboardPublishOptionsPtrOutput)
}

func (o DashboardOutput) Definition() DashboardVersionDefinitionPtrOutput {
	return o.ApplyT(func(v *Dashboard) DashboardVersionDefinitionPtrOutput { return v.Definition }).(DashboardVersionDefinitionPtrOutput)
}

func (o DashboardOutput) LastPublishedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.LastPublishedTime }).(pulumi.StringOutput)
}

func (o DashboardOutput) LastUpdatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.LastUpdatedTime }).(pulumi.StringOutput)
}

func (o DashboardOutput) LinkEntities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringArrayOutput { return v.LinkEntities }).(pulumi.StringArrayOutput)
}

func (o DashboardOutput) LinkSharingConfiguration() DashboardLinkSharingConfigurationPtrOutput {
	return o.ApplyT(func(v *Dashboard) DashboardLinkSharingConfigurationPtrOutput { return v.LinkSharingConfiguration }).(DashboardLinkSharingConfigurationPtrOutput)
}

func (o DashboardOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DashboardOutput) Parameters() DashboardParametersPtrOutput {
	return o.ApplyT(func(v *Dashboard) DashboardParametersPtrOutput { return v.Parameters }).(DashboardParametersPtrOutput)
}

func (o DashboardOutput) Permissions() DashboardResourcePermissionArrayOutput {
	return o.ApplyT(func(v *Dashboard) DashboardResourcePermissionArrayOutput { return v.Permissions }).(DashboardResourcePermissionArrayOutput)
}

func (o DashboardOutput) SourceEntity() DashboardSourceEntityPtrOutput {
	return o.ApplyT(func(v *Dashboard) DashboardSourceEntityPtrOutput { return v.SourceEntity }).(DashboardSourceEntityPtrOutput)
}

func (o DashboardOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Dashboard) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func (o DashboardOutput) ThemeArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringPtrOutput { return v.ThemeArn }).(pulumi.StringPtrOutput)
}

func (o DashboardOutput) ValidationStrategy() DashboardValidationStrategyPtrOutput {
	return o.ApplyT(func(v *Dashboard) DashboardValidationStrategyPtrOutput { return v.ValidationStrategy }).(DashboardValidationStrategyPtrOutput)
}

func (o DashboardOutput) Version() DashboardVersionOutput {
	return o.ApplyT(func(v *Dashboard) DashboardVersionOutput { return v.Version }).(DashboardVersionOutput)
}

func (o DashboardOutput) VersionDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringPtrOutput { return v.VersionDescription }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardInput)(nil)).Elem(), &Dashboard{})
	pulumi.RegisterOutputType(DashboardOutput{})
}
