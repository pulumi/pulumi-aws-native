// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package quicksight

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of the AWS::QuickSight::DataSet Resource Type.
func LookupDataSet(ctx *pulumi.Context, args *LookupDataSetArgs, opts ...pulumi.InvokeOption) (*LookupDataSetResult, error) {
	var rv LookupDataSetResult
	err := ctx.Invoke("aws-native:quicksight:getDataSet", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupDataSetArgs struct {
	AwsAccountId string `pulumi:"awsAccountId"`
	DataSetId    string `pulumi:"dataSetId"`
}

type LookupDataSetResult struct {
	// <p>The Amazon Resource Name (ARN) of the resource.</p>
	Arn *string `pulumi:"arn"`
	// <p>Groupings of columns that work together in certain QuickSight features. Currently, only geospatial hierarchy is supported.</p>
	ColumnGroups               []DataSetColumnGroup               `pulumi:"columnGroups"`
	ColumnLevelPermissionRules []DataSetColumnLevelPermissionRule `pulumi:"columnLevelPermissionRules"`
	// <p>The amount of SPICE capacity used by this dataset. This is 0 if the dataset isn't
	//             imported into SPICE.</p>
	ConsumedSpiceCapacityInBytes *float64 `pulumi:"consumedSpiceCapacityInBytes"`
	// <p>The time that this dataset was created.</p>
	CreatedTime *string            `pulumi:"createdTime"`
	ImportMode  *DataSetImportMode `pulumi:"importMode"`
	// <p>The last time that this dataset was updated.</p>
	LastUpdatedTime *string                 `pulumi:"lastUpdatedTime"`
	LogicalTableMap *DataSetLogicalTableMap `pulumi:"logicalTableMap"`
	// <p>The display name for the dataset.</p>
	Name *string `pulumi:"name"`
	// <p>The list of columns after all transforms. These columns are available in templates,
	//             analyses, and dashboards.</p>
	OutputColumns []DataSetOutputColumn `pulumi:"outputColumns"`
	// <p>A list of resource permissions on the dataset.</p>
	Permissions               []DataSetResourcePermission       `pulumi:"permissions"`
	PhysicalTableMap          *DataSetPhysicalTableMap          `pulumi:"physicalTableMap"`
	RowLevelPermissionDataSet *DataSetRowLevelPermissionDataSet `pulumi:"rowLevelPermissionDataSet"`
	// <p>Contains a map of the key-value pairs for the resource tag or tags assigned to the dataset.</p>
	Tags []DataSetTag `pulumi:"tags"`
}

func LookupDataSetOutput(ctx *pulumi.Context, args LookupDataSetOutputArgs, opts ...pulumi.InvokeOption) LookupDataSetResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDataSetResult, error) {
			args := v.(LookupDataSetArgs)
			r, err := LookupDataSet(ctx, &args, opts...)
			return *r, err
		}).(LookupDataSetResultOutput)
}

type LookupDataSetOutputArgs struct {
	AwsAccountId pulumi.StringInput `pulumi:"awsAccountId"`
	DataSetId    pulumi.StringInput `pulumi:"dataSetId"`
}

func (LookupDataSetOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDataSetArgs)(nil)).Elem()
}

type LookupDataSetResultOutput struct{ *pulumi.OutputState }

func (LookupDataSetResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDataSetResult)(nil)).Elem()
}

func (o LookupDataSetResultOutput) ToLookupDataSetResultOutput() LookupDataSetResultOutput {
	return o
}

func (o LookupDataSetResultOutput) ToLookupDataSetResultOutputWithContext(ctx context.Context) LookupDataSetResultOutput {
	return o
}

// <p>The Amazon Resource Name (ARN) of the resource.</p>
func (o LookupDataSetResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDataSetResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// <p>Groupings of columns that work together in certain QuickSight features. Currently, only geospatial hierarchy is supported.</p>
func (o LookupDataSetResultOutput) ColumnGroups() DataSetColumnGroupArrayOutput {
	return o.ApplyT(func(v LookupDataSetResult) []DataSetColumnGroup { return v.ColumnGroups }).(DataSetColumnGroupArrayOutput)
}

func (o LookupDataSetResultOutput) ColumnLevelPermissionRules() DataSetColumnLevelPermissionRuleArrayOutput {
	return o.ApplyT(func(v LookupDataSetResult) []DataSetColumnLevelPermissionRule { return v.ColumnLevelPermissionRules }).(DataSetColumnLevelPermissionRuleArrayOutput)
}

// <p>The amount of SPICE capacity used by this dataset. This is 0 if the dataset isn't
//             imported into SPICE.</p>
func (o LookupDataSetResultOutput) ConsumedSpiceCapacityInBytes() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LookupDataSetResult) *float64 { return v.ConsumedSpiceCapacityInBytes }).(pulumi.Float64PtrOutput)
}

// <p>The time that this dataset was created.</p>
func (o LookupDataSetResultOutput) CreatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDataSetResult) *string { return v.CreatedTime }).(pulumi.StringPtrOutput)
}

func (o LookupDataSetResultOutput) ImportMode() DataSetImportModePtrOutput {
	return o.ApplyT(func(v LookupDataSetResult) *DataSetImportMode { return v.ImportMode }).(DataSetImportModePtrOutput)
}

// <p>The last time that this dataset was updated.</p>
func (o LookupDataSetResultOutput) LastUpdatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDataSetResult) *string { return v.LastUpdatedTime }).(pulumi.StringPtrOutput)
}

func (o LookupDataSetResultOutput) LogicalTableMap() DataSetLogicalTableMapPtrOutput {
	return o.ApplyT(func(v LookupDataSetResult) *DataSetLogicalTableMap { return v.LogicalTableMap }).(DataSetLogicalTableMapPtrOutput)
}

// <p>The display name for the dataset.</p>
func (o LookupDataSetResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDataSetResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// <p>The list of columns after all transforms. These columns are available in templates,
//             analyses, and dashboards.</p>
func (o LookupDataSetResultOutput) OutputColumns() DataSetOutputColumnArrayOutput {
	return o.ApplyT(func(v LookupDataSetResult) []DataSetOutputColumn { return v.OutputColumns }).(DataSetOutputColumnArrayOutput)
}

// <p>A list of resource permissions on the dataset.</p>
func (o LookupDataSetResultOutput) Permissions() DataSetResourcePermissionArrayOutput {
	return o.ApplyT(func(v LookupDataSetResult) []DataSetResourcePermission { return v.Permissions }).(DataSetResourcePermissionArrayOutput)
}

func (o LookupDataSetResultOutput) PhysicalTableMap() DataSetPhysicalTableMapPtrOutput {
	return o.ApplyT(func(v LookupDataSetResult) *DataSetPhysicalTableMap { return v.PhysicalTableMap }).(DataSetPhysicalTableMapPtrOutput)
}

func (o LookupDataSetResultOutput) RowLevelPermissionDataSet() DataSetRowLevelPermissionDataSetPtrOutput {
	return o.ApplyT(func(v LookupDataSetResult) *DataSetRowLevelPermissionDataSet { return v.RowLevelPermissionDataSet }).(DataSetRowLevelPermissionDataSetPtrOutput)
}

// <p>Contains a map of the key-value pairs for the resource tag or tags assigned to the dataset.</p>
func (o LookupDataSetResultOutput) Tags() DataSetTagArrayOutput {
	return o.ApplyT(func(v LookupDataSetResult) []DataSetTag { return v.Tags }).(DataSetTagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDataSetResultOutput{})
}
