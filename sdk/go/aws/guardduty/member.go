// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package guardduty

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::GuardDuty::Member
type Member struct {
	pulumi.CustomResourceState

	// The ID of the detector associated with the GuardDuty service to add the member to.
	DetectorId pulumi.StringPtrOutput `pulumi:"detectorId"`
	// Specifies whether or not to disable email notification for the member account that you invite.
	DisableEmailNotification pulumi.BoolPtrOutput `pulumi:"disableEmailNotification"`
	// The email address associated with the member account.
	Email pulumi.StringOutput `pulumi:"email"`
	// The AWS account ID of the account to designate as a member.
	MemberId pulumi.StringPtrOutput `pulumi:"memberId"`
	// The invitation message that you want to send to the accounts that you're inviting to GuardDuty as members.
	Message pulumi.StringPtrOutput `pulumi:"message"`
	// You can use the `Status` property to update the status of the relationship between the member account and its administrator account. Valid values are `Created` and `Invited` when using an `AWS::GuardDuty::Member` resource. If the value for this property is not provided or set to `Created` , a member account is created but not invited. If the value of this property is set to `Invited` , a member account is created and invited.
	Status pulumi.StringPtrOutput `pulumi:"status"`
}

// NewMember registers a new resource with the given unique name, arguments, and options.
func NewMember(ctx *pulumi.Context,
	name string, args *MemberArgs, opts ...pulumi.ResourceOption) (*Member, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Email == nil {
		return nil, errors.New("invalid value for required argument 'Email'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"detectorId",
		"memberId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Member
	err := ctx.RegisterResource("aws-native:guardduty:Member", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMember gets an existing Member resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MemberState, opts ...pulumi.ResourceOption) (*Member, error) {
	var resource Member
	err := ctx.ReadResource("aws-native:guardduty:Member", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Member resources.
type memberState struct {
}

type MemberState struct {
}

func (MemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*memberState)(nil)).Elem()
}

type memberArgs struct {
	// The ID of the detector associated with the GuardDuty service to add the member to.
	DetectorId *string `pulumi:"detectorId"`
	// Specifies whether or not to disable email notification for the member account that you invite.
	DisableEmailNotification *bool `pulumi:"disableEmailNotification"`
	// The email address associated with the member account.
	Email string `pulumi:"email"`
	// The AWS account ID of the account to designate as a member.
	MemberId *string `pulumi:"memberId"`
	// The invitation message that you want to send to the accounts that you're inviting to GuardDuty as members.
	Message *string `pulumi:"message"`
	// You can use the `Status` property to update the status of the relationship between the member account and its administrator account. Valid values are `Created` and `Invited` when using an `AWS::GuardDuty::Member` resource. If the value for this property is not provided or set to `Created` , a member account is created but not invited. If the value of this property is set to `Invited` , a member account is created and invited.
	Status *string `pulumi:"status"`
}

// The set of arguments for constructing a Member resource.
type MemberArgs struct {
	// The ID of the detector associated with the GuardDuty service to add the member to.
	DetectorId pulumi.StringPtrInput
	// Specifies whether or not to disable email notification for the member account that you invite.
	DisableEmailNotification pulumi.BoolPtrInput
	// The email address associated with the member account.
	Email pulumi.StringInput
	// The AWS account ID of the account to designate as a member.
	MemberId pulumi.StringPtrInput
	// The invitation message that you want to send to the accounts that you're inviting to GuardDuty as members.
	Message pulumi.StringPtrInput
	// You can use the `Status` property to update the status of the relationship between the member account and its administrator account. Valid values are `Created` and `Invited` when using an `AWS::GuardDuty::Member` resource. If the value for this property is not provided or set to `Created` , a member account is created but not invited. If the value of this property is set to `Invited` , a member account is created and invited.
	Status pulumi.StringPtrInput
}

func (MemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*memberArgs)(nil)).Elem()
}

type MemberInput interface {
	pulumi.Input

	ToMemberOutput() MemberOutput
	ToMemberOutputWithContext(ctx context.Context) MemberOutput
}

func (*Member) ElementType() reflect.Type {
	return reflect.TypeOf((**Member)(nil)).Elem()
}

func (i *Member) ToMemberOutput() MemberOutput {
	return i.ToMemberOutputWithContext(context.Background())
}

func (i *Member) ToMemberOutputWithContext(ctx context.Context) MemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MemberOutput)
}

type MemberOutput struct{ *pulumi.OutputState }

func (MemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Member)(nil)).Elem()
}

func (o MemberOutput) ToMemberOutput() MemberOutput {
	return o
}

func (o MemberOutput) ToMemberOutputWithContext(ctx context.Context) MemberOutput {
	return o
}

// The ID of the detector associated with the GuardDuty service to add the member to.
func (o MemberOutput) DetectorId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Member) pulumi.StringPtrOutput { return v.DetectorId }).(pulumi.StringPtrOutput)
}

// Specifies whether or not to disable email notification for the member account that you invite.
func (o MemberOutput) DisableEmailNotification() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Member) pulumi.BoolPtrOutput { return v.DisableEmailNotification }).(pulumi.BoolPtrOutput)
}

// The email address associated with the member account.
func (o MemberOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v *Member) pulumi.StringOutput { return v.Email }).(pulumi.StringOutput)
}

// The AWS account ID of the account to designate as a member.
func (o MemberOutput) MemberId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Member) pulumi.StringPtrOutput { return v.MemberId }).(pulumi.StringPtrOutput)
}

// The invitation message that you want to send to the accounts that you're inviting to GuardDuty as members.
func (o MemberOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Member) pulumi.StringPtrOutput { return v.Message }).(pulumi.StringPtrOutput)
}

// You can use the `Status` property to update the status of the relationship between the member account and its administrator account. Valid values are `Created` and `Invited` when using an `AWS::GuardDuty::Member` resource. If the value for this property is not provided or set to `Created` , a member account is created but not invited. If the value of this property is set to `Invited` , a member account is created and invited.
func (o MemberOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Member) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MemberInput)(nil)).Elem(), &Member{})
	pulumi.RegisterOutputType(MemberOutput{})
}
