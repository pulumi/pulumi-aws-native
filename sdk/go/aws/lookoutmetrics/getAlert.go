// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lookoutmetrics

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::LookoutMetrics::Alert
func LookupAlert(ctx *pulumi.Context, args *LookupAlertArgs, opts ...pulumi.InvokeOption) (*LookupAlertResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAlertResult
	err := ctx.Invoke("aws-native:lookoutmetrics:getAlert", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupAlertArgs struct {
	// ARN assigned to the alert.
	Arn string `pulumi:"arn"`
}

type LookupAlertResult struct {
	// ARN assigned to the alert.
	Arn *string `pulumi:"arn"`
}

func LookupAlertOutput(ctx *pulumi.Context, args LookupAlertOutputArgs, opts ...pulumi.InvokeOption) LookupAlertResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAlertResultOutput, error) {
			args := v.(LookupAlertArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupAlertResult
			secret, err := ctx.InvokePackageRaw("aws-native:lookoutmetrics:getAlert", args, &rv, "", opts...)
			if err != nil {
				return LookupAlertResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupAlertResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupAlertResultOutput), nil
			}
			return output, nil
		}).(LookupAlertResultOutput)
}

type LookupAlertOutputArgs struct {
	// ARN assigned to the alert.
	Arn pulumi.StringInput `pulumi:"arn"`
}

func (LookupAlertOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAlertArgs)(nil)).Elem()
}

type LookupAlertResultOutput struct{ *pulumi.OutputState }

func (LookupAlertResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAlertResult)(nil)).Elem()
}

func (o LookupAlertResultOutput) ToLookupAlertResultOutput() LookupAlertResultOutput {
	return o
}

func (o LookupAlertResultOutput) ToLookupAlertResultOutputWithContext(ctx context.Context) LookupAlertResultOutput {
	return o
}

// ARN assigned to the alert.
func (o LookupAlertResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAlertResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAlertResultOutput{})
}
