// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codepipeline

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The AWS::CodePipeline::Pipeline resource creates a CodePipeline pipeline that describes how software changes go through a release process.
type Pipeline struct {
	pulumi.CustomResourceState

	// The S3 bucket where artifacts for the pipeline are stored.
	ArtifactStore PipelineArtifactStorePtrOutput `pulumi:"artifactStore"`
	// A mapping of artifactStore objects and their corresponding AWS Regions. There must be an artifact store for the pipeline Region and for each cross-region action in the pipeline.
	ArtifactStores PipelineArtifactStoreMapArrayOutput `pulumi:"artifactStores"`
	// Represents the input of a DisableStageTransition action.
	DisableInboundStageTransitions PipelineStageTransitionArrayOutput `pulumi:"disableInboundStageTransitions"`
	// The method that the pipeline will use to handle multiple executions. The default mode is SUPERSEDED.
	ExecutionMode PipelineExecutionModePtrOutput `pulumi:"executionMode"`
	// The name of the pipeline.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// CodePipeline provides the following pipeline types, which differ in characteristics and price, so that you can tailor your pipeline features and cost to the needs of your applications.
	PipelineType PipelineTypePtrOutput `pulumi:"pipelineType"`
	// Indicates whether to rerun the CodePipeline pipeline after you update it.
	RestartExecutionOnUpdate pulumi.BoolPtrOutput `pulumi:"restartExecutionOnUpdate"`
	// The Amazon Resource Name (ARN) for CodePipeline to use to either perform actions with no actionRoleArn, or to use to assume roles for actions with an actionRoleArn
	RoleArn pulumi.StringOutput `pulumi:"roleArn"`
	// Represents information about a stage and its definition.
	Stages PipelineStageDeclarationArrayOutput `pulumi:"stages"`
	// Specifies the tags applied to the pipeline.
	Tags aws.TagArrayOutput `pulumi:"tags"`
	// The trigger configuration specifying a type of event, such as Git tags, that starts the pipeline.
	Triggers PipelineTriggerDeclarationArrayOutput `pulumi:"triggers"`
	// A list that defines the pipeline variables for a pipeline resource. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9@\-_]+.
	Variables PipelineVariableDeclarationArrayOutput `pulumi:"variables"`
	// The version of the pipeline.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewPipeline registers a new resource with the given unique name, arguments, and options.
func NewPipeline(ctx *pulumi.Context,
	name string, args *PipelineArgs, opts ...pulumi.ResourceOption) (*Pipeline, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	if args.Stages == nil {
		return nil, errors.New("invalid value for required argument 'Stages'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"name",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Pipeline
	err := ctx.RegisterResource("aws-native:codepipeline:Pipeline", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPipeline gets an existing Pipeline resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPipeline(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PipelineState, opts ...pulumi.ResourceOption) (*Pipeline, error) {
	var resource Pipeline
	err := ctx.ReadResource("aws-native:codepipeline:Pipeline", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Pipeline resources.
type pipelineState struct {
}

type PipelineState struct {
}

func (PipelineState) ElementType() reflect.Type {
	return reflect.TypeOf((*pipelineState)(nil)).Elem()
}

type pipelineArgs struct {
	// The S3 bucket where artifacts for the pipeline are stored.
	ArtifactStore *PipelineArtifactStore `pulumi:"artifactStore"`
	// A mapping of artifactStore objects and their corresponding AWS Regions. There must be an artifact store for the pipeline Region and for each cross-region action in the pipeline.
	ArtifactStores []PipelineArtifactStoreMap `pulumi:"artifactStores"`
	// Represents the input of a DisableStageTransition action.
	DisableInboundStageTransitions []PipelineStageTransition `pulumi:"disableInboundStageTransitions"`
	// The method that the pipeline will use to handle multiple executions. The default mode is SUPERSEDED.
	ExecutionMode *PipelineExecutionMode `pulumi:"executionMode"`
	// The name of the pipeline.
	Name *string `pulumi:"name"`
	// CodePipeline provides the following pipeline types, which differ in characteristics and price, so that you can tailor your pipeline features and cost to the needs of your applications.
	PipelineType *PipelineType `pulumi:"pipelineType"`
	// Indicates whether to rerun the CodePipeline pipeline after you update it.
	RestartExecutionOnUpdate *bool `pulumi:"restartExecutionOnUpdate"`
	// The Amazon Resource Name (ARN) for CodePipeline to use to either perform actions with no actionRoleArn, or to use to assume roles for actions with an actionRoleArn
	RoleArn string `pulumi:"roleArn"`
	// Represents information about a stage and its definition.
	Stages []PipelineStageDeclaration `pulumi:"stages"`
	// Specifies the tags applied to the pipeline.
	Tags []aws.Tag `pulumi:"tags"`
	// The trigger configuration specifying a type of event, such as Git tags, that starts the pipeline.
	Triggers []PipelineTriggerDeclaration `pulumi:"triggers"`
	// A list that defines the pipeline variables for a pipeline resource. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9@\-_]+.
	Variables []PipelineVariableDeclaration `pulumi:"variables"`
}

// The set of arguments for constructing a Pipeline resource.
type PipelineArgs struct {
	// The S3 bucket where artifacts for the pipeline are stored.
	ArtifactStore PipelineArtifactStorePtrInput
	// A mapping of artifactStore objects and their corresponding AWS Regions. There must be an artifact store for the pipeline Region and for each cross-region action in the pipeline.
	ArtifactStores PipelineArtifactStoreMapArrayInput
	// Represents the input of a DisableStageTransition action.
	DisableInboundStageTransitions PipelineStageTransitionArrayInput
	// The method that the pipeline will use to handle multiple executions. The default mode is SUPERSEDED.
	ExecutionMode PipelineExecutionModePtrInput
	// The name of the pipeline.
	Name pulumi.StringPtrInput
	// CodePipeline provides the following pipeline types, which differ in characteristics and price, so that you can tailor your pipeline features and cost to the needs of your applications.
	PipelineType PipelineTypePtrInput
	// Indicates whether to rerun the CodePipeline pipeline after you update it.
	RestartExecutionOnUpdate pulumi.BoolPtrInput
	// The Amazon Resource Name (ARN) for CodePipeline to use to either perform actions with no actionRoleArn, or to use to assume roles for actions with an actionRoleArn
	RoleArn pulumi.StringInput
	// Represents information about a stage and its definition.
	Stages PipelineStageDeclarationArrayInput
	// Specifies the tags applied to the pipeline.
	Tags aws.TagArrayInput
	// The trigger configuration specifying a type of event, such as Git tags, that starts the pipeline.
	Triggers PipelineTriggerDeclarationArrayInput
	// A list that defines the pipeline variables for a pipeline resource. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9@\-_]+.
	Variables PipelineVariableDeclarationArrayInput
}

func (PipelineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pipelineArgs)(nil)).Elem()
}

type PipelineInput interface {
	pulumi.Input

	ToPipelineOutput() PipelineOutput
	ToPipelineOutputWithContext(ctx context.Context) PipelineOutput
}

func (*Pipeline) ElementType() reflect.Type {
	return reflect.TypeOf((**Pipeline)(nil)).Elem()
}

func (i *Pipeline) ToPipelineOutput() PipelineOutput {
	return i.ToPipelineOutputWithContext(context.Background())
}

func (i *Pipeline) ToPipelineOutputWithContext(ctx context.Context) PipelineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineOutput)
}

type PipelineOutput struct{ *pulumi.OutputState }

func (PipelineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Pipeline)(nil)).Elem()
}

func (o PipelineOutput) ToPipelineOutput() PipelineOutput {
	return o
}

func (o PipelineOutput) ToPipelineOutputWithContext(ctx context.Context) PipelineOutput {
	return o
}

// The S3 bucket where artifacts for the pipeline are stored.
func (o PipelineOutput) ArtifactStore() PipelineArtifactStorePtrOutput {
	return o.ApplyT(func(v *Pipeline) PipelineArtifactStorePtrOutput { return v.ArtifactStore }).(PipelineArtifactStorePtrOutput)
}

// A mapping of artifactStore objects and their corresponding AWS Regions. There must be an artifact store for the pipeline Region and for each cross-region action in the pipeline.
func (o PipelineOutput) ArtifactStores() PipelineArtifactStoreMapArrayOutput {
	return o.ApplyT(func(v *Pipeline) PipelineArtifactStoreMapArrayOutput { return v.ArtifactStores }).(PipelineArtifactStoreMapArrayOutput)
}

// Represents the input of a DisableStageTransition action.
func (o PipelineOutput) DisableInboundStageTransitions() PipelineStageTransitionArrayOutput {
	return o.ApplyT(func(v *Pipeline) PipelineStageTransitionArrayOutput { return v.DisableInboundStageTransitions }).(PipelineStageTransitionArrayOutput)
}

// The method that the pipeline will use to handle multiple executions. The default mode is SUPERSEDED.
func (o PipelineOutput) ExecutionMode() PipelineExecutionModePtrOutput {
	return o.ApplyT(func(v *Pipeline) PipelineExecutionModePtrOutput { return v.ExecutionMode }).(PipelineExecutionModePtrOutput)
}

// The name of the pipeline.
func (o PipelineOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// CodePipeline provides the following pipeline types, which differ in characteristics and price, so that you can tailor your pipeline features and cost to the needs of your applications.
func (o PipelineOutput) PipelineType() PipelineTypePtrOutput {
	return o.ApplyT(func(v *Pipeline) PipelineTypePtrOutput { return v.PipelineType }).(PipelineTypePtrOutput)
}

// Indicates whether to rerun the CodePipeline pipeline after you update it.
func (o PipelineOutput) RestartExecutionOnUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.BoolPtrOutput { return v.RestartExecutionOnUpdate }).(pulumi.BoolPtrOutput)
}

// The Amazon Resource Name (ARN) for CodePipeline to use to either perform actions with no actionRoleArn, or to use to assume roles for actions with an actionRoleArn
func (o PipelineOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringOutput { return v.RoleArn }).(pulumi.StringOutput)
}

// Represents information about a stage and its definition.
func (o PipelineOutput) Stages() PipelineStageDeclarationArrayOutput {
	return o.ApplyT(func(v *Pipeline) PipelineStageDeclarationArrayOutput { return v.Stages }).(PipelineStageDeclarationArrayOutput)
}

// Specifies the tags applied to the pipeline.
func (o PipelineOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Pipeline) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

// The trigger configuration specifying a type of event, such as Git tags, that starts the pipeline.
func (o PipelineOutput) Triggers() PipelineTriggerDeclarationArrayOutput {
	return o.ApplyT(func(v *Pipeline) PipelineTriggerDeclarationArrayOutput { return v.Triggers }).(PipelineTriggerDeclarationArrayOutput)
}

// A list that defines the pipeline variables for a pipeline resource. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9@\-_]+.
func (o PipelineOutput) Variables() PipelineVariableDeclarationArrayOutput {
	return o.ApplyT(func(v *Pipeline) PipelineVariableDeclarationArrayOutput { return v.Variables }).(PipelineVariableDeclarationArrayOutput)
}

// The version of the pipeline.
func (o PipelineOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineInput)(nil)).Elem(), &Pipeline{})
	pulumi.RegisterOutputType(PipelineOutput{})
}
