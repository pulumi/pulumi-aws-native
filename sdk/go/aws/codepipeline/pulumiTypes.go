// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codepipeline

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// Returns information about the details of an artifact.
type CustomActionTypeArtifactDetails struct {
	// The maximum number of artifacts allowed for the action type.
	MaximumCount int `pulumi:"maximumCount"`
	// The minimum number of artifacts allowed for the action type.
	MinimumCount int `pulumi:"minimumCount"`
}

// CustomActionTypeArtifactDetailsInput is an input type that accepts CustomActionTypeArtifactDetailsArgs and CustomActionTypeArtifactDetailsOutput values.
// You can construct a concrete instance of `CustomActionTypeArtifactDetailsInput` via:
//
//	CustomActionTypeArtifactDetailsArgs{...}
type CustomActionTypeArtifactDetailsInput interface {
	pulumi.Input

	ToCustomActionTypeArtifactDetailsOutput() CustomActionTypeArtifactDetailsOutput
	ToCustomActionTypeArtifactDetailsOutputWithContext(context.Context) CustomActionTypeArtifactDetailsOutput
}

// Returns information about the details of an artifact.
type CustomActionTypeArtifactDetailsArgs struct {
	// The maximum number of artifacts allowed for the action type.
	MaximumCount pulumi.IntInput `pulumi:"maximumCount"`
	// The minimum number of artifacts allowed for the action type.
	MinimumCount pulumi.IntInput `pulumi:"minimumCount"`
}

func (CustomActionTypeArtifactDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomActionTypeArtifactDetails)(nil)).Elem()
}

func (i CustomActionTypeArtifactDetailsArgs) ToCustomActionTypeArtifactDetailsOutput() CustomActionTypeArtifactDetailsOutput {
	return i.ToCustomActionTypeArtifactDetailsOutputWithContext(context.Background())
}

func (i CustomActionTypeArtifactDetailsArgs) ToCustomActionTypeArtifactDetailsOutputWithContext(ctx context.Context) CustomActionTypeArtifactDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomActionTypeArtifactDetailsOutput)
}

// Returns information about the details of an artifact.
type CustomActionTypeArtifactDetailsOutput struct{ *pulumi.OutputState }

func (CustomActionTypeArtifactDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomActionTypeArtifactDetails)(nil)).Elem()
}

func (o CustomActionTypeArtifactDetailsOutput) ToCustomActionTypeArtifactDetailsOutput() CustomActionTypeArtifactDetailsOutput {
	return o
}

func (o CustomActionTypeArtifactDetailsOutput) ToCustomActionTypeArtifactDetailsOutputWithContext(ctx context.Context) CustomActionTypeArtifactDetailsOutput {
	return o
}

// The maximum number of artifacts allowed for the action type.
func (o CustomActionTypeArtifactDetailsOutput) MaximumCount() pulumi.IntOutput {
	return o.ApplyT(func(v CustomActionTypeArtifactDetails) int { return v.MaximumCount }).(pulumi.IntOutput)
}

// The minimum number of artifacts allowed for the action type.
func (o CustomActionTypeArtifactDetailsOutput) MinimumCount() pulumi.IntOutput {
	return o.ApplyT(func(v CustomActionTypeArtifactDetails) int { return v.MinimumCount }).(pulumi.IntOutput)
}

// The configuration properties for the custom action.
type CustomActionTypeConfigurationProperties struct {
	// The description of the action configuration property that is displayed to users.
	Description *string `pulumi:"description"`
	// Whether the configuration property is a key.
	Key bool `pulumi:"key"`
	// The name of the action configuration property.
	Name string `pulumi:"name"`
	// Indicates that the property is used with PollForJobs. When creating a custom action, an action can have up to one queryable property. If it has one, that property must be both required and not secret.If you create a pipeline with a custom action type, and that custom action contains a queryable property, the value for that configuration property is subject to other restrictions. The value must be less than or equal to twenty (20) characters. The value can contain only alphanumeric characters, underscores, and hyphens.
	Queryable *bool `pulumi:"queryable"`
	// Whether the configuration property is a required value.
	Required bool `pulumi:"required"`
	// Whether the configuration property is secret. Secrets are hidden from all calls except for GetJobDetails, GetThirdPartyJobDetails, PollForJobs, and PollForThirdPartyJobs.
	Secret bool `pulumi:"secret"`
	// The type of the configuration property.
	Type *string `pulumi:"type"`
}

// CustomActionTypeConfigurationPropertiesInput is an input type that accepts CustomActionTypeConfigurationPropertiesArgs and CustomActionTypeConfigurationPropertiesOutput values.
// You can construct a concrete instance of `CustomActionTypeConfigurationPropertiesInput` via:
//
//	CustomActionTypeConfigurationPropertiesArgs{...}
type CustomActionTypeConfigurationPropertiesInput interface {
	pulumi.Input

	ToCustomActionTypeConfigurationPropertiesOutput() CustomActionTypeConfigurationPropertiesOutput
	ToCustomActionTypeConfigurationPropertiesOutputWithContext(context.Context) CustomActionTypeConfigurationPropertiesOutput
}

// The configuration properties for the custom action.
type CustomActionTypeConfigurationPropertiesArgs struct {
	// The description of the action configuration property that is displayed to users.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Whether the configuration property is a key.
	Key pulumi.BoolInput `pulumi:"key"`
	// The name of the action configuration property.
	Name pulumi.StringInput `pulumi:"name"`
	// Indicates that the property is used with PollForJobs. When creating a custom action, an action can have up to one queryable property. If it has one, that property must be both required and not secret.If you create a pipeline with a custom action type, and that custom action contains a queryable property, the value for that configuration property is subject to other restrictions. The value must be less than or equal to twenty (20) characters. The value can contain only alphanumeric characters, underscores, and hyphens.
	Queryable pulumi.BoolPtrInput `pulumi:"queryable"`
	// Whether the configuration property is a required value.
	Required pulumi.BoolInput `pulumi:"required"`
	// Whether the configuration property is secret. Secrets are hidden from all calls except for GetJobDetails, GetThirdPartyJobDetails, PollForJobs, and PollForThirdPartyJobs.
	Secret pulumi.BoolInput `pulumi:"secret"`
	// The type of the configuration property.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (CustomActionTypeConfigurationPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomActionTypeConfigurationProperties)(nil)).Elem()
}

func (i CustomActionTypeConfigurationPropertiesArgs) ToCustomActionTypeConfigurationPropertiesOutput() CustomActionTypeConfigurationPropertiesOutput {
	return i.ToCustomActionTypeConfigurationPropertiesOutputWithContext(context.Background())
}

func (i CustomActionTypeConfigurationPropertiesArgs) ToCustomActionTypeConfigurationPropertiesOutputWithContext(ctx context.Context) CustomActionTypeConfigurationPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomActionTypeConfigurationPropertiesOutput)
}

// CustomActionTypeConfigurationPropertiesArrayInput is an input type that accepts CustomActionTypeConfigurationPropertiesArray and CustomActionTypeConfigurationPropertiesArrayOutput values.
// You can construct a concrete instance of `CustomActionTypeConfigurationPropertiesArrayInput` via:
//
//	CustomActionTypeConfigurationPropertiesArray{ CustomActionTypeConfigurationPropertiesArgs{...} }
type CustomActionTypeConfigurationPropertiesArrayInput interface {
	pulumi.Input

	ToCustomActionTypeConfigurationPropertiesArrayOutput() CustomActionTypeConfigurationPropertiesArrayOutput
	ToCustomActionTypeConfigurationPropertiesArrayOutputWithContext(context.Context) CustomActionTypeConfigurationPropertiesArrayOutput
}

type CustomActionTypeConfigurationPropertiesArray []CustomActionTypeConfigurationPropertiesInput

func (CustomActionTypeConfigurationPropertiesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CustomActionTypeConfigurationProperties)(nil)).Elem()
}

func (i CustomActionTypeConfigurationPropertiesArray) ToCustomActionTypeConfigurationPropertiesArrayOutput() CustomActionTypeConfigurationPropertiesArrayOutput {
	return i.ToCustomActionTypeConfigurationPropertiesArrayOutputWithContext(context.Background())
}

func (i CustomActionTypeConfigurationPropertiesArray) ToCustomActionTypeConfigurationPropertiesArrayOutputWithContext(ctx context.Context) CustomActionTypeConfigurationPropertiesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomActionTypeConfigurationPropertiesArrayOutput)
}

// The configuration properties for the custom action.
type CustomActionTypeConfigurationPropertiesOutput struct{ *pulumi.OutputState }

func (CustomActionTypeConfigurationPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomActionTypeConfigurationProperties)(nil)).Elem()
}

func (o CustomActionTypeConfigurationPropertiesOutput) ToCustomActionTypeConfigurationPropertiesOutput() CustomActionTypeConfigurationPropertiesOutput {
	return o
}

func (o CustomActionTypeConfigurationPropertiesOutput) ToCustomActionTypeConfigurationPropertiesOutputWithContext(ctx context.Context) CustomActionTypeConfigurationPropertiesOutput {
	return o
}

// The description of the action configuration property that is displayed to users.
func (o CustomActionTypeConfigurationPropertiesOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomActionTypeConfigurationProperties) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether the configuration property is a key.
func (o CustomActionTypeConfigurationPropertiesOutput) Key() pulumi.BoolOutput {
	return o.ApplyT(func(v CustomActionTypeConfigurationProperties) bool { return v.Key }).(pulumi.BoolOutput)
}

// The name of the action configuration property.
func (o CustomActionTypeConfigurationPropertiesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CustomActionTypeConfigurationProperties) string { return v.Name }).(pulumi.StringOutput)
}

// Indicates that the property is used with PollForJobs. When creating a custom action, an action can have up to one queryable property. If it has one, that property must be both required and not secret.If you create a pipeline with a custom action type, and that custom action contains a queryable property, the value for that configuration property is subject to other restrictions. The value must be less than or equal to twenty (20) characters. The value can contain only alphanumeric characters, underscores, and hyphens.
func (o CustomActionTypeConfigurationPropertiesOutput) Queryable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CustomActionTypeConfigurationProperties) *bool { return v.Queryable }).(pulumi.BoolPtrOutput)
}

// Whether the configuration property is a required value.
func (o CustomActionTypeConfigurationPropertiesOutput) Required() pulumi.BoolOutput {
	return o.ApplyT(func(v CustomActionTypeConfigurationProperties) bool { return v.Required }).(pulumi.BoolOutput)
}

// Whether the configuration property is secret. Secrets are hidden from all calls except for GetJobDetails, GetThirdPartyJobDetails, PollForJobs, and PollForThirdPartyJobs.
func (o CustomActionTypeConfigurationPropertiesOutput) Secret() pulumi.BoolOutput {
	return o.ApplyT(func(v CustomActionTypeConfigurationProperties) bool { return v.Secret }).(pulumi.BoolOutput)
}

// The type of the configuration property.
func (o CustomActionTypeConfigurationPropertiesOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomActionTypeConfigurationProperties) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type CustomActionTypeConfigurationPropertiesArrayOutput struct{ *pulumi.OutputState }

func (CustomActionTypeConfigurationPropertiesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CustomActionTypeConfigurationProperties)(nil)).Elem()
}

func (o CustomActionTypeConfigurationPropertiesArrayOutput) ToCustomActionTypeConfigurationPropertiesArrayOutput() CustomActionTypeConfigurationPropertiesArrayOutput {
	return o
}

func (o CustomActionTypeConfigurationPropertiesArrayOutput) ToCustomActionTypeConfigurationPropertiesArrayOutputWithContext(ctx context.Context) CustomActionTypeConfigurationPropertiesArrayOutput {
	return o
}

func (o CustomActionTypeConfigurationPropertiesArrayOutput) Index(i pulumi.IntInput) CustomActionTypeConfigurationPropertiesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CustomActionTypeConfigurationProperties {
		return vs[0].([]CustomActionTypeConfigurationProperties)[vs[1].(int)]
	}).(CustomActionTypeConfigurationPropertiesOutput)
}

// Settings is a property of the AWS::CodePipeline::CustomActionType resource that provides URLs that users can access to view information about the CodePipeline custom action.
type CustomActionTypeSettings struct {
	// The URL returned to the AWS CodePipeline console that provides a deep link to the resources of the external system, such as the configuration page for an AWS CodeDeploy deployment group. This link is provided as part of the action display in the pipeline.
	EntityUrlTemplate *string `pulumi:"entityUrlTemplate"`
	// The URL returned to the AWS CodePipeline console that contains a link to the top-level landing page for the external system, such as the console page for AWS CodeDeploy. This link is shown on the pipeline view page in the AWS CodePipeline console and provides a link to the execution entity of the external action.
	ExecutionUrlTemplate *string `pulumi:"executionUrlTemplate"`
	// The URL returned to the AWS CodePipeline console that contains a link to the page where customers can update or change the configuration of the external action.
	RevisionUrlTemplate *string `pulumi:"revisionUrlTemplate"`
	// The URL of a sign-up page where users can sign up for an external service and perform initial configuration of the action provided by that service.
	ThirdPartyConfigurationUrl *string `pulumi:"thirdPartyConfigurationUrl"`
}

// CustomActionTypeSettingsInput is an input type that accepts CustomActionTypeSettingsArgs and CustomActionTypeSettingsOutput values.
// You can construct a concrete instance of `CustomActionTypeSettingsInput` via:
//
//	CustomActionTypeSettingsArgs{...}
type CustomActionTypeSettingsInput interface {
	pulumi.Input

	ToCustomActionTypeSettingsOutput() CustomActionTypeSettingsOutput
	ToCustomActionTypeSettingsOutputWithContext(context.Context) CustomActionTypeSettingsOutput
}

// Settings is a property of the AWS::CodePipeline::CustomActionType resource that provides URLs that users can access to view information about the CodePipeline custom action.
type CustomActionTypeSettingsArgs struct {
	// The URL returned to the AWS CodePipeline console that provides a deep link to the resources of the external system, such as the configuration page for an AWS CodeDeploy deployment group. This link is provided as part of the action display in the pipeline.
	EntityUrlTemplate pulumi.StringPtrInput `pulumi:"entityUrlTemplate"`
	// The URL returned to the AWS CodePipeline console that contains a link to the top-level landing page for the external system, such as the console page for AWS CodeDeploy. This link is shown on the pipeline view page in the AWS CodePipeline console and provides a link to the execution entity of the external action.
	ExecutionUrlTemplate pulumi.StringPtrInput `pulumi:"executionUrlTemplate"`
	// The URL returned to the AWS CodePipeline console that contains a link to the page where customers can update or change the configuration of the external action.
	RevisionUrlTemplate pulumi.StringPtrInput `pulumi:"revisionUrlTemplate"`
	// The URL of a sign-up page where users can sign up for an external service and perform initial configuration of the action provided by that service.
	ThirdPartyConfigurationUrl pulumi.StringPtrInput `pulumi:"thirdPartyConfigurationUrl"`
}

func (CustomActionTypeSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomActionTypeSettings)(nil)).Elem()
}

func (i CustomActionTypeSettingsArgs) ToCustomActionTypeSettingsOutput() CustomActionTypeSettingsOutput {
	return i.ToCustomActionTypeSettingsOutputWithContext(context.Background())
}

func (i CustomActionTypeSettingsArgs) ToCustomActionTypeSettingsOutputWithContext(ctx context.Context) CustomActionTypeSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomActionTypeSettingsOutput)
}

func (i CustomActionTypeSettingsArgs) ToCustomActionTypeSettingsPtrOutput() CustomActionTypeSettingsPtrOutput {
	return i.ToCustomActionTypeSettingsPtrOutputWithContext(context.Background())
}

func (i CustomActionTypeSettingsArgs) ToCustomActionTypeSettingsPtrOutputWithContext(ctx context.Context) CustomActionTypeSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomActionTypeSettingsOutput).ToCustomActionTypeSettingsPtrOutputWithContext(ctx)
}

// CustomActionTypeSettingsPtrInput is an input type that accepts CustomActionTypeSettingsArgs, CustomActionTypeSettingsPtr and CustomActionTypeSettingsPtrOutput values.
// You can construct a concrete instance of `CustomActionTypeSettingsPtrInput` via:
//
//	        CustomActionTypeSettingsArgs{...}
//
//	or:
//
//	        nil
type CustomActionTypeSettingsPtrInput interface {
	pulumi.Input

	ToCustomActionTypeSettingsPtrOutput() CustomActionTypeSettingsPtrOutput
	ToCustomActionTypeSettingsPtrOutputWithContext(context.Context) CustomActionTypeSettingsPtrOutput
}

type customActionTypeSettingsPtrType CustomActionTypeSettingsArgs

func CustomActionTypeSettingsPtr(v *CustomActionTypeSettingsArgs) CustomActionTypeSettingsPtrInput {
	return (*customActionTypeSettingsPtrType)(v)
}

func (*customActionTypeSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomActionTypeSettings)(nil)).Elem()
}

func (i *customActionTypeSettingsPtrType) ToCustomActionTypeSettingsPtrOutput() CustomActionTypeSettingsPtrOutput {
	return i.ToCustomActionTypeSettingsPtrOutputWithContext(context.Background())
}

func (i *customActionTypeSettingsPtrType) ToCustomActionTypeSettingsPtrOutputWithContext(ctx context.Context) CustomActionTypeSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomActionTypeSettingsPtrOutput)
}

// Settings is a property of the AWS::CodePipeline::CustomActionType resource that provides URLs that users can access to view information about the CodePipeline custom action.
type CustomActionTypeSettingsOutput struct{ *pulumi.OutputState }

func (CustomActionTypeSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomActionTypeSettings)(nil)).Elem()
}

func (o CustomActionTypeSettingsOutput) ToCustomActionTypeSettingsOutput() CustomActionTypeSettingsOutput {
	return o
}

func (o CustomActionTypeSettingsOutput) ToCustomActionTypeSettingsOutputWithContext(ctx context.Context) CustomActionTypeSettingsOutput {
	return o
}

func (o CustomActionTypeSettingsOutput) ToCustomActionTypeSettingsPtrOutput() CustomActionTypeSettingsPtrOutput {
	return o.ToCustomActionTypeSettingsPtrOutputWithContext(context.Background())
}

func (o CustomActionTypeSettingsOutput) ToCustomActionTypeSettingsPtrOutputWithContext(ctx context.Context) CustomActionTypeSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CustomActionTypeSettings) *CustomActionTypeSettings {
		return &v
	}).(CustomActionTypeSettingsPtrOutput)
}

// The URL returned to the AWS CodePipeline console that provides a deep link to the resources of the external system, such as the configuration page for an AWS CodeDeploy deployment group. This link is provided as part of the action display in the pipeline.
func (o CustomActionTypeSettingsOutput) EntityUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomActionTypeSettings) *string { return v.EntityUrlTemplate }).(pulumi.StringPtrOutput)
}

// The URL returned to the AWS CodePipeline console that contains a link to the top-level landing page for the external system, such as the console page for AWS CodeDeploy. This link is shown on the pipeline view page in the AWS CodePipeline console and provides a link to the execution entity of the external action.
func (o CustomActionTypeSettingsOutput) ExecutionUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomActionTypeSettings) *string { return v.ExecutionUrlTemplate }).(pulumi.StringPtrOutput)
}

// The URL returned to the AWS CodePipeline console that contains a link to the page where customers can update or change the configuration of the external action.
func (o CustomActionTypeSettingsOutput) RevisionUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomActionTypeSettings) *string { return v.RevisionUrlTemplate }).(pulumi.StringPtrOutput)
}

// The URL of a sign-up page where users can sign up for an external service and perform initial configuration of the action provided by that service.
func (o CustomActionTypeSettingsOutput) ThirdPartyConfigurationUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomActionTypeSettings) *string { return v.ThirdPartyConfigurationUrl }).(pulumi.StringPtrOutput)
}

type CustomActionTypeSettingsPtrOutput struct{ *pulumi.OutputState }

func (CustomActionTypeSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomActionTypeSettings)(nil)).Elem()
}

func (o CustomActionTypeSettingsPtrOutput) ToCustomActionTypeSettingsPtrOutput() CustomActionTypeSettingsPtrOutput {
	return o
}

func (o CustomActionTypeSettingsPtrOutput) ToCustomActionTypeSettingsPtrOutputWithContext(ctx context.Context) CustomActionTypeSettingsPtrOutput {
	return o
}

func (o CustomActionTypeSettingsPtrOutput) Elem() CustomActionTypeSettingsOutput {
	return o.ApplyT(func(v *CustomActionTypeSettings) CustomActionTypeSettings {
		if v != nil {
			return *v
		}
		var ret CustomActionTypeSettings
		return ret
	}).(CustomActionTypeSettingsOutput)
}

// The URL returned to the AWS CodePipeline console that provides a deep link to the resources of the external system, such as the configuration page for an AWS CodeDeploy deployment group. This link is provided as part of the action display in the pipeline.
func (o CustomActionTypeSettingsPtrOutput) EntityUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomActionTypeSettings) *string {
		if v == nil {
			return nil
		}
		return v.EntityUrlTemplate
	}).(pulumi.StringPtrOutput)
}

// The URL returned to the AWS CodePipeline console that contains a link to the top-level landing page for the external system, such as the console page for AWS CodeDeploy. This link is shown on the pipeline view page in the AWS CodePipeline console and provides a link to the execution entity of the external action.
func (o CustomActionTypeSettingsPtrOutput) ExecutionUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomActionTypeSettings) *string {
		if v == nil {
			return nil
		}
		return v.ExecutionUrlTemplate
	}).(pulumi.StringPtrOutput)
}

// The URL returned to the AWS CodePipeline console that contains a link to the page where customers can update or change the configuration of the external action.
func (o CustomActionTypeSettingsPtrOutput) RevisionUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomActionTypeSettings) *string {
		if v == nil {
			return nil
		}
		return v.RevisionUrlTemplate
	}).(pulumi.StringPtrOutput)
}

// The URL of a sign-up page where users can sign up for an external service and perform initial configuration of the action provided by that service.
func (o CustomActionTypeSettingsPtrOutput) ThirdPartyConfigurationUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomActionTypeSettings) *string {
		if v == nil {
			return nil
		}
		return v.ThirdPartyConfigurationUrl
	}).(pulumi.StringPtrOutput)
}

type CustomActionTypeTag struct {
	// The tag's key.
	Key string `pulumi:"key"`
	// The tag's value.
	Value string `pulumi:"value"`
}

// Represents information about an action declaration.
type PipelineActionDeclaration struct {
	// Specifies the action type and the provider of the action.
	ActionTypeId PipelineActionTypeId `pulumi:"actionTypeId"`
	// The shell commands to run with your compute action in CodePipeline.
	Commands []string `pulumi:"commands"`
	// The action's configuration. These are key-value pairs that specify input values for an action.
	Configuration interface{} `pulumi:"configuration"`
	// The list of environment variables that are input to a compute based action.
	EnvironmentVariables []PipelineEnvironmentVariable `pulumi:"environmentVariables"`
	// The name or ID of the artifact consumed by the action, such as a test or build artifact. While the field is not a required parameter, most actions have an action configuration that requires a specified quantity of input artifacts. To refer to the action configuration specification by action provider, see the [Action structure reference](https://docs.aws.amazon.com/codepipeline/latest/userguide/action-reference.html) in the *AWS CodePipeline User Guide* .
	//
	// > For a CodeBuild action with multiple input artifacts, one of your input sources must be designated the PrimarySource. For more information, see the [CodeBuild action reference page](https://docs.aws.amazon.com/codepipeline/latest/userguide/action-reference-CodeBuild.html) in the *AWS CodePipeline User Guide* .
	InputArtifacts []PipelineInputArtifact `pulumi:"inputArtifacts"`
	// The action declaration's name.
	Name string `pulumi:"name"`
	// The variable namespace associated with the action. All variables produced as output by this action fall under this namespace.
	Namespace *string `pulumi:"namespace"`
	// The name or ID of the result of the action declaration, such as a test or build artifact. While the field is not a required parameter, most actions have an action configuration that requires a specified quantity of output artifacts. To refer to the action configuration specification by action provider, see the [Action structure reference](https://docs.aws.amazon.com/codepipeline/latest/userguide/action-reference.html) in the *AWS CodePipeline User Guide* .
	OutputArtifacts []PipelineOutputArtifact `pulumi:"outputArtifacts"`
	// The list of variables that are to be exported from the compute action.
	OutputVariables []string `pulumi:"outputVariables"`
	// The action declaration's AWS Region, such as us-east-1.
	Region *string `pulumi:"region"`
	// The ARN of the IAM service role that performs the declared action. This is assumed through the roleArn for the pipeline.
	RoleArn *string `pulumi:"roleArn"`
	// The order in which actions are run.
	RunOrder *int `pulumi:"runOrder"`
	// A timeout duration in minutes that can be applied against the ActionType’s default timeout value specified in Quotas for AWS CodePipeline. This attribute is available only to the manual approval ActionType.
	TimeoutInMinutes *int `pulumi:"timeoutInMinutes"`
}

// PipelineActionDeclarationInput is an input type that accepts PipelineActionDeclarationArgs and PipelineActionDeclarationOutput values.
// You can construct a concrete instance of `PipelineActionDeclarationInput` via:
//
//	PipelineActionDeclarationArgs{...}
type PipelineActionDeclarationInput interface {
	pulumi.Input

	ToPipelineActionDeclarationOutput() PipelineActionDeclarationOutput
	ToPipelineActionDeclarationOutputWithContext(context.Context) PipelineActionDeclarationOutput
}

// Represents information about an action declaration.
type PipelineActionDeclarationArgs struct {
	// Specifies the action type and the provider of the action.
	ActionTypeId PipelineActionTypeIdInput `pulumi:"actionTypeId"`
	// The shell commands to run with your compute action in CodePipeline.
	Commands pulumi.StringArrayInput `pulumi:"commands"`
	// The action's configuration. These are key-value pairs that specify input values for an action.
	Configuration pulumi.Input `pulumi:"configuration"`
	// The list of environment variables that are input to a compute based action.
	EnvironmentVariables PipelineEnvironmentVariableArrayInput `pulumi:"environmentVariables"`
	// The name or ID of the artifact consumed by the action, such as a test or build artifact. While the field is not a required parameter, most actions have an action configuration that requires a specified quantity of input artifacts. To refer to the action configuration specification by action provider, see the [Action structure reference](https://docs.aws.amazon.com/codepipeline/latest/userguide/action-reference.html) in the *AWS CodePipeline User Guide* .
	//
	// > For a CodeBuild action with multiple input artifacts, one of your input sources must be designated the PrimarySource. For more information, see the [CodeBuild action reference page](https://docs.aws.amazon.com/codepipeline/latest/userguide/action-reference-CodeBuild.html) in the *AWS CodePipeline User Guide* .
	InputArtifacts PipelineInputArtifactArrayInput `pulumi:"inputArtifacts"`
	// The action declaration's name.
	Name pulumi.StringInput `pulumi:"name"`
	// The variable namespace associated with the action. All variables produced as output by this action fall under this namespace.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The name or ID of the result of the action declaration, such as a test or build artifact. While the field is not a required parameter, most actions have an action configuration that requires a specified quantity of output artifacts. To refer to the action configuration specification by action provider, see the [Action structure reference](https://docs.aws.amazon.com/codepipeline/latest/userguide/action-reference.html) in the *AWS CodePipeline User Guide* .
	OutputArtifacts PipelineOutputArtifactArrayInput `pulumi:"outputArtifacts"`
	// The list of variables that are to be exported from the compute action.
	OutputVariables pulumi.StringArrayInput `pulumi:"outputVariables"`
	// The action declaration's AWS Region, such as us-east-1.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The ARN of the IAM service role that performs the declared action. This is assumed through the roleArn for the pipeline.
	RoleArn pulumi.StringPtrInput `pulumi:"roleArn"`
	// The order in which actions are run.
	RunOrder pulumi.IntPtrInput `pulumi:"runOrder"`
	// A timeout duration in minutes that can be applied against the ActionType’s default timeout value specified in Quotas for AWS CodePipeline. This attribute is available only to the manual approval ActionType.
	TimeoutInMinutes pulumi.IntPtrInput `pulumi:"timeoutInMinutes"`
}

func (PipelineActionDeclarationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineActionDeclaration)(nil)).Elem()
}

func (i PipelineActionDeclarationArgs) ToPipelineActionDeclarationOutput() PipelineActionDeclarationOutput {
	return i.ToPipelineActionDeclarationOutputWithContext(context.Background())
}

func (i PipelineActionDeclarationArgs) ToPipelineActionDeclarationOutputWithContext(ctx context.Context) PipelineActionDeclarationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineActionDeclarationOutput)
}

// PipelineActionDeclarationArrayInput is an input type that accepts PipelineActionDeclarationArray and PipelineActionDeclarationArrayOutput values.
// You can construct a concrete instance of `PipelineActionDeclarationArrayInput` via:
//
//	PipelineActionDeclarationArray{ PipelineActionDeclarationArgs{...} }
type PipelineActionDeclarationArrayInput interface {
	pulumi.Input

	ToPipelineActionDeclarationArrayOutput() PipelineActionDeclarationArrayOutput
	ToPipelineActionDeclarationArrayOutputWithContext(context.Context) PipelineActionDeclarationArrayOutput
}

type PipelineActionDeclarationArray []PipelineActionDeclarationInput

func (PipelineActionDeclarationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineActionDeclaration)(nil)).Elem()
}

func (i PipelineActionDeclarationArray) ToPipelineActionDeclarationArrayOutput() PipelineActionDeclarationArrayOutput {
	return i.ToPipelineActionDeclarationArrayOutputWithContext(context.Background())
}

func (i PipelineActionDeclarationArray) ToPipelineActionDeclarationArrayOutputWithContext(ctx context.Context) PipelineActionDeclarationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineActionDeclarationArrayOutput)
}

// Represents information about an action declaration.
type PipelineActionDeclarationOutput struct{ *pulumi.OutputState }

func (PipelineActionDeclarationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineActionDeclaration)(nil)).Elem()
}

func (o PipelineActionDeclarationOutput) ToPipelineActionDeclarationOutput() PipelineActionDeclarationOutput {
	return o
}

func (o PipelineActionDeclarationOutput) ToPipelineActionDeclarationOutputWithContext(ctx context.Context) PipelineActionDeclarationOutput {
	return o
}

// Specifies the action type and the provider of the action.
func (o PipelineActionDeclarationOutput) ActionTypeId() PipelineActionTypeIdOutput {
	return o.ApplyT(func(v PipelineActionDeclaration) PipelineActionTypeId { return v.ActionTypeId }).(PipelineActionTypeIdOutput)
}

// The shell commands to run with your compute action in CodePipeline.
func (o PipelineActionDeclarationOutput) Commands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipelineActionDeclaration) []string { return v.Commands }).(pulumi.StringArrayOutput)
}

// The action's configuration. These are key-value pairs that specify input values for an action.
func (o PipelineActionDeclarationOutput) Configuration() pulumi.AnyOutput {
	return o.ApplyT(func(v PipelineActionDeclaration) interface{} { return v.Configuration }).(pulumi.AnyOutput)
}

// The list of environment variables that are input to a compute based action.
func (o PipelineActionDeclarationOutput) EnvironmentVariables() PipelineEnvironmentVariableArrayOutput {
	return o.ApplyT(func(v PipelineActionDeclaration) []PipelineEnvironmentVariable { return v.EnvironmentVariables }).(PipelineEnvironmentVariableArrayOutput)
}

// The name or ID of the artifact consumed by the action, such as a test or build artifact. While the field is not a required parameter, most actions have an action configuration that requires a specified quantity of input artifacts. To refer to the action configuration specification by action provider, see the [Action structure reference](https://docs.aws.amazon.com/codepipeline/latest/userguide/action-reference.html) in the *AWS CodePipeline User Guide* .
//
// > For a CodeBuild action with multiple input artifacts, one of your input sources must be designated the PrimarySource. For more information, see the [CodeBuild action reference page](https://docs.aws.amazon.com/codepipeline/latest/userguide/action-reference-CodeBuild.html) in the *AWS CodePipeline User Guide* .
func (o PipelineActionDeclarationOutput) InputArtifacts() PipelineInputArtifactArrayOutput {
	return o.ApplyT(func(v PipelineActionDeclaration) []PipelineInputArtifact { return v.InputArtifacts }).(PipelineInputArtifactArrayOutput)
}

// The action declaration's name.
func (o PipelineActionDeclarationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineActionDeclaration) string { return v.Name }).(pulumi.StringOutput)
}

// The variable namespace associated with the action. All variables produced as output by this action fall under this namespace.
func (o PipelineActionDeclarationOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineActionDeclaration) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The name or ID of the result of the action declaration, such as a test or build artifact. While the field is not a required parameter, most actions have an action configuration that requires a specified quantity of output artifacts. To refer to the action configuration specification by action provider, see the [Action structure reference](https://docs.aws.amazon.com/codepipeline/latest/userguide/action-reference.html) in the *AWS CodePipeline User Guide* .
func (o PipelineActionDeclarationOutput) OutputArtifacts() PipelineOutputArtifactArrayOutput {
	return o.ApplyT(func(v PipelineActionDeclaration) []PipelineOutputArtifact { return v.OutputArtifacts }).(PipelineOutputArtifactArrayOutput)
}

// The list of variables that are to be exported from the compute action.
func (o PipelineActionDeclarationOutput) OutputVariables() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipelineActionDeclaration) []string { return v.OutputVariables }).(pulumi.StringArrayOutput)
}

// The action declaration's AWS Region, such as us-east-1.
func (o PipelineActionDeclarationOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineActionDeclaration) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The ARN of the IAM service role that performs the declared action. This is assumed through the roleArn for the pipeline.
func (o PipelineActionDeclarationOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineActionDeclaration) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// The order in which actions are run.
func (o PipelineActionDeclarationOutput) RunOrder() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipelineActionDeclaration) *int { return v.RunOrder }).(pulumi.IntPtrOutput)
}

// A timeout duration in minutes that can be applied against the ActionType’s default timeout value specified in Quotas for AWS CodePipeline. This attribute is available only to the manual approval ActionType.
func (o PipelineActionDeclarationOutput) TimeoutInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipelineActionDeclaration) *int { return v.TimeoutInMinutes }).(pulumi.IntPtrOutput)
}

type PipelineActionDeclarationArrayOutput struct{ *pulumi.OutputState }

func (PipelineActionDeclarationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineActionDeclaration)(nil)).Elem()
}

func (o PipelineActionDeclarationArrayOutput) ToPipelineActionDeclarationArrayOutput() PipelineActionDeclarationArrayOutput {
	return o
}

func (o PipelineActionDeclarationArrayOutput) ToPipelineActionDeclarationArrayOutputWithContext(ctx context.Context) PipelineActionDeclarationArrayOutput {
	return o
}

func (o PipelineActionDeclarationArrayOutput) Index(i pulumi.IntInput) PipelineActionDeclarationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipelineActionDeclaration {
		return vs[0].([]PipelineActionDeclaration)[vs[1].(int)]
	}).(PipelineActionDeclarationOutput)
}

// Represents information about an action type.
type PipelineActionTypeId struct {
	// A category defines what kind of action can be taken in the stage, and constrains the provider type for the action. Valid categories are limited to one of the values below.
	Category PipelineActionTypeIdCategory `pulumi:"category"`
	// The creator of the action being called. There are three valid values for the Owner field in the action category section within your pipeline structure: AWS, ThirdParty, and Custom.
	Owner string `pulumi:"owner"`
	// The provider of the service being called by the action. Valid providers are determined by the action category. For example, an action in the Deploy category type might have a provider of CodeDeploy, which would be specified as CodeDeploy.
	Provider string `pulumi:"provider"`
	// A string that describes the action version.
	Version string `pulumi:"version"`
}

// PipelineActionTypeIdInput is an input type that accepts PipelineActionTypeIdArgs and PipelineActionTypeIdOutput values.
// You can construct a concrete instance of `PipelineActionTypeIdInput` via:
//
//	PipelineActionTypeIdArgs{...}
type PipelineActionTypeIdInput interface {
	pulumi.Input

	ToPipelineActionTypeIdOutput() PipelineActionTypeIdOutput
	ToPipelineActionTypeIdOutputWithContext(context.Context) PipelineActionTypeIdOutput
}

// Represents information about an action type.
type PipelineActionTypeIdArgs struct {
	// A category defines what kind of action can be taken in the stage, and constrains the provider type for the action. Valid categories are limited to one of the values below.
	Category PipelineActionTypeIdCategoryInput `pulumi:"category"`
	// The creator of the action being called. There are three valid values for the Owner field in the action category section within your pipeline structure: AWS, ThirdParty, and Custom.
	Owner pulumi.StringInput `pulumi:"owner"`
	// The provider of the service being called by the action. Valid providers are determined by the action category. For example, an action in the Deploy category type might have a provider of CodeDeploy, which would be specified as CodeDeploy.
	Provider pulumi.StringInput `pulumi:"provider"`
	// A string that describes the action version.
	Version pulumi.StringInput `pulumi:"version"`
}

func (PipelineActionTypeIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineActionTypeId)(nil)).Elem()
}

func (i PipelineActionTypeIdArgs) ToPipelineActionTypeIdOutput() PipelineActionTypeIdOutput {
	return i.ToPipelineActionTypeIdOutputWithContext(context.Background())
}

func (i PipelineActionTypeIdArgs) ToPipelineActionTypeIdOutputWithContext(ctx context.Context) PipelineActionTypeIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineActionTypeIdOutput)
}

// Represents information about an action type.
type PipelineActionTypeIdOutput struct{ *pulumi.OutputState }

func (PipelineActionTypeIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineActionTypeId)(nil)).Elem()
}

func (o PipelineActionTypeIdOutput) ToPipelineActionTypeIdOutput() PipelineActionTypeIdOutput {
	return o
}

func (o PipelineActionTypeIdOutput) ToPipelineActionTypeIdOutputWithContext(ctx context.Context) PipelineActionTypeIdOutput {
	return o
}

// A category defines what kind of action can be taken in the stage, and constrains the provider type for the action. Valid categories are limited to one of the values below.
func (o PipelineActionTypeIdOutput) Category() PipelineActionTypeIdCategoryOutput {
	return o.ApplyT(func(v PipelineActionTypeId) PipelineActionTypeIdCategory { return v.Category }).(PipelineActionTypeIdCategoryOutput)
}

// The creator of the action being called. There are three valid values for the Owner field in the action category section within your pipeline structure: AWS, ThirdParty, and Custom.
func (o PipelineActionTypeIdOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineActionTypeId) string { return v.Owner }).(pulumi.StringOutput)
}

// The provider of the service being called by the action. Valid providers are determined by the action category. For example, an action in the Deploy category type might have a provider of CodeDeploy, which would be specified as CodeDeploy.
func (o PipelineActionTypeIdOutput) Provider() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineActionTypeId) string { return v.Provider }).(pulumi.StringOutput)
}

// A string that describes the action version.
func (o PipelineActionTypeIdOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineActionTypeId) string { return v.Version }).(pulumi.StringOutput)
}

// The S3 bucket where artifacts for the pipeline are stored.
type PipelineArtifactStore struct {
	// The encryption key used to encrypt the data in the artifact store, such as an AWS Key Management Service ( AWS KMS) key. If this is undefined, the default key for Amazon S3 is used. To see an example artifact store encryption key field, see the example structure here: [AWS::CodePipeline::Pipeline](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codepipeline-pipeline.html) .
	EncryptionKey *PipelineEncryptionKey `pulumi:"encryptionKey"`
	// The S3 bucket used for storing the artifacts for a pipeline. You can specify the name of an S3 bucket but not a folder in the bucket. A folder to contain the pipeline artifacts is created for you based on the name of the pipeline. You can use any S3 bucket in the same AWS Region as the pipeline to store your pipeline artifacts.
	Location string `pulumi:"location"`
	// The type of the artifact store, such as S3.
	Type PipelineArtifactStoreType `pulumi:"type"`
}

// PipelineArtifactStoreInput is an input type that accepts PipelineArtifactStoreArgs and PipelineArtifactStoreOutput values.
// You can construct a concrete instance of `PipelineArtifactStoreInput` via:
//
//	PipelineArtifactStoreArgs{...}
type PipelineArtifactStoreInput interface {
	pulumi.Input

	ToPipelineArtifactStoreOutput() PipelineArtifactStoreOutput
	ToPipelineArtifactStoreOutputWithContext(context.Context) PipelineArtifactStoreOutput
}

// The S3 bucket where artifacts for the pipeline are stored.
type PipelineArtifactStoreArgs struct {
	// The encryption key used to encrypt the data in the artifact store, such as an AWS Key Management Service ( AWS KMS) key. If this is undefined, the default key for Amazon S3 is used. To see an example artifact store encryption key field, see the example structure here: [AWS::CodePipeline::Pipeline](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codepipeline-pipeline.html) .
	EncryptionKey PipelineEncryptionKeyPtrInput `pulumi:"encryptionKey"`
	// The S3 bucket used for storing the artifacts for a pipeline. You can specify the name of an S3 bucket but not a folder in the bucket. A folder to contain the pipeline artifacts is created for you based on the name of the pipeline. You can use any S3 bucket in the same AWS Region as the pipeline to store your pipeline artifacts.
	Location pulumi.StringInput `pulumi:"location"`
	// The type of the artifact store, such as S3.
	Type PipelineArtifactStoreTypeInput `pulumi:"type"`
}

func (PipelineArtifactStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineArtifactStore)(nil)).Elem()
}

func (i PipelineArtifactStoreArgs) ToPipelineArtifactStoreOutput() PipelineArtifactStoreOutput {
	return i.ToPipelineArtifactStoreOutputWithContext(context.Background())
}

func (i PipelineArtifactStoreArgs) ToPipelineArtifactStoreOutputWithContext(ctx context.Context) PipelineArtifactStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineArtifactStoreOutput)
}

func (i PipelineArtifactStoreArgs) ToPipelineArtifactStorePtrOutput() PipelineArtifactStorePtrOutput {
	return i.ToPipelineArtifactStorePtrOutputWithContext(context.Background())
}

func (i PipelineArtifactStoreArgs) ToPipelineArtifactStorePtrOutputWithContext(ctx context.Context) PipelineArtifactStorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineArtifactStoreOutput).ToPipelineArtifactStorePtrOutputWithContext(ctx)
}

// PipelineArtifactStorePtrInput is an input type that accepts PipelineArtifactStoreArgs, PipelineArtifactStorePtr and PipelineArtifactStorePtrOutput values.
// You can construct a concrete instance of `PipelineArtifactStorePtrInput` via:
//
//	        PipelineArtifactStoreArgs{...}
//
//	or:
//
//	        nil
type PipelineArtifactStorePtrInput interface {
	pulumi.Input

	ToPipelineArtifactStorePtrOutput() PipelineArtifactStorePtrOutput
	ToPipelineArtifactStorePtrOutputWithContext(context.Context) PipelineArtifactStorePtrOutput
}

type pipelineArtifactStorePtrType PipelineArtifactStoreArgs

func PipelineArtifactStorePtr(v *PipelineArtifactStoreArgs) PipelineArtifactStorePtrInput {
	return (*pipelineArtifactStorePtrType)(v)
}

func (*pipelineArtifactStorePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineArtifactStore)(nil)).Elem()
}

func (i *pipelineArtifactStorePtrType) ToPipelineArtifactStorePtrOutput() PipelineArtifactStorePtrOutput {
	return i.ToPipelineArtifactStorePtrOutputWithContext(context.Background())
}

func (i *pipelineArtifactStorePtrType) ToPipelineArtifactStorePtrOutputWithContext(ctx context.Context) PipelineArtifactStorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineArtifactStorePtrOutput)
}

// The S3 bucket where artifacts for the pipeline are stored.
type PipelineArtifactStoreOutput struct{ *pulumi.OutputState }

func (PipelineArtifactStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineArtifactStore)(nil)).Elem()
}

func (o PipelineArtifactStoreOutput) ToPipelineArtifactStoreOutput() PipelineArtifactStoreOutput {
	return o
}

func (o PipelineArtifactStoreOutput) ToPipelineArtifactStoreOutputWithContext(ctx context.Context) PipelineArtifactStoreOutput {
	return o
}

func (o PipelineArtifactStoreOutput) ToPipelineArtifactStorePtrOutput() PipelineArtifactStorePtrOutput {
	return o.ToPipelineArtifactStorePtrOutputWithContext(context.Background())
}

func (o PipelineArtifactStoreOutput) ToPipelineArtifactStorePtrOutputWithContext(ctx context.Context) PipelineArtifactStorePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipelineArtifactStore) *PipelineArtifactStore {
		return &v
	}).(PipelineArtifactStorePtrOutput)
}

// The encryption key used to encrypt the data in the artifact store, such as an AWS Key Management Service ( AWS KMS) key. If this is undefined, the default key for Amazon S3 is used. To see an example artifact store encryption key field, see the example structure here: [AWS::CodePipeline::Pipeline](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codepipeline-pipeline.html) .
func (o PipelineArtifactStoreOutput) EncryptionKey() PipelineEncryptionKeyPtrOutput {
	return o.ApplyT(func(v PipelineArtifactStore) *PipelineEncryptionKey { return v.EncryptionKey }).(PipelineEncryptionKeyPtrOutput)
}

// The S3 bucket used for storing the artifacts for a pipeline. You can specify the name of an S3 bucket but not a folder in the bucket. A folder to contain the pipeline artifacts is created for you based on the name of the pipeline. You can use any S3 bucket in the same AWS Region as the pipeline to store your pipeline artifacts.
func (o PipelineArtifactStoreOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineArtifactStore) string { return v.Location }).(pulumi.StringOutput)
}

// The type of the artifact store, such as S3.
func (o PipelineArtifactStoreOutput) Type() PipelineArtifactStoreTypeOutput {
	return o.ApplyT(func(v PipelineArtifactStore) PipelineArtifactStoreType { return v.Type }).(PipelineArtifactStoreTypeOutput)
}

type PipelineArtifactStorePtrOutput struct{ *pulumi.OutputState }

func (PipelineArtifactStorePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineArtifactStore)(nil)).Elem()
}

func (o PipelineArtifactStorePtrOutput) ToPipelineArtifactStorePtrOutput() PipelineArtifactStorePtrOutput {
	return o
}

func (o PipelineArtifactStorePtrOutput) ToPipelineArtifactStorePtrOutputWithContext(ctx context.Context) PipelineArtifactStorePtrOutput {
	return o
}

func (o PipelineArtifactStorePtrOutput) Elem() PipelineArtifactStoreOutput {
	return o.ApplyT(func(v *PipelineArtifactStore) PipelineArtifactStore {
		if v != nil {
			return *v
		}
		var ret PipelineArtifactStore
		return ret
	}).(PipelineArtifactStoreOutput)
}

// The encryption key used to encrypt the data in the artifact store, such as an AWS Key Management Service ( AWS KMS) key. If this is undefined, the default key for Amazon S3 is used. To see an example artifact store encryption key field, see the example structure here: [AWS::CodePipeline::Pipeline](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codepipeline-pipeline.html) .
func (o PipelineArtifactStorePtrOutput) EncryptionKey() PipelineEncryptionKeyPtrOutput {
	return o.ApplyT(func(v *PipelineArtifactStore) *PipelineEncryptionKey {
		if v == nil {
			return nil
		}
		return v.EncryptionKey
	}).(PipelineEncryptionKeyPtrOutput)
}

// The S3 bucket used for storing the artifacts for a pipeline. You can specify the name of an S3 bucket but not a folder in the bucket. A folder to contain the pipeline artifacts is created for you based on the name of the pipeline. You can use any S3 bucket in the same AWS Region as the pipeline to store your pipeline artifacts.
func (o PipelineArtifactStorePtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineArtifactStore) *string {
		if v == nil {
			return nil
		}
		return &v.Location
	}).(pulumi.StringPtrOutput)
}

// The type of the artifact store, such as S3.
func (o PipelineArtifactStorePtrOutput) Type() PipelineArtifactStoreTypePtrOutput {
	return o.ApplyT(func(v *PipelineArtifactStore) *PipelineArtifactStoreType {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(PipelineArtifactStoreTypePtrOutput)
}

// A mapping of artifactStore objects and their corresponding AWS Regions. There must be an artifact store for the pipeline Region and for each cross-region action in the pipeline.
type PipelineArtifactStoreMap struct {
	// Represents information about the S3 bucket where artifacts are stored for the pipeline.
	//
	// > You must include either `artifactStore` or `artifactStores` in your pipeline, but you cannot use both. If you create a cross-region action in your pipeline, you must use `artifactStores` .
	ArtifactStore PipelineArtifactStore `pulumi:"artifactStore"`
	// The action declaration's AWS Region, such as us-east-1.
	Region string `pulumi:"region"`
}

// PipelineArtifactStoreMapInput is an input type that accepts PipelineArtifactStoreMap and PipelineArtifactStoreMapOutput values.
// You can construct a concrete instance of `PipelineArtifactStoreMapInput` via:
//
//	PipelineArtifactStoreMap{ "key": PipelineArtifactStoreArgs{...} }
type PipelineArtifactStoreMapInput interface {
	pulumi.Input

	ToPipelineArtifactStoreMapOutput() PipelineArtifactStoreMapOutput
	ToPipelineArtifactStoreMapOutputWithContext(context.Context) PipelineArtifactStoreMapOutput
}

// A mapping of artifactStore objects and their corresponding AWS Regions. There must be an artifact store for the pipeline Region and for each cross-region action in the pipeline.
type PipelineArtifactStoreMapArgs struct {
	// Represents information about the S3 bucket where artifacts are stored for the pipeline.
	//
	// > You must include either `artifactStore` or `artifactStores` in your pipeline, but you cannot use both. If you create a cross-region action in your pipeline, you must use `artifactStores` .
	ArtifactStore PipelineArtifactStoreInput `pulumi:"artifactStore"`
	// The action declaration's AWS Region, such as us-east-1.
	Region pulumi.StringInput `pulumi:"region"`
}

func (PipelineArtifactStoreMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineArtifactStoreMap)(nil)).Elem()
}

func (i PipelineArtifactStoreMapArgs) ToPipelineArtifactStoreMapOutput() PipelineArtifactStoreMapOutput {
	return i.ToPipelineArtifactStoreMapOutputWithContext(context.Background())
}

func (i PipelineArtifactStoreMapArgs) ToPipelineArtifactStoreMapOutputWithContext(ctx context.Context) PipelineArtifactStoreMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineArtifactStoreMapOutput)
}

// PipelineArtifactStoreMapArrayInput is an input type that accepts PipelineArtifactStoreMapArray and PipelineArtifactStoreMapArrayOutput values.
// You can construct a concrete instance of `PipelineArtifactStoreMapArrayInput` via:
//
//	PipelineArtifactStoreMapArray{ PipelineArtifactStoreMapArgs{...} }
type PipelineArtifactStoreMapArrayInput interface {
	pulumi.Input

	ToPipelineArtifactStoreMapArrayOutput() PipelineArtifactStoreMapArrayOutput
	ToPipelineArtifactStoreMapArrayOutputWithContext(context.Context) PipelineArtifactStoreMapArrayOutput
}

type PipelineArtifactStoreMapArray []PipelineArtifactStoreMapInput

func (PipelineArtifactStoreMapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineArtifactStoreMap)(nil)).Elem()
}

func (i PipelineArtifactStoreMapArray) ToPipelineArtifactStoreMapArrayOutput() PipelineArtifactStoreMapArrayOutput {
	return i.ToPipelineArtifactStoreMapArrayOutputWithContext(context.Background())
}

func (i PipelineArtifactStoreMapArray) ToPipelineArtifactStoreMapArrayOutputWithContext(ctx context.Context) PipelineArtifactStoreMapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineArtifactStoreMapArrayOutput)
}

// A mapping of artifactStore objects and their corresponding AWS Regions. There must be an artifact store for the pipeline Region and for each cross-region action in the pipeline.
type PipelineArtifactStoreMapOutput struct{ *pulumi.OutputState }

func (PipelineArtifactStoreMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineArtifactStoreMap)(nil)).Elem()
}

func (o PipelineArtifactStoreMapOutput) ToPipelineArtifactStoreMapOutput() PipelineArtifactStoreMapOutput {
	return o
}

func (o PipelineArtifactStoreMapOutput) ToPipelineArtifactStoreMapOutputWithContext(ctx context.Context) PipelineArtifactStoreMapOutput {
	return o
}

// Represents information about the S3 bucket where artifacts are stored for the pipeline.
//
// > You must include either `artifactStore` or `artifactStores` in your pipeline, but you cannot use both. If you create a cross-region action in your pipeline, you must use `artifactStores` .
func (o PipelineArtifactStoreMapOutput) ArtifactStore() PipelineArtifactStoreOutput {
	return o.ApplyT(func(v PipelineArtifactStoreMap) PipelineArtifactStore { return v.ArtifactStore }).(PipelineArtifactStoreOutput)
}

// The action declaration's AWS Region, such as us-east-1.
func (o PipelineArtifactStoreMapOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineArtifactStoreMap) string { return v.Region }).(pulumi.StringOutput)
}

type PipelineArtifactStoreMapArrayOutput struct{ *pulumi.OutputState }

func (PipelineArtifactStoreMapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineArtifactStoreMap)(nil)).Elem()
}

func (o PipelineArtifactStoreMapArrayOutput) ToPipelineArtifactStoreMapArrayOutput() PipelineArtifactStoreMapArrayOutput {
	return o
}

func (o PipelineArtifactStoreMapArrayOutput) ToPipelineArtifactStoreMapArrayOutputWithContext(ctx context.Context) PipelineArtifactStoreMapArrayOutput {
	return o
}

func (o PipelineArtifactStoreMapArrayOutput) Index(i pulumi.IntInput) PipelineArtifactStoreMapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipelineArtifactStoreMap {
		return vs[0].([]PipelineArtifactStoreMap)[vs[1].(int)]
	}).(PipelineArtifactStoreMapOutput)
}

// The configuration that specifies the rules to run before stage starts.
type PipelineBeforeEntryConditions struct {
	// The conditions that are configured as entry conditions.
	Conditions []PipelineCondition `pulumi:"conditions"`
}

// PipelineBeforeEntryConditionsInput is an input type that accepts PipelineBeforeEntryConditionsArgs and PipelineBeforeEntryConditionsOutput values.
// You can construct a concrete instance of `PipelineBeforeEntryConditionsInput` via:
//
//	PipelineBeforeEntryConditionsArgs{...}
type PipelineBeforeEntryConditionsInput interface {
	pulumi.Input

	ToPipelineBeforeEntryConditionsOutput() PipelineBeforeEntryConditionsOutput
	ToPipelineBeforeEntryConditionsOutputWithContext(context.Context) PipelineBeforeEntryConditionsOutput
}

// The configuration that specifies the rules to run before stage starts.
type PipelineBeforeEntryConditionsArgs struct {
	// The conditions that are configured as entry conditions.
	Conditions PipelineConditionArrayInput `pulumi:"conditions"`
}

func (PipelineBeforeEntryConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineBeforeEntryConditions)(nil)).Elem()
}

func (i PipelineBeforeEntryConditionsArgs) ToPipelineBeforeEntryConditionsOutput() PipelineBeforeEntryConditionsOutput {
	return i.ToPipelineBeforeEntryConditionsOutputWithContext(context.Background())
}

func (i PipelineBeforeEntryConditionsArgs) ToPipelineBeforeEntryConditionsOutputWithContext(ctx context.Context) PipelineBeforeEntryConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineBeforeEntryConditionsOutput)
}

func (i PipelineBeforeEntryConditionsArgs) ToPipelineBeforeEntryConditionsPtrOutput() PipelineBeforeEntryConditionsPtrOutput {
	return i.ToPipelineBeforeEntryConditionsPtrOutputWithContext(context.Background())
}

func (i PipelineBeforeEntryConditionsArgs) ToPipelineBeforeEntryConditionsPtrOutputWithContext(ctx context.Context) PipelineBeforeEntryConditionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineBeforeEntryConditionsOutput).ToPipelineBeforeEntryConditionsPtrOutputWithContext(ctx)
}

// PipelineBeforeEntryConditionsPtrInput is an input type that accepts PipelineBeforeEntryConditionsArgs, PipelineBeforeEntryConditionsPtr and PipelineBeforeEntryConditionsPtrOutput values.
// You can construct a concrete instance of `PipelineBeforeEntryConditionsPtrInput` via:
//
//	        PipelineBeforeEntryConditionsArgs{...}
//
//	or:
//
//	        nil
type PipelineBeforeEntryConditionsPtrInput interface {
	pulumi.Input

	ToPipelineBeforeEntryConditionsPtrOutput() PipelineBeforeEntryConditionsPtrOutput
	ToPipelineBeforeEntryConditionsPtrOutputWithContext(context.Context) PipelineBeforeEntryConditionsPtrOutput
}

type pipelineBeforeEntryConditionsPtrType PipelineBeforeEntryConditionsArgs

func PipelineBeforeEntryConditionsPtr(v *PipelineBeforeEntryConditionsArgs) PipelineBeforeEntryConditionsPtrInput {
	return (*pipelineBeforeEntryConditionsPtrType)(v)
}

func (*pipelineBeforeEntryConditionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineBeforeEntryConditions)(nil)).Elem()
}

func (i *pipelineBeforeEntryConditionsPtrType) ToPipelineBeforeEntryConditionsPtrOutput() PipelineBeforeEntryConditionsPtrOutput {
	return i.ToPipelineBeforeEntryConditionsPtrOutputWithContext(context.Background())
}

func (i *pipelineBeforeEntryConditionsPtrType) ToPipelineBeforeEntryConditionsPtrOutputWithContext(ctx context.Context) PipelineBeforeEntryConditionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineBeforeEntryConditionsPtrOutput)
}

// The configuration that specifies the rules to run before stage starts.
type PipelineBeforeEntryConditionsOutput struct{ *pulumi.OutputState }

func (PipelineBeforeEntryConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineBeforeEntryConditions)(nil)).Elem()
}

func (o PipelineBeforeEntryConditionsOutput) ToPipelineBeforeEntryConditionsOutput() PipelineBeforeEntryConditionsOutput {
	return o
}

func (o PipelineBeforeEntryConditionsOutput) ToPipelineBeforeEntryConditionsOutputWithContext(ctx context.Context) PipelineBeforeEntryConditionsOutput {
	return o
}

func (o PipelineBeforeEntryConditionsOutput) ToPipelineBeforeEntryConditionsPtrOutput() PipelineBeforeEntryConditionsPtrOutput {
	return o.ToPipelineBeforeEntryConditionsPtrOutputWithContext(context.Background())
}

func (o PipelineBeforeEntryConditionsOutput) ToPipelineBeforeEntryConditionsPtrOutputWithContext(ctx context.Context) PipelineBeforeEntryConditionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipelineBeforeEntryConditions) *PipelineBeforeEntryConditions {
		return &v
	}).(PipelineBeforeEntryConditionsPtrOutput)
}

// The conditions that are configured as entry conditions.
func (o PipelineBeforeEntryConditionsOutput) Conditions() PipelineConditionArrayOutput {
	return o.ApplyT(func(v PipelineBeforeEntryConditions) []PipelineCondition { return v.Conditions }).(PipelineConditionArrayOutput)
}

type PipelineBeforeEntryConditionsPtrOutput struct{ *pulumi.OutputState }

func (PipelineBeforeEntryConditionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineBeforeEntryConditions)(nil)).Elem()
}

func (o PipelineBeforeEntryConditionsPtrOutput) ToPipelineBeforeEntryConditionsPtrOutput() PipelineBeforeEntryConditionsPtrOutput {
	return o
}

func (o PipelineBeforeEntryConditionsPtrOutput) ToPipelineBeforeEntryConditionsPtrOutputWithContext(ctx context.Context) PipelineBeforeEntryConditionsPtrOutput {
	return o
}

func (o PipelineBeforeEntryConditionsPtrOutput) Elem() PipelineBeforeEntryConditionsOutput {
	return o.ApplyT(func(v *PipelineBeforeEntryConditions) PipelineBeforeEntryConditions {
		if v != nil {
			return *v
		}
		var ret PipelineBeforeEntryConditions
		return ret
	}).(PipelineBeforeEntryConditionsOutput)
}

// The conditions that are configured as entry conditions.
func (o PipelineBeforeEntryConditionsPtrOutput) Conditions() PipelineConditionArrayOutput {
	return o.ApplyT(func(v *PipelineBeforeEntryConditions) []PipelineCondition {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(PipelineConditionArrayOutput)
}

// Reserved for future use.
type PipelineBlockerDeclaration struct {
	// Reserved for future use.
	Name string `pulumi:"name"`
	// Reserved for future use.
	Type PipelineBlockerDeclarationType `pulumi:"type"`
}

// PipelineBlockerDeclarationInput is an input type that accepts PipelineBlockerDeclarationArgs and PipelineBlockerDeclarationOutput values.
// You can construct a concrete instance of `PipelineBlockerDeclarationInput` via:
//
//	PipelineBlockerDeclarationArgs{...}
type PipelineBlockerDeclarationInput interface {
	pulumi.Input

	ToPipelineBlockerDeclarationOutput() PipelineBlockerDeclarationOutput
	ToPipelineBlockerDeclarationOutputWithContext(context.Context) PipelineBlockerDeclarationOutput
}

// Reserved for future use.
type PipelineBlockerDeclarationArgs struct {
	// Reserved for future use.
	Name pulumi.StringInput `pulumi:"name"`
	// Reserved for future use.
	Type PipelineBlockerDeclarationTypeInput `pulumi:"type"`
}

func (PipelineBlockerDeclarationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineBlockerDeclaration)(nil)).Elem()
}

func (i PipelineBlockerDeclarationArgs) ToPipelineBlockerDeclarationOutput() PipelineBlockerDeclarationOutput {
	return i.ToPipelineBlockerDeclarationOutputWithContext(context.Background())
}

func (i PipelineBlockerDeclarationArgs) ToPipelineBlockerDeclarationOutputWithContext(ctx context.Context) PipelineBlockerDeclarationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineBlockerDeclarationOutput)
}

// PipelineBlockerDeclarationArrayInput is an input type that accepts PipelineBlockerDeclarationArray and PipelineBlockerDeclarationArrayOutput values.
// You can construct a concrete instance of `PipelineBlockerDeclarationArrayInput` via:
//
//	PipelineBlockerDeclarationArray{ PipelineBlockerDeclarationArgs{...} }
type PipelineBlockerDeclarationArrayInput interface {
	pulumi.Input

	ToPipelineBlockerDeclarationArrayOutput() PipelineBlockerDeclarationArrayOutput
	ToPipelineBlockerDeclarationArrayOutputWithContext(context.Context) PipelineBlockerDeclarationArrayOutput
}

type PipelineBlockerDeclarationArray []PipelineBlockerDeclarationInput

func (PipelineBlockerDeclarationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineBlockerDeclaration)(nil)).Elem()
}

func (i PipelineBlockerDeclarationArray) ToPipelineBlockerDeclarationArrayOutput() PipelineBlockerDeclarationArrayOutput {
	return i.ToPipelineBlockerDeclarationArrayOutputWithContext(context.Background())
}

func (i PipelineBlockerDeclarationArray) ToPipelineBlockerDeclarationArrayOutputWithContext(ctx context.Context) PipelineBlockerDeclarationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineBlockerDeclarationArrayOutput)
}

// Reserved for future use.
type PipelineBlockerDeclarationOutput struct{ *pulumi.OutputState }

func (PipelineBlockerDeclarationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineBlockerDeclaration)(nil)).Elem()
}

func (o PipelineBlockerDeclarationOutput) ToPipelineBlockerDeclarationOutput() PipelineBlockerDeclarationOutput {
	return o
}

func (o PipelineBlockerDeclarationOutput) ToPipelineBlockerDeclarationOutputWithContext(ctx context.Context) PipelineBlockerDeclarationOutput {
	return o
}

// Reserved for future use.
func (o PipelineBlockerDeclarationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineBlockerDeclaration) string { return v.Name }).(pulumi.StringOutput)
}

// Reserved for future use.
func (o PipelineBlockerDeclarationOutput) Type() PipelineBlockerDeclarationTypeOutput {
	return o.ApplyT(func(v PipelineBlockerDeclaration) PipelineBlockerDeclarationType { return v.Type }).(PipelineBlockerDeclarationTypeOutput)
}

type PipelineBlockerDeclarationArrayOutput struct{ *pulumi.OutputState }

func (PipelineBlockerDeclarationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineBlockerDeclaration)(nil)).Elem()
}

func (o PipelineBlockerDeclarationArrayOutput) ToPipelineBlockerDeclarationArrayOutput() PipelineBlockerDeclarationArrayOutput {
	return o
}

func (o PipelineBlockerDeclarationArrayOutput) ToPipelineBlockerDeclarationArrayOutputWithContext(ctx context.Context) PipelineBlockerDeclarationArrayOutput {
	return o
}

func (o PipelineBlockerDeclarationArrayOutput) Index(i pulumi.IntInput) PipelineBlockerDeclarationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipelineBlockerDeclaration {
		return vs[0].([]PipelineBlockerDeclaration)[vs[1].(int)]
	}).(PipelineBlockerDeclarationOutput)
}

// Represents information about condition.
type PipelineCondition struct {
	// The specified result for when the failure conditions are met, such as rolling back the stage
	Result *string `pulumi:"result"`
	// The rules that make up the condition.
	Rules []PipelineRuleDeclaration `pulumi:"rules"`
}

// PipelineConditionInput is an input type that accepts PipelineConditionArgs and PipelineConditionOutput values.
// You can construct a concrete instance of `PipelineConditionInput` via:
//
//	PipelineConditionArgs{...}
type PipelineConditionInput interface {
	pulumi.Input

	ToPipelineConditionOutput() PipelineConditionOutput
	ToPipelineConditionOutputWithContext(context.Context) PipelineConditionOutput
}

// Represents information about condition.
type PipelineConditionArgs struct {
	// The specified result for when the failure conditions are met, such as rolling back the stage
	Result pulumi.StringPtrInput `pulumi:"result"`
	// The rules that make up the condition.
	Rules PipelineRuleDeclarationArrayInput `pulumi:"rules"`
}

func (PipelineConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineCondition)(nil)).Elem()
}

func (i PipelineConditionArgs) ToPipelineConditionOutput() PipelineConditionOutput {
	return i.ToPipelineConditionOutputWithContext(context.Background())
}

func (i PipelineConditionArgs) ToPipelineConditionOutputWithContext(ctx context.Context) PipelineConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineConditionOutput)
}

// PipelineConditionArrayInput is an input type that accepts PipelineConditionArray and PipelineConditionArrayOutput values.
// You can construct a concrete instance of `PipelineConditionArrayInput` via:
//
//	PipelineConditionArray{ PipelineConditionArgs{...} }
type PipelineConditionArrayInput interface {
	pulumi.Input

	ToPipelineConditionArrayOutput() PipelineConditionArrayOutput
	ToPipelineConditionArrayOutputWithContext(context.Context) PipelineConditionArrayOutput
}

type PipelineConditionArray []PipelineConditionInput

func (PipelineConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineCondition)(nil)).Elem()
}

func (i PipelineConditionArray) ToPipelineConditionArrayOutput() PipelineConditionArrayOutput {
	return i.ToPipelineConditionArrayOutputWithContext(context.Background())
}

func (i PipelineConditionArray) ToPipelineConditionArrayOutputWithContext(ctx context.Context) PipelineConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineConditionArrayOutput)
}

// Represents information about condition.
type PipelineConditionOutput struct{ *pulumi.OutputState }

func (PipelineConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineCondition)(nil)).Elem()
}

func (o PipelineConditionOutput) ToPipelineConditionOutput() PipelineConditionOutput {
	return o
}

func (o PipelineConditionOutput) ToPipelineConditionOutputWithContext(ctx context.Context) PipelineConditionOutput {
	return o
}

// The specified result for when the failure conditions are met, such as rolling back the stage
func (o PipelineConditionOutput) Result() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineCondition) *string { return v.Result }).(pulumi.StringPtrOutput)
}

// The rules that make up the condition.
func (o PipelineConditionOutput) Rules() PipelineRuleDeclarationArrayOutput {
	return o.ApplyT(func(v PipelineCondition) []PipelineRuleDeclaration { return v.Rules }).(PipelineRuleDeclarationArrayOutput)
}

type PipelineConditionArrayOutput struct{ *pulumi.OutputState }

func (PipelineConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineCondition)(nil)).Elem()
}

func (o PipelineConditionArrayOutput) ToPipelineConditionArrayOutput() PipelineConditionArrayOutput {
	return o
}

func (o PipelineConditionArrayOutput) ToPipelineConditionArrayOutputWithContext(ctx context.Context) PipelineConditionArrayOutput {
	return o
}

func (o PipelineConditionArrayOutput) Index(i pulumi.IntInput) PipelineConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipelineCondition {
		return vs[0].([]PipelineCondition)[vs[1].(int)]
	}).(PipelineConditionOutput)
}

// Represents information about the key used to encrypt data in the artifact store, such as an AWS Key Management Service (AWS KMS) key
type PipelineEncryptionKey struct {
	// The ID used to identify the key. For an AWS KMS key, you can use the key ID, the key ARN, or the alias ARN.
	Id string `pulumi:"id"`
	// The type of encryption key, such as an AWS KMS key. When creating or updating a pipeline, the value must be set to 'KMS'.
	Type string `pulumi:"type"`
}

// PipelineEncryptionKeyInput is an input type that accepts PipelineEncryptionKeyArgs and PipelineEncryptionKeyOutput values.
// You can construct a concrete instance of `PipelineEncryptionKeyInput` via:
//
//	PipelineEncryptionKeyArgs{...}
type PipelineEncryptionKeyInput interface {
	pulumi.Input

	ToPipelineEncryptionKeyOutput() PipelineEncryptionKeyOutput
	ToPipelineEncryptionKeyOutputWithContext(context.Context) PipelineEncryptionKeyOutput
}

// Represents information about the key used to encrypt data in the artifact store, such as an AWS Key Management Service (AWS KMS) key
type PipelineEncryptionKeyArgs struct {
	// The ID used to identify the key. For an AWS KMS key, you can use the key ID, the key ARN, or the alias ARN.
	Id pulumi.StringInput `pulumi:"id"`
	// The type of encryption key, such as an AWS KMS key. When creating or updating a pipeline, the value must be set to 'KMS'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (PipelineEncryptionKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineEncryptionKey)(nil)).Elem()
}

func (i PipelineEncryptionKeyArgs) ToPipelineEncryptionKeyOutput() PipelineEncryptionKeyOutput {
	return i.ToPipelineEncryptionKeyOutputWithContext(context.Background())
}

func (i PipelineEncryptionKeyArgs) ToPipelineEncryptionKeyOutputWithContext(ctx context.Context) PipelineEncryptionKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineEncryptionKeyOutput)
}

func (i PipelineEncryptionKeyArgs) ToPipelineEncryptionKeyPtrOutput() PipelineEncryptionKeyPtrOutput {
	return i.ToPipelineEncryptionKeyPtrOutputWithContext(context.Background())
}

func (i PipelineEncryptionKeyArgs) ToPipelineEncryptionKeyPtrOutputWithContext(ctx context.Context) PipelineEncryptionKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineEncryptionKeyOutput).ToPipelineEncryptionKeyPtrOutputWithContext(ctx)
}

// PipelineEncryptionKeyPtrInput is an input type that accepts PipelineEncryptionKeyArgs, PipelineEncryptionKeyPtr and PipelineEncryptionKeyPtrOutput values.
// You can construct a concrete instance of `PipelineEncryptionKeyPtrInput` via:
//
//	        PipelineEncryptionKeyArgs{...}
//
//	or:
//
//	        nil
type PipelineEncryptionKeyPtrInput interface {
	pulumi.Input

	ToPipelineEncryptionKeyPtrOutput() PipelineEncryptionKeyPtrOutput
	ToPipelineEncryptionKeyPtrOutputWithContext(context.Context) PipelineEncryptionKeyPtrOutput
}

type pipelineEncryptionKeyPtrType PipelineEncryptionKeyArgs

func PipelineEncryptionKeyPtr(v *PipelineEncryptionKeyArgs) PipelineEncryptionKeyPtrInput {
	return (*pipelineEncryptionKeyPtrType)(v)
}

func (*pipelineEncryptionKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineEncryptionKey)(nil)).Elem()
}

func (i *pipelineEncryptionKeyPtrType) ToPipelineEncryptionKeyPtrOutput() PipelineEncryptionKeyPtrOutput {
	return i.ToPipelineEncryptionKeyPtrOutputWithContext(context.Background())
}

func (i *pipelineEncryptionKeyPtrType) ToPipelineEncryptionKeyPtrOutputWithContext(ctx context.Context) PipelineEncryptionKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineEncryptionKeyPtrOutput)
}

// Represents information about the key used to encrypt data in the artifact store, such as an AWS Key Management Service (AWS KMS) key
type PipelineEncryptionKeyOutput struct{ *pulumi.OutputState }

func (PipelineEncryptionKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineEncryptionKey)(nil)).Elem()
}

func (o PipelineEncryptionKeyOutput) ToPipelineEncryptionKeyOutput() PipelineEncryptionKeyOutput {
	return o
}

func (o PipelineEncryptionKeyOutput) ToPipelineEncryptionKeyOutputWithContext(ctx context.Context) PipelineEncryptionKeyOutput {
	return o
}

func (o PipelineEncryptionKeyOutput) ToPipelineEncryptionKeyPtrOutput() PipelineEncryptionKeyPtrOutput {
	return o.ToPipelineEncryptionKeyPtrOutputWithContext(context.Background())
}

func (o PipelineEncryptionKeyOutput) ToPipelineEncryptionKeyPtrOutputWithContext(ctx context.Context) PipelineEncryptionKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipelineEncryptionKey) *PipelineEncryptionKey {
		return &v
	}).(PipelineEncryptionKeyPtrOutput)
}

// The ID used to identify the key. For an AWS KMS key, you can use the key ID, the key ARN, or the alias ARN.
func (o PipelineEncryptionKeyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineEncryptionKey) string { return v.Id }).(pulumi.StringOutput)
}

// The type of encryption key, such as an AWS KMS key. When creating or updating a pipeline, the value must be set to 'KMS'.
func (o PipelineEncryptionKeyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineEncryptionKey) string { return v.Type }).(pulumi.StringOutput)
}

type PipelineEncryptionKeyPtrOutput struct{ *pulumi.OutputState }

func (PipelineEncryptionKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineEncryptionKey)(nil)).Elem()
}

func (o PipelineEncryptionKeyPtrOutput) ToPipelineEncryptionKeyPtrOutput() PipelineEncryptionKeyPtrOutput {
	return o
}

func (o PipelineEncryptionKeyPtrOutput) ToPipelineEncryptionKeyPtrOutputWithContext(ctx context.Context) PipelineEncryptionKeyPtrOutput {
	return o
}

func (o PipelineEncryptionKeyPtrOutput) Elem() PipelineEncryptionKeyOutput {
	return o.ApplyT(func(v *PipelineEncryptionKey) PipelineEncryptionKey {
		if v != nil {
			return *v
		}
		var ret PipelineEncryptionKey
		return ret
	}).(PipelineEncryptionKeyOutput)
}

// The ID used to identify the key. For an AWS KMS key, you can use the key ID, the key ARN, or the alias ARN.
func (o PipelineEncryptionKeyPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineEncryptionKey) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// The type of encryption key, such as an AWS KMS key. When creating or updating a pipeline, the value must be set to 'KMS'.
func (o PipelineEncryptionKeyPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineEncryptionKey) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Represents information about the environment variable of an action.
type PipelineEnvironmentVariable struct {
	// The name of the environment variable.
	Name string `pulumi:"name"`
	// The value of the environment variable.
	Value string `pulumi:"value"`
}

// PipelineEnvironmentVariableInput is an input type that accepts PipelineEnvironmentVariableArgs and PipelineEnvironmentVariableOutput values.
// You can construct a concrete instance of `PipelineEnvironmentVariableInput` via:
//
//	PipelineEnvironmentVariableArgs{...}
type PipelineEnvironmentVariableInput interface {
	pulumi.Input

	ToPipelineEnvironmentVariableOutput() PipelineEnvironmentVariableOutput
	ToPipelineEnvironmentVariableOutputWithContext(context.Context) PipelineEnvironmentVariableOutput
}

// Represents information about the environment variable of an action.
type PipelineEnvironmentVariableArgs struct {
	// The name of the environment variable.
	Name pulumi.StringInput `pulumi:"name"`
	// The value of the environment variable.
	Value pulumi.StringInput `pulumi:"value"`
}

func (PipelineEnvironmentVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineEnvironmentVariable)(nil)).Elem()
}

func (i PipelineEnvironmentVariableArgs) ToPipelineEnvironmentVariableOutput() PipelineEnvironmentVariableOutput {
	return i.ToPipelineEnvironmentVariableOutputWithContext(context.Background())
}

func (i PipelineEnvironmentVariableArgs) ToPipelineEnvironmentVariableOutputWithContext(ctx context.Context) PipelineEnvironmentVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineEnvironmentVariableOutput)
}

// PipelineEnvironmentVariableArrayInput is an input type that accepts PipelineEnvironmentVariableArray and PipelineEnvironmentVariableArrayOutput values.
// You can construct a concrete instance of `PipelineEnvironmentVariableArrayInput` via:
//
//	PipelineEnvironmentVariableArray{ PipelineEnvironmentVariableArgs{...} }
type PipelineEnvironmentVariableArrayInput interface {
	pulumi.Input

	ToPipelineEnvironmentVariableArrayOutput() PipelineEnvironmentVariableArrayOutput
	ToPipelineEnvironmentVariableArrayOutputWithContext(context.Context) PipelineEnvironmentVariableArrayOutput
}

type PipelineEnvironmentVariableArray []PipelineEnvironmentVariableInput

func (PipelineEnvironmentVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineEnvironmentVariable)(nil)).Elem()
}

func (i PipelineEnvironmentVariableArray) ToPipelineEnvironmentVariableArrayOutput() PipelineEnvironmentVariableArrayOutput {
	return i.ToPipelineEnvironmentVariableArrayOutputWithContext(context.Background())
}

func (i PipelineEnvironmentVariableArray) ToPipelineEnvironmentVariableArrayOutputWithContext(ctx context.Context) PipelineEnvironmentVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineEnvironmentVariableArrayOutput)
}

// Represents information about the environment variable of an action.
type PipelineEnvironmentVariableOutput struct{ *pulumi.OutputState }

func (PipelineEnvironmentVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineEnvironmentVariable)(nil)).Elem()
}

func (o PipelineEnvironmentVariableOutput) ToPipelineEnvironmentVariableOutput() PipelineEnvironmentVariableOutput {
	return o
}

func (o PipelineEnvironmentVariableOutput) ToPipelineEnvironmentVariableOutputWithContext(ctx context.Context) PipelineEnvironmentVariableOutput {
	return o
}

// The name of the environment variable.
func (o PipelineEnvironmentVariableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineEnvironmentVariable) string { return v.Name }).(pulumi.StringOutput)
}

// The value of the environment variable.
func (o PipelineEnvironmentVariableOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineEnvironmentVariable) string { return v.Value }).(pulumi.StringOutput)
}

type PipelineEnvironmentVariableArrayOutput struct{ *pulumi.OutputState }

func (PipelineEnvironmentVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineEnvironmentVariable)(nil)).Elem()
}

func (o PipelineEnvironmentVariableArrayOutput) ToPipelineEnvironmentVariableArrayOutput() PipelineEnvironmentVariableArrayOutput {
	return o
}

func (o PipelineEnvironmentVariableArrayOutput) ToPipelineEnvironmentVariableArrayOutputWithContext(ctx context.Context) PipelineEnvironmentVariableArrayOutput {
	return o
}

func (o PipelineEnvironmentVariableArrayOutput) Index(i pulumi.IntInput) PipelineEnvironmentVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipelineEnvironmentVariable {
		return vs[0].([]PipelineEnvironmentVariable)[vs[1].(int)]
	}).(PipelineEnvironmentVariableOutput)
}

// The configuration that specifies the result, such as rollback, to occur upon stage failure
type PipelineFailureConditions struct {
	// The conditions that are configured as failure conditions. For more information about conditions, see [Stage conditions](https://docs.aws.amazon.com/codepipeline/latest/userguide/stage-conditions.html) and [How do stage conditions work?](https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts-how-it-works-conditions.html) .
	Conditions []PipelineCondition `pulumi:"conditions"`
	// The specified result for when the failure conditions are met, such as rolling back the stage
	Result *PipelineFailureConditionsResult `pulumi:"result"`
	// The configuration that specifies the retry configuration for a stage
	RetryConfiguration *PipelineFailureConditionsRetryConfigurationProperties `pulumi:"retryConfiguration"`
}

// PipelineFailureConditionsInput is an input type that accepts PipelineFailureConditionsArgs and PipelineFailureConditionsOutput values.
// You can construct a concrete instance of `PipelineFailureConditionsInput` via:
//
//	PipelineFailureConditionsArgs{...}
type PipelineFailureConditionsInput interface {
	pulumi.Input

	ToPipelineFailureConditionsOutput() PipelineFailureConditionsOutput
	ToPipelineFailureConditionsOutputWithContext(context.Context) PipelineFailureConditionsOutput
}

// The configuration that specifies the result, such as rollback, to occur upon stage failure
type PipelineFailureConditionsArgs struct {
	// The conditions that are configured as failure conditions. For more information about conditions, see [Stage conditions](https://docs.aws.amazon.com/codepipeline/latest/userguide/stage-conditions.html) and [How do stage conditions work?](https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts-how-it-works-conditions.html) .
	Conditions PipelineConditionArrayInput `pulumi:"conditions"`
	// The specified result for when the failure conditions are met, such as rolling back the stage
	Result PipelineFailureConditionsResultPtrInput `pulumi:"result"`
	// The configuration that specifies the retry configuration for a stage
	RetryConfiguration PipelineFailureConditionsRetryConfigurationPropertiesPtrInput `pulumi:"retryConfiguration"`
}

func (PipelineFailureConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineFailureConditions)(nil)).Elem()
}

func (i PipelineFailureConditionsArgs) ToPipelineFailureConditionsOutput() PipelineFailureConditionsOutput {
	return i.ToPipelineFailureConditionsOutputWithContext(context.Background())
}

func (i PipelineFailureConditionsArgs) ToPipelineFailureConditionsOutputWithContext(ctx context.Context) PipelineFailureConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineFailureConditionsOutput)
}

func (i PipelineFailureConditionsArgs) ToPipelineFailureConditionsPtrOutput() PipelineFailureConditionsPtrOutput {
	return i.ToPipelineFailureConditionsPtrOutputWithContext(context.Background())
}

func (i PipelineFailureConditionsArgs) ToPipelineFailureConditionsPtrOutputWithContext(ctx context.Context) PipelineFailureConditionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineFailureConditionsOutput).ToPipelineFailureConditionsPtrOutputWithContext(ctx)
}

// PipelineFailureConditionsPtrInput is an input type that accepts PipelineFailureConditionsArgs, PipelineFailureConditionsPtr and PipelineFailureConditionsPtrOutput values.
// You can construct a concrete instance of `PipelineFailureConditionsPtrInput` via:
//
//	        PipelineFailureConditionsArgs{...}
//
//	or:
//
//	        nil
type PipelineFailureConditionsPtrInput interface {
	pulumi.Input

	ToPipelineFailureConditionsPtrOutput() PipelineFailureConditionsPtrOutput
	ToPipelineFailureConditionsPtrOutputWithContext(context.Context) PipelineFailureConditionsPtrOutput
}

type pipelineFailureConditionsPtrType PipelineFailureConditionsArgs

func PipelineFailureConditionsPtr(v *PipelineFailureConditionsArgs) PipelineFailureConditionsPtrInput {
	return (*pipelineFailureConditionsPtrType)(v)
}

func (*pipelineFailureConditionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineFailureConditions)(nil)).Elem()
}

func (i *pipelineFailureConditionsPtrType) ToPipelineFailureConditionsPtrOutput() PipelineFailureConditionsPtrOutput {
	return i.ToPipelineFailureConditionsPtrOutputWithContext(context.Background())
}

func (i *pipelineFailureConditionsPtrType) ToPipelineFailureConditionsPtrOutputWithContext(ctx context.Context) PipelineFailureConditionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineFailureConditionsPtrOutput)
}

// The configuration that specifies the result, such as rollback, to occur upon stage failure
type PipelineFailureConditionsOutput struct{ *pulumi.OutputState }

func (PipelineFailureConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineFailureConditions)(nil)).Elem()
}

func (o PipelineFailureConditionsOutput) ToPipelineFailureConditionsOutput() PipelineFailureConditionsOutput {
	return o
}

func (o PipelineFailureConditionsOutput) ToPipelineFailureConditionsOutputWithContext(ctx context.Context) PipelineFailureConditionsOutput {
	return o
}

func (o PipelineFailureConditionsOutput) ToPipelineFailureConditionsPtrOutput() PipelineFailureConditionsPtrOutput {
	return o.ToPipelineFailureConditionsPtrOutputWithContext(context.Background())
}

func (o PipelineFailureConditionsOutput) ToPipelineFailureConditionsPtrOutputWithContext(ctx context.Context) PipelineFailureConditionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipelineFailureConditions) *PipelineFailureConditions {
		return &v
	}).(PipelineFailureConditionsPtrOutput)
}

// The conditions that are configured as failure conditions. For more information about conditions, see [Stage conditions](https://docs.aws.amazon.com/codepipeline/latest/userguide/stage-conditions.html) and [How do stage conditions work?](https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts-how-it-works-conditions.html) .
func (o PipelineFailureConditionsOutput) Conditions() PipelineConditionArrayOutput {
	return o.ApplyT(func(v PipelineFailureConditions) []PipelineCondition { return v.Conditions }).(PipelineConditionArrayOutput)
}

// The specified result for when the failure conditions are met, such as rolling back the stage
func (o PipelineFailureConditionsOutput) Result() PipelineFailureConditionsResultPtrOutput {
	return o.ApplyT(func(v PipelineFailureConditions) *PipelineFailureConditionsResult { return v.Result }).(PipelineFailureConditionsResultPtrOutput)
}

// The configuration that specifies the retry configuration for a stage
func (o PipelineFailureConditionsOutput) RetryConfiguration() PipelineFailureConditionsRetryConfigurationPropertiesPtrOutput {
	return o.ApplyT(func(v PipelineFailureConditions) *PipelineFailureConditionsRetryConfigurationProperties {
		return v.RetryConfiguration
	}).(PipelineFailureConditionsRetryConfigurationPropertiesPtrOutput)
}

type PipelineFailureConditionsPtrOutput struct{ *pulumi.OutputState }

func (PipelineFailureConditionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineFailureConditions)(nil)).Elem()
}

func (o PipelineFailureConditionsPtrOutput) ToPipelineFailureConditionsPtrOutput() PipelineFailureConditionsPtrOutput {
	return o
}

func (o PipelineFailureConditionsPtrOutput) ToPipelineFailureConditionsPtrOutputWithContext(ctx context.Context) PipelineFailureConditionsPtrOutput {
	return o
}

func (o PipelineFailureConditionsPtrOutput) Elem() PipelineFailureConditionsOutput {
	return o.ApplyT(func(v *PipelineFailureConditions) PipelineFailureConditions {
		if v != nil {
			return *v
		}
		var ret PipelineFailureConditions
		return ret
	}).(PipelineFailureConditionsOutput)
}

// The conditions that are configured as failure conditions. For more information about conditions, see [Stage conditions](https://docs.aws.amazon.com/codepipeline/latest/userguide/stage-conditions.html) and [How do stage conditions work?](https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts-how-it-works-conditions.html) .
func (o PipelineFailureConditionsPtrOutput) Conditions() PipelineConditionArrayOutput {
	return o.ApplyT(func(v *PipelineFailureConditions) []PipelineCondition {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(PipelineConditionArrayOutput)
}

// The specified result for when the failure conditions are met, such as rolling back the stage
func (o PipelineFailureConditionsPtrOutput) Result() PipelineFailureConditionsResultPtrOutput {
	return o.ApplyT(func(v *PipelineFailureConditions) *PipelineFailureConditionsResult {
		if v == nil {
			return nil
		}
		return v.Result
	}).(PipelineFailureConditionsResultPtrOutput)
}

// The configuration that specifies the retry configuration for a stage
func (o PipelineFailureConditionsPtrOutput) RetryConfiguration() PipelineFailureConditionsRetryConfigurationPropertiesPtrOutput {
	return o.ApplyT(func(v *PipelineFailureConditions) *PipelineFailureConditionsRetryConfigurationProperties {
		if v == nil {
			return nil
		}
		return v.RetryConfiguration
	}).(PipelineFailureConditionsRetryConfigurationPropertiesPtrOutput)
}

// The configuration that specifies the retry configuration for a stage
type PipelineFailureConditionsRetryConfigurationProperties struct {
	// The specified retry mode type for the given stage. FAILED_ACTIONS will retry only the failed actions. ALL_ACTIONS will retry both failed and successful
	RetryMode *PipelineFailureConditionsRetryConfigurationPropertiesRetryMode `pulumi:"retryMode"`
}

// PipelineFailureConditionsRetryConfigurationPropertiesInput is an input type that accepts PipelineFailureConditionsRetryConfigurationPropertiesArgs and PipelineFailureConditionsRetryConfigurationPropertiesOutput values.
// You can construct a concrete instance of `PipelineFailureConditionsRetryConfigurationPropertiesInput` via:
//
//	PipelineFailureConditionsRetryConfigurationPropertiesArgs{...}
type PipelineFailureConditionsRetryConfigurationPropertiesInput interface {
	pulumi.Input

	ToPipelineFailureConditionsRetryConfigurationPropertiesOutput() PipelineFailureConditionsRetryConfigurationPropertiesOutput
	ToPipelineFailureConditionsRetryConfigurationPropertiesOutputWithContext(context.Context) PipelineFailureConditionsRetryConfigurationPropertiesOutput
}

// The configuration that specifies the retry configuration for a stage
type PipelineFailureConditionsRetryConfigurationPropertiesArgs struct {
	// The specified retry mode type for the given stage. FAILED_ACTIONS will retry only the failed actions. ALL_ACTIONS will retry both failed and successful
	RetryMode PipelineFailureConditionsRetryConfigurationPropertiesRetryModePtrInput `pulumi:"retryMode"`
}

func (PipelineFailureConditionsRetryConfigurationPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineFailureConditionsRetryConfigurationProperties)(nil)).Elem()
}

func (i PipelineFailureConditionsRetryConfigurationPropertiesArgs) ToPipelineFailureConditionsRetryConfigurationPropertiesOutput() PipelineFailureConditionsRetryConfigurationPropertiesOutput {
	return i.ToPipelineFailureConditionsRetryConfigurationPropertiesOutputWithContext(context.Background())
}

func (i PipelineFailureConditionsRetryConfigurationPropertiesArgs) ToPipelineFailureConditionsRetryConfigurationPropertiesOutputWithContext(ctx context.Context) PipelineFailureConditionsRetryConfigurationPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineFailureConditionsRetryConfigurationPropertiesOutput)
}

func (i PipelineFailureConditionsRetryConfigurationPropertiesArgs) ToPipelineFailureConditionsRetryConfigurationPropertiesPtrOutput() PipelineFailureConditionsRetryConfigurationPropertiesPtrOutput {
	return i.ToPipelineFailureConditionsRetryConfigurationPropertiesPtrOutputWithContext(context.Background())
}

func (i PipelineFailureConditionsRetryConfigurationPropertiesArgs) ToPipelineFailureConditionsRetryConfigurationPropertiesPtrOutputWithContext(ctx context.Context) PipelineFailureConditionsRetryConfigurationPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineFailureConditionsRetryConfigurationPropertiesOutput).ToPipelineFailureConditionsRetryConfigurationPropertiesPtrOutputWithContext(ctx)
}

// PipelineFailureConditionsRetryConfigurationPropertiesPtrInput is an input type that accepts PipelineFailureConditionsRetryConfigurationPropertiesArgs, PipelineFailureConditionsRetryConfigurationPropertiesPtr and PipelineFailureConditionsRetryConfigurationPropertiesPtrOutput values.
// You can construct a concrete instance of `PipelineFailureConditionsRetryConfigurationPropertiesPtrInput` via:
//
//	        PipelineFailureConditionsRetryConfigurationPropertiesArgs{...}
//
//	or:
//
//	        nil
type PipelineFailureConditionsRetryConfigurationPropertiesPtrInput interface {
	pulumi.Input

	ToPipelineFailureConditionsRetryConfigurationPropertiesPtrOutput() PipelineFailureConditionsRetryConfigurationPropertiesPtrOutput
	ToPipelineFailureConditionsRetryConfigurationPropertiesPtrOutputWithContext(context.Context) PipelineFailureConditionsRetryConfigurationPropertiesPtrOutput
}

type pipelineFailureConditionsRetryConfigurationPropertiesPtrType PipelineFailureConditionsRetryConfigurationPropertiesArgs

func PipelineFailureConditionsRetryConfigurationPropertiesPtr(v *PipelineFailureConditionsRetryConfigurationPropertiesArgs) PipelineFailureConditionsRetryConfigurationPropertiesPtrInput {
	return (*pipelineFailureConditionsRetryConfigurationPropertiesPtrType)(v)
}

func (*pipelineFailureConditionsRetryConfigurationPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineFailureConditionsRetryConfigurationProperties)(nil)).Elem()
}

func (i *pipelineFailureConditionsRetryConfigurationPropertiesPtrType) ToPipelineFailureConditionsRetryConfigurationPropertiesPtrOutput() PipelineFailureConditionsRetryConfigurationPropertiesPtrOutput {
	return i.ToPipelineFailureConditionsRetryConfigurationPropertiesPtrOutputWithContext(context.Background())
}

func (i *pipelineFailureConditionsRetryConfigurationPropertiesPtrType) ToPipelineFailureConditionsRetryConfigurationPropertiesPtrOutputWithContext(ctx context.Context) PipelineFailureConditionsRetryConfigurationPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineFailureConditionsRetryConfigurationPropertiesPtrOutput)
}

// The configuration that specifies the retry configuration for a stage
type PipelineFailureConditionsRetryConfigurationPropertiesOutput struct{ *pulumi.OutputState }

func (PipelineFailureConditionsRetryConfigurationPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineFailureConditionsRetryConfigurationProperties)(nil)).Elem()
}

func (o PipelineFailureConditionsRetryConfigurationPropertiesOutput) ToPipelineFailureConditionsRetryConfigurationPropertiesOutput() PipelineFailureConditionsRetryConfigurationPropertiesOutput {
	return o
}

func (o PipelineFailureConditionsRetryConfigurationPropertiesOutput) ToPipelineFailureConditionsRetryConfigurationPropertiesOutputWithContext(ctx context.Context) PipelineFailureConditionsRetryConfigurationPropertiesOutput {
	return o
}

func (o PipelineFailureConditionsRetryConfigurationPropertiesOutput) ToPipelineFailureConditionsRetryConfigurationPropertiesPtrOutput() PipelineFailureConditionsRetryConfigurationPropertiesPtrOutput {
	return o.ToPipelineFailureConditionsRetryConfigurationPropertiesPtrOutputWithContext(context.Background())
}

func (o PipelineFailureConditionsRetryConfigurationPropertiesOutput) ToPipelineFailureConditionsRetryConfigurationPropertiesPtrOutputWithContext(ctx context.Context) PipelineFailureConditionsRetryConfigurationPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipelineFailureConditionsRetryConfigurationProperties) *PipelineFailureConditionsRetryConfigurationProperties {
		return &v
	}).(PipelineFailureConditionsRetryConfigurationPropertiesPtrOutput)
}

// The specified retry mode type for the given stage. FAILED_ACTIONS will retry only the failed actions. ALL_ACTIONS will retry both failed and successful
func (o PipelineFailureConditionsRetryConfigurationPropertiesOutput) RetryMode() PipelineFailureConditionsRetryConfigurationPropertiesRetryModePtrOutput {
	return o.ApplyT(func(v PipelineFailureConditionsRetryConfigurationProperties) *PipelineFailureConditionsRetryConfigurationPropertiesRetryMode {
		return v.RetryMode
	}).(PipelineFailureConditionsRetryConfigurationPropertiesRetryModePtrOutput)
}

type PipelineFailureConditionsRetryConfigurationPropertiesPtrOutput struct{ *pulumi.OutputState }

func (PipelineFailureConditionsRetryConfigurationPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineFailureConditionsRetryConfigurationProperties)(nil)).Elem()
}

func (o PipelineFailureConditionsRetryConfigurationPropertiesPtrOutput) ToPipelineFailureConditionsRetryConfigurationPropertiesPtrOutput() PipelineFailureConditionsRetryConfigurationPropertiesPtrOutput {
	return o
}

func (o PipelineFailureConditionsRetryConfigurationPropertiesPtrOutput) ToPipelineFailureConditionsRetryConfigurationPropertiesPtrOutputWithContext(ctx context.Context) PipelineFailureConditionsRetryConfigurationPropertiesPtrOutput {
	return o
}

func (o PipelineFailureConditionsRetryConfigurationPropertiesPtrOutput) Elem() PipelineFailureConditionsRetryConfigurationPropertiesOutput {
	return o.ApplyT(func(v *PipelineFailureConditionsRetryConfigurationProperties) PipelineFailureConditionsRetryConfigurationProperties {
		if v != nil {
			return *v
		}
		var ret PipelineFailureConditionsRetryConfigurationProperties
		return ret
	}).(PipelineFailureConditionsRetryConfigurationPropertiesOutput)
}

// The specified retry mode type for the given stage. FAILED_ACTIONS will retry only the failed actions. ALL_ACTIONS will retry both failed and successful
func (o PipelineFailureConditionsRetryConfigurationPropertiesPtrOutput) RetryMode() PipelineFailureConditionsRetryConfigurationPropertiesRetryModePtrOutput {
	return o.ApplyT(func(v *PipelineFailureConditionsRetryConfigurationProperties) *PipelineFailureConditionsRetryConfigurationPropertiesRetryMode {
		if v == nil {
			return nil
		}
		return v.RetryMode
	}).(PipelineFailureConditionsRetryConfigurationPropertiesRetryModePtrOutput)
}

// The Git repository branches specified as filter criteria to start the pipeline.
type PipelineGitBranchFilterCriteria struct {
	// The list of patterns of Git branches that, when a commit is pushed, are to be excluded from starting the pipeline.
	Excludes []string `pulumi:"excludes"`
	// The list of patterns of Git branches that, when a commit is pushed, are to be included as criteria that starts the pipeline.
	Includes []string `pulumi:"includes"`
}

// PipelineGitBranchFilterCriteriaInput is an input type that accepts PipelineGitBranchFilterCriteriaArgs and PipelineGitBranchFilterCriteriaOutput values.
// You can construct a concrete instance of `PipelineGitBranchFilterCriteriaInput` via:
//
//	PipelineGitBranchFilterCriteriaArgs{...}
type PipelineGitBranchFilterCriteriaInput interface {
	pulumi.Input

	ToPipelineGitBranchFilterCriteriaOutput() PipelineGitBranchFilterCriteriaOutput
	ToPipelineGitBranchFilterCriteriaOutputWithContext(context.Context) PipelineGitBranchFilterCriteriaOutput
}

// The Git repository branches specified as filter criteria to start the pipeline.
type PipelineGitBranchFilterCriteriaArgs struct {
	// The list of patterns of Git branches that, when a commit is pushed, are to be excluded from starting the pipeline.
	Excludes pulumi.StringArrayInput `pulumi:"excludes"`
	// The list of patterns of Git branches that, when a commit is pushed, are to be included as criteria that starts the pipeline.
	Includes pulumi.StringArrayInput `pulumi:"includes"`
}

func (PipelineGitBranchFilterCriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineGitBranchFilterCriteria)(nil)).Elem()
}

func (i PipelineGitBranchFilterCriteriaArgs) ToPipelineGitBranchFilterCriteriaOutput() PipelineGitBranchFilterCriteriaOutput {
	return i.ToPipelineGitBranchFilterCriteriaOutputWithContext(context.Background())
}

func (i PipelineGitBranchFilterCriteriaArgs) ToPipelineGitBranchFilterCriteriaOutputWithContext(ctx context.Context) PipelineGitBranchFilterCriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineGitBranchFilterCriteriaOutput)
}

func (i PipelineGitBranchFilterCriteriaArgs) ToPipelineGitBranchFilterCriteriaPtrOutput() PipelineGitBranchFilterCriteriaPtrOutput {
	return i.ToPipelineGitBranchFilterCriteriaPtrOutputWithContext(context.Background())
}

func (i PipelineGitBranchFilterCriteriaArgs) ToPipelineGitBranchFilterCriteriaPtrOutputWithContext(ctx context.Context) PipelineGitBranchFilterCriteriaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineGitBranchFilterCriteriaOutput).ToPipelineGitBranchFilterCriteriaPtrOutputWithContext(ctx)
}

// PipelineGitBranchFilterCriteriaPtrInput is an input type that accepts PipelineGitBranchFilterCriteriaArgs, PipelineGitBranchFilterCriteriaPtr and PipelineGitBranchFilterCriteriaPtrOutput values.
// You can construct a concrete instance of `PipelineGitBranchFilterCriteriaPtrInput` via:
//
//	        PipelineGitBranchFilterCriteriaArgs{...}
//
//	or:
//
//	        nil
type PipelineGitBranchFilterCriteriaPtrInput interface {
	pulumi.Input

	ToPipelineGitBranchFilterCriteriaPtrOutput() PipelineGitBranchFilterCriteriaPtrOutput
	ToPipelineGitBranchFilterCriteriaPtrOutputWithContext(context.Context) PipelineGitBranchFilterCriteriaPtrOutput
}

type pipelineGitBranchFilterCriteriaPtrType PipelineGitBranchFilterCriteriaArgs

func PipelineGitBranchFilterCriteriaPtr(v *PipelineGitBranchFilterCriteriaArgs) PipelineGitBranchFilterCriteriaPtrInput {
	return (*pipelineGitBranchFilterCriteriaPtrType)(v)
}

func (*pipelineGitBranchFilterCriteriaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineGitBranchFilterCriteria)(nil)).Elem()
}

func (i *pipelineGitBranchFilterCriteriaPtrType) ToPipelineGitBranchFilterCriteriaPtrOutput() PipelineGitBranchFilterCriteriaPtrOutput {
	return i.ToPipelineGitBranchFilterCriteriaPtrOutputWithContext(context.Background())
}

func (i *pipelineGitBranchFilterCriteriaPtrType) ToPipelineGitBranchFilterCriteriaPtrOutputWithContext(ctx context.Context) PipelineGitBranchFilterCriteriaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineGitBranchFilterCriteriaPtrOutput)
}

// The Git repository branches specified as filter criteria to start the pipeline.
type PipelineGitBranchFilterCriteriaOutput struct{ *pulumi.OutputState }

func (PipelineGitBranchFilterCriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineGitBranchFilterCriteria)(nil)).Elem()
}

func (o PipelineGitBranchFilterCriteriaOutput) ToPipelineGitBranchFilterCriteriaOutput() PipelineGitBranchFilterCriteriaOutput {
	return o
}

func (o PipelineGitBranchFilterCriteriaOutput) ToPipelineGitBranchFilterCriteriaOutputWithContext(ctx context.Context) PipelineGitBranchFilterCriteriaOutput {
	return o
}

func (o PipelineGitBranchFilterCriteriaOutput) ToPipelineGitBranchFilterCriteriaPtrOutput() PipelineGitBranchFilterCriteriaPtrOutput {
	return o.ToPipelineGitBranchFilterCriteriaPtrOutputWithContext(context.Background())
}

func (o PipelineGitBranchFilterCriteriaOutput) ToPipelineGitBranchFilterCriteriaPtrOutputWithContext(ctx context.Context) PipelineGitBranchFilterCriteriaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipelineGitBranchFilterCriteria) *PipelineGitBranchFilterCriteria {
		return &v
	}).(PipelineGitBranchFilterCriteriaPtrOutput)
}

// The list of patterns of Git branches that, when a commit is pushed, are to be excluded from starting the pipeline.
func (o PipelineGitBranchFilterCriteriaOutput) Excludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipelineGitBranchFilterCriteria) []string { return v.Excludes }).(pulumi.StringArrayOutput)
}

// The list of patterns of Git branches that, when a commit is pushed, are to be included as criteria that starts the pipeline.
func (o PipelineGitBranchFilterCriteriaOutput) Includes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipelineGitBranchFilterCriteria) []string { return v.Includes }).(pulumi.StringArrayOutput)
}

type PipelineGitBranchFilterCriteriaPtrOutput struct{ *pulumi.OutputState }

func (PipelineGitBranchFilterCriteriaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineGitBranchFilterCriteria)(nil)).Elem()
}

func (o PipelineGitBranchFilterCriteriaPtrOutput) ToPipelineGitBranchFilterCriteriaPtrOutput() PipelineGitBranchFilterCriteriaPtrOutput {
	return o
}

func (o PipelineGitBranchFilterCriteriaPtrOutput) ToPipelineGitBranchFilterCriteriaPtrOutputWithContext(ctx context.Context) PipelineGitBranchFilterCriteriaPtrOutput {
	return o
}

func (o PipelineGitBranchFilterCriteriaPtrOutput) Elem() PipelineGitBranchFilterCriteriaOutput {
	return o.ApplyT(func(v *PipelineGitBranchFilterCriteria) PipelineGitBranchFilterCriteria {
		if v != nil {
			return *v
		}
		var ret PipelineGitBranchFilterCriteria
		return ret
	}).(PipelineGitBranchFilterCriteriaOutput)
}

// The list of patterns of Git branches that, when a commit is pushed, are to be excluded from starting the pipeline.
func (o PipelineGitBranchFilterCriteriaPtrOutput) Excludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PipelineGitBranchFilterCriteria) []string {
		if v == nil {
			return nil
		}
		return v.Excludes
	}).(pulumi.StringArrayOutput)
}

// The list of patterns of Git branches that, when a commit is pushed, are to be included as criteria that starts the pipeline.
func (o PipelineGitBranchFilterCriteriaPtrOutput) Includes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PipelineGitBranchFilterCriteria) []string {
		if v == nil {
			return nil
		}
		return v.Includes
	}).(pulumi.StringArrayOutput)
}

// A type of trigger configuration for Git-based source actions.
type PipelineGitConfiguration struct {
	// The field where the repository event that will start the pipeline is specified as pull requests.
	PullRequest []PipelineGitPullRequestFilter `pulumi:"pullRequest"`
	// The field where the repository event that will start the pipeline, such as pushing Git tags, is specified with details.
	Push []PipelineGitPushFilter `pulumi:"push"`
	// The name of the pipeline source action where the trigger configuration, such as Git tags, is specified. The trigger configuration will start the pipeline upon the specified change only.
	SourceActionName string `pulumi:"sourceActionName"`
}

// PipelineGitConfigurationInput is an input type that accepts PipelineGitConfigurationArgs and PipelineGitConfigurationOutput values.
// You can construct a concrete instance of `PipelineGitConfigurationInput` via:
//
//	PipelineGitConfigurationArgs{...}
type PipelineGitConfigurationInput interface {
	pulumi.Input

	ToPipelineGitConfigurationOutput() PipelineGitConfigurationOutput
	ToPipelineGitConfigurationOutputWithContext(context.Context) PipelineGitConfigurationOutput
}

// A type of trigger configuration for Git-based source actions.
type PipelineGitConfigurationArgs struct {
	// The field where the repository event that will start the pipeline is specified as pull requests.
	PullRequest PipelineGitPullRequestFilterArrayInput `pulumi:"pullRequest"`
	// The field where the repository event that will start the pipeline, such as pushing Git tags, is specified with details.
	Push PipelineGitPushFilterArrayInput `pulumi:"push"`
	// The name of the pipeline source action where the trigger configuration, such as Git tags, is specified. The trigger configuration will start the pipeline upon the specified change only.
	SourceActionName pulumi.StringInput `pulumi:"sourceActionName"`
}

func (PipelineGitConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineGitConfiguration)(nil)).Elem()
}

func (i PipelineGitConfigurationArgs) ToPipelineGitConfigurationOutput() PipelineGitConfigurationOutput {
	return i.ToPipelineGitConfigurationOutputWithContext(context.Background())
}

func (i PipelineGitConfigurationArgs) ToPipelineGitConfigurationOutputWithContext(ctx context.Context) PipelineGitConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineGitConfigurationOutput)
}

func (i PipelineGitConfigurationArgs) ToPipelineGitConfigurationPtrOutput() PipelineGitConfigurationPtrOutput {
	return i.ToPipelineGitConfigurationPtrOutputWithContext(context.Background())
}

func (i PipelineGitConfigurationArgs) ToPipelineGitConfigurationPtrOutputWithContext(ctx context.Context) PipelineGitConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineGitConfigurationOutput).ToPipelineGitConfigurationPtrOutputWithContext(ctx)
}

// PipelineGitConfigurationPtrInput is an input type that accepts PipelineGitConfigurationArgs, PipelineGitConfigurationPtr and PipelineGitConfigurationPtrOutput values.
// You can construct a concrete instance of `PipelineGitConfigurationPtrInput` via:
//
//	        PipelineGitConfigurationArgs{...}
//
//	or:
//
//	        nil
type PipelineGitConfigurationPtrInput interface {
	pulumi.Input

	ToPipelineGitConfigurationPtrOutput() PipelineGitConfigurationPtrOutput
	ToPipelineGitConfigurationPtrOutputWithContext(context.Context) PipelineGitConfigurationPtrOutput
}

type pipelineGitConfigurationPtrType PipelineGitConfigurationArgs

func PipelineGitConfigurationPtr(v *PipelineGitConfigurationArgs) PipelineGitConfigurationPtrInput {
	return (*pipelineGitConfigurationPtrType)(v)
}

func (*pipelineGitConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineGitConfiguration)(nil)).Elem()
}

func (i *pipelineGitConfigurationPtrType) ToPipelineGitConfigurationPtrOutput() PipelineGitConfigurationPtrOutput {
	return i.ToPipelineGitConfigurationPtrOutputWithContext(context.Background())
}

func (i *pipelineGitConfigurationPtrType) ToPipelineGitConfigurationPtrOutputWithContext(ctx context.Context) PipelineGitConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineGitConfigurationPtrOutput)
}

// A type of trigger configuration for Git-based source actions.
type PipelineGitConfigurationOutput struct{ *pulumi.OutputState }

func (PipelineGitConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineGitConfiguration)(nil)).Elem()
}

func (o PipelineGitConfigurationOutput) ToPipelineGitConfigurationOutput() PipelineGitConfigurationOutput {
	return o
}

func (o PipelineGitConfigurationOutput) ToPipelineGitConfigurationOutputWithContext(ctx context.Context) PipelineGitConfigurationOutput {
	return o
}

func (o PipelineGitConfigurationOutput) ToPipelineGitConfigurationPtrOutput() PipelineGitConfigurationPtrOutput {
	return o.ToPipelineGitConfigurationPtrOutputWithContext(context.Background())
}

func (o PipelineGitConfigurationOutput) ToPipelineGitConfigurationPtrOutputWithContext(ctx context.Context) PipelineGitConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipelineGitConfiguration) *PipelineGitConfiguration {
		return &v
	}).(PipelineGitConfigurationPtrOutput)
}

// The field where the repository event that will start the pipeline is specified as pull requests.
func (o PipelineGitConfigurationOutput) PullRequest() PipelineGitPullRequestFilterArrayOutput {
	return o.ApplyT(func(v PipelineGitConfiguration) []PipelineGitPullRequestFilter { return v.PullRequest }).(PipelineGitPullRequestFilterArrayOutput)
}

// The field where the repository event that will start the pipeline, such as pushing Git tags, is specified with details.
func (o PipelineGitConfigurationOutput) Push() PipelineGitPushFilterArrayOutput {
	return o.ApplyT(func(v PipelineGitConfiguration) []PipelineGitPushFilter { return v.Push }).(PipelineGitPushFilterArrayOutput)
}

// The name of the pipeline source action where the trigger configuration, such as Git tags, is specified. The trigger configuration will start the pipeline upon the specified change only.
func (o PipelineGitConfigurationOutput) SourceActionName() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineGitConfiguration) string { return v.SourceActionName }).(pulumi.StringOutput)
}

type PipelineGitConfigurationPtrOutput struct{ *pulumi.OutputState }

func (PipelineGitConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineGitConfiguration)(nil)).Elem()
}

func (o PipelineGitConfigurationPtrOutput) ToPipelineGitConfigurationPtrOutput() PipelineGitConfigurationPtrOutput {
	return o
}

func (o PipelineGitConfigurationPtrOutput) ToPipelineGitConfigurationPtrOutputWithContext(ctx context.Context) PipelineGitConfigurationPtrOutput {
	return o
}

func (o PipelineGitConfigurationPtrOutput) Elem() PipelineGitConfigurationOutput {
	return o.ApplyT(func(v *PipelineGitConfiguration) PipelineGitConfiguration {
		if v != nil {
			return *v
		}
		var ret PipelineGitConfiguration
		return ret
	}).(PipelineGitConfigurationOutput)
}

// The field where the repository event that will start the pipeline is specified as pull requests.
func (o PipelineGitConfigurationPtrOutput) PullRequest() PipelineGitPullRequestFilterArrayOutput {
	return o.ApplyT(func(v *PipelineGitConfiguration) []PipelineGitPullRequestFilter {
		if v == nil {
			return nil
		}
		return v.PullRequest
	}).(PipelineGitPullRequestFilterArrayOutput)
}

// The field where the repository event that will start the pipeline, such as pushing Git tags, is specified with details.
func (o PipelineGitConfigurationPtrOutput) Push() PipelineGitPushFilterArrayOutput {
	return o.ApplyT(func(v *PipelineGitConfiguration) []PipelineGitPushFilter {
		if v == nil {
			return nil
		}
		return v.Push
	}).(PipelineGitPushFilterArrayOutput)
}

// The name of the pipeline source action where the trigger configuration, such as Git tags, is specified. The trigger configuration will start the pipeline upon the specified change only.
func (o PipelineGitConfigurationPtrOutput) SourceActionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineGitConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.SourceActionName
	}).(pulumi.StringPtrOutput)
}

// The Git repository file paths specified as filter criteria to start the pipeline.
type PipelineGitFilePathFilterCriteria struct {
	// The list of patterns of Git repository file paths that, when a commit is pushed, are to be excluded from starting the pipeline.
	Excludes []string `pulumi:"excludes"`
	// The list of patterns of Git repository file paths that, when a commit is pushed, are to be included as criteria that starts the pipeline.
	Includes []string `pulumi:"includes"`
}

// PipelineGitFilePathFilterCriteriaInput is an input type that accepts PipelineGitFilePathFilterCriteriaArgs and PipelineGitFilePathFilterCriteriaOutput values.
// You can construct a concrete instance of `PipelineGitFilePathFilterCriteriaInput` via:
//
//	PipelineGitFilePathFilterCriteriaArgs{...}
type PipelineGitFilePathFilterCriteriaInput interface {
	pulumi.Input

	ToPipelineGitFilePathFilterCriteriaOutput() PipelineGitFilePathFilterCriteriaOutput
	ToPipelineGitFilePathFilterCriteriaOutputWithContext(context.Context) PipelineGitFilePathFilterCriteriaOutput
}

// The Git repository file paths specified as filter criteria to start the pipeline.
type PipelineGitFilePathFilterCriteriaArgs struct {
	// The list of patterns of Git repository file paths that, when a commit is pushed, are to be excluded from starting the pipeline.
	Excludes pulumi.StringArrayInput `pulumi:"excludes"`
	// The list of patterns of Git repository file paths that, when a commit is pushed, are to be included as criteria that starts the pipeline.
	Includes pulumi.StringArrayInput `pulumi:"includes"`
}

func (PipelineGitFilePathFilterCriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineGitFilePathFilterCriteria)(nil)).Elem()
}

func (i PipelineGitFilePathFilterCriteriaArgs) ToPipelineGitFilePathFilterCriteriaOutput() PipelineGitFilePathFilterCriteriaOutput {
	return i.ToPipelineGitFilePathFilterCriteriaOutputWithContext(context.Background())
}

func (i PipelineGitFilePathFilterCriteriaArgs) ToPipelineGitFilePathFilterCriteriaOutputWithContext(ctx context.Context) PipelineGitFilePathFilterCriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineGitFilePathFilterCriteriaOutput)
}

func (i PipelineGitFilePathFilterCriteriaArgs) ToPipelineGitFilePathFilterCriteriaPtrOutput() PipelineGitFilePathFilterCriteriaPtrOutput {
	return i.ToPipelineGitFilePathFilterCriteriaPtrOutputWithContext(context.Background())
}

func (i PipelineGitFilePathFilterCriteriaArgs) ToPipelineGitFilePathFilterCriteriaPtrOutputWithContext(ctx context.Context) PipelineGitFilePathFilterCriteriaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineGitFilePathFilterCriteriaOutput).ToPipelineGitFilePathFilterCriteriaPtrOutputWithContext(ctx)
}

// PipelineGitFilePathFilterCriteriaPtrInput is an input type that accepts PipelineGitFilePathFilterCriteriaArgs, PipelineGitFilePathFilterCriteriaPtr and PipelineGitFilePathFilterCriteriaPtrOutput values.
// You can construct a concrete instance of `PipelineGitFilePathFilterCriteriaPtrInput` via:
//
//	        PipelineGitFilePathFilterCriteriaArgs{...}
//
//	or:
//
//	        nil
type PipelineGitFilePathFilterCriteriaPtrInput interface {
	pulumi.Input

	ToPipelineGitFilePathFilterCriteriaPtrOutput() PipelineGitFilePathFilterCriteriaPtrOutput
	ToPipelineGitFilePathFilterCriteriaPtrOutputWithContext(context.Context) PipelineGitFilePathFilterCriteriaPtrOutput
}

type pipelineGitFilePathFilterCriteriaPtrType PipelineGitFilePathFilterCriteriaArgs

func PipelineGitFilePathFilterCriteriaPtr(v *PipelineGitFilePathFilterCriteriaArgs) PipelineGitFilePathFilterCriteriaPtrInput {
	return (*pipelineGitFilePathFilterCriteriaPtrType)(v)
}

func (*pipelineGitFilePathFilterCriteriaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineGitFilePathFilterCriteria)(nil)).Elem()
}

func (i *pipelineGitFilePathFilterCriteriaPtrType) ToPipelineGitFilePathFilterCriteriaPtrOutput() PipelineGitFilePathFilterCriteriaPtrOutput {
	return i.ToPipelineGitFilePathFilterCriteriaPtrOutputWithContext(context.Background())
}

func (i *pipelineGitFilePathFilterCriteriaPtrType) ToPipelineGitFilePathFilterCriteriaPtrOutputWithContext(ctx context.Context) PipelineGitFilePathFilterCriteriaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineGitFilePathFilterCriteriaPtrOutput)
}

// The Git repository file paths specified as filter criteria to start the pipeline.
type PipelineGitFilePathFilterCriteriaOutput struct{ *pulumi.OutputState }

func (PipelineGitFilePathFilterCriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineGitFilePathFilterCriteria)(nil)).Elem()
}

func (o PipelineGitFilePathFilterCriteriaOutput) ToPipelineGitFilePathFilterCriteriaOutput() PipelineGitFilePathFilterCriteriaOutput {
	return o
}

func (o PipelineGitFilePathFilterCriteriaOutput) ToPipelineGitFilePathFilterCriteriaOutputWithContext(ctx context.Context) PipelineGitFilePathFilterCriteriaOutput {
	return o
}

func (o PipelineGitFilePathFilterCriteriaOutput) ToPipelineGitFilePathFilterCriteriaPtrOutput() PipelineGitFilePathFilterCriteriaPtrOutput {
	return o.ToPipelineGitFilePathFilterCriteriaPtrOutputWithContext(context.Background())
}

func (o PipelineGitFilePathFilterCriteriaOutput) ToPipelineGitFilePathFilterCriteriaPtrOutputWithContext(ctx context.Context) PipelineGitFilePathFilterCriteriaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipelineGitFilePathFilterCriteria) *PipelineGitFilePathFilterCriteria {
		return &v
	}).(PipelineGitFilePathFilterCriteriaPtrOutput)
}

// The list of patterns of Git repository file paths that, when a commit is pushed, are to be excluded from starting the pipeline.
func (o PipelineGitFilePathFilterCriteriaOutput) Excludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipelineGitFilePathFilterCriteria) []string { return v.Excludes }).(pulumi.StringArrayOutput)
}

// The list of patterns of Git repository file paths that, when a commit is pushed, are to be included as criteria that starts the pipeline.
func (o PipelineGitFilePathFilterCriteriaOutput) Includes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipelineGitFilePathFilterCriteria) []string { return v.Includes }).(pulumi.StringArrayOutput)
}

type PipelineGitFilePathFilterCriteriaPtrOutput struct{ *pulumi.OutputState }

func (PipelineGitFilePathFilterCriteriaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineGitFilePathFilterCriteria)(nil)).Elem()
}

func (o PipelineGitFilePathFilterCriteriaPtrOutput) ToPipelineGitFilePathFilterCriteriaPtrOutput() PipelineGitFilePathFilterCriteriaPtrOutput {
	return o
}

func (o PipelineGitFilePathFilterCriteriaPtrOutput) ToPipelineGitFilePathFilterCriteriaPtrOutputWithContext(ctx context.Context) PipelineGitFilePathFilterCriteriaPtrOutput {
	return o
}

func (o PipelineGitFilePathFilterCriteriaPtrOutput) Elem() PipelineGitFilePathFilterCriteriaOutput {
	return o.ApplyT(func(v *PipelineGitFilePathFilterCriteria) PipelineGitFilePathFilterCriteria {
		if v != nil {
			return *v
		}
		var ret PipelineGitFilePathFilterCriteria
		return ret
	}).(PipelineGitFilePathFilterCriteriaOutput)
}

// The list of patterns of Git repository file paths that, when a commit is pushed, are to be excluded from starting the pipeline.
func (o PipelineGitFilePathFilterCriteriaPtrOutput) Excludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PipelineGitFilePathFilterCriteria) []string {
		if v == nil {
			return nil
		}
		return v.Excludes
	}).(pulumi.StringArrayOutput)
}

// The list of patterns of Git repository file paths that, when a commit is pushed, are to be included as criteria that starts the pipeline.
func (o PipelineGitFilePathFilterCriteriaPtrOutput) Includes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PipelineGitFilePathFilterCriteria) []string {
		if v == nil {
			return nil
		}
		return v.Includes
	}).(pulumi.StringArrayOutput)
}

// The event criteria for the pull request trigger configuration, such as the lists of branches or file paths to include and exclude.
type PipelineGitPullRequestFilter struct {
	// The field that specifies to filter on branches for the pull request trigger configuration.
	Branches *PipelineGitBranchFilterCriteria `pulumi:"branches"`
	// The field that specifies which pull request events to filter on (opened, updated, closed) for the trigger configuration.
	Events []string `pulumi:"events"`
	// The field that specifies to filter on file paths for the pull request trigger configuration.
	FilePaths *PipelineGitFilePathFilterCriteria `pulumi:"filePaths"`
}

// PipelineGitPullRequestFilterInput is an input type that accepts PipelineGitPullRequestFilterArgs and PipelineGitPullRequestFilterOutput values.
// You can construct a concrete instance of `PipelineGitPullRequestFilterInput` via:
//
//	PipelineGitPullRequestFilterArgs{...}
type PipelineGitPullRequestFilterInput interface {
	pulumi.Input

	ToPipelineGitPullRequestFilterOutput() PipelineGitPullRequestFilterOutput
	ToPipelineGitPullRequestFilterOutputWithContext(context.Context) PipelineGitPullRequestFilterOutput
}

// The event criteria for the pull request trigger configuration, such as the lists of branches or file paths to include and exclude.
type PipelineGitPullRequestFilterArgs struct {
	// The field that specifies to filter on branches for the pull request trigger configuration.
	Branches PipelineGitBranchFilterCriteriaPtrInput `pulumi:"branches"`
	// The field that specifies which pull request events to filter on (opened, updated, closed) for the trigger configuration.
	Events pulumi.StringArrayInput `pulumi:"events"`
	// The field that specifies to filter on file paths for the pull request trigger configuration.
	FilePaths PipelineGitFilePathFilterCriteriaPtrInput `pulumi:"filePaths"`
}

func (PipelineGitPullRequestFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineGitPullRequestFilter)(nil)).Elem()
}

func (i PipelineGitPullRequestFilterArgs) ToPipelineGitPullRequestFilterOutput() PipelineGitPullRequestFilterOutput {
	return i.ToPipelineGitPullRequestFilterOutputWithContext(context.Background())
}

func (i PipelineGitPullRequestFilterArgs) ToPipelineGitPullRequestFilterOutputWithContext(ctx context.Context) PipelineGitPullRequestFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineGitPullRequestFilterOutput)
}

// PipelineGitPullRequestFilterArrayInput is an input type that accepts PipelineGitPullRequestFilterArray and PipelineGitPullRequestFilterArrayOutput values.
// You can construct a concrete instance of `PipelineGitPullRequestFilterArrayInput` via:
//
//	PipelineGitPullRequestFilterArray{ PipelineGitPullRequestFilterArgs{...} }
type PipelineGitPullRequestFilterArrayInput interface {
	pulumi.Input

	ToPipelineGitPullRequestFilterArrayOutput() PipelineGitPullRequestFilterArrayOutput
	ToPipelineGitPullRequestFilterArrayOutputWithContext(context.Context) PipelineGitPullRequestFilterArrayOutput
}

type PipelineGitPullRequestFilterArray []PipelineGitPullRequestFilterInput

func (PipelineGitPullRequestFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineGitPullRequestFilter)(nil)).Elem()
}

func (i PipelineGitPullRequestFilterArray) ToPipelineGitPullRequestFilterArrayOutput() PipelineGitPullRequestFilterArrayOutput {
	return i.ToPipelineGitPullRequestFilterArrayOutputWithContext(context.Background())
}

func (i PipelineGitPullRequestFilterArray) ToPipelineGitPullRequestFilterArrayOutputWithContext(ctx context.Context) PipelineGitPullRequestFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineGitPullRequestFilterArrayOutput)
}

// The event criteria for the pull request trigger configuration, such as the lists of branches or file paths to include and exclude.
type PipelineGitPullRequestFilterOutput struct{ *pulumi.OutputState }

func (PipelineGitPullRequestFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineGitPullRequestFilter)(nil)).Elem()
}

func (o PipelineGitPullRequestFilterOutput) ToPipelineGitPullRequestFilterOutput() PipelineGitPullRequestFilterOutput {
	return o
}

func (o PipelineGitPullRequestFilterOutput) ToPipelineGitPullRequestFilterOutputWithContext(ctx context.Context) PipelineGitPullRequestFilterOutput {
	return o
}

// The field that specifies to filter on branches for the pull request trigger configuration.
func (o PipelineGitPullRequestFilterOutput) Branches() PipelineGitBranchFilterCriteriaPtrOutput {
	return o.ApplyT(func(v PipelineGitPullRequestFilter) *PipelineGitBranchFilterCriteria { return v.Branches }).(PipelineGitBranchFilterCriteriaPtrOutput)
}

// The field that specifies which pull request events to filter on (opened, updated, closed) for the trigger configuration.
func (o PipelineGitPullRequestFilterOutput) Events() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipelineGitPullRequestFilter) []string { return v.Events }).(pulumi.StringArrayOutput)
}

// The field that specifies to filter on file paths for the pull request trigger configuration.
func (o PipelineGitPullRequestFilterOutput) FilePaths() PipelineGitFilePathFilterCriteriaPtrOutput {
	return o.ApplyT(func(v PipelineGitPullRequestFilter) *PipelineGitFilePathFilterCriteria { return v.FilePaths }).(PipelineGitFilePathFilterCriteriaPtrOutput)
}

type PipelineGitPullRequestFilterArrayOutput struct{ *pulumi.OutputState }

func (PipelineGitPullRequestFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineGitPullRequestFilter)(nil)).Elem()
}

func (o PipelineGitPullRequestFilterArrayOutput) ToPipelineGitPullRequestFilterArrayOutput() PipelineGitPullRequestFilterArrayOutput {
	return o
}

func (o PipelineGitPullRequestFilterArrayOutput) ToPipelineGitPullRequestFilterArrayOutputWithContext(ctx context.Context) PipelineGitPullRequestFilterArrayOutput {
	return o
}

func (o PipelineGitPullRequestFilterArrayOutput) Index(i pulumi.IntInput) PipelineGitPullRequestFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipelineGitPullRequestFilter {
		return vs[0].([]PipelineGitPullRequestFilter)[vs[1].(int)]
	}).(PipelineGitPullRequestFilterOutput)
}

// The event criteria that specify when a specified repository event will start the pipeline for the specified trigger configuration, such as the lists of Git tags to include and exclude.
type PipelineGitPushFilter struct {
	// The field that specifies to filter on branches for the push trigger configuration.
	Branches *PipelineGitBranchFilterCriteria `pulumi:"branches"`
	// The field that specifies to filter on file paths for the push trigger configuration.
	FilePaths *PipelineGitFilePathFilterCriteria `pulumi:"filePaths"`
	// The field that contains the details for the Git tags trigger configuration.
	Tags *PipelineGitTagFilterCriteria `pulumi:"tags"`
}

// PipelineGitPushFilterInput is an input type that accepts PipelineGitPushFilterArgs and PipelineGitPushFilterOutput values.
// You can construct a concrete instance of `PipelineGitPushFilterInput` via:
//
//	PipelineGitPushFilterArgs{...}
type PipelineGitPushFilterInput interface {
	pulumi.Input

	ToPipelineGitPushFilterOutput() PipelineGitPushFilterOutput
	ToPipelineGitPushFilterOutputWithContext(context.Context) PipelineGitPushFilterOutput
}

// The event criteria that specify when a specified repository event will start the pipeline for the specified trigger configuration, such as the lists of Git tags to include and exclude.
type PipelineGitPushFilterArgs struct {
	// The field that specifies to filter on branches for the push trigger configuration.
	Branches PipelineGitBranchFilterCriteriaPtrInput `pulumi:"branches"`
	// The field that specifies to filter on file paths for the push trigger configuration.
	FilePaths PipelineGitFilePathFilterCriteriaPtrInput `pulumi:"filePaths"`
	// The field that contains the details for the Git tags trigger configuration.
	Tags PipelineGitTagFilterCriteriaPtrInput `pulumi:"tags"`
}

func (PipelineGitPushFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineGitPushFilter)(nil)).Elem()
}

func (i PipelineGitPushFilterArgs) ToPipelineGitPushFilterOutput() PipelineGitPushFilterOutput {
	return i.ToPipelineGitPushFilterOutputWithContext(context.Background())
}

func (i PipelineGitPushFilterArgs) ToPipelineGitPushFilterOutputWithContext(ctx context.Context) PipelineGitPushFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineGitPushFilterOutput)
}

// PipelineGitPushFilterArrayInput is an input type that accepts PipelineGitPushFilterArray and PipelineGitPushFilterArrayOutput values.
// You can construct a concrete instance of `PipelineGitPushFilterArrayInput` via:
//
//	PipelineGitPushFilterArray{ PipelineGitPushFilterArgs{...} }
type PipelineGitPushFilterArrayInput interface {
	pulumi.Input

	ToPipelineGitPushFilterArrayOutput() PipelineGitPushFilterArrayOutput
	ToPipelineGitPushFilterArrayOutputWithContext(context.Context) PipelineGitPushFilterArrayOutput
}

type PipelineGitPushFilterArray []PipelineGitPushFilterInput

func (PipelineGitPushFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineGitPushFilter)(nil)).Elem()
}

func (i PipelineGitPushFilterArray) ToPipelineGitPushFilterArrayOutput() PipelineGitPushFilterArrayOutput {
	return i.ToPipelineGitPushFilterArrayOutputWithContext(context.Background())
}

func (i PipelineGitPushFilterArray) ToPipelineGitPushFilterArrayOutputWithContext(ctx context.Context) PipelineGitPushFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineGitPushFilterArrayOutput)
}

// The event criteria that specify when a specified repository event will start the pipeline for the specified trigger configuration, such as the lists of Git tags to include and exclude.
type PipelineGitPushFilterOutput struct{ *pulumi.OutputState }

func (PipelineGitPushFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineGitPushFilter)(nil)).Elem()
}

func (o PipelineGitPushFilterOutput) ToPipelineGitPushFilterOutput() PipelineGitPushFilterOutput {
	return o
}

func (o PipelineGitPushFilterOutput) ToPipelineGitPushFilterOutputWithContext(ctx context.Context) PipelineGitPushFilterOutput {
	return o
}

// The field that specifies to filter on branches for the push trigger configuration.
func (o PipelineGitPushFilterOutput) Branches() PipelineGitBranchFilterCriteriaPtrOutput {
	return o.ApplyT(func(v PipelineGitPushFilter) *PipelineGitBranchFilterCriteria { return v.Branches }).(PipelineGitBranchFilterCriteriaPtrOutput)
}

// The field that specifies to filter on file paths for the push trigger configuration.
func (o PipelineGitPushFilterOutput) FilePaths() PipelineGitFilePathFilterCriteriaPtrOutput {
	return o.ApplyT(func(v PipelineGitPushFilter) *PipelineGitFilePathFilterCriteria { return v.FilePaths }).(PipelineGitFilePathFilterCriteriaPtrOutput)
}

// The field that contains the details for the Git tags trigger configuration.
func (o PipelineGitPushFilterOutput) Tags() PipelineGitTagFilterCriteriaPtrOutput {
	return o.ApplyT(func(v PipelineGitPushFilter) *PipelineGitTagFilterCriteria { return v.Tags }).(PipelineGitTagFilterCriteriaPtrOutput)
}

type PipelineGitPushFilterArrayOutput struct{ *pulumi.OutputState }

func (PipelineGitPushFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineGitPushFilter)(nil)).Elem()
}

func (o PipelineGitPushFilterArrayOutput) ToPipelineGitPushFilterArrayOutput() PipelineGitPushFilterArrayOutput {
	return o
}

func (o PipelineGitPushFilterArrayOutput) ToPipelineGitPushFilterArrayOutputWithContext(ctx context.Context) PipelineGitPushFilterArrayOutput {
	return o
}

func (o PipelineGitPushFilterArrayOutput) Index(i pulumi.IntInput) PipelineGitPushFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipelineGitPushFilter {
		return vs[0].([]PipelineGitPushFilter)[vs[1].(int)]
	}).(PipelineGitPushFilterOutput)
}

// The Git tags specified as filter criteria for whether a Git tag repository event will start the pipeline.
type PipelineGitTagFilterCriteria struct {
	// The list of patterns of Git tags that, when pushed, are to be excluded from starting the pipeline.
	Excludes []string `pulumi:"excludes"`
	// The list of patterns of Git tags that, when pushed, are to be included as criteria that starts the pipeline.
	Includes []string `pulumi:"includes"`
}

// PipelineGitTagFilterCriteriaInput is an input type that accepts PipelineGitTagFilterCriteriaArgs and PipelineGitTagFilterCriteriaOutput values.
// You can construct a concrete instance of `PipelineGitTagFilterCriteriaInput` via:
//
//	PipelineGitTagFilterCriteriaArgs{...}
type PipelineGitTagFilterCriteriaInput interface {
	pulumi.Input

	ToPipelineGitTagFilterCriteriaOutput() PipelineGitTagFilterCriteriaOutput
	ToPipelineGitTagFilterCriteriaOutputWithContext(context.Context) PipelineGitTagFilterCriteriaOutput
}

// The Git tags specified as filter criteria for whether a Git tag repository event will start the pipeline.
type PipelineGitTagFilterCriteriaArgs struct {
	// The list of patterns of Git tags that, when pushed, are to be excluded from starting the pipeline.
	Excludes pulumi.StringArrayInput `pulumi:"excludes"`
	// The list of patterns of Git tags that, when pushed, are to be included as criteria that starts the pipeline.
	Includes pulumi.StringArrayInput `pulumi:"includes"`
}

func (PipelineGitTagFilterCriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineGitTagFilterCriteria)(nil)).Elem()
}

func (i PipelineGitTagFilterCriteriaArgs) ToPipelineGitTagFilterCriteriaOutput() PipelineGitTagFilterCriteriaOutput {
	return i.ToPipelineGitTagFilterCriteriaOutputWithContext(context.Background())
}

func (i PipelineGitTagFilterCriteriaArgs) ToPipelineGitTagFilterCriteriaOutputWithContext(ctx context.Context) PipelineGitTagFilterCriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineGitTagFilterCriteriaOutput)
}

func (i PipelineGitTagFilterCriteriaArgs) ToPipelineGitTagFilterCriteriaPtrOutput() PipelineGitTagFilterCriteriaPtrOutput {
	return i.ToPipelineGitTagFilterCriteriaPtrOutputWithContext(context.Background())
}

func (i PipelineGitTagFilterCriteriaArgs) ToPipelineGitTagFilterCriteriaPtrOutputWithContext(ctx context.Context) PipelineGitTagFilterCriteriaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineGitTagFilterCriteriaOutput).ToPipelineGitTagFilterCriteriaPtrOutputWithContext(ctx)
}

// PipelineGitTagFilterCriteriaPtrInput is an input type that accepts PipelineGitTagFilterCriteriaArgs, PipelineGitTagFilterCriteriaPtr and PipelineGitTagFilterCriteriaPtrOutput values.
// You can construct a concrete instance of `PipelineGitTagFilterCriteriaPtrInput` via:
//
//	        PipelineGitTagFilterCriteriaArgs{...}
//
//	or:
//
//	        nil
type PipelineGitTagFilterCriteriaPtrInput interface {
	pulumi.Input

	ToPipelineGitTagFilterCriteriaPtrOutput() PipelineGitTagFilterCriteriaPtrOutput
	ToPipelineGitTagFilterCriteriaPtrOutputWithContext(context.Context) PipelineGitTagFilterCriteriaPtrOutput
}

type pipelineGitTagFilterCriteriaPtrType PipelineGitTagFilterCriteriaArgs

func PipelineGitTagFilterCriteriaPtr(v *PipelineGitTagFilterCriteriaArgs) PipelineGitTagFilterCriteriaPtrInput {
	return (*pipelineGitTagFilterCriteriaPtrType)(v)
}

func (*pipelineGitTagFilterCriteriaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineGitTagFilterCriteria)(nil)).Elem()
}

func (i *pipelineGitTagFilterCriteriaPtrType) ToPipelineGitTagFilterCriteriaPtrOutput() PipelineGitTagFilterCriteriaPtrOutput {
	return i.ToPipelineGitTagFilterCriteriaPtrOutputWithContext(context.Background())
}

func (i *pipelineGitTagFilterCriteriaPtrType) ToPipelineGitTagFilterCriteriaPtrOutputWithContext(ctx context.Context) PipelineGitTagFilterCriteriaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineGitTagFilterCriteriaPtrOutput)
}

// The Git tags specified as filter criteria for whether a Git tag repository event will start the pipeline.
type PipelineGitTagFilterCriteriaOutput struct{ *pulumi.OutputState }

func (PipelineGitTagFilterCriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineGitTagFilterCriteria)(nil)).Elem()
}

func (o PipelineGitTagFilterCriteriaOutput) ToPipelineGitTagFilterCriteriaOutput() PipelineGitTagFilterCriteriaOutput {
	return o
}

func (o PipelineGitTagFilterCriteriaOutput) ToPipelineGitTagFilterCriteriaOutputWithContext(ctx context.Context) PipelineGitTagFilterCriteriaOutput {
	return o
}

func (o PipelineGitTagFilterCriteriaOutput) ToPipelineGitTagFilterCriteriaPtrOutput() PipelineGitTagFilterCriteriaPtrOutput {
	return o.ToPipelineGitTagFilterCriteriaPtrOutputWithContext(context.Background())
}

func (o PipelineGitTagFilterCriteriaOutput) ToPipelineGitTagFilterCriteriaPtrOutputWithContext(ctx context.Context) PipelineGitTagFilterCriteriaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipelineGitTagFilterCriteria) *PipelineGitTagFilterCriteria {
		return &v
	}).(PipelineGitTagFilterCriteriaPtrOutput)
}

// The list of patterns of Git tags that, when pushed, are to be excluded from starting the pipeline.
func (o PipelineGitTagFilterCriteriaOutput) Excludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipelineGitTagFilterCriteria) []string { return v.Excludes }).(pulumi.StringArrayOutput)
}

// The list of patterns of Git tags that, when pushed, are to be included as criteria that starts the pipeline.
func (o PipelineGitTagFilterCriteriaOutput) Includes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipelineGitTagFilterCriteria) []string { return v.Includes }).(pulumi.StringArrayOutput)
}

type PipelineGitTagFilterCriteriaPtrOutput struct{ *pulumi.OutputState }

func (PipelineGitTagFilterCriteriaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineGitTagFilterCriteria)(nil)).Elem()
}

func (o PipelineGitTagFilterCriteriaPtrOutput) ToPipelineGitTagFilterCriteriaPtrOutput() PipelineGitTagFilterCriteriaPtrOutput {
	return o
}

func (o PipelineGitTagFilterCriteriaPtrOutput) ToPipelineGitTagFilterCriteriaPtrOutputWithContext(ctx context.Context) PipelineGitTagFilterCriteriaPtrOutput {
	return o
}

func (o PipelineGitTagFilterCriteriaPtrOutput) Elem() PipelineGitTagFilterCriteriaOutput {
	return o.ApplyT(func(v *PipelineGitTagFilterCriteria) PipelineGitTagFilterCriteria {
		if v != nil {
			return *v
		}
		var ret PipelineGitTagFilterCriteria
		return ret
	}).(PipelineGitTagFilterCriteriaOutput)
}

// The list of patterns of Git tags that, when pushed, are to be excluded from starting the pipeline.
func (o PipelineGitTagFilterCriteriaPtrOutput) Excludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PipelineGitTagFilterCriteria) []string {
		if v == nil {
			return nil
		}
		return v.Excludes
	}).(pulumi.StringArrayOutput)
}

// The list of patterns of Git tags that, when pushed, are to be included as criteria that starts the pipeline.
func (o PipelineGitTagFilterCriteriaPtrOutput) Includes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PipelineGitTagFilterCriteria) []string {
		if v == nil {
			return nil
		}
		return v.Includes
	}).(pulumi.StringArrayOutput)
}

// Represents information about an artifact to be worked on, such as a test or build artifact.
type PipelineInputArtifact struct {
	// The name of the artifact to be worked on (for example, "My App").
	Name string `pulumi:"name"`
}

// PipelineInputArtifactInput is an input type that accepts PipelineInputArtifactArgs and PipelineInputArtifactOutput values.
// You can construct a concrete instance of `PipelineInputArtifactInput` via:
//
//	PipelineInputArtifactArgs{...}
type PipelineInputArtifactInput interface {
	pulumi.Input

	ToPipelineInputArtifactOutput() PipelineInputArtifactOutput
	ToPipelineInputArtifactOutputWithContext(context.Context) PipelineInputArtifactOutput
}

// Represents information about an artifact to be worked on, such as a test or build artifact.
type PipelineInputArtifactArgs struct {
	// The name of the artifact to be worked on (for example, "My App").
	Name pulumi.StringInput `pulumi:"name"`
}

func (PipelineInputArtifactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineInputArtifact)(nil)).Elem()
}

func (i PipelineInputArtifactArgs) ToPipelineInputArtifactOutput() PipelineInputArtifactOutput {
	return i.ToPipelineInputArtifactOutputWithContext(context.Background())
}

func (i PipelineInputArtifactArgs) ToPipelineInputArtifactOutputWithContext(ctx context.Context) PipelineInputArtifactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineInputArtifactOutput)
}

// PipelineInputArtifactArrayInput is an input type that accepts PipelineInputArtifactArray and PipelineInputArtifactArrayOutput values.
// You can construct a concrete instance of `PipelineInputArtifactArrayInput` via:
//
//	PipelineInputArtifactArray{ PipelineInputArtifactArgs{...} }
type PipelineInputArtifactArrayInput interface {
	pulumi.Input

	ToPipelineInputArtifactArrayOutput() PipelineInputArtifactArrayOutput
	ToPipelineInputArtifactArrayOutputWithContext(context.Context) PipelineInputArtifactArrayOutput
}

type PipelineInputArtifactArray []PipelineInputArtifactInput

func (PipelineInputArtifactArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineInputArtifact)(nil)).Elem()
}

func (i PipelineInputArtifactArray) ToPipelineInputArtifactArrayOutput() PipelineInputArtifactArrayOutput {
	return i.ToPipelineInputArtifactArrayOutputWithContext(context.Background())
}

func (i PipelineInputArtifactArray) ToPipelineInputArtifactArrayOutputWithContext(ctx context.Context) PipelineInputArtifactArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineInputArtifactArrayOutput)
}

// Represents information about an artifact to be worked on, such as a test or build artifact.
type PipelineInputArtifactOutput struct{ *pulumi.OutputState }

func (PipelineInputArtifactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineInputArtifact)(nil)).Elem()
}

func (o PipelineInputArtifactOutput) ToPipelineInputArtifactOutput() PipelineInputArtifactOutput {
	return o
}

func (o PipelineInputArtifactOutput) ToPipelineInputArtifactOutputWithContext(ctx context.Context) PipelineInputArtifactOutput {
	return o
}

// The name of the artifact to be worked on (for example, "My App").
func (o PipelineInputArtifactOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineInputArtifact) string { return v.Name }).(pulumi.StringOutput)
}

type PipelineInputArtifactArrayOutput struct{ *pulumi.OutputState }

func (PipelineInputArtifactArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineInputArtifact)(nil)).Elem()
}

func (o PipelineInputArtifactArrayOutput) ToPipelineInputArtifactArrayOutput() PipelineInputArtifactArrayOutput {
	return o
}

func (o PipelineInputArtifactArrayOutput) ToPipelineInputArtifactArrayOutputWithContext(ctx context.Context) PipelineInputArtifactArrayOutput {
	return o
}

func (o PipelineInputArtifactArrayOutput) Index(i pulumi.IntInput) PipelineInputArtifactOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipelineInputArtifact {
		return vs[0].([]PipelineInputArtifact)[vs[1].(int)]
	}).(PipelineInputArtifactOutput)
}

// Represents information about the output of an action.
type PipelineOutputArtifact struct {
	// The files that you want to associate with the output artifact that will be exported from the compute action.
	Files []string `pulumi:"files"`
	// The name of the output of an artifact, such as "My App".
	Name string `pulumi:"name"`
}

// PipelineOutputArtifactInput is an input type that accepts PipelineOutputArtifactArgs and PipelineOutputArtifactOutput values.
// You can construct a concrete instance of `PipelineOutputArtifactInput` via:
//
//	PipelineOutputArtifactArgs{...}
type PipelineOutputArtifactInput interface {
	pulumi.Input

	ToPipelineOutputArtifactOutput() PipelineOutputArtifactOutput
	ToPipelineOutputArtifactOutputWithContext(context.Context) PipelineOutputArtifactOutput
}

// Represents information about the output of an action.
type PipelineOutputArtifactArgs struct {
	// The files that you want to associate with the output artifact that will be exported from the compute action.
	Files pulumi.StringArrayInput `pulumi:"files"`
	// The name of the output of an artifact, such as "My App".
	Name pulumi.StringInput `pulumi:"name"`
}

func (PipelineOutputArtifactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineOutputArtifact)(nil)).Elem()
}

func (i PipelineOutputArtifactArgs) ToPipelineOutputArtifactOutput() PipelineOutputArtifactOutput {
	return i.ToPipelineOutputArtifactOutputWithContext(context.Background())
}

func (i PipelineOutputArtifactArgs) ToPipelineOutputArtifactOutputWithContext(ctx context.Context) PipelineOutputArtifactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineOutputArtifactOutput)
}

// PipelineOutputArtifactArrayInput is an input type that accepts PipelineOutputArtifactArray and PipelineOutputArtifactArrayOutput values.
// You can construct a concrete instance of `PipelineOutputArtifactArrayInput` via:
//
//	PipelineOutputArtifactArray{ PipelineOutputArtifactArgs{...} }
type PipelineOutputArtifactArrayInput interface {
	pulumi.Input

	ToPipelineOutputArtifactArrayOutput() PipelineOutputArtifactArrayOutput
	ToPipelineOutputArtifactArrayOutputWithContext(context.Context) PipelineOutputArtifactArrayOutput
}

type PipelineOutputArtifactArray []PipelineOutputArtifactInput

func (PipelineOutputArtifactArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineOutputArtifact)(nil)).Elem()
}

func (i PipelineOutputArtifactArray) ToPipelineOutputArtifactArrayOutput() PipelineOutputArtifactArrayOutput {
	return i.ToPipelineOutputArtifactArrayOutputWithContext(context.Background())
}

func (i PipelineOutputArtifactArray) ToPipelineOutputArtifactArrayOutputWithContext(ctx context.Context) PipelineOutputArtifactArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineOutputArtifactArrayOutput)
}

// Represents information about the output of an action.
type PipelineOutputArtifactOutput struct{ *pulumi.OutputState }

func (PipelineOutputArtifactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineOutputArtifact)(nil)).Elem()
}

func (o PipelineOutputArtifactOutput) ToPipelineOutputArtifactOutput() PipelineOutputArtifactOutput {
	return o
}

func (o PipelineOutputArtifactOutput) ToPipelineOutputArtifactOutputWithContext(ctx context.Context) PipelineOutputArtifactOutput {
	return o
}

// The files that you want to associate with the output artifact that will be exported from the compute action.
func (o PipelineOutputArtifactOutput) Files() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipelineOutputArtifact) []string { return v.Files }).(pulumi.StringArrayOutput)
}

// The name of the output of an artifact, such as "My App".
func (o PipelineOutputArtifactOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineOutputArtifact) string { return v.Name }).(pulumi.StringOutput)
}

type PipelineOutputArtifactArrayOutput struct{ *pulumi.OutputState }

func (PipelineOutputArtifactArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineOutputArtifact)(nil)).Elem()
}

func (o PipelineOutputArtifactArrayOutput) ToPipelineOutputArtifactArrayOutput() PipelineOutputArtifactArrayOutput {
	return o
}

func (o PipelineOutputArtifactArrayOutput) ToPipelineOutputArtifactArrayOutputWithContext(ctx context.Context) PipelineOutputArtifactArrayOutput {
	return o
}

func (o PipelineOutputArtifactArrayOutput) Index(i pulumi.IntInput) PipelineOutputArtifactOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipelineOutputArtifact {
		return vs[0].([]PipelineOutputArtifact)[vs[1].(int)]
	}).(PipelineOutputArtifactOutput)
}

// Represents information about condition.
type PipelineRuleDeclaration struct {
	// The shell commands to run with your compute action in CodePipeline.
	Commands []string `pulumi:"commands"`
	// The rule's configuration. These are key-value pairs that specify input values for a rule.
	Configuration interface{} `pulumi:"configuration"`
	// The input artifacts fields for the rule, such as specifying an input file for the rule.
	InputArtifacts []PipelineInputArtifact `pulumi:"inputArtifacts"`
	// The rule declaration's name.
	Name *string `pulumi:"name"`
	// The rule declaration's AWS Region, such as us-east-1.
	Region *string `pulumi:"region"`
	// The ARN of the IAM service role that performs the declared rule. This is assumed through the roleArn for the pipeline.
	RoleArn *string `pulumi:"roleArn"`
	// The ID for the rule type, which is made up of the combined values for category, owner, provider, and version.
	RuleTypeId *PipelineRuleTypeId `pulumi:"ruleTypeId"`
}

// PipelineRuleDeclarationInput is an input type that accepts PipelineRuleDeclarationArgs and PipelineRuleDeclarationOutput values.
// You can construct a concrete instance of `PipelineRuleDeclarationInput` via:
//
//	PipelineRuleDeclarationArgs{...}
type PipelineRuleDeclarationInput interface {
	pulumi.Input

	ToPipelineRuleDeclarationOutput() PipelineRuleDeclarationOutput
	ToPipelineRuleDeclarationOutputWithContext(context.Context) PipelineRuleDeclarationOutput
}

// Represents information about condition.
type PipelineRuleDeclarationArgs struct {
	// The shell commands to run with your compute action in CodePipeline.
	Commands pulumi.StringArrayInput `pulumi:"commands"`
	// The rule's configuration. These are key-value pairs that specify input values for a rule.
	Configuration pulumi.Input `pulumi:"configuration"`
	// The input artifacts fields for the rule, such as specifying an input file for the rule.
	InputArtifacts PipelineInputArtifactArrayInput `pulumi:"inputArtifacts"`
	// The rule declaration's name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The rule declaration's AWS Region, such as us-east-1.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The ARN of the IAM service role that performs the declared rule. This is assumed through the roleArn for the pipeline.
	RoleArn pulumi.StringPtrInput `pulumi:"roleArn"`
	// The ID for the rule type, which is made up of the combined values for category, owner, provider, and version.
	RuleTypeId PipelineRuleTypeIdPtrInput `pulumi:"ruleTypeId"`
}

func (PipelineRuleDeclarationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineRuleDeclaration)(nil)).Elem()
}

func (i PipelineRuleDeclarationArgs) ToPipelineRuleDeclarationOutput() PipelineRuleDeclarationOutput {
	return i.ToPipelineRuleDeclarationOutputWithContext(context.Background())
}

func (i PipelineRuleDeclarationArgs) ToPipelineRuleDeclarationOutputWithContext(ctx context.Context) PipelineRuleDeclarationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineRuleDeclarationOutput)
}

// PipelineRuleDeclarationArrayInput is an input type that accepts PipelineRuleDeclarationArray and PipelineRuleDeclarationArrayOutput values.
// You can construct a concrete instance of `PipelineRuleDeclarationArrayInput` via:
//
//	PipelineRuleDeclarationArray{ PipelineRuleDeclarationArgs{...} }
type PipelineRuleDeclarationArrayInput interface {
	pulumi.Input

	ToPipelineRuleDeclarationArrayOutput() PipelineRuleDeclarationArrayOutput
	ToPipelineRuleDeclarationArrayOutputWithContext(context.Context) PipelineRuleDeclarationArrayOutput
}

type PipelineRuleDeclarationArray []PipelineRuleDeclarationInput

func (PipelineRuleDeclarationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineRuleDeclaration)(nil)).Elem()
}

func (i PipelineRuleDeclarationArray) ToPipelineRuleDeclarationArrayOutput() PipelineRuleDeclarationArrayOutput {
	return i.ToPipelineRuleDeclarationArrayOutputWithContext(context.Background())
}

func (i PipelineRuleDeclarationArray) ToPipelineRuleDeclarationArrayOutputWithContext(ctx context.Context) PipelineRuleDeclarationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineRuleDeclarationArrayOutput)
}

// Represents information about condition.
type PipelineRuleDeclarationOutput struct{ *pulumi.OutputState }

func (PipelineRuleDeclarationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineRuleDeclaration)(nil)).Elem()
}

func (o PipelineRuleDeclarationOutput) ToPipelineRuleDeclarationOutput() PipelineRuleDeclarationOutput {
	return o
}

func (o PipelineRuleDeclarationOutput) ToPipelineRuleDeclarationOutputWithContext(ctx context.Context) PipelineRuleDeclarationOutput {
	return o
}

// The shell commands to run with your compute action in CodePipeline.
func (o PipelineRuleDeclarationOutput) Commands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipelineRuleDeclaration) []string { return v.Commands }).(pulumi.StringArrayOutput)
}

// The rule's configuration. These are key-value pairs that specify input values for a rule.
func (o PipelineRuleDeclarationOutput) Configuration() pulumi.AnyOutput {
	return o.ApplyT(func(v PipelineRuleDeclaration) interface{} { return v.Configuration }).(pulumi.AnyOutput)
}

// The input artifacts fields for the rule, such as specifying an input file for the rule.
func (o PipelineRuleDeclarationOutput) InputArtifacts() PipelineInputArtifactArrayOutput {
	return o.ApplyT(func(v PipelineRuleDeclaration) []PipelineInputArtifact { return v.InputArtifacts }).(PipelineInputArtifactArrayOutput)
}

// The rule declaration's name.
func (o PipelineRuleDeclarationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineRuleDeclaration) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The rule declaration's AWS Region, such as us-east-1.
func (o PipelineRuleDeclarationOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineRuleDeclaration) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The ARN of the IAM service role that performs the declared rule. This is assumed through the roleArn for the pipeline.
func (o PipelineRuleDeclarationOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineRuleDeclaration) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// The ID for the rule type, which is made up of the combined values for category, owner, provider, and version.
func (o PipelineRuleDeclarationOutput) RuleTypeId() PipelineRuleTypeIdPtrOutput {
	return o.ApplyT(func(v PipelineRuleDeclaration) *PipelineRuleTypeId { return v.RuleTypeId }).(PipelineRuleTypeIdPtrOutput)
}

type PipelineRuleDeclarationArrayOutput struct{ *pulumi.OutputState }

func (PipelineRuleDeclarationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineRuleDeclaration)(nil)).Elem()
}

func (o PipelineRuleDeclarationArrayOutput) ToPipelineRuleDeclarationArrayOutput() PipelineRuleDeclarationArrayOutput {
	return o
}

func (o PipelineRuleDeclarationArrayOutput) ToPipelineRuleDeclarationArrayOutputWithContext(ctx context.Context) PipelineRuleDeclarationArrayOutput {
	return o
}

func (o PipelineRuleDeclarationArrayOutput) Index(i pulumi.IntInput) PipelineRuleDeclarationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipelineRuleDeclaration {
		return vs[0].([]PipelineRuleDeclaration)[vs[1].(int)]
	}).(PipelineRuleDeclarationOutput)
}

// Represents information about a rule type.
type PipelineRuleTypeId struct {
	// A category for the provider type for the rule.
	Category *string `pulumi:"category"`
	// The creator of the rule being called. Only AWS is supported.
	Owner *string `pulumi:"owner"`
	// The provider of the service being called by the rule.
	Provider *string `pulumi:"provider"`
	// A string that describes the rule version.
	Version *string `pulumi:"version"`
}

// PipelineRuleTypeIdInput is an input type that accepts PipelineRuleTypeIdArgs and PipelineRuleTypeIdOutput values.
// You can construct a concrete instance of `PipelineRuleTypeIdInput` via:
//
//	PipelineRuleTypeIdArgs{...}
type PipelineRuleTypeIdInput interface {
	pulumi.Input

	ToPipelineRuleTypeIdOutput() PipelineRuleTypeIdOutput
	ToPipelineRuleTypeIdOutputWithContext(context.Context) PipelineRuleTypeIdOutput
}

// Represents information about a rule type.
type PipelineRuleTypeIdArgs struct {
	// A category for the provider type for the rule.
	Category pulumi.StringPtrInput `pulumi:"category"`
	// The creator of the rule being called. Only AWS is supported.
	Owner pulumi.StringPtrInput `pulumi:"owner"`
	// The provider of the service being called by the rule.
	Provider pulumi.StringPtrInput `pulumi:"provider"`
	// A string that describes the rule version.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (PipelineRuleTypeIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineRuleTypeId)(nil)).Elem()
}

func (i PipelineRuleTypeIdArgs) ToPipelineRuleTypeIdOutput() PipelineRuleTypeIdOutput {
	return i.ToPipelineRuleTypeIdOutputWithContext(context.Background())
}

func (i PipelineRuleTypeIdArgs) ToPipelineRuleTypeIdOutputWithContext(ctx context.Context) PipelineRuleTypeIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineRuleTypeIdOutput)
}

func (i PipelineRuleTypeIdArgs) ToPipelineRuleTypeIdPtrOutput() PipelineRuleTypeIdPtrOutput {
	return i.ToPipelineRuleTypeIdPtrOutputWithContext(context.Background())
}

func (i PipelineRuleTypeIdArgs) ToPipelineRuleTypeIdPtrOutputWithContext(ctx context.Context) PipelineRuleTypeIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineRuleTypeIdOutput).ToPipelineRuleTypeIdPtrOutputWithContext(ctx)
}

// PipelineRuleTypeIdPtrInput is an input type that accepts PipelineRuleTypeIdArgs, PipelineRuleTypeIdPtr and PipelineRuleTypeIdPtrOutput values.
// You can construct a concrete instance of `PipelineRuleTypeIdPtrInput` via:
//
//	        PipelineRuleTypeIdArgs{...}
//
//	or:
//
//	        nil
type PipelineRuleTypeIdPtrInput interface {
	pulumi.Input

	ToPipelineRuleTypeIdPtrOutput() PipelineRuleTypeIdPtrOutput
	ToPipelineRuleTypeIdPtrOutputWithContext(context.Context) PipelineRuleTypeIdPtrOutput
}

type pipelineRuleTypeIdPtrType PipelineRuleTypeIdArgs

func PipelineRuleTypeIdPtr(v *PipelineRuleTypeIdArgs) PipelineRuleTypeIdPtrInput {
	return (*pipelineRuleTypeIdPtrType)(v)
}

func (*pipelineRuleTypeIdPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineRuleTypeId)(nil)).Elem()
}

func (i *pipelineRuleTypeIdPtrType) ToPipelineRuleTypeIdPtrOutput() PipelineRuleTypeIdPtrOutput {
	return i.ToPipelineRuleTypeIdPtrOutputWithContext(context.Background())
}

func (i *pipelineRuleTypeIdPtrType) ToPipelineRuleTypeIdPtrOutputWithContext(ctx context.Context) PipelineRuleTypeIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineRuleTypeIdPtrOutput)
}

// Represents information about a rule type.
type PipelineRuleTypeIdOutput struct{ *pulumi.OutputState }

func (PipelineRuleTypeIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineRuleTypeId)(nil)).Elem()
}

func (o PipelineRuleTypeIdOutput) ToPipelineRuleTypeIdOutput() PipelineRuleTypeIdOutput {
	return o
}

func (o PipelineRuleTypeIdOutput) ToPipelineRuleTypeIdOutputWithContext(ctx context.Context) PipelineRuleTypeIdOutput {
	return o
}

func (o PipelineRuleTypeIdOutput) ToPipelineRuleTypeIdPtrOutput() PipelineRuleTypeIdPtrOutput {
	return o.ToPipelineRuleTypeIdPtrOutputWithContext(context.Background())
}

func (o PipelineRuleTypeIdOutput) ToPipelineRuleTypeIdPtrOutputWithContext(ctx context.Context) PipelineRuleTypeIdPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipelineRuleTypeId) *PipelineRuleTypeId {
		return &v
	}).(PipelineRuleTypeIdPtrOutput)
}

// A category for the provider type for the rule.
func (o PipelineRuleTypeIdOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineRuleTypeId) *string { return v.Category }).(pulumi.StringPtrOutput)
}

// The creator of the rule being called. Only AWS is supported.
func (o PipelineRuleTypeIdOutput) Owner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineRuleTypeId) *string { return v.Owner }).(pulumi.StringPtrOutput)
}

// The provider of the service being called by the rule.
func (o PipelineRuleTypeIdOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineRuleTypeId) *string { return v.Provider }).(pulumi.StringPtrOutput)
}

// A string that describes the rule version.
func (o PipelineRuleTypeIdOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineRuleTypeId) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type PipelineRuleTypeIdPtrOutput struct{ *pulumi.OutputState }

func (PipelineRuleTypeIdPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineRuleTypeId)(nil)).Elem()
}

func (o PipelineRuleTypeIdPtrOutput) ToPipelineRuleTypeIdPtrOutput() PipelineRuleTypeIdPtrOutput {
	return o
}

func (o PipelineRuleTypeIdPtrOutput) ToPipelineRuleTypeIdPtrOutputWithContext(ctx context.Context) PipelineRuleTypeIdPtrOutput {
	return o
}

func (o PipelineRuleTypeIdPtrOutput) Elem() PipelineRuleTypeIdOutput {
	return o.ApplyT(func(v *PipelineRuleTypeId) PipelineRuleTypeId {
		if v != nil {
			return *v
		}
		var ret PipelineRuleTypeId
		return ret
	}).(PipelineRuleTypeIdOutput)
}

// A category for the provider type for the rule.
func (o PipelineRuleTypeIdPtrOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineRuleTypeId) *string {
		if v == nil {
			return nil
		}
		return v.Category
	}).(pulumi.StringPtrOutput)
}

// The creator of the rule being called. Only AWS is supported.
func (o PipelineRuleTypeIdPtrOutput) Owner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineRuleTypeId) *string {
		if v == nil {
			return nil
		}
		return v.Owner
	}).(pulumi.StringPtrOutput)
}

// The provider of the service being called by the rule.
func (o PipelineRuleTypeIdPtrOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineRuleTypeId) *string {
		if v == nil {
			return nil
		}
		return v.Provider
	}).(pulumi.StringPtrOutput)
}

// A string that describes the rule version.
func (o PipelineRuleTypeIdPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineRuleTypeId) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Represents information about a stage and its definition.
type PipelineStageDeclaration struct {
	// The actions included in a stage.
	Actions []PipelineActionDeclaration `pulumi:"actions"`
	// The method to use before stage runs.
	BeforeEntry *PipelineBeforeEntryConditions `pulumi:"beforeEntry"`
	// Reserved for future use.
	Blockers []PipelineBlockerDeclaration `pulumi:"blockers"`
	// The name of the stage.
	Name string `pulumi:"name"`
	// The method to use when a stage has not completed successfully
	OnFailure *PipelineFailureConditions `pulumi:"onFailure"`
	// The method to use when a stage has completed successfully
	OnSuccess *PipelineSuccessConditions `pulumi:"onSuccess"`
}

// PipelineStageDeclarationInput is an input type that accepts PipelineStageDeclarationArgs and PipelineStageDeclarationOutput values.
// You can construct a concrete instance of `PipelineStageDeclarationInput` via:
//
//	PipelineStageDeclarationArgs{...}
type PipelineStageDeclarationInput interface {
	pulumi.Input

	ToPipelineStageDeclarationOutput() PipelineStageDeclarationOutput
	ToPipelineStageDeclarationOutputWithContext(context.Context) PipelineStageDeclarationOutput
}

// Represents information about a stage and its definition.
type PipelineStageDeclarationArgs struct {
	// The actions included in a stage.
	Actions PipelineActionDeclarationArrayInput `pulumi:"actions"`
	// The method to use before stage runs.
	BeforeEntry PipelineBeforeEntryConditionsPtrInput `pulumi:"beforeEntry"`
	// Reserved for future use.
	Blockers PipelineBlockerDeclarationArrayInput `pulumi:"blockers"`
	// The name of the stage.
	Name pulumi.StringInput `pulumi:"name"`
	// The method to use when a stage has not completed successfully
	OnFailure PipelineFailureConditionsPtrInput `pulumi:"onFailure"`
	// The method to use when a stage has completed successfully
	OnSuccess PipelineSuccessConditionsPtrInput `pulumi:"onSuccess"`
}

func (PipelineStageDeclarationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineStageDeclaration)(nil)).Elem()
}

func (i PipelineStageDeclarationArgs) ToPipelineStageDeclarationOutput() PipelineStageDeclarationOutput {
	return i.ToPipelineStageDeclarationOutputWithContext(context.Background())
}

func (i PipelineStageDeclarationArgs) ToPipelineStageDeclarationOutputWithContext(ctx context.Context) PipelineStageDeclarationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineStageDeclarationOutput)
}

// PipelineStageDeclarationArrayInput is an input type that accepts PipelineStageDeclarationArray and PipelineStageDeclarationArrayOutput values.
// You can construct a concrete instance of `PipelineStageDeclarationArrayInput` via:
//
//	PipelineStageDeclarationArray{ PipelineStageDeclarationArgs{...} }
type PipelineStageDeclarationArrayInput interface {
	pulumi.Input

	ToPipelineStageDeclarationArrayOutput() PipelineStageDeclarationArrayOutput
	ToPipelineStageDeclarationArrayOutputWithContext(context.Context) PipelineStageDeclarationArrayOutput
}

type PipelineStageDeclarationArray []PipelineStageDeclarationInput

func (PipelineStageDeclarationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineStageDeclaration)(nil)).Elem()
}

func (i PipelineStageDeclarationArray) ToPipelineStageDeclarationArrayOutput() PipelineStageDeclarationArrayOutput {
	return i.ToPipelineStageDeclarationArrayOutputWithContext(context.Background())
}

func (i PipelineStageDeclarationArray) ToPipelineStageDeclarationArrayOutputWithContext(ctx context.Context) PipelineStageDeclarationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineStageDeclarationArrayOutput)
}

// Represents information about a stage and its definition.
type PipelineStageDeclarationOutput struct{ *pulumi.OutputState }

func (PipelineStageDeclarationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineStageDeclaration)(nil)).Elem()
}

func (o PipelineStageDeclarationOutput) ToPipelineStageDeclarationOutput() PipelineStageDeclarationOutput {
	return o
}

func (o PipelineStageDeclarationOutput) ToPipelineStageDeclarationOutputWithContext(ctx context.Context) PipelineStageDeclarationOutput {
	return o
}

// The actions included in a stage.
func (o PipelineStageDeclarationOutput) Actions() PipelineActionDeclarationArrayOutput {
	return o.ApplyT(func(v PipelineStageDeclaration) []PipelineActionDeclaration { return v.Actions }).(PipelineActionDeclarationArrayOutput)
}

// The method to use before stage runs.
func (o PipelineStageDeclarationOutput) BeforeEntry() PipelineBeforeEntryConditionsPtrOutput {
	return o.ApplyT(func(v PipelineStageDeclaration) *PipelineBeforeEntryConditions { return v.BeforeEntry }).(PipelineBeforeEntryConditionsPtrOutput)
}

// Reserved for future use.
func (o PipelineStageDeclarationOutput) Blockers() PipelineBlockerDeclarationArrayOutput {
	return o.ApplyT(func(v PipelineStageDeclaration) []PipelineBlockerDeclaration { return v.Blockers }).(PipelineBlockerDeclarationArrayOutput)
}

// The name of the stage.
func (o PipelineStageDeclarationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineStageDeclaration) string { return v.Name }).(pulumi.StringOutput)
}

// The method to use when a stage has not completed successfully
func (o PipelineStageDeclarationOutput) OnFailure() PipelineFailureConditionsPtrOutput {
	return o.ApplyT(func(v PipelineStageDeclaration) *PipelineFailureConditions { return v.OnFailure }).(PipelineFailureConditionsPtrOutput)
}

// The method to use when a stage has completed successfully
func (o PipelineStageDeclarationOutput) OnSuccess() PipelineSuccessConditionsPtrOutput {
	return o.ApplyT(func(v PipelineStageDeclaration) *PipelineSuccessConditions { return v.OnSuccess }).(PipelineSuccessConditionsPtrOutput)
}

type PipelineStageDeclarationArrayOutput struct{ *pulumi.OutputState }

func (PipelineStageDeclarationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineStageDeclaration)(nil)).Elem()
}

func (o PipelineStageDeclarationArrayOutput) ToPipelineStageDeclarationArrayOutput() PipelineStageDeclarationArrayOutput {
	return o
}

func (o PipelineStageDeclarationArrayOutput) ToPipelineStageDeclarationArrayOutputWithContext(ctx context.Context) PipelineStageDeclarationArrayOutput {
	return o
}

func (o PipelineStageDeclarationArrayOutput) Index(i pulumi.IntInput) PipelineStageDeclarationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipelineStageDeclaration {
		return vs[0].([]PipelineStageDeclaration)[vs[1].(int)]
	}).(PipelineStageDeclarationOutput)
}

// The name of the pipeline in which you want to disable the flow of artifacts from one stage to another.
type PipelineStageTransition struct {
	// The reason given to the user that a stage is disabled, such as waiting for manual approval or manual tests. This message is displayed in the pipeline console UI.
	Reason string `pulumi:"reason"`
	// The name of the stage where you want to disable the inbound or outbound transition of artifacts.
	StageName string `pulumi:"stageName"`
}

// PipelineStageTransitionInput is an input type that accepts PipelineStageTransitionArgs and PipelineStageTransitionOutput values.
// You can construct a concrete instance of `PipelineStageTransitionInput` via:
//
//	PipelineStageTransitionArgs{...}
type PipelineStageTransitionInput interface {
	pulumi.Input

	ToPipelineStageTransitionOutput() PipelineStageTransitionOutput
	ToPipelineStageTransitionOutputWithContext(context.Context) PipelineStageTransitionOutput
}

// The name of the pipeline in which you want to disable the flow of artifacts from one stage to another.
type PipelineStageTransitionArgs struct {
	// The reason given to the user that a stage is disabled, such as waiting for manual approval or manual tests. This message is displayed in the pipeline console UI.
	Reason pulumi.StringInput `pulumi:"reason"`
	// The name of the stage where you want to disable the inbound or outbound transition of artifacts.
	StageName pulumi.StringInput `pulumi:"stageName"`
}

func (PipelineStageTransitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineStageTransition)(nil)).Elem()
}

func (i PipelineStageTransitionArgs) ToPipelineStageTransitionOutput() PipelineStageTransitionOutput {
	return i.ToPipelineStageTransitionOutputWithContext(context.Background())
}

func (i PipelineStageTransitionArgs) ToPipelineStageTransitionOutputWithContext(ctx context.Context) PipelineStageTransitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineStageTransitionOutput)
}

// PipelineStageTransitionArrayInput is an input type that accepts PipelineStageTransitionArray and PipelineStageTransitionArrayOutput values.
// You can construct a concrete instance of `PipelineStageTransitionArrayInput` via:
//
//	PipelineStageTransitionArray{ PipelineStageTransitionArgs{...} }
type PipelineStageTransitionArrayInput interface {
	pulumi.Input

	ToPipelineStageTransitionArrayOutput() PipelineStageTransitionArrayOutput
	ToPipelineStageTransitionArrayOutputWithContext(context.Context) PipelineStageTransitionArrayOutput
}

type PipelineStageTransitionArray []PipelineStageTransitionInput

func (PipelineStageTransitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineStageTransition)(nil)).Elem()
}

func (i PipelineStageTransitionArray) ToPipelineStageTransitionArrayOutput() PipelineStageTransitionArrayOutput {
	return i.ToPipelineStageTransitionArrayOutputWithContext(context.Background())
}

func (i PipelineStageTransitionArray) ToPipelineStageTransitionArrayOutputWithContext(ctx context.Context) PipelineStageTransitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineStageTransitionArrayOutput)
}

// The name of the pipeline in which you want to disable the flow of artifacts from one stage to another.
type PipelineStageTransitionOutput struct{ *pulumi.OutputState }

func (PipelineStageTransitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineStageTransition)(nil)).Elem()
}

func (o PipelineStageTransitionOutput) ToPipelineStageTransitionOutput() PipelineStageTransitionOutput {
	return o
}

func (o PipelineStageTransitionOutput) ToPipelineStageTransitionOutputWithContext(ctx context.Context) PipelineStageTransitionOutput {
	return o
}

// The reason given to the user that a stage is disabled, such as waiting for manual approval or manual tests. This message is displayed in the pipeline console UI.
func (o PipelineStageTransitionOutput) Reason() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineStageTransition) string { return v.Reason }).(pulumi.StringOutput)
}

// The name of the stage where you want to disable the inbound or outbound transition of artifacts.
func (o PipelineStageTransitionOutput) StageName() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineStageTransition) string { return v.StageName }).(pulumi.StringOutput)
}

type PipelineStageTransitionArrayOutput struct{ *pulumi.OutputState }

func (PipelineStageTransitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineStageTransition)(nil)).Elem()
}

func (o PipelineStageTransitionArrayOutput) ToPipelineStageTransitionArrayOutput() PipelineStageTransitionArrayOutput {
	return o
}

func (o PipelineStageTransitionArrayOutput) ToPipelineStageTransitionArrayOutputWithContext(ctx context.Context) PipelineStageTransitionArrayOutput {
	return o
}

func (o PipelineStageTransitionArrayOutput) Index(i pulumi.IntInput) PipelineStageTransitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipelineStageTransition {
		return vs[0].([]PipelineStageTransition)[vs[1].(int)]
	}).(PipelineStageTransitionOutput)
}

// The configuration that specifies the result, such as rollback, to occur upon stage failure
type PipelineSuccessConditions struct {
	// The conditions that are success conditions.
	Conditions []PipelineCondition `pulumi:"conditions"`
}

// PipelineSuccessConditionsInput is an input type that accepts PipelineSuccessConditionsArgs and PipelineSuccessConditionsOutput values.
// You can construct a concrete instance of `PipelineSuccessConditionsInput` via:
//
//	PipelineSuccessConditionsArgs{...}
type PipelineSuccessConditionsInput interface {
	pulumi.Input

	ToPipelineSuccessConditionsOutput() PipelineSuccessConditionsOutput
	ToPipelineSuccessConditionsOutputWithContext(context.Context) PipelineSuccessConditionsOutput
}

// The configuration that specifies the result, such as rollback, to occur upon stage failure
type PipelineSuccessConditionsArgs struct {
	// The conditions that are success conditions.
	Conditions PipelineConditionArrayInput `pulumi:"conditions"`
}

func (PipelineSuccessConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineSuccessConditions)(nil)).Elem()
}

func (i PipelineSuccessConditionsArgs) ToPipelineSuccessConditionsOutput() PipelineSuccessConditionsOutput {
	return i.ToPipelineSuccessConditionsOutputWithContext(context.Background())
}

func (i PipelineSuccessConditionsArgs) ToPipelineSuccessConditionsOutputWithContext(ctx context.Context) PipelineSuccessConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineSuccessConditionsOutput)
}

func (i PipelineSuccessConditionsArgs) ToPipelineSuccessConditionsPtrOutput() PipelineSuccessConditionsPtrOutput {
	return i.ToPipelineSuccessConditionsPtrOutputWithContext(context.Background())
}

func (i PipelineSuccessConditionsArgs) ToPipelineSuccessConditionsPtrOutputWithContext(ctx context.Context) PipelineSuccessConditionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineSuccessConditionsOutput).ToPipelineSuccessConditionsPtrOutputWithContext(ctx)
}

// PipelineSuccessConditionsPtrInput is an input type that accepts PipelineSuccessConditionsArgs, PipelineSuccessConditionsPtr and PipelineSuccessConditionsPtrOutput values.
// You can construct a concrete instance of `PipelineSuccessConditionsPtrInput` via:
//
//	        PipelineSuccessConditionsArgs{...}
//
//	or:
//
//	        nil
type PipelineSuccessConditionsPtrInput interface {
	pulumi.Input

	ToPipelineSuccessConditionsPtrOutput() PipelineSuccessConditionsPtrOutput
	ToPipelineSuccessConditionsPtrOutputWithContext(context.Context) PipelineSuccessConditionsPtrOutput
}

type pipelineSuccessConditionsPtrType PipelineSuccessConditionsArgs

func PipelineSuccessConditionsPtr(v *PipelineSuccessConditionsArgs) PipelineSuccessConditionsPtrInput {
	return (*pipelineSuccessConditionsPtrType)(v)
}

func (*pipelineSuccessConditionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineSuccessConditions)(nil)).Elem()
}

func (i *pipelineSuccessConditionsPtrType) ToPipelineSuccessConditionsPtrOutput() PipelineSuccessConditionsPtrOutput {
	return i.ToPipelineSuccessConditionsPtrOutputWithContext(context.Background())
}

func (i *pipelineSuccessConditionsPtrType) ToPipelineSuccessConditionsPtrOutputWithContext(ctx context.Context) PipelineSuccessConditionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineSuccessConditionsPtrOutput)
}

// The configuration that specifies the result, such as rollback, to occur upon stage failure
type PipelineSuccessConditionsOutput struct{ *pulumi.OutputState }

func (PipelineSuccessConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineSuccessConditions)(nil)).Elem()
}

func (o PipelineSuccessConditionsOutput) ToPipelineSuccessConditionsOutput() PipelineSuccessConditionsOutput {
	return o
}

func (o PipelineSuccessConditionsOutput) ToPipelineSuccessConditionsOutputWithContext(ctx context.Context) PipelineSuccessConditionsOutput {
	return o
}

func (o PipelineSuccessConditionsOutput) ToPipelineSuccessConditionsPtrOutput() PipelineSuccessConditionsPtrOutput {
	return o.ToPipelineSuccessConditionsPtrOutputWithContext(context.Background())
}

func (o PipelineSuccessConditionsOutput) ToPipelineSuccessConditionsPtrOutputWithContext(ctx context.Context) PipelineSuccessConditionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipelineSuccessConditions) *PipelineSuccessConditions {
		return &v
	}).(PipelineSuccessConditionsPtrOutput)
}

// The conditions that are success conditions.
func (o PipelineSuccessConditionsOutput) Conditions() PipelineConditionArrayOutput {
	return o.ApplyT(func(v PipelineSuccessConditions) []PipelineCondition { return v.Conditions }).(PipelineConditionArrayOutput)
}

type PipelineSuccessConditionsPtrOutput struct{ *pulumi.OutputState }

func (PipelineSuccessConditionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineSuccessConditions)(nil)).Elem()
}

func (o PipelineSuccessConditionsPtrOutput) ToPipelineSuccessConditionsPtrOutput() PipelineSuccessConditionsPtrOutput {
	return o
}

func (o PipelineSuccessConditionsPtrOutput) ToPipelineSuccessConditionsPtrOutputWithContext(ctx context.Context) PipelineSuccessConditionsPtrOutput {
	return o
}

func (o PipelineSuccessConditionsPtrOutput) Elem() PipelineSuccessConditionsOutput {
	return o.ApplyT(func(v *PipelineSuccessConditions) PipelineSuccessConditions {
		if v != nil {
			return *v
		}
		var ret PipelineSuccessConditions
		return ret
	}).(PipelineSuccessConditionsOutput)
}

// The conditions that are success conditions.
func (o PipelineSuccessConditionsPtrOutput) Conditions() PipelineConditionArrayOutput {
	return o.ApplyT(func(v *PipelineSuccessConditions) []PipelineCondition {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(PipelineConditionArrayOutput)
}

// A tag is a key-value pair that is used to manage the resource.
type PipelineTag struct {
	// The tag's key.
	Key string `pulumi:"key"`
	// The tag's value.
	Value string `pulumi:"value"`
}

// Represents information about the specified trigger configuration, such as the filter criteria and the source stage for the action that contains the trigger.
type PipelineTriggerDeclaration struct {
	// Provides the filter criteria and the source stage for the repository event that starts the pipeline, such as Git tags.
	GitConfiguration *PipelineGitConfiguration `pulumi:"gitConfiguration"`
	// The source provider for the event, such as connections configured for a repository with Git tags, for the specified trigger configuration.
	ProviderType PipelineTriggerDeclarationProviderType `pulumi:"providerType"`
}

// PipelineTriggerDeclarationInput is an input type that accepts PipelineTriggerDeclarationArgs and PipelineTriggerDeclarationOutput values.
// You can construct a concrete instance of `PipelineTriggerDeclarationInput` via:
//
//	PipelineTriggerDeclarationArgs{...}
type PipelineTriggerDeclarationInput interface {
	pulumi.Input

	ToPipelineTriggerDeclarationOutput() PipelineTriggerDeclarationOutput
	ToPipelineTriggerDeclarationOutputWithContext(context.Context) PipelineTriggerDeclarationOutput
}

// Represents information about the specified trigger configuration, such as the filter criteria and the source stage for the action that contains the trigger.
type PipelineTriggerDeclarationArgs struct {
	// Provides the filter criteria and the source stage for the repository event that starts the pipeline, such as Git tags.
	GitConfiguration PipelineGitConfigurationPtrInput `pulumi:"gitConfiguration"`
	// The source provider for the event, such as connections configured for a repository with Git tags, for the specified trigger configuration.
	ProviderType PipelineTriggerDeclarationProviderTypeInput `pulumi:"providerType"`
}

func (PipelineTriggerDeclarationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineTriggerDeclaration)(nil)).Elem()
}

func (i PipelineTriggerDeclarationArgs) ToPipelineTriggerDeclarationOutput() PipelineTriggerDeclarationOutput {
	return i.ToPipelineTriggerDeclarationOutputWithContext(context.Background())
}

func (i PipelineTriggerDeclarationArgs) ToPipelineTriggerDeclarationOutputWithContext(ctx context.Context) PipelineTriggerDeclarationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineTriggerDeclarationOutput)
}

// PipelineTriggerDeclarationArrayInput is an input type that accepts PipelineTriggerDeclarationArray and PipelineTriggerDeclarationArrayOutput values.
// You can construct a concrete instance of `PipelineTriggerDeclarationArrayInput` via:
//
//	PipelineTriggerDeclarationArray{ PipelineTriggerDeclarationArgs{...} }
type PipelineTriggerDeclarationArrayInput interface {
	pulumi.Input

	ToPipelineTriggerDeclarationArrayOutput() PipelineTriggerDeclarationArrayOutput
	ToPipelineTriggerDeclarationArrayOutputWithContext(context.Context) PipelineTriggerDeclarationArrayOutput
}

type PipelineTriggerDeclarationArray []PipelineTriggerDeclarationInput

func (PipelineTriggerDeclarationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineTriggerDeclaration)(nil)).Elem()
}

func (i PipelineTriggerDeclarationArray) ToPipelineTriggerDeclarationArrayOutput() PipelineTriggerDeclarationArrayOutput {
	return i.ToPipelineTriggerDeclarationArrayOutputWithContext(context.Background())
}

func (i PipelineTriggerDeclarationArray) ToPipelineTriggerDeclarationArrayOutputWithContext(ctx context.Context) PipelineTriggerDeclarationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineTriggerDeclarationArrayOutput)
}

// Represents information about the specified trigger configuration, such as the filter criteria and the source stage for the action that contains the trigger.
type PipelineTriggerDeclarationOutput struct{ *pulumi.OutputState }

func (PipelineTriggerDeclarationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineTriggerDeclaration)(nil)).Elem()
}

func (o PipelineTriggerDeclarationOutput) ToPipelineTriggerDeclarationOutput() PipelineTriggerDeclarationOutput {
	return o
}

func (o PipelineTriggerDeclarationOutput) ToPipelineTriggerDeclarationOutputWithContext(ctx context.Context) PipelineTriggerDeclarationOutput {
	return o
}

// Provides the filter criteria and the source stage for the repository event that starts the pipeline, such as Git tags.
func (o PipelineTriggerDeclarationOutput) GitConfiguration() PipelineGitConfigurationPtrOutput {
	return o.ApplyT(func(v PipelineTriggerDeclaration) *PipelineGitConfiguration { return v.GitConfiguration }).(PipelineGitConfigurationPtrOutput)
}

// The source provider for the event, such as connections configured for a repository with Git tags, for the specified trigger configuration.
func (o PipelineTriggerDeclarationOutput) ProviderType() PipelineTriggerDeclarationProviderTypeOutput {
	return o.ApplyT(func(v PipelineTriggerDeclaration) PipelineTriggerDeclarationProviderType { return v.ProviderType }).(PipelineTriggerDeclarationProviderTypeOutput)
}

type PipelineTriggerDeclarationArrayOutput struct{ *pulumi.OutputState }

func (PipelineTriggerDeclarationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineTriggerDeclaration)(nil)).Elem()
}

func (o PipelineTriggerDeclarationArrayOutput) ToPipelineTriggerDeclarationArrayOutput() PipelineTriggerDeclarationArrayOutput {
	return o
}

func (o PipelineTriggerDeclarationArrayOutput) ToPipelineTriggerDeclarationArrayOutputWithContext(ctx context.Context) PipelineTriggerDeclarationArrayOutput {
	return o
}

func (o PipelineTriggerDeclarationArrayOutput) Index(i pulumi.IntInput) PipelineTriggerDeclarationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipelineTriggerDeclaration {
		return vs[0].([]PipelineTriggerDeclaration)[vs[1].(int)]
	}).(PipelineTriggerDeclarationOutput)
}

// A variable declared at the pipeline level.
type PipelineVariableDeclaration struct {
	// The value of a pipeline-level variable.
	DefaultValue *string `pulumi:"defaultValue"`
	// The description of a pipeline-level variable. It's used to add additional context about the variable, and not being used at time when pipeline executes.
	Description *string `pulumi:"description"`
	// The name of a pipeline-level variable.
	Name string `pulumi:"name"`
}

// PipelineVariableDeclarationInput is an input type that accepts PipelineVariableDeclarationArgs and PipelineVariableDeclarationOutput values.
// You can construct a concrete instance of `PipelineVariableDeclarationInput` via:
//
//	PipelineVariableDeclarationArgs{...}
type PipelineVariableDeclarationInput interface {
	pulumi.Input

	ToPipelineVariableDeclarationOutput() PipelineVariableDeclarationOutput
	ToPipelineVariableDeclarationOutputWithContext(context.Context) PipelineVariableDeclarationOutput
}

// A variable declared at the pipeline level.
type PipelineVariableDeclarationArgs struct {
	// The value of a pipeline-level variable.
	DefaultValue pulumi.StringPtrInput `pulumi:"defaultValue"`
	// The description of a pipeline-level variable. It's used to add additional context about the variable, and not being used at time when pipeline executes.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The name of a pipeline-level variable.
	Name pulumi.StringInput `pulumi:"name"`
}

func (PipelineVariableDeclarationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineVariableDeclaration)(nil)).Elem()
}

func (i PipelineVariableDeclarationArgs) ToPipelineVariableDeclarationOutput() PipelineVariableDeclarationOutput {
	return i.ToPipelineVariableDeclarationOutputWithContext(context.Background())
}

func (i PipelineVariableDeclarationArgs) ToPipelineVariableDeclarationOutputWithContext(ctx context.Context) PipelineVariableDeclarationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineVariableDeclarationOutput)
}

// PipelineVariableDeclarationArrayInput is an input type that accepts PipelineVariableDeclarationArray and PipelineVariableDeclarationArrayOutput values.
// You can construct a concrete instance of `PipelineVariableDeclarationArrayInput` via:
//
//	PipelineVariableDeclarationArray{ PipelineVariableDeclarationArgs{...} }
type PipelineVariableDeclarationArrayInput interface {
	pulumi.Input

	ToPipelineVariableDeclarationArrayOutput() PipelineVariableDeclarationArrayOutput
	ToPipelineVariableDeclarationArrayOutputWithContext(context.Context) PipelineVariableDeclarationArrayOutput
}

type PipelineVariableDeclarationArray []PipelineVariableDeclarationInput

func (PipelineVariableDeclarationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineVariableDeclaration)(nil)).Elem()
}

func (i PipelineVariableDeclarationArray) ToPipelineVariableDeclarationArrayOutput() PipelineVariableDeclarationArrayOutput {
	return i.ToPipelineVariableDeclarationArrayOutputWithContext(context.Background())
}

func (i PipelineVariableDeclarationArray) ToPipelineVariableDeclarationArrayOutputWithContext(ctx context.Context) PipelineVariableDeclarationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineVariableDeclarationArrayOutput)
}

// A variable declared at the pipeline level.
type PipelineVariableDeclarationOutput struct{ *pulumi.OutputState }

func (PipelineVariableDeclarationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineVariableDeclaration)(nil)).Elem()
}

func (o PipelineVariableDeclarationOutput) ToPipelineVariableDeclarationOutput() PipelineVariableDeclarationOutput {
	return o
}

func (o PipelineVariableDeclarationOutput) ToPipelineVariableDeclarationOutputWithContext(ctx context.Context) PipelineVariableDeclarationOutput {
	return o
}

// The value of a pipeline-level variable.
func (o PipelineVariableDeclarationOutput) DefaultValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineVariableDeclaration) *string { return v.DefaultValue }).(pulumi.StringPtrOutput)
}

// The description of a pipeline-level variable. It's used to add additional context about the variable, and not being used at time when pipeline executes.
func (o PipelineVariableDeclarationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineVariableDeclaration) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of a pipeline-level variable.
func (o PipelineVariableDeclarationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineVariableDeclaration) string { return v.Name }).(pulumi.StringOutput)
}

type PipelineVariableDeclarationArrayOutput struct{ *pulumi.OutputState }

func (PipelineVariableDeclarationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineVariableDeclaration)(nil)).Elem()
}

func (o PipelineVariableDeclarationArrayOutput) ToPipelineVariableDeclarationArrayOutput() PipelineVariableDeclarationArrayOutput {
	return o
}

func (o PipelineVariableDeclarationArrayOutput) ToPipelineVariableDeclarationArrayOutputWithContext(ctx context.Context) PipelineVariableDeclarationArrayOutput {
	return o
}

func (o PipelineVariableDeclarationArrayOutput) Index(i pulumi.IntInput) PipelineVariableDeclarationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipelineVariableDeclaration {
		return vs[0].([]PipelineVariableDeclaration)[vs[1].(int)]
	}).(PipelineVariableDeclarationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CustomActionTypeArtifactDetailsInput)(nil)).Elem(), CustomActionTypeArtifactDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomActionTypeConfigurationPropertiesInput)(nil)).Elem(), CustomActionTypeConfigurationPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomActionTypeConfigurationPropertiesArrayInput)(nil)).Elem(), CustomActionTypeConfigurationPropertiesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomActionTypeSettingsInput)(nil)).Elem(), CustomActionTypeSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomActionTypeSettingsPtrInput)(nil)).Elem(), CustomActionTypeSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineActionDeclarationInput)(nil)).Elem(), PipelineActionDeclarationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineActionDeclarationArrayInput)(nil)).Elem(), PipelineActionDeclarationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineActionTypeIdInput)(nil)).Elem(), PipelineActionTypeIdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineArtifactStoreInput)(nil)).Elem(), PipelineArtifactStoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineArtifactStorePtrInput)(nil)).Elem(), PipelineArtifactStoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineArtifactStoreMapInput)(nil)).Elem(), PipelineArtifactStoreMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineArtifactStoreMapArrayInput)(nil)).Elem(), PipelineArtifactStoreMapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineBeforeEntryConditionsInput)(nil)).Elem(), PipelineBeforeEntryConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineBeforeEntryConditionsPtrInput)(nil)).Elem(), PipelineBeforeEntryConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineBlockerDeclarationInput)(nil)).Elem(), PipelineBlockerDeclarationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineBlockerDeclarationArrayInput)(nil)).Elem(), PipelineBlockerDeclarationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineConditionInput)(nil)).Elem(), PipelineConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineConditionArrayInput)(nil)).Elem(), PipelineConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineEncryptionKeyInput)(nil)).Elem(), PipelineEncryptionKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineEncryptionKeyPtrInput)(nil)).Elem(), PipelineEncryptionKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineEnvironmentVariableInput)(nil)).Elem(), PipelineEnvironmentVariableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineEnvironmentVariableArrayInput)(nil)).Elem(), PipelineEnvironmentVariableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineFailureConditionsInput)(nil)).Elem(), PipelineFailureConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineFailureConditionsPtrInput)(nil)).Elem(), PipelineFailureConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineFailureConditionsRetryConfigurationPropertiesInput)(nil)).Elem(), PipelineFailureConditionsRetryConfigurationPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineFailureConditionsRetryConfigurationPropertiesPtrInput)(nil)).Elem(), PipelineFailureConditionsRetryConfigurationPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineGitBranchFilterCriteriaInput)(nil)).Elem(), PipelineGitBranchFilterCriteriaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineGitBranchFilterCriteriaPtrInput)(nil)).Elem(), PipelineGitBranchFilterCriteriaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineGitConfigurationInput)(nil)).Elem(), PipelineGitConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineGitConfigurationPtrInput)(nil)).Elem(), PipelineGitConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineGitFilePathFilterCriteriaInput)(nil)).Elem(), PipelineGitFilePathFilterCriteriaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineGitFilePathFilterCriteriaPtrInput)(nil)).Elem(), PipelineGitFilePathFilterCriteriaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineGitPullRequestFilterInput)(nil)).Elem(), PipelineGitPullRequestFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineGitPullRequestFilterArrayInput)(nil)).Elem(), PipelineGitPullRequestFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineGitPushFilterInput)(nil)).Elem(), PipelineGitPushFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineGitPushFilterArrayInput)(nil)).Elem(), PipelineGitPushFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineGitTagFilterCriteriaInput)(nil)).Elem(), PipelineGitTagFilterCriteriaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineGitTagFilterCriteriaPtrInput)(nil)).Elem(), PipelineGitTagFilterCriteriaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineInputArtifactInput)(nil)).Elem(), PipelineInputArtifactArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineInputArtifactArrayInput)(nil)).Elem(), PipelineInputArtifactArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineOutputArtifactInput)(nil)).Elem(), PipelineOutputArtifactArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineOutputArtifactArrayInput)(nil)).Elem(), PipelineOutputArtifactArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineRuleDeclarationInput)(nil)).Elem(), PipelineRuleDeclarationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineRuleDeclarationArrayInput)(nil)).Elem(), PipelineRuleDeclarationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineRuleTypeIdInput)(nil)).Elem(), PipelineRuleTypeIdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineRuleTypeIdPtrInput)(nil)).Elem(), PipelineRuleTypeIdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineStageDeclarationInput)(nil)).Elem(), PipelineStageDeclarationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineStageDeclarationArrayInput)(nil)).Elem(), PipelineStageDeclarationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineStageTransitionInput)(nil)).Elem(), PipelineStageTransitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineStageTransitionArrayInput)(nil)).Elem(), PipelineStageTransitionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineSuccessConditionsInput)(nil)).Elem(), PipelineSuccessConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineSuccessConditionsPtrInput)(nil)).Elem(), PipelineSuccessConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineTriggerDeclarationInput)(nil)).Elem(), PipelineTriggerDeclarationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineTriggerDeclarationArrayInput)(nil)).Elem(), PipelineTriggerDeclarationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineVariableDeclarationInput)(nil)).Elem(), PipelineVariableDeclarationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineVariableDeclarationArrayInput)(nil)).Elem(), PipelineVariableDeclarationArray{})
	pulumi.RegisterOutputType(CustomActionTypeArtifactDetailsOutput{})
	pulumi.RegisterOutputType(CustomActionTypeConfigurationPropertiesOutput{})
	pulumi.RegisterOutputType(CustomActionTypeConfigurationPropertiesArrayOutput{})
	pulumi.RegisterOutputType(CustomActionTypeSettingsOutput{})
	pulumi.RegisterOutputType(CustomActionTypeSettingsPtrOutput{})
	pulumi.RegisterOutputType(PipelineActionDeclarationOutput{})
	pulumi.RegisterOutputType(PipelineActionDeclarationArrayOutput{})
	pulumi.RegisterOutputType(PipelineActionTypeIdOutput{})
	pulumi.RegisterOutputType(PipelineArtifactStoreOutput{})
	pulumi.RegisterOutputType(PipelineArtifactStorePtrOutput{})
	pulumi.RegisterOutputType(PipelineArtifactStoreMapOutput{})
	pulumi.RegisterOutputType(PipelineArtifactStoreMapArrayOutput{})
	pulumi.RegisterOutputType(PipelineBeforeEntryConditionsOutput{})
	pulumi.RegisterOutputType(PipelineBeforeEntryConditionsPtrOutput{})
	pulumi.RegisterOutputType(PipelineBlockerDeclarationOutput{})
	pulumi.RegisterOutputType(PipelineBlockerDeclarationArrayOutput{})
	pulumi.RegisterOutputType(PipelineConditionOutput{})
	pulumi.RegisterOutputType(PipelineConditionArrayOutput{})
	pulumi.RegisterOutputType(PipelineEncryptionKeyOutput{})
	pulumi.RegisterOutputType(PipelineEncryptionKeyPtrOutput{})
	pulumi.RegisterOutputType(PipelineEnvironmentVariableOutput{})
	pulumi.RegisterOutputType(PipelineEnvironmentVariableArrayOutput{})
	pulumi.RegisterOutputType(PipelineFailureConditionsOutput{})
	pulumi.RegisterOutputType(PipelineFailureConditionsPtrOutput{})
	pulumi.RegisterOutputType(PipelineFailureConditionsRetryConfigurationPropertiesOutput{})
	pulumi.RegisterOutputType(PipelineFailureConditionsRetryConfigurationPropertiesPtrOutput{})
	pulumi.RegisterOutputType(PipelineGitBranchFilterCriteriaOutput{})
	pulumi.RegisterOutputType(PipelineGitBranchFilterCriteriaPtrOutput{})
	pulumi.RegisterOutputType(PipelineGitConfigurationOutput{})
	pulumi.RegisterOutputType(PipelineGitConfigurationPtrOutput{})
	pulumi.RegisterOutputType(PipelineGitFilePathFilterCriteriaOutput{})
	pulumi.RegisterOutputType(PipelineGitFilePathFilterCriteriaPtrOutput{})
	pulumi.RegisterOutputType(PipelineGitPullRequestFilterOutput{})
	pulumi.RegisterOutputType(PipelineGitPullRequestFilterArrayOutput{})
	pulumi.RegisterOutputType(PipelineGitPushFilterOutput{})
	pulumi.RegisterOutputType(PipelineGitPushFilterArrayOutput{})
	pulumi.RegisterOutputType(PipelineGitTagFilterCriteriaOutput{})
	pulumi.RegisterOutputType(PipelineGitTagFilterCriteriaPtrOutput{})
	pulumi.RegisterOutputType(PipelineInputArtifactOutput{})
	pulumi.RegisterOutputType(PipelineInputArtifactArrayOutput{})
	pulumi.RegisterOutputType(PipelineOutputArtifactOutput{})
	pulumi.RegisterOutputType(PipelineOutputArtifactArrayOutput{})
	pulumi.RegisterOutputType(PipelineRuleDeclarationOutput{})
	pulumi.RegisterOutputType(PipelineRuleDeclarationArrayOutput{})
	pulumi.RegisterOutputType(PipelineRuleTypeIdOutput{})
	pulumi.RegisterOutputType(PipelineRuleTypeIdPtrOutput{})
	pulumi.RegisterOutputType(PipelineStageDeclarationOutput{})
	pulumi.RegisterOutputType(PipelineStageDeclarationArrayOutput{})
	pulumi.RegisterOutputType(PipelineStageTransitionOutput{})
	pulumi.RegisterOutputType(PipelineStageTransitionArrayOutput{})
	pulumi.RegisterOutputType(PipelineSuccessConditionsOutput{})
	pulumi.RegisterOutputType(PipelineSuccessConditionsPtrOutput{})
	pulumi.RegisterOutputType(PipelineTriggerDeclarationOutput{})
	pulumi.RegisterOutputType(PipelineTriggerDeclarationArrayOutput{})
	pulumi.RegisterOutputType(PipelineVariableDeclarationOutput{})
	pulumi.RegisterOutputType(PipelineVariableDeclarationArrayOutput{})
}
