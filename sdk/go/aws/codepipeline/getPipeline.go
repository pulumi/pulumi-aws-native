// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package codepipeline

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The AWS::CodePipeline::Pipeline resource creates a CodePipeline pipeline that describes how software changes go through a release process.
func LookupPipeline(ctx *pulumi.Context, args *LookupPipelineArgs, opts ...pulumi.InvokeOption) (*LookupPipelineResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPipelineResult
	err := ctx.Invoke("aws-native:codepipeline:getPipeline", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupPipelineArgs struct {
	// The name of the pipeline.
	Name string `pulumi:"name"`
}

type LookupPipelineResult struct {
	// The S3 bucket where artifacts for the pipeline are stored.
	ArtifactStore *PipelineArtifactStore `pulumi:"artifactStore"`
	// A mapping of artifactStore objects and their corresponding AWS Regions. There must be an artifact store for the pipeline Region and for each cross-region action in the pipeline.
	ArtifactStores []PipelineArtifactStoreMap `pulumi:"artifactStores"`
	// Represents the input of a DisableStageTransition action.
	DisableInboundStageTransitions []PipelineStageTransition `pulumi:"disableInboundStageTransitions"`
	// The method that the pipeline will use to handle multiple executions. The default mode is SUPERSEDED.
	ExecutionMode *PipelineExecutionMode `pulumi:"executionMode"`
	// CodePipeline provides the following pipeline types, which differ in characteristics and price, so that you can tailor your pipeline features and cost to the needs of your applications.
	PipelineType *PipelineType `pulumi:"pipelineType"`
	// The Amazon Resource Name (ARN) for CodePipeline to use to either perform actions with no actionRoleArn, or to use to assume roles for actions with an actionRoleArn
	RoleArn *string `pulumi:"roleArn"`
	// Represents information about a stage and its definition.
	Stages []PipelineStageDeclaration `pulumi:"stages"`
	// Specifies the tags applied to the pipeline.
	Tags []aws.Tag `pulumi:"tags"`
	// The trigger configuration specifying a type of event, such as Git tags, that starts the pipeline.
	Triggers []PipelineTriggerDeclaration `pulumi:"triggers"`
	// A list that defines the pipeline variables for a pipeline resource. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9@\-_]+.
	Variables []PipelineVariableDeclaration `pulumi:"variables"`
	// The version of the pipeline.
	Version *string `pulumi:"version"`
}

func LookupPipelineOutput(ctx *pulumi.Context, args LookupPipelineOutputArgs, opts ...pulumi.InvokeOption) LookupPipelineResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupPipelineResult, error) {
			args := v.(LookupPipelineArgs)
			r, err := LookupPipeline(ctx, &args, opts...)
			var s LookupPipelineResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupPipelineResultOutput)
}

type LookupPipelineOutputArgs struct {
	// The name of the pipeline.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupPipelineOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPipelineArgs)(nil)).Elem()
}

type LookupPipelineResultOutput struct{ *pulumi.OutputState }

func (LookupPipelineResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPipelineResult)(nil)).Elem()
}

func (o LookupPipelineResultOutput) ToLookupPipelineResultOutput() LookupPipelineResultOutput {
	return o
}

func (o LookupPipelineResultOutput) ToLookupPipelineResultOutputWithContext(ctx context.Context) LookupPipelineResultOutput {
	return o
}

// The S3 bucket where artifacts for the pipeline are stored.
func (o LookupPipelineResultOutput) ArtifactStore() PipelineArtifactStorePtrOutput {
	return o.ApplyT(func(v LookupPipelineResult) *PipelineArtifactStore { return v.ArtifactStore }).(PipelineArtifactStorePtrOutput)
}

// A mapping of artifactStore objects and their corresponding AWS Regions. There must be an artifact store for the pipeline Region and for each cross-region action in the pipeline.
func (o LookupPipelineResultOutput) ArtifactStores() PipelineArtifactStoreMapArrayOutput {
	return o.ApplyT(func(v LookupPipelineResult) []PipelineArtifactStoreMap { return v.ArtifactStores }).(PipelineArtifactStoreMapArrayOutput)
}

// Represents the input of a DisableStageTransition action.
func (o LookupPipelineResultOutput) DisableInboundStageTransitions() PipelineStageTransitionArrayOutput {
	return o.ApplyT(func(v LookupPipelineResult) []PipelineStageTransition { return v.DisableInboundStageTransitions }).(PipelineStageTransitionArrayOutput)
}

// The method that the pipeline will use to handle multiple executions. The default mode is SUPERSEDED.
func (o LookupPipelineResultOutput) ExecutionMode() PipelineExecutionModePtrOutput {
	return o.ApplyT(func(v LookupPipelineResult) *PipelineExecutionMode { return v.ExecutionMode }).(PipelineExecutionModePtrOutput)
}

// CodePipeline provides the following pipeline types, which differ in characteristics and price, so that you can tailor your pipeline features and cost to the needs of your applications.
func (o LookupPipelineResultOutput) PipelineType() PipelineTypePtrOutput {
	return o.ApplyT(func(v LookupPipelineResult) *PipelineType { return v.PipelineType }).(PipelineTypePtrOutput)
}

// The Amazon Resource Name (ARN) for CodePipeline to use to either perform actions with no actionRoleArn, or to use to assume roles for actions with an actionRoleArn
func (o LookupPipelineResultOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPipelineResult) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// Represents information about a stage and its definition.
func (o LookupPipelineResultOutput) Stages() PipelineStageDeclarationArrayOutput {
	return o.ApplyT(func(v LookupPipelineResult) []PipelineStageDeclaration { return v.Stages }).(PipelineStageDeclarationArrayOutput)
}

// Specifies the tags applied to the pipeline.
func (o LookupPipelineResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupPipelineResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

// The trigger configuration specifying a type of event, such as Git tags, that starts the pipeline.
func (o LookupPipelineResultOutput) Triggers() PipelineTriggerDeclarationArrayOutput {
	return o.ApplyT(func(v LookupPipelineResult) []PipelineTriggerDeclaration { return v.Triggers }).(PipelineTriggerDeclarationArrayOutput)
}

// A list that defines the pipeline variables for a pipeline resource. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9@\-_]+.
func (o LookupPipelineResultOutput) Variables() PipelineVariableDeclarationArrayOutput {
	return o.ApplyT(func(v LookupPipelineResult) []PipelineVariableDeclaration { return v.Variables }).(PipelineVariableDeclarationArrayOutput)
}

// The version of the pipeline.
func (o LookupPipelineResultOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPipelineResult) *string { return v.Version }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPipelineResultOutput{})
}
