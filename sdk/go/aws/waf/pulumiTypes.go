// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package waf

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ByteMatchSetByteMatchTuple struct {
	FieldToMatch         ByteMatchSetFieldToMatch `pulumi:"fieldToMatch"`
	PositionalConstraint string                   `pulumi:"positionalConstraint"`
	TargetString         *string                  `pulumi:"targetString"`
	TargetStringBase64   *string                  `pulumi:"targetStringBase64"`
	TextTransformation   string                   `pulumi:"textTransformation"`
}

// ByteMatchSetByteMatchTupleInput is an input type that accepts ByteMatchSetByteMatchTupleArgs and ByteMatchSetByteMatchTupleOutput values.
// You can construct a concrete instance of `ByteMatchSetByteMatchTupleInput` via:
//
//          ByteMatchSetByteMatchTupleArgs{...}
type ByteMatchSetByteMatchTupleInput interface {
	pulumi.Input

	ToByteMatchSetByteMatchTupleOutput() ByteMatchSetByteMatchTupleOutput
	ToByteMatchSetByteMatchTupleOutputWithContext(context.Context) ByteMatchSetByteMatchTupleOutput
}

type ByteMatchSetByteMatchTupleArgs struct {
	FieldToMatch         ByteMatchSetFieldToMatchInput `pulumi:"fieldToMatch"`
	PositionalConstraint pulumi.StringInput            `pulumi:"positionalConstraint"`
	TargetString         pulumi.StringPtrInput         `pulumi:"targetString"`
	TargetStringBase64   pulumi.StringPtrInput         `pulumi:"targetStringBase64"`
	TextTransformation   pulumi.StringInput            `pulumi:"textTransformation"`
}

func (ByteMatchSetByteMatchTupleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ByteMatchSetByteMatchTuple)(nil)).Elem()
}

func (i ByteMatchSetByteMatchTupleArgs) ToByteMatchSetByteMatchTupleOutput() ByteMatchSetByteMatchTupleOutput {
	return i.ToByteMatchSetByteMatchTupleOutputWithContext(context.Background())
}

func (i ByteMatchSetByteMatchTupleArgs) ToByteMatchSetByteMatchTupleOutputWithContext(ctx context.Context) ByteMatchSetByteMatchTupleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ByteMatchSetByteMatchTupleOutput)
}

// ByteMatchSetByteMatchTupleArrayInput is an input type that accepts ByteMatchSetByteMatchTupleArray and ByteMatchSetByteMatchTupleArrayOutput values.
// You can construct a concrete instance of `ByteMatchSetByteMatchTupleArrayInput` via:
//
//          ByteMatchSetByteMatchTupleArray{ ByteMatchSetByteMatchTupleArgs{...} }
type ByteMatchSetByteMatchTupleArrayInput interface {
	pulumi.Input

	ToByteMatchSetByteMatchTupleArrayOutput() ByteMatchSetByteMatchTupleArrayOutput
	ToByteMatchSetByteMatchTupleArrayOutputWithContext(context.Context) ByteMatchSetByteMatchTupleArrayOutput
}

type ByteMatchSetByteMatchTupleArray []ByteMatchSetByteMatchTupleInput

func (ByteMatchSetByteMatchTupleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ByteMatchSetByteMatchTuple)(nil)).Elem()
}

func (i ByteMatchSetByteMatchTupleArray) ToByteMatchSetByteMatchTupleArrayOutput() ByteMatchSetByteMatchTupleArrayOutput {
	return i.ToByteMatchSetByteMatchTupleArrayOutputWithContext(context.Background())
}

func (i ByteMatchSetByteMatchTupleArray) ToByteMatchSetByteMatchTupleArrayOutputWithContext(ctx context.Context) ByteMatchSetByteMatchTupleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ByteMatchSetByteMatchTupleArrayOutput)
}

type ByteMatchSetByteMatchTupleOutput struct{ *pulumi.OutputState }

func (ByteMatchSetByteMatchTupleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ByteMatchSetByteMatchTuple)(nil)).Elem()
}

func (o ByteMatchSetByteMatchTupleOutput) ToByteMatchSetByteMatchTupleOutput() ByteMatchSetByteMatchTupleOutput {
	return o
}

func (o ByteMatchSetByteMatchTupleOutput) ToByteMatchSetByteMatchTupleOutputWithContext(ctx context.Context) ByteMatchSetByteMatchTupleOutput {
	return o
}

func (o ByteMatchSetByteMatchTupleOutput) FieldToMatch() ByteMatchSetFieldToMatchOutput {
	return o.ApplyT(func(v ByteMatchSetByteMatchTuple) ByteMatchSetFieldToMatch { return v.FieldToMatch }).(ByteMatchSetFieldToMatchOutput)
}

func (o ByteMatchSetByteMatchTupleOutput) PositionalConstraint() pulumi.StringOutput {
	return o.ApplyT(func(v ByteMatchSetByteMatchTuple) string { return v.PositionalConstraint }).(pulumi.StringOutput)
}

func (o ByteMatchSetByteMatchTupleOutput) TargetString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ByteMatchSetByteMatchTuple) *string { return v.TargetString }).(pulumi.StringPtrOutput)
}

func (o ByteMatchSetByteMatchTupleOutput) TargetStringBase64() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ByteMatchSetByteMatchTuple) *string { return v.TargetStringBase64 }).(pulumi.StringPtrOutput)
}

func (o ByteMatchSetByteMatchTupleOutput) TextTransformation() pulumi.StringOutput {
	return o.ApplyT(func(v ByteMatchSetByteMatchTuple) string { return v.TextTransformation }).(pulumi.StringOutput)
}

type ByteMatchSetByteMatchTupleArrayOutput struct{ *pulumi.OutputState }

func (ByteMatchSetByteMatchTupleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ByteMatchSetByteMatchTuple)(nil)).Elem()
}

func (o ByteMatchSetByteMatchTupleArrayOutput) ToByteMatchSetByteMatchTupleArrayOutput() ByteMatchSetByteMatchTupleArrayOutput {
	return o
}

func (o ByteMatchSetByteMatchTupleArrayOutput) ToByteMatchSetByteMatchTupleArrayOutputWithContext(ctx context.Context) ByteMatchSetByteMatchTupleArrayOutput {
	return o
}

func (o ByteMatchSetByteMatchTupleArrayOutput) Index(i pulumi.IntInput) ByteMatchSetByteMatchTupleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ByteMatchSetByteMatchTuple {
		return vs[0].([]ByteMatchSetByteMatchTuple)[vs[1].(int)]
	}).(ByteMatchSetByteMatchTupleOutput)
}

type ByteMatchSetFieldToMatch struct {
	Data *string `pulumi:"data"`
	Type string  `pulumi:"type"`
}

// ByteMatchSetFieldToMatchInput is an input type that accepts ByteMatchSetFieldToMatchArgs and ByteMatchSetFieldToMatchOutput values.
// You can construct a concrete instance of `ByteMatchSetFieldToMatchInput` via:
//
//          ByteMatchSetFieldToMatchArgs{...}
type ByteMatchSetFieldToMatchInput interface {
	pulumi.Input

	ToByteMatchSetFieldToMatchOutput() ByteMatchSetFieldToMatchOutput
	ToByteMatchSetFieldToMatchOutputWithContext(context.Context) ByteMatchSetFieldToMatchOutput
}

type ByteMatchSetFieldToMatchArgs struct {
	Data pulumi.StringPtrInput `pulumi:"data"`
	Type pulumi.StringInput    `pulumi:"type"`
}

func (ByteMatchSetFieldToMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ByteMatchSetFieldToMatch)(nil)).Elem()
}

func (i ByteMatchSetFieldToMatchArgs) ToByteMatchSetFieldToMatchOutput() ByteMatchSetFieldToMatchOutput {
	return i.ToByteMatchSetFieldToMatchOutputWithContext(context.Background())
}

func (i ByteMatchSetFieldToMatchArgs) ToByteMatchSetFieldToMatchOutputWithContext(ctx context.Context) ByteMatchSetFieldToMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ByteMatchSetFieldToMatchOutput)
}

type ByteMatchSetFieldToMatchOutput struct{ *pulumi.OutputState }

func (ByteMatchSetFieldToMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ByteMatchSetFieldToMatch)(nil)).Elem()
}

func (o ByteMatchSetFieldToMatchOutput) ToByteMatchSetFieldToMatchOutput() ByteMatchSetFieldToMatchOutput {
	return o
}

func (o ByteMatchSetFieldToMatchOutput) ToByteMatchSetFieldToMatchOutputWithContext(ctx context.Context) ByteMatchSetFieldToMatchOutput {
	return o
}

func (o ByteMatchSetFieldToMatchOutput) Data() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ByteMatchSetFieldToMatch) *string { return v.Data }).(pulumi.StringPtrOutput)
}

func (o ByteMatchSetFieldToMatchOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ByteMatchSetFieldToMatch) string { return v.Type }).(pulumi.StringOutput)
}

type IPSetDescriptor struct {
	Type  string `pulumi:"type"`
	Value string `pulumi:"value"`
}

// IPSetDescriptorInput is an input type that accepts IPSetDescriptorArgs and IPSetDescriptorOutput values.
// You can construct a concrete instance of `IPSetDescriptorInput` via:
//
//          IPSetDescriptorArgs{...}
type IPSetDescriptorInput interface {
	pulumi.Input

	ToIPSetDescriptorOutput() IPSetDescriptorOutput
	ToIPSetDescriptorOutputWithContext(context.Context) IPSetDescriptorOutput
}

type IPSetDescriptorArgs struct {
	Type  pulumi.StringInput `pulumi:"type"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (IPSetDescriptorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IPSetDescriptor)(nil)).Elem()
}

func (i IPSetDescriptorArgs) ToIPSetDescriptorOutput() IPSetDescriptorOutput {
	return i.ToIPSetDescriptorOutputWithContext(context.Background())
}

func (i IPSetDescriptorArgs) ToIPSetDescriptorOutputWithContext(ctx context.Context) IPSetDescriptorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPSetDescriptorOutput)
}

// IPSetDescriptorArrayInput is an input type that accepts IPSetDescriptorArray and IPSetDescriptorArrayOutput values.
// You can construct a concrete instance of `IPSetDescriptorArrayInput` via:
//
//          IPSetDescriptorArray{ IPSetDescriptorArgs{...} }
type IPSetDescriptorArrayInput interface {
	pulumi.Input

	ToIPSetDescriptorArrayOutput() IPSetDescriptorArrayOutput
	ToIPSetDescriptorArrayOutputWithContext(context.Context) IPSetDescriptorArrayOutput
}

type IPSetDescriptorArray []IPSetDescriptorInput

func (IPSetDescriptorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IPSetDescriptor)(nil)).Elem()
}

func (i IPSetDescriptorArray) ToIPSetDescriptorArrayOutput() IPSetDescriptorArrayOutput {
	return i.ToIPSetDescriptorArrayOutputWithContext(context.Background())
}

func (i IPSetDescriptorArray) ToIPSetDescriptorArrayOutputWithContext(ctx context.Context) IPSetDescriptorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPSetDescriptorArrayOutput)
}

type IPSetDescriptorOutput struct{ *pulumi.OutputState }

func (IPSetDescriptorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IPSetDescriptor)(nil)).Elem()
}

func (o IPSetDescriptorOutput) ToIPSetDescriptorOutput() IPSetDescriptorOutput {
	return o
}

func (o IPSetDescriptorOutput) ToIPSetDescriptorOutputWithContext(ctx context.Context) IPSetDescriptorOutput {
	return o
}

func (o IPSetDescriptorOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v IPSetDescriptor) string { return v.Type }).(pulumi.StringOutput)
}

func (o IPSetDescriptorOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v IPSetDescriptor) string { return v.Value }).(pulumi.StringOutput)
}

type IPSetDescriptorArrayOutput struct{ *pulumi.OutputState }

func (IPSetDescriptorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IPSetDescriptor)(nil)).Elem()
}

func (o IPSetDescriptorArrayOutput) ToIPSetDescriptorArrayOutput() IPSetDescriptorArrayOutput {
	return o
}

func (o IPSetDescriptorArrayOutput) ToIPSetDescriptorArrayOutputWithContext(ctx context.Context) IPSetDescriptorArrayOutput {
	return o
}

func (o IPSetDescriptorArrayOutput) Index(i pulumi.IntInput) IPSetDescriptorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IPSetDescriptor {
		return vs[0].([]IPSetDescriptor)[vs[1].(int)]
	}).(IPSetDescriptorOutput)
}

type RulePredicate struct {
	DataId  string `pulumi:"dataId"`
	Negated bool   `pulumi:"negated"`
	Type    string `pulumi:"type"`
}

// RulePredicateInput is an input type that accepts RulePredicateArgs and RulePredicateOutput values.
// You can construct a concrete instance of `RulePredicateInput` via:
//
//          RulePredicateArgs{...}
type RulePredicateInput interface {
	pulumi.Input

	ToRulePredicateOutput() RulePredicateOutput
	ToRulePredicateOutputWithContext(context.Context) RulePredicateOutput
}

type RulePredicateArgs struct {
	DataId  pulumi.StringInput `pulumi:"dataId"`
	Negated pulumi.BoolInput   `pulumi:"negated"`
	Type    pulumi.StringInput `pulumi:"type"`
}

func (RulePredicateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RulePredicate)(nil)).Elem()
}

func (i RulePredicateArgs) ToRulePredicateOutput() RulePredicateOutput {
	return i.ToRulePredicateOutputWithContext(context.Background())
}

func (i RulePredicateArgs) ToRulePredicateOutputWithContext(ctx context.Context) RulePredicateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulePredicateOutput)
}

// RulePredicateArrayInput is an input type that accepts RulePredicateArray and RulePredicateArrayOutput values.
// You can construct a concrete instance of `RulePredicateArrayInput` via:
//
//          RulePredicateArray{ RulePredicateArgs{...} }
type RulePredicateArrayInput interface {
	pulumi.Input

	ToRulePredicateArrayOutput() RulePredicateArrayOutput
	ToRulePredicateArrayOutputWithContext(context.Context) RulePredicateArrayOutput
}

type RulePredicateArray []RulePredicateInput

func (RulePredicateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulePredicate)(nil)).Elem()
}

func (i RulePredicateArray) ToRulePredicateArrayOutput() RulePredicateArrayOutput {
	return i.ToRulePredicateArrayOutputWithContext(context.Background())
}

func (i RulePredicateArray) ToRulePredicateArrayOutputWithContext(ctx context.Context) RulePredicateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulePredicateArrayOutput)
}

type RulePredicateOutput struct{ *pulumi.OutputState }

func (RulePredicateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulePredicate)(nil)).Elem()
}

func (o RulePredicateOutput) ToRulePredicateOutput() RulePredicateOutput {
	return o
}

func (o RulePredicateOutput) ToRulePredicateOutputWithContext(ctx context.Context) RulePredicateOutput {
	return o
}

func (o RulePredicateOutput) DataId() pulumi.StringOutput {
	return o.ApplyT(func(v RulePredicate) string { return v.DataId }).(pulumi.StringOutput)
}

func (o RulePredicateOutput) Negated() pulumi.BoolOutput {
	return o.ApplyT(func(v RulePredicate) bool { return v.Negated }).(pulumi.BoolOutput)
}

func (o RulePredicateOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RulePredicate) string { return v.Type }).(pulumi.StringOutput)
}

type RulePredicateArrayOutput struct{ *pulumi.OutputState }

func (RulePredicateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulePredicate)(nil)).Elem()
}

func (o RulePredicateArrayOutput) ToRulePredicateArrayOutput() RulePredicateArrayOutput {
	return o
}

func (o RulePredicateArrayOutput) ToRulePredicateArrayOutputWithContext(ctx context.Context) RulePredicateArrayOutput {
	return o
}

func (o RulePredicateArrayOutput) Index(i pulumi.IntInput) RulePredicateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RulePredicate {
		return vs[0].([]RulePredicate)[vs[1].(int)]
	}).(RulePredicateOutput)
}

type SizeConstraintSetFieldToMatch struct {
	Data *string `pulumi:"data"`
	Type string  `pulumi:"type"`
}

// SizeConstraintSetFieldToMatchInput is an input type that accepts SizeConstraintSetFieldToMatchArgs and SizeConstraintSetFieldToMatchOutput values.
// You can construct a concrete instance of `SizeConstraintSetFieldToMatchInput` via:
//
//          SizeConstraintSetFieldToMatchArgs{...}
type SizeConstraintSetFieldToMatchInput interface {
	pulumi.Input

	ToSizeConstraintSetFieldToMatchOutput() SizeConstraintSetFieldToMatchOutput
	ToSizeConstraintSetFieldToMatchOutputWithContext(context.Context) SizeConstraintSetFieldToMatchOutput
}

type SizeConstraintSetFieldToMatchArgs struct {
	Data pulumi.StringPtrInput `pulumi:"data"`
	Type pulumi.StringInput    `pulumi:"type"`
}

func (SizeConstraintSetFieldToMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SizeConstraintSetFieldToMatch)(nil)).Elem()
}

func (i SizeConstraintSetFieldToMatchArgs) ToSizeConstraintSetFieldToMatchOutput() SizeConstraintSetFieldToMatchOutput {
	return i.ToSizeConstraintSetFieldToMatchOutputWithContext(context.Background())
}

func (i SizeConstraintSetFieldToMatchArgs) ToSizeConstraintSetFieldToMatchOutputWithContext(ctx context.Context) SizeConstraintSetFieldToMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SizeConstraintSetFieldToMatchOutput)
}

type SizeConstraintSetFieldToMatchOutput struct{ *pulumi.OutputState }

func (SizeConstraintSetFieldToMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SizeConstraintSetFieldToMatch)(nil)).Elem()
}

func (o SizeConstraintSetFieldToMatchOutput) ToSizeConstraintSetFieldToMatchOutput() SizeConstraintSetFieldToMatchOutput {
	return o
}

func (o SizeConstraintSetFieldToMatchOutput) ToSizeConstraintSetFieldToMatchOutputWithContext(ctx context.Context) SizeConstraintSetFieldToMatchOutput {
	return o
}

func (o SizeConstraintSetFieldToMatchOutput) Data() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SizeConstraintSetFieldToMatch) *string { return v.Data }).(pulumi.StringPtrOutput)
}

func (o SizeConstraintSetFieldToMatchOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SizeConstraintSetFieldToMatch) string { return v.Type }).(pulumi.StringOutput)
}

type SizeConstraintSetSizeConstraint struct {
	ComparisonOperator string                        `pulumi:"comparisonOperator"`
	FieldToMatch       SizeConstraintSetFieldToMatch `pulumi:"fieldToMatch"`
	Size               int                           `pulumi:"size"`
	TextTransformation string                        `pulumi:"textTransformation"`
}

// SizeConstraintSetSizeConstraintInput is an input type that accepts SizeConstraintSetSizeConstraintArgs and SizeConstraintSetSizeConstraintOutput values.
// You can construct a concrete instance of `SizeConstraintSetSizeConstraintInput` via:
//
//          SizeConstraintSetSizeConstraintArgs{...}
type SizeConstraintSetSizeConstraintInput interface {
	pulumi.Input

	ToSizeConstraintSetSizeConstraintOutput() SizeConstraintSetSizeConstraintOutput
	ToSizeConstraintSetSizeConstraintOutputWithContext(context.Context) SizeConstraintSetSizeConstraintOutput
}

type SizeConstraintSetSizeConstraintArgs struct {
	ComparisonOperator pulumi.StringInput                 `pulumi:"comparisonOperator"`
	FieldToMatch       SizeConstraintSetFieldToMatchInput `pulumi:"fieldToMatch"`
	Size               pulumi.IntInput                    `pulumi:"size"`
	TextTransformation pulumi.StringInput                 `pulumi:"textTransformation"`
}

func (SizeConstraintSetSizeConstraintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SizeConstraintSetSizeConstraint)(nil)).Elem()
}

func (i SizeConstraintSetSizeConstraintArgs) ToSizeConstraintSetSizeConstraintOutput() SizeConstraintSetSizeConstraintOutput {
	return i.ToSizeConstraintSetSizeConstraintOutputWithContext(context.Background())
}

func (i SizeConstraintSetSizeConstraintArgs) ToSizeConstraintSetSizeConstraintOutputWithContext(ctx context.Context) SizeConstraintSetSizeConstraintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SizeConstraintSetSizeConstraintOutput)
}

// SizeConstraintSetSizeConstraintArrayInput is an input type that accepts SizeConstraintSetSizeConstraintArray and SizeConstraintSetSizeConstraintArrayOutput values.
// You can construct a concrete instance of `SizeConstraintSetSizeConstraintArrayInput` via:
//
//          SizeConstraintSetSizeConstraintArray{ SizeConstraintSetSizeConstraintArgs{...} }
type SizeConstraintSetSizeConstraintArrayInput interface {
	pulumi.Input

	ToSizeConstraintSetSizeConstraintArrayOutput() SizeConstraintSetSizeConstraintArrayOutput
	ToSizeConstraintSetSizeConstraintArrayOutputWithContext(context.Context) SizeConstraintSetSizeConstraintArrayOutput
}

type SizeConstraintSetSizeConstraintArray []SizeConstraintSetSizeConstraintInput

func (SizeConstraintSetSizeConstraintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SizeConstraintSetSizeConstraint)(nil)).Elem()
}

func (i SizeConstraintSetSizeConstraintArray) ToSizeConstraintSetSizeConstraintArrayOutput() SizeConstraintSetSizeConstraintArrayOutput {
	return i.ToSizeConstraintSetSizeConstraintArrayOutputWithContext(context.Background())
}

func (i SizeConstraintSetSizeConstraintArray) ToSizeConstraintSetSizeConstraintArrayOutputWithContext(ctx context.Context) SizeConstraintSetSizeConstraintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SizeConstraintSetSizeConstraintArrayOutput)
}

type SizeConstraintSetSizeConstraintOutput struct{ *pulumi.OutputState }

func (SizeConstraintSetSizeConstraintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SizeConstraintSetSizeConstraint)(nil)).Elem()
}

func (o SizeConstraintSetSizeConstraintOutput) ToSizeConstraintSetSizeConstraintOutput() SizeConstraintSetSizeConstraintOutput {
	return o
}

func (o SizeConstraintSetSizeConstraintOutput) ToSizeConstraintSetSizeConstraintOutputWithContext(ctx context.Context) SizeConstraintSetSizeConstraintOutput {
	return o
}

func (o SizeConstraintSetSizeConstraintOutput) ComparisonOperator() pulumi.StringOutput {
	return o.ApplyT(func(v SizeConstraintSetSizeConstraint) string { return v.ComparisonOperator }).(pulumi.StringOutput)
}

func (o SizeConstraintSetSizeConstraintOutput) FieldToMatch() SizeConstraintSetFieldToMatchOutput {
	return o.ApplyT(func(v SizeConstraintSetSizeConstraint) SizeConstraintSetFieldToMatch { return v.FieldToMatch }).(SizeConstraintSetFieldToMatchOutput)
}

func (o SizeConstraintSetSizeConstraintOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v SizeConstraintSetSizeConstraint) int { return v.Size }).(pulumi.IntOutput)
}

func (o SizeConstraintSetSizeConstraintOutput) TextTransformation() pulumi.StringOutput {
	return o.ApplyT(func(v SizeConstraintSetSizeConstraint) string { return v.TextTransformation }).(pulumi.StringOutput)
}

type SizeConstraintSetSizeConstraintArrayOutput struct{ *pulumi.OutputState }

func (SizeConstraintSetSizeConstraintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SizeConstraintSetSizeConstraint)(nil)).Elem()
}

func (o SizeConstraintSetSizeConstraintArrayOutput) ToSizeConstraintSetSizeConstraintArrayOutput() SizeConstraintSetSizeConstraintArrayOutput {
	return o
}

func (o SizeConstraintSetSizeConstraintArrayOutput) ToSizeConstraintSetSizeConstraintArrayOutputWithContext(ctx context.Context) SizeConstraintSetSizeConstraintArrayOutput {
	return o
}

func (o SizeConstraintSetSizeConstraintArrayOutput) Index(i pulumi.IntInput) SizeConstraintSetSizeConstraintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SizeConstraintSetSizeConstraint {
		return vs[0].([]SizeConstraintSetSizeConstraint)[vs[1].(int)]
	}).(SizeConstraintSetSizeConstraintOutput)
}

type SqlInjectionMatchSetFieldToMatch struct {
	Data *string `pulumi:"data"`
	Type string  `pulumi:"type"`
}

// SqlInjectionMatchSetFieldToMatchInput is an input type that accepts SqlInjectionMatchSetFieldToMatchArgs and SqlInjectionMatchSetFieldToMatchOutput values.
// You can construct a concrete instance of `SqlInjectionMatchSetFieldToMatchInput` via:
//
//          SqlInjectionMatchSetFieldToMatchArgs{...}
type SqlInjectionMatchSetFieldToMatchInput interface {
	pulumi.Input

	ToSqlInjectionMatchSetFieldToMatchOutput() SqlInjectionMatchSetFieldToMatchOutput
	ToSqlInjectionMatchSetFieldToMatchOutputWithContext(context.Context) SqlInjectionMatchSetFieldToMatchOutput
}

type SqlInjectionMatchSetFieldToMatchArgs struct {
	Data pulumi.StringPtrInput `pulumi:"data"`
	Type pulumi.StringInput    `pulumi:"type"`
}

func (SqlInjectionMatchSetFieldToMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlInjectionMatchSetFieldToMatch)(nil)).Elem()
}

func (i SqlInjectionMatchSetFieldToMatchArgs) ToSqlInjectionMatchSetFieldToMatchOutput() SqlInjectionMatchSetFieldToMatchOutput {
	return i.ToSqlInjectionMatchSetFieldToMatchOutputWithContext(context.Background())
}

func (i SqlInjectionMatchSetFieldToMatchArgs) ToSqlInjectionMatchSetFieldToMatchOutputWithContext(ctx context.Context) SqlInjectionMatchSetFieldToMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlInjectionMatchSetFieldToMatchOutput)
}

type SqlInjectionMatchSetFieldToMatchOutput struct{ *pulumi.OutputState }

func (SqlInjectionMatchSetFieldToMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlInjectionMatchSetFieldToMatch)(nil)).Elem()
}

func (o SqlInjectionMatchSetFieldToMatchOutput) ToSqlInjectionMatchSetFieldToMatchOutput() SqlInjectionMatchSetFieldToMatchOutput {
	return o
}

func (o SqlInjectionMatchSetFieldToMatchOutput) ToSqlInjectionMatchSetFieldToMatchOutputWithContext(ctx context.Context) SqlInjectionMatchSetFieldToMatchOutput {
	return o
}

func (o SqlInjectionMatchSetFieldToMatchOutput) Data() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlInjectionMatchSetFieldToMatch) *string { return v.Data }).(pulumi.StringPtrOutput)
}

func (o SqlInjectionMatchSetFieldToMatchOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SqlInjectionMatchSetFieldToMatch) string { return v.Type }).(pulumi.StringOutput)
}

type SqlInjectionMatchSetSqlInjectionMatchTuple struct {
	FieldToMatch       SqlInjectionMatchSetFieldToMatch `pulumi:"fieldToMatch"`
	TextTransformation string                           `pulumi:"textTransformation"`
}

// SqlInjectionMatchSetSqlInjectionMatchTupleInput is an input type that accepts SqlInjectionMatchSetSqlInjectionMatchTupleArgs and SqlInjectionMatchSetSqlInjectionMatchTupleOutput values.
// You can construct a concrete instance of `SqlInjectionMatchSetSqlInjectionMatchTupleInput` via:
//
//          SqlInjectionMatchSetSqlInjectionMatchTupleArgs{...}
type SqlInjectionMatchSetSqlInjectionMatchTupleInput interface {
	pulumi.Input

	ToSqlInjectionMatchSetSqlInjectionMatchTupleOutput() SqlInjectionMatchSetSqlInjectionMatchTupleOutput
	ToSqlInjectionMatchSetSqlInjectionMatchTupleOutputWithContext(context.Context) SqlInjectionMatchSetSqlInjectionMatchTupleOutput
}

type SqlInjectionMatchSetSqlInjectionMatchTupleArgs struct {
	FieldToMatch       SqlInjectionMatchSetFieldToMatchInput `pulumi:"fieldToMatch"`
	TextTransformation pulumi.StringInput                    `pulumi:"textTransformation"`
}

func (SqlInjectionMatchSetSqlInjectionMatchTupleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlInjectionMatchSetSqlInjectionMatchTuple)(nil)).Elem()
}

func (i SqlInjectionMatchSetSqlInjectionMatchTupleArgs) ToSqlInjectionMatchSetSqlInjectionMatchTupleOutput() SqlInjectionMatchSetSqlInjectionMatchTupleOutput {
	return i.ToSqlInjectionMatchSetSqlInjectionMatchTupleOutputWithContext(context.Background())
}

func (i SqlInjectionMatchSetSqlInjectionMatchTupleArgs) ToSqlInjectionMatchSetSqlInjectionMatchTupleOutputWithContext(ctx context.Context) SqlInjectionMatchSetSqlInjectionMatchTupleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlInjectionMatchSetSqlInjectionMatchTupleOutput)
}

// SqlInjectionMatchSetSqlInjectionMatchTupleArrayInput is an input type that accepts SqlInjectionMatchSetSqlInjectionMatchTupleArray and SqlInjectionMatchSetSqlInjectionMatchTupleArrayOutput values.
// You can construct a concrete instance of `SqlInjectionMatchSetSqlInjectionMatchTupleArrayInput` via:
//
//          SqlInjectionMatchSetSqlInjectionMatchTupleArray{ SqlInjectionMatchSetSqlInjectionMatchTupleArgs{...} }
type SqlInjectionMatchSetSqlInjectionMatchTupleArrayInput interface {
	pulumi.Input

	ToSqlInjectionMatchSetSqlInjectionMatchTupleArrayOutput() SqlInjectionMatchSetSqlInjectionMatchTupleArrayOutput
	ToSqlInjectionMatchSetSqlInjectionMatchTupleArrayOutputWithContext(context.Context) SqlInjectionMatchSetSqlInjectionMatchTupleArrayOutput
}

type SqlInjectionMatchSetSqlInjectionMatchTupleArray []SqlInjectionMatchSetSqlInjectionMatchTupleInput

func (SqlInjectionMatchSetSqlInjectionMatchTupleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SqlInjectionMatchSetSqlInjectionMatchTuple)(nil)).Elem()
}

func (i SqlInjectionMatchSetSqlInjectionMatchTupleArray) ToSqlInjectionMatchSetSqlInjectionMatchTupleArrayOutput() SqlInjectionMatchSetSqlInjectionMatchTupleArrayOutput {
	return i.ToSqlInjectionMatchSetSqlInjectionMatchTupleArrayOutputWithContext(context.Background())
}

func (i SqlInjectionMatchSetSqlInjectionMatchTupleArray) ToSqlInjectionMatchSetSqlInjectionMatchTupleArrayOutputWithContext(ctx context.Context) SqlInjectionMatchSetSqlInjectionMatchTupleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlInjectionMatchSetSqlInjectionMatchTupleArrayOutput)
}

type SqlInjectionMatchSetSqlInjectionMatchTupleOutput struct{ *pulumi.OutputState }

func (SqlInjectionMatchSetSqlInjectionMatchTupleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlInjectionMatchSetSqlInjectionMatchTuple)(nil)).Elem()
}

func (o SqlInjectionMatchSetSqlInjectionMatchTupleOutput) ToSqlInjectionMatchSetSqlInjectionMatchTupleOutput() SqlInjectionMatchSetSqlInjectionMatchTupleOutput {
	return o
}

func (o SqlInjectionMatchSetSqlInjectionMatchTupleOutput) ToSqlInjectionMatchSetSqlInjectionMatchTupleOutputWithContext(ctx context.Context) SqlInjectionMatchSetSqlInjectionMatchTupleOutput {
	return o
}

func (o SqlInjectionMatchSetSqlInjectionMatchTupleOutput) FieldToMatch() SqlInjectionMatchSetFieldToMatchOutput {
	return o.ApplyT(func(v SqlInjectionMatchSetSqlInjectionMatchTuple) SqlInjectionMatchSetFieldToMatch {
		return v.FieldToMatch
	}).(SqlInjectionMatchSetFieldToMatchOutput)
}

func (o SqlInjectionMatchSetSqlInjectionMatchTupleOutput) TextTransformation() pulumi.StringOutput {
	return o.ApplyT(func(v SqlInjectionMatchSetSqlInjectionMatchTuple) string { return v.TextTransformation }).(pulumi.StringOutput)
}

type SqlInjectionMatchSetSqlInjectionMatchTupleArrayOutput struct{ *pulumi.OutputState }

func (SqlInjectionMatchSetSqlInjectionMatchTupleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SqlInjectionMatchSetSqlInjectionMatchTuple)(nil)).Elem()
}

func (o SqlInjectionMatchSetSqlInjectionMatchTupleArrayOutput) ToSqlInjectionMatchSetSqlInjectionMatchTupleArrayOutput() SqlInjectionMatchSetSqlInjectionMatchTupleArrayOutput {
	return o
}

func (o SqlInjectionMatchSetSqlInjectionMatchTupleArrayOutput) ToSqlInjectionMatchSetSqlInjectionMatchTupleArrayOutputWithContext(ctx context.Context) SqlInjectionMatchSetSqlInjectionMatchTupleArrayOutput {
	return o
}

func (o SqlInjectionMatchSetSqlInjectionMatchTupleArrayOutput) Index(i pulumi.IntInput) SqlInjectionMatchSetSqlInjectionMatchTupleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SqlInjectionMatchSetSqlInjectionMatchTuple {
		return vs[0].([]SqlInjectionMatchSetSqlInjectionMatchTuple)[vs[1].(int)]
	}).(SqlInjectionMatchSetSqlInjectionMatchTupleOutput)
}

type WebACLActivatedRule struct {
	Action   *WebACLWafAction `pulumi:"action"`
	Priority int              `pulumi:"priority"`
	RuleId   string           `pulumi:"ruleId"`
}

// WebACLActivatedRuleInput is an input type that accepts WebACLActivatedRuleArgs and WebACLActivatedRuleOutput values.
// You can construct a concrete instance of `WebACLActivatedRuleInput` via:
//
//          WebACLActivatedRuleArgs{...}
type WebACLActivatedRuleInput interface {
	pulumi.Input

	ToWebACLActivatedRuleOutput() WebACLActivatedRuleOutput
	ToWebACLActivatedRuleOutputWithContext(context.Context) WebACLActivatedRuleOutput
}

type WebACLActivatedRuleArgs struct {
	Action   WebACLWafActionPtrInput `pulumi:"action"`
	Priority pulumi.IntInput         `pulumi:"priority"`
	RuleId   pulumi.StringInput      `pulumi:"ruleId"`
}

func (WebACLActivatedRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebACLActivatedRule)(nil)).Elem()
}

func (i WebACLActivatedRuleArgs) ToWebACLActivatedRuleOutput() WebACLActivatedRuleOutput {
	return i.ToWebACLActivatedRuleOutputWithContext(context.Background())
}

func (i WebACLActivatedRuleArgs) ToWebACLActivatedRuleOutputWithContext(ctx context.Context) WebACLActivatedRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebACLActivatedRuleOutput)
}

// WebACLActivatedRuleArrayInput is an input type that accepts WebACLActivatedRuleArray and WebACLActivatedRuleArrayOutput values.
// You can construct a concrete instance of `WebACLActivatedRuleArrayInput` via:
//
//          WebACLActivatedRuleArray{ WebACLActivatedRuleArgs{...} }
type WebACLActivatedRuleArrayInput interface {
	pulumi.Input

	ToWebACLActivatedRuleArrayOutput() WebACLActivatedRuleArrayOutput
	ToWebACLActivatedRuleArrayOutputWithContext(context.Context) WebACLActivatedRuleArrayOutput
}

type WebACLActivatedRuleArray []WebACLActivatedRuleInput

func (WebACLActivatedRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebACLActivatedRule)(nil)).Elem()
}

func (i WebACLActivatedRuleArray) ToWebACLActivatedRuleArrayOutput() WebACLActivatedRuleArrayOutput {
	return i.ToWebACLActivatedRuleArrayOutputWithContext(context.Background())
}

func (i WebACLActivatedRuleArray) ToWebACLActivatedRuleArrayOutputWithContext(ctx context.Context) WebACLActivatedRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebACLActivatedRuleArrayOutput)
}

type WebACLActivatedRuleOutput struct{ *pulumi.OutputState }

func (WebACLActivatedRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebACLActivatedRule)(nil)).Elem()
}

func (o WebACLActivatedRuleOutput) ToWebACLActivatedRuleOutput() WebACLActivatedRuleOutput {
	return o
}

func (o WebACLActivatedRuleOutput) ToWebACLActivatedRuleOutputWithContext(ctx context.Context) WebACLActivatedRuleOutput {
	return o
}

func (o WebACLActivatedRuleOutput) Action() WebACLWafActionPtrOutput {
	return o.ApplyT(func(v WebACLActivatedRule) *WebACLWafAction { return v.Action }).(WebACLWafActionPtrOutput)
}

func (o WebACLActivatedRuleOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v WebACLActivatedRule) int { return v.Priority }).(pulumi.IntOutput)
}

func (o WebACLActivatedRuleOutput) RuleId() pulumi.StringOutput {
	return o.ApplyT(func(v WebACLActivatedRule) string { return v.RuleId }).(pulumi.StringOutput)
}

type WebACLActivatedRuleArrayOutput struct{ *pulumi.OutputState }

func (WebACLActivatedRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebACLActivatedRule)(nil)).Elem()
}

func (o WebACLActivatedRuleArrayOutput) ToWebACLActivatedRuleArrayOutput() WebACLActivatedRuleArrayOutput {
	return o
}

func (o WebACLActivatedRuleArrayOutput) ToWebACLActivatedRuleArrayOutputWithContext(ctx context.Context) WebACLActivatedRuleArrayOutput {
	return o
}

func (o WebACLActivatedRuleArrayOutput) Index(i pulumi.IntInput) WebACLActivatedRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WebACLActivatedRule {
		return vs[0].([]WebACLActivatedRule)[vs[1].(int)]
	}).(WebACLActivatedRuleOutput)
}

type WebACLWafAction struct {
	Type string `pulumi:"type"`
}

// WebACLWafActionInput is an input type that accepts WebACLWafActionArgs and WebACLWafActionOutput values.
// You can construct a concrete instance of `WebACLWafActionInput` via:
//
//          WebACLWafActionArgs{...}
type WebACLWafActionInput interface {
	pulumi.Input

	ToWebACLWafActionOutput() WebACLWafActionOutput
	ToWebACLWafActionOutputWithContext(context.Context) WebACLWafActionOutput
}

type WebACLWafActionArgs struct {
	Type pulumi.StringInput `pulumi:"type"`
}

func (WebACLWafActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebACLWafAction)(nil)).Elem()
}

func (i WebACLWafActionArgs) ToWebACLWafActionOutput() WebACLWafActionOutput {
	return i.ToWebACLWafActionOutputWithContext(context.Background())
}

func (i WebACLWafActionArgs) ToWebACLWafActionOutputWithContext(ctx context.Context) WebACLWafActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebACLWafActionOutput)
}

func (i WebACLWafActionArgs) ToWebACLWafActionPtrOutput() WebACLWafActionPtrOutput {
	return i.ToWebACLWafActionPtrOutputWithContext(context.Background())
}

func (i WebACLWafActionArgs) ToWebACLWafActionPtrOutputWithContext(ctx context.Context) WebACLWafActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebACLWafActionOutput).ToWebACLWafActionPtrOutputWithContext(ctx)
}

// WebACLWafActionPtrInput is an input type that accepts WebACLWafActionArgs, WebACLWafActionPtr and WebACLWafActionPtrOutput values.
// You can construct a concrete instance of `WebACLWafActionPtrInput` via:
//
//          WebACLWafActionArgs{...}
//
//  or:
//
//          nil
type WebACLWafActionPtrInput interface {
	pulumi.Input

	ToWebACLWafActionPtrOutput() WebACLWafActionPtrOutput
	ToWebACLWafActionPtrOutputWithContext(context.Context) WebACLWafActionPtrOutput
}

type webACLWafActionPtrType WebACLWafActionArgs

func WebACLWafActionPtr(v *WebACLWafActionArgs) WebACLWafActionPtrInput {
	return (*webACLWafActionPtrType)(v)
}

func (*webACLWafActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebACLWafAction)(nil)).Elem()
}

func (i *webACLWafActionPtrType) ToWebACLWafActionPtrOutput() WebACLWafActionPtrOutput {
	return i.ToWebACLWafActionPtrOutputWithContext(context.Background())
}

func (i *webACLWafActionPtrType) ToWebACLWafActionPtrOutputWithContext(ctx context.Context) WebACLWafActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebACLWafActionPtrOutput)
}

type WebACLWafActionOutput struct{ *pulumi.OutputState }

func (WebACLWafActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebACLWafAction)(nil)).Elem()
}

func (o WebACLWafActionOutput) ToWebACLWafActionOutput() WebACLWafActionOutput {
	return o
}

func (o WebACLWafActionOutput) ToWebACLWafActionOutputWithContext(ctx context.Context) WebACLWafActionOutput {
	return o
}

func (o WebACLWafActionOutput) ToWebACLWafActionPtrOutput() WebACLWafActionPtrOutput {
	return o.ToWebACLWafActionPtrOutputWithContext(context.Background())
}

func (o WebACLWafActionOutput) ToWebACLWafActionPtrOutputWithContext(ctx context.Context) WebACLWafActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WebACLWafAction) *WebACLWafAction {
		return &v
	}).(WebACLWafActionPtrOutput)
}

func (o WebACLWafActionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v WebACLWafAction) string { return v.Type }).(pulumi.StringOutput)
}

type WebACLWafActionPtrOutput struct{ *pulumi.OutputState }

func (WebACLWafActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebACLWafAction)(nil)).Elem()
}

func (o WebACLWafActionPtrOutput) ToWebACLWafActionPtrOutput() WebACLWafActionPtrOutput {
	return o
}

func (o WebACLWafActionPtrOutput) ToWebACLWafActionPtrOutputWithContext(ctx context.Context) WebACLWafActionPtrOutput {
	return o
}

func (o WebACLWafActionPtrOutput) Elem() WebACLWafActionOutput {
	return o.ApplyT(func(v *WebACLWafAction) WebACLWafAction {
		if v != nil {
			return *v
		}
		var ret WebACLWafAction
		return ret
	}).(WebACLWafActionOutput)
}

func (o WebACLWafActionPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebACLWafAction) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type XssMatchSetFieldToMatch struct {
	Data *string `pulumi:"data"`
	Type string  `pulumi:"type"`
}

// XssMatchSetFieldToMatchInput is an input type that accepts XssMatchSetFieldToMatchArgs and XssMatchSetFieldToMatchOutput values.
// You can construct a concrete instance of `XssMatchSetFieldToMatchInput` via:
//
//          XssMatchSetFieldToMatchArgs{...}
type XssMatchSetFieldToMatchInput interface {
	pulumi.Input

	ToXssMatchSetFieldToMatchOutput() XssMatchSetFieldToMatchOutput
	ToXssMatchSetFieldToMatchOutputWithContext(context.Context) XssMatchSetFieldToMatchOutput
}

type XssMatchSetFieldToMatchArgs struct {
	Data pulumi.StringPtrInput `pulumi:"data"`
	Type pulumi.StringInput    `pulumi:"type"`
}

func (XssMatchSetFieldToMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*XssMatchSetFieldToMatch)(nil)).Elem()
}

func (i XssMatchSetFieldToMatchArgs) ToXssMatchSetFieldToMatchOutput() XssMatchSetFieldToMatchOutput {
	return i.ToXssMatchSetFieldToMatchOutputWithContext(context.Background())
}

func (i XssMatchSetFieldToMatchArgs) ToXssMatchSetFieldToMatchOutputWithContext(ctx context.Context) XssMatchSetFieldToMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(XssMatchSetFieldToMatchOutput)
}

type XssMatchSetFieldToMatchOutput struct{ *pulumi.OutputState }

func (XssMatchSetFieldToMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*XssMatchSetFieldToMatch)(nil)).Elem()
}

func (o XssMatchSetFieldToMatchOutput) ToXssMatchSetFieldToMatchOutput() XssMatchSetFieldToMatchOutput {
	return o
}

func (o XssMatchSetFieldToMatchOutput) ToXssMatchSetFieldToMatchOutputWithContext(ctx context.Context) XssMatchSetFieldToMatchOutput {
	return o
}

func (o XssMatchSetFieldToMatchOutput) Data() pulumi.StringPtrOutput {
	return o.ApplyT(func(v XssMatchSetFieldToMatch) *string { return v.Data }).(pulumi.StringPtrOutput)
}

func (o XssMatchSetFieldToMatchOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v XssMatchSetFieldToMatch) string { return v.Type }).(pulumi.StringOutput)
}

type XssMatchSetXssMatchTuple struct {
	FieldToMatch       XssMatchSetFieldToMatch `pulumi:"fieldToMatch"`
	TextTransformation string                  `pulumi:"textTransformation"`
}

// XssMatchSetXssMatchTupleInput is an input type that accepts XssMatchSetXssMatchTupleArgs and XssMatchSetXssMatchTupleOutput values.
// You can construct a concrete instance of `XssMatchSetXssMatchTupleInput` via:
//
//          XssMatchSetXssMatchTupleArgs{...}
type XssMatchSetXssMatchTupleInput interface {
	pulumi.Input

	ToXssMatchSetXssMatchTupleOutput() XssMatchSetXssMatchTupleOutput
	ToXssMatchSetXssMatchTupleOutputWithContext(context.Context) XssMatchSetXssMatchTupleOutput
}

type XssMatchSetXssMatchTupleArgs struct {
	FieldToMatch       XssMatchSetFieldToMatchInput `pulumi:"fieldToMatch"`
	TextTransformation pulumi.StringInput           `pulumi:"textTransformation"`
}

func (XssMatchSetXssMatchTupleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*XssMatchSetXssMatchTuple)(nil)).Elem()
}

func (i XssMatchSetXssMatchTupleArgs) ToXssMatchSetXssMatchTupleOutput() XssMatchSetXssMatchTupleOutput {
	return i.ToXssMatchSetXssMatchTupleOutputWithContext(context.Background())
}

func (i XssMatchSetXssMatchTupleArgs) ToXssMatchSetXssMatchTupleOutputWithContext(ctx context.Context) XssMatchSetXssMatchTupleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(XssMatchSetXssMatchTupleOutput)
}

// XssMatchSetXssMatchTupleArrayInput is an input type that accepts XssMatchSetXssMatchTupleArray and XssMatchSetXssMatchTupleArrayOutput values.
// You can construct a concrete instance of `XssMatchSetXssMatchTupleArrayInput` via:
//
//          XssMatchSetXssMatchTupleArray{ XssMatchSetXssMatchTupleArgs{...} }
type XssMatchSetXssMatchTupleArrayInput interface {
	pulumi.Input

	ToXssMatchSetXssMatchTupleArrayOutput() XssMatchSetXssMatchTupleArrayOutput
	ToXssMatchSetXssMatchTupleArrayOutputWithContext(context.Context) XssMatchSetXssMatchTupleArrayOutput
}

type XssMatchSetXssMatchTupleArray []XssMatchSetXssMatchTupleInput

func (XssMatchSetXssMatchTupleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]XssMatchSetXssMatchTuple)(nil)).Elem()
}

func (i XssMatchSetXssMatchTupleArray) ToXssMatchSetXssMatchTupleArrayOutput() XssMatchSetXssMatchTupleArrayOutput {
	return i.ToXssMatchSetXssMatchTupleArrayOutputWithContext(context.Background())
}

func (i XssMatchSetXssMatchTupleArray) ToXssMatchSetXssMatchTupleArrayOutputWithContext(ctx context.Context) XssMatchSetXssMatchTupleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(XssMatchSetXssMatchTupleArrayOutput)
}

type XssMatchSetXssMatchTupleOutput struct{ *pulumi.OutputState }

func (XssMatchSetXssMatchTupleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*XssMatchSetXssMatchTuple)(nil)).Elem()
}

func (o XssMatchSetXssMatchTupleOutput) ToXssMatchSetXssMatchTupleOutput() XssMatchSetXssMatchTupleOutput {
	return o
}

func (o XssMatchSetXssMatchTupleOutput) ToXssMatchSetXssMatchTupleOutputWithContext(ctx context.Context) XssMatchSetXssMatchTupleOutput {
	return o
}

func (o XssMatchSetXssMatchTupleOutput) FieldToMatch() XssMatchSetFieldToMatchOutput {
	return o.ApplyT(func(v XssMatchSetXssMatchTuple) XssMatchSetFieldToMatch { return v.FieldToMatch }).(XssMatchSetFieldToMatchOutput)
}

func (o XssMatchSetXssMatchTupleOutput) TextTransformation() pulumi.StringOutput {
	return o.ApplyT(func(v XssMatchSetXssMatchTuple) string { return v.TextTransformation }).(pulumi.StringOutput)
}

type XssMatchSetXssMatchTupleArrayOutput struct{ *pulumi.OutputState }

func (XssMatchSetXssMatchTupleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]XssMatchSetXssMatchTuple)(nil)).Elem()
}

func (o XssMatchSetXssMatchTupleArrayOutput) ToXssMatchSetXssMatchTupleArrayOutput() XssMatchSetXssMatchTupleArrayOutput {
	return o
}

func (o XssMatchSetXssMatchTupleArrayOutput) ToXssMatchSetXssMatchTupleArrayOutputWithContext(ctx context.Context) XssMatchSetXssMatchTupleArrayOutput {
	return o
}

func (o XssMatchSetXssMatchTupleArrayOutput) Index(i pulumi.IntInput) XssMatchSetXssMatchTupleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) XssMatchSetXssMatchTuple {
		return vs[0].([]XssMatchSetXssMatchTuple)[vs[1].(int)]
	}).(XssMatchSetXssMatchTupleOutput)
}

func init() {
	pulumi.RegisterOutputType(ByteMatchSetByteMatchTupleOutput{})
	pulumi.RegisterOutputType(ByteMatchSetByteMatchTupleArrayOutput{})
	pulumi.RegisterOutputType(ByteMatchSetFieldToMatchOutput{})
	pulumi.RegisterOutputType(IPSetDescriptorOutput{})
	pulumi.RegisterOutputType(IPSetDescriptorArrayOutput{})
	pulumi.RegisterOutputType(RulePredicateOutput{})
	pulumi.RegisterOutputType(RulePredicateArrayOutput{})
	pulumi.RegisterOutputType(SizeConstraintSetFieldToMatchOutput{})
	pulumi.RegisterOutputType(SizeConstraintSetSizeConstraintOutput{})
	pulumi.RegisterOutputType(SizeConstraintSetSizeConstraintArrayOutput{})
	pulumi.RegisterOutputType(SqlInjectionMatchSetFieldToMatchOutput{})
	pulumi.RegisterOutputType(SqlInjectionMatchSetSqlInjectionMatchTupleOutput{})
	pulumi.RegisterOutputType(SqlInjectionMatchSetSqlInjectionMatchTupleArrayOutput{})
	pulumi.RegisterOutputType(WebACLActivatedRuleOutput{})
	pulumi.RegisterOutputType(WebACLActivatedRuleArrayOutput{})
	pulumi.RegisterOutputType(WebACLWafActionOutput{})
	pulumi.RegisterOutputType(WebACLWafActionPtrOutput{})
	pulumi.RegisterOutputType(XssMatchSetFieldToMatchOutput{})
	pulumi.RegisterOutputType(XssMatchSetXssMatchTupleOutput{})
	pulumi.RegisterOutputType(XssMatchSetXssMatchTupleArrayOutput{})
}
