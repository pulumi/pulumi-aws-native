// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package codeguruprofiler

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource schema represents the Profiling Group resource in the Amazon CodeGuru Profiler service.
type ProfilingGroup struct {
	pulumi.CustomResourceState

	// The agent permissions attached to this profiling group.
	AgentPermissions pulumi.AnyOutput `pulumi:"agentPermissions"`
	// Configuration for Notification Channels for Anomaly Detection feature in CodeGuru Profiler which enables customers to detect anomalies in the application profile for those methods that represent the highest proportion of CPU time or latency
	AnomalyDetectionNotificationConfiguration ProfilingGroupChannelArrayOutput `pulumi:"anomalyDetectionNotificationConfiguration"`
	// The Amazon Resource Name (ARN) of the specified profiling group.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The compute platform of the profiling group.
	ComputePlatform ProfilingGroupComputePlatformPtrOutput `pulumi:"computePlatform"`
	// The name of the profiling group.
	ProfilingGroupName pulumi.StringOutput `pulumi:"profilingGroupName"`
	// The tags associated with a profiling group.
	Tags ProfilingGroupTagArrayOutput `pulumi:"tags"`
}

// NewProfilingGroup registers a new resource with the given unique name, arguments, and options.
func NewProfilingGroup(ctx *pulumi.Context,
	name string, args *ProfilingGroupArgs, opts ...pulumi.ResourceOption) (*ProfilingGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProfilingGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ProfilingGroupName'")
	}
	var resource ProfilingGroup
	err := ctx.RegisterResource("aws-native:codeguruprofiler:ProfilingGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProfilingGroup gets an existing ProfilingGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProfilingGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProfilingGroupState, opts ...pulumi.ResourceOption) (*ProfilingGroup, error) {
	var resource ProfilingGroup
	err := ctx.ReadResource("aws-native:codeguruprofiler:ProfilingGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProfilingGroup resources.
type profilingGroupState struct {
}

type ProfilingGroupState struct {
}

func (ProfilingGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*profilingGroupState)(nil)).Elem()
}

type profilingGroupArgs struct {
	// The agent permissions attached to this profiling group.
	AgentPermissions interface{} `pulumi:"agentPermissions"`
	// Configuration for Notification Channels for Anomaly Detection feature in CodeGuru Profiler which enables customers to detect anomalies in the application profile for those methods that represent the highest proportion of CPU time or latency
	AnomalyDetectionNotificationConfiguration []ProfilingGroupChannel `pulumi:"anomalyDetectionNotificationConfiguration"`
	// The compute platform of the profiling group.
	ComputePlatform *ProfilingGroupComputePlatform `pulumi:"computePlatform"`
	// The name of the profiling group.
	ProfilingGroupName string `pulumi:"profilingGroupName"`
	// The tags associated with a profiling group.
	Tags []ProfilingGroupTag `pulumi:"tags"`
}

// The set of arguments for constructing a ProfilingGroup resource.
type ProfilingGroupArgs struct {
	// The agent permissions attached to this profiling group.
	AgentPermissions pulumi.Input
	// Configuration for Notification Channels for Anomaly Detection feature in CodeGuru Profiler which enables customers to detect anomalies in the application profile for those methods that represent the highest proportion of CPU time or latency
	AnomalyDetectionNotificationConfiguration ProfilingGroupChannelArrayInput
	// The compute platform of the profiling group.
	ComputePlatform ProfilingGroupComputePlatformPtrInput
	// The name of the profiling group.
	ProfilingGroupName pulumi.StringInput
	// The tags associated with a profiling group.
	Tags ProfilingGroupTagArrayInput
}

func (ProfilingGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*profilingGroupArgs)(nil)).Elem()
}

type ProfilingGroupInput interface {
	pulumi.Input

	ToProfilingGroupOutput() ProfilingGroupOutput
	ToProfilingGroupOutputWithContext(ctx context.Context) ProfilingGroupOutput
}

func (*ProfilingGroup) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfilingGroup)(nil))
}

func (i *ProfilingGroup) ToProfilingGroupOutput() ProfilingGroupOutput {
	return i.ToProfilingGroupOutputWithContext(context.Background())
}

func (i *ProfilingGroup) ToProfilingGroupOutputWithContext(ctx context.Context) ProfilingGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfilingGroupOutput)
}

type ProfilingGroupOutput struct{ *pulumi.OutputState }

func (ProfilingGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfilingGroup)(nil))
}

func (o ProfilingGroupOutput) ToProfilingGroupOutput() ProfilingGroupOutput {
	return o
}

func (o ProfilingGroupOutput) ToProfilingGroupOutputWithContext(ctx context.Context) ProfilingGroupOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ProfilingGroupOutput{})
}
