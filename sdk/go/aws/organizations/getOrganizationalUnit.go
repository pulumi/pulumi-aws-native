// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package organizations

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// You can use organizational units (OUs) to group accounts together to administer as a single unit. This greatly simplifies the management of your accounts. For example, you can attach a policy-based control to an OU, and all accounts within the OU automatically inherit the policy. You can create multiple OUs within a single organization, and you can create OUs within other OUs. Each OU can contain multiple accounts, and you can move accounts from one OU to another. However, OU names must be unique within a parent OU or root.
func LookupOrganizationalUnit(ctx *pulumi.Context, args *LookupOrganizationalUnitArgs, opts ...pulumi.InvokeOption) (*LookupOrganizationalUnitResult, error) {
	var rv LookupOrganizationalUnitResult
	err := ctx.Invoke("aws-native:organizations:getOrganizationalUnit", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupOrganizationalUnitArgs struct {
	// The unique identifier (ID) associated with this OU.
	Id string `pulumi:"id"`
}

type LookupOrganizationalUnitResult struct {
	// The Amazon Resource Name (ARN) of this OU.
	Arn *string `pulumi:"arn"`
	// The unique identifier (ID) associated with this OU.
	Id *string `pulumi:"id"`
	// The friendly name of this OU.
	Name *string `pulumi:"name"`
	// A list of tags that you want to attach to the newly created OU.
	Tags []OrganizationalUnitTag `pulumi:"tags"`
}

func LookupOrganizationalUnitOutput(ctx *pulumi.Context, args LookupOrganizationalUnitOutputArgs, opts ...pulumi.InvokeOption) LookupOrganizationalUnitResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupOrganizationalUnitResult, error) {
			args := v.(LookupOrganizationalUnitArgs)
			r, err := LookupOrganizationalUnit(ctx, &args, opts...)
			var s LookupOrganizationalUnitResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupOrganizationalUnitResultOutput)
}

type LookupOrganizationalUnitOutputArgs struct {
	// The unique identifier (ID) associated with this OU.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupOrganizationalUnitOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupOrganizationalUnitArgs)(nil)).Elem()
}

type LookupOrganizationalUnitResultOutput struct{ *pulumi.OutputState }

func (LookupOrganizationalUnitResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupOrganizationalUnitResult)(nil)).Elem()
}

func (o LookupOrganizationalUnitResultOutput) ToLookupOrganizationalUnitResultOutput() LookupOrganizationalUnitResultOutput {
	return o
}

func (o LookupOrganizationalUnitResultOutput) ToLookupOrganizationalUnitResultOutputWithContext(ctx context.Context) LookupOrganizationalUnitResultOutput {
	return o
}

// The Amazon Resource Name (ARN) of this OU.
func (o LookupOrganizationalUnitResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupOrganizationalUnitResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// The unique identifier (ID) associated with this OU.
func (o LookupOrganizationalUnitResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupOrganizationalUnitResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The friendly name of this OU.
func (o LookupOrganizationalUnitResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupOrganizationalUnitResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// A list of tags that you want to attach to the newly created OU.
func (o LookupOrganizationalUnitResultOutput) Tags() OrganizationalUnitTagArrayOutput {
	return o.ApplyT(func(v LookupOrganizationalUnitResult) []OrganizationalUnitTag { return v.Tags }).(OrganizationalUnitTagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupOrganizationalUnitResultOutput{})
}
