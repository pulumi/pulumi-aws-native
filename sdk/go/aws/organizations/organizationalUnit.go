// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package organizations

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// You can use organizational units (OUs) to group accounts together to administer as a single unit. This greatly simplifies the management of your accounts. For example, you can attach a policy-based control to an OU, and all accounts within the OU automatically inherit the policy. You can create multiple OUs within a single organization, and you can create OUs within other OUs. Each OU can contain multiple accounts, and you can move accounts from one OU to another. However, OU names must be unique within a parent OU or root.
type OrganizationalUnit struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of this OU.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The friendly name of this OU.
	Name pulumi.StringOutput `pulumi:"name"`
	// The unique identifier (ID) of the parent root or OU that you want to create the new OU in.
	ParentId pulumi.StringOutput `pulumi:"parentId"`
	// A list of tags that you want to attach to the newly created OU.
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewOrganizationalUnit registers a new resource with the given unique name, arguments, and options.
func NewOrganizationalUnit(ctx *pulumi.Context,
	name string, args *OrganizationalUnitArgs, opts ...pulumi.ResourceOption) (*OrganizationalUnit, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ParentId == nil {
		return nil, errors.New("invalid value for required argument 'ParentId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"parentId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OrganizationalUnit
	err := ctx.RegisterResource("aws-native:organizations:OrganizationalUnit", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrganizationalUnit gets an existing OrganizationalUnit resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrganizationalUnit(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrganizationalUnitState, opts ...pulumi.ResourceOption) (*OrganizationalUnit, error) {
	var resource OrganizationalUnit
	err := ctx.ReadResource("aws-native:organizations:OrganizationalUnit", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrganizationalUnit resources.
type organizationalUnitState struct {
}

type OrganizationalUnitState struct {
}

func (OrganizationalUnitState) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationalUnitState)(nil)).Elem()
}

type organizationalUnitArgs struct {
	// The friendly name of this OU.
	Name *string `pulumi:"name"`
	// The unique identifier (ID) of the parent root or OU that you want to create the new OU in.
	ParentId string `pulumi:"parentId"`
	// A list of tags that you want to attach to the newly created OU.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a OrganizationalUnit resource.
type OrganizationalUnitArgs struct {
	// The friendly name of this OU.
	Name pulumi.StringPtrInput
	// The unique identifier (ID) of the parent root or OU that you want to create the new OU in.
	ParentId pulumi.StringInput
	// A list of tags that you want to attach to the newly created OU.
	Tags aws.TagArrayInput
}

func (OrganizationalUnitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationalUnitArgs)(nil)).Elem()
}

type OrganizationalUnitInput interface {
	pulumi.Input

	ToOrganizationalUnitOutput() OrganizationalUnitOutput
	ToOrganizationalUnitOutputWithContext(ctx context.Context) OrganizationalUnitOutput
}

func (*OrganizationalUnit) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationalUnit)(nil)).Elem()
}

func (i *OrganizationalUnit) ToOrganizationalUnitOutput() OrganizationalUnitOutput {
	return i.ToOrganizationalUnitOutputWithContext(context.Background())
}

func (i *OrganizationalUnit) ToOrganizationalUnitOutputWithContext(ctx context.Context) OrganizationalUnitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationalUnitOutput)
}

type OrganizationalUnitOutput struct{ *pulumi.OutputState }

func (OrganizationalUnitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationalUnit)(nil)).Elem()
}

func (o OrganizationalUnitOutput) ToOrganizationalUnitOutput() OrganizationalUnitOutput {
	return o
}

func (o OrganizationalUnitOutput) ToOrganizationalUnitOutputWithContext(ctx context.Context) OrganizationalUnitOutput {
	return o
}

// The Amazon Resource Name (ARN) of this OU.
func (o OrganizationalUnitOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *OrganizationalUnit) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The friendly name of this OU.
func (o OrganizationalUnitOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OrganizationalUnit) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The unique identifier (ID) of the parent root or OU that you want to create the new OU in.
func (o OrganizationalUnitOutput) ParentId() pulumi.StringOutput {
	return o.ApplyT(func(v *OrganizationalUnit) pulumi.StringOutput { return v.ParentId }).(pulumi.StringOutput)
}

// A list of tags that you want to attach to the newly created OU.
func (o OrganizationalUnitOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *OrganizationalUnit) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationalUnitInput)(nil)).Elem(), &OrganizationalUnit{})
	pulumi.RegisterOutputType(OrganizationalUnitOutput{})
}
