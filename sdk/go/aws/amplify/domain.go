// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package amplify

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The AWS::Amplify::Domain resource allows you to connect a custom domain to your app.
type Domain struct {
	pulumi.CustomResourceState

	// The unique ID for an Amplify app.
	AppId pulumi.StringOutput `pulumi:"appId"`
	// ARN for the Domain Association.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Sets the branch patterns for automatic subdomain creation.
	AutoSubDomainCreationPatterns pulumi.StringArrayOutput `pulumi:"autoSubDomainCreationPatterns"`
	// The required AWS Identity and Access Management (IAMlong) service role for the Amazon Resource Name (ARN) for automatically creating subdomains.
	AutoSubDomainIamRole pulumi.StringPtrOutput  `pulumi:"autoSubDomainIamRole"`
	Certificate          DomainCertificateOutput `pulumi:"certificate"`
	// DNS Record for certificate verification.
	CertificateRecord pulumi.StringOutput `pulumi:"certificateRecord"`
	// The type of SSL/TLS certificate to use for your custom domain. If you don't specify a certificate type, Amplify uses the default certificate that it provisions and manages for you.
	CertificateSettings DomainCertificateSettingsPtrOutput `pulumi:"certificateSettings"`
	// The domain name for the domain association.
	DomainName pulumi.StringOutput `pulumi:"domainName"`
	// Status for the Domain Association.
	DomainStatus pulumi.StringOutput `pulumi:"domainStatus"`
	// Enables the automated creation of subdomains for branches.
	EnableAutoSubDomain pulumi.BoolPtrOutput `pulumi:"enableAutoSubDomain"`
	// Reason for the current status of the domain.
	StatusReason pulumi.StringOutput `pulumi:"statusReason"`
	// The setting for the subdomain.
	SubDomainSettings DomainSubDomainSettingArrayOutput `pulumi:"subDomainSettings"`
	// The status of the domain update operation that is currently in progress. The following list describes the valid update states.
	//
	// - **REQUESTING_CERTIFICATE** - The certificate is in the process of being updated.
	// - **PENDING_VERIFICATION** - Indicates that an Amplify managed certificate is in the process of being verified. This occurs during the creation of a custom domain or when a custom domain is updated to use a managed certificate.
	// - **IMPORTING_CUSTOM_CERTIFICATE** - Indicates that an Amplify custom certificate is in the process of being imported. This occurs during the creation of a custom domain or when a custom domain is updated to use a custom certificate.
	// - **PENDING_DEPLOYMENT** - Indicates that the subdomain or certificate changes are being propagated.
	// - **AWAITING_APP_CNAME** - Amplify is waiting for CNAME records corresponding to subdomains to be propagated. If your custom domain is on RouteÂ 53, Amplify handles this for you automatically. For more information about custom domains, see [Setting up custom domains](https://docs.aws.amazon.com/amplify/latest/userguide/custom-domains.html) in the *Amplify Hosting User Guide* .
	// - **UPDATE_COMPLETE** - The certificate has been associated with a domain.
	// - **UPDATE_FAILED** - The certificate has failed to be provisioned or associated, and there is no existing active certificate to roll back to.
	UpdateStatus pulumi.StringOutput `pulumi:"updateStatus"`
}

// NewDomain registers a new resource with the given unique name, arguments, and options.
func NewDomain(ctx *pulumi.Context,
	name string, args *DomainArgs, opts ...pulumi.ResourceOption) (*Domain, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppId == nil {
		return nil, errors.New("invalid value for required argument 'AppId'")
	}
	if args.SubDomainSettings == nil {
		return nil, errors.New("invalid value for required argument 'SubDomainSettings'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"appId",
		"domainName",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Domain
	err := ctx.RegisterResource("aws-native:amplify:Domain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomain gets an existing Domain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainState, opts ...pulumi.ResourceOption) (*Domain, error) {
	var resource Domain
	err := ctx.ReadResource("aws-native:amplify:Domain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Domain resources.
type domainState struct {
}

type DomainState struct {
}

func (DomainState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainState)(nil)).Elem()
}

type domainArgs struct {
	// The unique ID for an Amplify app.
	AppId string `pulumi:"appId"`
	// Sets the branch patterns for automatic subdomain creation.
	AutoSubDomainCreationPatterns []string `pulumi:"autoSubDomainCreationPatterns"`
	// The required AWS Identity and Access Management (IAMlong) service role for the Amazon Resource Name (ARN) for automatically creating subdomains.
	AutoSubDomainIamRole *string `pulumi:"autoSubDomainIamRole"`
	// The type of SSL/TLS certificate to use for your custom domain. If you don't specify a certificate type, Amplify uses the default certificate that it provisions and manages for you.
	CertificateSettings *DomainCertificateSettings `pulumi:"certificateSettings"`
	// The domain name for the domain association.
	DomainName *string `pulumi:"domainName"`
	// Enables the automated creation of subdomains for branches.
	EnableAutoSubDomain *bool `pulumi:"enableAutoSubDomain"`
	// The setting for the subdomain.
	SubDomainSettings []DomainSubDomainSetting `pulumi:"subDomainSettings"`
}

// The set of arguments for constructing a Domain resource.
type DomainArgs struct {
	// The unique ID for an Amplify app.
	AppId pulumi.StringInput
	// Sets the branch patterns for automatic subdomain creation.
	AutoSubDomainCreationPatterns pulumi.StringArrayInput
	// The required AWS Identity and Access Management (IAMlong) service role for the Amazon Resource Name (ARN) for automatically creating subdomains.
	AutoSubDomainIamRole pulumi.StringPtrInput
	// The type of SSL/TLS certificate to use for your custom domain. If you don't specify a certificate type, Amplify uses the default certificate that it provisions and manages for you.
	CertificateSettings DomainCertificateSettingsPtrInput
	// The domain name for the domain association.
	DomainName pulumi.StringPtrInput
	// Enables the automated creation of subdomains for branches.
	EnableAutoSubDomain pulumi.BoolPtrInput
	// The setting for the subdomain.
	SubDomainSettings DomainSubDomainSettingArrayInput
}

func (DomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainArgs)(nil)).Elem()
}

type DomainInput interface {
	pulumi.Input

	ToDomainOutput() DomainOutput
	ToDomainOutputWithContext(ctx context.Context) DomainOutput
}

func (*Domain) ElementType() reflect.Type {
	return reflect.TypeOf((**Domain)(nil)).Elem()
}

func (i *Domain) ToDomainOutput() DomainOutput {
	return i.ToDomainOutputWithContext(context.Background())
}

func (i *Domain) ToDomainOutputWithContext(ctx context.Context) DomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainOutput)
}

type DomainOutput struct{ *pulumi.OutputState }

func (DomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Domain)(nil)).Elem()
}

func (o DomainOutput) ToDomainOutput() DomainOutput {
	return o
}

func (o DomainOutput) ToDomainOutputWithContext(ctx context.Context) DomainOutput {
	return o
}

// The unique ID for an Amplify app.
func (o DomainOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.AppId }).(pulumi.StringOutput)
}

// ARN for the Domain Association.
func (o DomainOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Sets the branch patterns for automatic subdomain creation.
func (o DomainOutput) AutoSubDomainCreationPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringArrayOutput { return v.AutoSubDomainCreationPatterns }).(pulumi.StringArrayOutput)
}

// The required AWS Identity and Access Management (IAMlong) service role for the Amazon Resource Name (ARN) for automatically creating subdomains.
func (o DomainOutput) AutoSubDomainIamRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringPtrOutput { return v.AutoSubDomainIamRole }).(pulumi.StringPtrOutput)
}

func (o DomainOutput) Certificate() DomainCertificateOutput {
	return o.ApplyT(func(v *Domain) DomainCertificateOutput { return v.Certificate }).(DomainCertificateOutput)
}

// DNS Record for certificate verification.
func (o DomainOutput) CertificateRecord() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.CertificateRecord }).(pulumi.StringOutput)
}

// The type of SSL/TLS certificate to use for your custom domain. If you don't specify a certificate type, Amplify uses the default certificate that it provisions and manages for you.
func (o DomainOutput) CertificateSettings() DomainCertificateSettingsPtrOutput {
	return o.ApplyT(func(v *Domain) DomainCertificateSettingsPtrOutput { return v.CertificateSettings }).(DomainCertificateSettingsPtrOutput)
}

// The domain name for the domain association.
func (o DomainOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.DomainName }).(pulumi.StringOutput)
}

// Status for the Domain Association.
func (o DomainOutput) DomainStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.DomainStatus }).(pulumi.StringOutput)
}

// Enables the automated creation of subdomains for branches.
func (o DomainOutput) EnableAutoSubDomain() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Domain) pulumi.BoolPtrOutput { return v.EnableAutoSubDomain }).(pulumi.BoolPtrOutput)
}

// Reason for the current status of the domain.
func (o DomainOutput) StatusReason() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.StatusReason }).(pulumi.StringOutput)
}

// The setting for the subdomain.
func (o DomainOutput) SubDomainSettings() DomainSubDomainSettingArrayOutput {
	return o.ApplyT(func(v *Domain) DomainSubDomainSettingArrayOutput { return v.SubDomainSettings }).(DomainSubDomainSettingArrayOutput)
}

// The status of the domain update operation that is currently in progress. The following list describes the valid update states.
//
// - **REQUESTING_CERTIFICATE** - The certificate is in the process of being updated.
// - **PENDING_VERIFICATION** - Indicates that an Amplify managed certificate is in the process of being verified. This occurs during the creation of a custom domain or when a custom domain is updated to use a managed certificate.
// - **IMPORTING_CUSTOM_CERTIFICATE** - Indicates that an Amplify custom certificate is in the process of being imported. This occurs during the creation of a custom domain or when a custom domain is updated to use a custom certificate.
// - **PENDING_DEPLOYMENT** - Indicates that the subdomain or certificate changes are being propagated.
// - **AWAITING_APP_CNAME** - Amplify is waiting for CNAME records corresponding to subdomains to be propagated. If your custom domain is on RouteÂ 53, Amplify handles this for you automatically. For more information about custom domains, see [Setting up custom domains](https://docs.aws.amazon.com/amplify/latest/userguide/custom-domains.html) in the *Amplify Hosting User Guide* .
// - **UPDATE_COMPLETE** - The certificate has been associated with a domain.
// - **UPDATE_FAILED** - The certificate has failed to be provisioned or associated, and there is no existing active certificate to roll back to.
func (o DomainOutput) UpdateStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.UpdateStatus }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainInput)(nil)).Elem(), &Domain{})
	pulumi.RegisterOutputType(DomainOutput{})
}
