// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package efs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The “AWS::EFS::FileSystem“ resource creates a new, empty file system in EFSlong (EFS). You must create a mount target ([AWS::EFS::MountTarget](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-mounttarget.html)) to mount your EFS file system on an EC2 or other AWS cloud compute resource.
type FileSystem struct {
	pulumi.CustomResourceState

	Arn pulumi.StringOutput `pulumi:"arn"`
	// For One Zone file systems, specify the AWS Availability Zone in which to create the file system. Use the format ``us-east-1a`` to specify the Availability Zone. For more information about One Zone file systems, see [EFS file system types](https://docs.aws.amazon.com/efs/latest/ug/availability-durability.html#file-system-type) in the *Amazon EFS User Guide*.
	//   One Zone file systems are not available in all Availability Zones in AWS-Regions where Amazon EFS is available.
	AvailabilityZoneName pulumi.StringPtrOutput `pulumi:"availabilityZoneName"`
	// Use the ``BackupPolicy`` to turn automatic backups on or off for the file system.
	BackupPolicy FileSystemBackupPolicyPtrOutput `pulumi:"backupPolicy"`
	// (Optional) A boolean that specifies whether or not to bypass the ``FileSystemPolicy`` lockout safety check. The lockout safety check determines whether the policy in the request will lock out, or prevent, the IAM principal that is making the request from making future ``PutFileSystemPolicy`` requests on this file system. Set ``BypassPolicyLockoutSafetyCheck`` to ``True`` only when you intend to prevent the IAM principal that is making the request from making subsequent ``PutFileSystemPolicy`` requests on this file system. The default value is ``False``.
	BypassPolicyLockoutSafetyCheck pulumi.BoolPtrOutput `pulumi:"bypassPolicyLockoutSafetyCheck"`
	// A Boolean value that, if true, creates an encrypted file system. When creating an encrypted file system, you have the option of specifying a KmsKeyId for an existing kms-key-long. If you don't specify a kms-key, then the default kms-key for EFS, ``/aws/elasticfilesystem``, is used to protect the encrypted file system.
	Encrypted    pulumi.BoolPtrOutput `pulumi:"encrypted"`
	FileSystemId pulumi.StringOutput  `pulumi:"fileSystemId"`
	// The ``FileSystemPolicy`` for the EFS file system. A file system policy is an IAM resource policy used to control NFS access to an EFS file system. For more information, see [Using to control NFS access to Amazon EFS](https://docs.aws.amazon.com/efs/latest/ug/iam-access-control-nfs-efs.html) in the *Amazon EFS User Guide*.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::EFS::FileSystem` for more information about the expected schema for this property.
	FileSystemPolicy pulumi.AnyOutput `pulumi:"fileSystemPolicy"`
	// Describes the protection on the file system.
	FileSystemProtection FileSystemProtectionPtrOutput `pulumi:"fileSystemProtection"`
	// Use to create one or more tags associated with the file system. Each tag is a user-defined key-value pair. Name your file system on creation by including a ``"Key":"Name","Value":"{value}"`` key-value pair. Each key must be unique. For more information, see [Tagging resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the *General Reference Guide*.
	FileSystemTags aws.TagArrayOutput `pulumi:"fileSystemTags"`
	// The ID of the kms-key-long to be used to protect the encrypted file system. This parameter is only required if you want to use a nondefault kms-key. If this parameter is not specified, the default kms-key for EFS is used. This ID can be in one of the following formats:
	//   +  Key ID - A unique identifier of the key, for example ``1234abcd-12ab-34cd-56ef-1234567890ab``.
	//   +  ARN - An Amazon Resource Name (ARN) for the key, for example ``arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab``.
	//   +  Key alias - A previously created display name for a key, for example ``alias/projectKey1``.
	//   +  Key alias ARN - An ARN for a key alias, for example ``arn:aws:kms:us-west-2:444455556666:alias/projectKey1``.
	//
	//  If ``KmsKeyId`` is specified, the ``Encrypted`` parameter must be set to true.
	KmsKeyId pulumi.StringPtrOutput `pulumi:"kmsKeyId"`
	// An array of ``LifecyclePolicy`` objects that define the file system's ``LifecycleConfiguration`` object. A ``LifecycleConfiguration`` object informs Lifecycle management of the following:
	//   +  When to move files in the file system from primary storage to IA storage.
	//   + When to move files in the file system from primary storage or IA storage to Archive storage.
	//  +  When to move files that are in IA or Archive storage to primary storage.
	//
	//   EFS requires that each ``LifecyclePolicy`` object have only a single transition. This means that in a request body, ``LifecyclePolicies`` needs to be structured as an array of ``LifecyclePolicy`` objects, one object for each transition, ``TransitionToIA``, ``TransitionToArchive`` ``TransitionToPrimaryStorageClass``. See the example requests in the following section for more information.
	LifecyclePolicies FileSystemLifecyclePolicyArrayOutput `pulumi:"lifecyclePolicies"`
	// The Performance mode of the file system. We recommend ``generalPurpose`` performance mode for all file systems. File systems using the ``maxIO`` performance mode can scale to higher levels of aggregate throughput and operations per second with a tradeoff of slightly higher latencies for most file operations. The performance mode can't be changed after the file system has been created. The ``maxIO`` mode is not supported on One Zone file systems.
	//   Due to the higher per-operation latencies with Max I/O, we recommend using General Purpose performance mode for all file systems.
	//   Default is ``generalPurpose``.
	PerformanceMode pulumi.StringPtrOutput `pulumi:"performanceMode"`
	// The throughput, measured in mebibytes per second (MiBps), that you want to provision for a file system that you're creating. Required if ``ThroughputMode`` is set to ``provisioned``. Valid values are 1-3414 MiBps, with the upper limit depending on Region. To increase this limit, contact SUP. For more information, see [Amazon EFS quotas that you can increase](https://docs.aws.amazon.com/efs/latest/ug/limits.html#soft-limits) in the *Amazon EFS User Guide*.
	ProvisionedThroughputInMibps pulumi.Float64PtrOutput `pulumi:"provisionedThroughputInMibps"`
	// Describes the replication configuration for a specific file system.
	ReplicationConfiguration FileSystemReplicationConfigurationPtrOutput `pulumi:"replicationConfiguration"`
	// Specifies the throughput mode for the file system. The mode can be ``bursting``, ``provisioned``, or ``elastic``. If you set ``ThroughputMode`` to ``provisioned``, you must also set a value for ``ProvisionedThroughputInMibps``. After you create the file system, you can decrease your file system's Provisioned throughput or change between the throughput modes, with certain time restrictions. For more information, see [Specifying throughput with provisioned mode](https://docs.aws.amazon.com/efs/latest/ug/performance.html#provisioned-throughput) in the *Amazon EFS User Guide*.
	//  Default is ``bursting``.
	ThroughputMode pulumi.StringPtrOutput `pulumi:"throughputMode"`
}

// NewFileSystem registers a new resource with the given unique name, arguments, and options.
func NewFileSystem(ctx *pulumi.Context,
	name string, args *FileSystemArgs, opts ...pulumi.ResourceOption) (*FileSystem, error) {
	if args == nil {
		args = &FileSystemArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"availabilityZoneName",
		"encrypted",
		"kmsKeyId",
		"performanceMode",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FileSystem
	err := ctx.RegisterResource("aws-native:efs:FileSystem", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFileSystem gets an existing FileSystem resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFileSystem(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FileSystemState, opts ...pulumi.ResourceOption) (*FileSystem, error) {
	var resource FileSystem
	err := ctx.ReadResource("aws-native:efs:FileSystem", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FileSystem resources.
type fileSystemState struct {
}

type FileSystemState struct {
}

func (FileSystemState) ElementType() reflect.Type {
	return reflect.TypeOf((*fileSystemState)(nil)).Elem()
}

type fileSystemArgs struct {
	// For One Zone file systems, specify the AWS Availability Zone in which to create the file system. Use the format ``us-east-1a`` to specify the Availability Zone. For more information about One Zone file systems, see [EFS file system types](https://docs.aws.amazon.com/efs/latest/ug/availability-durability.html#file-system-type) in the *Amazon EFS User Guide*.
	//   One Zone file systems are not available in all Availability Zones in AWS-Regions where Amazon EFS is available.
	AvailabilityZoneName *string `pulumi:"availabilityZoneName"`
	// Use the ``BackupPolicy`` to turn automatic backups on or off for the file system.
	BackupPolicy *FileSystemBackupPolicy `pulumi:"backupPolicy"`
	// (Optional) A boolean that specifies whether or not to bypass the ``FileSystemPolicy`` lockout safety check. The lockout safety check determines whether the policy in the request will lock out, or prevent, the IAM principal that is making the request from making future ``PutFileSystemPolicy`` requests on this file system. Set ``BypassPolicyLockoutSafetyCheck`` to ``True`` only when you intend to prevent the IAM principal that is making the request from making subsequent ``PutFileSystemPolicy`` requests on this file system. The default value is ``False``.
	BypassPolicyLockoutSafetyCheck *bool `pulumi:"bypassPolicyLockoutSafetyCheck"`
	// A Boolean value that, if true, creates an encrypted file system. When creating an encrypted file system, you have the option of specifying a KmsKeyId for an existing kms-key-long. If you don't specify a kms-key, then the default kms-key for EFS, ``/aws/elasticfilesystem``, is used to protect the encrypted file system.
	Encrypted *bool `pulumi:"encrypted"`
	// The ``FileSystemPolicy`` for the EFS file system. A file system policy is an IAM resource policy used to control NFS access to an EFS file system. For more information, see [Using to control NFS access to Amazon EFS](https://docs.aws.amazon.com/efs/latest/ug/iam-access-control-nfs-efs.html) in the *Amazon EFS User Guide*.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::EFS::FileSystem` for more information about the expected schema for this property.
	FileSystemPolicy interface{} `pulumi:"fileSystemPolicy"`
	// Describes the protection on the file system.
	FileSystemProtection *FileSystemProtection `pulumi:"fileSystemProtection"`
	// Use to create one or more tags associated with the file system. Each tag is a user-defined key-value pair. Name your file system on creation by including a ``"Key":"Name","Value":"{value}"`` key-value pair. Each key must be unique. For more information, see [Tagging resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the *General Reference Guide*.
	FileSystemTags []aws.Tag `pulumi:"fileSystemTags"`
	// The ID of the kms-key-long to be used to protect the encrypted file system. This parameter is only required if you want to use a nondefault kms-key. If this parameter is not specified, the default kms-key for EFS is used. This ID can be in one of the following formats:
	//   +  Key ID - A unique identifier of the key, for example ``1234abcd-12ab-34cd-56ef-1234567890ab``.
	//   +  ARN - An Amazon Resource Name (ARN) for the key, for example ``arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab``.
	//   +  Key alias - A previously created display name for a key, for example ``alias/projectKey1``.
	//   +  Key alias ARN - An ARN for a key alias, for example ``arn:aws:kms:us-west-2:444455556666:alias/projectKey1``.
	//
	//  If ``KmsKeyId`` is specified, the ``Encrypted`` parameter must be set to true.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// An array of ``LifecyclePolicy`` objects that define the file system's ``LifecycleConfiguration`` object. A ``LifecycleConfiguration`` object informs Lifecycle management of the following:
	//   +  When to move files in the file system from primary storage to IA storage.
	//   + When to move files in the file system from primary storage or IA storage to Archive storage.
	//  +  When to move files that are in IA or Archive storage to primary storage.
	//
	//   EFS requires that each ``LifecyclePolicy`` object have only a single transition. This means that in a request body, ``LifecyclePolicies`` needs to be structured as an array of ``LifecyclePolicy`` objects, one object for each transition, ``TransitionToIA``, ``TransitionToArchive`` ``TransitionToPrimaryStorageClass``. See the example requests in the following section for more information.
	LifecyclePolicies []FileSystemLifecyclePolicy `pulumi:"lifecyclePolicies"`
	// The Performance mode of the file system. We recommend ``generalPurpose`` performance mode for all file systems. File systems using the ``maxIO`` performance mode can scale to higher levels of aggregate throughput and operations per second with a tradeoff of slightly higher latencies for most file operations. The performance mode can't be changed after the file system has been created. The ``maxIO`` mode is not supported on One Zone file systems.
	//   Due to the higher per-operation latencies with Max I/O, we recommend using General Purpose performance mode for all file systems.
	//   Default is ``generalPurpose``.
	PerformanceMode *string `pulumi:"performanceMode"`
	// The throughput, measured in mebibytes per second (MiBps), that you want to provision for a file system that you're creating. Required if ``ThroughputMode`` is set to ``provisioned``. Valid values are 1-3414 MiBps, with the upper limit depending on Region. To increase this limit, contact SUP. For more information, see [Amazon EFS quotas that you can increase](https://docs.aws.amazon.com/efs/latest/ug/limits.html#soft-limits) in the *Amazon EFS User Guide*.
	ProvisionedThroughputInMibps *float64 `pulumi:"provisionedThroughputInMibps"`
	// Describes the replication configuration for a specific file system.
	ReplicationConfiguration *FileSystemReplicationConfiguration `pulumi:"replicationConfiguration"`
	// Specifies the throughput mode for the file system. The mode can be ``bursting``, ``provisioned``, or ``elastic``. If you set ``ThroughputMode`` to ``provisioned``, you must also set a value for ``ProvisionedThroughputInMibps``. After you create the file system, you can decrease your file system's Provisioned throughput or change between the throughput modes, with certain time restrictions. For more information, see [Specifying throughput with provisioned mode](https://docs.aws.amazon.com/efs/latest/ug/performance.html#provisioned-throughput) in the *Amazon EFS User Guide*.
	//  Default is ``bursting``.
	ThroughputMode *string `pulumi:"throughputMode"`
}

// The set of arguments for constructing a FileSystem resource.
type FileSystemArgs struct {
	// For One Zone file systems, specify the AWS Availability Zone in which to create the file system. Use the format ``us-east-1a`` to specify the Availability Zone. For more information about One Zone file systems, see [EFS file system types](https://docs.aws.amazon.com/efs/latest/ug/availability-durability.html#file-system-type) in the *Amazon EFS User Guide*.
	//   One Zone file systems are not available in all Availability Zones in AWS-Regions where Amazon EFS is available.
	AvailabilityZoneName pulumi.StringPtrInput
	// Use the ``BackupPolicy`` to turn automatic backups on or off for the file system.
	BackupPolicy FileSystemBackupPolicyPtrInput
	// (Optional) A boolean that specifies whether or not to bypass the ``FileSystemPolicy`` lockout safety check. The lockout safety check determines whether the policy in the request will lock out, or prevent, the IAM principal that is making the request from making future ``PutFileSystemPolicy`` requests on this file system. Set ``BypassPolicyLockoutSafetyCheck`` to ``True`` only when you intend to prevent the IAM principal that is making the request from making subsequent ``PutFileSystemPolicy`` requests on this file system. The default value is ``False``.
	BypassPolicyLockoutSafetyCheck pulumi.BoolPtrInput
	// A Boolean value that, if true, creates an encrypted file system. When creating an encrypted file system, you have the option of specifying a KmsKeyId for an existing kms-key-long. If you don't specify a kms-key, then the default kms-key for EFS, ``/aws/elasticfilesystem``, is used to protect the encrypted file system.
	Encrypted pulumi.BoolPtrInput
	// The ``FileSystemPolicy`` for the EFS file system. A file system policy is an IAM resource policy used to control NFS access to an EFS file system. For more information, see [Using to control NFS access to Amazon EFS](https://docs.aws.amazon.com/efs/latest/ug/iam-access-control-nfs-efs.html) in the *Amazon EFS User Guide*.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::EFS::FileSystem` for more information about the expected schema for this property.
	FileSystemPolicy pulumi.Input
	// Describes the protection on the file system.
	FileSystemProtection FileSystemProtectionPtrInput
	// Use to create one or more tags associated with the file system. Each tag is a user-defined key-value pair. Name your file system on creation by including a ``"Key":"Name","Value":"{value}"`` key-value pair. Each key must be unique. For more information, see [Tagging resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the *General Reference Guide*.
	FileSystemTags aws.TagArrayInput
	// The ID of the kms-key-long to be used to protect the encrypted file system. This parameter is only required if you want to use a nondefault kms-key. If this parameter is not specified, the default kms-key for EFS is used. This ID can be in one of the following formats:
	//   +  Key ID - A unique identifier of the key, for example ``1234abcd-12ab-34cd-56ef-1234567890ab``.
	//   +  ARN - An Amazon Resource Name (ARN) for the key, for example ``arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab``.
	//   +  Key alias - A previously created display name for a key, for example ``alias/projectKey1``.
	//   +  Key alias ARN - An ARN for a key alias, for example ``arn:aws:kms:us-west-2:444455556666:alias/projectKey1``.
	//
	//  If ``KmsKeyId`` is specified, the ``Encrypted`` parameter must be set to true.
	KmsKeyId pulumi.StringPtrInput
	// An array of ``LifecyclePolicy`` objects that define the file system's ``LifecycleConfiguration`` object. A ``LifecycleConfiguration`` object informs Lifecycle management of the following:
	//   +  When to move files in the file system from primary storage to IA storage.
	//   + When to move files in the file system from primary storage or IA storage to Archive storage.
	//  +  When to move files that are in IA or Archive storage to primary storage.
	//
	//   EFS requires that each ``LifecyclePolicy`` object have only a single transition. This means that in a request body, ``LifecyclePolicies`` needs to be structured as an array of ``LifecyclePolicy`` objects, one object for each transition, ``TransitionToIA``, ``TransitionToArchive`` ``TransitionToPrimaryStorageClass``. See the example requests in the following section for more information.
	LifecyclePolicies FileSystemLifecyclePolicyArrayInput
	// The Performance mode of the file system. We recommend ``generalPurpose`` performance mode for all file systems. File systems using the ``maxIO`` performance mode can scale to higher levels of aggregate throughput and operations per second with a tradeoff of slightly higher latencies for most file operations. The performance mode can't be changed after the file system has been created. The ``maxIO`` mode is not supported on One Zone file systems.
	//   Due to the higher per-operation latencies with Max I/O, we recommend using General Purpose performance mode for all file systems.
	//   Default is ``generalPurpose``.
	PerformanceMode pulumi.StringPtrInput
	// The throughput, measured in mebibytes per second (MiBps), that you want to provision for a file system that you're creating. Required if ``ThroughputMode`` is set to ``provisioned``. Valid values are 1-3414 MiBps, with the upper limit depending on Region. To increase this limit, contact SUP. For more information, see [Amazon EFS quotas that you can increase](https://docs.aws.amazon.com/efs/latest/ug/limits.html#soft-limits) in the *Amazon EFS User Guide*.
	ProvisionedThroughputInMibps pulumi.Float64PtrInput
	// Describes the replication configuration for a specific file system.
	ReplicationConfiguration FileSystemReplicationConfigurationPtrInput
	// Specifies the throughput mode for the file system. The mode can be ``bursting``, ``provisioned``, or ``elastic``. If you set ``ThroughputMode`` to ``provisioned``, you must also set a value for ``ProvisionedThroughputInMibps``. After you create the file system, you can decrease your file system's Provisioned throughput or change between the throughput modes, with certain time restrictions. For more information, see [Specifying throughput with provisioned mode](https://docs.aws.amazon.com/efs/latest/ug/performance.html#provisioned-throughput) in the *Amazon EFS User Guide*.
	//  Default is ``bursting``.
	ThroughputMode pulumi.StringPtrInput
}

func (FileSystemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fileSystemArgs)(nil)).Elem()
}

type FileSystemInput interface {
	pulumi.Input

	ToFileSystemOutput() FileSystemOutput
	ToFileSystemOutputWithContext(ctx context.Context) FileSystemOutput
}

func (*FileSystem) ElementType() reflect.Type {
	return reflect.TypeOf((**FileSystem)(nil)).Elem()
}

func (i *FileSystem) ToFileSystemOutput() FileSystemOutput {
	return i.ToFileSystemOutputWithContext(context.Background())
}

func (i *FileSystem) ToFileSystemOutputWithContext(ctx context.Context) FileSystemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemOutput)
}

type FileSystemOutput struct{ *pulumi.OutputState }

func (FileSystemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileSystem)(nil)).Elem()
}

func (o FileSystemOutput) ToFileSystemOutput() FileSystemOutput {
	return o
}

func (o FileSystemOutput) ToFileSystemOutputWithContext(ctx context.Context) FileSystemOutput {
	return o
}

func (o FileSystemOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// For One Zone file systems, specify the AWS Availability Zone in which to create the file system. Use the format “us-east-1a“ to specify the Availability Zone. For more information about One Zone file systems, see [EFS file system types](https://docs.aws.amazon.com/efs/latest/ug/availability-durability.html#file-system-type) in the *Amazon EFS User Guide*.
//
//	One Zone file systems are not available in all Availability Zones in AWS-Regions where Amazon EFS is available.
func (o FileSystemOutput) AvailabilityZoneName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringPtrOutput { return v.AvailabilityZoneName }).(pulumi.StringPtrOutput)
}

// Use the “BackupPolicy“ to turn automatic backups on or off for the file system.
func (o FileSystemOutput) BackupPolicy() FileSystemBackupPolicyPtrOutput {
	return o.ApplyT(func(v *FileSystem) FileSystemBackupPolicyPtrOutput { return v.BackupPolicy }).(FileSystemBackupPolicyPtrOutput)
}

// (Optional) A boolean that specifies whether or not to bypass the “FileSystemPolicy“ lockout safety check. The lockout safety check determines whether the policy in the request will lock out, or prevent, the IAM principal that is making the request from making future “PutFileSystemPolicy“ requests on this file system. Set “BypassPolicyLockoutSafetyCheck“ to “True“ only when you intend to prevent the IAM principal that is making the request from making subsequent “PutFileSystemPolicy“ requests on this file system. The default value is “False“.
func (o FileSystemOutput) BypassPolicyLockoutSafetyCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.BoolPtrOutput { return v.BypassPolicyLockoutSafetyCheck }).(pulumi.BoolPtrOutput)
}

// A Boolean value that, if true, creates an encrypted file system. When creating an encrypted file system, you have the option of specifying a KmsKeyId for an existing kms-key-long. If you don't specify a kms-key, then the default kms-key for EFS, “/aws/elasticfilesystem“, is used to protect the encrypted file system.
func (o FileSystemOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.BoolPtrOutput { return v.Encrypted }).(pulumi.BoolPtrOutput)
}

func (o FileSystemOutput) FileSystemId() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.FileSystemId }).(pulumi.StringOutput)
}

// The “FileSystemPolicy“ for the EFS file system. A file system policy is an IAM resource policy used to control NFS access to an EFS file system. For more information, see [Using to control NFS access to Amazon EFS](https://docs.aws.amazon.com/efs/latest/ug/iam-access-control-nfs-efs.html) in the *Amazon EFS User Guide*.
//
// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::EFS::FileSystem` for more information about the expected schema for this property.
func (o FileSystemOutput) FileSystemPolicy() pulumi.AnyOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.AnyOutput { return v.FileSystemPolicy }).(pulumi.AnyOutput)
}

// Describes the protection on the file system.
func (o FileSystemOutput) FileSystemProtection() FileSystemProtectionPtrOutput {
	return o.ApplyT(func(v *FileSystem) FileSystemProtectionPtrOutput { return v.FileSystemProtection }).(FileSystemProtectionPtrOutput)
}

// Use to create one or more tags associated with the file system. Each tag is a user-defined key-value pair. Name your file system on creation by including a “"Key":"Name","Value":"{value}"“ key-value pair. Each key must be unique. For more information, see [Tagging resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the *General Reference Guide*.
func (o FileSystemOutput) FileSystemTags() aws.TagArrayOutput {
	return o.ApplyT(func(v *FileSystem) aws.TagArrayOutput { return v.FileSystemTags }).(aws.TagArrayOutput)
}

// The ID of the kms-key-long to be used to protect the encrypted file system. This parameter is only required if you want to use a nondefault kms-key. If this parameter is not specified, the default kms-key for EFS is used. This ID can be in one of the following formats:
//
//   - Key ID - A unique identifier of the key, for example “1234abcd-12ab-34cd-56ef-1234567890ab“.
//
//   - ARN - An Amazon Resource Name (ARN) for the key, for example “arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab“.
//
//   - Key alias - A previously created display name for a key, for example “alias/projectKey1“.
//
//   - Key alias ARN - An ARN for a key alias, for example “arn:aws:kms:us-west-2:444455556666:alias/projectKey1“.
//
//     If “KmsKeyId“ is specified, the “Encrypted“ parameter must be set to true.
func (o FileSystemOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringPtrOutput { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

// An array of “LifecyclePolicy“ objects that define the file system's “LifecycleConfiguration“ object. A “LifecycleConfiguration“ object informs Lifecycle management of the following:
//
//   - When to move files in the file system from primary storage to IA storage.
//
//   - When to move files in the file system from primary storage or IA storage to Archive storage.
//
//   - When to move files that are in IA or Archive storage to primary storage.
//
//     EFS requires that each “LifecyclePolicy“ object have only a single transition. This means that in a request body, “LifecyclePolicies“ needs to be structured as an array of “LifecyclePolicy“ objects, one object for each transition, “TransitionToIA“, “TransitionToArchive“ “TransitionToPrimaryStorageClass“. See the example requests in the following section for more information.
func (o FileSystemOutput) LifecyclePolicies() FileSystemLifecyclePolicyArrayOutput {
	return o.ApplyT(func(v *FileSystem) FileSystemLifecyclePolicyArrayOutput { return v.LifecyclePolicies }).(FileSystemLifecyclePolicyArrayOutput)
}

// The Performance mode of the file system. We recommend “generalPurpose“ performance mode for all file systems. File systems using the “maxIO“ performance mode can scale to higher levels of aggregate throughput and operations per second with a tradeoff of slightly higher latencies for most file operations. The performance mode can't be changed after the file system has been created. The “maxIO“ mode is not supported on One Zone file systems.
//
//	Due to the higher per-operation latencies with Max I/O, we recommend using General Purpose performance mode for all file systems.
//	Default is ``generalPurpose``.
func (o FileSystemOutput) PerformanceMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringPtrOutput { return v.PerformanceMode }).(pulumi.StringPtrOutput)
}

// The throughput, measured in mebibytes per second (MiBps), that you want to provision for a file system that you're creating. Required if “ThroughputMode“ is set to “provisioned“. Valid values are 1-3414 MiBps, with the upper limit depending on Region. To increase this limit, contact SUP. For more information, see [Amazon EFS quotas that you can increase](https://docs.aws.amazon.com/efs/latest/ug/limits.html#soft-limits) in the *Amazon EFS User Guide*.
func (o FileSystemOutput) ProvisionedThroughputInMibps() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.Float64PtrOutput { return v.ProvisionedThroughputInMibps }).(pulumi.Float64PtrOutput)
}

// Describes the replication configuration for a specific file system.
func (o FileSystemOutput) ReplicationConfiguration() FileSystemReplicationConfigurationPtrOutput {
	return o.ApplyT(func(v *FileSystem) FileSystemReplicationConfigurationPtrOutput { return v.ReplicationConfiguration }).(FileSystemReplicationConfigurationPtrOutput)
}

// Specifies the throughput mode for the file system. The mode can be “bursting“, “provisioned“, or “elastic“. If you set “ThroughputMode“ to “provisioned“, you must also set a value for “ProvisionedThroughputInMibps“. After you create the file system, you can decrease your file system's Provisioned throughput or change between the throughput modes, with certain time restrictions. For more information, see [Specifying throughput with provisioned mode](https://docs.aws.amazon.com/efs/latest/ug/performance.html#provisioned-throughput) in the *Amazon EFS User Guide*.
//
//	Default is ``bursting``.
func (o FileSystemOutput) ThroughputMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringPtrOutput { return v.ThroughputMode }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FileSystemInput)(nil)).Elem(), &FileSystem{})
	pulumi.RegisterOutputType(FileSystemOutput{})
}
