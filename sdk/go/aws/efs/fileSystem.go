// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package efs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::EFS::FileSystem
type FileSystem struct {
	pulumi.CustomResourceState

	Arn                  pulumi.StringOutput             `pulumi:"arn"`
	AvailabilityZoneName pulumi.StringPtrOutput          `pulumi:"availabilityZoneName"`
	BackupPolicy         FileSystemBackupPolicyPtrOutput `pulumi:"backupPolicy"`
	// Whether to bypass the FileSystemPolicy lockout safety check. The policy lockout safety check determines whether the policy in the request will prevent the principal making the request to be locked out from making future PutFileSystemPolicy requests on the file system. Set BypassPolicyLockoutSafetyCheck to True only when you intend to prevent the principal that is making the request from making a subsequent PutFileSystemPolicy request on the file system. Defaults to false
	BypassPolicyLockoutSafetyCheck pulumi.BoolPtrOutput                      `pulumi:"bypassPolicyLockoutSafetyCheck"`
	Encrypted                      pulumi.BoolPtrOutput                      `pulumi:"encrypted"`
	FileSystemId                   pulumi.StringOutput                       `pulumi:"fileSystemId"`
	FileSystemPolicy               pulumi.AnyOutput                          `pulumi:"fileSystemPolicy"`
	FileSystemTags                 FileSystemElasticFileSystemTagArrayOutput `pulumi:"fileSystemTags"`
	KmsKeyId                       pulumi.StringPtrOutput                    `pulumi:"kmsKeyId"`
	LifecyclePolicies              FileSystemLifecyclePolicyArrayOutput      `pulumi:"lifecyclePolicies"`
	PerformanceMode                pulumi.StringPtrOutput                    `pulumi:"performanceMode"`
	ProvisionedThroughputInMibps   pulumi.Float64PtrOutput                   `pulumi:"provisionedThroughputInMibps"`
	ThroughputMode                 pulumi.StringPtrOutput                    `pulumi:"throughputMode"`
}

// NewFileSystem registers a new resource with the given unique name, arguments, and options.
func NewFileSystem(ctx *pulumi.Context,
	name string, args *FileSystemArgs, opts ...pulumi.ResourceOption) (*FileSystem, error) {
	if args == nil {
		args = &FileSystemArgs{}
	}

	var resource FileSystem
	err := ctx.RegisterResource("aws-native:efs:FileSystem", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFileSystem gets an existing FileSystem resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFileSystem(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FileSystemState, opts ...pulumi.ResourceOption) (*FileSystem, error) {
	var resource FileSystem
	err := ctx.ReadResource("aws-native:efs:FileSystem", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FileSystem resources.
type fileSystemState struct {
}

type FileSystemState struct {
}

func (FileSystemState) ElementType() reflect.Type {
	return reflect.TypeOf((*fileSystemState)(nil)).Elem()
}

type fileSystemArgs struct {
	AvailabilityZoneName *string                 `pulumi:"availabilityZoneName"`
	BackupPolicy         *FileSystemBackupPolicy `pulumi:"backupPolicy"`
	// Whether to bypass the FileSystemPolicy lockout safety check. The policy lockout safety check determines whether the policy in the request will prevent the principal making the request to be locked out from making future PutFileSystemPolicy requests on the file system. Set BypassPolicyLockoutSafetyCheck to True only when you intend to prevent the principal that is making the request from making a subsequent PutFileSystemPolicy request on the file system. Defaults to false
	BypassPolicyLockoutSafetyCheck *bool                            `pulumi:"bypassPolicyLockoutSafetyCheck"`
	Encrypted                      *bool                            `pulumi:"encrypted"`
	FileSystemPolicy               interface{}                      `pulumi:"fileSystemPolicy"`
	FileSystemTags                 []FileSystemElasticFileSystemTag `pulumi:"fileSystemTags"`
	KmsKeyId                       *string                          `pulumi:"kmsKeyId"`
	LifecyclePolicies              []FileSystemLifecyclePolicy      `pulumi:"lifecyclePolicies"`
	PerformanceMode                *string                          `pulumi:"performanceMode"`
	ProvisionedThroughputInMibps   *float64                         `pulumi:"provisionedThroughputInMibps"`
	ThroughputMode                 *string                          `pulumi:"throughputMode"`
}

// The set of arguments for constructing a FileSystem resource.
type FileSystemArgs struct {
	AvailabilityZoneName pulumi.StringPtrInput
	BackupPolicy         FileSystemBackupPolicyPtrInput
	// Whether to bypass the FileSystemPolicy lockout safety check. The policy lockout safety check determines whether the policy in the request will prevent the principal making the request to be locked out from making future PutFileSystemPolicy requests on the file system. Set BypassPolicyLockoutSafetyCheck to True only when you intend to prevent the principal that is making the request from making a subsequent PutFileSystemPolicy request on the file system. Defaults to false
	BypassPolicyLockoutSafetyCheck pulumi.BoolPtrInput
	Encrypted                      pulumi.BoolPtrInput
	FileSystemPolicy               pulumi.Input
	FileSystemTags                 FileSystemElasticFileSystemTagArrayInput
	KmsKeyId                       pulumi.StringPtrInput
	LifecyclePolicies              FileSystemLifecyclePolicyArrayInput
	PerformanceMode                pulumi.StringPtrInput
	ProvisionedThroughputInMibps   pulumi.Float64PtrInput
	ThroughputMode                 pulumi.StringPtrInput
}

func (FileSystemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fileSystemArgs)(nil)).Elem()
}

type FileSystemInput interface {
	pulumi.Input

	ToFileSystemOutput() FileSystemOutput
	ToFileSystemOutputWithContext(ctx context.Context) FileSystemOutput
}

func (*FileSystem) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSystem)(nil))
}

func (i *FileSystem) ToFileSystemOutput() FileSystemOutput {
	return i.ToFileSystemOutputWithContext(context.Background())
}

func (i *FileSystem) ToFileSystemOutputWithContext(ctx context.Context) FileSystemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemOutput)
}

type FileSystemOutput struct{ *pulumi.OutputState }

func (FileSystemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSystem)(nil))
}

func (o FileSystemOutput) ToFileSystemOutput() FileSystemOutput {
	return o
}

func (o FileSystemOutput) ToFileSystemOutputWithContext(ctx context.Context) FileSystemOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(FileSystemOutput{})
}
