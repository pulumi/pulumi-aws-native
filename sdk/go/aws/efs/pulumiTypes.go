// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package efs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// Required if the “RootDirectory“ > “Path“ specified does not exist. Specifies the POSIX IDs and permissions to apply to the access point's “RootDirectory“ > “Path“. If the access point root directory does not exist, EFS creates it with these settings when a client connects to the access point. When specifying “CreationInfo“, you must include values for all properties.
//
//	Amazon EFS creates a root directory only if you have provided the CreationInfo: OwnUid, OwnGID, and permissions for the directory. If you do not provide this information, Amazon EFS does not create the root directory. If the root directory does not exist, attempts to mount using the access point will fail.
//	 If you do not provide ``CreationInfo`` and the specified ``RootDirectory`` does not exist, attempts to mount the file system using the access point will fail.
type AccessPointCreationInfo struct {
	// Specifies the POSIX group ID to apply to the ``RootDirectory``. Accepts values from 0 to 2^32 (4294967295).
	OwnerGid string `pulumi:"ownerGid"`
	// Specifies the POSIX user ID to apply to the ``RootDirectory``. Accepts values from 0 to 2^32 (4294967295).
	OwnerUid string `pulumi:"ownerUid"`
	// Specifies the POSIX permissions to apply to the ``RootDirectory``, in the format of an octal number representing the file's mode bits.
	Permissions string `pulumi:"permissions"`
}

// AccessPointCreationInfoInput is an input type that accepts AccessPointCreationInfoArgs and AccessPointCreationInfoOutput values.
// You can construct a concrete instance of `AccessPointCreationInfoInput` via:
//
//	AccessPointCreationInfoArgs{...}
type AccessPointCreationInfoInput interface {
	pulumi.Input

	ToAccessPointCreationInfoOutput() AccessPointCreationInfoOutput
	ToAccessPointCreationInfoOutputWithContext(context.Context) AccessPointCreationInfoOutput
}

// Required if the “RootDirectory“ > “Path“ specified does not exist. Specifies the POSIX IDs and permissions to apply to the access point's “RootDirectory“ > “Path“. If the access point root directory does not exist, EFS creates it with these settings when a client connects to the access point. When specifying “CreationInfo“, you must include values for all properties.
//
//	Amazon EFS creates a root directory only if you have provided the CreationInfo: OwnUid, OwnGID, and permissions for the directory. If you do not provide this information, Amazon EFS does not create the root directory. If the root directory does not exist, attempts to mount using the access point will fail.
//	 If you do not provide ``CreationInfo`` and the specified ``RootDirectory`` does not exist, attempts to mount the file system using the access point will fail.
type AccessPointCreationInfoArgs struct {
	// Specifies the POSIX group ID to apply to the ``RootDirectory``. Accepts values from 0 to 2^32 (4294967295).
	OwnerGid pulumi.StringInput `pulumi:"ownerGid"`
	// Specifies the POSIX user ID to apply to the ``RootDirectory``. Accepts values from 0 to 2^32 (4294967295).
	OwnerUid pulumi.StringInput `pulumi:"ownerUid"`
	// Specifies the POSIX permissions to apply to the ``RootDirectory``, in the format of an octal number representing the file's mode bits.
	Permissions pulumi.StringInput `pulumi:"permissions"`
}

func (AccessPointCreationInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessPointCreationInfo)(nil)).Elem()
}

func (i AccessPointCreationInfoArgs) ToAccessPointCreationInfoOutput() AccessPointCreationInfoOutput {
	return i.ToAccessPointCreationInfoOutputWithContext(context.Background())
}

func (i AccessPointCreationInfoArgs) ToAccessPointCreationInfoOutputWithContext(ctx context.Context) AccessPointCreationInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPointCreationInfoOutput)
}

func (i AccessPointCreationInfoArgs) ToAccessPointCreationInfoPtrOutput() AccessPointCreationInfoPtrOutput {
	return i.ToAccessPointCreationInfoPtrOutputWithContext(context.Background())
}

func (i AccessPointCreationInfoArgs) ToAccessPointCreationInfoPtrOutputWithContext(ctx context.Context) AccessPointCreationInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPointCreationInfoOutput).ToAccessPointCreationInfoPtrOutputWithContext(ctx)
}

// AccessPointCreationInfoPtrInput is an input type that accepts AccessPointCreationInfoArgs, AccessPointCreationInfoPtr and AccessPointCreationInfoPtrOutput values.
// You can construct a concrete instance of `AccessPointCreationInfoPtrInput` via:
//
//	        AccessPointCreationInfoArgs{...}
//
//	or:
//
//	        nil
type AccessPointCreationInfoPtrInput interface {
	pulumi.Input

	ToAccessPointCreationInfoPtrOutput() AccessPointCreationInfoPtrOutput
	ToAccessPointCreationInfoPtrOutputWithContext(context.Context) AccessPointCreationInfoPtrOutput
}

type accessPointCreationInfoPtrType AccessPointCreationInfoArgs

func AccessPointCreationInfoPtr(v *AccessPointCreationInfoArgs) AccessPointCreationInfoPtrInput {
	return (*accessPointCreationInfoPtrType)(v)
}

func (*accessPointCreationInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessPointCreationInfo)(nil)).Elem()
}

func (i *accessPointCreationInfoPtrType) ToAccessPointCreationInfoPtrOutput() AccessPointCreationInfoPtrOutput {
	return i.ToAccessPointCreationInfoPtrOutputWithContext(context.Background())
}

func (i *accessPointCreationInfoPtrType) ToAccessPointCreationInfoPtrOutputWithContext(ctx context.Context) AccessPointCreationInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPointCreationInfoPtrOutput)
}

// Required if the “RootDirectory“ > “Path“ specified does not exist. Specifies the POSIX IDs and permissions to apply to the access point's “RootDirectory“ > “Path“. If the access point root directory does not exist, EFS creates it with these settings when a client connects to the access point. When specifying “CreationInfo“, you must include values for all properties.
//
//	Amazon EFS creates a root directory only if you have provided the CreationInfo: OwnUid, OwnGID, and permissions for the directory. If you do not provide this information, Amazon EFS does not create the root directory. If the root directory does not exist, attempts to mount using the access point will fail.
//	 If you do not provide ``CreationInfo`` and the specified ``RootDirectory`` does not exist, attempts to mount the file system using the access point will fail.
type AccessPointCreationInfoOutput struct{ *pulumi.OutputState }

func (AccessPointCreationInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessPointCreationInfo)(nil)).Elem()
}

func (o AccessPointCreationInfoOutput) ToAccessPointCreationInfoOutput() AccessPointCreationInfoOutput {
	return o
}

func (o AccessPointCreationInfoOutput) ToAccessPointCreationInfoOutputWithContext(ctx context.Context) AccessPointCreationInfoOutput {
	return o
}

func (o AccessPointCreationInfoOutput) ToAccessPointCreationInfoPtrOutput() AccessPointCreationInfoPtrOutput {
	return o.ToAccessPointCreationInfoPtrOutputWithContext(context.Background())
}

func (o AccessPointCreationInfoOutput) ToAccessPointCreationInfoPtrOutputWithContext(ctx context.Context) AccessPointCreationInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AccessPointCreationInfo) *AccessPointCreationInfo {
		return &v
	}).(AccessPointCreationInfoPtrOutput)
}

// Specifies the POSIX group ID to apply to the “RootDirectory“. Accepts values from 0 to 2^32 (4294967295).
func (o AccessPointCreationInfoOutput) OwnerGid() pulumi.StringOutput {
	return o.ApplyT(func(v AccessPointCreationInfo) string { return v.OwnerGid }).(pulumi.StringOutput)
}

// Specifies the POSIX user ID to apply to the “RootDirectory“. Accepts values from 0 to 2^32 (4294967295).
func (o AccessPointCreationInfoOutput) OwnerUid() pulumi.StringOutput {
	return o.ApplyT(func(v AccessPointCreationInfo) string { return v.OwnerUid }).(pulumi.StringOutput)
}

// Specifies the POSIX permissions to apply to the “RootDirectory“, in the format of an octal number representing the file's mode bits.
func (o AccessPointCreationInfoOutput) Permissions() pulumi.StringOutput {
	return o.ApplyT(func(v AccessPointCreationInfo) string { return v.Permissions }).(pulumi.StringOutput)
}

type AccessPointCreationInfoPtrOutput struct{ *pulumi.OutputState }

func (AccessPointCreationInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessPointCreationInfo)(nil)).Elem()
}

func (o AccessPointCreationInfoPtrOutput) ToAccessPointCreationInfoPtrOutput() AccessPointCreationInfoPtrOutput {
	return o
}

func (o AccessPointCreationInfoPtrOutput) ToAccessPointCreationInfoPtrOutputWithContext(ctx context.Context) AccessPointCreationInfoPtrOutput {
	return o
}

func (o AccessPointCreationInfoPtrOutput) Elem() AccessPointCreationInfoOutput {
	return o.ApplyT(func(v *AccessPointCreationInfo) AccessPointCreationInfo {
		if v != nil {
			return *v
		}
		var ret AccessPointCreationInfo
		return ret
	}).(AccessPointCreationInfoOutput)
}

// Specifies the POSIX group ID to apply to the “RootDirectory“. Accepts values from 0 to 2^32 (4294967295).
func (o AccessPointCreationInfoPtrOutput) OwnerGid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessPointCreationInfo) *string {
		if v == nil {
			return nil
		}
		return &v.OwnerGid
	}).(pulumi.StringPtrOutput)
}

// Specifies the POSIX user ID to apply to the “RootDirectory“. Accepts values from 0 to 2^32 (4294967295).
func (o AccessPointCreationInfoPtrOutput) OwnerUid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessPointCreationInfo) *string {
		if v == nil {
			return nil
		}
		return &v.OwnerUid
	}).(pulumi.StringPtrOutput)
}

// Specifies the POSIX permissions to apply to the “RootDirectory“, in the format of an octal number representing the file's mode bits.
func (o AccessPointCreationInfoPtrOutput) Permissions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessPointCreationInfo) *string {
		if v == nil {
			return nil
		}
		return &v.Permissions
	}).(pulumi.StringPtrOutput)
}

// The full POSIX identity, including the user ID, group ID, and any secondary group IDs, on the access point that is used for all file system operations performed by NFS clients using the access point.
type AccessPointPosixUser struct {
	// The POSIX group ID used for all file system operations using this access point.
	Gid string `pulumi:"gid"`
	// Secondary POSIX group IDs used for all file system operations using this access point.
	SecondaryGids []string `pulumi:"secondaryGids"`
	// The POSIX user ID used for all file system operations using this access point.
	Uid string `pulumi:"uid"`
}

// AccessPointPosixUserInput is an input type that accepts AccessPointPosixUserArgs and AccessPointPosixUserOutput values.
// You can construct a concrete instance of `AccessPointPosixUserInput` via:
//
//	AccessPointPosixUserArgs{...}
type AccessPointPosixUserInput interface {
	pulumi.Input

	ToAccessPointPosixUserOutput() AccessPointPosixUserOutput
	ToAccessPointPosixUserOutputWithContext(context.Context) AccessPointPosixUserOutput
}

// The full POSIX identity, including the user ID, group ID, and any secondary group IDs, on the access point that is used for all file system operations performed by NFS clients using the access point.
type AccessPointPosixUserArgs struct {
	// The POSIX group ID used for all file system operations using this access point.
	Gid pulumi.StringInput `pulumi:"gid"`
	// Secondary POSIX group IDs used for all file system operations using this access point.
	SecondaryGids pulumi.StringArrayInput `pulumi:"secondaryGids"`
	// The POSIX user ID used for all file system operations using this access point.
	Uid pulumi.StringInput `pulumi:"uid"`
}

func (AccessPointPosixUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessPointPosixUser)(nil)).Elem()
}

func (i AccessPointPosixUserArgs) ToAccessPointPosixUserOutput() AccessPointPosixUserOutput {
	return i.ToAccessPointPosixUserOutputWithContext(context.Background())
}

func (i AccessPointPosixUserArgs) ToAccessPointPosixUserOutputWithContext(ctx context.Context) AccessPointPosixUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPointPosixUserOutput)
}

func (i AccessPointPosixUserArgs) ToAccessPointPosixUserPtrOutput() AccessPointPosixUserPtrOutput {
	return i.ToAccessPointPosixUserPtrOutputWithContext(context.Background())
}

func (i AccessPointPosixUserArgs) ToAccessPointPosixUserPtrOutputWithContext(ctx context.Context) AccessPointPosixUserPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPointPosixUserOutput).ToAccessPointPosixUserPtrOutputWithContext(ctx)
}

// AccessPointPosixUserPtrInput is an input type that accepts AccessPointPosixUserArgs, AccessPointPosixUserPtr and AccessPointPosixUserPtrOutput values.
// You can construct a concrete instance of `AccessPointPosixUserPtrInput` via:
//
//	        AccessPointPosixUserArgs{...}
//
//	or:
//
//	        nil
type AccessPointPosixUserPtrInput interface {
	pulumi.Input

	ToAccessPointPosixUserPtrOutput() AccessPointPosixUserPtrOutput
	ToAccessPointPosixUserPtrOutputWithContext(context.Context) AccessPointPosixUserPtrOutput
}

type accessPointPosixUserPtrType AccessPointPosixUserArgs

func AccessPointPosixUserPtr(v *AccessPointPosixUserArgs) AccessPointPosixUserPtrInput {
	return (*accessPointPosixUserPtrType)(v)
}

func (*accessPointPosixUserPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessPointPosixUser)(nil)).Elem()
}

func (i *accessPointPosixUserPtrType) ToAccessPointPosixUserPtrOutput() AccessPointPosixUserPtrOutput {
	return i.ToAccessPointPosixUserPtrOutputWithContext(context.Background())
}

func (i *accessPointPosixUserPtrType) ToAccessPointPosixUserPtrOutputWithContext(ctx context.Context) AccessPointPosixUserPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPointPosixUserPtrOutput)
}

// The full POSIX identity, including the user ID, group ID, and any secondary group IDs, on the access point that is used for all file system operations performed by NFS clients using the access point.
type AccessPointPosixUserOutput struct{ *pulumi.OutputState }

func (AccessPointPosixUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessPointPosixUser)(nil)).Elem()
}

func (o AccessPointPosixUserOutput) ToAccessPointPosixUserOutput() AccessPointPosixUserOutput {
	return o
}

func (o AccessPointPosixUserOutput) ToAccessPointPosixUserOutputWithContext(ctx context.Context) AccessPointPosixUserOutput {
	return o
}

func (o AccessPointPosixUserOutput) ToAccessPointPosixUserPtrOutput() AccessPointPosixUserPtrOutput {
	return o.ToAccessPointPosixUserPtrOutputWithContext(context.Background())
}

func (o AccessPointPosixUserOutput) ToAccessPointPosixUserPtrOutputWithContext(ctx context.Context) AccessPointPosixUserPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AccessPointPosixUser) *AccessPointPosixUser {
		return &v
	}).(AccessPointPosixUserPtrOutput)
}

// The POSIX group ID used for all file system operations using this access point.
func (o AccessPointPosixUserOutput) Gid() pulumi.StringOutput {
	return o.ApplyT(func(v AccessPointPosixUser) string { return v.Gid }).(pulumi.StringOutput)
}

// Secondary POSIX group IDs used for all file system operations using this access point.
func (o AccessPointPosixUserOutput) SecondaryGids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AccessPointPosixUser) []string { return v.SecondaryGids }).(pulumi.StringArrayOutput)
}

// The POSIX user ID used for all file system operations using this access point.
func (o AccessPointPosixUserOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v AccessPointPosixUser) string { return v.Uid }).(pulumi.StringOutput)
}

type AccessPointPosixUserPtrOutput struct{ *pulumi.OutputState }

func (AccessPointPosixUserPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessPointPosixUser)(nil)).Elem()
}

func (o AccessPointPosixUserPtrOutput) ToAccessPointPosixUserPtrOutput() AccessPointPosixUserPtrOutput {
	return o
}

func (o AccessPointPosixUserPtrOutput) ToAccessPointPosixUserPtrOutputWithContext(ctx context.Context) AccessPointPosixUserPtrOutput {
	return o
}

func (o AccessPointPosixUserPtrOutput) Elem() AccessPointPosixUserOutput {
	return o.ApplyT(func(v *AccessPointPosixUser) AccessPointPosixUser {
		if v != nil {
			return *v
		}
		var ret AccessPointPosixUser
		return ret
	}).(AccessPointPosixUserOutput)
}

// The POSIX group ID used for all file system operations using this access point.
func (o AccessPointPosixUserPtrOutput) Gid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessPointPosixUser) *string {
		if v == nil {
			return nil
		}
		return &v.Gid
	}).(pulumi.StringPtrOutput)
}

// Secondary POSIX group IDs used for all file system operations using this access point.
func (o AccessPointPosixUserPtrOutput) SecondaryGids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AccessPointPosixUser) []string {
		if v == nil {
			return nil
		}
		return v.SecondaryGids
	}).(pulumi.StringArrayOutput)
}

// The POSIX user ID used for all file system operations using this access point.
func (o AccessPointPosixUserPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessPointPosixUser) *string {
		if v == nil {
			return nil
		}
		return &v.Uid
	}).(pulumi.StringPtrOutput)
}

// Specifies the directory on the Amazon EFS file system that the access point provides access to. The access point exposes the specified file system path as the root directory of your file system to applications using the access point. NFS clients using the access point can only access data in the access point's “RootDirectory“ and its subdirectories.
type AccessPointRootDirectory struct {
	// (Optional) Specifies the POSIX IDs and permissions to apply to the access point's ``RootDirectory``. If the ``RootDirectory`` > ``Path`` specified does not exist, EFS creates the root directory using the ``CreationInfo`` settings when a client connects to an access point. When specifying the ``CreationInfo``, you must provide values for all properties.
	//   If you do not provide ``CreationInfo`` and the specified ``RootDirectory`` > ``Path`` does not exist, attempts to mount the file system using the access point will fail.
	CreationInfo *AccessPointCreationInfo `pulumi:"creationInfo"`
	// Specifies the path on the EFS file system to expose as the root directory to NFS clients using the access point to access the EFS file system. A path can have up to four subdirectories. If the specified path does not exist, you are required to provide the ``CreationInfo``.
	Path *string `pulumi:"path"`
}

// AccessPointRootDirectoryInput is an input type that accepts AccessPointRootDirectoryArgs and AccessPointRootDirectoryOutput values.
// You can construct a concrete instance of `AccessPointRootDirectoryInput` via:
//
//	AccessPointRootDirectoryArgs{...}
type AccessPointRootDirectoryInput interface {
	pulumi.Input

	ToAccessPointRootDirectoryOutput() AccessPointRootDirectoryOutput
	ToAccessPointRootDirectoryOutputWithContext(context.Context) AccessPointRootDirectoryOutput
}

// Specifies the directory on the Amazon EFS file system that the access point provides access to. The access point exposes the specified file system path as the root directory of your file system to applications using the access point. NFS clients using the access point can only access data in the access point's “RootDirectory“ and its subdirectories.
type AccessPointRootDirectoryArgs struct {
	// (Optional) Specifies the POSIX IDs and permissions to apply to the access point's ``RootDirectory``. If the ``RootDirectory`` > ``Path`` specified does not exist, EFS creates the root directory using the ``CreationInfo`` settings when a client connects to an access point. When specifying the ``CreationInfo``, you must provide values for all properties.
	//   If you do not provide ``CreationInfo`` and the specified ``RootDirectory`` > ``Path`` does not exist, attempts to mount the file system using the access point will fail.
	CreationInfo AccessPointCreationInfoPtrInput `pulumi:"creationInfo"`
	// Specifies the path on the EFS file system to expose as the root directory to NFS clients using the access point to access the EFS file system. A path can have up to four subdirectories. If the specified path does not exist, you are required to provide the ``CreationInfo``.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (AccessPointRootDirectoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessPointRootDirectory)(nil)).Elem()
}

func (i AccessPointRootDirectoryArgs) ToAccessPointRootDirectoryOutput() AccessPointRootDirectoryOutput {
	return i.ToAccessPointRootDirectoryOutputWithContext(context.Background())
}

func (i AccessPointRootDirectoryArgs) ToAccessPointRootDirectoryOutputWithContext(ctx context.Context) AccessPointRootDirectoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPointRootDirectoryOutput)
}

func (i AccessPointRootDirectoryArgs) ToAccessPointRootDirectoryPtrOutput() AccessPointRootDirectoryPtrOutput {
	return i.ToAccessPointRootDirectoryPtrOutputWithContext(context.Background())
}

func (i AccessPointRootDirectoryArgs) ToAccessPointRootDirectoryPtrOutputWithContext(ctx context.Context) AccessPointRootDirectoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPointRootDirectoryOutput).ToAccessPointRootDirectoryPtrOutputWithContext(ctx)
}

// AccessPointRootDirectoryPtrInput is an input type that accepts AccessPointRootDirectoryArgs, AccessPointRootDirectoryPtr and AccessPointRootDirectoryPtrOutput values.
// You can construct a concrete instance of `AccessPointRootDirectoryPtrInput` via:
//
//	        AccessPointRootDirectoryArgs{...}
//
//	or:
//
//	        nil
type AccessPointRootDirectoryPtrInput interface {
	pulumi.Input

	ToAccessPointRootDirectoryPtrOutput() AccessPointRootDirectoryPtrOutput
	ToAccessPointRootDirectoryPtrOutputWithContext(context.Context) AccessPointRootDirectoryPtrOutput
}

type accessPointRootDirectoryPtrType AccessPointRootDirectoryArgs

func AccessPointRootDirectoryPtr(v *AccessPointRootDirectoryArgs) AccessPointRootDirectoryPtrInput {
	return (*accessPointRootDirectoryPtrType)(v)
}

func (*accessPointRootDirectoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessPointRootDirectory)(nil)).Elem()
}

func (i *accessPointRootDirectoryPtrType) ToAccessPointRootDirectoryPtrOutput() AccessPointRootDirectoryPtrOutput {
	return i.ToAccessPointRootDirectoryPtrOutputWithContext(context.Background())
}

func (i *accessPointRootDirectoryPtrType) ToAccessPointRootDirectoryPtrOutputWithContext(ctx context.Context) AccessPointRootDirectoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPointRootDirectoryPtrOutput)
}

// Specifies the directory on the Amazon EFS file system that the access point provides access to. The access point exposes the specified file system path as the root directory of your file system to applications using the access point. NFS clients using the access point can only access data in the access point's “RootDirectory“ and its subdirectories.
type AccessPointRootDirectoryOutput struct{ *pulumi.OutputState }

func (AccessPointRootDirectoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessPointRootDirectory)(nil)).Elem()
}

func (o AccessPointRootDirectoryOutput) ToAccessPointRootDirectoryOutput() AccessPointRootDirectoryOutput {
	return o
}

func (o AccessPointRootDirectoryOutput) ToAccessPointRootDirectoryOutputWithContext(ctx context.Context) AccessPointRootDirectoryOutput {
	return o
}

func (o AccessPointRootDirectoryOutput) ToAccessPointRootDirectoryPtrOutput() AccessPointRootDirectoryPtrOutput {
	return o.ToAccessPointRootDirectoryPtrOutputWithContext(context.Background())
}

func (o AccessPointRootDirectoryOutput) ToAccessPointRootDirectoryPtrOutputWithContext(ctx context.Context) AccessPointRootDirectoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AccessPointRootDirectory) *AccessPointRootDirectory {
		return &v
	}).(AccessPointRootDirectoryPtrOutput)
}

// (Optional) Specifies the POSIX IDs and permissions to apply to the access point's “RootDirectory“. If the “RootDirectory“ > “Path“ specified does not exist, EFS creates the root directory using the “CreationInfo“ settings when a client connects to an access point. When specifying the “CreationInfo“, you must provide values for all properties.
//
//	If you do not provide ``CreationInfo`` and the specified ``RootDirectory`` > ``Path`` does not exist, attempts to mount the file system using the access point will fail.
func (o AccessPointRootDirectoryOutput) CreationInfo() AccessPointCreationInfoPtrOutput {
	return o.ApplyT(func(v AccessPointRootDirectory) *AccessPointCreationInfo { return v.CreationInfo }).(AccessPointCreationInfoPtrOutput)
}

// Specifies the path on the EFS file system to expose as the root directory to NFS clients using the access point to access the EFS file system. A path can have up to four subdirectories. If the specified path does not exist, you are required to provide the “CreationInfo“.
func (o AccessPointRootDirectoryOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessPointRootDirectory) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type AccessPointRootDirectoryPtrOutput struct{ *pulumi.OutputState }

func (AccessPointRootDirectoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessPointRootDirectory)(nil)).Elem()
}

func (o AccessPointRootDirectoryPtrOutput) ToAccessPointRootDirectoryPtrOutput() AccessPointRootDirectoryPtrOutput {
	return o
}

func (o AccessPointRootDirectoryPtrOutput) ToAccessPointRootDirectoryPtrOutputWithContext(ctx context.Context) AccessPointRootDirectoryPtrOutput {
	return o
}

func (o AccessPointRootDirectoryPtrOutput) Elem() AccessPointRootDirectoryOutput {
	return o.ApplyT(func(v *AccessPointRootDirectory) AccessPointRootDirectory {
		if v != nil {
			return *v
		}
		var ret AccessPointRootDirectory
		return ret
	}).(AccessPointRootDirectoryOutput)
}

// (Optional) Specifies the POSIX IDs and permissions to apply to the access point's “RootDirectory“. If the “RootDirectory“ > “Path“ specified does not exist, EFS creates the root directory using the “CreationInfo“ settings when a client connects to an access point. When specifying the “CreationInfo“, you must provide values for all properties.
//
//	If you do not provide ``CreationInfo`` and the specified ``RootDirectory`` > ``Path`` does not exist, attempts to mount the file system using the access point will fail.
func (o AccessPointRootDirectoryPtrOutput) CreationInfo() AccessPointCreationInfoPtrOutput {
	return o.ApplyT(func(v *AccessPointRootDirectory) *AccessPointCreationInfo {
		if v == nil {
			return nil
		}
		return v.CreationInfo
	}).(AccessPointCreationInfoPtrOutput)
}

// Specifies the path on the EFS file system to expose as the root directory to NFS clients using the access point to access the EFS file system. A path can have up to four subdirectories. If the specified path does not exist, you are required to provide the “CreationInfo“.
func (o AccessPointRootDirectoryPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessPointRootDirectory) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// A tag is a key-value pair attached to a file system. Allowed characters in the “Key“ and “Value“ properties are letters, white space, and numbers that can be represented in UTF-8, and the following characters:“+ - = . _ : /“
type AccessPointTag struct {
	// The tag key (String). The key can't start with ``aws:``.
	Key *string `pulumi:"key"`
	// The value of the tag key.
	Value *string `pulumi:"value"`
}

// The backup policy turns automatic backups for the file system on or off.
type FileSystemBackupPolicy struct {
	// Set the backup policy status for the file system.
	//   +   *ENABLED* - Turns automatic backups on for the file system.
	//   +   *DISABLED* - Turns automatic backups off for the file system.
	Status string `pulumi:"status"`
}

// FileSystemBackupPolicyInput is an input type that accepts FileSystemBackupPolicyArgs and FileSystemBackupPolicyOutput values.
// You can construct a concrete instance of `FileSystemBackupPolicyInput` via:
//
//	FileSystemBackupPolicyArgs{...}
type FileSystemBackupPolicyInput interface {
	pulumi.Input

	ToFileSystemBackupPolicyOutput() FileSystemBackupPolicyOutput
	ToFileSystemBackupPolicyOutputWithContext(context.Context) FileSystemBackupPolicyOutput
}

// The backup policy turns automatic backups for the file system on or off.
type FileSystemBackupPolicyArgs struct {
	// Set the backup policy status for the file system.
	//   +   *ENABLED* - Turns automatic backups on for the file system.
	//   +   *DISABLED* - Turns automatic backups off for the file system.
	Status pulumi.StringInput `pulumi:"status"`
}

func (FileSystemBackupPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSystemBackupPolicy)(nil)).Elem()
}

func (i FileSystemBackupPolicyArgs) ToFileSystemBackupPolicyOutput() FileSystemBackupPolicyOutput {
	return i.ToFileSystemBackupPolicyOutputWithContext(context.Background())
}

func (i FileSystemBackupPolicyArgs) ToFileSystemBackupPolicyOutputWithContext(ctx context.Context) FileSystemBackupPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemBackupPolicyOutput)
}

func (i FileSystemBackupPolicyArgs) ToFileSystemBackupPolicyPtrOutput() FileSystemBackupPolicyPtrOutput {
	return i.ToFileSystemBackupPolicyPtrOutputWithContext(context.Background())
}

func (i FileSystemBackupPolicyArgs) ToFileSystemBackupPolicyPtrOutputWithContext(ctx context.Context) FileSystemBackupPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemBackupPolicyOutput).ToFileSystemBackupPolicyPtrOutputWithContext(ctx)
}

// FileSystemBackupPolicyPtrInput is an input type that accepts FileSystemBackupPolicyArgs, FileSystemBackupPolicyPtr and FileSystemBackupPolicyPtrOutput values.
// You can construct a concrete instance of `FileSystemBackupPolicyPtrInput` via:
//
//	        FileSystemBackupPolicyArgs{...}
//
//	or:
//
//	        nil
type FileSystemBackupPolicyPtrInput interface {
	pulumi.Input

	ToFileSystemBackupPolicyPtrOutput() FileSystemBackupPolicyPtrOutput
	ToFileSystemBackupPolicyPtrOutputWithContext(context.Context) FileSystemBackupPolicyPtrOutput
}

type fileSystemBackupPolicyPtrType FileSystemBackupPolicyArgs

func FileSystemBackupPolicyPtr(v *FileSystemBackupPolicyArgs) FileSystemBackupPolicyPtrInput {
	return (*fileSystemBackupPolicyPtrType)(v)
}

func (*fileSystemBackupPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FileSystemBackupPolicy)(nil)).Elem()
}

func (i *fileSystemBackupPolicyPtrType) ToFileSystemBackupPolicyPtrOutput() FileSystemBackupPolicyPtrOutput {
	return i.ToFileSystemBackupPolicyPtrOutputWithContext(context.Background())
}

func (i *fileSystemBackupPolicyPtrType) ToFileSystemBackupPolicyPtrOutputWithContext(ctx context.Context) FileSystemBackupPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemBackupPolicyPtrOutput)
}

// The backup policy turns automatic backups for the file system on or off.
type FileSystemBackupPolicyOutput struct{ *pulumi.OutputState }

func (FileSystemBackupPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSystemBackupPolicy)(nil)).Elem()
}

func (o FileSystemBackupPolicyOutput) ToFileSystemBackupPolicyOutput() FileSystemBackupPolicyOutput {
	return o
}

func (o FileSystemBackupPolicyOutput) ToFileSystemBackupPolicyOutputWithContext(ctx context.Context) FileSystemBackupPolicyOutput {
	return o
}

func (o FileSystemBackupPolicyOutput) ToFileSystemBackupPolicyPtrOutput() FileSystemBackupPolicyPtrOutput {
	return o.ToFileSystemBackupPolicyPtrOutputWithContext(context.Background())
}

func (o FileSystemBackupPolicyOutput) ToFileSystemBackupPolicyPtrOutputWithContext(ctx context.Context) FileSystemBackupPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FileSystemBackupPolicy) *FileSystemBackupPolicy {
		return &v
	}).(FileSystemBackupPolicyPtrOutput)
}

// Set the backup policy status for the file system.
//   - *ENABLED* - Turns automatic backups on for the file system.
//   - *DISABLED* - Turns automatic backups off for the file system.
func (o FileSystemBackupPolicyOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v FileSystemBackupPolicy) string { return v.Status }).(pulumi.StringOutput)
}

type FileSystemBackupPolicyPtrOutput struct{ *pulumi.OutputState }

func (FileSystemBackupPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileSystemBackupPolicy)(nil)).Elem()
}

func (o FileSystemBackupPolicyPtrOutput) ToFileSystemBackupPolicyPtrOutput() FileSystemBackupPolicyPtrOutput {
	return o
}

func (o FileSystemBackupPolicyPtrOutput) ToFileSystemBackupPolicyPtrOutputWithContext(ctx context.Context) FileSystemBackupPolicyPtrOutput {
	return o
}

func (o FileSystemBackupPolicyPtrOutput) Elem() FileSystemBackupPolicyOutput {
	return o.ApplyT(func(v *FileSystemBackupPolicy) FileSystemBackupPolicy {
		if v != nil {
			return *v
		}
		var ret FileSystemBackupPolicy
		return ret
	}).(FileSystemBackupPolicyOutput)
}

// Set the backup policy status for the file system.
//   - *ENABLED* - Turns automatic backups on for the file system.
//   - *DISABLED* - Turns automatic backups off for the file system.
func (o FileSystemBackupPolicyPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSystemBackupPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.StringPtrOutput)
}

// A tag is a key-value pair attached to a file system. Allowed characters in the “Key“ and “Value“ properties are letters, white space, and numbers that can be represented in UTF-8, and the following characters:“+ - = . _ : /“
type FileSystemElasticFileSystemTag struct {
	// The tag key (String). The key can't start with ``aws:``.
	Key string `pulumi:"key"`
	// The value of the tag key.
	Value string `pulumi:"value"`
}

// Describes a policy used by Lifecycle management that specifies when to transition files into and out of the EFS storage classes. For more information, see [Managing file system storage](https://docs.aws.amazon.com/efs/latest/ug/lifecycle-management-efs.html).
//   - Each “LifecyclePolicy“ object can have only a single transition. This means that in a request body, “LifecyclePolicies“ must be structured as an array of “LifecyclePolicy“ objects, one object for each transition, “TransitionToIA“, “TransitionToArchive“, “TransitionToPrimaryStorageClass“.
//   - See the AWS::EFS::FileSystem examples for the correct “LifecyclePolicy“ structure. Do not use the syntax shown on this page.
type FileSystemLifecyclePolicy struct {
	// The number of days after files were last accessed in primary storage (the Standard storage class) at which to move them to Archive storage. Metadata operations such as listing the contents of a directory don't count as file access events.
	TransitionToArchive *string `pulumi:"transitionToArchive"`
	// The number of days after files were last accessed in primary storage (the Standard storage class) at which to move them to Infrequent Access (IA) storage. Metadata operations such as listing the contents of a directory don't count as file access events.
	TransitionToIa *string `pulumi:"transitionToIa"`
	// Whether to move files back to primary (Standard) storage after they are accessed in IA or Archive storage. Metadata operations such as listing the contents of a directory don't count as file access events.
	TransitionToPrimaryStorageClass *string `pulumi:"transitionToPrimaryStorageClass"`
}

// FileSystemLifecyclePolicyInput is an input type that accepts FileSystemLifecyclePolicyArgs and FileSystemLifecyclePolicyOutput values.
// You can construct a concrete instance of `FileSystemLifecyclePolicyInput` via:
//
//	FileSystemLifecyclePolicyArgs{...}
type FileSystemLifecyclePolicyInput interface {
	pulumi.Input

	ToFileSystemLifecyclePolicyOutput() FileSystemLifecyclePolicyOutput
	ToFileSystemLifecyclePolicyOutputWithContext(context.Context) FileSystemLifecyclePolicyOutput
}

// Describes a policy used by Lifecycle management that specifies when to transition files into and out of the EFS storage classes. For more information, see [Managing file system storage](https://docs.aws.amazon.com/efs/latest/ug/lifecycle-management-efs.html).
//   - Each “LifecyclePolicy“ object can have only a single transition. This means that in a request body, “LifecyclePolicies“ must be structured as an array of “LifecyclePolicy“ objects, one object for each transition, “TransitionToIA“, “TransitionToArchive“, “TransitionToPrimaryStorageClass“.
//   - See the AWS::EFS::FileSystem examples for the correct “LifecyclePolicy“ structure. Do not use the syntax shown on this page.
type FileSystemLifecyclePolicyArgs struct {
	// The number of days after files were last accessed in primary storage (the Standard storage class) at which to move them to Archive storage. Metadata operations such as listing the contents of a directory don't count as file access events.
	TransitionToArchive pulumi.StringPtrInput `pulumi:"transitionToArchive"`
	// The number of days after files were last accessed in primary storage (the Standard storage class) at which to move them to Infrequent Access (IA) storage. Metadata operations such as listing the contents of a directory don't count as file access events.
	TransitionToIa pulumi.StringPtrInput `pulumi:"transitionToIa"`
	// Whether to move files back to primary (Standard) storage after they are accessed in IA or Archive storage. Metadata operations such as listing the contents of a directory don't count as file access events.
	TransitionToPrimaryStorageClass pulumi.StringPtrInput `pulumi:"transitionToPrimaryStorageClass"`
}

func (FileSystemLifecyclePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSystemLifecyclePolicy)(nil)).Elem()
}

func (i FileSystemLifecyclePolicyArgs) ToFileSystemLifecyclePolicyOutput() FileSystemLifecyclePolicyOutput {
	return i.ToFileSystemLifecyclePolicyOutputWithContext(context.Background())
}

func (i FileSystemLifecyclePolicyArgs) ToFileSystemLifecyclePolicyOutputWithContext(ctx context.Context) FileSystemLifecyclePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemLifecyclePolicyOutput)
}

// FileSystemLifecyclePolicyArrayInput is an input type that accepts FileSystemLifecyclePolicyArray and FileSystemLifecyclePolicyArrayOutput values.
// You can construct a concrete instance of `FileSystemLifecyclePolicyArrayInput` via:
//
//	FileSystemLifecyclePolicyArray{ FileSystemLifecyclePolicyArgs{...} }
type FileSystemLifecyclePolicyArrayInput interface {
	pulumi.Input

	ToFileSystemLifecyclePolicyArrayOutput() FileSystemLifecyclePolicyArrayOutput
	ToFileSystemLifecyclePolicyArrayOutputWithContext(context.Context) FileSystemLifecyclePolicyArrayOutput
}

type FileSystemLifecyclePolicyArray []FileSystemLifecyclePolicyInput

func (FileSystemLifecyclePolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FileSystemLifecyclePolicy)(nil)).Elem()
}

func (i FileSystemLifecyclePolicyArray) ToFileSystemLifecyclePolicyArrayOutput() FileSystemLifecyclePolicyArrayOutput {
	return i.ToFileSystemLifecyclePolicyArrayOutputWithContext(context.Background())
}

func (i FileSystemLifecyclePolicyArray) ToFileSystemLifecyclePolicyArrayOutputWithContext(ctx context.Context) FileSystemLifecyclePolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemLifecyclePolicyArrayOutput)
}

// Describes a policy used by Lifecycle management that specifies when to transition files into and out of the EFS storage classes. For more information, see [Managing file system storage](https://docs.aws.amazon.com/efs/latest/ug/lifecycle-management-efs.html).
//   - Each “LifecyclePolicy“ object can have only a single transition. This means that in a request body, “LifecyclePolicies“ must be structured as an array of “LifecyclePolicy“ objects, one object for each transition, “TransitionToIA“, “TransitionToArchive“, “TransitionToPrimaryStorageClass“.
//   - See the AWS::EFS::FileSystem examples for the correct “LifecyclePolicy“ structure. Do not use the syntax shown on this page.
type FileSystemLifecyclePolicyOutput struct{ *pulumi.OutputState }

func (FileSystemLifecyclePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSystemLifecyclePolicy)(nil)).Elem()
}

func (o FileSystemLifecyclePolicyOutput) ToFileSystemLifecyclePolicyOutput() FileSystemLifecyclePolicyOutput {
	return o
}

func (o FileSystemLifecyclePolicyOutput) ToFileSystemLifecyclePolicyOutputWithContext(ctx context.Context) FileSystemLifecyclePolicyOutput {
	return o
}

// The number of days after files were last accessed in primary storage (the Standard storage class) at which to move them to Archive storage. Metadata operations such as listing the contents of a directory don't count as file access events.
func (o FileSystemLifecyclePolicyOutput) TransitionToArchive() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileSystemLifecyclePolicy) *string { return v.TransitionToArchive }).(pulumi.StringPtrOutput)
}

// The number of days after files were last accessed in primary storage (the Standard storage class) at which to move them to Infrequent Access (IA) storage. Metadata operations such as listing the contents of a directory don't count as file access events.
func (o FileSystemLifecyclePolicyOutput) TransitionToIa() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileSystemLifecyclePolicy) *string { return v.TransitionToIa }).(pulumi.StringPtrOutput)
}

// Whether to move files back to primary (Standard) storage after they are accessed in IA or Archive storage. Metadata operations such as listing the contents of a directory don't count as file access events.
func (o FileSystemLifecyclePolicyOutput) TransitionToPrimaryStorageClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileSystemLifecyclePolicy) *string { return v.TransitionToPrimaryStorageClass }).(pulumi.StringPtrOutput)
}

type FileSystemLifecyclePolicyArrayOutput struct{ *pulumi.OutputState }

func (FileSystemLifecyclePolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FileSystemLifecyclePolicy)(nil)).Elem()
}

func (o FileSystemLifecyclePolicyArrayOutput) ToFileSystemLifecyclePolicyArrayOutput() FileSystemLifecyclePolicyArrayOutput {
	return o
}

func (o FileSystemLifecyclePolicyArrayOutput) ToFileSystemLifecyclePolicyArrayOutputWithContext(ctx context.Context) FileSystemLifecyclePolicyArrayOutput {
	return o
}

func (o FileSystemLifecyclePolicyArrayOutput) Index(i pulumi.IntInput) FileSystemLifecyclePolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FileSystemLifecyclePolicy {
		return vs[0].([]FileSystemLifecyclePolicy)[vs[1].(int)]
	}).(FileSystemLifecyclePolicyOutput)
}

// Describes the protection on the file system.
type FileSystemProtection struct {
	// The status of the file system's replication overwrite protection.
	//   +   ``ENABLED`` – The file system cannot be used as the destination file system in a replication configuration. The file system is writeable. Replication overwrite protection is ``ENABLED`` by default.
	//   +   ``DISABLED`` – The file system can be used as the destination file system in a replication configuration. The file system is read-only and can only be modified by EFS replication.
	//   +   ``REPLICATING`` – The file system is being used as the destination file system in a replication configuration. The file system is read-only and is only modified only by EFS replication.
	//
	//  If the replication configuration is deleted, the file system's replication overwrite protection is re-enabled, the file system becomes writeable.
	ReplicationOverwriteProtection *FileSystemProtectionReplicationOverwriteProtection `pulumi:"replicationOverwriteProtection"`
}

// FileSystemProtectionInput is an input type that accepts FileSystemProtectionArgs and FileSystemProtectionOutput values.
// You can construct a concrete instance of `FileSystemProtectionInput` via:
//
//	FileSystemProtectionArgs{...}
type FileSystemProtectionInput interface {
	pulumi.Input

	ToFileSystemProtectionOutput() FileSystemProtectionOutput
	ToFileSystemProtectionOutputWithContext(context.Context) FileSystemProtectionOutput
}

// Describes the protection on the file system.
type FileSystemProtectionArgs struct {
	// The status of the file system's replication overwrite protection.
	//   +   ``ENABLED`` – The file system cannot be used as the destination file system in a replication configuration. The file system is writeable. Replication overwrite protection is ``ENABLED`` by default.
	//   +   ``DISABLED`` – The file system can be used as the destination file system in a replication configuration. The file system is read-only and can only be modified by EFS replication.
	//   +   ``REPLICATING`` – The file system is being used as the destination file system in a replication configuration. The file system is read-only and is only modified only by EFS replication.
	//
	//  If the replication configuration is deleted, the file system's replication overwrite protection is re-enabled, the file system becomes writeable.
	ReplicationOverwriteProtection FileSystemProtectionReplicationOverwriteProtectionPtrInput `pulumi:"replicationOverwriteProtection"`
}

func (FileSystemProtectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSystemProtection)(nil)).Elem()
}

func (i FileSystemProtectionArgs) ToFileSystemProtectionOutput() FileSystemProtectionOutput {
	return i.ToFileSystemProtectionOutputWithContext(context.Background())
}

func (i FileSystemProtectionArgs) ToFileSystemProtectionOutputWithContext(ctx context.Context) FileSystemProtectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemProtectionOutput)
}

func (i FileSystemProtectionArgs) ToFileSystemProtectionPtrOutput() FileSystemProtectionPtrOutput {
	return i.ToFileSystemProtectionPtrOutputWithContext(context.Background())
}

func (i FileSystemProtectionArgs) ToFileSystemProtectionPtrOutputWithContext(ctx context.Context) FileSystemProtectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemProtectionOutput).ToFileSystemProtectionPtrOutputWithContext(ctx)
}

// FileSystemProtectionPtrInput is an input type that accepts FileSystemProtectionArgs, FileSystemProtectionPtr and FileSystemProtectionPtrOutput values.
// You can construct a concrete instance of `FileSystemProtectionPtrInput` via:
//
//	        FileSystemProtectionArgs{...}
//
//	or:
//
//	        nil
type FileSystemProtectionPtrInput interface {
	pulumi.Input

	ToFileSystemProtectionPtrOutput() FileSystemProtectionPtrOutput
	ToFileSystemProtectionPtrOutputWithContext(context.Context) FileSystemProtectionPtrOutput
}

type fileSystemProtectionPtrType FileSystemProtectionArgs

func FileSystemProtectionPtr(v *FileSystemProtectionArgs) FileSystemProtectionPtrInput {
	return (*fileSystemProtectionPtrType)(v)
}

func (*fileSystemProtectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FileSystemProtection)(nil)).Elem()
}

func (i *fileSystemProtectionPtrType) ToFileSystemProtectionPtrOutput() FileSystemProtectionPtrOutput {
	return i.ToFileSystemProtectionPtrOutputWithContext(context.Background())
}

func (i *fileSystemProtectionPtrType) ToFileSystemProtectionPtrOutputWithContext(ctx context.Context) FileSystemProtectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemProtectionPtrOutput)
}

// Describes the protection on the file system.
type FileSystemProtectionOutput struct{ *pulumi.OutputState }

func (FileSystemProtectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSystemProtection)(nil)).Elem()
}

func (o FileSystemProtectionOutput) ToFileSystemProtectionOutput() FileSystemProtectionOutput {
	return o
}

func (o FileSystemProtectionOutput) ToFileSystemProtectionOutputWithContext(ctx context.Context) FileSystemProtectionOutput {
	return o
}

func (o FileSystemProtectionOutput) ToFileSystemProtectionPtrOutput() FileSystemProtectionPtrOutput {
	return o.ToFileSystemProtectionPtrOutputWithContext(context.Background())
}

func (o FileSystemProtectionOutput) ToFileSystemProtectionPtrOutputWithContext(ctx context.Context) FileSystemProtectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FileSystemProtection) *FileSystemProtection {
		return &v
	}).(FileSystemProtectionPtrOutput)
}

// The status of the file system's replication overwrite protection.
//
//   - “ENABLED“ – The file system cannot be used as the destination file system in a replication configuration. The file system is writeable. Replication overwrite protection is “ENABLED“ by default.
//
//   - “DISABLED“ – The file system can be used as the destination file system in a replication configuration. The file system is read-only and can only be modified by EFS replication.
//
//   - “REPLICATING“ – The file system is being used as the destination file system in a replication configuration. The file system is read-only and is only modified only by EFS replication.
//
//     If the replication configuration is deleted, the file system's replication overwrite protection is re-enabled, the file system becomes writeable.
func (o FileSystemProtectionOutput) ReplicationOverwriteProtection() FileSystemProtectionReplicationOverwriteProtectionPtrOutput {
	return o.ApplyT(func(v FileSystemProtection) *FileSystemProtectionReplicationOverwriteProtection {
		return v.ReplicationOverwriteProtection
	}).(FileSystemProtectionReplicationOverwriteProtectionPtrOutput)
}

type FileSystemProtectionPtrOutput struct{ *pulumi.OutputState }

func (FileSystemProtectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileSystemProtection)(nil)).Elem()
}

func (o FileSystemProtectionPtrOutput) ToFileSystemProtectionPtrOutput() FileSystemProtectionPtrOutput {
	return o
}

func (o FileSystemProtectionPtrOutput) ToFileSystemProtectionPtrOutputWithContext(ctx context.Context) FileSystemProtectionPtrOutput {
	return o
}

func (o FileSystemProtectionPtrOutput) Elem() FileSystemProtectionOutput {
	return o.ApplyT(func(v *FileSystemProtection) FileSystemProtection {
		if v != nil {
			return *v
		}
		var ret FileSystemProtection
		return ret
	}).(FileSystemProtectionOutput)
}

// The status of the file system's replication overwrite protection.
//
//   - “ENABLED“ – The file system cannot be used as the destination file system in a replication configuration. The file system is writeable. Replication overwrite protection is “ENABLED“ by default.
//
//   - “DISABLED“ – The file system can be used as the destination file system in a replication configuration. The file system is read-only and can only be modified by EFS replication.
//
//   - “REPLICATING“ – The file system is being used as the destination file system in a replication configuration. The file system is read-only and is only modified only by EFS replication.
//
//     If the replication configuration is deleted, the file system's replication overwrite protection is re-enabled, the file system becomes writeable.
func (o FileSystemProtectionPtrOutput) ReplicationOverwriteProtection() FileSystemProtectionReplicationOverwriteProtectionPtrOutput {
	return o.ApplyT(func(v *FileSystemProtection) *FileSystemProtectionReplicationOverwriteProtection {
		if v == nil {
			return nil
		}
		return v.ReplicationOverwriteProtection
	}).(FileSystemProtectionReplicationOverwriteProtectionPtrOutput)
}

// Describes the replication configuration for a specific file system.
type FileSystemReplicationConfiguration struct {
	// An array of destination objects. Only one destination object is supported.
	Destinations []FileSystemReplicationDestination `pulumi:"destinations"`
}

// FileSystemReplicationConfigurationInput is an input type that accepts FileSystemReplicationConfigurationArgs and FileSystemReplicationConfigurationOutput values.
// You can construct a concrete instance of `FileSystemReplicationConfigurationInput` via:
//
//	FileSystemReplicationConfigurationArgs{...}
type FileSystemReplicationConfigurationInput interface {
	pulumi.Input

	ToFileSystemReplicationConfigurationOutput() FileSystemReplicationConfigurationOutput
	ToFileSystemReplicationConfigurationOutputWithContext(context.Context) FileSystemReplicationConfigurationOutput
}

// Describes the replication configuration for a specific file system.
type FileSystemReplicationConfigurationArgs struct {
	// An array of destination objects. Only one destination object is supported.
	Destinations FileSystemReplicationDestinationArrayInput `pulumi:"destinations"`
}

func (FileSystemReplicationConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSystemReplicationConfiguration)(nil)).Elem()
}

func (i FileSystemReplicationConfigurationArgs) ToFileSystemReplicationConfigurationOutput() FileSystemReplicationConfigurationOutput {
	return i.ToFileSystemReplicationConfigurationOutputWithContext(context.Background())
}

func (i FileSystemReplicationConfigurationArgs) ToFileSystemReplicationConfigurationOutputWithContext(ctx context.Context) FileSystemReplicationConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemReplicationConfigurationOutput)
}

func (i FileSystemReplicationConfigurationArgs) ToFileSystemReplicationConfigurationPtrOutput() FileSystemReplicationConfigurationPtrOutput {
	return i.ToFileSystemReplicationConfigurationPtrOutputWithContext(context.Background())
}

func (i FileSystemReplicationConfigurationArgs) ToFileSystemReplicationConfigurationPtrOutputWithContext(ctx context.Context) FileSystemReplicationConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemReplicationConfigurationOutput).ToFileSystemReplicationConfigurationPtrOutputWithContext(ctx)
}

// FileSystemReplicationConfigurationPtrInput is an input type that accepts FileSystemReplicationConfigurationArgs, FileSystemReplicationConfigurationPtr and FileSystemReplicationConfigurationPtrOutput values.
// You can construct a concrete instance of `FileSystemReplicationConfigurationPtrInput` via:
//
//	        FileSystemReplicationConfigurationArgs{...}
//
//	or:
//
//	        nil
type FileSystemReplicationConfigurationPtrInput interface {
	pulumi.Input

	ToFileSystemReplicationConfigurationPtrOutput() FileSystemReplicationConfigurationPtrOutput
	ToFileSystemReplicationConfigurationPtrOutputWithContext(context.Context) FileSystemReplicationConfigurationPtrOutput
}

type fileSystemReplicationConfigurationPtrType FileSystemReplicationConfigurationArgs

func FileSystemReplicationConfigurationPtr(v *FileSystemReplicationConfigurationArgs) FileSystemReplicationConfigurationPtrInput {
	return (*fileSystemReplicationConfigurationPtrType)(v)
}

func (*fileSystemReplicationConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FileSystemReplicationConfiguration)(nil)).Elem()
}

func (i *fileSystemReplicationConfigurationPtrType) ToFileSystemReplicationConfigurationPtrOutput() FileSystemReplicationConfigurationPtrOutput {
	return i.ToFileSystemReplicationConfigurationPtrOutputWithContext(context.Background())
}

func (i *fileSystemReplicationConfigurationPtrType) ToFileSystemReplicationConfigurationPtrOutputWithContext(ctx context.Context) FileSystemReplicationConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemReplicationConfigurationPtrOutput)
}

// Describes the replication configuration for a specific file system.
type FileSystemReplicationConfigurationOutput struct{ *pulumi.OutputState }

func (FileSystemReplicationConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSystemReplicationConfiguration)(nil)).Elem()
}

func (o FileSystemReplicationConfigurationOutput) ToFileSystemReplicationConfigurationOutput() FileSystemReplicationConfigurationOutput {
	return o
}

func (o FileSystemReplicationConfigurationOutput) ToFileSystemReplicationConfigurationOutputWithContext(ctx context.Context) FileSystemReplicationConfigurationOutput {
	return o
}

func (o FileSystemReplicationConfigurationOutput) ToFileSystemReplicationConfigurationPtrOutput() FileSystemReplicationConfigurationPtrOutput {
	return o.ToFileSystemReplicationConfigurationPtrOutputWithContext(context.Background())
}

func (o FileSystemReplicationConfigurationOutput) ToFileSystemReplicationConfigurationPtrOutputWithContext(ctx context.Context) FileSystemReplicationConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FileSystemReplicationConfiguration) *FileSystemReplicationConfiguration {
		return &v
	}).(FileSystemReplicationConfigurationPtrOutput)
}

// An array of destination objects. Only one destination object is supported.
func (o FileSystemReplicationConfigurationOutput) Destinations() FileSystemReplicationDestinationArrayOutput {
	return o.ApplyT(func(v FileSystemReplicationConfiguration) []FileSystemReplicationDestination { return v.Destinations }).(FileSystemReplicationDestinationArrayOutput)
}

type FileSystemReplicationConfigurationPtrOutput struct{ *pulumi.OutputState }

func (FileSystemReplicationConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileSystemReplicationConfiguration)(nil)).Elem()
}

func (o FileSystemReplicationConfigurationPtrOutput) ToFileSystemReplicationConfigurationPtrOutput() FileSystemReplicationConfigurationPtrOutput {
	return o
}

func (o FileSystemReplicationConfigurationPtrOutput) ToFileSystemReplicationConfigurationPtrOutputWithContext(ctx context.Context) FileSystemReplicationConfigurationPtrOutput {
	return o
}

func (o FileSystemReplicationConfigurationPtrOutput) Elem() FileSystemReplicationConfigurationOutput {
	return o.ApplyT(func(v *FileSystemReplicationConfiguration) FileSystemReplicationConfiguration {
		if v != nil {
			return *v
		}
		var ret FileSystemReplicationConfiguration
		return ret
	}).(FileSystemReplicationConfigurationOutput)
}

// An array of destination objects. Only one destination object is supported.
func (o FileSystemReplicationConfigurationPtrOutput) Destinations() FileSystemReplicationDestinationArrayOutput {
	return o.ApplyT(func(v *FileSystemReplicationConfiguration) []FileSystemReplicationDestination {
		if v == nil {
			return nil
		}
		return v.Destinations
	}).(FileSystemReplicationDestinationArrayOutput)
}

// Describes the destination file system in the replication configuration.
type FileSystemReplicationDestination struct {
	// The AWS For One Zone file systems, the replication configuration must specify the Availability Zone in which the destination file system is located.
	//  Use the format ``us-east-1a`` to specify the Availability Zone. For more information about One Zone file systems, see [EFS file system types](https://docs.aws.amazon.com/efs/latest/ug/storage-classes.html) in the *Amazon EFS User Guide*.
	//   One Zone file system type is not available in all Availability Zones in AWS-Regions where Amazon EFS is available.
	AvailabilityZoneName *string `pulumi:"availabilityZoneName"`
	// The ID of the destination Amazon EFS file system.
	FileSystemId *string `pulumi:"fileSystemId"`
	// The ID of an kms-key-long used to protect the encrypted file system.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// The AWS-Region in which the destination file system is located.
	//   For One Zone file systems, the replication configuration must specify the AWS-Region in which the destination file system is located.
	Region *string `pulumi:"region"`
}

// FileSystemReplicationDestinationInput is an input type that accepts FileSystemReplicationDestinationArgs and FileSystemReplicationDestinationOutput values.
// You can construct a concrete instance of `FileSystemReplicationDestinationInput` via:
//
//	FileSystemReplicationDestinationArgs{...}
type FileSystemReplicationDestinationInput interface {
	pulumi.Input

	ToFileSystemReplicationDestinationOutput() FileSystemReplicationDestinationOutput
	ToFileSystemReplicationDestinationOutputWithContext(context.Context) FileSystemReplicationDestinationOutput
}

// Describes the destination file system in the replication configuration.
type FileSystemReplicationDestinationArgs struct {
	// The AWS For One Zone file systems, the replication configuration must specify the Availability Zone in which the destination file system is located.
	//  Use the format ``us-east-1a`` to specify the Availability Zone. For more information about One Zone file systems, see [EFS file system types](https://docs.aws.amazon.com/efs/latest/ug/storage-classes.html) in the *Amazon EFS User Guide*.
	//   One Zone file system type is not available in all Availability Zones in AWS-Regions where Amazon EFS is available.
	AvailabilityZoneName pulumi.StringPtrInput `pulumi:"availabilityZoneName"`
	// The ID of the destination Amazon EFS file system.
	FileSystemId pulumi.StringPtrInput `pulumi:"fileSystemId"`
	// The ID of an kms-key-long used to protect the encrypted file system.
	KmsKeyId pulumi.StringPtrInput `pulumi:"kmsKeyId"`
	// The AWS-Region in which the destination file system is located.
	//   For One Zone file systems, the replication configuration must specify the AWS-Region in which the destination file system is located.
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (FileSystemReplicationDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSystemReplicationDestination)(nil)).Elem()
}

func (i FileSystemReplicationDestinationArgs) ToFileSystemReplicationDestinationOutput() FileSystemReplicationDestinationOutput {
	return i.ToFileSystemReplicationDestinationOutputWithContext(context.Background())
}

func (i FileSystemReplicationDestinationArgs) ToFileSystemReplicationDestinationOutputWithContext(ctx context.Context) FileSystemReplicationDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemReplicationDestinationOutput)
}

// FileSystemReplicationDestinationArrayInput is an input type that accepts FileSystemReplicationDestinationArray and FileSystemReplicationDestinationArrayOutput values.
// You can construct a concrete instance of `FileSystemReplicationDestinationArrayInput` via:
//
//	FileSystemReplicationDestinationArray{ FileSystemReplicationDestinationArgs{...} }
type FileSystemReplicationDestinationArrayInput interface {
	pulumi.Input

	ToFileSystemReplicationDestinationArrayOutput() FileSystemReplicationDestinationArrayOutput
	ToFileSystemReplicationDestinationArrayOutputWithContext(context.Context) FileSystemReplicationDestinationArrayOutput
}

type FileSystemReplicationDestinationArray []FileSystemReplicationDestinationInput

func (FileSystemReplicationDestinationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FileSystemReplicationDestination)(nil)).Elem()
}

func (i FileSystemReplicationDestinationArray) ToFileSystemReplicationDestinationArrayOutput() FileSystemReplicationDestinationArrayOutput {
	return i.ToFileSystemReplicationDestinationArrayOutputWithContext(context.Background())
}

func (i FileSystemReplicationDestinationArray) ToFileSystemReplicationDestinationArrayOutputWithContext(ctx context.Context) FileSystemReplicationDestinationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemReplicationDestinationArrayOutput)
}

// Describes the destination file system in the replication configuration.
type FileSystemReplicationDestinationOutput struct{ *pulumi.OutputState }

func (FileSystemReplicationDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSystemReplicationDestination)(nil)).Elem()
}

func (o FileSystemReplicationDestinationOutput) ToFileSystemReplicationDestinationOutput() FileSystemReplicationDestinationOutput {
	return o
}

func (o FileSystemReplicationDestinationOutput) ToFileSystemReplicationDestinationOutputWithContext(ctx context.Context) FileSystemReplicationDestinationOutput {
	return o
}

// The AWS For One Zone file systems, the replication configuration must specify the Availability Zone in which the destination file system is located.
//
//	Use the format ``us-east-1a`` to specify the Availability Zone. For more information about One Zone file systems, see [EFS file system types](https://docs.aws.amazon.com/efs/latest/ug/storage-classes.html) in the *Amazon EFS User Guide*.
//	 One Zone file system type is not available in all Availability Zones in AWS-Regions where Amazon EFS is available.
func (o FileSystemReplicationDestinationOutput) AvailabilityZoneName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileSystemReplicationDestination) *string { return v.AvailabilityZoneName }).(pulumi.StringPtrOutput)
}

// The ID of the destination Amazon EFS file system.
func (o FileSystemReplicationDestinationOutput) FileSystemId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileSystemReplicationDestination) *string { return v.FileSystemId }).(pulumi.StringPtrOutput)
}

// The ID of an kms-key-long used to protect the encrypted file system.
func (o FileSystemReplicationDestinationOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileSystemReplicationDestination) *string { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

// The AWS-Region in which the destination file system is located.
//
//	For One Zone file systems, the replication configuration must specify the AWS-Region in which the destination file system is located.
func (o FileSystemReplicationDestinationOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileSystemReplicationDestination) *string { return v.Region }).(pulumi.StringPtrOutput)
}

type FileSystemReplicationDestinationArrayOutput struct{ *pulumi.OutputState }

func (FileSystemReplicationDestinationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FileSystemReplicationDestination)(nil)).Elem()
}

func (o FileSystemReplicationDestinationArrayOutput) ToFileSystemReplicationDestinationArrayOutput() FileSystemReplicationDestinationArrayOutput {
	return o
}

func (o FileSystemReplicationDestinationArrayOutput) ToFileSystemReplicationDestinationArrayOutputWithContext(ctx context.Context) FileSystemReplicationDestinationArrayOutput {
	return o
}

func (o FileSystemReplicationDestinationArrayOutput) Index(i pulumi.IntInput) FileSystemReplicationDestinationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FileSystemReplicationDestination {
		return vs[0].([]FileSystemReplicationDestination)[vs[1].(int)]
	}).(FileSystemReplicationDestinationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessPointCreationInfoInput)(nil)).Elem(), AccessPointCreationInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessPointCreationInfoPtrInput)(nil)).Elem(), AccessPointCreationInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessPointPosixUserInput)(nil)).Elem(), AccessPointPosixUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessPointPosixUserPtrInput)(nil)).Elem(), AccessPointPosixUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessPointRootDirectoryInput)(nil)).Elem(), AccessPointRootDirectoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessPointRootDirectoryPtrInput)(nil)).Elem(), AccessPointRootDirectoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileSystemBackupPolicyInput)(nil)).Elem(), FileSystemBackupPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileSystemBackupPolicyPtrInput)(nil)).Elem(), FileSystemBackupPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileSystemLifecyclePolicyInput)(nil)).Elem(), FileSystemLifecyclePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileSystemLifecyclePolicyArrayInput)(nil)).Elem(), FileSystemLifecyclePolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileSystemProtectionInput)(nil)).Elem(), FileSystemProtectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileSystemProtectionPtrInput)(nil)).Elem(), FileSystemProtectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileSystemReplicationConfigurationInput)(nil)).Elem(), FileSystemReplicationConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileSystemReplicationConfigurationPtrInput)(nil)).Elem(), FileSystemReplicationConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileSystemReplicationDestinationInput)(nil)).Elem(), FileSystemReplicationDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileSystemReplicationDestinationArrayInput)(nil)).Elem(), FileSystemReplicationDestinationArray{})
	pulumi.RegisterOutputType(AccessPointCreationInfoOutput{})
	pulumi.RegisterOutputType(AccessPointCreationInfoPtrOutput{})
	pulumi.RegisterOutputType(AccessPointPosixUserOutput{})
	pulumi.RegisterOutputType(AccessPointPosixUserPtrOutput{})
	pulumi.RegisterOutputType(AccessPointRootDirectoryOutput{})
	pulumi.RegisterOutputType(AccessPointRootDirectoryPtrOutput{})
	pulumi.RegisterOutputType(FileSystemBackupPolicyOutput{})
	pulumi.RegisterOutputType(FileSystemBackupPolicyPtrOutput{})
	pulumi.RegisterOutputType(FileSystemLifecyclePolicyOutput{})
	pulumi.RegisterOutputType(FileSystemLifecyclePolicyArrayOutput{})
	pulumi.RegisterOutputType(FileSystemProtectionOutput{})
	pulumi.RegisterOutputType(FileSystemProtectionPtrOutput{})
	pulumi.RegisterOutputType(FileSystemReplicationConfigurationOutput{})
	pulumi.RegisterOutputType(FileSystemReplicationConfigurationPtrOutput{})
	pulumi.RegisterOutputType(FileSystemReplicationDestinationOutput{})
	pulumi.RegisterOutputType(FileSystemReplicationDestinationArrayOutput{})
}
