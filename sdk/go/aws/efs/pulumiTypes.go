// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package efs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AccessPointCreationInfo struct {
	// Specifies the POSIX group ID to apply to the RootDirectory. Accepts values from 0 to 2^32 (4294967295).
	OwnerGid string `pulumi:"ownerGid"`
	// Specifies the POSIX user ID to apply to the RootDirectory. Accepts values from 0 to 2^32 (4294967295).
	OwnerUid string `pulumi:"ownerUid"`
	// Specifies the POSIX permissions to apply to the RootDirectory, in the format of an octal number representing the file's mode bits.
	Permissions string `pulumi:"permissions"`
}

// AccessPointCreationInfoInput is an input type that accepts AccessPointCreationInfoArgs and AccessPointCreationInfoOutput values.
// You can construct a concrete instance of `AccessPointCreationInfoInput` via:
//
//          AccessPointCreationInfoArgs{...}
type AccessPointCreationInfoInput interface {
	pulumi.Input

	ToAccessPointCreationInfoOutput() AccessPointCreationInfoOutput
	ToAccessPointCreationInfoOutputWithContext(context.Context) AccessPointCreationInfoOutput
}

type AccessPointCreationInfoArgs struct {
	// Specifies the POSIX group ID to apply to the RootDirectory. Accepts values from 0 to 2^32 (4294967295).
	OwnerGid pulumi.StringInput `pulumi:"ownerGid"`
	// Specifies the POSIX user ID to apply to the RootDirectory. Accepts values from 0 to 2^32 (4294967295).
	OwnerUid pulumi.StringInput `pulumi:"ownerUid"`
	// Specifies the POSIX permissions to apply to the RootDirectory, in the format of an octal number representing the file's mode bits.
	Permissions pulumi.StringInput `pulumi:"permissions"`
}

func (AccessPointCreationInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessPointCreationInfo)(nil)).Elem()
}

func (i AccessPointCreationInfoArgs) ToAccessPointCreationInfoOutput() AccessPointCreationInfoOutput {
	return i.ToAccessPointCreationInfoOutputWithContext(context.Background())
}

func (i AccessPointCreationInfoArgs) ToAccessPointCreationInfoOutputWithContext(ctx context.Context) AccessPointCreationInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPointCreationInfoOutput)
}

func (i AccessPointCreationInfoArgs) ToAccessPointCreationInfoPtrOutput() AccessPointCreationInfoPtrOutput {
	return i.ToAccessPointCreationInfoPtrOutputWithContext(context.Background())
}

func (i AccessPointCreationInfoArgs) ToAccessPointCreationInfoPtrOutputWithContext(ctx context.Context) AccessPointCreationInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPointCreationInfoOutput).ToAccessPointCreationInfoPtrOutputWithContext(ctx)
}

// AccessPointCreationInfoPtrInput is an input type that accepts AccessPointCreationInfoArgs, AccessPointCreationInfoPtr and AccessPointCreationInfoPtrOutput values.
// You can construct a concrete instance of `AccessPointCreationInfoPtrInput` via:
//
//          AccessPointCreationInfoArgs{...}
//
//  or:
//
//          nil
type AccessPointCreationInfoPtrInput interface {
	pulumi.Input

	ToAccessPointCreationInfoPtrOutput() AccessPointCreationInfoPtrOutput
	ToAccessPointCreationInfoPtrOutputWithContext(context.Context) AccessPointCreationInfoPtrOutput
}

type accessPointCreationInfoPtrType AccessPointCreationInfoArgs

func AccessPointCreationInfoPtr(v *AccessPointCreationInfoArgs) AccessPointCreationInfoPtrInput {
	return (*accessPointCreationInfoPtrType)(v)
}

func (*accessPointCreationInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessPointCreationInfo)(nil)).Elem()
}

func (i *accessPointCreationInfoPtrType) ToAccessPointCreationInfoPtrOutput() AccessPointCreationInfoPtrOutput {
	return i.ToAccessPointCreationInfoPtrOutputWithContext(context.Background())
}

func (i *accessPointCreationInfoPtrType) ToAccessPointCreationInfoPtrOutputWithContext(ctx context.Context) AccessPointCreationInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPointCreationInfoPtrOutput)
}

type AccessPointCreationInfoOutput struct{ *pulumi.OutputState }

func (AccessPointCreationInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessPointCreationInfo)(nil)).Elem()
}

func (o AccessPointCreationInfoOutput) ToAccessPointCreationInfoOutput() AccessPointCreationInfoOutput {
	return o
}

func (o AccessPointCreationInfoOutput) ToAccessPointCreationInfoOutputWithContext(ctx context.Context) AccessPointCreationInfoOutput {
	return o
}

func (o AccessPointCreationInfoOutput) ToAccessPointCreationInfoPtrOutput() AccessPointCreationInfoPtrOutput {
	return o.ToAccessPointCreationInfoPtrOutputWithContext(context.Background())
}

func (o AccessPointCreationInfoOutput) ToAccessPointCreationInfoPtrOutputWithContext(ctx context.Context) AccessPointCreationInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AccessPointCreationInfo) *AccessPointCreationInfo {
		return &v
	}).(AccessPointCreationInfoPtrOutput)
}

// Specifies the POSIX group ID to apply to the RootDirectory. Accepts values from 0 to 2^32 (4294967295).
func (o AccessPointCreationInfoOutput) OwnerGid() pulumi.StringOutput {
	return o.ApplyT(func(v AccessPointCreationInfo) string { return v.OwnerGid }).(pulumi.StringOutput)
}

// Specifies the POSIX user ID to apply to the RootDirectory. Accepts values from 0 to 2^32 (4294967295).
func (o AccessPointCreationInfoOutput) OwnerUid() pulumi.StringOutput {
	return o.ApplyT(func(v AccessPointCreationInfo) string { return v.OwnerUid }).(pulumi.StringOutput)
}

// Specifies the POSIX permissions to apply to the RootDirectory, in the format of an octal number representing the file's mode bits.
func (o AccessPointCreationInfoOutput) Permissions() pulumi.StringOutput {
	return o.ApplyT(func(v AccessPointCreationInfo) string { return v.Permissions }).(pulumi.StringOutput)
}

type AccessPointCreationInfoPtrOutput struct{ *pulumi.OutputState }

func (AccessPointCreationInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessPointCreationInfo)(nil)).Elem()
}

func (o AccessPointCreationInfoPtrOutput) ToAccessPointCreationInfoPtrOutput() AccessPointCreationInfoPtrOutput {
	return o
}

func (o AccessPointCreationInfoPtrOutput) ToAccessPointCreationInfoPtrOutputWithContext(ctx context.Context) AccessPointCreationInfoPtrOutput {
	return o
}

func (o AccessPointCreationInfoPtrOutput) Elem() AccessPointCreationInfoOutput {
	return o.ApplyT(func(v *AccessPointCreationInfo) AccessPointCreationInfo {
		if v != nil {
			return *v
		}
		var ret AccessPointCreationInfo
		return ret
	}).(AccessPointCreationInfoOutput)
}

// Specifies the POSIX group ID to apply to the RootDirectory. Accepts values from 0 to 2^32 (4294967295).
func (o AccessPointCreationInfoPtrOutput) OwnerGid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessPointCreationInfo) *string {
		if v == nil {
			return nil
		}
		return &v.OwnerGid
	}).(pulumi.StringPtrOutput)
}

// Specifies the POSIX user ID to apply to the RootDirectory. Accepts values from 0 to 2^32 (4294967295).
func (o AccessPointCreationInfoPtrOutput) OwnerUid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessPointCreationInfo) *string {
		if v == nil {
			return nil
		}
		return &v.OwnerUid
	}).(pulumi.StringPtrOutput)
}

// Specifies the POSIX permissions to apply to the RootDirectory, in the format of an octal number representing the file's mode bits.
func (o AccessPointCreationInfoPtrOutput) Permissions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessPointCreationInfo) *string {
		if v == nil {
			return nil
		}
		return &v.Permissions
	}).(pulumi.StringPtrOutput)
}

type AccessPointPosixUser struct {
	// The POSIX group ID used for all file system operations using this access point.
	Gid string `pulumi:"gid"`
	// Secondary POSIX group IDs used for all file system operations using this access point.
	SecondaryGids []string `pulumi:"secondaryGids"`
	// The POSIX user ID used for all file system operations using this access point.
	Uid string `pulumi:"uid"`
}

// AccessPointPosixUserInput is an input type that accepts AccessPointPosixUserArgs and AccessPointPosixUserOutput values.
// You can construct a concrete instance of `AccessPointPosixUserInput` via:
//
//          AccessPointPosixUserArgs{...}
type AccessPointPosixUserInput interface {
	pulumi.Input

	ToAccessPointPosixUserOutput() AccessPointPosixUserOutput
	ToAccessPointPosixUserOutputWithContext(context.Context) AccessPointPosixUserOutput
}

type AccessPointPosixUserArgs struct {
	// The POSIX group ID used for all file system operations using this access point.
	Gid pulumi.StringInput `pulumi:"gid"`
	// Secondary POSIX group IDs used for all file system operations using this access point.
	SecondaryGids pulumi.StringArrayInput `pulumi:"secondaryGids"`
	// The POSIX user ID used for all file system operations using this access point.
	Uid pulumi.StringInput `pulumi:"uid"`
}

func (AccessPointPosixUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessPointPosixUser)(nil)).Elem()
}

func (i AccessPointPosixUserArgs) ToAccessPointPosixUserOutput() AccessPointPosixUserOutput {
	return i.ToAccessPointPosixUserOutputWithContext(context.Background())
}

func (i AccessPointPosixUserArgs) ToAccessPointPosixUserOutputWithContext(ctx context.Context) AccessPointPosixUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPointPosixUserOutput)
}

func (i AccessPointPosixUserArgs) ToAccessPointPosixUserPtrOutput() AccessPointPosixUserPtrOutput {
	return i.ToAccessPointPosixUserPtrOutputWithContext(context.Background())
}

func (i AccessPointPosixUserArgs) ToAccessPointPosixUserPtrOutputWithContext(ctx context.Context) AccessPointPosixUserPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPointPosixUserOutput).ToAccessPointPosixUserPtrOutputWithContext(ctx)
}

// AccessPointPosixUserPtrInput is an input type that accepts AccessPointPosixUserArgs, AccessPointPosixUserPtr and AccessPointPosixUserPtrOutput values.
// You can construct a concrete instance of `AccessPointPosixUserPtrInput` via:
//
//          AccessPointPosixUserArgs{...}
//
//  or:
//
//          nil
type AccessPointPosixUserPtrInput interface {
	pulumi.Input

	ToAccessPointPosixUserPtrOutput() AccessPointPosixUserPtrOutput
	ToAccessPointPosixUserPtrOutputWithContext(context.Context) AccessPointPosixUserPtrOutput
}

type accessPointPosixUserPtrType AccessPointPosixUserArgs

func AccessPointPosixUserPtr(v *AccessPointPosixUserArgs) AccessPointPosixUserPtrInput {
	return (*accessPointPosixUserPtrType)(v)
}

func (*accessPointPosixUserPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessPointPosixUser)(nil)).Elem()
}

func (i *accessPointPosixUserPtrType) ToAccessPointPosixUserPtrOutput() AccessPointPosixUserPtrOutput {
	return i.ToAccessPointPosixUserPtrOutputWithContext(context.Background())
}

func (i *accessPointPosixUserPtrType) ToAccessPointPosixUserPtrOutputWithContext(ctx context.Context) AccessPointPosixUserPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPointPosixUserPtrOutput)
}

type AccessPointPosixUserOutput struct{ *pulumi.OutputState }

func (AccessPointPosixUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessPointPosixUser)(nil)).Elem()
}

func (o AccessPointPosixUserOutput) ToAccessPointPosixUserOutput() AccessPointPosixUserOutput {
	return o
}

func (o AccessPointPosixUserOutput) ToAccessPointPosixUserOutputWithContext(ctx context.Context) AccessPointPosixUserOutput {
	return o
}

func (o AccessPointPosixUserOutput) ToAccessPointPosixUserPtrOutput() AccessPointPosixUserPtrOutput {
	return o.ToAccessPointPosixUserPtrOutputWithContext(context.Background())
}

func (o AccessPointPosixUserOutput) ToAccessPointPosixUserPtrOutputWithContext(ctx context.Context) AccessPointPosixUserPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AccessPointPosixUser) *AccessPointPosixUser {
		return &v
	}).(AccessPointPosixUserPtrOutput)
}

// The POSIX group ID used for all file system operations using this access point.
func (o AccessPointPosixUserOutput) Gid() pulumi.StringOutput {
	return o.ApplyT(func(v AccessPointPosixUser) string { return v.Gid }).(pulumi.StringOutput)
}

// Secondary POSIX group IDs used for all file system operations using this access point.
func (o AccessPointPosixUserOutput) SecondaryGids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AccessPointPosixUser) []string { return v.SecondaryGids }).(pulumi.StringArrayOutput)
}

// The POSIX user ID used for all file system operations using this access point.
func (o AccessPointPosixUserOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v AccessPointPosixUser) string { return v.Uid }).(pulumi.StringOutput)
}

type AccessPointPosixUserPtrOutput struct{ *pulumi.OutputState }

func (AccessPointPosixUserPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessPointPosixUser)(nil)).Elem()
}

func (o AccessPointPosixUserPtrOutput) ToAccessPointPosixUserPtrOutput() AccessPointPosixUserPtrOutput {
	return o
}

func (o AccessPointPosixUserPtrOutput) ToAccessPointPosixUserPtrOutputWithContext(ctx context.Context) AccessPointPosixUserPtrOutput {
	return o
}

func (o AccessPointPosixUserPtrOutput) Elem() AccessPointPosixUserOutput {
	return o.ApplyT(func(v *AccessPointPosixUser) AccessPointPosixUser {
		if v != nil {
			return *v
		}
		var ret AccessPointPosixUser
		return ret
	}).(AccessPointPosixUserOutput)
}

// The POSIX group ID used for all file system operations using this access point.
func (o AccessPointPosixUserPtrOutput) Gid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessPointPosixUser) *string {
		if v == nil {
			return nil
		}
		return &v.Gid
	}).(pulumi.StringPtrOutput)
}

// Secondary POSIX group IDs used for all file system operations using this access point.
func (o AccessPointPosixUserPtrOutput) SecondaryGids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AccessPointPosixUser) []string {
		if v == nil {
			return nil
		}
		return v.SecondaryGids
	}).(pulumi.StringArrayOutput)
}

// The POSIX user ID used for all file system operations using this access point.
func (o AccessPointPosixUserPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessPointPosixUser) *string {
		if v == nil {
			return nil
		}
		return &v.Uid
	}).(pulumi.StringPtrOutput)
}

type AccessPointRootDirectory struct {
	// (Optional) Specifies the POSIX IDs and permissions to apply to the access point's RootDirectory. If the RootDirectory>Path specified does not exist, EFS creates the root directory using the CreationInfo settings when a client connects to an access point. When specifying the CreationInfo, you must provide values for all properties.   If you do not provide CreationInfo and the specified RootDirectory>Path does not exist, attempts to mount the file system using the access point will fail.
	CreationInfo *AccessPointCreationInfo `pulumi:"creationInfo"`
	// Specifies the path on the EFS file system to expose as the root directory to NFS clients using the access point to access the EFS file system. A path can have up to four subdirectories. If the specified path does not exist, you are required to provide the CreationInfo.
	Path *string `pulumi:"path"`
}

// AccessPointRootDirectoryInput is an input type that accepts AccessPointRootDirectoryArgs and AccessPointRootDirectoryOutput values.
// You can construct a concrete instance of `AccessPointRootDirectoryInput` via:
//
//          AccessPointRootDirectoryArgs{...}
type AccessPointRootDirectoryInput interface {
	pulumi.Input

	ToAccessPointRootDirectoryOutput() AccessPointRootDirectoryOutput
	ToAccessPointRootDirectoryOutputWithContext(context.Context) AccessPointRootDirectoryOutput
}

type AccessPointRootDirectoryArgs struct {
	// (Optional) Specifies the POSIX IDs and permissions to apply to the access point's RootDirectory. If the RootDirectory>Path specified does not exist, EFS creates the root directory using the CreationInfo settings when a client connects to an access point. When specifying the CreationInfo, you must provide values for all properties.   If you do not provide CreationInfo and the specified RootDirectory>Path does not exist, attempts to mount the file system using the access point will fail.
	CreationInfo AccessPointCreationInfoPtrInput `pulumi:"creationInfo"`
	// Specifies the path on the EFS file system to expose as the root directory to NFS clients using the access point to access the EFS file system. A path can have up to four subdirectories. If the specified path does not exist, you are required to provide the CreationInfo.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (AccessPointRootDirectoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessPointRootDirectory)(nil)).Elem()
}

func (i AccessPointRootDirectoryArgs) ToAccessPointRootDirectoryOutput() AccessPointRootDirectoryOutput {
	return i.ToAccessPointRootDirectoryOutputWithContext(context.Background())
}

func (i AccessPointRootDirectoryArgs) ToAccessPointRootDirectoryOutputWithContext(ctx context.Context) AccessPointRootDirectoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPointRootDirectoryOutput)
}

func (i AccessPointRootDirectoryArgs) ToAccessPointRootDirectoryPtrOutput() AccessPointRootDirectoryPtrOutput {
	return i.ToAccessPointRootDirectoryPtrOutputWithContext(context.Background())
}

func (i AccessPointRootDirectoryArgs) ToAccessPointRootDirectoryPtrOutputWithContext(ctx context.Context) AccessPointRootDirectoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPointRootDirectoryOutput).ToAccessPointRootDirectoryPtrOutputWithContext(ctx)
}

// AccessPointRootDirectoryPtrInput is an input type that accepts AccessPointRootDirectoryArgs, AccessPointRootDirectoryPtr and AccessPointRootDirectoryPtrOutput values.
// You can construct a concrete instance of `AccessPointRootDirectoryPtrInput` via:
//
//          AccessPointRootDirectoryArgs{...}
//
//  or:
//
//          nil
type AccessPointRootDirectoryPtrInput interface {
	pulumi.Input

	ToAccessPointRootDirectoryPtrOutput() AccessPointRootDirectoryPtrOutput
	ToAccessPointRootDirectoryPtrOutputWithContext(context.Context) AccessPointRootDirectoryPtrOutput
}

type accessPointRootDirectoryPtrType AccessPointRootDirectoryArgs

func AccessPointRootDirectoryPtr(v *AccessPointRootDirectoryArgs) AccessPointRootDirectoryPtrInput {
	return (*accessPointRootDirectoryPtrType)(v)
}

func (*accessPointRootDirectoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessPointRootDirectory)(nil)).Elem()
}

func (i *accessPointRootDirectoryPtrType) ToAccessPointRootDirectoryPtrOutput() AccessPointRootDirectoryPtrOutput {
	return i.ToAccessPointRootDirectoryPtrOutputWithContext(context.Background())
}

func (i *accessPointRootDirectoryPtrType) ToAccessPointRootDirectoryPtrOutputWithContext(ctx context.Context) AccessPointRootDirectoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPointRootDirectoryPtrOutput)
}

type AccessPointRootDirectoryOutput struct{ *pulumi.OutputState }

func (AccessPointRootDirectoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessPointRootDirectory)(nil)).Elem()
}

func (o AccessPointRootDirectoryOutput) ToAccessPointRootDirectoryOutput() AccessPointRootDirectoryOutput {
	return o
}

func (o AccessPointRootDirectoryOutput) ToAccessPointRootDirectoryOutputWithContext(ctx context.Context) AccessPointRootDirectoryOutput {
	return o
}

func (o AccessPointRootDirectoryOutput) ToAccessPointRootDirectoryPtrOutput() AccessPointRootDirectoryPtrOutput {
	return o.ToAccessPointRootDirectoryPtrOutputWithContext(context.Background())
}

func (o AccessPointRootDirectoryOutput) ToAccessPointRootDirectoryPtrOutputWithContext(ctx context.Context) AccessPointRootDirectoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AccessPointRootDirectory) *AccessPointRootDirectory {
		return &v
	}).(AccessPointRootDirectoryPtrOutput)
}

// (Optional) Specifies the POSIX IDs and permissions to apply to the access point's RootDirectory. If the RootDirectory>Path specified does not exist, EFS creates the root directory using the CreationInfo settings when a client connects to an access point. When specifying the CreationInfo, you must provide values for all properties.   If you do not provide CreationInfo and the specified RootDirectory>Path does not exist, attempts to mount the file system using the access point will fail.
func (o AccessPointRootDirectoryOutput) CreationInfo() AccessPointCreationInfoPtrOutput {
	return o.ApplyT(func(v AccessPointRootDirectory) *AccessPointCreationInfo { return v.CreationInfo }).(AccessPointCreationInfoPtrOutput)
}

// Specifies the path on the EFS file system to expose as the root directory to NFS clients using the access point to access the EFS file system. A path can have up to four subdirectories. If the specified path does not exist, you are required to provide the CreationInfo.
func (o AccessPointRootDirectoryOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessPointRootDirectory) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type AccessPointRootDirectoryPtrOutput struct{ *pulumi.OutputState }

func (AccessPointRootDirectoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessPointRootDirectory)(nil)).Elem()
}

func (o AccessPointRootDirectoryPtrOutput) ToAccessPointRootDirectoryPtrOutput() AccessPointRootDirectoryPtrOutput {
	return o
}

func (o AccessPointRootDirectoryPtrOutput) ToAccessPointRootDirectoryPtrOutputWithContext(ctx context.Context) AccessPointRootDirectoryPtrOutput {
	return o
}

func (o AccessPointRootDirectoryPtrOutput) Elem() AccessPointRootDirectoryOutput {
	return o.ApplyT(func(v *AccessPointRootDirectory) AccessPointRootDirectory {
		if v != nil {
			return *v
		}
		var ret AccessPointRootDirectory
		return ret
	}).(AccessPointRootDirectoryOutput)
}

// (Optional) Specifies the POSIX IDs and permissions to apply to the access point's RootDirectory. If the RootDirectory>Path specified does not exist, EFS creates the root directory using the CreationInfo settings when a client connects to an access point. When specifying the CreationInfo, you must provide values for all properties.   If you do not provide CreationInfo and the specified RootDirectory>Path does not exist, attempts to mount the file system using the access point will fail.
func (o AccessPointRootDirectoryPtrOutput) CreationInfo() AccessPointCreationInfoPtrOutput {
	return o.ApplyT(func(v *AccessPointRootDirectory) *AccessPointCreationInfo {
		if v == nil {
			return nil
		}
		return v.CreationInfo
	}).(AccessPointCreationInfoPtrOutput)
}

// Specifies the path on the EFS file system to expose as the root directory to NFS clients using the access point to access the EFS file system. A path can have up to four subdirectories. If the specified path does not exist, you are required to provide the CreationInfo.
func (o AccessPointRootDirectoryPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessPointRootDirectory) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

type AccessPointTag struct {
	Key   *string `pulumi:"key"`
	Value *string `pulumi:"value"`
}

// AccessPointTagInput is an input type that accepts AccessPointTagArgs and AccessPointTagOutput values.
// You can construct a concrete instance of `AccessPointTagInput` via:
//
//          AccessPointTagArgs{...}
type AccessPointTagInput interface {
	pulumi.Input

	ToAccessPointTagOutput() AccessPointTagOutput
	ToAccessPointTagOutputWithContext(context.Context) AccessPointTagOutput
}

type AccessPointTagArgs struct {
	Key   pulumi.StringPtrInput `pulumi:"key"`
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (AccessPointTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessPointTag)(nil)).Elem()
}

func (i AccessPointTagArgs) ToAccessPointTagOutput() AccessPointTagOutput {
	return i.ToAccessPointTagOutputWithContext(context.Background())
}

func (i AccessPointTagArgs) ToAccessPointTagOutputWithContext(ctx context.Context) AccessPointTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPointTagOutput)
}

// AccessPointTagArrayInput is an input type that accepts AccessPointTagArray and AccessPointTagArrayOutput values.
// You can construct a concrete instance of `AccessPointTagArrayInput` via:
//
//          AccessPointTagArray{ AccessPointTagArgs{...} }
type AccessPointTagArrayInput interface {
	pulumi.Input

	ToAccessPointTagArrayOutput() AccessPointTagArrayOutput
	ToAccessPointTagArrayOutputWithContext(context.Context) AccessPointTagArrayOutput
}

type AccessPointTagArray []AccessPointTagInput

func (AccessPointTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessPointTag)(nil)).Elem()
}

func (i AccessPointTagArray) ToAccessPointTagArrayOutput() AccessPointTagArrayOutput {
	return i.ToAccessPointTagArrayOutputWithContext(context.Background())
}

func (i AccessPointTagArray) ToAccessPointTagArrayOutputWithContext(ctx context.Context) AccessPointTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPointTagArrayOutput)
}

type AccessPointTagOutput struct{ *pulumi.OutputState }

func (AccessPointTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessPointTag)(nil)).Elem()
}

func (o AccessPointTagOutput) ToAccessPointTagOutput() AccessPointTagOutput {
	return o
}

func (o AccessPointTagOutput) ToAccessPointTagOutputWithContext(ctx context.Context) AccessPointTagOutput {
	return o
}

func (o AccessPointTagOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessPointTag) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o AccessPointTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessPointTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type AccessPointTagArrayOutput struct{ *pulumi.OutputState }

func (AccessPointTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessPointTag)(nil)).Elem()
}

func (o AccessPointTagArrayOutput) ToAccessPointTagArrayOutput() AccessPointTagArrayOutput {
	return o
}

func (o AccessPointTagArrayOutput) ToAccessPointTagArrayOutputWithContext(ctx context.Context) AccessPointTagArrayOutput {
	return o
}

func (o AccessPointTagArrayOutput) Index(i pulumi.IntInput) AccessPointTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccessPointTag {
		return vs[0].([]AccessPointTag)[vs[1].(int)]
	}).(AccessPointTagOutput)
}

type FileSystemBackupPolicy struct {
	Status string `pulumi:"status"`
}

// FileSystemBackupPolicyInput is an input type that accepts FileSystemBackupPolicyArgs and FileSystemBackupPolicyOutput values.
// You can construct a concrete instance of `FileSystemBackupPolicyInput` via:
//
//          FileSystemBackupPolicyArgs{...}
type FileSystemBackupPolicyInput interface {
	pulumi.Input

	ToFileSystemBackupPolicyOutput() FileSystemBackupPolicyOutput
	ToFileSystemBackupPolicyOutputWithContext(context.Context) FileSystemBackupPolicyOutput
}

type FileSystemBackupPolicyArgs struct {
	Status pulumi.StringInput `pulumi:"status"`
}

func (FileSystemBackupPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSystemBackupPolicy)(nil)).Elem()
}

func (i FileSystemBackupPolicyArgs) ToFileSystemBackupPolicyOutput() FileSystemBackupPolicyOutput {
	return i.ToFileSystemBackupPolicyOutputWithContext(context.Background())
}

func (i FileSystemBackupPolicyArgs) ToFileSystemBackupPolicyOutputWithContext(ctx context.Context) FileSystemBackupPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemBackupPolicyOutput)
}

func (i FileSystemBackupPolicyArgs) ToFileSystemBackupPolicyPtrOutput() FileSystemBackupPolicyPtrOutput {
	return i.ToFileSystemBackupPolicyPtrOutputWithContext(context.Background())
}

func (i FileSystemBackupPolicyArgs) ToFileSystemBackupPolicyPtrOutputWithContext(ctx context.Context) FileSystemBackupPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemBackupPolicyOutput).ToFileSystemBackupPolicyPtrOutputWithContext(ctx)
}

// FileSystemBackupPolicyPtrInput is an input type that accepts FileSystemBackupPolicyArgs, FileSystemBackupPolicyPtr and FileSystemBackupPolicyPtrOutput values.
// You can construct a concrete instance of `FileSystemBackupPolicyPtrInput` via:
//
//          FileSystemBackupPolicyArgs{...}
//
//  or:
//
//          nil
type FileSystemBackupPolicyPtrInput interface {
	pulumi.Input

	ToFileSystemBackupPolicyPtrOutput() FileSystemBackupPolicyPtrOutput
	ToFileSystemBackupPolicyPtrOutputWithContext(context.Context) FileSystemBackupPolicyPtrOutput
}

type fileSystemBackupPolicyPtrType FileSystemBackupPolicyArgs

func FileSystemBackupPolicyPtr(v *FileSystemBackupPolicyArgs) FileSystemBackupPolicyPtrInput {
	return (*fileSystemBackupPolicyPtrType)(v)
}

func (*fileSystemBackupPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FileSystemBackupPolicy)(nil)).Elem()
}

func (i *fileSystemBackupPolicyPtrType) ToFileSystemBackupPolicyPtrOutput() FileSystemBackupPolicyPtrOutput {
	return i.ToFileSystemBackupPolicyPtrOutputWithContext(context.Background())
}

func (i *fileSystemBackupPolicyPtrType) ToFileSystemBackupPolicyPtrOutputWithContext(ctx context.Context) FileSystemBackupPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemBackupPolicyPtrOutput)
}

type FileSystemBackupPolicyOutput struct{ *pulumi.OutputState }

func (FileSystemBackupPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSystemBackupPolicy)(nil)).Elem()
}

func (o FileSystemBackupPolicyOutput) ToFileSystemBackupPolicyOutput() FileSystemBackupPolicyOutput {
	return o
}

func (o FileSystemBackupPolicyOutput) ToFileSystemBackupPolicyOutputWithContext(ctx context.Context) FileSystemBackupPolicyOutput {
	return o
}

func (o FileSystemBackupPolicyOutput) ToFileSystemBackupPolicyPtrOutput() FileSystemBackupPolicyPtrOutput {
	return o.ToFileSystemBackupPolicyPtrOutputWithContext(context.Background())
}

func (o FileSystemBackupPolicyOutput) ToFileSystemBackupPolicyPtrOutputWithContext(ctx context.Context) FileSystemBackupPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FileSystemBackupPolicy) *FileSystemBackupPolicy {
		return &v
	}).(FileSystemBackupPolicyPtrOutput)
}

func (o FileSystemBackupPolicyOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v FileSystemBackupPolicy) string { return v.Status }).(pulumi.StringOutput)
}

type FileSystemBackupPolicyPtrOutput struct{ *pulumi.OutputState }

func (FileSystemBackupPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileSystemBackupPolicy)(nil)).Elem()
}

func (o FileSystemBackupPolicyPtrOutput) ToFileSystemBackupPolicyPtrOutput() FileSystemBackupPolicyPtrOutput {
	return o
}

func (o FileSystemBackupPolicyPtrOutput) ToFileSystemBackupPolicyPtrOutputWithContext(ctx context.Context) FileSystemBackupPolicyPtrOutput {
	return o
}

func (o FileSystemBackupPolicyPtrOutput) Elem() FileSystemBackupPolicyOutput {
	return o.ApplyT(func(v *FileSystemBackupPolicy) FileSystemBackupPolicy {
		if v != nil {
			return *v
		}
		var ret FileSystemBackupPolicy
		return ret
	}).(FileSystemBackupPolicyOutput)
}

func (o FileSystemBackupPolicyPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSystemBackupPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.StringPtrOutput)
}

type FileSystemElasticFileSystemTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// FileSystemElasticFileSystemTagInput is an input type that accepts FileSystemElasticFileSystemTagArgs and FileSystemElasticFileSystemTagOutput values.
// You can construct a concrete instance of `FileSystemElasticFileSystemTagInput` via:
//
//          FileSystemElasticFileSystemTagArgs{...}
type FileSystemElasticFileSystemTagInput interface {
	pulumi.Input

	ToFileSystemElasticFileSystemTagOutput() FileSystemElasticFileSystemTagOutput
	ToFileSystemElasticFileSystemTagOutputWithContext(context.Context) FileSystemElasticFileSystemTagOutput
}

type FileSystemElasticFileSystemTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (FileSystemElasticFileSystemTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSystemElasticFileSystemTag)(nil)).Elem()
}

func (i FileSystemElasticFileSystemTagArgs) ToFileSystemElasticFileSystemTagOutput() FileSystemElasticFileSystemTagOutput {
	return i.ToFileSystemElasticFileSystemTagOutputWithContext(context.Background())
}

func (i FileSystemElasticFileSystemTagArgs) ToFileSystemElasticFileSystemTagOutputWithContext(ctx context.Context) FileSystemElasticFileSystemTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemElasticFileSystemTagOutput)
}

// FileSystemElasticFileSystemTagArrayInput is an input type that accepts FileSystemElasticFileSystemTagArray and FileSystemElasticFileSystemTagArrayOutput values.
// You can construct a concrete instance of `FileSystemElasticFileSystemTagArrayInput` via:
//
//          FileSystemElasticFileSystemTagArray{ FileSystemElasticFileSystemTagArgs{...} }
type FileSystemElasticFileSystemTagArrayInput interface {
	pulumi.Input

	ToFileSystemElasticFileSystemTagArrayOutput() FileSystemElasticFileSystemTagArrayOutput
	ToFileSystemElasticFileSystemTagArrayOutputWithContext(context.Context) FileSystemElasticFileSystemTagArrayOutput
}

type FileSystemElasticFileSystemTagArray []FileSystemElasticFileSystemTagInput

func (FileSystemElasticFileSystemTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FileSystemElasticFileSystemTag)(nil)).Elem()
}

func (i FileSystemElasticFileSystemTagArray) ToFileSystemElasticFileSystemTagArrayOutput() FileSystemElasticFileSystemTagArrayOutput {
	return i.ToFileSystemElasticFileSystemTagArrayOutputWithContext(context.Background())
}

func (i FileSystemElasticFileSystemTagArray) ToFileSystemElasticFileSystemTagArrayOutputWithContext(ctx context.Context) FileSystemElasticFileSystemTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemElasticFileSystemTagArrayOutput)
}

type FileSystemElasticFileSystemTagOutput struct{ *pulumi.OutputState }

func (FileSystemElasticFileSystemTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSystemElasticFileSystemTag)(nil)).Elem()
}

func (o FileSystemElasticFileSystemTagOutput) ToFileSystemElasticFileSystemTagOutput() FileSystemElasticFileSystemTagOutput {
	return o
}

func (o FileSystemElasticFileSystemTagOutput) ToFileSystemElasticFileSystemTagOutputWithContext(ctx context.Context) FileSystemElasticFileSystemTagOutput {
	return o
}

func (o FileSystemElasticFileSystemTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v FileSystemElasticFileSystemTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o FileSystemElasticFileSystemTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v FileSystemElasticFileSystemTag) string { return v.Value }).(pulumi.StringOutput)
}

type FileSystemElasticFileSystemTagArrayOutput struct{ *pulumi.OutputState }

func (FileSystemElasticFileSystemTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FileSystemElasticFileSystemTag)(nil)).Elem()
}

func (o FileSystemElasticFileSystemTagArrayOutput) ToFileSystemElasticFileSystemTagArrayOutput() FileSystemElasticFileSystemTagArrayOutput {
	return o
}

func (o FileSystemElasticFileSystemTagArrayOutput) ToFileSystemElasticFileSystemTagArrayOutputWithContext(ctx context.Context) FileSystemElasticFileSystemTagArrayOutput {
	return o
}

func (o FileSystemElasticFileSystemTagArrayOutput) Index(i pulumi.IntInput) FileSystemElasticFileSystemTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FileSystemElasticFileSystemTag {
		return vs[0].([]FileSystemElasticFileSystemTag)[vs[1].(int)]
	}).(FileSystemElasticFileSystemTagOutput)
}

type FileSystemLifecyclePolicy struct {
	TransitionToIA                  *string `pulumi:"transitionToIA"`
	TransitionToPrimaryStorageClass *string `pulumi:"transitionToPrimaryStorageClass"`
}

// FileSystemLifecyclePolicyInput is an input type that accepts FileSystemLifecyclePolicyArgs and FileSystemLifecyclePolicyOutput values.
// You can construct a concrete instance of `FileSystemLifecyclePolicyInput` via:
//
//          FileSystemLifecyclePolicyArgs{...}
type FileSystemLifecyclePolicyInput interface {
	pulumi.Input

	ToFileSystemLifecyclePolicyOutput() FileSystemLifecyclePolicyOutput
	ToFileSystemLifecyclePolicyOutputWithContext(context.Context) FileSystemLifecyclePolicyOutput
}

type FileSystemLifecyclePolicyArgs struct {
	TransitionToIA                  pulumi.StringPtrInput `pulumi:"transitionToIA"`
	TransitionToPrimaryStorageClass pulumi.StringPtrInput `pulumi:"transitionToPrimaryStorageClass"`
}

func (FileSystemLifecyclePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSystemLifecyclePolicy)(nil)).Elem()
}

func (i FileSystemLifecyclePolicyArgs) ToFileSystemLifecyclePolicyOutput() FileSystemLifecyclePolicyOutput {
	return i.ToFileSystemLifecyclePolicyOutputWithContext(context.Background())
}

func (i FileSystemLifecyclePolicyArgs) ToFileSystemLifecyclePolicyOutputWithContext(ctx context.Context) FileSystemLifecyclePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemLifecyclePolicyOutput)
}

// FileSystemLifecyclePolicyArrayInput is an input type that accepts FileSystemLifecyclePolicyArray and FileSystemLifecyclePolicyArrayOutput values.
// You can construct a concrete instance of `FileSystemLifecyclePolicyArrayInput` via:
//
//          FileSystemLifecyclePolicyArray{ FileSystemLifecyclePolicyArgs{...} }
type FileSystemLifecyclePolicyArrayInput interface {
	pulumi.Input

	ToFileSystemLifecyclePolicyArrayOutput() FileSystemLifecyclePolicyArrayOutput
	ToFileSystemLifecyclePolicyArrayOutputWithContext(context.Context) FileSystemLifecyclePolicyArrayOutput
}

type FileSystemLifecyclePolicyArray []FileSystemLifecyclePolicyInput

func (FileSystemLifecyclePolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FileSystemLifecyclePolicy)(nil)).Elem()
}

func (i FileSystemLifecyclePolicyArray) ToFileSystemLifecyclePolicyArrayOutput() FileSystemLifecyclePolicyArrayOutput {
	return i.ToFileSystemLifecyclePolicyArrayOutputWithContext(context.Background())
}

func (i FileSystemLifecyclePolicyArray) ToFileSystemLifecyclePolicyArrayOutputWithContext(ctx context.Context) FileSystemLifecyclePolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemLifecyclePolicyArrayOutput)
}

type FileSystemLifecyclePolicyOutput struct{ *pulumi.OutputState }

func (FileSystemLifecyclePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSystemLifecyclePolicy)(nil)).Elem()
}

func (o FileSystemLifecyclePolicyOutput) ToFileSystemLifecyclePolicyOutput() FileSystemLifecyclePolicyOutput {
	return o
}

func (o FileSystemLifecyclePolicyOutput) ToFileSystemLifecyclePolicyOutputWithContext(ctx context.Context) FileSystemLifecyclePolicyOutput {
	return o
}

func (o FileSystemLifecyclePolicyOutput) TransitionToIA() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileSystemLifecyclePolicy) *string { return v.TransitionToIA }).(pulumi.StringPtrOutput)
}

func (o FileSystemLifecyclePolicyOutput) TransitionToPrimaryStorageClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileSystemLifecyclePolicy) *string { return v.TransitionToPrimaryStorageClass }).(pulumi.StringPtrOutput)
}

type FileSystemLifecyclePolicyArrayOutput struct{ *pulumi.OutputState }

func (FileSystemLifecyclePolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FileSystemLifecyclePolicy)(nil)).Elem()
}

func (o FileSystemLifecyclePolicyArrayOutput) ToFileSystemLifecyclePolicyArrayOutput() FileSystemLifecyclePolicyArrayOutput {
	return o
}

func (o FileSystemLifecyclePolicyArrayOutput) ToFileSystemLifecyclePolicyArrayOutputWithContext(ctx context.Context) FileSystemLifecyclePolicyArrayOutput {
	return o
}

func (o FileSystemLifecyclePolicyArrayOutput) Index(i pulumi.IntInput) FileSystemLifecyclePolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FileSystemLifecyclePolicy {
		return vs[0].([]FileSystemLifecyclePolicy)[vs[1].(int)]
	}).(FileSystemLifecyclePolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessPointCreationInfoInput)(nil)).Elem(), AccessPointCreationInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessPointCreationInfoPtrInput)(nil)).Elem(), AccessPointCreationInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessPointPosixUserInput)(nil)).Elem(), AccessPointPosixUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessPointPosixUserPtrInput)(nil)).Elem(), AccessPointPosixUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessPointRootDirectoryInput)(nil)).Elem(), AccessPointRootDirectoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessPointRootDirectoryPtrInput)(nil)).Elem(), AccessPointRootDirectoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessPointTagInput)(nil)).Elem(), AccessPointTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessPointTagArrayInput)(nil)).Elem(), AccessPointTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileSystemBackupPolicyInput)(nil)).Elem(), FileSystemBackupPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileSystemBackupPolicyPtrInput)(nil)).Elem(), FileSystemBackupPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileSystemElasticFileSystemTagInput)(nil)).Elem(), FileSystemElasticFileSystemTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileSystemElasticFileSystemTagArrayInput)(nil)).Elem(), FileSystemElasticFileSystemTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileSystemLifecyclePolicyInput)(nil)).Elem(), FileSystemLifecyclePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileSystemLifecyclePolicyArrayInput)(nil)).Elem(), FileSystemLifecyclePolicyArray{})
	pulumi.RegisterOutputType(AccessPointCreationInfoOutput{})
	pulumi.RegisterOutputType(AccessPointCreationInfoPtrOutput{})
	pulumi.RegisterOutputType(AccessPointPosixUserOutput{})
	pulumi.RegisterOutputType(AccessPointPosixUserPtrOutput{})
	pulumi.RegisterOutputType(AccessPointRootDirectoryOutput{})
	pulumi.RegisterOutputType(AccessPointRootDirectoryPtrOutput{})
	pulumi.RegisterOutputType(AccessPointTagOutput{})
	pulumi.RegisterOutputType(AccessPointTagArrayOutput{})
	pulumi.RegisterOutputType(FileSystemBackupPolicyOutput{})
	pulumi.RegisterOutputType(FileSystemBackupPolicyPtrOutput{})
	pulumi.RegisterOutputType(FileSystemElasticFileSystemTagOutput{})
	pulumi.RegisterOutputType(FileSystemElasticFileSystemTagArrayOutput{})
	pulumi.RegisterOutputType(FileSystemLifecyclePolicyOutput{})
	pulumi.RegisterOutputType(FileSystemLifecyclePolicyArrayOutput{})
}
