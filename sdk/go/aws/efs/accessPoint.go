// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package efs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The “AWS::EFS::AccessPoint“ resource creates an EFS access point. An access point is an application-specific view into an EFS file system that applies an operating system user and group, and a file system path, to any file system request made through the access point. The operating system user and group override any identity information provided by the NFS client. The file system path is exposed as the access point's root directory. Applications using the access point can only access data in its own directory and below. To learn more, see [Mounting a file system using EFS access points](https://docs.aws.amazon.com/efs/latest/ug/efs-access-points.html).
//
//	This operation requires permissions for the ``elasticfilesystem:CreateAccessPoint`` action.
type AccessPoint struct {
	pulumi.CustomResourceState

	AccessPointId pulumi.StringOutput `pulumi:"accessPointId"`
	// An array of key-value pairs to apply to this resource.
	//  For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html).
	AccessPointTags AccessPointTagArrayOutput `pulumi:"accessPointTags"`
	Arn             pulumi.StringOutput       `pulumi:"arn"`
	// The opaque string specified in the request to ensure idempotent creation.
	ClientToken pulumi.StringPtrOutput `pulumi:"clientToken"`
	// The ID of the EFS file system that the access point applies to. Accepts only the ID format for input when specifying a file system, for example ``fs-0123456789abcedf2``.
	FileSystemId pulumi.StringOutput `pulumi:"fileSystemId"`
	// The full POSIX identity, including the user ID, group ID, and secondary group IDs on the access point that is used for all file operations by NFS clients using the access point.
	PosixUser AccessPointPosixUserPtrOutput `pulumi:"posixUser"`
	// The directory on the EFS file system that the access point exposes as the root directory to NFS clients using the access point.
	RootDirectory AccessPointRootDirectoryPtrOutput `pulumi:"rootDirectory"`
}

// NewAccessPoint registers a new resource with the given unique name, arguments, and options.
func NewAccessPoint(ctx *pulumi.Context,
	name string, args *AccessPointArgs, opts ...pulumi.ResourceOption) (*AccessPoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FileSystemId == nil {
		return nil, errors.New("invalid value for required argument 'FileSystemId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"clientToken",
		"fileSystemId",
		"posixUser",
		"rootDirectory",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AccessPoint
	err := ctx.RegisterResource("aws-native:efs:AccessPoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccessPoint gets an existing AccessPoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessPoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessPointState, opts ...pulumi.ResourceOption) (*AccessPoint, error) {
	var resource AccessPoint
	err := ctx.ReadResource("aws-native:efs:AccessPoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccessPoint resources.
type accessPointState struct {
}

type AccessPointState struct {
}

func (AccessPointState) ElementType() reflect.Type {
	return reflect.TypeOf((*accessPointState)(nil)).Elem()
}

type accessPointArgs struct {
	// An array of key-value pairs to apply to this resource.
	//  For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html).
	AccessPointTags []AccessPointTag `pulumi:"accessPointTags"`
	// The opaque string specified in the request to ensure idempotent creation.
	ClientToken *string `pulumi:"clientToken"`
	// The ID of the EFS file system that the access point applies to. Accepts only the ID format for input when specifying a file system, for example ``fs-0123456789abcedf2``.
	FileSystemId string `pulumi:"fileSystemId"`
	// The full POSIX identity, including the user ID, group ID, and secondary group IDs on the access point that is used for all file operations by NFS clients using the access point.
	PosixUser *AccessPointPosixUser `pulumi:"posixUser"`
	// The directory on the EFS file system that the access point exposes as the root directory to NFS clients using the access point.
	RootDirectory *AccessPointRootDirectory `pulumi:"rootDirectory"`
}

// The set of arguments for constructing a AccessPoint resource.
type AccessPointArgs struct {
	// An array of key-value pairs to apply to this resource.
	//  For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html).
	AccessPointTags AccessPointTagArrayInput
	// The opaque string specified in the request to ensure idempotent creation.
	ClientToken pulumi.StringPtrInput
	// The ID of the EFS file system that the access point applies to. Accepts only the ID format for input when specifying a file system, for example ``fs-0123456789abcedf2``.
	FileSystemId pulumi.StringInput
	// The full POSIX identity, including the user ID, group ID, and secondary group IDs on the access point that is used for all file operations by NFS clients using the access point.
	PosixUser AccessPointPosixUserPtrInput
	// The directory on the EFS file system that the access point exposes as the root directory to NFS clients using the access point.
	RootDirectory AccessPointRootDirectoryPtrInput
}

func (AccessPointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accessPointArgs)(nil)).Elem()
}

type AccessPointInput interface {
	pulumi.Input

	ToAccessPointOutput() AccessPointOutput
	ToAccessPointOutputWithContext(ctx context.Context) AccessPointOutput
}

func (*AccessPoint) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessPoint)(nil)).Elem()
}

func (i *AccessPoint) ToAccessPointOutput() AccessPointOutput {
	return i.ToAccessPointOutputWithContext(context.Background())
}

func (i *AccessPoint) ToAccessPointOutputWithContext(ctx context.Context) AccessPointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPointOutput)
}

type AccessPointOutput struct{ *pulumi.OutputState }

func (AccessPointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessPoint)(nil)).Elem()
}

func (o AccessPointOutput) ToAccessPointOutput() AccessPointOutput {
	return o
}

func (o AccessPointOutput) ToAccessPointOutputWithContext(ctx context.Context) AccessPointOutput {
	return o
}

func (o AccessPointOutput) AccessPointId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessPoint) pulumi.StringOutput { return v.AccessPointId }).(pulumi.StringOutput)
}

// An array of key-value pairs to apply to this resource.
//
//	For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html).
func (o AccessPointOutput) AccessPointTags() AccessPointTagArrayOutput {
	return o.ApplyT(func(v *AccessPoint) AccessPointTagArrayOutput { return v.AccessPointTags }).(AccessPointTagArrayOutput)
}

func (o AccessPointOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessPoint) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The opaque string specified in the request to ensure idempotent creation.
func (o AccessPointOutput) ClientToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessPoint) pulumi.StringPtrOutput { return v.ClientToken }).(pulumi.StringPtrOutput)
}

// The ID of the EFS file system that the access point applies to. Accepts only the ID format for input when specifying a file system, for example “fs-0123456789abcedf2“.
func (o AccessPointOutput) FileSystemId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessPoint) pulumi.StringOutput { return v.FileSystemId }).(pulumi.StringOutput)
}

// The full POSIX identity, including the user ID, group ID, and secondary group IDs on the access point that is used for all file operations by NFS clients using the access point.
func (o AccessPointOutput) PosixUser() AccessPointPosixUserPtrOutput {
	return o.ApplyT(func(v *AccessPoint) AccessPointPosixUserPtrOutput { return v.PosixUser }).(AccessPointPosixUserPtrOutput)
}

// The directory on the EFS file system that the access point exposes as the root directory to NFS clients using the access point.
func (o AccessPointOutput) RootDirectory() AccessPointRootDirectoryPtrOutput {
	return o.ApplyT(func(v *AccessPoint) AccessPointRootDirectoryPtrOutput { return v.RootDirectory }).(AccessPointRootDirectoryPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessPointInput)(nil)).Elem(), &AccessPoint{})
	pulumi.RegisterOutputType(AccessPointOutput{})
}
