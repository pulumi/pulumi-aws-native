// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fis

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The actions for the experiment.
type ExperimentTemplateActionMap struct {
}

// ExperimentTemplateActionMapInput is an input type that accepts ExperimentTemplateActionMap and ExperimentTemplateActionMapOutput values.
// You can construct a concrete instance of `ExperimentTemplateActionMapInput` via:
//
//          ExperimentTemplateActionMap{ "key": ExperimentTemplateActionArgs{...} }
type ExperimentTemplateActionMapInput interface {
	pulumi.Input

	ToExperimentTemplateActionMapOutput() ExperimentTemplateActionMapOutput
	ToExperimentTemplateActionMapOutputWithContext(context.Context) ExperimentTemplateActionMapOutput
}

// The actions for the experiment.
type ExperimentTemplateActionMapArgs struct {
}

func (ExperimentTemplateActionMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentTemplateActionMap)(nil)).Elem()
}

func (i ExperimentTemplateActionMapArgs) ToExperimentTemplateActionMapOutput() ExperimentTemplateActionMapOutput {
	return i.ToExperimentTemplateActionMapOutputWithContext(context.Background())
}

func (i ExperimentTemplateActionMapArgs) ToExperimentTemplateActionMapOutputWithContext(ctx context.Context) ExperimentTemplateActionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentTemplateActionMapOutput)
}

func (i ExperimentTemplateActionMapArgs) ToExperimentTemplateActionMapPtrOutput() ExperimentTemplateActionMapPtrOutput {
	return i.ToExperimentTemplateActionMapPtrOutputWithContext(context.Background())
}

func (i ExperimentTemplateActionMapArgs) ToExperimentTemplateActionMapPtrOutputWithContext(ctx context.Context) ExperimentTemplateActionMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentTemplateActionMapOutput).ToExperimentTemplateActionMapPtrOutputWithContext(ctx)
}

// ExperimentTemplateActionMapPtrInput is an input type that accepts ExperimentTemplateActionMapArgs, ExperimentTemplateActionMapPtr and ExperimentTemplateActionMapPtrOutput values.
// You can construct a concrete instance of `ExperimentTemplateActionMapPtrInput` via:
//
//          ExperimentTemplateActionMapArgs{...}
//
//  or:
//
//          nil
type ExperimentTemplateActionMapPtrInput interface {
	pulumi.Input

	ToExperimentTemplateActionMapPtrOutput() ExperimentTemplateActionMapPtrOutput
	ToExperimentTemplateActionMapPtrOutputWithContext(context.Context) ExperimentTemplateActionMapPtrOutput
}

type experimentTemplateActionMapPtrType ExperimentTemplateActionMapArgs

func ExperimentTemplateActionMapPtr(v *ExperimentTemplateActionMapArgs) ExperimentTemplateActionMapPtrInput {
	return (*experimentTemplateActionMapPtrType)(v)
}

func (*experimentTemplateActionMapPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExperimentTemplateActionMap)(nil)).Elem()
}

func (i *experimentTemplateActionMapPtrType) ToExperimentTemplateActionMapPtrOutput() ExperimentTemplateActionMapPtrOutput {
	return i.ToExperimentTemplateActionMapPtrOutputWithContext(context.Background())
}

func (i *experimentTemplateActionMapPtrType) ToExperimentTemplateActionMapPtrOutputWithContext(ctx context.Context) ExperimentTemplateActionMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentTemplateActionMapPtrOutput)
}

// The actions for the experiment.
type ExperimentTemplateActionMapOutput struct{ *pulumi.OutputState }

func (ExperimentTemplateActionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentTemplateActionMap)(nil)).Elem()
}

func (o ExperimentTemplateActionMapOutput) ToExperimentTemplateActionMapOutput() ExperimentTemplateActionMapOutput {
	return o
}

func (o ExperimentTemplateActionMapOutput) ToExperimentTemplateActionMapOutputWithContext(ctx context.Context) ExperimentTemplateActionMapOutput {
	return o
}

func (o ExperimentTemplateActionMapOutput) ToExperimentTemplateActionMapPtrOutput() ExperimentTemplateActionMapPtrOutput {
	return o.ToExperimentTemplateActionMapPtrOutputWithContext(context.Background())
}

func (o ExperimentTemplateActionMapOutput) ToExperimentTemplateActionMapPtrOutputWithContext(ctx context.Context) ExperimentTemplateActionMapPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExperimentTemplateActionMap) *ExperimentTemplateActionMap {
		return &v
	}).(ExperimentTemplateActionMapPtrOutput)
}

type ExperimentTemplateActionMapPtrOutput struct{ *pulumi.OutputState }

func (ExperimentTemplateActionMapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExperimentTemplateActionMap)(nil)).Elem()
}

func (o ExperimentTemplateActionMapPtrOutput) ToExperimentTemplateActionMapPtrOutput() ExperimentTemplateActionMapPtrOutput {
	return o
}

func (o ExperimentTemplateActionMapPtrOutput) ToExperimentTemplateActionMapPtrOutputWithContext(ctx context.Context) ExperimentTemplateActionMapPtrOutput {
	return o
}

func (o ExperimentTemplateActionMapPtrOutput) Elem() ExperimentTemplateActionMapOutput {
	return o.ApplyT(func(v *ExperimentTemplateActionMap) ExperimentTemplateActionMap {
		if v != nil {
			return *v
		}
		var ret ExperimentTemplateActionMap
		return ret
	}).(ExperimentTemplateActionMapOutput)
}

type ExperimentTemplateStopCondition struct {
	Source string  `pulumi:"source"`
	Value  *string `pulumi:"value"`
}

// ExperimentTemplateStopConditionInput is an input type that accepts ExperimentTemplateStopConditionArgs and ExperimentTemplateStopConditionOutput values.
// You can construct a concrete instance of `ExperimentTemplateStopConditionInput` via:
//
//          ExperimentTemplateStopConditionArgs{...}
type ExperimentTemplateStopConditionInput interface {
	pulumi.Input

	ToExperimentTemplateStopConditionOutput() ExperimentTemplateStopConditionOutput
	ToExperimentTemplateStopConditionOutputWithContext(context.Context) ExperimentTemplateStopConditionOutput
}

type ExperimentTemplateStopConditionArgs struct {
	Source pulumi.StringInput    `pulumi:"source"`
	Value  pulumi.StringPtrInput `pulumi:"value"`
}

func (ExperimentTemplateStopConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentTemplateStopCondition)(nil)).Elem()
}

func (i ExperimentTemplateStopConditionArgs) ToExperimentTemplateStopConditionOutput() ExperimentTemplateStopConditionOutput {
	return i.ToExperimentTemplateStopConditionOutputWithContext(context.Background())
}

func (i ExperimentTemplateStopConditionArgs) ToExperimentTemplateStopConditionOutputWithContext(ctx context.Context) ExperimentTemplateStopConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentTemplateStopConditionOutput)
}

// ExperimentTemplateStopConditionArrayInput is an input type that accepts ExperimentTemplateStopConditionArray and ExperimentTemplateStopConditionArrayOutput values.
// You can construct a concrete instance of `ExperimentTemplateStopConditionArrayInput` via:
//
//          ExperimentTemplateStopConditionArray{ ExperimentTemplateStopConditionArgs{...} }
type ExperimentTemplateStopConditionArrayInput interface {
	pulumi.Input

	ToExperimentTemplateStopConditionArrayOutput() ExperimentTemplateStopConditionArrayOutput
	ToExperimentTemplateStopConditionArrayOutputWithContext(context.Context) ExperimentTemplateStopConditionArrayOutput
}

type ExperimentTemplateStopConditionArray []ExperimentTemplateStopConditionInput

func (ExperimentTemplateStopConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExperimentTemplateStopCondition)(nil)).Elem()
}

func (i ExperimentTemplateStopConditionArray) ToExperimentTemplateStopConditionArrayOutput() ExperimentTemplateStopConditionArrayOutput {
	return i.ToExperimentTemplateStopConditionArrayOutputWithContext(context.Background())
}

func (i ExperimentTemplateStopConditionArray) ToExperimentTemplateStopConditionArrayOutputWithContext(ctx context.Context) ExperimentTemplateStopConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentTemplateStopConditionArrayOutput)
}

type ExperimentTemplateStopConditionOutput struct{ *pulumi.OutputState }

func (ExperimentTemplateStopConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentTemplateStopCondition)(nil)).Elem()
}

func (o ExperimentTemplateStopConditionOutput) ToExperimentTemplateStopConditionOutput() ExperimentTemplateStopConditionOutput {
	return o
}

func (o ExperimentTemplateStopConditionOutput) ToExperimentTemplateStopConditionOutputWithContext(ctx context.Context) ExperimentTemplateStopConditionOutput {
	return o
}

func (o ExperimentTemplateStopConditionOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v ExperimentTemplateStopCondition) string { return v.Source }).(pulumi.StringOutput)
}

func (o ExperimentTemplateStopConditionOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExperimentTemplateStopCondition) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ExperimentTemplateStopConditionArrayOutput struct{ *pulumi.OutputState }

func (ExperimentTemplateStopConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExperimentTemplateStopCondition)(nil)).Elem()
}

func (o ExperimentTemplateStopConditionArrayOutput) ToExperimentTemplateStopConditionArrayOutput() ExperimentTemplateStopConditionArrayOutput {
	return o
}

func (o ExperimentTemplateStopConditionArrayOutput) ToExperimentTemplateStopConditionArrayOutputWithContext(ctx context.Context) ExperimentTemplateStopConditionArrayOutput {
	return o
}

func (o ExperimentTemplateStopConditionArrayOutput) Index(i pulumi.IntInput) ExperimentTemplateStopConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExperimentTemplateStopCondition {
		return vs[0].([]ExperimentTemplateStopCondition)[vs[1].(int)]
	}).(ExperimentTemplateStopConditionOutput)
}

// The targets for the experiment.
type ExperimentTemplateTargetMap struct {
}

// ExperimentTemplateTargetMapInput is an input type that accepts ExperimentTemplateTargetMap and ExperimentTemplateTargetMapOutput values.
// You can construct a concrete instance of `ExperimentTemplateTargetMapInput` via:
//
//          ExperimentTemplateTargetMap{ "key": ExperimentTemplateTargetArgs{...} }
type ExperimentTemplateTargetMapInput interface {
	pulumi.Input

	ToExperimentTemplateTargetMapOutput() ExperimentTemplateTargetMapOutput
	ToExperimentTemplateTargetMapOutputWithContext(context.Context) ExperimentTemplateTargetMapOutput
}

// The targets for the experiment.
type ExperimentTemplateTargetMapArgs struct {
}

func (ExperimentTemplateTargetMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentTemplateTargetMap)(nil)).Elem()
}

func (i ExperimentTemplateTargetMapArgs) ToExperimentTemplateTargetMapOutput() ExperimentTemplateTargetMapOutput {
	return i.ToExperimentTemplateTargetMapOutputWithContext(context.Background())
}

func (i ExperimentTemplateTargetMapArgs) ToExperimentTemplateTargetMapOutputWithContext(ctx context.Context) ExperimentTemplateTargetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentTemplateTargetMapOutput)
}

// The targets for the experiment.
type ExperimentTemplateTargetMapOutput struct{ *pulumi.OutputState }

func (ExperimentTemplateTargetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentTemplateTargetMap)(nil)).Elem()
}

func (o ExperimentTemplateTargetMapOutput) ToExperimentTemplateTargetMapOutput() ExperimentTemplateTargetMapOutput {
	return o
}

func (o ExperimentTemplateTargetMapOutput) ToExperimentTemplateTargetMapOutputWithContext(ctx context.Context) ExperimentTemplateTargetMapOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentTemplateActionMapInput)(nil)).Elem(), ExperimentTemplateActionMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentTemplateActionMapPtrInput)(nil)).Elem(), ExperimentTemplateActionMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentTemplateStopConditionInput)(nil)).Elem(), ExperimentTemplateStopConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentTemplateStopConditionArrayInput)(nil)).Elem(), ExperimentTemplateStopConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentTemplateTargetMapInput)(nil)).Elem(), ExperimentTemplateTargetMapArgs{})
	pulumi.RegisterOutputType(ExperimentTemplateActionMapOutput{})
	pulumi.RegisterOutputType(ExperimentTemplateActionMapPtrOutput{})
	pulumi.RegisterOutputType(ExperimentTemplateStopConditionOutput{})
	pulumi.RegisterOutputType(ExperimentTemplateStopConditionArrayOutput{})
	pulumi.RegisterOutputType(ExperimentTemplateTargetMapOutput{})
}
