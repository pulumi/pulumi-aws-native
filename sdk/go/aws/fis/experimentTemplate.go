// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fis

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for AWS::FIS::ExperimentTemplate
//
// ## Example Usage
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/fis"
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/iam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fisRole, err := iam.NewRole(ctx, "fisRole", &iam.RoleArgs{
//				AssumeRolePolicyDocument: pulumi.Any(map[string]interface{}{
//					"version": "2012-10-17",
//					"statement": []map[string]interface{}{
//						map[string]interface{}{
//							"effect": "Allow",
//							"principal": map[string]interface{}{
//								"service": "fis.amazonaws.com",
//							},
//							"action": "sts:AssumeRole",
//						},
//					},
//				}),
//				Policies: iam.RolePolicyTypeArray{
//					&iam.RolePolicyTypeArgs{
//						PolicyName: pulumi.String("FISRoleEC2Actions"),
//						PolicyDocument: pulumi.Any(map[string]interface{}{
//							"version": "2012-10-17",
//							"statement": []map[string]interface{}{
//								map[string]interface{}{
//									"effect": "Allow",
//									"action": []string{
//										"ec2:RebootInstances",
//										"ec2:StopInstances",
//										"ec2:StartInstances",
//										"ec2:TerminateInstances",
//									},
//									"resource": "arn:aws:ec2:*:*:instance/*",
//								},
//							},
//						}),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = fis.NewExperimentTemplate(ctx, "experimentTemplate", &fis.ExperimentTemplateArgs{
//				Description: pulumi.String("stop an instance based on a tag"),
//				Actions: fis.ExperimentTemplateActionMap{
//					"stopInstances": &fis.ExperimentTemplateActionArgs{
//						ActionId: pulumi.String("aws:ec2:stop-instances"),
//						Parameters: pulumi.StringMap{
//							"startInstancesAfterDuration": pulumi.String("PT2M"),
//						},
//						Targets: pulumi.StringMap{
//							"instances": pulumi.String("oneRandomInstance"),
//						},
//					},
//				},
//				Targets: fis.ExperimentTemplateTargetMap{
//					"oneRandomInstance": &fis.ExperimentTemplateTargetArgs{
//						ResourceTags: pulumi.StringMap{
//							"env": pulumi.String("prod"),
//						},
//						ResourceType:  pulumi.String("aws:ec2:instance"),
//						SelectionMode: pulumi.String("COUNT(1)"),
//					},
//				},
//				StopConditions: fis.ExperimentTemplateStopConditionArray{
//					&fis.ExperimentTemplateStopConditionArgs{
//						Source: pulumi.String("none"),
//					},
//				},
//				Tags: pulumi.StringMap{
//					"name": pulumi.String("fisStopInstances"),
//				},
//				RoleArn: fisRole.Arn,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ExperimentTemplate struct {
	pulumi.CustomResourceState

	// The actions for the experiment.
	Actions ExperimentTemplateActionMapOutput `pulumi:"actions"`
	// The ID of the experiment template.
	AwsId pulumi.StringOutput `pulumi:"awsId"`
	// The description for the experiment template.
	Description pulumi.StringOutput `pulumi:"description"`
	// The experiment options for an experiment template.
	ExperimentOptions ExperimentTemplateExperimentOptionsPtrOutput `pulumi:"experimentOptions"`
	// The configuration for experiment logging.
	LogConfiguration ExperimentTemplateLogConfigurationPtrOutput `pulumi:"logConfiguration"`
	// The Amazon Resource Name (ARN) of an IAM role.
	RoleArn pulumi.StringOutput `pulumi:"roleArn"`
	// The stop conditions for the experiment.
	StopConditions ExperimentTemplateStopConditionArrayOutput `pulumi:"stopConditions"`
	// The tags for the experiment template.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The targets for the experiment.
	Targets ExperimentTemplateTargetMapOutput `pulumi:"targets"`
}

// NewExperimentTemplate registers a new resource with the given unique name, arguments, and options.
func NewExperimentTemplate(ctx *pulumi.Context,
	name string, args *ExperimentTemplateArgs, opts ...pulumi.ResourceOption) (*ExperimentTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	if args.StopConditions == nil {
		return nil, errors.New("invalid value for required argument 'StopConditions'")
	}
	if args.Tags == nil {
		return nil, errors.New("invalid value for required argument 'Tags'")
	}
	if args.Targets == nil {
		return nil, errors.New("invalid value for required argument 'Targets'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"experimentOptions.accountTargeting",
		"tags.*",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ExperimentTemplate
	err := ctx.RegisterResource("aws-native:fis:ExperimentTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExperimentTemplate gets an existing ExperimentTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExperimentTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExperimentTemplateState, opts ...pulumi.ResourceOption) (*ExperimentTemplate, error) {
	var resource ExperimentTemplate
	err := ctx.ReadResource("aws-native:fis:ExperimentTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ExperimentTemplate resources.
type experimentTemplateState struct {
}

type ExperimentTemplateState struct {
}

func (ExperimentTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*experimentTemplateState)(nil)).Elem()
}

type experimentTemplateArgs struct {
	// The actions for the experiment.
	Actions map[string]ExperimentTemplateAction `pulumi:"actions"`
	// The description for the experiment template.
	Description string `pulumi:"description"`
	// The experiment options for an experiment template.
	ExperimentOptions *ExperimentTemplateExperimentOptions `pulumi:"experimentOptions"`
	// The configuration for experiment logging.
	LogConfiguration *ExperimentTemplateLogConfiguration `pulumi:"logConfiguration"`
	// The Amazon Resource Name (ARN) of an IAM role.
	RoleArn string `pulumi:"roleArn"`
	// The stop conditions for the experiment.
	StopConditions []ExperimentTemplateStopCondition `pulumi:"stopConditions"`
	// The tags for the experiment template.
	Tags map[string]string `pulumi:"tags"`
	// The targets for the experiment.
	Targets map[string]ExperimentTemplateTarget `pulumi:"targets"`
}

// The set of arguments for constructing a ExperimentTemplate resource.
type ExperimentTemplateArgs struct {
	// The actions for the experiment.
	Actions ExperimentTemplateActionMapInput
	// The description for the experiment template.
	Description pulumi.StringInput
	// The experiment options for an experiment template.
	ExperimentOptions ExperimentTemplateExperimentOptionsPtrInput
	// The configuration for experiment logging.
	LogConfiguration ExperimentTemplateLogConfigurationPtrInput
	// The Amazon Resource Name (ARN) of an IAM role.
	RoleArn pulumi.StringInput
	// The stop conditions for the experiment.
	StopConditions ExperimentTemplateStopConditionArrayInput
	// The tags for the experiment template.
	Tags pulumi.StringMapInput
	// The targets for the experiment.
	Targets ExperimentTemplateTargetMapInput
}

func (ExperimentTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*experimentTemplateArgs)(nil)).Elem()
}

type ExperimentTemplateInput interface {
	pulumi.Input

	ToExperimentTemplateOutput() ExperimentTemplateOutput
	ToExperimentTemplateOutputWithContext(ctx context.Context) ExperimentTemplateOutput
}

func (*ExperimentTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**ExperimentTemplate)(nil)).Elem()
}

func (i *ExperimentTemplate) ToExperimentTemplateOutput() ExperimentTemplateOutput {
	return i.ToExperimentTemplateOutputWithContext(context.Background())
}

func (i *ExperimentTemplate) ToExperimentTemplateOutputWithContext(ctx context.Context) ExperimentTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentTemplateOutput)
}

type ExperimentTemplateOutput struct{ *pulumi.OutputState }

func (ExperimentTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExperimentTemplate)(nil)).Elem()
}

func (o ExperimentTemplateOutput) ToExperimentTemplateOutput() ExperimentTemplateOutput {
	return o
}

func (o ExperimentTemplateOutput) ToExperimentTemplateOutputWithContext(ctx context.Context) ExperimentTemplateOutput {
	return o
}

// The actions for the experiment.
func (o ExperimentTemplateOutput) Actions() ExperimentTemplateActionMapOutput {
	return o.ApplyT(func(v *ExperimentTemplate) ExperimentTemplateActionMapOutput { return v.Actions }).(ExperimentTemplateActionMapOutput)
}

// The ID of the experiment template.
func (o ExperimentTemplateOutput) AwsId() pulumi.StringOutput {
	return o.ApplyT(func(v *ExperimentTemplate) pulumi.StringOutput { return v.AwsId }).(pulumi.StringOutput)
}

// The description for the experiment template.
func (o ExperimentTemplateOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *ExperimentTemplate) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The experiment options for an experiment template.
func (o ExperimentTemplateOutput) ExperimentOptions() ExperimentTemplateExperimentOptionsPtrOutput {
	return o.ApplyT(func(v *ExperimentTemplate) ExperimentTemplateExperimentOptionsPtrOutput { return v.ExperimentOptions }).(ExperimentTemplateExperimentOptionsPtrOutput)
}

// The configuration for experiment logging.
func (o ExperimentTemplateOutput) LogConfiguration() ExperimentTemplateLogConfigurationPtrOutput {
	return o.ApplyT(func(v *ExperimentTemplate) ExperimentTemplateLogConfigurationPtrOutput { return v.LogConfiguration }).(ExperimentTemplateLogConfigurationPtrOutput)
}

// The Amazon Resource Name (ARN) of an IAM role.
func (o ExperimentTemplateOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *ExperimentTemplate) pulumi.StringOutput { return v.RoleArn }).(pulumi.StringOutput)
}

// The stop conditions for the experiment.
func (o ExperimentTemplateOutput) StopConditions() ExperimentTemplateStopConditionArrayOutput {
	return o.ApplyT(func(v *ExperimentTemplate) ExperimentTemplateStopConditionArrayOutput { return v.StopConditions }).(ExperimentTemplateStopConditionArrayOutput)
}

// The tags for the experiment template.
func (o ExperimentTemplateOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ExperimentTemplate) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The targets for the experiment.
func (o ExperimentTemplateOutput) Targets() ExperimentTemplateTargetMapOutput {
	return o.ApplyT(func(v *ExperimentTemplate) ExperimentTemplateTargetMapOutput { return v.Targets }).(ExperimentTemplateTargetMapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentTemplateInput)(nil)).Elem(), &ExperimentTemplate{})
	pulumi.RegisterOutputType(ExperimentTemplateOutput{})
}
