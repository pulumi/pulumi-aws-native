// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package wafregional

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ByteMatchSetByteMatchTuple struct {
	FieldToMatch         ByteMatchSetFieldToMatch `pulumi:"fieldToMatch"`
	PositionalConstraint string                   `pulumi:"positionalConstraint"`
	TargetString         *string                  `pulumi:"targetString"`
	TargetStringBase64   *string                  `pulumi:"targetStringBase64"`
	TextTransformation   string                   `pulumi:"textTransformation"`
}

// ByteMatchSetByteMatchTupleInput is an input type that accepts ByteMatchSetByteMatchTupleArgs and ByteMatchSetByteMatchTupleOutput values.
// You can construct a concrete instance of `ByteMatchSetByteMatchTupleInput` via:
//
//          ByteMatchSetByteMatchTupleArgs{...}
type ByteMatchSetByteMatchTupleInput interface {
	pulumi.Input

	ToByteMatchSetByteMatchTupleOutput() ByteMatchSetByteMatchTupleOutput
	ToByteMatchSetByteMatchTupleOutputWithContext(context.Context) ByteMatchSetByteMatchTupleOutput
}

type ByteMatchSetByteMatchTupleArgs struct {
	FieldToMatch         ByteMatchSetFieldToMatchInput `pulumi:"fieldToMatch"`
	PositionalConstraint pulumi.StringInput            `pulumi:"positionalConstraint"`
	TargetString         pulumi.StringPtrInput         `pulumi:"targetString"`
	TargetStringBase64   pulumi.StringPtrInput         `pulumi:"targetStringBase64"`
	TextTransformation   pulumi.StringInput            `pulumi:"textTransformation"`
}

func (ByteMatchSetByteMatchTupleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ByteMatchSetByteMatchTuple)(nil)).Elem()
}

func (i ByteMatchSetByteMatchTupleArgs) ToByteMatchSetByteMatchTupleOutput() ByteMatchSetByteMatchTupleOutput {
	return i.ToByteMatchSetByteMatchTupleOutputWithContext(context.Background())
}

func (i ByteMatchSetByteMatchTupleArgs) ToByteMatchSetByteMatchTupleOutputWithContext(ctx context.Context) ByteMatchSetByteMatchTupleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ByteMatchSetByteMatchTupleOutput)
}

// ByteMatchSetByteMatchTupleArrayInput is an input type that accepts ByteMatchSetByteMatchTupleArray and ByteMatchSetByteMatchTupleArrayOutput values.
// You can construct a concrete instance of `ByteMatchSetByteMatchTupleArrayInput` via:
//
//          ByteMatchSetByteMatchTupleArray{ ByteMatchSetByteMatchTupleArgs{...} }
type ByteMatchSetByteMatchTupleArrayInput interface {
	pulumi.Input

	ToByteMatchSetByteMatchTupleArrayOutput() ByteMatchSetByteMatchTupleArrayOutput
	ToByteMatchSetByteMatchTupleArrayOutputWithContext(context.Context) ByteMatchSetByteMatchTupleArrayOutput
}

type ByteMatchSetByteMatchTupleArray []ByteMatchSetByteMatchTupleInput

func (ByteMatchSetByteMatchTupleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ByteMatchSetByteMatchTuple)(nil)).Elem()
}

func (i ByteMatchSetByteMatchTupleArray) ToByteMatchSetByteMatchTupleArrayOutput() ByteMatchSetByteMatchTupleArrayOutput {
	return i.ToByteMatchSetByteMatchTupleArrayOutputWithContext(context.Background())
}

func (i ByteMatchSetByteMatchTupleArray) ToByteMatchSetByteMatchTupleArrayOutputWithContext(ctx context.Context) ByteMatchSetByteMatchTupleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ByteMatchSetByteMatchTupleArrayOutput)
}

type ByteMatchSetByteMatchTupleOutput struct{ *pulumi.OutputState }

func (ByteMatchSetByteMatchTupleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ByteMatchSetByteMatchTuple)(nil)).Elem()
}

func (o ByteMatchSetByteMatchTupleOutput) ToByteMatchSetByteMatchTupleOutput() ByteMatchSetByteMatchTupleOutput {
	return o
}

func (o ByteMatchSetByteMatchTupleOutput) ToByteMatchSetByteMatchTupleOutputWithContext(ctx context.Context) ByteMatchSetByteMatchTupleOutput {
	return o
}

func (o ByteMatchSetByteMatchTupleOutput) FieldToMatch() ByteMatchSetFieldToMatchOutput {
	return o.ApplyT(func(v ByteMatchSetByteMatchTuple) ByteMatchSetFieldToMatch { return v.FieldToMatch }).(ByteMatchSetFieldToMatchOutput)
}

func (o ByteMatchSetByteMatchTupleOutput) PositionalConstraint() pulumi.StringOutput {
	return o.ApplyT(func(v ByteMatchSetByteMatchTuple) string { return v.PositionalConstraint }).(pulumi.StringOutput)
}

func (o ByteMatchSetByteMatchTupleOutput) TargetString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ByteMatchSetByteMatchTuple) *string { return v.TargetString }).(pulumi.StringPtrOutput)
}

func (o ByteMatchSetByteMatchTupleOutput) TargetStringBase64() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ByteMatchSetByteMatchTuple) *string { return v.TargetStringBase64 }).(pulumi.StringPtrOutput)
}

func (o ByteMatchSetByteMatchTupleOutput) TextTransformation() pulumi.StringOutput {
	return o.ApplyT(func(v ByteMatchSetByteMatchTuple) string { return v.TextTransformation }).(pulumi.StringOutput)
}

type ByteMatchSetByteMatchTupleArrayOutput struct{ *pulumi.OutputState }

func (ByteMatchSetByteMatchTupleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ByteMatchSetByteMatchTuple)(nil)).Elem()
}

func (o ByteMatchSetByteMatchTupleArrayOutput) ToByteMatchSetByteMatchTupleArrayOutput() ByteMatchSetByteMatchTupleArrayOutput {
	return o
}

func (o ByteMatchSetByteMatchTupleArrayOutput) ToByteMatchSetByteMatchTupleArrayOutputWithContext(ctx context.Context) ByteMatchSetByteMatchTupleArrayOutput {
	return o
}

func (o ByteMatchSetByteMatchTupleArrayOutput) Index(i pulumi.IntInput) ByteMatchSetByteMatchTupleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ByteMatchSetByteMatchTuple {
		return vs[0].([]ByteMatchSetByteMatchTuple)[vs[1].(int)]
	}).(ByteMatchSetByteMatchTupleOutput)
}

type ByteMatchSetFieldToMatch struct {
	Data *string `pulumi:"data"`
	Type string  `pulumi:"type"`
}

// ByteMatchSetFieldToMatchInput is an input type that accepts ByteMatchSetFieldToMatchArgs and ByteMatchSetFieldToMatchOutput values.
// You can construct a concrete instance of `ByteMatchSetFieldToMatchInput` via:
//
//          ByteMatchSetFieldToMatchArgs{...}
type ByteMatchSetFieldToMatchInput interface {
	pulumi.Input

	ToByteMatchSetFieldToMatchOutput() ByteMatchSetFieldToMatchOutput
	ToByteMatchSetFieldToMatchOutputWithContext(context.Context) ByteMatchSetFieldToMatchOutput
}

type ByteMatchSetFieldToMatchArgs struct {
	Data pulumi.StringPtrInput `pulumi:"data"`
	Type pulumi.StringInput    `pulumi:"type"`
}

func (ByteMatchSetFieldToMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ByteMatchSetFieldToMatch)(nil)).Elem()
}

func (i ByteMatchSetFieldToMatchArgs) ToByteMatchSetFieldToMatchOutput() ByteMatchSetFieldToMatchOutput {
	return i.ToByteMatchSetFieldToMatchOutputWithContext(context.Background())
}

func (i ByteMatchSetFieldToMatchArgs) ToByteMatchSetFieldToMatchOutputWithContext(ctx context.Context) ByteMatchSetFieldToMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ByteMatchSetFieldToMatchOutput)
}

type ByteMatchSetFieldToMatchOutput struct{ *pulumi.OutputState }

func (ByteMatchSetFieldToMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ByteMatchSetFieldToMatch)(nil)).Elem()
}

func (o ByteMatchSetFieldToMatchOutput) ToByteMatchSetFieldToMatchOutput() ByteMatchSetFieldToMatchOutput {
	return o
}

func (o ByteMatchSetFieldToMatchOutput) ToByteMatchSetFieldToMatchOutputWithContext(ctx context.Context) ByteMatchSetFieldToMatchOutput {
	return o
}

func (o ByteMatchSetFieldToMatchOutput) Data() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ByteMatchSetFieldToMatch) *string { return v.Data }).(pulumi.StringPtrOutput)
}

func (o ByteMatchSetFieldToMatchOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ByteMatchSetFieldToMatch) string { return v.Type }).(pulumi.StringOutput)
}

type GeoMatchSetGeoMatchConstraint struct {
	Type  string `pulumi:"type"`
	Value string `pulumi:"value"`
}

// GeoMatchSetGeoMatchConstraintInput is an input type that accepts GeoMatchSetGeoMatchConstraintArgs and GeoMatchSetGeoMatchConstraintOutput values.
// You can construct a concrete instance of `GeoMatchSetGeoMatchConstraintInput` via:
//
//          GeoMatchSetGeoMatchConstraintArgs{...}
type GeoMatchSetGeoMatchConstraintInput interface {
	pulumi.Input

	ToGeoMatchSetGeoMatchConstraintOutput() GeoMatchSetGeoMatchConstraintOutput
	ToGeoMatchSetGeoMatchConstraintOutputWithContext(context.Context) GeoMatchSetGeoMatchConstraintOutput
}

type GeoMatchSetGeoMatchConstraintArgs struct {
	Type  pulumi.StringInput `pulumi:"type"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (GeoMatchSetGeoMatchConstraintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GeoMatchSetGeoMatchConstraint)(nil)).Elem()
}

func (i GeoMatchSetGeoMatchConstraintArgs) ToGeoMatchSetGeoMatchConstraintOutput() GeoMatchSetGeoMatchConstraintOutput {
	return i.ToGeoMatchSetGeoMatchConstraintOutputWithContext(context.Background())
}

func (i GeoMatchSetGeoMatchConstraintArgs) ToGeoMatchSetGeoMatchConstraintOutputWithContext(ctx context.Context) GeoMatchSetGeoMatchConstraintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GeoMatchSetGeoMatchConstraintOutput)
}

// GeoMatchSetGeoMatchConstraintArrayInput is an input type that accepts GeoMatchSetGeoMatchConstraintArray and GeoMatchSetGeoMatchConstraintArrayOutput values.
// You can construct a concrete instance of `GeoMatchSetGeoMatchConstraintArrayInput` via:
//
//          GeoMatchSetGeoMatchConstraintArray{ GeoMatchSetGeoMatchConstraintArgs{...} }
type GeoMatchSetGeoMatchConstraintArrayInput interface {
	pulumi.Input

	ToGeoMatchSetGeoMatchConstraintArrayOutput() GeoMatchSetGeoMatchConstraintArrayOutput
	ToGeoMatchSetGeoMatchConstraintArrayOutputWithContext(context.Context) GeoMatchSetGeoMatchConstraintArrayOutput
}

type GeoMatchSetGeoMatchConstraintArray []GeoMatchSetGeoMatchConstraintInput

func (GeoMatchSetGeoMatchConstraintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GeoMatchSetGeoMatchConstraint)(nil)).Elem()
}

func (i GeoMatchSetGeoMatchConstraintArray) ToGeoMatchSetGeoMatchConstraintArrayOutput() GeoMatchSetGeoMatchConstraintArrayOutput {
	return i.ToGeoMatchSetGeoMatchConstraintArrayOutputWithContext(context.Background())
}

func (i GeoMatchSetGeoMatchConstraintArray) ToGeoMatchSetGeoMatchConstraintArrayOutputWithContext(ctx context.Context) GeoMatchSetGeoMatchConstraintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GeoMatchSetGeoMatchConstraintArrayOutput)
}

type GeoMatchSetGeoMatchConstraintOutput struct{ *pulumi.OutputState }

func (GeoMatchSetGeoMatchConstraintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GeoMatchSetGeoMatchConstraint)(nil)).Elem()
}

func (o GeoMatchSetGeoMatchConstraintOutput) ToGeoMatchSetGeoMatchConstraintOutput() GeoMatchSetGeoMatchConstraintOutput {
	return o
}

func (o GeoMatchSetGeoMatchConstraintOutput) ToGeoMatchSetGeoMatchConstraintOutputWithContext(ctx context.Context) GeoMatchSetGeoMatchConstraintOutput {
	return o
}

func (o GeoMatchSetGeoMatchConstraintOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GeoMatchSetGeoMatchConstraint) string { return v.Type }).(pulumi.StringOutput)
}

func (o GeoMatchSetGeoMatchConstraintOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GeoMatchSetGeoMatchConstraint) string { return v.Value }).(pulumi.StringOutput)
}

type GeoMatchSetGeoMatchConstraintArrayOutput struct{ *pulumi.OutputState }

func (GeoMatchSetGeoMatchConstraintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GeoMatchSetGeoMatchConstraint)(nil)).Elem()
}

func (o GeoMatchSetGeoMatchConstraintArrayOutput) ToGeoMatchSetGeoMatchConstraintArrayOutput() GeoMatchSetGeoMatchConstraintArrayOutput {
	return o
}

func (o GeoMatchSetGeoMatchConstraintArrayOutput) ToGeoMatchSetGeoMatchConstraintArrayOutputWithContext(ctx context.Context) GeoMatchSetGeoMatchConstraintArrayOutput {
	return o
}

func (o GeoMatchSetGeoMatchConstraintArrayOutput) Index(i pulumi.IntInput) GeoMatchSetGeoMatchConstraintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GeoMatchSetGeoMatchConstraint {
		return vs[0].([]GeoMatchSetGeoMatchConstraint)[vs[1].(int)]
	}).(GeoMatchSetGeoMatchConstraintOutput)
}

type IPSetDescriptor struct {
	Type  string `pulumi:"type"`
	Value string `pulumi:"value"`
}

// IPSetDescriptorInput is an input type that accepts IPSetDescriptorArgs and IPSetDescriptorOutput values.
// You can construct a concrete instance of `IPSetDescriptorInput` via:
//
//          IPSetDescriptorArgs{...}
type IPSetDescriptorInput interface {
	pulumi.Input

	ToIPSetDescriptorOutput() IPSetDescriptorOutput
	ToIPSetDescriptorOutputWithContext(context.Context) IPSetDescriptorOutput
}

type IPSetDescriptorArgs struct {
	Type  pulumi.StringInput `pulumi:"type"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (IPSetDescriptorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IPSetDescriptor)(nil)).Elem()
}

func (i IPSetDescriptorArgs) ToIPSetDescriptorOutput() IPSetDescriptorOutput {
	return i.ToIPSetDescriptorOutputWithContext(context.Background())
}

func (i IPSetDescriptorArgs) ToIPSetDescriptorOutputWithContext(ctx context.Context) IPSetDescriptorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPSetDescriptorOutput)
}

// IPSetDescriptorArrayInput is an input type that accepts IPSetDescriptorArray and IPSetDescriptorArrayOutput values.
// You can construct a concrete instance of `IPSetDescriptorArrayInput` via:
//
//          IPSetDescriptorArray{ IPSetDescriptorArgs{...} }
type IPSetDescriptorArrayInput interface {
	pulumi.Input

	ToIPSetDescriptorArrayOutput() IPSetDescriptorArrayOutput
	ToIPSetDescriptorArrayOutputWithContext(context.Context) IPSetDescriptorArrayOutput
}

type IPSetDescriptorArray []IPSetDescriptorInput

func (IPSetDescriptorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IPSetDescriptor)(nil)).Elem()
}

func (i IPSetDescriptorArray) ToIPSetDescriptorArrayOutput() IPSetDescriptorArrayOutput {
	return i.ToIPSetDescriptorArrayOutputWithContext(context.Background())
}

func (i IPSetDescriptorArray) ToIPSetDescriptorArrayOutputWithContext(ctx context.Context) IPSetDescriptorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPSetDescriptorArrayOutput)
}

type IPSetDescriptorOutput struct{ *pulumi.OutputState }

func (IPSetDescriptorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IPSetDescriptor)(nil)).Elem()
}

func (o IPSetDescriptorOutput) ToIPSetDescriptorOutput() IPSetDescriptorOutput {
	return o
}

func (o IPSetDescriptorOutput) ToIPSetDescriptorOutputWithContext(ctx context.Context) IPSetDescriptorOutput {
	return o
}

func (o IPSetDescriptorOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v IPSetDescriptor) string { return v.Type }).(pulumi.StringOutput)
}

func (o IPSetDescriptorOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v IPSetDescriptor) string { return v.Value }).(pulumi.StringOutput)
}

type IPSetDescriptorArrayOutput struct{ *pulumi.OutputState }

func (IPSetDescriptorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IPSetDescriptor)(nil)).Elem()
}

func (o IPSetDescriptorArrayOutput) ToIPSetDescriptorArrayOutput() IPSetDescriptorArrayOutput {
	return o
}

func (o IPSetDescriptorArrayOutput) ToIPSetDescriptorArrayOutputWithContext(ctx context.Context) IPSetDescriptorArrayOutput {
	return o
}

func (o IPSetDescriptorArrayOutput) Index(i pulumi.IntInput) IPSetDescriptorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IPSetDescriptor {
		return vs[0].([]IPSetDescriptor)[vs[1].(int)]
	}).(IPSetDescriptorOutput)
}

type RateBasedRulePredicate struct {
	DataId  string `pulumi:"dataId"`
	Negated bool   `pulumi:"negated"`
	Type    string `pulumi:"type"`
}

// RateBasedRulePredicateInput is an input type that accepts RateBasedRulePredicateArgs and RateBasedRulePredicateOutput values.
// You can construct a concrete instance of `RateBasedRulePredicateInput` via:
//
//          RateBasedRulePredicateArgs{...}
type RateBasedRulePredicateInput interface {
	pulumi.Input

	ToRateBasedRulePredicateOutput() RateBasedRulePredicateOutput
	ToRateBasedRulePredicateOutputWithContext(context.Context) RateBasedRulePredicateOutput
}

type RateBasedRulePredicateArgs struct {
	DataId  pulumi.StringInput `pulumi:"dataId"`
	Negated pulumi.BoolInput   `pulumi:"negated"`
	Type    pulumi.StringInput `pulumi:"type"`
}

func (RateBasedRulePredicateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RateBasedRulePredicate)(nil)).Elem()
}

func (i RateBasedRulePredicateArgs) ToRateBasedRulePredicateOutput() RateBasedRulePredicateOutput {
	return i.ToRateBasedRulePredicateOutputWithContext(context.Background())
}

func (i RateBasedRulePredicateArgs) ToRateBasedRulePredicateOutputWithContext(ctx context.Context) RateBasedRulePredicateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RateBasedRulePredicateOutput)
}

// RateBasedRulePredicateArrayInput is an input type that accepts RateBasedRulePredicateArray and RateBasedRulePredicateArrayOutput values.
// You can construct a concrete instance of `RateBasedRulePredicateArrayInput` via:
//
//          RateBasedRulePredicateArray{ RateBasedRulePredicateArgs{...} }
type RateBasedRulePredicateArrayInput interface {
	pulumi.Input

	ToRateBasedRulePredicateArrayOutput() RateBasedRulePredicateArrayOutput
	ToRateBasedRulePredicateArrayOutputWithContext(context.Context) RateBasedRulePredicateArrayOutput
}

type RateBasedRulePredicateArray []RateBasedRulePredicateInput

func (RateBasedRulePredicateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RateBasedRulePredicate)(nil)).Elem()
}

func (i RateBasedRulePredicateArray) ToRateBasedRulePredicateArrayOutput() RateBasedRulePredicateArrayOutput {
	return i.ToRateBasedRulePredicateArrayOutputWithContext(context.Background())
}

func (i RateBasedRulePredicateArray) ToRateBasedRulePredicateArrayOutputWithContext(ctx context.Context) RateBasedRulePredicateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RateBasedRulePredicateArrayOutput)
}

type RateBasedRulePredicateOutput struct{ *pulumi.OutputState }

func (RateBasedRulePredicateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RateBasedRulePredicate)(nil)).Elem()
}

func (o RateBasedRulePredicateOutput) ToRateBasedRulePredicateOutput() RateBasedRulePredicateOutput {
	return o
}

func (o RateBasedRulePredicateOutput) ToRateBasedRulePredicateOutputWithContext(ctx context.Context) RateBasedRulePredicateOutput {
	return o
}

func (o RateBasedRulePredicateOutput) DataId() pulumi.StringOutput {
	return o.ApplyT(func(v RateBasedRulePredicate) string { return v.DataId }).(pulumi.StringOutput)
}

func (o RateBasedRulePredicateOutput) Negated() pulumi.BoolOutput {
	return o.ApplyT(func(v RateBasedRulePredicate) bool { return v.Negated }).(pulumi.BoolOutput)
}

func (o RateBasedRulePredicateOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RateBasedRulePredicate) string { return v.Type }).(pulumi.StringOutput)
}

type RateBasedRulePredicateArrayOutput struct{ *pulumi.OutputState }

func (RateBasedRulePredicateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RateBasedRulePredicate)(nil)).Elem()
}

func (o RateBasedRulePredicateArrayOutput) ToRateBasedRulePredicateArrayOutput() RateBasedRulePredicateArrayOutput {
	return o
}

func (o RateBasedRulePredicateArrayOutput) ToRateBasedRulePredicateArrayOutputWithContext(ctx context.Context) RateBasedRulePredicateArrayOutput {
	return o
}

func (o RateBasedRulePredicateArrayOutput) Index(i pulumi.IntInput) RateBasedRulePredicateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RateBasedRulePredicate {
		return vs[0].([]RateBasedRulePredicate)[vs[1].(int)]
	}).(RateBasedRulePredicateOutput)
}

type RulePredicate struct {
	DataId  string `pulumi:"dataId"`
	Negated bool   `pulumi:"negated"`
	Type    string `pulumi:"type"`
}

// RulePredicateInput is an input type that accepts RulePredicateArgs and RulePredicateOutput values.
// You can construct a concrete instance of `RulePredicateInput` via:
//
//          RulePredicateArgs{...}
type RulePredicateInput interface {
	pulumi.Input

	ToRulePredicateOutput() RulePredicateOutput
	ToRulePredicateOutputWithContext(context.Context) RulePredicateOutput
}

type RulePredicateArgs struct {
	DataId  pulumi.StringInput `pulumi:"dataId"`
	Negated pulumi.BoolInput   `pulumi:"negated"`
	Type    pulumi.StringInput `pulumi:"type"`
}

func (RulePredicateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RulePredicate)(nil)).Elem()
}

func (i RulePredicateArgs) ToRulePredicateOutput() RulePredicateOutput {
	return i.ToRulePredicateOutputWithContext(context.Background())
}

func (i RulePredicateArgs) ToRulePredicateOutputWithContext(ctx context.Context) RulePredicateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulePredicateOutput)
}

// RulePredicateArrayInput is an input type that accepts RulePredicateArray and RulePredicateArrayOutput values.
// You can construct a concrete instance of `RulePredicateArrayInput` via:
//
//          RulePredicateArray{ RulePredicateArgs{...} }
type RulePredicateArrayInput interface {
	pulumi.Input

	ToRulePredicateArrayOutput() RulePredicateArrayOutput
	ToRulePredicateArrayOutputWithContext(context.Context) RulePredicateArrayOutput
}

type RulePredicateArray []RulePredicateInput

func (RulePredicateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulePredicate)(nil)).Elem()
}

func (i RulePredicateArray) ToRulePredicateArrayOutput() RulePredicateArrayOutput {
	return i.ToRulePredicateArrayOutputWithContext(context.Background())
}

func (i RulePredicateArray) ToRulePredicateArrayOutputWithContext(ctx context.Context) RulePredicateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulePredicateArrayOutput)
}

type RulePredicateOutput struct{ *pulumi.OutputState }

func (RulePredicateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulePredicate)(nil)).Elem()
}

func (o RulePredicateOutput) ToRulePredicateOutput() RulePredicateOutput {
	return o
}

func (o RulePredicateOutput) ToRulePredicateOutputWithContext(ctx context.Context) RulePredicateOutput {
	return o
}

func (o RulePredicateOutput) DataId() pulumi.StringOutput {
	return o.ApplyT(func(v RulePredicate) string { return v.DataId }).(pulumi.StringOutput)
}

func (o RulePredicateOutput) Negated() pulumi.BoolOutput {
	return o.ApplyT(func(v RulePredicate) bool { return v.Negated }).(pulumi.BoolOutput)
}

func (o RulePredicateOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RulePredicate) string { return v.Type }).(pulumi.StringOutput)
}

type RulePredicateArrayOutput struct{ *pulumi.OutputState }

func (RulePredicateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulePredicate)(nil)).Elem()
}

func (o RulePredicateArrayOutput) ToRulePredicateArrayOutput() RulePredicateArrayOutput {
	return o
}

func (o RulePredicateArrayOutput) ToRulePredicateArrayOutputWithContext(ctx context.Context) RulePredicateArrayOutput {
	return o
}

func (o RulePredicateArrayOutput) Index(i pulumi.IntInput) RulePredicateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RulePredicate {
		return vs[0].([]RulePredicate)[vs[1].(int)]
	}).(RulePredicateOutput)
}

type SizeConstraintSetFieldToMatch struct {
	Data *string `pulumi:"data"`
	Type string  `pulumi:"type"`
}

// SizeConstraintSetFieldToMatchInput is an input type that accepts SizeConstraintSetFieldToMatchArgs and SizeConstraintSetFieldToMatchOutput values.
// You can construct a concrete instance of `SizeConstraintSetFieldToMatchInput` via:
//
//          SizeConstraintSetFieldToMatchArgs{...}
type SizeConstraintSetFieldToMatchInput interface {
	pulumi.Input

	ToSizeConstraintSetFieldToMatchOutput() SizeConstraintSetFieldToMatchOutput
	ToSizeConstraintSetFieldToMatchOutputWithContext(context.Context) SizeConstraintSetFieldToMatchOutput
}

type SizeConstraintSetFieldToMatchArgs struct {
	Data pulumi.StringPtrInput `pulumi:"data"`
	Type pulumi.StringInput    `pulumi:"type"`
}

func (SizeConstraintSetFieldToMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SizeConstraintSetFieldToMatch)(nil)).Elem()
}

func (i SizeConstraintSetFieldToMatchArgs) ToSizeConstraintSetFieldToMatchOutput() SizeConstraintSetFieldToMatchOutput {
	return i.ToSizeConstraintSetFieldToMatchOutputWithContext(context.Background())
}

func (i SizeConstraintSetFieldToMatchArgs) ToSizeConstraintSetFieldToMatchOutputWithContext(ctx context.Context) SizeConstraintSetFieldToMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SizeConstraintSetFieldToMatchOutput)
}

type SizeConstraintSetFieldToMatchOutput struct{ *pulumi.OutputState }

func (SizeConstraintSetFieldToMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SizeConstraintSetFieldToMatch)(nil)).Elem()
}

func (o SizeConstraintSetFieldToMatchOutput) ToSizeConstraintSetFieldToMatchOutput() SizeConstraintSetFieldToMatchOutput {
	return o
}

func (o SizeConstraintSetFieldToMatchOutput) ToSizeConstraintSetFieldToMatchOutputWithContext(ctx context.Context) SizeConstraintSetFieldToMatchOutput {
	return o
}

func (o SizeConstraintSetFieldToMatchOutput) Data() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SizeConstraintSetFieldToMatch) *string { return v.Data }).(pulumi.StringPtrOutput)
}

func (o SizeConstraintSetFieldToMatchOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SizeConstraintSetFieldToMatch) string { return v.Type }).(pulumi.StringOutput)
}

type SizeConstraintSetSizeConstraint struct {
	ComparisonOperator string                        `pulumi:"comparisonOperator"`
	FieldToMatch       SizeConstraintSetFieldToMatch `pulumi:"fieldToMatch"`
	Size               int                           `pulumi:"size"`
	TextTransformation string                        `pulumi:"textTransformation"`
}

// SizeConstraintSetSizeConstraintInput is an input type that accepts SizeConstraintSetSizeConstraintArgs and SizeConstraintSetSizeConstraintOutput values.
// You can construct a concrete instance of `SizeConstraintSetSizeConstraintInput` via:
//
//          SizeConstraintSetSizeConstraintArgs{...}
type SizeConstraintSetSizeConstraintInput interface {
	pulumi.Input

	ToSizeConstraintSetSizeConstraintOutput() SizeConstraintSetSizeConstraintOutput
	ToSizeConstraintSetSizeConstraintOutputWithContext(context.Context) SizeConstraintSetSizeConstraintOutput
}

type SizeConstraintSetSizeConstraintArgs struct {
	ComparisonOperator pulumi.StringInput                 `pulumi:"comparisonOperator"`
	FieldToMatch       SizeConstraintSetFieldToMatchInput `pulumi:"fieldToMatch"`
	Size               pulumi.IntInput                    `pulumi:"size"`
	TextTransformation pulumi.StringInput                 `pulumi:"textTransformation"`
}

func (SizeConstraintSetSizeConstraintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SizeConstraintSetSizeConstraint)(nil)).Elem()
}

func (i SizeConstraintSetSizeConstraintArgs) ToSizeConstraintSetSizeConstraintOutput() SizeConstraintSetSizeConstraintOutput {
	return i.ToSizeConstraintSetSizeConstraintOutputWithContext(context.Background())
}

func (i SizeConstraintSetSizeConstraintArgs) ToSizeConstraintSetSizeConstraintOutputWithContext(ctx context.Context) SizeConstraintSetSizeConstraintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SizeConstraintSetSizeConstraintOutput)
}

// SizeConstraintSetSizeConstraintArrayInput is an input type that accepts SizeConstraintSetSizeConstraintArray and SizeConstraintSetSizeConstraintArrayOutput values.
// You can construct a concrete instance of `SizeConstraintSetSizeConstraintArrayInput` via:
//
//          SizeConstraintSetSizeConstraintArray{ SizeConstraintSetSizeConstraintArgs{...} }
type SizeConstraintSetSizeConstraintArrayInput interface {
	pulumi.Input

	ToSizeConstraintSetSizeConstraintArrayOutput() SizeConstraintSetSizeConstraintArrayOutput
	ToSizeConstraintSetSizeConstraintArrayOutputWithContext(context.Context) SizeConstraintSetSizeConstraintArrayOutput
}

type SizeConstraintSetSizeConstraintArray []SizeConstraintSetSizeConstraintInput

func (SizeConstraintSetSizeConstraintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SizeConstraintSetSizeConstraint)(nil)).Elem()
}

func (i SizeConstraintSetSizeConstraintArray) ToSizeConstraintSetSizeConstraintArrayOutput() SizeConstraintSetSizeConstraintArrayOutput {
	return i.ToSizeConstraintSetSizeConstraintArrayOutputWithContext(context.Background())
}

func (i SizeConstraintSetSizeConstraintArray) ToSizeConstraintSetSizeConstraintArrayOutputWithContext(ctx context.Context) SizeConstraintSetSizeConstraintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SizeConstraintSetSizeConstraintArrayOutput)
}

type SizeConstraintSetSizeConstraintOutput struct{ *pulumi.OutputState }

func (SizeConstraintSetSizeConstraintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SizeConstraintSetSizeConstraint)(nil)).Elem()
}

func (o SizeConstraintSetSizeConstraintOutput) ToSizeConstraintSetSizeConstraintOutput() SizeConstraintSetSizeConstraintOutput {
	return o
}

func (o SizeConstraintSetSizeConstraintOutput) ToSizeConstraintSetSizeConstraintOutputWithContext(ctx context.Context) SizeConstraintSetSizeConstraintOutput {
	return o
}

func (o SizeConstraintSetSizeConstraintOutput) ComparisonOperator() pulumi.StringOutput {
	return o.ApplyT(func(v SizeConstraintSetSizeConstraint) string { return v.ComparisonOperator }).(pulumi.StringOutput)
}

func (o SizeConstraintSetSizeConstraintOutput) FieldToMatch() SizeConstraintSetFieldToMatchOutput {
	return o.ApplyT(func(v SizeConstraintSetSizeConstraint) SizeConstraintSetFieldToMatch { return v.FieldToMatch }).(SizeConstraintSetFieldToMatchOutput)
}

func (o SizeConstraintSetSizeConstraintOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v SizeConstraintSetSizeConstraint) int { return v.Size }).(pulumi.IntOutput)
}

func (o SizeConstraintSetSizeConstraintOutput) TextTransformation() pulumi.StringOutput {
	return o.ApplyT(func(v SizeConstraintSetSizeConstraint) string { return v.TextTransformation }).(pulumi.StringOutput)
}

type SizeConstraintSetSizeConstraintArrayOutput struct{ *pulumi.OutputState }

func (SizeConstraintSetSizeConstraintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SizeConstraintSetSizeConstraint)(nil)).Elem()
}

func (o SizeConstraintSetSizeConstraintArrayOutput) ToSizeConstraintSetSizeConstraintArrayOutput() SizeConstraintSetSizeConstraintArrayOutput {
	return o
}

func (o SizeConstraintSetSizeConstraintArrayOutput) ToSizeConstraintSetSizeConstraintArrayOutputWithContext(ctx context.Context) SizeConstraintSetSizeConstraintArrayOutput {
	return o
}

func (o SizeConstraintSetSizeConstraintArrayOutput) Index(i pulumi.IntInput) SizeConstraintSetSizeConstraintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SizeConstraintSetSizeConstraint {
		return vs[0].([]SizeConstraintSetSizeConstraint)[vs[1].(int)]
	}).(SizeConstraintSetSizeConstraintOutput)
}

type SqlInjectionMatchSetFieldToMatch struct {
	Data *string `pulumi:"data"`
	Type string  `pulumi:"type"`
}

// SqlInjectionMatchSetFieldToMatchInput is an input type that accepts SqlInjectionMatchSetFieldToMatchArgs and SqlInjectionMatchSetFieldToMatchOutput values.
// You can construct a concrete instance of `SqlInjectionMatchSetFieldToMatchInput` via:
//
//          SqlInjectionMatchSetFieldToMatchArgs{...}
type SqlInjectionMatchSetFieldToMatchInput interface {
	pulumi.Input

	ToSqlInjectionMatchSetFieldToMatchOutput() SqlInjectionMatchSetFieldToMatchOutput
	ToSqlInjectionMatchSetFieldToMatchOutputWithContext(context.Context) SqlInjectionMatchSetFieldToMatchOutput
}

type SqlInjectionMatchSetFieldToMatchArgs struct {
	Data pulumi.StringPtrInput `pulumi:"data"`
	Type pulumi.StringInput    `pulumi:"type"`
}

func (SqlInjectionMatchSetFieldToMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlInjectionMatchSetFieldToMatch)(nil)).Elem()
}

func (i SqlInjectionMatchSetFieldToMatchArgs) ToSqlInjectionMatchSetFieldToMatchOutput() SqlInjectionMatchSetFieldToMatchOutput {
	return i.ToSqlInjectionMatchSetFieldToMatchOutputWithContext(context.Background())
}

func (i SqlInjectionMatchSetFieldToMatchArgs) ToSqlInjectionMatchSetFieldToMatchOutputWithContext(ctx context.Context) SqlInjectionMatchSetFieldToMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlInjectionMatchSetFieldToMatchOutput)
}

type SqlInjectionMatchSetFieldToMatchOutput struct{ *pulumi.OutputState }

func (SqlInjectionMatchSetFieldToMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlInjectionMatchSetFieldToMatch)(nil)).Elem()
}

func (o SqlInjectionMatchSetFieldToMatchOutput) ToSqlInjectionMatchSetFieldToMatchOutput() SqlInjectionMatchSetFieldToMatchOutput {
	return o
}

func (o SqlInjectionMatchSetFieldToMatchOutput) ToSqlInjectionMatchSetFieldToMatchOutputWithContext(ctx context.Context) SqlInjectionMatchSetFieldToMatchOutput {
	return o
}

func (o SqlInjectionMatchSetFieldToMatchOutput) Data() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlInjectionMatchSetFieldToMatch) *string { return v.Data }).(pulumi.StringPtrOutput)
}

func (o SqlInjectionMatchSetFieldToMatchOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SqlInjectionMatchSetFieldToMatch) string { return v.Type }).(pulumi.StringOutput)
}

type SqlInjectionMatchSetSqlInjectionMatchTuple struct {
	FieldToMatch       SqlInjectionMatchSetFieldToMatch `pulumi:"fieldToMatch"`
	TextTransformation string                           `pulumi:"textTransformation"`
}

// SqlInjectionMatchSetSqlInjectionMatchTupleInput is an input type that accepts SqlInjectionMatchSetSqlInjectionMatchTupleArgs and SqlInjectionMatchSetSqlInjectionMatchTupleOutput values.
// You can construct a concrete instance of `SqlInjectionMatchSetSqlInjectionMatchTupleInput` via:
//
//          SqlInjectionMatchSetSqlInjectionMatchTupleArgs{...}
type SqlInjectionMatchSetSqlInjectionMatchTupleInput interface {
	pulumi.Input

	ToSqlInjectionMatchSetSqlInjectionMatchTupleOutput() SqlInjectionMatchSetSqlInjectionMatchTupleOutput
	ToSqlInjectionMatchSetSqlInjectionMatchTupleOutputWithContext(context.Context) SqlInjectionMatchSetSqlInjectionMatchTupleOutput
}

type SqlInjectionMatchSetSqlInjectionMatchTupleArgs struct {
	FieldToMatch       SqlInjectionMatchSetFieldToMatchInput `pulumi:"fieldToMatch"`
	TextTransformation pulumi.StringInput                    `pulumi:"textTransformation"`
}

func (SqlInjectionMatchSetSqlInjectionMatchTupleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlInjectionMatchSetSqlInjectionMatchTuple)(nil)).Elem()
}

func (i SqlInjectionMatchSetSqlInjectionMatchTupleArgs) ToSqlInjectionMatchSetSqlInjectionMatchTupleOutput() SqlInjectionMatchSetSqlInjectionMatchTupleOutput {
	return i.ToSqlInjectionMatchSetSqlInjectionMatchTupleOutputWithContext(context.Background())
}

func (i SqlInjectionMatchSetSqlInjectionMatchTupleArgs) ToSqlInjectionMatchSetSqlInjectionMatchTupleOutputWithContext(ctx context.Context) SqlInjectionMatchSetSqlInjectionMatchTupleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlInjectionMatchSetSqlInjectionMatchTupleOutput)
}

// SqlInjectionMatchSetSqlInjectionMatchTupleArrayInput is an input type that accepts SqlInjectionMatchSetSqlInjectionMatchTupleArray and SqlInjectionMatchSetSqlInjectionMatchTupleArrayOutput values.
// You can construct a concrete instance of `SqlInjectionMatchSetSqlInjectionMatchTupleArrayInput` via:
//
//          SqlInjectionMatchSetSqlInjectionMatchTupleArray{ SqlInjectionMatchSetSqlInjectionMatchTupleArgs{...} }
type SqlInjectionMatchSetSqlInjectionMatchTupleArrayInput interface {
	pulumi.Input

	ToSqlInjectionMatchSetSqlInjectionMatchTupleArrayOutput() SqlInjectionMatchSetSqlInjectionMatchTupleArrayOutput
	ToSqlInjectionMatchSetSqlInjectionMatchTupleArrayOutputWithContext(context.Context) SqlInjectionMatchSetSqlInjectionMatchTupleArrayOutput
}

type SqlInjectionMatchSetSqlInjectionMatchTupleArray []SqlInjectionMatchSetSqlInjectionMatchTupleInput

func (SqlInjectionMatchSetSqlInjectionMatchTupleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SqlInjectionMatchSetSqlInjectionMatchTuple)(nil)).Elem()
}

func (i SqlInjectionMatchSetSqlInjectionMatchTupleArray) ToSqlInjectionMatchSetSqlInjectionMatchTupleArrayOutput() SqlInjectionMatchSetSqlInjectionMatchTupleArrayOutput {
	return i.ToSqlInjectionMatchSetSqlInjectionMatchTupleArrayOutputWithContext(context.Background())
}

func (i SqlInjectionMatchSetSqlInjectionMatchTupleArray) ToSqlInjectionMatchSetSqlInjectionMatchTupleArrayOutputWithContext(ctx context.Context) SqlInjectionMatchSetSqlInjectionMatchTupleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlInjectionMatchSetSqlInjectionMatchTupleArrayOutput)
}

type SqlInjectionMatchSetSqlInjectionMatchTupleOutput struct{ *pulumi.OutputState }

func (SqlInjectionMatchSetSqlInjectionMatchTupleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlInjectionMatchSetSqlInjectionMatchTuple)(nil)).Elem()
}

func (o SqlInjectionMatchSetSqlInjectionMatchTupleOutput) ToSqlInjectionMatchSetSqlInjectionMatchTupleOutput() SqlInjectionMatchSetSqlInjectionMatchTupleOutput {
	return o
}

func (o SqlInjectionMatchSetSqlInjectionMatchTupleOutput) ToSqlInjectionMatchSetSqlInjectionMatchTupleOutputWithContext(ctx context.Context) SqlInjectionMatchSetSqlInjectionMatchTupleOutput {
	return o
}

func (o SqlInjectionMatchSetSqlInjectionMatchTupleOutput) FieldToMatch() SqlInjectionMatchSetFieldToMatchOutput {
	return o.ApplyT(func(v SqlInjectionMatchSetSqlInjectionMatchTuple) SqlInjectionMatchSetFieldToMatch {
		return v.FieldToMatch
	}).(SqlInjectionMatchSetFieldToMatchOutput)
}

func (o SqlInjectionMatchSetSqlInjectionMatchTupleOutput) TextTransformation() pulumi.StringOutput {
	return o.ApplyT(func(v SqlInjectionMatchSetSqlInjectionMatchTuple) string { return v.TextTransformation }).(pulumi.StringOutput)
}

type SqlInjectionMatchSetSqlInjectionMatchTupleArrayOutput struct{ *pulumi.OutputState }

func (SqlInjectionMatchSetSqlInjectionMatchTupleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SqlInjectionMatchSetSqlInjectionMatchTuple)(nil)).Elem()
}

func (o SqlInjectionMatchSetSqlInjectionMatchTupleArrayOutput) ToSqlInjectionMatchSetSqlInjectionMatchTupleArrayOutput() SqlInjectionMatchSetSqlInjectionMatchTupleArrayOutput {
	return o
}

func (o SqlInjectionMatchSetSqlInjectionMatchTupleArrayOutput) ToSqlInjectionMatchSetSqlInjectionMatchTupleArrayOutputWithContext(ctx context.Context) SqlInjectionMatchSetSqlInjectionMatchTupleArrayOutput {
	return o
}

func (o SqlInjectionMatchSetSqlInjectionMatchTupleArrayOutput) Index(i pulumi.IntInput) SqlInjectionMatchSetSqlInjectionMatchTupleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SqlInjectionMatchSetSqlInjectionMatchTuple {
		return vs[0].([]SqlInjectionMatchSetSqlInjectionMatchTuple)[vs[1].(int)]
	}).(SqlInjectionMatchSetSqlInjectionMatchTupleOutput)
}

type WebACLAction struct {
	Type string `pulumi:"type"`
}

// WebACLActionInput is an input type that accepts WebACLActionArgs and WebACLActionOutput values.
// You can construct a concrete instance of `WebACLActionInput` via:
//
//          WebACLActionArgs{...}
type WebACLActionInput interface {
	pulumi.Input

	ToWebACLActionOutput() WebACLActionOutput
	ToWebACLActionOutputWithContext(context.Context) WebACLActionOutput
}

type WebACLActionArgs struct {
	Type pulumi.StringInput `pulumi:"type"`
}

func (WebACLActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebACLAction)(nil)).Elem()
}

func (i WebACLActionArgs) ToWebACLActionOutput() WebACLActionOutput {
	return i.ToWebACLActionOutputWithContext(context.Background())
}

func (i WebACLActionArgs) ToWebACLActionOutputWithContext(ctx context.Context) WebACLActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebACLActionOutput)
}

func (i WebACLActionArgs) ToWebACLActionPtrOutput() WebACLActionPtrOutput {
	return i.ToWebACLActionPtrOutputWithContext(context.Background())
}

func (i WebACLActionArgs) ToWebACLActionPtrOutputWithContext(ctx context.Context) WebACLActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebACLActionOutput).ToWebACLActionPtrOutputWithContext(ctx)
}

// WebACLActionPtrInput is an input type that accepts WebACLActionArgs, WebACLActionPtr and WebACLActionPtrOutput values.
// You can construct a concrete instance of `WebACLActionPtrInput` via:
//
//          WebACLActionArgs{...}
//
//  or:
//
//          nil
type WebACLActionPtrInput interface {
	pulumi.Input

	ToWebACLActionPtrOutput() WebACLActionPtrOutput
	ToWebACLActionPtrOutputWithContext(context.Context) WebACLActionPtrOutput
}

type webACLActionPtrType WebACLActionArgs

func WebACLActionPtr(v *WebACLActionArgs) WebACLActionPtrInput {
	return (*webACLActionPtrType)(v)
}

func (*webACLActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebACLAction)(nil)).Elem()
}

func (i *webACLActionPtrType) ToWebACLActionPtrOutput() WebACLActionPtrOutput {
	return i.ToWebACLActionPtrOutputWithContext(context.Background())
}

func (i *webACLActionPtrType) ToWebACLActionPtrOutputWithContext(ctx context.Context) WebACLActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebACLActionPtrOutput)
}

type WebACLActionOutput struct{ *pulumi.OutputState }

func (WebACLActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebACLAction)(nil)).Elem()
}

func (o WebACLActionOutput) ToWebACLActionOutput() WebACLActionOutput {
	return o
}

func (o WebACLActionOutput) ToWebACLActionOutputWithContext(ctx context.Context) WebACLActionOutput {
	return o
}

func (o WebACLActionOutput) ToWebACLActionPtrOutput() WebACLActionPtrOutput {
	return o.ToWebACLActionPtrOutputWithContext(context.Background())
}

func (o WebACLActionOutput) ToWebACLActionPtrOutputWithContext(ctx context.Context) WebACLActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WebACLAction) *WebACLAction {
		return &v
	}).(WebACLActionPtrOutput)
}

func (o WebACLActionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v WebACLAction) string { return v.Type }).(pulumi.StringOutput)
}

type WebACLActionPtrOutput struct{ *pulumi.OutputState }

func (WebACLActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebACLAction)(nil)).Elem()
}

func (o WebACLActionPtrOutput) ToWebACLActionPtrOutput() WebACLActionPtrOutput {
	return o
}

func (o WebACLActionPtrOutput) ToWebACLActionPtrOutputWithContext(ctx context.Context) WebACLActionPtrOutput {
	return o
}

func (o WebACLActionPtrOutput) Elem() WebACLActionOutput {
	return o.ApplyT(func(v *WebACLAction) WebACLAction {
		if v != nil {
			return *v
		}
		var ret WebACLAction
		return ret
	}).(WebACLActionOutput)
}

func (o WebACLActionPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebACLAction) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type WebACLRule struct {
	Action   WebACLAction `pulumi:"action"`
	Priority int          `pulumi:"priority"`
	RuleId   string       `pulumi:"ruleId"`
}

// WebACLRuleInput is an input type that accepts WebACLRuleArgs and WebACLRuleOutput values.
// You can construct a concrete instance of `WebACLRuleInput` via:
//
//          WebACLRuleArgs{...}
type WebACLRuleInput interface {
	pulumi.Input

	ToWebACLRuleOutput() WebACLRuleOutput
	ToWebACLRuleOutputWithContext(context.Context) WebACLRuleOutput
}

type WebACLRuleArgs struct {
	Action   WebACLActionInput  `pulumi:"action"`
	Priority pulumi.IntInput    `pulumi:"priority"`
	RuleId   pulumi.StringInput `pulumi:"ruleId"`
}

func (WebACLRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebACLRule)(nil)).Elem()
}

func (i WebACLRuleArgs) ToWebACLRuleOutput() WebACLRuleOutput {
	return i.ToWebACLRuleOutputWithContext(context.Background())
}

func (i WebACLRuleArgs) ToWebACLRuleOutputWithContext(ctx context.Context) WebACLRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebACLRuleOutput)
}

// WebACLRuleArrayInput is an input type that accepts WebACLRuleArray and WebACLRuleArrayOutput values.
// You can construct a concrete instance of `WebACLRuleArrayInput` via:
//
//          WebACLRuleArray{ WebACLRuleArgs{...} }
type WebACLRuleArrayInput interface {
	pulumi.Input

	ToWebACLRuleArrayOutput() WebACLRuleArrayOutput
	ToWebACLRuleArrayOutputWithContext(context.Context) WebACLRuleArrayOutput
}

type WebACLRuleArray []WebACLRuleInput

func (WebACLRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebACLRule)(nil)).Elem()
}

func (i WebACLRuleArray) ToWebACLRuleArrayOutput() WebACLRuleArrayOutput {
	return i.ToWebACLRuleArrayOutputWithContext(context.Background())
}

func (i WebACLRuleArray) ToWebACLRuleArrayOutputWithContext(ctx context.Context) WebACLRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebACLRuleArrayOutput)
}

type WebACLRuleOutput struct{ *pulumi.OutputState }

func (WebACLRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebACLRule)(nil)).Elem()
}

func (o WebACLRuleOutput) ToWebACLRuleOutput() WebACLRuleOutput {
	return o
}

func (o WebACLRuleOutput) ToWebACLRuleOutputWithContext(ctx context.Context) WebACLRuleOutput {
	return o
}

func (o WebACLRuleOutput) Action() WebACLActionOutput {
	return o.ApplyT(func(v WebACLRule) WebACLAction { return v.Action }).(WebACLActionOutput)
}

func (o WebACLRuleOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v WebACLRule) int { return v.Priority }).(pulumi.IntOutput)
}

func (o WebACLRuleOutput) RuleId() pulumi.StringOutput {
	return o.ApplyT(func(v WebACLRule) string { return v.RuleId }).(pulumi.StringOutput)
}

type WebACLRuleArrayOutput struct{ *pulumi.OutputState }

func (WebACLRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebACLRule)(nil)).Elem()
}

func (o WebACLRuleArrayOutput) ToWebACLRuleArrayOutput() WebACLRuleArrayOutput {
	return o
}

func (o WebACLRuleArrayOutput) ToWebACLRuleArrayOutputWithContext(ctx context.Context) WebACLRuleArrayOutput {
	return o
}

func (o WebACLRuleArrayOutput) Index(i pulumi.IntInput) WebACLRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WebACLRule {
		return vs[0].([]WebACLRule)[vs[1].(int)]
	}).(WebACLRuleOutput)
}

type XssMatchSetFieldToMatch struct {
	Data *string `pulumi:"data"`
	Type string  `pulumi:"type"`
}

// XssMatchSetFieldToMatchInput is an input type that accepts XssMatchSetFieldToMatchArgs and XssMatchSetFieldToMatchOutput values.
// You can construct a concrete instance of `XssMatchSetFieldToMatchInput` via:
//
//          XssMatchSetFieldToMatchArgs{...}
type XssMatchSetFieldToMatchInput interface {
	pulumi.Input

	ToXssMatchSetFieldToMatchOutput() XssMatchSetFieldToMatchOutput
	ToXssMatchSetFieldToMatchOutputWithContext(context.Context) XssMatchSetFieldToMatchOutput
}

type XssMatchSetFieldToMatchArgs struct {
	Data pulumi.StringPtrInput `pulumi:"data"`
	Type pulumi.StringInput    `pulumi:"type"`
}

func (XssMatchSetFieldToMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*XssMatchSetFieldToMatch)(nil)).Elem()
}

func (i XssMatchSetFieldToMatchArgs) ToXssMatchSetFieldToMatchOutput() XssMatchSetFieldToMatchOutput {
	return i.ToXssMatchSetFieldToMatchOutputWithContext(context.Background())
}

func (i XssMatchSetFieldToMatchArgs) ToXssMatchSetFieldToMatchOutputWithContext(ctx context.Context) XssMatchSetFieldToMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(XssMatchSetFieldToMatchOutput)
}

type XssMatchSetFieldToMatchOutput struct{ *pulumi.OutputState }

func (XssMatchSetFieldToMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*XssMatchSetFieldToMatch)(nil)).Elem()
}

func (o XssMatchSetFieldToMatchOutput) ToXssMatchSetFieldToMatchOutput() XssMatchSetFieldToMatchOutput {
	return o
}

func (o XssMatchSetFieldToMatchOutput) ToXssMatchSetFieldToMatchOutputWithContext(ctx context.Context) XssMatchSetFieldToMatchOutput {
	return o
}

func (o XssMatchSetFieldToMatchOutput) Data() pulumi.StringPtrOutput {
	return o.ApplyT(func(v XssMatchSetFieldToMatch) *string { return v.Data }).(pulumi.StringPtrOutput)
}

func (o XssMatchSetFieldToMatchOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v XssMatchSetFieldToMatch) string { return v.Type }).(pulumi.StringOutput)
}

type XssMatchSetXssMatchTuple struct {
	FieldToMatch       XssMatchSetFieldToMatch `pulumi:"fieldToMatch"`
	TextTransformation string                  `pulumi:"textTransformation"`
}

// XssMatchSetXssMatchTupleInput is an input type that accepts XssMatchSetXssMatchTupleArgs and XssMatchSetXssMatchTupleOutput values.
// You can construct a concrete instance of `XssMatchSetXssMatchTupleInput` via:
//
//          XssMatchSetXssMatchTupleArgs{...}
type XssMatchSetXssMatchTupleInput interface {
	pulumi.Input

	ToXssMatchSetXssMatchTupleOutput() XssMatchSetXssMatchTupleOutput
	ToXssMatchSetXssMatchTupleOutputWithContext(context.Context) XssMatchSetXssMatchTupleOutput
}

type XssMatchSetXssMatchTupleArgs struct {
	FieldToMatch       XssMatchSetFieldToMatchInput `pulumi:"fieldToMatch"`
	TextTransformation pulumi.StringInput           `pulumi:"textTransformation"`
}

func (XssMatchSetXssMatchTupleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*XssMatchSetXssMatchTuple)(nil)).Elem()
}

func (i XssMatchSetXssMatchTupleArgs) ToXssMatchSetXssMatchTupleOutput() XssMatchSetXssMatchTupleOutput {
	return i.ToXssMatchSetXssMatchTupleOutputWithContext(context.Background())
}

func (i XssMatchSetXssMatchTupleArgs) ToXssMatchSetXssMatchTupleOutputWithContext(ctx context.Context) XssMatchSetXssMatchTupleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(XssMatchSetXssMatchTupleOutput)
}

// XssMatchSetXssMatchTupleArrayInput is an input type that accepts XssMatchSetXssMatchTupleArray and XssMatchSetXssMatchTupleArrayOutput values.
// You can construct a concrete instance of `XssMatchSetXssMatchTupleArrayInput` via:
//
//          XssMatchSetXssMatchTupleArray{ XssMatchSetXssMatchTupleArgs{...} }
type XssMatchSetXssMatchTupleArrayInput interface {
	pulumi.Input

	ToXssMatchSetXssMatchTupleArrayOutput() XssMatchSetXssMatchTupleArrayOutput
	ToXssMatchSetXssMatchTupleArrayOutputWithContext(context.Context) XssMatchSetXssMatchTupleArrayOutput
}

type XssMatchSetXssMatchTupleArray []XssMatchSetXssMatchTupleInput

func (XssMatchSetXssMatchTupleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]XssMatchSetXssMatchTuple)(nil)).Elem()
}

func (i XssMatchSetXssMatchTupleArray) ToXssMatchSetXssMatchTupleArrayOutput() XssMatchSetXssMatchTupleArrayOutput {
	return i.ToXssMatchSetXssMatchTupleArrayOutputWithContext(context.Background())
}

func (i XssMatchSetXssMatchTupleArray) ToXssMatchSetXssMatchTupleArrayOutputWithContext(ctx context.Context) XssMatchSetXssMatchTupleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(XssMatchSetXssMatchTupleArrayOutput)
}

type XssMatchSetXssMatchTupleOutput struct{ *pulumi.OutputState }

func (XssMatchSetXssMatchTupleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*XssMatchSetXssMatchTuple)(nil)).Elem()
}

func (o XssMatchSetXssMatchTupleOutput) ToXssMatchSetXssMatchTupleOutput() XssMatchSetXssMatchTupleOutput {
	return o
}

func (o XssMatchSetXssMatchTupleOutput) ToXssMatchSetXssMatchTupleOutputWithContext(ctx context.Context) XssMatchSetXssMatchTupleOutput {
	return o
}

func (o XssMatchSetXssMatchTupleOutput) FieldToMatch() XssMatchSetFieldToMatchOutput {
	return o.ApplyT(func(v XssMatchSetXssMatchTuple) XssMatchSetFieldToMatch { return v.FieldToMatch }).(XssMatchSetFieldToMatchOutput)
}

func (o XssMatchSetXssMatchTupleOutput) TextTransformation() pulumi.StringOutput {
	return o.ApplyT(func(v XssMatchSetXssMatchTuple) string { return v.TextTransformation }).(pulumi.StringOutput)
}

type XssMatchSetXssMatchTupleArrayOutput struct{ *pulumi.OutputState }

func (XssMatchSetXssMatchTupleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]XssMatchSetXssMatchTuple)(nil)).Elem()
}

func (o XssMatchSetXssMatchTupleArrayOutput) ToXssMatchSetXssMatchTupleArrayOutput() XssMatchSetXssMatchTupleArrayOutput {
	return o
}

func (o XssMatchSetXssMatchTupleArrayOutput) ToXssMatchSetXssMatchTupleArrayOutputWithContext(ctx context.Context) XssMatchSetXssMatchTupleArrayOutput {
	return o
}

func (o XssMatchSetXssMatchTupleArrayOutput) Index(i pulumi.IntInput) XssMatchSetXssMatchTupleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) XssMatchSetXssMatchTuple {
		return vs[0].([]XssMatchSetXssMatchTuple)[vs[1].(int)]
	}).(XssMatchSetXssMatchTupleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ByteMatchSetByteMatchTupleInput)(nil)).Elem(), ByteMatchSetByteMatchTupleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ByteMatchSetByteMatchTupleArrayInput)(nil)).Elem(), ByteMatchSetByteMatchTupleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ByteMatchSetFieldToMatchInput)(nil)).Elem(), ByteMatchSetFieldToMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GeoMatchSetGeoMatchConstraintInput)(nil)).Elem(), GeoMatchSetGeoMatchConstraintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GeoMatchSetGeoMatchConstraintArrayInput)(nil)).Elem(), GeoMatchSetGeoMatchConstraintArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPSetDescriptorInput)(nil)).Elem(), IPSetDescriptorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPSetDescriptorArrayInput)(nil)).Elem(), IPSetDescriptorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RateBasedRulePredicateInput)(nil)).Elem(), RateBasedRulePredicateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RateBasedRulePredicateArrayInput)(nil)).Elem(), RateBasedRulePredicateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulePredicateInput)(nil)).Elem(), RulePredicateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulePredicateArrayInput)(nil)).Elem(), RulePredicateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SizeConstraintSetFieldToMatchInput)(nil)).Elem(), SizeConstraintSetFieldToMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SizeConstraintSetSizeConstraintInput)(nil)).Elem(), SizeConstraintSetSizeConstraintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SizeConstraintSetSizeConstraintArrayInput)(nil)).Elem(), SizeConstraintSetSizeConstraintArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlInjectionMatchSetFieldToMatchInput)(nil)).Elem(), SqlInjectionMatchSetFieldToMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlInjectionMatchSetSqlInjectionMatchTupleInput)(nil)).Elem(), SqlInjectionMatchSetSqlInjectionMatchTupleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlInjectionMatchSetSqlInjectionMatchTupleArrayInput)(nil)).Elem(), SqlInjectionMatchSetSqlInjectionMatchTupleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebACLActionInput)(nil)).Elem(), WebACLActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebACLActionPtrInput)(nil)).Elem(), WebACLActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebACLRuleInput)(nil)).Elem(), WebACLRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebACLRuleArrayInput)(nil)).Elem(), WebACLRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*XssMatchSetFieldToMatchInput)(nil)).Elem(), XssMatchSetFieldToMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*XssMatchSetXssMatchTupleInput)(nil)).Elem(), XssMatchSetXssMatchTupleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*XssMatchSetXssMatchTupleArrayInput)(nil)).Elem(), XssMatchSetXssMatchTupleArray{})
	pulumi.RegisterOutputType(ByteMatchSetByteMatchTupleOutput{})
	pulumi.RegisterOutputType(ByteMatchSetByteMatchTupleArrayOutput{})
	pulumi.RegisterOutputType(ByteMatchSetFieldToMatchOutput{})
	pulumi.RegisterOutputType(GeoMatchSetGeoMatchConstraintOutput{})
	pulumi.RegisterOutputType(GeoMatchSetGeoMatchConstraintArrayOutput{})
	pulumi.RegisterOutputType(IPSetDescriptorOutput{})
	pulumi.RegisterOutputType(IPSetDescriptorArrayOutput{})
	pulumi.RegisterOutputType(RateBasedRulePredicateOutput{})
	pulumi.RegisterOutputType(RateBasedRulePredicateArrayOutput{})
	pulumi.RegisterOutputType(RulePredicateOutput{})
	pulumi.RegisterOutputType(RulePredicateArrayOutput{})
	pulumi.RegisterOutputType(SizeConstraintSetFieldToMatchOutput{})
	pulumi.RegisterOutputType(SizeConstraintSetSizeConstraintOutput{})
	pulumi.RegisterOutputType(SizeConstraintSetSizeConstraintArrayOutput{})
	pulumi.RegisterOutputType(SqlInjectionMatchSetFieldToMatchOutput{})
	pulumi.RegisterOutputType(SqlInjectionMatchSetSqlInjectionMatchTupleOutput{})
	pulumi.RegisterOutputType(SqlInjectionMatchSetSqlInjectionMatchTupleArrayOutput{})
	pulumi.RegisterOutputType(WebACLActionOutput{})
	pulumi.RegisterOutputType(WebACLActionPtrOutput{})
	pulumi.RegisterOutputType(WebACLRuleOutput{})
	pulumi.RegisterOutputType(WebACLRuleArrayOutput{})
	pulumi.RegisterOutputType(XssMatchSetFieldToMatchOutput{})
	pulumi.RegisterOutputType(XssMatchSetXssMatchTupleOutput{})
	pulumi.RegisterOutputType(XssMatchSetXssMatchTupleArrayOutput{})
}
