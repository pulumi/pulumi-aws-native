// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rbin

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// The resource tag of the rule.
type RuleResourceTag struct {
	// The tag key of the resource.
	ResourceTagKey string `pulumi:"resourceTagKey"`
	// The tag value of the resource
	ResourceTagValue string `pulumi:"resourceTagValue"`
}

// RuleResourceTagInput is an input type that accepts RuleResourceTagArgs and RuleResourceTagOutput values.
// You can construct a concrete instance of `RuleResourceTagInput` via:
//
//	RuleResourceTagArgs{...}
type RuleResourceTagInput interface {
	pulumi.Input

	ToRuleResourceTagOutput() RuleResourceTagOutput
	ToRuleResourceTagOutputWithContext(context.Context) RuleResourceTagOutput
}

// The resource tag of the rule.
type RuleResourceTagArgs struct {
	// The tag key of the resource.
	ResourceTagKey pulumi.StringInput `pulumi:"resourceTagKey"`
	// The tag value of the resource
	ResourceTagValue pulumi.StringInput `pulumi:"resourceTagValue"`
}

func (RuleResourceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleResourceTag)(nil)).Elem()
}

func (i RuleResourceTagArgs) ToRuleResourceTagOutput() RuleResourceTagOutput {
	return i.ToRuleResourceTagOutputWithContext(context.Background())
}

func (i RuleResourceTagArgs) ToRuleResourceTagOutputWithContext(ctx context.Context) RuleResourceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleResourceTagOutput)
}

// RuleResourceTagArrayInput is an input type that accepts RuleResourceTagArray and RuleResourceTagArrayOutput values.
// You can construct a concrete instance of `RuleResourceTagArrayInput` via:
//
//	RuleResourceTagArray{ RuleResourceTagArgs{...} }
type RuleResourceTagArrayInput interface {
	pulumi.Input

	ToRuleResourceTagArrayOutput() RuleResourceTagArrayOutput
	ToRuleResourceTagArrayOutputWithContext(context.Context) RuleResourceTagArrayOutput
}

type RuleResourceTagArray []RuleResourceTagInput

func (RuleResourceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleResourceTag)(nil)).Elem()
}

func (i RuleResourceTagArray) ToRuleResourceTagArrayOutput() RuleResourceTagArrayOutput {
	return i.ToRuleResourceTagArrayOutputWithContext(context.Background())
}

func (i RuleResourceTagArray) ToRuleResourceTagArrayOutputWithContext(ctx context.Context) RuleResourceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleResourceTagArrayOutput)
}

// The resource tag of the rule.
type RuleResourceTagOutput struct{ *pulumi.OutputState }

func (RuleResourceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleResourceTag)(nil)).Elem()
}

func (o RuleResourceTagOutput) ToRuleResourceTagOutput() RuleResourceTagOutput {
	return o
}

func (o RuleResourceTagOutput) ToRuleResourceTagOutputWithContext(ctx context.Context) RuleResourceTagOutput {
	return o
}

// The tag key of the resource.
func (o RuleResourceTagOutput) ResourceTagKey() pulumi.StringOutput {
	return o.ApplyT(func(v RuleResourceTag) string { return v.ResourceTagKey }).(pulumi.StringOutput)
}

// The tag value of the resource
func (o RuleResourceTagOutput) ResourceTagValue() pulumi.StringOutput {
	return o.ApplyT(func(v RuleResourceTag) string { return v.ResourceTagValue }).(pulumi.StringOutput)
}

type RuleResourceTagArrayOutput struct{ *pulumi.OutputState }

func (RuleResourceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleResourceTag)(nil)).Elem()
}

func (o RuleResourceTagArrayOutput) ToRuleResourceTagArrayOutput() RuleResourceTagArrayOutput {
	return o
}

func (o RuleResourceTagArrayOutput) ToRuleResourceTagArrayOutputWithContext(ctx context.Context) RuleResourceTagArrayOutput {
	return o
}

func (o RuleResourceTagArrayOutput) Index(i pulumi.IntInput) RuleResourceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleResourceTag {
		return vs[0].([]RuleResourceTag)[vs[1].(int)]
	}).(RuleResourceTagOutput)
}

// The retention period of the rule.
type RuleRetentionPeriod struct {
	// The retention period unit of the rule
	RetentionPeriodUnit RuleRetentionPeriodRetentionPeriodUnit `pulumi:"retentionPeriodUnit"`
	// The retention period value of the rule.
	RetentionPeriodValue int `pulumi:"retentionPeriodValue"`
}

// RuleRetentionPeriodInput is an input type that accepts RuleRetentionPeriodArgs and RuleRetentionPeriodOutput values.
// You can construct a concrete instance of `RuleRetentionPeriodInput` via:
//
//	RuleRetentionPeriodArgs{...}
type RuleRetentionPeriodInput interface {
	pulumi.Input

	ToRuleRetentionPeriodOutput() RuleRetentionPeriodOutput
	ToRuleRetentionPeriodOutputWithContext(context.Context) RuleRetentionPeriodOutput
}

// The retention period of the rule.
type RuleRetentionPeriodArgs struct {
	// The retention period unit of the rule
	RetentionPeriodUnit RuleRetentionPeriodRetentionPeriodUnitInput `pulumi:"retentionPeriodUnit"`
	// The retention period value of the rule.
	RetentionPeriodValue pulumi.IntInput `pulumi:"retentionPeriodValue"`
}

func (RuleRetentionPeriodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleRetentionPeriod)(nil)).Elem()
}

func (i RuleRetentionPeriodArgs) ToRuleRetentionPeriodOutput() RuleRetentionPeriodOutput {
	return i.ToRuleRetentionPeriodOutputWithContext(context.Background())
}

func (i RuleRetentionPeriodArgs) ToRuleRetentionPeriodOutputWithContext(ctx context.Context) RuleRetentionPeriodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleRetentionPeriodOutput)
}

// The retention period of the rule.
type RuleRetentionPeriodOutput struct{ *pulumi.OutputState }

func (RuleRetentionPeriodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleRetentionPeriod)(nil)).Elem()
}

func (o RuleRetentionPeriodOutput) ToRuleRetentionPeriodOutput() RuleRetentionPeriodOutput {
	return o
}

func (o RuleRetentionPeriodOutput) ToRuleRetentionPeriodOutputWithContext(ctx context.Context) RuleRetentionPeriodOutput {
	return o
}

// The retention period unit of the rule
func (o RuleRetentionPeriodOutput) RetentionPeriodUnit() RuleRetentionPeriodRetentionPeriodUnitOutput {
	return o.ApplyT(func(v RuleRetentionPeriod) RuleRetentionPeriodRetentionPeriodUnit { return v.RetentionPeriodUnit }).(RuleRetentionPeriodRetentionPeriodUnitOutput)
}

// The retention period value of the rule.
func (o RuleRetentionPeriodOutput) RetentionPeriodValue() pulumi.IntOutput {
	return o.ApplyT(func(v RuleRetentionPeriod) int { return v.RetentionPeriodValue }).(pulumi.IntOutput)
}

type RuleRetentionPeriodPtrOutput struct{ *pulumi.OutputState }

func (RuleRetentionPeriodPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleRetentionPeriod)(nil)).Elem()
}

func (o RuleRetentionPeriodPtrOutput) ToRuleRetentionPeriodPtrOutput() RuleRetentionPeriodPtrOutput {
	return o
}

func (o RuleRetentionPeriodPtrOutput) ToRuleRetentionPeriodPtrOutputWithContext(ctx context.Context) RuleRetentionPeriodPtrOutput {
	return o
}

func (o RuleRetentionPeriodPtrOutput) Elem() RuleRetentionPeriodOutput {
	return o.ApplyT(func(v *RuleRetentionPeriod) RuleRetentionPeriod {
		if v != nil {
			return *v
		}
		var ret RuleRetentionPeriod
		return ret
	}).(RuleRetentionPeriodOutput)
}

// The retention period unit of the rule
func (o RuleRetentionPeriodPtrOutput) RetentionPeriodUnit() RuleRetentionPeriodRetentionPeriodUnitPtrOutput {
	return o.ApplyT(func(v *RuleRetentionPeriod) *RuleRetentionPeriodRetentionPeriodUnit {
		if v == nil {
			return nil
		}
		return &v.RetentionPeriodUnit
	}).(RuleRetentionPeriodRetentionPeriodUnitPtrOutput)
}

// The retention period value of the rule.
func (o RuleRetentionPeriodPtrOutput) RetentionPeriodValue() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RuleRetentionPeriod) *int {
		if v == nil {
			return nil
		}
		return &v.RetentionPeriodValue
	}).(pulumi.IntPtrOutput)
}

// Metadata of a retention rule, consisting of a key-value pair.
type RuleTag struct {
	// A unique identifier for the tag.
	Key string `pulumi:"key"`
	// String which you can use to describe or define the tag.
	Value string `pulumi:"value"`
}

type RuleUnlockDelay struct {
	// The unit of time in which to measure the unlock delay. Currently, the unlock delay can be measure only in days.
	UnlockDelayUnit *RuleUnlockDelayUnlockDelayUnit `pulumi:"unlockDelayUnit"`
	// The unlock delay period, measured in the unit specified for UnlockDelayUnit.
	UnlockDelayValue *int `pulumi:"unlockDelayValue"`
}

// RuleUnlockDelayInput is an input type that accepts RuleUnlockDelayArgs and RuleUnlockDelayOutput values.
// You can construct a concrete instance of `RuleUnlockDelayInput` via:
//
//	RuleUnlockDelayArgs{...}
type RuleUnlockDelayInput interface {
	pulumi.Input

	ToRuleUnlockDelayOutput() RuleUnlockDelayOutput
	ToRuleUnlockDelayOutputWithContext(context.Context) RuleUnlockDelayOutput
}

type RuleUnlockDelayArgs struct {
	// The unit of time in which to measure the unlock delay. Currently, the unlock delay can be measure only in days.
	UnlockDelayUnit RuleUnlockDelayUnlockDelayUnitPtrInput `pulumi:"unlockDelayUnit"`
	// The unlock delay period, measured in the unit specified for UnlockDelayUnit.
	UnlockDelayValue pulumi.IntPtrInput `pulumi:"unlockDelayValue"`
}

func (RuleUnlockDelayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleUnlockDelay)(nil)).Elem()
}

func (i RuleUnlockDelayArgs) ToRuleUnlockDelayOutput() RuleUnlockDelayOutput {
	return i.ToRuleUnlockDelayOutputWithContext(context.Background())
}

func (i RuleUnlockDelayArgs) ToRuleUnlockDelayOutputWithContext(ctx context.Context) RuleUnlockDelayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleUnlockDelayOutput)
}

func (i RuleUnlockDelayArgs) ToRuleUnlockDelayPtrOutput() RuleUnlockDelayPtrOutput {
	return i.ToRuleUnlockDelayPtrOutputWithContext(context.Background())
}

func (i RuleUnlockDelayArgs) ToRuleUnlockDelayPtrOutputWithContext(ctx context.Context) RuleUnlockDelayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleUnlockDelayOutput).ToRuleUnlockDelayPtrOutputWithContext(ctx)
}

// RuleUnlockDelayPtrInput is an input type that accepts RuleUnlockDelayArgs, RuleUnlockDelayPtr and RuleUnlockDelayPtrOutput values.
// You can construct a concrete instance of `RuleUnlockDelayPtrInput` via:
//
//	        RuleUnlockDelayArgs{...}
//
//	or:
//
//	        nil
type RuleUnlockDelayPtrInput interface {
	pulumi.Input

	ToRuleUnlockDelayPtrOutput() RuleUnlockDelayPtrOutput
	ToRuleUnlockDelayPtrOutputWithContext(context.Context) RuleUnlockDelayPtrOutput
}

type ruleUnlockDelayPtrType RuleUnlockDelayArgs

func RuleUnlockDelayPtr(v *RuleUnlockDelayArgs) RuleUnlockDelayPtrInput {
	return (*ruleUnlockDelayPtrType)(v)
}

func (*ruleUnlockDelayPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleUnlockDelay)(nil)).Elem()
}

func (i *ruleUnlockDelayPtrType) ToRuleUnlockDelayPtrOutput() RuleUnlockDelayPtrOutput {
	return i.ToRuleUnlockDelayPtrOutputWithContext(context.Background())
}

func (i *ruleUnlockDelayPtrType) ToRuleUnlockDelayPtrOutputWithContext(ctx context.Context) RuleUnlockDelayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleUnlockDelayPtrOutput)
}

type RuleUnlockDelayOutput struct{ *pulumi.OutputState }

func (RuleUnlockDelayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleUnlockDelay)(nil)).Elem()
}

func (o RuleUnlockDelayOutput) ToRuleUnlockDelayOutput() RuleUnlockDelayOutput {
	return o
}

func (o RuleUnlockDelayOutput) ToRuleUnlockDelayOutputWithContext(ctx context.Context) RuleUnlockDelayOutput {
	return o
}

func (o RuleUnlockDelayOutput) ToRuleUnlockDelayPtrOutput() RuleUnlockDelayPtrOutput {
	return o.ToRuleUnlockDelayPtrOutputWithContext(context.Background())
}

func (o RuleUnlockDelayOutput) ToRuleUnlockDelayPtrOutputWithContext(ctx context.Context) RuleUnlockDelayPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RuleUnlockDelay) *RuleUnlockDelay {
		return &v
	}).(RuleUnlockDelayPtrOutput)
}

// The unit of time in which to measure the unlock delay. Currently, the unlock delay can be measure only in days.
func (o RuleUnlockDelayOutput) UnlockDelayUnit() RuleUnlockDelayUnlockDelayUnitPtrOutput {
	return o.ApplyT(func(v RuleUnlockDelay) *RuleUnlockDelayUnlockDelayUnit { return v.UnlockDelayUnit }).(RuleUnlockDelayUnlockDelayUnitPtrOutput)
}

// The unlock delay period, measured in the unit specified for UnlockDelayUnit.
func (o RuleUnlockDelayOutput) UnlockDelayValue() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RuleUnlockDelay) *int { return v.UnlockDelayValue }).(pulumi.IntPtrOutput)
}

type RuleUnlockDelayPtrOutput struct{ *pulumi.OutputState }

func (RuleUnlockDelayPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleUnlockDelay)(nil)).Elem()
}

func (o RuleUnlockDelayPtrOutput) ToRuleUnlockDelayPtrOutput() RuleUnlockDelayPtrOutput {
	return o
}

func (o RuleUnlockDelayPtrOutput) ToRuleUnlockDelayPtrOutputWithContext(ctx context.Context) RuleUnlockDelayPtrOutput {
	return o
}

func (o RuleUnlockDelayPtrOutput) Elem() RuleUnlockDelayOutput {
	return o.ApplyT(func(v *RuleUnlockDelay) RuleUnlockDelay {
		if v != nil {
			return *v
		}
		var ret RuleUnlockDelay
		return ret
	}).(RuleUnlockDelayOutput)
}

// The unit of time in which to measure the unlock delay. Currently, the unlock delay can be measure only in days.
func (o RuleUnlockDelayPtrOutput) UnlockDelayUnit() RuleUnlockDelayUnlockDelayUnitPtrOutput {
	return o.ApplyT(func(v *RuleUnlockDelay) *RuleUnlockDelayUnlockDelayUnit {
		if v == nil {
			return nil
		}
		return v.UnlockDelayUnit
	}).(RuleUnlockDelayUnlockDelayUnitPtrOutput)
}

// The unlock delay period, measured in the unit specified for UnlockDelayUnit.
func (o RuleUnlockDelayPtrOutput) UnlockDelayValue() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RuleUnlockDelay) *int {
		if v == nil {
			return nil
		}
		return v.UnlockDelayValue
	}).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RuleResourceTagInput)(nil)).Elem(), RuleResourceTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleResourceTagArrayInput)(nil)).Elem(), RuleResourceTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleRetentionPeriodInput)(nil)).Elem(), RuleRetentionPeriodArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleUnlockDelayInput)(nil)).Elem(), RuleUnlockDelayArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleUnlockDelayPtrInput)(nil)).Elem(), RuleUnlockDelayArgs{})
	pulumi.RegisterOutputType(RuleResourceTagOutput{})
	pulumi.RegisterOutputType(RuleResourceTagArrayOutput{})
	pulumi.RegisterOutputType(RuleRetentionPeriodOutput{})
	pulumi.RegisterOutputType(RuleRetentionPeriodPtrOutput{})
	pulumi.RegisterOutputType(RuleUnlockDelayOutput{})
	pulumi.RegisterOutputType(RuleUnlockDelayPtrOutput{})
}
