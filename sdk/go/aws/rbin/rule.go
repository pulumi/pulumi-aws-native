// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rbin

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Rbin::Rule
type Rule struct {
	pulumi.CustomResourceState

	// Rule Arn is unique for each rule.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The description of the retention rule.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Information about the exclude resource tags used to identify resources that are excluded by the retention rule.
	ExcludeResourceTags RuleResourceTagArrayOutput `pulumi:"excludeResourceTags"`
	// The unique ID of the retention rule.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Information about the retention rule lock configuration.
	LockConfiguration RuleUnlockDelayPtrOutput `pulumi:"lockConfiguration"`
	// The lock state for the retention rule.
	LockState pulumi.StringOutput `pulumi:"lockState"`
	// Information about the resource tags used to identify resources that are retained by the retention rule.
	ResourceTags RuleResourceTagArrayOutput `pulumi:"resourceTags"`
	// The resource type retained by the retention rule.
	ResourceType RuleResourceTypeOutput `pulumi:"resourceType"`
	// Information about the retention period for which the retention rule is to retain resources.
	RetentionPeriod RuleRetentionPeriodOutput `pulumi:"retentionPeriod"`
	// The state of the retention rule. Only retention rules that are in the available state retain resources.
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// Information about the tags assigned to the retention rule.
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewRule registers a new resource with the given unique name, arguments, and options.
func NewRule(ctx *pulumi.Context,
	name string, args *RuleArgs, opts ...pulumi.ResourceOption) (*Rule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceType == nil {
		return nil, errors.New("invalid value for required argument 'ResourceType'")
	}
	if args.RetentionPeriod == nil {
		return nil, errors.New("invalid value for required argument 'RetentionPeriod'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"resourceType",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Rule
	err := ctx.RegisterResource("aws-native:rbin:Rule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRule gets an existing Rule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RuleState, opts ...pulumi.ResourceOption) (*Rule, error) {
	var resource Rule
	err := ctx.ReadResource("aws-native:rbin:Rule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Rule resources.
type ruleState struct {
}

type RuleState struct {
}

func (RuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleState)(nil)).Elem()
}

type ruleArgs struct {
	// The description of the retention rule.
	Description *string `pulumi:"description"`
	// Information about the exclude resource tags used to identify resources that are excluded by the retention rule.
	ExcludeResourceTags []RuleResourceTag `pulumi:"excludeResourceTags"`
	// Information about the retention rule lock configuration.
	LockConfiguration *RuleUnlockDelay `pulumi:"lockConfiguration"`
	// Information about the resource tags used to identify resources that are retained by the retention rule.
	ResourceTags []RuleResourceTag `pulumi:"resourceTags"`
	// The resource type retained by the retention rule.
	ResourceType RuleResourceType `pulumi:"resourceType"`
	// Information about the retention period for which the retention rule is to retain resources.
	RetentionPeriod RuleRetentionPeriod `pulumi:"retentionPeriod"`
	// The state of the retention rule. Only retention rules that are in the available state retain resources.
	Status *string `pulumi:"status"`
	// Information about the tags assigned to the retention rule.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a Rule resource.
type RuleArgs struct {
	// The description of the retention rule.
	Description pulumi.StringPtrInput
	// Information about the exclude resource tags used to identify resources that are excluded by the retention rule.
	ExcludeResourceTags RuleResourceTagArrayInput
	// Information about the retention rule lock configuration.
	LockConfiguration RuleUnlockDelayPtrInput
	// Information about the resource tags used to identify resources that are retained by the retention rule.
	ResourceTags RuleResourceTagArrayInput
	// The resource type retained by the retention rule.
	ResourceType RuleResourceTypeInput
	// Information about the retention period for which the retention rule is to retain resources.
	RetentionPeriod RuleRetentionPeriodInput
	// The state of the retention rule. Only retention rules that are in the available state retain resources.
	Status pulumi.StringPtrInput
	// Information about the tags assigned to the retention rule.
	Tags aws.TagArrayInput
}

func (RuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleArgs)(nil)).Elem()
}

type RuleInput interface {
	pulumi.Input

	ToRuleOutput() RuleOutput
	ToRuleOutputWithContext(ctx context.Context) RuleOutput
}

func (*Rule) ElementType() reflect.Type {
	return reflect.TypeOf((**Rule)(nil)).Elem()
}

func (i *Rule) ToRuleOutput() RuleOutput {
	return i.ToRuleOutputWithContext(context.Background())
}

func (i *Rule) ToRuleOutputWithContext(ctx context.Context) RuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleOutput)
}

type RuleOutput struct{ *pulumi.OutputState }

func (RuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Rule)(nil)).Elem()
}

func (o RuleOutput) ToRuleOutput() RuleOutput {
	return o
}

func (o RuleOutput) ToRuleOutputWithContext(ctx context.Context) RuleOutput {
	return o
}

// Rule Arn is unique for each rule.
func (o RuleOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The description of the retention rule.
func (o RuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Information about the exclude resource tags used to identify resources that are excluded by the retention rule.
func (o RuleOutput) ExcludeResourceTags() RuleResourceTagArrayOutput {
	return o.ApplyT(func(v *Rule) RuleResourceTagArrayOutput { return v.ExcludeResourceTags }).(RuleResourceTagArrayOutput)
}

// The unique ID of the retention rule.
func (o RuleOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Information about the retention rule lock configuration.
func (o RuleOutput) LockConfiguration() RuleUnlockDelayPtrOutput {
	return o.ApplyT(func(v *Rule) RuleUnlockDelayPtrOutput { return v.LockConfiguration }).(RuleUnlockDelayPtrOutput)
}

// The lock state for the retention rule.
func (o RuleOutput) LockState() pulumi.StringOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringOutput { return v.LockState }).(pulumi.StringOutput)
}

// Information about the resource tags used to identify resources that are retained by the retention rule.
func (o RuleOutput) ResourceTags() RuleResourceTagArrayOutput {
	return o.ApplyT(func(v *Rule) RuleResourceTagArrayOutput { return v.ResourceTags }).(RuleResourceTagArrayOutput)
}

// The resource type retained by the retention rule.
func (o RuleOutput) ResourceType() RuleResourceTypeOutput {
	return o.ApplyT(func(v *Rule) RuleResourceTypeOutput { return v.ResourceType }).(RuleResourceTypeOutput)
}

// Information about the retention period for which the retention rule is to retain resources.
func (o RuleOutput) RetentionPeriod() RuleRetentionPeriodOutput {
	return o.ApplyT(func(v *Rule) RuleRetentionPeriodOutput { return v.RetentionPeriod }).(RuleRetentionPeriodOutput)
}

// The state of the retention rule. Only retention rules that are in the available state retain resources.
func (o RuleOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

// Information about the tags assigned to the retention rule.
func (o RuleOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Rule) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RuleInput)(nil)).Elem(), &Rule{})
	pulumi.RegisterOutputType(RuleOutput{})
}
