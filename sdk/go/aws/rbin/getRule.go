// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rbin

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Rbin::Rule
func LookupRule(ctx *pulumi.Context, args *LookupRuleArgs, opts ...pulumi.InvokeOption) (*LookupRuleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRuleResult
	err := ctx.Invoke("aws-native:rbin:getRule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupRuleArgs struct {
	// Rule Arn is unique for each rule.
	Arn string `pulumi:"arn"`
}

type LookupRuleResult struct {
	// Rule Arn is unique for each rule.
	Arn *string `pulumi:"arn"`
	// The description of the retention rule.
	Description *string `pulumi:"description"`
	// Information about the exclude resource tags used to identify resources that are excluded by the retention rule.
	ExcludeResourceTags []RuleResourceTag `pulumi:"excludeResourceTags"`
	// The unique ID of the retention rule.
	Identifier *string `pulumi:"identifier"`
	// The lock state for the retention rule.
	LockState *string `pulumi:"lockState"`
	// Information about the resource tags used to identify resources that are retained by the retention rule.
	ResourceTags []RuleResourceTag `pulumi:"resourceTags"`
	// Information about the retention period for which the retention rule is to retain resources.
	RetentionPeriod *RuleRetentionPeriod `pulumi:"retentionPeriod"`
	// The state of the retention rule. Only retention rules that are in the available state retain resources.
	Status *string `pulumi:"status"`
	// Information about the tags assigned to the retention rule.
	Tags []aws.Tag `pulumi:"tags"`
}

func LookupRuleOutput(ctx *pulumi.Context, args LookupRuleOutputArgs, opts ...pulumi.InvokeOption) LookupRuleResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRuleResultOutput, error) {
			args := v.(LookupRuleArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupRuleResult
			secret, err := ctx.InvokePackageRaw("aws-native:rbin:getRule", args, &rv, "", opts...)
			if err != nil {
				return LookupRuleResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupRuleResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupRuleResultOutput), nil
			}
			return output, nil
		}).(LookupRuleResultOutput)
}

type LookupRuleOutputArgs struct {
	// Rule Arn is unique for each rule.
	Arn pulumi.StringInput `pulumi:"arn"`
}

func (LookupRuleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRuleArgs)(nil)).Elem()
}

type LookupRuleResultOutput struct{ *pulumi.OutputState }

func (LookupRuleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRuleResult)(nil)).Elem()
}

func (o LookupRuleResultOutput) ToLookupRuleResultOutput() LookupRuleResultOutput {
	return o
}

func (o LookupRuleResultOutput) ToLookupRuleResultOutputWithContext(ctx context.Context) LookupRuleResultOutput {
	return o
}

// Rule Arn is unique for each rule.
func (o LookupRuleResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRuleResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// The description of the retention rule.
func (o LookupRuleResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRuleResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Information about the exclude resource tags used to identify resources that are excluded by the retention rule.
func (o LookupRuleResultOutput) ExcludeResourceTags() RuleResourceTagArrayOutput {
	return o.ApplyT(func(v LookupRuleResult) []RuleResourceTag { return v.ExcludeResourceTags }).(RuleResourceTagArrayOutput)
}

// The unique ID of the retention rule.
func (o LookupRuleResultOutput) Identifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRuleResult) *string { return v.Identifier }).(pulumi.StringPtrOutput)
}

// The lock state for the retention rule.
func (o LookupRuleResultOutput) LockState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRuleResult) *string { return v.LockState }).(pulumi.StringPtrOutput)
}

// Information about the resource tags used to identify resources that are retained by the retention rule.
func (o LookupRuleResultOutput) ResourceTags() RuleResourceTagArrayOutput {
	return o.ApplyT(func(v LookupRuleResult) []RuleResourceTag { return v.ResourceTags }).(RuleResourceTagArrayOutput)
}

// Information about the retention period for which the retention rule is to retain resources.
func (o LookupRuleResultOutput) RetentionPeriod() RuleRetentionPeriodPtrOutput {
	return o.ApplyT(func(v LookupRuleResult) *RuleRetentionPeriod { return v.RetentionPeriod }).(RuleRetentionPeriodPtrOutput)
}

// The state of the retention rule. Only retention rules that are in the available state retain resources.
func (o LookupRuleResultOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRuleResult) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Information about the tags assigned to the retention rule.
func (o LookupRuleResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupRuleResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRuleResultOutput{})
}
