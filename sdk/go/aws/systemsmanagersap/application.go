// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package systemsmanagersap

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for AWS::SystemsManagerSAP::Application
type Application struct {
	pulumi.CustomResourceState

	// The ID of the application.
	ApplicationId pulumi.StringOutput `pulumi:"applicationId"`
	// The type of the application.
	ApplicationType ApplicationTypeOutput `pulumi:"applicationType"`
	// The ARN of the SSM-SAP application
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The credentials of the SAP application.
	Credentials ApplicationCredentialArrayOutput `pulumi:"credentials"`
	// The ARN of the SAP HANA database
	DatabaseArn pulumi.StringPtrOutput `pulumi:"databaseArn"`
	// The Amazon EC2 instances on which your SAP application is running.
	Instances pulumi.StringArrayOutput `pulumi:"instances"`
	// The SAP instance number of the application.
	SapInstanceNumber pulumi.StringPtrOutput `pulumi:"sapInstanceNumber"`
	// The System ID of the application.
	Sid pulumi.StringPtrOutput `pulumi:"sid"`
	// The tags of a SystemsManagerSAP application.
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewApplication registers a new resource with the given unique name, arguments, and options.
func NewApplication(ctx *pulumi.Context,
	name string, args *ApplicationArgs, opts ...pulumi.ResourceOption) (*Application, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationId == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationId'")
	}
	if args.ApplicationType == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationType'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"credentials[*]",
		"databaseArn",
		"instances[*]",
		"sapInstanceNumber",
		"sid",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Application
	err := ctx.RegisterResource("aws-native:systemsmanagersap:Application", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplication gets an existing Application resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationState, opts ...pulumi.ResourceOption) (*Application, error) {
	var resource Application
	err := ctx.ReadResource("aws-native:systemsmanagersap:Application", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Application resources.
type applicationState struct {
}

type ApplicationState struct {
}

func (ApplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationState)(nil)).Elem()
}

type applicationArgs struct {
	// The ID of the application.
	ApplicationId string `pulumi:"applicationId"`
	// The type of the application.
	ApplicationType ApplicationType `pulumi:"applicationType"`
	// The credentials of the SAP application.
	Credentials []ApplicationCredential `pulumi:"credentials"`
	// The ARN of the SAP HANA database
	DatabaseArn *string `pulumi:"databaseArn"`
	// The Amazon EC2 instances on which your SAP application is running.
	Instances []string `pulumi:"instances"`
	// The SAP instance number of the application.
	SapInstanceNumber *string `pulumi:"sapInstanceNumber"`
	// The System ID of the application.
	Sid *string `pulumi:"sid"`
	// The tags of a SystemsManagerSAP application.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a Application resource.
type ApplicationArgs struct {
	// The ID of the application.
	ApplicationId pulumi.StringInput
	// The type of the application.
	ApplicationType ApplicationTypeInput
	// The credentials of the SAP application.
	Credentials ApplicationCredentialArrayInput
	// The ARN of the SAP HANA database
	DatabaseArn pulumi.StringPtrInput
	// The Amazon EC2 instances on which your SAP application is running.
	Instances pulumi.StringArrayInput
	// The SAP instance number of the application.
	SapInstanceNumber pulumi.StringPtrInput
	// The System ID of the application.
	Sid pulumi.StringPtrInput
	// The tags of a SystemsManagerSAP application.
	Tags aws.TagArrayInput
}

func (ApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationArgs)(nil)).Elem()
}

type ApplicationInput interface {
	pulumi.Input

	ToApplicationOutput() ApplicationOutput
	ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput
}

func (*Application) ElementType() reflect.Type {
	return reflect.TypeOf((**Application)(nil)).Elem()
}

func (i *Application) ToApplicationOutput() ApplicationOutput {
	return i.ToApplicationOutputWithContext(context.Background())
}

func (i *Application) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOutput)
}

type ApplicationOutput struct{ *pulumi.OutputState }

func (ApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Application)(nil)).Elem()
}

func (o ApplicationOutput) ToApplicationOutput() ApplicationOutput {
	return o
}

func (o ApplicationOutput) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return o
}

// The ID of the application.
func (o ApplicationOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.ApplicationId }).(pulumi.StringOutput)
}

// The type of the application.
func (o ApplicationOutput) ApplicationType() ApplicationTypeOutput {
	return o.ApplyT(func(v *Application) ApplicationTypeOutput { return v.ApplicationType }).(ApplicationTypeOutput)
}

// The ARN of the SSM-SAP application
func (o ApplicationOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The credentials of the SAP application.
func (o ApplicationOutput) Credentials() ApplicationCredentialArrayOutput {
	return o.ApplyT(func(v *Application) ApplicationCredentialArrayOutput { return v.Credentials }).(ApplicationCredentialArrayOutput)
}

// The ARN of the SAP HANA database
func (o ApplicationOutput) DatabaseArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.DatabaseArn }).(pulumi.StringPtrOutput)
}

// The Amazon EC2 instances on which your SAP application is running.
func (o ApplicationOutput) Instances() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Application) pulumi.StringArrayOutput { return v.Instances }).(pulumi.StringArrayOutput)
}

// The SAP instance number of the application.
func (o ApplicationOutput) SapInstanceNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.SapInstanceNumber }).(pulumi.StringPtrOutput)
}

// The System ID of the application.
func (o ApplicationOutput) Sid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.Sid }).(pulumi.StringPtrOutput)
}

// The tags of a SystemsManagerSAP application.
func (o ApplicationOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Application) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationInput)(nil)).Elem(), &Application{})
	pulumi.RegisterOutputType(ApplicationOutput{})
}
