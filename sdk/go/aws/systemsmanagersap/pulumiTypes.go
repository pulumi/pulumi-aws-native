// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package systemsmanagersap

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ApplicationComponentInfo struct {
	ComponentType *ApplicationComponentInfoComponentType `pulumi:"componentType"`
	Ec2InstanceId *string                                `pulumi:"ec2InstanceId"`
	Sid           *string                                `pulumi:"sid"`
}

// ApplicationComponentInfoInput is an input type that accepts ApplicationComponentInfoArgs and ApplicationComponentInfoOutput values.
// You can construct a concrete instance of `ApplicationComponentInfoInput` via:
//
//	ApplicationComponentInfoArgs{...}
type ApplicationComponentInfoInput interface {
	pulumi.Input

	ToApplicationComponentInfoOutput() ApplicationComponentInfoOutput
	ToApplicationComponentInfoOutputWithContext(context.Context) ApplicationComponentInfoOutput
}

type ApplicationComponentInfoArgs struct {
	ComponentType ApplicationComponentInfoComponentTypePtrInput `pulumi:"componentType"`
	Ec2InstanceId pulumi.StringPtrInput                         `pulumi:"ec2InstanceId"`
	Sid           pulumi.StringPtrInput                         `pulumi:"sid"`
}

func (ApplicationComponentInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationComponentInfo)(nil)).Elem()
}

func (i ApplicationComponentInfoArgs) ToApplicationComponentInfoOutput() ApplicationComponentInfoOutput {
	return i.ToApplicationComponentInfoOutputWithContext(context.Background())
}

func (i ApplicationComponentInfoArgs) ToApplicationComponentInfoOutputWithContext(ctx context.Context) ApplicationComponentInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationComponentInfoOutput)
}

// ApplicationComponentInfoArrayInput is an input type that accepts ApplicationComponentInfoArray and ApplicationComponentInfoArrayOutput values.
// You can construct a concrete instance of `ApplicationComponentInfoArrayInput` via:
//
//	ApplicationComponentInfoArray{ ApplicationComponentInfoArgs{...} }
type ApplicationComponentInfoArrayInput interface {
	pulumi.Input

	ToApplicationComponentInfoArrayOutput() ApplicationComponentInfoArrayOutput
	ToApplicationComponentInfoArrayOutputWithContext(context.Context) ApplicationComponentInfoArrayOutput
}

type ApplicationComponentInfoArray []ApplicationComponentInfoInput

func (ApplicationComponentInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationComponentInfo)(nil)).Elem()
}

func (i ApplicationComponentInfoArray) ToApplicationComponentInfoArrayOutput() ApplicationComponentInfoArrayOutput {
	return i.ToApplicationComponentInfoArrayOutputWithContext(context.Background())
}

func (i ApplicationComponentInfoArray) ToApplicationComponentInfoArrayOutputWithContext(ctx context.Context) ApplicationComponentInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationComponentInfoArrayOutput)
}

type ApplicationComponentInfoOutput struct{ *pulumi.OutputState }

func (ApplicationComponentInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationComponentInfo)(nil)).Elem()
}

func (o ApplicationComponentInfoOutput) ToApplicationComponentInfoOutput() ApplicationComponentInfoOutput {
	return o
}

func (o ApplicationComponentInfoOutput) ToApplicationComponentInfoOutputWithContext(ctx context.Context) ApplicationComponentInfoOutput {
	return o
}

func (o ApplicationComponentInfoOutput) ComponentType() ApplicationComponentInfoComponentTypePtrOutput {
	return o.ApplyT(func(v ApplicationComponentInfo) *ApplicationComponentInfoComponentType { return v.ComponentType }).(ApplicationComponentInfoComponentTypePtrOutput)
}

func (o ApplicationComponentInfoOutput) Ec2InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationComponentInfo) *string { return v.Ec2InstanceId }).(pulumi.StringPtrOutput)
}

func (o ApplicationComponentInfoOutput) Sid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationComponentInfo) *string { return v.Sid }).(pulumi.StringPtrOutput)
}

type ApplicationComponentInfoArrayOutput struct{ *pulumi.OutputState }

func (ApplicationComponentInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationComponentInfo)(nil)).Elem()
}

func (o ApplicationComponentInfoArrayOutput) ToApplicationComponentInfoArrayOutput() ApplicationComponentInfoArrayOutput {
	return o
}

func (o ApplicationComponentInfoArrayOutput) ToApplicationComponentInfoArrayOutputWithContext(ctx context.Context) ApplicationComponentInfoArrayOutput {
	return o
}

func (o ApplicationComponentInfoArrayOutput) Index(i pulumi.IntInput) ApplicationComponentInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationComponentInfo {
		return vs[0].([]ApplicationComponentInfo)[vs[1].(int)]
	}).(ApplicationComponentInfoOutput)
}

type ApplicationCredential struct {
	// The type of the application credentials.
	CredentialType *ApplicationCredentialCredentialType `pulumi:"credentialType"`
	// The name of the SAP HANA database.
	DatabaseName *string `pulumi:"databaseName"`
	// The secret ID created in AWS Secrets Manager to store the credentials of the SAP application.
	SecretId *string `pulumi:"secretId"`
}

// ApplicationCredentialInput is an input type that accepts ApplicationCredentialArgs and ApplicationCredentialOutput values.
// You can construct a concrete instance of `ApplicationCredentialInput` via:
//
//	ApplicationCredentialArgs{...}
type ApplicationCredentialInput interface {
	pulumi.Input

	ToApplicationCredentialOutput() ApplicationCredentialOutput
	ToApplicationCredentialOutputWithContext(context.Context) ApplicationCredentialOutput
}

type ApplicationCredentialArgs struct {
	// The type of the application credentials.
	CredentialType ApplicationCredentialCredentialTypePtrInput `pulumi:"credentialType"`
	// The name of the SAP HANA database.
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	// The secret ID created in AWS Secrets Manager to store the credentials of the SAP application.
	SecretId pulumi.StringPtrInput `pulumi:"secretId"`
}

func (ApplicationCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationCredential)(nil)).Elem()
}

func (i ApplicationCredentialArgs) ToApplicationCredentialOutput() ApplicationCredentialOutput {
	return i.ToApplicationCredentialOutputWithContext(context.Background())
}

func (i ApplicationCredentialArgs) ToApplicationCredentialOutputWithContext(ctx context.Context) ApplicationCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationCredentialOutput)
}

// ApplicationCredentialArrayInput is an input type that accepts ApplicationCredentialArray and ApplicationCredentialArrayOutput values.
// You can construct a concrete instance of `ApplicationCredentialArrayInput` via:
//
//	ApplicationCredentialArray{ ApplicationCredentialArgs{...} }
type ApplicationCredentialArrayInput interface {
	pulumi.Input

	ToApplicationCredentialArrayOutput() ApplicationCredentialArrayOutput
	ToApplicationCredentialArrayOutputWithContext(context.Context) ApplicationCredentialArrayOutput
}

type ApplicationCredentialArray []ApplicationCredentialInput

func (ApplicationCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationCredential)(nil)).Elem()
}

func (i ApplicationCredentialArray) ToApplicationCredentialArrayOutput() ApplicationCredentialArrayOutput {
	return i.ToApplicationCredentialArrayOutputWithContext(context.Background())
}

func (i ApplicationCredentialArray) ToApplicationCredentialArrayOutputWithContext(ctx context.Context) ApplicationCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationCredentialArrayOutput)
}

type ApplicationCredentialOutput struct{ *pulumi.OutputState }

func (ApplicationCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationCredential)(nil)).Elem()
}

func (o ApplicationCredentialOutput) ToApplicationCredentialOutput() ApplicationCredentialOutput {
	return o
}

func (o ApplicationCredentialOutput) ToApplicationCredentialOutputWithContext(ctx context.Context) ApplicationCredentialOutput {
	return o
}

// The type of the application credentials.
func (o ApplicationCredentialOutput) CredentialType() ApplicationCredentialCredentialTypePtrOutput {
	return o.ApplyT(func(v ApplicationCredential) *ApplicationCredentialCredentialType { return v.CredentialType }).(ApplicationCredentialCredentialTypePtrOutput)
}

// The name of the SAP HANA database.
func (o ApplicationCredentialOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationCredential) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// The secret ID created in AWS Secrets Manager to store the credentials of the SAP application.
func (o ApplicationCredentialOutput) SecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationCredential) *string { return v.SecretId }).(pulumi.StringPtrOutput)
}

type ApplicationCredentialArrayOutput struct{ *pulumi.OutputState }

func (ApplicationCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationCredential)(nil)).Elem()
}

func (o ApplicationCredentialArrayOutput) ToApplicationCredentialArrayOutput() ApplicationCredentialArrayOutput {
	return o
}

func (o ApplicationCredentialArrayOutput) ToApplicationCredentialArrayOutputWithContext(ctx context.Context) ApplicationCredentialArrayOutput {
	return o
}

func (o ApplicationCredentialArrayOutput) Index(i pulumi.IntInput) ApplicationCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationCredential {
		return vs[0].([]ApplicationCredential)[vs[1].(int)]
	}).(ApplicationCredentialOutput)
}

// A key-value pair to associate with a resource.
type ApplicationTag struct {
	// The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationComponentInfoInput)(nil)).Elem(), ApplicationComponentInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationComponentInfoArrayInput)(nil)).Elem(), ApplicationComponentInfoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationCredentialInput)(nil)).Elem(), ApplicationCredentialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationCredentialArrayInput)(nil)).Elem(), ApplicationCredentialArray{})
	pulumi.RegisterOutputType(ApplicationComponentInfoOutput{})
	pulumi.RegisterOutputType(ApplicationComponentInfoArrayOutput{})
	pulumi.RegisterOutputType(ApplicationCredentialOutput{})
	pulumi.RegisterOutputType(ApplicationCredentialArrayOutput{})
}
