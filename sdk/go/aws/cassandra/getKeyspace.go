// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cassandra

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for AWS::Cassandra::Keyspace
func LookupKeyspace(ctx *pulumi.Context, args *LookupKeyspaceArgs, opts ...pulumi.InvokeOption) (*LookupKeyspaceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupKeyspaceResult
	err := ctx.Invoke("aws-native:cassandra:getKeyspace", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupKeyspaceArgs struct {
	// Name for Cassandra keyspace
	KeyspaceName string `pulumi:"keyspaceName"`
}

type LookupKeyspaceResult struct {
	// Indicates whether client-side timestamps are enabled (true) or disabled (false) for all tables in the keyspace. To add a Region to a single-Region keyspace with at least one table, the value must be set to true. After you enabled client-side timestamps for a table, you can’t disable it again.
	ClientSideTimestampsEnabled *bool `pulumi:"clientSideTimestampsEnabled"`
	// Specifies the `ReplicationStrategy` of a keyspace. The options are:
	//
	// - `SINGLE_REGION` for a single Region keyspace (optional) or
	// - `MULTI_REGION` for a multi-Region keyspace
	//
	// If no `ReplicationStrategy` is provided, the default is `SINGLE_REGION` . If you choose `MULTI_REGION` , you must also provide a `RegionList` with the AWS Regions that the keyspace is replicated in.
	ReplicationSpecification *KeyspaceReplicationSpecification `pulumi:"replicationSpecification"`
	// An array of key-value pairs to apply to this resource.
	//
	// For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) .
	Tags []aws.Tag `pulumi:"tags"`
}

func LookupKeyspaceOutput(ctx *pulumi.Context, args LookupKeyspaceOutputArgs, opts ...pulumi.InvokeOption) LookupKeyspaceResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupKeyspaceResultOutput, error) {
			args := v.(LookupKeyspaceArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:cassandra:getKeyspace", args, LookupKeyspaceResultOutput{}, options).(LookupKeyspaceResultOutput), nil
		}).(LookupKeyspaceResultOutput)
}

type LookupKeyspaceOutputArgs struct {
	// Name for Cassandra keyspace
	KeyspaceName pulumi.StringInput `pulumi:"keyspaceName"`
}

func (LookupKeyspaceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupKeyspaceArgs)(nil)).Elem()
}

type LookupKeyspaceResultOutput struct{ *pulumi.OutputState }

func (LookupKeyspaceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupKeyspaceResult)(nil)).Elem()
}

func (o LookupKeyspaceResultOutput) ToLookupKeyspaceResultOutput() LookupKeyspaceResultOutput {
	return o
}

func (o LookupKeyspaceResultOutput) ToLookupKeyspaceResultOutputWithContext(ctx context.Context) LookupKeyspaceResultOutput {
	return o
}

// Indicates whether client-side timestamps are enabled (true) or disabled (false) for all tables in the keyspace. To add a Region to a single-Region keyspace with at least one table, the value must be set to true. After you enabled client-side timestamps for a table, you can’t disable it again.
func (o LookupKeyspaceResultOutput) ClientSideTimestampsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupKeyspaceResult) *bool { return v.ClientSideTimestampsEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies the `ReplicationStrategy` of a keyspace. The options are:
//
// - `SINGLE_REGION` for a single Region keyspace (optional) or
// - `MULTI_REGION` for a multi-Region keyspace
//
// If no `ReplicationStrategy` is provided, the default is `SINGLE_REGION` . If you choose `MULTI_REGION` , you must also provide a `RegionList` with the AWS Regions that the keyspace is replicated in.
func (o LookupKeyspaceResultOutput) ReplicationSpecification() KeyspaceReplicationSpecificationPtrOutput {
	return o.ApplyT(func(v LookupKeyspaceResult) *KeyspaceReplicationSpecification { return v.ReplicationSpecification }).(KeyspaceReplicationSpecificationPtrOutput)
}

// An array of key-value pairs to apply to this resource.
//
// For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) .
func (o LookupKeyspaceResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupKeyspaceResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupKeyspaceResultOutput{})
}
