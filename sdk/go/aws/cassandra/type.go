// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cassandra

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for AWS::Cassandra::Type
type Type struct {
	pulumi.CustomResourceState

	// List of parent User-Defined Types that directly reference the User-Defined Type in their fields.
	DirectParentTypes pulumi.StringArrayOutput `pulumi:"directParentTypes"`
	// List of Tables that directly reference the User-Defined Type in their columns.
	DirectReferringTables pulumi.StringArrayOutput `pulumi:"directReferringTables"`
	// Field definitions of the User-Defined Type
	Fields TypeFieldArrayOutput `pulumi:"fields"`
	// ARN of the Keyspace which contains the User-Defined Type.
	KeyspaceArn pulumi.StringOutput `pulumi:"keyspaceArn"`
	// Name of the Keyspace which contains the User-Defined Type.
	KeyspaceName pulumi.StringOutput `pulumi:"keyspaceName"`
	// Timestamp of the last time the User-Defined Type's meta data was modified.
	LastModifiedTimestamp pulumi.Float64Output `pulumi:"lastModifiedTimestamp"`
	// Maximum nesting depth of the User-Defined Type across the field types.
	MaxNestingDepth pulumi.IntOutput `pulumi:"maxNestingDepth"`
	// Name of the User-Defined Type.
	TypeName pulumi.StringOutput `pulumi:"typeName"`
}

// NewType registers a new resource with the given unique name, arguments, and options.
func NewType(ctx *pulumi.Context,
	name string, args *TypeArgs, opts ...pulumi.ResourceOption) (*Type, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Fields == nil {
		return nil, errors.New("invalid value for required argument 'Fields'")
	}
	if args.KeyspaceName == nil {
		return nil, errors.New("invalid value for required argument 'KeyspaceName'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"fields[*]",
		"keyspaceName",
		"typeName",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Type
	err := ctx.RegisterResource("aws-native:cassandra:Type", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetType gets an existing Type resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetType(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TypeState, opts ...pulumi.ResourceOption) (*Type, error) {
	var resource Type
	err := ctx.ReadResource("aws-native:cassandra:Type", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Type resources.
type typeState struct {
}

type TypeState struct {
}

func (TypeState) ElementType() reflect.Type {
	return reflect.TypeOf((*typeState)(nil)).Elem()
}

type typeArgs struct {
	// Field definitions of the User-Defined Type
	Fields []TypeField `pulumi:"fields"`
	// Name of the Keyspace which contains the User-Defined Type.
	KeyspaceName string `pulumi:"keyspaceName"`
	// Name of the User-Defined Type.
	TypeName *string `pulumi:"typeName"`
}

// The set of arguments for constructing a Type resource.
type TypeArgs struct {
	// Field definitions of the User-Defined Type
	Fields TypeFieldArrayInput
	// Name of the Keyspace which contains the User-Defined Type.
	KeyspaceName pulumi.StringInput
	// Name of the User-Defined Type.
	TypeName pulumi.StringPtrInput
}

func (TypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*typeArgs)(nil)).Elem()
}

type TypeInput interface {
	pulumi.Input

	ToTypeOutput() TypeOutput
	ToTypeOutputWithContext(ctx context.Context) TypeOutput
}

func (*Type) ElementType() reflect.Type {
	return reflect.TypeOf((**Type)(nil)).Elem()
}

func (i *Type) ToTypeOutput() TypeOutput {
	return i.ToTypeOutputWithContext(context.Background())
}

func (i *Type) ToTypeOutputWithContext(ctx context.Context) TypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TypeOutput)
}

type TypeOutput struct{ *pulumi.OutputState }

func (TypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Type)(nil)).Elem()
}

func (o TypeOutput) ToTypeOutput() TypeOutput {
	return o
}

func (o TypeOutput) ToTypeOutputWithContext(ctx context.Context) TypeOutput {
	return o
}

// List of parent User-Defined Types that directly reference the User-Defined Type in their fields.
func (o TypeOutput) DirectParentTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Type) pulumi.StringArrayOutput { return v.DirectParentTypes }).(pulumi.StringArrayOutput)
}

// List of Tables that directly reference the User-Defined Type in their columns.
func (o TypeOutput) DirectReferringTables() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Type) pulumi.StringArrayOutput { return v.DirectReferringTables }).(pulumi.StringArrayOutput)
}

// Field definitions of the User-Defined Type
func (o TypeOutput) Fields() TypeFieldArrayOutput {
	return o.ApplyT(func(v *Type) TypeFieldArrayOutput { return v.Fields }).(TypeFieldArrayOutput)
}

// ARN of the Keyspace which contains the User-Defined Type.
func (o TypeOutput) KeyspaceArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Type) pulumi.StringOutput { return v.KeyspaceArn }).(pulumi.StringOutput)
}

// Name of the Keyspace which contains the User-Defined Type.
func (o TypeOutput) KeyspaceName() pulumi.StringOutput {
	return o.ApplyT(func(v *Type) pulumi.StringOutput { return v.KeyspaceName }).(pulumi.StringOutput)
}

// Timestamp of the last time the User-Defined Type's meta data was modified.
func (o TypeOutput) LastModifiedTimestamp() pulumi.Float64Output {
	return o.ApplyT(func(v *Type) pulumi.Float64Output { return v.LastModifiedTimestamp }).(pulumi.Float64Output)
}

// Maximum nesting depth of the User-Defined Type across the field types.
func (o TypeOutput) MaxNestingDepth() pulumi.IntOutput {
	return o.ApplyT(func(v *Type) pulumi.IntOutput { return v.MaxNestingDepth }).(pulumi.IntOutput)
}

// Name of the User-Defined Type.
func (o TypeOutput) TypeName() pulumi.StringOutput {
	return o.ApplyT(func(v *Type) pulumi.StringOutput { return v.TypeName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TypeInput)(nil)).Elem(), &Type{})
	pulumi.RegisterOutputType(TypeOutput{})
}
