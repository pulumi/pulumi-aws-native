// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cassandra

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type KeyspaceReplicationSpecification struct {
	// Specifies the AWS Regions that the keyspace is replicated in. You must specify at least two Regions, including the Region that the keyspace is being created in.
	//
	// To specify a Region [that's disabled by default](https://docs.aws.amazon.com/accounts/latest/reference/manage-acct-regions.html#rande-manage-enable) , you must first enable the Region. For more information, see [Multi-Region replication in AWS Regions disabled by default](https://docs.aws.amazon.com/keyspaces/latest/devguide/multiRegion-replication_how-it-works.html#howitworks_mrr_opt_in) in the *Amazon Keyspaces Developer Guide* .
	RegionList []KeyspaceRegionListItem `pulumi:"regionList"`
	// The options are:
	//
	// - `SINGLE_REGION` (optional)
	// - `MULTI_REGION`
	//
	// If no value is specified, the default is `SINGLE_REGION` . If `MULTI_REGION` is specified, `RegionList` is required.
	ReplicationStrategy *KeyspaceReplicationSpecificationReplicationStrategy `pulumi:"replicationStrategy"`
}

// KeyspaceReplicationSpecificationInput is an input type that accepts KeyspaceReplicationSpecificationArgs and KeyspaceReplicationSpecificationOutput values.
// You can construct a concrete instance of `KeyspaceReplicationSpecificationInput` via:
//
//	KeyspaceReplicationSpecificationArgs{...}
type KeyspaceReplicationSpecificationInput interface {
	pulumi.Input

	ToKeyspaceReplicationSpecificationOutput() KeyspaceReplicationSpecificationOutput
	ToKeyspaceReplicationSpecificationOutputWithContext(context.Context) KeyspaceReplicationSpecificationOutput
}

type KeyspaceReplicationSpecificationArgs struct {
	// Specifies the AWS Regions that the keyspace is replicated in. You must specify at least two Regions, including the Region that the keyspace is being created in.
	//
	// To specify a Region [that's disabled by default](https://docs.aws.amazon.com/accounts/latest/reference/manage-acct-regions.html#rande-manage-enable) , you must first enable the Region. For more information, see [Multi-Region replication in AWS Regions disabled by default](https://docs.aws.amazon.com/keyspaces/latest/devguide/multiRegion-replication_how-it-works.html#howitworks_mrr_opt_in) in the *Amazon Keyspaces Developer Guide* .
	RegionList KeyspaceRegionListItemArrayInput `pulumi:"regionList"`
	// The options are:
	//
	// - `SINGLE_REGION` (optional)
	// - `MULTI_REGION`
	//
	// If no value is specified, the default is `SINGLE_REGION` . If `MULTI_REGION` is specified, `RegionList` is required.
	ReplicationStrategy KeyspaceReplicationSpecificationReplicationStrategyPtrInput `pulumi:"replicationStrategy"`
}

func (KeyspaceReplicationSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyspaceReplicationSpecification)(nil)).Elem()
}

func (i KeyspaceReplicationSpecificationArgs) ToKeyspaceReplicationSpecificationOutput() KeyspaceReplicationSpecificationOutput {
	return i.ToKeyspaceReplicationSpecificationOutputWithContext(context.Background())
}

func (i KeyspaceReplicationSpecificationArgs) ToKeyspaceReplicationSpecificationOutputWithContext(ctx context.Context) KeyspaceReplicationSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyspaceReplicationSpecificationOutput)
}

func (i KeyspaceReplicationSpecificationArgs) ToKeyspaceReplicationSpecificationPtrOutput() KeyspaceReplicationSpecificationPtrOutput {
	return i.ToKeyspaceReplicationSpecificationPtrOutputWithContext(context.Background())
}

func (i KeyspaceReplicationSpecificationArgs) ToKeyspaceReplicationSpecificationPtrOutputWithContext(ctx context.Context) KeyspaceReplicationSpecificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyspaceReplicationSpecificationOutput).ToKeyspaceReplicationSpecificationPtrOutputWithContext(ctx)
}

// KeyspaceReplicationSpecificationPtrInput is an input type that accepts KeyspaceReplicationSpecificationArgs, KeyspaceReplicationSpecificationPtr and KeyspaceReplicationSpecificationPtrOutput values.
// You can construct a concrete instance of `KeyspaceReplicationSpecificationPtrInput` via:
//
//	        KeyspaceReplicationSpecificationArgs{...}
//
//	or:
//
//	        nil
type KeyspaceReplicationSpecificationPtrInput interface {
	pulumi.Input

	ToKeyspaceReplicationSpecificationPtrOutput() KeyspaceReplicationSpecificationPtrOutput
	ToKeyspaceReplicationSpecificationPtrOutputWithContext(context.Context) KeyspaceReplicationSpecificationPtrOutput
}

type keyspaceReplicationSpecificationPtrType KeyspaceReplicationSpecificationArgs

func KeyspaceReplicationSpecificationPtr(v *KeyspaceReplicationSpecificationArgs) KeyspaceReplicationSpecificationPtrInput {
	return (*keyspaceReplicationSpecificationPtrType)(v)
}

func (*keyspaceReplicationSpecificationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyspaceReplicationSpecification)(nil)).Elem()
}

func (i *keyspaceReplicationSpecificationPtrType) ToKeyspaceReplicationSpecificationPtrOutput() KeyspaceReplicationSpecificationPtrOutput {
	return i.ToKeyspaceReplicationSpecificationPtrOutputWithContext(context.Background())
}

func (i *keyspaceReplicationSpecificationPtrType) ToKeyspaceReplicationSpecificationPtrOutputWithContext(ctx context.Context) KeyspaceReplicationSpecificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyspaceReplicationSpecificationPtrOutput)
}

type KeyspaceReplicationSpecificationOutput struct{ *pulumi.OutputState }

func (KeyspaceReplicationSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyspaceReplicationSpecification)(nil)).Elem()
}

func (o KeyspaceReplicationSpecificationOutput) ToKeyspaceReplicationSpecificationOutput() KeyspaceReplicationSpecificationOutput {
	return o
}

func (o KeyspaceReplicationSpecificationOutput) ToKeyspaceReplicationSpecificationOutputWithContext(ctx context.Context) KeyspaceReplicationSpecificationOutput {
	return o
}

func (o KeyspaceReplicationSpecificationOutput) ToKeyspaceReplicationSpecificationPtrOutput() KeyspaceReplicationSpecificationPtrOutput {
	return o.ToKeyspaceReplicationSpecificationPtrOutputWithContext(context.Background())
}

func (o KeyspaceReplicationSpecificationOutput) ToKeyspaceReplicationSpecificationPtrOutputWithContext(ctx context.Context) KeyspaceReplicationSpecificationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KeyspaceReplicationSpecification) *KeyspaceReplicationSpecification {
		return &v
	}).(KeyspaceReplicationSpecificationPtrOutput)
}

// Specifies the AWS Regions that the keyspace is replicated in. You must specify at least two Regions, including the Region that the keyspace is being created in.
//
// To specify a Region [that's disabled by default](https://docs.aws.amazon.com/accounts/latest/reference/manage-acct-regions.html#rande-manage-enable) , you must first enable the Region. For more information, see [Multi-Region replication in AWS Regions disabled by default](https://docs.aws.amazon.com/keyspaces/latest/devguide/multiRegion-replication_how-it-works.html#howitworks_mrr_opt_in) in the *Amazon Keyspaces Developer Guide* .
func (o KeyspaceReplicationSpecificationOutput) RegionList() KeyspaceRegionListItemArrayOutput {
	return o.ApplyT(func(v KeyspaceReplicationSpecification) []KeyspaceRegionListItem { return v.RegionList }).(KeyspaceRegionListItemArrayOutput)
}

// The options are:
//
// - `SINGLE_REGION` (optional)
// - `MULTI_REGION`
//
// If no value is specified, the default is `SINGLE_REGION` . If `MULTI_REGION` is specified, `RegionList` is required.
func (o KeyspaceReplicationSpecificationOutput) ReplicationStrategy() KeyspaceReplicationSpecificationReplicationStrategyPtrOutput {
	return o.ApplyT(func(v KeyspaceReplicationSpecification) *KeyspaceReplicationSpecificationReplicationStrategy {
		return v.ReplicationStrategy
	}).(KeyspaceReplicationSpecificationReplicationStrategyPtrOutput)
}

type KeyspaceReplicationSpecificationPtrOutput struct{ *pulumi.OutputState }

func (KeyspaceReplicationSpecificationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyspaceReplicationSpecification)(nil)).Elem()
}

func (o KeyspaceReplicationSpecificationPtrOutput) ToKeyspaceReplicationSpecificationPtrOutput() KeyspaceReplicationSpecificationPtrOutput {
	return o
}

func (o KeyspaceReplicationSpecificationPtrOutput) ToKeyspaceReplicationSpecificationPtrOutputWithContext(ctx context.Context) KeyspaceReplicationSpecificationPtrOutput {
	return o
}

func (o KeyspaceReplicationSpecificationPtrOutput) Elem() KeyspaceReplicationSpecificationOutput {
	return o.ApplyT(func(v *KeyspaceReplicationSpecification) KeyspaceReplicationSpecification {
		if v != nil {
			return *v
		}
		var ret KeyspaceReplicationSpecification
		return ret
	}).(KeyspaceReplicationSpecificationOutput)
}

// Specifies the AWS Regions that the keyspace is replicated in. You must specify at least two Regions, including the Region that the keyspace is being created in.
//
// To specify a Region [that's disabled by default](https://docs.aws.amazon.com/accounts/latest/reference/manage-acct-regions.html#rande-manage-enable) , you must first enable the Region. For more information, see [Multi-Region replication in AWS Regions disabled by default](https://docs.aws.amazon.com/keyspaces/latest/devguide/multiRegion-replication_how-it-works.html#howitworks_mrr_opt_in) in the *Amazon Keyspaces Developer Guide* .
func (o KeyspaceReplicationSpecificationPtrOutput) RegionList() KeyspaceRegionListItemArrayOutput {
	return o.ApplyT(func(v *KeyspaceReplicationSpecification) []KeyspaceRegionListItem {
		if v == nil {
			return nil
		}
		return v.RegionList
	}).(KeyspaceRegionListItemArrayOutput)
}

// The options are:
//
// - `SINGLE_REGION` (optional)
// - `MULTI_REGION`
//
// If no value is specified, the default is `SINGLE_REGION` . If `MULTI_REGION` is specified, `RegionList` is required.
func (o KeyspaceReplicationSpecificationPtrOutput) ReplicationStrategy() KeyspaceReplicationSpecificationReplicationStrategyPtrOutput {
	return o.ApplyT(func(v *KeyspaceReplicationSpecification) *KeyspaceReplicationSpecificationReplicationStrategy {
		if v == nil {
			return nil
		}
		return v.ReplicationStrategy
	}).(KeyspaceReplicationSpecificationReplicationStrategyPtrOutput)
}

type KeyspaceTag struct {
	// The key of the tag. Tag keys are case sensitive. Each Amazon Keyspaces resource can only have up to one tag with the same key. If you try to add an existing tag (same key), the existing tag value will be updated to the new value.
	Key string `pulumi:"key"`
	// The value of the tag. Tag values are case-sensitive and can be null.
	Value string `pulumi:"value"`
}

// Represents configuration for auto scaling.
type TableAutoScalingSetting struct {
	// This optional parameter enables auto scaling for the table if set to `false` .
	AutoScalingDisabled *bool `pulumi:"autoScalingDisabled"`
	// Manage costs by specifying the maximum amount of throughput to provision. The value must be between 1 and the max throughput per second quota for your account (40,000 by default).
	MaximumUnits *int `pulumi:"maximumUnits"`
	// The minimum level of throughput the table should always be ready to support. The value must be between 1 and the max throughput per second quota for your account (40,000 by default).
	MinimumUnits *int `pulumi:"minimumUnits"`
	// Amazon Keyspaces supports the `target tracking` auto scaling policy. With this policy, Amazon Keyspaces auto scaling ensures that the table's ratio of consumed to provisioned capacity stays at or near the target value that you specify. You define the target value as a percentage between 20 and 90.
	ScalingPolicy *TableScalingPolicy `pulumi:"scalingPolicy"`
}

// TableAutoScalingSettingInput is an input type that accepts TableAutoScalingSettingArgs and TableAutoScalingSettingOutput values.
// You can construct a concrete instance of `TableAutoScalingSettingInput` via:
//
//	TableAutoScalingSettingArgs{...}
type TableAutoScalingSettingInput interface {
	pulumi.Input

	ToTableAutoScalingSettingOutput() TableAutoScalingSettingOutput
	ToTableAutoScalingSettingOutputWithContext(context.Context) TableAutoScalingSettingOutput
}

// Represents configuration for auto scaling.
type TableAutoScalingSettingArgs struct {
	// This optional parameter enables auto scaling for the table if set to `false` .
	AutoScalingDisabled pulumi.BoolPtrInput `pulumi:"autoScalingDisabled"`
	// Manage costs by specifying the maximum amount of throughput to provision. The value must be between 1 and the max throughput per second quota for your account (40,000 by default).
	MaximumUnits pulumi.IntPtrInput `pulumi:"maximumUnits"`
	// The minimum level of throughput the table should always be ready to support. The value must be between 1 and the max throughput per second quota for your account (40,000 by default).
	MinimumUnits pulumi.IntPtrInput `pulumi:"minimumUnits"`
	// Amazon Keyspaces supports the `target tracking` auto scaling policy. With this policy, Amazon Keyspaces auto scaling ensures that the table's ratio of consumed to provisioned capacity stays at or near the target value that you specify. You define the target value as a percentage between 20 and 90.
	ScalingPolicy TableScalingPolicyPtrInput `pulumi:"scalingPolicy"`
}

func (TableAutoScalingSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableAutoScalingSetting)(nil)).Elem()
}

func (i TableAutoScalingSettingArgs) ToTableAutoScalingSettingOutput() TableAutoScalingSettingOutput {
	return i.ToTableAutoScalingSettingOutputWithContext(context.Background())
}

func (i TableAutoScalingSettingArgs) ToTableAutoScalingSettingOutputWithContext(ctx context.Context) TableAutoScalingSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableAutoScalingSettingOutput)
}

func (i TableAutoScalingSettingArgs) ToTableAutoScalingSettingPtrOutput() TableAutoScalingSettingPtrOutput {
	return i.ToTableAutoScalingSettingPtrOutputWithContext(context.Background())
}

func (i TableAutoScalingSettingArgs) ToTableAutoScalingSettingPtrOutputWithContext(ctx context.Context) TableAutoScalingSettingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableAutoScalingSettingOutput).ToTableAutoScalingSettingPtrOutputWithContext(ctx)
}

// TableAutoScalingSettingPtrInput is an input type that accepts TableAutoScalingSettingArgs, TableAutoScalingSettingPtr and TableAutoScalingSettingPtrOutput values.
// You can construct a concrete instance of `TableAutoScalingSettingPtrInput` via:
//
//	        TableAutoScalingSettingArgs{...}
//
//	or:
//
//	        nil
type TableAutoScalingSettingPtrInput interface {
	pulumi.Input

	ToTableAutoScalingSettingPtrOutput() TableAutoScalingSettingPtrOutput
	ToTableAutoScalingSettingPtrOutputWithContext(context.Context) TableAutoScalingSettingPtrOutput
}

type tableAutoScalingSettingPtrType TableAutoScalingSettingArgs

func TableAutoScalingSettingPtr(v *TableAutoScalingSettingArgs) TableAutoScalingSettingPtrInput {
	return (*tableAutoScalingSettingPtrType)(v)
}

func (*tableAutoScalingSettingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableAutoScalingSetting)(nil)).Elem()
}

func (i *tableAutoScalingSettingPtrType) ToTableAutoScalingSettingPtrOutput() TableAutoScalingSettingPtrOutput {
	return i.ToTableAutoScalingSettingPtrOutputWithContext(context.Background())
}

func (i *tableAutoScalingSettingPtrType) ToTableAutoScalingSettingPtrOutputWithContext(ctx context.Context) TableAutoScalingSettingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableAutoScalingSettingPtrOutput)
}

// Represents configuration for auto scaling.
type TableAutoScalingSettingOutput struct{ *pulumi.OutputState }

func (TableAutoScalingSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableAutoScalingSetting)(nil)).Elem()
}

func (o TableAutoScalingSettingOutput) ToTableAutoScalingSettingOutput() TableAutoScalingSettingOutput {
	return o
}

func (o TableAutoScalingSettingOutput) ToTableAutoScalingSettingOutputWithContext(ctx context.Context) TableAutoScalingSettingOutput {
	return o
}

func (o TableAutoScalingSettingOutput) ToTableAutoScalingSettingPtrOutput() TableAutoScalingSettingPtrOutput {
	return o.ToTableAutoScalingSettingPtrOutputWithContext(context.Background())
}

func (o TableAutoScalingSettingOutput) ToTableAutoScalingSettingPtrOutputWithContext(ctx context.Context) TableAutoScalingSettingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableAutoScalingSetting) *TableAutoScalingSetting {
		return &v
	}).(TableAutoScalingSettingPtrOutput)
}

// This optional parameter enables auto scaling for the table if set to `false` .
func (o TableAutoScalingSettingOutput) AutoScalingDisabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableAutoScalingSetting) *bool { return v.AutoScalingDisabled }).(pulumi.BoolPtrOutput)
}

// Manage costs by specifying the maximum amount of throughput to provision. The value must be between 1 and the max throughput per second quota for your account (40,000 by default).
func (o TableAutoScalingSettingOutput) MaximumUnits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableAutoScalingSetting) *int { return v.MaximumUnits }).(pulumi.IntPtrOutput)
}

// The minimum level of throughput the table should always be ready to support. The value must be between 1 and the max throughput per second quota for your account (40,000 by default).
func (o TableAutoScalingSettingOutput) MinimumUnits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableAutoScalingSetting) *int { return v.MinimumUnits }).(pulumi.IntPtrOutput)
}

// Amazon Keyspaces supports the `target tracking` auto scaling policy. With this policy, Amazon Keyspaces auto scaling ensures that the table's ratio of consumed to provisioned capacity stays at or near the target value that you specify. You define the target value as a percentage between 20 and 90.
func (o TableAutoScalingSettingOutput) ScalingPolicy() TableScalingPolicyPtrOutput {
	return o.ApplyT(func(v TableAutoScalingSetting) *TableScalingPolicy { return v.ScalingPolicy }).(TableScalingPolicyPtrOutput)
}

type TableAutoScalingSettingPtrOutput struct{ *pulumi.OutputState }

func (TableAutoScalingSettingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableAutoScalingSetting)(nil)).Elem()
}

func (o TableAutoScalingSettingPtrOutput) ToTableAutoScalingSettingPtrOutput() TableAutoScalingSettingPtrOutput {
	return o
}

func (o TableAutoScalingSettingPtrOutput) ToTableAutoScalingSettingPtrOutputWithContext(ctx context.Context) TableAutoScalingSettingPtrOutput {
	return o
}

func (o TableAutoScalingSettingPtrOutput) Elem() TableAutoScalingSettingOutput {
	return o.ApplyT(func(v *TableAutoScalingSetting) TableAutoScalingSetting {
		if v != nil {
			return *v
		}
		var ret TableAutoScalingSetting
		return ret
	}).(TableAutoScalingSettingOutput)
}

// This optional parameter enables auto scaling for the table if set to `false` .
func (o TableAutoScalingSettingPtrOutput) AutoScalingDisabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TableAutoScalingSetting) *bool {
		if v == nil {
			return nil
		}
		return v.AutoScalingDisabled
	}).(pulumi.BoolPtrOutput)
}

// Manage costs by specifying the maximum amount of throughput to provision. The value must be between 1 and the max throughput per second quota for your account (40,000 by default).
func (o TableAutoScalingSettingPtrOutput) MaximumUnits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableAutoScalingSetting) *int {
		if v == nil {
			return nil
		}
		return v.MaximumUnits
	}).(pulumi.IntPtrOutput)
}

// The minimum level of throughput the table should always be ready to support. The value must be between 1 and the max throughput per second quota for your account (40,000 by default).
func (o TableAutoScalingSettingPtrOutput) MinimumUnits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableAutoScalingSetting) *int {
		if v == nil {
			return nil
		}
		return v.MinimumUnits
	}).(pulumi.IntPtrOutput)
}

// Amazon Keyspaces supports the `target tracking` auto scaling policy. With this policy, Amazon Keyspaces auto scaling ensures that the table's ratio of consumed to provisioned capacity stays at or near the target value that you specify. You define the target value as a percentage between 20 and 90.
func (o TableAutoScalingSettingPtrOutput) ScalingPolicy() TableScalingPolicyPtrOutput {
	return o.ApplyT(func(v *TableAutoScalingSetting) *TableScalingPolicy {
		if v == nil {
			return nil
		}
		return v.ScalingPolicy
	}).(TableScalingPolicyPtrOutput)
}

// Represents the read and write settings used for AutoScaling.
type TableAutoScalingSpecification struct {
	// The auto scaling settings for the table's read capacity.
	ReadCapacityAutoScaling *TableAutoScalingSetting `pulumi:"readCapacityAutoScaling"`
	// The auto scaling settings for the table's write capacity.
	WriteCapacityAutoScaling *TableAutoScalingSetting `pulumi:"writeCapacityAutoScaling"`
}

// TableAutoScalingSpecificationInput is an input type that accepts TableAutoScalingSpecificationArgs and TableAutoScalingSpecificationOutput values.
// You can construct a concrete instance of `TableAutoScalingSpecificationInput` via:
//
//	TableAutoScalingSpecificationArgs{...}
type TableAutoScalingSpecificationInput interface {
	pulumi.Input

	ToTableAutoScalingSpecificationOutput() TableAutoScalingSpecificationOutput
	ToTableAutoScalingSpecificationOutputWithContext(context.Context) TableAutoScalingSpecificationOutput
}

// Represents the read and write settings used for AutoScaling.
type TableAutoScalingSpecificationArgs struct {
	// The auto scaling settings for the table's read capacity.
	ReadCapacityAutoScaling TableAutoScalingSettingPtrInput `pulumi:"readCapacityAutoScaling"`
	// The auto scaling settings for the table's write capacity.
	WriteCapacityAutoScaling TableAutoScalingSettingPtrInput `pulumi:"writeCapacityAutoScaling"`
}

func (TableAutoScalingSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableAutoScalingSpecification)(nil)).Elem()
}

func (i TableAutoScalingSpecificationArgs) ToTableAutoScalingSpecificationOutput() TableAutoScalingSpecificationOutput {
	return i.ToTableAutoScalingSpecificationOutputWithContext(context.Background())
}

func (i TableAutoScalingSpecificationArgs) ToTableAutoScalingSpecificationOutputWithContext(ctx context.Context) TableAutoScalingSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableAutoScalingSpecificationOutput)
}

func (i TableAutoScalingSpecificationArgs) ToTableAutoScalingSpecificationPtrOutput() TableAutoScalingSpecificationPtrOutput {
	return i.ToTableAutoScalingSpecificationPtrOutputWithContext(context.Background())
}

func (i TableAutoScalingSpecificationArgs) ToTableAutoScalingSpecificationPtrOutputWithContext(ctx context.Context) TableAutoScalingSpecificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableAutoScalingSpecificationOutput).ToTableAutoScalingSpecificationPtrOutputWithContext(ctx)
}

// TableAutoScalingSpecificationPtrInput is an input type that accepts TableAutoScalingSpecificationArgs, TableAutoScalingSpecificationPtr and TableAutoScalingSpecificationPtrOutput values.
// You can construct a concrete instance of `TableAutoScalingSpecificationPtrInput` via:
//
//	        TableAutoScalingSpecificationArgs{...}
//
//	or:
//
//	        nil
type TableAutoScalingSpecificationPtrInput interface {
	pulumi.Input

	ToTableAutoScalingSpecificationPtrOutput() TableAutoScalingSpecificationPtrOutput
	ToTableAutoScalingSpecificationPtrOutputWithContext(context.Context) TableAutoScalingSpecificationPtrOutput
}

type tableAutoScalingSpecificationPtrType TableAutoScalingSpecificationArgs

func TableAutoScalingSpecificationPtr(v *TableAutoScalingSpecificationArgs) TableAutoScalingSpecificationPtrInput {
	return (*tableAutoScalingSpecificationPtrType)(v)
}

func (*tableAutoScalingSpecificationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableAutoScalingSpecification)(nil)).Elem()
}

func (i *tableAutoScalingSpecificationPtrType) ToTableAutoScalingSpecificationPtrOutput() TableAutoScalingSpecificationPtrOutput {
	return i.ToTableAutoScalingSpecificationPtrOutputWithContext(context.Background())
}

func (i *tableAutoScalingSpecificationPtrType) ToTableAutoScalingSpecificationPtrOutputWithContext(ctx context.Context) TableAutoScalingSpecificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableAutoScalingSpecificationPtrOutput)
}

// Represents the read and write settings used for AutoScaling.
type TableAutoScalingSpecificationOutput struct{ *pulumi.OutputState }

func (TableAutoScalingSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableAutoScalingSpecification)(nil)).Elem()
}

func (o TableAutoScalingSpecificationOutput) ToTableAutoScalingSpecificationOutput() TableAutoScalingSpecificationOutput {
	return o
}

func (o TableAutoScalingSpecificationOutput) ToTableAutoScalingSpecificationOutputWithContext(ctx context.Context) TableAutoScalingSpecificationOutput {
	return o
}

func (o TableAutoScalingSpecificationOutput) ToTableAutoScalingSpecificationPtrOutput() TableAutoScalingSpecificationPtrOutput {
	return o.ToTableAutoScalingSpecificationPtrOutputWithContext(context.Background())
}

func (o TableAutoScalingSpecificationOutput) ToTableAutoScalingSpecificationPtrOutputWithContext(ctx context.Context) TableAutoScalingSpecificationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableAutoScalingSpecification) *TableAutoScalingSpecification {
		return &v
	}).(TableAutoScalingSpecificationPtrOutput)
}

// The auto scaling settings for the table's read capacity.
func (o TableAutoScalingSpecificationOutput) ReadCapacityAutoScaling() TableAutoScalingSettingPtrOutput {
	return o.ApplyT(func(v TableAutoScalingSpecification) *TableAutoScalingSetting { return v.ReadCapacityAutoScaling }).(TableAutoScalingSettingPtrOutput)
}

// The auto scaling settings for the table's write capacity.
func (o TableAutoScalingSpecificationOutput) WriteCapacityAutoScaling() TableAutoScalingSettingPtrOutput {
	return o.ApplyT(func(v TableAutoScalingSpecification) *TableAutoScalingSetting { return v.WriteCapacityAutoScaling }).(TableAutoScalingSettingPtrOutput)
}

type TableAutoScalingSpecificationPtrOutput struct{ *pulumi.OutputState }

func (TableAutoScalingSpecificationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableAutoScalingSpecification)(nil)).Elem()
}

func (o TableAutoScalingSpecificationPtrOutput) ToTableAutoScalingSpecificationPtrOutput() TableAutoScalingSpecificationPtrOutput {
	return o
}

func (o TableAutoScalingSpecificationPtrOutput) ToTableAutoScalingSpecificationPtrOutputWithContext(ctx context.Context) TableAutoScalingSpecificationPtrOutput {
	return o
}

func (o TableAutoScalingSpecificationPtrOutput) Elem() TableAutoScalingSpecificationOutput {
	return o.ApplyT(func(v *TableAutoScalingSpecification) TableAutoScalingSpecification {
		if v != nil {
			return *v
		}
		var ret TableAutoScalingSpecification
		return ret
	}).(TableAutoScalingSpecificationOutput)
}

// The auto scaling settings for the table's read capacity.
func (o TableAutoScalingSpecificationPtrOutput) ReadCapacityAutoScaling() TableAutoScalingSettingPtrOutput {
	return o.ApplyT(func(v *TableAutoScalingSpecification) *TableAutoScalingSetting {
		if v == nil {
			return nil
		}
		return v.ReadCapacityAutoScaling
	}).(TableAutoScalingSettingPtrOutput)
}

// The auto scaling settings for the table's write capacity.
func (o TableAutoScalingSpecificationPtrOutput) WriteCapacityAutoScaling() TableAutoScalingSettingPtrOutput {
	return o.ApplyT(func(v *TableAutoScalingSpecification) *TableAutoScalingSetting {
		if v == nil {
			return nil
		}
		return v.WriteCapacityAutoScaling
	}).(TableAutoScalingSettingPtrOutput)
}

type TableBillingMode struct {
	// The billing mode for the table:
	//
	// - On-demand mode - `ON_DEMAND`
	// - Provisioned mode - `PROVISIONED`
	//
	// > If you choose `PROVISIONED` mode, then you also need to specify provisioned throughput (read and write capacity) for the table.
	//
	// Valid values: `ON_DEMAND` | `PROVISIONED`
	Mode TableMode `pulumi:"mode"`
	// The provisioned read capacity and write capacity for the table. For more information, see [Provisioned throughput capacity mode](https://docs.aws.amazon.com/keyspaces/latest/devguide/ReadWriteCapacityMode.html#ReadWriteCapacityMode.Provisioned) in the *Amazon Keyspaces Developer Guide* .
	ProvisionedThroughput *TableProvisionedThroughput `pulumi:"provisionedThroughput"`
}

// TableBillingModeInput is an input type that accepts TableBillingModeArgs and TableBillingModeOutput values.
// You can construct a concrete instance of `TableBillingModeInput` via:
//
//	TableBillingModeArgs{...}
type TableBillingModeInput interface {
	pulumi.Input

	ToTableBillingModeOutput() TableBillingModeOutput
	ToTableBillingModeOutputWithContext(context.Context) TableBillingModeOutput
}

type TableBillingModeArgs struct {
	// The billing mode for the table:
	//
	// - On-demand mode - `ON_DEMAND`
	// - Provisioned mode - `PROVISIONED`
	//
	// > If you choose `PROVISIONED` mode, then you also need to specify provisioned throughput (read and write capacity) for the table.
	//
	// Valid values: `ON_DEMAND` | `PROVISIONED`
	Mode TableModeInput `pulumi:"mode"`
	// The provisioned read capacity and write capacity for the table. For more information, see [Provisioned throughput capacity mode](https://docs.aws.amazon.com/keyspaces/latest/devguide/ReadWriteCapacityMode.html#ReadWriteCapacityMode.Provisioned) in the *Amazon Keyspaces Developer Guide* .
	ProvisionedThroughput TableProvisionedThroughputPtrInput `pulumi:"provisionedThroughput"`
}

func (TableBillingModeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableBillingMode)(nil)).Elem()
}

func (i TableBillingModeArgs) ToTableBillingModeOutput() TableBillingModeOutput {
	return i.ToTableBillingModeOutputWithContext(context.Background())
}

func (i TableBillingModeArgs) ToTableBillingModeOutputWithContext(ctx context.Context) TableBillingModeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableBillingModeOutput)
}

func (i TableBillingModeArgs) ToTableBillingModePtrOutput() TableBillingModePtrOutput {
	return i.ToTableBillingModePtrOutputWithContext(context.Background())
}

func (i TableBillingModeArgs) ToTableBillingModePtrOutputWithContext(ctx context.Context) TableBillingModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableBillingModeOutput).ToTableBillingModePtrOutputWithContext(ctx)
}

// TableBillingModePtrInput is an input type that accepts TableBillingModeArgs, TableBillingModePtr and TableBillingModePtrOutput values.
// You can construct a concrete instance of `TableBillingModePtrInput` via:
//
//	        TableBillingModeArgs{...}
//
//	or:
//
//	        nil
type TableBillingModePtrInput interface {
	pulumi.Input

	ToTableBillingModePtrOutput() TableBillingModePtrOutput
	ToTableBillingModePtrOutputWithContext(context.Context) TableBillingModePtrOutput
}

type tableBillingModePtrType TableBillingModeArgs

func TableBillingModePtr(v *TableBillingModeArgs) TableBillingModePtrInput {
	return (*tableBillingModePtrType)(v)
}

func (*tableBillingModePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableBillingMode)(nil)).Elem()
}

func (i *tableBillingModePtrType) ToTableBillingModePtrOutput() TableBillingModePtrOutput {
	return i.ToTableBillingModePtrOutputWithContext(context.Background())
}

func (i *tableBillingModePtrType) ToTableBillingModePtrOutputWithContext(ctx context.Context) TableBillingModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableBillingModePtrOutput)
}

type TableBillingModeOutput struct{ *pulumi.OutputState }

func (TableBillingModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableBillingMode)(nil)).Elem()
}

func (o TableBillingModeOutput) ToTableBillingModeOutput() TableBillingModeOutput {
	return o
}

func (o TableBillingModeOutput) ToTableBillingModeOutputWithContext(ctx context.Context) TableBillingModeOutput {
	return o
}

func (o TableBillingModeOutput) ToTableBillingModePtrOutput() TableBillingModePtrOutput {
	return o.ToTableBillingModePtrOutputWithContext(context.Background())
}

func (o TableBillingModeOutput) ToTableBillingModePtrOutputWithContext(ctx context.Context) TableBillingModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableBillingMode) *TableBillingMode {
		return &v
	}).(TableBillingModePtrOutput)
}

// The billing mode for the table:
//
// - On-demand mode - `ON_DEMAND`
// - Provisioned mode - `PROVISIONED`
//
// > If you choose `PROVISIONED` mode, then you also need to specify provisioned throughput (read and write capacity) for the table.
//
// Valid values: `ON_DEMAND` | `PROVISIONED`
func (o TableBillingModeOutput) Mode() TableModeOutput {
	return o.ApplyT(func(v TableBillingMode) TableMode { return v.Mode }).(TableModeOutput)
}

// The provisioned read capacity and write capacity for the table. For more information, see [Provisioned throughput capacity mode](https://docs.aws.amazon.com/keyspaces/latest/devguide/ReadWriteCapacityMode.html#ReadWriteCapacityMode.Provisioned) in the *Amazon Keyspaces Developer Guide* .
func (o TableBillingModeOutput) ProvisionedThroughput() TableProvisionedThroughputPtrOutput {
	return o.ApplyT(func(v TableBillingMode) *TableProvisionedThroughput { return v.ProvisionedThroughput }).(TableProvisionedThroughputPtrOutput)
}

type TableBillingModePtrOutput struct{ *pulumi.OutputState }

func (TableBillingModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableBillingMode)(nil)).Elem()
}

func (o TableBillingModePtrOutput) ToTableBillingModePtrOutput() TableBillingModePtrOutput {
	return o
}

func (o TableBillingModePtrOutput) ToTableBillingModePtrOutputWithContext(ctx context.Context) TableBillingModePtrOutput {
	return o
}

func (o TableBillingModePtrOutput) Elem() TableBillingModeOutput {
	return o.ApplyT(func(v *TableBillingMode) TableBillingMode {
		if v != nil {
			return *v
		}
		var ret TableBillingMode
		return ret
	}).(TableBillingModeOutput)
}

// The billing mode for the table:
//
// - On-demand mode - `ON_DEMAND`
// - Provisioned mode - `PROVISIONED`
//
// > If you choose `PROVISIONED` mode, then you also need to specify provisioned throughput (read and write capacity) for the table.
//
// Valid values: `ON_DEMAND` | `PROVISIONED`
func (o TableBillingModePtrOutput) Mode() TableModePtrOutput {
	return o.ApplyT(func(v *TableBillingMode) *TableMode {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(TableModePtrOutput)
}

// The provisioned read capacity and write capacity for the table. For more information, see [Provisioned throughput capacity mode](https://docs.aws.amazon.com/keyspaces/latest/devguide/ReadWriteCapacityMode.html#ReadWriteCapacityMode.Provisioned) in the *Amazon Keyspaces Developer Guide* .
func (o TableBillingModePtrOutput) ProvisionedThroughput() TableProvisionedThroughputPtrOutput {
	return o.ApplyT(func(v *TableBillingMode) *TableProvisionedThroughput {
		if v == nil {
			return nil
		}
		return v.ProvisionedThroughput
	}).(TableProvisionedThroughputPtrOutput)
}

// Represents the CDC configuration for the table
type TableCdcSpecification struct {
	Status   TableCdcStatus    `pulumi:"status"`
	ViewType *TableCdcViewType `pulumi:"viewType"`
}

// TableCdcSpecificationInput is an input type that accepts TableCdcSpecificationArgs and TableCdcSpecificationOutput values.
// You can construct a concrete instance of `TableCdcSpecificationInput` via:
//
//	TableCdcSpecificationArgs{...}
type TableCdcSpecificationInput interface {
	pulumi.Input

	ToTableCdcSpecificationOutput() TableCdcSpecificationOutput
	ToTableCdcSpecificationOutputWithContext(context.Context) TableCdcSpecificationOutput
}

// Represents the CDC configuration for the table
type TableCdcSpecificationArgs struct {
	Status   TableCdcStatusInput      `pulumi:"status"`
	ViewType TableCdcViewTypePtrInput `pulumi:"viewType"`
}

func (TableCdcSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableCdcSpecification)(nil)).Elem()
}

func (i TableCdcSpecificationArgs) ToTableCdcSpecificationOutput() TableCdcSpecificationOutput {
	return i.ToTableCdcSpecificationOutputWithContext(context.Background())
}

func (i TableCdcSpecificationArgs) ToTableCdcSpecificationOutputWithContext(ctx context.Context) TableCdcSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableCdcSpecificationOutput)
}

func (i TableCdcSpecificationArgs) ToTableCdcSpecificationPtrOutput() TableCdcSpecificationPtrOutput {
	return i.ToTableCdcSpecificationPtrOutputWithContext(context.Background())
}

func (i TableCdcSpecificationArgs) ToTableCdcSpecificationPtrOutputWithContext(ctx context.Context) TableCdcSpecificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableCdcSpecificationOutput).ToTableCdcSpecificationPtrOutputWithContext(ctx)
}

// TableCdcSpecificationPtrInput is an input type that accepts TableCdcSpecificationArgs, TableCdcSpecificationPtr and TableCdcSpecificationPtrOutput values.
// You can construct a concrete instance of `TableCdcSpecificationPtrInput` via:
//
//	        TableCdcSpecificationArgs{...}
//
//	or:
//
//	        nil
type TableCdcSpecificationPtrInput interface {
	pulumi.Input

	ToTableCdcSpecificationPtrOutput() TableCdcSpecificationPtrOutput
	ToTableCdcSpecificationPtrOutputWithContext(context.Context) TableCdcSpecificationPtrOutput
}

type tableCdcSpecificationPtrType TableCdcSpecificationArgs

func TableCdcSpecificationPtr(v *TableCdcSpecificationArgs) TableCdcSpecificationPtrInput {
	return (*tableCdcSpecificationPtrType)(v)
}

func (*tableCdcSpecificationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableCdcSpecification)(nil)).Elem()
}

func (i *tableCdcSpecificationPtrType) ToTableCdcSpecificationPtrOutput() TableCdcSpecificationPtrOutput {
	return i.ToTableCdcSpecificationPtrOutputWithContext(context.Background())
}

func (i *tableCdcSpecificationPtrType) ToTableCdcSpecificationPtrOutputWithContext(ctx context.Context) TableCdcSpecificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableCdcSpecificationPtrOutput)
}

// Represents the CDC configuration for the table
type TableCdcSpecificationOutput struct{ *pulumi.OutputState }

func (TableCdcSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableCdcSpecification)(nil)).Elem()
}

func (o TableCdcSpecificationOutput) ToTableCdcSpecificationOutput() TableCdcSpecificationOutput {
	return o
}

func (o TableCdcSpecificationOutput) ToTableCdcSpecificationOutputWithContext(ctx context.Context) TableCdcSpecificationOutput {
	return o
}

func (o TableCdcSpecificationOutput) ToTableCdcSpecificationPtrOutput() TableCdcSpecificationPtrOutput {
	return o.ToTableCdcSpecificationPtrOutputWithContext(context.Background())
}

func (o TableCdcSpecificationOutput) ToTableCdcSpecificationPtrOutputWithContext(ctx context.Context) TableCdcSpecificationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableCdcSpecification) *TableCdcSpecification {
		return &v
	}).(TableCdcSpecificationPtrOutput)
}

func (o TableCdcSpecificationOutput) Status() TableCdcStatusOutput {
	return o.ApplyT(func(v TableCdcSpecification) TableCdcStatus { return v.Status }).(TableCdcStatusOutput)
}

func (o TableCdcSpecificationOutput) ViewType() TableCdcViewTypePtrOutput {
	return o.ApplyT(func(v TableCdcSpecification) *TableCdcViewType { return v.ViewType }).(TableCdcViewTypePtrOutput)
}

type TableCdcSpecificationPtrOutput struct{ *pulumi.OutputState }

func (TableCdcSpecificationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableCdcSpecification)(nil)).Elem()
}

func (o TableCdcSpecificationPtrOutput) ToTableCdcSpecificationPtrOutput() TableCdcSpecificationPtrOutput {
	return o
}

func (o TableCdcSpecificationPtrOutput) ToTableCdcSpecificationPtrOutputWithContext(ctx context.Context) TableCdcSpecificationPtrOutput {
	return o
}

func (o TableCdcSpecificationPtrOutput) Elem() TableCdcSpecificationOutput {
	return o.ApplyT(func(v *TableCdcSpecification) TableCdcSpecification {
		if v != nil {
			return *v
		}
		var ret TableCdcSpecification
		return ret
	}).(TableCdcSpecificationOutput)
}

func (o TableCdcSpecificationPtrOutput) Status() TableCdcStatusPtrOutput {
	return o.ApplyT(func(v *TableCdcSpecification) *TableCdcStatus {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(TableCdcStatusPtrOutput)
}

func (o TableCdcSpecificationPtrOutput) ViewType() TableCdcViewTypePtrOutput {
	return o.ApplyT(func(v *TableCdcSpecification) *TableCdcViewType {
		if v == nil {
			return nil
		}
		return v.ViewType
	}).(TableCdcViewTypePtrOutput)
}

type TableClusteringKeyColumn struct {
	// The name and data type of this clustering key column.
	Column TableColumn `pulumi:"column"`
	// The order in which this column's data is stored:
	//
	// - `ASC` (default) - The column's data is stored in ascending order.
	// - `DESC` - The column's data is stored in descending order.
	OrderBy *TableClusteringKeyColumnOrderBy `pulumi:"orderBy"`
}

// TableClusteringKeyColumnInput is an input type that accepts TableClusteringKeyColumnArgs and TableClusteringKeyColumnOutput values.
// You can construct a concrete instance of `TableClusteringKeyColumnInput` via:
//
//	TableClusteringKeyColumnArgs{...}
type TableClusteringKeyColumnInput interface {
	pulumi.Input

	ToTableClusteringKeyColumnOutput() TableClusteringKeyColumnOutput
	ToTableClusteringKeyColumnOutputWithContext(context.Context) TableClusteringKeyColumnOutput
}

type TableClusteringKeyColumnArgs struct {
	// The name and data type of this clustering key column.
	Column TableColumnInput `pulumi:"column"`
	// The order in which this column's data is stored:
	//
	// - `ASC` (default) - The column's data is stored in ascending order.
	// - `DESC` - The column's data is stored in descending order.
	OrderBy TableClusteringKeyColumnOrderByPtrInput `pulumi:"orderBy"`
}

func (TableClusteringKeyColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableClusteringKeyColumn)(nil)).Elem()
}

func (i TableClusteringKeyColumnArgs) ToTableClusteringKeyColumnOutput() TableClusteringKeyColumnOutput {
	return i.ToTableClusteringKeyColumnOutputWithContext(context.Background())
}

func (i TableClusteringKeyColumnArgs) ToTableClusteringKeyColumnOutputWithContext(ctx context.Context) TableClusteringKeyColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableClusteringKeyColumnOutput)
}

// TableClusteringKeyColumnArrayInput is an input type that accepts TableClusteringKeyColumnArray and TableClusteringKeyColumnArrayOutput values.
// You can construct a concrete instance of `TableClusteringKeyColumnArrayInput` via:
//
//	TableClusteringKeyColumnArray{ TableClusteringKeyColumnArgs{...} }
type TableClusteringKeyColumnArrayInput interface {
	pulumi.Input

	ToTableClusteringKeyColumnArrayOutput() TableClusteringKeyColumnArrayOutput
	ToTableClusteringKeyColumnArrayOutputWithContext(context.Context) TableClusteringKeyColumnArrayOutput
}

type TableClusteringKeyColumnArray []TableClusteringKeyColumnInput

func (TableClusteringKeyColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableClusteringKeyColumn)(nil)).Elem()
}

func (i TableClusteringKeyColumnArray) ToTableClusteringKeyColumnArrayOutput() TableClusteringKeyColumnArrayOutput {
	return i.ToTableClusteringKeyColumnArrayOutputWithContext(context.Background())
}

func (i TableClusteringKeyColumnArray) ToTableClusteringKeyColumnArrayOutputWithContext(ctx context.Context) TableClusteringKeyColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableClusteringKeyColumnArrayOutput)
}

type TableClusteringKeyColumnOutput struct{ *pulumi.OutputState }

func (TableClusteringKeyColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableClusteringKeyColumn)(nil)).Elem()
}

func (o TableClusteringKeyColumnOutput) ToTableClusteringKeyColumnOutput() TableClusteringKeyColumnOutput {
	return o
}

func (o TableClusteringKeyColumnOutput) ToTableClusteringKeyColumnOutputWithContext(ctx context.Context) TableClusteringKeyColumnOutput {
	return o
}

// The name and data type of this clustering key column.
func (o TableClusteringKeyColumnOutput) Column() TableColumnOutput {
	return o.ApplyT(func(v TableClusteringKeyColumn) TableColumn { return v.Column }).(TableColumnOutput)
}

// The order in which this column's data is stored:
//
// - `ASC` (default) - The column's data is stored in ascending order.
// - `DESC` - The column's data is stored in descending order.
func (o TableClusteringKeyColumnOutput) OrderBy() TableClusteringKeyColumnOrderByPtrOutput {
	return o.ApplyT(func(v TableClusteringKeyColumn) *TableClusteringKeyColumnOrderBy { return v.OrderBy }).(TableClusteringKeyColumnOrderByPtrOutput)
}

type TableClusteringKeyColumnArrayOutput struct{ *pulumi.OutputState }

func (TableClusteringKeyColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableClusteringKeyColumn)(nil)).Elem()
}

func (o TableClusteringKeyColumnArrayOutput) ToTableClusteringKeyColumnArrayOutput() TableClusteringKeyColumnArrayOutput {
	return o
}

func (o TableClusteringKeyColumnArrayOutput) ToTableClusteringKeyColumnArrayOutputWithContext(ctx context.Context) TableClusteringKeyColumnArrayOutput {
	return o
}

func (o TableClusteringKeyColumnArrayOutput) Index(i pulumi.IntInput) TableClusteringKeyColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableClusteringKeyColumn {
		return vs[0].([]TableClusteringKeyColumn)[vs[1].(int)]
	}).(TableClusteringKeyColumnOutput)
}

type TableColumn struct {
	// The name of the column. For more information, see [Identifiers](https://docs.aws.amazon.com/keyspaces/latest/devguide/cql.elements.html#cql.elements.identifier) in the *Amazon Keyspaces Developer Guide* .
	ColumnName string `pulumi:"columnName"`
	// The data type of the column. For more information, see [Data types](https://docs.aws.amazon.com/keyspaces/latest/devguide/cql.elements.html#cql.data-types) in the *Amazon Keyspaces Developer Guide* .
	ColumnType string `pulumi:"columnType"`
}

// TableColumnInput is an input type that accepts TableColumnArgs and TableColumnOutput values.
// You can construct a concrete instance of `TableColumnInput` via:
//
//	TableColumnArgs{...}
type TableColumnInput interface {
	pulumi.Input

	ToTableColumnOutput() TableColumnOutput
	ToTableColumnOutputWithContext(context.Context) TableColumnOutput
}

type TableColumnArgs struct {
	// The name of the column. For more information, see [Identifiers](https://docs.aws.amazon.com/keyspaces/latest/devguide/cql.elements.html#cql.elements.identifier) in the *Amazon Keyspaces Developer Guide* .
	ColumnName pulumi.StringInput `pulumi:"columnName"`
	// The data type of the column. For more information, see [Data types](https://docs.aws.amazon.com/keyspaces/latest/devguide/cql.elements.html#cql.data-types) in the *Amazon Keyspaces Developer Guide* .
	ColumnType pulumi.StringInput `pulumi:"columnType"`
}

func (TableColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableColumn)(nil)).Elem()
}

func (i TableColumnArgs) ToTableColumnOutput() TableColumnOutput {
	return i.ToTableColumnOutputWithContext(context.Background())
}

func (i TableColumnArgs) ToTableColumnOutputWithContext(ctx context.Context) TableColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableColumnOutput)
}

// TableColumnArrayInput is an input type that accepts TableColumnArray and TableColumnArrayOutput values.
// You can construct a concrete instance of `TableColumnArrayInput` via:
//
//	TableColumnArray{ TableColumnArgs{...} }
type TableColumnArrayInput interface {
	pulumi.Input

	ToTableColumnArrayOutput() TableColumnArrayOutput
	ToTableColumnArrayOutputWithContext(context.Context) TableColumnArrayOutput
}

type TableColumnArray []TableColumnInput

func (TableColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableColumn)(nil)).Elem()
}

func (i TableColumnArray) ToTableColumnArrayOutput() TableColumnArrayOutput {
	return i.ToTableColumnArrayOutputWithContext(context.Background())
}

func (i TableColumnArray) ToTableColumnArrayOutputWithContext(ctx context.Context) TableColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableColumnArrayOutput)
}

type TableColumnOutput struct{ *pulumi.OutputState }

func (TableColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableColumn)(nil)).Elem()
}

func (o TableColumnOutput) ToTableColumnOutput() TableColumnOutput {
	return o
}

func (o TableColumnOutput) ToTableColumnOutputWithContext(ctx context.Context) TableColumnOutput {
	return o
}

// The name of the column. For more information, see [Identifiers](https://docs.aws.amazon.com/keyspaces/latest/devguide/cql.elements.html#cql.elements.identifier) in the *Amazon Keyspaces Developer Guide* .
func (o TableColumnOutput) ColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v TableColumn) string { return v.ColumnName }).(pulumi.StringOutput)
}

// The data type of the column. For more information, see [Data types](https://docs.aws.amazon.com/keyspaces/latest/devguide/cql.elements.html#cql.data-types) in the *Amazon Keyspaces Developer Guide* .
func (o TableColumnOutput) ColumnType() pulumi.StringOutput {
	return o.ApplyT(func(v TableColumn) string { return v.ColumnType }).(pulumi.StringOutput)
}

type TableColumnArrayOutput struct{ *pulumi.OutputState }

func (TableColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableColumn)(nil)).Elem()
}

func (o TableColumnArrayOutput) ToTableColumnArrayOutput() TableColumnArrayOutput {
	return o
}

func (o TableColumnArrayOutput) ToTableColumnArrayOutputWithContext(ctx context.Context) TableColumnArrayOutput {
	return o
}

func (o TableColumnArrayOutput) Index(i pulumi.IntInput) TableColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableColumn {
		return vs[0].([]TableColumn)[vs[1].(int)]
	}).(TableColumnOutput)
}

// Represents the settings used to enable server-side encryption
type TableEncryptionSpecification struct {
	// The encryption at rest options for the table.
	//
	// - *AWS owned key* (default) - `AWS_OWNED_KMS_KEY`
	// - *Customer managed key* - `CUSTOMER_MANAGED_KMS_KEY`
	//
	// > If you choose `CUSTOMER_MANAGED_KMS_KEY` , a `kms_key_identifier` in the format of a key ARN is required.
	//
	// Valid values: `CUSTOMER_MANAGED_KMS_KEY` | `AWS_OWNED_KMS_KEY` .
	EncryptionType TableEncryptionType `pulumi:"encryptionType"`
	// Requires a `kms_key_identifier` in the format of a key ARN.
	KmsKeyIdentifier *string `pulumi:"kmsKeyIdentifier"`
}

// TableEncryptionSpecificationInput is an input type that accepts TableEncryptionSpecificationArgs and TableEncryptionSpecificationOutput values.
// You can construct a concrete instance of `TableEncryptionSpecificationInput` via:
//
//	TableEncryptionSpecificationArgs{...}
type TableEncryptionSpecificationInput interface {
	pulumi.Input

	ToTableEncryptionSpecificationOutput() TableEncryptionSpecificationOutput
	ToTableEncryptionSpecificationOutputWithContext(context.Context) TableEncryptionSpecificationOutput
}

// Represents the settings used to enable server-side encryption
type TableEncryptionSpecificationArgs struct {
	// The encryption at rest options for the table.
	//
	// - *AWS owned key* (default) - `AWS_OWNED_KMS_KEY`
	// - *Customer managed key* - `CUSTOMER_MANAGED_KMS_KEY`
	//
	// > If you choose `CUSTOMER_MANAGED_KMS_KEY` , a `kms_key_identifier` in the format of a key ARN is required.
	//
	// Valid values: `CUSTOMER_MANAGED_KMS_KEY` | `AWS_OWNED_KMS_KEY` .
	EncryptionType TableEncryptionTypeInput `pulumi:"encryptionType"`
	// Requires a `kms_key_identifier` in the format of a key ARN.
	KmsKeyIdentifier pulumi.StringPtrInput `pulumi:"kmsKeyIdentifier"`
}

func (TableEncryptionSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableEncryptionSpecification)(nil)).Elem()
}

func (i TableEncryptionSpecificationArgs) ToTableEncryptionSpecificationOutput() TableEncryptionSpecificationOutput {
	return i.ToTableEncryptionSpecificationOutputWithContext(context.Background())
}

func (i TableEncryptionSpecificationArgs) ToTableEncryptionSpecificationOutputWithContext(ctx context.Context) TableEncryptionSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableEncryptionSpecificationOutput)
}

func (i TableEncryptionSpecificationArgs) ToTableEncryptionSpecificationPtrOutput() TableEncryptionSpecificationPtrOutput {
	return i.ToTableEncryptionSpecificationPtrOutputWithContext(context.Background())
}

func (i TableEncryptionSpecificationArgs) ToTableEncryptionSpecificationPtrOutputWithContext(ctx context.Context) TableEncryptionSpecificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableEncryptionSpecificationOutput).ToTableEncryptionSpecificationPtrOutputWithContext(ctx)
}

// TableEncryptionSpecificationPtrInput is an input type that accepts TableEncryptionSpecificationArgs, TableEncryptionSpecificationPtr and TableEncryptionSpecificationPtrOutput values.
// You can construct a concrete instance of `TableEncryptionSpecificationPtrInput` via:
//
//	        TableEncryptionSpecificationArgs{...}
//
//	or:
//
//	        nil
type TableEncryptionSpecificationPtrInput interface {
	pulumi.Input

	ToTableEncryptionSpecificationPtrOutput() TableEncryptionSpecificationPtrOutput
	ToTableEncryptionSpecificationPtrOutputWithContext(context.Context) TableEncryptionSpecificationPtrOutput
}

type tableEncryptionSpecificationPtrType TableEncryptionSpecificationArgs

func TableEncryptionSpecificationPtr(v *TableEncryptionSpecificationArgs) TableEncryptionSpecificationPtrInput {
	return (*tableEncryptionSpecificationPtrType)(v)
}

func (*tableEncryptionSpecificationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableEncryptionSpecification)(nil)).Elem()
}

func (i *tableEncryptionSpecificationPtrType) ToTableEncryptionSpecificationPtrOutput() TableEncryptionSpecificationPtrOutput {
	return i.ToTableEncryptionSpecificationPtrOutputWithContext(context.Background())
}

func (i *tableEncryptionSpecificationPtrType) ToTableEncryptionSpecificationPtrOutputWithContext(ctx context.Context) TableEncryptionSpecificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableEncryptionSpecificationPtrOutput)
}

// Represents the settings used to enable server-side encryption
type TableEncryptionSpecificationOutput struct{ *pulumi.OutputState }

func (TableEncryptionSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableEncryptionSpecification)(nil)).Elem()
}

func (o TableEncryptionSpecificationOutput) ToTableEncryptionSpecificationOutput() TableEncryptionSpecificationOutput {
	return o
}

func (o TableEncryptionSpecificationOutput) ToTableEncryptionSpecificationOutputWithContext(ctx context.Context) TableEncryptionSpecificationOutput {
	return o
}

func (o TableEncryptionSpecificationOutput) ToTableEncryptionSpecificationPtrOutput() TableEncryptionSpecificationPtrOutput {
	return o.ToTableEncryptionSpecificationPtrOutputWithContext(context.Background())
}

func (o TableEncryptionSpecificationOutput) ToTableEncryptionSpecificationPtrOutputWithContext(ctx context.Context) TableEncryptionSpecificationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableEncryptionSpecification) *TableEncryptionSpecification {
		return &v
	}).(TableEncryptionSpecificationPtrOutput)
}

// The encryption at rest options for the table.
//
// - *AWS owned key* (default) - `AWS_OWNED_KMS_KEY`
// - *Customer managed key* - `CUSTOMER_MANAGED_KMS_KEY`
//
// > If you choose `CUSTOMER_MANAGED_KMS_KEY` , a `kms_key_identifier` in the format of a key ARN is required.
//
// Valid values: `CUSTOMER_MANAGED_KMS_KEY` | `AWS_OWNED_KMS_KEY` .
func (o TableEncryptionSpecificationOutput) EncryptionType() TableEncryptionTypeOutput {
	return o.ApplyT(func(v TableEncryptionSpecification) TableEncryptionType { return v.EncryptionType }).(TableEncryptionTypeOutput)
}

// Requires a `kms_key_identifier` in the format of a key ARN.
func (o TableEncryptionSpecificationOutput) KmsKeyIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableEncryptionSpecification) *string { return v.KmsKeyIdentifier }).(pulumi.StringPtrOutput)
}

type TableEncryptionSpecificationPtrOutput struct{ *pulumi.OutputState }

func (TableEncryptionSpecificationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableEncryptionSpecification)(nil)).Elem()
}

func (o TableEncryptionSpecificationPtrOutput) ToTableEncryptionSpecificationPtrOutput() TableEncryptionSpecificationPtrOutput {
	return o
}

func (o TableEncryptionSpecificationPtrOutput) ToTableEncryptionSpecificationPtrOutputWithContext(ctx context.Context) TableEncryptionSpecificationPtrOutput {
	return o
}

func (o TableEncryptionSpecificationPtrOutput) Elem() TableEncryptionSpecificationOutput {
	return o.ApplyT(func(v *TableEncryptionSpecification) TableEncryptionSpecification {
		if v != nil {
			return *v
		}
		var ret TableEncryptionSpecification
		return ret
	}).(TableEncryptionSpecificationOutput)
}

// The encryption at rest options for the table.
//
// - *AWS owned key* (default) - `AWS_OWNED_KMS_KEY`
// - *Customer managed key* - `CUSTOMER_MANAGED_KMS_KEY`
//
// > If you choose `CUSTOMER_MANAGED_KMS_KEY` , a `kms_key_identifier` in the format of a key ARN is required.
//
// Valid values: `CUSTOMER_MANAGED_KMS_KEY` | `AWS_OWNED_KMS_KEY` .
func (o TableEncryptionSpecificationPtrOutput) EncryptionType() TableEncryptionTypePtrOutput {
	return o.ApplyT(func(v *TableEncryptionSpecification) *TableEncryptionType {
		if v == nil {
			return nil
		}
		return &v.EncryptionType
	}).(TableEncryptionTypePtrOutput)
}

// Requires a `kms_key_identifier` in the format of a key ARN.
func (o TableEncryptionSpecificationPtrOutput) KmsKeyIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableEncryptionSpecification) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyIdentifier
	}).(pulumi.StringPtrOutput)
}

// Throughput for the specified table, which consists of values for ReadCapacityUnits and WriteCapacityUnits
type TableProvisionedThroughput struct {
	// The amount of read capacity that's provisioned for the table. For more information, see [Read/write capacity mode](https://docs.aws.amazon.com/keyspaces/latest/devguide/ReadWriteCapacityMode.html) in the *Amazon Keyspaces Developer Guide* .
	ReadCapacityUnits int `pulumi:"readCapacityUnits"`
	// The amount of write capacity that's provisioned for the table. For more information, see [Read/write capacity mode](https://docs.aws.amazon.com/keyspaces/latest/devguide/ReadWriteCapacityMode.html) in the *Amazon Keyspaces Developer Guide* .
	WriteCapacityUnits int `pulumi:"writeCapacityUnits"`
}

// TableProvisionedThroughputInput is an input type that accepts TableProvisionedThroughputArgs and TableProvisionedThroughputOutput values.
// You can construct a concrete instance of `TableProvisionedThroughputInput` via:
//
//	TableProvisionedThroughputArgs{...}
type TableProvisionedThroughputInput interface {
	pulumi.Input

	ToTableProvisionedThroughputOutput() TableProvisionedThroughputOutput
	ToTableProvisionedThroughputOutputWithContext(context.Context) TableProvisionedThroughputOutput
}

// Throughput for the specified table, which consists of values for ReadCapacityUnits and WriteCapacityUnits
type TableProvisionedThroughputArgs struct {
	// The amount of read capacity that's provisioned for the table. For more information, see [Read/write capacity mode](https://docs.aws.amazon.com/keyspaces/latest/devguide/ReadWriteCapacityMode.html) in the *Amazon Keyspaces Developer Guide* .
	ReadCapacityUnits pulumi.IntInput `pulumi:"readCapacityUnits"`
	// The amount of write capacity that's provisioned for the table. For more information, see [Read/write capacity mode](https://docs.aws.amazon.com/keyspaces/latest/devguide/ReadWriteCapacityMode.html) in the *Amazon Keyspaces Developer Guide* .
	WriteCapacityUnits pulumi.IntInput `pulumi:"writeCapacityUnits"`
}

func (TableProvisionedThroughputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableProvisionedThroughput)(nil)).Elem()
}

func (i TableProvisionedThroughputArgs) ToTableProvisionedThroughputOutput() TableProvisionedThroughputOutput {
	return i.ToTableProvisionedThroughputOutputWithContext(context.Background())
}

func (i TableProvisionedThroughputArgs) ToTableProvisionedThroughputOutputWithContext(ctx context.Context) TableProvisionedThroughputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableProvisionedThroughputOutput)
}

func (i TableProvisionedThroughputArgs) ToTableProvisionedThroughputPtrOutput() TableProvisionedThroughputPtrOutput {
	return i.ToTableProvisionedThroughputPtrOutputWithContext(context.Background())
}

func (i TableProvisionedThroughputArgs) ToTableProvisionedThroughputPtrOutputWithContext(ctx context.Context) TableProvisionedThroughputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableProvisionedThroughputOutput).ToTableProvisionedThroughputPtrOutputWithContext(ctx)
}

// TableProvisionedThroughputPtrInput is an input type that accepts TableProvisionedThroughputArgs, TableProvisionedThroughputPtr and TableProvisionedThroughputPtrOutput values.
// You can construct a concrete instance of `TableProvisionedThroughputPtrInput` via:
//
//	        TableProvisionedThroughputArgs{...}
//
//	or:
//
//	        nil
type TableProvisionedThroughputPtrInput interface {
	pulumi.Input

	ToTableProvisionedThroughputPtrOutput() TableProvisionedThroughputPtrOutput
	ToTableProvisionedThroughputPtrOutputWithContext(context.Context) TableProvisionedThroughputPtrOutput
}

type tableProvisionedThroughputPtrType TableProvisionedThroughputArgs

func TableProvisionedThroughputPtr(v *TableProvisionedThroughputArgs) TableProvisionedThroughputPtrInput {
	return (*tableProvisionedThroughputPtrType)(v)
}

func (*tableProvisionedThroughputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableProvisionedThroughput)(nil)).Elem()
}

func (i *tableProvisionedThroughputPtrType) ToTableProvisionedThroughputPtrOutput() TableProvisionedThroughputPtrOutput {
	return i.ToTableProvisionedThroughputPtrOutputWithContext(context.Background())
}

func (i *tableProvisionedThroughputPtrType) ToTableProvisionedThroughputPtrOutputWithContext(ctx context.Context) TableProvisionedThroughputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableProvisionedThroughputPtrOutput)
}

// Throughput for the specified table, which consists of values for ReadCapacityUnits and WriteCapacityUnits
type TableProvisionedThroughputOutput struct{ *pulumi.OutputState }

func (TableProvisionedThroughputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableProvisionedThroughput)(nil)).Elem()
}

func (o TableProvisionedThroughputOutput) ToTableProvisionedThroughputOutput() TableProvisionedThroughputOutput {
	return o
}

func (o TableProvisionedThroughputOutput) ToTableProvisionedThroughputOutputWithContext(ctx context.Context) TableProvisionedThroughputOutput {
	return o
}

func (o TableProvisionedThroughputOutput) ToTableProvisionedThroughputPtrOutput() TableProvisionedThroughputPtrOutput {
	return o.ToTableProvisionedThroughputPtrOutputWithContext(context.Background())
}

func (o TableProvisionedThroughputOutput) ToTableProvisionedThroughputPtrOutputWithContext(ctx context.Context) TableProvisionedThroughputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableProvisionedThroughput) *TableProvisionedThroughput {
		return &v
	}).(TableProvisionedThroughputPtrOutput)
}

// The amount of read capacity that's provisioned for the table. For more information, see [Read/write capacity mode](https://docs.aws.amazon.com/keyspaces/latest/devguide/ReadWriteCapacityMode.html) in the *Amazon Keyspaces Developer Guide* .
func (o TableProvisionedThroughputOutput) ReadCapacityUnits() pulumi.IntOutput {
	return o.ApplyT(func(v TableProvisionedThroughput) int { return v.ReadCapacityUnits }).(pulumi.IntOutput)
}

// The amount of write capacity that's provisioned for the table. For more information, see [Read/write capacity mode](https://docs.aws.amazon.com/keyspaces/latest/devguide/ReadWriteCapacityMode.html) in the *Amazon Keyspaces Developer Guide* .
func (o TableProvisionedThroughputOutput) WriteCapacityUnits() pulumi.IntOutput {
	return o.ApplyT(func(v TableProvisionedThroughput) int { return v.WriteCapacityUnits }).(pulumi.IntOutput)
}

type TableProvisionedThroughputPtrOutput struct{ *pulumi.OutputState }

func (TableProvisionedThroughputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableProvisionedThroughput)(nil)).Elem()
}

func (o TableProvisionedThroughputPtrOutput) ToTableProvisionedThroughputPtrOutput() TableProvisionedThroughputPtrOutput {
	return o
}

func (o TableProvisionedThroughputPtrOutput) ToTableProvisionedThroughputPtrOutputWithContext(ctx context.Context) TableProvisionedThroughputPtrOutput {
	return o
}

func (o TableProvisionedThroughputPtrOutput) Elem() TableProvisionedThroughputOutput {
	return o.ApplyT(func(v *TableProvisionedThroughput) TableProvisionedThroughput {
		if v != nil {
			return *v
		}
		var ret TableProvisionedThroughput
		return ret
	}).(TableProvisionedThroughputOutput)
}

// The amount of read capacity that's provisioned for the table. For more information, see [Read/write capacity mode](https://docs.aws.amazon.com/keyspaces/latest/devguide/ReadWriteCapacityMode.html) in the *Amazon Keyspaces Developer Guide* .
func (o TableProvisionedThroughputPtrOutput) ReadCapacityUnits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableProvisionedThroughput) *int {
		if v == nil {
			return nil
		}
		return &v.ReadCapacityUnits
	}).(pulumi.IntPtrOutput)
}

// The amount of write capacity that's provisioned for the table. For more information, see [Read/write capacity mode](https://docs.aws.amazon.com/keyspaces/latest/devguide/ReadWriteCapacityMode.html) in the *Amazon Keyspaces Developer Guide* .
func (o TableProvisionedThroughputPtrOutput) WriteCapacityUnits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableProvisionedThroughput) *int {
		if v == nil {
			return nil
		}
		return &v.WriteCapacityUnits
	}).(pulumi.IntPtrOutput)
}

// Represents replica specifications.
type TableReplicaSpecification struct {
	// The read capacity auto scaling settings for the multi-Region table in the specified AWS Region.
	ReadCapacityAutoScaling *TableAutoScalingSetting `pulumi:"readCapacityAutoScaling"`
	// The provisioned read capacity units for the multi-Region table in the specified AWS Region.
	ReadCapacityUnits *int `pulumi:"readCapacityUnits"`
	// The AWS Region.
	Region string `pulumi:"region"`
}

// TableReplicaSpecificationInput is an input type that accepts TableReplicaSpecificationArgs and TableReplicaSpecificationOutput values.
// You can construct a concrete instance of `TableReplicaSpecificationInput` via:
//
//	TableReplicaSpecificationArgs{...}
type TableReplicaSpecificationInput interface {
	pulumi.Input

	ToTableReplicaSpecificationOutput() TableReplicaSpecificationOutput
	ToTableReplicaSpecificationOutputWithContext(context.Context) TableReplicaSpecificationOutput
}

// Represents replica specifications.
type TableReplicaSpecificationArgs struct {
	// The read capacity auto scaling settings for the multi-Region table in the specified AWS Region.
	ReadCapacityAutoScaling TableAutoScalingSettingPtrInput `pulumi:"readCapacityAutoScaling"`
	// The provisioned read capacity units for the multi-Region table in the specified AWS Region.
	ReadCapacityUnits pulumi.IntPtrInput `pulumi:"readCapacityUnits"`
	// The AWS Region.
	Region pulumi.StringInput `pulumi:"region"`
}

func (TableReplicaSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableReplicaSpecification)(nil)).Elem()
}

func (i TableReplicaSpecificationArgs) ToTableReplicaSpecificationOutput() TableReplicaSpecificationOutput {
	return i.ToTableReplicaSpecificationOutputWithContext(context.Background())
}

func (i TableReplicaSpecificationArgs) ToTableReplicaSpecificationOutputWithContext(ctx context.Context) TableReplicaSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableReplicaSpecificationOutput)
}

// TableReplicaSpecificationArrayInput is an input type that accepts TableReplicaSpecificationArray and TableReplicaSpecificationArrayOutput values.
// You can construct a concrete instance of `TableReplicaSpecificationArrayInput` via:
//
//	TableReplicaSpecificationArray{ TableReplicaSpecificationArgs{...} }
type TableReplicaSpecificationArrayInput interface {
	pulumi.Input

	ToTableReplicaSpecificationArrayOutput() TableReplicaSpecificationArrayOutput
	ToTableReplicaSpecificationArrayOutputWithContext(context.Context) TableReplicaSpecificationArrayOutput
}

type TableReplicaSpecificationArray []TableReplicaSpecificationInput

func (TableReplicaSpecificationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableReplicaSpecification)(nil)).Elem()
}

func (i TableReplicaSpecificationArray) ToTableReplicaSpecificationArrayOutput() TableReplicaSpecificationArrayOutput {
	return i.ToTableReplicaSpecificationArrayOutputWithContext(context.Background())
}

func (i TableReplicaSpecificationArray) ToTableReplicaSpecificationArrayOutputWithContext(ctx context.Context) TableReplicaSpecificationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableReplicaSpecificationArrayOutput)
}

// Represents replica specifications.
type TableReplicaSpecificationOutput struct{ *pulumi.OutputState }

func (TableReplicaSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableReplicaSpecification)(nil)).Elem()
}

func (o TableReplicaSpecificationOutput) ToTableReplicaSpecificationOutput() TableReplicaSpecificationOutput {
	return o
}

func (o TableReplicaSpecificationOutput) ToTableReplicaSpecificationOutputWithContext(ctx context.Context) TableReplicaSpecificationOutput {
	return o
}

// The read capacity auto scaling settings for the multi-Region table in the specified AWS Region.
func (o TableReplicaSpecificationOutput) ReadCapacityAutoScaling() TableAutoScalingSettingPtrOutput {
	return o.ApplyT(func(v TableReplicaSpecification) *TableAutoScalingSetting { return v.ReadCapacityAutoScaling }).(TableAutoScalingSettingPtrOutput)
}

// The provisioned read capacity units for the multi-Region table in the specified AWS Region.
func (o TableReplicaSpecificationOutput) ReadCapacityUnits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableReplicaSpecification) *int { return v.ReadCapacityUnits }).(pulumi.IntPtrOutput)
}

// The AWS Region.
func (o TableReplicaSpecificationOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v TableReplicaSpecification) string { return v.Region }).(pulumi.StringOutput)
}

type TableReplicaSpecificationArrayOutput struct{ *pulumi.OutputState }

func (TableReplicaSpecificationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableReplicaSpecification)(nil)).Elem()
}

func (o TableReplicaSpecificationArrayOutput) ToTableReplicaSpecificationArrayOutput() TableReplicaSpecificationArrayOutput {
	return o
}

func (o TableReplicaSpecificationArrayOutput) ToTableReplicaSpecificationArrayOutputWithContext(ctx context.Context) TableReplicaSpecificationArrayOutput {
	return o
}

func (o TableReplicaSpecificationArrayOutput) Index(i pulumi.IntInput) TableReplicaSpecificationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableReplicaSpecification {
		return vs[0].([]TableReplicaSpecification)[vs[1].(int)]
	}).(TableReplicaSpecificationOutput)
}

// Represents scaling policy.
type TableScalingPolicy struct {
	// The auto scaling policy that scales a table based on the ratio of consumed to provisioned capacity.
	TargetTrackingScalingPolicyConfiguration *TableTargetTrackingScalingPolicyConfiguration `pulumi:"targetTrackingScalingPolicyConfiguration"`
}

// TableScalingPolicyInput is an input type that accepts TableScalingPolicyArgs and TableScalingPolicyOutput values.
// You can construct a concrete instance of `TableScalingPolicyInput` via:
//
//	TableScalingPolicyArgs{...}
type TableScalingPolicyInput interface {
	pulumi.Input

	ToTableScalingPolicyOutput() TableScalingPolicyOutput
	ToTableScalingPolicyOutputWithContext(context.Context) TableScalingPolicyOutput
}

// Represents scaling policy.
type TableScalingPolicyArgs struct {
	// The auto scaling policy that scales a table based on the ratio of consumed to provisioned capacity.
	TargetTrackingScalingPolicyConfiguration TableTargetTrackingScalingPolicyConfigurationPtrInput `pulumi:"targetTrackingScalingPolicyConfiguration"`
}

func (TableScalingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableScalingPolicy)(nil)).Elem()
}

func (i TableScalingPolicyArgs) ToTableScalingPolicyOutput() TableScalingPolicyOutput {
	return i.ToTableScalingPolicyOutputWithContext(context.Background())
}

func (i TableScalingPolicyArgs) ToTableScalingPolicyOutputWithContext(ctx context.Context) TableScalingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableScalingPolicyOutput)
}

func (i TableScalingPolicyArgs) ToTableScalingPolicyPtrOutput() TableScalingPolicyPtrOutput {
	return i.ToTableScalingPolicyPtrOutputWithContext(context.Background())
}

func (i TableScalingPolicyArgs) ToTableScalingPolicyPtrOutputWithContext(ctx context.Context) TableScalingPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableScalingPolicyOutput).ToTableScalingPolicyPtrOutputWithContext(ctx)
}

// TableScalingPolicyPtrInput is an input type that accepts TableScalingPolicyArgs, TableScalingPolicyPtr and TableScalingPolicyPtrOutput values.
// You can construct a concrete instance of `TableScalingPolicyPtrInput` via:
//
//	        TableScalingPolicyArgs{...}
//
//	or:
//
//	        nil
type TableScalingPolicyPtrInput interface {
	pulumi.Input

	ToTableScalingPolicyPtrOutput() TableScalingPolicyPtrOutput
	ToTableScalingPolicyPtrOutputWithContext(context.Context) TableScalingPolicyPtrOutput
}

type tableScalingPolicyPtrType TableScalingPolicyArgs

func TableScalingPolicyPtr(v *TableScalingPolicyArgs) TableScalingPolicyPtrInput {
	return (*tableScalingPolicyPtrType)(v)
}

func (*tableScalingPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableScalingPolicy)(nil)).Elem()
}

func (i *tableScalingPolicyPtrType) ToTableScalingPolicyPtrOutput() TableScalingPolicyPtrOutput {
	return i.ToTableScalingPolicyPtrOutputWithContext(context.Background())
}

func (i *tableScalingPolicyPtrType) ToTableScalingPolicyPtrOutputWithContext(ctx context.Context) TableScalingPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableScalingPolicyPtrOutput)
}

// Represents scaling policy.
type TableScalingPolicyOutput struct{ *pulumi.OutputState }

func (TableScalingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableScalingPolicy)(nil)).Elem()
}

func (o TableScalingPolicyOutput) ToTableScalingPolicyOutput() TableScalingPolicyOutput {
	return o
}

func (o TableScalingPolicyOutput) ToTableScalingPolicyOutputWithContext(ctx context.Context) TableScalingPolicyOutput {
	return o
}

func (o TableScalingPolicyOutput) ToTableScalingPolicyPtrOutput() TableScalingPolicyPtrOutput {
	return o.ToTableScalingPolicyPtrOutputWithContext(context.Background())
}

func (o TableScalingPolicyOutput) ToTableScalingPolicyPtrOutputWithContext(ctx context.Context) TableScalingPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableScalingPolicy) *TableScalingPolicy {
		return &v
	}).(TableScalingPolicyPtrOutput)
}

// The auto scaling policy that scales a table based on the ratio of consumed to provisioned capacity.
func (o TableScalingPolicyOutput) TargetTrackingScalingPolicyConfiguration() TableTargetTrackingScalingPolicyConfigurationPtrOutput {
	return o.ApplyT(func(v TableScalingPolicy) *TableTargetTrackingScalingPolicyConfiguration {
		return v.TargetTrackingScalingPolicyConfiguration
	}).(TableTargetTrackingScalingPolicyConfigurationPtrOutput)
}

type TableScalingPolicyPtrOutput struct{ *pulumi.OutputState }

func (TableScalingPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableScalingPolicy)(nil)).Elem()
}

func (o TableScalingPolicyPtrOutput) ToTableScalingPolicyPtrOutput() TableScalingPolicyPtrOutput {
	return o
}

func (o TableScalingPolicyPtrOutput) ToTableScalingPolicyPtrOutputWithContext(ctx context.Context) TableScalingPolicyPtrOutput {
	return o
}

func (o TableScalingPolicyPtrOutput) Elem() TableScalingPolicyOutput {
	return o.ApplyT(func(v *TableScalingPolicy) TableScalingPolicy {
		if v != nil {
			return *v
		}
		var ret TableScalingPolicy
		return ret
	}).(TableScalingPolicyOutput)
}

// The auto scaling policy that scales a table based on the ratio of consumed to provisioned capacity.
func (o TableScalingPolicyPtrOutput) TargetTrackingScalingPolicyConfiguration() TableTargetTrackingScalingPolicyConfigurationPtrOutput {
	return o.ApplyT(func(v *TableScalingPolicy) *TableTargetTrackingScalingPolicyConfiguration {
		if v == nil {
			return nil
		}
		return v.TargetTrackingScalingPolicyConfiguration
	}).(TableTargetTrackingScalingPolicyConfigurationPtrOutput)
}

// A key-value pair to apply to the resource
type TableTag struct {
	// The key of the tag. Tag keys are case sensitive. Each Amazon Keyspaces resource can only have up to one tag with the same key. If you try to add an existing tag (same key), the existing tag value will be updated to the new value.
	Key string `pulumi:"key"`
	// The value of the tag. Tag values are case-sensitive and can be null.
	Value string `pulumi:"value"`
}

// Represents configuration for target tracking scaling policy.
type TableTargetTrackingScalingPolicyConfiguration struct {
	// Specifies if `scale-in` is enabled.
	//
	// When auto scaling automatically decreases capacity for a table, the table *scales in* . When scaling policies are set, they can't scale in the table lower than its minimum capacity.
	DisableScaleIn *bool `pulumi:"disableScaleIn"`
	// Specifies a `scale-in` cool down period.
	//
	// A cooldown period in seconds between scaling activities that lets the table stabilize before another scaling activity starts.
	ScaleInCooldown *int `pulumi:"scaleInCooldown"`
	// Specifies a scale out cool down period.
	//
	// A cooldown period in seconds between scaling activities that lets the table stabilize before another scaling activity starts.
	ScaleOutCooldown *int `pulumi:"scaleOutCooldown"`
	// Specifies the target value for the target tracking auto scaling policy.
	//
	// Amazon Keyspaces auto scaling scales up capacity automatically when traffic exceeds this target utilization rate, and then back down when it falls below the target. This ensures that the ratio of consumed capacity to provisioned capacity stays at or near this value. You define `targetValue` as a percentage. An `integer` between 20 and 90.
	TargetValue int `pulumi:"targetValue"`
}

// TableTargetTrackingScalingPolicyConfigurationInput is an input type that accepts TableTargetTrackingScalingPolicyConfigurationArgs and TableTargetTrackingScalingPolicyConfigurationOutput values.
// You can construct a concrete instance of `TableTargetTrackingScalingPolicyConfigurationInput` via:
//
//	TableTargetTrackingScalingPolicyConfigurationArgs{...}
type TableTargetTrackingScalingPolicyConfigurationInput interface {
	pulumi.Input

	ToTableTargetTrackingScalingPolicyConfigurationOutput() TableTargetTrackingScalingPolicyConfigurationOutput
	ToTableTargetTrackingScalingPolicyConfigurationOutputWithContext(context.Context) TableTargetTrackingScalingPolicyConfigurationOutput
}

// Represents configuration for target tracking scaling policy.
type TableTargetTrackingScalingPolicyConfigurationArgs struct {
	// Specifies if `scale-in` is enabled.
	//
	// When auto scaling automatically decreases capacity for a table, the table *scales in* . When scaling policies are set, they can't scale in the table lower than its minimum capacity.
	DisableScaleIn pulumi.BoolPtrInput `pulumi:"disableScaleIn"`
	// Specifies a `scale-in` cool down period.
	//
	// A cooldown period in seconds between scaling activities that lets the table stabilize before another scaling activity starts.
	ScaleInCooldown pulumi.IntPtrInput `pulumi:"scaleInCooldown"`
	// Specifies a scale out cool down period.
	//
	// A cooldown period in seconds between scaling activities that lets the table stabilize before another scaling activity starts.
	ScaleOutCooldown pulumi.IntPtrInput `pulumi:"scaleOutCooldown"`
	// Specifies the target value for the target tracking auto scaling policy.
	//
	// Amazon Keyspaces auto scaling scales up capacity automatically when traffic exceeds this target utilization rate, and then back down when it falls below the target. This ensures that the ratio of consumed capacity to provisioned capacity stays at or near this value. You define `targetValue` as a percentage. An `integer` between 20 and 90.
	TargetValue pulumi.IntInput `pulumi:"targetValue"`
}

func (TableTargetTrackingScalingPolicyConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableTargetTrackingScalingPolicyConfiguration)(nil)).Elem()
}

func (i TableTargetTrackingScalingPolicyConfigurationArgs) ToTableTargetTrackingScalingPolicyConfigurationOutput() TableTargetTrackingScalingPolicyConfigurationOutput {
	return i.ToTableTargetTrackingScalingPolicyConfigurationOutputWithContext(context.Background())
}

func (i TableTargetTrackingScalingPolicyConfigurationArgs) ToTableTargetTrackingScalingPolicyConfigurationOutputWithContext(ctx context.Context) TableTargetTrackingScalingPolicyConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableTargetTrackingScalingPolicyConfigurationOutput)
}

func (i TableTargetTrackingScalingPolicyConfigurationArgs) ToTableTargetTrackingScalingPolicyConfigurationPtrOutput() TableTargetTrackingScalingPolicyConfigurationPtrOutput {
	return i.ToTableTargetTrackingScalingPolicyConfigurationPtrOutputWithContext(context.Background())
}

func (i TableTargetTrackingScalingPolicyConfigurationArgs) ToTableTargetTrackingScalingPolicyConfigurationPtrOutputWithContext(ctx context.Context) TableTargetTrackingScalingPolicyConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableTargetTrackingScalingPolicyConfigurationOutput).ToTableTargetTrackingScalingPolicyConfigurationPtrOutputWithContext(ctx)
}

// TableTargetTrackingScalingPolicyConfigurationPtrInput is an input type that accepts TableTargetTrackingScalingPolicyConfigurationArgs, TableTargetTrackingScalingPolicyConfigurationPtr and TableTargetTrackingScalingPolicyConfigurationPtrOutput values.
// You can construct a concrete instance of `TableTargetTrackingScalingPolicyConfigurationPtrInput` via:
//
//	        TableTargetTrackingScalingPolicyConfigurationArgs{...}
//
//	or:
//
//	        nil
type TableTargetTrackingScalingPolicyConfigurationPtrInput interface {
	pulumi.Input

	ToTableTargetTrackingScalingPolicyConfigurationPtrOutput() TableTargetTrackingScalingPolicyConfigurationPtrOutput
	ToTableTargetTrackingScalingPolicyConfigurationPtrOutputWithContext(context.Context) TableTargetTrackingScalingPolicyConfigurationPtrOutput
}

type tableTargetTrackingScalingPolicyConfigurationPtrType TableTargetTrackingScalingPolicyConfigurationArgs

func TableTargetTrackingScalingPolicyConfigurationPtr(v *TableTargetTrackingScalingPolicyConfigurationArgs) TableTargetTrackingScalingPolicyConfigurationPtrInput {
	return (*tableTargetTrackingScalingPolicyConfigurationPtrType)(v)
}

func (*tableTargetTrackingScalingPolicyConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableTargetTrackingScalingPolicyConfiguration)(nil)).Elem()
}

func (i *tableTargetTrackingScalingPolicyConfigurationPtrType) ToTableTargetTrackingScalingPolicyConfigurationPtrOutput() TableTargetTrackingScalingPolicyConfigurationPtrOutput {
	return i.ToTableTargetTrackingScalingPolicyConfigurationPtrOutputWithContext(context.Background())
}

func (i *tableTargetTrackingScalingPolicyConfigurationPtrType) ToTableTargetTrackingScalingPolicyConfigurationPtrOutputWithContext(ctx context.Context) TableTargetTrackingScalingPolicyConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableTargetTrackingScalingPolicyConfigurationPtrOutput)
}

// Represents configuration for target tracking scaling policy.
type TableTargetTrackingScalingPolicyConfigurationOutput struct{ *pulumi.OutputState }

func (TableTargetTrackingScalingPolicyConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableTargetTrackingScalingPolicyConfiguration)(nil)).Elem()
}

func (o TableTargetTrackingScalingPolicyConfigurationOutput) ToTableTargetTrackingScalingPolicyConfigurationOutput() TableTargetTrackingScalingPolicyConfigurationOutput {
	return o
}

func (o TableTargetTrackingScalingPolicyConfigurationOutput) ToTableTargetTrackingScalingPolicyConfigurationOutputWithContext(ctx context.Context) TableTargetTrackingScalingPolicyConfigurationOutput {
	return o
}

func (o TableTargetTrackingScalingPolicyConfigurationOutput) ToTableTargetTrackingScalingPolicyConfigurationPtrOutput() TableTargetTrackingScalingPolicyConfigurationPtrOutput {
	return o.ToTableTargetTrackingScalingPolicyConfigurationPtrOutputWithContext(context.Background())
}

func (o TableTargetTrackingScalingPolicyConfigurationOutput) ToTableTargetTrackingScalingPolicyConfigurationPtrOutputWithContext(ctx context.Context) TableTargetTrackingScalingPolicyConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableTargetTrackingScalingPolicyConfiguration) *TableTargetTrackingScalingPolicyConfiguration {
		return &v
	}).(TableTargetTrackingScalingPolicyConfigurationPtrOutput)
}

// Specifies if `scale-in` is enabled.
//
// When auto scaling automatically decreases capacity for a table, the table *scales in* . When scaling policies are set, they can't scale in the table lower than its minimum capacity.
func (o TableTargetTrackingScalingPolicyConfigurationOutput) DisableScaleIn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableTargetTrackingScalingPolicyConfiguration) *bool { return v.DisableScaleIn }).(pulumi.BoolPtrOutput)
}

// Specifies a `scale-in` cool down period.
//
// A cooldown period in seconds between scaling activities that lets the table stabilize before another scaling activity starts.
func (o TableTargetTrackingScalingPolicyConfigurationOutput) ScaleInCooldown() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableTargetTrackingScalingPolicyConfiguration) *int { return v.ScaleInCooldown }).(pulumi.IntPtrOutput)
}

// Specifies a scale out cool down period.
//
// A cooldown period in seconds between scaling activities that lets the table stabilize before another scaling activity starts.
func (o TableTargetTrackingScalingPolicyConfigurationOutput) ScaleOutCooldown() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableTargetTrackingScalingPolicyConfiguration) *int { return v.ScaleOutCooldown }).(pulumi.IntPtrOutput)
}

// Specifies the target value for the target tracking auto scaling policy.
//
// Amazon Keyspaces auto scaling scales up capacity automatically when traffic exceeds this target utilization rate, and then back down when it falls below the target. This ensures that the ratio of consumed capacity to provisioned capacity stays at or near this value. You define `targetValue` as a percentage. An `integer` between 20 and 90.
func (o TableTargetTrackingScalingPolicyConfigurationOutput) TargetValue() pulumi.IntOutput {
	return o.ApplyT(func(v TableTargetTrackingScalingPolicyConfiguration) int { return v.TargetValue }).(pulumi.IntOutput)
}

type TableTargetTrackingScalingPolicyConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TableTargetTrackingScalingPolicyConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableTargetTrackingScalingPolicyConfiguration)(nil)).Elem()
}

func (o TableTargetTrackingScalingPolicyConfigurationPtrOutput) ToTableTargetTrackingScalingPolicyConfigurationPtrOutput() TableTargetTrackingScalingPolicyConfigurationPtrOutput {
	return o
}

func (o TableTargetTrackingScalingPolicyConfigurationPtrOutput) ToTableTargetTrackingScalingPolicyConfigurationPtrOutputWithContext(ctx context.Context) TableTargetTrackingScalingPolicyConfigurationPtrOutput {
	return o
}

func (o TableTargetTrackingScalingPolicyConfigurationPtrOutput) Elem() TableTargetTrackingScalingPolicyConfigurationOutput {
	return o.ApplyT(func(v *TableTargetTrackingScalingPolicyConfiguration) TableTargetTrackingScalingPolicyConfiguration {
		if v != nil {
			return *v
		}
		var ret TableTargetTrackingScalingPolicyConfiguration
		return ret
	}).(TableTargetTrackingScalingPolicyConfigurationOutput)
}

// Specifies if `scale-in` is enabled.
//
// When auto scaling automatically decreases capacity for a table, the table *scales in* . When scaling policies are set, they can't scale in the table lower than its minimum capacity.
func (o TableTargetTrackingScalingPolicyConfigurationPtrOutput) DisableScaleIn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TableTargetTrackingScalingPolicyConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.DisableScaleIn
	}).(pulumi.BoolPtrOutput)
}

// Specifies a `scale-in` cool down period.
//
// A cooldown period in seconds between scaling activities that lets the table stabilize before another scaling activity starts.
func (o TableTargetTrackingScalingPolicyConfigurationPtrOutput) ScaleInCooldown() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableTargetTrackingScalingPolicyConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.ScaleInCooldown
	}).(pulumi.IntPtrOutput)
}

// Specifies a scale out cool down period.
//
// A cooldown period in seconds between scaling activities that lets the table stabilize before another scaling activity starts.
func (o TableTargetTrackingScalingPolicyConfigurationPtrOutput) ScaleOutCooldown() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableTargetTrackingScalingPolicyConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.ScaleOutCooldown
	}).(pulumi.IntPtrOutput)
}

// Specifies the target value for the target tracking auto scaling policy.
//
// Amazon Keyspaces auto scaling scales up capacity automatically when traffic exceeds this target utilization rate, and then back down when it falls below the target. This ensures that the ratio of consumed capacity to provisioned capacity stays at or near this value. You define `targetValue` as a percentage. An `integer` between 20 and 90.
func (o TableTargetTrackingScalingPolicyConfigurationPtrOutput) TargetValue() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableTargetTrackingScalingPolicyConfiguration) *int {
		if v == nil {
			return nil
		}
		return &v.TargetValue
	}).(pulumi.IntPtrOutput)
}

type TypeField struct {
	// The name of the field.
	FieldName string `pulumi:"fieldName"`
	// The data type of the field. This can be any Cassandra data type or another user-defined type.
	FieldType string `pulumi:"fieldType"`
}

// TypeFieldInput is an input type that accepts TypeFieldArgs and TypeFieldOutput values.
// You can construct a concrete instance of `TypeFieldInput` via:
//
//	TypeFieldArgs{...}
type TypeFieldInput interface {
	pulumi.Input

	ToTypeFieldOutput() TypeFieldOutput
	ToTypeFieldOutputWithContext(context.Context) TypeFieldOutput
}

type TypeFieldArgs struct {
	// The name of the field.
	FieldName pulumi.StringInput `pulumi:"fieldName"`
	// The data type of the field. This can be any Cassandra data type or another user-defined type.
	FieldType pulumi.StringInput `pulumi:"fieldType"`
}

func (TypeFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TypeField)(nil)).Elem()
}

func (i TypeFieldArgs) ToTypeFieldOutput() TypeFieldOutput {
	return i.ToTypeFieldOutputWithContext(context.Background())
}

func (i TypeFieldArgs) ToTypeFieldOutputWithContext(ctx context.Context) TypeFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TypeFieldOutput)
}

// TypeFieldArrayInput is an input type that accepts TypeFieldArray and TypeFieldArrayOutput values.
// You can construct a concrete instance of `TypeFieldArrayInput` via:
//
//	TypeFieldArray{ TypeFieldArgs{...} }
type TypeFieldArrayInput interface {
	pulumi.Input

	ToTypeFieldArrayOutput() TypeFieldArrayOutput
	ToTypeFieldArrayOutputWithContext(context.Context) TypeFieldArrayOutput
}

type TypeFieldArray []TypeFieldInput

func (TypeFieldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TypeField)(nil)).Elem()
}

func (i TypeFieldArray) ToTypeFieldArrayOutput() TypeFieldArrayOutput {
	return i.ToTypeFieldArrayOutputWithContext(context.Background())
}

func (i TypeFieldArray) ToTypeFieldArrayOutputWithContext(ctx context.Context) TypeFieldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TypeFieldArrayOutput)
}

type TypeFieldOutput struct{ *pulumi.OutputState }

func (TypeFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TypeField)(nil)).Elem()
}

func (o TypeFieldOutput) ToTypeFieldOutput() TypeFieldOutput {
	return o
}

func (o TypeFieldOutput) ToTypeFieldOutputWithContext(ctx context.Context) TypeFieldOutput {
	return o
}

// The name of the field.
func (o TypeFieldOutput) FieldName() pulumi.StringOutput {
	return o.ApplyT(func(v TypeField) string { return v.FieldName }).(pulumi.StringOutput)
}

// The data type of the field. This can be any Cassandra data type or another user-defined type.
func (o TypeFieldOutput) FieldType() pulumi.StringOutput {
	return o.ApplyT(func(v TypeField) string { return v.FieldType }).(pulumi.StringOutput)
}

type TypeFieldArrayOutput struct{ *pulumi.OutputState }

func (TypeFieldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TypeField)(nil)).Elem()
}

func (o TypeFieldArrayOutput) ToTypeFieldArrayOutput() TypeFieldArrayOutput {
	return o
}

func (o TypeFieldArrayOutput) ToTypeFieldArrayOutputWithContext(ctx context.Context) TypeFieldArrayOutput {
	return o
}

func (o TypeFieldArrayOutput) Index(i pulumi.IntInput) TypeFieldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TypeField {
		return vs[0].([]TypeField)[vs[1].(int)]
	}).(TypeFieldOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KeyspaceReplicationSpecificationInput)(nil)).Elem(), KeyspaceReplicationSpecificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyspaceReplicationSpecificationPtrInput)(nil)).Elem(), KeyspaceReplicationSpecificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableAutoScalingSettingInput)(nil)).Elem(), TableAutoScalingSettingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableAutoScalingSettingPtrInput)(nil)).Elem(), TableAutoScalingSettingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableAutoScalingSpecificationInput)(nil)).Elem(), TableAutoScalingSpecificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableAutoScalingSpecificationPtrInput)(nil)).Elem(), TableAutoScalingSpecificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableBillingModeInput)(nil)).Elem(), TableBillingModeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableBillingModePtrInput)(nil)).Elem(), TableBillingModeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableCdcSpecificationInput)(nil)).Elem(), TableCdcSpecificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableCdcSpecificationPtrInput)(nil)).Elem(), TableCdcSpecificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableClusteringKeyColumnInput)(nil)).Elem(), TableClusteringKeyColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableClusteringKeyColumnArrayInput)(nil)).Elem(), TableClusteringKeyColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableColumnInput)(nil)).Elem(), TableColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableColumnArrayInput)(nil)).Elem(), TableColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableEncryptionSpecificationInput)(nil)).Elem(), TableEncryptionSpecificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableEncryptionSpecificationPtrInput)(nil)).Elem(), TableEncryptionSpecificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableProvisionedThroughputInput)(nil)).Elem(), TableProvisionedThroughputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableProvisionedThroughputPtrInput)(nil)).Elem(), TableProvisionedThroughputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableReplicaSpecificationInput)(nil)).Elem(), TableReplicaSpecificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableReplicaSpecificationArrayInput)(nil)).Elem(), TableReplicaSpecificationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableScalingPolicyInput)(nil)).Elem(), TableScalingPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableScalingPolicyPtrInput)(nil)).Elem(), TableScalingPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableTargetTrackingScalingPolicyConfigurationInput)(nil)).Elem(), TableTargetTrackingScalingPolicyConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableTargetTrackingScalingPolicyConfigurationPtrInput)(nil)).Elem(), TableTargetTrackingScalingPolicyConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TypeFieldInput)(nil)).Elem(), TypeFieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TypeFieldArrayInput)(nil)).Elem(), TypeFieldArray{})
	pulumi.RegisterOutputType(KeyspaceReplicationSpecificationOutput{})
	pulumi.RegisterOutputType(KeyspaceReplicationSpecificationPtrOutput{})
	pulumi.RegisterOutputType(TableAutoScalingSettingOutput{})
	pulumi.RegisterOutputType(TableAutoScalingSettingPtrOutput{})
	pulumi.RegisterOutputType(TableAutoScalingSpecificationOutput{})
	pulumi.RegisterOutputType(TableAutoScalingSpecificationPtrOutput{})
	pulumi.RegisterOutputType(TableBillingModeOutput{})
	pulumi.RegisterOutputType(TableBillingModePtrOutput{})
	pulumi.RegisterOutputType(TableCdcSpecificationOutput{})
	pulumi.RegisterOutputType(TableCdcSpecificationPtrOutput{})
	pulumi.RegisterOutputType(TableClusteringKeyColumnOutput{})
	pulumi.RegisterOutputType(TableClusteringKeyColumnArrayOutput{})
	pulumi.RegisterOutputType(TableColumnOutput{})
	pulumi.RegisterOutputType(TableColumnArrayOutput{})
	pulumi.RegisterOutputType(TableEncryptionSpecificationOutput{})
	pulumi.RegisterOutputType(TableEncryptionSpecificationPtrOutput{})
	pulumi.RegisterOutputType(TableProvisionedThroughputOutput{})
	pulumi.RegisterOutputType(TableProvisionedThroughputPtrOutput{})
	pulumi.RegisterOutputType(TableReplicaSpecificationOutput{})
	pulumi.RegisterOutputType(TableReplicaSpecificationArrayOutput{})
	pulumi.RegisterOutputType(TableScalingPolicyOutput{})
	pulumi.RegisterOutputType(TableScalingPolicyPtrOutput{})
	pulumi.RegisterOutputType(TableTargetTrackingScalingPolicyConfigurationOutput{})
	pulumi.RegisterOutputType(TableTargetTrackingScalingPolicyConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TypeFieldOutput{})
	pulumi.RegisterOutputType(TypeFieldArrayOutput{})
}
