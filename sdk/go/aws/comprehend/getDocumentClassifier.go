// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package comprehend

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Document Classifier enables training document classifier models.
func LookupDocumentClassifier(ctx *pulumi.Context, args *LookupDocumentClassifierArgs, opts ...pulumi.InvokeOption) (*LookupDocumentClassifierResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDocumentClassifierResult
	err := ctx.Invoke("aws-native:comprehend:getDocumentClassifier", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupDocumentClassifierArgs struct {
	// The Amazon Resource Name (ARN) of the document classifier.
	Arn string `pulumi:"arn"`
}

type LookupDocumentClassifierResult struct {
	// The Amazon Resource Name (ARN) of the document classifier.
	Arn *string `pulumi:"arn"`
	// The resource-based policy to attach to your custom document classifier model. You can use this policy to allow another AWS account to import your custom model.
	//
	// Provide your policy as a JSON body that you enter as a UTF-8 encoded string without line breaks. To provide valid JSON, enclose the attribute names and values in double quotes. If the JSON body is also enclosed in double quotes, then you must escape the double quotes that are inside the policy:
	//
	// `"{\"attribute\": \"value\", \"attribute\": [\"value\"]}"`
	//
	// To avoid escaping quotes, you can use single quotes to enclose the policy and double quotes to enclose the JSON names and values:
	//
	// `'{"attribute": "value", "attribute": ["value"]}'`
	ModelPolicy *string `pulumi:"modelPolicy"`
	// Tags to associate with the document classifier. A tag is a key-value pair that adds as a metadata to a resource used by Amazon Comprehend. For example, a tag with "Sales" as the key might be added to a resource to indicate its use by the sales department.
	Tags []aws.Tag `pulumi:"tags"`
}

func LookupDocumentClassifierOutput(ctx *pulumi.Context, args LookupDocumentClassifierOutputArgs, opts ...pulumi.InvokeOption) LookupDocumentClassifierResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDocumentClassifierResultOutput, error) {
			args := v.(LookupDocumentClassifierArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupDocumentClassifierResult
			secret, err := ctx.InvokePackageRaw("aws-native:comprehend:getDocumentClassifier", args, &rv, "", opts...)
			if err != nil {
				return LookupDocumentClassifierResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupDocumentClassifierResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupDocumentClassifierResultOutput), nil
			}
			return output, nil
		}).(LookupDocumentClassifierResultOutput)
}

type LookupDocumentClassifierOutputArgs struct {
	// The Amazon Resource Name (ARN) of the document classifier.
	Arn pulumi.StringInput `pulumi:"arn"`
}

func (LookupDocumentClassifierOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDocumentClassifierArgs)(nil)).Elem()
}

type LookupDocumentClassifierResultOutput struct{ *pulumi.OutputState }

func (LookupDocumentClassifierResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDocumentClassifierResult)(nil)).Elem()
}

func (o LookupDocumentClassifierResultOutput) ToLookupDocumentClassifierResultOutput() LookupDocumentClassifierResultOutput {
	return o
}

func (o LookupDocumentClassifierResultOutput) ToLookupDocumentClassifierResultOutputWithContext(ctx context.Context) LookupDocumentClassifierResultOutput {
	return o
}

// The Amazon Resource Name (ARN) of the document classifier.
func (o LookupDocumentClassifierResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDocumentClassifierResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// The resource-based policy to attach to your custom document classifier model. You can use this policy to allow another AWS account to import your custom model.
//
// Provide your policy as a JSON body that you enter as a UTF-8 encoded string without line breaks. To provide valid JSON, enclose the attribute names and values in double quotes. If the JSON body is also enclosed in double quotes, then you must escape the double quotes that are inside the policy:
//
// `"{\"attribute\": \"value\", \"attribute\": [\"value\"]}"`
//
// To avoid escaping quotes, you can use single quotes to enclose the policy and double quotes to enclose the JSON names and values:
//
// `'{"attribute": "value", "attribute": ["value"]}'`
func (o LookupDocumentClassifierResultOutput) ModelPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDocumentClassifierResult) *string { return v.ModelPolicy }).(pulumi.StringPtrOutput)
}

// Tags to associate with the document classifier. A tag is a key-value pair that adds as a metadata to a resource used by Amazon Comprehend. For example, a tag with "Sales" as the key might be added to a resource to indicate its use by the sales department.
func (o LookupDocumentClassifierResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupDocumentClassifierResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDocumentClassifierResultOutput{})
}
