// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package comprehend

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The AWS::Comprehend::Flywheel resource creates an Amazon Comprehend Flywheel that enables customer to train their model.
type Flywheel struct {
	pulumi.CustomResourceState

	// The Amazon Resource Number (ARN) of the active model version.
	ActiveModelArn pulumi.StringPtrOutput `pulumi:"activeModelArn"`
	// The Amazon Resource Name (ARN) of the flywheel.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The Amazon Resource Name (ARN) of the IAM role that grants Amazon Comprehend permission to access the flywheel data.
	DataAccessRoleArn pulumi.StringOutput `pulumi:"dataAccessRoleArn"`
	// Amazon S3 URI of the data lake location.
	DataLakeS3Uri pulumi.StringOutput `pulumi:"dataLakeS3Uri"`
	// Data security configuration.
	DataSecurityConfig FlywheelDataSecurityConfigPtrOutput `pulumi:"dataSecurityConfig"`
	// Name for the flywheel.
	FlywheelName pulumi.StringOutput `pulumi:"flywheelName"`
	// Model type of the flywheel's model.
	ModelType FlywheelModelTypePtrOutput `pulumi:"modelType"`
	// A key-value pair that adds as a metadata to a resource used by Amazon Comprehend. For example, a tag with the key-value pair ‘Department’:’Sales’ might be added to a resource to indicate its use by a particular department.
	Tags aws.TagArrayOutput `pulumi:"tags"`
	// Configuration about the model associated with a flywheel.
	TaskConfig FlywheelTaskConfigPtrOutput `pulumi:"taskConfig"`
}

// NewFlywheel registers a new resource with the given unique name, arguments, and options.
func NewFlywheel(ctx *pulumi.Context,
	name string, args *FlywheelArgs, opts ...pulumi.ResourceOption) (*Flywheel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataAccessRoleArn == nil {
		return nil, errors.New("invalid value for required argument 'DataAccessRoleArn'")
	}
	if args.DataLakeS3Uri == nil {
		return nil, errors.New("invalid value for required argument 'DataLakeS3Uri'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"dataLakeS3Uri",
		"flywheelName",
		"modelType",
		"taskConfig",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Flywheel
	err := ctx.RegisterResource("aws-native:comprehend:Flywheel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFlywheel gets an existing Flywheel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFlywheel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FlywheelState, opts ...pulumi.ResourceOption) (*Flywheel, error) {
	var resource Flywheel
	err := ctx.ReadResource("aws-native:comprehend:Flywheel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Flywheel resources.
type flywheelState struct {
}

type FlywheelState struct {
}

func (FlywheelState) ElementType() reflect.Type {
	return reflect.TypeOf((*flywheelState)(nil)).Elem()
}

type flywheelArgs struct {
	// The Amazon Resource Number (ARN) of the active model version.
	ActiveModelArn *string `pulumi:"activeModelArn"`
	// The Amazon Resource Name (ARN) of the IAM role that grants Amazon Comprehend permission to access the flywheel data.
	DataAccessRoleArn string `pulumi:"dataAccessRoleArn"`
	// Amazon S3 URI of the data lake location.
	DataLakeS3Uri string `pulumi:"dataLakeS3Uri"`
	// Data security configuration.
	DataSecurityConfig *FlywheelDataSecurityConfig `pulumi:"dataSecurityConfig"`
	// Name for the flywheel.
	FlywheelName *string `pulumi:"flywheelName"`
	// Model type of the flywheel's model.
	ModelType *FlywheelModelType `pulumi:"modelType"`
	// A key-value pair that adds as a metadata to a resource used by Amazon Comprehend. For example, a tag with the key-value pair ‘Department’:’Sales’ might be added to a resource to indicate its use by a particular department.
	Tags []aws.Tag `pulumi:"tags"`
	// Configuration about the model associated with a flywheel.
	TaskConfig *FlywheelTaskConfig `pulumi:"taskConfig"`
}

// The set of arguments for constructing a Flywheel resource.
type FlywheelArgs struct {
	// The Amazon Resource Number (ARN) of the active model version.
	ActiveModelArn pulumi.StringPtrInput
	// The Amazon Resource Name (ARN) of the IAM role that grants Amazon Comprehend permission to access the flywheel data.
	DataAccessRoleArn pulumi.StringInput
	// Amazon S3 URI of the data lake location.
	DataLakeS3Uri pulumi.StringInput
	// Data security configuration.
	DataSecurityConfig FlywheelDataSecurityConfigPtrInput
	// Name for the flywheel.
	FlywheelName pulumi.StringPtrInput
	// Model type of the flywheel's model.
	ModelType FlywheelModelTypePtrInput
	// A key-value pair that adds as a metadata to a resource used by Amazon Comprehend. For example, a tag with the key-value pair ‘Department’:’Sales’ might be added to a resource to indicate its use by a particular department.
	Tags aws.TagArrayInput
	// Configuration about the model associated with a flywheel.
	TaskConfig FlywheelTaskConfigPtrInput
}

func (FlywheelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*flywheelArgs)(nil)).Elem()
}

type FlywheelInput interface {
	pulumi.Input

	ToFlywheelOutput() FlywheelOutput
	ToFlywheelOutputWithContext(ctx context.Context) FlywheelOutput
}

func (*Flywheel) ElementType() reflect.Type {
	return reflect.TypeOf((**Flywheel)(nil)).Elem()
}

func (i *Flywheel) ToFlywheelOutput() FlywheelOutput {
	return i.ToFlywheelOutputWithContext(context.Background())
}

func (i *Flywheel) ToFlywheelOutputWithContext(ctx context.Context) FlywheelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlywheelOutput)
}

type FlywheelOutput struct{ *pulumi.OutputState }

func (FlywheelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Flywheel)(nil)).Elem()
}

func (o FlywheelOutput) ToFlywheelOutput() FlywheelOutput {
	return o
}

func (o FlywheelOutput) ToFlywheelOutputWithContext(ctx context.Context) FlywheelOutput {
	return o
}

// The Amazon Resource Number (ARN) of the active model version.
func (o FlywheelOutput) ActiveModelArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Flywheel) pulumi.StringPtrOutput { return v.ActiveModelArn }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of the flywheel.
func (o FlywheelOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Flywheel) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The Amazon Resource Name (ARN) of the IAM role that grants Amazon Comprehend permission to access the flywheel data.
func (o FlywheelOutput) DataAccessRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Flywheel) pulumi.StringOutput { return v.DataAccessRoleArn }).(pulumi.StringOutput)
}

// Amazon S3 URI of the data lake location.
func (o FlywheelOutput) DataLakeS3Uri() pulumi.StringOutput {
	return o.ApplyT(func(v *Flywheel) pulumi.StringOutput { return v.DataLakeS3Uri }).(pulumi.StringOutput)
}

// Data security configuration.
func (o FlywheelOutput) DataSecurityConfig() FlywheelDataSecurityConfigPtrOutput {
	return o.ApplyT(func(v *Flywheel) FlywheelDataSecurityConfigPtrOutput { return v.DataSecurityConfig }).(FlywheelDataSecurityConfigPtrOutput)
}

// Name for the flywheel.
func (o FlywheelOutput) FlywheelName() pulumi.StringOutput {
	return o.ApplyT(func(v *Flywheel) pulumi.StringOutput { return v.FlywheelName }).(pulumi.StringOutput)
}

// Model type of the flywheel's model.
func (o FlywheelOutput) ModelType() FlywheelModelTypePtrOutput {
	return o.ApplyT(func(v *Flywheel) FlywheelModelTypePtrOutput { return v.ModelType }).(FlywheelModelTypePtrOutput)
}

// A key-value pair that adds as a metadata to a resource used by Amazon Comprehend. For example, a tag with the key-value pair ‘Department’:’Sales’ might be added to a resource to indicate its use by a particular department.
func (o FlywheelOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Flywheel) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

// Configuration about the model associated with a flywheel.
func (o FlywheelOutput) TaskConfig() FlywheelTaskConfigPtrOutput {
	return o.ApplyT(func(v *Flywheel) FlywheelTaskConfigPtrOutput { return v.TaskConfig }).(FlywheelTaskConfigPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FlywheelInput)(nil)).Elem(), &Flywheel{})
	pulumi.RegisterOutputType(FlywheelOutput{})
}
