// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cognito

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Cognito::ManagedLoginBranding
func LookupManagedLoginBranding(ctx *pulumi.Context, args *LookupManagedLoginBrandingArgs, opts ...pulumi.InvokeOption) (*LookupManagedLoginBrandingResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupManagedLoginBrandingResult
	err := ctx.Invoke("aws-native:cognito:getManagedLoginBranding", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupManagedLoginBrandingArgs struct {
	// The ID of the managed login branding style.
	ManagedLoginBrandingId string `pulumi:"managedLoginBrandingId"`
	// The user pool where the branding style is assigned.
	UserPoolId string `pulumi:"userPoolId"`
}

type LookupManagedLoginBrandingResult struct {
	// An array of image files that you want to apply to roles like backgrounds, logos, and icons. Each object must also indicate whether it is for dark mode, light mode, or browser-adaptive mode.
	Assets []ManagedLoginBrandingAssetType `pulumi:"assets"`
	// The ID of the managed login branding style.
	ManagedLoginBrandingId *string `pulumi:"managedLoginBrandingId"`
	// A JSON file, encoded as a `Document` type, with the the settings that you want to apply to your style.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Cognito::ManagedLoginBranding` for more information about the expected schema for this property.
	Settings interface{} `pulumi:"settings"`
	// When true, applies the default branding style options. This option reverts to default style options that are managed by Amazon Cognito. You can modify them later in the branding designer.
	//
	// When you specify `true` for this option, you must also omit values for `Settings` and `Assets` in the request.
	UseCognitoProvidedValues *bool `pulumi:"useCognitoProvidedValues"`
}

func LookupManagedLoginBrandingOutput(ctx *pulumi.Context, args LookupManagedLoginBrandingOutputArgs, opts ...pulumi.InvokeOption) LookupManagedLoginBrandingResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupManagedLoginBrandingResultOutput, error) {
			args := v.(LookupManagedLoginBrandingArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupManagedLoginBrandingResult
			secret, err := ctx.InvokePackageRaw("aws-native:cognito:getManagedLoginBranding", args, &rv, "", opts...)
			if err != nil {
				return LookupManagedLoginBrandingResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupManagedLoginBrandingResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupManagedLoginBrandingResultOutput), nil
			}
			return output, nil
		}).(LookupManagedLoginBrandingResultOutput)
}

type LookupManagedLoginBrandingOutputArgs struct {
	// The ID of the managed login branding style.
	ManagedLoginBrandingId pulumi.StringInput `pulumi:"managedLoginBrandingId"`
	// The user pool where the branding style is assigned.
	UserPoolId pulumi.StringInput `pulumi:"userPoolId"`
}

func (LookupManagedLoginBrandingOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupManagedLoginBrandingArgs)(nil)).Elem()
}

type LookupManagedLoginBrandingResultOutput struct{ *pulumi.OutputState }

func (LookupManagedLoginBrandingResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupManagedLoginBrandingResult)(nil)).Elem()
}

func (o LookupManagedLoginBrandingResultOutput) ToLookupManagedLoginBrandingResultOutput() LookupManagedLoginBrandingResultOutput {
	return o
}

func (o LookupManagedLoginBrandingResultOutput) ToLookupManagedLoginBrandingResultOutputWithContext(ctx context.Context) LookupManagedLoginBrandingResultOutput {
	return o
}

// An array of image files that you want to apply to roles like backgrounds, logos, and icons. Each object must also indicate whether it is for dark mode, light mode, or browser-adaptive mode.
func (o LookupManagedLoginBrandingResultOutput) Assets() ManagedLoginBrandingAssetTypeArrayOutput {
	return o.ApplyT(func(v LookupManagedLoginBrandingResult) []ManagedLoginBrandingAssetType { return v.Assets }).(ManagedLoginBrandingAssetTypeArrayOutput)
}

// The ID of the managed login branding style.
func (o LookupManagedLoginBrandingResultOutput) ManagedLoginBrandingId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupManagedLoginBrandingResult) *string { return v.ManagedLoginBrandingId }).(pulumi.StringPtrOutput)
}

// A JSON file, encoded as a `Document` type, with the the settings that you want to apply to your style.
//
// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Cognito::ManagedLoginBranding` for more information about the expected schema for this property.
func (o LookupManagedLoginBrandingResultOutput) Settings() pulumi.AnyOutput {
	return o.ApplyT(func(v LookupManagedLoginBrandingResult) interface{} { return v.Settings }).(pulumi.AnyOutput)
}

// When true, applies the default branding style options. This option reverts to default style options that are managed by Amazon Cognito. You can modify them later in the branding designer.
//
// When you specify `true` for this option, you must also omit values for `Settings` and `Assets` in the request.
func (o LookupManagedLoginBrandingResultOutput) UseCognitoProvidedValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupManagedLoginBrandingResult) *bool { return v.UseCognitoProvidedValues }).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupManagedLoginBrandingResultOutput{})
}
