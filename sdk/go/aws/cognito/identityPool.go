// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cognito

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Cognito::IdentityPool
type IdentityPool struct {
	pulumi.CustomResourceState

	// Enables the Basic (Classic) authentication flow.
	AllowClassicFlow pulumi.BoolPtrOutput `pulumi:"allowClassicFlow"`
	// Specifies whether the identity pool supports unauthenticated logins.
	AllowUnauthenticatedIdentities pulumi.BoolOutput   `pulumi:"allowUnauthenticatedIdentities"`
	AwsId                          pulumi.StringOutput `pulumi:"awsId"`
	// The events to configure.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Cognito::IdentityPool` for more information about the expected schema for this property.
	CognitoEvents pulumi.AnyOutput `pulumi:"cognitoEvents"`
	// The Amazon Cognito user pools and their client IDs.
	CognitoIdentityProviders IdentityPoolCognitoIdentityProviderArrayOutput `pulumi:"cognitoIdentityProviders"`
	// Configuration options for configuring Amazon Cognito streams.
	CognitoStreams IdentityPoolCognitoStreamsPtrOutput `pulumi:"cognitoStreams"`
	// The "domain" Amazon Cognito uses when referencing your users. This name acts as a placeholder that allows your backend and the Amazon Cognito service to communicate about the developer provider. For the `DeveloperProviderName` , you can use letters and periods (.), underscores (_), and dashes (-).
	//
	// *Minimum length* : 1
	//
	// *Maximum length* : 100
	DeveloperProviderName pulumi.StringPtrOutput `pulumi:"developerProviderName"`
	// The name of your Amazon Cognito identity pool.
	//
	// *Minimum length* : 1
	//
	// *Maximum length* : 128
	//
	// *Pattern* : `[\w\s+=,.@-]+`
	IdentityPoolName pulumi.StringPtrOutput `pulumi:"identityPoolName"`
	// An array of key-value pairs to apply to this resource.
	IdentityPoolTags aws.TagArrayOutput `pulumi:"identityPoolTags"`
	// The name of the Amazon Cognito identity pool, returned as a string.
	Name pulumi.StringOutput `pulumi:"name"`
	// The Amazon Resource Names (ARNs) of the OpenID connect providers.
	OpenIdConnectProviderArns pulumi.StringArrayOutput `pulumi:"openIdConnectProviderArns"`
	// The configuration options to be applied to the identity pool.
	PushSync IdentityPoolPushSyncPtrOutput `pulumi:"pushSync"`
	// The Amazon Resource Names (ARNs) of the Security Assertion Markup Language (SAML) providers.
	SamlProviderArns pulumi.StringArrayOutput `pulumi:"samlProviderArns"`
	// Key-value pairs that map provider names to provider app IDs.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Cognito::IdentityPool` for more information about the expected schema for this property.
	SupportedLoginProviders pulumi.AnyOutput `pulumi:"supportedLoginProviders"`
}

// NewIdentityPool registers a new resource with the given unique name, arguments, and options.
func NewIdentityPool(ctx *pulumi.Context,
	name string, args *IdentityPoolArgs, opts ...pulumi.ResourceOption) (*IdentityPool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AllowUnauthenticatedIdentities == nil {
		return nil, errors.New("invalid value for required argument 'AllowUnauthenticatedIdentities'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IdentityPool
	err := ctx.RegisterResource("aws-native:cognito:IdentityPool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIdentityPool gets an existing IdentityPool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdentityPool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IdentityPoolState, opts ...pulumi.ResourceOption) (*IdentityPool, error) {
	var resource IdentityPool
	err := ctx.ReadResource("aws-native:cognito:IdentityPool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IdentityPool resources.
type identityPoolState struct {
}

type IdentityPoolState struct {
}

func (IdentityPoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*identityPoolState)(nil)).Elem()
}

type identityPoolArgs struct {
	// Enables the Basic (Classic) authentication flow.
	AllowClassicFlow *bool `pulumi:"allowClassicFlow"`
	// Specifies whether the identity pool supports unauthenticated logins.
	AllowUnauthenticatedIdentities bool `pulumi:"allowUnauthenticatedIdentities"`
	// The events to configure.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Cognito::IdentityPool` for more information about the expected schema for this property.
	CognitoEvents interface{} `pulumi:"cognitoEvents"`
	// The Amazon Cognito user pools and their client IDs.
	CognitoIdentityProviders []IdentityPoolCognitoIdentityProvider `pulumi:"cognitoIdentityProviders"`
	// Configuration options for configuring Amazon Cognito streams.
	CognitoStreams *IdentityPoolCognitoStreams `pulumi:"cognitoStreams"`
	// The "domain" Amazon Cognito uses when referencing your users. This name acts as a placeholder that allows your backend and the Amazon Cognito service to communicate about the developer provider. For the `DeveloperProviderName` , you can use letters and periods (.), underscores (_), and dashes (-).
	//
	// *Minimum length* : 1
	//
	// *Maximum length* : 100
	DeveloperProviderName *string `pulumi:"developerProviderName"`
	// The name of your Amazon Cognito identity pool.
	//
	// *Minimum length* : 1
	//
	// *Maximum length* : 128
	//
	// *Pattern* : `[\w\s+=,.@-]+`
	IdentityPoolName *string `pulumi:"identityPoolName"`
	// An array of key-value pairs to apply to this resource.
	IdentityPoolTags []aws.Tag `pulumi:"identityPoolTags"`
	// The Amazon Resource Names (ARNs) of the OpenID connect providers.
	OpenIdConnectProviderArns []string `pulumi:"openIdConnectProviderArns"`
	// The configuration options to be applied to the identity pool.
	PushSync *IdentityPoolPushSync `pulumi:"pushSync"`
	// The Amazon Resource Names (ARNs) of the Security Assertion Markup Language (SAML) providers.
	SamlProviderArns []string `pulumi:"samlProviderArns"`
	// Key-value pairs that map provider names to provider app IDs.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Cognito::IdentityPool` for more information about the expected schema for this property.
	SupportedLoginProviders interface{} `pulumi:"supportedLoginProviders"`
}

// The set of arguments for constructing a IdentityPool resource.
type IdentityPoolArgs struct {
	// Enables the Basic (Classic) authentication flow.
	AllowClassicFlow pulumi.BoolPtrInput
	// Specifies whether the identity pool supports unauthenticated logins.
	AllowUnauthenticatedIdentities pulumi.BoolInput
	// The events to configure.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Cognito::IdentityPool` for more information about the expected schema for this property.
	CognitoEvents pulumi.Input
	// The Amazon Cognito user pools and their client IDs.
	CognitoIdentityProviders IdentityPoolCognitoIdentityProviderArrayInput
	// Configuration options for configuring Amazon Cognito streams.
	CognitoStreams IdentityPoolCognitoStreamsPtrInput
	// The "domain" Amazon Cognito uses when referencing your users. This name acts as a placeholder that allows your backend and the Amazon Cognito service to communicate about the developer provider. For the `DeveloperProviderName` , you can use letters and periods (.), underscores (_), and dashes (-).
	//
	// *Minimum length* : 1
	//
	// *Maximum length* : 100
	DeveloperProviderName pulumi.StringPtrInput
	// The name of your Amazon Cognito identity pool.
	//
	// *Minimum length* : 1
	//
	// *Maximum length* : 128
	//
	// *Pattern* : `[\w\s+=,.@-]+`
	IdentityPoolName pulumi.StringPtrInput
	// An array of key-value pairs to apply to this resource.
	IdentityPoolTags aws.TagArrayInput
	// The Amazon Resource Names (ARNs) of the OpenID connect providers.
	OpenIdConnectProviderArns pulumi.StringArrayInput
	// The configuration options to be applied to the identity pool.
	PushSync IdentityPoolPushSyncPtrInput
	// The Amazon Resource Names (ARNs) of the Security Assertion Markup Language (SAML) providers.
	SamlProviderArns pulumi.StringArrayInput
	// Key-value pairs that map provider names to provider app IDs.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Cognito::IdentityPool` for more information about the expected schema for this property.
	SupportedLoginProviders pulumi.Input
}

func (IdentityPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*identityPoolArgs)(nil)).Elem()
}

type IdentityPoolInput interface {
	pulumi.Input

	ToIdentityPoolOutput() IdentityPoolOutput
	ToIdentityPoolOutputWithContext(ctx context.Context) IdentityPoolOutput
}

func (*IdentityPool) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityPool)(nil)).Elem()
}

func (i *IdentityPool) ToIdentityPoolOutput() IdentityPoolOutput {
	return i.ToIdentityPoolOutputWithContext(context.Background())
}

func (i *IdentityPool) ToIdentityPoolOutputWithContext(ctx context.Context) IdentityPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityPoolOutput)
}

type IdentityPoolOutput struct{ *pulumi.OutputState }

func (IdentityPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityPool)(nil)).Elem()
}

func (o IdentityPoolOutput) ToIdentityPoolOutput() IdentityPoolOutput {
	return o
}

func (o IdentityPoolOutput) ToIdentityPoolOutputWithContext(ctx context.Context) IdentityPoolOutput {
	return o
}

// Enables the Basic (Classic) authentication flow.
func (o IdentityPoolOutput) AllowClassicFlow() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IdentityPool) pulumi.BoolPtrOutput { return v.AllowClassicFlow }).(pulumi.BoolPtrOutput)
}

// Specifies whether the identity pool supports unauthenticated logins.
func (o IdentityPoolOutput) AllowUnauthenticatedIdentities() pulumi.BoolOutput {
	return o.ApplyT(func(v *IdentityPool) pulumi.BoolOutput { return v.AllowUnauthenticatedIdentities }).(pulumi.BoolOutput)
}

func (o IdentityPoolOutput) AwsId() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentityPool) pulumi.StringOutput { return v.AwsId }).(pulumi.StringOutput)
}

// The events to configure.
//
// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Cognito::IdentityPool` for more information about the expected schema for this property.
func (o IdentityPoolOutput) CognitoEvents() pulumi.AnyOutput {
	return o.ApplyT(func(v *IdentityPool) pulumi.AnyOutput { return v.CognitoEvents }).(pulumi.AnyOutput)
}

// The Amazon Cognito user pools and their client IDs.
func (o IdentityPoolOutput) CognitoIdentityProviders() IdentityPoolCognitoIdentityProviderArrayOutput {
	return o.ApplyT(func(v *IdentityPool) IdentityPoolCognitoIdentityProviderArrayOutput {
		return v.CognitoIdentityProviders
	}).(IdentityPoolCognitoIdentityProviderArrayOutput)
}

// Configuration options for configuring Amazon Cognito streams.
func (o IdentityPoolOutput) CognitoStreams() IdentityPoolCognitoStreamsPtrOutput {
	return o.ApplyT(func(v *IdentityPool) IdentityPoolCognitoStreamsPtrOutput { return v.CognitoStreams }).(IdentityPoolCognitoStreamsPtrOutput)
}

// The "domain" Amazon Cognito uses when referencing your users. This name acts as a placeholder that allows your backend and the Amazon Cognito service to communicate about the developer provider. For the `DeveloperProviderName` , you can use letters and periods (.), underscores (_), and dashes (-).
//
// *Minimum length* : 1
//
// *Maximum length* : 100
func (o IdentityPoolOutput) DeveloperProviderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityPool) pulumi.StringPtrOutput { return v.DeveloperProviderName }).(pulumi.StringPtrOutput)
}

// The name of your Amazon Cognito identity pool.
//
// *Minimum length* : 1
//
// *Maximum length* : 128
//
// *Pattern* : `[\w\s+=,.@-]+`
func (o IdentityPoolOutput) IdentityPoolName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityPool) pulumi.StringPtrOutput { return v.IdentityPoolName }).(pulumi.StringPtrOutput)
}

// An array of key-value pairs to apply to this resource.
func (o IdentityPoolOutput) IdentityPoolTags() aws.TagArrayOutput {
	return o.ApplyT(func(v *IdentityPool) aws.TagArrayOutput { return v.IdentityPoolTags }).(aws.TagArrayOutput)
}

// The name of the Amazon Cognito identity pool, returned as a string.
func (o IdentityPoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentityPool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Amazon Resource Names (ARNs) of the OpenID connect providers.
func (o IdentityPoolOutput) OpenIdConnectProviderArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IdentityPool) pulumi.StringArrayOutput { return v.OpenIdConnectProviderArns }).(pulumi.StringArrayOutput)
}

// The configuration options to be applied to the identity pool.
func (o IdentityPoolOutput) PushSync() IdentityPoolPushSyncPtrOutput {
	return o.ApplyT(func(v *IdentityPool) IdentityPoolPushSyncPtrOutput { return v.PushSync }).(IdentityPoolPushSyncPtrOutput)
}

// The Amazon Resource Names (ARNs) of the Security Assertion Markup Language (SAML) providers.
func (o IdentityPoolOutput) SamlProviderArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IdentityPool) pulumi.StringArrayOutput { return v.SamlProviderArns }).(pulumi.StringArrayOutput)
}

// Key-value pairs that map provider names to provider app IDs.
//
// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Cognito::IdentityPool` for more information about the expected schema for this property.
func (o IdentityPoolOutput) SupportedLoginProviders() pulumi.AnyOutput {
	return o.ApplyT(func(v *IdentityPool) pulumi.AnyOutput { return v.SupportedLoginProviders }).(pulumi.AnyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityPoolInput)(nil)).Elem(), &IdentityPool{})
	pulumi.RegisterOutputType(IdentityPoolOutput{})
}
