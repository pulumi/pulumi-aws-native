// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cognito

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Cognito::UserPoolResourceServer
func LookupUserPoolResourceServer(ctx *pulumi.Context, args *LookupUserPoolResourceServerArgs, opts ...pulumi.InvokeOption) (*LookupUserPoolResourceServerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupUserPoolResourceServerResult
	err := ctx.Invoke("aws-native:cognito:getUserPoolResourceServer", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupUserPoolResourceServerArgs struct {
	// A unique resource server identifier for the resource server. The identifier can be an API friendly name like `solar-system-data` . You can also set an API URL like `https://solar-system-data-api.example.com` as your identifier.
	//
	// Amazon Cognito represents scopes in the access token in the format `$resource-server-identifier/$scope` . Longer scope-identifier strings increase the size of your access tokens.
	Identifier string `pulumi:"identifier"`
	// The ID of the user pool where you want to create a resource server.
	UserPoolId string `pulumi:"userPoolId"`
}

type LookupUserPoolResourceServerResult struct {
	// A friendly name for the resource server.
	Name *string `pulumi:"name"`
	// A list of scopes. Each scope is a map with keys `ScopeName` and `ScopeDescription` .
	Scopes []UserPoolResourceServerResourceServerScopeType `pulumi:"scopes"`
}

func LookupUserPoolResourceServerOutput(ctx *pulumi.Context, args LookupUserPoolResourceServerOutputArgs, opts ...pulumi.InvokeOption) LookupUserPoolResourceServerResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupUserPoolResourceServerResultOutput, error) {
			args := v.(LookupUserPoolResourceServerArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:cognito:getUserPoolResourceServer", args, LookupUserPoolResourceServerResultOutput{}, options).(LookupUserPoolResourceServerResultOutput), nil
		}).(LookupUserPoolResourceServerResultOutput)
}

type LookupUserPoolResourceServerOutputArgs struct {
	// A unique resource server identifier for the resource server. The identifier can be an API friendly name like `solar-system-data` . You can also set an API URL like `https://solar-system-data-api.example.com` as your identifier.
	//
	// Amazon Cognito represents scopes in the access token in the format `$resource-server-identifier/$scope` . Longer scope-identifier strings increase the size of your access tokens.
	Identifier pulumi.StringInput `pulumi:"identifier"`
	// The ID of the user pool where you want to create a resource server.
	UserPoolId pulumi.StringInput `pulumi:"userPoolId"`
}

func (LookupUserPoolResourceServerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserPoolResourceServerArgs)(nil)).Elem()
}

type LookupUserPoolResourceServerResultOutput struct{ *pulumi.OutputState }

func (LookupUserPoolResourceServerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserPoolResourceServerResult)(nil)).Elem()
}

func (o LookupUserPoolResourceServerResultOutput) ToLookupUserPoolResourceServerResultOutput() LookupUserPoolResourceServerResultOutput {
	return o
}

func (o LookupUserPoolResourceServerResultOutput) ToLookupUserPoolResourceServerResultOutputWithContext(ctx context.Context) LookupUserPoolResourceServerResultOutput {
	return o
}

// A friendly name for the resource server.
func (o LookupUserPoolResourceServerResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupUserPoolResourceServerResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// A list of scopes. Each scope is a map with keys `ScopeName` and `ScopeDescription` .
func (o LookupUserPoolResourceServerResultOutput) Scopes() UserPoolResourceServerResourceServerScopeTypeArrayOutput {
	return o.ApplyT(func(v LookupUserPoolResourceServerResult) []UserPoolResourceServerResourceServerScopeType {
		return v.Scopes
	}).(UserPoolResourceServerResourceServerScopeTypeArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupUserPoolResourceServerResultOutput{})
}
