// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cognito

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Cognito::UserPoolUserToGroupAttachment
type UserPoolUserToGroupAttachment struct {
	pulumi.CustomResourceState

	// The name of the group that you want to add your user to.
	GroupName pulumi.StringOutput `pulumi:"groupName"`
	// The user pool ID for the user pool.
	UserPoolId pulumi.StringOutput `pulumi:"userPoolId"`
	// The user's username.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewUserPoolUserToGroupAttachment registers a new resource with the given unique name, arguments, and options.
func NewUserPoolUserToGroupAttachment(ctx *pulumi.Context,
	name string, args *UserPoolUserToGroupAttachmentArgs, opts ...pulumi.ResourceOption) (*UserPoolUserToGroupAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupName == nil {
		return nil, errors.New("invalid value for required argument 'GroupName'")
	}
	if args.UserPoolId == nil {
		return nil, errors.New("invalid value for required argument 'UserPoolId'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"groupName",
		"userPoolId",
		"username",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserPoolUserToGroupAttachment
	err := ctx.RegisterResource("aws-native:cognito:UserPoolUserToGroupAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserPoolUserToGroupAttachment gets an existing UserPoolUserToGroupAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserPoolUserToGroupAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserPoolUserToGroupAttachmentState, opts ...pulumi.ResourceOption) (*UserPoolUserToGroupAttachment, error) {
	var resource UserPoolUserToGroupAttachment
	err := ctx.ReadResource("aws-native:cognito:UserPoolUserToGroupAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserPoolUserToGroupAttachment resources.
type userPoolUserToGroupAttachmentState struct {
}

type UserPoolUserToGroupAttachmentState struct {
}

func (UserPoolUserToGroupAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*userPoolUserToGroupAttachmentState)(nil)).Elem()
}

type userPoolUserToGroupAttachmentArgs struct {
	// The name of the group that you want to add your user to.
	GroupName string `pulumi:"groupName"`
	// The user pool ID for the user pool.
	UserPoolId string `pulumi:"userPoolId"`
	// The user's username.
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a UserPoolUserToGroupAttachment resource.
type UserPoolUserToGroupAttachmentArgs struct {
	// The name of the group that you want to add your user to.
	GroupName pulumi.StringInput
	// The user pool ID for the user pool.
	UserPoolId pulumi.StringInput
	// The user's username.
	Username pulumi.StringInput
}

func (UserPoolUserToGroupAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userPoolUserToGroupAttachmentArgs)(nil)).Elem()
}

type UserPoolUserToGroupAttachmentInput interface {
	pulumi.Input

	ToUserPoolUserToGroupAttachmentOutput() UserPoolUserToGroupAttachmentOutput
	ToUserPoolUserToGroupAttachmentOutputWithContext(ctx context.Context) UserPoolUserToGroupAttachmentOutput
}

func (*UserPoolUserToGroupAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**UserPoolUserToGroupAttachment)(nil)).Elem()
}

func (i *UserPoolUserToGroupAttachment) ToUserPoolUserToGroupAttachmentOutput() UserPoolUserToGroupAttachmentOutput {
	return i.ToUserPoolUserToGroupAttachmentOutputWithContext(context.Background())
}

func (i *UserPoolUserToGroupAttachment) ToUserPoolUserToGroupAttachmentOutputWithContext(ctx context.Context) UserPoolUserToGroupAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPoolUserToGroupAttachmentOutput)
}

type UserPoolUserToGroupAttachmentOutput struct{ *pulumi.OutputState }

func (UserPoolUserToGroupAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserPoolUserToGroupAttachment)(nil)).Elem()
}

func (o UserPoolUserToGroupAttachmentOutput) ToUserPoolUserToGroupAttachmentOutput() UserPoolUserToGroupAttachmentOutput {
	return o
}

func (o UserPoolUserToGroupAttachmentOutput) ToUserPoolUserToGroupAttachmentOutputWithContext(ctx context.Context) UserPoolUserToGroupAttachmentOutput {
	return o
}

// The name of the group that you want to add your user to.
func (o UserPoolUserToGroupAttachmentOutput) GroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *UserPoolUserToGroupAttachment) pulumi.StringOutput { return v.GroupName }).(pulumi.StringOutput)
}

// The user pool ID for the user pool.
func (o UserPoolUserToGroupAttachmentOutput) UserPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *UserPoolUserToGroupAttachment) pulumi.StringOutput { return v.UserPoolId }).(pulumi.StringOutput)
}

// The user's username.
func (o UserPoolUserToGroupAttachmentOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *UserPoolUserToGroupAttachment) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserPoolUserToGroupAttachmentInput)(nil)).Elem(), &UserPoolUserToGroupAttachment{})
	pulumi.RegisterOutputType(UserPoolUserToGroupAttachmentOutput{})
}
