// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cognito

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Cognito::UserPoolDomain
func LookupUserPoolDomain(ctx *pulumi.Context, args *LookupUserPoolDomainArgs, opts ...pulumi.InvokeOption) (*LookupUserPoolDomainResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupUserPoolDomainResult
	err := ctx.Invoke("aws-native:cognito:getUserPoolDomain", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupUserPoolDomainArgs struct {
	// The name of the domain that you want to update. For custom domains, this is the fully-qualified domain name, for example `auth.example.com` . For prefix domains, this is the prefix alone, such as `myprefix` .
	Domain string `pulumi:"domain"`
	// The ID of the user pool that is associated with the domain you're updating.
	UserPoolId string `pulumi:"userPoolId"`
}

type LookupUserPoolDomainResult struct {
	// The Amazon CloudFront endpoint that you use as the target of the alias that you set up with your Domain Name Service (DNS) provider.
	CloudFrontDistribution *string `pulumi:"cloudFrontDistribution"`
	// The configuration for a custom domain that hosts the sign-up and sign-in pages for your application. Use this object to specify an SSL certificate that is managed by ACM.
	//
	// When you create a custom domain, the passkey RP ID defaults to the custom domain. If you had a prefix domain active, this will cause passkey integration for your prefix domain to stop working due to a mismatch in RP ID. To keep the prefix domain passkey integration working, you can explicitly set RP ID to the prefix domain.
	CustomDomainConfig *UserPoolDomainCustomDomainConfigType `pulumi:"customDomainConfig"`
}

func LookupUserPoolDomainOutput(ctx *pulumi.Context, args LookupUserPoolDomainOutputArgs, opts ...pulumi.InvokeOption) LookupUserPoolDomainResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupUserPoolDomainResultOutput, error) {
			args := v.(LookupUserPoolDomainArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:cognito:getUserPoolDomain", args, LookupUserPoolDomainResultOutput{}, options).(LookupUserPoolDomainResultOutput), nil
		}).(LookupUserPoolDomainResultOutput)
}

type LookupUserPoolDomainOutputArgs struct {
	// The name of the domain that you want to update. For custom domains, this is the fully-qualified domain name, for example `auth.example.com` . For prefix domains, this is the prefix alone, such as `myprefix` .
	Domain pulumi.StringInput `pulumi:"domain"`
	// The ID of the user pool that is associated with the domain you're updating.
	UserPoolId pulumi.StringInput `pulumi:"userPoolId"`
}

func (LookupUserPoolDomainOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserPoolDomainArgs)(nil)).Elem()
}

type LookupUserPoolDomainResultOutput struct{ *pulumi.OutputState }

func (LookupUserPoolDomainResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserPoolDomainResult)(nil)).Elem()
}

func (o LookupUserPoolDomainResultOutput) ToLookupUserPoolDomainResultOutput() LookupUserPoolDomainResultOutput {
	return o
}

func (o LookupUserPoolDomainResultOutput) ToLookupUserPoolDomainResultOutputWithContext(ctx context.Context) LookupUserPoolDomainResultOutput {
	return o
}

// The Amazon CloudFront endpoint that you use as the target of the alias that you set up with your Domain Name Service (DNS) provider.
func (o LookupUserPoolDomainResultOutput) CloudFrontDistribution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupUserPoolDomainResult) *string { return v.CloudFrontDistribution }).(pulumi.StringPtrOutput)
}

// The configuration for a custom domain that hosts the sign-up and sign-in pages for your application. Use this object to specify an SSL certificate that is managed by ACM.
//
// When you create a custom domain, the passkey RP ID defaults to the custom domain. If you had a prefix domain active, this will cause passkey integration for your prefix domain to stop working due to a mismatch in RP ID. To keep the prefix domain passkey integration working, you can explicitly set RP ID to the prefix domain.
func (o LookupUserPoolDomainResultOutput) CustomDomainConfig() UserPoolDomainCustomDomainConfigTypePtrOutput {
	return o.ApplyT(func(v LookupUserPoolDomainResult) *UserPoolDomainCustomDomainConfigType { return v.CustomDomainConfig }).(UserPoolDomainCustomDomainConfigTypePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupUserPoolDomainResultOutput{})
}
