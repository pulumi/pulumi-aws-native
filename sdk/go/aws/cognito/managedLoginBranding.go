// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cognito

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Cognito::ManagedLoginBranding
type ManagedLoginBranding struct {
	pulumi.CustomResourceState

	// An array of image files that you want to apply to roles like backgrounds, logos, and icons. Each object must also indicate whether it is for dark mode, light mode, or browser-adaptive mode.
	Assets ManagedLoginBrandingAssetTypeArrayOutput `pulumi:"assets"`
	// The app client that's assigned to the branding style that you want more information about.
	ClientId pulumi.StringPtrOutput `pulumi:"clientId"`
	// The ID of the managed login branding style.
	ManagedLoginBrandingId pulumi.StringOutput `pulumi:"managedLoginBrandingId"`
	// When `true` , returns values for branding options that are unchanged from Amazon Cognito defaults. When `false` or when you omit this parameter, returns only values that you customized in your branding style.
	ReturnMergedResources pulumi.BoolPtrOutput `pulumi:"returnMergedResources"`
	// A JSON file, encoded as a `Document` type, with the the settings that you want to apply to your style.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Cognito::ManagedLoginBranding` for more information about the expected schema for this property.
	Settings pulumi.AnyOutput `pulumi:"settings"`
	// When true, applies the default branding style options. This option reverts to default style options that are managed by Amazon Cognito. You can modify them later in the branding designer.
	//
	// When you specify `true` for this option, you must also omit values for `Settings` and `Assets` in the request.
	UseCognitoProvidedValues pulumi.BoolPtrOutput `pulumi:"useCognitoProvidedValues"`
	// The user pool where the branding style is assigned.
	UserPoolId pulumi.StringOutput `pulumi:"userPoolId"`
}

// NewManagedLoginBranding registers a new resource with the given unique name, arguments, and options.
func NewManagedLoginBranding(ctx *pulumi.Context,
	name string, args *ManagedLoginBrandingArgs, opts ...pulumi.ResourceOption) (*ManagedLoginBranding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.UserPoolId == nil {
		return nil, errors.New("invalid value for required argument 'UserPoolId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"clientId",
		"userPoolId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ManagedLoginBranding
	err := ctx.RegisterResource("aws-native:cognito:ManagedLoginBranding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagedLoginBranding gets an existing ManagedLoginBranding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagedLoginBranding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagedLoginBrandingState, opts ...pulumi.ResourceOption) (*ManagedLoginBranding, error) {
	var resource ManagedLoginBranding
	err := ctx.ReadResource("aws-native:cognito:ManagedLoginBranding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagedLoginBranding resources.
type managedLoginBrandingState struct {
}

type ManagedLoginBrandingState struct {
}

func (ManagedLoginBrandingState) ElementType() reflect.Type {
	return reflect.TypeOf((*managedLoginBrandingState)(nil)).Elem()
}

type managedLoginBrandingArgs struct {
	// An array of image files that you want to apply to roles like backgrounds, logos, and icons. Each object must also indicate whether it is for dark mode, light mode, or browser-adaptive mode.
	Assets []ManagedLoginBrandingAssetType `pulumi:"assets"`
	// The app client that's assigned to the branding style that you want more information about.
	ClientId *string `pulumi:"clientId"`
	// When `true` , returns values for branding options that are unchanged from Amazon Cognito defaults. When `false` or when you omit this parameter, returns only values that you customized in your branding style.
	ReturnMergedResources *bool `pulumi:"returnMergedResources"`
	// A JSON file, encoded as a `Document` type, with the the settings that you want to apply to your style.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Cognito::ManagedLoginBranding` for more information about the expected schema for this property.
	Settings interface{} `pulumi:"settings"`
	// When true, applies the default branding style options. This option reverts to default style options that are managed by Amazon Cognito. You can modify them later in the branding designer.
	//
	// When you specify `true` for this option, you must also omit values for `Settings` and `Assets` in the request.
	UseCognitoProvidedValues *bool `pulumi:"useCognitoProvidedValues"`
	// The user pool where the branding style is assigned.
	UserPoolId string `pulumi:"userPoolId"`
}

// The set of arguments for constructing a ManagedLoginBranding resource.
type ManagedLoginBrandingArgs struct {
	// An array of image files that you want to apply to roles like backgrounds, logos, and icons. Each object must also indicate whether it is for dark mode, light mode, or browser-adaptive mode.
	Assets ManagedLoginBrandingAssetTypeArrayInput
	// The app client that's assigned to the branding style that you want more information about.
	ClientId pulumi.StringPtrInput
	// When `true` , returns values for branding options that are unchanged from Amazon Cognito defaults. When `false` or when you omit this parameter, returns only values that you customized in your branding style.
	ReturnMergedResources pulumi.BoolPtrInput
	// A JSON file, encoded as a `Document` type, with the the settings that you want to apply to your style.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Cognito::ManagedLoginBranding` for more information about the expected schema for this property.
	Settings pulumi.Input
	// When true, applies the default branding style options. This option reverts to default style options that are managed by Amazon Cognito. You can modify them later in the branding designer.
	//
	// When you specify `true` for this option, you must also omit values for `Settings` and `Assets` in the request.
	UseCognitoProvidedValues pulumi.BoolPtrInput
	// The user pool where the branding style is assigned.
	UserPoolId pulumi.StringInput
}

func (ManagedLoginBrandingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managedLoginBrandingArgs)(nil)).Elem()
}

type ManagedLoginBrandingInput interface {
	pulumi.Input

	ToManagedLoginBrandingOutput() ManagedLoginBrandingOutput
	ToManagedLoginBrandingOutputWithContext(ctx context.Context) ManagedLoginBrandingOutput
}

func (*ManagedLoginBranding) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedLoginBranding)(nil)).Elem()
}

func (i *ManagedLoginBranding) ToManagedLoginBrandingOutput() ManagedLoginBrandingOutput {
	return i.ToManagedLoginBrandingOutputWithContext(context.Background())
}

func (i *ManagedLoginBranding) ToManagedLoginBrandingOutputWithContext(ctx context.Context) ManagedLoginBrandingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedLoginBrandingOutput)
}

type ManagedLoginBrandingOutput struct{ *pulumi.OutputState }

func (ManagedLoginBrandingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedLoginBranding)(nil)).Elem()
}

func (o ManagedLoginBrandingOutput) ToManagedLoginBrandingOutput() ManagedLoginBrandingOutput {
	return o
}

func (o ManagedLoginBrandingOutput) ToManagedLoginBrandingOutputWithContext(ctx context.Context) ManagedLoginBrandingOutput {
	return o
}

// An array of image files that you want to apply to roles like backgrounds, logos, and icons. Each object must also indicate whether it is for dark mode, light mode, or browser-adaptive mode.
func (o ManagedLoginBrandingOutput) Assets() ManagedLoginBrandingAssetTypeArrayOutput {
	return o.ApplyT(func(v *ManagedLoginBranding) ManagedLoginBrandingAssetTypeArrayOutput { return v.Assets }).(ManagedLoginBrandingAssetTypeArrayOutput)
}

// The app client that's assigned to the branding style that you want more information about.
func (o ManagedLoginBrandingOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedLoginBranding) pulumi.StringPtrOutput { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The ID of the managed login branding style.
func (o ManagedLoginBrandingOutput) ManagedLoginBrandingId() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedLoginBranding) pulumi.StringOutput { return v.ManagedLoginBrandingId }).(pulumi.StringOutput)
}

// When `true` , returns values for branding options that are unchanged from Amazon Cognito defaults. When `false` or when you omit this parameter, returns only values that you customized in your branding style.
func (o ManagedLoginBrandingOutput) ReturnMergedResources() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedLoginBranding) pulumi.BoolPtrOutput { return v.ReturnMergedResources }).(pulumi.BoolPtrOutput)
}

// A JSON file, encoded as a `Document` type, with the the settings that you want to apply to your style.
//
// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Cognito::ManagedLoginBranding` for more information about the expected schema for this property.
func (o ManagedLoginBrandingOutput) Settings() pulumi.AnyOutput {
	return o.ApplyT(func(v *ManagedLoginBranding) pulumi.AnyOutput { return v.Settings }).(pulumi.AnyOutput)
}

// When true, applies the default branding style options. This option reverts to default style options that are managed by Amazon Cognito. You can modify them later in the branding designer.
//
// When you specify `true` for this option, you must also omit values for `Settings` and `Assets` in the request.
func (o ManagedLoginBrandingOutput) UseCognitoProvidedValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedLoginBranding) pulumi.BoolPtrOutput { return v.UseCognitoProvidedValues }).(pulumi.BoolPtrOutput)
}

// The user pool where the branding style is assigned.
func (o ManagedLoginBrandingOutput) UserPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedLoginBranding) pulumi.StringOutput { return v.UserPoolId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedLoginBrandingInput)(nil)).Elem(), &ManagedLoginBranding{})
	pulumi.RegisterOutputType(ManagedLoginBrandingOutput{})
}
