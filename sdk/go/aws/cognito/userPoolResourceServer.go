// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cognito

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Cognito::UserPoolResourceServer
type UserPoolResourceServer struct {
	pulumi.CustomResourceState

	// A unique resource server identifier for the resource server. The identifier can be an API friendly name like `solar-system-data` . You can also set an API URL like `https://solar-system-data-api.example.com` as your identifier.
	//
	// Amazon Cognito represents scopes in the access token in the format `$resource-server-identifier/$scope` . Longer scope-identifier strings increase the size of your access tokens.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// A friendly name for the resource server.
	Name pulumi.StringOutput `pulumi:"name"`
	// A list of scopes. Each scope is a map with keys `ScopeName` and `ScopeDescription` .
	Scopes UserPoolResourceServerResourceServerScopeTypeArrayOutput `pulumi:"scopes"`
	// The ID of the user pool where you want to create a resource server.
	UserPoolId pulumi.StringOutput `pulumi:"userPoolId"`
}

// NewUserPoolResourceServer registers a new resource with the given unique name, arguments, and options.
func NewUserPoolResourceServer(ctx *pulumi.Context,
	name string, args *UserPoolResourceServerArgs, opts ...pulumi.ResourceOption) (*UserPoolResourceServer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.UserPoolId == nil {
		return nil, errors.New("invalid value for required argument 'UserPoolId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"identifier",
		"userPoolId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserPoolResourceServer
	err := ctx.RegisterResource("aws-native:cognito:UserPoolResourceServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserPoolResourceServer gets an existing UserPoolResourceServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserPoolResourceServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserPoolResourceServerState, opts ...pulumi.ResourceOption) (*UserPoolResourceServer, error) {
	var resource UserPoolResourceServer
	err := ctx.ReadResource("aws-native:cognito:UserPoolResourceServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserPoolResourceServer resources.
type userPoolResourceServerState struct {
}

type UserPoolResourceServerState struct {
}

func (UserPoolResourceServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*userPoolResourceServerState)(nil)).Elem()
}

type userPoolResourceServerArgs struct {
	// A unique resource server identifier for the resource server. The identifier can be an API friendly name like `solar-system-data` . You can also set an API URL like `https://solar-system-data-api.example.com` as your identifier.
	//
	// Amazon Cognito represents scopes in the access token in the format `$resource-server-identifier/$scope` . Longer scope-identifier strings increase the size of your access tokens.
	Identifier string `pulumi:"identifier"`
	// A friendly name for the resource server.
	Name *string `pulumi:"name"`
	// A list of scopes. Each scope is a map with keys `ScopeName` and `ScopeDescription` .
	Scopes []UserPoolResourceServerResourceServerScopeType `pulumi:"scopes"`
	// The ID of the user pool where you want to create a resource server.
	UserPoolId string `pulumi:"userPoolId"`
}

// The set of arguments for constructing a UserPoolResourceServer resource.
type UserPoolResourceServerArgs struct {
	// A unique resource server identifier for the resource server. The identifier can be an API friendly name like `solar-system-data` . You can also set an API URL like `https://solar-system-data-api.example.com` as your identifier.
	//
	// Amazon Cognito represents scopes in the access token in the format `$resource-server-identifier/$scope` . Longer scope-identifier strings increase the size of your access tokens.
	Identifier pulumi.StringInput
	// A friendly name for the resource server.
	Name pulumi.StringPtrInput
	// A list of scopes. Each scope is a map with keys `ScopeName` and `ScopeDescription` .
	Scopes UserPoolResourceServerResourceServerScopeTypeArrayInput
	// The ID of the user pool where you want to create a resource server.
	UserPoolId pulumi.StringInput
}

func (UserPoolResourceServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userPoolResourceServerArgs)(nil)).Elem()
}

type UserPoolResourceServerInput interface {
	pulumi.Input

	ToUserPoolResourceServerOutput() UserPoolResourceServerOutput
	ToUserPoolResourceServerOutputWithContext(ctx context.Context) UserPoolResourceServerOutput
}

func (*UserPoolResourceServer) ElementType() reflect.Type {
	return reflect.TypeOf((**UserPoolResourceServer)(nil)).Elem()
}

func (i *UserPoolResourceServer) ToUserPoolResourceServerOutput() UserPoolResourceServerOutput {
	return i.ToUserPoolResourceServerOutputWithContext(context.Background())
}

func (i *UserPoolResourceServer) ToUserPoolResourceServerOutputWithContext(ctx context.Context) UserPoolResourceServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPoolResourceServerOutput)
}

type UserPoolResourceServerOutput struct{ *pulumi.OutputState }

func (UserPoolResourceServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserPoolResourceServer)(nil)).Elem()
}

func (o UserPoolResourceServerOutput) ToUserPoolResourceServerOutput() UserPoolResourceServerOutput {
	return o
}

func (o UserPoolResourceServerOutput) ToUserPoolResourceServerOutputWithContext(ctx context.Context) UserPoolResourceServerOutput {
	return o
}

// A unique resource server identifier for the resource server. The identifier can be an API friendly name like `solar-system-data` . You can also set an API URL like `https://solar-system-data-api.example.com` as your identifier.
//
// Amazon Cognito represents scopes in the access token in the format `$resource-server-identifier/$scope` . Longer scope-identifier strings increase the size of your access tokens.
func (o UserPoolResourceServerOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *UserPoolResourceServer) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// A friendly name for the resource server.
func (o UserPoolResourceServerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *UserPoolResourceServer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A list of scopes. Each scope is a map with keys `ScopeName` and `ScopeDescription` .
func (o UserPoolResourceServerOutput) Scopes() UserPoolResourceServerResourceServerScopeTypeArrayOutput {
	return o.ApplyT(func(v *UserPoolResourceServer) UserPoolResourceServerResourceServerScopeTypeArrayOutput {
		return v.Scopes
	}).(UserPoolResourceServerResourceServerScopeTypeArrayOutput)
}

// The ID of the user pool where you want to create a resource server.
func (o UserPoolResourceServerOutput) UserPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *UserPoolResourceServer) pulumi.StringOutput { return v.UserPoolId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserPoolResourceServerInput)(nil)).Elem(), &UserPoolResourceServer{})
	pulumi.RegisterOutputType(UserPoolResourceServerOutput{})
}
