// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cognito

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Cognito::UserPoolGroup
func LookupUserPoolGroup(ctx *pulumi.Context, args *LookupUserPoolGroupArgs, opts ...pulumi.InvokeOption) (*LookupUserPoolGroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupUserPoolGroupResult
	err := ctx.Invoke("aws-native:cognito:getUserPoolGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupUserPoolGroupArgs struct {
	// The name of the group. Must be unique.
	GroupName string `pulumi:"groupName"`
	// The user pool ID for the user pool.
	UserPoolId string `pulumi:"userPoolId"`
}

type LookupUserPoolGroupResult struct {
	// A string containing the description of the group.
	Description *string `pulumi:"description"`
	// A non-negative integer value that specifies the precedence of this group relative to the other groups that a user can belong to in the user pool. Zero is the highest precedence value. Groups with lower `Precedence` values take precedence over groups with higher or null `Precedence` values. If a user belongs to two or more groups, it is the group with the lowest precedence value whose role ARN is given in the user's tokens for the `cognito:roles` and `cognito:preferred_role` claims.
	//
	// Two groups can have the same `Precedence` value. If this happens, neither group takes precedence over the other. If two groups with the same `Precedence` have the same role ARN, that role is used in the `cognito:preferred_role` claim in tokens for users in each group. If the two groups have different role ARNs, the `cognito:preferred_role` claim isn't set in users' tokens.
	//
	// The default `Precedence` value is null. The maximum `Precedence` value is `2^31-1` .
	Precedence *int `pulumi:"precedence"`
	// The role Amazon Resource Name (ARN) for the group.
	RoleArn *string `pulumi:"roleArn"`
}

func LookupUserPoolGroupOutput(ctx *pulumi.Context, args LookupUserPoolGroupOutputArgs, opts ...pulumi.InvokeOption) LookupUserPoolGroupResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupUserPoolGroupResultOutput, error) {
			args := v.(LookupUserPoolGroupArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupUserPoolGroupResult
			secret, err := ctx.InvokePackageRaw("aws-native:cognito:getUserPoolGroup", args, &rv, "", opts...)
			if err != nil {
				return LookupUserPoolGroupResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupUserPoolGroupResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupUserPoolGroupResultOutput), nil
			}
			return output, nil
		}).(LookupUserPoolGroupResultOutput)
}

type LookupUserPoolGroupOutputArgs struct {
	// The name of the group. Must be unique.
	GroupName pulumi.StringInput `pulumi:"groupName"`
	// The user pool ID for the user pool.
	UserPoolId pulumi.StringInput `pulumi:"userPoolId"`
}

func (LookupUserPoolGroupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserPoolGroupArgs)(nil)).Elem()
}

type LookupUserPoolGroupResultOutput struct{ *pulumi.OutputState }

func (LookupUserPoolGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserPoolGroupResult)(nil)).Elem()
}

func (o LookupUserPoolGroupResultOutput) ToLookupUserPoolGroupResultOutput() LookupUserPoolGroupResultOutput {
	return o
}

func (o LookupUserPoolGroupResultOutput) ToLookupUserPoolGroupResultOutputWithContext(ctx context.Context) LookupUserPoolGroupResultOutput {
	return o
}

// A string containing the description of the group.
func (o LookupUserPoolGroupResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupUserPoolGroupResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// A non-negative integer value that specifies the precedence of this group relative to the other groups that a user can belong to in the user pool. Zero is the highest precedence value. Groups with lower `Precedence` values take precedence over groups with higher or null `Precedence` values. If a user belongs to two or more groups, it is the group with the lowest precedence value whose role ARN is given in the user's tokens for the `cognito:roles` and `cognito:preferred_role` claims.
//
// Two groups can have the same `Precedence` value. If this happens, neither group takes precedence over the other. If two groups with the same `Precedence` have the same role ARN, that role is used in the `cognito:preferred_role` claim in tokens for users in each group. If the two groups have different role ARNs, the `cognito:preferred_role` claim isn't set in users' tokens.
//
// The default `Precedence` value is null. The maximum `Precedence` value is `2^31-1` .
func (o LookupUserPoolGroupResultOutput) Precedence() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupUserPoolGroupResult) *int { return v.Precedence }).(pulumi.IntPtrOutput)
}

// The role Amazon Resource Name (ARN) for the group.
func (o LookupUserPoolGroupResultOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupUserPoolGroupResult) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupUserPoolGroupResultOutput{})
}
