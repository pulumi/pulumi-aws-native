// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cognito

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Cognito::UserPoolGroup
//
// Deprecated: UserPoolGroup is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
type UserPoolGroup struct {
	pulumi.CustomResourceState

	Description pulumi.StringPtrOutput  `pulumi:"description"`
	GroupName   pulumi.StringPtrOutput  `pulumi:"groupName"`
	Precedence  pulumi.Float64PtrOutput `pulumi:"precedence"`
	RoleArn     pulumi.StringPtrOutput  `pulumi:"roleArn"`
	UserPoolId  pulumi.StringOutput     `pulumi:"userPoolId"`
}

// NewUserPoolGroup registers a new resource with the given unique name, arguments, and options.
func NewUserPoolGroup(ctx *pulumi.Context,
	name string, args *UserPoolGroupArgs, opts ...pulumi.ResourceOption) (*UserPoolGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.UserPoolId == nil {
		return nil, errors.New("invalid value for required argument 'UserPoolId'")
	}
	var resource UserPoolGroup
	err := ctx.RegisterResource("aws-native:cognito:UserPoolGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserPoolGroup gets an existing UserPoolGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserPoolGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserPoolGroupState, opts ...pulumi.ResourceOption) (*UserPoolGroup, error) {
	var resource UserPoolGroup
	err := ctx.ReadResource("aws-native:cognito:UserPoolGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserPoolGroup resources.
type userPoolGroupState struct {
}

type UserPoolGroupState struct {
}

func (UserPoolGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*userPoolGroupState)(nil)).Elem()
}

type userPoolGroupArgs struct {
	Description *string  `pulumi:"description"`
	GroupName   *string  `pulumi:"groupName"`
	Precedence  *float64 `pulumi:"precedence"`
	RoleArn     *string  `pulumi:"roleArn"`
	UserPoolId  string   `pulumi:"userPoolId"`
}

// The set of arguments for constructing a UserPoolGroup resource.
type UserPoolGroupArgs struct {
	Description pulumi.StringPtrInput
	GroupName   pulumi.StringPtrInput
	Precedence  pulumi.Float64PtrInput
	RoleArn     pulumi.StringPtrInput
	UserPoolId  pulumi.StringInput
}

func (UserPoolGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userPoolGroupArgs)(nil)).Elem()
}

type UserPoolGroupInput interface {
	pulumi.Input

	ToUserPoolGroupOutput() UserPoolGroupOutput
	ToUserPoolGroupOutputWithContext(ctx context.Context) UserPoolGroupOutput
}

func (*UserPoolGroup) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPoolGroup)(nil))
}

func (i *UserPoolGroup) ToUserPoolGroupOutput() UserPoolGroupOutput {
	return i.ToUserPoolGroupOutputWithContext(context.Background())
}

func (i *UserPoolGroup) ToUserPoolGroupOutputWithContext(ctx context.Context) UserPoolGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPoolGroupOutput)
}

type UserPoolGroupOutput struct{ *pulumi.OutputState }

func (UserPoolGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPoolGroup)(nil))
}

func (o UserPoolGroupOutput) ToUserPoolGroupOutput() UserPoolGroupOutput {
	return o
}

func (o UserPoolGroupOutput) ToUserPoolGroupOutputWithContext(ctx context.Context) UserPoolGroupOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(UserPoolGroupOutput{})
}
