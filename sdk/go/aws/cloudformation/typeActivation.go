// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudformation

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Enable a resource that has been published in the CloudFormation Registry.
type TypeActivation struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the extension.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Whether to automatically update the extension in this account and region when a new minor version is published by the extension publisher. Major versions released by the publisher must be manually updated.
	AutoUpdate pulumi.BoolPtrOutput `pulumi:"autoUpdate"`
	// The Amazon Resource Name (ARN) of the IAM execution role to use to register the type. If your resource type calls AWS APIs in any of its handlers, you must create an IAM execution role that includes the necessary permissions to call those AWS APIs, and provision that execution role in your account. CloudFormation then assumes that execution role to provide your resource type with the appropriate credentials.
	ExecutionRoleArn pulumi.StringPtrOutput `pulumi:"executionRoleArn"`
	// Specifies logging configuration information for a type.
	LoggingConfig TypeActivationLoggingConfigPtrOutput `pulumi:"loggingConfig"`
	// The Major Version of the type you want to enable
	MajorVersion pulumi.StringPtrOutput `pulumi:"majorVersion"`
	// The Amazon Resource Number (ARN) assigned to the public extension upon publication
	PublicTypeArn pulumi.StringPtrOutput `pulumi:"publicTypeArn"`
	// The publisher id assigned by CloudFormation for publishing in this region.
	PublisherId pulumi.StringPtrOutput `pulumi:"publisherId"`
	// The kind of extension
	Type pulumi.StringPtrOutput `pulumi:"type"`
	// The name of the type being registered.
	//
	// We recommend that type names adhere to the following pattern: company_or_organization::service::type.
	TypeName pulumi.StringPtrOutput `pulumi:"typeName"`
	// An alias to assign to the public extension in this account and region. If you specify an alias for the extension, you must then use the alias to refer to the extension in your templates.
	TypeNameAlias pulumi.StringPtrOutput `pulumi:"typeNameAlias"`
	// Manually updates a previously-enabled type to a new major or minor version, if available. You can also use this parameter to update the value of AutoUpdateEnabled
	VersionBump pulumi.StringPtrOutput `pulumi:"versionBump"`
}

// NewTypeActivation registers a new resource with the given unique name, arguments, and options.
func NewTypeActivation(ctx *pulumi.Context,
	name string, args *TypeActivationArgs, opts ...pulumi.ResourceOption) (*TypeActivation, error) {
	if args == nil {
		args = &TypeActivationArgs{}
	}

	var resource TypeActivation
	err := ctx.RegisterResource("aws-native:cloudformation:TypeActivation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTypeActivation gets an existing TypeActivation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTypeActivation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TypeActivationState, opts ...pulumi.ResourceOption) (*TypeActivation, error) {
	var resource TypeActivation
	err := ctx.ReadResource("aws-native:cloudformation:TypeActivation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TypeActivation resources.
type typeActivationState struct {
}

type TypeActivationState struct {
}

func (TypeActivationState) ElementType() reflect.Type {
	return reflect.TypeOf((*typeActivationState)(nil)).Elem()
}

type typeActivationArgs struct {
	// Whether to automatically update the extension in this account and region when a new minor version is published by the extension publisher. Major versions released by the publisher must be manually updated.
	AutoUpdate *bool `pulumi:"autoUpdate"`
	// The Amazon Resource Name (ARN) of the IAM execution role to use to register the type. If your resource type calls AWS APIs in any of its handlers, you must create an IAM execution role that includes the necessary permissions to call those AWS APIs, and provision that execution role in your account. CloudFormation then assumes that execution role to provide your resource type with the appropriate credentials.
	ExecutionRoleArn *string `pulumi:"executionRoleArn"`
	// Specifies logging configuration information for a type.
	LoggingConfig *TypeActivationLoggingConfig `pulumi:"loggingConfig"`
	// The Major Version of the type you want to enable
	MajorVersion *string `pulumi:"majorVersion"`
	// The Amazon Resource Number (ARN) assigned to the public extension upon publication
	PublicTypeArn *string `pulumi:"publicTypeArn"`
	// The publisher id assigned by CloudFormation for publishing in this region.
	PublisherId *string `pulumi:"publisherId"`
	// The kind of extension
	Type *string `pulumi:"type"`
	// The name of the type being registered.
	//
	// We recommend that type names adhere to the following pattern: company_or_organization::service::type.
	TypeName *string `pulumi:"typeName"`
	// An alias to assign to the public extension in this account and region. If you specify an alias for the extension, you must then use the alias to refer to the extension in your templates.
	TypeNameAlias *string `pulumi:"typeNameAlias"`
	// Manually updates a previously-enabled type to a new major or minor version, if available. You can also use this parameter to update the value of AutoUpdateEnabled
	VersionBump *string `pulumi:"versionBump"`
}

// The set of arguments for constructing a TypeActivation resource.
type TypeActivationArgs struct {
	// Whether to automatically update the extension in this account and region when a new minor version is published by the extension publisher. Major versions released by the publisher must be manually updated.
	AutoUpdate pulumi.BoolPtrInput
	// The Amazon Resource Name (ARN) of the IAM execution role to use to register the type. If your resource type calls AWS APIs in any of its handlers, you must create an IAM execution role that includes the necessary permissions to call those AWS APIs, and provision that execution role in your account. CloudFormation then assumes that execution role to provide your resource type with the appropriate credentials.
	ExecutionRoleArn pulumi.StringPtrInput
	// Specifies logging configuration information for a type.
	LoggingConfig TypeActivationLoggingConfigPtrInput
	// The Major Version of the type you want to enable
	MajorVersion pulumi.StringPtrInput
	// The Amazon Resource Number (ARN) assigned to the public extension upon publication
	PublicTypeArn pulumi.StringPtrInput
	// The publisher id assigned by CloudFormation for publishing in this region.
	PublisherId pulumi.StringPtrInput
	// The kind of extension
	Type pulumi.StringPtrInput
	// The name of the type being registered.
	//
	// We recommend that type names adhere to the following pattern: company_or_organization::service::type.
	TypeName pulumi.StringPtrInput
	// An alias to assign to the public extension in this account and region. If you specify an alias for the extension, you must then use the alias to refer to the extension in your templates.
	TypeNameAlias pulumi.StringPtrInput
	// Manually updates a previously-enabled type to a new major or minor version, if available. You can also use this parameter to update the value of AutoUpdateEnabled
	VersionBump pulumi.StringPtrInput
}

func (TypeActivationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*typeActivationArgs)(nil)).Elem()
}

type TypeActivationInput interface {
	pulumi.Input

	ToTypeActivationOutput() TypeActivationOutput
	ToTypeActivationOutputWithContext(ctx context.Context) TypeActivationOutput
}

func (*TypeActivation) ElementType() reflect.Type {
	return reflect.TypeOf((*TypeActivation)(nil))
}

func (i *TypeActivation) ToTypeActivationOutput() TypeActivationOutput {
	return i.ToTypeActivationOutputWithContext(context.Background())
}

func (i *TypeActivation) ToTypeActivationOutputWithContext(ctx context.Context) TypeActivationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TypeActivationOutput)
}

type TypeActivationOutput struct{ *pulumi.OutputState }

func (TypeActivationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TypeActivation)(nil))
}

func (o TypeActivationOutput) ToTypeActivationOutput() TypeActivationOutput {
	return o
}

func (o TypeActivationOutput) ToTypeActivationOutputWithContext(ctx context.Context) TypeActivationOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(TypeActivationOutput{})
}
