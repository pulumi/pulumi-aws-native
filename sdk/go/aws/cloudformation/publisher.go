// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudformation

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudformation-publisher.html
type Publisher struct {
	pulumi.CustomResourceState

	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudformation-publisher.html#cfn-cloudformation-publisher-accepttermsandconditions
	AcceptTermsAndConditions pulumi.BoolOutput `pulumi:"acceptTermsAndConditions"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudformation-publisher.html#cfn-cloudformation-publisher-connectionarn
	ConnectionArn    pulumi.StringPtrOutput `pulumi:"connectionArn"`
	IdentityProvider pulumi.StringOutput    `pulumi:"identityProvider"`
	PublisherId      pulumi.StringOutput    `pulumi:"publisherId"`
	PublisherProfile pulumi.StringOutput    `pulumi:"publisherProfile"`
	PublisherStatus  pulumi.StringOutput    `pulumi:"publisherStatus"`
}

// NewPublisher registers a new resource with the given unique name, arguments, and options.
func NewPublisher(ctx *pulumi.Context,
	name string, args *PublisherArgs, opts ...pulumi.ResourceOption) (*Publisher, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AcceptTermsAndConditions == nil {
		return nil, errors.New("invalid value for required argument 'AcceptTermsAndConditions'")
	}
	var resource Publisher
	err := ctx.RegisterResource("aws-native:CloudFormation:Publisher", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPublisher gets an existing Publisher resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPublisher(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PublisherState, opts ...pulumi.ResourceOption) (*Publisher, error) {
	var resource Publisher
	err := ctx.ReadResource("aws-native:CloudFormation:Publisher", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Publisher resources.
type publisherState struct {
}

type PublisherState struct {
}

func (PublisherState) ElementType() reflect.Type {
	return reflect.TypeOf((*publisherState)(nil)).Elem()
}

type publisherArgs struct {
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudformation-publisher.html#cfn-cloudformation-publisher-accepttermsandconditions
	AcceptTermsAndConditions bool `pulumi:"acceptTermsAndConditions"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudformation-publisher.html#cfn-cloudformation-publisher-connectionarn
	ConnectionArn *string `pulumi:"connectionArn"`
}

// The set of arguments for constructing a Publisher resource.
type PublisherArgs struct {
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudformation-publisher.html#cfn-cloudformation-publisher-accepttermsandconditions
	AcceptTermsAndConditions pulumi.BoolInput
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudformation-publisher.html#cfn-cloudformation-publisher-connectionarn
	ConnectionArn pulumi.StringPtrInput
}

func (PublisherArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*publisherArgs)(nil)).Elem()
}

type PublisherInput interface {
	pulumi.Input

	ToPublisherOutput() PublisherOutput
	ToPublisherOutputWithContext(ctx context.Context) PublisherOutput
}

func (*Publisher) ElementType() reflect.Type {
	return reflect.TypeOf((*Publisher)(nil))
}

func (i *Publisher) ToPublisherOutput() PublisherOutput {
	return i.ToPublisherOutputWithContext(context.Background())
}

func (i *Publisher) ToPublisherOutputWithContext(ctx context.Context) PublisherOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublisherOutput)
}

type PublisherOutput struct{ *pulumi.OutputState }

func (PublisherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Publisher)(nil))
}

func (o PublisherOutput) ToPublisherOutput() PublisherOutput {
	return o
}

func (o PublisherOutput) ToPublisherOutputWithContext(ctx context.Context) PublisherOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(PublisherOutput{})
}
