// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudformation

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::CloudFormation::WaitCondition
//
// Deprecated: WaitCondition is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
type WaitCondition struct {
	pulumi.CustomResourceState

	Count   pulumi.IntPtrOutput    `pulumi:"count"`
	Data    pulumi.AnyOutput       `pulumi:"data"`
	Handle  pulumi.StringPtrOutput `pulumi:"handle"`
	Timeout pulumi.StringPtrOutput `pulumi:"timeout"`
}

// NewWaitCondition registers a new resource with the given unique name, arguments, and options.
func NewWaitCondition(ctx *pulumi.Context,
	name string, args *WaitConditionArgs, opts ...pulumi.ResourceOption) (*WaitCondition, error) {
	if args == nil {
		args = &WaitConditionArgs{}
	}

	var resource WaitCondition
	err := ctx.RegisterResource("aws-native:cloudformation:WaitCondition", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWaitCondition gets an existing WaitCondition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWaitCondition(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WaitConditionState, opts ...pulumi.ResourceOption) (*WaitCondition, error) {
	var resource WaitCondition
	err := ctx.ReadResource("aws-native:cloudformation:WaitCondition", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WaitCondition resources.
type waitConditionState struct {
}

type WaitConditionState struct {
}

func (WaitConditionState) ElementType() reflect.Type {
	return reflect.TypeOf((*waitConditionState)(nil)).Elem()
}

type waitConditionArgs struct {
	Count   *int    `pulumi:"count"`
	Handle  *string `pulumi:"handle"`
	Timeout *string `pulumi:"timeout"`
}

// The set of arguments for constructing a WaitCondition resource.
type WaitConditionArgs struct {
	Count   pulumi.IntPtrInput
	Handle  pulumi.StringPtrInput
	Timeout pulumi.StringPtrInput
}

func (WaitConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*waitConditionArgs)(nil)).Elem()
}

type WaitConditionInput interface {
	pulumi.Input

	ToWaitConditionOutput() WaitConditionOutput
	ToWaitConditionOutputWithContext(ctx context.Context) WaitConditionOutput
}

func (*WaitCondition) ElementType() reflect.Type {
	return reflect.TypeOf((*WaitCondition)(nil))
}

func (i *WaitCondition) ToWaitConditionOutput() WaitConditionOutput {
	return i.ToWaitConditionOutputWithContext(context.Background())
}

func (i *WaitCondition) ToWaitConditionOutputWithContext(ctx context.Context) WaitConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WaitConditionOutput)
}

type WaitConditionOutput struct{ *pulumi.OutputState }

func (WaitConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WaitCondition)(nil))
}

func (o WaitConditionOutput) ToWaitConditionOutput() WaitConditionOutput {
	return o
}

func (o WaitConditionOutput) ToWaitConditionOutputWithContext(ctx context.Context) WaitConditionOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WaitConditionInput)(nil)).Elem(), &WaitCondition{})
	pulumi.RegisterOutputType(WaitConditionOutput{})
}
