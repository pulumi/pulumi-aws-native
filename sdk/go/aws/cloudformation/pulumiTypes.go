// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudformation

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// Hook targets are the destination where hooks will be invoked against.
type GuardHookHookTarget struct {
	Action          GuardHookAction          `pulumi:"action"`
	InvocationPoint GuardHookInvocationPoint `pulumi:"invocationPoint"`
	TargetName      string                   `pulumi:"targetName"`
}

// S3 Source Location for the Guard files.
type GuardHookS3Location struct {
	// S3 uri of Guard files.
	Uri string `pulumi:"uri"`
	// S3 object version
	VersionId *string `pulumi:"versionId"`
}

// GuardHookS3LocationInput is an input type that accepts GuardHookS3LocationArgs and GuardHookS3LocationOutput values.
// You can construct a concrete instance of `GuardHookS3LocationInput` via:
//
//	GuardHookS3LocationArgs{...}
type GuardHookS3LocationInput interface {
	pulumi.Input

	ToGuardHookS3LocationOutput() GuardHookS3LocationOutput
	ToGuardHookS3LocationOutputWithContext(context.Context) GuardHookS3LocationOutput
}

// S3 Source Location for the Guard files.
type GuardHookS3LocationArgs struct {
	// S3 uri of Guard files.
	Uri pulumi.StringInput `pulumi:"uri"`
	// S3 object version
	VersionId pulumi.StringPtrInput `pulumi:"versionId"`
}

func (GuardHookS3LocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GuardHookS3Location)(nil)).Elem()
}

func (i GuardHookS3LocationArgs) ToGuardHookS3LocationOutput() GuardHookS3LocationOutput {
	return i.ToGuardHookS3LocationOutputWithContext(context.Background())
}

func (i GuardHookS3LocationArgs) ToGuardHookS3LocationOutputWithContext(ctx context.Context) GuardHookS3LocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GuardHookS3LocationOutput)
}

func (i GuardHookS3LocationArgs) ToGuardHookS3LocationPtrOutput() GuardHookS3LocationPtrOutput {
	return i.ToGuardHookS3LocationPtrOutputWithContext(context.Background())
}

func (i GuardHookS3LocationArgs) ToGuardHookS3LocationPtrOutputWithContext(ctx context.Context) GuardHookS3LocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GuardHookS3LocationOutput).ToGuardHookS3LocationPtrOutputWithContext(ctx)
}

// GuardHookS3LocationPtrInput is an input type that accepts GuardHookS3LocationArgs, GuardHookS3LocationPtr and GuardHookS3LocationPtrOutput values.
// You can construct a concrete instance of `GuardHookS3LocationPtrInput` via:
//
//	        GuardHookS3LocationArgs{...}
//
//	or:
//
//	        nil
type GuardHookS3LocationPtrInput interface {
	pulumi.Input

	ToGuardHookS3LocationPtrOutput() GuardHookS3LocationPtrOutput
	ToGuardHookS3LocationPtrOutputWithContext(context.Context) GuardHookS3LocationPtrOutput
}

type guardHookS3LocationPtrType GuardHookS3LocationArgs

func GuardHookS3LocationPtr(v *GuardHookS3LocationArgs) GuardHookS3LocationPtrInput {
	return (*guardHookS3LocationPtrType)(v)
}

func (*guardHookS3LocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GuardHookS3Location)(nil)).Elem()
}

func (i *guardHookS3LocationPtrType) ToGuardHookS3LocationPtrOutput() GuardHookS3LocationPtrOutput {
	return i.ToGuardHookS3LocationPtrOutputWithContext(context.Background())
}

func (i *guardHookS3LocationPtrType) ToGuardHookS3LocationPtrOutputWithContext(ctx context.Context) GuardHookS3LocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GuardHookS3LocationPtrOutput)
}

// S3 Source Location for the Guard files.
type GuardHookS3LocationOutput struct{ *pulumi.OutputState }

func (GuardHookS3LocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GuardHookS3Location)(nil)).Elem()
}

func (o GuardHookS3LocationOutput) ToGuardHookS3LocationOutput() GuardHookS3LocationOutput {
	return o
}

func (o GuardHookS3LocationOutput) ToGuardHookS3LocationOutputWithContext(ctx context.Context) GuardHookS3LocationOutput {
	return o
}

func (o GuardHookS3LocationOutput) ToGuardHookS3LocationPtrOutput() GuardHookS3LocationPtrOutput {
	return o.ToGuardHookS3LocationPtrOutputWithContext(context.Background())
}

func (o GuardHookS3LocationOutput) ToGuardHookS3LocationPtrOutputWithContext(ctx context.Context) GuardHookS3LocationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GuardHookS3Location) *GuardHookS3Location {
		return &v
	}).(GuardHookS3LocationPtrOutput)
}

// S3 uri of Guard files.
func (o GuardHookS3LocationOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v GuardHookS3Location) string { return v.Uri }).(pulumi.StringOutput)
}

// S3 object version
func (o GuardHookS3LocationOutput) VersionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GuardHookS3Location) *string { return v.VersionId }).(pulumi.StringPtrOutput)
}

type GuardHookS3LocationPtrOutput struct{ *pulumi.OutputState }

func (GuardHookS3LocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GuardHookS3Location)(nil)).Elem()
}

func (o GuardHookS3LocationPtrOutput) ToGuardHookS3LocationPtrOutput() GuardHookS3LocationPtrOutput {
	return o
}

func (o GuardHookS3LocationPtrOutput) ToGuardHookS3LocationPtrOutputWithContext(ctx context.Context) GuardHookS3LocationPtrOutput {
	return o
}

func (o GuardHookS3LocationPtrOutput) Elem() GuardHookS3LocationOutput {
	return o.ApplyT(func(v *GuardHookS3Location) GuardHookS3Location {
		if v != nil {
			return *v
		}
		var ret GuardHookS3Location
		return ret
	}).(GuardHookS3LocationOutput)
}

// S3 uri of Guard files.
func (o GuardHookS3LocationPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GuardHookS3Location) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

// S3 object version
func (o GuardHookS3LocationPtrOutput) VersionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GuardHookS3Location) *string {
		if v == nil {
			return nil
		}
		return v.VersionId
	}).(pulumi.StringPtrOutput)
}

type HookVersionLoggingConfig struct {
	// The Amazon CloudWatch log group to which CloudFormation sends error logging information when invoking the type's handlers.
	LogGroupName *string `pulumi:"logGroupName"`
	// The ARN of the role that CloudFormation should assume when sending log entries to CloudWatch logs.
	LogRoleArn *string `pulumi:"logRoleArn"`
}

// HookVersionLoggingConfigInput is an input type that accepts HookVersionLoggingConfigArgs and HookVersionLoggingConfigOutput values.
// You can construct a concrete instance of `HookVersionLoggingConfigInput` via:
//
//	HookVersionLoggingConfigArgs{...}
type HookVersionLoggingConfigInput interface {
	pulumi.Input

	ToHookVersionLoggingConfigOutput() HookVersionLoggingConfigOutput
	ToHookVersionLoggingConfigOutputWithContext(context.Context) HookVersionLoggingConfigOutput
}

type HookVersionLoggingConfigArgs struct {
	// The Amazon CloudWatch log group to which CloudFormation sends error logging information when invoking the type's handlers.
	LogGroupName pulumi.StringPtrInput `pulumi:"logGroupName"`
	// The ARN of the role that CloudFormation should assume when sending log entries to CloudWatch logs.
	LogRoleArn pulumi.StringPtrInput `pulumi:"logRoleArn"`
}

func (HookVersionLoggingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HookVersionLoggingConfig)(nil)).Elem()
}

func (i HookVersionLoggingConfigArgs) ToHookVersionLoggingConfigOutput() HookVersionLoggingConfigOutput {
	return i.ToHookVersionLoggingConfigOutputWithContext(context.Background())
}

func (i HookVersionLoggingConfigArgs) ToHookVersionLoggingConfigOutputWithContext(ctx context.Context) HookVersionLoggingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HookVersionLoggingConfigOutput)
}

func (i HookVersionLoggingConfigArgs) ToHookVersionLoggingConfigPtrOutput() HookVersionLoggingConfigPtrOutput {
	return i.ToHookVersionLoggingConfigPtrOutputWithContext(context.Background())
}

func (i HookVersionLoggingConfigArgs) ToHookVersionLoggingConfigPtrOutputWithContext(ctx context.Context) HookVersionLoggingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HookVersionLoggingConfigOutput).ToHookVersionLoggingConfigPtrOutputWithContext(ctx)
}

// HookVersionLoggingConfigPtrInput is an input type that accepts HookVersionLoggingConfigArgs, HookVersionLoggingConfigPtr and HookVersionLoggingConfigPtrOutput values.
// You can construct a concrete instance of `HookVersionLoggingConfigPtrInput` via:
//
//	        HookVersionLoggingConfigArgs{...}
//
//	or:
//
//	        nil
type HookVersionLoggingConfigPtrInput interface {
	pulumi.Input

	ToHookVersionLoggingConfigPtrOutput() HookVersionLoggingConfigPtrOutput
	ToHookVersionLoggingConfigPtrOutputWithContext(context.Context) HookVersionLoggingConfigPtrOutput
}

type hookVersionLoggingConfigPtrType HookVersionLoggingConfigArgs

func HookVersionLoggingConfigPtr(v *HookVersionLoggingConfigArgs) HookVersionLoggingConfigPtrInput {
	return (*hookVersionLoggingConfigPtrType)(v)
}

func (*hookVersionLoggingConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HookVersionLoggingConfig)(nil)).Elem()
}

func (i *hookVersionLoggingConfigPtrType) ToHookVersionLoggingConfigPtrOutput() HookVersionLoggingConfigPtrOutput {
	return i.ToHookVersionLoggingConfigPtrOutputWithContext(context.Background())
}

func (i *hookVersionLoggingConfigPtrType) ToHookVersionLoggingConfigPtrOutputWithContext(ctx context.Context) HookVersionLoggingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HookVersionLoggingConfigPtrOutput)
}

type HookVersionLoggingConfigOutput struct{ *pulumi.OutputState }

func (HookVersionLoggingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HookVersionLoggingConfig)(nil)).Elem()
}

func (o HookVersionLoggingConfigOutput) ToHookVersionLoggingConfigOutput() HookVersionLoggingConfigOutput {
	return o
}

func (o HookVersionLoggingConfigOutput) ToHookVersionLoggingConfigOutputWithContext(ctx context.Context) HookVersionLoggingConfigOutput {
	return o
}

func (o HookVersionLoggingConfigOutput) ToHookVersionLoggingConfigPtrOutput() HookVersionLoggingConfigPtrOutput {
	return o.ToHookVersionLoggingConfigPtrOutputWithContext(context.Background())
}

func (o HookVersionLoggingConfigOutput) ToHookVersionLoggingConfigPtrOutputWithContext(ctx context.Context) HookVersionLoggingConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HookVersionLoggingConfig) *HookVersionLoggingConfig {
		return &v
	}).(HookVersionLoggingConfigPtrOutput)
}

// The Amazon CloudWatch log group to which CloudFormation sends error logging information when invoking the type's handlers.
func (o HookVersionLoggingConfigOutput) LogGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HookVersionLoggingConfig) *string { return v.LogGroupName }).(pulumi.StringPtrOutput)
}

// The ARN of the role that CloudFormation should assume when sending log entries to CloudWatch logs.
func (o HookVersionLoggingConfigOutput) LogRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HookVersionLoggingConfig) *string { return v.LogRoleArn }).(pulumi.StringPtrOutput)
}

type HookVersionLoggingConfigPtrOutput struct{ *pulumi.OutputState }

func (HookVersionLoggingConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HookVersionLoggingConfig)(nil)).Elem()
}

func (o HookVersionLoggingConfigPtrOutput) ToHookVersionLoggingConfigPtrOutput() HookVersionLoggingConfigPtrOutput {
	return o
}

func (o HookVersionLoggingConfigPtrOutput) ToHookVersionLoggingConfigPtrOutputWithContext(ctx context.Context) HookVersionLoggingConfigPtrOutput {
	return o
}

func (o HookVersionLoggingConfigPtrOutput) Elem() HookVersionLoggingConfigOutput {
	return o.ApplyT(func(v *HookVersionLoggingConfig) HookVersionLoggingConfig {
		if v != nil {
			return *v
		}
		var ret HookVersionLoggingConfig
		return ret
	}).(HookVersionLoggingConfigOutput)
}

// The Amazon CloudWatch log group to which CloudFormation sends error logging information when invoking the type's handlers.
func (o HookVersionLoggingConfigPtrOutput) LogGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HookVersionLoggingConfig) *string {
		if v == nil {
			return nil
		}
		return v.LogGroupName
	}).(pulumi.StringPtrOutput)
}

// The ARN of the role that CloudFormation should assume when sending log entries to CloudWatch logs.
func (o HookVersionLoggingConfigPtrOutput) LogRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HookVersionLoggingConfig) *string {
		if v == nil {
			return nil
		}
		return v.LogRoleArn
	}).(pulumi.StringPtrOutput)
}

// Hook targets are the destination where hooks will be invoked against.
type LambdaHookHookTarget struct {
	Action          LambdaHookAction          `pulumi:"action"`
	InvocationPoint LambdaHookInvocationPoint `pulumi:"invocationPoint"`
	TargetName      string                    `pulumi:"targetName"`
}

// LambdaHookHookTargetInput is an input type that accepts LambdaHookHookTargetArgs and LambdaHookHookTargetOutput values.
// You can construct a concrete instance of `LambdaHookHookTargetInput` via:
//
//	LambdaHookHookTargetArgs{...}
type LambdaHookHookTargetInput interface {
	pulumi.Input

	ToLambdaHookHookTargetOutput() LambdaHookHookTargetOutput
	ToLambdaHookHookTargetOutputWithContext(context.Context) LambdaHookHookTargetOutput
}

// Hook targets are the destination where hooks will be invoked against.
type LambdaHookHookTargetArgs struct {
	Action          LambdaHookActionInput          `pulumi:"action"`
	InvocationPoint LambdaHookInvocationPointInput `pulumi:"invocationPoint"`
	TargetName      pulumi.StringInput             `pulumi:"targetName"`
}

func (LambdaHookHookTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LambdaHookHookTarget)(nil)).Elem()
}

func (i LambdaHookHookTargetArgs) ToLambdaHookHookTargetOutput() LambdaHookHookTargetOutput {
	return i.ToLambdaHookHookTargetOutputWithContext(context.Background())
}

func (i LambdaHookHookTargetArgs) ToLambdaHookHookTargetOutputWithContext(ctx context.Context) LambdaHookHookTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LambdaHookHookTargetOutput)
}

// LambdaHookHookTargetArrayInput is an input type that accepts LambdaHookHookTargetArray and LambdaHookHookTargetArrayOutput values.
// You can construct a concrete instance of `LambdaHookHookTargetArrayInput` via:
//
//	LambdaHookHookTargetArray{ LambdaHookHookTargetArgs{...} }
type LambdaHookHookTargetArrayInput interface {
	pulumi.Input

	ToLambdaHookHookTargetArrayOutput() LambdaHookHookTargetArrayOutput
	ToLambdaHookHookTargetArrayOutputWithContext(context.Context) LambdaHookHookTargetArrayOutput
}

type LambdaHookHookTargetArray []LambdaHookHookTargetInput

func (LambdaHookHookTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LambdaHookHookTarget)(nil)).Elem()
}

func (i LambdaHookHookTargetArray) ToLambdaHookHookTargetArrayOutput() LambdaHookHookTargetArrayOutput {
	return i.ToLambdaHookHookTargetArrayOutputWithContext(context.Background())
}

func (i LambdaHookHookTargetArray) ToLambdaHookHookTargetArrayOutputWithContext(ctx context.Context) LambdaHookHookTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LambdaHookHookTargetArrayOutput)
}

// Hook targets are the destination where hooks will be invoked against.
type LambdaHookHookTargetOutput struct{ *pulumi.OutputState }

func (LambdaHookHookTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LambdaHookHookTarget)(nil)).Elem()
}

func (o LambdaHookHookTargetOutput) ToLambdaHookHookTargetOutput() LambdaHookHookTargetOutput {
	return o
}

func (o LambdaHookHookTargetOutput) ToLambdaHookHookTargetOutputWithContext(ctx context.Context) LambdaHookHookTargetOutput {
	return o
}

func (o LambdaHookHookTargetOutput) Action() LambdaHookActionOutput {
	return o.ApplyT(func(v LambdaHookHookTarget) LambdaHookAction { return v.Action }).(LambdaHookActionOutput)
}

func (o LambdaHookHookTargetOutput) InvocationPoint() LambdaHookInvocationPointOutput {
	return o.ApplyT(func(v LambdaHookHookTarget) LambdaHookInvocationPoint { return v.InvocationPoint }).(LambdaHookInvocationPointOutput)
}

func (o LambdaHookHookTargetOutput) TargetName() pulumi.StringOutput {
	return o.ApplyT(func(v LambdaHookHookTarget) string { return v.TargetName }).(pulumi.StringOutput)
}

type LambdaHookHookTargetArrayOutput struct{ *pulumi.OutputState }

func (LambdaHookHookTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LambdaHookHookTarget)(nil)).Elem()
}

func (o LambdaHookHookTargetArrayOutput) ToLambdaHookHookTargetArrayOutput() LambdaHookHookTargetArrayOutput {
	return o
}

func (o LambdaHookHookTargetArrayOutput) ToLambdaHookHookTargetArrayOutputWithContext(ctx context.Context) LambdaHookHookTargetArrayOutput {
	return o
}

func (o LambdaHookHookTargetArrayOutput) Index(i pulumi.IntInput) LambdaHookHookTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LambdaHookHookTarget {
		return vs[0].([]LambdaHookHookTarget)[vs[1].(int)]
	}).(LambdaHookHookTargetOutput)
}

// Describes whether StackSets performs non-conflicting operations concurrently and queues conflicting operations.
type ManagedExecutionProperties struct {
	// When `true` , CloudFormation performs non-conflicting operations concurrently and queues conflicting operations. After conflicting operations finish, CloudFormation starts queued operations in request order.
	//
	// > If there are already running or queued operations, CloudFormation queues all incoming operations even if they are non-conflicting.
	// >
	// > You can't modify your StackSet's execution configuration while there are running or queued operations for that StackSet.
	//
	// When `false` (default), StackSets performs one operation at a time in request order.
	Active *bool `pulumi:"active"`
}

// ManagedExecutionPropertiesInput is an input type that accepts ManagedExecutionPropertiesArgs and ManagedExecutionPropertiesOutput values.
// You can construct a concrete instance of `ManagedExecutionPropertiesInput` via:
//
//	ManagedExecutionPropertiesArgs{...}
type ManagedExecutionPropertiesInput interface {
	pulumi.Input

	ToManagedExecutionPropertiesOutput() ManagedExecutionPropertiesOutput
	ToManagedExecutionPropertiesOutputWithContext(context.Context) ManagedExecutionPropertiesOutput
}

// Describes whether StackSets performs non-conflicting operations concurrently and queues conflicting operations.
type ManagedExecutionPropertiesArgs struct {
	// When `true` , CloudFormation performs non-conflicting operations concurrently and queues conflicting operations. After conflicting operations finish, CloudFormation starts queued operations in request order.
	//
	// > If there are already running or queued operations, CloudFormation queues all incoming operations even if they are non-conflicting.
	// >
	// > You can't modify your StackSet's execution configuration while there are running or queued operations for that StackSet.
	//
	// When `false` (default), StackSets performs one operation at a time in request order.
	Active pulumi.BoolPtrInput `pulumi:"active"`
}

func (ManagedExecutionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedExecutionProperties)(nil)).Elem()
}

func (i ManagedExecutionPropertiesArgs) ToManagedExecutionPropertiesOutput() ManagedExecutionPropertiesOutput {
	return i.ToManagedExecutionPropertiesOutputWithContext(context.Background())
}

func (i ManagedExecutionPropertiesArgs) ToManagedExecutionPropertiesOutputWithContext(ctx context.Context) ManagedExecutionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedExecutionPropertiesOutput)
}

func (i ManagedExecutionPropertiesArgs) ToManagedExecutionPropertiesPtrOutput() ManagedExecutionPropertiesPtrOutput {
	return i.ToManagedExecutionPropertiesPtrOutputWithContext(context.Background())
}

func (i ManagedExecutionPropertiesArgs) ToManagedExecutionPropertiesPtrOutputWithContext(ctx context.Context) ManagedExecutionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedExecutionPropertiesOutput).ToManagedExecutionPropertiesPtrOutputWithContext(ctx)
}

// ManagedExecutionPropertiesPtrInput is an input type that accepts ManagedExecutionPropertiesArgs, ManagedExecutionPropertiesPtr and ManagedExecutionPropertiesPtrOutput values.
// You can construct a concrete instance of `ManagedExecutionPropertiesPtrInput` via:
//
//	        ManagedExecutionPropertiesArgs{...}
//
//	or:
//
//	        nil
type ManagedExecutionPropertiesPtrInput interface {
	pulumi.Input

	ToManagedExecutionPropertiesPtrOutput() ManagedExecutionPropertiesPtrOutput
	ToManagedExecutionPropertiesPtrOutputWithContext(context.Context) ManagedExecutionPropertiesPtrOutput
}

type managedExecutionPropertiesPtrType ManagedExecutionPropertiesArgs

func ManagedExecutionPropertiesPtr(v *ManagedExecutionPropertiesArgs) ManagedExecutionPropertiesPtrInput {
	return (*managedExecutionPropertiesPtrType)(v)
}

func (*managedExecutionPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedExecutionProperties)(nil)).Elem()
}

func (i *managedExecutionPropertiesPtrType) ToManagedExecutionPropertiesPtrOutput() ManagedExecutionPropertiesPtrOutput {
	return i.ToManagedExecutionPropertiesPtrOutputWithContext(context.Background())
}

func (i *managedExecutionPropertiesPtrType) ToManagedExecutionPropertiesPtrOutputWithContext(ctx context.Context) ManagedExecutionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedExecutionPropertiesPtrOutput)
}

// Describes whether StackSets performs non-conflicting operations concurrently and queues conflicting operations.
type ManagedExecutionPropertiesOutput struct{ *pulumi.OutputState }

func (ManagedExecutionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedExecutionProperties)(nil)).Elem()
}

func (o ManagedExecutionPropertiesOutput) ToManagedExecutionPropertiesOutput() ManagedExecutionPropertiesOutput {
	return o
}

func (o ManagedExecutionPropertiesOutput) ToManagedExecutionPropertiesOutputWithContext(ctx context.Context) ManagedExecutionPropertiesOutput {
	return o
}

func (o ManagedExecutionPropertiesOutput) ToManagedExecutionPropertiesPtrOutput() ManagedExecutionPropertiesPtrOutput {
	return o.ToManagedExecutionPropertiesPtrOutputWithContext(context.Background())
}

func (o ManagedExecutionPropertiesOutput) ToManagedExecutionPropertiesPtrOutputWithContext(ctx context.Context) ManagedExecutionPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedExecutionProperties) *ManagedExecutionProperties {
		return &v
	}).(ManagedExecutionPropertiesPtrOutput)
}

// When `true` , CloudFormation performs non-conflicting operations concurrently and queues conflicting operations. After conflicting operations finish, CloudFormation starts queued operations in request order.
//
// > If there are already running or queued operations, CloudFormation queues all incoming operations even if they are non-conflicting.
// >
// > You can't modify your StackSet's execution configuration while there are running or queued operations for that StackSet.
//
// When `false` (default), StackSets performs one operation at a time in request order.
func (o ManagedExecutionPropertiesOutput) Active() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedExecutionProperties) *bool { return v.Active }).(pulumi.BoolPtrOutput)
}

type ManagedExecutionPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ManagedExecutionPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedExecutionProperties)(nil)).Elem()
}

func (o ManagedExecutionPropertiesPtrOutput) ToManagedExecutionPropertiesPtrOutput() ManagedExecutionPropertiesPtrOutput {
	return o
}

func (o ManagedExecutionPropertiesPtrOutput) ToManagedExecutionPropertiesPtrOutputWithContext(ctx context.Context) ManagedExecutionPropertiesPtrOutput {
	return o
}

func (o ManagedExecutionPropertiesPtrOutput) Elem() ManagedExecutionPropertiesOutput {
	return o.ApplyT(func(v *ManagedExecutionProperties) ManagedExecutionProperties {
		if v != nil {
			return *v
		}
		var ret ManagedExecutionProperties
		return ret
	}).(ManagedExecutionPropertiesOutput)
}

// When `true` , CloudFormation performs non-conflicting operations concurrently and queues conflicting operations. After conflicting operations finish, CloudFormation starts queued operations in request order.
//
// > If there are already running or queued operations, CloudFormation queues all incoming operations even if they are non-conflicting.
// >
// > You can't modify your StackSet's execution configuration while there are running or queued operations for that StackSet.
//
// When `false` (default), StackSets performs one operation at a time in request order.
func (o ManagedExecutionPropertiesPtrOutput) Active() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedExecutionProperties) *bool {
		if v == nil {
			return nil
		}
		return v.Active
	}).(pulumi.BoolPtrOutput)
}

// Specifies the S3 location of your input parameters.
type OptionsProperties struct {
	// Specifies the S3 location where your input parameters are located.
	InputParams *GuardHookS3Location `pulumi:"inputParams"`
}

// OptionsPropertiesInput is an input type that accepts OptionsPropertiesArgs and OptionsPropertiesOutput values.
// You can construct a concrete instance of `OptionsPropertiesInput` via:
//
//	OptionsPropertiesArgs{...}
type OptionsPropertiesInput interface {
	pulumi.Input

	ToOptionsPropertiesOutput() OptionsPropertiesOutput
	ToOptionsPropertiesOutputWithContext(context.Context) OptionsPropertiesOutput
}

// Specifies the S3 location of your input parameters.
type OptionsPropertiesArgs struct {
	// Specifies the S3 location where your input parameters are located.
	InputParams GuardHookS3LocationPtrInput `pulumi:"inputParams"`
}

func (OptionsPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OptionsProperties)(nil)).Elem()
}

func (i OptionsPropertiesArgs) ToOptionsPropertiesOutput() OptionsPropertiesOutput {
	return i.ToOptionsPropertiesOutputWithContext(context.Background())
}

func (i OptionsPropertiesArgs) ToOptionsPropertiesOutputWithContext(ctx context.Context) OptionsPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OptionsPropertiesOutput)
}

func (i OptionsPropertiesArgs) ToOptionsPropertiesPtrOutput() OptionsPropertiesPtrOutput {
	return i.ToOptionsPropertiesPtrOutputWithContext(context.Background())
}

func (i OptionsPropertiesArgs) ToOptionsPropertiesPtrOutputWithContext(ctx context.Context) OptionsPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OptionsPropertiesOutput).ToOptionsPropertiesPtrOutputWithContext(ctx)
}

// OptionsPropertiesPtrInput is an input type that accepts OptionsPropertiesArgs, OptionsPropertiesPtr and OptionsPropertiesPtrOutput values.
// You can construct a concrete instance of `OptionsPropertiesPtrInput` via:
//
//	        OptionsPropertiesArgs{...}
//
//	or:
//
//	        nil
type OptionsPropertiesPtrInput interface {
	pulumi.Input

	ToOptionsPropertiesPtrOutput() OptionsPropertiesPtrOutput
	ToOptionsPropertiesPtrOutputWithContext(context.Context) OptionsPropertiesPtrOutput
}

type optionsPropertiesPtrType OptionsPropertiesArgs

func OptionsPropertiesPtr(v *OptionsPropertiesArgs) OptionsPropertiesPtrInput {
	return (*optionsPropertiesPtrType)(v)
}

func (*optionsPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OptionsProperties)(nil)).Elem()
}

func (i *optionsPropertiesPtrType) ToOptionsPropertiesPtrOutput() OptionsPropertiesPtrOutput {
	return i.ToOptionsPropertiesPtrOutputWithContext(context.Background())
}

func (i *optionsPropertiesPtrType) ToOptionsPropertiesPtrOutputWithContext(ctx context.Context) OptionsPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OptionsPropertiesPtrOutput)
}

// Specifies the S3 location of your input parameters.
type OptionsPropertiesOutput struct{ *pulumi.OutputState }

func (OptionsPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OptionsProperties)(nil)).Elem()
}

func (o OptionsPropertiesOutput) ToOptionsPropertiesOutput() OptionsPropertiesOutput {
	return o
}

func (o OptionsPropertiesOutput) ToOptionsPropertiesOutputWithContext(ctx context.Context) OptionsPropertiesOutput {
	return o
}

func (o OptionsPropertiesOutput) ToOptionsPropertiesPtrOutput() OptionsPropertiesPtrOutput {
	return o.ToOptionsPropertiesPtrOutputWithContext(context.Background())
}

func (o OptionsPropertiesOutput) ToOptionsPropertiesPtrOutputWithContext(ctx context.Context) OptionsPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OptionsProperties) *OptionsProperties {
		return &v
	}).(OptionsPropertiesPtrOutput)
}

// Specifies the S3 location where your input parameters are located.
func (o OptionsPropertiesOutput) InputParams() GuardHookS3LocationPtrOutput {
	return o.ApplyT(func(v OptionsProperties) *GuardHookS3Location { return v.InputParams }).(GuardHookS3LocationPtrOutput)
}

type OptionsPropertiesPtrOutput struct{ *pulumi.OutputState }

func (OptionsPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OptionsProperties)(nil)).Elem()
}

func (o OptionsPropertiesPtrOutput) ToOptionsPropertiesPtrOutput() OptionsPropertiesPtrOutput {
	return o
}

func (o OptionsPropertiesPtrOutput) ToOptionsPropertiesPtrOutputWithContext(ctx context.Context) OptionsPropertiesPtrOutput {
	return o
}

func (o OptionsPropertiesPtrOutput) Elem() OptionsPropertiesOutput {
	return o.ApplyT(func(v *OptionsProperties) OptionsProperties {
		if v != nil {
			return *v
		}
		var ret OptionsProperties
		return ret
	}).(OptionsPropertiesOutput)
}

// Specifies the S3 location where your input parameters are located.
func (o OptionsPropertiesPtrOutput) InputParams() GuardHookS3LocationPtrOutput {
	return o.ApplyT(func(v *OptionsProperties) *GuardHookS3Location {
		if v == nil {
			return nil
		}
		return v.InputParams
	}).(GuardHookS3LocationPtrOutput)
}

type ResourceVersionLoggingConfig struct {
	// The Amazon CloudWatch log group to which CloudFormation sends error logging information when invoking the type's handlers.
	LogGroupName *string `pulumi:"logGroupName"`
	// The ARN of the role that CloudFormation should assume when sending log entries to CloudWatch logs.
	LogRoleArn *string `pulumi:"logRoleArn"`
}

// ResourceVersionLoggingConfigInput is an input type that accepts ResourceVersionLoggingConfigArgs and ResourceVersionLoggingConfigOutput values.
// You can construct a concrete instance of `ResourceVersionLoggingConfigInput` via:
//
//	ResourceVersionLoggingConfigArgs{...}
type ResourceVersionLoggingConfigInput interface {
	pulumi.Input

	ToResourceVersionLoggingConfigOutput() ResourceVersionLoggingConfigOutput
	ToResourceVersionLoggingConfigOutputWithContext(context.Context) ResourceVersionLoggingConfigOutput
}

type ResourceVersionLoggingConfigArgs struct {
	// The Amazon CloudWatch log group to which CloudFormation sends error logging information when invoking the type's handlers.
	LogGroupName pulumi.StringPtrInput `pulumi:"logGroupName"`
	// The ARN of the role that CloudFormation should assume when sending log entries to CloudWatch logs.
	LogRoleArn pulumi.StringPtrInput `pulumi:"logRoleArn"`
}

func (ResourceVersionLoggingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceVersionLoggingConfig)(nil)).Elem()
}

func (i ResourceVersionLoggingConfigArgs) ToResourceVersionLoggingConfigOutput() ResourceVersionLoggingConfigOutput {
	return i.ToResourceVersionLoggingConfigOutputWithContext(context.Background())
}

func (i ResourceVersionLoggingConfigArgs) ToResourceVersionLoggingConfigOutputWithContext(ctx context.Context) ResourceVersionLoggingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceVersionLoggingConfigOutput)
}

func (i ResourceVersionLoggingConfigArgs) ToResourceVersionLoggingConfigPtrOutput() ResourceVersionLoggingConfigPtrOutput {
	return i.ToResourceVersionLoggingConfigPtrOutputWithContext(context.Background())
}

func (i ResourceVersionLoggingConfigArgs) ToResourceVersionLoggingConfigPtrOutputWithContext(ctx context.Context) ResourceVersionLoggingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceVersionLoggingConfigOutput).ToResourceVersionLoggingConfigPtrOutputWithContext(ctx)
}

// ResourceVersionLoggingConfigPtrInput is an input type that accepts ResourceVersionLoggingConfigArgs, ResourceVersionLoggingConfigPtr and ResourceVersionLoggingConfigPtrOutput values.
// You can construct a concrete instance of `ResourceVersionLoggingConfigPtrInput` via:
//
//	        ResourceVersionLoggingConfigArgs{...}
//
//	or:
//
//	        nil
type ResourceVersionLoggingConfigPtrInput interface {
	pulumi.Input

	ToResourceVersionLoggingConfigPtrOutput() ResourceVersionLoggingConfigPtrOutput
	ToResourceVersionLoggingConfigPtrOutputWithContext(context.Context) ResourceVersionLoggingConfigPtrOutput
}

type resourceVersionLoggingConfigPtrType ResourceVersionLoggingConfigArgs

func ResourceVersionLoggingConfigPtr(v *ResourceVersionLoggingConfigArgs) ResourceVersionLoggingConfigPtrInput {
	return (*resourceVersionLoggingConfigPtrType)(v)
}

func (*resourceVersionLoggingConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceVersionLoggingConfig)(nil)).Elem()
}

func (i *resourceVersionLoggingConfigPtrType) ToResourceVersionLoggingConfigPtrOutput() ResourceVersionLoggingConfigPtrOutput {
	return i.ToResourceVersionLoggingConfigPtrOutputWithContext(context.Background())
}

func (i *resourceVersionLoggingConfigPtrType) ToResourceVersionLoggingConfigPtrOutputWithContext(ctx context.Context) ResourceVersionLoggingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceVersionLoggingConfigPtrOutput)
}

type ResourceVersionLoggingConfigOutput struct{ *pulumi.OutputState }

func (ResourceVersionLoggingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceVersionLoggingConfig)(nil)).Elem()
}

func (o ResourceVersionLoggingConfigOutput) ToResourceVersionLoggingConfigOutput() ResourceVersionLoggingConfigOutput {
	return o
}

func (o ResourceVersionLoggingConfigOutput) ToResourceVersionLoggingConfigOutputWithContext(ctx context.Context) ResourceVersionLoggingConfigOutput {
	return o
}

func (o ResourceVersionLoggingConfigOutput) ToResourceVersionLoggingConfigPtrOutput() ResourceVersionLoggingConfigPtrOutput {
	return o.ToResourceVersionLoggingConfigPtrOutputWithContext(context.Background())
}

func (o ResourceVersionLoggingConfigOutput) ToResourceVersionLoggingConfigPtrOutputWithContext(ctx context.Context) ResourceVersionLoggingConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceVersionLoggingConfig) *ResourceVersionLoggingConfig {
		return &v
	}).(ResourceVersionLoggingConfigPtrOutput)
}

// The Amazon CloudWatch log group to which CloudFormation sends error logging information when invoking the type's handlers.
func (o ResourceVersionLoggingConfigOutput) LogGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceVersionLoggingConfig) *string { return v.LogGroupName }).(pulumi.StringPtrOutput)
}

// The ARN of the role that CloudFormation should assume when sending log entries to CloudWatch logs.
func (o ResourceVersionLoggingConfigOutput) LogRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceVersionLoggingConfig) *string { return v.LogRoleArn }).(pulumi.StringPtrOutput)
}

type ResourceVersionLoggingConfigPtrOutput struct{ *pulumi.OutputState }

func (ResourceVersionLoggingConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceVersionLoggingConfig)(nil)).Elem()
}

func (o ResourceVersionLoggingConfigPtrOutput) ToResourceVersionLoggingConfigPtrOutput() ResourceVersionLoggingConfigPtrOutput {
	return o
}

func (o ResourceVersionLoggingConfigPtrOutput) ToResourceVersionLoggingConfigPtrOutputWithContext(ctx context.Context) ResourceVersionLoggingConfigPtrOutput {
	return o
}

func (o ResourceVersionLoggingConfigPtrOutput) Elem() ResourceVersionLoggingConfigOutput {
	return o.ApplyT(func(v *ResourceVersionLoggingConfig) ResourceVersionLoggingConfig {
		if v != nil {
			return *v
		}
		var ret ResourceVersionLoggingConfig
		return ret
	}).(ResourceVersionLoggingConfigOutput)
}

// The Amazon CloudWatch log group to which CloudFormation sends error logging information when invoking the type's handlers.
func (o ResourceVersionLoggingConfigPtrOutput) LogGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceVersionLoggingConfig) *string {
		if v == nil {
			return nil
		}
		return v.LogGroupName
	}).(pulumi.StringPtrOutput)
}

// The ARN of the role that CloudFormation should assume when sending log entries to CloudWatch logs.
func (o ResourceVersionLoggingConfigPtrOutput) LogRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceVersionLoggingConfig) *string {
		if v == nil {
			return nil
		}
		return v.LogRoleArn
	}).(pulumi.StringPtrOutput)
}

// Filters to allow hooks to target specific stack attributes
type StackFiltersProperties struct {
	// Attribute to specify the filtering behavior. ANY will make the Hook pass if one filter matches. ALL will make the Hook pass if all filters match
	FilteringCriteria LambdaHookStackFiltersPropertiesFilteringCriteria `pulumi:"filteringCriteria"`
	// List of stack names as filters
	StackNames *StackFiltersPropertiesStackNamesProperties `pulumi:"stackNames"`
	// List of stack roles that are performing the stack operations.
	StackRoles *StackFiltersPropertiesStackRolesProperties `pulumi:"stackRoles"`
}

// StackFiltersPropertiesInput is an input type that accepts StackFiltersPropertiesArgs and StackFiltersPropertiesOutput values.
// You can construct a concrete instance of `StackFiltersPropertiesInput` via:
//
//	StackFiltersPropertiesArgs{...}
type StackFiltersPropertiesInput interface {
	pulumi.Input

	ToStackFiltersPropertiesOutput() StackFiltersPropertiesOutput
	ToStackFiltersPropertiesOutputWithContext(context.Context) StackFiltersPropertiesOutput
}

// Filters to allow hooks to target specific stack attributes
type StackFiltersPropertiesArgs struct {
	// Attribute to specify the filtering behavior. ANY will make the Hook pass if one filter matches. ALL will make the Hook pass if all filters match
	FilteringCriteria LambdaHookStackFiltersPropertiesFilteringCriteriaInput `pulumi:"filteringCriteria"`
	// List of stack names as filters
	StackNames StackFiltersPropertiesStackNamesPropertiesPtrInput `pulumi:"stackNames"`
	// List of stack roles that are performing the stack operations.
	StackRoles StackFiltersPropertiesStackRolesPropertiesPtrInput `pulumi:"stackRoles"`
}

func (StackFiltersPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackFiltersProperties)(nil)).Elem()
}

func (i StackFiltersPropertiesArgs) ToStackFiltersPropertiesOutput() StackFiltersPropertiesOutput {
	return i.ToStackFiltersPropertiesOutputWithContext(context.Background())
}

func (i StackFiltersPropertiesArgs) ToStackFiltersPropertiesOutputWithContext(ctx context.Context) StackFiltersPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackFiltersPropertiesOutput)
}

func (i StackFiltersPropertiesArgs) ToStackFiltersPropertiesPtrOutput() StackFiltersPropertiesPtrOutput {
	return i.ToStackFiltersPropertiesPtrOutputWithContext(context.Background())
}

func (i StackFiltersPropertiesArgs) ToStackFiltersPropertiesPtrOutputWithContext(ctx context.Context) StackFiltersPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackFiltersPropertiesOutput).ToStackFiltersPropertiesPtrOutputWithContext(ctx)
}

// StackFiltersPropertiesPtrInput is an input type that accepts StackFiltersPropertiesArgs, StackFiltersPropertiesPtr and StackFiltersPropertiesPtrOutput values.
// You can construct a concrete instance of `StackFiltersPropertiesPtrInput` via:
//
//	        StackFiltersPropertiesArgs{...}
//
//	or:
//
//	        nil
type StackFiltersPropertiesPtrInput interface {
	pulumi.Input

	ToStackFiltersPropertiesPtrOutput() StackFiltersPropertiesPtrOutput
	ToStackFiltersPropertiesPtrOutputWithContext(context.Context) StackFiltersPropertiesPtrOutput
}

type stackFiltersPropertiesPtrType StackFiltersPropertiesArgs

func StackFiltersPropertiesPtr(v *StackFiltersPropertiesArgs) StackFiltersPropertiesPtrInput {
	return (*stackFiltersPropertiesPtrType)(v)
}

func (*stackFiltersPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StackFiltersProperties)(nil)).Elem()
}

func (i *stackFiltersPropertiesPtrType) ToStackFiltersPropertiesPtrOutput() StackFiltersPropertiesPtrOutput {
	return i.ToStackFiltersPropertiesPtrOutputWithContext(context.Background())
}

func (i *stackFiltersPropertiesPtrType) ToStackFiltersPropertiesPtrOutputWithContext(ctx context.Context) StackFiltersPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackFiltersPropertiesPtrOutput)
}

// Filters to allow hooks to target specific stack attributes
type StackFiltersPropertiesOutput struct{ *pulumi.OutputState }

func (StackFiltersPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackFiltersProperties)(nil)).Elem()
}

func (o StackFiltersPropertiesOutput) ToStackFiltersPropertiesOutput() StackFiltersPropertiesOutput {
	return o
}

func (o StackFiltersPropertiesOutput) ToStackFiltersPropertiesOutputWithContext(ctx context.Context) StackFiltersPropertiesOutput {
	return o
}

func (o StackFiltersPropertiesOutput) ToStackFiltersPropertiesPtrOutput() StackFiltersPropertiesPtrOutput {
	return o.ToStackFiltersPropertiesPtrOutputWithContext(context.Background())
}

func (o StackFiltersPropertiesOutput) ToStackFiltersPropertiesPtrOutputWithContext(ctx context.Context) StackFiltersPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StackFiltersProperties) *StackFiltersProperties {
		return &v
	}).(StackFiltersPropertiesPtrOutput)
}

// Attribute to specify the filtering behavior. ANY will make the Hook pass if one filter matches. ALL will make the Hook pass if all filters match
func (o StackFiltersPropertiesOutput) FilteringCriteria() LambdaHookStackFiltersPropertiesFilteringCriteriaOutput {
	return o.ApplyT(func(v StackFiltersProperties) LambdaHookStackFiltersPropertiesFilteringCriteria {
		return v.FilteringCriteria
	}).(LambdaHookStackFiltersPropertiesFilteringCriteriaOutput)
}

// List of stack names as filters
func (o StackFiltersPropertiesOutput) StackNames() StackFiltersPropertiesStackNamesPropertiesPtrOutput {
	return o.ApplyT(func(v StackFiltersProperties) *StackFiltersPropertiesStackNamesProperties { return v.StackNames }).(StackFiltersPropertiesStackNamesPropertiesPtrOutput)
}

// List of stack roles that are performing the stack operations.
func (o StackFiltersPropertiesOutput) StackRoles() StackFiltersPropertiesStackRolesPropertiesPtrOutput {
	return o.ApplyT(func(v StackFiltersProperties) *StackFiltersPropertiesStackRolesProperties { return v.StackRoles }).(StackFiltersPropertiesStackRolesPropertiesPtrOutput)
}

type StackFiltersPropertiesPtrOutput struct{ *pulumi.OutputState }

func (StackFiltersPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackFiltersProperties)(nil)).Elem()
}

func (o StackFiltersPropertiesPtrOutput) ToStackFiltersPropertiesPtrOutput() StackFiltersPropertiesPtrOutput {
	return o
}

func (o StackFiltersPropertiesPtrOutput) ToStackFiltersPropertiesPtrOutputWithContext(ctx context.Context) StackFiltersPropertiesPtrOutput {
	return o
}

func (o StackFiltersPropertiesPtrOutput) Elem() StackFiltersPropertiesOutput {
	return o.ApplyT(func(v *StackFiltersProperties) StackFiltersProperties {
		if v != nil {
			return *v
		}
		var ret StackFiltersProperties
		return ret
	}).(StackFiltersPropertiesOutput)
}

// Attribute to specify the filtering behavior. ANY will make the Hook pass if one filter matches. ALL will make the Hook pass if all filters match
func (o StackFiltersPropertiesPtrOutput) FilteringCriteria() LambdaHookStackFiltersPropertiesFilteringCriteriaPtrOutput {
	return o.ApplyT(func(v *StackFiltersProperties) *LambdaHookStackFiltersPropertiesFilteringCriteria {
		if v == nil {
			return nil
		}
		return &v.FilteringCriteria
	}).(LambdaHookStackFiltersPropertiesFilteringCriteriaPtrOutput)
}

// List of stack names as filters
func (o StackFiltersPropertiesPtrOutput) StackNames() StackFiltersPropertiesStackNamesPropertiesPtrOutput {
	return o.ApplyT(func(v *StackFiltersProperties) *StackFiltersPropertiesStackNamesProperties {
		if v == nil {
			return nil
		}
		return v.StackNames
	}).(StackFiltersPropertiesStackNamesPropertiesPtrOutput)
}

// List of stack roles that are performing the stack operations.
func (o StackFiltersPropertiesPtrOutput) StackRoles() StackFiltersPropertiesStackRolesPropertiesPtrOutput {
	return o.ApplyT(func(v *StackFiltersProperties) *StackFiltersPropertiesStackRolesProperties {
		if v == nil {
			return nil
		}
		return v.StackRoles
	}).(StackFiltersPropertiesStackRolesPropertiesPtrOutput)
}

// List of stack names as filters
type StackFiltersPropertiesStackNamesProperties struct {
	// List of stack names that the hook is going to be excluded from
	Exclude []string `pulumi:"exclude"`
	// List of stack names that the hook is going to target
	Include []string `pulumi:"include"`
}

// StackFiltersPropertiesStackNamesPropertiesInput is an input type that accepts StackFiltersPropertiesStackNamesPropertiesArgs and StackFiltersPropertiesStackNamesPropertiesOutput values.
// You can construct a concrete instance of `StackFiltersPropertiesStackNamesPropertiesInput` via:
//
//	StackFiltersPropertiesStackNamesPropertiesArgs{...}
type StackFiltersPropertiesStackNamesPropertiesInput interface {
	pulumi.Input

	ToStackFiltersPropertiesStackNamesPropertiesOutput() StackFiltersPropertiesStackNamesPropertiesOutput
	ToStackFiltersPropertiesStackNamesPropertiesOutputWithContext(context.Context) StackFiltersPropertiesStackNamesPropertiesOutput
}

// List of stack names as filters
type StackFiltersPropertiesStackNamesPropertiesArgs struct {
	// List of stack names that the hook is going to be excluded from
	Exclude pulumi.StringArrayInput `pulumi:"exclude"`
	// List of stack names that the hook is going to target
	Include pulumi.StringArrayInput `pulumi:"include"`
}

func (StackFiltersPropertiesStackNamesPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackFiltersPropertiesStackNamesProperties)(nil)).Elem()
}

func (i StackFiltersPropertiesStackNamesPropertiesArgs) ToStackFiltersPropertiesStackNamesPropertiesOutput() StackFiltersPropertiesStackNamesPropertiesOutput {
	return i.ToStackFiltersPropertiesStackNamesPropertiesOutputWithContext(context.Background())
}

func (i StackFiltersPropertiesStackNamesPropertiesArgs) ToStackFiltersPropertiesStackNamesPropertiesOutputWithContext(ctx context.Context) StackFiltersPropertiesStackNamesPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackFiltersPropertiesStackNamesPropertiesOutput)
}

func (i StackFiltersPropertiesStackNamesPropertiesArgs) ToStackFiltersPropertiesStackNamesPropertiesPtrOutput() StackFiltersPropertiesStackNamesPropertiesPtrOutput {
	return i.ToStackFiltersPropertiesStackNamesPropertiesPtrOutputWithContext(context.Background())
}

func (i StackFiltersPropertiesStackNamesPropertiesArgs) ToStackFiltersPropertiesStackNamesPropertiesPtrOutputWithContext(ctx context.Context) StackFiltersPropertiesStackNamesPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackFiltersPropertiesStackNamesPropertiesOutput).ToStackFiltersPropertiesStackNamesPropertiesPtrOutputWithContext(ctx)
}

// StackFiltersPropertiesStackNamesPropertiesPtrInput is an input type that accepts StackFiltersPropertiesStackNamesPropertiesArgs, StackFiltersPropertiesStackNamesPropertiesPtr and StackFiltersPropertiesStackNamesPropertiesPtrOutput values.
// You can construct a concrete instance of `StackFiltersPropertiesStackNamesPropertiesPtrInput` via:
//
//	        StackFiltersPropertiesStackNamesPropertiesArgs{...}
//
//	or:
//
//	        nil
type StackFiltersPropertiesStackNamesPropertiesPtrInput interface {
	pulumi.Input

	ToStackFiltersPropertiesStackNamesPropertiesPtrOutput() StackFiltersPropertiesStackNamesPropertiesPtrOutput
	ToStackFiltersPropertiesStackNamesPropertiesPtrOutputWithContext(context.Context) StackFiltersPropertiesStackNamesPropertiesPtrOutput
}

type stackFiltersPropertiesStackNamesPropertiesPtrType StackFiltersPropertiesStackNamesPropertiesArgs

func StackFiltersPropertiesStackNamesPropertiesPtr(v *StackFiltersPropertiesStackNamesPropertiesArgs) StackFiltersPropertiesStackNamesPropertiesPtrInput {
	return (*stackFiltersPropertiesStackNamesPropertiesPtrType)(v)
}

func (*stackFiltersPropertiesStackNamesPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StackFiltersPropertiesStackNamesProperties)(nil)).Elem()
}

func (i *stackFiltersPropertiesStackNamesPropertiesPtrType) ToStackFiltersPropertiesStackNamesPropertiesPtrOutput() StackFiltersPropertiesStackNamesPropertiesPtrOutput {
	return i.ToStackFiltersPropertiesStackNamesPropertiesPtrOutputWithContext(context.Background())
}

func (i *stackFiltersPropertiesStackNamesPropertiesPtrType) ToStackFiltersPropertiesStackNamesPropertiesPtrOutputWithContext(ctx context.Context) StackFiltersPropertiesStackNamesPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackFiltersPropertiesStackNamesPropertiesPtrOutput)
}

// List of stack names as filters
type StackFiltersPropertiesStackNamesPropertiesOutput struct{ *pulumi.OutputState }

func (StackFiltersPropertiesStackNamesPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackFiltersPropertiesStackNamesProperties)(nil)).Elem()
}

func (o StackFiltersPropertiesStackNamesPropertiesOutput) ToStackFiltersPropertiesStackNamesPropertiesOutput() StackFiltersPropertiesStackNamesPropertiesOutput {
	return o
}

func (o StackFiltersPropertiesStackNamesPropertiesOutput) ToStackFiltersPropertiesStackNamesPropertiesOutputWithContext(ctx context.Context) StackFiltersPropertiesStackNamesPropertiesOutput {
	return o
}

func (o StackFiltersPropertiesStackNamesPropertiesOutput) ToStackFiltersPropertiesStackNamesPropertiesPtrOutput() StackFiltersPropertiesStackNamesPropertiesPtrOutput {
	return o.ToStackFiltersPropertiesStackNamesPropertiesPtrOutputWithContext(context.Background())
}

func (o StackFiltersPropertiesStackNamesPropertiesOutput) ToStackFiltersPropertiesStackNamesPropertiesPtrOutputWithContext(ctx context.Context) StackFiltersPropertiesStackNamesPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StackFiltersPropertiesStackNamesProperties) *StackFiltersPropertiesStackNamesProperties {
		return &v
	}).(StackFiltersPropertiesStackNamesPropertiesPtrOutput)
}

// List of stack names that the hook is going to be excluded from
func (o StackFiltersPropertiesStackNamesPropertiesOutput) Exclude() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StackFiltersPropertiesStackNamesProperties) []string { return v.Exclude }).(pulumi.StringArrayOutput)
}

// List of stack names that the hook is going to target
func (o StackFiltersPropertiesStackNamesPropertiesOutput) Include() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StackFiltersPropertiesStackNamesProperties) []string { return v.Include }).(pulumi.StringArrayOutput)
}

type StackFiltersPropertiesStackNamesPropertiesPtrOutput struct{ *pulumi.OutputState }

func (StackFiltersPropertiesStackNamesPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackFiltersPropertiesStackNamesProperties)(nil)).Elem()
}

func (o StackFiltersPropertiesStackNamesPropertiesPtrOutput) ToStackFiltersPropertiesStackNamesPropertiesPtrOutput() StackFiltersPropertiesStackNamesPropertiesPtrOutput {
	return o
}

func (o StackFiltersPropertiesStackNamesPropertiesPtrOutput) ToStackFiltersPropertiesStackNamesPropertiesPtrOutputWithContext(ctx context.Context) StackFiltersPropertiesStackNamesPropertiesPtrOutput {
	return o
}

func (o StackFiltersPropertiesStackNamesPropertiesPtrOutput) Elem() StackFiltersPropertiesStackNamesPropertiesOutput {
	return o.ApplyT(func(v *StackFiltersPropertiesStackNamesProperties) StackFiltersPropertiesStackNamesProperties {
		if v != nil {
			return *v
		}
		var ret StackFiltersPropertiesStackNamesProperties
		return ret
	}).(StackFiltersPropertiesStackNamesPropertiesOutput)
}

// List of stack names that the hook is going to be excluded from
func (o StackFiltersPropertiesStackNamesPropertiesPtrOutput) Exclude() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *StackFiltersPropertiesStackNamesProperties) []string {
		if v == nil {
			return nil
		}
		return v.Exclude
	}).(pulumi.StringArrayOutput)
}

// List of stack names that the hook is going to target
func (o StackFiltersPropertiesStackNamesPropertiesPtrOutput) Include() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *StackFiltersPropertiesStackNamesProperties) []string {
		if v == nil {
			return nil
		}
		return v.Include
	}).(pulumi.StringArrayOutput)
}

// List of stack roles that are performing the stack operations.
type StackFiltersPropertiesStackRolesProperties struct {
	// List of stack roles that the hook is going to be excluded from
	Exclude []string `pulumi:"exclude"`
	// List of stack roles that the hook is going to target
	Include []string `pulumi:"include"`
}

// StackFiltersPropertiesStackRolesPropertiesInput is an input type that accepts StackFiltersPropertiesStackRolesPropertiesArgs and StackFiltersPropertiesStackRolesPropertiesOutput values.
// You can construct a concrete instance of `StackFiltersPropertiesStackRolesPropertiesInput` via:
//
//	StackFiltersPropertiesStackRolesPropertiesArgs{...}
type StackFiltersPropertiesStackRolesPropertiesInput interface {
	pulumi.Input

	ToStackFiltersPropertiesStackRolesPropertiesOutput() StackFiltersPropertiesStackRolesPropertiesOutput
	ToStackFiltersPropertiesStackRolesPropertiesOutputWithContext(context.Context) StackFiltersPropertiesStackRolesPropertiesOutput
}

// List of stack roles that are performing the stack operations.
type StackFiltersPropertiesStackRolesPropertiesArgs struct {
	// List of stack roles that the hook is going to be excluded from
	Exclude pulumi.StringArrayInput `pulumi:"exclude"`
	// List of stack roles that the hook is going to target
	Include pulumi.StringArrayInput `pulumi:"include"`
}

func (StackFiltersPropertiesStackRolesPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackFiltersPropertiesStackRolesProperties)(nil)).Elem()
}

func (i StackFiltersPropertiesStackRolesPropertiesArgs) ToStackFiltersPropertiesStackRolesPropertiesOutput() StackFiltersPropertiesStackRolesPropertiesOutput {
	return i.ToStackFiltersPropertiesStackRolesPropertiesOutputWithContext(context.Background())
}

func (i StackFiltersPropertiesStackRolesPropertiesArgs) ToStackFiltersPropertiesStackRolesPropertiesOutputWithContext(ctx context.Context) StackFiltersPropertiesStackRolesPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackFiltersPropertiesStackRolesPropertiesOutput)
}

func (i StackFiltersPropertiesStackRolesPropertiesArgs) ToStackFiltersPropertiesStackRolesPropertiesPtrOutput() StackFiltersPropertiesStackRolesPropertiesPtrOutput {
	return i.ToStackFiltersPropertiesStackRolesPropertiesPtrOutputWithContext(context.Background())
}

func (i StackFiltersPropertiesStackRolesPropertiesArgs) ToStackFiltersPropertiesStackRolesPropertiesPtrOutputWithContext(ctx context.Context) StackFiltersPropertiesStackRolesPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackFiltersPropertiesStackRolesPropertiesOutput).ToStackFiltersPropertiesStackRolesPropertiesPtrOutputWithContext(ctx)
}

// StackFiltersPropertiesStackRolesPropertiesPtrInput is an input type that accepts StackFiltersPropertiesStackRolesPropertiesArgs, StackFiltersPropertiesStackRolesPropertiesPtr and StackFiltersPropertiesStackRolesPropertiesPtrOutput values.
// You can construct a concrete instance of `StackFiltersPropertiesStackRolesPropertiesPtrInput` via:
//
//	        StackFiltersPropertiesStackRolesPropertiesArgs{...}
//
//	or:
//
//	        nil
type StackFiltersPropertiesStackRolesPropertiesPtrInput interface {
	pulumi.Input

	ToStackFiltersPropertiesStackRolesPropertiesPtrOutput() StackFiltersPropertiesStackRolesPropertiesPtrOutput
	ToStackFiltersPropertiesStackRolesPropertiesPtrOutputWithContext(context.Context) StackFiltersPropertiesStackRolesPropertiesPtrOutput
}

type stackFiltersPropertiesStackRolesPropertiesPtrType StackFiltersPropertiesStackRolesPropertiesArgs

func StackFiltersPropertiesStackRolesPropertiesPtr(v *StackFiltersPropertiesStackRolesPropertiesArgs) StackFiltersPropertiesStackRolesPropertiesPtrInput {
	return (*stackFiltersPropertiesStackRolesPropertiesPtrType)(v)
}

func (*stackFiltersPropertiesStackRolesPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StackFiltersPropertiesStackRolesProperties)(nil)).Elem()
}

func (i *stackFiltersPropertiesStackRolesPropertiesPtrType) ToStackFiltersPropertiesStackRolesPropertiesPtrOutput() StackFiltersPropertiesStackRolesPropertiesPtrOutput {
	return i.ToStackFiltersPropertiesStackRolesPropertiesPtrOutputWithContext(context.Background())
}

func (i *stackFiltersPropertiesStackRolesPropertiesPtrType) ToStackFiltersPropertiesStackRolesPropertiesPtrOutputWithContext(ctx context.Context) StackFiltersPropertiesStackRolesPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackFiltersPropertiesStackRolesPropertiesPtrOutput)
}

// List of stack roles that are performing the stack operations.
type StackFiltersPropertiesStackRolesPropertiesOutput struct{ *pulumi.OutputState }

func (StackFiltersPropertiesStackRolesPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackFiltersPropertiesStackRolesProperties)(nil)).Elem()
}

func (o StackFiltersPropertiesStackRolesPropertiesOutput) ToStackFiltersPropertiesStackRolesPropertiesOutput() StackFiltersPropertiesStackRolesPropertiesOutput {
	return o
}

func (o StackFiltersPropertiesStackRolesPropertiesOutput) ToStackFiltersPropertiesStackRolesPropertiesOutputWithContext(ctx context.Context) StackFiltersPropertiesStackRolesPropertiesOutput {
	return o
}

func (o StackFiltersPropertiesStackRolesPropertiesOutput) ToStackFiltersPropertiesStackRolesPropertiesPtrOutput() StackFiltersPropertiesStackRolesPropertiesPtrOutput {
	return o.ToStackFiltersPropertiesStackRolesPropertiesPtrOutputWithContext(context.Background())
}

func (o StackFiltersPropertiesStackRolesPropertiesOutput) ToStackFiltersPropertiesStackRolesPropertiesPtrOutputWithContext(ctx context.Context) StackFiltersPropertiesStackRolesPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StackFiltersPropertiesStackRolesProperties) *StackFiltersPropertiesStackRolesProperties {
		return &v
	}).(StackFiltersPropertiesStackRolesPropertiesPtrOutput)
}

// List of stack roles that the hook is going to be excluded from
func (o StackFiltersPropertiesStackRolesPropertiesOutput) Exclude() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StackFiltersPropertiesStackRolesProperties) []string { return v.Exclude }).(pulumi.StringArrayOutput)
}

// List of stack roles that the hook is going to target
func (o StackFiltersPropertiesStackRolesPropertiesOutput) Include() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StackFiltersPropertiesStackRolesProperties) []string { return v.Include }).(pulumi.StringArrayOutput)
}

type StackFiltersPropertiesStackRolesPropertiesPtrOutput struct{ *pulumi.OutputState }

func (StackFiltersPropertiesStackRolesPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackFiltersPropertiesStackRolesProperties)(nil)).Elem()
}

func (o StackFiltersPropertiesStackRolesPropertiesPtrOutput) ToStackFiltersPropertiesStackRolesPropertiesPtrOutput() StackFiltersPropertiesStackRolesPropertiesPtrOutput {
	return o
}

func (o StackFiltersPropertiesStackRolesPropertiesPtrOutput) ToStackFiltersPropertiesStackRolesPropertiesPtrOutputWithContext(ctx context.Context) StackFiltersPropertiesStackRolesPropertiesPtrOutput {
	return o
}

func (o StackFiltersPropertiesStackRolesPropertiesPtrOutput) Elem() StackFiltersPropertiesStackRolesPropertiesOutput {
	return o.ApplyT(func(v *StackFiltersPropertiesStackRolesProperties) StackFiltersPropertiesStackRolesProperties {
		if v != nil {
			return *v
		}
		var ret StackFiltersPropertiesStackRolesProperties
		return ret
	}).(StackFiltersPropertiesStackRolesPropertiesOutput)
}

// List of stack roles that the hook is going to be excluded from
func (o StackFiltersPropertiesStackRolesPropertiesPtrOutput) Exclude() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *StackFiltersPropertiesStackRolesProperties) []string {
		if v == nil {
			return nil
		}
		return v.Exclude
	}).(pulumi.StringArrayOutput)
}

// List of stack roles that the hook is going to target
func (o StackFiltersPropertiesStackRolesPropertiesPtrOutput) Include() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *StackFiltersPropertiesStackRolesProperties) []string {
		if v == nil {
			return nil
		}
		return v.Include
	}).(pulumi.StringArrayOutput)
}

type StackOutputType struct {
	// User defined description associated with the output.
	Description *string `pulumi:"description"`
	// The name of the export associated with the output.
	ExportName *string `pulumi:"exportName"`
	// The key associated with the output.
	OutputKey *string `pulumi:"outputKey"`
	// The value associated with the output.
	OutputValue *string `pulumi:"outputValue"`
}

type StackOutputTypeOutput struct{ *pulumi.OutputState }

func (StackOutputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackOutputType)(nil)).Elem()
}

func (o StackOutputTypeOutput) ToStackOutputTypeOutput() StackOutputTypeOutput {
	return o
}

func (o StackOutputTypeOutput) ToStackOutputTypeOutputWithContext(ctx context.Context) StackOutputTypeOutput {
	return o
}

// User defined description associated with the output.
func (o StackOutputTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackOutputType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the export associated with the output.
func (o StackOutputTypeOutput) ExportName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackOutputType) *string { return v.ExportName }).(pulumi.StringPtrOutput)
}

// The key associated with the output.
func (o StackOutputTypeOutput) OutputKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackOutputType) *string { return v.OutputKey }).(pulumi.StringPtrOutput)
}

// The value associated with the output.
func (o StackOutputTypeOutput) OutputValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackOutputType) *string { return v.OutputValue }).(pulumi.StringPtrOutput)
}

type StackOutputTypeArrayOutput struct{ *pulumi.OutputState }

func (StackOutputTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StackOutputType)(nil)).Elem()
}

func (o StackOutputTypeArrayOutput) ToStackOutputTypeArrayOutput() StackOutputTypeArrayOutput {
	return o
}

func (o StackOutputTypeArrayOutput) ToStackOutputTypeArrayOutputWithContext(ctx context.Context) StackOutputTypeArrayOutput {
	return o
}

func (o StackOutputTypeArrayOutput) Index(i pulumi.IntInput) StackOutputTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StackOutputType {
		return vs[0].([]StackOutputType)[vs[1].(int)]
	}).(StackOutputTypeOutput)
}

type StackSetAutoDeployment struct {
	// If set to true, StackSets automatically deploys additional stack instances to AWS Organizations accounts that are added to a target organization or organizational unit (OU) in the specified Regions. If an account is removed from a target organization or OU, StackSets deletes stack instances from the account in the specified Regions.
	Enabled *bool `pulumi:"enabled"`
	// If set to true, stack resources are retained when an account is removed from a target organization or OU. If set to false, stack resources are deleted. Specify only if Enabled is set to True.
	RetainStacksOnAccountRemoval *bool `pulumi:"retainStacksOnAccountRemoval"`
}

// StackSetAutoDeploymentInput is an input type that accepts StackSetAutoDeploymentArgs and StackSetAutoDeploymentOutput values.
// You can construct a concrete instance of `StackSetAutoDeploymentInput` via:
//
//	StackSetAutoDeploymentArgs{...}
type StackSetAutoDeploymentInput interface {
	pulumi.Input

	ToStackSetAutoDeploymentOutput() StackSetAutoDeploymentOutput
	ToStackSetAutoDeploymentOutputWithContext(context.Context) StackSetAutoDeploymentOutput
}

type StackSetAutoDeploymentArgs struct {
	// If set to true, StackSets automatically deploys additional stack instances to AWS Organizations accounts that are added to a target organization or organizational unit (OU) in the specified Regions. If an account is removed from a target organization or OU, StackSets deletes stack instances from the account in the specified Regions.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// If set to true, stack resources are retained when an account is removed from a target organization or OU. If set to false, stack resources are deleted. Specify only if Enabled is set to True.
	RetainStacksOnAccountRemoval pulumi.BoolPtrInput `pulumi:"retainStacksOnAccountRemoval"`
}

func (StackSetAutoDeploymentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackSetAutoDeployment)(nil)).Elem()
}

func (i StackSetAutoDeploymentArgs) ToStackSetAutoDeploymentOutput() StackSetAutoDeploymentOutput {
	return i.ToStackSetAutoDeploymentOutputWithContext(context.Background())
}

func (i StackSetAutoDeploymentArgs) ToStackSetAutoDeploymentOutputWithContext(ctx context.Context) StackSetAutoDeploymentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackSetAutoDeploymentOutput)
}

func (i StackSetAutoDeploymentArgs) ToStackSetAutoDeploymentPtrOutput() StackSetAutoDeploymentPtrOutput {
	return i.ToStackSetAutoDeploymentPtrOutputWithContext(context.Background())
}

func (i StackSetAutoDeploymentArgs) ToStackSetAutoDeploymentPtrOutputWithContext(ctx context.Context) StackSetAutoDeploymentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackSetAutoDeploymentOutput).ToStackSetAutoDeploymentPtrOutputWithContext(ctx)
}

// StackSetAutoDeploymentPtrInput is an input type that accepts StackSetAutoDeploymentArgs, StackSetAutoDeploymentPtr and StackSetAutoDeploymentPtrOutput values.
// You can construct a concrete instance of `StackSetAutoDeploymentPtrInput` via:
//
//	        StackSetAutoDeploymentArgs{...}
//
//	or:
//
//	        nil
type StackSetAutoDeploymentPtrInput interface {
	pulumi.Input

	ToStackSetAutoDeploymentPtrOutput() StackSetAutoDeploymentPtrOutput
	ToStackSetAutoDeploymentPtrOutputWithContext(context.Context) StackSetAutoDeploymentPtrOutput
}

type stackSetAutoDeploymentPtrType StackSetAutoDeploymentArgs

func StackSetAutoDeploymentPtr(v *StackSetAutoDeploymentArgs) StackSetAutoDeploymentPtrInput {
	return (*stackSetAutoDeploymentPtrType)(v)
}

func (*stackSetAutoDeploymentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StackSetAutoDeployment)(nil)).Elem()
}

func (i *stackSetAutoDeploymentPtrType) ToStackSetAutoDeploymentPtrOutput() StackSetAutoDeploymentPtrOutput {
	return i.ToStackSetAutoDeploymentPtrOutputWithContext(context.Background())
}

func (i *stackSetAutoDeploymentPtrType) ToStackSetAutoDeploymentPtrOutputWithContext(ctx context.Context) StackSetAutoDeploymentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackSetAutoDeploymentPtrOutput)
}

type StackSetAutoDeploymentOutput struct{ *pulumi.OutputState }

func (StackSetAutoDeploymentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackSetAutoDeployment)(nil)).Elem()
}

func (o StackSetAutoDeploymentOutput) ToStackSetAutoDeploymentOutput() StackSetAutoDeploymentOutput {
	return o
}

func (o StackSetAutoDeploymentOutput) ToStackSetAutoDeploymentOutputWithContext(ctx context.Context) StackSetAutoDeploymentOutput {
	return o
}

func (o StackSetAutoDeploymentOutput) ToStackSetAutoDeploymentPtrOutput() StackSetAutoDeploymentPtrOutput {
	return o.ToStackSetAutoDeploymentPtrOutputWithContext(context.Background())
}

func (o StackSetAutoDeploymentOutput) ToStackSetAutoDeploymentPtrOutputWithContext(ctx context.Context) StackSetAutoDeploymentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StackSetAutoDeployment) *StackSetAutoDeployment {
		return &v
	}).(StackSetAutoDeploymentPtrOutput)
}

// If set to true, StackSets automatically deploys additional stack instances to AWS Organizations accounts that are added to a target organization or organizational unit (OU) in the specified Regions. If an account is removed from a target organization or OU, StackSets deletes stack instances from the account in the specified Regions.
func (o StackSetAutoDeploymentOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StackSetAutoDeployment) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// If set to true, stack resources are retained when an account is removed from a target organization or OU. If set to false, stack resources are deleted. Specify only if Enabled is set to True.
func (o StackSetAutoDeploymentOutput) RetainStacksOnAccountRemoval() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StackSetAutoDeployment) *bool { return v.RetainStacksOnAccountRemoval }).(pulumi.BoolPtrOutput)
}

type StackSetAutoDeploymentPtrOutput struct{ *pulumi.OutputState }

func (StackSetAutoDeploymentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackSetAutoDeployment)(nil)).Elem()
}

func (o StackSetAutoDeploymentPtrOutput) ToStackSetAutoDeploymentPtrOutput() StackSetAutoDeploymentPtrOutput {
	return o
}

func (o StackSetAutoDeploymentPtrOutput) ToStackSetAutoDeploymentPtrOutputWithContext(ctx context.Context) StackSetAutoDeploymentPtrOutput {
	return o
}

func (o StackSetAutoDeploymentPtrOutput) Elem() StackSetAutoDeploymentOutput {
	return o.ApplyT(func(v *StackSetAutoDeployment) StackSetAutoDeployment {
		if v != nil {
			return *v
		}
		var ret StackSetAutoDeployment
		return ret
	}).(StackSetAutoDeploymentOutput)
}

// If set to true, StackSets automatically deploys additional stack instances to AWS Organizations accounts that are added to a target organization or organizational unit (OU) in the specified Regions. If an account is removed from a target organization or OU, StackSets deletes stack instances from the account in the specified Regions.
func (o StackSetAutoDeploymentPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StackSetAutoDeployment) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// If set to true, stack resources are retained when an account is removed from a target organization or OU. If set to false, stack resources are deleted. Specify only if Enabled is set to True.
func (o StackSetAutoDeploymentPtrOutput) RetainStacksOnAccountRemoval() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StackSetAutoDeployment) *bool {
		if v == nil {
			return nil
		}
		return v.RetainStacksOnAccountRemoval
	}).(pulumi.BoolPtrOutput)
}

// The AWS OrganizationalUnitIds or Accounts for which to create stack instances in the specified Regions.
type StackSetDeploymentTargets struct {
	// The filter type you want to apply on organizational units and accounts.
	AccountFilterType *StackSetDeploymentTargetsAccountFilterType `pulumi:"accountFilterType"`
	// AWS accounts that you want to create stack instances in the specified Region(s) for.
	Accounts []string `pulumi:"accounts"`
	// Returns the value of the AccountsUrl property.
	AccountsUrl *string `pulumi:"accountsUrl"`
	// The organization root ID or organizational unit (OU) IDs to which StackSets deploys.
	OrganizationalUnitIds []string `pulumi:"organizationalUnitIds"`
}

// StackSetDeploymentTargetsInput is an input type that accepts StackSetDeploymentTargetsArgs and StackSetDeploymentTargetsOutput values.
// You can construct a concrete instance of `StackSetDeploymentTargetsInput` via:
//
//	StackSetDeploymentTargetsArgs{...}
type StackSetDeploymentTargetsInput interface {
	pulumi.Input

	ToStackSetDeploymentTargetsOutput() StackSetDeploymentTargetsOutput
	ToStackSetDeploymentTargetsOutputWithContext(context.Context) StackSetDeploymentTargetsOutput
}

// The AWS OrganizationalUnitIds or Accounts for which to create stack instances in the specified Regions.
type StackSetDeploymentTargetsArgs struct {
	// The filter type you want to apply on organizational units and accounts.
	AccountFilterType StackSetDeploymentTargetsAccountFilterTypePtrInput `pulumi:"accountFilterType"`
	// AWS accounts that you want to create stack instances in the specified Region(s) for.
	Accounts pulumi.StringArrayInput `pulumi:"accounts"`
	// Returns the value of the AccountsUrl property.
	AccountsUrl pulumi.StringPtrInput `pulumi:"accountsUrl"`
	// The organization root ID or organizational unit (OU) IDs to which StackSets deploys.
	OrganizationalUnitIds pulumi.StringArrayInput `pulumi:"organizationalUnitIds"`
}

func (StackSetDeploymentTargetsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackSetDeploymentTargets)(nil)).Elem()
}

func (i StackSetDeploymentTargetsArgs) ToStackSetDeploymentTargetsOutput() StackSetDeploymentTargetsOutput {
	return i.ToStackSetDeploymentTargetsOutputWithContext(context.Background())
}

func (i StackSetDeploymentTargetsArgs) ToStackSetDeploymentTargetsOutputWithContext(ctx context.Context) StackSetDeploymentTargetsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackSetDeploymentTargetsOutput)
}

// The AWS OrganizationalUnitIds or Accounts for which to create stack instances in the specified Regions.
type StackSetDeploymentTargetsOutput struct{ *pulumi.OutputState }

func (StackSetDeploymentTargetsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackSetDeploymentTargets)(nil)).Elem()
}

func (o StackSetDeploymentTargetsOutput) ToStackSetDeploymentTargetsOutput() StackSetDeploymentTargetsOutput {
	return o
}

func (o StackSetDeploymentTargetsOutput) ToStackSetDeploymentTargetsOutputWithContext(ctx context.Context) StackSetDeploymentTargetsOutput {
	return o
}

// The filter type you want to apply on organizational units and accounts.
func (o StackSetDeploymentTargetsOutput) AccountFilterType() StackSetDeploymentTargetsAccountFilterTypePtrOutput {
	return o.ApplyT(func(v StackSetDeploymentTargets) *StackSetDeploymentTargetsAccountFilterType {
		return v.AccountFilterType
	}).(StackSetDeploymentTargetsAccountFilterTypePtrOutput)
}

// AWS accounts that you want to create stack instances in the specified Region(s) for.
func (o StackSetDeploymentTargetsOutput) Accounts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StackSetDeploymentTargets) []string { return v.Accounts }).(pulumi.StringArrayOutput)
}

// Returns the value of the AccountsUrl property.
func (o StackSetDeploymentTargetsOutput) AccountsUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackSetDeploymentTargets) *string { return v.AccountsUrl }).(pulumi.StringPtrOutput)
}

// The organization root ID or organizational unit (OU) IDs to which StackSets deploys.
func (o StackSetDeploymentTargetsOutput) OrganizationalUnitIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StackSetDeploymentTargets) []string { return v.OrganizationalUnitIds }).(pulumi.StringArrayOutput)
}

// The user-specified preferences for how AWS CloudFormation performs a stack set operation.
type StackSetOperationPreferences struct {
	// Specifies how the concurrency level behaves during the operation execution.
	//
	// - `STRICT_FAILURE_TOLERANCE` : This option dynamically lowers the concurrency level to ensure the number of failed accounts never exceeds the value of `FailureToleranceCount` +1. The initial actual concurrency is set to the lower of either the value of the `MaxConcurrentCount` , or the value of `FailureToleranceCount` +1. The actual concurrency is then reduced proportionally by the number of failures. This is the default behavior.
	//
	// If failure tolerance or Maximum concurrent accounts are set to percentages, the behavior is similar.
	// - `SOFT_FAILURE_TOLERANCE` : This option decouples `FailureToleranceCount` from the actual concurrency. This allows StackSet operations to run at the concurrency level set by the `MaxConcurrentCount` value, or `MaxConcurrentPercentage` , regardless of the number of failures.
	ConcurrencyMode *StackSetConcurrencyMode `pulumi:"concurrencyMode"`
	// The number of accounts per Region this operation can fail in before CloudFormation stops the operation in that Region. If the operation is stopped in a Region, CloudFormation doesn't attempt the operation in any subsequent Regions.
	//
	// Conditional: You must specify either `FailureToleranceCount` or `FailureTolerancePercentage` (but not both).
	FailureToleranceCount *int `pulumi:"failureToleranceCount"`
	// The percentage of accounts per Region this stack operation can fail in before CloudFormation stops the operation in that Region. If the operation is stopped in a Region, CloudFormation doesn't attempt the operation in any subsequent Regions.
	//
	// When calculating the number of accounts based on the specified percentage, CloudFormation rounds *down* to the next whole number.
	//
	// Conditional: You must specify either `FailureToleranceCount` or `FailureTolerancePercentage` , but not both.
	FailureTolerancePercentage *int `pulumi:"failureTolerancePercentage"`
	// The maximum number of accounts in which to perform this operation at one time. This is dependent on the value of `FailureToleranceCount` . `MaxConcurrentCount` is at most one more than the `FailureToleranceCount` .
	//
	// Note that this setting lets you specify the *maximum* for operations. For large deployments, under certain circumstances the actual number of accounts acted upon concurrently may be lower due to service throttling.
	//
	// Conditional: You must specify either `MaxConcurrentCount` or `MaxConcurrentPercentage` , but not both.
	MaxConcurrentCount *int `pulumi:"maxConcurrentCount"`
	// The maximum percentage of accounts in which to perform this operation at one time.
	//
	// When calculating the number of accounts based on the specified percentage, CloudFormation rounds down to the next whole number. This is true except in cases where rounding down would result is zero. In this case, CloudFormation sets the number as one instead.
	//
	// Note that this setting lets you specify the *maximum* for operations. For large deployments, under certain circumstances the actual number of accounts acted upon concurrently may be lower due to service throttling.
	//
	// Conditional: You must specify either `MaxConcurrentCount` or `MaxConcurrentPercentage` , but not both.
	MaxConcurrentPercentage *int `pulumi:"maxConcurrentPercentage"`
	// The concurrency type of deploying StackSets operations in Regions, could be in parallel or one Region at a time.
	RegionConcurrencyType *StackSetRegionConcurrencyType `pulumi:"regionConcurrencyType"`
	// The order of the Regions where you want to perform the stack operation.
	RegionOrder []string `pulumi:"regionOrder"`
}

// StackSetOperationPreferencesInput is an input type that accepts StackSetOperationPreferencesArgs and StackSetOperationPreferencesOutput values.
// You can construct a concrete instance of `StackSetOperationPreferencesInput` via:
//
//	StackSetOperationPreferencesArgs{...}
type StackSetOperationPreferencesInput interface {
	pulumi.Input

	ToStackSetOperationPreferencesOutput() StackSetOperationPreferencesOutput
	ToStackSetOperationPreferencesOutputWithContext(context.Context) StackSetOperationPreferencesOutput
}

// The user-specified preferences for how AWS CloudFormation performs a stack set operation.
type StackSetOperationPreferencesArgs struct {
	// Specifies how the concurrency level behaves during the operation execution.
	//
	// - `STRICT_FAILURE_TOLERANCE` : This option dynamically lowers the concurrency level to ensure the number of failed accounts never exceeds the value of `FailureToleranceCount` +1. The initial actual concurrency is set to the lower of either the value of the `MaxConcurrentCount` , or the value of `FailureToleranceCount` +1. The actual concurrency is then reduced proportionally by the number of failures. This is the default behavior.
	//
	// If failure tolerance or Maximum concurrent accounts are set to percentages, the behavior is similar.
	// - `SOFT_FAILURE_TOLERANCE` : This option decouples `FailureToleranceCount` from the actual concurrency. This allows StackSet operations to run at the concurrency level set by the `MaxConcurrentCount` value, or `MaxConcurrentPercentage` , regardless of the number of failures.
	ConcurrencyMode StackSetConcurrencyModePtrInput `pulumi:"concurrencyMode"`
	// The number of accounts per Region this operation can fail in before CloudFormation stops the operation in that Region. If the operation is stopped in a Region, CloudFormation doesn't attempt the operation in any subsequent Regions.
	//
	// Conditional: You must specify either `FailureToleranceCount` or `FailureTolerancePercentage` (but not both).
	FailureToleranceCount pulumi.IntPtrInput `pulumi:"failureToleranceCount"`
	// The percentage of accounts per Region this stack operation can fail in before CloudFormation stops the operation in that Region. If the operation is stopped in a Region, CloudFormation doesn't attempt the operation in any subsequent Regions.
	//
	// When calculating the number of accounts based on the specified percentage, CloudFormation rounds *down* to the next whole number.
	//
	// Conditional: You must specify either `FailureToleranceCount` or `FailureTolerancePercentage` , but not both.
	FailureTolerancePercentage pulumi.IntPtrInput `pulumi:"failureTolerancePercentage"`
	// The maximum number of accounts in which to perform this operation at one time. This is dependent on the value of `FailureToleranceCount` . `MaxConcurrentCount` is at most one more than the `FailureToleranceCount` .
	//
	// Note that this setting lets you specify the *maximum* for operations. For large deployments, under certain circumstances the actual number of accounts acted upon concurrently may be lower due to service throttling.
	//
	// Conditional: You must specify either `MaxConcurrentCount` or `MaxConcurrentPercentage` , but not both.
	MaxConcurrentCount pulumi.IntPtrInput `pulumi:"maxConcurrentCount"`
	// The maximum percentage of accounts in which to perform this operation at one time.
	//
	// When calculating the number of accounts based on the specified percentage, CloudFormation rounds down to the next whole number. This is true except in cases where rounding down would result is zero. In this case, CloudFormation sets the number as one instead.
	//
	// Note that this setting lets you specify the *maximum* for operations. For large deployments, under certain circumstances the actual number of accounts acted upon concurrently may be lower due to service throttling.
	//
	// Conditional: You must specify either `MaxConcurrentCount` or `MaxConcurrentPercentage` , but not both.
	MaxConcurrentPercentage pulumi.IntPtrInput `pulumi:"maxConcurrentPercentage"`
	// The concurrency type of deploying StackSets operations in Regions, could be in parallel or one Region at a time.
	RegionConcurrencyType StackSetRegionConcurrencyTypePtrInput `pulumi:"regionConcurrencyType"`
	// The order of the Regions where you want to perform the stack operation.
	RegionOrder pulumi.StringArrayInput `pulumi:"regionOrder"`
}

func (StackSetOperationPreferencesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackSetOperationPreferences)(nil)).Elem()
}

func (i StackSetOperationPreferencesArgs) ToStackSetOperationPreferencesOutput() StackSetOperationPreferencesOutput {
	return i.ToStackSetOperationPreferencesOutputWithContext(context.Background())
}

func (i StackSetOperationPreferencesArgs) ToStackSetOperationPreferencesOutputWithContext(ctx context.Context) StackSetOperationPreferencesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackSetOperationPreferencesOutput)
}

func (i StackSetOperationPreferencesArgs) ToStackSetOperationPreferencesPtrOutput() StackSetOperationPreferencesPtrOutput {
	return i.ToStackSetOperationPreferencesPtrOutputWithContext(context.Background())
}

func (i StackSetOperationPreferencesArgs) ToStackSetOperationPreferencesPtrOutputWithContext(ctx context.Context) StackSetOperationPreferencesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackSetOperationPreferencesOutput).ToStackSetOperationPreferencesPtrOutputWithContext(ctx)
}

// StackSetOperationPreferencesPtrInput is an input type that accepts StackSetOperationPreferencesArgs, StackSetOperationPreferencesPtr and StackSetOperationPreferencesPtrOutput values.
// You can construct a concrete instance of `StackSetOperationPreferencesPtrInput` via:
//
//	        StackSetOperationPreferencesArgs{...}
//
//	or:
//
//	        nil
type StackSetOperationPreferencesPtrInput interface {
	pulumi.Input

	ToStackSetOperationPreferencesPtrOutput() StackSetOperationPreferencesPtrOutput
	ToStackSetOperationPreferencesPtrOutputWithContext(context.Context) StackSetOperationPreferencesPtrOutput
}

type stackSetOperationPreferencesPtrType StackSetOperationPreferencesArgs

func StackSetOperationPreferencesPtr(v *StackSetOperationPreferencesArgs) StackSetOperationPreferencesPtrInput {
	return (*stackSetOperationPreferencesPtrType)(v)
}

func (*stackSetOperationPreferencesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StackSetOperationPreferences)(nil)).Elem()
}

func (i *stackSetOperationPreferencesPtrType) ToStackSetOperationPreferencesPtrOutput() StackSetOperationPreferencesPtrOutput {
	return i.ToStackSetOperationPreferencesPtrOutputWithContext(context.Background())
}

func (i *stackSetOperationPreferencesPtrType) ToStackSetOperationPreferencesPtrOutputWithContext(ctx context.Context) StackSetOperationPreferencesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackSetOperationPreferencesPtrOutput)
}

// The user-specified preferences for how AWS CloudFormation performs a stack set operation.
type StackSetOperationPreferencesOutput struct{ *pulumi.OutputState }

func (StackSetOperationPreferencesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackSetOperationPreferences)(nil)).Elem()
}

func (o StackSetOperationPreferencesOutput) ToStackSetOperationPreferencesOutput() StackSetOperationPreferencesOutput {
	return o
}

func (o StackSetOperationPreferencesOutput) ToStackSetOperationPreferencesOutputWithContext(ctx context.Context) StackSetOperationPreferencesOutput {
	return o
}

func (o StackSetOperationPreferencesOutput) ToStackSetOperationPreferencesPtrOutput() StackSetOperationPreferencesPtrOutput {
	return o.ToStackSetOperationPreferencesPtrOutputWithContext(context.Background())
}

func (o StackSetOperationPreferencesOutput) ToStackSetOperationPreferencesPtrOutputWithContext(ctx context.Context) StackSetOperationPreferencesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StackSetOperationPreferences) *StackSetOperationPreferences {
		return &v
	}).(StackSetOperationPreferencesPtrOutput)
}

// Specifies how the concurrency level behaves during the operation execution.
//
// - `STRICT_FAILURE_TOLERANCE` : This option dynamically lowers the concurrency level to ensure the number of failed accounts never exceeds the value of `FailureToleranceCount` +1. The initial actual concurrency is set to the lower of either the value of the `MaxConcurrentCount` , or the value of `FailureToleranceCount` +1. The actual concurrency is then reduced proportionally by the number of failures. This is the default behavior.
//
// If failure tolerance or Maximum concurrent accounts are set to percentages, the behavior is similar.
// - `SOFT_FAILURE_TOLERANCE` : This option decouples `FailureToleranceCount` from the actual concurrency. This allows StackSet operations to run at the concurrency level set by the `MaxConcurrentCount` value, or `MaxConcurrentPercentage` , regardless of the number of failures.
func (o StackSetOperationPreferencesOutput) ConcurrencyMode() StackSetConcurrencyModePtrOutput {
	return o.ApplyT(func(v StackSetOperationPreferences) *StackSetConcurrencyMode { return v.ConcurrencyMode }).(StackSetConcurrencyModePtrOutput)
}

// The number of accounts per Region this operation can fail in before CloudFormation stops the operation in that Region. If the operation is stopped in a Region, CloudFormation doesn't attempt the operation in any subsequent Regions.
//
// Conditional: You must specify either `FailureToleranceCount` or `FailureTolerancePercentage` (but not both).
func (o StackSetOperationPreferencesOutput) FailureToleranceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StackSetOperationPreferences) *int { return v.FailureToleranceCount }).(pulumi.IntPtrOutput)
}

// The percentage of accounts per Region this stack operation can fail in before CloudFormation stops the operation in that Region. If the operation is stopped in a Region, CloudFormation doesn't attempt the operation in any subsequent Regions.
//
// When calculating the number of accounts based on the specified percentage, CloudFormation rounds *down* to the next whole number.
//
// Conditional: You must specify either `FailureToleranceCount` or `FailureTolerancePercentage` , but not both.
func (o StackSetOperationPreferencesOutput) FailureTolerancePercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StackSetOperationPreferences) *int { return v.FailureTolerancePercentage }).(pulumi.IntPtrOutput)
}

// The maximum number of accounts in which to perform this operation at one time. This is dependent on the value of `FailureToleranceCount` . `MaxConcurrentCount` is at most one more than the `FailureToleranceCount` .
//
// Note that this setting lets you specify the *maximum* for operations. For large deployments, under certain circumstances the actual number of accounts acted upon concurrently may be lower due to service throttling.
//
// Conditional: You must specify either `MaxConcurrentCount` or `MaxConcurrentPercentage` , but not both.
func (o StackSetOperationPreferencesOutput) MaxConcurrentCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StackSetOperationPreferences) *int { return v.MaxConcurrentCount }).(pulumi.IntPtrOutput)
}

// The maximum percentage of accounts in which to perform this operation at one time.
//
// When calculating the number of accounts based on the specified percentage, CloudFormation rounds down to the next whole number. This is true except in cases where rounding down would result is zero. In this case, CloudFormation sets the number as one instead.
//
// Note that this setting lets you specify the *maximum* for operations. For large deployments, under certain circumstances the actual number of accounts acted upon concurrently may be lower due to service throttling.
//
// Conditional: You must specify either `MaxConcurrentCount` or `MaxConcurrentPercentage` , but not both.
func (o StackSetOperationPreferencesOutput) MaxConcurrentPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StackSetOperationPreferences) *int { return v.MaxConcurrentPercentage }).(pulumi.IntPtrOutput)
}

// The concurrency type of deploying StackSets operations in Regions, could be in parallel or one Region at a time.
func (o StackSetOperationPreferencesOutput) RegionConcurrencyType() StackSetRegionConcurrencyTypePtrOutput {
	return o.ApplyT(func(v StackSetOperationPreferences) *StackSetRegionConcurrencyType { return v.RegionConcurrencyType }).(StackSetRegionConcurrencyTypePtrOutput)
}

// The order of the Regions where you want to perform the stack operation.
func (o StackSetOperationPreferencesOutput) RegionOrder() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StackSetOperationPreferences) []string { return v.RegionOrder }).(pulumi.StringArrayOutput)
}

type StackSetOperationPreferencesPtrOutput struct{ *pulumi.OutputState }

func (StackSetOperationPreferencesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackSetOperationPreferences)(nil)).Elem()
}

func (o StackSetOperationPreferencesPtrOutput) ToStackSetOperationPreferencesPtrOutput() StackSetOperationPreferencesPtrOutput {
	return o
}

func (o StackSetOperationPreferencesPtrOutput) ToStackSetOperationPreferencesPtrOutputWithContext(ctx context.Context) StackSetOperationPreferencesPtrOutput {
	return o
}

func (o StackSetOperationPreferencesPtrOutput) Elem() StackSetOperationPreferencesOutput {
	return o.ApplyT(func(v *StackSetOperationPreferences) StackSetOperationPreferences {
		if v != nil {
			return *v
		}
		var ret StackSetOperationPreferences
		return ret
	}).(StackSetOperationPreferencesOutput)
}

// Specifies how the concurrency level behaves during the operation execution.
//
// - `STRICT_FAILURE_TOLERANCE` : This option dynamically lowers the concurrency level to ensure the number of failed accounts never exceeds the value of `FailureToleranceCount` +1. The initial actual concurrency is set to the lower of either the value of the `MaxConcurrentCount` , or the value of `FailureToleranceCount` +1. The actual concurrency is then reduced proportionally by the number of failures. This is the default behavior.
//
// If failure tolerance or Maximum concurrent accounts are set to percentages, the behavior is similar.
// - `SOFT_FAILURE_TOLERANCE` : This option decouples `FailureToleranceCount` from the actual concurrency. This allows StackSet operations to run at the concurrency level set by the `MaxConcurrentCount` value, or `MaxConcurrentPercentage` , regardless of the number of failures.
func (o StackSetOperationPreferencesPtrOutput) ConcurrencyMode() StackSetConcurrencyModePtrOutput {
	return o.ApplyT(func(v *StackSetOperationPreferences) *StackSetConcurrencyMode {
		if v == nil {
			return nil
		}
		return v.ConcurrencyMode
	}).(StackSetConcurrencyModePtrOutput)
}

// The number of accounts per Region this operation can fail in before CloudFormation stops the operation in that Region. If the operation is stopped in a Region, CloudFormation doesn't attempt the operation in any subsequent Regions.
//
// Conditional: You must specify either `FailureToleranceCount` or `FailureTolerancePercentage` (but not both).
func (o StackSetOperationPreferencesPtrOutput) FailureToleranceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StackSetOperationPreferences) *int {
		if v == nil {
			return nil
		}
		return v.FailureToleranceCount
	}).(pulumi.IntPtrOutput)
}

// The percentage of accounts per Region this stack operation can fail in before CloudFormation stops the operation in that Region. If the operation is stopped in a Region, CloudFormation doesn't attempt the operation in any subsequent Regions.
//
// When calculating the number of accounts based on the specified percentage, CloudFormation rounds *down* to the next whole number.
//
// Conditional: You must specify either `FailureToleranceCount` or `FailureTolerancePercentage` , but not both.
func (o StackSetOperationPreferencesPtrOutput) FailureTolerancePercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StackSetOperationPreferences) *int {
		if v == nil {
			return nil
		}
		return v.FailureTolerancePercentage
	}).(pulumi.IntPtrOutput)
}

// The maximum number of accounts in which to perform this operation at one time. This is dependent on the value of `FailureToleranceCount` . `MaxConcurrentCount` is at most one more than the `FailureToleranceCount` .
//
// Note that this setting lets you specify the *maximum* for operations. For large deployments, under certain circumstances the actual number of accounts acted upon concurrently may be lower due to service throttling.
//
// Conditional: You must specify either `MaxConcurrentCount` or `MaxConcurrentPercentage` , but not both.
func (o StackSetOperationPreferencesPtrOutput) MaxConcurrentCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StackSetOperationPreferences) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentCount
	}).(pulumi.IntPtrOutput)
}

// The maximum percentage of accounts in which to perform this operation at one time.
//
// When calculating the number of accounts based on the specified percentage, CloudFormation rounds down to the next whole number. This is true except in cases where rounding down would result is zero. In this case, CloudFormation sets the number as one instead.
//
// Note that this setting lets you specify the *maximum* for operations. For large deployments, under certain circumstances the actual number of accounts acted upon concurrently may be lower due to service throttling.
//
// Conditional: You must specify either `MaxConcurrentCount` or `MaxConcurrentPercentage` , but not both.
func (o StackSetOperationPreferencesPtrOutput) MaxConcurrentPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StackSetOperationPreferences) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentPercentage
	}).(pulumi.IntPtrOutput)
}

// The concurrency type of deploying StackSets operations in Regions, could be in parallel or one Region at a time.
func (o StackSetOperationPreferencesPtrOutput) RegionConcurrencyType() StackSetRegionConcurrencyTypePtrOutput {
	return o.ApplyT(func(v *StackSetOperationPreferences) *StackSetRegionConcurrencyType {
		if v == nil {
			return nil
		}
		return v.RegionConcurrencyType
	}).(StackSetRegionConcurrencyTypePtrOutput)
}

// The order of the Regions where you want to perform the stack operation.
func (o StackSetOperationPreferencesPtrOutput) RegionOrder() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *StackSetOperationPreferences) []string {
		if v == nil {
			return nil
		}
		return v.RegionOrder
	}).(pulumi.StringArrayOutput)
}

type StackSetParameter struct {
	// The key associated with the parameter. If you don't specify a key and value for a particular parameter, AWS CloudFormation uses the default value that is specified in your template.
	ParameterKey string `pulumi:"parameterKey"`
	// The input value associated with the parameter.
	ParameterValue string `pulumi:"parameterValue"`
}

// StackSetParameterInput is an input type that accepts StackSetParameterArgs and StackSetParameterOutput values.
// You can construct a concrete instance of `StackSetParameterInput` via:
//
//	StackSetParameterArgs{...}
type StackSetParameterInput interface {
	pulumi.Input

	ToStackSetParameterOutput() StackSetParameterOutput
	ToStackSetParameterOutputWithContext(context.Context) StackSetParameterOutput
}

type StackSetParameterArgs struct {
	// The key associated with the parameter. If you don't specify a key and value for a particular parameter, AWS CloudFormation uses the default value that is specified in your template.
	ParameterKey pulumi.StringInput `pulumi:"parameterKey"`
	// The input value associated with the parameter.
	ParameterValue pulumi.StringInput `pulumi:"parameterValue"`
}

func (StackSetParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackSetParameter)(nil)).Elem()
}

func (i StackSetParameterArgs) ToStackSetParameterOutput() StackSetParameterOutput {
	return i.ToStackSetParameterOutputWithContext(context.Background())
}

func (i StackSetParameterArgs) ToStackSetParameterOutputWithContext(ctx context.Context) StackSetParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackSetParameterOutput)
}

// StackSetParameterArrayInput is an input type that accepts StackSetParameterArray and StackSetParameterArrayOutput values.
// You can construct a concrete instance of `StackSetParameterArrayInput` via:
//
//	StackSetParameterArray{ StackSetParameterArgs{...} }
type StackSetParameterArrayInput interface {
	pulumi.Input

	ToStackSetParameterArrayOutput() StackSetParameterArrayOutput
	ToStackSetParameterArrayOutputWithContext(context.Context) StackSetParameterArrayOutput
}

type StackSetParameterArray []StackSetParameterInput

func (StackSetParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StackSetParameter)(nil)).Elem()
}

func (i StackSetParameterArray) ToStackSetParameterArrayOutput() StackSetParameterArrayOutput {
	return i.ToStackSetParameterArrayOutputWithContext(context.Background())
}

func (i StackSetParameterArray) ToStackSetParameterArrayOutputWithContext(ctx context.Context) StackSetParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackSetParameterArrayOutput)
}

type StackSetParameterOutput struct{ *pulumi.OutputState }

func (StackSetParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackSetParameter)(nil)).Elem()
}

func (o StackSetParameterOutput) ToStackSetParameterOutput() StackSetParameterOutput {
	return o
}

func (o StackSetParameterOutput) ToStackSetParameterOutputWithContext(ctx context.Context) StackSetParameterOutput {
	return o
}

// The key associated with the parameter. If you don't specify a key and value for a particular parameter, AWS CloudFormation uses the default value that is specified in your template.
func (o StackSetParameterOutput) ParameterKey() pulumi.StringOutput {
	return o.ApplyT(func(v StackSetParameter) string { return v.ParameterKey }).(pulumi.StringOutput)
}

// The input value associated with the parameter.
func (o StackSetParameterOutput) ParameterValue() pulumi.StringOutput {
	return o.ApplyT(func(v StackSetParameter) string { return v.ParameterValue }).(pulumi.StringOutput)
}

type StackSetParameterArrayOutput struct{ *pulumi.OutputState }

func (StackSetParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StackSetParameter)(nil)).Elem()
}

func (o StackSetParameterArrayOutput) ToStackSetParameterArrayOutput() StackSetParameterArrayOutput {
	return o
}

func (o StackSetParameterArrayOutput) ToStackSetParameterArrayOutputWithContext(ctx context.Context) StackSetParameterArrayOutput {
	return o
}

func (o StackSetParameterArrayOutput) Index(i pulumi.IntInput) StackSetParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StackSetParameter {
		return vs[0].([]StackSetParameter)[vs[1].(int)]
	}).(StackSetParameterOutput)
}

// Stack instances in some specific accounts and Regions.
type StackSetStackInstances struct {
	// The AWS Organizations accounts or AWS accounts to deploy stacks to in the specified Regions.
	DeploymentTargets StackSetDeploymentTargets `pulumi:"deploymentTargets"`
	// A list of stack set parameters whose values you want to override in the selected stack instances.
	ParameterOverrides []StackSetParameter `pulumi:"parameterOverrides"`
	// The names of one or more Regions where you want to create stack instances using the specified AWS account(s).
	Regions []string `pulumi:"regions"`
}

// StackSetStackInstancesInput is an input type that accepts StackSetStackInstancesArgs and StackSetStackInstancesOutput values.
// You can construct a concrete instance of `StackSetStackInstancesInput` via:
//
//	StackSetStackInstancesArgs{...}
type StackSetStackInstancesInput interface {
	pulumi.Input

	ToStackSetStackInstancesOutput() StackSetStackInstancesOutput
	ToStackSetStackInstancesOutputWithContext(context.Context) StackSetStackInstancesOutput
}

// Stack instances in some specific accounts and Regions.
type StackSetStackInstancesArgs struct {
	// The AWS Organizations accounts or AWS accounts to deploy stacks to in the specified Regions.
	DeploymentTargets StackSetDeploymentTargetsInput `pulumi:"deploymentTargets"`
	// A list of stack set parameters whose values you want to override in the selected stack instances.
	ParameterOverrides StackSetParameterArrayInput `pulumi:"parameterOverrides"`
	// The names of one or more Regions where you want to create stack instances using the specified AWS account(s).
	Regions pulumi.StringArrayInput `pulumi:"regions"`
}

func (StackSetStackInstancesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackSetStackInstances)(nil)).Elem()
}

func (i StackSetStackInstancesArgs) ToStackSetStackInstancesOutput() StackSetStackInstancesOutput {
	return i.ToStackSetStackInstancesOutputWithContext(context.Background())
}

func (i StackSetStackInstancesArgs) ToStackSetStackInstancesOutputWithContext(ctx context.Context) StackSetStackInstancesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackSetStackInstancesOutput)
}

// StackSetStackInstancesArrayInput is an input type that accepts StackSetStackInstancesArray and StackSetStackInstancesArrayOutput values.
// You can construct a concrete instance of `StackSetStackInstancesArrayInput` via:
//
//	StackSetStackInstancesArray{ StackSetStackInstancesArgs{...} }
type StackSetStackInstancesArrayInput interface {
	pulumi.Input

	ToStackSetStackInstancesArrayOutput() StackSetStackInstancesArrayOutput
	ToStackSetStackInstancesArrayOutputWithContext(context.Context) StackSetStackInstancesArrayOutput
}

type StackSetStackInstancesArray []StackSetStackInstancesInput

func (StackSetStackInstancesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StackSetStackInstances)(nil)).Elem()
}

func (i StackSetStackInstancesArray) ToStackSetStackInstancesArrayOutput() StackSetStackInstancesArrayOutput {
	return i.ToStackSetStackInstancesArrayOutputWithContext(context.Background())
}

func (i StackSetStackInstancesArray) ToStackSetStackInstancesArrayOutputWithContext(ctx context.Context) StackSetStackInstancesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackSetStackInstancesArrayOutput)
}

// Stack instances in some specific accounts and Regions.
type StackSetStackInstancesOutput struct{ *pulumi.OutputState }

func (StackSetStackInstancesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackSetStackInstances)(nil)).Elem()
}

func (o StackSetStackInstancesOutput) ToStackSetStackInstancesOutput() StackSetStackInstancesOutput {
	return o
}

func (o StackSetStackInstancesOutput) ToStackSetStackInstancesOutputWithContext(ctx context.Context) StackSetStackInstancesOutput {
	return o
}

// The AWS Organizations accounts or AWS accounts to deploy stacks to in the specified Regions.
func (o StackSetStackInstancesOutput) DeploymentTargets() StackSetDeploymentTargetsOutput {
	return o.ApplyT(func(v StackSetStackInstances) StackSetDeploymentTargets { return v.DeploymentTargets }).(StackSetDeploymentTargetsOutput)
}

// A list of stack set parameters whose values you want to override in the selected stack instances.
func (o StackSetStackInstancesOutput) ParameterOverrides() StackSetParameterArrayOutput {
	return o.ApplyT(func(v StackSetStackInstances) []StackSetParameter { return v.ParameterOverrides }).(StackSetParameterArrayOutput)
}

// The names of one or more Regions where you want to create stack instances using the specified AWS account(s).
func (o StackSetStackInstancesOutput) Regions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StackSetStackInstances) []string { return v.Regions }).(pulumi.StringArrayOutput)
}

type StackSetStackInstancesArrayOutput struct{ *pulumi.OutputState }

func (StackSetStackInstancesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StackSetStackInstances)(nil)).Elem()
}

func (o StackSetStackInstancesArrayOutput) ToStackSetStackInstancesArrayOutput() StackSetStackInstancesArrayOutput {
	return o
}

func (o StackSetStackInstancesArrayOutput) ToStackSetStackInstancesArrayOutputWithContext(ctx context.Context) StackSetStackInstancesArrayOutput {
	return o
}

func (o StackSetStackInstancesArrayOutput) Index(i pulumi.IntInput) StackSetStackInstancesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StackSetStackInstances {
		return vs[0].([]StackSetStackInstances)[vs[1].(int)]
	}).(StackSetStackInstancesOutput)
}

// Tag type enables you to specify a key-value pair that can be used to store information about an AWS CloudFormation StackSet.
type StackSetTag struct {
	// A string used to identify this tag. You can specify a maximum of 127 characters for a tag key.
	Key string `pulumi:"key"`
	// A string containing the value for this tag. You can specify a maximum of 256 characters for a tag value.
	Value string `pulumi:"value"`
}

type StackTag struct {
	// A string used to identify this tag. You can specify a maximum of 128 characters for a tag key. Tags owned by AWS have the reserved prefix: `aws:` .
	Key string `pulumi:"key"`
	// A string that contains the value for this tag. You can specify a maximum of 256 characters for a tag value.
	Value string `pulumi:"value"`
}

// Attribute to specify which targets should invoke the hook
type TargetFilters0Properties struct {
	// List of actions that the hook is going to target
	Actions []LambdaHookAction `pulumi:"actions"`
	// List of invocation points that the hook is going to target
	InvocationPoints []LambdaHookInvocationPoint `pulumi:"invocationPoints"`
	// List of type names that the hook is going to target
	TargetNames []string `pulumi:"targetNames"`
}

// TargetFilters0PropertiesInput is an input type that accepts TargetFilters0PropertiesArgs and TargetFilters0PropertiesOutput values.
// You can construct a concrete instance of `TargetFilters0PropertiesInput` via:
//
//	TargetFilters0PropertiesArgs{...}
type TargetFilters0PropertiesInput interface {
	pulumi.Input

	ToTargetFilters0PropertiesOutput() TargetFilters0PropertiesOutput
	ToTargetFilters0PropertiesOutputWithContext(context.Context) TargetFilters0PropertiesOutput
}

// Attribute to specify which targets should invoke the hook
type TargetFilters0PropertiesArgs struct {
	// List of actions that the hook is going to target
	Actions LambdaHookActionArrayInput `pulumi:"actions"`
	// List of invocation points that the hook is going to target
	InvocationPoints LambdaHookInvocationPointArrayInput `pulumi:"invocationPoints"`
	// List of type names that the hook is going to target
	TargetNames pulumi.StringArrayInput `pulumi:"targetNames"`
}

func (TargetFilters0PropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetFilters0Properties)(nil)).Elem()
}

func (i TargetFilters0PropertiesArgs) ToTargetFilters0PropertiesOutput() TargetFilters0PropertiesOutput {
	return i.ToTargetFilters0PropertiesOutputWithContext(context.Background())
}

func (i TargetFilters0PropertiesArgs) ToTargetFilters0PropertiesOutputWithContext(ctx context.Context) TargetFilters0PropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetFilters0PropertiesOutput)
}

func (i TargetFilters0PropertiesArgs) ToTargetFilters0PropertiesPtrOutput() TargetFilters0PropertiesPtrOutput {
	return i.ToTargetFilters0PropertiesPtrOutputWithContext(context.Background())
}

func (i TargetFilters0PropertiesArgs) ToTargetFilters0PropertiesPtrOutputWithContext(ctx context.Context) TargetFilters0PropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetFilters0PropertiesOutput).ToTargetFilters0PropertiesPtrOutputWithContext(ctx)
}

// TargetFilters0PropertiesPtrInput is an input type that accepts TargetFilters0PropertiesArgs, TargetFilters0PropertiesPtr and TargetFilters0PropertiesPtrOutput values.
// You can construct a concrete instance of `TargetFilters0PropertiesPtrInput` via:
//
//	        TargetFilters0PropertiesArgs{...}
//
//	or:
//
//	        nil
type TargetFilters0PropertiesPtrInput interface {
	pulumi.Input

	ToTargetFilters0PropertiesPtrOutput() TargetFilters0PropertiesPtrOutput
	ToTargetFilters0PropertiesPtrOutputWithContext(context.Context) TargetFilters0PropertiesPtrOutput
}

type targetFilters0PropertiesPtrType TargetFilters0PropertiesArgs

func TargetFilters0PropertiesPtr(v *TargetFilters0PropertiesArgs) TargetFilters0PropertiesPtrInput {
	return (*targetFilters0PropertiesPtrType)(v)
}

func (*targetFilters0PropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TargetFilters0Properties)(nil)).Elem()
}

func (i *targetFilters0PropertiesPtrType) ToTargetFilters0PropertiesPtrOutput() TargetFilters0PropertiesPtrOutput {
	return i.ToTargetFilters0PropertiesPtrOutputWithContext(context.Background())
}

func (i *targetFilters0PropertiesPtrType) ToTargetFilters0PropertiesPtrOutputWithContext(ctx context.Context) TargetFilters0PropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetFilters0PropertiesPtrOutput)
}

// Attribute to specify which targets should invoke the hook
type TargetFilters0PropertiesOutput struct{ *pulumi.OutputState }

func (TargetFilters0PropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetFilters0Properties)(nil)).Elem()
}

func (o TargetFilters0PropertiesOutput) ToTargetFilters0PropertiesOutput() TargetFilters0PropertiesOutput {
	return o
}

func (o TargetFilters0PropertiesOutput) ToTargetFilters0PropertiesOutputWithContext(ctx context.Context) TargetFilters0PropertiesOutput {
	return o
}

func (o TargetFilters0PropertiesOutput) ToTargetFilters0PropertiesPtrOutput() TargetFilters0PropertiesPtrOutput {
	return o.ToTargetFilters0PropertiesPtrOutputWithContext(context.Background())
}

func (o TargetFilters0PropertiesOutput) ToTargetFilters0PropertiesPtrOutputWithContext(ctx context.Context) TargetFilters0PropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TargetFilters0Properties) *TargetFilters0Properties {
		return &v
	}).(TargetFilters0PropertiesPtrOutput)
}

// List of actions that the hook is going to target
func (o TargetFilters0PropertiesOutput) Actions() LambdaHookActionArrayOutput {
	return o.ApplyT(func(v TargetFilters0Properties) []LambdaHookAction { return v.Actions }).(LambdaHookActionArrayOutput)
}

// List of invocation points that the hook is going to target
func (o TargetFilters0PropertiesOutput) InvocationPoints() LambdaHookInvocationPointArrayOutput {
	return o.ApplyT(func(v TargetFilters0Properties) []LambdaHookInvocationPoint { return v.InvocationPoints }).(LambdaHookInvocationPointArrayOutput)
}

// List of type names that the hook is going to target
func (o TargetFilters0PropertiesOutput) TargetNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TargetFilters0Properties) []string { return v.TargetNames }).(pulumi.StringArrayOutput)
}

type TargetFilters0PropertiesPtrOutput struct{ *pulumi.OutputState }

func (TargetFilters0PropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TargetFilters0Properties)(nil)).Elem()
}

func (o TargetFilters0PropertiesPtrOutput) ToTargetFilters0PropertiesPtrOutput() TargetFilters0PropertiesPtrOutput {
	return o
}

func (o TargetFilters0PropertiesPtrOutput) ToTargetFilters0PropertiesPtrOutputWithContext(ctx context.Context) TargetFilters0PropertiesPtrOutput {
	return o
}

func (o TargetFilters0PropertiesPtrOutput) Elem() TargetFilters0PropertiesOutput {
	return o.ApplyT(func(v *TargetFilters0Properties) TargetFilters0Properties {
		if v != nil {
			return *v
		}
		var ret TargetFilters0Properties
		return ret
	}).(TargetFilters0PropertiesOutput)
}

// List of actions that the hook is going to target
func (o TargetFilters0PropertiesPtrOutput) Actions() LambdaHookActionArrayOutput {
	return o.ApplyT(func(v *TargetFilters0Properties) []LambdaHookAction {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(LambdaHookActionArrayOutput)
}

// List of invocation points that the hook is going to target
func (o TargetFilters0PropertiesPtrOutput) InvocationPoints() LambdaHookInvocationPointArrayOutput {
	return o.ApplyT(func(v *TargetFilters0Properties) []LambdaHookInvocationPoint {
		if v == nil {
			return nil
		}
		return v.InvocationPoints
	}).(LambdaHookInvocationPointArrayOutput)
}

// List of type names that the hook is going to target
func (o TargetFilters0PropertiesPtrOutput) TargetNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TargetFilters0Properties) []string {
		if v == nil {
			return nil
		}
		return v.TargetNames
	}).(pulumi.StringArrayOutput)
}

// Attribute to specify which targets should invoke the hook
type TargetFilters1Properties struct {
	// List of hook targets
	Targets []LambdaHookHookTarget `pulumi:"targets"`
}

// TargetFilters1PropertiesInput is an input type that accepts TargetFilters1PropertiesArgs and TargetFilters1PropertiesOutput values.
// You can construct a concrete instance of `TargetFilters1PropertiesInput` via:
//
//	TargetFilters1PropertiesArgs{...}
type TargetFilters1PropertiesInput interface {
	pulumi.Input

	ToTargetFilters1PropertiesOutput() TargetFilters1PropertiesOutput
	ToTargetFilters1PropertiesOutputWithContext(context.Context) TargetFilters1PropertiesOutput
}

// Attribute to specify which targets should invoke the hook
type TargetFilters1PropertiesArgs struct {
	// List of hook targets
	Targets LambdaHookHookTargetArrayInput `pulumi:"targets"`
}

func (TargetFilters1PropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetFilters1Properties)(nil)).Elem()
}

func (i TargetFilters1PropertiesArgs) ToTargetFilters1PropertiesOutput() TargetFilters1PropertiesOutput {
	return i.ToTargetFilters1PropertiesOutputWithContext(context.Background())
}

func (i TargetFilters1PropertiesArgs) ToTargetFilters1PropertiesOutputWithContext(ctx context.Context) TargetFilters1PropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetFilters1PropertiesOutput)
}

func (i TargetFilters1PropertiesArgs) ToTargetFilters1PropertiesPtrOutput() TargetFilters1PropertiesPtrOutput {
	return i.ToTargetFilters1PropertiesPtrOutputWithContext(context.Background())
}

func (i TargetFilters1PropertiesArgs) ToTargetFilters1PropertiesPtrOutputWithContext(ctx context.Context) TargetFilters1PropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetFilters1PropertiesOutput).ToTargetFilters1PropertiesPtrOutputWithContext(ctx)
}

// TargetFilters1PropertiesPtrInput is an input type that accepts TargetFilters1PropertiesArgs, TargetFilters1PropertiesPtr and TargetFilters1PropertiesPtrOutput values.
// You can construct a concrete instance of `TargetFilters1PropertiesPtrInput` via:
//
//	        TargetFilters1PropertiesArgs{...}
//
//	or:
//
//	        nil
type TargetFilters1PropertiesPtrInput interface {
	pulumi.Input

	ToTargetFilters1PropertiesPtrOutput() TargetFilters1PropertiesPtrOutput
	ToTargetFilters1PropertiesPtrOutputWithContext(context.Context) TargetFilters1PropertiesPtrOutput
}

type targetFilters1PropertiesPtrType TargetFilters1PropertiesArgs

func TargetFilters1PropertiesPtr(v *TargetFilters1PropertiesArgs) TargetFilters1PropertiesPtrInput {
	return (*targetFilters1PropertiesPtrType)(v)
}

func (*targetFilters1PropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TargetFilters1Properties)(nil)).Elem()
}

func (i *targetFilters1PropertiesPtrType) ToTargetFilters1PropertiesPtrOutput() TargetFilters1PropertiesPtrOutput {
	return i.ToTargetFilters1PropertiesPtrOutputWithContext(context.Background())
}

func (i *targetFilters1PropertiesPtrType) ToTargetFilters1PropertiesPtrOutputWithContext(ctx context.Context) TargetFilters1PropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetFilters1PropertiesPtrOutput)
}

// Attribute to specify which targets should invoke the hook
type TargetFilters1PropertiesOutput struct{ *pulumi.OutputState }

func (TargetFilters1PropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetFilters1Properties)(nil)).Elem()
}

func (o TargetFilters1PropertiesOutput) ToTargetFilters1PropertiesOutput() TargetFilters1PropertiesOutput {
	return o
}

func (o TargetFilters1PropertiesOutput) ToTargetFilters1PropertiesOutputWithContext(ctx context.Context) TargetFilters1PropertiesOutput {
	return o
}

func (o TargetFilters1PropertiesOutput) ToTargetFilters1PropertiesPtrOutput() TargetFilters1PropertiesPtrOutput {
	return o.ToTargetFilters1PropertiesPtrOutputWithContext(context.Background())
}

func (o TargetFilters1PropertiesOutput) ToTargetFilters1PropertiesPtrOutputWithContext(ctx context.Context) TargetFilters1PropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TargetFilters1Properties) *TargetFilters1Properties {
		return &v
	}).(TargetFilters1PropertiesPtrOutput)
}

// List of hook targets
func (o TargetFilters1PropertiesOutput) Targets() LambdaHookHookTargetArrayOutput {
	return o.ApplyT(func(v TargetFilters1Properties) []LambdaHookHookTarget { return v.Targets }).(LambdaHookHookTargetArrayOutput)
}

type TargetFilters1PropertiesPtrOutput struct{ *pulumi.OutputState }

func (TargetFilters1PropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TargetFilters1Properties)(nil)).Elem()
}

func (o TargetFilters1PropertiesPtrOutput) ToTargetFilters1PropertiesPtrOutput() TargetFilters1PropertiesPtrOutput {
	return o
}

func (o TargetFilters1PropertiesPtrOutput) ToTargetFilters1PropertiesPtrOutputWithContext(ctx context.Context) TargetFilters1PropertiesPtrOutput {
	return o
}

func (o TargetFilters1PropertiesPtrOutput) Elem() TargetFilters1PropertiesOutput {
	return o.ApplyT(func(v *TargetFilters1Properties) TargetFilters1Properties {
		if v != nil {
			return *v
		}
		var ret TargetFilters1Properties
		return ret
	}).(TargetFilters1PropertiesOutput)
}

// List of hook targets
func (o TargetFilters1PropertiesPtrOutput) Targets() LambdaHookHookTargetArrayOutput {
	return o.ApplyT(func(v *TargetFilters1Properties) []LambdaHookHookTarget {
		if v == nil {
			return nil
		}
		return v.Targets
	}).(LambdaHookHookTargetArrayOutput)
}

type TypeActivationLoggingConfig struct {
	// The Amazon CloudWatch log group to which CloudFormation sends error logging information when invoking the type's handlers.
	LogGroupName *string `pulumi:"logGroupName"`
	// The ARN of the role that CloudFormation should assume when sending log entries to CloudWatch logs.
	LogRoleArn *string `pulumi:"logRoleArn"`
}

// TypeActivationLoggingConfigInput is an input type that accepts TypeActivationLoggingConfigArgs and TypeActivationLoggingConfigOutput values.
// You can construct a concrete instance of `TypeActivationLoggingConfigInput` via:
//
//	TypeActivationLoggingConfigArgs{...}
type TypeActivationLoggingConfigInput interface {
	pulumi.Input

	ToTypeActivationLoggingConfigOutput() TypeActivationLoggingConfigOutput
	ToTypeActivationLoggingConfigOutputWithContext(context.Context) TypeActivationLoggingConfigOutput
}

type TypeActivationLoggingConfigArgs struct {
	// The Amazon CloudWatch log group to which CloudFormation sends error logging information when invoking the type's handlers.
	LogGroupName pulumi.StringPtrInput `pulumi:"logGroupName"`
	// The ARN of the role that CloudFormation should assume when sending log entries to CloudWatch logs.
	LogRoleArn pulumi.StringPtrInput `pulumi:"logRoleArn"`
}

func (TypeActivationLoggingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TypeActivationLoggingConfig)(nil)).Elem()
}

func (i TypeActivationLoggingConfigArgs) ToTypeActivationLoggingConfigOutput() TypeActivationLoggingConfigOutput {
	return i.ToTypeActivationLoggingConfigOutputWithContext(context.Background())
}

func (i TypeActivationLoggingConfigArgs) ToTypeActivationLoggingConfigOutputWithContext(ctx context.Context) TypeActivationLoggingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TypeActivationLoggingConfigOutput)
}

func (i TypeActivationLoggingConfigArgs) ToTypeActivationLoggingConfigPtrOutput() TypeActivationLoggingConfigPtrOutput {
	return i.ToTypeActivationLoggingConfigPtrOutputWithContext(context.Background())
}

func (i TypeActivationLoggingConfigArgs) ToTypeActivationLoggingConfigPtrOutputWithContext(ctx context.Context) TypeActivationLoggingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TypeActivationLoggingConfigOutput).ToTypeActivationLoggingConfigPtrOutputWithContext(ctx)
}

// TypeActivationLoggingConfigPtrInput is an input type that accepts TypeActivationLoggingConfigArgs, TypeActivationLoggingConfigPtr and TypeActivationLoggingConfigPtrOutput values.
// You can construct a concrete instance of `TypeActivationLoggingConfigPtrInput` via:
//
//	        TypeActivationLoggingConfigArgs{...}
//
//	or:
//
//	        nil
type TypeActivationLoggingConfigPtrInput interface {
	pulumi.Input

	ToTypeActivationLoggingConfigPtrOutput() TypeActivationLoggingConfigPtrOutput
	ToTypeActivationLoggingConfigPtrOutputWithContext(context.Context) TypeActivationLoggingConfigPtrOutput
}

type typeActivationLoggingConfigPtrType TypeActivationLoggingConfigArgs

func TypeActivationLoggingConfigPtr(v *TypeActivationLoggingConfigArgs) TypeActivationLoggingConfigPtrInput {
	return (*typeActivationLoggingConfigPtrType)(v)
}

func (*typeActivationLoggingConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TypeActivationLoggingConfig)(nil)).Elem()
}

func (i *typeActivationLoggingConfigPtrType) ToTypeActivationLoggingConfigPtrOutput() TypeActivationLoggingConfigPtrOutput {
	return i.ToTypeActivationLoggingConfigPtrOutputWithContext(context.Background())
}

func (i *typeActivationLoggingConfigPtrType) ToTypeActivationLoggingConfigPtrOutputWithContext(ctx context.Context) TypeActivationLoggingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TypeActivationLoggingConfigPtrOutput)
}

type TypeActivationLoggingConfigOutput struct{ *pulumi.OutputState }

func (TypeActivationLoggingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TypeActivationLoggingConfig)(nil)).Elem()
}

func (o TypeActivationLoggingConfigOutput) ToTypeActivationLoggingConfigOutput() TypeActivationLoggingConfigOutput {
	return o
}

func (o TypeActivationLoggingConfigOutput) ToTypeActivationLoggingConfigOutputWithContext(ctx context.Context) TypeActivationLoggingConfigOutput {
	return o
}

func (o TypeActivationLoggingConfigOutput) ToTypeActivationLoggingConfigPtrOutput() TypeActivationLoggingConfigPtrOutput {
	return o.ToTypeActivationLoggingConfigPtrOutputWithContext(context.Background())
}

func (o TypeActivationLoggingConfigOutput) ToTypeActivationLoggingConfigPtrOutputWithContext(ctx context.Context) TypeActivationLoggingConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TypeActivationLoggingConfig) *TypeActivationLoggingConfig {
		return &v
	}).(TypeActivationLoggingConfigPtrOutput)
}

// The Amazon CloudWatch log group to which CloudFormation sends error logging information when invoking the type's handlers.
func (o TypeActivationLoggingConfigOutput) LogGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TypeActivationLoggingConfig) *string { return v.LogGroupName }).(pulumi.StringPtrOutput)
}

// The ARN of the role that CloudFormation should assume when sending log entries to CloudWatch logs.
func (o TypeActivationLoggingConfigOutput) LogRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TypeActivationLoggingConfig) *string { return v.LogRoleArn }).(pulumi.StringPtrOutput)
}

type TypeActivationLoggingConfigPtrOutput struct{ *pulumi.OutputState }

func (TypeActivationLoggingConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TypeActivationLoggingConfig)(nil)).Elem()
}

func (o TypeActivationLoggingConfigPtrOutput) ToTypeActivationLoggingConfigPtrOutput() TypeActivationLoggingConfigPtrOutput {
	return o
}

func (o TypeActivationLoggingConfigPtrOutput) ToTypeActivationLoggingConfigPtrOutputWithContext(ctx context.Context) TypeActivationLoggingConfigPtrOutput {
	return o
}

func (o TypeActivationLoggingConfigPtrOutput) Elem() TypeActivationLoggingConfigOutput {
	return o.ApplyT(func(v *TypeActivationLoggingConfig) TypeActivationLoggingConfig {
		if v != nil {
			return *v
		}
		var ret TypeActivationLoggingConfig
		return ret
	}).(TypeActivationLoggingConfigOutput)
}

// The Amazon CloudWatch log group to which CloudFormation sends error logging information when invoking the type's handlers.
func (o TypeActivationLoggingConfigPtrOutput) LogGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TypeActivationLoggingConfig) *string {
		if v == nil {
			return nil
		}
		return v.LogGroupName
	}).(pulumi.StringPtrOutput)
}

// The ARN of the role that CloudFormation should assume when sending log entries to CloudWatch logs.
func (o TypeActivationLoggingConfigPtrOutput) LogRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TypeActivationLoggingConfig) *string {
		if v == nil {
			return nil
		}
		return v.LogRoleArn
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GuardHookS3LocationInput)(nil)).Elem(), GuardHookS3LocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GuardHookS3LocationPtrInput)(nil)).Elem(), GuardHookS3LocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HookVersionLoggingConfigInput)(nil)).Elem(), HookVersionLoggingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HookVersionLoggingConfigPtrInput)(nil)).Elem(), HookVersionLoggingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LambdaHookHookTargetInput)(nil)).Elem(), LambdaHookHookTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LambdaHookHookTargetArrayInput)(nil)).Elem(), LambdaHookHookTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedExecutionPropertiesInput)(nil)).Elem(), ManagedExecutionPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedExecutionPropertiesPtrInput)(nil)).Elem(), ManagedExecutionPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OptionsPropertiesInput)(nil)).Elem(), OptionsPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OptionsPropertiesPtrInput)(nil)).Elem(), OptionsPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceVersionLoggingConfigInput)(nil)).Elem(), ResourceVersionLoggingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceVersionLoggingConfigPtrInput)(nil)).Elem(), ResourceVersionLoggingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackFiltersPropertiesInput)(nil)).Elem(), StackFiltersPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackFiltersPropertiesPtrInput)(nil)).Elem(), StackFiltersPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackFiltersPropertiesStackNamesPropertiesInput)(nil)).Elem(), StackFiltersPropertiesStackNamesPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackFiltersPropertiesStackNamesPropertiesPtrInput)(nil)).Elem(), StackFiltersPropertiesStackNamesPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackFiltersPropertiesStackRolesPropertiesInput)(nil)).Elem(), StackFiltersPropertiesStackRolesPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackFiltersPropertiesStackRolesPropertiesPtrInput)(nil)).Elem(), StackFiltersPropertiesStackRolesPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackSetAutoDeploymentInput)(nil)).Elem(), StackSetAutoDeploymentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackSetAutoDeploymentPtrInput)(nil)).Elem(), StackSetAutoDeploymentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackSetDeploymentTargetsInput)(nil)).Elem(), StackSetDeploymentTargetsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackSetOperationPreferencesInput)(nil)).Elem(), StackSetOperationPreferencesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackSetOperationPreferencesPtrInput)(nil)).Elem(), StackSetOperationPreferencesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackSetParameterInput)(nil)).Elem(), StackSetParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackSetParameterArrayInput)(nil)).Elem(), StackSetParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackSetStackInstancesInput)(nil)).Elem(), StackSetStackInstancesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackSetStackInstancesArrayInput)(nil)).Elem(), StackSetStackInstancesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TargetFilters0PropertiesInput)(nil)).Elem(), TargetFilters0PropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TargetFilters0PropertiesPtrInput)(nil)).Elem(), TargetFilters0PropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TargetFilters1PropertiesInput)(nil)).Elem(), TargetFilters1PropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TargetFilters1PropertiesPtrInput)(nil)).Elem(), TargetFilters1PropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TypeActivationLoggingConfigInput)(nil)).Elem(), TypeActivationLoggingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TypeActivationLoggingConfigPtrInput)(nil)).Elem(), TypeActivationLoggingConfigArgs{})
	pulumi.RegisterOutputType(GuardHookS3LocationOutput{})
	pulumi.RegisterOutputType(GuardHookS3LocationPtrOutput{})
	pulumi.RegisterOutputType(HookVersionLoggingConfigOutput{})
	pulumi.RegisterOutputType(HookVersionLoggingConfigPtrOutput{})
	pulumi.RegisterOutputType(LambdaHookHookTargetOutput{})
	pulumi.RegisterOutputType(LambdaHookHookTargetArrayOutput{})
	pulumi.RegisterOutputType(ManagedExecutionPropertiesOutput{})
	pulumi.RegisterOutputType(ManagedExecutionPropertiesPtrOutput{})
	pulumi.RegisterOutputType(OptionsPropertiesOutput{})
	pulumi.RegisterOutputType(OptionsPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ResourceVersionLoggingConfigOutput{})
	pulumi.RegisterOutputType(ResourceVersionLoggingConfigPtrOutput{})
	pulumi.RegisterOutputType(StackFiltersPropertiesOutput{})
	pulumi.RegisterOutputType(StackFiltersPropertiesPtrOutput{})
	pulumi.RegisterOutputType(StackFiltersPropertiesStackNamesPropertiesOutput{})
	pulumi.RegisterOutputType(StackFiltersPropertiesStackNamesPropertiesPtrOutput{})
	pulumi.RegisterOutputType(StackFiltersPropertiesStackRolesPropertiesOutput{})
	pulumi.RegisterOutputType(StackFiltersPropertiesStackRolesPropertiesPtrOutput{})
	pulumi.RegisterOutputType(StackOutputTypeOutput{})
	pulumi.RegisterOutputType(StackOutputTypeArrayOutput{})
	pulumi.RegisterOutputType(StackSetAutoDeploymentOutput{})
	pulumi.RegisterOutputType(StackSetAutoDeploymentPtrOutput{})
	pulumi.RegisterOutputType(StackSetDeploymentTargetsOutput{})
	pulumi.RegisterOutputType(StackSetOperationPreferencesOutput{})
	pulumi.RegisterOutputType(StackSetOperationPreferencesPtrOutput{})
	pulumi.RegisterOutputType(StackSetParameterOutput{})
	pulumi.RegisterOutputType(StackSetParameterArrayOutput{})
	pulumi.RegisterOutputType(StackSetStackInstancesOutput{})
	pulumi.RegisterOutputType(StackSetStackInstancesArrayOutput{})
	pulumi.RegisterOutputType(TargetFilters0PropertiesOutput{})
	pulumi.RegisterOutputType(TargetFilters0PropertiesPtrOutput{})
	pulumi.RegisterOutputType(TargetFilters1PropertiesOutput{})
	pulumi.RegisterOutputType(TargetFilters1PropertiesPtrOutput{})
	pulumi.RegisterOutputType(TypeActivationLoggingConfigOutput{})
	pulumi.RegisterOutputType(TypeActivationLoggingConfigPtrOutput{})
}
