// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudformation

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Set a version as default version for a hook in CloudFormation Registry.
type HookDefaultVersion struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the type. This is used to uniquely identify a HookDefaultVersion
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The name of the type being registered.
	//
	// We recommend that type names adhere to the following pattern: company_or_organization::service::type.
	TypeName pulumi.StringPtrOutput `pulumi:"typeName"`
	// The Amazon Resource Name (ARN) of the type version.
	TypeVersionArn pulumi.StringPtrOutput `pulumi:"typeVersionArn"`
	// The ID of an existing version of the hook to set as the default.
	VersionId pulumi.StringPtrOutput `pulumi:"versionId"`
}

// NewHookDefaultVersion registers a new resource with the given unique name, arguments, and options.
func NewHookDefaultVersion(ctx *pulumi.Context,
	name string, args *HookDefaultVersionArgs, opts ...pulumi.ResourceOption) (*HookDefaultVersion, error) {
	if args == nil {
		args = &HookDefaultVersionArgs{}
	}

	var resource HookDefaultVersion
	err := ctx.RegisterResource("aws-native:cloudformation:HookDefaultVersion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHookDefaultVersion gets an existing HookDefaultVersion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHookDefaultVersion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HookDefaultVersionState, opts ...pulumi.ResourceOption) (*HookDefaultVersion, error) {
	var resource HookDefaultVersion
	err := ctx.ReadResource("aws-native:cloudformation:HookDefaultVersion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HookDefaultVersion resources.
type hookDefaultVersionState struct {
}

type HookDefaultVersionState struct {
}

func (HookDefaultVersionState) ElementType() reflect.Type {
	return reflect.TypeOf((*hookDefaultVersionState)(nil)).Elem()
}

type hookDefaultVersionArgs struct {
	// The name of the type being registered.
	//
	// We recommend that type names adhere to the following pattern: company_or_organization::service::type.
	TypeName *string `pulumi:"typeName"`
	// The Amazon Resource Name (ARN) of the type version.
	TypeVersionArn *string `pulumi:"typeVersionArn"`
	// The ID of an existing version of the hook to set as the default.
	VersionId *string `pulumi:"versionId"`
}

// The set of arguments for constructing a HookDefaultVersion resource.
type HookDefaultVersionArgs struct {
	// The name of the type being registered.
	//
	// We recommend that type names adhere to the following pattern: company_or_organization::service::type.
	TypeName pulumi.StringPtrInput
	// The Amazon Resource Name (ARN) of the type version.
	TypeVersionArn pulumi.StringPtrInput
	// The ID of an existing version of the hook to set as the default.
	VersionId pulumi.StringPtrInput
}

func (HookDefaultVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hookDefaultVersionArgs)(nil)).Elem()
}

type HookDefaultVersionInput interface {
	pulumi.Input

	ToHookDefaultVersionOutput() HookDefaultVersionOutput
	ToHookDefaultVersionOutputWithContext(ctx context.Context) HookDefaultVersionOutput
}

func (*HookDefaultVersion) ElementType() reflect.Type {
	return reflect.TypeOf((**HookDefaultVersion)(nil)).Elem()
}

func (i *HookDefaultVersion) ToHookDefaultVersionOutput() HookDefaultVersionOutput {
	return i.ToHookDefaultVersionOutputWithContext(context.Background())
}

func (i *HookDefaultVersion) ToHookDefaultVersionOutputWithContext(ctx context.Context) HookDefaultVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HookDefaultVersionOutput)
}

type HookDefaultVersionOutput struct{ *pulumi.OutputState }

func (HookDefaultVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HookDefaultVersion)(nil)).Elem()
}

func (o HookDefaultVersionOutput) ToHookDefaultVersionOutput() HookDefaultVersionOutput {
	return o
}

func (o HookDefaultVersionOutput) ToHookDefaultVersionOutputWithContext(ctx context.Context) HookDefaultVersionOutput {
	return o
}

// The Amazon Resource Name (ARN) of the type. This is used to uniquely identify a HookDefaultVersion
func (o HookDefaultVersionOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *HookDefaultVersion) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The name of the type being registered.
//
// We recommend that type names adhere to the following pattern: company_or_organization::service::type.
func (o HookDefaultVersionOutput) TypeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HookDefaultVersion) pulumi.StringPtrOutput { return v.TypeName }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of the type version.
func (o HookDefaultVersionOutput) TypeVersionArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HookDefaultVersion) pulumi.StringPtrOutput { return v.TypeVersionArn }).(pulumi.StringPtrOutput)
}

// The ID of an existing version of the hook to set as the default.
func (o HookDefaultVersionOutput) VersionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HookDefaultVersion) pulumi.StringPtrOutput { return v.VersionId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HookDefaultVersionInput)(nil)).Elem(), &HookDefaultVersion{})
	pulumi.RegisterOutputType(HookDefaultVersionOutput{})
}
