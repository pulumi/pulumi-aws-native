// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudformation

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::CloudFormation::Stack
//
// Deprecated: Stack is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
type Stack struct {
	pulumi.CustomResourceState

	NotificationARNs pulumi.StringArrayOutput `pulumi:"notificationARNs"`
	Parameters       pulumi.AnyOutput         `pulumi:"parameters"`
	Tags             StackTagArrayOutput      `pulumi:"tags"`
	TemplateURL      pulumi.StringOutput      `pulumi:"templateURL"`
	TimeoutInMinutes pulumi.IntPtrOutput      `pulumi:"timeoutInMinutes"`
}

// NewStack registers a new resource with the given unique name, arguments, and options.
func NewStack(ctx *pulumi.Context,
	name string, args *StackArgs, opts ...pulumi.ResourceOption) (*Stack, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TemplateURL == nil {
		return nil, errors.New("invalid value for required argument 'TemplateURL'")
	}
	var resource Stack
	err := ctx.RegisterResource("aws-native:cloudformation:Stack", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStack gets an existing Stack resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStack(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StackState, opts ...pulumi.ResourceOption) (*Stack, error) {
	var resource Stack
	err := ctx.ReadResource("aws-native:cloudformation:Stack", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Stack resources.
type stackState struct {
}

type StackState struct {
}

func (StackState) ElementType() reflect.Type {
	return reflect.TypeOf((*stackState)(nil)).Elem()
}

type stackArgs struct {
	NotificationARNs []string    `pulumi:"notificationARNs"`
	Parameters       interface{} `pulumi:"parameters"`
	Tags             []StackTag  `pulumi:"tags"`
	TemplateURL      string      `pulumi:"templateURL"`
	TimeoutInMinutes *int        `pulumi:"timeoutInMinutes"`
}

// The set of arguments for constructing a Stack resource.
type StackArgs struct {
	NotificationARNs pulumi.StringArrayInput
	Parameters       pulumi.Input
	Tags             StackTagArrayInput
	TemplateURL      pulumi.StringInput
	TimeoutInMinutes pulumi.IntPtrInput
}

func (StackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*stackArgs)(nil)).Elem()
}

type StackInput interface {
	pulumi.Input

	ToStackOutput() StackOutput
	ToStackOutputWithContext(ctx context.Context) StackOutput
}

func (*Stack) ElementType() reflect.Type {
	return reflect.TypeOf((*Stack)(nil))
}

func (i *Stack) ToStackOutput() StackOutput {
	return i.ToStackOutputWithContext(context.Background())
}

func (i *Stack) ToStackOutputWithContext(ctx context.Context) StackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackOutput)
}

type StackOutput struct{ *pulumi.OutputState }

func (StackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Stack)(nil))
}

func (o StackOutput) ToStackOutput() StackOutput {
	return o
}

func (o StackOutput) ToStackOutputWithContext(ctx context.Context) StackOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(StackOutput{})
}
