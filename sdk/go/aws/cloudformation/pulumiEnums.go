// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudformation

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The scope at which the type is visible and usable in CloudFormation operations.
//
// The only allowed value at present is:
//
// PRIVATE: The type is only visible and usable within the account in which it is registered. Currently, AWS CloudFormation marks any types you register as PRIVATE.
type ModuleVersionVisibility string

const (
	ModuleVersionVisibilityPrivate = ModuleVersionVisibility("PRIVATE")
)

func (ModuleVersionVisibility) ElementType() reflect.Type {
	return reflect.TypeOf((*ModuleVersionVisibility)(nil)).Elem()
}

func (e ModuleVersionVisibility) ToModuleVersionVisibilityOutput() ModuleVersionVisibilityOutput {
	return pulumi.ToOutput(e).(ModuleVersionVisibilityOutput)
}

func (e ModuleVersionVisibility) ToModuleVersionVisibilityOutputWithContext(ctx context.Context) ModuleVersionVisibilityOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ModuleVersionVisibilityOutput)
}

func (e ModuleVersionVisibility) ToModuleVersionVisibilityPtrOutput() ModuleVersionVisibilityPtrOutput {
	return e.ToModuleVersionVisibilityPtrOutputWithContext(context.Background())
}

func (e ModuleVersionVisibility) ToModuleVersionVisibilityPtrOutputWithContext(ctx context.Context) ModuleVersionVisibilityPtrOutput {
	return ModuleVersionVisibility(e).ToModuleVersionVisibilityOutputWithContext(ctx).ToModuleVersionVisibilityPtrOutputWithContext(ctx)
}

func (e ModuleVersionVisibility) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ModuleVersionVisibility) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ModuleVersionVisibility) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ModuleVersionVisibility) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ModuleVersionVisibilityOutput struct{ *pulumi.OutputState }

func (ModuleVersionVisibilityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModuleVersionVisibility)(nil)).Elem()
}

func (o ModuleVersionVisibilityOutput) ToModuleVersionVisibilityOutput() ModuleVersionVisibilityOutput {
	return o
}

func (o ModuleVersionVisibilityOutput) ToModuleVersionVisibilityOutputWithContext(ctx context.Context) ModuleVersionVisibilityOutput {
	return o
}

func (o ModuleVersionVisibilityOutput) ToModuleVersionVisibilityPtrOutput() ModuleVersionVisibilityPtrOutput {
	return o.ToModuleVersionVisibilityPtrOutputWithContext(context.Background())
}

func (o ModuleVersionVisibilityOutput) ToModuleVersionVisibilityPtrOutputWithContext(ctx context.Context) ModuleVersionVisibilityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ModuleVersionVisibility) *ModuleVersionVisibility {
		return &v
	}).(ModuleVersionVisibilityPtrOutput)
}

func (o ModuleVersionVisibilityOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ModuleVersionVisibilityOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ModuleVersionVisibility) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ModuleVersionVisibilityOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ModuleVersionVisibilityOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ModuleVersionVisibility) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ModuleVersionVisibilityPtrOutput struct{ *pulumi.OutputState }

func (ModuleVersionVisibilityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ModuleVersionVisibility)(nil)).Elem()
}

func (o ModuleVersionVisibilityPtrOutput) ToModuleVersionVisibilityPtrOutput() ModuleVersionVisibilityPtrOutput {
	return o
}

func (o ModuleVersionVisibilityPtrOutput) ToModuleVersionVisibilityPtrOutputWithContext(ctx context.Context) ModuleVersionVisibilityPtrOutput {
	return o
}

func (o ModuleVersionVisibilityPtrOutput) Elem() ModuleVersionVisibilityOutput {
	return o.ApplyT(func(v *ModuleVersionVisibility) ModuleVersionVisibility {
		if v != nil {
			return *v
		}
		var ret ModuleVersionVisibility
		return ret
	}).(ModuleVersionVisibilityOutput)
}

func (o ModuleVersionVisibilityPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ModuleVersionVisibilityPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ModuleVersionVisibility) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ModuleVersionVisibilityInput is an input type that accepts ModuleVersionVisibilityArgs and ModuleVersionVisibilityOutput values.
// You can construct a concrete instance of `ModuleVersionVisibilityInput` via:
//
//          ModuleVersionVisibilityArgs{...}
type ModuleVersionVisibilityInput interface {
	pulumi.Input

	ToModuleVersionVisibilityOutput() ModuleVersionVisibilityOutput
	ToModuleVersionVisibilityOutputWithContext(context.Context) ModuleVersionVisibilityOutput
}

var moduleVersionVisibilityPtrType = reflect.TypeOf((**ModuleVersionVisibility)(nil)).Elem()

type ModuleVersionVisibilityPtrInput interface {
	pulumi.Input

	ToModuleVersionVisibilityPtrOutput() ModuleVersionVisibilityPtrOutput
	ToModuleVersionVisibilityPtrOutputWithContext(context.Context) ModuleVersionVisibilityPtrOutput
}

type moduleVersionVisibilityPtr string

func ModuleVersionVisibilityPtr(v string) ModuleVersionVisibilityPtrInput {
	return (*moduleVersionVisibilityPtr)(&v)
}

func (*moduleVersionVisibilityPtr) ElementType() reflect.Type {
	return moduleVersionVisibilityPtrType
}

func (in *moduleVersionVisibilityPtr) ToModuleVersionVisibilityPtrOutput() ModuleVersionVisibilityPtrOutput {
	return pulumi.ToOutput(in).(ModuleVersionVisibilityPtrOutput)
}

func (in *moduleVersionVisibilityPtr) ToModuleVersionVisibilityPtrOutputWithContext(ctx context.Context) ModuleVersionVisibilityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ModuleVersionVisibilityPtrOutput)
}

// The kind of extension
type PublicTypeVersionType string

const (
	PublicTypeVersionTypeResource = PublicTypeVersionType("RESOURCE")
	PublicTypeVersionTypeModule   = PublicTypeVersionType("MODULE")
)

func (PublicTypeVersionType) ElementType() reflect.Type {
	return reflect.TypeOf((*PublicTypeVersionType)(nil)).Elem()
}

func (e PublicTypeVersionType) ToPublicTypeVersionTypeOutput() PublicTypeVersionTypeOutput {
	return pulumi.ToOutput(e).(PublicTypeVersionTypeOutput)
}

func (e PublicTypeVersionType) ToPublicTypeVersionTypeOutputWithContext(ctx context.Context) PublicTypeVersionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PublicTypeVersionTypeOutput)
}

func (e PublicTypeVersionType) ToPublicTypeVersionTypePtrOutput() PublicTypeVersionTypePtrOutput {
	return e.ToPublicTypeVersionTypePtrOutputWithContext(context.Background())
}

func (e PublicTypeVersionType) ToPublicTypeVersionTypePtrOutputWithContext(ctx context.Context) PublicTypeVersionTypePtrOutput {
	return PublicTypeVersionType(e).ToPublicTypeVersionTypeOutputWithContext(ctx).ToPublicTypeVersionTypePtrOutputWithContext(ctx)
}

func (e PublicTypeVersionType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PublicTypeVersionType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PublicTypeVersionType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PublicTypeVersionType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PublicTypeVersionTypeOutput struct{ *pulumi.OutputState }

func (PublicTypeVersionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PublicTypeVersionType)(nil)).Elem()
}

func (o PublicTypeVersionTypeOutput) ToPublicTypeVersionTypeOutput() PublicTypeVersionTypeOutput {
	return o
}

func (o PublicTypeVersionTypeOutput) ToPublicTypeVersionTypeOutputWithContext(ctx context.Context) PublicTypeVersionTypeOutput {
	return o
}

func (o PublicTypeVersionTypeOutput) ToPublicTypeVersionTypePtrOutput() PublicTypeVersionTypePtrOutput {
	return o.ToPublicTypeVersionTypePtrOutputWithContext(context.Background())
}

func (o PublicTypeVersionTypeOutput) ToPublicTypeVersionTypePtrOutputWithContext(ctx context.Context) PublicTypeVersionTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PublicTypeVersionType) *PublicTypeVersionType {
		return &v
	}).(PublicTypeVersionTypePtrOutput)
}

func (o PublicTypeVersionTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PublicTypeVersionTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PublicTypeVersionType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PublicTypeVersionTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PublicTypeVersionTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PublicTypeVersionType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PublicTypeVersionTypePtrOutput struct{ *pulumi.OutputState }

func (PublicTypeVersionTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicTypeVersionType)(nil)).Elem()
}

func (o PublicTypeVersionTypePtrOutput) ToPublicTypeVersionTypePtrOutput() PublicTypeVersionTypePtrOutput {
	return o
}

func (o PublicTypeVersionTypePtrOutput) ToPublicTypeVersionTypePtrOutputWithContext(ctx context.Context) PublicTypeVersionTypePtrOutput {
	return o
}

func (o PublicTypeVersionTypePtrOutput) Elem() PublicTypeVersionTypeOutput {
	return o.ApplyT(func(v *PublicTypeVersionType) PublicTypeVersionType {
		if v != nil {
			return *v
		}
		var ret PublicTypeVersionType
		return ret
	}).(PublicTypeVersionTypeOutput)
}

func (o PublicTypeVersionTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PublicTypeVersionTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PublicTypeVersionType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PublicTypeVersionTypeInput is an input type that accepts PublicTypeVersionTypeArgs and PublicTypeVersionTypeOutput values.
// You can construct a concrete instance of `PublicTypeVersionTypeInput` via:
//
//          PublicTypeVersionTypeArgs{...}
type PublicTypeVersionTypeInput interface {
	pulumi.Input

	ToPublicTypeVersionTypeOutput() PublicTypeVersionTypeOutput
	ToPublicTypeVersionTypeOutputWithContext(context.Context) PublicTypeVersionTypeOutput
}

var publicTypeVersionTypePtrType = reflect.TypeOf((**PublicTypeVersionType)(nil)).Elem()

type PublicTypeVersionTypePtrInput interface {
	pulumi.Input

	ToPublicTypeVersionTypePtrOutput() PublicTypeVersionTypePtrOutput
	ToPublicTypeVersionTypePtrOutputWithContext(context.Context) PublicTypeVersionTypePtrOutput
}

type publicTypeVersionTypePtr string

func PublicTypeVersionTypePtr(v string) PublicTypeVersionTypePtrInput {
	return (*publicTypeVersionTypePtr)(&v)
}

func (*publicTypeVersionTypePtr) ElementType() reflect.Type {
	return publicTypeVersionTypePtrType
}

func (in *publicTypeVersionTypePtr) ToPublicTypeVersionTypePtrOutput() PublicTypeVersionTypePtrOutput {
	return pulumi.ToOutput(in).(PublicTypeVersionTypePtrOutput)
}

func (in *publicTypeVersionTypePtr) ToPublicTypeVersionTypePtrOutputWithContext(ctx context.Context) PublicTypeVersionTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PublicTypeVersionTypePtrOutput)
}

// The type of account used as the identity provider when registering this publisher with CloudFormation.
type PublisherIdentityProvider string

const (
	PublisherIdentityProviderAWSMarketplace = PublisherIdentityProvider("AWS_Marketplace")
	PublisherIdentityProviderGitHub         = PublisherIdentityProvider("GitHub")
	PublisherIdentityProviderBitbucket      = PublisherIdentityProvider("Bitbucket")
)

func (PublisherIdentityProvider) ElementType() reflect.Type {
	return reflect.TypeOf((*PublisherIdentityProvider)(nil)).Elem()
}

func (e PublisherIdentityProvider) ToPublisherIdentityProviderOutput() PublisherIdentityProviderOutput {
	return pulumi.ToOutput(e).(PublisherIdentityProviderOutput)
}

func (e PublisherIdentityProvider) ToPublisherIdentityProviderOutputWithContext(ctx context.Context) PublisherIdentityProviderOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PublisherIdentityProviderOutput)
}

func (e PublisherIdentityProvider) ToPublisherIdentityProviderPtrOutput() PublisherIdentityProviderPtrOutput {
	return e.ToPublisherIdentityProviderPtrOutputWithContext(context.Background())
}

func (e PublisherIdentityProvider) ToPublisherIdentityProviderPtrOutputWithContext(ctx context.Context) PublisherIdentityProviderPtrOutput {
	return PublisherIdentityProvider(e).ToPublisherIdentityProviderOutputWithContext(ctx).ToPublisherIdentityProviderPtrOutputWithContext(ctx)
}

func (e PublisherIdentityProvider) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PublisherIdentityProvider) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PublisherIdentityProvider) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PublisherIdentityProvider) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PublisherIdentityProviderOutput struct{ *pulumi.OutputState }

func (PublisherIdentityProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PublisherIdentityProvider)(nil)).Elem()
}

func (o PublisherIdentityProviderOutput) ToPublisherIdentityProviderOutput() PublisherIdentityProviderOutput {
	return o
}

func (o PublisherIdentityProviderOutput) ToPublisherIdentityProviderOutputWithContext(ctx context.Context) PublisherIdentityProviderOutput {
	return o
}

func (o PublisherIdentityProviderOutput) ToPublisherIdentityProviderPtrOutput() PublisherIdentityProviderPtrOutput {
	return o.ToPublisherIdentityProviderPtrOutputWithContext(context.Background())
}

func (o PublisherIdentityProviderOutput) ToPublisherIdentityProviderPtrOutputWithContext(ctx context.Context) PublisherIdentityProviderPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PublisherIdentityProvider) *PublisherIdentityProvider {
		return &v
	}).(PublisherIdentityProviderPtrOutput)
}

func (o PublisherIdentityProviderOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PublisherIdentityProviderOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PublisherIdentityProvider) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PublisherIdentityProviderOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PublisherIdentityProviderOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PublisherIdentityProvider) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PublisherIdentityProviderPtrOutput struct{ *pulumi.OutputState }

func (PublisherIdentityProviderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PublisherIdentityProvider)(nil)).Elem()
}

func (o PublisherIdentityProviderPtrOutput) ToPublisherIdentityProviderPtrOutput() PublisherIdentityProviderPtrOutput {
	return o
}

func (o PublisherIdentityProviderPtrOutput) ToPublisherIdentityProviderPtrOutputWithContext(ctx context.Context) PublisherIdentityProviderPtrOutput {
	return o
}

func (o PublisherIdentityProviderPtrOutput) Elem() PublisherIdentityProviderOutput {
	return o.ApplyT(func(v *PublisherIdentityProvider) PublisherIdentityProvider {
		if v != nil {
			return *v
		}
		var ret PublisherIdentityProvider
		return ret
	}).(PublisherIdentityProviderOutput)
}

func (o PublisherIdentityProviderPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PublisherIdentityProviderPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PublisherIdentityProvider) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PublisherIdentityProviderInput is an input type that accepts PublisherIdentityProviderArgs and PublisherIdentityProviderOutput values.
// You can construct a concrete instance of `PublisherIdentityProviderInput` via:
//
//          PublisherIdentityProviderArgs{...}
type PublisherIdentityProviderInput interface {
	pulumi.Input

	ToPublisherIdentityProviderOutput() PublisherIdentityProviderOutput
	ToPublisherIdentityProviderOutputWithContext(context.Context) PublisherIdentityProviderOutput
}

var publisherIdentityProviderPtrType = reflect.TypeOf((**PublisherIdentityProvider)(nil)).Elem()

type PublisherIdentityProviderPtrInput interface {
	pulumi.Input

	ToPublisherIdentityProviderPtrOutput() PublisherIdentityProviderPtrOutput
	ToPublisherIdentityProviderPtrOutputWithContext(context.Context) PublisherIdentityProviderPtrOutput
}

type publisherIdentityProviderPtr string

func PublisherIdentityProviderPtr(v string) PublisherIdentityProviderPtrInput {
	return (*publisherIdentityProviderPtr)(&v)
}

func (*publisherIdentityProviderPtr) ElementType() reflect.Type {
	return publisherIdentityProviderPtrType
}

func (in *publisherIdentityProviderPtr) ToPublisherIdentityProviderPtrOutput() PublisherIdentityProviderPtrOutput {
	return pulumi.ToOutput(in).(PublisherIdentityProviderPtrOutput)
}

func (in *publisherIdentityProviderPtr) ToPublisherIdentityProviderPtrOutputWithContext(ctx context.Context) PublisherIdentityProviderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PublisherIdentityProviderPtrOutput)
}

// Whether the publisher is verified.
type PublisherPublisherStatus string

const (
	PublisherPublisherStatusVerified   = PublisherPublisherStatus("VERIFIED")
	PublisherPublisherStatusUnverified = PublisherPublisherStatus("UNVERIFIED")
)

func (PublisherPublisherStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*PublisherPublisherStatus)(nil)).Elem()
}

func (e PublisherPublisherStatus) ToPublisherPublisherStatusOutput() PublisherPublisherStatusOutput {
	return pulumi.ToOutput(e).(PublisherPublisherStatusOutput)
}

func (e PublisherPublisherStatus) ToPublisherPublisherStatusOutputWithContext(ctx context.Context) PublisherPublisherStatusOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PublisherPublisherStatusOutput)
}

func (e PublisherPublisherStatus) ToPublisherPublisherStatusPtrOutput() PublisherPublisherStatusPtrOutput {
	return e.ToPublisherPublisherStatusPtrOutputWithContext(context.Background())
}

func (e PublisherPublisherStatus) ToPublisherPublisherStatusPtrOutputWithContext(ctx context.Context) PublisherPublisherStatusPtrOutput {
	return PublisherPublisherStatus(e).ToPublisherPublisherStatusOutputWithContext(ctx).ToPublisherPublisherStatusPtrOutputWithContext(ctx)
}

func (e PublisherPublisherStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PublisherPublisherStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PublisherPublisherStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PublisherPublisherStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PublisherPublisherStatusOutput struct{ *pulumi.OutputState }

func (PublisherPublisherStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PublisherPublisherStatus)(nil)).Elem()
}

func (o PublisherPublisherStatusOutput) ToPublisherPublisherStatusOutput() PublisherPublisherStatusOutput {
	return o
}

func (o PublisherPublisherStatusOutput) ToPublisherPublisherStatusOutputWithContext(ctx context.Context) PublisherPublisherStatusOutput {
	return o
}

func (o PublisherPublisherStatusOutput) ToPublisherPublisherStatusPtrOutput() PublisherPublisherStatusPtrOutput {
	return o.ToPublisherPublisherStatusPtrOutputWithContext(context.Background())
}

func (o PublisherPublisherStatusOutput) ToPublisherPublisherStatusPtrOutputWithContext(ctx context.Context) PublisherPublisherStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PublisherPublisherStatus) *PublisherPublisherStatus {
		return &v
	}).(PublisherPublisherStatusPtrOutput)
}

func (o PublisherPublisherStatusOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PublisherPublisherStatusOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PublisherPublisherStatus) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PublisherPublisherStatusOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PublisherPublisherStatusOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PublisherPublisherStatus) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PublisherPublisherStatusPtrOutput struct{ *pulumi.OutputState }

func (PublisherPublisherStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PublisherPublisherStatus)(nil)).Elem()
}

func (o PublisherPublisherStatusPtrOutput) ToPublisherPublisherStatusPtrOutput() PublisherPublisherStatusPtrOutput {
	return o
}

func (o PublisherPublisherStatusPtrOutput) ToPublisherPublisherStatusPtrOutputWithContext(ctx context.Context) PublisherPublisherStatusPtrOutput {
	return o
}

func (o PublisherPublisherStatusPtrOutput) Elem() PublisherPublisherStatusOutput {
	return o.ApplyT(func(v *PublisherPublisherStatus) PublisherPublisherStatus {
		if v != nil {
			return *v
		}
		var ret PublisherPublisherStatus
		return ret
	}).(PublisherPublisherStatusOutput)
}

func (o PublisherPublisherStatusPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PublisherPublisherStatusPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PublisherPublisherStatus) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PublisherPublisherStatusInput is an input type that accepts PublisherPublisherStatusArgs and PublisherPublisherStatusOutput values.
// You can construct a concrete instance of `PublisherPublisherStatusInput` via:
//
//          PublisherPublisherStatusArgs{...}
type PublisherPublisherStatusInput interface {
	pulumi.Input

	ToPublisherPublisherStatusOutput() PublisherPublisherStatusOutput
	ToPublisherPublisherStatusOutputWithContext(context.Context) PublisherPublisherStatusOutput
}

var publisherPublisherStatusPtrType = reflect.TypeOf((**PublisherPublisherStatus)(nil)).Elem()

type PublisherPublisherStatusPtrInput interface {
	pulumi.Input

	ToPublisherPublisherStatusPtrOutput() PublisherPublisherStatusPtrOutput
	ToPublisherPublisherStatusPtrOutputWithContext(context.Context) PublisherPublisherStatusPtrOutput
}

type publisherPublisherStatusPtr string

func PublisherPublisherStatusPtr(v string) PublisherPublisherStatusPtrInput {
	return (*publisherPublisherStatusPtr)(&v)
}

func (*publisherPublisherStatusPtr) ElementType() reflect.Type {
	return publisherPublisherStatusPtrType
}

func (in *publisherPublisherStatusPtr) ToPublisherPublisherStatusPtrOutput() PublisherPublisherStatusPtrOutput {
	return pulumi.ToOutput(in).(PublisherPublisherStatusPtrOutput)
}

func (in *publisherPublisherStatusPtr) ToPublisherPublisherStatusPtrOutputWithContext(ctx context.Context) PublisherPublisherStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PublisherPublisherStatusPtrOutput)
}

// The provisioning behavior of the type. AWS CloudFormation determines the provisioning type during registration, based on the types of handlers in the schema handler package submitted.
type ResourceVersionProvisioningType string

const (
	ResourceVersionProvisioningTypeNonProvisionable = ResourceVersionProvisioningType("NON_PROVISIONABLE")
	ResourceVersionProvisioningTypeImmutable        = ResourceVersionProvisioningType("IMMUTABLE")
	ResourceVersionProvisioningTypeFullyMutable     = ResourceVersionProvisioningType("FULLY_MUTABLE")
)

func (ResourceVersionProvisioningType) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceVersionProvisioningType)(nil)).Elem()
}

func (e ResourceVersionProvisioningType) ToResourceVersionProvisioningTypeOutput() ResourceVersionProvisioningTypeOutput {
	return pulumi.ToOutput(e).(ResourceVersionProvisioningTypeOutput)
}

func (e ResourceVersionProvisioningType) ToResourceVersionProvisioningTypeOutputWithContext(ctx context.Context) ResourceVersionProvisioningTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ResourceVersionProvisioningTypeOutput)
}

func (e ResourceVersionProvisioningType) ToResourceVersionProvisioningTypePtrOutput() ResourceVersionProvisioningTypePtrOutput {
	return e.ToResourceVersionProvisioningTypePtrOutputWithContext(context.Background())
}

func (e ResourceVersionProvisioningType) ToResourceVersionProvisioningTypePtrOutputWithContext(ctx context.Context) ResourceVersionProvisioningTypePtrOutput {
	return ResourceVersionProvisioningType(e).ToResourceVersionProvisioningTypeOutputWithContext(ctx).ToResourceVersionProvisioningTypePtrOutputWithContext(ctx)
}

func (e ResourceVersionProvisioningType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResourceVersionProvisioningType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResourceVersionProvisioningType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ResourceVersionProvisioningType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ResourceVersionProvisioningTypeOutput struct{ *pulumi.OutputState }

func (ResourceVersionProvisioningTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceVersionProvisioningType)(nil)).Elem()
}

func (o ResourceVersionProvisioningTypeOutput) ToResourceVersionProvisioningTypeOutput() ResourceVersionProvisioningTypeOutput {
	return o
}

func (o ResourceVersionProvisioningTypeOutput) ToResourceVersionProvisioningTypeOutputWithContext(ctx context.Context) ResourceVersionProvisioningTypeOutput {
	return o
}

func (o ResourceVersionProvisioningTypeOutput) ToResourceVersionProvisioningTypePtrOutput() ResourceVersionProvisioningTypePtrOutput {
	return o.ToResourceVersionProvisioningTypePtrOutputWithContext(context.Background())
}

func (o ResourceVersionProvisioningTypeOutput) ToResourceVersionProvisioningTypePtrOutputWithContext(ctx context.Context) ResourceVersionProvisioningTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceVersionProvisioningType) *ResourceVersionProvisioningType {
		return &v
	}).(ResourceVersionProvisioningTypePtrOutput)
}

func (o ResourceVersionProvisioningTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ResourceVersionProvisioningTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ResourceVersionProvisioningType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ResourceVersionProvisioningTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ResourceVersionProvisioningTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ResourceVersionProvisioningType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ResourceVersionProvisioningTypePtrOutput struct{ *pulumi.OutputState }

func (ResourceVersionProvisioningTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceVersionProvisioningType)(nil)).Elem()
}

func (o ResourceVersionProvisioningTypePtrOutput) ToResourceVersionProvisioningTypePtrOutput() ResourceVersionProvisioningTypePtrOutput {
	return o
}

func (o ResourceVersionProvisioningTypePtrOutput) ToResourceVersionProvisioningTypePtrOutputWithContext(ctx context.Context) ResourceVersionProvisioningTypePtrOutput {
	return o
}

func (o ResourceVersionProvisioningTypePtrOutput) Elem() ResourceVersionProvisioningTypeOutput {
	return o.ApplyT(func(v *ResourceVersionProvisioningType) ResourceVersionProvisioningType {
		if v != nil {
			return *v
		}
		var ret ResourceVersionProvisioningType
		return ret
	}).(ResourceVersionProvisioningTypeOutput)
}

func (o ResourceVersionProvisioningTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ResourceVersionProvisioningTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ResourceVersionProvisioningType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ResourceVersionProvisioningTypeInput is an input type that accepts ResourceVersionProvisioningTypeArgs and ResourceVersionProvisioningTypeOutput values.
// You can construct a concrete instance of `ResourceVersionProvisioningTypeInput` via:
//
//          ResourceVersionProvisioningTypeArgs{...}
type ResourceVersionProvisioningTypeInput interface {
	pulumi.Input

	ToResourceVersionProvisioningTypeOutput() ResourceVersionProvisioningTypeOutput
	ToResourceVersionProvisioningTypeOutputWithContext(context.Context) ResourceVersionProvisioningTypeOutput
}

var resourceVersionProvisioningTypePtrType = reflect.TypeOf((**ResourceVersionProvisioningType)(nil)).Elem()

type ResourceVersionProvisioningTypePtrInput interface {
	pulumi.Input

	ToResourceVersionProvisioningTypePtrOutput() ResourceVersionProvisioningTypePtrOutput
	ToResourceVersionProvisioningTypePtrOutputWithContext(context.Context) ResourceVersionProvisioningTypePtrOutput
}

type resourceVersionProvisioningTypePtr string

func ResourceVersionProvisioningTypePtr(v string) ResourceVersionProvisioningTypePtrInput {
	return (*resourceVersionProvisioningTypePtr)(&v)
}

func (*resourceVersionProvisioningTypePtr) ElementType() reflect.Type {
	return resourceVersionProvisioningTypePtrType
}

func (in *resourceVersionProvisioningTypePtr) ToResourceVersionProvisioningTypePtrOutput() ResourceVersionProvisioningTypePtrOutput {
	return pulumi.ToOutput(in).(ResourceVersionProvisioningTypePtrOutput)
}

func (in *resourceVersionProvisioningTypePtr) ToResourceVersionProvisioningTypePtrOutputWithContext(ctx context.Context) ResourceVersionProvisioningTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ResourceVersionProvisioningTypePtrOutput)
}

// The scope at which the type is visible and usable in CloudFormation operations.
//
// Valid values include:
//
// PRIVATE: The type is only visible and usable within the account in which it is registered. Currently, AWS CloudFormation marks any types you register as PRIVATE.
//
// PUBLIC: The type is publically visible and usable within any Amazon account.
type ResourceVersionVisibility string

const (
	ResourceVersionVisibilityPublic  = ResourceVersionVisibility("PUBLIC")
	ResourceVersionVisibilityPrivate = ResourceVersionVisibility("PRIVATE")
)

func (ResourceVersionVisibility) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceVersionVisibility)(nil)).Elem()
}

func (e ResourceVersionVisibility) ToResourceVersionVisibilityOutput() ResourceVersionVisibilityOutput {
	return pulumi.ToOutput(e).(ResourceVersionVisibilityOutput)
}

func (e ResourceVersionVisibility) ToResourceVersionVisibilityOutputWithContext(ctx context.Context) ResourceVersionVisibilityOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ResourceVersionVisibilityOutput)
}

func (e ResourceVersionVisibility) ToResourceVersionVisibilityPtrOutput() ResourceVersionVisibilityPtrOutput {
	return e.ToResourceVersionVisibilityPtrOutputWithContext(context.Background())
}

func (e ResourceVersionVisibility) ToResourceVersionVisibilityPtrOutputWithContext(ctx context.Context) ResourceVersionVisibilityPtrOutput {
	return ResourceVersionVisibility(e).ToResourceVersionVisibilityOutputWithContext(ctx).ToResourceVersionVisibilityPtrOutputWithContext(ctx)
}

func (e ResourceVersionVisibility) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResourceVersionVisibility) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResourceVersionVisibility) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ResourceVersionVisibility) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ResourceVersionVisibilityOutput struct{ *pulumi.OutputState }

func (ResourceVersionVisibilityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceVersionVisibility)(nil)).Elem()
}

func (o ResourceVersionVisibilityOutput) ToResourceVersionVisibilityOutput() ResourceVersionVisibilityOutput {
	return o
}

func (o ResourceVersionVisibilityOutput) ToResourceVersionVisibilityOutputWithContext(ctx context.Context) ResourceVersionVisibilityOutput {
	return o
}

func (o ResourceVersionVisibilityOutput) ToResourceVersionVisibilityPtrOutput() ResourceVersionVisibilityPtrOutput {
	return o.ToResourceVersionVisibilityPtrOutputWithContext(context.Background())
}

func (o ResourceVersionVisibilityOutput) ToResourceVersionVisibilityPtrOutputWithContext(ctx context.Context) ResourceVersionVisibilityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceVersionVisibility) *ResourceVersionVisibility {
		return &v
	}).(ResourceVersionVisibilityPtrOutput)
}

func (o ResourceVersionVisibilityOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ResourceVersionVisibilityOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ResourceVersionVisibility) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ResourceVersionVisibilityOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ResourceVersionVisibilityOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ResourceVersionVisibility) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ResourceVersionVisibilityPtrOutput struct{ *pulumi.OutputState }

func (ResourceVersionVisibilityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceVersionVisibility)(nil)).Elem()
}

func (o ResourceVersionVisibilityPtrOutput) ToResourceVersionVisibilityPtrOutput() ResourceVersionVisibilityPtrOutput {
	return o
}

func (o ResourceVersionVisibilityPtrOutput) ToResourceVersionVisibilityPtrOutputWithContext(ctx context.Context) ResourceVersionVisibilityPtrOutput {
	return o
}

func (o ResourceVersionVisibilityPtrOutput) Elem() ResourceVersionVisibilityOutput {
	return o.ApplyT(func(v *ResourceVersionVisibility) ResourceVersionVisibility {
		if v != nil {
			return *v
		}
		var ret ResourceVersionVisibility
		return ret
	}).(ResourceVersionVisibilityOutput)
}

func (o ResourceVersionVisibilityPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ResourceVersionVisibilityPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ResourceVersionVisibility) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ResourceVersionVisibilityInput is an input type that accepts ResourceVersionVisibilityArgs and ResourceVersionVisibilityOutput values.
// You can construct a concrete instance of `ResourceVersionVisibilityInput` via:
//
//          ResourceVersionVisibilityArgs{...}
type ResourceVersionVisibilityInput interface {
	pulumi.Input

	ToResourceVersionVisibilityOutput() ResourceVersionVisibilityOutput
	ToResourceVersionVisibilityOutputWithContext(context.Context) ResourceVersionVisibilityOutput
}

var resourceVersionVisibilityPtrType = reflect.TypeOf((**ResourceVersionVisibility)(nil)).Elem()

type ResourceVersionVisibilityPtrInput interface {
	pulumi.Input

	ToResourceVersionVisibilityPtrOutput() ResourceVersionVisibilityPtrOutput
	ToResourceVersionVisibilityPtrOutputWithContext(context.Context) ResourceVersionVisibilityPtrOutput
}

type resourceVersionVisibilityPtr string

func ResourceVersionVisibilityPtr(v string) ResourceVersionVisibilityPtrInput {
	return (*resourceVersionVisibilityPtr)(&v)
}

func (*resourceVersionVisibilityPtr) ElementType() reflect.Type {
	return resourceVersionVisibilityPtrType
}

func (in *resourceVersionVisibilityPtr) ToResourceVersionVisibilityPtrOutput() ResourceVersionVisibilityPtrOutput {
	return pulumi.ToOutput(in).(ResourceVersionVisibilityPtrOutput)
}

func (in *resourceVersionVisibilityPtr) ToResourceVersionVisibilityPtrOutputWithContext(ctx context.Context) ResourceVersionVisibilityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ResourceVersionVisibilityPtrOutput)
}

// Specifies the AWS account that you are acting from. By default, SELF is specified. For self-managed permissions, specify SELF; for service-managed permissions, if you are signed in to the organization's management account, specify SELF. If you are signed in to a delegated administrator account, specify DELEGATED_ADMIN.
type StackSetCallAs string

const (
	StackSetCallAsSelf           = StackSetCallAs("SELF")
	StackSetCallAsDelegatedAdmin = StackSetCallAs("DELEGATED_ADMIN")
)

func (StackSetCallAs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackSetCallAs)(nil)).Elem()
}

func (e StackSetCallAs) ToStackSetCallAsOutput() StackSetCallAsOutput {
	return pulumi.ToOutput(e).(StackSetCallAsOutput)
}

func (e StackSetCallAs) ToStackSetCallAsOutputWithContext(ctx context.Context) StackSetCallAsOutput {
	return pulumi.ToOutputWithContext(ctx, e).(StackSetCallAsOutput)
}

func (e StackSetCallAs) ToStackSetCallAsPtrOutput() StackSetCallAsPtrOutput {
	return e.ToStackSetCallAsPtrOutputWithContext(context.Background())
}

func (e StackSetCallAs) ToStackSetCallAsPtrOutputWithContext(ctx context.Context) StackSetCallAsPtrOutput {
	return StackSetCallAs(e).ToStackSetCallAsOutputWithContext(ctx).ToStackSetCallAsPtrOutputWithContext(ctx)
}

func (e StackSetCallAs) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e StackSetCallAs) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e StackSetCallAs) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e StackSetCallAs) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type StackSetCallAsOutput struct{ *pulumi.OutputState }

func (StackSetCallAsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackSetCallAs)(nil)).Elem()
}

func (o StackSetCallAsOutput) ToStackSetCallAsOutput() StackSetCallAsOutput {
	return o
}

func (o StackSetCallAsOutput) ToStackSetCallAsOutputWithContext(ctx context.Context) StackSetCallAsOutput {
	return o
}

func (o StackSetCallAsOutput) ToStackSetCallAsPtrOutput() StackSetCallAsPtrOutput {
	return o.ToStackSetCallAsPtrOutputWithContext(context.Background())
}

func (o StackSetCallAsOutput) ToStackSetCallAsPtrOutputWithContext(ctx context.Context) StackSetCallAsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StackSetCallAs) *StackSetCallAs {
		return &v
	}).(StackSetCallAsPtrOutput)
}

func (o StackSetCallAsOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o StackSetCallAsOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e StackSetCallAs) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o StackSetCallAsOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o StackSetCallAsOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e StackSetCallAs) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type StackSetCallAsPtrOutput struct{ *pulumi.OutputState }

func (StackSetCallAsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackSetCallAs)(nil)).Elem()
}

func (o StackSetCallAsPtrOutput) ToStackSetCallAsPtrOutput() StackSetCallAsPtrOutput {
	return o
}

func (o StackSetCallAsPtrOutput) ToStackSetCallAsPtrOutputWithContext(ctx context.Context) StackSetCallAsPtrOutput {
	return o
}

func (o StackSetCallAsPtrOutput) Elem() StackSetCallAsOutput {
	return o.ApplyT(func(v *StackSetCallAs) StackSetCallAs {
		if v != nil {
			return *v
		}
		var ret StackSetCallAs
		return ret
	}).(StackSetCallAsOutput)
}

func (o StackSetCallAsPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o StackSetCallAsPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *StackSetCallAs) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// StackSetCallAsInput is an input type that accepts StackSetCallAsArgs and StackSetCallAsOutput values.
// You can construct a concrete instance of `StackSetCallAsInput` via:
//
//          StackSetCallAsArgs{...}
type StackSetCallAsInput interface {
	pulumi.Input

	ToStackSetCallAsOutput() StackSetCallAsOutput
	ToStackSetCallAsOutputWithContext(context.Context) StackSetCallAsOutput
}

var stackSetCallAsPtrType = reflect.TypeOf((**StackSetCallAs)(nil)).Elem()

type StackSetCallAsPtrInput interface {
	pulumi.Input

	ToStackSetCallAsPtrOutput() StackSetCallAsPtrOutput
	ToStackSetCallAsPtrOutputWithContext(context.Context) StackSetCallAsPtrOutput
}

type stackSetCallAsPtr string

func StackSetCallAsPtr(v string) StackSetCallAsPtrInput {
	return (*stackSetCallAsPtr)(&v)
}

func (*stackSetCallAsPtr) ElementType() reflect.Type {
	return stackSetCallAsPtrType
}

func (in *stackSetCallAsPtr) ToStackSetCallAsPtrOutput() StackSetCallAsPtrOutput {
	return pulumi.ToOutput(in).(StackSetCallAsPtrOutput)
}

func (in *stackSetCallAsPtr) ToStackSetCallAsPtrOutputWithContext(ctx context.Context) StackSetCallAsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(StackSetCallAsPtrOutput)
}

type StackSetCapability string

const (
	StackSetCapabilityCapabilityIam        = StackSetCapability("CAPABILITY_IAM")
	StackSetCapabilityCapabilityNamedIam   = StackSetCapability("CAPABILITY_NAMED_IAM")
	StackSetCapabilityCapabilityAutoExpand = StackSetCapability("CAPABILITY_AUTO_EXPAND")
)

func (StackSetCapability) ElementType() reflect.Type {
	return reflect.TypeOf((*StackSetCapability)(nil)).Elem()
}

func (e StackSetCapability) ToStackSetCapabilityOutput() StackSetCapabilityOutput {
	return pulumi.ToOutput(e).(StackSetCapabilityOutput)
}

func (e StackSetCapability) ToStackSetCapabilityOutputWithContext(ctx context.Context) StackSetCapabilityOutput {
	return pulumi.ToOutputWithContext(ctx, e).(StackSetCapabilityOutput)
}

func (e StackSetCapability) ToStackSetCapabilityPtrOutput() StackSetCapabilityPtrOutput {
	return e.ToStackSetCapabilityPtrOutputWithContext(context.Background())
}

func (e StackSetCapability) ToStackSetCapabilityPtrOutputWithContext(ctx context.Context) StackSetCapabilityPtrOutput {
	return StackSetCapability(e).ToStackSetCapabilityOutputWithContext(ctx).ToStackSetCapabilityPtrOutputWithContext(ctx)
}

func (e StackSetCapability) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e StackSetCapability) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e StackSetCapability) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e StackSetCapability) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type StackSetCapabilityOutput struct{ *pulumi.OutputState }

func (StackSetCapabilityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackSetCapability)(nil)).Elem()
}

func (o StackSetCapabilityOutput) ToStackSetCapabilityOutput() StackSetCapabilityOutput {
	return o
}

func (o StackSetCapabilityOutput) ToStackSetCapabilityOutputWithContext(ctx context.Context) StackSetCapabilityOutput {
	return o
}

func (o StackSetCapabilityOutput) ToStackSetCapabilityPtrOutput() StackSetCapabilityPtrOutput {
	return o.ToStackSetCapabilityPtrOutputWithContext(context.Background())
}

func (o StackSetCapabilityOutput) ToStackSetCapabilityPtrOutputWithContext(ctx context.Context) StackSetCapabilityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StackSetCapability) *StackSetCapability {
		return &v
	}).(StackSetCapabilityPtrOutput)
}

func (o StackSetCapabilityOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o StackSetCapabilityOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e StackSetCapability) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o StackSetCapabilityOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o StackSetCapabilityOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e StackSetCapability) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type StackSetCapabilityPtrOutput struct{ *pulumi.OutputState }

func (StackSetCapabilityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackSetCapability)(nil)).Elem()
}

func (o StackSetCapabilityPtrOutput) ToStackSetCapabilityPtrOutput() StackSetCapabilityPtrOutput {
	return o
}

func (o StackSetCapabilityPtrOutput) ToStackSetCapabilityPtrOutputWithContext(ctx context.Context) StackSetCapabilityPtrOutput {
	return o
}

func (o StackSetCapabilityPtrOutput) Elem() StackSetCapabilityOutput {
	return o.ApplyT(func(v *StackSetCapability) StackSetCapability {
		if v != nil {
			return *v
		}
		var ret StackSetCapability
		return ret
	}).(StackSetCapabilityOutput)
}

func (o StackSetCapabilityPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o StackSetCapabilityPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *StackSetCapability) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// StackSetCapabilityInput is an input type that accepts StackSetCapabilityArgs and StackSetCapabilityOutput values.
// You can construct a concrete instance of `StackSetCapabilityInput` via:
//
//          StackSetCapabilityArgs{...}
type StackSetCapabilityInput interface {
	pulumi.Input

	ToStackSetCapabilityOutput() StackSetCapabilityOutput
	ToStackSetCapabilityOutputWithContext(context.Context) StackSetCapabilityOutput
}

var stackSetCapabilityPtrType = reflect.TypeOf((**StackSetCapability)(nil)).Elem()

type StackSetCapabilityPtrInput interface {
	pulumi.Input

	ToStackSetCapabilityPtrOutput() StackSetCapabilityPtrOutput
	ToStackSetCapabilityPtrOutputWithContext(context.Context) StackSetCapabilityPtrOutput
}

type stackSetCapabilityPtr string

func StackSetCapabilityPtr(v string) StackSetCapabilityPtrInput {
	return (*stackSetCapabilityPtr)(&v)
}

func (*stackSetCapabilityPtr) ElementType() reflect.Type {
	return stackSetCapabilityPtrType
}

func (in *stackSetCapabilityPtr) ToStackSetCapabilityPtrOutput() StackSetCapabilityPtrOutput {
	return pulumi.ToOutput(in).(StackSetCapabilityPtrOutput)
}

func (in *stackSetCapabilityPtr) ToStackSetCapabilityPtrOutputWithContext(ctx context.Context) StackSetCapabilityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(StackSetCapabilityPtrOutput)
}

// StackSetCapabilityArrayInput is an input type that accepts StackSetCapabilityArray and StackSetCapabilityArrayOutput values.
// You can construct a concrete instance of `StackSetCapabilityArrayInput` via:
//
//          StackSetCapabilityArray{ StackSetCapabilityArgs{...} }
type StackSetCapabilityArrayInput interface {
	pulumi.Input

	ToStackSetCapabilityArrayOutput() StackSetCapabilityArrayOutput
	ToStackSetCapabilityArrayOutputWithContext(context.Context) StackSetCapabilityArrayOutput
}

type StackSetCapabilityArray []StackSetCapability

func (StackSetCapabilityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StackSetCapability)(nil)).Elem()
}

func (i StackSetCapabilityArray) ToStackSetCapabilityArrayOutput() StackSetCapabilityArrayOutput {
	return i.ToStackSetCapabilityArrayOutputWithContext(context.Background())
}

func (i StackSetCapabilityArray) ToStackSetCapabilityArrayOutputWithContext(ctx context.Context) StackSetCapabilityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackSetCapabilityArrayOutput)
}

type StackSetCapabilityArrayOutput struct{ *pulumi.OutputState }

func (StackSetCapabilityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StackSetCapability)(nil)).Elem()
}

func (o StackSetCapabilityArrayOutput) ToStackSetCapabilityArrayOutput() StackSetCapabilityArrayOutput {
	return o
}

func (o StackSetCapabilityArrayOutput) ToStackSetCapabilityArrayOutputWithContext(ctx context.Context) StackSetCapabilityArrayOutput {
	return o
}

func (o StackSetCapabilityArrayOutput) Index(i pulumi.IntInput) StackSetCapabilityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StackSetCapability {
		return vs[0].([]StackSetCapability)[vs[1].(int)]
	}).(StackSetCapabilityOutput)
}

// Describes how the IAM roles required for stack set operations are created. By default, SELF-MANAGED is specified.
type StackSetPermissionModel string

const (
	StackSetPermissionModelServiceManaged = StackSetPermissionModel("SERVICE_MANAGED")
	StackSetPermissionModelSelfManaged    = StackSetPermissionModel("SELF_MANAGED")
)

func (StackSetPermissionModel) ElementType() reflect.Type {
	return reflect.TypeOf((*StackSetPermissionModel)(nil)).Elem()
}

func (e StackSetPermissionModel) ToStackSetPermissionModelOutput() StackSetPermissionModelOutput {
	return pulumi.ToOutput(e).(StackSetPermissionModelOutput)
}

func (e StackSetPermissionModel) ToStackSetPermissionModelOutputWithContext(ctx context.Context) StackSetPermissionModelOutput {
	return pulumi.ToOutputWithContext(ctx, e).(StackSetPermissionModelOutput)
}

func (e StackSetPermissionModel) ToStackSetPermissionModelPtrOutput() StackSetPermissionModelPtrOutput {
	return e.ToStackSetPermissionModelPtrOutputWithContext(context.Background())
}

func (e StackSetPermissionModel) ToStackSetPermissionModelPtrOutputWithContext(ctx context.Context) StackSetPermissionModelPtrOutput {
	return StackSetPermissionModel(e).ToStackSetPermissionModelOutputWithContext(ctx).ToStackSetPermissionModelPtrOutputWithContext(ctx)
}

func (e StackSetPermissionModel) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e StackSetPermissionModel) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e StackSetPermissionModel) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e StackSetPermissionModel) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type StackSetPermissionModelOutput struct{ *pulumi.OutputState }

func (StackSetPermissionModelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackSetPermissionModel)(nil)).Elem()
}

func (o StackSetPermissionModelOutput) ToStackSetPermissionModelOutput() StackSetPermissionModelOutput {
	return o
}

func (o StackSetPermissionModelOutput) ToStackSetPermissionModelOutputWithContext(ctx context.Context) StackSetPermissionModelOutput {
	return o
}

func (o StackSetPermissionModelOutput) ToStackSetPermissionModelPtrOutput() StackSetPermissionModelPtrOutput {
	return o.ToStackSetPermissionModelPtrOutputWithContext(context.Background())
}

func (o StackSetPermissionModelOutput) ToStackSetPermissionModelPtrOutputWithContext(ctx context.Context) StackSetPermissionModelPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StackSetPermissionModel) *StackSetPermissionModel {
		return &v
	}).(StackSetPermissionModelPtrOutput)
}

func (o StackSetPermissionModelOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o StackSetPermissionModelOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e StackSetPermissionModel) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o StackSetPermissionModelOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o StackSetPermissionModelOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e StackSetPermissionModel) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type StackSetPermissionModelPtrOutput struct{ *pulumi.OutputState }

func (StackSetPermissionModelPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackSetPermissionModel)(nil)).Elem()
}

func (o StackSetPermissionModelPtrOutput) ToStackSetPermissionModelPtrOutput() StackSetPermissionModelPtrOutput {
	return o
}

func (o StackSetPermissionModelPtrOutput) ToStackSetPermissionModelPtrOutputWithContext(ctx context.Context) StackSetPermissionModelPtrOutput {
	return o
}

func (o StackSetPermissionModelPtrOutput) Elem() StackSetPermissionModelOutput {
	return o.ApplyT(func(v *StackSetPermissionModel) StackSetPermissionModel {
		if v != nil {
			return *v
		}
		var ret StackSetPermissionModel
		return ret
	}).(StackSetPermissionModelOutput)
}

func (o StackSetPermissionModelPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o StackSetPermissionModelPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *StackSetPermissionModel) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// StackSetPermissionModelInput is an input type that accepts StackSetPermissionModelArgs and StackSetPermissionModelOutput values.
// You can construct a concrete instance of `StackSetPermissionModelInput` via:
//
//          StackSetPermissionModelArgs{...}
type StackSetPermissionModelInput interface {
	pulumi.Input

	ToStackSetPermissionModelOutput() StackSetPermissionModelOutput
	ToStackSetPermissionModelOutputWithContext(context.Context) StackSetPermissionModelOutput
}

var stackSetPermissionModelPtrType = reflect.TypeOf((**StackSetPermissionModel)(nil)).Elem()

type StackSetPermissionModelPtrInput interface {
	pulumi.Input

	ToStackSetPermissionModelPtrOutput() StackSetPermissionModelPtrOutput
	ToStackSetPermissionModelPtrOutputWithContext(context.Context) StackSetPermissionModelPtrOutput
}

type stackSetPermissionModelPtr string

func StackSetPermissionModelPtr(v string) StackSetPermissionModelPtrInput {
	return (*stackSetPermissionModelPtr)(&v)
}

func (*stackSetPermissionModelPtr) ElementType() reflect.Type {
	return stackSetPermissionModelPtrType
}

func (in *stackSetPermissionModelPtr) ToStackSetPermissionModelPtrOutput() StackSetPermissionModelPtrOutput {
	return pulumi.ToOutput(in).(StackSetPermissionModelPtrOutput)
}

func (in *stackSetPermissionModelPtr) ToStackSetPermissionModelPtrOutputWithContext(ctx context.Context) StackSetPermissionModelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(StackSetPermissionModelPtrOutput)
}

// The concurrency type of deploying StackSets operations in regions, could be in parallel or one region at a time
type StackSetRegionConcurrencyType string

const (
	StackSetRegionConcurrencyTypeSequential = StackSetRegionConcurrencyType("SEQUENTIAL")
	StackSetRegionConcurrencyTypeParallel   = StackSetRegionConcurrencyType("PARALLEL")
)

func (StackSetRegionConcurrencyType) ElementType() reflect.Type {
	return reflect.TypeOf((*StackSetRegionConcurrencyType)(nil)).Elem()
}

func (e StackSetRegionConcurrencyType) ToStackSetRegionConcurrencyTypeOutput() StackSetRegionConcurrencyTypeOutput {
	return pulumi.ToOutput(e).(StackSetRegionConcurrencyTypeOutput)
}

func (e StackSetRegionConcurrencyType) ToStackSetRegionConcurrencyTypeOutputWithContext(ctx context.Context) StackSetRegionConcurrencyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(StackSetRegionConcurrencyTypeOutput)
}

func (e StackSetRegionConcurrencyType) ToStackSetRegionConcurrencyTypePtrOutput() StackSetRegionConcurrencyTypePtrOutput {
	return e.ToStackSetRegionConcurrencyTypePtrOutputWithContext(context.Background())
}

func (e StackSetRegionConcurrencyType) ToStackSetRegionConcurrencyTypePtrOutputWithContext(ctx context.Context) StackSetRegionConcurrencyTypePtrOutput {
	return StackSetRegionConcurrencyType(e).ToStackSetRegionConcurrencyTypeOutputWithContext(ctx).ToStackSetRegionConcurrencyTypePtrOutputWithContext(ctx)
}

func (e StackSetRegionConcurrencyType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e StackSetRegionConcurrencyType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e StackSetRegionConcurrencyType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e StackSetRegionConcurrencyType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type StackSetRegionConcurrencyTypeOutput struct{ *pulumi.OutputState }

func (StackSetRegionConcurrencyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackSetRegionConcurrencyType)(nil)).Elem()
}

func (o StackSetRegionConcurrencyTypeOutput) ToStackSetRegionConcurrencyTypeOutput() StackSetRegionConcurrencyTypeOutput {
	return o
}

func (o StackSetRegionConcurrencyTypeOutput) ToStackSetRegionConcurrencyTypeOutputWithContext(ctx context.Context) StackSetRegionConcurrencyTypeOutput {
	return o
}

func (o StackSetRegionConcurrencyTypeOutput) ToStackSetRegionConcurrencyTypePtrOutput() StackSetRegionConcurrencyTypePtrOutput {
	return o.ToStackSetRegionConcurrencyTypePtrOutputWithContext(context.Background())
}

func (o StackSetRegionConcurrencyTypeOutput) ToStackSetRegionConcurrencyTypePtrOutputWithContext(ctx context.Context) StackSetRegionConcurrencyTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StackSetRegionConcurrencyType) *StackSetRegionConcurrencyType {
		return &v
	}).(StackSetRegionConcurrencyTypePtrOutput)
}

func (o StackSetRegionConcurrencyTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o StackSetRegionConcurrencyTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e StackSetRegionConcurrencyType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o StackSetRegionConcurrencyTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o StackSetRegionConcurrencyTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e StackSetRegionConcurrencyType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type StackSetRegionConcurrencyTypePtrOutput struct{ *pulumi.OutputState }

func (StackSetRegionConcurrencyTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackSetRegionConcurrencyType)(nil)).Elem()
}

func (o StackSetRegionConcurrencyTypePtrOutput) ToStackSetRegionConcurrencyTypePtrOutput() StackSetRegionConcurrencyTypePtrOutput {
	return o
}

func (o StackSetRegionConcurrencyTypePtrOutput) ToStackSetRegionConcurrencyTypePtrOutputWithContext(ctx context.Context) StackSetRegionConcurrencyTypePtrOutput {
	return o
}

func (o StackSetRegionConcurrencyTypePtrOutput) Elem() StackSetRegionConcurrencyTypeOutput {
	return o.ApplyT(func(v *StackSetRegionConcurrencyType) StackSetRegionConcurrencyType {
		if v != nil {
			return *v
		}
		var ret StackSetRegionConcurrencyType
		return ret
	}).(StackSetRegionConcurrencyTypeOutput)
}

func (o StackSetRegionConcurrencyTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o StackSetRegionConcurrencyTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *StackSetRegionConcurrencyType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// StackSetRegionConcurrencyTypeInput is an input type that accepts StackSetRegionConcurrencyTypeArgs and StackSetRegionConcurrencyTypeOutput values.
// You can construct a concrete instance of `StackSetRegionConcurrencyTypeInput` via:
//
//          StackSetRegionConcurrencyTypeArgs{...}
type StackSetRegionConcurrencyTypeInput interface {
	pulumi.Input

	ToStackSetRegionConcurrencyTypeOutput() StackSetRegionConcurrencyTypeOutput
	ToStackSetRegionConcurrencyTypeOutputWithContext(context.Context) StackSetRegionConcurrencyTypeOutput
}

var stackSetRegionConcurrencyTypePtrType = reflect.TypeOf((**StackSetRegionConcurrencyType)(nil)).Elem()

type StackSetRegionConcurrencyTypePtrInput interface {
	pulumi.Input

	ToStackSetRegionConcurrencyTypePtrOutput() StackSetRegionConcurrencyTypePtrOutput
	ToStackSetRegionConcurrencyTypePtrOutputWithContext(context.Context) StackSetRegionConcurrencyTypePtrOutput
}

type stackSetRegionConcurrencyTypePtr string

func StackSetRegionConcurrencyTypePtr(v string) StackSetRegionConcurrencyTypePtrInput {
	return (*stackSetRegionConcurrencyTypePtr)(&v)
}

func (*stackSetRegionConcurrencyTypePtr) ElementType() reflect.Type {
	return stackSetRegionConcurrencyTypePtrType
}

func (in *stackSetRegionConcurrencyTypePtr) ToStackSetRegionConcurrencyTypePtrOutput() StackSetRegionConcurrencyTypePtrOutput {
	return pulumi.ToOutput(in).(StackSetRegionConcurrencyTypePtrOutput)
}

func (in *stackSetRegionConcurrencyTypePtr) ToStackSetRegionConcurrencyTypePtrOutputWithContext(ctx context.Context) StackSetRegionConcurrencyTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(StackSetRegionConcurrencyTypePtrOutput)
}

// The kind of extension
type TypeActivationType string

const (
	TypeActivationTypeResource = TypeActivationType("RESOURCE")
	TypeActivationTypeModule   = TypeActivationType("MODULE")
)

func (TypeActivationType) ElementType() reflect.Type {
	return reflect.TypeOf((*TypeActivationType)(nil)).Elem()
}

func (e TypeActivationType) ToTypeActivationTypeOutput() TypeActivationTypeOutput {
	return pulumi.ToOutput(e).(TypeActivationTypeOutput)
}

func (e TypeActivationType) ToTypeActivationTypeOutputWithContext(ctx context.Context) TypeActivationTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(TypeActivationTypeOutput)
}

func (e TypeActivationType) ToTypeActivationTypePtrOutput() TypeActivationTypePtrOutput {
	return e.ToTypeActivationTypePtrOutputWithContext(context.Background())
}

func (e TypeActivationType) ToTypeActivationTypePtrOutputWithContext(ctx context.Context) TypeActivationTypePtrOutput {
	return TypeActivationType(e).ToTypeActivationTypeOutputWithContext(ctx).ToTypeActivationTypePtrOutputWithContext(ctx)
}

func (e TypeActivationType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e TypeActivationType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e TypeActivationType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e TypeActivationType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type TypeActivationTypeOutput struct{ *pulumi.OutputState }

func (TypeActivationTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TypeActivationType)(nil)).Elem()
}

func (o TypeActivationTypeOutput) ToTypeActivationTypeOutput() TypeActivationTypeOutput {
	return o
}

func (o TypeActivationTypeOutput) ToTypeActivationTypeOutputWithContext(ctx context.Context) TypeActivationTypeOutput {
	return o
}

func (o TypeActivationTypeOutput) ToTypeActivationTypePtrOutput() TypeActivationTypePtrOutput {
	return o.ToTypeActivationTypePtrOutputWithContext(context.Background())
}

func (o TypeActivationTypeOutput) ToTypeActivationTypePtrOutputWithContext(ctx context.Context) TypeActivationTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TypeActivationType) *TypeActivationType {
		return &v
	}).(TypeActivationTypePtrOutput)
}

func (o TypeActivationTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o TypeActivationTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TypeActivationType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o TypeActivationTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TypeActivationTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TypeActivationType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type TypeActivationTypePtrOutput struct{ *pulumi.OutputState }

func (TypeActivationTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TypeActivationType)(nil)).Elem()
}

func (o TypeActivationTypePtrOutput) ToTypeActivationTypePtrOutput() TypeActivationTypePtrOutput {
	return o
}

func (o TypeActivationTypePtrOutput) ToTypeActivationTypePtrOutputWithContext(ctx context.Context) TypeActivationTypePtrOutput {
	return o
}

func (o TypeActivationTypePtrOutput) Elem() TypeActivationTypeOutput {
	return o.ApplyT(func(v *TypeActivationType) TypeActivationType {
		if v != nil {
			return *v
		}
		var ret TypeActivationType
		return ret
	}).(TypeActivationTypeOutput)
}

func (o TypeActivationTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TypeActivationTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *TypeActivationType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// TypeActivationTypeInput is an input type that accepts TypeActivationTypeArgs and TypeActivationTypeOutput values.
// You can construct a concrete instance of `TypeActivationTypeInput` via:
//
//          TypeActivationTypeArgs{...}
type TypeActivationTypeInput interface {
	pulumi.Input

	ToTypeActivationTypeOutput() TypeActivationTypeOutput
	ToTypeActivationTypeOutputWithContext(context.Context) TypeActivationTypeOutput
}

var typeActivationTypePtrType = reflect.TypeOf((**TypeActivationType)(nil)).Elem()

type TypeActivationTypePtrInput interface {
	pulumi.Input

	ToTypeActivationTypePtrOutput() TypeActivationTypePtrOutput
	ToTypeActivationTypePtrOutputWithContext(context.Context) TypeActivationTypePtrOutput
}

type typeActivationTypePtr string

func TypeActivationTypePtr(v string) TypeActivationTypePtrInput {
	return (*typeActivationTypePtr)(&v)
}

func (*typeActivationTypePtr) ElementType() reflect.Type {
	return typeActivationTypePtrType
}

func (in *typeActivationTypePtr) ToTypeActivationTypePtrOutput() TypeActivationTypePtrOutput {
	return pulumi.ToOutput(in).(TypeActivationTypePtrOutput)
}

func (in *typeActivationTypePtr) ToTypeActivationTypePtrOutputWithContext(ctx context.Context) TypeActivationTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(TypeActivationTypePtrOutput)
}

// Manually updates a previously-enabled type to a new major or minor version, if available. You can also use this parameter to update the value of AutoUpdateEnabled
type TypeActivationVersionBump string

const (
	TypeActivationVersionBumpMajor = TypeActivationVersionBump("MAJOR")
	TypeActivationVersionBumpMinor = TypeActivationVersionBump("MINOR")
)

func (TypeActivationVersionBump) ElementType() reflect.Type {
	return reflect.TypeOf((*TypeActivationVersionBump)(nil)).Elem()
}

func (e TypeActivationVersionBump) ToTypeActivationVersionBumpOutput() TypeActivationVersionBumpOutput {
	return pulumi.ToOutput(e).(TypeActivationVersionBumpOutput)
}

func (e TypeActivationVersionBump) ToTypeActivationVersionBumpOutputWithContext(ctx context.Context) TypeActivationVersionBumpOutput {
	return pulumi.ToOutputWithContext(ctx, e).(TypeActivationVersionBumpOutput)
}

func (e TypeActivationVersionBump) ToTypeActivationVersionBumpPtrOutput() TypeActivationVersionBumpPtrOutput {
	return e.ToTypeActivationVersionBumpPtrOutputWithContext(context.Background())
}

func (e TypeActivationVersionBump) ToTypeActivationVersionBumpPtrOutputWithContext(ctx context.Context) TypeActivationVersionBumpPtrOutput {
	return TypeActivationVersionBump(e).ToTypeActivationVersionBumpOutputWithContext(ctx).ToTypeActivationVersionBumpPtrOutputWithContext(ctx)
}

func (e TypeActivationVersionBump) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e TypeActivationVersionBump) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e TypeActivationVersionBump) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e TypeActivationVersionBump) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type TypeActivationVersionBumpOutput struct{ *pulumi.OutputState }

func (TypeActivationVersionBumpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TypeActivationVersionBump)(nil)).Elem()
}

func (o TypeActivationVersionBumpOutput) ToTypeActivationVersionBumpOutput() TypeActivationVersionBumpOutput {
	return o
}

func (o TypeActivationVersionBumpOutput) ToTypeActivationVersionBumpOutputWithContext(ctx context.Context) TypeActivationVersionBumpOutput {
	return o
}

func (o TypeActivationVersionBumpOutput) ToTypeActivationVersionBumpPtrOutput() TypeActivationVersionBumpPtrOutput {
	return o.ToTypeActivationVersionBumpPtrOutputWithContext(context.Background())
}

func (o TypeActivationVersionBumpOutput) ToTypeActivationVersionBumpPtrOutputWithContext(ctx context.Context) TypeActivationVersionBumpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TypeActivationVersionBump) *TypeActivationVersionBump {
		return &v
	}).(TypeActivationVersionBumpPtrOutput)
}

func (o TypeActivationVersionBumpOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o TypeActivationVersionBumpOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TypeActivationVersionBump) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o TypeActivationVersionBumpOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TypeActivationVersionBumpOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TypeActivationVersionBump) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type TypeActivationVersionBumpPtrOutput struct{ *pulumi.OutputState }

func (TypeActivationVersionBumpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TypeActivationVersionBump)(nil)).Elem()
}

func (o TypeActivationVersionBumpPtrOutput) ToTypeActivationVersionBumpPtrOutput() TypeActivationVersionBumpPtrOutput {
	return o
}

func (o TypeActivationVersionBumpPtrOutput) ToTypeActivationVersionBumpPtrOutputWithContext(ctx context.Context) TypeActivationVersionBumpPtrOutput {
	return o
}

func (o TypeActivationVersionBumpPtrOutput) Elem() TypeActivationVersionBumpOutput {
	return o.ApplyT(func(v *TypeActivationVersionBump) TypeActivationVersionBump {
		if v != nil {
			return *v
		}
		var ret TypeActivationVersionBump
		return ret
	}).(TypeActivationVersionBumpOutput)
}

func (o TypeActivationVersionBumpPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TypeActivationVersionBumpPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *TypeActivationVersionBump) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// TypeActivationVersionBumpInput is an input type that accepts TypeActivationVersionBumpArgs and TypeActivationVersionBumpOutput values.
// You can construct a concrete instance of `TypeActivationVersionBumpInput` via:
//
//          TypeActivationVersionBumpArgs{...}
type TypeActivationVersionBumpInput interface {
	pulumi.Input

	ToTypeActivationVersionBumpOutput() TypeActivationVersionBumpOutput
	ToTypeActivationVersionBumpOutputWithContext(context.Context) TypeActivationVersionBumpOutput
}

var typeActivationVersionBumpPtrType = reflect.TypeOf((**TypeActivationVersionBump)(nil)).Elem()

type TypeActivationVersionBumpPtrInput interface {
	pulumi.Input

	ToTypeActivationVersionBumpPtrOutput() TypeActivationVersionBumpPtrOutput
	ToTypeActivationVersionBumpPtrOutputWithContext(context.Context) TypeActivationVersionBumpPtrOutput
}

type typeActivationVersionBumpPtr string

func TypeActivationVersionBumpPtr(v string) TypeActivationVersionBumpPtrInput {
	return (*typeActivationVersionBumpPtr)(&v)
}

func (*typeActivationVersionBumpPtr) ElementType() reflect.Type {
	return typeActivationVersionBumpPtrType
}

func (in *typeActivationVersionBumpPtr) ToTypeActivationVersionBumpPtrOutput() TypeActivationVersionBumpPtrOutput {
	return pulumi.ToOutput(in).(TypeActivationVersionBumpPtrOutput)
}

func (in *typeActivationVersionBumpPtr) ToTypeActivationVersionBumpPtrOutputWithContext(ctx context.Context) TypeActivationVersionBumpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(TypeActivationVersionBumpPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ModuleVersionVisibilityOutput{})
	pulumi.RegisterOutputType(ModuleVersionVisibilityPtrOutput{})
	pulumi.RegisterOutputType(PublicTypeVersionTypeOutput{})
	pulumi.RegisterOutputType(PublicTypeVersionTypePtrOutput{})
	pulumi.RegisterOutputType(PublisherIdentityProviderOutput{})
	pulumi.RegisterOutputType(PublisherIdentityProviderPtrOutput{})
	pulumi.RegisterOutputType(PublisherPublisherStatusOutput{})
	pulumi.RegisterOutputType(PublisherPublisherStatusPtrOutput{})
	pulumi.RegisterOutputType(ResourceVersionProvisioningTypeOutput{})
	pulumi.RegisterOutputType(ResourceVersionProvisioningTypePtrOutput{})
	pulumi.RegisterOutputType(ResourceVersionVisibilityOutput{})
	pulumi.RegisterOutputType(ResourceVersionVisibilityPtrOutput{})
	pulumi.RegisterOutputType(StackSetCallAsOutput{})
	pulumi.RegisterOutputType(StackSetCallAsPtrOutput{})
	pulumi.RegisterOutputType(StackSetCapabilityOutput{})
	pulumi.RegisterOutputType(StackSetCapabilityPtrOutput{})
	pulumi.RegisterOutputType(StackSetCapabilityArrayOutput{})
	pulumi.RegisterOutputType(StackSetPermissionModelOutput{})
	pulumi.RegisterOutputType(StackSetPermissionModelPtrOutput{})
	pulumi.RegisterOutputType(StackSetRegionConcurrencyTypeOutput{})
	pulumi.RegisterOutputType(StackSetRegionConcurrencyTypePtrOutput{})
	pulumi.RegisterOutputType(TypeActivationTypeOutput{})
	pulumi.RegisterOutputType(TypeActivationTypePtrOutput{})
	pulumi.RegisterOutputType(TypeActivationVersionBumpOutput{})
	pulumi.RegisterOutputType(TypeActivationVersionBumpPtrOutput{})
}
