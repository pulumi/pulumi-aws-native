// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudformation

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Register as a publisher in the CloudFormation Registry.
func LookupPublisher(ctx *pulumi.Context, args *LookupPublisherArgs, opts ...pulumi.InvokeOption) (*LookupPublisherResult, error) {
	var rv LookupPublisherResult
	err := ctx.Invoke("aws-native:cloudformation:getPublisher", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupPublisherArgs struct {
	// The publisher id assigned by CloudFormation for publishing in this region.
	PublisherId string `pulumi:"publisherId"`
}

type LookupPublisherResult struct {
	// The type of account used as the identity provider when registering this publisher with CloudFormation.
	IdentityProvider *PublisherIdentityProvider `pulumi:"identityProvider"`
	// The publisher id assigned by CloudFormation for publishing in this region.
	PublisherId *string `pulumi:"publisherId"`
	// The URL to the publisher's profile with the identity provider.
	PublisherProfile *string `pulumi:"publisherProfile"`
	// Whether the publisher is verified.
	PublisherStatus *PublisherStatus `pulumi:"publisherStatus"`
}

func LookupPublisherOutput(ctx *pulumi.Context, args LookupPublisherOutputArgs, opts ...pulumi.InvokeOption) LookupPublisherResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupPublisherResult, error) {
			args := v.(LookupPublisherArgs)
			r, err := LookupPublisher(ctx, &args, opts...)
			var s LookupPublisherResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupPublisherResultOutput)
}

type LookupPublisherOutputArgs struct {
	// The publisher id assigned by CloudFormation for publishing in this region.
	PublisherId pulumi.StringInput `pulumi:"publisherId"`
}

func (LookupPublisherOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPublisherArgs)(nil)).Elem()
}

type LookupPublisherResultOutput struct{ *pulumi.OutputState }

func (LookupPublisherResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPublisherResult)(nil)).Elem()
}

func (o LookupPublisherResultOutput) ToLookupPublisherResultOutput() LookupPublisherResultOutput {
	return o
}

func (o LookupPublisherResultOutput) ToLookupPublisherResultOutputWithContext(ctx context.Context) LookupPublisherResultOutput {
	return o
}

// The type of account used as the identity provider when registering this publisher with CloudFormation.
func (o LookupPublisherResultOutput) IdentityProvider() PublisherIdentityProviderPtrOutput {
	return o.ApplyT(func(v LookupPublisherResult) *PublisherIdentityProvider { return v.IdentityProvider }).(PublisherIdentityProviderPtrOutput)
}

// The publisher id assigned by CloudFormation for publishing in this region.
func (o LookupPublisherResultOutput) PublisherId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPublisherResult) *string { return v.PublisherId }).(pulumi.StringPtrOutput)
}

// The URL to the publisher's profile with the identity provider.
func (o LookupPublisherResultOutput) PublisherProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPublisherResult) *string { return v.PublisherProfile }).(pulumi.StringPtrOutput)
}

// Whether the publisher is verified.
func (o LookupPublisherResultOutput) PublisherStatus() PublisherStatusPtrOutput {
	return o.ApplyT(func(v LookupPublisherResult) *PublisherStatus { return v.PublisherStatus }).(PublisherStatusPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPublisherResultOutput{})
}
