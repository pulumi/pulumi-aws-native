// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package inspector

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Inspector::AssessmentTemplate
type AssessmentTemplate struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) that specifies the assessment template that is created.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The ARN of the assessment target to be included in the assessment template.
	AssessmentTargetArn pulumi.StringOutput `pulumi:"assessmentTargetArn"`
	// The user-defined name that identifies the assessment template that you want to create. You can create several assessment templates for the same assessment target. The names of the assessment templates that correspond to a particular assessment target must be unique.
	AssessmentTemplateName pulumi.StringPtrOutput `pulumi:"assessmentTemplateName"`
	// The duration of the assessment run in seconds.
	DurationInSeconds pulumi.IntOutput `pulumi:"durationInSeconds"`
	// The ARNs of the rules packages that you want to use in the assessment template.
	RulesPackageArns pulumi.StringArrayOutput `pulumi:"rulesPackageArns"`
	// A key and value pair. This data type is used as a request parameter in the `SetTagsForResource` action and a response element in the `ListTagsForResource` action.
	UserAttributesForFindings AssessmentTemplateTagArrayOutput `pulumi:"userAttributesForFindings"`
}

// NewAssessmentTemplate registers a new resource with the given unique name, arguments, and options.
func NewAssessmentTemplate(ctx *pulumi.Context,
	name string, args *AssessmentTemplateArgs, opts ...pulumi.ResourceOption) (*AssessmentTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AssessmentTargetArn == nil {
		return nil, errors.New("invalid value for required argument 'AssessmentTargetArn'")
	}
	if args.DurationInSeconds == nil {
		return nil, errors.New("invalid value for required argument 'DurationInSeconds'")
	}
	if args.RulesPackageArns == nil {
		return nil, errors.New("invalid value for required argument 'RulesPackageArns'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"assessmentTargetArn",
		"assessmentTemplateName",
		"durationInSeconds",
		"rulesPackageArns[*]",
		"userAttributesForFindings[*]",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AssessmentTemplate
	err := ctx.RegisterResource("aws-native:inspector:AssessmentTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAssessmentTemplate gets an existing AssessmentTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAssessmentTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AssessmentTemplateState, opts ...pulumi.ResourceOption) (*AssessmentTemplate, error) {
	var resource AssessmentTemplate
	err := ctx.ReadResource("aws-native:inspector:AssessmentTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AssessmentTemplate resources.
type assessmentTemplateState struct {
}

type AssessmentTemplateState struct {
}

func (AssessmentTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*assessmentTemplateState)(nil)).Elem()
}

type assessmentTemplateArgs struct {
	// The ARN of the assessment target to be included in the assessment template.
	AssessmentTargetArn string `pulumi:"assessmentTargetArn"`
	// The user-defined name that identifies the assessment template that you want to create. You can create several assessment templates for the same assessment target. The names of the assessment templates that correspond to a particular assessment target must be unique.
	AssessmentTemplateName *string `pulumi:"assessmentTemplateName"`
	// The duration of the assessment run in seconds.
	DurationInSeconds int `pulumi:"durationInSeconds"`
	// The ARNs of the rules packages that you want to use in the assessment template.
	RulesPackageArns []string `pulumi:"rulesPackageArns"`
	// A key and value pair. This data type is used as a request parameter in the `SetTagsForResource` action and a response element in the `ListTagsForResource` action.
	UserAttributesForFindings []AssessmentTemplateTag `pulumi:"userAttributesForFindings"`
}

// The set of arguments for constructing a AssessmentTemplate resource.
type AssessmentTemplateArgs struct {
	// The ARN of the assessment target to be included in the assessment template.
	AssessmentTargetArn pulumi.StringInput
	// The user-defined name that identifies the assessment template that you want to create. You can create several assessment templates for the same assessment target. The names of the assessment templates that correspond to a particular assessment target must be unique.
	AssessmentTemplateName pulumi.StringPtrInput
	// The duration of the assessment run in seconds.
	DurationInSeconds pulumi.IntInput
	// The ARNs of the rules packages that you want to use in the assessment template.
	RulesPackageArns pulumi.StringArrayInput
	// A key and value pair. This data type is used as a request parameter in the `SetTagsForResource` action and a response element in the `ListTagsForResource` action.
	UserAttributesForFindings AssessmentTemplateTagArrayInput
}

func (AssessmentTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*assessmentTemplateArgs)(nil)).Elem()
}

type AssessmentTemplateInput interface {
	pulumi.Input

	ToAssessmentTemplateOutput() AssessmentTemplateOutput
	ToAssessmentTemplateOutputWithContext(ctx context.Context) AssessmentTemplateOutput
}

func (*AssessmentTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**AssessmentTemplate)(nil)).Elem()
}

func (i *AssessmentTemplate) ToAssessmentTemplateOutput() AssessmentTemplateOutput {
	return i.ToAssessmentTemplateOutputWithContext(context.Background())
}

func (i *AssessmentTemplate) ToAssessmentTemplateOutputWithContext(ctx context.Context) AssessmentTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentTemplateOutput)
}

type AssessmentTemplateOutput struct{ *pulumi.OutputState }

func (AssessmentTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssessmentTemplate)(nil)).Elem()
}

func (o AssessmentTemplateOutput) ToAssessmentTemplateOutput() AssessmentTemplateOutput {
	return o
}

func (o AssessmentTemplateOutput) ToAssessmentTemplateOutputWithContext(ctx context.Context) AssessmentTemplateOutput {
	return o
}

// The Amazon Resource Name (ARN) that specifies the assessment template that is created.
func (o AssessmentTemplateOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *AssessmentTemplate) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The ARN of the assessment target to be included in the assessment template.
func (o AssessmentTemplateOutput) AssessmentTargetArn() pulumi.StringOutput {
	return o.ApplyT(func(v *AssessmentTemplate) pulumi.StringOutput { return v.AssessmentTargetArn }).(pulumi.StringOutput)
}

// The user-defined name that identifies the assessment template that you want to create. You can create several assessment templates for the same assessment target. The names of the assessment templates that correspond to a particular assessment target must be unique.
func (o AssessmentTemplateOutput) AssessmentTemplateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssessmentTemplate) pulumi.StringPtrOutput { return v.AssessmentTemplateName }).(pulumi.StringPtrOutput)
}

// The duration of the assessment run in seconds.
func (o AssessmentTemplateOutput) DurationInSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v *AssessmentTemplate) pulumi.IntOutput { return v.DurationInSeconds }).(pulumi.IntOutput)
}

// The ARNs of the rules packages that you want to use in the assessment template.
func (o AssessmentTemplateOutput) RulesPackageArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AssessmentTemplate) pulumi.StringArrayOutput { return v.RulesPackageArns }).(pulumi.StringArrayOutput)
}

// A key and value pair. This data type is used as a request parameter in the `SetTagsForResource` action and a response element in the `ListTagsForResource` action.
func (o AssessmentTemplateOutput) UserAttributesForFindings() AssessmentTemplateTagArrayOutput {
	return o.ApplyT(func(v *AssessmentTemplate) AssessmentTemplateTagArrayOutput { return v.UserAttributesForFindings }).(AssessmentTemplateTagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AssessmentTemplateInput)(nil)).Elem(), &AssessmentTemplate{})
	pulumi.RegisterOutputType(AssessmentTemplateOutput{})
}
