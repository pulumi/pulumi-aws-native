// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package dax

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::DAX::Cluster
//
// Deprecated: Cluster is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
type Cluster struct {
	pulumi.CustomResourceState

	Arn                           pulumi.StringOutput              `pulumi:"arn"`
	AvailabilityZones             pulumi.StringArrayOutput         `pulumi:"availabilityZones"`
	ClusterDiscoveryEndpoint      pulumi.StringOutput              `pulumi:"clusterDiscoveryEndpoint"`
	ClusterDiscoveryEndpointURL   pulumi.StringOutput              `pulumi:"clusterDiscoveryEndpointURL"`
	ClusterEndpointEncryptionType pulumi.StringPtrOutput           `pulumi:"clusterEndpointEncryptionType"`
	ClusterName                   pulumi.StringPtrOutput           `pulumi:"clusterName"`
	Description                   pulumi.StringPtrOutput           `pulumi:"description"`
	IAMRoleARN                    pulumi.StringOutput              `pulumi:"iAMRoleARN"`
	NodeType                      pulumi.StringOutput              `pulumi:"nodeType"`
	NotificationTopicARN          pulumi.StringPtrOutput           `pulumi:"notificationTopicARN"`
	ParameterGroupName            pulumi.StringPtrOutput           `pulumi:"parameterGroupName"`
	PreferredMaintenanceWindow    pulumi.StringPtrOutput           `pulumi:"preferredMaintenanceWindow"`
	ReplicationFactor             pulumi.IntOutput                 `pulumi:"replicationFactor"`
	SSESpecification              ClusterSSESpecificationPtrOutput `pulumi:"sSESpecification"`
	SecurityGroupIds              pulumi.StringArrayOutput         `pulumi:"securityGroupIds"`
	SubnetGroupName               pulumi.StringPtrOutput           `pulumi:"subnetGroupName"`
	Tags                          pulumi.AnyOutput                 `pulumi:"tags"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IAMRoleARN == nil {
		return nil, errors.New("invalid value for required argument 'IAMRoleARN'")
	}
	if args.NodeType == nil {
		return nil, errors.New("invalid value for required argument 'NodeType'")
	}
	if args.ReplicationFactor == nil {
		return nil, errors.New("invalid value for required argument 'ReplicationFactor'")
	}
	var resource Cluster
	err := ctx.RegisterResource("aws-native:dax:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("aws-native:dax:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
}

type ClusterState struct {
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	AvailabilityZones             []string                 `pulumi:"availabilityZones"`
	ClusterEndpointEncryptionType *string                  `pulumi:"clusterEndpointEncryptionType"`
	ClusterName                   *string                  `pulumi:"clusterName"`
	Description                   *string                  `pulumi:"description"`
	IAMRoleARN                    string                   `pulumi:"iAMRoleARN"`
	NodeType                      string                   `pulumi:"nodeType"`
	NotificationTopicARN          *string                  `pulumi:"notificationTopicARN"`
	ParameterGroupName            *string                  `pulumi:"parameterGroupName"`
	PreferredMaintenanceWindow    *string                  `pulumi:"preferredMaintenanceWindow"`
	ReplicationFactor             int                      `pulumi:"replicationFactor"`
	SSESpecification              *ClusterSSESpecification `pulumi:"sSESpecification"`
	SecurityGroupIds              []string                 `pulumi:"securityGroupIds"`
	SubnetGroupName               *string                  `pulumi:"subnetGroupName"`
	Tags                          interface{}              `pulumi:"tags"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	AvailabilityZones             pulumi.StringArrayInput
	ClusterEndpointEncryptionType pulumi.StringPtrInput
	ClusterName                   pulumi.StringPtrInput
	Description                   pulumi.StringPtrInput
	IAMRoleARN                    pulumi.StringInput
	NodeType                      pulumi.StringInput
	NotificationTopicARN          pulumi.StringPtrInput
	ParameterGroupName            pulumi.StringPtrInput
	PreferredMaintenanceWindow    pulumi.StringPtrInput
	ReplicationFactor             pulumi.IntInput
	SSESpecification              ClusterSSESpecificationPtrInput
	SecurityGroupIds              pulumi.StringArrayInput
	SubnetGroupName               pulumi.StringPtrInput
	Tags                          pulumi.Input
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((*Cluster)(nil))
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Cluster)(nil))
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ClusterOutput{})
}
