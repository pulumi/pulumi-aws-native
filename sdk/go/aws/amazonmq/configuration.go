// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package amazonmq

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::AmazonMQ::Configuration
//
// ## Example Usage
// ### Example
//
// ```go
// package main
//
// import (
//
//	"encoding/base64"
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/amazonmq"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := amazonmq.NewConfiguration(ctx, "configuration", &amazonmq.ConfigurationArgs{
//				Data: pulumi.String(base64.StdEncoding.EncodeToString([]byte(`<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
//
// <broker xmlns="http://activemq.apache.org/schema/core" start="false">
//
//	<destinationPolicy>
//	  <policyMap>
//	    <policyEntries>
//	      <policyEntry topic=">">
//	        <pendingMessageLimitStrategy>
//	          <constantPendingMessageLimitStrategy limit="3000"/>
//	        </pendingMessageLimitStrategy>
//	      </policyEntry>
//	    </policyEntries>
//	  </policyMap>
//	</destinationPolicy>
//	<plugins>
//	</plugins>
//
// </broker>
// `))),
//
//				EngineType:    pulumi.String("ACTIVEMQ"),
//				EngineVersion: pulumi.String("5.15.0"),
//				Name:          pulumi.String("my-configuration-1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Configuration struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the Amazon MQ configuration.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The authentication strategy associated with the configuration. The default is SIMPLE.
	AuthenticationStrategy pulumi.StringPtrOutput `pulumi:"authenticationStrategy"`
	// The ID of the Amazon MQ configuration.
	AwsId pulumi.StringOutput `pulumi:"awsId"`
	// The base64-encoded XML configuration.
	Data pulumi.StringOutput `pulumi:"data"`
	// The description of the configuration.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The type of broker engine. Note: Currently, Amazon MQ only supports ACTIVEMQ for creating and editing broker configurations.
	EngineType pulumi.StringOutput `pulumi:"engineType"`
	// The version of the broker engine.
	EngineVersion pulumi.StringPtrOutput `pulumi:"engineVersion"`
	// The name of the configuration.
	Name pulumi.StringOutput `pulumi:"name"`
	// The revision number of the configuration.
	Revision pulumi.StringOutput `pulumi:"revision"`
	// Create tags when creating the configuration.
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewConfiguration registers a new resource with the given unique name, arguments, and options.
func NewConfiguration(ctx *pulumi.Context,
	name string, args *ConfigurationArgs, opts ...pulumi.ResourceOption) (*Configuration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Data == nil {
		return nil, errors.New("invalid value for required argument 'Data'")
	}
	if args.EngineType == nil {
		return nil, errors.New("invalid value for required argument 'EngineType'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"authenticationStrategy",
		"engineType",
		"engineVersion",
		"name",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Configuration
	err := ctx.RegisterResource("aws-native:amazonmq:Configuration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfiguration gets an existing Configuration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConfigurationState, opts ...pulumi.ResourceOption) (*Configuration, error) {
	var resource Configuration
	err := ctx.ReadResource("aws-native:amazonmq:Configuration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Configuration resources.
type configurationState struct {
}

type ConfigurationState struct {
}

func (ConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*configurationState)(nil)).Elem()
}

type configurationArgs struct {
	// The authentication strategy associated with the configuration. The default is SIMPLE.
	AuthenticationStrategy *string `pulumi:"authenticationStrategy"`
	// The base64-encoded XML configuration.
	Data string `pulumi:"data"`
	// The description of the configuration.
	Description *string `pulumi:"description"`
	// The type of broker engine. Note: Currently, Amazon MQ only supports ACTIVEMQ for creating and editing broker configurations.
	EngineType string `pulumi:"engineType"`
	// The version of the broker engine.
	EngineVersion *string `pulumi:"engineVersion"`
	// The name of the configuration.
	Name *string `pulumi:"name"`
	// Create tags when creating the configuration.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a Configuration resource.
type ConfigurationArgs struct {
	// The authentication strategy associated with the configuration. The default is SIMPLE.
	AuthenticationStrategy pulumi.StringPtrInput
	// The base64-encoded XML configuration.
	Data pulumi.StringInput
	// The description of the configuration.
	Description pulumi.StringPtrInput
	// The type of broker engine. Note: Currently, Amazon MQ only supports ACTIVEMQ for creating and editing broker configurations.
	EngineType pulumi.StringInput
	// The version of the broker engine.
	EngineVersion pulumi.StringPtrInput
	// The name of the configuration.
	Name pulumi.StringPtrInput
	// Create tags when creating the configuration.
	Tags aws.TagArrayInput
}

func (ConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*configurationArgs)(nil)).Elem()
}

type ConfigurationInput interface {
	pulumi.Input

	ToConfigurationOutput() ConfigurationOutput
	ToConfigurationOutputWithContext(ctx context.Context) ConfigurationOutput
}

func (*Configuration) ElementType() reflect.Type {
	return reflect.TypeOf((**Configuration)(nil)).Elem()
}

func (i *Configuration) ToConfigurationOutput() ConfigurationOutput {
	return i.ToConfigurationOutputWithContext(context.Background())
}

func (i *Configuration) ToConfigurationOutputWithContext(ctx context.Context) ConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationOutput)
}

type ConfigurationOutput struct{ *pulumi.OutputState }

func (ConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Configuration)(nil)).Elem()
}

func (o ConfigurationOutput) ToConfigurationOutput() ConfigurationOutput {
	return o
}

func (o ConfigurationOutput) ToConfigurationOutputWithContext(ctx context.Context) ConfigurationOutput {
	return o
}

// The Amazon Resource Name (ARN) of the Amazon MQ configuration.
func (o ConfigurationOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Configuration) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The authentication strategy associated with the configuration. The default is SIMPLE.
func (o ConfigurationOutput) AuthenticationStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Configuration) pulumi.StringPtrOutput { return v.AuthenticationStrategy }).(pulumi.StringPtrOutput)
}

// The ID of the Amazon MQ configuration.
func (o ConfigurationOutput) AwsId() pulumi.StringOutput {
	return o.ApplyT(func(v *Configuration) pulumi.StringOutput { return v.AwsId }).(pulumi.StringOutput)
}

// The base64-encoded XML configuration.
func (o ConfigurationOutput) Data() pulumi.StringOutput {
	return o.ApplyT(func(v *Configuration) pulumi.StringOutput { return v.Data }).(pulumi.StringOutput)
}

// The description of the configuration.
func (o ConfigurationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Configuration) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The type of broker engine. Note: Currently, Amazon MQ only supports ACTIVEMQ for creating and editing broker configurations.
func (o ConfigurationOutput) EngineType() pulumi.StringOutput {
	return o.ApplyT(func(v *Configuration) pulumi.StringOutput { return v.EngineType }).(pulumi.StringOutput)
}

// The version of the broker engine.
func (o ConfigurationOutput) EngineVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Configuration) pulumi.StringPtrOutput { return v.EngineVersion }).(pulumi.StringPtrOutput)
}

// The name of the configuration.
func (o ConfigurationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Configuration) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The revision number of the configuration.
func (o ConfigurationOutput) Revision() pulumi.StringOutput {
	return o.ApplyT(func(v *Configuration) pulumi.StringOutput { return v.Revision }).(pulumi.StringOutput)
}

// Create tags when creating the configuration.
func (o ConfigurationOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Configuration) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigurationInput)(nil)).Elem(), &Configuration{})
	pulumi.RegisterOutputType(ConfigurationOutput{})
}
