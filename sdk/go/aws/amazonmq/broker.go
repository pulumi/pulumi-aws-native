// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package amazonmq

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource type definition for AWS::AmazonMQ::Broker
//
// ## Example Usage
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/amazonmq"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := amazonmq.NewBroker(ctx, "basicBroker", &amazonmq.BrokerArgs{
//				AutoMinorVersionUpgrade: pulumi.Bool(false),
//				BrokerName:              pulumi.String("MyBasicActiveBroker"),
//				DeploymentMode:          pulumi.String(amazonmq.BrokerDeploymentModeSingleInstance),
//				EngineType:              pulumi.String("ActiveMQ"),
//				EngineVersion:           pulumi.String("5.15.0"),
//				HostInstanceType:        pulumi.String("mq.t2.micro"),
//				PubliclyAccessible:      pulumi.Bool(true),
//				Users: amazonmq.BrokerUserArray{
//					&amazonmq.BrokerUserArgs{
//						ConsoleAccess: pulumi.Bool(true),
//						Groups: pulumi.StringArray{
//							pulumi.String("MyGroup"),
//						},
//						Password: pulumi.String("AmazonMqPassword"),
//						Username: pulumi.String("AmazonMqUsername"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/amazonmq"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := amazonmq.NewBroker(ctx, "basicBroker", &amazonmq.BrokerArgs{
//				AutoMinorVersionUpgrade: pulumi.Bool(false),
//				BrokerName:              pulumi.String("MyBasicRabbitBroker"),
//				DeploymentMode:          pulumi.String(amazonmq.BrokerDeploymentModeSingleInstance),
//				EngineType:              pulumi.String("RabbitMQ"),
//				EngineVersion:           pulumi.String("3.8.6"),
//				HostInstanceType:        pulumi.String("mq.t3.micro"),
//				PubliclyAccessible:      pulumi.Bool(true),
//				Users: amazonmq.BrokerUserArray{
//					&amazonmq.BrokerUserArgs{
//						Password: pulumi.String("AmazonMqPassword"),
//						Username: pulumi.String("AmazonMqUsername"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/amazonmq"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := amazonmq.NewBroker(ctx, "basicBroker", &amazonmq.BrokerArgs{
//				AutoMinorVersionUpgrade: pulumi.Bool(false),
//				BrokerName:              pulumi.String("MyBasicActiveBroker"),
//				DeploymentMode:          pulumi.String(amazonmq.BrokerDeploymentModeSingleInstance),
//				EngineType:              pulumi.String("ActiveMQ"),
//				EngineVersion:           pulumi.String("5.15.0"),
//				HostInstanceType:        pulumi.String("mq.t2.micro"),
//				PubliclyAccessible:      pulumi.Bool(true),
//				Users: amazonmq.BrokerUserArray{
//					&amazonmq.BrokerUserArgs{
//						ConsoleAccess: pulumi.Bool(true),
//						Groups: pulumi.StringArray{
//							pulumi.String("MyGroup"),
//						},
//						Password: pulumi.String("AmazonMqPassword"),
//						Username: pulumi.String("AmazonMqUsername"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/amazonmq"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := amazonmq.NewBroker(ctx, "basicBroker", &amazonmq.BrokerArgs{
//				AutoMinorVersionUpgrade: pulumi.Bool(false),
//				BrokerName:              pulumi.String("MyBasicRabbitBroker"),
//				DeploymentMode:          pulumi.String(amazonmq.BrokerDeploymentModeSingleInstance),
//				EngineType:              pulumi.String("RabbitMQ"),
//				EngineVersion:           pulumi.String("3.8.6"),
//				HostInstanceType:        pulumi.String("mq.t3.micro"),
//				PubliclyAccessible:      pulumi.Bool(true),
//				Users: amazonmq.BrokerUserArray{
//					&amazonmq.BrokerUserArgs{
//						Password: pulumi.String("AmazonMqPassword"),
//						Username: pulumi.String("AmazonMqUsername"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/amazonmq"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := amazonmq.NewBroker(ctx, "complexBroker", &amazonmq.BrokerArgs{
//				AutoMinorVersionUpgrade: pulumi.Bool(true),
//				BrokerName:              pulumi.String("MyComplexRabbitBroker"),
//				DeploymentMode:          pulumi.String(amazonmq.BrokerDeploymentModeSingleInstance),
//				EngineType:              pulumi.String("RabbitMQ"),
//				EngineVersion:           pulumi.String("3.8.6"),
//				HostInstanceType:        pulumi.String("mq.t3.micro"),
//				Logs: &amazonmq.BrokerLogListArgs{
//					General: pulumi.Bool(true),
//				},
//				MaintenanceWindowStartTime: &amazonmq.BrokerMaintenanceWindowArgs{
//					DayOfWeek: pulumi.String("Monday"),
//					TimeOfDay: pulumi.String("22:45"),
//					TimeZone:  pulumi.String("America/Los_Angeles"),
//				},
//				PubliclyAccessible: pulumi.Bool(false),
//				SecurityGroups: pulumi.StringArray{
//					pulumi.String("sg-1a234b5cd6efgh7i8"),
//				},
//				SubnetIds: pulumi.StringArray{
//					pulumi.String("subnet-123456b7891abcd1f"),
//				},
//				Users: amazonmq.BrokerUserArray{
//					&amazonmq.BrokerUserArgs{
//						Password: pulumi.String("AmazonMqPassword"),
//						Username: pulumi.String("AmazonMqUsername"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/amazonmq"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := amazonmq.NewBroker(ctx, "complexBroker", &amazonmq.BrokerArgs{
//				AutoMinorVersionUpgrade: pulumi.Bool(false),
//				BrokerName:              pulumi.String("MyComplexRabbitBroker"),
//				DeploymentMode:          pulumi.String(amazonmq.BrokerDeploymentModeSingleInstance),
//				EngineType:              pulumi.String("RabbitMQ"),
//				EngineVersion:           pulumi.String("3.8.6"),
//				HostInstanceType:        pulumi.String("mq.t3.micro"),
//				Logs: &amazonmq.BrokerLogListArgs{
//					General: pulumi.Bool(true),
//				},
//				MaintenanceWindowStartTime: &amazonmq.BrokerMaintenanceWindowArgs{
//					DayOfWeek: pulumi.String("Monday"),
//					TimeOfDay: pulumi.String("22:45"),
//					TimeZone:  pulumi.String("America/Los_Angeles"),
//				},
//				PubliclyAccessible: pulumi.Bool(false),
//				SecurityGroups: pulumi.StringArray{
//					pulumi.String("sg-1a234b5cd6efgh7i8"),
//				},
//				SubnetIds: pulumi.StringArray{
//					pulumi.String("subnet-123456b7891abcd1f"),
//				},
//				Users: amazonmq.BrokerUserArray{
//					&amazonmq.BrokerUserArgs{
//						Password: pulumi.String("AmazonMqPassword"),
//						Username: pulumi.String("AmazonMqUsername"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Broker struct {
	pulumi.CustomResourceState

	// The AMQP endpoints of each broker instance as a list of strings.
	//
	// `amqp+ssl://b-4aada85d-a80c-4be0-9d30-e344a01b921e-1.mq.eu-central-amazonaws.com:5671`
	AmqpEndpoints pulumi.StringArrayOutput `pulumi:"amqpEndpoints"`
	// The Amazon Resource Name (ARN) of the Amazon MQ broker.
	//
	// `arn:aws:mq:us-east-2:123456789012:broker:MyBroker:b-1234a5b6-78cd-901e-2fgh-3i45j6k178l9`
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Optional. The authentication strategy used to secure the broker. The default is `SIMPLE` .
	AuthenticationStrategy pulumi.StringPtrOutput `pulumi:"authenticationStrategy"`
	// Enables automatic upgrades to new minor versions for brokers, as new broker engine versions are released and supported by Amazon MQ. Automatic upgrades occur during the scheduled maintenance window of the broker or after a manual broker reboot.
	AutoMinorVersionUpgrade pulumi.BoolPtrOutput `pulumi:"autoMinorVersionUpgrade"`
	// Required. The unique ID that Amazon MQ generates for the configuration.
	AwsId pulumi.StringOutput `pulumi:"awsId"`
	// The name of the broker. This value must be unique in your AWS account , 1-50 characters long, must contain only letters, numbers, dashes, and underscores, and must not contain white spaces, brackets, wildcard characters, or special characters.
	//
	// > Do not add personally identifiable information (PII) or other confidential or sensitive information in broker names. Broker names are accessible to other AWS services, including C CloudWatch Logs . Broker names are not intended to be used for private or sensitive data.
	BrokerName pulumi.StringOutput `pulumi:"brokerName"`
	// The intended configuration (ID and revision) to be set when creating or updating.
	// This property is write-only so that applications of a ConfigurationAssociation do not cause drift.
	Configuration BrokerConfigurationIdPtrOutput `pulumi:"configuration"`
	// The ID of the current actual configuration.
	ConfigurationId pulumi.StringOutput `pulumi:"configurationId"`
	// The revision of the current actual configuration.
	ConfigurationRevision pulumi.StringOutput      `pulumi:"configurationRevision"`
	ConsoleUrls           pulumi.StringArrayOutput `pulumi:"consoleUrls"`
	// Defines whether this broker is a part of a data replication pair.
	DataReplicationMode pulumi.StringPtrOutput `pulumi:"dataReplicationMode"`
	// The ARN of the primary broker that is used to replicate data from in a data replication pair when creating a replica.
	// This field is only used at creation-time. Changes to it subsequently are ignored by CloudFormation.
	// Information on the current primary is available on the DataReplicationMetadata object returned by the API.
	DataReplicationPrimaryBrokerArn pulumi.StringPtrOutput `pulumi:"dataReplicationPrimaryBrokerArn"`
	// The deployment mode of the broker. Available values:
	//
	// - `SINGLE_INSTANCE`
	// - `ACTIVE_STANDBY_MULTI_AZ`
	// - `CLUSTER_MULTI_AZ`
	DeploymentMode pulumi.StringOutput `pulumi:"deploymentMode"`
	// Encryption options for the broker. Does not apply to RabbitMQ brokers.
	EncryptionOptions BrokerEncryptionOptionsPtrOutput `pulumi:"encryptionOptions"`
	// The type of broker engine. Currently, Amazon MQ supports `ACTIVEMQ` and `RABBITMQ` .
	EngineType pulumi.StringOutput `pulumi:"engineType"`
	// The version specified to use. See also EngineVersionCurrent.
	EngineVersion pulumi.StringPtrOutput `pulumi:"engineVersion"`
	// The version in use. This may have more precision than the specified EngineVersion.
	EngineVersionCurrent pulumi.StringOutput `pulumi:"engineVersionCurrent"`
	// The broker's instance type.
	HostInstanceType pulumi.StringOutput `pulumi:"hostInstanceType"`
	// The IP addresses of each broker instance as a list of strings. Does not apply to RabbitMQ brokers.
	//
	// `['198.51.100.2', '203.0.113.9']`
	IpAddresses pulumi.StringArrayOutput `pulumi:"ipAddresses"`
	// Optional. The metadata of the LDAP server used to authenticate and authorize connections to the broker. Does not apply to RabbitMQ brokers.
	LdapServerMetadata BrokerLdapServerMetadataPtrOutput `pulumi:"ldapServerMetadata"`
	// Enables Amazon CloudWatch logging for brokers.
	Logs BrokerLogListPtrOutput `pulumi:"logs"`
	// The scheduled time period relative to UTC during which Amazon MQ begins to apply pending updates or patches to the broker.
	MaintenanceWindowStartTime BrokerMaintenanceWindowPtrOutput `pulumi:"maintenanceWindowStartTime"`
	// The MQTT endpoints of each broker instance as a list of strings.
	//
	// `mqtt+ssl://b-4aada85d-a80c-4be0-9d30-e344a01b921e-1.mq.eu-central-amazonaws.com:8883`
	MqttEndpoints pulumi.StringArrayOutput `pulumi:"mqttEndpoints"`
	// The OpenWire endpoints of each broker instance as a list of strings.
	//
	// `ssl://b-4aada85d-a80c-4be0-9d30-e344a01b921e-1.mq.eu-central-amazonaws.com:61617`
	OpenWireEndpoints pulumi.StringArrayOutput `pulumi:"openWireEndpoints"`
	// Enables connections from applications outside of the VPC that hosts the broker's subnets.
	PubliclyAccessible pulumi.BoolOutput `pulumi:"publiclyAccessible"`
	// The list of rules (1 minimum, 125 maximum) that authorize connections to brokers.
	SecurityGroups pulumi.StringArrayOutput `pulumi:"securityGroups"`
	// The STOMP endpoints of each broker instance as a list of strings.
	//
	// `stomp+ssl://b-4aada85d-a80c-4be0-9d30-e344a01b921e-1.mq.eu-central-amazonaws.com:61614`
	StompEndpoints pulumi.StringArrayOutput `pulumi:"stompEndpoints"`
	// The broker's storage type.
	StorageType pulumi.StringPtrOutput `pulumi:"storageType"`
	// The list of groups that define which subnets and IP ranges the broker can use from different Availability Zones. If you specify more than one subnet, the subnets must be in different Availability Zones. Amazon MQ will not be able to create VPC endpoints for your broker with multiple subnets in the same Availability Zone. A SINGLE_INSTANCE deployment requires one subnet (for example, the default subnet). An ACTIVE_STANDBY_MULTI_AZ deployment (ACTIVEMQ) requires two subnets. A CLUSTER_MULTI_AZ deployment (RABBITMQ) has no subnet requirements when deployed with public accessibility, deployment without public accessibility requires at least one subnet.
	//
	// > If you specify subnets in a shared VPC for a RabbitMQ broker, the associated VPC to which the specified subnets belong must be owned by your AWS account . Amazon MQ will not be able to create VPC enpoints in VPCs that are not owned by your AWS account .
	SubnetIds pulumi.StringArrayOutput `pulumi:"subnetIds"`
	// An array of key-value pairs. For more information, see [Using Cost Allocation Tags](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html) in the *Billing and Cost Management User Guide* .
	Tags aws.TagArrayOutput `pulumi:"tags"`
	// Users to configure on the broker.
	// For RabbitMQ, this should be one user, created when the broker is created, and changes thereafter are ignored.
	// For ActiveMQ, changes to anything but Password are detected and will trigger an update,
	// but changes to Password cannot be detected so updates to Password may not take effect unless there is some other change.
	Users BrokerUserArrayOutput `pulumi:"users"`
	// The WSS endpoints of each broker instance as a list of strings.
	//
	// `wss://b-4aada85d-a80c-4be0-9d30-e344a01b921e-1.mq.eu-central-amazonaws.com:61619`
	WssEndpoints pulumi.StringArrayOutput `pulumi:"wssEndpoints"`
}

// NewBroker registers a new resource with the given unique name, arguments, and options.
func NewBroker(ctx *pulumi.Context,
	name string, args *BrokerArgs, opts ...pulumi.ResourceOption) (*Broker, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DeploymentMode == nil {
		return nil, errors.New("invalid value for required argument 'DeploymentMode'")
	}
	if args.EngineType == nil {
		return nil, errors.New("invalid value for required argument 'EngineType'")
	}
	if args.HostInstanceType == nil {
		return nil, errors.New("invalid value for required argument 'HostInstanceType'")
	}
	if args.PubliclyAccessible == nil {
		return nil, errors.New("invalid value for required argument 'PubliclyAccessible'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"authenticationStrategy",
		"brokerName",
		"deploymentMode",
		"encryptionOptions",
		"engineType",
		"publiclyAccessible",
		"storageType",
		"subnetIds[*]",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Broker
	err := ctx.RegisterResource("aws-native:amazonmq:Broker", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBroker gets an existing Broker resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBroker(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BrokerState, opts ...pulumi.ResourceOption) (*Broker, error) {
	var resource Broker
	err := ctx.ReadResource("aws-native:amazonmq:Broker", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Broker resources.
type brokerState struct {
}

type BrokerState struct {
}

func (BrokerState) ElementType() reflect.Type {
	return reflect.TypeOf((*brokerState)(nil)).Elem()
}

type brokerArgs struct {
	// Optional. The authentication strategy used to secure the broker. The default is `SIMPLE` .
	AuthenticationStrategy *string `pulumi:"authenticationStrategy"`
	// Enables automatic upgrades to new minor versions for brokers, as new broker engine versions are released and supported by Amazon MQ. Automatic upgrades occur during the scheduled maintenance window of the broker or after a manual broker reboot.
	AutoMinorVersionUpgrade *bool `pulumi:"autoMinorVersionUpgrade"`
	// The name of the broker. This value must be unique in your AWS account , 1-50 characters long, must contain only letters, numbers, dashes, and underscores, and must not contain white spaces, brackets, wildcard characters, or special characters.
	//
	// > Do not add personally identifiable information (PII) or other confidential or sensitive information in broker names. Broker names are accessible to other AWS services, including C CloudWatch Logs . Broker names are not intended to be used for private or sensitive data.
	BrokerName *string `pulumi:"brokerName"`
	// The intended configuration (ID and revision) to be set when creating or updating.
	// This property is write-only so that applications of a ConfigurationAssociation do not cause drift.
	Configuration *BrokerConfigurationId `pulumi:"configuration"`
	// Defines whether this broker is a part of a data replication pair.
	DataReplicationMode *string `pulumi:"dataReplicationMode"`
	// The ARN of the primary broker that is used to replicate data from in a data replication pair when creating a replica.
	// This field is only used at creation-time. Changes to it subsequently are ignored by CloudFormation.
	// Information on the current primary is available on the DataReplicationMetadata object returned by the API.
	DataReplicationPrimaryBrokerArn *string `pulumi:"dataReplicationPrimaryBrokerArn"`
	// The deployment mode of the broker. Available values:
	//
	// - `SINGLE_INSTANCE`
	// - `ACTIVE_STANDBY_MULTI_AZ`
	// - `CLUSTER_MULTI_AZ`
	DeploymentMode string `pulumi:"deploymentMode"`
	// Encryption options for the broker. Does not apply to RabbitMQ brokers.
	EncryptionOptions *BrokerEncryptionOptions `pulumi:"encryptionOptions"`
	// The type of broker engine. Currently, Amazon MQ supports `ACTIVEMQ` and `RABBITMQ` .
	EngineType string `pulumi:"engineType"`
	// The version specified to use. See also EngineVersionCurrent.
	EngineVersion *string `pulumi:"engineVersion"`
	// The broker's instance type.
	HostInstanceType string `pulumi:"hostInstanceType"`
	// Optional. The metadata of the LDAP server used to authenticate and authorize connections to the broker. Does not apply to RabbitMQ brokers.
	LdapServerMetadata *BrokerLdapServerMetadata `pulumi:"ldapServerMetadata"`
	// Enables Amazon CloudWatch logging for brokers.
	Logs *BrokerLogList `pulumi:"logs"`
	// The scheduled time period relative to UTC during which Amazon MQ begins to apply pending updates or patches to the broker.
	MaintenanceWindowStartTime *BrokerMaintenanceWindow `pulumi:"maintenanceWindowStartTime"`
	// Enables connections from applications outside of the VPC that hosts the broker's subnets.
	PubliclyAccessible bool `pulumi:"publiclyAccessible"`
	// The list of rules (1 minimum, 125 maximum) that authorize connections to brokers.
	SecurityGroups []string `pulumi:"securityGroups"`
	// The broker's storage type.
	StorageType *string `pulumi:"storageType"`
	// The list of groups that define which subnets and IP ranges the broker can use from different Availability Zones. If you specify more than one subnet, the subnets must be in different Availability Zones. Amazon MQ will not be able to create VPC endpoints for your broker with multiple subnets in the same Availability Zone. A SINGLE_INSTANCE deployment requires one subnet (for example, the default subnet). An ACTIVE_STANDBY_MULTI_AZ deployment (ACTIVEMQ) requires two subnets. A CLUSTER_MULTI_AZ deployment (RABBITMQ) has no subnet requirements when deployed with public accessibility, deployment without public accessibility requires at least one subnet.
	//
	// > If you specify subnets in a shared VPC for a RabbitMQ broker, the associated VPC to which the specified subnets belong must be owned by your AWS account . Amazon MQ will not be able to create VPC enpoints in VPCs that are not owned by your AWS account .
	SubnetIds []string `pulumi:"subnetIds"`
	// An array of key-value pairs. For more information, see [Using Cost Allocation Tags](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html) in the *Billing and Cost Management User Guide* .
	Tags []aws.Tag `pulumi:"tags"`
	// Users to configure on the broker.
	// For RabbitMQ, this should be one user, created when the broker is created, and changes thereafter are ignored.
	// For ActiveMQ, changes to anything but Password are detected and will trigger an update,
	// but changes to Password cannot be detected so updates to Password may not take effect unless there is some other change.
	Users []BrokerUser `pulumi:"users"`
}

// The set of arguments for constructing a Broker resource.
type BrokerArgs struct {
	// Optional. The authentication strategy used to secure the broker. The default is `SIMPLE` .
	AuthenticationStrategy pulumi.StringPtrInput
	// Enables automatic upgrades to new minor versions for brokers, as new broker engine versions are released and supported by Amazon MQ. Automatic upgrades occur during the scheduled maintenance window of the broker or after a manual broker reboot.
	AutoMinorVersionUpgrade pulumi.BoolPtrInput
	// The name of the broker. This value must be unique in your AWS account , 1-50 characters long, must contain only letters, numbers, dashes, and underscores, and must not contain white spaces, brackets, wildcard characters, or special characters.
	//
	// > Do not add personally identifiable information (PII) or other confidential or sensitive information in broker names. Broker names are accessible to other AWS services, including C CloudWatch Logs . Broker names are not intended to be used for private or sensitive data.
	BrokerName pulumi.StringPtrInput
	// The intended configuration (ID and revision) to be set when creating or updating.
	// This property is write-only so that applications of a ConfigurationAssociation do not cause drift.
	Configuration BrokerConfigurationIdPtrInput
	// Defines whether this broker is a part of a data replication pair.
	DataReplicationMode pulumi.StringPtrInput
	// The ARN of the primary broker that is used to replicate data from in a data replication pair when creating a replica.
	// This field is only used at creation-time. Changes to it subsequently are ignored by CloudFormation.
	// Information on the current primary is available on the DataReplicationMetadata object returned by the API.
	DataReplicationPrimaryBrokerArn pulumi.StringPtrInput
	// The deployment mode of the broker. Available values:
	//
	// - `SINGLE_INSTANCE`
	// - `ACTIVE_STANDBY_MULTI_AZ`
	// - `CLUSTER_MULTI_AZ`
	DeploymentMode pulumi.StringInput
	// Encryption options for the broker. Does not apply to RabbitMQ brokers.
	EncryptionOptions BrokerEncryptionOptionsPtrInput
	// The type of broker engine. Currently, Amazon MQ supports `ACTIVEMQ` and `RABBITMQ` .
	EngineType pulumi.StringInput
	// The version specified to use. See also EngineVersionCurrent.
	EngineVersion pulumi.StringPtrInput
	// The broker's instance type.
	HostInstanceType pulumi.StringInput
	// Optional. The metadata of the LDAP server used to authenticate and authorize connections to the broker. Does not apply to RabbitMQ brokers.
	LdapServerMetadata BrokerLdapServerMetadataPtrInput
	// Enables Amazon CloudWatch logging for brokers.
	Logs BrokerLogListPtrInput
	// The scheduled time period relative to UTC during which Amazon MQ begins to apply pending updates or patches to the broker.
	MaintenanceWindowStartTime BrokerMaintenanceWindowPtrInput
	// Enables connections from applications outside of the VPC that hosts the broker's subnets.
	PubliclyAccessible pulumi.BoolInput
	// The list of rules (1 minimum, 125 maximum) that authorize connections to brokers.
	SecurityGroups pulumi.StringArrayInput
	// The broker's storage type.
	StorageType pulumi.StringPtrInput
	// The list of groups that define which subnets and IP ranges the broker can use from different Availability Zones. If you specify more than one subnet, the subnets must be in different Availability Zones. Amazon MQ will not be able to create VPC endpoints for your broker with multiple subnets in the same Availability Zone. A SINGLE_INSTANCE deployment requires one subnet (for example, the default subnet). An ACTIVE_STANDBY_MULTI_AZ deployment (ACTIVEMQ) requires two subnets. A CLUSTER_MULTI_AZ deployment (RABBITMQ) has no subnet requirements when deployed with public accessibility, deployment without public accessibility requires at least one subnet.
	//
	// > If you specify subnets in a shared VPC for a RabbitMQ broker, the associated VPC to which the specified subnets belong must be owned by your AWS account . Amazon MQ will not be able to create VPC enpoints in VPCs that are not owned by your AWS account .
	SubnetIds pulumi.StringArrayInput
	// An array of key-value pairs. For more information, see [Using Cost Allocation Tags](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html) in the *Billing and Cost Management User Guide* .
	Tags aws.TagArrayInput
	// Users to configure on the broker.
	// For RabbitMQ, this should be one user, created when the broker is created, and changes thereafter are ignored.
	// For ActiveMQ, changes to anything but Password are detected and will trigger an update,
	// but changes to Password cannot be detected so updates to Password may not take effect unless there is some other change.
	Users BrokerUserArrayInput
}

func (BrokerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*brokerArgs)(nil)).Elem()
}

type BrokerInput interface {
	pulumi.Input

	ToBrokerOutput() BrokerOutput
	ToBrokerOutputWithContext(ctx context.Context) BrokerOutput
}

func (*Broker) ElementType() reflect.Type {
	return reflect.TypeOf((**Broker)(nil)).Elem()
}

func (i *Broker) ToBrokerOutput() BrokerOutput {
	return i.ToBrokerOutputWithContext(context.Background())
}

func (i *Broker) ToBrokerOutputWithContext(ctx context.Context) BrokerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerOutput)
}

type BrokerOutput struct{ *pulumi.OutputState }

func (BrokerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Broker)(nil)).Elem()
}

func (o BrokerOutput) ToBrokerOutput() BrokerOutput {
	return o
}

func (o BrokerOutput) ToBrokerOutputWithContext(ctx context.Context) BrokerOutput {
	return o
}

// The AMQP endpoints of each broker instance as a list of strings.
//
// `amqp+ssl://b-4aada85d-a80c-4be0-9d30-e344a01b921e-1.mq.eu-central-amazonaws.com:5671`
func (o BrokerOutput) AmqpEndpoints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Broker) pulumi.StringArrayOutput { return v.AmqpEndpoints }).(pulumi.StringArrayOutput)
}

// The Amazon Resource Name (ARN) of the Amazon MQ broker.
//
// `arn:aws:mq:us-east-2:123456789012:broker:MyBroker:b-1234a5b6-78cd-901e-2fgh-3i45j6k178l9`
func (o BrokerOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Broker) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Optional. The authentication strategy used to secure the broker. The default is `SIMPLE` .
func (o BrokerOutput) AuthenticationStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Broker) pulumi.StringPtrOutput { return v.AuthenticationStrategy }).(pulumi.StringPtrOutput)
}

// Enables automatic upgrades to new minor versions for brokers, as new broker engine versions are released and supported by Amazon MQ. Automatic upgrades occur during the scheduled maintenance window of the broker or after a manual broker reboot.
func (o BrokerOutput) AutoMinorVersionUpgrade() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Broker) pulumi.BoolPtrOutput { return v.AutoMinorVersionUpgrade }).(pulumi.BoolPtrOutput)
}

// Required. The unique ID that Amazon MQ generates for the configuration.
func (o BrokerOutput) AwsId() pulumi.StringOutput {
	return o.ApplyT(func(v *Broker) pulumi.StringOutput { return v.AwsId }).(pulumi.StringOutput)
}

// The name of the broker. This value must be unique in your AWS account , 1-50 characters long, must contain only letters, numbers, dashes, and underscores, and must not contain white spaces, brackets, wildcard characters, or special characters.
//
// > Do not add personally identifiable information (PII) or other confidential or sensitive information in broker names. Broker names are accessible to other AWS services, including C CloudWatch Logs . Broker names are not intended to be used for private or sensitive data.
func (o BrokerOutput) BrokerName() pulumi.StringOutput {
	return o.ApplyT(func(v *Broker) pulumi.StringOutput { return v.BrokerName }).(pulumi.StringOutput)
}

// The intended configuration (ID and revision) to be set when creating or updating.
// This property is write-only so that applications of a ConfigurationAssociation do not cause drift.
func (o BrokerOutput) Configuration() BrokerConfigurationIdPtrOutput {
	return o.ApplyT(func(v *Broker) BrokerConfigurationIdPtrOutput { return v.Configuration }).(BrokerConfigurationIdPtrOutput)
}

// The ID of the current actual configuration.
func (o BrokerOutput) ConfigurationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Broker) pulumi.StringOutput { return v.ConfigurationId }).(pulumi.StringOutput)
}

// The revision of the current actual configuration.
func (o BrokerOutput) ConfigurationRevision() pulumi.StringOutput {
	return o.ApplyT(func(v *Broker) pulumi.StringOutput { return v.ConfigurationRevision }).(pulumi.StringOutput)
}

func (o BrokerOutput) ConsoleUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Broker) pulumi.StringArrayOutput { return v.ConsoleUrls }).(pulumi.StringArrayOutput)
}

// Defines whether this broker is a part of a data replication pair.
func (o BrokerOutput) DataReplicationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Broker) pulumi.StringPtrOutput { return v.DataReplicationMode }).(pulumi.StringPtrOutput)
}

// The ARN of the primary broker that is used to replicate data from in a data replication pair when creating a replica.
// This field is only used at creation-time. Changes to it subsequently are ignored by CloudFormation.
// Information on the current primary is available on the DataReplicationMetadata object returned by the API.
func (o BrokerOutput) DataReplicationPrimaryBrokerArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Broker) pulumi.StringPtrOutput { return v.DataReplicationPrimaryBrokerArn }).(pulumi.StringPtrOutput)
}

// The deployment mode of the broker. Available values:
//
// - `SINGLE_INSTANCE`
// - `ACTIVE_STANDBY_MULTI_AZ`
// - `CLUSTER_MULTI_AZ`
func (o BrokerOutput) DeploymentMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Broker) pulumi.StringOutput { return v.DeploymentMode }).(pulumi.StringOutput)
}

// Encryption options for the broker. Does not apply to RabbitMQ brokers.
func (o BrokerOutput) EncryptionOptions() BrokerEncryptionOptionsPtrOutput {
	return o.ApplyT(func(v *Broker) BrokerEncryptionOptionsPtrOutput { return v.EncryptionOptions }).(BrokerEncryptionOptionsPtrOutput)
}

// The type of broker engine. Currently, Amazon MQ supports `ACTIVEMQ` and `RABBITMQ` .
func (o BrokerOutput) EngineType() pulumi.StringOutput {
	return o.ApplyT(func(v *Broker) pulumi.StringOutput { return v.EngineType }).(pulumi.StringOutput)
}

// The version specified to use. See also EngineVersionCurrent.
func (o BrokerOutput) EngineVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Broker) pulumi.StringPtrOutput { return v.EngineVersion }).(pulumi.StringPtrOutput)
}

// The version in use. This may have more precision than the specified EngineVersion.
func (o BrokerOutput) EngineVersionCurrent() pulumi.StringOutput {
	return o.ApplyT(func(v *Broker) pulumi.StringOutput { return v.EngineVersionCurrent }).(pulumi.StringOutput)
}

// The broker's instance type.
func (o BrokerOutput) HostInstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v *Broker) pulumi.StringOutput { return v.HostInstanceType }).(pulumi.StringOutput)
}

// The IP addresses of each broker instance as a list of strings. Does not apply to RabbitMQ brokers.
//
// `['198.51.100.2', '203.0.113.9']`
func (o BrokerOutput) IpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Broker) pulumi.StringArrayOutput { return v.IpAddresses }).(pulumi.StringArrayOutput)
}

// Optional. The metadata of the LDAP server used to authenticate and authorize connections to the broker. Does not apply to RabbitMQ brokers.
func (o BrokerOutput) LdapServerMetadata() BrokerLdapServerMetadataPtrOutput {
	return o.ApplyT(func(v *Broker) BrokerLdapServerMetadataPtrOutput { return v.LdapServerMetadata }).(BrokerLdapServerMetadataPtrOutput)
}

// Enables Amazon CloudWatch logging for brokers.
func (o BrokerOutput) Logs() BrokerLogListPtrOutput {
	return o.ApplyT(func(v *Broker) BrokerLogListPtrOutput { return v.Logs }).(BrokerLogListPtrOutput)
}

// The scheduled time period relative to UTC during which Amazon MQ begins to apply pending updates or patches to the broker.
func (o BrokerOutput) MaintenanceWindowStartTime() BrokerMaintenanceWindowPtrOutput {
	return o.ApplyT(func(v *Broker) BrokerMaintenanceWindowPtrOutput { return v.MaintenanceWindowStartTime }).(BrokerMaintenanceWindowPtrOutput)
}

// The MQTT endpoints of each broker instance as a list of strings.
//
// `mqtt+ssl://b-4aada85d-a80c-4be0-9d30-e344a01b921e-1.mq.eu-central-amazonaws.com:8883`
func (o BrokerOutput) MqttEndpoints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Broker) pulumi.StringArrayOutput { return v.MqttEndpoints }).(pulumi.StringArrayOutput)
}

// The OpenWire endpoints of each broker instance as a list of strings.
//
// `ssl://b-4aada85d-a80c-4be0-9d30-e344a01b921e-1.mq.eu-central-amazonaws.com:61617`
func (o BrokerOutput) OpenWireEndpoints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Broker) pulumi.StringArrayOutput { return v.OpenWireEndpoints }).(pulumi.StringArrayOutput)
}

// Enables connections from applications outside of the VPC that hosts the broker's subnets.
func (o BrokerOutput) PubliclyAccessible() pulumi.BoolOutput {
	return o.ApplyT(func(v *Broker) pulumi.BoolOutput { return v.PubliclyAccessible }).(pulumi.BoolOutput)
}

// The list of rules (1 minimum, 125 maximum) that authorize connections to brokers.
func (o BrokerOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Broker) pulumi.StringArrayOutput { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

// The STOMP endpoints of each broker instance as a list of strings.
//
// `stomp+ssl://b-4aada85d-a80c-4be0-9d30-e344a01b921e-1.mq.eu-central-amazonaws.com:61614`
func (o BrokerOutput) StompEndpoints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Broker) pulumi.StringArrayOutput { return v.StompEndpoints }).(pulumi.StringArrayOutput)
}

// The broker's storage type.
func (o BrokerOutput) StorageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Broker) pulumi.StringPtrOutput { return v.StorageType }).(pulumi.StringPtrOutput)
}

// The list of groups that define which subnets and IP ranges the broker can use from different Availability Zones. If you specify more than one subnet, the subnets must be in different Availability Zones. Amazon MQ will not be able to create VPC endpoints for your broker with multiple subnets in the same Availability Zone. A SINGLE_INSTANCE deployment requires one subnet (for example, the default subnet). An ACTIVE_STANDBY_MULTI_AZ deployment (ACTIVEMQ) requires two subnets. A CLUSTER_MULTI_AZ deployment (RABBITMQ) has no subnet requirements when deployed with public accessibility, deployment without public accessibility requires at least one subnet.
//
// > If you specify subnets in a shared VPC for a RabbitMQ broker, the associated VPC to which the specified subnets belong must be owned by your AWS account . Amazon MQ will not be able to create VPC enpoints in VPCs that are not owned by your AWS account .
func (o BrokerOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Broker) pulumi.StringArrayOutput { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

// An array of key-value pairs. For more information, see [Using Cost Allocation Tags](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html) in the *Billing and Cost Management User Guide* .
func (o BrokerOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Broker) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

// Users to configure on the broker.
// For RabbitMQ, this should be one user, created when the broker is created, and changes thereafter are ignored.
// For ActiveMQ, changes to anything but Password are detected and will trigger an update,
// but changes to Password cannot be detected so updates to Password may not take effect unless there is some other change.
func (o BrokerOutput) Users() BrokerUserArrayOutput {
	return o.ApplyT(func(v *Broker) BrokerUserArrayOutput { return v.Users }).(BrokerUserArrayOutput)
}

// The WSS endpoints of each broker instance as a list of strings.
//
// `wss://b-4aada85d-a80c-4be0-9d30-e344a01b921e-1.mq.eu-central-amazonaws.com:61619`
func (o BrokerOutput) WssEndpoints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Broker) pulumi.StringArrayOutput { return v.WssEndpoints }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BrokerInput)(nil)).Elem(), &Broker{})
	pulumi.RegisterOutputType(BrokerOutput{})
}
