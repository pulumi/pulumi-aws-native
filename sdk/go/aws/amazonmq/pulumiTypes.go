// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package amazonmq

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type BrokerConfigurationId struct {
	// The unique ID that Amazon MQ generates for the configuration.
	Id string `pulumi:"id"`
	// The revision number of the configuration.
	Revision int `pulumi:"revision"`
}

// BrokerConfigurationIdInput is an input type that accepts BrokerConfigurationIdArgs and BrokerConfigurationIdOutput values.
// You can construct a concrete instance of `BrokerConfigurationIdInput` via:
//
//	BrokerConfigurationIdArgs{...}
type BrokerConfigurationIdInput interface {
	pulumi.Input

	ToBrokerConfigurationIdOutput() BrokerConfigurationIdOutput
	ToBrokerConfigurationIdOutputWithContext(context.Context) BrokerConfigurationIdOutput
}

type BrokerConfigurationIdArgs struct {
	// The unique ID that Amazon MQ generates for the configuration.
	Id pulumi.StringInput `pulumi:"id"`
	// The revision number of the configuration.
	Revision pulumi.IntInput `pulumi:"revision"`
}

func (BrokerConfigurationIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerConfigurationId)(nil)).Elem()
}

func (i BrokerConfigurationIdArgs) ToBrokerConfigurationIdOutput() BrokerConfigurationIdOutput {
	return i.ToBrokerConfigurationIdOutputWithContext(context.Background())
}

func (i BrokerConfigurationIdArgs) ToBrokerConfigurationIdOutputWithContext(ctx context.Context) BrokerConfigurationIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerConfigurationIdOutput)
}

func (i BrokerConfigurationIdArgs) ToBrokerConfigurationIdPtrOutput() BrokerConfigurationIdPtrOutput {
	return i.ToBrokerConfigurationIdPtrOutputWithContext(context.Background())
}

func (i BrokerConfigurationIdArgs) ToBrokerConfigurationIdPtrOutputWithContext(ctx context.Context) BrokerConfigurationIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerConfigurationIdOutput).ToBrokerConfigurationIdPtrOutputWithContext(ctx)
}

// BrokerConfigurationIdPtrInput is an input type that accepts BrokerConfigurationIdArgs, BrokerConfigurationIdPtr and BrokerConfigurationIdPtrOutput values.
// You can construct a concrete instance of `BrokerConfigurationIdPtrInput` via:
//
//	        BrokerConfigurationIdArgs{...}
//
//	or:
//
//	        nil
type BrokerConfigurationIdPtrInput interface {
	pulumi.Input

	ToBrokerConfigurationIdPtrOutput() BrokerConfigurationIdPtrOutput
	ToBrokerConfigurationIdPtrOutputWithContext(context.Context) BrokerConfigurationIdPtrOutput
}

type brokerConfigurationIdPtrType BrokerConfigurationIdArgs

func BrokerConfigurationIdPtr(v *BrokerConfigurationIdArgs) BrokerConfigurationIdPtrInput {
	return (*brokerConfigurationIdPtrType)(v)
}

func (*brokerConfigurationIdPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerConfigurationId)(nil)).Elem()
}

func (i *brokerConfigurationIdPtrType) ToBrokerConfigurationIdPtrOutput() BrokerConfigurationIdPtrOutput {
	return i.ToBrokerConfigurationIdPtrOutputWithContext(context.Background())
}

func (i *brokerConfigurationIdPtrType) ToBrokerConfigurationIdPtrOutputWithContext(ctx context.Context) BrokerConfigurationIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerConfigurationIdPtrOutput)
}

type BrokerConfigurationIdOutput struct{ *pulumi.OutputState }

func (BrokerConfigurationIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerConfigurationId)(nil)).Elem()
}

func (o BrokerConfigurationIdOutput) ToBrokerConfigurationIdOutput() BrokerConfigurationIdOutput {
	return o
}

func (o BrokerConfigurationIdOutput) ToBrokerConfigurationIdOutputWithContext(ctx context.Context) BrokerConfigurationIdOutput {
	return o
}

func (o BrokerConfigurationIdOutput) ToBrokerConfigurationIdPtrOutput() BrokerConfigurationIdPtrOutput {
	return o.ToBrokerConfigurationIdPtrOutputWithContext(context.Background())
}

func (o BrokerConfigurationIdOutput) ToBrokerConfigurationIdPtrOutputWithContext(ctx context.Context) BrokerConfigurationIdPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BrokerConfigurationId) *BrokerConfigurationId {
		return &v
	}).(BrokerConfigurationIdPtrOutput)
}

// The unique ID that Amazon MQ generates for the configuration.
func (o BrokerConfigurationIdOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v BrokerConfigurationId) string { return v.Id }).(pulumi.StringOutput)
}

// The revision number of the configuration.
func (o BrokerConfigurationIdOutput) Revision() pulumi.IntOutput {
	return o.ApplyT(func(v BrokerConfigurationId) int { return v.Revision }).(pulumi.IntOutput)
}

type BrokerConfigurationIdPtrOutput struct{ *pulumi.OutputState }

func (BrokerConfigurationIdPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerConfigurationId)(nil)).Elem()
}

func (o BrokerConfigurationIdPtrOutput) ToBrokerConfigurationIdPtrOutput() BrokerConfigurationIdPtrOutput {
	return o
}

func (o BrokerConfigurationIdPtrOutput) ToBrokerConfigurationIdPtrOutputWithContext(ctx context.Context) BrokerConfigurationIdPtrOutput {
	return o
}

func (o BrokerConfigurationIdPtrOutput) Elem() BrokerConfigurationIdOutput {
	return o.ApplyT(func(v *BrokerConfigurationId) BrokerConfigurationId {
		if v != nil {
			return *v
		}
		var ret BrokerConfigurationId
		return ret
	}).(BrokerConfigurationIdOutput)
}

// The unique ID that Amazon MQ generates for the configuration.
func (o BrokerConfigurationIdPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrokerConfigurationId) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// The revision number of the configuration.
func (o BrokerConfigurationIdPtrOutput) Revision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BrokerConfigurationId) *int {
		if v == nil {
			return nil
		}
		return &v.Revision
	}).(pulumi.IntPtrOutput)
}

type BrokerEncryptionOptions struct {
	// The customer master key (CMK) to use for the A KMS (KMS).
	// This key is used to encrypt your data at rest. If not provided, Amazon MQ will use a default CMK to encrypt your data.
	// The Key ARN is recommended so that drift can be detected,
	// but a key ID or key alias will also be accepted for API compatibility reasons.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// Enables the use of an AWS owned CMK using AWS KMS (KMS). Set to `true` by default, if no value is provided, for example, for RabbitMQ brokers.
	UseAwsOwnedKey bool `pulumi:"useAwsOwnedKey"`
}

// BrokerEncryptionOptionsInput is an input type that accepts BrokerEncryptionOptionsArgs and BrokerEncryptionOptionsOutput values.
// You can construct a concrete instance of `BrokerEncryptionOptionsInput` via:
//
//	BrokerEncryptionOptionsArgs{...}
type BrokerEncryptionOptionsInput interface {
	pulumi.Input

	ToBrokerEncryptionOptionsOutput() BrokerEncryptionOptionsOutput
	ToBrokerEncryptionOptionsOutputWithContext(context.Context) BrokerEncryptionOptionsOutput
}

type BrokerEncryptionOptionsArgs struct {
	// The customer master key (CMK) to use for the A KMS (KMS).
	// This key is used to encrypt your data at rest. If not provided, Amazon MQ will use a default CMK to encrypt your data.
	// The Key ARN is recommended so that drift can be detected,
	// but a key ID or key alias will also be accepted for API compatibility reasons.
	KmsKeyId pulumi.StringPtrInput `pulumi:"kmsKeyId"`
	// Enables the use of an AWS owned CMK using AWS KMS (KMS). Set to `true` by default, if no value is provided, for example, for RabbitMQ brokers.
	UseAwsOwnedKey pulumi.BoolInput `pulumi:"useAwsOwnedKey"`
}

func (BrokerEncryptionOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerEncryptionOptions)(nil)).Elem()
}

func (i BrokerEncryptionOptionsArgs) ToBrokerEncryptionOptionsOutput() BrokerEncryptionOptionsOutput {
	return i.ToBrokerEncryptionOptionsOutputWithContext(context.Background())
}

func (i BrokerEncryptionOptionsArgs) ToBrokerEncryptionOptionsOutputWithContext(ctx context.Context) BrokerEncryptionOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerEncryptionOptionsOutput)
}

func (i BrokerEncryptionOptionsArgs) ToBrokerEncryptionOptionsPtrOutput() BrokerEncryptionOptionsPtrOutput {
	return i.ToBrokerEncryptionOptionsPtrOutputWithContext(context.Background())
}

func (i BrokerEncryptionOptionsArgs) ToBrokerEncryptionOptionsPtrOutputWithContext(ctx context.Context) BrokerEncryptionOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerEncryptionOptionsOutput).ToBrokerEncryptionOptionsPtrOutputWithContext(ctx)
}

// BrokerEncryptionOptionsPtrInput is an input type that accepts BrokerEncryptionOptionsArgs, BrokerEncryptionOptionsPtr and BrokerEncryptionOptionsPtrOutput values.
// You can construct a concrete instance of `BrokerEncryptionOptionsPtrInput` via:
//
//	        BrokerEncryptionOptionsArgs{...}
//
//	or:
//
//	        nil
type BrokerEncryptionOptionsPtrInput interface {
	pulumi.Input

	ToBrokerEncryptionOptionsPtrOutput() BrokerEncryptionOptionsPtrOutput
	ToBrokerEncryptionOptionsPtrOutputWithContext(context.Context) BrokerEncryptionOptionsPtrOutput
}

type brokerEncryptionOptionsPtrType BrokerEncryptionOptionsArgs

func BrokerEncryptionOptionsPtr(v *BrokerEncryptionOptionsArgs) BrokerEncryptionOptionsPtrInput {
	return (*brokerEncryptionOptionsPtrType)(v)
}

func (*brokerEncryptionOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerEncryptionOptions)(nil)).Elem()
}

func (i *brokerEncryptionOptionsPtrType) ToBrokerEncryptionOptionsPtrOutput() BrokerEncryptionOptionsPtrOutput {
	return i.ToBrokerEncryptionOptionsPtrOutputWithContext(context.Background())
}

func (i *brokerEncryptionOptionsPtrType) ToBrokerEncryptionOptionsPtrOutputWithContext(ctx context.Context) BrokerEncryptionOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerEncryptionOptionsPtrOutput)
}

type BrokerEncryptionOptionsOutput struct{ *pulumi.OutputState }

func (BrokerEncryptionOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerEncryptionOptions)(nil)).Elem()
}

func (o BrokerEncryptionOptionsOutput) ToBrokerEncryptionOptionsOutput() BrokerEncryptionOptionsOutput {
	return o
}

func (o BrokerEncryptionOptionsOutput) ToBrokerEncryptionOptionsOutputWithContext(ctx context.Context) BrokerEncryptionOptionsOutput {
	return o
}

func (o BrokerEncryptionOptionsOutput) ToBrokerEncryptionOptionsPtrOutput() BrokerEncryptionOptionsPtrOutput {
	return o.ToBrokerEncryptionOptionsPtrOutputWithContext(context.Background())
}

func (o BrokerEncryptionOptionsOutput) ToBrokerEncryptionOptionsPtrOutputWithContext(ctx context.Context) BrokerEncryptionOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BrokerEncryptionOptions) *BrokerEncryptionOptions {
		return &v
	}).(BrokerEncryptionOptionsPtrOutput)
}

// The customer master key (CMK) to use for the A KMS (KMS).
// This key is used to encrypt your data at rest. If not provided, Amazon MQ will use a default CMK to encrypt your data.
// The Key ARN is recommended so that drift can be detected,
// but a key ID or key alias will also be accepted for API compatibility reasons.
func (o BrokerEncryptionOptionsOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BrokerEncryptionOptions) *string { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

// Enables the use of an AWS owned CMK using AWS KMS (KMS). Set to `true` by default, if no value is provided, for example, for RabbitMQ brokers.
func (o BrokerEncryptionOptionsOutput) UseAwsOwnedKey() pulumi.BoolOutput {
	return o.ApplyT(func(v BrokerEncryptionOptions) bool { return v.UseAwsOwnedKey }).(pulumi.BoolOutput)
}

type BrokerEncryptionOptionsPtrOutput struct{ *pulumi.OutputState }

func (BrokerEncryptionOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerEncryptionOptions)(nil)).Elem()
}

func (o BrokerEncryptionOptionsPtrOutput) ToBrokerEncryptionOptionsPtrOutput() BrokerEncryptionOptionsPtrOutput {
	return o
}

func (o BrokerEncryptionOptionsPtrOutput) ToBrokerEncryptionOptionsPtrOutputWithContext(ctx context.Context) BrokerEncryptionOptionsPtrOutput {
	return o
}

func (o BrokerEncryptionOptionsPtrOutput) Elem() BrokerEncryptionOptionsOutput {
	return o.ApplyT(func(v *BrokerEncryptionOptions) BrokerEncryptionOptions {
		if v != nil {
			return *v
		}
		var ret BrokerEncryptionOptions
		return ret
	}).(BrokerEncryptionOptionsOutput)
}

// The customer master key (CMK) to use for the A KMS (KMS).
// This key is used to encrypt your data at rest. If not provided, Amazon MQ will use a default CMK to encrypt your data.
// The Key ARN is recommended so that drift can be detected,
// but a key ID or key alias will also be accepted for API compatibility reasons.
func (o BrokerEncryptionOptionsPtrOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrokerEncryptionOptions) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyId
	}).(pulumi.StringPtrOutput)
}

// Enables the use of an AWS owned CMK using AWS KMS (KMS). Set to `true` by default, if no value is provided, for example, for RabbitMQ brokers.
func (o BrokerEncryptionOptionsPtrOutput) UseAwsOwnedKey() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BrokerEncryptionOptions) *bool {
		if v == nil {
			return nil
		}
		return &v.UseAwsOwnedKey
	}).(pulumi.BoolPtrOutput)
}

type BrokerLdapServerMetadata struct {
	// Specifies the location of the LDAP server such as AWS Directory Service for Microsoft Active Directory . Optional failover server.
	Hosts []string `pulumi:"hosts"`
	// The distinguished name of the node in the directory information tree (DIT) to search for roles or groups. For example, `ou=group` , `ou=corp` , `dc=corp` , `dc=example` , `dc=com` .
	RoleBase string `pulumi:"roleBase"`
	// The group name attribute in a role entry whose value is the name of that role. For example, you can specify `cn` for a group entry's common name. If authentication succeeds, then the user is assigned the the value of the `cn` attribute for each role entry that they are a member of.
	RoleName *string `pulumi:"roleName"`
	// The LDAP search filter used to find roles within the roleBase. The distinguished name of the user matched by userSearchMatching is substituted into the `{0}` placeholder in the search filter. The client's username is substituted into the `{1}` placeholder. For example, if you set this option to `(member=uid={1})` for the user janedoe, the search filter becomes `(member=uid=janedoe)` after string substitution. It matches all role entries that have a member attribute equal to `uid=janedoe` under the subtree selected by the `RoleBases` .
	RoleSearchMatching string `pulumi:"roleSearchMatching"`
	// The directory search scope for the role. If set to true, scope is to search the entire subtree.
	RoleSearchSubtree *bool `pulumi:"roleSearchSubtree"`
	// Service account password. A service account is an account in your LDAP server that has access to initiate a connection. For example, `cn=admin` , `dc=corp` , `dc=example` , `dc=com` .
	ServiceAccountPassword *string `pulumi:"serviceAccountPassword"`
	// Service account username. A service account is an account in your LDAP server that has access to initiate a connection. For example, `cn=admin` , `ou=corp` , `dc=corp` , `dc=example` , `dc=com` .
	ServiceAccountUsername string `pulumi:"serviceAccountUsername"`
	// Select a particular subtree of the directory information tree (DIT) to search for user entries. The subtree is specified by a DN, which specifies the base node of the subtree. For example, by setting this option to `ou=Users` , `ou=corp` , `dc=corp` , `dc=example` , `dc=com` , the search for user entries is restricted to the subtree beneath `ou=Users` , `ou=corp` , `dc=corp` , `dc=example` , `dc=com` .
	UserBase string `pulumi:"userBase"`
	// The name of the LDAP attribute in the user's directory entry for the user's group membership. In some cases, user roles may be identified by the value of an attribute in the user's directory entry. The `UserRoleName` option allows you to provide the name of this attribute.
	UserRoleName *string `pulumi:"userRoleName"`
	// The LDAP search filter used to find users within the `userBase` . The client's username is substituted into the `{0}` placeholder in the search filter. For example, if this option is set to `(uid={0})` and the received username is `janedoe` , the search filter becomes `(uid=janedoe)` after string substitution. It will result in matching an entry like `uid=janedoe` , `ou=Users` , `ou=corp` , `dc=corp` , `dc=example` , `dc=com` .
	UserSearchMatching string `pulumi:"userSearchMatching"`
	// The directory search scope for the user. If set to true, scope is to search the entire subtree.
	UserSearchSubtree *bool `pulumi:"userSearchSubtree"`
}

// BrokerLdapServerMetadataInput is an input type that accepts BrokerLdapServerMetadataArgs and BrokerLdapServerMetadataOutput values.
// You can construct a concrete instance of `BrokerLdapServerMetadataInput` via:
//
//	BrokerLdapServerMetadataArgs{...}
type BrokerLdapServerMetadataInput interface {
	pulumi.Input

	ToBrokerLdapServerMetadataOutput() BrokerLdapServerMetadataOutput
	ToBrokerLdapServerMetadataOutputWithContext(context.Context) BrokerLdapServerMetadataOutput
}

type BrokerLdapServerMetadataArgs struct {
	// Specifies the location of the LDAP server such as AWS Directory Service for Microsoft Active Directory . Optional failover server.
	Hosts pulumi.StringArrayInput `pulumi:"hosts"`
	// The distinguished name of the node in the directory information tree (DIT) to search for roles or groups. For example, `ou=group` , `ou=corp` , `dc=corp` , `dc=example` , `dc=com` .
	RoleBase pulumi.StringInput `pulumi:"roleBase"`
	// The group name attribute in a role entry whose value is the name of that role. For example, you can specify `cn` for a group entry's common name. If authentication succeeds, then the user is assigned the the value of the `cn` attribute for each role entry that they are a member of.
	RoleName pulumi.StringPtrInput `pulumi:"roleName"`
	// The LDAP search filter used to find roles within the roleBase. The distinguished name of the user matched by userSearchMatching is substituted into the `{0}` placeholder in the search filter. The client's username is substituted into the `{1}` placeholder. For example, if you set this option to `(member=uid={1})` for the user janedoe, the search filter becomes `(member=uid=janedoe)` after string substitution. It matches all role entries that have a member attribute equal to `uid=janedoe` under the subtree selected by the `RoleBases` .
	RoleSearchMatching pulumi.StringInput `pulumi:"roleSearchMatching"`
	// The directory search scope for the role. If set to true, scope is to search the entire subtree.
	RoleSearchSubtree pulumi.BoolPtrInput `pulumi:"roleSearchSubtree"`
	// Service account password. A service account is an account in your LDAP server that has access to initiate a connection. For example, `cn=admin` , `dc=corp` , `dc=example` , `dc=com` .
	ServiceAccountPassword pulumi.StringPtrInput `pulumi:"serviceAccountPassword"`
	// Service account username. A service account is an account in your LDAP server that has access to initiate a connection. For example, `cn=admin` , `ou=corp` , `dc=corp` , `dc=example` , `dc=com` .
	ServiceAccountUsername pulumi.StringInput `pulumi:"serviceAccountUsername"`
	// Select a particular subtree of the directory information tree (DIT) to search for user entries. The subtree is specified by a DN, which specifies the base node of the subtree. For example, by setting this option to `ou=Users` , `ou=corp` , `dc=corp` , `dc=example` , `dc=com` , the search for user entries is restricted to the subtree beneath `ou=Users` , `ou=corp` , `dc=corp` , `dc=example` , `dc=com` .
	UserBase pulumi.StringInput `pulumi:"userBase"`
	// The name of the LDAP attribute in the user's directory entry for the user's group membership. In some cases, user roles may be identified by the value of an attribute in the user's directory entry. The `UserRoleName` option allows you to provide the name of this attribute.
	UserRoleName pulumi.StringPtrInput `pulumi:"userRoleName"`
	// The LDAP search filter used to find users within the `userBase` . The client's username is substituted into the `{0}` placeholder in the search filter. For example, if this option is set to `(uid={0})` and the received username is `janedoe` , the search filter becomes `(uid=janedoe)` after string substitution. It will result in matching an entry like `uid=janedoe` , `ou=Users` , `ou=corp` , `dc=corp` , `dc=example` , `dc=com` .
	UserSearchMatching pulumi.StringInput `pulumi:"userSearchMatching"`
	// The directory search scope for the user. If set to true, scope is to search the entire subtree.
	UserSearchSubtree pulumi.BoolPtrInput `pulumi:"userSearchSubtree"`
}

func (BrokerLdapServerMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerLdapServerMetadata)(nil)).Elem()
}

func (i BrokerLdapServerMetadataArgs) ToBrokerLdapServerMetadataOutput() BrokerLdapServerMetadataOutput {
	return i.ToBrokerLdapServerMetadataOutputWithContext(context.Background())
}

func (i BrokerLdapServerMetadataArgs) ToBrokerLdapServerMetadataOutputWithContext(ctx context.Context) BrokerLdapServerMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerLdapServerMetadataOutput)
}

func (i BrokerLdapServerMetadataArgs) ToBrokerLdapServerMetadataPtrOutput() BrokerLdapServerMetadataPtrOutput {
	return i.ToBrokerLdapServerMetadataPtrOutputWithContext(context.Background())
}

func (i BrokerLdapServerMetadataArgs) ToBrokerLdapServerMetadataPtrOutputWithContext(ctx context.Context) BrokerLdapServerMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerLdapServerMetadataOutput).ToBrokerLdapServerMetadataPtrOutputWithContext(ctx)
}

// BrokerLdapServerMetadataPtrInput is an input type that accepts BrokerLdapServerMetadataArgs, BrokerLdapServerMetadataPtr and BrokerLdapServerMetadataPtrOutput values.
// You can construct a concrete instance of `BrokerLdapServerMetadataPtrInput` via:
//
//	        BrokerLdapServerMetadataArgs{...}
//
//	or:
//
//	        nil
type BrokerLdapServerMetadataPtrInput interface {
	pulumi.Input

	ToBrokerLdapServerMetadataPtrOutput() BrokerLdapServerMetadataPtrOutput
	ToBrokerLdapServerMetadataPtrOutputWithContext(context.Context) BrokerLdapServerMetadataPtrOutput
}

type brokerLdapServerMetadataPtrType BrokerLdapServerMetadataArgs

func BrokerLdapServerMetadataPtr(v *BrokerLdapServerMetadataArgs) BrokerLdapServerMetadataPtrInput {
	return (*brokerLdapServerMetadataPtrType)(v)
}

func (*brokerLdapServerMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerLdapServerMetadata)(nil)).Elem()
}

func (i *brokerLdapServerMetadataPtrType) ToBrokerLdapServerMetadataPtrOutput() BrokerLdapServerMetadataPtrOutput {
	return i.ToBrokerLdapServerMetadataPtrOutputWithContext(context.Background())
}

func (i *brokerLdapServerMetadataPtrType) ToBrokerLdapServerMetadataPtrOutputWithContext(ctx context.Context) BrokerLdapServerMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerLdapServerMetadataPtrOutput)
}

type BrokerLdapServerMetadataOutput struct{ *pulumi.OutputState }

func (BrokerLdapServerMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerLdapServerMetadata)(nil)).Elem()
}

func (o BrokerLdapServerMetadataOutput) ToBrokerLdapServerMetadataOutput() BrokerLdapServerMetadataOutput {
	return o
}

func (o BrokerLdapServerMetadataOutput) ToBrokerLdapServerMetadataOutputWithContext(ctx context.Context) BrokerLdapServerMetadataOutput {
	return o
}

func (o BrokerLdapServerMetadataOutput) ToBrokerLdapServerMetadataPtrOutput() BrokerLdapServerMetadataPtrOutput {
	return o.ToBrokerLdapServerMetadataPtrOutputWithContext(context.Background())
}

func (o BrokerLdapServerMetadataOutput) ToBrokerLdapServerMetadataPtrOutputWithContext(ctx context.Context) BrokerLdapServerMetadataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BrokerLdapServerMetadata) *BrokerLdapServerMetadata {
		return &v
	}).(BrokerLdapServerMetadataPtrOutput)
}

// Specifies the location of the LDAP server such as AWS Directory Service for Microsoft Active Directory . Optional failover server.
func (o BrokerLdapServerMetadataOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BrokerLdapServerMetadata) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

// The distinguished name of the node in the directory information tree (DIT) to search for roles or groups. For example, `ou=group` , `ou=corp` , `dc=corp` , `dc=example` , `dc=com` .
func (o BrokerLdapServerMetadataOutput) RoleBase() pulumi.StringOutput {
	return o.ApplyT(func(v BrokerLdapServerMetadata) string { return v.RoleBase }).(pulumi.StringOutput)
}

// The group name attribute in a role entry whose value is the name of that role. For example, you can specify `cn` for a group entry's common name. If authentication succeeds, then the user is assigned the the value of the `cn` attribute for each role entry that they are a member of.
func (o BrokerLdapServerMetadataOutput) RoleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BrokerLdapServerMetadata) *string { return v.RoleName }).(pulumi.StringPtrOutput)
}

// The LDAP search filter used to find roles within the roleBase. The distinguished name of the user matched by userSearchMatching is substituted into the `{0}` placeholder in the search filter. The client's username is substituted into the `{1}` placeholder. For example, if you set this option to `(member=uid={1})` for the user janedoe, the search filter becomes `(member=uid=janedoe)` after string substitution. It matches all role entries that have a member attribute equal to `uid=janedoe` under the subtree selected by the `RoleBases` .
func (o BrokerLdapServerMetadataOutput) RoleSearchMatching() pulumi.StringOutput {
	return o.ApplyT(func(v BrokerLdapServerMetadata) string { return v.RoleSearchMatching }).(pulumi.StringOutput)
}

// The directory search scope for the role. If set to true, scope is to search the entire subtree.
func (o BrokerLdapServerMetadataOutput) RoleSearchSubtree() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BrokerLdapServerMetadata) *bool { return v.RoleSearchSubtree }).(pulumi.BoolPtrOutput)
}

// Service account password. A service account is an account in your LDAP server that has access to initiate a connection. For example, `cn=admin` , `dc=corp` , `dc=example` , `dc=com` .
func (o BrokerLdapServerMetadataOutput) ServiceAccountPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BrokerLdapServerMetadata) *string { return v.ServiceAccountPassword }).(pulumi.StringPtrOutput)
}

// Service account username. A service account is an account in your LDAP server that has access to initiate a connection. For example, `cn=admin` , `ou=corp` , `dc=corp` , `dc=example` , `dc=com` .
func (o BrokerLdapServerMetadataOutput) ServiceAccountUsername() pulumi.StringOutput {
	return o.ApplyT(func(v BrokerLdapServerMetadata) string { return v.ServiceAccountUsername }).(pulumi.StringOutput)
}

// Select a particular subtree of the directory information tree (DIT) to search for user entries. The subtree is specified by a DN, which specifies the base node of the subtree. For example, by setting this option to `ou=Users` , `ou=corp` , `dc=corp` , `dc=example` , `dc=com` , the search for user entries is restricted to the subtree beneath `ou=Users` , `ou=corp` , `dc=corp` , `dc=example` , `dc=com` .
func (o BrokerLdapServerMetadataOutput) UserBase() pulumi.StringOutput {
	return o.ApplyT(func(v BrokerLdapServerMetadata) string { return v.UserBase }).(pulumi.StringOutput)
}

// The name of the LDAP attribute in the user's directory entry for the user's group membership. In some cases, user roles may be identified by the value of an attribute in the user's directory entry. The `UserRoleName` option allows you to provide the name of this attribute.
func (o BrokerLdapServerMetadataOutput) UserRoleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BrokerLdapServerMetadata) *string { return v.UserRoleName }).(pulumi.StringPtrOutput)
}

// The LDAP search filter used to find users within the `userBase` . The client's username is substituted into the `{0}` placeholder in the search filter. For example, if this option is set to `(uid={0})` and the received username is `janedoe` , the search filter becomes `(uid=janedoe)` after string substitution. It will result in matching an entry like `uid=janedoe` , `ou=Users` , `ou=corp` , `dc=corp` , `dc=example` , `dc=com` .
func (o BrokerLdapServerMetadataOutput) UserSearchMatching() pulumi.StringOutput {
	return o.ApplyT(func(v BrokerLdapServerMetadata) string { return v.UserSearchMatching }).(pulumi.StringOutput)
}

// The directory search scope for the user. If set to true, scope is to search the entire subtree.
func (o BrokerLdapServerMetadataOutput) UserSearchSubtree() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BrokerLdapServerMetadata) *bool { return v.UserSearchSubtree }).(pulumi.BoolPtrOutput)
}

type BrokerLdapServerMetadataPtrOutput struct{ *pulumi.OutputState }

func (BrokerLdapServerMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerLdapServerMetadata)(nil)).Elem()
}

func (o BrokerLdapServerMetadataPtrOutput) ToBrokerLdapServerMetadataPtrOutput() BrokerLdapServerMetadataPtrOutput {
	return o
}

func (o BrokerLdapServerMetadataPtrOutput) ToBrokerLdapServerMetadataPtrOutputWithContext(ctx context.Context) BrokerLdapServerMetadataPtrOutput {
	return o
}

func (o BrokerLdapServerMetadataPtrOutput) Elem() BrokerLdapServerMetadataOutput {
	return o.ApplyT(func(v *BrokerLdapServerMetadata) BrokerLdapServerMetadata {
		if v != nil {
			return *v
		}
		var ret BrokerLdapServerMetadata
		return ret
	}).(BrokerLdapServerMetadataOutput)
}

// Specifies the location of the LDAP server such as AWS Directory Service for Microsoft Active Directory . Optional failover server.
func (o BrokerLdapServerMetadataPtrOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BrokerLdapServerMetadata) []string {
		if v == nil {
			return nil
		}
		return v.Hosts
	}).(pulumi.StringArrayOutput)
}

// The distinguished name of the node in the directory information tree (DIT) to search for roles or groups. For example, `ou=group` , `ou=corp` , `dc=corp` , `dc=example` , `dc=com` .
func (o BrokerLdapServerMetadataPtrOutput) RoleBase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrokerLdapServerMetadata) *string {
		if v == nil {
			return nil
		}
		return &v.RoleBase
	}).(pulumi.StringPtrOutput)
}

// The group name attribute in a role entry whose value is the name of that role. For example, you can specify `cn` for a group entry's common name. If authentication succeeds, then the user is assigned the the value of the `cn` attribute for each role entry that they are a member of.
func (o BrokerLdapServerMetadataPtrOutput) RoleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrokerLdapServerMetadata) *string {
		if v == nil {
			return nil
		}
		return v.RoleName
	}).(pulumi.StringPtrOutput)
}

// The LDAP search filter used to find roles within the roleBase. The distinguished name of the user matched by userSearchMatching is substituted into the `{0}` placeholder in the search filter. The client's username is substituted into the `{1}` placeholder. For example, if you set this option to `(member=uid={1})` for the user janedoe, the search filter becomes `(member=uid=janedoe)` after string substitution. It matches all role entries that have a member attribute equal to `uid=janedoe` under the subtree selected by the `RoleBases` .
func (o BrokerLdapServerMetadataPtrOutput) RoleSearchMatching() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrokerLdapServerMetadata) *string {
		if v == nil {
			return nil
		}
		return &v.RoleSearchMatching
	}).(pulumi.StringPtrOutput)
}

// The directory search scope for the role. If set to true, scope is to search the entire subtree.
func (o BrokerLdapServerMetadataPtrOutput) RoleSearchSubtree() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BrokerLdapServerMetadata) *bool {
		if v == nil {
			return nil
		}
		return v.RoleSearchSubtree
	}).(pulumi.BoolPtrOutput)
}

// Service account password. A service account is an account in your LDAP server that has access to initiate a connection. For example, `cn=admin` , `dc=corp` , `dc=example` , `dc=com` .
func (o BrokerLdapServerMetadataPtrOutput) ServiceAccountPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrokerLdapServerMetadata) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountPassword
	}).(pulumi.StringPtrOutput)
}

// Service account username. A service account is an account in your LDAP server that has access to initiate a connection. For example, `cn=admin` , `ou=corp` , `dc=corp` , `dc=example` , `dc=com` .
func (o BrokerLdapServerMetadataPtrOutput) ServiceAccountUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrokerLdapServerMetadata) *string {
		if v == nil {
			return nil
		}
		return &v.ServiceAccountUsername
	}).(pulumi.StringPtrOutput)
}

// Select a particular subtree of the directory information tree (DIT) to search for user entries. The subtree is specified by a DN, which specifies the base node of the subtree. For example, by setting this option to `ou=Users` , `ou=corp` , `dc=corp` , `dc=example` , `dc=com` , the search for user entries is restricted to the subtree beneath `ou=Users` , `ou=corp` , `dc=corp` , `dc=example` , `dc=com` .
func (o BrokerLdapServerMetadataPtrOutput) UserBase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrokerLdapServerMetadata) *string {
		if v == nil {
			return nil
		}
		return &v.UserBase
	}).(pulumi.StringPtrOutput)
}

// The name of the LDAP attribute in the user's directory entry for the user's group membership. In some cases, user roles may be identified by the value of an attribute in the user's directory entry. The `UserRoleName` option allows you to provide the name of this attribute.
func (o BrokerLdapServerMetadataPtrOutput) UserRoleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrokerLdapServerMetadata) *string {
		if v == nil {
			return nil
		}
		return v.UserRoleName
	}).(pulumi.StringPtrOutput)
}

// The LDAP search filter used to find users within the `userBase` . The client's username is substituted into the `{0}` placeholder in the search filter. For example, if this option is set to `(uid={0})` and the received username is `janedoe` , the search filter becomes `(uid=janedoe)` after string substitution. It will result in matching an entry like `uid=janedoe` , `ou=Users` , `ou=corp` , `dc=corp` , `dc=example` , `dc=com` .
func (o BrokerLdapServerMetadataPtrOutput) UserSearchMatching() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrokerLdapServerMetadata) *string {
		if v == nil {
			return nil
		}
		return &v.UserSearchMatching
	}).(pulumi.StringPtrOutput)
}

// The directory search scope for the user. If set to true, scope is to search the entire subtree.
func (o BrokerLdapServerMetadataPtrOutput) UserSearchSubtree() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BrokerLdapServerMetadata) *bool {
		if v == nil {
			return nil
		}
		return v.UserSearchSubtree
	}).(pulumi.BoolPtrOutput)
}

type BrokerLogList struct {
	// Enables audit logging. Every user management action made using JMX or the ActiveMQ Web Console is logged. Does not apply to RabbitMQ brokers.
	Audit *bool `pulumi:"audit"`
	// Enables general logging.
	General *bool `pulumi:"general"`
}

// BrokerLogListInput is an input type that accepts BrokerLogListArgs and BrokerLogListOutput values.
// You can construct a concrete instance of `BrokerLogListInput` via:
//
//	BrokerLogListArgs{...}
type BrokerLogListInput interface {
	pulumi.Input

	ToBrokerLogListOutput() BrokerLogListOutput
	ToBrokerLogListOutputWithContext(context.Context) BrokerLogListOutput
}

type BrokerLogListArgs struct {
	// Enables audit logging. Every user management action made using JMX or the ActiveMQ Web Console is logged. Does not apply to RabbitMQ brokers.
	Audit pulumi.BoolPtrInput `pulumi:"audit"`
	// Enables general logging.
	General pulumi.BoolPtrInput `pulumi:"general"`
}

func (BrokerLogListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerLogList)(nil)).Elem()
}

func (i BrokerLogListArgs) ToBrokerLogListOutput() BrokerLogListOutput {
	return i.ToBrokerLogListOutputWithContext(context.Background())
}

func (i BrokerLogListArgs) ToBrokerLogListOutputWithContext(ctx context.Context) BrokerLogListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerLogListOutput)
}

func (i BrokerLogListArgs) ToBrokerLogListPtrOutput() BrokerLogListPtrOutput {
	return i.ToBrokerLogListPtrOutputWithContext(context.Background())
}

func (i BrokerLogListArgs) ToBrokerLogListPtrOutputWithContext(ctx context.Context) BrokerLogListPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerLogListOutput).ToBrokerLogListPtrOutputWithContext(ctx)
}

// BrokerLogListPtrInput is an input type that accepts BrokerLogListArgs, BrokerLogListPtr and BrokerLogListPtrOutput values.
// You can construct a concrete instance of `BrokerLogListPtrInput` via:
//
//	        BrokerLogListArgs{...}
//
//	or:
//
//	        nil
type BrokerLogListPtrInput interface {
	pulumi.Input

	ToBrokerLogListPtrOutput() BrokerLogListPtrOutput
	ToBrokerLogListPtrOutputWithContext(context.Context) BrokerLogListPtrOutput
}

type brokerLogListPtrType BrokerLogListArgs

func BrokerLogListPtr(v *BrokerLogListArgs) BrokerLogListPtrInput {
	return (*brokerLogListPtrType)(v)
}

func (*brokerLogListPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerLogList)(nil)).Elem()
}

func (i *brokerLogListPtrType) ToBrokerLogListPtrOutput() BrokerLogListPtrOutput {
	return i.ToBrokerLogListPtrOutputWithContext(context.Background())
}

func (i *brokerLogListPtrType) ToBrokerLogListPtrOutputWithContext(ctx context.Context) BrokerLogListPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerLogListPtrOutput)
}

type BrokerLogListOutput struct{ *pulumi.OutputState }

func (BrokerLogListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerLogList)(nil)).Elem()
}

func (o BrokerLogListOutput) ToBrokerLogListOutput() BrokerLogListOutput {
	return o
}

func (o BrokerLogListOutput) ToBrokerLogListOutputWithContext(ctx context.Context) BrokerLogListOutput {
	return o
}

func (o BrokerLogListOutput) ToBrokerLogListPtrOutput() BrokerLogListPtrOutput {
	return o.ToBrokerLogListPtrOutputWithContext(context.Background())
}

func (o BrokerLogListOutput) ToBrokerLogListPtrOutputWithContext(ctx context.Context) BrokerLogListPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BrokerLogList) *BrokerLogList {
		return &v
	}).(BrokerLogListPtrOutput)
}

// Enables audit logging. Every user management action made using JMX or the ActiveMQ Web Console is logged. Does not apply to RabbitMQ brokers.
func (o BrokerLogListOutput) Audit() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BrokerLogList) *bool { return v.Audit }).(pulumi.BoolPtrOutput)
}

// Enables general logging.
func (o BrokerLogListOutput) General() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BrokerLogList) *bool { return v.General }).(pulumi.BoolPtrOutput)
}

type BrokerLogListPtrOutput struct{ *pulumi.OutputState }

func (BrokerLogListPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerLogList)(nil)).Elem()
}

func (o BrokerLogListPtrOutput) ToBrokerLogListPtrOutput() BrokerLogListPtrOutput {
	return o
}

func (o BrokerLogListPtrOutput) ToBrokerLogListPtrOutputWithContext(ctx context.Context) BrokerLogListPtrOutput {
	return o
}

func (o BrokerLogListPtrOutput) Elem() BrokerLogListOutput {
	return o.ApplyT(func(v *BrokerLogList) BrokerLogList {
		if v != nil {
			return *v
		}
		var ret BrokerLogList
		return ret
	}).(BrokerLogListOutput)
}

// Enables audit logging. Every user management action made using JMX or the ActiveMQ Web Console is logged. Does not apply to RabbitMQ brokers.
func (o BrokerLogListPtrOutput) Audit() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BrokerLogList) *bool {
		if v == nil {
			return nil
		}
		return v.Audit
	}).(pulumi.BoolPtrOutput)
}

// Enables general logging.
func (o BrokerLogListPtrOutput) General() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BrokerLogList) *bool {
		if v == nil {
			return nil
		}
		return v.General
	}).(pulumi.BoolPtrOutput)
}

type BrokerMaintenanceWindow struct {
	// _Allowed Values_: <code>MONDAY</code> | <code>TUESDAY</code> | <code>WEDNESDAY</code> | <code>THURSDAY</code> | <code>FRIDAY</code> | <code>SATURDAY</code> | <code>SUNDAY</code>
	DayOfWeek string `pulumi:"dayOfWeek"`
	// The time, in 24-hour format, and use only numbers separated by a colon, HH:MM or HH:MM:SS. Example: 13:05.
	// When writing YAML this may need to be quoted to prevent a timestamp being read and converted to a number of minutes or seconds.
	TimeOfDay string `pulumi:"timeOfDay"`
	// The time zone, UTC by default, in either the Country/City format, or the UTC offset format.
	TimeZone string `pulumi:"timeZone"`
}

// BrokerMaintenanceWindowInput is an input type that accepts BrokerMaintenanceWindowArgs and BrokerMaintenanceWindowOutput values.
// You can construct a concrete instance of `BrokerMaintenanceWindowInput` via:
//
//	BrokerMaintenanceWindowArgs{...}
type BrokerMaintenanceWindowInput interface {
	pulumi.Input

	ToBrokerMaintenanceWindowOutput() BrokerMaintenanceWindowOutput
	ToBrokerMaintenanceWindowOutputWithContext(context.Context) BrokerMaintenanceWindowOutput
}

type BrokerMaintenanceWindowArgs struct {
	// _Allowed Values_: <code>MONDAY</code> | <code>TUESDAY</code> | <code>WEDNESDAY</code> | <code>THURSDAY</code> | <code>FRIDAY</code> | <code>SATURDAY</code> | <code>SUNDAY</code>
	DayOfWeek pulumi.StringInput `pulumi:"dayOfWeek"`
	// The time, in 24-hour format, and use only numbers separated by a colon, HH:MM or HH:MM:SS. Example: 13:05.
	// When writing YAML this may need to be quoted to prevent a timestamp being read and converted to a number of minutes or seconds.
	TimeOfDay pulumi.StringInput `pulumi:"timeOfDay"`
	// The time zone, UTC by default, in either the Country/City format, or the UTC offset format.
	TimeZone pulumi.StringInput `pulumi:"timeZone"`
}

func (BrokerMaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerMaintenanceWindow)(nil)).Elem()
}

func (i BrokerMaintenanceWindowArgs) ToBrokerMaintenanceWindowOutput() BrokerMaintenanceWindowOutput {
	return i.ToBrokerMaintenanceWindowOutputWithContext(context.Background())
}

func (i BrokerMaintenanceWindowArgs) ToBrokerMaintenanceWindowOutputWithContext(ctx context.Context) BrokerMaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerMaintenanceWindowOutput)
}

func (i BrokerMaintenanceWindowArgs) ToBrokerMaintenanceWindowPtrOutput() BrokerMaintenanceWindowPtrOutput {
	return i.ToBrokerMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (i BrokerMaintenanceWindowArgs) ToBrokerMaintenanceWindowPtrOutputWithContext(ctx context.Context) BrokerMaintenanceWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerMaintenanceWindowOutput).ToBrokerMaintenanceWindowPtrOutputWithContext(ctx)
}

// BrokerMaintenanceWindowPtrInput is an input type that accepts BrokerMaintenanceWindowArgs, BrokerMaintenanceWindowPtr and BrokerMaintenanceWindowPtrOutput values.
// You can construct a concrete instance of `BrokerMaintenanceWindowPtrInput` via:
//
//	        BrokerMaintenanceWindowArgs{...}
//
//	or:
//
//	        nil
type BrokerMaintenanceWindowPtrInput interface {
	pulumi.Input

	ToBrokerMaintenanceWindowPtrOutput() BrokerMaintenanceWindowPtrOutput
	ToBrokerMaintenanceWindowPtrOutputWithContext(context.Context) BrokerMaintenanceWindowPtrOutput
}

type brokerMaintenanceWindowPtrType BrokerMaintenanceWindowArgs

func BrokerMaintenanceWindowPtr(v *BrokerMaintenanceWindowArgs) BrokerMaintenanceWindowPtrInput {
	return (*brokerMaintenanceWindowPtrType)(v)
}

func (*brokerMaintenanceWindowPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerMaintenanceWindow)(nil)).Elem()
}

func (i *brokerMaintenanceWindowPtrType) ToBrokerMaintenanceWindowPtrOutput() BrokerMaintenanceWindowPtrOutput {
	return i.ToBrokerMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (i *brokerMaintenanceWindowPtrType) ToBrokerMaintenanceWindowPtrOutputWithContext(ctx context.Context) BrokerMaintenanceWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerMaintenanceWindowPtrOutput)
}

type BrokerMaintenanceWindowOutput struct{ *pulumi.OutputState }

func (BrokerMaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerMaintenanceWindow)(nil)).Elem()
}

func (o BrokerMaintenanceWindowOutput) ToBrokerMaintenanceWindowOutput() BrokerMaintenanceWindowOutput {
	return o
}

func (o BrokerMaintenanceWindowOutput) ToBrokerMaintenanceWindowOutputWithContext(ctx context.Context) BrokerMaintenanceWindowOutput {
	return o
}

func (o BrokerMaintenanceWindowOutput) ToBrokerMaintenanceWindowPtrOutput() BrokerMaintenanceWindowPtrOutput {
	return o.ToBrokerMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (o BrokerMaintenanceWindowOutput) ToBrokerMaintenanceWindowPtrOutputWithContext(ctx context.Context) BrokerMaintenanceWindowPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BrokerMaintenanceWindow) *BrokerMaintenanceWindow {
		return &v
	}).(BrokerMaintenanceWindowPtrOutput)
}

// _Allowed Values_: <code>MONDAY</code> | <code>TUESDAY</code> | <code>WEDNESDAY</code> | <code>THURSDAY</code> | <code>FRIDAY</code> | <code>SATURDAY</code> | <code>SUNDAY</code>
func (o BrokerMaintenanceWindowOutput) DayOfWeek() pulumi.StringOutput {
	return o.ApplyT(func(v BrokerMaintenanceWindow) string { return v.DayOfWeek }).(pulumi.StringOutput)
}

// The time, in 24-hour format, and use only numbers separated by a colon, HH:MM or HH:MM:SS. Example: 13:05.
// When writing YAML this may need to be quoted to prevent a timestamp being read and converted to a number of minutes or seconds.
func (o BrokerMaintenanceWindowOutput) TimeOfDay() pulumi.StringOutput {
	return o.ApplyT(func(v BrokerMaintenanceWindow) string { return v.TimeOfDay }).(pulumi.StringOutput)
}

// The time zone, UTC by default, in either the Country/City format, or the UTC offset format.
func (o BrokerMaintenanceWindowOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v BrokerMaintenanceWindow) string { return v.TimeZone }).(pulumi.StringOutput)
}

type BrokerMaintenanceWindowPtrOutput struct{ *pulumi.OutputState }

func (BrokerMaintenanceWindowPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BrokerMaintenanceWindow)(nil)).Elem()
}

func (o BrokerMaintenanceWindowPtrOutput) ToBrokerMaintenanceWindowPtrOutput() BrokerMaintenanceWindowPtrOutput {
	return o
}

func (o BrokerMaintenanceWindowPtrOutput) ToBrokerMaintenanceWindowPtrOutputWithContext(ctx context.Context) BrokerMaintenanceWindowPtrOutput {
	return o
}

func (o BrokerMaintenanceWindowPtrOutput) Elem() BrokerMaintenanceWindowOutput {
	return o.ApplyT(func(v *BrokerMaintenanceWindow) BrokerMaintenanceWindow {
		if v != nil {
			return *v
		}
		var ret BrokerMaintenanceWindow
		return ret
	}).(BrokerMaintenanceWindowOutput)
}

// _Allowed Values_: <code>MONDAY</code> | <code>TUESDAY</code> | <code>WEDNESDAY</code> | <code>THURSDAY</code> | <code>FRIDAY</code> | <code>SATURDAY</code> | <code>SUNDAY</code>
func (o BrokerMaintenanceWindowPtrOutput) DayOfWeek() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrokerMaintenanceWindow) *string {
		if v == nil {
			return nil
		}
		return &v.DayOfWeek
	}).(pulumi.StringPtrOutput)
}

// The time, in 24-hour format, and use only numbers separated by a colon, HH:MM or HH:MM:SS. Example: 13:05.
// When writing YAML this may need to be quoted to prevent a timestamp being read and converted to a number of minutes or seconds.
func (o BrokerMaintenanceWindowPtrOutput) TimeOfDay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrokerMaintenanceWindow) *string {
		if v == nil {
			return nil
		}
		return &v.TimeOfDay
	}).(pulumi.StringPtrOutput)
}

// The time zone, UTC by default, in either the Country/City format, or the UTC offset format.
func (o BrokerMaintenanceWindowPtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrokerMaintenanceWindow) *string {
		if v == nil {
			return nil
		}
		return &v.TimeZone
	}).(pulumi.StringPtrOutput)
}

type BrokerTagsEntry struct {
	// The key in a key-value pair.
	Key string `pulumi:"key"`
	// The value in a key-value pair.
	Value string `pulumi:"value"`
}

type BrokerUser struct {
	// Enables access to the ActiveMQ web console for the ActiveMQ user. Does not apply to RabbitMQ brokers.
	ConsoleAccess *bool `pulumi:"consoleAccess"`
	// The list of groups (20 maximum) to which the ActiveMQ user belongs. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long. Does not apply to RabbitMQ brokers.
	Groups []string `pulumi:"groups"`
	// The password of the user. This value must be at least 12 characters long, must contain at least 4 unique characters, and must not contain commas, colons, or equal signs (,:=).
	Password string `pulumi:"password"`
	// Defines if this user is intended for CRDR replication purposes.
	ReplicationUser *bool `pulumi:"replicationUser"`
	// The username of the broker user. For Amazon MQ for ActiveMQ brokers, this value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). For Amazon MQ for RabbitMQ brokers, this value can contain only alphanumeric characters, dashes, periods, underscores (- . _). This value must not contain a tilde (~) character. Amazon MQ prohibts using guest as a valid usename. This value must be 2-100 characters long.
	//
	// > Do not add personally identifiable information (PII) or other confidential or sensitive information in broker usernames. Broker usernames are accessible to other AWS services, including CloudWatch Logs . Broker usernames are not intended to be used for private or sensitive data.
	Username string `pulumi:"username"`
}

// BrokerUserInput is an input type that accepts BrokerUserArgs and BrokerUserOutput values.
// You can construct a concrete instance of `BrokerUserInput` via:
//
//	BrokerUserArgs{...}
type BrokerUserInput interface {
	pulumi.Input

	ToBrokerUserOutput() BrokerUserOutput
	ToBrokerUserOutputWithContext(context.Context) BrokerUserOutput
}

type BrokerUserArgs struct {
	// Enables access to the ActiveMQ web console for the ActiveMQ user. Does not apply to RabbitMQ brokers.
	ConsoleAccess pulumi.BoolPtrInput `pulumi:"consoleAccess"`
	// The list of groups (20 maximum) to which the ActiveMQ user belongs. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long. Does not apply to RabbitMQ brokers.
	Groups pulumi.StringArrayInput `pulumi:"groups"`
	// The password of the user. This value must be at least 12 characters long, must contain at least 4 unique characters, and must not contain commas, colons, or equal signs (,:=).
	Password pulumi.StringInput `pulumi:"password"`
	// Defines if this user is intended for CRDR replication purposes.
	ReplicationUser pulumi.BoolPtrInput `pulumi:"replicationUser"`
	// The username of the broker user. For Amazon MQ for ActiveMQ brokers, this value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). For Amazon MQ for RabbitMQ brokers, this value can contain only alphanumeric characters, dashes, periods, underscores (- . _). This value must not contain a tilde (~) character. Amazon MQ prohibts using guest as a valid usename. This value must be 2-100 characters long.
	//
	// > Do not add personally identifiable information (PII) or other confidential or sensitive information in broker usernames. Broker usernames are accessible to other AWS services, including CloudWatch Logs . Broker usernames are not intended to be used for private or sensitive data.
	Username pulumi.StringInput `pulumi:"username"`
}

func (BrokerUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerUser)(nil)).Elem()
}

func (i BrokerUserArgs) ToBrokerUserOutput() BrokerUserOutput {
	return i.ToBrokerUserOutputWithContext(context.Background())
}

func (i BrokerUserArgs) ToBrokerUserOutputWithContext(ctx context.Context) BrokerUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerUserOutput)
}

// BrokerUserArrayInput is an input type that accepts BrokerUserArray and BrokerUserArrayOutput values.
// You can construct a concrete instance of `BrokerUserArrayInput` via:
//
//	BrokerUserArray{ BrokerUserArgs{...} }
type BrokerUserArrayInput interface {
	pulumi.Input

	ToBrokerUserArrayOutput() BrokerUserArrayOutput
	ToBrokerUserArrayOutputWithContext(context.Context) BrokerUserArrayOutput
}

type BrokerUserArray []BrokerUserInput

func (BrokerUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BrokerUser)(nil)).Elem()
}

func (i BrokerUserArray) ToBrokerUserArrayOutput() BrokerUserArrayOutput {
	return i.ToBrokerUserArrayOutputWithContext(context.Background())
}

func (i BrokerUserArray) ToBrokerUserArrayOutputWithContext(ctx context.Context) BrokerUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrokerUserArrayOutput)
}

type BrokerUserOutput struct{ *pulumi.OutputState }

func (BrokerUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BrokerUser)(nil)).Elem()
}

func (o BrokerUserOutput) ToBrokerUserOutput() BrokerUserOutput {
	return o
}

func (o BrokerUserOutput) ToBrokerUserOutputWithContext(ctx context.Context) BrokerUserOutput {
	return o
}

// Enables access to the ActiveMQ web console for the ActiveMQ user. Does not apply to RabbitMQ brokers.
func (o BrokerUserOutput) ConsoleAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BrokerUser) *bool { return v.ConsoleAccess }).(pulumi.BoolPtrOutput)
}

// The list of groups (20 maximum) to which the ActiveMQ user belongs. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long. Does not apply to RabbitMQ brokers.
func (o BrokerUserOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BrokerUser) []string { return v.Groups }).(pulumi.StringArrayOutput)
}

// The password of the user. This value must be at least 12 characters long, must contain at least 4 unique characters, and must not contain commas, colons, or equal signs (,:=).
func (o BrokerUserOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v BrokerUser) string { return v.Password }).(pulumi.StringOutput)
}

// Defines if this user is intended for CRDR replication purposes.
func (o BrokerUserOutput) ReplicationUser() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BrokerUser) *bool { return v.ReplicationUser }).(pulumi.BoolPtrOutput)
}

// The username of the broker user. For Amazon MQ for ActiveMQ brokers, this value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). For Amazon MQ for RabbitMQ brokers, this value can contain only alphanumeric characters, dashes, periods, underscores (- . _). This value must not contain a tilde (~) character. Amazon MQ prohibts using guest as a valid usename. This value must be 2-100 characters long.
//
// > Do not add personally identifiable information (PII) or other confidential or sensitive information in broker usernames. Broker usernames are accessible to other AWS services, including CloudWatch Logs . Broker usernames are not intended to be used for private or sensitive data.
func (o BrokerUserOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v BrokerUser) string { return v.Username }).(pulumi.StringOutput)
}

type BrokerUserArrayOutput struct{ *pulumi.OutputState }

func (BrokerUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BrokerUser)(nil)).Elem()
}

func (o BrokerUserArrayOutput) ToBrokerUserArrayOutput() BrokerUserArrayOutput {
	return o
}

func (o BrokerUserArrayOutput) ToBrokerUserArrayOutputWithContext(ctx context.Context) BrokerUserArrayOutput {
	return o
}

func (o BrokerUserArrayOutput) Index(i pulumi.IntInput) BrokerUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BrokerUser {
		return vs[0].([]BrokerUser)[vs[1].(int)]
	}).(BrokerUserOutput)
}

type ConfigurationTagsEntry struct {
	// The key in a key-value pair.
	Key string `pulumi:"key"`
	// The value in a key-value pair.
	Value string `pulumi:"value"`
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BrokerConfigurationIdInput)(nil)).Elem(), BrokerConfigurationIdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BrokerConfigurationIdPtrInput)(nil)).Elem(), BrokerConfigurationIdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BrokerEncryptionOptionsInput)(nil)).Elem(), BrokerEncryptionOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BrokerEncryptionOptionsPtrInput)(nil)).Elem(), BrokerEncryptionOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BrokerLdapServerMetadataInput)(nil)).Elem(), BrokerLdapServerMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BrokerLdapServerMetadataPtrInput)(nil)).Elem(), BrokerLdapServerMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BrokerLogListInput)(nil)).Elem(), BrokerLogListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BrokerLogListPtrInput)(nil)).Elem(), BrokerLogListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BrokerMaintenanceWindowInput)(nil)).Elem(), BrokerMaintenanceWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BrokerMaintenanceWindowPtrInput)(nil)).Elem(), BrokerMaintenanceWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BrokerUserInput)(nil)).Elem(), BrokerUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BrokerUserArrayInput)(nil)).Elem(), BrokerUserArray{})
	pulumi.RegisterOutputType(BrokerConfigurationIdOutput{})
	pulumi.RegisterOutputType(BrokerConfigurationIdPtrOutput{})
	pulumi.RegisterOutputType(BrokerEncryptionOptionsOutput{})
	pulumi.RegisterOutputType(BrokerEncryptionOptionsPtrOutput{})
	pulumi.RegisterOutputType(BrokerLdapServerMetadataOutput{})
	pulumi.RegisterOutputType(BrokerLdapServerMetadataPtrOutput{})
	pulumi.RegisterOutputType(BrokerLogListOutput{})
	pulumi.RegisterOutputType(BrokerLogListPtrOutput{})
	pulumi.RegisterOutputType(BrokerMaintenanceWindowOutput{})
	pulumi.RegisterOutputType(BrokerMaintenanceWindowPtrOutput{})
	pulumi.RegisterOutputType(BrokerUserOutput{})
	pulumi.RegisterOutputType(BrokerUserArrayOutput{})
}
