// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package amazonmq

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::AmazonMQ::ConfigurationAssociation
//
// Deprecated: ConfigurationAssociation is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
type ConfigurationAssociation struct {
	pulumi.CustomResourceState

	Broker        pulumi.StringOutput                           `pulumi:"broker"`
	Configuration ConfigurationAssociationConfigurationIdOutput `pulumi:"configuration"`
}

// NewConfigurationAssociation registers a new resource with the given unique name, arguments, and options.
func NewConfigurationAssociation(ctx *pulumi.Context,
	name string, args *ConfigurationAssociationArgs, opts ...pulumi.ResourceOption) (*ConfigurationAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Broker == nil {
		return nil, errors.New("invalid value for required argument 'Broker'")
	}
	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	var resource ConfigurationAssociation
	err := ctx.RegisterResource("aws-native:amazonmq:ConfigurationAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfigurationAssociation gets an existing ConfigurationAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfigurationAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConfigurationAssociationState, opts ...pulumi.ResourceOption) (*ConfigurationAssociation, error) {
	var resource ConfigurationAssociation
	err := ctx.ReadResource("aws-native:amazonmq:ConfigurationAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConfigurationAssociation resources.
type configurationAssociationState struct {
}

type ConfigurationAssociationState struct {
}

func (ConfigurationAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*configurationAssociationState)(nil)).Elem()
}

type configurationAssociationArgs struct {
	Broker        string                                  `pulumi:"broker"`
	Configuration ConfigurationAssociationConfigurationId `pulumi:"configuration"`
}

// The set of arguments for constructing a ConfigurationAssociation resource.
type ConfigurationAssociationArgs struct {
	Broker        pulumi.StringInput
	Configuration ConfigurationAssociationConfigurationIdInput
}

func (ConfigurationAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*configurationAssociationArgs)(nil)).Elem()
}

type ConfigurationAssociationInput interface {
	pulumi.Input

	ToConfigurationAssociationOutput() ConfigurationAssociationOutput
	ToConfigurationAssociationOutputWithContext(ctx context.Context) ConfigurationAssociationOutput
}

func (*ConfigurationAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationAssociation)(nil))
}

func (i *ConfigurationAssociation) ToConfigurationAssociationOutput() ConfigurationAssociationOutput {
	return i.ToConfigurationAssociationOutputWithContext(context.Background())
}

func (i *ConfigurationAssociation) ToConfigurationAssociationOutputWithContext(ctx context.Context) ConfigurationAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationAssociationOutput)
}

type ConfigurationAssociationOutput struct{ *pulumi.OutputState }

func (ConfigurationAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationAssociation)(nil))
}

func (o ConfigurationAssociationOutput) ToConfigurationAssociationOutput() ConfigurationAssociationOutput {
	return o
}

func (o ConfigurationAssociationOutput) ToConfigurationAssociationOutputWithContext(ctx context.Context) ConfigurationAssociationOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ConfigurationAssociationOutput{})
}
