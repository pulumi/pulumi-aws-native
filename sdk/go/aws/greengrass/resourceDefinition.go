// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package greengrass

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Greengrass::ResourceDefinition
//
// Deprecated: ResourceDefinition is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
type ResourceDefinition struct {
	pulumi.CustomResourceState

	Arn              pulumi.StringOutput                                  `pulumi:"arn"`
	InitialVersion   ResourceDefinitionResourceDefinitionVersionPtrOutput `pulumi:"initialVersion"`
	LatestVersionArn pulumi.StringOutput                                  `pulumi:"latestVersionArn"`
	Name             pulumi.StringOutput                                  `pulumi:"name"`
	Tags             pulumi.AnyOutput                                     `pulumi:"tags"`
}

// NewResourceDefinition registers a new resource with the given unique name, arguments, and options.
func NewResourceDefinition(ctx *pulumi.Context,
	name string, args *ResourceDefinitionArgs, opts ...pulumi.ResourceOption) (*ResourceDefinition, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	var resource ResourceDefinition
	err := ctx.RegisterResource("aws-native:greengrass:ResourceDefinition", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceDefinition gets an existing ResourceDefinition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceDefinition(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceDefinitionState, opts ...pulumi.ResourceOption) (*ResourceDefinition, error) {
	var resource ResourceDefinition
	err := ctx.ReadResource("aws-native:greengrass:ResourceDefinition", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourceDefinition resources.
type resourceDefinitionState struct {
}

type ResourceDefinitionState struct {
}

func (ResourceDefinitionState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceDefinitionState)(nil)).Elem()
}

type resourceDefinitionArgs struct {
	InitialVersion *ResourceDefinitionResourceDefinitionVersion `pulumi:"initialVersion"`
	Name           string                                       `pulumi:"name"`
	Tags           interface{}                                  `pulumi:"tags"`
}

// The set of arguments for constructing a ResourceDefinition resource.
type ResourceDefinitionArgs struct {
	InitialVersion ResourceDefinitionResourceDefinitionVersionPtrInput
	Name           pulumi.StringInput
	Tags           pulumi.Input
}

func (ResourceDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceDefinitionArgs)(nil)).Elem()
}

type ResourceDefinitionInput interface {
	pulumi.Input

	ToResourceDefinitionOutput() ResourceDefinitionOutput
	ToResourceDefinitionOutputWithContext(ctx context.Context) ResourceDefinitionOutput
}

func (*ResourceDefinition) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceDefinition)(nil))
}

func (i *ResourceDefinition) ToResourceDefinitionOutput() ResourceDefinitionOutput {
	return i.ToResourceDefinitionOutputWithContext(context.Background())
}

func (i *ResourceDefinition) ToResourceDefinitionOutputWithContext(ctx context.Context) ResourceDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceDefinitionOutput)
}

type ResourceDefinitionOutput struct{ *pulumi.OutputState }

func (ResourceDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceDefinition)(nil))
}

func (o ResourceDefinitionOutput) ToResourceDefinitionOutput() ResourceDefinitionOutput {
	return o
}

func (o ResourceDefinitionOutput) ToResourceDefinitionOutputWithContext(ctx context.Context) ResourceDefinitionOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ResourceDefinitionOutput{})
}
