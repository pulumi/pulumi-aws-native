// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package greengrass

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Greengrass::GroupVersion
//
// Deprecated: GroupVersion is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
type GroupVersion struct {
	pulumi.CustomResourceState

	ConnectorDefinitionVersionArn    pulumi.StringPtrOutput `pulumi:"connectorDefinitionVersionArn"`
	CoreDefinitionVersionArn         pulumi.StringPtrOutput `pulumi:"coreDefinitionVersionArn"`
	DeviceDefinitionVersionArn       pulumi.StringPtrOutput `pulumi:"deviceDefinitionVersionArn"`
	FunctionDefinitionVersionArn     pulumi.StringPtrOutput `pulumi:"functionDefinitionVersionArn"`
	GroupId                          pulumi.StringOutput    `pulumi:"groupId"`
	LoggerDefinitionVersionArn       pulumi.StringPtrOutput `pulumi:"loggerDefinitionVersionArn"`
	ResourceDefinitionVersionArn     pulumi.StringPtrOutput `pulumi:"resourceDefinitionVersionArn"`
	SubscriptionDefinitionVersionArn pulumi.StringPtrOutput `pulumi:"subscriptionDefinitionVersionArn"`
}

// NewGroupVersion registers a new resource with the given unique name, arguments, and options.
func NewGroupVersion(ctx *pulumi.Context,
	name string, args *GroupVersionArgs, opts ...pulumi.ResourceOption) (*GroupVersion, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	var resource GroupVersion
	err := ctx.RegisterResource("aws-native:greengrass:GroupVersion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroupVersion gets an existing GroupVersion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupVersion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupVersionState, opts ...pulumi.ResourceOption) (*GroupVersion, error) {
	var resource GroupVersion
	err := ctx.ReadResource("aws-native:greengrass:GroupVersion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GroupVersion resources.
type groupVersionState struct {
}

type GroupVersionState struct {
}

func (GroupVersionState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupVersionState)(nil)).Elem()
}

type groupVersionArgs struct {
	ConnectorDefinitionVersionArn    *string `pulumi:"connectorDefinitionVersionArn"`
	CoreDefinitionVersionArn         *string `pulumi:"coreDefinitionVersionArn"`
	DeviceDefinitionVersionArn       *string `pulumi:"deviceDefinitionVersionArn"`
	FunctionDefinitionVersionArn     *string `pulumi:"functionDefinitionVersionArn"`
	GroupId                          string  `pulumi:"groupId"`
	LoggerDefinitionVersionArn       *string `pulumi:"loggerDefinitionVersionArn"`
	ResourceDefinitionVersionArn     *string `pulumi:"resourceDefinitionVersionArn"`
	SubscriptionDefinitionVersionArn *string `pulumi:"subscriptionDefinitionVersionArn"`
}

// The set of arguments for constructing a GroupVersion resource.
type GroupVersionArgs struct {
	ConnectorDefinitionVersionArn    pulumi.StringPtrInput
	CoreDefinitionVersionArn         pulumi.StringPtrInput
	DeviceDefinitionVersionArn       pulumi.StringPtrInput
	FunctionDefinitionVersionArn     pulumi.StringPtrInput
	GroupId                          pulumi.StringInput
	LoggerDefinitionVersionArn       pulumi.StringPtrInput
	ResourceDefinitionVersionArn     pulumi.StringPtrInput
	SubscriptionDefinitionVersionArn pulumi.StringPtrInput
}

func (GroupVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupVersionArgs)(nil)).Elem()
}

type GroupVersionInput interface {
	pulumi.Input

	ToGroupVersionOutput() GroupVersionOutput
	ToGroupVersionOutputWithContext(ctx context.Context) GroupVersionOutput
}

func (*GroupVersion) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupVersion)(nil))
}

func (i *GroupVersion) ToGroupVersionOutput() GroupVersionOutput {
	return i.ToGroupVersionOutputWithContext(context.Background())
}

func (i *GroupVersion) ToGroupVersionOutputWithContext(ctx context.Context) GroupVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupVersionOutput)
}

type GroupVersionOutput struct{ *pulumi.OutputState }

func (GroupVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupVersion)(nil))
}

func (o GroupVersionOutput) ToGroupVersionOutput() GroupVersionOutput {
	return o
}

func (o GroupVersionOutput) ToGroupVersionOutputWithContext(ctx context.Context) GroupVersionOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupVersionInput)(nil)).Elem(), &GroupVersion{})
	pulumi.RegisterOutputType(GroupVersionOutput{})
}
