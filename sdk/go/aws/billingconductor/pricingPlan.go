// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package billingconductor

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Pricing Plan enables you to customize your billing details consistent with the usage that accrues in each of your billing groups.
//
// Deprecated: PricingPlan is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
type PricingPlan struct {
	pulumi.CustomResourceState

	// Pricing Plan ARN
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Creation timestamp in UNIX epoch time format
	CreationTime pulumi.IntOutput       `pulumi:"creationTime"`
	Description  pulumi.StringPtrOutput `pulumi:"description"`
	// Latest modified timestamp in UNIX epoch time format
	LastModifiedTime pulumi.IntOutput         `pulumi:"lastModifiedTime"`
	Name             pulumi.StringOutput      `pulumi:"name"`
	PricingRuleArns  pulumi.StringArrayOutput `pulumi:"pricingRuleArns"`
	// Number of associated pricing rules
	Size pulumi.IntOutput `pulumi:"size"`
}

// NewPricingPlan registers a new resource with the given unique name, arguments, and options.
func NewPricingPlan(ctx *pulumi.Context,
	name string, args *PricingPlanArgs, opts ...pulumi.ResourceOption) (*PricingPlan, error) {
	if args == nil {
		args = &PricingPlanArgs{}
	}

	var resource PricingPlan
	err := ctx.RegisterResource("aws-native:billingconductor:PricingPlan", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPricingPlan gets an existing PricingPlan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPricingPlan(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PricingPlanState, opts ...pulumi.ResourceOption) (*PricingPlan, error) {
	var resource PricingPlan
	err := ctx.ReadResource("aws-native:billingconductor:PricingPlan", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PricingPlan resources.
type pricingPlanState struct {
}

type PricingPlanState struct {
}

func (PricingPlanState) ElementType() reflect.Type {
	return reflect.TypeOf((*pricingPlanState)(nil)).Elem()
}

type pricingPlanArgs struct {
	Description     *string  `pulumi:"description"`
	Name            *string  `pulumi:"name"`
	PricingRuleArns []string `pulumi:"pricingRuleArns"`
}

// The set of arguments for constructing a PricingPlan resource.
type PricingPlanArgs struct {
	Description     pulumi.StringPtrInput
	Name            pulumi.StringPtrInput
	PricingRuleArns pulumi.StringArrayInput
}

func (PricingPlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pricingPlanArgs)(nil)).Elem()
}

type PricingPlanInput interface {
	pulumi.Input

	ToPricingPlanOutput() PricingPlanOutput
	ToPricingPlanOutputWithContext(ctx context.Context) PricingPlanOutput
}

func (*PricingPlan) ElementType() reflect.Type {
	return reflect.TypeOf((**PricingPlan)(nil)).Elem()
}

func (i *PricingPlan) ToPricingPlanOutput() PricingPlanOutput {
	return i.ToPricingPlanOutputWithContext(context.Background())
}

func (i *PricingPlan) ToPricingPlanOutputWithContext(ctx context.Context) PricingPlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PricingPlanOutput)
}

type PricingPlanOutput struct{ *pulumi.OutputState }

func (PricingPlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PricingPlan)(nil)).Elem()
}

func (o PricingPlanOutput) ToPricingPlanOutput() PricingPlanOutput {
	return o
}

func (o PricingPlanOutput) ToPricingPlanOutputWithContext(ctx context.Context) PricingPlanOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PricingPlanInput)(nil)).Elem(), &PricingPlan{})
	pulumi.RegisterOutputType(PricingPlanOutput{})
}
