// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appsync

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// Describes a runtime used by an AWS AppSync pipeline resolver or AWS AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified.
type FunctionConfigurationAppSyncRuntime struct {
	// The name of the runtime to use. Currently, the only allowed value is APPSYNC_JS.
	Name string `pulumi:"name"`
	// The version of the runtime to use. Currently, the only allowed version is 1.0.0.
	RuntimeVersion string `pulumi:"runtimeVersion"`
}

// FunctionConfigurationAppSyncRuntimeInput is an input type that accepts FunctionConfigurationAppSyncRuntimeArgs and FunctionConfigurationAppSyncRuntimeOutput values.
// You can construct a concrete instance of `FunctionConfigurationAppSyncRuntimeInput` via:
//
//	FunctionConfigurationAppSyncRuntimeArgs{...}
type FunctionConfigurationAppSyncRuntimeInput interface {
	pulumi.Input

	ToFunctionConfigurationAppSyncRuntimeOutput() FunctionConfigurationAppSyncRuntimeOutput
	ToFunctionConfigurationAppSyncRuntimeOutputWithContext(context.Context) FunctionConfigurationAppSyncRuntimeOutput
}

// Describes a runtime used by an AWS AppSync pipeline resolver or AWS AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified.
type FunctionConfigurationAppSyncRuntimeArgs struct {
	// The name of the runtime to use. Currently, the only allowed value is APPSYNC_JS.
	Name pulumi.StringInput `pulumi:"name"`
	// The version of the runtime to use. Currently, the only allowed version is 1.0.0.
	RuntimeVersion pulumi.StringInput `pulumi:"runtimeVersion"`
}

func (FunctionConfigurationAppSyncRuntimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionConfigurationAppSyncRuntime)(nil)).Elem()
}

func (i FunctionConfigurationAppSyncRuntimeArgs) ToFunctionConfigurationAppSyncRuntimeOutput() FunctionConfigurationAppSyncRuntimeOutput {
	return i.ToFunctionConfigurationAppSyncRuntimeOutputWithContext(context.Background())
}

func (i FunctionConfigurationAppSyncRuntimeArgs) ToFunctionConfigurationAppSyncRuntimeOutputWithContext(ctx context.Context) FunctionConfigurationAppSyncRuntimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionConfigurationAppSyncRuntimeOutput)
}

func (i FunctionConfigurationAppSyncRuntimeArgs) ToFunctionConfigurationAppSyncRuntimePtrOutput() FunctionConfigurationAppSyncRuntimePtrOutput {
	return i.ToFunctionConfigurationAppSyncRuntimePtrOutputWithContext(context.Background())
}

func (i FunctionConfigurationAppSyncRuntimeArgs) ToFunctionConfigurationAppSyncRuntimePtrOutputWithContext(ctx context.Context) FunctionConfigurationAppSyncRuntimePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionConfigurationAppSyncRuntimeOutput).ToFunctionConfigurationAppSyncRuntimePtrOutputWithContext(ctx)
}

// FunctionConfigurationAppSyncRuntimePtrInput is an input type that accepts FunctionConfigurationAppSyncRuntimeArgs, FunctionConfigurationAppSyncRuntimePtr and FunctionConfigurationAppSyncRuntimePtrOutput values.
// You can construct a concrete instance of `FunctionConfigurationAppSyncRuntimePtrInput` via:
//
//	        FunctionConfigurationAppSyncRuntimeArgs{...}
//
//	or:
//
//	        nil
type FunctionConfigurationAppSyncRuntimePtrInput interface {
	pulumi.Input

	ToFunctionConfigurationAppSyncRuntimePtrOutput() FunctionConfigurationAppSyncRuntimePtrOutput
	ToFunctionConfigurationAppSyncRuntimePtrOutputWithContext(context.Context) FunctionConfigurationAppSyncRuntimePtrOutput
}

type functionConfigurationAppSyncRuntimePtrType FunctionConfigurationAppSyncRuntimeArgs

func FunctionConfigurationAppSyncRuntimePtr(v *FunctionConfigurationAppSyncRuntimeArgs) FunctionConfigurationAppSyncRuntimePtrInput {
	return (*functionConfigurationAppSyncRuntimePtrType)(v)
}

func (*functionConfigurationAppSyncRuntimePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionConfigurationAppSyncRuntime)(nil)).Elem()
}

func (i *functionConfigurationAppSyncRuntimePtrType) ToFunctionConfigurationAppSyncRuntimePtrOutput() FunctionConfigurationAppSyncRuntimePtrOutput {
	return i.ToFunctionConfigurationAppSyncRuntimePtrOutputWithContext(context.Background())
}

func (i *functionConfigurationAppSyncRuntimePtrType) ToFunctionConfigurationAppSyncRuntimePtrOutputWithContext(ctx context.Context) FunctionConfigurationAppSyncRuntimePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionConfigurationAppSyncRuntimePtrOutput)
}

// Describes a runtime used by an AWS AppSync pipeline resolver or AWS AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified.
type FunctionConfigurationAppSyncRuntimeOutput struct{ *pulumi.OutputState }

func (FunctionConfigurationAppSyncRuntimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionConfigurationAppSyncRuntime)(nil)).Elem()
}

func (o FunctionConfigurationAppSyncRuntimeOutput) ToFunctionConfigurationAppSyncRuntimeOutput() FunctionConfigurationAppSyncRuntimeOutput {
	return o
}

func (o FunctionConfigurationAppSyncRuntimeOutput) ToFunctionConfigurationAppSyncRuntimeOutputWithContext(ctx context.Context) FunctionConfigurationAppSyncRuntimeOutput {
	return o
}

func (o FunctionConfigurationAppSyncRuntimeOutput) ToFunctionConfigurationAppSyncRuntimePtrOutput() FunctionConfigurationAppSyncRuntimePtrOutput {
	return o.ToFunctionConfigurationAppSyncRuntimePtrOutputWithContext(context.Background())
}

func (o FunctionConfigurationAppSyncRuntimeOutput) ToFunctionConfigurationAppSyncRuntimePtrOutputWithContext(ctx context.Context) FunctionConfigurationAppSyncRuntimePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FunctionConfigurationAppSyncRuntime) *FunctionConfigurationAppSyncRuntime {
		return &v
	}).(FunctionConfigurationAppSyncRuntimePtrOutput)
}

// The name of the runtime to use. Currently, the only allowed value is APPSYNC_JS.
func (o FunctionConfigurationAppSyncRuntimeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionConfigurationAppSyncRuntime) string { return v.Name }).(pulumi.StringOutput)
}

// The version of the runtime to use. Currently, the only allowed version is 1.0.0.
func (o FunctionConfigurationAppSyncRuntimeOutput) RuntimeVersion() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionConfigurationAppSyncRuntime) string { return v.RuntimeVersion }).(pulumi.StringOutput)
}

type FunctionConfigurationAppSyncRuntimePtrOutput struct{ *pulumi.OutputState }

func (FunctionConfigurationAppSyncRuntimePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionConfigurationAppSyncRuntime)(nil)).Elem()
}

func (o FunctionConfigurationAppSyncRuntimePtrOutput) ToFunctionConfigurationAppSyncRuntimePtrOutput() FunctionConfigurationAppSyncRuntimePtrOutput {
	return o
}

func (o FunctionConfigurationAppSyncRuntimePtrOutput) ToFunctionConfigurationAppSyncRuntimePtrOutputWithContext(ctx context.Context) FunctionConfigurationAppSyncRuntimePtrOutput {
	return o
}

func (o FunctionConfigurationAppSyncRuntimePtrOutput) Elem() FunctionConfigurationAppSyncRuntimeOutput {
	return o.ApplyT(func(v *FunctionConfigurationAppSyncRuntime) FunctionConfigurationAppSyncRuntime {
		if v != nil {
			return *v
		}
		var ret FunctionConfigurationAppSyncRuntime
		return ret
	}).(FunctionConfigurationAppSyncRuntimeOutput)
}

// The name of the runtime to use. Currently, the only allowed value is APPSYNC_JS.
func (o FunctionConfigurationAppSyncRuntimePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionConfigurationAppSyncRuntime) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The version of the runtime to use. Currently, the only allowed version is 1.0.0.
func (o FunctionConfigurationAppSyncRuntimePtrOutput) RuntimeVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionConfigurationAppSyncRuntime) *string {
		if v == nil {
			return nil
		}
		return &v.RuntimeVersion
	}).(pulumi.StringPtrOutput)
}

// The LambdaConflictHandlerConfig when configuring LAMBDA as the Conflict Handler.
type FunctionConfigurationLambdaConflictHandlerConfig struct {
	// The Amazon Resource Name (ARN) for the Lambda function to use as the Conflict Handler.
	LambdaConflictHandlerArn *string `pulumi:"lambdaConflictHandlerArn"`
}

// FunctionConfigurationLambdaConflictHandlerConfigInput is an input type that accepts FunctionConfigurationLambdaConflictHandlerConfigArgs and FunctionConfigurationLambdaConflictHandlerConfigOutput values.
// You can construct a concrete instance of `FunctionConfigurationLambdaConflictHandlerConfigInput` via:
//
//	FunctionConfigurationLambdaConflictHandlerConfigArgs{...}
type FunctionConfigurationLambdaConflictHandlerConfigInput interface {
	pulumi.Input

	ToFunctionConfigurationLambdaConflictHandlerConfigOutput() FunctionConfigurationLambdaConflictHandlerConfigOutput
	ToFunctionConfigurationLambdaConflictHandlerConfigOutputWithContext(context.Context) FunctionConfigurationLambdaConflictHandlerConfigOutput
}

// The LambdaConflictHandlerConfig when configuring LAMBDA as the Conflict Handler.
type FunctionConfigurationLambdaConflictHandlerConfigArgs struct {
	// The Amazon Resource Name (ARN) for the Lambda function to use as the Conflict Handler.
	LambdaConflictHandlerArn pulumi.StringPtrInput `pulumi:"lambdaConflictHandlerArn"`
}

func (FunctionConfigurationLambdaConflictHandlerConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionConfigurationLambdaConflictHandlerConfig)(nil)).Elem()
}

func (i FunctionConfigurationLambdaConflictHandlerConfigArgs) ToFunctionConfigurationLambdaConflictHandlerConfigOutput() FunctionConfigurationLambdaConflictHandlerConfigOutput {
	return i.ToFunctionConfigurationLambdaConflictHandlerConfigOutputWithContext(context.Background())
}

func (i FunctionConfigurationLambdaConflictHandlerConfigArgs) ToFunctionConfigurationLambdaConflictHandlerConfigOutputWithContext(ctx context.Context) FunctionConfigurationLambdaConflictHandlerConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionConfigurationLambdaConflictHandlerConfigOutput)
}

func (i FunctionConfigurationLambdaConflictHandlerConfigArgs) ToFunctionConfigurationLambdaConflictHandlerConfigPtrOutput() FunctionConfigurationLambdaConflictHandlerConfigPtrOutput {
	return i.ToFunctionConfigurationLambdaConflictHandlerConfigPtrOutputWithContext(context.Background())
}

func (i FunctionConfigurationLambdaConflictHandlerConfigArgs) ToFunctionConfigurationLambdaConflictHandlerConfigPtrOutputWithContext(ctx context.Context) FunctionConfigurationLambdaConflictHandlerConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionConfigurationLambdaConflictHandlerConfigOutput).ToFunctionConfigurationLambdaConflictHandlerConfigPtrOutputWithContext(ctx)
}

// FunctionConfigurationLambdaConflictHandlerConfigPtrInput is an input type that accepts FunctionConfigurationLambdaConflictHandlerConfigArgs, FunctionConfigurationLambdaConflictHandlerConfigPtr and FunctionConfigurationLambdaConflictHandlerConfigPtrOutput values.
// You can construct a concrete instance of `FunctionConfigurationLambdaConflictHandlerConfigPtrInput` via:
//
//	        FunctionConfigurationLambdaConflictHandlerConfigArgs{...}
//
//	or:
//
//	        nil
type FunctionConfigurationLambdaConflictHandlerConfigPtrInput interface {
	pulumi.Input

	ToFunctionConfigurationLambdaConflictHandlerConfigPtrOutput() FunctionConfigurationLambdaConflictHandlerConfigPtrOutput
	ToFunctionConfigurationLambdaConflictHandlerConfigPtrOutputWithContext(context.Context) FunctionConfigurationLambdaConflictHandlerConfigPtrOutput
}

type functionConfigurationLambdaConflictHandlerConfigPtrType FunctionConfigurationLambdaConflictHandlerConfigArgs

func FunctionConfigurationLambdaConflictHandlerConfigPtr(v *FunctionConfigurationLambdaConflictHandlerConfigArgs) FunctionConfigurationLambdaConflictHandlerConfigPtrInput {
	return (*functionConfigurationLambdaConflictHandlerConfigPtrType)(v)
}

func (*functionConfigurationLambdaConflictHandlerConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionConfigurationLambdaConflictHandlerConfig)(nil)).Elem()
}

func (i *functionConfigurationLambdaConflictHandlerConfigPtrType) ToFunctionConfigurationLambdaConflictHandlerConfigPtrOutput() FunctionConfigurationLambdaConflictHandlerConfigPtrOutput {
	return i.ToFunctionConfigurationLambdaConflictHandlerConfigPtrOutputWithContext(context.Background())
}

func (i *functionConfigurationLambdaConflictHandlerConfigPtrType) ToFunctionConfigurationLambdaConflictHandlerConfigPtrOutputWithContext(ctx context.Context) FunctionConfigurationLambdaConflictHandlerConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionConfigurationLambdaConflictHandlerConfigPtrOutput)
}

// The LambdaConflictHandlerConfig when configuring LAMBDA as the Conflict Handler.
type FunctionConfigurationLambdaConflictHandlerConfigOutput struct{ *pulumi.OutputState }

func (FunctionConfigurationLambdaConflictHandlerConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionConfigurationLambdaConflictHandlerConfig)(nil)).Elem()
}

func (o FunctionConfigurationLambdaConflictHandlerConfigOutput) ToFunctionConfigurationLambdaConflictHandlerConfigOutput() FunctionConfigurationLambdaConflictHandlerConfigOutput {
	return o
}

func (o FunctionConfigurationLambdaConflictHandlerConfigOutput) ToFunctionConfigurationLambdaConflictHandlerConfigOutputWithContext(ctx context.Context) FunctionConfigurationLambdaConflictHandlerConfigOutput {
	return o
}

func (o FunctionConfigurationLambdaConflictHandlerConfigOutput) ToFunctionConfigurationLambdaConflictHandlerConfigPtrOutput() FunctionConfigurationLambdaConflictHandlerConfigPtrOutput {
	return o.ToFunctionConfigurationLambdaConflictHandlerConfigPtrOutputWithContext(context.Background())
}

func (o FunctionConfigurationLambdaConflictHandlerConfigOutput) ToFunctionConfigurationLambdaConflictHandlerConfigPtrOutputWithContext(ctx context.Context) FunctionConfigurationLambdaConflictHandlerConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FunctionConfigurationLambdaConflictHandlerConfig) *FunctionConfigurationLambdaConflictHandlerConfig {
		return &v
	}).(FunctionConfigurationLambdaConflictHandlerConfigPtrOutput)
}

// The Amazon Resource Name (ARN) for the Lambda function to use as the Conflict Handler.
func (o FunctionConfigurationLambdaConflictHandlerConfigOutput) LambdaConflictHandlerArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionConfigurationLambdaConflictHandlerConfig) *string { return v.LambdaConflictHandlerArn }).(pulumi.StringPtrOutput)
}

type FunctionConfigurationLambdaConflictHandlerConfigPtrOutput struct{ *pulumi.OutputState }

func (FunctionConfigurationLambdaConflictHandlerConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionConfigurationLambdaConflictHandlerConfig)(nil)).Elem()
}

func (o FunctionConfigurationLambdaConflictHandlerConfigPtrOutput) ToFunctionConfigurationLambdaConflictHandlerConfigPtrOutput() FunctionConfigurationLambdaConflictHandlerConfigPtrOutput {
	return o
}

func (o FunctionConfigurationLambdaConflictHandlerConfigPtrOutput) ToFunctionConfigurationLambdaConflictHandlerConfigPtrOutputWithContext(ctx context.Context) FunctionConfigurationLambdaConflictHandlerConfigPtrOutput {
	return o
}

func (o FunctionConfigurationLambdaConflictHandlerConfigPtrOutput) Elem() FunctionConfigurationLambdaConflictHandlerConfigOutput {
	return o.ApplyT(func(v *FunctionConfigurationLambdaConflictHandlerConfig) FunctionConfigurationLambdaConflictHandlerConfig {
		if v != nil {
			return *v
		}
		var ret FunctionConfigurationLambdaConflictHandlerConfig
		return ret
	}).(FunctionConfigurationLambdaConflictHandlerConfigOutput)
}

// The Amazon Resource Name (ARN) for the Lambda function to use as the Conflict Handler.
func (o FunctionConfigurationLambdaConflictHandlerConfigPtrOutput) LambdaConflictHandlerArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionConfigurationLambdaConflictHandlerConfig) *string {
		if v == nil {
			return nil
		}
		return v.LambdaConflictHandlerArn
	}).(pulumi.StringPtrOutput)
}

// Describes a Sync configuration for a resolver. Specifies which Conflict Detection strategy and Resolution strategy to use when the resolver is invoked.
type FunctionConfigurationSyncConfig struct {
	// The Conflict Detection strategy to use.
	ConflictDetection string `pulumi:"conflictDetection"`
	// The Conflict Resolution strategy to perform in the event of a conflict.
	ConflictHandler             *string                                           `pulumi:"conflictHandler"`
	LambdaConflictHandlerConfig *FunctionConfigurationLambdaConflictHandlerConfig `pulumi:"lambdaConflictHandlerConfig"`
}

// FunctionConfigurationSyncConfigInput is an input type that accepts FunctionConfigurationSyncConfigArgs and FunctionConfigurationSyncConfigOutput values.
// You can construct a concrete instance of `FunctionConfigurationSyncConfigInput` via:
//
//	FunctionConfigurationSyncConfigArgs{...}
type FunctionConfigurationSyncConfigInput interface {
	pulumi.Input

	ToFunctionConfigurationSyncConfigOutput() FunctionConfigurationSyncConfigOutput
	ToFunctionConfigurationSyncConfigOutputWithContext(context.Context) FunctionConfigurationSyncConfigOutput
}

// Describes a Sync configuration for a resolver. Specifies which Conflict Detection strategy and Resolution strategy to use when the resolver is invoked.
type FunctionConfigurationSyncConfigArgs struct {
	// The Conflict Detection strategy to use.
	ConflictDetection pulumi.StringInput `pulumi:"conflictDetection"`
	// The Conflict Resolution strategy to perform in the event of a conflict.
	ConflictHandler             pulumi.StringPtrInput                                    `pulumi:"conflictHandler"`
	LambdaConflictHandlerConfig FunctionConfigurationLambdaConflictHandlerConfigPtrInput `pulumi:"lambdaConflictHandlerConfig"`
}

func (FunctionConfigurationSyncConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionConfigurationSyncConfig)(nil)).Elem()
}

func (i FunctionConfigurationSyncConfigArgs) ToFunctionConfigurationSyncConfigOutput() FunctionConfigurationSyncConfigOutput {
	return i.ToFunctionConfigurationSyncConfigOutputWithContext(context.Background())
}

func (i FunctionConfigurationSyncConfigArgs) ToFunctionConfigurationSyncConfigOutputWithContext(ctx context.Context) FunctionConfigurationSyncConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionConfigurationSyncConfigOutput)
}

func (i FunctionConfigurationSyncConfigArgs) ToFunctionConfigurationSyncConfigPtrOutput() FunctionConfigurationSyncConfigPtrOutput {
	return i.ToFunctionConfigurationSyncConfigPtrOutputWithContext(context.Background())
}

func (i FunctionConfigurationSyncConfigArgs) ToFunctionConfigurationSyncConfigPtrOutputWithContext(ctx context.Context) FunctionConfigurationSyncConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionConfigurationSyncConfigOutput).ToFunctionConfigurationSyncConfigPtrOutputWithContext(ctx)
}

// FunctionConfigurationSyncConfigPtrInput is an input type that accepts FunctionConfigurationSyncConfigArgs, FunctionConfigurationSyncConfigPtr and FunctionConfigurationSyncConfigPtrOutput values.
// You can construct a concrete instance of `FunctionConfigurationSyncConfigPtrInput` via:
//
//	        FunctionConfigurationSyncConfigArgs{...}
//
//	or:
//
//	        nil
type FunctionConfigurationSyncConfigPtrInput interface {
	pulumi.Input

	ToFunctionConfigurationSyncConfigPtrOutput() FunctionConfigurationSyncConfigPtrOutput
	ToFunctionConfigurationSyncConfigPtrOutputWithContext(context.Context) FunctionConfigurationSyncConfigPtrOutput
}

type functionConfigurationSyncConfigPtrType FunctionConfigurationSyncConfigArgs

func FunctionConfigurationSyncConfigPtr(v *FunctionConfigurationSyncConfigArgs) FunctionConfigurationSyncConfigPtrInput {
	return (*functionConfigurationSyncConfigPtrType)(v)
}

func (*functionConfigurationSyncConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionConfigurationSyncConfig)(nil)).Elem()
}

func (i *functionConfigurationSyncConfigPtrType) ToFunctionConfigurationSyncConfigPtrOutput() FunctionConfigurationSyncConfigPtrOutput {
	return i.ToFunctionConfigurationSyncConfigPtrOutputWithContext(context.Background())
}

func (i *functionConfigurationSyncConfigPtrType) ToFunctionConfigurationSyncConfigPtrOutputWithContext(ctx context.Context) FunctionConfigurationSyncConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionConfigurationSyncConfigPtrOutput)
}

// Describes a Sync configuration for a resolver. Specifies which Conflict Detection strategy and Resolution strategy to use when the resolver is invoked.
type FunctionConfigurationSyncConfigOutput struct{ *pulumi.OutputState }

func (FunctionConfigurationSyncConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionConfigurationSyncConfig)(nil)).Elem()
}

func (o FunctionConfigurationSyncConfigOutput) ToFunctionConfigurationSyncConfigOutput() FunctionConfigurationSyncConfigOutput {
	return o
}

func (o FunctionConfigurationSyncConfigOutput) ToFunctionConfigurationSyncConfigOutputWithContext(ctx context.Context) FunctionConfigurationSyncConfigOutput {
	return o
}

func (o FunctionConfigurationSyncConfigOutput) ToFunctionConfigurationSyncConfigPtrOutput() FunctionConfigurationSyncConfigPtrOutput {
	return o.ToFunctionConfigurationSyncConfigPtrOutputWithContext(context.Background())
}

func (o FunctionConfigurationSyncConfigOutput) ToFunctionConfigurationSyncConfigPtrOutputWithContext(ctx context.Context) FunctionConfigurationSyncConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FunctionConfigurationSyncConfig) *FunctionConfigurationSyncConfig {
		return &v
	}).(FunctionConfigurationSyncConfigPtrOutput)
}

// The Conflict Detection strategy to use.
func (o FunctionConfigurationSyncConfigOutput) ConflictDetection() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionConfigurationSyncConfig) string { return v.ConflictDetection }).(pulumi.StringOutput)
}

// The Conflict Resolution strategy to perform in the event of a conflict.
func (o FunctionConfigurationSyncConfigOutput) ConflictHandler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionConfigurationSyncConfig) *string { return v.ConflictHandler }).(pulumi.StringPtrOutput)
}

func (o FunctionConfigurationSyncConfigOutput) LambdaConflictHandlerConfig() FunctionConfigurationLambdaConflictHandlerConfigPtrOutput {
	return o.ApplyT(func(v FunctionConfigurationSyncConfig) *FunctionConfigurationLambdaConflictHandlerConfig {
		return v.LambdaConflictHandlerConfig
	}).(FunctionConfigurationLambdaConflictHandlerConfigPtrOutput)
}

type FunctionConfigurationSyncConfigPtrOutput struct{ *pulumi.OutputState }

func (FunctionConfigurationSyncConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionConfigurationSyncConfig)(nil)).Elem()
}

func (o FunctionConfigurationSyncConfigPtrOutput) ToFunctionConfigurationSyncConfigPtrOutput() FunctionConfigurationSyncConfigPtrOutput {
	return o
}

func (o FunctionConfigurationSyncConfigPtrOutput) ToFunctionConfigurationSyncConfigPtrOutputWithContext(ctx context.Context) FunctionConfigurationSyncConfigPtrOutput {
	return o
}

func (o FunctionConfigurationSyncConfigPtrOutput) Elem() FunctionConfigurationSyncConfigOutput {
	return o.ApplyT(func(v *FunctionConfigurationSyncConfig) FunctionConfigurationSyncConfig {
		if v != nil {
			return *v
		}
		var ret FunctionConfigurationSyncConfig
		return ret
	}).(FunctionConfigurationSyncConfigOutput)
}

// The Conflict Detection strategy to use.
func (o FunctionConfigurationSyncConfigPtrOutput) ConflictDetection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionConfigurationSyncConfig) *string {
		if v == nil {
			return nil
		}
		return &v.ConflictDetection
	}).(pulumi.StringPtrOutput)
}

// The Conflict Resolution strategy to perform in the event of a conflict.
func (o FunctionConfigurationSyncConfigPtrOutput) ConflictHandler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionConfigurationSyncConfig) *string {
		if v == nil {
			return nil
		}
		return v.ConflictHandler
	}).(pulumi.StringPtrOutput)
}

func (o FunctionConfigurationSyncConfigPtrOutput) LambdaConflictHandlerConfig() FunctionConfigurationLambdaConflictHandlerConfigPtrOutput {
	return o.ApplyT(func(v *FunctionConfigurationSyncConfig) *FunctionConfigurationLambdaConflictHandlerConfig {
		if v == nil {
			return nil
		}
		return v.LambdaConflictHandlerConfig
	}).(FunctionConfigurationLambdaConflictHandlerConfigPtrOutput)
}

// Describes a runtime used by an APSYlong resolver or APSYlong function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified.
type ResolverAppSyncRuntime struct {
	// The ``name`` of the runtime to use. Currently, the only allowed value is ``APPSYNC_JS``.
	Name string `pulumi:"name"`
	// The ``version`` of the runtime to use. Currently, the only allowed version is ``1.0.0``.
	RuntimeVersion string `pulumi:"runtimeVersion"`
}

// ResolverAppSyncRuntimeInput is an input type that accepts ResolverAppSyncRuntimeArgs and ResolverAppSyncRuntimeOutput values.
// You can construct a concrete instance of `ResolverAppSyncRuntimeInput` via:
//
//	ResolverAppSyncRuntimeArgs{...}
type ResolverAppSyncRuntimeInput interface {
	pulumi.Input

	ToResolverAppSyncRuntimeOutput() ResolverAppSyncRuntimeOutput
	ToResolverAppSyncRuntimeOutputWithContext(context.Context) ResolverAppSyncRuntimeOutput
}

// Describes a runtime used by an APSYlong resolver or APSYlong function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified.
type ResolverAppSyncRuntimeArgs struct {
	// The ``name`` of the runtime to use. Currently, the only allowed value is ``APPSYNC_JS``.
	Name pulumi.StringInput `pulumi:"name"`
	// The ``version`` of the runtime to use. Currently, the only allowed version is ``1.0.0``.
	RuntimeVersion pulumi.StringInput `pulumi:"runtimeVersion"`
}

func (ResolverAppSyncRuntimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverAppSyncRuntime)(nil)).Elem()
}

func (i ResolverAppSyncRuntimeArgs) ToResolverAppSyncRuntimeOutput() ResolverAppSyncRuntimeOutput {
	return i.ToResolverAppSyncRuntimeOutputWithContext(context.Background())
}

func (i ResolverAppSyncRuntimeArgs) ToResolverAppSyncRuntimeOutputWithContext(ctx context.Context) ResolverAppSyncRuntimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverAppSyncRuntimeOutput)
}

func (i ResolverAppSyncRuntimeArgs) ToResolverAppSyncRuntimePtrOutput() ResolverAppSyncRuntimePtrOutput {
	return i.ToResolverAppSyncRuntimePtrOutputWithContext(context.Background())
}

func (i ResolverAppSyncRuntimeArgs) ToResolverAppSyncRuntimePtrOutputWithContext(ctx context.Context) ResolverAppSyncRuntimePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverAppSyncRuntimeOutput).ToResolverAppSyncRuntimePtrOutputWithContext(ctx)
}

// ResolverAppSyncRuntimePtrInput is an input type that accepts ResolverAppSyncRuntimeArgs, ResolverAppSyncRuntimePtr and ResolverAppSyncRuntimePtrOutput values.
// You can construct a concrete instance of `ResolverAppSyncRuntimePtrInput` via:
//
//	        ResolverAppSyncRuntimeArgs{...}
//
//	or:
//
//	        nil
type ResolverAppSyncRuntimePtrInput interface {
	pulumi.Input

	ToResolverAppSyncRuntimePtrOutput() ResolverAppSyncRuntimePtrOutput
	ToResolverAppSyncRuntimePtrOutputWithContext(context.Context) ResolverAppSyncRuntimePtrOutput
}

type resolverAppSyncRuntimePtrType ResolverAppSyncRuntimeArgs

func ResolverAppSyncRuntimePtr(v *ResolverAppSyncRuntimeArgs) ResolverAppSyncRuntimePtrInput {
	return (*resolverAppSyncRuntimePtrType)(v)
}

func (*resolverAppSyncRuntimePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResolverAppSyncRuntime)(nil)).Elem()
}

func (i *resolverAppSyncRuntimePtrType) ToResolverAppSyncRuntimePtrOutput() ResolverAppSyncRuntimePtrOutput {
	return i.ToResolverAppSyncRuntimePtrOutputWithContext(context.Background())
}

func (i *resolverAppSyncRuntimePtrType) ToResolverAppSyncRuntimePtrOutputWithContext(ctx context.Context) ResolverAppSyncRuntimePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverAppSyncRuntimePtrOutput)
}

// Describes a runtime used by an APSYlong resolver or APSYlong function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified.
type ResolverAppSyncRuntimeOutput struct{ *pulumi.OutputState }

func (ResolverAppSyncRuntimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverAppSyncRuntime)(nil)).Elem()
}

func (o ResolverAppSyncRuntimeOutput) ToResolverAppSyncRuntimeOutput() ResolverAppSyncRuntimeOutput {
	return o
}

func (o ResolverAppSyncRuntimeOutput) ToResolverAppSyncRuntimeOutputWithContext(ctx context.Context) ResolverAppSyncRuntimeOutput {
	return o
}

func (o ResolverAppSyncRuntimeOutput) ToResolverAppSyncRuntimePtrOutput() ResolverAppSyncRuntimePtrOutput {
	return o.ToResolverAppSyncRuntimePtrOutputWithContext(context.Background())
}

func (o ResolverAppSyncRuntimeOutput) ToResolverAppSyncRuntimePtrOutputWithContext(ctx context.Context) ResolverAppSyncRuntimePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResolverAppSyncRuntime) *ResolverAppSyncRuntime {
		return &v
	}).(ResolverAppSyncRuntimePtrOutput)
}

// The “name“ of the runtime to use. Currently, the only allowed value is “APPSYNC_JS“.
func (o ResolverAppSyncRuntimeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverAppSyncRuntime) string { return v.Name }).(pulumi.StringOutput)
}

// The “version“ of the runtime to use. Currently, the only allowed version is “1.0.0“.
func (o ResolverAppSyncRuntimeOutput) RuntimeVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverAppSyncRuntime) string { return v.RuntimeVersion }).(pulumi.StringOutput)
}

type ResolverAppSyncRuntimePtrOutput struct{ *pulumi.OutputState }

func (ResolverAppSyncRuntimePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResolverAppSyncRuntime)(nil)).Elem()
}

func (o ResolverAppSyncRuntimePtrOutput) ToResolverAppSyncRuntimePtrOutput() ResolverAppSyncRuntimePtrOutput {
	return o
}

func (o ResolverAppSyncRuntimePtrOutput) ToResolverAppSyncRuntimePtrOutputWithContext(ctx context.Context) ResolverAppSyncRuntimePtrOutput {
	return o
}

func (o ResolverAppSyncRuntimePtrOutput) Elem() ResolverAppSyncRuntimeOutput {
	return o.ApplyT(func(v *ResolverAppSyncRuntime) ResolverAppSyncRuntime {
		if v != nil {
			return *v
		}
		var ret ResolverAppSyncRuntime
		return ret
	}).(ResolverAppSyncRuntimeOutput)
}

// The “name“ of the runtime to use. Currently, the only allowed value is “APPSYNC_JS“.
func (o ResolverAppSyncRuntimePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResolverAppSyncRuntime) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The “version“ of the runtime to use. Currently, the only allowed version is “1.0.0“.
func (o ResolverAppSyncRuntimePtrOutput) RuntimeVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResolverAppSyncRuntime) *string {
		if v == nil {
			return nil
		}
		return &v.RuntimeVersion
	}).(pulumi.StringPtrOutput)
}

// The caching configuration for a resolver that has caching activated.
type ResolverCachingConfig struct {
	// The caching keys for a resolver that has caching activated.
	//  Valid values are entries from the ``$context.arguments``, ``$context.source``, and ``$context.identity`` maps.
	CachingKeys []string `pulumi:"cachingKeys"`
	// The TTL in seconds for a resolver that has caching activated.
	//  Valid values are 1–3,600 seconds.
	Ttl float64 `pulumi:"ttl"`
}

// ResolverCachingConfigInput is an input type that accepts ResolverCachingConfigArgs and ResolverCachingConfigOutput values.
// You can construct a concrete instance of `ResolverCachingConfigInput` via:
//
//	ResolverCachingConfigArgs{...}
type ResolverCachingConfigInput interface {
	pulumi.Input

	ToResolverCachingConfigOutput() ResolverCachingConfigOutput
	ToResolverCachingConfigOutputWithContext(context.Context) ResolverCachingConfigOutput
}

// The caching configuration for a resolver that has caching activated.
type ResolverCachingConfigArgs struct {
	// The caching keys for a resolver that has caching activated.
	//  Valid values are entries from the ``$context.arguments``, ``$context.source``, and ``$context.identity`` maps.
	CachingKeys pulumi.StringArrayInput `pulumi:"cachingKeys"`
	// The TTL in seconds for a resolver that has caching activated.
	//  Valid values are 1–3,600 seconds.
	Ttl pulumi.Float64Input `pulumi:"ttl"`
}

func (ResolverCachingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverCachingConfig)(nil)).Elem()
}

func (i ResolverCachingConfigArgs) ToResolverCachingConfigOutput() ResolverCachingConfigOutput {
	return i.ToResolverCachingConfigOutputWithContext(context.Background())
}

func (i ResolverCachingConfigArgs) ToResolverCachingConfigOutputWithContext(ctx context.Context) ResolverCachingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverCachingConfigOutput)
}

func (i ResolverCachingConfigArgs) ToResolverCachingConfigPtrOutput() ResolverCachingConfigPtrOutput {
	return i.ToResolverCachingConfigPtrOutputWithContext(context.Background())
}

func (i ResolverCachingConfigArgs) ToResolverCachingConfigPtrOutputWithContext(ctx context.Context) ResolverCachingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverCachingConfigOutput).ToResolverCachingConfigPtrOutputWithContext(ctx)
}

// ResolverCachingConfigPtrInput is an input type that accepts ResolverCachingConfigArgs, ResolverCachingConfigPtr and ResolverCachingConfigPtrOutput values.
// You can construct a concrete instance of `ResolverCachingConfigPtrInput` via:
//
//	        ResolverCachingConfigArgs{...}
//
//	or:
//
//	        nil
type ResolverCachingConfigPtrInput interface {
	pulumi.Input

	ToResolverCachingConfigPtrOutput() ResolverCachingConfigPtrOutput
	ToResolverCachingConfigPtrOutputWithContext(context.Context) ResolverCachingConfigPtrOutput
}

type resolverCachingConfigPtrType ResolverCachingConfigArgs

func ResolverCachingConfigPtr(v *ResolverCachingConfigArgs) ResolverCachingConfigPtrInput {
	return (*resolverCachingConfigPtrType)(v)
}

func (*resolverCachingConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResolverCachingConfig)(nil)).Elem()
}

func (i *resolverCachingConfigPtrType) ToResolverCachingConfigPtrOutput() ResolverCachingConfigPtrOutput {
	return i.ToResolverCachingConfigPtrOutputWithContext(context.Background())
}

func (i *resolverCachingConfigPtrType) ToResolverCachingConfigPtrOutputWithContext(ctx context.Context) ResolverCachingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverCachingConfigPtrOutput)
}

// The caching configuration for a resolver that has caching activated.
type ResolverCachingConfigOutput struct{ *pulumi.OutputState }

func (ResolverCachingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverCachingConfig)(nil)).Elem()
}

func (o ResolverCachingConfigOutput) ToResolverCachingConfigOutput() ResolverCachingConfigOutput {
	return o
}

func (o ResolverCachingConfigOutput) ToResolverCachingConfigOutputWithContext(ctx context.Context) ResolverCachingConfigOutput {
	return o
}

func (o ResolverCachingConfigOutput) ToResolverCachingConfigPtrOutput() ResolverCachingConfigPtrOutput {
	return o.ToResolverCachingConfigPtrOutputWithContext(context.Background())
}

func (o ResolverCachingConfigOutput) ToResolverCachingConfigPtrOutputWithContext(ctx context.Context) ResolverCachingConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResolverCachingConfig) *ResolverCachingConfig {
		return &v
	}).(ResolverCachingConfigPtrOutput)
}

// The caching keys for a resolver that has caching activated.
//
//	Valid values are entries from the ``$context.arguments``, ``$context.source``, and ``$context.identity`` maps.
func (o ResolverCachingConfigOutput) CachingKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResolverCachingConfig) []string { return v.CachingKeys }).(pulumi.StringArrayOutput)
}

// The TTL in seconds for a resolver that has caching activated.
//
//	Valid values are 1–3,600 seconds.
func (o ResolverCachingConfigOutput) Ttl() pulumi.Float64Output {
	return o.ApplyT(func(v ResolverCachingConfig) float64 { return v.Ttl }).(pulumi.Float64Output)
}

type ResolverCachingConfigPtrOutput struct{ *pulumi.OutputState }

func (ResolverCachingConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResolverCachingConfig)(nil)).Elem()
}

func (o ResolverCachingConfigPtrOutput) ToResolverCachingConfigPtrOutput() ResolverCachingConfigPtrOutput {
	return o
}

func (o ResolverCachingConfigPtrOutput) ToResolverCachingConfigPtrOutputWithContext(ctx context.Context) ResolverCachingConfigPtrOutput {
	return o
}

func (o ResolverCachingConfigPtrOutput) Elem() ResolverCachingConfigOutput {
	return o.ApplyT(func(v *ResolverCachingConfig) ResolverCachingConfig {
		if v != nil {
			return *v
		}
		var ret ResolverCachingConfig
		return ret
	}).(ResolverCachingConfigOutput)
}

// The caching keys for a resolver that has caching activated.
//
//	Valid values are entries from the ``$context.arguments``, ``$context.source``, and ``$context.identity`` maps.
func (o ResolverCachingConfigPtrOutput) CachingKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ResolverCachingConfig) []string {
		if v == nil {
			return nil
		}
		return v.CachingKeys
	}).(pulumi.StringArrayOutput)
}

// The TTL in seconds for a resolver that has caching activated.
//
//	Valid values are 1–3,600 seconds.
func (o ResolverCachingConfigPtrOutput) Ttl() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ResolverCachingConfig) *float64 {
		if v == nil {
			return nil
		}
		return &v.Ttl
	}).(pulumi.Float64PtrOutput)
}

// The “LambdaConflictHandlerConfig“ when configuring LAMBDA as the Conflict Handler.
type ResolverLambdaConflictHandlerConfig struct {
	// The Amazon Resource Name (ARN) for the Lambda function to use as the Conflict Handler.
	LambdaConflictHandlerArn *string `pulumi:"lambdaConflictHandlerArn"`
}

// ResolverLambdaConflictHandlerConfigInput is an input type that accepts ResolverLambdaConflictHandlerConfigArgs and ResolverLambdaConflictHandlerConfigOutput values.
// You can construct a concrete instance of `ResolverLambdaConflictHandlerConfigInput` via:
//
//	ResolverLambdaConflictHandlerConfigArgs{...}
type ResolverLambdaConflictHandlerConfigInput interface {
	pulumi.Input

	ToResolverLambdaConflictHandlerConfigOutput() ResolverLambdaConflictHandlerConfigOutput
	ToResolverLambdaConflictHandlerConfigOutputWithContext(context.Context) ResolverLambdaConflictHandlerConfigOutput
}

// The “LambdaConflictHandlerConfig“ when configuring LAMBDA as the Conflict Handler.
type ResolverLambdaConflictHandlerConfigArgs struct {
	// The Amazon Resource Name (ARN) for the Lambda function to use as the Conflict Handler.
	LambdaConflictHandlerArn pulumi.StringPtrInput `pulumi:"lambdaConflictHandlerArn"`
}

func (ResolverLambdaConflictHandlerConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverLambdaConflictHandlerConfig)(nil)).Elem()
}

func (i ResolverLambdaConflictHandlerConfigArgs) ToResolverLambdaConflictHandlerConfigOutput() ResolverLambdaConflictHandlerConfigOutput {
	return i.ToResolverLambdaConflictHandlerConfigOutputWithContext(context.Background())
}

func (i ResolverLambdaConflictHandlerConfigArgs) ToResolverLambdaConflictHandlerConfigOutputWithContext(ctx context.Context) ResolverLambdaConflictHandlerConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverLambdaConflictHandlerConfigOutput)
}

func (i ResolverLambdaConflictHandlerConfigArgs) ToResolverLambdaConflictHandlerConfigPtrOutput() ResolverLambdaConflictHandlerConfigPtrOutput {
	return i.ToResolverLambdaConflictHandlerConfigPtrOutputWithContext(context.Background())
}

func (i ResolverLambdaConflictHandlerConfigArgs) ToResolverLambdaConflictHandlerConfigPtrOutputWithContext(ctx context.Context) ResolverLambdaConflictHandlerConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverLambdaConflictHandlerConfigOutput).ToResolverLambdaConflictHandlerConfigPtrOutputWithContext(ctx)
}

// ResolverLambdaConflictHandlerConfigPtrInput is an input type that accepts ResolverLambdaConflictHandlerConfigArgs, ResolverLambdaConflictHandlerConfigPtr and ResolverLambdaConflictHandlerConfigPtrOutput values.
// You can construct a concrete instance of `ResolverLambdaConflictHandlerConfigPtrInput` via:
//
//	        ResolverLambdaConflictHandlerConfigArgs{...}
//
//	or:
//
//	        nil
type ResolverLambdaConflictHandlerConfigPtrInput interface {
	pulumi.Input

	ToResolverLambdaConflictHandlerConfigPtrOutput() ResolverLambdaConflictHandlerConfigPtrOutput
	ToResolverLambdaConflictHandlerConfigPtrOutputWithContext(context.Context) ResolverLambdaConflictHandlerConfigPtrOutput
}

type resolverLambdaConflictHandlerConfigPtrType ResolverLambdaConflictHandlerConfigArgs

func ResolverLambdaConflictHandlerConfigPtr(v *ResolverLambdaConflictHandlerConfigArgs) ResolverLambdaConflictHandlerConfigPtrInput {
	return (*resolverLambdaConflictHandlerConfigPtrType)(v)
}

func (*resolverLambdaConflictHandlerConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResolverLambdaConflictHandlerConfig)(nil)).Elem()
}

func (i *resolverLambdaConflictHandlerConfigPtrType) ToResolverLambdaConflictHandlerConfigPtrOutput() ResolverLambdaConflictHandlerConfigPtrOutput {
	return i.ToResolverLambdaConflictHandlerConfigPtrOutputWithContext(context.Background())
}

func (i *resolverLambdaConflictHandlerConfigPtrType) ToResolverLambdaConflictHandlerConfigPtrOutputWithContext(ctx context.Context) ResolverLambdaConflictHandlerConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverLambdaConflictHandlerConfigPtrOutput)
}

// The “LambdaConflictHandlerConfig“ when configuring LAMBDA as the Conflict Handler.
type ResolverLambdaConflictHandlerConfigOutput struct{ *pulumi.OutputState }

func (ResolverLambdaConflictHandlerConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverLambdaConflictHandlerConfig)(nil)).Elem()
}

func (o ResolverLambdaConflictHandlerConfigOutput) ToResolverLambdaConflictHandlerConfigOutput() ResolverLambdaConflictHandlerConfigOutput {
	return o
}

func (o ResolverLambdaConflictHandlerConfigOutput) ToResolverLambdaConflictHandlerConfigOutputWithContext(ctx context.Context) ResolverLambdaConflictHandlerConfigOutput {
	return o
}

func (o ResolverLambdaConflictHandlerConfigOutput) ToResolverLambdaConflictHandlerConfigPtrOutput() ResolverLambdaConflictHandlerConfigPtrOutput {
	return o.ToResolverLambdaConflictHandlerConfigPtrOutputWithContext(context.Background())
}

func (o ResolverLambdaConflictHandlerConfigOutput) ToResolverLambdaConflictHandlerConfigPtrOutputWithContext(ctx context.Context) ResolverLambdaConflictHandlerConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResolverLambdaConflictHandlerConfig) *ResolverLambdaConflictHandlerConfig {
		return &v
	}).(ResolverLambdaConflictHandlerConfigPtrOutput)
}

// The Amazon Resource Name (ARN) for the Lambda function to use as the Conflict Handler.
func (o ResolverLambdaConflictHandlerConfigOutput) LambdaConflictHandlerArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResolverLambdaConflictHandlerConfig) *string { return v.LambdaConflictHandlerArn }).(pulumi.StringPtrOutput)
}

type ResolverLambdaConflictHandlerConfigPtrOutput struct{ *pulumi.OutputState }

func (ResolverLambdaConflictHandlerConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResolverLambdaConflictHandlerConfig)(nil)).Elem()
}

func (o ResolverLambdaConflictHandlerConfigPtrOutput) ToResolverLambdaConflictHandlerConfigPtrOutput() ResolverLambdaConflictHandlerConfigPtrOutput {
	return o
}

func (o ResolverLambdaConflictHandlerConfigPtrOutput) ToResolverLambdaConflictHandlerConfigPtrOutputWithContext(ctx context.Context) ResolverLambdaConflictHandlerConfigPtrOutput {
	return o
}

func (o ResolverLambdaConflictHandlerConfigPtrOutput) Elem() ResolverLambdaConflictHandlerConfigOutput {
	return o.ApplyT(func(v *ResolverLambdaConflictHandlerConfig) ResolverLambdaConflictHandlerConfig {
		if v != nil {
			return *v
		}
		var ret ResolverLambdaConflictHandlerConfig
		return ret
	}).(ResolverLambdaConflictHandlerConfigOutput)
}

// The Amazon Resource Name (ARN) for the Lambda function to use as the Conflict Handler.
func (o ResolverLambdaConflictHandlerConfigPtrOutput) LambdaConflictHandlerArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResolverLambdaConflictHandlerConfig) *string {
		if v == nil {
			return nil
		}
		return v.LambdaConflictHandlerArn
	}).(pulumi.StringPtrOutput)
}

// Use the “PipelineConfig“ property type to specify “PipelineConfig“ for an APSYlong resolver.
//
//	``PipelineConfig`` is a property of the [AWS::AppSync::Resolver](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-resolver.html) resource.
type ResolverPipelineConfig struct {
	// A list of ``Function`` objects.
	Functions []string `pulumi:"functions"`
}

// ResolverPipelineConfigInput is an input type that accepts ResolverPipelineConfigArgs and ResolverPipelineConfigOutput values.
// You can construct a concrete instance of `ResolverPipelineConfigInput` via:
//
//	ResolverPipelineConfigArgs{...}
type ResolverPipelineConfigInput interface {
	pulumi.Input

	ToResolverPipelineConfigOutput() ResolverPipelineConfigOutput
	ToResolverPipelineConfigOutputWithContext(context.Context) ResolverPipelineConfigOutput
}

// Use the “PipelineConfig“ property type to specify “PipelineConfig“ for an APSYlong resolver.
//
//	``PipelineConfig`` is a property of the [AWS::AppSync::Resolver](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-resolver.html) resource.
type ResolverPipelineConfigArgs struct {
	// A list of ``Function`` objects.
	Functions pulumi.StringArrayInput `pulumi:"functions"`
}

func (ResolverPipelineConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverPipelineConfig)(nil)).Elem()
}

func (i ResolverPipelineConfigArgs) ToResolverPipelineConfigOutput() ResolverPipelineConfigOutput {
	return i.ToResolverPipelineConfigOutputWithContext(context.Background())
}

func (i ResolverPipelineConfigArgs) ToResolverPipelineConfigOutputWithContext(ctx context.Context) ResolverPipelineConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverPipelineConfigOutput)
}

func (i ResolverPipelineConfigArgs) ToResolverPipelineConfigPtrOutput() ResolverPipelineConfigPtrOutput {
	return i.ToResolverPipelineConfigPtrOutputWithContext(context.Background())
}

func (i ResolverPipelineConfigArgs) ToResolverPipelineConfigPtrOutputWithContext(ctx context.Context) ResolverPipelineConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverPipelineConfigOutput).ToResolverPipelineConfigPtrOutputWithContext(ctx)
}

// ResolverPipelineConfigPtrInput is an input type that accepts ResolverPipelineConfigArgs, ResolverPipelineConfigPtr and ResolverPipelineConfigPtrOutput values.
// You can construct a concrete instance of `ResolverPipelineConfigPtrInput` via:
//
//	        ResolverPipelineConfigArgs{...}
//
//	or:
//
//	        nil
type ResolverPipelineConfigPtrInput interface {
	pulumi.Input

	ToResolverPipelineConfigPtrOutput() ResolverPipelineConfigPtrOutput
	ToResolverPipelineConfigPtrOutputWithContext(context.Context) ResolverPipelineConfigPtrOutput
}

type resolverPipelineConfigPtrType ResolverPipelineConfigArgs

func ResolverPipelineConfigPtr(v *ResolverPipelineConfigArgs) ResolverPipelineConfigPtrInput {
	return (*resolverPipelineConfigPtrType)(v)
}

func (*resolverPipelineConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResolverPipelineConfig)(nil)).Elem()
}

func (i *resolverPipelineConfigPtrType) ToResolverPipelineConfigPtrOutput() ResolverPipelineConfigPtrOutput {
	return i.ToResolverPipelineConfigPtrOutputWithContext(context.Background())
}

func (i *resolverPipelineConfigPtrType) ToResolverPipelineConfigPtrOutputWithContext(ctx context.Context) ResolverPipelineConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverPipelineConfigPtrOutput)
}

// Use the “PipelineConfig“ property type to specify “PipelineConfig“ for an APSYlong resolver.
//
//	``PipelineConfig`` is a property of the [AWS::AppSync::Resolver](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-resolver.html) resource.
type ResolverPipelineConfigOutput struct{ *pulumi.OutputState }

func (ResolverPipelineConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverPipelineConfig)(nil)).Elem()
}

func (o ResolverPipelineConfigOutput) ToResolverPipelineConfigOutput() ResolverPipelineConfigOutput {
	return o
}

func (o ResolverPipelineConfigOutput) ToResolverPipelineConfigOutputWithContext(ctx context.Context) ResolverPipelineConfigOutput {
	return o
}

func (o ResolverPipelineConfigOutput) ToResolverPipelineConfigPtrOutput() ResolverPipelineConfigPtrOutput {
	return o.ToResolverPipelineConfigPtrOutputWithContext(context.Background())
}

func (o ResolverPipelineConfigOutput) ToResolverPipelineConfigPtrOutputWithContext(ctx context.Context) ResolverPipelineConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResolverPipelineConfig) *ResolverPipelineConfig {
		return &v
	}).(ResolverPipelineConfigPtrOutput)
}

// A list of “Function“ objects.
func (o ResolverPipelineConfigOutput) Functions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResolverPipelineConfig) []string { return v.Functions }).(pulumi.StringArrayOutput)
}

type ResolverPipelineConfigPtrOutput struct{ *pulumi.OutputState }

func (ResolverPipelineConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResolverPipelineConfig)(nil)).Elem()
}

func (o ResolverPipelineConfigPtrOutput) ToResolverPipelineConfigPtrOutput() ResolverPipelineConfigPtrOutput {
	return o
}

func (o ResolverPipelineConfigPtrOutput) ToResolverPipelineConfigPtrOutputWithContext(ctx context.Context) ResolverPipelineConfigPtrOutput {
	return o
}

func (o ResolverPipelineConfigPtrOutput) Elem() ResolverPipelineConfigOutput {
	return o.ApplyT(func(v *ResolverPipelineConfig) ResolverPipelineConfig {
		if v != nil {
			return *v
		}
		var ret ResolverPipelineConfig
		return ret
	}).(ResolverPipelineConfigOutput)
}

// A list of “Function“ objects.
func (o ResolverPipelineConfigPtrOutput) Functions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ResolverPipelineConfig) []string {
		if v == nil {
			return nil
		}
		return v.Functions
	}).(pulumi.StringArrayOutput)
}

// Describes a Sync configuration for a resolver.
//
//	Specifies which Conflict Detection strategy and Resolution strategy to use when the resolver is invoked.
type ResolverSyncConfig struct {
	// The Conflict Detection strategy to use.
	//   +   *VERSION*: Detect conflicts based on object versions for this resolver.
	//   +   *NONE*: Do not detect conflicts when invoking this resolver.
	ConflictDetection string `pulumi:"conflictDetection"`
	// The Conflict Resolution strategy to perform in the event of a conflict.
	//   +   *OPTIMISTIC_CONCURRENCY*: Resolve conflicts by rejecting mutations when versions don't match the latest version at the server.
	//   +   *AUTOMERGE*: Resolve conflicts with the Automerge conflict resolution strategy.
	//   +   *LAMBDA*: Resolve conflicts with an LAMlong function supplied in the ``LambdaConflictHandlerConfig``.
	ConflictHandler *string `pulumi:"conflictHandler"`
	// The ``LambdaConflictHandlerConfig`` when configuring ``LAMBDA`` as the Conflict Handler.
	LambdaConflictHandlerConfig *ResolverLambdaConflictHandlerConfig `pulumi:"lambdaConflictHandlerConfig"`
}

// ResolverSyncConfigInput is an input type that accepts ResolverSyncConfigArgs and ResolverSyncConfigOutput values.
// You can construct a concrete instance of `ResolverSyncConfigInput` via:
//
//	ResolverSyncConfigArgs{...}
type ResolverSyncConfigInput interface {
	pulumi.Input

	ToResolverSyncConfigOutput() ResolverSyncConfigOutput
	ToResolverSyncConfigOutputWithContext(context.Context) ResolverSyncConfigOutput
}

// Describes a Sync configuration for a resolver.
//
//	Specifies which Conflict Detection strategy and Resolution strategy to use when the resolver is invoked.
type ResolverSyncConfigArgs struct {
	// The Conflict Detection strategy to use.
	//   +   *VERSION*: Detect conflicts based on object versions for this resolver.
	//   +   *NONE*: Do not detect conflicts when invoking this resolver.
	ConflictDetection pulumi.StringInput `pulumi:"conflictDetection"`
	// The Conflict Resolution strategy to perform in the event of a conflict.
	//   +   *OPTIMISTIC_CONCURRENCY*: Resolve conflicts by rejecting mutations when versions don't match the latest version at the server.
	//   +   *AUTOMERGE*: Resolve conflicts with the Automerge conflict resolution strategy.
	//   +   *LAMBDA*: Resolve conflicts with an LAMlong function supplied in the ``LambdaConflictHandlerConfig``.
	ConflictHandler pulumi.StringPtrInput `pulumi:"conflictHandler"`
	// The ``LambdaConflictHandlerConfig`` when configuring ``LAMBDA`` as the Conflict Handler.
	LambdaConflictHandlerConfig ResolverLambdaConflictHandlerConfigPtrInput `pulumi:"lambdaConflictHandlerConfig"`
}

func (ResolverSyncConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverSyncConfig)(nil)).Elem()
}

func (i ResolverSyncConfigArgs) ToResolverSyncConfigOutput() ResolverSyncConfigOutput {
	return i.ToResolverSyncConfigOutputWithContext(context.Background())
}

func (i ResolverSyncConfigArgs) ToResolverSyncConfigOutputWithContext(ctx context.Context) ResolverSyncConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverSyncConfigOutput)
}

func (i ResolverSyncConfigArgs) ToResolverSyncConfigPtrOutput() ResolverSyncConfigPtrOutput {
	return i.ToResolverSyncConfigPtrOutputWithContext(context.Background())
}

func (i ResolverSyncConfigArgs) ToResolverSyncConfigPtrOutputWithContext(ctx context.Context) ResolverSyncConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverSyncConfigOutput).ToResolverSyncConfigPtrOutputWithContext(ctx)
}

// ResolverSyncConfigPtrInput is an input type that accepts ResolverSyncConfigArgs, ResolverSyncConfigPtr and ResolverSyncConfigPtrOutput values.
// You can construct a concrete instance of `ResolverSyncConfigPtrInput` via:
//
//	        ResolverSyncConfigArgs{...}
//
//	or:
//
//	        nil
type ResolverSyncConfigPtrInput interface {
	pulumi.Input

	ToResolverSyncConfigPtrOutput() ResolverSyncConfigPtrOutput
	ToResolverSyncConfigPtrOutputWithContext(context.Context) ResolverSyncConfigPtrOutput
}

type resolverSyncConfigPtrType ResolverSyncConfigArgs

func ResolverSyncConfigPtr(v *ResolverSyncConfigArgs) ResolverSyncConfigPtrInput {
	return (*resolverSyncConfigPtrType)(v)
}

func (*resolverSyncConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResolverSyncConfig)(nil)).Elem()
}

func (i *resolverSyncConfigPtrType) ToResolverSyncConfigPtrOutput() ResolverSyncConfigPtrOutput {
	return i.ToResolverSyncConfigPtrOutputWithContext(context.Background())
}

func (i *resolverSyncConfigPtrType) ToResolverSyncConfigPtrOutputWithContext(ctx context.Context) ResolverSyncConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverSyncConfigPtrOutput)
}

// Describes a Sync configuration for a resolver.
//
//	Specifies which Conflict Detection strategy and Resolution strategy to use when the resolver is invoked.
type ResolverSyncConfigOutput struct{ *pulumi.OutputState }

func (ResolverSyncConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverSyncConfig)(nil)).Elem()
}

func (o ResolverSyncConfigOutput) ToResolverSyncConfigOutput() ResolverSyncConfigOutput {
	return o
}

func (o ResolverSyncConfigOutput) ToResolverSyncConfigOutputWithContext(ctx context.Context) ResolverSyncConfigOutput {
	return o
}

func (o ResolverSyncConfigOutput) ToResolverSyncConfigPtrOutput() ResolverSyncConfigPtrOutput {
	return o.ToResolverSyncConfigPtrOutputWithContext(context.Background())
}

func (o ResolverSyncConfigOutput) ToResolverSyncConfigPtrOutputWithContext(ctx context.Context) ResolverSyncConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResolverSyncConfig) *ResolverSyncConfig {
		return &v
	}).(ResolverSyncConfigPtrOutput)
}

// The Conflict Detection strategy to use.
//   - *VERSION*: Detect conflicts based on object versions for this resolver.
//   - *NONE*: Do not detect conflicts when invoking this resolver.
func (o ResolverSyncConfigOutput) ConflictDetection() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverSyncConfig) string { return v.ConflictDetection }).(pulumi.StringOutput)
}

// The Conflict Resolution strategy to perform in the event of a conflict.
//   - *OPTIMISTIC_CONCURRENCY*: Resolve conflicts by rejecting mutations when versions don't match the latest version at the server.
//   - *AUTOMERGE*: Resolve conflicts with the Automerge conflict resolution strategy.
//   - *LAMBDA*: Resolve conflicts with an LAMlong function supplied in the “LambdaConflictHandlerConfig“.
func (o ResolverSyncConfigOutput) ConflictHandler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResolverSyncConfig) *string { return v.ConflictHandler }).(pulumi.StringPtrOutput)
}

// The “LambdaConflictHandlerConfig“ when configuring “LAMBDA“ as the Conflict Handler.
func (o ResolverSyncConfigOutput) LambdaConflictHandlerConfig() ResolverLambdaConflictHandlerConfigPtrOutput {
	return o.ApplyT(func(v ResolverSyncConfig) *ResolverLambdaConflictHandlerConfig { return v.LambdaConflictHandlerConfig }).(ResolverLambdaConflictHandlerConfigPtrOutput)
}

type ResolverSyncConfigPtrOutput struct{ *pulumi.OutputState }

func (ResolverSyncConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResolverSyncConfig)(nil)).Elem()
}

func (o ResolverSyncConfigPtrOutput) ToResolverSyncConfigPtrOutput() ResolverSyncConfigPtrOutput {
	return o
}

func (o ResolverSyncConfigPtrOutput) ToResolverSyncConfigPtrOutputWithContext(ctx context.Context) ResolverSyncConfigPtrOutput {
	return o
}

func (o ResolverSyncConfigPtrOutput) Elem() ResolverSyncConfigOutput {
	return o.ApplyT(func(v *ResolverSyncConfig) ResolverSyncConfig {
		if v != nil {
			return *v
		}
		var ret ResolverSyncConfig
		return ret
	}).(ResolverSyncConfigOutput)
}

// The Conflict Detection strategy to use.
//   - *VERSION*: Detect conflicts based on object versions for this resolver.
//   - *NONE*: Do not detect conflicts when invoking this resolver.
func (o ResolverSyncConfigPtrOutput) ConflictDetection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResolverSyncConfig) *string {
		if v == nil {
			return nil
		}
		return &v.ConflictDetection
	}).(pulumi.StringPtrOutput)
}

// The Conflict Resolution strategy to perform in the event of a conflict.
//   - *OPTIMISTIC_CONCURRENCY*: Resolve conflicts by rejecting mutations when versions don't match the latest version at the server.
//   - *AUTOMERGE*: Resolve conflicts with the Automerge conflict resolution strategy.
//   - *LAMBDA*: Resolve conflicts with an LAMlong function supplied in the “LambdaConflictHandlerConfig“.
func (o ResolverSyncConfigPtrOutput) ConflictHandler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResolverSyncConfig) *string {
		if v == nil {
			return nil
		}
		return v.ConflictHandler
	}).(pulumi.StringPtrOutput)
}

// The “LambdaConflictHandlerConfig“ when configuring “LAMBDA“ as the Conflict Handler.
func (o ResolverSyncConfigPtrOutput) LambdaConflictHandlerConfig() ResolverLambdaConflictHandlerConfigPtrOutput {
	return o.ApplyT(func(v *ResolverSyncConfig) *ResolverLambdaConflictHandlerConfig {
		if v == nil {
			return nil
		}
		return v.LambdaConflictHandlerConfig
	}).(ResolverLambdaConflictHandlerConfigPtrOutput)
}

type SourceApiAssociationConfig struct {
	// Configuration of the merged behavior for the association. For example when it could be auto or has to be manual.
	MergeType *SourceApiAssociationConfigMergeType `pulumi:"mergeType"`
}

// SourceApiAssociationConfigInput is an input type that accepts SourceApiAssociationConfigArgs and SourceApiAssociationConfigOutput values.
// You can construct a concrete instance of `SourceApiAssociationConfigInput` via:
//
//	SourceApiAssociationConfigArgs{...}
type SourceApiAssociationConfigInput interface {
	pulumi.Input

	ToSourceApiAssociationConfigOutput() SourceApiAssociationConfigOutput
	ToSourceApiAssociationConfigOutputWithContext(context.Context) SourceApiAssociationConfigOutput
}

type SourceApiAssociationConfigArgs struct {
	// Configuration of the merged behavior for the association. For example when it could be auto or has to be manual.
	MergeType SourceApiAssociationConfigMergeTypePtrInput `pulumi:"mergeType"`
}

func (SourceApiAssociationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceApiAssociationConfig)(nil)).Elem()
}

func (i SourceApiAssociationConfigArgs) ToSourceApiAssociationConfigOutput() SourceApiAssociationConfigOutput {
	return i.ToSourceApiAssociationConfigOutputWithContext(context.Background())
}

func (i SourceApiAssociationConfigArgs) ToSourceApiAssociationConfigOutputWithContext(ctx context.Context) SourceApiAssociationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceApiAssociationConfigOutput)
}

func (i SourceApiAssociationConfigArgs) ToSourceApiAssociationConfigPtrOutput() SourceApiAssociationConfigPtrOutput {
	return i.ToSourceApiAssociationConfigPtrOutputWithContext(context.Background())
}

func (i SourceApiAssociationConfigArgs) ToSourceApiAssociationConfigPtrOutputWithContext(ctx context.Context) SourceApiAssociationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceApiAssociationConfigOutput).ToSourceApiAssociationConfigPtrOutputWithContext(ctx)
}

// SourceApiAssociationConfigPtrInput is an input type that accepts SourceApiAssociationConfigArgs, SourceApiAssociationConfigPtr and SourceApiAssociationConfigPtrOutput values.
// You can construct a concrete instance of `SourceApiAssociationConfigPtrInput` via:
//
//	        SourceApiAssociationConfigArgs{...}
//
//	or:
//
//	        nil
type SourceApiAssociationConfigPtrInput interface {
	pulumi.Input

	ToSourceApiAssociationConfigPtrOutput() SourceApiAssociationConfigPtrOutput
	ToSourceApiAssociationConfigPtrOutputWithContext(context.Context) SourceApiAssociationConfigPtrOutput
}

type sourceApiAssociationConfigPtrType SourceApiAssociationConfigArgs

func SourceApiAssociationConfigPtr(v *SourceApiAssociationConfigArgs) SourceApiAssociationConfigPtrInput {
	return (*sourceApiAssociationConfigPtrType)(v)
}

func (*sourceApiAssociationConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceApiAssociationConfig)(nil)).Elem()
}

func (i *sourceApiAssociationConfigPtrType) ToSourceApiAssociationConfigPtrOutput() SourceApiAssociationConfigPtrOutput {
	return i.ToSourceApiAssociationConfigPtrOutputWithContext(context.Background())
}

func (i *sourceApiAssociationConfigPtrType) ToSourceApiAssociationConfigPtrOutputWithContext(ctx context.Context) SourceApiAssociationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceApiAssociationConfigPtrOutput)
}

type SourceApiAssociationConfigOutput struct{ *pulumi.OutputState }

func (SourceApiAssociationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceApiAssociationConfig)(nil)).Elem()
}

func (o SourceApiAssociationConfigOutput) ToSourceApiAssociationConfigOutput() SourceApiAssociationConfigOutput {
	return o
}

func (o SourceApiAssociationConfigOutput) ToSourceApiAssociationConfigOutputWithContext(ctx context.Context) SourceApiAssociationConfigOutput {
	return o
}

func (o SourceApiAssociationConfigOutput) ToSourceApiAssociationConfigPtrOutput() SourceApiAssociationConfigPtrOutput {
	return o.ToSourceApiAssociationConfigPtrOutputWithContext(context.Background())
}

func (o SourceApiAssociationConfigOutput) ToSourceApiAssociationConfigPtrOutputWithContext(ctx context.Context) SourceApiAssociationConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SourceApiAssociationConfig) *SourceApiAssociationConfig {
		return &v
	}).(SourceApiAssociationConfigPtrOutput)
}

// Configuration of the merged behavior for the association. For example when it could be auto or has to be manual.
func (o SourceApiAssociationConfigOutput) MergeType() SourceApiAssociationConfigMergeTypePtrOutput {
	return o.ApplyT(func(v SourceApiAssociationConfig) *SourceApiAssociationConfigMergeType { return v.MergeType }).(SourceApiAssociationConfigMergeTypePtrOutput)
}

type SourceApiAssociationConfigPtrOutput struct{ *pulumi.OutputState }

func (SourceApiAssociationConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceApiAssociationConfig)(nil)).Elem()
}

func (o SourceApiAssociationConfigPtrOutput) ToSourceApiAssociationConfigPtrOutput() SourceApiAssociationConfigPtrOutput {
	return o
}

func (o SourceApiAssociationConfigPtrOutput) ToSourceApiAssociationConfigPtrOutputWithContext(ctx context.Context) SourceApiAssociationConfigPtrOutput {
	return o
}

func (o SourceApiAssociationConfigPtrOutput) Elem() SourceApiAssociationConfigOutput {
	return o.ApplyT(func(v *SourceApiAssociationConfig) SourceApiAssociationConfig {
		if v != nil {
			return *v
		}
		var ret SourceApiAssociationConfig
		return ret
	}).(SourceApiAssociationConfigOutput)
}

// Configuration of the merged behavior for the association. For example when it could be auto or has to be manual.
func (o SourceApiAssociationConfigPtrOutput) MergeType() SourceApiAssociationConfigMergeTypePtrOutput {
	return o.ApplyT(func(v *SourceApiAssociationConfig) *SourceApiAssociationConfigMergeType {
		if v == nil {
			return nil
		}
		return v.MergeType
	}).(SourceApiAssociationConfigMergeTypePtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionConfigurationAppSyncRuntimeInput)(nil)).Elem(), FunctionConfigurationAppSyncRuntimeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionConfigurationAppSyncRuntimePtrInput)(nil)).Elem(), FunctionConfigurationAppSyncRuntimeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionConfigurationLambdaConflictHandlerConfigInput)(nil)).Elem(), FunctionConfigurationLambdaConflictHandlerConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionConfigurationLambdaConflictHandlerConfigPtrInput)(nil)).Elem(), FunctionConfigurationLambdaConflictHandlerConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionConfigurationSyncConfigInput)(nil)).Elem(), FunctionConfigurationSyncConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionConfigurationSyncConfigPtrInput)(nil)).Elem(), FunctionConfigurationSyncConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverAppSyncRuntimeInput)(nil)).Elem(), ResolverAppSyncRuntimeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverAppSyncRuntimePtrInput)(nil)).Elem(), ResolverAppSyncRuntimeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverCachingConfigInput)(nil)).Elem(), ResolverCachingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverCachingConfigPtrInput)(nil)).Elem(), ResolverCachingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverLambdaConflictHandlerConfigInput)(nil)).Elem(), ResolverLambdaConflictHandlerConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverLambdaConflictHandlerConfigPtrInput)(nil)).Elem(), ResolverLambdaConflictHandlerConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverPipelineConfigInput)(nil)).Elem(), ResolverPipelineConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverPipelineConfigPtrInput)(nil)).Elem(), ResolverPipelineConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverSyncConfigInput)(nil)).Elem(), ResolverSyncConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverSyncConfigPtrInput)(nil)).Elem(), ResolverSyncConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceApiAssociationConfigInput)(nil)).Elem(), SourceApiAssociationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceApiAssociationConfigPtrInput)(nil)).Elem(), SourceApiAssociationConfigArgs{})
	pulumi.RegisterOutputType(FunctionConfigurationAppSyncRuntimeOutput{})
	pulumi.RegisterOutputType(FunctionConfigurationAppSyncRuntimePtrOutput{})
	pulumi.RegisterOutputType(FunctionConfigurationLambdaConflictHandlerConfigOutput{})
	pulumi.RegisterOutputType(FunctionConfigurationLambdaConflictHandlerConfigPtrOutput{})
	pulumi.RegisterOutputType(FunctionConfigurationSyncConfigOutput{})
	pulumi.RegisterOutputType(FunctionConfigurationSyncConfigPtrOutput{})
	pulumi.RegisterOutputType(ResolverAppSyncRuntimeOutput{})
	pulumi.RegisterOutputType(ResolverAppSyncRuntimePtrOutput{})
	pulumi.RegisterOutputType(ResolverCachingConfigOutput{})
	pulumi.RegisterOutputType(ResolverCachingConfigPtrOutput{})
	pulumi.RegisterOutputType(ResolverLambdaConflictHandlerConfigOutput{})
	pulumi.RegisterOutputType(ResolverLambdaConflictHandlerConfigPtrOutput{})
	pulumi.RegisterOutputType(ResolverPipelineConfigOutput{})
	pulumi.RegisterOutputType(ResolverPipelineConfigPtrOutput{})
	pulumi.RegisterOutputType(ResolverSyncConfigOutput{})
	pulumi.RegisterOutputType(ResolverSyncConfigPtrOutput{})
	pulumi.RegisterOutputType(SourceApiAssociationConfigOutput{})
	pulumi.RegisterOutputType(SourceApiAssociationConfigPtrOutput{})
}
