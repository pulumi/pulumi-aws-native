// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appsync

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for AppSync Api
func LookupApi(ctx *pulumi.Context, args *LookupApiArgs, opts ...pulumi.InvokeOption) (*LookupApiResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupApiResult
	err := ctx.Invoke("aws-native:appsync:getApi", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupApiArgs struct {
	// The Amazon Resource Name (ARN) of the AppSync Api
	ApiArn string `pulumi:"apiArn"`
}

type LookupApiResult struct {
	// The Amazon Resource Name (ARN) of the AppSync Api
	ApiArn *string `pulumi:"apiArn"`
	// The unique identifier for the AppSync Api generated by the service
	ApiId       *string           `pulumi:"apiId"`
	Dns         map[string]string `pulumi:"dns"`
	EventConfig *ApiEventConfig   `pulumi:"eventConfig"`
	// The API name.
	Name *string `pulumi:"name"`
	// The owner contact information for an API resource.
	//
	// This field accepts any string input with a length of 0 - 256 characters.
	OwnerContact *string `pulumi:"ownerContact"`
	// The tags.
	Tags []aws.Tag `pulumi:"tags"`
}

func LookupApiOutput(ctx *pulumi.Context, args LookupApiOutputArgs, opts ...pulumi.InvokeOption) LookupApiResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupApiResultOutput, error) {
			args := v.(LookupApiArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupApiResult
			secret, err := ctx.InvokePackageRaw("aws-native:appsync:getApi", args, &rv, "", opts...)
			if err != nil {
				return LookupApiResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupApiResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupApiResultOutput), nil
			}
			return output, nil
		}).(LookupApiResultOutput)
}

type LookupApiOutputArgs struct {
	// The Amazon Resource Name (ARN) of the AppSync Api
	ApiArn pulumi.StringInput `pulumi:"apiArn"`
}

func (LookupApiOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupApiArgs)(nil)).Elem()
}

type LookupApiResultOutput struct{ *pulumi.OutputState }

func (LookupApiResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupApiResult)(nil)).Elem()
}

func (o LookupApiResultOutput) ToLookupApiResultOutput() LookupApiResultOutput {
	return o
}

func (o LookupApiResultOutput) ToLookupApiResultOutputWithContext(ctx context.Context) LookupApiResultOutput {
	return o
}

// The Amazon Resource Name (ARN) of the AppSync Api
func (o LookupApiResultOutput) ApiArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupApiResult) *string { return v.ApiArn }).(pulumi.StringPtrOutput)
}

// The unique identifier for the AppSync Api generated by the service
func (o LookupApiResultOutput) ApiId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupApiResult) *string { return v.ApiId }).(pulumi.StringPtrOutput)
}

func (o LookupApiResultOutput) Dns() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupApiResult) map[string]string { return v.Dns }).(pulumi.StringMapOutput)
}

func (o LookupApiResultOutput) EventConfig() ApiEventConfigPtrOutput {
	return o.ApplyT(func(v LookupApiResult) *ApiEventConfig { return v.EventConfig }).(ApiEventConfigPtrOutput)
}

// The API name.
func (o LookupApiResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupApiResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The owner contact information for an API resource.
//
// This field accepts any string input with a length of 0 - 256 characters.
func (o LookupApiResultOutput) OwnerContact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupApiResult) *string { return v.OwnerContact }).(pulumi.StringPtrOutput)
}

// The tags.
func (o LookupApiResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupApiResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupApiResultOutput{})
}
