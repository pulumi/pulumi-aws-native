// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package appsync

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::AppSync::Resolver
func LookupResolver(ctx *pulumi.Context, args *LookupResolverArgs, opts ...pulumi.InvokeOption) (*LookupResolverResult, error) {
	var rv LookupResolverResult
	err := ctx.Invoke("aws-native:appsync:getResolver", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupResolverArgs struct {
	Id string `pulumi:"id"`
}

type LookupResolverResult struct {
	CachingConfig                     *ResolverCachingConfig  `pulumi:"cachingConfig"`
	DataSourceName                    *string                 `pulumi:"dataSourceName"`
	Id                                *string                 `pulumi:"id"`
	Kind                              *string                 `pulumi:"kind"`
	MaxBatchSize                      *int                    `pulumi:"maxBatchSize"`
	PipelineConfig                    *ResolverPipelineConfig `pulumi:"pipelineConfig"`
	RequestMappingTemplate            *string                 `pulumi:"requestMappingTemplate"`
	RequestMappingTemplateS3Location  *string                 `pulumi:"requestMappingTemplateS3Location"`
	ResolverArn                       *string                 `pulumi:"resolverArn"`
	ResponseMappingTemplate           *string                 `pulumi:"responseMappingTemplate"`
	ResponseMappingTemplateS3Location *string                 `pulumi:"responseMappingTemplateS3Location"`
	SyncConfig                        *ResolverSyncConfig     `pulumi:"syncConfig"`
}

func LookupResolverOutput(ctx *pulumi.Context, args LookupResolverOutputArgs, opts ...pulumi.InvokeOption) LookupResolverResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupResolverResult, error) {
			args := v.(LookupResolverArgs)
			r, err := LookupResolver(ctx, &args, opts...)
			var s LookupResolverResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupResolverResultOutput)
}

type LookupResolverOutputArgs struct {
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupResolverOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupResolverArgs)(nil)).Elem()
}

type LookupResolverResultOutput struct{ *pulumi.OutputState }

func (LookupResolverResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupResolverResult)(nil)).Elem()
}

func (o LookupResolverResultOutput) ToLookupResolverResultOutput() LookupResolverResultOutput {
	return o
}

func (o LookupResolverResultOutput) ToLookupResolverResultOutputWithContext(ctx context.Context) LookupResolverResultOutput {
	return o
}

func (o LookupResolverResultOutput) CachingConfig() ResolverCachingConfigPtrOutput {
	return o.ApplyT(func(v LookupResolverResult) *ResolverCachingConfig { return v.CachingConfig }).(ResolverCachingConfigPtrOutput)
}

func (o LookupResolverResultOutput) DataSourceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupResolverResult) *string { return v.DataSourceName }).(pulumi.StringPtrOutput)
}

func (o LookupResolverResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupResolverResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o LookupResolverResultOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupResolverResult) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o LookupResolverResultOutput) MaxBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupResolverResult) *int { return v.MaxBatchSize }).(pulumi.IntPtrOutput)
}

func (o LookupResolverResultOutput) PipelineConfig() ResolverPipelineConfigPtrOutput {
	return o.ApplyT(func(v LookupResolverResult) *ResolverPipelineConfig { return v.PipelineConfig }).(ResolverPipelineConfigPtrOutput)
}

func (o LookupResolverResultOutput) RequestMappingTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupResolverResult) *string { return v.RequestMappingTemplate }).(pulumi.StringPtrOutput)
}

func (o LookupResolverResultOutput) RequestMappingTemplateS3Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupResolverResult) *string { return v.RequestMappingTemplateS3Location }).(pulumi.StringPtrOutput)
}

func (o LookupResolverResultOutput) ResolverArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupResolverResult) *string { return v.ResolverArn }).(pulumi.StringPtrOutput)
}

func (o LookupResolverResultOutput) ResponseMappingTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupResolverResult) *string { return v.ResponseMappingTemplate }).(pulumi.StringPtrOutput)
}

func (o LookupResolverResultOutput) ResponseMappingTemplateS3Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupResolverResult) *string { return v.ResponseMappingTemplateS3Location }).(pulumi.StringPtrOutput)
}

func (o LookupResolverResultOutput) SyncConfig() ResolverSyncConfigPtrOutput {
	return o.ApplyT(func(v LookupResolverResult) *ResolverSyncConfig { return v.SyncConfig }).(ResolverSyncConfigPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupResolverResultOutput{})
}
