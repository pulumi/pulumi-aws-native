// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appsync

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource Type definition for AWS::AppSync::Resolver
func LookupResolver(ctx *pulumi.Context, args *LookupResolverArgs, opts ...pulumi.InvokeOption) (*LookupResolverResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupResolverResult
	err := ctx.Invoke("aws-native:appsync:getResolver", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupResolverArgs struct {
	// The Amazon Resource Name (ARN) for the resolver.
	ResolverArn string `pulumi:"resolverArn"`
}

type LookupResolverResult struct {
	// The caching configuration for the resolver.
	CachingConfig *ResolverCachingConfig `pulumi:"cachingConfig"`
	// The resolver code that contains the request and response functions. When code is used, the runtime is required.
	Code *string `pulumi:"code"`
	// The resolver data source name.
	DataSourceName *string `pulumi:"dataSourceName"`
	// The resolver type.
	Kind *string `pulumi:"kind"`
	// The maximum number of resolver request inputs that will be sent to a single AWS Lambda function in a BatchInvoke operation.
	MaxBatchSize *int `pulumi:"maxBatchSize"`
	// Functions linked with the pipeline resolver.
	PipelineConfig *ResolverPipelineConfig `pulumi:"pipelineConfig"`
	// Request mapping templates are optional when using a Lambda data source. For all other data sources, a request mapping template is required.
	RequestMappingTemplate *string `pulumi:"requestMappingTemplate"`
	// The Amazon Resource Name (ARN) for the resolver.
	ResolverArn *string `pulumi:"resolverArn"`
	// The response mapping template.
	ResponseMappingTemplate *string `pulumi:"responseMappingTemplate"`
	// Describes a runtime used by an AWS AppSync pipeline resolver or AWS AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified.
	Runtime *ResolverAppSyncRuntime `pulumi:"runtime"`
	// The SyncConfig for a resolver attached to a versioned data source.
	SyncConfig *ResolverSyncConfig `pulumi:"syncConfig"`
}

func LookupResolverOutput(ctx *pulumi.Context, args LookupResolverOutputArgs, opts ...pulumi.InvokeOption) LookupResolverResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupResolverResult, error) {
			args := v.(LookupResolverArgs)
			r, err := LookupResolver(ctx, &args, opts...)
			var s LookupResolverResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupResolverResultOutput)
}

type LookupResolverOutputArgs struct {
	// The Amazon Resource Name (ARN) for the resolver.
	ResolverArn pulumi.StringInput `pulumi:"resolverArn"`
}

func (LookupResolverOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupResolverArgs)(nil)).Elem()
}

type LookupResolverResultOutput struct{ *pulumi.OutputState }

func (LookupResolverResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupResolverResult)(nil)).Elem()
}

func (o LookupResolverResultOutput) ToLookupResolverResultOutput() LookupResolverResultOutput {
	return o
}

func (o LookupResolverResultOutput) ToLookupResolverResultOutputWithContext(ctx context.Context) LookupResolverResultOutput {
	return o
}

func (o LookupResolverResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupResolverResult] {
	return pulumix.Output[LookupResolverResult]{
		OutputState: o.OutputState,
	}
}

// The caching configuration for the resolver.
func (o LookupResolverResultOutput) CachingConfig() ResolverCachingConfigPtrOutput {
	return o.ApplyT(func(v LookupResolverResult) *ResolverCachingConfig { return v.CachingConfig }).(ResolverCachingConfigPtrOutput)
}

// The resolver code that contains the request and response functions. When code is used, the runtime is required.
func (o LookupResolverResultOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupResolverResult) *string { return v.Code }).(pulumi.StringPtrOutput)
}

// The resolver data source name.
func (o LookupResolverResultOutput) DataSourceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupResolverResult) *string { return v.DataSourceName }).(pulumi.StringPtrOutput)
}

// The resolver type.
func (o LookupResolverResultOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupResolverResult) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The maximum number of resolver request inputs that will be sent to a single AWS Lambda function in a BatchInvoke operation.
func (o LookupResolverResultOutput) MaxBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupResolverResult) *int { return v.MaxBatchSize }).(pulumi.IntPtrOutput)
}

// Functions linked with the pipeline resolver.
func (o LookupResolverResultOutput) PipelineConfig() ResolverPipelineConfigPtrOutput {
	return o.ApplyT(func(v LookupResolverResult) *ResolverPipelineConfig { return v.PipelineConfig }).(ResolverPipelineConfigPtrOutput)
}

// Request mapping templates are optional when using a Lambda data source. For all other data sources, a request mapping template is required.
func (o LookupResolverResultOutput) RequestMappingTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupResolverResult) *string { return v.RequestMappingTemplate }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) for the resolver.
func (o LookupResolverResultOutput) ResolverArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupResolverResult) *string { return v.ResolverArn }).(pulumi.StringPtrOutput)
}

// The response mapping template.
func (o LookupResolverResultOutput) ResponseMappingTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupResolverResult) *string { return v.ResponseMappingTemplate }).(pulumi.StringPtrOutput)
}

// Describes a runtime used by an AWS AppSync pipeline resolver or AWS AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified.
func (o LookupResolverResultOutput) Runtime() ResolverAppSyncRuntimePtrOutput {
	return o.ApplyT(func(v LookupResolverResult) *ResolverAppSyncRuntime { return v.Runtime }).(ResolverAppSyncRuntimePtrOutput)
}

// The SyncConfig for a resolver attached to a versioned data source.
func (o LookupResolverResultOutput) SyncConfig() ResolverSyncConfigPtrOutput {
	return o.ApplyT(func(v LookupResolverResult) *ResolverSyncConfig { return v.SyncConfig }).(ResolverSyncConfigPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupResolverResultOutput{})
}
