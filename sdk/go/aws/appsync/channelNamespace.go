// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appsync

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for AppSync ChannelNamespace
type ChannelNamespace struct {
	pulumi.CustomResourceState

	// AppSync Api Id that this Channel Namespace belongs to.
	ApiId pulumi.StringOutput `pulumi:"apiId"`
	// The Amazon Resource Name (ARN) of the channel namespace.
	ChannelNamespaceArn pulumi.StringOutput `pulumi:"channelNamespaceArn"`
	// The event handler functions that run custom business logic to process published events and subscribe requests.
	CodeHandlers pulumi.StringPtrOutput `pulumi:"codeHandlers"`
	// The Amazon S3 endpoint where the code is located.
	CodeS3Location pulumi.StringPtrOutput                  `pulumi:"codeS3Location"`
	HandlerConfigs ChannelNamespaceHandlerConfigsPtrOutput `pulumi:"handlerConfigs"`
	// The name of the channel namespace. This name must be unique within the `Api` .
	Name pulumi.StringOutput `pulumi:"name"`
	// List of AuthModes supported for Publish operations.
	PublishAuthModes ChannelNamespaceAuthModeArrayOutput `pulumi:"publishAuthModes"`
	// List of AuthModes supported for Subscribe operations.
	SubscribeAuthModes ChannelNamespaceAuthModeArrayOutput `pulumi:"subscribeAuthModes"`
	// A set of tags (key-value pairs) for this channel namespace.
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewChannelNamespace registers a new resource with the given unique name, arguments, and options.
func NewChannelNamespace(ctx *pulumi.Context,
	name string, args *ChannelNamespaceArgs, opts ...pulumi.ResourceOption) (*ChannelNamespace, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiId == nil {
		return nil, errors.New("invalid value for required argument 'ApiId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"apiId",
		"name",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ChannelNamespace
	err := ctx.RegisterResource("aws-native:appsync:ChannelNamespace", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetChannelNamespace gets an existing ChannelNamespace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetChannelNamespace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ChannelNamespaceState, opts ...pulumi.ResourceOption) (*ChannelNamespace, error) {
	var resource ChannelNamespace
	err := ctx.ReadResource("aws-native:appsync:ChannelNamespace", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ChannelNamespace resources.
type channelNamespaceState struct {
}

type ChannelNamespaceState struct {
}

func (ChannelNamespaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*channelNamespaceState)(nil)).Elem()
}

type channelNamespaceArgs struct {
	// AppSync Api Id that this Channel Namespace belongs to.
	ApiId string `pulumi:"apiId"`
	// The event handler functions that run custom business logic to process published events and subscribe requests.
	CodeHandlers *string `pulumi:"codeHandlers"`
	// The Amazon S3 endpoint where the code is located.
	CodeS3Location *string                         `pulumi:"codeS3Location"`
	HandlerConfigs *ChannelNamespaceHandlerConfigs `pulumi:"handlerConfigs"`
	// The name of the channel namespace. This name must be unique within the `Api` .
	Name *string `pulumi:"name"`
	// List of AuthModes supported for Publish operations.
	PublishAuthModes []ChannelNamespaceAuthMode `pulumi:"publishAuthModes"`
	// List of AuthModes supported for Subscribe operations.
	SubscribeAuthModes []ChannelNamespaceAuthMode `pulumi:"subscribeAuthModes"`
	// A set of tags (key-value pairs) for this channel namespace.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a ChannelNamespace resource.
type ChannelNamespaceArgs struct {
	// AppSync Api Id that this Channel Namespace belongs to.
	ApiId pulumi.StringInput
	// The event handler functions that run custom business logic to process published events and subscribe requests.
	CodeHandlers pulumi.StringPtrInput
	// The Amazon S3 endpoint where the code is located.
	CodeS3Location pulumi.StringPtrInput
	HandlerConfigs ChannelNamespaceHandlerConfigsPtrInput
	// The name of the channel namespace. This name must be unique within the `Api` .
	Name pulumi.StringPtrInput
	// List of AuthModes supported for Publish operations.
	PublishAuthModes ChannelNamespaceAuthModeArrayInput
	// List of AuthModes supported for Subscribe operations.
	SubscribeAuthModes ChannelNamespaceAuthModeArrayInput
	// A set of tags (key-value pairs) for this channel namespace.
	Tags aws.TagArrayInput
}

func (ChannelNamespaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*channelNamespaceArgs)(nil)).Elem()
}

type ChannelNamespaceInput interface {
	pulumi.Input

	ToChannelNamespaceOutput() ChannelNamespaceOutput
	ToChannelNamespaceOutputWithContext(ctx context.Context) ChannelNamespaceOutput
}

func (*ChannelNamespace) ElementType() reflect.Type {
	return reflect.TypeOf((**ChannelNamespace)(nil)).Elem()
}

func (i *ChannelNamespace) ToChannelNamespaceOutput() ChannelNamespaceOutput {
	return i.ToChannelNamespaceOutputWithContext(context.Background())
}

func (i *ChannelNamespace) ToChannelNamespaceOutputWithContext(ctx context.Context) ChannelNamespaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelNamespaceOutput)
}

type ChannelNamespaceOutput struct{ *pulumi.OutputState }

func (ChannelNamespaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChannelNamespace)(nil)).Elem()
}

func (o ChannelNamespaceOutput) ToChannelNamespaceOutput() ChannelNamespaceOutput {
	return o
}

func (o ChannelNamespaceOutput) ToChannelNamespaceOutputWithContext(ctx context.Context) ChannelNamespaceOutput {
	return o
}

// AppSync Api Id that this Channel Namespace belongs to.
func (o ChannelNamespaceOutput) ApiId() pulumi.StringOutput {
	return o.ApplyT(func(v *ChannelNamespace) pulumi.StringOutput { return v.ApiId }).(pulumi.StringOutput)
}

// The Amazon Resource Name (ARN) of the channel namespace.
func (o ChannelNamespaceOutput) ChannelNamespaceArn() pulumi.StringOutput {
	return o.ApplyT(func(v *ChannelNamespace) pulumi.StringOutput { return v.ChannelNamespaceArn }).(pulumi.StringOutput)
}

// The event handler functions that run custom business logic to process published events and subscribe requests.
func (o ChannelNamespaceOutput) CodeHandlers() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChannelNamespace) pulumi.StringPtrOutput { return v.CodeHandlers }).(pulumi.StringPtrOutput)
}

// The Amazon S3 endpoint where the code is located.
func (o ChannelNamespaceOutput) CodeS3Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChannelNamespace) pulumi.StringPtrOutput { return v.CodeS3Location }).(pulumi.StringPtrOutput)
}

func (o ChannelNamespaceOutput) HandlerConfigs() ChannelNamespaceHandlerConfigsPtrOutput {
	return o.ApplyT(func(v *ChannelNamespace) ChannelNamespaceHandlerConfigsPtrOutput { return v.HandlerConfigs }).(ChannelNamespaceHandlerConfigsPtrOutput)
}

// The name of the channel namespace. This name must be unique within the `Api` .
func (o ChannelNamespaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ChannelNamespace) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// List of AuthModes supported for Publish operations.
func (o ChannelNamespaceOutput) PublishAuthModes() ChannelNamespaceAuthModeArrayOutput {
	return o.ApplyT(func(v *ChannelNamespace) ChannelNamespaceAuthModeArrayOutput { return v.PublishAuthModes }).(ChannelNamespaceAuthModeArrayOutput)
}

// List of AuthModes supported for Subscribe operations.
func (o ChannelNamespaceOutput) SubscribeAuthModes() ChannelNamespaceAuthModeArrayOutput {
	return o.ApplyT(func(v *ChannelNamespace) ChannelNamespaceAuthModeArrayOutput { return v.SubscribeAuthModes }).(ChannelNamespaceAuthModeArrayOutput)
}

// A set of tags (key-value pairs) for this channel namespace.
func (o ChannelNamespaceOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *ChannelNamespace) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelNamespaceInput)(nil)).Elem(), &ChannelNamespace{})
	pulumi.RegisterOutputType(ChannelNamespaceOutput{})
}
