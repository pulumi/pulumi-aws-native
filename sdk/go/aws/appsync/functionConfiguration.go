// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appsync

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// An example resource schema demonstrating some basic constructs and validation rules.
type FunctionConfiguration struct {
	pulumi.CustomResourceState

	// The AWS AppSync GraphQL API that you want to attach using this function.
	ApiId pulumi.StringOutput `pulumi:"apiId"`
	// The resolver code that contains the request and response functions. When code is used, the runtime is required. The runtime value must be APPSYNC_JS.
	Code pulumi.StringPtrOutput `pulumi:"code"`
	// The Amazon S3 endpoint (where the code is located??).
	CodeS3Location pulumi.StringPtrOutput `pulumi:"codeS3Location"`
	// The name of data source this function will attach.
	DataSourceName pulumi.StringOutput `pulumi:"dataSourceName"`
	// The function description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The ARN for the function generated by the service
	FunctionArn pulumi.StringOutput `pulumi:"functionArn"`
	// The unique identifier for the function generated by the service
	FunctionId pulumi.StringOutput `pulumi:"functionId"`
	// The version of the request mapping template. Currently, only the 2018-05-29 version of the template is supported.
	FunctionVersion pulumi.StringPtrOutput `pulumi:"functionVersion"`
	// The maximum number of resolver request inputs that will be sent to a single AWS Lambda function in a BatchInvoke operation.
	MaxBatchSize pulumi.IntPtrOutput `pulumi:"maxBatchSize"`
	// The name of the function.
	Name pulumi.StringOutput `pulumi:"name"`
	// The Function request mapping template. Functions support only the 2018-05-29 version of the request mapping template.
	RequestMappingTemplate pulumi.StringPtrOutput `pulumi:"requestMappingTemplate"`
	// Describes a Sync configuration for a resolver. Contains information on which Conflict Detection, as well as Resolution strategy, should be performed when the resolver is invoked.
	RequestMappingTemplateS3Location pulumi.StringPtrOutput `pulumi:"requestMappingTemplateS3Location"`
	// The Function response mapping template.
	ResponseMappingTemplate pulumi.StringPtrOutput `pulumi:"responseMappingTemplate"`
	// The location of a response mapping template in an Amazon S3 bucket. Use this if you want to provision with a template file in Amazon S3 rather than embedding it in your CloudFormation template.
	ResponseMappingTemplateS3Location pulumi.StringPtrOutput `pulumi:"responseMappingTemplateS3Location"`
	// Describes a runtime used by an AWS AppSync pipeline resolver or AWS AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified.
	Runtime FunctionConfigurationAppSyncRuntimePtrOutput `pulumi:"runtime"`
	// Describes a Sync configuration for a resolver. Specifies which Conflict Detection strategy and Resolution strategy to use when the resolver is invoked.
	SyncConfig FunctionConfigurationSyncConfigPtrOutput `pulumi:"syncConfig"`
}

// NewFunctionConfiguration registers a new resource with the given unique name, arguments, and options.
func NewFunctionConfiguration(ctx *pulumi.Context,
	name string, args *FunctionConfigurationArgs, opts ...pulumi.ResourceOption) (*FunctionConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiId == nil {
		return nil, errors.New("invalid value for required argument 'ApiId'")
	}
	if args.DataSourceName == nil {
		return nil, errors.New("invalid value for required argument 'DataSourceName'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"apiId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FunctionConfiguration
	err := ctx.RegisterResource("aws-native:appsync:FunctionConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFunctionConfiguration gets an existing FunctionConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFunctionConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FunctionConfigurationState, opts ...pulumi.ResourceOption) (*FunctionConfiguration, error) {
	var resource FunctionConfiguration
	err := ctx.ReadResource("aws-native:appsync:FunctionConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FunctionConfiguration resources.
type functionConfigurationState struct {
}

type FunctionConfigurationState struct {
}

func (FunctionConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*functionConfigurationState)(nil)).Elem()
}

type functionConfigurationArgs struct {
	// The AWS AppSync GraphQL API that you want to attach using this function.
	ApiId string `pulumi:"apiId"`
	// The resolver code that contains the request and response functions. When code is used, the runtime is required. The runtime value must be APPSYNC_JS.
	Code *string `pulumi:"code"`
	// The Amazon S3 endpoint (where the code is located??).
	CodeS3Location *string `pulumi:"codeS3Location"`
	// The name of data source this function will attach.
	DataSourceName string `pulumi:"dataSourceName"`
	// The function description.
	Description *string `pulumi:"description"`
	// The version of the request mapping template. Currently, only the 2018-05-29 version of the template is supported.
	FunctionVersion *string `pulumi:"functionVersion"`
	// The maximum number of resolver request inputs that will be sent to a single AWS Lambda function in a BatchInvoke operation.
	MaxBatchSize *int `pulumi:"maxBatchSize"`
	// The name of the function.
	Name *string `pulumi:"name"`
	// The Function request mapping template. Functions support only the 2018-05-29 version of the request mapping template.
	RequestMappingTemplate *string `pulumi:"requestMappingTemplate"`
	// Describes a Sync configuration for a resolver. Contains information on which Conflict Detection, as well as Resolution strategy, should be performed when the resolver is invoked.
	RequestMappingTemplateS3Location *string `pulumi:"requestMappingTemplateS3Location"`
	// The Function response mapping template.
	ResponseMappingTemplate *string `pulumi:"responseMappingTemplate"`
	// The location of a response mapping template in an Amazon S3 bucket. Use this if you want to provision with a template file in Amazon S3 rather than embedding it in your CloudFormation template.
	ResponseMappingTemplateS3Location *string `pulumi:"responseMappingTemplateS3Location"`
	// Describes a runtime used by an AWS AppSync pipeline resolver or AWS AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified.
	Runtime *FunctionConfigurationAppSyncRuntime `pulumi:"runtime"`
	// Describes a Sync configuration for a resolver. Specifies which Conflict Detection strategy and Resolution strategy to use when the resolver is invoked.
	SyncConfig *FunctionConfigurationSyncConfig `pulumi:"syncConfig"`
}

// The set of arguments for constructing a FunctionConfiguration resource.
type FunctionConfigurationArgs struct {
	// The AWS AppSync GraphQL API that you want to attach using this function.
	ApiId pulumi.StringInput
	// The resolver code that contains the request and response functions. When code is used, the runtime is required. The runtime value must be APPSYNC_JS.
	Code pulumi.StringPtrInput
	// The Amazon S3 endpoint (where the code is located??).
	CodeS3Location pulumi.StringPtrInput
	// The name of data source this function will attach.
	DataSourceName pulumi.StringInput
	// The function description.
	Description pulumi.StringPtrInput
	// The version of the request mapping template. Currently, only the 2018-05-29 version of the template is supported.
	FunctionVersion pulumi.StringPtrInput
	// The maximum number of resolver request inputs that will be sent to a single AWS Lambda function in a BatchInvoke operation.
	MaxBatchSize pulumi.IntPtrInput
	// The name of the function.
	Name pulumi.StringPtrInput
	// The Function request mapping template. Functions support only the 2018-05-29 version of the request mapping template.
	RequestMappingTemplate pulumi.StringPtrInput
	// Describes a Sync configuration for a resolver. Contains information on which Conflict Detection, as well as Resolution strategy, should be performed when the resolver is invoked.
	RequestMappingTemplateS3Location pulumi.StringPtrInput
	// The Function response mapping template.
	ResponseMappingTemplate pulumi.StringPtrInput
	// The location of a response mapping template in an Amazon S3 bucket. Use this if you want to provision with a template file in Amazon S3 rather than embedding it in your CloudFormation template.
	ResponseMappingTemplateS3Location pulumi.StringPtrInput
	// Describes a runtime used by an AWS AppSync pipeline resolver or AWS AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified.
	Runtime FunctionConfigurationAppSyncRuntimePtrInput
	// Describes a Sync configuration for a resolver. Specifies which Conflict Detection strategy and Resolution strategy to use when the resolver is invoked.
	SyncConfig FunctionConfigurationSyncConfigPtrInput
}

func (FunctionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*functionConfigurationArgs)(nil)).Elem()
}

type FunctionConfigurationInput interface {
	pulumi.Input

	ToFunctionConfigurationOutput() FunctionConfigurationOutput
	ToFunctionConfigurationOutputWithContext(ctx context.Context) FunctionConfigurationOutput
}

func (*FunctionConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionConfiguration)(nil)).Elem()
}

func (i *FunctionConfiguration) ToFunctionConfigurationOutput() FunctionConfigurationOutput {
	return i.ToFunctionConfigurationOutputWithContext(context.Background())
}

func (i *FunctionConfiguration) ToFunctionConfigurationOutputWithContext(ctx context.Context) FunctionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionConfigurationOutput)
}

func (i *FunctionConfiguration) ToOutput(ctx context.Context) pulumix.Output[*FunctionConfiguration] {
	return pulumix.Output[*FunctionConfiguration]{
		OutputState: i.ToFunctionConfigurationOutputWithContext(ctx).OutputState,
	}
}

type FunctionConfigurationOutput struct{ *pulumi.OutputState }

func (FunctionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionConfiguration)(nil)).Elem()
}

func (o FunctionConfigurationOutput) ToFunctionConfigurationOutput() FunctionConfigurationOutput {
	return o
}

func (o FunctionConfigurationOutput) ToFunctionConfigurationOutputWithContext(ctx context.Context) FunctionConfigurationOutput {
	return o
}

func (o FunctionConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[*FunctionConfiguration] {
	return pulumix.Output[*FunctionConfiguration]{
		OutputState: o.OutputState,
	}
}

// The AWS AppSync GraphQL API that you want to attach using this function.
func (o FunctionConfigurationOutput) ApiId() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionConfiguration) pulumi.StringOutput { return v.ApiId }).(pulumi.StringOutput)
}

// The resolver code that contains the request and response functions. When code is used, the runtime is required. The runtime value must be APPSYNC_JS.
func (o FunctionConfigurationOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionConfiguration) pulumi.StringPtrOutput { return v.Code }).(pulumi.StringPtrOutput)
}

// The Amazon S3 endpoint (where the code is located??).
func (o FunctionConfigurationOutput) CodeS3Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionConfiguration) pulumi.StringPtrOutput { return v.CodeS3Location }).(pulumi.StringPtrOutput)
}

// The name of data source this function will attach.
func (o FunctionConfigurationOutput) DataSourceName() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionConfiguration) pulumi.StringOutput { return v.DataSourceName }).(pulumi.StringOutput)
}

// The function description.
func (o FunctionConfigurationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionConfiguration) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The ARN for the function generated by the service
func (o FunctionConfigurationOutput) FunctionArn() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionConfiguration) pulumi.StringOutput { return v.FunctionArn }).(pulumi.StringOutput)
}

// The unique identifier for the function generated by the service
func (o FunctionConfigurationOutput) FunctionId() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionConfiguration) pulumi.StringOutput { return v.FunctionId }).(pulumi.StringOutput)
}

// The version of the request mapping template. Currently, only the 2018-05-29 version of the template is supported.
func (o FunctionConfigurationOutput) FunctionVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionConfiguration) pulumi.StringPtrOutput { return v.FunctionVersion }).(pulumi.StringPtrOutput)
}

// The maximum number of resolver request inputs that will be sent to a single AWS Lambda function in a BatchInvoke operation.
func (o FunctionConfigurationOutput) MaxBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FunctionConfiguration) pulumi.IntPtrOutput { return v.MaxBatchSize }).(pulumi.IntPtrOutput)
}

// The name of the function.
func (o FunctionConfigurationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionConfiguration) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Function request mapping template. Functions support only the 2018-05-29 version of the request mapping template.
func (o FunctionConfigurationOutput) RequestMappingTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionConfiguration) pulumi.StringPtrOutput { return v.RequestMappingTemplate }).(pulumi.StringPtrOutput)
}

// Describes a Sync configuration for a resolver. Contains information on which Conflict Detection, as well as Resolution strategy, should be performed when the resolver is invoked.
func (o FunctionConfigurationOutput) RequestMappingTemplateS3Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionConfiguration) pulumi.StringPtrOutput { return v.RequestMappingTemplateS3Location }).(pulumi.StringPtrOutput)
}

// The Function response mapping template.
func (o FunctionConfigurationOutput) ResponseMappingTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionConfiguration) pulumi.StringPtrOutput { return v.ResponseMappingTemplate }).(pulumi.StringPtrOutput)
}

// The location of a response mapping template in an Amazon S3 bucket. Use this if you want to provision with a template file in Amazon S3 rather than embedding it in your CloudFormation template.
func (o FunctionConfigurationOutput) ResponseMappingTemplateS3Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionConfiguration) pulumi.StringPtrOutput { return v.ResponseMappingTemplateS3Location }).(pulumi.StringPtrOutput)
}

// Describes a runtime used by an AWS AppSync pipeline resolver or AWS AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified.
func (o FunctionConfigurationOutput) Runtime() FunctionConfigurationAppSyncRuntimePtrOutput {
	return o.ApplyT(func(v *FunctionConfiguration) FunctionConfigurationAppSyncRuntimePtrOutput { return v.Runtime }).(FunctionConfigurationAppSyncRuntimePtrOutput)
}

// Describes a Sync configuration for a resolver. Specifies which Conflict Detection strategy and Resolution strategy to use when the resolver is invoked.
func (o FunctionConfigurationOutput) SyncConfig() FunctionConfigurationSyncConfigPtrOutput {
	return o.ApplyT(func(v *FunctionConfiguration) FunctionConfigurationSyncConfigPtrOutput { return v.SyncConfig }).(FunctionConfigurationSyncConfigPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionConfigurationInput)(nil)).Elem(), &FunctionConfiguration{})
	pulumi.RegisterOutputType(FunctionConfigurationOutput{})
}
