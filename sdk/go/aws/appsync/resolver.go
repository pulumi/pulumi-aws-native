// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appsync

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource Type definition for AWS::AppSync::Resolver
type Resolver struct {
	pulumi.CustomResourceState

	ApiId                             pulumi.StringOutput             `pulumi:"apiId"`
	CachingConfig                     ResolverCachingConfigPtrOutput  `pulumi:"cachingConfig"`
	Code                              pulumi.StringPtrOutput          `pulumi:"code"`
	CodeS3Location                    pulumi.StringPtrOutput          `pulumi:"codeS3Location"`
	DataSourceName                    pulumi.StringPtrOutput          `pulumi:"dataSourceName"`
	FieldName                         pulumi.StringOutput             `pulumi:"fieldName"`
	Kind                              pulumi.StringPtrOutput          `pulumi:"kind"`
	MaxBatchSize                      pulumi.IntPtrOutput             `pulumi:"maxBatchSize"`
	PipelineConfig                    ResolverPipelineConfigPtrOutput `pulumi:"pipelineConfig"`
	RequestMappingTemplate            pulumi.StringPtrOutput          `pulumi:"requestMappingTemplate"`
	RequestMappingTemplateS3Location  pulumi.StringPtrOutput          `pulumi:"requestMappingTemplateS3Location"`
	ResolverArn                       pulumi.StringOutput             `pulumi:"resolverArn"`
	ResponseMappingTemplate           pulumi.StringPtrOutput          `pulumi:"responseMappingTemplate"`
	ResponseMappingTemplateS3Location pulumi.StringPtrOutput          `pulumi:"responseMappingTemplateS3Location"`
	Runtime                           ResolverAppSyncRuntimePtrOutput `pulumi:"runtime"`
	SyncConfig                        ResolverSyncConfigPtrOutput     `pulumi:"syncConfig"`
	TypeName                          pulumi.StringOutput             `pulumi:"typeName"`
}

// NewResolver registers a new resource with the given unique name, arguments, and options.
func NewResolver(ctx *pulumi.Context,
	name string, args *ResolverArgs, opts ...pulumi.ResourceOption) (*Resolver, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiId == nil {
		return nil, errors.New("invalid value for required argument 'ApiId'")
	}
	if args.FieldName == nil {
		return nil, errors.New("invalid value for required argument 'FieldName'")
	}
	if args.TypeName == nil {
		return nil, errors.New("invalid value for required argument 'TypeName'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"apiId",
		"fieldName",
		"typeName",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Resolver
	err := ctx.RegisterResource("aws-native:appsync:Resolver", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResolver gets an existing Resolver resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResolver(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResolverState, opts ...pulumi.ResourceOption) (*Resolver, error) {
	var resource Resolver
	err := ctx.ReadResource("aws-native:appsync:Resolver", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Resolver resources.
type resolverState struct {
}

type ResolverState struct {
}

func (ResolverState) ElementType() reflect.Type {
	return reflect.TypeOf((*resolverState)(nil)).Elem()
}

type resolverArgs struct {
	ApiId                             string                  `pulumi:"apiId"`
	CachingConfig                     *ResolverCachingConfig  `pulumi:"cachingConfig"`
	Code                              *string                 `pulumi:"code"`
	CodeS3Location                    *string                 `pulumi:"codeS3Location"`
	DataSourceName                    *string                 `pulumi:"dataSourceName"`
	FieldName                         string                  `pulumi:"fieldName"`
	Kind                              *string                 `pulumi:"kind"`
	MaxBatchSize                      *int                    `pulumi:"maxBatchSize"`
	PipelineConfig                    *ResolverPipelineConfig `pulumi:"pipelineConfig"`
	RequestMappingTemplate            *string                 `pulumi:"requestMappingTemplate"`
	RequestMappingTemplateS3Location  *string                 `pulumi:"requestMappingTemplateS3Location"`
	ResponseMappingTemplate           *string                 `pulumi:"responseMappingTemplate"`
	ResponseMappingTemplateS3Location *string                 `pulumi:"responseMappingTemplateS3Location"`
	Runtime                           *ResolverAppSyncRuntime `pulumi:"runtime"`
	SyncConfig                        *ResolverSyncConfig     `pulumi:"syncConfig"`
	TypeName                          string                  `pulumi:"typeName"`
}

// The set of arguments for constructing a Resolver resource.
type ResolverArgs struct {
	ApiId                             pulumi.StringInput
	CachingConfig                     ResolverCachingConfigPtrInput
	Code                              pulumi.StringPtrInput
	CodeS3Location                    pulumi.StringPtrInput
	DataSourceName                    pulumi.StringPtrInput
	FieldName                         pulumi.StringInput
	Kind                              pulumi.StringPtrInput
	MaxBatchSize                      pulumi.IntPtrInput
	PipelineConfig                    ResolverPipelineConfigPtrInput
	RequestMappingTemplate            pulumi.StringPtrInput
	RequestMappingTemplateS3Location  pulumi.StringPtrInput
	ResponseMappingTemplate           pulumi.StringPtrInput
	ResponseMappingTemplateS3Location pulumi.StringPtrInput
	Runtime                           ResolverAppSyncRuntimePtrInput
	SyncConfig                        ResolverSyncConfigPtrInput
	TypeName                          pulumi.StringInput
}

func (ResolverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resolverArgs)(nil)).Elem()
}

type ResolverInput interface {
	pulumi.Input

	ToResolverOutput() ResolverOutput
	ToResolverOutputWithContext(ctx context.Context) ResolverOutput
}

func (*Resolver) ElementType() reflect.Type {
	return reflect.TypeOf((**Resolver)(nil)).Elem()
}

func (i *Resolver) ToResolverOutput() ResolverOutput {
	return i.ToResolverOutputWithContext(context.Background())
}

func (i *Resolver) ToResolverOutputWithContext(ctx context.Context) ResolverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverOutput)
}

func (i *Resolver) ToOutput(ctx context.Context) pulumix.Output[*Resolver] {
	return pulumix.Output[*Resolver]{
		OutputState: i.ToResolverOutputWithContext(ctx).OutputState,
	}
}

type ResolverOutput struct{ *pulumi.OutputState }

func (ResolverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Resolver)(nil)).Elem()
}

func (o ResolverOutput) ToResolverOutput() ResolverOutput {
	return o
}

func (o ResolverOutput) ToResolverOutputWithContext(ctx context.Context) ResolverOutput {
	return o
}

func (o ResolverOutput) ToOutput(ctx context.Context) pulumix.Output[*Resolver] {
	return pulumix.Output[*Resolver]{
		OutputState: o.OutputState,
	}
}

func (o ResolverOutput) ApiId() pulumi.StringOutput {
	return o.ApplyT(func(v *Resolver) pulumi.StringOutput { return v.ApiId }).(pulumi.StringOutput)
}

func (o ResolverOutput) CachingConfig() ResolverCachingConfigPtrOutput {
	return o.ApplyT(func(v *Resolver) ResolverCachingConfigPtrOutput { return v.CachingConfig }).(ResolverCachingConfigPtrOutput)
}

func (o ResolverOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Resolver) pulumi.StringPtrOutput { return v.Code }).(pulumi.StringPtrOutput)
}

func (o ResolverOutput) CodeS3Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Resolver) pulumi.StringPtrOutput { return v.CodeS3Location }).(pulumi.StringPtrOutput)
}

func (o ResolverOutput) DataSourceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Resolver) pulumi.StringPtrOutput { return v.DataSourceName }).(pulumi.StringPtrOutput)
}

func (o ResolverOutput) FieldName() pulumi.StringOutput {
	return o.ApplyT(func(v *Resolver) pulumi.StringOutput { return v.FieldName }).(pulumi.StringOutput)
}

func (o ResolverOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Resolver) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o ResolverOutput) MaxBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Resolver) pulumi.IntPtrOutput { return v.MaxBatchSize }).(pulumi.IntPtrOutput)
}

func (o ResolverOutput) PipelineConfig() ResolverPipelineConfigPtrOutput {
	return o.ApplyT(func(v *Resolver) ResolverPipelineConfigPtrOutput { return v.PipelineConfig }).(ResolverPipelineConfigPtrOutput)
}

func (o ResolverOutput) RequestMappingTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Resolver) pulumi.StringPtrOutput { return v.RequestMappingTemplate }).(pulumi.StringPtrOutput)
}

func (o ResolverOutput) RequestMappingTemplateS3Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Resolver) pulumi.StringPtrOutput { return v.RequestMappingTemplateS3Location }).(pulumi.StringPtrOutput)
}

func (o ResolverOutput) ResolverArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Resolver) pulumi.StringOutput { return v.ResolverArn }).(pulumi.StringOutput)
}

func (o ResolverOutput) ResponseMappingTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Resolver) pulumi.StringPtrOutput { return v.ResponseMappingTemplate }).(pulumi.StringPtrOutput)
}

func (o ResolverOutput) ResponseMappingTemplateS3Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Resolver) pulumi.StringPtrOutput { return v.ResponseMappingTemplateS3Location }).(pulumi.StringPtrOutput)
}

func (o ResolverOutput) Runtime() ResolverAppSyncRuntimePtrOutput {
	return o.ApplyT(func(v *Resolver) ResolverAppSyncRuntimePtrOutput { return v.Runtime }).(ResolverAppSyncRuntimePtrOutput)
}

func (o ResolverOutput) SyncConfig() ResolverSyncConfigPtrOutput {
	return o.ApplyT(func(v *Resolver) ResolverSyncConfigPtrOutput { return v.SyncConfig }).(ResolverSyncConfigPtrOutput)
}

func (o ResolverOutput) TypeName() pulumi.StringOutput {
	return o.ApplyT(func(v *Resolver) pulumi.StringOutput { return v.TypeName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverInput)(nil)).Elem(), &Resolver{})
	pulumi.RegisterOutputType(ResolverOutput{})
}
