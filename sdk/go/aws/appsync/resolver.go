// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appsync

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource Type definition for AWS::AppSync::Resolver
type Resolver struct {
	pulumi.CustomResourceState

	// The AWS AppSync GraphQL API to which you want to attach this resolver.
	ApiId pulumi.StringOutput `pulumi:"apiId"`
	// The caching configuration for the resolver.
	CachingConfig ResolverCachingConfigPtrOutput `pulumi:"cachingConfig"`
	// The resolver code that contains the request and response functions. When code is used, the runtime is required.
	Code pulumi.StringPtrOutput `pulumi:"code"`
	// The Amazon S3 endpoint.
	CodeS3Location pulumi.StringPtrOutput `pulumi:"codeS3Location"`
	// The resolver data source name.
	DataSourceName pulumi.StringPtrOutput `pulumi:"dataSourceName"`
	// The GraphQL field on a type that invokes the resolver.
	FieldName pulumi.StringOutput `pulumi:"fieldName"`
	// The resolver type.
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// The maximum number of resolver request inputs that will be sent to a single AWS Lambda function in a BatchInvoke operation.
	MaxBatchSize pulumi.IntPtrOutput `pulumi:"maxBatchSize"`
	// Functions linked with the pipeline resolver.
	PipelineConfig ResolverPipelineConfigPtrOutput `pulumi:"pipelineConfig"`
	// Request mapping templates are optional when using a Lambda data source. For all other data sources, a request mapping template is required.
	RequestMappingTemplate pulumi.StringPtrOutput `pulumi:"requestMappingTemplate"`
	// The location of a request mapping template in an Amazon S3 bucket. Use this if you want to provision with a template file in Amazon S3 rather than embedding it in your CloudFormation template.
	RequestMappingTemplateS3Location pulumi.StringPtrOutput `pulumi:"requestMappingTemplateS3Location"`
	// The Amazon Resource Name (ARN) for the resolver.
	ResolverArn pulumi.StringOutput `pulumi:"resolverArn"`
	// The response mapping template.
	ResponseMappingTemplate pulumi.StringPtrOutput `pulumi:"responseMappingTemplate"`
	// The location of a response mapping template in an Amazon S3 bucket. Use this if you want to provision with a template file in Amazon S3 rather than embedding it in your CloudFormation template.
	ResponseMappingTemplateS3Location pulumi.StringPtrOutput `pulumi:"responseMappingTemplateS3Location"`
	// Describes a runtime used by an AWS AppSync pipeline resolver or AWS AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified.
	Runtime ResolverAppSyncRuntimePtrOutput `pulumi:"runtime"`
	// The SyncConfig for a resolver attached to a versioned data source.
	SyncConfig ResolverSyncConfigPtrOutput `pulumi:"syncConfig"`
	// The GraphQL type that invokes this resolver.
	TypeName pulumi.StringOutput `pulumi:"typeName"`
}

// NewResolver registers a new resource with the given unique name, arguments, and options.
func NewResolver(ctx *pulumi.Context,
	name string, args *ResolverArgs, opts ...pulumi.ResourceOption) (*Resolver, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiId == nil {
		return nil, errors.New("invalid value for required argument 'ApiId'")
	}
	if args.FieldName == nil {
		return nil, errors.New("invalid value for required argument 'FieldName'")
	}
	if args.TypeName == nil {
		return nil, errors.New("invalid value for required argument 'TypeName'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"apiId",
		"fieldName",
		"typeName",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Resolver
	err := ctx.RegisterResource("aws-native:appsync:Resolver", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResolver gets an existing Resolver resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResolver(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResolverState, opts ...pulumi.ResourceOption) (*Resolver, error) {
	var resource Resolver
	err := ctx.ReadResource("aws-native:appsync:Resolver", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Resolver resources.
type resolverState struct {
}

type ResolverState struct {
}

func (ResolverState) ElementType() reflect.Type {
	return reflect.TypeOf((*resolverState)(nil)).Elem()
}

type resolverArgs struct {
	// The AWS AppSync GraphQL API to which you want to attach this resolver.
	ApiId string `pulumi:"apiId"`
	// The caching configuration for the resolver.
	CachingConfig *ResolverCachingConfig `pulumi:"cachingConfig"`
	// The resolver code that contains the request and response functions. When code is used, the runtime is required.
	Code *string `pulumi:"code"`
	// The Amazon S3 endpoint.
	CodeS3Location *string `pulumi:"codeS3Location"`
	// The resolver data source name.
	DataSourceName *string `pulumi:"dataSourceName"`
	// The GraphQL field on a type that invokes the resolver.
	FieldName string `pulumi:"fieldName"`
	// The resolver type.
	Kind *string `pulumi:"kind"`
	// The maximum number of resolver request inputs that will be sent to a single AWS Lambda function in a BatchInvoke operation.
	MaxBatchSize *int `pulumi:"maxBatchSize"`
	// Functions linked with the pipeline resolver.
	PipelineConfig *ResolverPipelineConfig `pulumi:"pipelineConfig"`
	// Request mapping templates are optional when using a Lambda data source. For all other data sources, a request mapping template is required.
	RequestMappingTemplate *string `pulumi:"requestMappingTemplate"`
	// The location of a request mapping template in an Amazon S3 bucket. Use this if you want to provision with a template file in Amazon S3 rather than embedding it in your CloudFormation template.
	RequestMappingTemplateS3Location *string `pulumi:"requestMappingTemplateS3Location"`
	// The response mapping template.
	ResponseMappingTemplate *string `pulumi:"responseMappingTemplate"`
	// The location of a response mapping template in an Amazon S3 bucket. Use this if you want to provision with a template file in Amazon S3 rather than embedding it in your CloudFormation template.
	ResponseMappingTemplateS3Location *string `pulumi:"responseMappingTemplateS3Location"`
	// Describes a runtime used by an AWS AppSync pipeline resolver or AWS AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified.
	Runtime *ResolverAppSyncRuntime `pulumi:"runtime"`
	// The SyncConfig for a resolver attached to a versioned data source.
	SyncConfig *ResolverSyncConfig `pulumi:"syncConfig"`
	// The GraphQL type that invokes this resolver.
	TypeName string `pulumi:"typeName"`
}

// The set of arguments for constructing a Resolver resource.
type ResolverArgs struct {
	// The AWS AppSync GraphQL API to which you want to attach this resolver.
	ApiId pulumi.StringInput
	// The caching configuration for the resolver.
	CachingConfig ResolverCachingConfigPtrInput
	// The resolver code that contains the request and response functions. When code is used, the runtime is required.
	Code pulumi.StringPtrInput
	// The Amazon S3 endpoint.
	CodeS3Location pulumi.StringPtrInput
	// The resolver data source name.
	DataSourceName pulumi.StringPtrInput
	// The GraphQL field on a type that invokes the resolver.
	FieldName pulumi.StringInput
	// The resolver type.
	Kind pulumi.StringPtrInput
	// The maximum number of resolver request inputs that will be sent to a single AWS Lambda function in a BatchInvoke operation.
	MaxBatchSize pulumi.IntPtrInput
	// Functions linked with the pipeline resolver.
	PipelineConfig ResolverPipelineConfigPtrInput
	// Request mapping templates are optional when using a Lambda data source. For all other data sources, a request mapping template is required.
	RequestMappingTemplate pulumi.StringPtrInput
	// The location of a request mapping template in an Amazon S3 bucket. Use this if you want to provision with a template file in Amazon S3 rather than embedding it in your CloudFormation template.
	RequestMappingTemplateS3Location pulumi.StringPtrInput
	// The response mapping template.
	ResponseMappingTemplate pulumi.StringPtrInput
	// The location of a response mapping template in an Amazon S3 bucket. Use this if you want to provision with a template file in Amazon S3 rather than embedding it in your CloudFormation template.
	ResponseMappingTemplateS3Location pulumi.StringPtrInput
	// Describes a runtime used by an AWS AppSync pipeline resolver or AWS AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified.
	Runtime ResolverAppSyncRuntimePtrInput
	// The SyncConfig for a resolver attached to a versioned data source.
	SyncConfig ResolverSyncConfigPtrInput
	// The GraphQL type that invokes this resolver.
	TypeName pulumi.StringInput
}

func (ResolverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resolverArgs)(nil)).Elem()
}

type ResolverInput interface {
	pulumi.Input

	ToResolverOutput() ResolverOutput
	ToResolverOutputWithContext(ctx context.Context) ResolverOutput
}

func (*Resolver) ElementType() reflect.Type {
	return reflect.TypeOf((**Resolver)(nil)).Elem()
}

func (i *Resolver) ToResolverOutput() ResolverOutput {
	return i.ToResolverOutputWithContext(context.Background())
}

func (i *Resolver) ToResolverOutputWithContext(ctx context.Context) ResolverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverOutput)
}

func (i *Resolver) ToOutput(ctx context.Context) pulumix.Output[*Resolver] {
	return pulumix.Output[*Resolver]{
		OutputState: i.ToResolverOutputWithContext(ctx).OutputState,
	}
}

type ResolverOutput struct{ *pulumi.OutputState }

func (ResolverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Resolver)(nil)).Elem()
}

func (o ResolverOutput) ToResolverOutput() ResolverOutput {
	return o
}

func (o ResolverOutput) ToResolverOutputWithContext(ctx context.Context) ResolverOutput {
	return o
}

func (o ResolverOutput) ToOutput(ctx context.Context) pulumix.Output[*Resolver] {
	return pulumix.Output[*Resolver]{
		OutputState: o.OutputState,
	}
}

// The AWS AppSync GraphQL API to which you want to attach this resolver.
func (o ResolverOutput) ApiId() pulumi.StringOutput {
	return o.ApplyT(func(v *Resolver) pulumi.StringOutput { return v.ApiId }).(pulumi.StringOutput)
}

// The caching configuration for the resolver.
func (o ResolverOutput) CachingConfig() ResolverCachingConfigPtrOutput {
	return o.ApplyT(func(v *Resolver) ResolverCachingConfigPtrOutput { return v.CachingConfig }).(ResolverCachingConfigPtrOutput)
}

// The resolver code that contains the request and response functions. When code is used, the runtime is required.
func (o ResolverOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Resolver) pulumi.StringPtrOutput { return v.Code }).(pulumi.StringPtrOutput)
}

// The Amazon S3 endpoint.
func (o ResolverOutput) CodeS3Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Resolver) pulumi.StringPtrOutput { return v.CodeS3Location }).(pulumi.StringPtrOutput)
}

// The resolver data source name.
func (o ResolverOutput) DataSourceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Resolver) pulumi.StringPtrOutput { return v.DataSourceName }).(pulumi.StringPtrOutput)
}

// The GraphQL field on a type that invokes the resolver.
func (o ResolverOutput) FieldName() pulumi.StringOutput {
	return o.ApplyT(func(v *Resolver) pulumi.StringOutput { return v.FieldName }).(pulumi.StringOutput)
}

// The resolver type.
func (o ResolverOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Resolver) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// The maximum number of resolver request inputs that will be sent to a single AWS Lambda function in a BatchInvoke operation.
func (o ResolverOutput) MaxBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Resolver) pulumi.IntPtrOutput { return v.MaxBatchSize }).(pulumi.IntPtrOutput)
}

// Functions linked with the pipeline resolver.
func (o ResolverOutput) PipelineConfig() ResolverPipelineConfigPtrOutput {
	return o.ApplyT(func(v *Resolver) ResolverPipelineConfigPtrOutput { return v.PipelineConfig }).(ResolverPipelineConfigPtrOutput)
}

// Request mapping templates are optional when using a Lambda data source. For all other data sources, a request mapping template is required.
func (o ResolverOutput) RequestMappingTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Resolver) pulumi.StringPtrOutput { return v.RequestMappingTemplate }).(pulumi.StringPtrOutput)
}

// The location of a request mapping template in an Amazon S3 bucket. Use this if you want to provision with a template file in Amazon S3 rather than embedding it in your CloudFormation template.
func (o ResolverOutput) RequestMappingTemplateS3Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Resolver) pulumi.StringPtrOutput { return v.RequestMappingTemplateS3Location }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) for the resolver.
func (o ResolverOutput) ResolverArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Resolver) pulumi.StringOutput { return v.ResolverArn }).(pulumi.StringOutput)
}

// The response mapping template.
func (o ResolverOutput) ResponseMappingTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Resolver) pulumi.StringPtrOutput { return v.ResponseMappingTemplate }).(pulumi.StringPtrOutput)
}

// The location of a response mapping template in an Amazon S3 bucket. Use this if you want to provision with a template file in Amazon S3 rather than embedding it in your CloudFormation template.
func (o ResolverOutput) ResponseMappingTemplateS3Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Resolver) pulumi.StringPtrOutput { return v.ResponseMappingTemplateS3Location }).(pulumi.StringPtrOutput)
}

// Describes a runtime used by an AWS AppSync pipeline resolver or AWS AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified.
func (o ResolverOutput) Runtime() ResolverAppSyncRuntimePtrOutput {
	return o.ApplyT(func(v *Resolver) ResolverAppSyncRuntimePtrOutput { return v.Runtime }).(ResolverAppSyncRuntimePtrOutput)
}

// The SyncConfig for a resolver attached to a versioned data source.
func (o ResolverOutput) SyncConfig() ResolverSyncConfigPtrOutput {
	return o.ApplyT(func(v *Resolver) ResolverSyncConfigPtrOutput { return v.SyncConfig }).(ResolverSyncConfigPtrOutput)
}

// The GraphQL type that invokes this resolver.
func (o ResolverOutput) TypeName() pulumi.StringOutput {
	return o.ApplyT(func(v *Resolver) pulumi.StringOutput { return v.TypeName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverInput)(nil)).Elem(), &Resolver{})
	pulumi.RegisterOutputType(ResolverOutput{})
}
