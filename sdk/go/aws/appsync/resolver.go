// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package appsync

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::AppSync::Resolver
//
// Deprecated: Resolver is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
type Resolver struct {
	pulumi.CustomResourceState

	ApiId                             pulumi.StringOutput             `pulumi:"apiId"`
	CachingConfig                     ResolverCachingConfigPtrOutput  `pulumi:"cachingConfig"`
	DataSourceName                    pulumi.StringPtrOutput          `pulumi:"dataSourceName"`
	FieldName                         pulumi.StringOutput             `pulumi:"fieldName"`
	Kind                              pulumi.StringPtrOutput          `pulumi:"kind"`
	PipelineConfig                    ResolverPipelineConfigPtrOutput `pulumi:"pipelineConfig"`
	RequestMappingTemplate            pulumi.StringPtrOutput          `pulumi:"requestMappingTemplate"`
	RequestMappingTemplateS3Location  pulumi.StringPtrOutput          `pulumi:"requestMappingTemplateS3Location"`
	ResolverArn                       pulumi.StringOutput             `pulumi:"resolverArn"`
	ResponseMappingTemplate           pulumi.StringPtrOutput          `pulumi:"responseMappingTemplate"`
	ResponseMappingTemplateS3Location pulumi.StringPtrOutput          `pulumi:"responseMappingTemplateS3Location"`
	SyncConfig                        ResolverSyncConfigPtrOutput     `pulumi:"syncConfig"`
	TypeName                          pulumi.StringOutput             `pulumi:"typeName"`
}

// NewResolver registers a new resource with the given unique name, arguments, and options.
func NewResolver(ctx *pulumi.Context,
	name string, args *ResolverArgs, opts ...pulumi.ResourceOption) (*Resolver, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiId == nil {
		return nil, errors.New("invalid value for required argument 'ApiId'")
	}
	if args.FieldName == nil {
		return nil, errors.New("invalid value for required argument 'FieldName'")
	}
	if args.TypeName == nil {
		return nil, errors.New("invalid value for required argument 'TypeName'")
	}
	var resource Resolver
	err := ctx.RegisterResource("aws-native:appsync:Resolver", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResolver gets an existing Resolver resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResolver(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResolverState, opts ...pulumi.ResourceOption) (*Resolver, error) {
	var resource Resolver
	err := ctx.ReadResource("aws-native:appsync:Resolver", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Resolver resources.
type resolverState struct {
}

type ResolverState struct {
}

func (ResolverState) ElementType() reflect.Type {
	return reflect.TypeOf((*resolverState)(nil)).Elem()
}

type resolverArgs struct {
	ApiId                             string                  `pulumi:"apiId"`
	CachingConfig                     *ResolverCachingConfig  `pulumi:"cachingConfig"`
	DataSourceName                    *string                 `pulumi:"dataSourceName"`
	FieldName                         string                  `pulumi:"fieldName"`
	Kind                              *string                 `pulumi:"kind"`
	PipelineConfig                    *ResolverPipelineConfig `pulumi:"pipelineConfig"`
	RequestMappingTemplate            *string                 `pulumi:"requestMappingTemplate"`
	RequestMappingTemplateS3Location  *string                 `pulumi:"requestMappingTemplateS3Location"`
	ResponseMappingTemplate           *string                 `pulumi:"responseMappingTemplate"`
	ResponseMappingTemplateS3Location *string                 `pulumi:"responseMappingTemplateS3Location"`
	SyncConfig                        *ResolverSyncConfig     `pulumi:"syncConfig"`
	TypeName                          string                  `pulumi:"typeName"`
}

// The set of arguments for constructing a Resolver resource.
type ResolverArgs struct {
	ApiId                             pulumi.StringInput
	CachingConfig                     ResolverCachingConfigPtrInput
	DataSourceName                    pulumi.StringPtrInput
	FieldName                         pulumi.StringInput
	Kind                              pulumi.StringPtrInput
	PipelineConfig                    ResolverPipelineConfigPtrInput
	RequestMappingTemplate            pulumi.StringPtrInput
	RequestMappingTemplateS3Location  pulumi.StringPtrInput
	ResponseMappingTemplate           pulumi.StringPtrInput
	ResponseMappingTemplateS3Location pulumi.StringPtrInput
	SyncConfig                        ResolverSyncConfigPtrInput
	TypeName                          pulumi.StringInput
}

func (ResolverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resolverArgs)(nil)).Elem()
}

type ResolverInput interface {
	pulumi.Input

	ToResolverOutput() ResolverOutput
	ToResolverOutputWithContext(ctx context.Context) ResolverOutput
}

func (*Resolver) ElementType() reflect.Type {
	return reflect.TypeOf((*Resolver)(nil))
}

func (i *Resolver) ToResolverOutput() ResolverOutput {
	return i.ToResolverOutputWithContext(context.Background())
}

func (i *Resolver) ToResolverOutputWithContext(ctx context.Context) ResolverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverOutput)
}

type ResolverOutput struct{ *pulumi.OutputState }

func (ResolverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Resolver)(nil))
}

func (o ResolverOutput) ToResolverOutput() ResolverOutput {
	return o
}

func (o ResolverOutput) ToResolverOutputWithContext(ctx context.Context) ResolverOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverInput)(nil)).Elem(), &Resolver{})
	pulumi.RegisterOutputType(ResolverOutput{})
}
