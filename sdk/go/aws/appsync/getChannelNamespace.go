// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appsync

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for AppSync ChannelNamespace
func LookupChannelNamespace(ctx *pulumi.Context, args *LookupChannelNamespaceArgs, opts ...pulumi.InvokeOption) (*LookupChannelNamespaceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupChannelNamespaceResult
	err := ctx.Invoke("aws-native:appsync:getChannelNamespace", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupChannelNamespaceArgs struct {
	ChannelNamespaceArn string `pulumi:"channelNamespaceArn"`
}

type LookupChannelNamespaceResult struct {
	ChannelNamespaceArn *string `pulumi:"channelNamespaceArn"`
	CodeHandlers        *string `pulumi:"codeHandlers"`
	// List of AuthModes supported for Publish operations.
	PublishAuthModes []ChannelNamespaceAuthMode `pulumi:"publishAuthModes"`
	// List of AuthModes supported for Subscribe operations.
	SubscribeAuthModes []ChannelNamespaceAuthMode `pulumi:"subscribeAuthModes"`
	Tags               []aws.Tag                  `pulumi:"tags"`
}

func LookupChannelNamespaceOutput(ctx *pulumi.Context, args LookupChannelNamespaceOutputArgs, opts ...pulumi.InvokeOption) LookupChannelNamespaceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupChannelNamespaceResultOutput, error) {
			args := v.(LookupChannelNamespaceArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupChannelNamespaceResult
			secret, err := ctx.InvokePackageRaw("aws-native:appsync:getChannelNamespace", args, &rv, "", opts...)
			if err != nil {
				return LookupChannelNamespaceResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupChannelNamespaceResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupChannelNamespaceResultOutput), nil
			}
			return output, nil
		}).(LookupChannelNamespaceResultOutput)
}

type LookupChannelNamespaceOutputArgs struct {
	ChannelNamespaceArn pulumi.StringInput `pulumi:"channelNamespaceArn"`
}

func (LookupChannelNamespaceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupChannelNamespaceArgs)(nil)).Elem()
}

type LookupChannelNamespaceResultOutput struct{ *pulumi.OutputState }

func (LookupChannelNamespaceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupChannelNamespaceResult)(nil)).Elem()
}

func (o LookupChannelNamespaceResultOutput) ToLookupChannelNamespaceResultOutput() LookupChannelNamespaceResultOutput {
	return o
}

func (o LookupChannelNamespaceResultOutput) ToLookupChannelNamespaceResultOutputWithContext(ctx context.Context) LookupChannelNamespaceResultOutput {
	return o
}

func (o LookupChannelNamespaceResultOutput) ChannelNamespaceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupChannelNamespaceResult) *string { return v.ChannelNamespaceArn }).(pulumi.StringPtrOutput)
}

func (o LookupChannelNamespaceResultOutput) CodeHandlers() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupChannelNamespaceResult) *string { return v.CodeHandlers }).(pulumi.StringPtrOutput)
}

// List of AuthModes supported for Publish operations.
func (o LookupChannelNamespaceResultOutput) PublishAuthModes() ChannelNamespaceAuthModeArrayOutput {
	return o.ApplyT(func(v LookupChannelNamespaceResult) []ChannelNamespaceAuthMode { return v.PublishAuthModes }).(ChannelNamespaceAuthModeArrayOutput)
}

// List of AuthModes supported for Subscribe operations.
func (o LookupChannelNamespaceResultOutput) SubscribeAuthModes() ChannelNamespaceAuthModeArrayOutput {
	return o.ApplyT(func(v LookupChannelNamespaceResult) []ChannelNamespaceAuthMode { return v.SubscribeAuthModes }).(ChannelNamespaceAuthModeArrayOutput)
}

func (o LookupChannelNamespaceResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupChannelNamespaceResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupChannelNamespaceResultOutput{})
}
