// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The type of AWS DMS Serverless replication to provision using this replication configuration
type ReplicationConfigReplicationType string

const (
	ReplicationConfigReplicationTypeFullLoad       = ReplicationConfigReplicationType("full-load")
	ReplicationConfigReplicationTypeFullLoadAndCdc = ReplicationConfigReplicationType("full-load-and-cdc")
	ReplicationConfigReplicationTypeCdc            = ReplicationConfigReplicationType("cdc")
)

func (ReplicationConfigReplicationType) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationConfigReplicationType)(nil)).Elem()
}

func (e ReplicationConfigReplicationType) ToReplicationConfigReplicationTypeOutput() ReplicationConfigReplicationTypeOutput {
	return pulumi.ToOutput(e).(ReplicationConfigReplicationTypeOutput)
}

func (e ReplicationConfigReplicationType) ToReplicationConfigReplicationTypeOutputWithContext(ctx context.Context) ReplicationConfigReplicationTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ReplicationConfigReplicationTypeOutput)
}

func (e ReplicationConfigReplicationType) ToReplicationConfigReplicationTypePtrOutput() ReplicationConfigReplicationTypePtrOutput {
	return e.ToReplicationConfigReplicationTypePtrOutputWithContext(context.Background())
}

func (e ReplicationConfigReplicationType) ToReplicationConfigReplicationTypePtrOutputWithContext(ctx context.Context) ReplicationConfigReplicationTypePtrOutput {
	return ReplicationConfigReplicationType(e).ToReplicationConfigReplicationTypeOutputWithContext(ctx).ToReplicationConfigReplicationTypePtrOutputWithContext(ctx)
}

func (e ReplicationConfigReplicationType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ReplicationConfigReplicationType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ReplicationConfigReplicationType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ReplicationConfigReplicationType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ReplicationConfigReplicationTypeOutput struct{ *pulumi.OutputState }

func (ReplicationConfigReplicationTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationConfigReplicationType)(nil)).Elem()
}

func (o ReplicationConfigReplicationTypeOutput) ToReplicationConfigReplicationTypeOutput() ReplicationConfigReplicationTypeOutput {
	return o
}

func (o ReplicationConfigReplicationTypeOutput) ToReplicationConfigReplicationTypeOutputWithContext(ctx context.Context) ReplicationConfigReplicationTypeOutput {
	return o
}

func (o ReplicationConfigReplicationTypeOutput) ToReplicationConfigReplicationTypePtrOutput() ReplicationConfigReplicationTypePtrOutput {
	return o.ToReplicationConfigReplicationTypePtrOutputWithContext(context.Background())
}

func (o ReplicationConfigReplicationTypeOutput) ToReplicationConfigReplicationTypePtrOutputWithContext(ctx context.Context) ReplicationConfigReplicationTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReplicationConfigReplicationType) *ReplicationConfigReplicationType {
		return &v
	}).(ReplicationConfigReplicationTypePtrOutput)
}

func (o ReplicationConfigReplicationTypeOutput) ToOutput(ctx context.Context) pulumix.Output[ReplicationConfigReplicationType] {
	return pulumix.Output[ReplicationConfigReplicationType]{
		OutputState: o.OutputState,
	}
}

func (o ReplicationConfigReplicationTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ReplicationConfigReplicationTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ReplicationConfigReplicationType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ReplicationConfigReplicationTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ReplicationConfigReplicationTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ReplicationConfigReplicationType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ReplicationConfigReplicationTypePtrOutput struct{ *pulumi.OutputState }

func (ReplicationConfigReplicationTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicationConfigReplicationType)(nil)).Elem()
}

func (o ReplicationConfigReplicationTypePtrOutput) ToReplicationConfigReplicationTypePtrOutput() ReplicationConfigReplicationTypePtrOutput {
	return o
}

func (o ReplicationConfigReplicationTypePtrOutput) ToReplicationConfigReplicationTypePtrOutputWithContext(ctx context.Context) ReplicationConfigReplicationTypePtrOutput {
	return o
}

func (o ReplicationConfigReplicationTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ReplicationConfigReplicationType] {
	return pulumix.Output[*ReplicationConfigReplicationType]{
		OutputState: o.OutputState,
	}
}

func (o ReplicationConfigReplicationTypePtrOutput) Elem() ReplicationConfigReplicationTypeOutput {
	return o.ApplyT(func(v *ReplicationConfigReplicationType) ReplicationConfigReplicationType {
		if v != nil {
			return *v
		}
		var ret ReplicationConfigReplicationType
		return ret
	}).(ReplicationConfigReplicationTypeOutput)
}

func (o ReplicationConfigReplicationTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ReplicationConfigReplicationTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ReplicationConfigReplicationType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ReplicationConfigReplicationTypeInput is an input type that accepts ReplicationConfigReplicationTypeArgs and ReplicationConfigReplicationTypeOutput values.
// You can construct a concrete instance of `ReplicationConfigReplicationTypeInput` via:
//
//	ReplicationConfigReplicationTypeArgs{...}
type ReplicationConfigReplicationTypeInput interface {
	pulumi.Input

	ToReplicationConfigReplicationTypeOutput() ReplicationConfigReplicationTypeOutput
	ToReplicationConfigReplicationTypeOutputWithContext(context.Context) ReplicationConfigReplicationTypeOutput
}

var replicationConfigReplicationTypePtrType = reflect.TypeOf((**ReplicationConfigReplicationType)(nil)).Elem()

type ReplicationConfigReplicationTypePtrInput interface {
	pulumi.Input

	ToReplicationConfigReplicationTypePtrOutput() ReplicationConfigReplicationTypePtrOutput
	ToReplicationConfigReplicationTypePtrOutputWithContext(context.Context) ReplicationConfigReplicationTypePtrOutput
}

type replicationConfigReplicationTypePtr string

func ReplicationConfigReplicationTypePtr(v string) ReplicationConfigReplicationTypePtrInput {
	return (*replicationConfigReplicationTypePtr)(&v)
}

func (*replicationConfigReplicationTypePtr) ElementType() reflect.Type {
	return replicationConfigReplicationTypePtrType
}

func (in *replicationConfigReplicationTypePtr) ToReplicationConfigReplicationTypePtrOutput() ReplicationConfigReplicationTypePtrOutput {
	return pulumi.ToOutput(in).(ReplicationConfigReplicationTypePtrOutput)
}

func (in *replicationConfigReplicationTypePtr) ToReplicationConfigReplicationTypePtrOutputWithContext(ctx context.Context) ReplicationConfigReplicationTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ReplicationConfigReplicationTypePtrOutput)
}

func (in *replicationConfigReplicationTypePtr) ToOutput(ctx context.Context) pulumix.Output[*ReplicationConfigReplicationType] {
	return pulumix.Output[*ReplicationConfigReplicationType]{
		OutputState: in.ToReplicationConfigReplicationTypePtrOutputWithContext(ctx).OutputState,
	}
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicationConfigReplicationTypeInput)(nil)).Elem(), ReplicationConfigReplicationType("full-load"))
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicationConfigReplicationTypePtrInput)(nil)).Elem(), ReplicationConfigReplicationType("full-load"))
	pulumi.RegisterOutputType(ReplicationConfigReplicationTypeOutput{})
	pulumi.RegisterOutputType(ReplicationConfigReplicationTypePtrOutput{})
}
