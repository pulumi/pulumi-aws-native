// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package refactorspaces

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::RefactorSpaces::Application Resource Type
type Application struct {
	pulumi.CustomResourceState

	ApiGatewayId          pulumi.StringOutput                      `pulumi:"apiGatewayId"`
	ApiGatewayProxy       ApplicationApiGatewayProxyInputPtrOutput `pulumi:"apiGatewayProxy"`
	ApplicationIdentifier pulumi.StringOutput                      `pulumi:"applicationIdentifier"`
	Arn                   pulumi.StringOutput                      `pulumi:"arn"`
	EnvironmentIdentifier pulumi.StringPtrOutput                   `pulumi:"environmentIdentifier"`
	Name                  pulumi.StringPtrOutput                   `pulumi:"name"`
	NlbArn                pulumi.StringOutput                      `pulumi:"nlbArn"`
	NlbName               pulumi.StringOutput                      `pulumi:"nlbName"`
	ProxyType             ApplicationProxyTypePtrOutput            `pulumi:"proxyType"`
	ProxyUrl              pulumi.StringOutput                      `pulumi:"proxyUrl"`
	StageName             pulumi.StringOutput                      `pulumi:"stageName"`
	// Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
	Tags      ApplicationTagArrayOutput `pulumi:"tags"`
	VpcId     pulumi.StringPtrOutput    `pulumi:"vpcId"`
	VpcLinkId pulumi.StringOutput       `pulumi:"vpcLinkId"`
}

// NewApplication registers a new resource with the given unique name, arguments, and options.
func NewApplication(ctx *pulumi.Context,
	name string, args *ApplicationArgs, opts ...pulumi.ResourceOption) (*Application, error) {
	if args == nil {
		args = &ApplicationArgs{}
	}

	var resource Application
	err := ctx.RegisterResource("aws-native:refactorspaces:Application", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplication gets an existing Application resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationState, opts ...pulumi.ResourceOption) (*Application, error) {
	var resource Application
	err := ctx.ReadResource("aws-native:refactorspaces:Application", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Application resources.
type applicationState struct {
}

type ApplicationState struct {
}

func (ApplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationState)(nil)).Elem()
}

type applicationArgs struct {
	ApiGatewayProxy       *ApplicationApiGatewayProxyInput `pulumi:"apiGatewayProxy"`
	EnvironmentIdentifier *string                          `pulumi:"environmentIdentifier"`
	Name                  *string                          `pulumi:"name"`
	ProxyType             *ApplicationProxyType            `pulumi:"proxyType"`
	// Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
	Tags  []ApplicationTag `pulumi:"tags"`
	VpcId *string          `pulumi:"vpcId"`
}

// The set of arguments for constructing a Application resource.
type ApplicationArgs struct {
	ApiGatewayProxy       ApplicationApiGatewayProxyInputPtrInput
	EnvironmentIdentifier pulumi.StringPtrInput
	Name                  pulumi.StringPtrInput
	ProxyType             ApplicationProxyTypePtrInput
	// Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
	Tags  ApplicationTagArrayInput
	VpcId pulumi.StringPtrInput
}

func (ApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationArgs)(nil)).Elem()
}

type ApplicationInput interface {
	pulumi.Input

	ToApplicationOutput() ApplicationOutput
	ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput
}

func (*Application) ElementType() reflect.Type {
	return reflect.TypeOf((*Application)(nil))
}

func (i *Application) ToApplicationOutput() ApplicationOutput {
	return i.ToApplicationOutputWithContext(context.Background())
}

func (i *Application) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOutput)
}

type ApplicationOutput struct{ *pulumi.OutputState }

func (ApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Application)(nil))
}

func (o ApplicationOutput) ToApplicationOutput() ApplicationOutput {
	return o
}

func (o ApplicationOutput) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationInput)(nil)).Elem(), &Application{})
	pulumi.RegisterOutputType(ApplicationOutput{})
}
