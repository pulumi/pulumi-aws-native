// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package refactorspaces

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::RefactorSpaces::Application Resource Type
type Application struct {
	pulumi.CustomResourceState

	// The resource ID of the API Gateway for the proxy.
	ApiGatewayId pulumi.StringOutput `pulumi:"apiGatewayId"`
	// A wrapper object holding the Amazon API Gateway endpoint input.
	ApiGatewayProxy ApplicationApiGatewayProxyInputPtrOutput `pulumi:"apiGatewayProxy"`
	// The unique identifier of the application.
	ApplicationIdentifier pulumi.StringOutput `pulumi:"applicationIdentifier"`
	// The Amazon Resource Name (ARN) of the application.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The unique identifier of the environment.
	EnvironmentIdentifier pulumi.StringOutput `pulumi:"environmentIdentifier"`
	// The name of the application.
	Name pulumi.StringOutput `pulumi:"name"`
	// The Amazon Resource Name (ARN) of the Network Load Balancer .
	NlbArn pulumi.StringOutput `pulumi:"nlbArn"`
	// The name of the Network Load Balancer configured by the API Gateway proxy.
	NlbName pulumi.StringOutput `pulumi:"nlbName"`
	// The proxy type of the proxy created within the application.
	ProxyType ApplicationProxyTypeOutput `pulumi:"proxyType"`
	// The endpoint URL of the Amazon API Gateway proxy.
	ProxyUrl pulumi.StringOutput `pulumi:"proxyUrl"`
	// The name of the API Gateway stage. The name defaults to `prod` .
	StageName pulumi.StringOutput `pulumi:"stageName"`
	// Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
	Tags aws.TagArrayOutput `pulumi:"tags"`
	// The ID of the virtual private cloud (VPC).
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
	// The `VpcLink` ID of the API Gateway proxy.
	VpcLinkId pulumi.StringOutput `pulumi:"vpcLinkId"`
}

// NewApplication registers a new resource with the given unique name, arguments, and options.
func NewApplication(ctx *pulumi.Context,
	name string, args *ApplicationArgs, opts ...pulumi.ResourceOption) (*Application, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnvironmentIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentIdentifier'")
	}
	if args.ProxyType == nil {
		return nil, errors.New("invalid value for required argument 'ProxyType'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"apiGatewayProxy",
		"environmentIdentifier",
		"name",
		"proxyType",
		"vpcId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Application
	err := ctx.RegisterResource("aws-native:refactorspaces:Application", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplication gets an existing Application resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationState, opts ...pulumi.ResourceOption) (*Application, error) {
	var resource Application
	err := ctx.ReadResource("aws-native:refactorspaces:Application", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Application resources.
type applicationState struct {
}

type ApplicationState struct {
}

func (ApplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationState)(nil)).Elem()
}

type applicationArgs struct {
	// A wrapper object holding the Amazon API Gateway endpoint input.
	ApiGatewayProxy *ApplicationApiGatewayProxyInput `pulumi:"apiGatewayProxy"`
	// The unique identifier of the environment.
	EnvironmentIdentifier string `pulumi:"environmentIdentifier"`
	// The name of the application.
	Name *string `pulumi:"name"`
	// The proxy type of the proxy created within the application.
	ProxyType ApplicationProxyType `pulumi:"proxyType"`
	// Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
	Tags []aws.Tag `pulumi:"tags"`
	// The ID of the virtual private cloud (VPC).
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a Application resource.
type ApplicationArgs struct {
	// A wrapper object holding the Amazon API Gateway endpoint input.
	ApiGatewayProxy ApplicationApiGatewayProxyInputPtrInput
	// The unique identifier of the environment.
	EnvironmentIdentifier pulumi.StringInput
	// The name of the application.
	Name pulumi.StringPtrInput
	// The proxy type of the proxy created within the application.
	ProxyType ApplicationProxyTypeInput
	// Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
	Tags aws.TagArrayInput
	// The ID of the virtual private cloud (VPC).
	VpcId pulumi.StringInput
}

func (ApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationArgs)(nil)).Elem()
}

type ApplicationInput interface {
	pulumi.Input

	ToApplicationOutput() ApplicationOutput
	ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput
}

func (*Application) ElementType() reflect.Type {
	return reflect.TypeOf((**Application)(nil)).Elem()
}

func (i *Application) ToApplicationOutput() ApplicationOutput {
	return i.ToApplicationOutputWithContext(context.Background())
}

func (i *Application) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOutput)
}

type ApplicationOutput struct{ *pulumi.OutputState }

func (ApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Application)(nil)).Elem()
}

func (o ApplicationOutput) ToApplicationOutput() ApplicationOutput {
	return o
}

func (o ApplicationOutput) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return o
}

// The resource ID of the API Gateway for the proxy.
func (o ApplicationOutput) ApiGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.ApiGatewayId }).(pulumi.StringOutput)
}

// A wrapper object holding the Amazon API Gateway endpoint input.
func (o ApplicationOutput) ApiGatewayProxy() ApplicationApiGatewayProxyInputPtrOutput {
	return o.ApplyT(func(v *Application) ApplicationApiGatewayProxyInputPtrOutput { return v.ApiGatewayProxy }).(ApplicationApiGatewayProxyInputPtrOutput)
}

// The unique identifier of the application.
func (o ApplicationOutput) ApplicationIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.ApplicationIdentifier }).(pulumi.StringOutput)
}

// The Amazon Resource Name (ARN) of the application.
func (o ApplicationOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The unique identifier of the environment.
func (o ApplicationOutput) EnvironmentIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.EnvironmentIdentifier }).(pulumi.StringOutput)
}

// The name of the application.
func (o ApplicationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Amazon Resource Name (ARN) of the Network Load Balancer .
func (o ApplicationOutput) NlbArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.NlbArn }).(pulumi.StringOutput)
}

// The name of the Network Load Balancer configured by the API Gateway proxy.
func (o ApplicationOutput) NlbName() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.NlbName }).(pulumi.StringOutput)
}

// The proxy type of the proxy created within the application.
func (o ApplicationOutput) ProxyType() ApplicationProxyTypeOutput {
	return o.ApplyT(func(v *Application) ApplicationProxyTypeOutput { return v.ProxyType }).(ApplicationProxyTypeOutput)
}

// The endpoint URL of the Amazon API Gateway proxy.
func (o ApplicationOutput) ProxyUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.ProxyUrl }).(pulumi.StringOutput)
}

// The name of the API Gateway stage. The name defaults to `prod` .
func (o ApplicationOutput) StageName() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.StageName }).(pulumi.StringOutput)
}

// Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
func (o ApplicationOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Application) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

// The ID of the virtual private cloud (VPC).
func (o ApplicationOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

// The `VpcLink` ID of the API Gateway proxy.
func (o ApplicationOutput) VpcLinkId() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.VpcLinkId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationInput)(nil)).Elem(), &Application{})
	pulumi.RegisterOutputType(ApplicationOutput{})
}
