// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package refactorspaces

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ApplicationApiGatewayProxyInput struct {
	// The type of endpoint to use for the API Gateway proxy. If no value is specified in the request, the value is set to `REGIONAL` by default.
	//
	// If the value is set to `PRIVATE` in the request, this creates a private API endpoint that is isolated from the public internet. The private endpoint can only be accessed by using Amazon Virtual Private Cloud (Amazon VPC) interface endpoints for the Amazon API Gateway that has been granted access. For more information about creating a private connection with Refactor Spaces and interface endpoint ( AWS PrivateLink ) availability, see [Access Refactor Spaces using an interface endpoint ( AWS PrivateLink )](https://docs.aws.amazon.com/migrationhub-refactor-spaces/latest/userguide/vpc-interface-endpoints.html) .
	EndpointType *ApplicationApiGatewayEndpointType `pulumi:"endpointType"`
	// The name of the API Gateway stage. The name defaults to `prod` .
	StageName *string `pulumi:"stageName"`
}

// ApplicationApiGatewayProxyInputInput is an input type that accepts ApplicationApiGatewayProxyInputArgs and ApplicationApiGatewayProxyInputOutput values.
// You can construct a concrete instance of `ApplicationApiGatewayProxyInputInput` via:
//
//	ApplicationApiGatewayProxyInputArgs{...}
type ApplicationApiGatewayProxyInputInput interface {
	pulumi.Input

	ToApplicationApiGatewayProxyInputOutput() ApplicationApiGatewayProxyInputOutput
	ToApplicationApiGatewayProxyInputOutputWithContext(context.Context) ApplicationApiGatewayProxyInputOutput
}

type ApplicationApiGatewayProxyInputArgs struct {
	// The type of endpoint to use for the API Gateway proxy. If no value is specified in the request, the value is set to `REGIONAL` by default.
	//
	// If the value is set to `PRIVATE` in the request, this creates a private API endpoint that is isolated from the public internet. The private endpoint can only be accessed by using Amazon Virtual Private Cloud (Amazon VPC) interface endpoints for the Amazon API Gateway that has been granted access. For more information about creating a private connection with Refactor Spaces and interface endpoint ( AWS PrivateLink ) availability, see [Access Refactor Spaces using an interface endpoint ( AWS PrivateLink )](https://docs.aws.amazon.com/migrationhub-refactor-spaces/latest/userguide/vpc-interface-endpoints.html) .
	EndpointType ApplicationApiGatewayEndpointTypePtrInput `pulumi:"endpointType"`
	// The name of the API Gateway stage. The name defaults to `prod` .
	StageName pulumi.StringPtrInput `pulumi:"stageName"`
}

func (ApplicationApiGatewayProxyInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationApiGatewayProxyInput)(nil)).Elem()
}

func (i ApplicationApiGatewayProxyInputArgs) ToApplicationApiGatewayProxyInputOutput() ApplicationApiGatewayProxyInputOutput {
	return i.ToApplicationApiGatewayProxyInputOutputWithContext(context.Background())
}

func (i ApplicationApiGatewayProxyInputArgs) ToApplicationApiGatewayProxyInputOutputWithContext(ctx context.Context) ApplicationApiGatewayProxyInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationApiGatewayProxyInputOutput)
}

func (i ApplicationApiGatewayProxyInputArgs) ToApplicationApiGatewayProxyInputPtrOutput() ApplicationApiGatewayProxyInputPtrOutput {
	return i.ToApplicationApiGatewayProxyInputPtrOutputWithContext(context.Background())
}

func (i ApplicationApiGatewayProxyInputArgs) ToApplicationApiGatewayProxyInputPtrOutputWithContext(ctx context.Context) ApplicationApiGatewayProxyInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationApiGatewayProxyInputOutput).ToApplicationApiGatewayProxyInputPtrOutputWithContext(ctx)
}

// ApplicationApiGatewayProxyInputPtrInput is an input type that accepts ApplicationApiGatewayProxyInputArgs, ApplicationApiGatewayProxyInputPtr and ApplicationApiGatewayProxyInputPtrOutput values.
// You can construct a concrete instance of `ApplicationApiGatewayProxyInputPtrInput` via:
//
//	        ApplicationApiGatewayProxyInputArgs{...}
//
//	or:
//
//	        nil
type ApplicationApiGatewayProxyInputPtrInput interface {
	pulumi.Input

	ToApplicationApiGatewayProxyInputPtrOutput() ApplicationApiGatewayProxyInputPtrOutput
	ToApplicationApiGatewayProxyInputPtrOutputWithContext(context.Context) ApplicationApiGatewayProxyInputPtrOutput
}

type applicationApiGatewayProxyInputPtrType ApplicationApiGatewayProxyInputArgs

func ApplicationApiGatewayProxyInputPtr(v *ApplicationApiGatewayProxyInputArgs) ApplicationApiGatewayProxyInputPtrInput {
	return (*applicationApiGatewayProxyInputPtrType)(v)
}

func (*applicationApiGatewayProxyInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationApiGatewayProxyInput)(nil)).Elem()
}

func (i *applicationApiGatewayProxyInputPtrType) ToApplicationApiGatewayProxyInputPtrOutput() ApplicationApiGatewayProxyInputPtrOutput {
	return i.ToApplicationApiGatewayProxyInputPtrOutputWithContext(context.Background())
}

func (i *applicationApiGatewayProxyInputPtrType) ToApplicationApiGatewayProxyInputPtrOutputWithContext(ctx context.Context) ApplicationApiGatewayProxyInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationApiGatewayProxyInputPtrOutput)
}

type ApplicationApiGatewayProxyInputOutput struct{ *pulumi.OutputState }

func (ApplicationApiGatewayProxyInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationApiGatewayProxyInput)(nil)).Elem()
}

func (o ApplicationApiGatewayProxyInputOutput) ToApplicationApiGatewayProxyInputOutput() ApplicationApiGatewayProxyInputOutput {
	return o
}

func (o ApplicationApiGatewayProxyInputOutput) ToApplicationApiGatewayProxyInputOutputWithContext(ctx context.Context) ApplicationApiGatewayProxyInputOutput {
	return o
}

func (o ApplicationApiGatewayProxyInputOutput) ToApplicationApiGatewayProxyInputPtrOutput() ApplicationApiGatewayProxyInputPtrOutput {
	return o.ToApplicationApiGatewayProxyInputPtrOutputWithContext(context.Background())
}

func (o ApplicationApiGatewayProxyInputOutput) ToApplicationApiGatewayProxyInputPtrOutputWithContext(ctx context.Context) ApplicationApiGatewayProxyInputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationApiGatewayProxyInput) *ApplicationApiGatewayProxyInput {
		return &v
	}).(ApplicationApiGatewayProxyInputPtrOutput)
}

// The type of endpoint to use for the API Gateway proxy. If no value is specified in the request, the value is set to `REGIONAL` by default.
//
// If the value is set to `PRIVATE` in the request, this creates a private API endpoint that is isolated from the public internet. The private endpoint can only be accessed by using Amazon Virtual Private Cloud (Amazon VPC) interface endpoints for the Amazon API Gateway that has been granted access. For more information about creating a private connection with Refactor Spaces and interface endpoint ( AWS PrivateLink ) availability, see [Access Refactor Spaces using an interface endpoint ( AWS PrivateLink )](https://docs.aws.amazon.com/migrationhub-refactor-spaces/latest/userguide/vpc-interface-endpoints.html) .
func (o ApplicationApiGatewayProxyInputOutput) EndpointType() ApplicationApiGatewayEndpointTypePtrOutput {
	return o.ApplyT(func(v ApplicationApiGatewayProxyInput) *ApplicationApiGatewayEndpointType { return v.EndpointType }).(ApplicationApiGatewayEndpointTypePtrOutput)
}

// The name of the API Gateway stage. The name defaults to `prod` .
func (o ApplicationApiGatewayProxyInputOutput) StageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationApiGatewayProxyInput) *string { return v.StageName }).(pulumi.StringPtrOutput)
}

type ApplicationApiGatewayProxyInputPtrOutput struct{ *pulumi.OutputState }

func (ApplicationApiGatewayProxyInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationApiGatewayProxyInput)(nil)).Elem()
}

func (o ApplicationApiGatewayProxyInputPtrOutput) ToApplicationApiGatewayProxyInputPtrOutput() ApplicationApiGatewayProxyInputPtrOutput {
	return o
}

func (o ApplicationApiGatewayProxyInputPtrOutput) ToApplicationApiGatewayProxyInputPtrOutputWithContext(ctx context.Context) ApplicationApiGatewayProxyInputPtrOutput {
	return o
}

func (o ApplicationApiGatewayProxyInputPtrOutput) Elem() ApplicationApiGatewayProxyInputOutput {
	return o.ApplyT(func(v *ApplicationApiGatewayProxyInput) ApplicationApiGatewayProxyInput {
		if v != nil {
			return *v
		}
		var ret ApplicationApiGatewayProxyInput
		return ret
	}).(ApplicationApiGatewayProxyInputOutput)
}

// The type of endpoint to use for the API Gateway proxy. If no value is specified in the request, the value is set to `REGIONAL` by default.
//
// If the value is set to `PRIVATE` in the request, this creates a private API endpoint that is isolated from the public internet. The private endpoint can only be accessed by using Amazon Virtual Private Cloud (Amazon VPC) interface endpoints for the Amazon API Gateway that has been granted access. For more information about creating a private connection with Refactor Spaces and interface endpoint ( AWS PrivateLink ) availability, see [Access Refactor Spaces using an interface endpoint ( AWS PrivateLink )](https://docs.aws.amazon.com/migrationhub-refactor-spaces/latest/userguide/vpc-interface-endpoints.html) .
func (o ApplicationApiGatewayProxyInputPtrOutput) EndpointType() ApplicationApiGatewayEndpointTypePtrOutput {
	return o.ApplyT(func(v *ApplicationApiGatewayProxyInput) *ApplicationApiGatewayEndpointType {
		if v == nil {
			return nil
		}
		return v.EndpointType
	}).(ApplicationApiGatewayEndpointTypePtrOutput)
}

// The name of the API Gateway stage. The name defaults to `prod` .
func (o ApplicationApiGatewayProxyInputPtrOutput) StageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationApiGatewayProxyInput) *string {
		if v == nil {
			return nil
		}
		return v.StageName
	}).(pulumi.StringPtrOutput)
}

// A label for tagging Environment resource
type ApplicationTag struct {
	// A string used to identify this tag
	Key string `pulumi:"key"`
	// A string containing the value for the tag
	Value string `pulumi:"value"`
}

// A label for tagging Environment resource
type EnvironmentTag struct {
	// A string used to identify this tag
	Key string `pulumi:"key"`
	// A string containing the value for the tag
	Value string `pulumi:"value"`
}

type RouteDefaultRouteInput struct {
	// If set to `ACTIVE` , traffic is forwarded to this route’s service after the route is created.
	ActivationState RouteActivationState `pulumi:"activationState"`
}

// RouteDefaultRouteInputInput is an input type that accepts RouteDefaultRouteInputArgs and RouteDefaultRouteInputOutput values.
// You can construct a concrete instance of `RouteDefaultRouteInputInput` via:
//
//	RouteDefaultRouteInputArgs{...}
type RouteDefaultRouteInputInput interface {
	pulumi.Input

	ToRouteDefaultRouteInputOutput() RouteDefaultRouteInputOutput
	ToRouteDefaultRouteInputOutputWithContext(context.Context) RouteDefaultRouteInputOutput
}

type RouteDefaultRouteInputArgs struct {
	// If set to `ACTIVE` , traffic is forwarded to this route’s service after the route is created.
	ActivationState RouteActivationStateInput `pulumi:"activationState"`
}

func (RouteDefaultRouteInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteDefaultRouteInput)(nil)).Elem()
}

func (i RouteDefaultRouteInputArgs) ToRouteDefaultRouteInputOutput() RouteDefaultRouteInputOutput {
	return i.ToRouteDefaultRouteInputOutputWithContext(context.Background())
}

func (i RouteDefaultRouteInputArgs) ToRouteDefaultRouteInputOutputWithContext(ctx context.Context) RouteDefaultRouteInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteDefaultRouteInputOutput)
}

func (i RouteDefaultRouteInputArgs) ToRouteDefaultRouteInputPtrOutput() RouteDefaultRouteInputPtrOutput {
	return i.ToRouteDefaultRouteInputPtrOutputWithContext(context.Background())
}

func (i RouteDefaultRouteInputArgs) ToRouteDefaultRouteInputPtrOutputWithContext(ctx context.Context) RouteDefaultRouteInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteDefaultRouteInputOutput).ToRouteDefaultRouteInputPtrOutputWithContext(ctx)
}

// RouteDefaultRouteInputPtrInput is an input type that accepts RouteDefaultRouteInputArgs, RouteDefaultRouteInputPtr and RouteDefaultRouteInputPtrOutput values.
// You can construct a concrete instance of `RouteDefaultRouteInputPtrInput` via:
//
//	        RouteDefaultRouteInputArgs{...}
//
//	or:
//
//	        nil
type RouteDefaultRouteInputPtrInput interface {
	pulumi.Input

	ToRouteDefaultRouteInputPtrOutput() RouteDefaultRouteInputPtrOutput
	ToRouteDefaultRouteInputPtrOutputWithContext(context.Context) RouteDefaultRouteInputPtrOutput
}

type routeDefaultRouteInputPtrType RouteDefaultRouteInputArgs

func RouteDefaultRouteInputPtr(v *RouteDefaultRouteInputArgs) RouteDefaultRouteInputPtrInput {
	return (*routeDefaultRouteInputPtrType)(v)
}

func (*routeDefaultRouteInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteDefaultRouteInput)(nil)).Elem()
}

func (i *routeDefaultRouteInputPtrType) ToRouteDefaultRouteInputPtrOutput() RouteDefaultRouteInputPtrOutput {
	return i.ToRouteDefaultRouteInputPtrOutputWithContext(context.Background())
}

func (i *routeDefaultRouteInputPtrType) ToRouteDefaultRouteInputPtrOutputWithContext(ctx context.Context) RouteDefaultRouteInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteDefaultRouteInputPtrOutput)
}

type RouteDefaultRouteInputOutput struct{ *pulumi.OutputState }

func (RouteDefaultRouteInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteDefaultRouteInput)(nil)).Elem()
}

func (o RouteDefaultRouteInputOutput) ToRouteDefaultRouteInputOutput() RouteDefaultRouteInputOutput {
	return o
}

func (o RouteDefaultRouteInputOutput) ToRouteDefaultRouteInputOutputWithContext(ctx context.Context) RouteDefaultRouteInputOutput {
	return o
}

func (o RouteDefaultRouteInputOutput) ToRouteDefaultRouteInputPtrOutput() RouteDefaultRouteInputPtrOutput {
	return o.ToRouteDefaultRouteInputPtrOutputWithContext(context.Background())
}

func (o RouteDefaultRouteInputOutput) ToRouteDefaultRouteInputPtrOutputWithContext(ctx context.Context) RouteDefaultRouteInputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RouteDefaultRouteInput) *RouteDefaultRouteInput {
		return &v
	}).(RouteDefaultRouteInputPtrOutput)
}

// If set to `ACTIVE` , traffic is forwarded to this route’s service after the route is created.
func (o RouteDefaultRouteInputOutput) ActivationState() RouteActivationStateOutput {
	return o.ApplyT(func(v RouteDefaultRouteInput) RouteActivationState { return v.ActivationState }).(RouteActivationStateOutput)
}

type RouteDefaultRouteInputPtrOutput struct{ *pulumi.OutputState }

func (RouteDefaultRouteInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteDefaultRouteInput)(nil)).Elem()
}

func (o RouteDefaultRouteInputPtrOutput) ToRouteDefaultRouteInputPtrOutput() RouteDefaultRouteInputPtrOutput {
	return o
}

func (o RouteDefaultRouteInputPtrOutput) ToRouteDefaultRouteInputPtrOutputWithContext(ctx context.Context) RouteDefaultRouteInputPtrOutput {
	return o
}

func (o RouteDefaultRouteInputPtrOutput) Elem() RouteDefaultRouteInputOutput {
	return o.ApplyT(func(v *RouteDefaultRouteInput) RouteDefaultRouteInput {
		if v != nil {
			return *v
		}
		var ret RouteDefaultRouteInput
		return ret
	}).(RouteDefaultRouteInputOutput)
}

// If set to `ACTIVE` , traffic is forwarded to this route’s service after the route is created.
func (o RouteDefaultRouteInputPtrOutput) ActivationState() RouteActivationStatePtrOutput {
	return o.ApplyT(func(v *RouteDefaultRouteInput) *RouteActivationState {
		if v == nil {
			return nil
		}
		return &v.ActivationState
	}).(RouteActivationStatePtrOutput)
}

// A label for tagging Environment resource
type RouteTag struct {
	// A string used to identify this tag
	Key string `pulumi:"key"`
	// A string containing the value for the tag
	Value string `pulumi:"value"`
}

type RouteUriPathRouteInput struct {
	// If set to `ACTIVE` , traffic is forwarded to this route’s service after the route is created.
	ActivationState RouteActivationState `pulumi:"activationState"`
	// If set to `true` , this option appends the source path to the service URL endpoint.
	AppendSourcePath *bool `pulumi:"appendSourcePath"`
	// Indicates whether to match all subpaths of the given source path. If this value is `false` , requests must match the source path exactly before they are forwarded to this route's service.
	IncludeChildPaths *bool `pulumi:"includeChildPaths"`
	// A list of HTTP methods to match. An empty list matches all values. If a method is present, only HTTP requests using that method are forwarded to this route’s service.
	Methods []RouteMethod `pulumi:"methods"`
	// This is the path that Refactor Spaces uses to match traffic. Paths must start with `/` and are relative to the base of the application. To use path parameters in the source path, add a variable in curly braces. For example, the resource path {user} represents a path parameter called 'user'.
	SourcePath *string `pulumi:"sourcePath"`
}

// RouteUriPathRouteInputInput is an input type that accepts RouteUriPathRouteInputArgs and RouteUriPathRouteInputOutput values.
// You can construct a concrete instance of `RouteUriPathRouteInputInput` via:
//
//	RouteUriPathRouteInputArgs{...}
type RouteUriPathRouteInputInput interface {
	pulumi.Input

	ToRouteUriPathRouteInputOutput() RouteUriPathRouteInputOutput
	ToRouteUriPathRouteInputOutputWithContext(context.Context) RouteUriPathRouteInputOutput
}

type RouteUriPathRouteInputArgs struct {
	// If set to `ACTIVE` , traffic is forwarded to this route’s service after the route is created.
	ActivationState RouteActivationStateInput `pulumi:"activationState"`
	// If set to `true` , this option appends the source path to the service URL endpoint.
	AppendSourcePath pulumi.BoolPtrInput `pulumi:"appendSourcePath"`
	// Indicates whether to match all subpaths of the given source path. If this value is `false` , requests must match the source path exactly before they are forwarded to this route's service.
	IncludeChildPaths pulumi.BoolPtrInput `pulumi:"includeChildPaths"`
	// A list of HTTP methods to match. An empty list matches all values. If a method is present, only HTTP requests using that method are forwarded to this route’s service.
	Methods RouteMethodArrayInput `pulumi:"methods"`
	// This is the path that Refactor Spaces uses to match traffic. Paths must start with `/` and are relative to the base of the application. To use path parameters in the source path, add a variable in curly braces. For example, the resource path {user} represents a path parameter called 'user'.
	SourcePath pulumi.StringPtrInput `pulumi:"sourcePath"`
}

func (RouteUriPathRouteInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteUriPathRouteInput)(nil)).Elem()
}

func (i RouteUriPathRouteInputArgs) ToRouteUriPathRouteInputOutput() RouteUriPathRouteInputOutput {
	return i.ToRouteUriPathRouteInputOutputWithContext(context.Background())
}

func (i RouteUriPathRouteInputArgs) ToRouteUriPathRouteInputOutputWithContext(ctx context.Context) RouteUriPathRouteInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteUriPathRouteInputOutput)
}

func (i RouteUriPathRouteInputArgs) ToRouteUriPathRouteInputPtrOutput() RouteUriPathRouteInputPtrOutput {
	return i.ToRouteUriPathRouteInputPtrOutputWithContext(context.Background())
}

func (i RouteUriPathRouteInputArgs) ToRouteUriPathRouteInputPtrOutputWithContext(ctx context.Context) RouteUriPathRouteInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteUriPathRouteInputOutput).ToRouteUriPathRouteInputPtrOutputWithContext(ctx)
}

// RouteUriPathRouteInputPtrInput is an input type that accepts RouteUriPathRouteInputArgs, RouteUriPathRouteInputPtr and RouteUriPathRouteInputPtrOutput values.
// You can construct a concrete instance of `RouteUriPathRouteInputPtrInput` via:
//
//	        RouteUriPathRouteInputArgs{...}
//
//	or:
//
//	        nil
type RouteUriPathRouteInputPtrInput interface {
	pulumi.Input

	ToRouteUriPathRouteInputPtrOutput() RouteUriPathRouteInputPtrOutput
	ToRouteUriPathRouteInputPtrOutputWithContext(context.Context) RouteUriPathRouteInputPtrOutput
}

type routeUriPathRouteInputPtrType RouteUriPathRouteInputArgs

func RouteUriPathRouteInputPtr(v *RouteUriPathRouteInputArgs) RouteUriPathRouteInputPtrInput {
	return (*routeUriPathRouteInputPtrType)(v)
}

func (*routeUriPathRouteInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteUriPathRouteInput)(nil)).Elem()
}

func (i *routeUriPathRouteInputPtrType) ToRouteUriPathRouteInputPtrOutput() RouteUriPathRouteInputPtrOutput {
	return i.ToRouteUriPathRouteInputPtrOutputWithContext(context.Background())
}

func (i *routeUriPathRouteInputPtrType) ToRouteUriPathRouteInputPtrOutputWithContext(ctx context.Context) RouteUriPathRouteInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteUriPathRouteInputPtrOutput)
}

type RouteUriPathRouteInputOutput struct{ *pulumi.OutputState }

func (RouteUriPathRouteInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteUriPathRouteInput)(nil)).Elem()
}

func (o RouteUriPathRouteInputOutput) ToRouteUriPathRouteInputOutput() RouteUriPathRouteInputOutput {
	return o
}

func (o RouteUriPathRouteInputOutput) ToRouteUriPathRouteInputOutputWithContext(ctx context.Context) RouteUriPathRouteInputOutput {
	return o
}

func (o RouteUriPathRouteInputOutput) ToRouteUriPathRouteInputPtrOutput() RouteUriPathRouteInputPtrOutput {
	return o.ToRouteUriPathRouteInputPtrOutputWithContext(context.Background())
}

func (o RouteUriPathRouteInputOutput) ToRouteUriPathRouteInputPtrOutputWithContext(ctx context.Context) RouteUriPathRouteInputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RouteUriPathRouteInput) *RouteUriPathRouteInput {
		return &v
	}).(RouteUriPathRouteInputPtrOutput)
}

// If set to `ACTIVE` , traffic is forwarded to this route’s service after the route is created.
func (o RouteUriPathRouteInputOutput) ActivationState() RouteActivationStateOutput {
	return o.ApplyT(func(v RouteUriPathRouteInput) RouteActivationState { return v.ActivationState }).(RouteActivationStateOutput)
}

// If set to `true` , this option appends the source path to the service URL endpoint.
func (o RouteUriPathRouteInputOutput) AppendSourcePath() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RouteUriPathRouteInput) *bool { return v.AppendSourcePath }).(pulumi.BoolPtrOutput)
}

// Indicates whether to match all subpaths of the given source path. If this value is `false` , requests must match the source path exactly before they are forwarded to this route's service.
func (o RouteUriPathRouteInputOutput) IncludeChildPaths() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RouteUriPathRouteInput) *bool { return v.IncludeChildPaths }).(pulumi.BoolPtrOutput)
}

// A list of HTTP methods to match. An empty list matches all values. If a method is present, only HTTP requests using that method are forwarded to this route’s service.
func (o RouteUriPathRouteInputOutput) Methods() RouteMethodArrayOutput {
	return o.ApplyT(func(v RouteUriPathRouteInput) []RouteMethod { return v.Methods }).(RouteMethodArrayOutput)
}

// This is the path that Refactor Spaces uses to match traffic. Paths must start with `/` and are relative to the base of the application. To use path parameters in the source path, add a variable in curly braces. For example, the resource path {user} represents a path parameter called 'user'.
func (o RouteUriPathRouteInputOutput) SourcePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteUriPathRouteInput) *string { return v.SourcePath }).(pulumi.StringPtrOutput)
}

type RouteUriPathRouteInputPtrOutput struct{ *pulumi.OutputState }

func (RouteUriPathRouteInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteUriPathRouteInput)(nil)).Elem()
}

func (o RouteUriPathRouteInputPtrOutput) ToRouteUriPathRouteInputPtrOutput() RouteUriPathRouteInputPtrOutput {
	return o
}

func (o RouteUriPathRouteInputPtrOutput) ToRouteUriPathRouteInputPtrOutputWithContext(ctx context.Context) RouteUriPathRouteInputPtrOutput {
	return o
}

func (o RouteUriPathRouteInputPtrOutput) Elem() RouteUriPathRouteInputOutput {
	return o.ApplyT(func(v *RouteUriPathRouteInput) RouteUriPathRouteInput {
		if v != nil {
			return *v
		}
		var ret RouteUriPathRouteInput
		return ret
	}).(RouteUriPathRouteInputOutput)
}

// If set to `ACTIVE` , traffic is forwarded to this route’s service after the route is created.
func (o RouteUriPathRouteInputPtrOutput) ActivationState() RouteActivationStatePtrOutput {
	return o.ApplyT(func(v *RouteUriPathRouteInput) *RouteActivationState {
		if v == nil {
			return nil
		}
		return &v.ActivationState
	}).(RouteActivationStatePtrOutput)
}

// If set to `true` , this option appends the source path to the service URL endpoint.
func (o RouteUriPathRouteInputPtrOutput) AppendSourcePath() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RouteUriPathRouteInput) *bool {
		if v == nil {
			return nil
		}
		return v.AppendSourcePath
	}).(pulumi.BoolPtrOutput)
}

// Indicates whether to match all subpaths of the given source path. If this value is `false` , requests must match the source path exactly before they are forwarded to this route's service.
func (o RouteUriPathRouteInputPtrOutput) IncludeChildPaths() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RouteUriPathRouteInput) *bool {
		if v == nil {
			return nil
		}
		return v.IncludeChildPaths
	}).(pulumi.BoolPtrOutput)
}

// A list of HTTP methods to match. An empty list matches all values. If a method is present, only HTTP requests using that method are forwarded to this route’s service.
func (o RouteUriPathRouteInputPtrOutput) Methods() RouteMethodArrayOutput {
	return o.ApplyT(func(v *RouteUriPathRouteInput) []RouteMethod {
		if v == nil {
			return nil
		}
		return v.Methods
	}).(RouteMethodArrayOutput)
}

// This is the path that Refactor Spaces uses to match traffic. Paths must start with `/` and are relative to the base of the application. To use path parameters in the source path, add a variable in curly braces. For example, the resource path {user} represents a path parameter called 'user'.
func (o RouteUriPathRouteInputPtrOutput) SourcePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouteUriPathRouteInput) *string {
		if v == nil {
			return nil
		}
		return v.SourcePath
	}).(pulumi.StringPtrOutput)
}

type ServiceLambdaEndpointInput struct {
	// The Amazon Resource Name (ARN) of the Lambda function or alias.
	Arn string `pulumi:"arn"`
}

// ServiceLambdaEndpointInputInput is an input type that accepts ServiceLambdaEndpointInputArgs and ServiceLambdaEndpointInputOutput values.
// You can construct a concrete instance of `ServiceLambdaEndpointInputInput` via:
//
//	ServiceLambdaEndpointInputArgs{...}
type ServiceLambdaEndpointInputInput interface {
	pulumi.Input

	ToServiceLambdaEndpointInputOutput() ServiceLambdaEndpointInputOutput
	ToServiceLambdaEndpointInputOutputWithContext(context.Context) ServiceLambdaEndpointInputOutput
}

type ServiceLambdaEndpointInputArgs struct {
	// The Amazon Resource Name (ARN) of the Lambda function or alias.
	Arn pulumi.StringInput `pulumi:"arn"`
}

func (ServiceLambdaEndpointInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLambdaEndpointInput)(nil)).Elem()
}

func (i ServiceLambdaEndpointInputArgs) ToServiceLambdaEndpointInputOutput() ServiceLambdaEndpointInputOutput {
	return i.ToServiceLambdaEndpointInputOutputWithContext(context.Background())
}

func (i ServiceLambdaEndpointInputArgs) ToServiceLambdaEndpointInputOutputWithContext(ctx context.Context) ServiceLambdaEndpointInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLambdaEndpointInputOutput)
}

func (i ServiceLambdaEndpointInputArgs) ToServiceLambdaEndpointInputPtrOutput() ServiceLambdaEndpointInputPtrOutput {
	return i.ToServiceLambdaEndpointInputPtrOutputWithContext(context.Background())
}

func (i ServiceLambdaEndpointInputArgs) ToServiceLambdaEndpointInputPtrOutputWithContext(ctx context.Context) ServiceLambdaEndpointInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLambdaEndpointInputOutput).ToServiceLambdaEndpointInputPtrOutputWithContext(ctx)
}

// ServiceLambdaEndpointInputPtrInput is an input type that accepts ServiceLambdaEndpointInputArgs, ServiceLambdaEndpointInputPtr and ServiceLambdaEndpointInputPtrOutput values.
// You can construct a concrete instance of `ServiceLambdaEndpointInputPtrInput` via:
//
//	        ServiceLambdaEndpointInputArgs{...}
//
//	or:
//
//	        nil
type ServiceLambdaEndpointInputPtrInput interface {
	pulumi.Input

	ToServiceLambdaEndpointInputPtrOutput() ServiceLambdaEndpointInputPtrOutput
	ToServiceLambdaEndpointInputPtrOutputWithContext(context.Context) ServiceLambdaEndpointInputPtrOutput
}

type serviceLambdaEndpointInputPtrType ServiceLambdaEndpointInputArgs

func ServiceLambdaEndpointInputPtr(v *ServiceLambdaEndpointInputArgs) ServiceLambdaEndpointInputPtrInput {
	return (*serviceLambdaEndpointInputPtrType)(v)
}

func (*serviceLambdaEndpointInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLambdaEndpointInput)(nil)).Elem()
}

func (i *serviceLambdaEndpointInputPtrType) ToServiceLambdaEndpointInputPtrOutput() ServiceLambdaEndpointInputPtrOutput {
	return i.ToServiceLambdaEndpointInputPtrOutputWithContext(context.Background())
}

func (i *serviceLambdaEndpointInputPtrType) ToServiceLambdaEndpointInputPtrOutputWithContext(ctx context.Context) ServiceLambdaEndpointInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLambdaEndpointInputPtrOutput)
}

type ServiceLambdaEndpointInputOutput struct{ *pulumi.OutputState }

func (ServiceLambdaEndpointInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLambdaEndpointInput)(nil)).Elem()
}

func (o ServiceLambdaEndpointInputOutput) ToServiceLambdaEndpointInputOutput() ServiceLambdaEndpointInputOutput {
	return o
}

func (o ServiceLambdaEndpointInputOutput) ToServiceLambdaEndpointInputOutputWithContext(ctx context.Context) ServiceLambdaEndpointInputOutput {
	return o
}

func (o ServiceLambdaEndpointInputOutput) ToServiceLambdaEndpointInputPtrOutput() ServiceLambdaEndpointInputPtrOutput {
	return o.ToServiceLambdaEndpointInputPtrOutputWithContext(context.Background())
}

func (o ServiceLambdaEndpointInputOutput) ToServiceLambdaEndpointInputPtrOutputWithContext(ctx context.Context) ServiceLambdaEndpointInputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceLambdaEndpointInput) *ServiceLambdaEndpointInput {
		return &v
	}).(ServiceLambdaEndpointInputPtrOutput)
}

// The Amazon Resource Name (ARN) of the Lambda function or alias.
func (o ServiceLambdaEndpointInputOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceLambdaEndpointInput) string { return v.Arn }).(pulumi.StringOutput)
}

type ServiceLambdaEndpointInputPtrOutput struct{ *pulumi.OutputState }

func (ServiceLambdaEndpointInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLambdaEndpointInput)(nil)).Elem()
}

func (o ServiceLambdaEndpointInputPtrOutput) ToServiceLambdaEndpointInputPtrOutput() ServiceLambdaEndpointInputPtrOutput {
	return o
}

func (o ServiceLambdaEndpointInputPtrOutput) ToServiceLambdaEndpointInputPtrOutputWithContext(ctx context.Context) ServiceLambdaEndpointInputPtrOutput {
	return o
}

func (o ServiceLambdaEndpointInputPtrOutput) Elem() ServiceLambdaEndpointInputOutput {
	return o.ApplyT(func(v *ServiceLambdaEndpointInput) ServiceLambdaEndpointInput {
		if v != nil {
			return *v
		}
		var ret ServiceLambdaEndpointInput
		return ret
	}).(ServiceLambdaEndpointInputOutput)
}

// The Amazon Resource Name (ARN) of the Lambda function or alias.
func (o ServiceLambdaEndpointInputPtrOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceLambdaEndpointInput) *string {
		if v == nil {
			return nil
		}
		return &v.Arn
	}).(pulumi.StringPtrOutput)
}

// A label for tagging Environment resource
type ServiceTag struct {
	// A string used to identify this tag
	Key string `pulumi:"key"`
	// A string containing the value for the tag
	Value string `pulumi:"value"`
}

type ServiceUrlEndpointInput struct {
	// The health check URL of the URL endpoint type. If the URL is a public endpoint, the `HealthUrl` must also be a public endpoint. If the URL is a private endpoint inside a virtual private cloud (VPC), the health URL must also be a private endpoint, and the host must be the same as the URL.
	HealthUrl *string `pulumi:"healthUrl"`
	// The URL to route traffic to. The URL must be an [rfc3986-formatted URL](https://docs.aws.amazon.com/https://datatracker.ietf.org/doc/html/rfc3986) . If the host is a domain name, the name must be resolvable over the public internet. If the scheme is `https` , the top level domain of the host must be listed in the [IANA root zone database](https://docs.aws.amazon.com/https://www.iana.org/domains/root/db) .
	Url string `pulumi:"url"`
}

// ServiceUrlEndpointInputInput is an input type that accepts ServiceUrlEndpointInputArgs and ServiceUrlEndpointInputOutput values.
// You can construct a concrete instance of `ServiceUrlEndpointInputInput` via:
//
//	ServiceUrlEndpointInputArgs{...}
type ServiceUrlEndpointInputInput interface {
	pulumi.Input

	ToServiceUrlEndpointInputOutput() ServiceUrlEndpointInputOutput
	ToServiceUrlEndpointInputOutputWithContext(context.Context) ServiceUrlEndpointInputOutput
}

type ServiceUrlEndpointInputArgs struct {
	// The health check URL of the URL endpoint type. If the URL is a public endpoint, the `HealthUrl` must also be a public endpoint. If the URL is a private endpoint inside a virtual private cloud (VPC), the health URL must also be a private endpoint, and the host must be the same as the URL.
	HealthUrl pulumi.StringPtrInput `pulumi:"healthUrl"`
	// The URL to route traffic to. The URL must be an [rfc3986-formatted URL](https://docs.aws.amazon.com/https://datatracker.ietf.org/doc/html/rfc3986) . If the host is a domain name, the name must be resolvable over the public internet. If the scheme is `https` , the top level domain of the host must be listed in the [IANA root zone database](https://docs.aws.amazon.com/https://www.iana.org/domains/root/db) .
	Url pulumi.StringInput `pulumi:"url"`
}

func (ServiceUrlEndpointInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceUrlEndpointInput)(nil)).Elem()
}

func (i ServiceUrlEndpointInputArgs) ToServiceUrlEndpointInputOutput() ServiceUrlEndpointInputOutput {
	return i.ToServiceUrlEndpointInputOutputWithContext(context.Background())
}

func (i ServiceUrlEndpointInputArgs) ToServiceUrlEndpointInputOutputWithContext(ctx context.Context) ServiceUrlEndpointInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceUrlEndpointInputOutput)
}

func (i ServiceUrlEndpointInputArgs) ToServiceUrlEndpointInputPtrOutput() ServiceUrlEndpointInputPtrOutput {
	return i.ToServiceUrlEndpointInputPtrOutputWithContext(context.Background())
}

func (i ServiceUrlEndpointInputArgs) ToServiceUrlEndpointInputPtrOutputWithContext(ctx context.Context) ServiceUrlEndpointInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceUrlEndpointInputOutput).ToServiceUrlEndpointInputPtrOutputWithContext(ctx)
}

// ServiceUrlEndpointInputPtrInput is an input type that accepts ServiceUrlEndpointInputArgs, ServiceUrlEndpointInputPtr and ServiceUrlEndpointInputPtrOutput values.
// You can construct a concrete instance of `ServiceUrlEndpointInputPtrInput` via:
//
//	        ServiceUrlEndpointInputArgs{...}
//
//	or:
//
//	        nil
type ServiceUrlEndpointInputPtrInput interface {
	pulumi.Input

	ToServiceUrlEndpointInputPtrOutput() ServiceUrlEndpointInputPtrOutput
	ToServiceUrlEndpointInputPtrOutputWithContext(context.Context) ServiceUrlEndpointInputPtrOutput
}

type serviceUrlEndpointInputPtrType ServiceUrlEndpointInputArgs

func ServiceUrlEndpointInputPtr(v *ServiceUrlEndpointInputArgs) ServiceUrlEndpointInputPtrInput {
	return (*serviceUrlEndpointInputPtrType)(v)
}

func (*serviceUrlEndpointInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceUrlEndpointInput)(nil)).Elem()
}

func (i *serviceUrlEndpointInputPtrType) ToServiceUrlEndpointInputPtrOutput() ServiceUrlEndpointInputPtrOutput {
	return i.ToServiceUrlEndpointInputPtrOutputWithContext(context.Background())
}

func (i *serviceUrlEndpointInputPtrType) ToServiceUrlEndpointInputPtrOutputWithContext(ctx context.Context) ServiceUrlEndpointInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceUrlEndpointInputPtrOutput)
}

type ServiceUrlEndpointInputOutput struct{ *pulumi.OutputState }

func (ServiceUrlEndpointInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceUrlEndpointInput)(nil)).Elem()
}

func (o ServiceUrlEndpointInputOutput) ToServiceUrlEndpointInputOutput() ServiceUrlEndpointInputOutput {
	return o
}

func (o ServiceUrlEndpointInputOutput) ToServiceUrlEndpointInputOutputWithContext(ctx context.Context) ServiceUrlEndpointInputOutput {
	return o
}

func (o ServiceUrlEndpointInputOutput) ToServiceUrlEndpointInputPtrOutput() ServiceUrlEndpointInputPtrOutput {
	return o.ToServiceUrlEndpointInputPtrOutputWithContext(context.Background())
}

func (o ServiceUrlEndpointInputOutput) ToServiceUrlEndpointInputPtrOutputWithContext(ctx context.Context) ServiceUrlEndpointInputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceUrlEndpointInput) *ServiceUrlEndpointInput {
		return &v
	}).(ServiceUrlEndpointInputPtrOutput)
}

// The health check URL of the URL endpoint type. If the URL is a public endpoint, the `HealthUrl` must also be a public endpoint. If the URL is a private endpoint inside a virtual private cloud (VPC), the health URL must also be a private endpoint, and the host must be the same as the URL.
func (o ServiceUrlEndpointInputOutput) HealthUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceUrlEndpointInput) *string { return v.HealthUrl }).(pulumi.StringPtrOutput)
}

// The URL to route traffic to. The URL must be an [rfc3986-formatted URL](https://docs.aws.amazon.com/https://datatracker.ietf.org/doc/html/rfc3986) . If the host is a domain name, the name must be resolvable over the public internet. If the scheme is `https` , the top level domain of the host must be listed in the [IANA root zone database](https://docs.aws.amazon.com/https://www.iana.org/domains/root/db) .
func (o ServiceUrlEndpointInputOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceUrlEndpointInput) string { return v.Url }).(pulumi.StringOutput)
}

type ServiceUrlEndpointInputPtrOutput struct{ *pulumi.OutputState }

func (ServiceUrlEndpointInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceUrlEndpointInput)(nil)).Elem()
}

func (o ServiceUrlEndpointInputPtrOutput) ToServiceUrlEndpointInputPtrOutput() ServiceUrlEndpointInputPtrOutput {
	return o
}

func (o ServiceUrlEndpointInputPtrOutput) ToServiceUrlEndpointInputPtrOutputWithContext(ctx context.Context) ServiceUrlEndpointInputPtrOutput {
	return o
}

func (o ServiceUrlEndpointInputPtrOutput) Elem() ServiceUrlEndpointInputOutput {
	return o.ApplyT(func(v *ServiceUrlEndpointInput) ServiceUrlEndpointInput {
		if v != nil {
			return *v
		}
		var ret ServiceUrlEndpointInput
		return ret
	}).(ServiceUrlEndpointInputOutput)
}

// The health check URL of the URL endpoint type. If the URL is a public endpoint, the `HealthUrl` must also be a public endpoint. If the URL is a private endpoint inside a virtual private cloud (VPC), the health URL must also be a private endpoint, and the host must be the same as the URL.
func (o ServiceUrlEndpointInputPtrOutput) HealthUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceUrlEndpointInput) *string {
		if v == nil {
			return nil
		}
		return v.HealthUrl
	}).(pulumi.StringPtrOutput)
}

// The URL to route traffic to. The URL must be an [rfc3986-formatted URL](https://docs.aws.amazon.com/https://datatracker.ietf.org/doc/html/rfc3986) . If the host is a domain name, the name must be resolvable over the public internet. If the scheme is `https` , the top level domain of the host must be listed in the [IANA root zone database](https://docs.aws.amazon.com/https://www.iana.org/domains/root/db) .
func (o ServiceUrlEndpointInputPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceUrlEndpointInput) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationApiGatewayProxyInputInput)(nil)).Elem(), ApplicationApiGatewayProxyInputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationApiGatewayProxyInputPtrInput)(nil)).Elem(), ApplicationApiGatewayProxyInputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteDefaultRouteInputInput)(nil)).Elem(), RouteDefaultRouteInputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteDefaultRouteInputPtrInput)(nil)).Elem(), RouteDefaultRouteInputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteUriPathRouteInputInput)(nil)).Elem(), RouteUriPathRouteInputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteUriPathRouteInputPtrInput)(nil)).Elem(), RouteUriPathRouteInputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLambdaEndpointInputInput)(nil)).Elem(), ServiceLambdaEndpointInputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLambdaEndpointInputPtrInput)(nil)).Elem(), ServiceLambdaEndpointInputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceUrlEndpointInputInput)(nil)).Elem(), ServiceUrlEndpointInputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceUrlEndpointInputPtrInput)(nil)).Elem(), ServiceUrlEndpointInputArgs{})
	pulumi.RegisterOutputType(ApplicationApiGatewayProxyInputOutput{})
	pulumi.RegisterOutputType(ApplicationApiGatewayProxyInputPtrOutput{})
	pulumi.RegisterOutputType(RouteDefaultRouteInputOutput{})
	pulumi.RegisterOutputType(RouteDefaultRouteInputPtrOutput{})
	pulumi.RegisterOutputType(RouteUriPathRouteInputOutput{})
	pulumi.RegisterOutputType(RouteUriPathRouteInputPtrOutput{})
	pulumi.RegisterOutputType(ServiceLambdaEndpointInputOutput{})
	pulumi.RegisterOutputType(ServiceLambdaEndpointInputPtrOutput{})
	pulumi.RegisterOutputType(ServiceUrlEndpointInputOutput{})
	pulumi.RegisterOutputType(ServiceUrlEndpointInputPtrOutput{})
}
