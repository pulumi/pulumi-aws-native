// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package refactorspaces

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::RefactorSpaces::Environment Resource Type
type Environment struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the environment.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// A description of the environment.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The unique identifier of the environment.
	EnvironmentIdentifier pulumi.StringOutput `pulumi:"environmentIdentifier"`
	// The name of the environment.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// The network fabric type of the environment.
	NetworkFabricType EnvironmentNetworkFabricTypePtrOutput `pulumi:"networkFabricType"`
	// Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
	Tags aws.TagArrayOutput `pulumi:"tags"`
	// The ID of the AWS Transit Gateway set up by the environment.
	TransitGatewayId pulumi.StringOutput `pulumi:"transitGatewayId"`
}

// NewEnvironment registers a new resource with the given unique name, arguments, and options.
func NewEnvironment(ctx *pulumi.Context,
	name string, args *EnvironmentArgs, opts ...pulumi.ResourceOption) (*Environment, error) {
	if args == nil {
		args = &EnvironmentArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"description",
		"name",
		"networkFabricType",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Environment
	err := ctx.RegisterResource("aws-native:refactorspaces:Environment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnvironment gets an existing Environment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnvironment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnvironmentState, opts ...pulumi.ResourceOption) (*Environment, error) {
	var resource Environment
	err := ctx.ReadResource("aws-native:refactorspaces:Environment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Environment resources.
type environmentState struct {
}

type EnvironmentState struct {
}

func (EnvironmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*environmentState)(nil)).Elem()
}

type environmentArgs struct {
	// A description of the environment.
	Description *string `pulumi:"description"`
	// The name of the environment.
	Name *string `pulumi:"name"`
	// The network fabric type of the environment.
	NetworkFabricType *EnvironmentNetworkFabricType `pulumi:"networkFabricType"`
	// Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a Environment resource.
type EnvironmentArgs struct {
	// A description of the environment.
	Description pulumi.StringPtrInput
	// The name of the environment.
	Name pulumi.StringPtrInput
	// The network fabric type of the environment.
	NetworkFabricType EnvironmentNetworkFabricTypePtrInput
	// Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
	Tags aws.TagArrayInput
}

func (EnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*environmentArgs)(nil)).Elem()
}

type EnvironmentInput interface {
	pulumi.Input

	ToEnvironmentOutput() EnvironmentOutput
	ToEnvironmentOutputWithContext(ctx context.Context) EnvironmentOutput
}

func (*Environment) ElementType() reflect.Type {
	return reflect.TypeOf((**Environment)(nil)).Elem()
}

func (i *Environment) ToEnvironmentOutput() EnvironmentOutput {
	return i.ToEnvironmentOutputWithContext(context.Background())
}

func (i *Environment) ToEnvironmentOutputWithContext(ctx context.Context) EnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentOutput)
}

type EnvironmentOutput struct{ *pulumi.OutputState }

func (EnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Environment)(nil)).Elem()
}

func (o EnvironmentOutput) ToEnvironmentOutput() EnvironmentOutput {
	return o
}

func (o EnvironmentOutput) ToEnvironmentOutputWithContext(ctx context.Context) EnvironmentOutput {
	return o
}

// The Amazon Resource Name (ARN) of the environment.
func (o EnvironmentOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// A description of the environment.
func (o EnvironmentOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The unique identifier of the environment.
func (o EnvironmentOutput) EnvironmentIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.EnvironmentIdentifier }).(pulumi.StringOutput)
}

// The name of the environment.
func (o EnvironmentOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// The network fabric type of the environment.
func (o EnvironmentOutput) NetworkFabricType() EnvironmentNetworkFabricTypePtrOutput {
	return o.ApplyT(func(v *Environment) EnvironmentNetworkFabricTypePtrOutput { return v.NetworkFabricType }).(EnvironmentNetworkFabricTypePtrOutput)
}

// Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
func (o EnvironmentOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Environment) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

// The ID of the AWS Transit Gateway set up by the environment.
func (o EnvironmentOutput) TransitGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.TransitGatewayId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentInput)(nil)).Elem(), &Environment{})
	pulumi.RegisterOutputType(EnvironmentOutput{})
}
