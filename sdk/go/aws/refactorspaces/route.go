// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package refactorspaces

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::RefactorSpaces::Route Resource Type
type Route struct {
	pulumi.CustomResourceState

	ApplicationIdentifier pulumi.StringOutput `pulumi:"applicationIdentifier"`
	Arn                   pulumi.StringOutput `pulumi:"arn"`
	EnvironmentIdentifier pulumi.StringOutput `pulumi:"environmentIdentifier"`
	PathResourceToId      pulumi.StringOutput `pulumi:"pathResourceToId"`
	RouteIdentifier       pulumi.StringOutput `pulumi:"routeIdentifier"`
	RouteType             RouteTypePtrOutput  `pulumi:"routeType"`
	ServiceIdentifier     pulumi.StringOutput `pulumi:"serviceIdentifier"`
	// Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
	Tags         RouteTagArrayOutput             `pulumi:"tags"`
	UriPathRoute RouteUriPathRouteInputPtrOutput `pulumi:"uriPathRoute"`
}

// NewRoute registers a new resource with the given unique name, arguments, and options.
func NewRoute(ctx *pulumi.Context,
	name string, args *RouteArgs, opts ...pulumi.ResourceOption) (*Route, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationIdentifier'")
	}
	if args.EnvironmentIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentIdentifier'")
	}
	if args.ServiceIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'ServiceIdentifier'")
	}
	var resource Route
	err := ctx.RegisterResource("aws-native:refactorspaces:Route", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoute gets an existing Route resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteState, opts ...pulumi.ResourceOption) (*Route, error) {
	var resource Route
	err := ctx.ReadResource("aws-native:refactorspaces:Route", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Route resources.
type routeState struct {
}

type RouteState struct {
}

func (RouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeState)(nil)).Elem()
}

type routeArgs struct {
	ApplicationIdentifier string     `pulumi:"applicationIdentifier"`
	EnvironmentIdentifier string     `pulumi:"environmentIdentifier"`
	RouteType             *RouteType `pulumi:"routeType"`
	ServiceIdentifier     string     `pulumi:"serviceIdentifier"`
	// Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
	Tags         []RouteTag              `pulumi:"tags"`
	UriPathRoute *RouteUriPathRouteInput `pulumi:"uriPathRoute"`
}

// The set of arguments for constructing a Route resource.
type RouteArgs struct {
	ApplicationIdentifier pulumi.StringInput
	EnvironmentIdentifier pulumi.StringInput
	RouteType             RouteTypePtrInput
	ServiceIdentifier     pulumi.StringInput
	// Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
	Tags         RouteTagArrayInput
	UriPathRoute RouteUriPathRouteInputPtrInput
}

func (RouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeArgs)(nil)).Elem()
}

type RouteInput interface {
	pulumi.Input

	ToRouteOutput() RouteOutput
	ToRouteOutputWithContext(ctx context.Context) RouteOutput
}

func (*Route) ElementType() reflect.Type {
	return reflect.TypeOf((*Route)(nil))
}

func (i *Route) ToRouteOutput() RouteOutput {
	return i.ToRouteOutputWithContext(context.Background())
}

func (i *Route) ToRouteOutputWithContext(ctx context.Context) RouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteOutput)
}

type RouteOutput struct{ *pulumi.OutputState }

func (RouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Route)(nil))
}

func (o RouteOutput) ToRouteOutput() RouteOutput {
	return o
}

func (o RouteOutput) ToRouteOutputWithContext(ctx context.Context) RouteOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouteInput)(nil)).Elem(), &Route{})
	pulumi.RegisterOutputType(RouteOutput{})
}
