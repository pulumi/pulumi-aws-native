// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package refactorspaces

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::RefactorSpaces::Service Resource Type
type Service struct {
	pulumi.CustomResourceState

	// The unique identifier of the application.
	ApplicationIdentifier pulumi.StringOutput `pulumi:"applicationIdentifier"`
	// The Amazon Resource Name (ARN) of the service.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// A description of the service.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The endpoint type of the service.
	EndpointType ServiceEndpointTypeOutput `pulumi:"endpointType"`
	// The unique identifier of the environment.
	EnvironmentIdentifier pulumi.StringOutput `pulumi:"environmentIdentifier"`
	// A summary of the configuration for the AWS Lambda endpoint type.
	LambdaEndpoint ServiceLambdaEndpointInputPtrOutput `pulumi:"lambdaEndpoint"`
	// The name of the service.
	Name pulumi.StringOutput `pulumi:"name"`
	// The unique identifier of the service.
	ServiceIdentifier pulumi.StringOutput `pulumi:"serviceIdentifier"`
	// Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
	Tags aws.TagArrayOutput `pulumi:"tags"`
	// The summary of the configuration for the URL endpoint type.
	UrlEndpoint ServiceUrlEndpointInputPtrOutput `pulumi:"urlEndpoint"`
	// The ID of the virtual private cloud (VPC).
	VpcId pulumi.StringPtrOutput `pulumi:"vpcId"`
}

// NewService registers a new resource with the given unique name, arguments, and options.
func NewService(ctx *pulumi.Context,
	name string, args *ServiceArgs, opts ...pulumi.ResourceOption) (*Service, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationIdentifier'")
	}
	if args.EndpointType == nil {
		return nil, errors.New("invalid value for required argument 'EndpointType'")
	}
	if args.EnvironmentIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentIdentifier'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"applicationIdentifier",
		"description",
		"endpointType",
		"environmentIdentifier",
		"lambdaEndpoint",
		"name",
		"urlEndpoint",
		"vpcId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Service
	err := ctx.RegisterResource("aws-native:refactorspaces:Service", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetService gets an existing Service resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceState, opts ...pulumi.ResourceOption) (*Service, error) {
	var resource Service
	err := ctx.ReadResource("aws-native:refactorspaces:Service", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Service resources.
type serviceState struct {
}

type ServiceState struct {
}

func (ServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceState)(nil)).Elem()
}

type serviceArgs struct {
	// The unique identifier of the application.
	ApplicationIdentifier string `pulumi:"applicationIdentifier"`
	// A description of the service.
	Description *string `pulumi:"description"`
	// The endpoint type of the service.
	EndpointType ServiceEndpointType `pulumi:"endpointType"`
	// The unique identifier of the environment.
	EnvironmentIdentifier string `pulumi:"environmentIdentifier"`
	// A summary of the configuration for the AWS Lambda endpoint type.
	LambdaEndpoint *ServiceLambdaEndpointInput `pulumi:"lambdaEndpoint"`
	// The name of the service.
	Name *string `pulumi:"name"`
	// Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
	Tags []aws.Tag `pulumi:"tags"`
	// The summary of the configuration for the URL endpoint type.
	UrlEndpoint *ServiceUrlEndpointInput `pulumi:"urlEndpoint"`
	// The ID of the virtual private cloud (VPC).
	VpcId *string `pulumi:"vpcId"`
}

// The set of arguments for constructing a Service resource.
type ServiceArgs struct {
	// The unique identifier of the application.
	ApplicationIdentifier pulumi.StringInput
	// A description of the service.
	Description pulumi.StringPtrInput
	// The endpoint type of the service.
	EndpointType ServiceEndpointTypeInput
	// The unique identifier of the environment.
	EnvironmentIdentifier pulumi.StringInput
	// A summary of the configuration for the AWS Lambda endpoint type.
	LambdaEndpoint ServiceLambdaEndpointInputPtrInput
	// The name of the service.
	Name pulumi.StringPtrInput
	// Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
	Tags aws.TagArrayInput
	// The summary of the configuration for the URL endpoint type.
	UrlEndpoint ServiceUrlEndpointInputPtrInput
	// The ID of the virtual private cloud (VPC).
	VpcId pulumi.StringPtrInput
}

func (ServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceArgs)(nil)).Elem()
}

type ServiceInput interface {
	pulumi.Input

	ToServiceOutput() ServiceOutput
	ToServiceOutputWithContext(ctx context.Context) ServiceOutput
}

func (*Service) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil)).Elem()
}

func (i *Service) ToServiceOutput() ServiceOutput {
	return i.ToServiceOutputWithContext(context.Background())
}

func (i *Service) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceOutput)
}

type ServiceOutput struct{ *pulumi.OutputState }

func (ServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil)).Elem()
}

func (o ServiceOutput) ToServiceOutput() ServiceOutput {
	return o
}

func (o ServiceOutput) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return o
}

// The unique identifier of the application.
func (o ServiceOutput) ApplicationIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.ApplicationIdentifier }).(pulumi.StringOutput)
}

// The Amazon Resource Name (ARN) of the service.
func (o ServiceOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// A description of the service.
func (o ServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The endpoint type of the service.
func (o ServiceOutput) EndpointType() ServiceEndpointTypeOutput {
	return o.ApplyT(func(v *Service) ServiceEndpointTypeOutput { return v.EndpointType }).(ServiceEndpointTypeOutput)
}

// The unique identifier of the environment.
func (o ServiceOutput) EnvironmentIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.EnvironmentIdentifier }).(pulumi.StringOutput)
}

// A summary of the configuration for the AWS Lambda endpoint type.
func (o ServiceOutput) LambdaEndpoint() ServiceLambdaEndpointInputPtrOutput {
	return o.ApplyT(func(v *Service) ServiceLambdaEndpointInputPtrOutput { return v.LambdaEndpoint }).(ServiceLambdaEndpointInputPtrOutput)
}

// The name of the service.
func (o ServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The unique identifier of the service.
func (o ServiceOutput) ServiceIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.ServiceIdentifier }).(pulumi.StringOutput)
}

// Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
func (o ServiceOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Service) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

// The summary of the configuration for the URL endpoint type.
func (o ServiceOutput) UrlEndpoint() ServiceUrlEndpointInputPtrOutput {
	return o.ApplyT(func(v *Service) ServiceUrlEndpointInputPtrOutput { return v.UrlEndpoint }).(ServiceUrlEndpointInputPtrOutput)
}

// The ID of the virtual private cloud (VPC).
func (o ServiceOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.StringPtrOutput { return v.VpcId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceInput)(nil)).Elem(), &Service{})
	pulumi.RegisterOutputType(ServiceOutput{})
}
