// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package refactorspaces

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::RefactorSpaces::Service Resource Type
type Service struct {
	pulumi.CustomResourceState

	ApplicationIdentifier pulumi.StringOutput                 `pulumi:"applicationIdentifier"`
	Arn                   pulumi.StringOutput                 `pulumi:"arn"`
	Description           pulumi.StringPtrOutput              `pulumi:"description"`
	EndpointType          ServiceEndpointTypePtrOutput        `pulumi:"endpointType"`
	EnvironmentIdentifier pulumi.StringOutput                 `pulumi:"environmentIdentifier"`
	LambdaEndpoint        ServiceLambdaEndpointInputPtrOutput `pulumi:"lambdaEndpoint"`
	Name                  pulumi.StringPtrOutput              `pulumi:"name"`
	ServiceIdentifier     pulumi.StringOutput                 `pulumi:"serviceIdentifier"`
	// Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
	Tags        ServiceTagArrayOutput            `pulumi:"tags"`
	UrlEndpoint ServiceUrlEndpointInputPtrOutput `pulumi:"urlEndpoint"`
	VpcId       pulumi.StringPtrOutput           `pulumi:"vpcId"`
}

// NewService registers a new resource with the given unique name, arguments, and options.
func NewService(ctx *pulumi.Context,
	name string, args *ServiceArgs, opts ...pulumi.ResourceOption) (*Service, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationIdentifier'")
	}
	if args.EnvironmentIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentIdentifier'")
	}
	var resource Service
	err := ctx.RegisterResource("aws-native:refactorspaces:Service", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetService gets an existing Service resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceState, opts ...pulumi.ResourceOption) (*Service, error) {
	var resource Service
	err := ctx.ReadResource("aws-native:refactorspaces:Service", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Service resources.
type serviceState struct {
}

type ServiceState struct {
}

func (ServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceState)(nil)).Elem()
}

type serviceArgs struct {
	ApplicationIdentifier string                      `pulumi:"applicationIdentifier"`
	Description           *string                     `pulumi:"description"`
	EndpointType          *ServiceEndpointType        `pulumi:"endpointType"`
	EnvironmentIdentifier string                      `pulumi:"environmentIdentifier"`
	LambdaEndpoint        *ServiceLambdaEndpointInput `pulumi:"lambdaEndpoint"`
	Name                  *string                     `pulumi:"name"`
	// Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
	Tags        []ServiceTag             `pulumi:"tags"`
	UrlEndpoint *ServiceUrlEndpointInput `pulumi:"urlEndpoint"`
	VpcId       *string                  `pulumi:"vpcId"`
}

// The set of arguments for constructing a Service resource.
type ServiceArgs struct {
	ApplicationIdentifier pulumi.StringInput
	Description           pulumi.StringPtrInput
	EndpointType          ServiceEndpointTypePtrInput
	EnvironmentIdentifier pulumi.StringInput
	LambdaEndpoint        ServiceLambdaEndpointInputPtrInput
	Name                  pulumi.StringPtrInput
	// Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
	Tags        ServiceTagArrayInput
	UrlEndpoint ServiceUrlEndpointInputPtrInput
	VpcId       pulumi.StringPtrInput
}

func (ServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceArgs)(nil)).Elem()
}

type ServiceInput interface {
	pulumi.Input

	ToServiceOutput() ServiceOutput
	ToServiceOutputWithContext(ctx context.Context) ServiceOutput
}

func (*Service) ElementType() reflect.Type {
	return reflect.TypeOf((*Service)(nil))
}

func (i *Service) ToServiceOutput() ServiceOutput {
	return i.ToServiceOutputWithContext(context.Background())
}

func (i *Service) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceOutput)
}

type ServiceOutput struct{ *pulumi.OutputState }

func (ServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Service)(nil))
}

func (o ServiceOutput) ToServiceOutput() ServiceOutput {
	return o
}

func (o ServiceOutput) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceInput)(nil)).Elem(), &Service{})
	pulumi.RegisterOutputType(ServiceOutput{})
}
