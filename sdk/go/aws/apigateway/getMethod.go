// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The “AWS::ApiGateway::Method“ resource creates API Gateway methods that define the parameters and body that clients must send in their requests.
func LookupMethod(ctx *pulumi.Context, args *LookupMethodArgs, opts ...pulumi.InvokeOption) (*LookupMethodResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupMethodResult
	err := ctx.Invoke("aws-native:apigateway:getMethod", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupMethodArgs struct {
	// The method's HTTP verb.
	HttpMethod string `pulumi:"httpMethod"`
	// The Resource identifier for the MethodResponse resource.
	ResourceId string `pulumi:"resourceId"`
	// The string identifier of the associated RestApi.
	RestApiId string `pulumi:"restApiId"`
}

type LookupMethodResult struct {
	// A boolean flag specifying whether a valid ApiKey is required to invoke this method.
	ApiKeyRequired *bool `pulumi:"apiKeyRequired"`
	// A list of authorization scopes configured on the method. The scopes are used with a ``COGNITO_USER_POOLS`` authorizer to authorize the method invocation. The authorization works by matching the method scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any method scopes matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the method scope is configured, the client must provide an access token instead of an identity token for authorization purposes.
	AuthorizationScopes []string `pulumi:"authorizationScopes"`
	// The method's authorization type. This parameter is required. For valid values, see [Method](https://docs.aws.amazon.com/apigateway/latest/api/API_Method.html) in the *API Gateway API Reference*.
	//   If you specify the ``AuthorizerId`` property, specify ``CUSTOM`` or ``COGNITO_USER_POOLS`` for this property.
	AuthorizationType *MethodAuthorizationType `pulumi:"authorizationType"`
	// The identifier of an authorizer to use on this method. The method's authorization type must be ``CUSTOM`` or ``COGNITO_USER_POOLS``.
	AuthorizerId *string `pulumi:"authorizerId"`
	// Represents an ``HTTP``, ``HTTP_PROXY``, ``AWS``, ``AWS_PROXY``, or Mock integration.
	Integration *MethodIntegration `pulumi:"integration"`
	// Gets a method response associated with a given HTTP status code.
	MethodResponses []MethodResponse `pulumi:"methodResponses"`
	// A human-friendly operation identifier for the method. For example, you can assign the ``operationName`` of ``ListPets`` for the ``GET /pets`` method in the ``PetStore`` example.
	OperationName *string `pulumi:"operationName"`
	// A key-value map specifying data schemas, represented by Model resources, (as the mapped value) of the request payloads of given content types (as the mapping key).
	RequestModels interface{} `pulumi:"requestModels"`
	// A key-value map defining required or optional method request parameters that can be accepted by API Gateway. A key is a method request parameter name matching the pattern of ``method.request.{location}.{name}``, where ``location`` is ``querystring``, ``path``, or ``header`` and ``name`` is a valid and unique parameter name. The value associated with the key is a Boolean flag indicating whether the parameter is required (``true``) or optional (``false``). The method request parameter names defined here are available in Integration to be mapped to integration request parameters or templates.
	RequestParameters interface{} `pulumi:"requestParameters"`
	// The identifier of a RequestValidator for request validation.
	RequestValidatorId *string `pulumi:"requestValidatorId"`
}

func LookupMethodOutput(ctx *pulumi.Context, args LookupMethodOutputArgs, opts ...pulumi.InvokeOption) LookupMethodResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupMethodResult, error) {
			args := v.(LookupMethodArgs)
			r, err := LookupMethod(ctx, &args, opts...)
			var s LookupMethodResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupMethodResultOutput)
}

type LookupMethodOutputArgs struct {
	// The method's HTTP verb.
	HttpMethod pulumi.StringInput `pulumi:"httpMethod"`
	// The Resource identifier for the MethodResponse resource.
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
	// The string identifier of the associated RestApi.
	RestApiId pulumi.StringInput `pulumi:"restApiId"`
}

func (LookupMethodOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMethodArgs)(nil)).Elem()
}

type LookupMethodResultOutput struct{ *pulumi.OutputState }

func (LookupMethodResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMethodResult)(nil)).Elem()
}

func (o LookupMethodResultOutput) ToLookupMethodResultOutput() LookupMethodResultOutput {
	return o
}

func (o LookupMethodResultOutput) ToLookupMethodResultOutputWithContext(ctx context.Context) LookupMethodResultOutput {
	return o
}

// A boolean flag specifying whether a valid ApiKey is required to invoke this method.
func (o LookupMethodResultOutput) ApiKeyRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupMethodResult) *bool { return v.ApiKeyRequired }).(pulumi.BoolPtrOutput)
}

// A list of authorization scopes configured on the method. The scopes are used with a “COGNITO_USER_POOLS“ authorizer to authorize the method invocation. The authorization works by matching the method scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any method scopes matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the method scope is configured, the client must provide an access token instead of an identity token for authorization purposes.
func (o LookupMethodResultOutput) AuthorizationScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupMethodResult) []string { return v.AuthorizationScopes }).(pulumi.StringArrayOutput)
}

// The method's authorization type. This parameter is required. For valid values, see [Method](https://docs.aws.amazon.com/apigateway/latest/api/API_Method.html) in the *API Gateway API Reference*.
//
//	If you specify the ``AuthorizerId`` property, specify ``CUSTOM`` or ``COGNITO_USER_POOLS`` for this property.
func (o LookupMethodResultOutput) AuthorizationType() MethodAuthorizationTypePtrOutput {
	return o.ApplyT(func(v LookupMethodResult) *MethodAuthorizationType { return v.AuthorizationType }).(MethodAuthorizationTypePtrOutput)
}

// The identifier of an authorizer to use on this method. The method's authorization type must be “CUSTOM“ or “COGNITO_USER_POOLS“.
func (o LookupMethodResultOutput) AuthorizerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupMethodResult) *string { return v.AuthorizerId }).(pulumi.StringPtrOutput)
}

// Represents an “HTTP“, “HTTP_PROXY“, “AWS“, “AWS_PROXY“, or Mock integration.
func (o LookupMethodResultOutput) Integration() MethodIntegrationPtrOutput {
	return o.ApplyT(func(v LookupMethodResult) *MethodIntegration { return v.Integration }).(MethodIntegrationPtrOutput)
}

// Gets a method response associated with a given HTTP status code.
func (o LookupMethodResultOutput) MethodResponses() MethodResponseArrayOutput {
	return o.ApplyT(func(v LookupMethodResult) []MethodResponse { return v.MethodResponses }).(MethodResponseArrayOutput)
}

// A human-friendly operation identifier for the method. For example, you can assign the “operationName“ of “ListPets“ for the “GET /pets“ method in the “PetStore“ example.
func (o LookupMethodResultOutput) OperationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupMethodResult) *string { return v.OperationName }).(pulumi.StringPtrOutput)
}

// A key-value map specifying data schemas, represented by Model resources, (as the mapped value) of the request payloads of given content types (as the mapping key).
func (o LookupMethodResultOutput) RequestModels() pulumi.AnyOutput {
	return o.ApplyT(func(v LookupMethodResult) interface{} { return v.RequestModels }).(pulumi.AnyOutput)
}

// A key-value map defining required or optional method request parameters that can be accepted by API Gateway. A key is a method request parameter name matching the pattern of “method.request.{location}.{name}“, where “location“ is “querystring“, “path“, or “header“ and “name“ is a valid and unique parameter name. The value associated with the key is a Boolean flag indicating whether the parameter is required (“true“) or optional (“false“). The method request parameter names defined here are available in Integration to be mapped to integration request parameters or templates.
func (o LookupMethodResultOutput) RequestParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v LookupMethodResult) interface{} { return v.RequestParameters }).(pulumi.AnyOutput)
}

// The identifier of a RequestValidator for request validation.
func (o LookupMethodResultOutput) RequestValidatorId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupMethodResult) *string { return v.RequestValidatorId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupMethodResultOutput{})
}
