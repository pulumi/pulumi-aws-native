// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::ApiGateway::ApiKey
func LookupApiKey(ctx *pulumi.Context, args *LookupApiKeyArgs, opts ...pulumi.InvokeOption) (*LookupApiKeyResult, error) {
	var rv LookupApiKeyResult
	err := ctx.Invoke("aws-native:apigateway:getApiKey", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupApiKeyArgs struct {
	// A Unique Key ID which identifies the API Key. Generated by the Create API and returned by the Read and List APIs
	APIKeyId string `pulumi:"aPIKeyId"`
}

type LookupApiKeyResult struct {
	// A Unique Key ID which identifies the API Key. Generated by the Create API and returned by the Read and List APIs
	APIKeyId *string `pulumi:"aPIKeyId"`
	// An AWS Marketplace customer identifier to use when integrating with the AWS SaaS Marketplace.
	CustomerId *string `pulumi:"customerId"`
	// A description of the purpose of the API key.
	Description *string `pulumi:"description"`
	// Indicates whether the API key can be used by clients.
	Enabled *bool `pulumi:"enabled"`
	// A list of stages to associate with this API key.
	StageKeys []ApiKeyStageKey `pulumi:"stageKeys"`
	// An array of arbitrary tags (key-value pairs) to associate with the API key.
	Tags []ApiKeyTag `pulumi:"tags"`
}

func LookupApiKeyOutput(ctx *pulumi.Context, args LookupApiKeyOutputArgs, opts ...pulumi.InvokeOption) LookupApiKeyResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupApiKeyResult, error) {
			args := v.(LookupApiKeyArgs)
			r, err := LookupApiKey(ctx, &args, opts...)
			var s LookupApiKeyResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupApiKeyResultOutput)
}

type LookupApiKeyOutputArgs struct {
	// A Unique Key ID which identifies the API Key. Generated by the Create API and returned by the Read and List APIs
	APIKeyId pulumi.StringInput `pulumi:"aPIKeyId"`
}

func (LookupApiKeyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupApiKeyArgs)(nil)).Elem()
}

type LookupApiKeyResultOutput struct{ *pulumi.OutputState }

func (LookupApiKeyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupApiKeyResult)(nil)).Elem()
}

func (o LookupApiKeyResultOutput) ToLookupApiKeyResultOutput() LookupApiKeyResultOutput {
	return o
}

func (o LookupApiKeyResultOutput) ToLookupApiKeyResultOutputWithContext(ctx context.Context) LookupApiKeyResultOutput {
	return o
}

// A Unique Key ID which identifies the API Key. Generated by the Create API and returned by the Read and List APIs
func (o LookupApiKeyResultOutput) APIKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupApiKeyResult) *string { return v.APIKeyId }).(pulumi.StringPtrOutput)
}

// An AWS Marketplace customer identifier to use when integrating with the AWS SaaS Marketplace.
func (o LookupApiKeyResultOutput) CustomerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupApiKeyResult) *string { return v.CustomerId }).(pulumi.StringPtrOutput)
}

// A description of the purpose of the API key.
func (o LookupApiKeyResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupApiKeyResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates whether the API key can be used by clients.
func (o LookupApiKeyResultOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupApiKeyResult) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// A list of stages to associate with this API key.
func (o LookupApiKeyResultOutput) StageKeys() ApiKeyStageKeyArrayOutput {
	return o.ApplyT(func(v LookupApiKeyResult) []ApiKeyStageKey { return v.StageKeys }).(ApiKeyStageKeyArrayOutput)
}

// An array of arbitrary tags (key-value pairs) to associate with the API key.
func (o LookupApiKeyResultOutput) Tags() ApiKeyTagArrayOutput {
	return o.ApplyT(func(v LookupApiKeyResult) []ApiKeyTag { return v.Tags }).(ApiKeyTagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupApiKeyResultOutput{})
}
