// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::ApiGateway::RequestValidator
func LookupRequestValidator(ctx *pulumi.Context, args *LookupRequestValidatorArgs, opts ...pulumi.InvokeOption) (*LookupRequestValidatorResult, error) {
	var rv LookupRequestValidatorResult
	err := ctx.Invoke("aws-native:apigateway:getRequestValidator", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupRequestValidatorArgs struct {
	// ID of the request validator.
	RequestValidatorId string `pulumi:"requestValidatorId"`
	// The identifier of the targeted API entity.
	RestApiId string `pulumi:"restApiId"`
}

type LookupRequestValidatorResult struct {
	// ID of the request validator.
	RequestValidatorId *string `pulumi:"requestValidatorId"`
	// Indicates whether to validate the request body according to the configured schema for the targeted API and method.
	ValidateRequestBody *bool `pulumi:"validateRequestBody"`
	// Indicates whether to validate request parameters.
	ValidateRequestParameters *bool `pulumi:"validateRequestParameters"`
}

func LookupRequestValidatorOutput(ctx *pulumi.Context, args LookupRequestValidatorOutputArgs, opts ...pulumi.InvokeOption) LookupRequestValidatorResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRequestValidatorResult, error) {
			args := v.(LookupRequestValidatorArgs)
			r, err := LookupRequestValidator(ctx, &args, opts...)
			return *r, err
		}).(LookupRequestValidatorResultOutput)
}

type LookupRequestValidatorOutputArgs struct {
	// ID of the request validator.
	RequestValidatorId pulumi.StringInput `pulumi:"requestValidatorId"`
	// The identifier of the targeted API entity.
	RestApiId pulumi.StringInput `pulumi:"restApiId"`
}

func (LookupRequestValidatorOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRequestValidatorArgs)(nil)).Elem()
}

type LookupRequestValidatorResultOutput struct{ *pulumi.OutputState }

func (LookupRequestValidatorResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRequestValidatorResult)(nil)).Elem()
}

func (o LookupRequestValidatorResultOutput) ToLookupRequestValidatorResultOutput() LookupRequestValidatorResultOutput {
	return o
}

func (o LookupRequestValidatorResultOutput) ToLookupRequestValidatorResultOutputWithContext(ctx context.Context) LookupRequestValidatorResultOutput {
	return o
}

// ID of the request validator.
func (o LookupRequestValidatorResultOutput) RequestValidatorId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRequestValidatorResult) *string { return v.RequestValidatorId }).(pulumi.StringPtrOutput)
}

// Indicates whether to validate the request body according to the configured schema for the targeted API and method.
func (o LookupRequestValidatorResultOutput) ValidateRequestBody() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupRequestValidatorResult) *bool { return v.ValidateRequestBody }).(pulumi.BoolPtrOutput)
}

// Indicates whether to validate request parameters.
func (o LookupRequestValidatorResultOutput) ValidateRequestParameters() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupRequestValidatorResult) *bool { return v.ValidateRequestParameters }).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRequestValidatorResultOutput{})
}
