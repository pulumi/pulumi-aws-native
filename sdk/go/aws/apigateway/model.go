// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::ApiGateway::Model
type Model struct {
	pulumi.CustomResourceState

	// The content type for the model.
	ContentType pulumi.StringPtrOutput `pulumi:"contentType"`
	// A description that identifies this model.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A name for the model. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the model name.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// The ID of a REST API with which to associate this model.
	RestApiId pulumi.StringOutput `pulumi:"restApiId"`
	// The schema to use to transform data to one or more output formats. Specify null ({}) if you don't want to specify a schema.
	Schema pulumi.AnyOutput `pulumi:"schema"`
}

// NewModel registers a new resource with the given unique name, arguments, and options.
func NewModel(ctx *pulumi.Context,
	name string, args *ModelArgs, opts ...pulumi.ResourceOption) (*Model, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RestApiId == nil {
		return nil, errors.New("invalid value for required argument 'RestApiId'")
	}
	var resource Model
	err := ctx.RegisterResource("aws-native:apigateway:Model", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetModel gets an existing Model resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetModel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ModelState, opts ...pulumi.ResourceOption) (*Model, error) {
	var resource Model
	err := ctx.ReadResource("aws-native:apigateway:Model", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Model resources.
type modelState struct {
}

type ModelState struct {
}

func (ModelState) ElementType() reflect.Type {
	return reflect.TypeOf((*modelState)(nil)).Elem()
}

type modelArgs struct {
	// The content type for the model.
	ContentType *string `pulumi:"contentType"`
	// A description that identifies this model.
	Description *string `pulumi:"description"`
	// A name for the model. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the model name.
	Name *string `pulumi:"name"`
	// The ID of a REST API with which to associate this model.
	RestApiId string `pulumi:"restApiId"`
	// The schema to use to transform data to one or more output formats. Specify null ({}) if you don't want to specify a schema.
	Schema interface{} `pulumi:"schema"`
}

// The set of arguments for constructing a Model resource.
type ModelArgs struct {
	// The content type for the model.
	ContentType pulumi.StringPtrInput
	// A description that identifies this model.
	Description pulumi.StringPtrInput
	// A name for the model. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the model name.
	Name pulumi.StringPtrInput
	// The ID of a REST API with which to associate this model.
	RestApiId pulumi.StringInput
	// The schema to use to transform data to one or more output formats. Specify null ({}) if you don't want to specify a schema.
	Schema pulumi.Input
}

func (ModelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*modelArgs)(nil)).Elem()
}

type ModelInput interface {
	pulumi.Input

	ToModelOutput() ModelOutput
	ToModelOutputWithContext(ctx context.Context) ModelOutput
}

func (*Model) ElementType() reflect.Type {
	return reflect.TypeOf((*Model)(nil))
}

func (i *Model) ToModelOutput() ModelOutput {
	return i.ToModelOutputWithContext(context.Background())
}

func (i *Model) ToModelOutputWithContext(ctx context.Context) ModelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelOutput)
}

type ModelOutput struct{ *pulumi.OutputState }

func (ModelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Model)(nil))
}

func (o ModelOutput) ToModelOutput() ModelOutput {
	return o
}

func (o ModelOutput) ToModelOutputWithContext(ctx context.Context) ModelOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ModelOutput{})
}
