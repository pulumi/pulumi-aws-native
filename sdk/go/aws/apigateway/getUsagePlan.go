// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The “AWS::ApiGateway::UsagePlan“ resource creates a usage plan for deployed APIs. A usage plan sets a target for the throttling and quota limits on individual client API keys. For more information, see [Creating and Using API Usage Plans in Amazon API Gateway](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-api-usage-plans.html) in the *API Gateway Developer Guide*.
//
//	In some cases clients can exceed the targets that you set. Don’t rely on usage plans to control costs. Consider using [](https://docs.aws.amazon.com/cost-management/latest/userguide/budgets-managing-costs.html) to monitor costs and [](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html) to manage API requests.
func LookupUsagePlan(ctx *pulumi.Context, args *LookupUsagePlanArgs, opts ...pulumi.InvokeOption) (*LookupUsagePlanResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupUsagePlanResult
	err := ctx.Invoke("aws-native:apigateway:getUsagePlan", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupUsagePlanArgs struct {
	Id string `pulumi:"id"`
}

type LookupUsagePlanResult struct {
	// The associated API stages of a usage plan.
	ApiStages []UsagePlanApiStage `pulumi:"apiStages"`
	// The description of a usage plan.
	Description *string `pulumi:"description"`
	Id          *string `pulumi:"id"`
	// The target maximum number of permitted requests per a given unit time interval.
	Quota *UsagePlanQuotaSettings `pulumi:"quota"`
	// The collection of tags. Each tag element is associated with a given resource.
	Tags []UsagePlanTag `pulumi:"tags"`
	// A map containing method level throttling information for API stage in a usage plan.
	Throttle *UsagePlanThrottleSettings `pulumi:"throttle"`
	// The name of a usage plan.
	UsagePlanName *string `pulumi:"usagePlanName"`
}

func LookupUsagePlanOutput(ctx *pulumi.Context, args LookupUsagePlanOutputArgs, opts ...pulumi.InvokeOption) LookupUsagePlanResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupUsagePlanResult, error) {
			args := v.(LookupUsagePlanArgs)
			r, err := LookupUsagePlan(ctx, &args, opts...)
			var s LookupUsagePlanResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupUsagePlanResultOutput)
}

type LookupUsagePlanOutputArgs struct {
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupUsagePlanOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUsagePlanArgs)(nil)).Elem()
}

type LookupUsagePlanResultOutput struct{ *pulumi.OutputState }

func (LookupUsagePlanResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUsagePlanResult)(nil)).Elem()
}

func (o LookupUsagePlanResultOutput) ToLookupUsagePlanResultOutput() LookupUsagePlanResultOutput {
	return o
}

func (o LookupUsagePlanResultOutput) ToLookupUsagePlanResultOutputWithContext(ctx context.Context) LookupUsagePlanResultOutput {
	return o
}

// The associated API stages of a usage plan.
func (o LookupUsagePlanResultOutput) ApiStages() UsagePlanApiStageArrayOutput {
	return o.ApplyT(func(v LookupUsagePlanResult) []UsagePlanApiStage { return v.ApiStages }).(UsagePlanApiStageArrayOutput)
}

// The description of a usage plan.
func (o LookupUsagePlanResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupUsagePlanResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o LookupUsagePlanResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupUsagePlanResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The target maximum number of permitted requests per a given unit time interval.
func (o LookupUsagePlanResultOutput) Quota() UsagePlanQuotaSettingsPtrOutput {
	return o.ApplyT(func(v LookupUsagePlanResult) *UsagePlanQuotaSettings { return v.Quota }).(UsagePlanQuotaSettingsPtrOutput)
}

// The collection of tags. Each tag element is associated with a given resource.
func (o LookupUsagePlanResultOutput) Tags() UsagePlanTagArrayOutput {
	return o.ApplyT(func(v LookupUsagePlanResult) []UsagePlanTag { return v.Tags }).(UsagePlanTagArrayOutput)
}

// A map containing method level throttling information for API stage in a usage plan.
func (o LookupUsagePlanResultOutput) Throttle() UsagePlanThrottleSettingsPtrOutput {
	return o.ApplyT(func(v LookupUsagePlanResult) *UsagePlanThrottleSettings { return v.Throttle }).(UsagePlanThrottleSettingsPtrOutput)
}

// The name of a usage plan.
func (o LookupUsagePlanResultOutput) UsagePlanName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupUsagePlanResult) *string { return v.UsagePlanName }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupUsagePlanResultOutput{})
}
