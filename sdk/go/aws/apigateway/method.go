// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::ApiGateway::Method
type Method struct {
	pulumi.CustomResourceState

	// Indicates whether the method requires clients to submit a valid API key.
	ApiKeyRequired pulumi.BoolPtrOutput `pulumi:"apiKeyRequired"`
	// A list of authorization scopes configured on the method.
	AuthorizationScopes pulumi.StringArrayOutput `pulumi:"authorizationScopes"`
	// The method's authorization type.
	AuthorizationType MethodAuthorizationTypePtrOutput `pulumi:"authorizationType"`
	// The identifier of the authorizer to use on this method.
	AuthorizerId pulumi.StringPtrOutput `pulumi:"authorizerId"`
	// The backend system that the method calls when it receives a request.
	HttpMethod pulumi.StringOutput `pulumi:"httpMethod"`
	// The backend system that the method calls when it receives a request.
	Integration MethodIntegrationPtrOutput `pulumi:"integration"`
	// The responses that can be sent to the client who calls the method.
	MethodResponses MethodResponseArrayOutput `pulumi:"methodResponses"`
	// A friendly operation name for the method.
	OperationName pulumi.StringPtrOutput `pulumi:"operationName"`
	// The resources that are used for the request's content type. Specify request models as key-value pairs (string-to-string mapping), with a content type as the key and a Model resource name as the value.
	RequestModels pulumi.AnyOutput `pulumi:"requestModels"`
	// The request parameters that API Gateway accepts. Specify request parameters as key-value pairs (string-to-Boolean mapping), with a source as the key and a Boolean as the value.
	RequestParameters pulumi.AnyOutput `pulumi:"requestParameters"`
	// The ID of the associated request validator.
	RequestValidatorId pulumi.StringPtrOutput `pulumi:"requestValidatorId"`
	// The ID of an API Gateway resource.
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
	// The ID of the RestApi resource in which API Gateway creates the method.
	RestApiId pulumi.StringOutput `pulumi:"restApiId"`
}

// NewMethod registers a new resource with the given unique name, arguments, and options.
func NewMethod(ctx *pulumi.Context,
	name string, args *MethodArgs, opts ...pulumi.ResourceOption) (*Method, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HttpMethod == nil {
		return nil, errors.New("invalid value for required argument 'HttpMethod'")
	}
	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	if args.RestApiId == nil {
		return nil, errors.New("invalid value for required argument 'RestApiId'")
	}
	var resource Method
	err := ctx.RegisterResource("aws-native:apigateway:Method", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMethod gets an existing Method resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMethod(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MethodState, opts ...pulumi.ResourceOption) (*Method, error) {
	var resource Method
	err := ctx.ReadResource("aws-native:apigateway:Method", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Method resources.
type methodState struct {
}

type MethodState struct {
}

func (MethodState) ElementType() reflect.Type {
	return reflect.TypeOf((*methodState)(nil)).Elem()
}

type methodArgs struct {
	// Indicates whether the method requires clients to submit a valid API key.
	ApiKeyRequired *bool `pulumi:"apiKeyRequired"`
	// A list of authorization scopes configured on the method.
	AuthorizationScopes []string `pulumi:"authorizationScopes"`
	// The method's authorization type.
	AuthorizationType *MethodAuthorizationType `pulumi:"authorizationType"`
	// The identifier of the authorizer to use on this method.
	AuthorizerId *string `pulumi:"authorizerId"`
	// The backend system that the method calls when it receives a request.
	HttpMethod string `pulumi:"httpMethod"`
	// The backend system that the method calls when it receives a request.
	Integration *MethodIntegration `pulumi:"integration"`
	// The responses that can be sent to the client who calls the method.
	MethodResponses []MethodResponse `pulumi:"methodResponses"`
	// A friendly operation name for the method.
	OperationName *string `pulumi:"operationName"`
	// The resources that are used for the request's content type. Specify request models as key-value pairs (string-to-string mapping), with a content type as the key and a Model resource name as the value.
	RequestModels interface{} `pulumi:"requestModels"`
	// The request parameters that API Gateway accepts. Specify request parameters as key-value pairs (string-to-Boolean mapping), with a source as the key and a Boolean as the value.
	RequestParameters interface{} `pulumi:"requestParameters"`
	// The ID of the associated request validator.
	RequestValidatorId *string `pulumi:"requestValidatorId"`
	// The ID of an API Gateway resource.
	ResourceId string `pulumi:"resourceId"`
	// The ID of the RestApi resource in which API Gateway creates the method.
	RestApiId string `pulumi:"restApiId"`
}

// The set of arguments for constructing a Method resource.
type MethodArgs struct {
	// Indicates whether the method requires clients to submit a valid API key.
	ApiKeyRequired pulumi.BoolPtrInput
	// A list of authorization scopes configured on the method.
	AuthorizationScopes pulumi.StringArrayInput
	// The method's authorization type.
	AuthorizationType MethodAuthorizationTypePtrInput
	// The identifier of the authorizer to use on this method.
	AuthorizerId pulumi.StringPtrInput
	// The backend system that the method calls when it receives a request.
	HttpMethod pulumi.StringInput
	// The backend system that the method calls when it receives a request.
	Integration MethodIntegrationPtrInput
	// The responses that can be sent to the client who calls the method.
	MethodResponses MethodResponseArrayInput
	// A friendly operation name for the method.
	OperationName pulumi.StringPtrInput
	// The resources that are used for the request's content type. Specify request models as key-value pairs (string-to-string mapping), with a content type as the key and a Model resource name as the value.
	RequestModels pulumi.Input
	// The request parameters that API Gateway accepts. Specify request parameters as key-value pairs (string-to-Boolean mapping), with a source as the key and a Boolean as the value.
	RequestParameters pulumi.Input
	// The ID of the associated request validator.
	RequestValidatorId pulumi.StringPtrInput
	// The ID of an API Gateway resource.
	ResourceId pulumi.StringInput
	// The ID of the RestApi resource in which API Gateway creates the method.
	RestApiId pulumi.StringInput
}

func (MethodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*methodArgs)(nil)).Elem()
}

type MethodInput interface {
	pulumi.Input

	ToMethodOutput() MethodOutput
	ToMethodOutputWithContext(ctx context.Context) MethodOutput
}

func (*Method) ElementType() reflect.Type {
	return reflect.TypeOf((*Method)(nil))
}

func (i *Method) ToMethodOutput() MethodOutput {
	return i.ToMethodOutputWithContext(context.Background())
}

func (i *Method) ToMethodOutputWithContext(ctx context.Context) MethodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MethodOutput)
}

type MethodOutput struct{ *pulumi.OutputState }

func (MethodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Method)(nil))
}

func (o MethodOutput) ToMethodOutput() MethodOutput {
	return o
}

func (o MethodOutput) ToMethodOutputWithContext(ctx context.Context) MethodOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MethodInput)(nil)).Elem(), &Method{})
	pulumi.RegisterOutputType(MethodOutput{})
}
