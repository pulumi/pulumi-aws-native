// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The “AWS::ApiGateway::Method“ resource creates API Gateway methods that define the parameters and body that clients must send in their requests.
type Method struct {
	pulumi.CustomResourceState

	// A boolean flag specifying whether a valid ApiKey is required to invoke this method.
	ApiKeyRequired pulumi.BoolPtrOutput `pulumi:"apiKeyRequired"`
	// A list of authorization scopes configured on the method. The scopes are used with a ``COGNITO_USER_POOLS`` authorizer to authorize the method invocation. The authorization works by matching the method scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any method scopes matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the method scope is configured, the client must provide an access token instead of an identity token for authorization purposes.
	AuthorizationScopes pulumi.StringArrayOutput `pulumi:"authorizationScopes"`
	// The method's authorization type. This parameter is required. For valid values, see [Method](https://docs.aws.amazon.com/apigateway/latest/api/API_Method.html) in the *API Gateway API Reference*.
	//   If you specify the ``AuthorizerId`` property, specify ``CUSTOM`` or ``COGNITO_USER_POOLS`` for this property.
	AuthorizationType MethodAuthorizationTypePtrOutput `pulumi:"authorizationType"`
	// The identifier of an authorizer to use on this method. The method's authorization type must be ``CUSTOM`` or ``COGNITO_USER_POOLS``.
	AuthorizerId pulumi.StringPtrOutput `pulumi:"authorizerId"`
	// The method's HTTP verb.
	HttpMethod pulumi.StringOutput `pulumi:"httpMethod"`
	// Represents an ``HTTP``, ``HTTP_PROXY``, ``AWS``, ``AWS_PROXY``, or Mock integration.
	Integration MethodIntegrationPtrOutput `pulumi:"integration"`
	// Gets a method response associated with a given HTTP status code.
	MethodResponses MethodResponseArrayOutput `pulumi:"methodResponses"`
	// A human-friendly operation identifier for the method. For example, you can assign the ``operationName`` of ``ListPets`` for the ``GET /pets`` method in the ``PetStore`` example.
	OperationName pulumi.StringPtrOutput `pulumi:"operationName"`
	// A key-value map specifying data schemas, represented by Model resources, (as the mapped value) of the request payloads of given content types (as the mapping key).
	RequestModels pulumi.AnyOutput `pulumi:"requestModels"`
	// A key-value map defining required or optional method request parameters that can be accepted by API Gateway. A key is a method request parameter name matching the pattern of ``method.request.{location}.{name}``, where ``location`` is ``querystring``, ``path``, or ``header`` and ``name`` is a valid and unique parameter name. The value associated with the key is a Boolean flag indicating whether the parameter is required (``true``) or optional (``false``). The method request parameter names defined here are available in Integration to be mapped to integration request parameters or templates.
	RequestParameters pulumi.AnyOutput `pulumi:"requestParameters"`
	// The identifier of a RequestValidator for request validation.
	RequestValidatorId pulumi.StringPtrOutput `pulumi:"requestValidatorId"`
	// The Resource identifier for the MethodResponse resource.
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
	// The string identifier of the associated RestApi.
	RestApiId pulumi.StringOutput `pulumi:"restApiId"`
}

// NewMethod registers a new resource with the given unique name, arguments, and options.
func NewMethod(ctx *pulumi.Context,
	name string, args *MethodArgs, opts ...pulumi.ResourceOption) (*Method, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HttpMethod == nil {
		return nil, errors.New("invalid value for required argument 'HttpMethod'")
	}
	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	if args.RestApiId == nil {
		return nil, errors.New("invalid value for required argument 'RestApiId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"httpMethod",
		"resourceId",
		"restApiId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Method
	err := ctx.RegisterResource("aws-native:apigateway:Method", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMethod gets an existing Method resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMethod(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MethodState, opts ...pulumi.ResourceOption) (*Method, error) {
	var resource Method
	err := ctx.ReadResource("aws-native:apigateway:Method", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Method resources.
type methodState struct {
}

type MethodState struct {
}

func (MethodState) ElementType() reflect.Type {
	return reflect.TypeOf((*methodState)(nil)).Elem()
}

type methodArgs struct {
	// A boolean flag specifying whether a valid ApiKey is required to invoke this method.
	ApiKeyRequired *bool `pulumi:"apiKeyRequired"`
	// A list of authorization scopes configured on the method. The scopes are used with a ``COGNITO_USER_POOLS`` authorizer to authorize the method invocation. The authorization works by matching the method scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any method scopes matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the method scope is configured, the client must provide an access token instead of an identity token for authorization purposes.
	AuthorizationScopes []string `pulumi:"authorizationScopes"`
	// The method's authorization type. This parameter is required. For valid values, see [Method](https://docs.aws.amazon.com/apigateway/latest/api/API_Method.html) in the *API Gateway API Reference*.
	//   If you specify the ``AuthorizerId`` property, specify ``CUSTOM`` or ``COGNITO_USER_POOLS`` for this property.
	AuthorizationType *MethodAuthorizationType `pulumi:"authorizationType"`
	// The identifier of an authorizer to use on this method. The method's authorization type must be ``CUSTOM`` or ``COGNITO_USER_POOLS``.
	AuthorizerId *string `pulumi:"authorizerId"`
	// The method's HTTP verb.
	HttpMethod string `pulumi:"httpMethod"`
	// Represents an ``HTTP``, ``HTTP_PROXY``, ``AWS``, ``AWS_PROXY``, or Mock integration.
	Integration *MethodIntegration `pulumi:"integration"`
	// Gets a method response associated with a given HTTP status code.
	MethodResponses []MethodResponse `pulumi:"methodResponses"`
	// A human-friendly operation identifier for the method. For example, you can assign the ``operationName`` of ``ListPets`` for the ``GET /pets`` method in the ``PetStore`` example.
	OperationName *string `pulumi:"operationName"`
	// A key-value map specifying data schemas, represented by Model resources, (as the mapped value) of the request payloads of given content types (as the mapping key).
	RequestModels interface{} `pulumi:"requestModels"`
	// A key-value map defining required or optional method request parameters that can be accepted by API Gateway. A key is a method request parameter name matching the pattern of ``method.request.{location}.{name}``, where ``location`` is ``querystring``, ``path``, or ``header`` and ``name`` is a valid and unique parameter name. The value associated with the key is a Boolean flag indicating whether the parameter is required (``true``) or optional (``false``). The method request parameter names defined here are available in Integration to be mapped to integration request parameters or templates.
	RequestParameters interface{} `pulumi:"requestParameters"`
	// The identifier of a RequestValidator for request validation.
	RequestValidatorId *string `pulumi:"requestValidatorId"`
	// The Resource identifier for the MethodResponse resource.
	ResourceId string `pulumi:"resourceId"`
	// The string identifier of the associated RestApi.
	RestApiId string `pulumi:"restApiId"`
}

// The set of arguments for constructing a Method resource.
type MethodArgs struct {
	// A boolean flag specifying whether a valid ApiKey is required to invoke this method.
	ApiKeyRequired pulumi.BoolPtrInput
	// A list of authorization scopes configured on the method. The scopes are used with a ``COGNITO_USER_POOLS`` authorizer to authorize the method invocation. The authorization works by matching the method scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any method scopes matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the method scope is configured, the client must provide an access token instead of an identity token for authorization purposes.
	AuthorizationScopes pulumi.StringArrayInput
	// The method's authorization type. This parameter is required. For valid values, see [Method](https://docs.aws.amazon.com/apigateway/latest/api/API_Method.html) in the *API Gateway API Reference*.
	//   If you specify the ``AuthorizerId`` property, specify ``CUSTOM`` or ``COGNITO_USER_POOLS`` for this property.
	AuthorizationType MethodAuthorizationTypePtrInput
	// The identifier of an authorizer to use on this method. The method's authorization type must be ``CUSTOM`` or ``COGNITO_USER_POOLS``.
	AuthorizerId pulumi.StringPtrInput
	// The method's HTTP verb.
	HttpMethod pulumi.StringInput
	// Represents an ``HTTP``, ``HTTP_PROXY``, ``AWS``, ``AWS_PROXY``, or Mock integration.
	Integration MethodIntegrationPtrInput
	// Gets a method response associated with a given HTTP status code.
	MethodResponses MethodResponseArrayInput
	// A human-friendly operation identifier for the method. For example, you can assign the ``operationName`` of ``ListPets`` for the ``GET /pets`` method in the ``PetStore`` example.
	OperationName pulumi.StringPtrInput
	// A key-value map specifying data schemas, represented by Model resources, (as the mapped value) of the request payloads of given content types (as the mapping key).
	RequestModels pulumi.Input
	// A key-value map defining required or optional method request parameters that can be accepted by API Gateway. A key is a method request parameter name matching the pattern of ``method.request.{location}.{name}``, where ``location`` is ``querystring``, ``path``, or ``header`` and ``name`` is a valid and unique parameter name. The value associated with the key is a Boolean flag indicating whether the parameter is required (``true``) or optional (``false``). The method request parameter names defined here are available in Integration to be mapped to integration request parameters or templates.
	RequestParameters pulumi.Input
	// The identifier of a RequestValidator for request validation.
	RequestValidatorId pulumi.StringPtrInput
	// The Resource identifier for the MethodResponse resource.
	ResourceId pulumi.StringInput
	// The string identifier of the associated RestApi.
	RestApiId pulumi.StringInput
}

func (MethodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*methodArgs)(nil)).Elem()
}

type MethodInput interface {
	pulumi.Input

	ToMethodOutput() MethodOutput
	ToMethodOutputWithContext(ctx context.Context) MethodOutput
}

func (*Method) ElementType() reflect.Type {
	return reflect.TypeOf((**Method)(nil)).Elem()
}

func (i *Method) ToMethodOutput() MethodOutput {
	return i.ToMethodOutputWithContext(context.Background())
}

func (i *Method) ToMethodOutputWithContext(ctx context.Context) MethodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MethodOutput)
}

type MethodOutput struct{ *pulumi.OutputState }

func (MethodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Method)(nil)).Elem()
}

func (o MethodOutput) ToMethodOutput() MethodOutput {
	return o
}

func (o MethodOutput) ToMethodOutputWithContext(ctx context.Context) MethodOutput {
	return o
}

// A boolean flag specifying whether a valid ApiKey is required to invoke this method.
func (o MethodOutput) ApiKeyRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Method) pulumi.BoolPtrOutput { return v.ApiKeyRequired }).(pulumi.BoolPtrOutput)
}

// A list of authorization scopes configured on the method. The scopes are used with a “COGNITO_USER_POOLS“ authorizer to authorize the method invocation. The authorization works by matching the method scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any method scopes matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the method scope is configured, the client must provide an access token instead of an identity token for authorization purposes.
func (o MethodOutput) AuthorizationScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Method) pulumi.StringArrayOutput { return v.AuthorizationScopes }).(pulumi.StringArrayOutput)
}

// The method's authorization type. This parameter is required. For valid values, see [Method](https://docs.aws.amazon.com/apigateway/latest/api/API_Method.html) in the *API Gateway API Reference*.
//
//	If you specify the ``AuthorizerId`` property, specify ``CUSTOM`` or ``COGNITO_USER_POOLS`` for this property.
func (o MethodOutput) AuthorizationType() MethodAuthorizationTypePtrOutput {
	return o.ApplyT(func(v *Method) MethodAuthorizationTypePtrOutput { return v.AuthorizationType }).(MethodAuthorizationTypePtrOutput)
}

// The identifier of an authorizer to use on this method. The method's authorization type must be “CUSTOM“ or “COGNITO_USER_POOLS“.
func (o MethodOutput) AuthorizerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Method) pulumi.StringPtrOutput { return v.AuthorizerId }).(pulumi.StringPtrOutput)
}

// The method's HTTP verb.
func (o MethodOutput) HttpMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *Method) pulumi.StringOutput { return v.HttpMethod }).(pulumi.StringOutput)
}

// Represents an “HTTP“, “HTTP_PROXY“, “AWS“, “AWS_PROXY“, or Mock integration.
func (o MethodOutput) Integration() MethodIntegrationPtrOutput {
	return o.ApplyT(func(v *Method) MethodIntegrationPtrOutput { return v.Integration }).(MethodIntegrationPtrOutput)
}

// Gets a method response associated with a given HTTP status code.
func (o MethodOutput) MethodResponses() MethodResponseArrayOutput {
	return o.ApplyT(func(v *Method) MethodResponseArrayOutput { return v.MethodResponses }).(MethodResponseArrayOutput)
}

// A human-friendly operation identifier for the method. For example, you can assign the “operationName“ of “ListPets“ for the “GET /pets“ method in the “PetStore“ example.
func (o MethodOutput) OperationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Method) pulumi.StringPtrOutput { return v.OperationName }).(pulumi.StringPtrOutput)
}

// A key-value map specifying data schemas, represented by Model resources, (as the mapped value) of the request payloads of given content types (as the mapping key).
func (o MethodOutput) RequestModels() pulumi.AnyOutput {
	return o.ApplyT(func(v *Method) pulumi.AnyOutput { return v.RequestModels }).(pulumi.AnyOutput)
}

// A key-value map defining required or optional method request parameters that can be accepted by API Gateway. A key is a method request parameter name matching the pattern of “method.request.{location}.{name}“, where “location“ is “querystring“, “path“, or “header“ and “name“ is a valid and unique parameter name. The value associated with the key is a Boolean flag indicating whether the parameter is required (“true“) or optional (“false“). The method request parameter names defined here are available in Integration to be mapped to integration request parameters or templates.
func (o MethodOutput) RequestParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v *Method) pulumi.AnyOutput { return v.RequestParameters }).(pulumi.AnyOutput)
}

// The identifier of a RequestValidator for request validation.
func (o MethodOutput) RequestValidatorId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Method) pulumi.StringPtrOutput { return v.RequestValidatorId }).(pulumi.StringPtrOutput)
}

// The Resource identifier for the MethodResponse resource.
func (o MethodOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Method) pulumi.StringOutput { return v.ResourceId }).(pulumi.StringOutput)
}

// The string identifier of the associated RestApi.
func (o MethodOutput) RestApiId() pulumi.StringOutput {
	return o.ApplyT(func(v *Method) pulumi.StringOutput { return v.RestApiId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MethodInput)(nil)).Elem(), &Method{})
	pulumi.RegisterOutputType(MethodOutput{})
}
