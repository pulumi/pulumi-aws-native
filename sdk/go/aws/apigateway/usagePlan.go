// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The “AWS::ApiGateway::UsagePlan“ resource creates a usage plan for deployed APIs. A usage plan sets a target for the throttling and quota limits on individual client API keys. For more information, see [Creating and Using API Usage Plans in Amazon API Gateway](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-api-usage-plans.html) in the *API Gateway Developer Guide*.
//
//	In some cases clients can exceed the targets that you set. Don’t rely on usage plans to control costs. Consider using [](https://docs.aws.amazon.com/cost-management/latest/userguide/budgets-managing-costs.html) to monitor costs and [](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html) to manage API requests.
type UsagePlan struct {
	pulumi.CustomResourceState

	// The associated API stages of a usage plan.
	ApiStages UsagePlanApiStageArrayOutput `pulumi:"apiStages"`
	// The description of a usage plan.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The target maximum number of permitted requests per a given unit time interval.
	Quota UsagePlanQuotaSettingsPtrOutput `pulumi:"quota"`
	// The collection of tags. Each tag element is associated with a given resource.
	Tags aws.TagArrayOutput `pulumi:"tags"`
	// A map containing method level throttling information for API stage in a usage plan.
	Throttle UsagePlanThrottleSettingsPtrOutput `pulumi:"throttle"`
	// The name of a usage plan.
	UsagePlanName pulumi.StringPtrOutput `pulumi:"usagePlanName"`
}

// NewUsagePlan registers a new resource with the given unique name, arguments, and options.
func NewUsagePlan(ctx *pulumi.Context,
	name string, args *UsagePlanArgs, opts ...pulumi.ResourceOption) (*UsagePlan, error) {
	if args == nil {
		args = &UsagePlanArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UsagePlan
	err := ctx.RegisterResource("aws-native:apigateway:UsagePlan", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUsagePlan gets an existing UsagePlan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUsagePlan(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UsagePlanState, opts ...pulumi.ResourceOption) (*UsagePlan, error) {
	var resource UsagePlan
	err := ctx.ReadResource("aws-native:apigateway:UsagePlan", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UsagePlan resources.
type usagePlanState struct {
}

type UsagePlanState struct {
}

func (UsagePlanState) ElementType() reflect.Type {
	return reflect.TypeOf((*usagePlanState)(nil)).Elem()
}

type usagePlanArgs struct {
	// The associated API stages of a usage plan.
	ApiStages []UsagePlanApiStage `pulumi:"apiStages"`
	// The description of a usage plan.
	Description *string `pulumi:"description"`
	// The target maximum number of permitted requests per a given unit time interval.
	Quota *UsagePlanQuotaSettings `pulumi:"quota"`
	// The collection of tags. Each tag element is associated with a given resource.
	Tags []aws.Tag `pulumi:"tags"`
	// A map containing method level throttling information for API stage in a usage plan.
	Throttle *UsagePlanThrottleSettings `pulumi:"throttle"`
	// The name of a usage plan.
	UsagePlanName *string `pulumi:"usagePlanName"`
}

// The set of arguments for constructing a UsagePlan resource.
type UsagePlanArgs struct {
	// The associated API stages of a usage plan.
	ApiStages UsagePlanApiStageArrayInput
	// The description of a usage plan.
	Description pulumi.StringPtrInput
	// The target maximum number of permitted requests per a given unit time interval.
	Quota UsagePlanQuotaSettingsPtrInput
	// The collection of tags. Each tag element is associated with a given resource.
	Tags aws.TagArrayInput
	// A map containing method level throttling information for API stage in a usage plan.
	Throttle UsagePlanThrottleSettingsPtrInput
	// The name of a usage plan.
	UsagePlanName pulumi.StringPtrInput
}

func (UsagePlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*usagePlanArgs)(nil)).Elem()
}

type UsagePlanInput interface {
	pulumi.Input

	ToUsagePlanOutput() UsagePlanOutput
	ToUsagePlanOutputWithContext(ctx context.Context) UsagePlanOutput
}

func (*UsagePlan) ElementType() reflect.Type {
	return reflect.TypeOf((**UsagePlan)(nil)).Elem()
}

func (i *UsagePlan) ToUsagePlanOutput() UsagePlanOutput {
	return i.ToUsagePlanOutputWithContext(context.Background())
}

func (i *UsagePlan) ToUsagePlanOutputWithContext(ctx context.Context) UsagePlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsagePlanOutput)
}

type UsagePlanOutput struct{ *pulumi.OutputState }

func (UsagePlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UsagePlan)(nil)).Elem()
}

func (o UsagePlanOutput) ToUsagePlanOutput() UsagePlanOutput {
	return o
}

func (o UsagePlanOutput) ToUsagePlanOutputWithContext(ctx context.Context) UsagePlanOutput {
	return o
}

// The associated API stages of a usage plan.
func (o UsagePlanOutput) ApiStages() UsagePlanApiStageArrayOutput {
	return o.ApplyT(func(v *UsagePlan) UsagePlanApiStageArrayOutput { return v.ApiStages }).(UsagePlanApiStageArrayOutput)
}

// The description of a usage plan.
func (o UsagePlanOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UsagePlan) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The target maximum number of permitted requests per a given unit time interval.
func (o UsagePlanOutput) Quota() UsagePlanQuotaSettingsPtrOutput {
	return o.ApplyT(func(v *UsagePlan) UsagePlanQuotaSettingsPtrOutput { return v.Quota }).(UsagePlanQuotaSettingsPtrOutput)
}

// The collection of tags. Each tag element is associated with a given resource.
func (o UsagePlanOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *UsagePlan) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

// A map containing method level throttling information for API stage in a usage plan.
func (o UsagePlanOutput) Throttle() UsagePlanThrottleSettingsPtrOutput {
	return o.ApplyT(func(v *UsagePlan) UsagePlanThrottleSettingsPtrOutput { return v.Throttle }).(UsagePlanThrottleSettingsPtrOutput)
}

// The name of a usage plan.
func (o UsagePlanOutput) UsagePlanName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UsagePlan) pulumi.StringPtrOutput { return v.UsagePlanName }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UsagePlanInput)(nil)).Elem(), &UsagePlan{})
	pulumi.RegisterOutputType(UsagePlanOutput{})
}
