// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The “AWS::ApiGateway::UsagePlanKey“ resource associates an API key with a usage plan. This association determines which users the usage plan is applied to.
func LookupUsagePlanKey(ctx *pulumi.Context, args *LookupUsagePlanKeyArgs, opts ...pulumi.InvokeOption) (*LookupUsagePlanKeyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupUsagePlanKeyResult
	err := ctx.Invoke("aws-native:apigateway:getUsagePlanKey", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupUsagePlanKeyArgs struct {
	// The ID for the usage plan key. For example: `abc123` .
	Id string `pulumi:"id"`
}

type LookupUsagePlanKeyResult struct {
	// The ID for the usage plan key. For example: `abc123` .
	Id *string `pulumi:"id"`
}

func LookupUsagePlanKeyOutput(ctx *pulumi.Context, args LookupUsagePlanKeyOutputArgs, opts ...pulumi.InvokeOption) LookupUsagePlanKeyResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupUsagePlanKeyResultOutput, error) {
			args := v.(LookupUsagePlanKeyArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:apigateway:getUsagePlanKey", args, LookupUsagePlanKeyResultOutput{}, options).(LookupUsagePlanKeyResultOutput), nil
		}).(LookupUsagePlanKeyResultOutput)
}

type LookupUsagePlanKeyOutputArgs struct {
	// The ID for the usage plan key. For example: `abc123` .
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupUsagePlanKeyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUsagePlanKeyArgs)(nil)).Elem()
}

type LookupUsagePlanKeyResultOutput struct{ *pulumi.OutputState }

func (LookupUsagePlanKeyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUsagePlanKeyResult)(nil)).Elem()
}

func (o LookupUsagePlanKeyResultOutput) ToLookupUsagePlanKeyResultOutput() LookupUsagePlanKeyResultOutput {
	return o
}

func (o LookupUsagePlanKeyResultOutput) ToLookupUsagePlanKeyResultOutputWithContext(ctx context.Context) LookupUsagePlanKeyResultOutput {
	return o
}

// The ID for the usage plan key. For example: `abc123` .
func (o LookupUsagePlanKeyResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupUsagePlanKeyResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupUsagePlanKeyResultOutput{})
}
