// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ApiKeyStageKey struct {
	// The ID of a RestApi resource that includes the stage with which you want to associate the API key.
	RestApiId *string `pulumi:"restApiId"`
	// The name of the stage with which to associate the API key. The stage must be included in the RestApi resource that you specified in the RestApiId property.
	StageName *string `pulumi:"stageName"`
}

// ApiKeyStageKeyInput is an input type that accepts ApiKeyStageKeyArgs and ApiKeyStageKeyOutput values.
// You can construct a concrete instance of `ApiKeyStageKeyInput` via:
//
//          ApiKeyStageKeyArgs{...}
type ApiKeyStageKeyInput interface {
	pulumi.Input

	ToApiKeyStageKeyOutput() ApiKeyStageKeyOutput
	ToApiKeyStageKeyOutputWithContext(context.Context) ApiKeyStageKeyOutput
}

type ApiKeyStageKeyArgs struct {
	// The ID of a RestApi resource that includes the stage with which you want to associate the API key.
	RestApiId pulumi.StringPtrInput `pulumi:"restApiId"`
	// The name of the stage with which to associate the API key. The stage must be included in the RestApi resource that you specified in the RestApiId property.
	StageName pulumi.StringPtrInput `pulumi:"stageName"`
}

func (ApiKeyStageKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiKeyStageKey)(nil)).Elem()
}

func (i ApiKeyStageKeyArgs) ToApiKeyStageKeyOutput() ApiKeyStageKeyOutput {
	return i.ToApiKeyStageKeyOutputWithContext(context.Background())
}

func (i ApiKeyStageKeyArgs) ToApiKeyStageKeyOutputWithContext(ctx context.Context) ApiKeyStageKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiKeyStageKeyOutput)
}

// ApiKeyStageKeyArrayInput is an input type that accepts ApiKeyStageKeyArray and ApiKeyStageKeyArrayOutput values.
// You can construct a concrete instance of `ApiKeyStageKeyArrayInput` via:
//
//          ApiKeyStageKeyArray{ ApiKeyStageKeyArgs{...} }
type ApiKeyStageKeyArrayInput interface {
	pulumi.Input

	ToApiKeyStageKeyArrayOutput() ApiKeyStageKeyArrayOutput
	ToApiKeyStageKeyArrayOutputWithContext(context.Context) ApiKeyStageKeyArrayOutput
}

type ApiKeyStageKeyArray []ApiKeyStageKeyInput

func (ApiKeyStageKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApiKeyStageKey)(nil)).Elem()
}

func (i ApiKeyStageKeyArray) ToApiKeyStageKeyArrayOutput() ApiKeyStageKeyArrayOutput {
	return i.ToApiKeyStageKeyArrayOutputWithContext(context.Background())
}

func (i ApiKeyStageKeyArray) ToApiKeyStageKeyArrayOutputWithContext(ctx context.Context) ApiKeyStageKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiKeyStageKeyArrayOutput)
}

type ApiKeyStageKeyOutput struct{ *pulumi.OutputState }

func (ApiKeyStageKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiKeyStageKey)(nil)).Elem()
}

func (o ApiKeyStageKeyOutput) ToApiKeyStageKeyOutput() ApiKeyStageKeyOutput {
	return o
}

func (o ApiKeyStageKeyOutput) ToApiKeyStageKeyOutputWithContext(ctx context.Context) ApiKeyStageKeyOutput {
	return o
}

// The ID of a RestApi resource that includes the stage with which you want to associate the API key.
func (o ApiKeyStageKeyOutput) RestApiId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiKeyStageKey) *string { return v.RestApiId }).(pulumi.StringPtrOutput)
}

// The name of the stage with which to associate the API key. The stage must be included in the RestApi resource that you specified in the RestApiId property.
func (o ApiKeyStageKeyOutput) StageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiKeyStageKey) *string { return v.StageName }).(pulumi.StringPtrOutput)
}

type ApiKeyStageKeyArrayOutput struct{ *pulumi.OutputState }

func (ApiKeyStageKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApiKeyStageKey)(nil)).Elem()
}

func (o ApiKeyStageKeyArrayOutput) ToApiKeyStageKeyArrayOutput() ApiKeyStageKeyArrayOutput {
	return o
}

func (o ApiKeyStageKeyArrayOutput) ToApiKeyStageKeyArrayOutputWithContext(ctx context.Context) ApiKeyStageKeyArrayOutput {
	return o
}

func (o ApiKeyStageKeyArrayOutput) Index(i pulumi.IntInput) ApiKeyStageKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApiKeyStageKey {
		return vs[0].([]ApiKeyStageKey)[vs[1].(int)]
	}).(ApiKeyStageKeyOutput)
}

type ApiKeyTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// ApiKeyTagInput is an input type that accepts ApiKeyTagArgs and ApiKeyTagOutput values.
// You can construct a concrete instance of `ApiKeyTagInput` via:
//
//          ApiKeyTagArgs{...}
type ApiKeyTagInput interface {
	pulumi.Input

	ToApiKeyTagOutput() ApiKeyTagOutput
	ToApiKeyTagOutputWithContext(context.Context) ApiKeyTagOutput
}

type ApiKeyTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ApiKeyTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiKeyTag)(nil)).Elem()
}

func (i ApiKeyTagArgs) ToApiKeyTagOutput() ApiKeyTagOutput {
	return i.ToApiKeyTagOutputWithContext(context.Background())
}

func (i ApiKeyTagArgs) ToApiKeyTagOutputWithContext(ctx context.Context) ApiKeyTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiKeyTagOutput)
}

// ApiKeyTagArrayInput is an input type that accepts ApiKeyTagArray and ApiKeyTagArrayOutput values.
// You can construct a concrete instance of `ApiKeyTagArrayInput` via:
//
//          ApiKeyTagArray{ ApiKeyTagArgs{...} }
type ApiKeyTagArrayInput interface {
	pulumi.Input

	ToApiKeyTagArrayOutput() ApiKeyTagArrayOutput
	ToApiKeyTagArrayOutputWithContext(context.Context) ApiKeyTagArrayOutput
}

type ApiKeyTagArray []ApiKeyTagInput

func (ApiKeyTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApiKeyTag)(nil)).Elem()
}

func (i ApiKeyTagArray) ToApiKeyTagArrayOutput() ApiKeyTagArrayOutput {
	return i.ToApiKeyTagArrayOutputWithContext(context.Background())
}

func (i ApiKeyTagArray) ToApiKeyTagArrayOutputWithContext(ctx context.Context) ApiKeyTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiKeyTagArrayOutput)
}

type ApiKeyTagOutput struct{ *pulumi.OutputState }

func (ApiKeyTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiKeyTag)(nil)).Elem()
}

func (o ApiKeyTagOutput) ToApiKeyTagOutput() ApiKeyTagOutput {
	return o
}

func (o ApiKeyTagOutput) ToApiKeyTagOutputWithContext(ctx context.Context) ApiKeyTagOutput {
	return o
}

// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o ApiKeyTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ApiKeyTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o ApiKeyTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ApiKeyTag) string { return v.Value }).(pulumi.StringOutput)
}

type ApiKeyTagArrayOutput struct{ *pulumi.OutputState }

func (ApiKeyTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApiKeyTag)(nil)).Elem()
}

func (o ApiKeyTagArrayOutput) ToApiKeyTagArrayOutput() ApiKeyTagArrayOutput {
	return o
}

func (o ApiKeyTagArrayOutput) ToApiKeyTagArrayOutputWithContext(ctx context.Context) ApiKeyTagArrayOutput {
	return o
}

func (o ApiKeyTagArrayOutput) Index(i pulumi.IntInput) ApiKeyTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApiKeyTag {
		return vs[0].([]ApiKeyTag)[vs[1].(int)]
	}).(ApiKeyTagOutput)
}

type ClientCertificateTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// ClientCertificateTagInput is an input type that accepts ClientCertificateTagArgs and ClientCertificateTagOutput values.
// You can construct a concrete instance of `ClientCertificateTagInput` via:
//
//          ClientCertificateTagArgs{...}
type ClientCertificateTagInput interface {
	pulumi.Input

	ToClientCertificateTagOutput() ClientCertificateTagOutput
	ToClientCertificateTagOutputWithContext(context.Context) ClientCertificateTagOutput
}

type ClientCertificateTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (ClientCertificateTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientCertificateTag)(nil)).Elem()
}

func (i ClientCertificateTagArgs) ToClientCertificateTagOutput() ClientCertificateTagOutput {
	return i.ToClientCertificateTagOutputWithContext(context.Background())
}

func (i ClientCertificateTagArgs) ToClientCertificateTagOutputWithContext(ctx context.Context) ClientCertificateTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientCertificateTagOutput)
}

// ClientCertificateTagArrayInput is an input type that accepts ClientCertificateTagArray and ClientCertificateTagArrayOutput values.
// You can construct a concrete instance of `ClientCertificateTagArrayInput` via:
//
//          ClientCertificateTagArray{ ClientCertificateTagArgs{...} }
type ClientCertificateTagArrayInput interface {
	pulumi.Input

	ToClientCertificateTagArrayOutput() ClientCertificateTagArrayOutput
	ToClientCertificateTagArrayOutputWithContext(context.Context) ClientCertificateTagArrayOutput
}

type ClientCertificateTagArray []ClientCertificateTagInput

func (ClientCertificateTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClientCertificateTag)(nil)).Elem()
}

func (i ClientCertificateTagArray) ToClientCertificateTagArrayOutput() ClientCertificateTagArrayOutput {
	return i.ToClientCertificateTagArrayOutputWithContext(context.Background())
}

func (i ClientCertificateTagArray) ToClientCertificateTagArrayOutputWithContext(ctx context.Context) ClientCertificateTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientCertificateTagArrayOutput)
}

type ClientCertificateTagOutput struct{ *pulumi.OutputState }

func (ClientCertificateTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientCertificateTag)(nil)).Elem()
}

func (o ClientCertificateTagOutput) ToClientCertificateTagOutput() ClientCertificateTagOutput {
	return o
}

func (o ClientCertificateTagOutput) ToClientCertificateTagOutputWithContext(ctx context.Context) ClientCertificateTagOutput {
	return o
}

func (o ClientCertificateTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ClientCertificateTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o ClientCertificateTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ClientCertificateTag) string { return v.Value }).(pulumi.StringOutput)
}

type ClientCertificateTagArrayOutput struct{ *pulumi.OutputState }

func (ClientCertificateTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClientCertificateTag)(nil)).Elem()
}

func (o ClientCertificateTagArrayOutput) ToClientCertificateTagArrayOutput() ClientCertificateTagArrayOutput {
	return o
}

func (o ClientCertificateTagArrayOutput) ToClientCertificateTagArrayOutputWithContext(ctx context.Context) ClientCertificateTagArrayOutput {
	return o
}

func (o ClientCertificateTagArrayOutput) Index(i pulumi.IntInput) ClientCertificateTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClientCertificateTag {
		return vs[0].([]ClientCertificateTag)[vs[1].(int)]
	}).(ClientCertificateTagOutput)
}

type DomainNameEndpointConfiguration struct {
	Types []string `pulumi:"types"`
}

// DomainNameEndpointConfigurationInput is an input type that accepts DomainNameEndpointConfigurationArgs and DomainNameEndpointConfigurationOutput values.
// You can construct a concrete instance of `DomainNameEndpointConfigurationInput` via:
//
//          DomainNameEndpointConfigurationArgs{...}
type DomainNameEndpointConfigurationInput interface {
	pulumi.Input

	ToDomainNameEndpointConfigurationOutput() DomainNameEndpointConfigurationOutput
	ToDomainNameEndpointConfigurationOutputWithContext(context.Context) DomainNameEndpointConfigurationOutput
}

type DomainNameEndpointConfigurationArgs struct {
	Types pulumi.StringArrayInput `pulumi:"types"`
}

func (DomainNameEndpointConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainNameEndpointConfiguration)(nil)).Elem()
}

func (i DomainNameEndpointConfigurationArgs) ToDomainNameEndpointConfigurationOutput() DomainNameEndpointConfigurationOutput {
	return i.ToDomainNameEndpointConfigurationOutputWithContext(context.Background())
}

func (i DomainNameEndpointConfigurationArgs) ToDomainNameEndpointConfigurationOutputWithContext(ctx context.Context) DomainNameEndpointConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainNameEndpointConfigurationOutput)
}

func (i DomainNameEndpointConfigurationArgs) ToDomainNameEndpointConfigurationPtrOutput() DomainNameEndpointConfigurationPtrOutput {
	return i.ToDomainNameEndpointConfigurationPtrOutputWithContext(context.Background())
}

func (i DomainNameEndpointConfigurationArgs) ToDomainNameEndpointConfigurationPtrOutputWithContext(ctx context.Context) DomainNameEndpointConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainNameEndpointConfigurationOutput).ToDomainNameEndpointConfigurationPtrOutputWithContext(ctx)
}

// DomainNameEndpointConfigurationPtrInput is an input type that accepts DomainNameEndpointConfigurationArgs, DomainNameEndpointConfigurationPtr and DomainNameEndpointConfigurationPtrOutput values.
// You can construct a concrete instance of `DomainNameEndpointConfigurationPtrInput` via:
//
//          DomainNameEndpointConfigurationArgs{...}
//
//  or:
//
//          nil
type DomainNameEndpointConfigurationPtrInput interface {
	pulumi.Input

	ToDomainNameEndpointConfigurationPtrOutput() DomainNameEndpointConfigurationPtrOutput
	ToDomainNameEndpointConfigurationPtrOutputWithContext(context.Context) DomainNameEndpointConfigurationPtrOutput
}

type domainNameEndpointConfigurationPtrType DomainNameEndpointConfigurationArgs

func DomainNameEndpointConfigurationPtr(v *DomainNameEndpointConfigurationArgs) DomainNameEndpointConfigurationPtrInput {
	return (*domainNameEndpointConfigurationPtrType)(v)
}

func (*domainNameEndpointConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainNameEndpointConfiguration)(nil)).Elem()
}

func (i *domainNameEndpointConfigurationPtrType) ToDomainNameEndpointConfigurationPtrOutput() DomainNameEndpointConfigurationPtrOutput {
	return i.ToDomainNameEndpointConfigurationPtrOutputWithContext(context.Background())
}

func (i *domainNameEndpointConfigurationPtrType) ToDomainNameEndpointConfigurationPtrOutputWithContext(ctx context.Context) DomainNameEndpointConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainNameEndpointConfigurationPtrOutput)
}

type DomainNameEndpointConfigurationOutput struct{ *pulumi.OutputState }

func (DomainNameEndpointConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainNameEndpointConfiguration)(nil)).Elem()
}

func (o DomainNameEndpointConfigurationOutput) ToDomainNameEndpointConfigurationOutput() DomainNameEndpointConfigurationOutput {
	return o
}

func (o DomainNameEndpointConfigurationOutput) ToDomainNameEndpointConfigurationOutputWithContext(ctx context.Context) DomainNameEndpointConfigurationOutput {
	return o
}

func (o DomainNameEndpointConfigurationOutput) ToDomainNameEndpointConfigurationPtrOutput() DomainNameEndpointConfigurationPtrOutput {
	return o.ToDomainNameEndpointConfigurationPtrOutputWithContext(context.Background())
}

func (o DomainNameEndpointConfigurationOutput) ToDomainNameEndpointConfigurationPtrOutputWithContext(ctx context.Context) DomainNameEndpointConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DomainNameEndpointConfiguration) *DomainNameEndpointConfiguration {
		return &v
	}).(DomainNameEndpointConfigurationPtrOutput)
}

func (o DomainNameEndpointConfigurationOutput) Types() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DomainNameEndpointConfiguration) []string { return v.Types }).(pulumi.StringArrayOutput)
}

type DomainNameEndpointConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DomainNameEndpointConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainNameEndpointConfiguration)(nil)).Elem()
}

func (o DomainNameEndpointConfigurationPtrOutput) ToDomainNameEndpointConfigurationPtrOutput() DomainNameEndpointConfigurationPtrOutput {
	return o
}

func (o DomainNameEndpointConfigurationPtrOutput) ToDomainNameEndpointConfigurationPtrOutputWithContext(ctx context.Context) DomainNameEndpointConfigurationPtrOutput {
	return o
}

func (o DomainNameEndpointConfigurationPtrOutput) Elem() DomainNameEndpointConfigurationOutput {
	return o.ApplyT(func(v *DomainNameEndpointConfiguration) DomainNameEndpointConfiguration {
		if v != nil {
			return *v
		}
		var ret DomainNameEndpointConfiguration
		return ret
	}).(DomainNameEndpointConfigurationOutput)
}

func (o DomainNameEndpointConfigurationPtrOutput) Types() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DomainNameEndpointConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.Types
	}).(pulumi.StringArrayOutput)
}

type DomainNameMutualTlsAuthentication struct {
	TruststoreUri     *string `pulumi:"truststoreUri"`
	TruststoreVersion *string `pulumi:"truststoreVersion"`
}

// DomainNameMutualTlsAuthenticationInput is an input type that accepts DomainNameMutualTlsAuthenticationArgs and DomainNameMutualTlsAuthenticationOutput values.
// You can construct a concrete instance of `DomainNameMutualTlsAuthenticationInput` via:
//
//          DomainNameMutualTlsAuthenticationArgs{...}
type DomainNameMutualTlsAuthenticationInput interface {
	pulumi.Input

	ToDomainNameMutualTlsAuthenticationOutput() DomainNameMutualTlsAuthenticationOutput
	ToDomainNameMutualTlsAuthenticationOutputWithContext(context.Context) DomainNameMutualTlsAuthenticationOutput
}

type DomainNameMutualTlsAuthenticationArgs struct {
	TruststoreUri     pulumi.StringPtrInput `pulumi:"truststoreUri"`
	TruststoreVersion pulumi.StringPtrInput `pulumi:"truststoreVersion"`
}

func (DomainNameMutualTlsAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainNameMutualTlsAuthentication)(nil)).Elem()
}

func (i DomainNameMutualTlsAuthenticationArgs) ToDomainNameMutualTlsAuthenticationOutput() DomainNameMutualTlsAuthenticationOutput {
	return i.ToDomainNameMutualTlsAuthenticationOutputWithContext(context.Background())
}

func (i DomainNameMutualTlsAuthenticationArgs) ToDomainNameMutualTlsAuthenticationOutputWithContext(ctx context.Context) DomainNameMutualTlsAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainNameMutualTlsAuthenticationOutput)
}

func (i DomainNameMutualTlsAuthenticationArgs) ToDomainNameMutualTlsAuthenticationPtrOutput() DomainNameMutualTlsAuthenticationPtrOutput {
	return i.ToDomainNameMutualTlsAuthenticationPtrOutputWithContext(context.Background())
}

func (i DomainNameMutualTlsAuthenticationArgs) ToDomainNameMutualTlsAuthenticationPtrOutputWithContext(ctx context.Context) DomainNameMutualTlsAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainNameMutualTlsAuthenticationOutput).ToDomainNameMutualTlsAuthenticationPtrOutputWithContext(ctx)
}

// DomainNameMutualTlsAuthenticationPtrInput is an input type that accepts DomainNameMutualTlsAuthenticationArgs, DomainNameMutualTlsAuthenticationPtr and DomainNameMutualTlsAuthenticationPtrOutput values.
// You can construct a concrete instance of `DomainNameMutualTlsAuthenticationPtrInput` via:
//
//          DomainNameMutualTlsAuthenticationArgs{...}
//
//  or:
//
//          nil
type DomainNameMutualTlsAuthenticationPtrInput interface {
	pulumi.Input

	ToDomainNameMutualTlsAuthenticationPtrOutput() DomainNameMutualTlsAuthenticationPtrOutput
	ToDomainNameMutualTlsAuthenticationPtrOutputWithContext(context.Context) DomainNameMutualTlsAuthenticationPtrOutput
}

type domainNameMutualTlsAuthenticationPtrType DomainNameMutualTlsAuthenticationArgs

func DomainNameMutualTlsAuthenticationPtr(v *DomainNameMutualTlsAuthenticationArgs) DomainNameMutualTlsAuthenticationPtrInput {
	return (*domainNameMutualTlsAuthenticationPtrType)(v)
}

func (*domainNameMutualTlsAuthenticationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainNameMutualTlsAuthentication)(nil)).Elem()
}

func (i *domainNameMutualTlsAuthenticationPtrType) ToDomainNameMutualTlsAuthenticationPtrOutput() DomainNameMutualTlsAuthenticationPtrOutput {
	return i.ToDomainNameMutualTlsAuthenticationPtrOutputWithContext(context.Background())
}

func (i *domainNameMutualTlsAuthenticationPtrType) ToDomainNameMutualTlsAuthenticationPtrOutputWithContext(ctx context.Context) DomainNameMutualTlsAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainNameMutualTlsAuthenticationPtrOutput)
}

type DomainNameMutualTlsAuthenticationOutput struct{ *pulumi.OutputState }

func (DomainNameMutualTlsAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainNameMutualTlsAuthentication)(nil)).Elem()
}

func (o DomainNameMutualTlsAuthenticationOutput) ToDomainNameMutualTlsAuthenticationOutput() DomainNameMutualTlsAuthenticationOutput {
	return o
}

func (o DomainNameMutualTlsAuthenticationOutput) ToDomainNameMutualTlsAuthenticationOutputWithContext(ctx context.Context) DomainNameMutualTlsAuthenticationOutput {
	return o
}

func (o DomainNameMutualTlsAuthenticationOutput) ToDomainNameMutualTlsAuthenticationPtrOutput() DomainNameMutualTlsAuthenticationPtrOutput {
	return o.ToDomainNameMutualTlsAuthenticationPtrOutputWithContext(context.Background())
}

func (o DomainNameMutualTlsAuthenticationOutput) ToDomainNameMutualTlsAuthenticationPtrOutputWithContext(ctx context.Context) DomainNameMutualTlsAuthenticationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DomainNameMutualTlsAuthentication) *DomainNameMutualTlsAuthentication {
		return &v
	}).(DomainNameMutualTlsAuthenticationPtrOutput)
}

func (o DomainNameMutualTlsAuthenticationOutput) TruststoreUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainNameMutualTlsAuthentication) *string { return v.TruststoreUri }).(pulumi.StringPtrOutput)
}

func (o DomainNameMutualTlsAuthenticationOutput) TruststoreVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainNameMutualTlsAuthentication) *string { return v.TruststoreVersion }).(pulumi.StringPtrOutput)
}

type DomainNameMutualTlsAuthenticationPtrOutput struct{ *pulumi.OutputState }

func (DomainNameMutualTlsAuthenticationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainNameMutualTlsAuthentication)(nil)).Elem()
}

func (o DomainNameMutualTlsAuthenticationPtrOutput) ToDomainNameMutualTlsAuthenticationPtrOutput() DomainNameMutualTlsAuthenticationPtrOutput {
	return o
}

func (o DomainNameMutualTlsAuthenticationPtrOutput) ToDomainNameMutualTlsAuthenticationPtrOutputWithContext(ctx context.Context) DomainNameMutualTlsAuthenticationPtrOutput {
	return o
}

func (o DomainNameMutualTlsAuthenticationPtrOutput) Elem() DomainNameMutualTlsAuthenticationOutput {
	return o.ApplyT(func(v *DomainNameMutualTlsAuthentication) DomainNameMutualTlsAuthentication {
		if v != nil {
			return *v
		}
		var ret DomainNameMutualTlsAuthentication
		return ret
	}).(DomainNameMutualTlsAuthenticationOutput)
}

func (o DomainNameMutualTlsAuthenticationPtrOutput) TruststoreUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainNameMutualTlsAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.TruststoreUri
	}).(pulumi.StringPtrOutput)
}

func (o DomainNameMutualTlsAuthenticationPtrOutput) TruststoreVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainNameMutualTlsAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.TruststoreVersion
	}).(pulumi.StringPtrOutput)
}

type DomainNameTag struct {
	Key   *string `pulumi:"key"`
	Value *string `pulumi:"value"`
}

// DomainNameTagInput is an input type that accepts DomainNameTagArgs and DomainNameTagOutput values.
// You can construct a concrete instance of `DomainNameTagInput` via:
//
//          DomainNameTagArgs{...}
type DomainNameTagInput interface {
	pulumi.Input

	ToDomainNameTagOutput() DomainNameTagOutput
	ToDomainNameTagOutputWithContext(context.Context) DomainNameTagOutput
}

type DomainNameTagArgs struct {
	Key   pulumi.StringPtrInput `pulumi:"key"`
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (DomainNameTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainNameTag)(nil)).Elem()
}

func (i DomainNameTagArgs) ToDomainNameTagOutput() DomainNameTagOutput {
	return i.ToDomainNameTagOutputWithContext(context.Background())
}

func (i DomainNameTagArgs) ToDomainNameTagOutputWithContext(ctx context.Context) DomainNameTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainNameTagOutput)
}

// DomainNameTagArrayInput is an input type that accepts DomainNameTagArray and DomainNameTagArrayOutput values.
// You can construct a concrete instance of `DomainNameTagArrayInput` via:
//
//          DomainNameTagArray{ DomainNameTagArgs{...} }
type DomainNameTagArrayInput interface {
	pulumi.Input

	ToDomainNameTagArrayOutput() DomainNameTagArrayOutput
	ToDomainNameTagArrayOutputWithContext(context.Context) DomainNameTagArrayOutput
}

type DomainNameTagArray []DomainNameTagInput

func (DomainNameTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainNameTag)(nil)).Elem()
}

func (i DomainNameTagArray) ToDomainNameTagArrayOutput() DomainNameTagArrayOutput {
	return i.ToDomainNameTagArrayOutputWithContext(context.Background())
}

func (i DomainNameTagArray) ToDomainNameTagArrayOutputWithContext(ctx context.Context) DomainNameTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainNameTagArrayOutput)
}

type DomainNameTagOutput struct{ *pulumi.OutputState }

func (DomainNameTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainNameTag)(nil)).Elem()
}

func (o DomainNameTagOutput) ToDomainNameTagOutput() DomainNameTagOutput {
	return o
}

func (o DomainNameTagOutput) ToDomainNameTagOutputWithContext(ctx context.Context) DomainNameTagOutput {
	return o
}

func (o DomainNameTagOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainNameTag) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o DomainNameTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainNameTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type DomainNameTagArrayOutput struct{ *pulumi.OutputState }

func (DomainNameTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainNameTag)(nil)).Elem()
}

func (o DomainNameTagArrayOutput) ToDomainNameTagArrayOutput() DomainNameTagArrayOutput {
	return o
}

func (o DomainNameTagArrayOutput) ToDomainNameTagArrayOutputWithContext(ctx context.Context) DomainNameTagArrayOutput {
	return o
}

func (o DomainNameTagArrayOutput) Index(i pulumi.IntInput) DomainNameTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DomainNameTag {
		return vs[0].([]DomainNameTag)[vs[1].(int)]
	}).(DomainNameTagOutput)
}

type UsagePlanApiStage struct {
	// The ID of an API that is in the specified Stage property that you want to associate with the usage plan.
	ApiId *string `pulumi:"apiId"`
	// The name of the stage to associate with the usage plan.
	Stage *string `pulumi:"stage"`
	// Map containing method-level throttling information for an API stage in a usage plan. The key for the map is the path and method for which to configure custom throttling, for example, '/pets/GET'. Duplicates are not allowed.
	Throttle interface{} `pulumi:"throttle"`
}

// UsagePlanApiStageInput is an input type that accepts UsagePlanApiStageArgs and UsagePlanApiStageOutput values.
// You can construct a concrete instance of `UsagePlanApiStageInput` via:
//
//          UsagePlanApiStageArgs{...}
type UsagePlanApiStageInput interface {
	pulumi.Input

	ToUsagePlanApiStageOutput() UsagePlanApiStageOutput
	ToUsagePlanApiStageOutputWithContext(context.Context) UsagePlanApiStageOutput
}

type UsagePlanApiStageArgs struct {
	// The ID of an API that is in the specified Stage property that you want to associate with the usage plan.
	ApiId pulumi.StringPtrInput `pulumi:"apiId"`
	// The name of the stage to associate with the usage plan.
	Stage pulumi.StringPtrInput `pulumi:"stage"`
	// Map containing method-level throttling information for an API stage in a usage plan. The key for the map is the path and method for which to configure custom throttling, for example, '/pets/GET'. Duplicates are not allowed.
	Throttle pulumi.Input `pulumi:"throttle"`
}

func (UsagePlanApiStageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UsagePlanApiStage)(nil)).Elem()
}

func (i UsagePlanApiStageArgs) ToUsagePlanApiStageOutput() UsagePlanApiStageOutput {
	return i.ToUsagePlanApiStageOutputWithContext(context.Background())
}

func (i UsagePlanApiStageArgs) ToUsagePlanApiStageOutputWithContext(ctx context.Context) UsagePlanApiStageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsagePlanApiStageOutput)
}

// UsagePlanApiStageArrayInput is an input type that accepts UsagePlanApiStageArray and UsagePlanApiStageArrayOutput values.
// You can construct a concrete instance of `UsagePlanApiStageArrayInput` via:
//
//          UsagePlanApiStageArray{ UsagePlanApiStageArgs{...} }
type UsagePlanApiStageArrayInput interface {
	pulumi.Input

	ToUsagePlanApiStageArrayOutput() UsagePlanApiStageArrayOutput
	ToUsagePlanApiStageArrayOutputWithContext(context.Context) UsagePlanApiStageArrayOutput
}

type UsagePlanApiStageArray []UsagePlanApiStageInput

func (UsagePlanApiStageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UsagePlanApiStage)(nil)).Elem()
}

func (i UsagePlanApiStageArray) ToUsagePlanApiStageArrayOutput() UsagePlanApiStageArrayOutput {
	return i.ToUsagePlanApiStageArrayOutputWithContext(context.Background())
}

func (i UsagePlanApiStageArray) ToUsagePlanApiStageArrayOutputWithContext(ctx context.Context) UsagePlanApiStageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsagePlanApiStageArrayOutput)
}

type UsagePlanApiStageOutput struct{ *pulumi.OutputState }

func (UsagePlanApiStageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UsagePlanApiStage)(nil)).Elem()
}

func (o UsagePlanApiStageOutput) ToUsagePlanApiStageOutput() UsagePlanApiStageOutput {
	return o
}

func (o UsagePlanApiStageOutput) ToUsagePlanApiStageOutputWithContext(ctx context.Context) UsagePlanApiStageOutput {
	return o
}

// The ID of an API that is in the specified Stage property that you want to associate with the usage plan.
func (o UsagePlanApiStageOutput) ApiId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UsagePlanApiStage) *string { return v.ApiId }).(pulumi.StringPtrOutput)
}

// The name of the stage to associate with the usage plan.
func (o UsagePlanApiStageOutput) Stage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UsagePlanApiStage) *string { return v.Stage }).(pulumi.StringPtrOutput)
}

// Map containing method-level throttling information for an API stage in a usage plan. The key for the map is the path and method for which to configure custom throttling, for example, '/pets/GET'. Duplicates are not allowed.
func (o UsagePlanApiStageOutput) Throttle() pulumi.AnyOutput {
	return o.ApplyT(func(v UsagePlanApiStage) interface{} { return v.Throttle }).(pulumi.AnyOutput)
}

type UsagePlanApiStageArrayOutput struct{ *pulumi.OutputState }

func (UsagePlanApiStageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UsagePlanApiStage)(nil)).Elem()
}

func (o UsagePlanApiStageArrayOutput) ToUsagePlanApiStageArrayOutput() UsagePlanApiStageArrayOutput {
	return o
}

func (o UsagePlanApiStageArrayOutput) ToUsagePlanApiStageArrayOutputWithContext(ctx context.Context) UsagePlanApiStageArrayOutput {
	return o
}

func (o UsagePlanApiStageArrayOutput) Index(i pulumi.IntInput) UsagePlanApiStageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UsagePlanApiStage {
		return vs[0].([]UsagePlanApiStage)[vs[1].(int)]
	}).(UsagePlanApiStageOutput)
}

type UsagePlanQuotaSettings struct {
	// The maximum number of requests that users can make within the specified time period.
	Limit *int `pulumi:"limit"`
	// For the initial time period, the number of requests to subtract from the specified limit. When you first implement a usage plan, the plan might start in the middle of the week or month. With this property, you can decrease the limit for this initial time period.
	Offset *int `pulumi:"offset"`
	// The time period for which the maximum limit of requests applies, such as DAY or WEEK. For valid values, see the period property for the UsagePlan resource in the Amazon API Gateway REST API Reference.
	Period *string `pulumi:"period"`
}

// UsagePlanQuotaSettingsInput is an input type that accepts UsagePlanQuotaSettingsArgs and UsagePlanQuotaSettingsOutput values.
// You can construct a concrete instance of `UsagePlanQuotaSettingsInput` via:
//
//          UsagePlanQuotaSettingsArgs{...}
type UsagePlanQuotaSettingsInput interface {
	pulumi.Input

	ToUsagePlanQuotaSettingsOutput() UsagePlanQuotaSettingsOutput
	ToUsagePlanQuotaSettingsOutputWithContext(context.Context) UsagePlanQuotaSettingsOutput
}

type UsagePlanQuotaSettingsArgs struct {
	// The maximum number of requests that users can make within the specified time period.
	Limit pulumi.IntPtrInput `pulumi:"limit"`
	// For the initial time period, the number of requests to subtract from the specified limit. When you first implement a usage plan, the plan might start in the middle of the week or month. With this property, you can decrease the limit for this initial time period.
	Offset pulumi.IntPtrInput `pulumi:"offset"`
	// The time period for which the maximum limit of requests applies, such as DAY or WEEK. For valid values, see the period property for the UsagePlan resource in the Amazon API Gateway REST API Reference.
	Period pulumi.StringPtrInput `pulumi:"period"`
}

func (UsagePlanQuotaSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UsagePlanQuotaSettings)(nil)).Elem()
}

func (i UsagePlanQuotaSettingsArgs) ToUsagePlanQuotaSettingsOutput() UsagePlanQuotaSettingsOutput {
	return i.ToUsagePlanQuotaSettingsOutputWithContext(context.Background())
}

func (i UsagePlanQuotaSettingsArgs) ToUsagePlanQuotaSettingsOutputWithContext(ctx context.Context) UsagePlanQuotaSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsagePlanQuotaSettingsOutput)
}

func (i UsagePlanQuotaSettingsArgs) ToUsagePlanQuotaSettingsPtrOutput() UsagePlanQuotaSettingsPtrOutput {
	return i.ToUsagePlanQuotaSettingsPtrOutputWithContext(context.Background())
}

func (i UsagePlanQuotaSettingsArgs) ToUsagePlanQuotaSettingsPtrOutputWithContext(ctx context.Context) UsagePlanQuotaSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsagePlanQuotaSettingsOutput).ToUsagePlanQuotaSettingsPtrOutputWithContext(ctx)
}

// UsagePlanQuotaSettingsPtrInput is an input type that accepts UsagePlanQuotaSettingsArgs, UsagePlanQuotaSettingsPtr and UsagePlanQuotaSettingsPtrOutput values.
// You can construct a concrete instance of `UsagePlanQuotaSettingsPtrInput` via:
//
//          UsagePlanQuotaSettingsArgs{...}
//
//  or:
//
//          nil
type UsagePlanQuotaSettingsPtrInput interface {
	pulumi.Input

	ToUsagePlanQuotaSettingsPtrOutput() UsagePlanQuotaSettingsPtrOutput
	ToUsagePlanQuotaSettingsPtrOutputWithContext(context.Context) UsagePlanQuotaSettingsPtrOutput
}

type usagePlanQuotaSettingsPtrType UsagePlanQuotaSettingsArgs

func UsagePlanQuotaSettingsPtr(v *UsagePlanQuotaSettingsArgs) UsagePlanQuotaSettingsPtrInput {
	return (*usagePlanQuotaSettingsPtrType)(v)
}

func (*usagePlanQuotaSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UsagePlanQuotaSettings)(nil)).Elem()
}

func (i *usagePlanQuotaSettingsPtrType) ToUsagePlanQuotaSettingsPtrOutput() UsagePlanQuotaSettingsPtrOutput {
	return i.ToUsagePlanQuotaSettingsPtrOutputWithContext(context.Background())
}

func (i *usagePlanQuotaSettingsPtrType) ToUsagePlanQuotaSettingsPtrOutputWithContext(ctx context.Context) UsagePlanQuotaSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsagePlanQuotaSettingsPtrOutput)
}

type UsagePlanQuotaSettingsOutput struct{ *pulumi.OutputState }

func (UsagePlanQuotaSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UsagePlanQuotaSettings)(nil)).Elem()
}

func (o UsagePlanQuotaSettingsOutput) ToUsagePlanQuotaSettingsOutput() UsagePlanQuotaSettingsOutput {
	return o
}

func (o UsagePlanQuotaSettingsOutput) ToUsagePlanQuotaSettingsOutputWithContext(ctx context.Context) UsagePlanQuotaSettingsOutput {
	return o
}

func (o UsagePlanQuotaSettingsOutput) ToUsagePlanQuotaSettingsPtrOutput() UsagePlanQuotaSettingsPtrOutput {
	return o.ToUsagePlanQuotaSettingsPtrOutputWithContext(context.Background())
}

func (o UsagePlanQuotaSettingsOutput) ToUsagePlanQuotaSettingsPtrOutputWithContext(ctx context.Context) UsagePlanQuotaSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UsagePlanQuotaSettings) *UsagePlanQuotaSettings {
		return &v
	}).(UsagePlanQuotaSettingsPtrOutput)
}

// The maximum number of requests that users can make within the specified time period.
func (o UsagePlanQuotaSettingsOutput) Limit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v UsagePlanQuotaSettings) *int { return v.Limit }).(pulumi.IntPtrOutput)
}

// For the initial time period, the number of requests to subtract from the specified limit. When you first implement a usage plan, the plan might start in the middle of the week or month. With this property, you can decrease the limit for this initial time period.
func (o UsagePlanQuotaSettingsOutput) Offset() pulumi.IntPtrOutput {
	return o.ApplyT(func(v UsagePlanQuotaSettings) *int { return v.Offset }).(pulumi.IntPtrOutput)
}

// The time period for which the maximum limit of requests applies, such as DAY or WEEK. For valid values, see the period property for the UsagePlan resource in the Amazon API Gateway REST API Reference.
func (o UsagePlanQuotaSettingsOutput) Period() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UsagePlanQuotaSettings) *string { return v.Period }).(pulumi.StringPtrOutput)
}

type UsagePlanQuotaSettingsPtrOutput struct{ *pulumi.OutputState }

func (UsagePlanQuotaSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UsagePlanQuotaSettings)(nil)).Elem()
}

func (o UsagePlanQuotaSettingsPtrOutput) ToUsagePlanQuotaSettingsPtrOutput() UsagePlanQuotaSettingsPtrOutput {
	return o
}

func (o UsagePlanQuotaSettingsPtrOutput) ToUsagePlanQuotaSettingsPtrOutputWithContext(ctx context.Context) UsagePlanQuotaSettingsPtrOutput {
	return o
}

func (o UsagePlanQuotaSettingsPtrOutput) Elem() UsagePlanQuotaSettingsOutput {
	return o.ApplyT(func(v *UsagePlanQuotaSettings) UsagePlanQuotaSettings {
		if v != nil {
			return *v
		}
		var ret UsagePlanQuotaSettings
		return ret
	}).(UsagePlanQuotaSettingsOutput)
}

// The maximum number of requests that users can make within the specified time period.
func (o UsagePlanQuotaSettingsPtrOutput) Limit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *UsagePlanQuotaSettings) *int {
		if v == nil {
			return nil
		}
		return v.Limit
	}).(pulumi.IntPtrOutput)
}

// For the initial time period, the number of requests to subtract from the specified limit. When you first implement a usage plan, the plan might start in the middle of the week or month. With this property, you can decrease the limit for this initial time period.
func (o UsagePlanQuotaSettingsPtrOutput) Offset() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *UsagePlanQuotaSettings) *int {
		if v == nil {
			return nil
		}
		return v.Offset
	}).(pulumi.IntPtrOutput)
}

// The time period for which the maximum limit of requests applies, such as DAY or WEEK. For valid values, see the period property for the UsagePlan resource in the Amazon API Gateway REST API Reference.
func (o UsagePlanQuotaSettingsPtrOutput) Period() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UsagePlanQuotaSettings) *string {
		if v == nil {
			return nil
		}
		return v.Period
	}).(pulumi.StringPtrOutput)
}

type UsagePlanTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// UsagePlanTagInput is an input type that accepts UsagePlanTagArgs and UsagePlanTagOutput values.
// You can construct a concrete instance of `UsagePlanTagInput` via:
//
//          UsagePlanTagArgs{...}
type UsagePlanTagInput interface {
	pulumi.Input

	ToUsagePlanTagOutput() UsagePlanTagOutput
	ToUsagePlanTagOutputWithContext(context.Context) UsagePlanTagOutput
}

type UsagePlanTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringInput `pulumi:"value"`
}

func (UsagePlanTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UsagePlanTag)(nil)).Elem()
}

func (i UsagePlanTagArgs) ToUsagePlanTagOutput() UsagePlanTagOutput {
	return i.ToUsagePlanTagOutputWithContext(context.Background())
}

func (i UsagePlanTagArgs) ToUsagePlanTagOutputWithContext(ctx context.Context) UsagePlanTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsagePlanTagOutput)
}

// UsagePlanTagArrayInput is an input type that accepts UsagePlanTagArray and UsagePlanTagArrayOutput values.
// You can construct a concrete instance of `UsagePlanTagArrayInput` via:
//
//          UsagePlanTagArray{ UsagePlanTagArgs{...} }
type UsagePlanTagArrayInput interface {
	pulumi.Input

	ToUsagePlanTagArrayOutput() UsagePlanTagArrayOutput
	ToUsagePlanTagArrayOutputWithContext(context.Context) UsagePlanTagArrayOutput
}

type UsagePlanTagArray []UsagePlanTagInput

func (UsagePlanTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UsagePlanTag)(nil)).Elem()
}

func (i UsagePlanTagArray) ToUsagePlanTagArrayOutput() UsagePlanTagArrayOutput {
	return i.ToUsagePlanTagArrayOutputWithContext(context.Background())
}

func (i UsagePlanTagArray) ToUsagePlanTagArrayOutputWithContext(ctx context.Context) UsagePlanTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsagePlanTagArrayOutput)
}

type UsagePlanTagOutput struct{ *pulumi.OutputState }

func (UsagePlanTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UsagePlanTag)(nil)).Elem()
}

func (o UsagePlanTagOutput) ToUsagePlanTagOutput() UsagePlanTagOutput {
	return o
}

func (o UsagePlanTagOutput) ToUsagePlanTagOutputWithContext(ctx context.Context) UsagePlanTagOutput {
	return o
}

// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o UsagePlanTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v UsagePlanTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o UsagePlanTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v UsagePlanTag) string { return v.Value }).(pulumi.StringOutput)
}

type UsagePlanTagArrayOutput struct{ *pulumi.OutputState }

func (UsagePlanTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UsagePlanTag)(nil)).Elem()
}

func (o UsagePlanTagArrayOutput) ToUsagePlanTagArrayOutput() UsagePlanTagArrayOutput {
	return o
}

func (o UsagePlanTagArrayOutput) ToUsagePlanTagArrayOutputWithContext(ctx context.Context) UsagePlanTagArrayOutput {
	return o
}

func (o UsagePlanTagArrayOutput) Index(i pulumi.IntInput) UsagePlanTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UsagePlanTag {
		return vs[0].([]UsagePlanTag)[vs[1].(int)]
	}).(UsagePlanTagOutput)
}

type UsagePlanThrottleSettings struct {
	// The maximum API request rate limit over a time ranging from one to a few seconds. The maximum API request rate limit depends on whether the underlying token bucket is at its full capacity.
	BurstLimit *int `pulumi:"burstLimit"`
	// The API request steady-state rate limit (average requests per second over an extended period of time).
	RateLimit *float64 `pulumi:"rateLimit"`
}

// UsagePlanThrottleSettingsInput is an input type that accepts UsagePlanThrottleSettingsArgs and UsagePlanThrottleSettingsOutput values.
// You can construct a concrete instance of `UsagePlanThrottleSettingsInput` via:
//
//          UsagePlanThrottleSettingsArgs{...}
type UsagePlanThrottleSettingsInput interface {
	pulumi.Input

	ToUsagePlanThrottleSettingsOutput() UsagePlanThrottleSettingsOutput
	ToUsagePlanThrottleSettingsOutputWithContext(context.Context) UsagePlanThrottleSettingsOutput
}

type UsagePlanThrottleSettingsArgs struct {
	// The maximum API request rate limit over a time ranging from one to a few seconds. The maximum API request rate limit depends on whether the underlying token bucket is at its full capacity.
	BurstLimit pulumi.IntPtrInput `pulumi:"burstLimit"`
	// The API request steady-state rate limit (average requests per second over an extended period of time).
	RateLimit pulumi.Float64PtrInput `pulumi:"rateLimit"`
}

func (UsagePlanThrottleSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UsagePlanThrottleSettings)(nil)).Elem()
}

func (i UsagePlanThrottleSettingsArgs) ToUsagePlanThrottleSettingsOutput() UsagePlanThrottleSettingsOutput {
	return i.ToUsagePlanThrottleSettingsOutputWithContext(context.Background())
}

func (i UsagePlanThrottleSettingsArgs) ToUsagePlanThrottleSettingsOutputWithContext(ctx context.Context) UsagePlanThrottleSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsagePlanThrottleSettingsOutput)
}

func (i UsagePlanThrottleSettingsArgs) ToUsagePlanThrottleSettingsPtrOutput() UsagePlanThrottleSettingsPtrOutput {
	return i.ToUsagePlanThrottleSettingsPtrOutputWithContext(context.Background())
}

func (i UsagePlanThrottleSettingsArgs) ToUsagePlanThrottleSettingsPtrOutputWithContext(ctx context.Context) UsagePlanThrottleSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsagePlanThrottleSettingsOutput).ToUsagePlanThrottleSettingsPtrOutputWithContext(ctx)
}

// UsagePlanThrottleSettingsPtrInput is an input type that accepts UsagePlanThrottleSettingsArgs, UsagePlanThrottleSettingsPtr and UsagePlanThrottleSettingsPtrOutput values.
// You can construct a concrete instance of `UsagePlanThrottleSettingsPtrInput` via:
//
//          UsagePlanThrottleSettingsArgs{...}
//
//  or:
//
//          nil
type UsagePlanThrottleSettingsPtrInput interface {
	pulumi.Input

	ToUsagePlanThrottleSettingsPtrOutput() UsagePlanThrottleSettingsPtrOutput
	ToUsagePlanThrottleSettingsPtrOutputWithContext(context.Context) UsagePlanThrottleSettingsPtrOutput
}

type usagePlanThrottleSettingsPtrType UsagePlanThrottleSettingsArgs

func UsagePlanThrottleSettingsPtr(v *UsagePlanThrottleSettingsArgs) UsagePlanThrottleSettingsPtrInput {
	return (*usagePlanThrottleSettingsPtrType)(v)
}

func (*usagePlanThrottleSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UsagePlanThrottleSettings)(nil)).Elem()
}

func (i *usagePlanThrottleSettingsPtrType) ToUsagePlanThrottleSettingsPtrOutput() UsagePlanThrottleSettingsPtrOutput {
	return i.ToUsagePlanThrottleSettingsPtrOutputWithContext(context.Background())
}

func (i *usagePlanThrottleSettingsPtrType) ToUsagePlanThrottleSettingsPtrOutputWithContext(ctx context.Context) UsagePlanThrottleSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsagePlanThrottleSettingsPtrOutput)
}

type UsagePlanThrottleSettingsOutput struct{ *pulumi.OutputState }

func (UsagePlanThrottleSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UsagePlanThrottleSettings)(nil)).Elem()
}

func (o UsagePlanThrottleSettingsOutput) ToUsagePlanThrottleSettingsOutput() UsagePlanThrottleSettingsOutput {
	return o
}

func (o UsagePlanThrottleSettingsOutput) ToUsagePlanThrottleSettingsOutputWithContext(ctx context.Context) UsagePlanThrottleSettingsOutput {
	return o
}

func (o UsagePlanThrottleSettingsOutput) ToUsagePlanThrottleSettingsPtrOutput() UsagePlanThrottleSettingsPtrOutput {
	return o.ToUsagePlanThrottleSettingsPtrOutputWithContext(context.Background())
}

func (o UsagePlanThrottleSettingsOutput) ToUsagePlanThrottleSettingsPtrOutputWithContext(ctx context.Context) UsagePlanThrottleSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UsagePlanThrottleSettings) *UsagePlanThrottleSettings {
		return &v
	}).(UsagePlanThrottleSettingsPtrOutput)
}

// The maximum API request rate limit over a time ranging from one to a few seconds. The maximum API request rate limit depends on whether the underlying token bucket is at its full capacity.
func (o UsagePlanThrottleSettingsOutput) BurstLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v UsagePlanThrottleSettings) *int { return v.BurstLimit }).(pulumi.IntPtrOutput)
}

// The API request steady-state rate limit (average requests per second over an extended period of time).
func (o UsagePlanThrottleSettingsOutput) RateLimit() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v UsagePlanThrottleSettings) *float64 { return v.RateLimit }).(pulumi.Float64PtrOutput)
}

type UsagePlanThrottleSettingsPtrOutput struct{ *pulumi.OutputState }

func (UsagePlanThrottleSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UsagePlanThrottleSettings)(nil)).Elem()
}

func (o UsagePlanThrottleSettingsPtrOutput) ToUsagePlanThrottleSettingsPtrOutput() UsagePlanThrottleSettingsPtrOutput {
	return o
}

func (o UsagePlanThrottleSettingsPtrOutput) ToUsagePlanThrottleSettingsPtrOutputWithContext(ctx context.Context) UsagePlanThrottleSettingsPtrOutput {
	return o
}

func (o UsagePlanThrottleSettingsPtrOutput) Elem() UsagePlanThrottleSettingsOutput {
	return o.ApplyT(func(v *UsagePlanThrottleSettings) UsagePlanThrottleSettings {
		if v != nil {
			return *v
		}
		var ret UsagePlanThrottleSettings
		return ret
	}).(UsagePlanThrottleSettingsOutput)
}

// The maximum API request rate limit over a time ranging from one to a few seconds. The maximum API request rate limit depends on whether the underlying token bucket is at its full capacity.
func (o UsagePlanThrottleSettingsPtrOutput) BurstLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *UsagePlanThrottleSettings) *int {
		if v == nil {
			return nil
		}
		return v.BurstLimit
	}).(pulumi.IntPtrOutput)
}

// The API request steady-state rate limit (average requests per second over an extended period of time).
func (o UsagePlanThrottleSettingsPtrOutput) RateLimit() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *UsagePlanThrottleSettings) *float64 {
		if v == nil {
			return nil
		}
		return v.RateLimit
	}).(pulumi.Float64PtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ApiKeyStageKeyOutput{})
	pulumi.RegisterOutputType(ApiKeyStageKeyArrayOutput{})
	pulumi.RegisterOutputType(ApiKeyTagOutput{})
	pulumi.RegisterOutputType(ApiKeyTagArrayOutput{})
	pulumi.RegisterOutputType(ClientCertificateTagOutput{})
	pulumi.RegisterOutputType(ClientCertificateTagArrayOutput{})
	pulumi.RegisterOutputType(DomainNameEndpointConfigurationOutput{})
	pulumi.RegisterOutputType(DomainNameEndpointConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DomainNameMutualTlsAuthenticationOutput{})
	pulumi.RegisterOutputType(DomainNameMutualTlsAuthenticationPtrOutput{})
	pulumi.RegisterOutputType(DomainNameTagOutput{})
	pulumi.RegisterOutputType(DomainNameTagArrayOutput{})
	pulumi.RegisterOutputType(UsagePlanApiStageOutput{})
	pulumi.RegisterOutputType(UsagePlanApiStageArrayOutput{})
	pulumi.RegisterOutputType(UsagePlanQuotaSettingsOutput{})
	pulumi.RegisterOutputType(UsagePlanQuotaSettingsPtrOutput{})
	pulumi.RegisterOutputType(UsagePlanTagOutput{})
	pulumi.RegisterOutputType(UsagePlanTagArrayOutput{})
	pulumi.RegisterOutputType(UsagePlanThrottleSettingsOutput{})
	pulumi.RegisterOutputType(UsagePlanThrottleSettingsPtrOutput{})
}
