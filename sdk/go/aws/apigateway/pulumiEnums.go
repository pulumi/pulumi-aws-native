// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The type of API entity to which the documentation content applies. Valid values are “API“, “AUTHORIZER“, “MODEL“, “RESOURCE“, “METHOD“, “PATH_PARAMETER“, “QUERY_PARAMETER“, “REQUEST_HEADER“, “REQUEST_BODY“, “RESPONSE“, “RESPONSE_HEADER“, and “RESPONSE_BODY“. Content inheritance does not apply to any entity of the “API“, “AUTHORIZER“, “METHOD“, “MODEL“, “REQUEST_BODY“, or “RESOURCE“ type.
type DocumentationPartLocationType string

const (
	DocumentationPartLocationTypeApi            = DocumentationPartLocationType("API")
	DocumentationPartLocationTypeAuthorizer     = DocumentationPartLocationType("AUTHORIZER")
	DocumentationPartLocationTypeModel          = DocumentationPartLocationType("MODEL")
	DocumentationPartLocationTypeResource       = DocumentationPartLocationType("RESOURCE")
	DocumentationPartLocationTypeMethod         = DocumentationPartLocationType("METHOD")
	DocumentationPartLocationTypePathParameter  = DocumentationPartLocationType("PATH_PARAMETER")
	DocumentationPartLocationTypeQueryParameter = DocumentationPartLocationType("QUERY_PARAMETER")
	DocumentationPartLocationTypeRequestHeader  = DocumentationPartLocationType("REQUEST_HEADER")
	DocumentationPartLocationTypeRequestBody    = DocumentationPartLocationType("REQUEST_BODY")
	DocumentationPartLocationTypeResponse       = DocumentationPartLocationType("RESPONSE")
	DocumentationPartLocationTypeResponseHeader = DocumentationPartLocationType("RESPONSE_HEADER")
	DocumentationPartLocationTypeResponseBody   = DocumentationPartLocationType("RESPONSE_BODY")
)

func (DocumentationPartLocationType) ElementType() reflect.Type {
	return reflect.TypeOf((*DocumentationPartLocationType)(nil)).Elem()
}

func (e DocumentationPartLocationType) ToDocumentationPartLocationTypeOutput() DocumentationPartLocationTypeOutput {
	return pulumi.ToOutput(e).(DocumentationPartLocationTypeOutput)
}

func (e DocumentationPartLocationType) ToDocumentationPartLocationTypeOutputWithContext(ctx context.Context) DocumentationPartLocationTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DocumentationPartLocationTypeOutput)
}

func (e DocumentationPartLocationType) ToDocumentationPartLocationTypePtrOutput() DocumentationPartLocationTypePtrOutput {
	return e.ToDocumentationPartLocationTypePtrOutputWithContext(context.Background())
}

func (e DocumentationPartLocationType) ToDocumentationPartLocationTypePtrOutputWithContext(ctx context.Context) DocumentationPartLocationTypePtrOutput {
	return DocumentationPartLocationType(e).ToDocumentationPartLocationTypeOutputWithContext(ctx).ToDocumentationPartLocationTypePtrOutputWithContext(ctx)
}

func (e DocumentationPartLocationType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DocumentationPartLocationType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DocumentationPartLocationType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DocumentationPartLocationType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DocumentationPartLocationTypeOutput struct{ *pulumi.OutputState }

func (DocumentationPartLocationTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DocumentationPartLocationType)(nil)).Elem()
}

func (o DocumentationPartLocationTypeOutput) ToDocumentationPartLocationTypeOutput() DocumentationPartLocationTypeOutput {
	return o
}

func (o DocumentationPartLocationTypeOutput) ToDocumentationPartLocationTypeOutputWithContext(ctx context.Context) DocumentationPartLocationTypeOutput {
	return o
}

func (o DocumentationPartLocationTypeOutput) ToDocumentationPartLocationTypePtrOutput() DocumentationPartLocationTypePtrOutput {
	return o.ToDocumentationPartLocationTypePtrOutputWithContext(context.Background())
}

func (o DocumentationPartLocationTypeOutput) ToDocumentationPartLocationTypePtrOutputWithContext(ctx context.Context) DocumentationPartLocationTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DocumentationPartLocationType) *DocumentationPartLocationType {
		return &v
	}).(DocumentationPartLocationTypePtrOutput)
}

func (o DocumentationPartLocationTypeOutput) ToOutput(ctx context.Context) pulumix.Output[DocumentationPartLocationType] {
	return pulumix.Output[DocumentationPartLocationType]{
		OutputState: o.OutputState,
	}
}

func (o DocumentationPartLocationTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DocumentationPartLocationTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DocumentationPartLocationType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DocumentationPartLocationTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DocumentationPartLocationTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DocumentationPartLocationType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DocumentationPartLocationTypePtrOutput struct{ *pulumi.OutputState }

func (DocumentationPartLocationTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DocumentationPartLocationType)(nil)).Elem()
}

func (o DocumentationPartLocationTypePtrOutput) ToDocumentationPartLocationTypePtrOutput() DocumentationPartLocationTypePtrOutput {
	return o
}

func (o DocumentationPartLocationTypePtrOutput) ToDocumentationPartLocationTypePtrOutputWithContext(ctx context.Context) DocumentationPartLocationTypePtrOutput {
	return o
}

func (o DocumentationPartLocationTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DocumentationPartLocationType] {
	return pulumix.Output[*DocumentationPartLocationType]{
		OutputState: o.OutputState,
	}
}

func (o DocumentationPartLocationTypePtrOutput) Elem() DocumentationPartLocationTypeOutput {
	return o.ApplyT(func(v *DocumentationPartLocationType) DocumentationPartLocationType {
		if v != nil {
			return *v
		}
		var ret DocumentationPartLocationType
		return ret
	}).(DocumentationPartLocationTypeOutput)
}

func (o DocumentationPartLocationTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DocumentationPartLocationTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DocumentationPartLocationType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DocumentationPartLocationTypeInput is an input type that accepts DocumentationPartLocationTypeArgs and DocumentationPartLocationTypeOutput values.
// You can construct a concrete instance of `DocumentationPartLocationTypeInput` via:
//
//	DocumentationPartLocationTypeArgs{...}
type DocumentationPartLocationTypeInput interface {
	pulumi.Input

	ToDocumentationPartLocationTypeOutput() DocumentationPartLocationTypeOutput
	ToDocumentationPartLocationTypeOutputWithContext(context.Context) DocumentationPartLocationTypeOutput
}

var documentationPartLocationTypePtrType = reflect.TypeOf((**DocumentationPartLocationType)(nil)).Elem()

type DocumentationPartLocationTypePtrInput interface {
	pulumi.Input

	ToDocumentationPartLocationTypePtrOutput() DocumentationPartLocationTypePtrOutput
	ToDocumentationPartLocationTypePtrOutputWithContext(context.Context) DocumentationPartLocationTypePtrOutput
}

type documentationPartLocationTypePtr string

func DocumentationPartLocationTypePtr(v string) DocumentationPartLocationTypePtrInput {
	return (*documentationPartLocationTypePtr)(&v)
}

func (*documentationPartLocationTypePtr) ElementType() reflect.Type {
	return documentationPartLocationTypePtrType
}

func (in *documentationPartLocationTypePtr) ToDocumentationPartLocationTypePtrOutput() DocumentationPartLocationTypePtrOutput {
	return pulumi.ToOutput(in).(DocumentationPartLocationTypePtrOutput)
}

func (in *documentationPartLocationTypePtr) ToDocumentationPartLocationTypePtrOutputWithContext(ctx context.Context) DocumentationPartLocationTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DocumentationPartLocationTypePtrOutput)
}

func (in *documentationPartLocationTypePtr) ToOutput(ctx context.Context) pulumix.Output[*DocumentationPartLocationType] {
	return pulumix.Output[*DocumentationPartLocationType]{
		OutputState: in.ToDocumentationPartLocationTypePtrOutputWithContext(ctx).OutputState,
	}
}

// The type of a UsagePlanKey resource for a plan customer.
type UsagePlanKeyKeyType string

const (
	UsagePlanKeyKeyTypeApiKey = UsagePlanKeyKeyType("API_KEY")
)

func (UsagePlanKeyKeyType) ElementType() reflect.Type {
	return reflect.TypeOf((*UsagePlanKeyKeyType)(nil)).Elem()
}

func (e UsagePlanKeyKeyType) ToUsagePlanKeyKeyTypeOutput() UsagePlanKeyKeyTypeOutput {
	return pulumi.ToOutput(e).(UsagePlanKeyKeyTypeOutput)
}

func (e UsagePlanKeyKeyType) ToUsagePlanKeyKeyTypeOutputWithContext(ctx context.Context) UsagePlanKeyKeyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(UsagePlanKeyKeyTypeOutput)
}

func (e UsagePlanKeyKeyType) ToUsagePlanKeyKeyTypePtrOutput() UsagePlanKeyKeyTypePtrOutput {
	return e.ToUsagePlanKeyKeyTypePtrOutputWithContext(context.Background())
}

func (e UsagePlanKeyKeyType) ToUsagePlanKeyKeyTypePtrOutputWithContext(ctx context.Context) UsagePlanKeyKeyTypePtrOutput {
	return UsagePlanKeyKeyType(e).ToUsagePlanKeyKeyTypeOutputWithContext(ctx).ToUsagePlanKeyKeyTypePtrOutputWithContext(ctx)
}

func (e UsagePlanKeyKeyType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e UsagePlanKeyKeyType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e UsagePlanKeyKeyType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e UsagePlanKeyKeyType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type UsagePlanKeyKeyTypeOutput struct{ *pulumi.OutputState }

func (UsagePlanKeyKeyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UsagePlanKeyKeyType)(nil)).Elem()
}

func (o UsagePlanKeyKeyTypeOutput) ToUsagePlanKeyKeyTypeOutput() UsagePlanKeyKeyTypeOutput {
	return o
}

func (o UsagePlanKeyKeyTypeOutput) ToUsagePlanKeyKeyTypeOutputWithContext(ctx context.Context) UsagePlanKeyKeyTypeOutput {
	return o
}

func (o UsagePlanKeyKeyTypeOutput) ToUsagePlanKeyKeyTypePtrOutput() UsagePlanKeyKeyTypePtrOutput {
	return o.ToUsagePlanKeyKeyTypePtrOutputWithContext(context.Background())
}

func (o UsagePlanKeyKeyTypeOutput) ToUsagePlanKeyKeyTypePtrOutputWithContext(ctx context.Context) UsagePlanKeyKeyTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UsagePlanKeyKeyType) *UsagePlanKeyKeyType {
		return &v
	}).(UsagePlanKeyKeyTypePtrOutput)
}

func (o UsagePlanKeyKeyTypeOutput) ToOutput(ctx context.Context) pulumix.Output[UsagePlanKeyKeyType] {
	return pulumix.Output[UsagePlanKeyKeyType]{
		OutputState: o.OutputState,
	}
}

func (o UsagePlanKeyKeyTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o UsagePlanKeyKeyTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e UsagePlanKeyKeyType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o UsagePlanKeyKeyTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o UsagePlanKeyKeyTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e UsagePlanKeyKeyType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type UsagePlanKeyKeyTypePtrOutput struct{ *pulumi.OutputState }

func (UsagePlanKeyKeyTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UsagePlanKeyKeyType)(nil)).Elem()
}

func (o UsagePlanKeyKeyTypePtrOutput) ToUsagePlanKeyKeyTypePtrOutput() UsagePlanKeyKeyTypePtrOutput {
	return o
}

func (o UsagePlanKeyKeyTypePtrOutput) ToUsagePlanKeyKeyTypePtrOutputWithContext(ctx context.Context) UsagePlanKeyKeyTypePtrOutput {
	return o
}

func (o UsagePlanKeyKeyTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*UsagePlanKeyKeyType] {
	return pulumix.Output[*UsagePlanKeyKeyType]{
		OutputState: o.OutputState,
	}
}

func (o UsagePlanKeyKeyTypePtrOutput) Elem() UsagePlanKeyKeyTypeOutput {
	return o.ApplyT(func(v *UsagePlanKeyKeyType) UsagePlanKeyKeyType {
		if v != nil {
			return *v
		}
		var ret UsagePlanKeyKeyType
		return ret
	}).(UsagePlanKeyKeyTypeOutput)
}

func (o UsagePlanKeyKeyTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o UsagePlanKeyKeyTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *UsagePlanKeyKeyType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// UsagePlanKeyKeyTypeInput is an input type that accepts UsagePlanKeyKeyTypeArgs and UsagePlanKeyKeyTypeOutput values.
// You can construct a concrete instance of `UsagePlanKeyKeyTypeInput` via:
//
//	UsagePlanKeyKeyTypeArgs{...}
type UsagePlanKeyKeyTypeInput interface {
	pulumi.Input

	ToUsagePlanKeyKeyTypeOutput() UsagePlanKeyKeyTypeOutput
	ToUsagePlanKeyKeyTypeOutputWithContext(context.Context) UsagePlanKeyKeyTypeOutput
}

var usagePlanKeyKeyTypePtrType = reflect.TypeOf((**UsagePlanKeyKeyType)(nil)).Elem()

type UsagePlanKeyKeyTypePtrInput interface {
	pulumi.Input

	ToUsagePlanKeyKeyTypePtrOutput() UsagePlanKeyKeyTypePtrOutput
	ToUsagePlanKeyKeyTypePtrOutputWithContext(context.Context) UsagePlanKeyKeyTypePtrOutput
}

type usagePlanKeyKeyTypePtr string

func UsagePlanKeyKeyTypePtr(v string) UsagePlanKeyKeyTypePtrInput {
	return (*usagePlanKeyKeyTypePtr)(&v)
}

func (*usagePlanKeyKeyTypePtr) ElementType() reflect.Type {
	return usagePlanKeyKeyTypePtrType
}

func (in *usagePlanKeyKeyTypePtr) ToUsagePlanKeyKeyTypePtrOutput() UsagePlanKeyKeyTypePtrOutput {
	return pulumi.ToOutput(in).(UsagePlanKeyKeyTypePtrOutput)
}

func (in *usagePlanKeyKeyTypePtr) ToUsagePlanKeyKeyTypePtrOutputWithContext(ctx context.Context) UsagePlanKeyKeyTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(UsagePlanKeyKeyTypePtrOutput)
}

func (in *usagePlanKeyKeyTypePtr) ToOutput(ctx context.Context) pulumix.Output[*UsagePlanKeyKeyType] {
	return pulumix.Output[*UsagePlanKeyKeyType]{
		OutputState: in.ToUsagePlanKeyKeyTypePtrOutputWithContext(ctx).OutputState,
	}
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DocumentationPartLocationTypeInput)(nil)).Elem(), DocumentationPartLocationType("API"))
	pulumi.RegisterInputType(reflect.TypeOf((*DocumentationPartLocationTypePtrInput)(nil)).Elem(), DocumentationPartLocationType("API"))
	pulumi.RegisterInputType(reflect.TypeOf((*UsagePlanKeyKeyTypeInput)(nil)).Elem(), UsagePlanKeyKeyType("API_KEY"))
	pulumi.RegisterInputType(reflect.TypeOf((*UsagePlanKeyKeyTypePtrInput)(nil)).Elem(), UsagePlanKeyKeyType("API_KEY"))
	pulumi.RegisterOutputType(DocumentationPartLocationTypeOutput{})
	pulumi.RegisterOutputType(DocumentationPartLocationTypePtrOutput{})
	pulumi.RegisterOutputType(UsagePlanKeyKeyTypeOutput{})
	pulumi.RegisterOutputType(UsagePlanKeyKeyTypePtrOutput{})
}
