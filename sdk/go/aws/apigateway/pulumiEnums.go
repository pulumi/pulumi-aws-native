// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The type of usage plan key. Currently, the only valid key type is API_KEY.
type UsagePlanKeyKeyType string

const (
	UsagePlanKeyKeyTypeApiKey = UsagePlanKeyKeyType("API_KEY")
)

func (UsagePlanKeyKeyType) ElementType() reflect.Type {
	return reflect.TypeOf((*UsagePlanKeyKeyType)(nil)).Elem()
}

func (e UsagePlanKeyKeyType) ToUsagePlanKeyKeyTypeOutput() UsagePlanKeyKeyTypeOutput {
	return pulumi.ToOutput(e).(UsagePlanKeyKeyTypeOutput)
}

func (e UsagePlanKeyKeyType) ToUsagePlanKeyKeyTypeOutputWithContext(ctx context.Context) UsagePlanKeyKeyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(UsagePlanKeyKeyTypeOutput)
}

func (e UsagePlanKeyKeyType) ToUsagePlanKeyKeyTypePtrOutput() UsagePlanKeyKeyTypePtrOutput {
	return e.ToUsagePlanKeyKeyTypePtrOutputWithContext(context.Background())
}

func (e UsagePlanKeyKeyType) ToUsagePlanKeyKeyTypePtrOutputWithContext(ctx context.Context) UsagePlanKeyKeyTypePtrOutput {
	return UsagePlanKeyKeyType(e).ToUsagePlanKeyKeyTypeOutputWithContext(ctx).ToUsagePlanKeyKeyTypePtrOutputWithContext(ctx)
}

func (e UsagePlanKeyKeyType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e UsagePlanKeyKeyType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e UsagePlanKeyKeyType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e UsagePlanKeyKeyType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type UsagePlanKeyKeyTypeOutput struct{ *pulumi.OutputState }

func (UsagePlanKeyKeyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UsagePlanKeyKeyType)(nil)).Elem()
}

func (o UsagePlanKeyKeyTypeOutput) ToUsagePlanKeyKeyTypeOutput() UsagePlanKeyKeyTypeOutput {
	return o
}

func (o UsagePlanKeyKeyTypeOutput) ToUsagePlanKeyKeyTypeOutputWithContext(ctx context.Context) UsagePlanKeyKeyTypeOutput {
	return o
}

func (o UsagePlanKeyKeyTypeOutput) ToUsagePlanKeyKeyTypePtrOutput() UsagePlanKeyKeyTypePtrOutput {
	return o.ToUsagePlanKeyKeyTypePtrOutputWithContext(context.Background())
}

func (o UsagePlanKeyKeyTypeOutput) ToUsagePlanKeyKeyTypePtrOutputWithContext(ctx context.Context) UsagePlanKeyKeyTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UsagePlanKeyKeyType) *UsagePlanKeyKeyType {
		return &v
	}).(UsagePlanKeyKeyTypePtrOutput)
}

func (o UsagePlanKeyKeyTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o UsagePlanKeyKeyTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e UsagePlanKeyKeyType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o UsagePlanKeyKeyTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o UsagePlanKeyKeyTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e UsagePlanKeyKeyType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type UsagePlanKeyKeyTypePtrOutput struct{ *pulumi.OutputState }

func (UsagePlanKeyKeyTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UsagePlanKeyKeyType)(nil)).Elem()
}

func (o UsagePlanKeyKeyTypePtrOutput) ToUsagePlanKeyKeyTypePtrOutput() UsagePlanKeyKeyTypePtrOutput {
	return o
}

func (o UsagePlanKeyKeyTypePtrOutput) ToUsagePlanKeyKeyTypePtrOutputWithContext(ctx context.Context) UsagePlanKeyKeyTypePtrOutput {
	return o
}

func (o UsagePlanKeyKeyTypePtrOutput) Elem() UsagePlanKeyKeyTypeOutput {
	return o.ApplyT(func(v *UsagePlanKeyKeyType) UsagePlanKeyKeyType {
		if v != nil {
			return *v
		}
		var ret UsagePlanKeyKeyType
		return ret
	}).(UsagePlanKeyKeyTypeOutput)
}

func (o UsagePlanKeyKeyTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o UsagePlanKeyKeyTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *UsagePlanKeyKeyType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// UsagePlanKeyKeyTypeInput is an input type that accepts UsagePlanKeyKeyTypeArgs and UsagePlanKeyKeyTypeOutput values.
// You can construct a concrete instance of `UsagePlanKeyKeyTypeInput` via:
//
//          UsagePlanKeyKeyTypeArgs{...}
type UsagePlanKeyKeyTypeInput interface {
	pulumi.Input

	ToUsagePlanKeyKeyTypeOutput() UsagePlanKeyKeyTypeOutput
	ToUsagePlanKeyKeyTypeOutputWithContext(context.Context) UsagePlanKeyKeyTypeOutput
}

var usagePlanKeyKeyTypePtrType = reflect.TypeOf((**UsagePlanKeyKeyType)(nil)).Elem()

type UsagePlanKeyKeyTypePtrInput interface {
	pulumi.Input

	ToUsagePlanKeyKeyTypePtrOutput() UsagePlanKeyKeyTypePtrOutput
	ToUsagePlanKeyKeyTypePtrOutputWithContext(context.Context) UsagePlanKeyKeyTypePtrOutput
}

type usagePlanKeyKeyTypePtr string

func UsagePlanKeyKeyTypePtr(v string) UsagePlanKeyKeyTypePtrInput {
	return (*usagePlanKeyKeyTypePtr)(&v)
}

func (*usagePlanKeyKeyTypePtr) ElementType() reflect.Type {
	return usagePlanKeyKeyTypePtrType
}

func (in *usagePlanKeyKeyTypePtr) ToUsagePlanKeyKeyTypePtrOutput() UsagePlanKeyKeyTypePtrOutput {
	return pulumi.ToOutput(in).(UsagePlanKeyKeyTypePtrOutput)
}

func (in *usagePlanKeyKeyTypePtr) ToUsagePlanKeyKeyTypePtrOutputWithContext(ctx context.Context) UsagePlanKeyKeyTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(UsagePlanKeyKeyTypePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(UsagePlanKeyKeyTypeOutput{})
	pulumi.RegisterOutputType(UsagePlanKeyKeyTypePtrOutput{})
}
