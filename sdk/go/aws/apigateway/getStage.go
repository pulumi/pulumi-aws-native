// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::ApiGateway::Stage
func LookupStage(ctx *pulumi.Context, args *LookupStageArgs, opts ...pulumi.InvokeOption) (*LookupStageResult, error) {
	var rv LookupStageResult
	err := ctx.Invoke("aws-native:apigateway:getStage", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupStageArgs struct {
	// The ID of the RestApi resource that you're deploying with this stage.
	RestApiId string `pulumi:"restApiId"`
	// The name of the stage, which API Gateway uses as the first path segment in the invoked Uniform Resource Identifier (URI).
	StageName string `pulumi:"stageName"`
}

type LookupStageResult struct {
	// Specifies settings for logging access in this stage.
	AccessLogSetting *StageAccessLogSetting `pulumi:"accessLogSetting"`
	// Indicates whether cache clustering is enabled for the stage.
	CacheClusterEnabled *bool `pulumi:"cacheClusterEnabled"`
	// The stage's cache cluster size.
	CacheClusterSize *string `pulumi:"cacheClusterSize"`
	// Specifies settings for the canary deployment in this stage.
	CanarySetting *StageCanarySetting `pulumi:"canarySetting"`
	// The ID of the client certificate that API Gateway uses to call your integration endpoints in the stage.
	ClientCertificateId *string `pulumi:"clientCertificateId"`
	// The ID of the deployment that the stage is associated with. This parameter is required to create a stage.
	DeploymentId *string `pulumi:"deploymentId"`
	// A description of the stage.
	Description *string `pulumi:"description"`
	// The version ID of the API documentation snapshot.
	DocumentationVersion *string `pulumi:"documentationVersion"`
	// Settings for all methods in the stage.
	MethodSettings []StageMethodSetting `pulumi:"methodSettings"`
	// An array of arbitrary tags (key-value pairs) to associate with the stage.
	Tags []StageTag `pulumi:"tags"`
	// Specifies whether active X-Ray tracing is enabled for this stage.
	TracingEnabled *bool `pulumi:"tracingEnabled"`
	// A map (string-to-string map) that defines the stage variables, where the variable name is the key and the variable value is the value.
	Variables interface{} `pulumi:"variables"`
}

func LookupStageOutput(ctx *pulumi.Context, args LookupStageOutputArgs, opts ...pulumi.InvokeOption) LookupStageResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupStageResult, error) {
			args := v.(LookupStageArgs)
			r, err := LookupStage(ctx, &args, opts...)
			var s LookupStageResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupStageResultOutput)
}

type LookupStageOutputArgs struct {
	// The ID of the RestApi resource that you're deploying with this stage.
	RestApiId pulumi.StringInput `pulumi:"restApiId"`
	// The name of the stage, which API Gateway uses as the first path segment in the invoked Uniform Resource Identifier (URI).
	StageName pulumi.StringInput `pulumi:"stageName"`
}

func (LookupStageOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStageArgs)(nil)).Elem()
}

type LookupStageResultOutput struct{ *pulumi.OutputState }

func (LookupStageResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStageResult)(nil)).Elem()
}

func (o LookupStageResultOutput) ToLookupStageResultOutput() LookupStageResultOutput {
	return o
}

func (o LookupStageResultOutput) ToLookupStageResultOutputWithContext(ctx context.Context) LookupStageResultOutput {
	return o
}

// Specifies settings for logging access in this stage.
func (o LookupStageResultOutput) AccessLogSetting() StageAccessLogSettingPtrOutput {
	return o.ApplyT(func(v LookupStageResult) *StageAccessLogSetting { return v.AccessLogSetting }).(StageAccessLogSettingPtrOutput)
}

// Indicates whether cache clustering is enabled for the stage.
func (o LookupStageResultOutput) CacheClusterEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupStageResult) *bool { return v.CacheClusterEnabled }).(pulumi.BoolPtrOutput)
}

// The stage's cache cluster size.
func (o LookupStageResultOutput) CacheClusterSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupStageResult) *string { return v.CacheClusterSize }).(pulumi.StringPtrOutput)
}

// Specifies settings for the canary deployment in this stage.
func (o LookupStageResultOutput) CanarySetting() StageCanarySettingPtrOutput {
	return o.ApplyT(func(v LookupStageResult) *StageCanarySetting { return v.CanarySetting }).(StageCanarySettingPtrOutput)
}

// The ID of the client certificate that API Gateway uses to call your integration endpoints in the stage.
func (o LookupStageResultOutput) ClientCertificateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupStageResult) *string { return v.ClientCertificateId }).(pulumi.StringPtrOutput)
}

// The ID of the deployment that the stage is associated with. This parameter is required to create a stage.
func (o LookupStageResultOutput) DeploymentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupStageResult) *string { return v.DeploymentId }).(pulumi.StringPtrOutput)
}

// A description of the stage.
func (o LookupStageResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupStageResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The version ID of the API documentation snapshot.
func (o LookupStageResultOutput) DocumentationVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupStageResult) *string { return v.DocumentationVersion }).(pulumi.StringPtrOutput)
}

// Settings for all methods in the stage.
func (o LookupStageResultOutput) MethodSettings() StageMethodSettingArrayOutput {
	return o.ApplyT(func(v LookupStageResult) []StageMethodSetting { return v.MethodSettings }).(StageMethodSettingArrayOutput)
}

// An array of arbitrary tags (key-value pairs) to associate with the stage.
func (o LookupStageResultOutput) Tags() StageTagArrayOutput {
	return o.ApplyT(func(v LookupStageResult) []StageTag { return v.Tags }).(StageTagArrayOutput)
}

// Specifies whether active X-Ray tracing is enabled for this stage.
func (o LookupStageResultOutput) TracingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupStageResult) *bool { return v.TracingEnabled }).(pulumi.BoolPtrOutput)
}

// A map (string-to-string map) that defines the stage variables, where the variable name is the key and the variable value is the value.
func (o LookupStageResultOutput) Variables() pulumi.AnyOutput {
	return o.ApplyT(func(v LookupStageResult) interface{} { return v.Variables }).(pulumi.AnyOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupStageResultOutput{})
}
