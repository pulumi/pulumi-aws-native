// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::ApiGateway::Stage
type Stage struct {
	pulumi.CustomResourceState

	// Specifies settings for logging access in this stage.
	AccessLogSetting StageAccessLogSettingPtrOutput `pulumi:"accessLogSetting"`
	// Indicates whether cache clustering is enabled for the stage.
	CacheClusterEnabled pulumi.BoolPtrOutput `pulumi:"cacheClusterEnabled"`
	// The stage's cache cluster size.
	CacheClusterSize pulumi.StringPtrOutput `pulumi:"cacheClusterSize"`
	// Specifies settings for the canary deployment in this stage.
	CanarySetting StageCanarySettingPtrOutput `pulumi:"canarySetting"`
	// The ID of the client certificate that API Gateway uses to call your integration endpoints in the stage.
	ClientCertificateId pulumi.StringPtrOutput `pulumi:"clientCertificateId"`
	// The ID of the deployment that the stage is associated with. This parameter is required to create a stage.
	DeploymentId pulumi.StringPtrOutput `pulumi:"deploymentId"`
	// A description of the stage.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The version ID of the API documentation snapshot.
	DocumentationVersion pulumi.StringPtrOutput `pulumi:"documentationVersion"`
	// Settings for all methods in the stage.
	MethodSettings StageMethodSettingArrayOutput `pulumi:"methodSettings"`
	// The ID of the RestApi resource that you're deploying with this stage.
	RestApiId pulumi.StringOutput `pulumi:"restApiId"`
	// The name of the stage, which API Gateway uses as the first path segment in the invoked Uniform Resource Identifier (URI).
	StageName pulumi.StringPtrOutput `pulumi:"stageName"`
	// An array of arbitrary tags (key-value pairs) to associate with the stage.
	Tags StageTagArrayOutput `pulumi:"tags"`
	// Specifies whether active X-Ray tracing is enabled for this stage.
	TracingEnabled pulumi.BoolPtrOutput `pulumi:"tracingEnabled"`
	// A map (string-to-string map) that defines the stage variables, where the variable name is the key and the variable value is the value.
	Variables pulumi.AnyOutput `pulumi:"variables"`
}

// NewStage registers a new resource with the given unique name, arguments, and options.
func NewStage(ctx *pulumi.Context,
	name string, args *StageArgs, opts ...pulumi.ResourceOption) (*Stage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RestApiId == nil {
		return nil, errors.New("invalid value for required argument 'RestApiId'")
	}
	var resource Stage
	err := ctx.RegisterResource("aws-native:apigateway:Stage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStage gets an existing Stage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StageState, opts ...pulumi.ResourceOption) (*Stage, error) {
	var resource Stage
	err := ctx.ReadResource("aws-native:apigateway:Stage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Stage resources.
type stageState struct {
}

type StageState struct {
}

func (StageState) ElementType() reflect.Type {
	return reflect.TypeOf((*stageState)(nil)).Elem()
}

type stageArgs struct {
	// Specifies settings for logging access in this stage.
	AccessLogSetting *StageAccessLogSetting `pulumi:"accessLogSetting"`
	// Indicates whether cache clustering is enabled for the stage.
	CacheClusterEnabled *bool `pulumi:"cacheClusterEnabled"`
	// The stage's cache cluster size.
	CacheClusterSize *string `pulumi:"cacheClusterSize"`
	// Specifies settings for the canary deployment in this stage.
	CanarySetting *StageCanarySetting `pulumi:"canarySetting"`
	// The ID of the client certificate that API Gateway uses to call your integration endpoints in the stage.
	ClientCertificateId *string `pulumi:"clientCertificateId"`
	// The ID of the deployment that the stage is associated with. This parameter is required to create a stage.
	DeploymentId *string `pulumi:"deploymentId"`
	// A description of the stage.
	Description *string `pulumi:"description"`
	// The version ID of the API documentation snapshot.
	DocumentationVersion *string `pulumi:"documentationVersion"`
	// Settings for all methods in the stage.
	MethodSettings []StageMethodSetting `pulumi:"methodSettings"`
	// The ID of the RestApi resource that you're deploying with this stage.
	RestApiId string `pulumi:"restApiId"`
	// The name of the stage, which API Gateway uses as the first path segment in the invoked Uniform Resource Identifier (URI).
	StageName *string `pulumi:"stageName"`
	// An array of arbitrary tags (key-value pairs) to associate with the stage.
	Tags []StageTag `pulumi:"tags"`
	// Specifies whether active X-Ray tracing is enabled for this stage.
	TracingEnabled *bool `pulumi:"tracingEnabled"`
	// A map (string-to-string map) that defines the stage variables, where the variable name is the key and the variable value is the value.
	Variables interface{} `pulumi:"variables"`
}

// The set of arguments for constructing a Stage resource.
type StageArgs struct {
	// Specifies settings for logging access in this stage.
	AccessLogSetting StageAccessLogSettingPtrInput
	// Indicates whether cache clustering is enabled for the stage.
	CacheClusterEnabled pulumi.BoolPtrInput
	// The stage's cache cluster size.
	CacheClusterSize pulumi.StringPtrInput
	// Specifies settings for the canary deployment in this stage.
	CanarySetting StageCanarySettingPtrInput
	// The ID of the client certificate that API Gateway uses to call your integration endpoints in the stage.
	ClientCertificateId pulumi.StringPtrInput
	// The ID of the deployment that the stage is associated with. This parameter is required to create a stage.
	DeploymentId pulumi.StringPtrInput
	// A description of the stage.
	Description pulumi.StringPtrInput
	// The version ID of the API documentation snapshot.
	DocumentationVersion pulumi.StringPtrInput
	// Settings for all methods in the stage.
	MethodSettings StageMethodSettingArrayInput
	// The ID of the RestApi resource that you're deploying with this stage.
	RestApiId pulumi.StringInput
	// The name of the stage, which API Gateway uses as the first path segment in the invoked Uniform Resource Identifier (URI).
	StageName pulumi.StringPtrInput
	// An array of arbitrary tags (key-value pairs) to associate with the stage.
	Tags StageTagArrayInput
	// Specifies whether active X-Ray tracing is enabled for this stage.
	TracingEnabled pulumi.BoolPtrInput
	// A map (string-to-string map) that defines the stage variables, where the variable name is the key and the variable value is the value.
	Variables pulumi.Input
}

func (StageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*stageArgs)(nil)).Elem()
}

type StageInput interface {
	pulumi.Input

	ToStageOutput() StageOutput
	ToStageOutputWithContext(ctx context.Context) StageOutput
}

func (*Stage) ElementType() reflect.Type {
	return reflect.TypeOf((**Stage)(nil)).Elem()
}

func (i *Stage) ToStageOutput() StageOutput {
	return i.ToStageOutputWithContext(context.Background())
}

func (i *Stage) ToStageOutputWithContext(ctx context.Context) StageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StageOutput)
}

type StageOutput struct{ *pulumi.OutputState }

func (StageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Stage)(nil)).Elem()
}

func (o StageOutput) ToStageOutput() StageOutput {
	return o
}

func (o StageOutput) ToStageOutputWithContext(ctx context.Context) StageOutput {
	return o
}

// Specifies settings for logging access in this stage.
func (o StageOutput) AccessLogSetting() StageAccessLogSettingPtrOutput {
	return o.ApplyT(func(v *Stage) StageAccessLogSettingPtrOutput { return v.AccessLogSetting }).(StageAccessLogSettingPtrOutput)
}

// Indicates whether cache clustering is enabled for the stage.
func (o StageOutput) CacheClusterEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Stage) pulumi.BoolPtrOutput { return v.CacheClusterEnabled }).(pulumi.BoolPtrOutput)
}

// The stage's cache cluster size.
func (o StageOutput) CacheClusterSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Stage) pulumi.StringPtrOutput { return v.CacheClusterSize }).(pulumi.StringPtrOutput)
}

// Specifies settings for the canary deployment in this stage.
func (o StageOutput) CanarySetting() StageCanarySettingPtrOutput {
	return o.ApplyT(func(v *Stage) StageCanarySettingPtrOutput { return v.CanarySetting }).(StageCanarySettingPtrOutput)
}

// The ID of the client certificate that API Gateway uses to call your integration endpoints in the stage.
func (o StageOutput) ClientCertificateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Stage) pulumi.StringPtrOutput { return v.ClientCertificateId }).(pulumi.StringPtrOutput)
}

// The ID of the deployment that the stage is associated with. This parameter is required to create a stage.
func (o StageOutput) DeploymentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Stage) pulumi.StringPtrOutput { return v.DeploymentId }).(pulumi.StringPtrOutput)
}

// A description of the stage.
func (o StageOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Stage) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The version ID of the API documentation snapshot.
func (o StageOutput) DocumentationVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Stage) pulumi.StringPtrOutput { return v.DocumentationVersion }).(pulumi.StringPtrOutput)
}

// Settings for all methods in the stage.
func (o StageOutput) MethodSettings() StageMethodSettingArrayOutput {
	return o.ApplyT(func(v *Stage) StageMethodSettingArrayOutput { return v.MethodSettings }).(StageMethodSettingArrayOutput)
}

// The ID of the RestApi resource that you're deploying with this stage.
func (o StageOutput) RestApiId() pulumi.StringOutput {
	return o.ApplyT(func(v *Stage) pulumi.StringOutput { return v.RestApiId }).(pulumi.StringOutput)
}

// The name of the stage, which API Gateway uses as the first path segment in the invoked Uniform Resource Identifier (URI).
func (o StageOutput) StageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Stage) pulumi.StringPtrOutput { return v.StageName }).(pulumi.StringPtrOutput)
}

// An array of arbitrary tags (key-value pairs) to associate with the stage.
func (o StageOutput) Tags() StageTagArrayOutput {
	return o.ApplyT(func(v *Stage) StageTagArrayOutput { return v.Tags }).(StageTagArrayOutput)
}

// Specifies whether active X-Ray tracing is enabled for this stage.
func (o StageOutput) TracingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Stage) pulumi.BoolPtrOutput { return v.TracingEnabled }).(pulumi.BoolPtrOutput)
}

// A map (string-to-string map) that defines the stage variables, where the variable name is the key and the variable value is the value.
func (o StageOutput) Variables() pulumi.AnyOutput {
	return o.ApplyT(func(v *Stage) pulumi.AnyOutput { return v.Variables }).(pulumi.AnyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StageInput)(nil)).Elem(), &Stage{})
	pulumi.RegisterOutputType(StageOutput{})
}
