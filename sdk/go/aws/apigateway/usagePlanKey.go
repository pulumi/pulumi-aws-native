// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::ApiGateway::UsagePlanKey
type UsagePlanKey struct {
	pulumi.CustomResourceState

	// The ID of the usage plan key.
	KeyId pulumi.StringOutput `pulumi:"keyId"`
	// The type of usage plan key. Currently, the only valid key type is API_KEY.
	KeyType UsagePlanKeyKeyTypeOutput `pulumi:"keyType"`
	// The ID of the usage plan.
	UsagePlanId pulumi.StringOutput `pulumi:"usagePlanId"`
}

// NewUsagePlanKey registers a new resource with the given unique name, arguments, and options.
func NewUsagePlanKey(ctx *pulumi.Context,
	name string, args *UsagePlanKeyArgs, opts ...pulumi.ResourceOption) (*UsagePlanKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.KeyId == nil {
		return nil, errors.New("invalid value for required argument 'KeyId'")
	}
	if args.KeyType == nil {
		return nil, errors.New("invalid value for required argument 'KeyType'")
	}
	if args.UsagePlanId == nil {
		return nil, errors.New("invalid value for required argument 'UsagePlanId'")
	}
	var resource UsagePlanKey
	err := ctx.RegisterResource("aws-native:apigateway:UsagePlanKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUsagePlanKey gets an existing UsagePlanKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUsagePlanKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UsagePlanKeyState, opts ...pulumi.ResourceOption) (*UsagePlanKey, error) {
	var resource UsagePlanKey
	err := ctx.ReadResource("aws-native:apigateway:UsagePlanKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UsagePlanKey resources.
type usagePlanKeyState struct {
}

type UsagePlanKeyState struct {
}

func (UsagePlanKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*usagePlanKeyState)(nil)).Elem()
}

type usagePlanKeyArgs struct {
	// The ID of the usage plan key.
	KeyId string `pulumi:"keyId"`
	// The type of usage plan key. Currently, the only valid key type is API_KEY.
	KeyType UsagePlanKeyKeyType `pulumi:"keyType"`
	// The ID of the usage plan.
	UsagePlanId string `pulumi:"usagePlanId"`
}

// The set of arguments for constructing a UsagePlanKey resource.
type UsagePlanKeyArgs struct {
	// The ID of the usage plan key.
	KeyId pulumi.StringInput
	// The type of usage plan key. Currently, the only valid key type is API_KEY.
	KeyType UsagePlanKeyKeyTypeInput
	// The ID of the usage plan.
	UsagePlanId pulumi.StringInput
}

func (UsagePlanKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*usagePlanKeyArgs)(nil)).Elem()
}

type UsagePlanKeyInput interface {
	pulumi.Input

	ToUsagePlanKeyOutput() UsagePlanKeyOutput
	ToUsagePlanKeyOutputWithContext(ctx context.Context) UsagePlanKeyOutput
}

func (*UsagePlanKey) ElementType() reflect.Type {
	return reflect.TypeOf((*UsagePlanKey)(nil))
}

func (i *UsagePlanKey) ToUsagePlanKeyOutput() UsagePlanKeyOutput {
	return i.ToUsagePlanKeyOutputWithContext(context.Background())
}

func (i *UsagePlanKey) ToUsagePlanKeyOutputWithContext(ctx context.Context) UsagePlanKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsagePlanKeyOutput)
}

type UsagePlanKeyOutput struct{ *pulumi.OutputState }

func (UsagePlanKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UsagePlanKey)(nil))
}

func (o UsagePlanKeyOutput) ToUsagePlanKeyOutput() UsagePlanKeyOutput {
	return o
}

func (o UsagePlanKeyOutput) ToUsagePlanKeyOutputWithContext(ctx context.Context) UsagePlanKeyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(UsagePlanKeyOutput{})
}
