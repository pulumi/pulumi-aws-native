// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpclattice

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a listener for a service. Before you start using your Amazon VPC Lattice service, you must add one or more listeners. A listener is a process that checks for connection requests to your services.
func LookupListener(ctx *pulumi.Context, args *LookupListenerArgs, opts ...pulumi.InvokeOption) (*LookupListenerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupListenerResult
	err := ctx.Invoke("aws-native:vpclattice:getListener", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupListenerArgs struct {
	// The Amazon Resource Name (ARN) of the listener.
	Arn string `pulumi:"arn"`
}

type LookupListenerResult struct {
	// The Amazon Resource Name (ARN) of the listener.
	Arn *string `pulumi:"arn"`
	// The action for the default rule. Each listener has a default rule. The default rule is used if no other rules match.
	DefaultAction *ListenerDefaultAction `pulumi:"defaultAction"`
	// The ID of the listener.
	Id *string `pulumi:"id"`
	// The Amazon Resource Name (ARN) of the service.
	ServiceArn *string `pulumi:"serviceArn"`
	// The ID of the service.
	ServiceId *string `pulumi:"serviceId"`
	// The tags for the listener.
	Tags []aws.Tag `pulumi:"tags"`
}

func LookupListenerOutput(ctx *pulumi.Context, args LookupListenerOutputArgs, opts ...pulumi.InvokeOption) LookupListenerResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupListenerResultOutput, error) {
			args := v.(LookupListenerArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:vpclattice:getListener", args, LookupListenerResultOutput{}, options).(LookupListenerResultOutput), nil
		}).(LookupListenerResultOutput)
}

type LookupListenerOutputArgs struct {
	// The Amazon Resource Name (ARN) of the listener.
	Arn pulumi.StringInput `pulumi:"arn"`
}

func (LookupListenerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupListenerArgs)(nil)).Elem()
}

type LookupListenerResultOutput struct{ *pulumi.OutputState }

func (LookupListenerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupListenerResult)(nil)).Elem()
}

func (o LookupListenerResultOutput) ToLookupListenerResultOutput() LookupListenerResultOutput {
	return o
}

func (o LookupListenerResultOutput) ToLookupListenerResultOutputWithContext(ctx context.Context) LookupListenerResultOutput {
	return o
}

// The Amazon Resource Name (ARN) of the listener.
func (o LookupListenerResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupListenerResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// The action for the default rule. Each listener has a default rule. The default rule is used if no other rules match.
func (o LookupListenerResultOutput) DefaultAction() ListenerDefaultActionPtrOutput {
	return o.ApplyT(func(v LookupListenerResult) *ListenerDefaultAction { return v.DefaultAction }).(ListenerDefaultActionPtrOutput)
}

// The ID of the listener.
func (o LookupListenerResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupListenerResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of the service.
func (o LookupListenerResultOutput) ServiceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupListenerResult) *string { return v.ServiceArn }).(pulumi.StringPtrOutput)
}

// The ID of the service.
func (o LookupListenerResultOutput) ServiceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupListenerResult) *string { return v.ServiceId }).(pulumi.StringPtrOutput)
}

// The tags for the listener.
func (o LookupListenerResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupListenerResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupListenerResultOutput{})
}
