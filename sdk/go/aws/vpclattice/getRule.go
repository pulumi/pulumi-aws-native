// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpclattice

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a listener rule. Each listener has a default rule for checking connection requests, but you can define additional rules. Each rule consists of a priority, one or more actions, and one or more conditions.
func LookupRule(ctx *pulumi.Context, args *LookupRuleArgs, opts ...pulumi.InvokeOption) (*LookupRuleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRuleResult
	err := ctx.Invoke("aws-native:vpclattice:getRule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupRuleArgs struct {
	Arn string `pulumi:"arn"`
}

type LookupRuleResult struct {
	Action   *RuleAction `pulumi:"action"`
	Arn      *string     `pulumi:"arn"`
	Id       *string     `pulumi:"id"`
	Match    *RuleMatch  `pulumi:"match"`
	Priority *int        `pulumi:"priority"`
	Tags     []RuleTag   `pulumi:"tags"`
}

func LookupRuleOutput(ctx *pulumi.Context, args LookupRuleOutputArgs, opts ...pulumi.InvokeOption) LookupRuleResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRuleResult, error) {
			args := v.(LookupRuleArgs)
			r, err := LookupRule(ctx, &args, opts...)
			var s LookupRuleResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupRuleResultOutput)
}

type LookupRuleOutputArgs struct {
	Arn pulumi.StringInput `pulumi:"arn"`
}

func (LookupRuleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRuleArgs)(nil)).Elem()
}

type LookupRuleResultOutput struct{ *pulumi.OutputState }

func (LookupRuleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRuleResult)(nil)).Elem()
}

func (o LookupRuleResultOutput) ToLookupRuleResultOutput() LookupRuleResultOutput {
	return o
}

func (o LookupRuleResultOutput) ToLookupRuleResultOutputWithContext(ctx context.Context) LookupRuleResultOutput {
	return o
}

func (o LookupRuleResultOutput) Action() RuleActionPtrOutput {
	return o.ApplyT(func(v LookupRuleResult) *RuleAction { return v.Action }).(RuleActionPtrOutput)
}

func (o LookupRuleResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRuleResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

func (o LookupRuleResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRuleResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o LookupRuleResultOutput) Match() RuleMatchPtrOutput {
	return o.ApplyT(func(v LookupRuleResult) *RuleMatch { return v.Match }).(RuleMatchPtrOutput)
}

func (o LookupRuleResultOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupRuleResult) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

func (o LookupRuleResultOutput) Tags() RuleTagArrayOutput {
	return o.ApplyT(func(v LookupRuleResult) []RuleTag { return v.Tags }).(RuleTagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRuleResultOutput{})
}
