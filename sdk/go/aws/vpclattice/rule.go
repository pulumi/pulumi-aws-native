// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpclattice

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a listener rule. Each listener has a default rule for checking connection requests, but you can define additional rules. Each rule consists of a priority, one or more actions, and one or more conditions.
type Rule struct {
	pulumi.CustomResourceState

	Action             RuleActionOutput       `pulumi:"action"`
	Arn                pulumi.StringOutput    `pulumi:"arn"`
	ListenerIdentifier pulumi.StringPtrOutput `pulumi:"listenerIdentifier"`
	Match              RuleMatchOutput        `pulumi:"match"`
	Name               pulumi.StringPtrOutput `pulumi:"name"`
	Priority           pulumi.IntOutput       `pulumi:"priority"`
	ServiceIdentifier  pulumi.StringPtrOutput `pulumi:"serviceIdentifier"`
	Tags               RuleTagArrayOutput     `pulumi:"tags"`
}

// NewRule registers a new resource with the given unique name, arguments, and options.
func NewRule(ctx *pulumi.Context,
	name string, args *RuleArgs, opts ...pulumi.ResourceOption) (*Rule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.Match == nil {
		return nil, errors.New("invalid value for required argument 'Match'")
	}
	if args.Priority == nil {
		return nil, errors.New("invalid value for required argument 'Priority'")
	}
	var resource Rule
	err := ctx.RegisterResource("aws-native:vpclattice:Rule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRule gets an existing Rule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RuleState, opts ...pulumi.ResourceOption) (*Rule, error) {
	var resource Rule
	err := ctx.ReadResource("aws-native:vpclattice:Rule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Rule resources.
type ruleState struct {
}

type RuleState struct {
}

func (RuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleState)(nil)).Elem()
}

type ruleArgs struct {
	Action             RuleAction `pulumi:"action"`
	ListenerIdentifier *string    `pulumi:"listenerIdentifier"`
	Match              RuleMatch  `pulumi:"match"`
	Name               *string    `pulumi:"name"`
	Priority           int        `pulumi:"priority"`
	ServiceIdentifier  *string    `pulumi:"serviceIdentifier"`
	Tags               []RuleTag  `pulumi:"tags"`
}

// The set of arguments for constructing a Rule resource.
type RuleArgs struct {
	Action             RuleActionInput
	ListenerIdentifier pulumi.StringPtrInput
	Match              RuleMatchInput
	Name               pulumi.StringPtrInput
	Priority           pulumi.IntInput
	ServiceIdentifier  pulumi.StringPtrInput
	Tags               RuleTagArrayInput
}

func (RuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleArgs)(nil)).Elem()
}

type RuleInput interface {
	pulumi.Input

	ToRuleOutput() RuleOutput
	ToRuleOutputWithContext(ctx context.Context) RuleOutput
}

func (*Rule) ElementType() reflect.Type {
	return reflect.TypeOf((**Rule)(nil)).Elem()
}

func (i *Rule) ToRuleOutput() RuleOutput {
	return i.ToRuleOutputWithContext(context.Background())
}

func (i *Rule) ToRuleOutputWithContext(ctx context.Context) RuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleOutput)
}

type RuleOutput struct{ *pulumi.OutputState }

func (RuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Rule)(nil)).Elem()
}

func (o RuleOutput) ToRuleOutput() RuleOutput {
	return o
}

func (o RuleOutput) ToRuleOutputWithContext(ctx context.Context) RuleOutput {
	return o
}

func (o RuleOutput) Action() RuleActionOutput {
	return o.ApplyT(func(v *Rule) RuleActionOutput { return v.Action }).(RuleActionOutput)
}

func (o RuleOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o RuleOutput) ListenerIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringPtrOutput { return v.ListenerIdentifier }).(pulumi.StringPtrOutput)
}

func (o RuleOutput) Match() RuleMatchOutput {
	return o.ApplyT(func(v *Rule) RuleMatchOutput { return v.Match }).(RuleMatchOutput)
}

func (o RuleOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

func (o RuleOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v *Rule) pulumi.IntOutput { return v.Priority }).(pulumi.IntOutput)
}

func (o RuleOutput) ServiceIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringPtrOutput { return v.ServiceIdentifier }).(pulumi.StringPtrOutput)
}

func (o RuleOutput) Tags() RuleTagArrayOutput {
	return o.ApplyT(func(v *Rule) RuleTagArrayOutput { return v.Tags }).(RuleTagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RuleInput)(nil)).Elem(), &Rule{})
	pulumi.RegisterOutputType(RuleOutput{})
}
