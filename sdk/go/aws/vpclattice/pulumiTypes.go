// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpclattice

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type AccessLogSubscriptionTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// AccessLogSubscriptionTagInput is an input type that accepts AccessLogSubscriptionTagArgs and AccessLogSubscriptionTagOutput values.
// You can construct a concrete instance of `AccessLogSubscriptionTagInput` via:
//
//	AccessLogSubscriptionTagArgs{...}
type AccessLogSubscriptionTagInput interface {
	pulumi.Input

	ToAccessLogSubscriptionTagOutput() AccessLogSubscriptionTagOutput
	ToAccessLogSubscriptionTagOutputWithContext(context.Context) AccessLogSubscriptionTagOutput
}

type AccessLogSubscriptionTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (AccessLogSubscriptionTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessLogSubscriptionTag)(nil)).Elem()
}

func (i AccessLogSubscriptionTagArgs) ToAccessLogSubscriptionTagOutput() AccessLogSubscriptionTagOutput {
	return i.ToAccessLogSubscriptionTagOutputWithContext(context.Background())
}

func (i AccessLogSubscriptionTagArgs) ToAccessLogSubscriptionTagOutputWithContext(ctx context.Context) AccessLogSubscriptionTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessLogSubscriptionTagOutput)
}

func (i AccessLogSubscriptionTagArgs) ToOutput(ctx context.Context) pulumix.Output[AccessLogSubscriptionTag] {
	return pulumix.Output[AccessLogSubscriptionTag]{
		OutputState: i.ToAccessLogSubscriptionTagOutputWithContext(ctx).OutputState,
	}
}

// AccessLogSubscriptionTagArrayInput is an input type that accepts AccessLogSubscriptionTagArray and AccessLogSubscriptionTagArrayOutput values.
// You can construct a concrete instance of `AccessLogSubscriptionTagArrayInput` via:
//
//	AccessLogSubscriptionTagArray{ AccessLogSubscriptionTagArgs{...} }
type AccessLogSubscriptionTagArrayInput interface {
	pulumi.Input

	ToAccessLogSubscriptionTagArrayOutput() AccessLogSubscriptionTagArrayOutput
	ToAccessLogSubscriptionTagArrayOutputWithContext(context.Context) AccessLogSubscriptionTagArrayOutput
}

type AccessLogSubscriptionTagArray []AccessLogSubscriptionTagInput

func (AccessLogSubscriptionTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessLogSubscriptionTag)(nil)).Elem()
}

func (i AccessLogSubscriptionTagArray) ToAccessLogSubscriptionTagArrayOutput() AccessLogSubscriptionTagArrayOutput {
	return i.ToAccessLogSubscriptionTagArrayOutputWithContext(context.Background())
}

func (i AccessLogSubscriptionTagArray) ToAccessLogSubscriptionTagArrayOutputWithContext(ctx context.Context) AccessLogSubscriptionTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessLogSubscriptionTagArrayOutput)
}

func (i AccessLogSubscriptionTagArray) ToOutput(ctx context.Context) pulumix.Output[[]AccessLogSubscriptionTag] {
	return pulumix.Output[[]AccessLogSubscriptionTag]{
		OutputState: i.ToAccessLogSubscriptionTagArrayOutputWithContext(ctx).OutputState,
	}
}

type AccessLogSubscriptionTagOutput struct{ *pulumi.OutputState }

func (AccessLogSubscriptionTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessLogSubscriptionTag)(nil)).Elem()
}

func (o AccessLogSubscriptionTagOutput) ToAccessLogSubscriptionTagOutput() AccessLogSubscriptionTagOutput {
	return o
}

func (o AccessLogSubscriptionTagOutput) ToAccessLogSubscriptionTagOutputWithContext(ctx context.Context) AccessLogSubscriptionTagOutput {
	return o
}

func (o AccessLogSubscriptionTagOutput) ToOutput(ctx context.Context) pulumix.Output[AccessLogSubscriptionTag] {
	return pulumix.Output[AccessLogSubscriptionTag]{
		OutputState: o.OutputState,
	}
}

func (o AccessLogSubscriptionTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v AccessLogSubscriptionTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o AccessLogSubscriptionTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v AccessLogSubscriptionTag) string { return v.Value }).(pulumi.StringOutput)
}

type AccessLogSubscriptionTagArrayOutput struct{ *pulumi.OutputState }

func (AccessLogSubscriptionTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessLogSubscriptionTag)(nil)).Elem()
}

func (o AccessLogSubscriptionTagArrayOutput) ToAccessLogSubscriptionTagArrayOutput() AccessLogSubscriptionTagArrayOutput {
	return o
}

func (o AccessLogSubscriptionTagArrayOutput) ToAccessLogSubscriptionTagArrayOutputWithContext(ctx context.Context) AccessLogSubscriptionTagArrayOutput {
	return o
}

func (o AccessLogSubscriptionTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AccessLogSubscriptionTag] {
	return pulumix.Output[[]AccessLogSubscriptionTag]{
		OutputState: o.OutputState,
	}
}

func (o AccessLogSubscriptionTagArrayOutput) Index(i pulumi.IntInput) AccessLogSubscriptionTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccessLogSubscriptionTag {
		return vs[0].([]AccessLogSubscriptionTag)[vs[1].(int)]
	}).(AccessLogSubscriptionTagOutput)
}

type ListenerDefaultAction struct {
	FixedResponse *ListenerFixedResponse `pulumi:"fixedResponse"`
	Forward       *ListenerForward       `pulumi:"forward"`
}

// ListenerDefaultActionInput is an input type that accepts ListenerDefaultActionArgs and ListenerDefaultActionOutput values.
// You can construct a concrete instance of `ListenerDefaultActionInput` via:
//
//	ListenerDefaultActionArgs{...}
type ListenerDefaultActionInput interface {
	pulumi.Input

	ToListenerDefaultActionOutput() ListenerDefaultActionOutput
	ToListenerDefaultActionOutputWithContext(context.Context) ListenerDefaultActionOutput
}

type ListenerDefaultActionArgs struct {
	FixedResponse ListenerFixedResponsePtrInput `pulumi:"fixedResponse"`
	Forward       ListenerForwardPtrInput       `pulumi:"forward"`
}

func (ListenerDefaultActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerDefaultAction)(nil)).Elem()
}

func (i ListenerDefaultActionArgs) ToListenerDefaultActionOutput() ListenerDefaultActionOutput {
	return i.ToListenerDefaultActionOutputWithContext(context.Background())
}

func (i ListenerDefaultActionArgs) ToListenerDefaultActionOutputWithContext(ctx context.Context) ListenerDefaultActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerDefaultActionOutput)
}

func (i ListenerDefaultActionArgs) ToOutput(ctx context.Context) pulumix.Output[ListenerDefaultAction] {
	return pulumix.Output[ListenerDefaultAction]{
		OutputState: i.ToListenerDefaultActionOutputWithContext(ctx).OutputState,
	}
}

type ListenerDefaultActionOutput struct{ *pulumi.OutputState }

func (ListenerDefaultActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerDefaultAction)(nil)).Elem()
}

func (o ListenerDefaultActionOutput) ToListenerDefaultActionOutput() ListenerDefaultActionOutput {
	return o
}

func (o ListenerDefaultActionOutput) ToListenerDefaultActionOutputWithContext(ctx context.Context) ListenerDefaultActionOutput {
	return o
}

func (o ListenerDefaultActionOutput) ToOutput(ctx context.Context) pulumix.Output[ListenerDefaultAction] {
	return pulumix.Output[ListenerDefaultAction]{
		OutputState: o.OutputState,
	}
}

func (o ListenerDefaultActionOutput) FixedResponse() ListenerFixedResponsePtrOutput {
	return o.ApplyT(func(v ListenerDefaultAction) *ListenerFixedResponse { return v.FixedResponse }).(ListenerFixedResponsePtrOutput)
}

func (o ListenerDefaultActionOutput) Forward() ListenerForwardPtrOutput {
	return o.ApplyT(func(v ListenerDefaultAction) *ListenerForward { return v.Forward }).(ListenerForwardPtrOutput)
}

type ListenerDefaultActionPtrOutput struct{ *pulumi.OutputState }

func (ListenerDefaultActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ListenerDefaultAction)(nil)).Elem()
}

func (o ListenerDefaultActionPtrOutput) ToListenerDefaultActionPtrOutput() ListenerDefaultActionPtrOutput {
	return o
}

func (o ListenerDefaultActionPtrOutput) ToListenerDefaultActionPtrOutputWithContext(ctx context.Context) ListenerDefaultActionPtrOutput {
	return o
}

func (o ListenerDefaultActionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ListenerDefaultAction] {
	return pulumix.Output[*ListenerDefaultAction]{
		OutputState: o.OutputState,
	}
}

func (o ListenerDefaultActionPtrOutput) Elem() ListenerDefaultActionOutput {
	return o.ApplyT(func(v *ListenerDefaultAction) ListenerDefaultAction {
		if v != nil {
			return *v
		}
		var ret ListenerDefaultAction
		return ret
	}).(ListenerDefaultActionOutput)
}

func (o ListenerDefaultActionPtrOutput) FixedResponse() ListenerFixedResponsePtrOutput {
	return o.ApplyT(func(v *ListenerDefaultAction) *ListenerFixedResponse {
		if v == nil {
			return nil
		}
		return v.FixedResponse
	}).(ListenerFixedResponsePtrOutput)
}

func (o ListenerDefaultActionPtrOutput) Forward() ListenerForwardPtrOutput {
	return o.ApplyT(func(v *ListenerDefaultAction) *ListenerForward {
		if v == nil {
			return nil
		}
		return v.Forward
	}).(ListenerForwardPtrOutput)
}

type ListenerFixedResponse struct {
	StatusCode int `pulumi:"statusCode"`
}

// ListenerFixedResponseInput is an input type that accepts ListenerFixedResponseArgs and ListenerFixedResponseOutput values.
// You can construct a concrete instance of `ListenerFixedResponseInput` via:
//
//	ListenerFixedResponseArgs{...}
type ListenerFixedResponseInput interface {
	pulumi.Input

	ToListenerFixedResponseOutput() ListenerFixedResponseOutput
	ToListenerFixedResponseOutputWithContext(context.Context) ListenerFixedResponseOutput
}

type ListenerFixedResponseArgs struct {
	StatusCode pulumi.IntInput `pulumi:"statusCode"`
}

func (ListenerFixedResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerFixedResponse)(nil)).Elem()
}

func (i ListenerFixedResponseArgs) ToListenerFixedResponseOutput() ListenerFixedResponseOutput {
	return i.ToListenerFixedResponseOutputWithContext(context.Background())
}

func (i ListenerFixedResponseArgs) ToListenerFixedResponseOutputWithContext(ctx context.Context) ListenerFixedResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerFixedResponseOutput)
}

func (i ListenerFixedResponseArgs) ToOutput(ctx context.Context) pulumix.Output[ListenerFixedResponse] {
	return pulumix.Output[ListenerFixedResponse]{
		OutputState: i.ToListenerFixedResponseOutputWithContext(ctx).OutputState,
	}
}

func (i ListenerFixedResponseArgs) ToListenerFixedResponsePtrOutput() ListenerFixedResponsePtrOutput {
	return i.ToListenerFixedResponsePtrOutputWithContext(context.Background())
}

func (i ListenerFixedResponseArgs) ToListenerFixedResponsePtrOutputWithContext(ctx context.Context) ListenerFixedResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerFixedResponseOutput).ToListenerFixedResponsePtrOutputWithContext(ctx)
}

// ListenerFixedResponsePtrInput is an input type that accepts ListenerFixedResponseArgs, ListenerFixedResponsePtr and ListenerFixedResponsePtrOutput values.
// You can construct a concrete instance of `ListenerFixedResponsePtrInput` via:
//
//	        ListenerFixedResponseArgs{...}
//
//	or:
//
//	        nil
type ListenerFixedResponsePtrInput interface {
	pulumi.Input

	ToListenerFixedResponsePtrOutput() ListenerFixedResponsePtrOutput
	ToListenerFixedResponsePtrOutputWithContext(context.Context) ListenerFixedResponsePtrOutput
}

type listenerFixedResponsePtrType ListenerFixedResponseArgs

func ListenerFixedResponsePtr(v *ListenerFixedResponseArgs) ListenerFixedResponsePtrInput {
	return (*listenerFixedResponsePtrType)(v)
}

func (*listenerFixedResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ListenerFixedResponse)(nil)).Elem()
}

func (i *listenerFixedResponsePtrType) ToListenerFixedResponsePtrOutput() ListenerFixedResponsePtrOutput {
	return i.ToListenerFixedResponsePtrOutputWithContext(context.Background())
}

func (i *listenerFixedResponsePtrType) ToListenerFixedResponsePtrOutputWithContext(ctx context.Context) ListenerFixedResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerFixedResponsePtrOutput)
}

func (i *listenerFixedResponsePtrType) ToOutput(ctx context.Context) pulumix.Output[*ListenerFixedResponse] {
	return pulumix.Output[*ListenerFixedResponse]{
		OutputState: i.ToListenerFixedResponsePtrOutputWithContext(ctx).OutputState,
	}
}

type ListenerFixedResponseOutput struct{ *pulumi.OutputState }

func (ListenerFixedResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerFixedResponse)(nil)).Elem()
}

func (o ListenerFixedResponseOutput) ToListenerFixedResponseOutput() ListenerFixedResponseOutput {
	return o
}

func (o ListenerFixedResponseOutput) ToListenerFixedResponseOutputWithContext(ctx context.Context) ListenerFixedResponseOutput {
	return o
}

func (o ListenerFixedResponseOutput) ToListenerFixedResponsePtrOutput() ListenerFixedResponsePtrOutput {
	return o.ToListenerFixedResponsePtrOutputWithContext(context.Background())
}

func (o ListenerFixedResponseOutput) ToListenerFixedResponsePtrOutputWithContext(ctx context.Context) ListenerFixedResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ListenerFixedResponse) *ListenerFixedResponse {
		return &v
	}).(ListenerFixedResponsePtrOutput)
}

func (o ListenerFixedResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ListenerFixedResponse] {
	return pulumix.Output[ListenerFixedResponse]{
		OutputState: o.OutputState,
	}
}

func (o ListenerFixedResponseOutput) StatusCode() pulumi.IntOutput {
	return o.ApplyT(func(v ListenerFixedResponse) int { return v.StatusCode }).(pulumi.IntOutput)
}

type ListenerFixedResponsePtrOutput struct{ *pulumi.OutputState }

func (ListenerFixedResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ListenerFixedResponse)(nil)).Elem()
}

func (o ListenerFixedResponsePtrOutput) ToListenerFixedResponsePtrOutput() ListenerFixedResponsePtrOutput {
	return o
}

func (o ListenerFixedResponsePtrOutput) ToListenerFixedResponsePtrOutputWithContext(ctx context.Context) ListenerFixedResponsePtrOutput {
	return o
}

func (o ListenerFixedResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ListenerFixedResponse] {
	return pulumix.Output[*ListenerFixedResponse]{
		OutputState: o.OutputState,
	}
}

func (o ListenerFixedResponsePtrOutput) Elem() ListenerFixedResponseOutput {
	return o.ApplyT(func(v *ListenerFixedResponse) ListenerFixedResponse {
		if v != nil {
			return *v
		}
		var ret ListenerFixedResponse
		return ret
	}).(ListenerFixedResponseOutput)
}

func (o ListenerFixedResponsePtrOutput) StatusCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ListenerFixedResponse) *int {
		if v == nil {
			return nil
		}
		return &v.StatusCode
	}).(pulumi.IntPtrOutput)
}

type ListenerForward struct {
	TargetGroups []ListenerWeightedTargetGroup `pulumi:"targetGroups"`
}

// ListenerForwardInput is an input type that accepts ListenerForwardArgs and ListenerForwardOutput values.
// You can construct a concrete instance of `ListenerForwardInput` via:
//
//	ListenerForwardArgs{...}
type ListenerForwardInput interface {
	pulumi.Input

	ToListenerForwardOutput() ListenerForwardOutput
	ToListenerForwardOutputWithContext(context.Context) ListenerForwardOutput
}

type ListenerForwardArgs struct {
	TargetGroups ListenerWeightedTargetGroupArrayInput `pulumi:"targetGroups"`
}

func (ListenerForwardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerForward)(nil)).Elem()
}

func (i ListenerForwardArgs) ToListenerForwardOutput() ListenerForwardOutput {
	return i.ToListenerForwardOutputWithContext(context.Background())
}

func (i ListenerForwardArgs) ToListenerForwardOutputWithContext(ctx context.Context) ListenerForwardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerForwardOutput)
}

func (i ListenerForwardArgs) ToOutput(ctx context.Context) pulumix.Output[ListenerForward] {
	return pulumix.Output[ListenerForward]{
		OutputState: i.ToListenerForwardOutputWithContext(ctx).OutputState,
	}
}

func (i ListenerForwardArgs) ToListenerForwardPtrOutput() ListenerForwardPtrOutput {
	return i.ToListenerForwardPtrOutputWithContext(context.Background())
}

func (i ListenerForwardArgs) ToListenerForwardPtrOutputWithContext(ctx context.Context) ListenerForwardPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerForwardOutput).ToListenerForwardPtrOutputWithContext(ctx)
}

// ListenerForwardPtrInput is an input type that accepts ListenerForwardArgs, ListenerForwardPtr and ListenerForwardPtrOutput values.
// You can construct a concrete instance of `ListenerForwardPtrInput` via:
//
//	        ListenerForwardArgs{...}
//
//	or:
//
//	        nil
type ListenerForwardPtrInput interface {
	pulumi.Input

	ToListenerForwardPtrOutput() ListenerForwardPtrOutput
	ToListenerForwardPtrOutputWithContext(context.Context) ListenerForwardPtrOutput
}

type listenerForwardPtrType ListenerForwardArgs

func ListenerForwardPtr(v *ListenerForwardArgs) ListenerForwardPtrInput {
	return (*listenerForwardPtrType)(v)
}

func (*listenerForwardPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ListenerForward)(nil)).Elem()
}

func (i *listenerForwardPtrType) ToListenerForwardPtrOutput() ListenerForwardPtrOutput {
	return i.ToListenerForwardPtrOutputWithContext(context.Background())
}

func (i *listenerForwardPtrType) ToListenerForwardPtrOutputWithContext(ctx context.Context) ListenerForwardPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerForwardPtrOutput)
}

func (i *listenerForwardPtrType) ToOutput(ctx context.Context) pulumix.Output[*ListenerForward] {
	return pulumix.Output[*ListenerForward]{
		OutputState: i.ToListenerForwardPtrOutputWithContext(ctx).OutputState,
	}
}

type ListenerForwardOutput struct{ *pulumi.OutputState }

func (ListenerForwardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerForward)(nil)).Elem()
}

func (o ListenerForwardOutput) ToListenerForwardOutput() ListenerForwardOutput {
	return o
}

func (o ListenerForwardOutput) ToListenerForwardOutputWithContext(ctx context.Context) ListenerForwardOutput {
	return o
}

func (o ListenerForwardOutput) ToListenerForwardPtrOutput() ListenerForwardPtrOutput {
	return o.ToListenerForwardPtrOutputWithContext(context.Background())
}

func (o ListenerForwardOutput) ToListenerForwardPtrOutputWithContext(ctx context.Context) ListenerForwardPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ListenerForward) *ListenerForward {
		return &v
	}).(ListenerForwardPtrOutput)
}

func (o ListenerForwardOutput) ToOutput(ctx context.Context) pulumix.Output[ListenerForward] {
	return pulumix.Output[ListenerForward]{
		OutputState: o.OutputState,
	}
}

func (o ListenerForwardOutput) TargetGroups() ListenerWeightedTargetGroupArrayOutput {
	return o.ApplyT(func(v ListenerForward) []ListenerWeightedTargetGroup { return v.TargetGroups }).(ListenerWeightedTargetGroupArrayOutput)
}

type ListenerForwardPtrOutput struct{ *pulumi.OutputState }

func (ListenerForwardPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ListenerForward)(nil)).Elem()
}

func (o ListenerForwardPtrOutput) ToListenerForwardPtrOutput() ListenerForwardPtrOutput {
	return o
}

func (o ListenerForwardPtrOutput) ToListenerForwardPtrOutputWithContext(ctx context.Context) ListenerForwardPtrOutput {
	return o
}

func (o ListenerForwardPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ListenerForward] {
	return pulumix.Output[*ListenerForward]{
		OutputState: o.OutputState,
	}
}

func (o ListenerForwardPtrOutput) Elem() ListenerForwardOutput {
	return o.ApplyT(func(v *ListenerForward) ListenerForward {
		if v != nil {
			return *v
		}
		var ret ListenerForward
		return ret
	}).(ListenerForwardOutput)
}

func (o ListenerForwardPtrOutput) TargetGroups() ListenerWeightedTargetGroupArrayOutput {
	return o.ApplyT(func(v *ListenerForward) []ListenerWeightedTargetGroup {
		if v == nil {
			return nil
		}
		return v.TargetGroups
	}).(ListenerWeightedTargetGroupArrayOutput)
}

type ListenerTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// ListenerTagInput is an input type that accepts ListenerTagArgs and ListenerTagOutput values.
// You can construct a concrete instance of `ListenerTagInput` via:
//
//	ListenerTagArgs{...}
type ListenerTagInput interface {
	pulumi.Input

	ToListenerTagOutput() ListenerTagOutput
	ToListenerTagOutputWithContext(context.Context) ListenerTagOutput
}

type ListenerTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (ListenerTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerTag)(nil)).Elem()
}

func (i ListenerTagArgs) ToListenerTagOutput() ListenerTagOutput {
	return i.ToListenerTagOutputWithContext(context.Background())
}

func (i ListenerTagArgs) ToListenerTagOutputWithContext(ctx context.Context) ListenerTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerTagOutput)
}

func (i ListenerTagArgs) ToOutput(ctx context.Context) pulumix.Output[ListenerTag] {
	return pulumix.Output[ListenerTag]{
		OutputState: i.ToListenerTagOutputWithContext(ctx).OutputState,
	}
}

// ListenerTagArrayInput is an input type that accepts ListenerTagArray and ListenerTagArrayOutput values.
// You can construct a concrete instance of `ListenerTagArrayInput` via:
//
//	ListenerTagArray{ ListenerTagArgs{...} }
type ListenerTagArrayInput interface {
	pulumi.Input

	ToListenerTagArrayOutput() ListenerTagArrayOutput
	ToListenerTagArrayOutputWithContext(context.Context) ListenerTagArrayOutput
}

type ListenerTagArray []ListenerTagInput

func (ListenerTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListenerTag)(nil)).Elem()
}

func (i ListenerTagArray) ToListenerTagArrayOutput() ListenerTagArrayOutput {
	return i.ToListenerTagArrayOutputWithContext(context.Background())
}

func (i ListenerTagArray) ToListenerTagArrayOutputWithContext(ctx context.Context) ListenerTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerTagArrayOutput)
}

func (i ListenerTagArray) ToOutput(ctx context.Context) pulumix.Output[[]ListenerTag] {
	return pulumix.Output[[]ListenerTag]{
		OutputState: i.ToListenerTagArrayOutputWithContext(ctx).OutputState,
	}
}

type ListenerTagOutput struct{ *pulumi.OutputState }

func (ListenerTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerTag)(nil)).Elem()
}

func (o ListenerTagOutput) ToListenerTagOutput() ListenerTagOutput {
	return o
}

func (o ListenerTagOutput) ToListenerTagOutputWithContext(ctx context.Context) ListenerTagOutput {
	return o
}

func (o ListenerTagOutput) ToOutput(ctx context.Context) pulumix.Output[ListenerTag] {
	return pulumix.Output[ListenerTag]{
		OutputState: o.OutputState,
	}
}

func (o ListenerTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ListenerTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o ListenerTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ListenerTag) string { return v.Value }).(pulumi.StringOutput)
}

type ListenerTagArrayOutput struct{ *pulumi.OutputState }

func (ListenerTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListenerTag)(nil)).Elem()
}

func (o ListenerTagArrayOutput) ToListenerTagArrayOutput() ListenerTagArrayOutput {
	return o
}

func (o ListenerTagArrayOutput) ToListenerTagArrayOutputWithContext(ctx context.Context) ListenerTagArrayOutput {
	return o
}

func (o ListenerTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ListenerTag] {
	return pulumix.Output[[]ListenerTag]{
		OutputState: o.OutputState,
	}
}

func (o ListenerTagArrayOutput) Index(i pulumi.IntInput) ListenerTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ListenerTag {
		return vs[0].([]ListenerTag)[vs[1].(int)]
	}).(ListenerTagOutput)
}

type ListenerWeightedTargetGroup struct {
	TargetGroupIdentifier string `pulumi:"targetGroupIdentifier"`
	Weight                *int   `pulumi:"weight"`
}

// ListenerWeightedTargetGroupInput is an input type that accepts ListenerWeightedTargetGroupArgs and ListenerWeightedTargetGroupOutput values.
// You can construct a concrete instance of `ListenerWeightedTargetGroupInput` via:
//
//	ListenerWeightedTargetGroupArgs{...}
type ListenerWeightedTargetGroupInput interface {
	pulumi.Input

	ToListenerWeightedTargetGroupOutput() ListenerWeightedTargetGroupOutput
	ToListenerWeightedTargetGroupOutputWithContext(context.Context) ListenerWeightedTargetGroupOutput
}

type ListenerWeightedTargetGroupArgs struct {
	TargetGroupIdentifier pulumi.StringInput `pulumi:"targetGroupIdentifier"`
	Weight                pulumi.IntPtrInput `pulumi:"weight"`
}

func (ListenerWeightedTargetGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerWeightedTargetGroup)(nil)).Elem()
}

func (i ListenerWeightedTargetGroupArgs) ToListenerWeightedTargetGroupOutput() ListenerWeightedTargetGroupOutput {
	return i.ToListenerWeightedTargetGroupOutputWithContext(context.Background())
}

func (i ListenerWeightedTargetGroupArgs) ToListenerWeightedTargetGroupOutputWithContext(ctx context.Context) ListenerWeightedTargetGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerWeightedTargetGroupOutput)
}

func (i ListenerWeightedTargetGroupArgs) ToOutput(ctx context.Context) pulumix.Output[ListenerWeightedTargetGroup] {
	return pulumix.Output[ListenerWeightedTargetGroup]{
		OutputState: i.ToListenerWeightedTargetGroupOutputWithContext(ctx).OutputState,
	}
}

// ListenerWeightedTargetGroupArrayInput is an input type that accepts ListenerWeightedTargetGroupArray and ListenerWeightedTargetGroupArrayOutput values.
// You can construct a concrete instance of `ListenerWeightedTargetGroupArrayInput` via:
//
//	ListenerWeightedTargetGroupArray{ ListenerWeightedTargetGroupArgs{...} }
type ListenerWeightedTargetGroupArrayInput interface {
	pulumi.Input

	ToListenerWeightedTargetGroupArrayOutput() ListenerWeightedTargetGroupArrayOutput
	ToListenerWeightedTargetGroupArrayOutputWithContext(context.Context) ListenerWeightedTargetGroupArrayOutput
}

type ListenerWeightedTargetGroupArray []ListenerWeightedTargetGroupInput

func (ListenerWeightedTargetGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListenerWeightedTargetGroup)(nil)).Elem()
}

func (i ListenerWeightedTargetGroupArray) ToListenerWeightedTargetGroupArrayOutput() ListenerWeightedTargetGroupArrayOutput {
	return i.ToListenerWeightedTargetGroupArrayOutputWithContext(context.Background())
}

func (i ListenerWeightedTargetGroupArray) ToListenerWeightedTargetGroupArrayOutputWithContext(ctx context.Context) ListenerWeightedTargetGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerWeightedTargetGroupArrayOutput)
}

func (i ListenerWeightedTargetGroupArray) ToOutput(ctx context.Context) pulumix.Output[[]ListenerWeightedTargetGroup] {
	return pulumix.Output[[]ListenerWeightedTargetGroup]{
		OutputState: i.ToListenerWeightedTargetGroupArrayOutputWithContext(ctx).OutputState,
	}
}

type ListenerWeightedTargetGroupOutput struct{ *pulumi.OutputState }

func (ListenerWeightedTargetGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerWeightedTargetGroup)(nil)).Elem()
}

func (o ListenerWeightedTargetGroupOutput) ToListenerWeightedTargetGroupOutput() ListenerWeightedTargetGroupOutput {
	return o
}

func (o ListenerWeightedTargetGroupOutput) ToListenerWeightedTargetGroupOutputWithContext(ctx context.Context) ListenerWeightedTargetGroupOutput {
	return o
}

func (o ListenerWeightedTargetGroupOutput) ToOutput(ctx context.Context) pulumix.Output[ListenerWeightedTargetGroup] {
	return pulumix.Output[ListenerWeightedTargetGroup]{
		OutputState: o.OutputState,
	}
}

func (o ListenerWeightedTargetGroupOutput) TargetGroupIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v ListenerWeightedTargetGroup) string { return v.TargetGroupIdentifier }).(pulumi.StringOutput)
}

func (o ListenerWeightedTargetGroupOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ListenerWeightedTargetGroup) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type ListenerWeightedTargetGroupArrayOutput struct{ *pulumi.OutputState }

func (ListenerWeightedTargetGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListenerWeightedTargetGroup)(nil)).Elem()
}

func (o ListenerWeightedTargetGroupArrayOutput) ToListenerWeightedTargetGroupArrayOutput() ListenerWeightedTargetGroupArrayOutput {
	return o
}

func (o ListenerWeightedTargetGroupArrayOutput) ToListenerWeightedTargetGroupArrayOutputWithContext(ctx context.Context) ListenerWeightedTargetGroupArrayOutput {
	return o
}

func (o ListenerWeightedTargetGroupArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ListenerWeightedTargetGroup] {
	return pulumix.Output[[]ListenerWeightedTargetGroup]{
		OutputState: o.OutputState,
	}
}

func (o ListenerWeightedTargetGroupArrayOutput) Index(i pulumi.IntInput) ListenerWeightedTargetGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ListenerWeightedTargetGroup {
		return vs[0].([]ListenerWeightedTargetGroup)[vs[1].(int)]
	}).(ListenerWeightedTargetGroupOutput)
}

type RuleAction struct {
	FixedResponse *RuleFixedResponse `pulumi:"fixedResponse"`
	Forward       *RuleForward       `pulumi:"forward"`
}

// RuleActionInput is an input type that accepts RuleActionArgs and RuleActionOutput values.
// You can construct a concrete instance of `RuleActionInput` via:
//
//	RuleActionArgs{...}
type RuleActionInput interface {
	pulumi.Input

	ToRuleActionOutput() RuleActionOutput
	ToRuleActionOutputWithContext(context.Context) RuleActionOutput
}

type RuleActionArgs struct {
	FixedResponse RuleFixedResponsePtrInput `pulumi:"fixedResponse"`
	Forward       RuleForwardPtrInput       `pulumi:"forward"`
}

func (RuleActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleAction)(nil)).Elem()
}

func (i RuleActionArgs) ToRuleActionOutput() RuleActionOutput {
	return i.ToRuleActionOutputWithContext(context.Background())
}

func (i RuleActionArgs) ToRuleActionOutputWithContext(ctx context.Context) RuleActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleActionOutput)
}

func (i RuleActionArgs) ToOutput(ctx context.Context) pulumix.Output[RuleAction] {
	return pulumix.Output[RuleAction]{
		OutputState: i.ToRuleActionOutputWithContext(ctx).OutputState,
	}
}

type RuleActionOutput struct{ *pulumi.OutputState }

func (RuleActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleAction)(nil)).Elem()
}

func (o RuleActionOutput) ToRuleActionOutput() RuleActionOutput {
	return o
}

func (o RuleActionOutput) ToRuleActionOutputWithContext(ctx context.Context) RuleActionOutput {
	return o
}

func (o RuleActionOutput) ToOutput(ctx context.Context) pulumix.Output[RuleAction] {
	return pulumix.Output[RuleAction]{
		OutputState: o.OutputState,
	}
}

func (o RuleActionOutput) FixedResponse() RuleFixedResponsePtrOutput {
	return o.ApplyT(func(v RuleAction) *RuleFixedResponse { return v.FixedResponse }).(RuleFixedResponsePtrOutput)
}

func (o RuleActionOutput) Forward() RuleForwardPtrOutput {
	return o.ApplyT(func(v RuleAction) *RuleForward { return v.Forward }).(RuleForwardPtrOutput)
}

type RuleActionPtrOutput struct{ *pulumi.OutputState }

func (RuleActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleAction)(nil)).Elem()
}

func (o RuleActionPtrOutput) ToRuleActionPtrOutput() RuleActionPtrOutput {
	return o
}

func (o RuleActionPtrOutput) ToRuleActionPtrOutputWithContext(ctx context.Context) RuleActionPtrOutput {
	return o
}

func (o RuleActionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RuleAction] {
	return pulumix.Output[*RuleAction]{
		OutputState: o.OutputState,
	}
}

func (o RuleActionPtrOutput) Elem() RuleActionOutput {
	return o.ApplyT(func(v *RuleAction) RuleAction {
		if v != nil {
			return *v
		}
		var ret RuleAction
		return ret
	}).(RuleActionOutput)
}

func (o RuleActionPtrOutput) FixedResponse() RuleFixedResponsePtrOutput {
	return o.ApplyT(func(v *RuleAction) *RuleFixedResponse {
		if v == nil {
			return nil
		}
		return v.FixedResponse
	}).(RuleFixedResponsePtrOutput)
}

func (o RuleActionPtrOutput) Forward() RuleForwardPtrOutput {
	return o.ApplyT(func(v *RuleAction) *RuleForward {
		if v == nil {
			return nil
		}
		return v.Forward
	}).(RuleForwardPtrOutput)
}

type RuleFixedResponse struct {
	StatusCode int `pulumi:"statusCode"`
}

// RuleFixedResponseInput is an input type that accepts RuleFixedResponseArgs and RuleFixedResponseOutput values.
// You can construct a concrete instance of `RuleFixedResponseInput` via:
//
//	RuleFixedResponseArgs{...}
type RuleFixedResponseInput interface {
	pulumi.Input

	ToRuleFixedResponseOutput() RuleFixedResponseOutput
	ToRuleFixedResponseOutputWithContext(context.Context) RuleFixedResponseOutput
}

type RuleFixedResponseArgs struct {
	StatusCode pulumi.IntInput `pulumi:"statusCode"`
}

func (RuleFixedResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleFixedResponse)(nil)).Elem()
}

func (i RuleFixedResponseArgs) ToRuleFixedResponseOutput() RuleFixedResponseOutput {
	return i.ToRuleFixedResponseOutputWithContext(context.Background())
}

func (i RuleFixedResponseArgs) ToRuleFixedResponseOutputWithContext(ctx context.Context) RuleFixedResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleFixedResponseOutput)
}

func (i RuleFixedResponseArgs) ToOutput(ctx context.Context) pulumix.Output[RuleFixedResponse] {
	return pulumix.Output[RuleFixedResponse]{
		OutputState: i.ToRuleFixedResponseOutputWithContext(ctx).OutputState,
	}
}

func (i RuleFixedResponseArgs) ToRuleFixedResponsePtrOutput() RuleFixedResponsePtrOutput {
	return i.ToRuleFixedResponsePtrOutputWithContext(context.Background())
}

func (i RuleFixedResponseArgs) ToRuleFixedResponsePtrOutputWithContext(ctx context.Context) RuleFixedResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleFixedResponseOutput).ToRuleFixedResponsePtrOutputWithContext(ctx)
}

// RuleFixedResponsePtrInput is an input type that accepts RuleFixedResponseArgs, RuleFixedResponsePtr and RuleFixedResponsePtrOutput values.
// You can construct a concrete instance of `RuleFixedResponsePtrInput` via:
//
//	        RuleFixedResponseArgs{...}
//
//	or:
//
//	        nil
type RuleFixedResponsePtrInput interface {
	pulumi.Input

	ToRuleFixedResponsePtrOutput() RuleFixedResponsePtrOutput
	ToRuleFixedResponsePtrOutputWithContext(context.Context) RuleFixedResponsePtrOutput
}

type ruleFixedResponsePtrType RuleFixedResponseArgs

func RuleFixedResponsePtr(v *RuleFixedResponseArgs) RuleFixedResponsePtrInput {
	return (*ruleFixedResponsePtrType)(v)
}

func (*ruleFixedResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleFixedResponse)(nil)).Elem()
}

func (i *ruleFixedResponsePtrType) ToRuleFixedResponsePtrOutput() RuleFixedResponsePtrOutput {
	return i.ToRuleFixedResponsePtrOutputWithContext(context.Background())
}

func (i *ruleFixedResponsePtrType) ToRuleFixedResponsePtrOutputWithContext(ctx context.Context) RuleFixedResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleFixedResponsePtrOutput)
}

func (i *ruleFixedResponsePtrType) ToOutput(ctx context.Context) pulumix.Output[*RuleFixedResponse] {
	return pulumix.Output[*RuleFixedResponse]{
		OutputState: i.ToRuleFixedResponsePtrOutputWithContext(ctx).OutputState,
	}
}

type RuleFixedResponseOutput struct{ *pulumi.OutputState }

func (RuleFixedResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleFixedResponse)(nil)).Elem()
}

func (o RuleFixedResponseOutput) ToRuleFixedResponseOutput() RuleFixedResponseOutput {
	return o
}

func (o RuleFixedResponseOutput) ToRuleFixedResponseOutputWithContext(ctx context.Context) RuleFixedResponseOutput {
	return o
}

func (o RuleFixedResponseOutput) ToRuleFixedResponsePtrOutput() RuleFixedResponsePtrOutput {
	return o.ToRuleFixedResponsePtrOutputWithContext(context.Background())
}

func (o RuleFixedResponseOutput) ToRuleFixedResponsePtrOutputWithContext(ctx context.Context) RuleFixedResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RuleFixedResponse) *RuleFixedResponse {
		return &v
	}).(RuleFixedResponsePtrOutput)
}

func (o RuleFixedResponseOutput) ToOutput(ctx context.Context) pulumix.Output[RuleFixedResponse] {
	return pulumix.Output[RuleFixedResponse]{
		OutputState: o.OutputState,
	}
}

func (o RuleFixedResponseOutput) StatusCode() pulumi.IntOutput {
	return o.ApplyT(func(v RuleFixedResponse) int { return v.StatusCode }).(pulumi.IntOutput)
}

type RuleFixedResponsePtrOutput struct{ *pulumi.OutputState }

func (RuleFixedResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleFixedResponse)(nil)).Elem()
}

func (o RuleFixedResponsePtrOutput) ToRuleFixedResponsePtrOutput() RuleFixedResponsePtrOutput {
	return o
}

func (o RuleFixedResponsePtrOutput) ToRuleFixedResponsePtrOutputWithContext(ctx context.Context) RuleFixedResponsePtrOutput {
	return o
}

func (o RuleFixedResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RuleFixedResponse] {
	return pulumix.Output[*RuleFixedResponse]{
		OutputState: o.OutputState,
	}
}

func (o RuleFixedResponsePtrOutput) Elem() RuleFixedResponseOutput {
	return o.ApplyT(func(v *RuleFixedResponse) RuleFixedResponse {
		if v != nil {
			return *v
		}
		var ret RuleFixedResponse
		return ret
	}).(RuleFixedResponseOutput)
}

func (o RuleFixedResponsePtrOutput) StatusCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RuleFixedResponse) *int {
		if v == nil {
			return nil
		}
		return &v.StatusCode
	}).(pulumi.IntPtrOutput)
}

type RuleForward struct {
	TargetGroups []RuleWeightedTargetGroup `pulumi:"targetGroups"`
}

// RuleForwardInput is an input type that accepts RuleForwardArgs and RuleForwardOutput values.
// You can construct a concrete instance of `RuleForwardInput` via:
//
//	RuleForwardArgs{...}
type RuleForwardInput interface {
	pulumi.Input

	ToRuleForwardOutput() RuleForwardOutput
	ToRuleForwardOutputWithContext(context.Context) RuleForwardOutput
}

type RuleForwardArgs struct {
	TargetGroups RuleWeightedTargetGroupArrayInput `pulumi:"targetGroups"`
}

func (RuleForwardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleForward)(nil)).Elem()
}

func (i RuleForwardArgs) ToRuleForwardOutput() RuleForwardOutput {
	return i.ToRuleForwardOutputWithContext(context.Background())
}

func (i RuleForwardArgs) ToRuleForwardOutputWithContext(ctx context.Context) RuleForwardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleForwardOutput)
}

func (i RuleForwardArgs) ToOutput(ctx context.Context) pulumix.Output[RuleForward] {
	return pulumix.Output[RuleForward]{
		OutputState: i.ToRuleForwardOutputWithContext(ctx).OutputState,
	}
}

func (i RuleForwardArgs) ToRuleForwardPtrOutput() RuleForwardPtrOutput {
	return i.ToRuleForwardPtrOutputWithContext(context.Background())
}

func (i RuleForwardArgs) ToRuleForwardPtrOutputWithContext(ctx context.Context) RuleForwardPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleForwardOutput).ToRuleForwardPtrOutputWithContext(ctx)
}

// RuleForwardPtrInput is an input type that accepts RuleForwardArgs, RuleForwardPtr and RuleForwardPtrOutput values.
// You can construct a concrete instance of `RuleForwardPtrInput` via:
//
//	        RuleForwardArgs{...}
//
//	or:
//
//	        nil
type RuleForwardPtrInput interface {
	pulumi.Input

	ToRuleForwardPtrOutput() RuleForwardPtrOutput
	ToRuleForwardPtrOutputWithContext(context.Context) RuleForwardPtrOutput
}

type ruleForwardPtrType RuleForwardArgs

func RuleForwardPtr(v *RuleForwardArgs) RuleForwardPtrInput {
	return (*ruleForwardPtrType)(v)
}

func (*ruleForwardPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleForward)(nil)).Elem()
}

func (i *ruleForwardPtrType) ToRuleForwardPtrOutput() RuleForwardPtrOutput {
	return i.ToRuleForwardPtrOutputWithContext(context.Background())
}

func (i *ruleForwardPtrType) ToRuleForwardPtrOutputWithContext(ctx context.Context) RuleForwardPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleForwardPtrOutput)
}

func (i *ruleForwardPtrType) ToOutput(ctx context.Context) pulumix.Output[*RuleForward] {
	return pulumix.Output[*RuleForward]{
		OutputState: i.ToRuleForwardPtrOutputWithContext(ctx).OutputState,
	}
}

type RuleForwardOutput struct{ *pulumi.OutputState }

func (RuleForwardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleForward)(nil)).Elem()
}

func (o RuleForwardOutput) ToRuleForwardOutput() RuleForwardOutput {
	return o
}

func (o RuleForwardOutput) ToRuleForwardOutputWithContext(ctx context.Context) RuleForwardOutput {
	return o
}

func (o RuleForwardOutput) ToRuleForwardPtrOutput() RuleForwardPtrOutput {
	return o.ToRuleForwardPtrOutputWithContext(context.Background())
}

func (o RuleForwardOutput) ToRuleForwardPtrOutputWithContext(ctx context.Context) RuleForwardPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RuleForward) *RuleForward {
		return &v
	}).(RuleForwardPtrOutput)
}

func (o RuleForwardOutput) ToOutput(ctx context.Context) pulumix.Output[RuleForward] {
	return pulumix.Output[RuleForward]{
		OutputState: o.OutputState,
	}
}

func (o RuleForwardOutput) TargetGroups() RuleWeightedTargetGroupArrayOutput {
	return o.ApplyT(func(v RuleForward) []RuleWeightedTargetGroup { return v.TargetGroups }).(RuleWeightedTargetGroupArrayOutput)
}

type RuleForwardPtrOutput struct{ *pulumi.OutputState }

func (RuleForwardPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleForward)(nil)).Elem()
}

func (o RuleForwardPtrOutput) ToRuleForwardPtrOutput() RuleForwardPtrOutput {
	return o
}

func (o RuleForwardPtrOutput) ToRuleForwardPtrOutputWithContext(ctx context.Context) RuleForwardPtrOutput {
	return o
}

func (o RuleForwardPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RuleForward] {
	return pulumix.Output[*RuleForward]{
		OutputState: o.OutputState,
	}
}

func (o RuleForwardPtrOutput) Elem() RuleForwardOutput {
	return o.ApplyT(func(v *RuleForward) RuleForward {
		if v != nil {
			return *v
		}
		var ret RuleForward
		return ret
	}).(RuleForwardOutput)
}

func (o RuleForwardPtrOutput) TargetGroups() RuleWeightedTargetGroupArrayOutput {
	return o.ApplyT(func(v *RuleForward) []RuleWeightedTargetGroup {
		if v == nil {
			return nil
		}
		return v.TargetGroups
	}).(RuleWeightedTargetGroupArrayOutput)
}

type RuleHeaderMatch struct {
	CaseSensitive *bool               `pulumi:"caseSensitive"`
	Match         RuleHeaderMatchType `pulumi:"match"`
	Name          string              `pulumi:"name"`
}

// RuleHeaderMatchInput is an input type that accepts RuleHeaderMatchArgs and RuleHeaderMatchOutput values.
// You can construct a concrete instance of `RuleHeaderMatchInput` via:
//
//	RuleHeaderMatchArgs{...}
type RuleHeaderMatchInput interface {
	pulumi.Input

	ToRuleHeaderMatchOutput() RuleHeaderMatchOutput
	ToRuleHeaderMatchOutputWithContext(context.Context) RuleHeaderMatchOutput
}

type RuleHeaderMatchArgs struct {
	CaseSensitive pulumi.BoolPtrInput      `pulumi:"caseSensitive"`
	Match         RuleHeaderMatchTypeInput `pulumi:"match"`
	Name          pulumi.StringInput       `pulumi:"name"`
}

func (RuleHeaderMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleHeaderMatch)(nil)).Elem()
}

func (i RuleHeaderMatchArgs) ToRuleHeaderMatchOutput() RuleHeaderMatchOutput {
	return i.ToRuleHeaderMatchOutputWithContext(context.Background())
}

func (i RuleHeaderMatchArgs) ToRuleHeaderMatchOutputWithContext(ctx context.Context) RuleHeaderMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleHeaderMatchOutput)
}

func (i RuleHeaderMatchArgs) ToOutput(ctx context.Context) pulumix.Output[RuleHeaderMatch] {
	return pulumix.Output[RuleHeaderMatch]{
		OutputState: i.ToRuleHeaderMatchOutputWithContext(ctx).OutputState,
	}
}

// RuleHeaderMatchArrayInput is an input type that accepts RuleHeaderMatchArray and RuleHeaderMatchArrayOutput values.
// You can construct a concrete instance of `RuleHeaderMatchArrayInput` via:
//
//	RuleHeaderMatchArray{ RuleHeaderMatchArgs{...} }
type RuleHeaderMatchArrayInput interface {
	pulumi.Input

	ToRuleHeaderMatchArrayOutput() RuleHeaderMatchArrayOutput
	ToRuleHeaderMatchArrayOutputWithContext(context.Context) RuleHeaderMatchArrayOutput
}

type RuleHeaderMatchArray []RuleHeaderMatchInput

func (RuleHeaderMatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleHeaderMatch)(nil)).Elem()
}

func (i RuleHeaderMatchArray) ToRuleHeaderMatchArrayOutput() RuleHeaderMatchArrayOutput {
	return i.ToRuleHeaderMatchArrayOutputWithContext(context.Background())
}

func (i RuleHeaderMatchArray) ToRuleHeaderMatchArrayOutputWithContext(ctx context.Context) RuleHeaderMatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleHeaderMatchArrayOutput)
}

func (i RuleHeaderMatchArray) ToOutput(ctx context.Context) pulumix.Output[[]RuleHeaderMatch] {
	return pulumix.Output[[]RuleHeaderMatch]{
		OutputState: i.ToRuleHeaderMatchArrayOutputWithContext(ctx).OutputState,
	}
}

type RuleHeaderMatchOutput struct{ *pulumi.OutputState }

func (RuleHeaderMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleHeaderMatch)(nil)).Elem()
}

func (o RuleHeaderMatchOutput) ToRuleHeaderMatchOutput() RuleHeaderMatchOutput {
	return o
}

func (o RuleHeaderMatchOutput) ToRuleHeaderMatchOutputWithContext(ctx context.Context) RuleHeaderMatchOutput {
	return o
}

func (o RuleHeaderMatchOutput) ToOutput(ctx context.Context) pulumix.Output[RuleHeaderMatch] {
	return pulumix.Output[RuleHeaderMatch]{
		OutputState: o.OutputState,
	}
}

func (o RuleHeaderMatchOutput) CaseSensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RuleHeaderMatch) *bool { return v.CaseSensitive }).(pulumi.BoolPtrOutput)
}

func (o RuleHeaderMatchOutput) Match() RuleHeaderMatchTypeOutput {
	return o.ApplyT(func(v RuleHeaderMatch) RuleHeaderMatchType { return v.Match }).(RuleHeaderMatchTypeOutput)
}

func (o RuleHeaderMatchOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RuleHeaderMatch) string { return v.Name }).(pulumi.StringOutput)
}

type RuleHeaderMatchArrayOutput struct{ *pulumi.OutputState }

func (RuleHeaderMatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleHeaderMatch)(nil)).Elem()
}

func (o RuleHeaderMatchArrayOutput) ToRuleHeaderMatchArrayOutput() RuleHeaderMatchArrayOutput {
	return o
}

func (o RuleHeaderMatchArrayOutput) ToRuleHeaderMatchArrayOutputWithContext(ctx context.Context) RuleHeaderMatchArrayOutput {
	return o
}

func (o RuleHeaderMatchArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]RuleHeaderMatch] {
	return pulumix.Output[[]RuleHeaderMatch]{
		OutputState: o.OutputState,
	}
}

func (o RuleHeaderMatchArrayOutput) Index(i pulumi.IntInput) RuleHeaderMatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleHeaderMatch {
		return vs[0].([]RuleHeaderMatch)[vs[1].(int)]
	}).(RuleHeaderMatchOutput)
}

type RuleHeaderMatchType struct {
	Contains *string `pulumi:"contains"`
	Exact    *string `pulumi:"exact"`
	Prefix   *string `pulumi:"prefix"`
}

// RuleHeaderMatchTypeInput is an input type that accepts RuleHeaderMatchTypeArgs and RuleHeaderMatchTypeOutput values.
// You can construct a concrete instance of `RuleHeaderMatchTypeInput` via:
//
//	RuleHeaderMatchTypeArgs{...}
type RuleHeaderMatchTypeInput interface {
	pulumi.Input

	ToRuleHeaderMatchTypeOutput() RuleHeaderMatchTypeOutput
	ToRuleHeaderMatchTypeOutputWithContext(context.Context) RuleHeaderMatchTypeOutput
}

type RuleHeaderMatchTypeArgs struct {
	Contains pulumi.StringPtrInput `pulumi:"contains"`
	Exact    pulumi.StringPtrInput `pulumi:"exact"`
	Prefix   pulumi.StringPtrInput `pulumi:"prefix"`
}

func (RuleHeaderMatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleHeaderMatchType)(nil)).Elem()
}

func (i RuleHeaderMatchTypeArgs) ToRuleHeaderMatchTypeOutput() RuleHeaderMatchTypeOutput {
	return i.ToRuleHeaderMatchTypeOutputWithContext(context.Background())
}

func (i RuleHeaderMatchTypeArgs) ToRuleHeaderMatchTypeOutputWithContext(ctx context.Context) RuleHeaderMatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleHeaderMatchTypeOutput)
}

func (i RuleHeaderMatchTypeArgs) ToOutput(ctx context.Context) pulumix.Output[RuleHeaderMatchType] {
	return pulumix.Output[RuleHeaderMatchType]{
		OutputState: i.ToRuleHeaderMatchTypeOutputWithContext(ctx).OutputState,
	}
}

type RuleHeaderMatchTypeOutput struct{ *pulumi.OutputState }

func (RuleHeaderMatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleHeaderMatchType)(nil)).Elem()
}

func (o RuleHeaderMatchTypeOutput) ToRuleHeaderMatchTypeOutput() RuleHeaderMatchTypeOutput {
	return o
}

func (o RuleHeaderMatchTypeOutput) ToRuleHeaderMatchTypeOutputWithContext(ctx context.Context) RuleHeaderMatchTypeOutput {
	return o
}

func (o RuleHeaderMatchTypeOutput) ToOutput(ctx context.Context) pulumix.Output[RuleHeaderMatchType] {
	return pulumix.Output[RuleHeaderMatchType]{
		OutputState: o.OutputState,
	}
}

func (o RuleHeaderMatchTypeOutput) Contains() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleHeaderMatchType) *string { return v.Contains }).(pulumi.StringPtrOutput)
}

func (o RuleHeaderMatchTypeOutput) Exact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleHeaderMatchType) *string { return v.Exact }).(pulumi.StringPtrOutput)
}

func (o RuleHeaderMatchTypeOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleHeaderMatchType) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

type RuleHttpMatch struct {
	HeaderMatches []RuleHeaderMatch    `pulumi:"headerMatches"`
	Method        *RuleHttpMatchMethod `pulumi:"method"`
	PathMatch     *RulePathMatch       `pulumi:"pathMatch"`
}

// RuleHttpMatchInput is an input type that accepts RuleHttpMatchArgs and RuleHttpMatchOutput values.
// You can construct a concrete instance of `RuleHttpMatchInput` via:
//
//	RuleHttpMatchArgs{...}
type RuleHttpMatchInput interface {
	pulumi.Input

	ToRuleHttpMatchOutput() RuleHttpMatchOutput
	ToRuleHttpMatchOutputWithContext(context.Context) RuleHttpMatchOutput
}

type RuleHttpMatchArgs struct {
	HeaderMatches RuleHeaderMatchArrayInput   `pulumi:"headerMatches"`
	Method        RuleHttpMatchMethodPtrInput `pulumi:"method"`
	PathMatch     RulePathMatchPtrInput       `pulumi:"pathMatch"`
}

func (RuleHttpMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleHttpMatch)(nil)).Elem()
}

func (i RuleHttpMatchArgs) ToRuleHttpMatchOutput() RuleHttpMatchOutput {
	return i.ToRuleHttpMatchOutputWithContext(context.Background())
}

func (i RuleHttpMatchArgs) ToRuleHttpMatchOutputWithContext(ctx context.Context) RuleHttpMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleHttpMatchOutput)
}

func (i RuleHttpMatchArgs) ToOutput(ctx context.Context) pulumix.Output[RuleHttpMatch] {
	return pulumix.Output[RuleHttpMatch]{
		OutputState: i.ToRuleHttpMatchOutputWithContext(ctx).OutputState,
	}
}

type RuleHttpMatchOutput struct{ *pulumi.OutputState }

func (RuleHttpMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleHttpMatch)(nil)).Elem()
}

func (o RuleHttpMatchOutput) ToRuleHttpMatchOutput() RuleHttpMatchOutput {
	return o
}

func (o RuleHttpMatchOutput) ToRuleHttpMatchOutputWithContext(ctx context.Context) RuleHttpMatchOutput {
	return o
}

func (o RuleHttpMatchOutput) ToOutput(ctx context.Context) pulumix.Output[RuleHttpMatch] {
	return pulumix.Output[RuleHttpMatch]{
		OutputState: o.OutputState,
	}
}

func (o RuleHttpMatchOutput) HeaderMatches() RuleHeaderMatchArrayOutput {
	return o.ApplyT(func(v RuleHttpMatch) []RuleHeaderMatch { return v.HeaderMatches }).(RuleHeaderMatchArrayOutput)
}

func (o RuleHttpMatchOutput) Method() RuleHttpMatchMethodPtrOutput {
	return o.ApplyT(func(v RuleHttpMatch) *RuleHttpMatchMethod { return v.Method }).(RuleHttpMatchMethodPtrOutput)
}

func (o RuleHttpMatchOutput) PathMatch() RulePathMatchPtrOutput {
	return o.ApplyT(func(v RuleHttpMatch) *RulePathMatch { return v.PathMatch }).(RulePathMatchPtrOutput)
}

type RuleHttpMatchPtrOutput struct{ *pulumi.OutputState }

func (RuleHttpMatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleHttpMatch)(nil)).Elem()
}

func (o RuleHttpMatchPtrOutput) ToRuleHttpMatchPtrOutput() RuleHttpMatchPtrOutput {
	return o
}

func (o RuleHttpMatchPtrOutput) ToRuleHttpMatchPtrOutputWithContext(ctx context.Context) RuleHttpMatchPtrOutput {
	return o
}

func (o RuleHttpMatchPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RuleHttpMatch] {
	return pulumix.Output[*RuleHttpMatch]{
		OutputState: o.OutputState,
	}
}

func (o RuleHttpMatchPtrOutput) Elem() RuleHttpMatchOutput {
	return o.ApplyT(func(v *RuleHttpMatch) RuleHttpMatch {
		if v != nil {
			return *v
		}
		var ret RuleHttpMatch
		return ret
	}).(RuleHttpMatchOutput)
}

func (o RuleHttpMatchPtrOutput) HeaderMatches() RuleHeaderMatchArrayOutput {
	return o.ApplyT(func(v *RuleHttpMatch) []RuleHeaderMatch {
		if v == nil {
			return nil
		}
		return v.HeaderMatches
	}).(RuleHeaderMatchArrayOutput)
}

func (o RuleHttpMatchPtrOutput) Method() RuleHttpMatchMethodPtrOutput {
	return o.ApplyT(func(v *RuleHttpMatch) *RuleHttpMatchMethod {
		if v == nil {
			return nil
		}
		return v.Method
	}).(RuleHttpMatchMethodPtrOutput)
}

func (o RuleHttpMatchPtrOutput) PathMatch() RulePathMatchPtrOutput {
	return o.ApplyT(func(v *RuleHttpMatch) *RulePathMatch {
		if v == nil {
			return nil
		}
		return v.PathMatch
	}).(RulePathMatchPtrOutput)
}

type RuleMatch struct {
	HttpMatch RuleHttpMatch `pulumi:"httpMatch"`
}

// RuleMatchInput is an input type that accepts RuleMatchArgs and RuleMatchOutput values.
// You can construct a concrete instance of `RuleMatchInput` via:
//
//	RuleMatchArgs{...}
type RuleMatchInput interface {
	pulumi.Input

	ToRuleMatchOutput() RuleMatchOutput
	ToRuleMatchOutputWithContext(context.Context) RuleMatchOutput
}

type RuleMatchArgs struct {
	HttpMatch RuleHttpMatchInput `pulumi:"httpMatch"`
}

func (RuleMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleMatch)(nil)).Elem()
}

func (i RuleMatchArgs) ToRuleMatchOutput() RuleMatchOutput {
	return i.ToRuleMatchOutputWithContext(context.Background())
}

func (i RuleMatchArgs) ToRuleMatchOutputWithContext(ctx context.Context) RuleMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleMatchOutput)
}

func (i RuleMatchArgs) ToOutput(ctx context.Context) pulumix.Output[RuleMatch] {
	return pulumix.Output[RuleMatch]{
		OutputState: i.ToRuleMatchOutputWithContext(ctx).OutputState,
	}
}

type RuleMatchOutput struct{ *pulumi.OutputState }

func (RuleMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleMatch)(nil)).Elem()
}

func (o RuleMatchOutput) ToRuleMatchOutput() RuleMatchOutput {
	return o
}

func (o RuleMatchOutput) ToRuleMatchOutputWithContext(ctx context.Context) RuleMatchOutput {
	return o
}

func (o RuleMatchOutput) ToOutput(ctx context.Context) pulumix.Output[RuleMatch] {
	return pulumix.Output[RuleMatch]{
		OutputState: o.OutputState,
	}
}

func (o RuleMatchOutput) HttpMatch() RuleHttpMatchOutput {
	return o.ApplyT(func(v RuleMatch) RuleHttpMatch { return v.HttpMatch }).(RuleHttpMatchOutput)
}

type RuleMatchPtrOutput struct{ *pulumi.OutputState }

func (RuleMatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleMatch)(nil)).Elem()
}

func (o RuleMatchPtrOutput) ToRuleMatchPtrOutput() RuleMatchPtrOutput {
	return o
}

func (o RuleMatchPtrOutput) ToRuleMatchPtrOutputWithContext(ctx context.Context) RuleMatchPtrOutput {
	return o
}

func (o RuleMatchPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RuleMatch] {
	return pulumix.Output[*RuleMatch]{
		OutputState: o.OutputState,
	}
}

func (o RuleMatchPtrOutput) Elem() RuleMatchOutput {
	return o.ApplyT(func(v *RuleMatch) RuleMatch {
		if v != nil {
			return *v
		}
		var ret RuleMatch
		return ret
	}).(RuleMatchOutput)
}

func (o RuleMatchPtrOutput) HttpMatch() RuleHttpMatchPtrOutput {
	return o.ApplyT(func(v *RuleMatch) *RuleHttpMatch {
		if v == nil {
			return nil
		}
		return &v.HttpMatch
	}).(RuleHttpMatchPtrOutput)
}

type RulePathMatch struct {
	CaseSensitive *bool             `pulumi:"caseSensitive"`
	Match         RulePathMatchType `pulumi:"match"`
}

// RulePathMatchInput is an input type that accepts RulePathMatchArgs and RulePathMatchOutput values.
// You can construct a concrete instance of `RulePathMatchInput` via:
//
//	RulePathMatchArgs{...}
type RulePathMatchInput interface {
	pulumi.Input

	ToRulePathMatchOutput() RulePathMatchOutput
	ToRulePathMatchOutputWithContext(context.Context) RulePathMatchOutput
}

type RulePathMatchArgs struct {
	CaseSensitive pulumi.BoolPtrInput    `pulumi:"caseSensitive"`
	Match         RulePathMatchTypeInput `pulumi:"match"`
}

func (RulePathMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RulePathMatch)(nil)).Elem()
}

func (i RulePathMatchArgs) ToRulePathMatchOutput() RulePathMatchOutput {
	return i.ToRulePathMatchOutputWithContext(context.Background())
}

func (i RulePathMatchArgs) ToRulePathMatchOutputWithContext(ctx context.Context) RulePathMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulePathMatchOutput)
}

func (i RulePathMatchArgs) ToOutput(ctx context.Context) pulumix.Output[RulePathMatch] {
	return pulumix.Output[RulePathMatch]{
		OutputState: i.ToRulePathMatchOutputWithContext(ctx).OutputState,
	}
}

func (i RulePathMatchArgs) ToRulePathMatchPtrOutput() RulePathMatchPtrOutput {
	return i.ToRulePathMatchPtrOutputWithContext(context.Background())
}

func (i RulePathMatchArgs) ToRulePathMatchPtrOutputWithContext(ctx context.Context) RulePathMatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulePathMatchOutput).ToRulePathMatchPtrOutputWithContext(ctx)
}

// RulePathMatchPtrInput is an input type that accepts RulePathMatchArgs, RulePathMatchPtr and RulePathMatchPtrOutput values.
// You can construct a concrete instance of `RulePathMatchPtrInput` via:
//
//	        RulePathMatchArgs{...}
//
//	or:
//
//	        nil
type RulePathMatchPtrInput interface {
	pulumi.Input

	ToRulePathMatchPtrOutput() RulePathMatchPtrOutput
	ToRulePathMatchPtrOutputWithContext(context.Context) RulePathMatchPtrOutput
}

type rulePathMatchPtrType RulePathMatchArgs

func RulePathMatchPtr(v *RulePathMatchArgs) RulePathMatchPtrInput {
	return (*rulePathMatchPtrType)(v)
}

func (*rulePathMatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RulePathMatch)(nil)).Elem()
}

func (i *rulePathMatchPtrType) ToRulePathMatchPtrOutput() RulePathMatchPtrOutput {
	return i.ToRulePathMatchPtrOutputWithContext(context.Background())
}

func (i *rulePathMatchPtrType) ToRulePathMatchPtrOutputWithContext(ctx context.Context) RulePathMatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulePathMatchPtrOutput)
}

func (i *rulePathMatchPtrType) ToOutput(ctx context.Context) pulumix.Output[*RulePathMatch] {
	return pulumix.Output[*RulePathMatch]{
		OutputState: i.ToRulePathMatchPtrOutputWithContext(ctx).OutputState,
	}
}

type RulePathMatchOutput struct{ *pulumi.OutputState }

func (RulePathMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulePathMatch)(nil)).Elem()
}

func (o RulePathMatchOutput) ToRulePathMatchOutput() RulePathMatchOutput {
	return o
}

func (o RulePathMatchOutput) ToRulePathMatchOutputWithContext(ctx context.Context) RulePathMatchOutput {
	return o
}

func (o RulePathMatchOutput) ToRulePathMatchPtrOutput() RulePathMatchPtrOutput {
	return o.ToRulePathMatchPtrOutputWithContext(context.Background())
}

func (o RulePathMatchOutput) ToRulePathMatchPtrOutputWithContext(ctx context.Context) RulePathMatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RulePathMatch) *RulePathMatch {
		return &v
	}).(RulePathMatchPtrOutput)
}

func (o RulePathMatchOutput) ToOutput(ctx context.Context) pulumix.Output[RulePathMatch] {
	return pulumix.Output[RulePathMatch]{
		OutputState: o.OutputState,
	}
}

func (o RulePathMatchOutput) CaseSensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RulePathMatch) *bool { return v.CaseSensitive }).(pulumi.BoolPtrOutput)
}

func (o RulePathMatchOutput) Match() RulePathMatchTypeOutput {
	return o.ApplyT(func(v RulePathMatch) RulePathMatchType { return v.Match }).(RulePathMatchTypeOutput)
}

type RulePathMatchPtrOutput struct{ *pulumi.OutputState }

func (RulePathMatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RulePathMatch)(nil)).Elem()
}

func (o RulePathMatchPtrOutput) ToRulePathMatchPtrOutput() RulePathMatchPtrOutput {
	return o
}

func (o RulePathMatchPtrOutput) ToRulePathMatchPtrOutputWithContext(ctx context.Context) RulePathMatchPtrOutput {
	return o
}

func (o RulePathMatchPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RulePathMatch] {
	return pulumix.Output[*RulePathMatch]{
		OutputState: o.OutputState,
	}
}

func (o RulePathMatchPtrOutput) Elem() RulePathMatchOutput {
	return o.ApplyT(func(v *RulePathMatch) RulePathMatch {
		if v != nil {
			return *v
		}
		var ret RulePathMatch
		return ret
	}).(RulePathMatchOutput)
}

func (o RulePathMatchPtrOutput) CaseSensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RulePathMatch) *bool {
		if v == nil {
			return nil
		}
		return v.CaseSensitive
	}).(pulumi.BoolPtrOutput)
}

func (o RulePathMatchPtrOutput) Match() RulePathMatchTypePtrOutput {
	return o.ApplyT(func(v *RulePathMatch) *RulePathMatchType {
		if v == nil {
			return nil
		}
		return &v.Match
	}).(RulePathMatchTypePtrOutput)
}

type RulePathMatchType struct {
	Exact  *string `pulumi:"exact"`
	Prefix *string `pulumi:"prefix"`
}

// RulePathMatchTypeInput is an input type that accepts RulePathMatchTypeArgs and RulePathMatchTypeOutput values.
// You can construct a concrete instance of `RulePathMatchTypeInput` via:
//
//	RulePathMatchTypeArgs{...}
type RulePathMatchTypeInput interface {
	pulumi.Input

	ToRulePathMatchTypeOutput() RulePathMatchTypeOutput
	ToRulePathMatchTypeOutputWithContext(context.Context) RulePathMatchTypeOutput
}

type RulePathMatchTypeArgs struct {
	Exact  pulumi.StringPtrInput `pulumi:"exact"`
	Prefix pulumi.StringPtrInput `pulumi:"prefix"`
}

func (RulePathMatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RulePathMatchType)(nil)).Elem()
}

func (i RulePathMatchTypeArgs) ToRulePathMatchTypeOutput() RulePathMatchTypeOutput {
	return i.ToRulePathMatchTypeOutputWithContext(context.Background())
}

func (i RulePathMatchTypeArgs) ToRulePathMatchTypeOutputWithContext(ctx context.Context) RulePathMatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulePathMatchTypeOutput)
}

func (i RulePathMatchTypeArgs) ToOutput(ctx context.Context) pulumix.Output[RulePathMatchType] {
	return pulumix.Output[RulePathMatchType]{
		OutputState: i.ToRulePathMatchTypeOutputWithContext(ctx).OutputState,
	}
}

func (i RulePathMatchTypeArgs) ToRulePathMatchTypePtrOutput() RulePathMatchTypePtrOutput {
	return i.ToRulePathMatchTypePtrOutputWithContext(context.Background())
}

func (i RulePathMatchTypeArgs) ToRulePathMatchTypePtrOutputWithContext(ctx context.Context) RulePathMatchTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulePathMatchTypeOutput).ToRulePathMatchTypePtrOutputWithContext(ctx)
}

// RulePathMatchTypePtrInput is an input type that accepts RulePathMatchTypeArgs, RulePathMatchTypePtr and RulePathMatchTypePtrOutput values.
// You can construct a concrete instance of `RulePathMatchTypePtrInput` via:
//
//	        RulePathMatchTypeArgs{...}
//
//	or:
//
//	        nil
type RulePathMatchTypePtrInput interface {
	pulumi.Input

	ToRulePathMatchTypePtrOutput() RulePathMatchTypePtrOutput
	ToRulePathMatchTypePtrOutputWithContext(context.Context) RulePathMatchTypePtrOutput
}

type rulePathMatchTypePtrType RulePathMatchTypeArgs

func RulePathMatchTypePtr(v *RulePathMatchTypeArgs) RulePathMatchTypePtrInput {
	return (*rulePathMatchTypePtrType)(v)
}

func (*rulePathMatchTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RulePathMatchType)(nil)).Elem()
}

func (i *rulePathMatchTypePtrType) ToRulePathMatchTypePtrOutput() RulePathMatchTypePtrOutput {
	return i.ToRulePathMatchTypePtrOutputWithContext(context.Background())
}

func (i *rulePathMatchTypePtrType) ToRulePathMatchTypePtrOutputWithContext(ctx context.Context) RulePathMatchTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulePathMatchTypePtrOutput)
}

func (i *rulePathMatchTypePtrType) ToOutput(ctx context.Context) pulumix.Output[*RulePathMatchType] {
	return pulumix.Output[*RulePathMatchType]{
		OutputState: i.ToRulePathMatchTypePtrOutputWithContext(ctx).OutputState,
	}
}

type RulePathMatchTypeOutput struct{ *pulumi.OutputState }

func (RulePathMatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulePathMatchType)(nil)).Elem()
}

func (o RulePathMatchTypeOutput) ToRulePathMatchTypeOutput() RulePathMatchTypeOutput {
	return o
}

func (o RulePathMatchTypeOutput) ToRulePathMatchTypeOutputWithContext(ctx context.Context) RulePathMatchTypeOutput {
	return o
}

func (o RulePathMatchTypeOutput) ToRulePathMatchTypePtrOutput() RulePathMatchTypePtrOutput {
	return o.ToRulePathMatchTypePtrOutputWithContext(context.Background())
}

func (o RulePathMatchTypeOutput) ToRulePathMatchTypePtrOutputWithContext(ctx context.Context) RulePathMatchTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RulePathMatchType) *RulePathMatchType {
		return &v
	}).(RulePathMatchTypePtrOutput)
}

func (o RulePathMatchTypeOutput) ToOutput(ctx context.Context) pulumix.Output[RulePathMatchType] {
	return pulumix.Output[RulePathMatchType]{
		OutputState: o.OutputState,
	}
}

func (o RulePathMatchTypeOutput) Exact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RulePathMatchType) *string { return v.Exact }).(pulumi.StringPtrOutput)
}

func (o RulePathMatchTypeOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RulePathMatchType) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

type RulePathMatchTypePtrOutput struct{ *pulumi.OutputState }

func (RulePathMatchTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RulePathMatchType)(nil)).Elem()
}

func (o RulePathMatchTypePtrOutput) ToRulePathMatchTypePtrOutput() RulePathMatchTypePtrOutput {
	return o
}

func (o RulePathMatchTypePtrOutput) ToRulePathMatchTypePtrOutputWithContext(ctx context.Context) RulePathMatchTypePtrOutput {
	return o
}

func (o RulePathMatchTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RulePathMatchType] {
	return pulumix.Output[*RulePathMatchType]{
		OutputState: o.OutputState,
	}
}

func (o RulePathMatchTypePtrOutput) Elem() RulePathMatchTypeOutput {
	return o.ApplyT(func(v *RulePathMatchType) RulePathMatchType {
		if v != nil {
			return *v
		}
		var ret RulePathMatchType
		return ret
	}).(RulePathMatchTypeOutput)
}

func (o RulePathMatchTypePtrOutput) Exact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RulePathMatchType) *string {
		if v == nil {
			return nil
		}
		return v.Exact
	}).(pulumi.StringPtrOutput)
}

func (o RulePathMatchTypePtrOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RulePathMatchType) *string {
		if v == nil {
			return nil
		}
		return v.Prefix
	}).(pulumi.StringPtrOutput)
}

type RuleTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// RuleTagInput is an input type that accepts RuleTagArgs and RuleTagOutput values.
// You can construct a concrete instance of `RuleTagInput` via:
//
//	RuleTagArgs{...}
type RuleTagInput interface {
	pulumi.Input

	ToRuleTagOutput() RuleTagOutput
	ToRuleTagOutputWithContext(context.Context) RuleTagOutput
}

type RuleTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (RuleTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleTag)(nil)).Elem()
}

func (i RuleTagArgs) ToRuleTagOutput() RuleTagOutput {
	return i.ToRuleTagOutputWithContext(context.Background())
}

func (i RuleTagArgs) ToRuleTagOutputWithContext(ctx context.Context) RuleTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleTagOutput)
}

func (i RuleTagArgs) ToOutput(ctx context.Context) pulumix.Output[RuleTag] {
	return pulumix.Output[RuleTag]{
		OutputState: i.ToRuleTagOutputWithContext(ctx).OutputState,
	}
}

// RuleTagArrayInput is an input type that accepts RuleTagArray and RuleTagArrayOutput values.
// You can construct a concrete instance of `RuleTagArrayInput` via:
//
//	RuleTagArray{ RuleTagArgs{...} }
type RuleTagArrayInput interface {
	pulumi.Input

	ToRuleTagArrayOutput() RuleTagArrayOutput
	ToRuleTagArrayOutputWithContext(context.Context) RuleTagArrayOutput
}

type RuleTagArray []RuleTagInput

func (RuleTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleTag)(nil)).Elem()
}

func (i RuleTagArray) ToRuleTagArrayOutput() RuleTagArrayOutput {
	return i.ToRuleTagArrayOutputWithContext(context.Background())
}

func (i RuleTagArray) ToRuleTagArrayOutputWithContext(ctx context.Context) RuleTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleTagArrayOutput)
}

func (i RuleTagArray) ToOutput(ctx context.Context) pulumix.Output[[]RuleTag] {
	return pulumix.Output[[]RuleTag]{
		OutputState: i.ToRuleTagArrayOutputWithContext(ctx).OutputState,
	}
}

type RuleTagOutput struct{ *pulumi.OutputState }

func (RuleTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleTag)(nil)).Elem()
}

func (o RuleTagOutput) ToRuleTagOutput() RuleTagOutput {
	return o
}

func (o RuleTagOutput) ToRuleTagOutputWithContext(ctx context.Context) RuleTagOutput {
	return o
}

func (o RuleTagOutput) ToOutput(ctx context.Context) pulumix.Output[RuleTag] {
	return pulumix.Output[RuleTag]{
		OutputState: o.OutputState,
	}
}

func (o RuleTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v RuleTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o RuleTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v RuleTag) string { return v.Value }).(pulumi.StringOutput)
}

type RuleTagArrayOutput struct{ *pulumi.OutputState }

func (RuleTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleTag)(nil)).Elem()
}

func (o RuleTagArrayOutput) ToRuleTagArrayOutput() RuleTagArrayOutput {
	return o
}

func (o RuleTagArrayOutput) ToRuleTagArrayOutputWithContext(ctx context.Context) RuleTagArrayOutput {
	return o
}

func (o RuleTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]RuleTag] {
	return pulumix.Output[[]RuleTag]{
		OutputState: o.OutputState,
	}
}

func (o RuleTagArrayOutput) Index(i pulumi.IntInput) RuleTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleTag {
		return vs[0].([]RuleTag)[vs[1].(int)]
	}).(RuleTagOutput)
}

type RuleWeightedTargetGroup struct {
	TargetGroupIdentifier string `pulumi:"targetGroupIdentifier"`
	Weight                *int   `pulumi:"weight"`
}

// RuleWeightedTargetGroupInput is an input type that accepts RuleWeightedTargetGroupArgs and RuleWeightedTargetGroupOutput values.
// You can construct a concrete instance of `RuleWeightedTargetGroupInput` via:
//
//	RuleWeightedTargetGroupArgs{...}
type RuleWeightedTargetGroupInput interface {
	pulumi.Input

	ToRuleWeightedTargetGroupOutput() RuleWeightedTargetGroupOutput
	ToRuleWeightedTargetGroupOutputWithContext(context.Context) RuleWeightedTargetGroupOutput
}

type RuleWeightedTargetGroupArgs struct {
	TargetGroupIdentifier pulumi.StringInput `pulumi:"targetGroupIdentifier"`
	Weight                pulumi.IntPtrInput `pulumi:"weight"`
}

func (RuleWeightedTargetGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleWeightedTargetGroup)(nil)).Elem()
}

func (i RuleWeightedTargetGroupArgs) ToRuleWeightedTargetGroupOutput() RuleWeightedTargetGroupOutput {
	return i.ToRuleWeightedTargetGroupOutputWithContext(context.Background())
}

func (i RuleWeightedTargetGroupArgs) ToRuleWeightedTargetGroupOutputWithContext(ctx context.Context) RuleWeightedTargetGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleWeightedTargetGroupOutput)
}

func (i RuleWeightedTargetGroupArgs) ToOutput(ctx context.Context) pulumix.Output[RuleWeightedTargetGroup] {
	return pulumix.Output[RuleWeightedTargetGroup]{
		OutputState: i.ToRuleWeightedTargetGroupOutputWithContext(ctx).OutputState,
	}
}

// RuleWeightedTargetGroupArrayInput is an input type that accepts RuleWeightedTargetGroupArray and RuleWeightedTargetGroupArrayOutput values.
// You can construct a concrete instance of `RuleWeightedTargetGroupArrayInput` via:
//
//	RuleWeightedTargetGroupArray{ RuleWeightedTargetGroupArgs{...} }
type RuleWeightedTargetGroupArrayInput interface {
	pulumi.Input

	ToRuleWeightedTargetGroupArrayOutput() RuleWeightedTargetGroupArrayOutput
	ToRuleWeightedTargetGroupArrayOutputWithContext(context.Context) RuleWeightedTargetGroupArrayOutput
}

type RuleWeightedTargetGroupArray []RuleWeightedTargetGroupInput

func (RuleWeightedTargetGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleWeightedTargetGroup)(nil)).Elem()
}

func (i RuleWeightedTargetGroupArray) ToRuleWeightedTargetGroupArrayOutput() RuleWeightedTargetGroupArrayOutput {
	return i.ToRuleWeightedTargetGroupArrayOutputWithContext(context.Background())
}

func (i RuleWeightedTargetGroupArray) ToRuleWeightedTargetGroupArrayOutputWithContext(ctx context.Context) RuleWeightedTargetGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleWeightedTargetGroupArrayOutput)
}

func (i RuleWeightedTargetGroupArray) ToOutput(ctx context.Context) pulumix.Output[[]RuleWeightedTargetGroup] {
	return pulumix.Output[[]RuleWeightedTargetGroup]{
		OutputState: i.ToRuleWeightedTargetGroupArrayOutputWithContext(ctx).OutputState,
	}
}

type RuleWeightedTargetGroupOutput struct{ *pulumi.OutputState }

func (RuleWeightedTargetGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleWeightedTargetGroup)(nil)).Elem()
}

func (o RuleWeightedTargetGroupOutput) ToRuleWeightedTargetGroupOutput() RuleWeightedTargetGroupOutput {
	return o
}

func (o RuleWeightedTargetGroupOutput) ToRuleWeightedTargetGroupOutputWithContext(ctx context.Context) RuleWeightedTargetGroupOutput {
	return o
}

func (o RuleWeightedTargetGroupOutput) ToOutput(ctx context.Context) pulumix.Output[RuleWeightedTargetGroup] {
	return pulumix.Output[RuleWeightedTargetGroup]{
		OutputState: o.OutputState,
	}
}

func (o RuleWeightedTargetGroupOutput) TargetGroupIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v RuleWeightedTargetGroup) string { return v.TargetGroupIdentifier }).(pulumi.StringOutput)
}

func (o RuleWeightedTargetGroupOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RuleWeightedTargetGroup) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type RuleWeightedTargetGroupArrayOutput struct{ *pulumi.OutputState }

func (RuleWeightedTargetGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleWeightedTargetGroup)(nil)).Elem()
}

func (o RuleWeightedTargetGroupArrayOutput) ToRuleWeightedTargetGroupArrayOutput() RuleWeightedTargetGroupArrayOutput {
	return o
}

func (o RuleWeightedTargetGroupArrayOutput) ToRuleWeightedTargetGroupArrayOutputWithContext(ctx context.Context) RuleWeightedTargetGroupArrayOutput {
	return o
}

func (o RuleWeightedTargetGroupArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]RuleWeightedTargetGroup] {
	return pulumix.Output[[]RuleWeightedTargetGroup]{
		OutputState: o.OutputState,
	}
}

func (o RuleWeightedTargetGroupArrayOutput) Index(i pulumi.IntInput) RuleWeightedTargetGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleWeightedTargetGroup {
		return vs[0].([]RuleWeightedTargetGroup)[vs[1].(int)]
	}).(RuleWeightedTargetGroupOutput)
}

type ServiceDnsEntry struct {
	DomainName   *string `pulumi:"domainName"`
	HostedZoneId *string `pulumi:"hostedZoneId"`
}

// ServiceDnsEntryInput is an input type that accepts ServiceDnsEntryArgs and ServiceDnsEntryOutput values.
// You can construct a concrete instance of `ServiceDnsEntryInput` via:
//
//	ServiceDnsEntryArgs{...}
type ServiceDnsEntryInput interface {
	pulumi.Input

	ToServiceDnsEntryOutput() ServiceDnsEntryOutput
	ToServiceDnsEntryOutputWithContext(context.Context) ServiceDnsEntryOutput
}

type ServiceDnsEntryArgs struct {
	DomainName   pulumi.StringPtrInput `pulumi:"domainName"`
	HostedZoneId pulumi.StringPtrInput `pulumi:"hostedZoneId"`
}

func (ServiceDnsEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDnsEntry)(nil)).Elem()
}

func (i ServiceDnsEntryArgs) ToServiceDnsEntryOutput() ServiceDnsEntryOutput {
	return i.ToServiceDnsEntryOutputWithContext(context.Background())
}

func (i ServiceDnsEntryArgs) ToServiceDnsEntryOutputWithContext(ctx context.Context) ServiceDnsEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDnsEntryOutput)
}

func (i ServiceDnsEntryArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceDnsEntry] {
	return pulumix.Output[ServiceDnsEntry]{
		OutputState: i.ToServiceDnsEntryOutputWithContext(ctx).OutputState,
	}
}

func (i ServiceDnsEntryArgs) ToServiceDnsEntryPtrOutput() ServiceDnsEntryPtrOutput {
	return i.ToServiceDnsEntryPtrOutputWithContext(context.Background())
}

func (i ServiceDnsEntryArgs) ToServiceDnsEntryPtrOutputWithContext(ctx context.Context) ServiceDnsEntryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDnsEntryOutput).ToServiceDnsEntryPtrOutputWithContext(ctx)
}

// ServiceDnsEntryPtrInput is an input type that accepts ServiceDnsEntryArgs, ServiceDnsEntryPtr and ServiceDnsEntryPtrOutput values.
// You can construct a concrete instance of `ServiceDnsEntryPtrInput` via:
//
//	        ServiceDnsEntryArgs{...}
//
//	or:
//
//	        nil
type ServiceDnsEntryPtrInput interface {
	pulumi.Input

	ToServiceDnsEntryPtrOutput() ServiceDnsEntryPtrOutput
	ToServiceDnsEntryPtrOutputWithContext(context.Context) ServiceDnsEntryPtrOutput
}

type serviceDnsEntryPtrType ServiceDnsEntryArgs

func ServiceDnsEntryPtr(v *ServiceDnsEntryArgs) ServiceDnsEntryPtrInput {
	return (*serviceDnsEntryPtrType)(v)
}

func (*serviceDnsEntryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceDnsEntry)(nil)).Elem()
}

func (i *serviceDnsEntryPtrType) ToServiceDnsEntryPtrOutput() ServiceDnsEntryPtrOutput {
	return i.ToServiceDnsEntryPtrOutputWithContext(context.Background())
}

func (i *serviceDnsEntryPtrType) ToServiceDnsEntryPtrOutputWithContext(ctx context.Context) ServiceDnsEntryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDnsEntryPtrOutput)
}

func (i *serviceDnsEntryPtrType) ToOutput(ctx context.Context) pulumix.Output[*ServiceDnsEntry] {
	return pulumix.Output[*ServiceDnsEntry]{
		OutputState: i.ToServiceDnsEntryPtrOutputWithContext(ctx).OutputState,
	}
}

type ServiceDnsEntryOutput struct{ *pulumi.OutputState }

func (ServiceDnsEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDnsEntry)(nil)).Elem()
}

func (o ServiceDnsEntryOutput) ToServiceDnsEntryOutput() ServiceDnsEntryOutput {
	return o
}

func (o ServiceDnsEntryOutput) ToServiceDnsEntryOutputWithContext(ctx context.Context) ServiceDnsEntryOutput {
	return o
}

func (o ServiceDnsEntryOutput) ToServiceDnsEntryPtrOutput() ServiceDnsEntryPtrOutput {
	return o.ToServiceDnsEntryPtrOutputWithContext(context.Background())
}

func (o ServiceDnsEntryOutput) ToServiceDnsEntryPtrOutputWithContext(ctx context.Context) ServiceDnsEntryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceDnsEntry) *ServiceDnsEntry {
		return &v
	}).(ServiceDnsEntryPtrOutput)
}

func (o ServiceDnsEntryOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceDnsEntry] {
	return pulumix.Output[ServiceDnsEntry]{
		OutputState: o.OutputState,
	}
}

func (o ServiceDnsEntryOutput) DomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceDnsEntry) *string { return v.DomainName }).(pulumi.StringPtrOutput)
}

func (o ServiceDnsEntryOutput) HostedZoneId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceDnsEntry) *string { return v.HostedZoneId }).(pulumi.StringPtrOutput)
}

type ServiceDnsEntryPtrOutput struct{ *pulumi.OutputState }

func (ServiceDnsEntryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceDnsEntry)(nil)).Elem()
}

func (o ServiceDnsEntryPtrOutput) ToServiceDnsEntryPtrOutput() ServiceDnsEntryPtrOutput {
	return o
}

func (o ServiceDnsEntryPtrOutput) ToServiceDnsEntryPtrOutputWithContext(ctx context.Context) ServiceDnsEntryPtrOutput {
	return o
}

func (o ServiceDnsEntryPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ServiceDnsEntry] {
	return pulumix.Output[*ServiceDnsEntry]{
		OutputState: o.OutputState,
	}
}

func (o ServiceDnsEntryPtrOutput) Elem() ServiceDnsEntryOutput {
	return o.ApplyT(func(v *ServiceDnsEntry) ServiceDnsEntry {
		if v != nil {
			return *v
		}
		var ret ServiceDnsEntry
		return ret
	}).(ServiceDnsEntryOutput)
}

func (o ServiceDnsEntryPtrOutput) DomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceDnsEntry) *string {
		if v == nil {
			return nil
		}
		return v.DomainName
	}).(pulumi.StringPtrOutput)
}

func (o ServiceDnsEntryPtrOutput) HostedZoneId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceDnsEntry) *string {
		if v == nil {
			return nil
		}
		return v.HostedZoneId
	}).(pulumi.StringPtrOutput)
}

type ServiceNetworkServiceAssociationDnsEntry struct {
	DomainName   *string `pulumi:"domainName"`
	HostedZoneId *string `pulumi:"hostedZoneId"`
}

// ServiceNetworkServiceAssociationDnsEntryInput is an input type that accepts ServiceNetworkServiceAssociationDnsEntryArgs and ServiceNetworkServiceAssociationDnsEntryOutput values.
// You can construct a concrete instance of `ServiceNetworkServiceAssociationDnsEntryInput` via:
//
//	ServiceNetworkServiceAssociationDnsEntryArgs{...}
type ServiceNetworkServiceAssociationDnsEntryInput interface {
	pulumi.Input

	ToServiceNetworkServiceAssociationDnsEntryOutput() ServiceNetworkServiceAssociationDnsEntryOutput
	ToServiceNetworkServiceAssociationDnsEntryOutputWithContext(context.Context) ServiceNetworkServiceAssociationDnsEntryOutput
}

type ServiceNetworkServiceAssociationDnsEntryArgs struct {
	DomainName   pulumi.StringPtrInput `pulumi:"domainName"`
	HostedZoneId pulumi.StringPtrInput `pulumi:"hostedZoneId"`
}

func (ServiceNetworkServiceAssociationDnsEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNetworkServiceAssociationDnsEntry)(nil)).Elem()
}

func (i ServiceNetworkServiceAssociationDnsEntryArgs) ToServiceNetworkServiceAssociationDnsEntryOutput() ServiceNetworkServiceAssociationDnsEntryOutput {
	return i.ToServiceNetworkServiceAssociationDnsEntryOutputWithContext(context.Background())
}

func (i ServiceNetworkServiceAssociationDnsEntryArgs) ToServiceNetworkServiceAssociationDnsEntryOutputWithContext(ctx context.Context) ServiceNetworkServiceAssociationDnsEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceNetworkServiceAssociationDnsEntryOutput)
}

func (i ServiceNetworkServiceAssociationDnsEntryArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceNetworkServiceAssociationDnsEntry] {
	return pulumix.Output[ServiceNetworkServiceAssociationDnsEntry]{
		OutputState: i.ToServiceNetworkServiceAssociationDnsEntryOutputWithContext(ctx).OutputState,
	}
}

func (i ServiceNetworkServiceAssociationDnsEntryArgs) ToServiceNetworkServiceAssociationDnsEntryPtrOutput() ServiceNetworkServiceAssociationDnsEntryPtrOutput {
	return i.ToServiceNetworkServiceAssociationDnsEntryPtrOutputWithContext(context.Background())
}

func (i ServiceNetworkServiceAssociationDnsEntryArgs) ToServiceNetworkServiceAssociationDnsEntryPtrOutputWithContext(ctx context.Context) ServiceNetworkServiceAssociationDnsEntryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceNetworkServiceAssociationDnsEntryOutput).ToServiceNetworkServiceAssociationDnsEntryPtrOutputWithContext(ctx)
}

// ServiceNetworkServiceAssociationDnsEntryPtrInput is an input type that accepts ServiceNetworkServiceAssociationDnsEntryArgs, ServiceNetworkServiceAssociationDnsEntryPtr and ServiceNetworkServiceAssociationDnsEntryPtrOutput values.
// You can construct a concrete instance of `ServiceNetworkServiceAssociationDnsEntryPtrInput` via:
//
//	        ServiceNetworkServiceAssociationDnsEntryArgs{...}
//
//	or:
//
//	        nil
type ServiceNetworkServiceAssociationDnsEntryPtrInput interface {
	pulumi.Input

	ToServiceNetworkServiceAssociationDnsEntryPtrOutput() ServiceNetworkServiceAssociationDnsEntryPtrOutput
	ToServiceNetworkServiceAssociationDnsEntryPtrOutputWithContext(context.Context) ServiceNetworkServiceAssociationDnsEntryPtrOutput
}

type serviceNetworkServiceAssociationDnsEntryPtrType ServiceNetworkServiceAssociationDnsEntryArgs

func ServiceNetworkServiceAssociationDnsEntryPtr(v *ServiceNetworkServiceAssociationDnsEntryArgs) ServiceNetworkServiceAssociationDnsEntryPtrInput {
	return (*serviceNetworkServiceAssociationDnsEntryPtrType)(v)
}

func (*serviceNetworkServiceAssociationDnsEntryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceNetworkServiceAssociationDnsEntry)(nil)).Elem()
}

func (i *serviceNetworkServiceAssociationDnsEntryPtrType) ToServiceNetworkServiceAssociationDnsEntryPtrOutput() ServiceNetworkServiceAssociationDnsEntryPtrOutput {
	return i.ToServiceNetworkServiceAssociationDnsEntryPtrOutputWithContext(context.Background())
}

func (i *serviceNetworkServiceAssociationDnsEntryPtrType) ToServiceNetworkServiceAssociationDnsEntryPtrOutputWithContext(ctx context.Context) ServiceNetworkServiceAssociationDnsEntryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceNetworkServiceAssociationDnsEntryPtrOutput)
}

func (i *serviceNetworkServiceAssociationDnsEntryPtrType) ToOutput(ctx context.Context) pulumix.Output[*ServiceNetworkServiceAssociationDnsEntry] {
	return pulumix.Output[*ServiceNetworkServiceAssociationDnsEntry]{
		OutputState: i.ToServiceNetworkServiceAssociationDnsEntryPtrOutputWithContext(ctx).OutputState,
	}
}

type ServiceNetworkServiceAssociationDnsEntryOutput struct{ *pulumi.OutputState }

func (ServiceNetworkServiceAssociationDnsEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNetworkServiceAssociationDnsEntry)(nil)).Elem()
}

func (o ServiceNetworkServiceAssociationDnsEntryOutput) ToServiceNetworkServiceAssociationDnsEntryOutput() ServiceNetworkServiceAssociationDnsEntryOutput {
	return o
}

func (o ServiceNetworkServiceAssociationDnsEntryOutput) ToServiceNetworkServiceAssociationDnsEntryOutputWithContext(ctx context.Context) ServiceNetworkServiceAssociationDnsEntryOutput {
	return o
}

func (o ServiceNetworkServiceAssociationDnsEntryOutput) ToServiceNetworkServiceAssociationDnsEntryPtrOutput() ServiceNetworkServiceAssociationDnsEntryPtrOutput {
	return o.ToServiceNetworkServiceAssociationDnsEntryPtrOutputWithContext(context.Background())
}

func (o ServiceNetworkServiceAssociationDnsEntryOutput) ToServiceNetworkServiceAssociationDnsEntryPtrOutputWithContext(ctx context.Context) ServiceNetworkServiceAssociationDnsEntryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceNetworkServiceAssociationDnsEntry) *ServiceNetworkServiceAssociationDnsEntry {
		return &v
	}).(ServiceNetworkServiceAssociationDnsEntryPtrOutput)
}

func (o ServiceNetworkServiceAssociationDnsEntryOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceNetworkServiceAssociationDnsEntry] {
	return pulumix.Output[ServiceNetworkServiceAssociationDnsEntry]{
		OutputState: o.OutputState,
	}
}

func (o ServiceNetworkServiceAssociationDnsEntryOutput) DomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceNetworkServiceAssociationDnsEntry) *string { return v.DomainName }).(pulumi.StringPtrOutput)
}

func (o ServiceNetworkServiceAssociationDnsEntryOutput) HostedZoneId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceNetworkServiceAssociationDnsEntry) *string { return v.HostedZoneId }).(pulumi.StringPtrOutput)
}

type ServiceNetworkServiceAssociationDnsEntryPtrOutput struct{ *pulumi.OutputState }

func (ServiceNetworkServiceAssociationDnsEntryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceNetworkServiceAssociationDnsEntry)(nil)).Elem()
}

func (o ServiceNetworkServiceAssociationDnsEntryPtrOutput) ToServiceNetworkServiceAssociationDnsEntryPtrOutput() ServiceNetworkServiceAssociationDnsEntryPtrOutput {
	return o
}

func (o ServiceNetworkServiceAssociationDnsEntryPtrOutput) ToServiceNetworkServiceAssociationDnsEntryPtrOutputWithContext(ctx context.Context) ServiceNetworkServiceAssociationDnsEntryPtrOutput {
	return o
}

func (o ServiceNetworkServiceAssociationDnsEntryPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ServiceNetworkServiceAssociationDnsEntry] {
	return pulumix.Output[*ServiceNetworkServiceAssociationDnsEntry]{
		OutputState: o.OutputState,
	}
}

func (o ServiceNetworkServiceAssociationDnsEntryPtrOutput) Elem() ServiceNetworkServiceAssociationDnsEntryOutput {
	return o.ApplyT(func(v *ServiceNetworkServiceAssociationDnsEntry) ServiceNetworkServiceAssociationDnsEntry {
		if v != nil {
			return *v
		}
		var ret ServiceNetworkServiceAssociationDnsEntry
		return ret
	}).(ServiceNetworkServiceAssociationDnsEntryOutput)
}

func (o ServiceNetworkServiceAssociationDnsEntryPtrOutput) DomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceNetworkServiceAssociationDnsEntry) *string {
		if v == nil {
			return nil
		}
		return v.DomainName
	}).(pulumi.StringPtrOutput)
}

func (o ServiceNetworkServiceAssociationDnsEntryPtrOutput) HostedZoneId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceNetworkServiceAssociationDnsEntry) *string {
		if v == nil {
			return nil
		}
		return v.HostedZoneId
	}).(pulumi.StringPtrOutput)
}

type ServiceNetworkServiceAssociationTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// ServiceNetworkServiceAssociationTagInput is an input type that accepts ServiceNetworkServiceAssociationTagArgs and ServiceNetworkServiceAssociationTagOutput values.
// You can construct a concrete instance of `ServiceNetworkServiceAssociationTagInput` via:
//
//	ServiceNetworkServiceAssociationTagArgs{...}
type ServiceNetworkServiceAssociationTagInput interface {
	pulumi.Input

	ToServiceNetworkServiceAssociationTagOutput() ServiceNetworkServiceAssociationTagOutput
	ToServiceNetworkServiceAssociationTagOutputWithContext(context.Context) ServiceNetworkServiceAssociationTagOutput
}

type ServiceNetworkServiceAssociationTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (ServiceNetworkServiceAssociationTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNetworkServiceAssociationTag)(nil)).Elem()
}

func (i ServiceNetworkServiceAssociationTagArgs) ToServiceNetworkServiceAssociationTagOutput() ServiceNetworkServiceAssociationTagOutput {
	return i.ToServiceNetworkServiceAssociationTagOutputWithContext(context.Background())
}

func (i ServiceNetworkServiceAssociationTagArgs) ToServiceNetworkServiceAssociationTagOutputWithContext(ctx context.Context) ServiceNetworkServiceAssociationTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceNetworkServiceAssociationTagOutput)
}

func (i ServiceNetworkServiceAssociationTagArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceNetworkServiceAssociationTag] {
	return pulumix.Output[ServiceNetworkServiceAssociationTag]{
		OutputState: i.ToServiceNetworkServiceAssociationTagOutputWithContext(ctx).OutputState,
	}
}

// ServiceNetworkServiceAssociationTagArrayInput is an input type that accepts ServiceNetworkServiceAssociationTagArray and ServiceNetworkServiceAssociationTagArrayOutput values.
// You can construct a concrete instance of `ServiceNetworkServiceAssociationTagArrayInput` via:
//
//	ServiceNetworkServiceAssociationTagArray{ ServiceNetworkServiceAssociationTagArgs{...} }
type ServiceNetworkServiceAssociationTagArrayInput interface {
	pulumi.Input

	ToServiceNetworkServiceAssociationTagArrayOutput() ServiceNetworkServiceAssociationTagArrayOutput
	ToServiceNetworkServiceAssociationTagArrayOutputWithContext(context.Context) ServiceNetworkServiceAssociationTagArrayOutput
}

type ServiceNetworkServiceAssociationTagArray []ServiceNetworkServiceAssociationTagInput

func (ServiceNetworkServiceAssociationTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceNetworkServiceAssociationTag)(nil)).Elem()
}

func (i ServiceNetworkServiceAssociationTagArray) ToServiceNetworkServiceAssociationTagArrayOutput() ServiceNetworkServiceAssociationTagArrayOutput {
	return i.ToServiceNetworkServiceAssociationTagArrayOutputWithContext(context.Background())
}

func (i ServiceNetworkServiceAssociationTagArray) ToServiceNetworkServiceAssociationTagArrayOutputWithContext(ctx context.Context) ServiceNetworkServiceAssociationTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceNetworkServiceAssociationTagArrayOutput)
}

func (i ServiceNetworkServiceAssociationTagArray) ToOutput(ctx context.Context) pulumix.Output[[]ServiceNetworkServiceAssociationTag] {
	return pulumix.Output[[]ServiceNetworkServiceAssociationTag]{
		OutputState: i.ToServiceNetworkServiceAssociationTagArrayOutputWithContext(ctx).OutputState,
	}
}

type ServiceNetworkServiceAssociationTagOutput struct{ *pulumi.OutputState }

func (ServiceNetworkServiceAssociationTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNetworkServiceAssociationTag)(nil)).Elem()
}

func (o ServiceNetworkServiceAssociationTagOutput) ToServiceNetworkServiceAssociationTagOutput() ServiceNetworkServiceAssociationTagOutput {
	return o
}

func (o ServiceNetworkServiceAssociationTagOutput) ToServiceNetworkServiceAssociationTagOutputWithContext(ctx context.Context) ServiceNetworkServiceAssociationTagOutput {
	return o
}

func (o ServiceNetworkServiceAssociationTagOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceNetworkServiceAssociationTag] {
	return pulumix.Output[ServiceNetworkServiceAssociationTag]{
		OutputState: o.OutputState,
	}
}

func (o ServiceNetworkServiceAssociationTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceNetworkServiceAssociationTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o ServiceNetworkServiceAssociationTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceNetworkServiceAssociationTag) string { return v.Value }).(pulumi.StringOutput)
}

type ServiceNetworkServiceAssociationTagArrayOutput struct{ *pulumi.OutputState }

func (ServiceNetworkServiceAssociationTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceNetworkServiceAssociationTag)(nil)).Elem()
}

func (o ServiceNetworkServiceAssociationTagArrayOutput) ToServiceNetworkServiceAssociationTagArrayOutput() ServiceNetworkServiceAssociationTagArrayOutput {
	return o
}

func (o ServiceNetworkServiceAssociationTagArrayOutput) ToServiceNetworkServiceAssociationTagArrayOutputWithContext(ctx context.Context) ServiceNetworkServiceAssociationTagArrayOutput {
	return o
}

func (o ServiceNetworkServiceAssociationTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ServiceNetworkServiceAssociationTag] {
	return pulumix.Output[[]ServiceNetworkServiceAssociationTag]{
		OutputState: o.OutputState,
	}
}

func (o ServiceNetworkServiceAssociationTagArrayOutput) Index(i pulumi.IntInput) ServiceNetworkServiceAssociationTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceNetworkServiceAssociationTag {
		return vs[0].([]ServiceNetworkServiceAssociationTag)[vs[1].(int)]
	}).(ServiceNetworkServiceAssociationTagOutput)
}

type ServiceNetworkTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// ServiceNetworkTagInput is an input type that accepts ServiceNetworkTagArgs and ServiceNetworkTagOutput values.
// You can construct a concrete instance of `ServiceNetworkTagInput` via:
//
//	ServiceNetworkTagArgs{...}
type ServiceNetworkTagInput interface {
	pulumi.Input

	ToServiceNetworkTagOutput() ServiceNetworkTagOutput
	ToServiceNetworkTagOutputWithContext(context.Context) ServiceNetworkTagOutput
}

type ServiceNetworkTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (ServiceNetworkTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNetworkTag)(nil)).Elem()
}

func (i ServiceNetworkTagArgs) ToServiceNetworkTagOutput() ServiceNetworkTagOutput {
	return i.ToServiceNetworkTagOutputWithContext(context.Background())
}

func (i ServiceNetworkTagArgs) ToServiceNetworkTagOutputWithContext(ctx context.Context) ServiceNetworkTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceNetworkTagOutput)
}

func (i ServiceNetworkTagArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceNetworkTag] {
	return pulumix.Output[ServiceNetworkTag]{
		OutputState: i.ToServiceNetworkTagOutputWithContext(ctx).OutputState,
	}
}

// ServiceNetworkTagArrayInput is an input type that accepts ServiceNetworkTagArray and ServiceNetworkTagArrayOutput values.
// You can construct a concrete instance of `ServiceNetworkTagArrayInput` via:
//
//	ServiceNetworkTagArray{ ServiceNetworkTagArgs{...} }
type ServiceNetworkTagArrayInput interface {
	pulumi.Input

	ToServiceNetworkTagArrayOutput() ServiceNetworkTagArrayOutput
	ToServiceNetworkTagArrayOutputWithContext(context.Context) ServiceNetworkTagArrayOutput
}

type ServiceNetworkTagArray []ServiceNetworkTagInput

func (ServiceNetworkTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceNetworkTag)(nil)).Elem()
}

func (i ServiceNetworkTagArray) ToServiceNetworkTagArrayOutput() ServiceNetworkTagArrayOutput {
	return i.ToServiceNetworkTagArrayOutputWithContext(context.Background())
}

func (i ServiceNetworkTagArray) ToServiceNetworkTagArrayOutputWithContext(ctx context.Context) ServiceNetworkTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceNetworkTagArrayOutput)
}

func (i ServiceNetworkTagArray) ToOutput(ctx context.Context) pulumix.Output[[]ServiceNetworkTag] {
	return pulumix.Output[[]ServiceNetworkTag]{
		OutputState: i.ToServiceNetworkTagArrayOutputWithContext(ctx).OutputState,
	}
}

type ServiceNetworkTagOutput struct{ *pulumi.OutputState }

func (ServiceNetworkTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNetworkTag)(nil)).Elem()
}

func (o ServiceNetworkTagOutput) ToServiceNetworkTagOutput() ServiceNetworkTagOutput {
	return o
}

func (o ServiceNetworkTagOutput) ToServiceNetworkTagOutputWithContext(ctx context.Context) ServiceNetworkTagOutput {
	return o
}

func (o ServiceNetworkTagOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceNetworkTag] {
	return pulumix.Output[ServiceNetworkTag]{
		OutputState: o.OutputState,
	}
}

func (o ServiceNetworkTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceNetworkTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o ServiceNetworkTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceNetworkTag) string { return v.Value }).(pulumi.StringOutput)
}

type ServiceNetworkTagArrayOutput struct{ *pulumi.OutputState }

func (ServiceNetworkTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceNetworkTag)(nil)).Elem()
}

func (o ServiceNetworkTagArrayOutput) ToServiceNetworkTagArrayOutput() ServiceNetworkTagArrayOutput {
	return o
}

func (o ServiceNetworkTagArrayOutput) ToServiceNetworkTagArrayOutputWithContext(ctx context.Context) ServiceNetworkTagArrayOutput {
	return o
}

func (o ServiceNetworkTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ServiceNetworkTag] {
	return pulumix.Output[[]ServiceNetworkTag]{
		OutputState: o.OutputState,
	}
}

func (o ServiceNetworkTagArrayOutput) Index(i pulumi.IntInput) ServiceNetworkTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceNetworkTag {
		return vs[0].([]ServiceNetworkTag)[vs[1].(int)]
	}).(ServiceNetworkTagOutput)
}

type ServiceNetworkVpcAssociationTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// ServiceNetworkVpcAssociationTagInput is an input type that accepts ServiceNetworkVpcAssociationTagArgs and ServiceNetworkVpcAssociationTagOutput values.
// You can construct a concrete instance of `ServiceNetworkVpcAssociationTagInput` via:
//
//	ServiceNetworkVpcAssociationTagArgs{...}
type ServiceNetworkVpcAssociationTagInput interface {
	pulumi.Input

	ToServiceNetworkVpcAssociationTagOutput() ServiceNetworkVpcAssociationTagOutput
	ToServiceNetworkVpcAssociationTagOutputWithContext(context.Context) ServiceNetworkVpcAssociationTagOutput
}

type ServiceNetworkVpcAssociationTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (ServiceNetworkVpcAssociationTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNetworkVpcAssociationTag)(nil)).Elem()
}

func (i ServiceNetworkVpcAssociationTagArgs) ToServiceNetworkVpcAssociationTagOutput() ServiceNetworkVpcAssociationTagOutput {
	return i.ToServiceNetworkVpcAssociationTagOutputWithContext(context.Background())
}

func (i ServiceNetworkVpcAssociationTagArgs) ToServiceNetworkVpcAssociationTagOutputWithContext(ctx context.Context) ServiceNetworkVpcAssociationTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceNetworkVpcAssociationTagOutput)
}

func (i ServiceNetworkVpcAssociationTagArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceNetworkVpcAssociationTag] {
	return pulumix.Output[ServiceNetworkVpcAssociationTag]{
		OutputState: i.ToServiceNetworkVpcAssociationTagOutputWithContext(ctx).OutputState,
	}
}

// ServiceNetworkVpcAssociationTagArrayInput is an input type that accepts ServiceNetworkVpcAssociationTagArray and ServiceNetworkVpcAssociationTagArrayOutput values.
// You can construct a concrete instance of `ServiceNetworkVpcAssociationTagArrayInput` via:
//
//	ServiceNetworkVpcAssociationTagArray{ ServiceNetworkVpcAssociationTagArgs{...} }
type ServiceNetworkVpcAssociationTagArrayInput interface {
	pulumi.Input

	ToServiceNetworkVpcAssociationTagArrayOutput() ServiceNetworkVpcAssociationTagArrayOutput
	ToServiceNetworkVpcAssociationTagArrayOutputWithContext(context.Context) ServiceNetworkVpcAssociationTagArrayOutput
}

type ServiceNetworkVpcAssociationTagArray []ServiceNetworkVpcAssociationTagInput

func (ServiceNetworkVpcAssociationTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceNetworkVpcAssociationTag)(nil)).Elem()
}

func (i ServiceNetworkVpcAssociationTagArray) ToServiceNetworkVpcAssociationTagArrayOutput() ServiceNetworkVpcAssociationTagArrayOutput {
	return i.ToServiceNetworkVpcAssociationTagArrayOutputWithContext(context.Background())
}

func (i ServiceNetworkVpcAssociationTagArray) ToServiceNetworkVpcAssociationTagArrayOutputWithContext(ctx context.Context) ServiceNetworkVpcAssociationTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceNetworkVpcAssociationTagArrayOutput)
}

func (i ServiceNetworkVpcAssociationTagArray) ToOutput(ctx context.Context) pulumix.Output[[]ServiceNetworkVpcAssociationTag] {
	return pulumix.Output[[]ServiceNetworkVpcAssociationTag]{
		OutputState: i.ToServiceNetworkVpcAssociationTagArrayOutputWithContext(ctx).OutputState,
	}
}

type ServiceNetworkVpcAssociationTagOutput struct{ *pulumi.OutputState }

func (ServiceNetworkVpcAssociationTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNetworkVpcAssociationTag)(nil)).Elem()
}

func (o ServiceNetworkVpcAssociationTagOutput) ToServiceNetworkVpcAssociationTagOutput() ServiceNetworkVpcAssociationTagOutput {
	return o
}

func (o ServiceNetworkVpcAssociationTagOutput) ToServiceNetworkVpcAssociationTagOutputWithContext(ctx context.Context) ServiceNetworkVpcAssociationTagOutput {
	return o
}

func (o ServiceNetworkVpcAssociationTagOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceNetworkVpcAssociationTag] {
	return pulumix.Output[ServiceNetworkVpcAssociationTag]{
		OutputState: o.OutputState,
	}
}

func (o ServiceNetworkVpcAssociationTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceNetworkVpcAssociationTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o ServiceNetworkVpcAssociationTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceNetworkVpcAssociationTag) string { return v.Value }).(pulumi.StringOutput)
}

type ServiceNetworkVpcAssociationTagArrayOutput struct{ *pulumi.OutputState }

func (ServiceNetworkVpcAssociationTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceNetworkVpcAssociationTag)(nil)).Elem()
}

func (o ServiceNetworkVpcAssociationTagArrayOutput) ToServiceNetworkVpcAssociationTagArrayOutput() ServiceNetworkVpcAssociationTagArrayOutput {
	return o
}

func (o ServiceNetworkVpcAssociationTagArrayOutput) ToServiceNetworkVpcAssociationTagArrayOutputWithContext(ctx context.Context) ServiceNetworkVpcAssociationTagArrayOutput {
	return o
}

func (o ServiceNetworkVpcAssociationTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ServiceNetworkVpcAssociationTag] {
	return pulumix.Output[[]ServiceNetworkVpcAssociationTag]{
		OutputState: o.OutputState,
	}
}

func (o ServiceNetworkVpcAssociationTagArrayOutput) Index(i pulumi.IntInput) ServiceNetworkVpcAssociationTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceNetworkVpcAssociationTag {
		return vs[0].([]ServiceNetworkVpcAssociationTag)[vs[1].(int)]
	}).(ServiceNetworkVpcAssociationTagOutput)
}

type ServiceTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// ServiceTagInput is an input type that accepts ServiceTagArgs and ServiceTagOutput values.
// You can construct a concrete instance of `ServiceTagInput` via:
//
//	ServiceTagArgs{...}
type ServiceTagInput interface {
	pulumi.Input

	ToServiceTagOutput() ServiceTagOutput
	ToServiceTagOutputWithContext(context.Context) ServiceTagOutput
}

type ServiceTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (ServiceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTag)(nil)).Elem()
}

func (i ServiceTagArgs) ToServiceTagOutput() ServiceTagOutput {
	return i.ToServiceTagOutputWithContext(context.Background())
}

func (i ServiceTagArgs) ToServiceTagOutputWithContext(ctx context.Context) ServiceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTagOutput)
}

func (i ServiceTagArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceTag] {
	return pulumix.Output[ServiceTag]{
		OutputState: i.ToServiceTagOutputWithContext(ctx).OutputState,
	}
}

// ServiceTagArrayInput is an input type that accepts ServiceTagArray and ServiceTagArrayOutput values.
// You can construct a concrete instance of `ServiceTagArrayInput` via:
//
//	ServiceTagArray{ ServiceTagArgs{...} }
type ServiceTagArrayInput interface {
	pulumi.Input

	ToServiceTagArrayOutput() ServiceTagArrayOutput
	ToServiceTagArrayOutputWithContext(context.Context) ServiceTagArrayOutput
}

type ServiceTagArray []ServiceTagInput

func (ServiceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceTag)(nil)).Elem()
}

func (i ServiceTagArray) ToServiceTagArrayOutput() ServiceTagArrayOutput {
	return i.ToServiceTagArrayOutputWithContext(context.Background())
}

func (i ServiceTagArray) ToServiceTagArrayOutputWithContext(ctx context.Context) ServiceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTagArrayOutput)
}

func (i ServiceTagArray) ToOutput(ctx context.Context) pulumix.Output[[]ServiceTag] {
	return pulumix.Output[[]ServiceTag]{
		OutputState: i.ToServiceTagArrayOutputWithContext(ctx).OutputState,
	}
}

type ServiceTagOutput struct{ *pulumi.OutputState }

func (ServiceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTag)(nil)).Elem()
}

func (o ServiceTagOutput) ToServiceTagOutput() ServiceTagOutput {
	return o
}

func (o ServiceTagOutput) ToServiceTagOutputWithContext(ctx context.Context) ServiceTagOutput {
	return o
}

func (o ServiceTagOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceTag] {
	return pulumix.Output[ServiceTag]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o ServiceTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceTag) string { return v.Value }).(pulumi.StringOutput)
}

type ServiceTagArrayOutput struct{ *pulumi.OutputState }

func (ServiceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceTag)(nil)).Elem()
}

func (o ServiceTagArrayOutput) ToServiceTagArrayOutput() ServiceTagArrayOutput {
	return o
}

func (o ServiceTagArrayOutput) ToServiceTagArrayOutputWithContext(ctx context.Context) ServiceTagArrayOutput {
	return o
}

func (o ServiceTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ServiceTag] {
	return pulumix.Output[[]ServiceTag]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTagArrayOutput) Index(i pulumi.IntInput) ServiceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceTag {
		return vs[0].([]ServiceTag)[vs[1].(int)]
	}).(ServiceTagOutput)
}

type TargetGroupConfig struct {
	HealthCheck     *TargetGroupHealthCheckConfig     `pulumi:"healthCheck"`
	IpAddressType   *TargetGroupConfigIpAddressType   `pulumi:"ipAddressType"`
	Port            int                               `pulumi:"port"`
	Protocol        TargetGroupConfigProtocol         `pulumi:"protocol"`
	ProtocolVersion *TargetGroupConfigProtocolVersion `pulumi:"protocolVersion"`
	VpcIdentifier   string                            `pulumi:"vpcIdentifier"`
}

// TargetGroupConfigInput is an input type that accepts TargetGroupConfigArgs and TargetGroupConfigOutput values.
// You can construct a concrete instance of `TargetGroupConfigInput` via:
//
//	TargetGroupConfigArgs{...}
type TargetGroupConfigInput interface {
	pulumi.Input

	ToTargetGroupConfigOutput() TargetGroupConfigOutput
	ToTargetGroupConfigOutputWithContext(context.Context) TargetGroupConfigOutput
}

type TargetGroupConfigArgs struct {
	HealthCheck     TargetGroupHealthCheckConfigPtrInput     `pulumi:"healthCheck"`
	IpAddressType   TargetGroupConfigIpAddressTypePtrInput   `pulumi:"ipAddressType"`
	Port            pulumi.IntInput                          `pulumi:"port"`
	Protocol        TargetGroupConfigProtocolInput           `pulumi:"protocol"`
	ProtocolVersion TargetGroupConfigProtocolVersionPtrInput `pulumi:"protocolVersion"`
	VpcIdentifier   pulumi.StringInput                       `pulumi:"vpcIdentifier"`
}

func (TargetGroupConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetGroupConfig)(nil)).Elem()
}

func (i TargetGroupConfigArgs) ToTargetGroupConfigOutput() TargetGroupConfigOutput {
	return i.ToTargetGroupConfigOutputWithContext(context.Background())
}

func (i TargetGroupConfigArgs) ToTargetGroupConfigOutputWithContext(ctx context.Context) TargetGroupConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetGroupConfigOutput)
}

func (i TargetGroupConfigArgs) ToOutput(ctx context.Context) pulumix.Output[TargetGroupConfig] {
	return pulumix.Output[TargetGroupConfig]{
		OutputState: i.ToTargetGroupConfigOutputWithContext(ctx).OutputState,
	}
}

func (i TargetGroupConfigArgs) ToTargetGroupConfigPtrOutput() TargetGroupConfigPtrOutput {
	return i.ToTargetGroupConfigPtrOutputWithContext(context.Background())
}

func (i TargetGroupConfigArgs) ToTargetGroupConfigPtrOutputWithContext(ctx context.Context) TargetGroupConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetGroupConfigOutput).ToTargetGroupConfigPtrOutputWithContext(ctx)
}

// TargetGroupConfigPtrInput is an input type that accepts TargetGroupConfigArgs, TargetGroupConfigPtr and TargetGroupConfigPtrOutput values.
// You can construct a concrete instance of `TargetGroupConfigPtrInput` via:
//
//	        TargetGroupConfigArgs{...}
//
//	or:
//
//	        nil
type TargetGroupConfigPtrInput interface {
	pulumi.Input

	ToTargetGroupConfigPtrOutput() TargetGroupConfigPtrOutput
	ToTargetGroupConfigPtrOutputWithContext(context.Context) TargetGroupConfigPtrOutput
}

type targetGroupConfigPtrType TargetGroupConfigArgs

func TargetGroupConfigPtr(v *TargetGroupConfigArgs) TargetGroupConfigPtrInput {
	return (*targetGroupConfigPtrType)(v)
}

func (*targetGroupConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TargetGroupConfig)(nil)).Elem()
}

func (i *targetGroupConfigPtrType) ToTargetGroupConfigPtrOutput() TargetGroupConfigPtrOutput {
	return i.ToTargetGroupConfigPtrOutputWithContext(context.Background())
}

func (i *targetGroupConfigPtrType) ToTargetGroupConfigPtrOutputWithContext(ctx context.Context) TargetGroupConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetGroupConfigPtrOutput)
}

func (i *targetGroupConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*TargetGroupConfig] {
	return pulumix.Output[*TargetGroupConfig]{
		OutputState: i.ToTargetGroupConfigPtrOutputWithContext(ctx).OutputState,
	}
}

type TargetGroupConfigOutput struct{ *pulumi.OutputState }

func (TargetGroupConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetGroupConfig)(nil)).Elem()
}

func (o TargetGroupConfigOutput) ToTargetGroupConfigOutput() TargetGroupConfigOutput {
	return o
}

func (o TargetGroupConfigOutput) ToTargetGroupConfigOutputWithContext(ctx context.Context) TargetGroupConfigOutput {
	return o
}

func (o TargetGroupConfigOutput) ToTargetGroupConfigPtrOutput() TargetGroupConfigPtrOutput {
	return o.ToTargetGroupConfigPtrOutputWithContext(context.Background())
}

func (o TargetGroupConfigOutput) ToTargetGroupConfigPtrOutputWithContext(ctx context.Context) TargetGroupConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TargetGroupConfig) *TargetGroupConfig {
		return &v
	}).(TargetGroupConfigPtrOutput)
}

func (o TargetGroupConfigOutput) ToOutput(ctx context.Context) pulumix.Output[TargetGroupConfig] {
	return pulumix.Output[TargetGroupConfig]{
		OutputState: o.OutputState,
	}
}

func (o TargetGroupConfigOutput) HealthCheck() TargetGroupHealthCheckConfigPtrOutput {
	return o.ApplyT(func(v TargetGroupConfig) *TargetGroupHealthCheckConfig { return v.HealthCheck }).(TargetGroupHealthCheckConfigPtrOutput)
}

func (o TargetGroupConfigOutput) IpAddressType() TargetGroupConfigIpAddressTypePtrOutput {
	return o.ApplyT(func(v TargetGroupConfig) *TargetGroupConfigIpAddressType { return v.IpAddressType }).(TargetGroupConfigIpAddressTypePtrOutput)
}

func (o TargetGroupConfigOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v TargetGroupConfig) int { return v.Port }).(pulumi.IntOutput)
}

func (o TargetGroupConfigOutput) Protocol() TargetGroupConfigProtocolOutput {
	return o.ApplyT(func(v TargetGroupConfig) TargetGroupConfigProtocol { return v.Protocol }).(TargetGroupConfigProtocolOutput)
}

func (o TargetGroupConfigOutput) ProtocolVersion() TargetGroupConfigProtocolVersionPtrOutput {
	return o.ApplyT(func(v TargetGroupConfig) *TargetGroupConfigProtocolVersion { return v.ProtocolVersion }).(TargetGroupConfigProtocolVersionPtrOutput)
}

func (o TargetGroupConfigOutput) VpcIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v TargetGroupConfig) string { return v.VpcIdentifier }).(pulumi.StringOutput)
}

type TargetGroupConfigPtrOutput struct{ *pulumi.OutputState }

func (TargetGroupConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TargetGroupConfig)(nil)).Elem()
}

func (o TargetGroupConfigPtrOutput) ToTargetGroupConfigPtrOutput() TargetGroupConfigPtrOutput {
	return o
}

func (o TargetGroupConfigPtrOutput) ToTargetGroupConfigPtrOutputWithContext(ctx context.Context) TargetGroupConfigPtrOutput {
	return o
}

func (o TargetGroupConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TargetGroupConfig] {
	return pulumix.Output[*TargetGroupConfig]{
		OutputState: o.OutputState,
	}
}

func (o TargetGroupConfigPtrOutput) Elem() TargetGroupConfigOutput {
	return o.ApplyT(func(v *TargetGroupConfig) TargetGroupConfig {
		if v != nil {
			return *v
		}
		var ret TargetGroupConfig
		return ret
	}).(TargetGroupConfigOutput)
}

func (o TargetGroupConfigPtrOutput) HealthCheck() TargetGroupHealthCheckConfigPtrOutput {
	return o.ApplyT(func(v *TargetGroupConfig) *TargetGroupHealthCheckConfig {
		if v == nil {
			return nil
		}
		return v.HealthCheck
	}).(TargetGroupHealthCheckConfigPtrOutput)
}

func (o TargetGroupConfigPtrOutput) IpAddressType() TargetGroupConfigIpAddressTypePtrOutput {
	return o.ApplyT(func(v *TargetGroupConfig) *TargetGroupConfigIpAddressType {
		if v == nil {
			return nil
		}
		return v.IpAddressType
	}).(TargetGroupConfigIpAddressTypePtrOutput)
}

func (o TargetGroupConfigPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TargetGroupConfig) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

func (o TargetGroupConfigPtrOutput) Protocol() TargetGroupConfigProtocolPtrOutput {
	return o.ApplyT(func(v *TargetGroupConfig) *TargetGroupConfigProtocol {
		if v == nil {
			return nil
		}
		return &v.Protocol
	}).(TargetGroupConfigProtocolPtrOutput)
}

func (o TargetGroupConfigPtrOutput) ProtocolVersion() TargetGroupConfigProtocolVersionPtrOutput {
	return o.ApplyT(func(v *TargetGroupConfig) *TargetGroupConfigProtocolVersion {
		if v == nil {
			return nil
		}
		return v.ProtocolVersion
	}).(TargetGroupConfigProtocolVersionPtrOutput)
}

func (o TargetGroupConfigPtrOutput) VpcIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TargetGroupConfig) *string {
		if v == nil {
			return nil
		}
		return &v.VpcIdentifier
	}).(pulumi.StringPtrOutput)
}

type TargetGroupHealthCheckConfig struct {
	Enabled                    *bool                                        `pulumi:"enabled"`
	HealthCheckIntervalSeconds *int                                         `pulumi:"healthCheckIntervalSeconds"`
	HealthCheckTimeoutSeconds  *int                                         `pulumi:"healthCheckTimeoutSeconds"`
	HealthyThresholdCount      *int                                         `pulumi:"healthyThresholdCount"`
	Matcher                    *TargetGroupMatcher                          `pulumi:"matcher"`
	Path                       *string                                      `pulumi:"path"`
	Port                       *int                                         `pulumi:"port"`
	Protocol                   *TargetGroupHealthCheckConfigProtocol        `pulumi:"protocol"`
	ProtocolVersion            *TargetGroupHealthCheckConfigProtocolVersion `pulumi:"protocolVersion"`
	UnhealthyThresholdCount    *int                                         `pulumi:"unhealthyThresholdCount"`
}

// TargetGroupHealthCheckConfigInput is an input type that accepts TargetGroupHealthCheckConfigArgs and TargetGroupHealthCheckConfigOutput values.
// You can construct a concrete instance of `TargetGroupHealthCheckConfigInput` via:
//
//	TargetGroupHealthCheckConfigArgs{...}
type TargetGroupHealthCheckConfigInput interface {
	pulumi.Input

	ToTargetGroupHealthCheckConfigOutput() TargetGroupHealthCheckConfigOutput
	ToTargetGroupHealthCheckConfigOutputWithContext(context.Context) TargetGroupHealthCheckConfigOutput
}

type TargetGroupHealthCheckConfigArgs struct {
	Enabled                    pulumi.BoolPtrInput                                 `pulumi:"enabled"`
	HealthCheckIntervalSeconds pulumi.IntPtrInput                                  `pulumi:"healthCheckIntervalSeconds"`
	HealthCheckTimeoutSeconds  pulumi.IntPtrInput                                  `pulumi:"healthCheckTimeoutSeconds"`
	HealthyThresholdCount      pulumi.IntPtrInput                                  `pulumi:"healthyThresholdCount"`
	Matcher                    TargetGroupMatcherPtrInput                          `pulumi:"matcher"`
	Path                       pulumi.StringPtrInput                               `pulumi:"path"`
	Port                       pulumi.IntPtrInput                                  `pulumi:"port"`
	Protocol                   TargetGroupHealthCheckConfigProtocolPtrInput        `pulumi:"protocol"`
	ProtocolVersion            TargetGroupHealthCheckConfigProtocolVersionPtrInput `pulumi:"protocolVersion"`
	UnhealthyThresholdCount    pulumi.IntPtrInput                                  `pulumi:"unhealthyThresholdCount"`
}

func (TargetGroupHealthCheckConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetGroupHealthCheckConfig)(nil)).Elem()
}

func (i TargetGroupHealthCheckConfigArgs) ToTargetGroupHealthCheckConfigOutput() TargetGroupHealthCheckConfigOutput {
	return i.ToTargetGroupHealthCheckConfigOutputWithContext(context.Background())
}

func (i TargetGroupHealthCheckConfigArgs) ToTargetGroupHealthCheckConfigOutputWithContext(ctx context.Context) TargetGroupHealthCheckConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetGroupHealthCheckConfigOutput)
}

func (i TargetGroupHealthCheckConfigArgs) ToOutput(ctx context.Context) pulumix.Output[TargetGroupHealthCheckConfig] {
	return pulumix.Output[TargetGroupHealthCheckConfig]{
		OutputState: i.ToTargetGroupHealthCheckConfigOutputWithContext(ctx).OutputState,
	}
}

func (i TargetGroupHealthCheckConfigArgs) ToTargetGroupHealthCheckConfigPtrOutput() TargetGroupHealthCheckConfigPtrOutput {
	return i.ToTargetGroupHealthCheckConfigPtrOutputWithContext(context.Background())
}

func (i TargetGroupHealthCheckConfigArgs) ToTargetGroupHealthCheckConfigPtrOutputWithContext(ctx context.Context) TargetGroupHealthCheckConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetGroupHealthCheckConfigOutput).ToTargetGroupHealthCheckConfigPtrOutputWithContext(ctx)
}

// TargetGroupHealthCheckConfigPtrInput is an input type that accepts TargetGroupHealthCheckConfigArgs, TargetGroupHealthCheckConfigPtr and TargetGroupHealthCheckConfigPtrOutput values.
// You can construct a concrete instance of `TargetGroupHealthCheckConfigPtrInput` via:
//
//	        TargetGroupHealthCheckConfigArgs{...}
//
//	or:
//
//	        nil
type TargetGroupHealthCheckConfigPtrInput interface {
	pulumi.Input

	ToTargetGroupHealthCheckConfigPtrOutput() TargetGroupHealthCheckConfigPtrOutput
	ToTargetGroupHealthCheckConfigPtrOutputWithContext(context.Context) TargetGroupHealthCheckConfigPtrOutput
}

type targetGroupHealthCheckConfigPtrType TargetGroupHealthCheckConfigArgs

func TargetGroupHealthCheckConfigPtr(v *TargetGroupHealthCheckConfigArgs) TargetGroupHealthCheckConfigPtrInput {
	return (*targetGroupHealthCheckConfigPtrType)(v)
}

func (*targetGroupHealthCheckConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TargetGroupHealthCheckConfig)(nil)).Elem()
}

func (i *targetGroupHealthCheckConfigPtrType) ToTargetGroupHealthCheckConfigPtrOutput() TargetGroupHealthCheckConfigPtrOutput {
	return i.ToTargetGroupHealthCheckConfigPtrOutputWithContext(context.Background())
}

func (i *targetGroupHealthCheckConfigPtrType) ToTargetGroupHealthCheckConfigPtrOutputWithContext(ctx context.Context) TargetGroupHealthCheckConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetGroupHealthCheckConfigPtrOutput)
}

func (i *targetGroupHealthCheckConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*TargetGroupHealthCheckConfig] {
	return pulumix.Output[*TargetGroupHealthCheckConfig]{
		OutputState: i.ToTargetGroupHealthCheckConfigPtrOutputWithContext(ctx).OutputState,
	}
}

type TargetGroupHealthCheckConfigOutput struct{ *pulumi.OutputState }

func (TargetGroupHealthCheckConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetGroupHealthCheckConfig)(nil)).Elem()
}

func (o TargetGroupHealthCheckConfigOutput) ToTargetGroupHealthCheckConfigOutput() TargetGroupHealthCheckConfigOutput {
	return o
}

func (o TargetGroupHealthCheckConfigOutput) ToTargetGroupHealthCheckConfigOutputWithContext(ctx context.Context) TargetGroupHealthCheckConfigOutput {
	return o
}

func (o TargetGroupHealthCheckConfigOutput) ToTargetGroupHealthCheckConfigPtrOutput() TargetGroupHealthCheckConfigPtrOutput {
	return o.ToTargetGroupHealthCheckConfigPtrOutputWithContext(context.Background())
}

func (o TargetGroupHealthCheckConfigOutput) ToTargetGroupHealthCheckConfigPtrOutputWithContext(ctx context.Context) TargetGroupHealthCheckConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TargetGroupHealthCheckConfig) *TargetGroupHealthCheckConfig {
		return &v
	}).(TargetGroupHealthCheckConfigPtrOutput)
}

func (o TargetGroupHealthCheckConfigOutput) ToOutput(ctx context.Context) pulumix.Output[TargetGroupHealthCheckConfig] {
	return pulumix.Output[TargetGroupHealthCheckConfig]{
		OutputState: o.OutputState,
	}
}

func (o TargetGroupHealthCheckConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TargetGroupHealthCheckConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o TargetGroupHealthCheckConfigOutput) HealthCheckIntervalSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TargetGroupHealthCheckConfig) *int { return v.HealthCheckIntervalSeconds }).(pulumi.IntPtrOutput)
}

func (o TargetGroupHealthCheckConfigOutput) HealthCheckTimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TargetGroupHealthCheckConfig) *int { return v.HealthCheckTimeoutSeconds }).(pulumi.IntPtrOutput)
}

func (o TargetGroupHealthCheckConfigOutput) HealthyThresholdCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TargetGroupHealthCheckConfig) *int { return v.HealthyThresholdCount }).(pulumi.IntPtrOutput)
}

func (o TargetGroupHealthCheckConfigOutput) Matcher() TargetGroupMatcherPtrOutput {
	return o.ApplyT(func(v TargetGroupHealthCheckConfig) *TargetGroupMatcher { return v.Matcher }).(TargetGroupMatcherPtrOutput)
}

func (o TargetGroupHealthCheckConfigOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TargetGroupHealthCheckConfig) *string { return v.Path }).(pulumi.StringPtrOutput)
}

func (o TargetGroupHealthCheckConfigOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TargetGroupHealthCheckConfig) *int { return v.Port }).(pulumi.IntPtrOutput)
}

func (o TargetGroupHealthCheckConfigOutput) Protocol() TargetGroupHealthCheckConfigProtocolPtrOutput {
	return o.ApplyT(func(v TargetGroupHealthCheckConfig) *TargetGroupHealthCheckConfigProtocol { return v.Protocol }).(TargetGroupHealthCheckConfigProtocolPtrOutput)
}

func (o TargetGroupHealthCheckConfigOutput) ProtocolVersion() TargetGroupHealthCheckConfigProtocolVersionPtrOutput {
	return o.ApplyT(func(v TargetGroupHealthCheckConfig) *TargetGroupHealthCheckConfigProtocolVersion {
		return v.ProtocolVersion
	}).(TargetGroupHealthCheckConfigProtocolVersionPtrOutput)
}

func (o TargetGroupHealthCheckConfigOutput) UnhealthyThresholdCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TargetGroupHealthCheckConfig) *int { return v.UnhealthyThresholdCount }).(pulumi.IntPtrOutput)
}

type TargetGroupHealthCheckConfigPtrOutput struct{ *pulumi.OutputState }

func (TargetGroupHealthCheckConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TargetGroupHealthCheckConfig)(nil)).Elem()
}

func (o TargetGroupHealthCheckConfigPtrOutput) ToTargetGroupHealthCheckConfigPtrOutput() TargetGroupHealthCheckConfigPtrOutput {
	return o
}

func (o TargetGroupHealthCheckConfigPtrOutput) ToTargetGroupHealthCheckConfigPtrOutputWithContext(ctx context.Context) TargetGroupHealthCheckConfigPtrOutput {
	return o
}

func (o TargetGroupHealthCheckConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TargetGroupHealthCheckConfig] {
	return pulumix.Output[*TargetGroupHealthCheckConfig]{
		OutputState: o.OutputState,
	}
}

func (o TargetGroupHealthCheckConfigPtrOutput) Elem() TargetGroupHealthCheckConfigOutput {
	return o.ApplyT(func(v *TargetGroupHealthCheckConfig) TargetGroupHealthCheckConfig {
		if v != nil {
			return *v
		}
		var ret TargetGroupHealthCheckConfig
		return ret
	}).(TargetGroupHealthCheckConfigOutput)
}

func (o TargetGroupHealthCheckConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TargetGroupHealthCheckConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o TargetGroupHealthCheckConfigPtrOutput) HealthCheckIntervalSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TargetGroupHealthCheckConfig) *int {
		if v == nil {
			return nil
		}
		return v.HealthCheckIntervalSeconds
	}).(pulumi.IntPtrOutput)
}

func (o TargetGroupHealthCheckConfigPtrOutput) HealthCheckTimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TargetGroupHealthCheckConfig) *int {
		if v == nil {
			return nil
		}
		return v.HealthCheckTimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

func (o TargetGroupHealthCheckConfigPtrOutput) HealthyThresholdCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TargetGroupHealthCheckConfig) *int {
		if v == nil {
			return nil
		}
		return v.HealthyThresholdCount
	}).(pulumi.IntPtrOutput)
}

func (o TargetGroupHealthCheckConfigPtrOutput) Matcher() TargetGroupMatcherPtrOutput {
	return o.ApplyT(func(v *TargetGroupHealthCheckConfig) *TargetGroupMatcher {
		if v == nil {
			return nil
		}
		return v.Matcher
	}).(TargetGroupMatcherPtrOutput)
}

func (o TargetGroupHealthCheckConfigPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TargetGroupHealthCheckConfig) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

func (o TargetGroupHealthCheckConfigPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TargetGroupHealthCheckConfig) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

func (o TargetGroupHealthCheckConfigPtrOutput) Protocol() TargetGroupHealthCheckConfigProtocolPtrOutput {
	return o.ApplyT(func(v *TargetGroupHealthCheckConfig) *TargetGroupHealthCheckConfigProtocol {
		if v == nil {
			return nil
		}
		return v.Protocol
	}).(TargetGroupHealthCheckConfigProtocolPtrOutput)
}

func (o TargetGroupHealthCheckConfigPtrOutput) ProtocolVersion() TargetGroupHealthCheckConfigProtocolVersionPtrOutput {
	return o.ApplyT(func(v *TargetGroupHealthCheckConfig) *TargetGroupHealthCheckConfigProtocolVersion {
		if v == nil {
			return nil
		}
		return v.ProtocolVersion
	}).(TargetGroupHealthCheckConfigProtocolVersionPtrOutput)
}

func (o TargetGroupHealthCheckConfigPtrOutput) UnhealthyThresholdCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TargetGroupHealthCheckConfig) *int {
		if v == nil {
			return nil
		}
		return v.UnhealthyThresholdCount
	}).(pulumi.IntPtrOutput)
}

type TargetGroupMatcher struct {
	HttpCode string `pulumi:"httpCode"`
}

// TargetGroupMatcherInput is an input type that accepts TargetGroupMatcherArgs and TargetGroupMatcherOutput values.
// You can construct a concrete instance of `TargetGroupMatcherInput` via:
//
//	TargetGroupMatcherArgs{...}
type TargetGroupMatcherInput interface {
	pulumi.Input

	ToTargetGroupMatcherOutput() TargetGroupMatcherOutput
	ToTargetGroupMatcherOutputWithContext(context.Context) TargetGroupMatcherOutput
}

type TargetGroupMatcherArgs struct {
	HttpCode pulumi.StringInput `pulumi:"httpCode"`
}

func (TargetGroupMatcherArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetGroupMatcher)(nil)).Elem()
}

func (i TargetGroupMatcherArgs) ToTargetGroupMatcherOutput() TargetGroupMatcherOutput {
	return i.ToTargetGroupMatcherOutputWithContext(context.Background())
}

func (i TargetGroupMatcherArgs) ToTargetGroupMatcherOutputWithContext(ctx context.Context) TargetGroupMatcherOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetGroupMatcherOutput)
}

func (i TargetGroupMatcherArgs) ToOutput(ctx context.Context) pulumix.Output[TargetGroupMatcher] {
	return pulumix.Output[TargetGroupMatcher]{
		OutputState: i.ToTargetGroupMatcherOutputWithContext(ctx).OutputState,
	}
}

func (i TargetGroupMatcherArgs) ToTargetGroupMatcherPtrOutput() TargetGroupMatcherPtrOutput {
	return i.ToTargetGroupMatcherPtrOutputWithContext(context.Background())
}

func (i TargetGroupMatcherArgs) ToTargetGroupMatcherPtrOutputWithContext(ctx context.Context) TargetGroupMatcherPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetGroupMatcherOutput).ToTargetGroupMatcherPtrOutputWithContext(ctx)
}

// TargetGroupMatcherPtrInput is an input type that accepts TargetGroupMatcherArgs, TargetGroupMatcherPtr and TargetGroupMatcherPtrOutput values.
// You can construct a concrete instance of `TargetGroupMatcherPtrInput` via:
//
//	        TargetGroupMatcherArgs{...}
//
//	or:
//
//	        nil
type TargetGroupMatcherPtrInput interface {
	pulumi.Input

	ToTargetGroupMatcherPtrOutput() TargetGroupMatcherPtrOutput
	ToTargetGroupMatcherPtrOutputWithContext(context.Context) TargetGroupMatcherPtrOutput
}

type targetGroupMatcherPtrType TargetGroupMatcherArgs

func TargetGroupMatcherPtr(v *TargetGroupMatcherArgs) TargetGroupMatcherPtrInput {
	return (*targetGroupMatcherPtrType)(v)
}

func (*targetGroupMatcherPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TargetGroupMatcher)(nil)).Elem()
}

func (i *targetGroupMatcherPtrType) ToTargetGroupMatcherPtrOutput() TargetGroupMatcherPtrOutput {
	return i.ToTargetGroupMatcherPtrOutputWithContext(context.Background())
}

func (i *targetGroupMatcherPtrType) ToTargetGroupMatcherPtrOutputWithContext(ctx context.Context) TargetGroupMatcherPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetGroupMatcherPtrOutput)
}

func (i *targetGroupMatcherPtrType) ToOutput(ctx context.Context) pulumix.Output[*TargetGroupMatcher] {
	return pulumix.Output[*TargetGroupMatcher]{
		OutputState: i.ToTargetGroupMatcherPtrOutputWithContext(ctx).OutputState,
	}
}

type TargetGroupMatcherOutput struct{ *pulumi.OutputState }

func (TargetGroupMatcherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetGroupMatcher)(nil)).Elem()
}

func (o TargetGroupMatcherOutput) ToTargetGroupMatcherOutput() TargetGroupMatcherOutput {
	return o
}

func (o TargetGroupMatcherOutput) ToTargetGroupMatcherOutputWithContext(ctx context.Context) TargetGroupMatcherOutput {
	return o
}

func (o TargetGroupMatcherOutput) ToTargetGroupMatcherPtrOutput() TargetGroupMatcherPtrOutput {
	return o.ToTargetGroupMatcherPtrOutputWithContext(context.Background())
}

func (o TargetGroupMatcherOutput) ToTargetGroupMatcherPtrOutputWithContext(ctx context.Context) TargetGroupMatcherPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TargetGroupMatcher) *TargetGroupMatcher {
		return &v
	}).(TargetGroupMatcherPtrOutput)
}

func (o TargetGroupMatcherOutput) ToOutput(ctx context.Context) pulumix.Output[TargetGroupMatcher] {
	return pulumix.Output[TargetGroupMatcher]{
		OutputState: o.OutputState,
	}
}

func (o TargetGroupMatcherOutput) HttpCode() pulumi.StringOutput {
	return o.ApplyT(func(v TargetGroupMatcher) string { return v.HttpCode }).(pulumi.StringOutput)
}

type TargetGroupMatcherPtrOutput struct{ *pulumi.OutputState }

func (TargetGroupMatcherPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TargetGroupMatcher)(nil)).Elem()
}

func (o TargetGroupMatcherPtrOutput) ToTargetGroupMatcherPtrOutput() TargetGroupMatcherPtrOutput {
	return o
}

func (o TargetGroupMatcherPtrOutput) ToTargetGroupMatcherPtrOutputWithContext(ctx context.Context) TargetGroupMatcherPtrOutput {
	return o
}

func (o TargetGroupMatcherPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TargetGroupMatcher] {
	return pulumix.Output[*TargetGroupMatcher]{
		OutputState: o.OutputState,
	}
}

func (o TargetGroupMatcherPtrOutput) Elem() TargetGroupMatcherOutput {
	return o.ApplyT(func(v *TargetGroupMatcher) TargetGroupMatcher {
		if v != nil {
			return *v
		}
		var ret TargetGroupMatcher
		return ret
	}).(TargetGroupMatcherOutput)
}

func (o TargetGroupMatcherPtrOutput) HttpCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TargetGroupMatcher) *string {
		if v == nil {
			return nil
		}
		return &v.HttpCode
	}).(pulumi.StringPtrOutput)
}

type TargetGroupTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// TargetGroupTagInput is an input type that accepts TargetGroupTagArgs and TargetGroupTagOutput values.
// You can construct a concrete instance of `TargetGroupTagInput` via:
//
//	TargetGroupTagArgs{...}
type TargetGroupTagInput interface {
	pulumi.Input

	ToTargetGroupTagOutput() TargetGroupTagOutput
	ToTargetGroupTagOutputWithContext(context.Context) TargetGroupTagOutput
}

type TargetGroupTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (TargetGroupTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetGroupTag)(nil)).Elem()
}

func (i TargetGroupTagArgs) ToTargetGroupTagOutput() TargetGroupTagOutput {
	return i.ToTargetGroupTagOutputWithContext(context.Background())
}

func (i TargetGroupTagArgs) ToTargetGroupTagOutputWithContext(ctx context.Context) TargetGroupTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetGroupTagOutput)
}

func (i TargetGroupTagArgs) ToOutput(ctx context.Context) pulumix.Output[TargetGroupTag] {
	return pulumix.Output[TargetGroupTag]{
		OutputState: i.ToTargetGroupTagOutputWithContext(ctx).OutputState,
	}
}

// TargetGroupTagArrayInput is an input type that accepts TargetGroupTagArray and TargetGroupTagArrayOutput values.
// You can construct a concrete instance of `TargetGroupTagArrayInput` via:
//
//	TargetGroupTagArray{ TargetGroupTagArgs{...} }
type TargetGroupTagArrayInput interface {
	pulumi.Input

	ToTargetGroupTagArrayOutput() TargetGroupTagArrayOutput
	ToTargetGroupTagArrayOutputWithContext(context.Context) TargetGroupTagArrayOutput
}

type TargetGroupTagArray []TargetGroupTagInput

func (TargetGroupTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TargetGroupTag)(nil)).Elem()
}

func (i TargetGroupTagArray) ToTargetGroupTagArrayOutput() TargetGroupTagArrayOutput {
	return i.ToTargetGroupTagArrayOutputWithContext(context.Background())
}

func (i TargetGroupTagArray) ToTargetGroupTagArrayOutputWithContext(ctx context.Context) TargetGroupTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetGroupTagArrayOutput)
}

func (i TargetGroupTagArray) ToOutput(ctx context.Context) pulumix.Output[[]TargetGroupTag] {
	return pulumix.Output[[]TargetGroupTag]{
		OutputState: i.ToTargetGroupTagArrayOutputWithContext(ctx).OutputState,
	}
}

type TargetGroupTagOutput struct{ *pulumi.OutputState }

func (TargetGroupTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetGroupTag)(nil)).Elem()
}

func (o TargetGroupTagOutput) ToTargetGroupTagOutput() TargetGroupTagOutput {
	return o
}

func (o TargetGroupTagOutput) ToTargetGroupTagOutputWithContext(ctx context.Context) TargetGroupTagOutput {
	return o
}

func (o TargetGroupTagOutput) ToOutput(ctx context.Context) pulumix.Output[TargetGroupTag] {
	return pulumix.Output[TargetGroupTag]{
		OutputState: o.OutputState,
	}
}

func (o TargetGroupTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v TargetGroupTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o TargetGroupTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v TargetGroupTag) string { return v.Value }).(pulumi.StringOutput)
}

type TargetGroupTagArrayOutput struct{ *pulumi.OutputState }

func (TargetGroupTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TargetGroupTag)(nil)).Elem()
}

func (o TargetGroupTagArrayOutput) ToTargetGroupTagArrayOutput() TargetGroupTagArrayOutput {
	return o
}

func (o TargetGroupTagArrayOutput) ToTargetGroupTagArrayOutputWithContext(ctx context.Context) TargetGroupTagArrayOutput {
	return o
}

func (o TargetGroupTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]TargetGroupTag] {
	return pulumix.Output[[]TargetGroupTag]{
		OutputState: o.OutputState,
	}
}

func (o TargetGroupTagArrayOutput) Index(i pulumi.IntInput) TargetGroupTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TargetGroupTag {
		return vs[0].([]TargetGroupTag)[vs[1].(int)]
	}).(TargetGroupTagOutput)
}

type TargetGroupTarget struct {
	Id   string `pulumi:"id"`
	Port *int   `pulumi:"port"`
}

// TargetGroupTargetInput is an input type that accepts TargetGroupTargetArgs and TargetGroupTargetOutput values.
// You can construct a concrete instance of `TargetGroupTargetInput` via:
//
//	TargetGroupTargetArgs{...}
type TargetGroupTargetInput interface {
	pulumi.Input

	ToTargetGroupTargetOutput() TargetGroupTargetOutput
	ToTargetGroupTargetOutputWithContext(context.Context) TargetGroupTargetOutput
}

type TargetGroupTargetArgs struct {
	Id   pulumi.StringInput `pulumi:"id"`
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (TargetGroupTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetGroupTarget)(nil)).Elem()
}

func (i TargetGroupTargetArgs) ToTargetGroupTargetOutput() TargetGroupTargetOutput {
	return i.ToTargetGroupTargetOutputWithContext(context.Background())
}

func (i TargetGroupTargetArgs) ToTargetGroupTargetOutputWithContext(ctx context.Context) TargetGroupTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetGroupTargetOutput)
}

func (i TargetGroupTargetArgs) ToOutput(ctx context.Context) pulumix.Output[TargetGroupTarget] {
	return pulumix.Output[TargetGroupTarget]{
		OutputState: i.ToTargetGroupTargetOutputWithContext(ctx).OutputState,
	}
}

// TargetGroupTargetArrayInput is an input type that accepts TargetGroupTargetArray and TargetGroupTargetArrayOutput values.
// You can construct a concrete instance of `TargetGroupTargetArrayInput` via:
//
//	TargetGroupTargetArray{ TargetGroupTargetArgs{...} }
type TargetGroupTargetArrayInput interface {
	pulumi.Input

	ToTargetGroupTargetArrayOutput() TargetGroupTargetArrayOutput
	ToTargetGroupTargetArrayOutputWithContext(context.Context) TargetGroupTargetArrayOutput
}

type TargetGroupTargetArray []TargetGroupTargetInput

func (TargetGroupTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TargetGroupTarget)(nil)).Elem()
}

func (i TargetGroupTargetArray) ToTargetGroupTargetArrayOutput() TargetGroupTargetArrayOutput {
	return i.ToTargetGroupTargetArrayOutputWithContext(context.Background())
}

func (i TargetGroupTargetArray) ToTargetGroupTargetArrayOutputWithContext(ctx context.Context) TargetGroupTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetGroupTargetArrayOutput)
}

func (i TargetGroupTargetArray) ToOutput(ctx context.Context) pulumix.Output[[]TargetGroupTarget] {
	return pulumix.Output[[]TargetGroupTarget]{
		OutputState: i.ToTargetGroupTargetArrayOutputWithContext(ctx).OutputState,
	}
}

type TargetGroupTargetOutput struct{ *pulumi.OutputState }

func (TargetGroupTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetGroupTarget)(nil)).Elem()
}

func (o TargetGroupTargetOutput) ToTargetGroupTargetOutput() TargetGroupTargetOutput {
	return o
}

func (o TargetGroupTargetOutput) ToTargetGroupTargetOutputWithContext(ctx context.Context) TargetGroupTargetOutput {
	return o
}

func (o TargetGroupTargetOutput) ToOutput(ctx context.Context) pulumix.Output[TargetGroupTarget] {
	return pulumix.Output[TargetGroupTarget]{
		OutputState: o.OutputState,
	}
}

func (o TargetGroupTargetOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v TargetGroupTarget) string { return v.Id }).(pulumi.StringOutput)
}

func (o TargetGroupTargetOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TargetGroupTarget) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type TargetGroupTargetArrayOutput struct{ *pulumi.OutputState }

func (TargetGroupTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TargetGroupTarget)(nil)).Elem()
}

func (o TargetGroupTargetArrayOutput) ToTargetGroupTargetArrayOutput() TargetGroupTargetArrayOutput {
	return o
}

func (o TargetGroupTargetArrayOutput) ToTargetGroupTargetArrayOutputWithContext(ctx context.Context) TargetGroupTargetArrayOutput {
	return o
}

func (o TargetGroupTargetArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]TargetGroupTarget] {
	return pulumix.Output[[]TargetGroupTarget]{
		OutputState: o.OutputState,
	}
}

func (o TargetGroupTargetArrayOutput) Index(i pulumi.IntInput) TargetGroupTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TargetGroupTarget {
		return vs[0].([]TargetGroupTarget)[vs[1].(int)]
	}).(TargetGroupTargetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessLogSubscriptionTagInput)(nil)).Elem(), AccessLogSubscriptionTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessLogSubscriptionTagArrayInput)(nil)).Elem(), AccessLogSubscriptionTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerDefaultActionInput)(nil)).Elem(), ListenerDefaultActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerFixedResponseInput)(nil)).Elem(), ListenerFixedResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerFixedResponsePtrInput)(nil)).Elem(), ListenerFixedResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerForwardInput)(nil)).Elem(), ListenerForwardArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerForwardPtrInput)(nil)).Elem(), ListenerForwardArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerTagInput)(nil)).Elem(), ListenerTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerTagArrayInput)(nil)).Elem(), ListenerTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerWeightedTargetGroupInput)(nil)).Elem(), ListenerWeightedTargetGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerWeightedTargetGroupArrayInput)(nil)).Elem(), ListenerWeightedTargetGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleActionInput)(nil)).Elem(), RuleActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleFixedResponseInput)(nil)).Elem(), RuleFixedResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleFixedResponsePtrInput)(nil)).Elem(), RuleFixedResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleForwardInput)(nil)).Elem(), RuleForwardArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleForwardPtrInput)(nil)).Elem(), RuleForwardArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleHeaderMatchInput)(nil)).Elem(), RuleHeaderMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleHeaderMatchArrayInput)(nil)).Elem(), RuleHeaderMatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleHeaderMatchTypeInput)(nil)).Elem(), RuleHeaderMatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleHttpMatchInput)(nil)).Elem(), RuleHttpMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleMatchInput)(nil)).Elem(), RuleMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulePathMatchInput)(nil)).Elem(), RulePathMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulePathMatchPtrInput)(nil)).Elem(), RulePathMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulePathMatchTypeInput)(nil)).Elem(), RulePathMatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulePathMatchTypePtrInput)(nil)).Elem(), RulePathMatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleTagInput)(nil)).Elem(), RuleTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleTagArrayInput)(nil)).Elem(), RuleTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleWeightedTargetGroupInput)(nil)).Elem(), RuleWeightedTargetGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleWeightedTargetGroupArrayInput)(nil)).Elem(), RuleWeightedTargetGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceDnsEntryInput)(nil)).Elem(), ServiceDnsEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceDnsEntryPtrInput)(nil)).Elem(), ServiceDnsEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceNetworkServiceAssociationDnsEntryInput)(nil)).Elem(), ServiceNetworkServiceAssociationDnsEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceNetworkServiceAssociationDnsEntryPtrInput)(nil)).Elem(), ServiceNetworkServiceAssociationDnsEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceNetworkServiceAssociationTagInput)(nil)).Elem(), ServiceNetworkServiceAssociationTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceNetworkServiceAssociationTagArrayInput)(nil)).Elem(), ServiceNetworkServiceAssociationTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceNetworkTagInput)(nil)).Elem(), ServiceNetworkTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceNetworkTagArrayInput)(nil)).Elem(), ServiceNetworkTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceNetworkVpcAssociationTagInput)(nil)).Elem(), ServiceNetworkVpcAssociationTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceNetworkVpcAssociationTagArrayInput)(nil)).Elem(), ServiceNetworkVpcAssociationTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTagInput)(nil)).Elem(), ServiceTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTagArrayInput)(nil)).Elem(), ServiceTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TargetGroupConfigInput)(nil)).Elem(), TargetGroupConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TargetGroupConfigPtrInput)(nil)).Elem(), TargetGroupConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TargetGroupHealthCheckConfigInput)(nil)).Elem(), TargetGroupHealthCheckConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TargetGroupHealthCheckConfigPtrInput)(nil)).Elem(), TargetGroupHealthCheckConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TargetGroupMatcherInput)(nil)).Elem(), TargetGroupMatcherArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TargetGroupMatcherPtrInput)(nil)).Elem(), TargetGroupMatcherArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TargetGroupTagInput)(nil)).Elem(), TargetGroupTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TargetGroupTagArrayInput)(nil)).Elem(), TargetGroupTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TargetGroupTargetInput)(nil)).Elem(), TargetGroupTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TargetGroupTargetArrayInput)(nil)).Elem(), TargetGroupTargetArray{})
	pulumi.RegisterOutputType(AccessLogSubscriptionTagOutput{})
	pulumi.RegisterOutputType(AccessLogSubscriptionTagArrayOutput{})
	pulumi.RegisterOutputType(ListenerDefaultActionOutput{})
	pulumi.RegisterOutputType(ListenerDefaultActionPtrOutput{})
	pulumi.RegisterOutputType(ListenerFixedResponseOutput{})
	pulumi.RegisterOutputType(ListenerFixedResponsePtrOutput{})
	pulumi.RegisterOutputType(ListenerForwardOutput{})
	pulumi.RegisterOutputType(ListenerForwardPtrOutput{})
	pulumi.RegisterOutputType(ListenerTagOutput{})
	pulumi.RegisterOutputType(ListenerTagArrayOutput{})
	pulumi.RegisterOutputType(ListenerWeightedTargetGroupOutput{})
	pulumi.RegisterOutputType(ListenerWeightedTargetGroupArrayOutput{})
	pulumi.RegisterOutputType(RuleActionOutput{})
	pulumi.RegisterOutputType(RuleActionPtrOutput{})
	pulumi.RegisterOutputType(RuleFixedResponseOutput{})
	pulumi.RegisterOutputType(RuleFixedResponsePtrOutput{})
	pulumi.RegisterOutputType(RuleForwardOutput{})
	pulumi.RegisterOutputType(RuleForwardPtrOutput{})
	pulumi.RegisterOutputType(RuleHeaderMatchOutput{})
	pulumi.RegisterOutputType(RuleHeaderMatchArrayOutput{})
	pulumi.RegisterOutputType(RuleHeaderMatchTypeOutput{})
	pulumi.RegisterOutputType(RuleHttpMatchOutput{})
	pulumi.RegisterOutputType(RuleHttpMatchPtrOutput{})
	pulumi.RegisterOutputType(RuleMatchOutput{})
	pulumi.RegisterOutputType(RuleMatchPtrOutput{})
	pulumi.RegisterOutputType(RulePathMatchOutput{})
	pulumi.RegisterOutputType(RulePathMatchPtrOutput{})
	pulumi.RegisterOutputType(RulePathMatchTypeOutput{})
	pulumi.RegisterOutputType(RulePathMatchTypePtrOutput{})
	pulumi.RegisterOutputType(RuleTagOutput{})
	pulumi.RegisterOutputType(RuleTagArrayOutput{})
	pulumi.RegisterOutputType(RuleWeightedTargetGroupOutput{})
	pulumi.RegisterOutputType(RuleWeightedTargetGroupArrayOutput{})
	pulumi.RegisterOutputType(ServiceDnsEntryOutput{})
	pulumi.RegisterOutputType(ServiceDnsEntryPtrOutput{})
	pulumi.RegisterOutputType(ServiceNetworkServiceAssociationDnsEntryOutput{})
	pulumi.RegisterOutputType(ServiceNetworkServiceAssociationDnsEntryPtrOutput{})
	pulumi.RegisterOutputType(ServiceNetworkServiceAssociationTagOutput{})
	pulumi.RegisterOutputType(ServiceNetworkServiceAssociationTagArrayOutput{})
	pulumi.RegisterOutputType(ServiceNetworkTagOutput{})
	pulumi.RegisterOutputType(ServiceNetworkTagArrayOutput{})
	pulumi.RegisterOutputType(ServiceNetworkVpcAssociationTagOutput{})
	pulumi.RegisterOutputType(ServiceNetworkVpcAssociationTagArrayOutput{})
	pulumi.RegisterOutputType(ServiceTagOutput{})
	pulumi.RegisterOutputType(ServiceTagArrayOutput{})
	pulumi.RegisterOutputType(TargetGroupConfigOutput{})
	pulumi.RegisterOutputType(TargetGroupConfigPtrOutput{})
	pulumi.RegisterOutputType(TargetGroupHealthCheckConfigOutput{})
	pulumi.RegisterOutputType(TargetGroupHealthCheckConfigPtrOutput{})
	pulumi.RegisterOutputType(TargetGroupMatcherOutput{})
	pulumi.RegisterOutputType(TargetGroupMatcherPtrOutput{})
	pulumi.RegisterOutputType(TargetGroupTagOutput{})
	pulumi.RegisterOutputType(TargetGroupTagArrayOutput{})
	pulumi.RegisterOutputType(TargetGroupTargetOutput{})
	pulumi.RegisterOutputType(TargetGroupTargetArrayOutput{})
}
