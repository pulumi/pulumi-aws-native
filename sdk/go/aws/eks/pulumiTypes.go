// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package eks

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A key-value pair to associate with a resource.
type AddonTag struct {
	// The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// AddonTagInput is an input type that accepts AddonTagArgs and AddonTagOutput values.
// You can construct a concrete instance of `AddonTagInput` via:
//
//          AddonTagArgs{...}
type AddonTagInput interface {
	pulumi.Input

	ToAddonTagOutput() AddonTagOutput
	ToAddonTagOutputWithContext(context.Context) AddonTagOutput
}

// A key-value pair to associate with a resource.
type AddonTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringInput `pulumi:"value"`
}

func (AddonTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AddonTag)(nil)).Elem()
}

func (i AddonTagArgs) ToAddonTagOutput() AddonTagOutput {
	return i.ToAddonTagOutputWithContext(context.Background())
}

func (i AddonTagArgs) ToAddonTagOutputWithContext(ctx context.Context) AddonTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddonTagOutput)
}

// AddonTagArrayInput is an input type that accepts AddonTagArray and AddonTagArrayOutput values.
// You can construct a concrete instance of `AddonTagArrayInput` via:
//
//          AddonTagArray{ AddonTagArgs{...} }
type AddonTagArrayInput interface {
	pulumi.Input

	ToAddonTagArrayOutput() AddonTagArrayOutput
	ToAddonTagArrayOutputWithContext(context.Context) AddonTagArrayOutput
}

type AddonTagArray []AddonTagInput

func (AddonTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AddonTag)(nil)).Elem()
}

func (i AddonTagArray) ToAddonTagArrayOutput() AddonTagArrayOutput {
	return i.ToAddonTagArrayOutputWithContext(context.Background())
}

func (i AddonTagArray) ToAddonTagArrayOutputWithContext(ctx context.Context) AddonTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddonTagArrayOutput)
}

// A key-value pair to associate with a resource.
type AddonTagOutput struct{ *pulumi.OutputState }

func (AddonTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AddonTag)(nil)).Elem()
}

func (o AddonTagOutput) ToAddonTagOutput() AddonTagOutput {
	return o
}

func (o AddonTagOutput) ToAddonTagOutputWithContext(ctx context.Context) AddonTagOutput {
	return o
}

// The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o AddonTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v AddonTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o AddonTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v AddonTag) string { return v.Value }).(pulumi.StringOutput)
}

type AddonTagArrayOutput struct{ *pulumi.OutputState }

func (AddonTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AddonTag)(nil)).Elem()
}

func (o AddonTagArrayOutput) ToAddonTagArrayOutput() AddonTagArrayOutput {
	return o
}

func (o AddonTagArrayOutput) ToAddonTagArrayOutputWithContext(ctx context.Context) AddonTagArrayOutput {
	return o
}

func (o AddonTagArrayOutput) Index(i pulumi.IntInput) AddonTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AddonTag {
		return vs[0].([]AddonTag)[vs[1].(int)]
	}).(AddonTagOutput)
}

// A key-value pair to associate with a pod.
type FargateProfileLabel struct {
	// The key name of the label.
	Key string `pulumi:"key"`
	// The value for the label.
	Value string `pulumi:"value"`
}

// FargateProfileLabelInput is an input type that accepts FargateProfileLabelArgs and FargateProfileLabelOutput values.
// You can construct a concrete instance of `FargateProfileLabelInput` via:
//
//          FargateProfileLabelArgs{...}
type FargateProfileLabelInput interface {
	pulumi.Input

	ToFargateProfileLabelOutput() FargateProfileLabelOutput
	ToFargateProfileLabelOutputWithContext(context.Context) FargateProfileLabelOutput
}

// A key-value pair to associate with a pod.
type FargateProfileLabelArgs struct {
	// The key name of the label.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the label.
	Value pulumi.StringInput `pulumi:"value"`
}

func (FargateProfileLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FargateProfileLabel)(nil)).Elem()
}

func (i FargateProfileLabelArgs) ToFargateProfileLabelOutput() FargateProfileLabelOutput {
	return i.ToFargateProfileLabelOutputWithContext(context.Background())
}

func (i FargateProfileLabelArgs) ToFargateProfileLabelOutputWithContext(ctx context.Context) FargateProfileLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FargateProfileLabelOutput)
}

// FargateProfileLabelArrayInput is an input type that accepts FargateProfileLabelArray and FargateProfileLabelArrayOutput values.
// You can construct a concrete instance of `FargateProfileLabelArrayInput` via:
//
//          FargateProfileLabelArray{ FargateProfileLabelArgs{...} }
type FargateProfileLabelArrayInput interface {
	pulumi.Input

	ToFargateProfileLabelArrayOutput() FargateProfileLabelArrayOutput
	ToFargateProfileLabelArrayOutputWithContext(context.Context) FargateProfileLabelArrayOutput
}

type FargateProfileLabelArray []FargateProfileLabelInput

func (FargateProfileLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FargateProfileLabel)(nil)).Elem()
}

func (i FargateProfileLabelArray) ToFargateProfileLabelArrayOutput() FargateProfileLabelArrayOutput {
	return i.ToFargateProfileLabelArrayOutputWithContext(context.Background())
}

func (i FargateProfileLabelArray) ToFargateProfileLabelArrayOutputWithContext(ctx context.Context) FargateProfileLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FargateProfileLabelArrayOutput)
}

// A key-value pair to associate with a pod.
type FargateProfileLabelOutput struct{ *pulumi.OutputState }

func (FargateProfileLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FargateProfileLabel)(nil)).Elem()
}

func (o FargateProfileLabelOutput) ToFargateProfileLabelOutput() FargateProfileLabelOutput {
	return o
}

func (o FargateProfileLabelOutput) ToFargateProfileLabelOutputWithContext(ctx context.Context) FargateProfileLabelOutput {
	return o
}

// The key name of the label.
func (o FargateProfileLabelOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v FargateProfileLabel) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the label.
func (o FargateProfileLabelOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v FargateProfileLabel) string { return v.Value }).(pulumi.StringOutput)
}

type FargateProfileLabelArrayOutput struct{ *pulumi.OutputState }

func (FargateProfileLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FargateProfileLabel)(nil)).Elem()
}

func (o FargateProfileLabelArrayOutput) ToFargateProfileLabelArrayOutput() FargateProfileLabelArrayOutput {
	return o
}

func (o FargateProfileLabelArrayOutput) ToFargateProfileLabelArrayOutputWithContext(ctx context.Context) FargateProfileLabelArrayOutput {
	return o
}

func (o FargateProfileLabelArrayOutput) Index(i pulumi.IntInput) FargateProfileLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FargateProfileLabel {
		return vs[0].([]FargateProfileLabel)[vs[1].(int)]
	}).(FargateProfileLabelOutput)
}

type FargateProfileSelector struct {
	Labels    []FargateProfileLabel `pulumi:"labels"`
	Namespace string                `pulumi:"namespace"`
}

// FargateProfileSelectorInput is an input type that accepts FargateProfileSelectorArgs and FargateProfileSelectorOutput values.
// You can construct a concrete instance of `FargateProfileSelectorInput` via:
//
//          FargateProfileSelectorArgs{...}
type FargateProfileSelectorInput interface {
	pulumi.Input

	ToFargateProfileSelectorOutput() FargateProfileSelectorOutput
	ToFargateProfileSelectorOutputWithContext(context.Context) FargateProfileSelectorOutput
}

type FargateProfileSelectorArgs struct {
	Labels    FargateProfileLabelArrayInput `pulumi:"labels"`
	Namespace pulumi.StringInput            `pulumi:"namespace"`
}

func (FargateProfileSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FargateProfileSelector)(nil)).Elem()
}

func (i FargateProfileSelectorArgs) ToFargateProfileSelectorOutput() FargateProfileSelectorOutput {
	return i.ToFargateProfileSelectorOutputWithContext(context.Background())
}

func (i FargateProfileSelectorArgs) ToFargateProfileSelectorOutputWithContext(ctx context.Context) FargateProfileSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FargateProfileSelectorOutput)
}

// FargateProfileSelectorArrayInput is an input type that accepts FargateProfileSelectorArray and FargateProfileSelectorArrayOutput values.
// You can construct a concrete instance of `FargateProfileSelectorArrayInput` via:
//
//          FargateProfileSelectorArray{ FargateProfileSelectorArgs{...} }
type FargateProfileSelectorArrayInput interface {
	pulumi.Input

	ToFargateProfileSelectorArrayOutput() FargateProfileSelectorArrayOutput
	ToFargateProfileSelectorArrayOutputWithContext(context.Context) FargateProfileSelectorArrayOutput
}

type FargateProfileSelectorArray []FargateProfileSelectorInput

func (FargateProfileSelectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FargateProfileSelector)(nil)).Elem()
}

func (i FargateProfileSelectorArray) ToFargateProfileSelectorArrayOutput() FargateProfileSelectorArrayOutput {
	return i.ToFargateProfileSelectorArrayOutputWithContext(context.Background())
}

func (i FargateProfileSelectorArray) ToFargateProfileSelectorArrayOutputWithContext(ctx context.Context) FargateProfileSelectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FargateProfileSelectorArrayOutput)
}

type FargateProfileSelectorOutput struct{ *pulumi.OutputState }

func (FargateProfileSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FargateProfileSelector)(nil)).Elem()
}

func (o FargateProfileSelectorOutput) ToFargateProfileSelectorOutput() FargateProfileSelectorOutput {
	return o
}

func (o FargateProfileSelectorOutput) ToFargateProfileSelectorOutputWithContext(ctx context.Context) FargateProfileSelectorOutput {
	return o
}

func (o FargateProfileSelectorOutput) Labels() FargateProfileLabelArrayOutput {
	return o.ApplyT(func(v FargateProfileSelector) []FargateProfileLabel { return v.Labels }).(FargateProfileLabelArrayOutput)
}

func (o FargateProfileSelectorOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v FargateProfileSelector) string { return v.Namespace }).(pulumi.StringOutput)
}

type FargateProfileSelectorArrayOutput struct{ *pulumi.OutputState }

func (FargateProfileSelectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FargateProfileSelector)(nil)).Elem()
}

func (o FargateProfileSelectorArrayOutput) ToFargateProfileSelectorArrayOutput() FargateProfileSelectorArrayOutput {
	return o
}

func (o FargateProfileSelectorArrayOutput) ToFargateProfileSelectorArrayOutputWithContext(ctx context.Context) FargateProfileSelectorArrayOutput {
	return o
}

func (o FargateProfileSelectorArrayOutput) Index(i pulumi.IntInput) FargateProfileSelectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FargateProfileSelector {
		return vs[0].([]FargateProfileSelector)[vs[1].(int)]
	}).(FargateProfileSelectorOutput)
}

// A key-value pair to associate with a resource.
type FargateProfileTag struct {
	// The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// FargateProfileTagInput is an input type that accepts FargateProfileTagArgs and FargateProfileTagOutput values.
// You can construct a concrete instance of `FargateProfileTagInput` via:
//
//          FargateProfileTagArgs{...}
type FargateProfileTagInput interface {
	pulumi.Input

	ToFargateProfileTagOutput() FargateProfileTagOutput
	ToFargateProfileTagOutputWithContext(context.Context) FargateProfileTagOutput
}

// A key-value pair to associate with a resource.
type FargateProfileTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringInput `pulumi:"value"`
}

func (FargateProfileTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FargateProfileTag)(nil)).Elem()
}

func (i FargateProfileTagArgs) ToFargateProfileTagOutput() FargateProfileTagOutput {
	return i.ToFargateProfileTagOutputWithContext(context.Background())
}

func (i FargateProfileTagArgs) ToFargateProfileTagOutputWithContext(ctx context.Context) FargateProfileTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FargateProfileTagOutput)
}

// FargateProfileTagArrayInput is an input type that accepts FargateProfileTagArray and FargateProfileTagArrayOutput values.
// You can construct a concrete instance of `FargateProfileTagArrayInput` via:
//
//          FargateProfileTagArray{ FargateProfileTagArgs{...} }
type FargateProfileTagArrayInput interface {
	pulumi.Input

	ToFargateProfileTagArrayOutput() FargateProfileTagArrayOutput
	ToFargateProfileTagArrayOutputWithContext(context.Context) FargateProfileTagArrayOutput
}

type FargateProfileTagArray []FargateProfileTagInput

func (FargateProfileTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FargateProfileTag)(nil)).Elem()
}

func (i FargateProfileTagArray) ToFargateProfileTagArrayOutput() FargateProfileTagArrayOutput {
	return i.ToFargateProfileTagArrayOutputWithContext(context.Background())
}

func (i FargateProfileTagArray) ToFargateProfileTagArrayOutputWithContext(ctx context.Context) FargateProfileTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FargateProfileTagArrayOutput)
}

// A key-value pair to associate with a resource.
type FargateProfileTagOutput struct{ *pulumi.OutputState }

func (FargateProfileTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FargateProfileTag)(nil)).Elem()
}

func (o FargateProfileTagOutput) ToFargateProfileTagOutput() FargateProfileTagOutput {
	return o
}

func (o FargateProfileTagOutput) ToFargateProfileTagOutputWithContext(ctx context.Context) FargateProfileTagOutput {
	return o
}

// The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o FargateProfileTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v FargateProfileTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o FargateProfileTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v FargateProfileTag) string { return v.Value }).(pulumi.StringOutput)
}

type FargateProfileTagArrayOutput struct{ *pulumi.OutputState }

func (FargateProfileTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FargateProfileTag)(nil)).Elem()
}

func (o FargateProfileTagArrayOutput) ToFargateProfileTagArrayOutput() FargateProfileTagArrayOutput {
	return o
}

func (o FargateProfileTagArrayOutput) ToFargateProfileTagArrayOutputWithContext(ctx context.Context) FargateProfileTagArrayOutput {
	return o
}

func (o FargateProfileTagArrayOutput) Index(i pulumi.IntInput) FargateProfileTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FargateProfileTag {
		return vs[0].([]FargateProfileTag)[vs[1].(int)]
	}).(FargateProfileTagOutput)
}

func init() {
	pulumi.RegisterOutputType(AddonTagOutput{})
	pulumi.RegisterOutputType(AddonTagArrayOutput{})
	pulumi.RegisterOutputType(FargateProfileLabelOutput{})
	pulumi.RegisterOutputType(FargateProfileLabelArrayOutput{})
	pulumi.RegisterOutputType(FargateProfileSelectorOutput{})
	pulumi.RegisterOutputType(FargateProfileSelectorArrayOutput{})
	pulumi.RegisterOutputType(FargateProfileTagOutput{})
	pulumi.RegisterOutputType(FargateProfileTagArrayOutput{})
}
