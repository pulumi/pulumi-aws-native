// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eks

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// An access policy to associate with the current access entry.
type AccessEntryAccessPolicy struct {
	// The scope of an `AccessPolicy` that's associated to an `AccessEntry` .
	AccessScope AccessEntryAccessScope `pulumi:"accessScope"`
	// The ARN of the access policy to add to the access entry.
	PolicyArn string `pulumi:"policyArn"`
}

// AccessEntryAccessPolicyInput is an input type that accepts AccessEntryAccessPolicyArgs and AccessEntryAccessPolicyOutput values.
// You can construct a concrete instance of `AccessEntryAccessPolicyInput` via:
//
//	AccessEntryAccessPolicyArgs{...}
type AccessEntryAccessPolicyInput interface {
	pulumi.Input

	ToAccessEntryAccessPolicyOutput() AccessEntryAccessPolicyOutput
	ToAccessEntryAccessPolicyOutputWithContext(context.Context) AccessEntryAccessPolicyOutput
}

// An access policy to associate with the current access entry.
type AccessEntryAccessPolicyArgs struct {
	// The scope of an `AccessPolicy` that's associated to an `AccessEntry` .
	AccessScope AccessEntryAccessScopeInput `pulumi:"accessScope"`
	// The ARN of the access policy to add to the access entry.
	PolicyArn pulumi.StringInput `pulumi:"policyArn"`
}

func (AccessEntryAccessPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessEntryAccessPolicy)(nil)).Elem()
}

func (i AccessEntryAccessPolicyArgs) ToAccessEntryAccessPolicyOutput() AccessEntryAccessPolicyOutput {
	return i.ToAccessEntryAccessPolicyOutputWithContext(context.Background())
}

func (i AccessEntryAccessPolicyArgs) ToAccessEntryAccessPolicyOutputWithContext(ctx context.Context) AccessEntryAccessPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessEntryAccessPolicyOutput)
}

// AccessEntryAccessPolicyArrayInput is an input type that accepts AccessEntryAccessPolicyArray and AccessEntryAccessPolicyArrayOutput values.
// You can construct a concrete instance of `AccessEntryAccessPolicyArrayInput` via:
//
//	AccessEntryAccessPolicyArray{ AccessEntryAccessPolicyArgs{...} }
type AccessEntryAccessPolicyArrayInput interface {
	pulumi.Input

	ToAccessEntryAccessPolicyArrayOutput() AccessEntryAccessPolicyArrayOutput
	ToAccessEntryAccessPolicyArrayOutputWithContext(context.Context) AccessEntryAccessPolicyArrayOutput
}

type AccessEntryAccessPolicyArray []AccessEntryAccessPolicyInput

func (AccessEntryAccessPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessEntryAccessPolicy)(nil)).Elem()
}

func (i AccessEntryAccessPolicyArray) ToAccessEntryAccessPolicyArrayOutput() AccessEntryAccessPolicyArrayOutput {
	return i.ToAccessEntryAccessPolicyArrayOutputWithContext(context.Background())
}

func (i AccessEntryAccessPolicyArray) ToAccessEntryAccessPolicyArrayOutputWithContext(ctx context.Context) AccessEntryAccessPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessEntryAccessPolicyArrayOutput)
}

// An access policy to associate with the current access entry.
type AccessEntryAccessPolicyOutput struct{ *pulumi.OutputState }

func (AccessEntryAccessPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessEntryAccessPolicy)(nil)).Elem()
}

func (o AccessEntryAccessPolicyOutput) ToAccessEntryAccessPolicyOutput() AccessEntryAccessPolicyOutput {
	return o
}

func (o AccessEntryAccessPolicyOutput) ToAccessEntryAccessPolicyOutputWithContext(ctx context.Context) AccessEntryAccessPolicyOutput {
	return o
}

// The scope of an `AccessPolicy` that's associated to an `AccessEntry` .
func (o AccessEntryAccessPolicyOutput) AccessScope() AccessEntryAccessScopeOutput {
	return o.ApplyT(func(v AccessEntryAccessPolicy) AccessEntryAccessScope { return v.AccessScope }).(AccessEntryAccessScopeOutput)
}

// The ARN of the access policy to add to the access entry.
func (o AccessEntryAccessPolicyOutput) PolicyArn() pulumi.StringOutput {
	return o.ApplyT(func(v AccessEntryAccessPolicy) string { return v.PolicyArn }).(pulumi.StringOutput)
}

type AccessEntryAccessPolicyArrayOutput struct{ *pulumi.OutputState }

func (AccessEntryAccessPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessEntryAccessPolicy)(nil)).Elem()
}

func (o AccessEntryAccessPolicyArrayOutput) ToAccessEntryAccessPolicyArrayOutput() AccessEntryAccessPolicyArrayOutput {
	return o
}

func (o AccessEntryAccessPolicyArrayOutput) ToAccessEntryAccessPolicyArrayOutputWithContext(ctx context.Context) AccessEntryAccessPolicyArrayOutput {
	return o
}

func (o AccessEntryAccessPolicyArrayOutput) Index(i pulumi.IntInput) AccessEntryAccessPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccessEntryAccessPolicy {
		return vs[0].([]AccessEntryAccessPolicy)[vs[1].(int)]
	}).(AccessEntryAccessPolicyOutput)
}

// The access scope of the access policy.
type AccessEntryAccessScope struct {
	// The namespaces to associate with the access scope. Only specify if Type is set to 'namespace'.
	Namespaces []string `pulumi:"namespaces"`
	// The type of the access scope.
	Type AccessEntryAccessScopeType `pulumi:"type"`
}

// AccessEntryAccessScopeInput is an input type that accepts AccessEntryAccessScopeArgs and AccessEntryAccessScopeOutput values.
// You can construct a concrete instance of `AccessEntryAccessScopeInput` via:
//
//	AccessEntryAccessScopeArgs{...}
type AccessEntryAccessScopeInput interface {
	pulumi.Input

	ToAccessEntryAccessScopeOutput() AccessEntryAccessScopeOutput
	ToAccessEntryAccessScopeOutputWithContext(context.Context) AccessEntryAccessScopeOutput
}

// The access scope of the access policy.
type AccessEntryAccessScopeArgs struct {
	// The namespaces to associate with the access scope. Only specify if Type is set to 'namespace'.
	Namespaces pulumi.StringArrayInput `pulumi:"namespaces"`
	// The type of the access scope.
	Type AccessEntryAccessScopeTypeInput `pulumi:"type"`
}

func (AccessEntryAccessScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessEntryAccessScope)(nil)).Elem()
}

func (i AccessEntryAccessScopeArgs) ToAccessEntryAccessScopeOutput() AccessEntryAccessScopeOutput {
	return i.ToAccessEntryAccessScopeOutputWithContext(context.Background())
}

func (i AccessEntryAccessScopeArgs) ToAccessEntryAccessScopeOutputWithContext(ctx context.Context) AccessEntryAccessScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessEntryAccessScopeOutput)
}

// The access scope of the access policy.
type AccessEntryAccessScopeOutput struct{ *pulumi.OutputState }

func (AccessEntryAccessScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessEntryAccessScope)(nil)).Elem()
}

func (o AccessEntryAccessScopeOutput) ToAccessEntryAccessScopeOutput() AccessEntryAccessScopeOutput {
	return o
}

func (o AccessEntryAccessScopeOutput) ToAccessEntryAccessScopeOutputWithContext(ctx context.Context) AccessEntryAccessScopeOutput {
	return o
}

// The namespaces to associate with the access scope. Only specify if Type is set to 'namespace'.
func (o AccessEntryAccessScopeOutput) Namespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AccessEntryAccessScope) []string { return v.Namespaces }).(pulumi.StringArrayOutput)
}

// The type of the access scope.
func (o AccessEntryAccessScopeOutput) Type() AccessEntryAccessScopeTypeOutput {
	return o.ApplyT(func(v AccessEntryAccessScope) AccessEntryAccessScopeType { return v.Type }).(AccessEntryAccessScopeTypeOutput)
}

// A key-value pair to associate with a resource.
type AccessEntryTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// A pod identity to associate with an add-on.
type AddonPodIdentityAssociation struct {
	// The IAM role ARN that the pod identity association is created for.
	RoleArn string `pulumi:"roleArn"`
	// The Kubernetes service account that the pod identity association is created for.
	ServiceAccount string `pulumi:"serviceAccount"`
}

// AddonPodIdentityAssociationInput is an input type that accepts AddonPodIdentityAssociationArgs and AddonPodIdentityAssociationOutput values.
// You can construct a concrete instance of `AddonPodIdentityAssociationInput` via:
//
//	AddonPodIdentityAssociationArgs{...}
type AddonPodIdentityAssociationInput interface {
	pulumi.Input

	ToAddonPodIdentityAssociationOutput() AddonPodIdentityAssociationOutput
	ToAddonPodIdentityAssociationOutputWithContext(context.Context) AddonPodIdentityAssociationOutput
}

// A pod identity to associate with an add-on.
type AddonPodIdentityAssociationArgs struct {
	// The IAM role ARN that the pod identity association is created for.
	RoleArn pulumi.StringInput `pulumi:"roleArn"`
	// The Kubernetes service account that the pod identity association is created for.
	ServiceAccount pulumi.StringInput `pulumi:"serviceAccount"`
}

func (AddonPodIdentityAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AddonPodIdentityAssociation)(nil)).Elem()
}

func (i AddonPodIdentityAssociationArgs) ToAddonPodIdentityAssociationOutput() AddonPodIdentityAssociationOutput {
	return i.ToAddonPodIdentityAssociationOutputWithContext(context.Background())
}

func (i AddonPodIdentityAssociationArgs) ToAddonPodIdentityAssociationOutputWithContext(ctx context.Context) AddonPodIdentityAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddonPodIdentityAssociationOutput)
}

// AddonPodIdentityAssociationArrayInput is an input type that accepts AddonPodIdentityAssociationArray and AddonPodIdentityAssociationArrayOutput values.
// You can construct a concrete instance of `AddonPodIdentityAssociationArrayInput` via:
//
//	AddonPodIdentityAssociationArray{ AddonPodIdentityAssociationArgs{...} }
type AddonPodIdentityAssociationArrayInput interface {
	pulumi.Input

	ToAddonPodIdentityAssociationArrayOutput() AddonPodIdentityAssociationArrayOutput
	ToAddonPodIdentityAssociationArrayOutputWithContext(context.Context) AddonPodIdentityAssociationArrayOutput
}

type AddonPodIdentityAssociationArray []AddonPodIdentityAssociationInput

func (AddonPodIdentityAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AddonPodIdentityAssociation)(nil)).Elem()
}

func (i AddonPodIdentityAssociationArray) ToAddonPodIdentityAssociationArrayOutput() AddonPodIdentityAssociationArrayOutput {
	return i.ToAddonPodIdentityAssociationArrayOutputWithContext(context.Background())
}

func (i AddonPodIdentityAssociationArray) ToAddonPodIdentityAssociationArrayOutputWithContext(ctx context.Context) AddonPodIdentityAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddonPodIdentityAssociationArrayOutput)
}

// A pod identity to associate with an add-on.
type AddonPodIdentityAssociationOutput struct{ *pulumi.OutputState }

func (AddonPodIdentityAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AddonPodIdentityAssociation)(nil)).Elem()
}

func (o AddonPodIdentityAssociationOutput) ToAddonPodIdentityAssociationOutput() AddonPodIdentityAssociationOutput {
	return o
}

func (o AddonPodIdentityAssociationOutput) ToAddonPodIdentityAssociationOutputWithContext(ctx context.Context) AddonPodIdentityAssociationOutput {
	return o
}

// The IAM role ARN that the pod identity association is created for.
func (o AddonPodIdentityAssociationOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v AddonPodIdentityAssociation) string { return v.RoleArn }).(pulumi.StringOutput)
}

// The Kubernetes service account that the pod identity association is created for.
func (o AddonPodIdentityAssociationOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v AddonPodIdentityAssociation) string { return v.ServiceAccount }).(pulumi.StringOutput)
}

type AddonPodIdentityAssociationArrayOutput struct{ *pulumi.OutputState }

func (AddonPodIdentityAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AddonPodIdentityAssociation)(nil)).Elem()
}

func (o AddonPodIdentityAssociationArrayOutput) ToAddonPodIdentityAssociationArrayOutput() AddonPodIdentityAssociationArrayOutput {
	return o
}

func (o AddonPodIdentityAssociationArrayOutput) ToAddonPodIdentityAssociationArrayOutputWithContext(ctx context.Context) AddonPodIdentityAssociationArrayOutput {
	return o
}

func (o AddonPodIdentityAssociationArrayOutput) Index(i pulumi.IntInput) AddonPodIdentityAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AddonPodIdentityAssociation {
		return vs[0].([]AddonPodIdentityAssociation)[vs[1].(int)]
	}).(AddonPodIdentityAssociationOutput)
}

// A key-value pair to associate with a resource.
type AddonTag struct {
	// The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// An object representing the Access Config to use for the cluster.
type ClusterAccessConfig struct {
	// Specify the authentication mode that should be used to create your cluster.
	AuthenticationMode *ClusterAccessConfigAuthenticationMode `pulumi:"authenticationMode"`
	// Set this value to false to avoid creating a default cluster admin Access Entry using the IAM principal used to create the cluster.
	BootstrapClusterCreatorAdminPermissions *bool `pulumi:"bootstrapClusterCreatorAdminPermissions"`
}

// ClusterAccessConfigInput is an input type that accepts ClusterAccessConfigArgs and ClusterAccessConfigOutput values.
// You can construct a concrete instance of `ClusterAccessConfigInput` via:
//
//	ClusterAccessConfigArgs{...}
type ClusterAccessConfigInput interface {
	pulumi.Input

	ToClusterAccessConfigOutput() ClusterAccessConfigOutput
	ToClusterAccessConfigOutputWithContext(context.Context) ClusterAccessConfigOutput
}

// An object representing the Access Config to use for the cluster.
type ClusterAccessConfigArgs struct {
	// Specify the authentication mode that should be used to create your cluster.
	AuthenticationMode ClusterAccessConfigAuthenticationModePtrInput `pulumi:"authenticationMode"`
	// Set this value to false to avoid creating a default cluster admin Access Entry using the IAM principal used to create the cluster.
	BootstrapClusterCreatorAdminPermissions pulumi.BoolPtrInput `pulumi:"bootstrapClusterCreatorAdminPermissions"`
}

func (ClusterAccessConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterAccessConfig)(nil)).Elem()
}

func (i ClusterAccessConfigArgs) ToClusterAccessConfigOutput() ClusterAccessConfigOutput {
	return i.ToClusterAccessConfigOutputWithContext(context.Background())
}

func (i ClusterAccessConfigArgs) ToClusterAccessConfigOutputWithContext(ctx context.Context) ClusterAccessConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAccessConfigOutput)
}

func (i ClusterAccessConfigArgs) ToClusterAccessConfigPtrOutput() ClusterAccessConfigPtrOutput {
	return i.ToClusterAccessConfigPtrOutputWithContext(context.Background())
}

func (i ClusterAccessConfigArgs) ToClusterAccessConfigPtrOutputWithContext(ctx context.Context) ClusterAccessConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAccessConfigOutput).ToClusterAccessConfigPtrOutputWithContext(ctx)
}

// ClusterAccessConfigPtrInput is an input type that accepts ClusterAccessConfigArgs, ClusterAccessConfigPtr and ClusterAccessConfigPtrOutput values.
// You can construct a concrete instance of `ClusterAccessConfigPtrInput` via:
//
//	        ClusterAccessConfigArgs{...}
//
//	or:
//
//	        nil
type ClusterAccessConfigPtrInput interface {
	pulumi.Input

	ToClusterAccessConfigPtrOutput() ClusterAccessConfigPtrOutput
	ToClusterAccessConfigPtrOutputWithContext(context.Context) ClusterAccessConfigPtrOutput
}

type clusterAccessConfigPtrType ClusterAccessConfigArgs

func ClusterAccessConfigPtr(v *ClusterAccessConfigArgs) ClusterAccessConfigPtrInput {
	return (*clusterAccessConfigPtrType)(v)
}

func (*clusterAccessConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterAccessConfig)(nil)).Elem()
}

func (i *clusterAccessConfigPtrType) ToClusterAccessConfigPtrOutput() ClusterAccessConfigPtrOutput {
	return i.ToClusterAccessConfigPtrOutputWithContext(context.Background())
}

func (i *clusterAccessConfigPtrType) ToClusterAccessConfigPtrOutputWithContext(ctx context.Context) ClusterAccessConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAccessConfigPtrOutput)
}

// An object representing the Access Config to use for the cluster.
type ClusterAccessConfigOutput struct{ *pulumi.OutputState }

func (ClusterAccessConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterAccessConfig)(nil)).Elem()
}

func (o ClusterAccessConfigOutput) ToClusterAccessConfigOutput() ClusterAccessConfigOutput {
	return o
}

func (o ClusterAccessConfigOutput) ToClusterAccessConfigOutputWithContext(ctx context.Context) ClusterAccessConfigOutput {
	return o
}

func (o ClusterAccessConfigOutput) ToClusterAccessConfigPtrOutput() ClusterAccessConfigPtrOutput {
	return o.ToClusterAccessConfigPtrOutputWithContext(context.Background())
}

func (o ClusterAccessConfigOutput) ToClusterAccessConfigPtrOutputWithContext(ctx context.Context) ClusterAccessConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterAccessConfig) *ClusterAccessConfig {
		return &v
	}).(ClusterAccessConfigPtrOutput)
}

// Specify the authentication mode that should be used to create your cluster.
func (o ClusterAccessConfigOutput) AuthenticationMode() ClusterAccessConfigAuthenticationModePtrOutput {
	return o.ApplyT(func(v ClusterAccessConfig) *ClusterAccessConfigAuthenticationMode { return v.AuthenticationMode }).(ClusterAccessConfigAuthenticationModePtrOutput)
}

// Set this value to false to avoid creating a default cluster admin Access Entry using the IAM principal used to create the cluster.
func (o ClusterAccessConfigOutput) BootstrapClusterCreatorAdminPermissions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterAccessConfig) *bool { return v.BootstrapClusterCreatorAdminPermissions }).(pulumi.BoolPtrOutput)
}

type ClusterAccessConfigPtrOutput struct{ *pulumi.OutputState }

func (ClusterAccessConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterAccessConfig)(nil)).Elem()
}

func (o ClusterAccessConfigPtrOutput) ToClusterAccessConfigPtrOutput() ClusterAccessConfigPtrOutput {
	return o
}

func (o ClusterAccessConfigPtrOutput) ToClusterAccessConfigPtrOutputWithContext(ctx context.Context) ClusterAccessConfigPtrOutput {
	return o
}

func (o ClusterAccessConfigPtrOutput) Elem() ClusterAccessConfigOutput {
	return o.ApplyT(func(v *ClusterAccessConfig) ClusterAccessConfig {
		if v != nil {
			return *v
		}
		var ret ClusterAccessConfig
		return ret
	}).(ClusterAccessConfigOutput)
}

// Specify the authentication mode that should be used to create your cluster.
func (o ClusterAccessConfigPtrOutput) AuthenticationMode() ClusterAccessConfigAuthenticationModePtrOutput {
	return o.ApplyT(func(v *ClusterAccessConfig) *ClusterAccessConfigAuthenticationMode {
		if v == nil {
			return nil
		}
		return v.AuthenticationMode
	}).(ClusterAccessConfigAuthenticationModePtrOutput)
}

// Set this value to false to avoid creating a default cluster admin Access Entry using the IAM principal used to create the cluster.
func (o ClusterAccessConfigPtrOutput) BootstrapClusterCreatorAdminPermissions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterAccessConfig) *bool {
		if v == nil {
			return nil
		}
		return v.BootstrapClusterCreatorAdminPermissions
	}).(pulumi.BoolPtrOutput)
}

// Todo: add description
type ClusterBlockStorage struct {
	// Todo: add description
	Enabled *bool `pulumi:"enabled"`
}

// ClusterBlockStorageInput is an input type that accepts ClusterBlockStorageArgs and ClusterBlockStorageOutput values.
// You can construct a concrete instance of `ClusterBlockStorageInput` via:
//
//	ClusterBlockStorageArgs{...}
type ClusterBlockStorageInput interface {
	pulumi.Input

	ToClusterBlockStorageOutput() ClusterBlockStorageOutput
	ToClusterBlockStorageOutputWithContext(context.Context) ClusterBlockStorageOutput
}

// Todo: add description
type ClusterBlockStorageArgs struct {
	// Todo: add description
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (ClusterBlockStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterBlockStorage)(nil)).Elem()
}

func (i ClusterBlockStorageArgs) ToClusterBlockStorageOutput() ClusterBlockStorageOutput {
	return i.ToClusterBlockStorageOutputWithContext(context.Background())
}

func (i ClusterBlockStorageArgs) ToClusterBlockStorageOutputWithContext(ctx context.Context) ClusterBlockStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterBlockStorageOutput)
}

func (i ClusterBlockStorageArgs) ToClusterBlockStoragePtrOutput() ClusterBlockStoragePtrOutput {
	return i.ToClusterBlockStoragePtrOutputWithContext(context.Background())
}

func (i ClusterBlockStorageArgs) ToClusterBlockStoragePtrOutputWithContext(ctx context.Context) ClusterBlockStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterBlockStorageOutput).ToClusterBlockStoragePtrOutputWithContext(ctx)
}

// ClusterBlockStoragePtrInput is an input type that accepts ClusterBlockStorageArgs, ClusterBlockStoragePtr and ClusterBlockStoragePtrOutput values.
// You can construct a concrete instance of `ClusterBlockStoragePtrInput` via:
//
//	        ClusterBlockStorageArgs{...}
//
//	or:
//
//	        nil
type ClusterBlockStoragePtrInput interface {
	pulumi.Input

	ToClusterBlockStoragePtrOutput() ClusterBlockStoragePtrOutput
	ToClusterBlockStoragePtrOutputWithContext(context.Context) ClusterBlockStoragePtrOutput
}

type clusterBlockStoragePtrType ClusterBlockStorageArgs

func ClusterBlockStoragePtr(v *ClusterBlockStorageArgs) ClusterBlockStoragePtrInput {
	return (*clusterBlockStoragePtrType)(v)
}

func (*clusterBlockStoragePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterBlockStorage)(nil)).Elem()
}

func (i *clusterBlockStoragePtrType) ToClusterBlockStoragePtrOutput() ClusterBlockStoragePtrOutput {
	return i.ToClusterBlockStoragePtrOutputWithContext(context.Background())
}

func (i *clusterBlockStoragePtrType) ToClusterBlockStoragePtrOutputWithContext(ctx context.Context) ClusterBlockStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterBlockStoragePtrOutput)
}

// Todo: add description
type ClusterBlockStorageOutput struct{ *pulumi.OutputState }

func (ClusterBlockStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterBlockStorage)(nil)).Elem()
}

func (o ClusterBlockStorageOutput) ToClusterBlockStorageOutput() ClusterBlockStorageOutput {
	return o
}

func (o ClusterBlockStorageOutput) ToClusterBlockStorageOutputWithContext(ctx context.Context) ClusterBlockStorageOutput {
	return o
}

func (o ClusterBlockStorageOutput) ToClusterBlockStoragePtrOutput() ClusterBlockStoragePtrOutput {
	return o.ToClusterBlockStoragePtrOutputWithContext(context.Background())
}

func (o ClusterBlockStorageOutput) ToClusterBlockStoragePtrOutputWithContext(ctx context.Context) ClusterBlockStoragePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterBlockStorage) *ClusterBlockStorage {
		return &v
	}).(ClusterBlockStoragePtrOutput)
}

// Todo: add description
func (o ClusterBlockStorageOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterBlockStorage) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type ClusterBlockStoragePtrOutput struct{ *pulumi.OutputState }

func (ClusterBlockStoragePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterBlockStorage)(nil)).Elem()
}

func (o ClusterBlockStoragePtrOutput) ToClusterBlockStoragePtrOutput() ClusterBlockStoragePtrOutput {
	return o
}

func (o ClusterBlockStoragePtrOutput) ToClusterBlockStoragePtrOutputWithContext(ctx context.Context) ClusterBlockStoragePtrOutput {
	return o
}

func (o ClusterBlockStoragePtrOutput) Elem() ClusterBlockStorageOutput {
	return o.ApplyT(func(v *ClusterBlockStorage) ClusterBlockStorage {
		if v != nil {
			return *v
		}
		var ret ClusterBlockStorage
		return ret
	}).(ClusterBlockStorageOutput)
}

// Todo: add description
func (o ClusterBlockStoragePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterBlockStorage) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Todo: add description
type ClusterComputeConfig struct {
	// Todo: add description
	Enabled *bool `pulumi:"enabled"`
	// Todo: add description
	NodePools []string `pulumi:"nodePools"`
	// Todo: add description
	NodeRoleArn *string `pulumi:"nodeRoleArn"`
}

// ClusterComputeConfigInput is an input type that accepts ClusterComputeConfigArgs and ClusterComputeConfigOutput values.
// You can construct a concrete instance of `ClusterComputeConfigInput` via:
//
//	ClusterComputeConfigArgs{...}
type ClusterComputeConfigInput interface {
	pulumi.Input

	ToClusterComputeConfigOutput() ClusterComputeConfigOutput
	ToClusterComputeConfigOutputWithContext(context.Context) ClusterComputeConfigOutput
}

// Todo: add description
type ClusterComputeConfigArgs struct {
	// Todo: add description
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Todo: add description
	NodePools pulumi.StringArrayInput `pulumi:"nodePools"`
	// Todo: add description
	NodeRoleArn pulumi.StringPtrInput `pulumi:"nodeRoleArn"`
}

func (ClusterComputeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterComputeConfig)(nil)).Elem()
}

func (i ClusterComputeConfigArgs) ToClusterComputeConfigOutput() ClusterComputeConfigOutput {
	return i.ToClusterComputeConfigOutputWithContext(context.Background())
}

func (i ClusterComputeConfigArgs) ToClusterComputeConfigOutputWithContext(ctx context.Context) ClusterComputeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterComputeConfigOutput)
}

func (i ClusterComputeConfigArgs) ToClusterComputeConfigPtrOutput() ClusterComputeConfigPtrOutput {
	return i.ToClusterComputeConfigPtrOutputWithContext(context.Background())
}

func (i ClusterComputeConfigArgs) ToClusterComputeConfigPtrOutputWithContext(ctx context.Context) ClusterComputeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterComputeConfigOutput).ToClusterComputeConfigPtrOutputWithContext(ctx)
}

// ClusterComputeConfigPtrInput is an input type that accepts ClusterComputeConfigArgs, ClusterComputeConfigPtr and ClusterComputeConfigPtrOutput values.
// You can construct a concrete instance of `ClusterComputeConfigPtrInput` via:
//
//	        ClusterComputeConfigArgs{...}
//
//	or:
//
//	        nil
type ClusterComputeConfigPtrInput interface {
	pulumi.Input

	ToClusterComputeConfigPtrOutput() ClusterComputeConfigPtrOutput
	ToClusterComputeConfigPtrOutputWithContext(context.Context) ClusterComputeConfigPtrOutput
}

type clusterComputeConfigPtrType ClusterComputeConfigArgs

func ClusterComputeConfigPtr(v *ClusterComputeConfigArgs) ClusterComputeConfigPtrInput {
	return (*clusterComputeConfigPtrType)(v)
}

func (*clusterComputeConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterComputeConfig)(nil)).Elem()
}

func (i *clusterComputeConfigPtrType) ToClusterComputeConfigPtrOutput() ClusterComputeConfigPtrOutput {
	return i.ToClusterComputeConfigPtrOutputWithContext(context.Background())
}

func (i *clusterComputeConfigPtrType) ToClusterComputeConfigPtrOutputWithContext(ctx context.Context) ClusterComputeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterComputeConfigPtrOutput)
}

// Todo: add description
type ClusterComputeConfigOutput struct{ *pulumi.OutputState }

func (ClusterComputeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterComputeConfig)(nil)).Elem()
}

func (o ClusterComputeConfigOutput) ToClusterComputeConfigOutput() ClusterComputeConfigOutput {
	return o
}

func (o ClusterComputeConfigOutput) ToClusterComputeConfigOutputWithContext(ctx context.Context) ClusterComputeConfigOutput {
	return o
}

func (o ClusterComputeConfigOutput) ToClusterComputeConfigPtrOutput() ClusterComputeConfigPtrOutput {
	return o.ToClusterComputeConfigPtrOutputWithContext(context.Background())
}

func (o ClusterComputeConfigOutput) ToClusterComputeConfigPtrOutputWithContext(ctx context.Context) ClusterComputeConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterComputeConfig) *ClusterComputeConfig {
		return &v
	}).(ClusterComputeConfigPtrOutput)
}

// Todo: add description
func (o ClusterComputeConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterComputeConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Todo: add description
func (o ClusterComputeConfigOutput) NodePools() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterComputeConfig) []string { return v.NodePools }).(pulumi.StringArrayOutput)
}

// Todo: add description
func (o ClusterComputeConfigOutput) NodeRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterComputeConfig) *string { return v.NodeRoleArn }).(pulumi.StringPtrOutput)
}

type ClusterComputeConfigPtrOutput struct{ *pulumi.OutputState }

func (ClusterComputeConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterComputeConfig)(nil)).Elem()
}

func (o ClusterComputeConfigPtrOutput) ToClusterComputeConfigPtrOutput() ClusterComputeConfigPtrOutput {
	return o
}

func (o ClusterComputeConfigPtrOutput) ToClusterComputeConfigPtrOutputWithContext(ctx context.Context) ClusterComputeConfigPtrOutput {
	return o
}

func (o ClusterComputeConfigPtrOutput) Elem() ClusterComputeConfigOutput {
	return o.ApplyT(func(v *ClusterComputeConfig) ClusterComputeConfig {
		if v != nil {
			return *v
		}
		var ret ClusterComputeConfig
		return ret
	}).(ClusterComputeConfigOutput)
}

// Todo: add description
func (o ClusterComputeConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterComputeConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Todo: add description
func (o ClusterComputeConfigPtrOutput) NodePools() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClusterComputeConfig) []string {
		if v == nil {
			return nil
		}
		return v.NodePools
	}).(pulumi.StringArrayOutput)
}

// Todo: add description
func (o ClusterComputeConfigPtrOutput) NodeRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterComputeConfig) *string {
		if v == nil {
			return nil
		}
		return v.NodeRoleArn
	}).(pulumi.StringPtrOutput)
}

// Specify the placement group of the control plane machines for your cluster.
type ClusterControlPlanePlacement struct {
	// Specify the placement group name of the control place machines for your cluster.
	GroupName *string `pulumi:"groupName"`
}

// ClusterControlPlanePlacementInput is an input type that accepts ClusterControlPlanePlacementArgs and ClusterControlPlanePlacementOutput values.
// You can construct a concrete instance of `ClusterControlPlanePlacementInput` via:
//
//	ClusterControlPlanePlacementArgs{...}
type ClusterControlPlanePlacementInput interface {
	pulumi.Input

	ToClusterControlPlanePlacementOutput() ClusterControlPlanePlacementOutput
	ToClusterControlPlanePlacementOutputWithContext(context.Context) ClusterControlPlanePlacementOutput
}

// Specify the placement group of the control plane machines for your cluster.
type ClusterControlPlanePlacementArgs struct {
	// Specify the placement group name of the control place machines for your cluster.
	GroupName pulumi.StringPtrInput `pulumi:"groupName"`
}

func (ClusterControlPlanePlacementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterControlPlanePlacement)(nil)).Elem()
}

func (i ClusterControlPlanePlacementArgs) ToClusterControlPlanePlacementOutput() ClusterControlPlanePlacementOutput {
	return i.ToClusterControlPlanePlacementOutputWithContext(context.Background())
}

func (i ClusterControlPlanePlacementArgs) ToClusterControlPlanePlacementOutputWithContext(ctx context.Context) ClusterControlPlanePlacementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterControlPlanePlacementOutput)
}

func (i ClusterControlPlanePlacementArgs) ToClusterControlPlanePlacementPtrOutput() ClusterControlPlanePlacementPtrOutput {
	return i.ToClusterControlPlanePlacementPtrOutputWithContext(context.Background())
}

func (i ClusterControlPlanePlacementArgs) ToClusterControlPlanePlacementPtrOutputWithContext(ctx context.Context) ClusterControlPlanePlacementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterControlPlanePlacementOutput).ToClusterControlPlanePlacementPtrOutputWithContext(ctx)
}

// ClusterControlPlanePlacementPtrInput is an input type that accepts ClusterControlPlanePlacementArgs, ClusterControlPlanePlacementPtr and ClusterControlPlanePlacementPtrOutput values.
// You can construct a concrete instance of `ClusterControlPlanePlacementPtrInput` via:
//
//	        ClusterControlPlanePlacementArgs{...}
//
//	or:
//
//	        nil
type ClusterControlPlanePlacementPtrInput interface {
	pulumi.Input

	ToClusterControlPlanePlacementPtrOutput() ClusterControlPlanePlacementPtrOutput
	ToClusterControlPlanePlacementPtrOutputWithContext(context.Context) ClusterControlPlanePlacementPtrOutput
}

type clusterControlPlanePlacementPtrType ClusterControlPlanePlacementArgs

func ClusterControlPlanePlacementPtr(v *ClusterControlPlanePlacementArgs) ClusterControlPlanePlacementPtrInput {
	return (*clusterControlPlanePlacementPtrType)(v)
}

func (*clusterControlPlanePlacementPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterControlPlanePlacement)(nil)).Elem()
}

func (i *clusterControlPlanePlacementPtrType) ToClusterControlPlanePlacementPtrOutput() ClusterControlPlanePlacementPtrOutput {
	return i.ToClusterControlPlanePlacementPtrOutputWithContext(context.Background())
}

func (i *clusterControlPlanePlacementPtrType) ToClusterControlPlanePlacementPtrOutputWithContext(ctx context.Context) ClusterControlPlanePlacementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterControlPlanePlacementPtrOutput)
}

// Specify the placement group of the control plane machines for your cluster.
type ClusterControlPlanePlacementOutput struct{ *pulumi.OutputState }

func (ClusterControlPlanePlacementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterControlPlanePlacement)(nil)).Elem()
}

func (o ClusterControlPlanePlacementOutput) ToClusterControlPlanePlacementOutput() ClusterControlPlanePlacementOutput {
	return o
}

func (o ClusterControlPlanePlacementOutput) ToClusterControlPlanePlacementOutputWithContext(ctx context.Context) ClusterControlPlanePlacementOutput {
	return o
}

func (o ClusterControlPlanePlacementOutput) ToClusterControlPlanePlacementPtrOutput() ClusterControlPlanePlacementPtrOutput {
	return o.ToClusterControlPlanePlacementPtrOutputWithContext(context.Background())
}

func (o ClusterControlPlanePlacementOutput) ToClusterControlPlanePlacementPtrOutputWithContext(ctx context.Context) ClusterControlPlanePlacementPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterControlPlanePlacement) *ClusterControlPlanePlacement {
		return &v
	}).(ClusterControlPlanePlacementPtrOutput)
}

// Specify the placement group name of the control place machines for your cluster.
func (o ClusterControlPlanePlacementOutput) GroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterControlPlanePlacement) *string { return v.GroupName }).(pulumi.StringPtrOutput)
}

type ClusterControlPlanePlacementPtrOutput struct{ *pulumi.OutputState }

func (ClusterControlPlanePlacementPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterControlPlanePlacement)(nil)).Elem()
}

func (o ClusterControlPlanePlacementPtrOutput) ToClusterControlPlanePlacementPtrOutput() ClusterControlPlanePlacementPtrOutput {
	return o
}

func (o ClusterControlPlanePlacementPtrOutput) ToClusterControlPlanePlacementPtrOutputWithContext(ctx context.Context) ClusterControlPlanePlacementPtrOutput {
	return o
}

func (o ClusterControlPlanePlacementPtrOutput) Elem() ClusterControlPlanePlacementOutput {
	return o.ApplyT(func(v *ClusterControlPlanePlacement) ClusterControlPlanePlacement {
		if v != nil {
			return *v
		}
		var ret ClusterControlPlanePlacement
		return ret
	}).(ClusterControlPlanePlacementOutput)
}

// Specify the placement group name of the control place machines for your cluster.
func (o ClusterControlPlanePlacementPtrOutput) GroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterControlPlanePlacement) *string {
		if v == nil {
			return nil
		}
		return v.GroupName
	}).(pulumi.StringPtrOutput)
}

// Todo: add description
type ClusterElasticLoadBalancing struct {
	// Todo: add description
	Enabled *bool `pulumi:"enabled"`
}

// ClusterElasticLoadBalancingInput is an input type that accepts ClusterElasticLoadBalancingArgs and ClusterElasticLoadBalancingOutput values.
// You can construct a concrete instance of `ClusterElasticLoadBalancingInput` via:
//
//	ClusterElasticLoadBalancingArgs{...}
type ClusterElasticLoadBalancingInput interface {
	pulumi.Input

	ToClusterElasticLoadBalancingOutput() ClusterElasticLoadBalancingOutput
	ToClusterElasticLoadBalancingOutputWithContext(context.Context) ClusterElasticLoadBalancingOutput
}

// Todo: add description
type ClusterElasticLoadBalancingArgs struct {
	// Todo: add description
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (ClusterElasticLoadBalancingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterElasticLoadBalancing)(nil)).Elem()
}

func (i ClusterElasticLoadBalancingArgs) ToClusterElasticLoadBalancingOutput() ClusterElasticLoadBalancingOutput {
	return i.ToClusterElasticLoadBalancingOutputWithContext(context.Background())
}

func (i ClusterElasticLoadBalancingArgs) ToClusterElasticLoadBalancingOutputWithContext(ctx context.Context) ClusterElasticLoadBalancingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterElasticLoadBalancingOutput)
}

func (i ClusterElasticLoadBalancingArgs) ToClusterElasticLoadBalancingPtrOutput() ClusterElasticLoadBalancingPtrOutput {
	return i.ToClusterElasticLoadBalancingPtrOutputWithContext(context.Background())
}

func (i ClusterElasticLoadBalancingArgs) ToClusterElasticLoadBalancingPtrOutputWithContext(ctx context.Context) ClusterElasticLoadBalancingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterElasticLoadBalancingOutput).ToClusterElasticLoadBalancingPtrOutputWithContext(ctx)
}

// ClusterElasticLoadBalancingPtrInput is an input type that accepts ClusterElasticLoadBalancingArgs, ClusterElasticLoadBalancingPtr and ClusterElasticLoadBalancingPtrOutput values.
// You can construct a concrete instance of `ClusterElasticLoadBalancingPtrInput` via:
//
//	        ClusterElasticLoadBalancingArgs{...}
//
//	or:
//
//	        nil
type ClusterElasticLoadBalancingPtrInput interface {
	pulumi.Input

	ToClusterElasticLoadBalancingPtrOutput() ClusterElasticLoadBalancingPtrOutput
	ToClusterElasticLoadBalancingPtrOutputWithContext(context.Context) ClusterElasticLoadBalancingPtrOutput
}

type clusterElasticLoadBalancingPtrType ClusterElasticLoadBalancingArgs

func ClusterElasticLoadBalancingPtr(v *ClusterElasticLoadBalancingArgs) ClusterElasticLoadBalancingPtrInput {
	return (*clusterElasticLoadBalancingPtrType)(v)
}

func (*clusterElasticLoadBalancingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterElasticLoadBalancing)(nil)).Elem()
}

func (i *clusterElasticLoadBalancingPtrType) ToClusterElasticLoadBalancingPtrOutput() ClusterElasticLoadBalancingPtrOutput {
	return i.ToClusterElasticLoadBalancingPtrOutputWithContext(context.Background())
}

func (i *clusterElasticLoadBalancingPtrType) ToClusterElasticLoadBalancingPtrOutputWithContext(ctx context.Context) ClusterElasticLoadBalancingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterElasticLoadBalancingPtrOutput)
}

// Todo: add description
type ClusterElasticLoadBalancingOutput struct{ *pulumi.OutputState }

func (ClusterElasticLoadBalancingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterElasticLoadBalancing)(nil)).Elem()
}

func (o ClusterElasticLoadBalancingOutput) ToClusterElasticLoadBalancingOutput() ClusterElasticLoadBalancingOutput {
	return o
}

func (o ClusterElasticLoadBalancingOutput) ToClusterElasticLoadBalancingOutputWithContext(ctx context.Context) ClusterElasticLoadBalancingOutput {
	return o
}

func (o ClusterElasticLoadBalancingOutput) ToClusterElasticLoadBalancingPtrOutput() ClusterElasticLoadBalancingPtrOutput {
	return o.ToClusterElasticLoadBalancingPtrOutputWithContext(context.Background())
}

func (o ClusterElasticLoadBalancingOutput) ToClusterElasticLoadBalancingPtrOutputWithContext(ctx context.Context) ClusterElasticLoadBalancingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterElasticLoadBalancing) *ClusterElasticLoadBalancing {
		return &v
	}).(ClusterElasticLoadBalancingPtrOutput)
}

// Todo: add description
func (o ClusterElasticLoadBalancingOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterElasticLoadBalancing) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type ClusterElasticLoadBalancingPtrOutput struct{ *pulumi.OutputState }

func (ClusterElasticLoadBalancingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterElasticLoadBalancing)(nil)).Elem()
}

func (o ClusterElasticLoadBalancingPtrOutput) ToClusterElasticLoadBalancingPtrOutput() ClusterElasticLoadBalancingPtrOutput {
	return o
}

func (o ClusterElasticLoadBalancingPtrOutput) ToClusterElasticLoadBalancingPtrOutputWithContext(ctx context.Context) ClusterElasticLoadBalancingPtrOutput {
	return o
}

func (o ClusterElasticLoadBalancingPtrOutput) Elem() ClusterElasticLoadBalancingOutput {
	return o.ApplyT(func(v *ClusterElasticLoadBalancing) ClusterElasticLoadBalancing {
		if v != nil {
			return *v
		}
		var ret ClusterElasticLoadBalancing
		return ret
	}).(ClusterElasticLoadBalancingOutput)
}

// Todo: add description
func (o ClusterElasticLoadBalancingPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterElasticLoadBalancing) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The encryption configuration for the cluster
type ClusterEncryptionConfig struct {
	// The encryption provider for the cluster.
	Provider *ClusterProvider `pulumi:"provider"`
	// Specifies the resources to be encrypted. The only supported value is "secrets".
	Resources []string `pulumi:"resources"`
}

// ClusterEncryptionConfigInput is an input type that accepts ClusterEncryptionConfigArgs and ClusterEncryptionConfigOutput values.
// You can construct a concrete instance of `ClusterEncryptionConfigInput` via:
//
//	ClusterEncryptionConfigArgs{...}
type ClusterEncryptionConfigInput interface {
	pulumi.Input

	ToClusterEncryptionConfigOutput() ClusterEncryptionConfigOutput
	ToClusterEncryptionConfigOutputWithContext(context.Context) ClusterEncryptionConfigOutput
}

// The encryption configuration for the cluster
type ClusterEncryptionConfigArgs struct {
	// The encryption provider for the cluster.
	Provider ClusterProviderPtrInput `pulumi:"provider"`
	// Specifies the resources to be encrypted. The only supported value is "secrets".
	Resources pulumi.StringArrayInput `pulumi:"resources"`
}

func (ClusterEncryptionConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterEncryptionConfig)(nil)).Elem()
}

func (i ClusterEncryptionConfigArgs) ToClusterEncryptionConfigOutput() ClusterEncryptionConfigOutput {
	return i.ToClusterEncryptionConfigOutputWithContext(context.Background())
}

func (i ClusterEncryptionConfigArgs) ToClusterEncryptionConfigOutputWithContext(ctx context.Context) ClusterEncryptionConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterEncryptionConfigOutput)
}

// ClusterEncryptionConfigArrayInput is an input type that accepts ClusterEncryptionConfigArray and ClusterEncryptionConfigArrayOutput values.
// You can construct a concrete instance of `ClusterEncryptionConfigArrayInput` via:
//
//	ClusterEncryptionConfigArray{ ClusterEncryptionConfigArgs{...} }
type ClusterEncryptionConfigArrayInput interface {
	pulumi.Input

	ToClusterEncryptionConfigArrayOutput() ClusterEncryptionConfigArrayOutput
	ToClusterEncryptionConfigArrayOutputWithContext(context.Context) ClusterEncryptionConfigArrayOutput
}

type ClusterEncryptionConfigArray []ClusterEncryptionConfigInput

func (ClusterEncryptionConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterEncryptionConfig)(nil)).Elem()
}

func (i ClusterEncryptionConfigArray) ToClusterEncryptionConfigArrayOutput() ClusterEncryptionConfigArrayOutput {
	return i.ToClusterEncryptionConfigArrayOutputWithContext(context.Background())
}

func (i ClusterEncryptionConfigArray) ToClusterEncryptionConfigArrayOutputWithContext(ctx context.Context) ClusterEncryptionConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterEncryptionConfigArrayOutput)
}

// The encryption configuration for the cluster
type ClusterEncryptionConfigOutput struct{ *pulumi.OutputState }

func (ClusterEncryptionConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterEncryptionConfig)(nil)).Elem()
}

func (o ClusterEncryptionConfigOutput) ToClusterEncryptionConfigOutput() ClusterEncryptionConfigOutput {
	return o
}

func (o ClusterEncryptionConfigOutput) ToClusterEncryptionConfigOutputWithContext(ctx context.Context) ClusterEncryptionConfigOutput {
	return o
}

// The encryption provider for the cluster.
func (o ClusterEncryptionConfigOutput) Provider() ClusterProviderPtrOutput {
	return o.ApplyT(func(v ClusterEncryptionConfig) *ClusterProvider { return v.Provider }).(ClusterProviderPtrOutput)
}

// Specifies the resources to be encrypted. The only supported value is "secrets".
func (o ClusterEncryptionConfigOutput) Resources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterEncryptionConfig) []string { return v.Resources }).(pulumi.StringArrayOutput)
}

type ClusterEncryptionConfigArrayOutput struct{ *pulumi.OutputState }

func (ClusterEncryptionConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterEncryptionConfig)(nil)).Elem()
}

func (o ClusterEncryptionConfigArrayOutput) ToClusterEncryptionConfigArrayOutput() ClusterEncryptionConfigArrayOutput {
	return o
}

func (o ClusterEncryptionConfigArrayOutput) ToClusterEncryptionConfigArrayOutputWithContext(ctx context.Context) ClusterEncryptionConfigArrayOutput {
	return o
}

func (o ClusterEncryptionConfigArrayOutput) Index(i pulumi.IntInput) ClusterEncryptionConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterEncryptionConfig {
		return vs[0].([]ClusterEncryptionConfig)[vs[1].(int)]
	}).(ClusterEncryptionConfigOutput)
}

// The Kubernetes network configuration for the cluster.
type ClusterKubernetesNetworkConfig struct {
	// Todo: add description
	ElasticLoadBalancing *ClusterElasticLoadBalancing `pulumi:"elasticLoadBalancing"`
	// Ipv4 or Ipv6. You can only specify ipv6 for 1.21 and later clusters that use version 1.10.1 or later of the Amazon VPC CNI add-on
	IpFamily *ClusterKubernetesNetworkConfigIpFamily `pulumi:"ipFamily"`
	// The CIDR block to assign Kubernetes service IP addresses from. If you don't specify a block, Kubernetes assigns addresses from either the 10.100.0.0/16 or 172.20.0.0/16 CIDR blocks. We recommend that you specify a block that does not overlap with resources in other networks that are peered or connected to your VPC.
	ServiceIpv4Cidr *string `pulumi:"serviceIpv4Cidr"`
	// The CIDR block to assign Kubernetes service IP addresses from.
	ServiceIpv6Cidr *string `pulumi:"serviceIpv6Cidr"`
}

// ClusterKubernetesNetworkConfigInput is an input type that accepts ClusterKubernetesNetworkConfigArgs and ClusterKubernetesNetworkConfigOutput values.
// You can construct a concrete instance of `ClusterKubernetesNetworkConfigInput` via:
//
//	ClusterKubernetesNetworkConfigArgs{...}
type ClusterKubernetesNetworkConfigInput interface {
	pulumi.Input

	ToClusterKubernetesNetworkConfigOutput() ClusterKubernetesNetworkConfigOutput
	ToClusterKubernetesNetworkConfigOutputWithContext(context.Context) ClusterKubernetesNetworkConfigOutput
}

// The Kubernetes network configuration for the cluster.
type ClusterKubernetesNetworkConfigArgs struct {
	// Todo: add description
	ElasticLoadBalancing ClusterElasticLoadBalancingPtrInput `pulumi:"elasticLoadBalancing"`
	// Ipv4 or Ipv6. You can only specify ipv6 for 1.21 and later clusters that use version 1.10.1 or later of the Amazon VPC CNI add-on
	IpFamily ClusterKubernetesNetworkConfigIpFamilyPtrInput `pulumi:"ipFamily"`
	// The CIDR block to assign Kubernetes service IP addresses from. If you don't specify a block, Kubernetes assigns addresses from either the 10.100.0.0/16 or 172.20.0.0/16 CIDR blocks. We recommend that you specify a block that does not overlap with resources in other networks that are peered or connected to your VPC.
	ServiceIpv4Cidr pulumi.StringPtrInput `pulumi:"serviceIpv4Cidr"`
	// The CIDR block to assign Kubernetes service IP addresses from.
	ServiceIpv6Cidr pulumi.StringPtrInput `pulumi:"serviceIpv6Cidr"`
}

func (ClusterKubernetesNetworkConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterKubernetesNetworkConfig)(nil)).Elem()
}

func (i ClusterKubernetesNetworkConfigArgs) ToClusterKubernetesNetworkConfigOutput() ClusterKubernetesNetworkConfigOutput {
	return i.ToClusterKubernetesNetworkConfigOutputWithContext(context.Background())
}

func (i ClusterKubernetesNetworkConfigArgs) ToClusterKubernetesNetworkConfigOutputWithContext(ctx context.Context) ClusterKubernetesNetworkConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterKubernetesNetworkConfigOutput)
}

func (i ClusterKubernetesNetworkConfigArgs) ToClusterKubernetesNetworkConfigPtrOutput() ClusterKubernetesNetworkConfigPtrOutput {
	return i.ToClusterKubernetesNetworkConfigPtrOutputWithContext(context.Background())
}

func (i ClusterKubernetesNetworkConfigArgs) ToClusterKubernetesNetworkConfigPtrOutputWithContext(ctx context.Context) ClusterKubernetesNetworkConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterKubernetesNetworkConfigOutput).ToClusterKubernetesNetworkConfigPtrOutputWithContext(ctx)
}

// ClusterKubernetesNetworkConfigPtrInput is an input type that accepts ClusterKubernetesNetworkConfigArgs, ClusterKubernetesNetworkConfigPtr and ClusterKubernetesNetworkConfigPtrOutput values.
// You can construct a concrete instance of `ClusterKubernetesNetworkConfigPtrInput` via:
//
//	        ClusterKubernetesNetworkConfigArgs{...}
//
//	or:
//
//	        nil
type ClusterKubernetesNetworkConfigPtrInput interface {
	pulumi.Input

	ToClusterKubernetesNetworkConfigPtrOutput() ClusterKubernetesNetworkConfigPtrOutput
	ToClusterKubernetesNetworkConfigPtrOutputWithContext(context.Context) ClusterKubernetesNetworkConfigPtrOutput
}

type clusterKubernetesNetworkConfigPtrType ClusterKubernetesNetworkConfigArgs

func ClusterKubernetesNetworkConfigPtr(v *ClusterKubernetesNetworkConfigArgs) ClusterKubernetesNetworkConfigPtrInput {
	return (*clusterKubernetesNetworkConfigPtrType)(v)
}

func (*clusterKubernetesNetworkConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterKubernetesNetworkConfig)(nil)).Elem()
}

func (i *clusterKubernetesNetworkConfigPtrType) ToClusterKubernetesNetworkConfigPtrOutput() ClusterKubernetesNetworkConfigPtrOutput {
	return i.ToClusterKubernetesNetworkConfigPtrOutputWithContext(context.Background())
}

func (i *clusterKubernetesNetworkConfigPtrType) ToClusterKubernetesNetworkConfigPtrOutputWithContext(ctx context.Context) ClusterKubernetesNetworkConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterKubernetesNetworkConfigPtrOutput)
}

// The Kubernetes network configuration for the cluster.
type ClusterKubernetesNetworkConfigOutput struct{ *pulumi.OutputState }

func (ClusterKubernetesNetworkConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterKubernetesNetworkConfig)(nil)).Elem()
}

func (o ClusterKubernetesNetworkConfigOutput) ToClusterKubernetesNetworkConfigOutput() ClusterKubernetesNetworkConfigOutput {
	return o
}

func (o ClusterKubernetesNetworkConfigOutput) ToClusterKubernetesNetworkConfigOutputWithContext(ctx context.Context) ClusterKubernetesNetworkConfigOutput {
	return o
}

func (o ClusterKubernetesNetworkConfigOutput) ToClusterKubernetesNetworkConfigPtrOutput() ClusterKubernetesNetworkConfigPtrOutput {
	return o.ToClusterKubernetesNetworkConfigPtrOutputWithContext(context.Background())
}

func (o ClusterKubernetesNetworkConfigOutput) ToClusterKubernetesNetworkConfigPtrOutputWithContext(ctx context.Context) ClusterKubernetesNetworkConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterKubernetesNetworkConfig) *ClusterKubernetesNetworkConfig {
		return &v
	}).(ClusterKubernetesNetworkConfigPtrOutput)
}

// Todo: add description
func (o ClusterKubernetesNetworkConfigOutput) ElasticLoadBalancing() ClusterElasticLoadBalancingPtrOutput {
	return o.ApplyT(func(v ClusterKubernetesNetworkConfig) *ClusterElasticLoadBalancing { return v.ElasticLoadBalancing }).(ClusterElasticLoadBalancingPtrOutput)
}

// Ipv4 or Ipv6. You can only specify ipv6 for 1.21 and later clusters that use version 1.10.1 or later of the Amazon VPC CNI add-on
func (o ClusterKubernetesNetworkConfigOutput) IpFamily() ClusterKubernetesNetworkConfigIpFamilyPtrOutput {
	return o.ApplyT(func(v ClusterKubernetesNetworkConfig) *ClusterKubernetesNetworkConfigIpFamily { return v.IpFamily }).(ClusterKubernetesNetworkConfigIpFamilyPtrOutput)
}

// The CIDR block to assign Kubernetes service IP addresses from. If you don't specify a block, Kubernetes assigns addresses from either the 10.100.0.0/16 or 172.20.0.0/16 CIDR blocks. We recommend that you specify a block that does not overlap with resources in other networks that are peered or connected to your VPC.
func (o ClusterKubernetesNetworkConfigOutput) ServiceIpv4Cidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterKubernetesNetworkConfig) *string { return v.ServiceIpv4Cidr }).(pulumi.StringPtrOutput)
}

// The CIDR block to assign Kubernetes service IP addresses from.
func (o ClusterKubernetesNetworkConfigOutput) ServiceIpv6Cidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterKubernetesNetworkConfig) *string { return v.ServiceIpv6Cidr }).(pulumi.StringPtrOutput)
}

type ClusterKubernetesNetworkConfigPtrOutput struct{ *pulumi.OutputState }

func (ClusterKubernetesNetworkConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterKubernetesNetworkConfig)(nil)).Elem()
}

func (o ClusterKubernetesNetworkConfigPtrOutput) ToClusterKubernetesNetworkConfigPtrOutput() ClusterKubernetesNetworkConfigPtrOutput {
	return o
}

func (o ClusterKubernetesNetworkConfigPtrOutput) ToClusterKubernetesNetworkConfigPtrOutputWithContext(ctx context.Context) ClusterKubernetesNetworkConfigPtrOutput {
	return o
}

func (o ClusterKubernetesNetworkConfigPtrOutput) Elem() ClusterKubernetesNetworkConfigOutput {
	return o.ApplyT(func(v *ClusterKubernetesNetworkConfig) ClusterKubernetesNetworkConfig {
		if v != nil {
			return *v
		}
		var ret ClusterKubernetesNetworkConfig
		return ret
	}).(ClusterKubernetesNetworkConfigOutput)
}

// Todo: add description
func (o ClusterKubernetesNetworkConfigPtrOutput) ElasticLoadBalancing() ClusterElasticLoadBalancingPtrOutput {
	return o.ApplyT(func(v *ClusterKubernetesNetworkConfig) *ClusterElasticLoadBalancing {
		if v == nil {
			return nil
		}
		return v.ElasticLoadBalancing
	}).(ClusterElasticLoadBalancingPtrOutput)
}

// Ipv4 or Ipv6. You can only specify ipv6 for 1.21 and later clusters that use version 1.10.1 or later of the Amazon VPC CNI add-on
func (o ClusterKubernetesNetworkConfigPtrOutput) IpFamily() ClusterKubernetesNetworkConfigIpFamilyPtrOutput {
	return o.ApplyT(func(v *ClusterKubernetesNetworkConfig) *ClusterKubernetesNetworkConfigIpFamily {
		if v == nil {
			return nil
		}
		return v.IpFamily
	}).(ClusterKubernetesNetworkConfigIpFamilyPtrOutput)
}

// The CIDR block to assign Kubernetes service IP addresses from. If you don't specify a block, Kubernetes assigns addresses from either the 10.100.0.0/16 or 172.20.0.0/16 CIDR blocks. We recommend that you specify a block that does not overlap with resources in other networks that are peered or connected to your VPC.
func (o ClusterKubernetesNetworkConfigPtrOutput) ServiceIpv4Cidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterKubernetesNetworkConfig) *string {
		if v == nil {
			return nil
		}
		return v.ServiceIpv4Cidr
	}).(pulumi.StringPtrOutput)
}

// The CIDR block to assign Kubernetes service IP addresses from.
func (o ClusterKubernetesNetworkConfigPtrOutput) ServiceIpv6Cidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterKubernetesNetworkConfig) *string {
		if v == nil {
			return nil
		}
		return v.ServiceIpv6Cidr
	}).(pulumi.StringPtrOutput)
}

// The cluster control plane logging configuration for your cluster.
type ClusterLoggingEnabledTypes struct {
	// The enabled control plane logs for your cluster. All log types are disabled if the array is empty.
	//
	// > When updating a resource, you must include this `EnabledTypes` property if the previous CloudFormation template of the resource had it.
	EnabledTypes []ClusterLoggingTypeConfig `pulumi:"enabledTypes"`
}

// ClusterLoggingEnabledTypesInput is an input type that accepts ClusterLoggingEnabledTypesArgs and ClusterLoggingEnabledTypesOutput values.
// You can construct a concrete instance of `ClusterLoggingEnabledTypesInput` via:
//
//	ClusterLoggingEnabledTypesArgs{...}
type ClusterLoggingEnabledTypesInput interface {
	pulumi.Input

	ToClusterLoggingEnabledTypesOutput() ClusterLoggingEnabledTypesOutput
	ToClusterLoggingEnabledTypesOutputWithContext(context.Context) ClusterLoggingEnabledTypesOutput
}

// The cluster control plane logging configuration for your cluster.
type ClusterLoggingEnabledTypesArgs struct {
	// The enabled control plane logs for your cluster. All log types are disabled if the array is empty.
	//
	// > When updating a resource, you must include this `EnabledTypes` property if the previous CloudFormation template of the resource had it.
	EnabledTypes ClusterLoggingTypeConfigArrayInput `pulumi:"enabledTypes"`
}

func (ClusterLoggingEnabledTypesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLoggingEnabledTypes)(nil)).Elem()
}

func (i ClusterLoggingEnabledTypesArgs) ToClusterLoggingEnabledTypesOutput() ClusterLoggingEnabledTypesOutput {
	return i.ToClusterLoggingEnabledTypesOutputWithContext(context.Background())
}

func (i ClusterLoggingEnabledTypesArgs) ToClusterLoggingEnabledTypesOutputWithContext(ctx context.Context) ClusterLoggingEnabledTypesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLoggingEnabledTypesOutput)
}

func (i ClusterLoggingEnabledTypesArgs) ToClusterLoggingEnabledTypesPtrOutput() ClusterLoggingEnabledTypesPtrOutput {
	return i.ToClusterLoggingEnabledTypesPtrOutputWithContext(context.Background())
}

func (i ClusterLoggingEnabledTypesArgs) ToClusterLoggingEnabledTypesPtrOutputWithContext(ctx context.Context) ClusterLoggingEnabledTypesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLoggingEnabledTypesOutput).ToClusterLoggingEnabledTypesPtrOutputWithContext(ctx)
}

// ClusterLoggingEnabledTypesPtrInput is an input type that accepts ClusterLoggingEnabledTypesArgs, ClusterLoggingEnabledTypesPtr and ClusterLoggingEnabledTypesPtrOutput values.
// You can construct a concrete instance of `ClusterLoggingEnabledTypesPtrInput` via:
//
//	        ClusterLoggingEnabledTypesArgs{...}
//
//	or:
//
//	        nil
type ClusterLoggingEnabledTypesPtrInput interface {
	pulumi.Input

	ToClusterLoggingEnabledTypesPtrOutput() ClusterLoggingEnabledTypesPtrOutput
	ToClusterLoggingEnabledTypesPtrOutputWithContext(context.Context) ClusterLoggingEnabledTypesPtrOutput
}

type clusterLoggingEnabledTypesPtrType ClusterLoggingEnabledTypesArgs

func ClusterLoggingEnabledTypesPtr(v *ClusterLoggingEnabledTypesArgs) ClusterLoggingEnabledTypesPtrInput {
	return (*clusterLoggingEnabledTypesPtrType)(v)
}

func (*clusterLoggingEnabledTypesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterLoggingEnabledTypes)(nil)).Elem()
}

func (i *clusterLoggingEnabledTypesPtrType) ToClusterLoggingEnabledTypesPtrOutput() ClusterLoggingEnabledTypesPtrOutput {
	return i.ToClusterLoggingEnabledTypesPtrOutputWithContext(context.Background())
}

func (i *clusterLoggingEnabledTypesPtrType) ToClusterLoggingEnabledTypesPtrOutputWithContext(ctx context.Context) ClusterLoggingEnabledTypesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLoggingEnabledTypesPtrOutput)
}

// The cluster control plane logging configuration for your cluster.
type ClusterLoggingEnabledTypesOutput struct{ *pulumi.OutputState }

func (ClusterLoggingEnabledTypesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLoggingEnabledTypes)(nil)).Elem()
}

func (o ClusterLoggingEnabledTypesOutput) ToClusterLoggingEnabledTypesOutput() ClusterLoggingEnabledTypesOutput {
	return o
}

func (o ClusterLoggingEnabledTypesOutput) ToClusterLoggingEnabledTypesOutputWithContext(ctx context.Context) ClusterLoggingEnabledTypesOutput {
	return o
}

func (o ClusterLoggingEnabledTypesOutput) ToClusterLoggingEnabledTypesPtrOutput() ClusterLoggingEnabledTypesPtrOutput {
	return o.ToClusterLoggingEnabledTypesPtrOutputWithContext(context.Background())
}

func (o ClusterLoggingEnabledTypesOutput) ToClusterLoggingEnabledTypesPtrOutputWithContext(ctx context.Context) ClusterLoggingEnabledTypesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterLoggingEnabledTypes) *ClusterLoggingEnabledTypes {
		return &v
	}).(ClusterLoggingEnabledTypesPtrOutput)
}

// The enabled control plane logs for your cluster. All log types are disabled if the array is empty.
//
// > When updating a resource, you must include this `EnabledTypes` property if the previous CloudFormation template of the resource had it.
func (o ClusterLoggingEnabledTypesOutput) EnabledTypes() ClusterLoggingTypeConfigArrayOutput {
	return o.ApplyT(func(v ClusterLoggingEnabledTypes) []ClusterLoggingTypeConfig { return v.EnabledTypes }).(ClusterLoggingTypeConfigArrayOutput)
}

type ClusterLoggingEnabledTypesPtrOutput struct{ *pulumi.OutputState }

func (ClusterLoggingEnabledTypesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterLoggingEnabledTypes)(nil)).Elem()
}

func (o ClusterLoggingEnabledTypesPtrOutput) ToClusterLoggingEnabledTypesPtrOutput() ClusterLoggingEnabledTypesPtrOutput {
	return o
}

func (o ClusterLoggingEnabledTypesPtrOutput) ToClusterLoggingEnabledTypesPtrOutputWithContext(ctx context.Context) ClusterLoggingEnabledTypesPtrOutput {
	return o
}

func (o ClusterLoggingEnabledTypesPtrOutput) Elem() ClusterLoggingEnabledTypesOutput {
	return o.ApplyT(func(v *ClusterLoggingEnabledTypes) ClusterLoggingEnabledTypes {
		if v != nil {
			return *v
		}
		var ret ClusterLoggingEnabledTypes
		return ret
	}).(ClusterLoggingEnabledTypesOutput)
}

// The enabled control plane logs for your cluster. All log types are disabled if the array is empty.
//
// > When updating a resource, you must include this `EnabledTypes` property if the previous CloudFormation template of the resource had it.
func (o ClusterLoggingEnabledTypesPtrOutput) EnabledTypes() ClusterLoggingTypeConfigArrayOutput {
	return o.ApplyT(func(v *ClusterLoggingEnabledTypes) []ClusterLoggingTypeConfig {
		if v == nil {
			return nil
		}
		return v.EnabledTypes
	}).(ClusterLoggingTypeConfigArrayOutput)
}

// Enabled Logging Type
type ClusterLoggingTypeConfig struct {
	// name of the log type
	Type *ClusterLoggingTypeConfigType `pulumi:"type"`
}

// ClusterLoggingTypeConfigInput is an input type that accepts ClusterLoggingTypeConfigArgs and ClusterLoggingTypeConfigOutput values.
// You can construct a concrete instance of `ClusterLoggingTypeConfigInput` via:
//
//	ClusterLoggingTypeConfigArgs{...}
type ClusterLoggingTypeConfigInput interface {
	pulumi.Input

	ToClusterLoggingTypeConfigOutput() ClusterLoggingTypeConfigOutput
	ToClusterLoggingTypeConfigOutputWithContext(context.Context) ClusterLoggingTypeConfigOutput
}

// Enabled Logging Type
type ClusterLoggingTypeConfigArgs struct {
	// name of the log type
	Type ClusterLoggingTypeConfigTypePtrInput `pulumi:"type"`
}

func (ClusterLoggingTypeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLoggingTypeConfig)(nil)).Elem()
}

func (i ClusterLoggingTypeConfigArgs) ToClusterLoggingTypeConfigOutput() ClusterLoggingTypeConfigOutput {
	return i.ToClusterLoggingTypeConfigOutputWithContext(context.Background())
}

func (i ClusterLoggingTypeConfigArgs) ToClusterLoggingTypeConfigOutputWithContext(ctx context.Context) ClusterLoggingTypeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLoggingTypeConfigOutput)
}

// ClusterLoggingTypeConfigArrayInput is an input type that accepts ClusterLoggingTypeConfigArray and ClusterLoggingTypeConfigArrayOutput values.
// You can construct a concrete instance of `ClusterLoggingTypeConfigArrayInput` via:
//
//	ClusterLoggingTypeConfigArray{ ClusterLoggingTypeConfigArgs{...} }
type ClusterLoggingTypeConfigArrayInput interface {
	pulumi.Input

	ToClusterLoggingTypeConfigArrayOutput() ClusterLoggingTypeConfigArrayOutput
	ToClusterLoggingTypeConfigArrayOutputWithContext(context.Context) ClusterLoggingTypeConfigArrayOutput
}

type ClusterLoggingTypeConfigArray []ClusterLoggingTypeConfigInput

func (ClusterLoggingTypeConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterLoggingTypeConfig)(nil)).Elem()
}

func (i ClusterLoggingTypeConfigArray) ToClusterLoggingTypeConfigArrayOutput() ClusterLoggingTypeConfigArrayOutput {
	return i.ToClusterLoggingTypeConfigArrayOutputWithContext(context.Background())
}

func (i ClusterLoggingTypeConfigArray) ToClusterLoggingTypeConfigArrayOutputWithContext(ctx context.Context) ClusterLoggingTypeConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLoggingTypeConfigArrayOutput)
}

// Enabled Logging Type
type ClusterLoggingTypeConfigOutput struct{ *pulumi.OutputState }

func (ClusterLoggingTypeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLoggingTypeConfig)(nil)).Elem()
}

func (o ClusterLoggingTypeConfigOutput) ToClusterLoggingTypeConfigOutput() ClusterLoggingTypeConfigOutput {
	return o
}

func (o ClusterLoggingTypeConfigOutput) ToClusterLoggingTypeConfigOutputWithContext(ctx context.Context) ClusterLoggingTypeConfigOutput {
	return o
}

// name of the log type
func (o ClusterLoggingTypeConfigOutput) Type() ClusterLoggingTypeConfigTypePtrOutput {
	return o.ApplyT(func(v ClusterLoggingTypeConfig) *ClusterLoggingTypeConfigType { return v.Type }).(ClusterLoggingTypeConfigTypePtrOutput)
}

type ClusterLoggingTypeConfigArrayOutput struct{ *pulumi.OutputState }

func (ClusterLoggingTypeConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterLoggingTypeConfig)(nil)).Elem()
}

func (o ClusterLoggingTypeConfigArrayOutput) ToClusterLoggingTypeConfigArrayOutput() ClusterLoggingTypeConfigArrayOutput {
	return o
}

func (o ClusterLoggingTypeConfigArrayOutput) ToClusterLoggingTypeConfigArrayOutputWithContext(ctx context.Context) ClusterLoggingTypeConfigArrayOutput {
	return o
}

func (o ClusterLoggingTypeConfigArrayOutput) Index(i pulumi.IntInput) ClusterLoggingTypeConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterLoggingTypeConfig {
		return vs[0].([]ClusterLoggingTypeConfig)[vs[1].(int)]
	}).(ClusterLoggingTypeConfigOutput)
}

// An object representing the Outpost configuration to use for AWS EKS outpost cluster.
type ClusterOutpostConfig struct {
	// Specify the Instance type of the machines that should be used to create your cluster.
	ControlPlaneInstanceType string `pulumi:"controlPlaneInstanceType"`
	// Specify the placement group of the control plane machines for your cluster.
	ControlPlanePlacement *ClusterControlPlanePlacement `pulumi:"controlPlanePlacement"`
	// Specify one or more Arn(s) of Outpost(s) on which you would like to create your cluster.
	OutpostArns []string `pulumi:"outpostArns"`
}

// ClusterOutpostConfigInput is an input type that accepts ClusterOutpostConfigArgs and ClusterOutpostConfigOutput values.
// You can construct a concrete instance of `ClusterOutpostConfigInput` via:
//
//	ClusterOutpostConfigArgs{...}
type ClusterOutpostConfigInput interface {
	pulumi.Input

	ToClusterOutpostConfigOutput() ClusterOutpostConfigOutput
	ToClusterOutpostConfigOutputWithContext(context.Context) ClusterOutpostConfigOutput
}

// An object representing the Outpost configuration to use for AWS EKS outpost cluster.
type ClusterOutpostConfigArgs struct {
	// Specify the Instance type of the machines that should be used to create your cluster.
	ControlPlaneInstanceType pulumi.StringInput `pulumi:"controlPlaneInstanceType"`
	// Specify the placement group of the control plane machines for your cluster.
	ControlPlanePlacement ClusterControlPlanePlacementPtrInput `pulumi:"controlPlanePlacement"`
	// Specify one or more Arn(s) of Outpost(s) on which you would like to create your cluster.
	OutpostArns pulumi.StringArrayInput `pulumi:"outpostArns"`
}

func (ClusterOutpostConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterOutpostConfig)(nil)).Elem()
}

func (i ClusterOutpostConfigArgs) ToClusterOutpostConfigOutput() ClusterOutpostConfigOutput {
	return i.ToClusterOutpostConfigOutputWithContext(context.Background())
}

func (i ClusterOutpostConfigArgs) ToClusterOutpostConfigOutputWithContext(ctx context.Context) ClusterOutpostConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutpostConfigOutput)
}

func (i ClusterOutpostConfigArgs) ToClusterOutpostConfigPtrOutput() ClusterOutpostConfigPtrOutput {
	return i.ToClusterOutpostConfigPtrOutputWithContext(context.Background())
}

func (i ClusterOutpostConfigArgs) ToClusterOutpostConfigPtrOutputWithContext(ctx context.Context) ClusterOutpostConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutpostConfigOutput).ToClusterOutpostConfigPtrOutputWithContext(ctx)
}

// ClusterOutpostConfigPtrInput is an input type that accepts ClusterOutpostConfigArgs, ClusterOutpostConfigPtr and ClusterOutpostConfigPtrOutput values.
// You can construct a concrete instance of `ClusterOutpostConfigPtrInput` via:
//
//	        ClusterOutpostConfigArgs{...}
//
//	or:
//
//	        nil
type ClusterOutpostConfigPtrInput interface {
	pulumi.Input

	ToClusterOutpostConfigPtrOutput() ClusterOutpostConfigPtrOutput
	ToClusterOutpostConfigPtrOutputWithContext(context.Context) ClusterOutpostConfigPtrOutput
}

type clusterOutpostConfigPtrType ClusterOutpostConfigArgs

func ClusterOutpostConfigPtr(v *ClusterOutpostConfigArgs) ClusterOutpostConfigPtrInput {
	return (*clusterOutpostConfigPtrType)(v)
}

func (*clusterOutpostConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterOutpostConfig)(nil)).Elem()
}

func (i *clusterOutpostConfigPtrType) ToClusterOutpostConfigPtrOutput() ClusterOutpostConfigPtrOutput {
	return i.ToClusterOutpostConfigPtrOutputWithContext(context.Background())
}

func (i *clusterOutpostConfigPtrType) ToClusterOutpostConfigPtrOutputWithContext(ctx context.Context) ClusterOutpostConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutpostConfigPtrOutput)
}

// An object representing the Outpost configuration to use for AWS EKS outpost cluster.
type ClusterOutpostConfigOutput struct{ *pulumi.OutputState }

func (ClusterOutpostConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterOutpostConfig)(nil)).Elem()
}

func (o ClusterOutpostConfigOutput) ToClusterOutpostConfigOutput() ClusterOutpostConfigOutput {
	return o
}

func (o ClusterOutpostConfigOutput) ToClusterOutpostConfigOutputWithContext(ctx context.Context) ClusterOutpostConfigOutput {
	return o
}

func (o ClusterOutpostConfigOutput) ToClusterOutpostConfigPtrOutput() ClusterOutpostConfigPtrOutput {
	return o.ToClusterOutpostConfigPtrOutputWithContext(context.Background())
}

func (o ClusterOutpostConfigOutput) ToClusterOutpostConfigPtrOutputWithContext(ctx context.Context) ClusterOutpostConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterOutpostConfig) *ClusterOutpostConfig {
		return &v
	}).(ClusterOutpostConfigPtrOutput)
}

// Specify the Instance type of the machines that should be used to create your cluster.
func (o ClusterOutpostConfigOutput) ControlPlaneInstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterOutpostConfig) string { return v.ControlPlaneInstanceType }).(pulumi.StringOutput)
}

// Specify the placement group of the control plane machines for your cluster.
func (o ClusterOutpostConfigOutput) ControlPlanePlacement() ClusterControlPlanePlacementPtrOutput {
	return o.ApplyT(func(v ClusterOutpostConfig) *ClusterControlPlanePlacement { return v.ControlPlanePlacement }).(ClusterControlPlanePlacementPtrOutput)
}

// Specify one or more Arn(s) of Outpost(s) on which you would like to create your cluster.
func (o ClusterOutpostConfigOutput) OutpostArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterOutpostConfig) []string { return v.OutpostArns }).(pulumi.StringArrayOutput)
}

type ClusterOutpostConfigPtrOutput struct{ *pulumi.OutputState }

func (ClusterOutpostConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterOutpostConfig)(nil)).Elem()
}

func (o ClusterOutpostConfigPtrOutput) ToClusterOutpostConfigPtrOutput() ClusterOutpostConfigPtrOutput {
	return o
}

func (o ClusterOutpostConfigPtrOutput) ToClusterOutpostConfigPtrOutputWithContext(ctx context.Context) ClusterOutpostConfigPtrOutput {
	return o
}

func (o ClusterOutpostConfigPtrOutput) Elem() ClusterOutpostConfigOutput {
	return o.ApplyT(func(v *ClusterOutpostConfig) ClusterOutpostConfig {
		if v != nil {
			return *v
		}
		var ret ClusterOutpostConfig
		return ret
	}).(ClusterOutpostConfigOutput)
}

// Specify the Instance type of the machines that should be used to create your cluster.
func (o ClusterOutpostConfigPtrOutput) ControlPlaneInstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterOutpostConfig) *string {
		if v == nil {
			return nil
		}
		return &v.ControlPlaneInstanceType
	}).(pulumi.StringPtrOutput)
}

// Specify the placement group of the control plane machines for your cluster.
func (o ClusterOutpostConfigPtrOutput) ControlPlanePlacement() ClusterControlPlanePlacementPtrOutput {
	return o.ApplyT(func(v *ClusterOutpostConfig) *ClusterControlPlanePlacement {
		if v == nil {
			return nil
		}
		return v.ControlPlanePlacement
	}).(ClusterControlPlanePlacementPtrOutput)
}

// Specify one or more Arn(s) of Outpost(s) on which you would like to create your cluster.
func (o ClusterOutpostConfigPtrOutput) OutpostArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClusterOutpostConfig) []string {
		if v == nil {
			return nil
		}
		return v.OutpostArns
	}).(pulumi.StringArrayOutput)
}

type ClusterProvider struct {
	// Amazon Resource Name (ARN) or alias of the KMS key. The KMS key must be symmetric, created in the same region as the cluster, and if the KMS key was created in a different account, the user must have access to the KMS key.
	KeyArn *string `pulumi:"keyArn"`
}

// ClusterProviderInput is an input type that accepts ClusterProviderArgs and ClusterProviderOutput values.
// You can construct a concrete instance of `ClusterProviderInput` via:
//
//	ClusterProviderArgs{...}
type ClusterProviderInput interface {
	pulumi.Input

	ToClusterProviderOutput() ClusterProviderOutput
	ToClusterProviderOutputWithContext(context.Context) ClusterProviderOutput
}

type ClusterProviderArgs struct {
	// Amazon Resource Name (ARN) or alias of the KMS key. The KMS key must be symmetric, created in the same region as the cluster, and if the KMS key was created in a different account, the user must have access to the KMS key.
	KeyArn pulumi.StringPtrInput `pulumi:"keyArn"`
}

func (ClusterProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterProvider)(nil)).Elem()
}

func (i ClusterProviderArgs) ToClusterProviderOutput() ClusterProviderOutput {
	return i.ToClusterProviderOutputWithContext(context.Background())
}

func (i ClusterProviderArgs) ToClusterProviderOutputWithContext(ctx context.Context) ClusterProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterProviderOutput)
}

func (i ClusterProviderArgs) ToClusterProviderPtrOutput() ClusterProviderPtrOutput {
	return i.ToClusterProviderPtrOutputWithContext(context.Background())
}

func (i ClusterProviderArgs) ToClusterProviderPtrOutputWithContext(ctx context.Context) ClusterProviderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterProviderOutput).ToClusterProviderPtrOutputWithContext(ctx)
}

// ClusterProviderPtrInput is an input type that accepts ClusterProviderArgs, ClusterProviderPtr and ClusterProviderPtrOutput values.
// You can construct a concrete instance of `ClusterProviderPtrInput` via:
//
//	        ClusterProviderArgs{...}
//
//	or:
//
//	        nil
type ClusterProviderPtrInput interface {
	pulumi.Input

	ToClusterProviderPtrOutput() ClusterProviderPtrOutput
	ToClusterProviderPtrOutputWithContext(context.Context) ClusterProviderPtrOutput
}

type clusterProviderPtrType ClusterProviderArgs

func ClusterProviderPtr(v *ClusterProviderArgs) ClusterProviderPtrInput {
	return (*clusterProviderPtrType)(v)
}

func (*clusterProviderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterProvider)(nil)).Elem()
}

func (i *clusterProviderPtrType) ToClusterProviderPtrOutput() ClusterProviderPtrOutput {
	return i.ToClusterProviderPtrOutputWithContext(context.Background())
}

func (i *clusterProviderPtrType) ToClusterProviderPtrOutputWithContext(ctx context.Context) ClusterProviderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterProviderPtrOutput)
}

type ClusterProviderOutput struct{ *pulumi.OutputState }

func (ClusterProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterProvider)(nil)).Elem()
}

func (o ClusterProviderOutput) ToClusterProviderOutput() ClusterProviderOutput {
	return o
}

func (o ClusterProviderOutput) ToClusterProviderOutputWithContext(ctx context.Context) ClusterProviderOutput {
	return o
}

func (o ClusterProviderOutput) ToClusterProviderPtrOutput() ClusterProviderPtrOutput {
	return o.ToClusterProviderPtrOutputWithContext(context.Background())
}

func (o ClusterProviderOutput) ToClusterProviderPtrOutputWithContext(ctx context.Context) ClusterProviderPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterProvider) *ClusterProvider {
		return &v
	}).(ClusterProviderPtrOutput)
}

// Amazon Resource Name (ARN) or alias of the KMS key. The KMS key must be symmetric, created in the same region as the cluster, and if the KMS key was created in a different account, the user must have access to the KMS key.
func (o ClusterProviderOutput) KeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterProvider) *string { return v.KeyArn }).(pulumi.StringPtrOutput)
}

type ClusterProviderPtrOutput struct{ *pulumi.OutputState }

func (ClusterProviderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterProvider)(nil)).Elem()
}

func (o ClusterProviderPtrOutput) ToClusterProviderPtrOutput() ClusterProviderPtrOutput {
	return o
}

func (o ClusterProviderPtrOutput) ToClusterProviderPtrOutputWithContext(ctx context.Context) ClusterProviderPtrOutput {
	return o
}

func (o ClusterProviderPtrOutput) Elem() ClusterProviderOutput {
	return o.ApplyT(func(v *ClusterProvider) ClusterProvider {
		if v != nil {
			return *v
		}
		var ret ClusterProvider
		return ret
	}).(ClusterProviderOutput)
}

// Amazon Resource Name (ARN) or alias of the KMS key. The KMS key must be symmetric, created in the same region as the cluster, and if the KMS key was created in a different account, the user must have access to the KMS key.
func (o ClusterProviderPtrOutput) KeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterProvider) *string {
		if v == nil {
			return nil
		}
		return v.KeyArn
	}).(pulumi.StringPtrOutput)
}

// Configuration fields for specifying on-premises node and pod CIDRs that are external to the VPC passed during cluster creation.
type ClusterRemoteNetworkConfig struct {
	// Network configuration of nodes run on-premises with EKS Hybrid Nodes.
	RemoteNodeNetworks []ClusterRemoteNodeNetwork `pulumi:"remoteNodeNetworks"`
	// Network configuration of pods run on-premises with EKS Hybrid Nodes.
	RemotePodNetworks []ClusterRemotePodNetwork `pulumi:"remotePodNetworks"`
}

// ClusterRemoteNetworkConfigInput is an input type that accepts ClusterRemoteNetworkConfigArgs and ClusterRemoteNetworkConfigOutput values.
// You can construct a concrete instance of `ClusterRemoteNetworkConfigInput` via:
//
//	ClusterRemoteNetworkConfigArgs{...}
type ClusterRemoteNetworkConfigInput interface {
	pulumi.Input

	ToClusterRemoteNetworkConfigOutput() ClusterRemoteNetworkConfigOutput
	ToClusterRemoteNetworkConfigOutputWithContext(context.Context) ClusterRemoteNetworkConfigOutput
}

// Configuration fields for specifying on-premises node and pod CIDRs that are external to the VPC passed during cluster creation.
type ClusterRemoteNetworkConfigArgs struct {
	// Network configuration of nodes run on-premises with EKS Hybrid Nodes.
	RemoteNodeNetworks ClusterRemoteNodeNetworkArrayInput `pulumi:"remoteNodeNetworks"`
	// Network configuration of pods run on-premises with EKS Hybrid Nodes.
	RemotePodNetworks ClusterRemotePodNetworkArrayInput `pulumi:"remotePodNetworks"`
}

func (ClusterRemoteNetworkConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterRemoteNetworkConfig)(nil)).Elem()
}

func (i ClusterRemoteNetworkConfigArgs) ToClusterRemoteNetworkConfigOutput() ClusterRemoteNetworkConfigOutput {
	return i.ToClusterRemoteNetworkConfigOutputWithContext(context.Background())
}

func (i ClusterRemoteNetworkConfigArgs) ToClusterRemoteNetworkConfigOutputWithContext(ctx context.Context) ClusterRemoteNetworkConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterRemoteNetworkConfigOutput)
}

func (i ClusterRemoteNetworkConfigArgs) ToClusterRemoteNetworkConfigPtrOutput() ClusterRemoteNetworkConfigPtrOutput {
	return i.ToClusterRemoteNetworkConfigPtrOutputWithContext(context.Background())
}

func (i ClusterRemoteNetworkConfigArgs) ToClusterRemoteNetworkConfigPtrOutputWithContext(ctx context.Context) ClusterRemoteNetworkConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterRemoteNetworkConfigOutput).ToClusterRemoteNetworkConfigPtrOutputWithContext(ctx)
}

// ClusterRemoteNetworkConfigPtrInput is an input type that accepts ClusterRemoteNetworkConfigArgs, ClusterRemoteNetworkConfigPtr and ClusterRemoteNetworkConfigPtrOutput values.
// You can construct a concrete instance of `ClusterRemoteNetworkConfigPtrInput` via:
//
//	        ClusterRemoteNetworkConfigArgs{...}
//
//	or:
//
//	        nil
type ClusterRemoteNetworkConfigPtrInput interface {
	pulumi.Input

	ToClusterRemoteNetworkConfigPtrOutput() ClusterRemoteNetworkConfigPtrOutput
	ToClusterRemoteNetworkConfigPtrOutputWithContext(context.Context) ClusterRemoteNetworkConfigPtrOutput
}

type clusterRemoteNetworkConfigPtrType ClusterRemoteNetworkConfigArgs

func ClusterRemoteNetworkConfigPtr(v *ClusterRemoteNetworkConfigArgs) ClusterRemoteNetworkConfigPtrInput {
	return (*clusterRemoteNetworkConfigPtrType)(v)
}

func (*clusterRemoteNetworkConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterRemoteNetworkConfig)(nil)).Elem()
}

func (i *clusterRemoteNetworkConfigPtrType) ToClusterRemoteNetworkConfigPtrOutput() ClusterRemoteNetworkConfigPtrOutput {
	return i.ToClusterRemoteNetworkConfigPtrOutputWithContext(context.Background())
}

func (i *clusterRemoteNetworkConfigPtrType) ToClusterRemoteNetworkConfigPtrOutputWithContext(ctx context.Context) ClusterRemoteNetworkConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterRemoteNetworkConfigPtrOutput)
}

// Configuration fields for specifying on-premises node and pod CIDRs that are external to the VPC passed during cluster creation.
type ClusterRemoteNetworkConfigOutput struct{ *pulumi.OutputState }

func (ClusterRemoteNetworkConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterRemoteNetworkConfig)(nil)).Elem()
}

func (o ClusterRemoteNetworkConfigOutput) ToClusterRemoteNetworkConfigOutput() ClusterRemoteNetworkConfigOutput {
	return o
}

func (o ClusterRemoteNetworkConfigOutput) ToClusterRemoteNetworkConfigOutputWithContext(ctx context.Context) ClusterRemoteNetworkConfigOutput {
	return o
}

func (o ClusterRemoteNetworkConfigOutput) ToClusterRemoteNetworkConfigPtrOutput() ClusterRemoteNetworkConfigPtrOutput {
	return o.ToClusterRemoteNetworkConfigPtrOutputWithContext(context.Background())
}

func (o ClusterRemoteNetworkConfigOutput) ToClusterRemoteNetworkConfigPtrOutputWithContext(ctx context.Context) ClusterRemoteNetworkConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterRemoteNetworkConfig) *ClusterRemoteNetworkConfig {
		return &v
	}).(ClusterRemoteNetworkConfigPtrOutput)
}

// Network configuration of nodes run on-premises with EKS Hybrid Nodes.
func (o ClusterRemoteNetworkConfigOutput) RemoteNodeNetworks() ClusterRemoteNodeNetworkArrayOutput {
	return o.ApplyT(func(v ClusterRemoteNetworkConfig) []ClusterRemoteNodeNetwork { return v.RemoteNodeNetworks }).(ClusterRemoteNodeNetworkArrayOutput)
}

// Network configuration of pods run on-premises with EKS Hybrid Nodes.
func (o ClusterRemoteNetworkConfigOutput) RemotePodNetworks() ClusterRemotePodNetworkArrayOutput {
	return o.ApplyT(func(v ClusterRemoteNetworkConfig) []ClusterRemotePodNetwork { return v.RemotePodNetworks }).(ClusterRemotePodNetworkArrayOutput)
}

type ClusterRemoteNetworkConfigPtrOutput struct{ *pulumi.OutputState }

func (ClusterRemoteNetworkConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterRemoteNetworkConfig)(nil)).Elem()
}

func (o ClusterRemoteNetworkConfigPtrOutput) ToClusterRemoteNetworkConfigPtrOutput() ClusterRemoteNetworkConfigPtrOutput {
	return o
}

func (o ClusterRemoteNetworkConfigPtrOutput) ToClusterRemoteNetworkConfigPtrOutputWithContext(ctx context.Context) ClusterRemoteNetworkConfigPtrOutput {
	return o
}

func (o ClusterRemoteNetworkConfigPtrOutput) Elem() ClusterRemoteNetworkConfigOutput {
	return o.ApplyT(func(v *ClusterRemoteNetworkConfig) ClusterRemoteNetworkConfig {
		if v != nil {
			return *v
		}
		var ret ClusterRemoteNetworkConfig
		return ret
	}).(ClusterRemoteNetworkConfigOutput)
}

// Network configuration of nodes run on-premises with EKS Hybrid Nodes.
func (o ClusterRemoteNetworkConfigPtrOutput) RemoteNodeNetworks() ClusterRemoteNodeNetworkArrayOutput {
	return o.ApplyT(func(v *ClusterRemoteNetworkConfig) []ClusterRemoteNodeNetwork {
		if v == nil {
			return nil
		}
		return v.RemoteNodeNetworks
	}).(ClusterRemoteNodeNetworkArrayOutput)
}

// Network configuration of pods run on-premises with EKS Hybrid Nodes.
func (o ClusterRemoteNetworkConfigPtrOutput) RemotePodNetworks() ClusterRemotePodNetworkArrayOutput {
	return o.ApplyT(func(v *ClusterRemoteNetworkConfig) []ClusterRemotePodNetwork {
		if v == nil {
			return nil
		}
		return v.RemotePodNetworks
	}).(ClusterRemotePodNetworkArrayOutput)
}

// Network configuration of nodes run on-premises with EKS Hybrid Nodes.
type ClusterRemoteNodeNetwork struct {
	// Specifies the list of remote node CIDRs.
	Cidrs []string `pulumi:"cidrs"`
}

// ClusterRemoteNodeNetworkInput is an input type that accepts ClusterRemoteNodeNetworkArgs and ClusterRemoteNodeNetworkOutput values.
// You can construct a concrete instance of `ClusterRemoteNodeNetworkInput` via:
//
//	ClusterRemoteNodeNetworkArgs{...}
type ClusterRemoteNodeNetworkInput interface {
	pulumi.Input

	ToClusterRemoteNodeNetworkOutput() ClusterRemoteNodeNetworkOutput
	ToClusterRemoteNodeNetworkOutputWithContext(context.Context) ClusterRemoteNodeNetworkOutput
}

// Network configuration of nodes run on-premises with EKS Hybrid Nodes.
type ClusterRemoteNodeNetworkArgs struct {
	// Specifies the list of remote node CIDRs.
	Cidrs pulumi.StringArrayInput `pulumi:"cidrs"`
}

func (ClusterRemoteNodeNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterRemoteNodeNetwork)(nil)).Elem()
}

func (i ClusterRemoteNodeNetworkArgs) ToClusterRemoteNodeNetworkOutput() ClusterRemoteNodeNetworkOutput {
	return i.ToClusterRemoteNodeNetworkOutputWithContext(context.Background())
}

func (i ClusterRemoteNodeNetworkArgs) ToClusterRemoteNodeNetworkOutputWithContext(ctx context.Context) ClusterRemoteNodeNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterRemoteNodeNetworkOutput)
}

// ClusterRemoteNodeNetworkArrayInput is an input type that accepts ClusterRemoteNodeNetworkArray and ClusterRemoteNodeNetworkArrayOutput values.
// You can construct a concrete instance of `ClusterRemoteNodeNetworkArrayInput` via:
//
//	ClusterRemoteNodeNetworkArray{ ClusterRemoteNodeNetworkArgs{...} }
type ClusterRemoteNodeNetworkArrayInput interface {
	pulumi.Input

	ToClusterRemoteNodeNetworkArrayOutput() ClusterRemoteNodeNetworkArrayOutput
	ToClusterRemoteNodeNetworkArrayOutputWithContext(context.Context) ClusterRemoteNodeNetworkArrayOutput
}

type ClusterRemoteNodeNetworkArray []ClusterRemoteNodeNetworkInput

func (ClusterRemoteNodeNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterRemoteNodeNetwork)(nil)).Elem()
}

func (i ClusterRemoteNodeNetworkArray) ToClusterRemoteNodeNetworkArrayOutput() ClusterRemoteNodeNetworkArrayOutput {
	return i.ToClusterRemoteNodeNetworkArrayOutputWithContext(context.Background())
}

func (i ClusterRemoteNodeNetworkArray) ToClusterRemoteNodeNetworkArrayOutputWithContext(ctx context.Context) ClusterRemoteNodeNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterRemoteNodeNetworkArrayOutput)
}

// Network configuration of nodes run on-premises with EKS Hybrid Nodes.
type ClusterRemoteNodeNetworkOutput struct{ *pulumi.OutputState }

func (ClusterRemoteNodeNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterRemoteNodeNetwork)(nil)).Elem()
}

func (o ClusterRemoteNodeNetworkOutput) ToClusterRemoteNodeNetworkOutput() ClusterRemoteNodeNetworkOutput {
	return o
}

func (o ClusterRemoteNodeNetworkOutput) ToClusterRemoteNodeNetworkOutputWithContext(ctx context.Context) ClusterRemoteNodeNetworkOutput {
	return o
}

// Specifies the list of remote node CIDRs.
func (o ClusterRemoteNodeNetworkOutput) Cidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterRemoteNodeNetwork) []string { return v.Cidrs }).(pulumi.StringArrayOutput)
}

type ClusterRemoteNodeNetworkArrayOutput struct{ *pulumi.OutputState }

func (ClusterRemoteNodeNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterRemoteNodeNetwork)(nil)).Elem()
}

func (o ClusterRemoteNodeNetworkArrayOutput) ToClusterRemoteNodeNetworkArrayOutput() ClusterRemoteNodeNetworkArrayOutput {
	return o
}

func (o ClusterRemoteNodeNetworkArrayOutput) ToClusterRemoteNodeNetworkArrayOutputWithContext(ctx context.Context) ClusterRemoteNodeNetworkArrayOutput {
	return o
}

func (o ClusterRemoteNodeNetworkArrayOutput) Index(i pulumi.IntInput) ClusterRemoteNodeNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterRemoteNodeNetwork {
		return vs[0].([]ClusterRemoteNodeNetwork)[vs[1].(int)]
	}).(ClusterRemoteNodeNetworkOutput)
}

// Network configuration of pods run on-premises with EKS Hybrid Nodes.
type ClusterRemotePodNetwork struct {
	// Specifies the list of remote pod CIDRs.
	Cidrs []string `pulumi:"cidrs"`
}

// ClusterRemotePodNetworkInput is an input type that accepts ClusterRemotePodNetworkArgs and ClusterRemotePodNetworkOutput values.
// You can construct a concrete instance of `ClusterRemotePodNetworkInput` via:
//
//	ClusterRemotePodNetworkArgs{...}
type ClusterRemotePodNetworkInput interface {
	pulumi.Input

	ToClusterRemotePodNetworkOutput() ClusterRemotePodNetworkOutput
	ToClusterRemotePodNetworkOutputWithContext(context.Context) ClusterRemotePodNetworkOutput
}

// Network configuration of pods run on-premises with EKS Hybrid Nodes.
type ClusterRemotePodNetworkArgs struct {
	// Specifies the list of remote pod CIDRs.
	Cidrs pulumi.StringArrayInput `pulumi:"cidrs"`
}

func (ClusterRemotePodNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterRemotePodNetwork)(nil)).Elem()
}

func (i ClusterRemotePodNetworkArgs) ToClusterRemotePodNetworkOutput() ClusterRemotePodNetworkOutput {
	return i.ToClusterRemotePodNetworkOutputWithContext(context.Background())
}

func (i ClusterRemotePodNetworkArgs) ToClusterRemotePodNetworkOutputWithContext(ctx context.Context) ClusterRemotePodNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterRemotePodNetworkOutput)
}

// ClusterRemotePodNetworkArrayInput is an input type that accepts ClusterRemotePodNetworkArray and ClusterRemotePodNetworkArrayOutput values.
// You can construct a concrete instance of `ClusterRemotePodNetworkArrayInput` via:
//
//	ClusterRemotePodNetworkArray{ ClusterRemotePodNetworkArgs{...} }
type ClusterRemotePodNetworkArrayInput interface {
	pulumi.Input

	ToClusterRemotePodNetworkArrayOutput() ClusterRemotePodNetworkArrayOutput
	ToClusterRemotePodNetworkArrayOutputWithContext(context.Context) ClusterRemotePodNetworkArrayOutput
}

type ClusterRemotePodNetworkArray []ClusterRemotePodNetworkInput

func (ClusterRemotePodNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterRemotePodNetwork)(nil)).Elem()
}

func (i ClusterRemotePodNetworkArray) ToClusterRemotePodNetworkArrayOutput() ClusterRemotePodNetworkArrayOutput {
	return i.ToClusterRemotePodNetworkArrayOutputWithContext(context.Background())
}

func (i ClusterRemotePodNetworkArray) ToClusterRemotePodNetworkArrayOutputWithContext(ctx context.Context) ClusterRemotePodNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterRemotePodNetworkArrayOutput)
}

// Network configuration of pods run on-premises with EKS Hybrid Nodes.
type ClusterRemotePodNetworkOutput struct{ *pulumi.OutputState }

func (ClusterRemotePodNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterRemotePodNetwork)(nil)).Elem()
}

func (o ClusterRemotePodNetworkOutput) ToClusterRemotePodNetworkOutput() ClusterRemotePodNetworkOutput {
	return o
}

func (o ClusterRemotePodNetworkOutput) ToClusterRemotePodNetworkOutputWithContext(ctx context.Context) ClusterRemotePodNetworkOutput {
	return o
}

// Specifies the list of remote pod CIDRs.
func (o ClusterRemotePodNetworkOutput) Cidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterRemotePodNetwork) []string { return v.Cidrs }).(pulumi.StringArrayOutput)
}

type ClusterRemotePodNetworkArrayOutput struct{ *pulumi.OutputState }

func (ClusterRemotePodNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterRemotePodNetwork)(nil)).Elem()
}

func (o ClusterRemotePodNetworkArrayOutput) ToClusterRemotePodNetworkArrayOutput() ClusterRemotePodNetworkArrayOutput {
	return o
}

func (o ClusterRemotePodNetworkArrayOutput) ToClusterRemotePodNetworkArrayOutputWithContext(ctx context.Context) ClusterRemotePodNetworkArrayOutput {
	return o
}

func (o ClusterRemotePodNetworkArrayOutput) Index(i pulumi.IntInput) ClusterRemotePodNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterRemotePodNetwork {
		return vs[0].([]ClusterRemotePodNetwork)[vs[1].(int)]
	}).(ClusterRemotePodNetworkOutput)
}

// An object representing the VPC configuration to use for an Amazon EKS cluster.
type ClusterResourcesVpcConfig struct {
	// Set this value to true to enable private access for your cluster's Kubernetes API server endpoint. If you enable private access, Kubernetes API requests from within your cluster's VPC use the private VPC endpoint. The default value for this parameter is false, which disables private access for your Kubernetes API server. If you disable private access and you have nodes or AWS Fargate pods in the cluster, then ensure that publicAccessCidrs includes the necessary CIDR blocks for communication with the nodes or Fargate pods.
	EndpointPrivateAccess *bool `pulumi:"endpointPrivateAccess"`
	// Set this value to false to disable public access to your cluster's Kubernetes API server endpoint. If you disable public access, your cluster's Kubernetes API server can only receive requests from within the cluster VPC. The default value for this parameter is true, which enables public access for your Kubernetes API server.
	EndpointPublicAccess *bool `pulumi:"endpointPublicAccess"`
	// The CIDR blocks that are allowed access to your cluster's public Kubernetes API server endpoint. Communication to the endpoint from addresses outside of the CIDR blocks that you specify is denied. The default value is 0.0.0.0/0. If you've disabled private endpoint access and you have nodes or AWS Fargate pods in the cluster, then ensure that you specify the necessary CIDR blocks.
	PublicAccessCidrs []string `pulumi:"publicAccessCidrs"`
	// Specify one or more security groups for the cross-account elastic network interfaces that Amazon EKS creates to use to allow communication between your worker nodes and the Kubernetes control plane. If you don't specify a security group, the default security group for your VPC is used.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// Specify subnets for your Amazon EKS nodes. Amazon EKS creates cross-account elastic network interfaces in these subnets to allow communication between your nodes and the Kubernetes control plane.
	SubnetIds []string `pulumi:"subnetIds"`
}

// ClusterResourcesVpcConfigInput is an input type that accepts ClusterResourcesVpcConfigArgs and ClusterResourcesVpcConfigOutput values.
// You can construct a concrete instance of `ClusterResourcesVpcConfigInput` via:
//
//	ClusterResourcesVpcConfigArgs{...}
type ClusterResourcesVpcConfigInput interface {
	pulumi.Input

	ToClusterResourcesVpcConfigOutput() ClusterResourcesVpcConfigOutput
	ToClusterResourcesVpcConfigOutputWithContext(context.Context) ClusterResourcesVpcConfigOutput
}

// An object representing the VPC configuration to use for an Amazon EKS cluster.
type ClusterResourcesVpcConfigArgs struct {
	// Set this value to true to enable private access for your cluster's Kubernetes API server endpoint. If you enable private access, Kubernetes API requests from within your cluster's VPC use the private VPC endpoint. The default value for this parameter is false, which disables private access for your Kubernetes API server. If you disable private access and you have nodes or AWS Fargate pods in the cluster, then ensure that publicAccessCidrs includes the necessary CIDR blocks for communication with the nodes or Fargate pods.
	EndpointPrivateAccess pulumi.BoolPtrInput `pulumi:"endpointPrivateAccess"`
	// Set this value to false to disable public access to your cluster's Kubernetes API server endpoint. If you disable public access, your cluster's Kubernetes API server can only receive requests from within the cluster VPC. The default value for this parameter is true, which enables public access for your Kubernetes API server.
	EndpointPublicAccess pulumi.BoolPtrInput `pulumi:"endpointPublicAccess"`
	// The CIDR blocks that are allowed access to your cluster's public Kubernetes API server endpoint. Communication to the endpoint from addresses outside of the CIDR blocks that you specify is denied. The default value is 0.0.0.0/0. If you've disabled private endpoint access and you have nodes or AWS Fargate pods in the cluster, then ensure that you specify the necessary CIDR blocks.
	PublicAccessCidrs pulumi.StringArrayInput `pulumi:"publicAccessCidrs"`
	// Specify one or more security groups for the cross-account elastic network interfaces that Amazon EKS creates to use to allow communication between your worker nodes and the Kubernetes control plane. If you don't specify a security group, the default security group for your VPC is used.
	SecurityGroupIds pulumi.StringArrayInput `pulumi:"securityGroupIds"`
	// Specify subnets for your Amazon EKS nodes. Amazon EKS creates cross-account elastic network interfaces in these subnets to allow communication between your nodes and the Kubernetes control plane.
	SubnetIds pulumi.StringArrayInput `pulumi:"subnetIds"`
}

func (ClusterResourcesVpcConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterResourcesVpcConfig)(nil)).Elem()
}

func (i ClusterResourcesVpcConfigArgs) ToClusterResourcesVpcConfigOutput() ClusterResourcesVpcConfigOutput {
	return i.ToClusterResourcesVpcConfigOutputWithContext(context.Background())
}

func (i ClusterResourcesVpcConfigArgs) ToClusterResourcesVpcConfigOutputWithContext(ctx context.Context) ClusterResourcesVpcConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterResourcesVpcConfigOutput)
}

// An object representing the VPC configuration to use for an Amazon EKS cluster.
type ClusterResourcesVpcConfigOutput struct{ *pulumi.OutputState }

func (ClusterResourcesVpcConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterResourcesVpcConfig)(nil)).Elem()
}

func (o ClusterResourcesVpcConfigOutput) ToClusterResourcesVpcConfigOutput() ClusterResourcesVpcConfigOutput {
	return o
}

func (o ClusterResourcesVpcConfigOutput) ToClusterResourcesVpcConfigOutputWithContext(ctx context.Context) ClusterResourcesVpcConfigOutput {
	return o
}

// Set this value to true to enable private access for your cluster's Kubernetes API server endpoint. If you enable private access, Kubernetes API requests from within your cluster's VPC use the private VPC endpoint. The default value for this parameter is false, which disables private access for your Kubernetes API server. If you disable private access and you have nodes or AWS Fargate pods in the cluster, then ensure that publicAccessCidrs includes the necessary CIDR blocks for communication with the nodes or Fargate pods.
func (o ClusterResourcesVpcConfigOutput) EndpointPrivateAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterResourcesVpcConfig) *bool { return v.EndpointPrivateAccess }).(pulumi.BoolPtrOutput)
}

// Set this value to false to disable public access to your cluster's Kubernetes API server endpoint. If you disable public access, your cluster's Kubernetes API server can only receive requests from within the cluster VPC. The default value for this parameter is true, which enables public access for your Kubernetes API server.
func (o ClusterResourcesVpcConfigOutput) EndpointPublicAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterResourcesVpcConfig) *bool { return v.EndpointPublicAccess }).(pulumi.BoolPtrOutput)
}

// The CIDR blocks that are allowed access to your cluster's public Kubernetes API server endpoint. Communication to the endpoint from addresses outside of the CIDR blocks that you specify is denied. The default value is 0.0.0.0/0. If you've disabled private endpoint access and you have nodes or AWS Fargate pods in the cluster, then ensure that you specify the necessary CIDR blocks.
func (o ClusterResourcesVpcConfigOutput) PublicAccessCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterResourcesVpcConfig) []string { return v.PublicAccessCidrs }).(pulumi.StringArrayOutput)
}

// Specify one or more security groups for the cross-account elastic network interfaces that Amazon EKS creates to use to allow communication between your worker nodes and the Kubernetes control plane. If you don't specify a security group, the default security group for your VPC is used.
func (o ClusterResourcesVpcConfigOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterResourcesVpcConfig) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// Specify subnets for your Amazon EKS nodes. Amazon EKS creates cross-account elastic network interfaces in these subnets to allow communication between your nodes and the Kubernetes control plane.
func (o ClusterResourcesVpcConfigOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterResourcesVpcConfig) []string { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

type ClusterResourcesVpcConfigPtrOutput struct{ *pulumi.OutputState }

func (ClusterResourcesVpcConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterResourcesVpcConfig)(nil)).Elem()
}

func (o ClusterResourcesVpcConfigPtrOutput) ToClusterResourcesVpcConfigPtrOutput() ClusterResourcesVpcConfigPtrOutput {
	return o
}

func (o ClusterResourcesVpcConfigPtrOutput) ToClusterResourcesVpcConfigPtrOutputWithContext(ctx context.Context) ClusterResourcesVpcConfigPtrOutput {
	return o
}

func (o ClusterResourcesVpcConfigPtrOutput) Elem() ClusterResourcesVpcConfigOutput {
	return o.ApplyT(func(v *ClusterResourcesVpcConfig) ClusterResourcesVpcConfig {
		if v != nil {
			return *v
		}
		var ret ClusterResourcesVpcConfig
		return ret
	}).(ClusterResourcesVpcConfigOutput)
}

// Set this value to true to enable private access for your cluster's Kubernetes API server endpoint. If you enable private access, Kubernetes API requests from within your cluster's VPC use the private VPC endpoint. The default value for this parameter is false, which disables private access for your Kubernetes API server. If you disable private access and you have nodes or AWS Fargate pods in the cluster, then ensure that publicAccessCidrs includes the necessary CIDR blocks for communication with the nodes or Fargate pods.
func (o ClusterResourcesVpcConfigPtrOutput) EndpointPrivateAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterResourcesVpcConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EndpointPrivateAccess
	}).(pulumi.BoolPtrOutput)
}

// Set this value to false to disable public access to your cluster's Kubernetes API server endpoint. If you disable public access, your cluster's Kubernetes API server can only receive requests from within the cluster VPC. The default value for this parameter is true, which enables public access for your Kubernetes API server.
func (o ClusterResourcesVpcConfigPtrOutput) EndpointPublicAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterResourcesVpcConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EndpointPublicAccess
	}).(pulumi.BoolPtrOutput)
}

// The CIDR blocks that are allowed access to your cluster's public Kubernetes API server endpoint. Communication to the endpoint from addresses outside of the CIDR blocks that you specify is denied. The default value is 0.0.0.0/0. If you've disabled private endpoint access and you have nodes or AWS Fargate pods in the cluster, then ensure that you specify the necessary CIDR blocks.
func (o ClusterResourcesVpcConfigPtrOutput) PublicAccessCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClusterResourcesVpcConfig) []string {
		if v == nil {
			return nil
		}
		return v.PublicAccessCidrs
	}).(pulumi.StringArrayOutput)
}

// Specify one or more security groups for the cross-account elastic network interfaces that Amazon EKS creates to use to allow communication between your worker nodes and the Kubernetes control plane. If you don't specify a security group, the default security group for your VPC is used.
func (o ClusterResourcesVpcConfigPtrOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClusterResourcesVpcConfig) []string {
		if v == nil {
			return nil
		}
		return v.SecurityGroupIds
	}).(pulumi.StringArrayOutput)
}

// Specify subnets for your Amazon EKS nodes. Amazon EKS creates cross-account elastic network interfaces in these subnets to allow communication between your nodes and the Kubernetes control plane.
func (o ClusterResourcesVpcConfigPtrOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClusterResourcesVpcConfig) []string {
		if v == nil {
			return nil
		}
		return v.SubnetIds
	}).(pulumi.StringArrayOutput)
}

// Todo: add description
type ClusterStorageConfig struct {
	// Todo: add description
	BlockStorage *ClusterBlockStorage `pulumi:"blockStorage"`
}

// ClusterStorageConfigInput is an input type that accepts ClusterStorageConfigArgs and ClusterStorageConfigOutput values.
// You can construct a concrete instance of `ClusterStorageConfigInput` via:
//
//	ClusterStorageConfigArgs{...}
type ClusterStorageConfigInput interface {
	pulumi.Input

	ToClusterStorageConfigOutput() ClusterStorageConfigOutput
	ToClusterStorageConfigOutputWithContext(context.Context) ClusterStorageConfigOutput
}

// Todo: add description
type ClusterStorageConfigArgs struct {
	// Todo: add description
	BlockStorage ClusterBlockStoragePtrInput `pulumi:"blockStorage"`
}

func (ClusterStorageConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterStorageConfig)(nil)).Elem()
}

func (i ClusterStorageConfigArgs) ToClusterStorageConfigOutput() ClusterStorageConfigOutput {
	return i.ToClusterStorageConfigOutputWithContext(context.Background())
}

func (i ClusterStorageConfigArgs) ToClusterStorageConfigOutputWithContext(ctx context.Context) ClusterStorageConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterStorageConfigOutput)
}

func (i ClusterStorageConfigArgs) ToClusterStorageConfigPtrOutput() ClusterStorageConfigPtrOutput {
	return i.ToClusterStorageConfigPtrOutputWithContext(context.Background())
}

func (i ClusterStorageConfigArgs) ToClusterStorageConfigPtrOutputWithContext(ctx context.Context) ClusterStorageConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterStorageConfigOutput).ToClusterStorageConfigPtrOutputWithContext(ctx)
}

// ClusterStorageConfigPtrInput is an input type that accepts ClusterStorageConfigArgs, ClusterStorageConfigPtr and ClusterStorageConfigPtrOutput values.
// You can construct a concrete instance of `ClusterStorageConfigPtrInput` via:
//
//	        ClusterStorageConfigArgs{...}
//
//	or:
//
//	        nil
type ClusterStorageConfigPtrInput interface {
	pulumi.Input

	ToClusterStorageConfigPtrOutput() ClusterStorageConfigPtrOutput
	ToClusterStorageConfigPtrOutputWithContext(context.Context) ClusterStorageConfigPtrOutput
}

type clusterStorageConfigPtrType ClusterStorageConfigArgs

func ClusterStorageConfigPtr(v *ClusterStorageConfigArgs) ClusterStorageConfigPtrInput {
	return (*clusterStorageConfigPtrType)(v)
}

func (*clusterStorageConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterStorageConfig)(nil)).Elem()
}

func (i *clusterStorageConfigPtrType) ToClusterStorageConfigPtrOutput() ClusterStorageConfigPtrOutput {
	return i.ToClusterStorageConfigPtrOutputWithContext(context.Background())
}

func (i *clusterStorageConfigPtrType) ToClusterStorageConfigPtrOutputWithContext(ctx context.Context) ClusterStorageConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterStorageConfigPtrOutput)
}

// Todo: add description
type ClusterStorageConfigOutput struct{ *pulumi.OutputState }

func (ClusterStorageConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterStorageConfig)(nil)).Elem()
}

func (o ClusterStorageConfigOutput) ToClusterStorageConfigOutput() ClusterStorageConfigOutput {
	return o
}

func (o ClusterStorageConfigOutput) ToClusterStorageConfigOutputWithContext(ctx context.Context) ClusterStorageConfigOutput {
	return o
}

func (o ClusterStorageConfigOutput) ToClusterStorageConfigPtrOutput() ClusterStorageConfigPtrOutput {
	return o.ToClusterStorageConfigPtrOutputWithContext(context.Background())
}

func (o ClusterStorageConfigOutput) ToClusterStorageConfigPtrOutputWithContext(ctx context.Context) ClusterStorageConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterStorageConfig) *ClusterStorageConfig {
		return &v
	}).(ClusterStorageConfigPtrOutput)
}

// Todo: add description
func (o ClusterStorageConfigOutput) BlockStorage() ClusterBlockStoragePtrOutput {
	return o.ApplyT(func(v ClusterStorageConfig) *ClusterBlockStorage { return v.BlockStorage }).(ClusterBlockStoragePtrOutput)
}

type ClusterStorageConfigPtrOutput struct{ *pulumi.OutputState }

func (ClusterStorageConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterStorageConfig)(nil)).Elem()
}

func (o ClusterStorageConfigPtrOutput) ToClusterStorageConfigPtrOutput() ClusterStorageConfigPtrOutput {
	return o
}

func (o ClusterStorageConfigPtrOutput) ToClusterStorageConfigPtrOutputWithContext(ctx context.Context) ClusterStorageConfigPtrOutput {
	return o
}

func (o ClusterStorageConfigPtrOutput) Elem() ClusterStorageConfigOutput {
	return o.ApplyT(func(v *ClusterStorageConfig) ClusterStorageConfig {
		if v != nil {
			return *v
		}
		var ret ClusterStorageConfig
		return ret
	}).(ClusterStorageConfigOutput)
}

// Todo: add description
func (o ClusterStorageConfigPtrOutput) BlockStorage() ClusterBlockStoragePtrOutput {
	return o.ApplyT(func(v *ClusterStorageConfig) *ClusterBlockStorage {
		if v == nil {
			return nil
		}
		return v.BlockStorage
	}).(ClusterBlockStoragePtrOutput)
}

// A key-value pair to associate with a resource.
type ClusterTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// An object representing the Upgrade Policy to use for the cluster.
type ClusterUpgradePolicy struct {
	// Specify the support type for your cluster.
	SupportType *ClusterUpgradePolicySupportType `pulumi:"supportType"`
}

// ClusterUpgradePolicyInput is an input type that accepts ClusterUpgradePolicyArgs and ClusterUpgradePolicyOutput values.
// You can construct a concrete instance of `ClusterUpgradePolicyInput` via:
//
//	ClusterUpgradePolicyArgs{...}
type ClusterUpgradePolicyInput interface {
	pulumi.Input

	ToClusterUpgradePolicyOutput() ClusterUpgradePolicyOutput
	ToClusterUpgradePolicyOutputWithContext(context.Context) ClusterUpgradePolicyOutput
}

// An object representing the Upgrade Policy to use for the cluster.
type ClusterUpgradePolicyArgs struct {
	// Specify the support type for your cluster.
	SupportType ClusterUpgradePolicySupportTypePtrInput `pulumi:"supportType"`
}

func (ClusterUpgradePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterUpgradePolicy)(nil)).Elem()
}

func (i ClusterUpgradePolicyArgs) ToClusterUpgradePolicyOutput() ClusterUpgradePolicyOutput {
	return i.ToClusterUpgradePolicyOutputWithContext(context.Background())
}

func (i ClusterUpgradePolicyArgs) ToClusterUpgradePolicyOutputWithContext(ctx context.Context) ClusterUpgradePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUpgradePolicyOutput)
}

func (i ClusterUpgradePolicyArgs) ToClusterUpgradePolicyPtrOutput() ClusterUpgradePolicyPtrOutput {
	return i.ToClusterUpgradePolicyPtrOutputWithContext(context.Background())
}

func (i ClusterUpgradePolicyArgs) ToClusterUpgradePolicyPtrOutputWithContext(ctx context.Context) ClusterUpgradePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUpgradePolicyOutput).ToClusterUpgradePolicyPtrOutputWithContext(ctx)
}

// ClusterUpgradePolicyPtrInput is an input type that accepts ClusterUpgradePolicyArgs, ClusterUpgradePolicyPtr and ClusterUpgradePolicyPtrOutput values.
// You can construct a concrete instance of `ClusterUpgradePolicyPtrInput` via:
//
//	        ClusterUpgradePolicyArgs{...}
//
//	or:
//
//	        nil
type ClusterUpgradePolicyPtrInput interface {
	pulumi.Input

	ToClusterUpgradePolicyPtrOutput() ClusterUpgradePolicyPtrOutput
	ToClusterUpgradePolicyPtrOutputWithContext(context.Context) ClusterUpgradePolicyPtrOutput
}

type clusterUpgradePolicyPtrType ClusterUpgradePolicyArgs

func ClusterUpgradePolicyPtr(v *ClusterUpgradePolicyArgs) ClusterUpgradePolicyPtrInput {
	return (*clusterUpgradePolicyPtrType)(v)
}

func (*clusterUpgradePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterUpgradePolicy)(nil)).Elem()
}

func (i *clusterUpgradePolicyPtrType) ToClusterUpgradePolicyPtrOutput() ClusterUpgradePolicyPtrOutput {
	return i.ToClusterUpgradePolicyPtrOutputWithContext(context.Background())
}

func (i *clusterUpgradePolicyPtrType) ToClusterUpgradePolicyPtrOutputWithContext(ctx context.Context) ClusterUpgradePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUpgradePolicyPtrOutput)
}

// An object representing the Upgrade Policy to use for the cluster.
type ClusterUpgradePolicyOutput struct{ *pulumi.OutputState }

func (ClusterUpgradePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterUpgradePolicy)(nil)).Elem()
}

func (o ClusterUpgradePolicyOutput) ToClusterUpgradePolicyOutput() ClusterUpgradePolicyOutput {
	return o
}

func (o ClusterUpgradePolicyOutput) ToClusterUpgradePolicyOutputWithContext(ctx context.Context) ClusterUpgradePolicyOutput {
	return o
}

func (o ClusterUpgradePolicyOutput) ToClusterUpgradePolicyPtrOutput() ClusterUpgradePolicyPtrOutput {
	return o.ToClusterUpgradePolicyPtrOutputWithContext(context.Background())
}

func (o ClusterUpgradePolicyOutput) ToClusterUpgradePolicyPtrOutputWithContext(ctx context.Context) ClusterUpgradePolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterUpgradePolicy) *ClusterUpgradePolicy {
		return &v
	}).(ClusterUpgradePolicyPtrOutput)
}

// Specify the support type for your cluster.
func (o ClusterUpgradePolicyOutput) SupportType() ClusterUpgradePolicySupportTypePtrOutput {
	return o.ApplyT(func(v ClusterUpgradePolicy) *ClusterUpgradePolicySupportType { return v.SupportType }).(ClusterUpgradePolicySupportTypePtrOutput)
}

type ClusterUpgradePolicyPtrOutput struct{ *pulumi.OutputState }

func (ClusterUpgradePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterUpgradePolicy)(nil)).Elem()
}

func (o ClusterUpgradePolicyPtrOutput) ToClusterUpgradePolicyPtrOutput() ClusterUpgradePolicyPtrOutput {
	return o
}

func (o ClusterUpgradePolicyPtrOutput) ToClusterUpgradePolicyPtrOutputWithContext(ctx context.Context) ClusterUpgradePolicyPtrOutput {
	return o
}

func (o ClusterUpgradePolicyPtrOutput) Elem() ClusterUpgradePolicyOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicy) ClusterUpgradePolicy {
		if v != nil {
			return *v
		}
		var ret ClusterUpgradePolicy
		return ret
	}).(ClusterUpgradePolicyOutput)
}

// Specify the support type for your cluster.
func (o ClusterUpgradePolicyPtrOutput) SupportType() ClusterUpgradePolicySupportTypePtrOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicy) *ClusterUpgradePolicySupportType {
		if v == nil {
			return nil
		}
		return v.SupportType
	}).(ClusterUpgradePolicySupportTypePtrOutput)
}

// The current zonal shift configuration to use for the cluster.
type ClusterZonalShiftConfig struct {
	// Set this value to true to enable zonal shift for the cluster.
	Enabled *bool `pulumi:"enabled"`
}

// ClusterZonalShiftConfigInput is an input type that accepts ClusterZonalShiftConfigArgs and ClusterZonalShiftConfigOutput values.
// You can construct a concrete instance of `ClusterZonalShiftConfigInput` via:
//
//	ClusterZonalShiftConfigArgs{...}
type ClusterZonalShiftConfigInput interface {
	pulumi.Input

	ToClusterZonalShiftConfigOutput() ClusterZonalShiftConfigOutput
	ToClusterZonalShiftConfigOutputWithContext(context.Context) ClusterZonalShiftConfigOutput
}

// The current zonal shift configuration to use for the cluster.
type ClusterZonalShiftConfigArgs struct {
	// Set this value to true to enable zonal shift for the cluster.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (ClusterZonalShiftConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterZonalShiftConfig)(nil)).Elem()
}

func (i ClusterZonalShiftConfigArgs) ToClusterZonalShiftConfigOutput() ClusterZonalShiftConfigOutput {
	return i.ToClusterZonalShiftConfigOutputWithContext(context.Background())
}

func (i ClusterZonalShiftConfigArgs) ToClusterZonalShiftConfigOutputWithContext(ctx context.Context) ClusterZonalShiftConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterZonalShiftConfigOutput)
}

func (i ClusterZonalShiftConfigArgs) ToClusterZonalShiftConfigPtrOutput() ClusterZonalShiftConfigPtrOutput {
	return i.ToClusterZonalShiftConfigPtrOutputWithContext(context.Background())
}

func (i ClusterZonalShiftConfigArgs) ToClusterZonalShiftConfigPtrOutputWithContext(ctx context.Context) ClusterZonalShiftConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterZonalShiftConfigOutput).ToClusterZonalShiftConfigPtrOutputWithContext(ctx)
}

// ClusterZonalShiftConfigPtrInput is an input type that accepts ClusterZonalShiftConfigArgs, ClusterZonalShiftConfigPtr and ClusterZonalShiftConfigPtrOutput values.
// You can construct a concrete instance of `ClusterZonalShiftConfigPtrInput` via:
//
//	        ClusterZonalShiftConfigArgs{...}
//
//	or:
//
//	        nil
type ClusterZonalShiftConfigPtrInput interface {
	pulumi.Input

	ToClusterZonalShiftConfigPtrOutput() ClusterZonalShiftConfigPtrOutput
	ToClusterZonalShiftConfigPtrOutputWithContext(context.Context) ClusterZonalShiftConfigPtrOutput
}

type clusterZonalShiftConfigPtrType ClusterZonalShiftConfigArgs

func ClusterZonalShiftConfigPtr(v *ClusterZonalShiftConfigArgs) ClusterZonalShiftConfigPtrInput {
	return (*clusterZonalShiftConfigPtrType)(v)
}

func (*clusterZonalShiftConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterZonalShiftConfig)(nil)).Elem()
}

func (i *clusterZonalShiftConfigPtrType) ToClusterZonalShiftConfigPtrOutput() ClusterZonalShiftConfigPtrOutput {
	return i.ToClusterZonalShiftConfigPtrOutputWithContext(context.Background())
}

func (i *clusterZonalShiftConfigPtrType) ToClusterZonalShiftConfigPtrOutputWithContext(ctx context.Context) ClusterZonalShiftConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterZonalShiftConfigPtrOutput)
}

// The current zonal shift configuration to use for the cluster.
type ClusterZonalShiftConfigOutput struct{ *pulumi.OutputState }

func (ClusterZonalShiftConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterZonalShiftConfig)(nil)).Elem()
}

func (o ClusterZonalShiftConfigOutput) ToClusterZonalShiftConfigOutput() ClusterZonalShiftConfigOutput {
	return o
}

func (o ClusterZonalShiftConfigOutput) ToClusterZonalShiftConfigOutputWithContext(ctx context.Context) ClusterZonalShiftConfigOutput {
	return o
}

func (o ClusterZonalShiftConfigOutput) ToClusterZonalShiftConfigPtrOutput() ClusterZonalShiftConfigPtrOutput {
	return o.ToClusterZonalShiftConfigPtrOutputWithContext(context.Background())
}

func (o ClusterZonalShiftConfigOutput) ToClusterZonalShiftConfigPtrOutputWithContext(ctx context.Context) ClusterZonalShiftConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterZonalShiftConfig) *ClusterZonalShiftConfig {
		return &v
	}).(ClusterZonalShiftConfigPtrOutput)
}

// Set this value to true to enable zonal shift for the cluster.
func (o ClusterZonalShiftConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterZonalShiftConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type ClusterZonalShiftConfigPtrOutput struct{ *pulumi.OutputState }

func (ClusterZonalShiftConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterZonalShiftConfig)(nil)).Elem()
}

func (o ClusterZonalShiftConfigPtrOutput) ToClusterZonalShiftConfigPtrOutput() ClusterZonalShiftConfigPtrOutput {
	return o
}

func (o ClusterZonalShiftConfigPtrOutput) ToClusterZonalShiftConfigPtrOutputWithContext(ctx context.Context) ClusterZonalShiftConfigPtrOutput {
	return o
}

func (o ClusterZonalShiftConfigPtrOutput) Elem() ClusterZonalShiftConfigOutput {
	return o.ApplyT(func(v *ClusterZonalShiftConfig) ClusterZonalShiftConfig {
		if v != nil {
			return *v
		}
		var ret ClusterZonalShiftConfig
		return ret
	}).(ClusterZonalShiftConfigOutput)
}

// Set this value to true to enable zonal shift for the cluster.
func (o ClusterZonalShiftConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterZonalShiftConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// A key-value pair to associate with a pod.
type FargateProfileLabel struct {
	// The key name of the label.
	Key string `pulumi:"key"`
	// The value for the label.
	Value string `pulumi:"value"`
}

// FargateProfileLabelInput is an input type that accepts FargateProfileLabelArgs and FargateProfileLabelOutput values.
// You can construct a concrete instance of `FargateProfileLabelInput` via:
//
//	FargateProfileLabelArgs{...}
type FargateProfileLabelInput interface {
	pulumi.Input

	ToFargateProfileLabelOutput() FargateProfileLabelOutput
	ToFargateProfileLabelOutputWithContext(context.Context) FargateProfileLabelOutput
}

// A key-value pair to associate with a pod.
type FargateProfileLabelArgs struct {
	// The key name of the label.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the label.
	Value pulumi.StringInput `pulumi:"value"`
}

func (FargateProfileLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FargateProfileLabel)(nil)).Elem()
}

func (i FargateProfileLabelArgs) ToFargateProfileLabelOutput() FargateProfileLabelOutput {
	return i.ToFargateProfileLabelOutputWithContext(context.Background())
}

func (i FargateProfileLabelArgs) ToFargateProfileLabelOutputWithContext(ctx context.Context) FargateProfileLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FargateProfileLabelOutput)
}

// FargateProfileLabelArrayInput is an input type that accepts FargateProfileLabelArray and FargateProfileLabelArrayOutput values.
// You can construct a concrete instance of `FargateProfileLabelArrayInput` via:
//
//	FargateProfileLabelArray{ FargateProfileLabelArgs{...} }
type FargateProfileLabelArrayInput interface {
	pulumi.Input

	ToFargateProfileLabelArrayOutput() FargateProfileLabelArrayOutput
	ToFargateProfileLabelArrayOutputWithContext(context.Context) FargateProfileLabelArrayOutput
}

type FargateProfileLabelArray []FargateProfileLabelInput

func (FargateProfileLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FargateProfileLabel)(nil)).Elem()
}

func (i FargateProfileLabelArray) ToFargateProfileLabelArrayOutput() FargateProfileLabelArrayOutput {
	return i.ToFargateProfileLabelArrayOutputWithContext(context.Background())
}

func (i FargateProfileLabelArray) ToFargateProfileLabelArrayOutputWithContext(ctx context.Context) FargateProfileLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FargateProfileLabelArrayOutput)
}

// A key-value pair to associate with a pod.
type FargateProfileLabelOutput struct{ *pulumi.OutputState }

func (FargateProfileLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FargateProfileLabel)(nil)).Elem()
}

func (o FargateProfileLabelOutput) ToFargateProfileLabelOutput() FargateProfileLabelOutput {
	return o
}

func (o FargateProfileLabelOutput) ToFargateProfileLabelOutputWithContext(ctx context.Context) FargateProfileLabelOutput {
	return o
}

// The key name of the label.
func (o FargateProfileLabelOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v FargateProfileLabel) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the label.
func (o FargateProfileLabelOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v FargateProfileLabel) string { return v.Value }).(pulumi.StringOutput)
}

type FargateProfileLabelArrayOutput struct{ *pulumi.OutputState }

func (FargateProfileLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FargateProfileLabel)(nil)).Elem()
}

func (o FargateProfileLabelArrayOutput) ToFargateProfileLabelArrayOutput() FargateProfileLabelArrayOutput {
	return o
}

func (o FargateProfileLabelArrayOutput) ToFargateProfileLabelArrayOutputWithContext(ctx context.Context) FargateProfileLabelArrayOutput {
	return o
}

func (o FargateProfileLabelArrayOutput) Index(i pulumi.IntInput) FargateProfileLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FargateProfileLabel {
		return vs[0].([]FargateProfileLabel)[vs[1].(int)]
	}).(FargateProfileLabelOutput)
}

type FargateProfileSelector struct {
	// The Kubernetes labels that the selector should match. A pod must contain all of the labels that are specified in the selector for it to be considered a match.
	Labels []FargateProfileLabel `pulumi:"labels"`
	// The Kubernetes `namespace` that the selector should match.
	Namespace string `pulumi:"namespace"`
}

// FargateProfileSelectorInput is an input type that accepts FargateProfileSelectorArgs and FargateProfileSelectorOutput values.
// You can construct a concrete instance of `FargateProfileSelectorInput` via:
//
//	FargateProfileSelectorArgs{...}
type FargateProfileSelectorInput interface {
	pulumi.Input

	ToFargateProfileSelectorOutput() FargateProfileSelectorOutput
	ToFargateProfileSelectorOutputWithContext(context.Context) FargateProfileSelectorOutput
}

type FargateProfileSelectorArgs struct {
	// The Kubernetes labels that the selector should match. A pod must contain all of the labels that are specified in the selector for it to be considered a match.
	Labels FargateProfileLabelArrayInput `pulumi:"labels"`
	// The Kubernetes `namespace` that the selector should match.
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (FargateProfileSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FargateProfileSelector)(nil)).Elem()
}

func (i FargateProfileSelectorArgs) ToFargateProfileSelectorOutput() FargateProfileSelectorOutput {
	return i.ToFargateProfileSelectorOutputWithContext(context.Background())
}

func (i FargateProfileSelectorArgs) ToFargateProfileSelectorOutputWithContext(ctx context.Context) FargateProfileSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FargateProfileSelectorOutput)
}

// FargateProfileSelectorArrayInput is an input type that accepts FargateProfileSelectorArray and FargateProfileSelectorArrayOutput values.
// You can construct a concrete instance of `FargateProfileSelectorArrayInput` via:
//
//	FargateProfileSelectorArray{ FargateProfileSelectorArgs{...} }
type FargateProfileSelectorArrayInput interface {
	pulumi.Input

	ToFargateProfileSelectorArrayOutput() FargateProfileSelectorArrayOutput
	ToFargateProfileSelectorArrayOutputWithContext(context.Context) FargateProfileSelectorArrayOutput
}

type FargateProfileSelectorArray []FargateProfileSelectorInput

func (FargateProfileSelectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FargateProfileSelector)(nil)).Elem()
}

func (i FargateProfileSelectorArray) ToFargateProfileSelectorArrayOutput() FargateProfileSelectorArrayOutput {
	return i.ToFargateProfileSelectorArrayOutputWithContext(context.Background())
}

func (i FargateProfileSelectorArray) ToFargateProfileSelectorArrayOutputWithContext(ctx context.Context) FargateProfileSelectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FargateProfileSelectorArrayOutput)
}

type FargateProfileSelectorOutput struct{ *pulumi.OutputState }

func (FargateProfileSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FargateProfileSelector)(nil)).Elem()
}

func (o FargateProfileSelectorOutput) ToFargateProfileSelectorOutput() FargateProfileSelectorOutput {
	return o
}

func (o FargateProfileSelectorOutput) ToFargateProfileSelectorOutputWithContext(ctx context.Context) FargateProfileSelectorOutput {
	return o
}

// The Kubernetes labels that the selector should match. A pod must contain all of the labels that are specified in the selector for it to be considered a match.
func (o FargateProfileSelectorOutput) Labels() FargateProfileLabelArrayOutput {
	return o.ApplyT(func(v FargateProfileSelector) []FargateProfileLabel { return v.Labels }).(FargateProfileLabelArrayOutput)
}

// The Kubernetes `namespace` that the selector should match.
func (o FargateProfileSelectorOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v FargateProfileSelector) string { return v.Namespace }).(pulumi.StringOutput)
}

type FargateProfileSelectorArrayOutput struct{ *pulumi.OutputState }

func (FargateProfileSelectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FargateProfileSelector)(nil)).Elem()
}

func (o FargateProfileSelectorArrayOutput) ToFargateProfileSelectorArrayOutput() FargateProfileSelectorArrayOutput {
	return o
}

func (o FargateProfileSelectorArrayOutput) ToFargateProfileSelectorArrayOutputWithContext(ctx context.Context) FargateProfileSelectorArrayOutput {
	return o
}

func (o FargateProfileSelectorArrayOutput) Index(i pulumi.IntInput) FargateProfileSelectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FargateProfileSelector {
		return vs[0].([]FargateProfileSelector)[vs[1].(int)]
	}).(FargateProfileSelectorOutput)
}

// A key-value pair to associate with a resource.
type FargateProfileTag struct {
	// The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// An object representing an OpenID Connect (OIDC) configuration.
type IdentityProviderConfigOidcIdentityProviderConfig struct {
	// This is also known as audience. The ID for the client application that makes authentication requests to the OpenID identity provider.
	ClientId string `pulumi:"clientId"`
	// The JWT claim that the provider uses to return your groups.
	GroupsClaim *string `pulumi:"groupsClaim"`
	// The prefix that is prepended to group claims to prevent clashes with existing names (such as system: groups).
	GroupsPrefix *string `pulumi:"groupsPrefix"`
	// The URL of the OpenID identity provider that allows the API server to discover public signing keys for verifying tokens.
	IssuerUrl string `pulumi:"issuerUrl"`
	// The key-value pairs that describe required claims in the identity token. If set, each claim is verified to be present in the token with a matching value.
	RequiredClaims []IdentityProviderConfigRequiredClaim `pulumi:"requiredClaims"`
	// The JSON Web Token (JWT) claim to use as the username. The default is sub, which is expected to be a unique identifier of the end user. You can choose other claims, such as email or name, depending on the OpenID identity provider. Claims other than email are prefixed with the issuer URL to prevent naming clashes with other plug-ins.
	UsernameClaim *string `pulumi:"usernameClaim"`
	// The prefix that is prepended to username claims to prevent clashes with existing names. If you do not provide this field, and username is a value other than email, the prefix defaults to issuerurl#. You can use the value - to disable all prefixing.
	UsernamePrefix *string `pulumi:"usernamePrefix"`
}

// IdentityProviderConfigOidcIdentityProviderConfigInput is an input type that accepts IdentityProviderConfigOidcIdentityProviderConfigArgs and IdentityProviderConfigOidcIdentityProviderConfigOutput values.
// You can construct a concrete instance of `IdentityProviderConfigOidcIdentityProviderConfigInput` via:
//
//	IdentityProviderConfigOidcIdentityProviderConfigArgs{...}
type IdentityProviderConfigOidcIdentityProviderConfigInput interface {
	pulumi.Input

	ToIdentityProviderConfigOidcIdentityProviderConfigOutput() IdentityProviderConfigOidcIdentityProviderConfigOutput
	ToIdentityProviderConfigOidcIdentityProviderConfigOutputWithContext(context.Context) IdentityProviderConfigOidcIdentityProviderConfigOutput
}

// An object representing an OpenID Connect (OIDC) configuration.
type IdentityProviderConfigOidcIdentityProviderConfigArgs struct {
	// This is also known as audience. The ID for the client application that makes authentication requests to the OpenID identity provider.
	ClientId pulumi.StringInput `pulumi:"clientId"`
	// The JWT claim that the provider uses to return your groups.
	GroupsClaim pulumi.StringPtrInput `pulumi:"groupsClaim"`
	// The prefix that is prepended to group claims to prevent clashes with existing names (such as system: groups).
	GroupsPrefix pulumi.StringPtrInput `pulumi:"groupsPrefix"`
	// The URL of the OpenID identity provider that allows the API server to discover public signing keys for verifying tokens.
	IssuerUrl pulumi.StringInput `pulumi:"issuerUrl"`
	// The key-value pairs that describe required claims in the identity token. If set, each claim is verified to be present in the token with a matching value.
	RequiredClaims IdentityProviderConfigRequiredClaimArrayInput `pulumi:"requiredClaims"`
	// The JSON Web Token (JWT) claim to use as the username. The default is sub, which is expected to be a unique identifier of the end user. You can choose other claims, such as email or name, depending on the OpenID identity provider. Claims other than email are prefixed with the issuer URL to prevent naming clashes with other plug-ins.
	UsernameClaim pulumi.StringPtrInput `pulumi:"usernameClaim"`
	// The prefix that is prepended to username claims to prevent clashes with existing names. If you do not provide this field, and username is a value other than email, the prefix defaults to issuerurl#. You can use the value - to disable all prefixing.
	UsernamePrefix pulumi.StringPtrInput `pulumi:"usernamePrefix"`
}

func (IdentityProviderConfigOidcIdentityProviderConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityProviderConfigOidcIdentityProviderConfig)(nil)).Elem()
}

func (i IdentityProviderConfigOidcIdentityProviderConfigArgs) ToIdentityProviderConfigOidcIdentityProviderConfigOutput() IdentityProviderConfigOidcIdentityProviderConfigOutput {
	return i.ToIdentityProviderConfigOidcIdentityProviderConfigOutputWithContext(context.Background())
}

func (i IdentityProviderConfigOidcIdentityProviderConfigArgs) ToIdentityProviderConfigOidcIdentityProviderConfigOutputWithContext(ctx context.Context) IdentityProviderConfigOidcIdentityProviderConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityProviderConfigOidcIdentityProviderConfigOutput)
}

func (i IdentityProviderConfigOidcIdentityProviderConfigArgs) ToIdentityProviderConfigOidcIdentityProviderConfigPtrOutput() IdentityProviderConfigOidcIdentityProviderConfigPtrOutput {
	return i.ToIdentityProviderConfigOidcIdentityProviderConfigPtrOutputWithContext(context.Background())
}

func (i IdentityProviderConfigOidcIdentityProviderConfigArgs) ToIdentityProviderConfigOidcIdentityProviderConfigPtrOutputWithContext(ctx context.Context) IdentityProviderConfigOidcIdentityProviderConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityProviderConfigOidcIdentityProviderConfigOutput).ToIdentityProviderConfigOidcIdentityProviderConfigPtrOutputWithContext(ctx)
}

// IdentityProviderConfigOidcIdentityProviderConfigPtrInput is an input type that accepts IdentityProviderConfigOidcIdentityProviderConfigArgs, IdentityProviderConfigOidcIdentityProviderConfigPtr and IdentityProviderConfigOidcIdentityProviderConfigPtrOutput values.
// You can construct a concrete instance of `IdentityProviderConfigOidcIdentityProviderConfigPtrInput` via:
//
//	        IdentityProviderConfigOidcIdentityProviderConfigArgs{...}
//
//	or:
//
//	        nil
type IdentityProviderConfigOidcIdentityProviderConfigPtrInput interface {
	pulumi.Input

	ToIdentityProviderConfigOidcIdentityProviderConfigPtrOutput() IdentityProviderConfigOidcIdentityProviderConfigPtrOutput
	ToIdentityProviderConfigOidcIdentityProviderConfigPtrOutputWithContext(context.Context) IdentityProviderConfigOidcIdentityProviderConfigPtrOutput
}

type identityProviderConfigOidcIdentityProviderConfigPtrType IdentityProviderConfigOidcIdentityProviderConfigArgs

func IdentityProviderConfigOidcIdentityProviderConfigPtr(v *IdentityProviderConfigOidcIdentityProviderConfigArgs) IdentityProviderConfigOidcIdentityProviderConfigPtrInput {
	return (*identityProviderConfigOidcIdentityProviderConfigPtrType)(v)
}

func (*identityProviderConfigOidcIdentityProviderConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityProviderConfigOidcIdentityProviderConfig)(nil)).Elem()
}

func (i *identityProviderConfigOidcIdentityProviderConfigPtrType) ToIdentityProviderConfigOidcIdentityProviderConfigPtrOutput() IdentityProviderConfigOidcIdentityProviderConfigPtrOutput {
	return i.ToIdentityProviderConfigOidcIdentityProviderConfigPtrOutputWithContext(context.Background())
}

func (i *identityProviderConfigOidcIdentityProviderConfigPtrType) ToIdentityProviderConfigOidcIdentityProviderConfigPtrOutputWithContext(ctx context.Context) IdentityProviderConfigOidcIdentityProviderConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityProviderConfigOidcIdentityProviderConfigPtrOutput)
}

// An object representing an OpenID Connect (OIDC) configuration.
type IdentityProviderConfigOidcIdentityProviderConfigOutput struct{ *pulumi.OutputState }

func (IdentityProviderConfigOidcIdentityProviderConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityProviderConfigOidcIdentityProviderConfig)(nil)).Elem()
}

func (o IdentityProviderConfigOidcIdentityProviderConfigOutput) ToIdentityProviderConfigOidcIdentityProviderConfigOutput() IdentityProviderConfigOidcIdentityProviderConfigOutput {
	return o
}

func (o IdentityProviderConfigOidcIdentityProviderConfigOutput) ToIdentityProviderConfigOidcIdentityProviderConfigOutputWithContext(ctx context.Context) IdentityProviderConfigOidcIdentityProviderConfigOutput {
	return o
}

func (o IdentityProviderConfigOidcIdentityProviderConfigOutput) ToIdentityProviderConfigOidcIdentityProviderConfigPtrOutput() IdentityProviderConfigOidcIdentityProviderConfigPtrOutput {
	return o.ToIdentityProviderConfigOidcIdentityProviderConfigPtrOutputWithContext(context.Background())
}

func (o IdentityProviderConfigOidcIdentityProviderConfigOutput) ToIdentityProviderConfigOidcIdentityProviderConfigPtrOutputWithContext(ctx context.Context) IdentityProviderConfigOidcIdentityProviderConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IdentityProviderConfigOidcIdentityProviderConfig) *IdentityProviderConfigOidcIdentityProviderConfig {
		return &v
	}).(IdentityProviderConfigOidcIdentityProviderConfigPtrOutput)
}

// This is also known as audience. The ID for the client application that makes authentication requests to the OpenID identity provider.
func (o IdentityProviderConfigOidcIdentityProviderConfigOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityProviderConfigOidcIdentityProviderConfig) string { return v.ClientId }).(pulumi.StringOutput)
}

// The JWT claim that the provider uses to return your groups.
func (o IdentityProviderConfigOidcIdentityProviderConfigOutput) GroupsClaim() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityProviderConfigOidcIdentityProviderConfig) *string { return v.GroupsClaim }).(pulumi.StringPtrOutput)
}

// The prefix that is prepended to group claims to prevent clashes with existing names (such as system: groups).
func (o IdentityProviderConfigOidcIdentityProviderConfigOutput) GroupsPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityProviderConfigOidcIdentityProviderConfig) *string { return v.GroupsPrefix }).(pulumi.StringPtrOutput)
}

// The URL of the OpenID identity provider that allows the API server to discover public signing keys for verifying tokens.
func (o IdentityProviderConfigOidcIdentityProviderConfigOutput) IssuerUrl() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityProviderConfigOidcIdentityProviderConfig) string { return v.IssuerUrl }).(pulumi.StringOutput)
}

// The key-value pairs that describe required claims in the identity token. If set, each claim is verified to be present in the token with a matching value.
func (o IdentityProviderConfigOidcIdentityProviderConfigOutput) RequiredClaims() IdentityProviderConfigRequiredClaimArrayOutput {
	return o.ApplyT(func(v IdentityProviderConfigOidcIdentityProviderConfig) []IdentityProviderConfigRequiredClaim {
		return v.RequiredClaims
	}).(IdentityProviderConfigRequiredClaimArrayOutput)
}

// The JSON Web Token (JWT) claim to use as the username. The default is sub, which is expected to be a unique identifier of the end user. You can choose other claims, such as email or name, depending on the OpenID identity provider. Claims other than email are prefixed with the issuer URL to prevent naming clashes with other plug-ins.
func (o IdentityProviderConfigOidcIdentityProviderConfigOutput) UsernameClaim() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityProviderConfigOidcIdentityProviderConfig) *string { return v.UsernameClaim }).(pulumi.StringPtrOutput)
}

// The prefix that is prepended to username claims to prevent clashes with existing names. If you do not provide this field, and username is a value other than email, the prefix defaults to issuerurl#. You can use the value - to disable all prefixing.
func (o IdentityProviderConfigOidcIdentityProviderConfigOutput) UsernamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityProviderConfigOidcIdentityProviderConfig) *string { return v.UsernamePrefix }).(pulumi.StringPtrOutput)
}

type IdentityProviderConfigOidcIdentityProviderConfigPtrOutput struct{ *pulumi.OutputState }

func (IdentityProviderConfigOidcIdentityProviderConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityProviderConfigOidcIdentityProviderConfig)(nil)).Elem()
}

func (o IdentityProviderConfigOidcIdentityProviderConfigPtrOutput) ToIdentityProviderConfigOidcIdentityProviderConfigPtrOutput() IdentityProviderConfigOidcIdentityProviderConfigPtrOutput {
	return o
}

func (o IdentityProviderConfigOidcIdentityProviderConfigPtrOutput) ToIdentityProviderConfigOidcIdentityProviderConfigPtrOutputWithContext(ctx context.Context) IdentityProviderConfigOidcIdentityProviderConfigPtrOutput {
	return o
}

func (o IdentityProviderConfigOidcIdentityProviderConfigPtrOutput) Elem() IdentityProviderConfigOidcIdentityProviderConfigOutput {
	return o.ApplyT(func(v *IdentityProviderConfigOidcIdentityProviderConfig) IdentityProviderConfigOidcIdentityProviderConfig {
		if v != nil {
			return *v
		}
		var ret IdentityProviderConfigOidcIdentityProviderConfig
		return ret
	}).(IdentityProviderConfigOidcIdentityProviderConfigOutput)
}

// This is also known as audience. The ID for the client application that makes authentication requests to the OpenID identity provider.
func (o IdentityProviderConfigOidcIdentityProviderConfigPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityProviderConfigOidcIdentityProviderConfig) *string {
		if v == nil {
			return nil
		}
		return &v.ClientId
	}).(pulumi.StringPtrOutput)
}

// The JWT claim that the provider uses to return your groups.
func (o IdentityProviderConfigOidcIdentityProviderConfigPtrOutput) GroupsClaim() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityProviderConfigOidcIdentityProviderConfig) *string {
		if v == nil {
			return nil
		}
		return v.GroupsClaim
	}).(pulumi.StringPtrOutput)
}

// The prefix that is prepended to group claims to prevent clashes with existing names (such as system: groups).
func (o IdentityProviderConfigOidcIdentityProviderConfigPtrOutput) GroupsPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityProviderConfigOidcIdentityProviderConfig) *string {
		if v == nil {
			return nil
		}
		return v.GroupsPrefix
	}).(pulumi.StringPtrOutput)
}

// The URL of the OpenID identity provider that allows the API server to discover public signing keys for verifying tokens.
func (o IdentityProviderConfigOidcIdentityProviderConfigPtrOutput) IssuerUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityProviderConfigOidcIdentityProviderConfig) *string {
		if v == nil {
			return nil
		}
		return &v.IssuerUrl
	}).(pulumi.StringPtrOutput)
}

// The key-value pairs that describe required claims in the identity token. If set, each claim is verified to be present in the token with a matching value.
func (o IdentityProviderConfigOidcIdentityProviderConfigPtrOutput) RequiredClaims() IdentityProviderConfigRequiredClaimArrayOutput {
	return o.ApplyT(func(v *IdentityProviderConfigOidcIdentityProviderConfig) []IdentityProviderConfigRequiredClaim {
		if v == nil {
			return nil
		}
		return v.RequiredClaims
	}).(IdentityProviderConfigRequiredClaimArrayOutput)
}

// The JSON Web Token (JWT) claim to use as the username. The default is sub, which is expected to be a unique identifier of the end user. You can choose other claims, such as email or name, depending on the OpenID identity provider. Claims other than email are prefixed with the issuer URL to prevent naming clashes with other plug-ins.
func (o IdentityProviderConfigOidcIdentityProviderConfigPtrOutput) UsernameClaim() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityProviderConfigOidcIdentityProviderConfig) *string {
		if v == nil {
			return nil
		}
		return v.UsernameClaim
	}).(pulumi.StringPtrOutput)
}

// The prefix that is prepended to username claims to prevent clashes with existing names. If you do not provide this field, and username is a value other than email, the prefix defaults to issuerurl#. You can use the value - to disable all prefixing.
func (o IdentityProviderConfigOidcIdentityProviderConfigPtrOutput) UsernamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityProviderConfigOidcIdentityProviderConfig) *string {
		if v == nil {
			return nil
		}
		return v.UsernamePrefix
	}).(pulumi.StringPtrOutput)
}

// The key value pairs that describe required claims in the identity token. If set, each claim is verified to be present in the token with a matching value.
type IdentityProviderConfigRequiredClaim struct {
	// The key of the requiredClaims.
	Key string `pulumi:"key"`
	// The value for the requiredClaims.
	Value string `pulumi:"value"`
}

// IdentityProviderConfigRequiredClaimInput is an input type that accepts IdentityProviderConfigRequiredClaimArgs and IdentityProviderConfigRequiredClaimOutput values.
// You can construct a concrete instance of `IdentityProviderConfigRequiredClaimInput` via:
//
//	IdentityProviderConfigRequiredClaimArgs{...}
type IdentityProviderConfigRequiredClaimInput interface {
	pulumi.Input

	ToIdentityProviderConfigRequiredClaimOutput() IdentityProviderConfigRequiredClaimOutput
	ToIdentityProviderConfigRequiredClaimOutputWithContext(context.Context) IdentityProviderConfigRequiredClaimOutput
}

// The key value pairs that describe required claims in the identity token. If set, each claim is verified to be present in the token with a matching value.
type IdentityProviderConfigRequiredClaimArgs struct {
	// The key of the requiredClaims.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the requiredClaims.
	Value pulumi.StringInput `pulumi:"value"`
}

func (IdentityProviderConfigRequiredClaimArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityProviderConfigRequiredClaim)(nil)).Elem()
}

func (i IdentityProviderConfigRequiredClaimArgs) ToIdentityProviderConfigRequiredClaimOutput() IdentityProviderConfigRequiredClaimOutput {
	return i.ToIdentityProviderConfigRequiredClaimOutputWithContext(context.Background())
}

func (i IdentityProviderConfigRequiredClaimArgs) ToIdentityProviderConfigRequiredClaimOutputWithContext(ctx context.Context) IdentityProviderConfigRequiredClaimOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityProviderConfigRequiredClaimOutput)
}

// IdentityProviderConfigRequiredClaimArrayInput is an input type that accepts IdentityProviderConfigRequiredClaimArray and IdentityProviderConfigRequiredClaimArrayOutput values.
// You can construct a concrete instance of `IdentityProviderConfigRequiredClaimArrayInput` via:
//
//	IdentityProviderConfigRequiredClaimArray{ IdentityProviderConfigRequiredClaimArgs{...} }
type IdentityProviderConfigRequiredClaimArrayInput interface {
	pulumi.Input

	ToIdentityProviderConfigRequiredClaimArrayOutput() IdentityProviderConfigRequiredClaimArrayOutput
	ToIdentityProviderConfigRequiredClaimArrayOutputWithContext(context.Context) IdentityProviderConfigRequiredClaimArrayOutput
}

type IdentityProviderConfigRequiredClaimArray []IdentityProviderConfigRequiredClaimInput

func (IdentityProviderConfigRequiredClaimArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IdentityProviderConfigRequiredClaim)(nil)).Elem()
}

func (i IdentityProviderConfigRequiredClaimArray) ToIdentityProviderConfigRequiredClaimArrayOutput() IdentityProviderConfigRequiredClaimArrayOutput {
	return i.ToIdentityProviderConfigRequiredClaimArrayOutputWithContext(context.Background())
}

func (i IdentityProviderConfigRequiredClaimArray) ToIdentityProviderConfigRequiredClaimArrayOutputWithContext(ctx context.Context) IdentityProviderConfigRequiredClaimArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityProviderConfigRequiredClaimArrayOutput)
}

// The key value pairs that describe required claims in the identity token. If set, each claim is verified to be present in the token with a matching value.
type IdentityProviderConfigRequiredClaimOutput struct{ *pulumi.OutputState }

func (IdentityProviderConfigRequiredClaimOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityProviderConfigRequiredClaim)(nil)).Elem()
}

func (o IdentityProviderConfigRequiredClaimOutput) ToIdentityProviderConfigRequiredClaimOutput() IdentityProviderConfigRequiredClaimOutput {
	return o
}

func (o IdentityProviderConfigRequiredClaimOutput) ToIdentityProviderConfigRequiredClaimOutputWithContext(ctx context.Context) IdentityProviderConfigRequiredClaimOutput {
	return o
}

// The key of the requiredClaims.
func (o IdentityProviderConfigRequiredClaimOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityProviderConfigRequiredClaim) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the requiredClaims.
func (o IdentityProviderConfigRequiredClaimOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityProviderConfigRequiredClaim) string { return v.Value }).(pulumi.StringOutput)
}

type IdentityProviderConfigRequiredClaimArrayOutput struct{ *pulumi.OutputState }

func (IdentityProviderConfigRequiredClaimArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IdentityProviderConfigRequiredClaim)(nil)).Elem()
}

func (o IdentityProviderConfigRequiredClaimArrayOutput) ToIdentityProviderConfigRequiredClaimArrayOutput() IdentityProviderConfigRequiredClaimArrayOutput {
	return o
}

func (o IdentityProviderConfigRequiredClaimArrayOutput) ToIdentityProviderConfigRequiredClaimArrayOutputWithContext(ctx context.Context) IdentityProviderConfigRequiredClaimArrayOutput {
	return o
}

func (o IdentityProviderConfigRequiredClaimArrayOutput) Index(i pulumi.IntInput) IdentityProviderConfigRequiredClaimOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IdentityProviderConfigRequiredClaim {
		return vs[0].([]IdentityProviderConfigRequiredClaim)[vs[1].(int)]
	}).(IdentityProviderConfigRequiredClaimOutput)
}

// A key-value pair to associate with a resource.
type IdentityProviderConfigTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// Enable exporting the Kubernetes control plane logs for your cluster to CloudWatch Logs based on log types. By default, cluster control plane logs aren't exported to CloudWatch Logs.
type Logging struct {
	// The cluster control plane logging configuration for your cluster.
	ClusterLogging *ClusterLoggingEnabledTypes `pulumi:"clusterLogging"`
}

// LoggingInput is an input type that accepts LoggingArgs and LoggingOutput values.
// You can construct a concrete instance of `LoggingInput` via:
//
//	LoggingArgs{...}
type LoggingInput interface {
	pulumi.Input

	ToLoggingOutput() LoggingOutput
	ToLoggingOutputWithContext(context.Context) LoggingOutput
}

// Enable exporting the Kubernetes control plane logs for your cluster to CloudWatch Logs based on log types. By default, cluster control plane logs aren't exported to CloudWatch Logs.
type LoggingArgs struct {
	// The cluster control plane logging configuration for your cluster.
	ClusterLogging ClusterLoggingEnabledTypesPtrInput `pulumi:"clusterLogging"`
}

func (LoggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Logging)(nil)).Elem()
}

func (i LoggingArgs) ToLoggingOutput() LoggingOutput {
	return i.ToLoggingOutputWithContext(context.Background())
}

func (i LoggingArgs) ToLoggingOutputWithContext(ctx context.Context) LoggingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingOutput)
}

func (i LoggingArgs) ToLoggingPtrOutput() LoggingPtrOutput {
	return i.ToLoggingPtrOutputWithContext(context.Background())
}

func (i LoggingArgs) ToLoggingPtrOutputWithContext(ctx context.Context) LoggingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingOutput).ToLoggingPtrOutputWithContext(ctx)
}

// LoggingPtrInput is an input type that accepts LoggingArgs, LoggingPtr and LoggingPtrOutput values.
// You can construct a concrete instance of `LoggingPtrInput` via:
//
//	        LoggingArgs{...}
//
//	or:
//
//	        nil
type LoggingPtrInput interface {
	pulumi.Input

	ToLoggingPtrOutput() LoggingPtrOutput
	ToLoggingPtrOutputWithContext(context.Context) LoggingPtrOutput
}

type loggingPtrType LoggingArgs

func LoggingPtr(v *LoggingArgs) LoggingPtrInput {
	return (*loggingPtrType)(v)
}

func (*loggingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Logging)(nil)).Elem()
}

func (i *loggingPtrType) ToLoggingPtrOutput() LoggingPtrOutput {
	return i.ToLoggingPtrOutputWithContext(context.Background())
}

func (i *loggingPtrType) ToLoggingPtrOutputWithContext(ctx context.Context) LoggingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingPtrOutput)
}

// Enable exporting the Kubernetes control plane logs for your cluster to CloudWatch Logs based on log types. By default, cluster control plane logs aren't exported to CloudWatch Logs.
type LoggingOutput struct{ *pulumi.OutputState }

func (LoggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Logging)(nil)).Elem()
}

func (o LoggingOutput) ToLoggingOutput() LoggingOutput {
	return o
}

func (o LoggingOutput) ToLoggingOutputWithContext(ctx context.Context) LoggingOutput {
	return o
}

func (o LoggingOutput) ToLoggingPtrOutput() LoggingPtrOutput {
	return o.ToLoggingPtrOutputWithContext(context.Background())
}

func (o LoggingOutput) ToLoggingPtrOutputWithContext(ctx context.Context) LoggingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Logging) *Logging {
		return &v
	}).(LoggingPtrOutput)
}

// The cluster control plane logging configuration for your cluster.
func (o LoggingOutput) ClusterLogging() ClusterLoggingEnabledTypesPtrOutput {
	return o.ApplyT(func(v Logging) *ClusterLoggingEnabledTypes { return v.ClusterLogging }).(ClusterLoggingEnabledTypesPtrOutput)
}

type LoggingPtrOutput struct{ *pulumi.OutputState }

func (LoggingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Logging)(nil)).Elem()
}

func (o LoggingPtrOutput) ToLoggingPtrOutput() LoggingPtrOutput {
	return o
}

func (o LoggingPtrOutput) ToLoggingPtrOutputWithContext(ctx context.Context) LoggingPtrOutput {
	return o
}

func (o LoggingPtrOutput) Elem() LoggingOutput {
	return o.ApplyT(func(v *Logging) Logging {
		if v != nil {
			return *v
		}
		var ret Logging
		return ret
	}).(LoggingOutput)
}

// The cluster control plane logging configuration for your cluster.
func (o LoggingPtrOutput) ClusterLogging() ClusterLoggingEnabledTypesPtrOutput {
	return o.ApplyT(func(v *Logging) *ClusterLoggingEnabledTypes {
		if v == nil {
			return nil
		}
		return v.ClusterLogging
	}).(ClusterLoggingEnabledTypesPtrOutput)
}

// The custom namespace configuration to use with the add-on
type NamespaceConfigProperties struct {
	// The custom namespace for creating the add-on
	Namespace string `pulumi:"namespace"`
}

// NamespaceConfigPropertiesInput is an input type that accepts NamespaceConfigPropertiesArgs and NamespaceConfigPropertiesOutput values.
// You can construct a concrete instance of `NamespaceConfigPropertiesInput` via:
//
//	NamespaceConfigPropertiesArgs{...}
type NamespaceConfigPropertiesInput interface {
	pulumi.Input

	ToNamespaceConfigPropertiesOutput() NamespaceConfigPropertiesOutput
	ToNamespaceConfigPropertiesOutputWithContext(context.Context) NamespaceConfigPropertiesOutput
}

// The custom namespace configuration to use with the add-on
type NamespaceConfigPropertiesArgs struct {
	// The custom namespace for creating the add-on
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (NamespaceConfigPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceConfigProperties)(nil)).Elem()
}

func (i NamespaceConfigPropertiesArgs) ToNamespaceConfigPropertiesOutput() NamespaceConfigPropertiesOutput {
	return i.ToNamespaceConfigPropertiesOutputWithContext(context.Background())
}

func (i NamespaceConfigPropertiesArgs) ToNamespaceConfigPropertiesOutputWithContext(ctx context.Context) NamespaceConfigPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceConfigPropertiesOutput)
}

func (i NamespaceConfigPropertiesArgs) ToNamespaceConfigPropertiesPtrOutput() NamespaceConfigPropertiesPtrOutput {
	return i.ToNamespaceConfigPropertiesPtrOutputWithContext(context.Background())
}

func (i NamespaceConfigPropertiesArgs) ToNamespaceConfigPropertiesPtrOutputWithContext(ctx context.Context) NamespaceConfigPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceConfigPropertiesOutput).ToNamespaceConfigPropertiesPtrOutputWithContext(ctx)
}

// NamespaceConfigPropertiesPtrInput is an input type that accepts NamespaceConfigPropertiesArgs, NamespaceConfigPropertiesPtr and NamespaceConfigPropertiesPtrOutput values.
// You can construct a concrete instance of `NamespaceConfigPropertiesPtrInput` via:
//
//	        NamespaceConfigPropertiesArgs{...}
//
//	or:
//
//	        nil
type NamespaceConfigPropertiesPtrInput interface {
	pulumi.Input

	ToNamespaceConfigPropertiesPtrOutput() NamespaceConfigPropertiesPtrOutput
	ToNamespaceConfigPropertiesPtrOutputWithContext(context.Context) NamespaceConfigPropertiesPtrOutput
}

type namespaceConfigPropertiesPtrType NamespaceConfigPropertiesArgs

func NamespaceConfigPropertiesPtr(v *NamespaceConfigPropertiesArgs) NamespaceConfigPropertiesPtrInput {
	return (*namespaceConfigPropertiesPtrType)(v)
}

func (*namespaceConfigPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceConfigProperties)(nil)).Elem()
}

func (i *namespaceConfigPropertiesPtrType) ToNamespaceConfigPropertiesPtrOutput() NamespaceConfigPropertiesPtrOutput {
	return i.ToNamespaceConfigPropertiesPtrOutputWithContext(context.Background())
}

func (i *namespaceConfigPropertiesPtrType) ToNamespaceConfigPropertiesPtrOutputWithContext(ctx context.Context) NamespaceConfigPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceConfigPropertiesPtrOutput)
}

// The custom namespace configuration to use with the add-on
type NamespaceConfigPropertiesOutput struct{ *pulumi.OutputState }

func (NamespaceConfigPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceConfigProperties)(nil)).Elem()
}

func (o NamespaceConfigPropertiesOutput) ToNamespaceConfigPropertiesOutput() NamespaceConfigPropertiesOutput {
	return o
}

func (o NamespaceConfigPropertiesOutput) ToNamespaceConfigPropertiesOutputWithContext(ctx context.Context) NamespaceConfigPropertiesOutput {
	return o
}

func (o NamespaceConfigPropertiesOutput) ToNamespaceConfigPropertiesPtrOutput() NamespaceConfigPropertiesPtrOutput {
	return o.ToNamespaceConfigPropertiesPtrOutputWithContext(context.Background())
}

func (o NamespaceConfigPropertiesOutput) ToNamespaceConfigPropertiesPtrOutputWithContext(ctx context.Context) NamespaceConfigPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NamespaceConfigProperties) *NamespaceConfigProperties {
		return &v
	}).(NamespaceConfigPropertiesPtrOutput)
}

// The custom namespace for creating the add-on
func (o NamespaceConfigPropertiesOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v NamespaceConfigProperties) string { return v.Namespace }).(pulumi.StringOutput)
}

type NamespaceConfigPropertiesPtrOutput struct{ *pulumi.OutputState }

func (NamespaceConfigPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceConfigProperties)(nil)).Elem()
}

func (o NamespaceConfigPropertiesPtrOutput) ToNamespaceConfigPropertiesPtrOutput() NamespaceConfigPropertiesPtrOutput {
	return o
}

func (o NamespaceConfigPropertiesPtrOutput) ToNamespaceConfigPropertiesPtrOutputWithContext(ctx context.Context) NamespaceConfigPropertiesPtrOutput {
	return o
}

func (o NamespaceConfigPropertiesPtrOutput) Elem() NamespaceConfigPropertiesOutput {
	return o.ApplyT(func(v *NamespaceConfigProperties) NamespaceConfigProperties {
		if v != nil {
			return *v
		}
		var ret NamespaceConfigProperties
		return ret
	}).(NamespaceConfigPropertiesOutput)
}

// The custom namespace for creating the add-on
func (o NamespaceConfigPropertiesPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceConfigProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Namespace
	}).(pulumi.StringPtrOutput)
}

// An object representing a launch template specification for AWS EKS Nodegroup.
type NodegroupLaunchTemplateSpecification struct {
	// The ID of the launch template.
	//
	// You must specify either the launch template ID or the launch template name in the request, but not both. After node group creation, you cannot use a different ID.
	Id *string `pulumi:"id"`
	// The name of the launch template.
	//
	// You must specify either the launch template name or the launch template ID in the request, but not both. After node group creation, you cannot use a different name.
	Name *string `pulumi:"name"`
	// The version number of the launch template to use. If no version is specified, then the template's default version is used. You can use a different version for node group updates.
	Version *string `pulumi:"version"`
}

// NodegroupLaunchTemplateSpecificationInput is an input type that accepts NodegroupLaunchTemplateSpecificationArgs and NodegroupLaunchTemplateSpecificationOutput values.
// You can construct a concrete instance of `NodegroupLaunchTemplateSpecificationInput` via:
//
//	NodegroupLaunchTemplateSpecificationArgs{...}
type NodegroupLaunchTemplateSpecificationInput interface {
	pulumi.Input

	ToNodegroupLaunchTemplateSpecificationOutput() NodegroupLaunchTemplateSpecificationOutput
	ToNodegroupLaunchTemplateSpecificationOutputWithContext(context.Context) NodegroupLaunchTemplateSpecificationOutput
}

// An object representing a launch template specification for AWS EKS Nodegroup.
type NodegroupLaunchTemplateSpecificationArgs struct {
	// The ID of the launch template.
	//
	// You must specify either the launch template ID or the launch template name in the request, but not both. After node group creation, you cannot use a different ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the launch template.
	//
	// You must specify either the launch template name or the launch template ID in the request, but not both. After node group creation, you cannot use a different name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The version number of the launch template to use. If no version is specified, then the template's default version is used. You can use a different version for node group updates.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (NodegroupLaunchTemplateSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodegroupLaunchTemplateSpecification)(nil)).Elem()
}

func (i NodegroupLaunchTemplateSpecificationArgs) ToNodegroupLaunchTemplateSpecificationOutput() NodegroupLaunchTemplateSpecificationOutput {
	return i.ToNodegroupLaunchTemplateSpecificationOutputWithContext(context.Background())
}

func (i NodegroupLaunchTemplateSpecificationArgs) ToNodegroupLaunchTemplateSpecificationOutputWithContext(ctx context.Context) NodegroupLaunchTemplateSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodegroupLaunchTemplateSpecificationOutput)
}

func (i NodegroupLaunchTemplateSpecificationArgs) ToNodegroupLaunchTemplateSpecificationPtrOutput() NodegroupLaunchTemplateSpecificationPtrOutput {
	return i.ToNodegroupLaunchTemplateSpecificationPtrOutputWithContext(context.Background())
}

func (i NodegroupLaunchTemplateSpecificationArgs) ToNodegroupLaunchTemplateSpecificationPtrOutputWithContext(ctx context.Context) NodegroupLaunchTemplateSpecificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodegroupLaunchTemplateSpecificationOutput).ToNodegroupLaunchTemplateSpecificationPtrOutputWithContext(ctx)
}

// NodegroupLaunchTemplateSpecificationPtrInput is an input type that accepts NodegroupLaunchTemplateSpecificationArgs, NodegroupLaunchTemplateSpecificationPtr and NodegroupLaunchTemplateSpecificationPtrOutput values.
// You can construct a concrete instance of `NodegroupLaunchTemplateSpecificationPtrInput` via:
//
//	        NodegroupLaunchTemplateSpecificationArgs{...}
//
//	or:
//
//	        nil
type NodegroupLaunchTemplateSpecificationPtrInput interface {
	pulumi.Input

	ToNodegroupLaunchTemplateSpecificationPtrOutput() NodegroupLaunchTemplateSpecificationPtrOutput
	ToNodegroupLaunchTemplateSpecificationPtrOutputWithContext(context.Context) NodegroupLaunchTemplateSpecificationPtrOutput
}

type nodegroupLaunchTemplateSpecificationPtrType NodegroupLaunchTemplateSpecificationArgs

func NodegroupLaunchTemplateSpecificationPtr(v *NodegroupLaunchTemplateSpecificationArgs) NodegroupLaunchTemplateSpecificationPtrInput {
	return (*nodegroupLaunchTemplateSpecificationPtrType)(v)
}

func (*nodegroupLaunchTemplateSpecificationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodegroupLaunchTemplateSpecification)(nil)).Elem()
}

func (i *nodegroupLaunchTemplateSpecificationPtrType) ToNodegroupLaunchTemplateSpecificationPtrOutput() NodegroupLaunchTemplateSpecificationPtrOutput {
	return i.ToNodegroupLaunchTemplateSpecificationPtrOutputWithContext(context.Background())
}

func (i *nodegroupLaunchTemplateSpecificationPtrType) ToNodegroupLaunchTemplateSpecificationPtrOutputWithContext(ctx context.Context) NodegroupLaunchTemplateSpecificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodegroupLaunchTemplateSpecificationPtrOutput)
}

// An object representing a launch template specification for AWS EKS Nodegroup.
type NodegroupLaunchTemplateSpecificationOutput struct{ *pulumi.OutputState }

func (NodegroupLaunchTemplateSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodegroupLaunchTemplateSpecification)(nil)).Elem()
}

func (o NodegroupLaunchTemplateSpecificationOutput) ToNodegroupLaunchTemplateSpecificationOutput() NodegroupLaunchTemplateSpecificationOutput {
	return o
}

func (o NodegroupLaunchTemplateSpecificationOutput) ToNodegroupLaunchTemplateSpecificationOutputWithContext(ctx context.Context) NodegroupLaunchTemplateSpecificationOutput {
	return o
}

func (o NodegroupLaunchTemplateSpecificationOutput) ToNodegroupLaunchTemplateSpecificationPtrOutput() NodegroupLaunchTemplateSpecificationPtrOutput {
	return o.ToNodegroupLaunchTemplateSpecificationPtrOutputWithContext(context.Background())
}

func (o NodegroupLaunchTemplateSpecificationOutput) ToNodegroupLaunchTemplateSpecificationPtrOutputWithContext(ctx context.Context) NodegroupLaunchTemplateSpecificationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodegroupLaunchTemplateSpecification) *NodegroupLaunchTemplateSpecification {
		return &v
	}).(NodegroupLaunchTemplateSpecificationPtrOutput)
}

// The ID of the launch template.
//
// You must specify either the launch template ID or the launch template name in the request, but not both. After node group creation, you cannot use a different ID.
func (o NodegroupLaunchTemplateSpecificationOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodegroupLaunchTemplateSpecification) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The name of the launch template.
//
// You must specify either the launch template name or the launch template ID in the request, but not both. After node group creation, you cannot use a different name.
func (o NodegroupLaunchTemplateSpecificationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodegroupLaunchTemplateSpecification) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The version number of the launch template to use. If no version is specified, then the template's default version is used. You can use a different version for node group updates.
func (o NodegroupLaunchTemplateSpecificationOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodegroupLaunchTemplateSpecification) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type NodegroupLaunchTemplateSpecificationPtrOutput struct{ *pulumi.OutputState }

func (NodegroupLaunchTemplateSpecificationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodegroupLaunchTemplateSpecification)(nil)).Elem()
}

func (o NodegroupLaunchTemplateSpecificationPtrOutput) ToNodegroupLaunchTemplateSpecificationPtrOutput() NodegroupLaunchTemplateSpecificationPtrOutput {
	return o
}

func (o NodegroupLaunchTemplateSpecificationPtrOutput) ToNodegroupLaunchTemplateSpecificationPtrOutputWithContext(ctx context.Context) NodegroupLaunchTemplateSpecificationPtrOutput {
	return o
}

func (o NodegroupLaunchTemplateSpecificationPtrOutput) Elem() NodegroupLaunchTemplateSpecificationOutput {
	return o.ApplyT(func(v *NodegroupLaunchTemplateSpecification) NodegroupLaunchTemplateSpecification {
		if v != nil {
			return *v
		}
		var ret NodegroupLaunchTemplateSpecification
		return ret
	}).(NodegroupLaunchTemplateSpecificationOutput)
}

// The ID of the launch template.
//
// You must specify either the launch template ID or the launch template name in the request, but not both. After node group creation, you cannot use a different ID.
func (o NodegroupLaunchTemplateSpecificationPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodegroupLaunchTemplateSpecification) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The name of the launch template.
//
// You must specify either the launch template name or the launch template ID in the request, but not both. After node group creation, you cannot use a different name.
func (o NodegroupLaunchTemplateSpecificationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodegroupLaunchTemplateSpecification) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The version number of the launch template to use. If no version is specified, then the template's default version is used. You can use a different version for node group updates.
func (o NodegroupLaunchTemplateSpecificationPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodegroupLaunchTemplateSpecification) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// The node auto repair configuration for node group.
type NodegroupNodeRepairConfig struct {
	// Set this value to true to enable node auto repair for the node group.
	Enabled *bool `pulumi:"enabled"`
}

// NodegroupNodeRepairConfigInput is an input type that accepts NodegroupNodeRepairConfigArgs and NodegroupNodeRepairConfigOutput values.
// You can construct a concrete instance of `NodegroupNodeRepairConfigInput` via:
//
//	NodegroupNodeRepairConfigArgs{...}
type NodegroupNodeRepairConfigInput interface {
	pulumi.Input

	ToNodegroupNodeRepairConfigOutput() NodegroupNodeRepairConfigOutput
	ToNodegroupNodeRepairConfigOutputWithContext(context.Context) NodegroupNodeRepairConfigOutput
}

// The node auto repair configuration for node group.
type NodegroupNodeRepairConfigArgs struct {
	// Set this value to true to enable node auto repair for the node group.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (NodegroupNodeRepairConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodegroupNodeRepairConfig)(nil)).Elem()
}

func (i NodegroupNodeRepairConfigArgs) ToNodegroupNodeRepairConfigOutput() NodegroupNodeRepairConfigOutput {
	return i.ToNodegroupNodeRepairConfigOutputWithContext(context.Background())
}

func (i NodegroupNodeRepairConfigArgs) ToNodegroupNodeRepairConfigOutputWithContext(ctx context.Context) NodegroupNodeRepairConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodegroupNodeRepairConfigOutput)
}

func (i NodegroupNodeRepairConfigArgs) ToNodegroupNodeRepairConfigPtrOutput() NodegroupNodeRepairConfigPtrOutput {
	return i.ToNodegroupNodeRepairConfigPtrOutputWithContext(context.Background())
}

func (i NodegroupNodeRepairConfigArgs) ToNodegroupNodeRepairConfigPtrOutputWithContext(ctx context.Context) NodegroupNodeRepairConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodegroupNodeRepairConfigOutput).ToNodegroupNodeRepairConfigPtrOutputWithContext(ctx)
}

// NodegroupNodeRepairConfigPtrInput is an input type that accepts NodegroupNodeRepairConfigArgs, NodegroupNodeRepairConfigPtr and NodegroupNodeRepairConfigPtrOutput values.
// You can construct a concrete instance of `NodegroupNodeRepairConfigPtrInput` via:
//
//	        NodegroupNodeRepairConfigArgs{...}
//
//	or:
//
//	        nil
type NodegroupNodeRepairConfigPtrInput interface {
	pulumi.Input

	ToNodegroupNodeRepairConfigPtrOutput() NodegroupNodeRepairConfigPtrOutput
	ToNodegroupNodeRepairConfigPtrOutputWithContext(context.Context) NodegroupNodeRepairConfigPtrOutput
}

type nodegroupNodeRepairConfigPtrType NodegroupNodeRepairConfigArgs

func NodegroupNodeRepairConfigPtr(v *NodegroupNodeRepairConfigArgs) NodegroupNodeRepairConfigPtrInput {
	return (*nodegroupNodeRepairConfigPtrType)(v)
}

func (*nodegroupNodeRepairConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodegroupNodeRepairConfig)(nil)).Elem()
}

func (i *nodegroupNodeRepairConfigPtrType) ToNodegroupNodeRepairConfigPtrOutput() NodegroupNodeRepairConfigPtrOutput {
	return i.ToNodegroupNodeRepairConfigPtrOutputWithContext(context.Background())
}

func (i *nodegroupNodeRepairConfigPtrType) ToNodegroupNodeRepairConfigPtrOutputWithContext(ctx context.Context) NodegroupNodeRepairConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodegroupNodeRepairConfigPtrOutput)
}

// The node auto repair configuration for node group.
type NodegroupNodeRepairConfigOutput struct{ *pulumi.OutputState }

func (NodegroupNodeRepairConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodegroupNodeRepairConfig)(nil)).Elem()
}

func (o NodegroupNodeRepairConfigOutput) ToNodegroupNodeRepairConfigOutput() NodegroupNodeRepairConfigOutput {
	return o
}

func (o NodegroupNodeRepairConfigOutput) ToNodegroupNodeRepairConfigOutputWithContext(ctx context.Context) NodegroupNodeRepairConfigOutput {
	return o
}

func (o NodegroupNodeRepairConfigOutput) ToNodegroupNodeRepairConfigPtrOutput() NodegroupNodeRepairConfigPtrOutput {
	return o.ToNodegroupNodeRepairConfigPtrOutputWithContext(context.Background())
}

func (o NodegroupNodeRepairConfigOutput) ToNodegroupNodeRepairConfigPtrOutputWithContext(ctx context.Context) NodegroupNodeRepairConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodegroupNodeRepairConfig) *NodegroupNodeRepairConfig {
		return &v
	}).(NodegroupNodeRepairConfigPtrOutput)
}

// Set this value to true to enable node auto repair for the node group.
func (o NodegroupNodeRepairConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NodegroupNodeRepairConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type NodegroupNodeRepairConfigPtrOutput struct{ *pulumi.OutputState }

func (NodegroupNodeRepairConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodegroupNodeRepairConfig)(nil)).Elem()
}

func (o NodegroupNodeRepairConfigPtrOutput) ToNodegroupNodeRepairConfigPtrOutput() NodegroupNodeRepairConfigPtrOutput {
	return o
}

func (o NodegroupNodeRepairConfigPtrOutput) ToNodegroupNodeRepairConfigPtrOutputWithContext(ctx context.Context) NodegroupNodeRepairConfigPtrOutput {
	return o
}

func (o NodegroupNodeRepairConfigPtrOutput) Elem() NodegroupNodeRepairConfigOutput {
	return o.ApplyT(func(v *NodegroupNodeRepairConfig) NodegroupNodeRepairConfig {
		if v != nil {
			return *v
		}
		var ret NodegroupNodeRepairConfig
		return ret
	}).(NodegroupNodeRepairConfigOutput)
}

// Set this value to true to enable node auto repair for the node group.
func (o NodegroupNodeRepairConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodegroupNodeRepairConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// An object representing a remote access configuration specification for AWS EKS Nodegroup.
type NodegroupRemoteAccess struct {
	// The Amazon EC2 SSH key name that provides access for SSH communication with the nodes in the managed node group. For more information, see [Amazon EC2 key pairs and Linux instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html) in the *Amazon Elastic Compute Cloud User Guide for Linux Instances* . For Windows, an Amazon EC2 SSH key is used to obtain the RDP password. For more information, see [Amazon EC2 key pairs and Windows instances](https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-key-pairs.html) in the *Amazon Elastic Compute Cloud User Guide for Windows Instances* .
	Ec2SshKey string `pulumi:"ec2SshKey"`
	// The security group IDs that are allowed SSH access (port 22) to the nodes. For Windows, the port is 3389. If you specify an Amazon EC2 SSH key but don't specify a source security group when you create a managed node group, then the port on the nodes is opened to the internet ( `0.0.0.0/0` ). For more information, see [Security Groups for Your VPC](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html) in the *Amazon Virtual Private Cloud User Guide* .
	SourceSecurityGroups []string `pulumi:"sourceSecurityGroups"`
}

// NodegroupRemoteAccessInput is an input type that accepts NodegroupRemoteAccessArgs and NodegroupRemoteAccessOutput values.
// You can construct a concrete instance of `NodegroupRemoteAccessInput` via:
//
//	NodegroupRemoteAccessArgs{...}
type NodegroupRemoteAccessInput interface {
	pulumi.Input

	ToNodegroupRemoteAccessOutput() NodegroupRemoteAccessOutput
	ToNodegroupRemoteAccessOutputWithContext(context.Context) NodegroupRemoteAccessOutput
}

// An object representing a remote access configuration specification for AWS EKS Nodegroup.
type NodegroupRemoteAccessArgs struct {
	// The Amazon EC2 SSH key name that provides access for SSH communication with the nodes in the managed node group. For more information, see [Amazon EC2 key pairs and Linux instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html) in the *Amazon Elastic Compute Cloud User Guide for Linux Instances* . For Windows, an Amazon EC2 SSH key is used to obtain the RDP password. For more information, see [Amazon EC2 key pairs and Windows instances](https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-key-pairs.html) in the *Amazon Elastic Compute Cloud User Guide for Windows Instances* .
	Ec2SshKey pulumi.StringInput `pulumi:"ec2SshKey"`
	// The security group IDs that are allowed SSH access (port 22) to the nodes. For Windows, the port is 3389. If you specify an Amazon EC2 SSH key but don't specify a source security group when you create a managed node group, then the port on the nodes is opened to the internet ( `0.0.0.0/0` ). For more information, see [Security Groups for Your VPC](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html) in the *Amazon Virtual Private Cloud User Guide* .
	SourceSecurityGroups pulumi.StringArrayInput `pulumi:"sourceSecurityGroups"`
}

func (NodegroupRemoteAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodegroupRemoteAccess)(nil)).Elem()
}

func (i NodegroupRemoteAccessArgs) ToNodegroupRemoteAccessOutput() NodegroupRemoteAccessOutput {
	return i.ToNodegroupRemoteAccessOutputWithContext(context.Background())
}

func (i NodegroupRemoteAccessArgs) ToNodegroupRemoteAccessOutputWithContext(ctx context.Context) NodegroupRemoteAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodegroupRemoteAccessOutput)
}

func (i NodegroupRemoteAccessArgs) ToNodegroupRemoteAccessPtrOutput() NodegroupRemoteAccessPtrOutput {
	return i.ToNodegroupRemoteAccessPtrOutputWithContext(context.Background())
}

func (i NodegroupRemoteAccessArgs) ToNodegroupRemoteAccessPtrOutputWithContext(ctx context.Context) NodegroupRemoteAccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodegroupRemoteAccessOutput).ToNodegroupRemoteAccessPtrOutputWithContext(ctx)
}

// NodegroupRemoteAccessPtrInput is an input type that accepts NodegroupRemoteAccessArgs, NodegroupRemoteAccessPtr and NodegroupRemoteAccessPtrOutput values.
// You can construct a concrete instance of `NodegroupRemoteAccessPtrInput` via:
//
//	        NodegroupRemoteAccessArgs{...}
//
//	or:
//
//	        nil
type NodegroupRemoteAccessPtrInput interface {
	pulumi.Input

	ToNodegroupRemoteAccessPtrOutput() NodegroupRemoteAccessPtrOutput
	ToNodegroupRemoteAccessPtrOutputWithContext(context.Context) NodegroupRemoteAccessPtrOutput
}

type nodegroupRemoteAccessPtrType NodegroupRemoteAccessArgs

func NodegroupRemoteAccessPtr(v *NodegroupRemoteAccessArgs) NodegroupRemoteAccessPtrInput {
	return (*nodegroupRemoteAccessPtrType)(v)
}

func (*nodegroupRemoteAccessPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodegroupRemoteAccess)(nil)).Elem()
}

func (i *nodegroupRemoteAccessPtrType) ToNodegroupRemoteAccessPtrOutput() NodegroupRemoteAccessPtrOutput {
	return i.ToNodegroupRemoteAccessPtrOutputWithContext(context.Background())
}

func (i *nodegroupRemoteAccessPtrType) ToNodegroupRemoteAccessPtrOutputWithContext(ctx context.Context) NodegroupRemoteAccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodegroupRemoteAccessPtrOutput)
}

// An object representing a remote access configuration specification for AWS EKS Nodegroup.
type NodegroupRemoteAccessOutput struct{ *pulumi.OutputState }

func (NodegroupRemoteAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodegroupRemoteAccess)(nil)).Elem()
}

func (o NodegroupRemoteAccessOutput) ToNodegroupRemoteAccessOutput() NodegroupRemoteAccessOutput {
	return o
}

func (o NodegroupRemoteAccessOutput) ToNodegroupRemoteAccessOutputWithContext(ctx context.Context) NodegroupRemoteAccessOutput {
	return o
}

func (o NodegroupRemoteAccessOutput) ToNodegroupRemoteAccessPtrOutput() NodegroupRemoteAccessPtrOutput {
	return o.ToNodegroupRemoteAccessPtrOutputWithContext(context.Background())
}

func (o NodegroupRemoteAccessOutput) ToNodegroupRemoteAccessPtrOutputWithContext(ctx context.Context) NodegroupRemoteAccessPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodegroupRemoteAccess) *NodegroupRemoteAccess {
		return &v
	}).(NodegroupRemoteAccessPtrOutput)
}

// The Amazon EC2 SSH key name that provides access for SSH communication with the nodes in the managed node group. For more information, see [Amazon EC2 key pairs and Linux instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html) in the *Amazon Elastic Compute Cloud User Guide for Linux Instances* . For Windows, an Amazon EC2 SSH key is used to obtain the RDP password. For more information, see [Amazon EC2 key pairs and Windows instances](https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-key-pairs.html) in the *Amazon Elastic Compute Cloud User Guide for Windows Instances* .
func (o NodegroupRemoteAccessOutput) Ec2SshKey() pulumi.StringOutput {
	return o.ApplyT(func(v NodegroupRemoteAccess) string { return v.Ec2SshKey }).(pulumi.StringOutput)
}

// The security group IDs that are allowed SSH access (port 22) to the nodes. For Windows, the port is 3389. If you specify an Amazon EC2 SSH key but don't specify a source security group when you create a managed node group, then the port on the nodes is opened to the internet ( `0.0.0.0/0` ). For more information, see [Security Groups for Your VPC](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html) in the *Amazon Virtual Private Cloud User Guide* .
func (o NodegroupRemoteAccessOutput) SourceSecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NodegroupRemoteAccess) []string { return v.SourceSecurityGroups }).(pulumi.StringArrayOutput)
}

type NodegroupRemoteAccessPtrOutput struct{ *pulumi.OutputState }

func (NodegroupRemoteAccessPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodegroupRemoteAccess)(nil)).Elem()
}

func (o NodegroupRemoteAccessPtrOutput) ToNodegroupRemoteAccessPtrOutput() NodegroupRemoteAccessPtrOutput {
	return o
}

func (o NodegroupRemoteAccessPtrOutput) ToNodegroupRemoteAccessPtrOutputWithContext(ctx context.Context) NodegroupRemoteAccessPtrOutput {
	return o
}

func (o NodegroupRemoteAccessPtrOutput) Elem() NodegroupRemoteAccessOutput {
	return o.ApplyT(func(v *NodegroupRemoteAccess) NodegroupRemoteAccess {
		if v != nil {
			return *v
		}
		var ret NodegroupRemoteAccess
		return ret
	}).(NodegroupRemoteAccessOutput)
}

// The Amazon EC2 SSH key name that provides access for SSH communication with the nodes in the managed node group. For more information, see [Amazon EC2 key pairs and Linux instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html) in the *Amazon Elastic Compute Cloud User Guide for Linux Instances* . For Windows, an Amazon EC2 SSH key is used to obtain the RDP password. For more information, see [Amazon EC2 key pairs and Windows instances](https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-key-pairs.html) in the *Amazon Elastic Compute Cloud User Guide for Windows Instances* .
func (o NodegroupRemoteAccessPtrOutput) Ec2SshKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodegroupRemoteAccess) *string {
		if v == nil {
			return nil
		}
		return &v.Ec2SshKey
	}).(pulumi.StringPtrOutput)
}

// The security group IDs that are allowed SSH access (port 22) to the nodes. For Windows, the port is 3389. If you specify an Amazon EC2 SSH key but don't specify a source security group when you create a managed node group, then the port on the nodes is opened to the internet ( `0.0.0.0/0` ). For more information, see [Security Groups for Your VPC](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html) in the *Amazon Virtual Private Cloud User Guide* .
func (o NodegroupRemoteAccessPtrOutput) SourceSecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NodegroupRemoteAccess) []string {
		if v == nil {
			return nil
		}
		return v.SourceSecurityGroups
	}).(pulumi.StringArrayOutput)
}

// An object representing a auto scaling group specification for AWS EKS Nodegroup.
type NodegroupScalingConfig struct {
	// The current number of nodes that the managed node group should maintain.
	//
	// > If you use the Kubernetes [Cluster Autoscaler](https://docs.aws.amazon.com/https://github.com/kubernetes/autoscaler#kubernetes-autoscaler) , you shouldn't change the `desiredSize` value directly, as this can cause the Cluster Autoscaler to suddenly scale up or scale down.
	//
	// Whenever this parameter changes, the number of worker nodes in the node group is updated to the specified size. If this parameter is given a value that is smaller than the current number of running worker nodes, the necessary number of worker nodes are terminated to match the given value. When using CloudFormation, no action occurs if you remove this parameter from your CFN template.
	//
	// This parameter can be different from `minSize` in some cases, such as when starting with extra hosts for testing. This parameter can also be different when you want to start with an estimated number of needed hosts, but let the Cluster Autoscaler reduce the number if there are too many. When the Cluster Autoscaler is used, the `desiredSize` parameter is altered by the Cluster Autoscaler (but can be out-of-date for short periods of time). the Cluster Autoscaler doesn't scale a managed node group lower than `minSize` or higher than `maxSize` .
	DesiredSize *int `pulumi:"desiredSize"`
	// The maximum number of nodes that the managed node group can scale out to. For information about the maximum number that you can specify, see [Amazon EKS service quotas](https://docs.aws.amazon.com/eks/latest/userguide/service-quotas.html) in the *Amazon EKS User Guide* .
	MaxSize *int `pulumi:"maxSize"`
	// The minimum number of nodes that the managed node group can scale in to.
	MinSize *int `pulumi:"minSize"`
}

// NodegroupScalingConfigInput is an input type that accepts NodegroupScalingConfigArgs and NodegroupScalingConfigOutput values.
// You can construct a concrete instance of `NodegroupScalingConfigInput` via:
//
//	NodegroupScalingConfigArgs{...}
type NodegroupScalingConfigInput interface {
	pulumi.Input

	ToNodegroupScalingConfigOutput() NodegroupScalingConfigOutput
	ToNodegroupScalingConfigOutputWithContext(context.Context) NodegroupScalingConfigOutput
}

// An object representing a auto scaling group specification for AWS EKS Nodegroup.
type NodegroupScalingConfigArgs struct {
	// The current number of nodes that the managed node group should maintain.
	//
	// > If you use the Kubernetes [Cluster Autoscaler](https://docs.aws.amazon.com/https://github.com/kubernetes/autoscaler#kubernetes-autoscaler) , you shouldn't change the `desiredSize` value directly, as this can cause the Cluster Autoscaler to suddenly scale up or scale down.
	//
	// Whenever this parameter changes, the number of worker nodes in the node group is updated to the specified size. If this parameter is given a value that is smaller than the current number of running worker nodes, the necessary number of worker nodes are terminated to match the given value. When using CloudFormation, no action occurs if you remove this parameter from your CFN template.
	//
	// This parameter can be different from `minSize` in some cases, such as when starting with extra hosts for testing. This parameter can also be different when you want to start with an estimated number of needed hosts, but let the Cluster Autoscaler reduce the number if there are too many. When the Cluster Autoscaler is used, the `desiredSize` parameter is altered by the Cluster Autoscaler (but can be out-of-date for short periods of time). the Cluster Autoscaler doesn't scale a managed node group lower than `minSize` or higher than `maxSize` .
	DesiredSize pulumi.IntPtrInput `pulumi:"desiredSize"`
	// The maximum number of nodes that the managed node group can scale out to. For information about the maximum number that you can specify, see [Amazon EKS service quotas](https://docs.aws.amazon.com/eks/latest/userguide/service-quotas.html) in the *Amazon EKS User Guide* .
	MaxSize pulumi.IntPtrInput `pulumi:"maxSize"`
	// The minimum number of nodes that the managed node group can scale in to.
	MinSize pulumi.IntPtrInput `pulumi:"minSize"`
}

func (NodegroupScalingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodegroupScalingConfig)(nil)).Elem()
}

func (i NodegroupScalingConfigArgs) ToNodegroupScalingConfigOutput() NodegroupScalingConfigOutput {
	return i.ToNodegroupScalingConfigOutputWithContext(context.Background())
}

func (i NodegroupScalingConfigArgs) ToNodegroupScalingConfigOutputWithContext(ctx context.Context) NodegroupScalingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodegroupScalingConfigOutput)
}

func (i NodegroupScalingConfigArgs) ToNodegroupScalingConfigPtrOutput() NodegroupScalingConfigPtrOutput {
	return i.ToNodegroupScalingConfigPtrOutputWithContext(context.Background())
}

func (i NodegroupScalingConfigArgs) ToNodegroupScalingConfigPtrOutputWithContext(ctx context.Context) NodegroupScalingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodegroupScalingConfigOutput).ToNodegroupScalingConfigPtrOutputWithContext(ctx)
}

// NodegroupScalingConfigPtrInput is an input type that accepts NodegroupScalingConfigArgs, NodegroupScalingConfigPtr and NodegroupScalingConfigPtrOutput values.
// You can construct a concrete instance of `NodegroupScalingConfigPtrInput` via:
//
//	        NodegroupScalingConfigArgs{...}
//
//	or:
//
//	        nil
type NodegroupScalingConfigPtrInput interface {
	pulumi.Input

	ToNodegroupScalingConfigPtrOutput() NodegroupScalingConfigPtrOutput
	ToNodegroupScalingConfigPtrOutputWithContext(context.Context) NodegroupScalingConfigPtrOutput
}

type nodegroupScalingConfigPtrType NodegroupScalingConfigArgs

func NodegroupScalingConfigPtr(v *NodegroupScalingConfigArgs) NodegroupScalingConfigPtrInput {
	return (*nodegroupScalingConfigPtrType)(v)
}

func (*nodegroupScalingConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodegroupScalingConfig)(nil)).Elem()
}

func (i *nodegroupScalingConfigPtrType) ToNodegroupScalingConfigPtrOutput() NodegroupScalingConfigPtrOutput {
	return i.ToNodegroupScalingConfigPtrOutputWithContext(context.Background())
}

func (i *nodegroupScalingConfigPtrType) ToNodegroupScalingConfigPtrOutputWithContext(ctx context.Context) NodegroupScalingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodegroupScalingConfigPtrOutput)
}

// An object representing a auto scaling group specification for AWS EKS Nodegroup.
type NodegroupScalingConfigOutput struct{ *pulumi.OutputState }

func (NodegroupScalingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodegroupScalingConfig)(nil)).Elem()
}

func (o NodegroupScalingConfigOutput) ToNodegroupScalingConfigOutput() NodegroupScalingConfigOutput {
	return o
}

func (o NodegroupScalingConfigOutput) ToNodegroupScalingConfigOutputWithContext(ctx context.Context) NodegroupScalingConfigOutput {
	return o
}

func (o NodegroupScalingConfigOutput) ToNodegroupScalingConfigPtrOutput() NodegroupScalingConfigPtrOutput {
	return o.ToNodegroupScalingConfigPtrOutputWithContext(context.Background())
}

func (o NodegroupScalingConfigOutput) ToNodegroupScalingConfigPtrOutputWithContext(ctx context.Context) NodegroupScalingConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodegroupScalingConfig) *NodegroupScalingConfig {
		return &v
	}).(NodegroupScalingConfigPtrOutput)
}

// The current number of nodes that the managed node group should maintain.
//
// > If you use the Kubernetes [Cluster Autoscaler](https://docs.aws.amazon.com/https://github.com/kubernetes/autoscaler#kubernetes-autoscaler) , you shouldn't change the `desiredSize` value directly, as this can cause the Cluster Autoscaler to suddenly scale up or scale down.
//
// Whenever this parameter changes, the number of worker nodes in the node group is updated to the specified size. If this parameter is given a value that is smaller than the current number of running worker nodes, the necessary number of worker nodes are terminated to match the given value. When using CloudFormation, no action occurs if you remove this parameter from your CFN template.
//
// This parameter can be different from `minSize` in some cases, such as when starting with extra hosts for testing. This parameter can also be different when you want to start with an estimated number of needed hosts, but let the Cluster Autoscaler reduce the number if there are too many. When the Cluster Autoscaler is used, the `desiredSize` parameter is altered by the Cluster Autoscaler (but can be out-of-date for short periods of time). the Cluster Autoscaler doesn't scale a managed node group lower than `minSize` or higher than `maxSize` .
func (o NodegroupScalingConfigOutput) DesiredSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodegroupScalingConfig) *int { return v.DesiredSize }).(pulumi.IntPtrOutput)
}

// The maximum number of nodes that the managed node group can scale out to. For information about the maximum number that you can specify, see [Amazon EKS service quotas](https://docs.aws.amazon.com/eks/latest/userguide/service-quotas.html) in the *Amazon EKS User Guide* .
func (o NodegroupScalingConfigOutput) MaxSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodegroupScalingConfig) *int { return v.MaxSize }).(pulumi.IntPtrOutput)
}

// The minimum number of nodes that the managed node group can scale in to.
func (o NodegroupScalingConfigOutput) MinSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodegroupScalingConfig) *int { return v.MinSize }).(pulumi.IntPtrOutput)
}

type NodegroupScalingConfigPtrOutput struct{ *pulumi.OutputState }

func (NodegroupScalingConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodegroupScalingConfig)(nil)).Elem()
}

func (o NodegroupScalingConfigPtrOutput) ToNodegroupScalingConfigPtrOutput() NodegroupScalingConfigPtrOutput {
	return o
}

func (o NodegroupScalingConfigPtrOutput) ToNodegroupScalingConfigPtrOutputWithContext(ctx context.Context) NodegroupScalingConfigPtrOutput {
	return o
}

func (o NodegroupScalingConfigPtrOutput) Elem() NodegroupScalingConfigOutput {
	return o.ApplyT(func(v *NodegroupScalingConfig) NodegroupScalingConfig {
		if v != nil {
			return *v
		}
		var ret NodegroupScalingConfig
		return ret
	}).(NodegroupScalingConfigOutput)
}

// The current number of nodes that the managed node group should maintain.
//
// > If you use the Kubernetes [Cluster Autoscaler](https://docs.aws.amazon.com/https://github.com/kubernetes/autoscaler#kubernetes-autoscaler) , you shouldn't change the `desiredSize` value directly, as this can cause the Cluster Autoscaler to suddenly scale up or scale down.
//
// Whenever this parameter changes, the number of worker nodes in the node group is updated to the specified size. If this parameter is given a value that is smaller than the current number of running worker nodes, the necessary number of worker nodes are terminated to match the given value. When using CloudFormation, no action occurs if you remove this parameter from your CFN template.
//
// This parameter can be different from `minSize` in some cases, such as when starting with extra hosts for testing. This parameter can also be different when you want to start with an estimated number of needed hosts, but let the Cluster Autoscaler reduce the number if there are too many. When the Cluster Autoscaler is used, the `desiredSize` parameter is altered by the Cluster Autoscaler (but can be out-of-date for short periods of time). the Cluster Autoscaler doesn't scale a managed node group lower than `minSize` or higher than `maxSize` .
func (o NodegroupScalingConfigPtrOutput) DesiredSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodegroupScalingConfig) *int {
		if v == nil {
			return nil
		}
		return v.DesiredSize
	}).(pulumi.IntPtrOutput)
}

// The maximum number of nodes that the managed node group can scale out to. For information about the maximum number that you can specify, see [Amazon EKS service quotas](https://docs.aws.amazon.com/eks/latest/userguide/service-quotas.html) in the *Amazon EKS User Guide* .
func (o NodegroupScalingConfigPtrOutput) MaxSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodegroupScalingConfig) *int {
		if v == nil {
			return nil
		}
		return v.MaxSize
	}).(pulumi.IntPtrOutput)
}

// The minimum number of nodes that the managed node group can scale in to.
func (o NodegroupScalingConfigPtrOutput) MinSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodegroupScalingConfig) *int {
		if v == nil {
			return nil
		}
		return v.MinSize
	}).(pulumi.IntPtrOutput)
}

// An object representing a Taint specification for AWS EKS Nodegroup.
type NodegroupTaint struct {
	// The effect of the taint.
	Effect *string `pulumi:"effect"`
	// The key of the taint.
	Key *string `pulumi:"key"`
	// The value of the taint.
	Value *string `pulumi:"value"`
}

// NodegroupTaintInput is an input type that accepts NodegroupTaintArgs and NodegroupTaintOutput values.
// You can construct a concrete instance of `NodegroupTaintInput` via:
//
//	NodegroupTaintArgs{...}
type NodegroupTaintInput interface {
	pulumi.Input

	ToNodegroupTaintOutput() NodegroupTaintOutput
	ToNodegroupTaintOutputWithContext(context.Context) NodegroupTaintOutput
}

// An object representing a Taint specification for AWS EKS Nodegroup.
type NodegroupTaintArgs struct {
	// The effect of the taint.
	Effect pulumi.StringPtrInput `pulumi:"effect"`
	// The key of the taint.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The value of the taint.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (NodegroupTaintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodegroupTaint)(nil)).Elem()
}

func (i NodegroupTaintArgs) ToNodegroupTaintOutput() NodegroupTaintOutput {
	return i.ToNodegroupTaintOutputWithContext(context.Background())
}

func (i NodegroupTaintArgs) ToNodegroupTaintOutputWithContext(ctx context.Context) NodegroupTaintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodegroupTaintOutput)
}

// NodegroupTaintArrayInput is an input type that accepts NodegroupTaintArray and NodegroupTaintArrayOutput values.
// You can construct a concrete instance of `NodegroupTaintArrayInput` via:
//
//	NodegroupTaintArray{ NodegroupTaintArgs{...} }
type NodegroupTaintArrayInput interface {
	pulumi.Input

	ToNodegroupTaintArrayOutput() NodegroupTaintArrayOutput
	ToNodegroupTaintArrayOutputWithContext(context.Context) NodegroupTaintArrayOutput
}

type NodegroupTaintArray []NodegroupTaintInput

func (NodegroupTaintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodegroupTaint)(nil)).Elem()
}

func (i NodegroupTaintArray) ToNodegroupTaintArrayOutput() NodegroupTaintArrayOutput {
	return i.ToNodegroupTaintArrayOutputWithContext(context.Background())
}

func (i NodegroupTaintArray) ToNodegroupTaintArrayOutputWithContext(ctx context.Context) NodegroupTaintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodegroupTaintArrayOutput)
}

// An object representing a Taint specification for AWS EKS Nodegroup.
type NodegroupTaintOutput struct{ *pulumi.OutputState }

func (NodegroupTaintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodegroupTaint)(nil)).Elem()
}

func (o NodegroupTaintOutput) ToNodegroupTaintOutput() NodegroupTaintOutput {
	return o
}

func (o NodegroupTaintOutput) ToNodegroupTaintOutputWithContext(ctx context.Context) NodegroupTaintOutput {
	return o
}

// The effect of the taint.
func (o NodegroupTaintOutput) Effect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodegroupTaint) *string { return v.Effect }).(pulumi.StringPtrOutput)
}

// The key of the taint.
func (o NodegroupTaintOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodegroupTaint) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The value of the taint.
func (o NodegroupTaintOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodegroupTaint) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type NodegroupTaintArrayOutput struct{ *pulumi.OutputState }

func (NodegroupTaintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodegroupTaint)(nil)).Elem()
}

func (o NodegroupTaintArrayOutput) ToNodegroupTaintArrayOutput() NodegroupTaintArrayOutput {
	return o
}

func (o NodegroupTaintArrayOutput) ToNodegroupTaintArrayOutputWithContext(ctx context.Context) NodegroupTaintArrayOutput {
	return o
}

func (o NodegroupTaintArrayOutput) Index(i pulumi.IntInput) NodegroupTaintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodegroupTaint {
		return vs[0].([]NodegroupTaint)[vs[1].(int)]
	}).(NodegroupTaintOutput)
}

// The node group update configuration.
type NodegroupUpdateConfig struct {
	// The maximum number of nodes unavailable at once during a version update. Nodes will be updated in parallel. This value or maxUnavailablePercentage is required to have a value.The maximum number is 100.
	MaxUnavailable *float64 `pulumi:"maxUnavailable"`
	// The maximum percentage of nodes unavailable during a version update. This percentage of nodes will be updated in parallel, up to 100 nodes at once. This value or maxUnavailable is required to have a value.
	MaxUnavailablePercentage *float64 `pulumi:"maxUnavailablePercentage"`
	// The configuration for the behavior to follow during an node group version update of this managed node group. You choose between two possible strategies for replacing nodes during an UpdateNodegroupVersion action.
	UpdateStrategy *string `pulumi:"updateStrategy"`
}

// NodegroupUpdateConfigInput is an input type that accepts NodegroupUpdateConfigArgs and NodegroupUpdateConfigOutput values.
// You can construct a concrete instance of `NodegroupUpdateConfigInput` via:
//
//	NodegroupUpdateConfigArgs{...}
type NodegroupUpdateConfigInput interface {
	pulumi.Input

	ToNodegroupUpdateConfigOutput() NodegroupUpdateConfigOutput
	ToNodegroupUpdateConfigOutputWithContext(context.Context) NodegroupUpdateConfigOutput
}

// The node group update configuration.
type NodegroupUpdateConfigArgs struct {
	// The maximum number of nodes unavailable at once during a version update. Nodes will be updated in parallel. This value or maxUnavailablePercentage is required to have a value.The maximum number is 100.
	MaxUnavailable pulumi.Float64PtrInput `pulumi:"maxUnavailable"`
	// The maximum percentage of nodes unavailable during a version update. This percentage of nodes will be updated in parallel, up to 100 nodes at once. This value or maxUnavailable is required to have a value.
	MaxUnavailablePercentage pulumi.Float64PtrInput `pulumi:"maxUnavailablePercentage"`
	// The configuration for the behavior to follow during an node group version update of this managed node group. You choose between two possible strategies for replacing nodes during an UpdateNodegroupVersion action.
	UpdateStrategy pulumi.StringPtrInput `pulumi:"updateStrategy"`
}

func (NodegroupUpdateConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodegroupUpdateConfig)(nil)).Elem()
}

func (i NodegroupUpdateConfigArgs) ToNodegroupUpdateConfigOutput() NodegroupUpdateConfigOutput {
	return i.ToNodegroupUpdateConfigOutputWithContext(context.Background())
}

func (i NodegroupUpdateConfigArgs) ToNodegroupUpdateConfigOutputWithContext(ctx context.Context) NodegroupUpdateConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodegroupUpdateConfigOutput)
}

func (i NodegroupUpdateConfigArgs) ToNodegroupUpdateConfigPtrOutput() NodegroupUpdateConfigPtrOutput {
	return i.ToNodegroupUpdateConfigPtrOutputWithContext(context.Background())
}

func (i NodegroupUpdateConfigArgs) ToNodegroupUpdateConfigPtrOutputWithContext(ctx context.Context) NodegroupUpdateConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodegroupUpdateConfigOutput).ToNodegroupUpdateConfigPtrOutputWithContext(ctx)
}

// NodegroupUpdateConfigPtrInput is an input type that accepts NodegroupUpdateConfigArgs, NodegroupUpdateConfigPtr and NodegroupUpdateConfigPtrOutput values.
// You can construct a concrete instance of `NodegroupUpdateConfigPtrInput` via:
//
//	        NodegroupUpdateConfigArgs{...}
//
//	or:
//
//	        nil
type NodegroupUpdateConfigPtrInput interface {
	pulumi.Input

	ToNodegroupUpdateConfigPtrOutput() NodegroupUpdateConfigPtrOutput
	ToNodegroupUpdateConfigPtrOutputWithContext(context.Context) NodegroupUpdateConfigPtrOutput
}

type nodegroupUpdateConfigPtrType NodegroupUpdateConfigArgs

func NodegroupUpdateConfigPtr(v *NodegroupUpdateConfigArgs) NodegroupUpdateConfigPtrInput {
	return (*nodegroupUpdateConfigPtrType)(v)
}

func (*nodegroupUpdateConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodegroupUpdateConfig)(nil)).Elem()
}

func (i *nodegroupUpdateConfigPtrType) ToNodegroupUpdateConfigPtrOutput() NodegroupUpdateConfigPtrOutput {
	return i.ToNodegroupUpdateConfigPtrOutputWithContext(context.Background())
}

func (i *nodegroupUpdateConfigPtrType) ToNodegroupUpdateConfigPtrOutputWithContext(ctx context.Context) NodegroupUpdateConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodegroupUpdateConfigPtrOutput)
}

// The node group update configuration.
type NodegroupUpdateConfigOutput struct{ *pulumi.OutputState }

func (NodegroupUpdateConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodegroupUpdateConfig)(nil)).Elem()
}

func (o NodegroupUpdateConfigOutput) ToNodegroupUpdateConfigOutput() NodegroupUpdateConfigOutput {
	return o
}

func (o NodegroupUpdateConfigOutput) ToNodegroupUpdateConfigOutputWithContext(ctx context.Context) NodegroupUpdateConfigOutput {
	return o
}

func (o NodegroupUpdateConfigOutput) ToNodegroupUpdateConfigPtrOutput() NodegroupUpdateConfigPtrOutput {
	return o.ToNodegroupUpdateConfigPtrOutputWithContext(context.Background())
}

func (o NodegroupUpdateConfigOutput) ToNodegroupUpdateConfigPtrOutputWithContext(ctx context.Context) NodegroupUpdateConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodegroupUpdateConfig) *NodegroupUpdateConfig {
		return &v
	}).(NodegroupUpdateConfigPtrOutput)
}

// The maximum number of nodes unavailable at once during a version update. Nodes will be updated in parallel. This value or maxUnavailablePercentage is required to have a value.The maximum number is 100.
func (o NodegroupUpdateConfigOutput) MaxUnavailable() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v NodegroupUpdateConfig) *float64 { return v.MaxUnavailable }).(pulumi.Float64PtrOutput)
}

// The maximum percentage of nodes unavailable during a version update. This percentage of nodes will be updated in parallel, up to 100 nodes at once. This value or maxUnavailable is required to have a value.
func (o NodegroupUpdateConfigOutput) MaxUnavailablePercentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v NodegroupUpdateConfig) *float64 { return v.MaxUnavailablePercentage }).(pulumi.Float64PtrOutput)
}

// The configuration for the behavior to follow during an node group version update of this managed node group. You choose between two possible strategies for replacing nodes during an UpdateNodegroupVersion action.
func (o NodegroupUpdateConfigOutput) UpdateStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodegroupUpdateConfig) *string { return v.UpdateStrategy }).(pulumi.StringPtrOutput)
}

type NodegroupUpdateConfigPtrOutput struct{ *pulumi.OutputState }

func (NodegroupUpdateConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodegroupUpdateConfig)(nil)).Elem()
}

func (o NodegroupUpdateConfigPtrOutput) ToNodegroupUpdateConfigPtrOutput() NodegroupUpdateConfigPtrOutput {
	return o
}

func (o NodegroupUpdateConfigPtrOutput) ToNodegroupUpdateConfigPtrOutputWithContext(ctx context.Context) NodegroupUpdateConfigPtrOutput {
	return o
}

func (o NodegroupUpdateConfigPtrOutput) Elem() NodegroupUpdateConfigOutput {
	return o.ApplyT(func(v *NodegroupUpdateConfig) NodegroupUpdateConfig {
		if v != nil {
			return *v
		}
		var ret NodegroupUpdateConfig
		return ret
	}).(NodegroupUpdateConfigOutput)
}

// The maximum number of nodes unavailable at once during a version update. Nodes will be updated in parallel. This value or maxUnavailablePercentage is required to have a value.The maximum number is 100.
func (o NodegroupUpdateConfigPtrOutput) MaxUnavailable() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *NodegroupUpdateConfig) *float64 {
		if v == nil {
			return nil
		}
		return v.MaxUnavailable
	}).(pulumi.Float64PtrOutput)
}

// The maximum percentage of nodes unavailable during a version update. This percentage of nodes will be updated in parallel, up to 100 nodes at once. This value or maxUnavailable is required to have a value.
func (o NodegroupUpdateConfigPtrOutput) MaxUnavailablePercentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *NodegroupUpdateConfig) *float64 {
		if v == nil {
			return nil
		}
		return v.MaxUnavailablePercentage
	}).(pulumi.Float64PtrOutput)
}

// The configuration for the behavior to follow during an node group version update of this managed node group. You choose between two possible strategies for replacing nodes during an UpdateNodegroupVersion action.
func (o NodegroupUpdateConfigPtrOutput) UpdateStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodegroupUpdateConfig) *string {
		if v == nil {
			return nil
		}
		return v.UpdateStrategy
	}).(pulumi.StringPtrOutput)
}

// A key-value pair to associate with a resource.
type PodIdentityAssociationTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessEntryAccessPolicyInput)(nil)).Elem(), AccessEntryAccessPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessEntryAccessPolicyArrayInput)(nil)).Elem(), AccessEntryAccessPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessEntryAccessScopeInput)(nil)).Elem(), AccessEntryAccessScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AddonPodIdentityAssociationInput)(nil)).Elem(), AddonPodIdentityAssociationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AddonPodIdentityAssociationArrayInput)(nil)).Elem(), AddonPodIdentityAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterAccessConfigInput)(nil)).Elem(), ClusterAccessConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterAccessConfigPtrInput)(nil)).Elem(), ClusterAccessConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterBlockStorageInput)(nil)).Elem(), ClusterBlockStorageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterBlockStoragePtrInput)(nil)).Elem(), ClusterBlockStorageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterComputeConfigInput)(nil)).Elem(), ClusterComputeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterComputeConfigPtrInput)(nil)).Elem(), ClusterComputeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterControlPlanePlacementInput)(nil)).Elem(), ClusterControlPlanePlacementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterControlPlanePlacementPtrInput)(nil)).Elem(), ClusterControlPlanePlacementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterElasticLoadBalancingInput)(nil)).Elem(), ClusterElasticLoadBalancingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterElasticLoadBalancingPtrInput)(nil)).Elem(), ClusterElasticLoadBalancingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterEncryptionConfigInput)(nil)).Elem(), ClusterEncryptionConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterEncryptionConfigArrayInput)(nil)).Elem(), ClusterEncryptionConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterKubernetesNetworkConfigInput)(nil)).Elem(), ClusterKubernetesNetworkConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterKubernetesNetworkConfigPtrInput)(nil)).Elem(), ClusterKubernetesNetworkConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterLoggingEnabledTypesInput)(nil)).Elem(), ClusterLoggingEnabledTypesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterLoggingEnabledTypesPtrInput)(nil)).Elem(), ClusterLoggingEnabledTypesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterLoggingTypeConfigInput)(nil)).Elem(), ClusterLoggingTypeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterLoggingTypeConfigArrayInput)(nil)).Elem(), ClusterLoggingTypeConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterOutpostConfigInput)(nil)).Elem(), ClusterOutpostConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterOutpostConfigPtrInput)(nil)).Elem(), ClusterOutpostConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterProviderInput)(nil)).Elem(), ClusterProviderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterProviderPtrInput)(nil)).Elem(), ClusterProviderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterRemoteNetworkConfigInput)(nil)).Elem(), ClusterRemoteNetworkConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterRemoteNetworkConfigPtrInput)(nil)).Elem(), ClusterRemoteNetworkConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterRemoteNodeNetworkInput)(nil)).Elem(), ClusterRemoteNodeNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterRemoteNodeNetworkArrayInput)(nil)).Elem(), ClusterRemoteNodeNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterRemotePodNetworkInput)(nil)).Elem(), ClusterRemotePodNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterRemotePodNetworkArrayInput)(nil)).Elem(), ClusterRemotePodNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterResourcesVpcConfigInput)(nil)).Elem(), ClusterResourcesVpcConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterStorageConfigInput)(nil)).Elem(), ClusterStorageConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterStorageConfigPtrInput)(nil)).Elem(), ClusterStorageConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterUpgradePolicyInput)(nil)).Elem(), ClusterUpgradePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterUpgradePolicyPtrInput)(nil)).Elem(), ClusterUpgradePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterZonalShiftConfigInput)(nil)).Elem(), ClusterZonalShiftConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterZonalShiftConfigPtrInput)(nil)).Elem(), ClusterZonalShiftConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FargateProfileLabelInput)(nil)).Elem(), FargateProfileLabelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FargateProfileLabelArrayInput)(nil)).Elem(), FargateProfileLabelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FargateProfileSelectorInput)(nil)).Elem(), FargateProfileSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FargateProfileSelectorArrayInput)(nil)).Elem(), FargateProfileSelectorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityProviderConfigOidcIdentityProviderConfigInput)(nil)).Elem(), IdentityProviderConfigOidcIdentityProviderConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityProviderConfigOidcIdentityProviderConfigPtrInput)(nil)).Elem(), IdentityProviderConfigOidcIdentityProviderConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityProviderConfigRequiredClaimInput)(nil)).Elem(), IdentityProviderConfigRequiredClaimArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityProviderConfigRequiredClaimArrayInput)(nil)).Elem(), IdentityProviderConfigRequiredClaimArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingInput)(nil)).Elem(), LoggingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingPtrInput)(nil)).Elem(), LoggingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceConfigPropertiesInput)(nil)).Elem(), NamespaceConfigPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceConfigPropertiesPtrInput)(nil)).Elem(), NamespaceConfigPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodegroupLaunchTemplateSpecificationInput)(nil)).Elem(), NodegroupLaunchTemplateSpecificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodegroupLaunchTemplateSpecificationPtrInput)(nil)).Elem(), NodegroupLaunchTemplateSpecificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodegroupNodeRepairConfigInput)(nil)).Elem(), NodegroupNodeRepairConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodegroupNodeRepairConfigPtrInput)(nil)).Elem(), NodegroupNodeRepairConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodegroupRemoteAccessInput)(nil)).Elem(), NodegroupRemoteAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodegroupRemoteAccessPtrInput)(nil)).Elem(), NodegroupRemoteAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodegroupScalingConfigInput)(nil)).Elem(), NodegroupScalingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodegroupScalingConfigPtrInput)(nil)).Elem(), NodegroupScalingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodegroupTaintInput)(nil)).Elem(), NodegroupTaintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodegroupTaintArrayInput)(nil)).Elem(), NodegroupTaintArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodegroupUpdateConfigInput)(nil)).Elem(), NodegroupUpdateConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodegroupUpdateConfigPtrInput)(nil)).Elem(), NodegroupUpdateConfigArgs{})
	pulumi.RegisterOutputType(AccessEntryAccessPolicyOutput{})
	pulumi.RegisterOutputType(AccessEntryAccessPolicyArrayOutput{})
	pulumi.RegisterOutputType(AccessEntryAccessScopeOutput{})
	pulumi.RegisterOutputType(AddonPodIdentityAssociationOutput{})
	pulumi.RegisterOutputType(AddonPodIdentityAssociationArrayOutput{})
	pulumi.RegisterOutputType(ClusterAccessConfigOutput{})
	pulumi.RegisterOutputType(ClusterAccessConfigPtrOutput{})
	pulumi.RegisterOutputType(ClusterBlockStorageOutput{})
	pulumi.RegisterOutputType(ClusterBlockStoragePtrOutput{})
	pulumi.RegisterOutputType(ClusterComputeConfigOutput{})
	pulumi.RegisterOutputType(ClusterComputeConfigPtrOutput{})
	pulumi.RegisterOutputType(ClusterControlPlanePlacementOutput{})
	pulumi.RegisterOutputType(ClusterControlPlanePlacementPtrOutput{})
	pulumi.RegisterOutputType(ClusterElasticLoadBalancingOutput{})
	pulumi.RegisterOutputType(ClusterElasticLoadBalancingPtrOutput{})
	pulumi.RegisterOutputType(ClusterEncryptionConfigOutput{})
	pulumi.RegisterOutputType(ClusterEncryptionConfigArrayOutput{})
	pulumi.RegisterOutputType(ClusterKubernetesNetworkConfigOutput{})
	pulumi.RegisterOutputType(ClusterKubernetesNetworkConfigPtrOutput{})
	pulumi.RegisterOutputType(ClusterLoggingEnabledTypesOutput{})
	pulumi.RegisterOutputType(ClusterLoggingEnabledTypesPtrOutput{})
	pulumi.RegisterOutputType(ClusterLoggingTypeConfigOutput{})
	pulumi.RegisterOutputType(ClusterLoggingTypeConfigArrayOutput{})
	pulumi.RegisterOutputType(ClusterOutpostConfigOutput{})
	pulumi.RegisterOutputType(ClusterOutpostConfigPtrOutput{})
	pulumi.RegisterOutputType(ClusterProviderOutput{})
	pulumi.RegisterOutputType(ClusterProviderPtrOutput{})
	pulumi.RegisterOutputType(ClusterRemoteNetworkConfigOutput{})
	pulumi.RegisterOutputType(ClusterRemoteNetworkConfigPtrOutput{})
	pulumi.RegisterOutputType(ClusterRemoteNodeNetworkOutput{})
	pulumi.RegisterOutputType(ClusterRemoteNodeNetworkArrayOutput{})
	pulumi.RegisterOutputType(ClusterRemotePodNetworkOutput{})
	pulumi.RegisterOutputType(ClusterRemotePodNetworkArrayOutput{})
	pulumi.RegisterOutputType(ClusterResourcesVpcConfigOutput{})
	pulumi.RegisterOutputType(ClusterResourcesVpcConfigPtrOutput{})
	pulumi.RegisterOutputType(ClusterStorageConfigOutput{})
	pulumi.RegisterOutputType(ClusterStorageConfigPtrOutput{})
	pulumi.RegisterOutputType(ClusterUpgradePolicyOutput{})
	pulumi.RegisterOutputType(ClusterUpgradePolicyPtrOutput{})
	pulumi.RegisterOutputType(ClusterZonalShiftConfigOutput{})
	pulumi.RegisterOutputType(ClusterZonalShiftConfigPtrOutput{})
	pulumi.RegisterOutputType(FargateProfileLabelOutput{})
	pulumi.RegisterOutputType(FargateProfileLabelArrayOutput{})
	pulumi.RegisterOutputType(FargateProfileSelectorOutput{})
	pulumi.RegisterOutputType(FargateProfileSelectorArrayOutput{})
	pulumi.RegisterOutputType(IdentityProviderConfigOidcIdentityProviderConfigOutput{})
	pulumi.RegisterOutputType(IdentityProviderConfigOidcIdentityProviderConfigPtrOutput{})
	pulumi.RegisterOutputType(IdentityProviderConfigRequiredClaimOutput{})
	pulumi.RegisterOutputType(IdentityProviderConfigRequiredClaimArrayOutput{})
	pulumi.RegisterOutputType(LoggingOutput{})
	pulumi.RegisterOutputType(LoggingPtrOutput{})
	pulumi.RegisterOutputType(NamespaceConfigPropertiesOutput{})
	pulumi.RegisterOutputType(NamespaceConfigPropertiesPtrOutput{})
	pulumi.RegisterOutputType(NodegroupLaunchTemplateSpecificationOutput{})
	pulumi.RegisterOutputType(NodegroupLaunchTemplateSpecificationPtrOutput{})
	pulumi.RegisterOutputType(NodegroupNodeRepairConfigOutput{})
	pulumi.RegisterOutputType(NodegroupNodeRepairConfigPtrOutput{})
	pulumi.RegisterOutputType(NodegroupRemoteAccessOutput{})
	pulumi.RegisterOutputType(NodegroupRemoteAccessPtrOutput{})
	pulumi.RegisterOutputType(NodegroupScalingConfigOutput{})
	pulumi.RegisterOutputType(NodegroupScalingConfigPtrOutput{})
	pulumi.RegisterOutputType(NodegroupTaintOutput{})
	pulumi.RegisterOutputType(NodegroupTaintArrayOutput{})
	pulumi.RegisterOutputType(NodegroupUpdateConfigOutput{})
	pulumi.RegisterOutputType(NodegroupUpdateConfigPtrOutput{})
}
