// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eks

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Schema for AWS::EKS::Addon
type Addon struct {
	pulumi.CustomResourceState

	// Name of Addon
	AddonName pulumi.StringOutput `pulumi:"addonName"`
	// Version of Addon
	AddonVersion pulumi.StringPtrOutput `pulumi:"addonVersion"`
	// Amazon Resource Name (ARN) of the add-on
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Name of Cluster
	ClusterName pulumi.StringOutput `pulumi:"clusterName"`
	// Resolve parameter value conflicts
	ResolveConflicts AddonResolveConflictsPtrOutput `pulumi:"resolveConflicts"`
	// IAM role to bind to the add-on's service account
	ServiceAccountRoleArn pulumi.StringPtrOutput `pulumi:"serviceAccountRoleArn"`
	// An array of key-value pairs to apply to this resource.
	Tags AddonTagArrayOutput `pulumi:"tags"`
}

// NewAddon registers a new resource with the given unique name, arguments, and options.
func NewAddon(ctx *pulumi.Context,
	name string, args *AddonArgs, opts ...pulumi.ResourceOption) (*Addon, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterName == nil {
		return nil, errors.New("invalid value for required argument 'ClusterName'")
	}
	var resource Addon
	err := ctx.RegisterResource("aws-native:eks:Addon", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAddon gets an existing Addon resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAddon(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AddonState, opts ...pulumi.ResourceOption) (*Addon, error) {
	var resource Addon
	err := ctx.ReadResource("aws-native:eks:Addon", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Addon resources.
type addonState struct {
}

type AddonState struct {
}

func (AddonState) ElementType() reflect.Type {
	return reflect.TypeOf((*addonState)(nil)).Elem()
}

type addonArgs struct {
	// Name of Addon
	AddonName *string `pulumi:"addonName"`
	// Version of Addon
	AddonVersion *string `pulumi:"addonVersion"`
	// Name of Cluster
	ClusterName string `pulumi:"clusterName"`
	// Resolve parameter value conflicts
	ResolveConflicts *AddonResolveConflicts `pulumi:"resolveConflicts"`
	// IAM role to bind to the add-on's service account
	ServiceAccountRoleArn *string `pulumi:"serviceAccountRoleArn"`
	// An array of key-value pairs to apply to this resource.
	Tags []AddonTag `pulumi:"tags"`
}

// The set of arguments for constructing a Addon resource.
type AddonArgs struct {
	// Name of Addon
	AddonName pulumi.StringPtrInput
	// Version of Addon
	AddonVersion pulumi.StringPtrInput
	// Name of Cluster
	ClusterName pulumi.StringInput
	// Resolve parameter value conflicts
	ResolveConflicts AddonResolveConflictsPtrInput
	// IAM role to bind to the add-on's service account
	ServiceAccountRoleArn pulumi.StringPtrInput
	// An array of key-value pairs to apply to this resource.
	Tags AddonTagArrayInput
}

func (AddonArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*addonArgs)(nil)).Elem()
}

type AddonInput interface {
	pulumi.Input

	ToAddonOutput() AddonOutput
	ToAddonOutputWithContext(ctx context.Context) AddonOutput
}

func (*Addon) ElementType() reflect.Type {
	return reflect.TypeOf((**Addon)(nil)).Elem()
}

func (i *Addon) ToAddonOutput() AddonOutput {
	return i.ToAddonOutputWithContext(context.Background())
}

func (i *Addon) ToAddonOutputWithContext(ctx context.Context) AddonOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddonOutput)
}

type AddonOutput struct{ *pulumi.OutputState }

func (AddonOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Addon)(nil)).Elem()
}

func (o AddonOutput) ToAddonOutput() AddonOutput {
	return o
}

func (o AddonOutput) ToAddonOutputWithContext(ctx context.Context) AddonOutput {
	return o
}

// Name of Addon
func (o AddonOutput) AddonName() pulumi.StringOutput {
	return o.ApplyT(func(v *Addon) pulumi.StringOutput { return v.AddonName }).(pulumi.StringOutput)
}

// Version of Addon
func (o AddonOutput) AddonVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Addon) pulumi.StringPtrOutput { return v.AddonVersion }).(pulumi.StringPtrOutput)
}

// Amazon Resource Name (ARN) of the add-on
func (o AddonOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Addon) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Name of Cluster
func (o AddonOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v *Addon) pulumi.StringOutput { return v.ClusterName }).(pulumi.StringOutput)
}

// Resolve parameter value conflicts
func (o AddonOutput) ResolveConflicts() AddonResolveConflictsPtrOutput {
	return o.ApplyT(func(v *Addon) AddonResolveConflictsPtrOutput { return v.ResolveConflicts }).(AddonResolveConflictsPtrOutput)
}

// IAM role to bind to the add-on's service account
func (o AddonOutput) ServiceAccountRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Addon) pulumi.StringPtrOutput { return v.ServiceAccountRoleArn }).(pulumi.StringPtrOutput)
}

// An array of key-value pairs to apply to this resource.
func (o AddonOutput) Tags() AddonTagArrayOutput {
	return o.ApplyT(func(v *Addon) AddonTagArrayOutput { return v.Tags }).(AddonTagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AddonInput)(nil)).Elem(), &Addon{})
	pulumi.RegisterOutputType(AddonOutput{})
}
