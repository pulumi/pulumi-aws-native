// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package eks

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resolve parameter value conflicts
type AddonResolveConflicts string

const (
	AddonResolveConflictsNone      = AddonResolveConflicts("NONE")
	AddonResolveConflictsOverwrite = AddonResolveConflicts("OVERWRITE")
)

func (AddonResolveConflicts) ElementType() reflect.Type {
	return reflect.TypeOf((*AddonResolveConflicts)(nil)).Elem()
}

func (e AddonResolveConflicts) ToAddonResolveConflictsOutput() AddonResolveConflictsOutput {
	return pulumi.ToOutput(e).(AddonResolveConflictsOutput)
}

func (e AddonResolveConflicts) ToAddonResolveConflictsOutputWithContext(ctx context.Context) AddonResolveConflictsOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AddonResolveConflictsOutput)
}

func (e AddonResolveConflicts) ToAddonResolveConflictsPtrOutput() AddonResolveConflictsPtrOutput {
	return e.ToAddonResolveConflictsPtrOutputWithContext(context.Background())
}

func (e AddonResolveConflicts) ToAddonResolveConflictsPtrOutputWithContext(ctx context.Context) AddonResolveConflictsPtrOutput {
	return AddonResolveConflicts(e).ToAddonResolveConflictsOutputWithContext(ctx).ToAddonResolveConflictsPtrOutputWithContext(ctx)
}

func (e AddonResolveConflicts) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AddonResolveConflicts) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AddonResolveConflicts) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AddonResolveConflicts) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AddonResolveConflictsOutput struct{ *pulumi.OutputState }

func (AddonResolveConflictsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AddonResolveConflicts)(nil)).Elem()
}

func (o AddonResolveConflictsOutput) ToAddonResolveConflictsOutput() AddonResolveConflictsOutput {
	return o
}

func (o AddonResolveConflictsOutput) ToAddonResolveConflictsOutputWithContext(ctx context.Context) AddonResolveConflictsOutput {
	return o
}

func (o AddonResolveConflictsOutput) ToAddonResolveConflictsPtrOutput() AddonResolveConflictsPtrOutput {
	return o.ToAddonResolveConflictsPtrOutputWithContext(context.Background())
}

func (o AddonResolveConflictsOutput) ToAddonResolveConflictsPtrOutputWithContext(ctx context.Context) AddonResolveConflictsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AddonResolveConflicts) *AddonResolveConflicts {
		return &v
	}).(AddonResolveConflictsPtrOutput)
}

func (o AddonResolveConflictsOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AddonResolveConflictsOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AddonResolveConflicts) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AddonResolveConflictsOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AddonResolveConflictsOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AddonResolveConflicts) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AddonResolveConflictsPtrOutput struct{ *pulumi.OutputState }

func (AddonResolveConflictsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AddonResolveConflicts)(nil)).Elem()
}

func (o AddonResolveConflictsPtrOutput) ToAddonResolveConflictsPtrOutput() AddonResolveConflictsPtrOutput {
	return o
}

func (o AddonResolveConflictsPtrOutput) ToAddonResolveConflictsPtrOutputWithContext(ctx context.Context) AddonResolveConflictsPtrOutput {
	return o
}

func (o AddonResolveConflictsPtrOutput) Elem() AddonResolveConflictsOutput {
	return o.ApplyT(func(v *AddonResolveConflicts) AddonResolveConflicts {
		if v != nil {
			return *v
		}
		var ret AddonResolveConflicts
		return ret
	}).(AddonResolveConflictsOutput)
}

func (o AddonResolveConflictsPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AddonResolveConflictsPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AddonResolveConflicts) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AddonResolveConflictsInput is an input type that accepts AddonResolveConflictsArgs and AddonResolveConflictsOutput values.
// You can construct a concrete instance of `AddonResolveConflictsInput` via:
//
//          AddonResolveConflictsArgs{...}
type AddonResolveConflictsInput interface {
	pulumi.Input

	ToAddonResolveConflictsOutput() AddonResolveConflictsOutput
	ToAddonResolveConflictsOutputWithContext(context.Context) AddonResolveConflictsOutput
}

var addonResolveConflictsPtrType = reflect.TypeOf((**AddonResolveConflicts)(nil)).Elem()

type AddonResolveConflictsPtrInput interface {
	pulumi.Input

	ToAddonResolveConflictsPtrOutput() AddonResolveConflictsPtrOutput
	ToAddonResolveConflictsPtrOutputWithContext(context.Context) AddonResolveConflictsPtrOutput
}

type addonResolveConflictsPtr string

func AddonResolveConflictsPtr(v string) AddonResolveConflictsPtrInput {
	return (*addonResolveConflictsPtr)(&v)
}

func (*addonResolveConflictsPtr) ElementType() reflect.Type {
	return addonResolveConflictsPtrType
}

func (in *addonResolveConflictsPtr) ToAddonResolveConflictsPtrOutput() AddonResolveConflictsPtrOutput {
	return pulumi.ToOutput(in).(AddonResolveConflictsPtrOutput)
}

func (in *addonResolveConflictsPtr) ToAddonResolveConflictsPtrOutputWithContext(ctx context.Context) AddonResolveConflictsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AddonResolveConflictsPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AddonResolveConflictsOutput{})
	pulumi.RegisterOutputType(AddonResolveConflictsPtrOutput{})
}
