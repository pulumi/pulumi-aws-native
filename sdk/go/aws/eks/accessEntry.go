// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An object representing an Amazon EKS AccessEntry.
type AccessEntry struct {
	pulumi.CustomResourceState

	// The ARN of the access entry.
	AccessEntryArn pulumi.StringOutput `pulumi:"accessEntryArn"`
	// An array of access policies that are associated with the access entry.
	AccessPolicies AccessEntryAccessPolicyArrayOutput `pulumi:"accessPolicies"`
	// The cluster that the access entry is created for.
	ClusterName pulumi.StringOutput `pulumi:"clusterName"`
	// The Kubernetes groups that the access entry is associated with.
	KubernetesGroups pulumi.StringArrayOutput `pulumi:"kubernetesGroups"`
	// The principal ARN that the access entry is created for.
	PrincipalArn pulumi.StringOutput `pulumi:"principalArn"`
	// An array of key-value pairs to apply to this resource.
	Tags aws.TagArrayOutput `pulumi:"tags"`
	// The node type to associate with the access entry.
	Type pulumi.StringPtrOutput `pulumi:"type"`
	// The Kubernetes user that the access entry is associated with.
	Username pulumi.StringPtrOutput `pulumi:"username"`
}

// NewAccessEntry registers a new resource with the given unique name, arguments, and options.
func NewAccessEntry(ctx *pulumi.Context,
	name string, args *AccessEntryArgs, opts ...pulumi.ResourceOption) (*AccessEntry, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterName == nil {
		return nil, errors.New("invalid value for required argument 'ClusterName'")
	}
	if args.PrincipalArn == nil {
		return nil, errors.New("invalid value for required argument 'PrincipalArn'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"clusterName",
		"principalArn",
		"type",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AccessEntry
	err := ctx.RegisterResource("aws-native:eks:AccessEntry", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccessEntry gets an existing AccessEntry resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessEntry(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessEntryState, opts ...pulumi.ResourceOption) (*AccessEntry, error) {
	var resource AccessEntry
	err := ctx.ReadResource("aws-native:eks:AccessEntry", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccessEntry resources.
type accessEntryState struct {
}

type AccessEntryState struct {
}

func (AccessEntryState) ElementType() reflect.Type {
	return reflect.TypeOf((*accessEntryState)(nil)).Elem()
}

type accessEntryArgs struct {
	// An array of access policies that are associated with the access entry.
	AccessPolicies []AccessEntryAccessPolicy `pulumi:"accessPolicies"`
	// The cluster that the access entry is created for.
	ClusterName string `pulumi:"clusterName"`
	// The Kubernetes groups that the access entry is associated with.
	KubernetesGroups []string `pulumi:"kubernetesGroups"`
	// The principal ARN that the access entry is created for.
	PrincipalArn string `pulumi:"principalArn"`
	// An array of key-value pairs to apply to this resource.
	Tags []aws.Tag `pulumi:"tags"`
	// The node type to associate with the access entry.
	Type *string `pulumi:"type"`
	// The Kubernetes user that the access entry is associated with.
	Username *string `pulumi:"username"`
}

// The set of arguments for constructing a AccessEntry resource.
type AccessEntryArgs struct {
	// An array of access policies that are associated with the access entry.
	AccessPolicies AccessEntryAccessPolicyArrayInput
	// The cluster that the access entry is created for.
	ClusterName pulumi.StringInput
	// The Kubernetes groups that the access entry is associated with.
	KubernetesGroups pulumi.StringArrayInput
	// The principal ARN that the access entry is created for.
	PrincipalArn pulumi.StringInput
	// An array of key-value pairs to apply to this resource.
	Tags aws.TagArrayInput
	// The node type to associate with the access entry.
	Type pulumi.StringPtrInput
	// The Kubernetes user that the access entry is associated with.
	Username pulumi.StringPtrInput
}

func (AccessEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accessEntryArgs)(nil)).Elem()
}

type AccessEntryInput interface {
	pulumi.Input

	ToAccessEntryOutput() AccessEntryOutput
	ToAccessEntryOutputWithContext(ctx context.Context) AccessEntryOutput
}

func (*AccessEntry) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessEntry)(nil)).Elem()
}

func (i *AccessEntry) ToAccessEntryOutput() AccessEntryOutput {
	return i.ToAccessEntryOutputWithContext(context.Background())
}

func (i *AccessEntry) ToAccessEntryOutputWithContext(ctx context.Context) AccessEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessEntryOutput)
}

type AccessEntryOutput struct{ *pulumi.OutputState }

func (AccessEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessEntry)(nil)).Elem()
}

func (o AccessEntryOutput) ToAccessEntryOutput() AccessEntryOutput {
	return o
}

func (o AccessEntryOutput) ToAccessEntryOutputWithContext(ctx context.Context) AccessEntryOutput {
	return o
}

// The ARN of the access entry.
func (o AccessEntryOutput) AccessEntryArn() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessEntry) pulumi.StringOutput { return v.AccessEntryArn }).(pulumi.StringOutput)
}

// An array of access policies that are associated with the access entry.
func (o AccessEntryOutput) AccessPolicies() AccessEntryAccessPolicyArrayOutput {
	return o.ApplyT(func(v *AccessEntry) AccessEntryAccessPolicyArrayOutput { return v.AccessPolicies }).(AccessEntryAccessPolicyArrayOutput)
}

// The cluster that the access entry is created for.
func (o AccessEntryOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessEntry) pulumi.StringOutput { return v.ClusterName }).(pulumi.StringOutput)
}

// The Kubernetes groups that the access entry is associated with.
func (o AccessEntryOutput) KubernetesGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AccessEntry) pulumi.StringArrayOutput { return v.KubernetesGroups }).(pulumi.StringArrayOutput)
}

// The principal ARN that the access entry is created for.
func (o AccessEntryOutput) PrincipalArn() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessEntry) pulumi.StringOutput { return v.PrincipalArn }).(pulumi.StringOutput)
}

// An array of key-value pairs to apply to this resource.
func (o AccessEntryOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *AccessEntry) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

// The node type to associate with the access entry.
func (o AccessEntryOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessEntry) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

// The Kubernetes user that the access entry is associated with.
func (o AccessEntryOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessEntry) pulumi.StringPtrOutput { return v.Username }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessEntryInput)(nil)).Elem(), &AccessEntry{})
	pulumi.RegisterOutputType(AccessEntryOutput{})
}
