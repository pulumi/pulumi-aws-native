// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eks

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for AWS::EKS::Nodegroup
func LookupNodegroup(ctx *pulumi.Context, args *LookupNodegroupArgs, opts ...pulumi.InvokeOption) (*LookupNodegroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNodegroupResult
	err := ctx.Invoke("aws-native:eks:getNodegroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupNodegroupArgs struct {
	Id string `pulumi:"id"`
}

type LookupNodegroupResult struct {
	// The Amazon Resource Name (ARN) associated with the managed node group.
	Arn *string `pulumi:"arn"`
	Id  *string `pulumi:"id"`
	// The Kubernetes labels to be applied to the nodes in the node group when they are created.
	Labels map[string]string `pulumi:"labels"`
	// An object representing a node group's launch template specification.
	LaunchTemplate *NodegroupLaunchTemplateSpecification `pulumi:"launchTemplate"`
	// The node auto repair configuration for node group.
	NodeRepairConfig *NodegroupNodeRepairConfig `pulumi:"nodeRepairConfig"`
	// The AMI version of the Amazon EKS-optimized AMI to use with your node group.
	ReleaseVersion *string `pulumi:"releaseVersion"`
	// The scaling configuration details for the Auto Scaling group that is created for your node group.
	ScalingConfig *NodegroupScalingConfig `pulumi:"scalingConfig"`
	// The metadata, as key-value pairs, to apply to the node group to assist with categorization and organization. Follows same schema as Labels for consistency.
	Tags map[string]string `pulumi:"tags"`
	// The Kubernetes taints to be applied to the nodes in the node group when they are created.
	Taints []NodegroupTaint `pulumi:"taints"`
	// The node group update configuration.
	UpdateConfig *NodegroupUpdateConfig `pulumi:"updateConfig"`
	// The Kubernetes version to use for your managed nodes.
	Version *string `pulumi:"version"`
}

func LookupNodegroupOutput(ctx *pulumi.Context, args LookupNodegroupOutputArgs, opts ...pulumi.InvokeOption) LookupNodegroupResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupNodegroupResultOutput, error) {
			args := v.(LookupNodegroupArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:eks:getNodegroup", args, LookupNodegroupResultOutput{}, options).(LookupNodegroupResultOutput), nil
		}).(LookupNodegroupResultOutput)
}

type LookupNodegroupOutputArgs struct {
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupNodegroupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNodegroupArgs)(nil)).Elem()
}

type LookupNodegroupResultOutput struct{ *pulumi.OutputState }

func (LookupNodegroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNodegroupResult)(nil)).Elem()
}

func (o LookupNodegroupResultOutput) ToLookupNodegroupResultOutput() LookupNodegroupResultOutput {
	return o
}

func (o LookupNodegroupResultOutput) ToLookupNodegroupResultOutputWithContext(ctx context.Context) LookupNodegroupResultOutput {
	return o
}

// The Amazon Resource Name (ARN) associated with the managed node group.
func (o LookupNodegroupResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNodegroupResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

func (o LookupNodegroupResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNodegroupResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The Kubernetes labels to be applied to the nodes in the node group when they are created.
func (o LookupNodegroupResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupNodegroupResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// An object representing a node group's launch template specification.
func (o LookupNodegroupResultOutput) LaunchTemplate() NodegroupLaunchTemplateSpecificationPtrOutput {
	return o.ApplyT(func(v LookupNodegroupResult) *NodegroupLaunchTemplateSpecification { return v.LaunchTemplate }).(NodegroupLaunchTemplateSpecificationPtrOutput)
}

// The node auto repair configuration for node group.
func (o LookupNodegroupResultOutput) NodeRepairConfig() NodegroupNodeRepairConfigPtrOutput {
	return o.ApplyT(func(v LookupNodegroupResult) *NodegroupNodeRepairConfig { return v.NodeRepairConfig }).(NodegroupNodeRepairConfigPtrOutput)
}

// The AMI version of the Amazon EKS-optimized AMI to use with your node group.
func (o LookupNodegroupResultOutput) ReleaseVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNodegroupResult) *string { return v.ReleaseVersion }).(pulumi.StringPtrOutput)
}

// The scaling configuration details for the Auto Scaling group that is created for your node group.
func (o LookupNodegroupResultOutput) ScalingConfig() NodegroupScalingConfigPtrOutput {
	return o.ApplyT(func(v LookupNodegroupResult) *NodegroupScalingConfig { return v.ScalingConfig }).(NodegroupScalingConfigPtrOutput)
}

// The metadata, as key-value pairs, to apply to the node group to assist with categorization and organization. Follows same schema as Labels for consistency.
func (o LookupNodegroupResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupNodegroupResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The Kubernetes taints to be applied to the nodes in the node group when they are created.
func (o LookupNodegroupResultOutput) Taints() NodegroupTaintArrayOutput {
	return o.ApplyT(func(v LookupNodegroupResult) []NodegroupTaint { return v.Taints }).(NodegroupTaintArrayOutput)
}

// The node group update configuration.
func (o LookupNodegroupResultOutput) UpdateConfig() NodegroupUpdateConfigPtrOutput {
	return o.ApplyT(func(v LookupNodegroupResult) *NodegroupUpdateConfig { return v.UpdateConfig }).(NodegroupUpdateConfigPtrOutput)
}

// The Kubernetes version to use for your managed nodes.
func (o LookupNodegroupResultOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNodegroupResult) *string { return v.Version }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNodegroupResultOutput{})
}
