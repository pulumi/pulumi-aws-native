// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package lightsail

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Lightsail::Alarm
func LookupAlarm(ctx *pulumi.Context, args *LookupAlarmArgs, opts ...pulumi.InvokeOption) (*LookupAlarmResult, error) {
	var rv LookupAlarmResult
	err := ctx.Invoke("aws-native:lightsail:getAlarm", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupAlarmArgs struct {
	// The name for the alarm. Specify the name of an existing alarm to update, and overwrite the previous configuration of the alarm.
	AlarmName string `pulumi:"alarmName"`
}

type LookupAlarmResult struct {
	AlarmArn *string `pulumi:"alarmArn"`
	// The arithmetic operation to use when comparing the specified statistic to the threshold. The specified statistic value is used as the first operand.
	ComparisonOperator *string `pulumi:"comparisonOperator"`
	// The contact protocols to use for the alarm, such as Email, SMS (text messaging), or both.
	ContactProtocols []string `pulumi:"contactProtocols"`
	// The number of data points that must be not within the specified threshold to trigger the alarm. If you are setting an "M out of N" alarm, this value (datapointsToAlarm) is the M.
	DatapointsToAlarm *int `pulumi:"datapointsToAlarm"`
	// The number of most recent periods over which data is compared to the specified threshold. If you are setting an "M out of N" alarm, this value (evaluationPeriods) is the N.
	EvaluationPeriods *int `pulumi:"evaluationPeriods"`
	// Indicates whether the alarm is enabled. Notifications are enabled by default if you don't specify this parameter.
	NotificationEnabled *bool `pulumi:"notificationEnabled"`
	// The alarm states that trigger a notification.
	NotificationTriggers []string `pulumi:"notificationTriggers"`
	// The current state of the alarm.
	State *string `pulumi:"state"`
	// The value against which the specified statistic is compared.
	Threshold *float64 `pulumi:"threshold"`
	// Sets how this alarm will handle missing data points.
	TreatMissingData *string `pulumi:"treatMissingData"`
}

func LookupAlarmOutput(ctx *pulumi.Context, args LookupAlarmOutputArgs, opts ...pulumi.InvokeOption) LookupAlarmResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAlarmResult, error) {
			args := v.(LookupAlarmArgs)
			r, err := LookupAlarm(ctx, &args, opts...)
			var s LookupAlarmResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupAlarmResultOutput)
}

type LookupAlarmOutputArgs struct {
	// The name for the alarm. Specify the name of an existing alarm to update, and overwrite the previous configuration of the alarm.
	AlarmName pulumi.StringInput `pulumi:"alarmName"`
}

func (LookupAlarmOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAlarmArgs)(nil)).Elem()
}

type LookupAlarmResultOutput struct{ *pulumi.OutputState }

func (LookupAlarmResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAlarmResult)(nil)).Elem()
}

func (o LookupAlarmResultOutput) ToLookupAlarmResultOutput() LookupAlarmResultOutput {
	return o
}

func (o LookupAlarmResultOutput) ToLookupAlarmResultOutputWithContext(ctx context.Context) LookupAlarmResultOutput {
	return o
}

func (o LookupAlarmResultOutput) AlarmArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAlarmResult) *string { return v.AlarmArn }).(pulumi.StringPtrOutput)
}

// The arithmetic operation to use when comparing the specified statistic to the threshold. The specified statistic value is used as the first operand.
func (o LookupAlarmResultOutput) ComparisonOperator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAlarmResult) *string { return v.ComparisonOperator }).(pulumi.StringPtrOutput)
}

// The contact protocols to use for the alarm, such as Email, SMS (text messaging), or both.
func (o LookupAlarmResultOutput) ContactProtocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupAlarmResult) []string { return v.ContactProtocols }).(pulumi.StringArrayOutput)
}

// The number of data points that must be not within the specified threshold to trigger the alarm. If you are setting an "M out of N" alarm, this value (datapointsToAlarm) is the M.
func (o LookupAlarmResultOutput) DatapointsToAlarm() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupAlarmResult) *int { return v.DatapointsToAlarm }).(pulumi.IntPtrOutput)
}

// The number of most recent periods over which data is compared to the specified threshold. If you are setting an "M out of N" alarm, this value (evaluationPeriods) is the N.
func (o LookupAlarmResultOutput) EvaluationPeriods() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupAlarmResult) *int { return v.EvaluationPeriods }).(pulumi.IntPtrOutput)
}

// Indicates whether the alarm is enabled. Notifications are enabled by default if you don't specify this parameter.
func (o LookupAlarmResultOutput) NotificationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupAlarmResult) *bool { return v.NotificationEnabled }).(pulumi.BoolPtrOutput)
}

// The alarm states that trigger a notification.
func (o LookupAlarmResultOutput) NotificationTriggers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupAlarmResult) []string { return v.NotificationTriggers }).(pulumi.StringArrayOutput)
}

// The current state of the alarm.
func (o LookupAlarmResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAlarmResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

// The value against which the specified statistic is compared.
func (o LookupAlarmResultOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LookupAlarmResult) *float64 { return v.Threshold }).(pulumi.Float64PtrOutput)
}

// Sets how this alarm will handle missing data points.
func (o LookupAlarmResultOutput) TreatMissingData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAlarmResult) *string { return v.TreatMissingData }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAlarmResultOutput{})
}
