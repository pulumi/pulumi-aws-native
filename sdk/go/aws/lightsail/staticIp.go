// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package lightsail

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Lightsail::StaticIp
type StaticIp struct {
	pulumi.CustomResourceState

	// The instance where the static IP is attached.
	AttachedTo pulumi.StringPtrOutput `pulumi:"attachedTo"`
	// The static IP address.
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
	// A Boolean value indicating whether the static IP is attached.
	IsAttached  pulumi.BoolOutput   `pulumi:"isAttached"`
	StaticIpArn pulumi.StringOutput `pulumi:"staticIpArn"`
	// The name of the static IP address.
	StaticIpName pulumi.StringOutput `pulumi:"staticIpName"`
}

// NewStaticIp registers a new resource with the given unique name, arguments, and options.
func NewStaticIp(ctx *pulumi.Context,
	name string, args *StaticIpArgs, opts ...pulumi.ResourceOption) (*StaticIp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.StaticIpName == nil {
		return nil, errors.New("invalid value for required argument 'StaticIpName'")
	}
	var resource StaticIp
	err := ctx.RegisterResource("aws-native:lightsail:StaticIp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStaticIp gets an existing StaticIp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStaticIp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StaticIpState, opts ...pulumi.ResourceOption) (*StaticIp, error) {
	var resource StaticIp
	err := ctx.ReadResource("aws-native:lightsail:StaticIp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StaticIp resources.
type staticIpState struct {
}

type StaticIpState struct {
}

func (StaticIpState) ElementType() reflect.Type {
	return reflect.TypeOf((*staticIpState)(nil)).Elem()
}

type staticIpArgs struct {
	// The instance where the static IP is attached.
	AttachedTo *string `pulumi:"attachedTo"`
	// The name of the static IP address.
	StaticIpName string `pulumi:"staticIpName"`
}

// The set of arguments for constructing a StaticIp resource.
type StaticIpArgs struct {
	// The instance where the static IP is attached.
	AttachedTo pulumi.StringPtrInput
	// The name of the static IP address.
	StaticIpName pulumi.StringInput
}

func (StaticIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*staticIpArgs)(nil)).Elem()
}

type StaticIpInput interface {
	pulumi.Input

	ToStaticIpOutput() StaticIpOutput
	ToStaticIpOutputWithContext(ctx context.Context) StaticIpOutput
}

func (*StaticIp) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticIp)(nil))
}

func (i *StaticIp) ToStaticIpOutput() StaticIpOutput {
	return i.ToStaticIpOutputWithContext(context.Background())
}

func (i *StaticIp) ToStaticIpOutputWithContext(ctx context.Context) StaticIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticIpOutput)
}

type StaticIpOutput struct{ *pulumi.OutputState }

func (StaticIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticIp)(nil))
}

func (o StaticIpOutput) ToStaticIpOutput() StaticIpOutput {
	return o
}

func (o StaticIpOutput) ToStaticIpOutputWithContext(ctx context.Context) StaticIpOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(StaticIpOutput{})
}
