// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package lightsail

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Lightsail::LoadBalancer
type LoadBalancer struct {
	pulumi.CustomResourceState

	// The names of the instances attached to the load balancer.
	AttachedInstances pulumi.StringArrayOutput `pulumi:"attachedInstances"`
	// The path you provided to perform the load balancer health check. If you didn't specify a health check path, Lightsail uses the root path of your website (e.g., "/").
	HealthCheckPath pulumi.StringPtrOutput `pulumi:"healthCheckPath"`
	// The instance port where you're creating your load balancer.
	InstancePort pulumi.IntOutput `pulumi:"instancePort"`
	// The IP address type for the load balancer. The possible values are ipv4 for IPv4 only, and dualstack for IPv4 and IPv6. The default value is dualstack.
	IpAddressType   pulumi.StringPtrOutput `pulumi:"ipAddressType"`
	LoadBalancerArn pulumi.StringOutput    `pulumi:"loadBalancerArn"`
	// The name of your load balancer.
	LoadBalancerName pulumi.StringOutput `pulumi:"loadBalancerName"`
	// Configuration option to enable session stickiness.
	SessionStickinessEnabled pulumi.BoolPtrOutput `pulumi:"sessionStickinessEnabled"`
	// Configuration option to adjust session stickiness cookie duration parameter.
	SessionStickinessLBCookieDurationSeconds pulumi.StringPtrOutput `pulumi:"sessionStickinessLBCookieDurationSeconds"`
	// An array of key-value pairs to apply to this resource.
	Tags LoadBalancerTagArrayOutput `pulumi:"tags"`
}

// NewLoadBalancer registers a new resource with the given unique name, arguments, and options.
func NewLoadBalancer(ctx *pulumi.Context,
	name string, args *LoadBalancerArgs, opts ...pulumi.ResourceOption) (*LoadBalancer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstancePort == nil {
		return nil, errors.New("invalid value for required argument 'InstancePort'")
	}
	var resource LoadBalancer
	err := ctx.RegisterResource("aws-native:lightsail:LoadBalancer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadBalancer gets an existing LoadBalancer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadBalancer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadBalancerState, opts ...pulumi.ResourceOption) (*LoadBalancer, error) {
	var resource LoadBalancer
	err := ctx.ReadResource("aws-native:lightsail:LoadBalancer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadBalancer resources.
type loadBalancerState struct {
}

type LoadBalancerState struct {
}

func (LoadBalancerState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerState)(nil)).Elem()
}

type loadBalancerArgs struct {
	// The names of the instances attached to the load balancer.
	AttachedInstances []string `pulumi:"attachedInstances"`
	// The path you provided to perform the load balancer health check. If you didn't specify a health check path, Lightsail uses the root path of your website (e.g., "/").
	HealthCheckPath *string `pulumi:"healthCheckPath"`
	// The instance port where you're creating your load balancer.
	InstancePort int `pulumi:"instancePort"`
	// The IP address type for the load balancer. The possible values are ipv4 for IPv4 only, and dualstack for IPv4 and IPv6. The default value is dualstack.
	IpAddressType *string `pulumi:"ipAddressType"`
	// The name of your load balancer.
	LoadBalancerName *string `pulumi:"loadBalancerName"`
	// Configuration option to enable session stickiness.
	SessionStickinessEnabled *bool `pulumi:"sessionStickinessEnabled"`
	// Configuration option to adjust session stickiness cookie duration parameter.
	SessionStickinessLBCookieDurationSeconds *string `pulumi:"sessionStickinessLBCookieDurationSeconds"`
	// An array of key-value pairs to apply to this resource.
	Tags []LoadBalancerTag `pulumi:"tags"`
}

// The set of arguments for constructing a LoadBalancer resource.
type LoadBalancerArgs struct {
	// The names of the instances attached to the load balancer.
	AttachedInstances pulumi.StringArrayInput
	// The path you provided to perform the load balancer health check. If you didn't specify a health check path, Lightsail uses the root path of your website (e.g., "/").
	HealthCheckPath pulumi.StringPtrInput
	// The instance port where you're creating your load balancer.
	InstancePort pulumi.IntInput
	// The IP address type for the load balancer. The possible values are ipv4 for IPv4 only, and dualstack for IPv4 and IPv6. The default value is dualstack.
	IpAddressType pulumi.StringPtrInput
	// The name of your load balancer.
	LoadBalancerName pulumi.StringPtrInput
	// Configuration option to enable session stickiness.
	SessionStickinessEnabled pulumi.BoolPtrInput
	// Configuration option to adjust session stickiness cookie duration parameter.
	SessionStickinessLBCookieDurationSeconds pulumi.StringPtrInput
	// An array of key-value pairs to apply to this resource.
	Tags LoadBalancerTagArrayInput
}

func (LoadBalancerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerArgs)(nil)).Elem()
}

type LoadBalancerInput interface {
	pulumi.Input

	ToLoadBalancerOutput() LoadBalancerOutput
	ToLoadBalancerOutputWithContext(ctx context.Context) LoadBalancerOutput
}

func (*LoadBalancer) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancer)(nil))
}

func (i *LoadBalancer) ToLoadBalancerOutput() LoadBalancerOutput {
	return i.ToLoadBalancerOutputWithContext(context.Background())
}

func (i *LoadBalancer) ToLoadBalancerOutputWithContext(ctx context.Context) LoadBalancerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerOutput)
}

type LoadBalancerOutput struct{ *pulumi.OutputState }

func (LoadBalancerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancer)(nil))
}

func (o LoadBalancerOutput) ToLoadBalancerOutput() LoadBalancerOutput {
	return o
}

func (o LoadBalancerOutput) ToLoadBalancerOutputWithContext(ctx context.Context) LoadBalancerOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerInput)(nil)).Elem(), &LoadBalancer{})
	pulumi.RegisterOutputType(LoadBalancerOutput{})
}
