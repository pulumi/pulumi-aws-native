// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lightsail

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Lightsail::Disk
func LookupDisk(ctx *pulumi.Context, args *LookupDiskArgs, opts ...pulumi.InvokeOption) (*LookupDiskResult, error) {
	var rv LookupDiskResult
	err := ctx.Invoke("aws-native:lightsail:getDisk", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupDiskArgs struct {
	// The names to use for your new Lightsail disk.
	DiskName string `pulumi:"diskName"`
}

type LookupDiskResult struct {
	// An array of objects representing the add-ons to enable for the new instance.
	AddOns []DiskAddOn `pulumi:"addOns"`
	// Name of the attached Lightsail Instance
	AttachedTo *string `pulumi:"attachedTo"`
	// Attachment State of the Lightsail disk
	AttachmentState *string `pulumi:"attachmentState"`
	DiskArn         *string `pulumi:"diskArn"`
	// Iops of the Lightsail disk
	Iops *int `pulumi:"iops"`
	// Check is Disk is attached state
	IsAttached *bool         `pulumi:"isAttached"`
	Location   *DiskLocation `pulumi:"location"`
	// Path of the  attached Disk
	Path *string `pulumi:"path"`
	// Resource type of Lightsail instance.
	ResourceType *string `pulumi:"resourceType"`
	// State of the Lightsail disk
	State *string `pulumi:"state"`
	// Support code to help identify any issues
	SupportCode *string `pulumi:"supportCode"`
	// An array of key-value pairs to apply to this resource.
	Tags []DiskTag `pulumi:"tags"`
}

func LookupDiskOutput(ctx *pulumi.Context, args LookupDiskOutputArgs, opts ...pulumi.InvokeOption) LookupDiskResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDiskResult, error) {
			args := v.(LookupDiskArgs)
			r, err := LookupDisk(ctx, &args, opts...)
			var s LookupDiskResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDiskResultOutput)
}

type LookupDiskOutputArgs struct {
	// The names to use for your new Lightsail disk.
	DiskName pulumi.StringInput `pulumi:"diskName"`
}

func (LookupDiskOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDiskArgs)(nil)).Elem()
}

type LookupDiskResultOutput struct{ *pulumi.OutputState }

func (LookupDiskResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDiskResult)(nil)).Elem()
}

func (o LookupDiskResultOutput) ToLookupDiskResultOutput() LookupDiskResultOutput {
	return o
}

func (o LookupDiskResultOutput) ToLookupDiskResultOutputWithContext(ctx context.Context) LookupDiskResultOutput {
	return o
}

// An array of objects representing the add-ons to enable for the new instance.
func (o LookupDiskResultOutput) AddOns() DiskAddOnArrayOutput {
	return o.ApplyT(func(v LookupDiskResult) []DiskAddOn { return v.AddOns }).(DiskAddOnArrayOutput)
}

// Name of the attached Lightsail Instance
func (o LookupDiskResultOutput) AttachedTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDiskResult) *string { return v.AttachedTo }).(pulumi.StringPtrOutput)
}

// Attachment State of the Lightsail disk
func (o LookupDiskResultOutput) AttachmentState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDiskResult) *string { return v.AttachmentState }).(pulumi.StringPtrOutput)
}

func (o LookupDiskResultOutput) DiskArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDiskResult) *string { return v.DiskArn }).(pulumi.StringPtrOutput)
}

// Iops of the Lightsail disk
func (o LookupDiskResultOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupDiskResult) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

// Check is Disk is attached state
func (o LookupDiskResultOutput) IsAttached() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupDiskResult) *bool { return v.IsAttached }).(pulumi.BoolPtrOutput)
}

func (o LookupDiskResultOutput) Location() DiskLocationPtrOutput {
	return o.ApplyT(func(v LookupDiskResult) *DiskLocation { return v.Location }).(DiskLocationPtrOutput)
}

// Path of the  attached Disk
func (o LookupDiskResultOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDiskResult) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Resource type of Lightsail instance.
func (o LookupDiskResultOutput) ResourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDiskResult) *string { return v.ResourceType }).(pulumi.StringPtrOutput)
}

// State of the Lightsail disk
func (o LookupDiskResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDiskResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Support code to help identify any issues
func (o LookupDiskResultOutput) SupportCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDiskResult) *string { return v.SupportCode }).(pulumi.StringPtrOutput)
}

// An array of key-value pairs to apply to this resource.
func (o LookupDiskResultOutput) Tags() DiskTagArrayOutput {
	return o.ApplyT(func(v LookupDiskResult) []DiskTag { return v.Tags }).(DiskTagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDiskResultOutput{})
}
