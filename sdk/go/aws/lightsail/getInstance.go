// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package lightsail

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Lightsail::Instance
func LookupInstance(ctx *pulumi.Context, args *LookupInstanceArgs, opts ...pulumi.InvokeOption) (*LookupInstanceResult, error) {
	var rv LookupInstanceResult
	err := ctx.Invoke("aws-native:lightsail:getInstance", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupInstanceArgs struct {
	// The names to use for your new Lightsail instance.
	InstanceName string `pulumi:"instanceName"`
}

type LookupInstanceResult struct {
	// An array of objects representing the add-ons to enable for the new instance.
	AddOns      []InstanceAddOn   `pulumi:"addOns"`
	Hardware    *InstanceHardware `pulumi:"hardware"`
	InstanceArn *string           `pulumi:"instanceArn"`
	// Is the IP Address of the Instance is the static IP
	IsStaticIp *bool `pulumi:"isStaticIp"`
	// The name of your key pair.
	KeyPairName *string             `pulumi:"keyPairName"`
	Location    *InstanceLocation   `pulumi:"location"`
	Networking  *InstanceNetworking `pulumi:"networking"`
	// Private IP Address of the Instance
	PrivateIpAddress *string `pulumi:"privateIpAddress"`
	// Public IP Address of the Instance
	PublicIpAddress *string `pulumi:"publicIpAddress"`
	// Resource type of Lightsail instance.
	ResourceType *string `pulumi:"resourceType"`
	// SSH Key Name of the  Lightsail instance.
	SshKeyName *string            `pulumi:"sshKeyName"`
	State      *InstanceStateType `pulumi:"state"`
	// Support code to help identify any issues
	SupportCode *string `pulumi:"supportCode"`
	// An array of key-value pairs to apply to this resource.
	Tags []InstanceTag `pulumi:"tags"`
	// A launch script you can create that configures a server with additional user data. For example, you might want to run apt-get -y update.
	UserData *string `pulumi:"userData"`
	// Username of the  Lightsail instance.
	UserName *string `pulumi:"userName"`
}

func LookupInstanceOutput(ctx *pulumi.Context, args LookupInstanceOutputArgs, opts ...pulumi.InvokeOption) LookupInstanceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupInstanceResult, error) {
			args := v.(LookupInstanceArgs)
			r, err := LookupInstance(ctx, &args, opts...)
			var s LookupInstanceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupInstanceResultOutput)
}

type LookupInstanceOutputArgs struct {
	// The names to use for your new Lightsail instance.
	InstanceName pulumi.StringInput `pulumi:"instanceName"`
}

func (LookupInstanceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInstanceArgs)(nil)).Elem()
}

type LookupInstanceResultOutput struct{ *pulumi.OutputState }

func (LookupInstanceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInstanceResult)(nil)).Elem()
}

func (o LookupInstanceResultOutput) ToLookupInstanceResultOutput() LookupInstanceResultOutput {
	return o
}

func (o LookupInstanceResultOutput) ToLookupInstanceResultOutputWithContext(ctx context.Context) LookupInstanceResultOutput {
	return o
}

// An array of objects representing the add-ons to enable for the new instance.
func (o LookupInstanceResultOutput) AddOns() InstanceAddOnArrayOutput {
	return o.ApplyT(func(v LookupInstanceResult) []InstanceAddOn { return v.AddOns }).(InstanceAddOnArrayOutput)
}

func (o LookupInstanceResultOutput) Hardware() InstanceHardwarePtrOutput {
	return o.ApplyT(func(v LookupInstanceResult) *InstanceHardware { return v.Hardware }).(InstanceHardwarePtrOutput)
}

func (o LookupInstanceResultOutput) InstanceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupInstanceResult) *string { return v.InstanceArn }).(pulumi.StringPtrOutput)
}

// Is the IP Address of the Instance is the static IP
func (o LookupInstanceResultOutput) IsStaticIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupInstanceResult) *bool { return v.IsStaticIp }).(pulumi.BoolPtrOutput)
}

// The name of your key pair.
func (o LookupInstanceResultOutput) KeyPairName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupInstanceResult) *string { return v.KeyPairName }).(pulumi.StringPtrOutput)
}

func (o LookupInstanceResultOutput) Location() InstanceLocationPtrOutput {
	return o.ApplyT(func(v LookupInstanceResult) *InstanceLocation { return v.Location }).(InstanceLocationPtrOutput)
}

func (o LookupInstanceResultOutput) Networking() InstanceNetworkingPtrOutput {
	return o.ApplyT(func(v LookupInstanceResult) *InstanceNetworking { return v.Networking }).(InstanceNetworkingPtrOutput)
}

// Private IP Address of the Instance
func (o LookupInstanceResultOutput) PrivateIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupInstanceResult) *string { return v.PrivateIpAddress }).(pulumi.StringPtrOutput)
}

// Public IP Address of the Instance
func (o LookupInstanceResultOutput) PublicIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupInstanceResult) *string { return v.PublicIpAddress }).(pulumi.StringPtrOutput)
}

// Resource type of Lightsail instance.
func (o LookupInstanceResultOutput) ResourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupInstanceResult) *string { return v.ResourceType }).(pulumi.StringPtrOutput)
}

// SSH Key Name of the  Lightsail instance.
func (o LookupInstanceResultOutput) SshKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupInstanceResult) *string { return v.SshKeyName }).(pulumi.StringPtrOutput)
}

func (o LookupInstanceResultOutput) State() InstanceStateTypePtrOutput {
	return o.ApplyT(func(v LookupInstanceResult) *InstanceStateType { return v.State }).(InstanceStateTypePtrOutput)
}

// Support code to help identify any issues
func (o LookupInstanceResultOutput) SupportCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupInstanceResult) *string { return v.SupportCode }).(pulumi.StringPtrOutput)
}

// An array of key-value pairs to apply to this resource.
func (o LookupInstanceResultOutput) Tags() InstanceTagArrayOutput {
	return o.ApplyT(func(v LookupInstanceResult) []InstanceTag { return v.Tags }).(InstanceTagArrayOutput)
}

// A launch script you can create that configures a server with additional user data. For example, you might want to run apt-get -y update.
func (o LookupInstanceResultOutput) UserData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupInstanceResult) *string { return v.UserData }).(pulumi.StringPtrOutput)
}

// Username of the  Lightsail instance.
func (o LookupInstanceResultOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupInstanceResult) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupInstanceResultOutput{})
}
