// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lightsail

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Lightsail::LoadBalancerTlsCertificate
func LookupLoadBalancerTlsCertificate(ctx *pulumi.Context, args *LookupLoadBalancerTlsCertificateArgs, opts ...pulumi.InvokeOption) (*LookupLoadBalancerTlsCertificateResult, error) {
	var rv LookupLoadBalancerTlsCertificateResult
	err := ctx.Invoke("aws-native:lightsail:getLoadBalancerTlsCertificate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupLoadBalancerTlsCertificateArgs struct {
	// The SSL/TLS certificate name.
	CertificateName string `pulumi:"certificateName"`
	// The name of your load balancer.
	LoadBalancerName string `pulumi:"loadBalancerName"`
}

type LookupLoadBalancerTlsCertificateResult struct {
	// When true, the SSL/TLS certificate is attached to the Lightsail load balancer.
	IsAttached                    *bool   `pulumi:"isAttached"`
	LoadBalancerTlsCertificateArn *string `pulumi:"loadBalancerTlsCertificateArn"`
	// The validation status of the SSL/TLS certificate.
	Status *string `pulumi:"status"`
}

func LookupLoadBalancerTlsCertificateOutput(ctx *pulumi.Context, args LookupLoadBalancerTlsCertificateOutputArgs, opts ...pulumi.InvokeOption) LookupLoadBalancerTlsCertificateResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupLoadBalancerTlsCertificateResult, error) {
			args := v.(LookupLoadBalancerTlsCertificateArgs)
			r, err := LookupLoadBalancerTlsCertificate(ctx, &args, opts...)
			var s LookupLoadBalancerTlsCertificateResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupLoadBalancerTlsCertificateResultOutput)
}

type LookupLoadBalancerTlsCertificateOutputArgs struct {
	// The SSL/TLS certificate name.
	CertificateName pulumi.StringInput `pulumi:"certificateName"`
	// The name of your load balancer.
	LoadBalancerName pulumi.StringInput `pulumi:"loadBalancerName"`
}

func (LookupLoadBalancerTlsCertificateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLoadBalancerTlsCertificateArgs)(nil)).Elem()
}

type LookupLoadBalancerTlsCertificateResultOutput struct{ *pulumi.OutputState }

func (LookupLoadBalancerTlsCertificateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLoadBalancerTlsCertificateResult)(nil)).Elem()
}

func (o LookupLoadBalancerTlsCertificateResultOutput) ToLookupLoadBalancerTlsCertificateResultOutput() LookupLoadBalancerTlsCertificateResultOutput {
	return o
}

func (o LookupLoadBalancerTlsCertificateResultOutput) ToLookupLoadBalancerTlsCertificateResultOutputWithContext(ctx context.Context) LookupLoadBalancerTlsCertificateResultOutput {
	return o
}

// When true, the SSL/TLS certificate is attached to the Lightsail load balancer.
func (o LookupLoadBalancerTlsCertificateResultOutput) IsAttached() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupLoadBalancerTlsCertificateResult) *bool { return v.IsAttached }).(pulumi.BoolPtrOutput)
}

func (o LookupLoadBalancerTlsCertificateResultOutput) LoadBalancerTlsCertificateArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLoadBalancerTlsCertificateResult) *string { return v.LoadBalancerTlsCertificateArn }).(pulumi.StringPtrOutput)
}

// The validation status of the SSL/TLS certificate.
func (o LookupLoadBalancerTlsCertificateResultOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLoadBalancerTlsCertificateResult) *string { return v.Status }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupLoadBalancerTlsCertificateResultOutput{})
}
