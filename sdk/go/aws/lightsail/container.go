// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lightsail

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Lightsail::Container
type Container struct {
	pulumi.CustomResourceState

	ContainerArn pulumi.StringOutput `pulumi:"containerArn"`
	// Describes a container deployment configuration of an Amazon Lightsail container service.
	ContainerServiceDeployment ContainerServiceDeploymentPtrOutput `pulumi:"containerServiceDeployment"`
	// A Boolean value to indicate whether the container service is disabled.
	IsDisabled pulumi.BoolPtrOutput `pulumi:"isDisabled"`
	// The power specification for the container service.
	Power pulumi.StringOutput `pulumi:"power"`
	// The public domain names to use with the container service, such as example.com and www.example.com.
	PublicDomainNames ContainerPublicDomainNameArrayOutput `pulumi:"publicDomainNames"`
	// The scale specification for the container service.
	Scale pulumi.IntOutput `pulumi:"scale"`
	// The name for the container service.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// An array of key-value pairs to apply to this resource.
	Tags ContainerTagArrayOutput `pulumi:"tags"`
	// The publicly accessible URL of the container service.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewContainer registers a new resource with the given unique name, arguments, and options.
func NewContainer(ctx *pulumi.Context,
	name string, args *ContainerArgs, opts ...pulumi.ResourceOption) (*Container, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Power == nil {
		return nil, errors.New("invalid value for required argument 'Power'")
	}
	if args.Scale == nil {
		return nil, errors.New("invalid value for required argument 'Scale'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	var resource Container
	err := ctx.RegisterResource("aws-native:lightsail:Container", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContainer gets an existing Container resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContainer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContainerState, opts ...pulumi.ResourceOption) (*Container, error) {
	var resource Container
	err := ctx.ReadResource("aws-native:lightsail:Container", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Container resources.
type containerState struct {
}

type ContainerState struct {
}

func (ContainerState) ElementType() reflect.Type {
	return reflect.TypeOf((*containerState)(nil)).Elem()
}

type containerArgs struct {
	// Describes a container deployment configuration of an Amazon Lightsail container service.
	ContainerServiceDeployment *ContainerServiceDeployment `pulumi:"containerServiceDeployment"`
	// A Boolean value to indicate whether the container service is disabled.
	IsDisabled *bool `pulumi:"isDisabled"`
	// The power specification for the container service.
	Power string `pulumi:"power"`
	// The public domain names to use with the container service, such as example.com and www.example.com.
	PublicDomainNames []ContainerPublicDomainName `pulumi:"publicDomainNames"`
	// The scale specification for the container service.
	Scale int `pulumi:"scale"`
	// The name for the container service.
	ServiceName string `pulumi:"serviceName"`
	// An array of key-value pairs to apply to this resource.
	Tags []ContainerTag `pulumi:"tags"`
}

// The set of arguments for constructing a Container resource.
type ContainerArgs struct {
	// Describes a container deployment configuration of an Amazon Lightsail container service.
	ContainerServiceDeployment ContainerServiceDeploymentPtrInput
	// A Boolean value to indicate whether the container service is disabled.
	IsDisabled pulumi.BoolPtrInput
	// The power specification for the container service.
	Power pulumi.StringInput
	// The public domain names to use with the container service, such as example.com and www.example.com.
	PublicDomainNames ContainerPublicDomainNameArrayInput
	// The scale specification for the container service.
	Scale pulumi.IntInput
	// The name for the container service.
	ServiceName pulumi.StringInput
	// An array of key-value pairs to apply to this resource.
	Tags ContainerTagArrayInput
}

func (ContainerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*containerArgs)(nil)).Elem()
}

type ContainerInput interface {
	pulumi.Input

	ToContainerOutput() ContainerOutput
	ToContainerOutputWithContext(ctx context.Context) ContainerOutput
}

func (*Container) ElementType() reflect.Type {
	return reflect.TypeOf((**Container)(nil)).Elem()
}

func (i *Container) ToContainerOutput() ContainerOutput {
	return i.ToContainerOutputWithContext(context.Background())
}

func (i *Container) ToContainerOutputWithContext(ctx context.Context) ContainerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerOutput)
}

type ContainerOutput struct{ *pulumi.OutputState }

func (ContainerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Container)(nil)).Elem()
}

func (o ContainerOutput) ToContainerOutput() ContainerOutput {
	return o
}

func (o ContainerOutput) ToContainerOutputWithContext(ctx context.Context) ContainerOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerInput)(nil)).Elem(), &Container{})
	pulumi.RegisterOutputType(ContainerOutput{})
}
