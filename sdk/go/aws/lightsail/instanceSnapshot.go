// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lightsail

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Lightsail::InstanceSnapshot
type InstanceSnapshot struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the snapshot.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The Amazon Resource Name (ARN) of the instance from which the snapshot was created.
	FromInstanceArn pulumi.StringOutput `pulumi:"fromInstanceArn"`
	// The instance from which the snapshot was created.
	FromInstanceName pulumi.StringOutput `pulumi:"fromInstanceName"`
	// The instance from which the snapshot was created.
	InstanceName pulumi.StringOutput `pulumi:"instanceName"`
	// The name of the snapshot.
	InstanceSnapshotName pulumi.StringOutput `pulumi:"instanceSnapshotName"`
	// A Boolean value indicating whether the snapshot was created from an automatic snapshot.
	IsFromAutoSnapshot pulumi.BoolOutput              `pulumi:"isFromAutoSnapshot"`
	Location           InstanceSnapshotLocationOutput `pulumi:"location"`
	// The type of resource (usually InstanceSnapshot).
	ResourceType pulumi.StringOutput `pulumi:"resourceType"`
	// The size in GB of the SSD
	SizeInGb pulumi.IntOutput `pulumi:"sizeInGb"`
	// The state the snapshot is in.
	State pulumi.StringOutput `pulumi:"state"`
	// Support code to help identify any issues
	SupportCode pulumi.StringOutput `pulumi:"supportCode"`
	// An array of key-value pairs to apply to this resource.
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewInstanceSnapshot registers a new resource with the given unique name, arguments, and options.
func NewInstanceSnapshot(ctx *pulumi.Context,
	name string, args *InstanceSnapshotArgs, opts ...pulumi.ResourceOption) (*InstanceSnapshot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceName == nil {
		return nil, errors.New("invalid value for required argument 'InstanceName'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"instanceName",
		"instanceSnapshotName",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InstanceSnapshot
	err := ctx.RegisterResource("aws-native:lightsail:InstanceSnapshot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstanceSnapshot gets an existing InstanceSnapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstanceSnapshot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceSnapshotState, opts ...pulumi.ResourceOption) (*InstanceSnapshot, error) {
	var resource InstanceSnapshot
	err := ctx.ReadResource("aws-native:lightsail:InstanceSnapshot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstanceSnapshot resources.
type instanceSnapshotState struct {
}

type InstanceSnapshotState struct {
}

func (InstanceSnapshotState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceSnapshotState)(nil)).Elem()
}

type instanceSnapshotArgs struct {
	// The instance from which the snapshot was created.
	InstanceName string `pulumi:"instanceName"`
	// The name of the snapshot.
	InstanceSnapshotName *string `pulumi:"instanceSnapshotName"`
	// An array of key-value pairs to apply to this resource.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a InstanceSnapshot resource.
type InstanceSnapshotArgs struct {
	// The instance from which the snapshot was created.
	InstanceName pulumi.StringInput
	// The name of the snapshot.
	InstanceSnapshotName pulumi.StringPtrInput
	// An array of key-value pairs to apply to this resource.
	Tags aws.TagArrayInput
}

func (InstanceSnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceSnapshotArgs)(nil)).Elem()
}

type InstanceSnapshotInput interface {
	pulumi.Input

	ToInstanceSnapshotOutput() InstanceSnapshotOutput
	ToInstanceSnapshotOutputWithContext(ctx context.Context) InstanceSnapshotOutput
}

func (*InstanceSnapshot) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceSnapshot)(nil)).Elem()
}

func (i *InstanceSnapshot) ToInstanceSnapshotOutput() InstanceSnapshotOutput {
	return i.ToInstanceSnapshotOutputWithContext(context.Background())
}

func (i *InstanceSnapshot) ToInstanceSnapshotOutputWithContext(ctx context.Context) InstanceSnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceSnapshotOutput)
}

type InstanceSnapshotOutput struct{ *pulumi.OutputState }

func (InstanceSnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceSnapshot)(nil)).Elem()
}

func (o InstanceSnapshotOutput) ToInstanceSnapshotOutput() InstanceSnapshotOutput {
	return o
}

func (o InstanceSnapshotOutput) ToInstanceSnapshotOutputWithContext(ctx context.Context) InstanceSnapshotOutput {
	return o
}

// The Amazon Resource Name (ARN) of the snapshot.
func (o InstanceSnapshotOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceSnapshot) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The Amazon Resource Name (ARN) of the instance from which the snapshot was created.
func (o InstanceSnapshotOutput) FromInstanceArn() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceSnapshot) pulumi.StringOutput { return v.FromInstanceArn }).(pulumi.StringOutput)
}

// The instance from which the snapshot was created.
func (o InstanceSnapshotOutput) FromInstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceSnapshot) pulumi.StringOutput { return v.FromInstanceName }).(pulumi.StringOutput)
}

// The instance from which the snapshot was created.
func (o InstanceSnapshotOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceSnapshot) pulumi.StringOutput { return v.InstanceName }).(pulumi.StringOutput)
}

// The name of the snapshot.
func (o InstanceSnapshotOutput) InstanceSnapshotName() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceSnapshot) pulumi.StringOutput { return v.InstanceSnapshotName }).(pulumi.StringOutput)
}

// A Boolean value indicating whether the snapshot was created from an automatic snapshot.
func (o InstanceSnapshotOutput) IsFromAutoSnapshot() pulumi.BoolOutput {
	return o.ApplyT(func(v *InstanceSnapshot) pulumi.BoolOutput { return v.IsFromAutoSnapshot }).(pulumi.BoolOutput)
}

func (o InstanceSnapshotOutput) Location() InstanceSnapshotLocationOutput {
	return o.ApplyT(func(v *InstanceSnapshot) InstanceSnapshotLocationOutput { return v.Location }).(InstanceSnapshotLocationOutput)
}

// The type of resource (usually InstanceSnapshot).
func (o InstanceSnapshotOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceSnapshot) pulumi.StringOutput { return v.ResourceType }).(pulumi.StringOutput)
}

// The size in GB of the SSD
func (o InstanceSnapshotOutput) SizeInGb() pulumi.IntOutput {
	return o.ApplyT(func(v *InstanceSnapshot) pulumi.IntOutput { return v.SizeInGb }).(pulumi.IntOutput)
}

// The state the snapshot is in.
func (o InstanceSnapshotOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceSnapshot) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Support code to help identify any issues
func (o InstanceSnapshotOutput) SupportCode() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceSnapshot) pulumi.StringOutput { return v.SupportCode }).(pulumi.StringOutput)
}

// An array of key-value pairs to apply to this resource.
func (o InstanceSnapshotOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *InstanceSnapshot) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceSnapshotInput)(nil)).Elem(), &InstanceSnapshot{})
	pulumi.RegisterOutputType(InstanceSnapshotOutput{})
}
