// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package lightsail

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A addon associate with a resource.
type DiskAddOn struct {
	// The add-on type
	AddOnType                string                 `pulumi:"addOnType"`
	AutoSnapshotAddOnRequest *DiskAutoSnapshotAddOn `pulumi:"autoSnapshotAddOnRequest"`
	// Status of the Addon
	Status *DiskAddOnStatus `pulumi:"status"`
}

// DiskAddOnInput is an input type that accepts DiskAddOnArgs and DiskAddOnOutput values.
// You can construct a concrete instance of `DiskAddOnInput` via:
//
//          DiskAddOnArgs{...}
type DiskAddOnInput interface {
	pulumi.Input

	ToDiskAddOnOutput() DiskAddOnOutput
	ToDiskAddOnOutputWithContext(context.Context) DiskAddOnOutput
}

// A addon associate with a resource.
type DiskAddOnArgs struct {
	// The add-on type
	AddOnType                pulumi.StringInput            `pulumi:"addOnType"`
	AutoSnapshotAddOnRequest DiskAutoSnapshotAddOnPtrInput `pulumi:"autoSnapshotAddOnRequest"`
	// Status of the Addon
	Status DiskAddOnStatusPtrInput `pulumi:"status"`
}

func (DiskAddOnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskAddOn)(nil)).Elem()
}

func (i DiskAddOnArgs) ToDiskAddOnOutput() DiskAddOnOutput {
	return i.ToDiskAddOnOutputWithContext(context.Background())
}

func (i DiskAddOnArgs) ToDiskAddOnOutputWithContext(ctx context.Context) DiskAddOnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskAddOnOutput)
}

// DiskAddOnArrayInput is an input type that accepts DiskAddOnArray and DiskAddOnArrayOutput values.
// You can construct a concrete instance of `DiskAddOnArrayInput` via:
//
//          DiskAddOnArray{ DiskAddOnArgs{...} }
type DiskAddOnArrayInput interface {
	pulumi.Input

	ToDiskAddOnArrayOutput() DiskAddOnArrayOutput
	ToDiskAddOnArrayOutputWithContext(context.Context) DiskAddOnArrayOutput
}

type DiskAddOnArray []DiskAddOnInput

func (DiskAddOnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DiskAddOn)(nil)).Elem()
}

func (i DiskAddOnArray) ToDiskAddOnArrayOutput() DiskAddOnArrayOutput {
	return i.ToDiskAddOnArrayOutputWithContext(context.Background())
}

func (i DiskAddOnArray) ToDiskAddOnArrayOutputWithContext(ctx context.Context) DiskAddOnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskAddOnArrayOutput)
}

// A addon associate with a resource.
type DiskAddOnOutput struct{ *pulumi.OutputState }

func (DiskAddOnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskAddOn)(nil)).Elem()
}

func (o DiskAddOnOutput) ToDiskAddOnOutput() DiskAddOnOutput {
	return o
}

func (o DiskAddOnOutput) ToDiskAddOnOutputWithContext(ctx context.Context) DiskAddOnOutput {
	return o
}

// The add-on type
func (o DiskAddOnOutput) AddOnType() pulumi.StringOutput {
	return o.ApplyT(func(v DiskAddOn) string { return v.AddOnType }).(pulumi.StringOutput)
}

func (o DiskAddOnOutput) AutoSnapshotAddOnRequest() DiskAutoSnapshotAddOnPtrOutput {
	return o.ApplyT(func(v DiskAddOn) *DiskAutoSnapshotAddOn { return v.AutoSnapshotAddOnRequest }).(DiskAutoSnapshotAddOnPtrOutput)
}

// Status of the Addon
func (o DiskAddOnOutput) Status() DiskAddOnStatusPtrOutput {
	return o.ApplyT(func(v DiskAddOn) *DiskAddOnStatus { return v.Status }).(DiskAddOnStatusPtrOutput)
}

type DiskAddOnArrayOutput struct{ *pulumi.OutputState }

func (DiskAddOnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DiskAddOn)(nil)).Elem()
}

func (o DiskAddOnArrayOutput) ToDiskAddOnArrayOutput() DiskAddOnArrayOutput {
	return o
}

func (o DiskAddOnArrayOutput) ToDiskAddOnArrayOutputWithContext(ctx context.Context) DiskAddOnArrayOutput {
	return o
}

func (o DiskAddOnArrayOutput) Index(i pulumi.IntInput) DiskAddOnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DiskAddOn {
		return vs[0].([]DiskAddOn)[vs[1].(int)]
	}).(DiskAddOnOutput)
}

// An object that represents additional parameters when enabling or modifying the automatic snapshot add-on
type DiskAutoSnapshotAddOn struct {
	// The daily time when an automatic snapshot will be created.
	SnapshotTimeOfDay *string `pulumi:"snapshotTimeOfDay"`
}

// DiskAutoSnapshotAddOnInput is an input type that accepts DiskAutoSnapshotAddOnArgs and DiskAutoSnapshotAddOnOutput values.
// You can construct a concrete instance of `DiskAutoSnapshotAddOnInput` via:
//
//          DiskAutoSnapshotAddOnArgs{...}
type DiskAutoSnapshotAddOnInput interface {
	pulumi.Input

	ToDiskAutoSnapshotAddOnOutput() DiskAutoSnapshotAddOnOutput
	ToDiskAutoSnapshotAddOnOutputWithContext(context.Context) DiskAutoSnapshotAddOnOutput
}

// An object that represents additional parameters when enabling or modifying the automatic snapshot add-on
type DiskAutoSnapshotAddOnArgs struct {
	// The daily time when an automatic snapshot will be created.
	SnapshotTimeOfDay pulumi.StringPtrInput `pulumi:"snapshotTimeOfDay"`
}

func (DiskAutoSnapshotAddOnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskAutoSnapshotAddOn)(nil)).Elem()
}

func (i DiskAutoSnapshotAddOnArgs) ToDiskAutoSnapshotAddOnOutput() DiskAutoSnapshotAddOnOutput {
	return i.ToDiskAutoSnapshotAddOnOutputWithContext(context.Background())
}

func (i DiskAutoSnapshotAddOnArgs) ToDiskAutoSnapshotAddOnOutputWithContext(ctx context.Context) DiskAutoSnapshotAddOnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskAutoSnapshotAddOnOutput)
}

func (i DiskAutoSnapshotAddOnArgs) ToDiskAutoSnapshotAddOnPtrOutput() DiskAutoSnapshotAddOnPtrOutput {
	return i.ToDiskAutoSnapshotAddOnPtrOutputWithContext(context.Background())
}

func (i DiskAutoSnapshotAddOnArgs) ToDiskAutoSnapshotAddOnPtrOutputWithContext(ctx context.Context) DiskAutoSnapshotAddOnPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskAutoSnapshotAddOnOutput).ToDiskAutoSnapshotAddOnPtrOutputWithContext(ctx)
}

// DiskAutoSnapshotAddOnPtrInput is an input type that accepts DiskAutoSnapshotAddOnArgs, DiskAutoSnapshotAddOnPtr and DiskAutoSnapshotAddOnPtrOutput values.
// You can construct a concrete instance of `DiskAutoSnapshotAddOnPtrInput` via:
//
//          DiskAutoSnapshotAddOnArgs{...}
//
//  or:
//
//          nil
type DiskAutoSnapshotAddOnPtrInput interface {
	pulumi.Input

	ToDiskAutoSnapshotAddOnPtrOutput() DiskAutoSnapshotAddOnPtrOutput
	ToDiskAutoSnapshotAddOnPtrOutputWithContext(context.Context) DiskAutoSnapshotAddOnPtrOutput
}

type diskAutoSnapshotAddOnPtrType DiskAutoSnapshotAddOnArgs

func DiskAutoSnapshotAddOnPtr(v *DiskAutoSnapshotAddOnArgs) DiskAutoSnapshotAddOnPtrInput {
	return (*diskAutoSnapshotAddOnPtrType)(v)
}

func (*diskAutoSnapshotAddOnPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskAutoSnapshotAddOn)(nil)).Elem()
}

func (i *diskAutoSnapshotAddOnPtrType) ToDiskAutoSnapshotAddOnPtrOutput() DiskAutoSnapshotAddOnPtrOutput {
	return i.ToDiskAutoSnapshotAddOnPtrOutputWithContext(context.Background())
}

func (i *diskAutoSnapshotAddOnPtrType) ToDiskAutoSnapshotAddOnPtrOutputWithContext(ctx context.Context) DiskAutoSnapshotAddOnPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskAutoSnapshotAddOnPtrOutput)
}

// An object that represents additional parameters when enabling or modifying the automatic snapshot add-on
type DiskAutoSnapshotAddOnOutput struct{ *pulumi.OutputState }

func (DiskAutoSnapshotAddOnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskAutoSnapshotAddOn)(nil)).Elem()
}

func (o DiskAutoSnapshotAddOnOutput) ToDiskAutoSnapshotAddOnOutput() DiskAutoSnapshotAddOnOutput {
	return o
}

func (o DiskAutoSnapshotAddOnOutput) ToDiskAutoSnapshotAddOnOutputWithContext(ctx context.Context) DiskAutoSnapshotAddOnOutput {
	return o
}

func (o DiskAutoSnapshotAddOnOutput) ToDiskAutoSnapshotAddOnPtrOutput() DiskAutoSnapshotAddOnPtrOutput {
	return o.ToDiskAutoSnapshotAddOnPtrOutputWithContext(context.Background())
}

func (o DiskAutoSnapshotAddOnOutput) ToDiskAutoSnapshotAddOnPtrOutputWithContext(ctx context.Context) DiskAutoSnapshotAddOnPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DiskAutoSnapshotAddOn) *DiskAutoSnapshotAddOn {
		return &v
	}).(DiskAutoSnapshotAddOnPtrOutput)
}

// The daily time when an automatic snapshot will be created.
func (o DiskAutoSnapshotAddOnOutput) SnapshotTimeOfDay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskAutoSnapshotAddOn) *string { return v.SnapshotTimeOfDay }).(pulumi.StringPtrOutput)
}

type DiskAutoSnapshotAddOnPtrOutput struct{ *pulumi.OutputState }

func (DiskAutoSnapshotAddOnPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskAutoSnapshotAddOn)(nil)).Elem()
}

func (o DiskAutoSnapshotAddOnPtrOutput) ToDiskAutoSnapshotAddOnPtrOutput() DiskAutoSnapshotAddOnPtrOutput {
	return o
}

func (o DiskAutoSnapshotAddOnPtrOutput) ToDiskAutoSnapshotAddOnPtrOutputWithContext(ctx context.Context) DiskAutoSnapshotAddOnPtrOutput {
	return o
}

func (o DiskAutoSnapshotAddOnPtrOutput) Elem() DiskAutoSnapshotAddOnOutput {
	return o.ApplyT(func(v *DiskAutoSnapshotAddOn) DiskAutoSnapshotAddOn {
		if v != nil {
			return *v
		}
		var ret DiskAutoSnapshotAddOn
		return ret
	}).(DiskAutoSnapshotAddOnOutput)
}

// The daily time when an automatic snapshot will be created.
func (o DiskAutoSnapshotAddOnPtrOutput) SnapshotTimeOfDay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskAutoSnapshotAddOn) *string {
		if v == nil {
			return nil
		}
		return v.SnapshotTimeOfDay
	}).(pulumi.StringPtrOutput)
}

// Location of a resource.
type DiskLocation struct {
	// The Availability Zone in which to create your disk. Use the following format: us-east-2a (case sensitive). Be sure to add the include Availability Zones parameter to your request.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// The Region Name in which to create your disk.
	RegionName *string `pulumi:"regionName"`
}

// DiskLocationInput is an input type that accepts DiskLocationArgs and DiskLocationOutput values.
// You can construct a concrete instance of `DiskLocationInput` via:
//
//          DiskLocationArgs{...}
type DiskLocationInput interface {
	pulumi.Input

	ToDiskLocationOutput() DiskLocationOutput
	ToDiskLocationOutputWithContext(context.Context) DiskLocationOutput
}

// Location of a resource.
type DiskLocationArgs struct {
	// The Availability Zone in which to create your disk. Use the following format: us-east-2a (case sensitive). Be sure to add the include Availability Zones parameter to your request.
	AvailabilityZone pulumi.StringPtrInput `pulumi:"availabilityZone"`
	// The Region Name in which to create your disk.
	RegionName pulumi.StringPtrInput `pulumi:"regionName"`
}

func (DiskLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskLocation)(nil)).Elem()
}

func (i DiskLocationArgs) ToDiskLocationOutput() DiskLocationOutput {
	return i.ToDiskLocationOutputWithContext(context.Background())
}

func (i DiskLocationArgs) ToDiskLocationOutputWithContext(ctx context.Context) DiskLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskLocationOutput)
}

func (i DiskLocationArgs) ToDiskLocationPtrOutput() DiskLocationPtrOutput {
	return i.ToDiskLocationPtrOutputWithContext(context.Background())
}

func (i DiskLocationArgs) ToDiskLocationPtrOutputWithContext(ctx context.Context) DiskLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskLocationOutput).ToDiskLocationPtrOutputWithContext(ctx)
}

// DiskLocationPtrInput is an input type that accepts DiskLocationArgs, DiskLocationPtr and DiskLocationPtrOutput values.
// You can construct a concrete instance of `DiskLocationPtrInput` via:
//
//          DiskLocationArgs{...}
//
//  or:
//
//          nil
type DiskLocationPtrInput interface {
	pulumi.Input

	ToDiskLocationPtrOutput() DiskLocationPtrOutput
	ToDiskLocationPtrOutputWithContext(context.Context) DiskLocationPtrOutput
}

type diskLocationPtrType DiskLocationArgs

func DiskLocationPtr(v *DiskLocationArgs) DiskLocationPtrInput {
	return (*diskLocationPtrType)(v)
}

func (*diskLocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskLocation)(nil)).Elem()
}

func (i *diskLocationPtrType) ToDiskLocationPtrOutput() DiskLocationPtrOutput {
	return i.ToDiskLocationPtrOutputWithContext(context.Background())
}

func (i *diskLocationPtrType) ToDiskLocationPtrOutputWithContext(ctx context.Context) DiskLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskLocationPtrOutput)
}

// Location of a resource.
type DiskLocationOutput struct{ *pulumi.OutputState }

func (DiskLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskLocation)(nil)).Elem()
}

func (o DiskLocationOutput) ToDiskLocationOutput() DiskLocationOutput {
	return o
}

func (o DiskLocationOutput) ToDiskLocationOutputWithContext(ctx context.Context) DiskLocationOutput {
	return o
}

func (o DiskLocationOutput) ToDiskLocationPtrOutput() DiskLocationPtrOutput {
	return o.ToDiskLocationPtrOutputWithContext(context.Background())
}

func (o DiskLocationOutput) ToDiskLocationPtrOutputWithContext(ctx context.Context) DiskLocationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DiskLocation) *DiskLocation {
		return &v
	}).(DiskLocationPtrOutput)
}

// The Availability Zone in which to create your disk. Use the following format: us-east-2a (case sensitive). Be sure to add the include Availability Zones parameter to your request.
func (o DiskLocationOutput) AvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskLocation) *string { return v.AvailabilityZone }).(pulumi.StringPtrOutput)
}

// The Region Name in which to create your disk.
func (o DiskLocationOutput) RegionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskLocation) *string { return v.RegionName }).(pulumi.StringPtrOutput)
}

type DiskLocationPtrOutput struct{ *pulumi.OutputState }

func (DiskLocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskLocation)(nil)).Elem()
}

func (o DiskLocationPtrOutput) ToDiskLocationPtrOutput() DiskLocationPtrOutput {
	return o
}

func (o DiskLocationPtrOutput) ToDiskLocationPtrOutputWithContext(ctx context.Context) DiskLocationPtrOutput {
	return o
}

func (o DiskLocationPtrOutput) Elem() DiskLocationOutput {
	return o.ApplyT(func(v *DiskLocation) DiskLocation {
		if v != nil {
			return *v
		}
		var ret DiskLocation
		return ret
	}).(DiskLocationOutput)
}

// The Availability Zone in which to create your disk. Use the following format: us-east-2a (case sensitive). Be sure to add the include Availability Zones parameter to your request.
func (o DiskLocationPtrOutput) AvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskLocation) *string {
		if v == nil {
			return nil
		}
		return v.AvailabilityZone
	}).(pulumi.StringPtrOutput)
}

// The Region Name in which to create your disk.
func (o DiskLocationPtrOutput) RegionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskLocation) *string {
		if v == nil {
			return nil
		}
		return v.RegionName
	}).(pulumi.StringPtrOutput)
}

// A key-value pair to associate with a resource.
type DiskTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value *string `pulumi:"value"`
}

// DiskTagInput is an input type that accepts DiskTagArgs and DiskTagOutput values.
// You can construct a concrete instance of `DiskTagInput` via:
//
//          DiskTagArgs{...}
type DiskTagInput interface {
	pulumi.Input

	ToDiskTagOutput() DiskTagOutput
	ToDiskTagOutputWithContext(context.Context) DiskTagOutput
}

// A key-value pair to associate with a resource.
type DiskTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (DiskTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskTag)(nil)).Elem()
}

func (i DiskTagArgs) ToDiskTagOutput() DiskTagOutput {
	return i.ToDiskTagOutputWithContext(context.Background())
}

func (i DiskTagArgs) ToDiskTagOutputWithContext(ctx context.Context) DiskTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskTagOutput)
}

// DiskTagArrayInput is an input type that accepts DiskTagArray and DiskTagArrayOutput values.
// You can construct a concrete instance of `DiskTagArrayInput` via:
//
//          DiskTagArray{ DiskTagArgs{...} }
type DiskTagArrayInput interface {
	pulumi.Input

	ToDiskTagArrayOutput() DiskTagArrayOutput
	ToDiskTagArrayOutputWithContext(context.Context) DiskTagArrayOutput
}

type DiskTagArray []DiskTagInput

func (DiskTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DiskTag)(nil)).Elem()
}

func (i DiskTagArray) ToDiskTagArrayOutput() DiskTagArrayOutput {
	return i.ToDiskTagArrayOutputWithContext(context.Background())
}

func (i DiskTagArray) ToDiskTagArrayOutputWithContext(ctx context.Context) DiskTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskTagArrayOutput)
}

// A key-value pair to associate with a resource.
type DiskTagOutput struct{ *pulumi.OutputState }

func (DiskTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskTag)(nil)).Elem()
}

func (o DiskTagOutput) ToDiskTagOutput() DiskTagOutput {
	return o
}

func (o DiskTagOutput) ToDiskTagOutputWithContext(ctx context.Context) DiskTagOutput {
	return o
}

// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o DiskTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v DiskTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o DiskTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type DiskTagArrayOutput struct{ *pulumi.OutputState }

func (DiskTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DiskTag)(nil)).Elem()
}

func (o DiskTagArrayOutput) ToDiskTagArrayOutput() DiskTagArrayOutput {
	return o
}

func (o DiskTagArrayOutput) ToDiskTagArrayOutputWithContext(ctx context.Context) DiskTagArrayOutput {
	return o
}

func (o DiskTagArrayOutput) Index(i pulumi.IntInput) DiskTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DiskTag {
		return vs[0].([]DiskTag)[vs[1].(int)]
	}).(DiskTagOutput)
}

// A addon associate with a resource.
type InstanceAddOn struct {
	// The add-on type
	AddOnType                string                     `pulumi:"addOnType"`
	AutoSnapshotAddOnRequest *InstanceAutoSnapshotAddOn `pulumi:"autoSnapshotAddOnRequest"`
	// Status of the Addon
	Status *InstanceAddOnStatus `pulumi:"status"`
}

// InstanceAddOnInput is an input type that accepts InstanceAddOnArgs and InstanceAddOnOutput values.
// You can construct a concrete instance of `InstanceAddOnInput` via:
//
//          InstanceAddOnArgs{...}
type InstanceAddOnInput interface {
	pulumi.Input

	ToInstanceAddOnOutput() InstanceAddOnOutput
	ToInstanceAddOnOutputWithContext(context.Context) InstanceAddOnOutput
}

// A addon associate with a resource.
type InstanceAddOnArgs struct {
	// The add-on type
	AddOnType                pulumi.StringInput                `pulumi:"addOnType"`
	AutoSnapshotAddOnRequest InstanceAutoSnapshotAddOnPtrInput `pulumi:"autoSnapshotAddOnRequest"`
	// Status of the Addon
	Status InstanceAddOnStatusPtrInput `pulumi:"status"`
}

func (InstanceAddOnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceAddOn)(nil)).Elem()
}

func (i InstanceAddOnArgs) ToInstanceAddOnOutput() InstanceAddOnOutput {
	return i.ToInstanceAddOnOutputWithContext(context.Background())
}

func (i InstanceAddOnArgs) ToInstanceAddOnOutputWithContext(ctx context.Context) InstanceAddOnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceAddOnOutput)
}

// InstanceAddOnArrayInput is an input type that accepts InstanceAddOnArray and InstanceAddOnArrayOutput values.
// You can construct a concrete instance of `InstanceAddOnArrayInput` via:
//
//          InstanceAddOnArray{ InstanceAddOnArgs{...} }
type InstanceAddOnArrayInput interface {
	pulumi.Input

	ToInstanceAddOnArrayOutput() InstanceAddOnArrayOutput
	ToInstanceAddOnArrayOutputWithContext(context.Context) InstanceAddOnArrayOutput
}

type InstanceAddOnArray []InstanceAddOnInput

func (InstanceAddOnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceAddOn)(nil)).Elem()
}

func (i InstanceAddOnArray) ToInstanceAddOnArrayOutput() InstanceAddOnArrayOutput {
	return i.ToInstanceAddOnArrayOutputWithContext(context.Background())
}

func (i InstanceAddOnArray) ToInstanceAddOnArrayOutputWithContext(ctx context.Context) InstanceAddOnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceAddOnArrayOutput)
}

// A addon associate with a resource.
type InstanceAddOnOutput struct{ *pulumi.OutputState }

func (InstanceAddOnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceAddOn)(nil)).Elem()
}

func (o InstanceAddOnOutput) ToInstanceAddOnOutput() InstanceAddOnOutput {
	return o
}

func (o InstanceAddOnOutput) ToInstanceAddOnOutputWithContext(ctx context.Context) InstanceAddOnOutput {
	return o
}

// The add-on type
func (o InstanceAddOnOutput) AddOnType() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceAddOn) string { return v.AddOnType }).(pulumi.StringOutput)
}

func (o InstanceAddOnOutput) AutoSnapshotAddOnRequest() InstanceAutoSnapshotAddOnPtrOutput {
	return o.ApplyT(func(v InstanceAddOn) *InstanceAutoSnapshotAddOn { return v.AutoSnapshotAddOnRequest }).(InstanceAutoSnapshotAddOnPtrOutput)
}

// Status of the Addon
func (o InstanceAddOnOutput) Status() InstanceAddOnStatusPtrOutput {
	return o.ApplyT(func(v InstanceAddOn) *InstanceAddOnStatus { return v.Status }).(InstanceAddOnStatusPtrOutput)
}

type InstanceAddOnArrayOutput struct{ *pulumi.OutputState }

func (InstanceAddOnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceAddOn)(nil)).Elem()
}

func (o InstanceAddOnArrayOutput) ToInstanceAddOnArrayOutput() InstanceAddOnArrayOutput {
	return o
}

func (o InstanceAddOnArrayOutput) ToInstanceAddOnArrayOutputWithContext(ctx context.Context) InstanceAddOnArrayOutput {
	return o
}

func (o InstanceAddOnArrayOutput) Index(i pulumi.IntInput) InstanceAddOnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceAddOn {
		return vs[0].([]InstanceAddOn)[vs[1].(int)]
	}).(InstanceAddOnOutput)
}

// An object that represents additional parameters when enabling or modifying the automatic snapshot add-on
type InstanceAutoSnapshotAddOn struct {
	// The daily time when an automatic snapshot will be created.
	SnapshotTimeOfDay *string `pulumi:"snapshotTimeOfDay"`
}

// InstanceAutoSnapshotAddOnInput is an input type that accepts InstanceAutoSnapshotAddOnArgs and InstanceAutoSnapshotAddOnOutput values.
// You can construct a concrete instance of `InstanceAutoSnapshotAddOnInput` via:
//
//          InstanceAutoSnapshotAddOnArgs{...}
type InstanceAutoSnapshotAddOnInput interface {
	pulumi.Input

	ToInstanceAutoSnapshotAddOnOutput() InstanceAutoSnapshotAddOnOutput
	ToInstanceAutoSnapshotAddOnOutputWithContext(context.Context) InstanceAutoSnapshotAddOnOutput
}

// An object that represents additional parameters when enabling or modifying the automatic snapshot add-on
type InstanceAutoSnapshotAddOnArgs struct {
	// The daily time when an automatic snapshot will be created.
	SnapshotTimeOfDay pulumi.StringPtrInput `pulumi:"snapshotTimeOfDay"`
}

func (InstanceAutoSnapshotAddOnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceAutoSnapshotAddOn)(nil)).Elem()
}

func (i InstanceAutoSnapshotAddOnArgs) ToInstanceAutoSnapshotAddOnOutput() InstanceAutoSnapshotAddOnOutput {
	return i.ToInstanceAutoSnapshotAddOnOutputWithContext(context.Background())
}

func (i InstanceAutoSnapshotAddOnArgs) ToInstanceAutoSnapshotAddOnOutputWithContext(ctx context.Context) InstanceAutoSnapshotAddOnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceAutoSnapshotAddOnOutput)
}

func (i InstanceAutoSnapshotAddOnArgs) ToInstanceAutoSnapshotAddOnPtrOutput() InstanceAutoSnapshotAddOnPtrOutput {
	return i.ToInstanceAutoSnapshotAddOnPtrOutputWithContext(context.Background())
}

func (i InstanceAutoSnapshotAddOnArgs) ToInstanceAutoSnapshotAddOnPtrOutputWithContext(ctx context.Context) InstanceAutoSnapshotAddOnPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceAutoSnapshotAddOnOutput).ToInstanceAutoSnapshotAddOnPtrOutputWithContext(ctx)
}

// InstanceAutoSnapshotAddOnPtrInput is an input type that accepts InstanceAutoSnapshotAddOnArgs, InstanceAutoSnapshotAddOnPtr and InstanceAutoSnapshotAddOnPtrOutput values.
// You can construct a concrete instance of `InstanceAutoSnapshotAddOnPtrInput` via:
//
//          InstanceAutoSnapshotAddOnArgs{...}
//
//  or:
//
//          nil
type InstanceAutoSnapshotAddOnPtrInput interface {
	pulumi.Input

	ToInstanceAutoSnapshotAddOnPtrOutput() InstanceAutoSnapshotAddOnPtrOutput
	ToInstanceAutoSnapshotAddOnPtrOutputWithContext(context.Context) InstanceAutoSnapshotAddOnPtrOutput
}

type instanceAutoSnapshotAddOnPtrType InstanceAutoSnapshotAddOnArgs

func InstanceAutoSnapshotAddOnPtr(v *InstanceAutoSnapshotAddOnArgs) InstanceAutoSnapshotAddOnPtrInput {
	return (*instanceAutoSnapshotAddOnPtrType)(v)
}

func (*instanceAutoSnapshotAddOnPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceAutoSnapshotAddOn)(nil)).Elem()
}

func (i *instanceAutoSnapshotAddOnPtrType) ToInstanceAutoSnapshotAddOnPtrOutput() InstanceAutoSnapshotAddOnPtrOutput {
	return i.ToInstanceAutoSnapshotAddOnPtrOutputWithContext(context.Background())
}

func (i *instanceAutoSnapshotAddOnPtrType) ToInstanceAutoSnapshotAddOnPtrOutputWithContext(ctx context.Context) InstanceAutoSnapshotAddOnPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceAutoSnapshotAddOnPtrOutput)
}

// An object that represents additional parameters when enabling or modifying the automatic snapshot add-on
type InstanceAutoSnapshotAddOnOutput struct{ *pulumi.OutputState }

func (InstanceAutoSnapshotAddOnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceAutoSnapshotAddOn)(nil)).Elem()
}

func (o InstanceAutoSnapshotAddOnOutput) ToInstanceAutoSnapshotAddOnOutput() InstanceAutoSnapshotAddOnOutput {
	return o
}

func (o InstanceAutoSnapshotAddOnOutput) ToInstanceAutoSnapshotAddOnOutputWithContext(ctx context.Context) InstanceAutoSnapshotAddOnOutput {
	return o
}

func (o InstanceAutoSnapshotAddOnOutput) ToInstanceAutoSnapshotAddOnPtrOutput() InstanceAutoSnapshotAddOnPtrOutput {
	return o.ToInstanceAutoSnapshotAddOnPtrOutputWithContext(context.Background())
}

func (o InstanceAutoSnapshotAddOnOutput) ToInstanceAutoSnapshotAddOnPtrOutputWithContext(ctx context.Context) InstanceAutoSnapshotAddOnPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceAutoSnapshotAddOn) *InstanceAutoSnapshotAddOn {
		return &v
	}).(InstanceAutoSnapshotAddOnPtrOutput)
}

// The daily time when an automatic snapshot will be created.
func (o InstanceAutoSnapshotAddOnOutput) SnapshotTimeOfDay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceAutoSnapshotAddOn) *string { return v.SnapshotTimeOfDay }).(pulumi.StringPtrOutput)
}

type InstanceAutoSnapshotAddOnPtrOutput struct{ *pulumi.OutputState }

func (InstanceAutoSnapshotAddOnPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceAutoSnapshotAddOn)(nil)).Elem()
}

func (o InstanceAutoSnapshotAddOnPtrOutput) ToInstanceAutoSnapshotAddOnPtrOutput() InstanceAutoSnapshotAddOnPtrOutput {
	return o
}

func (o InstanceAutoSnapshotAddOnPtrOutput) ToInstanceAutoSnapshotAddOnPtrOutputWithContext(ctx context.Context) InstanceAutoSnapshotAddOnPtrOutput {
	return o
}

func (o InstanceAutoSnapshotAddOnPtrOutput) Elem() InstanceAutoSnapshotAddOnOutput {
	return o.ApplyT(func(v *InstanceAutoSnapshotAddOn) InstanceAutoSnapshotAddOn {
		if v != nil {
			return *v
		}
		var ret InstanceAutoSnapshotAddOn
		return ret
	}).(InstanceAutoSnapshotAddOnOutput)
}

// The daily time when an automatic snapshot will be created.
func (o InstanceAutoSnapshotAddOnPtrOutput) SnapshotTimeOfDay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceAutoSnapshotAddOn) *string {
		if v == nil {
			return nil
		}
		return v.SnapshotTimeOfDay
	}).(pulumi.StringPtrOutput)
}

// Disk associated with the Instance.
type InstanceDisk struct {
	// Instance attached to the disk.
	AttachedTo *string `pulumi:"attachedTo"`
	// Attachment state of the disk.
	AttachmentState *string `pulumi:"attachmentState"`
	// The names to use for your new Lightsail disk.
	DiskName string `pulumi:"diskName"`
	// IOPS of disk.
	IOPS *int `pulumi:"iOPS"`
	// Is the Attached disk is the system disk of the Instance.
	IsSystemDisk *bool `pulumi:"isSystemDisk"`
	// Path of the disk attached to the instance.
	Path string `pulumi:"path"`
	// Size of the disk attached to the Instance.
	SizeInGb *string `pulumi:"sizeInGb"`
}

// InstanceDiskInput is an input type that accepts InstanceDiskArgs and InstanceDiskOutput values.
// You can construct a concrete instance of `InstanceDiskInput` via:
//
//          InstanceDiskArgs{...}
type InstanceDiskInput interface {
	pulumi.Input

	ToInstanceDiskOutput() InstanceDiskOutput
	ToInstanceDiskOutputWithContext(context.Context) InstanceDiskOutput
}

// Disk associated with the Instance.
type InstanceDiskArgs struct {
	// Instance attached to the disk.
	AttachedTo pulumi.StringPtrInput `pulumi:"attachedTo"`
	// Attachment state of the disk.
	AttachmentState pulumi.StringPtrInput `pulumi:"attachmentState"`
	// The names to use for your new Lightsail disk.
	DiskName pulumi.StringInput `pulumi:"diskName"`
	// IOPS of disk.
	IOPS pulumi.IntPtrInput `pulumi:"iOPS"`
	// Is the Attached disk is the system disk of the Instance.
	IsSystemDisk pulumi.BoolPtrInput `pulumi:"isSystemDisk"`
	// Path of the disk attached to the instance.
	Path pulumi.StringInput `pulumi:"path"`
	// Size of the disk attached to the Instance.
	SizeInGb pulumi.StringPtrInput `pulumi:"sizeInGb"`
}

func (InstanceDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceDisk)(nil)).Elem()
}

func (i InstanceDiskArgs) ToInstanceDiskOutput() InstanceDiskOutput {
	return i.ToInstanceDiskOutputWithContext(context.Background())
}

func (i InstanceDiskArgs) ToInstanceDiskOutputWithContext(ctx context.Context) InstanceDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceDiskOutput)
}

// InstanceDiskArrayInput is an input type that accepts InstanceDiskArray and InstanceDiskArrayOutput values.
// You can construct a concrete instance of `InstanceDiskArrayInput` via:
//
//          InstanceDiskArray{ InstanceDiskArgs{...} }
type InstanceDiskArrayInput interface {
	pulumi.Input

	ToInstanceDiskArrayOutput() InstanceDiskArrayOutput
	ToInstanceDiskArrayOutputWithContext(context.Context) InstanceDiskArrayOutput
}

type InstanceDiskArray []InstanceDiskInput

func (InstanceDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceDisk)(nil)).Elem()
}

func (i InstanceDiskArray) ToInstanceDiskArrayOutput() InstanceDiskArrayOutput {
	return i.ToInstanceDiskArrayOutputWithContext(context.Background())
}

func (i InstanceDiskArray) ToInstanceDiskArrayOutputWithContext(ctx context.Context) InstanceDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceDiskArrayOutput)
}

// Disk associated with the Instance.
type InstanceDiskOutput struct{ *pulumi.OutputState }

func (InstanceDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceDisk)(nil)).Elem()
}

func (o InstanceDiskOutput) ToInstanceDiskOutput() InstanceDiskOutput {
	return o
}

func (o InstanceDiskOutput) ToInstanceDiskOutputWithContext(ctx context.Context) InstanceDiskOutput {
	return o
}

// Instance attached to the disk.
func (o InstanceDiskOutput) AttachedTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceDisk) *string { return v.AttachedTo }).(pulumi.StringPtrOutput)
}

// Attachment state of the disk.
func (o InstanceDiskOutput) AttachmentState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceDisk) *string { return v.AttachmentState }).(pulumi.StringPtrOutput)
}

// The names to use for your new Lightsail disk.
func (o InstanceDiskOutput) DiskName() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceDisk) string { return v.DiskName }).(pulumi.StringOutput)
}

// IOPS of disk.
func (o InstanceDiskOutput) IOPS() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceDisk) *int { return v.IOPS }).(pulumi.IntPtrOutput)
}

// Is the Attached disk is the system disk of the Instance.
func (o InstanceDiskOutput) IsSystemDisk() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceDisk) *bool { return v.IsSystemDisk }).(pulumi.BoolPtrOutput)
}

// Path of the disk attached to the instance.
func (o InstanceDiskOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceDisk) string { return v.Path }).(pulumi.StringOutput)
}

// Size of the disk attached to the Instance.
func (o InstanceDiskOutput) SizeInGb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceDisk) *string { return v.SizeInGb }).(pulumi.StringPtrOutput)
}

type InstanceDiskArrayOutput struct{ *pulumi.OutputState }

func (InstanceDiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceDisk)(nil)).Elem()
}

func (o InstanceDiskArrayOutput) ToInstanceDiskArrayOutput() InstanceDiskArrayOutput {
	return o
}

func (o InstanceDiskArrayOutput) ToInstanceDiskArrayOutputWithContext(ctx context.Context) InstanceDiskArrayOutput {
	return o
}

func (o InstanceDiskArrayOutput) Index(i pulumi.IntInput) InstanceDiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceDisk {
		return vs[0].([]InstanceDisk)[vs[1].(int)]
	}).(InstanceDiskOutput)
}

// Hardware of the Instance.
type InstanceHardware struct {
	// CPU count of the Instance.
	CpuCount *int `pulumi:"cpuCount"`
	// Disks attached to the Instance.
	Disks []InstanceDisk `pulumi:"disks"`
	// RAM Size of the Instance.
	RamSizeInGb *int `pulumi:"ramSizeInGb"`
}

// InstanceHardwareInput is an input type that accepts InstanceHardwareArgs and InstanceHardwareOutput values.
// You can construct a concrete instance of `InstanceHardwareInput` via:
//
//          InstanceHardwareArgs{...}
type InstanceHardwareInput interface {
	pulumi.Input

	ToInstanceHardwareOutput() InstanceHardwareOutput
	ToInstanceHardwareOutputWithContext(context.Context) InstanceHardwareOutput
}

// Hardware of the Instance.
type InstanceHardwareArgs struct {
	// CPU count of the Instance.
	CpuCount pulumi.IntPtrInput `pulumi:"cpuCount"`
	// Disks attached to the Instance.
	Disks InstanceDiskArrayInput `pulumi:"disks"`
	// RAM Size of the Instance.
	RamSizeInGb pulumi.IntPtrInput `pulumi:"ramSizeInGb"`
}

func (InstanceHardwareArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceHardware)(nil)).Elem()
}

func (i InstanceHardwareArgs) ToInstanceHardwareOutput() InstanceHardwareOutput {
	return i.ToInstanceHardwareOutputWithContext(context.Background())
}

func (i InstanceHardwareArgs) ToInstanceHardwareOutputWithContext(ctx context.Context) InstanceHardwareOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceHardwareOutput)
}

func (i InstanceHardwareArgs) ToInstanceHardwarePtrOutput() InstanceHardwarePtrOutput {
	return i.ToInstanceHardwarePtrOutputWithContext(context.Background())
}

func (i InstanceHardwareArgs) ToInstanceHardwarePtrOutputWithContext(ctx context.Context) InstanceHardwarePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceHardwareOutput).ToInstanceHardwarePtrOutputWithContext(ctx)
}

// InstanceHardwarePtrInput is an input type that accepts InstanceHardwareArgs, InstanceHardwarePtr and InstanceHardwarePtrOutput values.
// You can construct a concrete instance of `InstanceHardwarePtrInput` via:
//
//          InstanceHardwareArgs{...}
//
//  or:
//
//          nil
type InstanceHardwarePtrInput interface {
	pulumi.Input

	ToInstanceHardwarePtrOutput() InstanceHardwarePtrOutput
	ToInstanceHardwarePtrOutputWithContext(context.Context) InstanceHardwarePtrOutput
}

type instanceHardwarePtrType InstanceHardwareArgs

func InstanceHardwarePtr(v *InstanceHardwareArgs) InstanceHardwarePtrInput {
	return (*instanceHardwarePtrType)(v)
}

func (*instanceHardwarePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceHardware)(nil)).Elem()
}

func (i *instanceHardwarePtrType) ToInstanceHardwarePtrOutput() InstanceHardwarePtrOutput {
	return i.ToInstanceHardwarePtrOutputWithContext(context.Background())
}

func (i *instanceHardwarePtrType) ToInstanceHardwarePtrOutputWithContext(ctx context.Context) InstanceHardwarePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceHardwarePtrOutput)
}

// Hardware of the Instance.
type InstanceHardwareOutput struct{ *pulumi.OutputState }

func (InstanceHardwareOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceHardware)(nil)).Elem()
}

func (o InstanceHardwareOutput) ToInstanceHardwareOutput() InstanceHardwareOutput {
	return o
}

func (o InstanceHardwareOutput) ToInstanceHardwareOutputWithContext(ctx context.Context) InstanceHardwareOutput {
	return o
}

func (o InstanceHardwareOutput) ToInstanceHardwarePtrOutput() InstanceHardwarePtrOutput {
	return o.ToInstanceHardwarePtrOutputWithContext(context.Background())
}

func (o InstanceHardwareOutput) ToInstanceHardwarePtrOutputWithContext(ctx context.Context) InstanceHardwarePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceHardware) *InstanceHardware {
		return &v
	}).(InstanceHardwarePtrOutput)
}

// CPU count of the Instance.
func (o InstanceHardwareOutput) CpuCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceHardware) *int { return v.CpuCount }).(pulumi.IntPtrOutput)
}

// Disks attached to the Instance.
func (o InstanceHardwareOutput) Disks() InstanceDiskArrayOutput {
	return o.ApplyT(func(v InstanceHardware) []InstanceDisk { return v.Disks }).(InstanceDiskArrayOutput)
}

// RAM Size of the Instance.
func (o InstanceHardwareOutput) RamSizeInGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceHardware) *int { return v.RamSizeInGb }).(pulumi.IntPtrOutput)
}

type InstanceHardwarePtrOutput struct{ *pulumi.OutputState }

func (InstanceHardwarePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceHardware)(nil)).Elem()
}

func (o InstanceHardwarePtrOutput) ToInstanceHardwarePtrOutput() InstanceHardwarePtrOutput {
	return o
}

func (o InstanceHardwarePtrOutput) ToInstanceHardwarePtrOutputWithContext(ctx context.Context) InstanceHardwarePtrOutput {
	return o
}

func (o InstanceHardwarePtrOutput) Elem() InstanceHardwareOutput {
	return o.ApplyT(func(v *InstanceHardware) InstanceHardware {
		if v != nil {
			return *v
		}
		var ret InstanceHardware
		return ret
	}).(InstanceHardwareOutput)
}

// CPU count of the Instance.
func (o InstanceHardwarePtrOutput) CpuCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceHardware) *int {
		if v == nil {
			return nil
		}
		return v.CpuCount
	}).(pulumi.IntPtrOutput)
}

// Disks attached to the Instance.
func (o InstanceHardwarePtrOutput) Disks() InstanceDiskArrayOutput {
	return o.ApplyT(func(v *InstanceHardware) []InstanceDisk {
		if v == nil {
			return nil
		}
		return v.Disks
	}).(InstanceDiskArrayOutput)
}

// RAM Size of the Instance.
func (o InstanceHardwarePtrOutput) RamSizeInGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceHardware) *int {
		if v == nil {
			return nil
		}
		return v.RamSizeInGb
	}).(pulumi.IntPtrOutput)
}

// Location of a resource.
type InstanceLocation struct {
	// The Availability Zone in which to create your instance. Use the following format: us-east-2a (case sensitive). Be sure to add the include Availability Zones parameter to your request.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// The Region Name in which to create your instance.
	RegionName *string `pulumi:"regionName"`
}

// InstanceLocationInput is an input type that accepts InstanceLocationArgs and InstanceLocationOutput values.
// You can construct a concrete instance of `InstanceLocationInput` via:
//
//          InstanceLocationArgs{...}
type InstanceLocationInput interface {
	pulumi.Input

	ToInstanceLocationOutput() InstanceLocationOutput
	ToInstanceLocationOutputWithContext(context.Context) InstanceLocationOutput
}

// Location of a resource.
type InstanceLocationArgs struct {
	// The Availability Zone in which to create your instance. Use the following format: us-east-2a (case sensitive). Be sure to add the include Availability Zones parameter to your request.
	AvailabilityZone pulumi.StringPtrInput `pulumi:"availabilityZone"`
	// The Region Name in which to create your instance.
	RegionName pulumi.StringPtrInput `pulumi:"regionName"`
}

func (InstanceLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceLocation)(nil)).Elem()
}

func (i InstanceLocationArgs) ToInstanceLocationOutput() InstanceLocationOutput {
	return i.ToInstanceLocationOutputWithContext(context.Background())
}

func (i InstanceLocationArgs) ToInstanceLocationOutputWithContext(ctx context.Context) InstanceLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceLocationOutput)
}

func (i InstanceLocationArgs) ToInstanceLocationPtrOutput() InstanceLocationPtrOutput {
	return i.ToInstanceLocationPtrOutputWithContext(context.Background())
}

func (i InstanceLocationArgs) ToInstanceLocationPtrOutputWithContext(ctx context.Context) InstanceLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceLocationOutput).ToInstanceLocationPtrOutputWithContext(ctx)
}

// InstanceLocationPtrInput is an input type that accepts InstanceLocationArgs, InstanceLocationPtr and InstanceLocationPtrOutput values.
// You can construct a concrete instance of `InstanceLocationPtrInput` via:
//
//          InstanceLocationArgs{...}
//
//  or:
//
//          nil
type InstanceLocationPtrInput interface {
	pulumi.Input

	ToInstanceLocationPtrOutput() InstanceLocationPtrOutput
	ToInstanceLocationPtrOutputWithContext(context.Context) InstanceLocationPtrOutput
}

type instanceLocationPtrType InstanceLocationArgs

func InstanceLocationPtr(v *InstanceLocationArgs) InstanceLocationPtrInput {
	return (*instanceLocationPtrType)(v)
}

func (*instanceLocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceLocation)(nil)).Elem()
}

func (i *instanceLocationPtrType) ToInstanceLocationPtrOutput() InstanceLocationPtrOutput {
	return i.ToInstanceLocationPtrOutputWithContext(context.Background())
}

func (i *instanceLocationPtrType) ToInstanceLocationPtrOutputWithContext(ctx context.Context) InstanceLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceLocationPtrOutput)
}

// Location of a resource.
type InstanceLocationOutput struct{ *pulumi.OutputState }

func (InstanceLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceLocation)(nil)).Elem()
}

func (o InstanceLocationOutput) ToInstanceLocationOutput() InstanceLocationOutput {
	return o
}

func (o InstanceLocationOutput) ToInstanceLocationOutputWithContext(ctx context.Context) InstanceLocationOutput {
	return o
}

func (o InstanceLocationOutput) ToInstanceLocationPtrOutput() InstanceLocationPtrOutput {
	return o.ToInstanceLocationPtrOutputWithContext(context.Background())
}

func (o InstanceLocationOutput) ToInstanceLocationPtrOutputWithContext(ctx context.Context) InstanceLocationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceLocation) *InstanceLocation {
		return &v
	}).(InstanceLocationPtrOutput)
}

// The Availability Zone in which to create your instance. Use the following format: us-east-2a (case sensitive). Be sure to add the include Availability Zones parameter to your request.
func (o InstanceLocationOutput) AvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceLocation) *string { return v.AvailabilityZone }).(pulumi.StringPtrOutput)
}

// The Region Name in which to create your instance.
func (o InstanceLocationOutput) RegionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceLocation) *string { return v.RegionName }).(pulumi.StringPtrOutput)
}

type InstanceLocationPtrOutput struct{ *pulumi.OutputState }

func (InstanceLocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceLocation)(nil)).Elem()
}

func (o InstanceLocationPtrOutput) ToInstanceLocationPtrOutput() InstanceLocationPtrOutput {
	return o
}

func (o InstanceLocationPtrOutput) ToInstanceLocationPtrOutputWithContext(ctx context.Context) InstanceLocationPtrOutput {
	return o
}

func (o InstanceLocationPtrOutput) Elem() InstanceLocationOutput {
	return o.ApplyT(func(v *InstanceLocation) InstanceLocation {
		if v != nil {
			return *v
		}
		var ret InstanceLocation
		return ret
	}).(InstanceLocationOutput)
}

// The Availability Zone in which to create your instance. Use the following format: us-east-2a (case sensitive). Be sure to add the include Availability Zones parameter to your request.
func (o InstanceLocationPtrOutput) AvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceLocation) *string {
		if v == nil {
			return nil
		}
		return v.AvailabilityZone
	}).(pulumi.StringPtrOutput)
}

// The Region Name in which to create your instance.
func (o InstanceLocationPtrOutput) RegionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceLocation) *string {
		if v == nil {
			return nil
		}
		return v.RegionName
	}).(pulumi.StringPtrOutput)
}

// Monthly Transfer of the Instance.
type InstanceMonthlyTransfer struct {
	// GbPerMonthAllocated of the Instance.
	GbPerMonthAllocated *string `pulumi:"gbPerMonthAllocated"`
}

// InstanceMonthlyTransferInput is an input type that accepts InstanceMonthlyTransferArgs and InstanceMonthlyTransferOutput values.
// You can construct a concrete instance of `InstanceMonthlyTransferInput` via:
//
//          InstanceMonthlyTransferArgs{...}
type InstanceMonthlyTransferInput interface {
	pulumi.Input

	ToInstanceMonthlyTransferOutput() InstanceMonthlyTransferOutput
	ToInstanceMonthlyTransferOutputWithContext(context.Context) InstanceMonthlyTransferOutput
}

// Monthly Transfer of the Instance.
type InstanceMonthlyTransferArgs struct {
	// GbPerMonthAllocated of the Instance.
	GbPerMonthAllocated pulumi.StringPtrInput `pulumi:"gbPerMonthAllocated"`
}

func (InstanceMonthlyTransferArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceMonthlyTransfer)(nil)).Elem()
}

func (i InstanceMonthlyTransferArgs) ToInstanceMonthlyTransferOutput() InstanceMonthlyTransferOutput {
	return i.ToInstanceMonthlyTransferOutputWithContext(context.Background())
}

func (i InstanceMonthlyTransferArgs) ToInstanceMonthlyTransferOutputWithContext(ctx context.Context) InstanceMonthlyTransferOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMonthlyTransferOutput)
}

func (i InstanceMonthlyTransferArgs) ToInstanceMonthlyTransferPtrOutput() InstanceMonthlyTransferPtrOutput {
	return i.ToInstanceMonthlyTransferPtrOutputWithContext(context.Background())
}

func (i InstanceMonthlyTransferArgs) ToInstanceMonthlyTransferPtrOutputWithContext(ctx context.Context) InstanceMonthlyTransferPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMonthlyTransferOutput).ToInstanceMonthlyTransferPtrOutputWithContext(ctx)
}

// InstanceMonthlyTransferPtrInput is an input type that accepts InstanceMonthlyTransferArgs, InstanceMonthlyTransferPtr and InstanceMonthlyTransferPtrOutput values.
// You can construct a concrete instance of `InstanceMonthlyTransferPtrInput` via:
//
//          InstanceMonthlyTransferArgs{...}
//
//  or:
//
//          nil
type InstanceMonthlyTransferPtrInput interface {
	pulumi.Input

	ToInstanceMonthlyTransferPtrOutput() InstanceMonthlyTransferPtrOutput
	ToInstanceMonthlyTransferPtrOutputWithContext(context.Context) InstanceMonthlyTransferPtrOutput
}

type instanceMonthlyTransferPtrType InstanceMonthlyTransferArgs

func InstanceMonthlyTransferPtr(v *InstanceMonthlyTransferArgs) InstanceMonthlyTransferPtrInput {
	return (*instanceMonthlyTransferPtrType)(v)
}

func (*instanceMonthlyTransferPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceMonthlyTransfer)(nil)).Elem()
}

func (i *instanceMonthlyTransferPtrType) ToInstanceMonthlyTransferPtrOutput() InstanceMonthlyTransferPtrOutput {
	return i.ToInstanceMonthlyTransferPtrOutputWithContext(context.Background())
}

func (i *instanceMonthlyTransferPtrType) ToInstanceMonthlyTransferPtrOutputWithContext(ctx context.Context) InstanceMonthlyTransferPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMonthlyTransferPtrOutput)
}

// Monthly Transfer of the Instance.
type InstanceMonthlyTransferOutput struct{ *pulumi.OutputState }

func (InstanceMonthlyTransferOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceMonthlyTransfer)(nil)).Elem()
}

func (o InstanceMonthlyTransferOutput) ToInstanceMonthlyTransferOutput() InstanceMonthlyTransferOutput {
	return o
}

func (o InstanceMonthlyTransferOutput) ToInstanceMonthlyTransferOutputWithContext(ctx context.Context) InstanceMonthlyTransferOutput {
	return o
}

func (o InstanceMonthlyTransferOutput) ToInstanceMonthlyTransferPtrOutput() InstanceMonthlyTransferPtrOutput {
	return o.ToInstanceMonthlyTransferPtrOutputWithContext(context.Background())
}

func (o InstanceMonthlyTransferOutput) ToInstanceMonthlyTransferPtrOutputWithContext(ctx context.Context) InstanceMonthlyTransferPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceMonthlyTransfer) *InstanceMonthlyTransfer {
		return &v
	}).(InstanceMonthlyTransferPtrOutput)
}

// GbPerMonthAllocated of the Instance.
func (o InstanceMonthlyTransferOutput) GbPerMonthAllocated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceMonthlyTransfer) *string { return v.GbPerMonthAllocated }).(pulumi.StringPtrOutput)
}

type InstanceMonthlyTransferPtrOutput struct{ *pulumi.OutputState }

func (InstanceMonthlyTransferPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceMonthlyTransfer)(nil)).Elem()
}

func (o InstanceMonthlyTransferPtrOutput) ToInstanceMonthlyTransferPtrOutput() InstanceMonthlyTransferPtrOutput {
	return o
}

func (o InstanceMonthlyTransferPtrOutput) ToInstanceMonthlyTransferPtrOutputWithContext(ctx context.Context) InstanceMonthlyTransferPtrOutput {
	return o
}

func (o InstanceMonthlyTransferPtrOutput) Elem() InstanceMonthlyTransferOutput {
	return o.ApplyT(func(v *InstanceMonthlyTransfer) InstanceMonthlyTransfer {
		if v != nil {
			return *v
		}
		var ret InstanceMonthlyTransfer
		return ret
	}).(InstanceMonthlyTransferOutput)
}

// GbPerMonthAllocated of the Instance.
func (o InstanceMonthlyTransferPtrOutput) GbPerMonthAllocated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceMonthlyTransfer) *string {
		if v == nil {
			return nil
		}
		return v.GbPerMonthAllocated
	}).(pulumi.StringPtrOutput)
}

// Networking of the Instance.
type InstanceNetworking struct {
	MonthlyTransfer *InstanceMonthlyTransfer `pulumi:"monthlyTransfer"`
	// Ports to the Instance.
	Ports []InstancePort `pulumi:"ports"`
}

// InstanceNetworkingInput is an input type that accepts InstanceNetworkingArgs and InstanceNetworkingOutput values.
// You can construct a concrete instance of `InstanceNetworkingInput` via:
//
//          InstanceNetworkingArgs{...}
type InstanceNetworkingInput interface {
	pulumi.Input

	ToInstanceNetworkingOutput() InstanceNetworkingOutput
	ToInstanceNetworkingOutputWithContext(context.Context) InstanceNetworkingOutput
}

// Networking of the Instance.
type InstanceNetworkingArgs struct {
	MonthlyTransfer InstanceMonthlyTransferPtrInput `pulumi:"monthlyTransfer"`
	// Ports to the Instance.
	Ports InstancePortArrayInput `pulumi:"ports"`
}

func (InstanceNetworkingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceNetworking)(nil)).Elem()
}

func (i InstanceNetworkingArgs) ToInstanceNetworkingOutput() InstanceNetworkingOutput {
	return i.ToInstanceNetworkingOutputWithContext(context.Background())
}

func (i InstanceNetworkingArgs) ToInstanceNetworkingOutputWithContext(ctx context.Context) InstanceNetworkingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceNetworkingOutput)
}

func (i InstanceNetworkingArgs) ToInstanceNetworkingPtrOutput() InstanceNetworkingPtrOutput {
	return i.ToInstanceNetworkingPtrOutputWithContext(context.Background())
}

func (i InstanceNetworkingArgs) ToInstanceNetworkingPtrOutputWithContext(ctx context.Context) InstanceNetworkingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceNetworkingOutput).ToInstanceNetworkingPtrOutputWithContext(ctx)
}

// InstanceNetworkingPtrInput is an input type that accepts InstanceNetworkingArgs, InstanceNetworkingPtr and InstanceNetworkingPtrOutput values.
// You can construct a concrete instance of `InstanceNetworkingPtrInput` via:
//
//          InstanceNetworkingArgs{...}
//
//  or:
//
//          nil
type InstanceNetworkingPtrInput interface {
	pulumi.Input

	ToInstanceNetworkingPtrOutput() InstanceNetworkingPtrOutput
	ToInstanceNetworkingPtrOutputWithContext(context.Context) InstanceNetworkingPtrOutput
}

type instanceNetworkingPtrType InstanceNetworkingArgs

func InstanceNetworkingPtr(v *InstanceNetworkingArgs) InstanceNetworkingPtrInput {
	return (*instanceNetworkingPtrType)(v)
}

func (*instanceNetworkingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceNetworking)(nil)).Elem()
}

func (i *instanceNetworkingPtrType) ToInstanceNetworkingPtrOutput() InstanceNetworkingPtrOutput {
	return i.ToInstanceNetworkingPtrOutputWithContext(context.Background())
}

func (i *instanceNetworkingPtrType) ToInstanceNetworkingPtrOutputWithContext(ctx context.Context) InstanceNetworkingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceNetworkingPtrOutput)
}

// Networking of the Instance.
type InstanceNetworkingOutput struct{ *pulumi.OutputState }

func (InstanceNetworkingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceNetworking)(nil)).Elem()
}

func (o InstanceNetworkingOutput) ToInstanceNetworkingOutput() InstanceNetworkingOutput {
	return o
}

func (o InstanceNetworkingOutput) ToInstanceNetworkingOutputWithContext(ctx context.Context) InstanceNetworkingOutput {
	return o
}

func (o InstanceNetworkingOutput) ToInstanceNetworkingPtrOutput() InstanceNetworkingPtrOutput {
	return o.ToInstanceNetworkingPtrOutputWithContext(context.Background())
}

func (o InstanceNetworkingOutput) ToInstanceNetworkingPtrOutputWithContext(ctx context.Context) InstanceNetworkingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceNetworking) *InstanceNetworking {
		return &v
	}).(InstanceNetworkingPtrOutput)
}

func (o InstanceNetworkingOutput) MonthlyTransfer() InstanceMonthlyTransferPtrOutput {
	return o.ApplyT(func(v InstanceNetworking) *InstanceMonthlyTransfer { return v.MonthlyTransfer }).(InstanceMonthlyTransferPtrOutput)
}

// Ports to the Instance.
func (o InstanceNetworkingOutput) Ports() InstancePortArrayOutput {
	return o.ApplyT(func(v InstanceNetworking) []InstancePort { return v.Ports }).(InstancePortArrayOutput)
}

type InstanceNetworkingPtrOutput struct{ *pulumi.OutputState }

func (InstanceNetworkingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceNetworking)(nil)).Elem()
}

func (o InstanceNetworkingPtrOutput) ToInstanceNetworkingPtrOutput() InstanceNetworkingPtrOutput {
	return o
}

func (o InstanceNetworkingPtrOutput) ToInstanceNetworkingPtrOutputWithContext(ctx context.Context) InstanceNetworkingPtrOutput {
	return o
}

func (o InstanceNetworkingPtrOutput) Elem() InstanceNetworkingOutput {
	return o.ApplyT(func(v *InstanceNetworking) InstanceNetworking {
		if v != nil {
			return *v
		}
		var ret InstanceNetworking
		return ret
	}).(InstanceNetworkingOutput)
}

func (o InstanceNetworkingPtrOutput) MonthlyTransfer() InstanceMonthlyTransferPtrOutput {
	return o.ApplyT(func(v *InstanceNetworking) *InstanceMonthlyTransfer {
		if v == nil {
			return nil
		}
		return v.MonthlyTransfer
	}).(InstanceMonthlyTransferPtrOutput)
}

// Ports to the Instance.
func (o InstanceNetworkingPtrOutput) Ports() InstancePortArrayOutput {
	return o.ApplyT(func(v *InstanceNetworking) []InstancePort {
		if v == nil {
			return nil
		}
		return v.Ports
	}).(InstancePortArrayOutput)
}

// Port of the Instance.
type InstancePort struct {
	// Access Direction for Protocol of the Instance(inbound/outbound).
	AccessDirection *string `pulumi:"accessDirection"`
	// Access From Protocol of the Instance.
	AccessFrom *string `pulumi:"accessFrom"`
	// Access Type Protocol of the Instance.
	AccessType      *string  `pulumi:"accessType"`
	CidrListAliases []string `pulumi:"cidrListAliases"`
	Cidrs           []string `pulumi:"cidrs"`
	// CommonName for Protocol of the Instance.
	CommonName *string `pulumi:"commonName"`
	// From Port of the Instance.
	FromPort  *int     `pulumi:"fromPort"`
	Ipv6Cidrs []string `pulumi:"ipv6Cidrs"`
	// Port Protocol of the Instance.
	Protocol *string `pulumi:"protocol"`
	// To Port of the Instance.
	ToPort *int `pulumi:"toPort"`
}

// InstancePortInput is an input type that accepts InstancePortArgs and InstancePortOutput values.
// You can construct a concrete instance of `InstancePortInput` via:
//
//          InstancePortArgs{...}
type InstancePortInput interface {
	pulumi.Input

	ToInstancePortOutput() InstancePortOutput
	ToInstancePortOutputWithContext(context.Context) InstancePortOutput
}

// Port of the Instance.
type InstancePortArgs struct {
	// Access Direction for Protocol of the Instance(inbound/outbound).
	AccessDirection pulumi.StringPtrInput `pulumi:"accessDirection"`
	// Access From Protocol of the Instance.
	AccessFrom pulumi.StringPtrInput `pulumi:"accessFrom"`
	// Access Type Protocol of the Instance.
	AccessType      pulumi.StringPtrInput   `pulumi:"accessType"`
	CidrListAliases pulumi.StringArrayInput `pulumi:"cidrListAliases"`
	Cidrs           pulumi.StringArrayInput `pulumi:"cidrs"`
	// CommonName for Protocol of the Instance.
	CommonName pulumi.StringPtrInput `pulumi:"commonName"`
	// From Port of the Instance.
	FromPort  pulumi.IntPtrInput      `pulumi:"fromPort"`
	Ipv6Cidrs pulumi.StringArrayInput `pulumi:"ipv6Cidrs"`
	// Port Protocol of the Instance.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// To Port of the Instance.
	ToPort pulumi.IntPtrInput `pulumi:"toPort"`
}

func (InstancePortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancePort)(nil)).Elem()
}

func (i InstancePortArgs) ToInstancePortOutput() InstancePortOutput {
	return i.ToInstancePortOutputWithContext(context.Background())
}

func (i InstancePortArgs) ToInstancePortOutputWithContext(ctx context.Context) InstancePortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancePortOutput)
}

// InstancePortArrayInput is an input type that accepts InstancePortArray and InstancePortArrayOutput values.
// You can construct a concrete instance of `InstancePortArrayInput` via:
//
//          InstancePortArray{ InstancePortArgs{...} }
type InstancePortArrayInput interface {
	pulumi.Input

	ToInstancePortArrayOutput() InstancePortArrayOutput
	ToInstancePortArrayOutputWithContext(context.Context) InstancePortArrayOutput
}

type InstancePortArray []InstancePortInput

func (InstancePortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancePort)(nil)).Elem()
}

func (i InstancePortArray) ToInstancePortArrayOutput() InstancePortArrayOutput {
	return i.ToInstancePortArrayOutputWithContext(context.Background())
}

func (i InstancePortArray) ToInstancePortArrayOutputWithContext(ctx context.Context) InstancePortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancePortArrayOutput)
}

// Port of the Instance.
type InstancePortOutput struct{ *pulumi.OutputState }

func (InstancePortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancePort)(nil)).Elem()
}

func (o InstancePortOutput) ToInstancePortOutput() InstancePortOutput {
	return o
}

func (o InstancePortOutput) ToInstancePortOutputWithContext(ctx context.Context) InstancePortOutput {
	return o
}

// Access Direction for Protocol of the Instance(inbound/outbound).
func (o InstancePortOutput) AccessDirection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstancePort) *string { return v.AccessDirection }).(pulumi.StringPtrOutput)
}

// Access From Protocol of the Instance.
func (o InstancePortOutput) AccessFrom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstancePort) *string { return v.AccessFrom }).(pulumi.StringPtrOutput)
}

// Access Type Protocol of the Instance.
func (o InstancePortOutput) AccessType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstancePort) *string { return v.AccessType }).(pulumi.StringPtrOutput)
}

func (o InstancePortOutput) CidrListAliases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstancePort) []string { return v.CidrListAliases }).(pulumi.StringArrayOutput)
}

func (o InstancePortOutput) Cidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstancePort) []string { return v.Cidrs }).(pulumi.StringArrayOutput)
}

// CommonName for Protocol of the Instance.
func (o InstancePortOutput) CommonName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstancePort) *string { return v.CommonName }).(pulumi.StringPtrOutput)
}

// From Port of the Instance.
func (o InstancePortOutput) FromPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstancePort) *int { return v.FromPort }).(pulumi.IntPtrOutput)
}

func (o InstancePortOutput) Ipv6Cidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstancePort) []string { return v.Ipv6Cidrs }).(pulumi.StringArrayOutput)
}

// Port Protocol of the Instance.
func (o InstancePortOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstancePort) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// To Port of the Instance.
func (o InstancePortOutput) ToPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstancePort) *int { return v.ToPort }).(pulumi.IntPtrOutput)
}

type InstancePortArrayOutput struct{ *pulumi.OutputState }

func (InstancePortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancePort)(nil)).Elem()
}

func (o InstancePortArrayOutput) ToInstancePortArrayOutput() InstancePortArrayOutput {
	return o
}

func (o InstancePortArrayOutput) ToInstancePortArrayOutputWithContext(ctx context.Context) InstancePortArrayOutput {
	return o
}

func (o InstancePortArrayOutput) Index(i pulumi.IntInput) InstancePortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancePort {
		return vs[0].([]InstancePort)[vs[1].(int)]
	}).(InstancePortOutput)
}

// Current State of the Instance.
type InstanceStateType struct {
	// Status code of the Instance.
	Code *int `pulumi:"code"`
	// Status code of the Instance.
	Name *string `pulumi:"name"`
}

// InstanceStateTypeInput is an input type that accepts InstanceStateTypeArgs and InstanceStateTypeOutput values.
// You can construct a concrete instance of `InstanceStateTypeInput` via:
//
//          InstanceStateTypeArgs{...}
type InstanceStateTypeInput interface {
	pulumi.Input

	ToInstanceStateTypeOutput() InstanceStateTypeOutput
	ToInstanceStateTypeOutputWithContext(context.Context) InstanceStateTypeOutput
}

// Current State of the Instance.
type InstanceStateTypeArgs struct {
	// Status code of the Instance.
	Code pulumi.IntPtrInput `pulumi:"code"`
	// Status code of the Instance.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (InstanceStateTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceStateType)(nil)).Elem()
}

func (i InstanceStateTypeArgs) ToInstanceStateTypeOutput() InstanceStateTypeOutput {
	return i.ToInstanceStateTypeOutputWithContext(context.Background())
}

func (i InstanceStateTypeArgs) ToInstanceStateTypeOutputWithContext(ctx context.Context) InstanceStateTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceStateTypeOutput)
}

func (i InstanceStateTypeArgs) ToInstanceStateTypePtrOutput() InstanceStateTypePtrOutput {
	return i.ToInstanceStateTypePtrOutputWithContext(context.Background())
}

func (i InstanceStateTypeArgs) ToInstanceStateTypePtrOutputWithContext(ctx context.Context) InstanceStateTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceStateTypeOutput).ToInstanceStateTypePtrOutputWithContext(ctx)
}

// InstanceStateTypePtrInput is an input type that accepts InstanceStateTypeArgs, InstanceStateTypePtr and InstanceStateTypePtrOutput values.
// You can construct a concrete instance of `InstanceStateTypePtrInput` via:
//
//          InstanceStateTypeArgs{...}
//
//  or:
//
//          nil
type InstanceStateTypePtrInput interface {
	pulumi.Input

	ToInstanceStateTypePtrOutput() InstanceStateTypePtrOutput
	ToInstanceStateTypePtrOutputWithContext(context.Context) InstanceStateTypePtrOutput
}

type instanceStateTypePtrType InstanceStateTypeArgs

func InstanceStateTypePtr(v *InstanceStateTypeArgs) InstanceStateTypePtrInput {
	return (*instanceStateTypePtrType)(v)
}

func (*instanceStateTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceStateType)(nil)).Elem()
}

func (i *instanceStateTypePtrType) ToInstanceStateTypePtrOutput() InstanceStateTypePtrOutput {
	return i.ToInstanceStateTypePtrOutputWithContext(context.Background())
}

func (i *instanceStateTypePtrType) ToInstanceStateTypePtrOutputWithContext(ctx context.Context) InstanceStateTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceStateTypePtrOutput)
}

// Current State of the Instance.
type InstanceStateTypeOutput struct{ *pulumi.OutputState }

func (InstanceStateTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceStateType)(nil)).Elem()
}

func (o InstanceStateTypeOutput) ToInstanceStateTypeOutput() InstanceStateTypeOutput {
	return o
}

func (o InstanceStateTypeOutput) ToInstanceStateTypeOutputWithContext(ctx context.Context) InstanceStateTypeOutput {
	return o
}

func (o InstanceStateTypeOutput) ToInstanceStateTypePtrOutput() InstanceStateTypePtrOutput {
	return o.ToInstanceStateTypePtrOutputWithContext(context.Background())
}

func (o InstanceStateTypeOutput) ToInstanceStateTypePtrOutputWithContext(ctx context.Context) InstanceStateTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceStateType) *InstanceStateType {
		return &v
	}).(InstanceStateTypePtrOutput)
}

// Status code of the Instance.
func (o InstanceStateTypeOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceStateType) *int { return v.Code }).(pulumi.IntPtrOutput)
}

// Status code of the Instance.
func (o InstanceStateTypeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceStateType) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type InstanceStateTypePtrOutput struct{ *pulumi.OutputState }

func (InstanceStateTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceStateType)(nil)).Elem()
}

func (o InstanceStateTypePtrOutput) ToInstanceStateTypePtrOutput() InstanceStateTypePtrOutput {
	return o
}

func (o InstanceStateTypePtrOutput) ToInstanceStateTypePtrOutputWithContext(ctx context.Context) InstanceStateTypePtrOutput {
	return o
}

func (o InstanceStateTypePtrOutput) Elem() InstanceStateTypeOutput {
	return o.ApplyT(func(v *InstanceStateType) InstanceStateType {
		if v != nil {
			return *v
		}
		var ret InstanceStateType
		return ret
	}).(InstanceStateTypeOutput)
}

// Status code of the Instance.
func (o InstanceStateTypePtrOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceStateType) *int {
		if v == nil {
			return nil
		}
		return v.Code
	}).(pulumi.IntPtrOutput)
}

// Status code of the Instance.
func (o InstanceStateTypePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceStateType) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// A key-value pair to associate with a resource.
type InstanceTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value *string `pulumi:"value"`
}

// InstanceTagInput is an input type that accepts InstanceTagArgs and InstanceTagOutput values.
// You can construct a concrete instance of `InstanceTagInput` via:
//
//          InstanceTagArgs{...}
type InstanceTagInput interface {
	pulumi.Input

	ToInstanceTagOutput() InstanceTagOutput
	ToInstanceTagOutputWithContext(context.Context) InstanceTagOutput
}

// A key-value pair to associate with a resource.
type InstanceTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (InstanceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTag)(nil)).Elem()
}

func (i InstanceTagArgs) ToInstanceTagOutput() InstanceTagOutput {
	return i.ToInstanceTagOutputWithContext(context.Background())
}

func (i InstanceTagArgs) ToInstanceTagOutputWithContext(ctx context.Context) InstanceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTagOutput)
}

// InstanceTagArrayInput is an input type that accepts InstanceTagArray and InstanceTagArrayOutput values.
// You can construct a concrete instance of `InstanceTagArrayInput` via:
//
//          InstanceTagArray{ InstanceTagArgs{...} }
type InstanceTagArrayInput interface {
	pulumi.Input

	ToInstanceTagArrayOutput() InstanceTagArrayOutput
	ToInstanceTagArrayOutputWithContext(context.Context) InstanceTagArrayOutput
}

type InstanceTagArray []InstanceTagInput

func (InstanceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTag)(nil)).Elem()
}

func (i InstanceTagArray) ToInstanceTagArrayOutput() InstanceTagArrayOutput {
	return i.ToInstanceTagArrayOutputWithContext(context.Background())
}

func (i InstanceTagArray) ToInstanceTagArrayOutputWithContext(ctx context.Context) InstanceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTagArrayOutput)
}

// A key-value pair to associate with a resource.
type InstanceTagOutput struct{ *pulumi.OutputState }

func (InstanceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTag)(nil)).Elem()
}

func (o InstanceTagOutput) ToInstanceTagOutput() InstanceTagOutput {
	return o
}

func (o InstanceTagOutput) ToInstanceTagOutputWithContext(ctx context.Context) InstanceTagOutput {
	return o
}

// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o InstanceTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o InstanceTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type InstanceTagArrayOutput struct{ *pulumi.OutputState }

func (InstanceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTag)(nil)).Elem()
}

func (o InstanceTagArrayOutput) ToInstanceTagArrayOutput() InstanceTagArrayOutput {
	return o
}

func (o InstanceTagArrayOutput) ToInstanceTagArrayOutputWithContext(ctx context.Context) InstanceTagArrayOutput {
	return o
}

func (o InstanceTagArrayOutput) Index(i pulumi.IntInput) InstanceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceTag {
		return vs[0].([]InstanceTag)[vs[1].(int)]
	}).(InstanceTagOutput)
}

func init() {
	pulumi.RegisterOutputType(DiskAddOnOutput{})
	pulumi.RegisterOutputType(DiskAddOnArrayOutput{})
	pulumi.RegisterOutputType(DiskAutoSnapshotAddOnOutput{})
	pulumi.RegisterOutputType(DiskAutoSnapshotAddOnPtrOutput{})
	pulumi.RegisterOutputType(DiskLocationOutput{})
	pulumi.RegisterOutputType(DiskLocationPtrOutput{})
	pulumi.RegisterOutputType(DiskTagOutput{})
	pulumi.RegisterOutputType(DiskTagArrayOutput{})
	pulumi.RegisterOutputType(InstanceAddOnOutput{})
	pulumi.RegisterOutputType(InstanceAddOnArrayOutput{})
	pulumi.RegisterOutputType(InstanceAutoSnapshotAddOnOutput{})
	pulumi.RegisterOutputType(InstanceAutoSnapshotAddOnPtrOutput{})
	pulumi.RegisterOutputType(InstanceDiskOutput{})
	pulumi.RegisterOutputType(InstanceDiskArrayOutput{})
	pulumi.RegisterOutputType(InstanceHardwareOutput{})
	pulumi.RegisterOutputType(InstanceHardwarePtrOutput{})
	pulumi.RegisterOutputType(InstanceLocationOutput{})
	pulumi.RegisterOutputType(InstanceLocationPtrOutput{})
	pulumi.RegisterOutputType(InstanceMonthlyTransferOutput{})
	pulumi.RegisterOutputType(InstanceMonthlyTransferPtrOutput{})
	pulumi.RegisterOutputType(InstanceNetworkingOutput{})
	pulumi.RegisterOutputType(InstanceNetworkingPtrOutput{})
	pulumi.RegisterOutputType(InstancePortOutput{})
	pulumi.RegisterOutputType(InstancePortArrayOutput{})
	pulumi.RegisterOutputType(InstanceStateTypeOutput{})
	pulumi.RegisterOutputType(InstanceStateTypePtrOutput{})
	pulumi.RegisterOutputType(InstanceTagOutput{})
	pulumi.RegisterOutputType(InstanceTagArrayOutput{})
}
