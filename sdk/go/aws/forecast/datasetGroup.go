// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package forecast

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents a dataset group that holds a collection of related datasets
type DatasetGroup struct {
	pulumi.CustomResourceState

	// An array of Amazon Resource Names (ARNs) of the datasets that you want to include in the dataset group.
	DatasetArns pulumi.StringArrayOutput `pulumi:"datasetArns"`
	// The Amazon Resource Name (ARN) of the dataset group to delete.
	DatasetGroupArn pulumi.StringOutput `pulumi:"datasetGroupArn"`
	// A name for the dataset group.
	DatasetGroupName pulumi.StringOutput `pulumi:"datasetGroupName"`
	// The domain associated with the dataset group. When you add a dataset to a dataset group, this value and the value specified for the Domain parameter of the CreateDataset operation must match.
	Domain DatasetGroupDomainOutput `pulumi:"domain"`
	// The tags of Application Insights application.
	Tags DatasetGroupTagArrayOutput `pulumi:"tags"`
}

// NewDatasetGroup registers a new resource with the given unique name, arguments, and options.
func NewDatasetGroup(ctx *pulumi.Context,
	name string, args *DatasetGroupArgs, opts ...pulumi.ResourceOption) (*DatasetGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	var resource DatasetGroup
	err := ctx.RegisterResource("aws-native:forecast:DatasetGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatasetGroup gets an existing DatasetGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatasetGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatasetGroupState, opts ...pulumi.ResourceOption) (*DatasetGroup, error) {
	var resource DatasetGroup
	err := ctx.ReadResource("aws-native:forecast:DatasetGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatasetGroup resources.
type datasetGroupState struct {
}

type DatasetGroupState struct {
}

func (DatasetGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*datasetGroupState)(nil)).Elem()
}

type datasetGroupArgs struct {
	// An array of Amazon Resource Names (ARNs) of the datasets that you want to include in the dataset group.
	DatasetArns []string `pulumi:"datasetArns"`
	// A name for the dataset group.
	DatasetGroupName *string `pulumi:"datasetGroupName"`
	// The domain associated with the dataset group. When you add a dataset to a dataset group, this value and the value specified for the Domain parameter of the CreateDataset operation must match.
	Domain DatasetGroupDomain `pulumi:"domain"`
	// The tags of Application Insights application.
	Tags []DatasetGroupTag `pulumi:"tags"`
}

// The set of arguments for constructing a DatasetGroup resource.
type DatasetGroupArgs struct {
	// An array of Amazon Resource Names (ARNs) of the datasets that you want to include in the dataset group.
	DatasetArns pulumi.StringArrayInput
	// A name for the dataset group.
	DatasetGroupName pulumi.StringPtrInput
	// The domain associated with the dataset group. When you add a dataset to a dataset group, this value and the value specified for the Domain parameter of the CreateDataset operation must match.
	Domain DatasetGroupDomainInput
	// The tags of Application Insights application.
	Tags DatasetGroupTagArrayInput
}

func (DatasetGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datasetGroupArgs)(nil)).Elem()
}

type DatasetGroupInput interface {
	pulumi.Input

	ToDatasetGroupOutput() DatasetGroupOutput
	ToDatasetGroupOutputWithContext(ctx context.Context) DatasetGroupOutput
}

func (*DatasetGroup) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetGroup)(nil))
}

func (i *DatasetGroup) ToDatasetGroupOutput() DatasetGroupOutput {
	return i.ToDatasetGroupOutputWithContext(context.Background())
}

func (i *DatasetGroup) ToDatasetGroupOutputWithContext(ctx context.Context) DatasetGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetGroupOutput)
}

type DatasetGroupOutput struct{ *pulumi.OutputState }

func (DatasetGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetGroup)(nil))
}

func (o DatasetGroupOutput) ToDatasetGroupOutput() DatasetGroupOutput {
	return o
}

func (o DatasetGroupOutput) ToDatasetGroupOutputWithContext(ctx context.Context) DatasetGroupOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetGroupInput)(nil)).Elem(), &DatasetGroup{})
	pulumi.RegisterOutputType(DatasetGroupOutput{})
}
