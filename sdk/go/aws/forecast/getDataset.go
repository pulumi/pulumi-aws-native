// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package forecast

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type Definition for AWS::Forecast::Dataset
func LookupDataset(ctx *pulumi.Context, args *LookupDatasetArgs, opts ...pulumi.InvokeOption) (*LookupDatasetResult, error) {
	var rv LookupDatasetResult
	err := ctx.Invoke("aws-native:forecast:getDataset", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupDatasetArgs struct {
	Arn string `pulumi:"arn"`
}

type LookupDatasetResult struct {
	Arn *string `pulumi:"arn"`
	// Frequency of data collection. This parameter is required for RELATED_TIME_SERIES
	DataFrequency *string `pulumi:"dataFrequency"`
	// The dataset type
	DatasetType *DatasetType `pulumi:"datasetType"`
	// The domain associated with the dataset
	Domain           *DatasetDomain              `pulumi:"domain"`
	EncryptionConfig *EncryptionConfigProperties `pulumi:"encryptionConfig"`
	Schema           *SchemaProperties           `pulumi:"schema"`
	Tags             []TagsItemProperties        `pulumi:"tags"`
}

func LookupDatasetOutput(ctx *pulumi.Context, args LookupDatasetOutputArgs, opts ...pulumi.InvokeOption) LookupDatasetResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDatasetResult, error) {
			args := v.(LookupDatasetArgs)
			r, err := LookupDataset(ctx, &args, opts...)
			return *r, err
		}).(LookupDatasetResultOutput)
}

type LookupDatasetOutputArgs struct {
	Arn pulumi.StringInput `pulumi:"arn"`
}

func (LookupDatasetOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDatasetArgs)(nil)).Elem()
}

type LookupDatasetResultOutput struct{ *pulumi.OutputState }

func (LookupDatasetResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDatasetResult)(nil)).Elem()
}

func (o LookupDatasetResultOutput) ToLookupDatasetResultOutput() LookupDatasetResultOutput {
	return o
}

func (o LookupDatasetResultOutput) ToLookupDatasetResultOutputWithContext(ctx context.Context) LookupDatasetResultOutput {
	return o
}

func (o LookupDatasetResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDatasetResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// Frequency of data collection. This parameter is required for RELATED_TIME_SERIES
func (o LookupDatasetResultOutput) DataFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDatasetResult) *string { return v.DataFrequency }).(pulumi.StringPtrOutput)
}

// The dataset type
func (o LookupDatasetResultOutput) DatasetType() DatasetTypePtrOutput {
	return o.ApplyT(func(v LookupDatasetResult) *DatasetType { return v.DatasetType }).(DatasetTypePtrOutput)
}

// The domain associated with the dataset
func (o LookupDatasetResultOutput) Domain() DatasetDomainPtrOutput {
	return o.ApplyT(func(v LookupDatasetResult) *DatasetDomain { return v.Domain }).(DatasetDomainPtrOutput)
}

func (o LookupDatasetResultOutput) EncryptionConfig() EncryptionConfigPropertiesPtrOutput {
	return o.ApplyT(func(v LookupDatasetResult) *EncryptionConfigProperties { return v.EncryptionConfig }).(EncryptionConfigPropertiesPtrOutput)
}

func (o LookupDatasetResultOutput) Schema() SchemaPropertiesPtrOutput {
	return o.ApplyT(func(v LookupDatasetResult) *SchemaProperties { return v.Schema }).(SchemaPropertiesPtrOutput)
}

func (o LookupDatasetResultOutput) Tags() TagsItemPropertiesArrayOutput {
	return o.ApplyT(func(v LookupDatasetResult) []TagsItemProperties { return v.Tags }).(TagsItemPropertiesArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDatasetResultOutput{})
}
