// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package managedblockchain

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::ManagedBlockchain::com.amazonaws.taiga.webservice.api#Accessor Resource Type
//
// Deprecated: Accessor is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
type Accessor struct {
	pulumi.CustomResourceState

	AccessorType AccessorTypeOutput                   `pulumi:"accessorType"`
	Arn          pulumi.StringOutput                  `pulumi:"arn"`
	BillingToken pulumi.StringOutput                  `pulumi:"billingToken"`
	CreationDate pulumi.StringOutput                  `pulumi:"creationDate"`
	NetworkType  AccessorNetworkAccessorTypePtrOutput `pulumi:"networkType"`
	Status       AccessorStatusOutput                 `pulumi:"status"`
	// An array of key-value pairs to apply to this resource.
	Tags AccessorTagArrayOutput `pulumi:"tags"`
}

// NewAccessor registers a new resource with the given unique name, arguments, and options.
func NewAccessor(ctx *pulumi.Context,
	name string, args *AccessorArgs, opts ...pulumi.ResourceOption) (*Accessor, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccessorType == nil {
		return nil, errors.New("invalid value for required argument 'AccessorType'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"accessorType",
		"networkType",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Accessor
	err := ctx.RegisterResource("aws-native:managedblockchain:Accessor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccessor gets an existing Accessor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessorState, opts ...pulumi.ResourceOption) (*Accessor, error) {
	var resource Accessor
	err := ctx.ReadResource("aws-native:managedblockchain:Accessor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Accessor resources.
type accessorState struct {
}

type AccessorState struct {
}

func (AccessorState) ElementType() reflect.Type {
	return reflect.TypeOf((*accessorState)(nil)).Elem()
}

type accessorArgs struct {
	AccessorType AccessorType                 `pulumi:"accessorType"`
	NetworkType  *AccessorNetworkAccessorType `pulumi:"networkType"`
	// An array of key-value pairs to apply to this resource.
	Tags []AccessorTag `pulumi:"tags"`
}

// The set of arguments for constructing a Accessor resource.
type AccessorArgs struct {
	AccessorType AccessorTypeInput
	NetworkType  AccessorNetworkAccessorTypePtrInput
	// An array of key-value pairs to apply to this resource.
	Tags AccessorTagArrayInput
}

func (AccessorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accessorArgs)(nil)).Elem()
}

type AccessorInput interface {
	pulumi.Input

	ToAccessorOutput() AccessorOutput
	ToAccessorOutputWithContext(ctx context.Context) AccessorOutput
}

func (*Accessor) ElementType() reflect.Type {
	return reflect.TypeOf((**Accessor)(nil)).Elem()
}

func (i *Accessor) ToAccessorOutput() AccessorOutput {
	return i.ToAccessorOutputWithContext(context.Background())
}

func (i *Accessor) ToAccessorOutputWithContext(ctx context.Context) AccessorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessorOutput)
}

type AccessorOutput struct{ *pulumi.OutputState }

func (AccessorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Accessor)(nil)).Elem()
}

func (o AccessorOutput) ToAccessorOutput() AccessorOutput {
	return o
}

func (o AccessorOutput) ToAccessorOutputWithContext(ctx context.Context) AccessorOutput {
	return o
}

func (o AccessorOutput) AccessorType() AccessorTypeOutput {
	return o.ApplyT(func(v *Accessor) AccessorTypeOutput { return v.AccessorType }).(AccessorTypeOutput)
}

func (o AccessorOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Accessor) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o AccessorOutput) BillingToken() pulumi.StringOutput {
	return o.ApplyT(func(v *Accessor) pulumi.StringOutput { return v.BillingToken }).(pulumi.StringOutput)
}

func (o AccessorOutput) CreationDate() pulumi.StringOutput {
	return o.ApplyT(func(v *Accessor) pulumi.StringOutput { return v.CreationDate }).(pulumi.StringOutput)
}

func (o AccessorOutput) NetworkType() AccessorNetworkAccessorTypePtrOutput {
	return o.ApplyT(func(v *Accessor) AccessorNetworkAccessorTypePtrOutput { return v.NetworkType }).(AccessorNetworkAccessorTypePtrOutput)
}

func (o AccessorOutput) Status() AccessorStatusOutput {
	return o.ApplyT(func(v *Accessor) AccessorStatusOutput { return v.Status }).(AccessorStatusOutput)
}

// An array of key-value pairs to apply to this resource.
func (o AccessorOutput) Tags() AccessorTagArrayOutput {
	return o.ApplyT(func(v *Accessor) AccessorTagArrayOutput { return v.Tags }).(AccessorTagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessorInput)(nil)).Elem(), &Accessor{})
	pulumi.RegisterOutputType(AccessorOutput{})
}
