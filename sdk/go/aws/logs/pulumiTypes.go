// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package logs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type DeliveryDestinationDestinationPolicy struct {
	// The name of the delivery destination to assign this policy to
	DeliveryDestinationName string `pulumi:"deliveryDestinationName"`
	// The contents of the policy attached to the delivery destination
	DeliveryDestinationPolicy string `pulumi:"deliveryDestinationPolicy"`
}

// DeliveryDestinationDestinationPolicyInput is an input type that accepts DeliveryDestinationDestinationPolicyArgs and DeliveryDestinationDestinationPolicyOutput values.
// You can construct a concrete instance of `DeliveryDestinationDestinationPolicyInput` via:
//
//	DeliveryDestinationDestinationPolicyArgs{...}
type DeliveryDestinationDestinationPolicyInput interface {
	pulumi.Input

	ToDeliveryDestinationDestinationPolicyOutput() DeliveryDestinationDestinationPolicyOutput
	ToDeliveryDestinationDestinationPolicyOutputWithContext(context.Context) DeliveryDestinationDestinationPolicyOutput
}

type DeliveryDestinationDestinationPolicyArgs struct {
	// The name of the delivery destination to assign this policy to
	DeliveryDestinationName pulumi.StringInput `pulumi:"deliveryDestinationName"`
	// The contents of the policy attached to the delivery destination
	DeliveryDestinationPolicy pulumi.StringInput `pulumi:"deliveryDestinationPolicy"`
}

func (DeliveryDestinationDestinationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeliveryDestinationDestinationPolicy)(nil)).Elem()
}

func (i DeliveryDestinationDestinationPolicyArgs) ToDeliveryDestinationDestinationPolicyOutput() DeliveryDestinationDestinationPolicyOutput {
	return i.ToDeliveryDestinationDestinationPolicyOutputWithContext(context.Background())
}

func (i DeliveryDestinationDestinationPolicyArgs) ToDeliveryDestinationDestinationPolicyOutputWithContext(ctx context.Context) DeliveryDestinationDestinationPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeliveryDestinationDestinationPolicyOutput)
}

// DeliveryDestinationDestinationPolicyArrayInput is an input type that accepts DeliveryDestinationDestinationPolicyArray and DeliveryDestinationDestinationPolicyArrayOutput values.
// You can construct a concrete instance of `DeliveryDestinationDestinationPolicyArrayInput` via:
//
//	DeliveryDestinationDestinationPolicyArray{ DeliveryDestinationDestinationPolicyArgs{...} }
type DeliveryDestinationDestinationPolicyArrayInput interface {
	pulumi.Input

	ToDeliveryDestinationDestinationPolicyArrayOutput() DeliveryDestinationDestinationPolicyArrayOutput
	ToDeliveryDestinationDestinationPolicyArrayOutputWithContext(context.Context) DeliveryDestinationDestinationPolicyArrayOutput
}

type DeliveryDestinationDestinationPolicyArray []DeliveryDestinationDestinationPolicyInput

func (DeliveryDestinationDestinationPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeliveryDestinationDestinationPolicy)(nil)).Elem()
}

func (i DeliveryDestinationDestinationPolicyArray) ToDeliveryDestinationDestinationPolicyArrayOutput() DeliveryDestinationDestinationPolicyArrayOutput {
	return i.ToDeliveryDestinationDestinationPolicyArrayOutputWithContext(context.Background())
}

func (i DeliveryDestinationDestinationPolicyArray) ToDeliveryDestinationDestinationPolicyArrayOutputWithContext(ctx context.Context) DeliveryDestinationDestinationPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeliveryDestinationDestinationPolicyArrayOutput)
}

type DeliveryDestinationDestinationPolicyOutput struct{ *pulumi.OutputState }

func (DeliveryDestinationDestinationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeliveryDestinationDestinationPolicy)(nil)).Elem()
}

func (o DeliveryDestinationDestinationPolicyOutput) ToDeliveryDestinationDestinationPolicyOutput() DeliveryDestinationDestinationPolicyOutput {
	return o
}

func (o DeliveryDestinationDestinationPolicyOutput) ToDeliveryDestinationDestinationPolicyOutputWithContext(ctx context.Context) DeliveryDestinationDestinationPolicyOutput {
	return o
}

// The name of the delivery destination to assign this policy to
func (o DeliveryDestinationDestinationPolicyOutput) DeliveryDestinationName() pulumi.StringOutput {
	return o.ApplyT(func(v DeliveryDestinationDestinationPolicy) string { return v.DeliveryDestinationName }).(pulumi.StringOutput)
}

// The contents of the policy attached to the delivery destination
func (o DeliveryDestinationDestinationPolicyOutput) DeliveryDestinationPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v DeliveryDestinationDestinationPolicy) string { return v.DeliveryDestinationPolicy }).(pulumi.StringOutput)
}

type DeliveryDestinationDestinationPolicyArrayOutput struct{ *pulumi.OutputState }

func (DeliveryDestinationDestinationPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeliveryDestinationDestinationPolicy)(nil)).Elem()
}

func (o DeliveryDestinationDestinationPolicyArrayOutput) ToDeliveryDestinationDestinationPolicyArrayOutput() DeliveryDestinationDestinationPolicyArrayOutput {
	return o
}

func (o DeliveryDestinationDestinationPolicyArrayOutput) ToDeliveryDestinationDestinationPolicyArrayOutputWithContext(ctx context.Context) DeliveryDestinationDestinationPolicyArrayOutput {
	return o
}

func (o DeliveryDestinationDestinationPolicyArrayOutput) Index(i pulumi.IntInput) DeliveryDestinationDestinationPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DeliveryDestinationDestinationPolicy {
		return vs[0].([]DeliveryDestinationDestinationPolicy)[vs[1].(int)]
	}).(DeliveryDestinationDestinationPolicyOutput)
}

// A key-value pair to associate with a resource.
type DeliveryDestinationTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// A key-value pair to associate with a resource.
type DeliverySourceTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode
	Value string `pulumi:"value"`
}

// A key-value pair to associate with a resource.
type DeliveryTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode
	Value string `pulumi:"value"`
}

type IntegrationOpenSearchResourceConfig struct {
	// If you want to use an existing OpenSearch Service application for your integration with OpenSearch Service, specify it here. If you omit this, a new application will be created.
	ApplicationArn *string `pulumi:"applicationArn"`
	// Specify the ARNs of IAM roles and IAM users who you want to grant permission to for viewing the dashboards.
	//
	// > In addition to specifying these users here, you must also grant them the *CloudWatchOpenSearchDashboardsAccess* IAM policy. For more information, see [IAM policies for users](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/OpenSearch-Dashboards-UserRoles.html) .
	DashboardViewerPrincipals []string `pulumi:"dashboardViewerPrincipals"`
	// Specify the ARN of an IAM role that CloudWatch Logs will use to create the integration. This role must have the permissions necessary to access the OpenSearch Service collection to be able to create the dashboards. For more information about the permissions needed, see [Permissions that the integration needs](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/OpenSearch-Dashboards-CreateRole.html) in the CloudWatch Logs User Guide.
	DataSourceRoleArn string `pulumi:"dataSourceRoleArn"`
	// To have the vended dashboard data encrypted with AWS KMS instead of the CloudWatch Logs default encryption method, specify the ARN of the AWS KMS key that you want to use.
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
	// Specify how many days that you want the data derived by OpenSearch Service to be retained in the index that the dashboard refers to. This also sets the maximum time period that you can choose when viewing data in the dashboard. Choosing a longer time frame will incur additional costs.
	RetentionDays *int `pulumi:"retentionDays"`
}

// IntegrationOpenSearchResourceConfigInput is an input type that accepts IntegrationOpenSearchResourceConfigArgs and IntegrationOpenSearchResourceConfigOutput values.
// You can construct a concrete instance of `IntegrationOpenSearchResourceConfigInput` via:
//
//	IntegrationOpenSearchResourceConfigArgs{...}
type IntegrationOpenSearchResourceConfigInput interface {
	pulumi.Input

	ToIntegrationOpenSearchResourceConfigOutput() IntegrationOpenSearchResourceConfigOutput
	ToIntegrationOpenSearchResourceConfigOutputWithContext(context.Context) IntegrationOpenSearchResourceConfigOutput
}

type IntegrationOpenSearchResourceConfigArgs struct {
	// If you want to use an existing OpenSearch Service application for your integration with OpenSearch Service, specify it here. If you omit this, a new application will be created.
	ApplicationArn pulumi.StringPtrInput `pulumi:"applicationArn"`
	// Specify the ARNs of IAM roles and IAM users who you want to grant permission to for viewing the dashboards.
	//
	// > In addition to specifying these users here, you must also grant them the *CloudWatchOpenSearchDashboardsAccess* IAM policy. For more information, see [IAM policies for users](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/OpenSearch-Dashboards-UserRoles.html) .
	DashboardViewerPrincipals pulumi.StringArrayInput `pulumi:"dashboardViewerPrincipals"`
	// Specify the ARN of an IAM role that CloudWatch Logs will use to create the integration. This role must have the permissions necessary to access the OpenSearch Service collection to be able to create the dashboards. For more information about the permissions needed, see [Permissions that the integration needs](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/OpenSearch-Dashboards-CreateRole.html) in the CloudWatch Logs User Guide.
	DataSourceRoleArn pulumi.StringInput `pulumi:"dataSourceRoleArn"`
	// To have the vended dashboard data encrypted with AWS KMS instead of the CloudWatch Logs default encryption method, specify the ARN of the AWS KMS key that you want to use.
	KmsKeyArn pulumi.StringPtrInput `pulumi:"kmsKeyArn"`
	// Specify how many days that you want the data derived by OpenSearch Service to be retained in the index that the dashboard refers to. This also sets the maximum time period that you can choose when viewing data in the dashboard. Choosing a longer time frame will incur additional costs.
	RetentionDays pulumi.IntPtrInput `pulumi:"retentionDays"`
}

func (IntegrationOpenSearchResourceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationOpenSearchResourceConfig)(nil)).Elem()
}

func (i IntegrationOpenSearchResourceConfigArgs) ToIntegrationOpenSearchResourceConfigOutput() IntegrationOpenSearchResourceConfigOutput {
	return i.ToIntegrationOpenSearchResourceConfigOutputWithContext(context.Background())
}

func (i IntegrationOpenSearchResourceConfigArgs) ToIntegrationOpenSearchResourceConfigOutputWithContext(ctx context.Context) IntegrationOpenSearchResourceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationOpenSearchResourceConfigOutput)
}

func (i IntegrationOpenSearchResourceConfigArgs) ToIntegrationOpenSearchResourceConfigPtrOutput() IntegrationOpenSearchResourceConfigPtrOutput {
	return i.ToIntegrationOpenSearchResourceConfigPtrOutputWithContext(context.Background())
}

func (i IntegrationOpenSearchResourceConfigArgs) ToIntegrationOpenSearchResourceConfigPtrOutputWithContext(ctx context.Context) IntegrationOpenSearchResourceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationOpenSearchResourceConfigOutput).ToIntegrationOpenSearchResourceConfigPtrOutputWithContext(ctx)
}

// IntegrationOpenSearchResourceConfigPtrInput is an input type that accepts IntegrationOpenSearchResourceConfigArgs, IntegrationOpenSearchResourceConfigPtr and IntegrationOpenSearchResourceConfigPtrOutput values.
// You can construct a concrete instance of `IntegrationOpenSearchResourceConfigPtrInput` via:
//
//	        IntegrationOpenSearchResourceConfigArgs{...}
//
//	or:
//
//	        nil
type IntegrationOpenSearchResourceConfigPtrInput interface {
	pulumi.Input

	ToIntegrationOpenSearchResourceConfigPtrOutput() IntegrationOpenSearchResourceConfigPtrOutput
	ToIntegrationOpenSearchResourceConfigPtrOutputWithContext(context.Context) IntegrationOpenSearchResourceConfigPtrOutput
}

type integrationOpenSearchResourceConfigPtrType IntegrationOpenSearchResourceConfigArgs

func IntegrationOpenSearchResourceConfigPtr(v *IntegrationOpenSearchResourceConfigArgs) IntegrationOpenSearchResourceConfigPtrInput {
	return (*integrationOpenSearchResourceConfigPtrType)(v)
}

func (*integrationOpenSearchResourceConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationOpenSearchResourceConfig)(nil)).Elem()
}

func (i *integrationOpenSearchResourceConfigPtrType) ToIntegrationOpenSearchResourceConfigPtrOutput() IntegrationOpenSearchResourceConfigPtrOutput {
	return i.ToIntegrationOpenSearchResourceConfigPtrOutputWithContext(context.Background())
}

func (i *integrationOpenSearchResourceConfigPtrType) ToIntegrationOpenSearchResourceConfigPtrOutputWithContext(ctx context.Context) IntegrationOpenSearchResourceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationOpenSearchResourceConfigPtrOutput)
}

type IntegrationOpenSearchResourceConfigOutput struct{ *pulumi.OutputState }

func (IntegrationOpenSearchResourceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationOpenSearchResourceConfig)(nil)).Elem()
}

func (o IntegrationOpenSearchResourceConfigOutput) ToIntegrationOpenSearchResourceConfigOutput() IntegrationOpenSearchResourceConfigOutput {
	return o
}

func (o IntegrationOpenSearchResourceConfigOutput) ToIntegrationOpenSearchResourceConfigOutputWithContext(ctx context.Context) IntegrationOpenSearchResourceConfigOutput {
	return o
}

func (o IntegrationOpenSearchResourceConfigOutput) ToIntegrationOpenSearchResourceConfigPtrOutput() IntegrationOpenSearchResourceConfigPtrOutput {
	return o.ToIntegrationOpenSearchResourceConfigPtrOutputWithContext(context.Background())
}

func (o IntegrationOpenSearchResourceConfigOutput) ToIntegrationOpenSearchResourceConfigPtrOutputWithContext(ctx context.Context) IntegrationOpenSearchResourceConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IntegrationOpenSearchResourceConfig) *IntegrationOpenSearchResourceConfig {
		return &v
	}).(IntegrationOpenSearchResourceConfigPtrOutput)
}

// If you want to use an existing OpenSearch Service application for your integration with OpenSearch Service, specify it here. If you omit this, a new application will be created.
func (o IntegrationOpenSearchResourceConfigOutput) ApplicationArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationOpenSearchResourceConfig) *string { return v.ApplicationArn }).(pulumi.StringPtrOutput)
}

// Specify the ARNs of IAM roles and IAM users who you want to grant permission to for viewing the dashboards.
//
// > In addition to specifying these users here, you must also grant them the *CloudWatchOpenSearchDashboardsAccess* IAM policy. For more information, see [IAM policies for users](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/OpenSearch-Dashboards-UserRoles.html) .
func (o IntegrationOpenSearchResourceConfigOutput) DashboardViewerPrincipals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IntegrationOpenSearchResourceConfig) []string { return v.DashboardViewerPrincipals }).(pulumi.StringArrayOutput)
}

// Specify the ARN of an IAM role that CloudWatch Logs will use to create the integration. This role must have the permissions necessary to access the OpenSearch Service collection to be able to create the dashboards. For more information about the permissions needed, see [Permissions that the integration needs](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/OpenSearch-Dashboards-CreateRole.html) in the CloudWatch Logs User Guide.
func (o IntegrationOpenSearchResourceConfigOutput) DataSourceRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationOpenSearchResourceConfig) string { return v.DataSourceRoleArn }).(pulumi.StringOutput)
}

// To have the vended dashboard data encrypted with AWS KMS instead of the CloudWatch Logs default encryption method, specify the ARN of the AWS KMS key that you want to use.
func (o IntegrationOpenSearchResourceConfigOutput) KmsKeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationOpenSearchResourceConfig) *string { return v.KmsKeyArn }).(pulumi.StringPtrOutput)
}

// Specify how many days that you want the data derived by OpenSearch Service to be retained in the index that the dashboard refers to. This also sets the maximum time period that you can choose when viewing data in the dashboard. Choosing a longer time frame will incur additional costs.
func (o IntegrationOpenSearchResourceConfigOutput) RetentionDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IntegrationOpenSearchResourceConfig) *int { return v.RetentionDays }).(pulumi.IntPtrOutput)
}

type IntegrationOpenSearchResourceConfigPtrOutput struct{ *pulumi.OutputState }

func (IntegrationOpenSearchResourceConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationOpenSearchResourceConfig)(nil)).Elem()
}

func (o IntegrationOpenSearchResourceConfigPtrOutput) ToIntegrationOpenSearchResourceConfigPtrOutput() IntegrationOpenSearchResourceConfigPtrOutput {
	return o
}

func (o IntegrationOpenSearchResourceConfigPtrOutput) ToIntegrationOpenSearchResourceConfigPtrOutputWithContext(ctx context.Context) IntegrationOpenSearchResourceConfigPtrOutput {
	return o
}

func (o IntegrationOpenSearchResourceConfigPtrOutput) Elem() IntegrationOpenSearchResourceConfigOutput {
	return o.ApplyT(func(v *IntegrationOpenSearchResourceConfig) IntegrationOpenSearchResourceConfig {
		if v != nil {
			return *v
		}
		var ret IntegrationOpenSearchResourceConfig
		return ret
	}).(IntegrationOpenSearchResourceConfigOutput)
}

// If you want to use an existing OpenSearch Service application for your integration with OpenSearch Service, specify it here. If you omit this, a new application will be created.
func (o IntegrationOpenSearchResourceConfigPtrOutput) ApplicationArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationOpenSearchResourceConfig) *string {
		if v == nil {
			return nil
		}
		return v.ApplicationArn
	}).(pulumi.StringPtrOutput)
}

// Specify the ARNs of IAM roles and IAM users who you want to grant permission to for viewing the dashboards.
//
// > In addition to specifying these users here, you must also grant them the *CloudWatchOpenSearchDashboardsAccess* IAM policy. For more information, see [IAM policies for users](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/OpenSearch-Dashboards-UserRoles.html) .
func (o IntegrationOpenSearchResourceConfigPtrOutput) DashboardViewerPrincipals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IntegrationOpenSearchResourceConfig) []string {
		if v == nil {
			return nil
		}
		return v.DashboardViewerPrincipals
	}).(pulumi.StringArrayOutput)
}

// Specify the ARN of an IAM role that CloudWatch Logs will use to create the integration. This role must have the permissions necessary to access the OpenSearch Service collection to be able to create the dashboards. For more information about the permissions needed, see [Permissions that the integration needs](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/OpenSearch-Dashboards-CreateRole.html) in the CloudWatch Logs User Guide.
func (o IntegrationOpenSearchResourceConfigPtrOutput) DataSourceRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationOpenSearchResourceConfig) *string {
		if v == nil {
			return nil
		}
		return &v.DataSourceRoleArn
	}).(pulumi.StringPtrOutput)
}

// To have the vended dashboard data encrypted with AWS KMS instead of the CloudWatch Logs default encryption method, specify the ARN of the AWS KMS key that you want to use.
func (o IntegrationOpenSearchResourceConfigPtrOutput) KmsKeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationOpenSearchResourceConfig) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyArn
	}).(pulumi.StringPtrOutput)
}

// Specify how many days that you want the data derived by OpenSearch Service to be retained in the index that the dashboard refers to. This also sets the maximum time period that you can choose when viewing data in the dashboard. Choosing a longer time frame will incur additional costs.
func (o IntegrationOpenSearchResourceConfigPtrOutput) RetentionDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IntegrationOpenSearchResourceConfig) *int {
		if v == nil {
			return nil
		}
		return v.RetentionDays
	}).(pulumi.IntPtrOutput)
}

// The value of this key-value pair.
type LogGroupTag struct {
	Key string `pulumi:"key"`
	// The value of this key-value pair.
	Value string `pulumi:"value"`
}

// Specifies the CW metric dimensions to publish with this metric.
//
//	 Because dimensions are part of the unique identifier for a metric, whenever a unique dimension name/value pair is extracted from your logs, you are creating a new variation of that metric.
//	For more information about publishing dimensions with metrics created by metric filters, see [Publishing dimensions with metrics from values in JSON or space-delimited log events](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html#logs-metric-filters-dimensions).
//	 Metrics extracted from log events are charged as custom metrics. To prevent unexpected high charges, do not specify high-cardinality fields such as ``IPAddress`` or ``requestID`` as dimensions. Each different value found for a dimension is treated as a separate metric and accrues charges as a separate custom metric.
//	To help prevent accidental high charges, Amazon disables a metric filter if it generates 1000 different name/value pairs for the dimensions that you have specified within a certain amount of time.
//	You can also set up a billing alarm to alert you if your charges are higher than expected. For more information, see [Creating a Billing Alarm to Monitor Your Estimated Charges](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/monitor_estimated_charges_with_cloudwatch.html).
type MetricFilterDimension struct {
	// The name for the CW metric dimension that the metric filter creates.
	//  Dimension names must contain only ASCII characters, must include at least one non-whitespace character, and cannot start with a colon (:).
	Key string `pulumi:"key"`
	// The log event field that will contain the value for this dimension. This dimension will only be published for a metric if the value is found in the log event. For example, ``$.eventType`` for JSON log events, or ``$server`` for space-delimited log events.
	Value string `pulumi:"value"`
}

// MetricFilterDimensionInput is an input type that accepts MetricFilterDimensionArgs and MetricFilterDimensionOutput values.
// You can construct a concrete instance of `MetricFilterDimensionInput` via:
//
//	MetricFilterDimensionArgs{...}
type MetricFilterDimensionInput interface {
	pulumi.Input

	ToMetricFilterDimensionOutput() MetricFilterDimensionOutput
	ToMetricFilterDimensionOutputWithContext(context.Context) MetricFilterDimensionOutput
}

// Specifies the CW metric dimensions to publish with this metric.
//
//	 Because dimensions are part of the unique identifier for a metric, whenever a unique dimension name/value pair is extracted from your logs, you are creating a new variation of that metric.
//	For more information about publishing dimensions with metrics created by metric filters, see [Publishing dimensions with metrics from values in JSON or space-delimited log events](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html#logs-metric-filters-dimensions).
//	 Metrics extracted from log events are charged as custom metrics. To prevent unexpected high charges, do not specify high-cardinality fields such as ``IPAddress`` or ``requestID`` as dimensions. Each different value found for a dimension is treated as a separate metric and accrues charges as a separate custom metric.
//	To help prevent accidental high charges, Amazon disables a metric filter if it generates 1000 different name/value pairs for the dimensions that you have specified within a certain amount of time.
//	You can also set up a billing alarm to alert you if your charges are higher than expected. For more information, see [Creating a Billing Alarm to Monitor Your Estimated Charges](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/monitor_estimated_charges_with_cloudwatch.html).
type MetricFilterDimensionArgs struct {
	// The name for the CW metric dimension that the metric filter creates.
	//  Dimension names must contain only ASCII characters, must include at least one non-whitespace character, and cannot start with a colon (:).
	Key pulumi.StringInput `pulumi:"key"`
	// The log event field that will contain the value for this dimension. This dimension will only be published for a metric if the value is found in the log event. For example, ``$.eventType`` for JSON log events, or ``$server`` for space-delimited log events.
	Value pulumi.StringInput `pulumi:"value"`
}

func (MetricFilterDimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricFilterDimension)(nil)).Elem()
}

func (i MetricFilterDimensionArgs) ToMetricFilterDimensionOutput() MetricFilterDimensionOutput {
	return i.ToMetricFilterDimensionOutputWithContext(context.Background())
}

func (i MetricFilterDimensionArgs) ToMetricFilterDimensionOutputWithContext(ctx context.Context) MetricFilterDimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricFilterDimensionOutput)
}

// MetricFilterDimensionArrayInput is an input type that accepts MetricFilterDimensionArray and MetricFilterDimensionArrayOutput values.
// You can construct a concrete instance of `MetricFilterDimensionArrayInput` via:
//
//	MetricFilterDimensionArray{ MetricFilterDimensionArgs{...} }
type MetricFilterDimensionArrayInput interface {
	pulumi.Input

	ToMetricFilterDimensionArrayOutput() MetricFilterDimensionArrayOutput
	ToMetricFilterDimensionArrayOutputWithContext(context.Context) MetricFilterDimensionArrayOutput
}

type MetricFilterDimensionArray []MetricFilterDimensionInput

func (MetricFilterDimensionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricFilterDimension)(nil)).Elem()
}

func (i MetricFilterDimensionArray) ToMetricFilterDimensionArrayOutput() MetricFilterDimensionArrayOutput {
	return i.ToMetricFilterDimensionArrayOutputWithContext(context.Background())
}

func (i MetricFilterDimensionArray) ToMetricFilterDimensionArrayOutputWithContext(ctx context.Context) MetricFilterDimensionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricFilterDimensionArrayOutput)
}

// Specifies the CW metric dimensions to publish with this metric.
//
//	 Because dimensions are part of the unique identifier for a metric, whenever a unique dimension name/value pair is extracted from your logs, you are creating a new variation of that metric.
//	For more information about publishing dimensions with metrics created by metric filters, see [Publishing dimensions with metrics from values in JSON or space-delimited log events](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html#logs-metric-filters-dimensions).
//	 Metrics extracted from log events are charged as custom metrics. To prevent unexpected high charges, do not specify high-cardinality fields such as ``IPAddress`` or ``requestID`` as dimensions. Each different value found for a dimension is treated as a separate metric and accrues charges as a separate custom metric.
//	To help prevent accidental high charges, Amazon disables a metric filter if it generates 1000 different name/value pairs for the dimensions that you have specified within a certain amount of time.
//	You can also set up a billing alarm to alert you if your charges are higher than expected. For more information, see [Creating a Billing Alarm to Monitor Your Estimated Charges](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/monitor_estimated_charges_with_cloudwatch.html).
type MetricFilterDimensionOutput struct{ *pulumi.OutputState }

func (MetricFilterDimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricFilterDimension)(nil)).Elem()
}

func (o MetricFilterDimensionOutput) ToMetricFilterDimensionOutput() MetricFilterDimensionOutput {
	return o
}

func (o MetricFilterDimensionOutput) ToMetricFilterDimensionOutputWithContext(ctx context.Context) MetricFilterDimensionOutput {
	return o
}

// The name for the CW metric dimension that the metric filter creates.
//
//	Dimension names must contain only ASCII characters, must include at least one non-whitespace character, and cannot start with a colon (:).
func (o MetricFilterDimensionOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v MetricFilterDimension) string { return v.Key }).(pulumi.StringOutput)
}

// The log event field that will contain the value for this dimension. This dimension will only be published for a metric if the value is found in the log event. For example, “$.eventType“ for JSON log events, or “$server“ for space-delimited log events.
func (o MetricFilterDimensionOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v MetricFilterDimension) string { return v.Value }).(pulumi.StringOutput)
}

type MetricFilterDimensionArrayOutput struct{ *pulumi.OutputState }

func (MetricFilterDimensionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricFilterDimension)(nil)).Elem()
}

func (o MetricFilterDimensionArrayOutput) ToMetricFilterDimensionArrayOutput() MetricFilterDimensionArrayOutput {
	return o
}

func (o MetricFilterDimensionArrayOutput) ToMetricFilterDimensionArrayOutputWithContext(ctx context.Context) MetricFilterDimensionArrayOutput {
	return o
}

func (o MetricFilterDimensionArrayOutput) Index(i pulumi.IntInput) MetricFilterDimensionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricFilterDimension {
		return vs[0].([]MetricFilterDimension)[vs[1].(int)]
	}).(MetricFilterDimensionOutput)
}

// “MetricTransformation“ is a property of the “AWS::Logs::MetricFilter“ resource that describes how to transform log streams into a CloudWatch metric.
type MetricFilterMetricTransformation struct {
	// (Optional) The value to emit when a filter pattern does not match a log event. This value can be null.
	DefaultValue *float64 `pulumi:"defaultValue"`
	// The fields to use as dimensions for the metric. One metric filter can include as many as three dimensions.
	//   Metrics extracted from log events are charged as custom metrics. To prevent unexpected high charges, do not specify high-cardinality fields such as ``IPAddress`` or ``requestID`` as dimensions. Each different value found for a dimension is treated as a separate metric and accrues charges as a separate custom metric.
	//  CloudWatch Logs disables a metric filter if it generates 1000 different name/value pairs for your specified dimensions within a certain amount of time. This helps to prevent accidental high charges.
	//  You can also set up a billing alarm to alert you if your charges are higher than expected. For more information, see [Creating a Billing Alarm to Monitor Your Estimated Charges](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/monitor_estimated_charges_with_cloudwatch.html).
	Dimensions []MetricFilterDimension `pulumi:"dimensions"`
	// The name of the CloudWatch metric.
	MetricName string `pulumi:"metricName"`
	// A custom namespace to contain your metric in CloudWatch. Use namespaces to group together metrics that are similar. For more information, see [Namespaces](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Namespace).
	MetricNamespace string `pulumi:"metricNamespace"`
	// The value that is published to the CloudWatch metric. For example, if you're counting the occurrences of a particular term like ``Error``, specify 1 for the metric value. If you're counting the number of bytes transferred, reference the value that is in the log event by using $. followed by the name of the field that you specified in the filter pattern, such as ``$.size``.
	MetricValue string `pulumi:"metricValue"`
	// The unit to assign to the metric. If you omit this, the unit is set as ``None``.
	Unit *MetricFilterMetricTransformationUnit `pulumi:"unit"`
}

// MetricFilterMetricTransformationInput is an input type that accepts MetricFilterMetricTransformationArgs and MetricFilterMetricTransformationOutput values.
// You can construct a concrete instance of `MetricFilterMetricTransformationInput` via:
//
//	MetricFilterMetricTransformationArgs{...}
type MetricFilterMetricTransformationInput interface {
	pulumi.Input

	ToMetricFilterMetricTransformationOutput() MetricFilterMetricTransformationOutput
	ToMetricFilterMetricTransformationOutputWithContext(context.Context) MetricFilterMetricTransformationOutput
}

// “MetricTransformation“ is a property of the “AWS::Logs::MetricFilter“ resource that describes how to transform log streams into a CloudWatch metric.
type MetricFilterMetricTransformationArgs struct {
	// (Optional) The value to emit when a filter pattern does not match a log event. This value can be null.
	DefaultValue pulumi.Float64PtrInput `pulumi:"defaultValue"`
	// The fields to use as dimensions for the metric. One metric filter can include as many as three dimensions.
	//   Metrics extracted from log events are charged as custom metrics. To prevent unexpected high charges, do not specify high-cardinality fields such as ``IPAddress`` or ``requestID`` as dimensions. Each different value found for a dimension is treated as a separate metric and accrues charges as a separate custom metric.
	//  CloudWatch Logs disables a metric filter if it generates 1000 different name/value pairs for your specified dimensions within a certain amount of time. This helps to prevent accidental high charges.
	//  You can also set up a billing alarm to alert you if your charges are higher than expected. For more information, see [Creating a Billing Alarm to Monitor Your Estimated Charges](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/monitor_estimated_charges_with_cloudwatch.html).
	Dimensions MetricFilterDimensionArrayInput `pulumi:"dimensions"`
	// The name of the CloudWatch metric.
	MetricName pulumi.StringInput `pulumi:"metricName"`
	// A custom namespace to contain your metric in CloudWatch. Use namespaces to group together metrics that are similar. For more information, see [Namespaces](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Namespace).
	MetricNamespace pulumi.StringInput `pulumi:"metricNamespace"`
	// The value that is published to the CloudWatch metric. For example, if you're counting the occurrences of a particular term like ``Error``, specify 1 for the metric value. If you're counting the number of bytes transferred, reference the value that is in the log event by using $. followed by the name of the field that you specified in the filter pattern, such as ``$.size``.
	MetricValue pulumi.StringInput `pulumi:"metricValue"`
	// The unit to assign to the metric. If you omit this, the unit is set as ``None``.
	Unit MetricFilterMetricTransformationUnitPtrInput `pulumi:"unit"`
}

func (MetricFilterMetricTransformationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricFilterMetricTransformation)(nil)).Elem()
}

func (i MetricFilterMetricTransformationArgs) ToMetricFilterMetricTransformationOutput() MetricFilterMetricTransformationOutput {
	return i.ToMetricFilterMetricTransformationOutputWithContext(context.Background())
}

func (i MetricFilterMetricTransformationArgs) ToMetricFilterMetricTransformationOutputWithContext(ctx context.Context) MetricFilterMetricTransformationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricFilterMetricTransformationOutput)
}

// MetricFilterMetricTransformationArrayInput is an input type that accepts MetricFilterMetricTransformationArray and MetricFilterMetricTransformationArrayOutput values.
// You can construct a concrete instance of `MetricFilterMetricTransformationArrayInput` via:
//
//	MetricFilterMetricTransformationArray{ MetricFilterMetricTransformationArgs{...} }
type MetricFilterMetricTransformationArrayInput interface {
	pulumi.Input

	ToMetricFilterMetricTransformationArrayOutput() MetricFilterMetricTransformationArrayOutput
	ToMetricFilterMetricTransformationArrayOutputWithContext(context.Context) MetricFilterMetricTransformationArrayOutput
}

type MetricFilterMetricTransformationArray []MetricFilterMetricTransformationInput

func (MetricFilterMetricTransformationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricFilterMetricTransformation)(nil)).Elem()
}

func (i MetricFilterMetricTransformationArray) ToMetricFilterMetricTransformationArrayOutput() MetricFilterMetricTransformationArrayOutput {
	return i.ToMetricFilterMetricTransformationArrayOutputWithContext(context.Background())
}

func (i MetricFilterMetricTransformationArray) ToMetricFilterMetricTransformationArrayOutputWithContext(ctx context.Context) MetricFilterMetricTransformationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricFilterMetricTransformationArrayOutput)
}

// “MetricTransformation“ is a property of the “AWS::Logs::MetricFilter“ resource that describes how to transform log streams into a CloudWatch metric.
type MetricFilterMetricTransformationOutput struct{ *pulumi.OutputState }

func (MetricFilterMetricTransformationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricFilterMetricTransformation)(nil)).Elem()
}

func (o MetricFilterMetricTransformationOutput) ToMetricFilterMetricTransformationOutput() MetricFilterMetricTransformationOutput {
	return o
}

func (o MetricFilterMetricTransformationOutput) ToMetricFilterMetricTransformationOutputWithContext(ctx context.Context) MetricFilterMetricTransformationOutput {
	return o
}

// (Optional) The value to emit when a filter pattern does not match a log event. This value can be null.
func (o MetricFilterMetricTransformationOutput) DefaultValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MetricFilterMetricTransformation) *float64 { return v.DefaultValue }).(pulumi.Float64PtrOutput)
}

// The fields to use as dimensions for the metric. One metric filter can include as many as three dimensions.
//
//	 Metrics extracted from log events are charged as custom metrics. To prevent unexpected high charges, do not specify high-cardinality fields such as ``IPAddress`` or ``requestID`` as dimensions. Each different value found for a dimension is treated as a separate metric and accrues charges as a separate custom metric.
//	CloudWatch Logs disables a metric filter if it generates 1000 different name/value pairs for your specified dimensions within a certain amount of time. This helps to prevent accidental high charges.
//	You can also set up a billing alarm to alert you if your charges are higher than expected. For more information, see [Creating a Billing Alarm to Monitor Your Estimated Charges](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/monitor_estimated_charges_with_cloudwatch.html).
func (o MetricFilterMetricTransformationOutput) Dimensions() MetricFilterDimensionArrayOutput {
	return o.ApplyT(func(v MetricFilterMetricTransformation) []MetricFilterDimension { return v.Dimensions }).(MetricFilterDimensionArrayOutput)
}

// The name of the CloudWatch metric.
func (o MetricFilterMetricTransformationOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v MetricFilterMetricTransformation) string { return v.MetricName }).(pulumi.StringOutput)
}

// A custom namespace to contain your metric in CloudWatch. Use namespaces to group together metrics that are similar. For more information, see [Namespaces](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Namespace).
func (o MetricFilterMetricTransformationOutput) MetricNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v MetricFilterMetricTransformation) string { return v.MetricNamespace }).(pulumi.StringOutput)
}

// The value that is published to the CloudWatch metric. For example, if you're counting the occurrences of a particular term like “Error“, specify 1 for the metric value. If you're counting the number of bytes transferred, reference the value that is in the log event by using $. followed by the name of the field that you specified in the filter pattern, such as “$.size“.
func (o MetricFilterMetricTransformationOutput) MetricValue() pulumi.StringOutput {
	return o.ApplyT(func(v MetricFilterMetricTransformation) string { return v.MetricValue }).(pulumi.StringOutput)
}

// The unit to assign to the metric. If you omit this, the unit is set as “None“.
func (o MetricFilterMetricTransformationOutput) Unit() MetricFilterMetricTransformationUnitPtrOutput {
	return o.ApplyT(func(v MetricFilterMetricTransformation) *MetricFilterMetricTransformationUnit { return v.Unit }).(MetricFilterMetricTransformationUnitPtrOutput)
}

type MetricFilterMetricTransformationArrayOutput struct{ *pulumi.OutputState }

func (MetricFilterMetricTransformationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricFilterMetricTransformation)(nil)).Elem()
}

func (o MetricFilterMetricTransformationArrayOutput) ToMetricFilterMetricTransformationArrayOutput() MetricFilterMetricTransformationArrayOutput {
	return o
}

func (o MetricFilterMetricTransformationArrayOutput) ToMetricFilterMetricTransformationArrayOutputWithContext(ctx context.Context) MetricFilterMetricTransformationArrayOutput {
	return o
}

func (o MetricFilterMetricTransformationArrayOutput) Index(i pulumi.IntInput) MetricFilterMetricTransformationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricFilterMetricTransformation {
		return vs[0].([]MetricFilterMetricTransformation)[vs[1].(int)]
	}).(MetricFilterMetricTransformationOutput)
}

// OpenSearchResourceConfig for the given Integration
type ResourceConfigProperties struct {
	// This structure contains configuration details about an integration between CloudWatch Logs and OpenSearch Service.
	OpenSearchResourceConfig *IntegrationOpenSearchResourceConfig `pulumi:"openSearchResourceConfig"`
}

// ResourceConfigPropertiesInput is an input type that accepts ResourceConfigPropertiesArgs and ResourceConfigPropertiesOutput values.
// You can construct a concrete instance of `ResourceConfigPropertiesInput` via:
//
//	ResourceConfigPropertiesArgs{...}
type ResourceConfigPropertiesInput interface {
	pulumi.Input

	ToResourceConfigPropertiesOutput() ResourceConfigPropertiesOutput
	ToResourceConfigPropertiesOutputWithContext(context.Context) ResourceConfigPropertiesOutput
}

// OpenSearchResourceConfig for the given Integration
type ResourceConfigPropertiesArgs struct {
	// This structure contains configuration details about an integration between CloudWatch Logs and OpenSearch Service.
	OpenSearchResourceConfig IntegrationOpenSearchResourceConfigPtrInput `pulumi:"openSearchResourceConfig"`
}

func (ResourceConfigPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceConfigProperties)(nil)).Elem()
}

func (i ResourceConfigPropertiesArgs) ToResourceConfigPropertiesOutput() ResourceConfigPropertiesOutput {
	return i.ToResourceConfigPropertiesOutputWithContext(context.Background())
}

func (i ResourceConfigPropertiesArgs) ToResourceConfigPropertiesOutputWithContext(ctx context.Context) ResourceConfigPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceConfigPropertiesOutput)
}

// OpenSearchResourceConfig for the given Integration
type ResourceConfigPropertiesOutput struct{ *pulumi.OutputState }

func (ResourceConfigPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceConfigProperties)(nil)).Elem()
}

func (o ResourceConfigPropertiesOutput) ToResourceConfigPropertiesOutput() ResourceConfigPropertiesOutput {
	return o
}

func (o ResourceConfigPropertiesOutput) ToResourceConfigPropertiesOutputWithContext(ctx context.Context) ResourceConfigPropertiesOutput {
	return o
}

// This structure contains configuration details about an integration between CloudWatch Logs and OpenSearch Service.
func (o ResourceConfigPropertiesOutput) OpenSearchResourceConfig() IntegrationOpenSearchResourceConfigPtrOutput {
	return o.ApplyT(func(v ResourceConfigProperties) *IntegrationOpenSearchResourceConfig {
		return v.OpenSearchResourceConfig
	}).(IntegrationOpenSearchResourceConfigPtrOutput)
}

type TransformerAddKeyEntry struct {
	// The key of the new entry to be added to the log event
	Key string `pulumi:"key"`
	// Specifies whether to overwrite the value if the key already exists in the log event. If you omit this, the default is `false` .
	OverwriteIfExists *bool `pulumi:"overwriteIfExists"`
	// The value of the new entry to be added to the log event
	Value string `pulumi:"value"`
}

// TransformerAddKeyEntryInput is an input type that accepts TransformerAddKeyEntryArgs and TransformerAddKeyEntryOutput values.
// You can construct a concrete instance of `TransformerAddKeyEntryInput` via:
//
//	TransformerAddKeyEntryArgs{...}
type TransformerAddKeyEntryInput interface {
	pulumi.Input

	ToTransformerAddKeyEntryOutput() TransformerAddKeyEntryOutput
	ToTransformerAddKeyEntryOutputWithContext(context.Context) TransformerAddKeyEntryOutput
}

type TransformerAddKeyEntryArgs struct {
	// The key of the new entry to be added to the log event
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies whether to overwrite the value if the key already exists in the log event. If you omit this, the default is `false` .
	OverwriteIfExists pulumi.BoolPtrInput `pulumi:"overwriteIfExists"`
	// The value of the new entry to be added to the log event
	Value pulumi.StringInput `pulumi:"value"`
}

func (TransformerAddKeyEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerAddKeyEntry)(nil)).Elem()
}

func (i TransformerAddKeyEntryArgs) ToTransformerAddKeyEntryOutput() TransformerAddKeyEntryOutput {
	return i.ToTransformerAddKeyEntryOutputWithContext(context.Background())
}

func (i TransformerAddKeyEntryArgs) ToTransformerAddKeyEntryOutputWithContext(ctx context.Context) TransformerAddKeyEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerAddKeyEntryOutput)
}

// TransformerAddKeyEntryArrayInput is an input type that accepts TransformerAddKeyEntryArray and TransformerAddKeyEntryArrayOutput values.
// You can construct a concrete instance of `TransformerAddKeyEntryArrayInput` via:
//
//	TransformerAddKeyEntryArray{ TransformerAddKeyEntryArgs{...} }
type TransformerAddKeyEntryArrayInput interface {
	pulumi.Input

	ToTransformerAddKeyEntryArrayOutput() TransformerAddKeyEntryArrayOutput
	ToTransformerAddKeyEntryArrayOutputWithContext(context.Context) TransformerAddKeyEntryArrayOutput
}

type TransformerAddKeyEntryArray []TransformerAddKeyEntryInput

func (TransformerAddKeyEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformerAddKeyEntry)(nil)).Elem()
}

func (i TransformerAddKeyEntryArray) ToTransformerAddKeyEntryArrayOutput() TransformerAddKeyEntryArrayOutput {
	return i.ToTransformerAddKeyEntryArrayOutputWithContext(context.Background())
}

func (i TransformerAddKeyEntryArray) ToTransformerAddKeyEntryArrayOutputWithContext(ctx context.Context) TransformerAddKeyEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerAddKeyEntryArrayOutput)
}

type TransformerAddKeyEntryOutput struct{ *pulumi.OutputState }

func (TransformerAddKeyEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerAddKeyEntry)(nil)).Elem()
}

func (o TransformerAddKeyEntryOutput) ToTransformerAddKeyEntryOutput() TransformerAddKeyEntryOutput {
	return o
}

func (o TransformerAddKeyEntryOutput) ToTransformerAddKeyEntryOutputWithContext(ctx context.Context) TransformerAddKeyEntryOutput {
	return o
}

// The key of the new entry to be added to the log event
func (o TransformerAddKeyEntryOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v TransformerAddKeyEntry) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies whether to overwrite the value if the key already exists in the log event. If you omit this, the default is `false` .
func (o TransformerAddKeyEntryOutput) OverwriteIfExists() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TransformerAddKeyEntry) *bool { return v.OverwriteIfExists }).(pulumi.BoolPtrOutput)
}

// The value of the new entry to be added to the log event
func (o TransformerAddKeyEntryOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v TransformerAddKeyEntry) string { return v.Value }).(pulumi.StringOutput)
}

type TransformerAddKeyEntryArrayOutput struct{ *pulumi.OutputState }

func (TransformerAddKeyEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformerAddKeyEntry)(nil)).Elem()
}

func (o TransformerAddKeyEntryArrayOutput) ToTransformerAddKeyEntryArrayOutput() TransformerAddKeyEntryArrayOutput {
	return o
}

func (o TransformerAddKeyEntryArrayOutput) ToTransformerAddKeyEntryArrayOutputWithContext(ctx context.Context) TransformerAddKeyEntryArrayOutput {
	return o
}

func (o TransformerAddKeyEntryArrayOutput) Index(i pulumi.IntInput) TransformerAddKeyEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TransformerAddKeyEntry {
		return vs[0].([]TransformerAddKeyEntry)[vs[1].(int)]
	}).(TransformerAddKeyEntryOutput)
}

type TransformerCopyValueEntry struct {
	OverwriteIfExists *bool  `pulumi:"overwriteIfExists"`
	Source            string `pulumi:"source"`
	Target            string `pulumi:"target"`
}

// TransformerCopyValueEntryInput is an input type that accepts TransformerCopyValueEntryArgs and TransformerCopyValueEntryOutput values.
// You can construct a concrete instance of `TransformerCopyValueEntryInput` via:
//
//	TransformerCopyValueEntryArgs{...}
type TransformerCopyValueEntryInput interface {
	pulumi.Input

	ToTransformerCopyValueEntryOutput() TransformerCopyValueEntryOutput
	ToTransformerCopyValueEntryOutputWithContext(context.Context) TransformerCopyValueEntryOutput
}

type TransformerCopyValueEntryArgs struct {
	OverwriteIfExists pulumi.BoolPtrInput `pulumi:"overwriteIfExists"`
	Source            pulumi.StringInput  `pulumi:"source"`
	Target            pulumi.StringInput  `pulumi:"target"`
}

func (TransformerCopyValueEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerCopyValueEntry)(nil)).Elem()
}

func (i TransformerCopyValueEntryArgs) ToTransformerCopyValueEntryOutput() TransformerCopyValueEntryOutput {
	return i.ToTransformerCopyValueEntryOutputWithContext(context.Background())
}

func (i TransformerCopyValueEntryArgs) ToTransformerCopyValueEntryOutputWithContext(ctx context.Context) TransformerCopyValueEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerCopyValueEntryOutput)
}

// TransformerCopyValueEntryArrayInput is an input type that accepts TransformerCopyValueEntryArray and TransformerCopyValueEntryArrayOutput values.
// You can construct a concrete instance of `TransformerCopyValueEntryArrayInput` via:
//
//	TransformerCopyValueEntryArray{ TransformerCopyValueEntryArgs{...} }
type TransformerCopyValueEntryArrayInput interface {
	pulumi.Input

	ToTransformerCopyValueEntryArrayOutput() TransformerCopyValueEntryArrayOutput
	ToTransformerCopyValueEntryArrayOutputWithContext(context.Context) TransformerCopyValueEntryArrayOutput
}

type TransformerCopyValueEntryArray []TransformerCopyValueEntryInput

func (TransformerCopyValueEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformerCopyValueEntry)(nil)).Elem()
}

func (i TransformerCopyValueEntryArray) ToTransformerCopyValueEntryArrayOutput() TransformerCopyValueEntryArrayOutput {
	return i.ToTransformerCopyValueEntryArrayOutputWithContext(context.Background())
}

func (i TransformerCopyValueEntryArray) ToTransformerCopyValueEntryArrayOutputWithContext(ctx context.Context) TransformerCopyValueEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerCopyValueEntryArrayOutput)
}

type TransformerCopyValueEntryOutput struct{ *pulumi.OutputState }

func (TransformerCopyValueEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerCopyValueEntry)(nil)).Elem()
}

func (o TransformerCopyValueEntryOutput) ToTransformerCopyValueEntryOutput() TransformerCopyValueEntryOutput {
	return o
}

func (o TransformerCopyValueEntryOutput) ToTransformerCopyValueEntryOutputWithContext(ctx context.Context) TransformerCopyValueEntryOutput {
	return o
}

func (o TransformerCopyValueEntryOutput) OverwriteIfExists() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TransformerCopyValueEntry) *bool { return v.OverwriteIfExists }).(pulumi.BoolPtrOutput)
}

func (o TransformerCopyValueEntryOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v TransformerCopyValueEntry) string { return v.Source }).(pulumi.StringOutput)
}

func (o TransformerCopyValueEntryOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v TransformerCopyValueEntry) string { return v.Target }).(pulumi.StringOutput)
}

type TransformerCopyValueEntryArrayOutput struct{ *pulumi.OutputState }

func (TransformerCopyValueEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformerCopyValueEntry)(nil)).Elem()
}

func (o TransformerCopyValueEntryArrayOutput) ToTransformerCopyValueEntryArrayOutput() TransformerCopyValueEntryArrayOutput {
	return o
}

func (o TransformerCopyValueEntryArrayOutput) ToTransformerCopyValueEntryArrayOutputWithContext(ctx context.Context) TransformerCopyValueEntryArrayOutput {
	return o
}

func (o TransformerCopyValueEntryArrayOutput) Index(i pulumi.IntInput) TransformerCopyValueEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TransformerCopyValueEntry {
		return vs[0].([]TransformerCopyValueEntry)[vs[1].(int)]
	}).(TransformerCopyValueEntryOutput)
}

type TransformerMoveKeyEntry struct {
	OverwriteIfExists *bool  `pulumi:"overwriteIfExists"`
	Source            string `pulumi:"source"`
	Target            string `pulumi:"target"`
}

// TransformerMoveKeyEntryInput is an input type that accepts TransformerMoveKeyEntryArgs and TransformerMoveKeyEntryOutput values.
// You can construct a concrete instance of `TransformerMoveKeyEntryInput` via:
//
//	TransformerMoveKeyEntryArgs{...}
type TransformerMoveKeyEntryInput interface {
	pulumi.Input

	ToTransformerMoveKeyEntryOutput() TransformerMoveKeyEntryOutput
	ToTransformerMoveKeyEntryOutputWithContext(context.Context) TransformerMoveKeyEntryOutput
}

type TransformerMoveKeyEntryArgs struct {
	OverwriteIfExists pulumi.BoolPtrInput `pulumi:"overwriteIfExists"`
	Source            pulumi.StringInput  `pulumi:"source"`
	Target            pulumi.StringInput  `pulumi:"target"`
}

func (TransformerMoveKeyEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerMoveKeyEntry)(nil)).Elem()
}

func (i TransformerMoveKeyEntryArgs) ToTransformerMoveKeyEntryOutput() TransformerMoveKeyEntryOutput {
	return i.ToTransformerMoveKeyEntryOutputWithContext(context.Background())
}

func (i TransformerMoveKeyEntryArgs) ToTransformerMoveKeyEntryOutputWithContext(ctx context.Context) TransformerMoveKeyEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerMoveKeyEntryOutput)
}

// TransformerMoveKeyEntryArrayInput is an input type that accepts TransformerMoveKeyEntryArray and TransformerMoveKeyEntryArrayOutput values.
// You can construct a concrete instance of `TransformerMoveKeyEntryArrayInput` via:
//
//	TransformerMoveKeyEntryArray{ TransformerMoveKeyEntryArgs{...} }
type TransformerMoveKeyEntryArrayInput interface {
	pulumi.Input

	ToTransformerMoveKeyEntryArrayOutput() TransformerMoveKeyEntryArrayOutput
	ToTransformerMoveKeyEntryArrayOutputWithContext(context.Context) TransformerMoveKeyEntryArrayOutput
}

type TransformerMoveKeyEntryArray []TransformerMoveKeyEntryInput

func (TransformerMoveKeyEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformerMoveKeyEntry)(nil)).Elem()
}

func (i TransformerMoveKeyEntryArray) ToTransformerMoveKeyEntryArrayOutput() TransformerMoveKeyEntryArrayOutput {
	return i.ToTransformerMoveKeyEntryArrayOutputWithContext(context.Background())
}

func (i TransformerMoveKeyEntryArray) ToTransformerMoveKeyEntryArrayOutputWithContext(ctx context.Context) TransformerMoveKeyEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerMoveKeyEntryArrayOutput)
}

type TransformerMoveKeyEntryOutput struct{ *pulumi.OutputState }

func (TransformerMoveKeyEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerMoveKeyEntry)(nil)).Elem()
}

func (o TransformerMoveKeyEntryOutput) ToTransformerMoveKeyEntryOutput() TransformerMoveKeyEntryOutput {
	return o
}

func (o TransformerMoveKeyEntryOutput) ToTransformerMoveKeyEntryOutputWithContext(ctx context.Context) TransformerMoveKeyEntryOutput {
	return o
}

func (o TransformerMoveKeyEntryOutput) OverwriteIfExists() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TransformerMoveKeyEntry) *bool { return v.OverwriteIfExists }).(pulumi.BoolPtrOutput)
}

func (o TransformerMoveKeyEntryOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v TransformerMoveKeyEntry) string { return v.Source }).(pulumi.StringOutput)
}

func (o TransformerMoveKeyEntryOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v TransformerMoveKeyEntry) string { return v.Target }).(pulumi.StringOutput)
}

type TransformerMoveKeyEntryArrayOutput struct{ *pulumi.OutputState }

func (TransformerMoveKeyEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformerMoveKeyEntry)(nil)).Elem()
}

func (o TransformerMoveKeyEntryArrayOutput) ToTransformerMoveKeyEntryArrayOutput() TransformerMoveKeyEntryArrayOutput {
	return o
}

func (o TransformerMoveKeyEntryArrayOutput) ToTransformerMoveKeyEntryArrayOutputWithContext(ctx context.Context) TransformerMoveKeyEntryArrayOutput {
	return o
}

func (o TransformerMoveKeyEntryArrayOutput) Index(i pulumi.IntInput) TransformerMoveKeyEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TransformerMoveKeyEntry {
		return vs[0].([]TransformerMoveKeyEntry)[vs[1].(int)]
	}).(TransformerMoveKeyEntryOutput)
}

type TransformerParseCloudfront struct {
	// Omit this parameter and the whole log message will be processed by this processor. No other value than `@message` is allowed for `source` .
	Source *string `pulumi:"source"`
}

// TransformerParseCloudfrontInput is an input type that accepts TransformerParseCloudfrontArgs and TransformerParseCloudfrontOutput values.
// You can construct a concrete instance of `TransformerParseCloudfrontInput` via:
//
//	TransformerParseCloudfrontArgs{...}
type TransformerParseCloudfrontInput interface {
	pulumi.Input

	ToTransformerParseCloudfrontOutput() TransformerParseCloudfrontOutput
	ToTransformerParseCloudfrontOutputWithContext(context.Context) TransformerParseCloudfrontOutput
}

type TransformerParseCloudfrontArgs struct {
	// Omit this parameter and the whole log message will be processed by this processor. No other value than `@message` is allowed for `source` .
	Source pulumi.StringPtrInput `pulumi:"source"`
}

func (TransformerParseCloudfrontArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerParseCloudfront)(nil)).Elem()
}

func (i TransformerParseCloudfrontArgs) ToTransformerParseCloudfrontOutput() TransformerParseCloudfrontOutput {
	return i.ToTransformerParseCloudfrontOutputWithContext(context.Background())
}

func (i TransformerParseCloudfrontArgs) ToTransformerParseCloudfrontOutputWithContext(ctx context.Context) TransformerParseCloudfrontOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerParseCloudfrontOutput)
}

func (i TransformerParseCloudfrontArgs) ToTransformerParseCloudfrontPtrOutput() TransformerParseCloudfrontPtrOutput {
	return i.ToTransformerParseCloudfrontPtrOutputWithContext(context.Background())
}

func (i TransformerParseCloudfrontArgs) ToTransformerParseCloudfrontPtrOutputWithContext(ctx context.Context) TransformerParseCloudfrontPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerParseCloudfrontOutput).ToTransformerParseCloudfrontPtrOutputWithContext(ctx)
}

// TransformerParseCloudfrontPtrInput is an input type that accepts TransformerParseCloudfrontArgs, TransformerParseCloudfrontPtr and TransformerParseCloudfrontPtrOutput values.
// You can construct a concrete instance of `TransformerParseCloudfrontPtrInput` via:
//
//	        TransformerParseCloudfrontArgs{...}
//
//	or:
//
//	        nil
type TransformerParseCloudfrontPtrInput interface {
	pulumi.Input

	ToTransformerParseCloudfrontPtrOutput() TransformerParseCloudfrontPtrOutput
	ToTransformerParseCloudfrontPtrOutputWithContext(context.Context) TransformerParseCloudfrontPtrOutput
}

type transformerParseCloudfrontPtrType TransformerParseCloudfrontArgs

func TransformerParseCloudfrontPtr(v *TransformerParseCloudfrontArgs) TransformerParseCloudfrontPtrInput {
	return (*transformerParseCloudfrontPtrType)(v)
}

func (*transformerParseCloudfrontPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerParseCloudfront)(nil)).Elem()
}

func (i *transformerParseCloudfrontPtrType) ToTransformerParseCloudfrontPtrOutput() TransformerParseCloudfrontPtrOutput {
	return i.ToTransformerParseCloudfrontPtrOutputWithContext(context.Background())
}

func (i *transformerParseCloudfrontPtrType) ToTransformerParseCloudfrontPtrOutputWithContext(ctx context.Context) TransformerParseCloudfrontPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerParseCloudfrontPtrOutput)
}

type TransformerParseCloudfrontOutput struct{ *pulumi.OutputState }

func (TransformerParseCloudfrontOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerParseCloudfront)(nil)).Elem()
}

func (o TransformerParseCloudfrontOutput) ToTransformerParseCloudfrontOutput() TransformerParseCloudfrontOutput {
	return o
}

func (o TransformerParseCloudfrontOutput) ToTransformerParseCloudfrontOutputWithContext(ctx context.Context) TransformerParseCloudfrontOutput {
	return o
}

func (o TransformerParseCloudfrontOutput) ToTransformerParseCloudfrontPtrOutput() TransformerParseCloudfrontPtrOutput {
	return o.ToTransformerParseCloudfrontPtrOutputWithContext(context.Background())
}

func (o TransformerParseCloudfrontOutput) ToTransformerParseCloudfrontPtrOutputWithContext(ctx context.Context) TransformerParseCloudfrontPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformerParseCloudfront) *TransformerParseCloudfront {
		return &v
	}).(TransformerParseCloudfrontPtrOutput)
}

// Omit this parameter and the whole log message will be processed by this processor. No other value than `@message` is allowed for `source` .
func (o TransformerParseCloudfrontOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerParseCloudfront) *string { return v.Source }).(pulumi.StringPtrOutput)
}

type TransformerParseCloudfrontPtrOutput struct{ *pulumi.OutputState }

func (TransformerParseCloudfrontPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerParseCloudfront)(nil)).Elem()
}

func (o TransformerParseCloudfrontPtrOutput) ToTransformerParseCloudfrontPtrOutput() TransformerParseCloudfrontPtrOutput {
	return o
}

func (o TransformerParseCloudfrontPtrOutput) ToTransformerParseCloudfrontPtrOutputWithContext(ctx context.Context) TransformerParseCloudfrontPtrOutput {
	return o
}

func (o TransformerParseCloudfrontPtrOutput) Elem() TransformerParseCloudfrontOutput {
	return o.ApplyT(func(v *TransformerParseCloudfront) TransformerParseCloudfront {
		if v != nil {
			return *v
		}
		var ret TransformerParseCloudfront
		return ret
	}).(TransformerParseCloudfrontOutput)
}

// Omit this parameter and the whole log message will be processed by this processor. No other value than `@message` is allowed for `source` .
func (o TransformerParseCloudfrontPtrOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerParseCloudfront) *string {
		if v == nil {
			return nil
		}
		return v.Source
	}).(pulumi.StringPtrOutput)
}

type TransformerParsePostgres struct {
	// Omit this parameter and the whole log message will be processed by this processor. No other value than `@message` is allowed for `source` .
	Source *string `pulumi:"source"`
}

// TransformerParsePostgresInput is an input type that accepts TransformerParsePostgresArgs and TransformerParsePostgresOutput values.
// You can construct a concrete instance of `TransformerParsePostgresInput` via:
//
//	TransformerParsePostgresArgs{...}
type TransformerParsePostgresInput interface {
	pulumi.Input

	ToTransformerParsePostgresOutput() TransformerParsePostgresOutput
	ToTransformerParsePostgresOutputWithContext(context.Context) TransformerParsePostgresOutput
}

type TransformerParsePostgresArgs struct {
	// Omit this parameter and the whole log message will be processed by this processor. No other value than `@message` is allowed for `source` .
	Source pulumi.StringPtrInput `pulumi:"source"`
}

func (TransformerParsePostgresArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerParsePostgres)(nil)).Elem()
}

func (i TransformerParsePostgresArgs) ToTransformerParsePostgresOutput() TransformerParsePostgresOutput {
	return i.ToTransformerParsePostgresOutputWithContext(context.Background())
}

func (i TransformerParsePostgresArgs) ToTransformerParsePostgresOutputWithContext(ctx context.Context) TransformerParsePostgresOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerParsePostgresOutput)
}

func (i TransformerParsePostgresArgs) ToTransformerParsePostgresPtrOutput() TransformerParsePostgresPtrOutput {
	return i.ToTransformerParsePostgresPtrOutputWithContext(context.Background())
}

func (i TransformerParsePostgresArgs) ToTransformerParsePostgresPtrOutputWithContext(ctx context.Context) TransformerParsePostgresPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerParsePostgresOutput).ToTransformerParsePostgresPtrOutputWithContext(ctx)
}

// TransformerParsePostgresPtrInput is an input type that accepts TransformerParsePostgresArgs, TransformerParsePostgresPtr and TransformerParsePostgresPtrOutput values.
// You can construct a concrete instance of `TransformerParsePostgresPtrInput` via:
//
//	        TransformerParsePostgresArgs{...}
//
//	or:
//
//	        nil
type TransformerParsePostgresPtrInput interface {
	pulumi.Input

	ToTransformerParsePostgresPtrOutput() TransformerParsePostgresPtrOutput
	ToTransformerParsePostgresPtrOutputWithContext(context.Context) TransformerParsePostgresPtrOutput
}

type transformerParsePostgresPtrType TransformerParsePostgresArgs

func TransformerParsePostgresPtr(v *TransformerParsePostgresArgs) TransformerParsePostgresPtrInput {
	return (*transformerParsePostgresPtrType)(v)
}

func (*transformerParsePostgresPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerParsePostgres)(nil)).Elem()
}

func (i *transformerParsePostgresPtrType) ToTransformerParsePostgresPtrOutput() TransformerParsePostgresPtrOutput {
	return i.ToTransformerParsePostgresPtrOutputWithContext(context.Background())
}

func (i *transformerParsePostgresPtrType) ToTransformerParsePostgresPtrOutputWithContext(ctx context.Context) TransformerParsePostgresPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerParsePostgresPtrOutput)
}

type TransformerParsePostgresOutput struct{ *pulumi.OutputState }

func (TransformerParsePostgresOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerParsePostgres)(nil)).Elem()
}

func (o TransformerParsePostgresOutput) ToTransformerParsePostgresOutput() TransformerParsePostgresOutput {
	return o
}

func (o TransformerParsePostgresOutput) ToTransformerParsePostgresOutputWithContext(ctx context.Context) TransformerParsePostgresOutput {
	return o
}

func (o TransformerParsePostgresOutput) ToTransformerParsePostgresPtrOutput() TransformerParsePostgresPtrOutput {
	return o.ToTransformerParsePostgresPtrOutputWithContext(context.Background())
}

func (o TransformerParsePostgresOutput) ToTransformerParsePostgresPtrOutputWithContext(ctx context.Context) TransformerParsePostgresPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformerParsePostgres) *TransformerParsePostgres {
		return &v
	}).(TransformerParsePostgresPtrOutput)
}

// Omit this parameter and the whole log message will be processed by this processor. No other value than `@message` is allowed for `source` .
func (o TransformerParsePostgresOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerParsePostgres) *string { return v.Source }).(pulumi.StringPtrOutput)
}

type TransformerParsePostgresPtrOutput struct{ *pulumi.OutputState }

func (TransformerParsePostgresPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerParsePostgres)(nil)).Elem()
}

func (o TransformerParsePostgresPtrOutput) ToTransformerParsePostgresPtrOutput() TransformerParsePostgresPtrOutput {
	return o
}

func (o TransformerParsePostgresPtrOutput) ToTransformerParsePostgresPtrOutputWithContext(ctx context.Context) TransformerParsePostgresPtrOutput {
	return o
}

func (o TransformerParsePostgresPtrOutput) Elem() TransformerParsePostgresOutput {
	return o.ApplyT(func(v *TransformerParsePostgres) TransformerParsePostgres {
		if v != nil {
			return *v
		}
		var ret TransformerParsePostgres
		return ret
	}).(TransformerParsePostgresOutput)
}

// Omit this parameter and the whole log message will be processed by this processor. No other value than `@message` is allowed for `source` .
func (o TransformerParsePostgresPtrOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerParsePostgres) *string {
		if v == nil {
			return nil
		}
		return v.Source
	}).(pulumi.StringPtrOutput)
}

type TransformerParseRoute53 struct {
	// Omit this parameter and the whole log message will be processed by this processor. No other value than `@message` is allowed for `source` .
	Source *string `pulumi:"source"`
}

// TransformerParseRoute53Input is an input type that accepts TransformerParseRoute53Args and TransformerParseRoute53Output values.
// You can construct a concrete instance of `TransformerParseRoute53Input` via:
//
//	TransformerParseRoute53Args{...}
type TransformerParseRoute53Input interface {
	pulumi.Input

	ToTransformerParseRoute53Output() TransformerParseRoute53Output
	ToTransformerParseRoute53OutputWithContext(context.Context) TransformerParseRoute53Output
}

type TransformerParseRoute53Args struct {
	// Omit this parameter and the whole log message will be processed by this processor. No other value than `@message` is allowed for `source` .
	Source pulumi.StringPtrInput `pulumi:"source"`
}

func (TransformerParseRoute53Args) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerParseRoute53)(nil)).Elem()
}

func (i TransformerParseRoute53Args) ToTransformerParseRoute53Output() TransformerParseRoute53Output {
	return i.ToTransformerParseRoute53OutputWithContext(context.Background())
}

func (i TransformerParseRoute53Args) ToTransformerParseRoute53OutputWithContext(ctx context.Context) TransformerParseRoute53Output {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerParseRoute53Output)
}

func (i TransformerParseRoute53Args) ToTransformerParseRoute53PtrOutput() TransformerParseRoute53PtrOutput {
	return i.ToTransformerParseRoute53PtrOutputWithContext(context.Background())
}

func (i TransformerParseRoute53Args) ToTransformerParseRoute53PtrOutputWithContext(ctx context.Context) TransformerParseRoute53PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerParseRoute53Output).ToTransformerParseRoute53PtrOutputWithContext(ctx)
}

// TransformerParseRoute53PtrInput is an input type that accepts TransformerParseRoute53Args, TransformerParseRoute53Ptr and TransformerParseRoute53PtrOutput values.
// You can construct a concrete instance of `TransformerParseRoute53PtrInput` via:
//
//	        TransformerParseRoute53Args{...}
//
//	or:
//
//	        nil
type TransformerParseRoute53PtrInput interface {
	pulumi.Input

	ToTransformerParseRoute53PtrOutput() TransformerParseRoute53PtrOutput
	ToTransformerParseRoute53PtrOutputWithContext(context.Context) TransformerParseRoute53PtrOutput
}

type transformerParseRoute53PtrType TransformerParseRoute53Args

func TransformerParseRoute53Ptr(v *TransformerParseRoute53Args) TransformerParseRoute53PtrInput {
	return (*transformerParseRoute53PtrType)(v)
}

func (*transformerParseRoute53PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerParseRoute53)(nil)).Elem()
}

func (i *transformerParseRoute53PtrType) ToTransformerParseRoute53PtrOutput() TransformerParseRoute53PtrOutput {
	return i.ToTransformerParseRoute53PtrOutputWithContext(context.Background())
}

func (i *transformerParseRoute53PtrType) ToTransformerParseRoute53PtrOutputWithContext(ctx context.Context) TransformerParseRoute53PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerParseRoute53PtrOutput)
}

type TransformerParseRoute53Output struct{ *pulumi.OutputState }

func (TransformerParseRoute53Output) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerParseRoute53)(nil)).Elem()
}

func (o TransformerParseRoute53Output) ToTransformerParseRoute53Output() TransformerParseRoute53Output {
	return o
}

func (o TransformerParseRoute53Output) ToTransformerParseRoute53OutputWithContext(ctx context.Context) TransformerParseRoute53Output {
	return o
}

func (o TransformerParseRoute53Output) ToTransformerParseRoute53PtrOutput() TransformerParseRoute53PtrOutput {
	return o.ToTransformerParseRoute53PtrOutputWithContext(context.Background())
}

func (o TransformerParseRoute53Output) ToTransformerParseRoute53PtrOutputWithContext(ctx context.Context) TransformerParseRoute53PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformerParseRoute53) *TransformerParseRoute53 {
		return &v
	}).(TransformerParseRoute53PtrOutput)
}

// Omit this parameter and the whole log message will be processed by this processor. No other value than `@message` is allowed for `source` .
func (o TransformerParseRoute53Output) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerParseRoute53) *string { return v.Source }).(pulumi.StringPtrOutput)
}

type TransformerParseRoute53PtrOutput struct{ *pulumi.OutputState }

func (TransformerParseRoute53PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerParseRoute53)(nil)).Elem()
}

func (o TransformerParseRoute53PtrOutput) ToTransformerParseRoute53PtrOutput() TransformerParseRoute53PtrOutput {
	return o
}

func (o TransformerParseRoute53PtrOutput) ToTransformerParseRoute53PtrOutputWithContext(ctx context.Context) TransformerParseRoute53PtrOutput {
	return o
}

func (o TransformerParseRoute53PtrOutput) Elem() TransformerParseRoute53Output {
	return o.ApplyT(func(v *TransformerParseRoute53) TransformerParseRoute53 {
		if v != nil {
			return *v
		}
		var ret TransformerParseRoute53
		return ret
	}).(TransformerParseRoute53Output)
}

// Omit this parameter and the whole log message will be processed by this processor. No other value than `@message` is allowed for `source` .
func (o TransformerParseRoute53PtrOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerParseRoute53) *string {
		if v == nil {
			return nil
		}
		return v.Source
	}).(pulumi.StringPtrOutput)
}

type TransformerParseVpc struct {
	// Omit this parameter and the whole log message will be processed by this processor. No other value than `@message` is allowed for `source` .
	Source *string `pulumi:"source"`
}

// TransformerParseVpcInput is an input type that accepts TransformerParseVpcArgs and TransformerParseVpcOutput values.
// You can construct a concrete instance of `TransformerParseVpcInput` via:
//
//	TransformerParseVpcArgs{...}
type TransformerParseVpcInput interface {
	pulumi.Input

	ToTransformerParseVpcOutput() TransformerParseVpcOutput
	ToTransformerParseVpcOutputWithContext(context.Context) TransformerParseVpcOutput
}

type TransformerParseVpcArgs struct {
	// Omit this parameter and the whole log message will be processed by this processor. No other value than `@message` is allowed for `source` .
	Source pulumi.StringPtrInput `pulumi:"source"`
}

func (TransformerParseVpcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerParseVpc)(nil)).Elem()
}

func (i TransformerParseVpcArgs) ToTransformerParseVpcOutput() TransformerParseVpcOutput {
	return i.ToTransformerParseVpcOutputWithContext(context.Background())
}

func (i TransformerParseVpcArgs) ToTransformerParseVpcOutputWithContext(ctx context.Context) TransformerParseVpcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerParseVpcOutput)
}

func (i TransformerParseVpcArgs) ToTransformerParseVpcPtrOutput() TransformerParseVpcPtrOutput {
	return i.ToTransformerParseVpcPtrOutputWithContext(context.Background())
}

func (i TransformerParseVpcArgs) ToTransformerParseVpcPtrOutputWithContext(ctx context.Context) TransformerParseVpcPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerParseVpcOutput).ToTransformerParseVpcPtrOutputWithContext(ctx)
}

// TransformerParseVpcPtrInput is an input type that accepts TransformerParseVpcArgs, TransformerParseVpcPtr and TransformerParseVpcPtrOutput values.
// You can construct a concrete instance of `TransformerParseVpcPtrInput` via:
//
//	        TransformerParseVpcArgs{...}
//
//	or:
//
//	        nil
type TransformerParseVpcPtrInput interface {
	pulumi.Input

	ToTransformerParseVpcPtrOutput() TransformerParseVpcPtrOutput
	ToTransformerParseVpcPtrOutputWithContext(context.Context) TransformerParseVpcPtrOutput
}

type transformerParseVpcPtrType TransformerParseVpcArgs

func TransformerParseVpcPtr(v *TransformerParseVpcArgs) TransformerParseVpcPtrInput {
	return (*transformerParseVpcPtrType)(v)
}

func (*transformerParseVpcPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerParseVpc)(nil)).Elem()
}

func (i *transformerParseVpcPtrType) ToTransformerParseVpcPtrOutput() TransformerParseVpcPtrOutput {
	return i.ToTransformerParseVpcPtrOutputWithContext(context.Background())
}

func (i *transformerParseVpcPtrType) ToTransformerParseVpcPtrOutputWithContext(ctx context.Context) TransformerParseVpcPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerParseVpcPtrOutput)
}

type TransformerParseVpcOutput struct{ *pulumi.OutputState }

func (TransformerParseVpcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerParseVpc)(nil)).Elem()
}

func (o TransformerParseVpcOutput) ToTransformerParseVpcOutput() TransformerParseVpcOutput {
	return o
}

func (o TransformerParseVpcOutput) ToTransformerParseVpcOutputWithContext(ctx context.Context) TransformerParseVpcOutput {
	return o
}

func (o TransformerParseVpcOutput) ToTransformerParseVpcPtrOutput() TransformerParseVpcPtrOutput {
	return o.ToTransformerParseVpcPtrOutputWithContext(context.Background())
}

func (o TransformerParseVpcOutput) ToTransformerParseVpcPtrOutputWithContext(ctx context.Context) TransformerParseVpcPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformerParseVpc) *TransformerParseVpc {
		return &v
	}).(TransformerParseVpcPtrOutput)
}

// Omit this parameter and the whole log message will be processed by this processor. No other value than `@message` is allowed for `source` .
func (o TransformerParseVpcOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerParseVpc) *string { return v.Source }).(pulumi.StringPtrOutput)
}

type TransformerParseVpcPtrOutput struct{ *pulumi.OutputState }

func (TransformerParseVpcPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerParseVpc)(nil)).Elem()
}

func (o TransformerParseVpcPtrOutput) ToTransformerParseVpcPtrOutput() TransformerParseVpcPtrOutput {
	return o
}

func (o TransformerParseVpcPtrOutput) ToTransformerParseVpcPtrOutputWithContext(ctx context.Context) TransformerParseVpcPtrOutput {
	return o
}

func (o TransformerParseVpcPtrOutput) Elem() TransformerParseVpcOutput {
	return o.ApplyT(func(v *TransformerParseVpc) TransformerParseVpc {
		if v != nil {
			return *v
		}
		var ret TransformerParseVpc
		return ret
	}).(TransformerParseVpcOutput)
}

// Omit this parameter and the whole log message will be processed by this processor. No other value than `@message` is allowed for `source` .
func (o TransformerParseVpcPtrOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerParseVpc) *string {
		if v == nil {
			return nil
		}
		return v.Source
	}).(pulumi.StringPtrOutput)
}

type TransformerParseWaf struct {
	// Omit this parameter and the whole log message will be processed by this processor. No other value than `@message` is allowed for `source` .
	Source *string `pulumi:"source"`
}

// TransformerParseWafInput is an input type that accepts TransformerParseWafArgs and TransformerParseWafOutput values.
// You can construct a concrete instance of `TransformerParseWafInput` via:
//
//	TransformerParseWafArgs{...}
type TransformerParseWafInput interface {
	pulumi.Input

	ToTransformerParseWafOutput() TransformerParseWafOutput
	ToTransformerParseWafOutputWithContext(context.Context) TransformerParseWafOutput
}

type TransformerParseWafArgs struct {
	// Omit this parameter and the whole log message will be processed by this processor. No other value than `@message` is allowed for `source` .
	Source pulumi.StringPtrInput `pulumi:"source"`
}

func (TransformerParseWafArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerParseWaf)(nil)).Elem()
}

func (i TransformerParseWafArgs) ToTransformerParseWafOutput() TransformerParseWafOutput {
	return i.ToTransformerParseWafOutputWithContext(context.Background())
}

func (i TransformerParseWafArgs) ToTransformerParseWafOutputWithContext(ctx context.Context) TransformerParseWafOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerParseWafOutput)
}

func (i TransformerParseWafArgs) ToTransformerParseWafPtrOutput() TransformerParseWafPtrOutput {
	return i.ToTransformerParseWafPtrOutputWithContext(context.Background())
}

func (i TransformerParseWafArgs) ToTransformerParseWafPtrOutputWithContext(ctx context.Context) TransformerParseWafPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerParseWafOutput).ToTransformerParseWafPtrOutputWithContext(ctx)
}

// TransformerParseWafPtrInput is an input type that accepts TransformerParseWafArgs, TransformerParseWafPtr and TransformerParseWafPtrOutput values.
// You can construct a concrete instance of `TransformerParseWafPtrInput` via:
//
//	        TransformerParseWafArgs{...}
//
//	or:
//
//	        nil
type TransformerParseWafPtrInput interface {
	pulumi.Input

	ToTransformerParseWafPtrOutput() TransformerParseWafPtrOutput
	ToTransformerParseWafPtrOutputWithContext(context.Context) TransformerParseWafPtrOutput
}

type transformerParseWafPtrType TransformerParseWafArgs

func TransformerParseWafPtr(v *TransformerParseWafArgs) TransformerParseWafPtrInput {
	return (*transformerParseWafPtrType)(v)
}

func (*transformerParseWafPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerParseWaf)(nil)).Elem()
}

func (i *transformerParseWafPtrType) ToTransformerParseWafPtrOutput() TransformerParseWafPtrOutput {
	return i.ToTransformerParseWafPtrOutputWithContext(context.Background())
}

func (i *transformerParseWafPtrType) ToTransformerParseWafPtrOutputWithContext(ctx context.Context) TransformerParseWafPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerParseWafPtrOutput)
}

type TransformerParseWafOutput struct{ *pulumi.OutputState }

func (TransformerParseWafOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerParseWaf)(nil)).Elem()
}

func (o TransformerParseWafOutput) ToTransformerParseWafOutput() TransformerParseWafOutput {
	return o
}

func (o TransformerParseWafOutput) ToTransformerParseWafOutputWithContext(ctx context.Context) TransformerParseWafOutput {
	return o
}

func (o TransformerParseWafOutput) ToTransformerParseWafPtrOutput() TransformerParseWafPtrOutput {
	return o.ToTransformerParseWafPtrOutputWithContext(context.Background())
}

func (o TransformerParseWafOutput) ToTransformerParseWafPtrOutputWithContext(ctx context.Context) TransformerParseWafPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformerParseWaf) *TransformerParseWaf {
		return &v
	}).(TransformerParseWafPtrOutput)
}

// Omit this parameter and the whole log message will be processed by this processor. No other value than `@message` is allowed for `source` .
func (o TransformerParseWafOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerParseWaf) *string { return v.Source }).(pulumi.StringPtrOutput)
}

type TransformerParseWafPtrOutput struct{ *pulumi.OutputState }

func (TransformerParseWafPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerParseWaf)(nil)).Elem()
}

func (o TransformerParseWafPtrOutput) ToTransformerParseWafPtrOutput() TransformerParseWafPtrOutput {
	return o
}

func (o TransformerParseWafPtrOutput) ToTransformerParseWafPtrOutputWithContext(ctx context.Context) TransformerParseWafPtrOutput {
	return o
}

func (o TransformerParseWafPtrOutput) Elem() TransformerParseWafOutput {
	return o.ApplyT(func(v *TransformerParseWaf) TransformerParseWaf {
		if v != nil {
			return *v
		}
		var ret TransformerParseWaf
		return ret
	}).(TransformerParseWafOutput)
}

// Omit this parameter and the whole log message will be processed by this processor. No other value than `@message` is allowed for `source` .
func (o TransformerParseWafPtrOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerParseWaf) *string {
		if v == nil {
			return nil
		}
		return v.Source
	}).(pulumi.StringPtrOutput)
}

// Individual processor configuration
type TransformerProcessor struct {
	// Use this parameter to include the [addKeys](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-addKeys) processor in your transformer.
	AddKeys *TransformerProcessorAddKeysProperties `pulumi:"addKeys"`
	// Use this parameter to include the [copyValue](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-copyValue) processor in your transformer.
	CopyValue *TransformerProcessorCopyValueProperties `pulumi:"copyValue"`
	// Use this parameter to include the [CSV](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-CSV) processor in your transformer.
	Csv *TransformerProcessorCsvProperties `pulumi:"csv"`
	// Use this parameter to include the [datetimeConverter](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-datetimeConverter) processor in your transformer.
	DateTimeConverter *TransformerProcessorDateTimeConverterProperties `pulumi:"dateTimeConverter"`
	// Use this parameter to include the [deleteKeys](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-deleteKeys) processor in your transformer.
	DeleteKeys *TransformerProcessorDeleteKeysProperties `pulumi:"deleteKeys"`
	// Use this parameter to include the [grok](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-grok) processor in your transformer.
	Grok *TransformerProcessorGrokProperties `pulumi:"grok"`
	// Use this parameter to include the [listToMap](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-listToMap) processor in your transformer.
	ListToMap *TransformerProcessorListToMapProperties `pulumi:"listToMap"`
	// Use this parameter to include the [lowerCaseString](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-lowerCaseString) processor in your transformer.
	LowerCaseString *TransformerProcessorLowerCaseStringProperties `pulumi:"lowerCaseString"`
	// Use this parameter to include the [moveKeys](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-moveKeys) processor in your transformer.
	MoveKeys *TransformerProcessorMoveKeysProperties `pulumi:"moveKeys"`
	// Use this parameter to include the [parseCloudfront](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-parseCloudfront) processor in your transformer.
	//
	// If you use this processor, it must be the first processor in your transformer.
	ParseCloudfront *TransformerParseCloudfront `pulumi:"parseCloudfront"`
	// Use this parameter to include the [parseJSON](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-parseJSON) processor in your transformer.
	ParseJson *TransformerProcessorParseJsonProperties `pulumi:"parseJson"`
	// Use this parameter to include the [parseKeyValue](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-parseKeyValue) processor in your transformer.
	ParseKeyValue *TransformerProcessorParseKeyValueProperties `pulumi:"parseKeyValue"`
	// Use this parameter to include the [parsePostGres](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-parsePostGres) processor in your transformer.
	//
	// If you use this processor, it must be the first processor in your transformer.
	ParsePostgres *TransformerParsePostgres `pulumi:"parsePostgres"`
	// Use this parameter to include the [parseRoute53](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-parseRoute53) processor in your transformer.
	//
	// If you use this processor, it must be the first processor in your transformer.
	ParseRoute53 *TransformerParseRoute53 `pulumi:"parseRoute53"`
	// Use this parameter to include the [parseVPC](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-parseVPC) processor in your transformer.
	//
	// If you use this processor, it must be the first processor in your transformer.
	ParseVpc *TransformerParseVpc `pulumi:"parseVpc"`
	// Use this parameter to include the [parseWAF](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-parseWAF) processor in your transformer.
	//
	// If you use this processor, it must be the first processor in your transformer.
	ParseWaf *TransformerParseWaf `pulumi:"parseWaf"`
	// Use this parameter to include the [renameKeys](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-renameKeys) processor in your transformer.
	RenameKeys *TransformerProcessorRenameKeysProperties `pulumi:"renameKeys"`
	// Use this parameter to include the [splitString](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-splitString) processor in your transformer.
	SplitString *TransformerProcessorSplitStringProperties `pulumi:"splitString"`
	// Use this parameter to include the [substituteString](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-substituteString) processor in your transformer.
	SubstituteString *TransformerProcessorSubstituteStringProperties `pulumi:"substituteString"`
	// Use this parameter to include the [trimString](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-trimString) processor in your transformer.
	TrimString *TransformerProcessorTrimStringProperties `pulumi:"trimString"`
	// Use this parameter to include the [typeConverter](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-typeConverter) processor in your transformer.
	TypeConverter *TransformerProcessorTypeConverterProperties `pulumi:"typeConverter"`
	// Use this parameter to include the [upperCaseString](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-upperCaseString) processor in your transformer.
	UpperCaseString *TransformerProcessorUpperCaseStringProperties `pulumi:"upperCaseString"`
}

// TransformerProcessorInput is an input type that accepts TransformerProcessorArgs and TransformerProcessorOutput values.
// You can construct a concrete instance of `TransformerProcessorInput` via:
//
//	TransformerProcessorArgs{...}
type TransformerProcessorInput interface {
	pulumi.Input

	ToTransformerProcessorOutput() TransformerProcessorOutput
	ToTransformerProcessorOutputWithContext(context.Context) TransformerProcessorOutput
}

// Individual processor configuration
type TransformerProcessorArgs struct {
	// Use this parameter to include the [addKeys](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-addKeys) processor in your transformer.
	AddKeys TransformerProcessorAddKeysPropertiesPtrInput `pulumi:"addKeys"`
	// Use this parameter to include the [copyValue](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-copyValue) processor in your transformer.
	CopyValue TransformerProcessorCopyValuePropertiesPtrInput `pulumi:"copyValue"`
	// Use this parameter to include the [CSV](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-CSV) processor in your transformer.
	Csv TransformerProcessorCsvPropertiesPtrInput `pulumi:"csv"`
	// Use this parameter to include the [datetimeConverter](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-datetimeConverter) processor in your transformer.
	DateTimeConverter TransformerProcessorDateTimeConverterPropertiesPtrInput `pulumi:"dateTimeConverter"`
	// Use this parameter to include the [deleteKeys](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-deleteKeys) processor in your transformer.
	DeleteKeys TransformerProcessorDeleteKeysPropertiesPtrInput `pulumi:"deleteKeys"`
	// Use this parameter to include the [grok](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-grok) processor in your transformer.
	Grok TransformerProcessorGrokPropertiesPtrInput `pulumi:"grok"`
	// Use this parameter to include the [listToMap](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-listToMap) processor in your transformer.
	ListToMap TransformerProcessorListToMapPropertiesPtrInput `pulumi:"listToMap"`
	// Use this parameter to include the [lowerCaseString](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-lowerCaseString) processor in your transformer.
	LowerCaseString TransformerProcessorLowerCaseStringPropertiesPtrInput `pulumi:"lowerCaseString"`
	// Use this parameter to include the [moveKeys](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-moveKeys) processor in your transformer.
	MoveKeys TransformerProcessorMoveKeysPropertiesPtrInput `pulumi:"moveKeys"`
	// Use this parameter to include the [parseCloudfront](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-parseCloudfront) processor in your transformer.
	//
	// If you use this processor, it must be the first processor in your transformer.
	ParseCloudfront TransformerParseCloudfrontPtrInput `pulumi:"parseCloudfront"`
	// Use this parameter to include the [parseJSON](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-parseJSON) processor in your transformer.
	ParseJson TransformerProcessorParseJsonPropertiesPtrInput `pulumi:"parseJson"`
	// Use this parameter to include the [parseKeyValue](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-parseKeyValue) processor in your transformer.
	ParseKeyValue TransformerProcessorParseKeyValuePropertiesPtrInput `pulumi:"parseKeyValue"`
	// Use this parameter to include the [parsePostGres](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-parsePostGres) processor in your transformer.
	//
	// If you use this processor, it must be the first processor in your transformer.
	ParsePostgres TransformerParsePostgresPtrInput `pulumi:"parsePostgres"`
	// Use this parameter to include the [parseRoute53](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-parseRoute53) processor in your transformer.
	//
	// If you use this processor, it must be the first processor in your transformer.
	ParseRoute53 TransformerParseRoute53PtrInput `pulumi:"parseRoute53"`
	// Use this parameter to include the [parseVPC](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-parseVPC) processor in your transformer.
	//
	// If you use this processor, it must be the first processor in your transformer.
	ParseVpc TransformerParseVpcPtrInput `pulumi:"parseVpc"`
	// Use this parameter to include the [parseWAF](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-parseWAF) processor in your transformer.
	//
	// If you use this processor, it must be the first processor in your transformer.
	ParseWaf TransformerParseWafPtrInput `pulumi:"parseWaf"`
	// Use this parameter to include the [renameKeys](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-renameKeys) processor in your transformer.
	RenameKeys TransformerProcessorRenameKeysPropertiesPtrInput `pulumi:"renameKeys"`
	// Use this parameter to include the [splitString](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-splitString) processor in your transformer.
	SplitString TransformerProcessorSplitStringPropertiesPtrInput `pulumi:"splitString"`
	// Use this parameter to include the [substituteString](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-substituteString) processor in your transformer.
	SubstituteString TransformerProcessorSubstituteStringPropertiesPtrInput `pulumi:"substituteString"`
	// Use this parameter to include the [trimString](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-trimString) processor in your transformer.
	TrimString TransformerProcessorTrimStringPropertiesPtrInput `pulumi:"trimString"`
	// Use this parameter to include the [typeConverter](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-typeConverter) processor in your transformer.
	TypeConverter TransformerProcessorTypeConverterPropertiesPtrInput `pulumi:"typeConverter"`
	// Use this parameter to include the [upperCaseString](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-upperCaseString) processor in your transformer.
	UpperCaseString TransformerProcessorUpperCaseStringPropertiesPtrInput `pulumi:"upperCaseString"`
}

func (TransformerProcessorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerProcessor)(nil)).Elem()
}

func (i TransformerProcessorArgs) ToTransformerProcessorOutput() TransformerProcessorOutput {
	return i.ToTransformerProcessorOutputWithContext(context.Background())
}

func (i TransformerProcessorArgs) ToTransformerProcessorOutputWithContext(ctx context.Context) TransformerProcessorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerProcessorOutput)
}

// TransformerProcessorArrayInput is an input type that accepts TransformerProcessorArray and TransformerProcessorArrayOutput values.
// You can construct a concrete instance of `TransformerProcessorArrayInput` via:
//
//	TransformerProcessorArray{ TransformerProcessorArgs{...} }
type TransformerProcessorArrayInput interface {
	pulumi.Input

	ToTransformerProcessorArrayOutput() TransformerProcessorArrayOutput
	ToTransformerProcessorArrayOutputWithContext(context.Context) TransformerProcessorArrayOutput
}

type TransformerProcessorArray []TransformerProcessorInput

func (TransformerProcessorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformerProcessor)(nil)).Elem()
}

func (i TransformerProcessorArray) ToTransformerProcessorArrayOutput() TransformerProcessorArrayOutput {
	return i.ToTransformerProcessorArrayOutputWithContext(context.Background())
}

func (i TransformerProcessorArray) ToTransformerProcessorArrayOutputWithContext(ctx context.Context) TransformerProcessorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerProcessorArrayOutput)
}

// Individual processor configuration
type TransformerProcessorOutput struct{ *pulumi.OutputState }

func (TransformerProcessorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerProcessor)(nil)).Elem()
}

func (o TransformerProcessorOutput) ToTransformerProcessorOutput() TransformerProcessorOutput {
	return o
}

func (o TransformerProcessorOutput) ToTransformerProcessorOutputWithContext(ctx context.Context) TransformerProcessorOutput {
	return o
}

// Use this parameter to include the [addKeys](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-addKeys) processor in your transformer.
func (o TransformerProcessorOutput) AddKeys() TransformerProcessorAddKeysPropertiesPtrOutput {
	return o.ApplyT(func(v TransformerProcessor) *TransformerProcessorAddKeysProperties { return v.AddKeys }).(TransformerProcessorAddKeysPropertiesPtrOutput)
}

// Use this parameter to include the [copyValue](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-copyValue) processor in your transformer.
func (o TransformerProcessorOutput) CopyValue() TransformerProcessorCopyValuePropertiesPtrOutput {
	return o.ApplyT(func(v TransformerProcessor) *TransformerProcessorCopyValueProperties { return v.CopyValue }).(TransformerProcessorCopyValuePropertiesPtrOutput)
}

// Use this parameter to include the [CSV](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-CSV) processor in your transformer.
func (o TransformerProcessorOutput) Csv() TransformerProcessorCsvPropertiesPtrOutput {
	return o.ApplyT(func(v TransformerProcessor) *TransformerProcessorCsvProperties { return v.Csv }).(TransformerProcessorCsvPropertiesPtrOutput)
}

// Use this parameter to include the [datetimeConverter](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-datetimeConverter) processor in your transformer.
func (o TransformerProcessorOutput) DateTimeConverter() TransformerProcessorDateTimeConverterPropertiesPtrOutput {
	return o.ApplyT(func(v TransformerProcessor) *TransformerProcessorDateTimeConverterProperties {
		return v.DateTimeConverter
	}).(TransformerProcessorDateTimeConverterPropertiesPtrOutput)
}

// Use this parameter to include the [deleteKeys](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-deleteKeys) processor in your transformer.
func (o TransformerProcessorOutput) DeleteKeys() TransformerProcessorDeleteKeysPropertiesPtrOutput {
	return o.ApplyT(func(v TransformerProcessor) *TransformerProcessorDeleteKeysProperties { return v.DeleteKeys }).(TransformerProcessorDeleteKeysPropertiesPtrOutput)
}

// Use this parameter to include the [grok](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-grok) processor in your transformer.
func (o TransformerProcessorOutput) Grok() TransformerProcessorGrokPropertiesPtrOutput {
	return o.ApplyT(func(v TransformerProcessor) *TransformerProcessorGrokProperties { return v.Grok }).(TransformerProcessorGrokPropertiesPtrOutput)
}

// Use this parameter to include the [listToMap](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-listToMap) processor in your transformer.
func (o TransformerProcessorOutput) ListToMap() TransformerProcessorListToMapPropertiesPtrOutput {
	return o.ApplyT(func(v TransformerProcessor) *TransformerProcessorListToMapProperties { return v.ListToMap }).(TransformerProcessorListToMapPropertiesPtrOutput)
}

// Use this parameter to include the [lowerCaseString](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-lowerCaseString) processor in your transformer.
func (o TransformerProcessorOutput) LowerCaseString() TransformerProcessorLowerCaseStringPropertiesPtrOutput {
	return o.ApplyT(func(v TransformerProcessor) *TransformerProcessorLowerCaseStringProperties { return v.LowerCaseString }).(TransformerProcessorLowerCaseStringPropertiesPtrOutput)
}

// Use this parameter to include the [moveKeys](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-moveKeys) processor in your transformer.
func (o TransformerProcessorOutput) MoveKeys() TransformerProcessorMoveKeysPropertiesPtrOutput {
	return o.ApplyT(func(v TransformerProcessor) *TransformerProcessorMoveKeysProperties { return v.MoveKeys }).(TransformerProcessorMoveKeysPropertiesPtrOutput)
}

// Use this parameter to include the [parseCloudfront](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-parseCloudfront) processor in your transformer.
//
// If you use this processor, it must be the first processor in your transformer.
func (o TransformerProcessorOutput) ParseCloudfront() TransformerParseCloudfrontPtrOutput {
	return o.ApplyT(func(v TransformerProcessor) *TransformerParseCloudfront { return v.ParseCloudfront }).(TransformerParseCloudfrontPtrOutput)
}

// Use this parameter to include the [parseJSON](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-parseJSON) processor in your transformer.
func (o TransformerProcessorOutput) ParseJson() TransformerProcessorParseJsonPropertiesPtrOutput {
	return o.ApplyT(func(v TransformerProcessor) *TransformerProcessorParseJsonProperties { return v.ParseJson }).(TransformerProcessorParseJsonPropertiesPtrOutput)
}

// Use this parameter to include the [parseKeyValue](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-parseKeyValue) processor in your transformer.
func (o TransformerProcessorOutput) ParseKeyValue() TransformerProcessorParseKeyValuePropertiesPtrOutput {
	return o.ApplyT(func(v TransformerProcessor) *TransformerProcessorParseKeyValueProperties { return v.ParseKeyValue }).(TransformerProcessorParseKeyValuePropertiesPtrOutput)
}

// Use this parameter to include the [parsePostGres](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-parsePostGres) processor in your transformer.
//
// If you use this processor, it must be the first processor in your transformer.
func (o TransformerProcessorOutput) ParsePostgres() TransformerParsePostgresPtrOutput {
	return o.ApplyT(func(v TransformerProcessor) *TransformerParsePostgres { return v.ParsePostgres }).(TransformerParsePostgresPtrOutput)
}

// Use this parameter to include the [parseRoute53](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-parseRoute53) processor in your transformer.
//
// If you use this processor, it must be the first processor in your transformer.
func (o TransformerProcessorOutput) ParseRoute53() TransformerParseRoute53PtrOutput {
	return o.ApplyT(func(v TransformerProcessor) *TransformerParseRoute53 { return v.ParseRoute53 }).(TransformerParseRoute53PtrOutput)
}

// Use this parameter to include the [parseVPC](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-parseVPC) processor in your transformer.
//
// If you use this processor, it must be the first processor in your transformer.
func (o TransformerProcessorOutput) ParseVpc() TransformerParseVpcPtrOutput {
	return o.ApplyT(func(v TransformerProcessor) *TransformerParseVpc { return v.ParseVpc }).(TransformerParseVpcPtrOutput)
}

// Use this parameter to include the [parseWAF](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-parseWAF) processor in your transformer.
//
// If you use this processor, it must be the first processor in your transformer.
func (o TransformerProcessorOutput) ParseWaf() TransformerParseWafPtrOutput {
	return o.ApplyT(func(v TransformerProcessor) *TransformerParseWaf { return v.ParseWaf }).(TransformerParseWafPtrOutput)
}

// Use this parameter to include the [renameKeys](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-renameKeys) processor in your transformer.
func (o TransformerProcessorOutput) RenameKeys() TransformerProcessorRenameKeysPropertiesPtrOutput {
	return o.ApplyT(func(v TransformerProcessor) *TransformerProcessorRenameKeysProperties { return v.RenameKeys }).(TransformerProcessorRenameKeysPropertiesPtrOutput)
}

// Use this parameter to include the [splitString](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-splitString) processor in your transformer.
func (o TransformerProcessorOutput) SplitString() TransformerProcessorSplitStringPropertiesPtrOutput {
	return o.ApplyT(func(v TransformerProcessor) *TransformerProcessorSplitStringProperties { return v.SplitString }).(TransformerProcessorSplitStringPropertiesPtrOutput)
}

// Use this parameter to include the [substituteString](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-substituteString) processor in your transformer.
func (o TransformerProcessorOutput) SubstituteString() TransformerProcessorSubstituteStringPropertiesPtrOutput {
	return o.ApplyT(func(v TransformerProcessor) *TransformerProcessorSubstituteStringProperties {
		return v.SubstituteString
	}).(TransformerProcessorSubstituteStringPropertiesPtrOutput)
}

// Use this parameter to include the [trimString](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-trimString) processor in your transformer.
func (o TransformerProcessorOutput) TrimString() TransformerProcessorTrimStringPropertiesPtrOutput {
	return o.ApplyT(func(v TransformerProcessor) *TransformerProcessorTrimStringProperties { return v.TrimString }).(TransformerProcessorTrimStringPropertiesPtrOutput)
}

// Use this parameter to include the [typeConverter](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-typeConverter) processor in your transformer.
func (o TransformerProcessorOutput) TypeConverter() TransformerProcessorTypeConverterPropertiesPtrOutput {
	return o.ApplyT(func(v TransformerProcessor) *TransformerProcessorTypeConverterProperties { return v.TypeConverter }).(TransformerProcessorTypeConverterPropertiesPtrOutput)
}

// Use this parameter to include the [upperCaseString](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-upperCaseString) processor in your transformer.
func (o TransformerProcessorOutput) UpperCaseString() TransformerProcessorUpperCaseStringPropertiesPtrOutput {
	return o.ApplyT(func(v TransformerProcessor) *TransformerProcessorUpperCaseStringProperties { return v.UpperCaseString }).(TransformerProcessorUpperCaseStringPropertiesPtrOutput)
}

type TransformerProcessorArrayOutput struct{ *pulumi.OutputState }

func (TransformerProcessorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformerProcessor)(nil)).Elem()
}

func (o TransformerProcessorArrayOutput) ToTransformerProcessorArrayOutput() TransformerProcessorArrayOutput {
	return o
}

func (o TransformerProcessorArrayOutput) ToTransformerProcessorArrayOutputWithContext(ctx context.Context) TransformerProcessorArrayOutput {
	return o
}

func (o TransformerProcessorArrayOutput) Index(i pulumi.IntInput) TransformerProcessorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TransformerProcessor {
		return vs[0].([]TransformerProcessor)[vs[1].(int)]
	}).(TransformerProcessorOutput)
}

// Use this parameter to include the [addKeys](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-addKeys) processor in your transformer.
type TransformerProcessorAddKeysProperties struct {
	Entries []TransformerAddKeyEntry `pulumi:"entries"`
}

// TransformerProcessorAddKeysPropertiesInput is an input type that accepts TransformerProcessorAddKeysPropertiesArgs and TransformerProcessorAddKeysPropertiesOutput values.
// You can construct a concrete instance of `TransformerProcessorAddKeysPropertiesInput` via:
//
//	TransformerProcessorAddKeysPropertiesArgs{...}
type TransformerProcessorAddKeysPropertiesInput interface {
	pulumi.Input

	ToTransformerProcessorAddKeysPropertiesOutput() TransformerProcessorAddKeysPropertiesOutput
	ToTransformerProcessorAddKeysPropertiesOutputWithContext(context.Context) TransformerProcessorAddKeysPropertiesOutput
}

// Use this parameter to include the [addKeys](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-addKeys) processor in your transformer.
type TransformerProcessorAddKeysPropertiesArgs struct {
	Entries TransformerAddKeyEntryArrayInput `pulumi:"entries"`
}

func (TransformerProcessorAddKeysPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerProcessorAddKeysProperties)(nil)).Elem()
}

func (i TransformerProcessorAddKeysPropertiesArgs) ToTransformerProcessorAddKeysPropertiesOutput() TransformerProcessorAddKeysPropertiesOutput {
	return i.ToTransformerProcessorAddKeysPropertiesOutputWithContext(context.Background())
}

func (i TransformerProcessorAddKeysPropertiesArgs) ToTransformerProcessorAddKeysPropertiesOutputWithContext(ctx context.Context) TransformerProcessorAddKeysPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerProcessorAddKeysPropertiesOutput)
}

func (i TransformerProcessorAddKeysPropertiesArgs) ToTransformerProcessorAddKeysPropertiesPtrOutput() TransformerProcessorAddKeysPropertiesPtrOutput {
	return i.ToTransformerProcessorAddKeysPropertiesPtrOutputWithContext(context.Background())
}

func (i TransformerProcessorAddKeysPropertiesArgs) ToTransformerProcessorAddKeysPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorAddKeysPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerProcessorAddKeysPropertiesOutput).ToTransformerProcessorAddKeysPropertiesPtrOutputWithContext(ctx)
}

// TransformerProcessorAddKeysPropertiesPtrInput is an input type that accepts TransformerProcessorAddKeysPropertiesArgs, TransformerProcessorAddKeysPropertiesPtr and TransformerProcessorAddKeysPropertiesPtrOutput values.
// You can construct a concrete instance of `TransformerProcessorAddKeysPropertiesPtrInput` via:
//
//	        TransformerProcessorAddKeysPropertiesArgs{...}
//
//	or:
//
//	        nil
type TransformerProcessorAddKeysPropertiesPtrInput interface {
	pulumi.Input

	ToTransformerProcessorAddKeysPropertiesPtrOutput() TransformerProcessorAddKeysPropertiesPtrOutput
	ToTransformerProcessorAddKeysPropertiesPtrOutputWithContext(context.Context) TransformerProcessorAddKeysPropertiesPtrOutput
}

type transformerProcessorAddKeysPropertiesPtrType TransformerProcessorAddKeysPropertiesArgs

func TransformerProcessorAddKeysPropertiesPtr(v *TransformerProcessorAddKeysPropertiesArgs) TransformerProcessorAddKeysPropertiesPtrInput {
	return (*transformerProcessorAddKeysPropertiesPtrType)(v)
}

func (*transformerProcessorAddKeysPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerProcessorAddKeysProperties)(nil)).Elem()
}

func (i *transformerProcessorAddKeysPropertiesPtrType) ToTransformerProcessorAddKeysPropertiesPtrOutput() TransformerProcessorAddKeysPropertiesPtrOutput {
	return i.ToTransformerProcessorAddKeysPropertiesPtrOutputWithContext(context.Background())
}

func (i *transformerProcessorAddKeysPropertiesPtrType) ToTransformerProcessorAddKeysPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorAddKeysPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerProcessorAddKeysPropertiesPtrOutput)
}

// Use this parameter to include the [addKeys](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-addKeys) processor in your transformer.
type TransformerProcessorAddKeysPropertiesOutput struct{ *pulumi.OutputState }

func (TransformerProcessorAddKeysPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerProcessorAddKeysProperties)(nil)).Elem()
}

func (o TransformerProcessorAddKeysPropertiesOutput) ToTransformerProcessorAddKeysPropertiesOutput() TransformerProcessorAddKeysPropertiesOutput {
	return o
}

func (o TransformerProcessorAddKeysPropertiesOutput) ToTransformerProcessorAddKeysPropertiesOutputWithContext(ctx context.Context) TransformerProcessorAddKeysPropertiesOutput {
	return o
}

func (o TransformerProcessorAddKeysPropertiesOutput) ToTransformerProcessorAddKeysPropertiesPtrOutput() TransformerProcessorAddKeysPropertiesPtrOutput {
	return o.ToTransformerProcessorAddKeysPropertiesPtrOutputWithContext(context.Background())
}

func (o TransformerProcessorAddKeysPropertiesOutput) ToTransformerProcessorAddKeysPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorAddKeysPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformerProcessorAddKeysProperties) *TransformerProcessorAddKeysProperties {
		return &v
	}).(TransformerProcessorAddKeysPropertiesPtrOutput)
}

func (o TransformerProcessorAddKeysPropertiesOutput) Entries() TransformerAddKeyEntryArrayOutput {
	return o.ApplyT(func(v TransformerProcessorAddKeysProperties) []TransformerAddKeyEntry { return v.Entries }).(TransformerAddKeyEntryArrayOutput)
}

type TransformerProcessorAddKeysPropertiesPtrOutput struct{ *pulumi.OutputState }

func (TransformerProcessorAddKeysPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerProcessorAddKeysProperties)(nil)).Elem()
}

func (o TransformerProcessorAddKeysPropertiesPtrOutput) ToTransformerProcessorAddKeysPropertiesPtrOutput() TransformerProcessorAddKeysPropertiesPtrOutput {
	return o
}

func (o TransformerProcessorAddKeysPropertiesPtrOutput) ToTransformerProcessorAddKeysPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorAddKeysPropertiesPtrOutput {
	return o
}

func (o TransformerProcessorAddKeysPropertiesPtrOutput) Elem() TransformerProcessorAddKeysPropertiesOutput {
	return o.ApplyT(func(v *TransformerProcessorAddKeysProperties) TransformerProcessorAddKeysProperties {
		if v != nil {
			return *v
		}
		var ret TransformerProcessorAddKeysProperties
		return ret
	}).(TransformerProcessorAddKeysPropertiesOutput)
}

func (o TransformerProcessorAddKeysPropertiesPtrOutput) Entries() TransformerAddKeyEntryArrayOutput {
	return o.ApplyT(func(v *TransformerProcessorAddKeysProperties) []TransformerAddKeyEntry {
		if v == nil {
			return nil
		}
		return v.Entries
	}).(TransformerAddKeyEntryArrayOutput)
}

// Use this parameter to include the [copyValue](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-copyValue) processor in your transformer.
type TransformerProcessorCopyValueProperties struct {
	Entries []TransformerCopyValueEntry `pulumi:"entries"`
}

// TransformerProcessorCopyValuePropertiesInput is an input type that accepts TransformerProcessorCopyValuePropertiesArgs and TransformerProcessorCopyValuePropertiesOutput values.
// You can construct a concrete instance of `TransformerProcessorCopyValuePropertiesInput` via:
//
//	TransformerProcessorCopyValuePropertiesArgs{...}
type TransformerProcessorCopyValuePropertiesInput interface {
	pulumi.Input

	ToTransformerProcessorCopyValuePropertiesOutput() TransformerProcessorCopyValuePropertiesOutput
	ToTransformerProcessorCopyValuePropertiesOutputWithContext(context.Context) TransformerProcessorCopyValuePropertiesOutput
}

// Use this parameter to include the [copyValue](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-copyValue) processor in your transformer.
type TransformerProcessorCopyValuePropertiesArgs struct {
	Entries TransformerCopyValueEntryArrayInput `pulumi:"entries"`
}

func (TransformerProcessorCopyValuePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerProcessorCopyValueProperties)(nil)).Elem()
}

func (i TransformerProcessorCopyValuePropertiesArgs) ToTransformerProcessorCopyValuePropertiesOutput() TransformerProcessorCopyValuePropertiesOutput {
	return i.ToTransformerProcessorCopyValuePropertiesOutputWithContext(context.Background())
}

func (i TransformerProcessorCopyValuePropertiesArgs) ToTransformerProcessorCopyValuePropertiesOutputWithContext(ctx context.Context) TransformerProcessorCopyValuePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerProcessorCopyValuePropertiesOutput)
}

func (i TransformerProcessorCopyValuePropertiesArgs) ToTransformerProcessorCopyValuePropertiesPtrOutput() TransformerProcessorCopyValuePropertiesPtrOutput {
	return i.ToTransformerProcessorCopyValuePropertiesPtrOutputWithContext(context.Background())
}

func (i TransformerProcessorCopyValuePropertiesArgs) ToTransformerProcessorCopyValuePropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorCopyValuePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerProcessorCopyValuePropertiesOutput).ToTransformerProcessorCopyValuePropertiesPtrOutputWithContext(ctx)
}

// TransformerProcessorCopyValuePropertiesPtrInput is an input type that accepts TransformerProcessorCopyValuePropertiesArgs, TransformerProcessorCopyValuePropertiesPtr and TransformerProcessorCopyValuePropertiesPtrOutput values.
// You can construct a concrete instance of `TransformerProcessorCopyValuePropertiesPtrInput` via:
//
//	        TransformerProcessorCopyValuePropertiesArgs{...}
//
//	or:
//
//	        nil
type TransformerProcessorCopyValuePropertiesPtrInput interface {
	pulumi.Input

	ToTransformerProcessorCopyValuePropertiesPtrOutput() TransformerProcessorCopyValuePropertiesPtrOutput
	ToTransformerProcessorCopyValuePropertiesPtrOutputWithContext(context.Context) TransformerProcessorCopyValuePropertiesPtrOutput
}

type transformerProcessorCopyValuePropertiesPtrType TransformerProcessorCopyValuePropertiesArgs

func TransformerProcessorCopyValuePropertiesPtr(v *TransformerProcessorCopyValuePropertiesArgs) TransformerProcessorCopyValuePropertiesPtrInput {
	return (*transformerProcessorCopyValuePropertiesPtrType)(v)
}

func (*transformerProcessorCopyValuePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerProcessorCopyValueProperties)(nil)).Elem()
}

func (i *transformerProcessorCopyValuePropertiesPtrType) ToTransformerProcessorCopyValuePropertiesPtrOutput() TransformerProcessorCopyValuePropertiesPtrOutput {
	return i.ToTransformerProcessorCopyValuePropertiesPtrOutputWithContext(context.Background())
}

func (i *transformerProcessorCopyValuePropertiesPtrType) ToTransformerProcessorCopyValuePropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorCopyValuePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerProcessorCopyValuePropertiesPtrOutput)
}

// Use this parameter to include the [copyValue](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-copyValue) processor in your transformer.
type TransformerProcessorCopyValuePropertiesOutput struct{ *pulumi.OutputState }

func (TransformerProcessorCopyValuePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerProcessorCopyValueProperties)(nil)).Elem()
}

func (o TransformerProcessorCopyValuePropertiesOutput) ToTransformerProcessorCopyValuePropertiesOutput() TransformerProcessorCopyValuePropertiesOutput {
	return o
}

func (o TransformerProcessorCopyValuePropertiesOutput) ToTransformerProcessorCopyValuePropertiesOutputWithContext(ctx context.Context) TransformerProcessorCopyValuePropertiesOutput {
	return o
}

func (o TransformerProcessorCopyValuePropertiesOutput) ToTransformerProcessorCopyValuePropertiesPtrOutput() TransformerProcessorCopyValuePropertiesPtrOutput {
	return o.ToTransformerProcessorCopyValuePropertiesPtrOutputWithContext(context.Background())
}

func (o TransformerProcessorCopyValuePropertiesOutput) ToTransformerProcessorCopyValuePropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorCopyValuePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformerProcessorCopyValueProperties) *TransformerProcessorCopyValueProperties {
		return &v
	}).(TransformerProcessorCopyValuePropertiesPtrOutput)
}

func (o TransformerProcessorCopyValuePropertiesOutput) Entries() TransformerCopyValueEntryArrayOutput {
	return o.ApplyT(func(v TransformerProcessorCopyValueProperties) []TransformerCopyValueEntry { return v.Entries }).(TransformerCopyValueEntryArrayOutput)
}

type TransformerProcessorCopyValuePropertiesPtrOutput struct{ *pulumi.OutputState }

func (TransformerProcessorCopyValuePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerProcessorCopyValueProperties)(nil)).Elem()
}

func (o TransformerProcessorCopyValuePropertiesPtrOutput) ToTransformerProcessorCopyValuePropertiesPtrOutput() TransformerProcessorCopyValuePropertiesPtrOutput {
	return o
}

func (o TransformerProcessorCopyValuePropertiesPtrOutput) ToTransformerProcessorCopyValuePropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorCopyValuePropertiesPtrOutput {
	return o
}

func (o TransformerProcessorCopyValuePropertiesPtrOutput) Elem() TransformerProcessorCopyValuePropertiesOutput {
	return o.ApplyT(func(v *TransformerProcessorCopyValueProperties) TransformerProcessorCopyValueProperties {
		if v != nil {
			return *v
		}
		var ret TransformerProcessorCopyValueProperties
		return ret
	}).(TransformerProcessorCopyValuePropertiesOutput)
}

func (o TransformerProcessorCopyValuePropertiesPtrOutput) Entries() TransformerCopyValueEntryArrayOutput {
	return o.ApplyT(func(v *TransformerProcessorCopyValueProperties) []TransformerCopyValueEntry {
		if v == nil {
			return nil
		}
		return v.Entries
	}).(TransformerCopyValueEntryArrayOutput)
}

// Use this parameter to include the [CSV](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-CSV) processor in your transformer.
type TransformerProcessorCsvProperties struct {
	Columns        []string `pulumi:"columns"`
	Delimiter      *string  `pulumi:"delimiter"`
	QuoteCharacter *string  `pulumi:"quoteCharacter"`
	Source         *string  `pulumi:"source"`
}

// TransformerProcessorCsvPropertiesInput is an input type that accepts TransformerProcessorCsvPropertiesArgs and TransformerProcessorCsvPropertiesOutput values.
// You can construct a concrete instance of `TransformerProcessorCsvPropertiesInput` via:
//
//	TransformerProcessorCsvPropertiesArgs{...}
type TransformerProcessorCsvPropertiesInput interface {
	pulumi.Input

	ToTransformerProcessorCsvPropertiesOutput() TransformerProcessorCsvPropertiesOutput
	ToTransformerProcessorCsvPropertiesOutputWithContext(context.Context) TransformerProcessorCsvPropertiesOutput
}

// Use this parameter to include the [CSV](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-CSV) processor in your transformer.
type TransformerProcessorCsvPropertiesArgs struct {
	Columns        pulumi.StringArrayInput `pulumi:"columns"`
	Delimiter      pulumi.StringPtrInput   `pulumi:"delimiter"`
	QuoteCharacter pulumi.StringPtrInput   `pulumi:"quoteCharacter"`
	Source         pulumi.StringPtrInput   `pulumi:"source"`
}

func (TransformerProcessorCsvPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerProcessorCsvProperties)(nil)).Elem()
}

func (i TransformerProcessorCsvPropertiesArgs) ToTransformerProcessorCsvPropertiesOutput() TransformerProcessorCsvPropertiesOutput {
	return i.ToTransformerProcessorCsvPropertiesOutputWithContext(context.Background())
}

func (i TransformerProcessorCsvPropertiesArgs) ToTransformerProcessorCsvPropertiesOutputWithContext(ctx context.Context) TransformerProcessorCsvPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerProcessorCsvPropertiesOutput)
}

func (i TransformerProcessorCsvPropertiesArgs) ToTransformerProcessorCsvPropertiesPtrOutput() TransformerProcessorCsvPropertiesPtrOutput {
	return i.ToTransformerProcessorCsvPropertiesPtrOutputWithContext(context.Background())
}

func (i TransformerProcessorCsvPropertiesArgs) ToTransformerProcessorCsvPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorCsvPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerProcessorCsvPropertiesOutput).ToTransformerProcessorCsvPropertiesPtrOutputWithContext(ctx)
}

// TransformerProcessorCsvPropertiesPtrInput is an input type that accepts TransformerProcessorCsvPropertiesArgs, TransformerProcessorCsvPropertiesPtr and TransformerProcessorCsvPropertiesPtrOutput values.
// You can construct a concrete instance of `TransformerProcessorCsvPropertiesPtrInput` via:
//
//	        TransformerProcessorCsvPropertiesArgs{...}
//
//	or:
//
//	        nil
type TransformerProcessorCsvPropertiesPtrInput interface {
	pulumi.Input

	ToTransformerProcessorCsvPropertiesPtrOutput() TransformerProcessorCsvPropertiesPtrOutput
	ToTransformerProcessorCsvPropertiesPtrOutputWithContext(context.Context) TransformerProcessorCsvPropertiesPtrOutput
}

type transformerProcessorCsvPropertiesPtrType TransformerProcessorCsvPropertiesArgs

func TransformerProcessorCsvPropertiesPtr(v *TransformerProcessorCsvPropertiesArgs) TransformerProcessorCsvPropertiesPtrInput {
	return (*transformerProcessorCsvPropertiesPtrType)(v)
}

func (*transformerProcessorCsvPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerProcessorCsvProperties)(nil)).Elem()
}

func (i *transformerProcessorCsvPropertiesPtrType) ToTransformerProcessorCsvPropertiesPtrOutput() TransformerProcessorCsvPropertiesPtrOutput {
	return i.ToTransformerProcessorCsvPropertiesPtrOutputWithContext(context.Background())
}

func (i *transformerProcessorCsvPropertiesPtrType) ToTransformerProcessorCsvPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorCsvPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerProcessorCsvPropertiesPtrOutput)
}

// Use this parameter to include the [CSV](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-CSV) processor in your transformer.
type TransformerProcessorCsvPropertiesOutput struct{ *pulumi.OutputState }

func (TransformerProcessorCsvPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerProcessorCsvProperties)(nil)).Elem()
}

func (o TransformerProcessorCsvPropertiesOutput) ToTransformerProcessorCsvPropertiesOutput() TransformerProcessorCsvPropertiesOutput {
	return o
}

func (o TransformerProcessorCsvPropertiesOutput) ToTransformerProcessorCsvPropertiesOutputWithContext(ctx context.Context) TransformerProcessorCsvPropertiesOutput {
	return o
}

func (o TransformerProcessorCsvPropertiesOutput) ToTransformerProcessorCsvPropertiesPtrOutput() TransformerProcessorCsvPropertiesPtrOutput {
	return o.ToTransformerProcessorCsvPropertiesPtrOutputWithContext(context.Background())
}

func (o TransformerProcessorCsvPropertiesOutput) ToTransformerProcessorCsvPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorCsvPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformerProcessorCsvProperties) *TransformerProcessorCsvProperties {
		return &v
	}).(TransformerProcessorCsvPropertiesPtrOutput)
}

func (o TransformerProcessorCsvPropertiesOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TransformerProcessorCsvProperties) []string { return v.Columns }).(pulumi.StringArrayOutput)
}

func (o TransformerProcessorCsvPropertiesOutput) Delimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerProcessorCsvProperties) *string { return v.Delimiter }).(pulumi.StringPtrOutput)
}

func (o TransformerProcessorCsvPropertiesOutput) QuoteCharacter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerProcessorCsvProperties) *string { return v.QuoteCharacter }).(pulumi.StringPtrOutput)
}

func (o TransformerProcessorCsvPropertiesOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerProcessorCsvProperties) *string { return v.Source }).(pulumi.StringPtrOutput)
}

type TransformerProcessorCsvPropertiesPtrOutput struct{ *pulumi.OutputState }

func (TransformerProcessorCsvPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerProcessorCsvProperties)(nil)).Elem()
}

func (o TransformerProcessorCsvPropertiesPtrOutput) ToTransformerProcessorCsvPropertiesPtrOutput() TransformerProcessorCsvPropertiesPtrOutput {
	return o
}

func (o TransformerProcessorCsvPropertiesPtrOutput) ToTransformerProcessorCsvPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorCsvPropertiesPtrOutput {
	return o
}

func (o TransformerProcessorCsvPropertiesPtrOutput) Elem() TransformerProcessorCsvPropertiesOutput {
	return o.ApplyT(func(v *TransformerProcessorCsvProperties) TransformerProcessorCsvProperties {
		if v != nil {
			return *v
		}
		var ret TransformerProcessorCsvProperties
		return ret
	}).(TransformerProcessorCsvPropertiesOutput)
}

func (o TransformerProcessorCsvPropertiesPtrOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TransformerProcessorCsvProperties) []string {
		if v == nil {
			return nil
		}
		return v.Columns
	}).(pulumi.StringArrayOutput)
}

func (o TransformerProcessorCsvPropertiesPtrOutput) Delimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerProcessorCsvProperties) *string {
		if v == nil {
			return nil
		}
		return v.Delimiter
	}).(pulumi.StringPtrOutput)
}

func (o TransformerProcessorCsvPropertiesPtrOutput) QuoteCharacter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerProcessorCsvProperties) *string {
		if v == nil {
			return nil
		}
		return v.QuoteCharacter
	}).(pulumi.StringPtrOutput)
}

func (o TransformerProcessorCsvPropertiesPtrOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerProcessorCsvProperties) *string {
		if v == nil {
			return nil
		}
		return v.Source
	}).(pulumi.StringPtrOutput)
}

// Use this parameter to include the [datetimeConverter](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-datetimeConverter) processor in your transformer.
type TransformerProcessorDateTimeConverterProperties struct {
	Locale         *string  `pulumi:"locale"`
	MatchPatterns  []string `pulumi:"matchPatterns"`
	Source         string   `pulumi:"source"`
	SourceTimezone *string  `pulumi:"sourceTimezone"`
	Target         string   `pulumi:"target"`
	TargetFormat   *string  `pulumi:"targetFormat"`
	TargetTimezone *string  `pulumi:"targetTimezone"`
}

// TransformerProcessorDateTimeConverterPropertiesInput is an input type that accepts TransformerProcessorDateTimeConverterPropertiesArgs and TransformerProcessorDateTimeConverterPropertiesOutput values.
// You can construct a concrete instance of `TransformerProcessorDateTimeConverterPropertiesInput` via:
//
//	TransformerProcessorDateTimeConverterPropertiesArgs{...}
type TransformerProcessorDateTimeConverterPropertiesInput interface {
	pulumi.Input

	ToTransformerProcessorDateTimeConverterPropertiesOutput() TransformerProcessorDateTimeConverterPropertiesOutput
	ToTransformerProcessorDateTimeConverterPropertiesOutputWithContext(context.Context) TransformerProcessorDateTimeConverterPropertiesOutput
}

// Use this parameter to include the [datetimeConverter](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-datetimeConverter) processor in your transformer.
type TransformerProcessorDateTimeConverterPropertiesArgs struct {
	Locale         pulumi.StringPtrInput   `pulumi:"locale"`
	MatchPatterns  pulumi.StringArrayInput `pulumi:"matchPatterns"`
	Source         pulumi.StringInput      `pulumi:"source"`
	SourceTimezone pulumi.StringPtrInput   `pulumi:"sourceTimezone"`
	Target         pulumi.StringInput      `pulumi:"target"`
	TargetFormat   pulumi.StringPtrInput   `pulumi:"targetFormat"`
	TargetTimezone pulumi.StringPtrInput   `pulumi:"targetTimezone"`
}

func (TransformerProcessorDateTimeConverterPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerProcessorDateTimeConverterProperties)(nil)).Elem()
}

func (i TransformerProcessorDateTimeConverterPropertiesArgs) ToTransformerProcessorDateTimeConverterPropertiesOutput() TransformerProcessorDateTimeConverterPropertiesOutput {
	return i.ToTransformerProcessorDateTimeConverterPropertiesOutputWithContext(context.Background())
}

func (i TransformerProcessorDateTimeConverterPropertiesArgs) ToTransformerProcessorDateTimeConverterPropertiesOutputWithContext(ctx context.Context) TransformerProcessorDateTimeConverterPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerProcessorDateTimeConverterPropertiesOutput)
}

func (i TransformerProcessorDateTimeConverterPropertiesArgs) ToTransformerProcessorDateTimeConverterPropertiesPtrOutput() TransformerProcessorDateTimeConverterPropertiesPtrOutput {
	return i.ToTransformerProcessorDateTimeConverterPropertiesPtrOutputWithContext(context.Background())
}

func (i TransformerProcessorDateTimeConverterPropertiesArgs) ToTransformerProcessorDateTimeConverterPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorDateTimeConverterPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerProcessorDateTimeConverterPropertiesOutput).ToTransformerProcessorDateTimeConverterPropertiesPtrOutputWithContext(ctx)
}

// TransformerProcessorDateTimeConverterPropertiesPtrInput is an input type that accepts TransformerProcessorDateTimeConverterPropertiesArgs, TransformerProcessorDateTimeConverterPropertiesPtr and TransformerProcessorDateTimeConverterPropertiesPtrOutput values.
// You can construct a concrete instance of `TransformerProcessorDateTimeConverterPropertiesPtrInput` via:
//
//	        TransformerProcessorDateTimeConverterPropertiesArgs{...}
//
//	or:
//
//	        nil
type TransformerProcessorDateTimeConverterPropertiesPtrInput interface {
	pulumi.Input

	ToTransformerProcessorDateTimeConverterPropertiesPtrOutput() TransformerProcessorDateTimeConverterPropertiesPtrOutput
	ToTransformerProcessorDateTimeConverterPropertiesPtrOutputWithContext(context.Context) TransformerProcessorDateTimeConverterPropertiesPtrOutput
}

type transformerProcessorDateTimeConverterPropertiesPtrType TransformerProcessorDateTimeConverterPropertiesArgs

func TransformerProcessorDateTimeConverterPropertiesPtr(v *TransformerProcessorDateTimeConverterPropertiesArgs) TransformerProcessorDateTimeConverterPropertiesPtrInput {
	return (*transformerProcessorDateTimeConverterPropertiesPtrType)(v)
}

func (*transformerProcessorDateTimeConverterPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerProcessorDateTimeConverterProperties)(nil)).Elem()
}

func (i *transformerProcessorDateTimeConverterPropertiesPtrType) ToTransformerProcessorDateTimeConverterPropertiesPtrOutput() TransformerProcessorDateTimeConverterPropertiesPtrOutput {
	return i.ToTransformerProcessorDateTimeConverterPropertiesPtrOutputWithContext(context.Background())
}

func (i *transformerProcessorDateTimeConverterPropertiesPtrType) ToTransformerProcessorDateTimeConverterPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorDateTimeConverterPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerProcessorDateTimeConverterPropertiesPtrOutput)
}

// Use this parameter to include the [datetimeConverter](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-datetimeConverter) processor in your transformer.
type TransformerProcessorDateTimeConverterPropertiesOutput struct{ *pulumi.OutputState }

func (TransformerProcessorDateTimeConverterPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerProcessorDateTimeConverterProperties)(nil)).Elem()
}

func (o TransformerProcessorDateTimeConverterPropertiesOutput) ToTransformerProcessorDateTimeConverterPropertiesOutput() TransformerProcessorDateTimeConverterPropertiesOutput {
	return o
}

func (o TransformerProcessorDateTimeConverterPropertiesOutput) ToTransformerProcessorDateTimeConverterPropertiesOutputWithContext(ctx context.Context) TransformerProcessorDateTimeConverterPropertiesOutput {
	return o
}

func (o TransformerProcessorDateTimeConverterPropertiesOutput) ToTransformerProcessorDateTimeConverterPropertiesPtrOutput() TransformerProcessorDateTimeConverterPropertiesPtrOutput {
	return o.ToTransformerProcessorDateTimeConverterPropertiesPtrOutputWithContext(context.Background())
}

func (o TransformerProcessorDateTimeConverterPropertiesOutput) ToTransformerProcessorDateTimeConverterPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorDateTimeConverterPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformerProcessorDateTimeConverterProperties) *TransformerProcessorDateTimeConverterProperties {
		return &v
	}).(TransformerProcessorDateTimeConverterPropertiesPtrOutput)
}

func (o TransformerProcessorDateTimeConverterPropertiesOutput) Locale() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerProcessorDateTimeConverterProperties) *string { return v.Locale }).(pulumi.StringPtrOutput)
}

func (o TransformerProcessorDateTimeConverterPropertiesOutput) MatchPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TransformerProcessorDateTimeConverterProperties) []string { return v.MatchPatterns }).(pulumi.StringArrayOutput)
}

func (o TransformerProcessorDateTimeConverterPropertiesOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v TransformerProcessorDateTimeConverterProperties) string { return v.Source }).(pulumi.StringOutput)
}

func (o TransformerProcessorDateTimeConverterPropertiesOutput) SourceTimezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerProcessorDateTimeConverterProperties) *string { return v.SourceTimezone }).(pulumi.StringPtrOutput)
}

func (o TransformerProcessorDateTimeConverterPropertiesOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v TransformerProcessorDateTimeConverterProperties) string { return v.Target }).(pulumi.StringOutput)
}

func (o TransformerProcessorDateTimeConverterPropertiesOutput) TargetFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerProcessorDateTimeConverterProperties) *string { return v.TargetFormat }).(pulumi.StringPtrOutput)
}

func (o TransformerProcessorDateTimeConverterPropertiesOutput) TargetTimezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerProcessorDateTimeConverterProperties) *string { return v.TargetTimezone }).(pulumi.StringPtrOutput)
}

type TransformerProcessorDateTimeConverterPropertiesPtrOutput struct{ *pulumi.OutputState }

func (TransformerProcessorDateTimeConverterPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerProcessorDateTimeConverterProperties)(nil)).Elem()
}

func (o TransformerProcessorDateTimeConverterPropertiesPtrOutput) ToTransformerProcessorDateTimeConverterPropertiesPtrOutput() TransformerProcessorDateTimeConverterPropertiesPtrOutput {
	return o
}

func (o TransformerProcessorDateTimeConverterPropertiesPtrOutput) ToTransformerProcessorDateTimeConverterPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorDateTimeConverterPropertiesPtrOutput {
	return o
}

func (o TransformerProcessorDateTimeConverterPropertiesPtrOutput) Elem() TransformerProcessorDateTimeConverterPropertiesOutput {
	return o.ApplyT(func(v *TransformerProcessorDateTimeConverterProperties) TransformerProcessorDateTimeConverterProperties {
		if v != nil {
			return *v
		}
		var ret TransformerProcessorDateTimeConverterProperties
		return ret
	}).(TransformerProcessorDateTimeConverterPropertiesOutput)
}

func (o TransformerProcessorDateTimeConverterPropertiesPtrOutput) Locale() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerProcessorDateTimeConverterProperties) *string {
		if v == nil {
			return nil
		}
		return v.Locale
	}).(pulumi.StringPtrOutput)
}

func (o TransformerProcessorDateTimeConverterPropertiesPtrOutput) MatchPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TransformerProcessorDateTimeConverterProperties) []string {
		if v == nil {
			return nil
		}
		return v.MatchPatterns
	}).(pulumi.StringArrayOutput)
}

func (o TransformerProcessorDateTimeConverterPropertiesPtrOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerProcessorDateTimeConverterProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Source
	}).(pulumi.StringPtrOutput)
}

func (o TransformerProcessorDateTimeConverterPropertiesPtrOutput) SourceTimezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerProcessorDateTimeConverterProperties) *string {
		if v == nil {
			return nil
		}
		return v.SourceTimezone
	}).(pulumi.StringPtrOutput)
}

func (o TransformerProcessorDateTimeConverterPropertiesPtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerProcessorDateTimeConverterProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Target
	}).(pulumi.StringPtrOutput)
}

func (o TransformerProcessorDateTimeConverterPropertiesPtrOutput) TargetFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerProcessorDateTimeConverterProperties) *string {
		if v == nil {
			return nil
		}
		return v.TargetFormat
	}).(pulumi.StringPtrOutput)
}

func (o TransformerProcessorDateTimeConverterPropertiesPtrOutput) TargetTimezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerProcessorDateTimeConverterProperties) *string {
		if v == nil {
			return nil
		}
		return v.TargetTimezone
	}).(pulumi.StringPtrOutput)
}

// Use this parameter to include the [deleteKeys](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-deleteKeys) processor in your transformer.
type TransformerProcessorDeleteKeysProperties struct {
	WithKeys []string `pulumi:"withKeys"`
}

// TransformerProcessorDeleteKeysPropertiesInput is an input type that accepts TransformerProcessorDeleteKeysPropertiesArgs and TransformerProcessorDeleteKeysPropertiesOutput values.
// You can construct a concrete instance of `TransformerProcessorDeleteKeysPropertiesInput` via:
//
//	TransformerProcessorDeleteKeysPropertiesArgs{...}
type TransformerProcessorDeleteKeysPropertiesInput interface {
	pulumi.Input

	ToTransformerProcessorDeleteKeysPropertiesOutput() TransformerProcessorDeleteKeysPropertiesOutput
	ToTransformerProcessorDeleteKeysPropertiesOutputWithContext(context.Context) TransformerProcessorDeleteKeysPropertiesOutput
}

// Use this parameter to include the [deleteKeys](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-deleteKeys) processor in your transformer.
type TransformerProcessorDeleteKeysPropertiesArgs struct {
	WithKeys pulumi.StringArrayInput `pulumi:"withKeys"`
}

func (TransformerProcessorDeleteKeysPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerProcessorDeleteKeysProperties)(nil)).Elem()
}

func (i TransformerProcessorDeleteKeysPropertiesArgs) ToTransformerProcessorDeleteKeysPropertiesOutput() TransformerProcessorDeleteKeysPropertiesOutput {
	return i.ToTransformerProcessorDeleteKeysPropertiesOutputWithContext(context.Background())
}

func (i TransformerProcessorDeleteKeysPropertiesArgs) ToTransformerProcessorDeleteKeysPropertiesOutputWithContext(ctx context.Context) TransformerProcessorDeleteKeysPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerProcessorDeleteKeysPropertiesOutput)
}

func (i TransformerProcessorDeleteKeysPropertiesArgs) ToTransformerProcessorDeleteKeysPropertiesPtrOutput() TransformerProcessorDeleteKeysPropertiesPtrOutput {
	return i.ToTransformerProcessorDeleteKeysPropertiesPtrOutputWithContext(context.Background())
}

func (i TransformerProcessorDeleteKeysPropertiesArgs) ToTransformerProcessorDeleteKeysPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorDeleteKeysPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerProcessorDeleteKeysPropertiesOutput).ToTransformerProcessorDeleteKeysPropertiesPtrOutputWithContext(ctx)
}

// TransformerProcessorDeleteKeysPropertiesPtrInput is an input type that accepts TransformerProcessorDeleteKeysPropertiesArgs, TransformerProcessorDeleteKeysPropertiesPtr and TransformerProcessorDeleteKeysPropertiesPtrOutput values.
// You can construct a concrete instance of `TransformerProcessorDeleteKeysPropertiesPtrInput` via:
//
//	        TransformerProcessorDeleteKeysPropertiesArgs{...}
//
//	or:
//
//	        nil
type TransformerProcessorDeleteKeysPropertiesPtrInput interface {
	pulumi.Input

	ToTransformerProcessorDeleteKeysPropertiesPtrOutput() TransformerProcessorDeleteKeysPropertiesPtrOutput
	ToTransformerProcessorDeleteKeysPropertiesPtrOutputWithContext(context.Context) TransformerProcessorDeleteKeysPropertiesPtrOutput
}

type transformerProcessorDeleteKeysPropertiesPtrType TransformerProcessorDeleteKeysPropertiesArgs

func TransformerProcessorDeleteKeysPropertiesPtr(v *TransformerProcessorDeleteKeysPropertiesArgs) TransformerProcessorDeleteKeysPropertiesPtrInput {
	return (*transformerProcessorDeleteKeysPropertiesPtrType)(v)
}

func (*transformerProcessorDeleteKeysPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerProcessorDeleteKeysProperties)(nil)).Elem()
}

func (i *transformerProcessorDeleteKeysPropertiesPtrType) ToTransformerProcessorDeleteKeysPropertiesPtrOutput() TransformerProcessorDeleteKeysPropertiesPtrOutput {
	return i.ToTransformerProcessorDeleteKeysPropertiesPtrOutputWithContext(context.Background())
}

func (i *transformerProcessorDeleteKeysPropertiesPtrType) ToTransformerProcessorDeleteKeysPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorDeleteKeysPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerProcessorDeleteKeysPropertiesPtrOutput)
}

// Use this parameter to include the [deleteKeys](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-deleteKeys) processor in your transformer.
type TransformerProcessorDeleteKeysPropertiesOutput struct{ *pulumi.OutputState }

func (TransformerProcessorDeleteKeysPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerProcessorDeleteKeysProperties)(nil)).Elem()
}

func (o TransformerProcessorDeleteKeysPropertiesOutput) ToTransformerProcessorDeleteKeysPropertiesOutput() TransformerProcessorDeleteKeysPropertiesOutput {
	return o
}

func (o TransformerProcessorDeleteKeysPropertiesOutput) ToTransformerProcessorDeleteKeysPropertiesOutputWithContext(ctx context.Context) TransformerProcessorDeleteKeysPropertiesOutput {
	return o
}

func (o TransformerProcessorDeleteKeysPropertiesOutput) ToTransformerProcessorDeleteKeysPropertiesPtrOutput() TransformerProcessorDeleteKeysPropertiesPtrOutput {
	return o.ToTransformerProcessorDeleteKeysPropertiesPtrOutputWithContext(context.Background())
}

func (o TransformerProcessorDeleteKeysPropertiesOutput) ToTransformerProcessorDeleteKeysPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorDeleteKeysPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformerProcessorDeleteKeysProperties) *TransformerProcessorDeleteKeysProperties {
		return &v
	}).(TransformerProcessorDeleteKeysPropertiesPtrOutput)
}

func (o TransformerProcessorDeleteKeysPropertiesOutput) WithKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TransformerProcessorDeleteKeysProperties) []string { return v.WithKeys }).(pulumi.StringArrayOutput)
}

type TransformerProcessorDeleteKeysPropertiesPtrOutput struct{ *pulumi.OutputState }

func (TransformerProcessorDeleteKeysPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerProcessorDeleteKeysProperties)(nil)).Elem()
}

func (o TransformerProcessorDeleteKeysPropertiesPtrOutput) ToTransformerProcessorDeleteKeysPropertiesPtrOutput() TransformerProcessorDeleteKeysPropertiesPtrOutput {
	return o
}

func (o TransformerProcessorDeleteKeysPropertiesPtrOutput) ToTransformerProcessorDeleteKeysPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorDeleteKeysPropertiesPtrOutput {
	return o
}

func (o TransformerProcessorDeleteKeysPropertiesPtrOutput) Elem() TransformerProcessorDeleteKeysPropertiesOutput {
	return o.ApplyT(func(v *TransformerProcessorDeleteKeysProperties) TransformerProcessorDeleteKeysProperties {
		if v != nil {
			return *v
		}
		var ret TransformerProcessorDeleteKeysProperties
		return ret
	}).(TransformerProcessorDeleteKeysPropertiesOutput)
}

func (o TransformerProcessorDeleteKeysPropertiesPtrOutput) WithKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TransformerProcessorDeleteKeysProperties) []string {
		if v == nil {
			return nil
		}
		return v.WithKeys
	}).(pulumi.StringArrayOutput)
}

// Use this parameter to include the [grok](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-grok) processor in your transformer.
type TransformerProcessorGrokProperties struct {
	Match  string  `pulumi:"match"`
	Source *string `pulumi:"source"`
}

// TransformerProcessorGrokPropertiesInput is an input type that accepts TransformerProcessorGrokPropertiesArgs and TransformerProcessorGrokPropertiesOutput values.
// You can construct a concrete instance of `TransformerProcessorGrokPropertiesInput` via:
//
//	TransformerProcessorGrokPropertiesArgs{...}
type TransformerProcessorGrokPropertiesInput interface {
	pulumi.Input

	ToTransformerProcessorGrokPropertiesOutput() TransformerProcessorGrokPropertiesOutput
	ToTransformerProcessorGrokPropertiesOutputWithContext(context.Context) TransformerProcessorGrokPropertiesOutput
}

// Use this parameter to include the [grok](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-grok) processor in your transformer.
type TransformerProcessorGrokPropertiesArgs struct {
	Match  pulumi.StringInput    `pulumi:"match"`
	Source pulumi.StringPtrInput `pulumi:"source"`
}

func (TransformerProcessorGrokPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerProcessorGrokProperties)(nil)).Elem()
}

func (i TransformerProcessorGrokPropertiesArgs) ToTransformerProcessorGrokPropertiesOutput() TransformerProcessorGrokPropertiesOutput {
	return i.ToTransformerProcessorGrokPropertiesOutputWithContext(context.Background())
}

func (i TransformerProcessorGrokPropertiesArgs) ToTransformerProcessorGrokPropertiesOutputWithContext(ctx context.Context) TransformerProcessorGrokPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerProcessorGrokPropertiesOutput)
}

func (i TransformerProcessorGrokPropertiesArgs) ToTransformerProcessorGrokPropertiesPtrOutput() TransformerProcessorGrokPropertiesPtrOutput {
	return i.ToTransformerProcessorGrokPropertiesPtrOutputWithContext(context.Background())
}

func (i TransformerProcessorGrokPropertiesArgs) ToTransformerProcessorGrokPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorGrokPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerProcessorGrokPropertiesOutput).ToTransformerProcessorGrokPropertiesPtrOutputWithContext(ctx)
}

// TransformerProcessorGrokPropertiesPtrInput is an input type that accepts TransformerProcessorGrokPropertiesArgs, TransformerProcessorGrokPropertiesPtr and TransformerProcessorGrokPropertiesPtrOutput values.
// You can construct a concrete instance of `TransformerProcessorGrokPropertiesPtrInput` via:
//
//	        TransformerProcessorGrokPropertiesArgs{...}
//
//	or:
//
//	        nil
type TransformerProcessorGrokPropertiesPtrInput interface {
	pulumi.Input

	ToTransformerProcessorGrokPropertiesPtrOutput() TransformerProcessorGrokPropertiesPtrOutput
	ToTransformerProcessorGrokPropertiesPtrOutputWithContext(context.Context) TransformerProcessorGrokPropertiesPtrOutput
}

type transformerProcessorGrokPropertiesPtrType TransformerProcessorGrokPropertiesArgs

func TransformerProcessorGrokPropertiesPtr(v *TransformerProcessorGrokPropertiesArgs) TransformerProcessorGrokPropertiesPtrInput {
	return (*transformerProcessorGrokPropertiesPtrType)(v)
}

func (*transformerProcessorGrokPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerProcessorGrokProperties)(nil)).Elem()
}

func (i *transformerProcessorGrokPropertiesPtrType) ToTransformerProcessorGrokPropertiesPtrOutput() TransformerProcessorGrokPropertiesPtrOutput {
	return i.ToTransformerProcessorGrokPropertiesPtrOutputWithContext(context.Background())
}

func (i *transformerProcessorGrokPropertiesPtrType) ToTransformerProcessorGrokPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorGrokPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerProcessorGrokPropertiesPtrOutput)
}

// Use this parameter to include the [grok](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-grok) processor in your transformer.
type TransformerProcessorGrokPropertiesOutput struct{ *pulumi.OutputState }

func (TransformerProcessorGrokPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerProcessorGrokProperties)(nil)).Elem()
}

func (o TransformerProcessorGrokPropertiesOutput) ToTransformerProcessorGrokPropertiesOutput() TransformerProcessorGrokPropertiesOutput {
	return o
}

func (o TransformerProcessorGrokPropertiesOutput) ToTransformerProcessorGrokPropertiesOutputWithContext(ctx context.Context) TransformerProcessorGrokPropertiesOutput {
	return o
}

func (o TransformerProcessorGrokPropertiesOutput) ToTransformerProcessorGrokPropertiesPtrOutput() TransformerProcessorGrokPropertiesPtrOutput {
	return o.ToTransformerProcessorGrokPropertiesPtrOutputWithContext(context.Background())
}

func (o TransformerProcessorGrokPropertiesOutput) ToTransformerProcessorGrokPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorGrokPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformerProcessorGrokProperties) *TransformerProcessorGrokProperties {
		return &v
	}).(TransformerProcessorGrokPropertiesPtrOutput)
}

func (o TransformerProcessorGrokPropertiesOutput) Match() pulumi.StringOutput {
	return o.ApplyT(func(v TransformerProcessorGrokProperties) string { return v.Match }).(pulumi.StringOutput)
}

func (o TransformerProcessorGrokPropertiesOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerProcessorGrokProperties) *string { return v.Source }).(pulumi.StringPtrOutput)
}

type TransformerProcessorGrokPropertiesPtrOutput struct{ *pulumi.OutputState }

func (TransformerProcessorGrokPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerProcessorGrokProperties)(nil)).Elem()
}

func (o TransformerProcessorGrokPropertiesPtrOutput) ToTransformerProcessorGrokPropertiesPtrOutput() TransformerProcessorGrokPropertiesPtrOutput {
	return o
}

func (o TransformerProcessorGrokPropertiesPtrOutput) ToTransformerProcessorGrokPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorGrokPropertiesPtrOutput {
	return o
}

func (o TransformerProcessorGrokPropertiesPtrOutput) Elem() TransformerProcessorGrokPropertiesOutput {
	return o.ApplyT(func(v *TransformerProcessorGrokProperties) TransformerProcessorGrokProperties {
		if v != nil {
			return *v
		}
		var ret TransformerProcessorGrokProperties
		return ret
	}).(TransformerProcessorGrokPropertiesOutput)
}

func (o TransformerProcessorGrokPropertiesPtrOutput) Match() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerProcessorGrokProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Match
	}).(pulumi.StringPtrOutput)
}

func (o TransformerProcessorGrokPropertiesPtrOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerProcessorGrokProperties) *string {
		if v == nil {
			return nil
		}
		return v.Source
	}).(pulumi.StringPtrOutput)
}

// Use this parameter to include the [listToMap](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-listToMap) processor in your transformer.
type TransformerProcessorListToMapProperties struct {
	Flatten          *bool                                                    `pulumi:"flatten"`
	FlattenedElement *TransformerProcessorListToMapPropertiesFlattenedElement `pulumi:"flattenedElement"`
	Key              string                                                   `pulumi:"key"`
	Source           string                                                   `pulumi:"source"`
	Target           *string                                                  `pulumi:"target"`
	ValueKey         *string                                                  `pulumi:"valueKey"`
}

// TransformerProcessorListToMapPropertiesInput is an input type that accepts TransformerProcessorListToMapPropertiesArgs and TransformerProcessorListToMapPropertiesOutput values.
// You can construct a concrete instance of `TransformerProcessorListToMapPropertiesInput` via:
//
//	TransformerProcessorListToMapPropertiesArgs{...}
type TransformerProcessorListToMapPropertiesInput interface {
	pulumi.Input

	ToTransformerProcessorListToMapPropertiesOutput() TransformerProcessorListToMapPropertiesOutput
	ToTransformerProcessorListToMapPropertiesOutputWithContext(context.Context) TransformerProcessorListToMapPropertiesOutput
}

// Use this parameter to include the [listToMap](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-listToMap) processor in your transformer.
type TransformerProcessorListToMapPropertiesArgs struct {
	Flatten          pulumi.BoolPtrInput                                             `pulumi:"flatten"`
	FlattenedElement TransformerProcessorListToMapPropertiesFlattenedElementPtrInput `pulumi:"flattenedElement"`
	Key              pulumi.StringInput                                              `pulumi:"key"`
	Source           pulumi.StringInput                                              `pulumi:"source"`
	Target           pulumi.StringPtrInput                                           `pulumi:"target"`
	ValueKey         pulumi.StringPtrInput                                           `pulumi:"valueKey"`
}

func (TransformerProcessorListToMapPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerProcessorListToMapProperties)(nil)).Elem()
}

func (i TransformerProcessorListToMapPropertiesArgs) ToTransformerProcessorListToMapPropertiesOutput() TransformerProcessorListToMapPropertiesOutput {
	return i.ToTransformerProcessorListToMapPropertiesOutputWithContext(context.Background())
}

func (i TransformerProcessorListToMapPropertiesArgs) ToTransformerProcessorListToMapPropertiesOutputWithContext(ctx context.Context) TransformerProcessorListToMapPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerProcessorListToMapPropertiesOutput)
}

func (i TransformerProcessorListToMapPropertiesArgs) ToTransformerProcessorListToMapPropertiesPtrOutput() TransformerProcessorListToMapPropertiesPtrOutput {
	return i.ToTransformerProcessorListToMapPropertiesPtrOutputWithContext(context.Background())
}

func (i TransformerProcessorListToMapPropertiesArgs) ToTransformerProcessorListToMapPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorListToMapPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerProcessorListToMapPropertiesOutput).ToTransformerProcessorListToMapPropertiesPtrOutputWithContext(ctx)
}

// TransformerProcessorListToMapPropertiesPtrInput is an input type that accepts TransformerProcessorListToMapPropertiesArgs, TransformerProcessorListToMapPropertiesPtr and TransformerProcessorListToMapPropertiesPtrOutput values.
// You can construct a concrete instance of `TransformerProcessorListToMapPropertiesPtrInput` via:
//
//	        TransformerProcessorListToMapPropertiesArgs{...}
//
//	or:
//
//	        nil
type TransformerProcessorListToMapPropertiesPtrInput interface {
	pulumi.Input

	ToTransformerProcessorListToMapPropertiesPtrOutput() TransformerProcessorListToMapPropertiesPtrOutput
	ToTransformerProcessorListToMapPropertiesPtrOutputWithContext(context.Context) TransformerProcessorListToMapPropertiesPtrOutput
}

type transformerProcessorListToMapPropertiesPtrType TransformerProcessorListToMapPropertiesArgs

func TransformerProcessorListToMapPropertiesPtr(v *TransformerProcessorListToMapPropertiesArgs) TransformerProcessorListToMapPropertiesPtrInput {
	return (*transformerProcessorListToMapPropertiesPtrType)(v)
}

func (*transformerProcessorListToMapPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerProcessorListToMapProperties)(nil)).Elem()
}

func (i *transformerProcessorListToMapPropertiesPtrType) ToTransformerProcessorListToMapPropertiesPtrOutput() TransformerProcessorListToMapPropertiesPtrOutput {
	return i.ToTransformerProcessorListToMapPropertiesPtrOutputWithContext(context.Background())
}

func (i *transformerProcessorListToMapPropertiesPtrType) ToTransformerProcessorListToMapPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorListToMapPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerProcessorListToMapPropertiesPtrOutput)
}

// Use this parameter to include the [listToMap](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-listToMap) processor in your transformer.
type TransformerProcessorListToMapPropertiesOutput struct{ *pulumi.OutputState }

func (TransformerProcessorListToMapPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerProcessorListToMapProperties)(nil)).Elem()
}

func (o TransformerProcessorListToMapPropertiesOutput) ToTransformerProcessorListToMapPropertiesOutput() TransformerProcessorListToMapPropertiesOutput {
	return o
}

func (o TransformerProcessorListToMapPropertiesOutput) ToTransformerProcessorListToMapPropertiesOutputWithContext(ctx context.Context) TransformerProcessorListToMapPropertiesOutput {
	return o
}

func (o TransformerProcessorListToMapPropertiesOutput) ToTransformerProcessorListToMapPropertiesPtrOutput() TransformerProcessorListToMapPropertiesPtrOutput {
	return o.ToTransformerProcessorListToMapPropertiesPtrOutputWithContext(context.Background())
}

func (o TransformerProcessorListToMapPropertiesOutput) ToTransformerProcessorListToMapPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorListToMapPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformerProcessorListToMapProperties) *TransformerProcessorListToMapProperties {
		return &v
	}).(TransformerProcessorListToMapPropertiesPtrOutput)
}

func (o TransformerProcessorListToMapPropertiesOutput) Flatten() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TransformerProcessorListToMapProperties) *bool { return v.Flatten }).(pulumi.BoolPtrOutput)
}

func (o TransformerProcessorListToMapPropertiesOutput) FlattenedElement() TransformerProcessorListToMapPropertiesFlattenedElementPtrOutput {
	return o.ApplyT(func(v TransformerProcessorListToMapProperties) *TransformerProcessorListToMapPropertiesFlattenedElement {
		return v.FlattenedElement
	}).(TransformerProcessorListToMapPropertiesFlattenedElementPtrOutput)
}

func (o TransformerProcessorListToMapPropertiesOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v TransformerProcessorListToMapProperties) string { return v.Key }).(pulumi.StringOutput)
}

func (o TransformerProcessorListToMapPropertiesOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v TransformerProcessorListToMapProperties) string { return v.Source }).(pulumi.StringOutput)
}

func (o TransformerProcessorListToMapPropertiesOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerProcessorListToMapProperties) *string { return v.Target }).(pulumi.StringPtrOutput)
}

func (o TransformerProcessorListToMapPropertiesOutput) ValueKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerProcessorListToMapProperties) *string { return v.ValueKey }).(pulumi.StringPtrOutput)
}

type TransformerProcessorListToMapPropertiesPtrOutput struct{ *pulumi.OutputState }

func (TransformerProcessorListToMapPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerProcessorListToMapProperties)(nil)).Elem()
}

func (o TransformerProcessorListToMapPropertiesPtrOutput) ToTransformerProcessorListToMapPropertiesPtrOutput() TransformerProcessorListToMapPropertiesPtrOutput {
	return o
}

func (o TransformerProcessorListToMapPropertiesPtrOutput) ToTransformerProcessorListToMapPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorListToMapPropertiesPtrOutput {
	return o
}

func (o TransformerProcessorListToMapPropertiesPtrOutput) Elem() TransformerProcessorListToMapPropertiesOutput {
	return o.ApplyT(func(v *TransformerProcessorListToMapProperties) TransformerProcessorListToMapProperties {
		if v != nil {
			return *v
		}
		var ret TransformerProcessorListToMapProperties
		return ret
	}).(TransformerProcessorListToMapPropertiesOutput)
}

func (o TransformerProcessorListToMapPropertiesPtrOutput) Flatten() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TransformerProcessorListToMapProperties) *bool {
		if v == nil {
			return nil
		}
		return v.Flatten
	}).(pulumi.BoolPtrOutput)
}

func (o TransformerProcessorListToMapPropertiesPtrOutput) FlattenedElement() TransformerProcessorListToMapPropertiesFlattenedElementPtrOutput {
	return o.ApplyT(func(v *TransformerProcessorListToMapProperties) *TransformerProcessorListToMapPropertiesFlattenedElement {
		if v == nil {
			return nil
		}
		return v.FlattenedElement
	}).(TransformerProcessorListToMapPropertiesFlattenedElementPtrOutput)
}

func (o TransformerProcessorListToMapPropertiesPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerProcessorListToMapProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

func (o TransformerProcessorListToMapPropertiesPtrOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerProcessorListToMapProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Source
	}).(pulumi.StringPtrOutput)
}

func (o TransformerProcessorListToMapPropertiesPtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerProcessorListToMapProperties) *string {
		if v == nil {
			return nil
		}
		return v.Target
	}).(pulumi.StringPtrOutput)
}

func (o TransformerProcessorListToMapPropertiesPtrOutput) ValueKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerProcessorListToMapProperties) *string {
		if v == nil {
			return nil
		}
		return v.ValueKey
	}).(pulumi.StringPtrOutput)
}

// Use this parameter to include the [lowerCaseString](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-lowerCaseString) processor in your transformer.
type TransformerProcessorLowerCaseStringProperties struct {
	WithKeys []string `pulumi:"withKeys"`
}

// TransformerProcessorLowerCaseStringPropertiesInput is an input type that accepts TransformerProcessorLowerCaseStringPropertiesArgs and TransformerProcessorLowerCaseStringPropertiesOutput values.
// You can construct a concrete instance of `TransformerProcessorLowerCaseStringPropertiesInput` via:
//
//	TransformerProcessorLowerCaseStringPropertiesArgs{...}
type TransformerProcessorLowerCaseStringPropertiesInput interface {
	pulumi.Input

	ToTransformerProcessorLowerCaseStringPropertiesOutput() TransformerProcessorLowerCaseStringPropertiesOutput
	ToTransformerProcessorLowerCaseStringPropertiesOutputWithContext(context.Context) TransformerProcessorLowerCaseStringPropertiesOutput
}

// Use this parameter to include the [lowerCaseString](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-lowerCaseString) processor in your transformer.
type TransformerProcessorLowerCaseStringPropertiesArgs struct {
	WithKeys pulumi.StringArrayInput `pulumi:"withKeys"`
}

func (TransformerProcessorLowerCaseStringPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerProcessorLowerCaseStringProperties)(nil)).Elem()
}

func (i TransformerProcessorLowerCaseStringPropertiesArgs) ToTransformerProcessorLowerCaseStringPropertiesOutput() TransformerProcessorLowerCaseStringPropertiesOutput {
	return i.ToTransformerProcessorLowerCaseStringPropertiesOutputWithContext(context.Background())
}

func (i TransformerProcessorLowerCaseStringPropertiesArgs) ToTransformerProcessorLowerCaseStringPropertiesOutputWithContext(ctx context.Context) TransformerProcessorLowerCaseStringPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerProcessorLowerCaseStringPropertiesOutput)
}

func (i TransformerProcessorLowerCaseStringPropertiesArgs) ToTransformerProcessorLowerCaseStringPropertiesPtrOutput() TransformerProcessorLowerCaseStringPropertiesPtrOutput {
	return i.ToTransformerProcessorLowerCaseStringPropertiesPtrOutputWithContext(context.Background())
}

func (i TransformerProcessorLowerCaseStringPropertiesArgs) ToTransformerProcessorLowerCaseStringPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorLowerCaseStringPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerProcessorLowerCaseStringPropertiesOutput).ToTransformerProcessorLowerCaseStringPropertiesPtrOutputWithContext(ctx)
}

// TransformerProcessorLowerCaseStringPropertiesPtrInput is an input type that accepts TransformerProcessorLowerCaseStringPropertiesArgs, TransformerProcessorLowerCaseStringPropertiesPtr and TransformerProcessorLowerCaseStringPropertiesPtrOutput values.
// You can construct a concrete instance of `TransformerProcessorLowerCaseStringPropertiesPtrInput` via:
//
//	        TransformerProcessorLowerCaseStringPropertiesArgs{...}
//
//	or:
//
//	        nil
type TransformerProcessorLowerCaseStringPropertiesPtrInput interface {
	pulumi.Input

	ToTransformerProcessorLowerCaseStringPropertiesPtrOutput() TransformerProcessorLowerCaseStringPropertiesPtrOutput
	ToTransformerProcessorLowerCaseStringPropertiesPtrOutputWithContext(context.Context) TransformerProcessorLowerCaseStringPropertiesPtrOutput
}

type transformerProcessorLowerCaseStringPropertiesPtrType TransformerProcessorLowerCaseStringPropertiesArgs

func TransformerProcessorLowerCaseStringPropertiesPtr(v *TransformerProcessorLowerCaseStringPropertiesArgs) TransformerProcessorLowerCaseStringPropertiesPtrInput {
	return (*transformerProcessorLowerCaseStringPropertiesPtrType)(v)
}

func (*transformerProcessorLowerCaseStringPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerProcessorLowerCaseStringProperties)(nil)).Elem()
}

func (i *transformerProcessorLowerCaseStringPropertiesPtrType) ToTransformerProcessorLowerCaseStringPropertiesPtrOutput() TransformerProcessorLowerCaseStringPropertiesPtrOutput {
	return i.ToTransformerProcessorLowerCaseStringPropertiesPtrOutputWithContext(context.Background())
}

func (i *transformerProcessorLowerCaseStringPropertiesPtrType) ToTransformerProcessorLowerCaseStringPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorLowerCaseStringPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerProcessorLowerCaseStringPropertiesPtrOutput)
}

// Use this parameter to include the [lowerCaseString](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-lowerCaseString) processor in your transformer.
type TransformerProcessorLowerCaseStringPropertiesOutput struct{ *pulumi.OutputState }

func (TransformerProcessorLowerCaseStringPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerProcessorLowerCaseStringProperties)(nil)).Elem()
}

func (o TransformerProcessorLowerCaseStringPropertiesOutput) ToTransformerProcessorLowerCaseStringPropertiesOutput() TransformerProcessorLowerCaseStringPropertiesOutput {
	return o
}

func (o TransformerProcessorLowerCaseStringPropertiesOutput) ToTransformerProcessorLowerCaseStringPropertiesOutputWithContext(ctx context.Context) TransformerProcessorLowerCaseStringPropertiesOutput {
	return o
}

func (o TransformerProcessorLowerCaseStringPropertiesOutput) ToTransformerProcessorLowerCaseStringPropertiesPtrOutput() TransformerProcessorLowerCaseStringPropertiesPtrOutput {
	return o.ToTransformerProcessorLowerCaseStringPropertiesPtrOutputWithContext(context.Background())
}

func (o TransformerProcessorLowerCaseStringPropertiesOutput) ToTransformerProcessorLowerCaseStringPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorLowerCaseStringPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformerProcessorLowerCaseStringProperties) *TransformerProcessorLowerCaseStringProperties {
		return &v
	}).(TransformerProcessorLowerCaseStringPropertiesPtrOutput)
}

func (o TransformerProcessorLowerCaseStringPropertiesOutput) WithKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TransformerProcessorLowerCaseStringProperties) []string { return v.WithKeys }).(pulumi.StringArrayOutput)
}

type TransformerProcessorLowerCaseStringPropertiesPtrOutput struct{ *pulumi.OutputState }

func (TransformerProcessorLowerCaseStringPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerProcessorLowerCaseStringProperties)(nil)).Elem()
}

func (o TransformerProcessorLowerCaseStringPropertiesPtrOutput) ToTransformerProcessorLowerCaseStringPropertiesPtrOutput() TransformerProcessorLowerCaseStringPropertiesPtrOutput {
	return o
}

func (o TransformerProcessorLowerCaseStringPropertiesPtrOutput) ToTransformerProcessorLowerCaseStringPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorLowerCaseStringPropertiesPtrOutput {
	return o
}

func (o TransformerProcessorLowerCaseStringPropertiesPtrOutput) Elem() TransformerProcessorLowerCaseStringPropertiesOutput {
	return o.ApplyT(func(v *TransformerProcessorLowerCaseStringProperties) TransformerProcessorLowerCaseStringProperties {
		if v != nil {
			return *v
		}
		var ret TransformerProcessorLowerCaseStringProperties
		return ret
	}).(TransformerProcessorLowerCaseStringPropertiesOutput)
}

func (o TransformerProcessorLowerCaseStringPropertiesPtrOutput) WithKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TransformerProcessorLowerCaseStringProperties) []string {
		if v == nil {
			return nil
		}
		return v.WithKeys
	}).(pulumi.StringArrayOutput)
}

// Use this parameter to include the [moveKeys](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-moveKeys) processor in your transformer.
type TransformerProcessorMoveKeysProperties struct {
	Entries []TransformerMoveKeyEntry `pulumi:"entries"`
}

// TransformerProcessorMoveKeysPropertiesInput is an input type that accepts TransformerProcessorMoveKeysPropertiesArgs and TransformerProcessorMoveKeysPropertiesOutput values.
// You can construct a concrete instance of `TransformerProcessorMoveKeysPropertiesInput` via:
//
//	TransformerProcessorMoveKeysPropertiesArgs{...}
type TransformerProcessorMoveKeysPropertiesInput interface {
	pulumi.Input

	ToTransformerProcessorMoveKeysPropertiesOutput() TransformerProcessorMoveKeysPropertiesOutput
	ToTransformerProcessorMoveKeysPropertiesOutputWithContext(context.Context) TransformerProcessorMoveKeysPropertiesOutput
}

// Use this parameter to include the [moveKeys](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-moveKeys) processor in your transformer.
type TransformerProcessorMoveKeysPropertiesArgs struct {
	Entries TransformerMoveKeyEntryArrayInput `pulumi:"entries"`
}

func (TransformerProcessorMoveKeysPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerProcessorMoveKeysProperties)(nil)).Elem()
}

func (i TransformerProcessorMoveKeysPropertiesArgs) ToTransformerProcessorMoveKeysPropertiesOutput() TransformerProcessorMoveKeysPropertiesOutput {
	return i.ToTransformerProcessorMoveKeysPropertiesOutputWithContext(context.Background())
}

func (i TransformerProcessorMoveKeysPropertiesArgs) ToTransformerProcessorMoveKeysPropertiesOutputWithContext(ctx context.Context) TransformerProcessorMoveKeysPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerProcessorMoveKeysPropertiesOutput)
}

func (i TransformerProcessorMoveKeysPropertiesArgs) ToTransformerProcessorMoveKeysPropertiesPtrOutput() TransformerProcessorMoveKeysPropertiesPtrOutput {
	return i.ToTransformerProcessorMoveKeysPropertiesPtrOutputWithContext(context.Background())
}

func (i TransformerProcessorMoveKeysPropertiesArgs) ToTransformerProcessorMoveKeysPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorMoveKeysPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerProcessorMoveKeysPropertiesOutput).ToTransformerProcessorMoveKeysPropertiesPtrOutputWithContext(ctx)
}

// TransformerProcessorMoveKeysPropertiesPtrInput is an input type that accepts TransformerProcessorMoveKeysPropertiesArgs, TransformerProcessorMoveKeysPropertiesPtr and TransformerProcessorMoveKeysPropertiesPtrOutput values.
// You can construct a concrete instance of `TransformerProcessorMoveKeysPropertiesPtrInput` via:
//
//	        TransformerProcessorMoveKeysPropertiesArgs{...}
//
//	or:
//
//	        nil
type TransformerProcessorMoveKeysPropertiesPtrInput interface {
	pulumi.Input

	ToTransformerProcessorMoveKeysPropertiesPtrOutput() TransformerProcessorMoveKeysPropertiesPtrOutput
	ToTransformerProcessorMoveKeysPropertiesPtrOutputWithContext(context.Context) TransformerProcessorMoveKeysPropertiesPtrOutput
}

type transformerProcessorMoveKeysPropertiesPtrType TransformerProcessorMoveKeysPropertiesArgs

func TransformerProcessorMoveKeysPropertiesPtr(v *TransformerProcessorMoveKeysPropertiesArgs) TransformerProcessorMoveKeysPropertiesPtrInput {
	return (*transformerProcessorMoveKeysPropertiesPtrType)(v)
}

func (*transformerProcessorMoveKeysPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerProcessorMoveKeysProperties)(nil)).Elem()
}

func (i *transformerProcessorMoveKeysPropertiesPtrType) ToTransformerProcessorMoveKeysPropertiesPtrOutput() TransformerProcessorMoveKeysPropertiesPtrOutput {
	return i.ToTransformerProcessorMoveKeysPropertiesPtrOutputWithContext(context.Background())
}

func (i *transformerProcessorMoveKeysPropertiesPtrType) ToTransformerProcessorMoveKeysPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorMoveKeysPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerProcessorMoveKeysPropertiesPtrOutput)
}

// Use this parameter to include the [moveKeys](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-moveKeys) processor in your transformer.
type TransformerProcessorMoveKeysPropertiesOutput struct{ *pulumi.OutputState }

func (TransformerProcessorMoveKeysPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerProcessorMoveKeysProperties)(nil)).Elem()
}

func (o TransformerProcessorMoveKeysPropertiesOutput) ToTransformerProcessorMoveKeysPropertiesOutput() TransformerProcessorMoveKeysPropertiesOutput {
	return o
}

func (o TransformerProcessorMoveKeysPropertiesOutput) ToTransformerProcessorMoveKeysPropertiesOutputWithContext(ctx context.Context) TransformerProcessorMoveKeysPropertiesOutput {
	return o
}

func (o TransformerProcessorMoveKeysPropertiesOutput) ToTransformerProcessorMoveKeysPropertiesPtrOutput() TransformerProcessorMoveKeysPropertiesPtrOutput {
	return o.ToTransformerProcessorMoveKeysPropertiesPtrOutputWithContext(context.Background())
}

func (o TransformerProcessorMoveKeysPropertiesOutput) ToTransformerProcessorMoveKeysPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorMoveKeysPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformerProcessorMoveKeysProperties) *TransformerProcessorMoveKeysProperties {
		return &v
	}).(TransformerProcessorMoveKeysPropertiesPtrOutput)
}

func (o TransformerProcessorMoveKeysPropertiesOutput) Entries() TransformerMoveKeyEntryArrayOutput {
	return o.ApplyT(func(v TransformerProcessorMoveKeysProperties) []TransformerMoveKeyEntry { return v.Entries }).(TransformerMoveKeyEntryArrayOutput)
}

type TransformerProcessorMoveKeysPropertiesPtrOutput struct{ *pulumi.OutputState }

func (TransformerProcessorMoveKeysPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerProcessorMoveKeysProperties)(nil)).Elem()
}

func (o TransformerProcessorMoveKeysPropertiesPtrOutput) ToTransformerProcessorMoveKeysPropertiesPtrOutput() TransformerProcessorMoveKeysPropertiesPtrOutput {
	return o
}

func (o TransformerProcessorMoveKeysPropertiesPtrOutput) ToTransformerProcessorMoveKeysPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorMoveKeysPropertiesPtrOutput {
	return o
}

func (o TransformerProcessorMoveKeysPropertiesPtrOutput) Elem() TransformerProcessorMoveKeysPropertiesOutput {
	return o.ApplyT(func(v *TransformerProcessorMoveKeysProperties) TransformerProcessorMoveKeysProperties {
		if v != nil {
			return *v
		}
		var ret TransformerProcessorMoveKeysProperties
		return ret
	}).(TransformerProcessorMoveKeysPropertiesOutput)
}

func (o TransformerProcessorMoveKeysPropertiesPtrOutput) Entries() TransformerMoveKeyEntryArrayOutput {
	return o.ApplyT(func(v *TransformerProcessorMoveKeysProperties) []TransformerMoveKeyEntry {
		if v == nil {
			return nil
		}
		return v.Entries
	}).(TransformerMoveKeyEntryArrayOutput)
}

// Use this parameter to include the [parseJSON](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-parseJSON) processor in your transformer.
type TransformerProcessorParseJsonProperties struct {
	Destination *string `pulumi:"destination"`
	Source      *string `pulumi:"source"`
}

// TransformerProcessorParseJsonPropertiesInput is an input type that accepts TransformerProcessorParseJsonPropertiesArgs and TransformerProcessorParseJsonPropertiesOutput values.
// You can construct a concrete instance of `TransformerProcessorParseJsonPropertiesInput` via:
//
//	TransformerProcessorParseJsonPropertiesArgs{...}
type TransformerProcessorParseJsonPropertiesInput interface {
	pulumi.Input

	ToTransformerProcessorParseJsonPropertiesOutput() TransformerProcessorParseJsonPropertiesOutput
	ToTransformerProcessorParseJsonPropertiesOutputWithContext(context.Context) TransformerProcessorParseJsonPropertiesOutput
}

// Use this parameter to include the [parseJSON](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-parseJSON) processor in your transformer.
type TransformerProcessorParseJsonPropertiesArgs struct {
	Destination pulumi.StringPtrInput `pulumi:"destination"`
	Source      pulumi.StringPtrInput `pulumi:"source"`
}

func (TransformerProcessorParseJsonPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerProcessorParseJsonProperties)(nil)).Elem()
}

func (i TransformerProcessorParseJsonPropertiesArgs) ToTransformerProcessorParseJsonPropertiesOutput() TransformerProcessorParseJsonPropertiesOutput {
	return i.ToTransformerProcessorParseJsonPropertiesOutputWithContext(context.Background())
}

func (i TransformerProcessorParseJsonPropertiesArgs) ToTransformerProcessorParseJsonPropertiesOutputWithContext(ctx context.Context) TransformerProcessorParseJsonPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerProcessorParseJsonPropertiesOutput)
}

func (i TransformerProcessorParseJsonPropertiesArgs) ToTransformerProcessorParseJsonPropertiesPtrOutput() TransformerProcessorParseJsonPropertiesPtrOutput {
	return i.ToTransformerProcessorParseJsonPropertiesPtrOutputWithContext(context.Background())
}

func (i TransformerProcessorParseJsonPropertiesArgs) ToTransformerProcessorParseJsonPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorParseJsonPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerProcessorParseJsonPropertiesOutput).ToTransformerProcessorParseJsonPropertiesPtrOutputWithContext(ctx)
}

// TransformerProcessorParseJsonPropertiesPtrInput is an input type that accepts TransformerProcessorParseJsonPropertiesArgs, TransformerProcessorParseJsonPropertiesPtr and TransformerProcessorParseJsonPropertiesPtrOutput values.
// You can construct a concrete instance of `TransformerProcessorParseJsonPropertiesPtrInput` via:
//
//	        TransformerProcessorParseJsonPropertiesArgs{...}
//
//	or:
//
//	        nil
type TransformerProcessorParseJsonPropertiesPtrInput interface {
	pulumi.Input

	ToTransformerProcessorParseJsonPropertiesPtrOutput() TransformerProcessorParseJsonPropertiesPtrOutput
	ToTransformerProcessorParseJsonPropertiesPtrOutputWithContext(context.Context) TransformerProcessorParseJsonPropertiesPtrOutput
}

type transformerProcessorParseJsonPropertiesPtrType TransformerProcessorParseJsonPropertiesArgs

func TransformerProcessorParseJsonPropertiesPtr(v *TransformerProcessorParseJsonPropertiesArgs) TransformerProcessorParseJsonPropertiesPtrInput {
	return (*transformerProcessorParseJsonPropertiesPtrType)(v)
}

func (*transformerProcessorParseJsonPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerProcessorParseJsonProperties)(nil)).Elem()
}

func (i *transformerProcessorParseJsonPropertiesPtrType) ToTransformerProcessorParseJsonPropertiesPtrOutput() TransformerProcessorParseJsonPropertiesPtrOutput {
	return i.ToTransformerProcessorParseJsonPropertiesPtrOutputWithContext(context.Background())
}

func (i *transformerProcessorParseJsonPropertiesPtrType) ToTransformerProcessorParseJsonPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorParseJsonPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerProcessorParseJsonPropertiesPtrOutput)
}

// Use this parameter to include the [parseJSON](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-parseJSON) processor in your transformer.
type TransformerProcessorParseJsonPropertiesOutput struct{ *pulumi.OutputState }

func (TransformerProcessorParseJsonPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerProcessorParseJsonProperties)(nil)).Elem()
}

func (o TransformerProcessorParseJsonPropertiesOutput) ToTransformerProcessorParseJsonPropertiesOutput() TransformerProcessorParseJsonPropertiesOutput {
	return o
}

func (o TransformerProcessorParseJsonPropertiesOutput) ToTransformerProcessorParseJsonPropertiesOutputWithContext(ctx context.Context) TransformerProcessorParseJsonPropertiesOutput {
	return o
}

func (o TransformerProcessorParseJsonPropertiesOutput) ToTransformerProcessorParseJsonPropertiesPtrOutput() TransformerProcessorParseJsonPropertiesPtrOutput {
	return o.ToTransformerProcessorParseJsonPropertiesPtrOutputWithContext(context.Background())
}

func (o TransformerProcessorParseJsonPropertiesOutput) ToTransformerProcessorParseJsonPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorParseJsonPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformerProcessorParseJsonProperties) *TransformerProcessorParseJsonProperties {
		return &v
	}).(TransformerProcessorParseJsonPropertiesPtrOutput)
}

func (o TransformerProcessorParseJsonPropertiesOutput) Destination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerProcessorParseJsonProperties) *string { return v.Destination }).(pulumi.StringPtrOutput)
}

func (o TransformerProcessorParseJsonPropertiesOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerProcessorParseJsonProperties) *string { return v.Source }).(pulumi.StringPtrOutput)
}

type TransformerProcessorParseJsonPropertiesPtrOutput struct{ *pulumi.OutputState }

func (TransformerProcessorParseJsonPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerProcessorParseJsonProperties)(nil)).Elem()
}

func (o TransformerProcessorParseJsonPropertiesPtrOutput) ToTransformerProcessorParseJsonPropertiesPtrOutput() TransformerProcessorParseJsonPropertiesPtrOutput {
	return o
}

func (o TransformerProcessorParseJsonPropertiesPtrOutput) ToTransformerProcessorParseJsonPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorParseJsonPropertiesPtrOutput {
	return o
}

func (o TransformerProcessorParseJsonPropertiesPtrOutput) Elem() TransformerProcessorParseJsonPropertiesOutput {
	return o.ApplyT(func(v *TransformerProcessorParseJsonProperties) TransformerProcessorParseJsonProperties {
		if v != nil {
			return *v
		}
		var ret TransformerProcessorParseJsonProperties
		return ret
	}).(TransformerProcessorParseJsonPropertiesOutput)
}

func (o TransformerProcessorParseJsonPropertiesPtrOutput) Destination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerProcessorParseJsonProperties) *string {
		if v == nil {
			return nil
		}
		return v.Destination
	}).(pulumi.StringPtrOutput)
}

func (o TransformerProcessorParseJsonPropertiesPtrOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerProcessorParseJsonProperties) *string {
		if v == nil {
			return nil
		}
		return v.Source
	}).(pulumi.StringPtrOutput)
}

// Use this parameter to include the [parseKeyValue](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-parseKeyValue) processor in your transformer.
type TransformerProcessorParseKeyValueProperties struct {
	Destination       *string `pulumi:"destination"`
	FieldDelimiter    *string `pulumi:"fieldDelimiter"`
	KeyPrefix         *string `pulumi:"keyPrefix"`
	KeyValueDelimiter *string `pulumi:"keyValueDelimiter"`
	NonMatchValue     *string `pulumi:"nonMatchValue"`
	OverwriteIfExists *bool   `pulumi:"overwriteIfExists"`
	Source            *string `pulumi:"source"`
}

// TransformerProcessorParseKeyValuePropertiesInput is an input type that accepts TransformerProcessorParseKeyValuePropertiesArgs and TransformerProcessorParseKeyValuePropertiesOutput values.
// You can construct a concrete instance of `TransformerProcessorParseKeyValuePropertiesInput` via:
//
//	TransformerProcessorParseKeyValuePropertiesArgs{...}
type TransformerProcessorParseKeyValuePropertiesInput interface {
	pulumi.Input

	ToTransformerProcessorParseKeyValuePropertiesOutput() TransformerProcessorParseKeyValuePropertiesOutput
	ToTransformerProcessorParseKeyValuePropertiesOutputWithContext(context.Context) TransformerProcessorParseKeyValuePropertiesOutput
}

// Use this parameter to include the [parseKeyValue](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-parseKeyValue) processor in your transformer.
type TransformerProcessorParseKeyValuePropertiesArgs struct {
	Destination       pulumi.StringPtrInput `pulumi:"destination"`
	FieldDelimiter    pulumi.StringPtrInput `pulumi:"fieldDelimiter"`
	KeyPrefix         pulumi.StringPtrInput `pulumi:"keyPrefix"`
	KeyValueDelimiter pulumi.StringPtrInput `pulumi:"keyValueDelimiter"`
	NonMatchValue     pulumi.StringPtrInput `pulumi:"nonMatchValue"`
	OverwriteIfExists pulumi.BoolPtrInput   `pulumi:"overwriteIfExists"`
	Source            pulumi.StringPtrInput `pulumi:"source"`
}

func (TransformerProcessorParseKeyValuePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerProcessorParseKeyValueProperties)(nil)).Elem()
}

func (i TransformerProcessorParseKeyValuePropertiesArgs) ToTransformerProcessorParseKeyValuePropertiesOutput() TransformerProcessorParseKeyValuePropertiesOutput {
	return i.ToTransformerProcessorParseKeyValuePropertiesOutputWithContext(context.Background())
}

func (i TransformerProcessorParseKeyValuePropertiesArgs) ToTransformerProcessorParseKeyValuePropertiesOutputWithContext(ctx context.Context) TransformerProcessorParseKeyValuePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerProcessorParseKeyValuePropertiesOutput)
}

func (i TransformerProcessorParseKeyValuePropertiesArgs) ToTransformerProcessorParseKeyValuePropertiesPtrOutput() TransformerProcessorParseKeyValuePropertiesPtrOutput {
	return i.ToTransformerProcessorParseKeyValuePropertiesPtrOutputWithContext(context.Background())
}

func (i TransformerProcessorParseKeyValuePropertiesArgs) ToTransformerProcessorParseKeyValuePropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorParseKeyValuePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerProcessorParseKeyValuePropertiesOutput).ToTransformerProcessorParseKeyValuePropertiesPtrOutputWithContext(ctx)
}

// TransformerProcessorParseKeyValuePropertiesPtrInput is an input type that accepts TransformerProcessorParseKeyValuePropertiesArgs, TransformerProcessorParseKeyValuePropertiesPtr and TransformerProcessorParseKeyValuePropertiesPtrOutput values.
// You can construct a concrete instance of `TransformerProcessorParseKeyValuePropertiesPtrInput` via:
//
//	        TransformerProcessorParseKeyValuePropertiesArgs{...}
//
//	or:
//
//	        nil
type TransformerProcessorParseKeyValuePropertiesPtrInput interface {
	pulumi.Input

	ToTransformerProcessorParseKeyValuePropertiesPtrOutput() TransformerProcessorParseKeyValuePropertiesPtrOutput
	ToTransformerProcessorParseKeyValuePropertiesPtrOutputWithContext(context.Context) TransformerProcessorParseKeyValuePropertiesPtrOutput
}

type transformerProcessorParseKeyValuePropertiesPtrType TransformerProcessorParseKeyValuePropertiesArgs

func TransformerProcessorParseKeyValuePropertiesPtr(v *TransformerProcessorParseKeyValuePropertiesArgs) TransformerProcessorParseKeyValuePropertiesPtrInput {
	return (*transformerProcessorParseKeyValuePropertiesPtrType)(v)
}

func (*transformerProcessorParseKeyValuePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerProcessorParseKeyValueProperties)(nil)).Elem()
}

func (i *transformerProcessorParseKeyValuePropertiesPtrType) ToTransformerProcessorParseKeyValuePropertiesPtrOutput() TransformerProcessorParseKeyValuePropertiesPtrOutput {
	return i.ToTransformerProcessorParseKeyValuePropertiesPtrOutputWithContext(context.Background())
}

func (i *transformerProcessorParseKeyValuePropertiesPtrType) ToTransformerProcessorParseKeyValuePropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorParseKeyValuePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerProcessorParseKeyValuePropertiesPtrOutput)
}

// Use this parameter to include the [parseKeyValue](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-parseKeyValue) processor in your transformer.
type TransformerProcessorParseKeyValuePropertiesOutput struct{ *pulumi.OutputState }

func (TransformerProcessorParseKeyValuePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerProcessorParseKeyValueProperties)(nil)).Elem()
}

func (o TransformerProcessorParseKeyValuePropertiesOutput) ToTransformerProcessorParseKeyValuePropertiesOutput() TransformerProcessorParseKeyValuePropertiesOutput {
	return o
}

func (o TransformerProcessorParseKeyValuePropertiesOutput) ToTransformerProcessorParseKeyValuePropertiesOutputWithContext(ctx context.Context) TransformerProcessorParseKeyValuePropertiesOutput {
	return o
}

func (o TransformerProcessorParseKeyValuePropertiesOutput) ToTransformerProcessorParseKeyValuePropertiesPtrOutput() TransformerProcessorParseKeyValuePropertiesPtrOutput {
	return o.ToTransformerProcessorParseKeyValuePropertiesPtrOutputWithContext(context.Background())
}

func (o TransformerProcessorParseKeyValuePropertiesOutput) ToTransformerProcessorParseKeyValuePropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorParseKeyValuePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformerProcessorParseKeyValueProperties) *TransformerProcessorParseKeyValueProperties {
		return &v
	}).(TransformerProcessorParseKeyValuePropertiesPtrOutput)
}

func (o TransformerProcessorParseKeyValuePropertiesOutput) Destination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerProcessorParseKeyValueProperties) *string { return v.Destination }).(pulumi.StringPtrOutput)
}

func (o TransformerProcessorParseKeyValuePropertiesOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerProcessorParseKeyValueProperties) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

func (o TransformerProcessorParseKeyValuePropertiesOutput) KeyPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerProcessorParseKeyValueProperties) *string { return v.KeyPrefix }).(pulumi.StringPtrOutput)
}

func (o TransformerProcessorParseKeyValuePropertiesOutput) KeyValueDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerProcessorParseKeyValueProperties) *string { return v.KeyValueDelimiter }).(pulumi.StringPtrOutput)
}

func (o TransformerProcessorParseKeyValuePropertiesOutput) NonMatchValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerProcessorParseKeyValueProperties) *string { return v.NonMatchValue }).(pulumi.StringPtrOutput)
}

func (o TransformerProcessorParseKeyValuePropertiesOutput) OverwriteIfExists() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TransformerProcessorParseKeyValueProperties) *bool { return v.OverwriteIfExists }).(pulumi.BoolPtrOutput)
}

func (o TransformerProcessorParseKeyValuePropertiesOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformerProcessorParseKeyValueProperties) *string { return v.Source }).(pulumi.StringPtrOutput)
}

type TransformerProcessorParseKeyValuePropertiesPtrOutput struct{ *pulumi.OutputState }

func (TransformerProcessorParseKeyValuePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerProcessorParseKeyValueProperties)(nil)).Elem()
}

func (o TransformerProcessorParseKeyValuePropertiesPtrOutput) ToTransformerProcessorParseKeyValuePropertiesPtrOutput() TransformerProcessorParseKeyValuePropertiesPtrOutput {
	return o
}

func (o TransformerProcessorParseKeyValuePropertiesPtrOutput) ToTransformerProcessorParseKeyValuePropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorParseKeyValuePropertiesPtrOutput {
	return o
}

func (o TransformerProcessorParseKeyValuePropertiesPtrOutput) Elem() TransformerProcessorParseKeyValuePropertiesOutput {
	return o.ApplyT(func(v *TransformerProcessorParseKeyValueProperties) TransformerProcessorParseKeyValueProperties {
		if v != nil {
			return *v
		}
		var ret TransformerProcessorParseKeyValueProperties
		return ret
	}).(TransformerProcessorParseKeyValuePropertiesOutput)
}

func (o TransformerProcessorParseKeyValuePropertiesPtrOutput) Destination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerProcessorParseKeyValueProperties) *string {
		if v == nil {
			return nil
		}
		return v.Destination
	}).(pulumi.StringPtrOutput)
}

func (o TransformerProcessorParseKeyValuePropertiesPtrOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerProcessorParseKeyValueProperties) *string {
		if v == nil {
			return nil
		}
		return v.FieldDelimiter
	}).(pulumi.StringPtrOutput)
}

func (o TransformerProcessorParseKeyValuePropertiesPtrOutput) KeyPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerProcessorParseKeyValueProperties) *string {
		if v == nil {
			return nil
		}
		return v.KeyPrefix
	}).(pulumi.StringPtrOutput)
}

func (o TransformerProcessorParseKeyValuePropertiesPtrOutput) KeyValueDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerProcessorParseKeyValueProperties) *string {
		if v == nil {
			return nil
		}
		return v.KeyValueDelimiter
	}).(pulumi.StringPtrOutput)
}

func (o TransformerProcessorParseKeyValuePropertiesPtrOutput) NonMatchValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerProcessorParseKeyValueProperties) *string {
		if v == nil {
			return nil
		}
		return v.NonMatchValue
	}).(pulumi.StringPtrOutput)
}

func (o TransformerProcessorParseKeyValuePropertiesPtrOutput) OverwriteIfExists() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TransformerProcessorParseKeyValueProperties) *bool {
		if v == nil {
			return nil
		}
		return v.OverwriteIfExists
	}).(pulumi.BoolPtrOutput)
}

func (o TransformerProcessorParseKeyValuePropertiesPtrOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformerProcessorParseKeyValueProperties) *string {
		if v == nil {
			return nil
		}
		return v.Source
	}).(pulumi.StringPtrOutput)
}

// Use this parameter to include the [renameKeys](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-renameKeys) processor in your transformer.
type TransformerProcessorRenameKeysProperties struct {
	Entries []TransformerRenameKeyEntry `pulumi:"entries"`
}

// TransformerProcessorRenameKeysPropertiesInput is an input type that accepts TransformerProcessorRenameKeysPropertiesArgs and TransformerProcessorRenameKeysPropertiesOutput values.
// You can construct a concrete instance of `TransformerProcessorRenameKeysPropertiesInput` via:
//
//	TransformerProcessorRenameKeysPropertiesArgs{...}
type TransformerProcessorRenameKeysPropertiesInput interface {
	pulumi.Input

	ToTransformerProcessorRenameKeysPropertiesOutput() TransformerProcessorRenameKeysPropertiesOutput
	ToTransformerProcessorRenameKeysPropertiesOutputWithContext(context.Context) TransformerProcessorRenameKeysPropertiesOutput
}

// Use this parameter to include the [renameKeys](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-renameKeys) processor in your transformer.
type TransformerProcessorRenameKeysPropertiesArgs struct {
	Entries TransformerRenameKeyEntryArrayInput `pulumi:"entries"`
}

func (TransformerProcessorRenameKeysPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerProcessorRenameKeysProperties)(nil)).Elem()
}

func (i TransformerProcessorRenameKeysPropertiesArgs) ToTransformerProcessorRenameKeysPropertiesOutput() TransformerProcessorRenameKeysPropertiesOutput {
	return i.ToTransformerProcessorRenameKeysPropertiesOutputWithContext(context.Background())
}

func (i TransformerProcessorRenameKeysPropertiesArgs) ToTransformerProcessorRenameKeysPropertiesOutputWithContext(ctx context.Context) TransformerProcessorRenameKeysPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerProcessorRenameKeysPropertiesOutput)
}

func (i TransformerProcessorRenameKeysPropertiesArgs) ToTransformerProcessorRenameKeysPropertiesPtrOutput() TransformerProcessorRenameKeysPropertiesPtrOutput {
	return i.ToTransformerProcessorRenameKeysPropertiesPtrOutputWithContext(context.Background())
}

func (i TransformerProcessorRenameKeysPropertiesArgs) ToTransformerProcessorRenameKeysPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorRenameKeysPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerProcessorRenameKeysPropertiesOutput).ToTransformerProcessorRenameKeysPropertiesPtrOutputWithContext(ctx)
}

// TransformerProcessorRenameKeysPropertiesPtrInput is an input type that accepts TransformerProcessorRenameKeysPropertiesArgs, TransformerProcessorRenameKeysPropertiesPtr and TransformerProcessorRenameKeysPropertiesPtrOutput values.
// You can construct a concrete instance of `TransformerProcessorRenameKeysPropertiesPtrInput` via:
//
//	        TransformerProcessorRenameKeysPropertiesArgs{...}
//
//	or:
//
//	        nil
type TransformerProcessorRenameKeysPropertiesPtrInput interface {
	pulumi.Input

	ToTransformerProcessorRenameKeysPropertiesPtrOutput() TransformerProcessorRenameKeysPropertiesPtrOutput
	ToTransformerProcessorRenameKeysPropertiesPtrOutputWithContext(context.Context) TransformerProcessorRenameKeysPropertiesPtrOutput
}

type transformerProcessorRenameKeysPropertiesPtrType TransformerProcessorRenameKeysPropertiesArgs

func TransformerProcessorRenameKeysPropertiesPtr(v *TransformerProcessorRenameKeysPropertiesArgs) TransformerProcessorRenameKeysPropertiesPtrInput {
	return (*transformerProcessorRenameKeysPropertiesPtrType)(v)
}

func (*transformerProcessorRenameKeysPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerProcessorRenameKeysProperties)(nil)).Elem()
}

func (i *transformerProcessorRenameKeysPropertiesPtrType) ToTransformerProcessorRenameKeysPropertiesPtrOutput() TransformerProcessorRenameKeysPropertiesPtrOutput {
	return i.ToTransformerProcessorRenameKeysPropertiesPtrOutputWithContext(context.Background())
}

func (i *transformerProcessorRenameKeysPropertiesPtrType) ToTransformerProcessorRenameKeysPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorRenameKeysPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerProcessorRenameKeysPropertiesPtrOutput)
}

// Use this parameter to include the [renameKeys](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation.html#CloudWatch-Logs-Transformation-renameKeys) processor in your transformer.
type TransformerProcessorRenameKeysPropertiesOutput struct{ *pulumi.OutputState }

func (TransformerProcessorRenameKeysPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerProcessorRenameKeysProperties)(nil)).Elem()
}

func (o TransformerProcessorRenameKeysPropertiesOutput) ToTransformerProcessorRenameKeysPropertiesOutput() TransformerProcessorRenameKeysPropertiesOutput {
	return o
}

func (o TransformerProcessorRenameKeysPropertiesOutput) ToTransformerProcessorRenameKeysPropertiesOutputWithContext(ctx context.Context) TransformerProcessorRenameKeysPropertiesOutput {
	return o
}

func (o TransformerProcessorRenameKeysPropertiesOutput) ToTransformerProcessorRenameKeysPropertiesPtrOutput() TransformerProcessorRenameKeysPropertiesPtrOutput {
	return o.ToTransformerProcessorRenameKeysPropertiesPtrOutputWithContext(context.Background())
}

func (o TransformerProcessorRenameKeysPropertiesOutput) ToTransformerProcessorRenameKeysPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorRenameKeysPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformerProcessorRenameKeysProperties) *TransformerProcessorRenameKeysProperties {
		return &v
	}).(TransformerProcessorRenameKeysPropertiesPtrOutput)
}

func (o TransformerProcessorRenameKeysPropertiesOutput) Entries() TransformerRenameKeyEntryArrayOutput {
	return o.ApplyT(func(v TransformerProcessorRenameKeysProperties) []TransformerRenameKeyEntry { return v.Entries }).(TransformerRenameKeyEntryArrayOutput)
}

type TransformerProcessorRenameKeysPropertiesPtrOutput struct{ *pulumi.OutputState }

func (TransformerProcessorRenameKeysPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerProcessorRenameKeysProperties)(nil)).Elem()
}

func (o TransformerProcessorRenameKeysPropertiesPtrOutput) ToTransformerProcessorRenameKeysPropertiesPtrOutput() TransformerProcessorRenameKeysPropertiesPtrOutput {
	return o
}

func (o TransformerProcessorRenameKeysPropertiesPtrOutput) ToTransformerProcessorRenameKeysPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorRenameKeysPropertiesPtrOutput {
	return o
}

func (o TransformerProcessorRenameKeysPropertiesPtrOutput) Elem() TransformerProcessorRenameKeysPropertiesOutput {
	return o.ApplyT(func(v *TransformerProcessorRenameKeysProperties) TransformerProcessorRenameKeysProperties {
		if v != nil {
			return *v
		}
		var ret TransformerProcessorRenameKeysProperties
		return ret
	}).(TransformerProcessorRenameKeysPropertiesOutput)
}

func (o TransformerProcessorRenameKeysPropertiesPtrOutput) Entries() TransformerRenameKeyEntryArrayOutput {
	return o.ApplyT(func(v *TransformerProcessorRenameKeysProperties) []TransformerRenameKeyEntry {
		if v == nil {
			return nil
		}
		return v.Entries
	}).(TransformerRenameKeyEntryArrayOutput)
}

// Use this parameter to include the [splitString](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-splitString) processor in your transformer.
type TransformerProcessorSplitStringProperties struct {
	Entries []TransformerSplitStringEntry `pulumi:"entries"`
}

// TransformerProcessorSplitStringPropertiesInput is an input type that accepts TransformerProcessorSplitStringPropertiesArgs and TransformerProcessorSplitStringPropertiesOutput values.
// You can construct a concrete instance of `TransformerProcessorSplitStringPropertiesInput` via:
//
//	TransformerProcessorSplitStringPropertiesArgs{...}
type TransformerProcessorSplitStringPropertiesInput interface {
	pulumi.Input

	ToTransformerProcessorSplitStringPropertiesOutput() TransformerProcessorSplitStringPropertiesOutput
	ToTransformerProcessorSplitStringPropertiesOutputWithContext(context.Context) TransformerProcessorSplitStringPropertiesOutput
}

// Use this parameter to include the [splitString](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-splitString) processor in your transformer.
type TransformerProcessorSplitStringPropertiesArgs struct {
	Entries TransformerSplitStringEntryArrayInput `pulumi:"entries"`
}

func (TransformerProcessorSplitStringPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerProcessorSplitStringProperties)(nil)).Elem()
}

func (i TransformerProcessorSplitStringPropertiesArgs) ToTransformerProcessorSplitStringPropertiesOutput() TransformerProcessorSplitStringPropertiesOutput {
	return i.ToTransformerProcessorSplitStringPropertiesOutputWithContext(context.Background())
}

func (i TransformerProcessorSplitStringPropertiesArgs) ToTransformerProcessorSplitStringPropertiesOutputWithContext(ctx context.Context) TransformerProcessorSplitStringPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerProcessorSplitStringPropertiesOutput)
}

func (i TransformerProcessorSplitStringPropertiesArgs) ToTransformerProcessorSplitStringPropertiesPtrOutput() TransformerProcessorSplitStringPropertiesPtrOutput {
	return i.ToTransformerProcessorSplitStringPropertiesPtrOutputWithContext(context.Background())
}

func (i TransformerProcessorSplitStringPropertiesArgs) ToTransformerProcessorSplitStringPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorSplitStringPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerProcessorSplitStringPropertiesOutput).ToTransformerProcessorSplitStringPropertiesPtrOutputWithContext(ctx)
}

// TransformerProcessorSplitStringPropertiesPtrInput is an input type that accepts TransformerProcessorSplitStringPropertiesArgs, TransformerProcessorSplitStringPropertiesPtr and TransformerProcessorSplitStringPropertiesPtrOutput values.
// You can construct a concrete instance of `TransformerProcessorSplitStringPropertiesPtrInput` via:
//
//	        TransformerProcessorSplitStringPropertiesArgs{...}
//
//	or:
//
//	        nil
type TransformerProcessorSplitStringPropertiesPtrInput interface {
	pulumi.Input

	ToTransformerProcessorSplitStringPropertiesPtrOutput() TransformerProcessorSplitStringPropertiesPtrOutput
	ToTransformerProcessorSplitStringPropertiesPtrOutputWithContext(context.Context) TransformerProcessorSplitStringPropertiesPtrOutput
}

type transformerProcessorSplitStringPropertiesPtrType TransformerProcessorSplitStringPropertiesArgs

func TransformerProcessorSplitStringPropertiesPtr(v *TransformerProcessorSplitStringPropertiesArgs) TransformerProcessorSplitStringPropertiesPtrInput {
	return (*transformerProcessorSplitStringPropertiesPtrType)(v)
}

func (*transformerProcessorSplitStringPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerProcessorSplitStringProperties)(nil)).Elem()
}

func (i *transformerProcessorSplitStringPropertiesPtrType) ToTransformerProcessorSplitStringPropertiesPtrOutput() TransformerProcessorSplitStringPropertiesPtrOutput {
	return i.ToTransformerProcessorSplitStringPropertiesPtrOutputWithContext(context.Background())
}

func (i *transformerProcessorSplitStringPropertiesPtrType) ToTransformerProcessorSplitStringPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorSplitStringPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerProcessorSplitStringPropertiesPtrOutput)
}

// Use this parameter to include the [splitString](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-splitString) processor in your transformer.
type TransformerProcessorSplitStringPropertiesOutput struct{ *pulumi.OutputState }

func (TransformerProcessorSplitStringPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerProcessorSplitStringProperties)(nil)).Elem()
}

func (o TransformerProcessorSplitStringPropertiesOutput) ToTransformerProcessorSplitStringPropertiesOutput() TransformerProcessorSplitStringPropertiesOutput {
	return o
}

func (o TransformerProcessorSplitStringPropertiesOutput) ToTransformerProcessorSplitStringPropertiesOutputWithContext(ctx context.Context) TransformerProcessorSplitStringPropertiesOutput {
	return o
}

func (o TransformerProcessorSplitStringPropertiesOutput) ToTransformerProcessorSplitStringPropertiesPtrOutput() TransformerProcessorSplitStringPropertiesPtrOutput {
	return o.ToTransformerProcessorSplitStringPropertiesPtrOutputWithContext(context.Background())
}

func (o TransformerProcessorSplitStringPropertiesOutput) ToTransformerProcessorSplitStringPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorSplitStringPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformerProcessorSplitStringProperties) *TransformerProcessorSplitStringProperties {
		return &v
	}).(TransformerProcessorSplitStringPropertiesPtrOutput)
}

func (o TransformerProcessorSplitStringPropertiesOutput) Entries() TransformerSplitStringEntryArrayOutput {
	return o.ApplyT(func(v TransformerProcessorSplitStringProperties) []TransformerSplitStringEntry { return v.Entries }).(TransformerSplitStringEntryArrayOutput)
}

type TransformerProcessorSplitStringPropertiesPtrOutput struct{ *pulumi.OutputState }

func (TransformerProcessorSplitStringPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerProcessorSplitStringProperties)(nil)).Elem()
}

func (o TransformerProcessorSplitStringPropertiesPtrOutput) ToTransformerProcessorSplitStringPropertiesPtrOutput() TransformerProcessorSplitStringPropertiesPtrOutput {
	return o
}

func (o TransformerProcessorSplitStringPropertiesPtrOutput) ToTransformerProcessorSplitStringPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorSplitStringPropertiesPtrOutput {
	return o
}

func (o TransformerProcessorSplitStringPropertiesPtrOutput) Elem() TransformerProcessorSplitStringPropertiesOutput {
	return o.ApplyT(func(v *TransformerProcessorSplitStringProperties) TransformerProcessorSplitStringProperties {
		if v != nil {
			return *v
		}
		var ret TransformerProcessorSplitStringProperties
		return ret
	}).(TransformerProcessorSplitStringPropertiesOutput)
}

func (o TransformerProcessorSplitStringPropertiesPtrOutput) Entries() TransformerSplitStringEntryArrayOutput {
	return o.ApplyT(func(v *TransformerProcessorSplitStringProperties) []TransformerSplitStringEntry {
		if v == nil {
			return nil
		}
		return v.Entries
	}).(TransformerSplitStringEntryArrayOutput)
}

// Use this parameter to include the [substituteString](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-substituteString) processor in your transformer.
type TransformerProcessorSubstituteStringProperties struct {
	Entries []TransformerSubstituteStringEntry `pulumi:"entries"`
}

// TransformerProcessorSubstituteStringPropertiesInput is an input type that accepts TransformerProcessorSubstituteStringPropertiesArgs and TransformerProcessorSubstituteStringPropertiesOutput values.
// You can construct a concrete instance of `TransformerProcessorSubstituteStringPropertiesInput` via:
//
//	TransformerProcessorSubstituteStringPropertiesArgs{...}
type TransformerProcessorSubstituteStringPropertiesInput interface {
	pulumi.Input

	ToTransformerProcessorSubstituteStringPropertiesOutput() TransformerProcessorSubstituteStringPropertiesOutput
	ToTransformerProcessorSubstituteStringPropertiesOutputWithContext(context.Context) TransformerProcessorSubstituteStringPropertiesOutput
}

// Use this parameter to include the [substituteString](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-substituteString) processor in your transformer.
type TransformerProcessorSubstituteStringPropertiesArgs struct {
	Entries TransformerSubstituteStringEntryArrayInput `pulumi:"entries"`
}

func (TransformerProcessorSubstituteStringPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerProcessorSubstituteStringProperties)(nil)).Elem()
}

func (i TransformerProcessorSubstituteStringPropertiesArgs) ToTransformerProcessorSubstituteStringPropertiesOutput() TransformerProcessorSubstituteStringPropertiesOutput {
	return i.ToTransformerProcessorSubstituteStringPropertiesOutputWithContext(context.Background())
}

func (i TransformerProcessorSubstituteStringPropertiesArgs) ToTransformerProcessorSubstituteStringPropertiesOutputWithContext(ctx context.Context) TransformerProcessorSubstituteStringPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerProcessorSubstituteStringPropertiesOutput)
}

func (i TransformerProcessorSubstituteStringPropertiesArgs) ToTransformerProcessorSubstituteStringPropertiesPtrOutput() TransformerProcessorSubstituteStringPropertiesPtrOutput {
	return i.ToTransformerProcessorSubstituteStringPropertiesPtrOutputWithContext(context.Background())
}

func (i TransformerProcessorSubstituteStringPropertiesArgs) ToTransformerProcessorSubstituteStringPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorSubstituteStringPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerProcessorSubstituteStringPropertiesOutput).ToTransformerProcessorSubstituteStringPropertiesPtrOutputWithContext(ctx)
}

// TransformerProcessorSubstituteStringPropertiesPtrInput is an input type that accepts TransformerProcessorSubstituteStringPropertiesArgs, TransformerProcessorSubstituteStringPropertiesPtr and TransformerProcessorSubstituteStringPropertiesPtrOutput values.
// You can construct a concrete instance of `TransformerProcessorSubstituteStringPropertiesPtrInput` via:
//
//	        TransformerProcessorSubstituteStringPropertiesArgs{...}
//
//	or:
//
//	        nil
type TransformerProcessorSubstituteStringPropertiesPtrInput interface {
	pulumi.Input

	ToTransformerProcessorSubstituteStringPropertiesPtrOutput() TransformerProcessorSubstituteStringPropertiesPtrOutput
	ToTransformerProcessorSubstituteStringPropertiesPtrOutputWithContext(context.Context) TransformerProcessorSubstituteStringPropertiesPtrOutput
}

type transformerProcessorSubstituteStringPropertiesPtrType TransformerProcessorSubstituteStringPropertiesArgs

func TransformerProcessorSubstituteStringPropertiesPtr(v *TransformerProcessorSubstituteStringPropertiesArgs) TransformerProcessorSubstituteStringPropertiesPtrInput {
	return (*transformerProcessorSubstituteStringPropertiesPtrType)(v)
}

func (*transformerProcessorSubstituteStringPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerProcessorSubstituteStringProperties)(nil)).Elem()
}

func (i *transformerProcessorSubstituteStringPropertiesPtrType) ToTransformerProcessorSubstituteStringPropertiesPtrOutput() TransformerProcessorSubstituteStringPropertiesPtrOutput {
	return i.ToTransformerProcessorSubstituteStringPropertiesPtrOutputWithContext(context.Background())
}

func (i *transformerProcessorSubstituteStringPropertiesPtrType) ToTransformerProcessorSubstituteStringPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorSubstituteStringPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerProcessorSubstituteStringPropertiesPtrOutput)
}

// Use this parameter to include the [substituteString](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-substituteString) processor in your transformer.
type TransformerProcessorSubstituteStringPropertiesOutput struct{ *pulumi.OutputState }

func (TransformerProcessorSubstituteStringPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerProcessorSubstituteStringProperties)(nil)).Elem()
}

func (o TransformerProcessorSubstituteStringPropertiesOutput) ToTransformerProcessorSubstituteStringPropertiesOutput() TransformerProcessorSubstituteStringPropertiesOutput {
	return o
}

func (o TransformerProcessorSubstituteStringPropertiesOutput) ToTransformerProcessorSubstituteStringPropertiesOutputWithContext(ctx context.Context) TransformerProcessorSubstituteStringPropertiesOutput {
	return o
}

func (o TransformerProcessorSubstituteStringPropertiesOutput) ToTransformerProcessorSubstituteStringPropertiesPtrOutput() TransformerProcessorSubstituteStringPropertiesPtrOutput {
	return o.ToTransformerProcessorSubstituteStringPropertiesPtrOutputWithContext(context.Background())
}

func (o TransformerProcessorSubstituteStringPropertiesOutput) ToTransformerProcessorSubstituteStringPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorSubstituteStringPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformerProcessorSubstituteStringProperties) *TransformerProcessorSubstituteStringProperties {
		return &v
	}).(TransformerProcessorSubstituteStringPropertiesPtrOutput)
}

func (o TransformerProcessorSubstituteStringPropertiesOutput) Entries() TransformerSubstituteStringEntryArrayOutput {
	return o.ApplyT(func(v TransformerProcessorSubstituteStringProperties) []TransformerSubstituteStringEntry {
		return v.Entries
	}).(TransformerSubstituteStringEntryArrayOutput)
}

type TransformerProcessorSubstituteStringPropertiesPtrOutput struct{ *pulumi.OutputState }

func (TransformerProcessorSubstituteStringPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerProcessorSubstituteStringProperties)(nil)).Elem()
}

func (o TransformerProcessorSubstituteStringPropertiesPtrOutput) ToTransformerProcessorSubstituteStringPropertiesPtrOutput() TransformerProcessorSubstituteStringPropertiesPtrOutput {
	return o
}

func (o TransformerProcessorSubstituteStringPropertiesPtrOutput) ToTransformerProcessorSubstituteStringPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorSubstituteStringPropertiesPtrOutput {
	return o
}

func (o TransformerProcessorSubstituteStringPropertiesPtrOutput) Elem() TransformerProcessorSubstituteStringPropertiesOutput {
	return o.ApplyT(func(v *TransformerProcessorSubstituteStringProperties) TransformerProcessorSubstituteStringProperties {
		if v != nil {
			return *v
		}
		var ret TransformerProcessorSubstituteStringProperties
		return ret
	}).(TransformerProcessorSubstituteStringPropertiesOutput)
}

func (o TransformerProcessorSubstituteStringPropertiesPtrOutput) Entries() TransformerSubstituteStringEntryArrayOutput {
	return o.ApplyT(func(v *TransformerProcessorSubstituteStringProperties) []TransformerSubstituteStringEntry {
		if v == nil {
			return nil
		}
		return v.Entries
	}).(TransformerSubstituteStringEntryArrayOutput)
}

// Use this parameter to include the [trimString](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-trimString) processor in your transformer.
type TransformerProcessorTrimStringProperties struct {
	WithKeys []string `pulumi:"withKeys"`
}

// TransformerProcessorTrimStringPropertiesInput is an input type that accepts TransformerProcessorTrimStringPropertiesArgs and TransformerProcessorTrimStringPropertiesOutput values.
// You can construct a concrete instance of `TransformerProcessorTrimStringPropertiesInput` via:
//
//	TransformerProcessorTrimStringPropertiesArgs{...}
type TransformerProcessorTrimStringPropertiesInput interface {
	pulumi.Input

	ToTransformerProcessorTrimStringPropertiesOutput() TransformerProcessorTrimStringPropertiesOutput
	ToTransformerProcessorTrimStringPropertiesOutputWithContext(context.Context) TransformerProcessorTrimStringPropertiesOutput
}

// Use this parameter to include the [trimString](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-trimString) processor in your transformer.
type TransformerProcessorTrimStringPropertiesArgs struct {
	WithKeys pulumi.StringArrayInput `pulumi:"withKeys"`
}

func (TransformerProcessorTrimStringPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerProcessorTrimStringProperties)(nil)).Elem()
}

func (i TransformerProcessorTrimStringPropertiesArgs) ToTransformerProcessorTrimStringPropertiesOutput() TransformerProcessorTrimStringPropertiesOutput {
	return i.ToTransformerProcessorTrimStringPropertiesOutputWithContext(context.Background())
}

func (i TransformerProcessorTrimStringPropertiesArgs) ToTransformerProcessorTrimStringPropertiesOutputWithContext(ctx context.Context) TransformerProcessorTrimStringPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerProcessorTrimStringPropertiesOutput)
}

func (i TransformerProcessorTrimStringPropertiesArgs) ToTransformerProcessorTrimStringPropertiesPtrOutput() TransformerProcessorTrimStringPropertiesPtrOutput {
	return i.ToTransformerProcessorTrimStringPropertiesPtrOutputWithContext(context.Background())
}

func (i TransformerProcessorTrimStringPropertiesArgs) ToTransformerProcessorTrimStringPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorTrimStringPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerProcessorTrimStringPropertiesOutput).ToTransformerProcessorTrimStringPropertiesPtrOutputWithContext(ctx)
}

// TransformerProcessorTrimStringPropertiesPtrInput is an input type that accepts TransformerProcessorTrimStringPropertiesArgs, TransformerProcessorTrimStringPropertiesPtr and TransformerProcessorTrimStringPropertiesPtrOutput values.
// You can construct a concrete instance of `TransformerProcessorTrimStringPropertiesPtrInput` via:
//
//	        TransformerProcessorTrimStringPropertiesArgs{...}
//
//	or:
//
//	        nil
type TransformerProcessorTrimStringPropertiesPtrInput interface {
	pulumi.Input

	ToTransformerProcessorTrimStringPropertiesPtrOutput() TransformerProcessorTrimStringPropertiesPtrOutput
	ToTransformerProcessorTrimStringPropertiesPtrOutputWithContext(context.Context) TransformerProcessorTrimStringPropertiesPtrOutput
}

type transformerProcessorTrimStringPropertiesPtrType TransformerProcessorTrimStringPropertiesArgs

func TransformerProcessorTrimStringPropertiesPtr(v *TransformerProcessorTrimStringPropertiesArgs) TransformerProcessorTrimStringPropertiesPtrInput {
	return (*transformerProcessorTrimStringPropertiesPtrType)(v)
}

func (*transformerProcessorTrimStringPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerProcessorTrimStringProperties)(nil)).Elem()
}

func (i *transformerProcessorTrimStringPropertiesPtrType) ToTransformerProcessorTrimStringPropertiesPtrOutput() TransformerProcessorTrimStringPropertiesPtrOutput {
	return i.ToTransformerProcessorTrimStringPropertiesPtrOutputWithContext(context.Background())
}

func (i *transformerProcessorTrimStringPropertiesPtrType) ToTransformerProcessorTrimStringPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorTrimStringPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerProcessorTrimStringPropertiesPtrOutput)
}

// Use this parameter to include the [trimString](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-trimString) processor in your transformer.
type TransformerProcessorTrimStringPropertiesOutput struct{ *pulumi.OutputState }

func (TransformerProcessorTrimStringPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerProcessorTrimStringProperties)(nil)).Elem()
}

func (o TransformerProcessorTrimStringPropertiesOutput) ToTransformerProcessorTrimStringPropertiesOutput() TransformerProcessorTrimStringPropertiesOutput {
	return o
}

func (o TransformerProcessorTrimStringPropertiesOutput) ToTransformerProcessorTrimStringPropertiesOutputWithContext(ctx context.Context) TransformerProcessorTrimStringPropertiesOutput {
	return o
}

func (o TransformerProcessorTrimStringPropertiesOutput) ToTransformerProcessorTrimStringPropertiesPtrOutput() TransformerProcessorTrimStringPropertiesPtrOutput {
	return o.ToTransformerProcessorTrimStringPropertiesPtrOutputWithContext(context.Background())
}

func (o TransformerProcessorTrimStringPropertiesOutput) ToTransformerProcessorTrimStringPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorTrimStringPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformerProcessorTrimStringProperties) *TransformerProcessorTrimStringProperties {
		return &v
	}).(TransformerProcessorTrimStringPropertiesPtrOutput)
}

func (o TransformerProcessorTrimStringPropertiesOutput) WithKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TransformerProcessorTrimStringProperties) []string { return v.WithKeys }).(pulumi.StringArrayOutput)
}

type TransformerProcessorTrimStringPropertiesPtrOutput struct{ *pulumi.OutputState }

func (TransformerProcessorTrimStringPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerProcessorTrimStringProperties)(nil)).Elem()
}

func (o TransformerProcessorTrimStringPropertiesPtrOutput) ToTransformerProcessorTrimStringPropertiesPtrOutput() TransformerProcessorTrimStringPropertiesPtrOutput {
	return o
}

func (o TransformerProcessorTrimStringPropertiesPtrOutput) ToTransformerProcessorTrimStringPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorTrimStringPropertiesPtrOutput {
	return o
}

func (o TransformerProcessorTrimStringPropertiesPtrOutput) Elem() TransformerProcessorTrimStringPropertiesOutput {
	return o.ApplyT(func(v *TransformerProcessorTrimStringProperties) TransformerProcessorTrimStringProperties {
		if v != nil {
			return *v
		}
		var ret TransformerProcessorTrimStringProperties
		return ret
	}).(TransformerProcessorTrimStringPropertiesOutput)
}

func (o TransformerProcessorTrimStringPropertiesPtrOutput) WithKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TransformerProcessorTrimStringProperties) []string {
		if v == nil {
			return nil
		}
		return v.WithKeys
	}).(pulumi.StringArrayOutput)
}

// Use this parameter to include the [typeConverter](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-typeConverter) processor in your transformer.
type TransformerProcessorTypeConverterProperties struct {
	Entries []TransformerTypeConverterEntry `pulumi:"entries"`
}

// TransformerProcessorTypeConverterPropertiesInput is an input type that accepts TransformerProcessorTypeConverterPropertiesArgs and TransformerProcessorTypeConverterPropertiesOutput values.
// You can construct a concrete instance of `TransformerProcessorTypeConverterPropertiesInput` via:
//
//	TransformerProcessorTypeConverterPropertiesArgs{...}
type TransformerProcessorTypeConverterPropertiesInput interface {
	pulumi.Input

	ToTransformerProcessorTypeConverterPropertiesOutput() TransformerProcessorTypeConverterPropertiesOutput
	ToTransformerProcessorTypeConverterPropertiesOutputWithContext(context.Context) TransformerProcessorTypeConverterPropertiesOutput
}

// Use this parameter to include the [typeConverter](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-typeConverter) processor in your transformer.
type TransformerProcessorTypeConverterPropertiesArgs struct {
	Entries TransformerTypeConverterEntryArrayInput `pulumi:"entries"`
}

func (TransformerProcessorTypeConverterPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerProcessorTypeConverterProperties)(nil)).Elem()
}

func (i TransformerProcessorTypeConverterPropertiesArgs) ToTransformerProcessorTypeConverterPropertiesOutput() TransformerProcessorTypeConverterPropertiesOutput {
	return i.ToTransformerProcessorTypeConverterPropertiesOutputWithContext(context.Background())
}

func (i TransformerProcessorTypeConverterPropertiesArgs) ToTransformerProcessorTypeConverterPropertiesOutputWithContext(ctx context.Context) TransformerProcessorTypeConverterPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerProcessorTypeConverterPropertiesOutput)
}

func (i TransformerProcessorTypeConverterPropertiesArgs) ToTransformerProcessorTypeConverterPropertiesPtrOutput() TransformerProcessorTypeConverterPropertiesPtrOutput {
	return i.ToTransformerProcessorTypeConverterPropertiesPtrOutputWithContext(context.Background())
}

func (i TransformerProcessorTypeConverterPropertiesArgs) ToTransformerProcessorTypeConverterPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorTypeConverterPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerProcessorTypeConverterPropertiesOutput).ToTransformerProcessorTypeConverterPropertiesPtrOutputWithContext(ctx)
}

// TransformerProcessorTypeConverterPropertiesPtrInput is an input type that accepts TransformerProcessorTypeConverterPropertiesArgs, TransformerProcessorTypeConverterPropertiesPtr and TransformerProcessorTypeConverterPropertiesPtrOutput values.
// You can construct a concrete instance of `TransformerProcessorTypeConverterPropertiesPtrInput` via:
//
//	        TransformerProcessorTypeConverterPropertiesArgs{...}
//
//	or:
//
//	        nil
type TransformerProcessorTypeConverterPropertiesPtrInput interface {
	pulumi.Input

	ToTransformerProcessorTypeConverterPropertiesPtrOutput() TransformerProcessorTypeConverterPropertiesPtrOutput
	ToTransformerProcessorTypeConverterPropertiesPtrOutputWithContext(context.Context) TransformerProcessorTypeConverterPropertiesPtrOutput
}

type transformerProcessorTypeConverterPropertiesPtrType TransformerProcessorTypeConverterPropertiesArgs

func TransformerProcessorTypeConverterPropertiesPtr(v *TransformerProcessorTypeConverterPropertiesArgs) TransformerProcessorTypeConverterPropertiesPtrInput {
	return (*transformerProcessorTypeConverterPropertiesPtrType)(v)
}

func (*transformerProcessorTypeConverterPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerProcessorTypeConverterProperties)(nil)).Elem()
}

func (i *transformerProcessorTypeConverterPropertiesPtrType) ToTransformerProcessorTypeConverterPropertiesPtrOutput() TransformerProcessorTypeConverterPropertiesPtrOutput {
	return i.ToTransformerProcessorTypeConverterPropertiesPtrOutputWithContext(context.Background())
}

func (i *transformerProcessorTypeConverterPropertiesPtrType) ToTransformerProcessorTypeConverterPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorTypeConverterPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerProcessorTypeConverterPropertiesPtrOutput)
}

// Use this parameter to include the [typeConverter](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-typeConverter) processor in your transformer.
type TransformerProcessorTypeConverterPropertiesOutput struct{ *pulumi.OutputState }

func (TransformerProcessorTypeConverterPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerProcessorTypeConverterProperties)(nil)).Elem()
}

func (o TransformerProcessorTypeConverterPropertiesOutput) ToTransformerProcessorTypeConverterPropertiesOutput() TransformerProcessorTypeConverterPropertiesOutput {
	return o
}

func (o TransformerProcessorTypeConverterPropertiesOutput) ToTransformerProcessorTypeConverterPropertiesOutputWithContext(ctx context.Context) TransformerProcessorTypeConverterPropertiesOutput {
	return o
}

func (o TransformerProcessorTypeConverterPropertiesOutput) ToTransformerProcessorTypeConverterPropertiesPtrOutput() TransformerProcessorTypeConverterPropertiesPtrOutput {
	return o.ToTransformerProcessorTypeConverterPropertiesPtrOutputWithContext(context.Background())
}

func (o TransformerProcessorTypeConverterPropertiesOutput) ToTransformerProcessorTypeConverterPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorTypeConverterPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformerProcessorTypeConverterProperties) *TransformerProcessorTypeConverterProperties {
		return &v
	}).(TransformerProcessorTypeConverterPropertiesPtrOutput)
}

func (o TransformerProcessorTypeConverterPropertiesOutput) Entries() TransformerTypeConverterEntryArrayOutput {
	return o.ApplyT(func(v TransformerProcessorTypeConverterProperties) []TransformerTypeConverterEntry { return v.Entries }).(TransformerTypeConverterEntryArrayOutput)
}

type TransformerProcessorTypeConverterPropertiesPtrOutput struct{ *pulumi.OutputState }

func (TransformerProcessorTypeConverterPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerProcessorTypeConverterProperties)(nil)).Elem()
}

func (o TransformerProcessorTypeConverterPropertiesPtrOutput) ToTransformerProcessorTypeConverterPropertiesPtrOutput() TransformerProcessorTypeConverterPropertiesPtrOutput {
	return o
}

func (o TransformerProcessorTypeConverterPropertiesPtrOutput) ToTransformerProcessorTypeConverterPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorTypeConverterPropertiesPtrOutput {
	return o
}

func (o TransformerProcessorTypeConverterPropertiesPtrOutput) Elem() TransformerProcessorTypeConverterPropertiesOutput {
	return o.ApplyT(func(v *TransformerProcessorTypeConverterProperties) TransformerProcessorTypeConverterProperties {
		if v != nil {
			return *v
		}
		var ret TransformerProcessorTypeConverterProperties
		return ret
	}).(TransformerProcessorTypeConverterPropertiesOutput)
}

func (o TransformerProcessorTypeConverterPropertiesPtrOutput) Entries() TransformerTypeConverterEntryArrayOutput {
	return o.ApplyT(func(v *TransformerProcessorTypeConverterProperties) []TransformerTypeConverterEntry {
		if v == nil {
			return nil
		}
		return v.Entries
	}).(TransformerTypeConverterEntryArrayOutput)
}

// Use this parameter to include the [upperCaseString](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-upperCaseString) processor in your transformer.
type TransformerProcessorUpperCaseStringProperties struct {
	WithKeys []string `pulumi:"withKeys"`
}

// TransformerProcessorUpperCaseStringPropertiesInput is an input type that accepts TransformerProcessorUpperCaseStringPropertiesArgs and TransformerProcessorUpperCaseStringPropertiesOutput values.
// You can construct a concrete instance of `TransformerProcessorUpperCaseStringPropertiesInput` via:
//
//	TransformerProcessorUpperCaseStringPropertiesArgs{...}
type TransformerProcessorUpperCaseStringPropertiesInput interface {
	pulumi.Input

	ToTransformerProcessorUpperCaseStringPropertiesOutput() TransformerProcessorUpperCaseStringPropertiesOutput
	ToTransformerProcessorUpperCaseStringPropertiesOutputWithContext(context.Context) TransformerProcessorUpperCaseStringPropertiesOutput
}

// Use this parameter to include the [upperCaseString](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-upperCaseString) processor in your transformer.
type TransformerProcessorUpperCaseStringPropertiesArgs struct {
	WithKeys pulumi.StringArrayInput `pulumi:"withKeys"`
}

func (TransformerProcessorUpperCaseStringPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerProcessorUpperCaseStringProperties)(nil)).Elem()
}

func (i TransformerProcessorUpperCaseStringPropertiesArgs) ToTransformerProcessorUpperCaseStringPropertiesOutput() TransformerProcessorUpperCaseStringPropertiesOutput {
	return i.ToTransformerProcessorUpperCaseStringPropertiesOutputWithContext(context.Background())
}

func (i TransformerProcessorUpperCaseStringPropertiesArgs) ToTransformerProcessorUpperCaseStringPropertiesOutputWithContext(ctx context.Context) TransformerProcessorUpperCaseStringPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerProcessorUpperCaseStringPropertiesOutput)
}

func (i TransformerProcessorUpperCaseStringPropertiesArgs) ToTransformerProcessorUpperCaseStringPropertiesPtrOutput() TransformerProcessorUpperCaseStringPropertiesPtrOutput {
	return i.ToTransformerProcessorUpperCaseStringPropertiesPtrOutputWithContext(context.Background())
}

func (i TransformerProcessorUpperCaseStringPropertiesArgs) ToTransformerProcessorUpperCaseStringPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorUpperCaseStringPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerProcessorUpperCaseStringPropertiesOutput).ToTransformerProcessorUpperCaseStringPropertiesPtrOutputWithContext(ctx)
}

// TransformerProcessorUpperCaseStringPropertiesPtrInput is an input type that accepts TransformerProcessorUpperCaseStringPropertiesArgs, TransformerProcessorUpperCaseStringPropertiesPtr and TransformerProcessorUpperCaseStringPropertiesPtrOutput values.
// You can construct a concrete instance of `TransformerProcessorUpperCaseStringPropertiesPtrInput` via:
//
//	        TransformerProcessorUpperCaseStringPropertiesArgs{...}
//
//	or:
//
//	        nil
type TransformerProcessorUpperCaseStringPropertiesPtrInput interface {
	pulumi.Input

	ToTransformerProcessorUpperCaseStringPropertiesPtrOutput() TransformerProcessorUpperCaseStringPropertiesPtrOutput
	ToTransformerProcessorUpperCaseStringPropertiesPtrOutputWithContext(context.Context) TransformerProcessorUpperCaseStringPropertiesPtrOutput
}

type transformerProcessorUpperCaseStringPropertiesPtrType TransformerProcessorUpperCaseStringPropertiesArgs

func TransformerProcessorUpperCaseStringPropertiesPtr(v *TransformerProcessorUpperCaseStringPropertiesArgs) TransformerProcessorUpperCaseStringPropertiesPtrInput {
	return (*transformerProcessorUpperCaseStringPropertiesPtrType)(v)
}

func (*transformerProcessorUpperCaseStringPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerProcessorUpperCaseStringProperties)(nil)).Elem()
}

func (i *transformerProcessorUpperCaseStringPropertiesPtrType) ToTransformerProcessorUpperCaseStringPropertiesPtrOutput() TransformerProcessorUpperCaseStringPropertiesPtrOutput {
	return i.ToTransformerProcessorUpperCaseStringPropertiesPtrOutputWithContext(context.Background())
}

func (i *transformerProcessorUpperCaseStringPropertiesPtrType) ToTransformerProcessorUpperCaseStringPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorUpperCaseStringPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerProcessorUpperCaseStringPropertiesPtrOutput)
}

// Use this parameter to include the [upperCaseString](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch-Logs-Transformation-Processors.html#CloudWatch-Logs-Transformation-upperCaseString) processor in your transformer.
type TransformerProcessorUpperCaseStringPropertiesOutput struct{ *pulumi.OutputState }

func (TransformerProcessorUpperCaseStringPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerProcessorUpperCaseStringProperties)(nil)).Elem()
}

func (o TransformerProcessorUpperCaseStringPropertiesOutput) ToTransformerProcessorUpperCaseStringPropertiesOutput() TransformerProcessorUpperCaseStringPropertiesOutput {
	return o
}

func (o TransformerProcessorUpperCaseStringPropertiesOutput) ToTransformerProcessorUpperCaseStringPropertiesOutputWithContext(ctx context.Context) TransformerProcessorUpperCaseStringPropertiesOutput {
	return o
}

func (o TransformerProcessorUpperCaseStringPropertiesOutput) ToTransformerProcessorUpperCaseStringPropertiesPtrOutput() TransformerProcessorUpperCaseStringPropertiesPtrOutput {
	return o.ToTransformerProcessorUpperCaseStringPropertiesPtrOutputWithContext(context.Background())
}

func (o TransformerProcessorUpperCaseStringPropertiesOutput) ToTransformerProcessorUpperCaseStringPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorUpperCaseStringPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformerProcessorUpperCaseStringProperties) *TransformerProcessorUpperCaseStringProperties {
		return &v
	}).(TransformerProcessorUpperCaseStringPropertiesPtrOutput)
}

func (o TransformerProcessorUpperCaseStringPropertiesOutput) WithKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TransformerProcessorUpperCaseStringProperties) []string { return v.WithKeys }).(pulumi.StringArrayOutput)
}

type TransformerProcessorUpperCaseStringPropertiesPtrOutput struct{ *pulumi.OutputState }

func (TransformerProcessorUpperCaseStringPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformerProcessorUpperCaseStringProperties)(nil)).Elem()
}

func (o TransformerProcessorUpperCaseStringPropertiesPtrOutput) ToTransformerProcessorUpperCaseStringPropertiesPtrOutput() TransformerProcessorUpperCaseStringPropertiesPtrOutput {
	return o
}

func (o TransformerProcessorUpperCaseStringPropertiesPtrOutput) ToTransformerProcessorUpperCaseStringPropertiesPtrOutputWithContext(ctx context.Context) TransformerProcessorUpperCaseStringPropertiesPtrOutput {
	return o
}

func (o TransformerProcessorUpperCaseStringPropertiesPtrOutput) Elem() TransformerProcessorUpperCaseStringPropertiesOutput {
	return o.ApplyT(func(v *TransformerProcessorUpperCaseStringProperties) TransformerProcessorUpperCaseStringProperties {
		if v != nil {
			return *v
		}
		var ret TransformerProcessorUpperCaseStringProperties
		return ret
	}).(TransformerProcessorUpperCaseStringPropertiesOutput)
}

func (o TransformerProcessorUpperCaseStringPropertiesPtrOutput) WithKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TransformerProcessorUpperCaseStringProperties) []string {
		if v == nil {
			return nil
		}
		return v.WithKeys
	}).(pulumi.StringArrayOutput)
}

type TransformerRenameKeyEntry struct {
	Key               string `pulumi:"key"`
	OverwriteIfExists *bool  `pulumi:"overwriteIfExists"`
	RenameTo          string `pulumi:"renameTo"`
}

// TransformerRenameKeyEntryInput is an input type that accepts TransformerRenameKeyEntryArgs and TransformerRenameKeyEntryOutput values.
// You can construct a concrete instance of `TransformerRenameKeyEntryInput` via:
//
//	TransformerRenameKeyEntryArgs{...}
type TransformerRenameKeyEntryInput interface {
	pulumi.Input

	ToTransformerRenameKeyEntryOutput() TransformerRenameKeyEntryOutput
	ToTransformerRenameKeyEntryOutputWithContext(context.Context) TransformerRenameKeyEntryOutput
}

type TransformerRenameKeyEntryArgs struct {
	Key               pulumi.StringInput  `pulumi:"key"`
	OverwriteIfExists pulumi.BoolPtrInput `pulumi:"overwriteIfExists"`
	RenameTo          pulumi.StringInput  `pulumi:"renameTo"`
}

func (TransformerRenameKeyEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerRenameKeyEntry)(nil)).Elem()
}

func (i TransformerRenameKeyEntryArgs) ToTransformerRenameKeyEntryOutput() TransformerRenameKeyEntryOutput {
	return i.ToTransformerRenameKeyEntryOutputWithContext(context.Background())
}

func (i TransformerRenameKeyEntryArgs) ToTransformerRenameKeyEntryOutputWithContext(ctx context.Context) TransformerRenameKeyEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerRenameKeyEntryOutput)
}

// TransformerRenameKeyEntryArrayInput is an input type that accepts TransformerRenameKeyEntryArray and TransformerRenameKeyEntryArrayOutput values.
// You can construct a concrete instance of `TransformerRenameKeyEntryArrayInput` via:
//
//	TransformerRenameKeyEntryArray{ TransformerRenameKeyEntryArgs{...} }
type TransformerRenameKeyEntryArrayInput interface {
	pulumi.Input

	ToTransformerRenameKeyEntryArrayOutput() TransformerRenameKeyEntryArrayOutput
	ToTransformerRenameKeyEntryArrayOutputWithContext(context.Context) TransformerRenameKeyEntryArrayOutput
}

type TransformerRenameKeyEntryArray []TransformerRenameKeyEntryInput

func (TransformerRenameKeyEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformerRenameKeyEntry)(nil)).Elem()
}

func (i TransformerRenameKeyEntryArray) ToTransformerRenameKeyEntryArrayOutput() TransformerRenameKeyEntryArrayOutput {
	return i.ToTransformerRenameKeyEntryArrayOutputWithContext(context.Background())
}

func (i TransformerRenameKeyEntryArray) ToTransformerRenameKeyEntryArrayOutputWithContext(ctx context.Context) TransformerRenameKeyEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerRenameKeyEntryArrayOutput)
}

type TransformerRenameKeyEntryOutput struct{ *pulumi.OutputState }

func (TransformerRenameKeyEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerRenameKeyEntry)(nil)).Elem()
}

func (o TransformerRenameKeyEntryOutput) ToTransformerRenameKeyEntryOutput() TransformerRenameKeyEntryOutput {
	return o
}

func (o TransformerRenameKeyEntryOutput) ToTransformerRenameKeyEntryOutputWithContext(ctx context.Context) TransformerRenameKeyEntryOutput {
	return o
}

func (o TransformerRenameKeyEntryOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v TransformerRenameKeyEntry) string { return v.Key }).(pulumi.StringOutput)
}

func (o TransformerRenameKeyEntryOutput) OverwriteIfExists() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TransformerRenameKeyEntry) *bool { return v.OverwriteIfExists }).(pulumi.BoolPtrOutput)
}

func (o TransformerRenameKeyEntryOutput) RenameTo() pulumi.StringOutput {
	return o.ApplyT(func(v TransformerRenameKeyEntry) string { return v.RenameTo }).(pulumi.StringOutput)
}

type TransformerRenameKeyEntryArrayOutput struct{ *pulumi.OutputState }

func (TransformerRenameKeyEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformerRenameKeyEntry)(nil)).Elem()
}

func (o TransformerRenameKeyEntryArrayOutput) ToTransformerRenameKeyEntryArrayOutput() TransformerRenameKeyEntryArrayOutput {
	return o
}

func (o TransformerRenameKeyEntryArrayOutput) ToTransformerRenameKeyEntryArrayOutputWithContext(ctx context.Context) TransformerRenameKeyEntryArrayOutput {
	return o
}

func (o TransformerRenameKeyEntryArrayOutput) Index(i pulumi.IntInput) TransformerRenameKeyEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TransformerRenameKeyEntry {
		return vs[0].([]TransformerRenameKeyEntry)[vs[1].(int)]
	}).(TransformerRenameKeyEntryOutput)
}

type TransformerSplitStringEntry struct {
	Delimiter string `pulumi:"delimiter"`
	Source    string `pulumi:"source"`
}

// TransformerSplitStringEntryInput is an input type that accepts TransformerSplitStringEntryArgs and TransformerSplitStringEntryOutput values.
// You can construct a concrete instance of `TransformerSplitStringEntryInput` via:
//
//	TransformerSplitStringEntryArgs{...}
type TransformerSplitStringEntryInput interface {
	pulumi.Input

	ToTransformerSplitStringEntryOutput() TransformerSplitStringEntryOutput
	ToTransformerSplitStringEntryOutputWithContext(context.Context) TransformerSplitStringEntryOutput
}

type TransformerSplitStringEntryArgs struct {
	Delimiter pulumi.StringInput `pulumi:"delimiter"`
	Source    pulumi.StringInput `pulumi:"source"`
}

func (TransformerSplitStringEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerSplitStringEntry)(nil)).Elem()
}

func (i TransformerSplitStringEntryArgs) ToTransformerSplitStringEntryOutput() TransformerSplitStringEntryOutput {
	return i.ToTransformerSplitStringEntryOutputWithContext(context.Background())
}

func (i TransformerSplitStringEntryArgs) ToTransformerSplitStringEntryOutputWithContext(ctx context.Context) TransformerSplitStringEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerSplitStringEntryOutput)
}

// TransformerSplitStringEntryArrayInput is an input type that accepts TransformerSplitStringEntryArray and TransformerSplitStringEntryArrayOutput values.
// You can construct a concrete instance of `TransformerSplitStringEntryArrayInput` via:
//
//	TransformerSplitStringEntryArray{ TransformerSplitStringEntryArgs{...} }
type TransformerSplitStringEntryArrayInput interface {
	pulumi.Input

	ToTransformerSplitStringEntryArrayOutput() TransformerSplitStringEntryArrayOutput
	ToTransformerSplitStringEntryArrayOutputWithContext(context.Context) TransformerSplitStringEntryArrayOutput
}

type TransformerSplitStringEntryArray []TransformerSplitStringEntryInput

func (TransformerSplitStringEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformerSplitStringEntry)(nil)).Elem()
}

func (i TransformerSplitStringEntryArray) ToTransformerSplitStringEntryArrayOutput() TransformerSplitStringEntryArrayOutput {
	return i.ToTransformerSplitStringEntryArrayOutputWithContext(context.Background())
}

func (i TransformerSplitStringEntryArray) ToTransformerSplitStringEntryArrayOutputWithContext(ctx context.Context) TransformerSplitStringEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerSplitStringEntryArrayOutput)
}

type TransformerSplitStringEntryOutput struct{ *pulumi.OutputState }

func (TransformerSplitStringEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerSplitStringEntry)(nil)).Elem()
}

func (o TransformerSplitStringEntryOutput) ToTransformerSplitStringEntryOutput() TransformerSplitStringEntryOutput {
	return o
}

func (o TransformerSplitStringEntryOutput) ToTransformerSplitStringEntryOutputWithContext(ctx context.Context) TransformerSplitStringEntryOutput {
	return o
}

func (o TransformerSplitStringEntryOutput) Delimiter() pulumi.StringOutput {
	return o.ApplyT(func(v TransformerSplitStringEntry) string { return v.Delimiter }).(pulumi.StringOutput)
}

func (o TransformerSplitStringEntryOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v TransformerSplitStringEntry) string { return v.Source }).(pulumi.StringOutput)
}

type TransformerSplitStringEntryArrayOutput struct{ *pulumi.OutputState }

func (TransformerSplitStringEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformerSplitStringEntry)(nil)).Elem()
}

func (o TransformerSplitStringEntryArrayOutput) ToTransformerSplitStringEntryArrayOutput() TransformerSplitStringEntryArrayOutput {
	return o
}

func (o TransformerSplitStringEntryArrayOutput) ToTransformerSplitStringEntryArrayOutputWithContext(ctx context.Context) TransformerSplitStringEntryArrayOutput {
	return o
}

func (o TransformerSplitStringEntryArrayOutput) Index(i pulumi.IntInput) TransformerSplitStringEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TransformerSplitStringEntry {
		return vs[0].([]TransformerSplitStringEntry)[vs[1].(int)]
	}).(TransformerSplitStringEntryOutput)
}

type TransformerSubstituteStringEntry struct {
	From   string `pulumi:"from"`
	Source string `pulumi:"source"`
	To     string `pulumi:"to"`
}

// TransformerSubstituteStringEntryInput is an input type that accepts TransformerSubstituteStringEntryArgs and TransformerSubstituteStringEntryOutput values.
// You can construct a concrete instance of `TransformerSubstituteStringEntryInput` via:
//
//	TransformerSubstituteStringEntryArgs{...}
type TransformerSubstituteStringEntryInput interface {
	pulumi.Input

	ToTransformerSubstituteStringEntryOutput() TransformerSubstituteStringEntryOutput
	ToTransformerSubstituteStringEntryOutputWithContext(context.Context) TransformerSubstituteStringEntryOutput
}

type TransformerSubstituteStringEntryArgs struct {
	From   pulumi.StringInput `pulumi:"from"`
	Source pulumi.StringInput `pulumi:"source"`
	To     pulumi.StringInput `pulumi:"to"`
}

func (TransformerSubstituteStringEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerSubstituteStringEntry)(nil)).Elem()
}

func (i TransformerSubstituteStringEntryArgs) ToTransformerSubstituteStringEntryOutput() TransformerSubstituteStringEntryOutput {
	return i.ToTransformerSubstituteStringEntryOutputWithContext(context.Background())
}

func (i TransformerSubstituteStringEntryArgs) ToTransformerSubstituteStringEntryOutputWithContext(ctx context.Context) TransformerSubstituteStringEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerSubstituteStringEntryOutput)
}

// TransformerSubstituteStringEntryArrayInput is an input type that accepts TransformerSubstituteStringEntryArray and TransformerSubstituteStringEntryArrayOutput values.
// You can construct a concrete instance of `TransformerSubstituteStringEntryArrayInput` via:
//
//	TransformerSubstituteStringEntryArray{ TransformerSubstituteStringEntryArgs{...} }
type TransformerSubstituteStringEntryArrayInput interface {
	pulumi.Input

	ToTransformerSubstituteStringEntryArrayOutput() TransformerSubstituteStringEntryArrayOutput
	ToTransformerSubstituteStringEntryArrayOutputWithContext(context.Context) TransformerSubstituteStringEntryArrayOutput
}

type TransformerSubstituteStringEntryArray []TransformerSubstituteStringEntryInput

func (TransformerSubstituteStringEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformerSubstituteStringEntry)(nil)).Elem()
}

func (i TransformerSubstituteStringEntryArray) ToTransformerSubstituteStringEntryArrayOutput() TransformerSubstituteStringEntryArrayOutput {
	return i.ToTransformerSubstituteStringEntryArrayOutputWithContext(context.Background())
}

func (i TransformerSubstituteStringEntryArray) ToTransformerSubstituteStringEntryArrayOutputWithContext(ctx context.Context) TransformerSubstituteStringEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerSubstituteStringEntryArrayOutput)
}

type TransformerSubstituteStringEntryOutput struct{ *pulumi.OutputState }

func (TransformerSubstituteStringEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerSubstituteStringEntry)(nil)).Elem()
}

func (o TransformerSubstituteStringEntryOutput) ToTransformerSubstituteStringEntryOutput() TransformerSubstituteStringEntryOutput {
	return o
}

func (o TransformerSubstituteStringEntryOutput) ToTransformerSubstituteStringEntryOutputWithContext(ctx context.Context) TransformerSubstituteStringEntryOutput {
	return o
}

func (o TransformerSubstituteStringEntryOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v TransformerSubstituteStringEntry) string { return v.From }).(pulumi.StringOutput)
}

func (o TransformerSubstituteStringEntryOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v TransformerSubstituteStringEntry) string { return v.Source }).(pulumi.StringOutput)
}

func (o TransformerSubstituteStringEntryOutput) To() pulumi.StringOutput {
	return o.ApplyT(func(v TransformerSubstituteStringEntry) string { return v.To }).(pulumi.StringOutput)
}

type TransformerSubstituteStringEntryArrayOutput struct{ *pulumi.OutputState }

func (TransformerSubstituteStringEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformerSubstituteStringEntry)(nil)).Elem()
}

func (o TransformerSubstituteStringEntryArrayOutput) ToTransformerSubstituteStringEntryArrayOutput() TransformerSubstituteStringEntryArrayOutput {
	return o
}

func (o TransformerSubstituteStringEntryArrayOutput) ToTransformerSubstituteStringEntryArrayOutputWithContext(ctx context.Context) TransformerSubstituteStringEntryArrayOutput {
	return o
}

func (o TransformerSubstituteStringEntryArrayOutput) Index(i pulumi.IntInput) TransformerSubstituteStringEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TransformerSubstituteStringEntry {
		return vs[0].([]TransformerSubstituteStringEntry)[vs[1].(int)]
	}).(TransformerSubstituteStringEntryOutput)
}

type TransformerTypeConverterEntry struct {
	Key  string                            `pulumi:"key"`
	Type TransformerTypeConverterEntryType `pulumi:"type"`
}

// TransformerTypeConverterEntryInput is an input type that accepts TransformerTypeConverterEntryArgs and TransformerTypeConverterEntryOutput values.
// You can construct a concrete instance of `TransformerTypeConverterEntryInput` via:
//
//	TransformerTypeConverterEntryArgs{...}
type TransformerTypeConverterEntryInput interface {
	pulumi.Input

	ToTransformerTypeConverterEntryOutput() TransformerTypeConverterEntryOutput
	ToTransformerTypeConverterEntryOutputWithContext(context.Context) TransformerTypeConverterEntryOutput
}

type TransformerTypeConverterEntryArgs struct {
	Key  pulumi.StringInput                     `pulumi:"key"`
	Type TransformerTypeConverterEntryTypeInput `pulumi:"type"`
}

func (TransformerTypeConverterEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerTypeConverterEntry)(nil)).Elem()
}

func (i TransformerTypeConverterEntryArgs) ToTransformerTypeConverterEntryOutput() TransformerTypeConverterEntryOutput {
	return i.ToTransformerTypeConverterEntryOutputWithContext(context.Background())
}

func (i TransformerTypeConverterEntryArgs) ToTransformerTypeConverterEntryOutputWithContext(ctx context.Context) TransformerTypeConverterEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerTypeConverterEntryOutput)
}

// TransformerTypeConverterEntryArrayInput is an input type that accepts TransformerTypeConverterEntryArray and TransformerTypeConverterEntryArrayOutput values.
// You can construct a concrete instance of `TransformerTypeConverterEntryArrayInput` via:
//
//	TransformerTypeConverterEntryArray{ TransformerTypeConverterEntryArgs{...} }
type TransformerTypeConverterEntryArrayInput interface {
	pulumi.Input

	ToTransformerTypeConverterEntryArrayOutput() TransformerTypeConverterEntryArrayOutput
	ToTransformerTypeConverterEntryArrayOutputWithContext(context.Context) TransformerTypeConverterEntryArrayOutput
}

type TransformerTypeConverterEntryArray []TransformerTypeConverterEntryInput

func (TransformerTypeConverterEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformerTypeConverterEntry)(nil)).Elem()
}

func (i TransformerTypeConverterEntryArray) ToTransformerTypeConverterEntryArrayOutput() TransformerTypeConverterEntryArrayOutput {
	return i.ToTransformerTypeConverterEntryArrayOutputWithContext(context.Background())
}

func (i TransformerTypeConverterEntryArray) ToTransformerTypeConverterEntryArrayOutputWithContext(ctx context.Context) TransformerTypeConverterEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerTypeConverterEntryArrayOutput)
}

type TransformerTypeConverterEntryOutput struct{ *pulumi.OutputState }

func (TransformerTypeConverterEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformerTypeConverterEntry)(nil)).Elem()
}

func (o TransformerTypeConverterEntryOutput) ToTransformerTypeConverterEntryOutput() TransformerTypeConverterEntryOutput {
	return o
}

func (o TransformerTypeConverterEntryOutput) ToTransformerTypeConverterEntryOutputWithContext(ctx context.Context) TransformerTypeConverterEntryOutput {
	return o
}

func (o TransformerTypeConverterEntryOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v TransformerTypeConverterEntry) string { return v.Key }).(pulumi.StringOutput)
}

func (o TransformerTypeConverterEntryOutput) Type() TransformerTypeConverterEntryTypeOutput {
	return o.ApplyT(func(v TransformerTypeConverterEntry) TransformerTypeConverterEntryType { return v.Type }).(TransformerTypeConverterEntryTypeOutput)
}

type TransformerTypeConverterEntryArrayOutput struct{ *pulumi.OutputState }

func (TransformerTypeConverterEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformerTypeConverterEntry)(nil)).Elem()
}

func (o TransformerTypeConverterEntryArrayOutput) ToTransformerTypeConverterEntryArrayOutput() TransformerTypeConverterEntryArrayOutput {
	return o
}

func (o TransformerTypeConverterEntryArrayOutput) ToTransformerTypeConverterEntryArrayOutputWithContext(ctx context.Context) TransformerTypeConverterEntryArrayOutput {
	return o
}

func (o TransformerTypeConverterEntryArrayOutput) Index(i pulumi.IntInput) TransformerTypeConverterEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TransformerTypeConverterEntry {
		return vs[0].([]TransformerTypeConverterEntry)[vs[1].(int)]
	}).(TransformerTypeConverterEntryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeliveryDestinationDestinationPolicyInput)(nil)).Elem(), DeliveryDestinationDestinationPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeliveryDestinationDestinationPolicyArrayInput)(nil)).Elem(), DeliveryDestinationDestinationPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationOpenSearchResourceConfigInput)(nil)).Elem(), IntegrationOpenSearchResourceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationOpenSearchResourceConfigPtrInput)(nil)).Elem(), IntegrationOpenSearchResourceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricFilterDimensionInput)(nil)).Elem(), MetricFilterDimensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricFilterDimensionArrayInput)(nil)).Elem(), MetricFilterDimensionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricFilterMetricTransformationInput)(nil)).Elem(), MetricFilterMetricTransformationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricFilterMetricTransformationArrayInput)(nil)).Elem(), MetricFilterMetricTransformationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceConfigPropertiesInput)(nil)).Elem(), ResourceConfigPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerAddKeyEntryInput)(nil)).Elem(), TransformerAddKeyEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerAddKeyEntryArrayInput)(nil)).Elem(), TransformerAddKeyEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerCopyValueEntryInput)(nil)).Elem(), TransformerCopyValueEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerCopyValueEntryArrayInput)(nil)).Elem(), TransformerCopyValueEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerMoveKeyEntryInput)(nil)).Elem(), TransformerMoveKeyEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerMoveKeyEntryArrayInput)(nil)).Elem(), TransformerMoveKeyEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerParseCloudfrontInput)(nil)).Elem(), TransformerParseCloudfrontArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerParseCloudfrontPtrInput)(nil)).Elem(), TransformerParseCloudfrontArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerParsePostgresInput)(nil)).Elem(), TransformerParsePostgresArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerParsePostgresPtrInput)(nil)).Elem(), TransformerParsePostgresArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerParseRoute53Input)(nil)).Elem(), TransformerParseRoute53Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerParseRoute53PtrInput)(nil)).Elem(), TransformerParseRoute53Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerParseVpcInput)(nil)).Elem(), TransformerParseVpcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerParseVpcPtrInput)(nil)).Elem(), TransformerParseVpcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerParseWafInput)(nil)).Elem(), TransformerParseWafArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerParseWafPtrInput)(nil)).Elem(), TransformerParseWafArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerProcessorInput)(nil)).Elem(), TransformerProcessorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerProcessorArrayInput)(nil)).Elem(), TransformerProcessorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerProcessorAddKeysPropertiesInput)(nil)).Elem(), TransformerProcessorAddKeysPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerProcessorAddKeysPropertiesPtrInput)(nil)).Elem(), TransformerProcessorAddKeysPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerProcessorCopyValuePropertiesInput)(nil)).Elem(), TransformerProcessorCopyValuePropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerProcessorCopyValuePropertiesPtrInput)(nil)).Elem(), TransformerProcessorCopyValuePropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerProcessorCsvPropertiesInput)(nil)).Elem(), TransformerProcessorCsvPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerProcessorCsvPropertiesPtrInput)(nil)).Elem(), TransformerProcessorCsvPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerProcessorDateTimeConverterPropertiesInput)(nil)).Elem(), TransformerProcessorDateTimeConverterPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerProcessorDateTimeConverterPropertiesPtrInput)(nil)).Elem(), TransformerProcessorDateTimeConverterPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerProcessorDeleteKeysPropertiesInput)(nil)).Elem(), TransformerProcessorDeleteKeysPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerProcessorDeleteKeysPropertiesPtrInput)(nil)).Elem(), TransformerProcessorDeleteKeysPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerProcessorGrokPropertiesInput)(nil)).Elem(), TransformerProcessorGrokPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerProcessorGrokPropertiesPtrInput)(nil)).Elem(), TransformerProcessorGrokPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerProcessorListToMapPropertiesInput)(nil)).Elem(), TransformerProcessorListToMapPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerProcessorListToMapPropertiesPtrInput)(nil)).Elem(), TransformerProcessorListToMapPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerProcessorLowerCaseStringPropertiesInput)(nil)).Elem(), TransformerProcessorLowerCaseStringPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerProcessorLowerCaseStringPropertiesPtrInput)(nil)).Elem(), TransformerProcessorLowerCaseStringPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerProcessorMoveKeysPropertiesInput)(nil)).Elem(), TransformerProcessorMoveKeysPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerProcessorMoveKeysPropertiesPtrInput)(nil)).Elem(), TransformerProcessorMoveKeysPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerProcessorParseJsonPropertiesInput)(nil)).Elem(), TransformerProcessorParseJsonPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerProcessorParseJsonPropertiesPtrInput)(nil)).Elem(), TransformerProcessorParseJsonPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerProcessorParseKeyValuePropertiesInput)(nil)).Elem(), TransformerProcessorParseKeyValuePropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerProcessorParseKeyValuePropertiesPtrInput)(nil)).Elem(), TransformerProcessorParseKeyValuePropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerProcessorRenameKeysPropertiesInput)(nil)).Elem(), TransformerProcessorRenameKeysPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerProcessorRenameKeysPropertiesPtrInput)(nil)).Elem(), TransformerProcessorRenameKeysPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerProcessorSplitStringPropertiesInput)(nil)).Elem(), TransformerProcessorSplitStringPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerProcessorSplitStringPropertiesPtrInput)(nil)).Elem(), TransformerProcessorSplitStringPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerProcessorSubstituteStringPropertiesInput)(nil)).Elem(), TransformerProcessorSubstituteStringPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerProcessorSubstituteStringPropertiesPtrInput)(nil)).Elem(), TransformerProcessorSubstituteStringPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerProcessorTrimStringPropertiesInput)(nil)).Elem(), TransformerProcessorTrimStringPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerProcessorTrimStringPropertiesPtrInput)(nil)).Elem(), TransformerProcessorTrimStringPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerProcessorTypeConverterPropertiesInput)(nil)).Elem(), TransformerProcessorTypeConverterPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerProcessorTypeConverterPropertiesPtrInput)(nil)).Elem(), TransformerProcessorTypeConverterPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerProcessorUpperCaseStringPropertiesInput)(nil)).Elem(), TransformerProcessorUpperCaseStringPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerProcessorUpperCaseStringPropertiesPtrInput)(nil)).Elem(), TransformerProcessorUpperCaseStringPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerRenameKeyEntryInput)(nil)).Elem(), TransformerRenameKeyEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerRenameKeyEntryArrayInput)(nil)).Elem(), TransformerRenameKeyEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerSplitStringEntryInput)(nil)).Elem(), TransformerSplitStringEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerSplitStringEntryArrayInput)(nil)).Elem(), TransformerSplitStringEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerSubstituteStringEntryInput)(nil)).Elem(), TransformerSubstituteStringEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerSubstituteStringEntryArrayInput)(nil)).Elem(), TransformerSubstituteStringEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerTypeConverterEntryInput)(nil)).Elem(), TransformerTypeConverterEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerTypeConverterEntryArrayInput)(nil)).Elem(), TransformerTypeConverterEntryArray{})
	pulumi.RegisterOutputType(DeliveryDestinationDestinationPolicyOutput{})
	pulumi.RegisterOutputType(DeliveryDestinationDestinationPolicyArrayOutput{})
	pulumi.RegisterOutputType(IntegrationOpenSearchResourceConfigOutput{})
	pulumi.RegisterOutputType(IntegrationOpenSearchResourceConfigPtrOutput{})
	pulumi.RegisterOutputType(MetricFilterDimensionOutput{})
	pulumi.RegisterOutputType(MetricFilterDimensionArrayOutput{})
	pulumi.RegisterOutputType(MetricFilterMetricTransformationOutput{})
	pulumi.RegisterOutputType(MetricFilterMetricTransformationArrayOutput{})
	pulumi.RegisterOutputType(ResourceConfigPropertiesOutput{})
	pulumi.RegisterOutputType(TransformerAddKeyEntryOutput{})
	pulumi.RegisterOutputType(TransformerAddKeyEntryArrayOutput{})
	pulumi.RegisterOutputType(TransformerCopyValueEntryOutput{})
	pulumi.RegisterOutputType(TransformerCopyValueEntryArrayOutput{})
	pulumi.RegisterOutputType(TransformerMoveKeyEntryOutput{})
	pulumi.RegisterOutputType(TransformerMoveKeyEntryArrayOutput{})
	pulumi.RegisterOutputType(TransformerParseCloudfrontOutput{})
	pulumi.RegisterOutputType(TransformerParseCloudfrontPtrOutput{})
	pulumi.RegisterOutputType(TransformerParsePostgresOutput{})
	pulumi.RegisterOutputType(TransformerParsePostgresPtrOutput{})
	pulumi.RegisterOutputType(TransformerParseRoute53Output{})
	pulumi.RegisterOutputType(TransformerParseRoute53PtrOutput{})
	pulumi.RegisterOutputType(TransformerParseVpcOutput{})
	pulumi.RegisterOutputType(TransformerParseVpcPtrOutput{})
	pulumi.RegisterOutputType(TransformerParseWafOutput{})
	pulumi.RegisterOutputType(TransformerParseWafPtrOutput{})
	pulumi.RegisterOutputType(TransformerProcessorOutput{})
	pulumi.RegisterOutputType(TransformerProcessorArrayOutput{})
	pulumi.RegisterOutputType(TransformerProcessorAddKeysPropertiesOutput{})
	pulumi.RegisterOutputType(TransformerProcessorAddKeysPropertiesPtrOutput{})
	pulumi.RegisterOutputType(TransformerProcessorCopyValuePropertiesOutput{})
	pulumi.RegisterOutputType(TransformerProcessorCopyValuePropertiesPtrOutput{})
	pulumi.RegisterOutputType(TransformerProcessorCsvPropertiesOutput{})
	pulumi.RegisterOutputType(TransformerProcessorCsvPropertiesPtrOutput{})
	pulumi.RegisterOutputType(TransformerProcessorDateTimeConverterPropertiesOutput{})
	pulumi.RegisterOutputType(TransformerProcessorDateTimeConverterPropertiesPtrOutput{})
	pulumi.RegisterOutputType(TransformerProcessorDeleteKeysPropertiesOutput{})
	pulumi.RegisterOutputType(TransformerProcessorDeleteKeysPropertiesPtrOutput{})
	pulumi.RegisterOutputType(TransformerProcessorGrokPropertiesOutput{})
	pulumi.RegisterOutputType(TransformerProcessorGrokPropertiesPtrOutput{})
	pulumi.RegisterOutputType(TransformerProcessorListToMapPropertiesOutput{})
	pulumi.RegisterOutputType(TransformerProcessorListToMapPropertiesPtrOutput{})
	pulumi.RegisterOutputType(TransformerProcessorLowerCaseStringPropertiesOutput{})
	pulumi.RegisterOutputType(TransformerProcessorLowerCaseStringPropertiesPtrOutput{})
	pulumi.RegisterOutputType(TransformerProcessorMoveKeysPropertiesOutput{})
	pulumi.RegisterOutputType(TransformerProcessorMoveKeysPropertiesPtrOutput{})
	pulumi.RegisterOutputType(TransformerProcessorParseJsonPropertiesOutput{})
	pulumi.RegisterOutputType(TransformerProcessorParseJsonPropertiesPtrOutput{})
	pulumi.RegisterOutputType(TransformerProcessorParseKeyValuePropertiesOutput{})
	pulumi.RegisterOutputType(TransformerProcessorParseKeyValuePropertiesPtrOutput{})
	pulumi.RegisterOutputType(TransformerProcessorRenameKeysPropertiesOutput{})
	pulumi.RegisterOutputType(TransformerProcessorRenameKeysPropertiesPtrOutput{})
	pulumi.RegisterOutputType(TransformerProcessorSplitStringPropertiesOutput{})
	pulumi.RegisterOutputType(TransformerProcessorSplitStringPropertiesPtrOutput{})
	pulumi.RegisterOutputType(TransformerProcessorSubstituteStringPropertiesOutput{})
	pulumi.RegisterOutputType(TransformerProcessorSubstituteStringPropertiesPtrOutput{})
	pulumi.RegisterOutputType(TransformerProcessorTrimStringPropertiesOutput{})
	pulumi.RegisterOutputType(TransformerProcessorTrimStringPropertiesPtrOutput{})
	pulumi.RegisterOutputType(TransformerProcessorTypeConverterPropertiesOutput{})
	pulumi.RegisterOutputType(TransformerProcessorTypeConverterPropertiesPtrOutput{})
	pulumi.RegisterOutputType(TransformerProcessorUpperCaseStringPropertiesOutput{})
	pulumi.RegisterOutputType(TransformerProcessorUpperCaseStringPropertiesPtrOutput{})
	pulumi.RegisterOutputType(TransformerRenameKeyEntryOutput{})
	pulumi.RegisterOutputType(TransformerRenameKeyEntryArrayOutput{})
	pulumi.RegisterOutputType(TransformerSplitStringEntryOutput{})
	pulumi.RegisterOutputType(TransformerSplitStringEntryArrayOutput{})
	pulumi.RegisterOutputType(TransformerSubstituteStringEntryOutput{})
	pulumi.RegisterOutputType(TransformerSubstituteStringEntryArrayOutput{})
	pulumi.RegisterOutputType(TransformerTypeConverterEntryOutput{})
	pulumi.RegisterOutputType(TransformerTypeConverterEntryArrayOutput{})
}
