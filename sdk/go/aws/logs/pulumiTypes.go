// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package logs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A key-value pair to associate with a resource.
type LogGroupTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., :, /, =, +, - and @.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., :, /, =, +, - and @.
	Value string `pulumi:"value"`
}

// LogGroupTagInput is an input type that accepts LogGroupTagArgs and LogGroupTagOutput values.
// You can construct a concrete instance of `LogGroupTagInput` via:
//
//	LogGroupTagArgs{...}
type LogGroupTagInput interface {
	pulumi.Input

	ToLogGroupTagOutput() LogGroupTagOutput
	ToLogGroupTagOutputWithContext(context.Context) LogGroupTagOutput
}

// A key-value pair to associate with a resource.
type LogGroupTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., :, /, =, +, - and @.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., :, /, =, +, - and @.
	Value pulumi.StringInput `pulumi:"value"`
}

func (LogGroupTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogGroupTag)(nil)).Elem()
}

func (i LogGroupTagArgs) ToLogGroupTagOutput() LogGroupTagOutput {
	return i.ToLogGroupTagOutputWithContext(context.Background())
}

func (i LogGroupTagArgs) ToLogGroupTagOutputWithContext(ctx context.Context) LogGroupTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogGroupTagOutput)
}

// LogGroupTagArrayInput is an input type that accepts LogGroupTagArray and LogGroupTagArrayOutput values.
// You can construct a concrete instance of `LogGroupTagArrayInput` via:
//
//	LogGroupTagArray{ LogGroupTagArgs{...} }
type LogGroupTagArrayInput interface {
	pulumi.Input

	ToLogGroupTagArrayOutput() LogGroupTagArrayOutput
	ToLogGroupTagArrayOutputWithContext(context.Context) LogGroupTagArrayOutput
}

type LogGroupTagArray []LogGroupTagInput

func (LogGroupTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogGroupTag)(nil)).Elem()
}

func (i LogGroupTagArray) ToLogGroupTagArrayOutput() LogGroupTagArrayOutput {
	return i.ToLogGroupTagArrayOutputWithContext(context.Background())
}

func (i LogGroupTagArray) ToLogGroupTagArrayOutputWithContext(ctx context.Context) LogGroupTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogGroupTagArrayOutput)
}

// A key-value pair to associate with a resource.
type LogGroupTagOutput struct{ *pulumi.OutputState }

func (LogGroupTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogGroupTag)(nil)).Elem()
}

func (o LogGroupTagOutput) ToLogGroupTagOutput() LogGroupTagOutput {
	return o
}

func (o LogGroupTagOutput) ToLogGroupTagOutputWithContext(ctx context.Context) LogGroupTagOutput {
	return o
}

// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., :, /, =, +, - and @.
func (o LogGroupTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v LogGroupTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., :, /, =, +, - and @.
func (o LogGroupTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v LogGroupTag) string { return v.Value }).(pulumi.StringOutput)
}

type LogGroupTagArrayOutput struct{ *pulumi.OutputState }

func (LogGroupTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogGroupTag)(nil)).Elem()
}

func (o LogGroupTagArrayOutput) ToLogGroupTagArrayOutput() LogGroupTagArrayOutput {
	return o
}

func (o LogGroupTagArrayOutput) ToLogGroupTagArrayOutputWithContext(ctx context.Context) LogGroupTagArrayOutput {
	return o
}

func (o LogGroupTagArrayOutput) Index(i pulumi.IntInput) LogGroupTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LogGroupTag {
		return vs[0].([]LogGroupTag)[vs[1].(int)]
	}).(LogGroupTagOutput)
}

type MetricFilterDimension struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// MetricFilterDimensionInput is an input type that accepts MetricFilterDimensionArgs and MetricFilterDimensionOutput values.
// You can construct a concrete instance of `MetricFilterDimensionInput` via:
//
//	MetricFilterDimensionArgs{...}
type MetricFilterDimensionInput interface {
	pulumi.Input

	ToMetricFilterDimensionOutput() MetricFilterDimensionOutput
	ToMetricFilterDimensionOutputWithContext(context.Context) MetricFilterDimensionOutput
}

type MetricFilterDimensionArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (MetricFilterDimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricFilterDimension)(nil)).Elem()
}

func (i MetricFilterDimensionArgs) ToMetricFilterDimensionOutput() MetricFilterDimensionOutput {
	return i.ToMetricFilterDimensionOutputWithContext(context.Background())
}

func (i MetricFilterDimensionArgs) ToMetricFilterDimensionOutputWithContext(ctx context.Context) MetricFilterDimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricFilterDimensionOutput)
}

// MetricFilterDimensionArrayInput is an input type that accepts MetricFilterDimensionArray and MetricFilterDimensionArrayOutput values.
// You can construct a concrete instance of `MetricFilterDimensionArrayInput` via:
//
//	MetricFilterDimensionArray{ MetricFilterDimensionArgs{...} }
type MetricFilterDimensionArrayInput interface {
	pulumi.Input

	ToMetricFilterDimensionArrayOutput() MetricFilterDimensionArrayOutput
	ToMetricFilterDimensionArrayOutputWithContext(context.Context) MetricFilterDimensionArrayOutput
}

type MetricFilterDimensionArray []MetricFilterDimensionInput

func (MetricFilterDimensionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricFilterDimension)(nil)).Elem()
}

func (i MetricFilterDimensionArray) ToMetricFilterDimensionArrayOutput() MetricFilterDimensionArrayOutput {
	return i.ToMetricFilterDimensionArrayOutputWithContext(context.Background())
}

func (i MetricFilterDimensionArray) ToMetricFilterDimensionArrayOutputWithContext(ctx context.Context) MetricFilterDimensionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricFilterDimensionArrayOutput)
}

type MetricFilterDimensionOutput struct{ *pulumi.OutputState }

func (MetricFilterDimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricFilterDimension)(nil)).Elem()
}

func (o MetricFilterDimensionOutput) ToMetricFilterDimensionOutput() MetricFilterDimensionOutput {
	return o
}

func (o MetricFilterDimensionOutput) ToMetricFilterDimensionOutputWithContext(ctx context.Context) MetricFilterDimensionOutput {
	return o
}

func (o MetricFilterDimensionOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v MetricFilterDimension) string { return v.Key }).(pulumi.StringOutput)
}

func (o MetricFilterDimensionOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v MetricFilterDimension) string { return v.Value }).(pulumi.StringOutput)
}

type MetricFilterDimensionArrayOutput struct{ *pulumi.OutputState }

func (MetricFilterDimensionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricFilterDimension)(nil)).Elem()
}

func (o MetricFilterDimensionArrayOutput) ToMetricFilterDimensionArrayOutput() MetricFilterDimensionArrayOutput {
	return o
}

func (o MetricFilterDimensionArrayOutput) ToMetricFilterDimensionArrayOutputWithContext(ctx context.Context) MetricFilterDimensionArrayOutput {
	return o
}

func (o MetricFilterDimensionArrayOutput) Index(i pulumi.IntInput) MetricFilterDimensionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricFilterDimension {
		return vs[0].([]MetricFilterDimension)[vs[1].(int)]
	}).(MetricFilterDimensionOutput)
}

type MetricFilterMetricTransformation struct {
	DefaultValue    *float64                `pulumi:"defaultValue"`
	Dimensions      []MetricFilterDimension `pulumi:"dimensions"`
	MetricName      string                  `pulumi:"metricName"`
	MetricNamespace string                  `pulumi:"metricNamespace"`
	MetricValue     string                  `pulumi:"metricValue"`
	Unit            *string                 `pulumi:"unit"`
}

// MetricFilterMetricTransformationInput is an input type that accepts MetricFilterMetricTransformationArgs and MetricFilterMetricTransformationOutput values.
// You can construct a concrete instance of `MetricFilterMetricTransformationInput` via:
//
//	MetricFilterMetricTransformationArgs{...}
type MetricFilterMetricTransformationInput interface {
	pulumi.Input

	ToMetricFilterMetricTransformationOutput() MetricFilterMetricTransformationOutput
	ToMetricFilterMetricTransformationOutputWithContext(context.Context) MetricFilterMetricTransformationOutput
}

type MetricFilterMetricTransformationArgs struct {
	DefaultValue    pulumi.Float64PtrInput          `pulumi:"defaultValue"`
	Dimensions      MetricFilterDimensionArrayInput `pulumi:"dimensions"`
	MetricName      pulumi.StringInput              `pulumi:"metricName"`
	MetricNamespace pulumi.StringInput              `pulumi:"metricNamespace"`
	MetricValue     pulumi.StringInput              `pulumi:"metricValue"`
	Unit            pulumi.StringPtrInput           `pulumi:"unit"`
}

func (MetricFilterMetricTransformationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricFilterMetricTransformation)(nil)).Elem()
}

func (i MetricFilterMetricTransformationArgs) ToMetricFilterMetricTransformationOutput() MetricFilterMetricTransformationOutput {
	return i.ToMetricFilterMetricTransformationOutputWithContext(context.Background())
}

func (i MetricFilterMetricTransformationArgs) ToMetricFilterMetricTransformationOutputWithContext(ctx context.Context) MetricFilterMetricTransformationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricFilterMetricTransformationOutput)
}

// MetricFilterMetricTransformationArrayInput is an input type that accepts MetricFilterMetricTransformationArray and MetricFilterMetricTransformationArrayOutput values.
// You can construct a concrete instance of `MetricFilterMetricTransformationArrayInput` via:
//
//	MetricFilterMetricTransformationArray{ MetricFilterMetricTransformationArgs{...} }
type MetricFilterMetricTransformationArrayInput interface {
	pulumi.Input

	ToMetricFilterMetricTransformationArrayOutput() MetricFilterMetricTransformationArrayOutput
	ToMetricFilterMetricTransformationArrayOutputWithContext(context.Context) MetricFilterMetricTransformationArrayOutput
}

type MetricFilterMetricTransformationArray []MetricFilterMetricTransformationInput

func (MetricFilterMetricTransformationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricFilterMetricTransformation)(nil)).Elem()
}

func (i MetricFilterMetricTransformationArray) ToMetricFilterMetricTransformationArrayOutput() MetricFilterMetricTransformationArrayOutput {
	return i.ToMetricFilterMetricTransformationArrayOutputWithContext(context.Background())
}

func (i MetricFilterMetricTransformationArray) ToMetricFilterMetricTransformationArrayOutputWithContext(ctx context.Context) MetricFilterMetricTransformationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricFilterMetricTransformationArrayOutput)
}

type MetricFilterMetricTransformationOutput struct{ *pulumi.OutputState }

func (MetricFilterMetricTransformationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricFilterMetricTransformation)(nil)).Elem()
}

func (o MetricFilterMetricTransformationOutput) ToMetricFilterMetricTransformationOutput() MetricFilterMetricTransformationOutput {
	return o
}

func (o MetricFilterMetricTransformationOutput) ToMetricFilterMetricTransformationOutputWithContext(ctx context.Context) MetricFilterMetricTransformationOutput {
	return o
}

func (o MetricFilterMetricTransformationOutput) DefaultValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MetricFilterMetricTransformation) *float64 { return v.DefaultValue }).(pulumi.Float64PtrOutput)
}

func (o MetricFilterMetricTransformationOutput) Dimensions() MetricFilterDimensionArrayOutput {
	return o.ApplyT(func(v MetricFilterMetricTransformation) []MetricFilterDimension { return v.Dimensions }).(MetricFilterDimensionArrayOutput)
}

func (o MetricFilterMetricTransformationOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v MetricFilterMetricTransformation) string { return v.MetricName }).(pulumi.StringOutput)
}

func (o MetricFilterMetricTransformationOutput) MetricNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v MetricFilterMetricTransformation) string { return v.MetricNamespace }).(pulumi.StringOutput)
}

func (o MetricFilterMetricTransformationOutput) MetricValue() pulumi.StringOutput {
	return o.ApplyT(func(v MetricFilterMetricTransformation) string { return v.MetricValue }).(pulumi.StringOutput)
}

func (o MetricFilterMetricTransformationOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricFilterMetricTransformation) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type MetricFilterMetricTransformationArrayOutput struct{ *pulumi.OutputState }

func (MetricFilterMetricTransformationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricFilterMetricTransformation)(nil)).Elem()
}

func (o MetricFilterMetricTransformationArrayOutput) ToMetricFilterMetricTransformationArrayOutput() MetricFilterMetricTransformationArrayOutput {
	return o
}

func (o MetricFilterMetricTransformationArrayOutput) ToMetricFilterMetricTransformationArrayOutputWithContext(ctx context.Context) MetricFilterMetricTransformationArrayOutput {
	return o
}

func (o MetricFilterMetricTransformationArrayOutput) Index(i pulumi.IntInput) MetricFilterMetricTransformationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricFilterMetricTransformation {
		return vs[0].([]MetricFilterMetricTransformation)[vs[1].(int)]
	}).(MetricFilterMetricTransformationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogGroupTagInput)(nil)).Elem(), LogGroupTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogGroupTagArrayInput)(nil)).Elem(), LogGroupTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricFilterDimensionInput)(nil)).Elem(), MetricFilterDimensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricFilterDimensionArrayInput)(nil)).Elem(), MetricFilterDimensionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricFilterMetricTransformationInput)(nil)).Elem(), MetricFilterMetricTransformationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricFilterMetricTransformationArrayInput)(nil)).Elem(), MetricFilterMetricTransformationArray{})
	pulumi.RegisterOutputType(LogGroupTagOutput{})
	pulumi.RegisterOutputType(LogGroupTagArrayOutput{})
	pulumi.RegisterOutputType(MetricFilterDimensionOutput{})
	pulumi.RegisterOutputType(MetricFilterDimensionArrayOutput{})
	pulumi.RegisterOutputType(MetricFilterMetricTransformationOutput{})
	pulumi.RegisterOutputType(MetricFilterMetricTransformationArrayOutput{})
}
