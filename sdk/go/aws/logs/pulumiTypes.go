// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package logs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type DeliveryDestinationDestinationPolicy struct {
	// The name of the delivery destination to assign this policy to
	DeliveryDestinationName string `pulumi:"deliveryDestinationName"`
	// The contents of the policy attached to the delivery destination
	DeliveryDestinationPolicy string `pulumi:"deliveryDestinationPolicy"`
}

// DeliveryDestinationDestinationPolicyInput is an input type that accepts DeliveryDestinationDestinationPolicyArgs and DeliveryDestinationDestinationPolicyOutput values.
// You can construct a concrete instance of `DeliveryDestinationDestinationPolicyInput` via:
//
//	DeliveryDestinationDestinationPolicyArgs{...}
type DeliveryDestinationDestinationPolicyInput interface {
	pulumi.Input

	ToDeliveryDestinationDestinationPolicyOutput() DeliveryDestinationDestinationPolicyOutput
	ToDeliveryDestinationDestinationPolicyOutputWithContext(context.Context) DeliveryDestinationDestinationPolicyOutput
}

type DeliveryDestinationDestinationPolicyArgs struct {
	// The name of the delivery destination to assign this policy to
	DeliveryDestinationName pulumi.StringInput `pulumi:"deliveryDestinationName"`
	// The contents of the policy attached to the delivery destination
	DeliveryDestinationPolicy pulumi.StringInput `pulumi:"deliveryDestinationPolicy"`
}

func (DeliveryDestinationDestinationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeliveryDestinationDestinationPolicy)(nil)).Elem()
}

func (i DeliveryDestinationDestinationPolicyArgs) ToDeliveryDestinationDestinationPolicyOutput() DeliveryDestinationDestinationPolicyOutput {
	return i.ToDeliveryDestinationDestinationPolicyOutputWithContext(context.Background())
}

func (i DeliveryDestinationDestinationPolicyArgs) ToDeliveryDestinationDestinationPolicyOutputWithContext(ctx context.Context) DeliveryDestinationDestinationPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeliveryDestinationDestinationPolicyOutput)
}

// DeliveryDestinationDestinationPolicyArrayInput is an input type that accepts DeliveryDestinationDestinationPolicyArray and DeliveryDestinationDestinationPolicyArrayOutput values.
// You can construct a concrete instance of `DeliveryDestinationDestinationPolicyArrayInput` via:
//
//	DeliveryDestinationDestinationPolicyArray{ DeliveryDestinationDestinationPolicyArgs{...} }
type DeliveryDestinationDestinationPolicyArrayInput interface {
	pulumi.Input

	ToDeliveryDestinationDestinationPolicyArrayOutput() DeliveryDestinationDestinationPolicyArrayOutput
	ToDeliveryDestinationDestinationPolicyArrayOutputWithContext(context.Context) DeliveryDestinationDestinationPolicyArrayOutput
}

type DeliveryDestinationDestinationPolicyArray []DeliveryDestinationDestinationPolicyInput

func (DeliveryDestinationDestinationPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeliveryDestinationDestinationPolicy)(nil)).Elem()
}

func (i DeliveryDestinationDestinationPolicyArray) ToDeliveryDestinationDestinationPolicyArrayOutput() DeliveryDestinationDestinationPolicyArrayOutput {
	return i.ToDeliveryDestinationDestinationPolicyArrayOutputWithContext(context.Background())
}

func (i DeliveryDestinationDestinationPolicyArray) ToDeliveryDestinationDestinationPolicyArrayOutputWithContext(ctx context.Context) DeliveryDestinationDestinationPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeliveryDestinationDestinationPolicyArrayOutput)
}

type DeliveryDestinationDestinationPolicyOutput struct{ *pulumi.OutputState }

func (DeliveryDestinationDestinationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeliveryDestinationDestinationPolicy)(nil)).Elem()
}

func (o DeliveryDestinationDestinationPolicyOutput) ToDeliveryDestinationDestinationPolicyOutput() DeliveryDestinationDestinationPolicyOutput {
	return o
}

func (o DeliveryDestinationDestinationPolicyOutput) ToDeliveryDestinationDestinationPolicyOutputWithContext(ctx context.Context) DeliveryDestinationDestinationPolicyOutput {
	return o
}

// The name of the delivery destination to assign this policy to
func (o DeliveryDestinationDestinationPolicyOutput) DeliveryDestinationName() pulumi.StringOutput {
	return o.ApplyT(func(v DeliveryDestinationDestinationPolicy) string { return v.DeliveryDestinationName }).(pulumi.StringOutput)
}

// The contents of the policy attached to the delivery destination
func (o DeliveryDestinationDestinationPolicyOutput) DeliveryDestinationPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v DeliveryDestinationDestinationPolicy) string { return v.DeliveryDestinationPolicy }).(pulumi.StringOutput)
}

type DeliveryDestinationDestinationPolicyArrayOutput struct{ *pulumi.OutputState }

func (DeliveryDestinationDestinationPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeliveryDestinationDestinationPolicy)(nil)).Elem()
}

func (o DeliveryDestinationDestinationPolicyArrayOutput) ToDeliveryDestinationDestinationPolicyArrayOutput() DeliveryDestinationDestinationPolicyArrayOutput {
	return o
}

func (o DeliveryDestinationDestinationPolicyArrayOutput) ToDeliveryDestinationDestinationPolicyArrayOutputWithContext(ctx context.Context) DeliveryDestinationDestinationPolicyArrayOutput {
	return o
}

func (o DeliveryDestinationDestinationPolicyArrayOutput) Index(i pulumi.IntInput) DeliveryDestinationDestinationPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DeliveryDestinationDestinationPolicy {
		return vs[0].([]DeliveryDestinationDestinationPolicy)[vs[1].(int)]
	}).(DeliveryDestinationDestinationPolicyOutput)
}

// A key-value pair to associate with a resource.
type DeliveryDestinationTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// A key-value pair to associate with a resource.
type DeliverySourceTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode
	Value string `pulumi:"value"`
}

// A key-value pair to associate with a resource.
type DeliveryTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode
	Value string `pulumi:"value"`
}

type IntegrationOpenSearchResourceConfig struct {
	ApplicationArn            *string  `pulumi:"applicationArn"`
	DashboardViewerPrincipals []string `pulumi:"dashboardViewerPrincipals"`
	DataSourceRoleArn         string   `pulumi:"dataSourceRoleArn"`
	KmsKeyArn                 *string  `pulumi:"kmsKeyArn"`
	RetentionDays             *int     `pulumi:"retentionDays"`
}

// IntegrationOpenSearchResourceConfigInput is an input type that accepts IntegrationOpenSearchResourceConfigArgs and IntegrationOpenSearchResourceConfigOutput values.
// You can construct a concrete instance of `IntegrationOpenSearchResourceConfigInput` via:
//
//	IntegrationOpenSearchResourceConfigArgs{...}
type IntegrationOpenSearchResourceConfigInput interface {
	pulumi.Input

	ToIntegrationOpenSearchResourceConfigOutput() IntegrationOpenSearchResourceConfigOutput
	ToIntegrationOpenSearchResourceConfigOutputWithContext(context.Context) IntegrationOpenSearchResourceConfigOutput
}

type IntegrationOpenSearchResourceConfigArgs struct {
	ApplicationArn            pulumi.StringPtrInput   `pulumi:"applicationArn"`
	DashboardViewerPrincipals pulumi.StringArrayInput `pulumi:"dashboardViewerPrincipals"`
	DataSourceRoleArn         pulumi.StringInput      `pulumi:"dataSourceRoleArn"`
	KmsKeyArn                 pulumi.StringPtrInput   `pulumi:"kmsKeyArn"`
	RetentionDays             pulumi.IntPtrInput      `pulumi:"retentionDays"`
}

func (IntegrationOpenSearchResourceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationOpenSearchResourceConfig)(nil)).Elem()
}

func (i IntegrationOpenSearchResourceConfigArgs) ToIntegrationOpenSearchResourceConfigOutput() IntegrationOpenSearchResourceConfigOutput {
	return i.ToIntegrationOpenSearchResourceConfigOutputWithContext(context.Background())
}

func (i IntegrationOpenSearchResourceConfigArgs) ToIntegrationOpenSearchResourceConfigOutputWithContext(ctx context.Context) IntegrationOpenSearchResourceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationOpenSearchResourceConfigOutput)
}

func (i IntegrationOpenSearchResourceConfigArgs) ToIntegrationOpenSearchResourceConfigPtrOutput() IntegrationOpenSearchResourceConfigPtrOutput {
	return i.ToIntegrationOpenSearchResourceConfigPtrOutputWithContext(context.Background())
}

func (i IntegrationOpenSearchResourceConfigArgs) ToIntegrationOpenSearchResourceConfigPtrOutputWithContext(ctx context.Context) IntegrationOpenSearchResourceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationOpenSearchResourceConfigOutput).ToIntegrationOpenSearchResourceConfigPtrOutputWithContext(ctx)
}

// IntegrationOpenSearchResourceConfigPtrInput is an input type that accepts IntegrationOpenSearchResourceConfigArgs, IntegrationOpenSearchResourceConfigPtr and IntegrationOpenSearchResourceConfigPtrOutput values.
// You can construct a concrete instance of `IntegrationOpenSearchResourceConfigPtrInput` via:
//
//	        IntegrationOpenSearchResourceConfigArgs{...}
//
//	or:
//
//	        nil
type IntegrationOpenSearchResourceConfigPtrInput interface {
	pulumi.Input

	ToIntegrationOpenSearchResourceConfigPtrOutput() IntegrationOpenSearchResourceConfigPtrOutput
	ToIntegrationOpenSearchResourceConfigPtrOutputWithContext(context.Context) IntegrationOpenSearchResourceConfigPtrOutput
}

type integrationOpenSearchResourceConfigPtrType IntegrationOpenSearchResourceConfigArgs

func IntegrationOpenSearchResourceConfigPtr(v *IntegrationOpenSearchResourceConfigArgs) IntegrationOpenSearchResourceConfigPtrInput {
	return (*integrationOpenSearchResourceConfigPtrType)(v)
}

func (*integrationOpenSearchResourceConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationOpenSearchResourceConfig)(nil)).Elem()
}

func (i *integrationOpenSearchResourceConfigPtrType) ToIntegrationOpenSearchResourceConfigPtrOutput() IntegrationOpenSearchResourceConfigPtrOutput {
	return i.ToIntegrationOpenSearchResourceConfigPtrOutputWithContext(context.Background())
}

func (i *integrationOpenSearchResourceConfigPtrType) ToIntegrationOpenSearchResourceConfigPtrOutputWithContext(ctx context.Context) IntegrationOpenSearchResourceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationOpenSearchResourceConfigPtrOutput)
}

type IntegrationOpenSearchResourceConfigOutput struct{ *pulumi.OutputState }

func (IntegrationOpenSearchResourceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationOpenSearchResourceConfig)(nil)).Elem()
}

func (o IntegrationOpenSearchResourceConfigOutput) ToIntegrationOpenSearchResourceConfigOutput() IntegrationOpenSearchResourceConfigOutput {
	return o
}

func (o IntegrationOpenSearchResourceConfigOutput) ToIntegrationOpenSearchResourceConfigOutputWithContext(ctx context.Context) IntegrationOpenSearchResourceConfigOutput {
	return o
}

func (o IntegrationOpenSearchResourceConfigOutput) ToIntegrationOpenSearchResourceConfigPtrOutput() IntegrationOpenSearchResourceConfigPtrOutput {
	return o.ToIntegrationOpenSearchResourceConfigPtrOutputWithContext(context.Background())
}

func (o IntegrationOpenSearchResourceConfigOutput) ToIntegrationOpenSearchResourceConfigPtrOutputWithContext(ctx context.Context) IntegrationOpenSearchResourceConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IntegrationOpenSearchResourceConfig) *IntegrationOpenSearchResourceConfig {
		return &v
	}).(IntegrationOpenSearchResourceConfigPtrOutput)
}

func (o IntegrationOpenSearchResourceConfigOutput) ApplicationArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationOpenSearchResourceConfig) *string { return v.ApplicationArn }).(pulumi.StringPtrOutput)
}

func (o IntegrationOpenSearchResourceConfigOutput) DashboardViewerPrincipals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IntegrationOpenSearchResourceConfig) []string { return v.DashboardViewerPrincipals }).(pulumi.StringArrayOutput)
}

func (o IntegrationOpenSearchResourceConfigOutput) DataSourceRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationOpenSearchResourceConfig) string { return v.DataSourceRoleArn }).(pulumi.StringOutput)
}

func (o IntegrationOpenSearchResourceConfigOutput) KmsKeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationOpenSearchResourceConfig) *string { return v.KmsKeyArn }).(pulumi.StringPtrOutput)
}

func (o IntegrationOpenSearchResourceConfigOutput) RetentionDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IntegrationOpenSearchResourceConfig) *int { return v.RetentionDays }).(pulumi.IntPtrOutput)
}

type IntegrationOpenSearchResourceConfigPtrOutput struct{ *pulumi.OutputState }

func (IntegrationOpenSearchResourceConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationOpenSearchResourceConfig)(nil)).Elem()
}

func (o IntegrationOpenSearchResourceConfigPtrOutput) ToIntegrationOpenSearchResourceConfigPtrOutput() IntegrationOpenSearchResourceConfigPtrOutput {
	return o
}

func (o IntegrationOpenSearchResourceConfigPtrOutput) ToIntegrationOpenSearchResourceConfigPtrOutputWithContext(ctx context.Context) IntegrationOpenSearchResourceConfigPtrOutput {
	return o
}

func (o IntegrationOpenSearchResourceConfigPtrOutput) Elem() IntegrationOpenSearchResourceConfigOutput {
	return o.ApplyT(func(v *IntegrationOpenSearchResourceConfig) IntegrationOpenSearchResourceConfig {
		if v != nil {
			return *v
		}
		var ret IntegrationOpenSearchResourceConfig
		return ret
	}).(IntegrationOpenSearchResourceConfigOutput)
}

func (o IntegrationOpenSearchResourceConfigPtrOutput) ApplicationArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationOpenSearchResourceConfig) *string {
		if v == nil {
			return nil
		}
		return v.ApplicationArn
	}).(pulumi.StringPtrOutput)
}

func (o IntegrationOpenSearchResourceConfigPtrOutput) DashboardViewerPrincipals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IntegrationOpenSearchResourceConfig) []string {
		if v == nil {
			return nil
		}
		return v.DashboardViewerPrincipals
	}).(pulumi.StringArrayOutput)
}

func (o IntegrationOpenSearchResourceConfigPtrOutput) DataSourceRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationOpenSearchResourceConfig) *string {
		if v == nil {
			return nil
		}
		return &v.DataSourceRoleArn
	}).(pulumi.StringPtrOutput)
}

func (o IntegrationOpenSearchResourceConfigPtrOutput) KmsKeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationOpenSearchResourceConfig) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyArn
	}).(pulumi.StringPtrOutput)
}

func (o IntegrationOpenSearchResourceConfigPtrOutput) RetentionDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IntegrationOpenSearchResourceConfig) *int {
		if v == nil {
			return nil
		}
		return v.RetentionDays
	}).(pulumi.IntPtrOutput)
}

type LogGroupTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// Specifies the CW metric dimensions to publish with this metric.
//
//	 Because dimensions are part of the unique identifier for a metric, whenever a unique dimension name/value pair is extracted from your logs, you are creating a new variation of that metric.
//	For more information about publishing dimensions with metrics created by metric filters, see [Publishing dimensions with metrics from values in JSON or space-delimited log events](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html#logs-metric-filters-dimensions).
//	 Metrics extracted from log events are charged as custom metrics. To prevent unexpected high charges, do not specify high-cardinality fields such as ``IPAddress`` or ``requestID`` as dimensions. Each different value found for a dimension is treated as a separate metric and accrues charges as a separate custom metric.
//	To help prevent accidental high charges, Amazon disables a metric filter if it generates 1000 different name/value pairs for the dimensions that you have specified within a certain amount of time.
//	You can also set up a billing alarm to alert you if your charges are higher than expected. For more information, see [Creating a Billing Alarm to Monitor Your Estimated Charges](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/monitor_estimated_charges_with_cloudwatch.html).
type MetricFilterDimension struct {
	// The name for the CW metric dimension that the metric filter creates.
	//  Dimension names must contain only ASCII characters, must include at least one non-whitespace character, and cannot start with a colon (:).
	Key string `pulumi:"key"`
	// The log event field that will contain the value for this dimension. This dimension will only be published for a metric if the value is found in the log event. For example, ``$.eventType`` for JSON log events, or ``$server`` for space-delimited log events.
	Value string `pulumi:"value"`
}

// MetricFilterDimensionInput is an input type that accepts MetricFilterDimensionArgs and MetricFilterDimensionOutput values.
// You can construct a concrete instance of `MetricFilterDimensionInput` via:
//
//	MetricFilterDimensionArgs{...}
type MetricFilterDimensionInput interface {
	pulumi.Input

	ToMetricFilterDimensionOutput() MetricFilterDimensionOutput
	ToMetricFilterDimensionOutputWithContext(context.Context) MetricFilterDimensionOutput
}

// Specifies the CW metric dimensions to publish with this metric.
//
//	 Because dimensions are part of the unique identifier for a metric, whenever a unique dimension name/value pair is extracted from your logs, you are creating a new variation of that metric.
//	For more information about publishing dimensions with metrics created by metric filters, see [Publishing dimensions with metrics from values in JSON or space-delimited log events](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html#logs-metric-filters-dimensions).
//	 Metrics extracted from log events are charged as custom metrics. To prevent unexpected high charges, do not specify high-cardinality fields such as ``IPAddress`` or ``requestID`` as dimensions. Each different value found for a dimension is treated as a separate metric and accrues charges as a separate custom metric.
//	To help prevent accidental high charges, Amazon disables a metric filter if it generates 1000 different name/value pairs for the dimensions that you have specified within a certain amount of time.
//	You can also set up a billing alarm to alert you if your charges are higher than expected. For more information, see [Creating a Billing Alarm to Monitor Your Estimated Charges](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/monitor_estimated_charges_with_cloudwatch.html).
type MetricFilterDimensionArgs struct {
	// The name for the CW metric dimension that the metric filter creates.
	//  Dimension names must contain only ASCII characters, must include at least one non-whitespace character, and cannot start with a colon (:).
	Key pulumi.StringInput `pulumi:"key"`
	// The log event field that will contain the value for this dimension. This dimension will only be published for a metric if the value is found in the log event. For example, ``$.eventType`` for JSON log events, or ``$server`` for space-delimited log events.
	Value pulumi.StringInput `pulumi:"value"`
}

func (MetricFilterDimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricFilterDimension)(nil)).Elem()
}

func (i MetricFilterDimensionArgs) ToMetricFilterDimensionOutput() MetricFilterDimensionOutput {
	return i.ToMetricFilterDimensionOutputWithContext(context.Background())
}

func (i MetricFilterDimensionArgs) ToMetricFilterDimensionOutputWithContext(ctx context.Context) MetricFilterDimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricFilterDimensionOutput)
}

// MetricFilterDimensionArrayInput is an input type that accepts MetricFilterDimensionArray and MetricFilterDimensionArrayOutput values.
// You can construct a concrete instance of `MetricFilterDimensionArrayInput` via:
//
//	MetricFilterDimensionArray{ MetricFilterDimensionArgs{...} }
type MetricFilterDimensionArrayInput interface {
	pulumi.Input

	ToMetricFilterDimensionArrayOutput() MetricFilterDimensionArrayOutput
	ToMetricFilterDimensionArrayOutputWithContext(context.Context) MetricFilterDimensionArrayOutput
}

type MetricFilterDimensionArray []MetricFilterDimensionInput

func (MetricFilterDimensionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricFilterDimension)(nil)).Elem()
}

func (i MetricFilterDimensionArray) ToMetricFilterDimensionArrayOutput() MetricFilterDimensionArrayOutput {
	return i.ToMetricFilterDimensionArrayOutputWithContext(context.Background())
}

func (i MetricFilterDimensionArray) ToMetricFilterDimensionArrayOutputWithContext(ctx context.Context) MetricFilterDimensionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricFilterDimensionArrayOutput)
}

// Specifies the CW metric dimensions to publish with this metric.
//
//	 Because dimensions are part of the unique identifier for a metric, whenever a unique dimension name/value pair is extracted from your logs, you are creating a new variation of that metric.
//	For more information about publishing dimensions with metrics created by metric filters, see [Publishing dimensions with metrics from values in JSON or space-delimited log events](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html#logs-metric-filters-dimensions).
//	 Metrics extracted from log events are charged as custom metrics. To prevent unexpected high charges, do not specify high-cardinality fields such as ``IPAddress`` or ``requestID`` as dimensions. Each different value found for a dimension is treated as a separate metric and accrues charges as a separate custom metric.
//	To help prevent accidental high charges, Amazon disables a metric filter if it generates 1000 different name/value pairs for the dimensions that you have specified within a certain amount of time.
//	You can also set up a billing alarm to alert you if your charges are higher than expected. For more information, see [Creating a Billing Alarm to Monitor Your Estimated Charges](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/monitor_estimated_charges_with_cloudwatch.html).
type MetricFilterDimensionOutput struct{ *pulumi.OutputState }

func (MetricFilterDimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricFilterDimension)(nil)).Elem()
}

func (o MetricFilterDimensionOutput) ToMetricFilterDimensionOutput() MetricFilterDimensionOutput {
	return o
}

func (o MetricFilterDimensionOutput) ToMetricFilterDimensionOutputWithContext(ctx context.Context) MetricFilterDimensionOutput {
	return o
}

// The name for the CW metric dimension that the metric filter creates.
//
//	Dimension names must contain only ASCII characters, must include at least one non-whitespace character, and cannot start with a colon (:).
func (o MetricFilterDimensionOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v MetricFilterDimension) string { return v.Key }).(pulumi.StringOutput)
}

// The log event field that will contain the value for this dimension. This dimension will only be published for a metric if the value is found in the log event. For example, “$.eventType“ for JSON log events, or “$server“ for space-delimited log events.
func (o MetricFilterDimensionOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v MetricFilterDimension) string { return v.Value }).(pulumi.StringOutput)
}

type MetricFilterDimensionArrayOutput struct{ *pulumi.OutputState }

func (MetricFilterDimensionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricFilterDimension)(nil)).Elem()
}

func (o MetricFilterDimensionArrayOutput) ToMetricFilterDimensionArrayOutput() MetricFilterDimensionArrayOutput {
	return o
}

func (o MetricFilterDimensionArrayOutput) ToMetricFilterDimensionArrayOutputWithContext(ctx context.Context) MetricFilterDimensionArrayOutput {
	return o
}

func (o MetricFilterDimensionArrayOutput) Index(i pulumi.IntInput) MetricFilterDimensionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricFilterDimension {
		return vs[0].([]MetricFilterDimension)[vs[1].(int)]
	}).(MetricFilterDimensionOutput)
}

// “MetricTransformation“ is a property of the “AWS::Logs::MetricFilter“ resource that describes how to transform log streams into a CloudWatch metric.
type MetricFilterMetricTransformation struct {
	// (Optional) The value to emit when a filter pattern does not match a log event. This value can be null.
	DefaultValue *float64 `pulumi:"defaultValue"`
	// The fields to use as dimensions for the metric. One metric filter can include as many as three dimensions.
	//   Metrics extracted from log events are charged as custom metrics. To prevent unexpected high charges, do not specify high-cardinality fields such as ``IPAddress`` or ``requestID`` as dimensions. Each different value found for a dimension is treated as a separate metric and accrues charges as a separate custom metric.
	//  CloudWatch Logs disables a metric filter if it generates 1000 different name/value pairs for your specified dimensions within a certain amount of time. This helps to prevent accidental high charges.
	//  You can also set up a billing alarm to alert you if your charges are higher than expected. For more information, see [Creating a Billing Alarm to Monitor Your Estimated Charges](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/monitor_estimated_charges_with_cloudwatch.html).
	Dimensions []MetricFilterDimension `pulumi:"dimensions"`
	// The name of the CloudWatch metric.
	MetricName string `pulumi:"metricName"`
	// A custom namespace to contain your metric in CloudWatch. Use namespaces to group together metrics that are similar. For more information, see [Namespaces](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Namespace).
	MetricNamespace string `pulumi:"metricNamespace"`
	// The value that is published to the CloudWatch metric. For example, if you're counting the occurrences of a particular term like ``Error``, specify 1 for the metric value. If you're counting the number of bytes transferred, reference the value that is in the log event by using $. followed by the name of the field that you specified in the filter pattern, such as ``$.size``.
	MetricValue string `pulumi:"metricValue"`
	// The unit to assign to the metric. If you omit this, the unit is set as ``None``.
	Unit *MetricFilterMetricTransformationUnit `pulumi:"unit"`
}

// MetricFilterMetricTransformationInput is an input type that accepts MetricFilterMetricTransformationArgs and MetricFilterMetricTransformationOutput values.
// You can construct a concrete instance of `MetricFilterMetricTransformationInput` via:
//
//	MetricFilterMetricTransformationArgs{...}
type MetricFilterMetricTransformationInput interface {
	pulumi.Input

	ToMetricFilterMetricTransformationOutput() MetricFilterMetricTransformationOutput
	ToMetricFilterMetricTransformationOutputWithContext(context.Context) MetricFilterMetricTransformationOutput
}

// “MetricTransformation“ is a property of the “AWS::Logs::MetricFilter“ resource that describes how to transform log streams into a CloudWatch metric.
type MetricFilterMetricTransformationArgs struct {
	// (Optional) The value to emit when a filter pattern does not match a log event. This value can be null.
	DefaultValue pulumi.Float64PtrInput `pulumi:"defaultValue"`
	// The fields to use as dimensions for the metric. One metric filter can include as many as three dimensions.
	//   Metrics extracted from log events are charged as custom metrics. To prevent unexpected high charges, do not specify high-cardinality fields such as ``IPAddress`` or ``requestID`` as dimensions. Each different value found for a dimension is treated as a separate metric and accrues charges as a separate custom metric.
	//  CloudWatch Logs disables a metric filter if it generates 1000 different name/value pairs for your specified dimensions within a certain amount of time. This helps to prevent accidental high charges.
	//  You can also set up a billing alarm to alert you if your charges are higher than expected. For more information, see [Creating a Billing Alarm to Monitor Your Estimated Charges](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/monitor_estimated_charges_with_cloudwatch.html).
	Dimensions MetricFilterDimensionArrayInput `pulumi:"dimensions"`
	// The name of the CloudWatch metric.
	MetricName pulumi.StringInput `pulumi:"metricName"`
	// A custom namespace to contain your metric in CloudWatch. Use namespaces to group together metrics that are similar. For more information, see [Namespaces](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Namespace).
	MetricNamespace pulumi.StringInput `pulumi:"metricNamespace"`
	// The value that is published to the CloudWatch metric. For example, if you're counting the occurrences of a particular term like ``Error``, specify 1 for the metric value. If you're counting the number of bytes transferred, reference the value that is in the log event by using $. followed by the name of the field that you specified in the filter pattern, such as ``$.size``.
	MetricValue pulumi.StringInput `pulumi:"metricValue"`
	// The unit to assign to the metric. If you omit this, the unit is set as ``None``.
	Unit MetricFilterMetricTransformationUnitPtrInput `pulumi:"unit"`
}

func (MetricFilterMetricTransformationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricFilterMetricTransformation)(nil)).Elem()
}

func (i MetricFilterMetricTransformationArgs) ToMetricFilterMetricTransformationOutput() MetricFilterMetricTransformationOutput {
	return i.ToMetricFilterMetricTransformationOutputWithContext(context.Background())
}

func (i MetricFilterMetricTransformationArgs) ToMetricFilterMetricTransformationOutputWithContext(ctx context.Context) MetricFilterMetricTransformationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricFilterMetricTransformationOutput)
}

// MetricFilterMetricTransformationArrayInput is an input type that accepts MetricFilterMetricTransformationArray and MetricFilterMetricTransformationArrayOutput values.
// You can construct a concrete instance of `MetricFilterMetricTransformationArrayInput` via:
//
//	MetricFilterMetricTransformationArray{ MetricFilterMetricTransformationArgs{...} }
type MetricFilterMetricTransformationArrayInput interface {
	pulumi.Input

	ToMetricFilterMetricTransformationArrayOutput() MetricFilterMetricTransformationArrayOutput
	ToMetricFilterMetricTransformationArrayOutputWithContext(context.Context) MetricFilterMetricTransformationArrayOutput
}

type MetricFilterMetricTransformationArray []MetricFilterMetricTransformationInput

func (MetricFilterMetricTransformationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricFilterMetricTransformation)(nil)).Elem()
}

func (i MetricFilterMetricTransformationArray) ToMetricFilterMetricTransformationArrayOutput() MetricFilterMetricTransformationArrayOutput {
	return i.ToMetricFilterMetricTransformationArrayOutputWithContext(context.Background())
}

func (i MetricFilterMetricTransformationArray) ToMetricFilterMetricTransformationArrayOutputWithContext(ctx context.Context) MetricFilterMetricTransformationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricFilterMetricTransformationArrayOutput)
}

// “MetricTransformation“ is a property of the “AWS::Logs::MetricFilter“ resource that describes how to transform log streams into a CloudWatch metric.
type MetricFilterMetricTransformationOutput struct{ *pulumi.OutputState }

func (MetricFilterMetricTransformationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricFilterMetricTransformation)(nil)).Elem()
}

func (o MetricFilterMetricTransformationOutput) ToMetricFilterMetricTransformationOutput() MetricFilterMetricTransformationOutput {
	return o
}

func (o MetricFilterMetricTransformationOutput) ToMetricFilterMetricTransformationOutputWithContext(ctx context.Context) MetricFilterMetricTransformationOutput {
	return o
}

// (Optional) The value to emit when a filter pattern does not match a log event. This value can be null.
func (o MetricFilterMetricTransformationOutput) DefaultValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MetricFilterMetricTransformation) *float64 { return v.DefaultValue }).(pulumi.Float64PtrOutput)
}

// The fields to use as dimensions for the metric. One metric filter can include as many as three dimensions.
//
//	 Metrics extracted from log events are charged as custom metrics. To prevent unexpected high charges, do not specify high-cardinality fields such as ``IPAddress`` or ``requestID`` as dimensions. Each different value found for a dimension is treated as a separate metric and accrues charges as a separate custom metric.
//	CloudWatch Logs disables a metric filter if it generates 1000 different name/value pairs for your specified dimensions within a certain amount of time. This helps to prevent accidental high charges.
//	You can also set up a billing alarm to alert you if your charges are higher than expected. For more information, see [Creating a Billing Alarm to Monitor Your Estimated Charges](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/monitor_estimated_charges_with_cloudwatch.html).
func (o MetricFilterMetricTransformationOutput) Dimensions() MetricFilterDimensionArrayOutput {
	return o.ApplyT(func(v MetricFilterMetricTransformation) []MetricFilterDimension { return v.Dimensions }).(MetricFilterDimensionArrayOutput)
}

// The name of the CloudWatch metric.
func (o MetricFilterMetricTransformationOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v MetricFilterMetricTransformation) string { return v.MetricName }).(pulumi.StringOutput)
}

// A custom namespace to contain your metric in CloudWatch. Use namespaces to group together metrics that are similar. For more information, see [Namespaces](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Namespace).
func (o MetricFilterMetricTransformationOutput) MetricNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v MetricFilterMetricTransformation) string { return v.MetricNamespace }).(pulumi.StringOutput)
}

// The value that is published to the CloudWatch metric. For example, if you're counting the occurrences of a particular term like “Error“, specify 1 for the metric value. If you're counting the number of bytes transferred, reference the value that is in the log event by using $. followed by the name of the field that you specified in the filter pattern, such as “$.size“.
func (o MetricFilterMetricTransformationOutput) MetricValue() pulumi.StringOutput {
	return o.ApplyT(func(v MetricFilterMetricTransformation) string { return v.MetricValue }).(pulumi.StringOutput)
}

// The unit to assign to the metric. If you omit this, the unit is set as “None“.
func (o MetricFilterMetricTransformationOutput) Unit() MetricFilterMetricTransformationUnitPtrOutput {
	return o.ApplyT(func(v MetricFilterMetricTransformation) *MetricFilterMetricTransformationUnit { return v.Unit }).(MetricFilterMetricTransformationUnitPtrOutput)
}

type MetricFilterMetricTransformationArrayOutput struct{ *pulumi.OutputState }

func (MetricFilterMetricTransformationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricFilterMetricTransformation)(nil)).Elem()
}

func (o MetricFilterMetricTransformationArrayOutput) ToMetricFilterMetricTransformationArrayOutput() MetricFilterMetricTransformationArrayOutput {
	return o
}

func (o MetricFilterMetricTransformationArrayOutput) ToMetricFilterMetricTransformationArrayOutputWithContext(ctx context.Context) MetricFilterMetricTransformationArrayOutput {
	return o
}

func (o MetricFilterMetricTransformationArrayOutput) Index(i pulumi.IntInput) MetricFilterMetricTransformationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricFilterMetricTransformation {
		return vs[0].([]MetricFilterMetricTransformation)[vs[1].(int)]
	}).(MetricFilterMetricTransformationOutput)
}

// OpenSearchResourceConfig for the given Integration
type ResourceConfigProperties struct {
	OpenSearchResourceConfig *IntegrationOpenSearchResourceConfig `pulumi:"openSearchResourceConfig"`
}

// ResourceConfigPropertiesInput is an input type that accepts ResourceConfigPropertiesArgs and ResourceConfigPropertiesOutput values.
// You can construct a concrete instance of `ResourceConfigPropertiesInput` via:
//
//	ResourceConfigPropertiesArgs{...}
type ResourceConfigPropertiesInput interface {
	pulumi.Input

	ToResourceConfigPropertiesOutput() ResourceConfigPropertiesOutput
	ToResourceConfigPropertiesOutputWithContext(context.Context) ResourceConfigPropertiesOutput
}

// OpenSearchResourceConfig for the given Integration
type ResourceConfigPropertiesArgs struct {
	OpenSearchResourceConfig IntegrationOpenSearchResourceConfigPtrInput `pulumi:"openSearchResourceConfig"`
}

func (ResourceConfigPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceConfigProperties)(nil)).Elem()
}

func (i ResourceConfigPropertiesArgs) ToResourceConfigPropertiesOutput() ResourceConfigPropertiesOutput {
	return i.ToResourceConfigPropertiesOutputWithContext(context.Background())
}

func (i ResourceConfigPropertiesArgs) ToResourceConfigPropertiesOutputWithContext(ctx context.Context) ResourceConfigPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceConfigPropertiesOutput)
}

// OpenSearchResourceConfig for the given Integration
type ResourceConfigPropertiesOutput struct{ *pulumi.OutputState }

func (ResourceConfigPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceConfigProperties)(nil)).Elem()
}

func (o ResourceConfigPropertiesOutput) ToResourceConfigPropertiesOutput() ResourceConfigPropertiesOutput {
	return o
}

func (o ResourceConfigPropertiesOutput) ToResourceConfigPropertiesOutputWithContext(ctx context.Context) ResourceConfigPropertiesOutput {
	return o
}

func (o ResourceConfigPropertiesOutput) OpenSearchResourceConfig() IntegrationOpenSearchResourceConfigPtrOutput {
	return o.ApplyT(func(v ResourceConfigProperties) *IntegrationOpenSearchResourceConfig {
		return v.OpenSearchResourceConfig
	}).(IntegrationOpenSearchResourceConfigPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeliveryDestinationDestinationPolicyInput)(nil)).Elem(), DeliveryDestinationDestinationPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeliveryDestinationDestinationPolicyArrayInput)(nil)).Elem(), DeliveryDestinationDestinationPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationOpenSearchResourceConfigInput)(nil)).Elem(), IntegrationOpenSearchResourceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationOpenSearchResourceConfigPtrInput)(nil)).Elem(), IntegrationOpenSearchResourceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricFilterDimensionInput)(nil)).Elem(), MetricFilterDimensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricFilterDimensionArrayInput)(nil)).Elem(), MetricFilterDimensionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricFilterMetricTransformationInput)(nil)).Elem(), MetricFilterMetricTransformationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricFilterMetricTransformationArrayInput)(nil)).Elem(), MetricFilterMetricTransformationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceConfigPropertiesInput)(nil)).Elem(), ResourceConfigPropertiesArgs{})
	pulumi.RegisterOutputType(DeliveryDestinationDestinationPolicyOutput{})
	pulumi.RegisterOutputType(DeliveryDestinationDestinationPolicyArrayOutput{})
	pulumi.RegisterOutputType(IntegrationOpenSearchResourceConfigOutput{})
	pulumi.RegisterOutputType(IntegrationOpenSearchResourceConfigPtrOutput{})
	pulumi.RegisterOutputType(MetricFilterDimensionOutput{})
	pulumi.RegisterOutputType(MetricFilterDimensionArrayOutput{})
	pulumi.RegisterOutputType(MetricFilterMetricTransformationOutput{})
	pulumi.RegisterOutputType(MetricFilterMetricTransformationArrayOutput{})
	pulumi.RegisterOutputType(ResourceConfigPropertiesOutput{})
}
