// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package logs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Specifies a transformer on the log group to transform logs into consistent structured and information rich format.
func LookupTransformer(ctx *pulumi.Context, args *LookupTransformerArgs, opts ...pulumi.InvokeOption) (*LookupTransformerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTransformerResult
	err := ctx.Invoke("aws-native:logs:getTransformer", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupTransformerArgs struct {
	// Existing log group that you want to associate with this transformer.
	LogGroupIdentifier string `pulumi:"logGroupIdentifier"`
}

type LookupTransformerResult struct {
	// List of processors in a transformer
	TransformerConfig []TransformerProcessor `pulumi:"transformerConfig"`
}

func LookupTransformerOutput(ctx *pulumi.Context, args LookupTransformerOutputArgs, opts ...pulumi.InvokeOption) LookupTransformerResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupTransformerResultOutput, error) {
			args := v.(LookupTransformerArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:logs:getTransformer", args, LookupTransformerResultOutput{}, options).(LookupTransformerResultOutput), nil
		}).(LookupTransformerResultOutput)
}

type LookupTransformerOutputArgs struct {
	// Existing log group that you want to associate with this transformer.
	LogGroupIdentifier pulumi.StringInput `pulumi:"logGroupIdentifier"`
}

func (LookupTransformerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTransformerArgs)(nil)).Elem()
}

type LookupTransformerResultOutput struct{ *pulumi.OutputState }

func (LookupTransformerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTransformerResult)(nil)).Elem()
}

func (o LookupTransformerResultOutput) ToLookupTransformerResultOutput() LookupTransformerResultOutput {
	return o
}

func (o LookupTransformerResultOutput) ToLookupTransformerResultOutputWithContext(ctx context.Context) LookupTransformerResultOutput {
	return o
}

// List of processors in a transformer
func (o LookupTransformerResultOutput) TransformerConfig() TransformerProcessorArrayOutput {
	return o.ApplyT(func(v LookupTransformerResult) []TransformerProcessor { return v.TransformerConfig }).(TransformerProcessorArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTransformerResultOutput{})
}
