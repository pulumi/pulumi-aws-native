// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package logs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This structure contains information about one delivery in your account.
//
// A delivery is a connection between a logical delivery source and a logical delivery destination.
//
// For more information, see [CreateDelivery](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_CreateDelivery.html).
func LookupDelivery(ctx *pulumi.Context, args *LookupDeliveryArgs, opts ...pulumi.InvokeOption) (*LookupDeliveryResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDeliveryResult
	err := ctx.Invoke("aws-native:logs:getDelivery", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupDeliveryArgs struct {
	// The unique ID that identifies this delivery in your account.
	DeliveryId string `pulumi:"deliveryId"`
}

type LookupDeliveryResult struct {
	// The Amazon Resource Name (ARN) that uniquely identifies this delivery.
	Arn *string `pulumi:"arn"`
	// Displays whether the delivery destination associated with this delivery is CloudWatch Logs, Amazon S3, or Kinesis Data Firehose.
	DeliveryDestinationType *string `pulumi:"deliveryDestinationType"`
	// The unique ID that identifies this delivery in your account.
	DeliveryId *string `pulumi:"deliveryId"`
	// The field delimiter to use between record fields when the final output format of a delivery is in Plain , W3C , or Raw format.
	FieldDelimiter *string `pulumi:"fieldDelimiter"`
	// The list of record fields to be delivered to the destination, in order. If the delivery's log source has mandatory fields, they must be included in this list.
	RecordFields []string `pulumi:"recordFields"`
	// This parameter causes the S3 objects that contain delivered logs to use a prefix structure that allows for integration with Apache Hive.
	S3EnableHiveCompatiblePath *bool `pulumi:"s3EnableHiveCompatiblePath"`
	// This string allows re-configuring the S3 object prefix to contain either static or variable sections. The valid variables to use in the suffix path will vary by each log source. See ConfigurationTemplate$allowedSuffixPathFields for more info on what values are supported in the suffix path for each log source.
	S3SuffixPath *string `pulumi:"s3SuffixPath"`
	// The tags that have been assigned to this delivery.
	Tags []aws.Tag `pulumi:"tags"`
}

func LookupDeliveryOutput(ctx *pulumi.Context, args LookupDeliveryOutputArgs, opts ...pulumi.InvokeOption) LookupDeliveryResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupDeliveryResultOutput, error) {
			args := v.(LookupDeliveryArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:logs:getDelivery", args, LookupDeliveryResultOutput{}, options).(LookupDeliveryResultOutput), nil
		}).(LookupDeliveryResultOutput)
}

type LookupDeliveryOutputArgs struct {
	// The unique ID that identifies this delivery in your account.
	DeliveryId pulumi.StringInput `pulumi:"deliveryId"`
}

func (LookupDeliveryOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDeliveryArgs)(nil)).Elem()
}

type LookupDeliveryResultOutput struct{ *pulumi.OutputState }

func (LookupDeliveryResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDeliveryResult)(nil)).Elem()
}

func (o LookupDeliveryResultOutput) ToLookupDeliveryResultOutput() LookupDeliveryResultOutput {
	return o
}

func (o LookupDeliveryResultOutput) ToLookupDeliveryResultOutputWithContext(ctx context.Context) LookupDeliveryResultOutput {
	return o
}

// The Amazon Resource Name (ARN) that uniquely identifies this delivery.
func (o LookupDeliveryResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDeliveryResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// Displays whether the delivery destination associated with this delivery is CloudWatch Logs, Amazon S3, or Kinesis Data Firehose.
func (o LookupDeliveryResultOutput) DeliveryDestinationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDeliveryResult) *string { return v.DeliveryDestinationType }).(pulumi.StringPtrOutput)
}

// The unique ID that identifies this delivery in your account.
func (o LookupDeliveryResultOutput) DeliveryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDeliveryResult) *string { return v.DeliveryId }).(pulumi.StringPtrOutput)
}

// The field delimiter to use between record fields when the final output format of a delivery is in Plain , W3C , or Raw format.
func (o LookupDeliveryResultOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDeliveryResult) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// The list of record fields to be delivered to the destination, in order. If the delivery's log source has mandatory fields, they must be included in this list.
func (o LookupDeliveryResultOutput) RecordFields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDeliveryResult) []string { return v.RecordFields }).(pulumi.StringArrayOutput)
}

// This parameter causes the S3 objects that contain delivered logs to use a prefix structure that allows for integration with Apache Hive.
func (o LookupDeliveryResultOutput) S3EnableHiveCompatiblePath() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupDeliveryResult) *bool { return v.S3EnableHiveCompatiblePath }).(pulumi.BoolPtrOutput)
}

// This string allows re-configuring the S3 object prefix to contain either static or variable sections. The valid variables to use in the suffix path will vary by each log source. See ConfigurationTemplate$allowedSuffixPathFields for more info on what values are supported in the suffix path for each log source.
func (o LookupDeliveryResultOutput) S3SuffixPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDeliveryResult) *string { return v.S3SuffixPath }).(pulumi.StringPtrOutput)
}

// The tags that have been assigned to this delivery.
func (o LookupDeliveryResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupDeliveryResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDeliveryResultOutput{})
}
