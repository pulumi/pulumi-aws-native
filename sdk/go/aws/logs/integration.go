// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package logs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Schema for Logs Integration Resource
type Integration struct {
	pulumi.CustomResourceState

	// User provided identifier for integration, unique to the user account.
	IntegrationName pulumi.StringOutput `pulumi:"integrationName"`
	// Status of creation for the Integration and its resources
	IntegrationStatus IntegrationStatusOutput `pulumi:"integrationStatus"`
	// The type of the Integration.
	IntegrationType IntegrationTypeOutput `pulumi:"integrationType"`
	// OpenSearchResourceConfig for the given Integration
	ResourceConfig ResourceConfigPropertiesOutput `pulumi:"resourceConfig"`
}

// NewIntegration registers a new resource with the given unique name, arguments, and options.
func NewIntegration(ctx *pulumi.Context,
	name string, args *IntegrationArgs, opts ...pulumi.ResourceOption) (*Integration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IntegrationType == nil {
		return nil, errors.New("invalid value for required argument 'IntegrationType'")
	}
	if args.ResourceConfig == nil {
		return nil, errors.New("invalid value for required argument 'ResourceConfig'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"integrationName",
		"integrationType",
		"resourceConfig",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Integration
	err := ctx.RegisterResource("aws-native:logs:Integration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIntegration gets an existing Integration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntegration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IntegrationState, opts ...pulumi.ResourceOption) (*Integration, error) {
	var resource Integration
	err := ctx.ReadResource("aws-native:logs:Integration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Integration resources.
type integrationState struct {
}

type IntegrationState struct {
}

func (IntegrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationState)(nil)).Elem()
}

type integrationArgs struct {
	// User provided identifier for integration, unique to the user account.
	IntegrationName *string `pulumi:"integrationName"`
	// The type of the Integration.
	IntegrationType IntegrationType `pulumi:"integrationType"`
	// OpenSearchResourceConfig for the given Integration
	ResourceConfig ResourceConfigProperties `pulumi:"resourceConfig"`
}

// The set of arguments for constructing a Integration resource.
type IntegrationArgs struct {
	// User provided identifier for integration, unique to the user account.
	IntegrationName pulumi.StringPtrInput
	// The type of the Integration.
	IntegrationType IntegrationTypeInput
	// OpenSearchResourceConfig for the given Integration
	ResourceConfig ResourceConfigPropertiesInput
}

func (IntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationArgs)(nil)).Elem()
}

type IntegrationInput interface {
	pulumi.Input

	ToIntegrationOutput() IntegrationOutput
	ToIntegrationOutputWithContext(ctx context.Context) IntegrationOutput
}

func (*Integration) ElementType() reflect.Type {
	return reflect.TypeOf((**Integration)(nil)).Elem()
}

func (i *Integration) ToIntegrationOutput() IntegrationOutput {
	return i.ToIntegrationOutputWithContext(context.Background())
}

func (i *Integration) ToIntegrationOutputWithContext(ctx context.Context) IntegrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationOutput)
}

type IntegrationOutput struct{ *pulumi.OutputState }

func (IntegrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Integration)(nil)).Elem()
}

func (o IntegrationOutput) ToIntegrationOutput() IntegrationOutput {
	return o
}

func (o IntegrationOutput) ToIntegrationOutputWithContext(ctx context.Context) IntegrationOutput {
	return o
}

// User provided identifier for integration, unique to the user account.
func (o IntegrationOutput) IntegrationName() pulumi.StringOutput {
	return o.ApplyT(func(v *Integration) pulumi.StringOutput { return v.IntegrationName }).(pulumi.StringOutput)
}

// Status of creation for the Integration and its resources
func (o IntegrationOutput) IntegrationStatus() IntegrationStatusOutput {
	return o.ApplyT(func(v *Integration) IntegrationStatusOutput { return v.IntegrationStatus }).(IntegrationStatusOutput)
}

// The type of the Integration.
func (o IntegrationOutput) IntegrationType() IntegrationTypeOutput {
	return o.ApplyT(func(v *Integration) IntegrationTypeOutput { return v.IntegrationType }).(IntegrationTypeOutput)
}

// OpenSearchResourceConfig for the given Integration
func (o IntegrationOutput) ResourceConfig() ResourceConfigPropertiesOutput {
	return o.ApplyT(func(v *Integration) ResourceConfigPropertiesOutput { return v.ResourceConfig }).(ResourceConfigPropertiesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationInput)(nil)).Elem(), &Integration{})
	pulumi.RegisterOutputType(IntegrationOutput{})
}
