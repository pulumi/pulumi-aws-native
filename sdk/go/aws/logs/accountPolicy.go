// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package logs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The AWS::Logs::AccountPolicy resource specifies a CloudWatch Logs AccountPolicy.
type AccountPolicy struct {
	pulumi.CustomResourceState

	// User account id
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// The body of the policy document you want to use for this topic.
	//
	// You can only add one policy per PolicyType.
	//
	// The policy must be in JSON string format.
	//
	// Length Constraints: Maximum length of 30720
	PolicyDocument pulumi.StringOutput `pulumi:"policyDocument"`
	// The name of the account policy
	PolicyName pulumi.StringOutput `pulumi:"policyName"`
	// Type of the policy.
	PolicyType AccountPolicyPolicyTypeOutput `pulumi:"policyType"`
	// Scope for policy application
	Scope AccountPolicyScopePtrOutput `pulumi:"scope"`
}

// NewAccountPolicy registers a new resource with the given unique name, arguments, and options.
func NewAccountPolicy(ctx *pulumi.Context,
	name string, args *AccountPolicyArgs, opts ...pulumi.ResourceOption) (*AccountPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyDocument == nil {
		return nil, errors.New("invalid value for required argument 'PolicyDocument'")
	}
	if args.PolicyName == nil {
		return nil, errors.New("invalid value for required argument 'PolicyName'")
	}
	if args.PolicyType == nil {
		return nil, errors.New("invalid value for required argument 'PolicyType'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"policyName",
		"policyType",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AccountPolicy
	err := ctx.RegisterResource("aws-native:logs:AccountPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccountPolicy gets an existing AccountPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccountPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccountPolicyState, opts ...pulumi.ResourceOption) (*AccountPolicy, error) {
	var resource AccountPolicy
	err := ctx.ReadResource("aws-native:logs:AccountPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccountPolicy resources.
type accountPolicyState struct {
}

type AccountPolicyState struct {
}

func (AccountPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*accountPolicyState)(nil)).Elem()
}

type accountPolicyArgs struct {
	// The body of the policy document you want to use for this topic.
	//
	// You can only add one policy per PolicyType.
	//
	// The policy must be in JSON string format.
	//
	// Length Constraints: Maximum length of 30720
	PolicyDocument string `pulumi:"policyDocument"`
	// The name of the account policy
	PolicyName string `pulumi:"policyName"`
	// Type of the policy.
	PolicyType AccountPolicyPolicyType `pulumi:"policyType"`
	// Scope for policy application
	Scope *AccountPolicyScope `pulumi:"scope"`
}

// The set of arguments for constructing a AccountPolicy resource.
type AccountPolicyArgs struct {
	// The body of the policy document you want to use for this topic.
	//
	// You can only add one policy per PolicyType.
	//
	// The policy must be in JSON string format.
	//
	// Length Constraints: Maximum length of 30720
	PolicyDocument pulumi.StringInput
	// The name of the account policy
	PolicyName pulumi.StringInput
	// Type of the policy.
	PolicyType AccountPolicyPolicyTypeInput
	// Scope for policy application
	Scope AccountPolicyScopePtrInput
}

func (AccountPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accountPolicyArgs)(nil)).Elem()
}

type AccountPolicyInput interface {
	pulumi.Input

	ToAccountPolicyOutput() AccountPolicyOutput
	ToAccountPolicyOutputWithContext(ctx context.Context) AccountPolicyOutput
}

func (*AccountPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountPolicy)(nil)).Elem()
}

func (i *AccountPolicy) ToAccountPolicyOutput() AccountPolicyOutput {
	return i.ToAccountPolicyOutputWithContext(context.Background())
}

func (i *AccountPolicy) ToAccountPolicyOutputWithContext(ctx context.Context) AccountPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountPolicyOutput)
}

func (i *AccountPolicy) ToOutput(ctx context.Context) pulumix.Output[*AccountPolicy] {
	return pulumix.Output[*AccountPolicy]{
		OutputState: i.ToAccountPolicyOutputWithContext(ctx).OutputState,
	}
}

type AccountPolicyOutput struct{ *pulumi.OutputState }

func (AccountPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountPolicy)(nil)).Elem()
}

func (o AccountPolicyOutput) ToAccountPolicyOutput() AccountPolicyOutput {
	return o
}

func (o AccountPolicyOutput) ToAccountPolicyOutputWithContext(ctx context.Context) AccountPolicyOutput {
	return o
}

func (o AccountPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[*AccountPolicy] {
	return pulumix.Output[*AccountPolicy]{
		OutputState: o.OutputState,
	}
}

// User account id
func (o AccountPolicyOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountPolicy) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// The body of the policy document you want to use for this topic.
//
// You can only add one policy per PolicyType.
//
// The policy must be in JSON string format.
//
// Length Constraints: Maximum length of 30720
func (o AccountPolicyOutput) PolicyDocument() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountPolicy) pulumi.StringOutput { return v.PolicyDocument }).(pulumi.StringOutput)
}

// The name of the account policy
func (o AccountPolicyOutput) PolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountPolicy) pulumi.StringOutput { return v.PolicyName }).(pulumi.StringOutput)
}

// Type of the policy.
func (o AccountPolicyOutput) PolicyType() AccountPolicyPolicyTypeOutput {
	return o.ApplyT(func(v *AccountPolicy) AccountPolicyPolicyTypeOutput { return v.PolicyType }).(AccountPolicyPolicyTypeOutput)
}

// Scope for policy application
func (o AccountPolicyOutput) Scope() AccountPolicyScopePtrOutput {
	return o.ApplyT(func(v *AccountPolicy) AccountPolicyScopePtrOutput { return v.Scope }).(AccountPolicyScopePtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccountPolicyInput)(nil)).Elem(), &AccountPolicy{})
	pulumi.RegisterOutputType(AccountPolicyOutput{})
}
