// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package logs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource schema for AWS::Logs::LogGroup
type LogGroup struct {
	pulumi.CustomResourceState

	// The CloudWatch log group ARN.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The Amazon Resource Name (ARN) of the CMK to use when encrypting log data.
	KmsKeyId pulumi.StringPtrOutput `pulumi:"kmsKeyId"`
	// The name of the log group. If you don't specify a name, AWS CloudFormation generates a unique ID for the log group.
	LogGroupName pulumi.StringPtrOutput `pulumi:"logGroupName"`
	// The number of days to retain the log events in the specified log group. Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, and 3653.
	RetentionInDays pulumi.IntPtrOutput `pulumi:"retentionInDays"`
	// An array of key-value pairs to apply to this resource.
	Tags LogGroupTagArrayOutput `pulumi:"tags"`
}

// NewLogGroup registers a new resource with the given unique name, arguments, and options.
func NewLogGroup(ctx *pulumi.Context,
	name string, args *LogGroupArgs, opts ...pulumi.ResourceOption) (*LogGroup, error) {
	if args == nil {
		args = &LogGroupArgs{}
	}

	var resource LogGroup
	err := ctx.RegisterResource("aws-native:logs:LogGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogGroup gets an existing LogGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogGroupState, opts ...pulumi.ResourceOption) (*LogGroup, error) {
	var resource LogGroup
	err := ctx.ReadResource("aws-native:logs:LogGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogGroup resources.
type logGroupState struct {
}

type LogGroupState struct {
}

func (LogGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*logGroupState)(nil)).Elem()
}

type logGroupArgs struct {
	// The Amazon Resource Name (ARN) of the CMK to use when encrypting log data.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// The name of the log group. If you don't specify a name, AWS CloudFormation generates a unique ID for the log group.
	LogGroupName *string `pulumi:"logGroupName"`
	// The number of days to retain the log events in the specified log group. Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, and 3653.
	RetentionInDays *int `pulumi:"retentionInDays"`
	// An array of key-value pairs to apply to this resource.
	Tags []LogGroupTag `pulumi:"tags"`
}

// The set of arguments for constructing a LogGroup resource.
type LogGroupArgs struct {
	// The Amazon Resource Name (ARN) of the CMK to use when encrypting log data.
	KmsKeyId pulumi.StringPtrInput
	// The name of the log group. If you don't specify a name, AWS CloudFormation generates a unique ID for the log group.
	LogGroupName pulumi.StringPtrInput
	// The number of days to retain the log events in the specified log group. Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, and 3653.
	RetentionInDays pulumi.IntPtrInput
	// An array of key-value pairs to apply to this resource.
	Tags LogGroupTagArrayInput
}

func (LogGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logGroupArgs)(nil)).Elem()
}

type LogGroupInput interface {
	pulumi.Input

	ToLogGroupOutput() LogGroupOutput
	ToLogGroupOutputWithContext(ctx context.Context) LogGroupOutput
}

func (*LogGroup) ElementType() reflect.Type {
	return reflect.TypeOf((*LogGroup)(nil))
}

func (i *LogGroup) ToLogGroupOutput() LogGroupOutput {
	return i.ToLogGroupOutputWithContext(context.Background())
}

func (i *LogGroup) ToLogGroupOutputWithContext(ctx context.Context) LogGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogGroupOutput)
}

type LogGroupOutput struct{ *pulumi.OutputState }

func (LogGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogGroup)(nil))
}

func (o LogGroupOutput) ToLogGroupOutput() LogGroupOutput {
	return o
}

func (o LogGroupOutput) ToLogGroupOutputWithContext(ctx context.Context) LogGroupOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogGroupInput)(nil)).Elem(), &LogGroup{})
	pulumi.RegisterOutputType(LogGroupOutput{})
}
