// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package logs

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Logs::LogStream
type LogStream struct {
	pulumi.CustomResourceState

	// The name of the log group where the log stream is created.
	LogGroupName pulumi.StringOutput `pulumi:"logGroupName"`
	// The name of the log stream. The name must be unique wihtin the log group.
	LogStreamName pulumi.StringPtrOutput `pulumi:"logStreamName"`
}

// NewLogStream registers a new resource with the given unique name, arguments, and options.
func NewLogStream(ctx *pulumi.Context,
	name string, args *LogStreamArgs, opts ...pulumi.ResourceOption) (*LogStream, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LogGroupName == nil {
		return nil, errors.New("invalid value for required argument 'LogGroupName'")
	}
	var resource LogStream
	err := ctx.RegisterResource("aws-native:logs:LogStream", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogStream gets an existing LogStream resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogStream(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogStreamState, opts ...pulumi.ResourceOption) (*LogStream, error) {
	var resource LogStream
	err := ctx.ReadResource("aws-native:logs:LogStream", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogStream resources.
type logStreamState struct {
}

type LogStreamState struct {
}

func (LogStreamState) ElementType() reflect.Type {
	return reflect.TypeOf((*logStreamState)(nil)).Elem()
}

type logStreamArgs struct {
	// The name of the log group where the log stream is created.
	LogGroupName string `pulumi:"logGroupName"`
	// The name of the log stream. The name must be unique wihtin the log group.
	LogStreamName *string `pulumi:"logStreamName"`
}

// The set of arguments for constructing a LogStream resource.
type LogStreamArgs struct {
	// The name of the log group where the log stream is created.
	LogGroupName pulumi.StringInput
	// The name of the log stream. The name must be unique wihtin the log group.
	LogStreamName pulumi.StringPtrInput
}

func (LogStreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logStreamArgs)(nil)).Elem()
}

type LogStreamInput interface {
	pulumi.Input

	ToLogStreamOutput() LogStreamOutput
	ToLogStreamOutputWithContext(ctx context.Context) LogStreamOutput
}

func (*LogStream) ElementType() reflect.Type {
	return reflect.TypeOf((**LogStream)(nil)).Elem()
}

func (i *LogStream) ToLogStreamOutput() LogStreamOutput {
	return i.ToLogStreamOutputWithContext(context.Background())
}

func (i *LogStream) ToLogStreamOutputWithContext(ctx context.Context) LogStreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogStreamOutput)
}

type LogStreamOutput struct{ *pulumi.OutputState }

func (LogStreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogStream)(nil)).Elem()
}

func (o LogStreamOutput) ToLogStreamOutput() LogStreamOutput {
	return o
}

func (o LogStreamOutput) ToLogStreamOutputWithContext(ctx context.Context) LogStreamOutput {
	return o
}

// The name of the log group where the log stream is created.
func (o LogStreamOutput) LogGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *LogStream) pulumi.StringOutput { return v.LogGroupName }).(pulumi.StringOutput)
}

// The name of the log stream. The name must be unique wihtin the log group.
func (o LogStreamOutput) LogStreamName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogStream) pulumi.StringPtrOutput { return v.LogStreamName }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogStreamInput)(nil)).Elem(), &LogStream{})
	pulumi.RegisterOutputType(LogStreamOutput{})
}
