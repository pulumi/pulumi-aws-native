// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package logs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

//	A delivery source is an AWS resource that sends logs to an AWS destination. The destination can be CloudWatch Logs, Amazon S3, or Kinesis Data Firehose.
//
// Only some AWS services support being configured as a delivery source. These services are listed as Supported [V2 Permissions] in the table at [Enabling logging from AWS services](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/AWS-logs-and-resource-policy.html).
type DeliverySource struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) that uniquely identifies this delivery source.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The type of logs being delivered. Only mandatory when the resourceArn could match more than one. In such a case, the error message will contain all the possible options.
	LogType pulumi.StringPtrOutput `pulumi:"logType"`
	// The unique name of the Log source.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ARN of the resource that will be sending the logs.
	ResourceArn pulumi.StringPtrOutput `pulumi:"resourceArn"`
	// This array contains the ARN of the AWS resource that sends logs and is represented by this delivery source. Currently, only one ARN can be in the array.
	ResourceArns pulumi.StringArrayOutput `pulumi:"resourceArns"`
	// The AWS service that is sending logs.
	Service pulumi.StringOutput `pulumi:"service"`
	// The tags that have been assigned to this delivery source.
	Tags DeliverySourceTagArrayOutput `pulumi:"tags"`
}

// NewDeliverySource registers a new resource with the given unique name, arguments, and options.
func NewDeliverySource(ctx *pulumi.Context,
	name string, args *DeliverySourceArgs, opts ...pulumi.ResourceOption) (*DeliverySource, error) {
	if args == nil {
		args = &DeliverySourceArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"name",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DeliverySource
	err := ctx.RegisterResource("aws-native:logs:DeliverySource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeliverySource gets an existing DeliverySource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeliverySource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeliverySourceState, opts ...pulumi.ResourceOption) (*DeliverySource, error) {
	var resource DeliverySource
	err := ctx.ReadResource("aws-native:logs:DeliverySource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DeliverySource resources.
type deliverySourceState struct {
}

type DeliverySourceState struct {
}

func (DeliverySourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*deliverySourceState)(nil)).Elem()
}

type deliverySourceArgs struct {
	// The type of logs being delivered. Only mandatory when the resourceArn could match more than one. In such a case, the error message will contain all the possible options.
	LogType *string `pulumi:"logType"`
	// The unique name of the Log source.
	Name *string `pulumi:"name"`
	// The ARN of the resource that will be sending the logs.
	ResourceArn *string `pulumi:"resourceArn"`
	// The tags that have been assigned to this delivery source.
	Tags []DeliverySourceTag `pulumi:"tags"`
}

// The set of arguments for constructing a DeliverySource resource.
type DeliverySourceArgs struct {
	// The type of logs being delivered. Only mandatory when the resourceArn could match more than one. In such a case, the error message will contain all the possible options.
	LogType pulumi.StringPtrInput
	// The unique name of the Log source.
	Name pulumi.StringPtrInput
	// The ARN of the resource that will be sending the logs.
	ResourceArn pulumi.StringPtrInput
	// The tags that have been assigned to this delivery source.
	Tags DeliverySourceTagArrayInput
}

func (DeliverySourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deliverySourceArgs)(nil)).Elem()
}

type DeliverySourceInput interface {
	pulumi.Input

	ToDeliverySourceOutput() DeliverySourceOutput
	ToDeliverySourceOutputWithContext(ctx context.Context) DeliverySourceOutput
}

func (*DeliverySource) ElementType() reflect.Type {
	return reflect.TypeOf((**DeliverySource)(nil)).Elem()
}

func (i *DeliverySource) ToDeliverySourceOutput() DeliverySourceOutput {
	return i.ToDeliverySourceOutputWithContext(context.Background())
}

func (i *DeliverySource) ToDeliverySourceOutputWithContext(ctx context.Context) DeliverySourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeliverySourceOutput)
}

type DeliverySourceOutput struct{ *pulumi.OutputState }

func (DeliverySourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeliverySource)(nil)).Elem()
}

func (o DeliverySourceOutput) ToDeliverySourceOutput() DeliverySourceOutput {
	return o
}

func (o DeliverySourceOutput) ToDeliverySourceOutputWithContext(ctx context.Context) DeliverySourceOutput {
	return o
}

// The Amazon Resource Name (ARN) that uniquely identifies this delivery source.
func (o DeliverySourceOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *DeliverySource) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The type of logs being delivered. Only mandatory when the resourceArn could match more than one. In such a case, the error message will contain all the possible options.
func (o DeliverySourceOutput) LogType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeliverySource) pulumi.StringPtrOutput { return v.LogType }).(pulumi.StringPtrOutput)
}

// The unique name of the Log source.
func (o DeliverySourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DeliverySource) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ARN of the resource that will be sending the logs.
func (o DeliverySourceOutput) ResourceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeliverySource) pulumi.StringPtrOutput { return v.ResourceArn }).(pulumi.StringPtrOutput)
}

// This array contains the ARN of the AWS resource that sends logs and is represented by this delivery source. Currently, only one ARN can be in the array.
func (o DeliverySourceOutput) ResourceArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeliverySource) pulumi.StringArrayOutput { return v.ResourceArns }).(pulumi.StringArrayOutput)
}

// The AWS service that is sending logs.
func (o DeliverySourceOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v *DeliverySource) pulumi.StringOutput { return v.Service }).(pulumi.StringOutput)
}

// The tags that have been assigned to this delivery source.
func (o DeliverySourceOutput) Tags() DeliverySourceTagArrayOutput {
	return o.ApplyT(func(v *DeliverySource) DeliverySourceTagArrayOutput { return v.Tags }).(DeliverySourceTagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeliverySourceInput)(nil)).Elem(), &DeliverySource{})
	pulumi.RegisterOutputType(DeliverySourceOutput{})
}
