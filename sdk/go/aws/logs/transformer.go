// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package logs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Specifies a transformer on the log group to transform logs into consistent structured and information rich format.
type Transformer struct {
	pulumi.CustomResourceState

	// Existing log group that you want to associate with this transformer.
	LogGroupIdentifier pulumi.StringOutput `pulumi:"logGroupIdentifier"`
	// List of processors in a transformer
	TransformerConfig TransformerProcessorArrayOutput `pulumi:"transformerConfig"`
}

// NewTransformer registers a new resource with the given unique name, arguments, and options.
func NewTransformer(ctx *pulumi.Context,
	name string, args *TransformerArgs, opts ...pulumi.ResourceOption) (*Transformer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LogGroupIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'LogGroupIdentifier'")
	}
	if args.TransformerConfig == nil {
		return nil, errors.New("invalid value for required argument 'TransformerConfig'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"logGroupIdentifier",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Transformer
	err := ctx.RegisterResource("aws-native:logs:Transformer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTransformer gets an existing Transformer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTransformer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TransformerState, opts ...pulumi.ResourceOption) (*Transformer, error) {
	var resource Transformer
	err := ctx.ReadResource("aws-native:logs:Transformer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Transformer resources.
type transformerState struct {
}

type TransformerState struct {
}

func (TransformerState) ElementType() reflect.Type {
	return reflect.TypeOf((*transformerState)(nil)).Elem()
}

type transformerArgs struct {
	// Existing log group that you want to associate with this transformer.
	LogGroupIdentifier string `pulumi:"logGroupIdentifier"`
	// List of processors in a transformer
	TransformerConfig []TransformerProcessor `pulumi:"transformerConfig"`
}

// The set of arguments for constructing a Transformer resource.
type TransformerArgs struct {
	// Existing log group that you want to associate with this transformer.
	LogGroupIdentifier pulumi.StringInput
	// List of processors in a transformer
	TransformerConfig TransformerProcessorArrayInput
}

func (TransformerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*transformerArgs)(nil)).Elem()
}

type TransformerInput interface {
	pulumi.Input

	ToTransformerOutput() TransformerOutput
	ToTransformerOutputWithContext(ctx context.Context) TransformerOutput
}

func (*Transformer) ElementType() reflect.Type {
	return reflect.TypeOf((**Transformer)(nil)).Elem()
}

func (i *Transformer) ToTransformerOutput() TransformerOutput {
	return i.ToTransformerOutputWithContext(context.Background())
}

func (i *Transformer) ToTransformerOutputWithContext(ctx context.Context) TransformerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformerOutput)
}

type TransformerOutput struct{ *pulumi.OutputState }

func (TransformerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Transformer)(nil)).Elem()
}

func (o TransformerOutput) ToTransformerOutput() TransformerOutput {
	return o
}

func (o TransformerOutput) ToTransformerOutputWithContext(ctx context.Context) TransformerOutput {
	return o
}

// Existing log group that you want to associate with this transformer.
func (o TransformerOutput) LogGroupIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *Transformer) pulumi.StringOutput { return v.LogGroupIdentifier }).(pulumi.StringOutput)
}

// List of processors in a transformer
func (o TransformerOutput) TransformerConfig() TransformerProcessorArrayOutput {
	return o.ApplyT(func(v *Transformer) TransformerProcessorArrayOutput { return v.TransformerConfig }).(TransformerProcessorArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TransformerInput)(nil)).Elem(), &Transformer{})
	pulumi.RegisterOutputType(TransformerOutput{})
}
