// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package logs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Specifies a metric filter that describes how CloudWatch Logs extracts information from logs and transforms it into Amazon CloudWatch metrics.
func LookupMetricFilter(ctx *pulumi.Context, args *LookupMetricFilterArgs, opts ...pulumi.InvokeOption) (*LookupMetricFilterResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupMetricFilterResult
	err := ctx.Invoke("aws-native:logs:getMetricFilter", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupMetricFilterArgs struct {
	// A name for the metric filter.
	FilterName string `pulumi:"filterName"`
	// Existing log group that you want to associate with this filter.
	LogGroupName string `pulumi:"logGroupName"`
}

type LookupMetricFilterResult struct {
	// Pattern that Logs follows to interpret each entry in a log.
	FilterPattern *string `pulumi:"filterPattern"`
	// A collection of information that defines how metric data gets emitted.
	MetricTransformations []MetricFilterMetricTransformation `pulumi:"metricTransformations"`
}

func LookupMetricFilterOutput(ctx *pulumi.Context, args LookupMetricFilterOutputArgs, opts ...pulumi.InvokeOption) LookupMetricFilterResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupMetricFilterResult, error) {
			args := v.(LookupMetricFilterArgs)
			r, err := LookupMetricFilter(ctx, &args, opts...)
			var s LookupMetricFilterResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupMetricFilterResultOutput)
}

type LookupMetricFilterOutputArgs struct {
	// A name for the metric filter.
	FilterName pulumi.StringInput `pulumi:"filterName"`
	// Existing log group that you want to associate with this filter.
	LogGroupName pulumi.StringInput `pulumi:"logGroupName"`
}

func (LookupMetricFilterOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMetricFilterArgs)(nil)).Elem()
}

type LookupMetricFilterResultOutput struct{ *pulumi.OutputState }

func (LookupMetricFilterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMetricFilterResult)(nil)).Elem()
}

func (o LookupMetricFilterResultOutput) ToLookupMetricFilterResultOutput() LookupMetricFilterResultOutput {
	return o
}

func (o LookupMetricFilterResultOutput) ToLookupMetricFilterResultOutputWithContext(ctx context.Context) LookupMetricFilterResultOutput {
	return o
}

func (o LookupMetricFilterResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupMetricFilterResult] {
	return pulumix.Output[LookupMetricFilterResult]{
		OutputState: o.OutputState,
	}
}

// Pattern that Logs follows to interpret each entry in a log.
func (o LookupMetricFilterResultOutput) FilterPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupMetricFilterResult) *string { return v.FilterPattern }).(pulumi.StringPtrOutput)
}

// A collection of information that defines how metric data gets emitted.
func (o LookupMetricFilterResultOutput) MetricTransformations() MetricFilterMetricTransformationArrayOutput {
	return o.ApplyT(func(v LookupMetricFilterResult) []MetricFilterMetricTransformation { return v.MetricTransformations }).(MetricFilterMetricTransformationArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupMetricFilterResultOutput{})
}
