// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package logs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The AWS::Logs::Destination resource specifies a CloudWatch Logs destination. A destination encapsulates a physical resource (such as an Amazon Kinesis data stream) and enables you to subscribe that resource to a stream of log events.
type Destination struct {
	pulumi.CustomResourceState

	Arn pulumi.StringOutput `pulumi:"arn"`
	// The name of the destination resource
	DestinationName pulumi.StringOutput `pulumi:"destinationName"`
	// An IAM policy document that governs which AWS accounts can create subscription filters against this destination.
	DestinationPolicy pulumi.StringPtrOutput `pulumi:"destinationPolicy"`
	// The ARN of an IAM role that permits CloudWatch Logs to send data to the specified AWS resource
	RoleArn pulumi.StringOutput `pulumi:"roleArn"`
	// The ARN of the physical target where the log events are delivered (for example, a Kinesis stream)
	TargetArn pulumi.StringOutput `pulumi:"targetArn"`
}

// NewDestination registers a new resource with the given unique name, arguments, and options.
func NewDestination(ctx *pulumi.Context,
	name string, args *DestinationArgs, opts ...pulumi.ResourceOption) (*Destination, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	if args.TargetArn == nil {
		return nil, errors.New("invalid value for required argument 'TargetArn'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"destinationName",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Destination
	err := ctx.RegisterResource("aws-native:logs:Destination", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDestination gets an existing Destination resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDestination(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DestinationState, opts ...pulumi.ResourceOption) (*Destination, error) {
	var resource Destination
	err := ctx.ReadResource("aws-native:logs:Destination", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Destination resources.
type destinationState struct {
}

type DestinationState struct {
}

func (DestinationState) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationState)(nil)).Elem()
}

type destinationArgs struct {
	// The name of the destination resource
	DestinationName *string `pulumi:"destinationName"`
	// An IAM policy document that governs which AWS accounts can create subscription filters against this destination.
	DestinationPolicy *string `pulumi:"destinationPolicy"`
	// The ARN of an IAM role that permits CloudWatch Logs to send data to the specified AWS resource
	RoleArn string `pulumi:"roleArn"`
	// The ARN of the physical target where the log events are delivered (for example, a Kinesis stream)
	TargetArn string `pulumi:"targetArn"`
}

// The set of arguments for constructing a Destination resource.
type DestinationArgs struct {
	// The name of the destination resource
	DestinationName pulumi.StringPtrInput
	// An IAM policy document that governs which AWS accounts can create subscription filters against this destination.
	DestinationPolicy pulumi.StringPtrInput
	// The ARN of an IAM role that permits CloudWatch Logs to send data to the specified AWS resource
	RoleArn pulumi.StringInput
	// The ARN of the physical target where the log events are delivered (for example, a Kinesis stream)
	TargetArn pulumi.StringInput
}

func (DestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationArgs)(nil)).Elem()
}

type DestinationInput interface {
	pulumi.Input

	ToDestinationOutput() DestinationOutput
	ToDestinationOutputWithContext(ctx context.Context) DestinationOutput
}

func (*Destination) ElementType() reflect.Type {
	return reflect.TypeOf((**Destination)(nil)).Elem()
}

func (i *Destination) ToDestinationOutput() DestinationOutput {
	return i.ToDestinationOutputWithContext(context.Background())
}

func (i *Destination) ToDestinationOutputWithContext(ctx context.Context) DestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationOutput)
}

func (i *Destination) ToOutput(ctx context.Context) pulumix.Output[*Destination] {
	return pulumix.Output[*Destination]{
		OutputState: i.ToDestinationOutputWithContext(ctx).OutputState,
	}
}

type DestinationOutput struct{ *pulumi.OutputState }

func (DestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Destination)(nil)).Elem()
}

func (o DestinationOutput) ToDestinationOutput() DestinationOutput {
	return o
}

func (o DestinationOutput) ToDestinationOutputWithContext(ctx context.Context) DestinationOutput {
	return o
}

func (o DestinationOutput) ToOutput(ctx context.Context) pulumix.Output[*Destination] {
	return pulumix.Output[*Destination]{
		OutputState: o.OutputState,
	}
}

func (o DestinationOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Destination) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The name of the destination resource
func (o DestinationOutput) DestinationName() pulumi.StringOutput {
	return o.ApplyT(func(v *Destination) pulumi.StringOutput { return v.DestinationName }).(pulumi.StringOutput)
}

// An IAM policy document that governs which AWS accounts can create subscription filters against this destination.
func (o DestinationOutput) DestinationPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Destination) pulumi.StringPtrOutput { return v.DestinationPolicy }).(pulumi.StringPtrOutput)
}

// The ARN of an IAM role that permits CloudWatch Logs to send data to the specified AWS resource
func (o DestinationOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Destination) pulumi.StringOutput { return v.RoleArn }).(pulumi.StringOutput)
}

// The ARN of the physical target where the log events are delivered (for example, a Kinesis stream)
func (o DestinationOutput) TargetArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Destination) pulumi.StringOutput { return v.TargetArn }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationInput)(nil)).Elem(), &Destination{})
	pulumi.RegisterOutputType(DestinationOutput{})
}
