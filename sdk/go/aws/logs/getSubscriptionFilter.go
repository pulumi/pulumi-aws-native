// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package logs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The “AWS::Logs::SubscriptionFilter“ resource specifies a subscription filter and associates it with the specified log group. Subscription filters allow you to subscribe to a real-time stream of log events and have them delivered to a specific destination. Currently, the supported destinations are:
//
//   - An Amazon Kinesis data stream belonging to the same account as the subscription filter, for same-account delivery.
//
//   - A logical destination that belongs to a different account, for cross-account delivery.
//
//   - An Amazon Kinesis Firehose delivery stream that belongs to the same account as the subscription filter, for same-account delivery.
//
//   - An LAMlong function that belongs to the same account as the subscription filter, for same-account delivery.
//
//     There can be as many as two subscription filters associated with a log group.
func LookupSubscriptionFilter(ctx *pulumi.Context, args *LookupSubscriptionFilterArgs, opts ...pulumi.InvokeOption) (*LookupSubscriptionFilterResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSubscriptionFilterResult
	err := ctx.Invoke("aws-native:logs:getSubscriptionFilter", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupSubscriptionFilterArgs struct {
	// The name of the subscription filter.
	FilterName string `pulumi:"filterName"`
	// The log group to associate with the subscription filter. All log events that are uploaded to this log group are filtered and delivered to the specified AWS resource if the filter pattern matches the log events.
	LogGroupName string `pulumi:"logGroupName"`
}

type LookupSubscriptionFilterResult struct {
	// This parameter is valid only for log groups that have an active log transformer. For more information about log transformers, see [PutTransformer](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutTransformer.html).
	//  If this value is ``true``, the subscription filter is applied on the transformed version of the log events instead of the original ingested log events.
	ApplyOnTransformedLogs *bool `pulumi:"applyOnTransformedLogs"`
	// The Amazon Resource Name (ARN) of the destination.
	DestinationArn *string `pulumi:"destinationArn"`
	// The method used to distribute log data to the destination, which can be either random or grouped by log stream.
	Distribution *SubscriptionFilterDistribution `pulumi:"distribution"`
	// The list of system fields that are included in the log events sent to the subscription destination. Returns the `emitSystemFields` value if it was specified when the subscription filter was created.
	EmitSystemFields []string `pulumi:"emitSystemFields"`
	// The filter expression that specifies which log events are processed by this subscription filter based on system fields. Returns the `fieldSelectionCriteria` value if it was specified when the subscription filter was created.
	FieldSelectionCriteria *string `pulumi:"fieldSelectionCriteria"`
	// The filtering expressions that restrict what gets delivered to the destination AWS resource. For more information about the filter pattern syntax, see [Filter and Pattern Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html).
	FilterPattern *string `pulumi:"filterPattern"`
	// The ARN of an IAM role that grants CWL permissions to deliver ingested log events to the destination stream. You don't need to provide the ARN when you are working with a logical destination for cross-account delivery.
	RoleArn *string `pulumi:"roleArn"`
}

func LookupSubscriptionFilterOutput(ctx *pulumi.Context, args LookupSubscriptionFilterOutputArgs, opts ...pulumi.InvokeOption) LookupSubscriptionFilterResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupSubscriptionFilterResultOutput, error) {
			args := v.(LookupSubscriptionFilterArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:logs:getSubscriptionFilter", args, LookupSubscriptionFilterResultOutput{}, options).(LookupSubscriptionFilterResultOutput), nil
		}).(LookupSubscriptionFilterResultOutput)
}

type LookupSubscriptionFilterOutputArgs struct {
	// The name of the subscription filter.
	FilterName pulumi.StringInput `pulumi:"filterName"`
	// The log group to associate with the subscription filter. All log events that are uploaded to this log group are filtered and delivered to the specified AWS resource if the filter pattern matches the log events.
	LogGroupName pulumi.StringInput `pulumi:"logGroupName"`
}

func (LookupSubscriptionFilterOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSubscriptionFilterArgs)(nil)).Elem()
}

type LookupSubscriptionFilterResultOutput struct{ *pulumi.OutputState }

func (LookupSubscriptionFilterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSubscriptionFilterResult)(nil)).Elem()
}

func (o LookupSubscriptionFilterResultOutput) ToLookupSubscriptionFilterResultOutput() LookupSubscriptionFilterResultOutput {
	return o
}

func (o LookupSubscriptionFilterResultOutput) ToLookupSubscriptionFilterResultOutputWithContext(ctx context.Context) LookupSubscriptionFilterResultOutput {
	return o
}

// This parameter is valid only for log groups that have an active log transformer. For more information about log transformers, see [PutTransformer](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutTransformer.html).
//
//	If this value is ``true``, the subscription filter is applied on the transformed version of the log events instead of the original ingested log events.
func (o LookupSubscriptionFilterResultOutput) ApplyOnTransformedLogs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupSubscriptionFilterResult) *bool { return v.ApplyOnTransformedLogs }).(pulumi.BoolPtrOutput)
}

// The Amazon Resource Name (ARN) of the destination.
func (o LookupSubscriptionFilterResultOutput) DestinationArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSubscriptionFilterResult) *string { return v.DestinationArn }).(pulumi.StringPtrOutput)
}

// The method used to distribute log data to the destination, which can be either random or grouped by log stream.
func (o LookupSubscriptionFilterResultOutput) Distribution() SubscriptionFilterDistributionPtrOutput {
	return o.ApplyT(func(v LookupSubscriptionFilterResult) *SubscriptionFilterDistribution { return v.Distribution }).(SubscriptionFilterDistributionPtrOutput)
}

// The list of system fields that are included in the log events sent to the subscription destination. Returns the `emitSystemFields` value if it was specified when the subscription filter was created.
func (o LookupSubscriptionFilterResultOutput) EmitSystemFields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSubscriptionFilterResult) []string { return v.EmitSystemFields }).(pulumi.StringArrayOutput)
}

// The filter expression that specifies which log events are processed by this subscription filter based on system fields. Returns the `fieldSelectionCriteria` value if it was specified when the subscription filter was created.
func (o LookupSubscriptionFilterResultOutput) FieldSelectionCriteria() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSubscriptionFilterResult) *string { return v.FieldSelectionCriteria }).(pulumi.StringPtrOutput)
}

// The filtering expressions that restrict what gets delivered to the destination AWS resource. For more information about the filter pattern syntax, see [Filter and Pattern Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html).
func (o LookupSubscriptionFilterResultOutput) FilterPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSubscriptionFilterResult) *string { return v.FilterPattern }).(pulumi.StringPtrOutput)
}

// The ARN of an IAM role that grants CWL permissions to deliver ingested log events to the destination stream. You don't need to provide the ARN when you are working with a logical destination for cross-account delivery.
func (o LookupSubscriptionFilterResultOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSubscriptionFilterResult) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSubscriptionFilterResultOutput{})
}
