// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package logs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Subscription filters allow you to subscribe to a real-time stream of log events and have them delivered to a specific destination.
func LookupSubscriptionFilter(ctx *pulumi.Context, args *LookupSubscriptionFilterArgs, opts ...pulumi.InvokeOption) (*LookupSubscriptionFilterResult, error) {
	var rv LookupSubscriptionFilterResult
	err := ctx.Invoke("aws-native:logs:getSubscriptionFilter", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupSubscriptionFilterArgs struct {
	// The name of the filter generated by resource.
	FilterName string `pulumi:"filterName"`
	// Existing log group that you want to associate with this filter.
	LogGroupName string `pulumi:"logGroupName"`
}

type LookupSubscriptionFilterResult struct {
	// The Amazon Resource Name (ARN) of the destination.
	DestinationArn *string `pulumi:"destinationArn"`
	// The method used to distribute log data to the destination. By default, log data is grouped by log stream, but the grouping can be set to random for a more even distribution. This property is only applicable when the destination is an Amazon Kinesis stream.
	Distribution *SubscriptionFilterDistribution `pulumi:"distribution"`
	// The filtering expressions that restrict what gets delivered to the destination AWS resource.
	FilterPattern *string `pulumi:"filterPattern"`
	// The ARN of an IAM role that grants CloudWatch Logs permissions to deliver ingested log events to the destination stream. You don't need to provide the ARN when you are working with a logical destination for cross-account delivery.
	RoleArn *string `pulumi:"roleArn"`
}

func LookupSubscriptionFilterOutput(ctx *pulumi.Context, args LookupSubscriptionFilterOutputArgs, opts ...pulumi.InvokeOption) LookupSubscriptionFilterResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSubscriptionFilterResult, error) {
			args := v.(LookupSubscriptionFilterArgs)
			r, err := LookupSubscriptionFilter(ctx, &args, opts...)
			var s LookupSubscriptionFilterResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSubscriptionFilterResultOutput)
}

type LookupSubscriptionFilterOutputArgs struct {
	// The name of the filter generated by resource.
	FilterName pulumi.StringInput `pulumi:"filterName"`
	// Existing log group that you want to associate with this filter.
	LogGroupName pulumi.StringInput `pulumi:"logGroupName"`
}

func (LookupSubscriptionFilterOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSubscriptionFilterArgs)(nil)).Elem()
}

type LookupSubscriptionFilterResultOutput struct{ *pulumi.OutputState }

func (LookupSubscriptionFilterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSubscriptionFilterResult)(nil)).Elem()
}

func (o LookupSubscriptionFilterResultOutput) ToLookupSubscriptionFilterResultOutput() LookupSubscriptionFilterResultOutput {
	return o
}

func (o LookupSubscriptionFilterResultOutput) ToLookupSubscriptionFilterResultOutputWithContext(ctx context.Context) LookupSubscriptionFilterResultOutput {
	return o
}

// The Amazon Resource Name (ARN) of the destination.
func (o LookupSubscriptionFilterResultOutput) DestinationArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSubscriptionFilterResult) *string { return v.DestinationArn }).(pulumi.StringPtrOutput)
}

// The method used to distribute log data to the destination. By default, log data is grouped by log stream, but the grouping can be set to random for a more even distribution. This property is only applicable when the destination is an Amazon Kinesis stream.
func (o LookupSubscriptionFilterResultOutput) Distribution() SubscriptionFilterDistributionPtrOutput {
	return o.ApplyT(func(v LookupSubscriptionFilterResult) *SubscriptionFilterDistribution { return v.Distribution }).(SubscriptionFilterDistributionPtrOutput)
}

// The filtering expressions that restrict what gets delivered to the destination AWS resource.
func (o LookupSubscriptionFilterResultOutput) FilterPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSubscriptionFilterResult) *string { return v.FilterPattern }).(pulumi.StringPtrOutput)
}

// The ARN of an IAM role that grants CloudWatch Logs permissions to deliver ingested log events to the destination stream. You don't need to provide the ARN when you are working with a logical destination for cross-account delivery.
func (o LookupSubscriptionFilterResultOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSubscriptionFilterResult) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSubscriptionFilterResultOutput{})
}
