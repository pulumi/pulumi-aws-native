// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package logs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Type of the policy.
type AccountPolicyPolicyType string

const (
	AccountPolicyPolicyTypeDataProtectionPolicy = AccountPolicyPolicyType("DATA_PROTECTION_POLICY")
)

func (AccountPolicyPolicyType) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountPolicyPolicyType)(nil)).Elem()
}

func (e AccountPolicyPolicyType) ToAccountPolicyPolicyTypeOutput() AccountPolicyPolicyTypeOutput {
	return pulumi.ToOutput(e).(AccountPolicyPolicyTypeOutput)
}

func (e AccountPolicyPolicyType) ToAccountPolicyPolicyTypeOutputWithContext(ctx context.Context) AccountPolicyPolicyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AccountPolicyPolicyTypeOutput)
}

func (e AccountPolicyPolicyType) ToAccountPolicyPolicyTypePtrOutput() AccountPolicyPolicyTypePtrOutput {
	return e.ToAccountPolicyPolicyTypePtrOutputWithContext(context.Background())
}

func (e AccountPolicyPolicyType) ToAccountPolicyPolicyTypePtrOutputWithContext(ctx context.Context) AccountPolicyPolicyTypePtrOutput {
	return AccountPolicyPolicyType(e).ToAccountPolicyPolicyTypeOutputWithContext(ctx).ToAccountPolicyPolicyTypePtrOutputWithContext(ctx)
}

func (e AccountPolicyPolicyType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AccountPolicyPolicyType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AccountPolicyPolicyType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AccountPolicyPolicyType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AccountPolicyPolicyTypeOutput struct{ *pulumi.OutputState }

func (AccountPolicyPolicyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountPolicyPolicyType)(nil)).Elem()
}

func (o AccountPolicyPolicyTypeOutput) ToAccountPolicyPolicyTypeOutput() AccountPolicyPolicyTypeOutput {
	return o
}

func (o AccountPolicyPolicyTypeOutput) ToAccountPolicyPolicyTypeOutputWithContext(ctx context.Context) AccountPolicyPolicyTypeOutput {
	return o
}

func (o AccountPolicyPolicyTypeOutput) ToAccountPolicyPolicyTypePtrOutput() AccountPolicyPolicyTypePtrOutput {
	return o.ToAccountPolicyPolicyTypePtrOutputWithContext(context.Background())
}

func (o AccountPolicyPolicyTypeOutput) ToAccountPolicyPolicyTypePtrOutputWithContext(ctx context.Context) AccountPolicyPolicyTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AccountPolicyPolicyType) *AccountPolicyPolicyType {
		return &v
	}).(AccountPolicyPolicyTypePtrOutput)
}

func (o AccountPolicyPolicyTypeOutput) ToOutput(ctx context.Context) pulumix.Output[AccountPolicyPolicyType] {
	return pulumix.Output[AccountPolicyPolicyType]{
		OutputState: o.OutputState,
	}
}

func (o AccountPolicyPolicyTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AccountPolicyPolicyTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AccountPolicyPolicyType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AccountPolicyPolicyTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AccountPolicyPolicyTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AccountPolicyPolicyType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AccountPolicyPolicyTypePtrOutput struct{ *pulumi.OutputState }

func (AccountPolicyPolicyTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountPolicyPolicyType)(nil)).Elem()
}

func (o AccountPolicyPolicyTypePtrOutput) ToAccountPolicyPolicyTypePtrOutput() AccountPolicyPolicyTypePtrOutput {
	return o
}

func (o AccountPolicyPolicyTypePtrOutput) ToAccountPolicyPolicyTypePtrOutputWithContext(ctx context.Context) AccountPolicyPolicyTypePtrOutput {
	return o
}

func (o AccountPolicyPolicyTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AccountPolicyPolicyType] {
	return pulumix.Output[*AccountPolicyPolicyType]{
		OutputState: o.OutputState,
	}
}

func (o AccountPolicyPolicyTypePtrOutput) Elem() AccountPolicyPolicyTypeOutput {
	return o.ApplyT(func(v *AccountPolicyPolicyType) AccountPolicyPolicyType {
		if v != nil {
			return *v
		}
		var ret AccountPolicyPolicyType
		return ret
	}).(AccountPolicyPolicyTypeOutput)
}

func (o AccountPolicyPolicyTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AccountPolicyPolicyTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AccountPolicyPolicyType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AccountPolicyPolicyTypeInput is an input type that accepts AccountPolicyPolicyTypeArgs and AccountPolicyPolicyTypeOutput values.
// You can construct a concrete instance of `AccountPolicyPolicyTypeInput` via:
//
//	AccountPolicyPolicyTypeArgs{...}
type AccountPolicyPolicyTypeInput interface {
	pulumi.Input

	ToAccountPolicyPolicyTypeOutput() AccountPolicyPolicyTypeOutput
	ToAccountPolicyPolicyTypeOutputWithContext(context.Context) AccountPolicyPolicyTypeOutput
}

var accountPolicyPolicyTypePtrType = reflect.TypeOf((**AccountPolicyPolicyType)(nil)).Elem()

type AccountPolicyPolicyTypePtrInput interface {
	pulumi.Input

	ToAccountPolicyPolicyTypePtrOutput() AccountPolicyPolicyTypePtrOutput
	ToAccountPolicyPolicyTypePtrOutputWithContext(context.Context) AccountPolicyPolicyTypePtrOutput
}

type accountPolicyPolicyTypePtr string

func AccountPolicyPolicyTypePtr(v string) AccountPolicyPolicyTypePtrInput {
	return (*accountPolicyPolicyTypePtr)(&v)
}

func (*accountPolicyPolicyTypePtr) ElementType() reflect.Type {
	return accountPolicyPolicyTypePtrType
}

func (in *accountPolicyPolicyTypePtr) ToAccountPolicyPolicyTypePtrOutput() AccountPolicyPolicyTypePtrOutput {
	return pulumi.ToOutput(in).(AccountPolicyPolicyTypePtrOutput)
}

func (in *accountPolicyPolicyTypePtr) ToAccountPolicyPolicyTypePtrOutputWithContext(ctx context.Context) AccountPolicyPolicyTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AccountPolicyPolicyTypePtrOutput)
}

func (in *accountPolicyPolicyTypePtr) ToOutput(ctx context.Context) pulumix.Output[*AccountPolicyPolicyType] {
	return pulumix.Output[*AccountPolicyPolicyType]{
		OutputState: in.ToAccountPolicyPolicyTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Scope for policy application
type AccountPolicyScope string

const (
	AccountPolicyScopeAll = AccountPolicyScope("ALL")
)

func (AccountPolicyScope) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountPolicyScope)(nil)).Elem()
}

func (e AccountPolicyScope) ToAccountPolicyScopeOutput() AccountPolicyScopeOutput {
	return pulumi.ToOutput(e).(AccountPolicyScopeOutput)
}

func (e AccountPolicyScope) ToAccountPolicyScopeOutputWithContext(ctx context.Context) AccountPolicyScopeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AccountPolicyScopeOutput)
}

func (e AccountPolicyScope) ToAccountPolicyScopePtrOutput() AccountPolicyScopePtrOutput {
	return e.ToAccountPolicyScopePtrOutputWithContext(context.Background())
}

func (e AccountPolicyScope) ToAccountPolicyScopePtrOutputWithContext(ctx context.Context) AccountPolicyScopePtrOutput {
	return AccountPolicyScope(e).ToAccountPolicyScopeOutputWithContext(ctx).ToAccountPolicyScopePtrOutputWithContext(ctx)
}

func (e AccountPolicyScope) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AccountPolicyScope) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AccountPolicyScope) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AccountPolicyScope) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AccountPolicyScopeOutput struct{ *pulumi.OutputState }

func (AccountPolicyScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountPolicyScope)(nil)).Elem()
}

func (o AccountPolicyScopeOutput) ToAccountPolicyScopeOutput() AccountPolicyScopeOutput {
	return o
}

func (o AccountPolicyScopeOutput) ToAccountPolicyScopeOutputWithContext(ctx context.Context) AccountPolicyScopeOutput {
	return o
}

func (o AccountPolicyScopeOutput) ToAccountPolicyScopePtrOutput() AccountPolicyScopePtrOutput {
	return o.ToAccountPolicyScopePtrOutputWithContext(context.Background())
}

func (o AccountPolicyScopeOutput) ToAccountPolicyScopePtrOutputWithContext(ctx context.Context) AccountPolicyScopePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AccountPolicyScope) *AccountPolicyScope {
		return &v
	}).(AccountPolicyScopePtrOutput)
}

func (o AccountPolicyScopeOutput) ToOutput(ctx context.Context) pulumix.Output[AccountPolicyScope] {
	return pulumix.Output[AccountPolicyScope]{
		OutputState: o.OutputState,
	}
}

func (o AccountPolicyScopeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AccountPolicyScopeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AccountPolicyScope) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AccountPolicyScopeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AccountPolicyScopeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AccountPolicyScope) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AccountPolicyScopePtrOutput struct{ *pulumi.OutputState }

func (AccountPolicyScopePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountPolicyScope)(nil)).Elem()
}

func (o AccountPolicyScopePtrOutput) ToAccountPolicyScopePtrOutput() AccountPolicyScopePtrOutput {
	return o
}

func (o AccountPolicyScopePtrOutput) ToAccountPolicyScopePtrOutputWithContext(ctx context.Context) AccountPolicyScopePtrOutput {
	return o
}

func (o AccountPolicyScopePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AccountPolicyScope] {
	return pulumix.Output[*AccountPolicyScope]{
		OutputState: o.OutputState,
	}
}

func (o AccountPolicyScopePtrOutput) Elem() AccountPolicyScopeOutput {
	return o.ApplyT(func(v *AccountPolicyScope) AccountPolicyScope {
		if v != nil {
			return *v
		}
		var ret AccountPolicyScope
		return ret
	}).(AccountPolicyScopeOutput)
}

func (o AccountPolicyScopePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AccountPolicyScopePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AccountPolicyScope) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AccountPolicyScopeInput is an input type that accepts AccountPolicyScopeArgs and AccountPolicyScopeOutput values.
// You can construct a concrete instance of `AccountPolicyScopeInput` via:
//
//	AccountPolicyScopeArgs{...}
type AccountPolicyScopeInput interface {
	pulumi.Input

	ToAccountPolicyScopeOutput() AccountPolicyScopeOutput
	ToAccountPolicyScopeOutputWithContext(context.Context) AccountPolicyScopeOutput
}

var accountPolicyScopePtrType = reflect.TypeOf((**AccountPolicyScope)(nil)).Elem()

type AccountPolicyScopePtrInput interface {
	pulumi.Input

	ToAccountPolicyScopePtrOutput() AccountPolicyScopePtrOutput
	ToAccountPolicyScopePtrOutputWithContext(context.Context) AccountPolicyScopePtrOutput
}

type accountPolicyScopePtr string

func AccountPolicyScopePtr(v string) AccountPolicyScopePtrInput {
	return (*accountPolicyScopePtr)(&v)
}

func (*accountPolicyScopePtr) ElementType() reflect.Type {
	return accountPolicyScopePtrType
}

func (in *accountPolicyScopePtr) ToAccountPolicyScopePtrOutput() AccountPolicyScopePtrOutput {
	return pulumi.ToOutput(in).(AccountPolicyScopePtrOutput)
}

func (in *accountPolicyScopePtr) ToAccountPolicyScopePtrOutputWithContext(ctx context.Context) AccountPolicyScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AccountPolicyScopePtrOutput)
}

func (in *accountPolicyScopePtr) ToOutput(ctx context.Context) pulumix.Output[*AccountPolicyScope] {
	return pulumix.Output[*AccountPolicyScope]{
		OutputState: in.ToAccountPolicyScopePtrOutputWithContext(ctx).OutputState,
	}
}

// How often log group is evaluated
type LogAnomalyDetectorEvaluationFrequency string

const (
	LogAnomalyDetectorEvaluationFrequencyFiveMin    = LogAnomalyDetectorEvaluationFrequency("FIVE_MIN")
	LogAnomalyDetectorEvaluationFrequencyTenMin     = LogAnomalyDetectorEvaluationFrequency("TEN_MIN")
	LogAnomalyDetectorEvaluationFrequencyFifteenMin = LogAnomalyDetectorEvaluationFrequency("FIFTEEN_MIN")
	LogAnomalyDetectorEvaluationFrequencyThirtyMin  = LogAnomalyDetectorEvaluationFrequency("THIRTY_MIN")
	LogAnomalyDetectorEvaluationFrequencyOneHour    = LogAnomalyDetectorEvaluationFrequency("ONE_HOUR")
)

func (LogAnomalyDetectorEvaluationFrequency) ElementType() reflect.Type {
	return reflect.TypeOf((*LogAnomalyDetectorEvaluationFrequency)(nil)).Elem()
}

func (e LogAnomalyDetectorEvaluationFrequency) ToLogAnomalyDetectorEvaluationFrequencyOutput() LogAnomalyDetectorEvaluationFrequencyOutput {
	return pulumi.ToOutput(e).(LogAnomalyDetectorEvaluationFrequencyOutput)
}

func (e LogAnomalyDetectorEvaluationFrequency) ToLogAnomalyDetectorEvaluationFrequencyOutputWithContext(ctx context.Context) LogAnomalyDetectorEvaluationFrequencyOutput {
	return pulumi.ToOutputWithContext(ctx, e).(LogAnomalyDetectorEvaluationFrequencyOutput)
}

func (e LogAnomalyDetectorEvaluationFrequency) ToLogAnomalyDetectorEvaluationFrequencyPtrOutput() LogAnomalyDetectorEvaluationFrequencyPtrOutput {
	return e.ToLogAnomalyDetectorEvaluationFrequencyPtrOutputWithContext(context.Background())
}

func (e LogAnomalyDetectorEvaluationFrequency) ToLogAnomalyDetectorEvaluationFrequencyPtrOutputWithContext(ctx context.Context) LogAnomalyDetectorEvaluationFrequencyPtrOutput {
	return LogAnomalyDetectorEvaluationFrequency(e).ToLogAnomalyDetectorEvaluationFrequencyOutputWithContext(ctx).ToLogAnomalyDetectorEvaluationFrequencyPtrOutputWithContext(ctx)
}

func (e LogAnomalyDetectorEvaluationFrequency) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e LogAnomalyDetectorEvaluationFrequency) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e LogAnomalyDetectorEvaluationFrequency) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e LogAnomalyDetectorEvaluationFrequency) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type LogAnomalyDetectorEvaluationFrequencyOutput struct{ *pulumi.OutputState }

func (LogAnomalyDetectorEvaluationFrequencyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogAnomalyDetectorEvaluationFrequency)(nil)).Elem()
}

func (o LogAnomalyDetectorEvaluationFrequencyOutput) ToLogAnomalyDetectorEvaluationFrequencyOutput() LogAnomalyDetectorEvaluationFrequencyOutput {
	return o
}

func (o LogAnomalyDetectorEvaluationFrequencyOutput) ToLogAnomalyDetectorEvaluationFrequencyOutputWithContext(ctx context.Context) LogAnomalyDetectorEvaluationFrequencyOutput {
	return o
}

func (o LogAnomalyDetectorEvaluationFrequencyOutput) ToLogAnomalyDetectorEvaluationFrequencyPtrOutput() LogAnomalyDetectorEvaluationFrequencyPtrOutput {
	return o.ToLogAnomalyDetectorEvaluationFrequencyPtrOutputWithContext(context.Background())
}

func (o LogAnomalyDetectorEvaluationFrequencyOutput) ToLogAnomalyDetectorEvaluationFrequencyPtrOutputWithContext(ctx context.Context) LogAnomalyDetectorEvaluationFrequencyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LogAnomalyDetectorEvaluationFrequency) *LogAnomalyDetectorEvaluationFrequency {
		return &v
	}).(LogAnomalyDetectorEvaluationFrequencyPtrOutput)
}

func (o LogAnomalyDetectorEvaluationFrequencyOutput) ToOutput(ctx context.Context) pulumix.Output[LogAnomalyDetectorEvaluationFrequency] {
	return pulumix.Output[LogAnomalyDetectorEvaluationFrequency]{
		OutputState: o.OutputState,
	}
}

func (o LogAnomalyDetectorEvaluationFrequencyOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o LogAnomalyDetectorEvaluationFrequencyOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LogAnomalyDetectorEvaluationFrequency) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o LogAnomalyDetectorEvaluationFrequencyOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LogAnomalyDetectorEvaluationFrequencyOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LogAnomalyDetectorEvaluationFrequency) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type LogAnomalyDetectorEvaluationFrequencyPtrOutput struct{ *pulumi.OutputState }

func (LogAnomalyDetectorEvaluationFrequencyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogAnomalyDetectorEvaluationFrequency)(nil)).Elem()
}

func (o LogAnomalyDetectorEvaluationFrequencyPtrOutput) ToLogAnomalyDetectorEvaluationFrequencyPtrOutput() LogAnomalyDetectorEvaluationFrequencyPtrOutput {
	return o
}

func (o LogAnomalyDetectorEvaluationFrequencyPtrOutput) ToLogAnomalyDetectorEvaluationFrequencyPtrOutputWithContext(ctx context.Context) LogAnomalyDetectorEvaluationFrequencyPtrOutput {
	return o
}

func (o LogAnomalyDetectorEvaluationFrequencyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LogAnomalyDetectorEvaluationFrequency] {
	return pulumix.Output[*LogAnomalyDetectorEvaluationFrequency]{
		OutputState: o.OutputState,
	}
}

func (o LogAnomalyDetectorEvaluationFrequencyPtrOutput) Elem() LogAnomalyDetectorEvaluationFrequencyOutput {
	return o.ApplyT(func(v *LogAnomalyDetectorEvaluationFrequency) LogAnomalyDetectorEvaluationFrequency {
		if v != nil {
			return *v
		}
		var ret LogAnomalyDetectorEvaluationFrequency
		return ret
	}).(LogAnomalyDetectorEvaluationFrequencyOutput)
}

func (o LogAnomalyDetectorEvaluationFrequencyPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LogAnomalyDetectorEvaluationFrequencyPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *LogAnomalyDetectorEvaluationFrequency) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// LogAnomalyDetectorEvaluationFrequencyInput is an input type that accepts LogAnomalyDetectorEvaluationFrequencyArgs and LogAnomalyDetectorEvaluationFrequencyOutput values.
// You can construct a concrete instance of `LogAnomalyDetectorEvaluationFrequencyInput` via:
//
//	LogAnomalyDetectorEvaluationFrequencyArgs{...}
type LogAnomalyDetectorEvaluationFrequencyInput interface {
	pulumi.Input

	ToLogAnomalyDetectorEvaluationFrequencyOutput() LogAnomalyDetectorEvaluationFrequencyOutput
	ToLogAnomalyDetectorEvaluationFrequencyOutputWithContext(context.Context) LogAnomalyDetectorEvaluationFrequencyOutput
}

var logAnomalyDetectorEvaluationFrequencyPtrType = reflect.TypeOf((**LogAnomalyDetectorEvaluationFrequency)(nil)).Elem()

type LogAnomalyDetectorEvaluationFrequencyPtrInput interface {
	pulumi.Input

	ToLogAnomalyDetectorEvaluationFrequencyPtrOutput() LogAnomalyDetectorEvaluationFrequencyPtrOutput
	ToLogAnomalyDetectorEvaluationFrequencyPtrOutputWithContext(context.Context) LogAnomalyDetectorEvaluationFrequencyPtrOutput
}

type logAnomalyDetectorEvaluationFrequencyPtr string

func LogAnomalyDetectorEvaluationFrequencyPtr(v string) LogAnomalyDetectorEvaluationFrequencyPtrInput {
	return (*logAnomalyDetectorEvaluationFrequencyPtr)(&v)
}

func (*logAnomalyDetectorEvaluationFrequencyPtr) ElementType() reflect.Type {
	return logAnomalyDetectorEvaluationFrequencyPtrType
}

func (in *logAnomalyDetectorEvaluationFrequencyPtr) ToLogAnomalyDetectorEvaluationFrequencyPtrOutput() LogAnomalyDetectorEvaluationFrequencyPtrOutput {
	return pulumi.ToOutput(in).(LogAnomalyDetectorEvaluationFrequencyPtrOutput)
}

func (in *logAnomalyDetectorEvaluationFrequencyPtr) ToLogAnomalyDetectorEvaluationFrequencyPtrOutputWithContext(ctx context.Context) LogAnomalyDetectorEvaluationFrequencyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(LogAnomalyDetectorEvaluationFrequencyPtrOutput)
}

func (in *logAnomalyDetectorEvaluationFrequencyPtr) ToOutput(ctx context.Context) pulumix.Output[*LogAnomalyDetectorEvaluationFrequency] {
	return pulumix.Output[*LogAnomalyDetectorEvaluationFrequency]{
		OutputState: in.ToLogAnomalyDetectorEvaluationFrequencyPtrOutputWithContext(ctx).OutputState,
	}
}

// The class of the log group. Possible values are: STANDARD and INFREQUENT_ACCESS, with STANDARD being the default class
type LogGroupClass string

const (
	LogGroupClassStandard         = LogGroupClass("STANDARD")
	LogGroupClassInfrequentAccess = LogGroupClass("INFREQUENT_ACCESS")
)

func (LogGroupClass) ElementType() reflect.Type {
	return reflect.TypeOf((*LogGroupClass)(nil)).Elem()
}

func (e LogGroupClass) ToLogGroupClassOutput() LogGroupClassOutput {
	return pulumi.ToOutput(e).(LogGroupClassOutput)
}

func (e LogGroupClass) ToLogGroupClassOutputWithContext(ctx context.Context) LogGroupClassOutput {
	return pulumi.ToOutputWithContext(ctx, e).(LogGroupClassOutput)
}

func (e LogGroupClass) ToLogGroupClassPtrOutput() LogGroupClassPtrOutput {
	return e.ToLogGroupClassPtrOutputWithContext(context.Background())
}

func (e LogGroupClass) ToLogGroupClassPtrOutputWithContext(ctx context.Context) LogGroupClassPtrOutput {
	return LogGroupClass(e).ToLogGroupClassOutputWithContext(ctx).ToLogGroupClassPtrOutputWithContext(ctx)
}

func (e LogGroupClass) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e LogGroupClass) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e LogGroupClass) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e LogGroupClass) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type LogGroupClassOutput struct{ *pulumi.OutputState }

func (LogGroupClassOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogGroupClass)(nil)).Elem()
}

func (o LogGroupClassOutput) ToLogGroupClassOutput() LogGroupClassOutput {
	return o
}

func (o LogGroupClassOutput) ToLogGroupClassOutputWithContext(ctx context.Context) LogGroupClassOutput {
	return o
}

func (o LogGroupClassOutput) ToLogGroupClassPtrOutput() LogGroupClassPtrOutput {
	return o.ToLogGroupClassPtrOutputWithContext(context.Background())
}

func (o LogGroupClassOutput) ToLogGroupClassPtrOutputWithContext(ctx context.Context) LogGroupClassPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LogGroupClass) *LogGroupClass {
		return &v
	}).(LogGroupClassPtrOutput)
}

func (o LogGroupClassOutput) ToOutput(ctx context.Context) pulumix.Output[LogGroupClass] {
	return pulumix.Output[LogGroupClass]{
		OutputState: o.OutputState,
	}
}

func (o LogGroupClassOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o LogGroupClassOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LogGroupClass) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o LogGroupClassOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LogGroupClassOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LogGroupClass) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type LogGroupClassPtrOutput struct{ *pulumi.OutputState }

func (LogGroupClassPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogGroupClass)(nil)).Elem()
}

func (o LogGroupClassPtrOutput) ToLogGroupClassPtrOutput() LogGroupClassPtrOutput {
	return o
}

func (o LogGroupClassPtrOutput) ToLogGroupClassPtrOutputWithContext(ctx context.Context) LogGroupClassPtrOutput {
	return o
}

func (o LogGroupClassPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LogGroupClass] {
	return pulumix.Output[*LogGroupClass]{
		OutputState: o.OutputState,
	}
}

func (o LogGroupClassPtrOutput) Elem() LogGroupClassOutput {
	return o.ApplyT(func(v *LogGroupClass) LogGroupClass {
		if v != nil {
			return *v
		}
		var ret LogGroupClass
		return ret
	}).(LogGroupClassOutput)
}

func (o LogGroupClassPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LogGroupClassPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *LogGroupClass) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// LogGroupClassInput is an input type that accepts LogGroupClassArgs and LogGroupClassOutput values.
// You can construct a concrete instance of `LogGroupClassInput` via:
//
//	LogGroupClassArgs{...}
type LogGroupClassInput interface {
	pulumi.Input

	ToLogGroupClassOutput() LogGroupClassOutput
	ToLogGroupClassOutputWithContext(context.Context) LogGroupClassOutput
}

var logGroupClassPtrType = reflect.TypeOf((**LogGroupClass)(nil)).Elem()

type LogGroupClassPtrInput interface {
	pulumi.Input

	ToLogGroupClassPtrOutput() LogGroupClassPtrOutput
	ToLogGroupClassPtrOutputWithContext(context.Context) LogGroupClassPtrOutput
}

type logGroupClassPtr string

func LogGroupClassPtr(v string) LogGroupClassPtrInput {
	return (*logGroupClassPtr)(&v)
}

func (*logGroupClassPtr) ElementType() reflect.Type {
	return logGroupClassPtrType
}

func (in *logGroupClassPtr) ToLogGroupClassPtrOutput() LogGroupClassPtrOutput {
	return pulumi.ToOutput(in).(LogGroupClassPtrOutput)
}

func (in *logGroupClassPtr) ToLogGroupClassPtrOutputWithContext(ctx context.Context) LogGroupClassPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(LogGroupClassPtrOutput)
}

func (in *logGroupClassPtr) ToOutput(ctx context.Context) pulumix.Output[*LogGroupClass] {
	return pulumix.Output[*LogGroupClass]{
		OutputState: in.ToLogGroupClassPtrOutputWithContext(ctx).OutputState,
	}
}

// The unit to assign to the metric. If you omit this, the unit is set as None.
type MetricFilterMetricTransformationUnit string

const (
	MetricFilterMetricTransformationUnitSeconds         = MetricFilterMetricTransformationUnit("Seconds")
	MetricFilterMetricTransformationUnitMicroseconds    = MetricFilterMetricTransformationUnit("Microseconds")
	MetricFilterMetricTransformationUnitMilliseconds    = MetricFilterMetricTransformationUnit("Milliseconds")
	MetricFilterMetricTransformationUnitBytes           = MetricFilterMetricTransformationUnit("Bytes")
	MetricFilterMetricTransformationUnitKilobytes       = MetricFilterMetricTransformationUnit("Kilobytes")
	MetricFilterMetricTransformationUnitMegabytes       = MetricFilterMetricTransformationUnit("Megabytes")
	MetricFilterMetricTransformationUnitGigabytes       = MetricFilterMetricTransformationUnit("Gigabytes")
	MetricFilterMetricTransformationUnitTerabytes       = MetricFilterMetricTransformationUnit("Terabytes")
	MetricFilterMetricTransformationUnitBits            = MetricFilterMetricTransformationUnit("Bits")
	MetricFilterMetricTransformationUnitKilobits        = MetricFilterMetricTransformationUnit("Kilobits")
	MetricFilterMetricTransformationUnitMegabits        = MetricFilterMetricTransformationUnit("Megabits")
	MetricFilterMetricTransformationUnitGigabits        = MetricFilterMetricTransformationUnit("Gigabits")
	MetricFilterMetricTransformationUnitTerabits        = MetricFilterMetricTransformationUnit("Terabits")
	MetricFilterMetricTransformationUnitPercent         = MetricFilterMetricTransformationUnit("Percent")
	MetricFilterMetricTransformationUnitCount           = MetricFilterMetricTransformationUnit("Count")
	MetricFilterMetricTransformationUnitBytesSecond     = MetricFilterMetricTransformationUnit("Bytes/Second")
	MetricFilterMetricTransformationUnitKilobytesSecond = MetricFilterMetricTransformationUnit("Kilobytes/Second")
	MetricFilterMetricTransformationUnitMegabytesSecond = MetricFilterMetricTransformationUnit("Megabytes/Second")
	MetricFilterMetricTransformationUnitGigabytesSecond = MetricFilterMetricTransformationUnit("Gigabytes/Second")
	MetricFilterMetricTransformationUnitTerabytesSecond = MetricFilterMetricTransformationUnit("Terabytes/Second")
	MetricFilterMetricTransformationUnitBitsSecond      = MetricFilterMetricTransformationUnit("Bits/Second")
	MetricFilterMetricTransformationUnitKilobitsSecond  = MetricFilterMetricTransformationUnit("Kilobits/Second")
	MetricFilterMetricTransformationUnitMegabitsSecond  = MetricFilterMetricTransformationUnit("Megabits/Second")
	MetricFilterMetricTransformationUnitGigabitsSecond  = MetricFilterMetricTransformationUnit("Gigabits/Second")
	MetricFilterMetricTransformationUnitTerabitsSecond  = MetricFilterMetricTransformationUnit("Terabits/Second")
	MetricFilterMetricTransformationUnitCountSecond     = MetricFilterMetricTransformationUnit("Count/Second")
	MetricFilterMetricTransformationUnitNone            = MetricFilterMetricTransformationUnit("None")
)

func (MetricFilterMetricTransformationUnit) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricFilterMetricTransformationUnit)(nil)).Elem()
}

func (e MetricFilterMetricTransformationUnit) ToMetricFilterMetricTransformationUnitOutput() MetricFilterMetricTransformationUnitOutput {
	return pulumi.ToOutput(e).(MetricFilterMetricTransformationUnitOutput)
}

func (e MetricFilterMetricTransformationUnit) ToMetricFilterMetricTransformationUnitOutputWithContext(ctx context.Context) MetricFilterMetricTransformationUnitOutput {
	return pulumi.ToOutputWithContext(ctx, e).(MetricFilterMetricTransformationUnitOutput)
}

func (e MetricFilterMetricTransformationUnit) ToMetricFilterMetricTransformationUnitPtrOutput() MetricFilterMetricTransformationUnitPtrOutput {
	return e.ToMetricFilterMetricTransformationUnitPtrOutputWithContext(context.Background())
}

func (e MetricFilterMetricTransformationUnit) ToMetricFilterMetricTransformationUnitPtrOutputWithContext(ctx context.Context) MetricFilterMetricTransformationUnitPtrOutput {
	return MetricFilterMetricTransformationUnit(e).ToMetricFilterMetricTransformationUnitOutputWithContext(ctx).ToMetricFilterMetricTransformationUnitPtrOutputWithContext(ctx)
}

func (e MetricFilterMetricTransformationUnit) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e MetricFilterMetricTransformationUnit) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e MetricFilterMetricTransformationUnit) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e MetricFilterMetricTransformationUnit) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type MetricFilterMetricTransformationUnitOutput struct{ *pulumi.OutputState }

func (MetricFilterMetricTransformationUnitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricFilterMetricTransformationUnit)(nil)).Elem()
}

func (o MetricFilterMetricTransformationUnitOutput) ToMetricFilterMetricTransformationUnitOutput() MetricFilterMetricTransformationUnitOutput {
	return o
}

func (o MetricFilterMetricTransformationUnitOutput) ToMetricFilterMetricTransformationUnitOutputWithContext(ctx context.Context) MetricFilterMetricTransformationUnitOutput {
	return o
}

func (o MetricFilterMetricTransformationUnitOutput) ToMetricFilterMetricTransformationUnitPtrOutput() MetricFilterMetricTransformationUnitPtrOutput {
	return o.ToMetricFilterMetricTransformationUnitPtrOutputWithContext(context.Background())
}

func (o MetricFilterMetricTransformationUnitOutput) ToMetricFilterMetricTransformationUnitPtrOutputWithContext(ctx context.Context) MetricFilterMetricTransformationUnitPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MetricFilterMetricTransformationUnit) *MetricFilterMetricTransformationUnit {
		return &v
	}).(MetricFilterMetricTransformationUnitPtrOutput)
}

func (o MetricFilterMetricTransformationUnitOutput) ToOutput(ctx context.Context) pulumix.Output[MetricFilterMetricTransformationUnit] {
	return pulumix.Output[MetricFilterMetricTransformationUnit]{
		OutputState: o.OutputState,
	}
}

func (o MetricFilterMetricTransformationUnitOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o MetricFilterMetricTransformationUnitOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MetricFilterMetricTransformationUnit) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o MetricFilterMetricTransformationUnitOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MetricFilterMetricTransformationUnitOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MetricFilterMetricTransformationUnit) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type MetricFilterMetricTransformationUnitPtrOutput struct{ *pulumi.OutputState }

func (MetricFilterMetricTransformationUnitPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricFilterMetricTransformationUnit)(nil)).Elem()
}

func (o MetricFilterMetricTransformationUnitPtrOutput) ToMetricFilterMetricTransformationUnitPtrOutput() MetricFilterMetricTransformationUnitPtrOutput {
	return o
}

func (o MetricFilterMetricTransformationUnitPtrOutput) ToMetricFilterMetricTransformationUnitPtrOutputWithContext(ctx context.Context) MetricFilterMetricTransformationUnitPtrOutput {
	return o
}

func (o MetricFilterMetricTransformationUnitPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MetricFilterMetricTransformationUnit] {
	return pulumix.Output[*MetricFilterMetricTransformationUnit]{
		OutputState: o.OutputState,
	}
}

func (o MetricFilterMetricTransformationUnitPtrOutput) Elem() MetricFilterMetricTransformationUnitOutput {
	return o.ApplyT(func(v *MetricFilterMetricTransformationUnit) MetricFilterMetricTransformationUnit {
		if v != nil {
			return *v
		}
		var ret MetricFilterMetricTransformationUnit
		return ret
	}).(MetricFilterMetricTransformationUnitOutput)
}

func (o MetricFilterMetricTransformationUnitPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MetricFilterMetricTransformationUnitPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *MetricFilterMetricTransformationUnit) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// MetricFilterMetricTransformationUnitInput is an input type that accepts MetricFilterMetricTransformationUnitArgs and MetricFilterMetricTransformationUnitOutput values.
// You can construct a concrete instance of `MetricFilterMetricTransformationUnitInput` via:
//
//	MetricFilterMetricTransformationUnitArgs{...}
type MetricFilterMetricTransformationUnitInput interface {
	pulumi.Input

	ToMetricFilterMetricTransformationUnitOutput() MetricFilterMetricTransformationUnitOutput
	ToMetricFilterMetricTransformationUnitOutputWithContext(context.Context) MetricFilterMetricTransformationUnitOutput
}

var metricFilterMetricTransformationUnitPtrType = reflect.TypeOf((**MetricFilterMetricTransformationUnit)(nil)).Elem()

type MetricFilterMetricTransformationUnitPtrInput interface {
	pulumi.Input

	ToMetricFilterMetricTransformationUnitPtrOutput() MetricFilterMetricTransformationUnitPtrOutput
	ToMetricFilterMetricTransformationUnitPtrOutputWithContext(context.Context) MetricFilterMetricTransformationUnitPtrOutput
}

type metricFilterMetricTransformationUnitPtr string

func MetricFilterMetricTransformationUnitPtr(v string) MetricFilterMetricTransformationUnitPtrInput {
	return (*metricFilterMetricTransformationUnitPtr)(&v)
}

func (*metricFilterMetricTransformationUnitPtr) ElementType() reflect.Type {
	return metricFilterMetricTransformationUnitPtrType
}

func (in *metricFilterMetricTransformationUnitPtr) ToMetricFilterMetricTransformationUnitPtrOutput() MetricFilterMetricTransformationUnitPtrOutput {
	return pulumi.ToOutput(in).(MetricFilterMetricTransformationUnitPtrOutput)
}

func (in *metricFilterMetricTransformationUnitPtr) ToMetricFilterMetricTransformationUnitPtrOutputWithContext(ctx context.Context) MetricFilterMetricTransformationUnitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(MetricFilterMetricTransformationUnitPtrOutput)
}

func (in *metricFilterMetricTransformationUnitPtr) ToOutput(ctx context.Context) pulumix.Output[*MetricFilterMetricTransformationUnit] {
	return pulumix.Output[*MetricFilterMetricTransformationUnit]{
		OutputState: in.ToMetricFilterMetricTransformationUnitPtrOutputWithContext(ctx).OutputState,
	}
}

// The method used to distribute log data to the destination. By default, log data is grouped by log stream, but the grouping can be set to random for a more even distribution. This property is only applicable when the destination is an Amazon Kinesis stream.
type SubscriptionFilterDistribution string

const (
	SubscriptionFilterDistributionRandom      = SubscriptionFilterDistribution("Random")
	SubscriptionFilterDistributionByLogStream = SubscriptionFilterDistribution("ByLogStream")
)

func (SubscriptionFilterDistribution) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionFilterDistribution)(nil)).Elem()
}

func (e SubscriptionFilterDistribution) ToSubscriptionFilterDistributionOutput() SubscriptionFilterDistributionOutput {
	return pulumi.ToOutput(e).(SubscriptionFilterDistributionOutput)
}

func (e SubscriptionFilterDistribution) ToSubscriptionFilterDistributionOutputWithContext(ctx context.Context) SubscriptionFilterDistributionOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SubscriptionFilterDistributionOutput)
}

func (e SubscriptionFilterDistribution) ToSubscriptionFilterDistributionPtrOutput() SubscriptionFilterDistributionPtrOutput {
	return e.ToSubscriptionFilterDistributionPtrOutputWithContext(context.Background())
}

func (e SubscriptionFilterDistribution) ToSubscriptionFilterDistributionPtrOutputWithContext(ctx context.Context) SubscriptionFilterDistributionPtrOutput {
	return SubscriptionFilterDistribution(e).ToSubscriptionFilterDistributionOutputWithContext(ctx).ToSubscriptionFilterDistributionPtrOutputWithContext(ctx)
}

func (e SubscriptionFilterDistribution) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SubscriptionFilterDistribution) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SubscriptionFilterDistribution) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SubscriptionFilterDistribution) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SubscriptionFilterDistributionOutput struct{ *pulumi.OutputState }

func (SubscriptionFilterDistributionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionFilterDistribution)(nil)).Elem()
}

func (o SubscriptionFilterDistributionOutput) ToSubscriptionFilterDistributionOutput() SubscriptionFilterDistributionOutput {
	return o
}

func (o SubscriptionFilterDistributionOutput) ToSubscriptionFilterDistributionOutputWithContext(ctx context.Context) SubscriptionFilterDistributionOutput {
	return o
}

func (o SubscriptionFilterDistributionOutput) ToSubscriptionFilterDistributionPtrOutput() SubscriptionFilterDistributionPtrOutput {
	return o.ToSubscriptionFilterDistributionPtrOutputWithContext(context.Background())
}

func (o SubscriptionFilterDistributionOutput) ToSubscriptionFilterDistributionPtrOutputWithContext(ctx context.Context) SubscriptionFilterDistributionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SubscriptionFilterDistribution) *SubscriptionFilterDistribution {
		return &v
	}).(SubscriptionFilterDistributionPtrOutput)
}

func (o SubscriptionFilterDistributionOutput) ToOutput(ctx context.Context) pulumix.Output[SubscriptionFilterDistribution] {
	return pulumix.Output[SubscriptionFilterDistribution]{
		OutputState: o.OutputState,
	}
}

func (o SubscriptionFilterDistributionOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SubscriptionFilterDistributionOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SubscriptionFilterDistribution) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SubscriptionFilterDistributionOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SubscriptionFilterDistributionOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SubscriptionFilterDistribution) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SubscriptionFilterDistributionPtrOutput struct{ *pulumi.OutputState }

func (SubscriptionFilterDistributionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionFilterDistribution)(nil)).Elem()
}

func (o SubscriptionFilterDistributionPtrOutput) ToSubscriptionFilterDistributionPtrOutput() SubscriptionFilterDistributionPtrOutput {
	return o
}

func (o SubscriptionFilterDistributionPtrOutput) ToSubscriptionFilterDistributionPtrOutputWithContext(ctx context.Context) SubscriptionFilterDistributionPtrOutput {
	return o
}

func (o SubscriptionFilterDistributionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SubscriptionFilterDistribution] {
	return pulumix.Output[*SubscriptionFilterDistribution]{
		OutputState: o.OutputState,
	}
}

func (o SubscriptionFilterDistributionPtrOutput) Elem() SubscriptionFilterDistributionOutput {
	return o.ApplyT(func(v *SubscriptionFilterDistribution) SubscriptionFilterDistribution {
		if v != nil {
			return *v
		}
		var ret SubscriptionFilterDistribution
		return ret
	}).(SubscriptionFilterDistributionOutput)
}

func (o SubscriptionFilterDistributionPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SubscriptionFilterDistributionPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SubscriptionFilterDistribution) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SubscriptionFilterDistributionInput is an input type that accepts SubscriptionFilterDistributionArgs and SubscriptionFilterDistributionOutput values.
// You can construct a concrete instance of `SubscriptionFilterDistributionInput` via:
//
//	SubscriptionFilterDistributionArgs{...}
type SubscriptionFilterDistributionInput interface {
	pulumi.Input

	ToSubscriptionFilterDistributionOutput() SubscriptionFilterDistributionOutput
	ToSubscriptionFilterDistributionOutputWithContext(context.Context) SubscriptionFilterDistributionOutput
}

var subscriptionFilterDistributionPtrType = reflect.TypeOf((**SubscriptionFilterDistribution)(nil)).Elem()

type SubscriptionFilterDistributionPtrInput interface {
	pulumi.Input

	ToSubscriptionFilterDistributionPtrOutput() SubscriptionFilterDistributionPtrOutput
	ToSubscriptionFilterDistributionPtrOutputWithContext(context.Context) SubscriptionFilterDistributionPtrOutput
}

type subscriptionFilterDistributionPtr string

func SubscriptionFilterDistributionPtr(v string) SubscriptionFilterDistributionPtrInput {
	return (*subscriptionFilterDistributionPtr)(&v)
}

func (*subscriptionFilterDistributionPtr) ElementType() reflect.Type {
	return subscriptionFilterDistributionPtrType
}

func (in *subscriptionFilterDistributionPtr) ToSubscriptionFilterDistributionPtrOutput() SubscriptionFilterDistributionPtrOutput {
	return pulumi.ToOutput(in).(SubscriptionFilterDistributionPtrOutput)
}

func (in *subscriptionFilterDistributionPtr) ToSubscriptionFilterDistributionPtrOutputWithContext(ctx context.Context) SubscriptionFilterDistributionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SubscriptionFilterDistributionPtrOutput)
}

func (in *subscriptionFilterDistributionPtr) ToOutput(ctx context.Context) pulumix.Output[*SubscriptionFilterDistribution] {
	return pulumix.Output[*SubscriptionFilterDistribution]{
		OutputState: in.ToSubscriptionFilterDistributionPtrOutputWithContext(ctx).OutputState,
	}
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccountPolicyPolicyTypeInput)(nil)).Elem(), AccountPolicyPolicyType("DATA_PROTECTION_POLICY"))
	pulumi.RegisterInputType(reflect.TypeOf((*AccountPolicyPolicyTypePtrInput)(nil)).Elem(), AccountPolicyPolicyType("DATA_PROTECTION_POLICY"))
	pulumi.RegisterInputType(reflect.TypeOf((*AccountPolicyScopeInput)(nil)).Elem(), AccountPolicyScope("ALL"))
	pulumi.RegisterInputType(reflect.TypeOf((*AccountPolicyScopePtrInput)(nil)).Elem(), AccountPolicyScope("ALL"))
	pulumi.RegisterInputType(reflect.TypeOf((*LogAnomalyDetectorEvaluationFrequencyInput)(nil)).Elem(), LogAnomalyDetectorEvaluationFrequency("FIVE_MIN"))
	pulumi.RegisterInputType(reflect.TypeOf((*LogAnomalyDetectorEvaluationFrequencyPtrInput)(nil)).Elem(), LogAnomalyDetectorEvaluationFrequency("FIVE_MIN"))
	pulumi.RegisterInputType(reflect.TypeOf((*LogGroupClassInput)(nil)).Elem(), LogGroupClass("STANDARD"))
	pulumi.RegisterInputType(reflect.TypeOf((*LogGroupClassPtrInput)(nil)).Elem(), LogGroupClass("STANDARD"))
	pulumi.RegisterInputType(reflect.TypeOf((*MetricFilterMetricTransformationUnitInput)(nil)).Elem(), MetricFilterMetricTransformationUnit("Seconds"))
	pulumi.RegisterInputType(reflect.TypeOf((*MetricFilterMetricTransformationUnitPtrInput)(nil)).Elem(), MetricFilterMetricTransformationUnit("Seconds"))
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionFilterDistributionInput)(nil)).Elem(), SubscriptionFilterDistribution("Random"))
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionFilterDistributionPtrInput)(nil)).Elem(), SubscriptionFilterDistribution("Random"))
	pulumi.RegisterOutputType(AccountPolicyPolicyTypeOutput{})
	pulumi.RegisterOutputType(AccountPolicyPolicyTypePtrOutput{})
	pulumi.RegisterOutputType(AccountPolicyScopeOutput{})
	pulumi.RegisterOutputType(AccountPolicyScopePtrOutput{})
	pulumi.RegisterOutputType(LogAnomalyDetectorEvaluationFrequencyOutput{})
	pulumi.RegisterOutputType(LogAnomalyDetectorEvaluationFrequencyPtrOutput{})
	pulumi.RegisterOutputType(LogGroupClassOutput{})
	pulumi.RegisterOutputType(LogGroupClassPtrOutput{})
	pulumi.RegisterOutputType(MetricFilterMetricTransformationUnitOutput{})
	pulumi.RegisterOutputType(MetricFilterMetricTransformationUnitPtrOutput{})
	pulumi.RegisterOutputType(SubscriptionFilterDistributionOutput{})
	pulumi.RegisterOutputType(SubscriptionFilterDistributionPtrOutput{})
}
