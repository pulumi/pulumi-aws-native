// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package logs

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The resource schema for AWSLogs QueryDefinition
type QueryDefinition struct {
	pulumi.CustomResourceState

	// Optionally define specific log groups as part of your query definition
	LogGroupNames pulumi.StringArrayOutput `pulumi:"logGroupNames"`
	// A name for the saved query definition
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier of a query definition
	QueryDefinitionId pulumi.StringOutput `pulumi:"queryDefinitionId"`
	// The query string to use for this definition
	QueryString pulumi.StringOutput `pulumi:"queryString"`
}

// NewQueryDefinition registers a new resource with the given unique name, arguments, and options.
func NewQueryDefinition(ctx *pulumi.Context,
	name string, args *QueryDefinitionArgs, opts ...pulumi.ResourceOption) (*QueryDefinition, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.QueryString == nil {
		return nil, errors.New("invalid value for required argument 'QueryString'")
	}
	var resource QueryDefinition
	err := ctx.RegisterResource("aws-native:logs:QueryDefinition", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetQueryDefinition gets an existing QueryDefinition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQueryDefinition(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *QueryDefinitionState, opts ...pulumi.ResourceOption) (*QueryDefinition, error) {
	var resource QueryDefinition
	err := ctx.ReadResource("aws-native:logs:QueryDefinition", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering QueryDefinition resources.
type queryDefinitionState struct {
}

type QueryDefinitionState struct {
}

func (QueryDefinitionState) ElementType() reflect.Type {
	return reflect.TypeOf((*queryDefinitionState)(nil)).Elem()
}

type queryDefinitionArgs struct {
	// Optionally define specific log groups as part of your query definition
	LogGroupNames []string `pulumi:"logGroupNames"`
	// A name for the saved query definition
	Name string `pulumi:"name"`
	// The query string to use for this definition
	QueryString string `pulumi:"queryString"`
}

// The set of arguments for constructing a QueryDefinition resource.
type QueryDefinitionArgs struct {
	// Optionally define specific log groups as part of your query definition
	LogGroupNames pulumi.StringArrayInput
	// A name for the saved query definition
	Name pulumi.StringInput
	// The query string to use for this definition
	QueryString pulumi.StringInput
}

func (QueryDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*queryDefinitionArgs)(nil)).Elem()
}

type QueryDefinitionInput interface {
	pulumi.Input

	ToQueryDefinitionOutput() QueryDefinitionOutput
	ToQueryDefinitionOutputWithContext(ctx context.Context) QueryDefinitionOutput
}

func (*QueryDefinition) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryDefinition)(nil))
}

func (i *QueryDefinition) ToQueryDefinitionOutput() QueryDefinitionOutput {
	return i.ToQueryDefinitionOutputWithContext(context.Background())
}

func (i *QueryDefinition) ToQueryDefinitionOutputWithContext(ctx context.Context) QueryDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryDefinitionOutput)
}

type QueryDefinitionOutput struct{ *pulumi.OutputState }

func (QueryDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryDefinition)(nil))
}

func (o QueryDefinitionOutput) ToQueryDefinitionOutput() QueryDefinitionOutput {
	return o
}

func (o QueryDefinitionOutput) ToQueryDefinitionOutputWithContext(ctx context.Context) QueryDefinitionOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(QueryDefinitionOutput{})
}
