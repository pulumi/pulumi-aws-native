// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package logs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

//	A delivery source is an AWS resource that sends logs to an AWS destination. The destination can be CloudWatch Logs, Amazon S3, or Kinesis Data Firehose.
//
// Only some AWS services support being configured as a delivery source. These services are listed as Supported [V2 Permissions] in the table at [Enabling logging from AWS services](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/AWS-logs-and-resource-policy.html).
func LookupDeliverySource(ctx *pulumi.Context, args *LookupDeliverySourceArgs, opts ...pulumi.InvokeOption) (*LookupDeliverySourceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDeliverySourceResult
	err := ctx.Invoke("aws-native:logs:getDeliverySource", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupDeliverySourceArgs struct {
	// The unique name of the Log source.
	Name string `pulumi:"name"`
}

type LookupDeliverySourceResult struct {
	// The Amazon Resource Name (ARN) that uniquely identifies this delivery source.
	Arn *string `pulumi:"arn"`
	// The type of logs being delivered. Only mandatory when the resourceArn could match more than one. In such a case, the error message will contain all the possible options.
	LogType *string `pulumi:"logType"`
	// This array contains the ARN of the AWS resource that sends logs and is represented by this delivery source. Currently, only one ARN can be in the array.
	ResourceArns []string `pulumi:"resourceArns"`
	// The AWS service that is sending logs.
	Service *string `pulumi:"service"`
	// The tags that have been assigned to this delivery source.
	Tags []DeliverySourceTag `pulumi:"tags"`
}

func LookupDeliverySourceOutput(ctx *pulumi.Context, args LookupDeliverySourceOutputArgs, opts ...pulumi.InvokeOption) LookupDeliverySourceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDeliverySourceResult, error) {
			args := v.(LookupDeliverySourceArgs)
			r, err := LookupDeliverySource(ctx, &args, opts...)
			var s LookupDeliverySourceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDeliverySourceResultOutput)
}

type LookupDeliverySourceOutputArgs struct {
	// The unique name of the Log source.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupDeliverySourceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDeliverySourceArgs)(nil)).Elem()
}

type LookupDeliverySourceResultOutput struct{ *pulumi.OutputState }

func (LookupDeliverySourceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDeliverySourceResult)(nil)).Elem()
}

func (o LookupDeliverySourceResultOutput) ToLookupDeliverySourceResultOutput() LookupDeliverySourceResultOutput {
	return o
}

func (o LookupDeliverySourceResultOutput) ToLookupDeliverySourceResultOutputWithContext(ctx context.Context) LookupDeliverySourceResultOutput {
	return o
}

// The Amazon Resource Name (ARN) that uniquely identifies this delivery source.
func (o LookupDeliverySourceResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDeliverySourceResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// The type of logs being delivered. Only mandatory when the resourceArn could match more than one. In such a case, the error message will contain all the possible options.
func (o LookupDeliverySourceResultOutput) LogType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDeliverySourceResult) *string { return v.LogType }).(pulumi.StringPtrOutput)
}

// This array contains the ARN of the AWS resource that sends logs and is represented by this delivery source. Currently, only one ARN can be in the array.
func (o LookupDeliverySourceResultOutput) ResourceArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDeliverySourceResult) []string { return v.ResourceArns }).(pulumi.StringArrayOutput)
}

// The AWS service that is sending logs.
func (o LookupDeliverySourceResultOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDeliverySourceResult) *string { return v.Service }).(pulumi.StringPtrOutput)
}

// The tags that have been assigned to this delivery source.
func (o LookupDeliverySourceResultOutput) Tags() DeliverySourceTagArrayOutput {
	return o.ApplyT(func(v LookupDeliverySourceResult) []DeliverySourceTag { return v.Tags }).(DeliverySourceTagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDeliverySourceResultOutput{})
}
