// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package healthimaging

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::HealthImaging::Datastore Resource Type
type Datastore struct {
	pulumi.CustomResourceState

	CreatedAt       pulumi.StringOutput    `pulumi:"createdAt"`
	DatastoreArn    pulumi.StringOutput    `pulumi:"datastoreArn"`
	DatastoreId     pulumi.StringOutput    `pulumi:"datastoreId"`
	DatastoreName   pulumi.StringPtrOutput `pulumi:"datastoreName"`
	DatastoreStatus DatastoreStatusOutput  `pulumi:"datastoreStatus"`
	KmsKeyArn       pulumi.StringPtrOutput `pulumi:"kmsKeyArn"`
	Tags            pulumi.StringMapOutput `pulumi:"tags"`
	UpdatedAt       pulumi.StringOutput    `pulumi:"updatedAt"`
}

// NewDatastore registers a new resource with the given unique name, arguments, and options.
func NewDatastore(ctx *pulumi.Context,
	name string, args *DatastoreArgs, opts ...pulumi.ResourceOption) (*Datastore, error) {
	if args == nil {
		args = &DatastoreArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"datastoreName",
		"kmsKeyArn",
		"tags.*",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Datastore
	err := ctx.RegisterResource("aws-native:healthimaging:Datastore", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatastore gets an existing Datastore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatastore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatastoreState, opts ...pulumi.ResourceOption) (*Datastore, error) {
	var resource Datastore
	err := ctx.ReadResource("aws-native:healthimaging:Datastore", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Datastore resources.
type datastoreState struct {
}

type DatastoreState struct {
}

func (DatastoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*datastoreState)(nil)).Elem()
}

type datastoreArgs struct {
	DatastoreName *string           `pulumi:"datastoreName"`
	KmsKeyArn     *string           `pulumi:"kmsKeyArn"`
	Tags          map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Datastore resource.
type DatastoreArgs struct {
	DatastoreName pulumi.StringPtrInput
	KmsKeyArn     pulumi.StringPtrInput
	Tags          pulumi.StringMapInput
}

func (DatastoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datastoreArgs)(nil)).Elem()
}

type DatastoreInput interface {
	pulumi.Input

	ToDatastoreOutput() DatastoreOutput
	ToDatastoreOutputWithContext(ctx context.Context) DatastoreOutput
}

func (*Datastore) ElementType() reflect.Type {
	return reflect.TypeOf((**Datastore)(nil)).Elem()
}

func (i *Datastore) ToDatastoreOutput() DatastoreOutput {
	return i.ToDatastoreOutputWithContext(context.Background())
}

func (i *Datastore) ToDatastoreOutputWithContext(ctx context.Context) DatastoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatastoreOutput)
}

type DatastoreOutput struct{ *pulumi.OutputState }

func (DatastoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Datastore)(nil)).Elem()
}

func (o DatastoreOutput) ToDatastoreOutput() DatastoreOutput {
	return o
}

func (o DatastoreOutput) ToDatastoreOutputWithContext(ctx context.Context) DatastoreOutput {
	return o
}

func (o DatastoreOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Datastore) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o DatastoreOutput) DatastoreArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Datastore) pulumi.StringOutput { return v.DatastoreArn }).(pulumi.StringOutput)
}

func (o DatastoreOutput) DatastoreId() pulumi.StringOutput {
	return o.ApplyT(func(v *Datastore) pulumi.StringOutput { return v.DatastoreId }).(pulumi.StringOutput)
}

func (o DatastoreOutput) DatastoreName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Datastore) pulumi.StringPtrOutput { return v.DatastoreName }).(pulumi.StringPtrOutput)
}

func (o DatastoreOutput) DatastoreStatus() DatastoreStatusOutput {
	return o.ApplyT(func(v *Datastore) DatastoreStatusOutput { return v.DatastoreStatus }).(DatastoreStatusOutput)
}

func (o DatastoreOutput) KmsKeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Datastore) pulumi.StringPtrOutput { return v.KmsKeyArn }).(pulumi.StringPtrOutput)
}

func (o DatastoreOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Datastore) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o DatastoreOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Datastore) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatastoreInput)(nil)).Elem(), &Datastore{})
	pulumi.RegisterOutputType(DatastoreOutput{})
}
