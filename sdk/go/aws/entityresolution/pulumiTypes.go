// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package entityresolution

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type IdMappingWorkflowIdMappingRuleBasedProperties struct {
	// The comparison type. You can either choose `ONE_TO_ONE` or `MANY_TO_MANY` as the `attributeMatchingModel` .
	//
	// If you choose `MANY_TO_MANY` , the system can match attributes across the sub-types of an attribute type. For example, if the value of the `Email` field of Profile A matches the value of the `BusinessEmail` field of Profile B, the two profiles are matched on the `Email` attribute type.
	//
	// If you choose `ONE_TO_ONE` , the system can only match attributes if the sub-types are an exact match. For example, for the `Email` attribute type, the system will only consider it a match if the value of the `Email` field of Profile A matches the value of the `Email` field of Profile B.
	AttributeMatchingModel IdMappingWorkflowIdMappingRuleBasedPropertiesAttributeMatchingModel `pulumi:"attributeMatchingModel"`
	// The type of matching record that is allowed to be used in an ID mapping workflow.
	//
	// If the value is set to `ONE_SOURCE_TO_ONE_TARGET` , only one record in the source can be matched to the same record in the target.
	//
	// If the value is set to `MANY_SOURCE_TO_ONE_TARGET` , multiple records in the source can be matched to one record in the target.
	RecordMatchingModel IdMappingWorkflowIdMappingRuleBasedPropertiesRecordMatchingModel `pulumi:"recordMatchingModel"`
	// The set of rules you can use in an ID mapping workflow. The limitations specified for the source or target to define the match rules must be compatible.
	RuleDefinitionType *IdMappingWorkflowIdMappingRuleBasedPropertiesRuleDefinitionType `pulumi:"ruleDefinitionType"`
	// The rules that can be used for ID mapping.
	Rules []IdMappingWorkflowRule `pulumi:"rules"`
}

// IdMappingWorkflowIdMappingRuleBasedPropertiesInput is an input type that accepts IdMappingWorkflowIdMappingRuleBasedPropertiesArgs and IdMappingWorkflowIdMappingRuleBasedPropertiesOutput values.
// You can construct a concrete instance of `IdMappingWorkflowIdMappingRuleBasedPropertiesInput` via:
//
//	IdMappingWorkflowIdMappingRuleBasedPropertiesArgs{...}
type IdMappingWorkflowIdMappingRuleBasedPropertiesInput interface {
	pulumi.Input

	ToIdMappingWorkflowIdMappingRuleBasedPropertiesOutput() IdMappingWorkflowIdMappingRuleBasedPropertiesOutput
	ToIdMappingWorkflowIdMappingRuleBasedPropertiesOutputWithContext(context.Context) IdMappingWorkflowIdMappingRuleBasedPropertiesOutput
}

type IdMappingWorkflowIdMappingRuleBasedPropertiesArgs struct {
	// The comparison type. You can either choose `ONE_TO_ONE` or `MANY_TO_MANY` as the `attributeMatchingModel` .
	//
	// If you choose `MANY_TO_MANY` , the system can match attributes across the sub-types of an attribute type. For example, if the value of the `Email` field of Profile A matches the value of the `BusinessEmail` field of Profile B, the two profiles are matched on the `Email` attribute type.
	//
	// If you choose `ONE_TO_ONE` , the system can only match attributes if the sub-types are an exact match. For example, for the `Email` attribute type, the system will only consider it a match if the value of the `Email` field of Profile A matches the value of the `Email` field of Profile B.
	AttributeMatchingModel IdMappingWorkflowIdMappingRuleBasedPropertiesAttributeMatchingModelInput `pulumi:"attributeMatchingModel"`
	// The type of matching record that is allowed to be used in an ID mapping workflow.
	//
	// If the value is set to `ONE_SOURCE_TO_ONE_TARGET` , only one record in the source can be matched to the same record in the target.
	//
	// If the value is set to `MANY_SOURCE_TO_ONE_TARGET` , multiple records in the source can be matched to one record in the target.
	RecordMatchingModel IdMappingWorkflowIdMappingRuleBasedPropertiesRecordMatchingModelInput `pulumi:"recordMatchingModel"`
	// The set of rules you can use in an ID mapping workflow. The limitations specified for the source or target to define the match rules must be compatible.
	RuleDefinitionType IdMappingWorkflowIdMappingRuleBasedPropertiesRuleDefinitionTypePtrInput `pulumi:"ruleDefinitionType"`
	// The rules that can be used for ID mapping.
	Rules IdMappingWorkflowRuleArrayInput `pulumi:"rules"`
}

func (IdMappingWorkflowIdMappingRuleBasedPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdMappingWorkflowIdMappingRuleBasedProperties)(nil)).Elem()
}

func (i IdMappingWorkflowIdMappingRuleBasedPropertiesArgs) ToIdMappingWorkflowIdMappingRuleBasedPropertiesOutput() IdMappingWorkflowIdMappingRuleBasedPropertiesOutput {
	return i.ToIdMappingWorkflowIdMappingRuleBasedPropertiesOutputWithContext(context.Background())
}

func (i IdMappingWorkflowIdMappingRuleBasedPropertiesArgs) ToIdMappingWorkflowIdMappingRuleBasedPropertiesOutputWithContext(ctx context.Context) IdMappingWorkflowIdMappingRuleBasedPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdMappingWorkflowIdMappingRuleBasedPropertiesOutput)
}

func (i IdMappingWorkflowIdMappingRuleBasedPropertiesArgs) ToIdMappingWorkflowIdMappingRuleBasedPropertiesPtrOutput() IdMappingWorkflowIdMappingRuleBasedPropertiesPtrOutput {
	return i.ToIdMappingWorkflowIdMappingRuleBasedPropertiesPtrOutputWithContext(context.Background())
}

func (i IdMappingWorkflowIdMappingRuleBasedPropertiesArgs) ToIdMappingWorkflowIdMappingRuleBasedPropertiesPtrOutputWithContext(ctx context.Context) IdMappingWorkflowIdMappingRuleBasedPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdMappingWorkflowIdMappingRuleBasedPropertiesOutput).ToIdMappingWorkflowIdMappingRuleBasedPropertiesPtrOutputWithContext(ctx)
}

// IdMappingWorkflowIdMappingRuleBasedPropertiesPtrInput is an input type that accepts IdMappingWorkflowIdMappingRuleBasedPropertiesArgs, IdMappingWorkflowIdMappingRuleBasedPropertiesPtr and IdMappingWorkflowIdMappingRuleBasedPropertiesPtrOutput values.
// You can construct a concrete instance of `IdMappingWorkflowIdMappingRuleBasedPropertiesPtrInput` via:
//
//	        IdMappingWorkflowIdMappingRuleBasedPropertiesArgs{...}
//
//	or:
//
//	        nil
type IdMappingWorkflowIdMappingRuleBasedPropertiesPtrInput interface {
	pulumi.Input

	ToIdMappingWorkflowIdMappingRuleBasedPropertiesPtrOutput() IdMappingWorkflowIdMappingRuleBasedPropertiesPtrOutput
	ToIdMappingWorkflowIdMappingRuleBasedPropertiesPtrOutputWithContext(context.Context) IdMappingWorkflowIdMappingRuleBasedPropertiesPtrOutput
}

type idMappingWorkflowIdMappingRuleBasedPropertiesPtrType IdMappingWorkflowIdMappingRuleBasedPropertiesArgs

func IdMappingWorkflowIdMappingRuleBasedPropertiesPtr(v *IdMappingWorkflowIdMappingRuleBasedPropertiesArgs) IdMappingWorkflowIdMappingRuleBasedPropertiesPtrInput {
	return (*idMappingWorkflowIdMappingRuleBasedPropertiesPtrType)(v)
}

func (*idMappingWorkflowIdMappingRuleBasedPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IdMappingWorkflowIdMappingRuleBasedProperties)(nil)).Elem()
}

func (i *idMappingWorkflowIdMappingRuleBasedPropertiesPtrType) ToIdMappingWorkflowIdMappingRuleBasedPropertiesPtrOutput() IdMappingWorkflowIdMappingRuleBasedPropertiesPtrOutput {
	return i.ToIdMappingWorkflowIdMappingRuleBasedPropertiesPtrOutputWithContext(context.Background())
}

func (i *idMappingWorkflowIdMappingRuleBasedPropertiesPtrType) ToIdMappingWorkflowIdMappingRuleBasedPropertiesPtrOutputWithContext(ctx context.Context) IdMappingWorkflowIdMappingRuleBasedPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdMappingWorkflowIdMappingRuleBasedPropertiesPtrOutput)
}

type IdMappingWorkflowIdMappingRuleBasedPropertiesOutput struct{ *pulumi.OutputState }

func (IdMappingWorkflowIdMappingRuleBasedPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdMappingWorkflowIdMappingRuleBasedProperties)(nil)).Elem()
}

func (o IdMappingWorkflowIdMappingRuleBasedPropertiesOutput) ToIdMappingWorkflowIdMappingRuleBasedPropertiesOutput() IdMappingWorkflowIdMappingRuleBasedPropertiesOutput {
	return o
}

func (o IdMappingWorkflowIdMappingRuleBasedPropertiesOutput) ToIdMappingWorkflowIdMappingRuleBasedPropertiesOutputWithContext(ctx context.Context) IdMappingWorkflowIdMappingRuleBasedPropertiesOutput {
	return o
}

func (o IdMappingWorkflowIdMappingRuleBasedPropertiesOutput) ToIdMappingWorkflowIdMappingRuleBasedPropertiesPtrOutput() IdMappingWorkflowIdMappingRuleBasedPropertiesPtrOutput {
	return o.ToIdMappingWorkflowIdMappingRuleBasedPropertiesPtrOutputWithContext(context.Background())
}

func (o IdMappingWorkflowIdMappingRuleBasedPropertiesOutput) ToIdMappingWorkflowIdMappingRuleBasedPropertiesPtrOutputWithContext(ctx context.Context) IdMappingWorkflowIdMappingRuleBasedPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IdMappingWorkflowIdMappingRuleBasedProperties) *IdMappingWorkflowIdMappingRuleBasedProperties {
		return &v
	}).(IdMappingWorkflowIdMappingRuleBasedPropertiesPtrOutput)
}

// The comparison type. You can either choose `ONE_TO_ONE` or `MANY_TO_MANY` as the `attributeMatchingModel` .
//
// If you choose `MANY_TO_MANY` , the system can match attributes across the sub-types of an attribute type. For example, if the value of the `Email` field of Profile A matches the value of the `BusinessEmail` field of Profile B, the two profiles are matched on the `Email` attribute type.
//
// If you choose `ONE_TO_ONE` , the system can only match attributes if the sub-types are an exact match. For example, for the `Email` attribute type, the system will only consider it a match if the value of the `Email` field of Profile A matches the value of the `Email` field of Profile B.
func (o IdMappingWorkflowIdMappingRuleBasedPropertiesOutput) AttributeMatchingModel() IdMappingWorkflowIdMappingRuleBasedPropertiesAttributeMatchingModelOutput {
	return o.ApplyT(func(v IdMappingWorkflowIdMappingRuleBasedProperties) IdMappingWorkflowIdMappingRuleBasedPropertiesAttributeMatchingModel {
		return v.AttributeMatchingModel
	}).(IdMappingWorkflowIdMappingRuleBasedPropertiesAttributeMatchingModelOutput)
}

// The type of matching record that is allowed to be used in an ID mapping workflow.
//
// If the value is set to `ONE_SOURCE_TO_ONE_TARGET` , only one record in the source can be matched to the same record in the target.
//
// If the value is set to `MANY_SOURCE_TO_ONE_TARGET` , multiple records in the source can be matched to one record in the target.
func (o IdMappingWorkflowIdMappingRuleBasedPropertiesOutput) RecordMatchingModel() IdMappingWorkflowIdMappingRuleBasedPropertiesRecordMatchingModelOutput {
	return o.ApplyT(func(v IdMappingWorkflowIdMappingRuleBasedProperties) IdMappingWorkflowIdMappingRuleBasedPropertiesRecordMatchingModel {
		return v.RecordMatchingModel
	}).(IdMappingWorkflowIdMappingRuleBasedPropertiesRecordMatchingModelOutput)
}

// The set of rules you can use in an ID mapping workflow. The limitations specified for the source or target to define the match rules must be compatible.
func (o IdMappingWorkflowIdMappingRuleBasedPropertiesOutput) RuleDefinitionType() IdMappingWorkflowIdMappingRuleBasedPropertiesRuleDefinitionTypePtrOutput {
	return o.ApplyT(func(v IdMappingWorkflowIdMappingRuleBasedProperties) *IdMappingWorkflowIdMappingRuleBasedPropertiesRuleDefinitionType {
		return v.RuleDefinitionType
	}).(IdMappingWorkflowIdMappingRuleBasedPropertiesRuleDefinitionTypePtrOutput)
}

// The rules that can be used for ID mapping.
func (o IdMappingWorkflowIdMappingRuleBasedPropertiesOutput) Rules() IdMappingWorkflowRuleArrayOutput {
	return o.ApplyT(func(v IdMappingWorkflowIdMappingRuleBasedProperties) []IdMappingWorkflowRule { return v.Rules }).(IdMappingWorkflowRuleArrayOutput)
}

type IdMappingWorkflowIdMappingRuleBasedPropertiesPtrOutput struct{ *pulumi.OutputState }

func (IdMappingWorkflowIdMappingRuleBasedPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdMappingWorkflowIdMappingRuleBasedProperties)(nil)).Elem()
}

func (o IdMappingWorkflowIdMappingRuleBasedPropertiesPtrOutput) ToIdMappingWorkflowIdMappingRuleBasedPropertiesPtrOutput() IdMappingWorkflowIdMappingRuleBasedPropertiesPtrOutput {
	return o
}

func (o IdMappingWorkflowIdMappingRuleBasedPropertiesPtrOutput) ToIdMappingWorkflowIdMappingRuleBasedPropertiesPtrOutputWithContext(ctx context.Context) IdMappingWorkflowIdMappingRuleBasedPropertiesPtrOutput {
	return o
}

func (o IdMappingWorkflowIdMappingRuleBasedPropertiesPtrOutput) Elem() IdMappingWorkflowIdMappingRuleBasedPropertiesOutput {
	return o.ApplyT(func(v *IdMappingWorkflowIdMappingRuleBasedProperties) IdMappingWorkflowIdMappingRuleBasedProperties {
		if v != nil {
			return *v
		}
		var ret IdMappingWorkflowIdMappingRuleBasedProperties
		return ret
	}).(IdMappingWorkflowIdMappingRuleBasedPropertiesOutput)
}

// The comparison type. You can either choose `ONE_TO_ONE` or `MANY_TO_MANY` as the `attributeMatchingModel` .
//
// If you choose `MANY_TO_MANY` , the system can match attributes across the sub-types of an attribute type. For example, if the value of the `Email` field of Profile A matches the value of the `BusinessEmail` field of Profile B, the two profiles are matched on the `Email` attribute type.
//
// If you choose `ONE_TO_ONE` , the system can only match attributes if the sub-types are an exact match. For example, for the `Email` attribute type, the system will only consider it a match if the value of the `Email` field of Profile A matches the value of the `Email` field of Profile B.
func (o IdMappingWorkflowIdMappingRuleBasedPropertiesPtrOutput) AttributeMatchingModel() IdMappingWorkflowIdMappingRuleBasedPropertiesAttributeMatchingModelPtrOutput {
	return o.ApplyT(func(v *IdMappingWorkflowIdMappingRuleBasedProperties) *IdMappingWorkflowIdMappingRuleBasedPropertiesAttributeMatchingModel {
		if v == nil {
			return nil
		}
		return &v.AttributeMatchingModel
	}).(IdMappingWorkflowIdMappingRuleBasedPropertiesAttributeMatchingModelPtrOutput)
}

// The type of matching record that is allowed to be used in an ID mapping workflow.
//
// If the value is set to `ONE_SOURCE_TO_ONE_TARGET` , only one record in the source can be matched to the same record in the target.
//
// If the value is set to `MANY_SOURCE_TO_ONE_TARGET` , multiple records in the source can be matched to one record in the target.
func (o IdMappingWorkflowIdMappingRuleBasedPropertiesPtrOutput) RecordMatchingModel() IdMappingWorkflowIdMappingRuleBasedPropertiesRecordMatchingModelPtrOutput {
	return o.ApplyT(func(v *IdMappingWorkflowIdMappingRuleBasedProperties) *IdMappingWorkflowIdMappingRuleBasedPropertiesRecordMatchingModel {
		if v == nil {
			return nil
		}
		return &v.RecordMatchingModel
	}).(IdMappingWorkflowIdMappingRuleBasedPropertiesRecordMatchingModelPtrOutput)
}

// The set of rules you can use in an ID mapping workflow. The limitations specified for the source or target to define the match rules must be compatible.
func (o IdMappingWorkflowIdMappingRuleBasedPropertiesPtrOutput) RuleDefinitionType() IdMappingWorkflowIdMappingRuleBasedPropertiesRuleDefinitionTypePtrOutput {
	return o.ApplyT(func(v *IdMappingWorkflowIdMappingRuleBasedProperties) *IdMappingWorkflowIdMappingRuleBasedPropertiesRuleDefinitionType {
		if v == nil {
			return nil
		}
		return v.RuleDefinitionType
	}).(IdMappingWorkflowIdMappingRuleBasedPropertiesRuleDefinitionTypePtrOutput)
}

// The rules that can be used for ID mapping.
func (o IdMappingWorkflowIdMappingRuleBasedPropertiesPtrOutput) Rules() IdMappingWorkflowRuleArrayOutput {
	return o.ApplyT(func(v *IdMappingWorkflowIdMappingRuleBasedProperties) []IdMappingWorkflowRule {
		if v == nil {
			return nil
		}
		return v.Rules
	}).(IdMappingWorkflowRuleArrayOutput)
}

type IdMappingWorkflowIdMappingTechniques struct {
	// The type of ID mapping.
	IdMappingType *IdMappingWorkflowIdMappingTechniquesIdMappingType `pulumi:"idMappingType"`
	// An object which defines any additional configurations required by the provider service.
	ProviderProperties *IdMappingWorkflowProviderProperties `pulumi:"providerProperties"`
	// An object which defines any additional configurations required by rule-based matching.
	RuleBasedProperties *IdMappingWorkflowIdMappingRuleBasedProperties `pulumi:"ruleBasedProperties"`
}

// IdMappingWorkflowIdMappingTechniquesInput is an input type that accepts IdMappingWorkflowIdMappingTechniquesArgs and IdMappingWorkflowIdMappingTechniquesOutput values.
// You can construct a concrete instance of `IdMappingWorkflowIdMappingTechniquesInput` via:
//
//	IdMappingWorkflowIdMappingTechniquesArgs{...}
type IdMappingWorkflowIdMappingTechniquesInput interface {
	pulumi.Input

	ToIdMappingWorkflowIdMappingTechniquesOutput() IdMappingWorkflowIdMappingTechniquesOutput
	ToIdMappingWorkflowIdMappingTechniquesOutputWithContext(context.Context) IdMappingWorkflowIdMappingTechniquesOutput
}

type IdMappingWorkflowIdMappingTechniquesArgs struct {
	// The type of ID mapping.
	IdMappingType IdMappingWorkflowIdMappingTechniquesIdMappingTypePtrInput `pulumi:"idMappingType"`
	// An object which defines any additional configurations required by the provider service.
	ProviderProperties IdMappingWorkflowProviderPropertiesPtrInput `pulumi:"providerProperties"`
	// An object which defines any additional configurations required by rule-based matching.
	RuleBasedProperties IdMappingWorkflowIdMappingRuleBasedPropertiesPtrInput `pulumi:"ruleBasedProperties"`
}

func (IdMappingWorkflowIdMappingTechniquesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdMappingWorkflowIdMappingTechniques)(nil)).Elem()
}

func (i IdMappingWorkflowIdMappingTechniquesArgs) ToIdMappingWorkflowIdMappingTechniquesOutput() IdMappingWorkflowIdMappingTechniquesOutput {
	return i.ToIdMappingWorkflowIdMappingTechniquesOutputWithContext(context.Background())
}

func (i IdMappingWorkflowIdMappingTechniquesArgs) ToIdMappingWorkflowIdMappingTechniquesOutputWithContext(ctx context.Context) IdMappingWorkflowIdMappingTechniquesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdMappingWorkflowIdMappingTechniquesOutput)
}

type IdMappingWorkflowIdMappingTechniquesOutput struct{ *pulumi.OutputState }

func (IdMappingWorkflowIdMappingTechniquesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdMappingWorkflowIdMappingTechniques)(nil)).Elem()
}

func (o IdMappingWorkflowIdMappingTechniquesOutput) ToIdMappingWorkflowIdMappingTechniquesOutput() IdMappingWorkflowIdMappingTechniquesOutput {
	return o
}

func (o IdMappingWorkflowIdMappingTechniquesOutput) ToIdMappingWorkflowIdMappingTechniquesOutputWithContext(ctx context.Context) IdMappingWorkflowIdMappingTechniquesOutput {
	return o
}

// The type of ID mapping.
func (o IdMappingWorkflowIdMappingTechniquesOutput) IdMappingType() IdMappingWorkflowIdMappingTechniquesIdMappingTypePtrOutput {
	return o.ApplyT(func(v IdMappingWorkflowIdMappingTechniques) *IdMappingWorkflowIdMappingTechniquesIdMappingType {
		return v.IdMappingType
	}).(IdMappingWorkflowIdMappingTechniquesIdMappingTypePtrOutput)
}

// An object which defines any additional configurations required by the provider service.
func (o IdMappingWorkflowIdMappingTechniquesOutput) ProviderProperties() IdMappingWorkflowProviderPropertiesPtrOutput {
	return o.ApplyT(func(v IdMappingWorkflowIdMappingTechniques) *IdMappingWorkflowProviderProperties {
		return v.ProviderProperties
	}).(IdMappingWorkflowProviderPropertiesPtrOutput)
}

// An object which defines any additional configurations required by rule-based matching.
func (o IdMappingWorkflowIdMappingTechniquesOutput) RuleBasedProperties() IdMappingWorkflowIdMappingRuleBasedPropertiesPtrOutput {
	return o.ApplyT(func(v IdMappingWorkflowIdMappingTechniques) *IdMappingWorkflowIdMappingRuleBasedProperties {
		return v.RuleBasedProperties
	}).(IdMappingWorkflowIdMappingRuleBasedPropertiesPtrOutput)
}

type IdMappingWorkflowIdMappingTechniquesPtrOutput struct{ *pulumi.OutputState }

func (IdMappingWorkflowIdMappingTechniquesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdMappingWorkflowIdMappingTechniques)(nil)).Elem()
}

func (o IdMappingWorkflowIdMappingTechniquesPtrOutput) ToIdMappingWorkflowIdMappingTechniquesPtrOutput() IdMappingWorkflowIdMappingTechniquesPtrOutput {
	return o
}

func (o IdMappingWorkflowIdMappingTechniquesPtrOutput) ToIdMappingWorkflowIdMappingTechniquesPtrOutputWithContext(ctx context.Context) IdMappingWorkflowIdMappingTechniquesPtrOutput {
	return o
}

func (o IdMappingWorkflowIdMappingTechniquesPtrOutput) Elem() IdMappingWorkflowIdMappingTechniquesOutput {
	return o.ApplyT(func(v *IdMappingWorkflowIdMappingTechniques) IdMappingWorkflowIdMappingTechniques {
		if v != nil {
			return *v
		}
		var ret IdMappingWorkflowIdMappingTechniques
		return ret
	}).(IdMappingWorkflowIdMappingTechniquesOutput)
}

// The type of ID mapping.
func (o IdMappingWorkflowIdMappingTechniquesPtrOutput) IdMappingType() IdMappingWorkflowIdMappingTechniquesIdMappingTypePtrOutput {
	return o.ApplyT(func(v *IdMappingWorkflowIdMappingTechniques) *IdMappingWorkflowIdMappingTechniquesIdMappingType {
		if v == nil {
			return nil
		}
		return v.IdMappingType
	}).(IdMappingWorkflowIdMappingTechniquesIdMappingTypePtrOutput)
}

// An object which defines any additional configurations required by the provider service.
func (o IdMappingWorkflowIdMappingTechniquesPtrOutput) ProviderProperties() IdMappingWorkflowProviderPropertiesPtrOutput {
	return o.ApplyT(func(v *IdMappingWorkflowIdMappingTechniques) *IdMappingWorkflowProviderProperties {
		if v == nil {
			return nil
		}
		return v.ProviderProperties
	}).(IdMappingWorkflowProviderPropertiesPtrOutput)
}

// An object which defines any additional configurations required by rule-based matching.
func (o IdMappingWorkflowIdMappingTechniquesPtrOutput) RuleBasedProperties() IdMappingWorkflowIdMappingRuleBasedPropertiesPtrOutput {
	return o.ApplyT(func(v *IdMappingWorkflowIdMappingTechniques) *IdMappingWorkflowIdMappingRuleBasedProperties {
		if v == nil {
			return nil
		}
		return v.RuleBasedProperties
	}).(IdMappingWorkflowIdMappingRuleBasedPropertiesPtrOutput)
}

type IdMappingWorkflowInputSource struct {
	// An Glue table ARN for the input source table, MatchingWorkflow arn or IdNamespace ARN
	InputSourceArn string `pulumi:"inputSourceArn"`
	// The ARN (Amazon Resource Name) that AWS Entity Resolution generated for the `SchemaMapping` .
	SchemaArn *string `pulumi:"schemaArn"`
	// The type of ID namespace. There are two types: `SOURCE` and `TARGET` .
	//
	// The `SOURCE` contains configurations for `sourceId` data that will be processed in an ID mapping workflow.
	//
	// The `TARGET` contains a configuration of `targetId` which all `sourceIds` will resolve to.
	Type *IdMappingWorkflowInputSourceType `pulumi:"type"`
}

// IdMappingWorkflowInputSourceInput is an input type that accepts IdMappingWorkflowInputSourceArgs and IdMappingWorkflowInputSourceOutput values.
// You can construct a concrete instance of `IdMappingWorkflowInputSourceInput` via:
//
//	IdMappingWorkflowInputSourceArgs{...}
type IdMappingWorkflowInputSourceInput interface {
	pulumi.Input

	ToIdMappingWorkflowInputSourceOutput() IdMappingWorkflowInputSourceOutput
	ToIdMappingWorkflowInputSourceOutputWithContext(context.Context) IdMappingWorkflowInputSourceOutput
}

type IdMappingWorkflowInputSourceArgs struct {
	// An Glue table ARN for the input source table, MatchingWorkflow arn or IdNamespace ARN
	InputSourceArn pulumi.StringInput `pulumi:"inputSourceArn"`
	// The ARN (Amazon Resource Name) that AWS Entity Resolution generated for the `SchemaMapping` .
	SchemaArn pulumi.StringPtrInput `pulumi:"schemaArn"`
	// The type of ID namespace. There are two types: `SOURCE` and `TARGET` .
	//
	// The `SOURCE` contains configurations for `sourceId` data that will be processed in an ID mapping workflow.
	//
	// The `TARGET` contains a configuration of `targetId` which all `sourceIds` will resolve to.
	Type IdMappingWorkflowInputSourceTypePtrInput `pulumi:"type"`
}

func (IdMappingWorkflowInputSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdMappingWorkflowInputSource)(nil)).Elem()
}

func (i IdMappingWorkflowInputSourceArgs) ToIdMappingWorkflowInputSourceOutput() IdMappingWorkflowInputSourceOutput {
	return i.ToIdMappingWorkflowInputSourceOutputWithContext(context.Background())
}

func (i IdMappingWorkflowInputSourceArgs) ToIdMappingWorkflowInputSourceOutputWithContext(ctx context.Context) IdMappingWorkflowInputSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdMappingWorkflowInputSourceOutput)
}

// IdMappingWorkflowInputSourceArrayInput is an input type that accepts IdMappingWorkflowInputSourceArray and IdMappingWorkflowInputSourceArrayOutput values.
// You can construct a concrete instance of `IdMappingWorkflowInputSourceArrayInput` via:
//
//	IdMappingWorkflowInputSourceArray{ IdMappingWorkflowInputSourceArgs{...} }
type IdMappingWorkflowInputSourceArrayInput interface {
	pulumi.Input

	ToIdMappingWorkflowInputSourceArrayOutput() IdMappingWorkflowInputSourceArrayOutput
	ToIdMappingWorkflowInputSourceArrayOutputWithContext(context.Context) IdMappingWorkflowInputSourceArrayOutput
}

type IdMappingWorkflowInputSourceArray []IdMappingWorkflowInputSourceInput

func (IdMappingWorkflowInputSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IdMappingWorkflowInputSource)(nil)).Elem()
}

func (i IdMappingWorkflowInputSourceArray) ToIdMappingWorkflowInputSourceArrayOutput() IdMappingWorkflowInputSourceArrayOutput {
	return i.ToIdMappingWorkflowInputSourceArrayOutputWithContext(context.Background())
}

func (i IdMappingWorkflowInputSourceArray) ToIdMappingWorkflowInputSourceArrayOutputWithContext(ctx context.Context) IdMappingWorkflowInputSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdMappingWorkflowInputSourceArrayOutput)
}

type IdMappingWorkflowInputSourceOutput struct{ *pulumi.OutputState }

func (IdMappingWorkflowInputSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdMappingWorkflowInputSource)(nil)).Elem()
}

func (o IdMappingWorkflowInputSourceOutput) ToIdMappingWorkflowInputSourceOutput() IdMappingWorkflowInputSourceOutput {
	return o
}

func (o IdMappingWorkflowInputSourceOutput) ToIdMappingWorkflowInputSourceOutputWithContext(ctx context.Context) IdMappingWorkflowInputSourceOutput {
	return o
}

// An Glue table ARN for the input source table, MatchingWorkflow arn or IdNamespace ARN
func (o IdMappingWorkflowInputSourceOutput) InputSourceArn() pulumi.StringOutput {
	return o.ApplyT(func(v IdMappingWorkflowInputSource) string { return v.InputSourceArn }).(pulumi.StringOutput)
}

// The ARN (Amazon Resource Name) that AWS Entity Resolution generated for the `SchemaMapping` .
func (o IdMappingWorkflowInputSourceOutput) SchemaArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdMappingWorkflowInputSource) *string { return v.SchemaArn }).(pulumi.StringPtrOutput)
}

// The type of ID namespace. There are two types: `SOURCE` and `TARGET` .
//
// The `SOURCE` contains configurations for `sourceId` data that will be processed in an ID mapping workflow.
//
// The `TARGET` contains a configuration of `targetId` which all `sourceIds` will resolve to.
func (o IdMappingWorkflowInputSourceOutput) Type() IdMappingWorkflowInputSourceTypePtrOutput {
	return o.ApplyT(func(v IdMappingWorkflowInputSource) *IdMappingWorkflowInputSourceType { return v.Type }).(IdMappingWorkflowInputSourceTypePtrOutput)
}

type IdMappingWorkflowInputSourceArrayOutput struct{ *pulumi.OutputState }

func (IdMappingWorkflowInputSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IdMappingWorkflowInputSource)(nil)).Elem()
}

func (o IdMappingWorkflowInputSourceArrayOutput) ToIdMappingWorkflowInputSourceArrayOutput() IdMappingWorkflowInputSourceArrayOutput {
	return o
}

func (o IdMappingWorkflowInputSourceArrayOutput) ToIdMappingWorkflowInputSourceArrayOutputWithContext(ctx context.Context) IdMappingWorkflowInputSourceArrayOutput {
	return o
}

func (o IdMappingWorkflowInputSourceArrayOutput) Index(i pulumi.IntInput) IdMappingWorkflowInputSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IdMappingWorkflowInputSource {
		return vs[0].([]IdMappingWorkflowInputSource)[vs[1].(int)]
	}).(IdMappingWorkflowInputSourceOutput)
}

type IdMappingWorkflowIntermediateSourceConfiguration struct {
	// The s3 path that would be used to stage the intermediate data being generated during workflow execution.
	IntermediateS3Path string `pulumi:"intermediateS3Path"`
}

// IdMappingWorkflowIntermediateSourceConfigurationInput is an input type that accepts IdMappingWorkflowIntermediateSourceConfigurationArgs and IdMappingWorkflowIntermediateSourceConfigurationOutput values.
// You can construct a concrete instance of `IdMappingWorkflowIntermediateSourceConfigurationInput` via:
//
//	IdMappingWorkflowIntermediateSourceConfigurationArgs{...}
type IdMappingWorkflowIntermediateSourceConfigurationInput interface {
	pulumi.Input

	ToIdMappingWorkflowIntermediateSourceConfigurationOutput() IdMappingWorkflowIntermediateSourceConfigurationOutput
	ToIdMappingWorkflowIntermediateSourceConfigurationOutputWithContext(context.Context) IdMappingWorkflowIntermediateSourceConfigurationOutput
}

type IdMappingWorkflowIntermediateSourceConfigurationArgs struct {
	// The s3 path that would be used to stage the intermediate data being generated during workflow execution.
	IntermediateS3Path pulumi.StringInput `pulumi:"intermediateS3Path"`
}

func (IdMappingWorkflowIntermediateSourceConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdMappingWorkflowIntermediateSourceConfiguration)(nil)).Elem()
}

func (i IdMappingWorkflowIntermediateSourceConfigurationArgs) ToIdMappingWorkflowIntermediateSourceConfigurationOutput() IdMappingWorkflowIntermediateSourceConfigurationOutput {
	return i.ToIdMappingWorkflowIntermediateSourceConfigurationOutputWithContext(context.Background())
}

func (i IdMappingWorkflowIntermediateSourceConfigurationArgs) ToIdMappingWorkflowIntermediateSourceConfigurationOutputWithContext(ctx context.Context) IdMappingWorkflowIntermediateSourceConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdMappingWorkflowIntermediateSourceConfigurationOutput)
}

func (i IdMappingWorkflowIntermediateSourceConfigurationArgs) ToIdMappingWorkflowIntermediateSourceConfigurationPtrOutput() IdMappingWorkflowIntermediateSourceConfigurationPtrOutput {
	return i.ToIdMappingWorkflowIntermediateSourceConfigurationPtrOutputWithContext(context.Background())
}

func (i IdMappingWorkflowIntermediateSourceConfigurationArgs) ToIdMappingWorkflowIntermediateSourceConfigurationPtrOutputWithContext(ctx context.Context) IdMappingWorkflowIntermediateSourceConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdMappingWorkflowIntermediateSourceConfigurationOutput).ToIdMappingWorkflowIntermediateSourceConfigurationPtrOutputWithContext(ctx)
}

// IdMappingWorkflowIntermediateSourceConfigurationPtrInput is an input type that accepts IdMappingWorkflowIntermediateSourceConfigurationArgs, IdMappingWorkflowIntermediateSourceConfigurationPtr and IdMappingWorkflowIntermediateSourceConfigurationPtrOutput values.
// You can construct a concrete instance of `IdMappingWorkflowIntermediateSourceConfigurationPtrInput` via:
//
//	        IdMappingWorkflowIntermediateSourceConfigurationArgs{...}
//
//	or:
//
//	        nil
type IdMappingWorkflowIntermediateSourceConfigurationPtrInput interface {
	pulumi.Input

	ToIdMappingWorkflowIntermediateSourceConfigurationPtrOutput() IdMappingWorkflowIntermediateSourceConfigurationPtrOutput
	ToIdMappingWorkflowIntermediateSourceConfigurationPtrOutputWithContext(context.Context) IdMappingWorkflowIntermediateSourceConfigurationPtrOutput
}

type idMappingWorkflowIntermediateSourceConfigurationPtrType IdMappingWorkflowIntermediateSourceConfigurationArgs

func IdMappingWorkflowIntermediateSourceConfigurationPtr(v *IdMappingWorkflowIntermediateSourceConfigurationArgs) IdMappingWorkflowIntermediateSourceConfigurationPtrInput {
	return (*idMappingWorkflowIntermediateSourceConfigurationPtrType)(v)
}

func (*idMappingWorkflowIntermediateSourceConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IdMappingWorkflowIntermediateSourceConfiguration)(nil)).Elem()
}

func (i *idMappingWorkflowIntermediateSourceConfigurationPtrType) ToIdMappingWorkflowIntermediateSourceConfigurationPtrOutput() IdMappingWorkflowIntermediateSourceConfigurationPtrOutput {
	return i.ToIdMappingWorkflowIntermediateSourceConfigurationPtrOutputWithContext(context.Background())
}

func (i *idMappingWorkflowIntermediateSourceConfigurationPtrType) ToIdMappingWorkflowIntermediateSourceConfigurationPtrOutputWithContext(ctx context.Context) IdMappingWorkflowIntermediateSourceConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdMappingWorkflowIntermediateSourceConfigurationPtrOutput)
}

type IdMappingWorkflowIntermediateSourceConfigurationOutput struct{ *pulumi.OutputState }

func (IdMappingWorkflowIntermediateSourceConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdMappingWorkflowIntermediateSourceConfiguration)(nil)).Elem()
}

func (o IdMappingWorkflowIntermediateSourceConfigurationOutput) ToIdMappingWorkflowIntermediateSourceConfigurationOutput() IdMappingWorkflowIntermediateSourceConfigurationOutput {
	return o
}

func (o IdMappingWorkflowIntermediateSourceConfigurationOutput) ToIdMappingWorkflowIntermediateSourceConfigurationOutputWithContext(ctx context.Context) IdMappingWorkflowIntermediateSourceConfigurationOutput {
	return o
}

func (o IdMappingWorkflowIntermediateSourceConfigurationOutput) ToIdMappingWorkflowIntermediateSourceConfigurationPtrOutput() IdMappingWorkflowIntermediateSourceConfigurationPtrOutput {
	return o.ToIdMappingWorkflowIntermediateSourceConfigurationPtrOutputWithContext(context.Background())
}

func (o IdMappingWorkflowIntermediateSourceConfigurationOutput) ToIdMappingWorkflowIntermediateSourceConfigurationPtrOutputWithContext(ctx context.Context) IdMappingWorkflowIntermediateSourceConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IdMappingWorkflowIntermediateSourceConfiguration) *IdMappingWorkflowIntermediateSourceConfiguration {
		return &v
	}).(IdMappingWorkflowIntermediateSourceConfigurationPtrOutput)
}

// The s3 path that would be used to stage the intermediate data being generated during workflow execution.
func (o IdMappingWorkflowIntermediateSourceConfigurationOutput) IntermediateS3Path() pulumi.StringOutput {
	return o.ApplyT(func(v IdMappingWorkflowIntermediateSourceConfiguration) string { return v.IntermediateS3Path }).(pulumi.StringOutput)
}

type IdMappingWorkflowIntermediateSourceConfigurationPtrOutput struct{ *pulumi.OutputState }

func (IdMappingWorkflowIntermediateSourceConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdMappingWorkflowIntermediateSourceConfiguration)(nil)).Elem()
}

func (o IdMappingWorkflowIntermediateSourceConfigurationPtrOutput) ToIdMappingWorkflowIntermediateSourceConfigurationPtrOutput() IdMappingWorkflowIntermediateSourceConfigurationPtrOutput {
	return o
}

func (o IdMappingWorkflowIntermediateSourceConfigurationPtrOutput) ToIdMappingWorkflowIntermediateSourceConfigurationPtrOutputWithContext(ctx context.Context) IdMappingWorkflowIntermediateSourceConfigurationPtrOutput {
	return o
}

func (o IdMappingWorkflowIntermediateSourceConfigurationPtrOutput) Elem() IdMappingWorkflowIntermediateSourceConfigurationOutput {
	return o.ApplyT(func(v *IdMappingWorkflowIntermediateSourceConfiguration) IdMappingWorkflowIntermediateSourceConfiguration {
		if v != nil {
			return *v
		}
		var ret IdMappingWorkflowIntermediateSourceConfiguration
		return ret
	}).(IdMappingWorkflowIntermediateSourceConfigurationOutput)
}

// The s3 path that would be used to stage the intermediate data being generated during workflow execution.
func (o IdMappingWorkflowIntermediateSourceConfigurationPtrOutput) IntermediateS3Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdMappingWorkflowIntermediateSourceConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.IntermediateS3Path
	}).(pulumi.StringPtrOutput)
}

type IdMappingWorkflowOutputSource struct {
	// Customer AWS KMS ARN for encryption at rest. If not provided, system will use an AWS Entity Resolution managed KMS key.
	KmsArn *string `pulumi:"kmsArn"`
	// The S3 path to which Entity Resolution will write the output table
	OutputS3Path string `pulumi:"outputS3Path"`
}

// IdMappingWorkflowOutputSourceInput is an input type that accepts IdMappingWorkflowOutputSourceArgs and IdMappingWorkflowOutputSourceOutput values.
// You can construct a concrete instance of `IdMappingWorkflowOutputSourceInput` via:
//
//	IdMappingWorkflowOutputSourceArgs{...}
type IdMappingWorkflowOutputSourceInput interface {
	pulumi.Input

	ToIdMappingWorkflowOutputSourceOutput() IdMappingWorkflowOutputSourceOutput
	ToIdMappingWorkflowOutputSourceOutputWithContext(context.Context) IdMappingWorkflowOutputSourceOutput
}

type IdMappingWorkflowOutputSourceArgs struct {
	// Customer AWS KMS ARN for encryption at rest. If not provided, system will use an AWS Entity Resolution managed KMS key.
	KmsArn pulumi.StringPtrInput `pulumi:"kmsArn"`
	// The S3 path to which Entity Resolution will write the output table
	OutputS3Path pulumi.StringInput `pulumi:"outputS3Path"`
}

func (IdMappingWorkflowOutputSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdMappingWorkflowOutputSource)(nil)).Elem()
}

func (i IdMappingWorkflowOutputSourceArgs) ToIdMappingWorkflowOutputSourceOutput() IdMappingWorkflowOutputSourceOutput {
	return i.ToIdMappingWorkflowOutputSourceOutputWithContext(context.Background())
}

func (i IdMappingWorkflowOutputSourceArgs) ToIdMappingWorkflowOutputSourceOutputWithContext(ctx context.Context) IdMappingWorkflowOutputSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdMappingWorkflowOutputSourceOutput)
}

// IdMappingWorkflowOutputSourceArrayInput is an input type that accepts IdMappingWorkflowOutputSourceArray and IdMappingWorkflowOutputSourceArrayOutput values.
// You can construct a concrete instance of `IdMappingWorkflowOutputSourceArrayInput` via:
//
//	IdMappingWorkflowOutputSourceArray{ IdMappingWorkflowOutputSourceArgs{...} }
type IdMappingWorkflowOutputSourceArrayInput interface {
	pulumi.Input

	ToIdMappingWorkflowOutputSourceArrayOutput() IdMappingWorkflowOutputSourceArrayOutput
	ToIdMappingWorkflowOutputSourceArrayOutputWithContext(context.Context) IdMappingWorkflowOutputSourceArrayOutput
}

type IdMappingWorkflowOutputSourceArray []IdMappingWorkflowOutputSourceInput

func (IdMappingWorkflowOutputSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IdMappingWorkflowOutputSource)(nil)).Elem()
}

func (i IdMappingWorkflowOutputSourceArray) ToIdMappingWorkflowOutputSourceArrayOutput() IdMappingWorkflowOutputSourceArrayOutput {
	return i.ToIdMappingWorkflowOutputSourceArrayOutputWithContext(context.Background())
}

func (i IdMappingWorkflowOutputSourceArray) ToIdMappingWorkflowOutputSourceArrayOutputWithContext(ctx context.Context) IdMappingWorkflowOutputSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdMappingWorkflowOutputSourceArrayOutput)
}

type IdMappingWorkflowOutputSourceOutput struct{ *pulumi.OutputState }

func (IdMappingWorkflowOutputSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdMappingWorkflowOutputSource)(nil)).Elem()
}

func (o IdMappingWorkflowOutputSourceOutput) ToIdMappingWorkflowOutputSourceOutput() IdMappingWorkflowOutputSourceOutput {
	return o
}

func (o IdMappingWorkflowOutputSourceOutput) ToIdMappingWorkflowOutputSourceOutputWithContext(ctx context.Context) IdMappingWorkflowOutputSourceOutput {
	return o
}

// Customer AWS KMS ARN for encryption at rest. If not provided, system will use an AWS Entity Resolution managed KMS key.
func (o IdMappingWorkflowOutputSourceOutput) KmsArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdMappingWorkflowOutputSource) *string { return v.KmsArn }).(pulumi.StringPtrOutput)
}

// The S3 path to which Entity Resolution will write the output table
func (o IdMappingWorkflowOutputSourceOutput) OutputS3Path() pulumi.StringOutput {
	return o.ApplyT(func(v IdMappingWorkflowOutputSource) string { return v.OutputS3Path }).(pulumi.StringOutput)
}

type IdMappingWorkflowOutputSourceArrayOutput struct{ *pulumi.OutputState }

func (IdMappingWorkflowOutputSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IdMappingWorkflowOutputSource)(nil)).Elem()
}

func (o IdMappingWorkflowOutputSourceArrayOutput) ToIdMappingWorkflowOutputSourceArrayOutput() IdMappingWorkflowOutputSourceArrayOutput {
	return o
}

func (o IdMappingWorkflowOutputSourceArrayOutput) ToIdMappingWorkflowOutputSourceArrayOutputWithContext(ctx context.Context) IdMappingWorkflowOutputSourceArrayOutput {
	return o
}

func (o IdMappingWorkflowOutputSourceArrayOutput) Index(i pulumi.IntInput) IdMappingWorkflowOutputSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IdMappingWorkflowOutputSource {
		return vs[0].([]IdMappingWorkflowOutputSource)[vs[1].(int)]
	}).(IdMappingWorkflowOutputSourceOutput)
}

type IdMappingWorkflowProviderProperties struct {
	// The Amazon S3 location that temporarily stores your data while it processes. Your information won't be saved permanently.
	IntermediateSourceConfiguration *IdMappingWorkflowIntermediateSourceConfiguration `pulumi:"intermediateSourceConfiguration"`
	// Additional Provider configuration that would be required for the provider service. The Configuration must be in JSON string format
	ProviderConfiguration map[string]string `pulumi:"providerConfiguration"`
	// Arn of the Provider Service being used.
	ProviderServiceArn string `pulumi:"providerServiceArn"`
}

// IdMappingWorkflowProviderPropertiesInput is an input type that accepts IdMappingWorkflowProviderPropertiesArgs and IdMappingWorkflowProviderPropertiesOutput values.
// You can construct a concrete instance of `IdMappingWorkflowProviderPropertiesInput` via:
//
//	IdMappingWorkflowProviderPropertiesArgs{...}
type IdMappingWorkflowProviderPropertiesInput interface {
	pulumi.Input

	ToIdMappingWorkflowProviderPropertiesOutput() IdMappingWorkflowProviderPropertiesOutput
	ToIdMappingWorkflowProviderPropertiesOutputWithContext(context.Context) IdMappingWorkflowProviderPropertiesOutput
}

type IdMappingWorkflowProviderPropertiesArgs struct {
	// The Amazon S3 location that temporarily stores your data while it processes. Your information won't be saved permanently.
	IntermediateSourceConfiguration IdMappingWorkflowIntermediateSourceConfigurationPtrInput `pulumi:"intermediateSourceConfiguration"`
	// Additional Provider configuration that would be required for the provider service. The Configuration must be in JSON string format
	ProviderConfiguration pulumi.StringMapInput `pulumi:"providerConfiguration"`
	// Arn of the Provider Service being used.
	ProviderServiceArn pulumi.StringInput `pulumi:"providerServiceArn"`
}

func (IdMappingWorkflowProviderPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdMappingWorkflowProviderProperties)(nil)).Elem()
}

func (i IdMappingWorkflowProviderPropertiesArgs) ToIdMappingWorkflowProviderPropertiesOutput() IdMappingWorkflowProviderPropertiesOutput {
	return i.ToIdMappingWorkflowProviderPropertiesOutputWithContext(context.Background())
}

func (i IdMappingWorkflowProviderPropertiesArgs) ToIdMappingWorkflowProviderPropertiesOutputWithContext(ctx context.Context) IdMappingWorkflowProviderPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdMappingWorkflowProviderPropertiesOutput)
}

func (i IdMappingWorkflowProviderPropertiesArgs) ToIdMappingWorkflowProviderPropertiesPtrOutput() IdMappingWorkflowProviderPropertiesPtrOutput {
	return i.ToIdMappingWorkflowProviderPropertiesPtrOutputWithContext(context.Background())
}

func (i IdMappingWorkflowProviderPropertiesArgs) ToIdMappingWorkflowProviderPropertiesPtrOutputWithContext(ctx context.Context) IdMappingWorkflowProviderPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdMappingWorkflowProviderPropertiesOutput).ToIdMappingWorkflowProviderPropertiesPtrOutputWithContext(ctx)
}

// IdMappingWorkflowProviderPropertiesPtrInput is an input type that accepts IdMappingWorkflowProviderPropertiesArgs, IdMappingWorkflowProviderPropertiesPtr and IdMappingWorkflowProviderPropertiesPtrOutput values.
// You can construct a concrete instance of `IdMappingWorkflowProviderPropertiesPtrInput` via:
//
//	        IdMappingWorkflowProviderPropertiesArgs{...}
//
//	or:
//
//	        nil
type IdMappingWorkflowProviderPropertiesPtrInput interface {
	pulumi.Input

	ToIdMappingWorkflowProviderPropertiesPtrOutput() IdMappingWorkflowProviderPropertiesPtrOutput
	ToIdMappingWorkflowProviderPropertiesPtrOutputWithContext(context.Context) IdMappingWorkflowProviderPropertiesPtrOutput
}

type idMappingWorkflowProviderPropertiesPtrType IdMappingWorkflowProviderPropertiesArgs

func IdMappingWorkflowProviderPropertiesPtr(v *IdMappingWorkflowProviderPropertiesArgs) IdMappingWorkflowProviderPropertiesPtrInput {
	return (*idMappingWorkflowProviderPropertiesPtrType)(v)
}

func (*idMappingWorkflowProviderPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IdMappingWorkflowProviderProperties)(nil)).Elem()
}

func (i *idMappingWorkflowProviderPropertiesPtrType) ToIdMappingWorkflowProviderPropertiesPtrOutput() IdMappingWorkflowProviderPropertiesPtrOutput {
	return i.ToIdMappingWorkflowProviderPropertiesPtrOutputWithContext(context.Background())
}

func (i *idMappingWorkflowProviderPropertiesPtrType) ToIdMappingWorkflowProviderPropertiesPtrOutputWithContext(ctx context.Context) IdMappingWorkflowProviderPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdMappingWorkflowProviderPropertiesPtrOutput)
}

type IdMappingWorkflowProviderPropertiesOutput struct{ *pulumi.OutputState }

func (IdMappingWorkflowProviderPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdMappingWorkflowProviderProperties)(nil)).Elem()
}

func (o IdMappingWorkflowProviderPropertiesOutput) ToIdMappingWorkflowProviderPropertiesOutput() IdMappingWorkflowProviderPropertiesOutput {
	return o
}

func (o IdMappingWorkflowProviderPropertiesOutput) ToIdMappingWorkflowProviderPropertiesOutputWithContext(ctx context.Context) IdMappingWorkflowProviderPropertiesOutput {
	return o
}

func (o IdMappingWorkflowProviderPropertiesOutput) ToIdMappingWorkflowProviderPropertiesPtrOutput() IdMappingWorkflowProviderPropertiesPtrOutput {
	return o.ToIdMappingWorkflowProviderPropertiesPtrOutputWithContext(context.Background())
}

func (o IdMappingWorkflowProviderPropertiesOutput) ToIdMappingWorkflowProviderPropertiesPtrOutputWithContext(ctx context.Context) IdMappingWorkflowProviderPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IdMappingWorkflowProviderProperties) *IdMappingWorkflowProviderProperties {
		return &v
	}).(IdMappingWorkflowProviderPropertiesPtrOutput)
}

// The Amazon S3 location that temporarily stores your data while it processes. Your information won't be saved permanently.
func (o IdMappingWorkflowProviderPropertiesOutput) IntermediateSourceConfiguration() IdMappingWorkflowIntermediateSourceConfigurationPtrOutput {
	return o.ApplyT(func(v IdMappingWorkflowProviderProperties) *IdMappingWorkflowIntermediateSourceConfiguration {
		return v.IntermediateSourceConfiguration
	}).(IdMappingWorkflowIntermediateSourceConfigurationPtrOutput)
}

// Additional Provider configuration that would be required for the provider service. The Configuration must be in JSON string format
func (o IdMappingWorkflowProviderPropertiesOutput) ProviderConfiguration() pulumi.StringMapOutput {
	return o.ApplyT(func(v IdMappingWorkflowProviderProperties) map[string]string { return v.ProviderConfiguration }).(pulumi.StringMapOutput)
}

// Arn of the Provider Service being used.
func (o IdMappingWorkflowProviderPropertiesOutput) ProviderServiceArn() pulumi.StringOutput {
	return o.ApplyT(func(v IdMappingWorkflowProviderProperties) string { return v.ProviderServiceArn }).(pulumi.StringOutput)
}

type IdMappingWorkflowProviderPropertiesPtrOutput struct{ *pulumi.OutputState }

func (IdMappingWorkflowProviderPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdMappingWorkflowProviderProperties)(nil)).Elem()
}

func (o IdMappingWorkflowProviderPropertiesPtrOutput) ToIdMappingWorkflowProviderPropertiesPtrOutput() IdMappingWorkflowProviderPropertiesPtrOutput {
	return o
}

func (o IdMappingWorkflowProviderPropertiesPtrOutput) ToIdMappingWorkflowProviderPropertiesPtrOutputWithContext(ctx context.Context) IdMappingWorkflowProviderPropertiesPtrOutput {
	return o
}

func (o IdMappingWorkflowProviderPropertiesPtrOutput) Elem() IdMappingWorkflowProviderPropertiesOutput {
	return o.ApplyT(func(v *IdMappingWorkflowProviderProperties) IdMappingWorkflowProviderProperties {
		if v != nil {
			return *v
		}
		var ret IdMappingWorkflowProviderProperties
		return ret
	}).(IdMappingWorkflowProviderPropertiesOutput)
}

// The Amazon S3 location that temporarily stores your data while it processes. Your information won't be saved permanently.
func (o IdMappingWorkflowProviderPropertiesPtrOutput) IntermediateSourceConfiguration() IdMappingWorkflowIntermediateSourceConfigurationPtrOutput {
	return o.ApplyT(func(v *IdMappingWorkflowProviderProperties) *IdMappingWorkflowIntermediateSourceConfiguration {
		if v == nil {
			return nil
		}
		return v.IntermediateSourceConfiguration
	}).(IdMappingWorkflowIntermediateSourceConfigurationPtrOutput)
}

// Additional Provider configuration that would be required for the provider service. The Configuration must be in JSON string format
func (o IdMappingWorkflowProviderPropertiesPtrOutput) ProviderConfiguration() pulumi.StringMapOutput {
	return o.ApplyT(func(v *IdMappingWorkflowProviderProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.ProviderConfiguration
	}).(pulumi.StringMapOutput)
}

// Arn of the Provider Service being used.
func (o IdMappingWorkflowProviderPropertiesPtrOutput) ProviderServiceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdMappingWorkflowProviderProperties) *string {
		if v == nil {
			return nil
		}
		return &v.ProviderServiceArn
	}).(pulumi.StringPtrOutput)
}

type IdMappingWorkflowRule struct {
	// A list of `MatchingKeys` . The `MatchingKeys` must have been defined in the `SchemaMapping` . Two records are considered to match according to this rule if all of the `MatchingKeys` match.
	MatchingKeys []string `pulumi:"matchingKeys"`
	// A name for the matching rule.
	RuleName string `pulumi:"ruleName"`
}

// IdMappingWorkflowRuleInput is an input type that accepts IdMappingWorkflowRuleArgs and IdMappingWorkflowRuleOutput values.
// You can construct a concrete instance of `IdMappingWorkflowRuleInput` via:
//
//	IdMappingWorkflowRuleArgs{...}
type IdMappingWorkflowRuleInput interface {
	pulumi.Input

	ToIdMappingWorkflowRuleOutput() IdMappingWorkflowRuleOutput
	ToIdMappingWorkflowRuleOutputWithContext(context.Context) IdMappingWorkflowRuleOutput
}

type IdMappingWorkflowRuleArgs struct {
	// A list of `MatchingKeys` . The `MatchingKeys` must have been defined in the `SchemaMapping` . Two records are considered to match according to this rule if all of the `MatchingKeys` match.
	MatchingKeys pulumi.StringArrayInput `pulumi:"matchingKeys"`
	// A name for the matching rule.
	RuleName pulumi.StringInput `pulumi:"ruleName"`
}

func (IdMappingWorkflowRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdMappingWorkflowRule)(nil)).Elem()
}

func (i IdMappingWorkflowRuleArgs) ToIdMappingWorkflowRuleOutput() IdMappingWorkflowRuleOutput {
	return i.ToIdMappingWorkflowRuleOutputWithContext(context.Background())
}

func (i IdMappingWorkflowRuleArgs) ToIdMappingWorkflowRuleOutputWithContext(ctx context.Context) IdMappingWorkflowRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdMappingWorkflowRuleOutput)
}

// IdMappingWorkflowRuleArrayInput is an input type that accepts IdMappingWorkflowRuleArray and IdMappingWorkflowRuleArrayOutput values.
// You can construct a concrete instance of `IdMappingWorkflowRuleArrayInput` via:
//
//	IdMappingWorkflowRuleArray{ IdMappingWorkflowRuleArgs{...} }
type IdMappingWorkflowRuleArrayInput interface {
	pulumi.Input

	ToIdMappingWorkflowRuleArrayOutput() IdMappingWorkflowRuleArrayOutput
	ToIdMappingWorkflowRuleArrayOutputWithContext(context.Context) IdMappingWorkflowRuleArrayOutput
}

type IdMappingWorkflowRuleArray []IdMappingWorkflowRuleInput

func (IdMappingWorkflowRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IdMappingWorkflowRule)(nil)).Elem()
}

func (i IdMappingWorkflowRuleArray) ToIdMappingWorkflowRuleArrayOutput() IdMappingWorkflowRuleArrayOutput {
	return i.ToIdMappingWorkflowRuleArrayOutputWithContext(context.Background())
}

func (i IdMappingWorkflowRuleArray) ToIdMappingWorkflowRuleArrayOutputWithContext(ctx context.Context) IdMappingWorkflowRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdMappingWorkflowRuleArrayOutput)
}

type IdMappingWorkflowRuleOutput struct{ *pulumi.OutputState }

func (IdMappingWorkflowRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdMappingWorkflowRule)(nil)).Elem()
}

func (o IdMappingWorkflowRuleOutput) ToIdMappingWorkflowRuleOutput() IdMappingWorkflowRuleOutput {
	return o
}

func (o IdMappingWorkflowRuleOutput) ToIdMappingWorkflowRuleOutputWithContext(ctx context.Context) IdMappingWorkflowRuleOutput {
	return o
}

// A list of `MatchingKeys` . The `MatchingKeys` must have been defined in the `SchemaMapping` . Two records are considered to match according to this rule if all of the `MatchingKeys` match.
func (o IdMappingWorkflowRuleOutput) MatchingKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IdMappingWorkflowRule) []string { return v.MatchingKeys }).(pulumi.StringArrayOutput)
}

// A name for the matching rule.
func (o IdMappingWorkflowRuleOutput) RuleName() pulumi.StringOutput {
	return o.ApplyT(func(v IdMappingWorkflowRule) string { return v.RuleName }).(pulumi.StringOutput)
}

type IdMappingWorkflowRuleArrayOutput struct{ *pulumi.OutputState }

func (IdMappingWorkflowRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IdMappingWorkflowRule)(nil)).Elem()
}

func (o IdMappingWorkflowRuleArrayOutput) ToIdMappingWorkflowRuleArrayOutput() IdMappingWorkflowRuleArrayOutput {
	return o
}

func (o IdMappingWorkflowRuleArrayOutput) ToIdMappingWorkflowRuleArrayOutputWithContext(ctx context.Context) IdMappingWorkflowRuleArrayOutput {
	return o
}

func (o IdMappingWorkflowRuleArrayOutput) Index(i pulumi.IntInput) IdMappingWorkflowRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IdMappingWorkflowRule {
		return vs[0].([]IdMappingWorkflowRule)[vs[1].(int)]
	}).(IdMappingWorkflowRuleOutput)
}

// A key-value pair to associate with a resource
type IdMappingWorkflowTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

type IdNamespaceIdMappingWorkflowProperties struct {
	// The type of ID mapping.
	IdMappingType IdNamespaceIdMappingWorkflowPropertiesIdMappingType `pulumi:"idMappingType"`
	// An object which defines any additional configurations required by the provider service.
	ProviderProperties *IdNamespaceNamespaceProviderProperties `pulumi:"providerProperties"`
	// An object which defines any additional configurations required by rule-based matching.
	RuleBasedProperties *IdNamespaceNamespaceRuleBasedProperties `pulumi:"ruleBasedProperties"`
}

// IdNamespaceIdMappingWorkflowPropertiesInput is an input type that accepts IdNamespaceIdMappingWorkflowPropertiesArgs and IdNamespaceIdMappingWorkflowPropertiesOutput values.
// You can construct a concrete instance of `IdNamespaceIdMappingWorkflowPropertiesInput` via:
//
//	IdNamespaceIdMappingWorkflowPropertiesArgs{...}
type IdNamespaceIdMappingWorkflowPropertiesInput interface {
	pulumi.Input

	ToIdNamespaceIdMappingWorkflowPropertiesOutput() IdNamespaceIdMappingWorkflowPropertiesOutput
	ToIdNamespaceIdMappingWorkflowPropertiesOutputWithContext(context.Context) IdNamespaceIdMappingWorkflowPropertiesOutput
}

type IdNamespaceIdMappingWorkflowPropertiesArgs struct {
	// The type of ID mapping.
	IdMappingType IdNamespaceIdMappingWorkflowPropertiesIdMappingTypeInput `pulumi:"idMappingType"`
	// An object which defines any additional configurations required by the provider service.
	ProviderProperties IdNamespaceNamespaceProviderPropertiesPtrInput `pulumi:"providerProperties"`
	// An object which defines any additional configurations required by rule-based matching.
	RuleBasedProperties IdNamespaceNamespaceRuleBasedPropertiesPtrInput `pulumi:"ruleBasedProperties"`
}

func (IdNamespaceIdMappingWorkflowPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdNamespaceIdMappingWorkflowProperties)(nil)).Elem()
}

func (i IdNamespaceIdMappingWorkflowPropertiesArgs) ToIdNamespaceIdMappingWorkflowPropertiesOutput() IdNamespaceIdMappingWorkflowPropertiesOutput {
	return i.ToIdNamespaceIdMappingWorkflowPropertiesOutputWithContext(context.Background())
}

func (i IdNamespaceIdMappingWorkflowPropertiesArgs) ToIdNamespaceIdMappingWorkflowPropertiesOutputWithContext(ctx context.Context) IdNamespaceIdMappingWorkflowPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdNamespaceIdMappingWorkflowPropertiesOutput)
}

// IdNamespaceIdMappingWorkflowPropertiesArrayInput is an input type that accepts IdNamespaceIdMappingWorkflowPropertiesArray and IdNamespaceIdMappingWorkflowPropertiesArrayOutput values.
// You can construct a concrete instance of `IdNamespaceIdMappingWorkflowPropertiesArrayInput` via:
//
//	IdNamespaceIdMappingWorkflowPropertiesArray{ IdNamespaceIdMappingWorkflowPropertiesArgs{...} }
type IdNamespaceIdMappingWorkflowPropertiesArrayInput interface {
	pulumi.Input

	ToIdNamespaceIdMappingWorkflowPropertiesArrayOutput() IdNamespaceIdMappingWorkflowPropertiesArrayOutput
	ToIdNamespaceIdMappingWorkflowPropertiesArrayOutputWithContext(context.Context) IdNamespaceIdMappingWorkflowPropertiesArrayOutput
}

type IdNamespaceIdMappingWorkflowPropertiesArray []IdNamespaceIdMappingWorkflowPropertiesInput

func (IdNamespaceIdMappingWorkflowPropertiesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IdNamespaceIdMappingWorkflowProperties)(nil)).Elem()
}

func (i IdNamespaceIdMappingWorkflowPropertiesArray) ToIdNamespaceIdMappingWorkflowPropertiesArrayOutput() IdNamespaceIdMappingWorkflowPropertiesArrayOutput {
	return i.ToIdNamespaceIdMappingWorkflowPropertiesArrayOutputWithContext(context.Background())
}

func (i IdNamespaceIdMappingWorkflowPropertiesArray) ToIdNamespaceIdMappingWorkflowPropertiesArrayOutputWithContext(ctx context.Context) IdNamespaceIdMappingWorkflowPropertiesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdNamespaceIdMappingWorkflowPropertiesArrayOutput)
}

type IdNamespaceIdMappingWorkflowPropertiesOutput struct{ *pulumi.OutputState }

func (IdNamespaceIdMappingWorkflowPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdNamespaceIdMappingWorkflowProperties)(nil)).Elem()
}

func (o IdNamespaceIdMappingWorkflowPropertiesOutput) ToIdNamespaceIdMappingWorkflowPropertiesOutput() IdNamespaceIdMappingWorkflowPropertiesOutput {
	return o
}

func (o IdNamespaceIdMappingWorkflowPropertiesOutput) ToIdNamespaceIdMappingWorkflowPropertiesOutputWithContext(ctx context.Context) IdNamespaceIdMappingWorkflowPropertiesOutput {
	return o
}

// The type of ID mapping.
func (o IdNamespaceIdMappingWorkflowPropertiesOutput) IdMappingType() IdNamespaceIdMappingWorkflowPropertiesIdMappingTypeOutput {
	return o.ApplyT(func(v IdNamespaceIdMappingWorkflowProperties) IdNamespaceIdMappingWorkflowPropertiesIdMappingType {
		return v.IdMappingType
	}).(IdNamespaceIdMappingWorkflowPropertiesIdMappingTypeOutput)
}

// An object which defines any additional configurations required by the provider service.
func (o IdNamespaceIdMappingWorkflowPropertiesOutput) ProviderProperties() IdNamespaceNamespaceProviderPropertiesPtrOutput {
	return o.ApplyT(func(v IdNamespaceIdMappingWorkflowProperties) *IdNamespaceNamespaceProviderProperties {
		return v.ProviderProperties
	}).(IdNamespaceNamespaceProviderPropertiesPtrOutput)
}

// An object which defines any additional configurations required by rule-based matching.
func (o IdNamespaceIdMappingWorkflowPropertiesOutput) RuleBasedProperties() IdNamespaceNamespaceRuleBasedPropertiesPtrOutput {
	return o.ApplyT(func(v IdNamespaceIdMappingWorkflowProperties) *IdNamespaceNamespaceRuleBasedProperties {
		return v.RuleBasedProperties
	}).(IdNamespaceNamespaceRuleBasedPropertiesPtrOutput)
}

type IdNamespaceIdMappingWorkflowPropertiesArrayOutput struct{ *pulumi.OutputState }

func (IdNamespaceIdMappingWorkflowPropertiesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IdNamespaceIdMappingWorkflowProperties)(nil)).Elem()
}

func (o IdNamespaceIdMappingWorkflowPropertiesArrayOutput) ToIdNamespaceIdMappingWorkflowPropertiesArrayOutput() IdNamespaceIdMappingWorkflowPropertiesArrayOutput {
	return o
}

func (o IdNamespaceIdMappingWorkflowPropertiesArrayOutput) ToIdNamespaceIdMappingWorkflowPropertiesArrayOutputWithContext(ctx context.Context) IdNamespaceIdMappingWorkflowPropertiesArrayOutput {
	return o
}

func (o IdNamespaceIdMappingWorkflowPropertiesArrayOutput) Index(i pulumi.IntInput) IdNamespaceIdMappingWorkflowPropertiesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IdNamespaceIdMappingWorkflowProperties {
		return vs[0].([]IdNamespaceIdMappingWorkflowProperties)[vs[1].(int)]
	}).(IdNamespaceIdMappingWorkflowPropertiesOutput)
}

type IdNamespaceInputSource struct {
	// An AWS Glue table Amazon Resource Name (ARN) or a matching workflow ARN for the input source table.
	InputSourceArn string `pulumi:"inputSourceArn"`
	// The name of the schema.
	SchemaName *string `pulumi:"schemaName"`
}

// IdNamespaceInputSourceInput is an input type that accepts IdNamespaceInputSourceArgs and IdNamespaceInputSourceOutput values.
// You can construct a concrete instance of `IdNamespaceInputSourceInput` via:
//
//	IdNamespaceInputSourceArgs{...}
type IdNamespaceInputSourceInput interface {
	pulumi.Input

	ToIdNamespaceInputSourceOutput() IdNamespaceInputSourceOutput
	ToIdNamespaceInputSourceOutputWithContext(context.Context) IdNamespaceInputSourceOutput
}

type IdNamespaceInputSourceArgs struct {
	// An AWS Glue table Amazon Resource Name (ARN) or a matching workflow ARN for the input source table.
	InputSourceArn pulumi.StringInput `pulumi:"inputSourceArn"`
	// The name of the schema.
	SchemaName pulumi.StringPtrInput `pulumi:"schemaName"`
}

func (IdNamespaceInputSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdNamespaceInputSource)(nil)).Elem()
}

func (i IdNamespaceInputSourceArgs) ToIdNamespaceInputSourceOutput() IdNamespaceInputSourceOutput {
	return i.ToIdNamespaceInputSourceOutputWithContext(context.Background())
}

func (i IdNamespaceInputSourceArgs) ToIdNamespaceInputSourceOutputWithContext(ctx context.Context) IdNamespaceInputSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdNamespaceInputSourceOutput)
}

// IdNamespaceInputSourceArrayInput is an input type that accepts IdNamespaceInputSourceArray and IdNamespaceInputSourceArrayOutput values.
// You can construct a concrete instance of `IdNamespaceInputSourceArrayInput` via:
//
//	IdNamespaceInputSourceArray{ IdNamespaceInputSourceArgs{...} }
type IdNamespaceInputSourceArrayInput interface {
	pulumi.Input

	ToIdNamespaceInputSourceArrayOutput() IdNamespaceInputSourceArrayOutput
	ToIdNamespaceInputSourceArrayOutputWithContext(context.Context) IdNamespaceInputSourceArrayOutput
}

type IdNamespaceInputSourceArray []IdNamespaceInputSourceInput

func (IdNamespaceInputSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IdNamespaceInputSource)(nil)).Elem()
}

func (i IdNamespaceInputSourceArray) ToIdNamespaceInputSourceArrayOutput() IdNamespaceInputSourceArrayOutput {
	return i.ToIdNamespaceInputSourceArrayOutputWithContext(context.Background())
}

func (i IdNamespaceInputSourceArray) ToIdNamespaceInputSourceArrayOutputWithContext(ctx context.Context) IdNamespaceInputSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdNamespaceInputSourceArrayOutput)
}

type IdNamespaceInputSourceOutput struct{ *pulumi.OutputState }

func (IdNamespaceInputSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdNamespaceInputSource)(nil)).Elem()
}

func (o IdNamespaceInputSourceOutput) ToIdNamespaceInputSourceOutput() IdNamespaceInputSourceOutput {
	return o
}

func (o IdNamespaceInputSourceOutput) ToIdNamespaceInputSourceOutputWithContext(ctx context.Context) IdNamespaceInputSourceOutput {
	return o
}

// An AWS Glue table Amazon Resource Name (ARN) or a matching workflow ARN for the input source table.
func (o IdNamespaceInputSourceOutput) InputSourceArn() pulumi.StringOutput {
	return o.ApplyT(func(v IdNamespaceInputSource) string { return v.InputSourceArn }).(pulumi.StringOutput)
}

// The name of the schema.
func (o IdNamespaceInputSourceOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdNamespaceInputSource) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

type IdNamespaceInputSourceArrayOutput struct{ *pulumi.OutputState }

func (IdNamespaceInputSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IdNamespaceInputSource)(nil)).Elem()
}

func (o IdNamespaceInputSourceArrayOutput) ToIdNamespaceInputSourceArrayOutput() IdNamespaceInputSourceArrayOutput {
	return o
}

func (o IdNamespaceInputSourceArrayOutput) ToIdNamespaceInputSourceArrayOutputWithContext(ctx context.Context) IdNamespaceInputSourceArrayOutput {
	return o
}

func (o IdNamespaceInputSourceArrayOutput) Index(i pulumi.IntInput) IdNamespaceInputSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IdNamespaceInputSource {
		return vs[0].([]IdNamespaceInputSource)[vs[1].(int)]
	}).(IdNamespaceInputSourceOutput)
}

type IdNamespaceNamespaceProviderProperties struct {
	// Additional Provider configuration that would be required for the provider service. The Configuration must be in JSON string format.
	ProviderConfiguration map[string]string `pulumi:"providerConfiguration"`
	// The Amazon Resource Name (ARN) of the provider service.
	ProviderServiceArn string `pulumi:"providerServiceArn"`
}

// IdNamespaceNamespaceProviderPropertiesInput is an input type that accepts IdNamespaceNamespaceProviderPropertiesArgs and IdNamespaceNamespaceProviderPropertiesOutput values.
// You can construct a concrete instance of `IdNamespaceNamespaceProviderPropertiesInput` via:
//
//	IdNamespaceNamespaceProviderPropertiesArgs{...}
type IdNamespaceNamespaceProviderPropertiesInput interface {
	pulumi.Input

	ToIdNamespaceNamespaceProviderPropertiesOutput() IdNamespaceNamespaceProviderPropertiesOutput
	ToIdNamespaceNamespaceProviderPropertiesOutputWithContext(context.Context) IdNamespaceNamespaceProviderPropertiesOutput
}

type IdNamespaceNamespaceProviderPropertiesArgs struct {
	// Additional Provider configuration that would be required for the provider service. The Configuration must be in JSON string format.
	ProviderConfiguration pulumi.StringMapInput `pulumi:"providerConfiguration"`
	// The Amazon Resource Name (ARN) of the provider service.
	ProviderServiceArn pulumi.StringInput `pulumi:"providerServiceArn"`
}

func (IdNamespaceNamespaceProviderPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdNamespaceNamespaceProviderProperties)(nil)).Elem()
}

func (i IdNamespaceNamespaceProviderPropertiesArgs) ToIdNamespaceNamespaceProviderPropertiesOutput() IdNamespaceNamespaceProviderPropertiesOutput {
	return i.ToIdNamespaceNamespaceProviderPropertiesOutputWithContext(context.Background())
}

func (i IdNamespaceNamespaceProviderPropertiesArgs) ToIdNamespaceNamespaceProviderPropertiesOutputWithContext(ctx context.Context) IdNamespaceNamespaceProviderPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdNamespaceNamespaceProviderPropertiesOutput)
}

func (i IdNamespaceNamespaceProviderPropertiesArgs) ToIdNamespaceNamespaceProviderPropertiesPtrOutput() IdNamespaceNamespaceProviderPropertiesPtrOutput {
	return i.ToIdNamespaceNamespaceProviderPropertiesPtrOutputWithContext(context.Background())
}

func (i IdNamespaceNamespaceProviderPropertiesArgs) ToIdNamespaceNamespaceProviderPropertiesPtrOutputWithContext(ctx context.Context) IdNamespaceNamespaceProviderPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdNamespaceNamespaceProviderPropertiesOutput).ToIdNamespaceNamespaceProviderPropertiesPtrOutputWithContext(ctx)
}

// IdNamespaceNamespaceProviderPropertiesPtrInput is an input type that accepts IdNamespaceNamespaceProviderPropertiesArgs, IdNamespaceNamespaceProviderPropertiesPtr and IdNamespaceNamespaceProviderPropertiesPtrOutput values.
// You can construct a concrete instance of `IdNamespaceNamespaceProviderPropertiesPtrInput` via:
//
//	        IdNamespaceNamespaceProviderPropertiesArgs{...}
//
//	or:
//
//	        nil
type IdNamespaceNamespaceProviderPropertiesPtrInput interface {
	pulumi.Input

	ToIdNamespaceNamespaceProviderPropertiesPtrOutput() IdNamespaceNamespaceProviderPropertiesPtrOutput
	ToIdNamespaceNamespaceProviderPropertiesPtrOutputWithContext(context.Context) IdNamespaceNamespaceProviderPropertiesPtrOutput
}

type idNamespaceNamespaceProviderPropertiesPtrType IdNamespaceNamespaceProviderPropertiesArgs

func IdNamespaceNamespaceProviderPropertiesPtr(v *IdNamespaceNamespaceProviderPropertiesArgs) IdNamespaceNamespaceProviderPropertiesPtrInput {
	return (*idNamespaceNamespaceProviderPropertiesPtrType)(v)
}

func (*idNamespaceNamespaceProviderPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IdNamespaceNamespaceProviderProperties)(nil)).Elem()
}

func (i *idNamespaceNamespaceProviderPropertiesPtrType) ToIdNamespaceNamespaceProviderPropertiesPtrOutput() IdNamespaceNamespaceProviderPropertiesPtrOutput {
	return i.ToIdNamespaceNamespaceProviderPropertiesPtrOutputWithContext(context.Background())
}

func (i *idNamespaceNamespaceProviderPropertiesPtrType) ToIdNamespaceNamespaceProviderPropertiesPtrOutputWithContext(ctx context.Context) IdNamespaceNamespaceProviderPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdNamespaceNamespaceProviderPropertiesPtrOutput)
}

type IdNamespaceNamespaceProviderPropertiesOutput struct{ *pulumi.OutputState }

func (IdNamespaceNamespaceProviderPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdNamespaceNamespaceProviderProperties)(nil)).Elem()
}

func (o IdNamespaceNamespaceProviderPropertiesOutput) ToIdNamespaceNamespaceProviderPropertiesOutput() IdNamespaceNamespaceProviderPropertiesOutput {
	return o
}

func (o IdNamespaceNamespaceProviderPropertiesOutput) ToIdNamespaceNamespaceProviderPropertiesOutputWithContext(ctx context.Context) IdNamespaceNamespaceProviderPropertiesOutput {
	return o
}

func (o IdNamespaceNamespaceProviderPropertiesOutput) ToIdNamespaceNamespaceProviderPropertiesPtrOutput() IdNamespaceNamespaceProviderPropertiesPtrOutput {
	return o.ToIdNamespaceNamespaceProviderPropertiesPtrOutputWithContext(context.Background())
}

func (o IdNamespaceNamespaceProviderPropertiesOutput) ToIdNamespaceNamespaceProviderPropertiesPtrOutputWithContext(ctx context.Context) IdNamespaceNamespaceProviderPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IdNamespaceNamespaceProviderProperties) *IdNamespaceNamespaceProviderProperties {
		return &v
	}).(IdNamespaceNamespaceProviderPropertiesPtrOutput)
}

// Additional Provider configuration that would be required for the provider service. The Configuration must be in JSON string format.
func (o IdNamespaceNamespaceProviderPropertiesOutput) ProviderConfiguration() pulumi.StringMapOutput {
	return o.ApplyT(func(v IdNamespaceNamespaceProviderProperties) map[string]string { return v.ProviderConfiguration }).(pulumi.StringMapOutput)
}

// The Amazon Resource Name (ARN) of the provider service.
func (o IdNamespaceNamespaceProviderPropertiesOutput) ProviderServiceArn() pulumi.StringOutput {
	return o.ApplyT(func(v IdNamespaceNamespaceProviderProperties) string { return v.ProviderServiceArn }).(pulumi.StringOutput)
}

type IdNamespaceNamespaceProviderPropertiesPtrOutput struct{ *pulumi.OutputState }

func (IdNamespaceNamespaceProviderPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdNamespaceNamespaceProviderProperties)(nil)).Elem()
}

func (o IdNamespaceNamespaceProviderPropertiesPtrOutput) ToIdNamespaceNamespaceProviderPropertiesPtrOutput() IdNamespaceNamespaceProviderPropertiesPtrOutput {
	return o
}

func (o IdNamespaceNamespaceProviderPropertiesPtrOutput) ToIdNamespaceNamespaceProviderPropertiesPtrOutputWithContext(ctx context.Context) IdNamespaceNamespaceProviderPropertiesPtrOutput {
	return o
}

func (o IdNamespaceNamespaceProviderPropertiesPtrOutput) Elem() IdNamespaceNamespaceProviderPropertiesOutput {
	return o.ApplyT(func(v *IdNamespaceNamespaceProviderProperties) IdNamespaceNamespaceProviderProperties {
		if v != nil {
			return *v
		}
		var ret IdNamespaceNamespaceProviderProperties
		return ret
	}).(IdNamespaceNamespaceProviderPropertiesOutput)
}

// Additional Provider configuration that would be required for the provider service. The Configuration must be in JSON string format.
func (o IdNamespaceNamespaceProviderPropertiesPtrOutput) ProviderConfiguration() pulumi.StringMapOutput {
	return o.ApplyT(func(v *IdNamespaceNamespaceProviderProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.ProviderConfiguration
	}).(pulumi.StringMapOutput)
}

// The Amazon Resource Name (ARN) of the provider service.
func (o IdNamespaceNamespaceProviderPropertiesPtrOutput) ProviderServiceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdNamespaceNamespaceProviderProperties) *string {
		if v == nil {
			return nil
		}
		return &v.ProviderServiceArn
	}).(pulumi.StringPtrOutput)
}

type IdNamespaceNamespaceRuleBasedProperties struct {
	// The comparison type. You can either choose `ONE_TO_ONE` or `MANY_TO_MANY` as the `attributeMatchingModel` .
	//
	// If you choose `MANY_TO_MANY` , the system can match attributes across the sub-types of an attribute type. For example, if the value of the `Email` field of Profile A matches the value of `BusinessEmail` field of Profile B, the two profiles are matched on the `Email` attribute type.
	//
	// If you choose `ONE_TO_ONE` , the system can only match attributes if the sub-types are an exact match. For example, for the `Email` attribute type, the system will only consider it a match if the value of the `Email` field of Profile A matches the value of the `Email` field of Profile B.
	AttributeMatchingModel *IdNamespaceNamespaceRuleBasedPropertiesAttributeMatchingModel `pulumi:"attributeMatchingModel"`
	// The comparison type. You can either choose `ONE_TO_ONE` or `MANY_TO_MANY` as the `attributeMatchingModel` .
	//
	// If you choose `MANY_TO_MANY` , the system can match attributes across the sub-types of an attribute type. For example, if the value of the `Email` field of Profile A matches the value of `BusinessEmail` field of Profile B, the two profiles are matched on the `Email` attribute type.
	//
	// If you choose `ONE_TO_ONE` , the system can only match attributes if the sub-types are an exact match. For example, for the `Email` attribute type, the system will only consider it a match if the value of the `Email` field of Profile A matches the value of the `Email` field of Profile B.
	RecordMatchingModels []IdNamespaceRecordMatchingModel `pulumi:"recordMatchingModels"`
	// The sets of rules you can use in an ID mapping workflow. The limitations specified for the source and target must be compatible.
	RuleDefinitionTypes []IdNamespaceRuleDefinitionType `pulumi:"ruleDefinitionTypes"`
	// The rules for the ID namespace.
	Rules []IdNamespaceRule `pulumi:"rules"`
}

// IdNamespaceNamespaceRuleBasedPropertiesInput is an input type that accepts IdNamespaceNamespaceRuleBasedPropertiesArgs and IdNamespaceNamespaceRuleBasedPropertiesOutput values.
// You can construct a concrete instance of `IdNamespaceNamespaceRuleBasedPropertiesInput` via:
//
//	IdNamespaceNamespaceRuleBasedPropertiesArgs{...}
type IdNamespaceNamespaceRuleBasedPropertiesInput interface {
	pulumi.Input

	ToIdNamespaceNamespaceRuleBasedPropertiesOutput() IdNamespaceNamespaceRuleBasedPropertiesOutput
	ToIdNamespaceNamespaceRuleBasedPropertiesOutputWithContext(context.Context) IdNamespaceNamespaceRuleBasedPropertiesOutput
}

type IdNamespaceNamespaceRuleBasedPropertiesArgs struct {
	// The comparison type. You can either choose `ONE_TO_ONE` or `MANY_TO_MANY` as the `attributeMatchingModel` .
	//
	// If you choose `MANY_TO_MANY` , the system can match attributes across the sub-types of an attribute type. For example, if the value of the `Email` field of Profile A matches the value of `BusinessEmail` field of Profile B, the two profiles are matched on the `Email` attribute type.
	//
	// If you choose `ONE_TO_ONE` , the system can only match attributes if the sub-types are an exact match. For example, for the `Email` attribute type, the system will only consider it a match if the value of the `Email` field of Profile A matches the value of the `Email` field of Profile B.
	AttributeMatchingModel IdNamespaceNamespaceRuleBasedPropertiesAttributeMatchingModelPtrInput `pulumi:"attributeMatchingModel"`
	// The comparison type. You can either choose `ONE_TO_ONE` or `MANY_TO_MANY` as the `attributeMatchingModel` .
	//
	// If you choose `MANY_TO_MANY` , the system can match attributes across the sub-types of an attribute type. For example, if the value of the `Email` field of Profile A matches the value of `BusinessEmail` field of Profile B, the two profiles are matched on the `Email` attribute type.
	//
	// If you choose `ONE_TO_ONE` , the system can only match attributes if the sub-types are an exact match. For example, for the `Email` attribute type, the system will only consider it a match if the value of the `Email` field of Profile A matches the value of the `Email` field of Profile B.
	RecordMatchingModels IdNamespaceRecordMatchingModelArrayInput `pulumi:"recordMatchingModels"`
	// The sets of rules you can use in an ID mapping workflow. The limitations specified for the source and target must be compatible.
	RuleDefinitionTypes IdNamespaceRuleDefinitionTypeArrayInput `pulumi:"ruleDefinitionTypes"`
	// The rules for the ID namespace.
	Rules IdNamespaceRuleArrayInput `pulumi:"rules"`
}

func (IdNamespaceNamespaceRuleBasedPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdNamespaceNamespaceRuleBasedProperties)(nil)).Elem()
}

func (i IdNamespaceNamespaceRuleBasedPropertiesArgs) ToIdNamespaceNamespaceRuleBasedPropertiesOutput() IdNamespaceNamespaceRuleBasedPropertiesOutput {
	return i.ToIdNamespaceNamespaceRuleBasedPropertiesOutputWithContext(context.Background())
}

func (i IdNamespaceNamespaceRuleBasedPropertiesArgs) ToIdNamespaceNamespaceRuleBasedPropertiesOutputWithContext(ctx context.Context) IdNamespaceNamespaceRuleBasedPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdNamespaceNamespaceRuleBasedPropertiesOutput)
}

func (i IdNamespaceNamespaceRuleBasedPropertiesArgs) ToIdNamespaceNamespaceRuleBasedPropertiesPtrOutput() IdNamespaceNamespaceRuleBasedPropertiesPtrOutput {
	return i.ToIdNamespaceNamespaceRuleBasedPropertiesPtrOutputWithContext(context.Background())
}

func (i IdNamespaceNamespaceRuleBasedPropertiesArgs) ToIdNamespaceNamespaceRuleBasedPropertiesPtrOutputWithContext(ctx context.Context) IdNamespaceNamespaceRuleBasedPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdNamespaceNamespaceRuleBasedPropertiesOutput).ToIdNamespaceNamespaceRuleBasedPropertiesPtrOutputWithContext(ctx)
}

// IdNamespaceNamespaceRuleBasedPropertiesPtrInput is an input type that accepts IdNamespaceNamespaceRuleBasedPropertiesArgs, IdNamespaceNamespaceRuleBasedPropertiesPtr and IdNamespaceNamespaceRuleBasedPropertiesPtrOutput values.
// You can construct a concrete instance of `IdNamespaceNamespaceRuleBasedPropertiesPtrInput` via:
//
//	        IdNamespaceNamespaceRuleBasedPropertiesArgs{...}
//
//	or:
//
//	        nil
type IdNamespaceNamespaceRuleBasedPropertiesPtrInput interface {
	pulumi.Input

	ToIdNamespaceNamespaceRuleBasedPropertiesPtrOutput() IdNamespaceNamespaceRuleBasedPropertiesPtrOutput
	ToIdNamespaceNamespaceRuleBasedPropertiesPtrOutputWithContext(context.Context) IdNamespaceNamespaceRuleBasedPropertiesPtrOutput
}

type idNamespaceNamespaceRuleBasedPropertiesPtrType IdNamespaceNamespaceRuleBasedPropertiesArgs

func IdNamespaceNamespaceRuleBasedPropertiesPtr(v *IdNamespaceNamespaceRuleBasedPropertiesArgs) IdNamespaceNamespaceRuleBasedPropertiesPtrInput {
	return (*idNamespaceNamespaceRuleBasedPropertiesPtrType)(v)
}

func (*idNamespaceNamespaceRuleBasedPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IdNamespaceNamespaceRuleBasedProperties)(nil)).Elem()
}

func (i *idNamespaceNamespaceRuleBasedPropertiesPtrType) ToIdNamespaceNamespaceRuleBasedPropertiesPtrOutput() IdNamespaceNamespaceRuleBasedPropertiesPtrOutput {
	return i.ToIdNamespaceNamespaceRuleBasedPropertiesPtrOutputWithContext(context.Background())
}

func (i *idNamespaceNamespaceRuleBasedPropertiesPtrType) ToIdNamespaceNamespaceRuleBasedPropertiesPtrOutputWithContext(ctx context.Context) IdNamespaceNamespaceRuleBasedPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdNamespaceNamespaceRuleBasedPropertiesPtrOutput)
}

type IdNamespaceNamespaceRuleBasedPropertiesOutput struct{ *pulumi.OutputState }

func (IdNamespaceNamespaceRuleBasedPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdNamespaceNamespaceRuleBasedProperties)(nil)).Elem()
}

func (o IdNamespaceNamespaceRuleBasedPropertiesOutput) ToIdNamespaceNamespaceRuleBasedPropertiesOutput() IdNamespaceNamespaceRuleBasedPropertiesOutput {
	return o
}

func (o IdNamespaceNamespaceRuleBasedPropertiesOutput) ToIdNamespaceNamespaceRuleBasedPropertiesOutputWithContext(ctx context.Context) IdNamespaceNamespaceRuleBasedPropertiesOutput {
	return o
}

func (o IdNamespaceNamespaceRuleBasedPropertiesOutput) ToIdNamespaceNamespaceRuleBasedPropertiesPtrOutput() IdNamespaceNamespaceRuleBasedPropertiesPtrOutput {
	return o.ToIdNamespaceNamespaceRuleBasedPropertiesPtrOutputWithContext(context.Background())
}

func (o IdNamespaceNamespaceRuleBasedPropertiesOutput) ToIdNamespaceNamespaceRuleBasedPropertiesPtrOutputWithContext(ctx context.Context) IdNamespaceNamespaceRuleBasedPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IdNamespaceNamespaceRuleBasedProperties) *IdNamespaceNamespaceRuleBasedProperties {
		return &v
	}).(IdNamespaceNamespaceRuleBasedPropertiesPtrOutput)
}

// The comparison type. You can either choose `ONE_TO_ONE` or `MANY_TO_MANY` as the `attributeMatchingModel` .
//
// If you choose `MANY_TO_MANY` , the system can match attributes across the sub-types of an attribute type. For example, if the value of the `Email` field of Profile A matches the value of `BusinessEmail` field of Profile B, the two profiles are matched on the `Email` attribute type.
//
// If you choose `ONE_TO_ONE` , the system can only match attributes if the sub-types are an exact match. For example, for the `Email` attribute type, the system will only consider it a match if the value of the `Email` field of Profile A matches the value of the `Email` field of Profile B.
func (o IdNamespaceNamespaceRuleBasedPropertiesOutput) AttributeMatchingModel() IdNamespaceNamespaceRuleBasedPropertiesAttributeMatchingModelPtrOutput {
	return o.ApplyT(func(v IdNamespaceNamespaceRuleBasedProperties) *IdNamespaceNamespaceRuleBasedPropertiesAttributeMatchingModel {
		return v.AttributeMatchingModel
	}).(IdNamespaceNamespaceRuleBasedPropertiesAttributeMatchingModelPtrOutput)
}

// The comparison type. You can either choose `ONE_TO_ONE` or `MANY_TO_MANY` as the `attributeMatchingModel` .
//
// If you choose `MANY_TO_MANY` , the system can match attributes across the sub-types of an attribute type. For example, if the value of the `Email` field of Profile A matches the value of `BusinessEmail` field of Profile B, the two profiles are matched on the `Email` attribute type.
//
// If you choose `ONE_TO_ONE` , the system can only match attributes if the sub-types are an exact match. For example, for the `Email` attribute type, the system will only consider it a match if the value of the `Email` field of Profile A matches the value of the `Email` field of Profile B.
func (o IdNamespaceNamespaceRuleBasedPropertiesOutput) RecordMatchingModels() IdNamespaceRecordMatchingModelArrayOutput {
	return o.ApplyT(func(v IdNamespaceNamespaceRuleBasedProperties) []IdNamespaceRecordMatchingModel {
		return v.RecordMatchingModels
	}).(IdNamespaceRecordMatchingModelArrayOutput)
}

// The sets of rules you can use in an ID mapping workflow. The limitations specified for the source and target must be compatible.
func (o IdNamespaceNamespaceRuleBasedPropertiesOutput) RuleDefinitionTypes() IdNamespaceRuleDefinitionTypeArrayOutput {
	return o.ApplyT(func(v IdNamespaceNamespaceRuleBasedProperties) []IdNamespaceRuleDefinitionType {
		return v.RuleDefinitionTypes
	}).(IdNamespaceRuleDefinitionTypeArrayOutput)
}

// The rules for the ID namespace.
func (o IdNamespaceNamespaceRuleBasedPropertiesOutput) Rules() IdNamespaceRuleArrayOutput {
	return o.ApplyT(func(v IdNamespaceNamespaceRuleBasedProperties) []IdNamespaceRule { return v.Rules }).(IdNamespaceRuleArrayOutput)
}

type IdNamespaceNamespaceRuleBasedPropertiesPtrOutput struct{ *pulumi.OutputState }

func (IdNamespaceNamespaceRuleBasedPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdNamespaceNamespaceRuleBasedProperties)(nil)).Elem()
}

func (o IdNamespaceNamespaceRuleBasedPropertiesPtrOutput) ToIdNamespaceNamespaceRuleBasedPropertiesPtrOutput() IdNamespaceNamespaceRuleBasedPropertiesPtrOutput {
	return o
}

func (o IdNamespaceNamespaceRuleBasedPropertiesPtrOutput) ToIdNamespaceNamespaceRuleBasedPropertiesPtrOutputWithContext(ctx context.Context) IdNamespaceNamespaceRuleBasedPropertiesPtrOutput {
	return o
}

func (o IdNamespaceNamespaceRuleBasedPropertiesPtrOutput) Elem() IdNamespaceNamespaceRuleBasedPropertiesOutput {
	return o.ApplyT(func(v *IdNamespaceNamespaceRuleBasedProperties) IdNamespaceNamespaceRuleBasedProperties {
		if v != nil {
			return *v
		}
		var ret IdNamespaceNamespaceRuleBasedProperties
		return ret
	}).(IdNamespaceNamespaceRuleBasedPropertiesOutput)
}

// The comparison type. You can either choose `ONE_TO_ONE` or `MANY_TO_MANY` as the `attributeMatchingModel` .
//
// If you choose `MANY_TO_MANY` , the system can match attributes across the sub-types of an attribute type. For example, if the value of the `Email` field of Profile A matches the value of `BusinessEmail` field of Profile B, the two profiles are matched on the `Email` attribute type.
//
// If you choose `ONE_TO_ONE` , the system can only match attributes if the sub-types are an exact match. For example, for the `Email` attribute type, the system will only consider it a match if the value of the `Email` field of Profile A matches the value of the `Email` field of Profile B.
func (o IdNamespaceNamespaceRuleBasedPropertiesPtrOutput) AttributeMatchingModel() IdNamespaceNamespaceRuleBasedPropertiesAttributeMatchingModelPtrOutput {
	return o.ApplyT(func(v *IdNamespaceNamespaceRuleBasedProperties) *IdNamespaceNamespaceRuleBasedPropertiesAttributeMatchingModel {
		if v == nil {
			return nil
		}
		return v.AttributeMatchingModel
	}).(IdNamespaceNamespaceRuleBasedPropertiesAttributeMatchingModelPtrOutput)
}

// The comparison type. You can either choose `ONE_TO_ONE` or `MANY_TO_MANY` as the `attributeMatchingModel` .
//
// If you choose `MANY_TO_MANY` , the system can match attributes across the sub-types of an attribute type. For example, if the value of the `Email` field of Profile A matches the value of `BusinessEmail` field of Profile B, the two profiles are matched on the `Email` attribute type.
//
// If you choose `ONE_TO_ONE` , the system can only match attributes if the sub-types are an exact match. For example, for the `Email` attribute type, the system will only consider it a match if the value of the `Email` field of Profile A matches the value of the `Email` field of Profile B.
func (o IdNamespaceNamespaceRuleBasedPropertiesPtrOutput) RecordMatchingModels() IdNamespaceRecordMatchingModelArrayOutput {
	return o.ApplyT(func(v *IdNamespaceNamespaceRuleBasedProperties) []IdNamespaceRecordMatchingModel {
		if v == nil {
			return nil
		}
		return v.RecordMatchingModels
	}).(IdNamespaceRecordMatchingModelArrayOutput)
}

// The sets of rules you can use in an ID mapping workflow. The limitations specified for the source and target must be compatible.
func (o IdNamespaceNamespaceRuleBasedPropertiesPtrOutput) RuleDefinitionTypes() IdNamespaceRuleDefinitionTypeArrayOutput {
	return o.ApplyT(func(v *IdNamespaceNamespaceRuleBasedProperties) []IdNamespaceRuleDefinitionType {
		if v == nil {
			return nil
		}
		return v.RuleDefinitionTypes
	}).(IdNamespaceRuleDefinitionTypeArrayOutput)
}

// The rules for the ID namespace.
func (o IdNamespaceNamespaceRuleBasedPropertiesPtrOutput) Rules() IdNamespaceRuleArrayOutput {
	return o.ApplyT(func(v *IdNamespaceNamespaceRuleBasedProperties) []IdNamespaceRule {
		if v == nil {
			return nil
		}
		return v.Rules
	}).(IdNamespaceRuleArrayOutput)
}

type IdNamespaceRule struct {
	// A list of `MatchingKeys` . The `MatchingKeys` must have been defined in the `SchemaMapping` . Two records are considered to match according to this rule if all of the `MatchingKeys` match.
	MatchingKeys []string `pulumi:"matchingKeys"`
	// A name for the matching rule.
	RuleName string `pulumi:"ruleName"`
}

// IdNamespaceRuleInput is an input type that accepts IdNamespaceRuleArgs and IdNamespaceRuleOutput values.
// You can construct a concrete instance of `IdNamespaceRuleInput` via:
//
//	IdNamespaceRuleArgs{...}
type IdNamespaceRuleInput interface {
	pulumi.Input

	ToIdNamespaceRuleOutput() IdNamespaceRuleOutput
	ToIdNamespaceRuleOutputWithContext(context.Context) IdNamespaceRuleOutput
}

type IdNamespaceRuleArgs struct {
	// A list of `MatchingKeys` . The `MatchingKeys` must have been defined in the `SchemaMapping` . Two records are considered to match according to this rule if all of the `MatchingKeys` match.
	MatchingKeys pulumi.StringArrayInput `pulumi:"matchingKeys"`
	// A name for the matching rule.
	RuleName pulumi.StringInput `pulumi:"ruleName"`
}

func (IdNamespaceRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdNamespaceRule)(nil)).Elem()
}

func (i IdNamespaceRuleArgs) ToIdNamespaceRuleOutput() IdNamespaceRuleOutput {
	return i.ToIdNamespaceRuleOutputWithContext(context.Background())
}

func (i IdNamespaceRuleArgs) ToIdNamespaceRuleOutputWithContext(ctx context.Context) IdNamespaceRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdNamespaceRuleOutput)
}

// IdNamespaceRuleArrayInput is an input type that accepts IdNamespaceRuleArray and IdNamespaceRuleArrayOutput values.
// You can construct a concrete instance of `IdNamespaceRuleArrayInput` via:
//
//	IdNamespaceRuleArray{ IdNamespaceRuleArgs{...} }
type IdNamespaceRuleArrayInput interface {
	pulumi.Input

	ToIdNamespaceRuleArrayOutput() IdNamespaceRuleArrayOutput
	ToIdNamespaceRuleArrayOutputWithContext(context.Context) IdNamespaceRuleArrayOutput
}

type IdNamespaceRuleArray []IdNamespaceRuleInput

func (IdNamespaceRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IdNamespaceRule)(nil)).Elem()
}

func (i IdNamespaceRuleArray) ToIdNamespaceRuleArrayOutput() IdNamespaceRuleArrayOutput {
	return i.ToIdNamespaceRuleArrayOutputWithContext(context.Background())
}

func (i IdNamespaceRuleArray) ToIdNamespaceRuleArrayOutputWithContext(ctx context.Context) IdNamespaceRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdNamespaceRuleArrayOutput)
}

type IdNamespaceRuleOutput struct{ *pulumi.OutputState }

func (IdNamespaceRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdNamespaceRule)(nil)).Elem()
}

func (o IdNamespaceRuleOutput) ToIdNamespaceRuleOutput() IdNamespaceRuleOutput {
	return o
}

func (o IdNamespaceRuleOutput) ToIdNamespaceRuleOutputWithContext(ctx context.Context) IdNamespaceRuleOutput {
	return o
}

// A list of `MatchingKeys` . The `MatchingKeys` must have been defined in the `SchemaMapping` . Two records are considered to match according to this rule if all of the `MatchingKeys` match.
func (o IdNamespaceRuleOutput) MatchingKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IdNamespaceRule) []string { return v.MatchingKeys }).(pulumi.StringArrayOutput)
}

// A name for the matching rule.
func (o IdNamespaceRuleOutput) RuleName() pulumi.StringOutput {
	return o.ApplyT(func(v IdNamespaceRule) string { return v.RuleName }).(pulumi.StringOutput)
}

type IdNamespaceRuleArrayOutput struct{ *pulumi.OutputState }

func (IdNamespaceRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IdNamespaceRule)(nil)).Elem()
}

func (o IdNamespaceRuleArrayOutput) ToIdNamespaceRuleArrayOutput() IdNamespaceRuleArrayOutput {
	return o
}

func (o IdNamespaceRuleArrayOutput) ToIdNamespaceRuleArrayOutputWithContext(ctx context.Context) IdNamespaceRuleArrayOutput {
	return o
}

func (o IdNamespaceRuleArrayOutput) Index(i pulumi.IntInput) IdNamespaceRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IdNamespaceRule {
		return vs[0].([]IdNamespaceRule)[vs[1].(int)]
	}).(IdNamespaceRuleOutput)
}

// A key-value pair to associate with a resource.
type IdNamespaceTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

type MatchingWorkflowInputSource struct {
	// Normalizes the attributes defined in the schema in the input data. For example, if an attribute has an `AttributeType` of `PHONE_NUMBER` , and the data in the input table is in a format of 1234567890, AWS Entity Resolution will normalize this field in the output to (123)-456-7890.
	ApplyNormalization *bool `pulumi:"applyNormalization"`
	// An Glue table ARN for the input source table
	InputSourceArn string `pulumi:"inputSourceArn"`
	// The name of the schema.
	SchemaArn string `pulumi:"schemaArn"`
}

// MatchingWorkflowInputSourceInput is an input type that accepts MatchingWorkflowInputSourceArgs and MatchingWorkflowInputSourceOutput values.
// You can construct a concrete instance of `MatchingWorkflowInputSourceInput` via:
//
//	MatchingWorkflowInputSourceArgs{...}
type MatchingWorkflowInputSourceInput interface {
	pulumi.Input

	ToMatchingWorkflowInputSourceOutput() MatchingWorkflowInputSourceOutput
	ToMatchingWorkflowInputSourceOutputWithContext(context.Context) MatchingWorkflowInputSourceOutput
}

type MatchingWorkflowInputSourceArgs struct {
	// Normalizes the attributes defined in the schema in the input data. For example, if an attribute has an `AttributeType` of `PHONE_NUMBER` , and the data in the input table is in a format of 1234567890, AWS Entity Resolution will normalize this field in the output to (123)-456-7890.
	ApplyNormalization pulumi.BoolPtrInput `pulumi:"applyNormalization"`
	// An Glue table ARN for the input source table
	InputSourceArn pulumi.StringInput `pulumi:"inputSourceArn"`
	// The name of the schema.
	SchemaArn pulumi.StringInput `pulumi:"schemaArn"`
}

func (MatchingWorkflowInputSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MatchingWorkflowInputSource)(nil)).Elem()
}

func (i MatchingWorkflowInputSourceArgs) ToMatchingWorkflowInputSourceOutput() MatchingWorkflowInputSourceOutput {
	return i.ToMatchingWorkflowInputSourceOutputWithContext(context.Background())
}

func (i MatchingWorkflowInputSourceArgs) ToMatchingWorkflowInputSourceOutputWithContext(ctx context.Context) MatchingWorkflowInputSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MatchingWorkflowInputSourceOutput)
}

// MatchingWorkflowInputSourceArrayInput is an input type that accepts MatchingWorkflowInputSourceArray and MatchingWorkflowInputSourceArrayOutput values.
// You can construct a concrete instance of `MatchingWorkflowInputSourceArrayInput` via:
//
//	MatchingWorkflowInputSourceArray{ MatchingWorkflowInputSourceArgs{...} }
type MatchingWorkflowInputSourceArrayInput interface {
	pulumi.Input

	ToMatchingWorkflowInputSourceArrayOutput() MatchingWorkflowInputSourceArrayOutput
	ToMatchingWorkflowInputSourceArrayOutputWithContext(context.Context) MatchingWorkflowInputSourceArrayOutput
}

type MatchingWorkflowInputSourceArray []MatchingWorkflowInputSourceInput

func (MatchingWorkflowInputSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MatchingWorkflowInputSource)(nil)).Elem()
}

func (i MatchingWorkflowInputSourceArray) ToMatchingWorkflowInputSourceArrayOutput() MatchingWorkflowInputSourceArrayOutput {
	return i.ToMatchingWorkflowInputSourceArrayOutputWithContext(context.Background())
}

func (i MatchingWorkflowInputSourceArray) ToMatchingWorkflowInputSourceArrayOutputWithContext(ctx context.Context) MatchingWorkflowInputSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MatchingWorkflowInputSourceArrayOutput)
}

type MatchingWorkflowInputSourceOutput struct{ *pulumi.OutputState }

func (MatchingWorkflowInputSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MatchingWorkflowInputSource)(nil)).Elem()
}

func (o MatchingWorkflowInputSourceOutput) ToMatchingWorkflowInputSourceOutput() MatchingWorkflowInputSourceOutput {
	return o
}

func (o MatchingWorkflowInputSourceOutput) ToMatchingWorkflowInputSourceOutputWithContext(ctx context.Context) MatchingWorkflowInputSourceOutput {
	return o
}

// Normalizes the attributes defined in the schema in the input data. For example, if an attribute has an `AttributeType` of `PHONE_NUMBER` , and the data in the input table is in a format of 1234567890, AWS Entity Resolution will normalize this field in the output to (123)-456-7890.
func (o MatchingWorkflowInputSourceOutput) ApplyNormalization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MatchingWorkflowInputSource) *bool { return v.ApplyNormalization }).(pulumi.BoolPtrOutput)
}

// An Glue table ARN for the input source table
func (o MatchingWorkflowInputSourceOutput) InputSourceArn() pulumi.StringOutput {
	return o.ApplyT(func(v MatchingWorkflowInputSource) string { return v.InputSourceArn }).(pulumi.StringOutput)
}

// The name of the schema.
func (o MatchingWorkflowInputSourceOutput) SchemaArn() pulumi.StringOutput {
	return o.ApplyT(func(v MatchingWorkflowInputSource) string { return v.SchemaArn }).(pulumi.StringOutput)
}

type MatchingWorkflowInputSourceArrayOutput struct{ *pulumi.OutputState }

func (MatchingWorkflowInputSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MatchingWorkflowInputSource)(nil)).Elem()
}

func (o MatchingWorkflowInputSourceArrayOutput) ToMatchingWorkflowInputSourceArrayOutput() MatchingWorkflowInputSourceArrayOutput {
	return o
}

func (o MatchingWorkflowInputSourceArrayOutput) ToMatchingWorkflowInputSourceArrayOutputWithContext(ctx context.Context) MatchingWorkflowInputSourceArrayOutput {
	return o
}

func (o MatchingWorkflowInputSourceArrayOutput) Index(i pulumi.IntInput) MatchingWorkflowInputSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MatchingWorkflowInputSource {
		return vs[0].([]MatchingWorkflowInputSource)[vs[1].(int)]
	}).(MatchingWorkflowInputSourceOutput)
}

type MatchingWorkflowIntermediateSourceConfiguration struct {
	// The s3 path that would be used to stage the intermediate data being generated during workflow execution.
	IntermediateS3Path string `pulumi:"intermediateS3Path"`
}

// MatchingWorkflowIntermediateSourceConfigurationInput is an input type that accepts MatchingWorkflowIntermediateSourceConfigurationArgs and MatchingWorkflowIntermediateSourceConfigurationOutput values.
// You can construct a concrete instance of `MatchingWorkflowIntermediateSourceConfigurationInput` via:
//
//	MatchingWorkflowIntermediateSourceConfigurationArgs{...}
type MatchingWorkflowIntermediateSourceConfigurationInput interface {
	pulumi.Input

	ToMatchingWorkflowIntermediateSourceConfigurationOutput() MatchingWorkflowIntermediateSourceConfigurationOutput
	ToMatchingWorkflowIntermediateSourceConfigurationOutputWithContext(context.Context) MatchingWorkflowIntermediateSourceConfigurationOutput
}

type MatchingWorkflowIntermediateSourceConfigurationArgs struct {
	// The s3 path that would be used to stage the intermediate data being generated during workflow execution.
	IntermediateS3Path pulumi.StringInput `pulumi:"intermediateS3Path"`
}

func (MatchingWorkflowIntermediateSourceConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MatchingWorkflowIntermediateSourceConfiguration)(nil)).Elem()
}

func (i MatchingWorkflowIntermediateSourceConfigurationArgs) ToMatchingWorkflowIntermediateSourceConfigurationOutput() MatchingWorkflowIntermediateSourceConfigurationOutput {
	return i.ToMatchingWorkflowIntermediateSourceConfigurationOutputWithContext(context.Background())
}

func (i MatchingWorkflowIntermediateSourceConfigurationArgs) ToMatchingWorkflowIntermediateSourceConfigurationOutputWithContext(ctx context.Context) MatchingWorkflowIntermediateSourceConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MatchingWorkflowIntermediateSourceConfigurationOutput)
}

func (i MatchingWorkflowIntermediateSourceConfigurationArgs) ToMatchingWorkflowIntermediateSourceConfigurationPtrOutput() MatchingWorkflowIntermediateSourceConfigurationPtrOutput {
	return i.ToMatchingWorkflowIntermediateSourceConfigurationPtrOutputWithContext(context.Background())
}

func (i MatchingWorkflowIntermediateSourceConfigurationArgs) ToMatchingWorkflowIntermediateSourceConfigurationPtrOutputWithContext(ctx context.Context) MatchingWorkflowIntermediateSourceConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MatchingWorkflowIntermediateSourceConfigurationOutput).ToMatchingWorkflowIntermediateSourceConfigurationPtrOutputWithContext(ctx)
}

// MatchingWorkflowIntermediateSourceConfigurationPtrInput is an input type that accepts MatchingWorkflowIntermediateSourceConfigurationArgs, MatchingWorkflowIntermediateSourceConfigurationPtr and MatchingWorkflowIntermediateSourceConfigurationPtrOutput values.
// You can construct a concrete instance of `MatchingWorkflowIntermediateSourceConfigurationPtrInput` via:
//
//	        MatchingWorkflowIntermediateSourceConfigurationArgs{...}
//
//	or:
//
//	        nil
type MatchingWorkflowIntermediateSourceConfigurationPtrInput interface {
	pulumi.Input

	ToMatchingWorkflowIntermediateSourceConfigurationPtrOutput() MatchingWorkflowIntermediateSourceConfigurationPtrOutput
	ToMatchingWorkflowIntermediateSourceConfigurationPtrOutputWithContext(context.Context) MatchingWorkflowIntermediateSourceConfigurationPtrOutput
}

type matchingWorkflowIntermediateSourceConfigurationPtrType MatchingWorkflowIntermediateSourceConfigurationArgs

func MatchingWorkflowIntermediateSourceConfigurationPtr(v *MatchingWorkflowIntermediateSourceConfigurationArgs) MatchingWorkflowIntermediateSourceConfigurationPtrInput {
	return (*matchingWorkflowIntermediateSourceConfigurationPtrType)(v)
}

func (*matchingWorkflowIntermediateSourceConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MatchingWorkflowIntermediateSourceConfiguration)(nil)).Elem()
}

func (i *matchingWorkflowIntermediateSourceConfigurationPtrType) ToMatchingWorkflowIntermediateSourceConfigurationPtrOutput() MatchingWorkflowIntermediateSourceConfigurationPtrOutput {
	return i.ToMatchingWorkflowIntermediateSourceConfigurationPtrOutputWithContext(context.Background())
}

func (i *matchingWorkflowIntermediateSourceConfigurationPtrType) ToMatchingWorkflowIntermediateSourceConfigurationPtrOutputWithContext(ctx context.Context) MatchingWorkflowIntermediateSourceConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MatchingWorkflowIntermediateSourceConfigurationPtrOutput)
}

type MatchingWorkflowIntermediateSourceConfigurationOutput struct{ *pulumi.OutputState }

func (MatchingWorkflowIntermediateSourceConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MatchingWorkflowIntermediateSourceConfiguration)(nil)).Elem()
}

func (o MatchingWorkflowIntermediateSourceConfigurationOutput) ToMatchingWorkflowIntermediateSourceConfigurationOutput() MatchingWorkflowIntermediateSourceConfigurationOutput {
	return o
}

func (o MatchingWorkflowIntermediateSourceConfigurationOutput) ToMatchingWorkflowIntermediateSourceConfigurationOutputWithContext(ctx context.Context) MatchingWorkflowIntermediateSourceConfigurationOutput {
	return o
}

func (o MatchingWorkflowIntermediateSourceConfigurationOutput) ToMatchingWorkflowIntermediateSourceConfigurationPtrOutput() MatchingWorkflowIntermediateSourceConfigurationPtrOutput {
	return o.ToMatchingWorkflowIntermediateSourceConfigurationPtrOutputWithContext(context.Background())
}

func (o MatchingWorkflowIntermediateSourceConfigurationOutput) ToMatchingWorkflowIntermediateSourceConfigurationPtrOutputWithContext(ctx context.Context) MatchingWorkflowIntermediateSourceConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MatchingWorkflowIntermediateSourceConfiguration) *MatchingWorkflowIntermediateSourceConfiguration {
		return &v
	}).(MatchingWorkflowIntermediateSourceConfigurationPtrOutput)
}

// The s3 path that would be used to stage the intermediate data being generated during workflow execution.
func (o MatchingWorkflowIntermediateSourceConfigurationOutput) IntermediateS3Path() pulumi.StringOutput {
	return o.ApplyT(func(v MatchingWorkflowIntermediateSourceConfiguration) string { return v.IntermediateS3Path }).(pulumi.StringOutput)
}

type MatchingWorkflowIntermediateSourceConfigurationPtrOutput struct{ *pulumi.OutputState }

func (MatchingWorkflowIntermediateSourceConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MatchingWorkflowIntermediateSourceConfiguration)(nil)).Elem()
}

func (o MatchingWorkflowIntermediateSourceConfigurationPtrOutput) ToMatchingWorkflowIntermediateSourceConfigurationPtrOutput() MatchingWorkflowIntermediateSourceConfigurationPtrOutput {
	return o
}

func (o MatchingWorkflowIntermediateSourceConfigurationPtrOutput) ToMatchingWorkflowIntermediateSourceConfigurationPtrOutputWithContext(ctx context.Context) MatchingWorkflowIntermediateSourceConfigurationPtrOutput {
	return o
}

func (o MatchingWorkflowIntermediateSourceConfigurationPtrOutput) Elem() MatchingWorkflowIntermediateSourceConfigurationOutput {
	return o.ApplyT(func(v *MatchingWorkflowIntermediateSourceConfiguration) MatchingWorkflowIntermediateSourceConfiguration {
		if v != nil {
			return *v
		}
		var ret MatchingWorkflowIntermediateSourceConfiguration
		return ret
	}).(MatchingWorkflowIntermediateSourceConfigurationOutput)
}

// The s3 path that would be used to stage the intermediate data being generated during workflow execution.
func (o MatchingWorkflowIntermediateSourceConfigurationPtrOutput) IntermediateS3Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MatchingWorkflowIntermediateSourceConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.IntermediateS3Path
	}).(pulumi.StringPtrOutput)
}

type MatchingWorkflowOutputAttribute struct {
	// Enables the ability to hash the column values in the output.
	Hashed *bool `pulumi:"hashed"`
	// A name of a column to be written to the output. This must be an `InputField` name in the schema mapping.
	Name string `pulumi:"name"`
}

// MatchingWorkflowOutputAttributeInput is an input type that accepts MatchingWorkflowOutputAttributeArgs and MatchingWorkflowOutputAttributeOutput values.
// You can construct a concrete instance of `MatchingWorkflowOutputAttributeInput` via:
//
//	MatchingWorkflowOutputAttributeArgs{...}
type MatchingWorkflowOutputAttributeInput interface {
	pulumi.Input

	ToMatchingWorkflowOutputAttributeOutput() MatchingWorkflowOutputAttributeOutput
	ToMatchingWorkflowOutputAttributeOutputWithContext(context.Context) MatchingWorkflowOutputAttributeOutput
}

type MatchingWorkflowOutputAttributeArgs struct {
	// Enables the ability to hash the column values in the output.
	Hashed pulumi.BoolPtrInput `pulumi:"hashed"`
	// A name of a column to be written to the output. This must be an `InputField` name in the schema mapping.
	Name pulumi.StringInput `pulumi:"name"`
}

func (MatchingWorkflowOutputAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MatchingWorkflowOutputAttribute)(nil)).Elem()
}

func (i MatchingWorkflowOutputAttributeArgs) ToMatchingWorkflowOutputAttributeOutput() MatchingWorkflowOutputAttributeOutput {
	return i.ToMatchingWorkflowOutputAttributeOutputWithContext(context.Background())
}

func (i MatchingWorkflowOutputAttributeArgs) ToMatchingWorkflowOutputAttributeOutputWithContext(ctx context.Context) MatchingWorkflowOutputAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MatchingWorkflowOutputAttributeOutput)
}

// MatchingWorkflowOutputAttributeArrayInput is an input type that accepts MatchingWorkflowOutputAttributeArray and MatchingWorkflowOutputAttributeArrayOutput values.
// You can construct a concrete instance of `MatchingWorkflowOutputAttributeArrayInput` via:
//
//	MatchingWorkflowOutputAttributeArray{ MatchingWorkflowOutputAttributeArgs{...} }
type MatchingWorkflowOutputAttributeArrayInput interface {
	pulumi.Input

	ToMatchingWorkflowOutputAttributeArrayOutput() MatchingWorkflowOutputAttributeArrayOutput
	ToMatchingWorkflowOutputAttributeArrayOutputWithContext(context.Context) MatchingWorkflowOutputAttributeArrayOutput
}

type MatchingWorkflowOutputAttributeArray []MatchingWorkflowOutputAttributeInput

func (MatchingWorkflowOutputAttributeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MatchingWorkflowOutputAttribute)(nil)).Elem()
}

func (i MatchingWorkflowOutputAttributeArray) ToMatchingWorkflowOutputAttributeArrayOutput() MatchingWorkflowOutputAttributeArrayOutput {
	return i.ToMatchingWorkflowOutputAttributeArrayOutputWithContext(context.Background())
}

func (i MatchingWorkflowOutputAttributeArray) ToMatchingWorkflowOutputAttributeArrayOutputWithContext(ctx context.Context) MatchingWorkflowOutputAttributeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MatchingWorkflowOutputAttributeArrayOutput)
}

type MatchingWorkflowOutputAttributeOutput struct{ *pulumi.OutputState }

func (MatchingWorkflowOutputAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MatchingWorkflowOutputAttribute)(nil)).Elem()
}

func (o MatchingWorkflowOutputAttributeOutput) ToMatchingWorkflowOutputAttributeOutput() MatchingWorkflowOutputAttributeOutput {
	return o
}

func (o MatchingWorkflowOutputAttributeOutput) ToMatchingWorkflowOutputAttributeOutputWithContext(ctx context.Context) MatchingWorkflowOutputAttributeOutput {
	return o
}

// Enables the ability to hash the column values in the output.
func (o MatchingWorkflowOutputAttributeOutput) Hashed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MatchingWorkflowOutputAttribute) *bool { return v.Hashed }).(pulumi.BoolPtrOutput)
}

// A name of a column to be written to the output. This must be an `InputField` name in the schema mapping.
func (o MatchingWorkflowOutputAttributeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MatchingWorkflowOutputAttribute) string { return v.Name }).(pulumi.StringOutput)
}

type MatchingWorkflowOutputAttributeArrayOutput struct{ *pulumi.OutputState }

func (MatchingWorkflowOutputAttributeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MatchingWorkflowOutputAttribute)(nil)).Elem()
}

func (o MatchingWorkflowOutputAttributeArrayOutput) ToMatchingWorkflowOutputAttributeArrayOutput() MatchingWorkflowOutputAttributeArrayOutput {
	return o
}

func (o MatchingWorkflowOutputAttributeArrayOutput) ToMatchingWorkflowOutputAttributeArrayOutputWithContext(ctx context.Context) MatchingWorkflowOutputAttributeArrayOutput {
	return o
}

func (o MatchingWorkflowOutputAttributeArrayOutput) Index(i pulumi.IntInput) MatchingWorkflowOutputAttributeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MatchingWorkflowOutputAttribute {
		return vs[0].([]MatchingWorkflowOutputAttribute)[vs[1].(int)]
	}).(MatchingWorkflowOutputAttributeOutput)
}

type MatchingWorkflowOutputSource struct {
	// Normalizes the attributes defined in the schema in the input data. For example, if an attribute has an `AttributeType` of `PHONE_NUMBER` , and the data in the input table is in a format of 1234567890, AWS Entity Resolution will normalize this field in the output to (123)-456-7890.
	ApplyNormalization *bool `pulumi:"applyNormalization"`
	// Customer KMS ARN for encryption at rest. If not provided, system will use an AWS Entity Resolution managed KMS key.
	KmsArn *string `pulumi:"kmsArn"`
	// A list of `OutputAttribute` objects, each of which have the fields `Name` and `Hashed` . Each of these objects selects a column to be included in the output table, and whether the values of the column should be hashed.
	Output []MatchingWorkflowOutputAttribute `pulumi:"output"`
	// The S3 path to which Entity Resolution will write the output table
	OutputS3Path string `pulumi:"outputS3Path"`
}

// MatchingWorkflowOutputSourceInput is an input type that accepts MatchingWorkflowOutputSourceArgs and MatchingWorkflowOutputSourceOutput values.
// You can construct a concrete instance of `MatchingWorkflowOutputSourceInput` via:
//
//	MatchingWorkflowOutputSourceArgs{...}
type MatchingWorkflowOutputSourceInput interface {
	pulumi.Input

	ToMatchingWorkflowOutputSourceOutput() MatchingWorkflowOutputSourceOutput
	ToMatchingWorkflowOutputSourceOutputWithContext(context.Context) MatchingWorkflowOutputSourceOutput
}

type MatchingWorkflowOutputSourceArgs struct {
	// Normalizes the attributes defined in the schema in the input data. For example, if an attribute has an `AttributeType` of `PHONE_NUMBER` , and the data in the input table is in a format of 1234567890, AWS Entity Resolution will normalize this field in the output to (123)-456-7890.
	ApplyNormalization pulumi.BoolPtrInput `pulumi:"applyNormalization"`
	// Customer KMS ARN for encryption at rest. If not provided, system will use an AWS Entity Resolution managed KMS key.
	KmsArn pulumi.StringPtrInput `pulumi:"kmsArn"`
	// A list of `OutputAttribute` objects, each of which have the fields `Name` and `Hashed` . Each of these objects selects a column to be included in the output table, and whether the values of the column should be hashed.
	Output MatchingWorkflowOutputAttributeArrayInput `pulumi:"output"`
	// The S3 path to which Entity Resolution will write the output table
	OutputS3Path pulumi.StringInput `pulumi:"outputS3Path"`
}

func (MatchingWorkflowOutputSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MatchingWorkflowOutputSource)(nil)).Elem()
}

func (i MatchingWorkflowOutputSourceArgs) ToMatchingWorkflowOutputSourceOutput() MatchingWorkflowOutputSourceOutput {
	return i.ToMatchingWorkflowOutputSourceOutputWithContext(context.Background())
}

func (i MatchingWorkflowOutputSourceArgs) ToMatchingWorkflowOutputSourceOutputWithContext(ctx context.Context) MatchingWorkflowOutputSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MatchingWorkflowOutputSourceOutput)
}

// MatchingWorkflowOutputSourceArrayInput is an input type that accepts MatchingWorkflowOutputSourceArray and MatchingWorkflowOutputSourceArrayOutput values.
// You can construct a concrete instance of `MatchingWorkflowOutputSourceArrayInput` via:
//
//	MatchingWorkflowOutputSourceArray{ MatchingWorkflowOutputSourceArgs{...} }
type MatchingWorkflowOutputSourceArrayInput interface {
	pulumi.Input

	ToMatchingWorkflowOutputSourceArrayOutput() MatchingWorkflowOutputSourceArrayOutput
	ToMatchingWorkflowOutputSourceArrayOutputWithContext(context.Context) MatchingWorkflowOutputSourceArrayOutput
}

type MatchingWorkflowOutputSourceArray []MatchingWorkflowOutputSourceInput

func (MatchingWorkflowOutputSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MatchingWorkflowOutputSource)(nil)).Elem()
}

func (i MatchingWorkflowOutputSourceArray) ToMatchingWorkflowOutputSourceArrayOutput() MatchingWorkflowOutputSourceArrayOutput {
	return i.ToMatchingWorkflowOutputSourceArrayOutputWithContext(context.Background())
}

func (i MatchingWorkflowOutputSourceArray) ToMatchingWorkflowOutputSourceArrayOutputWithContext(ctx context.Context) MatchingWorkflowOutputSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MatchingWorkflowOutputSourceArrayOutput)
}

type MatchingWorkflowOutputSourceOutput struct{ *pulumi.OutputState }

func (MatchingWorkflowOutputSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MatchingWorkflowOutputSource)(nil)).Elem()
}

func (o MatchingWorkflowOutputSourceOutput) ToMatchingWorkflowOutputSourceOutput() MatchingWorkflowOutputSourceOutput {
	return o
}

func (o MatchingWorkflowOutputSourceOutput) ToMatchingWorkflowOutputSourceOutputWithContext(ctx context.Context) MatchingWorkflowOutputSourceOutput {
	return o
}

// Normalizes the attributes defined in the schema in the input data. For example, if an attribute has an `AttributeType` of `PHONE_NUMBER` , and the data in the input table is in a format of 1234567890, AWS Entity Resolution will normalize this field in the output to (123)-456-7890.
func (o MatchingWorkflowOutputSourceOutput) ApplyNormalization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MatchingWorkflowOutputSource) *bool { return v.ApplyNormalization }).(pulumi.BoolPtrOutput)
}

// Customer KMS ARN for encryption at rest. If not provided, system will use an AWS Entity Resolution managed KMS key.
func (o MatchingWorkflowOutputSourceOutput) KmsArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MatchingWorkflowOutputSource) *string { return v.KmsArn }).(pulumi.StringPtrOutput)
}

// A list of `OutputAttribute` objects, each of which have the fields `Name` and `Hashed` . Each of these objects selects a column to be included in the output table, and whether the values of the column should be hashed.
func (o MatchingWorkflowOutputSourceOutput) Output() MatchingWorkflowOutputAttributeArrayOutput {
	return o.ApplyT(func(v MatchingWorkflowOutputSource) []MatchingWorkflowOutputAttribute { return v.Output }).(MatchingWorkflowOutputAttributeArrayOutput)
}

// The S3 path to which Entity Resolution will write the output table
func (o MatchingWorkflowOutputSourceOutput) OutputS3Path() pulumi.StringOutput {
	return o.ApplyT(func(v MatchingWorkflowOutputSource) string { return v.OutputS3Path }).(pulumi.StringOutput)
}

type MatchingWorkflowOutputSourceArrayOutput struct{ *pulumi.OutputState }

func (MatchingWorkflowOutputSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MatchingWorkflowOutputSource)(nil)).Elem()
}

func (o MatchingWorkflowOutputSourceArrayOutput) ToMatchingWorkflowOutputSourceArrayOutput() MatchingWorkflowOutputSourceArrayOutput {
	return o
}

func (o MatchingWorkflowOutputSourceArrayOutput) ToMatchingWorkflowOutputSourceArrayOutputWithContext(ctx context.Context) MatchingWorkflowOutputSourceArrayOutput {
	return o
}

func (o MatchingWorkflowOutputSourceArrayOutput) Index(i pulumi.IntInput) MatchingWorkflowOutputSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MatchingWorkflowOutputSource {
		return vs[0].([]MatchingWorkflowOutputSource)[vs[1].(int)]
	}).(MatchingWorkflowOutputSourceOutput)
}

type MatchingWorkflowProviderProperties struct {
	// The Amazon S3 location that temporarily stores your data while it processes. Your information won't be saved permanently.
	IntermediateSourceConfiguration *MatchingWorkflowIntermediateSourceConfiguration `pulumi:"intermediateSourceConfiguration"`
	// Additional Provider configuration that would be required for the provider service. The Configuration must be in JSON string format
	ProviderConfiguration map[string]string `pulumi:"providerConfiguration"`
	// Arn of the Provider service being used.
	ProviderServiceArn string `pulumi:"providerServiceArn"`
}

// MatchingWorkflowProviderPropertiesInput is an input type that accepts MatchingWorkflowProviderPropertiesArgs and MatchingWorkflowProviderPropertiesOutput values.
// You can construct a concrete instance of `MatchingWorkflowProviderPropertiesInput` via:
//
//	MatchingWorkflowProviderPropertiesArgs{...}
type MatchingWorkflowProviderPropertiesInput interface {
	pulumi.Input

	ToMatchingWorkflowProviderPropertiesOutput() MatchingWorkflowProviderPropertiesOutput
	ToMatchingWorkflowProviderPropertiesOutputWithContext(context.Context) MatchingWorkflowProviderPropertiesOutput
}

type MatchingWorkflowProviderPropertiesArgs struct {
	// The Amazon S3 location that temporarily stores your data while it processes. Your information won't be saved permanently.
	IntermediateSourceConfiguration MatchingWorkflowIntermediateSourceConfigurationPtrInput `pulumi:"intermediateSourceConfiguration"`
	// Additional Provider configuration that would be required for the provider service. The Configuration must be in JSON string format
	ProviderConfiguration pulumi.StringMapInput `pulumi:"providerConfiguration"`
	// Arn of the Provider service being used.
	ProviderServiceArn pulumi.StringInput `pulumi:"providerServiceArn"`
}

func (MatchingWorkflowProviderPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MatchingWorkflowProviderProperties)(nil)).Elem()
}

func (i MatchingWorkflowProviderPropertiesArgs) ToMatchingWorkflowProviderPropertiesOutput() MatchingWorkflowProviderPropertiesOutput {
	return i.ToMatchingWorkflowProviderPropertiesOutputWithContext(context.Background())
}

func (i MatchingWorkflowProviderPropertiesArgs) ToMatchingWorkflowProviderPropertiesOutputWithContext(ctx context.Context) MatchingWorkflowProviderPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MatchingWorkflowProviderPropertiesOutput)
}

func (i MatchingWorkflowProviderPropertiesArgs) ToMatchingWorkflowProviderPropertiesPtrOutput() MatchingWorkflowProviderPropertiesPtrOutput {
	return i.ToMatchingWorkflowProviderPropertiesPtrOutputWithContext(context.Background())
}

func (i MatchingWorkflowProviderPropertiesArgs) ToMatchingWorkflowProviderPropertiesPtrOutputWithContext(ctx context.Context) MatchingWorkflowProviderPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MatchingWorkflowProviderPropertiesOutput).ToMatchingWorkflowProviderPropertiesPtrOutputWithContext(ctx)
}

// MatchingWorkflowProviderPropertiesPtrInput is an input type that accepts MatchingWorkflowProviderPropertiesArgs, MatchingWorkflowProviderPropertiesPtr and MatchingWorkflowProviderPropertiesPtrOutput values.
// You can construct a concrete instance of `MatchingWorkflowProviderPropertiesPtrInput` via:
//
//	        MatchingWorkflowProviderPropertiesArgs{...}
//
//	or:
//
//	        nil
type MatchingWorkflowProviderPropertiesPtrInput interface {
	pulumi.Input

	ToMatchingWorkflowProviderPropertiesPtrOutput() MatchingWorkflowProviderPropertiesPtrOutput
	ToMatchingWorkflowProviderPropertiesPtrOutputWithContext(context.Context) MatchingWorkflowProviderPropertiesPtrOutput
}

type matchingWorkflowProviderPropertiesPtrType MatchingWorkflowProviderPropertiesArgs

func MatchingWorkflowProviderPropertiesPtr(v *MatchingWorkflowProviderPropertiesArgs) MatchingWorkflowProviderPropertiesPtrInput {
	return (*matchingWorkflowProviderPropertiesPtrType)(v)
}

func (*matchingWorkflowProviderPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MatchingWorkflowProviderProperties)(nil)).Elem()
}

func (i *matchingWorkflowProviderPropertiesPtrType) ToMatchingWorkflowProviderPropertiesPtrOutput() MatchingWorkflowProviderPropertiesPtrOutput {
	return i.ToMatchingWorkflowProviderPropertiesPtrOutputWithContext(context.Background())
}

func (i *matchingWorkflowProviderPropertiesPtrType) ToMatchingWorkflowProviderPropertiesPtrOutputWithContext(ctx context.Context) MatchingWorkflowProviderPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MatchingWorkflowProviderPropertiesPtrOutput)
}

type MatchingWorkflowProviderPropertiesOutput struct{ *pulumi.OutputState }

func (MatchingWorkflowProviderPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MatchingWorkflowProviderProperties)(nil)).Elem()
}

func (o MatchingWorkflowProviderPropertiesOutput) ToMatchingWorkflowProviderPropertiesOutput() MatchingWorkflowProviderPropertiesOutput {
	return o
}

func (o MatchingWorkflowProviderPropertiesOutput) ToMatchingWorkflowProviderPropertiesOutputWithContext(ctx context.Context) MatchingWorkflowProviderPropertiesOutput {
	return o
}

func (o MatchingWorkflowProviderPropertiesOutput) ToMatchingWorkflowProviderPropertiesPtrOutput() MatchingWorkflowProviderPropertiesPtrOutput {
	return o.ToMatchingWorkflowProviderPropertiesPtrOutputWithContext(context.Background())
}

func (o MatchingWorkflowProviderPropertiesOutput) ToMatchingWorkflowProviderPropertiesPtrOutputWithContext(ctx context.Context) MatchingWorkflowProviderPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MatchingWorkflowProviderProperties) *MatchingWorkflowProviderProperties {
		return &v
	}).(MatchingWorkflowProviderPropertiesPtrOutput)
}

// The Amazon S3 location that temporarily stores your data while it processes. Your information won't be saved permanently.
func (o MatchingWorkflowProviderPropertiesOutput) IntermediateSourceConfiguration() MatchingWorkflowIntermediateSourceConfigurationPtrOutput {
	return o.ApplyT(func(v MatchingWorkflowProviderProperties) *MatchingWorkflowIntermediateSourceConfiguration {
		return v.IntermediateSourceConfiguration
	}).(MatchingWorkflowIntermediateSourceConfigurationPtrOutput)
}

// Additional Provider configuration that would be required for the provider service. The Configuration must be in JSON string format
func (o MatchingWorkflowProviderPropertiesOutput) ProviderConfiguration() pulumi.StringMapOutput {
	return o.ApplyT(func(v MatchingWorkflowProviderProperties) map[string]string { return v.ProviderConfiguration }).(pulumi.StringMapOutput)
}

// Arn of the Provider service being used.
func (o MatchingWorkflowProviderPropertiesOutput) ProviderServiceArn() pulumi.StringOutput {
	return o.ApplyT(func(v MatchingWorkflowProviderProperties) string { return v.ProviderServiceArn }).(pulumi.StringOutput)
}

type MatchingWorkflowProviderPropertiesPtrOutput struct{ *pulumi.OutputState }

func (MatchingWorkflowProviderPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MatchingWorkflowProviderProperties)(nil)).Elem()
}

func (o MatchingWorkflowProviderPropertiesPtrOutput) ToMatchingWorkflowProviderPropertiesPtrOutput() MatchingWorkflowProviderPropertiesPtrOutput {
	return o
}

func (o MatchingWorkflowProviderPropertiesPtrOutput) ToMatchingWorkflowProviderPropertiesPtrOutputWithContext(ctx context.Context) MatchingWorkflowProviderPropertiesPtrOutput {
	return o
}

func (o MatchingWorkflowProviderPropertiesPtrOutput) Elem() MatchingWorkflowProviderPropertiesOutput {
	return o.ApplyT(func(v *MatchingWorkflowProviderProperties) MatchingWorkflowProviderProperties {
		if v != nil {
			return *v
		}
		var ret MatchingWorkflowProviderProperties
		return ret
	}).(MatchingWorkflowProviderPropertiesOutput)
}

// The Amazon S3 location that temporarily stores your data while it processes. Your information won't be saved permanently.
func (o MatchingWorkflowProviderPropertiesPtrOutput) IntermediateSourceConfiguration() MatchingWorkflowIntermediateSourceConfigurationPtrOutput {
	return o.ApplyT(func(v *MatchingWorkflowProviderProperties) *MatchingWorkflowIntermediateSourceConfiguration {
		if v == nil {
			return nil
		}
		return v.IntermediateSourceConfiguration
	}).(MatchingWorkflowIntermediateSourceConfigurationPtrOutput)
}

// Additional Provider configuration that would be required for the provider service. The Configuration must be in JSON string format
func (o MatchingWorkflowProviderPropertiesPtrOutput) ProviderConfiguration() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MatchingWorkflowProviderProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.ProviderConfiguration
	}).(pulumi.StringMapOutput)
}

// Arn of the Provider service being used.
func (o MatchingWorkflowProviderPropertiesPtrOutput) ProviderServiceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MatchingWorkflowProviderProperties) *string {
		if v == nil {
			return nil
		}
		return &v.ProviderServiceArn
	}).(pulumi.StringPtrOutput)
}

type MatchingWorkflowResolutionTechniques struct {
	// The properties of the provider service.
	ProviderProperties *MatchingWorkflowProviderProperties `pulumi:"providerProperties"`
	// The type of matching. There are three types of matching: `RULE_MATCHING` , `ML_MATCHING` , and `PROVIDER` .
	ResolutionType *MatchingWorkflowResolutionType `pulumi:"resolutionType"`
	// An object which defines the list of matching rules to run and has a field `Rules` , which is a list of rule objects.
	RuleBasedProperties *MatchingWorkflowRuleBasedProperties `pulumi:"ruleBasedProperties"`
}

// MatchingWorkflowResolutionTechniquesInput is an input type that accepts MatchingWorkflowResolutionTechniquesArgs and MatchingWorkflowResolutionTechniquesOutput values.
// You can construct a concrete instance of `MatchingWorkflowResolutionTechniquesInput` via:
//
//	MatchingWorkflowResolutionTechniquesArgs{...}
type MatchingWorkflowResolutionTechniquesInput interface {
	pulumi.Input

	ToMatchingWorkflowResolutionTechniquesOutput() MatchingWorkflowResolutionTechniquesOutput
	ToMatchingWorkflowResolutionTechniquesOutputWithContext(context.Context) MatchingWorkflowResolutionTechniquesOutput
}

type MatchingWorkflowResolutionTechniquesArgs struct {
	// The properties of the provider service.
	ProviderProperties MatchingWorkflowProviderPropertiesPtrInput `pulumi:"providerProperties"`
	// The type of matching. There are three types of matching: `RULE_MATCHING` , `ML_MATCHING` , and `PROVIDER` .
	ResolutionType MatchingWorkflowResolutionTypePtrInput `pulumi:"resolutionType"`
	// An object which defines the list of matching rules to run and has a field `Rules` , which is a list of rule objects.
	RuleBasedProperties MatchingWorkflowRuleBasedPropertiesPtrInput `pulumi:"ruleBasedProperties"`
}

func (MatchingWorkflowResolutionTechniquesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MatchingWorkflowResolutionTechniques)(nil)).Elem()
}

func (i MatchingWorkflowResolutionTechniquesArgs) ToMatchingWorkflowResolutionTechniquesOutput() MatchingWorkflowResolutionTechniquesOutput {
	return i.ToMatchingWorkflowResolutionTechniquesOutputWithContext(context.Background())
}

func (i MatchingWorkflowResolutionTechniquesArgs) ToMatchingWorkflowResolutionTechniquesOutputWithContext(ctx context.Context) MatchingWorkflowResolutionTechniquesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MatchingWorkflowResolutionTechniquesOutput)
}

type MatchingWorkflowResolutionTechniquesOutput struct{ *pulumi.OutputState }

func (MatchingWorkflowResolutionTechniquesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MatchingWorkflowResolutionTechniques)(nil)).Elem()
}

func (o MatchingWorkflowResolutionTechniquesOutput) ToMatchingWorkflowResolutionTechniquesOutput() MatchingWorkflowResolutionTechniquesOutput {
	return o
}

func (o MatchingWorkflowResolutionTechniquesOutput) ToMatchingWorkflowResolutionTechniquesOutputWithContext(ctx context.Context) MatchingWorkflowResolutionTechniquesOutput {
	return o
}

// The properties of the provider service.
func (o MatchingWorkflowResolutionTechniquesOutput) ProviderProperties() MatchingWorkflowProviderPropertiesPtrOutput {
	return o.ApplyT(func(v MatchingWorkflowResolutionTechniques) *MatchingWorkflowProviderProperties {
		return v.ProviderProperties
	}).(MatchingWorkflowProviderPropertiesPtrOutput)
}

// The type of matching. There are three types of matching: `RULE_MATCHING` , `ML_MATCHING` , and `PROVIDER` .
func (o MatchingWorkflowResolutionTechniquesOutput) ResolutionType() MatchingWorkflowResolutionTypePtrOutput {
	return o.ApplyT(func(v MatchingWorkflowResolutionTechniques) *MatchingWorkflowResolutionType { return v.ResolutionType }).(MatchingWorkflowResolutionTypePtrOutput)
}

// An object which defines the list of matching rules to run and has a field `Rules` , which is a list of rule objects.
func (o MatchingWorkflowResolutionTechniquesOutput) RuleBasedProperties() MatchingWorkflowRuleBasedPropertiesPtrOutput {
	return o.ApplyT(func(v MatchingWorkflowResolutionTechniques) *MatchingWorkflowRuleBasedProperties {
		return v.RuleBasedProperties
	}).(MatchingWorkflowRuleBasedPropertiesPtrOutput)
}

type MatchingWorkflowResolutionTechniquesPtrOutput struct{ *pulumi.OutputState }

func (MatchingWorkflowResolutionTechniquesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MatchingWorkflowResolutionTechniques)(nil)).Elem()
}

func (o MatchingWorkflowResolutionTechniquesPtrOutput) ToMatchingWorkflowResolutionTechniquesPtrOutput() MatchingWorkflowResolutionTechniquesPtrOutput {
	return o
}

func (o MatchingWorkflowResolutionTechniquesPtrOutput) ToMatchingWorkflowResolutionTechniquesPtrOutputWithContext(ctx context.Context) MatchingWorkflowResolutionTechniquesPtrOutput {
	return o
}

func (o MatchingWorkflowResolutionTechniquesPtrOutput) Elem() MatchingWorkflowResolutionTechniquesOutput {
	return o.ApplyT(func(v *MatchingWorkflowResolutionTechniques) MatchingWorkflowResolutionTechniques {
		if v != nil {
			return *v
		}
		var ret MatchingWorkflowResolutionTechniques
		return ret
	}).(MatchingWorkflowResolutionTechniquesOutput)
}

// The properties of the provider service.
func (o MatchingWorkflowResolutionTechniquesPtrOutput) ProviderProperties() MatchingWorkflowProviderPropertiesPtrOutput {
	return o.ApplyT(func(v *MatchingWorkflowResolutionTechniques) *MatchingWorkflowProviderProperties {
		if v == nil {
			return nil
		}
		return v.ProviderProperties
	}).(MatchingWorkflowProviderPropertiesPtrOutput)
}

// The type of matching. There are three types of matching: `RULE_MATCHING` , `ML_MATCHING` , and `PROVIDER` .
func (o MatchingWorkflowResolutionTechniquesPtrOutput) ResolutionType() MatchingWorkflowResolutionTypePtrOutput {
	return o.ApplyT(func(v *MatchingWorkflowResolutionTechniques) *MatchingWorkflowResolutionType {
		if v == nil {
			return nil
		}
		return v.ResolutionType
	}).(MatchingWorkflowResolutionTypePtrOutput)
}

// An object which defines the list of matching rules to run and has a field `Rules` , which is a list of rule objects.
func (o MatchingWorkflowResolutionTechniquesPtrOutput) RuleBasedProperties() MatchingWorkflowRuleBasedPropertiesPtrOutput {
	return o.ApplyT(func(v *MatchingWorkflowResolutionTechniques) *MatchingWorkflowRuleBasedProperties {
		if v == nil {
			return nil
		}
		return v.RuleBasedProperties
	}).(MatchingWorkflowRuleBasedPropertiesPtrOutput)
}

type MatchingWorkflowRule struct {
	// A list of `MatchingKeys` . The `MatchingKeys` must have been defined in the `SchemaMapping` . Two records are considered to match according to this rule if all of the `MatchingKeys` match.
	MatchingKeys []string `pulumi:"matchingKeys"`
	// A name for the matching rule.
	RuleName string `pulumi:"ruleName"`
}

// MatchingWorkflowRuleInput is an input type that accepts MatchingWorkflowRuleArgs and MatchingWorkflowRuleOutput values.
// You can construct a concrete instance of `MatchingWorkflowRuleInput` via:
//
//	MatchingWorkflowRuleArgs{...}
type MatchingWorkflowRuleInput interface {
	pulumi.Input

	ToMatchingWorkflowRuleOutput() MatchingWorkflowRuleOutput
	ToMatchingWorkflowRuleOutputWithContext(context.Context) MatchingWorkflowRuleOutput
}

type MatchingWorkflowRuleArgs struct {
	// A list of `MatchingKeys` . The `MatchingKeys` must have been defined in the `SchemaMapping` . Two records are considered to match according to this rule if all of the `MatchingKeys` match.
	MatchingKeys pulumi.StringArrayInput `pulumi:"matchingKeys"`
	// A name for the matching rule.
	RuleName pulumi.StringInput `pulumi:"ruleName"`
}

func (MatchingWorkflowRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MatchingWorkflowRule)(nil)).Elem()
}

func (i MatchingWorkflowRuleArgs) ToMatchingWorkflowRuleOutput() MatchingWorkflowRuleOutput {
	return i.ToMatchingWorkflowRuleOutputWithContext(context.Background())
}

func (i MatchingWorkflowRuleArgs) ToMatchingWorkflowRuleOutputWithContext(ctx context.Context) MatchingWorkflowRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MatchingWorkflowRuleOutput)
}

// MatchingWorkflowRuleArrayInput is an input type that accepts MatchingWorkflowRuleArray and MatchingWorkflowRuleArrayOutput values.
// You can construct a concrete instance of `MatchingWorkflowRuleArrayInput` via:
//
//	MatchingWorkflowRuleArray{ MatchingWorkflowRuleArgs{...} }
type MatchingWorkflowRuleArrayInput interface {
	pulumi.Input

	ToMatchingWorkflowRuleArrayOutput() MatchingWorkflowRuleArrayOutput
	ToMatchingWorkflowRuleArrayOutputWithContext(context.Context) MatchingWorkflowRuleArrayOutput
}

type MatchingWorkflowRuleArray []MatchingWorkflowRuleInput

func (MatchingWorkflowRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MatchingWorkflowRule)(nil)).Elem()
}

func (i MatchingWorkflowRuleArray) ToMatchingWorkflowRuleArrayOutput() MatchingWorkflowRuleArrayOutput {
	return i.ToMatchingWorkflowRuleArrayOutputWithContext(context.Background())
}

func (i MatchingWorkflowRuleArray) ToMatchingWorkflowRuleArrayOutputWithContext(ctx context.Context) MatchingWorkflowRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MatchingWorkflowRuleArrayOutput)
}

type MatchingWorkflowRuleOutput struct{ *pulumi.OutputState }

func (MatchingWorkflowRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MatchingWorkflowRule)(nil)).Elem()
}

func (o MatchingWorkflowRuleOutput) ToMatchingWorkflowRuleOutput() MatchingWorkflowRuleOutput {
	return o
}

func (o MatchingWorkflowRuleOutput) ToMatchingWorkflowRuleOutputWithContext(ctx context.Context) MatchingWorkflowRuleOutput {
	return o
}

// A list of `MatchingKeys` . The `MatchingKeys` must have been defined in the `SchemaMapping` . Two records are considered to match according to this rule if all of the `MatchingKeys` match.
func (o MatchingWorkflowRuleOutput) MatchingKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MatchingWorkflowRule) []string { return v.MatchingKeys }).(pulumi.StringArrayOutput)
}

// A name for the matching rule.
func (o MatchingWorkflowRuleOutput) RuleName() pulumi.StringOutput {
	return o.ApplyT(func(v MatchingWorkflowRule) string { return v.RuleName }).(pulumi.StringOutput)
}

type MatchingWorkflowRuleArrayOutput struct{ *pulumi.OutputState }

func (MatchingWorkflowRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MatchingWorkflowRule)(nil)).Elem()
}

func (o MatchingWorkflowRuleArrayOutput) ToMatchingWorkflowRuleArrayOutput() MatchingWorkflowRuleArrayOutput {
	return o
}

func (o MatchingWorkflowRuleArrayOutput) ToMatchingWorkflowRuleArrayOutputWithContext(ctx context.Context) MatchingWorkflowRuleArrayOutput {
	return o
}

func (o MatchingWorkflowRuleArrayOutput) Index(i pulumi.IntInput) MatchingWorkflowRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MatchingWorkflowRule {
		return vs[0].([]MatchingWorkflowRule)[vs[1].(int)]
	}).(MatchingWorkflowRuleOutput)
}

type MatchingWorkflowRuleBasedProperties struct {
	// The comparison type. You can either choose `ONE_TO_ONE` or `MANY_TO_MANY` as the `attributeMatchingModel` .
	//
	// If you choose `MANY_TO_MANY` , the system can match attributes across the sub-types of an attribute type. For example, if the value of the `Email` field of Profile A and the value of `BusinessEmail` field of Profile B matches, the two profiles are matched on the `Email` attribute type.
	//
	// If you choose `ONE_TO_ONE` , the system can only match attributes if the sub-types are an exact match. For example, for the `Email` attribute type, the system will only consider it a match if the value of the `Email` field of Profile A matches the value of the `Email` field of Profile B.
	AttributeMatchingModel MatchingWorkflowRuleBasedPropertiesAttributeMatchingModel `pulumi:"attributeMatchingModel"`
	// An indicator of whether to generate IDs and index the data or not.
	//
	// If you choose `IDENTIFIER_GENERATION` , the process generates IDs and indexes the data.
	//
	// If you choose `INDEXING` , the process indexes the data without generating IDs.
	MatchPurpose *MatchingWorkflowRuleBasedPropertiesMatchPurpose `pulumi:"matchPurpose"`
	// A list of `Rule` objects, each of which have fields `RuleName` and `MatchingKeys` .
	Rules []MatchingWorkflowRule `pulumi:"rules"`
}

// MatchingWorkflowRuleBasedPropertiesInput is an input type that accepts MatchingWorkflowRuleBasedPropertiesArgs and MatchingWorkflowRuleBasedPropertiesOutput values.
// You can construct a concrete instance of `MatchingWorkflowRuleBasedPropertiesInput` via:
//
//	MatchingWorkflowRuleBasedPropertiesArgs{...}
type MatchingWorkflowRuleBasedPropertiesInput interface {
	pulumi.Input

	ToMatchingWorkflowRuleBasedPropertiesOutput() MatchingWorkflowRuleBasedPropertiesOutput
	ToMatchingWorkflowRuleBasedPropertiesOutputWithContext(context.Context) MatchingWorkflowRuleBasedPropertiesOutput
}

type MatchingWorkflowRuleBasedPropertiesArgs struct {
	// The comparison type. You can either choose `ONE_TO_ONE` or `MANY_TO_MANY` as the `attributeMatchingModel` .
	//
	// If you choose `MANY_TO_MANY` , the system can match attributes across the sub-types of an attribute type. For example, if the value of the `Email` field of Profile A and the value of `BusinessEmail` field of Profile B matches, the two profiles are matched on the `Email` attribute type.
	//
	// If you choose `ONE_TO_ONE` , the system can only match attributes if the sub-types are an exact match. For example, for the `Email` attribute type, the system will only consider it a match if the value of the `Email` field of Profile A matches the value of the `Email` field of Profile B.
	AttributeMatchingModel MatchingWorkflowRuleBasedPropertiesAttributeMatchingModelInput `pulumi:"attributeMatchingModel"`
	// An indicator of whether to generate IDs and index the data or not.
	//
	// If you choose `IDENTIFIER_GENERATION` , the process generates IDs and indexes the data.
	//
	// If you choose `INDEXING` , the process indexes the data without generating IDs.
	MatchPurpose MatchingWorkflowRuleBasedPropertiesMatchPurposePtrInput `pulumi:"matchPurpose"`
	// A list of `Rule` objects, each of which have fields `RuleName` and `MatchingKeys` .
	Rules MatchingWorkflowRuleArrayInput `pulumi:"rules"`
}

func (MatchingWorkflowRuleBasedPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MatchingWorkflowRuleBasedProperties)(nil)).Elem()
}

func (i MatchingWorkflowRuleBasedPropertiesArgs) ToMatchingWorkflowRuleBasedPropertiesOutput() MatchingWorkflowRuleBasedPropertiesOutput {
	return i.ToMatchingWorkflowRuleBasedPropertiesOutputWithContext(context.Background())
}

func (i MatchingWorkflowRuleBasedPropertiesArgs) ToMatchingWorkflowRuleBasedPropertiesOutputWithContext(ctx context.Context) MatchingWorkflowRuleBasedPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MatchingWorkflowRuleBasedPropertiesOutput)
}

func (i MatchingWorkflowRuleBasedPropertiesArgs) ToMatchingWorkflowRuleBasedPropertiesPtrOutput() MatchingWorkflowRuleBasedPropertiesPtrOutput {
	return i.ToMatchingWorkflowRuleBasedPropertiesPtrOutputWithContext(context.Background())
}

func (i MatchingWorkflowRuleBasedPropertiesArgs) ToMatchingWorkflowRuleBasedPropertiesPtrOutputWithContext(ctx context.Context) MatchingWorkflowRuleBasedPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MatchingWorkflowRuleBasedPropertiesOutput).ToMatchingWorkflowRuleBasedPropertiesPtrOutputWithContext(ctx)
}

// MatchingWorkflowRuleBasedPropertiesPtrInput is an input type that accepts MatchingWorkflowRuleBasedPropertiesArgs, MatchingWorkflowRuleBasedPropertiesPtr and MatchingWorkflowRuleBasedPropertiesPtrOutput values.
// You can construct a concrete instance of `MatchingWorkflowRuleBasedPropertiesPtrInput` via:
//
//	        MatchingWorkflowRuleBasedPropertiesArgs{...}
//
//	or:
//
//	        nil
type MatchingWorkflowRuleBasedPropertiesPtrInput interface {
	pulumi.Input

	ToMatchingWorkflowRuleBasedPropertiesPtrOutput() MatchingWorkflowRuleBasedPropertiesPtrOutput
	ToMatchingWorkflowRuleBasedPropertiesPtrOutputWithContext(context.Context) MatchingWorkflowRuleBasedPropertiesPtrOutput
}

type matchingWorkflowRuleBasedPropertiesPtrType MatchingWorkflowRuleBasedPropertiesArgs

func MatchingWorkflowRuleBasedPropertiesPtr(v *MatchingWorkflowRuleBasedPropertiesArgs) MatchingWorkflowRuleBasedPropertiesPtrInput {
	return (*matchingWorkflowRuleBasedPropertiesPtrType)(v)
}

func (*matchingWorkflowRuleBasedPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MatchingWorkflowRuleBasedProperties)(nil)).Elem()
}

func (i *matchingWorkflowRuleBasedPropertiesPtrType) ToMatchingWorkflowRuleBasedPropertiesPtrOutput() MatchingWorkflowRuleBasedPropertiesPtrOutput {
	return i.ToMatchingWorkflowRuleBasedPropertiesPtrOutputWithContext(context.Background())
}

func (i *matchingWorkflowRuleBasedPropertiesPtrType) ToMatchingWorkflowRuleBasedPropertiesPtrOutputWithContext(ctx context.Context) MatchingWorkflowRuleBasedPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MatchingWorkflowRuleBasedPropertiesPtrOutput)
}

type MatchingWorkflowRuleBasedPropertiesOutput struct{ *pulumi.OutputState }

func (MatchingWorkflowRuleBasedPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MatchingWorkflowRuleBasedProperties)(nil)).Elem()
}

func (o MatchingWorkflowRuleBasedPropertiesOutput) ToMatchingWorkflowRuleBasedPropertiesOutput() MatchingWorkflowRuleBasedPropertiesOutput {
	return o
}

func (o MatchingWorkflowRuleBasedPropertiesOutput) ToMatchingWorkflowRuleBasedPropertiesOutputWithContext(ctx context.Context) MatchingWorkflowRuleBasedPropertiesOutput {
	return o
}

func (o MatchingWorkflowRuleBasedPropertiesOutput) ToMatchingWorkflowRuleBasedPropertiesPtrOutput() MatchingWorkflowRuleBasedPropertiesPtrOutput {
	return o.ToMatchingWorkflowRuleBasedPropertiesPtrOutputWithContext(context.Background())
}

func (o MatchingWorkflowRuleBasedPropertiesOutput) ToMatchingWorkflowRuleBasedPropertiesPtrOutputWithContext(ctx context.Context) MatchingWorkflowRuleBasedPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MatchingWorkflowRuleBasedProperties) *MatchingWorkflowRuleBasedProperties {
		return &v
	}).(MatchingWorkflowRuleBasedPropertiesPtrOutput)
}

// The comparison type. You can either choose `ONE_TO_ONE` or `MANY_TO_MANY` as the `attributeMatchingModel` .
//
// If you choose `MANY_TO_MANY` , the system can match attributes across the sub-types of an attribute type. For example, if the value of the `Email` field of Profile A and the value of `BusinessEmail` field of Profile B matches, the two profiles are matched on the `Email` attribute type.
//
// If you choose `ONE_TO_ONE` , the system can only match attributes if the sub-types are an exact match. For example, for the `Email` attribute type, the system will only consider it a match if the value of the `Email` field of Profile A matches the value of the `Email` field of Profile B.
func (o MatchingWorkflowRuleBasedPropertiesOutput) AttributeMatchingModel() MatchingWorkflowRuleBasedPropertiesAttributeMatchingModelOutput {
	return o.ApplyT(func(v MatchingWorkflowRuleBasedProperties) MatchingWorkflowRuleBasedPropertiesAttributeMatchingModel {
		return v.AttributeMatchingModel
	}).(MatchingWorkflowRuleBasedPropertiesAttributeMatchingModelOutput)
}

// An indicator of whether to generate IDs and index the data or not.
//
// If you choose `IDENTIFIER_GENERATION` , the process generates IDs and indexes the data.
//
// If you choose `INDEXING` , the process indexes the data without generating IDs.
func (o MatchingWorkflowRuleBasedPropertiesOutput) MatchPurpose() MatchingWorkflowRuleBasedPropertiesMatchPurposePtrOutput {
	return o.ApplyT(func(v MatchingWorkflowRuleBasedProperties) *MatchingWorkflowRuleBasedPropertiesMatchPurpose {
		return v.MatchPurpose
	}).(MatchingWorkflowRuleBasedPropertiesMatchPurposePtrOutput)
}

// A list of `Rule` objects, each of which have fields `RuleName` and `MatchingKeys` .
func (o MatchingWorkflowRuleBasedPropertiesOutput) Rules() MatchingWorkflowRuleArrayOutput {
	return o.ApplyT(func(v MatchingWorkflowRuleBasedProperties) []MatchingWorkflowRule { return v.Rules }).(MatchingWorkflowRuleArrayOutput)
}

type MatchingWorkflowRuleBasedPropertiesPtrOutput struct{ *pulumi.OutputState }

func (MatchingWorkflowRuleBasedPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MatchingWorkflowRuleBasedProperties)(nil)).Elem()
}

func (o MatchingWorkflowRuleBasedPropertiesPtrOutput) ToMatchingWorkflowRuleBasedPropertiesPtrOutput() MatchingWorkflowRuleBasedPropertiesPtrOutput {
	return o
}

func (o MatchingWorkflowRuleBasedPropertiesPtrOutput) ToMatchingWorkflowRuleBasedPropertiesPtrOutputWithContext(ctx context.Context) MatchingWorkflowRuleBasedPropertiesPtrOutput {
	return o
}

func (o MatchingWorkflowRuleBasedPropertiesPtrOutput) Elem() MatchingWorkflowRuleBasedPropertiesOutput {
	return o.ApplyT(func(v *MatchingWorkflowRuleBasedProperties) MatchingWorkflowRuleBasedProperties {
		if v != nil {
			return *v
		}
		var ret MatchingWorkflowRuleBasedProperties
		return ret
	}).(MatchingWorkflowRuleBasedPropertiesOutput)
}

// The comparison type. You can either choose `ONE_TO_ONE` or `MANY_TO_MANY` as the `attributeMatchingModel` .
//
// If you choose `MANY_TO_MANY` , the system can match attributes across the sub-types of an attribute type. For example, if the value of the `Email` field of Profile A and the value of `BusinessEmail` field of Profile B matches, the two profiles are matched on the `Email` attribute type.
//
// If you choose `ONE_TO_ONE` , the system can only match attributes if the sub-types are an exact match. For example, for the `Email` attribute type, the system will only consider it a match if the value of the `Email` field of Profile A matches the value of the `Email` field of Profile B.
func (o MatchingWorkflowRuleBasedPropertiesPtrOutput) AttributeMatchingModel() MatchingWorkflowRuleBasedPropertiesAttributeMatchingModelPtrOutput {
	return o.ApplyT(func(v *MatchingWorkflowRuleBasedProperties) *MatchingWorkflowRuleBasedPropertiesAttributeMatchingModel {
		if v == nil {
			return nil
		}
		return &v.AttributeMatchingModel
	}).(MatchingWorkflowRuleBasedPropertiesAttributeMatchingModelPtrOutput)
}

// An indicator of whether to generate IDs and index the data or not.
//
// If you choose `IDENTIFIER_GENERATION` , the process generates IDs and indexes the data.
//
// If you choose `INDEXING` , the process indexes the data without generating IDs.
func (o MatchingWorkflowRuleBasedPropertiesPtrOutput) MatchPurpose() MatchingWorkflowRuleBasedPropertiesMatchPurposePtrOutput {
	return o.ApplyT(func(v *MatchingWorkflowRuleBasedProperties) *MatchingWorkflowRuleBasedPropertiesMatchPurpose {
		if v == nil {
			return nil
		}
		return v.MatchPurpose
	}).(MatchingWorkflowRuleBasedPropertiesMatchPurposePtrOutput)
}

// A list of `Rule` objects, each of which have fields `RuleName` and `MatchingKeys` .
func (o MatchingWorkflowRuleBasedPropertiesPtrOutput) Rules() MatchingWorkflowRuleArrayOutput {
	return o.ApplyT(func(v *MatchingWorkflowRuleBasedProperties) []MatchingWorkflowRule {
		if v == nil {
			return nil
		}
		return v.Rules
	}).(MatchingWorkflowRuleArrayOutput)
}

// A key-value pair to associate with a resource
type MatchingWorkflowTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

type SchemaMappingSchemaInputAttribute struct {
	FieldName string  `pulumi:"fieldName"`
	GroupName *string `pulumi:"groupName"`
	Hashed    *bool   `pulumi:"hashed"`
	MatchKey  *string `pulumi:"matchKey"`
	// The subtype of the Attribute. Would be required only when type is PROVIDER_ID
	SubType *string                          `pulumi:"subType"`
	Type    SchemaMappingSchemaAttributeType `pulumi:"type"`
}

// SchemaMappingSchemaInputAttributeInput is an input type that accepts SchemaMappingSchemaInputAttributeArgs and SchemaMappingSchemaInputAttributeOutput values.
// You can construct a concrete instance of `SchemaMappingSchemaInputAttributeInput` via:
//
//	SchemaMappingSchemaInputAttributeArgs{...}
type SchemaMappingSchemaInputAttributeInput interface {
	pulumi.Input

	ToSchemaMappingSchemaInputAttributeOutput() SchemaMappingSchemaInputAttributeOutput
	ToSchemaMappingSchemaInputAttributeOutputWithContext(context.Context) SchemaMappingSchemaInputAttributeOutput
}

type SchemaMappingSchemaInputAttributeArgs struct {
	FieldName pulumi.StringInput    `pulumi:"fieldName"`
	GroupName pulumi.StringPtrInput `pulumi:"groupName"`
	Hashed    pulumi.BoolPtrInput   `pulumi:"hashed"`
	MatchKey  pulumi.StringPtrInput `pulumi:"matchKey"`
	// The subtype of the Attribute. Would be required only when type is PROVIDER_ID
	SubType pulumi.StringPtrInput                 `pulumi:"subType"`
	Type    SchemaMappingSchemaAttributeTypeInput `pulumi:"type"`
}

func (SchemaMappingSchemaInputAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaMappingSchemaInputAttribute)(nil)).Elem()
}

func (i SchemaMappingSchemaInputAttributeArgs) ToSchemaMappingSchemaInputAttributeOutput() SchemaMappingSchemaInputAttributeOutput {
	return i.ToSchemaMappingSchemaInputAttributeOutputWithContext(context.Background())
}

func (i SchemaMappingSchemaInputAttributeArgs) ToSchemaMappingSchemaInputAttributeOutputWithContext(ctx context.Context) SchemaMappingSchemaInputAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaMappingSchemaInputAttributeOutput)
}

// SchemaMappingSchemaInputAttributeArrayInput is an input type that accepts SchemaMappingSchemaInputAttributeArray and SchemaMappingSchemaInputAttributeArrayOutput values.
// You can construct a concrete instance of `SchemaMappingSchemaInputAttributeArrayInput` via:
//
//	SchemaMappingSchemaInputAttributeArray{ SchemaMappingSchemaInputAttributeArgs{...} }
type SchemaMappingSchemaInputAttributeArrayInput interface {
	pulumi.Input

	ToSchemaMappingSchemaInputAttributeArrayOutput() SchemaMappingSchemaInputAttributeArrayOutput
	ToSchemaMappingSchemaInputAttributeArrayOutputWithContext(context.Context) SchemaMappingSchemaInputAttributeArrayOutput
}

type SchemaMappingSchemaInputAttributeArray []SchemaMappingSchemaInputAttributeInput

func (SchemaMappingSchemaInputAttributeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SchemaMappingSchemaInputAttribute)(nil)).Elem()
}

func (i SchemaMappingSchemaInputAttributeArray) ToSchemaMappingSchemaInputAttributeArrayOutput() SchemaMappingSchemaInputAttributeArrayOutput {
	return i.ToSchemaMappingSchemaInputAttributeArrayOutputWithContext(context.Background())
}

func (i SchemaMappingSchemaInputAttributeArray) ToSchemaMappingSchemaInputAttributeArrayOutputWithContext(ctx context.Context) SchemaMappingSchemaInputAttributeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaMappingSchemaInputAttributeArrayOutput)
}

type SchemaMappingSchemaInputAttributeOutput struct{ *pulumi.OutputState }

func (SchemaMappingSchemaInputAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaMappingSchemaInputAttribute)(nil)).Elem()
}

func (o SchemaMappingSchemaInputAttributeOutput) ToSchemaMappingSchemaInputAttributeOutput() SchemaMappingSchemaInputAttributeOutput {
	return o
}

func (o SchemaMappingSchemaInputAttributeOutput) ToSchemaMappingSchemaInputAttributeOutputWithContext(ctx context.Context) SchemaMappingSchemaInputAttributeOutput {
	return o
}

func (o SchemaMappingSchemaInputAttributeOutput) FieldName() pulumi.StringOutput {
	return o.ApplyT(func(v SchemaMappingSchemaInputAttribute) string { return v.FieldName }).(pulumi.StringOutput)
}

func (o SchemaMappingSchemaInputAttributeOutput) GroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaMappingSchemaInputAttribute) *string { return v.GroupName }).(pulumi.StringPtrOutput)
}

func (o SchemaMappingSchemaInputAttributeOutput) Hashed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SchemaMappingSchemaInputAttribute) *bool { return v.Hashed }).(pulumi.BoolPtrOutput)
}

func (o SchemaMappingSchemaInputAttributeOutput) MatchKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaMappingSchemaInputAttribute) *string { return v.MatchKey }).(pulumi.StringPtrOutput)
}

// The subtype of the Attribute. Would be required only when type is PROVIDER_ID
func (o SchemaMappingSchemaInputAttributeOutput) SubType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaMappingSchemaInputAttribute) *string { return v.SubType }).(pulumi.StringPtrOutput)
}

func (o SchemaMappingSchemaInputAttributeOutput) Type() SchemaMappingSchemaAttributeTypeOutput {
	return o.ApplyT(func(v SchemaMappingSchemaInputAttribute) SchemaMappingSchemaAttributeType { return v.Type }).(SchemaMappingSchemaAttributeTypeOutput)
}

type SchemaMappingSchemaInputAttributeArrayOutput struct{ *pulumi.OutputState }

func (SchemaMappingSchemaInputAttributeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SchemaMappingSchemaInputAttribute)(nil)).Elem()
}

func (o SchemaMappingSchemaInputAttributeArrayOutput) ToSchemaMappingSchemaInputAttributeArrayOutput() SchemaMappingSchemaInputAttributeArrayOutput {
	return o
}

func (o SchemaMappingSchemaInputAttributeArrayOutput) ToSchemaMappingSchemaInputAttributeArrayOutputWithContext(ctx context.Context) SchemaMappingSchemaInputAttributeArrayOutput {
	return o
}

func (o SchemaMappingSchemaInputAttributeArrayOutput) Index(i pulumi.IntInput) SchemaMappingSchemaInputAttributeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SchemaMappingSchemaInputAttribute {
		return vs[0].([]SchemaMappingSchemaInputAttribute)[vs[1].(int)]
	}).(SchemaMappingSchemaInputAttributeOutput)
}

// A key-value pair to associate with a resource
type SchemaMappingTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IdMappingWorkflowIdMappingRuleBasedPropertiesInput)(nil)).Elem(), IdMappingWorkflowIdMappingRuleBasedPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdMappingWorkflowIdMappingRuleBasedPropertiesPtrInput)(nil)).Elem(), IdMappingWorkflowIdMappingRuleBasedPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdMappingWorkflowIdMappingTechniquesInput)(nil)).Elem(), IdMappingWorkflowIdMappingTechniquesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdMappingWorkflowInputSourceInput)(nil)).Elem(), IdMappingWorkflowInputSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdMappingWorkflowInputSourceArrayInput)(nil)).Elem(), IdMappingWorkflowInputSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdMappingWorkflowIntermediateSourceConfigurationInput)(nil)).Elem(), IdMappingWorkflowIntermediateSourceConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdMappingWorkflowIntermediateSourceConfigurationPtrInput)(nil)).Elem(), IdMappingWorkflowIntermediateSourceConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdMappingWorkflowOutputSourceInput)(nil)).Elem(), IdMappingWorkflowOutputSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdMappingWorkflowOutputSourceArrayInput)(nil)).Elem(), IdMappingWorkflowOutputSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdMappingWorkflowProviderPropertiesInput)(nil)).Elem(), IdMappingWorkflowProviderPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdMappingWorkflowProviderPropertiesPtrInput)(nil)).Elem(), IdMappingWorkflowProviderPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdMappingWorkflowRuleInput)(nil)).Elem(), IdMappingWorkflowRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdMappingWorkflowRuleArrayInput)(nil)).Elem(), IdMappingWorkflowRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdNamespaceIdMappingWorkflowPropertiesInput)(nil)).Elem(), IdNamespaceIdMappingWorkflowPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdNamespaceIdMappingWorkflowPropertiesArrayInput)(nil)).Elem(), IdNamespaceIdMappingWorkflowPropertiesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdNamespaceInputSourceInput)(nil)).Elem(), IdNamespaceInputSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdNamespaceInputSourceArrayInput)(nil)).Elem(), IdNamespaceInputSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdNamespaceNamespaceProviderPropertiesInput)(nil)).Elem(), IdNamespaceNamespaceProviderPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdNamespaceNamespaceProviderPropertiesPtrInput)(nil)).Elem(), IdNamespaceNamespaceProviderPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdNamespaceNamespaceRuleBasedPropertiesInput)(nil)).Elem(), IdNamespaceNamespaceRuleBasedPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdNamespaceNamespaceRuleBasedPropertiesPtrInput)(nil)).Elem(), IdNamespaceNamespaceRuleBasedPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdNamespaceRuleInput)(nil)).Elem(), IdNamespaceRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdNamespaceRuleArrayInput)(nil)).Elem(), IdNamespaceRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MatchingWorkflowInputSourceInput)(nil)).Elem(), MatchingWorkflowInputSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MatchingWorkflowInputSourceArrayInput)(nil)).Elem(), MatchingWorkflowInputSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MatchingWorkflowIntermediateSourceConfigurationInput)(nil)).Elem(), MatchingWorkflowIntermediateSourceConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MatchingWorkflowIntermediateSourceConfigurationPtrInput)(nil)).Elem(), MatchingWorkflowIntermediateSourceConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MatchingWorkflowOutputAttributeInput)(nil)).Elem(), MatchingWorkflowOutputAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MatchingWorkflowOutputAttributeArrayInput)(nil)).Elem(), MatchingWorkflowOutputAttributeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MatchingWorkflowOutputSourceInput)(nil)).Elem(), MatchingWorkflowOutputSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MatchingWorkflowOutputSourceArrayInput)(nil)).Elem(), MatchingWorkflowOutputSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MatchingWorkflowProviderPropertiesInput)(nil)).Elem(), MatchingWorkflowProviderPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MatchingWorkflowProviderPropertiesPtrInput)(nil)).Elem(), MatchingWorkflowProviderPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MatchingWorkflowResolutionTechniquesInput)(nil)).Elem(), MatchingWorkflowResolutionTechniquesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MatchingWorkflowRuleInput)(nil)).Elem(), MatchingWorkflowRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MatchingWorkflowRuleArrayInput)(nil)).Elem(), MatchingWorkflowRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MatchingWorkflowRuleBasedPropertiesInput)(nil)).Elem(), MatchingWorkflowRuleBasedPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MatchingWorkflowRuleBasedPropertiesPtrInput)(nil)).Elem(), MatchingWorkflowRuleBasedPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaMappingSchemaInputAttributeInput)(nil)).Elem(), SchemaMappingSchemaInputAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaMappingSchemaInputAttributeArrayInput)(nil)).Elem(), SchemaMappingSchemaInputAttributeArray{})
	pulumi.RegisterOutputType(IdMappingWorkflowIdMappingRuleBasedPropertiesOutput{})
	pulumi.RegisterOutputType(IdMappingWorkflowIdMappingRuleBasedPropertiesPtrOutput{})
	pulumi.RegisterOutputType(IdMappingWorkflowIdMappingTechniquesOutput{})
	pulumi.RegisterOutputType(IdMappingWorkflowIdMappingTechniquesPtrOutput{})
	pulumi.RegisterOutputType(IdMappingWorkflowInputSourceOutput{})
	pulumi.RegisterOutputType(IdMappingWorkflowInputSourceArrayOutput{})
	pulumi.RegisterOutputType(IdMappingWorkflowIntermediateSourceConfigurationOutput{})
	pulumi.RegisterOutputType(IdMappingWorkflowIntermediateSourceConfigurationPtrOutput{})
	pulumi.RegisterOutputType(IdMappingWorkflowOutputSourceOutput{})
	pulumi.RegisterOutputType(IdMappingWorkflowOutputSourceArrayOutput{})
	pulumi.RegisterOutputType(IdMappingWorkflowProviderPropertiesOutput{})
	pulumi.RegisterOutputType(IdMappingWorkflowProviderPropertiesPtrOutput{})
	pulumi.RegisterOutputType(IdMappingWorkflowRuleOutput{})
	pulumi.RegisterOutputType(IdMappingWorkflowRuleArrayOutput{})
	pulumi.RegisterOutputType(IdNamespaceIdMappingWorkflowPropertiesOutput{})
	pulumi.RegisterOutputType(IdNamespaceIdMappingWorkflowPropertiesArrayOutput{})
	pulumi.RegisterOutputType(IdNamespaceInputSourceOutput{})
	pulumi.RegisterOutputType(IdNamespaceInputSourceArrayOutput{})
	pulumi.RegisterOutputType(IdNamespaceNamespaceProviderPropertiesOutput{})
	pulumi.RegisterOutputType(IdNamespaceNamespaceProviderPropertiesPtrOutput{})
	pulumi.RegisterOutputType(IdNamespaceNamespaceRuleBasedPropertiesOutput{})
	pulumi.RegisterOutputType(IdNamespaceNamespaceRuleBasedPropertiesPtrOutput{})
	pulumi.RegisterOutputType(IdNamespaceRuleOutput{})
	pulumi.RegisterOutputType(IdNamespaceRuleArrayOutput{})
	pulumi.RegisterOutputType(MatchingWorkflowInputSourceOutput{})
	pulumi.RegisterOutputType(MatchingWorkflowInputSourceArrayOutput{})
	pulumi.RegisterOutputType(MatchingWorkflowIntermediateSourceConfigurationOutput{})
	pulumi.RegisterOutputType(MatchingWorkflowIntermediateSourceConfigurationPtrOutput{})
	pulumi.RegisterOutputType(MatchingWorkflowOutputAttributeOutput{})
	pulumi.RegisterOutputType(MatchingWorkflowOutputAttributeArrayOutput{})
	pulumi.RegisterOutputType(MatchingWorkflowOutputSourceOutput{})
	pulumi.RegisterOutputType(MatchingWorkflowOutputSourceArrayOutput{})
	pulumi.RegisterOutputType(MatchingWorkflowProviderPropertiesOutput{})
	pulumi.RegisterOutputType(MatchingWorkflowProviderPropertiesPtrOutput{})
	pulumi.RegisterOutputType(MatchingWorkflowResolutionTechniquesOutput{})
	pulumi.RegisterOutputType(MatchingWorkflowResolutionTechniquesPtrOutput{})
	pulumi.RegisterOutputType(MatchingWorkflowRuleOutput{})
	pulumi.RegisterOutputType(MatchingWorkflowRuleArrayOutput{})
	pulumi.RegisterOutputType(MatchingWorkflowRuleBasedPropertiesOutput{})
	pulumi.RegisterOutputType(MatchingWorkflowRuleBasedPropertiesPtrOutput{})
	pulumi.RegisterOutputType(SchemaMappingSchemaInputAttributeOutput{})
	pulumi.RegisterOutputType(SchemaMappingSchemaInputAttributeArrayOutput{})
}
