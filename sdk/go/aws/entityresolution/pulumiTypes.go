// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package entityresolution

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type MatchingWorkflowInputSource struct {
	ApplyNormalization *bool `pulumi:"applyNormalization"`
	// An Glue table ARN for the input source table
	InputSourceArn string `pulumi:"inputSourceArn"`
	SchemaArn      string `pulumi:"schemaArn"`
}

// MatchingWorkflowInputSourceInput is an input type that accepts MatchingWorkflowInputSourceArgs and MatchingWorkflowInputSourceOutput values.
// You can construct a concrete instance of `MatchingWorkflowInputSourceInput` via:
//
//	MatchingWorkflowInputSourceArgs{...}
type MatchingWorkflowInputSourceInput interface {
	pulumi.Input

	ToMatchingWorkflowInputSourceOutput() MatchingWorkflowInputSourceOutput
	ToMatchingWorkflowInputSourceOutputWithContext(context.Context) MatchingWorkflowInputSourceOutput
}

type MatchingWorkflowInputSourceArgs struct {
	ApplyNormalization pulumi.BoolPtrInput `pulumi:"applyNormalization"`
	// An Glue table ARN for the input source table
	InputSourceArn pulumi.StringInput `pulumi:"inputSourceArn"`
	SchemaArn      pulumi.StringInput `pulumi:"schemaArn"`
}

func (MatchingWorkflowInputSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MatchingWorkflowInputSource)(nil)).Elem()
}

func (i MatchingWorkflowInputSourceArgs) ToMatchingWorkflowInputSourceOutput() MatchingWorkflowInputSourceOutput {
	return i.ToMatchingWorkflowInputSourceOutputWithContext(context.Background())
}

func (i MatchingWorkflowInputSourceArgs) ToMatchingWorkflowInputSourceOutputWithContext(ctx context.Context) MatchingWorkflowInputSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MatchingWorkflowInputSourceOutput)
}

func (i MatchingWorkflowInputSourceArgs) ToOutput(ctx context.Context) pulumix.Output[MatchingWorkflowInputSource] {
	return pulumix.Output[MatchingWorkflowInputSource]{
		OutputState: i.ToMatchingWorkflowInputSourceOutputWithContext(ctx).OutputState,
	}
}

// MatchingWorkflowInputSourceArrayInput is an input type that accepts MatchingWorkflowInputSourceArray and MatchingWorkflowInputSourceArrayOutput values.
// You can construct a concrete instance of `MatchingWorkflowInputSourceArrayInput` via:
//
//	MatchingWorkflowInputSourceArray{ MatchingWorkflowInputSourceArgs{...} }
type MatchingWorkflowInputSourceArrayInput interface {
	pulumi.Input

	ToMatchingWorkflowInputSourceArrayOutput() MatchingWorkflowInputSourceArrayOutput
	ToMatchingWorkflowInputSourceArrayOutputWithContext(context.Context) MatchingWorkflowInputSourceArrayOutput
}

type MatchingWorkflowInputSourceArray []MatchingWorkflowInputSourceInput

func (MatchingWorkflowInputSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MatchingWorkflowInputSource)(nil)).Elem()
}

func (i MatchingWorkflowInputSourceArray) ToMatchingWorkflowInputSourceArrayOutput() MatchingWorkflowInputSourceArrayOutput {
	return i.ToMatchingWorkflowInputSourceArrayOutputWithContext(context.Background())
}

func (i MatchingWorkflowInputSourceArray) ToMatchingWorkflowInputSourceArrayOutputWithContext(ctx context.Context) MatchingWorkflowInputSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MatchingWorkflowInputSourceArrayOutput)
}

func (i MatchingWorkflowInputSourceArray) ToOutput(ctx context.Context) pulumix.Output[[]MatchingWorkflowInputSource] {
	return pulumix.Output[[]MatchingWorkflowInputSource]{
		OutputState: i.ToMatchingWorkflowInputSourceArrayOutputWithContext(ctx).OutputState,
	}
}

type MatchingWorkflowInputSourceOutput struct{ *pulumi.OutputState }

func (MatchingWorkflowInputSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MatchingWorkflowInputSource)(nil)).Elem()
}

func (o MatchingWorkflowInputSourceOutput) ToMatchingWorkflowInputSourceOutput() MatchingWorkflowInputSourceOutput {
	return o
}

func (o MatchingWorkflowInputSourceOutput) ToMatchingWorkflowInputSourceOutputWithContext(ctx context.Context) MatchingWorkflowInputSourceOutput {
	return o
}

func (o MatchingWorkflowInputSourceOutput) ToOutput(ctx context.Context) pulumix.Output[MatchingWorkflowInputSource] {
	return pulumix.Output[MatchingWorkflowInputSource]{
		OutputState: o.OutputState,
	}
}

func (o MatchingWorkflowInputSourceOutput) ApplyNormalization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MatchingWorkflowInputSource) *bool { return v.ApplyNormalization }).(pulumi.BoolPtrOutput)
}

// An Glue table ARN for the input source table
func (o MatchingWorkflowInputSourceOutput) InputSourceArn() pulumi.StringOutput {
	return o.ApplyT(func(v MatchingWorkflowInputSource) string { return v.InputSourceArn }).(pulumi.StringOutput)
}

func (o MatchingWorkflowInputSourceOutput) SchemaArn() pulumi.StringOutput {
	return o.ApplyT(func(v MatchingWorkflowInputSource) string { return v.SchemaArn }).(pulumi.StringOutput)
}

type MatchingWorkflowInputSourceArrayOutput struct{ *pulumi.OutputState }

func (MatchingWorkflowInputSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MatchingWorkflowInputSource)(nil)).Elem()
}

func (o MatchingWorkflowInputSourceArrayOutput) ToMatchingWorkflowInputSourceArrayOutput() MatchingWorkflowInputSourceArrayOutput {
	return o
}

func (o MatchingWorkflowInputSourceArrayOutput) ToMatchingWorkflowInputSourceArrayOutputWithContext(ctx context.Context) MatchingWorkflowInputSourceArrayOutput {
	return o
}

func (o MatchingWorkflowInputSourceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]MatchingWorkflowInputSource] {
	return pulumix.Output[[]MatchingWorkflowInputSource]{
		OutputState: o.OutputState,
	}
}

func (o MatchingWorkflowInputSourceArrayOutput) Index(i pulumi.IntInput) MatchingWorkflowInputSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MatchingWorkflowInputSource {
		return vs[0].([]MatchingWorkflowInputSource)[vs[1].(int)]
	}).(MatchingWorkflowInputSourceOutput)
}

type MatchingWorkflowIntermediateSourceConfiguration struct {
	// The s3 path that would be used to stage the intermediate data being generated during workflow execution.
	IntermediateS3Path string `pulumi:"intermediateS3Path"`
}

// MatchingWorkflowIntermediateSourceConfigurationInput is an input type that accepts MatchingWorkflowIntermediateSourceConfigurationArgs and MatchingWorkflowIntermediateSourceConfigurationOutput values.
// You can construct a concrete instance of `MatchingWorkflowIntermediateSourceConfigurationInput` via:
//
//	MatchingWorkflowIntermediateSourceConfigurationArgs{...}
type MatchingWorkflowIntermediateSourceConfigurationInput interface {
	pulumi.Input

	ToMatchingWorkflowIntermediateSourceConfigurationOutput() MatchingWorkflowIntermediateSourceConfigurationOutput
	ToMatchingWorkflowIntermediateSourceConfigurationOutputWithContext(context.Context) MatchingWorkflowIntermediateSourceConfigurationOutput
}

type MatchingWorkflowIntermediateSourceConfigurationArgs struct {
	// The s3 path that would be used to stage the intermediate data being generated during workflow execution.
	IntermediateS3Path pulumi.StringInput `pulumi:"intermediateS3Path"`
}

func (MatchingWorkflowIntermediateSourceConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MatchingWorkflowIntermediateSourceConfiguration)(nil)).Elem()
}

func (i MatchingWorkflowIntermediateSourceConfigurationArgs) ToMatchingWorkflowIntermediateSourceConfigurationOutput() MatchingWorkflowIntermediateSourceConfigurationOutput {
	return i.ToMatchingWorkflowIntermediateSourceConfigurationOutputWithContext(context.Background())
}

func (i MatchingWorkflowIntermediateSourceConfigurationArgs) ToMatchingWorkflowIntermediateSourceConfigurationOutputWithContext(ctx context.Context) MatchingWorkflowIntermediateSourceConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MatchingWorkflowIntermediateSourceConfigurationOutput)
}

func (i MatchingWorkflowIntermediateSourceConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[MatchingWorkflowIntermediateSourceConfiguration] {
	return pulumix.Output[MatchingWorkflowIntermediateSourceConfiguration]{
		OutputState: i.ToMatchingWorkflowIntermediateSourceConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i MatchingWorkflowIntermediateSourceConfigurationArgs) ToMatchingWorkflowIntermediateSourceConfigurationPtrOutput() MatchingWorkflowIntermediateSourceConfigurationPtrOutput {
	return i.ToMatchingWorkflowIntermediateSourceConfigurationPtrOutputWithContext(context.Background())
}

func (i MatchingWorkflowIntermediateSourceConfigurationArgs) ToMatchingWorkflowIntermediateSourceConfigurationPtrOutputWithContext(ctx context.Context) MatchingWorkflowIntermediateSourceConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MatchingWorkflowIntermediateSourceConfigurationOutput).ToMatchingWorkflowIntermediateSourceConfigurationPtrOutputWithContext(ctx)
}

// MatchingWorkflowIntermediateSourceConfigurationPtrInput is an input type that accepts MatchingWorkflowIntermediateSourceConfigurationArgs, MatchingWorkflowIntermediateSourceConfigurationPtr and MatchingWorkflowIntermediateSourceConfigurationPtrOutput values.
// You can construct a concrete instance of `MatchingWorkflowIntermediateSourceConfigurationPtrInput` via:
//
//	        MatchingWorkflowIntermediateSourceConfigurationArgs{...}
//
//	or:
//
//	        nil
type MatchingWorkflowIntermediateSourceConfigurationPtrInput interface {
	pulumi.Input

	ToMatchingWorkflowIntermediateSourceConfigurationPtrOutput() MatchingWorkflowIntermediateSourceConfigurationPtrOutput
	ToMatchingWorkflowIntermediateSourceConfigurationPtrOutputWithContext(context.Context) MatchingWorkflowIntermediateSourceConfigurationPtrOutput
}

type matchingWorkflowIntermediateSourceConfigurationPtrType MatchingWorkflowIntermediateSourceConfigurationArgs

func MatchingWorkflowIntermediateSourceConfigurationPtr(v *MatchingWorkflowIntermediateSourceConfigurationArgs) MatchingWorkflowIntermediateSourceConfigurationPtrInput {
	return (*matchingWorkflowIntermediateSourceConfigurationPtrType)(v)
}

func (*matchingWorkflowIntermediateSourceConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MatchingWorkflowIntermediateSourceConfiguration)(nil)).Elem()
}

func (i *matchingWorkflowIntermediateSourceConfigurationPtrType) ToMatchingWorkflowIntermediateSourceConfigurationPtrOutput() MatchingWorkflowIntermediateSourceConfigurationPtrOutput {
	return i.ToMatchingWorkflowIntermediateSourceConfigurationPtrOutputWithContext(context.Background())
}

func (i *matchingWorkflowIntermediateSourceConfigurationPtrType) ToMatchingWorkflowIntermediateSourceConfigurationPtrOutputWithContext(ctx context.Context) MatchingWorkflowIntermediateSourceConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MatchingWorkflowIntermediateSourceConfigurationPtrOutput)
}

func (i *matchingWorkflowIntermediateSourceConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*MatchingWorkflowIntermediateSourceConfiguration] {
	return pulumix.Output[*MatchingWorkflowIntermediateSourceConfiguration]{
		OutputState: i.ToMatchingWorkflowIntermediateSourceConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

type MatchingWorkflowIntermediateSourceConfigurationOutput struct{ *pulumi.OutputState }

func (MatchingWorkflowIntermediateSourceConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MatchingWorkflowIntermediateSourceConfiguration)(nil)).Elem()
}

func (o MatchingWorkflowIntermediateSourceConfigurationOutput) ToMatchingWorkflowIntermediateSourceConfigurationOutput() MatchingWorkflowIntermediateSourceConfigurationOutput {
	return o
}

func (o MatchingWorkflowIntermediateSourceConfigurationOutput) ToMatchingWorkflowIntermediateSourceConfigurationOutputWithContext(ctx context.Context) MatchingWorkflowIntermediateSourceConfigurationOutput {
	return o
}

func (o MatchingWorkflowIntermediateSourceConfigurationOutput) ToMatchingWorkflowIntermediateSourceConfigurationPtrOutput() MatchingWorkflowIntermediateSourceConfigurationPtrOutput {
	return o.ToMatchingWorkflowIntermediateSourceConfigurationPtrOutputWithContext(context.Background())
}

func (o MatchingWorkflowIntermediateSourceConfigurationOutput) ToMatchingWorkflowIntermediateSourceConfigurationPtrOutputWithContext(ctx context.Context) MatchingWorkflowIntermediateSourceConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MatchingWorkflowIntermediateSourceConfiguration) *MatchingWorkflowIntermediateSourceConfiguration {
		return &v
	}).(MatchingWorkflowIntermediateSourceConfigurationPtrOutput)
}

func (o MatchingWorkflowIntermediateSourceConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[MatchingWorkflowIntermediateSourceConfiguration] {
	return pulumix.Output[MatchingWorkflowIntermediateSourceConfiguration]{
		OutputState: o.OutputState,
	}
}

// The s3 path that would be used to stage the intermediate data being generated during workflow execution.
func (o MatchingWorkflowIntermediateSourceConfigurationOutput) IntermediateS3Path() pulumi.StringOutput {
	return o.ApplyT(func(v MatchingWorkflowIntermediateSourceConfiguration) string { return v.IntermediateS3Path }).(pulumi.StringOutput)
}

type MatchingWorkflowIntermediateSourceConfigurationPtrOutput struct{ *pulumi.OutputState }

func (MatchingWorkflowIntermediateSourceConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MatchingWorkflowIntermediateSourceConfiguration)(nil)).Elem()
}

func (o MatchingWorkflowIntermediateSourceConfigurationPtrOutput) ToMatchingWorkflowIntermediateSourceConfigurationPtrOutput() MatchingWorkflowIntermediateSourceConfigurationPtrOutput {
	return o
}

func (o MatchingWorkflowIntermediateSourceConfigurationPtrOutput) ToMatchingWorkflowIntermediateSourceConfigurationPtrOutputWithContext(ctx context.Context) MatchingWorkflowIntermediateSourceConfigurationPtrOutput {
	return o
}

func (o MatchingWorkflowIntermediateSourceConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MatchingWorkflowIntermediateSourceConfiguration] {
	return pulumix.Output[*MatchingWorkflowIntermediateSourceConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o MatchingWorkflowIntermediateSourceConfigurationPtrOutput) Elem() MatchingWorkflowIntermediateSourceConfigurationOutput {
	return o.ApplyT(func(v *MatchingWorkflowIntermediateSourceConfiguration) MatchingWorkflowIntermediateSourceConfiguration {
		if v != nil {
			return *v
		}
		var ret MatchingWorkflowIntermediateSourceConfiguration
		return ret
	}).(MatchingWorkflowIntermediateSourceConfigurationOutput)
}

// The s3 path that would be used to stage the intermediate data being generated during workflow execution.
func (o MatchingWorkflowIntermediateSourceConfigurationPtrOutput) IntermediateS3Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MatchingWorkflowIntermediateSourceConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.IntermediateS3Path
	}).(pulumi.StringPtrOutput)
}

type MatchingWorkflowOutputAttribute struct {
	Hashed *bool  `pulumi:"hashed"`
	Name   string `pulumi:"name"`
}

// MatchingWorkflowOutputAttributeInput is an input type that accepts MatchingWorkflowOutputAttributeArgs and MatchingWorkflowOutputAttributeOutput values.
// You can construct a concrete instance of `MatchingWorkflowOutputAttributeInput` via:
//
//	MatchingWorkflowOutputAttributeArgs{...}
type MatchingWorkflowOutputAttributeInput interface {
	pulumi.Input

	ToMatchingWorkflowOutputAttributeOutput() MatchingWorkflowOutputAttributeOutput
	ToMatchingWorkflowOutputAttributeOutputWithContext(context.Context) MatchingWorkflowOutputAttributeOutput
}

type MatchingWorkflowOutputAttributeArgs struct {
	Hashed pulumi.BoolPtrInput `pulumi:"hashed"`
	Name   pulumi.StringInput  `pulumi:"name"`
}

func (MatchingWorkflowOutputAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MatchingWorkflowOutputAttribute)(nil)).Elem()
}

func (i MatchingWorkflowOutputAttributeArgs) ToMatchingWorkflowOutputAttributeOutput() MatchingWorkflowOutputAttributeOutput {
	return i.ToMatchingWorkflowOutputAttributeOutputWithContext(context.Background())
}

func (i MatchingWorkflowOutputAttributeArgs) ToMatchingWorkflowOutputAttributeOutputWithContext(ctx context.Context) MatchingWorkflowOutputAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MatchingWorkflowOutputAttributeOutput)
}

func (i MatchingWorkflowOutputAttributeArgs) ToOutput(ctx context.Context) pulumix.Output[MatchingWorkflowOutputAttribute] {
	return pulumix.Output[MatchingWorkflowOutputAttribute]{
		OutputState: i.ToMatchingWorkflowOutputAttributeOutputWithContext(ctx).OutputState,
	}
}

// MatchingWorkflowOutputAttributeArrayInput is an input type that accepts MatchingWorkflowOutputAttributeArray and MatchingWorkflowOutputAttributeArrayOutput values.
// You can construct a concrete instance of `MatchingWorkflowOutputAttributeArrayInput` via:
//
//	MatchingWorkflowOutputAttributeArray{ MatchingWorkflowOutputAttributeArgs{...} }
type MatchingWorkflowOutputAttributeArrayInput interface {
	pulumi.Input

	ToMatchingWorkflowOutputAttributeArrayOutput() MatchingWorkflowOutputAttributeArrayOutput
	ToMatchingWorkflowOutputAttributeArrayOutputWithContext(context.Context) MatchingWorkflowOutputAttributeArrayOutput
}

type MatchingWorkflowOutputAttributeArray []MatchingWorkflowOutputAttributeInput

func (MatchingWorkflowOutputAttributeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MatchingWorkflowOutputAttribute)(nil)).Elem()
}

func (i MatchingWorkflowOutputAttributeArray) ToMatchingWorkflowOutputAttributeArrayOutput() MatchingWorkflowOutputAttributeArrayOutput {
	return i.ToMatchingWorkflowOutputAttributeArrayOutputWithContext(context.Background())
}

func (i MatchingWorkflowOutputAttributeArray) ToMatchingWorkflowOutputAttributeArrayOutputWithContext(ctx context.Context) MatchingWorkflowOutputAttributeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MatchingWorkflowOutputAttributeArrayOutput)
}

func (i MatchingWorkflowOutputAttributeArray) ToOutput(ctx context.Context) pulumix.Output[[]MatchingWorkflowOutputAttribute] {
	return pulumix.Output[[]MatchingWorkflowOutputAttribute]{
		OutputState: i.ToMatchingWorkflowOutputAttributeArrayOutputWithContext(ctx).OutputState,
	}
}

type MatchingWorkflowOutputAttributeOutput struct{ *pulumi.OutputState }

func (MatchingWorkflowOutputAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MatchingWorkflowOutputAttribute)(nil)).Elem()
}

func (o MatchingWorkflowOutputAttributeOutput) ToMatchingWorkflowOutputAttributeOutput() MatchingWorkflowOutputAttributeOutput {
	return o
}

func (o MatchingWorkflowOutputAttributeOutput) ToMatchingWorkflowOutputAttributeOutputWithContext(ctx context.Context) MatchingWorkflowOutputAttributeOutput {
	return o
}

func (o MatchingWorkflowOutputAttributeOutput) ToOutput(ctx context.Context) pulumix.Output[MatchingWorkflowOutputAttribute] {
	return pulumix.Output[MatchingWorkflowOutputAttribute]{
		OutputState: o.OutputState,
	}
}

func (o MatchingWorkflowOutputAttributeOutput) Hashed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MatchingWorkflowOutputAttribute) *bool { return v.Hashed }).(pulumi.BoolPtrOutput)
}

func (o MatchingWorkflowOutputAttributeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MatchingWorkflowOutputAttribute) string { return v.Name }).(pulumi.StringOutput)
}

type MatchingWorkflowOutputAttributeArrayOutput struct{ *pulumi.OutputState }

func (MatchingWorkflowOutputAttributeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MatchingWorkflowOutputAttribute)(nil)).Elem()
}

func (o MatchingWorkflowOutputAttributeArrayOutput) ToMatchingWorkflowOutputAttributeArrayOutput() MatchingWorkflowOutputAttributeArrayOutput {
	return o
}

func (o MatchingWorkflowOutputAttributeArrayOutput) ToMatchingWorkflowOutputAttributeArrayOutputWithContext(ctx context.Context) MatchingWorkflowOutputAttributeArrayOutput {
	return o
}

func (o MatchingWorkflowOutputAttributeArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]MatchingWorkflowOutputAttribute] {
	return pulumix.Output[[]MatchingWorkflowOutputAttribute]{
		OutputState: o.OutputState,
	}
}

func (o MatchingWorkflowOutputAttributeArrayOutput) Index(i pulumi.IntInput) MatchingWorkflowOutputAttributeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MatchingWorkflowOutputAttribute {
		return vs[0].([]MatchingWorkflowOutputAttribute)[vs[1].(int)]
	}).(MatchingWorkflowOutputAttributeOutput)
}

type MatchingWorkflowOutputSource struct {
	ApplyNormalization *bool                             `pulumi:"applyNormalization"`
	KmsArn             *string                           `pulumi:"kmsArn"`
	Output             []MatchingWorkflowOutputAttribute `pulumi:"output"`
	// The S3 path to which Entity Resolution will write the output table
	OutputS3Path string `pulumi:"outputS3Path"`
}

// MatchingWorkflowOutputSourceInput is an input type that accepts MatchingWorkflowOutputSourceArgs and MatchingWorkflowOutputSourceOutput values.
// You can construct a concrete instance of `MatchingWorkflowOutputSourceInput` via:
//
//	MatchingWorkflowOutputSourceArgs{...}
type MatchingWorkflowOutputSourceInput interface {
	pulumi.Input

	ToMatchingWorkflowOutputSourceOutput() MatchingWorkflowOutputSourceOutput
	ToMatchingWorkflowOutputSourceOutputWithContext(context.Context) MatchingWorkflowOutputSourceOutput
}

type MatchingWorkflowOutputSourceArgs struct {
	ApplyNormalization pulumi.BoolPtrInput                       `pulumi:"applyNormalization"`
	KmsArn             pulumi.StringPtrInput                     `pulumi:"kmsArn"`
	Output             MatchingWorkflowOutputAttributeArrayInput `pulumi:"output"`
	// The S3 path to which Entity Resolution will write the output table
	OutputS3Path pulumi.StringInput `pulumi:"outputS3Path"`
}

func (MatchingWorkflowOutputSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MatchingWorkflowOutputSource)(nil)).Elem()
}

func (i MatchingWorkflowOutputSourceArgs) ToMatchingWorkflowOutputSourceOutput() MatchingWorkflowOutputSourceOutput {
	return i.ToMatchingWorkflowOutputSourceOutputWithContext(context.Background())
}

func (i MatchingWorkflowOutputSourceArgs) ToMatchingWorkflowOutputSourceOutputWithContext(ctx context.Context) MatchingWorkflowOutputSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MatchingWorkflowOutputSourceOutput)
}

func (i MatchingWorkflowOutputSourceArgs) ToOutput(ctx context.Context) pulumix.Output[MatchingWorkflowOutputSource] {
	return pulumix.Output[MatchingWorkflowOutputSource]{
		OutputState: i.ToMatchingWorkflowOutputSourceOutputWithContext(ctx).OutputState,
	}
}

// MatchingWorkflowOutputSourceArrayInput is an input type that accepts MatchingWorkflowOutputSourceArray and MatchingWorkflowOutputSourceArrayOutput values.
// You can construct a concrete instance of `MatchingWorkflowOutputSourceArrayInput` via:
//
//	MatchingWorkflowOutputSourceArray{ MatchingWorkflowOutputSourceArgs{...} }
type MatchingWorkflowOutputSourceArrayInput interface {
	pulumi.Input

	ToMatchingWorkflowOutputSourceArrayOutput() MatchingWorkflowOutputSourceArrayOutput
	ToMatchingWorkflowOutputSourceArrayOutputWithContext(context.Context) MatchingWorkflowOutputSourceArrayOutput
}

type MatchingWorkflowOutputSourceArray []MatchingWorkflowOutputSourceInput

func (MatchingWorkflowOutputSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MatchingWorkflowOutputSource)(nil)).Elem()
}

func (i MatchingWorkflowOutputSourceArray) ToMatchingWorkflowOutputSourceArrayOutput() MatchingWorkflowOutputSourceArrayOutput {
	return i.ToMatchingWorkflowOutputSourceArrayOutputWithContext(context.Background())
}

func (i MatchingWorkflowOutputSourceArray) ToMatchingWorkflowOutputSourceArrayOutputWithContext(ctx context.Context) MatchingWorkflowOutputSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MatchingWorkflowOutputSourceArrayOutput)
}

func (i MatchingWorkflowOutputSourceArray) ToOutput(ctx context.Context) pulumix.Output[[]MatchingWorkflowOutputSource] {
	return pulumix.Output[[]MatchingWorkflowOutputSource]{
		OutputState: i.ToMatchingWorkflowOutputSourceArrayOutputWithContext(ctx).OutputState,
	}
}

type MatchingWorkflowOutputSourceOutput struct{ *pulumi.OutputState }

func (MatchingWorkflowOutputSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MatchingWorkflowOutputSource)(nil)).Elem()
}

func (o MatchingWorkflowOutputSourceOutput) ToMatchingWorkflowOutputSourceOutput() MatchingWorkflowOutputSourceOutput {
	return o
}

func (o MatchingWorkflowOutputSourceOutput) ToMatchingWorkflowOutputSourceOutputWithContext(ctx context.Context) MatchingWorkflowOutputSourceOutput {
	return o
}

func (o MatchingWorkflowOutputSourceOutput) ToOutput(ctx context.Context) pulumix.Output[MatchingWorkflowOutputSource] {
	return pulumix.Output[MatchingWorkflowOutputSource]{
		OutputState: o.OutputState,
	}
}

func (o MatchingWorkflowOutputSourceOutput) ApplyNormalization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MatchingWorkflowOutputSource) *bool { return v.ApplyNormalization }).(pulumi.BoolPtrOutput)
}

func (o MatchingWorkflowOutputSourceOutput) KmsArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MatchingWorkflowOutputSource) *string { return v.KmsArn }).(pulumi.StringPtrOutput)
}

func (o MatchingWorkflowOutputSourceOutput) Output() MatchingWorkflowOutputAttributeArrayOutput {
	return o.ApplyT(func(v MatchingWorkflowOutputSource) []MatchingWorkflowOutputAttribute { return v.Output }).(MatchingWorkflowOutputAttributeArrayOutput)
}

// The S3 path to which Entity Resolution will write the output table
func (o MatchingWorkflowOutputSourceOutput) OutputS3Path() pulumi.StringOutput {
	return o.ApplyT(func(v MatchingWorkflowOutputSource) string { return v.OutputS3Path }).(pulumi.StringOutput)
}

type MatchingWorkflowOutputSourceArrayOutput struct{ *pulumi.OutputState }

func (MatchingWorkflowOutputSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MatchingWorkflowOutputSource)(nil)).Elem()
}

func (o MatchingWorkflowOutputSourceArrayOutput) ToMatchingWorkflowOutputSourceArrayOutput() MatchingWorkflowOutputSourceArrayOutput {
	return o
}

func (o MatchingWorkflowOutputSourceArrayOutput) ToMatchingWorkflowOutputSourceArrayOutputWithContext(ctx context.Context) MatchingWorkflowOutputSourceArrayOutput {
	return o
}

func (o MatchingWorkflowOutputSourceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]MatchingWorkflowOutputSource] {
	return pulumix.Output[[]MatchingWorkflowOutputSource]{
		OutputState: o.OutputState,
	}
}

func (o MatchingWorkflowOutputSourceArrayOutput) Index(i pulumi.IntInput) MatchingWorkflowOutputSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MatchingWorkflowOutputSource {
		return vs[0].([]MatchingWorkflowOutputSource)[vs[1].(int)]
	}).(MatchingWorkflowOutputSourceOutput)
}

type MatchingWorkflowProviderProperties struct {
	IntermediateSourceConfiguration *MatchingWorkflowIntermediateSourceConfiguration `pulumi:"intermediateSourceConfiguration"`
	// Additional Provider configuration that would be required for the provider service. The Configuration must be in JSON string format
	ProviderConfiguration interface{} `pulumi:"providerConfiguration"`
	// Arn of the Provider service being used.
	ProviderServiceArn string `pulumi:"providerServiceArn"`
}

// MatchingWorkflowProviderPropertiesInput is an input type that accepts MatchingWorkflowProviderPropertiesArgs and MatchingWorkflowProviderPropertiesOutput values.
// You can construct a concrete instance of `MatchingWorkflowProviderPropertiesInput` via:
//
//	MatchingWorkflowProviderPropertiesArgs{...}
type MatchingWorkflowProviderPropertiesInput interface {
	pulumi.Input

	ToMatchingWorkflowProviderPropertiesOutput() MatchingWorkflowProviderPropertiesOutput
	ToMatchingWorkflowProviderPropertiesOutputWithContext(context.Context) MatchingWorkflowProviderPropertiesOutput
}

type MatchingWorkflowProviderPropertiesArgs struct {
	IntermediateSourceConfiguration MatchingWorkflowIntermediateSourceConfigurationPtrInput `pulumi:"intermediateSourceConfiguration"`
	// Additional Provider configuration that would be required for the provider service. The Configuration must be in JSON string format
	ProviderConfiguration pulumi.Input `pulumi:"providerConfiguration"`
	// Arn of the Provider service being used.
	ProviderServiceArn pulumi.StringInput `pulumi:"providerServiceArn"`
}

func (MatchingWorkflowProviderPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MatchingWorkflowProviderProperties)(nil)).Elem()
}

func (i MatchingWorkflowProviderPropertiesArgs) ToMatchingWorkflowProviderPropertiesOutput() MatchingWorkflowProviderPropertiesOutput {
	return i.ToMatchingWorkflowProviderPropertiesOutputWithContext(context.Background())
}

func (i MatchingWorkflowProviderPropertiesArgs) ToMatchingWorkflowProviderPropertiesOutputWithContext(ctx context.Context) MatchingWorkflowProviderPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MatchingWorkflowProviderPropertiesOutput)
}

func (i MatchingWorkflowProviderPropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[MatchingWorkflowProviderProperties] {
	return pulumix.Output[MatchingWorkflowProviderProperties]{
		OutputState: i.ToMatchingWorkflowProviderPropertiesOutputWithContext(ctx).OutputState,
	}
}

func (i MatchingWorkflowProviderPropertiesArgs) ToMatchingWorkflowProviderPropertiesPtrOutput() MatchingWorkflowProviderPropertiesPtrOutput {
	return i.ToMatchingWorkflowProviderPropertiesPtrOutputWithContext(context.Background())
}

func (i MatchingWorkflowProviderPropertiesArgs) ToMatchingWorkflowProviderPropertiesPtrOutputWithContext(ctx context.Context) MatchingWorkflowProviderPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MatchingWorkflowProviderPropertiesOutput).ToMatchingWorkflowProviderPropertiesPtrOutputWithContext(ctx)
}

// MatchingWorkflowProviderPropertiesPtrInput is an input type that accepts MatchingWorkflowProviderPropertiesArgs, MatchingWorkflowProviderPropertiesPtr and MatchingWorkflowProviderPropertiesPtrOutput values.
// You can construct a concrete instance of `MatchingWorkflowProviderPropertiesPtrInput` via:
//
//	        MatchingWorkflowProviderPropertiesArgs{...}
//
//	or:
//
//	        nil
type MatchingWorkflowProviderPropertiesPtrInput interface {
	pulumi.Input

	ToMatchingWorkflowProviderPropertiesPtrOutput() MatchingWorkflowProviderPropertiesPtrOutput
	ToMatchingWorkflowProviderPropertiesPtrOutputWithContext(context.Context) MatchingWorkflowProviderPropertiesPtrOutput
}

type matchingWorkflowProviderPropertiesPtrType MatchingWorkflowProviderPropertiesArgs

func MatchingWorkflowProviderPropertiesPtr(v *MatchingWorkflowProviderPropertiesArgs) MatchingWorkflowProviderPropertiesPtrInput {
	return (*matchingWorkflowProviderPropertiesPtrType)(v)
}

func (*matchingWorkflowProviderPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MatchingWorkflowProviderProperties)(nil)).Elem()
}

func (i *matchingWorkflowProviderPropertiesPtrType) ToMatchingWorkflowProviderPropertiesPtrOutput() MatchingWorkflowProviderPropertiesPtrOutput {
	return i.ToMatchingWorkflowProviderPropertiesPtrOutputWithContext(context.Background())
}

func (i *matchingWorkflowProviderPropertiesPtrType) ToMatchingWorkflowProviderPropertiesPtrOutputWithContext(ctx context.Context) MatchingWorkflowProviderPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MatchingWorkflowProviderPropertiesPtrOutput)
}

func (i *matchingWorkflowProviderPropertiesPtrType) ToOutput(ctx context.Context) pulumix.Output[*MatchingWorkflowProviderProperties] {
	return pulumix.Output[*MatchingWorkflowProviderProperties]{
		OutputState: i.ToMatchingWorkflowProviderPropertiesPtrOutputWithContext(ctx).OutputState,
	}
}

type MatchingWorkflowProviderPropertiesOutput struct{ *pulumi.OutputState }

func (MatchingWorkflowProviderPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MatchingWorkflowProviderProperties)(nil)).Elem()
}

func (o MatchingWorkflowProviderPropertiesOutput) ToMatchingWorkflowProviderPropertiesOutput() MatchingWorkflowProviderPropertiesOutput {
	return o
}

func (o MatchingWorkflowProviderPropertiesOutput) ToMatchingWorkflowProviderPropertiesOutputWithContext(ctx context.Context) MatchingWorkflowProviderPropertiesOutput {
	return o
}

func (o MatchingWorkflowProviderPropertiesOutput) ToMatchingWorkflowProviderPropertiesPtrOutput() MatchingWorkflowProviderPropertiesPtrOutput {
	return o.ToMatchingWorkflowProviderPropertiesPtrOutputWithContext(context.Background())
}

func (o MatchingWorkflowProviderPropertiesOutput) ToMatchingWorkflowProviderPropertiesPtrOutputWithContext(ctx context.Context) MatchingWorkflowProviderPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MatchingWorkflowProviderProperties) *MatchingWorkflowProviderProperties {
		return &v
	}).(MatchingWorkflowProviderPropertiesPtrOutput)
}

func (o MatchingWorkflowProviderPropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[MatchingWorkflowProviderProperties] {
	return pulumix.Output[MatchingWorkflowProviderProperties]{
		OutputState: o.OutputState,
	}
}

func (o MatchingWorkflowProviderPropertiesOutput) IntermediateSourceConfiguration() MatchingWorkflowIntermediateSourceConfigurationPtrOutput {
	return o.ApplyT(func(v MatchingWorkflowProviderProperties) *MatchingWorkflowIntermediateSourceConfiguration {
		return v.IntermediateSourceConfiguration
	}).(MatchingWorkflowIntermediateSourceConfigurationPtrOutput)
}

// Additional Provider configuration that would be required for the provider service. The Configuration must be in JSON string format
func (o MatchingWorkflowProviderPropertiesOutput) ProviderConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v MatchingWorkflowProviderProperties) interface{} { return v.ProviderConfiguration }).(pulumi.AnyOutput)
}

// Arn of the Provider service being used.
func (o MatchingWorkflowProviderPropertiesOutput) ProviderServiceArn() pulumi.StringOutput {
	return o.ApplyT(func(v MatchingWorkflowProviderProperties) string { return v.ProviderServiceArn }).(pulumi.StringOutput)
}

type MatchingWorkflowProviderPropertiesPtrOutput struct{ *pulumi.OutputState }

func (MatchingWorkflowProviderPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MatchingWorkflowProviderProperties)(nil)).Elem()
}

func (o MatchingWorkflowProviderPropertiesPtrOutput) ToMatchingWorkflowProviderPropertiesPtrOutput() MatchingWorkflowProviderPropertiesPtrOutput {
	return o
}

func (o MatchingWorkflowProviderPropertiesPtrOutput) ToMatchingWorkflowProviderPropertiesPtrOutputWithContext(ctx context.Context) MatchingWorkflowProviderPropertiesPtrOutput {
	return o
}

func (o MatchingWorkflowProviderPropertiesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MatchingWorkflowProviderProperties] {
	return pulumix.Output[*MatchingWorkflowProviderProperties]{
		OutputState: o.OutputState,
	}
}

func (o MatchingWorkflowProviderPropertiesPtrOutput) Elem() MatchingWorkflowProviderPropertiesOutput {
	return o.ApplyT(func(v *MatchingWorkflowProviderProperties) MatchingWorkflowProviderProperties {
		if v != nil {
			return *v
		}
		var ret MatchingWorkflowProviderProperties
		return ret
	}).(MatchingWorkflowProviderPropertiesOutput)
}

func (o MatchingWorkflowProviderPropertiesPtrOutput) IntermediateSourceConfiguration() MatchingWorkflowIntermediateSourceConfigurationPtrOutput {
	return o.ApplyT(func(v *MatchingWorkflowProviderProperties) *MatchingWorkflowIntermediateSourceConfiguration {
		if v == nil {
			return nil
		}
		return v.IntermediateSourceConfiguration
	}).(MatchingWorkflowIntermediateSourceConfigurationPtrOutput)
}

// Additional Provider configuration that would be required for the provider service. The Configuration must be in JSON string format
func (o MatchingWorkflowProviderPropertiesPtrOutput) ProviderConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v *MatchingWorkflowProviderProperties) interface{} {
		if v == nil {
			return nil
		}
		return v.ProviderConfiguration
	}).(pulumi.AnyOutput)
}

// Arn of the Provider service being used.
func (o MatchingWorkflowProviderPropertiesPtrOutput) ProviderServiceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MatchingWorkflowProviderProperties) *string {
		if v == nil {
			return nil
		}
		return &v.ProviderServiceArn
	}).(pulumi.StringPtrOutput)
}

type MatchingWorkflowResolutionTechniques struct {
	ProviderProperties  *MatchingWorkflowProviderProperties                 `pulumi:"providerProperties"`
	ResolutionType      *MatchingWorkflowResolutionTechniquesResolutionType `pulumi:"resolutionType"`
	RuleBasedProperties *MatchingWorkflowRuleBasedProperties                `pulumi:"ruleBasedProperties"`
}

// MatchingWorkflowResolutionTechniquesInput is an input type that accepts MatchingWorkflowResolutionTechniquesArgs and MatchingWorkflowResolutionTechniquesOutput values.
// You can construct a concrete instance of `MatchingWorkflowResolutionTechniquesInput` via:
//
//	MatchingWorkflowResolutionTechniquesArgs{...}
type MatchingWorkflowResolutionTechniquesInput interface {
	pulumi.Input

	ToMatchingWorkflowResolutionTechniquesOutput() MatchingWorkflowResolutionTechniquesOutput
	ToMatchingWorkflowResolutionTechniquesOutputWithContext(context.Context) MatchingWorkflowResolutionTechniquesOutput
}

type MatchingWorkflowResolutionTechniquesArgs struct {
	ProviderProperties  MatchingWorkflowProviderPropertiesPtrInput                 `pulumi:"providerProperties"`
	ResolutionType      MatchingWorkflowResolutionTechniquesResolutionTypePtrInput `pulumi:"resolutionType"`
	RuleBasedProperties MatchingWorkflowRuleBasedPropertiesPtrInput                `pulumi:"ruleBasedProperties"`
}

func (MatchingWorkflowResolutionTechniquesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MatchingWorkflowResolutionTechniques)(nil)).Elem()
}

func (i MatchingWorkflowResolutionTechniquesArgs) ToMatchingWorkflowResolutionTechniquesOutput() MatchingWorkflowResolutionTechniquesOutput {
	return i.ToMatchingWorkflowResolutionTechniquesOutputWithContext(context.Background())
}

func (i MatchingWorkflowResolutionTechniquesArgs) ToMatchingWorkflowResolutionTechniquesOutputWithContext(ctx context.Context) MatchingWorkflowResolutionTechniquesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MatchingWorkflowResolutionTechniquesOutput)
}

func (i MatchingWorkflowResolutionTechniquesArgs) ToOutput(ctx context.Context) pulumix.Output[MatchingWorkflowResolutionTechniques] {
	return pulumix.Output[MatchingWorkflowResolutionTechniques]{
		OutputState: i.ToMatchingWorkflowResolutionTechniquesOutputWithContext(ctx).OutputState,
	}
}

type MatchingWorkflowResolutionTechniquesOutput struct{ *pulumi.OutputState }

func (MatchingWorkflowResolutionTechniquesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MatchingWorkflowResolutionTechniques)(nil)).Elem()
}

func (o MatchingWorkflowResolutionTechniquesOutput) ToMatchingWorkflowResolutionTechniquesOutput() MatchingWorkflowResolutionTechniquesOutput {
	return o
}

func (o MatchingWorkflowResolutionTechniquesOutput) ToMatchingWorkflowResolutionTechniquesOutputWithContext(ctx context.Context) MatchingWorkflowResolutionTechniquesOutput {
	return o
}

func (o MatchingWorkflowResolutionTechniquesOutput) ToOutput(ctx context.Context) pulumix.Output[MatchingWorkflowResolutionTechniques] {
	return pulumix.Output[MatchingWorkflowResolutionTechniques]{
		OutputState: o.OutputState,
	}
}

func (o MatchingWorkflowResolutionTechniquesOutput) ProviderProperties() MatchingWorkflowProviderPropertiesPtrOutput {
	return o.ApplyT(func(v MatchingWorkflowResolutionTechniques) *MatchingWorkflowProviderProperties {
		return v.ProviderProperties
	}).(MatchingWorkflowProviderPropertiesPtrOutput)
}

func (o MatchingWorkflowResolutionTechniquesOutput) ResolutionType() MatchingWorkflowResolutionTechniquesResolutionTypePtrOutput {
	return o.ApplyT(func(v MatchingWorkflowResolutionTechniques) *MatchingWorkflowResolutionTechniquesResolutionType {
		return v.ResolutionType
	}).(MatchingWorkflowResolutionTechniquesResolutionTypePtrOutput)
}

func (o MatchingWorkflowResolutionTechniquesOutput) RuleBasedProperties() MatchingWorkflowRuleBasedPropertiesPtrOutput {
	return o.ApplyT(func(v MatchingWorkflowResolutionTechniques) *MatchingWorkflowRuleBasedProperties {
		return v.RuleBasedProperties
	}).(MatchingWorkflowRuleBasedPropertiesPtrOutput)
}

type MatchingWorkflowResolutionTechniquesPtrOutput struct{ *pulumi.OutputState }

func (MatchingWorkflowResolutionTechniquesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MatchingWorkflowResolutionTechniques)(nil)).Elem()
}

func (o MatchingWorkflowResolutionTechniquesPtrOutput) ToMatchingWorkflowResolutionTechniquesPtrOutput() MatchingWorkflowResolutionTechniquesPtrOutput {
	return o
}

func (o MatchingWorkflowResolutionTechniquesPtrOutput) ToMatchingWorkflowResolutionTechniquesPtrOutputWithContext(ctx context.Context) MatchingWorkflowResolutionTechniquesPtrOutput {
	return o
}

func (o MatchingWorkflowResolutionTechniquesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MatchingWorkflowResolutionTechniques] {
	return pulumix.Output[*MatchingWorkflowResolutionTechniques]{
		OutputState: o.OutputState,
	}
}

func (o MatchingWorkflowResolutionTechniquesPtrOutput) Elem() MatchingWorkflowResolutionTechniquesOutput {
	return o.ApplyT(func(v *MatchingWorkflowResolutionTechniques) MatchingWorkflowResolutionTechniques {
		if v != nil {
			return *v
		}
		var ret MatchingWorkflowResolutionTechniques
		return ret
	}).(MatchingWorkflowResolutionTechniquesOutput)
}

func (o MatchingWorkflowResolutionTechniquesPtrOutput) ProviderProperties() MatchingWorkflowProviderPropertiesPtrOutput {
	return o.ApplyT(func(v *MatchingWorkflowResolutionTechniques) *MatchingWorkflowProviderProperties {
		if v == nil {
			return nil
		}
		return v.ProviderProperties
	}).(MatchingWorkflowProviderPropertiesPtrOutput)
}

func (o MatchingWorkflowResolutionTechniquesPtrOutput) ResolutionType() MatchingWorkflowResolutionTechniquesResolutionTypePtrOutput {
	return o.ApplyT(func(v *MatchingWorkflowResolutionTechniques) *MatchingWorkflowResolutionTechniquesResolutionType {
		if v == nil {
			return nil
		}
		return v.ResolutionType
	}).(MatchingWorkflowResolutionTechniquesResolutionTypePtrOutput)
}

func (o MatchingWorkflowResolutionTechniquesPtrOutput) RuleBasedProperties() MatchingWorkflowRuleBasedPropertiesPtrOutput {
	return o.ApplyT(func(v *MatchingWorkflowResolutionTechniques) *MatchingWorkflowRuleBasedProperties {
		if v == nil {
			return nil
		}
		return v.RuleBasedProperties
	}).(MatchingWorkflowRuleBasedPropertiesPtrOutput)
}

type MatchingWorkflowRule struct {
	MatchingKeys []string `pulumi:"matchingKeys"`
	RuleName     string   `pulumi:"ruleName"`
}

// MatchingWorkflowRuleInput is an input type that accepts MatchingWorkflowRuleArgs and MatchingWorkflowRuleOutput values.
// You can construct a concrete instance of `MatchingWorkflowRuleInput` via:
//
//	MatchingWorkflowRuleArgs{...}
type MatchingWorkflowRuleInput interface {
	pulumi.Input

	ToMatchingWorkflowRuleOutput() MatchingWorkflowRuleOutput
	ToMatchingWorkflowRuleOutputWithContext(context.Context) MatchingWorkflowRuleOutput
}

type MatchingWorkflowRuleArgs struct {
	MatchingKeys pulumi.StringArrayInput `pulumi:"matchingKeys"`
	RuleName     pulumi.StringInput      `pulumi:"ruleName"`
}

func (MatchingWorkflowRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MatchingWorkflowRule)(nil)).Elem()
}

func (i MatchingWorkflowRuleArgs) ToMatchingWorkflowRuleOutput() MatchingWorkflowRuleOutput {
	return i.ToMatchingWorkflowRuleOutputWithContext(context.Background())
}

func (i MatchingWorkflowRuleArgs) ToMatchingWorkflowRuleOutputWithContext(ctx context.Context) MatchingWorkflowRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MatchingWorkflowRuleOutput)
}

func (i MatchingWorkflowRuleArgs) ToOutput(ctx context.Context) pulumix.Output[MatchingWorkflowRule] {
	return pulumix.Output[MatchingWorkflowRule]{
		OutputState: i.ToMatchingWorkflowRuleOutputWithContext(ctx).OutputState,
	}
}

// MatchingWorkflowRuleArrayInput is an input type that accepts MatchingWorkflowRuleArray and MatchingWorkflowRuleArrayOutput values.
// You can construct a concrete instance of `MatchingWorkflowRuleArrayInput` via:
//
//	MatchingWorkflowRuleArray{ MatchingWorkflowRuleArgs{...} }
type MatchingWorkflowRuleArrayInput interface {
	pulumi.Input

	ToMatchingWorkflowRuleArrayOutput() MatchingWorkflowRuleArrayOutput
	ToMatchingWorkflowRuleArrayOutputWithContext(context.Context) MatchingWorkflowRuleArrayOutput
}

type MatchingWorkflowRuleArray []MatchingWorkflowRuleInput

func (MatchingWorkflowRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MatchingWorkflowRule)(nil)).Elem()
}

func (i MatchingWorkflowRuleArray) ToMatchingWorkflowRuleArrayOutput() MatchingWorkflowRuleArrayOutput {
	return i.ToMatchingWorkflowRuleArrayOutputWithContext(context.Background())
}

func (i MatchingWorkflowRuleArray) ToMatchingWorkflowRuleArrayOutputWithContext(ctx context.Context) MatchingWorkflowRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MatchingWorkflowRuleArrayOutput)
}

func (i MatchingWorkflowRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]MatchingWorkflowRule] {
	return pulumix.Output[[]MatchingWorkflowRule]{
		OutputState: i.ToMatchingWorkflowRuleArrayOutputWithContext(ctx).OutputState,
	}
}

type MatchingWorkflowRuleOutput struct{ *pulumi.OutputState }

func (MatchingWorkflowRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MatchingWorkflowRule)(nil)).Elem()
}

func (o MatchingWorkflowRuleOutput) ToMatchingWorkflowRuleOutput() MatchingWorkflowRuleOutput {
	return o
}

func (o MatchingWorkflowRuleOutput) ToMatchingWorkflowRuleOutputWithContext(ctx context.Context) MatchingWorkflowRuleOutput {
	return o
}

func (o MatchingWorkflowRuleOutput) ToOutput(ctx context.Context) pulumix.Output[MatchingWorkflowRule] {
	return pulumix.Output[MatchingWorkflowRule]{
		OutputState: o.OutputState,
	}
}

func (o MatchingWorkflowRuleOutput) MatchingKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MatchingWorkflowRule) []string { return v.MatchingKeys }).(pulumi.StringArrayOutput)
}

func (o MatchingWorkflowRuleOutput) RuleName() pulumi.StringOutput {
	return o.ApplyT(func(v MatchingWorkflowRule) string { return v.RuleName }).(pulumi.StringOutput)
}

type MatchingWorkflowRuleArrayOutput struct{ *pulumi.OutputState }

func (MatchingWorkflowRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MatchingWorkflowRule)(nil)).Elem()
}

func (o MatchingWorkflowRuleArrayOutput) ToMatchingWorkflowRuleArrayOutput() MatchingWorkflowRuleArrayOutput {
	return o
}

func (o MatchingWorkflowRuleArrayOutput) ToMatchingWorkflowRuleArrayOutputWithContext(ctx context.Context) MatchingWorkflowRuleArrayOutput {
	return o
}

func (o MatchingWorkflowRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]MatchingWorkflowRule] {
	return pulumix.Output[[]MatchingWorkflowRule]{
		OutputState: o.OutputState,
	}
}

func (o MatchingWorkflowRuleArrayOutput) Index(i pulumi.IntInput) MatchingWorkflowRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MatchingWorkflowRule {
		return vs[0].([]MatchingWorkflowRule)[vs[1].(int)]
	}).(MatchingWorkflowRuleOutput)
}

type MatchingWorkflowRuleBasedProperties struct {
	AttributeMatchingModel MatchingWorkflowRuleBasedPropertiesAttributeMatchingModel `pulumi:"attributeMatchingModel"`
	Rules                  []MatchingWorkflowRule                                    `pulumi:"rules"`
}

// MatchingWorkflowRuleBasedPropertiesInput is an input type that accepts MatchingWorkflowRuleBasedPropertiesArgs and MatchingWorkflowRuleBasedPropertiesOutput values.
// You can construct a concrete instance of `MatchingWorkflowRuleBasedPropertiesInput` via:
//
//	MatchingWorkflowRuleBasedPropertiesArgs{...}
type MatchingWorkflowRuleBasedPropertiesInput interface {
	pulumi.Input

	ToMatchingWorkflowRuleBasedPropertiesOutput() MatchingWorkflowRuleBasedPropertiesOutput
	ToMatchingWorkflowRuleBasedPropertiesOutputWithContext(context.Context) MatchingWorkflowRuleBasedPropertiesOutput
}

type MatchingWorkflowRuleBasedPropertiesArgs struct {
	AttributeMatchingModel MatchingWorkflowRuleBasedPropertiesAttributeMatchingModelInput `pulumi:"attributeMatchingModel"`
	Rules                  MatchingWorkflowRuleArrayInput                                 `pulumi:"rules"`
}

func (MatchingWorkflowRuleBasedPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MatchingWorkflowRuleBasedProperties)(nil)).Elem()
}

func (i MatchingWorkflowRuleBasedPropertiesArgs) ToMatchingWorkflowRuleBasedPropertiesOutput() MatchingWorkflowRuleBasedPropertiesOutput {
	return i.ToMatchingWorkflowRuleBasedPropertiesOutputWithContext(context.Background())
}

func (i MatchingWorkflowRuleBasedPropertiesArgs) ToMatchingWorkflowRuleBasedPropertiesOutputWithContext(ctx context.Context) MatchingWorkflowRuleBasedPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MatchingWorkflowRuleBasedPropertiesOutput)
}

func (i MatchingWorkflowRuleBasedPropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[MatchingWorkflowRuleBasedProperties] {
	return pulumix.Output[MatchingWorkflowRuleBasedProperties]{
		OutputState: i.ToMatchingWorkflowRuleBasedPropertiesOutputWithContext(ctx).OutputState,
	}
}

func (i MatchingWorkflowRuleBasedPropertiesArgs) ToMatchingWorkflowRuleBasedPropertiesPtrOutput() MatchingWorkflowRuleBasedPropertiesPtrOutput {
	return i.ToMatchingWorkflowRuleBasedPropertiesPtrOutputWithContext(context.Background())
}

func (i MatchingWorkflowRuleBasedPropertiesArgs) ToMatchingWorkflowRuleBasedPropertiesPtrOutputWithContext(ctx context.Context) MatchingWorkflowRuleBasedPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MatchingWorkflowRuleBasedPropertiesOutput).ToMatchingWorkflowRuleBasedPropertiesPtrOutputWithContext(ctx)
}

// MatchingWorkflowRuleBasedPropertiesPtrInput is an input type that accepts MatchingWorkflowRuleBasedPropertiesArgs, MatchingWorkflowRuleBasedPropertiesPtr and MatchingWorkflowRuleBasedPropertiesPtrOutput values.
// You can construct a concrete instance of `MatchingWorkflowRuleBasedPropertiesPtrInput` via:
//
//	        MatchingWorkflowRuleBasedPropertiesArgs{...}
//
//	or:
//
//	        nil
type MatchingWorkflowRuleBasedPropertiesPtrInput interface {
	pulumi.Input

	ToMatchingWorkflowRuleBasedPropertiesPtrOutput() MatchingWorkflowRuleBasedPropertiesPtrOutput
	ToMatchingWorkflowRuleBasedPropertiesPtrOutputWithContext(context.Context) MatchingWorkflowRuleBasedPropertiesPtrOutput
}

type matchingWorkflowRuleBasedPropertiesPtrType MatchingWorkflowRuleBasedPropertiesArgs

func MatchingWorkflowRuleBasedPropertiesPtr(v *MatchingWorkflowRuleBasedPropertiesArgs) MatchingWorkflowRuleBasedPropertiesPtrInput {
	return (*matchingWorkflowRuleBasedPropertiesPtrType)(v)
}

func (*matchingWorkflowRuleBasedPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MatchingWorkflowRuleBasedProperties)(nil)).Elem()
}

func (i *matchingWorkflowRuleBasedPropertiesPtrType) ToMatchingWorkflowRuleBasedPropertiesPtrOutput() MatchingWorkflowRuleBasedPropertiesPtrOutput {
	return i.ToMatchingWorkflowRuleBasedPropertiesPtrOutputWithContext(context.Background())
}

func (i *matchingWorkflowRuleBasedPropertiesPtrType) ToMatchingWorkflowRuleBasedPropertiesPtrOutputWithContext(ctx context.Context) MatchingWorkflowRuleBasedPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MatchingWorkflowRuleBasedPropertiesPtrOutput)
}

func (i *matchingWorkflowRuleBasedPropertiesPtrType) ToOutput(ctx context.Context) pulumix.Output[*MatchingWorkflowRuleBasedProperties] {
	return pulumix.Output[*MatchingWorkflowRuleBasedProperties]{
		OutputState: i.ToMatchingWorkflowRuleBasedPropertiesPtrOutputWithContext(ctx).OutputState,
	}
}

type MatchingWorkflowRuleBasedPropertiesOutput struct{ *pulumi.OutputState }

func (MatchingWorkflowRuleBasedPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MatchingWorkflowRuleBasedProperties)(nil)).Elem()
}

func (o MatchingWorkflowRuleBasedPropertiesOutput) ToMatchingWorkflowRuleBasedPropertiesOutput() MatchingWorkflowRuleBasedPropertiesOutput {
	return o
}

func (o MatchingWorkflowRuleBasedPropertiesOutput) ToMatchingWorkflowRuleBasedPropertiesOutputWithContext(ctx context.Context) MatchingWorkflowRuleBasedPropertiesOutput {
	return o
}

func (o MatchingWorkflowRuleBasedPropertiesOutput) ToMatchingWorkflowRuleBasedPropertiesPtrOutput() MatchingWorkflowRuleBasedPropertiesPtrOutput {
	return o.ToMatchingWorkflowRuleBasedPropertiesPtrOutputWithContext(context.Background())
}

func (o MatchingWorkflowRuleBasedPropertiesOutput) ToMatchingWorkflowRuleBasedPropertiesPtrOutputWithContext(ctx context.Context) MatchingWorkflowRuleBasedPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MatchingWorkflowRuleBasedProperties) *MatchingWorkflowRuleBasedProperties {
		return &v
	}).(MatchingWorkflowRuleBasedPropertiesPtrOutput)
}

func (o MatchingWorkflowRuleBasedPropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[MatchingWorkflowRuleBasedProperties] {
	return pulumix.Output[MatchingWorkflowRuleBasedProperties]{
		OutputState: o.OutputState,
	}
}

func (o MatchingWorkflowRuleBasedPropertiesOutput) AttributeMatchingModel() MatchingWorkflowRuleBasedPropertiesAttributeMatchingModelOutput {
	return o.ApplyT(func(v MatchingWorkflowRuleBasedProperties) MatchingWorkflowRuleBasedPropertiesAttributeMatchingModel {
		return v.AttributeMatchingModel
	}).(MatchingWorkflowRuleBasedPropertiesAttributeMatchingModelOutput)
}

func (o MatchingWorkflowRuleBasedPropertiesOutput) Rules() MatchingWorkflowRuleArrayOutput {
	return o.ApplyT(func(v MatchingWorkflowRuleBasedProperties) []MatchingWorkflowRule { return v.Rules }).(MatchingWorkflowRuleArrayOutput)
}

type MatchingWorkflowRuleBasedPropertiesPtrOutput struct{ *pulumi.OutputState }

func (MatchingWorkflowRuleBasedPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MatchingWorkflowRuleBasedProperties)(nil)).Elem()
}

func (o MatchingWorkflowRuleBasedPropertiesPtrOutput) ToMatchingWorkflowRuleBasedPropertiesPtrOutput() MatchingWorkflowRuleBasedPropertiesPtrOutput {
	return o
}

func (o MatchingWorkflowRuleBasedPropertiesPtrOutput) ToMatchingWorkflowRuleBasedPropertiesPtrOutputWithContext(ctx context.Context) MatchingWorkflowRuleBasedPropertiesPtrOutput {
	return o
}

func (o MatchingWorkflowRuleBasedPropertiesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MatchingWorkflowRuleBasedProperties] {
	return pulumix.Output[*MatchingWorkflowRuleBasedProperties]{
		OutputState: o.OutputState,
	}
}

func (o MatchingWorkflowRuleBasedPropertiesPtrOutput) Elem() MatchingWorkflowRuleBasedPropertiesOutput {
	return o.ApplyT(func(v *MatchingWorkflowRuleBasedProperties) MatchingWorkflowRuleBasedProperties {
		if v != nil {
			return *v
		}
		var ret MatchingWorkflowRuleBasedProperties
		return ret
	}).(MatchingWorkflowRuleBasedPropertiesOutput)
}

func (o MatchingWorkflowRuleBasedPropertiesPtrOutput) AttributeMatchingModel() MatchingWorkflowRuleBasedPropertiesAttributeMatchingModelPtrOutput {
	return o.ApplyT(func(v *MatchingWorkflowRuleBasedProperties) *MatchingWorkflowRuleBasedPropertiesAttributeMatchingModel {
		if v == nil {
			return nil
		}
		return &v.AttributeMatchingModel
	}).(MatchingWorkflowRuleBasedPropertiesAttributeMatchingModelPtrOutput)
}

func (o MatchingWorkflowRuleBasedPropertiesPtrOutput) Rules() MatchingWorkflowRuleArrayOutput {
	return o.ApplyT(func(v *MatchingWorkflowRuleBasedProperties) []MatchingWorkflowRule {
		if v == nil {
			return nil
		}
		return v.Rules
	}).(MatchingWorkflowRuleArrayOutput)
}

// A key-value pair to associate with a resource
type MatchingWorkflowTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// MatchingWorkflowTagInput is an input type that accepts MatchingWorkflowTagArgs and MatchingWorkflowTagOutput values.
// You can construct a concrete instance of `MatchingWorkflowTagInput` via:
//
//	MatchingWorkflowTagArgs{...}
type MatchingWorkflowTagInput interface {
	pulumi.Input

	ToMatchingWorkflowTagOutput() MatchingWorkflowTagOutput
	ToMatchingWorkflowTagOutputWithContext(context.Context) MatchingWorkflowTagOutput
}

// A key-value pair to associate with a resource
type MatchingWorkflowTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringInput `pulumi:"value"`
}

func (MatchingWorkflowTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MatchingWorkflowTag)(nil)).Elem()
}

func (i MatchingWorkflowTagArgs) ToMatchingWorkflowTagOutput() MatchingWorkflowTagOutput {
	return i.ToMatchingWorkflowTagOutputWithContext(context.Background())
}

func (i MatchingWorkflowTagArgs) ToMatchingWorkflowTagOutputWithContext(ctx context.Context) MatchingWorkflowTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MatchingWorkflowTagOutput)
}

func (i MatchingWorkflowTagArgs) ToOutput(ctx context.Context) pulumix.Output[MatchingWorkflowTag] {
	return pulumix.Output[MatchingWorkflowTag]{
		OutputState: i.ToMatchingWorkflowTagOutputWithContext(ctx).OutputState,
	}
}

// MatchingWorkflowTagArrayInput is an input type that accepts MatchingWorkflowTagArray and MatchingWorkflowTagArrayOutput values.
// You can construct a concrete instance of `MatchingWorkflowTagArrayInput` via:
//
//	MatchingWorkflowTagArray{ MatchingWorkflowTagArgs{...} }
type MatchingWorkflowTagArrayInput interface {
	pulumi.Input

	ToMatchingWorkflowTagArrayOutput() MatchingWorkflowTagArrayOutput
	ToMatchingWorkflowTagArrayOutputWithContext(context.Context) MatchingWorkflowTagArrayOutput
}

type MatchingWorkflowTagArray []MatchingWorkflowTagInput

func (MatchingWorkflowTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MatchingWorkflowTag)(nil)).Elem()
}

func (i MatchingWorkflowTagArray) ToMatchingWorkflowTagArrayOutput() MatchingWorkflowTagArrayOutput {
	return i.ToMatchingWorkflowTagArrayOutputWithContext(context.Background())
}

func (i MatchingWorkflowTagArray) ToMatchingWorkflowTagArrayOutputWithContext(ctx context.Context) MatchingWorkflowTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MatchingWorkflowTagArrayOutput)
}

func (i MatchingWorkflowTagArray) ToOutput(ctx context.Context) pulumix.Output[[]MatchingWorkflowTag] {
	return pulumix.Output[[]MatchingWorkflowTag]{
		OutputState: i.ToMatchingWorkflowTagArrayOutputWithContext(ctx).OutputState,
	}
}

// A key-value pair to associate with a resource
type MatchingWorkflowTagOutput struct{ *pulumi.OutputState }

func (MatchingWorkflowTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MatchingWorkflowTag)(nil)).Elem()
}

func (o MatchingWorkflowTagOutput) ToMatchingWorkflowTagOutput() MatchingWorkflowTagOutput {
	return o
}

func (o MatchingWorkflowTagOutput) ToMatchingWorkflowTagOutputWithContext(ctx context.Context) MatchingWorkflowTagOutput {
	return o
}

func (o MatchingWorkflowTagOutput) ToOutput(ctx context.Context) pulumix.Output[MatchingWorkflowTag] {
	return pulumix.Output[MatchingWorkflowTag]{
		OutputState: o.OutputState,
	}
}

// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o MatchingWorkflowTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v MatchingWorkflowTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o MatchingWorkflowTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v MatchingWorkflowTag) string { return v.Value }).(pulumi.StringOutput)
}

type MatchingWorkflowTagArrayOutput struct{ *pulumi.OutputState }

func (MatchingWorkflowTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MatchingWorkflowTag)(nil)).Elem()
}

func (o MatchingWorkflowTagArrayOutput) ToMatchingWorkflowTagArrayOutput() MatchingWorkflowTagArrayOutput {
	return o
}

func (o MatchingWorkflowTagArrayOutput) ToMatchingWorkflowTagArrayOutputWithContext(ctx context.Context) MatchingWorkflowTagArrayOutput {
	return o
}

func (o MatchingWorkflowTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]MatchingWorkflowTag] {
	return pulumix.Output[[]MatchingWorkflowTag]{
		OutputState: o.OutputState,
	}
}

func (o MatchingWorkflowTagArrayOutput) Index(i pulumi.IntInput) MatchingWorkflowTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MatchingWorkflowTag {
		return vs[0].([]MatchingWorkflowTag)[vs[1].(int)]
	}).(MatchingWorkflowTagOutput)
}

type SchemaMappingSchemaInputAttribute struct {
	FieldName string  `pulumi:"fieldName"`
	GroupName *string `pulumi:"groupName"`
	MatchKey  *string `pulumi:"matchKey"`
	// The subtype of the Attribute. Would be required only when type is PROVIDER_ID
	SubType *string                          `pulumi:"subType"`
	Type    SchemaMappingSchemaAttributeType `pulumi:"type"`
}

// SchemaMappingSchemaInputAttributeInput is an input type that accepts SchemaMappingSchemaInputAttributeArgs and SchemaMappingSchemaInputAttributeOutput values.
// You can construct a concrete instance of `SchemaMappingSchemaInputAttributeInput` via:
//
//	SchemaMappingSchemaInputAttributeArgs{...}
type SchemaMappingSchemaInputAttributeInput interface {
	pulumi.Input

	ToSchemaMappingSchemaInputAttributeOutput() SchemaMappingSchemaInputAttributeOutput
	ToSchemaMappingSchemaInputAttributeOutputWithContext(context.Context) SchemaMappingSchemaInputAttributeOutput
}

type SchemaMappingSchemaInputAttributeArgs struct {
	FieldName pulumi.StringInput    `pulumi:"fieldName"`
	GroupName pulumi.StringPtrInput `pulumi:"groupName"`
	MatchKey  pulumi.StringPtrInput `pulumi:"matchKey"`
	// The subtype of the Attribute. Would be required only when type is PROVIDER_ID
	SubType pulumi.StringPtrInput                 `pulumi:"subType"`
	Type    SchemaMappingSchemaAttributeTypeInput `pulumi:"type"`
}

func (SchemaMappingSchemaInputAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaMappingSchemaInputAttribute)(nil)).Elem()
}

func (i SchemaMappingSchemaInputAttributeArgs) ToSchemaMappingSchemaInputAttributeOutput() SchemaMappingSchemaInputAttributeOutput {
	return i.ToSchemaMappingSchemaInputAttributeOutputWithContext(context.Background())
}

func (i SchemaMappingSchemaInputAttributeArgs) ToSchemaMappingSchemaInputAttributeOutputWithContext(ctx context.Context) SchemaMappingSchemaInputAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaMappingSchemaInputAttributeOutput)
}

func (i SchemaMappingSchemaInputAttributeArgs) ToOutput(ctx context.Context) pulumix.Output[SchemaMappingSchemaInputAttribute] {
	return pulumix.Output[SchemaMappingSchemaInputAttribute]{
		OutputState: i.ToSchemaMappingSchemaInputAttributeOutputWithContext(ctx).OutputState,
	}
}

// SchemaMappingSchemaInputAttributeArrayInput is an input type that accepts SchemaMappingSchemaInputAttributeArray and SchemaMappingSchemaInputAttributeArrayOutput values.
// You can construct a concrete instance of `SchemaMappingSchemaInputAttributeArrayInput` via:
//
//	SchemaMappingSchemaInputAttributeArray{ SchemaMappingSchemaInputAttributeArgs{...} }
type SchemaMappingSchemaInputAttributeArrayInput interface {
	pulumi.Input

	ToSchemaMappingSchemaInputAttributeArrayOutput() SchemaMappingSchemaInputAttributeArrayOutput
	ToSchemaMappingSchemaInputAttributeArrayOutputWithContext(context.Context) SchemaMappingSchemaInputAttributeArrayOutput
}

type SchemaMappingSchemaInputAttributeArray []SchemaMappingSchemaInputAttributeInput

func (SchemaMappingSchemaInputAttributeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SchemaMappingSchemaInputAttribute)(nil)).Elem()
}

func (i SchemaMappingSchemaInputAttributeArray) ToSchemaMappingSchemaInputAttributeArrayOutput() SchemaMappingSchemaInputAttributeArrayOutput {
	return i.ToSchemaMappingSchemaInputAttributeArrayOutputWithContext(context.Background())
}

func (i SchemaMappingSchemaInputAttributeArray) ToSchemaMappingSchemaInputAttributeArrayOutputWithContext(ctx context.Context) SchemaMappingSchemaInputAttributeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaMappingSchemaInputAttributeArrayOutput)
}

func (i SchemaMappingSchemaInputAttributeArray) ToOutput(ctx context.Context) pulumix.Output[[]SchemaMappingSchemaInputAttribute] {
	return pulumix.Output[[]SchemaMappingSchemaInputAttribute]{
		OutputState: i.ToSchemaMappingSchemaInputAttributeArrayOutputWithContext(ctx).OutputState,
	}
}

type SchemaMappingSchemaInputAttributeOutput struct{ *pulumi.OutputState }

func (SchemaMappingSchemaInputAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaMappingSchemaInputAttribute)(nil)).Elem()
}

func (o SchemaMappingSchemaInputAttributeOutput) ToSchemaMappingSchemaInputAttributeOutput() SchemaMappingSchemaInputAttributeOutput {
	return o
}

func (o SchemaMappingSchemaInputAttributeOutput) ToSchemaMappingSchemaInputAttributeOutputWithContext(ctx context.Context) SchemaMappingSchemaInputAttributeOutput {
	return o
}

func (o SchemaMappingSchemaInputAttributeOutput) ToOutput(ctx context.Context) pulumix.Output[SchemaMappingSchemaInputAttribute] {
	return pulumix.Output[SchemaMappingSchemaInputAttribute]{
		OutputState: o.OutputState,
	}
}

func (o SchemaMappingSchemaInputAttributeOutput) FieldName() pulumi.StringOutput {
	return o.ApplyT(func(v SchemaMappingSchemaInputAttribute) string { return v.FieldName }).(pulumi.StringOutput)
}

func (o SchemaMappingSchemaInputAttributeOutput) GroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaMappingSchemaInputAttribute) *string { return v.GroupName }).(pulumi.StringPtrOutput)
}

func (o SchemaMappingSchemaInputAttributeOutput) MatchKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaMappingSchemaInputAttribute) *string { return v.MatchKey }).(pulumi.StringPtrOutput)
}

// The subtype of the Attribute. Would be required only when type is PROVIDER_ID
func (o SchemaMappingSchemaInputAttributeOutput) SubType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaMappingSchemaInputAttribute) *string { return v.SubType }).(pulumi.StringPtrOutput)
}

func (o SchemaMappingSchemaInputAttributeOutput) Type() SchemaMappingSchemaAttributeTypeOutput {
	return o.ApplyT(func(v SchemaMappingSchemaInputAttribute) SchemaMappingSchemaAttributeType { return v.Type }).(SchemaMappingSchemaAttributeTypeOutput)
}

type SchemaMappingSchemaInputAttributeArrayOutput struct{ *pulumi.OutputState }

func (SchemaMappingSchemaInputAttributeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SchemaMappingSchemaInputAttribute)(nil)).Elem()
}

func (o SchemaMappingSchemaInputAttributeArrayOutput) ToSchemaMappingSchemaInputAttributeArrayOutput() SchemaMappingSchemaInputAttributeArrayOutput {
	return o
}

func (o SchemaMappingSchemaInputAttributeArrayOutput) ToSchemaMappingSchemaInputAttributeArrayOutputWithContext(ctx context.Context) SchemaMappingSchemaInputAttributeArrayOutput {
	return o
}

func (o SchemaMappingSchemaInputAttributeArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]SchemaMappingSchemaInputAttribute] {
	return pulumix.Output[[]SchemaMappingSchemaInputAttribute]{
		OutputState: o.OutputState,
	}
}

func (o SchemaMappingSchemaInputAttributeArrayOutput) Index(i pulumi.IntInput) SchemaMappingSchemaInputAttributeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SchemaMappingSchemaInputAttribute {
		return vs[0].([]SchemaMappingSchemaInputAttribute)[vs[1].(int)]
	}).(SchemaMappingSchemaInputAttributeOutput)
}

// A key-value pair to associate with a resource
type SchemaMappingTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// SchemaMappingTagInput is an input type that accepts SchemaMappingTagArgs and SchemaMappingTagOutput values.
// You can construct a concrete instance of `SchemaMappingTagInput` via:
//
//	SchemaMappingTagArgs{...}
type SchemaMappingTagInput interface {
	pulumi.Input

	ToSchemaMappingTagOutput() SchemaMappingTagOutput
	ToSchemaMappingTagOutputWithContext(context.Context) SchemaMappingTagOutput
}

// A key-value pair to associate with a resource
type SchemaMappingTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringInput `pulumi:"value"`
}

func (SchemaMappingTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaMappingTag)(nil)).Elem()
}

func (i SchemaMappingTagArgs) ToSchemaMappingTagOutput() SchemaMappingTagOutput {
	return i.ToSchemaMappingTagOutputWithContext(context.Background())
}

func (i SchemaMappingTagArgs) ToSchemaMappingTagOutputWithContext(ctx context.Context) SchemaMappingTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaMappingTagOutput)
}

func (i SchemaMappingTagArgs) ToOutput(ctx context.Context) pulumix.Output[SchemaMappingTag] {
	return pulumix.Output[SchemaMappingTag]{
		OutputState: i.ToSchemaMappingTagOutputWithContext(ctx).OutputState,
	}
}

// SchemaMappingTagArrayInput is an input type that accepts SchemaMappingTagArray and SchemaMappingTagArrayOutput values.
// You can construct a concrete instance of `SchemaMappingTagArrayInput` via:
//
//	SchemaMappingTagArray{ SchemaMappingTagArgs{...} }
type SchemaMappingTagArrayInput interface {
	pulumi.Input

	ToSchemaMappingTagArrayOutput() SchemaMappingTagArrayOutput
	ToSchemaMappingTagArrayOutputWithContext(context.Context) SchemaMappingTagArrayOutput
}

type SchemaMappingTagArray []SchemaMappingTagInput

func (SchemaMappingTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SchemaMappingTag)(nil)).Elem()
}

func (i SchemaMappingTagArray) ToSchemaMappingTagArrayOutput() SchemaMappingTagArrayOutput {
	return i.ToSchemaMappingTagArrayOutputWithContext(context.Background())
}

func (i SchemaMappingTagArray) ToSchemaMappingTagArrayOutputWithContext(ctx context.Context) SchemaMappingTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaMappingTagArrayOutput)
}

func (i SchemaMappingTagArray) ToOutput(ctx context.Context) pulumix.Output[[]SchemaMappingTag] {
	return pulumix.Output[[]SchemaMappingTag]{
		OutputState: i.ToSchemaMappingTagArrayOutputWithContext(ctx).OutputState,
	}
}

// A key-value pair to associate with a resource
type SchemaMappingTagOutput struct{ *pulumi.OutputState }

func (SchemaMappingTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaMappingTag)(nil)).Elem()
}

func (o SchemaMappingTagOutput) ToSchemaMappingTagOutput() SchemaMappingTagOutput {
	return o
}

func (o SchemaMappingTagOutput) ToSchemaMappingTagOutputWithContext(ctx context.Context) SchemaMappingTagOutput {
	return o
}

func (o SchemaMappingTagOutput) ToOutput(ctx context.Context) pulumix.Output[SchemaMappingTag] {
	return pulumix.Output[SchemaMappingTag]{
		OutputState: o.OutputState,
	}
}

// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o SchemaMappingTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SchemaMappingTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o SchemaMappingTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SchemaMappingTag) string { return v.Value }).(pulumi.StringOutput)
}

type SchemaMappingTagArrayOutput struct{ *pulumi.OutputState }

func (SchemaMappingTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SchemaMappingTag)(nil)).Elem()
}

func (o SchemaMappingTagArrayOutput) ToSchemaMappingTagArrayOutput() SchemaMappingTagArrayOutput {
	return o
}

func (o SchemaMappingTagArrayOutput) ToSchemaMappingTagArrayOutputWithContext(ctx context.Context) SchemaMappingTagArrayOutput {
	return o
}

func (o SchemaMappingTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]SchemaMappingTag] {
	return pulumix.Output[[]SchemaMappingTag]{
		OutputState: o.OutputState,
	}
}

func (o SchemaMappingTagArrayOutput) Index(i pulumi.IntInput) SchemaMappingTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SchemaMappingTag {
		return vs[0].([]SchemaMappingTag)[vs[1].(int)]
	}).(SchemaMappingTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MatchingWorkflowInputSourceInput)(nil)).Elem(), MatchingWorkflowInputSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MatchingWorkflowInputSourceArrayInput)(nil)).Elem(), MatchingWorkflowInputSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MatchingWorkflowIntermediateSourceConfigurationInput)(nil)).Elem(), MatchingWorkflowIntermediateSourceConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MatchingWorkflowIntermediateSourceConfigurationPtrInput)(nil)).Elem(), MatchingWorkflowIntermediateSourceConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MatchingWorkflowOutputAttributeInput)(nil)).Elem(), MatchingWorkflowOutputAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MatchingWorkflowOutputAttributeArrayInput)(nil)).Elem(), MatchingWorkflowOutputAttributeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MatchingWorkflowOutputSourceInput)(nil)).Elem(), MatchingWorkflowOutputSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MatchingWorkflowOutputSourceArrayInput)(nil)).Elem(), MatchingWorkflowOutputSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MatchingWorkflowProviderPropertiesInput)(nil)).Elem(), MatchingWorkflowProviderPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MatchingWorkflowProviderPropertiesPtrInput)(nil)).Elem(), MatchingWorkflowProviderPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MatchingWorkflowResolutionTechniquesInput)(nil)).Elem(), MatchingWorkflowResolutionTechniquesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MatchingWorkflowRuleInput)(nil)).Elem(), MatchingWorkflowRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MatchingWorkflowRuleArrayInput)(nil)).Elem(), MatchingWorkflowRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MatchingWorkflowRuleBasedPropertiesInput)(nil)).Elem(), MatchingWorkflowRuleBasedPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MatchingWorkflowRuleBasedPropertiesPtrInput)(nil)).Elem(), MatchingWorkflowRuleBasedPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MatchingWorkflowTagInput)(nil)).Elem(), MatchingWorkflowTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MatchingWorkflowTagArrayInput)(nil)).Elem(), MatchingWorkflowTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaMappingSchemaInputAttributeInput)(nil)).Elem(), SchemaMappingSchemaInputAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaMappingSchemaInputAttributeArrayInput)(nil)).Elem(), SchemaMappingSchemaInputAttributeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaMappingTagInput)(nil)).Elem(), SchemaMappingTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaMappingTagArrayInput)(nil)).Elem(), SchemaMappingTagArray{})
	pulumi.RegisterOutputType(MatchingWorkflowInputSourceOutput{})
	pulumi.RegisterOutputType(MatchingWorkflowInputSourceArrayOutput{})
	pulumi.RegisterOutputType(MatchingWorkflowIntermediateSourceConfigurationOutput{})
	pulumi.RegisterOutputType(MatchingWorkflowIntermediateSourceConfigurationPtrOutput{})
	pulumi.RegisterOutputType(MatchingWorkflowOutputAttributeOutput{})
	pulumi.RegisterOutputType(MatchingWorkflowOutputAttributeArrayOutput{})
	pulumi.RegisterOutputType(MatchingWorkflowOutputSourceOutput{})
	pulumi.RegisterOutputType(MatchingWorkflowOutputSourceArrayOutput{})
	pulumi.RegisterOutputType(MatchingWorkflowProviderPropertiesOutput{})
	pulumi.RegisterOutputType(MatchingWorkflowProviderPropertiesPtrOutput{})
	pulumi.RegisterOutputType(MatchingWorkflowResolutionTechniquesOutput{})
	pulumi.RegisterOutputType(MatchingWorkflowResolutionTechniquesPtrOutput{})
	pulumi.RegisterOutputType(MatchingWorkflowRuleOutput{})
	pulumi.RegisterOutputType(MatchingWorkflowRuleArrayOutput{})
	pulumi.RegisterOutputType(MatchingWorkflowRuleBasedPropertiesOutput{})
	pulumi.RegisterOutputType(MatchingWorkflowRuleBasedPropertiesPtrOutput{})
	pulumi.RegisterOutputType(MatchingWorkflowTagOutput{})
	pulumi.RegisterOutputType(MatchingWorkflowTagArrayOutput{})
	pulumi.RegisterOutputType(SchemaMappingSchemaInputAttributeOutput{})
	pulumi.RegisterOutputType(SchemaMappingSchemaInputAttributeArrayOutput{})
	pulumi.RegisterOutputType(SchemaMappingTagOutput{})
	pulumi.RegisterOutputType(SchemaMappingTagArrayOutput{})
}
