// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package entityresolution

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type SchemaMappingSchemaInputAttribute struct {
	FieldName string                           `pulumi:"fieldName"`
	GroupName *string                          `pulumi:"groupName"`
	MatchKey  *string                          `pulumi:"matchKey"`
	Type      SchemaMappingSchemaAttributeType `pulumi:"type"`
}

// SchemaMappingSchemaInputAttributeInput is an input type that accepts SchemaMappingSchemaInputAttributeArgs and SchemaMappingSchemaInputAttributeOutput values.
// You can construct a concrete instance of `SchemaMappingSchemaInputAttributeInput` via:
//
//	SchemaMappingSchemaInputAttributeArgs{...}
type SchemaMappingSchemaInputAttributeInput interface {
	pulumi.Input

	ToSchemaMappingSchemaInputAttributeOutput() SchemaMappingSchemaInputAttributeOutput
	ToSchemaMappingSchemaInputAttributeOutputWithContext(context.Context) SchemaMappingSchemaInputAttributeOutput
}

type SchemaMappingSchemaInputAttributeArgs struct {
	FieldName pulumi.StringInput                    `pulumi:"fieldName"`
	GroupName pulumi.StringPtrInput                 `pulumi:"groupName"`
	MatchKey  pulumi.StringPtrInput                 `pulumi:"matchKey"`
	Type      SchemaMappingSchemaAttributeTypeInput `pulumi:"type"`
}

func (SchemaMappingSchemaInputAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaMappingSchemaInputAttribute)(nil)).Elem()
}

func (i SchemaMappingSchemaInputAttributeArgs) ToSchemaMappingSchemaInputAttributeOutput() SchemaMappingSchemaInputAttributeOutput {
	return i.ToSchemaMappingSchemaInputAttributeOutputWithContext(context.Background())
}

func (i SchemaMappingSchemaInputAttributeArgs) ToSchemaMappingSchemaInputAttributeOutputWithContext(ctx context.Context) SchemaMappingSchemaInputAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaMappingSchemaInputAttributeOutput)
}

// SchemaMappingSchemaInputAttributeArrayInput is an input type that accepts SchemaMappingSchemaInputAttributeArray and SchemaMappingSchemaInputAttributeArrayOutput values.
// You can construct a concrete instance of `SchemaMappingSchemaInputAttributeArrayInput` via:
//
//	SchemaMappingSchemaInputAttributeArray{ SchemaMappingSchemaInputAttributeArgs{...} }
type SchemaMappingSchemaInputAttributeArrayInput interface {
	pulumi.Input

	ToSchemaMappingSchemaInputAttributeArrayOutput() SchemaMappingSchemaInputAttributeArrayOutput
	ToSchemaMappingSchemaInputAttributeArrayOutputWithContext(context.Context) SchemaMappingSchemaInputAttributeArrayOutput
}

type SchemaMappingSchemaInputAttributeArray []SchemaMappingSchemaInputAttributeInput

func (SchemaMappingSchemaInputAttributeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SchemaMappingSchemaInputAttribute)(nil)).Elem()
}

func (i SchemaMappingSchemaInputAttributeArray) ToSchemaMappingSchemaInputAttributeArrayOutput() SchemaMappingSchemaInputAttributeArrayOutput {
	return i.ToSchemaMappingSchemaInputAttributeArrayOutputWithContext(context.Background())
}

func (i SchemaMappingSchemaInputAttributeArray) ToSchemaMappingSchemaInputAttributeArrayOutputWithContext(ctx context.Context) SchemaMappingSchemaInputAttributeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaMappingSchemaInputAttributeArrayOutput)
}

type SchemaMappingSchemaInputAttributeOutput struct{ *pulumi.OutputState }

func (SchemaMappingSchemaInputAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaMappingSchemaInputAttribute)(nil)).Elem()
}

func (o SchemaMappingSchemaInputAttributeOutput) ToSchemaMappingSchemaInputAttributeOutput() SchemaMappingSchemaInputAttributeOutput {
	return o
}

func (o SchemaMappingSchemaInputAttributeOutput) ToSchemaMappingSchemaInputAttributeOutputWithContext(ctx context.Context) SchemaMappingSchemaInputAttributeOutput {
	return o
}

func (o SchemaMappingSchemaInputAttributeOutput) FieldName() pulumi.StringOutput {
	return o.ApplyT(func(v SchemaMappingSchemaInputAttribute) string { return v.FieldName }).(pulumi.StringOutput)
}

func (o SchemaMappingSchemaInputAttributeOutput) GroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaMappingSchemaInputAttribute) *string { return v.GroupName }).(pulumi.StringPtrOutput)
}

func (o SchemaMappingSchemaInputAttributeOutput) MatchKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaMappingSchemaInputAttribute) *string { return v.MatchKey }).(pulumi.StringPtrOutput)
}

func (o SchemaMappingSchemaInputAttributeOutput) Type() SchemaMappingSchemaAttributeTypeOutput {
	return o.ApplyT(func(v SchemaMappingSchemaInputAttribute) SchemaMappingSchemaAttributeType { return v.Type }).(SchemaMappingSchemaAttributeTypeOutput)
}

type SchemaMappingSchemaInputAttributeArrayOutput struct{ *pulumi.OutputState }

func (SchemaMappingSchemaInputAttributeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SchemaMappingSchemaInputAttribute)(nil)).Elem()
}

func (o SchemaMappingSchemaInputAttributeArrayOutput) ToSchemaMappingSchemaInputAttributeArrayOutput() SchemaMappingSchemaInputAttributeArrayOutput {
	return o
}

func (o SchemaMappingSchemaInputAttributeArrayOutput) ToSchemaMappingSchemaInputAttributeArrayOutputWithContext(ctx context.Context) SchemaMappingSchemaInputAttributeArrayOutput {
	return o
}

func (o SchemaMappingSchemaInputAttributeArrayOutput) Index(i pulumi.IntInput) SchemaMappingSchemaInputAttributeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SchemaMappingSchemaInputAttribute {
		return vs[0].([]SchemaMappingSchemaInputAttribute)[vs[1].(int)]
	}).(SchemaMappingSchemaInputAttributeOutput)
}

// A key-value pair to associate with a resource
type SchemaMappingTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// SchemaMappingTagInput is an input type that accepts SchemaMappingTagArgs and SchemaMappingTagOutput values.
// You can construct a concrete instance of `SchemaMappingTagInput` via:
//
//	SchemaMappingTagArgs{...}
type SchemaMappingTagInput interface {
	pulumi.Input

	ToSchemaMappingTagOutput() SchemaMappingTagOutput
	ToSchemaMappingTagOutputWithContext(context.Context) SchemaMappingTagOutput
}

// A key-value pair to associate with a resource
type SchemaMappingTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringInput `pulumi:"value"`
}

func (SchemaMappingTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaMappingTag)(nil)).Elem()
}

func (i SchemaMappingTagArgs) ToSchemaMappingTagOutput() SchemaMappingTagOutput {
	return i.ToSchemaMappingTagOutputWithContext(context.Background())
}

func (i SchemaMappingTagArgs) ToSchemaMappingTagOutputWithContext(ctx context.Context) SchemaMappingTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaMappingTagOutput)
}

// SchemaMappingTagArrayInput is an input type that accepts SchemaMappingTagArray and SchemaMappingTagArrayOutput values.
// You can construct a concrete instance of `SchemaMappingTagArrayInput` via:
//
//	SchemaMappingTagArray{ SchemaMappingTagArgs{...} }
type SchemaMappingTagArrayInput interface {
	pulumi.Input

	ToSchemaMappingTagArrayOutput() SchemaMappingTagArrayOutput
	ToSchemaMappingTagArrayOutputWithContext(context.Context) SchemaMappingTagArrayOutput
}

type SchemaMappingTagArray []SchemaMappingTagInput

func (SchemaMappingTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SchemaMappingTag)(nil)).Elem()
}

func (i SchemaMappingTagArray) ToSchemaMappingTagArrayOutput() SchemaMappingTagArrayOutput {
	return i.ToSchemaMappingTagArrayOutputWithContext(context.Background())
}

func (i SchemaMappingTagArray) ToSchemaMappingTagArrayOutputWithContext(ctx context.Context) SchemaMappingTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaMappingTagArrayOutput)
}

// A key-value pair to associate with a resource
type SchemaMappingTagOutput struct{ *pulumi.OutputState }

func (SchemaMappingTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaMappingTag)(nil)).Elem()
}

func (o SchemaMappingTagOutput) ToSchemaMappingTagOutput() SchemaMappingTagOutput {
	return o
}

func (o SchemaMappingTagOutput) ToSchemaMappingTagOutputWithContext(ctx context.Context) SchemaMappingTagOutput {
	return o
}

// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o SchemaMappingTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SchemaMappingTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o SchemaMappingTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SchemaMappingTag) string { return v.Value }).(pulumi.StringOutput)
}

type SchemaMappingTagArrayOutput struct{ *pulumi.OutputState }

func (SchemaMappingTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SchemaMappingTag)(nil)).Elem()
}

func (o SchemaMappingTagArrayOutput) ToSchemaMappingTagArrayOutput() SchemaMappingTagArrayOutput {
	return o
}

func (o SchemaMappingTagArrayOutput) ToSchemaMappingTagArrayOutputWithContext(ctx context.Context) SchemaMappingTagArrayOutput {
	return o
}

func (o SchemaMappingTagArrayOutput) Index(i pulumi.IntInput) SchemaMappingTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SchemaMappingTag {
		return vs[0].([]SchemaMappingTag)[vs[1].(int)]
	}).(SchemaMappingTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaMappingSchemaInputAttributeInput)(nil)).Elem(), SchemaMappingSchemaInputAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaMappingSchemaInputAttributeArrayInput)(nil)).Elem(), SchemaMappingSchemaInputAttributeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaMappingTagInput)(nil)).Elem(), SchemaMappingTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaMappingTagArrayInput)(nil)).Elem(), SchemaMappingTagArray{})
	pulumi.RegisterOutputType(SchemaMappingSchemaInputAttributeOutput{})
	pulumi.RegisterOutputType(SchemaMappingSchemaInputAttributeArrayOutput{})
	pulumi.RegisterOutputType(SchemaMappingTagOutput{})
	pulumi.RegisterOutputType(SchemaMappingTagArrayOutput{})
}
