// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package entityresolution

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Policy Statement defined in AWS Entity Resolution Service
type PolicyStatement struct {
	pulumi.CustomResourceState

	Action      pulumi.StringArrayOutput                `pulumi:"action"`
	Arn         pulumi.StringOutput                     `pulumi:"arn"`
	Condition   pulumi.StringPtrOutput                  `pulumi:"condition"`
	Effect      PolicyStatementStatementEffectPtrOutput `pulumi:"effect"`
	Principal   pulumi.StringArrayOutput                `pulumi:"principal"`
	StatementId pulumi.StringOutput                     `pulumi:"statementId"`
}

// NewPolicyStatement registers a new resource with the given unique name, arguments, and options.
func NewPolicyStatement(ctx *pulumi.Context,
	name string, args *PolicyStatementArgs, opts ...pulumi.ResourceOption) (*PolicyStatement, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Arn == nil {
		return nil, errors.New("invalid value for required argument 'Arn'")
	}
	if args.StatementId == nil {
		return nil, errors.New("invalid value for required argument 'StatementId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"arn",
		"statementId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PolicyStatement
	err := ctx.RegisterResource("aws-native:entityresolution:PolicyStatement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicyStatement gets an existing PolicyStatement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicyStatement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyStatementState, opts ...pulumi.ResourceOption) (*PolicyStatement, error) {
	var resource PolicyStatement
	err := ctx.ReadResource("aws-native:entityresolution:PolicyStatement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicyStatement resources.
type policyStatementState struct {
}

type PolicyStatementState struct {
}

func (PolicyStatementState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyStatementState)(nil)).Elem()
}

type policyStatementArgs struct {
	Action      []string                        `pulumi:"action"`
	Arn         string                          `pulumi:"arn"`
	Condition   *string                         `pulumi:"condition"`
	Effect      *PolicyStatementStatementEffect `pulumi:"effect"`
	Principal   []string                        `pulumi:"principal"`
	StatementId string                          `pulumi:"statementId"`
}

// The set of arguments for constructing a PolicyStatement resource.
type PolicyStatementArgs struct {
	Action      pulumi.StringArrayInput
	Arn         pulumi.StringInput
	Condition   pulumi.StringPtrInput
	Effect      PolicyStatementStatementEffectPtrInput
	Principal   pulumi.StringArrayInput
	StatementId pulumi.StringInput
}

func (PolicyStatementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyStatementArgs)(nil)).Elem()
}

type PolicyStatementInput interface {
	pulumi.Input

	ToPolicyStatementOutput() PolicyStatementOutput
	ToPolicyStatementOutputWithContext(ctx context.Context) PolicyStatementOutput
}

func (*PolicyStatement) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyStatement)(nil)).Elem()
}

func (i *PolicyStatement) ToPolicyStatementOutput() PolicyStatementOutput {
	return i.ToPolicyStatementOutputWithContext(context.Background())
}

func (i *PolicyStatement) ToPolicyStatementOutputWithContext(ctx context.Context) PolicyStatementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyStatementOutput)
}

type PolicyStatementOutput struct{ *pulumi.OutputState }

func (PolicyStatementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyStatement)(nil)).Elem()
}

func (o PolicyStatementOutput) ToPolicyStatementOutput() PolicyStatementOutput {
	return o
}

func (o PolicyStatementOutput) ToPolicyStatementOutputWithContext(ctx context.Context) PolicyStatementOutput {
	return o
}

func (o PolicyStatementOutput) Action() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PolicyStatement) pulumi.StringArrayOutput { return v.Action }).(pulumi.StringArrayOutput)
}

func (o PolicyStatementOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyStatement) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o PolicyStatementOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyStatement) pulumi.StringPtrOutput { return v.Condition }).(pulumi.StringPtrOutput)
}

func (o PolicyStatementOutput) Effect() PolicyStatementStatementEffectPtrOutput {
	return o.ApplyT(func(v *PolicyStatement) PolicyStatementStatementEffectPtrOutput { return v.Effect }).(PolicyStatementStatementEffectPtrOutput)
}

func (o PolicyStatementOutput) Principal() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PolicyStatement) pulumi.StringArrayOutput { return v.Principal }).(pulumi.StringArrayOutput)
}

func (o PolicyStatementOutput) StatementId() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyStatement) pulumi.StringOutput { return v.StatementId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyStatementInput)(nil)).Elem(), &PolicyStatement{})
	pulumi.RegisterOutputType(PolicyStatementOutput{})
}
