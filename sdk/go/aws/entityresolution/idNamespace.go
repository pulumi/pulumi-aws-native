// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package entityresolution

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// IdNamespace defined in AWS Entity Resolution service
type IdNamespace struct {
	pulumi.CustomResourceState

	// The date and time when the IdNamespace was created
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The description of the ID namespace.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// An object containing `IdMappingType` and `ProviderProperties` .
	IdMappingWorkflowProperties IdNamespaceIdMappingWorkflowPropertiesArrayOutput `pulumi:"idMappingWorkflowProperties"`
	// The arn associated with the IdNamespace
	IdNamespaceArn pulumi.StringOutput `pulumi:"idNamespaceArn"`
	// The name of the ID namespace.
	IdNamespaceName pulumi.StringOutput `pulumi:"idNamespaceName"`
	// An object containing `InputSourceARN` and `SchemaName` .
	InputSourceConfig IdNamespaceInputSourceArrayOutput `pulumi:"inputSourceConfig"`
	// The Amazon Resource Name (ARN) of the IAM role. AWS Entity Resolution assumes this role to access the resources defined in this `IdNamespace` on your behalf as part of the workflow run.
	RoleArn pulumi.StringPtrOutput `pulumi:"roleArn"`
	// The tags used to organize, track, or control access for this resource.
	Tags aws.TagArrayOutput `pulumi:"tags"`
	// The type of ID namespace. There are two types: `SOURCE` and `TARGET` .
	//
	// The `SOURCE` contains configurations for `sourceId` data that will be processed in an ID mapping workflow.
	//
	// The `TARGET` contains a configuration of `targetId` to which all `sourceIds` will resolve to.
	Type IdNamespaceTypeOutput `pulumi:"type"`
	// The date and time when the IdNamespace was updated
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewIdNamespace registers a new resource with the given unique name, arguments, and options.
func NewIdNamespace(ctx *pulumi.Context,
	name string, args *IdNamespaceArgs, opts ...pulumi.ResourceOption) (*IdNamespace, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"idNamespaceName",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IdNamespace
	err := ctx.RegisterResource("aws-native:entityresolution:IdNamespace", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIdNamespace gets an existing IdNamespace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdNamespace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IdNamespaceState, opts ...pulumi.ResourceOption) (*IdNamespace, error) {
	var resource IdNamespace
	err := ctx.ReadResource("aws-native:entityresolution:IdNamespace", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IdNamespace resources.
type idNamespaceState struct {
}

type IdNamespaceState struct {
}

func (IdNamespaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*idNamespaceState)(nil)).Elem()
}

type idNamespaceArgs struct {
	// The description of the ID namespace.
	Description *string `pulumi:"description"`
	// An object containing `IdMappingType` and `ProviderProperties` .
	IdMappingWorkflowProperties []IdNamespaceIdMappingWorkflowProperties `pulumi:"idMappingWorkflowProperties"`
	// The name of the ID namespace.
	IdNamespaceName *string `pulumi:"idNamespaceName"`
	// An object containing `InputSourceARN` and `SchemaName` .
	InputSourceConfig []IdNamespaceInputSource `pulumi:"inputSourceConfig"`
	// The Amazon Resource Name (ARN) of the IAM role. AWS Entity Resolution assumes this role to access the resources defined in this `IdNamespace` on your behalf as part of the workflow run.
	RoleArn *string `pulumi:"roleArn"`
	// The tags used to organize, track, or control access for this resource.
	Tags []aws.Tag `pulumi:"tags"`
	// The type of ID namespace. There are two types: `SOURCE` and `TARGET` .
	//
	// The `SOURCE` contains configurations for `sourceId` data that will be processed in an ID mapping workflow.
	//
	// The `TARGET` contains a configuration of `targetId` to which all `sourceIds` will resolve to.
	Type IdNamespaceType `pulumi:"type"`
}

// The set of arguments for constructing a IdNamespace resource.
type IdNamespaceArgs struct {
	// The description of the ID namespace.
	Description pulumi.StringPtrInput
	// An object containing `IdMappingType` and `ProviderProperties` .
	IdMappingWorkflowProperties IdNamespaceIdMappingWorkflowPropertiesArrayInput
	// The name of the ID namespace.
	IdNamespaceName pulumi.StringPtrInput
	// An object containing `InputSourceARN` and `SchemaName` .
	InputSourceConfig IdNamespaceInputSourceArrayInput
	// The Amazon Resource Name (ARN) of the IAM role. AWS Entity Resolution assumes this role to access the resources defined in this `IdNamespace` on your behalf as part of the workflow run.
	RoleArn pulumi.StringPtrInput
	// The tags used to organize, track, or control access for this resource.
	Tags aws.TagArrayInput
	// The type of ID namespace. There are two types: `SOURCE` and `TARGET` .
	//
	// The `SOURCE` contains configurations for `sourceId` data that will be processed in an ID mapping workflow.
	//
	// The `TARGET` contains a configuration of `targetId` to which all `sourceIds` will resolve to.
	Type IdNamespaceTypeInput
}

func (IdNamespaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*idNamespaceArgs)(nil)).Elem()
}

type IdNamespaceInput interface {
	pulumi.Input

	ToIdNamespaceOutput() IdNamespaceOutput
	ToIdNamespaceOutputWithContext(ctx context.Context) IdNamespaceOutput
}

func (*IdNamespace) ElementType() reflect.Type {
	return reflect.TypeOf((**IdNamespace)(nil)).Elem()
}

func (i *IdNamespace) ToIdNamespaceOutput() IdNamespaceOutput {
	return i.ToIdNamespaceOutputWithContext(context.Background())
}

func (i *IdNamespace) ToIdNamespaceOutputWithContext(ctx context.Context) IdNamespaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdNamespaceOutput)
}

type IdNamespaceOutput struct{ *pulumi.OutputState }

func (IdNamespaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdNamespace)(nil)).Elem()
}

func (o IdNamespaceOutput) ToIdNamespaceOutput() IdNamespaceOutput {
	return o
}

func (o IdNamespaceOutput) ToIdNamespaceOutputWithContext(ctx context.Context) IdNamespaceOutput {
	return o
}

// The date and time when the IdNamespace was created
func (o IdNamespaceOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *IdNamespace) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of the ID namespace.
func (o IdNamespaceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdNamespace) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// An object containing `IdMappingType` and `ProviderProperties` .
func (o IdNamespaceOutput) IdMappingWorkflowProperties() IdNamespaceIdMappingWorkflowPropertiesArrayOutput {
	return o.ApplyT(func(v *IdNamespace) IdNamespaceIdMappingWorkflowPropertiesArrayOutput {
		return v.IdMappingWorkflowProperties
	}).(IdNamespaceIdMappingWorkflowPropertiesArrayOutput)
}

// The arn associated with the IdNamespace
func (o IdNamespaceOutput) IdNamespaceArn() pulumi.StringOutput {
	return o.ApplyT(func(v *IdNamespace) pulumi.StringOutput { return v.IdNamespaceArn }).(pulumi.StringOutput)
}

// The name of the ID namespace.
func (o IdNamespaceOutput) IdNamespaceName() pulumi.StringOutput {
	return o.ApplyT(func(v *IdNamespace) pulumi.StringOutput { return v.IdNamespaceName }).(pulumi.StringOutput)
}

// An object containing `InputSourceARN` and `SchemaName` .
func (o IdNamespaceOutput) InputSourceConfig() IdNamespaceInputSourceArrayOutput {
	return o.ApplyT(func(v *IdNamespace) IdNamespaceInputSourceArrayOutput { return v.InputSourceConfig }).(IdNamespaceInputSourceArrayOutput)
}

// The Amazon Resource Name (ARN) of the IAM role. AWS Entity Resolution assumes this role to access the resources defined in this `IdNamespace` on your behalf as part of the workflow run.
func (o IdNamespaceOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdNamespace) pulumi.StringPtrOutput { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// The tags used to organize, track, or control access for this resource.
func (o IdNamespaceOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *IdNamespace) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

// The type of ID namespace. There are two types: `SOURCE` and `TARGET` .
//
// The `SOURCE` contains configurations for `sourceId` data that will be processed in an ID mapping workflow.
//
// The `TARGET` contains a configuration of `targetId` to which all `sourceIds` will resolve to.
func (o IdNamespaceOutput) Type() IdNamespaceTypeOutput {
	return o.ApplyT(func(v *IdNamespace) IdNamespaceTypeOutput { return v.Type }).(IdNamespaceTypeOutput)
}

// The date and time when the IdNamespace was updated
func (o IdNamespaceOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *IdNamespace) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IdNamespaceInput)(nil)).Elem(), &IdNamespace{})
	pulumi.RegisterOutputType(IdNamespaceOutput{})
}
