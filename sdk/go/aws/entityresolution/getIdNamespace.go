// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package entityresolution

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// IdNamespace defined in AWS Entity Resolution service
func LookupIdNamespace(ctx *pulumi.Context, args *LookupIdNamespaceArgs, opts ...pulumi.InvokeOption) (*LookupIdNamespaceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupIdNamespaceResult
	err := ctx.Invoke("aws-native:entityresolution:getIdNamespace", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupIdNamespaceArgs struct {
	// The name of the ID namespace.
	IdNamespaceName string `pulumi:"idNamespaceName"`
}

type LookupIdNamespaceResult struct {
	// The date and time when the IdNamespace was created
	CreatedAt *string `pulumi:"createdAt"`
	// The description of the ID namespace.
	Description *string `pulumi:"description"`
	// Determines the properties of `IdMappingWorflow` where this `IdNamespace` can be used as a `Source` or a `Target` .
	IdMappingWorkflowProperties []IdNamespaceIdMappingWorkflowProperties `pulumi:"idMappingWorkflowProperties"`
	// The arn associated with the IdNamespace
	IdNamespaceArn *string `pulumi:"idNamespaceArn"`
	// A list of `InputSource` objects, which have the fields `InputSourceARN` and `SchemaName` .
	InputSourceConfig []IdNamespaceInputSource `pulumi:"inputSourceConfig"`
	// The Amazon Resource Name (ARN) of the IAM role. AWS Entity Resolution assumes this role to access the resources defined in this `IdNamespace` on your behalf as part of the workflow run.
	RoleArn *string `pulumi:"roleArn"`
	// The tags used to organize, track, or control access for this resource.
	Tags []aws.Tag `pulumi:"tags"`
	// The type of ID namespace. There are two types: `SOURCE` and `TARGET` .
	//
	// The `SOURCE` contains configurations for `sourceId` data that will be processed in an ID mapping workflow.
	//
	// The `TARGET` contains a configuration of `targetId` which all `sourceIds` will resolve to.
	Type *IdNamespaceType `pulumi:"type"`
	// The date and time when the IdNamespace was updated
	UpdatedAt *string `pulumi:"updatedAt"`
}

func LookupIdNamespaceOutput(ctx *pulumi.Context, args LookupIdNamespaceOutputArgs, opts ...pulumi.InvokeOption) LookupIdNamespaceResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupIdNamespaceResultOutput, error) {
			args := v.(LookupIdNamespaceArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:entityresolution:getIdNamespace", args, LookupIdNamespaceResultOutput{}, options).(LookupIdNamespaceResultOutput), nil
		}).(LookupIdNamespaceResultOutput)
}

type LookupIdNamespaceOutputArgs struct {
	// The name of the ID namespace.
	IdNamespaceName pulumi.StringInput `pulumi:"idNamespaceName"`
}

func (LookupIdNamespaceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIdNamespaceArgs)(nil)).Elem()
}

type LookupIdNamespaceResultOutput struct{ *pulumi.OutputState }

func (LookupIdNamespaceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIdNamespaceResult)(nil)).Elem()
}

func (o LookupIdNamespaceResultOutput) ToLookupIdNamespaceResultOutput() LookupIdNamespaceResultOutput {
	return o
}

func (o LookupIdNamespaceResultOutput) ToLookupIdNamespaceResultOutputWithContext(ctx context.Context) LookupIdNamespaceResultOutput {
	return o
}

// The date and time when the IdNamespace was created
func (o LookupIdNamespaceResultOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIdNamespaceResult) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The description of the ID namespace.
func (o LookupIdNamespaceResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIdNamespaceResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Determines the properties of `IdMappingWorflow` where this `IdNamespace` can be used as a `Source` or a `Target` .
func (o LookupIdNamespaceResultOutput) IdMappingWorkflowProperties() IdNamespaceIdMappingWorkflowPropertiesArrayOutput {
	return o.ApplyT(func(v LookupIdNamespaceResult) []IdNamespaceIdMappingWorkflowProperties {
		return v.IdMappingWorkflowProperties
	}).(IdNamespaceIdMappingWorkflowPropertiesArrayOutput)
}

// The arn associated with the IdNamespace
func (o LookupIdNamespaceResultOutput) IdNamespaceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIdNamespaceResult) *string { return v.IdNamespaceArn }).(pulumi.StringPtrOutput)
}

// A list of `InputSource` objects, which have the fields `InputSourceARN` and `SchemaName` .
func (o LookupIdNamespaceResultOutput) InputSourceConfig() IdNamespaceInputSourceArrayOutput {
	return o.ApplyT(func(v LookupIdNamespaceResult) []IdNamespaceInputSource { return v.InputSourceConfig }).(IdNamespaceInputSourceArrayOutput)
}

// The Amazon Resource Name (ARN) of the IAM role. AWS Entity Resolution assumes this role to access the resources defined in this `IdNamespace` on your behalf as part of the workflow run.
func (o LookupIdNamespaceResultOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIdNamespaceResult) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// The tags used to organize, track, or control access for this resource.
func (o LookupIdNamespaceResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupIdNamespaceResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

// The type of ID namespace. There are two types: `SOURCE` and `TARGET` .
//
// The `SOURCE` contains configurations for `sourceId` data that will be processed in an ID mapping workflow.
//
// The `TARGET` contains a configuration of `targetId` which all `sourceIds` will resolve to.
func (o LookupIdNamespaceResultOutput) Type() IdNamespaceTypePtrOutput {
	return o.ApplyT(func(v LookupIdNamespaceResult) *IdNamespaceType { return v.Type }).(IdNamespaceTypePtrOutput)
}

// The date and time when the IdNamespace was updated
func (o LookupIdNamespaceResultOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIdNamespaceResult) *string { return v.UpdatedAt }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupIdNamespaceResultOutput{})
}
