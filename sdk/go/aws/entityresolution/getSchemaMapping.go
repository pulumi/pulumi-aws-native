// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package entityresolution

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// SchemaMapping defined in AWS Entity Resolution service
func LookupSchemaMapping(ctx *pulumi.Context, args *LookupSchemaMappingArgs, opts ...pulumi.InvokeOption) (*LookupSchemaMappingResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSchemaMappingResult
	err := ctx.Invoke("aws-native:entityresolution:getSchemaMapping", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupSchemaMappingArgs struct {
	// The name of the SchemaMapping
	SchemaName string `pulumi:"schemaName"`
}

type LookupSchemaMappingResult struct {
	CreatedAt *string            `pulumi:"createdAt"`
	SchemaArn *string            `pulumi:"schemaArn"`
	Tags      []SchemaMappingTag `pulumi:"tags"`
	UpdatedAt *string            `pulumi:"updatedAt"`
}

func LookupSchemaMappingOutput(ctx *pulumi.Context, args LookupSchemaMappingOutputArgs, opts ...pulumi.InvokeOption) LookupSchemaMappingResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSchemaMappingResult, error) {
			args := v.(LookupSchemaMappingArgs)
			r, err := LookupSchemaMapping(ctx, &args, opts...)
			var s LookupSchemaMappingResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSchemaMappingResultOutput)
}

type LookupSchemaMappingOutputArgs struct {
	// The name of the SchemaMapping
	SchemaName pulumi.StringInput `pulumi:"schemaName"`
}

func (LookupSchemaMappingOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSchemaMappingArgs)(nil)).Elem()
}

type LookupSchemaMappingResultOutput struct{ *pulumi.OutputState }

func (LookupSchemaMappingResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSchemaMappingResult)(nil)).Elem()
}

func (o LookupSchemaMappingResultOutput) ToLookupSchemaMappingResultOutput() LookupSchemaMappingResultOutput {
	return o
}

func (o LookupSchemaMappingResultOutput) ToLookupSchemaMappingResultOutputWithContext(ctx context.Context) LookupSchemaMappingResultOutput {
	return o
}

func (o LookupSchemaMappingResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupSchemaMappingResult] {
	return pulumix.Output[LookupSchemaMappingResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupSchemaMappingResultOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSchemaMappingResult) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

func (o LookupSchemaMappingResultOutput) SchemaArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSchemaMappingResult) *string { return v.SchemaArn }).(pulumi.StringPtrOutput)
}

func (o LookupSchemaMappingResultOutput) Tags() SchemaMappingTagArrayOutput {
	return o.ApplyT(func(v LookupSchemaMappingResult) []SchemaMappingTag { return v.Tags }).(SchemaMappingTagArrayOutput)
}

func (o LookupSchemaMappingResultOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSchemaMappingResult) *string { return v.UpdatedAt }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSchemaMappingResultOutput{})
}
