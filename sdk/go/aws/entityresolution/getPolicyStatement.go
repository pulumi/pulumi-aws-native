// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package entityresolution

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Policy Statement defined in AWS Entity Resolution Service
func LookupPolicyStatement(ctx *pulumi.Context, args *LookupPolicyStatementArgs, opts ...pulumi.InvokeOption) (*LookupPolicyStatementResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPolicyStatementResult
	err := ctx.Invoke("aws-native:entityresolution:getPolicyStatement", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupPolicyStatementArgs struct {
	Arn         string `pulumi:"arn"`
	StatementId string `pulumi:"statementId"`
}

type LookupPolicyStatementResult struct {
	Action    []string                        `pulumi:"action"`
	Condition *string                         `pulumi:"condition"`
	Effect    *PolicyStatementStatementEffect `pulumi:"effect"`
	Principal []string                        `pulumi:"principal"`
}

func LookupPolicyStatementOutput(ctx *pulumi.Context, args LookupPolicyStatementOutputArgs, opts ...pulumi.InvokeOption) LookupPolicyStatementResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupPolicyStatementResult, error) {
			args := v.(LookupPolicyStatementArgs)
			r, err := LookupPolicyStatement(ctx, &args, opts...)
			var s LookupPolicyStatementResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupPolicyStatementResultOutput)
}

type LookupPolicyStatementOutputArgs struct {
	Arn         pulumi.StringInput `pulumi:"arn"`
	StatementId pulumi.StringInput `pulumi:"statementId"`
}

func (LookupPolicyStatementOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPolicyStatementArgs)(nil)).Elem()
}

type LookupPolicyStatementResultOutput struct{ *pulumi.OutputState }

func (LookupPolicyStatementResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPolicyStatementResult)(nil)).Elem()
}

func (o LookupPolicyStatementResultOutput) ToLookupPolicyStatementResultOutput() LookupPolicyStatementResultOutput {
	return o
}

func (o LookupPolicyStatementResultOutput) ToLookupPolicyStatementResultOutputWithContext(ctx context.Context) LookupPolicyStatementResultOutput {
	return o
}

func (o LookupPolicyStatementResultOutput) Action() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupPolicyStatementResult) []string { return v.Action }).(pulumi.StringArrayOutput)
}

func (o LookupPolicyStatementResultOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPolicyStatementResult) *string { return v.Condition }).(pulumi.StringPtrOutput)
}

func (o LookupPolicyStatementResultOutput) Effect() PolicyStatementStatementEffectPtrOutput {
	return o.ApplyT(func(v LookupPolicyStatementResult) *PolicyStatementStatementEffect { return v.Effect }).(PolicyStatementStatementEffectPtrOutput)
}

func (o LookupPolicyStatementResultOutput) Principal() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupPolicyStatementResult) []string { return v.Principal }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPolicyStatementResultOutput{})
}
