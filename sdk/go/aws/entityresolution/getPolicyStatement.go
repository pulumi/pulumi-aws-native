// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package entityresolution

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Policy Statement defined in AWS Entity Resolution Service
func LookupPolicyStatement(ctx *pulumi.Context, args *LookupPolicyStatementArgs, opts ...pulumi.InvokeOption) (*LookupPolicyStatementResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPolicyStatementResult
	err := ctx.Invoke("aws-native:entityresolution:getPolicyStatement", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupPolicyStatementArgs struct {
	// The Amazon Resource Name (ARN) of the resource that will be accessed by the principal.
	Arn string `pulumi:"arn"`
	// A statement identifier that differentiates the statement from others in the same policy.
	StatementId string `pulumi:"statementId"`
}

type LookupPolicyStatementResult struct {
	// The action that the principal can use on the resource.
	//
	// For example, `entityresolution:GetIdMappingJob` , `entityresolution:GetMatchingJob` .
	Action []string `pulumi:"action"`
	// A set of condition keys that you can use in key policies.
	Condition *string `pulumi:"condition"`
	// Determines whether the permissions specified in the policy are to be allowed ( `Allow` ) or denied ( `Deny` ).
	//
	// > If you set the value of the `effect` parameter to `Deny` for the `AddPolicyStatement` operation, you must also set the value of the `effect` parameter in the `policy` to `Deny` for the `PutPolicy` operation.
	Effect *PolicyStatementStatementEffect `pulumi:"effect"`
	// The AWS service or AWS account that can access the resource defined as ARN.
	Principal []string `pulumi:"principal"`
}

func LookupPolicyStatementOutput(ctx *pulumi.Context, args LookupPolicyStatementOutputArgs, opts ...pulumi.InvokeOption) LookupPolicyStatementResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupPolicyStatementResultOutput, error) {
			args := v.(LookupPolicyStatementArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupPolicyStatementResult
			secret, err := ctx.InvokePackageRaw("aws-native:entityresolution:getPolicyStatement", args, &rv, "", opts...)
			if err != nil {
				return LookupPolicyStatementResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupPolicyStatementResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupPolicyStatementResultOutput), nil
			}
			return output, nil
		}).(LookupPolicyStatementResultOutput)
}

type LookupPolicyStatementOutputArgs struct {
	// The Amazon Resource Name (ARN) of the resource that will be accessed by the principal.
	Arn pulumi.StringInput `pulumi:"arn"`
	// A statement identifier that differentiates the statement from others in the same policy.
	StatementId pulumi.StringInput `pulumi:"statementId"`
}

func (LookupPolicyStatementOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPolicyStatementArgs)(nil)).Elem()
}

type LookupPolicyStatementResultOutput struct{ *pulumi.OutputState }

func (LookupPolicyStatementResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPolicyStatementResult)(nil)).Elem()
}

func (o LookupPolicyStatementResultOutput) ToLookupPolicyStatementResultOutput() LookupPolicyStatementResultOutput {
	return o
}

func (o LookupPolicyStatementResultOutput) ToLookupPolicyStatementResultOutputWithContext(ctx context.Context) LookupPolicyStatementResultOutput {
	return o
}

// The action that the principal can use on the resource.
//
// For example, `entityresolution:GetIdMappingJob` , `entityresolution:GetMatchingJob` .
func (o LookupPolicyStatementResultOutput) Action() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupPolicyStatementResult) []string { return v.Action }).(pulumi.StringArrayOutput)
}

// A set of condition keys that you can use in key policies.
func (o LookupPolicyStatementResultOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPolicyStatementResult) *string { return v.Condition }).(pulumi.StringPtrOutput)
}

// Determines whether the permissions specified in the policy are to be allowed ( `Allow` ) or denied ( `Deny` ).
//
// > If you set the value of the `effect` parameter to `Deny` for the `AddPolicyStatement` operation, you must also set the value of the `effect` parameter in the `policy` to `Deny` for the `PutPolicy` operation.
func (o LookupPolicyStatementResultOutput) Effect() PolicyStatementStatementEffectPtrOutput {
	return o.ApplyT(func(v LookupPolicyStatementResult) *PolicyStatementStatementEffect { return v.Effect }).(PolicyStatementStatementEffectPtrOutput)
}

// The AWS service or AWS account that can access the resource defined as ARN.
func (o LookupPolicyStatementResultOutput) Principal() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupPolicyStatementResult) []string { return v.Principal }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPolicyStatementResultOutput{})
}
