// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package entityresolution

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// IdMappingWorkflow defined in AWS Entity Resolution service
type IdMappingWorkflow struct {
	pulumi.CustomResourceState

	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The description of the IdMappingWorkflow
	Description         pulumi.StringPtrOutput                     `pulumi:"description"`
	IdMappingTechniques IdMappingWorkflowIdMappingTechniquesOutput `pulumi:"idMappingTechniques"`
	InputSourceConfig   IdMappingWorkflowInputSourceArrayOutput    `pulumi:"inputSourceConfig"`
	OutputSourceConfig  IdMappingWorkflowOutputSourceArrayOutput   `pulumi:"outputSourceConfig"`
	RoleArn             pulumi.StringOutput                        `pulumi:"roleArn"`
	Tags                IdMappingWorkflowTagArrayOutput            `pulumi:"tags"`
	UpdatedAt           pulumi.StringOutput                        `pulumi:"updatedAt"`
	WorkflowArn         pulumi.StringOutput                        `pulumi:"workflowArn"`
	// The name of the IdMappingWorkflow
	WorkflowName pulumi.StringOutput `pulumi:"workflowName"`
}

// NewIdMappingWorkflow registers a new resource with the given unique name, arguments, and options.
func NewIdMappingWorkflow(ctx *pulumi.Context,
	name string, args *IdMappingWorkflowArgs, opts ...pulumi.ResourceOption) (*IdMappingWorkflow, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IdMappingTechniques == nil {
		return nil, errors.New("invalid value for required argument 'IdMappingTechniques'")
	}
	if args.InputSourceConfig == nil {
		return nil, errors.New("invalid value for required argument 'InputSourceConfig'")
	}
	if args.OutputSourceConfig == nil {
		return nil, errors.New("invalid value for required argument 'OutputSourceConfig'")
	}
	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	if args.WorkflowName == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowName'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"workflowName",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IdMappingWorkflow
	err := ctx.RegisterResource("aws-native:entityresolution:IdMappingWorkflow", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIdMappingWorkflow gets an existing IdMappingWorkflow resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdMappingWorkflow(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IdMappingWorkflowState, opts ...pulumi.ResourceOption) (*IdMappingWorkflow, error) {
	var resource IdMappingWorkflow
	err := ctx.ReadResource("aws-native:entityresolution:IdMappingWorkflow", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IdMappingWorkflow resources.
type idMappingWorkflowState struct {
}

type IdMappingWorkflowState struct {
}

func (IdMappingWorkflowState) ElementType() reflect.Type {
	return reflect.TypeOf((*idMappingWorkflowState)(nil)).Elem()
}

type idMappingWorkflowArgs struct {
	// The description of the IdMappingWorkflow
	Description         *string                              `pulumi:"description"`
	IdMappingTechniques IdMappingWorkflowIdMappingTechniques `pulumi:"idMappingTechniques"`
	InputSourceConfig   []IdMappingWorkflowInputSource       `pulumi:"inputSourceConfig"`
	OutputSourceConfig  []IdMappingWorkflowOutputSource      `pulumi:"outputSourceConfig"`
	RoleArn             string                               `pulumi:"roleArn"`
	Tags                []IdMappingWorkflowTag               `pulumi:"tags"`
	// The name of the IdMappingWorkflow
	WorkflowName string `pulumi:"workflowName"`
}

// The set of arguments for constructing a IdMappingWorkflow resource.
type IdMappingWorkflowArgs struct {
	// The description of the IdMappingWorkflow
	Description         pulumi.StringPtrInput
	IdMappingTechniques IdMappingWorkflowIdMappingTechniquesInput
	InputSourceConfig   IdMappingWorkflowInputSourceArrayInput
	OutputSourceConfig  IdMappingWorkflowOutputSourceArrayInput
	RoleArn             pulumi.StringInput
	Tags                IdMappingWorkflowTagArrayInput
	// The name of the IdMappingWorkflow
	WorkflowName pulumi.StringInput
}

func (IdMappingWorkflowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*idMappingWorkflowArgs)(nil)).Elem()
}

type IdMappingWorkflowInput interface {
	pulumi.Input

	ToIdMappingWorkflowOutput() IdMappingWorkflowOutput
	ToIdMappingWorkflowOutputWithContext(ctx context.Context) IdMappingWorkflowOutput
}

func (*IdMappingWorkflow) ElementType() reflect.Type {
	return reflect.TypeOf((**IdMappingWorkflow)(nil)).Elem()
}

func (i *IdMappingWorkflow) ToIdMappingWorkflowOutput() IdMappingWorkflowOutput {
	return i.ToIdMappingWorkflowOutputWithContext(context.Background())
}

func (i *IdMappingWorkflow) ToIdMappingWorkflowOutputWithContext(ctx context.Context) IdMappingWorkflowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdMappingWorkflowOutput)
}

func (i *IdMappingWorkflow) ToOutput(ctx context.Context) pulumix.Output[*IdMappingWorkflow] {
	return pulumix.Output[*IdMappingWorkflow]{
		OutputState: i.ToIdMappingWorkflowOutputWithContext(ctx).OutputState,
	}
}

type IdMappingWorkflowOutput struct{ *pulumi.OutputState }

func (IdMappingWorkflowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdMappingWorkflow)(nil)).Elem()
}

func (o IdMappingWorkflowOutput) ToIdMappingWorkflowOutput() IdMappingWorkflowOutput {
	return o
}

func (o IdMappingWorkflowOutput) ToIdMappingWorkflowOutputWithContext(ctx context.Context) IdMappingWorkflowOutput {
	return o
}

func (o IdMappingWorkflowOutput) ToOutput(ctx context.Context) pulumix.Output[*IdMappingWorkflow] {
	return pulumix.Output[*IdMappingWorkflow]{
		OutputState: o.OutputState,
	}
}

func (o IdMappingWorkflowOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *IdMappingWorkflow) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of the IdMappingWorkflow
func (o IdMappingWorkflowOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdMappingWorkflow) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o IdMappingWorkflowOutput) IdMappingTechniques() IdMappingWorkflowIdMappingTechniquesOutput {
	return o.ApplyT(func(v *IdMappingWorkflow) IdMappingWorkflowIdMappingTechniquesOutput { return v.IdMappingTechniques }).(IdMappingWorkflowIdMappingTechniquesOutput)
}

func (o IdMappingWorkflowOutput) InputSourceConfig() IdMappingWorkflowInputSourceArrayOutput {
	return o.ApplyT(func(v *IdMappingWorkflow) IdMappingWorkflowInputSourceArrayOutput { return v.InputSourceConfig }).(IdMappingWorkflowInputSourceArrayOutput)
}

func (o IdMappingWorkflowOutput) OutputSourceConfig() IdMappingWorkflowOutputSourceArrayOutput {
	return o.ApplyT(func(v *IdMappingWorkflow) IdMappingWorkflowOutputSourceArrayOutput { return v.OutputSourceConfig }).(IdMappingWorkflowOutputSourceArrayOutput)
}

func (o IdMappingWorkflowOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *IdMappingWorkflow) pulumi.StringOutput { return v.RoleArn }).(pulumi.StringOutput)
}

func (o IdMappingWorkflowOutput) Tags() IdMappingWorkflowTagArrayOutput {
	return o.ApplyT(func(v *IdMappingWorkflow) IdMappingWorkflowTagArrayOutput { return v.Tags }).(IdMappingWorkflowTagArrayOutput)
}

func (o IdMappingWorkflowOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *IdMappingWorkflow) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

func (o IdMappingWorkflowOutput) WorkflowArn() pulumi.StringOutput {
	return o.ApplyT(func(v *IdMappingWorkflow) pulumi.StringOutput { return v.WorkflowArn }).(pulumi.StringOutput)
}

// The name of the IdMappingWorkflow
func (o IdMappingWorkflowOutput) WorkflowName() pulumi.StringOutput {
	return o.ApplyT(func(v *IdMappingWorkflow) pulumi.StringOutput { return v.WorkflowName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IdMappingWorkflowInput)(nil)).Elem(), &IdMappingWorkflow{})
	pulumi.RegisterOutputType(IdMappingWorkflowOutput{})
}
