// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package synthetics

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type CanaryArtifactConfig struct {
	// Encryption configuration for uploading artifacts to S3
	S3Encryption *CanaryS3Encryption `pulumi:"s3Encryption"`
}

// CanaryArtifactConfigInput is an input type that accepts CanaryArtifactConfigArgs and CanaryArtifactConfigOutput values.
// You can construct a concrete instance of `CanaryArtifactConfigInput` via:
//
//	CanaryArtifactConfigArgs{...}
type CanaryArtifactConfigInput interface {
	pulumi.Input

	ToCanaryArtifactConfigOutput() CanaryArtifactConfigOutput
	ToCanaryArtifactConfigOutputWithContext(context.Context) CanaryArtifactConfigOutput
}

type CanaryArtifactConfigArgs struct {
	// Encryption configuration for uploading artifacts to S3
	S3Encryption CanaryS3EncryptionPtrInput `pulumi:"s3Encryption"`
}

func (CanaryArtifactConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CanaryArtifactConfig)(nil)).Elem()
}

func (i CanaryArtifactConfigArgs) ToCanaryArtifactConfigOutput() CanaryArtifactConfigOutput {
	return i.ToCanaryArtifactConfigOutputWithContext(context.Background())
}

func (i CanaryArtifactConfigArgs) ToCanaryArtifactConfigOutputWithContext(ctx context.Context) CanaryArtifactConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CanaryArtifactConfigOutput)
}

func (i CanaryArtifactConfigArgs) ToCanaryArtifactConfigPtrOutput() CanaryArtifactConfigPtrOutput {
	return i.ToCanaryArtifactConfigPtrOutputWithContext(context.Background())
}

func (i CanaryArtifactConfigArgs) ToCanaryArtifactConfigPtrOutputWithContext(ctx context.Context) CanaryArtifactConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CanaryArtifactConfigOutput).ToCanaryArtifactConfigPtrOutputWithContext(ctx)
}

// CanaryArtifactConfigPtrInput is an input type that accepts CanaryArtifactConfigArgs, CanaryArtifactConfigPtr and CanaryArtifactConfigPtrOutput values.
// You can construct a concrete instance of `CanaryArtifactConfigPtrInput` via:
//
//	        CanaryArtifactConfigArgs{...}
//
//	or:
//
//	        nil
type CanaryArtifactConfigPtrInput interface {
	pulumi.Input

	ToCanaryArtifactConfigPtrOutput() CanaryArtifactConfigPtrOutput
	ToCanaryArtifactConfigPtrOutputWithContext(context.Context) CanaryArtifactConfigPtrOutput
}

type canaryArtifactConfigPtrType CanaryArtifactConfigArgs

func CanaryArtifactConfigPtr(v *CanaryArtifactConfigArgs) CanaryArtifactConfigPtrInput {
	return (*canaryArtifactConfigPtrType)(v)
}

func (*canaryArtifactConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CanaryArtifactConfig)(nil)).Elem()
}

func (i *canaryArtifactConfigPtrType) ToCanaryArtifactConfigPtrOutput() CanaryArtifactConfigPtrOutput {
	return i.ToCanaryArtifactConfigPtrOutputWithContext(context.Background())
}

func (i *canaryArtifactConfigPtrType) ToCanaryArtifactConfigPtrOutputWithContext(ctx context.Context) CanaryArtifactConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CanaryArtifactConfigPtrOutput)
}

type CanaryArtifactConfigOutput struct{ *pulumi.OutputState }

func (CanaryArtifactConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CanaryArtifactConfig)(nil)).Elem()
}

func (o CanaryArtifactConfigOutput) ToCanaryArtifactConfigOutput() CanaryArtifactConfigOutput {
	return o
}

func (o CanaryArtifactConfigOutput) ToCanaryArtifactConfigOutputWithContext(ctx context.Context) CanaryArtifactConfigOutput {
	return o
}

func (o CanaryArtifactConfigOutput) ToCanaryArtifactConfigPtrOutput() CanaryArtifactConfigPtrOutput {
	return o.ToCanaryArtifactConfigPtrOutputWithContext(context.Background())
}

func (o CanaryArtifactConfigOutput) ToCanaryArtifactConfigPtrOutputWithContext(ctx context.Context) CanaryArtifactConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CanaryArtifactConfig) *CanaryArtifactConfig {
		return &v
	}).(CanaryArtifactConfigPtrOutput)
}

// Encryption configuration for uploading artifacts to S3
func (o CanaryArtifactConfigOutput) S3Encryption() CanaryS3EncryptionPtrOutput {
	return o.ApplyT(func(v CanaryArtifactConfig) *CanaryS3Encryption { return v.S3Encryption }).(CanaryS3EncryptionPtrOutput)
}

type CanaryArtifactConfigPtrOutput struct{ *pulumi.OutputState }

func (CanaryArtifactConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CanaryArtifactConfig)(nil)).Elem()
}

func (o CanaryArtifactConfigPtrOutput) ToCanaryArtifactConfigPtrOutput() CanaryArtifactConfigPtrOutput {
	return o
}

func (o CanaryArtifactConfigPtrOutput) ToCanaryArtifactConfigPtrOutputWithContext(ctx context.Context) CanaryArtifactConfigPtrOutput {
	return o
}

func (o CanaryArtifactConfigPtrOutput) Elem() CanaryArtifactConfigOutput {
	return o.ApplyT(func(v *CanaryArtifactConfig) CanaryArtifactConfig {
		if v != nil {
			return *v
		}
		var ret CanaryArtifactConfig
		return ret
	}).(CanaryArtifactConfigOutput)
}

// Encryption configuration for uploading artifacts to S3
func (o CanaryArtifactConfigPtrOutput) S3Encryption() CanaryS3EncryptionPtrOutput {
	return o.ApplyT(func(v *CanaryArtifactConfig) *CanaryS3Encryption {
		if v == nil {
			return nil
		}
		return v.S3Encryption
	}).(CanaryS3EncryptionPtrOutput)
}

type CanaryBaseScreenshot struct {
	// List of coordinates of rectangles to be ignored during visual testing
	IgnoreCoordinates []string `pulumi:"ignoreCoordinates"`
	// Name of the screenshot to be used as base reference for visual testing
	ScreenshotName string `pulumi:"screenshotName"`
}

// CanaryBaseScreenshotInput is an input type that accepts CanaryBaseScreenshotArgs and CanaryBaseScreenshotOutput values.
// You can construct a concrete instance of `CanaryBaseScreenshotInput` via:
//
//	CanaryBaseScreenshotArgs{...}
type CanaryBaseScreenshotInput interface {
	pulumi.Input

	ToCanaryBaseScreenshotOutput() CanaryBaseScreenshotOutput
	ToCanaryBaseScreenshotOutputWithContext(context.Context) CanaryBaseScreenshotOutput
}

type CanaryBaseScreenshotArgs struct {
	// List of coordinates of rectangles to be ignored during visual testing
	IgnoreCoordinates pulumi.StringArrayInput `pulumi:"ignoreCoordinates"`
	// Name of the screenshot to be used as base reference for visual testing
	ScreenshotName pulumi.StringInput `pulumi:"screenshotName"`
}

func (CanaryBaseScreenshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CanaryBaseScreenshot)(nil)).Elem()
}

func (i CanaryBaseScreenshotArgs) ToCanaryBaseScreenshotOutput() CanaryBaseScreenshotOutput {
	return i.ToCanaryBaseScreenshotOutputWithContext(context.Background())
}

func (i CanaryBaseScreenshotArgs) ToCanaryBaseScreenshotOutputWithContext(ctx context.Context) CanaryBaseScreenshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CanaryBaseScreenshotOutput)
}

// CanaryBaseScreenshotArrayInput is an input type that accepts CanaryBaseScreenshotArray and CanaryBaseScreenshotArrayOutput values.
// You can construct a concrete instance of `CanaryBaseScreenshotArrayInput` via:
//
//	CanaryBaseScreenshotArray{ CanaryBaseScreenshotArgs{...} }
type CanaryBaseScreenshotArrayInput interface {
	pulumi.Input

	ToCanaryBaseScreenshotArrayOutput() CanaryBaseScreenshotArrayOutput
	ToCanaryBaseScreenshotArrayOutputWithContext(context.Context) CanaryBaseScreenshotArrayOutput
}

type CanaryBaseScreenshotArray []CanaryBaseScreenshotInput

func (CanaryBaseScreenshotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CanaryBaseScreenshot)(nil)).Elem()
}

func (i CanaryBaseScreenshotArray) ToCanaryBaseScreenshotArrayOutput() CanaryBaseScreenshotArrayOutput {
	return i.ToCanaryBaseScreenshotArrayOutputWithContext(context.Background())
}

func (i CanaryBaseScreenshotArray) ToCanaryBaseScreenshotArrayOutputWithContext(ctx context.Context) CanaryBaseScreenshotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CanaryBaseScreenshotArrayOutput)
}

type CanaryBaseScreenshotOutput struct{ *pulumi.OutputState }

func (CanaryBaseScreenshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CanaryBaseScreenshot)(nil)).Elem()
}

func (o CanaryBaseScreenshotOutput) ToCanaryBaseScreenshotOutput() CanaryBaseScreenshotOutput {
	return o
}

func (o CanaryBaseScreenshotOutput) ToCanaryBaseScreenshotOutputWithContext(ctx context.Context) CanaryBaseScreenshotOutput {
	return o
}

// List of coordinates of rectangles to be ignored during visual testing
func (o CanaryBaseScreenshotOutput) IgnoreCoordinates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CanaryBaseScreenshot) []string { return v.IgnoreCoordinates }).(pulumi.StringArrayOutput)
}

// Name of the screenshot to be used as base reference for visual testing
func (o CanaryBaseScreenshotOutput) ScreenshotName() pulumi.StringOutput {
	return o.ApplyT(func(v CanaryBaseScreenshot) string { return v.ScreenshotName }).(pulumi.StringOutput)
}

type CanaryBaseScreenshotArrayOutput struct{ *pulumi.OutputState }

func (CanaryBaseScreenshotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CanaryBaseScreenshot)(nil)).Elem()
}

func (o CanaryBaseScreenshotArrayOutput) ToCanaryBaseScreenshotArrayOutput() CanaryBaseScreenshotArrayOutput {
	return o
}

func (o CanaryBaseScreenshotArrayOutput) ToCanaryBaseScreenshotArrayOutputWithContext(ctx context.Context) CanaryBaseScreenshotArrayOutput {
	return o
}

func (o CanaryBaseScreenshotArrayOutput) Index(i pulumi.IntInput) CanaryBaseScreenshotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CanaryBaseScreenshot {
		return vs[0].([]CanaryBaseScreenshot)[vs[1].(int)]
	}).(CanaryBaseScreenshotOutput)
}

type CanaryBrowserConfig struct {
	BrowserType CanaryBrowserType `pulumi:"browserType"`
}

// CanaryBrowserConfigInput is an input type that accepts CanaryBrowserConfigArgs and CanaryBrowserConfigOutput values.
// You can construct a concrete instance of `CanaryBrowserConfigInput` via:
//
//	CanaryBrowserConfigArgs{...}
type CanaryBrowserConfigInput interface {
	pulumi.Input

	ToCanaryBrowserConfigOutput() CanaryBrowserConfigOutput
	ToCanaryBrowserConfigOutputWithContext(context.Context) CanaryBrowserConfigOutput
}

type CanaryBrowserConfigArgs struct {
	BrowserType CanaryBrowserTypeInput `pulumi:"browserType"`
}

func (CanaryBrowserConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CanaryBrowserConfig)(nil)).Elem()
}

func (i CanaryBrowserConfigArgs) ToCanaryBrowserConfigOutput() CanaryBrowserConfigOutput {
	return i.ToCanaryBrowserConfigOutputWithContext(context.Background())
}

func (i CanaryBrowserConfigArgs) ToCanaryBrowserConfigOutputWithContext(ctx context.Context) CanaryBrowserConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CanaryBrowserConfigOutput)
}

// CanaryBrowserConfigArrayInput is an input type that accepts CanaryBrowserConfigArray and CanaryBrowserConfigArrayOutput values.
// You can construct a concrete instance of `CanaryBrowserConfigArrayInput` via:
//
//	CanaryBrowserConfigArray{ CanaryBrowserConfigArgs{...} }
type CanaryBrowserConfigArrayInput interface {
	pulumi.Input

	ToCanaryBrowserConfigArrayOutput() CanaryBrowserConfigArrayOutput
	ToCanaryBrowserConfigArrayOutputWithContext(context.Context) CanaryBrowserConfigArrayOutput
}

type CanaryBrowserConfigArray []CanaryBrowserConfigInput

func (CanaryBrowserConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CanaryBrowserConfig)(nil)).Elem()
}

func (i CanaryBrowserConfigArray) ToCanaryBrowserConfigArrayOutput() CanaryBrowserConfigArrayOutput {
	return i.ToCanaryBrowserConfigArrayOutputWithContext(context.Background())
}

func (i CanaryBrowserConfigArray) ToCanaryBrowserConfigArrayOutputWithContext(ctx context.Context) CanaryBrowserConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CanaryBrowserConfigArrayOutput)
}

type CanaryBrowserConfigOutput struct{ *pulumi.OutputState }

func (CanaryBrowserConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CanaryBrowserConfig)(nil)).Elem()
}

func (o CanaryBrowserConfigOutput) ToCanaryBrowserConfigOutput() CanaryBrowserConfigOutput {
	return o
}

func (o CanaryBrowserConfigOutput) ToCanaryBrowserConfigOutputWithContext(ctx context.Context) CanaryBrowserConfigOutput {
	return o
}

func (o CanaryBrowserConfigOutput) BrowserType() CanaryBrowserTypeOutput {
	return o.ApplyT(func(v CanaryBrowserConfig) CanaryBrowserType { return v.BrowserType }).(CanaryBrowserTypeOutput)
}

type CanaryBrowserConfigArrayOutput struct{ *pulumi.OutputState }

func (CanaryBrowserConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CanaryBrowserConfig)(nil)).Elem()
}

func (o CanaryBrowserConfigArrayOutput) ToCanaryBrowserConfigArrayOutput() CanaryBrowserConfigArrayOutput {
	return o
}

func (o CanaryBrowserConfigArrayOutput) ToCanaryBrowserConfigArrayOutputWithContext(ctx context.Context) CanaryBrowserConfigArrayOutput {
	return o
}

func (o CanaryBrowserConfigArrayOutput) Index(i pulumi.IntInput) CanaryBrowserConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CanaryBrowserConfig {
		return vs[0].([]CanaryBrowserConfig)[vs[1].(int)]
	}).(CanaryBrowserConfigOutput)
}

type CanaryCode struct {
	// List of Lambda layers to attach to the canary
	Dependencies []CanaryDependency `pulumi:"dependencies"`
	// The entry point to use for the source code when running the canary. For canaries that use the `syn-python-selenium-1.0` runtime or a `syn-nodejs.puppeteer` runtime earlier than `syn-nodejs.puppeteer-3.4` , the handler must be specified as `*fileName* .handler` . For `syn-python-selenium-1.1` , `syn-nodejs.puppeteer-3.4` , and later runtimes, the handler can be specified as `*fileName* . *functionName*` , or you can specify a folder where canary scripts reside as `*folder* / *fileName* . *functionName*` .
	Handler string `pulumi:"handler"`
	// If your canary script is located in S3, specify the bucket name here. The bucket must already exist.
	S3Bucket *string `pulumi:"s3Bucket"`
	// The Amazon S3 key of your script. For more information, see [Working with Amazon S3 Objects](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingObjects.html) .
	S3Key *string `pulumi:"s3Key"`
	// The Amazon S3 version ID of your script.
	S3ObjectVersion *string `pulumi:"s3ObjectVersion"`
	// If you input your canary script directly into the canary instead of referring to an S3 location, the value of this parameter is the script in plain text. It can be up to 5 MB.
	Script *string `pulumi:"script"`
	// The ARN of the Lambda layer where Synthetics stores the canary script code.
	SourceLocationArn *string `pulumi:"sourceLocationArn"`
}

// CanaryCodeInput is an input type that accepts CanaryCodeArgs and CanaryCodeOutput values.
// You can construct a concrete instance of `CanaryCodeInput` via:
//
//	CanaryCodeArgs{...}
type CanaryCodeInput interface {
	pulumi.Input

	ToCanaryCodeOutput() CanaryCodeOutput
	ToCanaryCodeOutputWithContext(context.Context) CanaryCodeOutput
}

type CanaryCodeArgs struct {
	// List of Lambda layers to attach to the canary
	Dependencies CanaryDependencyArrayInput `pulumi:"dependencies"`
	// The entry point to use for the source code when running the canary. For canaries that use the `syn-python-selenium-1.0` runtime or a `syn-nodejs.puppeteer` runtime earlier than `syn-nodejs.puppeteer-3.4` , the handler must be specified as `*fileName* .handler` . For `syn-python-selenium-1.1` , `syn-nodejs.puppeteer-3.4` , and later runtimes, the handler can be specified as `*fileName* . *functionName*` , or you can specify a folder where canary scripts reside as `*folder* / *fileName* . *functionName*` .
	Handler pulumi.StringInput `pulumi:"handler"`
	// If your canary script is located in S3, specify the bucket name here. The bucket must already exist.
	S3Bucket pulumi.StringPtrInput `pulumi:"s3Bucket"`
	// The Amazon S3 key of your script. For more information, see [Working with Amazon S3 Objects](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingObjects.html) .
	S3Key pulumi.StringPtrInput `pulumi:"s3Key"`
	// The Amazon S3 version ID of your script.
	S3ObjectVersion pulumi.StringPtrInput `pulumi:"s3ObjectVersion"`
	// If you input your canary script directly into the canary instead of referring to an S3 location, the value of this parameter is the script in plain text. It can be up to 5 MB.
	Script pulumi.StringPtrInput `pulumi:"script"`
	// The ARN of the Lambda layer where Synthetics stores the canary script code.
	SourceLocationArn pulumi.StringPtrInput `pulumi:"sourceLocationArn"`
}

func (CanaryCodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CanaryCode)(nil)).Elem()
}

func (i CanaryCodeArgs) ToCanaryCodeOutput() CanaryCodeOutput {
	return i.ToCanaryCodeOutputWithContext(context.Background())
}

func (i CanaryCodeArgs) ToCanaryCodeOutputWithContext(ctx context.Context) CanaryCodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CanaryCodeOutput)
}

type CanaryCodeOutput struct{ *pulumi.OutputState }

func (CanaryCodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CanaryCode)(nil)).Elem()
}

func (o CanaryCodeOutput) ToCanaryCodeOutput() CanaryCodeOutput {
	return o
}

func (o CanaryCodeOutput) ToCanaryCodeOutputWithContext(ctx context.Context) CanaryCodeOutput {
	return o
}

// List of Lambda layers to attach to the canary
func (o CanaryCodeOutput) Dependencies() CanaryDependencyArrayOutput {
	return o.ApplyT(func(v CanaryCode) []CanaryDependency { return v.Dependencies }).(CanaryDependencyArrayOutput)
}

// The entry point to use for the source code when running the canary. For canaries that use the `syn-python-selenium-1.0` runtime or a `syn-nodejs.puppeteer` runtime earlier than `syn-nodejs.puppeteer-3.4` , the handler must be specified as `*fileName* .handler` . For `syn-python-selenium-1.1` , `syn-nodejs.puppeteer-3.4` , and later runtimes, the handler can be specified as `*fileName* . *functionName*` , or you can specify a folder where canary scripts reside as `*folder* / *fileName* . *functionName*` .
func (o CanaryCodeOutput) Handler() pulumi.StringOutput {
	return o.ApplyT(func(v CanaryCode) string { return v.Handler }).(pulumi.StringOutput)
}

// If your canary script is located in S3, specify the bucket name here. The bucket must already exist.
func (o CanaryCodeOutput) S3Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CanaryCode) *string { return v.S3Bucket }).(pulumi.StringPtrOutput)
}

// The Amazon S3 key of your script. For more information, see [Working with Amazon S3 Objects](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingObjects.html) .
func (o CanaryCodeOutput) S3Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CanaryCode) *string { return v.S3Key }).(pulumi.StringPtrOutput)
}

// The Amazon S3 version ID of your script.
func (o CanaryCodeOutput) S3ObjectVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CanaryCode) *string { return v.S3ObjectVersion }).(pulumi.StringPtrOutput)
}

// If you input your canary script directly into the canary instead of referring to an S3 location, the value of this parameter is the script in plain text. It can be up to 5 MB.
func (o CanaryCodeOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CanaryCode) *string { return v.Script }).(pulumi.StringPtrOutput)
}

// The ARN of the Lambda layer where Synthetics stores the canary script code.
func (o CanaryCodeOutput) SourceLocationArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CanaryCode) *string { return v.SourceLocationArn }).(pulumi.StringPtrOutput)
}

type CanaryCodePtrOutput struct{ *pulumi.OutputState }

func (CanaryCodePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CanaryCode)(nil)).Elem()
}

func (o CanaryCodePtrOutput) ToCanaryCodePtrOutput() CanaryCodePtrOutput {
	return o
}

func (o CanaryCodePtrOutput) ToCanaryCodePtrOutputWithContext(ctx context.Context) CanaryCodePtrOutput {
	return o
}

func (o CanaryCodePtrOutput) Elem() CanaryCodeOutput {
	return o.ApplyT(func(v *CanaryCode) CanaryCode {
		if v != nil {
			return *v
		}
		var ret CanaryCode
		return ret
	}).(CanaryCodeOutput)
}

// List of Lambda layers to attach to the canary
func (o CanaryCodePtrOutput) Dependencies() CanaryDependencyArrayOutput {
	return o.ApplyT(func(v *CanaryCode) []CanaryDependency {
		if v == nil {
			return nil
		}
		return v.Dependencies
	}).(CanaryDependencyArrayOutput)
}

// The entry point to use for the source code when running the canary. For canaries that use the `syn-python-selenium-1.0` runtime or a `syn-nodejs.puppeteer` runtime earlier than `syn-nodejs.puppeteer-3.4` , the handler must be specified as `*fileName* .handler` . For `syn-python-selenium-1.1` , `syn-nodejs.puppeteer-3.4` , and later runtimes, the handler can be specified as `*fileName* . *functionName*` , or you can specify a folder where canary scripts reside as `*folder* / *fileName* . *functionName*` .
func (o CanaryCodePtrOutput) Handler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CanaryCode) *string {
		if v == nil {
			return nil
		}
		return &v.Handler
	}).(pulumi.StringPtrOutput)
}

// If your canary script is located in S3, specify the bucket name here. The bucket must already exist.
func (o CanaryCodePtrOutput) S3Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CanaryCode) *string {
		if v == nil {
			return nil
		}
		return v.S3Bucket
	}).(pulumi.StringPtrOutput)
}

// The Amazon S3 key of your script. For more information, see [Working with Amazon S3 Objects](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingObjects.html) .
func (o CanaryCodePtrOutput) S3Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CanaryCode) *string {
		if v == nil {
			return nil
		}
		return v.S3Key
	}).(pulumi.StringPtrOutput)
}

// The Amazon S3 version ID of your script.
func (o CanaryCodePtrOutput) S3ObjectVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CanaryCode) *string {
		if v == nil {
			return nil
		}
		return v.S3ObjectVersion
	}).(pulumi.StringPtrOutput)
}

// If you input your canary script directly into the canary instead of referring to an S3 location, the value of this parameter is the script in plain text. It can be up to 5 MB.
func (o CanaryCodePtrOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CanaryCode) *string {
		if v == nil {
			return nil
		}
		return v.Script
	}).(pulumi.StringPtrOutput)
}

// The ARN of the Lambda layer where Synthetics stores the canary script code.
func (o CanaryCodePtrOutput) SourceLocationArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CanaryCode) *string {
		if v == nil {
			return nil
		}
		return v.SourceLocationArn
	}).(pulumi.StringPtrOutput)
}

type CanaryDependency struct {
	// ARN of the Lambda layer
	Reference string `pulumi:"reference"`
	// Type of dependency
	Type *CanaryDependencyType `pulumi:"type"`
}

// CanaryDependencyInput is an input type that accepts CanaryDependencyArgs and CanaryDependencyOutput values.
// You can construct a concrete instance of `CanaryDependencyInput` via:
//
//	CanaryDependencyArgs{...}
type CanaryDependencyInput interface {
	pulumi.Input

	ToCanaryDependencyOutput() CanaryDependencyOutput
	ToCanaryDependencyOutputWithContext(context.Context) CanaryDependencyOutput
}

type CanaryDependencyArgs struct {
	// ARN of the Lambda layer
	Reference pulumi.StringInput `pulumi:"reference"`
	// Type of dependency
	Type CanaryDependencyTypePtrInput `pulumi:"type"`
}

func (CanaryDependencyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CanaryDependency)(nil)).Elem()
}

func (i CanaryDependencyArgs) ToCanaryDependencyOutput() CanaryDependencyOutput {
	return i.ToCanaryDependencyOutputWithContext(context.Background())
}

func (i CanaryDependencyArgs) ToCanaryDependencyOutputWithContext(ctx context.Context) CanaryDependencyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CanaryDependencyOutput)
}

// CanaryDependencyArrayInput is an input type that accepts CanaryDependencyArray and CanaryDependencyArrayOutput values.
// You can construct a concrete instance of `CanaryDependencyArrayInput` via:
//
//	CanaryDependencyArray{ CanaryDependencyArgs{...} }
type CanaryDependencyArrayInput interface {
	pulumi.Input

	ToCanaryDependencyArrayOutput() CanaryDependencyArrayOutput
	ToCanaryDependencyArrayOutputWithContext(context.Context) CanaryDependencyArrayOutput
}

type CanaryDependencyArray []CanaryDependencyInput

func (CanaryDependencyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CanaryDependency)(nil)).Elem()
}

func (i CanaryDependencyArray) ToCanaryDependencyArrayOutput() CanaryDependencyArrayOutput {
	return i.ToCanaryDependencyArrayOutputWithContext(context.Background())
}

func (i CanaryDependencyArray) ToCanaryDependencyArrayOutputWithContext(ctx context.Context) CanaryDependencyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CanaryDependencyArrayOutput)
}

type CanaryDependencyOutput struct{ *pulumi.OutputState }

func (CanaryDependencyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CanaryDependency)(nil)).Elem()
}

func (o CanaryDependencyOutput) ToCanaryDependencyOutput() CanaryDependencyOutput {
	return o
}

func (o CanaryDependencyOutput) ToCanaryDependencyOutputWithContext(ctx context.Context) CanaryDependencyOutput {
	return o
}

// ARN of the Lambda layer
func (o CanaryDependencyOutput) Reference() pulumi.StringOutput {
	return o.ApplyT(func(v CanaryDependency) string { return v.Reference }).(pulumi.StringOutput)
}

// Type of dependency
func (o CanaryDependencyOutput) Type() CanaryDependencyTypePtrOutput {
	return o.ApplyT(func(v CanaryDependency) *CanaryDependencyType { return v.Type }).(CanaryDependencyTypePtrOutput)
}

type CanaryDependencyArrayOutput struct{ *pulumi.OutputState }

func (CanaryDependencyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CanaryDependency)(nil)).Elem()
}

func (o CanaryDependencyArrayOutput) ToCanaryDependencyArrayOutput() CanaryDependencyArrayOutput {
	return o
}

func (o CanaryDependencyArrayOutput) ToCanaryDependencyArrayOutputWithContext(ctx context.Context) CanaryDependencyArrayOutput {
	return o
}

func (o CanaryDependencyArrayOutput) Index(i pulumi.IntInput) CanaryDependencyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CanaryDependency {
		return vs[0].([]CanaryDependency)[vs[1].(int)]
	}).(CanaryDependencyOutput)
}

type CanaryRetryConfig struct {
	// maximum times the canary will be retried upon the scheduled run failure
	MaxRetries int `pulumi:"maxRetries"`
}

// CanaryRetryConfigInput is an input type that accepts CanaryRetryConfigArgs and CanaryRetryConfigOutput values.
// You can construct a concrete instance of `CanaryRetryConfigInput` via:
//
//	CanaryRetryConfigArgs{...}
type CanaryRetryConfigInput interface {
	pulumi.Input

	ToCanaryRetryConfigOutput() CanaryRetryConfigOutput
	ToCanaryRetryConfigOutputWithContext(context.Context) CanaryRetryConfigOutput
}

type CanaryRetryConfigArgs struct {
	// maximum times the canary will be retried upon the scheduled run failure
	MaxRetries pulumi.IntInput `pulumi:"maxRetries"`
}

func (CanaryRetryConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CanaryRetryConfig)(nil)).Elem()
}

func (i CanaryRetryConfigArgs) ToCanaryRetryConfigOutput() CanaryRetryConfigOutput {
	return i.ToCanaryRetryConfigOutputWithContext(context.Background())
}

func (i CanaryRetryConfigArgs) ToCanaryRetryConfigOutputWithContext(ctx context.Context) CanaryRetryConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CanaryRetryConfigOutput)
}

func (i CanaryRetryConfigArgs) ToCanaryRetryConfigPtrOutput() CanaryRetryConfigPtrOutput {
	return i.ToCanaryRetryConfigPtrOutputWithContext(context.Background())
}

func (i CanaryRetryConfigArgs) ToCanaryRetryConfigPtrOutputWithContext(ctx context.Context) CanaryRetryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CanaryRetryConfigOutput).ToCanaryRetryConfigPtrOutputWithContext(ctx)
}

// CanaryRetryConfigPtrInput is an input type that accepts CanaryRetryConfigArgs, CanaryRetryConfigPtr and CanaryRetryConfigPtrOutput values.
// You can construct a concrete instance of `CanaryRetryConfigPtrInput` via:
//
//	        CanaryRetryConfigArgs{...}
//
//	or:
//
//	        nil
type CanaryRetryConfigPtrInput interface {
	pulumi.Input

	ToCanaryRetryConfigPtrOutput() CanaryRetryConfigPtrOutput
	ToCanaryRetryConfigPtrOutputWithContext(context.Context) CanaryRetryConfigPtrOutput
}

type canaryRetryConfigPtrType CanaryRetryConfigArgs

func CanaryRetryConfigPtr(v *CanaryRetryConfigArgs) CanaryRetryConfigPtrInput {
	return (*canaryRetryConfigPtrType)(v)
}

func (*canaryRetryConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CanaryRetryConfig)(nil)).Elem()
}

func (i *canaryRetryConfigPtrType) ToCanaryRetryConfigPtrOutput() CanaryRetryConfigPtrOutput {
	return i.ToCanaryRetryConfigPtrOutputWithContext(context.Background())
}

func (i *canaryRetryConfigPtrType) ToCanaryRetryConfigPtrOutputWithContext(ctx context.Context) CanaryRetryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CanaryRetryConfigPtrOutput)
}

type CanaryRetryConfigOutput struct{ *pulumi.OutputState }

func (CanaryRetryConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CanaryRetryConfig)(nil)).Elem()
}

func (o CanaryRetryConfigOutput) ToCanaryRetryConfigOutput() CanaryRetryConfigOutput {
	return o
}

func (o CanaryRetryConfigOutput) ToCanaryRetryConfigOutputWithContext(ctx context.Context) CanaryRetryConfigOutput {
	return o
}

func (o CanaryRetryConfigOutput) ToCanaryRetryConfigPtrOutput() CanaryRetryConfigPtrOutput {
	return o.ToCanaryRetryConfigPtrOutputWithContext(context.Background())
}

func (o CanaryRetryConfigOutput) ToCanaryRetryConfigPtrOutputWithContext(ctx context.Context) CanaryRetryConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CanaryRetryConfig) *CanaryRetryConfig {
		return &v
	}).(CanaryRetryConfigPtrOutput)
}

// maximum times the canary will be retried upon the scheduled run failure
func (o CanaryRetryConfigOutput) MaxRetries() pulumi.IntOutput {
	return o.ApplyT(func(v CanaryRetryConfig) int { return v.MaxRetries }).(pulumi.IntOutput)
}

type CanaryRetryConfigPtrOutput struct{ *pulumi.OutputState }

func (CanaryRetryConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CanaryRetryConfig)(nil)).Elem()
}

func (o CanaryRetryConfigPtrOutput) ToCanaryRetryConfigPtrOutput() CanaryRetryConfigPtrOutput {
	return o
}

func (o CanaryRetryConfigPtrOutput) ToCanaryRetryConfigPtrOutputWithContext(ctx context.Context) CanaryRetryConfigPtrOutput {
	return o
}

func (o CanaryRetryConfigPtrOutput) Elem() CanaryRetryConfigOutput {
	return o.ApplyT(func(v *CanaryRetryConfig) CanaryRetryConfig {
		if v != nil {
			return *v
		}
		var ret CanaryRetryConfig
		return ret
	}).(CanaryRetryConfigOutput)
}

// maximum times the canary will be retried upon the scheduled run failure
func (o CanaryRetryConfigPtrOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CanaryRetryConfig) *int {
		if v == nil {
			return nil
		}
		return &v.MaxRetries
	}).(pulumi.IntPtrOutput)
}

type CanaryRunConfig struct {
	// Enable active tracing if set to true
	ActiveTracing *bool `pulumi:"activeTracing"`
	// Environment variable key-value pairs.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// Provide ephemeralStorage available for canary in MB
	EphemeralStorage *int `pulumi:"ephemeralStorage"`
	// Provide maximum memory available for canary in MB
	MemoryInMb *int `pulumi:"memoryInMb"`
	// Provide maximum canary timeout per run in seconds
	TimeoutInSeconds *int `pulumi:"timeoutInSeconds"`
}

// CanaryRunConfigInput is an input type that accepts CanaryRunConfigArgs and CanaryRunConfigOutput values.
// You can construct a concrete instance of `CanaryRunConfigInput` via:
//
//	CanaryRunConfigArgs{...}
type CanaryRunConfigInput interface {
	pulumi.Input

	ToCanaryRunConfigOutput() CanaryRunConfigOutput
	ToCanaryRunConfigOutputWithContext(context.Context) CanaryRunConfigOutput
}

type CanaryRunConfigArgs struct {
	// Enable active tracing if set to true
	ActiveTracing pulumi.BoolPtrInput `pulumi:"activeTracing"`
	// Environment variable key-value pairs.
	EnvironmentVariables pulumi.StringMapInput `pulumi:"environmentVariables"`
	// Provide ephemeralStorage available for canary in MB
	EphemeralStorage pulumi.IntPtrInput `pulumi:"ephemeralStorage"`
	// Provide maximum memory available for canary in MB
	MemoryInMb pulumi.IntPtrInput `pulumi:"memoryInMb"`
	// Provide maximum canary timeout per run in seconds
	TimeoutInSeconds pulumi.IntPtrInput `pulumi:"timeoutInSeconds"`
}

func (CanaryRunConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CanaryRunConfig)(nil)).Elem()
}

func (i CanaryRunConfigArgs) ToCanaryRunConfigOutput() CanaryRunConfigOutput {
	return i.ToCanaryRunConfigOutputWithContext(context.Background())
}

func (i CanaryRunConfigArgs) ToCanaryRunConfigOutputWithContext(ctx context.Context) CanaryRunConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CanaryRunConfigOutput)
}

func (i CanaryRunConfigArgs) ToCanaryRunConfigPtrOutput() CanaryRunConfigPtrOutput {
	return i.ToCanaryRunConfigPtrOutputWithContext(context.Background())
}

func (i CanaryRunConfigArgs) ToCanaryRunConfigPtrOutputWithContext(ctx context.Context) CanaryRunConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CanaryRunConfigOutput).ToCanaryRunConfigPtrOutputWithContext(ctx)
}

// CanaryRunConfigPtrInput is an input type that accepts CanaryRunConfigArgs, CanaryRunConfigPtr and CanaryRunConfigPtrOutput values.
// You can construct a concrete instance of `CanaryRunConfigPtrInput` via:
//
//	        CanaryRunConfigArgs{...}
//
//	or:
//
//	        nil
type CanaryRunConfigPtrInput interface {
	pulumi.Input

	ToCanaryRunConfigPtrOutput() CanaryRunConfigPtrOutput
	ToCanaryRunConfigPtrOutputWithContext(context.Context) CanaryRunConfigPtrOutput
}

type canaryRunConfigPtrType CanaryRunConfigArgs

func CanaryRunConfigPtr(v *CanaryRunConfigArgs) CanaryRunConfigPtrInput {
	return (*canaryRunConfigPtrType)(v)
}

func (*canaryRunConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CanaryRunConfig)(nil)).Elem()
}

func (i *canaryRunConfigPtrType) ToCanaryRunConfigPtrOutput() CanaryRunConfigPtrOutput {
	return i.ToCanaryRunConfigPtrOutputWithContext(context.Background())
}

func (i *canaryRunConfigPtrType) ToCanaryRunConfigPtrOutputWithContext(ctx context.Context) CanaryRunConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CanaryRunConfigPtrOutput)
}

type CanaryRunConfigOutput struct{ *pulumi.OutputState }

func (CanaryRunConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CanaryRunConfig)(nil)).Elem()
}

func (o CanaryRunConfigOutput) ToCanaryRunConfigOutput() CanaryRunConfigOutput {
	return o
}

func (o CanaryRunConfigOutput) ToCanaryRunConfigOutputWithContext(ctx context.Context) CanaryRunConfigOutput {
	return o
}

func (o CanaryRunConfigOutput) ToCanaryRunConfigPtrOutput() CanaryRunConfigPtrOutput {
	return o.ToCanaryRunConfigPtrOutputWithContext(context.Background())
}

func (o CanaryRunConfigOutput) ToCanaryRunConfigPtrOutputWithContext(ctx context.Context) CanaryRunConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CanaryRunConfig) *CanaryRunConfig {
		return &v
	}).(CanaryRunConfigPtrOutput)
}

// Enable active tracing if set to true
func (o CanaryRunConfigOutput) ActiveTracing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CanaryRunConfig) *bool { return v.ActiveTracing }).(pulumi.BoolPtrOutput)
}

// Environment variable key-value pairs.
func (o CanaryRunConfigOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v CanaryRunConfig) map[string]string { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// Provide ephemeralStorage available for canary in MB
func (o CanaryRunConfigOutput) EphemeralStorage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CanaryRunConfig) *int { return v.EphemeralStorage }).(pulumi.IntPtrOutput)
}

// Provide maximum memory available for canary in MB
func (o CanaryRunConfigOutput) MemoryInMb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CanaryRunConfig) *int { return v.MemoryInMb }).(pulumi.IntPtrOutput)
}

// Provide maximum canary timeout per run in seconds
func (o CanaryRunConfigOutput) TimeoutInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CanaryRunConfig) *int { return v.TimeoutInSeconds }).(pulumi.IntPtrOutput)
}

type CanaryRunConfigPtrOutput struct{ *pulumi.OutputState }

func (CanaryRunConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CanaryRunConfig)(nil)).Elem()
}

func (o CanaryRunConfigPtrOutput) ToCanaryRunConfigPtrOutput() CanaryRunConfigPtrOutput {
	return o
}

func (o CanaryRunConfigPtrOutput) ToCanaryRunConfigPtrOutputWithContext(ctx context.Context) CanaryRunConfigPtrOutput {
	return o
}

func (o CanaryRunConfigPtrOutput) Elem() CanaryRunConfigOutput {
	return o.ApplyT(func(v *CanaryRunConfig) CanaryRunConfig {
		if v != nil {
			return *v
		}
		var ret CanaryRunConfig
		return ret
	}).(CanaryRunConfigOutput)
}

// Enable active tracing if set to true
func (o CanaryRunConfigPtrOutput) ActiveTracing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CanaryRunConfig) *bool {
		if v == nil {
			return nil
		}
		return v.ActiveTracing
	}).(pulumi.BoolPtrOutput)
}

// Environment variable key-value pairs.
func (o CanaryRunConfigPtrOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CanaryRunConfig) map[string]string {
		if v == nil {
			return nil
		}
		return v.EnvironmentVariables
	}).(pulumi.StringMapOutput)
}

// Provide ephemeralStorage available for canary in MB
func (o CanaryRunConfigPtrOutput) EphemeralStorage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CanaryRunConfig) *int {
		if v == nil {
			return nil
		}
		return v.EphemeralStorage
	}).(pulumi.IntPtrOutput)
}

// Provide maximum memory available for canary in MB
func (o CanaryRunConfigPtrOutput) MemoryInMb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CanaryRunConfig) *int {
		if v == nil {
			return nil
		}
		return v.MemoryInMb
	}).(pulumi.IntPtrOutput)
}

// Provide maximum canary timeout per run in seconds
func (o CanaryRunConfigPtrOutput) TimeoutInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CanaryRunConfig) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutInSeconds
	}).(pulumi.IntPtrOutput)
}

type CanaryS3Encryption struct {
	// Encryption mode for encrypting artifacts when uploading to S3. Valid values: SSE_S3 and SSE_KMS.
	EncryptionMode *string `pulumi:"encryptionMode"`
	// KMS key Arn for encrypting artifacts when uploading to S3. You must specify KMS key Arn for SSE_KMS encryption mode only.
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
}

// CanaryS3EncryptionInput is an input type that accepts CanaryS3EncryptionArgs and CanaryS3EncryptionOutput values.
// You can construct a concrete instance of `CanaryS3EncryptionInput` via:
//
//	CanaryS3EncryptionArgs{...}
type CanaryS3EncryptionInput interface {
	pulumi.Input

	ToCanaryS3EncryptionOutput() CanaryS3EncryptionOutput
	ToCanaryS3EncryptionOutputWithContext(context.Context) CanaryS3EncryptionOutput
}

type CanaryS3EncryptionArgs struct {
	// Encryption mode for encrypting artifacts when uploading to S3. Valid values: SSE_S3 and SSE_KMS.
	EncryptionMode pulumi.StringPtrInput `pulumi:"encryptionMode"`
	// KMS key Arn for encrypting artifacts when uploading to S3. You must specify KMS key Arn for SSE_KMS encryption mode only.
	KmsKeyArn pulumi.StringPtrInput `pulumi:"kmsKeyArn"`
}

func (CanaryS3EncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CanaryS3Encryption)(nil)).Elem()
}

func (i CanaryS3EncryptionArgs) ToCanaryS3EncryptionOutput() CanaryS3EncryptionOutput {
	return i.ToCanaryS3EncryptionOutputWithContext(context.Background())
}

func (i CanaryS3EncryptionArgs) ToCanaryS3EncryptionOutputWithContext(ctx context.Context) CanaryS3EncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CanaryS3EncryptionOutput)
}

func (i CanaryS3EncryptionArgs) ToCanaryS3EncryptionPtrOutput() CanaryS3EncryptionPtrOutput {
	return i.ToCanaryS3EncryptionPtrOutputWithContext(context.Background())
}

func (i CanaryS3EncryptionArgs) ToCanaryS3EncryptionPtrOutputWithContext(ctx context.Context) CanaryS3EncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CanaryS3EncryptionOutput).ToCanaryS3EncryptionPtrOutputWithContext(ctx)
}

// CanaryS3EncryptionPtrInput is an input type that accepts CanaryS3EncryptionArgs, CanaryS3EncryptionPtr and CanaryS3EncryptionPtrOutput values.
// You can construct a concrete instance of `CanaryS3EncryptionPtrInput` via:
//
//	        CanaryS3EncryptionArgs{...}
//
//	or:
//
//	        nil
type CanaryS3EncryptionPtrInput interface {
	pulumi.Input

	ToCanaryS3EncryptionPtrOutput() CanaryS3EncryptionPtrOutput
	ToCanaryS3EncryptionPtrOutputWithContext(context.Context) CanaryS3EncryptionPtrOutput
}

type canaryS3EncryptionPtrType CanaryS3EncryptionArgs

func CanaryS3EncryptionPtr(v *CanaryS3EncryptionArgs) CanaryS3EncryptionPtrInput {
	return (*canaryS3EncryptionPtrType)(v)
}

func (*canaryS3EncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CanaryS3Encryption)(nil)).Elem()
}

func (i *canaryS3EncryptionPtrType) ToCanaryS3EncryptionPtrOutput() CanaryS3EncryptionPtrOutput {
	return i.ToCanaryS3EncryptionPtrOutputWithContext(context.Background())
}

func (i *canaryS3EncryptionPtrType) ToCanaryS3EncryptionPtrOutputWithContext(ctx context.Context) CanaryS3EncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CanaryS3EncryptionPtrOutput)
}

type CanaryS3EncryptionOutput struct{ *pulumi.OutputState }

func (CanaryS3EncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CanaryS3Encryption)(nil)).Elem()
}

func (o CanaryS3EncryptionOutput) ToCanaryS3EncryptionOutput() CanaryS3EncryptionOutput {
	return o
}

func (o CanaryS3EncryptionOutput) ToCanaryS3EncryptionOutputWithContext(ctx context.Context) CanaryS3EncryptionOutput {
	return o
}

func (o CanaryS3EncryptionOutput) ToCanaryS3EncryptionPtrOutput() CanaryS3EncryptionPtrOutput {
	return o.ToCanaryS3EncryptionPtrOutputWithContext(context.Background())
}

func (o CanaryS3EncryptionOutput) ToCanaryS3EncryptionPtrOutputWithContext(ctx context.Context) CanaryS3EncryptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CanaryS3Encryption) *CanaryS3Encryption {
		return &v
	}).(CanaryS3EncryptionPtrOutput)
}

// Encryption mode for encrypting artifacts when uploading to S3. Valid values: SSE_S3 and SSE_KMS.
func (o CanaryS3EncryptionOutput) EncryptionMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CanaryS3Encryption) *string { return v.EncryptionMode }).(pulumi.StringPtrOutput)
}

// KMS key Arn for encrypting artifacts when uploading to S3. You must specify KMS key Arn for SSE_KMS encryption mode only.
func (o CanaryS3EncryptionOutput) KmsKeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CanaryS3Encryption) *string { return v.KmsKeyArn }).(pulumi.StringPtrOutput)
}

type CanaryS3EncryptionPtrOutput struct{ *pulumi.OutputState }

func (CanaryS3EncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CanaryS3Encryption)(nil)).Elem()
}

func (o CanaryS3EncryptionPtrOutput) ToCanaryS3EncryptionPtrOutput() CanaryS3EncryptionPtrOutput {
	return o
}

func (o CanaryS3EncryptionPtrOutput) ToCanaryS3EncryptionPtrOutputWithContext(ctx context.Context) CanaryS3EncryptionPtrOutput {
	return o
}

func (o CanaryS3EncryptionPtrOutput) Elem() CanaryS3EncryptionOutput {
	return o.ApplyT(func(v *CanaryS3Encryption) CanaryS3Encryption {
		if v != nil {
			return *v
		}
		var ret CanaryS3Encryption
		return ret
	}).(CanaryS3EncryptionOutput)
}

// Encryption mode for encrypting artifacts when uploading to S3. Valid values: SSE_S3 and SSE_KMS.
func (o CanaryS3EncryptionPtrOutput) EncryptionMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CanaryS3Encryption) *string {
		if v == nil {
			return nil
		}
		return v.EncryptionMode
	}).(pulumi.StringPtrOutput)
}

// KMS key Arn for encrypting artifacts when uploading to S3. You must specify KMS key Arn for SSE_KMS encryption mode only.
func (o CanaryS3EncryptionPtrOutput) KmsKeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CanaryS3Encryption) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyArn
	}).(pulumi.StringPtrOutput)
}

type CanarySchedule struct {
	// How long, in seconds, for the canary to continue making regular runs according to the schedule in the `Expression` value. If you specify 0, the canary continues making runs until you stop it. If you omit this field, the default of 0 is used.
	DurationInSeconds *string `pulumi:"durationInSeconds"`
	// A `rate` expression or a `cron` expression that defines how often the canary is to run.
	//
	// For a rate expression, The syntax is `rate( *number unit* )` . *unit* can be `minute` , `minutes` , or `hour` .
	//
	// For example, `rate(1 minute)` runs the canary once a minute, `rate(10 minutes)` runs it once every 10 minutes, and `rate(1 hour)` runs it once every hour. You can specify a frequency between `rate(1 minute)` and `rate(1 hour)` .
	//
	// Specifying `rate(0 minute)` or `rate(0 hour)` is a special value that causes the canary to run only once when it is started.
	//
	// Use `cron( *expression* )` to specify a cron expression. You can't schedule a canary to wait for more than a year before running. For information about the syntax for cron expressions, see [Scheduling canary runs using cron](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_cron.html) .
	Expression string `pulumi:"expression"`
	// Provide canary auto retry configuration
	RetryConfig *CanaryRetryConfig `pulumi:"retryConfig"`
}

// CanaryScheduleInput is an input type that accepts CanaryScheduleArgs and CanaryScheduleOutput values.
// You can construct a concrete instance of `CanaryScheduleInput` via:
//
//	CanaryScheduleArgs{...}
type CanaryScheduleInput interface {
	pulumi.Input

	ToCanaryScheduleOutput() CanaryScheduleOutput
	ToCanaryScheduleOutputWithContext(context.Context) CanaryScheduleOutput
}

type CanaryScheduleArgs struct {
	// How long, in seconds, for the canary to continue making regular runs according to the schedule in the `Expression` value. If you specify 0, the canary continues making runs until you stop it. If you omit this field, the default of 0 is used.
	DurationInSeconds pulumi.StringPtrInput `pulumi:"durationInSeconds"`
	// A `rate` expression or a `cron` expression that defines how often the canary is to run.
	//
	// For a rate expression, The syntax is `rate( *number unit* )` . *unit* can be `minute` , `minutes` , or `hour` .
	//
	// For example, `rate(1 minute)` runs the canary once a minute, `rate(10 minutes)` runs it once every 10 minutes, and `rate(1 hour)` runs it once every hour. You can specify a frequency between `rate(1 minute)` and `rate(1 hour)` .
	//
	// Specifying `rate(0 minute)` or `rate(0 hour)` is a special value that causes the canary to run only once when it is started.
	//
	// Use `cron( *expression* )` to specify a cron expression. You can't schedule a canary to wait for more than a year before running. For information about the syntax for cron expressions, see [Scheduling canary runs using cron](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_cron.html) .
	Expression pulumi.StringInput `pulumi:"expression"`
	// Provide canary auto retry configuration
	RetryConfig CanaryRetryConfigPtrInput `pulumi:"retryConfig"`
}

func (CanaryScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CanarySchedule)(nil)).Elem()
}

func (i CanaryScheduleArgs) ToCanaryScheduleOutput() CanaryScheduleOutput {
	return i.ToCanaryScheduleOutputWithContext(context.Background())
}

func (i CanaryScheduleArgs) ToCanaryScheduleOutputWithContext(ctx context.Context) CanaryScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CanaryScheduleOutput)
}

type CanaryScheduleOutput struct{ *pulumi.OutputState }

func (CanaryScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CanarySchedule)(nil)).Elem()
}

func (o CanaryScheduleOutput) ToCanaryScheduleOutput() CanaryScheduleOutput {
	return o
}

func (o CanaryScheduleOutput) ToCanaryScheduleOutputWithContext(ctx context.Context) CanaryScheduleOutput {
	return o
}

// How long, in seconds, for the canary to continue making regular runs according to the schedule in the `Expression` value. If you specify 0, the canary continues making runs until you stop it. If you omit this field, the default of 0 is used.
func (o CanaryScheduleOutput) DurationInSeconds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CanarySchedule) *string { return v.DurationInSeconds }).(pulumi.StringPtrOutput)
}

// A `rate` expression or a `cron` expression that defines how often the canary is to run.
//
// For a rate expression, The syntax is `rate( *number unit* )` . *unit* can be `minute` , `minutes` , or `hour` .
//
// For example, `rate(1 minute)` runs the canary once a minute, `rate(10 minutes)` runs it once every 10 minutes, and `rate(1 hour)` runs it once every hour. You can specify a frequency between `rate(1 minute)` and `rate(1 hour)` .
//
// Specifying `rate(0 minute)` or `rate(0 hour)` is a special value that causes the canary to run only once when it is started.
//
// Use `cron( *expression* )` to specify a cron expression. You can't schedule a canary to wait for more than a year before running. For information about the syntax for cron expressions, see [Scheduling canary runs using cron](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_cron.html) .
func (o CanaryScheduleOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v CanarySchedule) string { return v.Expression }).(pulumi.StringOutput)
}

// Provide canary auto retry configuration
func (o CanaryScheduleOutput) RetryConfig() CanaryRetryConfigPtrOutput {
	return o.ApplyT(func(v CanarySchedule) *CanaryRetryConfig { return v.RetryConfig }).(CanaryRetryConfigPtrOutput)
}

type CanarySchedulePtrOutput struct{ *pulumi.OutputState }

func (CanarySchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CanarySchedule)(nil)).Elem()
}

func (o CanarySchedulePtrOutput) ToCanarySchedulePtrOutput() CanarySchedulePtrOutput {
	return o
}

func (o CanarySchedulePtrOutput) ToCanarySchedulePtrOutputWithContext(ctx context.Context) CanarySchedulePtrOutput {
	return o
}

func (o CanarySchedulePtrOutput) Elem() CanaryScheduleOutput {
	return o.ApplyT(func(v *CanarySchedule) CanarySchedule {
		if v != nil {
			return *v
		}
		var ret CanarySchedule
		return ret
	}).(CanaryScheduleOutput)
}

// How long, in seconds, for the canary to continue making regular runs according to the schedule in the `Expression` value. If you specify 0, the canary continues making runs until you stop it. If you omit this field, the default of 0 is used.
func (o CanarySchedulePtrOutput) DurationInSeconds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CanarySchedule) *string {
		if v == nil {
			return nil
		}
		return v.DurationInSeconds
	}).(pulumi.StringPtrOutput)
}

// A `rate` expression or a `cron` expression that defines how often the canary is to run.
//
// For a rate expression, The syntax is `rate( *number unit* )` . *unit* can be `minute` , `minutes` , or `hour` .
//
// For example, `rate(1 minute)` runs the canary once a minute, `rate(10 minutes)` runs it once every 10 minutes, and `rate(1 hour)` runs it once every hour. You can specify a frequency between `rate(1 minute)` and `rate(1 hour)` .
//
// Specifying `rate(0 minute)` or `rate(0 hour)` is a special value that causes the canary to run only once when it is started.
//
// Use `cron( *expression* )` to specify a cron expression. You can't schedule a canary to wait for more than a year before running. For information about the syntax for cron expressions, see [Scheduling canary runs using cron](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_cron.html) .
func (o CanarySchedulePtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CanarySchedule) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

// Provide canary auto retry configuration
func (o CanarySchedulePtrOutput) RetryConfig() CanaryRetryConfigPtrOutput {
	return o.ApplyT(func(v *CanarySchedule) *CanaryRetryConfig {
		if v == nil {
			return nil
		}
		return v.RetryConfig
	}).(CanaryRetryConfigPtrOutput)
}

// A key-value pair to associate with a resource.
type CanaryTag struct {
	// The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

type CanaryVisualReference struct {
	// Canary run id to be used as base reference for visual testing
	BaseCanaryRunId string `pulumi:"baseCanaryRunId"`
	// List of screenshots used as base reference for visual testing
	BaseScreenshots []CanaryBaseScreenshot `pulumi:"baseScreenshots"`
	BrowserType     *CanaryBrowserType     `pulumi:"browserType"`
}

// CanaryVisualReferenceInput is an input type that accepts CanaryVisualReferenceArgs and CanaryVisualReferenceOutput values.
// You can construct a concrete instance of `CanaryVisualReferenceInput` via:
//
//	CanaryVisualReferenceArgs{...}
type CanaryVisualReferenceInput interface {
	pulumi.Input

	ToCanaryVisualReferenceOutput() CanaryVisualReferenceOutput
	ToCanaryVisualReferenceOutputWithContext(context.Context) CanaryVisualReferenceOutput
}

type CanaryVisualReferenceArgs struct {
	// Canary run id to be used as base reference for visual testing
	BaseCanaryRunId pulumi.StringInput `pulumi:"baseCanaryRunId"`
	// List of screenshots used as base reference for visual testing
	BaseScreenshots CanaryBaseScreenshotArrayInput `pulumi:"baseScreenshots"`
	BrowserType     CanaryBrowserTypePtrInput      `pulumi:"browserType"`
}

func (CanaryVisualReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CanaryVisualReference)(nil)).Elem()
}

func (i CanaryVisualReferenceArgs) ToCanaryVisualReferenceOutput() CanaryVisualReferenceOutput {
	return i.ToCanaryVisualReferenceOutputWithContext(context.Background())
}

func (i CanaryVisualReferenceArgs) ToCanaryVisualReferenceOutputWithContext(ctx context.Context) CanaryVisualReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CanaryVisualReferenceOutput)
}

func (i CanaryVisualReferenceArgs) ToCanaryVisualReferencePtrOutput() CanaryVisualReferencePtrOutput {
	return i.ToCanaryVisualReferencePtrOutputWithContext(context.Background())
}

func (i CanaryVisualReferenceArgs) ToCanaryVisualReferencePtrOutputWithContext(ctx context.Context) CanaryVisualReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CanaryVisualReferenceOutput).ToCanaryVisualReferencePtrOutputWithContext(ctx)
}

// CanaryVisualReferencePtrInput is an input type that accepts CanaryVisualReferenceArgs, CanaryVisualReferencePtr and CanaryVisualReferencePtrOutput values.
// You can construct a concrete instance of `CanaryVisualReferencePtrInput` via:
//
//	        CanaryVisualReferenceArgs{...}
//
//	or:
//
//	        nil
type CanaryVisualReferencePtrInput interface {
	pulumi.Input

	ToCanaryVisualReferencePtrOutput() CanaryVisualReferencePtrOutput
	ToCanaryVisualReferencePtrOutputWithContext(context.Context) CanaryVisualReferencePtrOutput
}

type canaryVisualReferencePtrType CanaryVisualReferenceArgs

func CanaryVisualReferencePtr(v *CanaryVisualReferenceArgs) CanaryVisualReferencePtrInput {
	return (*canaryVisualReferencePtrType)(v)
}

func (*canaryVisualReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CanaryVisualReference)(nil)).Elem()
}

func (i *canaryVisualReferencePtrType) ToCanaryVisualReferencePtrOutput() CanaryVisualReferencePtrOutput {
	return i.ToCanaryVisualReferencePtrOutputWithContext(context.Background())
}

func (i *canaryVisualReferencePtrType) ToCanaryVisualReferencePtrOutputWithContext(ctx context.Context) CanaryVisualReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CanaryVisualReferencePtrOutput)
}

// CanaryVisualReferenceArrayInput is an input type that accepts CanaryVisualReferenceArray and CanaryVisualReferenceArrayOutput values.
// You can construct a concrete instance of `CanaryVisualReferenceArrayInput` via:
//
//	CanaryVisualReferenceArray{ CanaryVisualReferenceArgs{...} }
type CanaryVisualReferenceArrayInput interface {
	pulumi.Input

	ToCanaryVisualReferenceArrayOutput() CanaryVisualReferenceArrayOutput
	ToCanaryVisualReferenceArrayOutputWithContext(context.Context) CanaryVisualReferenceArrayOutput
}

type CanaryVisualReferenceArray []CanaryVisualReferenceInput

func (CanaryVisualReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CanaryVisualReference)(nil)).Elem()
}

func (i CanaryVisualReferenceArray) ToCanaryVisualReferenceArrayOutput() CanaryVisualReferenceArrayOutput {
	return i.ToCanaryVisualReferenceArrayOutputWithContext(context.Background())
}

func (i CanaryVisualReferenceArray) ToCanaryVisualReferenceArrayOutputWithContext(ctx context.Context) CanaryVisualReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CanaryVisualReferenceArrayOutput)
}

type CanaryVisualReferenceOutput struct{ *pulumi.OutputState }

func (CanaryVisualReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CanaryVisualReference)(nil)).Elem()
}

func (o CanaryVisualReferenceOutput) ToCanaryVisualReferenceOutput() CanaryVisualReferenceOutput {
	return o
}

func (o CanaryVisualReferenceOutput) ToCanaryVisualReferenceOutputWithContext(ctx context.Context) CanaryVisualReferenceOutput {
	return o
}

func (o CanaryVisualReferenceOutput) ToCanaryVisualReferencePtrOutput() CanaryVisualReferencePtrOutput {
	return o.ToCanaryVisualReferencePtrOutputWithContext(context.Background())
}

func (o CanaryVisualReferenceOutput) ToCanaryVisualReferencePtrOutputWithContext(ctx context.Context) CanaryVisualReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CanaryVisualReference) *CanaryVisualReference {
		return &v
	}).(CanaryVisualReferencePtrOutput)
}

// Canary run id to be used as base reference for visual testing
func (o CanaryVisualReferenceOutput) BaseCanaryRunId() pulumi.StringOutput {
	return o.ApplyT(func(v CanaryVisualReference) string { return v.BaseCanaryRunId }).(pulumi.StringOutput)
}

// List of screenshots used as base reference for visual testing
func (o CanaryVisualReferenceOutput) BaseScreenshots() CanaryBaseScreenshotArrayOutput {
	return o.ApplyT(func(v CanaryVisualReference) []CanaryBaseScreenshot { return v.BaseScreenshots }).(CanaryBaseScreenshotArrayOutput)
}

func (o CanaryVisualReferenceOutput) BrowserType() CanaryBrowserTypePtrOutput {
	return o.ApplyT(func(v CanaryVisualReference) *CanaryBrowserType { return v.BrowserType }).(CanaryBrowserTypePtrOutput)
}

type CanaryVisualReferencePtrOutput struct{ *pulumi.OutputState }

func (CanaryVisualReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CanaryVisualReference)(nil)).Elem()
}

func (o CanaryVisualReferencePtrOutput) ToCanaryVisualReferencePtrOutput() CanaryVisualReferencePtrOutput {
	return o
}

func (o CanaryVisualReferencePtrOutput) ToCanaryVisualReferencePtrOutputWithContext(ctx context.Context) CanaryVisualReferencePtrOutput {
	return o
}

func (o CanaryVisualReferencePtrOutput) Elem() CanaryVisualReferenceOutput {
	return o.ApplyT(func(v *CanaryVisualReference) CanaryVisualReference {
		if v != nil {
			return *v
		}
		var ret CanaryVisualReference
		return ret
	}).(CanaryVisualReferenceOutput)
}

// Canary run id to be used as base reference for visual testing
func (o CanaryVisualReferencePtrOutput) BaseCanaryRunId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CanaryVisualReference) *string {
		if v == nil {
			return nil
		}
		return &v.BaseCanaryRunId
	}).(pulumi.StringPtrOutput)
}

// List of screenshots used as base reference for visual testing
func (o CanaryVisualReferencePtrOutput) BaseScreenshots() CanaryBaseScreenshotArrayOutput {
	return o.ApplyT(func(v *CanaryVisualReference) []CanaryBaseScreenshot {
		if v == nil {
			return nil
		}
		return v.BaseScreenshots
	}).(CanaryBaseScreenshotArrayOutput)
}

func (o CanaryVisualReferencePtrOutput) BrowserType() CanaryBrowserTypePtrOutput {
	return o.ApplyT(func(v *CanaryVisualReference) *CanaryBrowserType {
		if v == nil {
			return nil
		}
		return v.BrowserType
	}).(CanaryBrowserTypePtrOutput)
}

type CanaryVisualReferenceArrayOutput struct{ *pulumi.OutputState }

func (CanaryVisualReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CanaryVisualReference)(nil)).Elem()
}

func (o CanaryVisualReferenceArrayOutput) ToCanaryVisualReferenceArrayOutput() CanaryVisualReferenceArrayOutput {
	return o
}

func (o CanaryVisualReferenceArrayOutput) ToCanaryVisualReferenceArrayOutputWithContext(ctx context.Context) CanaryVisualReferenceArrayOutput {
	return o
}

func (o CanaryVisualReferenceArrayOutput) Index(i pulumi.IntInput) CanaryVisualReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CanaryVisualReference {
		return vs[0].([]CanaryVisualReference)[vs[1].(int)]
	}).(CanaryVisualReferenceOutput)
}

type CanaryVpcConfig struct {
	// Allow outbound IPv6 traffic on VPC canaries that are connected to dual-stack subnets if set to true
	Ipv6AllowedForDualStack *bool `pulumi:"ipv6AllowedForDualStack"`
	// The IDs of the security groups for this canary.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// The IDs of the subnets where this canary is to run.
	SubnetIds []string `pulumi:"subnetIds"`
	// The ID of the VPC where this canary is to run.
	VpcId *string `pulumi:"vpcId"`
}

// CanaryVpcConfigInput is an input type that accepts CanaryVpcConfigArgs and CanaryVpcConfigOutput values.
// You can construct a concrete instance of `CanaryVpcConfigInput` via:
//
//	CanaryVpcConfigArgs{...}
type CanaryVpcConfigInput interface {
	pulumi.Input

	ToCanaryVpcConfigOutput() CanaryVpcConfigOutput
	ToCanaryVpcConfigOutputWithContext(context.Context) CanaryVpcConfigOutput
}

type CanaryVpcConfigArgs struct {
	// Allow outbound IPv6 traffic on VPC canaries that are connected to dual-stack subnets if set to true
	Ipv6AllowedForDualStack pulumi.BoolPtrInput `pulumi:"ipv6AllowedForDualStack"`
	// The IDs of the security groups for this canary.
	SecurityGroupIds pulumi.StringArrayInput `pulumi:"securityGroupIds"`
	// The IDs of the subnets where this canary is to run.
	SubnetIds pulumi.StringArrayInput `pulumi:"subnetIds"`
	// The ID of the VPC where this canary is to run.
	VpcId pulumi.StringPtrInput `pulumi:"vpcId"`
}

func (CanaryVpcConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CanaryVpcConfig)(nil)).Elem()
}

func (i CanaryVpcConfigArgs) ToCanaryVpcConfigOutput() CanaryVpcConfigOutput {
	return i.ToCanaryVpcConfigOutputWithContext(context.Background())
}

func (i CanaryVpcConfigArgs) ToCanaryVpcConfigOutputWithContext(ctx context.Context) CanaryVpcConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CanaryVpcConfigOutput)
}

func (i CanaryVpcConfigArgs) ToCanaryVpcConfigPtrOutput() CanaryVpcConfigPtrOutput {
	return i.ToCanaryVpcConfigPtrOutputWithContext(context.Background())
}

func (i CanaryVpcConfigArgs) ToCanaryVpcConfigPtrOutputWithContext(ctx context.Context) CanaryVpcConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CanaryVpcConfigOutput).ToCanaryVpcConfigPtrOutputWithContext(ctx)
}

// CanaryVpcConfigPtrInput is an input type that accepts CanaryVpcConfigArgs, CanaryVpcConfigPtr and CanaryVpcConfigPtrOutput values.
// You can construct a concrete instance of `CanaryVpcConfigPtrInput` via:
//
//	        CanaryVpcConfigArgs{...}
//
//	or:
//
//	        nil
type CanaryVpcConfigPtrInput interface {
	pulumi.Input

	ToCanaryVpcConfigPtrOutput() CanaryVpcConfigPtrOutput
	ToCanaryVpcConfigPtrOutputWithContext(context.Context) CanaryVpcConfigPtrOutput
}

type canaryVpcConfigPtrType CanaryVpcConfigArgs

func CanaryVpcConfigPtr(v *CanaryVpcConfigArgs) CanaryVpcConfigPtrInput {
	return (*canaryVpcConfigPtrType)(v)
}

func (*canaryVpcConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CanaryVpcConfig)(nil)).Elem()
}

func (i *canaryVpcConfigPtrType) ToCanaryVpcConfigPtrOutput() CanaryVpcConfigPtrOutput {
	return i.ToCanaryVpcConfigPtrOutputWithContext(context.Background())
}

func (i *canaryVpcConfigPtrType) ToCanaryVpcConfigPtrOutputWithContext(ctx context.Context) CanaryVpcConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CanaryVpcConfigPtrOutput)
}

type CanaryVpcConfigOutput struct{ *pulumi.OutputState }

func (CanaryVpcConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CanaryVpcConfig)(nil)).Elem()
}

func (o CanaryVpcConfigOutput) ToCanaryVpcConfigOutput() CanaryVpcConfigOutput {
	return o
}

func (o CanaryVpcConfigOutput) ToCanaryVpcConfigOutputWithContext(ctx context.Context) CanaryVpcConfigOutput {
	return o
}

func (o CanaryVpcConfigOutput) ToCanaryVpcConfigPtrOutput() CanaryVpcConfigPtrOutput {
	return o.ToCanaryVpcConfigPtrOutputWithContext(context.Background())
}

func (o CanaryVpcConfigOutput) ToCanaryVpcConfigPtrOutputWithContext(ctx context.Context) CanaryVpcConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CanaryVpcConfig) *CanaryVpcConfig {
		return &v
	}).(CanaryVpcConfigPtrOutput)
}

// Allow outbound IPv6 traffic on VPC canaries that are connected to dual-stack subnets if set to true
func (o CanaryVpcConfigOutput) Ipv6AllowedForDualStack() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CanaryVpcConfig) *bool { return v.Ipv6AllowedForDualStack }).(pulumi.BoolPtrOutput)
}

// The IDs of the security groups for this canary.
func (o CanaryVpcConfigOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CanaryVpcConfig) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// The IDs of the subnets where this canary is to run.
func (o CanaryVpcConfigOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CanaryVpcConfig) []string { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

// The ID of the VPC where this canary is to run.
func (o CanaryVpcConfigOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CanaryVpcConfig) *string { return v.VpcId }).(pulumi.StringPtrOutput)
}

type CanaryVpcConfigPtrOutput struct{ *pulumi.OutputState }

func (CanaryVpcConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CanaryVpcConfig)(nil)).Elem()
}

func (o CanaryVpcConfigPtrOutput) ToCanaryVpcConfigPtrOutput() CanaryVpcConfigPtrOutput {
	return o
}

func (o CanaryVpcConfigPtrOutput) ToCanaryVpcConfigPtrOutputWithContext(ctx context.Context) CanaryVpcConfigPtrOutput {
	return o
}

func (o CanaryVpcConfigPtrOutput) Elem() CanaryVpcConfigOutput {
	return o.ApplyT(func(v *CanaryVpcConfig) CanaryVpcConfig {
		if v != nil {
			return *v
		}
		var ret CanaryVpcConfig
		return ret
	}).(CanaryVpcConfigOutput)
}

// Allow outbound IPv6 traffic on VPC canaries that are connected to dual-stack subnets if set to true
func (o CanaryVpcConfigPtrOutput) Ipv6AllowedForDualStack() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CanaryVpcConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Ipv6AllowedForDualStack
	}).(pulumi.BoolPtrOutput)
}

// The IDs of the security groups for this canary.
func (o CanaryVpcConfigPtrOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CanaryVpcConfig) []string {
		if v == nil {
			return nil
		}
		return v.SecurityGroupIds
	}).(pulumi.StringArrayOutput)
}

// The IDs of the subnets where this canary is to run.
func (o CanaryVpcConfigPtrOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CanaryVpcConfig) []string {
		if v == nil {
			return nil
		}
		return v.SubnetIds
	}).(pulumi.StringArrayOutput)
}

// The ID of the VPC where this canary is to run.
func (o CanaryVpcConfigPtrOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CanaryVpcConfig) *string {
		if v == nil {
			return nil
		}
		return v.VpcId
	}).(pulumi.StringPtrOutput)
}

// A key-value pair to associate with a resource.
type GroupTag struct {
	// The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CanaryArtifactConfigInput)(nil)).Elem(), CanaryArtifactConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CanaryArtifactConfigPtrInput)(nil)).Elem(), CanaryArtifactConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CanaryBaseScreenshotInput)(nil)).Elem(), CanaryBaseScreenshotArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CanaryBaseScreenshotArrayInput)(nil)).Elem(), CanaryBaseScreenshotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CanaryBrowserConfigInput)(nil)).Elem(), CanaryBrowserConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CanaryBrowserConfigArrayInput)(nil)).Elem(), CanaryBrowserConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CanaryCodeInput)(nil)).Elem(), CanaryCodeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CanaryDependencyInput)(nil)).Elem(), CanaryDependencyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CanaryDependencyArrayInput)(nil)).Elem(), CanaryDependencyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CanaryRetryConfigInput)(nil)).Elem(), CanaryRetryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CanaryRetryConfigPtrInput)(nil)).Elem(), CanaryRetryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CanaryRunConfigInput)(nil)).Elem(), CanaryRunConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CanaryRunConfigPtrInput)(nil)).Elem(), CanaryRunConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CanaryS3EncryptionInput)(nil)).Elem(), CanaryS3EncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CanaryS3EncryptionPtrInput)(nil)).Elem(), CanaryS3EncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CanaryScheduleInput)(nil)).Elem(), CanaryScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CanaryVisualReferenceInput)(nil)).Elem(), CanaryVisualReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CanaryVisualReferencePtrInput)(nil)).Elem(), CanaryVisualReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CanaryVisualReferenceArrayInput)(nil)).Elem(), CanaryVisualReferenceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CanaryVpcConfigInput)(nil)).Elem(), CanaryVpcConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CanaryVpcConfigPtrInput)(nil)).Elem(), CanaryVpcConfigArgs{})
	pulumi.RegisterOutputType(CanaryArtifactConfigOutput{})
	pulumi.RegisterOutputType(CanaryArtifactConfigPtrOutput{})
	pulumi.RegisterOutputType(CanaryBaseScreenshotOutput{})
	pulumi.RegisterOutputType(CanaryBaseScreenshotArrayOutput{})
	pulumi.RegisterOutputType(CanaryBrowserConfigOutput{})
	pulumi.RegisterOutputType(CanaryBrowserConfigArrayOutput{})
	pulumi.RegisterOutputType(CanaryCodeOutput{})
	pulumi.RegisterOutputType(CanaryCodePtrOutput{})
	pulumi.RegisterOutputType(CanaryDependencyOutput{})
	pulumi.RegisterOutputType(CanaryDependencyArrayOutput{})
	pulumi.RegisterOutputType(CanaryRetryConfigOutput{})
	pulumi.RegisterOutputType(CanaryRetryConfigPtrOutput{})
	pulumi.RegisterOutputType(CanaryRunConfigOutput{})
	pulumi.RegisterOutputType(CanaryRunConfigPtrOutput{})
	pulumi.RegisterOutputType(CanaryS3EncryptionOutput{})
	pulumi.RegisterOutputType(CanaryS3EncryptionPtrOutput{})
	pulumi.RegisterOutputType(CanaryScheduleOutput{})
	pulumi.RegisterOutputType(CanarySchedulePtrOutput{})
	pulumi.RegisterOutputType(CanaryVisualReferenceOutput{})
	pulumi.RegisterOutputType(CanaryVisualReferencePtrOutput{})
	pulumi.RegisterOutputType(CanaryVisualReferenceArrayOutput{})
	pulumi.RegisterOutputType(CanaryVpcConfigOutput{})
	pulumi.RegisterOutputType(CanaryVpcConfigPtrOutput{})
}
