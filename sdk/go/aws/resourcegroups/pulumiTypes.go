// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package resourcegroups

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type GroupConfigurationItem struct {
	Parameters []GroupConfigurationParameter `pulumi:"parameters"`
	Type       *string                       `pulumi:"type"`
}

// GroupConfigurationItemInput is an input type that accepts GroupConfigurationItemArgs and GroupConfigurationItemOutput values.
// You can construct a concrete instance of `GroupConfigurationItemInput` via:
//
//	GroupConfigurationItemArgs{...}
type GroupConfigurationItemInput interface {
	pulumi.Input

	ToGroupConfigurationItemOutput() GroupConfigurationItemOutput
	ToGroupConfigurationItemOutputWithContext(context.Context) GroupConfigurationItemOutput
}

type GroupConfigurationItemArgs struct {
	Parameters GroupConfigurationParameterArrayInput `pulumi:"parameters"`
	Type       pulumi.StringPtrInput                 `pulumi:"type"`
}

func (GroupConfigurationItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupConfigurationItem)(nil)).Elem()
}

func (i GroupConfigurationItemArgs) ToGroupConfigurationItemOutput() GroupConfigurationItemOutput {
	return i.ToGroupConfigurationItemOutputWithContext(context.Background())
}

func (i GroupConfigurationItemArgs) ToGroupConfigurationItemOutputWithContext(ctx context.Context) GroupConfigurationItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupConfigurationItemOutput)
}

// GroupConfigurationItemArrayInput is an input type that accepts GroupConfigurationItemArray and GroupConfigurationItemArrayOutput values.
// You can construct a concrete instance of `GroupConfigurationItemArrayInput` via:
//
//	GroupConfigurationItemArray{ GroupConfigurationItemArgs{...} }
type GroupConfigurationItemArrayInput interface {
	pulumi.Input

	ToGroupConfigurationItemArrayOutput() GroupConfigurationItemArrayOutput
	ToGroupConfigurationItemArrayOutputWithContext(context.Context) GroupConfigurationItemArrayOutput
}

type GroupConfigurationItemArray []GroupConfigurationItemInput

func (GroupConfigurationItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupConfigurationItem)(nil)).Elem()
}

func (i GroupConfigurationItemArray) ToGroupConfigurationItemArrayOutput() GroupConfigurationItemArrayOutput {
	return i.ToGroupConfigurationItemArrayOutputWithContext(context.Background())
}

func (i GroupConfigurationItemArray) ToGroupConfigurationItemArrayOutputWithContext(ctx context.Context) GroupConfigurationItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupConfigurationItemArrayOutput)
}

type GroupConfigurationItemOutput struct{ *pulumi.OutputState }

func (GroupConfigurationItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupConfigurationItem)(nil)).Elem()
}

func (o GroupConfigurationItemOutput) ToGroupConfigurationItemOutput() GroupConfigurationItemOutput {
	return o
}

func (o GroupConfigurationItemOutput) ToGroupConfigurationItemOutputWithContext(ctx context.Context) GroupConfigurationItemOutput {
	return o
}

func (o GroupConfigurationItemOutput) Parameters() GroupConfigurationParameterArrayOutput {
	return o.ApplyT(func(v GroupConfigurationItem) []GroupConfigurationParameter { return v.Parameters }).(GroupConfigurationParameterArrayOutput)
}

func (o GroupConfigurationItemOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupConfigurationItem) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type GroupConfigurationItemArrayOutput struct{ *pulumi.OutputState }

func (GroupConfigurationItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupConfigurationItem)(nil)).Elem()
}

func (o GroupConfigurationItemArrayOutput) ToGroupConfigurationItemArrayOutput() GroupConfigurationItemArrayOutput {
	return o
}

func (o GroupConfigurationItemArrayOutput) ToGroupConfigurationItemArrayOutputWithContext(ctx context.Context) GroupConfigurationItemArrayOutput {
	return o
}

func (o GroupConfigurationItemArrayOutput) Index(i pulumi.IntInput) GroupConfigurationItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GroupConfigurationItem {
		return vs[0].([]GroupConfigurationItem)[vs[1].(int)]
	}).(GroupConfigurationItemOutput)
}

type GroupConfigurationParameter struct {
	Name   *string  `pulumi:"name"`
	Values []string `pulumi:"values"`
}

// GroupConfigurationParameterInput is an input type that accepts GroupConfigurationParameterArgs and GroupConfigurationParameterOutput values.
// You can construct a concrete instance of `GroupConfigurationParameterInput` via:
//
//	GroupConfigurationParameterArgs{...}
type GroupConfigurationParameterInput interface {
	pulumi.Input

	ToGroupConfigurationParameterOutput() GroupConfigurationParameterOutput
	ToGroupConfigurationParameterOutputWithContext(context.Context) GroupConfigurationParameterOutput
}

type GroupConfigurationParameterArgs struct {
	Name   pulumi.StringPtrInput   `pulumi:"name"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GroupConfigurationParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupConfigurationParameter)(nil)).Elem()
}

func (i GroupConfigurationParameterArgs) ToGroupConfigurationParameterOutput() GroupConfigurationParameterOutput {
	return i.ToGroupConfigurationParameterOutputWithContext(context.Background())
}

func (i GroupConfigurationParameterArgs) ToGroupConfigurationParameterOutputWithContext(ctx context.Context) GroupConfigurationParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupConfigurationParameterOutput)
}

// GroupConfigurationParameterArrayInput is an input type that accepts GroupConfigurationParameterArray and GroupConfigurationParameterArrayOutput values.
// You can construct a concrete instance of `GroupConfigurationParameterArrayInput` via:
//
//	GroupConfigurationParameterArray{ GroupConfigurationParameterArgs{...} }
type GroupConfigurationParameterArrayInput interface {
	pulumi.Input

	ToGroupConfigurationParameterArrayOutput() GroupConfigurationParameterArrayOutput
	ToGroupConfigurationParameterArrayOutputWithContext(context.Context) GroupConfigurationParameterArrayOutput
}

type GroupConfigurationParameterArray []GroupConfigurationParameterInput

func (GroupConfigurationParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupConfigurationParameter)(nil)).Elem()
}

func (i GroupConfigurationParameterArray) ToGroupConfigurationParameterArrayOutput() GroupConfigurationParameterArrayOutput {
	return i.ToGroupConfigurationParameterArrayOutputWithContext(context.Background())
}

func (i GroupConfigurationParameterArray) ToGroupConfigurationParameterArrayOutputWithContext(ctx context.Context) GroupConfigurationParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupConfigurationParameterArrayOutput)
}

type GroupConfigurationParameterOutput struct{ *pulumi.OutputState }

func (GroupConfigurationParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupConfigurationParameter)(nil)).Elem()
}

func (o GroupConfigurationParameterOutput) ToGroupConfigurationParameterOutput() GroupConfigurationParameterOutput {
	return o
}

func (o GroupConfigurationParameterOutput) ToGroupConfigurationParameterOutputWithContext(ctx context.Context) GroupConfigurationParameterOutput {
	return o
}

func (o GroupConfigurationParameterOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupConfigurationParameter) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GroupConfigurationParameterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GroupConfigurationParameter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GroupConfigurationParameterArrayOutput struct{ *pulumi.OutputState }

func (GroupConfigurationParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupConfigurationParameter)(nil)).Elem()
}

func (o GroupConfigurationParameterArrayOutput) ToGroupConfigurationParameterArrayOutput() GroupConfigurationParameterArrayOutput {
	return o
}

func (o GroupConfigurationParameterArrayOutput) ToGroupConfigurationParameterArrayOutputWithContext(ctx context.Context) GroupConfigurationParameterArrayOutput {
	return o
}

func (o GroupConfigurationParameterArrayOutput) Index(i pulumi.IntInput) GroupConfigurationParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GroupConfigurationParameter {
		return vs[0].([]GroupConfigurationParameter)[vs[1].(int)]
	}).(GroupConfigurationParameterOutput)
}

type GroupQuery struct {
	// Specifies limits to the types of resources that can be included in the resource group. For example, if `ResourceTypeFilters` is `["AWS::EC2::Instance", "AWS::DynamoDB::Table"]` , only EC2 instances or DynamoDB tables can be members of this resource group. The default value is `["AWS::AllSupported"]` .
	ResourceTypeFilters []string `pulumi:"resourceTypeFilters"`
	// Specifies the ARN of a CloudFormation stack. All supported resources of the CloudFormation stack are members of the resource group. If you don't specify an ARN, this parameter defaults to the current stack that you are defining, which means that all the resources of the current stack are grouped.
	//
	// You can specify a value for `StackIdentifier` only when the `ResourceQuery.Type` property is `CLOUDFORMATION_STACK_1_0.`
	StackIdentifier *string `pulumi:"stackIdentifier"`
	// Specifies a single tag key and optional values that you can use to specify membership in a tag-based group. An AWS resource that doesn't have a matching tag key and value is rejected as a member of the group.
	//
	// A `TagFilter` object includes two properties: `Key` (a string) and `Values` (a list of strings). Only resources in the account that are tagged with a matching key-value pair are members of the group. The `Values` property of `TagFilter` is optional, but specifying it narrows the query results.
	//
	// As an example, suppose the `TagFilters` string is `[{"Key": "Stage", "Values": ["Test", "Beta"]}, {"Key": "Storage"}]` . In this case, only resources with all of the following tags are members of the group:
	//
	// - `Stage` tag key with a value of either `Test` or `Beta`
	// - `Storage` tag key with any value
	TagFilters []GroupTagFilter `pulumi:"tagFilters"`
}

// GroupQueryInput is an input type that accepts GroupQueryArgs and GroupQueryOutput values.
// You can construct a concrete instance of `GroupQueryInput` via:
//
//	GroupQueryArgs{...}
type GroupQueryInput interface {
	pulumi.Input

	ToGroupQueryOutput() GroupQueryOutput
	ToGroupQueryOutputWithContext(context.Context) GroupQueryOutput
}

type GroupQueryArgs struct {
	// Specifies limits to the types of resources that can be included in the resource group. For example, if `ResourceTypeFilters` is `["AWS::EC2::Instance", "AWS::DynamoDB::Table"]` , only EC2 instances or DynamoDB tables can be members of this resource group. The default value is `["AWS::AllSupported"]` .
	ResourceTypeFilters pulumi.StringArrayInput `pulumi:"resourceTypeFilters"`
	// Specifies the ARN of a CloudFormation stack. All supported resources of the CloudFormation stack are members of the resource group. If you don't specify an ARN, this parameter defaults to the current stack that you are defining, which means that all the resources of the current stack are grouped.
	//
	// You can specify a value for `StackIdentifier` only when the `ResourceQuery.Type` property is `CLOUDFORMATION_STACK_1_0.`
	StackIdentifier pulumi.StringPtrInput `pulumi:"stackIdentifier"`
	// Specifies a single tag key and optional values that you can use to specify membership in a tag-based group. An AWS resource that doesn't have a matching tag key and value is rejected as a member of the group.
	//
	// A `TagFilter` object includes two properties: `Key` (a string) and `Values` (a list of strings). Only resources in the account that are tagged with a matching key-value pair are members of the group. The `Values` property of `TagFilter` is optional, but specifying it narrows the query results.
	//
	// As an example, suppose the `TagFilters` string is `[{"Key": "Stage", "Values": ["Test", "Beta"]}, {"Key": "Storage"}]` . In this case, only resources with all of the following tags are members of the group:
	//
	// - `Stage` tag key with a value of either `Test` or `Beta`
	// - `Storage` tag key with any value
	TagFilters GroupTagFilterArrayInput `pulumi:"tagFilters"`
}

func (GroupQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupQuery)(nil)).Elem()
}

func (i GroupQueryArgs) ToGroupQueryOutput() GroupQueryOutput {
	return i.ToGroupQueryOutputWithContext(context.Background())
}

func (i GroupQueryArgs) ToGroupQueryOutputWithContext(ctx context.Context) GroupQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupQueryOutput)
}

func (i GroupQueryArgs) ToGroupQueryPtrOutput() GroupQueryPtrOutput {
	return i.ToGroupQueryPtrOutputWithContext(context.Background())
}

func (i GroupQueryArgs) ToGroupQueryPtrOutputWithContext(ctx context.Context) GroupQueryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupQueryOutput).ToGroupQueryPtrOutputWithContext(ctx)
}

// GroupQueryPtrInput is an input type that accepts GroupQueryArgs, GroupQueryPtr and GroupQueryPtrOutput values.
// You can construct a concrete instance of `GroupQueryPtrInput` via:
//
//	        GroupQueryArgs{...}
//
//	or:
//
//	        nil
type GroupQueryPtrInput interface {
	pulumi.Input

	ToGroupQueryPtrOutput() GroupQueryPtrOutput
	ToGroupQueryPtrOutputWithContext(context.Context) GroupQueryPtrOutput
}

type groupQueryPtrType GroupQueryArgs

func GroupQueryPtr(v *GroupQueryArgs) GroupQueryPtrInput {
	return (*groupQueryPtrType)(v)
}

func (*groupQueryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupQuery)(nil)).Elem()
}

func (i *groupQueryPtrType) ToGroupQueryPtrOutput() GroupQueryPtrOutput {
	return i.ToGroupQueryPtrOutputWithContext(context.Background())
}

func (i *groupQueryPtrType) ToGroupQueryPtrOutputWithContext(ctx context.Context) GroupQueryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupQueryPtrOutput)
}

type GroupQueryOutput struct{ *pulumi.OutputState }

func (GroupQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupQuery)(nil)).Elem()
}

func (o GroupQueryOutput) ToGroupQueryOutput() GroupQueryOutput {
	return o
}

func (o GroupQueryOutput) ToGroupQueryOutputWithContext(ctx context.Context) GroupQueryOutput {
	return o
}

func (o GroupQueryOutput) ToGroupQueryPtrOutput() GroupQueryPtrOutput {
	return o.ToGroupQueryPtrOutputWithContext(context.Background())
}

func (o GroupQueryOutput) ToGroupQueryPtrOutputWithContext(ctx context.Context) GroupQueryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GroupQuery) *GroupQuery {
		return &v
	}).(GroupQueryPtrOutput)
}

// Specifies limits to the types of resources that can be included in the resource group. For example, if `ResourceTypeFilters` is `["AWS::EC2::Instance", "AWS::DynamoDB::Table"]` , only EC2 instances or DynamoDB tables can be members of this resource group. The default value is `["AWS::AllSupported"]` .
func (o GroupQueryOutput) ResourceTypeFilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GroupQuery) []string { return v.ResourceTypeFilters }).(pulumi.StringArrayOutput)
}

// Specifies the ARN of a CloudFormation stack. All supported resources of the CloudFormation stack are members of the resource group. If you don't specify an ARN, this parameter defaults to the current stack that you are defining, which means that all the resources of the current stack are grouped.
//
// You can specify a value for `StackIdentifier` only when the `ResourceQuery.Type` property is `CLOUDFORMATION_STACK_1_0.`
func (o GroupQueryOutput) StackIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupQuery) *string { return v.StackIdentifier }).(pulumi.StringPtrOutput)
}

// Specifies a single tag key and optional values that you can use to specify membership in a tag-based group. An AWS resource that doesn't have a matching tag key and value is rejected as a member of the group.
//
// A `TagFilter` object includes two properties: `Key` (a string) and `Values` (a list of strings). Only resources in the account that are tagged with a matching key-value pair are members of the group. The `Values` property of `TagFilter` is optional, but specifying it narrows the query results.
//
// As an example, suppose the `TagFilters` string is `[{"Key": "Stage", "Values": ["Test", "Beta"]}, {"Key": "Storage"}]` . In this case, only resources with all of the following tags are members of the group:
//
// - `Stage` tag key with a value of either `Test` or `Beta`
// - `Storage` tag key with any value
func (o GroupQueryOutput) TagFilters() GroupTagFilterArrayOutput {
	return o.ApplyT(func(v GroupQuery) []GroupTagFilter { return v.TagFilters }).(GroupTagFilterArrayOutput)
}

type GroupQueryPtrOutput struct{ *pulumi.OutputState }

func (GroupQueryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupQuery)(nil)).Elem()
}

func (o GroupQueryPtrOutput) ToGroupQueryPtrOutput() GroupQueryPtrOutput {
	return o
}

func (o GroupQueryPtrOutput) ToGroupQueryPtrOutputWithContext(ctx context.Context) GroupQueryPtrOutput {
	return o
}

func (o GroupQueryPtrOutput) Elem() GroupQueryOutput {
	return o.ApplyT(func(v *GroupQuery) GroupQuery {
		if v != nil {
			return *v
		}
		var ret GroupQuery
		return ret
	}).(GroupQueryOutput)
}

// Specifies limits to the types of resources that can be included in the resource group. For example, if `ResourceTypeFilters` is `["AWS::EC2::Instance", "AWS::DynamoDB::Table"]` , only EC2 instances or DynamoDB tables can be members of this resource group. The default value is `["AWS::AllSupported"]` .
func (o GroupQueryPtrOutput) ResourceTypeFilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GroupQuery) []string {
		if v == nil {
			return nil
		}
		return v.ResourceTypeFilters
	}).(pulumi.StringArrayOutput)
}

// Specifies the ARN of a CloudFormation stack. All supported resources of the CloudFormation stack are members of the resource group. If you don't specify an ARN, this parameter defaults to the current stack that you are defining, which means that all the resources of the current stack are grouped.
//
// You can specify a value for `StackIdentifier` only when the `ResourceQuery.Type` property is `CLOUDFORMATION_STACK_1_0.`
func (o GroupQueryPtrOutput) StackIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupQuery) *string {
		if v == nil {
			return nil
		}
		return v.StackIdentifier
	}).(pulumi.StringPtrOutput)
}

// Specifies a single tag key and optional values that you can use to specify membership in a tag-based group. An AWS resource that doesn't have a matching tag key and value is rejected as a member of the group.
//
// A `TagFilter` object includes two properties: `Key` (a string) and `Values` (a list of strings). Only resources in the account that are tagged with a matching key-value pair are members of the group. The `Values` property of `TagFilter` is optional, but specifying it narrows the query results.
//
// As an example, suppose the `TagFilters` string is `[{"Key": "Stage", "Values": ["Test", "Beta"]}, {"Key": "Storage"}]` . In this case, only resources with all of the following tags are members of the group:
//
// - `Stage` tag key with a value of either `Test` or `Beta`
// - `Storage` tag key with any value
func (o GroupQueryPtrOutput) TagFilters() GroupTagFilterArrayOutput {
	return o.ApplyT(func(v *GroupQuery) []GroupTagFilter {
		if v == nil {
			return nil
		}
		return v.TagFilters
	}).(GroupTagFilterArrayOutput)
}

type GroupResourceQuery struct {
	// Specifies details within a `ResourceQuery` structure that determines the membership of the resource group. The contents required in the `Query` structure are determined by the `Type` property of the containing `ResourceQuery` structure.
	Query *GroupQuery `pulumi:"query"`
	// Specifies the type of resource query that determines this group's membership. There are two valid query types:
	//
	// - `TAG_FILTERS_1_0` indicates that the group is a tag-based group. To complete the group membership, you must include the `TagFilters` property to specify the tag filters to use in the query.
	// - `CLOUDFORMATION_STACK_1_0` , the default, indicates that the group is a CloudFormation stack-based group. Group membership is based on the CloudFormation stack. You must specify the `StackIdentifier` property in the query to define which stack to associate the group with, or leave it empty to default to the stack where the group is defined.
	Type *GroupResourceQueryType `pulumi:"type"`
}

// GroupResourceQueryInput is an input type that accepts GroupResourceQueryArgs and GroupResourceQueryOutput values.
// You can construct a concrete instance of `GroupResourceQueryInput` via:
//
//	GroupResourceQueryArgs{...}
type GroupResourceQueryInput interface {
	pulumi.Input

	ToGroupResourceQueryOutput() GroupResourceQueryOutput
	ToGroupResourceQueryOutputWithContext(context.Context) GroupResourceQueryOutput
}

type GroupResourceQueryArgs struct {
	// Specifies details within a `ResourceQuery` structure that determines the membership of the resource group. The contents required in the `Query` structure are determined by the `Type` property of the containing `ResourceQuery` structure.
	Query GroupQueryPtrInput `pulumi:"query"`
	// Specifies the type of resource query that determines this group's membership. There are two valid query types:
	//
	// - `TAG_FILTERS_1_0` indicates that the group is a tag-based group. To complete the group membership, you must include the `TagFilters` property to specify the tag filters to use in the query.
	// - `CLOUDFORMATION_STACK_1_0` , the default, indicates that the group is a CloudFormation stack-based group. Group membership is based on the CloudFormation stack. You must specify the `StackIdentifier` property in the query to define which stack to associate the group with, or leave it empty to default to the stack where the group is defined.
	Type GroupResourceQueryTypePtrInput `pulumi:"type"`
}

func (GroupResourceQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupResourceQuery)(nil)).Elem()
}

func (i GroupResourceQueryArgs) ToGroupResourceQueryOutput() GroupResourceQueryOutput {
	return i.ToGroupResourceQueryOutputWithContext(context.Background())
}

func (i GroupResourceQueryArgs) ToGroupResourceQueryOutputWithContext(ctx context.Context) GroupResourceQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupResourceQueryOutput)
}

func (i GroupResourceQueryArgs) ToGroupResourceQueryPtrOutput() GroupResourceQueryPtrOutput {
	return i.ToGroupResourceQueryPtrOutputWithContext(context.Background())
}

func (i GroupResourceQueryArgs) ToGroupResourceQueryPtrOutputWithContext(ctx context.Context) GroupResourceQueryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupResourceQueryOutput).ToGroupResourceQueryPtrOutputWithContext(ctx)
}

// GroupResourceQueryPtrInput is an input type that accepts GroupResourceQueryArgs, GroupResourceQueryPtr and GroupResourceQueryPtrOutput values.
// You can construct a concrete instance of `GroupResourceQueryPtrInput` via:
//
//	        GroupResourceQueryArgs{...}
//
//	or:
//
//	        nil
type GroupResourceQueryPtrInput interface {
	pulumi.Input

	ToGroupResourceQueryPtrOutput() GroupResourceQueryPtrOutput
	ToGroupResourceQueryPtrOutputWithContext(context.Context) GroupResourceQueryPtrOutput
}

type groupResourceQueryPtrType GroupResourceQueryArgs

func GroupResourceQueryPtr(v *GroupResourceQueryArgs) GroupResourceQueryPtrInput {
	return (*groupResourceQueryPtrType)(v)
}

func (*groupResourceQueryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupResourceQuery)(nil)).Elem()
}

func (i *groupResourceQueryPtrType) ToGroupResourceQueryPtrOutput() GroupResourceQueryPtrOutput {
	return i.ToGroupResourceQueryPtrOutputWithContext(context.Background())
}

func (i *groupResourceQueryPtrType) ToGroupResourceQueryPtrOutputWithContext(ctx context.Context) GroupResourceQueryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupResourceQueryPtrOutput)
}

type GroupResourceQueryOutput struct{ *pulumi.OutputState }

func (GroupResourceQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupResourceQuery)(nil)).Elem()
}

func (o GroupResourceQueryOutput) ToGroupResourceQueryOutput() GroupResourceQueryOutput {
	return o
}

func (o GroupResourceQueryOutput) ToGroupResourceQueryOutputWithContext(ctx context.Context) GroupResourceQueryOutput {
	return o
}

func (o GroupResourceQueryOutput) ToGroupResourceQueryPtrOutput() GroupResourceQueryPtrOutput {
	return o.ToGroupResourceQueryPtrOutputWithContext(context.Background())
}

func (o GroupResourceQueryOutput) ToGroupResourceQueryPtrOutputWithContext(ctx context.Context) GroupResourceQueryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GroupResourceQuery) *GroupResourceQuery {
		return &v
	}).(GroupResourceQueryPtrOutput)
}

// Specifies details within a `ResourceQuery` structure that determines the membership of the resource group. The contents required in the `Query` structure are determined by the `Type` property of the containing `ResourceQuery` structure.
func (o GroupResourceQueryOutput) Query() GroupQueryPtrOutput {
	return o.ApplyT(func(v GroupResourceQuery) *GroupQuery { return v.Query }).(GroupQueryPtrOutput)
}

// Specifies the type of resource query that determines this group's membership. There are two valid query types:
//
// - `TAG_FILTERS_1_0` indicates that the group is a tag-based group. To complete the group membership, you must include the `TagFilters` property to specify the tag filters to use in the query.
// - `CLOUDFORMATION_STACK_1_0` , the default, indicates that the group is a CloudFormation stack-based group. Group membership is based on the CloudFormation stack. You must specify the `StackIdentifier` property in the query to define which stack to associate the group with, or leave it empty to default to the stack where the group is defined.
func (o GroupResourceQueryOutput) Type() GroupResourceQueryTypePtrOutput {
	return o.ApplyT(func(v GroupResourceQuery) *GroupResourceQueryType { return v.Type }).(GroupResourceQueryTypePtrOutput)
}

type GroupResourceQueryPtrOutput struct{ *pulumi.OutputState }

func (GroupResourceQueryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupResourceQuery)(nil)).Elem()
}

func (o GroupResourceQueryPtrOutput) ToGroupResourceQueryPtrOutput() GroupResourceQueryPtrOutput {
	return o
}

func (o GroupResourceQueryPtrOutput) ToGroupResourceQueryPtrOutputWithContext(ctx context.Context) GroupResourceQueryPtrOutput {
	return o
}

func (o GroupResourceQueryPtrOutput) Elem() GroupResourceQueryOutput {
	return o.ApplyT(func(v *GroupResourceQuery) GroupResourceQuery {
		if v != nil {
			return *v
		}
		var ret GroupResourceQuery
		return ret
	}).(GroupResourceQueryOutput)
}

// Specifies details within a `ResourceQuery` structure that determines the membership of the resource group. The contents required in the `Query` structure are determined by the `Type` property of the containing `ResourceQuery` structure.
func (o GroupResourceQueryPtrOutput) Query() GroupQueryPtrOutput {
	return o.ApplyT(func(v *GroupResourceQuery) *GroupQuery {
		if v == nil {
			return nil
		}
		return v.Query
	}).(GroupQueryPtrOutput)
}

// Specifies the type of resource query that determines this group's membership. There are two valid query types:
//
// - `TAG_FILTERS_1_0` indicates that the group is a tag-based group. To complete the group membership, you must include the `TagFilters` property to specify the tag filters to use in the query.
// - `CLOUDFORMATION_STACK_1_0` , the default, indicates that the group is a CloudFormation stack-based group. Group membership is based on the CloudFormation stack. You must specify the `StackIdentifier` property in the query to define which stack to associate the group with, or leave it empty to default to the stack where the group is defined.
func (o GroupResourceQueryPtrOutput) Type() GroupResourceQueryTypePtrOutput {
	return o.ApplyT(func(v *GroupResourceQuery) *GroupResourceQueryType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(GroupResourceQueryTypePtrOutput)
}

type GroupTag struct {
	Key   *string `pulumi:"key"`
	Value *string `pulumi:"value"`
}

type GroupTagFilter struct {
	// A string that defines a tag key. Only resources in the account that are tagged with a specified tag key are members of the tag-based resource group.
	//
	// This field is required when the `ResourceQuery` structure's `Type` property is `TAG_FILTERS_1_0` . You must specify at least one tag key.
	Key *string `pulumi:"key"`
	// A list of tag values that can be included in the tag-based resource group. This is optional. If you don't specify a value or values for a key, then an AWS resource with any value for that key is a member.
	Values []string `pulumi:"values"`
}

// GroupTagFilterInput is an input type that accepts GroupTagFilterArgs and GroupTagFilterOutput values.
// You can construct a concrete instance of `GroupTagFilterInput` via:
//
//	GroupTagFilterArgs{...}
type GroupTagFilterInput interface {
	pulumi.Input

	ToGroupTagFilterOutput() GroupTagFilterOutput
	ToGroupTagFilterOutputWithContext(context.Context) GroupTagFilterOutput
}

type GroupTagFilterArgs struct {
	// A string that defines a tag key. Only resources in the account that are tagged with a specified tag key are members of the tag-based resource group.
	//
	// This field is required when the `ResourceQuery` structure's `Type` property is `TAG_FILTERS_1_0` . You must specify at least one tag key.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// A list of tag values that can be included in the tag-based resource group. This is optional. If you don't specify a value or values for a key, then an AWS resource with any value for that key is a member.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GroupTagFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupTagFilter)(nil)).Elem()
}

func (i GroupTagFilterArgs) ToGroupTagFilterOutput() GroupTagFilterOutput {
	return i.ToGroupTagFilterOutputWithContext(context.Background())
}

func (i GroupTagFilterArgs) ToGroupTagFilterOutputWithContext(ctx context.Context) GroupTagFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupTagFilterOutput)
}

// GroupTagFilterArrayInput is an input type that accepts GroupTagFilterArray and GroupTagFilterArrayOutput values.
// You can construct a concrete instance of `GroupTagFilterArrayInput` via:
//
//	GroupTagFilterArray{ GroupTagFilterArgs{...} }
type GroupTagFilterArrayInput interface {
	pulumi.Input

	ToGroupTagFilterArrayOutput() GroupTagFilterArrayOutput
	ToGroupTagFilterArrayOutputWithContext(context.Context) GroupTagFilterArrayOutput
}

type GroupTagFilterArray []GroupTagFilterInput

func (GroupTagFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupTagFilter)(nil)).Elem()
}

func (i GroupTagFilterArray) ToGroupTagFilterArrayOutput() GroupTagFilterArrayOutput {
	return i.ToGroupTagFilterArrayOutputWithContext(context.Background())
}

func (i GroupTagFilterArray) ToGroupTagFilterArrayOutputWithContext(ctx context.Context) GroupTagFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupTagFilterArrayOutput)
}

type GroupTagFilterOutput struct{ *pulumi.OutputState }

func (GroupTagFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupTagFilter)(nil)).Elem()
}

func (o GroupTagFilterOutput) ToGroupTagFilterOutput() GroupTagFilterOutput {
	return o
}

func (o GroupTagFilterOutput) ToGroupTagFilterOutputWithContext(ctx context.Context) GroupTagFilterOutput {
	return o
}

// A string that defines a tag key. Only resources in the account that are tagged with a specified tag key are members of the tag-based resource group.
//
// This field is required when the `ResourceQuery` structure's `Type` property is `TAG_FILTERS_1_0` . You must specify at least one tag key.
func (o GroupTagFilterOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupTagFilter) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// A list of tag values that can be included in the tag-based resource group. This is optional. If you don't specify a value or values for a key, then an AWS resource with any value for that key is a member.
func (o GroupTagFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GroupTagFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GroupTagFilterArrayOutput struct{ *pulumi.OutputState }

func (GroupTagFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupTagFilter)(nil)).Elem()
}

func (o GroupTagFilterArrayOutput) ToGroupTagFilterArrayOutput() GroupTagFilterArrayOutput {
	return o
}

func (o GroupTagFilterArrayOutput) ToGroupTagFilterArrayOutputWithContext(ctx context.Context) GroupTagFilterArrayOutput {
	return o
}

func (o GroupTagFilterArrayOutput) Index(i pulumi.IntInput) GroupTagFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GroupTagFilter {
		return vs[0].([]GroupTagFilter)[vs[1].(int)]
	}).(GroupTagFilterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupConfigurationItemInput)(nil)).Elem(), GroupConfigurationItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupConfigurationItemArrayInput)(nil)).Elem(), GroupConfigurationItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupConfigurationParameterInput)(nil)).Elem(), GroupConfigurationParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupConfigurationParameterArrayInput)(nil)).Elem(), GroupConfigurationParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupQueryInput)(nil)).Elem(), GroupQueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupQueryPtrInput)(nil)).Elem(), GroupQueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupResourceQueryInput)(nil)).Elem(), GroupResourceQueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupResourceQueryPtrInput)(nil)).Elem(), GroupResourceQueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupTagFilterInput)(nil)).Elem(), GroupTagFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupTagFilterArrayInput)(nil)).Elem(), GroupTagFilterArray{})
	pulumi.RegisterOutputType(GroupConfigurationItemOutput{})
	pulumi.RegisterOutputType(GroupConfigurationItemArrayOutput{})
	pulumi.RegisterOutputType(GroupConfigurationParameterOutput{})
	pulumi.RegisterOutputType(GroupConfigurationParameterArrayOutput{})
	pulumi.RegisterOutputType(GroupQueryOutput{})
	pulumi.RegisterOutputType(GroupQueryPtrOutput{})
	pulumi.RegisterOutputType(GroupResourceQueryOutput{})
	pulumi.RegisterOutputType(GroupResourceQueryPtrOutput{})
	pulumi.RegisterOutputType(GroupTagFilterOutput{})
	pulumi.RegisterOutputType(GroupTagFilterArrayOutput{})
}
