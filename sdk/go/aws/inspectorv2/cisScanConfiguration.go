// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package inspectorv2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// CIS Scan Configuration resource schema
type CisScanConfiguration struct {
	pulumi.CustomResourceState

	// CIS Scan configuration unique identifier
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Name of the scan
	ScanName      pulumi.StringPtrOutput                        `pulumi:"scanName"`
	Schedule      CisScanConfigurationSchedulePtrOutput         `pulumi:"schedule"`
	SecurityLevel CisScanConfigurationCisSecurityLevelPtrOutput `pulumi:"securityLevel"`
	Tags          CisScanConfigurationCisTagMapPtrOutput        `pulumi:"tags"`
	Targets       CisScanConfigurationCisTargetsPtrOutput       `pulumi:"targets"`
}

// NewCisScanConfiguration registers a new resource with the given unique name, arguments, and options.
func NewCisScanConfiguration(ctx *pulumi.Context,
	name string, args *CisScanConfigurationArgs, opts ...pulumi.ResourceOption) (*CisScanConfiguration, error) {
	if args == nil {
		args = &CisScanConfigurationArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CisScanConfiguration
	err := ctx.RegisterResource("aws-native:inspectorv2:CisScanConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCisScanConfiguration gets an existing CisScanConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCisScanConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CisScanConfigurationState, opts ...pulumi.ResourceOption) (*CisScanConfiguration, error) {
	var resource CisScanConfiguration
	err := ctx.ReadResource("aws-native:inspectorv2:CisScanConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CisScanConfiguration resources.
type cisScanConfigurationState struct {
}

type CisScanConfigurationState struct {
}

func (CisScanConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*cisScanConfigurationState)(nil)).Elem()
}

type cisScanConfigurationArgs struct {
	// Name of the scan
	ScanName      *string                               `pulumi:"scanName"`
	Schedule      *CisScanConfigurationSchedule         `pulumi:"schedule"`
	SecurityLevel *CisScanConfigurationCisSecurityLevel `pulumi:"securityLevel"`
	Tags          *CisScanConfigurationCisTagMap        `pulumi:"tags"`
	Targets       *CisScanConfigurationCisTargets       `pulumi:"targets"`
}

// The set of arguments for constructing a CisScanConfiguration resource.
type CisScanConfigurationArgs struct {
	// Name of the scan
	ScanName      pulumi.StringPtrInput
	Schedule      CisScanConfigurationSchedulePtrInput
	SecurityLevel CisScanConfigurationCisSecurityLevelPtrInput
	Tags          CisScanConfigurationCisTagMapPtrInput
	Targets       CisScanConfigurationCisTargetsPtrInput
}

func (CisScanConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cisScanConfigurationArgs)(nil)).Elem()
}

type CisScanConfigurationInput interface {
	pulumi.Input

	ToCisScanConfigurationOutput() CisScanConfigurationOutput
	ToCisScanConfigurationOutputWithContext(ctx context.Context) CisScanConfigurationOutput
}

func (*CisScanConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**CisScanConfiguration)(nil)).Elem()
}

func (i *CisScanConfiguration) ToCisScanConfigurationOutput() CisScanConfigurationOutput {
	return i.ToCisScanConfigurationOutputWithContext(context.Background())
}

func (i *CisScanConfiguration) ToCisScanConfigurationOutputWithContext(ctx context.Context) CisScanConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CisScanConfigurationOutput)
}

func (i *CisScanConfiguration) ToOutput(ctx context.Context) pulumix.Output[*CisScanConfiguration] {
	return pulumix.Output[*CisScanConfiguration]{
		OutputState: i.ToCisScanConfigurationOutputWithContext(ctx).OutputState,
	}
}

type CisScanConfigurationOutput struct{ *pulumi.OutputState }

func (CisScanConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CisScanConfiguration)(nil)).Elem()
}

func (o CisScanConfigurationOutput) ToCisScanConfigurationOutput() CisScanConfigurationOutput {
	return o
}

func (o CisScanConfigurationOutput) ToCisScanConfigurationOutputWithContext(ctx context.Context) CisScanConfigurationOutput {
	return o
}

func (o CisScanConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[*CisScanConfiguration] {
	return pulumix.Output[*CisScanConfiguration]{
		OutputState: o.OutputState,
	}
}

// CIS Scan configuration unique identifier
func (o CisScanConfigurationOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *CisScanConfiguration) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Name of the scan
func (o CisScanConfigurationOutput) ScanName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CisScanConfiguration) pulumi.StringPtrOutput { return v.ScanName }).(pulumi.StringPtrOutput)
}

func (o CisScanConfigurationOutput) Schedule() CisScanConfigurationSchedulePtrOutput {
	return o.ApplyT(func(v *CisScanConfiguration) CisScanConfigurationSchedulePtrOutput { return v.Schedule }).(CisScanConfigurationSchedulePtrOutput)
}

func (o CisScanConfigurationOutput) SecurityLevel() CisScanConfigurationCisSecurityLevelPtrOutput {
	return o.ApplyT(func(v *CisScanConfiguration) CisScanConfigurationCisSecurityLevelPtrOutput { return v.SecurityLevel }).(CisScanConfigurationCisSecurityLevelPtrOutput)
}

func (o CisScanConfigurationOutput) Tags() CisScanConfigurationCisTagMapPtrOutput {
	return o.ApplyT(func(v *CisScanConfiguration) CisScanConfigurationCisTagMapPtrOutput { return v.Tags }).(CisScanConfigurationCisTagMapPtrOutput)
}

func (o CisScanConfigurationOutput) Targets() CisScanConfigurationCisTargetsPtrOutput {
	return o.ApplyT(func(v *CisScanConfiguration) CisScanConfigurationCisTargetsPtrOutput { return v.Targets }).(CisScanConfigurationCisTargetsPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CisScanConfigurationInput)(nil)).Elem(), &CisScanConfiguration{})
	pulumi.RegisterOutputType(CisScanConfigurationOutput{})
}
