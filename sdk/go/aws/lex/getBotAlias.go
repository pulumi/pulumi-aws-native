// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lex

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Bot Alias enables you to change the version of a bot without updating applications that use the bot
func LookupBotAlias(ctx *pulumi.Context, args *LookupBotAliasArgs, opts ...pulumi.InvokeOption) (*LookupBotAliasResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupBotAliasResult
	err := ctx.Invoke("aws-native:lex:getBotAlias", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupBotAliasArgs struct {
	// The unique identifier of the bot alias.
	BotAliasId string `pulumi:"botAliasId"`
	// The unique identifier of the bot.
	BotId string `pulumi:"botId"`
}

type LookupBotAliasResult struct {
	// The Amazon Resource Name (ARN) of the bot alias.
	Arn *string `pulumi:"arn"`
	// The unique identifier of the bot alias.
	BotAliasId *string `pulumi:"botAliasId"`
	// Specifies settings that are unique to a locale. For example, you can use different Lambda function depending on the bot's locale.
	BotAliasLocaleSettings []BotAliasLocaleSettingsItem `pulumi:"botAliasLocaleSettings"`
	// The name of the bot alias.
	BotAliasName *string `pulumi:"botAliasName"`
	// The current status of the bot alias. When the status is Available the alias is ready for use with your bot.
	BotAliasStatus *BotAliasStatus `pulumi:"botAliasStatus"`
	// The version of the bot that the bot alias references.
	BotVersion *string `pulumi:"botVersion"`
	// Specifies whether Amazon Lex logs text and audio for conversations with the bot. When you enable conversation logs, text logs store text input, transcripts of audio input, and associated metadata in Amazon CloudWatch logs. Audio logs store input in Amazon S3 .
	ConversationLogSettings *BotAliasConversationLogSettings `pulumi:"conversationLogSettings"`
	// The description of the bot alias.
	Description *string `pulumi:"description"`
	// Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.
	SentimentAnalysisSettings *SentimentAnalysisSettingsProperties `pulumi:"sentimentAnalysisSettings"`
}

func LookupBotAliasOutput(ctx *pulumi.Context, args LookupBotAliasOutputArgs, opts ...pulumi.InvokeOption) LookupBotAliasResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupBotAliasResult, error) {
			args := v.(LookupBotAliasArgs)
			r, err := LookupBotAlias(ctx, &args, opts...)
			var s LookupBotAliasResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupBotAliasResultOutput)
}

type LookupBotAliasOutputArgs struct {
	// The unique identifier of the bot alias.
	BotAliasId pulumi.StringInput `pulumi:"botAliasId"`
	// The unique identifier of the bot.
	BotId pulumi.StringInput `pulumi:"botId"`
}

func (LookupBotAliasOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBotAliasArgs)(nil)).Elem()
}

type LookupBotAliasResultOutput struct{ *pulumi.OutputState }

func (LookupBotAliasResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBotAliasResult)(nil)).Elem()
}

func (o LookupBotAliasResultOutput) ToLookupBotAliasResultOutput() LookupBotAliasResultOutput {
	return o
}

func (o LookupBotAliasResultOutput) ToLookupBotAliasResultOutputWithContext(ctx context.Context) LookupBotAliasResultOutput {
	return o
}

// The Amazon Resource Name (ARN) of the bot alias.
func (o LookupBotAliasResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupBotAliasResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// The unique identifier of the bot alias.
func (o LookupBotAliasResultOutput) BotAliasId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupBotAliasResult) *string { return v.BotAliasId }).(pulumi.StringPtrOutput)
}

// Specifies settings that are unique to a locale. For example, you can use different Lambda function depending on the bot's locale.
func (o LookupBotAliasResultOutput) BotAliasLocaleSettings() BotAliasLocaleSettingsItemArrayOutput {
	return o.ApplyT(func(v LookupBotAliasResult) []BotAliasLocaleSettingsItem { return v.BotAliasLocaleSettings }).(BotAliasLocaleSettingsItemArrayOutput)
}

// The name of the bot alias.
func (o LookupBotAliasResultOutput) BotAliasName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupBotAliasResult) *string { return v.BotAliasName }).(pulumi.StringPtrOutput)
}

// The current status of the bot alias. When the status is Available the alias is ready for use with your bot.
func (o LookupBotAliasResultOutput) BotAliasStatus() BotAliasStatusPtrOutput {
	return o.ApplyT(func(v LookupBotAliasResult) *BotAliasStatus { return v.BotAliasStatus }).(BotAliasStatusPtrOutput)
}

// The version of the bot that the bot alias references.
func (o LookupBotAliasResultOutput) BotVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupBotAliasResult) *string { return v.BotVersion }).(pulumi.StringPtrOutput)
}

// Specifies whether Amazon Lex logs text and audio for conversations with the bot. When you enable conversation logs, text logs store text input, transcripts of audio input, and associated metadata in Amazon CloudWatch logs. Audio logs store input in Amazon S3 .
func (o LookupBotAliasResultOutput) ConversationLogSettings() BotAliasConversationLogSettingsPtrOutput {
	return o.ApplyT(func(v LookupBotAliasResult) *BotAliasConversationLogSettings { return v.ConversationLogSettings }).(BotAliasConversationLogSettingsPtrOutput)
}

// The description of the bot alias.
func (o LookupBotAliasResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupBotAliasResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.
func (o LookupBotAliasResultOutput) SentimentAnalysisSettings() SentimentAnalysisSettingsPropertiesPtrOutput {
	return o.ApplyT(func(v LookupBotAliasResult) *SentimentAnalysisSettingsProperties { return v.SentimentAnalysisSettings }).(SentimentAnalysisSettingsPropertiesPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupBotAliasResultOutput{})
}
