// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lex

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for bot versions, a numbered snapshot of your work that you can publish for use in different parts of your workflow, such as development, beta deployment, and production.
type BotVersion struct {
	pulumi.CustomResourceState

	// The unique identifier of the bot.
	BotId pulumi.StringOutput `pulumi:"botId"`
	// The version of the bot.
	BotVersion pulumi.StringOutput `pulumi:"botVersion"`
	// Specifies the locales that Amazon Lex adds to this version. You can choose the Draft version or any other previously published version for each locale. When you specify a source version, the locale data is copied from the source version to the new version.
	BotVersionLocaleSpecification BotVersionLocaleSpecificationArrayOutput `pulumi:"botVersionLocaleSpecification"`
	// The description of the version.
	Description pulumi.StringPtrOutput `pulumi:"description"`
}

// NewBotVersion registers a new resource with the given unique name, arguments, and options.
func NewBotVersion(ctx *pulumi.Context,
	name string, args *BotVersionArgs, opts ...pulumi.ResourceOption) (*BotVersion, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BotId == nil {
		return nil, errors.New("invalid value for required argument 'BotId'")
	}
	if args.BotVersionLocaleSpecification == nil {
		return nil, errors.New("invalid value for required argument 'BotVersionLocaleSpecification'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"botId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BotVersion
	err := ctx.RegisterResource("aws-native:lex:BotVersion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBotVersion gets an existing BotVersion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBotVersion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BotVersionState, opts ...pulumi.ResourceOption) (*BotVersion, error) {
	var resource BotVersion
	err := ctx.ReadResource("aws-native:lex:BotVersion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BotVersion resources.
type botVersionState struct {
}

type BotVersionState struct {
}

func (BotVersionState) ElementType() reflect.Type {
	return reflect.TypeOf((*botVersionState)(nil)).Elem()
}

type botVersionArgs struct {
	// The unique identifier of the bot.
	BotId string `pulumi:"botId"`
	// Specifies the locales that Amazon Lex adds to this version. You can choose the Draft version or any other previously published version for each locale. When you specify a source version, the locale data is copied from the source version to the new version.
	BotVersionLocaleSpecification []BotVersionLocaleSpecification `pulumi:"botVersionLocaleSpecification"`
	// The description of the version.
	Description *string `pulumi:"description"`
}

// The set of arguments for constructing a BotVersion resource.
type BotVersionArgs struct {
	// The unique identifier of the bot.
	BotId pulumi.StringInput
	// Specifies the locales that Amazon Lex adds to this version. You can choose the Draft version or any other previously published version for each locale. When you specify a source version, the locale data is copied from the source version to the new version.
	BotVersionLocaleSpecification BotVersionLocaleSpecificationArrayInput
	// The description of the version.
	Description pulumi.StringPtrInput
}

func (BotVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*botVersionArgs)(nil)).Elem()
}

type BotVersionInput interface {
	pulumi.Input

	ToBotVersionOutput() BotVersionOutput
	ToBotVersionOutputWithContext(ctx context.Context) BotVersionOutput
}

func (*BotVersion) ElementType() reflect.Type {
	return reflect.TypeOf((**BotVersion)(nil)).Elem()
}

func (i *BotVersion) ToBotVersionOutput() BotVersionOutput {
	return i.ToBotVersionOutputWithContext(context.Background())
}

func (i *BotVersion) ToBotVersionOutputWithContext(ctx context.Context) BotVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BotVersionOutput)
}

type BotVersionOutput struct{ *pulumi.OutputState }

func (BotVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BotVersion)(nil)).Elem()
}

func (o BotVersionOutput) ToBotVersionOutput() BotVersionOutput {
	return o
}

func (o BotVersionOutput) ToBotVersionOutputWithContext(ctx context.Context) BotVersionOutput {
	return o
}

// The unique identifier of the bot.
func (o BotVersionOutput) BotId() pulumi.StringOutput {
	return o.ApplyT(func(v *BotVersion) pulumi.StringOutput { return v.BotId }).(pulumi.StringOutput)
}

// The version of the bot.
func (o BotVersionOutput) BotVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *BotVersion) pulumi.StringOutput { return v.BotVersion }).(pulumi.StringOutput)
}

// Specifies the locales that Amazon Lex adds to this version. You can choose the Draft version or any other previously published version for each locale. When you specify a source version, the locale data is copied from the source version to the new version.
func (o BotVersionOutput) BotVersionLocaleSpecification() BotVersionLocaleSpecificationArrayOutput {
	return o.ApplyT(func(v *BotVersion) BotVersionLocaleSpecificationArrayOutput { return v.BotVersionLocaleSpecification }).(BotVersionLocaleSpecificationArrayOutput)
}

// The description of the version.
func (o BotVersionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BotVersion) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BotVersionInput)(nil)).Elem(), &BotVersion{})
	pulumi.RegisterOutputType(BotVersionOutput{})
}
