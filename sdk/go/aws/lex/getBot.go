// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lex

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Amazon Lex conversational bot performing automated tasks such as ordering a pizza, booking a hotel, and so on.
func LookupBot(ctx *pulumi.Context, args *LookupBotArgs, opts ...pulumi.InvokeOption) (*LookupBotResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupBotResult
	err := ctx.Invoke("aws-native:lex:getBot", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupBotArgs struct {
	// The unique identifier of the bot.
	Id string `pulumi:"id"`
}

type LookupBotResult struct {
	// The Amazon Resource Name (ARN) of the bot.
	Arn *string `pulumi:"arn"`
	// By default, data stored by Amazon Lex is encrypted. The `DataPrivacy` structure provides settings that determine how Amazon Lex handles special cases of securing the data for your bot.
	DataPrivacy *DataPrivacyProperties `pulumi:"dataPrivacy"`
	// The description of the version.
	Description *string `pulumi:"description"`
	// The unique identifier of the bot.
	Id *string `pulumi:"id"`
	// The time, in seconds, that Amazon Lex should keep information about a user's conversation with the bot.
	//
	// A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Lex deletes any data provided before the timeout.
	//
	// You can specify between 60 (1 minute) and 86,400 (24 hours) seconds.
	IdleSessionTtlInSeconds *int `pulumi:"idleSessionTtlInSeconds"`
	// The name of the bot locale.
	Name *string `pulumi:"name"`
	// The Amazon Resource Name (ARN) of the IAM role used to build and run the bot.
	RoleArn *string `pulumi:"roleArn"`
	// Specifies configuration settings for the alias used to test the bot. If the `TestBotAliasSettings` property is not specified, the settings are configured with default values.
	TestBotAliasSettings *BotTestBotAliasSettings `pulumi:"testBotAliasSettings"`
}

func LookupBotOutput(ctx *pulumi.Context, args LookupBotOutputArgs, opts ...pulumi.InvokeOption) LookupBotResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupBotResultOutput, error) {
			args := v.(LookupBotArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:lex:getBot", args, LookupBotResultOutput{}, options).(LookupBotResultOutput), nil
		}).(LookupBotResultOutput)
}

type LookupBotOutputArgs struct {
	// The unique identifier of the bot.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupBotOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBotArgs)(nil)).Elem()
}

type LookupBotResultOutput struct{ *pulumi.OutputState }

func (LookupBotResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBotResult)(nil)).Elem()
}

func (o LookupBotResultOutput) ToLookupBotResultOutput() LookupBotResultOutput {
	return o
}

func (o LookupBotResultOutput) ToLookupBotResultOutputWithContext(ctx context.Context) LookupBotResultOutput {
	return o
}

// The Amazon Resource Name (ARN) of the bot.
func (o LookupBotResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupBotResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// By default, data stored by Amazon Lex is encrypted. The `DataPrivacy` structure provides settings that determine how Amazon Lex handles special cases of securing the data for your bot.
func (o LookupBotResultOutput) DataPrivacy() DataPrivacyPropertiesPtrOutput {
	return o.ApplyT(func(v LookupBotResult) *DataPrivacyProperties { return v.DataPrivacy }).(DataPrivacyPropertiesPtrOutput)
}

// The description of the version.
func (o LookupBotResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupBotResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The unique identifier of the bot.
func (o LookupBotResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupBotResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The time, in seconds, that Amazon Lex should keep information about a user's conversation with the bot.
//
// A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Lex deletes any data provided before the timeout.
//
// You can specify between 60 (1 minute) and 86,400 (24 hours) seconds.
func (o LookupBotResultOutput) IdleSessionTtlInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupBotResult) *int { return v.IdleSessionTtlInSeconds }).(pulumi.IntPtrOutput)
}

// The name of the bot locale.
func (o LookupBotResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupBotResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of the IAM role used to build and run the bot.
func (o LookupBotResultOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupBotResult) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// Specifies configuration settings for the alias used to test the bot. If the `TestBotAliasSettings` property is not specified, the settings are configured with default values.
func (o LookupBotResultOutput) TestBotAliasSettings() BotTestBotAliasSettingsPtrOutput {
	return o.ApplyT(func(v LookupBotResult) *BotTestBotAliasSettings { return v.TestBotAliasSettings }).(BotTestBotAliasSettingsPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupBotResultOutput{})
}
