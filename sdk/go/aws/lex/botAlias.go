// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lex

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Bot Alias enables you to change the version of a bot without updating applications that use the bot
type BotAlias struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the bot alias.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The unique identifier of the bot alias.
	BotAliasId pulumi.StringOutput `pulumi:"botAliasId"`
	// Specifies settings that are unique to a locale. For example, you can use different Lambda function depending on the bot's locale.
	BotAliasLocaleSettings BotAliasLocaleSettingsItemArrayOutput `pulumi:"botAliasLocaleSettings"`
	// The name of the bot alias.
	BotAliasName pulumi.StringOutput `pulumi:"botAliasName"`
	// The current status of the bot alias. When the status is Available the alias is ready for use with your bot.
	BotAliasStatus BotAliasStatusOutput `pulumi:"botAliasStatus"`
	// A list of tags to add to the bot alias.
	BotAliasTags BotAliasTagArrayOutput `pulumi:"botAliasTags"`
	// The unique identifier of the bot.
	BotId pulumi.StringOutput `pulumi:"botId"`
	// The version of the bot that the bot alias references.
	BotVersion pulumi.StringPtrOutput `pulumi:"botVersion"`
	// Configures conversation logging that saves audio, text, and metadata for the conversations with your users.
	ConversationLogSettings BotAliasConversationLogSettingsPtrOutput `pulumi:"conversationLogSettings"`
	// The description of the bot alias.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.
	SentimentAnalysisSettings SentimentAnalysisSettingsPropertiesPtrOutput `pulumi:"sentimentAnalysisSettings"`
}

// NewBotAlias registers a new resource with the given unique name, arguments, and options.
func NewBotAlias(ctx *pulumi.Context,
	name string, args *BotAliasArgs, opts ...pulumi.ResourceOption) (*BotAlias, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BotId == nil {
		return nil, errors.New("invalid value for required argument 'BotId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"botId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BotAlias
	err := ctx.RegisterResource("aws-native:lex:BotAlias", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBotAlias gets an existing BotAlias resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBotAlias(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BotAliasState, opts ...pulumi.ResourceOption) (*BotAlias, error) {
	var resource BotAlias
	err := ctx.ReadResource("aws-native:lex:BotAlias", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BotAlias resources.
type botAliasState struct {
}

type BotAliasState struct {
}

func (BotAliasState) ElementType() reflect.Type {
	return reflect.TypeOf((*botAliasState)(nil)).Elem()
}

type botAliasArgs struct {
	// Specifies settings that are unique to a locale. For example, you can use different Lambda function depending on the bot's locale.
	BotAliasLocaleSettings []BotAliasLocaleSettingsItem `pulumi:"botAliasLocaleSettings"`
	// The name of the bot alias.
	BotAliasName *string `pulumi:"botAliasName"`
	// A list of tags to add to the bot alias.
	BotAliasTags []BotAliasTag `pulumi:"botAliasTags"`
	// The unique identifier of the bot.
	BotId string `pulumi:"botId"`
	// The version of the bot that the bot alias references.
	BotVersion *string `pulumi:"botVersion"`
	// Configures conversation logging that saves audio, text, and metadata for the conversations with your users.
	ConversationLogSettings *BotAliasConversationLogSettings `pulumi:"conversationLogSettings"`
	// The description of the bot alias.
	Description *string `pulumi:"description"`
	// Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.
	SentimentAnalysisSettings *SentimentAnalysisSettingsProperties `pulumi:"sentimentAnalysisSettings"`
}

// The set of arguments for constructing a BotAlias resource.
type BotAliasArgs struct {
	// Specifies settings that are unique to a locale. For example, you can use different Lambda function depending on the bot's locale.
	BotAliasLocaleSettings BotAliasLocaleSettingsItemArrayInput
	// The name of the bot alias.
	BotAliasName pulumi.StringPtrInput
	// A list of tags to add to the bot alias.
	BotAliasTags BotAliasTagArrayInput
	// The unique identifier of the bot.
	BotId pulumi.StringInput
	// The version of the bot that the bot alias references.
	BotVersion pulumi.StringPtrInput
	// Configures conversation logging that saves audio, text, and metadata for the conversations with your users.
	ConversationLogSettings BotAliasConversationLogSettingsPtrInput
	// The description of the bot alias.
	Description pulumi.StringPtrInput
	// Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.
	SentimentAnalysisSettings SentimentAnalysisSettingsPropertiesPtrInput
}

func (BotAliasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*botAliasArgs)(nil)).Elem()
}

type BotAliasInput interface {
	pulumi.Input

	ToBotAliasOutput() BotAliasOutput
	ToBotAliasOutputWithContext(ctx context.Context) BotAliasOutput
}

func (*BotAlias) ElementType() reflect.Type {
	return reflect.TypeOf((**BotAlias)(nil)).Elem()
}

func (i *BotAlias) ToBotAliasOutput() BotAliasOutput {
	return i.ToBotAliasOutputWithContext(context.Background())
}

func (i *BotAlias) ToBotAliasOutputWithContext(ctx context.Context) BotAliasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BotAliasOutput)
}

type BotAliasOutput struct{ *pulumi.OutputState }

func (BotAliasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BotAlias)(nil)).Elem()
}

func (o BotAliasOutput) ToBotAliasOutput() BotAliasOutput {
	return o
}

func (o BotAliasOutput) ToBotAliasOutputWithContext(ctx context.Context) BotAliasOutput {
	return o
}

// The Amazon Resource Name (ARN) of the bot alias.
func (o BotAliasOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *BotAlias) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The unique identifier of the bot alias.
func (o BotAliasOutput) BotAliasId() pulumi.StringOutput {
	return o.ApplyT(func(v *BotAlias) pulumi.StringOutput { return v.BotAliasId }).(pulumi.StringOutput)
}

// Specifies settings that are unique to a locale. For example, you can use different Lambda function depending on the bot's locale.
func (o BotAliasOutput) BotAliasLocaleSettings() BotAliasLocaleSettingsItemArrayOutput {
	return o.ApplyT(func(v *BotAlias) BotAliasLocaleSettingsItemArrayOutput { return v.BotAliasLocaleSettings }).(BotAliasLocaleSettingsItemArrayOutput)
}

// The name of the bot alias.
func (o BotAliasOutput) BotAliasName() pulumi.StringOutput {
	return o.ApplyT(func(v *BotAlias) pulumi.StringOutput { return v.BotAliasName }).(pulumi.StringOutput)
}

// The current status of the bot alias. When the status is Available the alias is ready for use with your bot.
func (o BotAliasOutput) BotAliasStatus() BotAliasStatusOutput {
	return o.ApplyT(func(v *BotAlias) BotAliasStatusOutput { return v.BotAliasStatus }).(BotAliasStatusOutput)
}

// A list of tags to add to the bot alias.
func (o BotAliasOutput) BotAliasTags() BotAliasTagArrayOutput {
	return o.ApplyT(func(v *BotAlias) BotAliasTagArrayOutput { return v.BotAliasTags }).(BotAliasTagArrayOutput)
}

// The unique identifier of the bot.
func (o BotAliasOutput) BotId() pulumi.StringOutput {
	return o.ApplyT(func(v *BotAlias) pulumi.StringOutput { return v.BotId }).(pulumi.StringOutput)
}

// The version of the bot that the bot alias references.
func (o BotAliasOutput) BotVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BotAlias) pulumi.StringPtrOutput { return v.BotVersion }).(pulumi.StringPtrOutput)
}

// Configures conversation logging that saves audio, text, and metadata for the conversations with your users.
func (o BotAliasOutput) ConversationLogSettings() BotAliasConversationLogSettingsPtrOutput {
	return o.ApplyT(func(v *BotAlias) BotAliasConversationLogSettingsPtrOutput { return v.ConversationLogSettings }).(BotAliasConversationLogSettingsPtrOutput)
}

// The description of the bot alias.
func (o BotAliasOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BotAlias) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.
func (o BotAliasOutput) SentimentAnalysisSettings() SentimentAnalysisSettingsPropertiesPtrOutput {
	return o.ApplyT(func(v *BotAlias) SentimentAnalysisSettingsPropertiesPtrOutput { return v.SentimentAnalysisSettings }).(SentimentAnalysisSettingsPropertiesPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BotAliasInput)(nil)).Elem(), &BotAlias{})
	pulumi.RegisterOutputType(BotAliasOutput{})
}
