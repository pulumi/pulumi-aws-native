// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package lex

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Bot Alias enables you to change the version of a bot without updating applications that use the bot
//
// Deprecated: BotAlias is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
type BotAlias struct {
	pulumi.CustomResourceState

	Arn                    pulumi.StringOutput                   `pulumi:"arn"`
	BotAliasId             pulumi.StringOutput                   `pulumi:"botAliasId"`
	BotAliasLocaleSettings BotAliasLocaleSettingsItemArrayOutput `pulumi:"botAliasLocaleSettings"`
	BotAliasName           pulumi.StringOutput                   `pulumi:"botAliasName"`
	BotAliasStatus         BotAliasStatusOutput                  `pulumi:"botAliasStatus"`
	// A list of tags to add to the bot alias.
	BotAliasTags            BotAliasTagArrayOutput                   `pulumi:"botAliasTags"`
	BotId                   pulumi.StringOutput                      `pulumi:"botId"`
	BotVersion              pulumi.StringPtrOutput                   `pulumi:"botVersion"`
	ConversationLogSettings BotAliasConversationLogSettingsPtrOutput `pulumi:"conversationLogSettings"`
	Description             pulumi.StringPtrOutput                   `pulumi:"description"`
	// Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.
	SentimentAnalysisSettings SentimentAnalysisSettingsPropertiesPtrOutput `pulumi:"sentimentAnalysisSettings"`
}

// NewBotAlias registers a new resource with the given unique name, arguments, and options.
func NewBotAlias(ctx *pulumi.Context,
	name string, args *BotAliasArgs, opts ...pulumi.ResourceOption) (*BotAlias, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BotId == nil {
		return nil, errors.New("invalid value for required argument 'BotId'")
	}
	var resource BotAlias
	err := ctx.RegisterResource("aws-native:lex:BotAlias", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBotAlias gets an existing BotAlias resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBotAlias(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BotAliasState, opts ...pulumi.ResourceOption) (*BotAlias, error) {
	var resource BotAlias
	err := ctx.ReadResource("aws-native:lex:BotAlias", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BotAlias resources.
type botAliasState struct {
}

type BotAliasState struct {
}

func (BotAliasState) ElementType() reflect.Type {
	return reflect.TypeOf((*botAliasState)(nil)).Elem()
}

type botAliasArgs struct {
	BotAliasLocaleSettings []BotAliasLocaleSettingsItem `pulumi:"botAliasLocaleSettings"`
	BotAliasName           *string                      `pulumi:"botAliasName"`
	// A list of tags to add to the bot alias.
	BotAliasTags            []BotAliasTag                    `pulumi:"botAliasTags"`
	BotId                   string                           `pulumi:"botId"`
	BotVersion              *string                          `pulumi:"botVersion"`
	ConversationLogSettings *BotAliasConversationLogSettings `pulumi:"conversationLogSettings"`
	Description             *string                          `pulumi:"description"`
	// Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.
	SentimentAnalysisSettings *SentimentAnalysisSettingsProperties `pulumi:"sentimentAnalysisSettings"`
}

// The set of arguments for constructing a BotAlias resource.
type BotAliasArgs struct {
	BotAliasLocaleSettings BotAliasLocaleSettingsItemArrayInput
	BotAliasName           pulumi.StringPtrInput
	// A list of tags to add to the bot alias.
	BotAliasTags            BotAliasTagArrayInput
	BotId                   pulumi.StringInput
	BotVersion              pulumi.StringPtrInput
	ConversationLogSettings BotAliasConversationLogSettingsPtrInput
	Description             pulumi.StringPtrInput
	// Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.
	SentimentAnalysisSettings SentimentAnalysisSettingsPropertiesPtrInput
}

func (BotAliasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*botAliasArgs)(nil)).Elem()
}

type BotAliasInput interface {
	pulumi.Input

	ToBotAliasOutput() BotAliasOutput
	ToBotAliasOutputWithContext(ctx context.Context) BotAliasOutput
}

func (*BotAlias) ElementType() reflect.Type {
	return reflect.TypeOf((*BotAlias)(nil))
}

func (i *BotAlias) ToBotAliasOutput() BotAliasOutput {
	return i.ToBotAliasOutputWithContext(context.Background())
}

func (i *BotAlias) ToBotAliasOutputWithContext(ctx context.Context) BotAliasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BotAliasOutput)
}

type BotAliasOutput struct{ *pulumi.OutputState }

func (BotAliasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BotAlias)(nil))
}

func (o BotAliasOutput) ToBotAliasOutput() BotAliasOutput {
	return o
}

func (o BotAliasOutput) ToBotAliasOutputWithContext(ctx context.Context) BotAliasOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BotAliasInput)(nil)).Elem(), &BotAlias{})
	pulumi.RegisterOutputType(BotAliasOutput{})
}
