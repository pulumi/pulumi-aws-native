// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudfront

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::CloudFront::MonitoringSubscription
type MonitoringSubscription struct {
	pulumi.CustomResourceState

	DistributionId         pulumi.StringOutput              `pulumi:"distributionId"`
	MonitoringSubscription MonitoringSubscriptionTypeOutput `pulumi:"monitoringSubscription"`
}

// NewMonitoringSubscription registers a new resource with the given unique name, arguments, and options.
func NewMonitoringSubscription(ctx *pulumi.Context,
	name string, args *MonitoringSubscriptionArgs, opts ...pulumi.ResourceOption) (*MonitoringSubscription, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DistributionId == nil {
		return nil, errors.New("invalid value for required argument 'DistributionId'")
	}
	if args.MonitoringSubscription == nil {
		return nil, errors.New("invalid value for required argument 'MonitoringSubscription'")
	}
	var resource MonitoringSubscription
	err := ctx.RegisterResource("aws-native:cloudfront:MonitoringSubscription", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMonitoringSubscription gets an existing MonitoringSubscription resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMonitoringSubscription(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MonitoringSubscriptionState, opts ...pulumi.ResourceOption) (*MonitoringSubscription, error) {
	var resource MonitoringSubscription
	err := ctx.ReadResource("aws-native:cloudfront:MonitoringSubscription", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MonitoringSubscription resources.
type monitoringSubscriptionState struct {
}

type MonitoringSubscriptionState struct {
}

func (MonitoringSubscriptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*monitoringSubscriptionState)(nil)).Elem()
}

type monitoringSubscriptionArgs struct {
	DistributionId         string                     `pulumi:"distributionId"`
	MonitoringSubscription MonitoringSubscriptionType `pulumi:"monitoringSubscription"`
}

// The set of arguments for constructing a MonitoringSubscription resource.
type MonitoringSubscriptionArgs struct {
	DistributionId         pulumi.StringInput
	MonitoringSubscription MonitoringSubscriptionTypeInput
}

func (MonitoringSubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*monitoringSubscriptionArgs)(nil)).Elem()
}

type MonitoringSubscriptionInput interface {
	pulumi.Input

	ToMonitoringSubscriptionOutput() MonitoringSubscriptionOutput
	ToMonitoringSubscriptionOutputWithContext(ctx context.Context) MonitoringSubscriptionOutput
}

func (*MonitoringSubscription) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoringSubscription)(nil)).Elem()
}

func (i *MonitoringSubscription) ToMonitoringSubscriptionOutput() MonitoringSubscriptionOutput {
	return i.ToMonitoringSubscriptionOutputWithContext(context.Background())
}

func (i *MonitoringSubscription) ToMonitoringSubscriptionOutputWithContext(ctx context.Context) MonitoringSubscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringSubscriptionOutput)
}

type MonitoringSubscriptionOutput struct{ *pulumi.OutputState }

func (MonitoringSubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoringSubscription)(nil)).Elem()
}

func (o MonitoringSubscriptionOutput) ToMonitoringSubscriptionOutput() MonitoringSubscriptionOutput {
	return o
}

func (o MonitoringSubscriptionOutput) ToMonitoringSubscriptionOutputWithContext(ctx context.Context) MonitoringSubscriptionOutput {
	return o
}

func (o MonitoringSubscriptionOutput) DistributionId() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitoringSubscription) pulumi.StringOutput { return v.DistributionId }).(pulumi.StringOutput)
}

func (o MonitoringSubscriptionOutput) MonitoringSubscription() MonitoringSubscriptionTypeOutput {
	return o.ApplyT(func(v *MonitoringSubscription) MonitoringSubscriptionTypeOutput { return v.MonitoringSubscription }).(MonitoringSubscriptionTypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MonitoringSubscriptionInput)(nil)).Elem(), &MonitoringSubscription{})
	pulumi.RegisterOutputType(MonitoringSubscriptionOutput{})
}
