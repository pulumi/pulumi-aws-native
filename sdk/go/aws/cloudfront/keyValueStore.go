// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudfront

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The key value store. Use this to separate data from function code, allowing you to update data without having to publish a new version of a function. The key value store holds keys and their corresponding values.
type KeyValueStore struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the key value store.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The unique Id for the key value store.
	AwsId pulumi.StringOutput `pulumi:"awsId"`
	// A comment for the key value store.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// The import source for the key value store.
	ImportSource KeyValueStoreImportSourcePtrOutput `pulumi:"importSource"`
	// The name of the key value store.
	Name pulumi.StringOutput `pulumi:"name"`
	// The current status of the key value store. For more information, see [Key value store statuses](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/kvs-with-functions-create.html#key-value-store-status) in the *.*
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewKeyValueStore registers a new resource with the given unique name, arguments, and options.
func NewKeyValueStore(ctx *pulumi.Context,
	name string, args *KeyValueStoreArgs, opts ...pulumi.ResourceOption) (*KeyValueStore, error) {
	if args == nil {
		args = &KeyValueStoreArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"name",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KeyValueStore
	err := ctx.RegisterResource("aws-native:cloudfront:KeyValueStore", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKeyValueStore gets an existing KeyValueStore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeyValueStore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeyValueStoreState, opts ...pulumi.ResourceOption) (*KeyValueStore, error) {
	var resource KeyValueStore
	err := ctx.ReadResource("aws-native:cloudfront:KeyValueStore", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KeyValueStore resources.
type keyValueStoreState struct {
}

type KeyValueStoreState struct {
}

func (KeyValueStoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*keyValueStoreState)(nil)).Elem()
}

type keyValueStoreArgs struct {
	// A comment for the key value store.
	Comment *string `pulumi:"comment"`
	// The import source for the key value store.
	ImportSource *KeyValueStoreImportSource `pulumi:"importSource"`
	// The name of the key value store.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a KeyValueStore resource.
type KeyValueStoreArgs struct {
	// A comment for the key value store.
	Comment pulumi.StringPtrInput
	// The import source for the key value store.
	ImportSource KeyValueStoreImportSourcePtrInput
	// The name of the key value store.
	Name pulumi.StringPtrInput
}

func (KeyValueStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keyValueStoreArgs)(nil)).Elem()
}

type KeyValueStoreInput interface {
	pulumi.Input

	ToKeyValueStoreOutput() KeyValueStoreOutput
	ToKeyValueStoreOutputWithContext(ctx context.Context) KeyValueStoreOutput
}

func (*KeyValueStore) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyValueStore)(nil)).Elem()
}

func (i *KeyValueStore) ToKeyValueStoreOutput() KeyValueStoreOutput {
	return i.ToKeyValueStoreOutputWithContext(context.Background())
}

func (i *KeyValueStore) ToKeyValueStoreOutputWithContext(ctx context.Context) KeyValueStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyValueStoreOutput)
}

type KeyValueStoreOutput struct{ *pulumi.OutputState }

func (KeyValueStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyValueStore)(nil)).Elem()
}

func (o KeyValueStoreOutput) ToKeyValueStoreOutput() KeyValueStoreOutput {
	return o
}

func (o KeyValueStoreOutput) ToKeyValueStoreOutputWithContext(ctx context.Context) KeyValueStoreOutput {
	return o
}

// The Amazon Resource Name (ARN) of the key value store.
func (o KeyValueStoreOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyValueStore) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The unique Id for the key value store.
func (o KeyValueStoreOutput) AwsId() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyValueStore) pulumi.StringOutput { return v.AwsId }).(pulumi.StringOutput)
}

// A comment for the key value store.
func (o KeyValueStoreOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyValueStore) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// The import source for the key value store.
func (o KeyValueStoreOutput) ImportSource() KeyValueStoreImportSourcePtrOutput {
	return o.ApplyT(func(v *KeyValueStore) KeyValueStoreImportSourcePtrOutput { return v.ImportSource }).(KeyValueStoreImportSourcePtrOutput)
}

// The name of the key value store.
func (o KeyValueStoreOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyValueStore) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The current status of the key value store. For more information, see [Key value store statuses](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/kvs-with-functions-create.html#key-value-store-status) in the *.*
func (o KeyValueStoreOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyValueStore) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KeyValueStoreInput)(nil)).Elem(), &KeyValueStore{})
	pulumi.RegisterOutputType(KeyValueStoreOutput{})
}
