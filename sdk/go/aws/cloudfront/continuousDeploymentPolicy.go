// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudfront

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::CloudFront::ContinuousDeploymentPolicy
type ContinuousDeploymentPolicy struct {
	pulumi.CustomResourceState

	ContinuousDeploymentPolicyConfig ContinuousDeploymentPolicyConfigOutput `pulumi:"continuousDeploymentPolicyConfig"`
	LastModifiedTime                 pulumi.StringOutput                    `pulumi:"lastModifiedTime"`
}

// NewContinuousDeploymentPolicy registers a new resource with the given unique name, arguments, and options.
func NewContinuousDeploymentPolicy(ctx *pulumi.Context,
	name string, args *ContinuousDeploymentPolicyArgs, opts ...pulumi.ResourceOption) (*ContinuousDeploymentPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ContinuousDeploymentPolicyConfig == nil {
		return nil, errors.New("invalid value for required argument 'ContinuousDeploymentPolicyConfig'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ContinuousDeploymentPolicy
	err := ctx.RegisterResource("aws-native:cloudfront:ContinuousDeploymentPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContinuousDeploymentPolicy gets an existing ContinuousDeploymentPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContinuousDeploymentPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContinuousDeploymentPolicyState, opts ...pulumi.ResourceOption) (*ContinuousDeploymentPolicy, error) {
	var resource ContinuousDeploymentPolicy
	err := ctx.ReadResource("aws-native:cloudfront:ContinuousDeploymentPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContinuousDeploymentPolicy resources.
type continuousDeploymentPolicyState struct {
}

type ContinuousDeploymentPolicyState struct {
}

func (ContinuousDeploymentPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*continuousDeploymentPolicyState)(nil)).Elem()
}

type continuousDeploymentPolicyArgs struct {
	ContinuousDeploymentPolicyConfig ContinuousDeploymentPolicyConfig `pulumi:"continuousDeploymentPolicyConfig"`
}

// The set of arguments for constructing a ContinuousDeploymentPolicy resource.
type ContinuousDeploymentPolicyArgs struct {
	ContinuousDeploymentPolicyConfig ContinuousDeploymentPolicyConfigInput
}

func (ContinuousDeploymentPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*continuousDeploymentPolicyArgs)(nil)).Elem()
}

type ContinuousDeploymentPolicyInput interface {
	pulumi.Input

	ToContinuousDeploymentPolicyOutput() ContinuousDeploymentPolicyOutput
	ToContinuousDeploymentPolicyOutputWithContext(ctx context.Context) ContinuousDeploymentPolicyOutput
}

func (*ContinuousDeploymentPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**ContinuousDeploymentPolicy)(nil)).Elem()
}

func (i *ContinuousDeploymentPolicy) ToContinuousDeploymentPolicyOutput() ContinuousDeploymentPolicyOutput {
	return i.ToContinuousDeploymentPolicyOutputWithContext(context.Background())
}

func (i *ContinuousDeploymentPolicy) ToContinuousDeploymentPolicyOutputWithContext(ctx context.Context) ContinuousDeploymentPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContinuousDeploymentPolicyOutput)
}

type ContinuousDeploymentPolicyOutput struct{ *pulumi.OutputState }

func (ContinuousDeploymentPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContinuousDeploymentPolicy)(nil)).Elem()
}

func (o ContinuousDeploymentPolicyOutput) ToContinuousDeploymentPolicyOutput() ContinuousDeploymentPolicyOutput {
	return o
}

func (o ContinuousDeploymentPolicyOutput) ToContinuousDeploymentPolicyOutputWithContext(ctx context.Context) ContinuousDeploymentPolicyOutput {
	return o
}

func (o ContinuousDeploymentPolicyOutput) ContinuousDeploymentPolicyConfig() ContinuousDeploymentPolicyConfigOutput {
	return o.ApplyT(func(v *ContinuousDeploymentPolicy) ContinuousDeploymentPolicyConfigOutput {
		return v.ContinuousDeploymentPolicyConfig
	}).(ContinuousDeploymentPolicyConfigOutput)
}

func (o ContinuousDeploymentPolicyOutput) LastModifiedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ContinuousDeploymentPolicy) pulumi.StringOutput { return v.LastModifiedTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContinuousDeploymentPolicyInput)(nil)).Elem(), &ContinuousDeploymentPolicy{})
	pulumi.RegisterOutputType(ContinuousDeploymentPolicyOutput{})
}
