// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudfront

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::CloudFront::MonitoringSubscription
func LookupMonitoringSubscription(ctx *pulumi.Context, args *LookupMonitoringSubscriptionArgs, opts ...pulumi.InvokeOption) (*LookupMonitoringSubscriptionResult, error) {
	var rv LookupMonitoringSubscriptionResult
	err := ctx.Invoke("aws-native:cloudfront:getMonitoringSubscription", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupMonitoringSubscriptionArgs struct {
	DistributionId string `pulumi:"distributionId"`
}

type LookupMonitoringSubscriptionResult struct {
	MonitoringSubscription *MonitoringSubscriptionType `pulumi:"monitoringSubscription"`
}

func LookupMonitoringSubscriptionOutput(ctx *pulumi.Context, args LookupMonitoringSubscriptionOutputArgs, opts ...pulumi.InvokeOption) LookupMonitoringSubscriptionResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupMonitoringSubscriptionResult, error) {
			args := v.(LookupMonitoringSubscriptionArgs)
			r, err := LookupMonitoringSubscription(ctx, &args, opts...)
			var s LookupMonitoringSubscriptionResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupMonitoringSubscriptionResultOutput)
}

type LookupMonitoringSubscriptionOutputArgs struct {
	DistributionId pulumi.StringInput `pulumi:"distributionId"`
}

func (LookupMonitoringSubscriptionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMonitoringSubscriptionArgs)(nil)).Elem()
}

type LookupMonitoringSubscriptionResultOutput struct{ *pulumi.OutputState }

func (LookupMonitoringSubscriptionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMonitoringSubscriptionResult)(nil)).Elem()
}

func (o LookupMonitoringSubscriptionResultOutput) ToLookupMonitoringSubscriptionResultOutput() LookupMonitoringSubscriptionResultOutput {
	return o
}

func (o LookupMonitoringSubscriptionResultOutput) ToLookupMonitoringSubscriptionResultOutputWithContext(ctx context.Context) LookupMonitoringSubscriptionResultOutput {
	return o
}

func (o LookupMonitoringSubscriptionResultOutput) MonitoringSubscription() MonitoringSubscriptionTypePtrOutput {
	return o.ApplyT(func(v LookupMonitoringSubscriptionResult) *MonitoringSubscriptionType {
		return v.MonitoringSubscription
	}).(MonitoringSubscriptionTypePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupMonitoringSubscriptionResultOutput{})
}
