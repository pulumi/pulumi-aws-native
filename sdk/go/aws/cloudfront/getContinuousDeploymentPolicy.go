// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudfront

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a continuous deployment policy that routes a subset of production traffic from a primary distribution to a staging distribution.
//
//	After you create and update a staging distribution, you can use a continuous deployment policy to incrementally move traffic to the staging distribution. This enables you to test changes to a distribution's configuration before moving all of your production traffic to the new configuration.
//	For more information, see [Using CloudFront continuous deployment to safely test CDN configuration changes](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/continuous-deployment.html) in the *Amazon CloudFront Developer Guide*.
func LookupContinuousDeploymentPolicy(ctx *pulumi.Context, args *LookupContinuousDeploymentPolicyArgs, opts ...pulumi.InvokeOption) (*LookupContinuousDeploymentPolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupContinuousDeploymentPolicyResult
	err := ctx.Invoke("aws-native:cloudfront:getContinuousDeploymentPolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupContinuousDeploymentPolicyArgs struct {
	// The identifier of the cotinuous deployment policy.
	Id string `pulumi:"id"`
}

type LookupContinuousDeploymentPolicyResult struct {
	// Contains the configuration for a continuous deployment policy.
	ContinuousDeploymentPolicyConfig *ContinuousDeploymentPolicyConfig `pulumi:"continuousDeploymentPolicyConfig"`
	// The identifier of the cotinuous deployment policy.
	Id *string `pulumi:"id"`
	// The date and time when the continuous deployment policy was last modified.
	LastModifiedTime *string `pulumi:"lastModifiedTime"`
}

func LookupContinuousDeploymentPolicyOutput(ctx *pulumi.Context, args LookupContinuousDeploymentPolicyOutputArgs, opts ...pulumi.InvokeOption) LookupContinuousDeploymentPolicyResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupContinuousDeploymentPolicyResultOutput, error) {
			args := v.(LookupContinuousDeploymentPolicyArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupContinuousDeploymentPolicyResult
			secret, err := ctx.InvokePackageRaw("aws-native:cloudfront:getContinuousDeploymentPolicy", args, &rv, "", opts...)
			if err != nil {
				return LookupContinuousDeploymentPolicyResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupContinuousDeploymentPolicyResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupContinuousDeploymentPolicyResultOutput), nil
			}
			return output, nil
		}).(LookupContinuousDeploymentPolicyResultOutput)
}

type LookupContinuousDeploymentPolicyOutputArgs struct {
	// The identifier of the cotinuous deployment policy.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupContinuousDeploymentPolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupContinuousDeploymentPolicyArgs)(nil)).Elem()
}

type LookupContinuousDeploymentPolicyResultOutput struct{ *pulumi.OutputState }

func (LookupContinuousDeploymentPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupContinuousDeploymentPolicyResult)(nil)).Elem()
}

func (o LookupContinuousDeploymentPolicyResultOutput) ToLookupContinuousDeploymentPolicyResultOutput() LookupContinuousDeploymentPolicyResultOutput {
	return o
}

func (o LookupContinuousDeploymentPolicyResultOutput) ToLookupContinuousDeploymentPolicyResultOutputWithContext(ctx context.Context) LookupContinuousDeploymentPolicyResultOutput {
	return o
}

// Contains the configuration for a continuous deployment policy.
func (o LookupContinuousDeploymentPolicyResultOutput) ContinuousDeploymentPolicyConfig() ContinuousDeploymentPolicyConfigPtrOutput {
	return o.ApplyT(func(v LookupContinuousDeploymentPolicyResult) *ContinuousDeploymentPolicyConfig {
		return v.ContinuousDeploymentPolicyConfig
	}).(ContinuousDeploymentPolicyConfigPtrOutput)
}

// The identifier of the cotinuous deployment policy.
func (o LookupContinuousDeploymentPolicyResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupContinuousDeploymentPolicyResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The date and time when the continuous deployment policy was last modified.
func (o LookupContinuousDeploymentPolicyResultOutput) LastModifiedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupContinuousDeploymentPolicyResult) *string { return v.LastModifiedTime }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupContinuousDeploymentPolicyResultOutput{})
}
