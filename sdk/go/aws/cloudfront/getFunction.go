// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudfront

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a CF function.
//
//	To create a function, you provide the function code and some configuration information about the function. The response contains an Amazon Resource Name (ARN) that uniquely identifies the function, and the function’s stage.
//	By default, when you create a function, it’s in the ``DEVELOPMENT`` stage. In this stage, you can [test the function](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/test-function.html) in the CF console (or with ``TestFunction`` in the CF API).
//	When you’re ready to use your function with a CF distribution, publish the function to the ``LIVE`` stage. You can do this in the CF console, with ``PublishFunction`` in the CF API, or by updating the ``AWS::CloudFront::Function`` resource with the ``AutoPublish`` property set to ``true``. When the function is published to the ``LIVE`` stage, you can attach it to a distribution’s cache behavior, using the function’s ARN.
//	To automatically publish the function to the ``LIVE`` stage when it’s created, set the ``AutoPublish`` property to ``true``.
func LookupFunction(ctx *pulumi.Context, args *LookupFunctionArgs, opts ...pulumi.InvokeOption) (*LookupFunctionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupFunctionResult
	err := ctx.Invoke("aws-native:cloudfront:getFunction", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupFunctionArgs struct {
	// The ARN of the function. For example:
	//
	// `arn:aws:cloudfront::123456789012:function/ExampleFunction` .
	//
	// To get the function ARN, use the following syntax:
	//
	// `!GetAtt *Function_Logical_ID* .FunctionMetadata.FunctionARN`
	FunctionArn string `pulumi:"functionArn"`
}

type LookupFunctionResult struct {
	// The ARN of the function. For example:
	//
	// `arn:aws:cloudfront::123456789012:function/ExampleFunction` .
	//
	// To get the function ARN, use the following syntax:
	//
	// `!GetAtt *Function_Logical_ID* .FunctionMetadata.FunctionARN`
	FunctionArn *string `pulumi:"functionArn"`
	// The function code. For more information about writing a CloudFront function, see [Writing function code for CloudFront Functions](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/writing-function-code.html) in the *Amazon CloudFront Developer Guide*.
	FunctionCode *string `pulumi:"functionCode"`
	// Contains configuration information about a CloudFront function.
	FunctionConfig *FunctionConfig `pulumi:"functionConfig"`
	// Contains metadata about a CloudFront function.
	FunctionMetadata *FunctionMetadata `pulumi:"functionMetadata"`
	// A name to identify the function.
	Name  *string `pulumi:"name"`
	Stage *string `pulumi:"stage"`
}

func LookupFunctionOutput(ctx *pulumi.Context, args LookupFunctionOutputArgs, opts ...pulumi.InvokeOption) LookupFunctionResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupFunctionResultOutput, error) {
			args := v.(LookupFunctionArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupFunctionResult
			secret, err := ctx.InvokePackageRaw("aws-native:cloudfront:getFunction", args, &rv, "", opts...)
			if err != nil {
				return LookupFunctionResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupFunctionResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupFunctionResultOutput), nil
			}
			return output, nil
		}).(LookupFunctionResultOutput)
}

type LookupFunctionOutputArgs struct {
	// The ARN of the function. For example:
	//
	// `arn:aws:cloudfront::123456789012:function/ExampleFunction` .
	//
	// To get the function ARN, use the following syntax:
	//
	// `!GetAtt *Function_Logical_ID* .FunctionMetadata.FunctionARN`
	FunctionArn pulumi.StringInput `pulumi:"functionArn"`
}

func (LookupFunctionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFunctionArgs)(nil)).Elem()
}

type LookupFunctionResultOutput struct{ *pulumi.OutputState }

func (LookupFunctionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFunctionResult)(nil)).Elem()
}

func (o LookupFunctionResultOutput) ToLookupFunctionResultOutput() LookupFunctionResultOutput {
	return o
}

func (o LookupFunctionResultOutput) ToLookupFunctionResultOutputWithContext(ctx context.Context) LookupFunctionResultOutput {
	return o
}

// The ARN of the function. For example:
//
// `arn:aws:cloudfront::123456789012:function/ExampleFunction` .
//
// To get the function ARN, use the following syntax:
//
// `!GetAtt *Function_Logical_ID* .FunctionMetadata.FunctionARN`
func (o LookupFunctionResultOutput) FunctionArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupFunctionResult) *string { return v.FunctionArn }).(pulumi.StringPtrOutput)
}

// The function code. For more information about writing a CloudFront function, see [Writing function code for CloudFront Functions](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/writing-function-code.html) in the *Amazon CloudFront Developer Guide*.
func (o LookupFunctionResultOutput) FunctionCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupFunctionResult) *string { return v.FunctionCode }).(pulumi.StringPtrOutput)
}

// Contains configuration information about a CloudFront function.
func (o LookupFunctionResultOutput) FunctionConfig() FunctionConfigPtrOutput {
	return o.ApplyT(func(v LookupFunctionResult) *FunctionConfig { return v.FunctionConfig }).(FunctionConfigPtrOutput)
}

// Contains metadata about a CloudFront function.
func (o LookupFunctionResultOutput) FunctionMetadata() FunctionMetadataPtrOutput {
	return o.ApplyT(func(v LookupFunctionResult) *FunctionMetadata { return v.FunctionMetadata }).(FunctionMetadataPtrOutput)
}

// A name to identify the function.
func (o LookupFunctionResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupFunctionResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o LookupFunctionResultOutput) Stage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupFunctionResult) *string { return v.Stage }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupFunctionResultOutput{})
}
