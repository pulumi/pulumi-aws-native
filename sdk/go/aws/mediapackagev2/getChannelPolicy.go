// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mediapackagev2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// <p>Represents a resource-based policy that allows or denies access to a channel.</p>
func LookupChannelPolicy(ctx *pulumi.Context, args *LookupChannelPolicyArgs, opts ...pulumi.InvokeOption) (*LookupChannelPolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupChannelPolicyResult
	err := ctx.Invoke("aws-native:mediapackagev2:getChannelPolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupChannelPolicyArgs struct {
	// The name of the channel group associated with the channel policy.
	ChannelGroupName string `pulumi:"channelGroupName"`
	// The name of the channel associated with the channel policy.
	ChannelName string `pulumi:"channelName"`
}

type LookupChannelPolicyResult struct {
	// The policy associated with the channel.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::MediaPackageV2::ChannelPolicy` for more information about the expected schema for this property.
	Policy interface{} `pulumi:"policy"`
}

func LookupChannelPolicyOutput(ctx *pulumi.Context, args LookupChannelPolicyOutputArgs, opts ...pulumi.InvokeOption) LookupChannelPolicyResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupChannelPolicyResultOutput, error) {
			args := v.(LookupChannelPolicyArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupChannelPolicyResult
			secret, err := ctx.InvokePackageRaw("aws-native:mediapackagev2:getChannelPolicy", args, &rv, "", opts...)
			if err != nil {
				return LookupChannelPolicyResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupChannelPolicyResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupChannelPolicyResultOutput), nil
			}
			return output, nil
		}).(LookupChannelPolicyResultOutput)
}

type LookupChannelPolicyOutputArgs struct {
	// The name of the channel group associated with the channel policy.
	ChannelGroupName pulumi.StringInput `pulumi:"channelGroupName"`
	// The name of the channel associated with the channel policy.
	ChannelName pulumi.StringInput `pulumi:"channelName"`
}

func (LookupChannelPolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupChannelPolicyArgs)(nil)).Elem()
}

type LookupChannelPolicyResultOutput struct{ *pulumi.OutputState }

func (LookupChannelPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupChannelPolicyResult)(nil)).Elem()
}

func (o LookupChannelPolicyResultOutput) ToLookupChannelPolicyResultOutput() LookupChannelPolicyResultOutput {
	return o
}

func (o LookupChannelPolicyResultOutput) ToLookupChannelPolicyResultOutputWithContext(ctx context.Context) LookupChannelPolicyResultOutput {
	return o
}

// The policy associated with the channel.
//
// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::MediaPackageV2::ChannelPolicy` for more information about the expected schema for this property.
func (o LookupChannelPolicyResultOutput) Policy() pulumi.AnyOutput {
	return o.ApplyT(func(v LookupChannelPolicyResult) interface{} { return v.Policy }).(pulumi.AnyOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupChannelPolicyResultOutput{})
}
