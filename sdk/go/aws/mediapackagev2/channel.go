// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mediapackagev2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// <p>Represents an entry point into AWS Elemental MediaPackage for an ABR video content stream sent from an upstream encoder such as AWS Elemental MediaLive. The channel continuously analyzes the content that it receives and prepares it to be distributed to consumers via one or more origin endpoints.</p>
type Channel struct {
	pulumi.CustomResourceState

	// <p>The Amazon Resource Name (ARN) associated with the resource.</p>
	Arn              pulumi.StringOutput `pulumi:"arn"`
	ChannelGroupName pulumi.StringOutput `pulumi:"channelGroupName"`
	ChannelName      pulumi.StringOutput `pulumi:"channelName"`
	// <p>The date and time the channel was created.</p>
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// <p>Enter any descriptive text that helps you to identify the channel.</p>
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// <p>The list of ingest endpoints.</p>
	IngestEndpoints ChannelIngestEndpointArrayOutput `pulumi:"ingestEndpoints"`
	// <p>The date and time the channel was modified.</p>
	ModifiedAt pulumi.StringOutput `pulumi:"modifiedAt"`
	Tags       aws.TagArrayOutput  `pulumi:"tags"`
}

// NewChannel registers a new resource with the given unique name, arguments, and options.
func NewChannel(ctx *pulumi.Context,
	name string, args *ChannelArgs, opts ...pulumi.ResourceOption) (*Channel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ChannelGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ChannelGroupName'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"channelGroupName",
		"channelName",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Channel
	err := ctx.RegisterResource("aws-native:mediapackagev2:Channel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetChannel gets an existing Channel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetChannel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ChannelState, opts ...pulumi.ResourceOption) (*Channel, error) {
	var resource Channel
	err := ctx.ReadResource("aws-native:mediapackagev2:Channel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Channel resources.
type channelState struct {
}

type ChannelState struct {
}

func (ChannelState) ElementType() reflect.Type {
	return reflect.TypeOf((*channelState)(nil)).Elem()
}

type channelArgs struct {
	ChannelGroupName string  `pulumi:"channelGroupName"`
	ChannelName      *string `pulumi:"channelName"`
	// <p>Enter any descriptive text that helps you to identify the channel.</p>
	Description *string   `pulumi:"description"`
	Tags        []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a Channel resource.
type ChannelArgs struct {
	ChannelGroupName pulumi.StringInput
	ChannelName      pulumi.StringPtrInput
	// <p>Enter any descriptive text that helps you to identify the channel.</p>
	Description pulumi.StringPtrInput
	Tags        aws.TagArrayInput
}

func (ChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*channelArgs)(nil)).Elem()
}

type ChannelInput interface {
	pulumi.Input

	ToChannelOutput() ChannelOutput
	ToChannelOutputWithContext(ctx context.Context) ChannelOutput
}

func (*Channel) ElementType() reflect.Type {
	return reflect.TypeOf((**Channel)(nil)).Elem()
}

func (i *Channel) ToChannelOutput() ChannelOutput {
	return i.ToChannelOutputWithContext(context.Background())
}

func (i *Channel) ToChannelOutputWithContext(ctx context.Context) ChannelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelOutput)
}

type ChannelOutput struct{ *pulumi.OutputState }

func (ChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Channel)(nil)).Elem()
}

func (o ChannelOutput) ToChannelOutput() ChannelOutput {
	return o
}

func (o ChannelOutput) ToChannelOutputWithContext(ctx context.Context) ChannelOutput {
	return o
}

// <p>The Amazon Resource Name (ARN) associated with the resource.</p>
func (o ChannelOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Channel) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o ChannelOutput) ChannelGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Channel) pulumi.StringOutput { return v.ChannelGroupName }).(pulumi.StringOutput)
}

func (o ChannelOutput) ChannelName() pulumi.StringOutput {
	return o.ApplyT(func(v *Channel) pulumi.StringOutput { return v.ChannelName }).(pulumi.StringOutput)
}

// <p>The date and time the channel was created.</p>
func (o ChannelOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Channel) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// <p>Enter any descriptive text that helps you to identify the channel.</p>
func (o ChannelOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Channel) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// <p>The list of ingest endpoints.</p>
func (o ChannelOutput) IngestEndpoints() ChannelIngestEndpointArrayOutput {
	return o.ApplyT(func(v *Channel) ChannelIngestEndpointArrayOutput { return v.IngestEndpoints }).(ChannelIngestEndpointArrayOutput)
}

// <p>The date and time the channel was modified.</p>
func (o ChannelOutput) ModifiedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Channel) pulumi.StringOutput { return v.ModifiedAt }).(pulumi.StringOutput)
}

func (o ChannelOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Channel) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelInput)(nil)).Elem(), &Channel{})
	pulumi.RegisterOutputType(ChannelOutput{})
}
