// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mediapackagev2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ChannelGroupTag struct {
	Key   *string `pulumi:"key"`
	Value *string `pulumi:"value"`
}

// <p>The ingest domain URL where the source stream should be sent.</p>
type ChannelIngestEndpoint struct {
	// <p>The system-generated unique identifier for the IngestEndpoint.</p>
	Id *string `pulumi:"id"`
	// <p>The ingest domain URL where the source stream should be sent.</p>
	Url *string `pulumi:"url"`
}

// <p>The ingest domain URL where the source stream should be sent.</p>
type ChannelIngestEndpointOutput struct{ *pulumi.OutputState }

func (ChannelIngestEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelIngestEndpoint)(nil)).Elem()
}

func (o ChannelIngestEndpointOutput) ToChannelIngestEndpointOutput() ChannelIngestEndpointOutput {
	return o
}

func (o ChannelIngestEndpointOutput) ToChannelIngestEndpointOutputWithContext(ctx context.Context) ChannelIngestEndpointOutput {
	return o
}

// <p>The system-generated unique identifier for the IngestEndpoint.</p>
func (o ChannelIngestEndpointOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChannelIngestEndpoint) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// <p>The ingest domain URL where the source stream should be sent.</p>
func (o ChannelIngestEndpointOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChannelIngestEndpoint) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type ChannelIngestEndpointArrayOutput struct{ *pulumi.OutputState }

func (ChannelIngestEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ChannelIngestEndpoint)(nil)).Elem()
}

func (o ChannelIngestEndpointArrayOutput) ToChannelIngestEndpointArrayOutput() ChannelIngestEndpointArrayOutput {
	return o
}

func (o ChannelIngestEndpointArrayOutput) ToChannelIngestEndpointArrayOutputWithContext(ctx context.Context) ChannelIngestEndpointArrayOutput {
	return o
}

func (o ChannelIngestEndpointArrayOutput) Index(i pulumi.IntInput) ChannelIngestEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ChannelIngestEndpoint {
		return vs[0].([]ChannelIngestEndpoint)[vs[1].(int)]
	}).(ChannelIngestEndpointOutput)
}

// <p>The configuration for input switching based on the media quality confidence score (MQCS) as provided from AWS Elemental MediaLive.</p>
type ChannelInputSwitchConfiguration struct {
	// <p>When true, AWS Elemental MediaPackage performs input switching based on the MQCS. Default is true. This setting is valid only when <code>InputType</code> is <code>CMAF</code>.</p>
	MqcsInputSwitching *bool `pulumi:"mqcsInputSwitching"`
}

// ChannelInputSwitchConfigurationInput is an input type that accepts ChannelInputSwitchConfigurationArgs and ChannelInputSwitchConfigurationOutput values.
// You can construct a concrete instance of `ChannelInputSwitchConfigurationInput` via:
//
//	ChannelInputSwitchConfigurationArgs{...}
type ChannelInputSwitchConfigurationInput interface {
	pulumi.Input

	ToChannelInputSwitchConfigurationOutput() ChannelInputSwitchConfigurationOutput
	ToChannelInputSwitchConfigurationOutputWithContext(context.Context) ChannelInputSwitchConfigurationOutput
}

// <p>The configuration for input switching based on the media quality confidence score (MQCS) as provided from AWS Elemental MediaLive.</p>
type ChannelInputSwitchConfigurationArgs struct {
	// <p>When true, AWS Elemental MediaPackage performs input switching based on the MQCS. Default is true. This setting is valid only when <code>InputType</code> is <code>CMAF</code>.</p>
	MqcsInputSwitching pulumi.BoolPtrInput `pulumi:"mqcsInputSwitching"`
}

func (ChannelInputSwitchConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputSwitchConfiguration)(nil)).Elem()
}

func (i ChannelInputSwitchConfigurationArgs) ToChannelInputSwitchConfigurationOutput() ChannelInputSwitchConfigurationOutput {
	return i.ToChannelInputSwitchConfigurationOutputWithContext(context.Background())
}

func (i ChannelInputSwitchConfigurationArgs) ToChannelInputSwitchConfigurationOutputWithContext(ctx context.Context) ChannelInputSwitchConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelInputSwitchConfigurationOutput)
}

func (i ChannelInputSwitchConfigurationArgs) ToChannelInputSwitchConfigurationPtrOutput() ChannelInputSwitchConfigurationPtrOutput {
	return i.ToChannelInputSwitchConfigurationPtrOutputWithContext(context.Background())
}

func (i ChannelInputSwitchConfigurationArgs) ToChannelInputSwitchConfigurationPtrOutputWithContext(ctx context.Context) ChannelInputSwitchConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelInputSwitchConfigurationOutput).ToChannelInputSwitchConfigurationPtrOutputWithContext(ctx)
}

// ChannelInputSwitchConfigurationPtrInput is an input type that accepts ChannelInputSwitchConfigurationArgs, ChannelInputSwitchConfigurationPtr and ChannelInputSwitchConfigurationPtrOutput values.
// You can construct a concrete instance of `ChannelInputSwitchConfigurationPtrInput` via:
//
//	        ChannelInputSwitchConfigurationArgs{...}
//
//	or:
//
//	        nil
type ChannelInputSwitchConfigurationPtrInput interface {
	pulumi.Input

	ToChannelInputSwitchConfigurationPtrOutput() ChannelInputSwitchConfigurationPtrOutput
	ToChannelInputSwitchConfigurationPtrOutputWithContext(context.Context) ChannelInputSwitchConfigurationPtrOutput
}

type channelInputSwitchConfigurationPtrType ChannelInputSwitchConfigurationArgs

func ChannelInputSwitchConfigurationPtr(v *ChannelInputSwitchConfigurationArgs) ChannelInputSwitchConfigurationPtrInput {
	return (*channelInputSwitchConfigurationPtrType)(v)
}

func (*channelInputSwitchConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ChannelInputSwitchConfiguration)(nil)).Elem()
}

func (i *channelInputSwitchConfigurationPtrType) ToChannelInputSwitchConfigurationPtrOutput() ChannelInputSwitchConfigurationPtrOutput {
	return i.ToChannelInputSwitchConfigurationPtrOutputWithContext(context.Background())
}

func (i *channelInputSwitchConfigurationPtrType) ToChannelInputSwitchConfigurationPtrOutputWithContext(ctx context.Context) ChannelInputSwitchConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelInputSwitchConfigurationPtrOutput)
}

// <p>The configuration for input switching based on the media quality confidence score (MQCS) as provided from AWS Elemental MediaLive.</p>
type ChannelInputSwitchConfigurationOutput struct{ *pulumi.OutputState }

func (ChannelInputSwitchConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelInputSwitchConfiguration)(nil)).Elem()
}

func (o ChannelInputSwitchConfigurationOutput) ToChannelInputSwitchConfigurationOutput() ChannelInputSwitchConfigurationOutput {
	return o
}

func (o ChannelInputSwitchConfigurationOutput) ToChannelInputSwitchConfigurationOutputWithContext(ctx context.Context) ChannelInputSwitchConfigurationOutput {
	return o
}

func (o ChannelInputSwitchConfigurationOutput) ToChannelInputSwitchConfigurationPtrOutput() ChannelInputSwitchConfigurationPtrOutput {
	return o.ToChannelInputSwitchConfigurationPtrOutputWithContext(context.Background())
}

func (o ChannelInputSwitchConfigurationOutput) ToChannelInputSwitchConfigurationPtrOutputWithContext(ctx context.Context) ChannelInputSwitchConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ChannelInputSwitchConfiguration) *ChannelInputSwitchConfiguration {
		return &v
	}).(ChannelInputSwitchConfigurationPtrOutput)
}

// <p>When true, AWS Elemental MediaPackage performs input switching based on the MQCS. Default is true. This setting is valid only when <code>InputType</code> is <code>CMAF</code>.</p>
func (o ChannelInputSwitchConfigurationOutput) MqcsInputSwitching() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ChannelInputSwitchConfiguration) *bool { return v.MqcsInputSwitching }).(pulumi.BoolPtrOutput)
}

type ChannelInputSwitchConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ChannelInputSwitchConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChannelInputSwitchConfiguration)(nil)).Elem()
}

func (o ChannelInputSwitchConfigurationPtrOutput) ToChannelInputSwitchConfigurationPtrOutput() ChannelInputSwitchConfigurationPtrOutput {
	return o
}

func (o ChannelInputSwitchConfigurationPtrOutput) ToChannelInputSwitchConfigurationPtrOutputWithContext(ctx context.Context) ChannelInputSwitchConfigurationPtrOutput {
	return o
}

func (o ChannelInputSwitchConfigurationPtrOutput) Elem() ChannelInputSwitchConfigurationOutput {
	return o.ApplyT(func(v *ChannelInputSwitchConfiguration) ChannelInputSwitchConfiguration {
		if v != nil {
			return *v
		}
		var ret ChannelInputSwitchConfiguration
		return ret
	}).(ChannelInputSwitchConfigurationOutput)
}

// <p>When true, AWS Elemental MediaPackage performs input switching based on the MQCS. Default is true. This setting is valid only when <code>InputType</code> is <code>CMAF</code>.</p>
func (o ChannelInputSwitchConfigurationPtrOutput) MqcsInputSwitching() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ChannelInputSwitchConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.MqcsInputSwitching
	}).(pulumi.BoolPtrOutput)
}

// <p>The settings for what common media server data (CMSD) headers AWS Elemental MediaPackage includes in responses to the CDN.</p>
type ChannelOutputHeaderConfiguration struct {
	// <p>When true, AWS Elemental MediaPackage includes the MQCS in responses to the CDN. This setting is valid only when <code>InputType</code> is <code>CMAF</code>.</p>
	PublishMqcs *bool `pulumi:"publishMqcs"`
}

// ChannelOutputHeaderConfigurationInput is an input type that accepts ChannelOutputHeaderConfigurationArgs and ChannelOutputHeaderConfigurationOutput values.
// You can construct a concrete instance of `ChannelOutputHeaderConfigurationInput` via:
//
//	ChannelOutputHeaderConfigurationArgs{...}
type ChannelOutputHeaderConfigurationInput interface {
	pulumi.Input

	ToChannelOutputHeaderConfigurationOutput() ChannelOutputHeaderConfigurationOutput
	ToChannelOutputHeaderConfigurationOutputWithContext(context.Context) ChannelOutputHeaderConfigurationOutput
}

// <p>The settings for what common media server data (CMSD) headers AWS Elemental MediaPackage includes in responses to the CDN.</p>
type ChannelOutputHeaderConfigurationArgs struct {
	// <p>When true, AWS Elemental MediaPackage includes the MQCS in responses to the CDN. This setting is valid only when <code>InputType</code> is <code>CMAF</code>.</p>
	PublishMqcs pulumi.BoolPtrInput `pulumi:"publishMqcs"`
}

func (ChannelOutputHeaderConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelOutputHeaderConfiguration)(nil)).Elem()
}

func (i ChannelOutputHeaderConfigurationArgs) ToChannelOutputHeaderConfigurationOutput() ChannelOutputHeaderConfigurationOutput {
	return i.ToChannelOutputHeaderConfigurationOutputWithContext(context.Background())
}

func (i ChannelOutputHeaderConfigurationArgs) ToChannelOutputHeaderConfigurationOutputWithContext(ctx context.Context) ChannelOutputHeaderConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelOutputHeaderConfigurationOutput)
}

func (i ChannelOutputHeaderConfigurationArgs) ToChannelOutputHeaderConfigurationPtrOutput() ChannelOutputHeaderConfigurationPtrOutput {
	return i.ToChannelOutputHeaderConfigurationPtrOutputWithContext(context.Background())
}

func (i ChannelOutputHeaderConfigurationArgs) ToChannelOutputHeaderConfigurationPtrOutputWithContext(ctx context.Context) ChannelOutputHeaderConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelOutputHeaderConfigurationOutput).ToChannelOutputHeaderConfigurationPtrOutputWithContext(ctx)
}

// ChannelOutputHeaderConfigurationPtrInput is an input type that accepts ChannelOutputHeaderConfigurationArgs, ChannelOutputHeaderConfigurationPtr and ChannelOutputHeaderConfigurationPtrOutput values.
// You can construct a concrete instance of `ChannelOutputHeaderConfigurationPtrInput` via:
//
//	        ChannelOutputHeaderConfigurationArgs{...}
//
//	or:
//
//	        nil
type ChannelOutputHeaderConfigurationPtrInput interface {
	pulumi.Input

	ToChannelOutputHeaderConfigurationPtrOutput() ChannelOutputHeaderConfigurationPtrOutput
	ToChannelOutputHeaderConfigurationPtrOutputWithContext(context.Context) ChannelOutputHeaderConfigurationPtrOutput
}

type channelOutputHeaderConfigurationPtrType ChannelOutputHeaderConfigurationArgs

func ChannelOutputHeaderConfigurationPtr(v *ChannelOutputHeaderConfigurationArgs) ChannelOutputHeaderConfigurationPtrInput {
	return (*channelOutputHeaderConfigurationPtrType)(v)
}

func (*channelOutputHeaderConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ChannelOutputHeaderConfiguration)(nil)).Elem()
}

func (i *channelOutputHeaderConfigurationPtrType) ToChannelOutputHeaderConfigurationPtrOutput() ChannelOutputHeaderConfigurationPtrOutput {
	return i.ToChannelOutputHeaderConfigurationPtrOutputWithContext(context.Background())
}

func (i *channelOutputHeaderConfigurationPtrType) ToChannelOutputHeaderConfigurationPtrOutputWithContext(ctx context.Context) ChannelOutputHeaderConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelOutputHeaderConfigurationPtrOutput)
}

// <p>The settings for what common media server data (CMSD) headers AWS Elemental MediaPackage includes in responses to the CDN.</p>
type ChannelOutputHeaderConfigurationOutput struct{ *pulumi.OutputState }

func (ChannelOutputHeaderConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelOutputHeaderConfiguration)(nil)).Elem()
}

func (o ChannelOutputHeaderConfigurationOutput) ToChannelOutputHeaderConfigurationOutput() ChannelOutputHeaderConfigurationOutput {
	return o
}

func (o ChannelOutputHeaderConfigurationOutput) ToChannelOutputHeaderConfigurationOutputWithContext(ctx context.Context) ChannelOutputHeaderConfigurationOutput {
	return o
}

func (o ChannelOutputHeaderConfigurationOutput) ToChannelOutputHeaderConfigurationPtrOutput() ChannelOutputHeaderConfigurationPtrOutput {
	return o.ToChannelOutputHeaderConfigurationPtrOutputWithContext(context.Background())
}

func (o ChannelOutputHeaderConfigurationOutput) ToChannelOutputHeaderConfigurationPtrOutputWithContext(ctx context.Context) ChannelOutputHeaderConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ChannelOutputHeaderConfiguration) *ChannelOutputHeaderConfiguration {
		return &v
	}).(ChannelOutputHeaderConfigurationPtrOutput)
}

// <p>When true, AWS Elemental MediaPackage includes the MQCS in responses to the CDN. This setting is valid only when <code>InputType</code> is <code>CMAF</code>.</p>
func (o ChannelOutputHeaderConfigurationOutput) PublishMqcs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ChannelOutputHeaderConfiguration) *bool { return v.PublishMqcs }).(pulumi.BoolPtrOutput)
}

type ChannelOutputHeaderConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ChannelOutputHeaderConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChannelOutputHeaderConfiguration)(nil)).Elem()
}

func (o ChannelOutputHeaderConfigurationPtrOutput) ToChannelOutputHeaderConfigurationPtrOutput() ChannelOutputHeaderConfigurationPtrOutput {
	return o
}

func (o ChannelOutputHeaderConfigurationPtrOutput) ToChannelOutputHeaderConfigurationPtrOutputWithContext(ctx context.Context) ChannelOutputHeaderConfigurationPtrOutput {
	return o
}

func (o ChannelOutputHeaderConfigurationPtrOutput) Elem() ChannelOutputHeaderConfigurationOutput {
	return o.ApplyT(func(v *ChannelOutputHeaderConfiguration) ChannelOutputHeaderConfiguration {
		if v != nil {
			return *v
		}
		var ret ChannelOutputHeaderConfiguration
		return ret
	}).(ChannelOutputHeaderConfigurationOutput)
}

// <p>When true, AWS Elemental MediaPackage includes the MQCS in responses to the CDN. This setting is valid only when <code>InputType</code> is <code>CMAF</code>.</p>
func (o ChannelOutputHeaderConfigurationPtrOutput) PublishMqcs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ChannelOutputHeaderConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.PublishMqcs
	}).(pulumi.BoolPtrOutput)
}

type ChannelTag struct {
	Key   *string `pulumi:"key"`
	Value *string `pulumi:"value"`
}

// <p>Retrieve the DASH manifest configuration.</p>
type OriginEndpointDashManifestConfiguration struct {
	DrmSignaling        *OriginEndpointDashDrmSignaling    `pulumi:"drmSignaling"`
	FilterConfiguration *OriginEndpointFilterConfiguration `pulumi:"filterConfiguration"`
	// <p>A short string that's appended to the endpoint URL. The manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index. </p>
	ManifestName string `pulumi:"manifestName"`
	// <p>The total duration (in seconds) of the manifest's content.</p>
	ManifestWindowSeconds *int `pulumi:"manifestWindowSeconds"`
	// <p>Minimum amount of content (in seconds) that a player must keep available in the buffer.</p>
	MinBufferTimeSeconds *int `pulumi:"minBufferTimeSeconds"`
	// <p>Minimum amount of time (in seconds) that the player should wait before requesting updates to the manifest.</p>
	MinUpdatePeriodSeconds *int `pulumi:"minUpdatePeriodSeconds"`
	// <p>A list of triggers that controls when AWS Elemental MediaPackage separates the MPEG-DASH manifest into multiple periods. Leave this value empty to indicate that the manifest is contained all in one period.
	//          For more information about periods in the DASH manifest, see <a href="https://docs.aws.amazon.com/mediapackage/latest/userguide/multi-period.html">Multi-period DASH in AWS Elemental MediaPackage</a>.</p>
	PeriodTriggers        []OriginEndpointDashPeriodTrigger        `pulumi:"periodTriggers"`
	ScteDash              *OriginEndpointScteDash                  `pulumi:"scteDash"`
	SegmentTemplateFormat *OriginEndpointDashSegmentTemplateFormat `pulumi:"segmentTemplateFormat"`
	// <p>The amount of time (in seconds) that the player should be from the end of the manifest.</p>
	SuggestedPresentationDelaySeconds *int                         `pulumi:"suggestedPresentationDelaySeconds"`
	UtcTiming                         *OriginEndpointDashUtcTiming `pulumi:"utcTiming"`
}

// OriginEndpointDashManifestConfigurationInput is an input type that accepts OriginEndpointDashManifestConfigurationArgs and OriginEndpointDashManifestConfigurationOutput values.
// You can construct a concrete instance of `OriginEndpointDashManifestConfigurationInput` via:
//
//	OriginEndpointDashManifestConfigurationArgs{...}
type OriginEndpointDashManifestConfigurationInput interface {
	pulumi.Input

	ToOriginEndpointDashManifestConfigurationOutput() OriginEndpointDashManifestConfigurationOutput
	ToOriginEndpointDashManifestConfigurationOutputWithContext(context.Context) OriginEndpointDashManifestConfigurationOutput
}

// <p>Retrieve the DASH manifest configuration.</p>
type OriginEndpointDashManifestConfigurationArgs struct {
	DrmSignaling        OriginEndpointDashDrmSignalingPtrInput    `pulumi:"drmSignaling"`
	FilterConfiguration OriginEndpointFilterConfigurationPtrInput `pulumi:"filterConfiguration"`
	// <p>A short string that's appended to the endpoint URL. The manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index. </p>
	ManifestName pulumi.StringInput `pulumi:"manifestName"`
	// <p>The total duration (in seconds) of the manifest's content.</p>
	ManifestWindowSeconds pulumi.IntPtrInput `pulumi:"manifestWindowSeconds"`
	// <p>Minimum amount of content (in seconds) that a player must keep available in the buffer.</p>
	MinBufferTimeSeconds pulumi.IntPtrInput `pulumi:"minBufferTimeSeconds"`
	// <p>Minimum amount of time (in seconds) that the player should wait before requesting updates to the manifest.</p>
	MinUpdatePeriodSeconds pulumi.IntPtrInput `pulumi:"minUpdatePeriodSeconds"`
	// <p>A list of triggers that controls when AWS Elemental MediaPackage separates the MPEG-DASH manifest into multiple periods. Leave this value empty to indicate that the manifest is contained all in one period.
	//          For more information about periods in the DASH manifest, see <a href="https://docs.aws.amazon.com/mediapackage/latest/userguide/multi-period.html">Multi-period DASH in AWS Elemental MediaPackage</a>.</p>
	PeriodTriggers        OriginEndpointDashPeriodTriggerArrayInput       `pulumi:"periodTriggers"`
	ScteDash              OriginEndpointScteDashPtrInput                  `pulumi:"scteDash"`
	SegmentTemplateFormat OriginEndpointDashSegmentTemplateFormatPtrInput `pulumi:"segmentTemplateFormat"`
	// <p>The amount of time (in seconds) that the player should be from the end of the manifest.</p>
	SuggestedPresentationDelaySeconds pulumi.IntPtrInput                  `pulumi:"suggestedPresentationDelaySeconds"`
	UtcTiming                         OriginEndpointDashUtcTimingPtrInput `pulumi:"utcTiming"`
}

func (OriginEndpointDashManifestConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginEndpointDashManifestConfiguration)(nil)).Elem()
}

func (i OriginEndpointDashManifestConfigurationArgs) ToOriginEndpointDashManifestConfigurationOutput() OriginEndpointDashManifestConfigurationOutput {
	return i.ToOriginEndpointDashManifestConfigurationOutputWithContext(context.Background())
}

func (i OriginEndpointDashManifestConfigurationArgs) ToOriginEndpointDashManifestConfigurationOutputWithContext(ctx context.Context) OriginEndpointDashManifestConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointDashManifestConfigurationOutput)
}

// OriginEndpointDashManifestConfigurationArrayInput is an input type that accepts OriginEndpointDashManifestConfigurationArray and OriginEndpointDashManifestConfigurationArrayOutput values.
// You can construct a concrete instance of `OriginEndpointDashManifestConfigurationArrayInput` via:
//
//	OriginEndpointDashManifestConfigurationArray{ OriginEndpointDashManifestConfigurationArgs{...} }
type OriginEndpointDashManifestConfigurationArrayInput interface {
	pulumi.Input

	ToOriginEndpointDashManifestConfigurationArrayOutput() OriginEndpointDashManifestConfigurationArrayOutput
	ToOriginEndpointDashManifestConfigurationArrayOutputWithContext(context.Context) OriginEndpointDashManifestConfigurationArrayOutput
}

type OriginEndpointDashManifestConfigurationArray []OriginEndpointDashManifestConfigurationInput

func (OriginEndpointDashManifestConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OriginEndpointDashManifestConfiguration)(nil)).Elem()
}

func (i OriginEndpointDashManifestConfigurationArray) ToOriginEndpointDashManifestConfigurationArrayOutput() OriginEndpointDashManifestConfigurationArrayOutput {
	return i.ToOriginEndpointDashManifestConfigurationArrayOutputWithContext(context.Background())
}

func (i OriginEndpointDashManifestConfigurationArray) ToOriginEndpointDashManifestConfigurationArrayOutputWithContext(ctx context.Context) OriginEndpointDashManifestConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointDashManifestConfigurationArrayOutput)
}

// <p>Retrieve the DASH manifest configuration.</p>
type OriginEndpointDashManifestConfigurationOutput struct{ *pulumi.OutputState }

func (OriginEndpointDashManifestConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginEndpointDashManifestConfiguration)(nil)).Elem()
}

func (o OriginEndpointDashManifestConfigurationOutput) ToOriginEndpointDashManifestConfigurationOutput() OriginEndpointDashManifestConfigurationOutput {
	return o
}

func (o OriginEndpointDashManifestConfigurationOutput) ToOriginEndpointDashManifestConfigurationOutputWithContext(ctx context.Context) OriginEndpointDashManifestConfigurationOutput {
	return o
}

func (o OriginEndpointDashManifestConfigurationOutput) DrmSignaling() OriginEndpointDashDrmSignalingPtrOutput {
	return o.ApplyT(func(v OriginEndpointDashManifestConfiguration) *OriginEndpointDashDrmSignaling { return v.DrmSignaling }).(OriginEndpointDashDrmSignalingPtrOutput)
}

func (o OriginEndpointDashManifestConfigurationOutput) FilterConfiguration() OriginEndpointFilterConfigurationPtrOutput {
	return o.ApplyT(func(v OriginEndpointDashManifestConfiguration) *OriginEndpointFilterConfiguration {
		return v.FilterConfiguration
	}).(OriginEndpointFilterConfigurationPtrOutput)
}

// <p>A short string that's appended to the endpoint URL. The manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index. </p>
func (o OriginEndpointDashManifestConfigurationOutput) ManifestName() pulumi.StringOutput {
	return o.ApplyT(func(v OriginEndpointDashManifestConfiguration) string { return v.ManifestName }).(pulumi.StringOutput)
}

// <p>The total duration (in seconds) of the manifest's content.</p>
func (o OriginEndpointDashManifestConfigurationOutput) ManifestWindowSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OriginEndpointDashManifestConfiguration) *int { return v.ManifestWindowSeconds }).(pulumi.IntPtrOutput)
}

// <p>Minimum amount of content (in seconds) that a player must keep available in the buffer.</p>
func (o OriginEndpointDashManifestConfigurationOutput) MinBufferTimeSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OriginEndpointDashManifestConfiguration) *int { return v.MinBufferTimeSeconds }).(pulumi.IntPtrOutput)
}

// <p>Minimum amount of time (in seconds) that the player should wait before requesting updates to the manifest.</p>
func (o OriginEndpointDashManifestConfigurationOutput) MinUpdatePeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OriginEndpointDashManifestConfiguration) *int { return v.MinUpdatePeriodSeconds }).(pulumi.IntPtrOutput)
}

// <p>A list of triggers that controls when AWS Elemental MediaPackage separates the MPEG-DASH manifest into multiple periods. Leave this value empty to indicate that the manifest is contained all in one period.
//
//	For more information about periods in the DASH manifest, see <a href="https://docs.aws.amazon.com/mediapackage/latest/userguide/multi-period.html">Multi-period DASH in AWS Elemental MediaPackage</a>.</p>
func (o OriginEndpointDashManifestConfigurationOutput) PeriodTriggers() OriginEndpointDashPeriodTriggerArrayOutput {
	return o.ApplyT(func(v OriginEndpointDashManifestConfiguration) []OriginEndpointDashPeriodTrigger {
		return v.PeriodTriggers
	}).(OriginEndpointDashPeriodTriggerArrayOutput)
}

func (o OriginEndpointDashManifestConfigurationOutput) ScteDash() OriginEndpointScteDashPtrOutput {
	return o.ApplyT(func(v OriginEndpointDashManifestConfiguration) *OriginEndpointScteDash { return v.ScteDash }).(OriginEndpointScteDashPtrOutput)
}

func (o OriginEndpointDashManifestConfigurationOutput) SegmentTemplateFormat() OriginEndpointDashSegmentTemplateFormatPtrOutput {
	return o.ApplyT(func(v OriginEndpointDashManifestConfiguration) *OriginEndpointDashSegmentTemplateFormat {
		return v.SegmentTemplateFormat
	}).(OriginEndpointDashSegmentTemplateFormatPtrOutput)
}

// <p>The amount of time (in seconds) that the player should be from the end of the manifest.</p>
func (o OriginEndpointDashManifestConfigurationOutput) SuggestedPresentationDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OriginEndpointDashManifestConfiguration) *int { return v.SuggestedPresentationDelaySeconds }).(pulumi.IntPtrOutput)
}

func (o OriginEndpointDashManifestConfigurationOutput) UtcTiming() OriginEndpointDashUtcTimingPtrOutput {
	return o.ApplyT(func(v OriginEndpointDashManifestConfiguration) *OriginEndpointDashUtcTiming { return v.UtcTiming }).(OriginEndpointDashUtcTimingPtrOutput)
}

type OriginEndpointDashManifestConfigurationArrayOutput struct{ *pulumi.OutputState }

func (OriginEndpointDashManifestConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OriginEndpointDashManifestConfiguration)(nil)).Elem()
}

func (o OriginEndpointDashManifestConfigurationArrayOutput) ToOriginEndpointDashManifestConfigurationArrayOutput() OriginEndpointDashManifestConfigurationArrayOutput {
	return o
}

func (o OriginEndpointDashManifestConfigurationArrayOutput) ToOriginEndpointDashManifestConfigurationArrayOutputWithContext(ctx context.Context) OriginEndpointDashManifestConfigurationArrayOutput {
	return o
}

func (o OriginEndpointDashManifestConfigurationArrayOutput) Index(i pulumi.IntInput) OriginEndpointDashManifestConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OriginEndpointDashManifestConfiguration {
		return vs[0].([]OriginEndpointDashManifestConfiguration)[vs[1].(int)]
	}).(OriginEndpointDashManifestConfigurationOutput)
}

// <p>Determines the type of UTC timing included in the DASH Media Presentation Description (MPD).</p>
type OriginEndpointDashUtcTiming struct {
	// The UTC timing mode.
	TimingMode *OriginEndpointDashUtcTimingMode `pulumi:"timingMode"`
	// <p>The the method that the player uses to synchronize to coordinated universal time (UTC) wall clock time.</p>
	TimingSource *string `pulumi:"timingSource"`
}

// OriginEndpointDashUtcTimingInput is an input type that accepts OriginEndpointDashUtcTimingArgs and OriginEndpointDashUtcTimingOutput values.
// You can construct a concrete instance of `OriginEndpointDashUtcTimingInput` via:
//
//	OriginEndpointDashUtcTimingArgs{...}
type OriginEndpointDashUtcTimingInput interface {
	pulumi.Input

	ToOriginEndpointDashUtcTimingOutput() OriginEndpointDashUtcTimingOutput
	ToOriginEndpointDashUtcTimingOutputWithContext(context.Context) OriginEndpointDashUtcTimingOutput
}

// <p>Determines the type of UTC timing included in the DASH Media Presentation Description (MPD).</p>
type OriginEndpointDashUtcTimingArgs struct {
	// The UTC timing mode.
	TimingMode OriginEndpointDashUtcTimingModePtrInput `pulumi:"timingMode"`
	// <p>The the method that the player uses to synchronize to coordinated universal time (UTC) wall clock time.</p>
	TimingSource pulumi.StringPtrInput `pulumi:"timingSource"`
}

func (OriginEndpointDashUtcTimingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginEndpointDashUtcTiming)(nil)).Elem()
}

func (i OriginEndpointDashUtcTimingArgs) ToOriginEndpointDashUtcTimingOutput() OriginEndpointDashUtcTimingOutput {
	return i.ToOriginEndpointDashUtcTimingOutputWithContext(context.Background())
}

func (i OriginEndpointDashUtcTimingArgs) ToOriginEndpointDashUtcTimingOutputWithContext(ctx context.Context) OriginEndpointDashUtcTimingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointDashUtcTimingOutput)
}

func (i OriginEndpointDashUtcTimingArgs) ToOriginEndpointDashUtcTimingPtrOutput() OriginEndpointDashUtcTimingPtrOutput {
	return i.ToOriginEndpointDashUtcTimingPtrOutputWithContext(context.Background())
}

func (i OriginEndpointDashUtcTimingArgs) ToOriginEndpointDashUtcTimingPtrOutputWithContext(ctx context.Context) OriginEndpointDashUtcTimingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointDashUtcTimingOutput).ToOriginEndpointDashUtcTimingPtrOutputWithContext(ctx)
}

// OriginEndpointDashUtcTimingPtrInput is an input type that accepts OriginEndpointDashUtcTimingArgs, OriginEndpointDashUtcTimingPtr and OriginEndpointDashUtcTimingPtrOutput values.
// You can construct a concrete instance of `OriginEndpointDashUtcTimingPtrInput` via:
//
//	        OriginEndpointDashUtcTimingArgs{...}
//
//	or:
//
//	        nil
type OriginEndpointDashUtcTimingPtrInput interface {
	pulumi.Input

	ToOriginEndpointDashUtcTimingPtrOutput() OriginEndpointDashUtcTimingPtrOutput
	ToOriginEndpointDashUtcTimingPtrOutputWithContext(context.Context) OriginEndpointDashUtcTimingPtrOutput
}

type originEndpointDashUtcTimingPtrType OriginEndpointDashUtcTimingArgs

func OriginEndpointDashUtcTimingPtr(v *OriginEndpointDashUtcTimingArgs) OriginEndpointDashUtcTimingPtrInput {
	return (*originEndpointDashUtcTimingPtrType)(v)
}

func (*originEndpointDashUtcTimingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OriginEndpointDashUtcTiming)(nil)).Elem()
}

func (i *originEndpointDashUtcTimingPtrType) ToOriginEndpointDashUtcTimingPtrOutput() OriginEndpointDashUtcTimingPtrOutput {
	return i.ToOriginEndpointDashUtcTimingPtrOutputWithContext(context.Background())
}

func (i *originEndpointDashUtcTimingPtrType) ToOriginEndpointDashUtcTimingPtrOutputWithContext(ctx context.Context) OriginEndpointDashUtcTimingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointDashUtcTimingPtrOutput)
}

// <p>Determines the type of UTC timing included in the DASH Media Presentation Description (MPD).</p>
type OriginEndpointDashUtcTimingOutput struct{ *pulumi.OutputState }

func (OriginEndpointDashUtcTimingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginEndpointDashUtcTiming)(nil)).Elem()
}

func (o OriginEndpointDashUtcTimingOutput) ToOriginEndpointDashUtcTimingOutput() OriginEndpointDashUtcTimingOutput {
	return o
}

func (o OriginEndpointDashUtcTimingOutput) ToOriginEndpointDashUtcTimingOutputWithContext(ctx context.Context) OriginEndpointDashUtcTimingOutput {
	return o
}

func (o OriginEndpointDashUtcTimingOutput) ToOriginEndpointDashUtcTimingPtrOutput() OriginEndpointDashUtcTimingPtrOutput {
	return o.ToOriginEndpointDashUtcTimingPtrOutputWithContext(context.Background())
}

func (o OriginEndpointDashUtcTimingOutput) ToOriginEndpointDashUtcTimingPtrOutputWithContext(ctx context.Context) OriginEndpointDashUtcTimingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OriginEndpointDashUtcTiming) *OriginEndpointDashUtcTiming {
		return &v
	}).(OriginEndpointDashUtcTimingPtrOutput)
}

// The UTC timing mode.
func (o OriginEndpointDashUtcTimingOutput) TimingMode() OriginEndpointDashUtcTimingModePtrOutput {
	return o.ApplyT(func(v OriginEndpointDashUtcTiming) *OriginEndpointDashUtcTimingMode { return v.TimingMode }).(OriginEndpointDashUtcTimingModePtrOutput)
}

// <p>The the method that the player uses to synchronize to coordinated universal time (UTC) wall clock time.</p>
func (o OriginEndpointDashUtcTimingOutput) TimingSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OriginEndpointDashUtcTiming) *string { return v.TimingSource }).(pulumi.StringPtrOutput)
}

type OriginEndpointDashUtcTimingPtrOutput struct{ *pulumi.OutputState }

func (OriginEndpointDashUtcTimingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OriginEndpointDashUtcTiming)(nil)).Elem()
}

func (o OriginEndpointDashUtcTimingPtrOutput) ToOriginEndpointDashUtcTimingPtrOutput() OriginEndpointDashUtcTimingPtrOutput {
	return o
}

func (o OriginEndpointDashUtcTimingPtrOutput) ToOriginEndpointDashUtcTimingPtrOutputWithContext(ctx context.Context) OriginEndpointDashUtcTimingPtrOutput {
	return o
}

func (o OriginEndpointDashUtcTimingPtrOutput) Elem() OriginEndpointDashUtcTimingOutput {
	return o.ApplyT(func(v *OriginEndpointDashUtcTiming) OriginEndpointDashUtcTiming {
		if v != nil {
			return *v
		}
		var ret OriginEndpointDashUtcTiming
		return ret
	}).(OriginEndpointDashUtcTimingOutput)
}

// The UTC timing mode.
func (o OriginEndpointDashUtcTimingPtrOutput) TimingMode() OriginEndpointDashUtcTimingModePtrOutput {
	return o.ApplyT(func(v *OriginEndpointDashUtcTiming) *OriginEndpointDashUtcTimingMode {
		if v == nil {
			return nil
		}
		return v.TimingMode
	}).(OriginEndpointDashUtcTimingModePtrOutput)
}

// <p>The the method that the player uses to synchronize to coordinated universal time (UTC) wall clock time.</p>
func (o OriginEndpointDashUtcTimingPtrOutput) TimingSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OriginEndpointDashUtcTiming) *string {
		if v == nil {
			return nil
		}
		return v.TimingSource
	}).(pulumi.StringPtrOutput)
}

// <p>The parameters for encrypting content.</p>
type OriginEndpointEncryption struct {
	// <p>A 128-bit, 16-byte hex value represented by a 32-character string, used in conjunction with the key for encrypting content. If you don't specify a value, then MediaPackage creates the constant initialization vector (IV).</p>
	ConstantInitializationVector *string `pulumi:"constantInitializationVector"`
	// The encryption method to use.
	EncryptionMethod OriginEndpointEncryptionMethod `pulumi:"encryptionMethod"`
	// <p>The frequency (in seconds) of key changes for live workflows, in which content is streamed real time. The service retrieves content keys before the live content begins streaming, and then retrieves them as needed over the lifetime of the workflow. By default, key rotation is set to 300 seconds (5 minutes), the minimum rotation interval, which is equivalent to setting it to 300. If you don't enter an interval, content keys aren't rotated.</p>
	//          <p>The following example setting causes the service to rotate keys every thirty minutes: <code>1800</code>
	//          </p>
	KeyRotationIntervalSeconds *int `pulumi:"keyRotationIntervalSeconds"`
	// The SPEKE key provider to use for encryption.
	SpekeKeyProvider OriginEndpointSpekeKeyProvider `pulumi:"spekeKeyProvider"`
}

// OriginEndpointEncryptionInput is an input type that accepts OriginEndpointEncryptionArgs and OriginEndpointEncryptionOutput values.
// You can construct a concrete instance of `OriginEndpointEncryptionInput` via:
//
//	OriginEndpointEncryptionArgs{...}
type OriginEndpointEncryptionInput interface {
	pulumi.Input

	ToOriginEndpointEncryptionOutput() OriginEndpointEncryptionOutput
	ToOriginEndpointEncryptionOutputWithContext(context.Context) OriginEndpointEncryptionOutput
}

// <p>The parameters for encrypting content.</p>
type OriginEndpointEncryptionArgs struct {
	// <p>A 128-bit, 16-byte hex value represented by a 32-character string, used in conjunction with the key for encrypting content. If you don't specify a value, then MediaPackage creates the constant initialization vector (IV).</p>
	ConstantInitializationVector pulumi.StringPtrInput `pulumi:"constantInitializationVector"`
	// The encryption method to use.
	EncryptionMethod OriginEndpointEncryptionMethodInput `pulumi:"encryptionMethod"`
	// <p>The frequency (in seconds) of key changes for live workflows, in which content is streamed real time. The service retrieves content keys before the live content begins streaming, and then retrieves them as needed over the lifetime of the workflow. By default, key rotation is set to 300 seconds (5 minutes), the minimum rotation interval, which is equivalent to setting it to 300. If you don't enter an interval, content keys aren't rotated.</p>
	//          <p>The following example setting causes the service to rotate keys every thirty minutes: <code>1800</code>
	//          </p>
	KeyRotationIntervalSeconds pulumi.IntPtrInput `pulumi:"keyRotationIntervalSeconds"`
	// The SPEKE key provider to use for encryption.
	SpekeKeyProvider OriginEndpointSpekeKeyProviderInput `pulumi:"spekeKeyProvider"`
}

func (OriginEndpointEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginEndpointEncryption)(nil)).Elem()
}

func (i OriginEndpointEncryptionArgs) ToOriginEndpointEncryptionOutput() OriginEndpointEncryptionOutput {
	return i.ToOriginEndpointEncryptionOutputWithContext(context.Background())
}

func (i OriginEndpointEncryptionArgs) ToOriginEndpointEncryptionOutputWithContext(ctx context.Context) OriginEndpointEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointEncryptionOutput)
}

func (i OriginEndpointEncryptionArgs) ToOriginEndpointEncryptionPtrOutput() OriginEndpointEncryptionPtrOutput {
	return i.ToOriginEndpointEncryptionPtrOutputWithContext(context.Background())
}

func (i OriginEndpointEncryptionArgs) ToOriginEndpointEncryptionPtrOutputWithContext(ctx context.Context) OriginEndpointEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointEncryptionOutput).ToOriginEndpointEncryptionPtrOutputWithContext(ctx)
}

// OriginEndpointEncryptionPtrInput is an input type that accepts OriginEndpointEncryptionArgs, OriginEndpointEncryptionPtr and OriginEndpointEncryptionPtrOutput values.
// You can construct a concrete instance of `OriginEndpointEncryptionPtrInput` via:
//
//	        OriginEndpointEncryptionArgs{...}
//
//	or:
//
//	        nil
type OriginEndpointEncryptionPtrInput interface {
	pulumi.Input

	ToOriginEndpointEncryptionPtrOutput() OriginEndpointEncryptionPtrOutput
	ToOriginEndpointEncryptionPtrOutputWithContext(context.Context) OriginEndpointEncryptionPtrOutput
}

type originEndpointEncryptionPtrType OriginEndpointEncryptionArgs

func OriginEndpointEncryptionPtr(v *OriginEndpointEncryptionArgs) OriginEndpointEncryptionPtrInput {
	return (*originEndpointEncryptionPtrType)(v)
}

func (*originEndpointEncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OriginEndpointEncryption)(nil)).Elem()
}

func (i *originEndpointEncryptionPtrType) ToOriginEndpointEncryptionPtrOutput() OriginEndpointEncryptionPtrOutput {
	return i.ToOriginEndpointEncryptionPtrOutputWithContext(context.Background())
}

func (i *originEndpointEncryptionPtrType) ToOriginEndpointEncryptionPtrOutputWithContext(ctx context.Context) OriginEndpointEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointEncryptionPtrOutput)
}

// <p>The parameters for encrypting content.</p>
type OriginEndpointEncryptionOutput struct{ *pulumi.OutputState }

func (OriginEndpointEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginEndpointEncryption)(nil)).Elem()
}

func (o OriginEndpointEncryptionOutput) ToOriginEndpointEncryptionOutput() OriginEndpointEncryptionOutput {
	return o
}

func (o OriginEndpointEncryptionOutput) ToOriginEndpointEncryptionOutputWithContext(ctx context.Context) OriginEndpointEncryptionOutput {
	return o
}

func (o OriginEndpointEncryptionOutput) ToOriginEndpointEncryptionPtrOutput() OriginEndpointEncryptionPtrOutput {
	return o.ToOriginEndpointEncryptionPtrOutputWithContext(context.Background())
}

func (o OriginEndpointEncryptionOutput) ToOriginEndpointEncryptionPtrOutputWithContext(ctx context.Context) OriginEndpointEncryptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OriginEndpointEncryption) *OriginEndpointEncryption {
		return &v
	}).(OriginEndpointEncryptionPtrOutput)
}

// <p>A 128-bit, 16-byte hex value represented by a 32-character string, used in conjunction with the key for encrypting content. If you don't specify a value, then MediaPackage creates the constant initialization vector (IV).</p>
func (o OriginEndpointEncryptionOutput) ConstantInitializationVector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OriginEndpointEncryption) *string { return v.ConstantInitializationVector }).(pulumi.StringPtrOutput)
}

// The encryption method to use.
func (o OriginEndpointEncryptionOutput) EncryptionMethod() OriginEndpointEncryptionMethodOutput {
	return o.ApplyT(func(v OriginEndpointEncryption) OriginEndpointEncryptionMethod { return v.EncryptionMethod }).(OriginEndpointEncryptionMethodOutput)
}

// <p>The frequency (in seconds) of key changes for live workflows, in which content is streamed real time. The service retrieves content keys before the live content begins streaming, and then retrieves them as needed over the lifetime of the workflow. By default, key rotation is set to 300 seconds (5 minutes), the minimum rotation interval, which is equivalent to setting it to 300. If you don't enter an interval, content keys aren't rotated.</p>
//
//	<p>The following example setting causes the service to rotate keys every thirty minutes: <code>1800</code>
//	</p>
func (o OriginEndpointEncryptionOutput) KeyRotationIntervalSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OriginEndpointEncryption) *int { return v.KeyRotationIntervalSeconds }).(pulumi.IntPtrOutput)
}

// The SPEKE key provider to use for encryption.
func (o OriginEndpointEncryptionOutput) SpekeKeyProvider() OriginEndpointSpekeKeyProviderOutput {
	return o.ApplyT(func(v OriginEndpointEncryption) OriginEndpointSpekeKeyProvider { return v.SpekeKeyProvider }).(OriginEndpointSpekeKeyProviderOutput)
}

type OriginEndpointEncryptionPtrOutput struct{ *pulumi.OutputState }

func (OriginEndpointEncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OriginEndpointEncryption)(nil)).Elem()
}

func (o OriginEndpointEncryptionPtrOutput) ToOriginEndpointEncryptionPtrOutput() OriginEndpointEncryptionPtrOutput {
	return o
}

func (o OriginEndpointEncryptionPtrOutput) ToOriginEndpointEncryptionPtrOutputWithContext(ctx context.Context) OriginEndpointEncryptionPtrOutput {
	return o
}

func (o OriginEndpointEncryptionPtrOutput) Elem() OriginEndpointEncryptionOutput {
	return o.ApplyT(func(v *OriginEndpointEncryption) OriginEndpointEncryption {
		if v != nil {
			return *v
		}
		var ret OriginEndpointEncryption
		return ret
	}).(OriginEndpointEncryptionOutput)
}

// <p>A 128-bit, 16-byte hex value represented by a 32-character string, used in conjunction with the key for encrypting content. If you don't specify a value, then MediaPackage creates the constant initialization vector (IV).</p>
func (o OriginEndpointEncryptionPtrOutput) ConstantInitializationVector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OriginEndpointEncryption) *string {
		if v == nil {
			return nil
		}
		return v.ConstantInitializationVector
	}).(pulumi.StringPtrOutput)
}

// The encryption method to use.
func (o OriginEndpointEncryptionPtrOutput) EncryptionMethod() OriginEndpointEncryptionMethodPtrOutput {
	return o.ApplyT(func(v *OriginEndpointEncryption) *OriginEndpointEncryptionMethod {
		if v == nil {
			return nil
		}
		return &v.EncryptionMethod
	}).(OriginEndpointEncryptionMethodPtrOutput)
}

// <p>The frequency (in seconds) of key changes for live workflows, in which content is streamed real time. The service retrieves content keys before the live content begins streaming, and then retrieves them as needed over the lifetime of the workflow. By default, key rotation is set to 300 seconds (5 minutes), the minimum rotation interval, which is equivalent to setting it to 300. If you don't enter an interval, content keys aren't rotated.</p>
//
//	<p>The following example setting causes the service to rotate keys every thirty minutes: <code>1800</code>
//	</p>
func (o OriginEndpointEncryptionPtrOutput) KeyRotationIntervalSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OriginEndpointEncryption) *int {
		if v == nil {
			return nil
		}
		return v.KeyRotationIntervalSeconds
	}).(pulumi.IntPtrOutput)
}

// The SPEKE key provider to use for encryption.
func (o OriginEndpointEncryptionPtrOutput) SpekeKeyProvider() OriginEndpointSpekeKeyProviderPtrOutput {
	return o.ApplyT(func(v *OriginEndpointEncryption) *OriginEndpointSpekeKeyProvider {
		if v == nil {
			return nil
		}
		return &v.SpekeKeyProvider
	}).(OriginEndpointSpekeKeyProviderPtrOutput)
}

// <p>Configure one or more content encryption keys for your endpoints that use SPEKE Version 2.0. The encryption contract defines which content keys are used to encrypt the audio and video tracks in your stream. To configure the encryption contract, specify which audio and video encryption presets to use.</p>
type OriginEndpointEncryptionContractConfiguration struct {
	// A collection of audio encryption presets.
	//
	// Value description:
	//
	// - `PRESET-AUDIO-1` - Use one content key to encrypt all of the audio tracks in your stream.
	// - `PRESET-AUDIO-2` - Use one content key to encrypt all of the stereo audio tracks and one content key to encrypt all of the multichannel audio tracks.
	// - `PRESET-AUDIO-3` - Use one content key to encrypt all of the stereo audio tracks, one content key to encrypt all of the multichannel audio tracks with 3 to 6 channels, and one content key to encrypt all of the multichannel audio tracks with more than 6 channels.
	// - `SHARED` - Use the same content key for all of the audio and video tracks in your stream.
	// - `UNENCRYPTED` - Don't encrypt any of the audio tracks in your stream.
	PresetSpeke20Audio OriginEndpointPresetSpeke20Audio `pulumi:"presetSpeke20Audio"`
	// The SPEKE Version 2.0 preset video associated with the encryption contract configuration of the origin endpoint.
	//
	// A collection of video encryption presets.
	//
	// Value description:
	//
	// - `PRESET-VIDEO-1` - Use one content key to encrypt all of the video tracks in your stream.
	// - `PRESET-VIDEO-2` - Use one content key to encrypt all of the SD video tracks and one content key for all HD and higher resolutions video tracks.
	// - `PRESET-VIDEO-3` - Use one content key to encrypt all of the SD video tracks, one content key for HD video tracks and one content key for all UHD video tracks.
	// - `PRESET-VIDEO-4` - Use one content key to encrypt all of the SD video tracks, one content key for HD video tracks, one content key for all UHD1 video tracks and one content key for all UHD2 video tracks.
	// - `PRESET-VIDEO-5` - Use one content key to encrypt all of the SD video tracks, one content key for HD1 video tracks, one content key for HD2 video tracks, one content key for all UHD1 video tracks and one content key for all UHD2 video tracks.
	// - `PRESET-VIDEO-6` - Use one content key to encrypt all of the SD video tracks, one content key for HD1 video tracks, one content key for HD2 video tracks and one content key for all UHD video tracks.
	// - `PRESET-VIDEO-7` - Use one content key to encrypt all of the SD+HD1 video tracks, one content key for HD2 video tracks and one content key for all UHD video tracks.
	// - `PRESET-VIDEO-8` - Use one content key to encrypt all of the SD+HD1 video tracks, one content key for HD2 video tracks, one content key for all UHD1 video tracks and one content key for all UHD2 video tracks.
	// - `SHARED` - Use the same content key for all of the video and audio tracks in your stream.
	// - `UNENCRYPTED` - Don't encrypt any of the video tracks in your stream.
	PresetSpeke20Video OriginEndpointPresetSpeke20Video `pulumi:"presetSpeke20Video"`
}

// OriginEndpointEncryptionContractConfigurationInput is an input type that accepts OriginEndpointEncryptionContractConfigurationArgs and OriginEndpointEncryptionContractConfigurationOutput values.
// You can construct a concrete instance of `OriginEndpointEncryptionContractConfigurationInput` via:
//
//	OriginEndpointEncryptionContractConfigurationArgs{...}
type OriginEndpointEncryptionContractConfigurationInput interface {
	pulumi.Input

	ToOriginEndpointEncryptionContractConfigurationOutput() OriginEndpointEncryptionContractConfigurationOutput
	ToOriginEndpointEncryptionContractConfigurationOutputWithContext(context.Context) OriginEndpointEncryptionContractConfigurationOutput
}

// <p>Configure one or more content encryption keys for your endpoints that use SPEKE Version 2.0. The encryption contract defines which content keys are used to encrypt the audio and video tracks in your stream. To configure the encryption contract, specify which audio and video encryption presets to use.</p>
type OriginEndpointEncryptionContractConfigurationArgs struct {
	// A collection of audio encryption presets.
	//
	// Value description:
	//
	// - `PRESET-AUDIO-1` - Use one content key to encrypt all of the audio tracks in your stream.
	// - `PRESET-AUDIO-2` - Use one content key to encrypt all of the stereo audio tracks and one content key to encrypt all of the multichannel audio tracks.
	// - `PRESET-AUDIO-3` - Use one content key to encrypt all of the stereo audio tracks, one content key to encrypt all of the multichannel audio tracks with 3 to 6 channels, and one content key to encrypt all of the multichannel audio tracks with more than 6 channels.
	// - `SHARED` - Use the same content key for all of the audio and video tracks in your stream.
	// - `UNENCRYPTED` - Don't encrypt any of the audio tracks in your stream.
	PresetSpeke20Audio OriginEndpointPresetSpeke20AudioInput `pulumi:"presetSpeke20Audio"`
	// The SPEKE Version 2.0 preset video associated with the encryption contract configuration of the origin endpoint.
	//
	// A collection of video encryption presets.
	//
	// Value description:
	//
	// - `PRESET-VIDEO-1` - Use one content key to encrypt all of the video tracks in your stream.
	// - `PRESET-VIDEO-2` - Use one content key to encrypt all of the SD video tracks and one content key for all HD and higher resolutions video tracks.
	// - `PRESET-VIDEO-3` - Use one content key to encrypt all of the SD video tracks, one content key for HD video tracks and one content key for all UHD video tracks.
	// - `PRESET-VIDEO-4` - Use one content key to encrypt all of the SD video tracks, one content key for HD video tracks, one content key for all UHD1 video tracks and one content key for all UHD2 video tracks.
	// - `PRESET-VIDEO-5` - Use one content key to encrypt all of the SD video tracks, one content key for HD1 video tracks, one content key for HD2 video tracks, one content key for all UHD1 video tracks and one content key for all UHD2 video tracks.
	// - `PRESET-VIDEO-6` - Use one content key to encrypt all of the SD video tracks, one content key for HD1 video tracks, one content key for HD2 video tracks and one content key for all UHD video tracks.
	// - `PRESET-VIDEO-7` - Use one content key to encrypt all of the SD+HD1 video tracks, one content key for HD2 video tracks and one content key for all UHD video tracks.
	// - `PRESET-VIDEO-8` - Use one content key to encrypt all of the SD+HD1 video tracks, one content key for HD2 video tracks, one content key for all UHD1 video tracks and one content key for all UHD2 video tracks.
	// - `SHARED` - Use the same content key for all of the video and audio tracks in your stream.
	// - `UNENCRYPTED` - Don't encrypt any of the video tracks in your stream.
	PresetSpeke20Video OriginEndpointPresetSpeke20VideoInput `pulumi:"presetSpeke20Video"`
}

func (OriginEndpointEncryptionContractConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginEndpointEncryptionContractConfiguration)(nil)).Elem()
}

func (i OriginEndpointEncryptionContractConfigurationArgs) ToOriginEndpointEncryptionContractConfigurationOutput() OriginEndpointEncryptionContractConfigurationOutput {
	return i.ToOriginEndpointEncryptionContractConfigurationOutputWithContext(context.Background())
}

func (i OriginEndpointEncryptionContractConfigurationArgs) ToOriginEndpointEncryptionContractConfigurationOutputWithContext(ctx context.Context) OriginEndpointEncryptionContractConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointEncryptionContractConfigurationOutput)
}

func (i OriginEndpointEncryptionContractConfigurationArgs) ToOriginEndpointEncryptionContractConfigurationPtrOutput() OriginEndpointEncryptionContractConfigurationPtrOutput {
	return i.ToOriginEndpointEncryptionContractConfigurationPtrOutputWithContext(context.Background())
}

func (i OriginEndpointEncryptionContractConfigurationArgs) ToOriginEndpointEncryptionContractConfigurationPtrOutputWithContext(ctx context.Context) OriginEndpointEncryptionContractConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointEncryptionContractConfigurationOutput).ToOriginEndpointEncryptionContractConfigurationPtrOutputWithContext(ctx)
}

// OriginEndpointEncryptionContractConfigurationPtrInput is an input type that accepts OriginEndpointEncryptionContractConfigurationArgs, OriginEndpointEncryptionContractConfigurationPtr and OriginEndpointEncryptionContractConfigurationPtrOutput values.
// You can construct a concrete instance of `OriginEndpointEncryptionContractConfigurationPtrInput` via:
//
//	        OriginEndpointEncryptionContractConfigurationArgs{...}
//
//	or:
//
//	        nil
type OriginEndpointEncryptionContractConfigurationPtrInput interface {
	pulumi.Input

	ToOriginEndpointEncryptionContractConfigurationPtrOutput() OriginEndpointEncryptionContractConfigurationPtrOutput
	ToOriginEndpointEncryptionContractConfigurationPtrOutputWithContext(context.Context) OriginEndpointEncryptionContractConfigurationPtrOutput
}

type originEndpointEncryptionContractConfigurationPtrType OriginEndpointEncryptionContractConfigurationArgs

func OriginEndpointEncryptionContractConfigurationPtr(v *OriginEndpointEncryptionContractConfigurationArgs) OriginEndpointEncryptionContractConfigurationPtrInput {
	return (*originEndpointEncryptionContractConfigurationPtrType)(v)
}

func (*originEndpointEncryptionContractConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OriginEndpointEncryptionContractConfiguration)(nil)).Elem()
}

func (i *originEndpointEncryptionContractConfigurationPtrType) ToOriginEndpointEncryptionContractConfigurationPtrOutput() OriginEndpointEncryptionContractConfigurationPtrOutput {
	return i.ToOriginEndpointEncryptionContractConfigurationPtrOutputWithContext(context.Background())
}

func (i *originEndpointEncryptionContractConfigurationPtrType) ToOriginEndpointEncryptionContractConfigurationPtrOutputWithContext(ctx context.Context) OriginEndpointEncryptionContractConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointEncryptionContractConfigurationPtrOutput)
}

// <p>Configure one or more content encryption keys for your endpoints that use SPEKE Version 2.0. The encryption contract defines which content keys are used to encrypt the audio and video tracks in your stream. To configure the encryption contract, specify which audio and video encryption presets to use.</p>
type OriginEndpointEncryptionContractConfigurationOutput struct{ *pulumi.OutputState }

func (OriginEndpointEncryptionContractConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginEndpointEncryptionContractConfiguration)(nil)).Elem()
}

func (o OriginEndpointEncryptionContractConfigurationOutput) ToOriginEndpointEncryptionContractConfigurationOutput() OriginEndpointEncryptionContractConfigurationOutput {
	return o
}

func (o OriginEndpointEncryptionContractConfigurationOutput) ToOriginEndpointEncryptionContractConfigurationOutputWithContext(ctx context.Context) OriginEndpointEncryptionContractConfigurationOutput {
	return o
}

func (o OriginEndpointEncryptionContractConfigurationOutput) ToOriginEndpointEncryptionContractConfigurationPtrOutput() OriginEndpointEncryptionContractConfigurationPtrOutput {
	return o.ToOriginEndpointEncryptionContractConfigurationPtrOutputWithContext(context.Background())
}

func (o OriginEndpointEncryptionContractConfigurationOutput) ToOriginEndpointEncryptionContractConfigurationPtrOutputWithContext(ctx context.Context) OriginEndpointEncryptionContractConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OriginEndpointEncryptionContractConfiguration) *OriginEndpointEncryptionContractConfiguration {
		return &v
	}).(OriginEndpointEncryptionContractConfigurationPtrOutput)
}

// A collection of audio encryption presets.
//
// Value description:
//
// - `PRESET-AUDIO-1` - Use one content key to encrypt all of the audio tracks in your stream.
// - `PRESET-AUDIO-2` - Use one content key to encrypt all of the stereo audio tracks and one content key to encrypt all of the multichannel audio tracks.
// - `PRESET-AUDIO-3` - Use one content key to encrypt all of the stereo audio tracks, one content key to encrypt all of the multichannel audio tracks with 3 to 6 channels, and one content key to encrypt all of the multichannel audio tracks with more than 6 channels.
// - `SHARED` - Use the same content key for all of the audio and video tracks in your stream.
// - `UNENCRYPTED` - Don't encrypt any of the audio tracks in your stream.
func (o OriginEndpointEncryptionContractConfigurationOutput) PresetSpeke20Audio() OriginEndpointPresetSpeke20AudioOutput {
	return o.ApplyT(func(v OriginEndpointEncryptionContractConfiguration) OriginEndpointPresetSpeke20Audio {
		return v.PresetSpeke20Audio
	}).(OriginEndpointPresetSpeke20AudioOutput)
}

// The SPEKE Version 2.0 preset video associated with the encryption contract configuration of the origin endpoint.
//
// A collection of video encryption presets.
//
// Value description:
//
// - `PRESET-VIDEO-1` - Use one content key to encrypt all of the video tracks in your stream.
// - `PRESET-VIDEO-2` - Use one content key to encrypt all of the SD video tracks and one content key for all HD and higher resolutions video tracks.
// - `PRESET-VIDEO-3` - Use one content key to encrypt all of the SD video tracks, one content key for HD video tracks and one content key for all UHD video tracks.
// - `PRESET-VIDEO-4` - Use one content key to encrypt all of the SD video tracks, one content key for HD video tracks, one content key for all UHD1 video tracks and one content key for all UHD2 video tracks.
// - `PRESET-VIDEO-5` - Use one content key to encrypt all of the SD video tracks, one content key for HD1 video tracks, one content key for HD2 video tracks, one content key for all UHD1 video tracks and one content key for all UHD2 video tracks.
// - `PRESET-VIDEO-6` - Use one content key to encrypt all of the SD video tracks, one content key for HD1 video tracks, one content key for HD2 video tracks and one content key for all UHD video tracks.
// - `PRESET-VIDEO-7` - Use one content key to encrypt all of the SD+HD1 video tracks, one content key for HD2 video tracks and one content key for all UHD video tracks.
// - `PRESET-VIDEO-8` - Use one content key to encrypt all of the SD+HD1 video tracks, one content key for HD2 video tracks, one content key for all UHD1 video tracks and one content key for all UHD2 video tracks.
// - `SHARED` - Use the same content key for all of the video and audio tracks in your stream.
// - `UNENCRYPTED` - Don't encrypt any of the video tracks in your stream.
func (o OriginEndpointEncryptionContractConfigurationOutput) PresetSpeke20Video() OriginEndpointPresetSpeke20VideoOutput {
	return o.ApplyT(func(v OriginEndpointEncryptionContractConfiguration) OriginEndpointPresetSpeke20Video {
		return v.PresetSpeke20Video
	}).(OriginEndpointPresetSpeke20VideoOutput)
}

type OriginEndpointEncryptionContractConfigurationPtrOutput struct{ *pulumi.OutputState }

func (OriginEndpointEncryptionContractConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OriginEndpointEncryptionContractConfiguration)(nil)).Elem()
}

func (o OriginEndpointEncryptionContractConfigurationPtrOutput) ToOriginEndpointEncryptionContractConfigurationPtrOutput() OriginEndpointEncryptionContractConfigurationPtrOutput {
	return o
}

func (o OriginEndpointEncryptionContractConfigurationPtrOutput) ToOriginEndpointEncryptionContractConfigurationPtrOutputWithContext(ctx context.Context) OriginEndpointEncryptionContractConfigurationPtrOutput {
	return o
}

func (o OriginEndpointEncryptionContractConfigurationPtrOutput) Elem() OriginEndpointEncryptionContractConfigurationOutput {
	return o.ApplyT(func(v *OriginEndpointEncryptionContractConfiguration) OriginEndpointEncryptionContractConfiguration {
		if v != nil {
			return *v
		}
		var ret OriginEndpointEncryptionContractConfiguration
		return ret
	}).(OriginEndpointEncryptionContractConfigurationOutput)
}

// A collection of audio encryption presets.
//
// Value description:
//
// - `PRESET-AUDIO-1` - Use one content key to encrypt all of the audio tracks in your stream.
// - `PRESET-AUDIO-2` - Use one content key to encrypt all of the stereo audio tracks and one content key to encrypt all of the multichannel audio tracks.
// - `PRESET-AUDIO-3` - Use one content key to encrypt all of the stereo audio tracks, one content key to encrypt all of the multichannel audio tracks with 3 to 6 channels, and one content key to encrypt all of the multichannel audio tracks with more than 6 channels.
// - `SHARED` - Use the same content key for all of the audio and video tracks in your stream.
// - `UNENCRYPTED` - Don't encrypt any of the audio tracks in your stream.
func (o OriginEndpointEncryptionContractConfigurationPtrOutput) PresetSpeke20Audio() OriginEndpointPresetSpeke20AudioPtrOutput {
	return o.ApplyT(func(v *OriginEndpointEncryptionContractConfiguration) *OriginEndpointPresetSpeke20Audio {
		if v == nil {
			return nil
		}
		return &v.PresetSpeke20Audio
	}).(OriginEndpointPresetSpeke20AudioPtrOutput)
}

// The SPEKE Version 2.0 preset video associated with the encryption contract configuration of the origin endpoint.
//
// A collection of video encryption presets.
//
// Value description:
//
// - `PRESET-VIDEO-1` - Use one content key to encrypt all of the video tracks in your stream.
// - `PRESET-VIDEO-2` - Use one content key to encrypt all of the SD video tracks and one content key for all HD and higher resolutions video tracks.
// - `PRESET-VIDEO-3` - Use one content key to encrypt all of the SD video tracks, one content key for HD video tracks and one content key for all UHD video tracks.
// - `PRESET-VIDEO-4` - Use one content key to encrypt all of the SD video tracks, one content key for HD video tracks, one content key for all UHD1 video tracks and one content key for all UHD2 video tracks.
// - `PRESET-VIDEO-5` - Use one content key to encrypt all of the SD video tracks, one content key for HD1 video tracks, one content key for HD2 video tracks, one content key for all UHD1 video tracks and one content key for all UHD2 video tracks.
// - `PRESET-VIDEO-6` - Use one content key to encrypt all of the SD video tracks, one content key for HD1 video tracks, one content key for HD2 video tracks and one content key for all UHD video tracks.
// - `PRESET-VIDEO-7` - Use one content key to encrypt all of the SD+HD1 video tracks, one content key for HD2 video tracks and one content key for all UHD video tracks.
// - `PRESET-VIDEO-8` - Use one content key to encrypt all of the SD+HD1 video tracks, one content key for HD2 video tracks, one content key for all UHD1 video tracks and one content key for all UHD2 video tracks.
// - `SHARED` - Use the same content key for all of the video and audio tracks in your stream.
// - `UNENCRYPTED` - Don't encrypt any of the video tracks in your stream.
func (o OriginEndpointEncryptionContractConfigurationPtrOutput) PresetSpeke20Video() OriginEndpointPresetSpeke20VideoPtrOutput {
	return o.ApplyT(func(v *OriginEndpointEncryptionContractConfiguration) *OriginEndpointPresetSpeke20Video {
		if v == nil {
			return nil
		}
		return &v.PresetSpeke20Video
	}).(OriginEndpointPresetSpeke20VideoPtrOutput)
}

// <p>The encryption type.</p>
type OriginEndpointEncryptionMethod struct {
	// The encryption method to use.
	CmafEncryptionMethod *OriginEndpointCmafEncryptionMethod `pulumi:"cmafEncryptionMethod"`
	// The encryption method to use.
	TsEncryptionMethod *OriginEndpointTsEncryptionMethod `pulumi:"tsEncryptionMethod"`
}

// OriginEndpointEncryptionMethodInput is an input type that accepts OriginEndpointEncryptionMethodArgs and OriginEndpointEncryptionMethodOutput values.
// You can construct a concrete instance of `OriginEndpointEncryptionMethodInput` via:
//
//	OriginEndpointEncryptionMethodArgs{...}
type OriginEndpointEncryptionMethodInput interface {
	pulumi.Input

	ToOriginEndpointEncryptionMethodOutput() OriginEndpointEncryptionMethodOutput
	ToOriginEndpointEncryptionMethodOutputWithContext(context.Context) OriginEndpointEncryptionMethodOutput
}

// <p>The encryption type.</p>
type OriginEndpointEncryptionMethodArgs struct {
	// The encryption method to use.
	CmafEncryptionMethod OriginEndpointCmafEncryptionMethodPtrInput `pulumi:"cmafEncryptionMethod"`
	// The encryption method to use.
	TsEncryptionMethod OriginEndpointTsEncryptionMethodPtrInput `pulumi:"tsEncryptionMethod"`
}

func (OriginEndpointEncryptionMethodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginEndpointEncryptionMethod)(nil)).Elem()
}

func (i OriginEndpointEncryptionMethodArgs) ToOriginEndpointEncryptionMethodOutput() OriginEndpointEncryptionMethodOutput {
	return i.ToOriginEndpointEncryptionMethodOutputWithContext(context.Background())
}

func (i OriginEndpointEncryptionMethodArgs) ToOriginEndpointEncryptionMethodOutputWithContext(ctx context.Context) OriginEndpointEncryptionMethodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointEncryptionMethodOutput)
}

func (i OriginEndpointEncryptionMethodArgs) ToOriginEndpointEncryptionMethodPtrOutput() OriginEndpointEncryptionMethodPtrOutput {
	return i.ToOriginEndpointEncryptionMethodPtrOutputWithContext(context.Background())
}

func (i OriginEndpointEncryptionMethodArgs) ToOriginEndpointEncryptionMethodPtrOutputWithContext(ctx context.Context) OriginEndpointEncryptionMethodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointEncryptionMethodOutput).ToOriginEndpointEncryptionMethodPtrOutputWithContext(ctx)
}

// OriginEndpointEncryptionMethodPtrInput is an input type that accepts OriginEndpointEncryptionMethodArgs, OriginEndpointEncryptionMethodPtr and OriginEndpointEncryptionMethodPtrOutput values.
// You can construct a concrete instance of `OriginEndpointEncryptionMethodPtrInput` via:
//
//	        OriginEndpointEncryptionMethodArgs{...}
//
//	or:
//
//	        nil
type OriginEndpointEncryptionMethodPtrInput interface {
	pulumi.Input

	ToOriginEndpointEncryptionMethodPtrOutput() OriginEndpointEncryptionMethodPtrOutput
	ToOriginEndpointEncryptionMethodPtrOutputWithContext(context.Context) OriginEndpointEncryptionMethodPtrOutput
}

type originEndpointEncryptionMethodPtrType OriginEndpointEncryptionMethodArgs

func OriginEndpointEncryptionMethodPtr(v *OriginEndpointEncryptionMethodArgs) OriginEndpointEncryptionMethodPtrInput {
	return (*originEndpointEncryptionMethodPtrType)(v)
}

func (*originEndpointEncryptionMethodPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OriginEndpointEncryptionMethod)(nil)).Elem()
}

func (i *originEndpointEncryptionMethodPtrType) ToOriginEndpointEncryptionMethodPtrOutput() OriginEndpointEncryptionMethodPtrOutput {
	return i.ToOriginEndpointEncryptionMethodPtrOutputWithContext(context.Background())
}

func (i *originEndpointEncryptionMethodPtrType) ToOriginEndpointEncryptionMethodPtrOutputWithContext(ctx context.Context) OriginEndpointEncryptionMethodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointEncryptionMethodPtrOutput)
}

// <p>The encryption type.</p>
type OriginEndpointEncryptionMethodOutput struct{ *pulumi.OutputState }

func (OriginEndpointEncryptionMethodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginEndpointEncryptionMethod)(nil)).Elem()
}

func (o OriginEndpointEncryptionMethodOutput) ToOriginEndpointEncryptionMethodOutput() OriginEndpointEncryptionMethodOutput {
	return o
}

func (o OriginEndpointEncryptionMethodOutput) ToOriginEndpointEncryptionMethodOutputWithContext(ctx context.Context) OriginEndpointEncryptionMethodOutput {
	return o
}

func (o OriginEndpointEncryptionMethodOutput) ToOriginEndpointEncryptionMethodPtrOutput() OriginEndpointEncryptionMethodPtrOutput {
	return o.ToOriginEndpointEncryptionMethodPtrOutputWithContext(context.Background())
}

func (o OriginEndpointEncryptionMethodOutput) ToOriginEndpointEncryptionMethodPtrOutputWithContext(ctx context.Context) OriginEndpointEncryptionMethodPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OriginEndpointEncryptionMethod) *OriginEndpointEncryptionMethod {
		return &v
	}).(OriginEndpointEncryptionMethodPtrOutput)
}

// The encryption method to use.
func (o OriginEndpointEncryptionMethodOutput) CmafEncryptionMethod() OriginEndpointCmafEncryptionMethodPtrOutput {
	return o.ApplyT(func(v OriginEndpointEncryptionMethod) *OriginEndpointCmafEncryptionMethod {
		return v.CmafEncryptionMethod
	}).(OriginEndpointCmafEncryptionMethodPtrOutput)
}

// The encryption method to use.
func (o OriginEndpointEncryptionMethodOutput) TsEncryptionMethod() OriginEndpointTsEncryptionMethodPtrOutput {
	return o.ApplyT(func(v OriginEndpointEncryptionMethod) *OriginEndpointTsEncryptionMethod { return v.TsEncryptionMethod }).(OriginEndpointTsEncryptionMethodPtrOutput)
}

type OriginEndpointEncryptionMethodPtrOutput struct{ *pulumi.OutputState }

func (OriginEndpointEncryptionMethodPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OriginEndpointEncryptionMethod)(nil)).Elem()
}

func (o OriginEndpointEncryptionMethodPtrOutput) ToOriginEndpointEncryptionMethodPtrOutput() OriginEndpointEncryptionMethodPtrOutput {
	return o
}

func (o OriginEndpointEncryptionMethodPtrOutput) ToOriginEndpointEncryptionMethodPtrOutputWithContext(ctx context.Context) OriginEndpointEncryptionMethodPtrOutput {
	return o
}

func (o OriginEndpointEncryptionMethodPtrOutput) Elem() OriginEndpointEncryptionMethodOutput {
	return o.ApplyT(func(v *OriginEndpointEncryptionMethod) OriginEndpointEncryptionMethod {
		if v != nil {
			return *v
		}
		var ret OriginEndpointEncryptionMethod
		return ret
	}).(OriginEndpointEncryptionMethodOutput)
}

// The encryption method to use.
func (o OriginEndpointEncryptionMethodPtrOutput) CmafEncryptionMethod() OriginEndpointCmafEncryptionMethodPtrOutput {
	return o.ApplyT(func(v *OriginEndpointEncryptionMethod) *OriginEndpointCmafEncryptionMethod {
		if v == nil {
			return nil
		}
		return v.CmafEncryptionMethod
	}).(OriginEndpointCmafEncryptionMethodPtrOutput)
}

// The encryption method to use.
func (o OriginEndpointEncryptionMethodPtrOutput) TsEncryptionMethod() OriginEndpointTsEncryptionMethodPtrOutput {
	return o.ApplyT(func(v *OriginEndpointEncryptionMethod) *OriginEndpointTsEncryptionMethod {
		if v == nil {
			return nil
		}
		return v.TsEncryptionMethod
	}).(OriginEndpointTsEncryptionMethodPtrOutput)
}

// <p>Filter configuration includes settings for manifest filtering, start and end times, and time delay that apply to all of your egress requests for this manifest. </p>
type OriginEndpointFilterConfiguration struct {
	// <p>Optionally specify the clip start time for all of your manifest egress requests. When you include clip start time, note that you cannot use clip start time query parameters for this manifest's endpoint URL.</p>
	ClipStartTime *string `pulumi:"clipStartTime"`
	// <p>Optionally specify the end time for all of your manifest egress requests. When you include end time, note that you cannot use end time query parameters for this manifest's endpoint URL.</p>
	End *string `pulumi:"end"`
	// <p>Optionally specify one or more manifest filters for all of your manifest egress requests. When you include a manifest filter, note that you cannot use an identical manifest filter query parameter for this manifest's endpoint URL.</p>
	ManifestFilter *string `pulumi:"manifestFilter"`
	// <p>Optionally specify the start time for all of your manifest egress requests. When you include start time, note that you cannot use start time query parameters for this manifest's endpoint URL.</p>
	Start *string `pulumi:"start"`
	// <p>Optionally specify the time delay for all of your manifest egress requests. Enter a value that is smaller than your endpoint's startover window. When you include time delay, note that you cannot use time delay query parameters for this manifest's endpoint URL.</p>
	TimeDelaySeconds *int `pulumi:"timeDelaySeconds"`
}

// OriginEndpointFilterConfigurationInput is an input type that accepts OriginEndpointFilterConfigurationArgs and OriginEndpointFilterConfigurationOutput values.
// You can construct a concrete instance of `OriginEndpointFilterConfigurationInput` via:
//
//	OriginEndpointFilterConfigurationArgs{...}
type OriginEndpointFilterConfigurationInput interface {
	pulumi.Input

	ToOriginEndpointFilterConfigurationOutput() OriginEndpointFilterConfigurationOutput
	ToOriginEndpointFilterConfigurationOutputWithContext(context.Context) OriginEndpointFilterConfigurationOutput
}

// <p>Filter configuration includes settings for manifest filtering, start and end times, and time delay that apply to all of your egress requests for this manifest. </p>
type OriginEndpointFilterConfigurationArgs struct {
	// <p>Optionally specify the clip start time for all of your manifest egress requests. When you include clip start time, note that you cannot use clip start time query parameters for this manifest's endpoint URL.</p>
	ClipStartTime pulumi.StringPtrInput `pulumi:"clipStartTime"`
	// <p>Optionally specify the end time for all of your manifest egress requests. When you include end time, note that you cannot use end time query parameters for this manifest's endpoint URL.</p>
	End pulumi.StringPtrInput `pulumi:"end"`
	// <p>Optionally specify one or more manifest filters for all of your manifest egress requests. When you include a manifest filter, note that you cannot use an identical manifest filter query parameter for this manifest's endpoint URL.</p>
	ManifestFilter pulumi.StringPtrInput `pulumi:"manifestFilter"`
	// <p>Optionally specify the start time for all of your manifest egress requests. When you include start time, note that you cannot use start time query parameters for this manifest's endpoint URL.</p>
	Start pulumi.StringPtrInput `pulumi:"start"`
	// <p>Optionally specify the time delay for all of your manifest egress requests. Enter a value that is smaller than your endpoint's startover window. When you include time delay, note that you cannot use time delay query parameters for this manifest's endpoint URL.</p>
	TimeDelaySeconds pulumi.IntPtrInput `pulumi:"timeDelaySeconds"`
}

func (OriginEndpointFilterConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginEndpointFilterConfiguration)(nil)).Elem()
}

func (i OriginEndpointFilterConfigurationArgs) ToOriginEndpointFilterConfigurationOutput() OriginEndpointFilterConfigurationOutput {
	return i.ToOriginEndpointFilterConfigurationOutputWithContext(context.Background())
}

func (i OriginEndpointFilterConfigurationArgs) ToOriginEndpointFilterConfigurationOutputWithContext(ctx context.Context) OriginEndpointFilterConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointFilterConfigurationOutput)
}

func (i OriginEndpointFilterConfigurationArgs) ToOriginEndpointFilterConfigurationPtrOutput() OriginEndpointFilterConfigurationPtrOutput {
	return i.ToOriginEndpointFilterConfigurationPtrOutputWithContext(context.Background())
}

func (i OriginEndpointFilterConfigurationArgs) ToOriginEndpointFilterConfigurationPtrOutputWithContext(ctx context.Context) OriginEndpointFilterConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointFilterConfigurationOutput).ToOriginEndpointFilterConfigurationPtrOutputWithContext(ctx)
}

// OriginEndpointFilterConfigurationPtrInput is an input type that accepts OriginEndpointFilterConfigurationArgs, OriginEndpointFilterConfigurationPtr and OriginEndpointFilterConfigurationPtrOutput values.
// You can construct a concrete instance of `OriginEndpointFilterConfigurationPtrInput` via:
//
//	        OriginEndpointFilterConfigurationArgs{...}
//
//	or:
//
//	        nil
type OriginEndpointFilterConfigurationPtrInput interface {
	pulumi.Input

	ToOriginEndpointFilterConfigurationPtrOutput() OriginEndpointFilterConfigurationPtrOutput
	ToOriginEndpointFilterConfigurationPtrOutputWithContext(context.Context) OriginEndpointFilterConfigurationPtrOutput
}

type originEndpointFilterConfigurationPtrType OriginEndpointFilterConfigurationArgs

func OriginEndpointFilterConfigurationPtr(v *OriginEndpointFilterConfigurationArgs) OriginEndpointFilterConfigurationPtrInput {
	return (*originEndpointFilterConfigurationPtrType)(v)
}

func (*originEndpointFilterConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OriginEndpointFilterConfiguration)(nil)).Elem()
}

func (i *originEndpointFilterConfigurationPtrType) ToOriginEndpointFilterConfigurationPtrOutput() OriginEndpointFilterConfigurationPtrOutput {
	return i.ToOriginEndpointFilterConfigurationPtrOutputWithContext(context.Background())
}

func (i *originEndpointFilterConfigurationPtrType) ToOriginEndpointFilterConfigurationPtrOutputWithContext(ctx context.Context) OriginEndpointFilterConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointFilterConfigurationPtrOutput)
}

// <p>Filter configuration includes settings for manifest filtering, start and end times, and time delay that apply to all of your egress requests for this manifest. </p>
type OriginEndpointFilterConfigurationOutput struct{ *pulumi.OutputState }

func (OriginEndpointFilterConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginEndpointFilterConfiguration)(nil)).Elem()
}

func (o OriginEndpointFilterConfigurationOutput) ToOriginEndpointFilterConfigurationOutput() OriginEndpointFilterConfigurationOutput {
	return o
}

func (o OriginEndpointFilterConfigurationOutput) ToOriginEndpointFilterConfigurationOutputWithContext(ctx context.Context) OriginEndpointFilterConfigurationOutput {
	return o
}

func (o OriginEndpointFilterConfigurationOutput) ToOriginEndpointFilterConfigurationPtrOutput() OriginEndpointFilterConfigurationPtrOutput {
	return o.ToOriginEndpointFilterConfigurationPtrOutputWithContext(context.Background())
}

func (o OriginEndpointFilterConfigurationOutput) ToOriginEndpointFilterConfigurationPtrOutputWithContext(ctx context.Context) OriginEndpointFilterConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OriginEndpointFilterConfiguration) *OriginEndpointFilterConfiguration {
		return &v
	}).(OriginEndpointFilterConfigurationPtrOutput)
}

// <p>Optionally specify the clip start time for all of your manifest egress requests. When you include clip start time, note that you cannot use clip start time query parameters for this manifest's endpoint URL.</p>
func (o OriginEndpointFilterConfigurationOutput) ClipStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OriginEndpointFilterConfiguration) *string { return v.ClipStartTime }).(pulumi.StringPtrOutput)
}

// <p>Optionally specify the end time for all of your manifest egress requests. When you include end time, note that you cannot use end time query parameters for this manifest's endpoint URL.</p>
func (o OriginEndpointFilterConfigurationOutput) End() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OriginEndpointFilterConfiguration) *string { return v.End }).(pulumi.StringPtrOutput)
}

// <p>Optionally specify one or more manifest filters for all of your manifest egress requests. When you include a manifest filter, note that you cannot use an identical manifest filter query parameter for this manifest's endpoint URL.</p>
func (o OriginEndpointFilterConfigurationOutput) ManifestFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OriginEndpointFilterConfiguration) *string { return v.ManifestFilter }).(pulumi.StringPtrOutput)
}

// <p>Optionally specify the start time for all of your manifest egress requests. When you include start time, note that you cannot use start time query parameters for this manifest's endpoint URL.</p>
func (o OriginEndpointFilterConfigurationOutput) Start() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OriginEndpointFilterConfiguration) *string { return v.Start }).(pulumi.StringPtrOutput)
}

// <p>Optionally specify the time delay for all of your manifest egress requests. Enter a value that is smaller than your endpoint's startover window. When you include time delay, note that you cannot use time delay query parameters for this manifest's endpoint URL.</p>
func (o OriginEndpointFilterConfigurationOutput) TimeDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OriginEndpointFilterConfiguration) *int { return v.TimeDelaySeconds }).(pulumi.IntPtrOutput)
}

type OriginEndpointFilterConfigurationPtrOutput struct{ *pulumi.OutputState }

func (OriginEndpointFilterConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OriginEndpointFilterConfiguration)(nil)).Elem()
}

func (o OriginEndpointFilterConfigurationPtrOutput) ToOriginEndpointFilterConfigurationPtrOutput() OriginEndpointFilterConfigurationPtrOutput {
	return o
}

func (o OriginEndpointFilterConfigurationPtrOutput) ToOriginEndpointFilterConfigurationPtrOutputWithContext(ctx context.Context) OriginEndpointFilterConfigurationPtrOutput {
	return o
}

func (o OriginEndpointFilterConfigurationPtrOutput) Elem() OriginEndpointFilterConfigurationOutput {
	return o.ApplyT(func(v *OriginEndpointFilterConfiguration) OriginEndpointFilterConfiguration {
		if v != nil {
			return *v
		}
		var ret OriginEndpointFilterConfiguration
		return ret
	}).(OriginEndpointFilterConfigurationOutput)
}

// <p>Optionally specify the clip start time for all of your manifest egress requests. When you include clip start time, note that you cannot use clip start time query parameters for this manifest's endpoint URL.</p>
func (o OriginEndpointFilterConfigurationPtrOutput) ClipStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OriginEndpointFilterConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ClipStartTime
	}).(pulumi.StringPtrOutput)
}

// <p>Optionally specify the end time for all of your manifest egress requests. When you include end time, note that you cannot use end time query parameters for this manifest's endpoint URL.</p>
func (o OriginEndpointFilterConfigurationPtrOutput) End() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OriginEndpointFilterConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.End
	}).(pulumi.StringPtrOutput)
}

// <p>Optionally specify one or more manifest filters for all of your manifest egress requests. When you include a manifest filter, note that you cannot use an identical manifest filter query parameter for this manifest's endpoint URL.</p>
func (o OriginEndpointFilterConfigurationPtrOutput) ManifestFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OriginEndpointFilterConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ManifestFilter
	}).(pulumi.StringPtrOutput)
}

// <p>Optionally specify the start time for all of your manifest egress requests. When you include start time, note that you cannot use start time query parameters for this manifest's endpoint URL.</p>
func (o OriginEndpointFilterConfigurationPtrOutput) Start() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OriginEndpointFilterConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Start
	}).(pulumi.StringPtrOutput)
}

// <p>Optionally specify the time delay for all of your manifest egress requests. Enter a value that is smaller than your endpoint's startover window. When you include time delay, note that you cannot use time delay query parameters for this manifest's endpoint URL.</p>
func (o OriginEndpointFilterConfigurationPtrOutput) TimeDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OriginEndpointFilterConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.TimeDelaySeconds
	}).(pulumi.IntPtrOutput)
}

// <p>The failover settings for the endpoint.</p>
type OriginEndpointForceEndpointErrorConfiguration struct {
	// <p>The failover conditions for the endpoint. The options are:</p>
	//          <ul>
	//             <li>
	//                <p>
	//                   <code>STALE_MANIFEST</code> - The manifest stalled and there are no new segments or parts.</p>
	//             </li>
	//             <li>
	//                <p>
	//                   <code>INCOMPLETE_MANIFEST</code> - There is a gap in the manifest.</p>
	//             </li>
	//             <li>
	//                <p>
	//                   <code>MISSING_DRM_KEY</code> - Key rotation is enabled but we're unable to fetch the key for the current key period.</p>
	//             </li>
	//             <li>
	//                <p>
	//                   <code>SLATE_INPUT</code> - The segments which contain slate content are considered to be missing content.</p>
	//             </li>
	//          </ul>
	EndpointErrorConditions []OriginEndpointEndpointErrorCondition `pulumi:"endpointErrorConditions"`
}

// OriginEndpointForceEndpointErrorConfigurationInput is an input type that accepts OriginEndpointForceEndpointErrorConfigurationArgs and OriginEndpointForceEndpointErrorConfigurationOutput values.
// You can construct a concrete instance of `OriginEndpointForceEndpointErrorConfigurationInput` via:
//
//	OriginEndpointForceEndpointErrorConfigurationArgs{...}
type OriginEndpointForceEndpointErrorConfigurationInput interface {
	pulumi.Input

	ToOriginEndpointForceEndpointErrorConfigurationOutput() OriginEndpointForceEndpointErrorConfigurationOutput
	ToOriginEndpointForceEndpointErrorConfigurationOutputWithContext(context.Context) OriginEndpointForceEndpointErrorConfigurationOutput
}

// <p>The failover settings for the endpoint.</p>
type OriginEndpointForceEndpointErrorConfigurationArgs struct {
	// <p>The failover conditions for the endpoint. The options are:</p>
	//          <ul>
	//             <li>
	//                <p>
	//                   <code>STALE_MANIFEST</code> - The manifest stalled and there are no new segments or parts.</p>
	//             </li>
	//             <li>
	//                <p>
	//                   <code>INCOMPLETE_MANIFEST</code> - There is a gap in the manifest.</p>
	//             </li>
	//             <li>
	//                <p>
	//                   <code>MISSING_DRM_KEY</code> - Key rotation is enabled but we're unable to fetch the key for the current key period.</p>
	//             </li>
	//             <li>
	//                <p>
	//                   <code>SLATE_INPUT</code> - The segments which contain slate content are considered to be missing content.</p>
	//             </li>
	//          </ul>
	EndpointErrorConditions OriginEndpointEndpointErrorConditionArrayInput `pulumi:"endpointErrorConditions"`
}

func (OriginEndpointForceEndpointErrorConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginEndpointForceEndpointErrorConfiguration)(nil)).Elem()
}

func (i OriginEndpointForceEndpointErrorConfigurationArgs) ToOriginEndpointForceEndpointErrorConfigurationOutput() OriginEndpointForceEndpointErrorConfigurationOutput {
	return i.ToOriginEndpointForceEndpointErrorConfigurationOutputWithContext(context.Background())
}

func (i OriginEndpointForceEndpointErrorConfigurationArgs) ToOriginEndpointForceEndpointErrorConfigurationOutputWithContext(ctx context.Context) OriginEndpointForceEndpointErrorConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointForceEndpointErrorConfigurationOutput)
}

func (i OriginEndpointForceEndpointErrorConfigurationArgs) ToOriginEndpointForceEndpointErrorConfigurationPtrOutput() OriginEndpointForceEndpointErrorConfigurationPtrOutput {
	return i.ToOriginEndpointForceEndpointErrorConfigurationPtrOutputWithContext(context.Background())
}

func (i OriginEndpointForceEndpointErrorConfigurationArgs) ToOriginEndpointForceEndpointErrorConfigurationPtrOutputWithContext(ctx context.Context) OriginEndpointForceEndpointErrorConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointForceEndpointErrorConfigurationOutput).ToOriginEndpointForceEndpointErrorConfigurationPtrOutputWithContext(ctx)
}

// OriginEndpointForceEndpointErrorConfigurationPtrInput is an input type that accepts OriginEndpointForceEndpointErrorConfigurationArgs, OriginEndpointForceEndpointErrorConfigurationPtr and OriginEndpointForceEndpointErrorConfigurationPtrOutput values.
// You can construct a concrete instance of `OriginEndpointForceEndpointErrorConfigurationPtrInput` via:
//
//	        OriginEndpointForceEndpointErrorConfigurationArgs{...}
//
//	or:
//
//	        nil
type OriginEndpointForceEndpointErrorConfigurationPtrInput interface {
	pulumi.Input

	ToOriginEndpointForceEndpointErrorConfigurationPtrOutput() OriginEndpointForceEndpointErrorConfigurationPtrOutput
	ToOriginEndpointForceEndpointErrorConfigurationPtrOutputWithContext(context.Context) OriginEndpointForceEndpointErrorConfigurationPtrOutput
}

type originEndpointForceEndpointErrorConfigurationPtrType OriginEndpointForceEndpointErrorConfigurationArgs

func OriginEndpointForceEndpointErrorConfigurationPtr(v *OriginEndpointForceEndpointErrorConfigurationArgs) OriginEndpointForceEndpointErrorConfigurationPtrInput {
	return (*originEndpointForceEndpointErrorConfigurationPtrType)(v)
}

func (*originEndpointForceEndpointErrorConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OriginEndpointForceEndpointErrorConfiguration)(nil)).Elem()
}

func (i *originEndpointForceEndpointErrorConfigurationPtrType) ToOriginEndpointForceEndpointErrorConfigurationPtrOutput() OriginEndpointForceEndpointErrorConfigurationPtrOutput {
	return i.ToOriginEndpointForceEndpointErrorConfigurationPtrOutputWithContext(context.Background())
}

func (i *originEndpointForceEndpointErrorConfigurationPtrType) ToOriginEndpointForceEndpointErrorConfigurationPtrOutputWithContext(ctx context.Context) OriginEndpointForceEndpointErrorConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointForceEndpointErrorConfigurationPtrOutput)
}

// <p>The failover settings for the endpoint.</p>
type OriginEndpointForceEndpointErrorConfigurationOutput struct{ *pulumi.OutputState }

func (OriginEndpointForceEndpointErrorConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginEndpointForceEndpointErrorConfiguration)(nil)).Elem()
}

func (o OriginEndpointForceEndpointErrorConfigurationOutput) ToOriginEndpointForceEndpointErrorConfigurationOutput() OriginEndpointForceEndpointErrorConfigurationOutput {
	return o
}

func (o OriginEndpointForceEndpointErrorConfigurationOutput) ToOriginEndpointForceEndpointErrorConfigurationOutputWithContext(ctx context.Context) OriginEndpointForceEndpointErrorConfigurationOutput {
	return o
}

func (o OriginEndpointForceEndpointErrorConfigurationOutput) ToOriginEndpointForceEndpointErrorConfigurationPtrOutput() OriginEndpointForceEndpointErrorConfigurationPtrOutput {
	return o.ToOriginEndpointForceEndpointErrorConfigurationPtrOutputWithContext(context.Background())
}

func (o OriginEndpointForceEndpointErrorConfigurationOutput) ToOriginEndpointForceEndpointErrorConfigurationPtrOutputWithContext(ctx context.Context) OriginEndpointForceEndpointErrorConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OriginEndpointForceEndpointErrorConfiguration) *OriginEndpointForceEndpointErrorConfiguration {
		return &v
	}).(OriginEndpointForceEndpointErrorConfigurationPtrOutput)
}

// <p>The failover conditions for the endpoint. The options are:</p>
//
//	<ul>
//	   <li>
//	      <p>
//	         <code>STALE_MANIFEST</code> - The manifest stalled and there are no new segments or parts.</p>
//	   </li>
//	   <li>
//	      <p>
//	         <code>INCOMPLETE_MANIFEST</code> - There is a gap in the manifest.</p>
//	   </li>
//	   <li>
//	      <p>
//	         <code>MISSING_DRM_KEY</code> - Key rotation is enabled but we're unable to fetch the key for the current key period.</p>
//	   </li>
//	   <li>
//	      <p>
//	         <code>SLATE_INPUT</code> - The segments which contain slate content are considered to be missing content.</p>
//	   </li>
//	</ul>
func (o OriginEndpointForceEndpointErrorConfigurationOutput) EndpointErrorConditions() OriginEndpointEndpointErrorConditionArrayOutput {
	return o.ApplyT(func(v OriginEndpointForceEndpointErrorConfiguration) []OriginEndpointEndpointErrorCondition {
		return v.EndpointErrorConditions
	}).(OriginEndpointEndpointErrorConditionArrayOutput)
}

type OriginEndpointForceEndpointErrorConfigurationPtrOutput struct{ *pulumi.OutputState }

func (OriginEndpointForceEndpointErrorConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OriginEndpointForceEndpointErrorConfiguration)(nil)).Elem()
}

func (o OriginEndpointForceEndpointErrorConfigurationPtrOutput) ToOriginEndpointForceEndpointErrorConfigurationPtrOutput() OriginEndpointForceEndpointErrorConfigurationPtrOutput {
	return o
}

func (o OriginEndpointForceEndpointErrorConfigurationPtrOutput) ToOriginEndpointForceEndpointErrorConfigurationPtrOutputWithContext(ctx context.Context) OriginEndpointForceEndpointErrorConfigurationPtrOutput {
	return o
}

func (o OriginEndpointForceEndpointErrorConfigurationPtrOutput) Elem() OriginEndpointForceEndpointErrorConfigurationOutput {
	return o.ApplyT(func(v *OriginEndpointForceEndpointErrorConfiguration) OriginEndpointForceEndpointErrorConfiguration {
		if v != nil {
			return *v
		}
		var ret OriginEndpointForceEndpointErrorConfiguration
		return ret
	}).(OriginEndpointForceEndpointErrorConfigurationOutput)
}

// <p>The failover conditions for the endpoint. The options are:</p>
//
//	<ul>
//	   <li>
//	      <p>
//	         <code>STALE_MANIFEST</code> - The manifest stalled and there are no new segments or parts.</p>
//	   </li>
//	   <li>
//	      <p>
//	         <code>INCOMPLETE_MANIFEST</code> - There is a gap in the manifest.</p>
//	   </li>
//	   <li>
//	      <p>
//	         <code>MISSING_DRM_KEY</code> - Key rotation is enabled but we're unable to fetch the key for the current key period.</p>
//	   </li>
//	   <li>
//	      <p>
//	         <code>SLATE_INPUT</code> - The segments which contain slate content are considered to be missing content.</p>
//	   </li>
//	</ul>
func (o OriginEndpointForceEndpointErrorConfigurationPtrOutput) EndpointErrorConditions() OriginEndpointEndpointErrorConditionArrayOutput {
	return o.ApplyT(func(v *OriginEndpointForceEndpointErrorConfiguration) []OriginEndpointEndpointErrorCondition {
		if v == nil {
			return nil
		}
		return v.EndpointErrorConditions
	}).(OriginEndpointEndpointErrorConditionArrayOutput)
}

// <p>Retrieve the HTTP live streaming (HLS) manifest configuration.</p>
type OriginEndpointHlsManifestConfiguration struct {
	// <p>A short string that's appended to the endpoint URL. The child manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default child manifest name, index_1. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.</p>
	ChildManifestName   *string                            `pulumi:"childManifestName"`
	FilterConfiguration *OriginEndpointFilterConfiguration `pulumi:"filterConfiguration"`
	// <p>A short short string that's appended to the endpoint URL. The manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index. MediaPackage automatically inserts the format extension, such as .m3u8. You can't use the same manifest name if you use HLS manifest and low-latency HLS manifest. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.</p>
	ManifestName string `pulumi:"manifestName"`
	// <p>The total duration (in seconds) of the manifest's content.</p>
	ManifestWindowSeconds *int `pulumi:"manifestWindowSeconds"`
	// <p>Inserts EXT-X-PROGRAM-DATE-TIME tags in the output manifest at the interval that you specify. If you don't enter an interval,
	//          EXT-X-PROGRAM-DATE-TIME tags aren't included in the manifest.
	//          The tags sync the stream to the wall clock so that viewers can seek to a specific time in the playback timeline on the player.</p>
	//          <p>Irrespective of this parameter, if any ID3Timed metadata is in the HLS input, it is passed through to the HLS output.</p>
	ProgramDateTimeIntervalSeconds *int `pulumi:"programDateTimeIntervalSeconds"`
	// THE SCTE-35 HLS configuration associated with the HLS manifest configuration.
	ScteHls  *OriginEndpointScteHls  `pulumi:"scteHls"`
	StartTag *OriginEndpointStartTag `pulumi:"startTag"`
	// <p>The egress domain URL for stream delivery from MediaPackage.</p>
	Url *string `pulumi:"url"`
	// <p>When enabled, MediaPackage URL-encodes the query string for API requests for HLS child manifests to comply with Amazon Web Services Signature Version 4 (SigV4) signature signing protocol.
	//          For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_sigv.html">Amazon Web Services Signature Version 4 for API requests</a> in <i>Identity and Access Management User Guide</i>.</p>
	UrlEncodeChildManifest *bool `pulumi:"urlEncodeChildManifest"`
}

// OriginEndpointHlsManifestConfigurationInput is an input type that accepts OriginEndpointHlsManifestConfigurationArgs and OriginEndpointHlsManifestConfigurationOutput values.
// You can construct a concrete instance of `OriginEndpointHlsManifestConfigurationInput` via:
//
//	OriginEndpointHlsManifestConfigurationArgs{...}
type OriginEndpointHlsManifestConfigurationInput interface {
	pulumi.Input

	ToOriginEndpointHlsManifestConfigurationOutput() OriginEndpointHlsManifestConfigurationOutput
	ToOriginEndpointHlsManifestConfigurationOutputWithContext(context.Context) OriginEndpointHlsManifestConfigurationOutput
}

// <p>Retrieve the HTTP live streaming (HLS) manifest configuration.</p>
type OriginEndpointHlsManifestConfigurationArgs struct {
	// <p>A short string that's appended to the endpoint URL. The child manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default child manifest name, index_1. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.</p>
	ChildManifestName   pulumi.StringPtrInput                     `pulumi:"childManifestName"`
	FilterConfiguration OriginEndpointFilterConfigurationPtrInput `pulumi:"filterConfiguration"`
	// <p>A short short string that's appended to the endpoint URL. The manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index. MediaPackage automatically inserts the format extension, such as .m3u8. You can't use the same manifest name if you use HLS manifest and low-latency HLS manifest. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.</p>
	ManifestName pulumi.StringInput `pulumi:"manifestName"`
	// <p>The total duration (in seconds) of the manifest's content.</p>
	ManifestWindowSeconds pulumi.IntPtrInput `pulumi:"manifestWindowSeconds"`
	// <p>Inserts EXT-X-PROGRAM-DATE-TIME tags in the output manifest at the interval that you specify. If you don't enter an interval,
	//          EXT-X-PROGRAM-DATE-TIME tags aren't included in the manifest.
	//          The tags sync the stream to the wall clock so that viewers can seek to a specific time in the playback timeline on the player.</p>
	//          <p>Irrespective of this parameter, if any ID3Timed metadata is in the HLS input, it is passed through to the HLS output.</p>
	ProgramDateTimeIntervalSeconds pulumi.IntPtrInput `pulumi:"programDateTimeIntervalSeconds"`
	// THE SCTE-35 HLS configuration associated with the HLS manifest configuration.
	ScteHls  OriginEndpointScteHlsPtrInput  `pulumi:"scteHls"`
	StartTag OriginEndpointStartTagPtrInput `pulumi:"startTag"`
	// <p>The egress domain URL for stream delivery from MediaPackage.</p>
	Url pulumi.StringPtrInput `pulumi:"url"`
	// <p>When enabled, MediaPackage URL-encodes the query string for API requests for HLS child manifests to comply with Amazon Web Services Signature Version 4 (SigV4) signature signing protocol.
	//          For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_sigv.html">Amazon Web Services Signature Version 4 for API requests</a> in <i>Identity and Access Management User Guide</i>.</p>
	UrlEncodeChildManifest pulumi.BoolPtrInput `pulumi:"urlEncodeChildManifest"`
}

func (OriginEndpointHlsManifestConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginEndpointHlsManifestConfiguration)(nil)).Elem()
}

func (i OriginEndpointHlsManifestConfigurationArgs) ToOriginEndpointHlsManifestConfigurationOutput() OriginEndpointHlsManifestConfigurationOutput {
	return i.ToOriginEndpointHlsManifestConfigurationOutputWithContext(context.Background())
}

func (i OriginEndpointHlsManifestConfigurationArgs) ToOriginEndpointHlsManifestConfigurationOutputWithContext(ctx context.Context) OriginEndpointHlsManifestConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointHlsManifestConfigurationOutput)
}

// OriginEndpointHlsManifestConfigurationArrayInput is an input type that accepts OriginEndpointHlsManifestConfigurationArray and OriginEndpointHlsManifestConfigurationArrayOutput values.
// You can construct a concrete instance of `OriginEndpointHlsManifestConfigurationArrayInput` via:
//
//	OriginEndpointHlsManifestConfigurationArray{ OriginEndpointHlsManifestConfigurationArgs{...} }
type OriginEndpointHlsManifestConfigurationArrayInput interface {
	pulumi.Input

	ToOriginEndpointHlsManifestConfigurationArrayOutput() OriginEndpointHlsManifestConfigurationArrayOutput
	ToOriginEndpointHlsManifestConfigurationArrayOutputWithContext(context.Context) OriginEndpointHlsManifestConfigurationArrayOutput
}

type OriginEndpointHlsManifestConfigurationArray []OriginEndpointHlsManifestConfigurationInput

func (OriginEndpointHlsManifestConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OriginEndpointHlsManifestConfiguration)(nil)).Elem()
}

func (i OriginEndpointHlsManifestConfigurationArray) ToOriginEndpointHlsManifestConfigurationArrayOutput() OriginEndpointHlsManifestConfigurationArrayOutput {
	return i.ToOriginEndpointHlsManifestConfigurationArrayOutputWithContext(context.Background())
}

func (i OriginEndpointHlsManifestConfigurationArray) ToOriginEndpointHlsManifestConfigurationArrayOutputWithContext(ctx context.Context) OriginEndpointHlsManifestConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointHlsManifestConfigurationArrayOutput)
}

// <p>Retrieve the HTTP live streaming (HLS) manifest configuration.</p>
type OriginEndpointHlsManifestConfigurationOutput struct{ *pulumi.OutputState }

func (OriginEndpointHlsManifestConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginEndpointHlsManifestConfiguration)(nil)).Elem()
}

func (o OriginEndpointHlsManifestConfigurationOutput) ToOriginEndpointHlsManifestConfigurationOutput() OriginEndpointHlsManifestConfigurationOutput {
	return o
}

func (o OriginEndpointHlsManifestConfigurationOutput) ToOriginEndpointHlsManifestConfigurationOutputWithContext(ctx context.Context) OriginEndpointHlsManifestConfigurationOutput {
	return o
}

// <p>A short string that's appended to the endpoint URL. The child manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default child manifest name, index_1. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.</p>
func (o OriginEndpointHlsManifestConfigurationOutput) ChildManifestName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OriginEndpointHlsManifestConfiguration) *string { return v.ChildManifestName }).(pulumi.StringPtrOutput)
}

func (o OriginEndpointHlsManifestConfigurationOutput) FilterConfiguration() OriginEndpointFilterConfigurationPtrOutput {
	return o.ApplyT(func(v OriginEndpointHlsManifestConfiguration) *OriginEndpointFilterConfiguration {
		return v.FilterConfiguration
	}).(OriginEndpointFilterConfigurationPtrOutput)
}

// <p>A short short string that's appended to the endpoint URL. The manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index. MediaPackage automatically inserts the format extension, such as .m3u8. You can't use the same manifest name if you use HLS manifest and low-latency HLS manifest. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.</p>
func (o OriginEndpointHlsManifestConfigurationOutput) ManifestName() pulumi.StringOutput {
	return o.ApplyT(func(v OriginEndpointHlsManifestConfiguration) string { return v.ManifestName }).(pulumi.StringOutput)
}

// <p>The total duration (in seconds) of the manifest's content.</p>
func (o OriginEndpointHlsManifestConfigurationOutput) ManifestWindowSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OriginEndpointHlsManifestConfiguration) *int { return v.ManifestWindowSeconds }).(pulumi.IntPtrOutput)
}

// <p>Inserts EXT-X-PROGRAM-DATE-TIME tags in the output manifest at the interval that you specify. If you don't enter an interval,
//
//	EXT-X-PROGRAM-DATE-TIME tags aren't included in the manifest.
//	The tags sync the stream to the wall clock so that viewers can seek to a specific time in the playback timeline on the player.</p>
//	<p>Irrespective of this parameter, if any ID3Timed metadata is in the HLS input, it is passed through to the HLS output.</p>
func (o OriginEndpointHlsManifestConfigurationOutput) ProgramDateTimeIntervalSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OriginEndpointHlsManifestConfiguration) *int { return v.ProgramDateTimeIntervalSeconds }).(pulumi.IntPtrOutput)
}

// THE SCTE-35 HLS configuration associated with the HLS manifest configuration.
func (o OriginEndpointHlsManifestConfigurationOutput) ScteHls() OriginEndpointScteHlsPtrOutput {
	return o.ApplyT(func(v OriginEndpointHlsManifestConfiguration) *OriginEndpointScteHls { return v.ScteHls }).(OriginEndpointScteHlsPtrOutput)
}

func (o OriginEndpointHlsManifestConfigurationOutput) StartTag() OriginEndpointStartTagPtrOutput {
	return o.ApplyT(func(v OriginEndpointHlsManifestConfiguration) *OriginEndpointStartTag { return v.StartTag }).(OriginEndpointStartTagPtrOutput)
}

// <p>The egress domain URL for stream delivery from MediaPackage.</p>
func (o OriginEndpointHlsManifestConfigurationOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OriginEndpointHlsManifestConfiguration) *string { return v.Url }).(pulumi.StringPtrOutput)
}

// <p>When enabled, MediaPackage URL-encodes the query string for API requests for HLS child manifests to comply with Amazon Web Services Signature Version 4 (SigV4) signature signing protocol.
//
//	For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_sigv.html">Amazon Web Services Signature Version 4 for API requests</a> in <i>Identity and Access Management User Guide</i>.</p>
func (o OriginEndpointHlsManifestConfigurationOutput) UrlEncodeChildManifest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OriginEndpointHlsManifestConfiguration) *bool { return v.UrlEncodeChildManifest }).(pulumi.BoolPtrOutput)
}

type OriginEndpointHlsManifestConfigurationArrayOutput struct{ *pulumi.OutputState }

func (OriginEndpointHlsManifestConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OriginEndpointHlsManifestConfiguration)(nil)).Elem()
}

func (o OriginEndpointHlsManifestConfigurationArrayOutput) ToOriginEndpointHlsManifestConfigurationArrayOutput() OriginEndpointHlsManifestConfigurationArrayOutput {
	return o
}

func (o OriginEndpointHlsManifestConfigurationArrayOutput) ToOriginEndpointHlsManifestConfigurationArrayOutputWithContext(ctx context.Context) OriginEndpointHlsManifestConfigurationArrayOutput {
	return o
}

func (o OriginEndpointHlsManifestConfigurationArrayOutput) Index(i pulumi.IntInput) OriginEndpointHlsManifestConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OriginEndpointHlsManifestConfiguration {
		return vs[0].([]OriginEndpointHlsManifestConfiguration)[vs[1].(int)]
	}).(OriginEndpointHlsManifestConfigurationOutput)
}

// <p>Retrieve the low-latency HTTP live streaming (HLS) manifest configuration.</p>
type OriginEndpointLowLatencyHlsManifestConfiguration struct {
	// <p>A short string that's appended to the endpoint URL. The child manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default child manifest name, index_1. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.</p>
	ChildManifestName   *string                            `pulumi:"childManifestName"`
	FilterConfiguration *OriginEndpointFilterConfiguration `pulumi:"filterConfiguration"`
	// <p>A short short string that's appended to the endpoint URL. The manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index. MediaPackage automatically inserts the format extension, such as .m3u8. You can't use the same manifest name if you use HLS manifest and low-latency HLS manifest. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.</p>
	ManifestName string `pulumi:"manifestName"`
	// <p>The total duration (in seconds) of the manifest's content.</p>
	ManifestWindowSeconds *int `pulumi:"manifestWindowSeconds"`
	// <p>Inserts EXT-X-PROGRAM-DATE-TIME tags in the output manifest at the interval that you specify. If you don't enter an interval,
	//          EXT-X-PROGRAM-DATE-TIME tags aren't included in the manifest.
	//          The tags sync the stream to the wall clock so that viewers can seek to a specific time in the playback timeline on the player.</p>
	//          <p>Irrespective of this parameter, if any ID3Timed metadata is in the HLS input, it is passed through to the HLS output.</p>
	ProgramDateTimeIntervalSeconds *int `pulumi:"programDateTimeIntervalSeconds"`
	// The SCTE-35 HLS configuration associated with the low-latency HLS (LL-HLS) manifest configuration of the origin endpoint.
	ScteHls  *OriginEndpointScteHls  `pulumi:"scteHls"`
	StartTag *OriginEndpointStartTag `pulumi:"startTag"`
	// <p>The egress domain URL for stream delivery from MediaPackage.</p>
	Url *string `pulumi:"url"`
	// <p>When enabled, MediaPackage URL-encodes the query string for API requests for LL-HLS child manifests to comply with Amazon Web Services Signature Version 4 (SigV4) signature signing protocol.
	//          For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_sigv.html">Amazon Web Services Signature Version 4 for API requests</a> in <i>Identity and Access Management User Guide</i>.</p>
	UrlEncodeChildManifest *bool `pulumi:"urlEncodeChildManifest"`
}

// OriginEndpointLowLatencyHlsManifestConfigurationInput is an input type that accepts OriginEndpointLowLatencyHlsManifestConfigurationArgs and OriginEndpointLowLatencyHlsManifestConfigurationOutput values.
// You can construct a concrete instance of `OriginEndpointLowLatencyHlsManifestConfigurationInput` via:
//
//	OriginEndpointLowLatencyHlsManifestConfigurationArgs{...}
type OriginEndpointLowLatencyHlsManifestConfigurationInput interface {
	pulumi.Input

	ToOriginEndpointLowLatencyHlsManifestConfigurationOutput() OriginEndpointLowLatencyHlsManifestConfigurationOutput
	ToOriginEndpointLowLatencyHlsManifestConfigurationOutputWithContext(context.Context) OriginEndpointLowLatencyHlsManifestConfigurationOutput
}

// <p>Retrieve the low-latency HTTP live streaming (HLS) manifest configuration.</p>
type OriginEndpointLowLatencyHlsManifestConfigurationArgs struct {
	// <p>A short string that's appended to the endpoint URL. The child manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default child manifest name, index_1. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.</p>
	ChildManifestName   pulumi.StringPtrInput                     `pulumi:"childManifestName"`
	FilterConfiguration OriginEndpointFilterConfigurationPtrInput `pulumi:"filterConfiguration"`
	// <p>A short short string that's appended to the endpoint URL. The manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index. MediaPackage automatically inserts the format extension, such as .m3u8. You can't use the same manifest name if you use HLS manifest and low-latency HLS manifest. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.</p>
	ManifestName pulumi.StringInput `pulumi:"manifestName"`
	// <p>The total duration (in seconds) of the manifest's content.</p>
	ManifestWindowSeconds pulumi.IntPtrInput `pulumi:"manifestWindowSeconds"`
	// <p>Inserts EXT-X-PROGRAM-DATE-TIME tags in the output manifest at the interval that you specify. If you don't enter an interval,
	//          EXT-X-PROGRAM-DATE-TIME tags aren't included in the manifest.
	//          The tags sync the stream to the wall clock so that viewers can seek to a specific time in the playback timeline on the player.</p>
	//          <p>Irrespective of this parameter, if any ID3Timed metadata is in the HLS input, it is passed through to the HLS output.</p>
	ProgramDateTimeIntervalSeconds pulumi.IntPtrInput `pulumi:"programDateTimeIntervalSeconds"`
	// The SCTE-35 HLS configuration associated with the low-latency HLS (LL-HLS) manifest configuration of the origin endpoint.
	ScteHls  OriginEndpointScteHlsPtrInput  `pulumi:"scteHls"`
	StartTag OriginEndpointStartTagPtrInput `pulumi:"startTag"`
	// <p>The egress domain URL for stream delivery from MediaPackage.</p>
	Url pulumi.StringPtrInput `pulumi:"url"`
	// <p>When enabled, MediaPackage URL-encodes the query string for API requests for LL-HLS child manifests to comply with Amazon Web Services Signature Version 4 (SigV4) signature signing protocol.
	//          For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_sigv.html">Amazon Web Services Signature Version 4 for API requests</a> in <i>Identity and Access Management User Guide</i>.</p>
	UrlEncodeChildManifest pulumi.BoolPtrInput `pulumi:"urlEncodeChildManifest"`
}

func (OriginEndpointLowLatencyHlsManifestConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginEndpointLowLatencyHlsManifestConfiguration)(nil)).Elem()
}

func (i OriginEndpointLowLatencyHlsManifestConfigurationArgs) ToOriginEndpointLowLatencyHlsManifestConfigurationOutput() OriginEndpointLowLatencyHlsManifestConfigurationOutput {
	return i.ToOriginEndpointLowLatencyHlsManifestConfigurationOutputWithContext(context.Background())
}

func (i OriginEndpointLowLatencyHlsManifestConfigurationArgs) ToOriginEndpointLowLatencyHlsManifestConfigurationOutputWithContext(ctx context.Context) OriginEndpointLowLatencyHlsManifestConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointLowLatencyHlsManifestConfigurationOutput)
}

// OriginEndpointLowLatencyHlsManifestConfigurationArrayInput is an input type that accepts OriginEndpointLowLatencyHlsManifestConfigurationArray and OriginEndpointLowLatencyHlsManifestConfigurationArrayOutput values.
// You can construct a concrete instance of `OriginEndpointLowLatencyHlsManifestConfigurationArrayInput` via:
//
//	OriginEndpointLowLatencyHlsManifestConfigurationArray{ OriginEndpointLowLatencyHlsManifestConfigurationArgs{...} }
type OriginEndpointLowLatencyHlsManifestConfigurationArrayInput interface {
	pulumi.Input

	ToOriginEndpointLowLatencyHlsManifestConfigurationArrayOutput() OriginEndpointLowLatencyHlsManifestConfigurationArrayOutput
	ToOriginEndpointLowLatencyHlsManifestConfigurationArrayOutputWithContext(context.Context) OriginEndpointLowLatencyHlsManifestConfigurationArrayOutput
}

type OriginEndpointLowLatencyHlsManifestConfigurationArray []OriginEndpointLowLatencyHlsManifestConfigurationInput

func (OriginEndpointLowLatencyHlsManifestConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OriginEndpointLowLatencyHlsManifestConfiguration)(nil)).Elem()
}

func (i OriginEndpointLowLatencyHlsManifestConfigurationArray) ToOriginEndpointLowLatencyHlsManifestConfigurationArrayOutput() OriginEndpointLowLatencyHlsManifestConfigurationArrayOutput {
	return i.ToOriginEndpointLowLatencyHlsManifestConfigurationArrayOutputWithContext(context.Background())
}

func (i OriginEndpointLowLatencyHlsManifestConfigurationArray) ToOriginEndpointLowLatencyHlsManifestConfigurationArrayOutputWithContext(ctx context.Context) OriginEndpointLowLatencyHlsManifestConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointLowLatencyHlsManifestConfigurationArrayOutput)
}

// <p>Retrieve the low-latency HTTP live streaming (HLS) manifest configuration.</p>
type OriginEndpointLowLatencyHlsManifestConfigurationOutput struct{ *pulumi.OutputState }

func (OriginEndpointLowLatencyHlsManifestConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginEndpointLowLatencyHlsManifestConfiguration)(nil)).Elem()
}

func (o OriginEndpointLowLatencyHlsManifestConfigurationOutput) ToOriginEndpointLowLatencyHlsManifestConfigurationOutput() OriginEndpointLowLatencyHlsManifestConfigurationOutput {
	return o
}

func (o OriginEndpointLowLatencyHlsManifestConfigurationOutput) ToOriginEndpointLowLatencyHlsManifestConfigurationOutputWithContext(ctx context.Context) OriginEndpointLowLatencyHlsManifestConfigurationOutput {
	return o
}

// <p>A short string that's appended to the endpoint URL. The child manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default child manifest name, index_1. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.</p>
func (o OriginEndpointLowLatencyHlsManifestConfigurationOutput) ChildManifestName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OriginEndpointLowLatencyHlsManifestConfiguration) *string { return v.ChildManifestName }).(pulumi.StringPtrOutput)
}

func (o OriginEndpointLowLatencyHlsManifestConfigurationOutput) FilterConfiguration() OriginEndpointFilterConfigurationPtrOutput {
	return o.ApplyT(func(v OriginEndpointLowLatencyHlsManifestConfiguration) *OriginEndpointFilterConfiguration {
		return v.FilterConfiguration
	}).(OriginEndpointFilterConfigurationPtrOutput)
}

// <p>A short short string that's appended to the endpoint URL. The manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index. MediaPackage automatically inserts the format extension, such as .m3u8. You can't use the same manifest name if you use HLS manifest and low-latency HLS manifest. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.</p>
func (o OriginEndpointLowLatencyHlsManifestConfigurationOutput) ManifestName() pulumi.StringOutput {
	return o.ApplyT(func(v OriginEndpointLowLatencyHlsManifestConfiguration) string { return v.ManifestName }).(pulumi.StringOutput)
}

// <p>The total duration (in seconds) of the manifest's content.</p>
func (o OriginEndpointLowLatencyHlsManifestConfigurationOutput) ManifestWindowSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OriginEndpointLowLatencyHlsManifestConfiguration) *int { return v.ManifestWindowSeconds }).(pulumi.IntPtrOutput)
}

// <p>Inserts EXT-X-PROGRAM-DATE-TIME tags in the output manifest at the interval that you specify. If you don't enter an interval,
//
//	EXT-X-PROGRAM-DATE-TIME tags aren't included in the manifest.
//	The tags sync the stream to the wall clock so that viewers can seek to a specific time in the playback timeline on the player.</p>
//	<p>Irrespective of this parameter, if any ID3Timed metadata is in the HLS input, it is passed through to the HLS output.</p>
func (o OriginEndpointLowLatencyHlsManifestConfigurationOutput) ProgramDateTimeIntervalSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OriginEndpointLowLatencyHlsManifestConfiguration) *int { return v.ProgramDateTimeIntervalSeconds }).(pulumi.IntPtrOutput)
}

// The SCTE-35 HLS configuration associated with the low-latency HLS (LL-HLS) manifest configuration of the origin endpoint.
func (o OriginEndpointLowLatencyHlsManifestConfigurationOutput) ScteHls() OriginEndpointScteHlsPtrOutput {
	return o.ApplyT(func(v OriginEndpointLowLatencyHlsManifestConfiguration) *OriginEndpointScteHls { return v.ScteHls }).(OriginEndpointScteHlsPtrOutput)
}

func (o OriginEndpointLowLatencyHlsManifestConfigurationOutput) StartTag() OriginEndpointStartTagPtrOutput {
	return o.ApplyT(func(v OriginEndpointLowLatencyHlsManifestConfiguration) *OriginEndpointStartTag { return v.StartTag }).(OriginEndpointStartTagPtrOutput)
}

// <p>The egress domain URL for stream delivery from MediaPackage.</p>
func (o OriginEndpointLowLatencyHlsManifestConfigurationOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OriginEndpointLowLatencyHlsManifestConfiguration) *string { return v.Url }).(pulumi.StringPtrOutput)
}

// <p>When enabled, MediaPackage URL-encodes the query string for API requests for LL-HLS child manifests to comply with Amazon Web Services Signature Version 4 (SigV4) signature signing protocol.
//
//	For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_sigv.html">Amazon Web Services Signature Version 4 for API requests</a> in <i>Identity and Access Management User Guide</i>.</p>
func (o OriginEndpointLowLatencyHlsManifestConfigurationOutput) UrlEncodeChildManifest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OriginEndpointLowLatencyHlsManifestConfiguration) *bool { return v.UrlEncodeChildManifest }).(pulumi.BoolPtrOutput)
}

type OriginEndpointLowLatencyHlsManifestConfigurationArrayOutput struct{ *pulumi.OutputState }

func (OriginEndpointLowLatencyHlsManifestConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OriginEndpointLowLatencyHlsManifestConfiguration)(nil)).Elem()
}

func (o OriginEndpointLowLatencyHlsManifestConfigurationArrayOutput) ToOriginEndpointLowLatencyHlsManifestConfigurationArrayOutput() OriginEndpointLowLatencyHlsManifestConfigurationArrayOutput {
	return o
}

func (o OriginEndpointLowLatencyHlsManifestConfigurationArrayOutput) ToOriginEndpointLowLatencyHlsManifestConfigurationArrayOutputWithContext(ctx context.Context) OriginEndpointLowLatencyHlsManifestConfigurationArrayOutput {
	return o
}

func (o OriginEndpointLowLatencyHlsManifestConfigurationArrayOutput) Index(i pulumi.IntInput) OriginEndpointLowLatencyHlsManifestConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OriginEndpointLowLatencyHlsManifestConfiguration {
		return vs[0].([]OriginEndpointLowLatencyHlsManifestConfiguration)[vs[1].(int)]
	}).(OriginEndpointLowLatencyHlsManifestConfigurationOutput)
}

// <p>The SCTE configuration.</p>
type OriginEndpointScte struct {
	// <p>The SCTE-35 message types that you want to be treated as ad markers in the output.</p>
	ScteFilter []OriginEndpointScteFilter `pulumi:"scteFilter"`
}

// OriginEndpointScteInput is an input type that accepts OriginEndpointScteArgs and OriginEndpointScteOutput values.
// You can construct a concrete instance of `OriginEndpointScteInput` via:
//
//	OriginEndpointScteArgs{...}
type OriginEndpointScteInput interface {
	pulumi.Input

	ToOriginEndpointScteOutput() OriginEndpointScteOutput
	ToOriginEndpointScteOutputWithContext(context.Context) OriginEndpointScteOutput
}

// <p>The SCTE configuration.</p>
type OriginEndpointScteArgs struct {
	// <p>The SCTE-35 message types that you want to be treated as ad markers in the output.</p>
	ScteFilter OriginEndpointScteFilterArrayInput `pulumi:"scteFilter"`
}

func (OriginEndpointScteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginEndpointScte)(nil)).Elem()
}

func (i OriginEndpointScteArgs) ToOriginEndpointScteOutput() OriginEndpointScteOutput {
	return i.ToOriginEndpointScteOutputWithContext(context.Background())
}

func (i OriginEndpointScteArgs) ToOriginEndpointScteOutputWithContext(ctx context.Context) OriginEndpointScteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointScteOutput)
}

func (i OriginEndpointScteArgs) ToOriginEndpointSctePtrOutput() OriginEndpointSctePtrOutput {
	return i.ToOriginEndpointSctePtrOutputWithContext(context.Background())
}

func (i OriginEndpointScteArgs) ToOriginEndpointSctePtrOutputWithContext(ctx context.Context) OriginEndpointSctePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointScteOutput).ToOriginEndpointSctePtrOutputWithContext(ctx)
}

// OriginEndpointSctePtrInput is an input type that accepts OriginEndpointScteArgs, OriginEndpointSctePtr and OriginEndpointSctePtrOutput values.
// You can construct a concrete instance of `OriginEndpointSctePtrInput` via:
//
//	        OriginEndpointScteArgs{...}
//
//	or:
//
//	        nil
type OriginEndpointSctePtrInput interface {
	pulumi.Input

	ToOriginEndpointSctePtrOutput() OriginEndpointSctePtrOutput
	ToOriginEndpointSctePtrOutputWithContext(context.Context) OriginEndpointSctePtrOutput
}

type originEndpointSctePtrType OriginEndpointScteArgs

func OriginEndpointSctePtr(v *OriginEndpointScteArgs) OriginEndpointSctePtrInput {
	return (*originEndpointSctePtrType)(v)
}

func (*originEndpointSctePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OriginEndpointScte)(nil)).Elem()
}

func (i *originEndpointSctePtrType) ToOriginEndpointSctePtrOutput() OriginEndpointSctePtrOutput {
	return i.ToOriginEndpointSctePtrOutputWithContext(context.Background())
}

func (i *originEndpointSctePtrType) ToOriginEndpointSctePtrOutputWithContext(ctx context.Context) OriginEndpointSctePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointSctePtrOutput)
}

// <p>The SCTE configuration.</p>
type OriginEndpointScteOutput struct{ *pulumi.OutputState }

func (OriginEndpointScteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginEndpointScte)(nil)).Elem()
}

func (o OriginEndpointScteOutput) ToOriginEndpointScteOutput() OriginEndpointScteOutput {
	return o
}

func (o OriginEndpointScteOutput) ToOriginEndpointScteOutputWithContext(ctx context.Context) OriginEndpointScteOutput {
	return o
}

func (o OriginEndpointScteOutput) ToOriginEndpointSctePtrOutput() OriginEndpointSctePtrOutput {
	return o.ToOriginEndpointSctePtrOutputWithContext(context.Background())
}

func (o OriginEndpointScteOutput) ToOriginEndpointSctePtrOutputWithContext(ctx context.Context) OriginEndpointSctePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OriginEndpointScte) *OriginEndpointScte {
		return &v
	}).(OriginEndpointSctePtrOutput)
}

// <p>The SCTE-35 message types that you want to be treated as ad markers in the output.</p>
func (o OriginEndpointScteOutput) ScteFilter() OriginEndpointScteFilterArrayOutput {
	return o.ApplyT(func(v OriginEndpointScte) []OriginEndpointScteFilter { return v.ScteFilter }).(OriginEndpointScteFilterArrayOutput)
}

type OriginEndpointSctePtrOutput struct{ *pulumi.OutputState }

func (OriginEndpointSctePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OriginEndpointScte)(nil)).Elem()
}

func (o OriginEndpointSctePtrOutput) ToOriginEndpointSctePtrOutput() OriginEndpointSctePtrOutput {
	return o
}

func (o OriginEndpointSctePtrOutput) ToOriginEndpointSctePtrOutputWithContext(ctx context.Context) OriginEndpointSctePtrOutput {
	return o
}

func (o OriginEndpointSctePtrOutput) Elem() OriginEndpointScteOutput {
	return o.ApplyT(func(v *OriginEndpointScte) OriginEndpointScte {
		if v != nil {
			return *v
		}
		var ret OriginEndpointScte
		return ret
	}).(OriginEndpointScteOutput)
}

// <p>The SCTE-35 message types that you want to be treated as ad markers in the output.</p>
func (o OriginEndpointSctePtrOutput) ScteFilter() OriginEndpointScteFilterArrayOutput {
	return o.ApplyT(func(v *OriginEndpointScte) []OriginEndpointScteFilter {
		if v == nil {
			return nil
		}
		return v.ScteFilter
	}).(OriginEndpointScteFilterArrayOutput)
}

// <p>The SCTE configuration.</p>
type OriginEndpointScteDash struct {
	// Choose how ad markers are included in the packaged content. If you include ad markers in the content stream in your upstream encoders, then you need to inform MediaPackage what to do with the ad markers in the output.
	//
	// Value description:
	//
	// - `Binary` - The SCTE-35 marker is expressed as a hex-string (Base64 string) rather than full XML.
	// - `XML` - The SCTE marker is expressed fully in XML.
	AdMarkerDash *OriginEndpointAdMarkerDash `pulumi:"adMarkerDash"`
}

// OriginEndpointScteDashInput is an input type that accepts OriginEndpointScteDashArgs and OriginEndpointScteDashOutput values.
// You can construct a concrete instance of `OriginEndpointScteDashInput` via:
//
//	OriginEndpointScteDashArgs{...}
type OriginEndpointScteDashInput interface {
	pulumi.Input

	ToOriginEndpointScteDashOutput() OriginEndpointScteDashOutput
	ToOriginEndpointScteDashOutputWithContext(context.Context) OriginEndpointScteDashOutput
}

// <p>The SCTE configuration.</p>
type OriginEndpointScteDashArgs struct {
	// Choose how ad markers are included in the packaged content. If you include ad markers in the content stream in your upstream encoders, then you need to inform MediaPackage what to do with the ad markers in the output.
	//
	// Value description:
	//
	// - `Binary` - The SCTE-35 marker is expressed as a hex-string (Base64 string) rather than full XML.
	// - `XML` - The SCTE marker is expressed fully in XML.
	AdMarkerDash OriginEndpointAdMarkerDashPtrInput `pulumi:"adMarkerDash"`
}

func (OriginEndpointScteDashArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginEndpointScteDash)(nil)).Elem()
}

func (i OriginEndpointScteDashArgs) ToOriginEndpointScteDashOutput() OriginEndpointScteDashOutput {
	return i.ToOriginEndpointScteDashOutputWithContext(context.Background())
}

func (i OriginEndpointScteDashArgs) ToOriginEndpointScteDashOutputWithContext(ctx context.Context) OriginEndpointScteDashOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointScteDashOutput)
}

func (i OriginEndpointScteDashArgs) ToOriginEndpointScteDashPtrOutput() OriginEndpointScteDashPtrOutput {
	return i.ToOriginEndpointScteDashPtrOutputWithContext(context.Background())
}

func (i OriginEndpointScteDashArgs) ToOriginEndpointScteDashPtrOutputWithContext(ctx context.Context) OriginEndpointScteDashPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointScteDashOutput).ToOriginEndpointScteDashPtrOutputWithContext(ctx)
}

// OriginEndpointScteDashPtrInput is an input type that accepts OriginEndpointScteDashArgs, OriginEndpointScteDashPtr and OriginEndpointScteDashPtrOutput values.
// You can construct a concrete instance of `OriginEndpointScteDashPtrInput` via:
//
//	        OriginEndpointScteDashArgs{...}
//
//	or:
//
//	        nil
type OriginEndpointScteDashPtrInput interface {
	pulumi.Input

	ToOriginEndpointScteDashPtrOutput() OriginEndpointScteDashPtrOutput
	ToOriginEndpointScteDashPtrOutputWithContext(context.Context) OriginEndpointScteDashPtrOutput
}

type originEndpointScteDashPtrType OriginEndpointScteDashArgs

func OriginEndpointScteDashPtr(v *OriginEndpointScteDashArgs) OriginEndpointScteDashPtrInput {
	return (*originEndpointScteDashPtrType)(v)
}

func (*originEndpointScteDashPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OriginEndpointScteDash)(nil)).Elem()
}

func (i *originEndpointScteDashPtrType) ToOriginEndpointScteDashPtrOutput() OriginEndpointScteDashPtrOutput {
	return i.ToOriginEndpointScteDashPtrOutputWithContext(context.Background())
}

func (i *originEndpointScteDashPtrType) ToOriginEndpointScteDashPtrOutputWithContext(ctx context.Context) OriginEndpointScteDashPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointScteDashPtrOutput)
}

// <p>The SCTE configuration.</p>
type OriginEndpointScteDashOutput struct{ *pulumi.OutputState }

func (OriginEndpointScteDashOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginEndpointScteDash)(nil)).Elem()
}

func (o OriginEndpointScteDashOutput) ToOriginEndpointScteDashOutput() OriginEndpointScteDashOutput {
	return o
}

func (o OriginEndpointScteDashOutput) ToOriginEndpointScteDashOutputWithContext(ctx context.Context) OriginEndpointScteDashOutput {
	return o
}

func (o OriginEndpointScteDashOutput) ToOriginEndpointScteDashPtrOutput() OriginEndpointScteDashPtrOutput {
	return o.ToOriginEndpointScteDashPtrOutputWithContext(context.Background())
}

func (o OriginEndpointScteDashOutput) ToOriginEndpointScteDashPtrOutputWithContext(ctx context.Context) OriginEndpointScteDashPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OriginEndpointScteDash) *OriginEndpointScteDash {
		return &v
	}).(OriginEndpointScteDashPtrOutput)
}

// Choose how ad markers are included in the packaged content. If you include ad markers in the content stream in your upstream encoders, then you need to inform MediaPackage what to do with the ad markers in the output.
//
// Value description:
//
// - `Binary` - The SCTE-35 marker is expressed as a hex-string (Base64 string) rather than full XML.
// - `XML` - The SCTE marker is expressed fully in XML.
func (o OriginEndpointScteDashOutput) AdMarkerDash() OriginEndpointAdMarkerDashPtrOutput {
	return o.ApplyT(func(v OriginEndpointScteDash) *OriginEndpointAdMarkerDash { return v.AdMarkerDash }).(OriginEndpointAdMarkerDashPtrOutput)
}

type OriginEndpointScteDashPtrOutput struct{ *pulumi.OutputState }

func (OriginEndpointScteDashPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OriginEndpointScteDash)(nil)).Elem()
}

func (o OriginEndpointScteDashPtrOutput) ToOriginEndpointScteDashPtrOutput() OriginEndpointScteDashPtrOutput {
	return o
}

func (o OriginEndpointScteDashPtrOutput) ToOriginEndpointScteDashPtrOutputWithContext(ctx context.Context) OriginEndpointScteDashPtrOutput {
	return o
}

func (o OriginEndpointScteDashPtrOutput) Elem() OriginEndpointScteDashOutput {
	return o.ApplyT(func(v *OriginEndpointScteDash) OriginEndpointScteDash {
		if v != nil {
			return *v
		}
		var ret OriginEndpointScteDash
		return ret
	}).(OriginEndpointScteDashOutput)
}

// Choose how ad markers are included in the packaged content. If you include ad markers in the content stream in your upstream encoders, then you need to inform MediaPackage what to do with the ad markers in the output.
//
// Value description:
//
// - `Binary` - The SCTE-35 marker is expressed as a hex-string (Base64 string) rather than full XML.
// - `XML` - The SCTE marker is expressed fully in XML.
func (o OriginEndpointScteDashPtrOutput) AdMarkerDash() OriginEndpointAdMarkerDashPtrOutput {
	return o.ApplyT(func(v *OriginEndpointScteDash) *OriginEndpointAdMarkerDash {
		if v == nil {
			return nil
		}
		return v.AdMarkerDash
	}).(OriginEndpointAdMarkerDashPtrOutput)
}

// <p>The SCTE configuration.</p>
type OriginEndpointScteHls struct {
	// The SCTE-35 HLS ad-marker configuration.
	AdMarkerHls *OriginEndpointAdMarkerHls `pulumi:"adMarkerHls"`
}

// OriginEndpointScteHlsInput is an input type that accepts OriginEndpointScteHlsArgs and OriginEndpointScteHlsOutput values.
// You can construct a concrete instance of `OriginEndpointScteHlsInput` via:
//
//	OriginEndpointScteHlsArgs{...}
type OriginEndpointScteHlsInput interface {
	pulumi.Input

	ToOriginEndpointScteHlsOutput() OriginEndpointScteHlsOutput
	ToOriginEndpointScteHlsOutputWithContext(context.Context) OriginEndpointScteHlsOutput
}

// <p>The SCTE configuration.</p>
type OriginEndpointScteHlsArgs struct {
	// The SCTE-35 HLS ad-marker configuration.
	AdMarkerHls OriginEndpointAdMarkerHlsPtrInput `pulumi:"adMarkerHls"`
}

func (OriginEndpointScteHlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginEndpointScteHls)(nil)).Elem()
}

func (i OriginEndpointScteHlsArgs) ToOriginEndpointScteHlsOutput() OriginEndpointScteHlsOutput {
	return i.ToOriginEndpointScteHlsOutputWithContext(context.Background())
}

func (i OriginEndpointScteHlsArgs) ToOriginEndpointScteHlsOutputWithContext(ctx context.Context) OriginEndpointScteHlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointScteHlsOutput)
}

func (i OriginEndpointScteHlsArgs) ToOriginEndpointScteHlsPtrOutput() OriginEndpointScteHlsPtrOutput {
	return i.ToOriginEndpointScteHlsPtrOutputWithContext(context.Background())
}

func (i OriginEndpointScteHlsArgs) ToOriginEndpointScteHlsPtrOutputWithContext(ctx context.Context) OriginEndpointScteHlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointScteHlsOutput).ToOriginEndpointScteHlsPtrOutputWithContext(ctx)
}

// OriginEndpointScteHlsPtrInput is an input type that accepts OriginEndpointScteHlsArgs, OriginEndpointScteHlsPtr and OriginEndpointScteHlsPtrOutput values.
// You can construct a concrete instance of `OriginEndpointScteHlsPtrInput` via:
//
//	        OriginEndpointScteHlsArgs{...}
//
//	or:
//
//	        nil
type OriginEndpointScteHlsPtrInput interface {
	pulumi.Input

	ToOriginEndpointScteHlsPtrOutput() OriginEndpointScteHlsPtrOutput
	ToOriginEndpointScteHlsPtrOutputWithContext(context.Context) OriginEndpointScteHlsPtrOutput
}

type originEndpointScteHlsPtrType OriginEndpointScteHlsArgs

func OriginEndpointScteHlsPtr(v *OriginEndpointScteHlsArgs) OriginEndpointScteHlsPtrInput {
	return (*originEndpointScteHlsPtrType)(v)
}

func (*originEndpointScteHlsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OriginEndpointScteHls)(nil)).Elem()
}

func (i *originEndpointScteHlsPtrType) ToOriginEndpointScteHlsPtrOutput() OriginEndpointScteHlsPtrOutput {
	return i.ToOriginEndpointScteHlsPtrOutputWithContext(context.Background())
}

func (i *originEndpointScteHlsPtrType) ToOriginEndpointScteHlsPtrOutputWithContext(ctx context.Context) OriginEndpointScteHlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointScteHlsPtrOutput)
}

// <p>The SCTE configuration.</p>
type OriginEndpointScteHlsOutput struct{ *pulumi.OutputState }

func (OriginEndpointScteHlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginEndpointScteHls)(nil)).Elem()
}

func (o OriginEndpointScteHlsOutput) ToOriginEndpointScteHlsOutput() OriginEndpointScteHlsOutput {
	return o
}

func (o OriginEndpointScteHlsOutput) ToOriginEndpointScteHlsOutputWithContext(ctx context.Context) OriginEndpointScteHlsOutput {
	return o
}

func (o OriginEndpointScteHlsOutput) ToOriginEndpointScteHlsPtrOutput() OriginEndpointScteHlsPtrOutput {
	return o.ToOriginEndpointScteHlsPtrOutputWithContext(context.Background())
}

func (o OriginEndpointScteHlsOutput) ToOriginEndpointScteHlsPtrOutputWithContext(ctx context.Context) OriginEndpointScteHlsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OriginEndpointScteHls) *OriginEndpointScteHls {
		return &v
	}).(OriginEndpointScteHlsPtrOutput)
}

// The SCTE-35 HLS ad-marker configuration.
func (o OriginEndpointScteHlsOutput) AdMarkerHls() OriginEndpointAdMarkerHlsPtrOutput {
	return o.ApplyT(func(v OriginEndpointScteHls) *OriginEndpointAdMarkerHls { return v.AdMarkerHls }).(OriginEndpointAdMarkerHlsPtrOutput)
}

type OriginEndpointScteHlsPtrOutput struct{ *pulumi.OutputState }

func (OriginEndpointScteHlsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OriginEndpointScteHls)(nil)).Elem()
}

func (o OriginEndpointScteHlsPtrOutput) ToOriginEndpointScteHlsPtrOutput() OriginEndpointScteHlsPtrOutput {
	return o
}

func (o OriginEndpointScteHlsPtrOutput) ToOriginEndpointScteHlsPtrOutputWithContext(ctx context.Context) OriginEndpointScteHlsPtrOutput {
	return o
}

func (o OriginEndpointScteHlsPtrOutput) Elem() OriginEndpointScteHlsOutput {
	return o.ApplyT(func(v *OriginEndpointScteHls) OriginEndpointScteHls {
		if v != nil {
			return *v
		}
		var ret OriginEndpointScteHls
		return ret
	}).(OriginEndpointScteHlsOutput)
}

// The SCTE-35 HLS ad-marker configuration.
func (o OriginEndpointScteHlsPtrOutput) AdMarkerHls() OriginEndpointAdMarkerHlsPtrOutput {
	return o.ApplyT(func(v *OriginEndpointScteHls) *OriginEndpointAdMarkerHls {
		if v == nil {
			return nil
		}
		return v.AdMarkerHls
	}).(OriginEndpointAdMarkerHlsPtrOutput)
}

// <p>The segment configuration, including the segment name, duration, and other configuration values.</p>
type OriginEndpointSegment struct {
	// Whether to use encryption for the segment.
	Encryption *OriginEndpointEncryption `pulumi:"encryption"`
	// <p>When selected, the stream set includes an additional I-frame only stream, along with the other tracks. If false, this extra stream is not included. MediaPackage generates an I-frame only stream from the first rendition in the manifest. The service inserts EXT-I-FRAMES-ONLY tags in the output manifest, and then generates and includes an I-frames only playlist in the stream. This playlist permits player functionality like fast forward and rewind.</p>
	IncludeIframeOnlyStreams *bool `pulumi:"includeIframeOnlyStreams"`
	// The SCTE-35 configuration associated with the segment.
	Scte *OriginEndpointScte `pulumi:"scte"`
	// <p>The duration (in seconds) of each segment. Enter a value equal to, or a multiple of, the input segment duration. If the value that you enter is different from the input segment duration, MediaPackage rounds segments to the nearest multiple of the input segment duration.</p>
	SegmentDurationSeconds *int `pulumi:"segmentDurationSeconds"`
	// <p>The name that describes the segment. The name is the base name of the segment used in all content manifests inside of the endpoint. You can't use spaces in the name.</p>
	SegmentName *string `pulumi:"segmentName"`
	// <p>By default, MediaPackage excludes all digital video broadcasting (DVB) subtitles from the output. When selected, MediaPackage passes through DVB subtitles into the output.</p>
	TsIncludeDvbSubtitles *bool `pulumi:"tsIncludeDvbSubtitles"`
	// <p>When selected, MediaPackage bundles all audio tracks in a rendition group. All other tracks in the stream can be used with any audio rendition from the group.</p>
	TsUseAudioRenditionGroup *bool `pulumi:"tsUseAudioRenditionGroup"`
}

// OriginEndpointSegmentInput is an input type that accepts OriginEndpointSegmentArgs and OriginEndpointSegmentOutput values.
// You can construct a concrete instance of `OriginEndpointSegmentInput` via:
//
//	OriginEndpointSegmentArgs{...}
type OriginEndpointSegmentInput interface {
	pulumi.Input

	ToOriginEndpointSegmentOutput() OriginEndpointSegmentOutput
	ToOriginEndpointSegmentOutputWithContext(context.Context) OriginEndpointSegmentOutput
}

// <p>The segment configuration, including the segment name, duration, and other configuration values.</p>
type OriginEndpointSegmentArgs struct {
	// Whether to use encryption for the segment.
	Encryption OriginEndpointEncryptionPtrInput `pulumi:"encryption"`
	// <p>When selected, the stream set includes an additional I-frame only stream, along with the other tracks. If false, this extra stream is not included. MediaPackage generates an I-frame only stream from the first rendition in the manifest. The service inserts EXT-I-FRAMES-ONLY tags in the output manifest, and then generates and includes an I-frames only playlist in the stream. This playlist permits player functionality like fast forward and rewind.</p>
	IncludeIframeOnlyStreams pulumi.BoolPtrInput `pulumi:"includeIframeOnlyStreams"`
	// The SCTE-35 configuration associated with the segment.
	Scte OriginEndpointSctePtrInput `pulumi:"scte"`
	// <p>The duration (in seconds) of each segment. Enter a value equal to, or a multiple of, the input segment duration. If the value that you enter is different from the input segment duration, MediaPackage rounds segments to the nearest multiple of the input segment duration.</p>
	SegmentDurationSeconds pulumi.IntPtrInput `pulumi:"segmentDurationSeconds"`
	// <p>The name that describes the segment. The name is the base name of the segment used in all content manifests inside of the endpoint. You can't use spaces in the name.</p>
	SegmentName pulumi.StringPtrInput `pulumi:"segmentName"`
	// <p>By default, MediaPackage excludes all digital video broadcasting (DVB) subtitles from the output. When selected, MediaPackage passes through DVB subtitles into the output.</p>
	TsIncludeDvbSubtitles pulumi.BoolPtrInput `pulumi:"tsIncludeDvbSubtitles"`
	// <p>When selected, MediaPackage bundles all audio tracks in a rendition group. All other tracks in the stream can be used with any audio rendition from the group.</p>
	TsUseAudioRenditionGroup pulumi.BoolPtrInput `pulumi:"tsUseAudioRenditionGroup"`
}

func (OriginEndpointSegmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginEndpointSegment)(nil)).Elem()
}

func (i OriginEndpointSegmentArgs) ToOriginEndpointSegmentOutput() OriginEndpointSegmentOutput {
	return i.ToOriginEndpointSegmentOutputWithContext(context.Background())
}

func (i OriginEndpointSegmentArgs) ToOriginEndpointSegmentOutputWithContext(ctx context.Context) OriginEndpointSegmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointSegmentOutput)
}

func (i OriginEndpointSegmentArgs) ToOriginEndpointSegmentPtrOutput() OriginEndpointSegmentPtrOutput {
	return i.ToOriginEndpointSegmentPtrOutputWithContext(context.Background())
}

func (i OriginEndpointSegmentArgs) ToOriginEndpointSegmentPtrOutputWithContext(ctx context.Context) OriginEndpointSegmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointSegmentOutput).ToOriginEndpointSegmentPtrOutputWithContext(ctx)
}

// OriginEndpointSegmentPtrInput is an input type that accepts OriginEndpointSegmentArgs, OriginEndpointSegmentPtr and OriginEndpointSegmentPtrOutput values.
// You can construct a concrete instance of `OriginEndpointSegmentPtrInput` via:
//
//	        OriginEndpointSegmentArgs{...}
//
//	or:
//
//	        nil
type OriginEndpointSegmentPtrInput interface {
	pulumi.Input

	ToOriginEndpointSegmentPtrOutput() OriginEndpointSegmentPtrOutput
	ToOriginEndpointSegmentPtrOutputWithContext(context.Context) OriginEndpointSegmentPtrOutput
}

type originEndpointSegmentPtrType OriginEndpointSegmentArgs

func OriginEndpointSegmentPtr(v *OriginEndpointSegmentArgs) OriginEndpointSegmentPtrInput {
	return (*originEndpointSegmentPtrType)(v)
}

func (*originEndpointSegmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OriginEndpointSegment)(nil)).Elem()
}

func (i *originEndpointSegmentPtrType) ToOriginEndpointSegmentPtrOutput() OriginEndpointSegmentPtrOutput {
	return i.ToOriginEndpointSegmentPtrOutputWithContext(context.Background())
}

func (i *originEndpointSegmentPtrType) ToOriginEndpointSegmentPtrOutputWithContext(ctx context.Context) OriginEndpointSegmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointSegmentPtrOutput)
}

// <p>The segment configuration, including the segment name, duration, and other configuration values.</p>
type OriginEndpointSegmentOutput struct{ *pulumi.OutputState }

func (OriginEndpointSegmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginEndpointSegment)(nil)).Elem()
}

func (o OriginEndpointSegmentOutput) ToOriginEndpointSegmentOutput() OriginEndpointSegmentOutput {
	return o
}

func (o OriginEndpointSegmentOutput) ToOriginEndpointSegmentOutputWithContext(ctx context.Context) OriginEndpointSegmentOutput {
	return o
}

func (o OriginEndpointSegmentOutput) ToOriginEndpointSegmentPtrOutput() OriginEndpointSegmentPtrOutput {
	return o.ToOriginEndpointSegmentPtrOutputWithContext(context.Background())
}

func (o OriginEndpointSegmentOutput) ToOriginEndpointSegmentPtrOutputWithContext(ctx context.Context) OriginEndpointSegmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OriginEndpointSegment) *OriginEndpointSegment {
		return &v
	}).(OriginEndpointSegmentPtrOutput)
}

// Whether to use encryption for the segment.
func (o OriginEndpointSegmentOutput) Encryption() OriginEndpointEncryptionPtrOutput {
	return o.ApplyT(func(v OriginEndpointSegment) *OriginEndpointEncryption { return v.Encryption }).(OriginEndpointEncryptionPtrOutput)
}

// <p>When selected, the stream set includes an additional I-frame only stream, along with the other tracks. If false, this extra stream is not included. MediaPackage generates an I-frame only stream from the first rendition in the manifest. The service inserts EXT-I-FRAMES-ONLY tags in the output manifest, and then generates and includes an I-frames only playlist in the stream. This playlist permits player functionality like fast forward and rewind.</p>
func (o OriginEndpointSegmentOutput) IncludeIframeOnlyStreams() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OriginEndpointSegment) *bool { return v.IncludeIframeOnlyStreams }).(pulumi.BoolPtrOutput)
}

// The SCTE-35 configuration associated with the segment.
func (o OriginEndpointSegmentOutput) Scte() OriginEndpointSctePtrOutput {
	return o.ApplyT(func(v OriginEndpointSegment) *OriginEndpointScte { return v.Scte }).(OriginEndpointSctePtrOutput)
}

// <p>The duration (in seconds) of each segment. Enter a value equal to, or a multiple of, the input segment duration. If the value that you enter is different from the input segment duration, MediaPackage rounds segments to the nearest multiple of the input segment duration.</p>
func (o OriginEndpointSegmentOutput) SegmentDurationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OriginEndpointSegment) *int { return v.SegmentDurationSeconds }).(pulumi.IntPtrOutput)
}

// <p>The name that describes the segment. The name is the base name of the segment used in all content manifests inside of the endpoint. You can't use spaces in the name.</p>
func (o OriginEndpointSegmentOutput) SegmentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OriginEndpointSegment) *string { return v.SegmentName }).(pulumi.StringPtrOutput)
}

// <p>By default, MediaPackage excludes all digital video broadcasting (DVB) subtitles from the output. When selected, MediaPackage passes through DVB subtitles into the output.</p>
func (o OriginEndpointSegmentOutput) TsIncludeDvbSubtitles() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OriginEndpointSegment) *bool { return v.TsIncludeDvbSubtitles }).(pulumi.BoolPtrOutput)
}

// <p>When selected, MediaPackage bundles all audio tracks in a rendition group. All other tracks in the stream can be used with any audio rendition from the group.</p>
func (o OriginEndpointSegmentOutput) TsUseAudioRenditionGroup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OriginEndpointSegment) *bool { return v.TsUseAudioRenditionGroup }).(pulumi.BoolPtrOutput)
}

type OriginEndpointSegmentPtrOutput struct{ *pulumi.OutputState }

func (OriginEndpointSegmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OriginEndpointSegment)(nil)).Elem()
}

func (o OriginEndpointSegmentPtrOutput) ToOriginEndpointSegmentPtrOutput() OriginEndpointSegmentPtrOutput {
	return o
}

func (o OriginEndpointSegmentPtrOutput) ToOriginEndpointSegmentPtrOutputWithContext(ctx context.Context) OriginEndpointSegmentPtrOutput {
	return o
}

func (o OriginEndpointSegmentPtrOutput) Elem() OriginEndpointSegmentOutput {
	return o.ApplyT(func(v *OriginEndpointSegment) OriginEndpointSegment {
		if v != nil {
			return *v
		}
		var ret OriginEndpointSegment
		return ret
	}).(OriginEndpointSegmentOutput)
}

// Whether to use encryption for the segment.
func (o OriginEndpointSegmentPtrOutput) Encryption() OriginEndpointEncryptionPtrOutput {
	return o.ApplyT(func(v *OriginEndpointSegment) *OriginEndpointEncryption {
		if v == nil {
			return nil
		}
		return v.Encryption
	}).(OriginEndpointEncryptionPtrOutput)
}

// <p>When selected, the stream set includes an additional I-frame only stream, along with the other tracks. If false, this extra stream is not included. MediaPackage generates an I-frame only stream from the first rendition in the manifest. The service inserts EXT-I-FRAMES-ONLY tags in the output manifest, and then generates and includes an I-frames only playlist in the stream. This playlist permits player functionality like fast forward and rewind.</p>
func (o OriginEndpointSegmentPtrOutput) IncludeIframeOnlyStreams() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OriginEndpointSegment) *bool {
		if v == nil {
			return nil
		}
		return v.IncludeIframeOnlyStreams
	}).(pulumi.BoolPtrOutput)
}

// The SCTE-35 configuration associated with the segment.
func (o OriginEndpointSegmentPtrOutput) Scte() OriginEndpointSctePtrOutput {
	return o.ApplyT(func(v *OriginEndpointSegment) *OriginEndpointScte {
		if v == nil {
			return nil
		}
		return v.Scte
	}).(OriginEndpointSctePtrOutput)
}

// <p>The duration (in seconds) of each segment. Enter a value equal to, or a multiple of, the input segment duration. If the value that you enter is different from the input segment duration, MediaPackage rounds segments to the nearest multiple of the input segment duration.</p>
func (o OriginEndpointSegmentPtrOutput) SegmentDurationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OriginEndpointSegment) *int {
		if v == nil {
			return nil
		}
		return v.SegmentDurationSeconds
	}).(pulumi.IntPtrOutput)
}

// <p>The name that describes the segment. The name is the base name of the segment used in all content manifests inside of the endpoint. You can't use spaces in the name.</p>
func (o OriginEndpointSegmentPtrOutput) SegmentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OriginEndpointSegment) *string {
		if v == nil {
			return nil
		}
		return v.SegmentName
	}).(pulumi.StringPtrOutput)
}

// <p>By default, MediaPackage excludes all digital video broadcasting (DVB) subtitles from the output. When selected, MediaPackage passes through DVB subtitles into the output.</p>
func (o OriginEndpointSegmentPtrOutput) TsIncludeDvbSubtitles() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OriginEndpointSegment) *bool {
		if v == nil {
			return nil
		}
		return v.TsIncludeDvbSubtitles
	}).(pulumi.BoolPtrOutput)
}

// <p>When selected, MediaPackage bundles all audio tracks in a rendition group. All other tracks in the stream can be used with any audio rendition from the group.</p>
func (o OriginEndpointSegmentPtrOutput) TsUseAudioRenditionGroup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OriginEndpointSegment) *bool {
		if v == nil {
			return nil
		}
		return v.TsUseAudioRenditionGroup
	}).(pulumi.BoolPtrOutput)
}

// <p>The parameters for the SPEKE key provider.</p>
type OriginEndpointSpekeKeyProvider struct {
	// <p>The DRM solution provider you're using to protect your content during distribution.</p>
	DrmSystems []OriginEndpointDrmSystem `pulumi:"drmSystems"`
	// The encryption contract configuration associated with the SPEKE key provider.
	EncryptionContractConfiguration OriginEndpointEncryptionContractConfiguration `pulumi:"encryptionContractConfiguration"`
	// <p>The unique identifier for the content. The service sends this to the key server to identify the current endpoint. How unique you make this depends on how fine-grained you want access controls to be. The service does not permit you to use the same ID for two simultaneous encryption processes. The resource ID is also known as the content ID.</p>
	//          <p>The following example shows a resource ID: <code>MovieNight20171126093045</code>
	//          </p>
	ResourceId string `pulumi:"resourceId"`
	// <p>The ARN for the IAM role granted by the key provider that provides access to the key provider API. This role must have a trust policy that allows MediaPackage to assume the role, and it must have a sufficient permissions policy to allow access to the specific key retrieval URL. Get this from your DRM solution provider.</p>
	//          <p>Valid format: <code>arn:aws:iam::{accountID}:role/{name}</code>. The following example shows a role ARN: <code>arn:aws:iam::444455556666:role/SpekeAccess</code>
	//          </p>
	RoleArn string `pulumi:"roleArn"`
	// <p>The URL of the API Gateway proxy that you set up to talk to your key server. The API Gateway proxy must reside in the same AWS Region as MediaPackage and must start with https://.</p>
	//          <p>The following example shows a URL: <code>https://1wm2dx1f33.execute-api.us-west-2.amazonaws.com/SpekeSample/copyProtection</code>
	//          </p>
	Url string `pulumi:"url"`
}

// OriginEndpointSpekeKeyProviderInput is an input type that accepts OriginEndpointSpekeKeyProviderArgs and OriginEndpointSpekeKeyProviderOutput values.
// You can construct a concrete instance of `OriginEndpointSpekeKeyProviderInput` via:
//
//	OriginEndpointSpekeKeyProviderArgs{...}
type OriginEndpointSpekeKeyProviderInput interface {
	pulumi.Input

	ToOriginEndpointSpekeKeyProviderOutput() OriginEndpointSpekeKeyProviderOutput
	ToOriginEndpointSpekeKeyProviderOutputWithContext(context.Context) OriginEndpointSpekeKeyProviderOutput
}

// <p>The parameters for the SPEKE key provider.</p>
type OriginEndpointSpekeKeyProviderArgs struct {
	// <p>The DRM solution provider you're using to protect your content during distribution.</p>
	DrmSystems OriginEndpointDrmSystemArrayInput `pulumi:"drmSystems"`
	// The encryption contract configuration associated with the SPEKE key provider.
	EncryptionContractConfiguration OriginEndpointEncryptionContractConfigurationInput `pulumi:"encryptionContractConfiguration"`
	// <p>The unique identifier for the content. The service sends this to the key server to identify the current endpoint. How unique you make this depends on how fine-grained you want access controls to be. The service does not permit you to use the same ID for two simultaneous encryption processes. The resource ID is also known as the content ID.</p>
	//          <p>The following example shows a resource ID: <code>MovieNight20171126093045</code>
	//          </p>
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
	// <p>The ARN for the IAM role granted by the key provider that provides access to the key provider API. This role must have a trust policy that allows MediaPackage to assume the role, and it must have a sufficient permissions policy to allow access to the specific key retrieval URL. Get this from your DRM solution provider.</p>
	//          <p>Valid format: <code>arn:aws:iam::{accountID}:role/{name}</code>. The following example shows a role ARN: <code>arn:aws:iam::444455556666:role/SpekeAccess</code>
	//          </p>
	RoleArn pulumi.StringInput `pulumi:"roleArn"`
	// <p>The URL of the API Gateway proxy that you set up to talk to your key server. The API Gateway proxy must reside in the same AWS Region as MediaPackage and must start with https://.</p>
	//          <p>The following example shows a URL: <code>https://1wm2dx1f33.execute-api.us-west-2.amazonaws.com/SpekeSample/copyProtection</code>
	//          </p>
	Url pulumi.StringInput `pulumi:"url"`
}

func (OriginEndpointSpekeKeyProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginEndpointSpekeKeyProvider)(nil)).Elem()
}

func (i OriginEndpointSpekeKeyProviderArgs) ToOriginEndpointSpekeKeyProviderOutput() OriginEndpointSpekeKeyProviderOutput {
	return i.ToOriginEndpointSpekeKeyProviderOutputWithContext(context.Background())
}

func (i OriginEndpointSpekeKeyProviderArgs) ToOriginEndpointSpekeKeyProviderOutputWithContext(ctx context.Context) OriginEndpointSpekeKeyProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointSpekeKeyProviderOutput)
}

func (i OriginEndpointSpekeKeyProviderArgs) ToOriginEndpointSpekeKeyProviderPtrOutput() OriginEndpointSpekeKeyProviderPtrOutput {
	return i.ToOriginEndpointSpekeKeyProviderPtrOutputWithContext(context.Background())
}

func (i OriginEndpointSpekeKeyProviderArgs) ToOriginEndpointSpekeKeyProviderPtrOutputWithContext(ctx context.Context) OriginEndpointSpekeKeyProviderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointSpekeKeyProviderOutput).ToOriginEndpointSpekeKeyProviderPtrOutputWithContext(ctx)
}

// OriginEndpointSpekeKeyProviderPtrInput is an input type that accepts OriginEndpointSpekeKeyProviderArgs, OriginEndpointSpekeKeyProviderPtr and OriginEndpointSpekeKeyProviderPtrOutput values.
// You can construct a concrete instance of `OriginEndpointSpekeKeyProviderPtrInput` via:
//
//	        OriginEndpointSpekeKeyProviderArgs{...}
//
//	or:
//
//	        nil
type OriginEndpointSpekeKeyProviderPtrInput interface {
	pulumi.Input

	ToOriginEndpointSpekeKeyProviderPtrOutput() OriginEndpointSpekeKeyProviderPtrOutput
	ToOriginEndpointSpekeKeyProviderPtrOutputWithContext(context.Context) OriginEndpointSpekeKeyProviderPtrOutput
}

type originEndpointSpekeKeyProviderPtrType OriginEndpointSpekeKeyProviderArgs

func OriginEndpointSpekeKeyProviderPtr(v *OriginEndpointSpekeKeyProviderArgs) OriginEndpointSpekeKeyProviderPtrInput {
	return (*originEndpointSpekeKeyProviderPtrType)(v)
}

func (*originEndpointSpekeKeyProviderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OriginEndpointSpekeKeyProvider)(nil)).Elem()
}

func (i *originEndpointSpekeKeyProviderPtrType) ToOriginEndpointSpekeKeyProviderPtrOutput() OriginEndpointSpekeKeyProviderPtrOutput {
	return i.ToOriginEndpointSpekeKeyProviderPtrOutputWithContext(context.Background())
}

func (i *originEndpointSpekeKeyProviderPtrType) ToOriginEndpointSpekeKeyProviderPtrOutputWithContext(ctx context.Context) OriginEndpointSpekeKeyProviderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointSpekeKeyProviderPtrOutput)
}

// <p>The parameters for the SPEKE key provider.</p>
type OriginEndpointSpekeKeyProviderOutput struct{ *pulumi.OutputState }

func (OriginEndpointSpekeKeyProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginEndpointSpekeKeyProvider)(nil)).Elem()
}

func (o OriginEndpointSpekeKeyProviderOutput) ToOriginEndpointSpekeKeyProviderOutput() OriginEndpointSpekeKeyProviderOutput {
	return o
}

func (o OriginEndpointSpekeKeyProviderOutput) ToOriginEndpointSpekeKeyProviderOutputWithContext(ctx context.Context) OriginEndpointSpekeKeyProviderOutput {
	return o
}

func (o OriginEndpointSpekeKeyProviderOutput) ToOriginEndpointSpekeKeyProviderPtrOutput() OriginEndpointSpekeKeyProviderPtrOutput {
	return o.ToOriginEndpointSpekeKeyProviderPtrOutputWithContext(context.Background())
}

func (o OriginEndpointSpekeKeyProviderOutput) ToOriginEndpointSpekeKeyProviderPtrOutputWithContext(ctx context.Context) OriginEndpointSpekeKeyProviderPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OriginEndpointSpekeKeyProvider) *OriginEndpointSpekeKeyProvider {
		return &v
	}).(OriginEndpointSpekeKeyProviderPtrOutput)
}

// <p>The DRM solution provider you're using to protect your content during distribution.</p>
func (o OriginEndpointSpekeKeyProviderOutput) DrmSystems() OriginEndpointDrmSystemArrayOutput {
	return o.ApplyT(func(v OriginEndpointSpekeKeyProvider) []OriginEndpointDrmSystem { return v.DrmSystems }).(OriginEndpointDrmSystemArrayOutput)
}

// The encryption contract configuration associated with the SPEKE key provider.
func (o OriginEndpointSpekeKeyProviderOutput) EncryptionContractConfiguration() OriginEndpointEncryptionContractConfigurationOutput {
	return o.ApplyT(func(v OriginEndpointSpekeKeyProvider) OriginEndpointEncryptionContractConfiguration {
		return v.EncryptionContractConfiguration
	}).(OriginEndpointEncryptionContractConfigurationOutput)
}

// <p>The unique identifier for the content. The service sends this to the key server to identify the current endpoint. How unique you make this depends on how fine-grained you want access controls to be. The service does not permit you to use the same ID for two simultaneous encryption processes. The resource ID is also known as the content ID.</p>
//
//	<p>The following example shows a resource ID: <code>MovieNight20171126093045</code>
//	</p>
func (o OriginEndpointSpekeKeyProviderOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v OriginEndpointSpekeKeyProvider) string { return v.ResourceId }).(pulumi.StringOutput)
}

// <p>The ARN for the IAM role granted by the key provider that provides access to the key provider API. This role must have a trust policy that allows MediaPackage to assume the role, and it must have a sufficient permissions policy to allow access to the specific key retrieval URL. Get this from your DRM solution provider.</p>
//
//	<p>Valid format: <code>arn:aws:iam::{accountID}:role/{name}</code>. The following example shows a role ARN: <code>arn:aws:iam::444455556666:role/SpekeAccess</code>
//	</p>
func (o OriginEndpointSpekeKeyProviderOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v OriginEndpointSpekeKeyProvider) string { return v.RoleArn }).(pulumi.StringOutput)
}

// <p>The URL of the API Gateway proxy that you set up to talk to your key server. The API Gateway proxy must reside in the same AWS Region as MediaPackage and must start with https://.</p>
//
//	<p>The following example shows a URL: <code>https://1wm2dx1f33.execute-api.us-west-2.amazonaws.com/SpekeSample/copyProtection</code>
//	</p>
func (o OriginEndpointSpekeKeyProviderOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v OriginEndpointSpekeKeyProvider) string { return v.Url }).(pulumi.StringOutput)
}

type OriginEndpointSpekeKeyProviderPtrOutput struct{ *pulumi.OutputState }

func (OriginEndpointSpekeKeyProviderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OriginEndpointSpekeKeyProvider)(nil)).Elem()
}

func (o OriginEndpointSpekeKeyProviderPtrOutput) ToOriginEndpointSpekeKeyProviderPtrOutput() OriginEndpointSpekeKeyProviderPtrOutput {
	return o
}

func (o OriginEndpointSpekeKeyProviderPtrOutput) ToOriginEndpointSpekeKeyProviderPtrOutputWithContext(ctx context.Context) OriginEndpointSpekeKeyProviderPtrOutput {
	return o
}

func (o OriginEndpointSpekeKeyProviderPtrOutput) Elem() OriginEndpointSpekeKeyProviderOutput {
	return o.ApplyT(func(v *OriginEndpointSpekeKeyProvider) OriginEndpointSpekeKeyProvider {
		if v != nil {
			return *v
		}
		var ret OriginEndpointSpekeKeyProvider
		return ret
	}).(OriginEndpointSpekeKeyProviderOutput)
}

// <p>The DRM solution provider you're using to protect your content during distribution.</p>
func (o OriginEndpointSpekeKeyProviderPtrOutput) DrmSystems() OriginEndpointDrmSystemArrayOutput {
	return o.ApplyT(func(v *OriginEndpointSpekeKeyProvider) []OriginEndpointDrmSystem {
		if v == nil {
			return nil
		}
		return v.DrmSystems
	}).(OriginEndpointDrmSystemArrayOutput)
}

// The encryption contract configuration associated with the SPEKE key provider.
func (o OriginEndpointSpekeKeyProviderPtrOutput) EncryptionContractConfiguration() OriginEndpointEncryptionContractConfigurationPtrOutput {
	return o.ApplyT(func(v *OriginEndpointSpekeKeyProvider) *OriginEndpointEncryptionContractConfiguration {
		if v == nil {
			return nil
		}
		return &v.EncryptionContractConfiguration
	}).(OriginEndpointEncryptionContractConfigurationPtrOutput)
}

// <p>The unique identifier for the content. The service sends this to the key server to identify the current endpoint. How unique you make this depends on how fine-grained you want access controls to be. The service does not permit you to use the same ID for two simultaneous encryption processes. The resource ID is also known as the content ID.</p>
//
//	<p>The following example shows a resource ID: <code>MovieNight20171126093045</code>
//	</p>
func (o OriginEndpointSpekeKeyProviderPtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OriginEndpointSpekeKeyProvider) *string {
		if v == nil {
			return nil
		}
		return &v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// <p>The ARN for the IAM role granted by the key provider that provides access to the key provider API. This role must have a trust policy that allows MediaPackage to assume the role, and it must have a sufficient permissions policy to allow access to the specific key retrieval URL. Get this from your DRM solution provider.</p>
//
//	<p>Valid format: <code>arn:aws:iam::{accountID}:role/{name}</code>. The following example shows a role ARN: <code>arn:aws:iam::444455556666:role/SpekeAccess</code>
//	</p>
func (o OriginEndpointSpekeKeyProviderPtrOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OriginEndpointSpekeKeyProvider) *string {
		if v == nil {
			return nil
		}
		return &v.RoleArn
	}).(pulumi.StringPtrOutput)
}

// <p>The URL of the API Gateway proxy that you set up to talk to your key server. The API Gateway proxy must reside in the same AWS Region as MediaPackage and must start with https://.</p>
//
//	<p>The following example shows a URL: <code>https://1wm2dx1f33.execute-api.us-west-2.amazonaws.com/SpekeSample/copyProtection</code>
//	</p>
func (o OriginEndpointSpekeKeyProviderPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OriginEndpointSpekeKeyProvider) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

// <p>To insert an EXT-X-START tag in your HLS playlist, specify a StartTag configuration object with a valid TimeOffset. When you do, you can also optionally specify whether to include a PRECISE value in the EXT-X-START tag.</p>
type OriginEndpointStartTag struct {
	// <p>Specify the value for PRECISE within your EXT-X-START tag. Leave blank, or choose false, to use the default value NO. Choose yes to use the value YES.</p>
	Precise *bool `pulumi:"precise"`
	// <p>Specify the value for TIME-OFFSET within your EXT-X-START tag. Enter a signed floating point value which, if positive, must be less than the configured manifest duration minus three times the configured segment target duration. If negative, the absolute value must be larger than three times the configured segment target duration, and the absolute value must be smaller than the configured manifest duration.</p>
	TimeOffset float64 `pulumi:"timeOffset"`
}

// OriginEndpointStartTagInput is an input type that accepts OriginEndpointStartTagArgs and OriginEndpointStartTagOutput values.
// You can construct a concrete instance of `OriginEndpointStartTagInput` via:
//
//	OriginEndpointStartTagArgs{...}
type OriginEndpointStartTagInput interface {
	pulumi.Input

	ToOriginEndpointStartTagOutput() OriginEndpointStartTagOutput
	ToOriginEndpointStartTagOutputWithContext(context.Context) OriginEndpointStartTagOutput
}

// <p>To insert an EXT-X-START tag in your HLS playlist, specify a StartTag configuration object with a valid TimeOffset. When you do, you can also optionally specify whether to include a PRECISE value in the EXT-X-START tag.</p>
type OriginEndpointStartTagArgs struct {
	// <p>Specify the value for PRECISE within your EXT-X-START tag. Leave blank, or choose false, to use the default value NO. Choose yes to use the value YES.</p>
	Precise pulumi.BoolPtrInput `pulumi:"precise"`
	// <p>Specify the value for TIME-OFFSET within your EXT-X-START tag. Enter a signed floating point value which, if positive, must be less than the configured manifest duration minus three times the configured segment target duration. If negative, the absolute value must be larger than three times the configured segment target duration, and the absolute value must be smaller than the configured manifest duration.</p>
	TimeOffset pulumi.Float64Input `pulumi:"timeOffset"`
}

func (OriginEndpointStartTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginEndpointStartTag)(nil)).Elem()
}

func (i OriginEndpointStartTagArgs) ToOriginEndpointStartTagOutput() OriginEndpointStartTagOutput {
	return i.ToOriginEndpointStartTagOutputWithContext(context.Background())
}

func (i OriginEndpointStartTagArgs) ToOriginEndpointStartTagOutputWithContext(ctx context.Context) OriginEndpointStartTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointStartTagOutput)
}

func (i OriginEndpointStartTagArgs) ToOriginEndpointStartTagPtrOutput() OriginEndpointStartTagPtrOutput {
	return i.ToOriginEndpointStartTagPtrOutputWithContext(context.Background())
}

func (i OriginEndpointStartTagArgs) ToOriginEndpointStartTagPtrOutputWithContext(ctx context.Context) OriginEndpointStartTagPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointStartTagOutput).ToOriginEndpointStartTagPtrOutputWithContext(ctx)
}

// OriginEndpointStartTagPtrInput is an input type that accepts OriginEndpointStartTagArgs, OriginEndpointStartTagPtr and OriginEndpointStartTagPtrOutput values.
// You can construct a concrete instance of `OriginEndpointStartTagPtrInput` via:
//
//	        OriginEndpointStartTagArgs{...}
//
//	or:
//
//	        nil
type OriginEndpointStartTagPtrInput interface {
	pulumi.Input

	ToOriginEndpointStartTagPtrOutput() OriginEndpointStartTagPtrOutput
	ToOriginEndpointStartTagPtrOutputWithContext(context.Context) OriginEndpointStartTagPtrOutput
}

type originEndpointStartTagPtrType OriginEndpointStartTagArgs

func OriginEndpointStartTagPtr(v *OriginEndpointStartTagArgs) OriginEndpointStartTagPtrInput {
	return (*originEndpointStartTagPtrType)(v)
}

func (*originEndpointStartTagPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OriginEndpointStartTag)(nil)).Elem()
}

func (i *originEndpointStartTagPtrType) ToOriginEndpointStartTagPtrOutput() OriginEndpointStartTagPtrOutput {
	return i.ToOriginEndpointStartTagPtrOutputWithContext(context.Background())
}

func (i *originEndpointStartTagPtrType) ToOriginEndpointStartTagPtrOutputWithContext(ctx context.Context) OriginEndpointStartTagPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointStartTagPtrOutput)
}

// <p>To insert an EXT-X-START tag in your HLS playlist, specify a StartTag configuration object with a valid TimeOffset. When you do, you can also optionally specify whether to include a PRECISE value in the EXT-X-START tag.</p>
type OriginEndpointStartTagOutput struct{ *pulumi.OutputState }

func (OriginEndpointStartTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginEndpointStartTag)(nil)).Elem()
}

func (o OriginEndpointStartTagOutput) ToOriginEndpointStartTagOutput() OriginEndpointStartTagOutput {
	return o
}

func (o OriginEndpointStartTagOutput) ToOriginEndpointStartTagOutputWithContext(ctx context.Context) OriginEndpointStartTagOutput {
	return o
}

func (o OriginEndpointStartTagOutput) ToOriginEndpointStartTagPtrOutput() OriginEndpointStartTagPtrOutput {
	return o.ToOriginEndpointStartTagPtrOutputWithContext(context.Background())
}

func (o OriginEndpointStartTagOutput) ToOriginEndpointStartTagPtrOutputWithContext(ctx context.Context) OriginEndpointStartTagPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OriginEndpointStartTag) *OriginEndpointStartTag {
		return &v
	}).(OriginEndpointStartTagPtrOutput)
}

// <p>Specify the value for PRECISE within your EXT-X-START tag. Leave blank, or choose false, to use the default value NO. Choose yes to use the value YES.</p>
func (o OriginEndpointStartTagOutput) Precise() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OriginEndpointStartTag) *bool { return v.Precise }).(pulumi.BoolPtrOutput)
}

// <p>Specify the value for TIME-OFFSET within your EXT-X-START tag. Enter a signed floating point value which, if positive, must be less than the configured manifest duration minus three times the configured segment target duration. If negative, the absolute value must be larger than three times the configured segment target duration, and the absolute value must be smaller than the configured manifest duration.</p>
func (o OriginEndpointStartTagOutput) TimeOffset() pulumi.Float64Output {
	return o.ApplyT(func(v OriginEndpointStartTag) float64 { return v.TimeOffset }).(pulumi.Float64Output)
}

type OriginEndpointStartTagPtrOutput struct{ *pulumi.OutputState }

func (OriginEndpointStartTagPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OriginEndpointStartTag)(nil)).Elem()
}

func (o OriginEndpointStartTagPtrOutput) ToOriginEndpointStartTagPtrOutput() OriginEndpointStartTagPtrOutput {
	return o
}

func (o OriginEndpointStartTagPtrOutput) ToOriginEndpointStartTagPtrOutputWithContext(ctx context.Context) OriginEndpointStartTagPtrOutput {
	return o
}

func (o OriginEndpointStartTagPtrOutput) Elem() OriginEndpointStartTagOutput {
	return o.ApplyT(func(v *OriginEndpointStartTag) OriginEndpointStartTag {
		if v != nil {
			return *v
		}
		var ret OriginEndpointStartTag
		return ret
	}).(OriginEndpointStartTagOutput)
}

// <p>Specify the value for PRECISE within your EXT-X-START tag. Leave blank, or choose false, to use the default value NO. Choose yes to use the value YES.</p>
func (o OriginEndpointStartTagPtrOutput) Precise() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OriginEndpointStartTag) *bool {
		if v == nil {
			return nil
		}
		return v.Precise
	}).(pulumi.BoolPtrOutput)
}

// <p>Specify the value for TIME-OFFSET within your EXT-X-START tag. Enter a signed floating point value which, if positive, must be less than the configured manifest duration minus three times the configured segment target duration. If negative, the absolute value must be larger than three times the configured segment target duration, and the absolute value must be smaller than the configured manifest duration.</p>
func (o OriginEndpointStartTagPtrOutput) TimeOffset() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *OriginEndpointStartTag) *float64 {
		if v == nil {
			return nil
		}
		return &v.TimeOffset
	}).(pulumi.Float64PtrOutput)
}

type OriginEndpointTag struct {
	Key   *string `pulumi:"key"`
	Value *string `pulumi:"value"`
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelInputSwitchConfigurationInput)(nil)).Elem(), ChannelInputSwitchConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelInputSwitchConfigurationPtrInput)(nil)).Elem(), ChannelInputSwitchConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelOutputHeaderConfigurationInput)(nil)).Elem(), ChannelOutputHeaderConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelOutputHeaderConfigurationPtrInput)(nil)).Elem(), ChannelOutputHeaderConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginEndpointDashManifestConfigurationInput)(nil)).Elem(), OriginEndpointDashManifestConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginEndpointDashManifestConfigurationArrayInput)(nil)).Elem(), OriginEndpointDashManifestConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginEndpointDashUtcTimingInput)(nil)).Elem(), OriginEndpointDashUtcTimingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginEndpointDashUtcTimingPtrInput)(nil)).Elem(), OriginEndpointDashUtcTimingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginEndpointEncryptionInput)(nil)).Elem(), OriginEndpointEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginEndpointEncryptionPtrInput)(nil)).Elem(), OriginEndpointEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginEndpointEncryptionContractConfigurationInput)(nil)).Elem(), OriginEndpointEncryptionContractConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginEndpointEncryptionContractConfigurationPtrInput)(nil)).Elem(), OriginEndpointEncryptionContractConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginEndpointEncryptionMethodInput)(nil)).Elem(), OriginEndpointEncryptionMethodArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginEndpointEncryptionMethodPtrInput)(nil)).Elem(), OriginEndpointEncryptionMethodArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginEndpointFilterConfigurationInput)(nil)).Elem(), OriginEndpointFilterConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginEndpointFilterConfigurationPtrInput)(nil)).Elem(), OriginEndpointFilterConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginEndpointForceEndpointErrorConfigurationInput)(nil)).Elem(), OriginEndpointForceEndpointErrorConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginEndpointForceEndpointErrorConfigurationPtrInput)(nil)).Elem(), OriginEndpointForceEndpointErrorConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginEndpointHlsManifestConfigurationInput)(nil)).Elem(), OriginEndpointHlsManifestConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginEndpointHlsManifestConfigurationArrayInput)(nil)).Elem(), OriginEndpointHlsManifestConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginEndpointLowLatencyHlsManifestConfigurationInput)(nil)).Elem(), OriginEndpointLowLatencyHlsManifestConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginEndpointLowLatencyHlsManifestConfigurationArrayInput)(nil)).Elem(), OriginEndpointLowLatencyHlsManifestConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginEndpointScteInput)(nil)).Elem(), OriginEndpointScteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginEndpointSctePtrInput)(nil)).Elem(), OriginEndpointScteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginEndpointScteDashInput)(nil)).Elem(), OriginEndpointScteDashArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginEndpointScteDashPtrInput)(nil)).Elem(), OriginEndpointScteDashArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginEndpointScteHlsInput)(nil)).Elem(), OriginEndpointScteHlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginEndpointScteHlsPtrInput)(nil)).Elem(), OriginEndpointScteHlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginEndpointSegmentInput)(nil)).Elem(), OriginEndpointSegmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginEndpointSegmentPtrInput)(nil)).Elem(), OriginEndpointSegmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginEndpointSpekeKeyProviderInput)(nil)).Elem(), OriginEndpointSpekeKeyProviderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginEndpointSpekeKeyProviderPtrInput)(nil)).Elem(), OriginEndpointSpekeKeyProviderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginEndpointStartTagInput)(nil)).Elem(), OriginEndpointStartTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginEndpointStartTagPtrInput)(nil)).Elem(), OriginEndpointStartTagArgs{})
	pulumi.RegisterOutputType(ChannelIngestEndpointOutput{})
	pulumi.RegisterOutputType(ChannelIngestEndpointArrayOutput{})
	pulumi.RegisterOutputType(ChannelInputSwitchConfigurationOutput{})
	pulumi.RegisterOutputType(ChannelInputSwitchConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ChannelOutputHeaderConfigurationOutput{})
	pulumi.RegisterOutputType(ChannelOutputHeaderConfigurationPtrOutput{})
	pulumi.RegisterOutputType(OriginEndpointDashManifestConfigurationOutput{})
	pulumi.RegisterOutputType(OriginEndpointDashManifestConfigurationArrayOutput{})
	pulumi.RegisterOutputType(OriginEndpointDashUtcTimingOutput{})
	pulumi.RegisterOutputType(OriginEndpointDashUtcTimingPtrOutput{})
	pulumi.RegisterOutputType(OriginEndpointEncryptionOutput{})
	pulumi.RegisterOutputType(OriginEndpointEncryptionPtrOutput{})
	pulumi.RegisterOutputType(OriginEndpointEncryptionContractConfigurationOutput{})
	pulumi.RegisterOutputType(OriginEndpointEncryptionContractConfigurationPtrOutput{})
	pulumi.RegisterOutputType(OriginEndpointEncryptionMethodOutput{})
	pulumi.RegisterOutputType(OriginEndpointEncryptionMethodPtrOutput{})
	pulumi.RegisterOutputType(OriginEndpointFilterConfigurationOutput{})
	pulumi.RegisterOutputType(OriginEndpointFilterConfigurationPtrOutput{})
	pulumi.RegisterOutputType(OriginEndpointForceEndpointErrorConfigurationOutput{})
	pulumi.RegisterOutputType(OriginEndpointForceEndpointErrorConfigurationPtrOutput{})
	pulumi.RegisterOutputType(OriginEndpointHlsManifestConfigurationOutput{})
	pulumi.RegisterOutputType(OriginEndpointHlsManifestConfigurationArrayOutput{})
	pulumi.RegisterOutputType(OriginEndpointLowLatencyHlsManifestConfigurationOutput{})
	pulumi.RegisterOutputType(OriginEndpointLowLatencyHlsManifestConfigurationArrayOutput{})
	pulumi.RegisterOutputType(OriginEndpointScteOutput{})
	pulumi.RegisterOutputType(OriginEndpointSctePtrOutput{})
	pulumi.RegisterOutputType(OriginEndpointScteDashOutput{})
	pulumi.RegisterOutputType(OriginEndpointScteDashPtrOutput{})
	pulumi.RegisterOutputType(OriginEndpointScteHlsOutput{})
	pulumi.RegisterOutputType(OriginEndpointScteHlsPtrOutput{})
	pulumi.RegisterOutputType(OriginEndpointSegmentOutput{})
	pulumi.RegisterOutputType(OriginEndpointSegmentPtrOutput{})
	pulumi.RegisterOutputType(OriginEndpointSpekeKeyProviderOutput{})
	pulumi.RegisterOutputType(OriginEndpointSpekeKeyProviderPtrOutput{})
	pulumi.RegisterOutputType(OriginEndpointStartTagOutput{})
	pulumi.RegisterOutputType(OriginEndpointStartTagPtrOutput{})
}
