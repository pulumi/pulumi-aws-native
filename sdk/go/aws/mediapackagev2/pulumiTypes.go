// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mediapackagev2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type ChannelGroupTag struct {
	Key   *string `pulumi:"key"`
	Value *string `pulumi:"value"`
}

// ChannelGroupTagInput is an input type that accepts ChannelGroupTagArgs and ChannelGroupTagOutput values.
// You can construct a concrete instance of `ChannelGroupTagInput` via:
//
//	ChannelGroupTagArgs{...}
type ChannelGroupTagInput interface {
	pulumi.Input

	ToChannelGroupTagOutput() ChannelGroupTagOutput
	ToChannelGroupTagOutputWithContext(context.Context) ChannelGroupTagOutput
}

type ChannelGroupTagArgs struct {
	Key   pulumi.StringPtrInput `pulumi:"key"`
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ChannelGroupTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelGroupTag)(nil)).Elem()
}

func (i ChannelGroupTagArgs) ToChannelGroupTagOutput() ChannelGroupTagOutput {
	return i.ToChannelGroupTagOutputWithContext(context.Background())
}

func (i ChannelGroupTagArgs) ToChannelGroupTagOutputWithContext(ctx context.Context) ChannelGroupTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelGroupTagOutput)
}

func (i ChannelGroupTagArgs) ToOutput(ctx context.Context) pulumix.Output[ChannelGroupTag] {
	return pulumix.Output[ChannelGroupTag]{
		OutputState: i.ToChannelGroupTagOutputWithContext(ctx).OutputState,
	}
}

// ChannelGroupTagArrayInput is an input type that accepts ChannelGroupTagArray and ChannelGroupTagArrayOutput values.
// You can construct a concrete instance of `ChannelGroupTagArrayInput` via:
//
//	ChannelGroupTagArray{ ChannelGroupTagArgs{...} }
type ChannelGroupTagArrayInput interface {
	pulumi.Input

	ToChannelGroupTagArrayOutput() ChannelGroupTagArrayOutput
	ToChannelGroupTagArrayOutputWithContext(context.Context) ChannelGroupTagArrayOutput
}

type ChannelGroupTagArray []ChannelGroupTagInput

func (ChannelGroupTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ChannelGroupTag)(nil)).Elem()
}

func (i ChannelGroupTagArray) ToChannelGroupTagArrayOutput() ChannelGroupTagArrayOutput {
	return i.ToChannelGroupTagArrayOutputWithContext(context.Background())
}

func (i ChannelGroupTagArray) ToChannelGroupTagArrayOutputWithContext(ctx context.Context) ChannelGroupTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelGroupTagArrayOutput)
}

func (i ChannelGroupTagArray) ToOutput(ctx context.Context) pulumix.Output[[]ChannelGroupTag] {
	return pulumix.Output[[]ChannelGroupTag]{
		OutputState: i.ToChannelGroupTagArrayOutputWithContext(ctx).OutputState,
	}
}

type ChannelGroupTagOutput struct{ *pulumi.OutputState }

func (ChannelGroupTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelGroupTag)(nil)).Elem()
}

func (o ChannelGroupTagOutput) ToChannelGroupTagOutput() ChannelGroupTagOutput {
	return o
}

func (o ChannelGroupTagOutput) ToChannelGroupTagOutputWithContext(ctx context.Context) ChannelGroupTagOutput {
	return o
}

func (o ChannelGroupTagOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelGroupTag] {
	return pulumix.Output[ChannelGroupTag]{
		OutputState: o.OutputState,
	}
}

func (o ChannelGroupTagOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChannelGroupTag) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o ChannelGroupTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChannelGroupTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ChannelGroupTagArrayOutput struct{ *pulumi.OutputState }

func (ChannelGroupTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ChannelGroupTag)(nil)).Elem()
}

func (o ChannelGroupTagArrayOutput) ToChannelGroupTagArrayOutput() ChannelGroupTagArrayOutput {
	return o
}

func (o ChannelGroupTagArrayOutput) ToChannelGroupTagArrayOutputWithContext(ctx context.Context) ChannelGroupTagArrayOutput {
	return o
}

func (o ChannelGroupTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ChannelGroupTag] {
	return pulumix.Output[[]ChannelGroupTag]{
		OutputState: o.OutputState,
	}
}

func (o ChannelGroupTagArrayOutput) Index(i pulumi.IntInput) ChannelGroupTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ChannelGroupTag {
		return vs[0].([]ChannelGroupTag)[vs[1].(int)]
	}).(ChannelGroupTagOutput)
}

type ChannelIngestEndpoint struct {
	Id  *string `pulumi:"id"`
	Url *string `pulumi:"url"`
}

type ChannelIngestEndpointOutput struct{ *pulumi.OutputState }

func (ChannelIngestEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelIngestEndpoint)(nil)).Elem()
}

func (o ChannelIngestEndpointOutput) ToChannelIngestEndpointOutput() ChannelIngestEndpointOutput {
	return o
}

func (o ChannelIngestEndpointOutput) ToChannelIngestEndpointOutputWithContext(ctx context.Context) ChannelIngestEndpointOutput {
	return o
}

func (o ChannelIngestEndpointOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelIngestEndpoint] {
	return pulumix.Output[ChannelIngestEndpoint]{
		OutputState: o.OutputState,
	}
}

func (o ChannelIngestEndpointOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChannelIngestEndpoint) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o ChannelIngestEndpointOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChannelIngestEndpoint) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type ChannelIngestEndpointArrayOutput struct{ *pulumi.OutputState }

func (ChannelIngestEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ChannelIngestEndpoint)(nil)).Elem()
}

func (o ChannelIngestEndpointArrayOutput) ToChannelIngestEndpointArrayOutput() ChannelIngestEndpointArrayOutput {
	return o
}

func (o ChannelIngestEndpointArrayOutput) ToChannelIngestEndpointArrayOutputWithContext(ctx context.Context) ChannelIngestEndpointArrayOutput {
	return o
}

func (o ChannelIngestEndpointArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ChannelIngestEndpoint] {
	return pulumix.Output[[]ChannelIngestEndpoint]{
		OutputState: o.OutputState,
	}
}

func (o ChannelIngestEndpointArrayOutput) Index(i pulumi.IntInput) ChannelIngestEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ChannelIngestEndpoint {
		return vs[0].([]ChannelIngestEndpoint)[vs[1].(int)]
	}).(ChannelIngestEndpointOutput)
}

type ChannelTag struct {
	Key   *string `pulumi:"key"`
	Value *string `pulumi:"value"`
}

// ChannelTagInput is an input type that accepts ChannelTagArgs and ChannelTagOutput values.
// You can construct a concrete instance of `ChannelTagInput` via:
//
//	ChannelTagArgs{...}
type ChannelTagInput interface {
	pulumi.Input

	ToChannelTagOutput() ChannelTagOutput
	ToChannelTagOutputWithContext(context.Context) ChannelTagOutput
}

type ChannelTagArgs struct {
	Key   pulumi.StringPtrInput `pulumi:"key"`
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ChannelTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelTag)(nil)).Elem()
}

func (i ChannelTagArgs) ToChannelTagOutput() ChannelTagOutput {
	return i.ToChannelTagOutputWithContext(context.Background())
}

func (i ChannelTagArgs) ToChannelTagOutputWithContext(ctx context.Context) ChannelTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelTagOutput)
}

func (i ChannelTagArgs) ToOutput(ctx context.Context) pulumix.Output[ChannelTag] {
	return pulumix.Output[ChannelTag]{
		OutputState: i.ToChannelTagOutputWithContext(ctx).OutputState,
	}
}

// ChannelTagArrayInput is an input type that accepts ChannelTagArray and ChannelTagArrayOutput values.
// You can construct a concrete instance of `ChannelTagArrayInput` via:
//
//	ChannelTagArray{ ChannelTagArgs{...} }
type ChannelTagArrayInput interface {
	pulumi.Input

	ToChannelTagArrayOutput() ChannelTagArrayOutput
	ToChannelTagArrayOutputWithContext(context.Context) ChannelTagArrayOutput
}

type ChannelTagArray []ChannelTagInput

func (ChannelTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ChannelTag)(nil)).Elem()
}

func (i ChannelTagArray) ToChannelTagArrayOutput() ChannelTagArrayOutput {
	return i.ToChannelTagArrayOutputWithContext(context.Background())
}

func (i ChannelTagArray) ToChannelTagArrayOutputWithContext(ctx context.Context) ChannelTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelTagArrayOutput)
}

func (i ChannelTagArray) ToOutput(ctx context.Context) pulumix.Output[[]ChannelTag] {
	return pulumix.Output[[]ChannelTag]{
		OutputState: i.ToChannelTagArrayOutputWithContext(ctx).OutputState,
	}
}

type ChannelTagOutput struct{ *pulumi.OutputState }

func (ChannelTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelTag)(nil)).Elem()
}

func (o ChannelTagOutput) ToChannelTagOutput() ChannelTagOutput {
	return o
}

func (o ChannelTagOutput) ToChannelTagOutputWithContext(ctx context.Context) ChannelTagOutput {
	return o
}

func (o ChannelTagOutput) ToOutput(ctx context.Context) pulumix.Output[ChannelTag] {
	return pulumix.Output[ChannelTag]{
		OutputState: o.OutputState,
	}
}

func (o ChannelTagOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChannelTag) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o ChannelTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChannelTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ChannelTagArrayOutput struct{ *pulumi.OutputState }

func (ChannelTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ChannelTag)(nil)).Elem()
}

func (o ChannelTagArrayOutput) ToChannelTagArrayOutput() ChannelTagArrayOutput {
	return o
}

func (o ChannelTagArrayOutput) ToChannelTagArrayOutputWithContext(ctx context.Context) ChannelTagArrayOutput {
	return o
}

func (o ChannelTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ChannelTag] {
	return pulumix.Output[[]ChannelTag]{
		OutputState: o.OutputState,
	}
}

func (o ChannelTagArrayOutput) Index(i pulumi.IntInput) ChannelTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ChannelTag {
		return vs[0].([]ChannelTag)[vs[1].(int)]
	}).(ChannelTagOutput)
}

// <p>The parameters for encrypting content.</p>
type OriginEndpointEncryption struct {
	// <p>A 128-bit, 16-byte hex value represented by a 32-character string, used in conjunction with the key for encrypting content. If you don't specify a value, then MediaPackage creates the constant initialization vector (IV).</p>
	ConstantInitializationVector *string                        `pulumi:"constantInitializationVector"`
	EncryptionMethod             OriginEndpointEncryptionMethod `pulumi:"encryptionMethod"`
	// <p>The frequency (in seconds) of key changes for live workflows, in which content is streamed real time. The service retrieves content keys before the live content begins streaming, and then retrieves them as needed over the lifetime of the workflow. By default, key rotation is set to 300 seconds (5 minutes), the minimum rotation interval, which is equivalent to setting it to 300. If you don't enter an interval, content keys aren't rotated.</p>
	//          <p>The following example setting causes the service to rotate keys every thirty minutes: <code>1800</code>
	//          </p>
	KeyRotationIntervalSeconds *int                           `pulumi:"keyRotationIntervalSeconds"`
	SpekeKeyProvider           OriginEndpointSpekeKeyProvider `pulumi:"spekeKeyProvider"`
}

// OriginEndpointEncryptionInput is an input type that accepts OriginEndpointEncryptionArgs and OriginEndpointEncryptionOutput values.
// You can construct a concrete instance of `OriginEndpointEncryptionInput` via:
//
//	OriginEndpointEncryptionArgs{...}
type OriginEndpointEncryptionInput interface {
	pulumi.Input

	ToOriginEndpointEncryptionOutput() OriginEndpointEncryptionOutput
	ToOriginEndpointEncryptionOutputWithContext(context.Context) OriginEndpointEncryptionOutput
}

// <p>The parameters for encrypting content.</p>
type OriginEndpointEncryptionArgs struct {
	// <p>A 128-bit, 16-byte hex value represented by a 32-character string, used in conjunction with the key for encrypting content. If you don't specify a value, then MediaPackage creates the constant initialization vector (IV).</p>
	ConstantInitializationVector pulumi.StringPtrInput               `pulumi:"constantInitializationVector"`
	EncryptionMethod             OriginEndpointEncryptionMethodInput `pulumi:"encryptionMethod"`
	// <p>The frequency (in seconds) of key changes for live workflows, in which content is streamed real time. The service retrieves content keys before the live content begins streaming, and then retrieves them as needed over the lifetime of the workflow. By default, key rotation is set to 300 seconds (5 minutes), the minimum rotation interval, which is equivalent to setting it to 300. If you don't enter an interval, content keys aren't rotated.</p>
	//          <p>The following example setting causes the service to rotate keys every thirty minutes: <code>1800</code>
	//          </p>
	KeyRotationIntervalSeconds pulumi.IntPtrInput                  `pulumi:"keyRotationIntervalSeconds"`
	SpekeKeyProvider           OriginEndpointSpekeKeyProviderInput `pulumi:"spekeKeyProvider"`
}

func (OriginEndpointEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginEndpointEncryption)(nil)).Elem()
}

func (i OriginEndpointEncryptionArgs) ToOriginEndpointEncryptionOutput() OriginEndpointEncryptionOutput {
	return i.ToOriginEndpointEncryptionOutputWithContext(context.Background())
}

func (i OriginEndpointEncryptionArgs) ToOriginEndpointEncryptionOutputWithContext(ctx context.Context) OriginEndpointEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointEncryptionOutput)
}

func (i OriginEndpointEncryptionArgs) ToOutput(ctx context.Context) pulumix.Output[OriginEndpointEncryption] {
	return pulumix.Output[OriginEndpointEncryption]{
		OutputState: i.ToOriginEndpointEncryptionOutputWithContext(ctx).OutputState,
	}
}

func (i OriginEndpointEncryptionArgs) ToOriginEndpointEncryptionPtrOutput() OriginEndpointEncryptionPtrOutput {
	return i.ToOriginEndpointEncryptionPtrOutputWithContext(context.Background())
}

func (i OriginEndpointEncryptionArgs) ToOriginEndpointEncryptionPtrOutputWithContext(ctx context.Context) OriginEndpointEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointEncryptionOutput).ToOriginEndpointEncryptionPtrOutputWithContext(ctx)
}

// OriginEndpointEncryptionPtrInput is an input type that accepts OriginEndpointEncryptionArgs, OriginEndpointEncryptionPtr and OriginEndpointEncryptionPtrOutput values.
// You can construct a concrete instance of `OriginEndpointEncryptionPtrInput` via:
//
//	        OriginEndpointEncryptionArgs{...}
//
//	or:
//
//	        nil
type OriginEndpointEncryptionPtrInput interface {
	pulumi.Input

	ToOriginEndpointEncryptionPtrOutput() OriginEndpointEncryptionPtrOutput
	ToOriginEndpointEncryptionPtrOutputWithContext(context.Context) OriginEndpointEncryptionPtrOutput
}

type originEndpointEncryptionPtrType OriginEndpointEncryptionArgs

func OriginEndpointEncryptionPtr(v *OriginEndpointEncryptionArgs) OriginEndpointEncryptionPtrInput {
	return (*originEndpointEncryptionPtrType)(v)
}

func (*originEndpointEncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OriginEndpointEncryption)(nil)).Elem()
}

func (i *originEndpointEncryptionPtrType) ToOriginEndpointEncryptionPtrOutput() OriginEndpointEncryptionPtrOutput {
	return i.ToOriginEndpointEncryptionPtrOutputWithContext(context.Background())
}

func (i *originEndpointEncryptionPtrType) ToOriginEndpointEncryptionPtrOutputWithContext(ctx context.Context) OriginEndpointEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointEncryptionPtrOutput)
}

func (i *originEndpointEncryptionPtrType) ToOutput(ctx context.Context) pulumix.Output[*OriginEndpointEncryption] {
	return pulumix.Output[*OriginEndpointEncryption]{
		OutputState: i.ToOriginEndpointEncryptionPtrOutputWithContext(ctx).OutputState,
	}
}

// <p>The parameters for encrypting content.</p>
type OriginEndpointEncryptionOutput struct{ *pulumi.OutputState }

func (OriginEndpointEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginEndpointEncryption)(nil)).Elem()
}

func (o OriginEndpointEncryptionOutput) ToOriginEndpointEncryptionOutput() OriginEndpointEncryptionOutput {
	return o
}

func (o OriginEndpointEncryptionOutput) ToOriginEndpointEncryptionOutputWithContext(ctx context.Context) OriginEndpointEncryptionOutput {
	return o
}

func (o OriginEndpointEncryptionOutput) ToOriginEndpointEncryptionPtrOutput() OriginEndpointEncryptionPtrOutput {
	return o.ToOriginEndpointEncryptionPtrOutputWithContext(context.Background())
}

func (o OriginEndpointEncryptionOutput) ToOriginEndpointEncryptionPtrOutputWithContext(ctx context.Context) OriginEndpointEncryptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OriginEndpointEncryption) *OriginEndpointEncryption {
		return &v
	}).(OriginEndpointEncryptionPtrOutput)
}

func (o OriginEndpointEncryptionOutput) ToOutput(ctx context.Context) pulumix.Output[OriginEndpointEncryption] {
	return pulumix.Output[OriginEndpointEncryption]{
		OutputState: o.OutputState,
	}
}

// <p>A 128-bit, 16-byte hex value represented by a 32-character string, used in conjunction with the key for encrypting content. If you don't specify a value, then MediaPackage creates the constant initialization vector (IV).</p>
func (o OriginEndpointEncryptionOutput) ConstantInitializationVector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OriginEndpointEncryption) *string { return v.ConstantInitializationVector }).(pulumi.StringPtrOutput)
}

func (o OriginEndpointEncryptionOutput) EncryptionMethod() OriginEndpointEncryptionMethodOutput {
	return o.ApplyT(func(v OriginEndpointEncryption) OriginEndpointEncryptionMethod { return v.EncryptionMethod }).(OriginEndpointEncryptionMethodOutput)
}

// <p>The frequency (in seconds) of key changes for live workflows, in which content is streamed real time. The service retrieves content keys before the live content begins streaming, and then retrieves them as needed over the lifetime of the workflow. By default, key rotation is set to 300 seconds (5 minutes), the minimum rotation interval, which is equivalent to setting it to 300. If you don't enter an interval, content keys aren't rotated.</p>
//
//	<p>The following example setting causes the service to rotate keys every thirty minutes: <code>1800</code>
//	</p>
func (o OriginEndpointEncryptionOutput) KeyRotationIntervalSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OriginEndpointEncryption) *int { return v.KeyRotationIntervalSeconds }).(pulumi.IntPtrOutput)
}

func (o OriginEndpointEncryptionOutput) SpekeKeyProvider() OriginEndpointSpekeKeyProviderOutput {
	return o.ApplyT(func(v OriginEndpointEncryption) OriginEndpointSpekeKeyProvider { return v.SpekeKeyProvider }).(OriginEndpointSpekeKeyProviderOutput)
}

type OriginEndpointEncryptionPtrOutput struct{ *pulumi.OutputState }

func (OriginEndpointEncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OriginEndpointEncryption)(nil)).Elem()
}

func (o OriginEndpointEncryptionPtrOutput) ToOriginEndpointEncryptionPtrOutput() OriginEndpointEncryptionPtrOutput {
	return o
}

func (o OriginEndpointEncryptionPtrOutput) ToOriginEndpointEncryptionPtrOutputWithContext(ctx context.Context) OriginEndpointEncryptionPtrOutput {
	return o
}

func (o OriginEndpointEncryptionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*OriginEndpointEncryption] {
	return pulumix.Output[*OriginEndpointEncryption]{
		OutputState: o.OutputState,
	}
}

func (o OriginEndpointEncryptionPtrOutput) Elem() OriginEndpointEncryptionOutput {
	return o.ApplyT(func(v *OriginEndpointEncryption) OriginEndpointEncryption {
		if v != nil {
			return *v
		}
		var ret OriginEndpointEncryption
		return ret
	}).(OriginEndpointEncryptionOutput)
}

// <p>A 128-bit, 16-byte hex value represented by a 32-character string, used in conjunction with the key for encrypting content. If you don't specify a value, then MediaPackage creates the constant initialization vector (IV).</p>
func (o OriginEndpointEncryptionPtrOutput) ConstantInitializationVector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OriginEndpointEncryption) *string {
		if v == nil {
			return nil
		}
		return v.ConstantInitializationVector
	}).(pulumi.StringPtrOutput)
}

func (o OriginEndpointEncryptionPtrOutput) EncryptionMethod() OriginEndpointEncryptionMethodPtrOutput {
	return o.ApplyT(func(v *OriginEndpointEncryption) *OriginEndpointEncryptionMethod {
		if v == nil {
			return nil
		}
		return &v.EncryptionMethod
	}).(OriginEndpointEncryptionMethodPtrOutput)
}

// <p>The frequency (in seconds) of key changes for live workflows, in which content is streamed real time. The service retrieves content keys before the live content begins streaming, and then retrieves them as needed over the lifetime of the workflow. By default, key rotation is set to 300 seconds (5 minutes), the minimum rotation interval, which is equivalent to setting it to 300. If you don't enter an interval, content keys aren't rotated.</p>
//
//	<p>The following example setting causes the service to rotate keys every thirty minutes: <code>1800</code>
//	</p>
func (o OriginEndpointEncryptionPtrOutput) KeyRotationIntervalSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OriginEndpointEncryption) *int {
		if v == nil {
			return nil
		}
		return v.KeyRotationIntervalSeconds
	}).(pulumi.IntPtrOutput)
}

func (o OriginEndpointEncryptionPtrOutput) SpekeKeyProvider() OriginEndpointSpekeKeyProviderPtrOutput {
	return o.ApplyT(func(v *OriginEndpointEncryption) *OriginEndpointSpekeKeyProvider {
		if v == nil {
			return nil
		}
		return &v.SpekeKeyProvider
	}).(OriginEndpointSpekeKeyProviderPtrOutput)
}

// <p>Configure one or more content encryption keys for your endpoints that use SPEKE Version 2.0. The encryption contract defines which content keys are used to encrypt the audio and video tracks in your stream. To configure the encryption contract, specify which audio and video encryption presets to use.</p>
type OriginEndpointEncryptionContractConfiguration struct {
	PresetSpeke20Audio OriginEndpointPresetSpeke20Audio `pulumi:"presetSpeke20Audio"`
	PresetSpeke20Video OriginEndpointPresetSpeke20Video `pulumi:"presetSpeke20Video"`
}

// OriginEndpointEncryptionContractConfigurationInput is an input type that accepts OriginEndpointEncryptionContractConfigurationArgs and OriginEndpointEncryptionContractConfigurationOutput values.
// You can construct a concrete instance of `OriginEndpointEncryptionContractConfigurationInput` via:
//
//	OriginEndpointEncryptionContractConfigurationArgs{...}
type OriginEndpointEncryptionContractConfigurationInput interface {
	pulumi.Input

	ToOriginEndpointEncryptionContractConfigurationOutput() OriginEndpointEncryptionContractConfigurationOutput
	ToOriginEndpointEncryptionContractConfigurationOutputWithContext(context.Context) OriginEndpointEncryptionContractConfigurationOutput
}

// <p>Configure one or more content encryption keys for your endpoints that use SPEKE Version 2.0. The encryption contract defines which content keys are used to encrypt the audio and video tracks in your stream. To configure the encryption contract, specify which audio and video encryption presets to use.</p>
type OriginEndpointEncryptionContractConfigurationArgs struct {
	PresetSpeke20Audio OriginEndpointPresetSpeke20AudioInput `pulumi:"presetSpeke20Audio"`
	PresetSpeke20Video OriginEndpointPresetSpeke20VideoInput `pulumi:"presetSpeke20Video"`
}

func (OriginEndpointEncryptionContractConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginEndpointEncryptionContractConfiguration)(nil)).Elem()
}

func (i OriginEndpointEncryptionContractConfigurationArgs) ToOriginEndpointEncryptionContractConfigurationOutput() OriginEndpointEncryptionContractConfigurationOutput {
	return i.ToOriginEndpointEncryptionContractConfigurationOutputWithContext(context.Background())
}

func (i OriginEndpointEncryptionContractConfigurationArgs) ToOriginEndpointEncryptionContractConfigurationOutputWithContext(ctx context.Context) OriginEndpointEncryptionContractConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointEncryptionContractConfigurationOutput)
}

func (i OriginEndpointEncryptionContractConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[OriginEndpointEncryptionContractConfiguration] {
	return pulumix.Output[OriginEndpointEncryptionContractConfiguration]{
		OutputState: i.ToOriginEndpointEncryptionContractConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i OriginEndpointEncryptionContractConfigurationArgs) ToOriginEndpointEncryptionContractConfigurationPtrOutput() OriginEndpointEncryptionContractConfigurationPtrOutput {
	return i.ToOriginEndpointEncryptionContractConfigurationPtrOutputWithContext(context.Background())
}

func (i OriginEndpointEncryptionContractConfigurationArgs) ToOriginEndpointEncryptionContractConfigurationPtrOutputWithContext(ctx context.Context) OriginEndpointEncryptionContractConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointEncryptionContractConfigurationOutput).ToOriginEndpointEncryptionContractConfigurationPtrOutputWithContext(ctx)
}

// OriginEndpointEncryptionContractConfigurationPtrInput is an input type that accepts OriginEndpointEncryptionContractConfigurationArgs, OriginEndpointEncryptionContractConfigurationPtr and OriginEndpointEncryptionContractConfigurationPtrOutput values.
// You can construct a concrete instance of `OriginEndpointEncryptionContractConfigurationPtrInput` via:
//
//	        OriginEndpointEncryptionContractConfigurationArgs{...}
//
//	or:
//
//	        nil
type OriginEndpointEncryptionContractConfigurationPtrInput interface {
	pulumi.Input

	ToOriginEndpointEncryptionContractConfigurationPtrOutput() OriginEndpointEncryptionContractConfigurationPtrOutput
	ToOriginEndpointEncryptionContractConfigurationPtrOutputWithContext(context.Context) OriginEndpointEncryptionContractConfigurationPtrOutput
}

type originEndpointEncryptionContractConfigurationPtrType OriginEndpointEncryptionContractConfigurationArgs

func OriginEndpointEncryptionContractConfigurationPtr(v *OriginEndpointEncryptionContractConfigurationArgs) OriginEndpointEncryptionContractConfigurationPtrInput {
	return (*originEndpointEncryptionContractConfigurationPtrType)(v)
}

func (*originEndpointEncryptionContractConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OriginEndpointEncryptionContractConfiguration)(nil)).Elem()
}

func (i *originEndpointEncryptionContractConfigurationPtrType) ToOriginEndpointEncryptionContractConfigurationPtrOutput() OriginEndpointEncryptionContractConfigurationPtrOutput {
	return i.ToOriginEndpointEncryptionContractConfigurationPtrOutputWithContext(context.Background())
}

func (i *originEndpointEncryptionContractConfigurationPtrType) ToOriginEndpointEncryptionContractConfigurationPtrOutputWithContext(ctx context.Context) OriginEndpointEncryptionContractConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointEncryptionContractConfigurationPtrOutput)
}

func (i *originEndpointEncryptionContractConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*OriginEndpointEncryptionContractConfiguration] {
	return pulumix.Output[*OriginEndpointEncryptionContractConfiguration]{
		OutputState: i.ToOriginEndpointEncryptionContractConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// <p>Configure one or more content encryption keys for your endpoints that use SPEKE Version 2.0. The encryption contract defines which content keys are used to encrypt the audio and video tracks in your stream. To configure the encryption contract, specify which audio and video encryption presets to use.</p>
type OriginEndpointEncryptionContractConfigurationOutput struct{ *pulumi.OutputState }

func (OriginEndpointEncryptionContractConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginEndpointEncryptionContractConfiguration)(nil)).Elem()
}

func (o OriginEndpointEncryptionContractConfigurationOutput) ToOriginEndpointEncryptionContractConfigurationOutput() OriginEndpointEncryptionContractConfigurationOutput {
	return o
}

func (o OriginEndpointEncryptionContractConfigurationOutput) ToOriginEndpointEncryptionContractConfigurationOutputWithContext(ctx context.Context) OriginEndpointEncryptionContractConfigurationOutput {
	return o
}

func (o OriginEndpointEncryptionContractConfigurationOutput) ToOriginEndpointEncryptionContractConfigurationPtrOutput() OriginEndpointEncryptionContractConfigurationPtrOutput {
	return o.ToOriginEndpointEncryptionContractConfigurationPtrOutputWithContext(context.Background())
}

func (o OriginEndpointEncryptionContractConfigurationOutput) ToOriginEndpointEncryptionContractConfigurationPtrOutputWithContext(ctx context.Context) OriginEndpointEncryptionContractConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OriginEndpointEncryptionContractConfiguration) *OriginEndpointEncryptionContractConfiguration {
		return &v
	}).(OriginEndpointEncryptionContractConfigurationPtrOutput)
}

func (o OriginEndpointEncryptionContractConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[OriginEndpointEncryptionContractConfiguration] {
	return pulumix.Output[OriginEndpointEncryptionContractConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o OriginEndpointEncryptionContractConfigurationOutput) PresetSpeke20Audio() OriginEndpointPresetSpeke20AudioOutput {
	return o.ApplyT(func(v OriginEndpointEncryptionContractConfiguration) OriginEndpointPresetSpeke20Audio {
		return v.PresetSpeke20Audio
	}).(OriginEndpointPresetSpeke20AudioOutput)
}

func (o OriginEndpointEncryptionContractConfigurationOutput) PresetSpeke20Video() OriginEndpointPresetSpeke20VideoOutput {
	return o.ApplyT(func(v OriginEndpointEncryptionContractConfiguration) OriginEndpointPresetSpeke20Video {
		return v.PresetSpeke20Video
	}).(OriginEndpointPresetSpeke20VideoOutput)
}

type OriginEndpointEncryptionContractConfigurationPtrOutput struct{ *pulumi.OutputState }

func (OriginEndpointEncryptionContractConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OriginEndpointEncryptionContractConfiguration)(nil)).Elem()
}

func (o OriginEndpointEncryptionContractConfigurationPtrOutput) ToOriginEndpointEncryptionContractConfigurationPtrOutput() OriginEndpointEncryptionContractConfigurationPtrOutput {
	return o
}

func (o OriginEndpointEncryptionContractConfigurationPtrOutput) ToOriginEndpointEncryptionContractConfigurationPtrOutputWithContext(ctx context.Context) OriginEndpointEncryptionContractConfigurationPtrOutput {
	return o
}

func (o OriginEndpointEncryptionContractConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*OriginEndpointEncryptionContractConfiguration] {
	return pulumix.Output[*OriginEndpointEncryptionContractConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o OriginEndpointEncryptionContractConfigurationPtrOutput) Elem() OriginEndpointEncryptionContractConfigurationOutput {
	return o.ApplyT(func(v *OriginEndpointEncryptionContractConfiguration) OriginEndpointEncryptionContractConfiguration {
		if v != nil {
			return *v
		}
		var ret OriginEndpointEncryptionContractConfiguration
		return ret
	}).(OriginEndpointEncryptionContractConfigurationOutput)
}

func (o OriginEndpointEncryptionContractConfigurationPtrOutput) PresetSpeke20Audio() OriginEndpointPresetSpeke20AudioPtrOutput {
	return o.ApplyT(func(v *OriginEndpointEncryptionContractConfiguration) *OriginEndpointPresetSpeke20Audio {
		if v == nil {
			return nil
		}
		return &v.PresetSpeke20Audio
	}).(OriginEndpointPresetSpeke20AudioPtrOutput)
}

func (o OriginEndpointEncryptionContractConfigurationPtrOutput) PresetSpeke20Video() OriginEndpointPresetSpeke20VideoPtrOutput {
	return o.ApplyT(func(v *OriginEndpointEncryptionContractConfiguration) *OriginEndpointPresetSpeke20Video {
		if v == nil {
			return nil
		}
		return &v.PresetSpeke20Video
	}).(OriginEndpointPresetSpeke20VideoPtrOutput)
}

// <p>The encryption type.</p>
type OriginEndpointEncryptionMethod struct {
	CmafEncryptionMethod *OriginEndpointCmafEncryptionMethod `pulumi:"cmafEncryptionMethod"`
	TsEncryptionMethod   *OriginEndpointTsEncryptionMethod   `pulumi:"tsEncryptionMethod"`
}

// OriginEndpointEncryptionMethodInput is an input type that accepts OriginEndpointEncryptionMethodArgs and OriginEndpointEncryptionMethodOutput values.
// You can construct a concrete instance of `OriginEndpointEncryptionMethodInput` via:
//
//	OriginEndpointEncryptionMethodArgs{...}
type OriginEndpointEncryptionMethodInput interface {
	pulumi.Input

	ToOriginEndpointEncryptionMethodOutput() OriginEndpointEncryptionMethodOutput
	ToOriginEndpointEncryptionMethodOutputWithContext(context.Context) OriginEndpointEncryptionMethodOutput
}

// <p>The encryption type.</p>
type OriginEndpointEncryptionMethodArgs struct {
	CmafEncryptionMethod OriginEndpointCmafEncryptionMethodPtrInput `pulumi:"cmafEncryptionMethod"`
	TsEncryptionMethod   OriginEndpointTsEncryptionMethodPtrInput   `pulumi:"tsEncryptionMethod"`
}

func (OriginEndpointEncryptionMethodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginEndpointEncryptionMethod)(nil)).Elem()
}

func (i OriginEndpointEncryptionMethodArgs) ToOriginEndpointEncryptionMethodOutput() OriginEndpointEncryptionMethodOutput {
	return i.ToOriginEndpointEncryptionMethodOutputWithContext(context.Background())
}

func (i OriginEndpointEncryptionMethodArgs) ToOriginEndpointEncryptionMethodOutputWithContext(ctx context.Context) OriginEndpointEncryptionMethodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointEncryptionMethodOutput)
}

func (i OriginEndpointEncryptionMethodArgs) ToOutput(ctx context.Context) pulumix.Output[OriginEndpointEncryptionMethod] {
	return pulumix.Output[OriginEndpointEncryptionMethod]{
		OutputState: i.ToOriginEndpointEncryptionMethodOutputWithContext(ctx).OutputState,
	}
}

func (i OriginEndpointEncryptionMethodArgs) ToOriginEndpointEncryptionMethodPtrOutput() OriginEndpointEncryptionMethodPtrOutput {
	return i.ToOriginEndpointEncryptionMethodPtrOutputWithContext(context.Background())
}

func (i OriginEndpointEncryptionMethodArgs) ToOriginEndpointEncryptionMethodPtrOutputWithContext(ctx context.Context) OriginEndpointEncryptionMethodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointEncryptionMethodOutput).ToOriginEndpointEncryptionMethodPtrOutputWithContext(ctx)
}

// OriginEndpointEncryptionMethodPtrInput is an input type that accepts OriginEndpointEncryptionMethodArgs, OriginEndpointEncryptionMethodPtr and OriginEndpointEncryptionMethodPtrOutput values.
// You can construct a concrete instance of `OriginEndpointEncryptionMethodPtrInput` via:
//
//	        OriginEndpointEncryptionMethodArgs{...}
//
//	or:
//
//	        nil
type OriginEndpointEncryptionMethodPtrInput interface {
	pulumi.Input

	ToOriginEndpointEncryptionMethodPtrOutput() OriginEndpointEncryptionMethodPtrOutput
	ToOriginEndpointEncryptionMethodPtrOutputWithContext(context.Context) OriginEndpointEncryptionMethodPtrOutput
}

type originEndpointEncryptionMethodPtrType OriginEndpointEncryptionMethodArgs

func OriginEndpointEncryptionMethodPtr(v *OriginEndpointEncryptionMethodArgs) OriginEndpointEncryptionMethodPtrInput {
	return (*originEndpointEncryptionMethodPtrType)(v)
}

func (*originEndpointEncryptionMethodPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OriginEndpointEncryptionMethod)(nil)).Elem()
}

func (i *originEndpointEncryptionMethodPtrType) ToOriginEndpointEncryptionMethodPtrOutput() OriginEndpointEncryptionMethodPtrOutput {
	return i.ToOriginEndpointEncryptionMethodPtrOutputWithContext(context.Background())
}

func (i *originEndpointEncryptionMethodPtrType) ToOriginEndpointEncryptionMethodPtrOutputWithContext(ctx context.Context) OriginEndpointEncryptionMethodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointEncryptionMethodPtrOutput)
}

func (i *originEndpointEncryptionMethodPtrType) ToOutput(ctx context.Context) pulumix.Output[*OriginEndpointEncryptionMethod] {
	return pulumix.Output[*OriginEndpointEncryptionMethod]{
		OutputState: i.ToOriginEndpointEncryptionMethodPtrOutputWithContext(ctx).OutputState,
	}
}

// <p>The encryption type.</p>
type OriginEndpointEncryptionMethodOutput struct{ *pulumi.OutputState }

func (OriginEndpointEncryptionMethodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginEndpointEncryptionMethod)(nil)).Elem()
}

func (o OriginEndpointEncryptionMethodOutput) ToOriginEndpointEncryptionMethodOutput() OriginEndpointEncryptionMethodOutput {
	return o
}

func (o OriginEndpointEncryptionMethodOutput) ToOriginEndpointEncryptionMethodOutputWithContext(ctx context.Context) OriginEndpointEncryptionMethodOutput {
	return o
}

func (o OriginEndpointEncryptionMethodOutput) ToOriginEndpointEncryptionMethodPtrOutput() OriginEndpointEncryptionMethodPtrOutput {
	return o.ToOriginEndpointEncryptionMethodPtrOutputWithContext(context.Background())
}

func (o OriginEndpointEncryptionMethodOutput) ToOriginEndpointEncryptionMethodPtrOutputWithContext(ctx context.Context) OriginEndpointEncryptionMethodPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OriginEndpointEncryptionMethod) *OriginEndpointEncryptionMethod {
		return &v
	}).(OriginEndpointEncryptionMethodPtrOutput)
}

func (o OriginEndpointEncryptionMethodOutput) ToOutput(ctx context.Context) pulumix.Output[OriginEndpointEncryptionMethod] {
	return pulumix.Output[OriginEndpointEncryptionMethod]{
		OutputState: o.OutputState,
	}
}

func (o OriginEndpointEncryptionMethodOutput) CmafEncryptionMethod() OriginEndpointCmafEncryptionMethodPtrOutput {
	return o.ApplyT(func(v OriginEndpointEncryptionMethod) *OriginEndpointCmafEncryptionMethod {
		return v.CmafEncryptionMethod
	}).(OriginEndpointCmafEncryptionMethodPtrOutput)
}

func (o OriginEndpointEncryptionMethodOutput) TsEncryptionMethod() OriginEndpointTsEncryptionMethodPtrOutput {
	return o.ApplyT(func(v OriginEndpointEncryptionMethod) *OriginEndpointTsEncryptionMethod { return v.TsEncryptionMethod }).(OriginEndpointTsEncryptionMethodPtrOutput)
}

type OriginEndpointEncryptionMethodPtrOutput struct{ *pulumi.OutputState }

func (OriginEndpointEncryptionMethodPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OriginEndpointEncryptionMethod)(nil)).Elem()
}

func (o OriginEndpointEncryptionMethodPtrOutput) ToOriginEndpointEncryptionMethodPtrOutput() OriginEndpointEncryptionMethodPtrOutput {
	return o
}

func (o OriginEndpointEncryptionMethodPtrOutput) ToOriginEndpointEncryptionMethodPtrOutputWithContext(ctx context.Context) OriginEndpointEncryptionMethodPtrOutput {
	return o
}

func (o OriginEndpointEncryptionMethodPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*OriginEndpointEncryptionMethod] {
	return pulumix.Output[*OriginEndpointEncryptionMethod]{
		OutputState: o.OutputState,
	}
}

func (o OriginEndpointEncryptionMethodPtrOutput) Elem() OriginEndpointEncryptionMethodOutput {
	return o.ApplyT(func(v *OriginEndpointEncryptionMethod) OriginEndpointEncryptionMethod {
		if v != nil {
			return *v
		}
		var ret OriginEndpointEncryptionMethod
		return ret
	}).(OriginEndpointEncryptionMethodOutput)
}

func (o OriginEndpointEncryptionMethodPtrOutput) CmafEncryptionMethod() OriginEndpointCmafEncryptionMethodPtrOutput {
	return o.ApplyT(func(v *OriginEndpointEncryptionMethod) *OriginEndpointCmafEncryptionMethod {
		if v == nil {
			return nil
		}
		return v.CmafEncryptionMethod
	}).(OriginEndpointCmafEncryptionMethodPtrOutput)
}

func (o OriginEndpointEncryptionMethodPtrOutput) TsEncryptionMethod() OriginEndpointTsEncryptionMethodPtrOutput {
	return o.ApplyT(func(v *OriginEndpointEncryptionMethod) *OriginEndpointTsEncryptionMethod {
		if v == nil {
			return nil
		}
		return v.TsEncryptionMethod
	}).(OriginEndpointTsEncryptionMethodPtrOutput)
}

// <p>Filter configuration includes settings for manifest filtering, start and end times, and time delay that apply to all of your egress requests for this manifest. </p>
type OriginEndpointFilterConfiguration struct {
	// <p>Optionally specify the end time for all of your manifest egress requests. When you include end time, note that you cannot use end time query parameters for this manifest's endpoint URL.</p>
	End *string `pulumi:"end"`
	// <p>Optionally specify one or more manifest filters for all of your manifest egress requests. When you include a manifest filter, note that you cannot use an identical manifest filter query parameter for this manifest's endpoint URL.</p>
	ManifestFilter *string `pulumi:"manifestFilter"`
	// <p>Optionally specify the start time for all of your manifest egress requests. When you include start time, note that you cannot use start time query parameters for this manifest's endpoint URL.</p>
	Start *string `pulumi:"start"`
	// <p>Optionally specify the time delay for all of your manifest egress requests. Enter a value that is smaller than your endpoint's startover window. When you include time delay, note that you cannot use time delay query parameters for this manifest's endpoint URL.</p>
	TimeDelaySeconds *int `pulumi:"timeDelaySeconds"`
}

// OriginEndpointFilterConfigurationInput is an input type that accepts OriginEndpointFilterConfigurationArgs and OriginEndpointFilterConfigurationOutput values.
// You can construct a concrete instance of `OriginEndpointFilterConfigurationInput` via:
//
//	OriginEndpointFilterConfigurationArgs{...}
type OriginEndpointFilterConfigurationInput interface {
	pulumi.Input

	ToOriginEndpointFilterConfigurationOutput() OriginEndpointFilterConfigurationOutput
	ToOriginEndpointFilterConfigurationOutputWithContext(context.Context) OriginEndpointFilterConfigurationOutput
}

// <p>Filter configuration includes settings for manifest filtering, start and end times, and time delay that apply to all of your egress requests for this manifest. </p>
type OriginEndpointFilterConfigurationArgs struct {
	// <p>Optionally specify the end time for all of your manifest egress requests. When you include end time, note that you cannot use end time query parameters for this manifest's endpoint URL.</p>
	End pulumi.StringPtrInput `pulumi:"end"`
	// <p>Optionally specify one or more manifest filters for all of your manifest egress requests. When you include a manifest filter, note that you cannot use an identical manifest filter query parameter for this manifest's endpoint URL.</p>
	ManifestFilter pulumi.StringPtrInput `pulumi:"manifestFilter"`
	// <p>Optionally specify the start time for all of your manifest egress requests. When you include start time, note that you cannot use start time query parameters for this manifest's endpoint URL.</p>
	Start pulumi.StringPtrInput `pulumi:"start"`
	// <p>Optionally specify the time delay for all of your manifest egress requests. Enter a value that is smaller than your endpoint's startover window. When you include time delay, note that you cannot use time delay query parameters for this manifest's endpoint URL.</p>
	TimeDelaySeconds pulumi.IntPtrInput `pulumi:"timeDelaySeconds"`
}

func (OriginEndpointFilterConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginEndpointFilterConfiguration)(nil)).Elem()
}

func (i OriginEndpointFilterConfigurationArgs) ToOriginEndpointFilterConfigurationOutput() OriginEndpointFilterConfigurationOutput {
	return i.ToOriginEndpointFilterConfigurationOutputWithContext(context.Background())
}

func (i OriginEndpointFilterConfigurationArgs) ToOriginEndpointFilterConfigurationOutputWithContext(ctx context.Context) OriginEndpointFilterConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointFilterConfigurationOutput)
}

func (i OriginEndpointFilterConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[OriginEndpointFilterConfiguration] {
	return pulumix.Output[OriginEndpointFilterConfiguration]{
		OutputState: i.ToOriginEndpointFilterConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i OriginEndpointFilterConfigurationArgs) ToOriginEndpointFilterConfigurationPtrOutput() OriginEndpointFilterConfigurationPtrOutput {
	return i.ToOriginEndpointFilterConfigurationPtrOutputWithContext(context.Background())
}

func (i OriginEndpointFilterConfigurationArgs) ToOriginEndpointFilterConfigurationPtrOutputWithContext(ctx context.Context) OriginEndpointFilterConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointFilterConfigurationOutput).ToOriginEndpointFilterConfigurationPtrOutputWithContext(ctx)
}

// OriginEndpointFilterConfigurationPtrInput is an input type that accepts OriginEndpointFilterConfigurationArgs, OriginEndpointFilterConfigurationPtr and OriginEndpointFilterConfigurationPtrOutput values.
// You can construct a concrete instance of `OriginEndpointFilterConfigurationPtrInput` via:
//
//	        OriginEndpointFilterConfigurationArgs{...}
//
//	or:
//
//	        nil
type OriginEndpointFilterConfigurationPtrInput interface {
	pulumi.Input

	ToOriginEndpointFilterConfigurationPtrOutput() OriginEndpointFilterConfigurationPtrOutput
	ToOriginEndpointFilterConfigurationPtrOutputWithContext(context.Context) OriginEndpointFilterConfigurationPtrOutput
}

type originEndpointFilterConfigurationPtrType OriginEndpointFilterConfigurationArgs

func OriginEndpointFilterConfigurationPtr(v *OriginEndpointFilterConfigurationArgs) OriginEndpointFilterConfigurationPtrInput {
	return (*originEndpointFilterConfigurationPtrType)(v)
}

func (*originEndpointFilterConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OriginEndpointFilterConfiguration)(nil)).Elem()
}

func (i *originEndpointFilterConfigurationPtrType) ToOriginEndpointFilterConfigurationPtrOutput() OriginEndpointFilterConfigurationPtrOutput {
	return i.ToOriginEndpointFilterConfigurationPtrOutputWithContext(context.Background())
}

func (i *originEndpointFilterConfigurationPtrType) ToOriginEndpointFilterConfigurationPtrOutputWithContext(ctx context.Context) OriginEndpointFilterConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointFilterConfigurationPtrOutput)
}

func (i *originEndpointFilterConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*OriginEndpointFilterConfiguration] {
	return pulumix.Output[*OriginEndpointFilterConfiguration]{
		OutputState: i.ToOriginEndpointFilterConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// <p>Filter configuration includes settings for manifest filtering, start and end times, and time delay that apply to all of your egress requests for this manifest. </p>
type OriginEndpointFilterConfigurationOutput struct{ *pulumi.OutputState }

func (OriginEndpointFilterConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginEndpointFilterConfiguration)(nil)).Elem()
}

func (o OriginEndpointFilterConfigurationOutput) ToOriginEndpointFilterConfigurationOutput() OriginEndpointFilterConfigurationOutput {
	return o
}

func (o OriginEndpointFilterConfigurationOutput) ToOriginEndpointFilterConfigurationOutputWithContext(ctx context.Context) OriginEndpointFilterConfigurationOutput {
	return o
}

func (o OriginEndpointFilterConfigurationOutput) ToOriginEndpointFilterConfigurationPtrOutput() OriginEndpointFilterConfigurationPtrOutput {
	return o.ToOriginEndpointFilterConfigurationPtrOutputWithContext(context.Background())
}

func (o OriginEndpointFilterConfigurationOutput) ToOriginEndpointFilterConfigurationPtrOutputWithContext(ctx context.Context) OriginEndpointFilterConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OriginEndpointFilterConfiguration) *OriginEndpointFilterConfiguration {
		return &v
	}).(OriginEndpointFilterConfigurationPtrOutput)
}

func (o OriginEndpointFilterConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[OriginEndpointFilterConfiguration] {
	return pulumix.Output[OriginEndpointFilterConfiguration]{
		OutputState: o.OutputState,
	}
}

// <p>Optionally specify the end time for all of your manifest egress requests. When you include end time, note that you cannot use end time query parameters for this manifest's endpoint URL.</p>
func (o OriginEndpointFilterConfigurationOutput) End() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OriginEndpointFilterConfiguration) *string { return v.End }).(pulumi.StringPtrOutput)
}

// <p>Optionally specify one or more manifest filters for all of your manifest egress requests. When you include a manifest filter, note that you cannot use an identical manifest filter query parameter for this manifest's endpoint URL.</p>
func (o OriginEndpointFilterConfigurationOutput) ManifestFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OriginEndpointFilterConfiguration) *string { return v.ManifestFilter }).(pulumi.StringPtrOutput)
}

// <p>Optionally specify the start time for all of your manifest egress requests. When you include start time, note that you cannot use start time query parameters for this manifest's endpoint URL.</p>
func (o OriginEndpointFilterConfigurationOutput) Start() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OriginEndpointFilterConfiguration) *string { return v.Start }).(pulumi.StringPtrOutput)
}

// <p>Optionally specify the time delay for all of your manifest egress requests. Enter a value that is smaller than your endpoint's startover window. When you include time delay, note that you cannot use time delay query parameters for this manifest's endpoint URL.</p>
func (o OriginEndpointFilterConfigurationOutput) TimeDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OriginEndpointFilterConfiguration) *int { return v.TimeDelaySeconds }).(pulumi.IntPtrOutput)
}

type OriginEndpointFilterConfigurationPtrOutput struct{ *pulumi.OutputState }

func (OriginEndpointFilterConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OriginEndpointFilterConfiguration)(nil)).Elem()
}

func (o OriginEndpointFilterConfigurationPtrOutput) ToOriginEndpointFilterConfigurationPtrOutput() OriginEndpointFilterConfigurationPtrOutput {
	return o
}

func (o OriginEndpointFilterConfigurationPtrOutput) ToOriginEndpointFilterConfigurationPtrOutputWithContext(ctx context.Context) OriginEndpointFilterConfigurationPtrOutput {
	return o
}

func (o OriginEndpointFilterConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*OriginEndpointFilterConfiguration] {
	return pulumix.Output[*OriginEndpointFilterConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o OriginEndpointFilterConfigurationPtrOutput) Elem() OriginEndpointFilterConfigurationOutput {
	return o.ApplyT(func(v *OriginEndpointFilterConfiguration) OriginEndpointFilterConfiguration {
		if v != nil {
			return *v
		}
		var ret OriginEndpointFilterConfiguration
		return ret
	}).(OriginEndpointFilterConfigurationOutput)
}

// <p>Optionally specify the end time for all of your manifest egress requests. When you include end time, note that you cannot use end time query parameters for this manifest's endpoint URL.</p>
func (o OriginEndpointFilterConfigurationPtrOutput) End() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OriginEndpointFilterConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.End
	}).(pulumi.StringPtrOutput)
}

// <p>Optionally specify one or more manifest filters for all of your manifest egress requests. When you include a manifest filter, note that you cannot use an identical manifest filter query parameter for this manifest's endpoint URL.</p>
func (o OriginEndpointFilterConfigurationPtrOutput) ManifestFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OriginEndpointFilterConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ManifestFilter
	}).(pulumi.StringPtrOutput)
}

// <p>Optionally specify the start time for all of your manifest egress requests. When you include start time, note that you cannot use start time query parameters for this manifest's endpoint URL.</p>
func (o OriginEndpointFilterConfigurationPtrOutput) Start() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OriginEndpointFilterConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Start
	}).(pulumi.StringPtrOutput)
}

// <p>Optionally specify the time delay for all of your manifest egress requests. Enter a value that is smaller than your endpoint's startover window. When you include time delay, note that you cannot use time delay query parameters for this manifest's endpoint URL.</p>
func (o OriginEndpointFilterConfigurationPtrOutput) TimeDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OriginEndpointFilterConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.TimeDelaySeconds
	}).(pulumi.IntPtrOutput)
}

// <p>Retrieve the HTTP live streaming (HLS) manifest configuration.</p>
type OriginEndpointHlsManifestConfiguration struct {
	// <p>A short string that's appended to the endpoint URL. The child manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default child manifest name, index_1. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.</p>
	ChildManifestName   *string                            `pulumi:"childManifestName"`
	FilterConfiguration *OriginEndpointFilterConfiguration `pulumi:"filterConfiguration"`
	// <p>A short short string that's appended to the endpoint URL. The manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index. MediaPackage automatically inserts the format extension, such as .m3u8. You can't use the same manifest name if you use HLS manifest and low-latency HLS manifest. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.</p>
	ManifestName string `pulumi:"manifestName"`
	// <p>The total duration (in seconds) of the manifest's content.</p>
	ManifestWindowSeconds *int `pulumi:"manifestWindowSeconds"`
	// <p>Inserts EXT-X-PROGRAM-DATE-TIME tags in the output manifest at the interval that you specify. If you don't enter an interval,
	//          EXT-X-PROGRAM-DATE-TIME tags aren't included in the manifest.
	//          The tags sync the stream to the wall clock so that viewers can seek to a specific time in the playback timeline on the player.
	//          ID3Timed metadata messages generate every 5 seconds whenever the content is ingested.</p>
	//          <p>Irrespective of this parameter, if any ID3Timed metadata is in the HLS input, it is passed through to the HLS output.</p>
	ProgramDateTimeIntervalSeconds *int                   `pulumi:"programDateTimeIntervalSeconds"`
	ScteHls                        *OriginEndpointScteHls `pulumi:"scteHls"`
	// <p>The egress domain URL for stream delivery from MediaPackage.</p>
	Url *string `pulumi:"url"`
}

// OriginEndpointHlsManifestConfigurationInput is an input type that accepts OriginEndpointHlsManifestConfigurationArgs and OriginEndpointHlsManifestConfigurationOutput values.
// You can construct a concrete instance of `OriginEndpointHlsManifestConfigurationInput` via:
//
//	OriginEndpointHlsManifestConfigurationArgs{...}
type OriginEndpointHlsManifestConfigurationInput interface {
	pulumi.Input

	ToOriginEndpointHlsManifestConfigurationOutput() OriginEndpointHlsManifestConfigurationOutput
	ToOriginEndpointHlsManifestConfigurationOutputWithContext(context.Context) OriginEndpointHlsManifestConfigurationOutput
}

// <p>Retrieve the HTTP live streaming (HLS) manifest configuration.</p>
type OriginEndpointHlsManifestConfigurationArgs struct {
	// <p>A short string that's appended to the endpoint URL. The child manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default child manifest name, index_1. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.</p>
	ChildManifestName   pulumi.StringPtrInput                     `pulumi:"childManifestName"`
	FilterConfiguration OriginEndpointFilterConfigurationPtrInput `pulumi:"filterConfiguration"`
	// <p>A short short string that's appended to the endpoint URL. The manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index. MediaPackage automatically inserts the format extension, such as .m3u8. You can't use the same manifest name if you use HLS manifest and low-latency HLS manifest. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.</p>
	ManifestName pulumi.StringInput `pulumi:"manifestName"`
	// <p>The total duration (in seconds) of the manifest's content.</p>
	ManifestWindowSeconds pulumi.IntPtrInput `pulumi:"manifestWindowSeconds"`
	// <p>Inserts EXT-X-PROGRAM-DATE-TIME tags in the output manifest at the interval that you specify. If you don't enter an interval,
	//          EXT-X-PROGRAM-DATE-TIME tags aren't included in the manifest.
	//          The tags sync the stream to the wall clock so that viewers can seek to a specific time in the playback timeline on the player.
	//          ID3Timed metadata messages generate every 5 seconds whenever the content is ingested.</p>
	//          <p>Irrespective of this parameter, if any ID3Timed metadata is in the HLS input, it is passed through to the HLS output.</p>
	ProgramDateTimeIntervalSeconds pulumi.IntPtrInput            `pulumi:"programDateTimeIntervalSeconds"`
	ScteHls                        OriginEndpointScteHlsPtrInput `pulumi:"scteHls"`
	// <p>The egress domain URL for stream delivery from MediaPackage.</p>
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (OriginEndpointHlsManifestConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginEndpointHlsManifestConfiguration)(nil)).Elem()
}

func (i OriginEndpointHlsManifestConfigurationArgs) ToOriginEndpointHlsManifestConfigurationOutput() OriginEndpointHlsManifestConfigurationOutput {
	return i.ToOriginEndpointHlsManifestConfigurationOutputWithContext(context.Background())
}

func (i OriginEndpointHlsManifestConfigurationArgs) ToOriginEndpointHlsManifestConfigurationOutputWithContext(ctx context.Context) OriginEndpointHlsManifestConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointHlsManifestConfigurationOutput)
}

func (i OriginEndpointHlsManifestConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[OriginEndpointHlsManifestConfiguration] {
	return pulumix.Output[OriginEndpointHlsManifestConfiguration]{
		OutputState: i.ToOriginEndpointHlsManifestConfigurationOutputWithContext(ctx).OutputState,
	}
}

// OriginEndpointHlsManifestConfigurationArrayInput is an input type that accepts OriginEndpointHlsManifestConfigurationArray and OriginEndpointHlsManifestConfigurationArrayOutput values.
// You can construct a concrete instance of `OriginEndpointHlsManifestConfigurationArrayInput` via:
//
//	OriginEndpointHlsManifestConfigurationArray{ OriginEndpointHlsManifestConfigurationArgs{...} }
type OriginEndpointHlsManifestConfigurationArrayInput interface {
	pulumi.Input

	ToOriginEndpointHlsManifestConfigurationArrayOutput() OriginEndpointHlsManifestConfigurationArrayOutput
	ToOriginEndpointHlsManifestConfigurationArrayOutputWithContext(context.Context) OriginEndpointHlsManifestConfigurationArrayOutput
}

type OriginEndpointHlsManifestConfigurationArray []OriginEndpointHlsManifestConfigurationInput

func (OriginEndpointHlsManifestConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OriginEndpointHlsManifestConfiguration)(nil)).Elem()
}

func (i OriginEndpointHlsManifestConfigurationArray) ToOriginEndpointHlsManifestConfigurationArrayOutput() OriginEndpointHlsManifestConfigurationArrayOutput {
	return i.ToOriginEndpointHlsManifestConfigurationArrayOutputWithContext(context.Background())
}

func (i OriginEndpointHlsManifestConfigurationArray) ToOriginEndpointHlsManifestConfigurationArrayOutputWithContext(ctx context.Context) OriginEndpointHlsManifestConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointHlsManifestConfigurationArrayOutput)
}

func (i OriginEndpointHlsManifestConfigurationArray) ToOutput(ctx context.Context) pulumix.Output[[]OriginEndpointHlsManifestConfiguration] {
	return pulumix.Output[[]OriginEndpointHlsManifestConfiguration]{
		OutputState: i.ToOriginEndpointHlsManifestConfigurationArrayOutputWithContext(ctx).OutputState,
	}
}

// <p>Retrieve the HTTP live streaming (HLS) manifest configuration.</p>
type OriginEndpointHlsManifestConfigurationOutput struct{ *pulumi.OutputState }

func (OriginEndpointHlsManifestConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginEndpointHlsManifestConfiguration)(nil)).Elem()
}

func (o OriginEndpointHlsManifestConfigurationOutput) ToOriginEndpointHlsManifestConfigurationOutput() OriginEndpointHlsManifestConfigurationOutput {
	return o
}

func (o OriginEndpointHlsManifestConfigurationOutput) ToOriginEndpointHlsManifestConfigurationOutputWithContext(ctx context.Context) OriginEndpointHlsManifestConfigurationOutput {
	return o
}

func (o OriginEndpointHlsManifestConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[OriginEndpointHlsManifestConfiguration] {
	return pulumix.Output[OriginEndpointHlsManifestConfiguration]{
		OutputState: o.OutputState,
	}
}

// <p>A short string that's appended to the endpoint URL. The child manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default child manifest name, index_1. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.</p>
func (o OriginEndpointHlsManifestConfigurationOutput) ChildManifestName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OriginEndpointHlsManifestConfiguration) *string { return v.ChildManifestName }).(pulumi.StringPtrOutput)
}

func (o OriginEndpointHlsManifestConfigurationOutput) FilterConfiguration() OriginEndpointFilterConfigurationPtrOutput {
	return o.ApplyT(func(v OriginEndpointHlsManifestConfiguration) *OriginEndpointFilterConfiguration {
		return v.FilterConfiguration
	}).(OriginEndpointFilterConfigurationPtrOutput)
}

// <p>A short short string that's appended to the endpoint URL. The manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index. MediaPackage automatically inserts the format extension, such as .m3u8. You can't use the same manifest name if you use HLS manifest and low-latency HLS manifest. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.</p>
func (o OriginEndpointHlsManifestConfigurationOutput) ManifestName() pulumi.StringOutput {
	return o.ApplyT(func(v OriginEndpointHlsManifestConfiguration) string { return v.ManifestName }).(pulumi.StringOutput)
}

// <p>The total duration (in seconds) of the manifest's content.</p>
func (o OriginEndpointHlsManifestConfigurationOutput) ManifestWindowSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OriginEndpointHlsManifestConfiguration) *int { return v.ManifestWindowSeconds }).(pulumi.IntPtrOutput)
}

// <p>Inserts EXT-X-PROGRAM-DATE-TIME tags in the output manifest at the interval that you specify. If you don't enter an interval,
//
//	EXT-X-PROGRAM-DATE-TIME tags aren't included in the manifest.
//	The tags sync the stream to the wall clock so that viewers can seek to a specific time in the playback timeline on the player.
//	ID3Timed metadata messages generate every 5 seconds whenever the content is ingested.</p>
//	<p>Irrespective of this parameter, if any ID3Timed metadata is in the HLS input, it is passed through to the HLS output.</p>
func (o OriginEndpointHlsManifestConfigurationOutput) ProgramDateTimeIntervalSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OriginEndpointHlsManifestConfiguration) *int { return v.ProgramDateTimeIntervalSeconds }).(pulumi.IntPtrOutput)
}

func (o OriginEndpointHlsManifestConfigurationOutput) ScteHls() OriginEndpointScteHlsPtrOutput {
	return o.ApplyT(func(v OriginEndpointHlsManifestConfiguration) *OriginEndpointScteHls { return v.ScteHls }).(OriginEndpointScteHlsPtrOutput)
}

// <p>The egress domain URL for stream delivery from MediaPackage.</p>
func (o OriginEndpointHlsManifestConfigurationOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OriginEndpointHlsManifestConfiguration) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type OriginEndpointHlsManifestConfigurationArrayOutput struct{ *pulumi.OutputState }

func (OriginEndpointHlsManifestConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OriginEndpointHlsManifestConfiguration)(nil)).Elem()
}

func (o OriginEndpointHlsManifestConfigurationArrayOutput) ToOriginEndpointHlsManifestConfigurationArrayOutput() OriginEndpointHlsManifestConfigurationArrayOutput {
	return o
}

func (o OriginEndpointHlsManifestConfigurationArrayOutput) ToOriginEndpointHlsManifestConfigurationArrayOutputWithContext(ctx context.Context) OriginEndpointHlsManifestConfigurationArrayOutput {
	return o
}

func (o OriginEndpointHlsManifestConfigurationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]OriginEndpointHlsManifestConfiguration] {
	return pulumix.Output[[]OriginEndpointHlsManifestConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o OriginEndpointHlsManifestConfigurationArrayOutput) Index(i pulumi.IntInput) OriginEndpointHlsManifestConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OriginEndpointHlsManifestConfiguration {
		return vs[0].([]OriginEndpointHlsManifestConfiguration)[vs[1].(int)]
	}).(OriginEndpointHlsManifestConfigurationOutput)
}

// <p>Retrieve the low-latency HTTP live streaming (HLS) manifest configuration.</p>
type OriginEndpointLowLatencyHlsManifestConfiguration struct {
	// <p>A short string that's appended to the endpoint URL. The child manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default child manifest name, index_1. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.</p>
	ChildManifestName   *string                            `pulumi:"childManifestName"`
	FilterConfiguration *OriginEndpointFilterConfiguration `pulumi:"filterConfiguration"`
	// <p>A short short string that's appended to the endpoint URL. The manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index. MediaPackage automatically inserts the format extension, such as .m3u8. You can't use the same manifest name if you use HLS manifest and low-latency HLS manifest. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.</p>
	ManifestName string `pulumi:"manifestName"`
	// <p>The total duration (in seconds) of the manifest's content.</p>
	ManifestWindowSeconds *int `pulumi:"manifestWindowSeconds"`
	// <p>Inserts EXT-X-PROGRAM-DATE-TIME tags in the output manifest at the interval that you specify. If you don't enter an interval,
	//          EXT-X-PROGRAM-DATE-TIME tags aren't included in the manifest.
	//          The tags sync the stream to the wall clock so that viewers can seek to a specific time in the playback timeline on the player.
	//          ID3Timed metadata messages generate every 5 seconds whenever the content is ingested.</p>
	//          <p>Irrespective of this parameter, if any ID3Timed metadata is in the HLS input, it is passed through to the HLS output.</p>
	ProgramDateTimeIntervalSeconds *int                   `pulumi:"programDateTimeIntervalSeconds"`
	ScteHls                        *OriginEndpointScteHls `pulumi:"scteHls"`
	// <p>The egress domain URL for stream delivery from MediaPackage.</p>
	Url *string `pulumi:"url"`
}

// OriginEndpointLowLatencyHlsManifestConfigurationInput is an input type that accepts OriginEndpointLowLatencyHlsManifestConfigurationArgs and OriginEndpointLowLatencyHlsManifestConfigurationOutput values.
// You can construct a concrete instance of `OriginEndpointLowLatencyHlsManifestConfigurationInput` via:
//
//	OriginEndpointLowLatencyHlsManifestConfigurationArgs{...}
type OriginEndpointLowLatencyHlsManifestConfigurationInput interface {
	pulumi.Input

	ToOriginEndpointLowLatencyHlsManifestConfigurationOutput() OriginEndpointLowLatencyHlsManifestConfigurationOutput
	ToOriginEndpointLowLatencyHlsManifestConfigurationOutputWithContext(context.Context) OriginEndpointLowLatencyHlsManifestConfigurationOutput
}

// <p>Retrieve the low-latency HTTP live streaming (HLS) manifest configuration.</p>
type OriginEndpointLowLatencyHlsManifestConfigurationArgs struct {
	// <p>A short string that's appended to the endpoint URL. The child manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default child manifest name, index_1. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.</p>
	ChildManifestName   pulumi.StringPtrInput                     `pulumi:"childManifestName"`
	FilterConfiguration OriginEndpointFilterConfigurationPtrInput `pulumi:"filterConfiguration"`
	// <p>A short short string that's appended to the endpoint URL. The manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index. MediaPackage automatically inserts the format extension, such as .m3u8. You can't use the same manifest name if you use HLS manifest and low-latency HLS manifest. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.</p>
	ManifestName pulumi.StringInput `pulumi:"manifestName"`
	// <p>The total duration (in seconds) of the manifest's content.</p>
	ManifestWindowSeconds pulumi.IntPtrInput `pulumi:"manifestWindowSeconds"`
	// <p>Inserts EXT-X-PROGRAM-DATE-TIME tags in the output manifest at the interval that you specify. If you don't enter an interval,
	//          EXT-X-PROGRAM-DATE-TIME tags aren't included in the manifest.
	//          The tags sync the stream to the wall clock so that viewers can seek to a specific time in the playback timeline on the player.
	//          ID3Timed metadata messages generate every 5 seconds whenever the content is ingested.</p>
	//          <p>Irrespective of this parameter, if any ID3Timed metadata is in the HLS input, it is passed through to the HLS output.</p>
	ProgramDateTimeIntervalSeconds pulumi.IntPtrInput            `pulumi:"programDateTimeIntervalSeconds"`
	ScteHls                        OriginEndpointScteHlsPtrInput `pulumi:"scteHls"`
	// <p>The egress domain URL for stream delivery from MediaPackage.</p>
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (OriginEndpointLowLatencyHlsManifestConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginEndpointLowLatencyHlsManifestConfiguration)(nil)).Elem()
}

func (i OriginEndpointLowLatencyHlsManifestConfigurationArgs) ToOriginEndpointLowLatencyHlsManifestConfigurationOutput() OriginEndpointLowLatencyHlsManifestConfigurationOutput {
	return i.ToOriginEndpointLowLatencyHlsManifestConfigurationOutputWithContext(context.Background())
}

func (i OriginEndpointLowLatencyHlsManifestConfigurationArgs) ToOriginEndpointLowLatencyHlsManifestConfigurationOutputWithContext(ctx context.Context) OriginEndpointLowLatencyHlsManifestConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointLowLatencyHlsManifestConfigurationOutput)
}

func (i OriginEndpointLowLatencyHlsManifestConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[OriginEndpointLowLatencyHlsManifestConfiguration] {
	return pulumix.Output[OriginEndpointLowLatencyHlsManifestConfiguration]{
		OutputState: i.ToOriginEndpointLowLatencyHlsManifestConfigurationOutputWithContext(ctx).OutputState,
	}
}

// OriginEndpointLowLatencyHlsManifestConfigurationArrayInput is an input type that accepts OriginEndpointLowLatencyHlsManifestConfigurationArray and OriginEndpointLowLatencyHlsManifestConfigurationArrayOutput values.
// You can construct a concrete instance of `OriginEndpointLowLatencyHlsManifestConfigurationArrayInput` via:
//
//	OriginEndpointLowLatencyHlsManifestConfigurationArray{ OriginEndpointLowLatencyHlsManifestConfigurationArgs{...} }
type OriginEndpointLowLatencyHlsManifestConfigurationArrayInput interface {
	pulumi.Input

	ToOriginEndpointLowLatencyHlsManifestConfigurationArrayOutput() OriginEndpointLowLatencyHlsManifestConfigurationArrayOutput
	ToOriginEndpointLowLatencyHlsManifestConfigurationArrayOutputWithContext(context.Context) OriginEndpointLowLatencyHlsManifestConfigurationArrayOutput
}

type OriginEndpointLowLatencyHlsManifestConfigurationArray []OriginEndpointLowLatencyHlsManifestConfigurationInput

func (OriginEndpointLowLatencyHlsManifestConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OriginEndpointLowLatencyHlsManifestConfiguration)(nil)).Elem()
}

func (i OriginEndpointLowLatencyHlsManifestConfigurationArray) ToOriginEndpointLowLatencyHlsManifestConfigurationArrayOutput() OriginEndpointLowLatencyHlsManifestConfigurationArrayOutput {
	return i.ToOriginEndpointLowLatencyHlsManifestConfigurationArrayOutputWithContext(context.Background())
}

func (i OriginEndpointLowLatencyHlsManifestConfigurationArray) ToOriginEndpointLowLatencyHlsManifestConfigurationArrayOutputWithContext(ctx context.Context) OriginEndpointLowLatencyHlsManifestConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointLowLatencyHlsManifestConfigurationArrayOutput)
}

func (i OriginEndpointLowLatencyHlsManifestConfigurationArray) ToOutput(ctx context.Context) pulumix.Output[[]OriginEndpointLowLatencyHlsManifestConfiguration] {
	return pulumix.Output[[]OriginEndpointLowLatencyHlsManifestConfiguration]{
		OutputState: i.ToOriginEndpointLowLatencyHlsManifestConfigurationArrayOutputWithContext(ctx).OutputState,
	}
}

// <p>Retrieve the low-latency HTTP live streaming (HLS) manifest configuration.</p>
type OriginEndpointLowLatencyHlsManifestConfigurationOutput struct{ *pulumi.OutputState }

func (OriginEndpointLowLatencyHlsManifestConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginEndpointLowLatencyHlsManifestConfiguration)(nil)).Elem()
}

func (o OriginEndpointLowLatencyHlsManifestConfigurationOutput) ToOriginEndpointLowLatencyHlsManifestConfigurationOutput() OriginEndpointLowLatencyHlsManifestConfigurationOutput {
	return o
}

func (o OriginEndpointLowLatencyHlsManifestConfigurationOutput) ToOriginEndpointLowLatencyHlsManifestConfigurationOutputWithContext(ctx context.Context) OriginEndpointLowLatencyHlsManifestConfigurationOutput {
	return o
}

func (o OriginEndpointLowLatencyHlsManifestConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[OriginEndpointLowLatencyHlsManifestConfiguration] {
	return pulumix.Output[OriginEndpointLowLatencyHlsManifestConfiguration]{
		OutputState: o.OutputState,
	}
}

// <p>A short string that's appended to the endpoint URL. The child manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default child manifest name, index_1. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.</p>
func (o OriginEndpointLowLatencyHlsManifestConfigurationOutput) ChildManifestName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OriginEndpointLowLatencyHlsManifestConfiguration) *string { return v.ChildManifestName }).(pulumi.StringPtrOutput)
}

func (o OriginEndpointLowLatencyHlsManifestConfigurationOutput) FilterConfiguration() OriginEndpointFilterConfigurationPtrOutput {
	return o.ApplyT(func(v OriginEndpointLowLatencyHlsManifestConfiguration) *OriginEndpointFilterConfiguration {
		return v.FilterConfiguration
	}).(OriginEndpointFilterConfigurationPtrOutput)
}

// <p>A short short string that's appended to the endpoint URL. The manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index. MediaPackage automatically inserts the format extension, such as .m3u8. You can't use the same manifest name if you use HLS manifest and low-latency HLS manifest. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.</p>
func (o OriginEndpointLowLatencyHlsManifestConfigurationOutput) ManifestName() pulumi.StringOutput {
	return o.ApplyT(func(v OriginEndpointLowLatencyHlsManifestConfiguration) string { return v.ManifestName }).(pulumi.StringOutput)
}

// <p>The total duration (in seconds) of the manifest's content.</p>
func (o OriginEndpointLowLatencyHlsManifestConfigurationOutput) ManifestWindowSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OriginEndpointLowLatencyHlsManifestConfiguration) *int { return v.ManifestWindowSeconds }).(pulumi.IntPtrOutput)
}

// <p>Inserts EXT-X-PROGRAM-DATE-TIME tags in the output manifest at the interval that you specify. If you don't enter an interval,
//
//	EXT-X-PROGRAM-DATE-TIME tags aren't included in the manifest.
//	The tags sync the stream to the wall clock so that viewers can seek to a specific time in the playback timeline on the player.
//	ID3Timed metadata messages generate every 5 seconds whenever the content is ingested.</p>
//	<p>Irrespective of this parameter, if any ID3Timed metadata is in the HLS input, it is passed through to the HLS output.</p>
func (o OriginEndpointLowLatencyHlsManifestConfigurationOutput) ProgramDateTimeIntervalSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OriginEndpointLowLatencyHlsManifestConfiguration) *int { return v.ProgramDateTimeIntervalSeconds }).(pulumi.IntPtrOutput)
}

func (o OriginEndpointLowLatencyHlsManifestConfigurationOutput) ScteHls() OriginEndpointScteHlsPtrOutput {
	return o.ApplyT(func(v OriginEndpointLowLatencyHlsManifestConfiguration) *OriginEndpointScteHls { return v.ScteHls }).(OriginEndpointScteHlsPtrOutput)
}

// <p>The egress domain URL for stream delivery from MediaPackage.</p>
func (o OriginEndpointLowLatencyHlsManifestConfigurationOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OriginEndpointLowLatencyHlsManifestConfiguration) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type OriginEndpointLowLatencyHlsManifestConfigurationArrayOutput struct{ *pulumi.OutputState }

func (OriginEndpointLowLatencyHlsManifestConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OriginEndpointLowLatencyHlsManifestConfiguration)(nil)).Elem()
}

func (o OriginEndpointLowLatencyHlsManifestConfigurationArrayOutput) ToOriginEndpointLowLatencyHlsManifestConfigurationArrayOutput() OriginEndpointLowLatencyHlsManifestConfigurationArrayOutput {
	return o
}

func (o OriginEndpointLowLatencyHlsManifestConfigurationArrayOutput) ToOriginEndpointLowLatencyHlsManifestConfigurationArrayOutputWithContext(ctx context.Context) OriginEndpointLowLatencyHlsManifestConfigurationArrayOutput {
	return o
}

func (o OriginEndpointLowLatencyHlsManifestConfigurationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]OriginEndpointLowLatencyHlsManifestConfiguration] {
	return pulumix.Output[[]OriginEndpointLowLatencyHlsManifestConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o OriginEndpointLowLatencyHlsManifestConfigurationArrayOutput) Index(i pulumi.IntInput) OriginEndpointLowLatencyHlsManifestConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OriginEndpointLowLatencyHlsManifestConfiguration {
		return vs[0].([]OriginEndpointLowLatencyHlsManifestConfiguration)[vs[1].(int)]
	}).(OriginEndpointLowLatencyHlsManifestConfigurationOutput)
}

// <p>The SCTE configuration.</p>
type OriginEndpointScte struct {
	// <p>The SCTE-35 message types that you want to be treated as ad markers in the output.</p>
	ScteFilter []OriginEndpointScteFilter `pulumi:"scteFilter"`
}

// OriginEndpointScteInput is an input type that accepts OriginEndpointScteArgs and OriginEndpointScteOutput values.
// You can construct a concrete instance of `OriginEndpointScteInput` via:
//
//	OriginEndpointScteArgs{...}
type OriginEndpointScteInput interface {
	pulumi.Input

	ToOriginEndpointScteOutput() OriginEndpointScteOutput
	ToOriginEndpointScteOutputWithContext(context.Context) OriginEndpointScteOutput
}

// <p>The SCTE configuration.</p>
type OriginEndpointScteArgs struct {
	// <p>The SCTE-35 message types that you want to be treated as ad markers in the output.</p>
	ScteFilter OriginEndpointScteFilterArrayInput `pulumi:"scteFilter"`
}

func (OriginEndpointScteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginEndpointScte)(nil)).Elem()
}

func (i OriginEndpointScteArgs) ToOriginEndpointScteOutput() OriginEndpointScteOutput {
	return i.ToOriginEndpointScteOutputWithContext(context.Background())
}

func (i OriginEndpointScteArgs) ToOriginEndpointScteOutputWithContext(ctx context.Context) OriginEndpointScteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointScteOutput)
}

func (i OriginEndpointScteArgs) ToOutput(ctx context.Context) pulumix.Output[OriginEndpointScte] {
	return pulumix.Output[OriginEndpointScte]{
		OutputState: i.ToOriginEndpointScteOutputWithContext(ctx).OutputState,
	}
}

func (i OriginEndpointScteArgs) ToOriginEndpointSctePtrOutput() OriginEndpointSctePtrOutput {
	return i.ToOriginEndpointSctePtrOutputWithContext(context.Background())
}

func (i OriginEndpointScteArgs) ToOriginEndpointSctePtrOutputWithContext(ctx context.Context) OriginEndpointSctePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointScteOutput).ToOriginEndpointSctePtrOutputWithContext(ctx)
}

// OriginEndpointSctePtrInput is an input type that accepts OriginEndpointScteArgs, OriginEndpointSctePtr and OriginEndpointSctePtrOutput values.
// You can construct a concrete instance of `OriginEndpointSctePtrInput` via:
//
//	        OriginEndpointScteArgs{...}
//
//	or:
//
//	        nil
type OriginEndpointSctePtrInput interface {
	pulumi.Input

	ToOriginEndpointSctePtrOutput() OriginEndpointSctePtrOutput
	ToOriginEndpointSctePtrOutputWithContext(context.Context) OriginEndpointSctePtrOutput
}

type originEndpointSctePtrType OriginEndpointScteArgs

func OriginEndpointSctePtr(v *OriginEndpointScteArgs) OriginEndpointSctePtrInput {
	return (*originEndpointSctePtrType)(v)
}

func (*originEndpointSctePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OriginEndpointScte)(nil)).Elem()
}

func (i *originEndpointSctePtrType) ToOriginEndpointSctePtrOutput() OriginEndpointSctePtrOutput {
	return i.ToOriginEndpointSctePtrOutputWithContext(context.Background())
}

func (i *originEndpointSctePtrType) ToOriginEndpointSctePtrOutputWithContext(ctx context.Context) OriginEndpointSctePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointSctePtrOutput)
}

func (i *originEndpointSctePtrType) ToOutput(ctx context.Context) pulumix.Output[*OriginEndpointScte] {
	return pulumix.Output[*OriginEndpointScte]{
		OutputState: i.ToOriginEndpointSctePtrOutputWithContext(ctx).OutputState,
	}
}

// <p>The SCTE configuration.</p>
type OriginEndpointScteOutput struct{ *pulumi.OutputState }

func (OriginEndpointScteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginEndpointScte)(nil)).Elem()
}

func (o OriginEndpointScteOutput) ToOriginEndpointScteOutput() OriginEndpointScteOutput {
	return o
}

func (o OriginEndpointScteOutput) ToOriginEndpointScteOutputWithContext(ctx context.Context) OriginEndpointScteOutput {
	return o
}

func (o OriginEndpointScteOutput) ToOriginEndpointSctePtrOutput() OriginEndpointSctePtrOutput {
	return o.ToOriginEndpointSctePtrOutputWithContext(context.Background())
}

func (o OriginEndpointScteOutput) ToOriginEndpointSctePtrOutputWithContext(ctx context.Context) OriginEndpointSctePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OriginEndpointScte) *OriginEndpointScte {
		return &v
	}).(OriginEndpointSctePtrOutput)
}

func (o OriginEndpointScteOutput) ToOutput(ctx context.Context) pulumix.Output[OriginEndpointScte] {
	return pulumix.Output[OriginEndpointScte]{
		OutputState: o.OutputState,
	}
}

// <p>The SCTE-35 message types that you want to be treated as ad markers in the output.</p>
func (o OriginEndpointScteOutput) ScteFilter() OriginEndpointScteFilterArrayOutput {
	return o.ApplyT(func(v OriginEndpointScte) []OriginEndpointScteFilter { return v.ScteFilter }).(OriginEndpointScteFilterArrayOutput)
}

type OriginEndpointSctePtrOutput struct{ *pulumi.OutputState }

func (OriginEndpointSctePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OriginEndpointScte)(nil)).Elem()
}

func (o OriginEndpointSctePtrOutput) ToOriginEndpointSctePtrOutput() OriginEndpointSctePtrOutput {
	return o
}

func (o OriginEndpointSctePtrOutput) ToOriginEndpointSctePtrOutputWithContext(ctx context.Context) OriginEndpointSctePtrOutput {
	return o
}

func (o OriginEndpointSctePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*OriginEndpointScte] {
	return pulumix.Output[*OriginEndpointScte]{
		OutputState: o.OutputState,
	}
}

func (o OriginEndpointSctePtrOutput) Elem() OriginEndpointScteOutput {
	return o.ApplyT(func(v *OriginEndpointScte) OriginEndpointScte {
		if v != nil {
			return *v
		}
		var ret OriginEndpointScte
		return ret
	}).(OriginEndpointScteOutput)
}

// <p>The SCTE-35 message types that you want to be treated as ad markers in the output.</p>
func (o OriginEndpointSctePtrOutput) ScteFilter() OriginEndpointScteFilterArrayOutput {
	return o.ApplyT(func(v *OriginEndpointScte) []OriginEndpointScteFilter {
		if v == nil {
			return nil
		}
		return v.ScteFilter
	}).(OriginEndpointScteFilterArrayOutput)
}

// <p>The SCTE configuration.</p>
type OriginEndpointScteHls struct {
	AdMarkerHls *OriginEndpointAdMarkerHls `pulumi:"adMarkerHls"`
}

// OriginEndpointScteHlsInput is an input type that accepts OriginEndpointScteHlsArgs and OriginEndpointScteHlsOutput values.
// You can construct a concrete instance of `OriginEndpointScteHlsInput` via:
//
//	OriginEndpointScteHlsArgs{...}
type OriginEndpointScteHlsInput interface {
	pulumi.Input

	ToOriginEndpointScteHlsOutput() OriginEndpointScteHlsOutput
	ToOriginEndpointScteHlsOutputWithContext(context.Context) OriginEndpointScteHlsOutput
}

// <p>The SCTE configuration.</p>
type OriginEndpointScteHlsArgs struct {
	AdMarkerHls OriginEndpointAdMarkerHlsPtrInput `pulumi:"adMarkerHls"`
}

func (OriginEndpointScteHlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginEndpointScteHls)(nil)).Elem()
}

func (i OriginEndpointScteHlsArgs) ToOriginEndpointScteHlsOutput() OriginEndpointScteHlsOutput {
	return i.ToOriginEndpointScteHlsOutputWithContext(context.Background())
}

func (i OriginEndpointScteHlsArgs) ToOriginEndpointScteHlsOutputWithContext(ctx context.Context) OriginEndpointScteHlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointScteHlsOutput)
}

func (i OriginEndpointScteHlsArgs) ToOutput(ctx context.Context) pulumix.Output[OriginEndpointScteHls] {
	return pulumix.Output[OriginEndpointScteHls]{
		OutputState: i.ToOriginEndpointScteHlsOutputWithContext(ctx).OutputState,
	}
}

func (i OriginEndpointScteHlsArgs) ToOriginEndpointScteHlsPtrOutput() OriginEndpointScteHlsPtrOutput {
	return i.ToOriginEndpointScteHlsPtrOutputWithContext(context.Background())
}

func (i OriginEndpointScteHlsArgs) ToOriginEndpointScteHlsPtrOutputWithContext(ctx context.Context) OriginEndpointScteHlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointScteHlsOutput).ToOriginEndpointScteHlsPtrOutputWithContext(ctx)
}

// OriginEndpointScteHlsPtrInput is an input type that accepts OriginEndpointScteHlsArgs, OriginEndpointScteHlsPtr and OriginEndpointScteHlsPtrOutput values.
// You can construct a concrete instance of `OriginEndpointScteHlsPtrInput` via:
//
//	        OriginEndpointScteHlsArgs{...}
//
//	or:
//
//	        nil
type OriginEndpointScteHlsPtrInput interface {
	pulumi.Input

	ToOriginEndpointScteHlsPtrOutput() OriginEndpointScteHlsPtrOutput
	ToOriginEndpointScteHlsPtrOutputWithContext(context.Context) OriginEndpointScteHlsPtrOutput
}

type originEndpointScteHlsPtrType OriginEndpointScteHlsArgs

func OriginEndpointScteHlsPtr(v *OriginEndpointScteHlsArgs) OriginEndpointScteHlsPtrInput {
	return (*originEndpointScteHlsPtrType)(v)
}

func (*originEndpointScteHlsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OriginEndpointScteHls)(nil)).Elem()
}

func (i *originEndpointScteHlsPtrType) ToOriginEndpointScteHlsPtrOutput() OriginEndpointScteHlsPtrOutput {
	return i.ToOriginEndpointScteHlsPtrOutputWithContext(context.Background())
}

func (i *originEndpointScteHlsPtrType) ToOriginEndpointScteHlsPtrOutputWithContext(ctx context.Context) OriginEndpointScteHlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointScteHlsPtrOutput)
}

func (i *originEndpointScteHlsPtrType) ToOutput(ctx context.Context) pulumix.Output[*OriginEndpointScteHls] {
	return pulumix.Output[*OriginEndpointScteHls]{
		OutputState: i.ToOriginEndpointScteHlsPtrOutputWithContext(ctx).OutputState,
	}
}

// <p>The SCTE configuration.</p>
type OriginEndpointScteHlsOutput struct{ *pulumi.OutputState }

func (OriginEndpointScteHlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginEndpointScteHls)(nil)).Elem()
}

func (o OriginEndpointScteHlsOutput) ToOriginEndpointScteHlsOutput() OriginEndpointScteHlsOutput {
	return o
}

func (o OriginEndpointScteHlsOutput) ToOriginEndpointScteHlsOutputWithContext(ctx context.Context) OriginEndpointScteHlsOutput {
	return o
}

func (o OriginEndpointScteHlsOutput) ToOriginEndpointScteHlsPtrOutput() OriginEndpointScteHlsPtrOutput {
	return o.ToOriginEndpointScteHlsPtrOutputWithContext(context.Background())
}

func (o OriginEndpointScteHlsOutput) ToOriginEndpointScteHlsPtrOutputWithContext(ctx context.Context) OriginEndpointScteHlsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OriginEndpointScteHls) *OriginEndpointScteHls {
		return &v
	}).(OriginEndpointScteHlsPtrOutput)
}

func (o OriginEndpointScteHlsOutput) ToOutput(ctx context.Context) pulumix.Output[OriginEndpointScteHls] {
	return pulumix.Output[OriginEndpointScteHls]{
		OutputState: o.OutputState,
	}
}

func (o OriginEndpointScteHlsOutput) AdMarkerHls() OriginEndpointAdMarkerHlsPtrOutput {
	return o.ApplyT(func(v OriginEndpointScteHls) *OriginEndpointAdMarkerHls { return v.AdMarkerHls }).(OriginEndpointAdMarkerHlsPtrOutput)
}

type OriginEndpointScteHlsPtrOutput struct{ *pulumi.OutputState }

func (OriginEndpointScteHlsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OriginEndpointScteHls)(nil)).Elem()
}

func (o OriginEndpointScteHlsPtrOutput) ToOriginEndpointScteHlsPtrOutput() OriginEndpointScteHlsPtrOutput {
	return o
}

func (o OriginEndpointScteHlsPtrOutput) ToOriginEndpointScteHlsPtrOutputWithContext(ctx context.Context) OriginEndpointScteHlsPtrOutput {
	return o
}

func (o OriginEndpointScteHlsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*OriginEndpointScteHls] {
	return pulumix.Output[*OriginEndpointScteHls]{
		OutputState: o.OutputState,
	}
}

func (o OriginEndpointScteHlsPtrOutput) Elem() OriginEndpointScteHlsOutput {
	return o.ApplyT(func(v *OriginEndpointScteHls) OriginEndpointScteHls {
		if v != nil {
			return *v
		}
		var ret OriginEndpointScteHls
		return ret
	}).(OriginEndpointScteHlsOutput)
}

func (o OriginEndpointScteHlsPtrOutput) AdMarkerHls() OriginEndpointAdMarkerHlsPtrOutput {
	return o.ApplyT(func(v *OriginEndpointScteHls) *OriginEndpointAdMarkerHls {
		if v == nil {
			return nil
		}
		return v.AdMarkerHls
	}).(OriginEndpointAdMarkerHlsPtrOutput)
}

// <p>The segment configuration, including the segment name, duration, and other configuration values.</p>
type OriginEndpointSegment struct {
	Encryption *OriginEndpointEncryption `pulumi:"encryption"`
	// <p>When selected, the stream set includes an additional I-frame only stream, along with the other tracks. If false, this extra stream is not included. MediaPackage generates an I-frame only stream from the first rendition in the manifest. The service inserts EXT-I-FRAMES-ONLY tags in the output manifest, and then generates and includes an I-frames only playlist in the stream. This playlist permits player functionality like fast forward and rewind.</p>
	IncludeIframeOnlyStreams *bool               `pulumi:"includeIframeOnlyStreams"`
	Scte                     *OriginEndpointScte `pulumi:"scte"`
	// <p>The duration (in seconds) of each segment. Enter a value equal to, or a multiple of, the input segment duration. If the value that you enter is different from the input segment duration, MediaPackage rounds segments to the nearest multiple of the input segment duration.</p>
	SegmentDurationSeconds *int `pulumi:"segmentDurationSeconds"`
	// <p>The name that describes the segment. The name is the base name of the segment used in all content manifests inside of the endpoint. You can't use spaces in the name.</p>
	SegmentName *string `pulumi:"segmentName"`
	// <p>By default, MediaPackage excludes all digital video broadcasting (DVB) subtitles from the output. When selected, MediaPackage passes through DVB subtitles into the output.</p>
	TsIncludeDvbSubtitles *bool `pulumi:"tsIncludeDvbSubtitles"`
	// <p>When selected, MediaPackage bundles all audio tracks in a rendition group. All other tracks in the stream can be used with any audio rendition from the group.</p>
	TsUseAudioRenditionGroup *bool `pulumi:"tsUseAudioRenditionGroup"`
}

// OriginEndpointSegmentInput is an input type that accepts OriginEndpointSegmentArgs and OriginEndpointSegmentOutput values.
// You can construct a concrete instance of `OriginEndpointSegmentInput` via:
//
//	OriginEndpointSegmentArgs{...}
type OriginEndpointSegmentInput interface {
	pulumi.Input

	ToOriginEndpointSegmentOutput() OriginEndpointSegmentOutput
	ToOriginEndpointSegmentOutputWithContext(context.Context) OriginEndpointSegmentOutput
}

// <p>The segment configuration, including the segment name, duration, and other configuration values.</p>
type OriginEndpointSegmentArgs struct {
	Encryption OriginEndpointEncryptionPtrInput `pulumi:"encryption"`
	// <p>When selected, the stream set includes an additional I-frame only stream, along with the other tracks. If false, this extra stream is not included. MediaPackage generates an I-frame only stream from the first rendition in the manifest. The service inserts EXT-I-FRAMES-ONLY tags in the output manifest, and then generates and includes an I-frames only playlist in the stream. This playlist permits player functionality like fast forward and rewind.</p>
	IncludeIframeOnlyStreams pulumi.BoolPtrInput        `pulumi:"includeIframeOnlyStreams"`
	Scte                     OriginEndpointSctePtrInput `pulumi:"scte"`
	// <p>The duration (in seconds) of each segment. Enter a value equal to, or a multiple of, the input segment duration. If the value that you enter is different from the input segment duration, MediaPackage rounds segments to the nearest multiple of the input segment duration.</p>
	SegmentDurationSeconds pulumi.IntPtrInput `pulumi:"segmentDurationSeconds"`
	// <p>The name that describes the segment. The name is the base name of the segment used in all content manifests inside of the endpoint. You can't use spaces in the name.</p>
	SegmentName pulumi.StringPtrInput `pulumi:"segmentName"`
	// <p>By default, MediaPackage excludes all digital video broadcasting (DVB) subtitles from the output. When selected, MediaPackage passes through DVB subtitles into the output.</p>
	TsIncludeDvbSubtitles pulumi.BoolPtrInput `pulumi:"tsIncludeDvbSubtitles"`
	// <p>When selected, MediaPackage bundles all audio tracks in a rendition group. All other tracks in the stream can be used with any audio rendition from the group.</p>
	TsUseAudioRenditionGroup pulumi.BoolPtrInput `pulumi:"tsUseAudioRenditionGroup"`
}

func (OriginEndpointSegmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginEndpointSegment)(nil)).Elem()
}

func (i OriginEndpointSegmentArgs) ToOriginEndpointSegmentOutput() OriginEndpointSegmentOutput {
	return i.ToOriginEndpointSegmentOutputWithContext(context.Background())
}

func (i OriginEndpointSegmentArgs) ToOriginEndpointSegmentOutputWithContext(ctx context.Context) OriginEndpointSegmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointSegmentOutput)
}

func (i OriginEndpointSegmentArgs) ToOutput(ctx context.Context) pulumix.Output[OriginEndpointSegment] {
	return pulumix.Output[OriginEndpointSegment]{
		OutputState: i.ToOriginEndpointSegmentOutputWithContext(ctx).OutputState,
	}
}

func (i OriginEndpointSegmentArgs) ToOriginEndpointSegmentPtrOutput() OriginEndpointSegmentPtrOutput {
	return i.ToOriginEndpointSegmentPtrOutputWithContext(context.Background())
}

func (i OriginEndpointSegmentArgs) ToOriginEndpointSegmentPtrOutputWithContext(ctx context.Context) OriginEndpointSegmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointSegmentOutput).ToOriginEndpointSegmentPtrOutputWithContext(ctx)
}

// OriginEndpointSegmentPtrInput is an input type that accepts OriginEndpointSegmentArgs, OriginEndpointSegmentPtr and OriginEndpointSegmentPtrOutput values.
// You can construct a concrete instance of `OriginEndpointSegmentPtrInput` via:
//
//	        OriginEndpointSegmentArgs{...}
//
//	or:
//
//	        nil
type OriginEndpointSegmentPtrInput interface {
	pulumi.Input

	ToOriginEndpointSegmentPtrOutput() OriginEndpointSegmentPtrOutput
	ToOriginEndpointSegmentPtrOutputWithContext(context.Context) OriginEndpointSegmentPtrOutput
}

type originEndpointSegmentPtrType OriginEndpointSegmentArgs

func OriginEndpointSegmentPtr(v *OriginEndpointSegmentArgs) OriginEndpointSegmentPtrInput {
	return (*originEndpointSegmentPtrType)(v)
}

func (*originEndpointSegmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OriginEndpointSegment)(nil)).Elem()
}

func (i *originEndpointSegmentPtrType) ToOriginEndpointSegmentPtrOutput() OriginEndpointSegmentPtrOutput {
	return i.ToOriginEndpointSegmentPtrOutputWithContext(context.Background())
}

func (i *originEndpointSegmentPtrType) ToOriginEndpointSegmentPtrOutputWithContext(ctx context.Context) OriginEndpointSegmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointSegmentPtrOutput)
}

func (i *originEndpointSegmentPtrType) ToOutput(ctx context.Context) pulumix.Output[*OriginEndpointSegment] {
	return pulumix.Output[*OriginEndpointSegment]{
		OutputState: i.ToOriginEndpointSegmentPtrOutputWithContext(ctx).OutputState,
	}
}

// <p>The segment configuration, including the segment name, duration, and other configuration values.</p>
type OriginEndpointSegmentOutput struct{ *pulumi.OutputState }

func (OriginEndpointSegmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginEndpointSegment)(nil)).Elem()
}

func (o OriginEndpointSegmentOutput) ToOriginEndpointSegmentOutput() OriginEndpointSegmentOutput {
	return o
}

func (o OriginEndpointSegmentOutput) ToOriginEndpointSegmentOutputWithContext(ctx context.Context) OriginEndpointSegmentOutput {
	return o
}

func (o OriginEndpointSegmentOutput) ToOriginEndpointSegmentPtrOutput() OriginEndpointSegmentPtrOutput {
	return o.ToOriginEndpointSegmentPtrOutputWithContext(context.Background())
}

func (o OriginEndpointSegmentOutput) ToOriginEndpointSegmentPtrOutputWithContext(ctx context.Context) OriginEndpointSegmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OriginEndpointSegment) *OriginEndpointSegment {
		return &v
	}).(OriginEndpointSegmentPtrOutput)
}

func (o OriginEndpointSegmentOutput) ToOutput(ctx context.Context) pulumix.Output[OriginEndpointSegment] {
	return pulumix.Output[OriginEndpointSegment]{
		OutputState: o.OutputState,
	}
}

func (o OriginEndpointSegmentOutput) Encryption() OriginEndpointEncryptionPtrOutput {
	return o.ApplyT(func(v OriginEndpointSegment) *OriginEndpointEncryption { return v.Encryption }).(OriginEndpointEncryptionPtrOutput)
}

// <p>When selected, the stream set includes an additional I-frame only stream, along with the other tracks. If false, this extra stream is not included. MediaPackage generates an I-frame only stream from the first rendition in the manifest. The service inserts EXT-I-FRAMES-ONLY tags in the output manifest, and then generates and includes an I-frames only playlist in the stream. This playlist permits player functionality like fast forward and rewind.</p>
func (o OriginEndpointSegmentOutput) IncludeIframeOnlyStreams() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OriginEndpointSegment) *bool { return v.IncludeIframeOnlyStreams }).(pulumi.BoolPtrOutput)
}

func (o OriginEndpointSegmentOutput) Scte() OriginEndpointSctePtrOutput {
	return o.ApplyT(func(v OriginEndpointSegment) *OriginEndpointScte { return v.Scte }).(OriginEndpointSctePtrOutput)
}

// <p>The duration (in seconds) of each segment. Enter a value equal to, or a multiple of, the input segment duration. If the value that you enter is different from the input segment duration, MediaPackage rounds segments to the nearest multiple of the input segment duration.</p>
func (o OriginEndpointSegmentOutput) SegmentDurationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OriginEndpointSegment) *int { return v.SegmentDurationSeconds }).(pulumi.IntPtrOutput)
}

// <p>The name that describes the segment. The name is the base name of the segment used in all content manifests inside of the endpoint. You can't use spaces in the name.</p>
func (o OriginEndpointSegmentOutput) SegmentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OriginEndpointSegment) *string { return v.SegmentName }).(pulumi.StringPtrOutput)
}

// <p>By default, MediaPackage excludes all digital video broadcasting (DVB) subtitles from the output. When selected, MediaPackage passes through DVB subtitles into the output.</p>
func (o OriginEndpointSegmentOutput) TsIncludeDvbSubtitles() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OriginEndpointSegment) *bool { return v.TsIncludeDvbSubtitles }).(pulumi.BoolPtrOutput)
}

// <p>When selected, MediaPackage bundles all audio tracks in a rendition group. All other tracks in the stream can be used with any audio rendition from the group.</p>
func (o OriginEndpointSegmentOutput) TsUseAudioRenditionGroup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OriginEndpointSegment) *bool { return v.TsUseAudioRenditionGroup }).(pulumi.BoolPtrOutput)
}

type OriginEndpointSegmentPtrOutput struct{ *pulumi.OutputState }

func (OriginEndpointSegmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OriginEndpointSegment)(nil)).Elem()
}

func (o OriginEndpointSegmentPtrOutput) ToOriginEndpointSegmentPtrOutput() OriginEndpointSegmentPtrOutput {
	return o
}

func (o OriginEndpointSegmentPtrOutput) ToOriginEndpointSegmentPtrOutputWithContext(ctx context.Context) OriginEndpointSegmentPtrOutput {
	return o
}

func (o OriginEndpointSegmentPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*OriginEndpointSegment] {
	return pulumix.Output[*OriginEndpointSegment]{
		OutputState: o.OutputState,
	}
}

func (o OriginEndpointSegmentPtrOutput) Elem() OriginEndpointSegmentOutput {
	return o.ApplyT(func(v *OriginEndpointSegment) OriginEndpointSegment {
		if v != nil {
			return *v
		}
		var ret OriginEndpointSegment
		return ret
	}).(OriginEndpointSegmentOutput)
}

func (o OriginEndpointSegmentPtrOutput) Encryption() OriginEndpointEncryptionPtrOutput {
	return o.ApplyT(func(v *OriginEndpointSegment) *OriginEndpointEncryption {
		if v == nil {
			return nil
		}
		return v.Encryption
	}).(OriginEndpointEncryptionPtrOutput)
}

// <p>When selected, the stream set includes an additional I-frame only stream, along with the other tracks. If false, this extra stream is not included. MediaPackage generates an I-frame only stream from the first rendition in the manifest. The service inserts EXT-I-FRAMES-ONLY tags in the output manifest, and then generates and includes an I-frames only playlist in the stream. This playlist permits player functionality like fast forward and rewind.</p>
func (o OriginEndpointSegmentPtrOutput) IncludeIframeOnlyStreams() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OriginEndpointSegment) *bool {
		if v == nil {
			return nil
		}
		return v.IncludeIframeOnlyStreams
	}).(pulumi.BoolPtrOutput)
}

func (o OriginEndpointSegmentPtrOutput) Scte() OriginEndpointSctePtrOutput {
	return o.ApplyT(func(v *OriginEndpointSegment) *OriginEndpointScte {
		if v == nil {
			return nil
		}
		return v.Scte
	}).(OriginEndpointSctePtrOutput)
}

// <p>The duration (in seconds) of each segment. Enter a value equal to, or a multiple of, the input segment duration. If the value that you enter is different from the input segment duration, MediaPackage rounds segments to the nearest multiple of the input segment duration.</p>
func (o OriginEndpointSegmentPtrOutput) SegmentDurationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OriginEndpointSegment) *int {
		if v == nil {
			return nil
		}
		return v.SegmentDurationSeconds
	}).(pulumi.IntPtrOutput)
}

// <p>The name that describes the segment. The name is the base name of the segment used in all content manifests inside of the endpoint. You can't use spaces in the name.</p>
func (o OriginEndpointSegmentPtrOutput) SegmentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OriginEndpointSegment) *string {
		if v == nil {
			return nil
		}
		return v.SegmentName
	}).(pulumi.StringPtrOutput)
}

// <p>By default, MediaPackage excludes all digital video broadcasting (DVB) subtitles from the output. When selected, MediaPackage passes through DVB subtitles into the output.</p>
func (o OriginEndpointSegmentPtrOutput) TsIncludeDvbSubtitles() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OriginEndpointSegment) *bool {
		if v == nil {
			return nil
		}
		return v.TsIncludeDvbSubtitles
	}).(pulumi.BoolPtrOutput)
}

// <p>When selected, MediaPackage bundles all audio tracks in a rendition group. All other tracks in the stream can be used with any audio rendition from the group.</p>
func (o OriginEndpointSegmentPtrOutput) TsUseAudioRenditionGroup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OriginEndpointSegment) *bool {
		if v == nil {
			return nil
		}
		return v.TsUseAudioRenditionGroup
	}).(pulumi.BoolPtrOutput)
}

// <p>The parameters for the SPEKE key provider.</p>
type OriginEndpointSpekeKeyProvider struct {
	// <p>The DRM solution provider you're using to protect your content during distribution.</p>
	DrmSystems                      []OriginEndpointDrmSystem                     `pulumi:"drmSystems"`
	EncryptionContractConfiguration OriginEndpointEncryptionContractConfiguration `pulumi:"encryptionContractConfiguration"`
	// <p>The unique identifier for the content. The service sends this to the key server to identify the current endpoint. How unique you make this depends on how fine-grained you want access controls to be. The service does not permit you to use the same ID for two simultaneous encryption processes. The resource ID is also known as the content ID.</p>
	//          <p>The following example shows a resource ID: <code>MovieNight20171126093045</code>
	//          </p>
	ResourceId string `pulumi:"resourceId"`
	// <p>The ARN for the IAM role granted by the key provider that provides access to the key provider API. This role must have a trust policy that allows MediaPackage to assume the role, and it must have a sufficient permissions policy to allow access to the specific key retrieval URL. Get this from your DRM solution provider.</p>
	//          <p>Valid format: <code>arn:aws:iam::{accountID}:role/{name}</code>. The following example shows a role ARN: <code>arn:aws:iam::444455556666:role/SpekeAccess</code>
	//          </p>
	RoleArn string `pulumi:"roleArn"`
	// <p>The URL of the API Gateway proxy that you set up to talk to your key server. The API Gateway proxy must reside in the same AWS Region as MediaPackage and must start with https://.</p>
	//          <p>The following example shows a URL: <code>https://1wm2dx1f33.execute-api.us-west-2.amazonaws.com/SpekeSample/copyProtection</code>
	//          </p>
	Url string `pulumi:"url"`
}

// OriginEndpointSpekeKeyProviderInput is an input type that accepts OriginEndpointSpekeKeyProviderArgs and OriginEndpointSpekeKeyProviderOutput values.
// You can construct a concrete instance of `OriginEndpointSpekeKeyProviderInput` via:
//
//	OriginEndpointSpekeKeyProviderArgs{...}
type OriginEndpointSpekeKeyProviderInput interface {
	pulumi.Input

	ToOriginEndpointSpekeKeyProviderOutput() OriginEndpointSpekeKeyProviderOutput
	ToOriginEndpointSpekeKeyProviderOutputWithContext(context.Context) OriginEndpointSpekeKeyProviderOutput
}

// <p>The parameters for the SPEKE key provider.</p>
type OriginEndpointSpekeKeyProviderArgs struct {
	// <p>The DRM solution provider you're using to protect your content during distribution.</p>
	DrmSystems                      OriginEndpointDrmSystemArrayInput                  `pulumi:"drmSystems"`
	EncryptionContractConfiguration OriginEndpointEncryptionContractConfigurationInput `pulumi:"encryptionContractConfiguration"`
	// <p>The unique identifier for the content. The service sends this to the key server to identify the current endpoint. How unique you make this depends on how fine-grained you want access controls to be. The service does not permit you to use the same ID for two simultaneous encryption processes. The resource ID is also known as the content ID.</p>
	//          <p>The following example shows a resource ID: <code>MovieNight20171126093045</code>
	//          </p>
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
	// <p>The ARN for the IAM role granted by the key provider that provides access to the key provider API. This role must have a trust policy that allows MediaPackage to assume the role, and it must have a sufficient permissions policy to allow access to the specific key retrieval URL. Get this from your DRM solution provider.</p>
	//          <p>Valid format: <code>arn:aws:iam::{accountID}:role/{name}</code>. The following example shows a role ARN: <code>arn:aws:iam::444455556666:role/SpekeAccess</code>
	//          </p>
	RoleArn pulumi.StringInput `pulumi:"roleArn"`
	// <p>The URL of the API Gateway proxy that you set up to talk to your key server. The API Gateway proxy must reside in the same AWS Region as MediaPackage and must start with https://.</p>
	//          <p>The following example shows a URL: <code>https://1wm2dx1f33.execute-api.us-west-2.amazonaws.com/SpekeSample/copyProtection</code>
	//          </p>
	Url pulumi.StringInput `pulumi:"url"`
}

func (OriginEndpointSpekeKeyProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginEndpointSpekeKeyProvider)(nil)).Elem()
}

func (i OriginEndpointSpekeKeyProviderArgs) ToOriginEndpointSpekeKeyProviderOutput() OriginEndpointSpekeKeyProviderOutput {
	return i.ToOriginEndpointSpekeKeyProviderOutputWithContext(context.Background())
}

func (i OriginEndpointSpekeKeyProviderArgs) ToOriginEndpointSpekeKeyProviderOutputWithContext(ctx context.Context) OriginEndpointSpekeKeyProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointSpekeKeyProviderOutput)
}

func (i OriginEndpointSpekeKeyProviderArgs) ToOutput(ctx context.Context) pulumix.Output[OriginEndpointSpekeKeyProvider] {
	return pulumix.Output[OriginEndpointSpekeKeyProvider]{
		OutputState: i.ToOriginEndpointSpekeKeyProviderOutputWithContext(ctx).OutputState,
	}
}

func (i OriginEndpointSpekeKeyProviderArgs) ToOriginEndpointSpekeKeyProviderPtrOutput() OriginEndpointSpekeKeyProviderPtrOutput {
	return i.ToOriginEndpointSpekeKeyProviderPtrOutputWithContext(context.Background())
}

func (i OriginEndpointSpekeKeyProviderArgs) ToOriginEndpointSpekeKeyProviderPtrOutputWithContext(ctx context.Context) OriginEndpointSpekeKeyProviderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointSpekeKeyProviderOutput).ToOriginEndpointSpekeKeyProviderPtrOutputWithContext(ctx)
}

// OriginEndpointSpekeKeyProviderPtrInput is an input type that accepts OriginEndpointSpekeKeyProviderArgs, OriginEndpointSpekeKeyProviderPtr and OriginEndpointSpekeKeyProviderPtrOutput values.
// You can construct a concrete instance of `OriginEndpointSpekeKeyProviderPtrInput` via:
//
//	        OriginEndpointSpekeKeyProviderArgs{...}
//
//	or:
//
//	        nil
type OriginEndpointSpekeKeyProviderPtrInput interface {
	pulumi.Input

	ToOriginEndpointSpekeKeyProviderPtrOutput() OriginEndpointSpekeKeyProviderPtrOutput
	ToOriginEndpointSpekeKeyProviderPtrOutputWithContext(context.Context) OriginEndpointSpekeKeyProviderPtrOutput
}

type originEndpointSpekeKeyProviderPtrType OriginEndpointSpekeKeyProviderArgs

func OriginEndpointSpekeKeyProviderPtr(v *OriginEndpointSpekeKeyProviderArgs) OriginEndpointSpekeKeyProviderPtrInput {
	return (*originEndpointSpekeKeyProviderPtrType)(v)
}

func (*originEndpointSpekeKeyProviderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OriginEndpointSpekeKeyProvider)(nil)).Elem()
}

func (i *originEndpointSpekeKeyProviderPtrType) ToOriginEndpointSpekeKeyProviderPtrOutput() OriginEndpointSpekeKeyProviderPtrOutput {
	return i.ToOriginEndpointSpekeKeyProviderPtrOutputWithContext(context.Background())
}

func (i *originEndpointSpekeKeyProviderPtrType) ToOriginEndpointSpekeKeyProviderPtrOutputWithContext(ctx context.Context) OriginEndpointSpekeKeyProviderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointSpekeKeyProviderPtrOutput)
}

func (i *originEndpointSpekeKeyProviderPtrType) ToOutput(ctx context.Context) pulumix.Output[*OriginEndpointSpekeKeyProvider] {
	return pulumix.Output[*OriginEndpointSpekeKeyProvider]{
		OutputState: i.ToOriginEndpointSpekeKeyProviderPtrOutputWithContext(ctx).OutputState,
	}
}

// <p>The parameters for the SPEKE key provider.</p>
type OriginEndpointSpekeKeyProviderOutput struct{ *pulumi.OutputState }

func (OriginEndpointSpekeKeyProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginEndpointSpekeKeyProvider)(nil)).Elem()
}

func (o OriginEndpointSpekeKeyProviderOutput) ToOriginEndpointSpekeKeyProviderOutput() OriginEndpointSpekeKeyProviderOutput {
	return o
}

func (o OriginEndpointSpekeKeyProviderOutput) ToOriginEndpointSpekeKeyProviderOutputWithContext(ctx context.Context) OriginEndpointSpekeKeyProviderOutput {
	return o
}

func (o OriginEndpointSpekeKeyProviderOutput) ToOriginEndpointSpekeKeyProviderPtrOutput() OriginEndpointSpekeKeyProviderPtrOutput {
	return o.ToOriginEndpointSpekeKeyProviderPtrOutputWithContext(context.Background())
}

func (o OriginEndpointSpekeKeyProviderOutput) ToOriginEndpointSpekeKeyProviderPtrOutputWithContext(ctx context.Context) OriginEndpointSpekeKeyProviderPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OriginEndpointSpekeKeyProvider) *OriginEndpointSpekeKeyProvider {
		return &v
	}).(OriginEndpointSpekeKeyProviderPtrOutput)
}

func (o OriginEndpointSpekeKeyProviderOutput) ToOutput(ctx context.Context) pulumix.Output[OriginEndpointSpekeKeyProvider] {
	return pulumix.Output[OriginEndpointSpekeKeyProvider]{
		OutputState: o.OutputState,
	}
}

// <p>The DRM solution provider you're using to protect your content during distribution.</p>
func (o OriginEndpointSpekeKeyProviderOutput) DrmSystems() OriginEndpointDrmSystemArrayOutput {
	return o.ApplyT(func(v OriginEndpointSpekeKeyProvider) []OriginEndpointDrmSystem { return v.DrmSystems }).(OriginEndpointDrmSystemArrayOutput)
}

func (o OriginEndpointSpekeKeyProviderOutput) EncryptionContractConfiguration() OriginEndpointEncryptionContractConfigurationOutput {
	return o.ApplyT(func(v OriginEndpointSpekeKeyProvider) OriginEndpointEncryptionContractConfiguration {
		return v.EncryptionContractConfiguration
	}).(OriginEndpointEncryptionContractConfigurationOutput)
}

// <p>The unique identifier for the content. The service sends this to the key server to identify the current endpoint. How unique you make this depends on how fine-grained you want access controls to be. The service does not permit you to use the same ID for two simultaneous encryption processes. The resource ID is also known as the content ID.</p>
//
//	<p>The following example shows a resource ID: <code>MovieNight20171126093045</code>
//	</p>
func (o OriginEndpointSpekeKeyProviderOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v OriginEndpointSpekeKeyProvider) string { return v.ResourceId }).(pulumi.StringOutput)
}

// <p>The ARN for the IAM role granted by the key provider that provides access to the key provider API. This role must have a trust policy that allows MediaPackage to assume the role, and it must have a sufficient permissions policy to allow access to the specific key retrieval URL. Get this from your DRM solution provider.</p>
//
//	<p>Valid format: <code>arn:aws:iam::{accountID}:role/{name}</code>. The following example shows a role ARN: <code>arn:aws:iam::444455556666:role/SpekeAccess</code>
//	</p>
func (o OriginEndpointSpekeKeyProviderOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v OriginEndpointSpekeKeyProvider) string { return v.RoleArn }).(pulumi.StringOutput)
}

// <p>The URL of the API Gateway proxy that you set up to talk to your key server. The API Gateway proxy must reside in the same AWS Region as MediaPackage and must start with https://.</p>
//
//	<p>The following example shows a URL: <code>https://1wm2dx1f33.execute-api.us-west-2.amazonaws.com/SpekeSample/copyProtection</code>
//	</p>
func (o OriginEndpointSpekeKeyProviderOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v OriginEndpointSpekeKeyProvider) string { return v.Url }).(pulumi.StringOutput)
}

type OriginEndpointSpekeKeyProviderPtrOutput struct{ *pulumi.OutputState }

func (OriginEndpointSpekeKeyProviderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OriginEndpointSpekeKeyProvider)(nil)).Elem()
}

func (o OriginEndpointSpekeKeyProviderPtrOutput) ToOriginEndpointSpekeKeyProviderPtrOutput() OriginEndpointSpekeKeyProviderPtrOutput {
	return o
}

func (o OriginEndpointSpekeKeyProviderPtrOutput) ToOriginEndpointSpekeKeyProviderPtrOutputWithContext(ctx context.Context) OriginEndpointSpekeKeyProviderPtrOutput {
	return o
}

func (o OriginEndpointSpekeKeyProviderPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*OriginEndpointSpekeKeyProvider] {
	return pulumix.Output[*OriginEndpointSpekeKeyProvider]{
		OutputState: o.OutputState,
	}
}

func (o OriginEndpointSpekeKeyProviderPtrOutput) Elem() OriginEndpointSpekeKeyProviderOutput {
	return o.ApplyT(func(v *OriginEndpointSpekeKeyProvider) OriginEndpointSpekeKeyProvider {
		if v != nil {
			return *v
		}
		var ret OriginEndpointSpekeKeyProvider
		return ret
	}).(OriginEndpointSpekeKeyProviderOutput)
}

// <p>The DRM solution provider you're using to protect your content during distribution.</p>
func (o OriginEndpointSpekeKeyProviderPtrOutput) DrmSystems() OriginEndpointDrmSystemArrayOutput {
	return o.ApplyT(func(v *OriginEndpointSpekeKeyProvider) []OriginEndpointDrmSystem {
		if v == nil {
			return nil
		}
		return v.DrmSystems
	}).(OriginEndpointDrmSystemArrayOutput)
}

func (o OriginEndpointSpekeKeyProviderPtrOutput) EncryptionContractConfiguration() OriginEndpointEncryptionContractConfigurationPtrOutput {
	return o.ApplyT(func(v *OriginEndpointSpekeKeyProvider) *OriginEndpointEncryptionContractConfiguration {
		if v == nil {
			return nil
		}
		return &v.EncryptionContractConfiguration
	}).(OriginEndpointEncryptionContractConfigurationPtrOutput)
}

// <p>The unique identifier for the content. The service sends this to the key server to identify the current endpoint. How unique you make this depends on how fine-grained you want access controls to be. The service does not permit you to use the same ID for two simultaneous encryption processes. The resource ID is also known as the content ID.</p>
//
//	<p>The following example shows a resource ID: <code>MovieNight20171126093045</code>
//	</p>
func (o OriginEndpointSpekeKeyProviderPtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OriginEndpointSpekeKeyProvider) *string {
		if v == nil {
			return nil
		}
		return &v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// <p>The ARN for the IAM role granted by the key provider that provides access to the key provider API. This role must have a trust policy that allows MediaPackage to assume the role, and it must have a sufficient permissions policy to allow access to the specific key retrieval URL. Get this from your DRM solution provider.</p>
//
//	<p>Valid format: <code>arn:aws:iam::{accountID}:role/{name}</code>. The following example shows a role ARN: <code>arn:aws:iam::444455556666:role/SpekeAccess</code>
//	</p>
func (o OriginEndpointSpekeKeyProviderPtrOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OriginEndpointSpekeKeyProvider) *string {
		if v == nil {
			return nil
		}
		return &v.RoleArn
	}).(pulumi.StringPtrOutput)
}

// <p>The URL of the API Gateway proxy that you set up to talk to your key server. The API Gateway proxy must reside in the same AWS Region as MediaPackage and must start with https://.</p>
//
//	<p>The following example shows a URL: <code>https://1wm2dx1f33.execute-api.us-west-2.amazonaws.com/SpekeSample/copyProtection</code>
//	</p>
func (o OriginEndpointSpekeKeyProviderPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OriginEndpointSpekeKeyProvider) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

type OriginEndpointTag struct {
	Key   *string `pulumi:"key"`
	Value *string `pulumi:"value"`
}

// OriginEndpointTagInput is an input type that accepts OriginEndpointTagArgs and OriginEndpointTagOutput values.
// You can construct a concrete instance of `OriginEndpointTagInput` via:
//
//	OriginEndpointTagArgs{...}
type OriginEndpointTagInput interface {
	pulumi.Input

	ToOriginEndpointTagOutput() OriginEndpointTagOutput
	ToOriginEndpointTagOutputWithContext(context.Context) OriginEndpointTagOutput
}

type OriginEndpointTagArgs struct {
	Key   pulumi.StringPtrInput `pulumi:"key"`
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (OriginEndpointTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginEndpointTag)(nil)).Elem()
}

func (i OriginEndpointTagArgs) ToOriginEndpointTagOutput() OriginEndpointTagOutput {
	return i.ToOriginEndpointTagOutputWithContext(context.Background())
}

func (i OriginEndpointTagArgs) ToOriginEndpointTagOutputWithContext(ctx context.Context) OriginEndpointTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointTagOutput)
}

func (i OriginEndpointTagArgs) ToOutput(ctx context.Context) pulumix.Output[OriginEndpointTag] {
	return pulumix.Output[OriginEndpointTag]{
		OutputState: i.ToOriginEndpointTagOutputWithContext(ctx).OutputState,
	}
}

// OriginEndpointTagArrayInput is an input type that accepts OriginEndpointTagArray and OriginEndpointTagArrayOutput values.
// You can construct a concrete instance of `OriginEndpointTagArrayInput` via:
//
//	OriginEndpointTagArray{ OriginEndpointTagArgs{...} }
type OriginEndpointTagArrayInput interface {
	pulumi.Input

	ToOriginEndpointTagArrayOutput() OriginEndpointTagArrayOutput
	ToOriginEndpointTagArrayOutputWithContext(context.Context) OriginEndpointTagArrayOutput
}

type OriginEndpointTagArray []OriginEndpointTagInput

func (OriginEndpointTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OriginEndpointTag)(nil)).Elem()
}

func (i OriginEndpointTagArray) ToOriginEndpointTagArrayOutput() OriginEndpointTagArrayOutput {
	return i.ToOriginEndpointTagArrayOutputWithContext(context.Background())
}

func (i OriginEndpointTagArray) ToOriginEndpointTagArrayOutputWithContext(ctx context.Context) OriginEndpointTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginEndpointTagArrayOutput)
}

func (i OriginEndpointTagArray) ToOutput(ctx context.Context) pulumix.Output[[]OriginEndpointTag] {
	return pulumix.Output[[]OriginEndpointTag]{
		OutputState: i.ToOriginEndpointTagArrayOutputWithContext(ctx).OutputState,
	}
}

type OriginEndpointTagOutput struct{ *pulumi.OutputState }

func (OriginEndpointTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginEndpointTag)(nil)).Elem()
}

func (o OriginEndpointTagOutput) ToOriginEndpointTagOutput() OriginEndpointTagOutput {
	return o
}

func (o OriginEndpointTagOutput) ToOriginEndpointTagOutputWithContext(ctx context.Context) OriginEndpointTagOutput {
	return o
}

func (o OriginEndpointTagOutput) ToOutput(ctx context.Context) pulumix.Output[OriginEndpointTag] {
	return pulumix.Output[OriginEndpointTag]{
		OutputState: o.OutputState,
	}
}

func (o OriginEndpointTagOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OriginEndpointTag) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o OriginEndpointTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OriginEndpointTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type OriginEndpointTagArrayOutput struct{ *pulumi.OutputState }

func (OriginEndpointTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OriginEndpointTag)(nil)).Elem()
}

func (o OriginEndpointTagArrayOutput) ToOriginEndpointTagArrayOutput() OriginEndpointTagArrayOutput {
	return o
}

func (o OriginEndpointTagArrayOutput) ToOriginEndpointTagArrayOutputWithContext(ctx context.Context) OriginEndpointTagArrayOutput {
	return o
}

func (o OriginEndpointTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]OriginEndpointTag] {
	return pulumix.Output[[]OriginEndpointTag]{
		OutputState: o.OutputState,
	}
}

func (o OriginEndpointTagArrayOutput) Index(i pulumi.IntInput) OriginEndpointTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OriginEndpointTag {
		return vs[0].([]OriginEndpointTag)[vs[1].(int)]
	}).(OriginEndpointTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelGroupTagInput)(nil)).Elem(), ChannelGroupTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelGroupTagArrayInput)(nil)).Elem(), ChannelGroupTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelTagInput)(nil)).Elem(), ChannelTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelTagArrayInput)(nil)).Elem(), ChannelTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginEndpointEncryptionInput)(nil)).Elem(), OriginEndpointEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginEndpointEncryptionPtrInput)(nil)).Elem(), OriginEndpointEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginEndpointEncryptionContractConfigurationInput)(nil)).Elem(), OriginEndpointEncryptionContractConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginEndpointEncryptionContractConfigurationPtrInput)(nil)).Elem(), OriginEndpointEncryptionContractConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginEndpointEncryptionMethodInput)(nil)).Elem(), OriginEndpointEncryptionMethodArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginEndpointEncryptionMethodPtrInput)(nil)).Elem(), OriginEndpointEncryptionMethodArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginEndpointFilterConfigurationInput)(nil)).Elem(), OriginEndpointFilterConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginEndpointFilterConfigurationPtrInput)(nil)).Elem(), OriginEndpointFilterConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginEndpointHlsManifestConfigurationInput)(nil)).Elem(), OriginEndpointHlsManifestConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginEndpointHlsManifestConfigurationArrayInput)(nil)).Elem(), OriginEndpointHlsManifestConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginEndpointLowLatencyHlsManifestConfigurationInput)(nil)).Elem(), OriginEndpointLowLatencyHlsManifestConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginEndpointLowLatencyHlsManifestConfigurationArrayInput)(nil)).Elem(), OriginEndpointLowLatencyHlsManifestConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginEndpointScteInput)(nil)).Elem(), OriginEndpointScteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginEndpointSctePtrInput)(nil)).Elem(), OriginEndpointScteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginEndpointScteHlsInput)(nil)).Elem(), OriginEndpointScteHlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginEndpointScteHlsPtrInput)(nil)).Elem(), OriginEndpointScteHlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginEndpointSegmentInput)(nil)).Elem(), OriginEndpointSegmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginEndpointSegmentPtrInput)(nil)).Elem(), OriginEndpointSegmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginEndpointSpekeKeyProviderInput)(nil)).Elem(), OriginEndpointSpekeKeyProviderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginEndpointSpekeKeyProviderPtrInput)(nil)).Elem(), OriginEndpointSpekeKeyProviderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginEndpointTagInput)(nil)).Elem(), OriginEndpointTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginEndpointTagArrayInput)(nil)).Elem(), OriginEndpointTagArray{})
	pulumi.RegisterOutputType(ChannelGroupTagOutput{})
	pulumi.RegisterOutputType(ChannelGroupTagArrayOutput{})
	pulumi.RegisterOutputType(ChannelIngestEndpointOutput{})
	pulumi.RegisterOutputType(ChannelIngestEndpointArrayOutput{})
	pulumi.RegisterOutputType(ChannelTagOutput{})
	pulumi.RegisterOutputType(ChannelTagArrayOutput{})
	pulumi.RegisterOutputType(OriginEndpointEncryptionOutput{})
	pulumi.RegisterOutputType(OriginEndpointEncryptionPtrOutput{})
	pulumi.RegisterOutputType(OriginEndpointEncryptionContractConfigurationOutput{})
	pulumi.RegisterOutputType(OriginEndpointEncryptionContractConfigurationPtrOutput{})
	pulumi.RegisterOutputType(OriginEndpointEncryptionMethodOutput{})
	pulumi.RegisterOutputType(OriginEndpointEncryptionMethodPtrOutput{})
	pulumi.RegisterOutputType(OriginEndpointFilterConfigurationOutput{})
	pulumi.RegisterOutputType(OriginEndpointFilterConfigurationPtrOutput{})
	pulumi.RegisterOutputType(OriginEndpointHlsManifestConfigurationOutput{})
	pulumi.RegisterOutputType(OriginEndpointHlsManifestConfigurationArrayOutput{})
	pulumi.RegisterOutputType(OriginEndpointLowLatencyHlsManifestConfigurationOutput{})
	pulumi.RegisterOutputType(OriginEndpointLowLatencyHlsManifestConfigurationArrayOutput{})
	pulumi.RegisterOutputType(OriginEndpointScteOutput{})
	pulumi.RegisterOutputType(OriginEndpointSctePtrOutput{})
	pulumi.RegisterOutputType(OriginEndpointScteHlsOutput{})
	pulumi.RegisterOutputType(OriginEndpointScteHlsPtrOutput{})
	pulumi.RegisterOutputType(OriginEndpointSegmentOutput{})
	pulumi.RegisterOutputType(OriginEndpointSegmentPtrOutput{})
	pulumi.RegisterOutputType(OriginEndpointSpekeKeyProviderOutput{})
	pulumi.RegisterOutputType(OriginEndpointSpekeKeyProviderPtrOutput{})
	pulumi.RegisterOutputType(OriginEndpointTagOutput{})
	pulumi.RegisterOutputType(OriginEndpointTagArrayOutput{})
}
