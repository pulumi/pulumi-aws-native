// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package evidently

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Evidently::Project
func LookupProject(ctx *pulumi.Context, args *LookupProjectArgs, opts ...pulumi.InvokeOption) (*LookupProjectResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupProjectResult
	err := ctx.Invoke("aws-native:evidently:getProject", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupProjectArgs struct {
	// The ARN of the project. For example, `arn:aws:evidently:us-west-2:0123455678912:project/myProject`
	Arn string `pulumi:"arn"`
}

type LookupProjectResult struct {
	// Use this parameter if the project will use *client-side evaluation powered by AWS AppConfig* . Client-side evaluation allows your application to assign variations to user sessions locally instead of by calling the [EvaluateFeature](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_EvaluateFeature.html) operation. This mitigates the latency and availability risks that come with an API call. For more information, see [Use client-side evaluation - powered by AWS AppConfig .](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-client-side-evaluation.html)
	//
	// This parameter is a structure that contains information about the AWS AppConfig application that will be used as for client-side evaluation.
	//
	// To create a project that uses client-side evaluation, you must have the `evidently:ExportProjectAsConfiguration` permission.
	AppConfigResource *ProjectAppConfigResourceObject `pulumi:"appConfigResource"`
	// The ARN of the project. For example, `arn:aws:evidently:us-west-2:0123455678912:project/myProject`
	Arn *string `pulumi:"arn"`
	// A structure that contains information about where Evidently is to store evaluation events for longer term storage, if you choose to do so. If you choose not to store these events, Evidently deletes them after using them to produce metrics and other experiment results that you can view.
	//
	// You can't specify both `CloudWatchLogs` and `S3Destination` in the same operation.
	DataDelivery *ProjectDataDeliveryObject `pulumi:"dataDelivery"`
	// An optional description of the project.
	Description *string `pulumi:"description"`
	// An array of key-value pairs to apply to this resource.
	Tags []aws.Tag `pulumi:"tags"`
}

func LookupProjectOutput(ctx *pulumi.Context, args LookupProjectOutputArgs, opts ...pulumi.InvokeOption) LookupProjectResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupProjectResult, error) {
			args := v.(LookupProjectArgs)
			r, err := LookupProject(ctx, &args, opts...)
			var s LookupProjectResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupProjectResultOutput)
}

type LookupProjectOutputArgs struct {
	// The ARN of the project. For example, `arn:aws:evidently:us-west-2:0123455678912:project/myProject`
	Arn pulumi.StringInput `pulumi:"arn"`
}

func (LookupProjectOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProjectArgs)(nil)).Elem()
}

type LookupProjectResultOutput struct{ *pulumi.OutputState }

func (LookupProjectResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProjectResult)(nil)).Elem()
}

func (o LookupProjectResultOutput) ToLookupProjectResultOutput() LookupProjectResultOutput {
	return o
}

func (o LookupProjectResultOutput) ToLookupProjectResultOutputWithContext(ctx context.Context) LookupProjectResultOutput {
	return o
}

// Use this parameter if the project will use *client-side evaluation powered by AWS AppConfig* . Client-side evaluation allows your application to assign variations to user sessions locally instead of by calling the [EvaluateFeature](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_EvaluateFeature.html) operation. This mitigates the latency and availability risks that come with an API call. For more information, see [Use client-side evaluation - powered by AWS AppConfig .](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-client-side-evaluation.html)
//
// This parameter is a structure that contains information about the AWS AppConfig application that will be used as for client-side evaluation.
//
// To create a project that uses client-side evaluation, you must have the `evidently:ExportProjectAsConfiguration` permission.
func (o LookupProjectResultOutput) AppConfigResource() ProjectAppConfigResourceObjectPtrOutput {
	return o.ApplyT(func(v LookupProjectResult) *ProjectAppConfigResourceObject { return v.AppConfigResource }).(ProjectAppConfigResourceObjectPtrOutput)
}

// The ARN of the project. For example, `arn:aws:evidently:us-west-2:0123455678912:project/myProject`
func (o LookupProjectResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupProjectResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// A structure that contains information about where Evidently is to store evaluation events for longer term storage, if you choose to do so. If you choose not to store these events, Evidently deletes them after using them to produce metrics and other experiment results that you can view.
//
// You can't specify both `CloudWatchLogs` and `S3Destination` in the same operation.
func (o LookupProjectResultOutput) DataDelivery() ProjectDataDeliveryObjectPtrOutput {
	return o.ApplyT(func(v LookupProjectResult) *ProjectDataDeliveryObject { return v.DataDelivery }).(ProjectDataDeliveryObjectPtrOutput)
}

// An optional description of the project.
func (o LookupProjectResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupProjectResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// An array of key-value pairs to apply to this resource.
func (o LookupProjectResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupProjectResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupProjectResultOutput{})
}
