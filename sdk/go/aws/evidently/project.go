// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package evidently

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Evidently::Project
type Project struct {
	pulumi.CustomResourceState

	// This is a structure that defines the configuration of how your application integrates with AWS AppConfig to run client-side evaluation.
	AppConfigResource ProjectAppConfigResourceObjectPtrOutput `pulumi:"appConfigResource"`
	// The ARN of the project. For example, `arn:aws:evidently:us-west-2:0123455678912:project/myProject`
	Arn pulumi.StringOutput `pulumi:"arn"`
	// A structure that contains information about where Evidently is to store evaluation events for longer term storage.
	DataDelivery ProjectDataDeliveryObjectPtrOutput `pulumi:"dataDelivery"`
	// An optional description of the project.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name for the project. It can include up to 127 characters.
	Name pulumi.StringOutput `pulumi:"name"`
	// An array of key-value pairs to apply to this resource.
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewProject registers a new resource with the given unique name, arguments, and options.
func NewProject(ctx *pulumi.Context,
	name string, args *ProjectArgs, opts ...pulumi.ResourceOption) (*Project, error) {
	if args == nil {
		args = &ProjectArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"name",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Project
	err := ctx.RegisterResource("aws-native:evidently:Project", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProject gets an existing Project resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectState, opts ...pulumi.ResourceOption) (*Project, error) {
	var resource Project
	err := ctx.ReadResource("aws-native:evidently:Project", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Project resources.
type projectState struct {
}

type ProjectState struct {
}

func (ProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectState)(nil)).Elem()
}

type projectArgs struct {
	// This is a structure that defines the configuration of how your application integrates with AWS AppConfig to run client-side evaluation.
	AppConfigResource *ProjectAppConfigResourceObject `pulumi:"appConfigResource"`
	// A structure that contains information about where Evidently is to store evaluation events for longer term storage.
	DataDelivery *ProjectDataDeliveryObject `pulumi:"dataDelivery"`
	// An optional description of the project.
	Description *string `pulumi:"description"`
	// The name for the project. It can include up to 127 characters.
	Name *string `pulumi:"name"`
	// An array of key-value pairs to apply to this resource.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a Project resource.
type ProjectArgs struct {
	// This is a structure that defines the configuration of how your application integrates with AWS AppConfig to run client-side evaluation.
	AppConfigResource ProjectAppConfigResourceObjectPtrInput
	// A structure that contains information about where Evidently is to store evaluation events for longer term storage.
	DataDelivery ProjectDataDeliveryObjectPtrInput
	// An optional description of the project.
	Description pulumi.StringPtrInput
	// The name for the project. It can include up to 127 characters.
	Name pulumi.StringPtrInput
	// An array of key-value pairs to apply to this resource.
	Tags aws.TagArrayInput
}

func (ProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectArgs)(nil)).Elem()
}

type ProjectInput interface {
	pulumi.Input

	ToProjectOutput() ProjectOutput
	ToProjectOutputWithContext(ctx context.Context) ProjectOutput
}

func (*Project) ElementType() reflect.Type {
	return reflect.TypeOf((**Project)(nil)).Elem()
}

func (i *Project) ToProjectOutput() ProjectOutput {
	return i.ToProjectOutputWithContext(context.Background())
}

func (i *Project) ToProjectOutputWithContext(ctx context.Context) ProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectOutput)
}

type ProjectOutput struct{ *pulumi.OutputState }

func (ProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Project)(nil)).Elem()
}

func (o ProjectOutput) ToProjectOutput() ProjectOutput {
	return o
}

func (o ProjectOutput) ToProjectOutputWithContext(ctx context.Context) ProjectOutput {
	return o
}

// This is a structure that defines the configuration of how your application integrates with AWS AppConfig to run client-side evaluation.
func (o ProjectOutput) AppConfigResource() ProjectAppConfigResourceObjectPtrOutput {
	return o.ApplyT(func(v *Project) ProjectAppConfigResourceObjectPtrOutput { return v.AppConfigResource }).(ProjectAppConfigResourceObjectPtrOutput)
}

// The ARN of the project. For example, `arn:aws:evidently:us-west-2:0123455678912:project/myProject`
func (o ProjectOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// A structure that contains information about where Evidently is to store evaluation events for longer term storage.
func (o ProjectOutput) DataDelivery() ProjectDataDeliveryObjectPtrOutput {
	return o.ApplyT(func(v *Project) ProjectDataDeliveryObjectPtrOutput { return v.DataDelivery }).(ProjectDataDeliveryObjectPtrOutput)
}

// An optional description of the project.
func (o ProjectOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name for the project. It can include up to 127 characters.
func (o ProjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// An array of key-value pairs to apply to this resource.
func (o ProjectOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Project) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectInput)(nil)).Elem(), &Project{})
	pulumi.RegisterOutputType(ProjectOutput{})
}
