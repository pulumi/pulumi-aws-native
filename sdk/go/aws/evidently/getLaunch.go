// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package evidently

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Evidently::Launch.
func LookupLaunch(ctx *pulumi.Context, args *LookupLaunchArgs, opts ...pulumi.InvokeOption) (*LookupLaunchResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupLaunchResult
	err := ctx.Invoke("aws-native:evidently:getLaunch", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupLaunchArgs struct {
	// The ARN of the launch. For example, `arn:aws:evidently:us-west-2:0123455678912:project/myProject/launch/myLaunch`
	Arn string `pulumi:"arn"`
}

type LookupLaunchResult struct {
	// The ARN of the launch. For example, `arn:aws:evidently:us-west-2:0123455678912:project/myProject/launch/myLaunch`
	Arn *string `pulumi:"arn"`
	// An optional description for the launch.
	Description *string `pulumi:"description"`
	// Start or Stop Launch Launch. Default is not started.
	ExecutionStatus *LaunchExecutionStatusObject `pulumi:"executionStatus"`
	// A structure that defines one launch group in a launch. A launch group is a variation of the feature that you are including in the launch.
	Groups []LaunchGroupObject `pulumi:"groups"`
	// This structure defines a metric that you want to use to evaluate the variations during a launch or experiment.
	MetricMonitors []LaunchMetricDefinitionObject `pulumi:"metricMonitors"`
	// When Evidently assigns a particular user session to a launch, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and `randomizationSalt` . If you omit `randomizationSalt` , Evidently uses the launch name as the `randomizationsSalt` .
	RandomizationSalt *string `pulumi:"randomizationSalt"`
	// A structure that defines when each step of the launch is to start, and how much launch traffic is to be allocated to each variation during each step.
	ScheduledSplitsConfig []LaunchStepConfig `pulumi:"scheduledSplitsConfig"`
	// An array of key-value pairs to apply to this resource.
	Tags []aws.Tag `pulumi:"tags"`
}

func LookupLaunchOutput(ctx *pulumi.Context, args LookupLaunchOutputArgs, opts ...pulumi.InvokeOption) LookupLaunchResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupLaunchResult, error) {
			args := v.(LookupLaunchArgs)
			r, err := LookupLaunch(ctx, &args, opts...)
			var s LookupLaunchResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupLaunchResultOutput)
}

type LookupLaunchOutputArgs struct {
	// The ARN of the launch. For example, `arn:aws:evidently:us-west-2:0123455678912:project/myProject/launch/myLaunch`
	Arn pulumi.StringInput `pulumi:"arn"`
}

func (LookupLaunchOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLaunchArgs)(nil)).Elem()
}

type LookupLaunchResultOutput struct{ *pulumi.OutputState }

func (LookupLaunchResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLaunchResult)(nil)).Elem()
}

func (o LookupLaunchResultOutput) ToLookupLaunchResultOutput() LookupLaunchResultOutput {
	return o
}

func (o LookupLaunchResultOutput) ToLookupLaunchResultOutputWithContext(ctx context.Context) LookupLaunchResultOutput {
	return o
}

// The ARN of the launch. For example, `arn:aws:evidently:us-west-2:0123455678912:project/myProject/launch/myLaunch`
func (o LookupLaunchResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLaunchResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// An optional description for the launch.
func (o LookupLaunchResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLaunchResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Start or Stop Launch Launch. Default is not started.
func (o LookupLaunchResultOutput) ExecutionStatus() LaunchExecutionStatusObjectPtrOutput {
	return o.ApplyT(func(v LookupLaunchResult) *LaunchExecutionStatusObject { return v.ExecutionStatus }).(LaunchExecutionStatusObjectPtrOutput)
}

// A structure that defines one launch group in a launch. A launch group is a variation of the feature that you are including in the launch.
func (o LookupLaunchResultOutput) Groups() LaunchGroupObjectArrayOutput {
	return o.ApplyT(func(v LookupLaunchResult) []LaunchGroupObject { return v.Groups }).(LaunchGroupObjectArrayOutput)
}

// This structure defines a metric that you want to use to evaluate the variations during a launch or experiment.
func (o LookupLaunchResultOutput) MetricMonitors() LaunchMetricDefinitionObjectArrayOutput {
	return o.ApplyT(func(v LookupLaunchResult) []LaunchMetricDefinitionObject { return v.MetricMonitors }).(LaunchMetricDefinitionObjectArrayOutput)
}

// When Evidently assigns a particular user session to a launch, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and `randomizationSalt` . If you omit `randomizationSalt` , Evidently uses the launch name as the `randomizationsSalt` .
func (o LookupLaunchResultOutput) RandomizationSalt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLaunchResult) *string { return v.RandomizationSalt }).(pulumi.StringPtrOutput)
}

// A structure that defines when each step of the launch is to start, and how much launch traffic is to be allocated to each variation during each step.
func (o LookupLaunchResultOutput) ScheduledSplitsConfig() LaunchStepConfigArrayOutput {
	return o.ApplyT(func(v LookupLaunchResult) []LaunchStepConfig { return v.ScheduledSplitsConfig }).(LaunchStepConfigArrayOutput)
}

// An array of key-value pairs to apply to this resource.
func (o LookupLaunchResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupLaunchResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupLaunchResultOutput{})
}
