// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package evidently

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Evidently::Experiment.
type Experiment struct {
	pulumi.CustomResourceState

	// The ARN of the experiment. For example, `arn:aws:evidently:us-west-2:0123455678912:project/myProject/experiment/myExperiment`
	Arn pulumi.StringOutput `pulumi:"arn"`
	// An optional description of the experiment.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Use this structure to tell Evidently whether higher or lower values are desired for a metric that is used in an experiment.
	MetricGoals ExperimentMetricGoalObjectArrayOutput `pulumi:"metricGoals"`
	// A name for the new experiment.
	Name pulumi.StringOutput `pulumi:"name"`
	// A structure that contains the configuration of which variation to use as the "control" version. The "control" version is used for comparison with other variations. This structure also specifies how much experiment traffic is allocated to each variation.
	OnlineAbConfig ExperimentOnlineAbConfigObjectOutput `pulumi:"onlineAbConfig"`
	// The name or the ARN of the project where this experiment is to be created.
	Project pulumi.StringOutput `pulumi:"project"`
	// When Evidently assigns a particular user session to an experiment, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and `randomizationSalt` . If you omit `randomizationSalt` , Evidently uses the experiment name as the `randomizationSalt` .
	RandomizationSalt pulumi.StringPtrOutput `pulumi:"randomizationSalt"`
	// Set this to `true` to remove the segment that is associated with this experiment. You can't use this parameter if the experiment is currently running.
	RemoveSegment pulumi.BoolPtrOutput `pulumi:"removeSegment"`
	// Start Experiment. Default is False
	RunningStatus ExperimentRunningStatusObjectPtrOutput `pulumi:"runningStatus"`
	// The portion of the available audience that you want to allocate to this experiment, in thousandths of a percent. The available audience is the total audience minus the audience that you have allocated to overrides or current launches of this feature.
	//
	// This is represented in thousandths of a percent. For example, specify 10,000 to allocate 10% of the available audience.
	SamplingRate pulumi.IntPtrOutput `pulumi:"samplingRate"`
	// Specifies an audience *segment* to use in the experiment. When a segment is used in an experiment, only user sessions that match the segment pattern are used in the experiment.
	//
	// For more information, see [Segment rule pattern syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-segments.html#CloudWatch-Evidently-segments-syntax) .
	Segment pulumi.StringPtrOutput `pulumi:"segment"`
	// An array of key-value pairs to apply to this resource.
	Tags aws.TagArrayOutput `pulumi:"tags"`
	// A structure that defines one treatment in an experiment. A treatment is a variation of the feature that you are including in the experiment.
	Treatments ExperimentTreatmentObjectArrayOutput `pulumi:"treatments"`
}

// NewExperiment registers a new resource with the given unique name, arguments, and options.
func NewExperiment(ctx *pulumi.Context,
	name string, args *ExperimentArgs, opts ...pulumi.ResourceOption) (*Experiment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MetricGoals == nil {
		return nil, errors.New("invalid value for required argument 'MetricGoals'")
	}
	if args.OnlineAbConfig == nil {
		return nil, errors.New("invalid value for required argument 'OnlineAbConfig'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.Treatments == nil {
		return nil, errors.New("invalid value for required argument 'Treatments'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"name",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Experiment
	err := ctx.RegisterResource("aws-native:evidently:Experiment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExperiment gets an existing Experiment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExperiment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExperimentState, opts ...pulumi.ResourceOption) (*Experiment, error) {
	var resource Experiment
	err := ctx.ReadResource("aws-native:evidently:Experiment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Experiment resources.
type experimentState struct {
}

type ExperimentState struct {
}

func (ExperimentState) ElementType() reflect.Type {
	return reflect.TypeOf((*experimentState)(nil)).Elem()
}

type experimentArgs struct {
	// An optional description of the experiment.
	Description *string `pulumi:"description"`
	// Use this structure to tell Evidently whether higher or lower values are desired for a metric that is used in an experiment.
	MetricGoals []ExperimentMetricGoalObject `pulumi:"metricGoals"`
	// A name for the new experiment.
	Name *string `pulumi:"name"`
	// A structure that contains the configuration of which variation to use as the "control" version. The "control" version is used for comparison with other variations. This structure also specifies how much experiment traffic is allocated to each variation.
	OnlineAbConfig ExperimentOnlineAbConfigObject `pulumi:"onlineAbConfig"`
	// The name or the ARN of the project where this experiment is to be created.
	Project string `pulumi:"project"`
	// When Evidently assigns a particular user session to an experiment, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and `randomizationSalt` . If you omit `randomizationSalt` , Evidently uses the experiment name as the `randomizationSalt` .
	RandomizationSalt *string `pulumi:"randomizationSalt"`
	// Set this to `true` to remove the segment that is associated with this experiment. You can't use this parameter if the experiment is currently running.
	RemoveSegment *bool `pulumi:"removeSegment"`
	// Start Experiment. Default is False
	RunningStatus *ExperimentRunningStatusObject `pulumi:"runningStatus"`
	// The portion of the available audience that you want to allocate to this experiment, in thousandths of a percent. The available audience is the total audience minus the audience that you have allocated to overrides or current launches of this feature.
	//
	// This is represented in thousandths of a percent. For example, specify 10,000 to allocate 10% of the available audience.
	SamplingRate *int `pulumi:"samplingRate"`
	// Specifies an audience *segment* to use in the experiment. When a segment is used in an experiment, only user sessions that match the segment pattern are used in the experiment.
	//
	// For more information, see [Segment rule pattern syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-segments.html#CloudWatch-Evidently-segments-syntax) .
	Segment *string `pulumi:"segment"`
	// An array of key-value pairs to apply to this resource.
	Tags []aws.Tag `pulumi:"tags"`
	// A structure that defines one treatment in an experiment. A treatment is a variation of the feature that you are including in the experiment.
	Treatments []ExperimentTreatmentObject `pulumi:"treatments"`
}

// The set of arguments for constructing a Experiment resource.
type ExperimentArgs struct {
	// An optional description of the experiment.
	Description pulumi.StringPtrInput
	// Use this structure to tell Evidently whether higher or lower values are desired for a metric that is used in an experiment.
	MetricGoals ExperimentMetricGoalObjectArrayInput
	// A name for the new experiment.
	Name pulumi.StringPtrInput
	// A structure that contains the configuration of which variation to use as the "control" version. The "control" version is used for comparison with other variations. This structure also specifies how much experiment traffic is allocated to each variation.
	OnlineAbConfig ExperimentOnlineAbConfigObjectInput
	// The name or the ARN of the project where this experiment is to be created.
	Project pulumi.StringInput
	// When Evidently assigns a particular user session to an experiment, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and `randomizationSalt` . If you omit `randomizationSalt` , Evidently uses the experiment name as the `randomizationSalt` .
	RandomizationSalt pulumi.StringPtrInput
	// Set this to `true` to remove the segment that is associated with this experiment. You can't use this parameter if the experiment is currently running.
	RemoveSegment pulumi.BoolPtrInput
	// Start Experiment. Default is False
	RunningStatus ExperimentRunningStatusObjectPtrInput
	// The portion of the available audience that you want to allocate to this experiment, in thousandths of a percent. The available audience is the total audience minus the audience that you have allocated to overrides or current launches of this feature.
	//
	// This is represented in thousandths of a percent. For example, specify 10,000 to allocate 10% of the available audience.
	SamplingRate pulumi.IntPtrInput
	// Specifies an audience *segment* to use in the experiment. When a segment is used in an experiment, only user sessions that match the segment pattern are used in the experiment.
	//
	// For more information, see [Segment rule pattern syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-segments.html#CloudWatch-Evidently-segments-syntax) .
	Segment pulumi.StringPtrInput
	// An array of key-value pairs to apply to this resource.
	Tags aws.TagArrayInput
	// A structure that defines one treatment in an experiment. A treatment is a variation of the feature that you are including in the experiment.
	Treatments ExperimentTreatmentObjectArrayInput
}

func (ExperimentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*experimentArgs)(nil)).Elem()
}

type ExperimentInput interface {
	pulumi.Input

	ToExperimentOutput() ExperimentOutput
	ToExperimentOutputWithContext(ctx context.Context) ExperimentOutput
}

func (*Experiment) ElementType() reflect.Type {
	return reflect.TypeOf((**Experiment)(nil)).Elem()
}

func (i *Experiment) ToExperimentOutput() ExperimentOutput {
	return i.ToExperimentOutputWithContext(context.Background())
}

func (i *Experiment) ToExperimentOutputWithContext(ctx context.Context) ExperimentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentOutput)
}

type ExperimentOutput struct{ *pulumi.OutputState }

func (ExperimentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Experiment)(nil)).Elem()
}

func (o ExperimentOutput) ToExperimentOutput() ExperimentOutput {
	return o
}

func (o ExperimentOutput) ToExperimentOutputWithContext(ctx context.Context) ExperimentOutput {
	return o
}

// The ARN of the experiment. For example, `arn:aws:evidently:us-west-2:0123455678912:project/myProject/experiment/myExperiment`
func (o ExperimentOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Experiment) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// An optional description of the experiment.
func (o ExperimentOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Experiment) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Use this structure to tell Evidently whether higher or lower values are desired for a metric that is used in an experiment.
func (o ExperimentOutput) MetricGoals() ExperimentMetricGoalObjectArrayOutput {
	return o.ApplyT(func(v *Experiment) ExperimentMetricGoalObjectArrayOutput { return v.MetricGoals }).(ExperimentMetricGoalObjectArrayOutput)
}

// A name for the new experiment.
func (o ExperimentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Experiment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A structure that contains the configuration of which variation to use as the "control" version. The "control" version is used for comparison with other variations. This structure also specifies how much experiment traffic is allocated to each variation.
func (o ExperimentOutput) OnlineAbConfig() ExperimentOnlineAbConfigObjectOutput {
	return o.ApplyT(func(v *Experiment) ExperimentOnlineAbConfigObjectOutput { return v.OnlineAbConfig }).(ExperimentOnlineAbConfigObjectOutput)
}

// The name or the ARN of the project where this experiment is to be created.
func (o ExperimentOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Experiment) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// When Evidently assigns a particular user session to an experiment, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and `randomizationSalt` . If you omit `randomizationSalt` , Evidently uses the experiment name as the `randomizationSalt` .
func (o ExperimentOutput) RandomizationSalt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Experiment) pulumi.StringPtrOutput { return v.RandomizationSalt }).(pulumi.StringPtrOutput)
}

// Set this to `true` to remove the segment that is associated with this experiment. You can't use this parameter if the experiment is currently running.
func (o ExperimentOutput) RemoveSegment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Experiment) pulumi.BoolPtrOutput { return v.RemoveSegment }).(pulumi.BoolPtrOutput)
}

// Start Experiment. Default is False
func (o ExperimentOutput) RunningStatus() ExperimentRunningStatusObjectPtrOutput {
	return o.ApplyT(func(v *Experiment) ExperimentRunningStatusObjectPtrOutput { return v.RunningStatus }).(ExperimentRunningStatusObjectPtrOutput)
}

// The portion of the available audience that you want to allocate to this experiment, in thousandths of a percent. The available audience is the total audience minus the audience that you have allocated to overrides or current launches of this feature.
//
// This is represented in thousandths of a percent. For example, specify 10,000 to allocate 10% of the available audience.
func (o ExperimentOutput) SamplingRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Experiment) pulumi.IntPtrOutput { return v.SamplingRate }).(pulumi.IntPtrOutput)
}

// Specifies an audience *segment* to use in the experiment. When a segment is used in an experiment, only user sessions that match the segment pattern are used in the experiment.
//
// For more information, see [Segment rule pattern syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-segments.html#CloudWatch-Evidently-segments-syntax) .
func (o ExperimentOutput) Segment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Experiment) pulumi.StringPtrOutput { return v.Segment }).(pulumi.StringPtrOutput)
}

// An array of key-value pairs to apply to this resource.
func (o ExperimentOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Experiment) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

// A structure that defines one treatment in an experiment. A treatment is a variation of the feature that you are including in the experiment.
func (o ExperimentOutput) Treatments() ExperimentTreatmentObjectArrayOutput {
	return o.ApplyT(func(v *Experiment) ExperimentTreatmentObjectArrayOutput { return v.Treatments }).(ExperimentTreatmentObjectArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentInput)(nil)).Elem(), &Experiment{})
	pulumi.RegisterOutputType(ExperimentOutput{})
}
