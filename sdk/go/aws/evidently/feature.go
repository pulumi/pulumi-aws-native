// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package evidently

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Evidently::Feature.
type Feature struct {
	pulumi.CustomResourceState

	// The ARN of the feature. For example, `arn:aws:evidently:us-west-2:0123455678912:project/myProject/feature/myFeature` .
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The name of the variation to use as the default variation. The default variation is served to users who are not allocated to any ongoing launches or experiments of this feature.
	//
	// This variation must also be listed in the `Variations` structure.
	//
	// If you omit `DefaultVariation` , the first variation listed in the `Variations` structure is used as the default variation.
	DefaultVariation pulumi.StringPtrOutput `pulumi:"defaultVariation"`
	// An optional description of the feature.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A set of key-value pairs that specify users who should always be served a specific variation of a feature. Each key specifies a user using their user ID, account ID, or some other identifier. The value specifies the name of the variation that the user is to be served.
	EntityOverrides FeatureEntityOverrideArrayOutput `pulumi:"entityOverrides"`
	// Specify `ALL_RULES` to activate the traffic allocation specified by any ongoing launches or experiments. Specify `DEFAULT_VARIATION` to serve the default variation to all users instead.
	EvaluationStrategy FeatureEvaluationStrategyPtrOutput `pulumi:"evaluationStrategy"`
	// The name for the feature. It can include up to 127 characters.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name or ARN of the project that is to contain the new feature.
	Project pulumi.StringOutput `pulumi:"project"`
	// An array of key-value pairs to apply to this resource.
	Tags aws.TagArrayOutput `pulumi:"tags"`
	// This structure contains the name and variation value of one variation of a feature. It can contain only one of the following parameters: `BooleanValue` , `DoubleValue` , `LongValue` or `StringValue` .
	Variations FeatureVariationObjectArrayOutput `pulumi:"variations"`
}

// NewFeature registers a new resource with the given unique name, arguments, and options.
func NewFeature(ctx *pulumi.Context,
	name string, args *FeatureArgs, opts ...pulumi.ResourceOption) (*Feature, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.Variations == nil {
		return nil, errors.New("invalid value for required argument 'Variations'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"name",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Feature
	err := ctx.RegisterResource("aws-native:evidently:Feature", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFeature gets an existing Feature resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFeature(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FeatureState, opts ...pulumi.ResourceOption) (*Feature, error) {
	var resource Feature
	err := ctx.ReadResource("aws-native:evidently:Feature", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Feature resources.
type featureState struct {
}

type FeatureState struct {
}

func (FeatureState) ElementType() reflect.Type {
	return reflect.TypeOf((*featureState)(nil)).Elem()
}

type featureArgs struct {
	// The name of the variation to use as the default variation. The default variation is served to users who are not allocated to any ongoing launches or experiments of this feature.
	//
	// This variation must also be listed in the `Variations` structure.
	//
	// If you omit `DefaultVariation` , the first variation listed in the `Variations` structure is used as the default variation.
	DefaultVariation *string `pulumi:"defaultVariation"`
	// An optional description of the feature.
	Description *string `pulumi:"description"`
	// A set of key-value pairs that specify users who should always be served a specific variation of a feature. Each key specifies a user using their user ID, account ID, or some other identifier. The value specifies the name of the variation that the user is to be served.
	EntityOverrides []FeatureEntityOverride `pulumi:"entityOverrides"`
	// Specify `ALL_RULES` to activate the traffic allocation specified by any ongoing launches or experiments. Specify `DEFAULT_VARIATION` to serve the default variation to all users instead.
	EvaluationStrategy *FeatureEvaluationStrategy `pulumi:"evaluationStrategy"`
	// The name for the feature. It can include up to 127 characters.
	Name *string `pulumi:"name"`
	// The name or ARN of the project that is to contain the new feature.
	Project string `pulumi:"project"`
	// An array of key-value pairs to apply to this resource.
	Tags []aws.Tag `pulumi:"tags"`
	// This structure contains the name and variation value of one variation of a feature. It can contain only one of the following parameters: `BooleanValue` , `DoubleValue` , `LongValue` or `StringValue` .
	Variations []FeatureVariationObject `pulumi:"variations"`
}

// The set of arguments for constructing a Feature resource.
type FeatureArgs struct {
	// The name of the variation to use as the default variation. The default variation is served to users who are not allocated to any ongoing launches or experiments of this feature.
	//
	// This variation must also be listed in the `Variations` structure.
	//
	// If you omit `DefaultVariation` , the first variation listed in the `Variations` structure is used as the default variation.
	DefaultVariation pulumi.StringPtrInput
	// An optional description of the feature.
	Description pulumi.StringPtrInput
	// A set of key-value pairs that specify users who should always be served a specific variation of a feature. Each key specifies a user using their user ID, account ID, or some other identifier. The value specifies the name of the variation that the user is to be served.
	EntityOverrides FeatureEntityOverrideArrayInput
	// Specify `ALL_RULES` to activate the traffic allocation specified by any ongoing launches or experiments. Specify `DEFAULT_VARIATION` to serve the default variation to all users instead.
	EvaluationStrategy FeatureEvaluationStrategyPtrInput
	// The name for the feature. It can include up to 127 characters.
	Name pulumi.StringPtrInput
	// The name or ARN of the project that is to contain the new feature.
	Project pulumi.StringInput
	// An array of key-value pairs to apply to this resource.
	Tags aws.TagArrayInput
	// This structure contains the name and variation value of one variation of a feature. It can contain only one of the following parameters: `BooleanValue` , `DoubleValue` , `LongValue` or `StringValue` .
	Variations FeatureVariationObjectArrayInput
}

func (FeatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*featureArgs)(nil)).Elem()
}

type FeatureInput interface {
	pulumi.Input

	ToFeatureOutput() FeatureOutput
	ToFeatureOutputWithContext(ctx context.Context) FeatureOutput
}

func (*Feature) ElementType() reflect.Type {
	return reflect.TypeOf((**Feature)(nil)).Elem()
}

func (i *Feature) ToFeatureOutput() FeatureOutput {
	return i.ToFeatureOutputWithContext(context.Background())
}

func (i *Feature) ToFeatureOutputWithContext(ctx context.Context) FeatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureOutput)
}

type FeatureOutput struct{ *pulumi.OutputState }

func (FeatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Feature)(nil)).Elem()
}

func (o FeatureOutput) ToFeatureOutput() FeatureOutput {
	return o
}

func (o FeatureOutput) ToFeatureOutputWithContext(ctx context.Context) FeatureOutput {
	return o
}

// The ARN of the feature. For example, `arn:aws:evidently:us-west-2:0123455678912:project/myProject/feature/myFeature` .
func (o FeatureOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Feature) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The name of the variation to use as the default variation. The default variation is served to users who are not allocated to any ongoing launches or experiments of this feature.
//
// This variation must also be listed in the `Variations` structure.
//
// If you omit `DefaultVariation` , the first variation listed in the `Variations` structure is used as the default variation.
func (o FeatureOutput) DefaultVariation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Feature) pulumi.StringPtrOutput { return v.DefaultVariation }).(pulumi.StringPtrOutput)
}

// An optional description of the feature.
func (o FeatureOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Feature) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A set of key-value pairs that specify users who should always be served a specific variation of a feature. Each key specifies a user using their user ID, account ID, or some other identifier. The value specifies the name of the variation that the user is to be served.
func (o FeatureOutput) EntityOverrides() FeatureEntityOverrideArrayOutput {
	return o.ApplyT(func(v *Feature) FeatureEntityOverrideArrayOutput { return v.EntityOverrides }).(FeatureEntityOverrideArrayOutput)
}

// Specify `ALL_RULES` to activate the traffic allocation specified by any ongoing launches or experiments. Specify `DEFAULT_VARIATION` to serve the default variation to all users instead.
func (o FeatureOutput) EvaluationStrategy() FeatureEvaluationStrategyPtrOutput {
	return o.ApplyT(func(v *Feature) FeatureEvaluationStrategyPtrOutput { return v.EvaluationStrategy }).(FeatureEvaluationStrategyPtrOutput)
}

// The name for the feature. It can include up to 127 characters.
func (o FeatureOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Feature) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name or ARN of the project that is to contain the new feature.
func (o FeatureOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Feature) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// An array of key-value pairs to apply to this resource.
func (o FeatureOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Feature) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

// This structure contains the name and variation value of one variation of a feature. It can contain only one of the following parameters: `BooleanValue` , `DoubleValue` , `LongValue` or `StringValue` .
func (o FeatureOutput) Variations() FeatureVariationObjectArrayOutput {
	return o.ApplyT(func(v *Feature) FeatureVariationObjectArrayOutput { return v.Variations }).(FeatureVariationObjectArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureInput)(nil)).Elem(), &Feature{})
	pulumi.RegisterOutputType(FeatureOutput{})
}
