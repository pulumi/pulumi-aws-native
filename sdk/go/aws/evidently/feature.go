// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package evidently

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Evidently::Feature.
type Feature struct {
	pulumi.CustomResourceState

	Arn                pulumi.StringOutput                `pulumi:"arn"`
	DefaultVariation   pulumi.StringPtrOutput             `pulumi:"defaultVariation"`
	Description        pulumi.StringPtrOutput             `pulumi:"description"`
	EntityOverrides    FeatureEntityOverrideArrayOutput   `pulumi:"entityOverrides"`
	EvaluationStrategy FeatureEvaluationStrategyPtrOutput `pulumi:"evaluationStrategy"`
	Name               pulumi.StringOutput                `pulumi:"name"`
	Project            pulumi.StringOutput                `pulumi:"project"`
	// An array of key-value pairs to apply to this resource.
	Tags       FeatureTagArrayOutput             `pulumi:"tags"`
	Variations FeatureVariationObjectArrayOutput `pulumi:"variations"`
}

// NewFeature registers a new resource with the given unique name, arguments, and options.
func NewFeature(ctx *pulumi.Context,
	name string, args *FeatureArgs, opts ...pulumi.ResourceOption) (*Feature, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.Variations == nil {
		return nil, errors.New("invalid value for required argument 'Variations'")
	}
	var resource Feature
	err := ctx.RegisterResource("aws-native:evidently:Feature", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFeature gets an existing Feature resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFeature(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FeatureState, opts ...pulumi.ResourceOption) (*Feature, error) {
	var resource Feature
	err := ctx.ReadResource("aws-native:evidently:Feature", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Feature resources.
type featureState struct {
}

type FeatureState struct {
}

func (FeatureState) ElementType() reflect.Type {
	return reflect.TypeOf((*featureState)(nil)).Elem()
}

type featureArgs struct {
	DefaultVariation   *string                    `pulumi:"defaultVariation"`
	Description        *string                    `pulumi:"description"`
	EntityOverrides    []FeatureEntityOverride    `pulumi:"entityOverrides"`
	EvaluationStrategy *FeatureEvaluationStrategy `pulumi:"evaluationStrategy"`
	Name               *string                    `pulumi:"name"`
	Project            string                     `pulumi:"project"`
	// An array of key-value pairs to apply to this resource.
	Tags       []FeatureTag             `pulumi:"tags"`
	Variations []FeatureVariationObject `pulumi:"variations"`
}

// The set of arguments for constructing a Feature resource.
type FeatureArgs struct {
	DefaultVariation   pulumi.StringPtrInput
	Description        pulumi.StringPtrInput
	EntityOverrides    FeatureEntityOverrideArrayInput
	EvaluationStrategy FeatureEvaluationStrategyPtrInput
	Name               pulumi.StringPtrInput
	Project            pulumi.StringInput
	// An array of key-value pairs to apply to this resource.
	Tags       FeatureTagArrayInput
	Variations FeatureVariationObjectArrayInput
}

func (FeatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*featureArgs)(nil)).Elem()
}

type FeatureInput interface {
	pulumi.Input

	ToFeatureOutput() FeatureOutput
	ToFeatureOutputWithContext(ctx context.Context) FeatureOutput
}

func (*Feature) ElementType() reflect.Type {
	return reflect.TypeOf((**Feature)(nil)).Elem()
}

func (i *Feature) ToFeatureOutput() FeatureOutput {
	return i.ToFeatureOutputWithContext(context.Background())
}

func (i *Feature) ToFeatureOutputWithContext(ctx context.Context) FeatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureOutput)
}

type FeatureOutput struct{ *pulumi.OutputState }

func (FeatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Feature)(nil)).Elem()
}

func (o FeatureOutput) ToFeatureOutput() FeatureOutput {
	return o
}

func (o FeatureOutput) ToFeatureOutputWithContext(ctx context.Context) FeatureOutput {
	return o
}

func (o FeatureOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Feature) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o FeatureOutput) DefaultVariation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Feature) pulumi.StringPtrOutput { return v.DefaultVariation }).(pulumi.StringPtrOutput)
}

func (o FeatureOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Feature) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o FeatureOutput) EntityOverrides() FeatureEntityOverrideArrayOutput {
	return o.ApplyT(func(v *Feature) FeatureEntityOverrideArrayOutput { return v.EntityOverrides }).(FeatureEntityOverrideArrayOutput)
}

func (o FeatureOutput) EvaluationStrategy() FeatureEvaluationStrategyPtrOutput {
	return o.ApplyT(func(v *Feature) FeatureEvaluationStrategyPtrOutput { return v.EvaluationStrategy }).(FeatureEvaluationStrategyPtrOutput)
}

func (o FeatureOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Feature) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o FeatureOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Feature) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// An array of key-value pairs to apply to this resource.
func (o FeatureOutput) Tags() FeatureTagArrayOutput {
	return o.ApplyT(func(v *Feature) FeatureTagArrayOutput { return v.Tags }).(FeatureTagArrayOutput)
}

func (o FeatureOutput) Variations() FeatureVariationObjectArrayOutput {
	return o.ApplyT(func(v *Feature) FeatureVariationObjectArrayOutput { return v.Variations }).(FeatureVariationObjectArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureInput)(nil)).Elem(), &Feature{})
	pulumi.RegisterOutputType(FeatureOutput{})
}
