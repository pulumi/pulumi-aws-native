// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package evidently

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ExperimentMetricGoalObject struct {
	DesiredChange ExperimentMetricGoalObjectDesiredChange `pulumi:"desiredChange"`
	// The JSON path to reference the entity id in the event.
	EntityIdKey string `pulumi:"entityIdKey"`
	// Event patterns have the same structure as the events they match. Rules use event patterns to select events. An event pattern either matches an event or it doesn't.
	EventPattern string  `pulumi:"eventPattern"`
	MetricName   string  `pulumi:"metricName"`
	UnitLabel    *string `pulumi:"unitLabel"`
	// The JSON path to reference the numerical metric value in the event.
	ValueKey string `pulumi:"valueKey"`
}

// ExperimentMetricGoalObjectInput is an input type that accepts ExperimentMetricGoalObjectArgs and ExperimentMetricGoalObjectOutput values.
// You can construct a concrete instance of `ExperimentMetricGoalObjectInput` via:
//
//          ExperimentMetricGoalObjectArgs{...}
type ExperimentMetricGoalObjectInput interface {
	pulumi.Input

	ToExperimentMetricGoalObjectOutput() ExperimentMetricGoalObjectOutput
	ToExperimentMetricGoalObjectOutputWithContext(context.Context) ExperimentMetricGoalObjectOutput
}

type ExperimentMetricGoalObjectArgs struct {
	DesiredChange ExperimentMetricGoalObjectDesiredChangeInput `pulumi:"desiredChange"`
	// The JSON path to reference the entity id in the event.
	EntityIdKey pulumi.StringInput `pulumi:"entityIdKey"`
	// Event patterns have the same structure as the events they match. Rules use event patterns to select events. An event pattern either matches an event or it doesn't.
	EventPattern pulumi.StringInput    `pulumi:"eventPattern"`
	MetricName   pulumi.StringInput    `pulumi:"metricName"`
	UnitLabel    pulumi.StringPtrInput `pulumi:"unitLabel"`
	// The JSON path to reference the numerical metric value in the event.
	ValueKey pulumi.StringInput `pulumi:"valueKey"`
}

func (ExperimentMetricGoalObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentMetricGoalObject)(nil)).Elem()
}

func (i ExperimentMetricGoalObjectArgs) ToExperimentMetricGoalObjectOutput() ExperimentMetricGoalObjectOutput {
	return i.ToExperimentMetricGoalObjectOutputWithContext(context.Background())
}

func (i ExperimentMetricGoalObjectArgs) ToExperimentMetricGoalObjectOutputWithContext(ctx context.Context) ExperimentMetricGoalObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentMetricGoalObjectOutput)
}

// ExperimentMetricGoalObjectArrayInput is an input type that accepts ExperimentMetricGoalObjectArray and ExperimentMetricGoalObjectArrayOutput values.
// You can construct a concrete instance of `ExperimentMetricGoalObjectArrayInput` via:
//
//          ExperimentMetricGoalObjectArray{ ExperimentMetricGoalObjectArgs{...} }
type ExperimentMetricGoalObjectArrayInput interface {
	pulumi.Input

	ToExperimentMetricGoalObjectArrayOutput() ExperimentMetricGoalObjectArrayOutput
	ToExperimentMetricGoalObjectArrayOutputWithContext(context.Context) ExperimentMetricGoalObjectArrayOutput
}

type ExperimentMetricGoalObjectArray []ExperimentMetricGoalObjectInput

func (ExperimentMetricGoalObjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExperimentMetricGoalObject)(nil)).Elem()
}

func (i ExperimentMetricGoalObjectArray) ToExperimentMetricGoalObjectArrayOutput() ExperimentMetricGoalObjectArrayOutput {
	return i.ToExperimentMetricGoalObjectArrayOutputWithContext(context.Background())
}

func (i ExperimentMetricGoalObjectArray) ToExperimentMetricGoalObjectArrayOutputWithContext(ctx context.Context) ExperimentMetricGoalObjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentMetricGoalObjectArrayOutput)
}

type ExperimentMetricGoalObjectOutput struct{ *pulumi.OutputState }

func (ExperimentMetricGoalObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentMetricGoalObject)(nil)).Elem()
}

func (o ExperimentMetricGoalObjectOutput) ToExperimentMetricGoalObjectOutput() ExperimentMetricGoalObjectOutput {
	return o
}

func (o ExperimentMetricGoalObjectOutput) ToExperimentMetricGoalObjectOutputWithContext(ctx context.Context) ExperimentMetricGoalObjectOutput {
	return o
}

func (o ExperimentMetricGoalObjectOutput) DesiredChange() ExperimentMetricGoalObjectDesiredChangeOutput {
	return o.ApplyT(func(v ExperimentMetricGoalObject) ExperimentMetricGoalObjectDesiredChange { return v.DesiredChange }).(ExperimentMetricGoalObjectDesiredChangeOutput)
}

// The JSON path to reference the entity id in the event.
func (o ExperimentMetricGoalObjectOutput) EntityIdKey() pulumi.StringOutput {
	return o.ApplyT(func(v ExperimentMetricGoalObject) string { return v.EntityIdKey }).(pulumi.StringOutput)
}

// Event patterns have the same structure as the events they match. Rules use event patterns to select events. An event pattern either matches an event or it doesn't.
func (o ExperimentMetricGoalObjectOutput) EventPattern() pulumi.StringOutput {
	return o.ApplyT(func(v ExperimentMetricGoalObject) string { return v.EventPattern }).(pulumi.StringOutput)
}

func (o ExperimentMetricGoalObjectOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v ExperimentMetricGoalObject) string { return v.MetricName }).(pulumi.StringOutput)
}

func (o ExperimentMetricGoalObjectOutput) UnitLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExperimentMetricGoalObject) *string { return v.UnitLabel }).(pulumi.StringPtrOutput)
}

// The JSON path to reference the numerical metric value in the event.
func (o ExperimentMetricGoalObjectOutput) ValueKey() pulumi.StringOutput {
	return o.ApplyT(func(v ExperimentMetricGoalObject) string { return v.ValueKey }).(pulumi.StringOutput)
}

type ExperimentMetricGoalObjectArrayOutput struct{ *pulumi.OutputState }

func (ExperimentMetricGoalObjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExperimentMetricGoalObject)(nil)).Elem()
}

func (o ExperimentMetricGoalObjectArrayOutput) ToExperimentMetricGoalObjectArrayOutput() ExperimentMetricGoalObjectArrayOutput {
	return o
}

func (o ExperimentMetricGoalObjectArrayOutput) ToExperimentMetricGoalObjectArrayOutputWithContext(ctx context.Context) ExperimentMetricGoalObjectArrayOutput {
	return o
}

func (o ExperimentMetricGoalObjectArrayOutput) Index(i pulumi.IntInput) ExperimentMetricGoalObjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExperimentMetricGoalObject {
		return vs[0].([]ExperimentMetricGoalObject)[vs[1].(int)]
	}).(ExperimentMetricGoalObjectOutput)
}

type ExperimentOnlineAbConfigObject struct {
	ControlTreatmentName *string                       `pulumi:"controlTreatmentName"`
	TreatmentWeights     []ExperimentTreatmentToWeight `pulumi:"treatmentWeights"`
}

// ExperimentOnlineAbConfigObjectInput is an input type that accepts ExperimentOnlineAbConfigObjectArgs and ExperimentOnlineAbConfigObjectOutput values.
// You can construct a concrete instance of `ExperimentOnlineAbConfigObjectInput` via:
//
//          ExperimentOnlineAbConfigObjectArgs{...}
type ExperimentOnlineAbConfigObjectInput interface {
	pulumi.Input

	ToExperimentOnlineAbConfigObjectOutput() ExperimentOnlineAbConfigObjectOutput
	ToExperimentOnlineAbConfigObjectOutputWithContext(context.Context) ExperimentOnlineAbConfigObjectOutput
}

type ExperimentOnlineAbConfigObjectArgs struct {
	ControlTreatmentName pulumi.StringPtrInput                 `pulumi:"controlTreatmentName"`
	TreatmentWeights     ExperimentTreatmentToWeightArrayInput `pulumi:"treatmentWeights"`
}

func (ExperimentOnlineAbConfigObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentOnlineAbConfigObject)(nil)).Elem()
}

func (i ExperimentOnlineAbConfigObjectArgs) ToExperimentOnlineAbConfigObjectOutput() ExperimentOnlineAbConfigObjectOutput {
	return i.ToExperimentOnlineAbConfigObjectOutputWithContext(context.Background())
}

func (i ExperimentOnlineAbConfigObjectArgs) ToExperimentOnlineAbConfigObjectOutputWithContext(ctx context.Context) ExperimentOnlineAbConfigObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentOnlineAbConfigObjectOutput)
}

func (i ExperimentOnlineAbConfigObjectArgs) ToExperimentOnlineAbConfigObjectPtrOutput() ExperimentOnlineAbConfigObjectPtrOutput {
	return i.ToExperimentOnlineAbConfigObjectPtrOutputWithContext(context.Background())
}

func (i ExperimentOnlineAbConfigObjectArgs) ToExperimentOnlineAbConfigObjectPtrOutputWithContext(ctx context.Context) ExperimentOnlineAbConfigObjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentOnlineAbConfigObjectOutput).ToExperimentOnlineAbConfigObjectPtrOutputWithContext(ctx)
}

// ExperimentOnlineAbConfigObjectPtrInput is an input type that accepts ExperimentOnlineAbConfigObjectArgs, ExperimentOnlineAbConfigObjectPtr and ExperimentOnlineAbConfigObjectPtrOutput values.
// You can construct a concrete instance of `ExperimentOnlineAbConfigObjectPtrInput` via:
//
//          ExperimentOnlineAbConfigObjectArgs{...}
//
//  or:
//
//          nil
type ExperimentOnlineAbConfigObjectPtrInput interface {
	pulumi.Input

	ToExperimentOnlineAbConfigObjectPtrOutput() ExperimentOnlineAbConfigObjectPtrOutput
	ToExperimentOnlineAbConfigObjectPtrOutputWithContext(context.Context) ExperimentOnlineAbConfigObjectPtrOutput
}

type experimentOnlineAbConfigObjectPtrType ExperimentOnlineAbConfigObjectArgs

func ExperimentOnlineAbConfigObjectPtr(v *ExperimentOnlineAbConfigObjectArgs) ExperimentOnlineAbConfigObjectPtrInput {
	return (*experimentOnlineAbConfigObjectPtrType)(v)
}

func (*experimentOnlineAbConfigObjectPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExperimentOnlineAbConfigObject)(nil)).Elem()
}

func (i *experimentOnlineAbConfigObjectPtrType) ToExperimentOnlineAbConfigObjectPtrOutput() ExperimentOnlineAbConfigObjectPtrOutput {
	return i.ToExperimentOnlineAbConfigObjectPtrOutputWithContext(context.Background())
}

func (i *experimentOnlineAbConfigObjectPtrType) ToExperimentOnlineAbConfigObjectPtrOutputWithContext(ctx context.Context) ExperimentOnlineAbConfigObjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentOnlineAbConfigObjectPtrOutput)
}

type ExperimentOnlineAbConfigObjectOutput struct{ *pulumi.OutputState }

func (ExperimentOnlineAbConfigObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentOnlineAbConfigObject)(nil)).Elem()
}

func (o ExperimentOnlineAbConfigObjectOutput) ToExperimentOnlineAbConfigObjectOutput() ExperimentOnlineAbConfigObjectOutput {
	return o
}

func (o ExperimentOnlineAbConfigObjectOutput) ToExperimentOnlineAbConfigObjectOutputWithContext(ctx context.Context) ExperimentOnlineAbConfigObjectOutput {
	return o
}

func (o ExperimentOnlineAbConfigObjectOutput) ToExperimentOnlineAbConfigObjectPtrOutput() ExperimentOnlineAbConfigObjectPtrOutput {
	return o.ToExperimentOnlineAbConfigObjectPtrOutputWithContext(context.Background())
}

func (o ExperimentOnlineAbConfigObjectOutput) ToExperimentOnlineAbConfigObjectPtrOutputWithContext(ctx context.Context) ExperimentOnlineAbConfigObjectPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExperimentOnlineAbConfigObject) *ExperimentOnlineAbConfigObject {
		return &v
	}).(ExperimentOnlineAbConfigObjectPtrOutput)
}

func (o ExperimentOnlineAbConfigObjectOutput) ControlTreatmentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExperimentOnlineAbConfigObject) *string { return v.ControlTreatmentName }).(pulumi.StringPtrOutput)
}

func (o ExperimentOnlineAbConfigObjectOutput) TreatmentWeights() ExperimentTreatmentToWeightArrayOutput {
	return o.ApplyT(func(v ExperimentOnlineAbConfigObject) []ExperimentTreatmentToWeight { return v.TreatmentWeights }).(ExperimentTreatmentToWeightArrayOutput)
}

type ExperimentOnlineAbConfigObjectPtrOutput struct{ *pulumi.OutputState }

func (ExperimentOnlineAbConfigObjectPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExperimentOnlineAbConfigObject)(nil)).Elem()
}

func (o ExperimentOnlineAbConfigObjectPtrOutput) ToExperimentOnlineAbConfigObjectPtrOutput() ExperimentOnlineAbConfigObjectPtrOutput {
	return o
}

func (o ExperimentOnlineAbConfigObjectPtrOutput) ToExperimentOnlineAbConfigObjectPtrOutputWithContext(ctx context.Context) ExperimentOnlineAbConfigObjectPtrOutput {
	return o
}

func (o ExperimentOnlineAbConfigObjectPtrOutput) Elem() ExperimentOnlineAbConfigObjectOutput {
	return o.ApplyT(func(v *ExperimentOnlineAbConfigObject) ExperimentOnlineAbConfigObject {
		if v != nil {
			return *v
		}
		var ret ExperimentOnlineAbConfigObject
		return ret
	}).(ExperimentOnlineAbConfigObjectOutput)
}

func (o ExperimentOnlineAbConfigObjectPtrOutput) ControlTreatmentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExperimentOnlineAbConfigObject) *string {
		if v == nil {
			return nil
		}
		return v.ControlTreatmentName
	}).(pulumi.StringPtrOutput)
}

func (o ExperimentOnlineAbConfigObjectPtrOutput) TreatmentWeights() ExperimentTreatmentToWeightArrayOutput {
	return o.ApplyT(func(v *ExperimentOnlineAbConfigObject) []ExperimentTreatmentToWeight {
		if v == nil {
			return nil
		}
		return v.TreatmentWeights
	}).(ExperimentTreatmentToWeightArrayOutput)
}

// A key-value pair to associate with a resource.
type ExperimentTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// ExperimentTagInput is an input type that accepts ExperimentTagArgs and ExperimentTagOutput values.
// You can construct a concrete instance of `ExperimentTagInput` via:
//
//          ExperimentTagArgs{...}
type ExperimentTagInput interface {
	pulumi.Input

	ToExperimentTagOutput() ExperimentTagOutput
	ToExperimentTagOutputWithContext(context.Context) ExperimentTagOutput
}

// A key-value pair to associate with a resource.
type ExperimentTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ExperimentTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentTag)(nil)).Elem()
}

func (i ExperimentTagArgs) ToExperimentTagOutput() ExperimentTagOutput {
	return i.ToExperimentTagOutputWithContext(context.Background())
}

func (i ExperimentTagArgs) ToExperimentTagOutputWithContext(ctx context.Context) ExperimentTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentTagOutput)
}

// ExperimentTagArrayInput is an input type that accepts ExperimentTagArray and ExperimentTagArrayOutput values.
// You can construct a concrete instance of `ExperimentTagArrayInput` via:
//
//          ExperimentTagArray{ ExperimentTagArgs{...} }
type ExperimentTagArrayInput interface {
	pulumi.Input

	ToExperimentTagArrayOutput() ExperimentTagArrayOutput
	ToExperimentTagArrayOutputWithContext(context.Context) ExperimentTagArrayOutput
}

type ExperimentTagArray []ExperimentTagInput

func (ExperimentTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExperimentTag)(nil)).Elem()
}

func (i ExperimentTagArray) ToExperimentTagArrayOutput() ExperimentTagArrayOutput {
	return i.ToExperimentTagArrayOutputWithContext(context.Background())
}

func (i ExperimentTagArray) ToExperimentTagArrayOutputWithContext(ctx context.Context) ExperimentTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentTagArrayOutput)
}

// A key-value pair to associate with a resource.
type ExperimentTagOutput struct{ *pulumi.OutputState }

func (ExperimentTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentTag)(nil)).Elem()
}

func (o ExperimentTagOutput) ToExperimentTagOutput() ExperimentTagOutput {
	return o
}

func (o ExperimentTagOutput) ToExperimentTagOutputWithContext(ctx context.Context) ExperimentTagOutput {
	return o
}

// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o ExperimentTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ExperimentTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o ExperimentTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ExperimentTag) string { return v.Value }).(pulumi.StringOutput)
}

type ExperimentTagArrayOutput struct{ *pulumi.OutputState }

func (ExperimentTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExperimentTag)(nil)).Elem()
}

func (o ExperimentTagArrayOutput) ToExperimentTagArrayOutput() ExperimentTagArrayOutput {
	return o
}

func (o ExperimentTagArrayOutput) ToExperimentTagArrayOutputWithContext(ctx context.Context) ExperimentTagArrayOutput {
	return o
}

func (o ExperimentTagArrayOutput) Index(i pulumi.IntInput) ExperimentTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExperimentTag {
		return vs[0].([]ExperimentTag)[vs[1].(int)]
	}).(ExperimentTagOutput)
}

type ExperimentTreatmentObject struct {
	Description   *string `pulumi:"description"`
	Feature       string  `pulumi:"feature"`
	TreatmentName string  `pulumi:"treatmentName"`
	Variation     string  `pulumi:"variation"`
}

// ExperimentTreatmentObjectInput is an input type that accepts ExperimentTreatmentObjectArgs and ExperimentTreatmentObjectOutput values.
// You can construct a concrete instance of `ExperimentTreatmentObjectInput` via:
//
//          ExperimentTreatmentObjectArgs{...}
type ExperimentTreatmentObjectInput interface {
	pulumi.Input

	ToExperimentTreatmentObjectOutput() ExperimentTreatmentObjectOutput
	ToExperimentTreatmentObjectOutputWithContext(context.Context) ExperimentTreatmentObjectOutput
}

type ExperimentTreatmentObjectArgs struct {
	Description   pulumi.StringPtrInput `pulumi:"description"`
	Feature       pulumi.StringInput    `pulumi:"feature"`
	TreatmentName pulumi.StringInput    `pulumi:"treatmentName"`
	Variation     pulumi.StringInput    `pulumi:"variation"`
}

func (ExperimentTreatmentObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentTreatmentObject)(nil)).Elem()
}

func (i ExperimentTreatmentObjectArgs) ToExperimentTreatmentObjectOutput() ExperimentTreatmentObjectOutput {
	return i.ToExperimentTreatmentObjectOutputWithContext(context.Background())
}

func (i ExperimentTreatmentObjectArgs) ToExperimentTreatmentObjectOutputWithContext(ctx context.Context) ExperimentTreatmentObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentTreatmentObjectOutput)
}

// ExperimentTreatmentObjectArrayInput is an input type that accepts ExperimentTreatmentObjectArray and ExperimentTreatmentObjectArrayOutput values.
// You can construct a concrete instance of `ExperimentTreatmentObjectArrayInput` via:
//
//          ExperimentTreatmentObjectArray{ ExperimentTreatmentObjectArgs{...} }
type ExperimentTreatmentObjectArrayInput interface {
	pulumi.Input

	ToExperimentTreatmentObjectArrayOutput() ExperimentTreatmentObjectArrayOutput
	ToExperimentTreatmentObjectArrayOutputWithContext(context.Context) ExperimentTreatmentObjectArrayOutput
}

type ExperimentTreatmentObjectArray []ExperimentTreatmentObjectInput

func (ExperimentTreatmentObjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExperimentTreatmentObject)(nil)).Elem()
}

func (i ExperimentTreatmentObjectArray) ToExperimentTreatmentObjectArrayOutput() ExperimentTreatmentObjectArrayOutput {
	return i.ToExperimentTreatmentObjectArrayOutputWithContext(context.Background())
}

func (i ExperimentTreatmentObjectArray) ToExperimentTreatmentObjectArrayOutputWithContext(ctx context.Context) ExperimentTreatmentObjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentTreatmentObjectArrayOutput)
}

type ExperimentTreatmentObjectOutput struct{ *pulumi.OutputState }

func (ExperimentTreatmentObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentTreatmentObject)(nil)).Elem()
}

func (o ExperimentTreatmentObjectOutput) ToExperimentTreatmentObjectOutput() ExperimentTreatmentObjectOutput {
	return o
}

func (o ExperimentTreatmentObjectOutput) ToExperimentTreatmentObjectOutputWithContext(ctx context.Context) ExperimentTreatmentObjectOutput {
	return o
}

func (o ExperimentTreatmentObjectOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExperimentTreatmentObject) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ExperimentTreatmentObjectOutput) Feature() pulumi.StringOutput {
	return o.ApplyT(func(v ExperimentTreatmentObject) string { return v.Feature }).(pulumi.StringOutput)
}

func (o ExperimentTreatmentObjectOutput) TreatmentName() pulumi.StringOutput {
	return o.ApplyT(func(v ExperimentTreatmentObject) string { return v.TreatmentName }).(pulumi.StringOutput)
}

func (o ExperimentTreatmentObjectOutput) Variation() pulumi.StringOutput {
	return o.ApplyT(func(v ExperimentTreatmentObject) string { return v.Variation }).(pulumi.StringOutput)
}

type ExperimentTreatmentObjectArrayOutput struct{ *pulumi.OutputState }

func (ExperimentTreatmentObjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExperimentTreatmentObject)(nil)).Elem()
}

func (o ExperimentTreatmentObjectArrayOutput) ToExperimentTreatmentObjectArrayOutput() ExperimentTreatmentObjectArrayOutput {
	return o
}

func (o ExperimentTreatmentObjectArrayOutput) ToExperimentTreatmentObjectArrayOutputWithContext(ctx context.Context) ExperimentTreatmentObjectArrayOutput {
	return o
}

func (o ExperimentTreatmentObjectArrayOutput) Index(i pulumi.IntInput) ExperimentTreatmentObjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExperimentTreatmentObject {
		return vs[0].([]ExperimentTreatmentObject)[vs[1].(int)]
	}).(ExperimentTreatmentObjectOutput)
}

type ExperimentTreatmentToWeight struct {
	SplitWeight int    `pulumi:"splitWeight"`
	Treatment   string `pulumi:"treatment"`
}

// ExperimentTreatmentToWeightInput is an input type that accepts ExperimentTreatmentToWeightArgs and ExperimentTreatmentToWeightOutput values.
// You can construct a concrete instance of `ExperimentTreatmentToWeightInput` via:
//
//          ExperimentTreatmentToWeightArgs{...}
type ExperimentTreatmentToWeightInput interface {
	pulumi.Input

	ToExperimentTreatmentToWeightOutput() ExperimentTreatmentToWeightOutput
	ToExperimentTreatmentToWeightOutputWithContext(context.Context) ExperimentTreatmentToWeightOutput
}

type ExperimentTreatmentToWeightArgs struct {
	SplitWeight pulumi.IntInput    `pulumi:"splitWeight"`
	Treatment   pulumi.StringInput `pulumi:"treatment"`
}

func (ExperimentTreatmentToWeightArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentTreatmentToWeight)(nil)).Elem()
}

func (i ExperimentTreatmentToWeightArgs) ToExperimentTreatmentToWeightOutput() ExperimentTreatmentToWeightOutput {
	return i.ToExperimentTreatmentToWeightOutputWithContext(context.Background())
}

func (i ExperimentTreatmentToWeightArgs) ToExperimentTreatmentToWeightOutputWithContext(ctx context.Context) ExperimentTreatmentToWeightOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentTreatmentToWeightOutput)
}

// ExperimentTreatmentToWeightArrayInput is an input type that accepts ExperimentTreatmentToWeightArray and ExperimentTreatmentToWeightArrayOutput values.
// You can construct a concrete instance of `ExperimentTreatmentToWeightArrayInput` via:
//
//          ExperimentTreatmentToWeightArray{ ExperimentTreatmentToWeightArgs{...} }
type ExperimentTreatmentToWeightArrayInput interface {
	pulumi.Input

	ToExperimentTreatmentToWeightArrayOutput() ExperimentTreatmentToWeightArrayOutput
	ToExperimentTreatmentToWeightArrayOutputWithContext(context.Context) ExperimentTreatmentToWeightArrayOutput
}

type ExperimentTreatmentToWeightArray []ExperimentTreatmentToWeightInput

func (ExperimentTreatmentToWeightArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExperimentTreatmentToWeight)(nil)).Elem()
}

func (i ExperimentTreatmentToWeightArray) ToExperimentTreatmentToWeightArrayOutput() ExperimentTreatmentToWeightArrayOutput {
	return i.ToExperimentTreatmentToWeightArrayOutputWithContext(context.Background())
}

func (i ExperimentTreatmentToWeightArray) ToExperimentTreatmentToWeightArrayOutputWithContext(ctx context.Context) ExperimentTreatmentToWeightArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentTreatmentToWeightArrayOutput)
}

type ExperimentTreatmentToWeightOutput struct{ *pulumi.OutputState }

func (ExperimentTreatmentToWeightOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentTreatmentToWeight)(nil)).Elem()
}

func (o ExperimentTreatmentToWeightOutput) ToExperimentTreatmentToWeightOutput() ExperimentTreatmentToWeightOutput {
	return o
}

func (o ExperimentTreatmentToWeightOutput) ToExperimentTreatmentToWeightOutputWithContext(ctx context.Context) ExperimentTreatmentToWeightOutput {
	return o
}

func (o ExperimentTreatmentToWeightOutput) SplitWeight() pulumi.IntOutput {
	return o.ApplyT(func(v ExperimentTreatmentToWeight) int { return v.SplitWeight }).(pulumi.IntOutput)
}

func (o ExperimentTreatmentToWeightOutput) Treatment() pulumi.StringOutput {
	return o.ApplyT(func(v ExperimentTreatmentToWeight) string { return v.Treatment }).(pulumi.StringOutput)
}

type ExperimentTreatmentToWeightArrayOutput struct{ *pulumi.OutputState }

func (ExperimentTreatmentToWeightArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExperimentTreatmentToWeight)(nil)).Elem()
}

func (o ExperimentTreatmentToWeightArrayOutput) ToExperimentTreatmentToWeightArrayOutput() ExperimentTreatmentToWeightArrayOutput {
	return o
}

func (o ExperimentTreatmentToWeightArrayOutput) ToExperimentTreatmentToWeightArrayOutputWithContext(ctx context.Context) ExperimentTreatmentToWeightArrayOutput {
	return o
}

func (o ExperimentTreatmentToWeightArrayOutput) Index(i pulumi.IntInput) ExperimentTreatmentToWeightOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExperimentTreatmentToWeight {
		return vs[0].([]ExperimentTreatmentToWeight)[vs[1].(int)]
	}).(ExperimentTreatmentToWeightOutput)
}

type FeatureEntityOverride struct {
	EntityId  *string `pulumi:"entityId"`
	Variation *string `pulumi:"variation"`
}

// FeatureEntityOverrideInput is an input type that accepts FeatureEntityOverrideArgs and FeatureEntityOverrideOutput values.
// You can construct a concrete instance of `FeatureEntityOverrideInput` via:
//
//          FeatureEntityOverrideArgs{...}
type FeatureEntityOverrideInput interface {
	pulumi.Input

	ToFeatureEntityOverrideOutput() FeatureEntityOverrideOutput
	ToFeatureEntityOverrideOutputWithContext(context.Context) FeatureEntityOverrideOutput
}

type FeatureEntityOverrideArgs struct {
	EntityId  pulumi.StringPtrInput `pulumi:"entityId"`
	Variation pulumi.StringPtrInput `pulumi:"variation"`
}

func (FeatureEntityOverrideArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureEntityOverride)(nil)).Elem()
}

func (i FeatureEntityOverrideArgs) ToFeatureEntityOverrideOutput() FeatureEntityOverrideOutput {
	return i.ToFeatureEntityOverrideOutputWithContext(context.Background())
}

func (i FeatureEntityOverrideArgs) ToFeatureEntityOverrideOutputWithContext(ctx context.Context) FeatureEntityOverrideOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureEntityOverrideOutput)
}

// FeatureEntityOverrideArrayInput is an input type that accepts FeatureEntityOverrideArray and FeatureEntityOverrideArrayOutput values.
// You can construct a concrete instance of `FeatureEntityOverrideArrayInput` via:
//
//          FeatureEntityOverrideArray{ FeatureEntityOverrideArgs{...} }
type FeatureEntityOverrideArrayInput interface {
	pulumi.Input

	ToFeatureEntityOverrideArrayOutput() FeatureEntityOverrideArrayOutput
	ToFeatureEntityOverrideArrayOutputWithContext(context.Context) FeatureEntityOverrideArrayOutput
}

type FeatureEntityOverrideArray []FeatureEntityOverrideInput

func (FeatureEntityOverrideArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FeatureEntityOverride)(nil)).Elem()
}

func (i FeatureEntityOverrideArray) ToFeatureEntityOverrideArrayOutput() FeatureEntityOverrideArrayOutput {
	return i.ToFeatureEntityOverrideArrayOutputWithContext(context.Background())
}

func (i FeatureEntityOverrideArray) ToFeatureEntityOverrideArrayOutputWithContext(ctx context.Context) FeatureEntityOverrideArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureEntityOverrideArrayOutput)
}

type FeatureEntityOverrideOutput struct{ *pulumi.OutputState }

func (FeatureEntityOverrideOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureEntityOverride)(nil)).Elem()
}

func (o FeatureEntityOverrideOutput) ToFeatureEntityOverrideOutput() FeatureEntityOverrideOutput {
	return o
}

func (o FeatureEntityOverrideOutput) ToFeatureEntityOverrideOutputWithContext(ctx context.Context) FeatureEntityOverrideOutput {
	return o
}

func (o FeatureEntityOverrideOutput) EntityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeatureEntityOverride) *string { return v.EntityId }).(pulumi.StringPtrOutput)
}

func (o FeatureEntityOverrideOutput) Variation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeatureEntityOverride) *string { return v.Variation }).(pulumi.StringPtrOutput)
}

type FeatureEntityOverrideArrayOutput struct{ *pulumi.OutputState }

func (FeatureEntityOverrideArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FeatureEntityOverride)(nil)).Elem()
}

func (o FeatureEntityOverrideArrayOutput) ToFeatureEntityOverrideArrayOutput() FeatureEntityOverrideArrayOutput {
	return o
}

func (o FeatureEntityOverrideArrayOutput) ToFeatureEntityOverrideArrayOutputWithContext(ctx context.Context) FeatureEntityOverrideArrayOutput {
	return o
}

func (o FeatureEntityOverrideArrayOutput) Index(i pulumi.IntInput) FeatureEntityOverrideOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FeatureEntityOverride {
		return vs[0].([]FeatureEntityOverride)[vs[1].(int)]
	}).(FeatureEntityOverrideOutput)
}

// A key-value pair to associate with a resource.
type FeatureTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// FeatureTagInput is an input type that accepts FeatureTagArgs and FeatureTagOutput values.
// You can construct a concrete instance of `FeatureTagInput` via:
//
//          FeatureTagArgs{...}
type FeatureTagInput interface {
	pulumi.Input

	ToFeatureTagOutput() FeatureTagOutput
	ToFeatureTagOutputWithContext(context.Context) FeatureTagOutput
}

// A key-value pair to associate with a resource.
type FeatureTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringInput `pulumi:"value"`
}

func (FeatureTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureTag)(nil)).Elem()
}

func (i FeatureTagArgs) ToFeatureTagOutput() FeatureTagOutput {
	return i.ToFeatureTagOutputWithContext(context.Background())
}

func (i FeatureTagArgs) ToFeatureTagOutputWithContext(ctx context.Context) FeatureTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureTagOutput)
}

// FeatureTagArrayInput is an input type that accepts FeatureTagArray and FeatureTagArrayOutput values.
// You can construct a concrete instance of `FeatureTagArrayInput` via:
//
//          FeatureTagArray{ FeatureTagArgs{...} }
type FeatureTagArrayInput interface {
	pulumi.Input

	ToFeatureTagArrayOutput() FeatureTagArrayOutput
	ToFeatureTagArrayOutputWithContext(context.Context) FeatureTagArrayOutput
}

type FeatureTagArray []FeatureTagInput

func (FeatureTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FeatureTag)(nil)).Elem()
}

func (i FeatureTagArray) ToFeatureTagArrayOutput() FeatureTagArrayOutput {
	return i.ToFeatureTagArrayOutputWithContext(context.Background())
}

func (i FeatureTagArray) ToFeatureTagArrayOutputWithContext(ctx context.Context) FeatureTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureTagArrayOutput)
}

// A key-value pair to associate with a resource.
type FeatureTagOutput struct{ *pulumi.OutputState }

func (FeatureTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureTag)(nil)).Elem()
}

func (o FeatureTagOutput) ToFeatureTagOutput() FeatureTagOutput {
	return o
}

func (o FeatureTagOutput) ToFeatureTagOutputWithContext(ctx context.Context) FeatureTagOutput {
	return o
}

// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o FeatureTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v FeatureTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o FeatureTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v FeatureTag) string { return v.Value }).(pulumi.StringOutput)
}

type FeatureTagArrayOutput struct{ *pulumi.OutputState }

func (FeatureTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FeatureTag)(nil)).Elem()
}

func (o FeatureTagArrayOutput) ToFeatureTagArrayOutput() FeatureTagArrayOutput {
	return o
}

func (o FeatureTagArrayOutput) ToFeatureTagArrayOutputWithContext(ctx context.Context) FeatureTagArrayOutput {
	return o
}

func (o FeatureTagArrayOutput) Index(i pulumi.IntInput) FeatureTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FeatureTag {
		return vs[0].([]FeatureTag)[vs[1].(int)]
	}).(FeatureTagOutput)
}

type FeatureVariationObject struct {
	BooleanValue  *bool    `pulumi:"booleanValue"`
	DoubleValue   *float64 `pulumi:"doubleValue"`
	LongValue     *float64 `pulumi:"longValue"`
	StringValue   *string  `pulumi:"stringValue"`
	VariationName *string  `pulumi:"variationName"`
}

// FeatureVariationObjectInput is an input type that accepts FeatureVariationObjectArgs and FeatureVariationObjectOutput values.
// You can construct a concrete instance of `FeatureVariationObjectInput` via:
//
//          FeatureVariationObjectArgs{...}
type FeatureVariationObjectInput interface {
	pulumi.Input

	ToFeatureVariationObjectOutput() FeatureVariationObjectOutput
	ToFeatureVariationObjectOutputWithContext(context.Context) FeatureVariationObjectOutput
}

type FeatureVariationObjectArgs struct {
	BooleanValue  pulumi.BoolPtrInput    `pulumi:"booleanValue"`
	DoubleValue   pulumi.Float64PtrInput `pulumi:"doubleValue"`
	LongValue     pulumi.Float64PtrInput `pulumi:"longValue"`
	StringValue   pulumi.StringPtrInput  `pulumi:"stringValue"`
	VariationName pulumi.StringPtrInput  `pulumi:"variationName"`
}

func (FeatureVariationObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureVariationObject)(nil)).Elem()
}

func (i FeatureVariationObjectArgs) ToFeatureVariationObjectOutput() FeatureVariationObjectOutput {
	return i.ToFeatureVariationObjectOutputWithContext(context.Background())
}

func (i FeatureVariationObjectArgs) ToFeatureVariationObjectOutputWithContext(ctx context.Context) FeatureVariationObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureVariationObjectOutput)
}

// FeatureVariationObjectArrayInput is an input type that accepts FeatureVariationObjectArray and FeatureVariationObjectArrayOutput values.
// You can construct a concrete instance of `FeatureVariationObjectArrayInput` via:
//
//          FeatureVariationObjectArray{ FeatureVariationObjectArgs{...} }
type FeatureVariationObjectArrayInput interface {
	pulumi.Input

	ToFeatureVariationObjectArrayOutput() FeatureVariationObjectArrayOutput
	ToFeatureVariationObjectArrayOutputWithContext(context.Context) FeatureVariationObjectArrayOutput
}

type FeatureVariationObjectArray []FeatureVariationObjectInput

func (FeatureVariationObjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FeatureVariationObject)(nil)).Elem()
}

func (i FeatureVariationObjectArray) ToFeatureVariationObjectArrayOutput() FeatureVariationObjectArrayOutput {
	return i.ToFeatureVariationObjectArrayOutputWithContext(context.Background())
}

func (i FeatureVariationObjectArray) ToFeatureVariationObjectArrayOutputWithContext(ctx context.Context) FeatureVariationObjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureVariationObjectArrayOutput)
}

type FeatureVariationObjectOutput struct{ *pulumi.OutputState }

func (FeatureVariationObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureVariationObject)(nil)).Elem()
}

func (o FeatureVariationObjectOutput) ToFeatureVariationObjectOutput() FeatureVariationObjectOutput {
	return o
}

func (o FeatureVariationObjectOutput) ToFeatureVariationObjectOutputWithContext(ctx context.Context) FeatureVariationObjectOutput {
	return o
}

func (o FeatureVariationObjectOutput) BooleanValue() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FeatureVariationObject) *bool { return v.BooleanValue }).(pulumi.BoolPtrOutput)
}

func (o FeatureVariationObjectOutput) DoubleValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v FeatureVariationObject) *float64 { return v.DoubleValue }).(pulumi.Float64PtrOutput)
}

func (o FeatureVariationObjectOutput) LongValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v FeatureVariationObject) *float64 { return v.LongValue }).(pulumi.Float64PtrOutput)
}

func (o FeatureVariationObjectOutput) StringValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeatureVariationObject) *string { return v.StringValue }).(pulumi.StringPtrOutput)
}

func (o FeatureVariationObjectOutput) VariationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeatureVariationObject) *string { return v.VariationName }).(pulumi.StringPtrOutput)
}

type FeatureVariationObjectArrayOutput struct{ *pulumi.OutputState }

func (FeatureVariationObjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FeatureVariationObject)(nil)).Elem()
}

func (o FeatureVariationObjectArrayOutput) ToFeatureVariationObjectArrayOutput() FeatureVariationObjectArrayOutput {
	return o
}

func (o FeatureVariationObjectArrayOutput) ToFeatureVariationObjectArrayOutputWithContext(ctx context.Context) FeatureVariationObjectArrayOutput {
	return o
}

func (o FeatureVariationObjectArrayOutput) Index(i pulumi.IntInput) FeatureVariationObjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FeatureVariationObject {
		return vs[0].([]FeatureVariationObject)[vs[1].(int)]
	}).(FeatureVariationObjectOutput)
}

type LaunchGroupObject struct {
	Description *string `pulumi:"description"`
	Feature     string  `pulumi:"feature"`
	GroupName   string  `pulumi:"groupName"`
	Variation   string  `pulumi:"variation"`
}

// LaunchGroupObjectInput is an input type that accepts LaunchGroupObjectArgs and LaunchGroupObjectOutput values.
// You can construct a concrete instance of `LaunchGroupObjectInput` via:
//
//          LaunchGroupObjectArgs{...}
type LaunchGroupObjectInput interface {
	pulumi.Input

	ToLaunchGroupObjectOutput() LaunchGroupObjectOutput
	ToLaunchGroupObjectOutputWithContext(context.Context) LaunchGroupObjectOutput
}

type LaunchGroupObjectArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Feature     pulumi.StringInput    `pulumi:"feature"`
	GroupName   pulumi.StringInput    `pulumi:"groupName"`
	Variation   pulumi.StringInput    `pulumi:"variation"`
}

func (LaunchGroupObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchGroupObject)(nil)).Elem()
}

func (i LaunchGroupObjectArgs) ToLaunchGroupObjectOutput() LaunchGroupObjectOutput {
	return i.ToLaunchGroupObjectOutputWithContext(context.Background())
}

func (i LaunchGroupObjectArgs) ToLaunchGroupObjectOutputWithContext(ctx context.Context) LaunchGroupObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchGroupObjectOutput)
}

// LaunchGroupObjectArrayInput is an input type that accepts LaunchGroupObjectArray and LaunchGroupObjectArrayOutput values.
// You can construct a concrete instance of `LaunchGroupObjectArrayInput` via:
//
//          LaunchGroupObjectArray{ LaunchGroupObjectArgs{...} }
type LaunchGroupObjectArrayInput interface {
	pulumi.Input

	ToLaunchGroupObjectArrayOutput() LaunchGroupObjectArrayOutput
	ToLaunchGroupObjectArrayOutputWithContext(context.Context) LaunchGroupObjectArrayOutput
}

type LaunchGroupObjectArray []LaunchGroupObjectInput

func (LaunchGroupObjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LaunchGroupObject)(nil)).Elem()
}

func (i LaunchGroupObjectArray) ToLaunchGroupObjectArrayOutput() LaunchGroupObjectArrayOutput {
	return i.ToLaunchGroupObjectArrayOutputWithContext(context.Background())
}

func (i LaunchGroupObjectArray) ToLaunchGroupObjectArrayOutputWithContext(ctx context.Context) LaunchGroupObjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchGroupObjectArrayOutput)
}

type LaunchGroupObjectOutput struct{ *pulumi.OutputState }

func (LaunchGroupObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchGroupObject)(nil)).Elem()
}

func (o LaunchGroupObjectOutput) ToLaunchGroupObjectOutput() LaunchGroupObjectOutput {
	return o
}

func (o LaunchGroupObjectOutput) ToLaunchGroupObjectOutputWithContext(ctx context.Context) LaunchGroupObjectOutput {
	return o
}

func (o LaunchGroupObjectOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LaunchGroupObject) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o LaunchGroupObjectOutput) Feature() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchGroupObject) string { return v.Feature }).(pulumi.StringOutput)
}

func (o LaunchGroupObjectOutput) GroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchGroupObject) string { return v.GroupName }).(pulumi.StringOutput)
}

func (o LaunchGroupObjectOutput) Variation() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchGroupObject) string { return v.Variation }).(pulumi.StringOutput)
}

type LaunchGroupObjectArrayOutput struct{ *pulumi.OutputState }

func (LaunchGroupObjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LaunchGroupObject)(nil)).Elem()
}

func (o LaunchGroupObjectArrayOutput) ToLaunchGroupObjectArrayOutput() LaunchGroupObjectArrayOutput {
	return o
}

func (o LaunchGroupObjectArrayOutput) ToLaunchGroupObjectArrayOutputWithContext(ctx context.Context) LaunchGroupObjectArrayOutput {
	return o
}

func (o LaunchGroupObjectArrayOutput) Index(i pulumi.IntInput) LaunchGroupObjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LaunchGroupObject {
		return vs[0].([]LaunchGroupObject)[vs[1].(int)]
	}).(LaunchGroupObjectOutput)
}

type LaunchGroupToWeight struct {
	GroupName   string `pulumi:"groupName"`
	SplitWeight int    `pulumi:"splitWeight"`
}

// LaunchGroupToWeightInput is an input type that accepts LaunchGroupToWeightArgs and LaunchGroupToWeightOutput values.
// You can construct a concrete instance of `LaunchGroupToWeightInput` via:
//
//          LaunchGroupToWeightArgs{...}
type LaunchGroupToWeightInput interface {
	pulumi.Input

	ToLaunchGroupToWeightOutput() LaunchGroupToWeightOutput
	ToLaunchGroupToWeightOutputWithContext(context.Context) LaunchGroupToWeightOutput
}

type LaunchGroupToWeightArgs struct {
	GroupName   pulumi.StringInput `pulumi:"groupName"`
	SplitWeight pulumi.IntInput    `pulumi:"splitWeight"`
}

func (LaunchGroupToWeightArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchGroupToWeight)(nil)).Elem()
}

func (i LaunchGroupToWeightArgs) ToLaunchGroupToWeightOutput() LaunchGroupToWeightOutput {
	return i.ToLaunchGroupToWeightOutputWithContext(context.Background())
}

func (i LaunchGroupToWeightArgs) ToLaunchGroupToWeightOutputWithContext(ctx context.Context) LaunchGroupToWeightOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchGroupToWeightOutput)
}

// LaunchGroupToWeightArrayInput is an input type that accepts LaunchGroupToWeightArray and LaunchGroupToWeightArrayOutput values.
// You can construct a concrete instance of `LaunchGroupToWeightArrayInput` via:
//
//          LaunchGroupToWeightArray{ LaunchGroupToWeightArgs{...} }
type LaunchGroupToWeightArrayInput interface {
	pulumi.Input

	ToLaunchGroupToWeightArrayOutput() LaunchGroupToWeightArrayOutput
	ToLaunchGroupToWeightArrayOutputWithContext(context.Context) LaunchGroupToWeightArrayOutput
}

type LaunchGroupToWeightArray []LaunchGroupToWeightInput

func (LaunchGroupToWeightArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LaunchGroupToWeight)(nil)).Elem()
}

func (i LaunchGroupToWeightArray) ToLaunchGroupToWeightArrayOutput() LaunchGroupToWeightArrayOutput {
	return i.ToLaunchGroupToWeightArrayOutputWithContext(context.Background())
}

func (i LaunchGroupToWeightArray) ToLaunchGroupToWeightArrayOutputWithContext(ctx context.Context) LaunchGroupToWeightArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchGroupToWeightArrayOutput)
}

type LaunchGroupToWeightOutput struct{ *pulumi.OutputState }

func (LaunchGroupToWeightOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchGroupToWeight)(nil)).Elem()
}

func (o LaunchGroupToWeightOutput) ToLaunchGroupToWeightOutput() LaunchGroupToWeightOutput {
	return o
}

func (o LaunchGroupToWeightOutput) ToLaunchGroupToWeightOutputWithContext(ctx context.Context) LaunchGroupToWeightOutput {
	return o
}

func (o LaunchGroupToWeightOutput) GroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchGroupToWeight) string { return v.GroupName }).(pulumi.StringOutput)
}

func (o LaunchGroupToWeightOutput) SplitWeight() pulumi.IntOutput {
	return o.ApplyT(func(v LaunchGroupToWeight) int { return v.SplitWeight }).(pulumi.IntOutput)
}

type LaunchGroupToWeightArrayOutput struct{ *pulumi.OutputState }

func (LaunchGroupToWeightArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LaunchGroupToWeight)(nil)).Elem()
}

func (o LaunchGroupToWeightArrayOutput) ToLaunchGroupToWeightArrayOutput() LaunchGroupToWeightArrayOutput {
	return o
}

func (o LaunchGroupToWeightArrayOutput) ToLaunchGroupToWeightArrayOutputWithContext(ctx context.Context) LaunchGroupToWeightArrayOutput {
	return o
}

func (o LaunchGroupToWeightArrayOutput) Index(i pulumi.IntInput) LaunchGroupToWeightOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LaunchGroupToWeight {
		return vs[0].([]LaunchGroupToWeight)[vs[1].(int)]
	}).(LaunchGroupToWeightOutput)
}

type LaunchMetricDefinitionObject struct {
	// The JSON path to reference the entity id in the event.
	EntityIdKey string `pulumi:"entityIdKey"`
	// Event patterns have the same structure as the events they match. Rules use event patterns to select events. An event pattern either matches an event or it doesn't.
	EventPattern string  `pulumi:"eventPattern"`
	MetricName   string  `pulumi:"metricName"`
	UnitLabel    *string `pulumi:"unitLabel"`
	// The JSON path to reference the numerical metric value in the event.
	ValueKey string `pulumi:"valueKey"`
}

// LaunchMetricDefinitionObjectInput is an input type that accepts LaunchMetricDefinitionObjectArgs and LaunchMetricDefinitionObjectOutput values.
// You can construct a concrete instance of `LaunchMetricDefinitionObjectInput` via:
//
//          LaunchMetricDefinitionObjectArgs{...}
type LaunchMetricDefinitionObjectInput interface {
	pulumi.Input

	ToLaunchMetricDefinitionObjectOutput() LaunchMetricDefinitionObjectOutput
	ToLaunchMetricDefinitionObjectOutputWithContext(context.Context) LaunchMetricDefinitionObjectOutput
}

type LaunchMetricDefinitionObjectArgs struct {
	// The JSON path to reference the entity id in the event.
	EntityIdKey pulumi.StringInput `pulumi:"entityIdKey"`
	// Event patterns have the same structure as the events they match. Rules use event patterns to select events. An event pattern either matches an event or it doesn't.
	EventPattern pulumi.StringInput    `pulumi:"eventPattern"`
	MetricName   pulumi.StringInput    `pulumi:"metricName"`
	UnitLabel    pulumi.StringPtrInput `pulumi:"unitLabel"`
	// The JSON path to reference the numerical metric value in the event.
	ValueKey pulumi.StringInput `pulumi:"valueKey"`
}

func (LaunchMetricDefinitionObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchMetricDefinitionObject)(nil)).Elem()
}

func (i LaunchMetricDefinitionObjectArgs) ToLaunchMetricDefinitionObjectOutput() LaunchMetricDefinitionObjectOutput {
	return i.ToLaunchMetricDefinitionObjectOutputWithContext(context.Background())
}

func (i LaunchMetricDefinitionObjectArgs) ToLaunchMetricDefinitionObjectOutputWithContext(ctx context.Context) LaunchMetricDefinitionObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchMetricDefinitionObjectOutput)
}

// LaunchMetricDefinitionObjectArrayInput is an input type that accepts LaunchMetricDefinitionObjectArray and LaunchMetricDefinitionObjectArrayOutput values.
// You can construct a concrete instance of `LaunchMetricDefinitionObjectArrayInput` via:
//
//          LaunchMetricDefinitionObjectArray{ LaunchMetricDefinitionObjectArgs{...} }
type LaunchMetricDefinitionObjectArrayInput interface {
	pulumi.Input

	ToLaunchMetricDefinitionObjectArrayOutput() LaunchMetricDefinitionObjectArrayOutput
	ToLaunchMetricDefinitionObjectArrayOutputWithContext(context.Context) LaunchMetricDefinitionObjectArrayOutput
}

type LaunchMetricDefinitionObjectArray []LaunchMetricDefinitionObjectInput

func (LaunchMetricDefinitionObjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LaunchMetricDefinitionObject)(nil)).Elem()
}

func (i LaunchMetricDefinitionObjectArray) ToLaunchMetricDefinitionObjectArrayOutput() LaunchMetricDefinitionObjectArrayOutput {
	return i.ToLaunchMetricDefinitionObjectArrayOutputWithContext(context.Background())
}

func (i LaunchMetricDefinitionObjectArray) ToLaunchMetricDefinitionObjectArrayOutputWithContext(ctx context.Context) LaunchMetricDefinitionObjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchMetricDefinitionObjectArrayOutput)
}

type LaunchMetricDefinitionObjectOutput struct{ *pulumi.OutputState }

func (LaunchMetricDefinitionObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchMetricDefinitionObject)(nil)).Elem()
}

func (o LaunchMetricDefinitionObjectOutput) ToLaunchMetricDefinitionObjectOutput() LaunchMetricDefinitionObjectOutput {
	return o
}

func (o LaunchMetricDefinitionObjectOutput) ToLaunchMetricDefinitionObjectOutputWithContext(ctx context.Context) LaunchMetricDefinitionObjectOutput {
	return o
}

// The JSON path to reference the entity id in the event.
func (o LaunchMetricDefinitionObjectOutput) EntityIdKey() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchMetricDefinitionObject) string { return v.EntityIdKey }).(pulumi.StringOutput)
}

// Event patterns have the same structure as the events they match. Rules use event patterns to select events. An event pattern either matches an event or it doesn't.
func (o LaunchMetricDefinitionObjectOutput) EventPattern() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchMetricDefinitionObject) string { return v.EventPattern }).(pulumi.StringOutput)
}

func (o LaunchMetricDefinitionObjectOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchMetricDefinitionObject) string { return v.MetricName }).(pulumi.StringOutput)
}

func (o LaunchMetricDefinitionObjectOutput) UnitLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LaunchMetricDefinitionObject) *string { return v.UnitLabel }).(pulumi.StringPtrOutput)
}

// The JSON path to reference the numerical metric value in the event.
func (o LaunchMetricDefinitionObjectOutput) ValueKey() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchMetricDefinitionObject) string { return v.ValueKey }).(pulumi.StringOutput)
}

type LaunchMetricDefinitionObjectArrayOutput struct{ *pulumi.OutputState }

func (LaunchMetricDefinitionObjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LaunchMetricDefinitionObject)(nil)).Elem()
}

func (o LaunchMetricDefinitionObjectArrayOutput) ToLaunchMetricDefinitionObjectArrayOutput() LaunchMetricDefinitionObjectArrayOutput {
	return o
}

func (o LaunchMetricDefinitionObjectArrayOutput) ToLaunchMetricDefinitionObjectArrayOutputWithContext(ctx context.Context) LaunchMetricDefinitionObjectArrayOutput {
	return o
}

func (o LaunchMetricDefinitionObjectArrayOutput) Index(i pulumi.IntInput) LaunchMetricDefinitionObjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LaunchMetricDefinitionObject {
		return vs[0].([]LaunchMetricDefinitionObject)[vs[1].(int)]
	}).(LaunchMetricDefinitionObjectOutput)
}

type LaunchStepConfig struct {
	GroupWeights []LaunchGroupToWeight `pulumi:"groupWeights"`
	StartTime    string                `pulumi:"startTime"`
}

// LaunchStepConfigInput is an input type that accepts LaunchStepConfigArgs and LaunchStepConfigOutput values.
// You can construct a concrete instance of `LaunchStepConfigInput` via:
//
//          LaunchStepConfigArgs{...}
type LaunchStepConfigInput interface {
	pulumi.Input

	ToLaunchStepConfigOutput() LaunchStepConfigOutput
	ToLaunchStepConfigOutputWithContext(context.Context) LaunchStepConfigOutput
}

type LaunchStepConfigArgs struct {
	GroupWeights LaunchGroupToWeightArrayInput `pulumi:"groupWeights"`
	StartTime    pulumi.StringInput            `pulumi:"startTime"`
}

func (LaunchStepConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchStepConfig)(nil)).Elem()
}

func (i LaunchStepConfigArgs) ToLaunchStepConfigOutput() LaunchStepConfigOutput {
	return i.ToLaunchStepConfigOutputWithContext(context.Background())
}

func (i LaunchStepConfigArgs) ToLaunchStepConfigOutputWithContext(ctx context.Context) LaunchStepConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchStepConfigOutput)
}

// LaunchStepConfigArrayInput is an input type that accepts LaunchStepConfigArray and LaunchStepConfigArrayOutput values.
// You can construct a concrete instance of `LaunchStepConfigArrayInput` via:
//
//          LaunchStepConfigArray{ LaunchStepConfigArgs{...} }
type LaunchStepConfigArrayInput interface {
	pulumi.Input

	ToLaunchStepConfigArrayOutput() LaunchStepConfigArrayOutput
	ToLaunchStepConfigArrayOutputWithContext(context.Context) LaunchStepConfigArrayOutput
}

type LaunchStepConfigArray []LaunchStepConfigInput

func (LaunchStepConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LaunchStepConfig)(nil)).Elem()
}

func (i LaunchStepConfigArray) ToLaunchStepConfigArrayOutput() LaunchStepConfigArrayOutput {
	return i.ToLaunchStepConfigArrayOutputWithContext(context.Background())
}

func (i LaunchStepConfigArray) ToLaunchStepConfigArrayOutputWithContext(ctx context.Context) LaunchStepConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchStepConfigArrayOutput)
}

type LaunchStepConfigOutput struct{ *pulumi.OutputState }

func (LaunchStepConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchStepConfig)(nil)).Elem()
}

func (o LaunchStepConfigOutput) ToLaunchStepConfigOutput() LaunchStepConfigOutput {
	return o
}

func (o LaunchStepConfigOutput) ToLaunchStepConfigOutputWithContext(ctx context.Context) LaunchStepConfigOutput {
	return o
}

func (o LaunchStepConfigOutput) GroupWeights() LaunchGroupToWeightArrayOutput {
	return o.ApplyT(func(v LaunchStepConfig) []LaunchGroupToWeight { return v.GroupWeights }).(LaunchGroupToWeightArrayOutput)
}

func (o LaunchStepConfigOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchStepConfig) string { return v.StartTime }).(pulumi.StringOutput)
}

type LaunchStepConfigArrayOutput struct{ *pulumi.OutputState }

func (LaunchStepConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LaunchStepConfig)(nil)).Elem()
}

func (o LaunchStepConfigArrayOutput) ToLaunchStepConfigArrayOutput() LaunchStepConfigArrayOutput {
	return o
}

func (o LaunchStepConfigArrayOutput) ToLaunchStepConfigArrayOutputWithContext(ctx context.Context) LaunchStepConfigArrayOutput {
	return o
}

func (o LaunchStepConfigArrayOutput) Index(i pulumi.IntInput) LaunchStepConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LaunchStepConfig {
		return vs[0].([]LaunchStepConfig)[vs[1].(int)]
	}).(LaunchStepConfigOutput)
}

// A key-value pair to associate with a resource.
type LaunchTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// LaunchTagInput is an input type that accepts LaunchTagArgs and LaunchTagOutput values.
// You can construct a concrete instance of `LaunchTagInput` via:
//
//          LaunchTagArgs{...}
type LaunchTagInput interface {
	pulumi.Input

	ToLaunchTagOutput() LaunchTagOutput
	ToLaunchTagOutputWithContext(context.Context) LaunchTagOutput
}

// A key-value pair to associate with a resource.
type LaunchTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringInput `pulumi:"value"`
}

func (LaunchTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchTag)(nil)).Elem()
}

func (i LaunchTagArgs) ToLaunchTagOutput() LaunchTagOutput {
	return i.ToLaunchTagOutputWithContext(context.Background())
}

func (i LaunchTagArgs) ToLaunchTagOutputWithContext(ctx context.Context) LaunchTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchTagOutput)
}

// LaunchTagArrayInput is an input type that accepts LaunchTagArray and LaunchTagArrayOutput values.
// You can construct a concrete instance of `LaunchTagArrayInput` via:
//
//          LaunchTagArray{ LaunchTagArgs{...} }
type LaunchTagArrayInput interface {
	pulumi.Input

	ToLaunchTagArrayOutput() LaunchTagArrayOutput
	ToLaunchTagArrayOutputWithContext(context.Context) LaunchTagArrayOutput
}

type LaunchTagArray []LaunchTagInput

func (LaunchTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LaunchTag)(nil)).Elem()
}

func (i LaunchTagArray) ToLaunchTagArrayOutput() LaunchTagArrayOutput {
	return i.ToLaunchTagArrayOutputWithContext(context.Background())
}

func (i LaunchTagArray) ToLaunchTagArrayOutputWithContext(ctx context.Context) LaunchTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchTagArrayOutput)
}

// A key-value pair to associate with a resource.
type LaunchTagOutput struct{ *pulumi.OutputState }

func (LaunchTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchTag)(nil)).Elem()
}

func (o LaunchTagOutput) ToLaunchTagOutput() LaunchTagOutput {
	return o
}

func (o LaunchTagOutput) ToLaunchTagOutputWithContext(ctx context.Context) LaunchTagOutput {
	return o
}

// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o LaunchTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o LaunchTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchTag) string { return v.Value }).(pulumi.StringOutput)
}

type LaunchTagArrayOutput struct{ *pulumi.OutputState }

func (LaunchTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LaunchTag)(nil)).Elem()
}

func (o LaunchTagArrayOutput) ToLaunchTagArrayOutput() LaunchTagArrayOutput {
	return o
}

func (o LaunchTagArrayOutput) ToLaunchTagArrayOutputWithContext(ctx context.Context) LaunchTagArrayOutput {
	return o
}

func (o LaunchTagArrayOutput) Index(i pulumi.IntInput) LaunchTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LaunchTag {
		return vs[0].([]LaunchTag)[vs[1].(int)]
	}).(LaunchTagOutput)
}

// Destinations for data.
type ProjectDataDeliveryObject struct {
	LogGroup *string               `pulumi:"logGroup"`
	S3       *ProjectS3Destination `pulumi:"s3"`
}

// ProjectDataDeliveryObjectInput is an input type that accepts ProjectDataDeliveryObjectArgs and ProjectDataDeliveryObjectOutput values.
// You can construct a concrete instance of `ProjectDataDeliveryObjectInput` via:
//
//          ProjectDataDeliveryObjectArgs{...}
type ProjectDataDeliveryObjectInput interface {
	pulumi.Input

	ToProjectDataDeliveryObjectOutput() ProjectDataDeliveryObjectOutput
	ToProjectDataDeliveryObjectOutputWithContext(context.Context) ProjectDataDeliveryObjectOutput
}

// Destinations for data.
type ProjectDataDeliveryObjectArgs struct {
	LogGroup pulumi.StringPtrInput        `pulumi:"logGroup"`
	S3       ProjectS3DestinationPtrInput `pulumi:"s3"`
}

func (ProjectDataDeliveryObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectDataDeliveryObject)(nil)).Elem()
}

func (i ProjectDataDeliveryObjectArgs) ToProjectDataDeliveryObjectOutput() ProjectDataDeliveryObjectOutput {
	return i.ToProjectDataDeliveryObjectOutputWithContext(context.Background())
}

func (i ProjectDataDeliveryObjectArgs) ToProjectDataDeliveryObjectOutputWithContext(ctx context.Context) ProjectDataDeliveryObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectDataDeliveryObjectOutput)
}

func (i ProjectDataDeliveryObjectArgs) ToProjectDataDeliveryObjectPtrOutput() ProjectDataDeliveryObjectPtrOutput {
	return i.ToProjectDataDeliveryObjectPtrOutputWithContext(context.Background())
}

func (i ProjectDataDeliveryObjectArgs) ToProjectDataDeliveryObjectPtrOutputWithContext(ctx context.Context) ProjectDataDeliveryObjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectDataDeliveryObjectOutput).ToProjectDataDeliveryObjectPtrOutputWithContext(ctx)
}

// ProjectDataDeliveryObjectPtrInput is an input type that accepts ProjectDataDeliveryObjectArgs, ProjectDataDeliveryObjectPtr and ProjectDataDeliveryObjectPtrOutput values.
// You can construct a concrete instance of `ProjectDataDeliveryObjectPtrInput` via:
//
//          ProjectDataDeliveryObjectArgs{...}
//
//  or:
//
//          nil
type ProjectDataDeliveryObjectPtrInput interface {
	pulumi.Input

	ToProjectDataDeliveryObjectPtrOutput() ProjectDataDeliveryObjectPtrOutput
	ToProjectDataDeliveryObjectPtrOutputWithContext(context.Context) ProjectDataDeliveryObjectPtrOutput
}

type projectDataDeliveryObjectPtrType ProjectDataDeliveryObjectArgs

func ProjectDataDeliveryObjectPtr(v *ProjectDataDeliveryObjectArgs) ProjectDataDeliveryObjectPtrInput {
	return (*projectDataDeliveryObjectPtrType)(v)
}

func (*projectDataDeliveryObjectPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectDataDeliveryObject)(nil)).Elem()
}

func (i *projectDataDeliveryObjectPtrType) ToProjectDataDeliveryObjectPtrOutput() ProjectDataDeliveryObjectPtrOutput {
	return i.ToProjectDataDeliveryObjectPtrOutputWithContext(context.Background())
}

func (i *projectDataDeliveryObjectPtrType) ToProjectDataDeliveryObjectPtrOutputWithContext(ctx context.Context) ProjectDataDeliveryObjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectDataDeliveryObjectPtrOutput)
}

// Destinations for data.
type ProjectDataDeliveryObjectOutput struct{ *pulumi.OutputState }

func (ProjectDataDeliveryObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectDataDeliveryObject)(nil)).Elem()
}

func (o ProjectDataDeliveryObjectOutput) ToProjectDataDeliveryObjectOutput() ProjectDataDeliveryObjectOutput {
	return o
}

func (o ProjectDataDeliveryObjectOutput) ToProjectDataDeliveryObjectOutputWithContext(ctx context.Context) ProjectDataDeliveryObjectOutput {
	return o
}

func (o ProjectDataDeliveryObjectOutput) ToProjectDataDeliveryObjectPtrOutput() ProjectDataDeliveryObjectPtrOutput {
	return o.ToProjectDataDeliveryObjectPtrOutputWithContext(context.Background())
}

func (o ProjectDataDeliveryObjectOutput) ToProjectDataDeliveryObjectPtrOutputWithContext(ctx context.Context) ProjectDataDeliveryObjectPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectDataDeliveryObject) *ProjectDataDeliveryObject {
		return &v
	}).(ProjectDataDeliveryObjectPtrOutput)
}

func (o ProjectDataDeliveryObjectOutput) LogGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectDataDeliveryObject) *string { return v.LogGroup }).(pulumi.StringPtrOutput)
}

func (o ProjectDataDeliveryObjectOutput) S3() ProjectS3DestinationPtrOutput {
	return o.ApplyT(func(v ProjectDataDeliveryObject) *ProjectS3Destination { return v.S3 }).(ProjectS3DestinationPtrOutput)
}

type ProjectDataDeliveryObjectPtrOutput struct{ *pulumi.OutputState }

func (ProjectDataDeliveryObjectPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectDataDeliveryObject)(nil)).Elem()
}

func (o ProjectDataDeliveryObjectPtrOutput) ToProjectDataDeliveryObjectPtrOutput() ProjectDataDeliveryObjectPtrOutput {
	return o
}

func (o ProjectDataDeliveryObjectPtrOutput) ToProjectDataDeliveryObjectPtrOutputWithContext(ctx context.Context) ProjectDataDeliveryObjectPtrOutput {
	return o
}

func (o ProjectDataDeliveryObjectPtrOutput) Elem() ProjectDataDeliveryObjectOutput {
	return o.ApplyT(func(v *ProjectDataDeliveryObject) ProjectDataDeliveryObject {
		if v != nil {
			return *v
		}
		var ret ProjectDataDeliveryObject
		return ret
	}).(ProjectDataDeliveryObjectOutput)
}

func (o ProjectDataDeliveryObjectPtrOutput) LogGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectDataDeliveryObject) *string {
		if v == nil {
			return nil
		}
		return v.LogGroup
	}).(pulumi.StringPtrOutput)
}

func (o ProjectDataDeliveryObjectPtrOutput) S3() ProjectS3DestinationPtrOutput {
	return o.ApplyT(func(v *ProjectDataDeliveryObject) *ProjectS3Destination {
		if v == nil {
			return nil
		}
		return v.S3
	}).(ProjectS3DestinationPtrOutput)
}

type ProjectS3Destination struct {
	BucketName string  `pulumi:"bucketName"`
	Prefix     *string `pulumi:"prefix"`
}

// ProjectS3DestinationInput is an input type that accepts ProjectS3DestinationArgs and ProjectS3DestinationOutput values.
// You can construct a concrete instance of `ProjectS3DestinationInput` via:
//
//          ProjectS3DestinationArgs{...}
type ProjectS3DestinationInput interface {
	pulumi.Input

	ToProjectS3DestinationOutput() ProjectS3DestinationOutput
	ToProjectS3DestinationOutputWithContext(context.Context) ProjectS3DestinationOutput
}

type ProjectS3DestinationArgs struct {
	BucketName pulumi.StringInput    `pulumi:"bucketName"`
	Prefix     pulumi.StringPtrInput `pulumi:"prefix"`
}

func (ProjectS3DestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectS3Destination)(nil)).Elem()
}

func (i ProjectS3DestinationArgs) ToProjectS3DestinationOutput() ProjectS3DestinationOutput {
	return i.ToProjectS3DestinationOutputWithContext(context.Background())
}

func (i ProjectS3DestinationArgs) ToProjectS3DestinationOutputWithContext(ctx context.Context) ProjectS3DestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectS3DestinationOutput)
}

func (i ProjectS3DestinationArgs) ToProjectS3DestinationPtrOutput() ProjectS3DestinationPtrOutput {
	return i.ToProjectS3DestinationPtrOutputWithContext(context.Background())
}

func (i ProjectS3DestinationArgs) ToProjectS3DestinationPtrOutputWithContext(ctx context.Context) ProjectS3DestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectS3DestinationOutput).ToProjectS3DestinationPtrOutputWithContext(ctx)
}

// ProjectS3DestinationPtrInput is an input type that accepts ProjectS3DestinationArgs, ProjectS3DestinationPtr and ProjectS3DestinationPtrOutput values.
// You can construct a concrete instance of `ProjectS3DestinationPtrInput` via:
//
//          ProjectS3DestinationArgs{...}
//
//  or:
//
//          nil
type ProjectS3DestinationPtrInput interface {
	pulumi.Input

	ToProjectS3DestinationPtrOutput() ProjectS3DestinationPtrOutput
	ToProjectS3DestinationPtrOutputWithContext(context.Context) ProjectS3DestinationPtrOutput
}

type projectS3DestinationPtrType ProjectS3DestinationArgs

func ProjectS3DestinationPtr(v *ProjectS3DestinationArgs) ProjectS3DestinationPtrInput {
	return (*projectS3DestinationPtrType)(v)
}

func (*projectS3DestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectS3Destination)(nil)).Elem()
}

func (i *projectS3DestinationPtrType) ToProjectS3DestinationPtrOutput() ProjectS3DestinationPtrOutput {
	return i.ToProjectS3DestinationPtrOutputWithContext(context.Background())
}

func (i *projectS3DestinationPtrType) ToProjectS3DestinationPtrOutputWithContext(ctx context.Context) ProjectS3DestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectS3DestinationPtrOutput)
}

type ProjectS3DestinationOutput struct{ *pulumi.OutputState }

func (ProjectS3DestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectS3Destination)(nil)).Elem()
}

func (o ProjectS3DestinationOutput) ToProjectS3DestinationOutput() ProjectS3DestinationOutput {
	return o
}

func (o ProjectS3DestinationOutput) ToProjectS3DestinationOutputWithContext(ctx context.Context) ProjectS3DestinationOutput {
	return o
}

func (o ProjectS3DestinationOutput) ToProjectS3DestinationPtrOutput() ProjectS3DestinationPtrOutput {
	return o.ToProjectS3DestinationPtrOutputWithContext(context.Background())
}

func (o ProjectS3DestinationOutput) ToProjectS3DestinationPtrOutputWithContext(ctx context.Context) ProjectS3DestinationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectS3Destination) *ProjectS3Destination {
		return &v
	}).(ProjectS3DestinationPtrOutput)
}

func (o ProjectS3DestinationOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectS3Destination) string { return v.BucketName }).(pulumi.StringOutput)
}

func (o ProjectS3DestinationOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectS3Destination) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

type ProjectS3DestinationPtrOutput struct{ *pulumi.OutputState }

func (ProjectS3DestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectS3Destination)(nil)).Elem()
}

func (o ProjectS3DestinationPtrOutput) ToProjectS3DestinationPtrOutput() ProjectS3DestinationPtrOutput {
	return o
}

func (o ProjectS3DestinationPtrOutput) ToProjectS3DestinationPtrOutputWithContext(ctx context.Context) ProjectS3DestinationPtrOutput {
	return o
}

func (o ProjectS3DestinationPtrOutput) Elem() ProjectS3DestinationOutput {
	return o.ApplyT(func(v *ProjectS3Destination) ProjectS3Destination {
		if v != nil {
			return *v
		}
		var ret ProjectS3Destination
		return ret
	}).(ProjectS3DestinationOutput)
}

func (o ProjectS3DestinationPtrOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectS3Destination) *string {
		if v == nil {
			return nil
		}
		return &v.BucketName
	}).(pulumi.StringPtrOutput)
}

func (o ProjectS3DestinationPtrOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectS3Destination) *string {
		if v == nil {
			return nil
		}
		return v.Prefix
	}).(pulumi.StringPtrOutput)
}

// A key-value pair to associate with a resource.
type ProjectTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// ProjectTagInput is an input type that accepts ProjectTagArgs and ProjectTagOutput values.
// You can construct a concrete instance of `ProjectTagInput` via:
//
//          ProjectTagArgs{...}
type ProjectTagInput interface {
	pulumi.Input

	ToProjectTagOutput() ProjectTagOutput
	ToProjectTagOutputWithContext(context.Context) ProjectTagOutput
}

// A key-value pair to associate with a resource.
type ProjectTagArgs struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key pulumi.StringInput `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ProjectTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectTag)(nil)).Elem()
}

func (i ProjectTagArgs) ToProjectTagOutput() ProjectTagOutput {
	return i.ToProjectTagOutputWithContext(context.Background())
}

func (i ProjectTagArgs) ToProjectTagOutputWithContext(ctx context.Context) ProjectTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectTagOutput)
}

// ProjectTagArrayInput is an input type that accepts ProjectTagArray and ProjectTagArrayOutput values.
// You can construct a concrete instance of `ProjectTagArrayInput` via:
//
//          ProjectTagArray{ ProjectTagArgs{...} }
type ProjectTagArrayInput interface {
	pulumi.Input

	ToProjectTagArrayOutput() ProjectTagArrayOutput
	ToProjectTagArrayOutputWithContext(context.Context) ProjectTagArrayOutput
}

type ProjectTagArray []ProjectTagInput

func (ProjectTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectTag)(nil)).Elem()
}

func (i ProjectTagArray) ToProjectTagArrayOutput() ProjectTagArrayOutput {
	return i.ToProjectTagArrayOutputWithContext(context.Background())
}

func (i ProjectTagArray) ToProjectTagArrayOutputWithContext(ctx context.Context) ProjectTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectTagArrayOutput)
}

// A key-value pair to associate with a resource.
type ProjectTagOutput struct{ *pulumi.OutputState }

func (ProjectTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectTag)(nil)).Elem()
}

func (o ProjectTagOutput) ToProjectTagOutput() ProjectTagOutput {
	return o
}

func (o ProjectTagOutput) ToProjectTagOutputWithContext(ctx context.Context) ProjectTagOutput {
	return o
}

// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o ProjectTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
func (o ProjectTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectTag) string { return v.Value }).(pulumi.StringOutput)
}

type ProjectTagArrayOutput struct{ *pulumi.OutputState }

func (ProjectTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectTag)(nil)).Elem()
}

func (o ProjectTagArrayOutput) ToProjectTagArrayOutput() ProjectTagArrayOutput {
	return o
}

func (o ProjectTagArrayOutput) ToProjectTagArrayOutputWithContext(ctx context.Context) ProjectTagArrayOutput {
	return o
}

func (o ProjectTagArrayOutput) Index(i pulumi.IntInput) ProjectTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectTag {
		return vs[0].([]ProjectTag)[vs[1].(int)]
	}).(ProjectTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentMetricGoalObjectInput)(nil)).Elem(), ExperimentMetricGoalObjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentMetricGoalObjectArrayInput)(nil)).Elem(), ExperimentMetricGoalObjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentOnlineAbConfigObjectInput)(nil)).Elem(), ExperimentOnlineAbConfigObjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentOnlineAbConfigObjectPtrInput)(nil)).Elem(), ExperimentOnlineAbConfigObjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentTagInput)(nil)).Elem(), ExperimentTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentTagArrayInput)(nil)).Elem(), ExperimentTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentTreatmentObjectInput)(nil)).Elem(), ExperimentTreatmentObjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentTreatmentObjectArrayInput)(nil)).Elem(), ExperimentTreatmentObjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentTreatmentToWeightInput)(nil)).Elem(), ExperimentTreatmentToWeightArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentTreatmentToWeightArrayInput)(nil)).Elem(), ExperimentTreatmentToWeightArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureEntityOverrideInput)(nil)).Elem(), FeatureEntityOverrideArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureEntityOverrideArrayInput)(nil)).Elem(), FeatureEntityOverrideArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureTagInput)(nil)).Elem(), FeatureTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureTagArrayInput)(nil)).Elem(), FeatureTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureVariationObjectInput)(nil)).Elem(), FeatureVariationObjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureVariationObjectArrayInput)(nil)).Elem(), FeatureVariationObjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchGroupObjectInput)(nil)).Elem(), LaunchGroupObjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchGroupObjectArrayInput)(nil)).Elem(), LaunchGroupObjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchGroupToWeightInput)(nil)).Elem(), LaunchGroupToWeightArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchGroupToWeightArrayInput)(nil)).Elem(), LaunchGroupToWeightArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchMetricDefinitionObjectInput)(nil)).Elem(), LaunchMetricDefinitionObjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchMetricDefinitionObjectArrayInput)(nil)).Elem(), LaunchMetricDefinitionObjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchStepConfigInput)(nil)).Elem(), LaunchStepConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchStepConfigArrayInput)(nil)).Elem(), LaunchStepConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchTagInput)(nil)).Elem(), LaunchTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchTagArrayInput)(nil)).Elem(), LaunchTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectDataDeliveryObjectInput)(nil)).Elem(), ProjectDataDeliveryObjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectDataDeliveryObjectPtrInput)(nil)).Elem(), ProjectDataDeliveryObjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectS3DestinationInput)(nil)).Elem(), ProjectS3DestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectS3DestinationPtrInput)(nil)).Elem(), ProjectS3DestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectTagInput)(nil)).Elem(), ProjectTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectTagArrayInput)(nil)).Elem(), ProjectTagArray{})
	pulumi.RegisterOutputType(ExperimentMetricGoalObjectOutput{})
	pulumi.RegisterOutputType(ExperimentMetricGoalObjectArrayOutput{})
	pulumi.RegisterOutputType(ExperimentOnlineAbConfigObjectOutput{})
	pulumi.RegisterOutputType(ExperimentOnlineAbConfigObjectPtrOutput{})
	pulumi.RegisterOutputType(ExperimentTagOutput{})
	pulumi.RegisterOutputType(ExperimentTagArrayOutput{})
	pulumi.RegisterOutputType(ExperimentTreatmentObjectOutput{})
	pulumi.RegisterOutputType(ExperimentTreatmentObjectArrayOutput{})
	pulumi.RegisterOutputType(ExperimentTreatmentToWeightOutput{})
	pulumi.RegisterOutputType(ExperimentTreatmentToWeightArrayOutput{})
	pulumi.RegisterOutputType(FeatureEntityOverrideOutput{})
	pulumi.RegisterOutputType(FeatureEntityOverrideArrayOutput{})
	pulumi.RegisterOutputType(FeatureTagOutput{})
	pulumi.RegisterOutputType(FeatureTagArrayOutput{})
	pulumi.RegisterOutputType(FeatureVariationObjectOutput{})
	pulumi.RegisterOutputType(FeatureVariationObjectArrayOutput{})
	pulumi.RegisterOutputType(LaunchGroupObjectOutput{})
	pulumi.RegisterOutputType(LaunchGroupObjectArrayOutput{})
	pulumi.RegisterOutputType(LaunchGroupToWeightOutput{})
	pulumi.RegisterOutputType(LaunchGroupToWeightArrayOutput{})
	pulumi.RegisterOutputType(LaunchMetricDefinitionObjectOutput{})
	pulumi.RegisterOutputType(LaunchMetricDefinitionObjectArrayOutput{})
	pulumi.RegisterOutputType(LaunchStepConfigOutput{})
	pulumi.RegisterOutputType(LaunchStepConfigArrayOutput{})
	pulumi.RegisterOutputType(LaunchTagOutput{})
	pulumi.RegisterOutputType(LaunchTagArrayOutput{})
	pulumi.RegisterOutputType(ProjectDataDeliveryObjectOutput{})
	pulumi.RegisterOutputType(ProjectDataDeliveryObjectPtrOutput{})
	pulumi.RegisterOutputType(ProjectS3DestinationOutput{})
	pulumi.RegisterOutputType(ProjectS3DestinationPtrOutput{})
	pulumi.RegisterOutputType(ProjectTagOutput{})
	pulumi.RegisterOutputType(ProjectTagArrayOutput{})
}
