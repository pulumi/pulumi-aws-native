// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package evidently

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ExperimentMetricGoalObject struct {
	DesiredChange ExperimentMetricGoalObjectDesiredChange `pulumi:"desiredChange"`
	// The JSON path to reference the entity id in the event.
	EntityIdKey string `pulumi:"entityIdKey"`
	// Event patterns have the same structure as the events they match. Rules use event patterns to select events. An event pattern either matches an event or it doesn't.
	EventPattern *string `pulumi:"eventPattern"`
	MetricName   string  `pulumi:"metricName"`
	UnitLabel    *string `pulumi:"unitLabel"`
	// The JSON path to reference the numerical metric value in the event.
	ValueKey string `pulumi:"valueKey"`
}

// ExperimentMetricGoalObjectInput is an input type that accepts ExperimentMetricGoalObjectArgs and ExperimentMetricGoalObjectOutput values.
// You can construct a concrete instance of `ExperimentMetricGoalObjectInput` via:
//
//	ExperimentMetricGoalObjectArgs{...}
type ExperimentMetricGoalObjectInput interface {
	pulumi.Input

	ToExperimentMetricGoalObjectOutput() ExperimentMetricGoalObjectOutput
	ToExperimentMetricGoalObjectOutputWithContext(context.Context) ExperimentMetricGoalObjectOutput
}

type ExperimentMetricGoalObjectArgs struct {
	DesiredChange ExperimentMetricGoalObjectDesiredChangeInput `pulumi:"desiredChange"`
	// The JSON path to reference the entity id in the event.
	EntityIdKey pulumi.StringInput `pulumi:"entityIdKey"`
	// Event patterns have the same structure as the events they match. Rules use event patterns to select events. An event pattern either matches an event or it doesn't.
	EventPattern pulumi.StringPtrInput `pulumi:"eventPattern"`
	MetricName   pulumi.StringInput    `pulumi:"metricName"`
	UnitLabel    pulumi.StringPtrInput `pulumi:"unitLabel"`
	// The JSON path to reference the numerical metric value in the event.
	ValueKey pulumi.StringInput `pulumi:"valueKey"`
}

func (ExperimentMetricGoalObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentMetricGoalObject)(nil)).Elem()
}

func (i ExperimentMetricGoalObjectArgs) ToExperimentMetricGoalObjectOutput() ExperimentMetricGoalObjectOutput {
	return i.ToExperimentMetricGoalObjectOutputWithContext(context.Background())
}

func (i ExperimentMetricGoalObjectArgs) ToExperimentMetricGoalObjectOutputWithContext(ctx context.Context) ExperimentMetricGoalObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentMetricGoalObjectOutput)
}

// ExperimentMetricGoalObjectArrayInput is an input type that accepts ExperimentMetricGoalObjectArray and ExperimentMetricGoalObjectArrayOutput values.
// You can construct a concrete instance of `ExperimentMetricGoalObjectArrayInput` via:
//
//	ExperimentMetricGoalObjectArray{ ExperimentMetricGoalObjectArgs{...} }
type ExperimentMetricGoalObjectArrayInput interface {
	pulumi.Input

	ToExperimentMetricGoalObjectArrayOutput() ExperimentMetricGoalObjectArrayOutput
	ToExperimentMetricGoalObjectArrayOutputWithContext(context.Context) ExperimentMetricGoalObjectArrayOutput
}

type ExperimentMetricGoalObjectArray []ExperimentMetricGoalObjectInput

func (ExperimentMetricGoalObjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExperimentMetricGoalObject)(nil)).Elem()
}

func (i ExperimentMetricGoalObjectArray) ToExperimentMetricGoalObjectArrayOutput() ExperimentMetricGoalObjectArrayOutput {
	return i.ToExperimentMetricGoalObjectArrayOutputWithContext(context.Background())
}

func (i ExperimentMetricGoalObjectArray) ToExperimentMetricGoalObjectArrayOutputWithContext(ctx context.Context) ExperimentMetricGoalObjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentMetricGoalObjectArrayOutput)
}

type ExperimentMetricGoalObjectOutput struct{ *pulumi.OutputState }

func (ExperimentMetricGoalObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentMetricGoalObject)(nil)).Elem()
}

func (o ExperimentMetricGoalObjectOutput) ToExperimentMetricGoalObjectOutput() ExperimentMetricGoalObjectOutput {
	return o
}

func (o ExperimentMetricGoalObjectOutput) ToExperimentMetricGoalObjectOutputWithContext(ctx context.Context) ExperimentMetricGoalObjectOutput {
	return o
}

func (o ExperimentMetricGoalObjectOutput) DesiredChange() ExperimentMetricGoalObjectDesiredChangeOutput {
	return o.ApplyT(func(v ExperimentMetricGoalObject) ExperimentMetricGoalObjectDesiredChange { return v.DesiredChange }).(ExperimentMetricGoalObjectDesiredChangeOutput)
}

// The JSON path to reference the entity id in the event.
func (o ExperimentMetricGoalObjectOutput) EntityIdKey() pulumi.StringOutput {
	return o.ApplyT(func(v ExperimentMetricGoalObject) string { return v.EntityIdKey }).(pulumi.StringOutput)
}

// Event patterns have the same structure as the events they match. Rules use event patterns to select events. An event pattern either matches an event or it doesn't.
func (o ExperimentMetricGoalObjectOutput) EventPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExperimentMetricGoalObject) *string { return v.EventPattern }).(pulumi.StringPtrOutput)
}

func (o ExperimentMetricGoalObjectOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v ExperimentMetricGoalObject) string { return v.MetricName }).(pulumi.StringOutput)
}

func (o ExperimentMetricGoalObjectOutput) UnitLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExperimentMetricGoalObject) *string { return v.UnitLabel }).(pulumi.StringPtrOutput)
}

// The JSON path to reference the numerical metric value in the event.
func (o ExperimentMetricGoalObjectOutput) ValueKey() pulumi.StringOutput {
	return o.ApplyT(func(v ExperimentMetricGoalObject) string { return v.ValueKey }).(pulumi.StringOutput)
}

type ExperimentMetricGoalObjectArrayOutput struct{ *pulumi.OutputState }

func (ExperimentMetricGoalObjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExperimentMetricGoalObject)(nil)).Elem()
}

func (o ExperimentMetricGoalObjectArrayOutput) ToExperimentMetricGoalObjectArrayOutput() ExperimentMetricGoalObjectArrayOutput {
	return o
}

func (o ExperimentMetricGoalObjectArrayOutput) ToExperimentMetricGoalObjectArrayOutputWithContext(ctx context.Context) ExperimentMetricGoalObjectArrayOutput {
	return o
}

func (o ExperimentMetricGoalObjectArrayOutput) Index(i pulumi.IntInput) ExperimentMetricGoalObjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExperimentMetricGoalObject {
		return vs[0].([]ExperimentMetricGoalObject)[vs[1].(int)]
	}).(ExperimentMetricGoalObjectOutput)
}

type ExperimentOnlineAbConfigObject struct {
	ControlTreatmentName *string                       `pulumi:"controlTreatmentName"`
	TreatmentWeights     []ExperimentTreatmentToWeight `pulumi:"treatmentWeights"`
}

// ExperimentOnlineAbConfigObjectInput is an input type that accepts ExperimentOnlineAbConfigObjectArgs and ExperimentOnlineAbConfigObjectOutput values.
// You can construct a concrete instance of `ExperimentOnlineAbConfigObjectInput` via:
//
//	ExperimentOnlineAbConfigObjectArgs{...}
type ExperimentOnlineAbConfigObjectInput interface {
	pulumi.Input

	ToExperimentOnlineAbConfigObjectOutput() ExperimentOnlineAbConfigObjectOutput
	ToExperimentOnlineAbConfigObjectOutputWithContext(context.Context) ExperimentOnlineAbConfigObjectOutput
}

type ExperimentOnlineAbConfigObjectArgs struct {
	ControlTreatmentName pulumi.StringPtrInput                 `pulumi:"controlTreatmentName"`
	TreatmentWeights     ExperimentTreatmentToWeightArrayInput `pulumi:"treatmentWeights"`
}

func (ExperimentOnlineAbConfigObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentOnlineAbConfigObject)(nil)).Elem()
}

func (i ExperimentOnlineAbConfigObjectArgs) ToExperimentOnlineAbConfigObjectOutput() ExperimentOnlineAbConfigObjectOutput {
	return i.ToExperimentOnlineAbConfigObjectOutputWithContext(context.Background())
}

func (i ExperimentOnlineAbConfigObjectArgs) ToExperimentOnlineAbConfigObjectOutputWithContext(ctx context.Context) ExperimentOnlineAbConfigObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentOnlineAbConfigObjectOutput)
}

type ExperimentOnlineAbConfigObjectOutput struct{ *pulumi.OutputState }

func (ExperimentOnlineAbConfigObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentOnlineAbConfigObject)(nil)).Elem()
}

func (o ExperimentOnlineAbConfigObjectOutput) ToExperimentOnlineAbConfigObjectOutput() ExperimentOnlineAbConfigObjectOutput {
	return o
}

func (o ExperimentOnlineAbConfigObjectOutput) ToExperimentOnlineAbConfigObjectOutputWithContext(ctx context.Context) ExperimentOnlineAbConfigObjectOutput {
	return o
}

func (o ExperimentOnlineAbConfigObjectOutput) ControlTreatmentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExperimentOnlineAbConfigObject) *string { return v.ControlTreatmentName }).(pulumi.StringPtrOutput)
}

func (o ExperimentOnlineAbConfigObjectOutput) TreatmentWeights() ExperimentTreatmentToWeightArrayOutput {
	return o.ApplyT(func(v ExperimentOnlineAbConfigObject) []ExperimentTreatmentToWeight { return v.TreatmentWeights }).(ExperimentTreatmentToWeightArrayOutput)
}

type ExperimentOnlineAbConfigObjectPtrOutput struct{ *pulumi.OutputState }

func (ExperimentOnlineAbConfigObjectPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExperimentOnlineAbConfigObject)(nil)).Elem()
}

func (o ExperimentOnlineAbConfigObjectPtrOutput) ToExperimentOnlineAbConfigObjectPtrOutput() ExperimentOnlineAbConfigObjectPtrOutput {
	return o
}

func (o ExperimentOnlineAbConfigObjectPtrOutput) ToExperimentOnlineAbConfigObjectPtrOutputWithContext(ctx context.Context) ExperimentOnlineAbConfigObjectPtrOutput {
	return o
}

func (o ExperimentOnlineAbConfigObjectPtrOutput) Elem() ExperimentOnlineAbConfigObjectOutput {
	return o.ApplyT(func(v *ExperimentOnlineAbConfigObject) ExperimentOnlineAbConfigObject {
		if v != nil {
			return *v
		}
		var ret ExperimentOnlineAbConfigObject
		return ret
	}).(ExperimentOnlineAbConfigObjectOutput)
}

func (o ExperimentOnlineAbConfigObjectPtrOutput) ControlTreatmentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExperimentOnlineAbConfigObject) *string {
		if v == nil {
			return nil
		}
		return v.ControlTreatmentName
	}).(pulumi.StringPtrOutput)
}

func (o ExperimentOnlineAbConfigObjectPtrOutput) TreatmentWeights() ExperimentTreatmentToWeightArrayOutput {
	return o.ApplyT(func(v *ExperimentOnlineAbConfigObject) []ExperimentTreatmentToWeight {
		if v == nil {
			return nil
		}
		return v.TreatmentWeights
	}).(ExperimentTreatmentToWeightArrayOutput)
}

type ExperimentRunningStatusObject struct {
	// Provide the analysis Completion time for an experiment
	AnalysisCompleteTime *string `pulumi:"analysisCompleteTime"`
	// Provide CANCELLED or COMPLETED desired state when stopping an experiment
	DesiredState *string `pulumi:"desiredState"`
	// Reason is a required input for stopping the experiment
	Reason *string `pulumi:"reason"`
	// Provide START or STOP action to apply on an experiment
	Status *string `pulumi:"status"`
}

// ExperimentRunningStatusObjectInput is an input type that accepts ExperimentRunningStatusObjectArgs and ExperimentRunningStatusObjectOutput values.
// You can construct a concrete instance of `ExperimentRunningStatusObjectInput` via:
//
//	ExperimentRunningStatusObjectArgs{...}
type ExperimentRunningStatusObjectInput interface {
	pulumi.Input

	ToExperimentRunningStatusObjectOutput() ExperimentRunningStatusObjectOutput
	ToExperimentRunningStatusObjectOutputWithContext(context.Context) ExperimentRunningStatusObjectOutput
}

type ExperimentRunningStatusObjectArgs struct {
	// Provide the analysis Completion time for an experiment
	AnalysisCompleteTime pulumi.StringPtrInput `pulumi:"analysisCompleteTime"`
	// Provide CANCELLED or COMPLETED desired state when stopping an experiment
	DesiredState pulumi.StringPtrInput `pulumi:"desiredState"`
	// Reason is a required input for stopping the experiment
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Provide START or STOP action to apply on an experiment
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (ExperimentRunningStatusObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentRunningStatusObject)(nil)).Elem()
}

func (i ExperimentRunningStatusObjectArgs) ToExperimentRunningStatusObjectOutput() ExperimentRunningStatusObjectOutput {
	return i.ToExperimentRunningStatusObjectOutputWithContext(context.Background())
}

func (i ExperimentRunningStatusObjectArgs) ToExperimentRunningStatusObjectOutputWithContext(ctx context.Context) ExperimentRunningStatusObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentRunningStatusObjectOutput)
}

func (i ExperimentRunningStatusObjectArgs) ToExperimentRunningStatusObjectPtrOutput() ExperimentRunningStatusObjectPtrOutput {
	return i.ToExperimentRunningStatusObjectPtrOutputWithContext(context.Background())
}

func (i ExperimentRunningStatusObjectArgs) ToExperimentRunningStatusObjectPtrOutputWithContext(ctx context.Context) ExperimentRunningStatusObjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentRunningStatusObjectOutput).ToExperimentRunningStatusObjectPtrOutputWithContext(ctx)
}

// ExperimentRunningStatusObjectPtrInput is an input type that accepts ExperimentRunningStatusObjectArgs, ExperimentRunningStatusObjectPtr and ExperimentRunningStatusObjectPtrOutput values.
// You can construct a concrete instance of `ExperimentRunningStatusObjectPtrInput` via:
//
//	        ExperimentRunningStatusObjectArgs{...}
//
//	or:
//
//	        nil
type ExperimentRunningStatusObjectPtrInput interface {
	pulumi.Input

	ToExperimentRunningStatusObjectPtrOutput() ExperimentRunningStatusObjectPtrOutput
	ToExperimentRunningStatusObjectPtrOutputWithContext(context.Context) ExperimentRunningStatusObjectPtrOutput
}

type experimentRunningStatusObjectPtrType ExperimentRunningStatusObjectArgs

func ExperimentRunningStatusObjectPtr(v *ExperimentRunningStatusObjectArgs) ExperimentRunningStatusObjectPtrInput {
	return (*experimentRunningStatusObjectPtrType)(v)
}

func (*experimentRunningStatusObjectPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExperimentRunningStatusObject)(nil)).Elem()
}

func (i *experimentRunningStatusObjectPtrType) ToExperimentRunningStatusObjectPtrOutput() ExperimentRunningStatusObjectPtrOutput {
	return i.ToExperimentRunningStatusObjectPtrOutputWithContext(context.Background())
}

func (i *experimentRunningStatusObjectPtrType) ToExperimentRunningStatusObjectPtrOutputWithContext(ctx context.Context) ExperimentRunningStatusObjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentRunningStatusObjectPtrOutput)
}

type ExperimentRunningStatusObjectOutput struct{ *pulumi.OutputState }

func (ExperimentRunningStatusObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentRunningStatusObject)(nil)).Elem()
}

func (o ExperimentRunningStatusObjectOutput) ToExperimentRunningStatusObjectOutput() ExperimentRunningStatusObjectOutput {
	return o
}

func (o ExperimentRunningStatusObjectOutput) ToExperimentRunningStatusObjectOutputWithContext(ctx context.Context) ExperimentRunningStatusObjectOutput {
	return o
}

func (o ExperimentRunningStatusObjectOutput) ToExperimentRunningStatusObjectPtrOutput() ExperimentRunningStatusObjectPtrOutput {
	return o.ToExperimentRunningStatusObjectPtrOutputWithContext(context.Background())
}

func (o ExperimentRunningStatusObjectOutput) ToExperimentRunningStatusObjectPtrOutputWithContext(ctx context.Context) ExperimentRunningStatusObjectPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExperimentRunningStatusObject) *ExperimentRunningStatusObject {
		return &v
	}).(ExperimentRunningStatusObjectPtrOutput)
}

// Provide the analysis Completion time for an experiment
func (o ExperimentRunningStatusObjectOutput) AnalysisCompleteTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExperimentRunningStatusObject) *string { return v.AnalysisCompleteTime }).(pulumi.StringPtrOutput)
}

// Provide CANCELLED or COMPLETED desired state when stopping an experiment
func (o ExperimentRunningStatusObjectOutput) DesiredState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExperimentRunningStatusObject) *string { return v.DesiredState }).(pulumi.StringPtrOutput)
}

// Reason is a required input for stopping the experiment
func (o ExperimentRunningStatusObjectOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExperimentRunningStatusObject) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Provide START or STOP action to apply on an experiment
func (o ExperimentRunningStatusObjectOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExperimentRunningStatusObject) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type ExperimentRunningStatusObjectPtrOutput struct{ *pulumi.OutputState }

func (ExperimentRunningStatusObjectPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExperimentRunningStatusObject)(nil)).Elem()
}

func (o ExperimentRunningStatusObjectPtrOutput) ToExperimentRunningStatusObjectPtrOutput() ExperimentRunningStatusObjectPtrOutput {
	return o
}

func (o ExperimentRunningStatusObjectPtrOutput) ToExperimentRunningStatusObjectPtrOutputWithContext(ctx context.Context) ExperimentRunningStatusObjectPtrOutput {
	return o
}

func (o ExperimentRunningStatusObjectPtrOutput) Elem() ExperimentRunningStatusObjectOutput {
	return o.ApplyT(func(v *ExperimentRunningStatusObject) ExperimentRunningStatusObject {
		if v != nil {
			return *v
		}
		var ret ExperimentRunningStatusObject
		return ret
	}).(ExperimentRunningStatusObjectOutput)
}

// Provide the analysis Completion time for an experiment
func (o ExperimentRunningStatusObjectPtrOutput) AnalysisCompleteTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExperimentRunningStatusObject) *string {
		if v == nil {
			return nil
		}
		return v.AnalysisCompleteTime
	}).(pulumi.StringPtrOutput)
}

// Provide CANCELLED or COMPLETED desired state when stopping an experiment
func (o ExperimentRunningStatusObjectPtrOutput) DesiredState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExperimentRunningStatusObject) *string {
		if v == nil {
			return nil
		}
		return v.DesiredState
	}).(pulumi.StringPtrOutput)
}

// Reason is a required input for stopping the experiment
func (o ExperimentRunningStatusObjectPtrOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExperimentRunningStatusObject) *string {
		if v == nil {
			return nil
		}
		return v.Reason
	}).(pulumi.StringPtrOutput)
}

// Provide START or STOP action to apply on an experiment
func (o ExperimentRunningStatusObjectPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExperimentRunningStatusObject) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// A key-value pair to associate with a resource.
type ExperimentTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

type ExperimentTreatmentObject struct {
	Description   *string `pulumi:"description"`
	Feature       string  `pulumi:"feature"`
	TreatmentName string  `pulumi:"treatmentName"`
	Variation     string  `pulumi:"variation"`
}

// ExperimentTreatmentObjectInput is an input type that accepts ExperimentTreatmentObjectArgs and ExperimentTreatmentObjectOutput values.
// You can construct a concrete instance of `ExperimentTreatmentObjectInput` via:
//
//	ExperimentTreatmentObjectArgs{...}
type ExperimentTreatmentObjectInput interface {
	pulumi.Input

	ToExperimentTreatmentObjectOutput() ExperimentTreatmentObjectOutput
	ToExperimentTreatmentObjectOutputWithContext(context.Context) ExperimentTreatmentObjectOutput
}

type ExperimentTreatmentObjectArgs struct {
	Description   pulumi.StringPtrInput `pulumi:"description"`
	Feature       pulumi.StringInput    `pulumi:"feature"`
	TreatmentName pulumi.StringInput    `pulumi:"treatmentName"`
	Variation     pulumi.StringInput    `pulumi:"variation"`
}

func (ExperimentTreatmentObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentTreatmentObject)(nil)).Elem()
}

func (i ExperimentTreatmentObjectArgs) ToExperimentTreatmentObjectOutput() ExperimentTreatmentObjectOutput {
	return i.ToExperimentTreatmentObjectOutputWithContext(context.Background())
}

func (i ExperimentTreatmentObjectArgs) ToExperimentTreatmentObjectOutputWithContext(ctx context.Context) ExperimentTreatmentObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentTreatmentObjectOutput)
}

// ExperimentTreatmentObjectArrayInput is an input type that accepts ExperimentTreatmentObjectArray and ExperimentTreatmentObjectArrayOutput values.
// You can construct a concrete instance of `ExperimentTreatmentObjectArrayInput` via:
//
//	ExperimentTreatmentObjectArray{ ExperimentTreatmentObjectArgs{...} }
type ExperimentTreatmentObjectArrayInput interface {
	pulumi.Input

	ToExperimentTreatmentObjectArrayOutput() ExperimentTreatmentObjectArrayOutput
	ToExperimentTreatmentObjectArrayOutputWithContext(context.Context) ExperimentTreatmentObjectArrayOutput
}

type ExperimentTreatmentObjectArray []ExperimentTreatmentObjectInput

func (ExperimentTreatmentObjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExperimentTreatmentObject)(nil)).Elem()
}

func (i ExperimentTreatmentObjectArray) ToExperimentTreatmentObjectArrayOutput() ExperimentTreatmentObjectArrayOutput {
	return i.ToExperimentTreatmentObjectArrayOutputWithContext(context.Background())
}

func (i ExperimentTreatmentObjectArray) ToExperimentTreatmentObjectArrayOutputWithContext(ctx context.Context) ExperimentTreatmentObjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentTreatmentObjectArrayOutput)
}

type ExperimentTreatmentObjectOutput struct{ *pulumi.OutputState }

func (ExperimentTreatmentObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentTreatmentObject)(nil)).Elem()
}

func (o ExperimentTreatmentObjectOutput) ToExperimentTreatmentObjectOutput() ExperimentTreatmentObjectOutput {
	return o
}

func (o ExperimentTreatmentObjectOutput) ToExperimentTreatmentObjectOutputWithContext(ctx context.Context) ExperimentTreatmentObjectOutput {
	return o
}

func (o ExperimentTreatmentObjectOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExperimentTreatmentObject) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ExperimentTreatmentObjectOutput) Feature() pulumi.StringOutput {
	return o.ApplyT(func(v ExperimentTreatmentObject) string { return v.Feature }).(pulumi.StringOutput)
}

func (o ExperimentTreatmentObjectOutput) TreatmentName() pulumi.StringOutput {
	return o.ApplyT(func(v ExperimentTreatmentObject) string { return v.TreatmentName }).(pulumi.StringOutput)
}

func (o ExperimentTreatmentObjectOutput) Variation() pulumi.StringOutput {
	return o.ApplyT(func(v ExperimentTreatmentObject) string { return v.Variation }).(pulumi.StringOutput)
}

type ExperimentTreatmentObjectArrayOutput struct{ *pulumi.OutputState }

func (ExperimentTreatmentObjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExperimentTreatmentObject)(nil)).Elem()
}

func (o ExperimentTreatmentObjectArrayOutput) ToExperimentTreatmentObjectArrayOutput() ExperimentTreatmentObjectArrayOutput {
	return o
}

func (o ExperimentTreatmentObjectArrayOutput) ToExperimentTreatmentObjectArrayOutputWithContext(ctx context.Context) ExperimentTreatmentObjectArrayOutput {
	return o
}

func (o ExperimentTreatmentObjectArrayOutput) Index(i pulumi.IntInput) ExperimentTreatmentObjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExperimentTreatmentObject {
		return vs[0].([]ExperimentTreatmentObject)[vs[1].(int)]
	}).(ExperimentTreatmentObjectOutput)
}

type ExperimentTreatmentToWeight struct {
	SplitWeight int    `pulumi:"splitWeight"`
	Treatment   string `pulumi:"treatment"`
}

// ExperimentTreatmentToWeightInput is an input type that accepts ExperimentTreatmentToWeightArgs and ExperimentTreatmentToWeightOutput values.
// You can construct a concrete instance of `ExperimentTreatmentToWeightInput` via:
//
//	ExperimentTreatmentToWeightArgs{...}
type ExperimentTreatmentToWeightInput interface {
	pulumi.Input

	ToExperimentTreatmentToWeightOutput() ExperimentTreatmentToWeightOutput
	ToExperimentTreatmentToWeightOutputWithContext(context.Context) ExperimentTreatmentToWeightOutput
}

type ExperimentTreatmentToWeightArgs struct {
	SplitWeight pulumi.IntInput    `pulumi:"splitWeight"`
	Treatment   pulumi.StringInput `pulumi:"treatment"`
}

func (ExperimentTreatmentToWeightArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentTreatmentToWeight)(nil)).Elem()
}

func (i ExperimentTreatmentToWeightArgs) ToExperimentTreatmentToWeightOutput() ExperimentTreatmentToWeightOutput {
	return i.ToExperimentTreatmentToWeightOutputWithContext(context.Background())
}

func (i ExperimentTreatmentToWeightArgs) ToExperimentTreatmentToWeightOutputWithContext(ctx context.Context) ExperimentTreatmentToWeightOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentTreatmentToWeightOutput)
}

// ExperimentTreatmentToWeightArrayInput is an input type that accepts ExperimentTreatmentToWeightArray and ExperimentTreatmentToWeightArrayOutput values.
// You can construct a concrete instance of `ExperimentTreatmentToWeightArrayInput` via:
//
//	ExperimentTreatmentToWeightArray{ ExperimentTreatmentToWeightArgs{...} }
type ExperimentTreatmentToWeightArrayInput interface {
	pulumi.Input

	ToExperimentTreatmentToWeightArrayOutput() ExperimentTreatmentToWeightArrayOutput
	ToExperimentTreatmentToWeightArrayOutputWithContext(context.Context) ExperimentTreatmentToWeightArrayOutput
}

type ExperimentTreatmentToWeightArray []ExperimentTreatmentToWeightInput

func (ExperimentTreatmentToWeightArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExperimentTreatmentToWeight)(nil)).Elem()
}

func (i ExperimentTreatmentToWeightArray) ToExperimentTreatmentToWeightArrayOutput() ExperimentTreatmentToWeightArrayOutput {
	return i.ToExperimentTreatmentToWeightArrayOutputWithContext(context.Background())
}

func (i ExperimentTreatmentToWeightArray) ToExperimentTreatmentToWeightArrayOutputWithContext(ctx context.Context) ExperimentTreatmentToWeightArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentTreatmentToWeightArrayOutput)
}

type ExperimentTreatmentToWeightOutput struct{ *pulumi.OutputState }

func (ExperimentTreatmentToWeightOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentTreatmentToWeight)(nil)).Elem()
}

func (o ExperimentTreatmentToWeightOutput) ToExperimentTreatmentToWeightOutput() ExperimentTreatmentToWeightOutput {
	return o
}

func (o ExperimentTreatmentToWeightOutput) ToExperimentTreatmentToWeightOutputWithContext(ctx context.Context) ExperimentTreatmentToWeightOutput {
	return o
}

func (o ExperimentTreatmentToWeightOutput) SplitWeight() pulumi.IntOutput {
	return o.ApplyT(func(v ExperimentTreatmentToWeight) int { return v.SplitWeight }).(pulumi.IntOutput)
}

func (o ExperimentTreatmentToWeightOutput) Treatment() pulumi.StringOutput {
	return o.ApplyT(func(v ExperimentTreatmentToWeight) string { return v.Treatment }).(pulumi.StringOutput)
}

type ExperimentTreatmentToWeightArrayOutput struct{ *pulumi.OutputState }

func (ExperimentTreatmentToWeightArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExperimentTreatmentToWeight)(nil)).Elem()
}

func (o ExperimentTreatmentToWeightArrayOutput) ToExperimentTreatmentToWeightArrayOutput() ExperimentTreatmentToWeightArrayOutput {
	return o
}

func (o ExperimentTreatmentToWeightArrayOutput) ToExperimentTreatmentToWeightArrayOutputWithContext(ctx context.Context) ExperimentTreatmentToWeightArrayOutput {
	return o
}

func (o ExperimentTreatmentToWeightArrayOutput) Index(i pulumi.IntInput) ExperimentTreatmentToWeightOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExperimentTreatmentToWeight {
		return vs[0].([]ExperimentTreatmentToWeight)[vs[1].(int)]
	}).(ExperimentTreatmentToWeightOutput)
}

type FeatureEntityOverride struct {
	EntityId  *string `pulumi:"entityId"`
	Variation *string `pulumi:"variation"`
}

// FeatureEntityOverrideInput is an input type that accepts FeatureEntityOverrideArgs and FeatureEntityOverrideOutput values.
// You can construct a concrete instance of `FeatureEntityOverrideInput` via:
//
//	FeatureEntityOverrideArgs{...}
type FeatureEntityOverrideInput interface {
	pulumi.Input

	ToFeatureEntityOverrideOutput() FeatureEntityOverrideOutput
	ToFeatureEntityOverrideOutputWithContext(context.Context) FeatureEntityOverrideOutput
}

type FeatureEntityOverrideArgs struct {
	EntityId  pulumi.StringPtrInput `pulumi:"entityId"`
	Variation pulumi.StringPtrInput `pulumi:"variation"`
}

func (FeatureEntityOverrideArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureEntityOverride)(nil)).Elem()
}

func (i FeatureEntityOverrideArgs) ToFeatureEntityOverrideOutput() FeatureEntityOverrideOutput {
	return i.ToFeatureEntityOverrideOutputWithContext(context.Background())
}

func (i FeatureEntityOverrideArgs) ToFeatureEntityOverrideOutputWithContext(ctx context.Context) FeatureEntityOverrideOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureEntityOverrideOutput)
}

// FeatureEntityOverrideArrayInput is an input type that accepts FeatureEntityOverrideArray and FeatureEntityOverrideArrayOutput values.
// You can construct a concrete instance of `FeatureEntityOverrideArrayInput` via:
//
//	FeatureEntityOverrideArray{ FeatureEntityOverrideArgs{...} }
type FeatureEntityOverrideArrayInput interface {
	pulumi.Input

	ToFeatureEntityOverrideArrayOutput() FeatureEntityOverrideArrayOutput
	ToFeatureEntityOverrideArrayOutputWithContext(context.Context) FeatureEntityOverrideArrayOutput
}

type FeatureEntityOverrideArray []FeatureEntityOverrideInput

func (FeatureEntityOverrideArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FeatureEntityOverride)(nil)).Elem()
}

func (i FeatureEntityOverrideArray) ToFeatureEntityOverrideArrayOutput() FeatureEntityOverrideArrayOutput {
	return i.ToFeatureEntityOverrideArrayOutputWithContext(context.Background())
}

func (i FeatureEntityOverrideArray) ToFeatureEntityOverrideArrayOutputWithContext(ctx context.Context) FeatureEntityOverrideArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureEntityOverrideArrayOutput)
}

type FeatureEntityOverrideOutput struct{ *pulumi.OutputState }

func (FeatureEntityOverrideOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureEntityOverride)(nil)).Elem()
}

func (o FeatureEntityOverrideOutput) ToFeatureEntityOverrideOutput() FeatureEntityOverrideOutput {
	return o
}

func (o FeatureEntityOverrideOutput) ToFeatureEntityOverrideOutputWithContext(ctx context.Context) FeatureEntityOverrideOutput {
	return o
}

func (o FeatureEntityOverrideOutput) EntityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeatureEntityOverride) *string { return v.EntityId }).(pulumi.StringPtrOutput)
}

func (o FeatureEntityOverrideOutput) Variation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeatureEntityOverride) *string { return v.Variation }).(pulumi.StringPtrOutput)
}

type FeatureEntityOverrideArrayOutput struct{ *pulumi.OutputState }

func (FeatureEntityOverrideArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FeatureEntityOverride)(nil)).Elem()
}

func (o FeatureEntityOverrideArrayOutput) ToFeatureEntityOverrideArrayOutput() FeatureEntityOverrideArrayOutput {
	return o
}

func (o FeatureEntityOverrideArrayOutput) ToFeatureEntityOverrideArrayOutputWithContext(ctx context.Context) FeatureEntityOverrideArrayOutput {
	return o
}

func (o FeatureEntityOverrideArrayOutput) Index(i pulumi.IntInput) FeatureEntityOverrideOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FeatureEntityOverride {
		return vs[0].([]FeatureEntityOverride)[vs[1].(int)]
	}).(FeatureEntityOverrideOutput)
}

// A key-value pair to associate with a resource.
type FeatureTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

type FeatureVariationObject struct {
	BooleanValue  *bool    `pulumi:"booleanValue"`
	DoubleValue   *float64 `pulumi:"doubleValue"`
	LongValue     *float64 `pulumi:"longValue"`
	StringValue   *string  `pulumi:"stringValue"`
	VariationName *string  `pulumi:"variationName"`
}

// FeatureVariationObjectInput is an input type that accepts FeatureVariationObjectArgs and FeatureVariationObjectOutput values.
// You can construct a concrete instance of `FeatureVariationObjectInput` via:
//
//	FeatureVariationObjectArgs{...}
type FeatureVariationObjectInput interface {
	pulumi.Input

	ToFeatureVariationObjectOutput() FeatureVariationObjectOutput
	ToFeatureVariationObjectOutputWithContext(context.Context) FeatureVariationObjectOutput
}

type FeatureVariationObjectArgs struct {
	BooleanValue  pulumi.BoolPtrInput    `pulumi:"booleanValue"`
	DoubleValue   pulumi.Float64PtrInput `pulumi:"doubleValue"`
	LongValue     pulumi.Float64PtrInput `pulumi:"longValue"`
	StringValue   pulumi.StringPtrInput  `pulumi:"stringValue"`
	VariationName pulumi.StringPtrInput  `pulumi:"variationName"`
}

func (FeatureVariationObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureVariationObject)(nil)).Elem()
}

func (i FeatureVariationObjectArgs) ToFeatureVariationObjectOutput() FeatureVariationObjectOutput {
	return i.ToFeatureVariationObjectOutputWithContext(context.Background())
}

func (i FeatureVariationObjectArgs) ToFeatureVariationObjectOutputWithContext(ctx context.Context) FeatureVariationObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureVariationObjectOutput)
}

// FeatureVariationObjectArrayInput is an input type that accepts FeatureVariationObjectArray and FeatureVariationObjectArrayOutput values.
// You can construct a concrete instance of `FeatureVariationObjectArrayInput` via:
//
//	FeatureVariationObjectArray{ FeatureVariationObjectArgs{...} }
type FeatureVariationObjectArrayInput interface {
	pulumi.Input

	ToFeatureVariationObjectArrayOutput() FeatureVariationObjectArrayOutput
	ToFeatureVariationObjectArrayOutputWithContext(context.Context) FeatureVariationObjectArrayOutput
}

type FeatureVariationObjectArray []FeatureVariationObjectInput

func (FeatureVariationObjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FeatureVariationObject)(nil)).Elem()
}

func (i FeatureVariationObjectArray) ToFeatureVariationObjectArrayOutput() FeatureVariationObjectArrayOutput {
	return i.ToFeatureVariationObjectArrayOutputWithContext(context.Background())
}

func (i FeatureVariationObjectArray) ToFeatureVariationObjectArrayOutputWithContext(ctx context.Context) FeatureVariationObjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureVariationObjectArrayOutput)
}

type FeatureVariationObjectOutput struct{ *pulumi.OutputState }

func (FeatureVariationObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureVariationObject)(nil)).Elem()
}

func (o FeatureVariationObjectOutput) ToFeatureVariationObjectOutput() FeatureVariationObjectOutput {
	return o
}

func (o FeatureVariationObjectOutput) ToFeatureVariationObjectOutputWithContext(ctx context.Context) FeatureVariationObjectOutput {
	return o
}

func (o FeatureVariationObjectOutput) BooleanValue() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FeatureVariationObject) *bool { return v.BooleanValue }).(pulumi.BoolPtrOutput)
}

func (o FeatureVariationObjectOutput) DoubleValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v FeatureVariationObject) *float64 { return v.DoubleValue }).(pulumi.Float64PtrOutput)
}

func (o FeatureVariationObjectOutput) LongValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v FeatureVariationObject) *float64 { return v.LongValue }).(pulumi.Float64PtrOutput)
}

func (o FeatureVariationObjectOutput) StringValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeatureVariationObject) *string { return v.StringValue }).(pulumi.StringPtrOutput)
}

func (o FeatureVariationObjectOutput) VariationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeatureVariationObject) *string { return v.VariationName }).(pulumi.StringPtrOutput)
}

type FeatureVariationObjectArrayOutput struct{ *pulumi.OutputState }

func (FeatureVariationObjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FeatureVariationObject)(nil)).Elem()
}

func (o FeatureVariationObjectArrayOutput) ToFeatureVariationObjectArrayOutput() FeatureVariationObjectArrayOutput {
	return o
}

func (o FeatureVariationObjectArrayOutput) ToFeatureVariationObjectArrayOutputWithContext(ctx context.Context) FeatureVariationObjectArrayOutput {
	return o
}

func (o FeatureVariationObjectArrayOutput) Index(i pulumi.IntInput) FeatureVariationObjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FeatureVariationObject {
		return vs[0].([]FeatureVariationObject)[vs[1].(int)]
	}).(FeatureVariationObjectOutput)
}

type LaunchExecutionStatusObject struct {
	// Provide CANCELLED or COMPLETED as the launch desired state. Defaults to Completed if not provided.
	DesiredState *string `pulumi:"desiredState"`
	// Provide a reason for stopping the launch. Defaults to empty if not provided.
	Reason *string `pulumi:"reason"`
	// Provide START or STOP action to apply on a launch
	Status string `pulumi:"status"`
}

// LaunchExecutionStatusObjectInput is an input type that accepts LaunchExecutionStatusObjectArgs and LaunchExecutionStatusObjectOutput values.
// You can construct a concrete instance of `LaunchExecutionStatusObjectInput` via:
//
//	LaunchExecutionStatusObjectArgs{...}
type LaunchExecutionStatusObjectInput interface {
	pulumi.Input

	ToLaunchExecutionStatusObjectOutput() LaunchExecutionStatusObjectOutput
	ToLaunchExecutionStatusObjectOutputWithContext(context.Context) LaunchExecutionStatusObjectOutput
}

type LaunchExecutionStatusObjectArgs struct {
	// Provide CANCELLED or COMPLETED as the launch desired state. Defaults to Completed if not provided.
	DesiredState pulumi.StringPtrInput `pulumi:"desiredState"`
	// Provide a reason for stopping the launch. Defaults to empty if not provided.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Provide START or STOP action to apply on a launch
	Status pulumi.StringInput `pulumi:"status"`
}

func (LaunchExecutionStatusObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchExecutionStatusObject)(nil)).Elem()
}

func (i LaunchExecutionStatusObjectArgs) ToLaunchExecutionStatusObjectOutput() LaunchExecutionStatusObjectOutput {
	return i.ToLaunchExecutionStatusObjectOutputWithContext(context.Background())
}

func (i LaunchExecutionStatusObjectArgs) ToLaunchExecutionStatusObjectOutputWithContext(ctx context.Context) LaunchExecutionStatusObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchExecutionStatusObjectOutput)
}

func (i LaunchExecutionStatusObjectArgs) ToLaunchExecutionStatusObjectPtrOutput() LaunchExecutionStatusObjectPtrOutput {
	return i.ToLaunchExecutionStatusObjectPtrOutputWithContext(context.Background())
}

func (i LaunchExecutionStatusObjectArgs) ToLaunchExecutionStatusObjectPtrOutputWithContext(ctx context.Context) LaunchExecutionStatusObjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchExecutionStatusObjectOutput).ToLaunchExecutionStatusObjectPtrOutputWithContext(ctx)
}

// LaunchExecutionStatusObjectPtrInput is an input type that accepts LaunchExecutionStatusObjectArgs, LaunchExecutionStatusObjectPtr and LaunchExecutionStatusObjectPtrOutput values.
// You can construct a concrete instance of `LaunchExecutionStatusObjectPtrInput` via:
//
//	        LaunchExecutionStatusObjectArgs{...}
//
//	or:
//
//	        nil
type LaunchExecutionStatusObjectPtrInput interface {
	pulumi.Input

	ToLaunchExecutionStatusObjectPtrOutput() LaunchExecutionStatusObjectPtrOutput
	ToLaunchExecutionStatusObjectPtrOutputWithContext(context.Context) LaunchExecutionStatusObjectPtrOutput
}

type launchExecutionStatusObjectPtrType LaunchExecutionStatusObjectArgs

func LaunchExecutionStatusObjectPtr(v *LaunchExecutionStatusObjectArgs) LaunchExecutionStatusObjectPtrInput {
	return (*launchExecutionStatusObjectPtrType)(v)
}

func (*launchExecutionStatusObjectPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LaunchExecutionStatusObject)(nil)).Elem()
}

func (i *launchExecutionStatusObjectPtrType) ToLaunchExecutionStatusObjectPtrOutput() LaunchExecutionStatusObjectPtrOutput {
	return i.ToLaunchExecutionStatusObjectPtrOutputWithContext(context.Background())
}

func (i *launchExecutionStatusObjectPtrType) ToLaunchExecutionStatusObjectPtrOutputWithContext(ctx context.Context) LaunchExecutionStatusObjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchExecutionStatusObjectPtrOutput)
}

type LaunchExecutionStatusObjectOutput struct{ *pulumi.OutputState }

func (LaunchExecutionStatusObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchExecutionStatusObject)(nil)).Elem()
}

func (o LaunchExecutionStatusObjectOutput) ToLaunchExecutionStatusObjectOutput() LaunchExecutionStatusObjectOutput {
	return o
}

func (o LaunchExecutionStatusObjectOutput) ToLaunchExecutionStatusObjectOutputWithContext(ctx context.Context) LaunchExecutionStatusObjectOutput {
	return o
}

func (o LaunchExecutionStatusObjectOutput) ToLaunchExecutionStatusObjectPtrOutput() LaunchExecutionStatusObjectPtrOutput {
	return o.ToLaunchExecutionStatusObjectPtrOutputWithContext(context.Background())
}

func (o LaunchExecutionStatusObjectOutput) ToLaunchExecutionStatusObjectPtrOutputWithContext(ctx context.Context) LaunchExecutionStatusObjectPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LaunchExecutionStatusObject) *LaunchExecutionStatusObject {
		return &v
	}).(LaunchExecutionStatusObjectPtrOutput)
}

// Provide CANCELLED or COMPLETED as the launch desired state. Defaults to Completed if not provided.
func (o LaunchExecutionStatusObjectOutput) DesiredState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LaunchExecutionStatusObject) *string { return v.DesiredState }).(pulumi.StringPtrOutput)
}

// Provide a reason for stopping the launch. Defaults to empty if not provided.
func (o LaunchExecutionStatusObjectOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LaunchExecutionStatusObject) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Provide START or STOP action to apply on a launch
func (o LaunchExecutionStatusObjectOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchExecutionStatusObject) string { return v.Status }).(pulumi.StringOutput)
}

type LaunchExecutionStatusObjectPtrOutput struct{ *pulumi.OutputState }

func (LaunchExecutionStatusObjectPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LaunchExecutionStatusObject)(nil)).Elem()
}

func (o LaunchExecutionStatusObjectPtrOutput) ToLaunchExecutionStatusObjectPtrOutput() LaunchExecutionStatusObjectPtrOutput {
	return o
}

func (o LaunchExecutionStatusObjectPtrOutput) ToLaunchExecutionStatusObjectPtrOutputWithContext(ctx context.Context) LaunchExecutionStatusObjectPtrOutput {
	return o
}

func (o LaunchExecutionStatusObjectPtrOutput) Elem() LaunchExecutionStatusObjectOutput {
	return o.ApplyT(func(v *LaunchExecutionStatusObject) LaunchExecutionStatusObject {
		if v != nil {
			return *v
		}
		var ret LaunchExecutionStatusObject
		return ret
	}).(LaunchExecutionStatusObjectOutput)
}

// Provide CANCELLED or COMPLETED as the launch desired state. Defaults to Completed if not provided.
func (o LaunchExecutionStatusObjectPtrOutput) DesiredState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LaunchExecutionStatusObject) *string {
		if v == nil {
			return nil
		}
		return v.DesiredState
	}).(pulumi.StringPtrOutput)
}

// Provide a reason for stopping the launch. Defaults to empty if not provided.
func (o LaunchExecutionStatusObjectPtrOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LaunchExecutionStatusObject) *string {
		if v == nil {
			return nil
		}
		return v.Reason
	}).(pulumi.StringPtrOutput)
}

// Provide START or STOP action to apply on a launch
func (o LaunchExecutionStatusObjectPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LaunchExecutionStatusObject) *string {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.StringPtrOutput)
}

type LaunchGroupObject struct {
	Description *string `pulumi:"description"`
	Feature     string  `pulumi:"feature"`
	GroupName   string  `pulumi:"groupName"`
	Variation   string  `pulumi:"variation"`
}

// LaunchGroupObjectInput is an input type that accepts LaunchGroupObjectArgs and LaunchGroupObjectOutput values.
// You can construct a concrete instance of `LaunchGroupObjectInput` via:
//
//	LaunchGroupObjectArgs{...}
type LaunchGroupObjectInput interface {
	pulumi.Input

	ToLaunchGroupObjectOutput() LaunchGroupObjectOutput
	ToLaunchGroupObjectOutputWithContext(context.Context) LaunchGroupObjectOutput
}

type LaunchGroupObjectArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Feature     pulumi.StringInput    `pulumi:"feature"`
	GroupName   pulumi.StringInput    `pulumi:"groupName"`
	Variation   pulumi.StringInput    `pulumi:"variation"`
}

func (LaunchGroupObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchGroupObject)(nil)).Elem()
}

func (i LaunchGroupObjectArgs) ToLaunchGroupObjectOutput() LaunchGroupObjectOutput {
	return i.ToLaunchGroupObjectOutputWithContext(context.Background())
}

func (i LaunchGroupObjectArgs) ToLaunchGroupObjectOutputWithContext(ctx context.Context) LaunchGroupObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchGroupObjectOutput)
}

// LaunchGroupObjectArrayInput is an input type that accepts LaunchGroupObjectArray and LaunchGroupObjectArrayOutput values.
// You can construct a concrete instance of `LaunchGroupObjectArrayInput` via:
//
//	LaunchGroupObjectArray{ LaunchGroupObjectArgs{...} }
type LaunchGroupObjectArrayInput interface {
	pulumi.Input

	ToLaunchGroupObjectArrayOutput() LaunchGroupObjectArrayOutput
	ToLaunchGroupObjectArrayOutputWithContext(context.Context) LaunchGroupObjectArrayOutput
}

type LaunchGroupObjectArray []LaunchGroupObjectInput

func (LaunchGroupObjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LaunchGroupObject)(nil)).Elem()
}

func (i LaunchGroupObjectArray) ToLaunchGroupObjectArrayOutput() LaunchGroupObjectArrayOutput {
	return i.ToLaunchGroupObjectArrayOutputWithContext(context.Background())
}

func (i LaunchGroupObjectArray) ToLaunchGroupObjectArrayOutputWithContext(ctx context.Context) LaunchGroupObjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchGroupObjectArrayOutput)
}

type LaunchGroupObjectOutput struct{ *pulumi.OutputState }

func (LaunchGroupObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchGroupObject)(nil)).Elem()
}

func (o LaunchGroupObjectOutput) ToLaunchGroupObjectOutput() LaunchGroupObjectOutput {
	return o
}

func (o LaunchGroupObjectOutput) ToLaunchGroupObjectOutputWithContext(ctx context.Context) LaunchGroupObjectOutput {
	return o
}

func (o LaunchGroupObjectOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LaunchGroupObject) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o LaunchGroupObjectOutput) Feature() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchGroupObject) string { return v.Feature }).(pulumi.StringOutput)
}

func (o LaunchGroupObjectOutput) GroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchGroupObject) string { return v.GroupName }).(pulumi.StringOutput)
}

func (o LaunchGroupObjectOutput) Variation() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchGroupObject) string { return v.Variation }).(pulumi.StringOutput)
}

type LaunchGroupObjectArrayOutput struct{ *pulumi.OutputState }

func (LaunchGroupObjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LaunchGroupObject)(nil)).Elem()
}

func (o LaunchGroupObjectArrayOutput) ToLaunchGroupObjectArrayOutput() LaunchGroupObjectArrayOutput {
	return o
}

func (o LaunchGroupObjectArrayOutput) ToLaunchGroupObjectArrayOutputWithContext(ctx context.Context) LaunchGroupObjectArrayOutput {
	return o
}

func (o LaunchGroupObjectArrayOutput) Index(i pulumi.IntInput) LaunchGroupObjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LaunchGroupObject {
		return vs[0].([]LaunchGroupObject)[vs[1].(int)]
	}).(LaunchGroupObjectOutput)
}

type LaunchGroupToWeight struct {
	GroupName   string `pulumi:"groupName"`
	SplitWeight int    `pulumi:"splitWeight"`
}

// LaunchGroupToWeightInput is an input type that accepts LaunchGroupToWeightArgs and LaunchGroupToWeightOutput values.
// You can construct a concrete instance of `LaunchGroupToWeightInput` via:
//
//	LaunchGroupToWeightArgs{...}
type LaunchGroupToWeightInput interface {
	pulumi.Input

	ToLaunchGroupToWeightOutput() LaunchGroupToWeightOutput
	ToLaunchGroupToWeightOutputWithContext(context.Context) LaunchGroupToWeightOutput
}

type LaunchGroupToWeightArgs struct {
	GroupName   pulumi.StringInput `pulumi:"groupName"`
	SplitWeight pulumi.IntInput    `pulumi:"splitWeight"`
}

func (LaunchGroupToWeightArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchGroupToWeight)(nil)).Elem()
}

func (i LaunchGroupToWeightArgs) ToLaunchGroupToWeightOutput() LaunchGroupToWeightOutput {
	return i.ToLaunchGroupToWeightOutputWithContext(context.Background())
}

func (i LaunchGroupToWeightArgs) ToLaunchGroupToWeightOutputWithContext(ctx context.Context) LaunchGroupToWeightOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchGroupToWeightOutput)
}

// LaunchGroupToWeightArrayInput is an input type that accepts LaunchGroupToWeightArray and LaunchGroupToWeightArrayOutput values.
// You can construct a concrete instance of `LaunchGroupToWeightArrayInput` via:
//
//	LaunchGroupToWeightArray{ LaunchGroupToWeightArgs{...} }
type LaunchGroupToWeightArrayInput interface {
	pulumi.Input

	ToLaunchGroupToWeightArrayOutput() LaunchGroupToWeightArrayOutput
	ToLaunchGroupToWeightArrayOutputWithContext(context.Context) LaunchGroupToWeightArrayOutput
}

type LaunchGroupToWeightArray []LaunchGroupToWeightInput

func (LaunchGroupToWeightArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LaunchGroupToWeight)(nil)).Elem()
}

func (i LaunchGroupToWeightArray) ToLaunchGroupToWeightArrayOutput() LaunchGroupToWeightArrayOutput {
	return i.ToLaunchGroupToWeightArrayOutputWithContext(context.Background())
}

func (i LaunchGroupToWeightArray) ToLaunchGroupToWeightArrayOutputWithContext(ctx context.Context) LaunchGroupToWeightArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchGroupToWeightArrayOutput)
}

type LaunchGroupToWeightOutput struct{ *pulumi.OutputState }

func (LaunchGroupToWeightOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchGroupToWeight)(nil)).Elem()
}

func (o LaunchGroupToWeightOutput) ToLaunchGroupToWeightOutput() LaunchGroupToWeightOutput {
	return o
}

func (o LaunchGroupToWeightOutput) ToLaunchGroupToWeightOutputWithContext(ctx context.Context) LaunchGroupToWeightOutput {
	return o
}

func (o LaunchGroupToWeightOutput) GroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchGroupToWeight) string { return v.GroupName }).(pulumi.StringOutput)
}

func (o LaunchGroupToWeightOutput) SplitWeight() pulumi.IntOutput {
	return o.ApplyT(func(v LaunchGroupToWeight) int { return v.SplitWeight }).(pulumi.IntOutput)
}

type LaunchGroupToWeightArrayOutput struct{ *pulumi.OutputState }

func (LaunchGroupToWeightArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LaunchGroupToWeight)(nil)).Elem()
}

func (o LaunchGroupToWeightArrayOutput) ToLaunchGroupToWeightArrayOutput() LaunchGroupToWeightArrayOutput {
	return o
}

func (o LaunchGroupToWeightArrayOutput) ToLaunchGroupToWeightArrayOutputWithContext(ctx context.Context) LaunchGroupToWeightArrayOutput {
	return o
}

func (o LaunchGroupToWeightArrayOutput) Index(i pulumi.IntInput) LaunchGroupToWeightOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LaunchGroupToWeight {
		return vs[0].([]LaunchGroupToWeight)[vs[1].(int)]
	}).(LaunchGroupToWeightOutput)
}

type LaunchMetricDefinitionObject struct {
	// The JSON path to reference the entity id in the event.
	EntityIdKey string `pulumi:"entityIdKey"`
	// Event patterns have the same structure as the events they match. Rules use event patterns to select events. An event pattern either matches an event or it doesn't.
	EventPattern *string `pulumi:"eventPattern"`
	MetricName   string  `pulumi:"metricName"`
	UnitLabel    *string `pulumi:"unitLabel"`
	// The JSON path to reference the numerical metric value in the event.
	ValueKey string `pulumi:"valueKey"`
}

// LaunchMetricDefinitionObjectInput is an input type that accepts LaunchMetricDefinitionObjectArgs and LaunchMetricDefinitionObjectOutput values.
// You can construct a concrete instance of `LaunchMetricDefinitionObjectInput` via:
//
//	LaunchMetricDefinitionObjectArgs{...}
type LaunchMetricDefinitionObjectInput interface {
	pulumi.Input

	ToLaunchMetricDefinitionObjectOutput() LaunchMetricDefinitionObjectOutput
	ToLaunchMetricDefinitionObjectOutputWithContext(context.Context) LaunchMetricDefinitionObjectOutput
}

type LaunchMetricDefinitionObjectArgs struct {
	// The JSON path to reference the entity id in the event.
	EntityIdKey pulumi.StringInput `pulumi:"entityIdKey"`
	// Event patterns have the same structure as the events they match. Rules use event patterns to select events. An event pattern either matches an event or it doesn't.
	EventPattern pulumi.StringPtrInput `pulumi:"eventPattern"`
	MetricName   pulumi.StringInput    `pulumi:"metricName"`
	UnitLabel    pulumi.StringPtrInput `pulumi:"unitLabel"`
	// The JSON path to reference the numerical metric value in the event.
	ValueKey pulumi.StringInput `pulumi:"valueKey"`
}

func (LaunchMetricDefinitionObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchMetricDefinitionObject)(nil)).Elem()
}

func (i LaunchMetricDefinitionObjectArgs) ToLaunchMetricDefinitionObjectOutput() LaunchMetricDefinitionObjectOutput {
	return i.ToLaunchMetricDefinitionObjectOutputWithContext(context.Background())
}

func (i LaunchMetricDefinitionObjectArgs) ToLaunchMetricDefinitionObjectOutputWithContext(ctx context.Context) LaunchMetricDefinitionObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchMetricDefinitionObjectOutput)
}

// LaunchMetricDefinitionObjectArrayInput is an input type that accepts LaunchMetricDefinitionObjectArray and LaunchMetricDefinitionObjectArrayOutput values.
// You can construct a concrete instance of `LaunchMetricDefinitionObjectArrayInput` via:
//
//	LaunchMetricDefinitionObjectArray{ LaunchMetricDefinitionObjectArgs{...} }
type LaunchMetricDefinitionObjectArrayInput interface {
	pulumi.Input

	ToLaunchMetricDefinitionObjectArrayOutput() LaunchMetricDefinitionObjectArrayOutput
	ToLaunchMetricDefinitionObjectArrayOutputWithContext(context.Context) LaunchMetricDefinitionObjectArrayOutput
}

type LaunchMetricDefinitionObjectArray []LaunchMetricDefinitionObjectInput

func (LaunchMetricDefinitionObjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LaunchMetricDefinitionObject)(nil)).Elem()
}

func (i LaunchMetricDefinitionObjectArray) ToLaunchMetricDefinitionObjectArrayOutput() LaunchMetricDefinitionObjectArrayOutput {
	return i.ToLaunchMetricDefinitionObjectArrayOutputWithContext(context.Background())
}

func (i LaunchMetricDefinitionObjectArray) ToLaunchMetricDefinitionObjectArrayOutputWithContext(ctx context.Context) LaunchMetricDefinitionObjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchMetricDefinitionObjectArrayOutput)
}

type LaunchMetricDefinitionObjectOutput struct{ *pulumi.OutputState }

func (LaunchMetricDefinitionObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchMetricDefinitionObject)(nil)).Elem()
}

func (o LaunchMetricDefinitionObjectOutput) ToLaunchMetricDefinitionObjectOutput() LaunchMetricDefinitionObjectOutput {
	return o
}

func (o LaunchMetricDefinitionObjectOutput) ToLaunchMetricDefinitionObjectOutputWithContext(ctx context.Context) LaunchMetricDefinitionObjectOutput {
	return o
}

// The JSON path to reference the entity id in the event.
func (o LaunchMetricDefinitionObjectOutput) EntityIdKey() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchMetricDefinitionObject) string { return v.EntityIdKey }).(pulumi.StringOutput)
}

// Event patterns have the same structure as the events they match. Rules use event patterns to select events. An event pattern either matches an event or it doesn't.
func (o LaunchMetricDefinitionObjectOutput) EventPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LaunchMetricDefinitionObject) *string { return v.EventPattern }).(pulumi.StringPtrOutput)
}

func (o LaunchMetricDefinitionObjectOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchMetricDefinitionObject) string { return v.MetricName }).(pulumi.StringOutput)
}

func (o LaunchMetricDefinitionObjectOutput) UnitLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LaunchMetricDefinitionObject) *string { return v.UnitLabel }).(pulumi.StringPtrOutput)
}

// The JSON path to reference the numerical metric value in the event.
func (o LaunchMetricDefinitionObjectOutput) ValueKey() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchMetricDefinitionObject) string { return v.ValueKey }).(pulumi.StringOutput)
}

type LaunchMetricDefinitionObjectArrayOutput struct{ *pulumi.OutputState }

func (LaunchMetricDefinitionObjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LaunchMetricDefinitionObject)(nil)).Elem()
}

func (o LaunchMetricDefinitionObjectArrayOutput) ToLaunchMetricDefinitionObjectArrayOutput() LaunchMetricDefinitionObjectArrayOutput {
	return o
}

func (o LaunchMetricDefinitionObjectArrayOutput) ToLaunchMetricDefinitionObjectArrayOutputWithContext(ctx context.Context) LaunchMetricDefinitionObjectArrayOutput {
	return o
}

func (o LaunchMetricDefinitionObjectArrayOutput) Index(i pulumi.IntInput) LaunchMetricDefinitionObjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LaunchMetricDefinitionObject {
		return vs[0].([]LaunchMetricDefinitionObject)[vs[1].(int)]
	}).(LaunchMetricDefinitionObjectOutput)
}

type LaunchSegmentOverride struct {
	EvaluationOrder int                   `pulumi:"evaluationOrder"`
	Segment         string                `pulumi:"segment"`
	Weights         []LaunchGroupToWeight `pulumi:"weights"`
}

// LaunchSegmentOverrideInput is an input type that accepts LaunchSegmentOverrideArgs and LaunchSegmentOverrideOutput values.
// You can construct a concrete instance of `LaunchSegmentOverrideInput` via:
//
//	LaunchSegmentOverrideArgs{...}
type LaunchSegmentOverrideInput interface {
	pulumi.Input

	ToLaunchSegmentOverrideOutput() LaunchSegmentOverrideOutput
	ToLaunchSegmentOverrideOutputWithContext(context.Context) LaunchSegmentOverrideOutput
}

type LaunchSegmentOverrideArgs struct {
	EvaluationOrder pulumi.IntInput               `pulumi:"evaluationOrder"`
	Segment         pulumi.StringInput            `pulumi:"segment"`
	Weights         LaunchGroupToWeightArrayInput `pulumi:"weights"`
}

func (LaunchSegmentOverrideArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchSegmentOverride)(nil)).Elem()
}

func (i LaunchSegmentOverrideArgs) ToLaunchSegmentOverrideOutput() LaunchSegmentOverrideOutput {
	return i.ToLaunchSegmentOverrideOutputWithContext(context.Background())
}

func (i LaunchSegmentOverrideArgs) ToLaunchSegmentOverrideOutputWithContext(ctx context.Context) LaunchSegmentOverrideOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchSegmentOverrideOutput)
}

// LaunchSegmentOverrideArrayInput is an input type that accepts LaunchSegmentOverrideArray and LaunchSegmentOverrideArrayOutput values.
// You can construct a concrete instance of `LaunchSegmentOverrideArrayInput` via:
//
//	LaunchSegmentOverrideArray{ LaunchSegmentOverrideArgs{...} }
type LaunchSegmentOverrideArrayInput interface {
	pulumi.Input

	ToLaunchSegmentOverrideArrayOutput() LaunchSegmentOverrideArrayOutput
	ToLaunchSegmentOverrideArrayOutputWithContext(context.Context) LaunchSegmentOverrideArrayOutput
}

type LaunchSegmentOverrideArray []LaunchSegmentOverrideInput

func (LaunchSegmentOverrideArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LaunchSegmentOverride)(nil)).Elem()
}

func (i LaunchSegmentOverrideArray) ToLaunchSegmentOverrideArrayOutput() LaunchSegmentOverrideArrayOutput {
	return i.ToLaunchSegmentOverrideArrayOutputWithContext(context.Background())
}

func (i LaunchSegmentOverrideArray) ToLaunchSegmentOverrideArrayOutputWithContext(ctx context.Context) LaunchSegmentOverrideArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchSegmentOverrideArrayOutput)
}

type LaunchSegmentOverrideOutput struct{ *pulumi.OutputState }

func (LaunchSegmentOverrideOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchSegmentOverride)(nil)).Elem()
}

func (o LaunchSegmentOverrideOutput) ToLaunchSegmentOverrideOutput() LaunchSegmentOverrideOutput {
	return o
}

func (o LaunchSegmentOverrideOutput) ToLaunchSegmentOverrideOutputWithContext(ctx context.Context) LaunchSegmentOverrideOutput {
	return o
}

func (o LaunchSegmentOverrideOutput) EvaluationOrder() pulumi.IntOutput {
	return o.ApplyT(func(v LaunchSegmentOverride) int { return v.EvaluationOrder }).(pulumi.IntOutput)
}

func (o LaunchSegmentOverrideOutput) Segment() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchSegmentOverride) string { return v.Segment }).(pulumi.StringOutput)
}

func (o LaunchSegmentOverrideOutput) Weights() LaunchGroupToWeightArrayOutput {
	return o.ApplyT(func(v LaunchSegmentOverride) []LaunchGroupToWeight { return v.Weights }).(LaunchGroupToWeightArrayOutput)
}

type LaunchSegmentOverrideArrayOutput struct{ *pulumi.OutputState }

func (LaunchSegmentOverrideArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LaunchSegmentOverride)(nil)).Elem()
}

func (o LaunchSegmentOverrideArrayOutput) ToLaunchSegmentOverrideArrayOutput() LaunchSegmentOverrideArrayOutput {
	return o
}

func (o LaunchSegmentOverrideArrayOutput) ToLaunchSegmentOverrideArrayOutputWithContext(ctx context.Context) LaunchSegmentOverrideArrayOutput {
	return o
}

func (o LaunchSegmentOverrideArrayOutput) Index(i pulumi.IntInput) LaunchSegmentOverrideOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LaunchSegmentOverride {
		return vs[0].([]LaunchSegmentOverride)[vs[1].(int)]
	}).(LaunchSegmentOverrideOutput)
}

type LaunchStepConfig struct {
	GroupWeights     []LaunchGroupToWeight   `pulumi:"groupWeights"`
	SegmentOverrides []LaunchSegmentOverride `pulumi:"segmentOverrides"`
	StartTime        string                  `pulumi:"startTime"`
}

// LaunchStepConfigInput is an input type that accepts LaunchStepConfigArgs and LaunchStepConfigOutput values.
// You can construct a concrete instance of `LaunchStepConfigInput` via:
//
//	LaunchStepConfigArgs{...}
type LaunchStepConfigInput interface {
	pulumi.Input

	ToLaunchStepConfigOutput() LaunchStepConfigOutput
	ToLaunchStepConfigOutputWithContext(context.Context) LaunchStepConfigOutput
}

type LaunchStepConfigArgs struct {
	GroupWeights     LaunchGroupToWeightArrayInput   `pulumi:"groupWeights"`
	SegmentOverrides LaunchSegmentOverrideArrayInput `pulumi:"segmentOverrides"`
	StartTime        pulumi.StringInput              `pulumi:"startTime"`
}

func (LaunchStepConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchStepConfig)(nil)).Elem()
}

func (i LaunchStepConfigArgs) ToLaunchStepConfigOutput() LaunchStepConfigOutput {
	return i.ToLaunchStepConfigOutputWithContext(context.Background())
}

func (i LaunchStepConfigArgs) ToLaunchStepConfigOutputWithContext(ctx context.Context) LaunchStepConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchStepConfigOutput)
}

// LaunchStepConfigArrayInput is an input type that accepts LaunchStepConfigArray and LaunchStepConfigArrayOutput values.
// You can construct a concrete instance of `LaunchStepConfigArrayInput` via:
//
//	LaunchStepConfigArray{ LaunchStepConfigArgs{...} }
type LaunchStepConfigArrayInput interface {
	pulumi.Input

	ToLaunchStepConfigArrayOutput() LaunchStepConfigArrayOutput
	ToLaunchStepConfigArrayOutputWithContext(context.Context) LaunchStepConfigArrayOutput
}

type LaunchStepConfigArray []LaunchStepConfigInput

func (LaunchStepConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LaunchStepConfig)(nil)).Elem()
}

func (i LaunchStepConfigArray) ToLaunchStepConfigArrayOutput() LaunchStepConfigArrayOutput {
	return i.ToLaunchStepConfigArrayOutputWithContext(context.Background())
}

func (i LaunchStepConfigArray) ToLaunchStepConfigArrayOutputWithContext(ctx context.Context) LaunchStepConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchStepConfigArrayOutput)
}

type LaunchStepConfigOutput struct{ *pulumi.OutputState }

func (LaunchStepConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchStepConfig)(nil)).Elem()
}

func (o LaunchStepConfigOutput) ToLaunchStepConfigOutput() LaunchStepConfigOutput {
	return o
}

func (o LaunchStepConfigOutput) ToLaunchStepConfigOutputWithContext(ctx context.Context) LaunchStepConfigOutput {
	return o
}

func (o LaunchStepConfigOutput) GroupWeights() LaunchGroupToWeightArrayOutput {
	return o.ApplyT(func(v LaunchStepConfig) []LaunchGroupToWeight { return v.GroupWeights }).(LaunchGroupToWeightArrayOutput)
}

func (o LaunchStepConfigOutput) SegmentOverrides() LaunchSegmentOverrideArrayOutput {
	return o.ApplyT(func(v LaunchStepConfig) []LaunchSegmentOverride { return v.SegmentOverrides }).(LaunchSegmentOverrideArrayOutput)
}

func (o LaunchStepConfigOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchStepConfig) string { return v.StartTime }).(pulumi.StringOutput)
}

type LaunchStepConfigArrayOutput struct{ *pulumi.OutputState }

func (LaunchStepConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LaunchStepConfig)(nil)).Elem()
}

func (o LaunchStepConfigArrayOutput) ToLaunchStepConfigArrayOutput() LaunchStepConfigArrayOutput {
	return o
}

func (o LaunchStepConfigArrayOutput) ToLaunchStepConfigArrayOutputWithContext(ctx context.Context) LaunchStepConfigArrayOutput {
	return o
}

func (o LaunchStepConfigArrayOutput) Index(i pulumi.IntInput) LaunchStepConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LaunchStepConfig {
		return vs[0].([]LaunchStepConfig)[vs[1].(int)]
	}).(LaunchStepConfigOutput)
}

// A key-value pair to associate with a resource.
type LaunchTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

type ProjectAppConfigResourceObject struct {
	ApplicationId string `pulumi:"applicationId"`
	EnvironmentId string `pulumi:"environmentId"`
}

// ProjectAppConfigResourceObjectInput is an input type that accepts ProjectAppConfigResourceObjectArgs and ProjectAppConfigResourceObjectOutput values.
// You can construct a concrete instance of `ProjectAppConfigResourceObjectInput` via:
//
//	ProjectAppConfigResourceObjectArgs{...}
type ProjectAppConfigResourceObjectInput interface {
	pulumi.Input

	ToProjectAppConfigResourceObjectOutput() ProjectAppConfigResourceObjectOutput
	ToProjectAppConfigResourceObjectOutputWithContext(context.Context) ProjectAppConfigResourceObjectOutput
}

type ProjectAppConfigResourceObjectArgs struct {
	ApplicationId pulumi.StringInput `pulumi:"applicationId"`
	EnvironmentId pulumi.StringInput `pulumi:"environmentId"`
}

func (ProjectAppConfigResourceObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAppConfigResourceObject)(nil)).Elem()
}

func (i ProjectAppConfigResourceObjectArgs) ToProjectAppConfigResourceObjectOutput() ProjectAppConfigResourceObjectOutput {
	return i.ToProjectAppConfigResourceObjectOutputWithContext(context.Background())
}

func (i ProjectAppConfigResourceObjectArgs) ToProjectAppConfigResourceObjectOutputWithContext(ctx context.Context) ProjectAppConfigResourceObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAppConfigResourceObjectOutput)
}

func (i ProjectAppConfigResourceObjectArgs) ToProjectAppConfigResourceObjectPtrOutput() ProjectAppConfigResourceObjectPtrOutput {
	return i.ToProjectAppConfigResourceObjectPtrOutputWithContext(context.Background())
}

func (i ProjectAppConfigResourceObjectArgs) ToProjectAppConfigResourceObjectPtrOutputWithContext(ctx context.Context) ProjectAppConfigResourceObjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAppConfigResourceObjectOutput).ToProjectAppConfigResourceObjectPtrOutputWithContext(ctx)
}

// ProjectAppConfigResourceObjectPtrInput is an input type that accepts ProjectAppConfigResourceObjectArgs, ProjectAppConfigResourceObjectPtr and ProjectAppConfigResourceObjectPtrOutput values.
// You can construct a concrete instance of `ProjectAppConfigResourceObjectPtrInput` via:
//
//	        ProjectAppConfigResourceObjectArgs{...}
//
//	or:
//
//	        nil
type ProjectAppConfigResourceObjectPtrInput interface {
	pulumi.Input

	ToProjectAppConfigResourceObjectPtrOutput() ProjectAppConfigResourceObjectPtrOutput
	ToProjectAppConfigResourceObjectPtrOutputWithContext(context.Context) ProjectAppConfigResourceObjectPtrOutput
}

type projectAppConfigResourceObjectPtrType ProjectAppConfigResourceObjectArgs

func ProjectAppConfigResourceObjectPtr(v *ProjectAppConfigResourceObjectArgs) ProjectAppConfigResourceObjectPtrInput {
	return (*projectAppConfigResourceObjectPtrType)(v)
}

func (*projectAppConfigResourceObjectPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAppConfigResourceObject)(nil)).Elem()
}

func (i *projectAppConfigResourceObjectPtrType) ToProjectAppConfigResourceObjectPtrOutput() ProjectAppConfigResourceObjectPtrOutput {
	return i.ToProjectAppConfigResourceObjectPtrOutputWithContext(context.Background())
}

func (i *projectAppConfigResourceObjectPtrType) ToProjectAppConfigResourceObjectPtrOutputWithContext(ctx context.Context) ProjectAppConfigResourceObjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAppConfigResourceObjectPtrOutput)
}

type ProjectAppConfigResourceObjectOutput struct{ *pulumi.OutputState }

func (ProjectAppConfigResourceObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAppConfigResourceObject)(nil)).Elem()
}

func (o ProjectAppConfigResourceObjectOutput) ToProjectAppConfigResourceObjectOutput() ProjectAppConfigResourceObjectOutput {
	return o
}

func (o ProjectAppConfigResourceObjectOutput) ToProjectAppConfigResourceObjectOutputWithContext(ctx context.Context) ProjectAppConfigResourceObjectOutput {
	return o
}

func (o ProjectAppConfigResourceObjectOutput) ToProjectAppConfigResourceObjectPtrOutput() ProjectAppConfigResourceObjectPtrOutput {
	return o.ToProjectAppConfigResourceObjectPtrOutputWithContext(context.Background())
}

func (o ProjectAppConfigResourceObjectOutput) ToProjectAppConfigResourceObjectPtrOutputWithContext(ctx context.Context) ProjectAppConfigResourceObjectPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectAppConfigResourceObject) *ProjectAppConfigResourceObject {
		return &v
	}).(ProjectAppConfigResourceObjectPtrOutput)
}

func (o ProjectAppConfigResourceObjectOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectAppConfigResourceObject) string { return v.ApplicationId }).(pulumi.StringOutput)
}

func (o ProjectAppConfigResourceObjectOutput) EnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectAppConfigResourceObject) string { return v.EnvironmentId }).(pulumi.StringOutput)
}

type ProjectAppConfigResourceObjectPtrOutput struct{ *pulumi.OutputState }

func (ProjectAppConfigResourceObjectPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectAppConfigResourceObject)(nil)).Elem()
}

func (o ProjectAppConfigResourceObjectPtrOutput) ToProjectAppConfigResourceObjectPtrOutput() ProjectAppConfigResourceObjectPtrOutput {
	return o
}

func (o ProjectAppConfigResourceObjectPtrOutput) ToProjectAppConfigResourceObjectPtrOutputWithContext(ctx context.Context) ProjectAppConfigResourceObjectPtrOutput {
	return o
}

func (o ProjectAppConfigResourceObjectPtrOutput) Elem() ProjectAppConfigResourceObjectOutput {
	return o.ApplyT(func(v *ProjectAppConfigResourceObject) ProjectAppConfigResourceObject {
		if v != nil {
			return *v
		}
		var ret ProjectAppConfigResourceObject
		return ret
	}).(ProjectAppConfigResourceObjectOutput)
}

func (o ProjectAppConfigResourceObjectPtrOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAppConfigResourceObject) *string {
		if v == nil {
			return nil
		}
		return &v.ApplicationId
	}).(pulumi.StringPtrOutput)
}

func (o ProjectAppConfigResourceObjectPtrOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectAppConfigResourceObject) *string {
		if v == nil {
			return nil
		}
		return &v.EnvironmentId
	}).(pulumi.StringPtrOutput)
}

// Destinations for data.
type ProjectDataDeliveryObject struct {
	LogGroup *string               `pulumi:"logGroup"`
	S3       *ProjectS3Destination `pulumi:"s3"`
}

// ProjectDataDeliveryObjectInput is an input type that accepts ProjectDataDeliveryObjectArgs and ProjectDataDeliveryObjectOutput values.
// You can construct a concrete instance of `ProjectDataDeliveryObjectInput` via:
//
//	ProjectDataDeliveryObjectArgs{...}
type ProjectDataDeliveryObjectInput interface {
	pulumi.Input

	ToProjectDataDeliveryObjectOutput() ProjectDataDeliveryObjectOutput
	ToProjectDataDeliveryObjectOutputWithContext(context.Context) ProjectDataDeliveryObjectOutput
}

// Destinations for data.
type ProjectDataDeliveryObjectArgs struct {
	LogGroup pulumi.StringPtrInput        `pulumi:"logGroup"`
	S3       ProjectS3DestinationPtrInput `pulumi:"s3"`
}

func (ProjectDataDeliveryObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectDataDeliveryObject)(nil)).Elem()
}

func (i ProjectDataDeliveryObjectArgs) ToProjectDataDeliveryObjectOutput() ProjectDataDeliveryObjectOutput {
	return i.ToProjectDataDeliveryObjectOutputWithContext(context.Background())
}

func (i ProjectDataDeliveryObjectArgs) ToProjectDataDeliveryObjectOutputWithContext(ctx context.Context) ProjectDataDeliveryObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectDataDeliveryObjectOutput)
}

func (i ProjectDataDeliveryObjectArgs) ToProjectDataDeliveryObjectPtrOutput() ProjectDataDeliveryObjectPtrOutput {
	return i.ToProjectDataDeliveryObjectPtrOutputWithContext(context.Background())
}

func (i ProjectDataDeliveryObjectArgs) ToProjectDataDeliveryObjectPtrOutputWithContext(ctx context.Context) ProjectDataDeliveryObjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectDataDeliveryObjectOutput).ToProjectDataDeliveryObjectPtrOutputWithContext(ctx)
}

// ProjectDataDeliveryObjectPtrInput is an input type that accepts ProjectDataDeliveryObjectArgs, ProjectDataDeliveryObjectPtr and ProjectDataDeliveryObjectPtrOutput values.
// You can construct a concrete instance of `ProjectDataDeliveryObjectPtrInput` via:
//
//	        ProjectDataDeliveryObjectArgs{...}
//
//	or:
//
//	        nil
type ProjectDataDeliveryObjectPtrInput interface {
	pulumi.Input

	ToProjectDataDeliveryObjectPtrOutput() ProjectDataDeliveryObjectPtrOutput
	ToProjectDataDeliveryObjectPtrOutputWithContext(context.Context) ProjectDataDeliveryObjectPtrOutput
}

type projectDataDeliveryObjectPtrType ProjectDataDeliveryObjectArgs

func ProjectDataDeliveryObjectPtr(v *ProjectDataDeliveryObjectArgs) ProjectDataDeliveryObjectPtrInput {
	return (*projectDataDeliveryObjectPtrType)(v)
}

func (*projectDataDeliveryObjectPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectDataDeliveryObject)(nil)).Elem()
}

func (i *projectDataDeliveryObjectPtrType) ToProjectDataDeliveryObjectPtrOutput() ProjectDataDeliveryObjectPtrOutput {
	return i.ToProjectDataDeliveryObjectPtrOutputWithContext(context.Background())
}

func (i *projectDataDeliveryObjectPtrType) ToProjectDataDeliveryObjectPtrOutputWithContext(ctx context.Context) ProjectDataDeliveryObjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectDataDeliveryObjectPtrOutput)
}

// Destinations for data.
type ProjectDataDeliveryObjectOutput struct{ *pulumi.OutputState }

func (ProjectDataDeliveryObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectDataDeliveryObject)(nil)).Elem()
}

func (o ProjectDataDeliveryObjectOutput) ToProjectDataDeliveryObjectOutput() ProjectDataDeliveryObjectOutput {
	return o
}

func (o ProjectDataDeliveryObjectOutput) ToProjectDataDeliveryObjectOutputWithContext(ctx context.Context) ProjectDataDeliveryObjectOutput {
	return o
}

func (o ProjectDataDeliveryObjectOutput) ToProjectDataDeliveryObjectPtrOutput() ProjectDataDeliveryObjectPtrOutput {
	return o.ToProjectDataDeliveryObjectPtrOutputWithContext(context.Background())
}

func (o ProjectDataDeliveryObjectOutput) ToProjectDataDeliveryObjectPtrOutputWithContext(ctx context.Context) ProjectDataDeliveryObjectPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectDataDeliveryObject) *ProjectDataDeliveryObject {
		return &v
	}).(ProjectDataDeliveryObjectPtrOutput)
}

func (o ProjectDataDeliveryObjectOutput) LogGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectDataDeliveryObject) *string { return v.LogGroup }).(pulumi.StringPtrOutput)
}

func (o ProjectDataDeliveryObjectOutput) S3() ProjectS3DestinationPtrOutput {
	return o.ApplyT(func(v ProjectDataDeliveryObject) *ProjectS3Destination { return v.S3 }).(ProjectS3DestinationPtrOutput)
}

type ProjectDataDeliveryObjectPtrOutput struct{ *pulumi.OutputState }

func (ProjectDataDeliveryObjectPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectDataDeliveryObject)(nil)).Elem()
}

func (o ProjectDataDeliveryObjectPtrOutput) ToProjectDataDeliveryObjectPtrOutput() ProjectDataDeliveryObjectPtrOutput {
	return o
}

func (o ProjectDataDeliveryObjectPtrOutput) ToProjectDataDeliveryObjectPtrOutputWithContext(ctx context.Context) ProjectDataDeliveryObjectPtrOutput {
	return o
}

func (o ProjectDataDeliveryObjectPtrOutput) Elem() ProjectDataDeliveryObjectOutput {
	return o.ApplyT(func(v *ProjectDataDeliveryObject) ProjectDataDeliveryObject {
		if v != nil {
			return *v
		}
		var ret ProjectDataDeliveryObject
		return ret
	}).(ProjectDataDeliveryObjectOutput)
}

func (o ProjectDataDeliveryObjectPtrOutput) LogGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectDataDeliveryObject) *string {
		if v == nil {
			return nil
		}
		return v.LogGroup
	}).(pulumi.StringPtrOutput)
}

func (o ProjectDataDeliveryObjectPtrOutput) S3() ProjectS3DestinationPtrOutput {
	return o.ApplyT(func(v *ProjectDataDeliveryObject) *ProjectS3Destination {
		if v == nil {
			return nil
		}
		return v.S3
	}).(ProjectS3DestinationPtrOutput)
}

type ProjectS3Destination struct {
	BucketName string  `pulumi:"bucketName"`
	Prefix     *string `pulumi:"prefix"`
}

// ProjectS3DestinationInput is an input type that accepts ProjectS3DestinationArgs and ProjectS3DestinationOutput values.
// You can construct a concrete instance of `ProjectS3DestinationInput` via:
//
//	ProjectS3DestinationArgs{...}
type ProjectS3DestinationInput interface {
	pulumi.Input

	ToProjectS3DestinationOutput() ProjectS3DestinationOutput
	ToProjectS3DestinationOutputWithContext(context.Context) ProjectS3DestinationOutput
}

type ProjectS3DestinationArgs struct {
	BucketName pulumi.StringInput    `pulumi:"bucketName"`
	Prefix     pulumi.StringPtrInput `pulumi:"prefix"`
}

func (ProjectS3DestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectS3Destination)(nil)).Elem()
}

func (i ProjectS3DestinationArgs) ToProjectS3DestinationOutput() ProjectS3DestinationOutput {
	return i.ToProjectS3DestinationOutputWithContext(context.Background())
}

func (i ProjectS3DestinationArgs) ToProjectS3DestinationOutputWithContext(ctx context.Context) ProjectS3DestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectS3DestinationOutput)
}

func (i ProjectS3DestinationArgs) ToProjectS3DestinationPtrOutput() ProjectS3DestinationPtrOutput {
	return i.ToProjectS3DestinationPtrOutputWithContext(context.Background())
}

func (i ProjectS3DestinationArgs) ToProjectS3DestinationPtrOutputWithContext(ctx context.Context) ProjectS3DestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectS3DestinationOutput).ToProjectS3DestinationPtrOutputWithContext(ctx)
}

// ProjectS3DestinationPtrInput is an input type that accepts ProjectS3DestinationArgs, ProjectS3DestinationPtr and ProjectS3DestinationPtrOutput values.
// You can construct a concrete instance of `ProjectS3DestinationPtrInput` via:
//
//	        ProjectS3DestinationArgs{...}
//
//	or:
//
//	        nil
type ProjectS3DestinationPtrInput interface {
	pulumi.Input

	ToProjectS3DestinationPtrOutput() ProjectS3DestinationPtrOutput
	ToProjectS3DestinationPtrOutputWithContext(context.Context) ProjectS3DestinationPtrOutput
}

type projectS3DestinationPtrType ProjectS3DestinationArgs

func ProjectS3DestinationPtr(v *ProjectS3DestinationArgs) ProjectS3DestinationPtrInput {
	return (*projectS3DestinationPtrType)(v)
}

func (*projectS3DestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectS3Destination)(nil)).Elem()
}

func (i *projectS3DestinationPtrType) ToProjectS3DestinationPtrOutput() ProjectS3DestinationPtrOutput {
	return i.ToProjectS3DestinationPtrOutputWithContext(context.Background())
}

func (i *projectS3DestinationPtrType) ToProjectS3DestinationPtrOutputWithContext(ctx context.Context) ProjectS3DestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectS3DestinationPtrOutput)
}

type ProjectS3DestinationOutput struct{ *pulumi.OutputState }

func (ProjectS3DestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectS3Destination)(nil)).Elem()
}

func (o ProjectS3DestinationOutput) ToProjectS3DestinationOutput() ProjectS3DestinationOutput {
	return o
}

func (o ProjectS3DestinationOutput) ToProjectS3DestinationOutputWithContext(ctx context.Context) ProjectS3DestinationOutput {
	return o
}

func (o ProjectS3DestinationOutput) ToProjectS3DestinationPtrOutput() ProjectS3DestinationPtrOutput {
	return o.ToProjectS3DestinationPtrOutputWithContext(context.Background())
}

func (o ProjectS3DestinationOutput) ToProjectS3DestinationPtrOutputWithContext(ctx context.Context) ProjectS3DestinationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectS3Destination) *ProjectS3Destination {
		return &v
	}).(ProjectS3DestinationPtrOutput)
}

func (o ProjectS3DestinationOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectS3Destination) string { return v.BucketName }).(pulumi.StringOutput)
}

func (o ProjectS3DestinationOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectS3Destination) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

type ProjectS3DestinationPtrOutput struct{ *pulumi.OutputState }

func (ProjectS3DestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectS3Destination)(nil)).Elem()
}

func (o ProjectS3DestinationPtrOutput) ToProjectS3DestinationPtrOutput() ProjectS3DestinationPtrOutput {
	return o
}

func (o ProjectS3DestinationPtrOutput) ToProjectS3DestinationPtrOutputWithContext(ctx context.Context) ProjectS3DestinationPtrOutput {
	return o
}

func (o ProjectS3DestinationPtrOutput) Elem() ProjectS3DestinationOutput {
	return o.ApplyT(func(v *ProjectS3Destination) ProjectS3Destination {
		if v != nil {
			return *v
		}
		var ret ProjectS3Destination
		return ret
	}).(ProjectS3DestinationOutput)
}

func (o ProjectS3DestinationPtrOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectS3Destination) *string {
		if v == nil {
			return nil
		}
		return &v.BucketName
	}).(pulumi.StringPtrOutput)
}

func (o ProjectS3DestinationPtrOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectS3Destination) *string {
		if v == nil {
			return nil
		}
		return v.Prefix
	}).(pulumi.StringPtrOutput)
}

// A key-value pair to associate with a resource.
type ProjectTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// A key-value pair to associate with a resource.
type SegmentTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentMetricGoalObjectInput)(nil)).Elem(), ExperimentMetricGoalObjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentMetricGoalObjectArrayInput)(nil)).Elem(), ExperimentMetricGoalObjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentOnlineAbConfigObjectInput)(nil)).Elem(), ExperimentOnlineAbConfigObjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentRunningStatusObjectInput)(nil)).Elem(), ExperimentRunningStatusObjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentRunningStatusObjectPtrInput)(nil)).Elem(), ExperimentRunningStatusObjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentTreatmentObjectInput)(nil)).Elem(), ExperimentTreatmentObjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentTreatmentObjectArrayInput)(nil)).Elem(), ExperimentTreatmentObjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentTreatmentToWeightInput)(nil)).Elem(), ExperimentTreatmentToWeightArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentTreatmentToWeightArrayInput)(nil)).Elem(), ExperimentTreatmentToWeightArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureEntityOverrideInput)(nil)).Elem(), FeatureEntityOverrideArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureEntityOverrideArrayInput)(nil)).Elem(), FeatureEntityOverrideArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureVariationObjectInput)(nil)).Elem(), FeatureVariationObjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureVariationObjectArrayInput)(nil)).Elem(), FeatureVariationObjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchExecutionStatusObjectInput)(nil)).Elem(), LaunchExecutionStatusObjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchExecutionStatusObjectPtrInput)(nil)).Elem(), LaunchExecutionStatusObjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchGroupObjectInput)(nil)).Elem(), LaunchGroupObjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchGroupObjectArrayInput)(nil)).Elem(), LaunchGroupObjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchGroupToWeightInput)(nil)).Elem(), LaunchGroupToWeightArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchGroupToWeightArrayInput)(nil)).Elem(), LaunchGroupToWeightArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchMetricDefinitionObjectInput)(nil)).Elem(), LaunchMetricDefinitionObjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchMetricDefinitionObjectArrayInput)(nil)).Elem(), LaunchMetricDefinitionObjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchSegmentOverrideInput)(nil)).Elem(), LaunchSegmentOverrideArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchSegmentOverrideArrayInput)(nil)).Elem(), LaunchSegmentOverrideArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchStepConfigInput)(nil)).Elem(), LaunchStepConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchStepConfigArrayInput)(nil)).Elem(), LaunchStepConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAppConfigResourceObjectInput)(nil)).Elem(), ProjectAppConfigResourceObjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAppConfigResourceObjectPtrInput)(nil)).Elem(), ProjectAppConfigResourceObjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectDataDeliveryObjectInput)(nil)).Elem(), ProjectDataDeliveryObjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectDataDeliveryObjectPtrInput)(nil)).Elem(), ProjectDataDeliveryObjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectS3DestinationInput)(nil)).Elem(), ProjectS3DestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectS3DestinationPtrInput)(nil)).Elem(), ProjectS3DestinationArgs{})
	pulumi.RegisterOutputType(ExperimentMetricGoalObjectOutput{})
	pulumi.RegisterOutputType(ExperimentMetricGoalObjectArrayOutput{})
	pulumi.RegisterOutputType(ExperimentOnlineAbConfigObjectOutput{})
	pulumi.RegisterOutputType(ExperimentOnlineAbConfigObjectPtrOutput{})
	pulumi.RegisterOutputType(ExperimentRunningStatusObjectOutput{})
	pulumi.RegisterOutputType(ExperimentRunningStatusObjectPtrOutput{})
	pulumi.RegisterOutputType(ExperimentTreatmentObjectOutput{})
	pulumi.RegisterOutputType(ExperimentTreatmentObjectArrayOutput{})
	pulumi.RegisterOutputType(ExperimentTreatmentToWeightOutput{})
	pulumi.RegisterOutputType(ExperimentTreatmentToWeightArrayOutput{})
	pulumi.RegisterOutputType(FeatureEntityOverrideOutput{})
	pulumi.RegisterOutputType(FeatureEntityOverrideArrayOutput{})
	pulumi.RegisterOutputType(FeatureVariationObjectOutput{})
	pulumi.RegisterOutputType(FeatureVariationObjectArrayOutput{})
	pulumi.RegisterOutputType(LaunchExecutionStatusObjectOutput{})
	pulumi.RegisterOutputType(LaunchExecutionStatusObjectPtrOutput{})
	pulumi.RegisterOutputType(LaunchGroupObjectOutput{})
	pulumi.RegisterOutputType(LaunchGroupObjectArrayOutput{})
	pulumi.RegisterOutputType(LaunchGroupToWeightOutput{})
	pulumi.RegisterOutputType(LaunchGroupToWeightArrayOutput{})
	pulumi.RegisterOutputType(LaunchMetricDefinitionObjectOutput{})
	pulumi.RegisterOutputType(LaunchMetricDefinitionObjectArrayOutput{})
	pulumi.RegisterOutputType(LaunchSegmentOverrideOutput{})
	pulumi.RegisterOutputType(LaunchSegmentOverrideArrayOutput{})
	pulumi.RegisterOutputType(LaunchStepConfigOutput{})
	pulumi.RegisterOutputType(LaunchStepConfigArrayOutput{})
	pulumi.RegisterOutputType(ProjectAppConfigResourceObjectOutput{})
	pulumi.RegisterOutputType(ProjectAppConfigResourceObjectPtrOutput{})
	pulumi.RegisterOutputType(ProjectDataDeliveryObjectOutput{})
	pulumi.RegisterOutputType(ProjectDataDeliveryObjectPtrOutput{})
	pulumi.RegisterOutputType(ProjectS3DestinationOutput{})
	pulumi.RegisterOutputType(ProjectS3DestinationPtrOutput{})
}
