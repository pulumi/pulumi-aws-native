// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package omics

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::Omics::AnnotationStore Resource Type
type AnnotationStore struct {
	pulumi.CustomResourceState

	// The store's ID.
	AwsId pulumi.StringOutput `pulumi:"awsId"`
	// When the store was created.
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	// A description for the store.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the Annotation Store.
	Name pulumi.StringOutput `pulumi:"name"`
	// The genome reference for the store's annotations.
	Reference AnnotationStoreReferenceItemPtrOutput `pulumi:"reference"`
	// The store's server-side encryption (SSE) settings.
	SseConfig AnnotationStoreSseConfigPtrOutput `pulumi:"sseConfig"`
	// The store's status.
	Status AnnotationStoreStoreStatusOutput `pulumi:"status"`
	// The store's status message.
	StatusMessage pulumi.StringOutput `pulumi:"statusMessage"`
	// The store's ARN.
	StoreArn pulumi.StringOutput `pulumi:"storeArn"`
	// The annotation file format of the store.
	StoreFormat AnnotationStoreStoreFormatOutput `pulumi:"storeFormat"`
	// File parsing options for the annotation store.
	StoreOptions AnnotationStoreStoreOptionsPropertiesPtrOutput `pulumi:"storeOptions"`
	// The store's size in bytes.
	StoreSizeBytes pulumi.Float64Output `pulumi:"storeSizeBytes"`
	// Tags for the store.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// When the store was updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewAnnotationStore registers a new resource with the given unique name, arguments, and options.
func NewAnnotationStore(ctx *pulumi.Context,
	name string, args *AnnotationStoreArgs, opts ...pulumi.ResourceOption) (*AnnotationStore, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.StoreFormat == nil {
		return nil, errors.New("invalid value for required argument 'StoreFormat'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"name",
		"reference",
		"sseConfig",
		"storeFormat",
		"storeOptions",
		"tags.*",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AnnotationStore
	err := ctx.RegisterResource("aws-native:omics:AnnotationStore", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAnnotationStore gets an existing AnnotationStore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAnnotationStore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AnnotationStoreState, opts ...pulumi.ResourceOption) (*AnnotationStore, error) {
	var resource AnnotationStore
	err := ctx.ReadResource("aws-native:omics:AnnotationStore", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AnnotationStore resources.
type annotationStoreState struct {
}

type AnnotationStoreState struct {
}

func (AnnotationStoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*annotationStoreState)(nil)).Elem()
}

type annotationStoreArgs struct {
	// A description for the store.
	Description *string `pulumi:"description"`
	// The name of the Annotation Store.
	Name *string `pulumi:"name"`
	// The genome reference for the store's annotations.
	Reference *AnnotationStoreReferenceItem `pulumi:"reference"`
	// The store's server-side encryption (SSE) settings.
	SseConfig *AnnotationStoreSseConfig `pulumi:"sseConfig"`
	// The annotation file format of the store.
	StoreFormat AnnotationStoreStoreFormat `pulumi:"storeFormat"`
	// File parsing options for the annotation store.
	StoreOptions *AnnotationStoreStoreOptionsProperties `pulumi:"storeOptions"`
	// Tags for the store.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a AnnotationStore resource.
type AnnotationStoreArgs struct {
	// A description for the store.
	Description pulumi.StringPtrInput
	// The name of the Annotation Store.
	Name pulumi.StringPtrInput
	// The genome reference for the store's annotations.
	Reference AnnotationStoreReferenceItemPtrInput
	// The store's server-side encryption (SSE) settings.
	SseConfig AnnotationStoreSseConfigPtrInput
	// The annotation file format of the store.
	StoreFormat AnnotationStoreStoreFormatInput
	// File parsing options for the annotation store.
	StoreOptions AnnotationStoreStoreOptionsPropertiesPtrInput
	// Tags for the store.
	Tags pulumi.StringMapInput
}

func (AnnotationStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*annotationStoreArgs)(nil)).Elem()
}

type AnnotationStoreInput interface {
	pulumi.Input

	ToAnnotationStoreOutput() AnnotationStoreOutput
	ToAnnotationStoreOutputWithContext(ctx context.Context) AnnotationStoreOutput
}

func (*AnnotationStore) ElementType() reflect.Type {
	return reflect.TypeOf((**AnnotationStore)(nil)).Elem()
}

func (i *AnnotationStore) ToAnnotationStoreOutput() AnnotationStoreOutput {
	return i.ToAnnotationStoreOutputWithContext(context.Background())
}

func (i *AnnotationStore) ToAnnotationStoreOutputWithContext(ctx context.Context) AnnotationStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnnotationStoreOutput)
}

type AnnotationStoreOutput struct{ *pulumi.OutputState }

func (AnnotationStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnnotationStore)(nil)).Elem()
}

func (o AnnotationStoreOutput) ToAnnotationStoreOutput() AnnotationStoreOutput {
	return o
}

func (o AnnotationStoreOutput) ToAnnotationStoreOutputWithContext(ctx context.Context) AnnotationStoreOutput {
	return o
}

// The store's ID.
func (o AnnotationStoreOutput) AwsId() pulumi.StringOutput {
	return o.ApplyT(func(v *AnnotationStore) pulumi.StringOutput { return v.AwsId }).(pulumi.StringOutput)
}

// When the store was created.
func (o AnnotationStoreOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AnnotationStore) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

// A description for the store.
func (o AnnotationStoreOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnnotationStore) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the Annotation Store.
func (o AnnotationStoreOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AnnotationStore) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The genome reference for the store's annotations.
func (o AnnotationStoreOutput) Reference() AnnotationStoreReferenceItemPtrOutput {
	return o.ApplyT(func(v *AnnotationStore) AnnotationStoreReferenceItemPtrOutput { return v.Reference }).(AnnotationStoreReferenceItemPtrOutput)
}

// The store's server-side encryption (SSE) settings.
func (o AnnotationStoreOutput) SseConfig() AnnotationStoreSseConfigPtrOutput {
	return o.ApplyT(func(v *AnnotationStore) AnnotationStoreSseConfigPtrOutput { return v.SseConfig }).(AnnotationStoreSseConfigPtrOutput)
}

// The store's status.
func (o AnnotationStoreOutput) Status() AnnotationStoreStoreStatusOutput {
	return o.ApplyT(func(v *AnnotationStore) AnnotationStoreStoreStatusOutput { return v.Status }).(AnnotationStoreStoreStatusOutput)
}

// The store's status message.
func (o AnnotationStoreOutput) StatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v *AnnotationStore) pulumi.StringOutput { return v.StatusMessage }).(pulumi.StringOutput)
}

// The store's ARN.
func (o AnnotationStoreOutput) StoreArn() pulumi.StringOutput {
	return o.ApplyT(func(v *AnnotationStore) pulumi.StringOutput { return v.StoreArn }).(pulumi.StringOutput)
}

// The annotation file format of the store.
func (o AnnotationStoreOutput) StoreFormat() AnnotationStoreStoreFormatOutput {
	return o.ApplyT(func(v *AnnotationStore) AnnotationStoreStoreFormatOutput { return v.StoreFormat }).(AnnotationStoreStoreFormatOutput)
}

// File parsing options for the annotation store.
func (o AnnotationStoreOutput) StoreOptions() AnnotationStoreStoreOptionsPropertiesPtrOutput {
	return o.ApplyT(func(v *AnnotationStore) AnnotationStoreStoreOptionsPropertiesPtrOutput { return v.StoreOptions }).(AnnotationStoreStoreOptionsPropertiesPtrOutput)
}

// The store's size in bytes.
func (o AnnotationStoreOutput) StoreSizeBytes() pulumi.Float64Output {
	return o.ApplyT(func(v *AnnotationStore) pulumi.Float64Output { return v.StoreSizeBytes }).(pulumi.Float64Output)
}

// Tags for the store.
func (o AnnotationStoreOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AnnotationStore) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// When the store was updated.
func (o AnnotationStoreOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AnnotationStore) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AnnotationStoreInput)(nil)).Elem(), &AnnotationStore{})
	pulumi.RegisterOutputType(AnnotationStoreOutput{})
}
