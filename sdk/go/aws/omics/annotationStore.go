// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package omics

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::Omics::AnnotationStore Resource Type
type AnnotationStore struct {
	pulumi.CustomResourceState

	CreationTime   pulumi.StringOutput                            `pulumi:"creationTime"`
	Description    pulumi.StringPtrOutput                         `pulumi:"description"`
	Name           pulumi.StringOutput                            `pulumi:"name"`
	Reference      AnnotationStoreReferenceItemPtrOutput          `pulumi:"reference"`
	SseConfig      AnnotationStoreSseConfigPtrOutput              `pulumi:"sseConfig"`
	Status         AnnotationStoreStoreStatusOutput               `pulumi:"status"`
	StatusMessage  pulumi.StringOutput                            `pulumi:"statusMessage"`
	StoreArn       pulumi.StringOutput                            `pulumi:"storeArn"`
	StoreFormat    AnnotationStoreStoreFormatOutput               `pulumi:"storeFormat"`
	StoreOptions   AnnotationStoreStoreOptionsPropertiesPtrOutput `pulumi:"storeOptions"`
	StoreSizeBytes pulumi.Float64Output                           `pulumi:"storeSizeBytes"`
	Tags           AnnotationStoreTagMapPtrOutput                 `pulumi:"tags"`
	UpdateTime     pulumi.StringOutput                            `pulumi:"updateTime"`
}

// NewAnnotationStore registers a new resource with the given unique name, arguments, and options.
func NewAnnotationStore(ctx *pulumi.Context,
	name string, args *AnnotationStoreArgs, opts ...pulumi.ResourceOption) (*AnnotationStore, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.StoreFormat == nil {
		return nil, errors.New("invalid value for required argument 'StoreFormat'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AnnotationStore
	err := ctx.RegisterResource("aws-native:omics:AnnotationStore", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAnnotationStore gets an existing AnnotationStore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAnnotationStore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AnnotationStoreState, opts ...pulumi.ResourceOption) (*AnnotationStore, error) {
	var resource AnnotationStore
	err := ctx.ReadResource("aws-native:omics:AnnotationStore", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AnnotationStore resources.
type annotationStoreState struct {
}

type AnnotationStoreState struct {
}

func (AnnotationStoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*annotationStoreState)(nil)).Elem()
}

type annotationStoreArgs struct {
	Description  *string                                `pulumi:"description"`
	Name         *string                                `pulumi:"name"`
	Reference    *AnnotationStoreReferenceItem          `pulumi:"reference"`
	SseConfig    *AnnotationStoreSseConfig              `pulumi:"sseConfig"`
	StoreFormat  AnnotationStoreStoreFormat             `pulumi:"storeFormat"`
	StoreOptions *AnnotationStoreStoreOptionsProperties `pulumi:"storeOptions"`
	Tags         *AnnotationStoreTagMap                 `pulumi:"tags"`
}

// The set of arguments for constructing a AnnotationStore resource.
type AnnotationStoreArgs struct {
	Description  pulumi.StringPtrInput
	Name         pulumi.StringPtrInput
	Reference    AnnotationStoreReferenceItemPtrInput
	SseConfig    AnnotationStoreSseConfigPtrInput
	StoreFormat  AnnotationStoreStoreFormatInput
	StoreOptions AnnotationStoreStoreOptionsPropertiesPtrInput
	Tags         AnnotationStoreTagMapPtrInput
}

func (AnnotationStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*annotationStoreArgs)(nil)).Elem()
}

type AnnotationStoreInput interface {
	pulumi.Input

	ToAnnotationStoreOutput() AnnotationStoreOutput
	ToAnnotationStoreOutputWithContext(ctx context.Context) AnnotationStoreOutput
}

func (*AnnotationStore) ElementType() reflect.Type {
	return reflect.TypeOf((**AnnotationStore)(nil)).Elem()
}

func (i *AnnotationStore) ToAnnotationStoreOutput() AnnotationStoreOutput {
	return i.ToAnnotationStoreOutputWithContext(context.Background())
}

func (i *AnnotationStore) ToAnnotationStoreOutputWithContext(ctx context.Context) AnnotationStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnnotationStoreOutput)
}

type AnnotationStoreOutput struct{ *pulumi.OutputState }

func (AnnotationStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnnotationStore)(nil)).Elem()
}

func (o AnnotationStoreOutput) ToAnnotationStoreOutput() AnnotationStoreOutput {
	return o
}

func (o AnnotationStoreOutput) ToAnnotationStoreOutputWithContext(ctx context.Context) AnnotationStoreOutput {
	return o
}

func (o AnnotationStoreOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AnnotationStore) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

func (o AnnotationStoreOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnnotationStore) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o AnnotationStoreOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AnnotationStore) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o AnnotationStoreOutput) Reference() AnnotationStoreReferenceItemPtrOutput {
	return o.ApplyT(func(v *AnnotationStore) AnnotationStoreReferenceItemPtrOutput { return v.Reference }).(AnnotationStoreReferenceItemPtrOutput)
}

func (o AnnotationStoreOutput) SseConfig() AnnotationStoreSseConfigPtrOutput {
	return o.ApplyT(func(v *AnnotationStore) AnnotationStoreSseConfigPtrOutput { return v.SseConfig }).(AnnotationStoreSseConfigPtrOutput)
}

func (o AnnotationStoreOutput) Status() AnnotationStoreStoreStatusOutput {
	return o.ApplyT(func(v *AnnotationStore) AnnotationStoreStoreStatusOutput { return v.Status }).(AnnotationStoreStoreStatusOutput)
}

func (o AnnotationStoreOutput) StatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v *AnnotationStore) pulumi.StringOutput { return v.StatusMessage }).(pulumi.StringOutput)
}

func (o AnnotationStoreOutput) StoreArn() pulumi.StringOutput {
	return o.ApplyT(func(v *AnnotationStore) pulumi.StringOutput { return v.StoreArn }).(pulumi.StringOutput)
}

func (o AnnotationStoreOutput) StoreFormat() AnnotationStoreStoreFormatOutput {
	return o.ApplyT(func(v *AnnotationStore) AnnotationStoreStoreFormatOutput { return v.StoreFormat }).(AnnotationStoreStoreFormatOutput)
}

func (o AnnotationStoreOutput) StoreOptions() AnnotationStoreStoreOptionsPropertiesPtrOutput {
	return o.ApplyT(func(v *AnnotationStore) AnnotationStoreStoreOptionsPropertiesPtrOutput { return v.StoreOptions }).(AnnotationStoreStoreOptionsPropertiesPtrOutput)
}

func (o AnnotationStoreOutput) StoreSizeBytes() pulumi.Float64Output {
	return o.ApplyT(func(v *AnnotationStore) pulumi.Float64Output { return v.StoreSizeBytes }).(pulumi.Float64Output)
}

func (o AnnotationStoreOutput) Tags() AnnotationStoreTagMapPtrOutput {
	return o.ApplyT(func(v *AnnotationStore) AnnotationStoreTagMapPtrOutput { return v.Tags }).(AnnotationStoreTagMapPtrOutput)
}

func (o AnnotationStoreOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AnnotationStore) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AnnotationStoreInput)(nil)).Elem(), &AnnotationStore{})
	pulumi.RegisterOutputType(AnnotationStoreOutput{})
}
