// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package omics

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::Omics::WorkflowVersion Resource Type.
type WorkflowVersion struct {
	pulumi.CustomResourceState

	Accelerators WorkflowVersionAcceleratorsPtrOutput `pulumi:"accelerators"`
	// ARN of the workflow version.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The creation time of the workflow version.
	CreationTime  pulumi.StringOutput    `pulumi:"creationTime"`
	DefinitionUri pulumi.StringPtrOutput `pulumi:"definitionUri"`
	// The description of the workflow version.
	Description       pulumi.StringPtrOutput                    `pulumi:"description"`
	Engine            WorkflowVersionWorkflowEnginePtrOutput    `pulumi:"engine"`
	Main              pulumi.StringPtrOutput                    `pulumi:"main"`
	ParameterTemplate WorkflowVersionWorkflowParameterMapOutput `pulumi:"parameterTemplate"`
	// The status of the workflow version.
	Status          WorkflowVersionWorkflowStatusOutput `pulumi:"status"`
	StorageCapacity pulumi.Float64PtrOutput             `pulumi:"storageCapacity"`
	StorageType     WorkflowVersionStorageTypePtrOutput `pulumi:"storageType"`
	Tags            pulumi.StringMapOutput              `pulumi:"tags"`
	// The type of the workflow version.
	Type WorkflowVersionWorkflowTypeOutput `pulumi:"type"`
	Uuid pulumi.StringOutput               `pulumi:"uuid"`
	// The name of the workflow version.
	VersionName           pulumi.StringOutput    `pulumi:"versionName"`
	WorkflowBucketOwnerId pulumi.StringPtrOutput `pulumi:"workflowBucketOwnerId"`
	// The workflow's ID.
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowVersion registers a new resource with the given unique name, arguments, and options.
func NewWorkflowVersion(ctx *pulumi.Context,
	name string, args *WorkflowVersionArgs, opts ...pulumi.ResourceOption) (*WorkflowVersion, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"accelerators",
		"definitionUri",
		"engine",
		"main",
		"parameterTemplate.*",
		"versionName",
		"workflowBucketOwnerId",
		"workflowId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowVersion
	err := ctx.RegisterResource("aws-native:omics:WorkflowVersion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowVersion gets an existing WorkflowVersion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowVersion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowVersionState, opts ...pulumi.ResourceOption) (*WorkflowVersion, error) {
	var resource WorkflowVersion
	err := ctx.ReadResource("aws-native:omics:WorkflowVersion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowVersion resources.
type workflowVersionState struct {
}

type WorkflowVersionState struct {
}

func (WorkflowVersionState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowVersionState)(nil)).Elem()
}

type workflowVersionArgs struct {
	Accelerators  *WorkflowVersionAccelerators `pulumi:"accelerators"`
	DefinitionUri *string                      `pulumi:"definitionUri"`
	// The description of the workflow version.
	Description       *string                                     `pulumi:"description"`
	Engine            *WorkflowVersionWorkflowEngine              `pulumi:"engine"`
	Main              *string                                     `pulumi:"main"`
	ParameterTemplate map[string]WorkflowVersionWorkflowParameter `pulumi:"parameterTemplate"`
	StorageCapacity   *float64                                    `pulumi:"storageCapacity"`
	StorageType       *WorkflowVersionStorageType                 `pulumi:"storageType"`
	Tags              map[string]string                           `pulumi:"tags"`
	// The name of the workflow version.
	VersionName           *string `pulumi:"versionName"`
	WorkflowBucketOwnerId *string `pulumi:"workflowBucketOwnerId"`
	// The workflow's ID.
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowVersion resource.
type WorkflowVersionArgs struct {
	Accelerators  WorkflowVersionAcceleratorsPtrInput
	DefinitionUri pulumi.StringPtrInput
	// The description of the workflow version.
	Description       pulumi.StringPtrInput
	Engine            WorkflowVersionWorkflowEnginePtrInput
	Main              pulumi.StringPtrInput
	ParameterTemplate WorkflowVersionWorkflowParameterMapInput
	StorageCapacity   pulumi.Float64PtrInput
	StorageType       WorkflowVersionStorageTypePtrInput
	Tags              pulumi.StringMapInput
	// The name of the workflow version.
	VersionName           pulumi.StringPtrInput
	WorkflowBucketOwnerId pulumi.StringPtrInput
	// The workflow's ID.
	WorkflowId pulumi.StringInput
}

func (WorkflowVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowVersionArgs)(nil)).Elem()
}

type WorkflowVersionInput interface {
	pulumi.Input

	ToWorkflowVersionOutput() WorkflowVersionOutput
	ToWorkflowVersionOutputWithContext(ctx context.Context) WorkflowVersionOutput
}

func (*WorkflowVersion) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowVersion)(nil)).Elem()
}

func (i *WorkflowVersion) ToWorkflowVersionOutput() WorkflowVersionOutput {
	return i.ToWorkflowVersionOutputWithContext(context.Background())
}

func (i *WorkflowVersion) ToWorkflowVersionOutputWithContext(ctx context.Context) WorkflowVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowVersionOutput)
}

type WorkflowVersionOutput struct{ *pulumi.OutputState }

func (WorkflowVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowVersion)(nil)).Elem()
}

func (o WorkflowVersionOutput) ToWorkflowVersionOutput() WorkflowVersionOutput {
	return o
}

func (o WorkflowVersionOutput) ToWorkflowVersionOutputWithContext(ctx context.Context) WorkflowVersionOutput {
	return o
}

func (o WorkflowVersionOutput) Accelerators() WorkflowVersionAcceleratorsPtrOutput {
	return o.ApplyT(func(v *WorkflowVersion) WorkflowVersionAcceleratorsPtrOutput { return v.Accelerators }).(WorkflowVersionAcceleratorsPtrOutput)
}

// ARN of the workflow version.
func (o WorkflowVersionOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowVersion) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The creation time of the workflow version.
func (o WorkflowVersionOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowVersion) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

func (o WorkflowVersionOutput) DefinitionUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowVersion) pulumi.StringPtrOutput { return v.DefinitionUri }).(pulumi.StringPtrOutput)
}

// The description of the workflow version.
func (o WorkflowVersionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowVersion) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o WorkflowVersionOutput) Engine() WorkflowVersionWorkflowEnginePtrOutput {
	return o.ApplyT(func(v *WorkflowVersion) WorkflowVersionWorkflowEnginePtrOutput { return v.Engine }).(WorkflowVersionWorkflowEnginePtrOutput)
}

func (o WorkflowVersionOutput) Main() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowVersion) pulumi.StringPtrOutput { return v.Main }).(pulumi.StringPtrOutput)
}

func (o WorkflowVersionOutput) ParameterTemplate() WorkflowVersionWorkflowParameterMapOutput {
	return o.ApplyT(func(v *WorkflowVersion) WorkflowVersionWorkflowParameterMapOutput { return v.ParameterTemplate }).(WorkflowVersionWorkflowParameterMapOutput)
}

// The status of the workflow version.
func (o WorkflowVersionOutput) Status() WorkflowVersionWorkflowStatusOutput {
	return o.ApplyT(func(v *WorkflowVersion) WorkflowVersionWorkflowStatusOutput { return v.Status }).(WorkflowVersionWorkflowStatusOutput)
}

func (o WorkflowVersionOutput) StorageCapacity() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *WorkflowVersion) pulumi.Float64PtrOutput { return v.StorageCapacity }).(pulumi.Float64PtrOutput)
}

func (o WorkflowVersionOutput) StorageType() WorkflowVersionStorageTypePtrOutput {
	return o.ApplyT(func(v *WorkflowVersion) WorkflowVersionStorageTypePtrOutput { return v.StorageType }).(WorkflowVersionStorageTypePtrOutput)
}

func (o WorkflowVersionOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *WorkflowVersion) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the workflow version.
func (o WorkflowVersionOutput) Type() WorkflowVersionWorkflowTypeOutput {
	return o.ApplyT(func(v *WorkflowVersion) WorkflowVersionWorkflowTypeOutput { return v.Type }).(WorkflowVersionWorkflowTypeOutput)
}

func (o WorkflowVersionOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowVersion) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

// The name of the workflow version.
func (o WorkflowVersionOutput) VersionName() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowVersion) pulumi.StringOutput { return v.VersionName }).(pulumi.StringOutput)
}

func (o WorkflowVersionOutput) WorkflowBucketOwnerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowVersion) pulumi.StringPtrOutput { return v.WorkflowBucketOwnerId }).(pulumi.StringPtrOutput)
}

// The workflow's ID.
func (o WorkflowVersionOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowVersion) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowVersionInput)(nil)).Elem(), &WorkflowVersion{})
	pulumi.RegisterOutputType(WorkflowVersionOutput{})
}
