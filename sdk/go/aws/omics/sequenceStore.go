// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package omics

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Omics::SequenceStore
type SequenceStore struct {
	pulumi.CustomResourceState

	// Location of the access logs.
	AccessLogLocation pulumi.StringPtrOutput `pulumi:"accessLogLocation"`
	// The store's ARN.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// When the store was created.
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	// A description for the store.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The algorithm family of the ETag.
	ETagAlgorithmFamily SequenceStoreETagAlgorithmFamilyPtrOutput `pulumi:"eTagAlgorithmFamily"`
	// An S3 location that is used to store files that have failed a direct upload.
	FallbackLocation pulumi.StringPtrOutput `pulumi:"fallbackLocation"`
	// A name for the store.
	Name pulumi.StringOutput `pulumi:"name"`
	// The tags keys to propagate to the S3 objects associated with read sets in the sequence store.
	PropagatedSetLevelTags pulumi.StringArrayOutput `pulumi:"propagatedSetLevelTags"`
	// This is ARN of the access point associated with the S3 bucket storing read sets.
	S3AccessPointArn pulumi.StringOutput `pulumi:"s3AccessPointArn"`
	// The resource policy that controls S3 access on the store
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Omics::SequenceStore` for more information about the expected schema for this property.
	S3AccessPolicy pulumi.AnyOutput `pulumi:"s3AccessPolicy"`
	// The S3 URI of the sequence store.
	S3Uri pulumi.StringOutput `pulumi:"s3Uri"`
	// The store's ID.
	SequenceStoreId pulumi.StringOutput `pulumi:"sequenceStoreId"`
	// Server-side encryption (SSE) settings for the store.
	SseConfig SequenceStoreSseConfigPtrOutput `pulumi:"sseConfig"`
	// Status of the sequence store.
	Status SequenceStoreStatusOutput `pulumi:"status"`
	// The status message of the sequence store.
	StatusMessage pulumi.StringOutput `pulumi:"statusMessage"`
	// Tags for the store.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The last-updated time of the sequence store.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewSequenceStore registers a new resource with the given unique name, arguments, and options.
func NewSequenceStore(ctx *pulumi.Context,
	name string, args *SequenceStoreArgs, opts ...pulumi.ResourceOption) (*SequenceStore, error) {
	if args == nil {
		args = &SequenceStoreArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"eTagAlgorithmFamily",
		"sseConfig",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SequenceStore
	err := ctx.RegisterResource("aws-native:omics:SequenceStore", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSequenceStore gets an existing SequenceStore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSequenceStore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SequenceStoreState, opts ...pulumi.ResourceOption) (*SequenceStore, error) {
	var resource SequenceStore
	err := ctx.ReadResource("aws-native:omics:SequenceStore", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SequenceStore resources.
type sequenceStoreState struct {
}

type SequenceStoreState struct {
}

func (SequenceStoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*sequenceStoreState)(nil)).Elem()
}

type sequenceStoreArgs struct {
	// Location of the access logs.
	AccessLogLocation *string `pulumi:"accessLogLocation"`
	// A description for the store.
	Description *string `pulumi:"description"`
	// The algorithm family of the ETag.
	ETagAlgorithmFamily *SequenceStoreETagAlgorithmFamily `pulumi:"eTagAlgorithmFamily"`
	// An S3 location that is used to store files that have failed a direct upload.
	FallbackLocation *string `pulumi:"fallbackLocation"`
	// A name for the store.
	Name *string `pulumi:"name"`
	// The tags keys to propagate to the S3 objects associated with read sets in the sequence store.
	PropagatedSetLevelTags []string `pulumi:"propagatedSetLevelTags"`
	// The resource policy that controls S3 access on the store
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Omics::SequenceStore` for more information about the expected schema for this property.
	S3AccessPolicy interface{} `pulumi:"s3AccessPolicy"`
	// Server-side encryption (SSE) settings for the store.
	SseConfig *SequenceStoreSseConfig `pulumi:"sseConfig"`
	// Tags for the store.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a SequenceStore resource.
type SequenceStoreArgs struct {
	// Location of the access logs.
	AccessLogLocation pulumi.StringPtrInput
	// A description for the store.
	Description pulumi.StringPtrInput
	// The algorithm family of the ETag.
	ETagAlgorithmFamily SequenceStoreETagAlgorithmFamilyPtrInput
	// An S3 location that is used to store files that have failed a direct upload.
	FallbackLocation pulumi.StringPtrInput
	// A name for the store.
	Name pulumi.StringPtrInput
	// The tags keys to propagate to the S3 objects associated with read sets in the sequence store.
	PropagatedSetLevelTags pulumi.StringArrayInput
	// The resource policy that controls S3 access on the store
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Omics::SequenceStore` for more information about the expected schema for this property.
	S3AccessPolicy pulumi.Input
	// Server-side encryption (SSE) settings for the store.
	SseConfig SequenceStoreSseConfigPtrInput
	// Tags for the store.
	Tags pulumi.StringMapInput
}

func (SequenceStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sequenceStoreArgs)(nil)).Elem()
}

type SequenceStoreInput interface {
	pulumi.Input

	ToSequenceStoreOutput() SequenceStoreOutput
	ToSequenceStoreOutputWithContext(ctx context.Context) SequenceStoreOutput
}

func (*SequenceStore) ElementType() reflect.Type {
	return reflect.TypeOf((**SequenceStore)(nil)).Elem()
}

func (i *SequenceStore) ToSequenceStoreOutput() SequenceStoreOutput {
	return i.ToSequenceStoreOutputWithContext(context.Background())
}

func (i *SequenceStore) ToSequenceStoreOutputWithContext(ctx context.Context) SequenceStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SequenceStoreOutput)
}

type SequenceStoreOutput struct{ *pulumi.OutputState }

func (SequenceStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SequenceStore)(nil)).Elem()
}

func (o SequenceStoreOutput) ToSequenceStoreOutput() SequenceStoreOutput {
	return o
}

func (o SequenceStoreOutput) ToSequenceStoreOutputWithContext(ctx context.Context) SequenceStoreOutput {
	return o
}

// Location of the access logs.
func (o SequenceStoreOutput) AccessLogLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SequenceStore) pulumi.StringPtrOutput { return v.AccessLogLocation }).(pulumi.StringPtrOutput)
}

// The store's ARN.
func (o SequenceStoreOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *SequenceStore) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// When the store was created.
func (o SequenceStoreOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *SequenceStore) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

// A description for the store.
func (o SequenceStoreOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SequenceStore) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The algorithm family of the ETag.
func (o SequenceStoreOutput) ETagAlgorithmFamily() SequenceStoreETagAlgorithmFamilyPtrOutput {
	return o.ApplyT(func(v *SequenceStore) SequenceStoreETagAlgorithmFamilyPtrOutput { return v.ETagAlgorithmFamily }).(SequenceStoreETagAlgorithmFamilyPtrOutput)
}

// An S3 location that is used to store files that have failed a direct upload.
func (o SequenceStoreOutput) FallbackLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SequenceStore) pulumi.StringPtrOutput { return v.FallbackLocation }).(pulumi.StringPtrOutput)
}

// A name for the store.
func (o SequenceStoreOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SequenceStore) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The tags keys to propagate to the S3 objects associated with read sets in the sequence store.
func (o SequenceStoreOutput) PropagatedSetLevelTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SequenceStore) pulumi.StringArrayOutput { return v.PropagatedSetLevelTags }).(pulumi.StringArrayOutput)
}

// This is ARN of the access point associated with the S3 bucket storing read sets.
func (o SequenceStoreOutput) S3AccessPointArn() pulumi.StringOutput {
	return o.ApplyT(func(v *SequenceStore) pulumi.StringOutput { return v.S3AccessPointArn }).(pulumi.StringOutput)
}

// The resource policy that controls S3 access on the store
//
// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Omics::SequenceStore` for more information about the expected schema for this property.
func (o SequenceStoreOutput) S3AccessPolicy() pulumi.AnyOutput {
	return o.ApplyT(func(v *SequenceStore) pulumi.AnyOutput { return v.S3AccessPolicy }).(pulumi.AnyOutput)
}

// The S3 URI of the sequence store.
func (o SequenceStoreOutput) S3Uri() pulumi.StringOutput {
	return o.ApplyT(func(v *SequenceStore) pulumi.StringOutput { return v.S3Uri }).(pulumi.StringOutput)
}

// The store's ID.
func (o SequenceStoreOutput) SequenceStoreId() pulumi.StringOutput {
	return o.ApplyT(func(v *SequenceStore) pulumi.StringOutput { return v.SequenceStoreId }).(pulumi.StringOutput)
}

// Server-side encryption (SSE) settings for the store.
func (o SequenceStoreOutput) SseConfig() SequenceStoreSseConfigPtrOutput {
	return o.ApplyT(func(v *SequenceStore) SequenceStoreSseConfigPtrOutput { return v.SseConfig }).(SequenceStoreSseConfigPtrOutput)
}

// Status of the sequence store.
func (o SequenceStoreOutput) Status() SequenceStoreStatusOutput {
	return o.ApplyT(func(v *SequenceStore) SequenceStoreStatusOutput { return v.Status }).(SequenceStoreStatusOutput)
}

// The status message of the sequence store.
func (o SequenceStoreOutput) StatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v *SequenceStore) pulumi.StringOutput { return v.StatusMessage }).(pulumi.StringOutput)
}

// Tags for the store.
func (o SequenceStoreOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SequenceStore) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The last-updated time of the sequence store.
func (o SequenceStoreOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *SequenceStore) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SequenceStoreInput)(nil)).Elem(), &SequenceStore{})
	pulumi.RegisterOutputType(SequenceStoreOutput{})
}
