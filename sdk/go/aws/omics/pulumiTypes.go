// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package omics

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type AnnotationStoreReferenceItem struct {
	// The reference's ARN.
	ReferenceArn string `pulumi:"referenceArn"`
}

// AnnotationStoreReferenceItemInput is an input type that accepts AnnotationStoreReferenceItemArgs and AnnotationStoreReferenceItemOutput values.
// You can construct a concrete instance of `AnnotationStoreReferenceItemInput` via:
//
//	AnnotationStoreReferenceItemArgs{...}
type AnnotationStoreReferenceItemInput interface {
	pulumi.Input

	ToAnnotationStoreReferenceItemOutput() AnnotationStoreReferenceItemOutput
	ToAnnotationStoreReferenceItemOutputWithContext(context.Context) AnnotationStoreReferenceItemOutput
}

type AnnotationStoreReferenceItemArgs struct {
	// The reference's ARN.
	ReferenceArn pulumi.StringInput `pulumi:"referenceArn"`
}

func (AnnotationStoreReferenceItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnnotationStoreReferenceItem)(nil)).Elem()
}

func (i AnnotationStoreReferenceItemArgs) ToAnnotationStoreReferenceItemOutput() AnnotationStoreReferenceItemOutput {
	return i.ToAnnotationStoreReferenceItemOutputWithContext(context.Background())
}

func (i AnnotationStoreReferenceItemArgs) ToAnnotationStoreReferenceItemOutputWithContext(ctx context.Context) AnnotationStoreReferenceItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnnotationStoreReferenceItemOutput)
}

func (i AnnotationStoreReferenceItemArgs) ToAnnotationStoreReferenceItemPtrOutput() AnnotationStoreReferenceItemPtrOutput {
	return i.ToAnnotationStoreReferenceItemPtrOutputWithContext(context.Background())
}

func (i AnnotationStoreReferenceItemArgs) ToAnnotationStoreReferenceItemPtrOutputWithContext(ctx context.Context) AnnotationStoreReferenceItemPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnnotationStoreReferenceItemOutput).ToAnnotationStoreReferenceItemPtrOutputWithContext(ctx)
}

// AnnotationStoreReferenceItemPtrInput is an input type that accepts AnnotationStoreReferenceItemArgs, AnnotationStoreReferenceItemPtr and AnnotationStoreReferenceItemPtrOutput values.
// You can construct a concrete instance of `AnnotationStoreReferenceItemPtrInput` via:
//
//	        AnnotationStoreReferenceItemArgs{...}
//
//	or:
//
//	        nil
type AnnotationStoreReferenceItemPtrInput interface {
	pulumi.Input

	ToAnnotationStoreReferenceItemPtrOutput() AnnotationStoreReferenceItemPtrOutput
	ToAnnotationStoreReferenceItemPtrOutputWithContext(context.Context) AnnotationStoreReferenceItemPtrOutput
}

type annotationStoreReferenceItemPtrType AnnotationStoreReferenceItemArgs

func AnnotationStoreReferenceItemPtr(v *AnnotationStoreReferenceItemArgs) AnnotationStoreReferenceItemPtrInput {
	return (*annotationStoreReferenceItemPtrType)(v)
}

func (*annotationStoreReferenceItemPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnnotationStoreReferenceItem)(nil)).Elem()
}

func (i *annotationStoreReferenceItemPtrType) ToAnnotationStoreReferenceItemPtrOutput() AnnotationStoreReferenceItemPtrOutput {
	return i.ToAnnotationStoreReferenceItemPtrOutputWithContext(context.Background())
}

func (i *annotationStoreReferenceItemPtrType) ToAnnotationStoreReferenceItemPtrOutputWithContext(ctx context.Context) AnnotationStoreReferenceItemPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnnotationStoreReferenceItemPtrOutput)
}

type AnnotationStoreReferenceItemOutput struct{ *pulumi.OutputState }

func (AnnotationStoreReferenceItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnnotationStoreReferenceItem)(nil)).Elem()
}

func (o AnnotationStoreReferenceItemOutput) ToAnnotationStoreReferenceItemOutput() AnnotationStoreReferenceItemOutput {
	return o
}

func (o AnnotationStoreReferenceItemOutput) ToAnnotationStoreReferenceItemOutputWithContext(ctx context.Context) AnnotationStoreReferenceItemOutput {
	return o
}

func (o AnnotationStoreReferenceItemOutput) ToAnnotationStoreReferenceItemPtrOutput() AnnotationStoreReferenceItemPtrOutput {
	return o.ToAnnotationStoreReferenceItemPtrOutputWithContext(context.Background())
}

func (o AnnotationStoreReferenceItemOutput) ToAnnotationStoreReferenceItemPtrOutputWithContext(ctx context.Context) AnnotationStoreReferenceItemPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnnotationStoreReferenceItem) *AnnotationStoreReferenceItem {
		return &v
	}).(AnnotationStoreReferenceItemPtrOutput)
}

// The reference's ARN.
func (o AnnotationStoreReferenceItemOutput) ReferenceArn() pulumi.StringOutput {
	return o.ApplyT(func(v AnnotationStoreReferenceItem) string { return v.ReferenceArn }).(pulumi.StringOutput)
}

type AnnotationStoreReferenceItemPtrOutput struct{ *pulumi.OutputState }

func (AnnotationStoreReferenceItemPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnnotationStoreReferenceItem)(nil)).Elem()
}

func (o AnnotationStoreReferenceItemPtrOutput) ToAnnotationStoreReferenceItemPtrOutput() AnnotationStoreReferenceItemPtrOutput {
	return o
}

func (o AnnotationStoreReferenceItemPtrOutput) ToAnnotationStoreReferenceItemPtrOutputWithContext(ctx context.Context) AnnotationStoreReferenceItemPtrOutput {
	return o
}

func (o AnnotationStoreReferenceItemPtrOutput) Elem() AnnotationStoreReferenceItemOutput {
	return o.ApplyT(func(v *AnnotationStoreReferenceItem) AnnotationStoreReferenceItem {
		if v != nil {
			return *v
		}
		var ret AnnotationStoreReferenceItem
		return ret
	}).(AnnotationStoreReferenceItemOutput)
}

// The reference's ARN.
func (o AnnotationStoreReferenceItemPtrOutput) ReferenceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnnotationStoreReferenceItem) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceArn
	}).(pulumi.StringPtrOutput)
}

type AnnotationStoreSseConfig struct {
	// An encryption key ARN.
	KeyArn *string `pulumi:"keyArn"`
	// The encryption type.
	Type AnnotationStoreEncryptionType `pulumi:"type"`
}

// AnnotationStoreSseConfigInput is an input type that accepts AnnotationStoreSseConfigArgs and AnnotationStoreSseConfigOutput values.
// You can construct a concrete instance of `AnnotationStoreSseConfigInput` via:
//
//	AnnotationStoreSseConfigArgs{...}
type AnnotationStoreSseConfigInput interface {
	pulumi.Input

	ToAnnotationStoreSseConfigOutput() AnnotationStoreSseConfigOutput
	ToAnnotationStoreSseConfigOutputWithContext(context.Context) AnnotationStoreSseConfigOutput
}

type AnnotationStoreSseConfigArgs struct {
	// An encryption key ARN.
	KeyArn pulumi.StringPtrInput `pulumi:"keyArn"`
	// The encryption type.
	Type AnnotationStoreEncryptionTypeInput `pulumi:"type"`
}

func (AnnotationStoreSseConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnnotationStoreSseConfig)(nil)).Elem()
}

func (i AnnotationStoreSseConfigArgs) ToAnnotationStoreSseConfigOutput() AnnotationStoreSseConfigOutput {
	return i.ToAnnotationStoreSseConfigOutputWithContext(context.Background())
}

func (i AnnotationStoreSseConfigArgs) ToAnnotationStoreSseConfigOutputWithContext(ctx context.Context) AnnotationStoreSseConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnnotationStoreSseConfigOutput)
}

func (i AnnotationStoreSseConfigArgs) ToAnnotationStoreSseConfigPtrOutput() AnnotationStoreSseConfigPtrOutput {
	return i.ToAnnotationStoreSseConfigPtrOutputWithContext(context.Background())
}

func (i AnnotationStoreSseConfigArgs) ToAnnotationStoreSseConfigPtrOutputWithContext(ctx context.Context) AnnotationStoreSseConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnnotationStoreSseConfigOutput).ToAnnotationStoreSseConfigPtrOutputWithContext(ctx)
}

// AnnotationStoreSseConfigPtrInput is an input type that accepts AnnotationStoreSseConfigArgs, AnnotationStoreSseConfigPtr and AnnotationStoreSseConfigPtrOutput values.
// You can construct a concrete instance of `AnnotationStoreSseConfigPtrInput` via:
//
//	        AnnotationStoreSseConfigArgs{...}
//
//	or:
//
//	        nil
type AnnotationStoreSseConfigPtrInput interface {
	pulumi.Input

	ToAnnotationStoreSseConfigPtrOutput() AnnotationStoreSseConfigPtrOutput
	ToAnnotationStoreSseConfigPtrOutputWithContext(context.Context) AnnotationStoreSseConfigPtrOutput
}

type annotationStoreSseConfigPtrType AnnotationStoreSseConfigArgs

func AnnotationStoreSseConfigPtr(v *AnnotationStoreSseConfigArgs) AnnotationStoreSseConfigPtrInput {
	return (*annotationStoreSseConfigPtrType)(v)
}

func (*annotationStoreSseConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnnotationStoreSseConfig)(nil)).Elem()
}

func (i *annotationStoreSseConfigPtrType) ToAnnotationStoreSseConfigPtrOutput() AnnotationStoreSseConfigPtrOutput {
	return i.ToAnnotationStoreSseConfigPtrOutputWithContext(context.Background())
}

func (i *annotationStoreSseConfigPtrType) ToAnnotationStoreSseConfigPtrOutputWithContext(ctx context.Context) AnnotationStoreSseConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnnotationStoreSseConfigPtrOutput)
}

type AnnotationStoreSseConfigOutput struct{ *pulumi.OutputState }

func (AnnotationStoreSseConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnnotationStoreSseConfig)(nil)).Elem()
}

func (o AnnotationStoreSseConfigOutput) ToAnnotationStoreSseConfigOutput() AnnotationStoreSseConfigOutput {
	return o
}

func (o AnnotationStoreSseConfigOutput) ToAnnotationStoreSseConfigOutputWithContext(ctx context.Context) AnnotationStoreSseConfigOutput {
	return o
}

func (o AnnotationStoreSseConfigOutput) ToAnnotationStoreSseConfigPtrOutput() AnnotationStoreSseConfigPtrOutput {
	return o.ToAnnotationStoreSseConfigPtrOutputWithContext(context.Background())
}

func (o AnnotationStoreSseConfigOutput) ToAnnotationStoreSseConfigPtrOutputWithContext(ctx context.Context) AnnotationStoreSseConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnnotationStoreSseConfig) *AnnotationStoreSseConfig {
		return &v
	}).(AnnotationStoreSseConfigPtrOutput)
}

// An encryption key ARN.
func (o AnnotationStoreSseConfigOutput) KeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AnnotationStoreSseConfig) *string { return v.KeyArn }).(pulumi.StringPtrOutput)
}

// The encryption type.
func (o AnnotationStoreSseConfigOutput) Type() AnnotationStoreEncryptionTypeOutput {
	return o.ApplyT(func(v AnnotationStoreSseConfig) AnnotationStoreEncryptionType { return v.Type }).(AnnotationStoreEncryptionTypeOutput)
}

type AnnotationStoreSseConfigPtrOutput struct{ *pulumi.OutputState }

func (AnnotationStoreSseConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnnotationStoreSseConfig)(nil)).Elem()
}

func (o AnnotationStoreSseConfigPtrOutput) ToAnnotationStoreSseConfigPtrOutput() AnnotationStoreSseConfigPtrOutput {
	return o
}

func (o AnnotationStoreSseConfigPtrOutput) ToAnnotationStoreSseConfigPtrOutputWithContext(ctx context.Context) AnnotationStoreSseConfigPtrOutput {
	return o
}

func (o AnnotationStoreSseConfigPtrOutput) Elem() AnnotationStoreSseConfigOutput {
	return o.ApplyT(func(v *AnnotationStoreSseConfig) AnnotationStoreSseConfig {
		if v != nil {
			return *v
		}
		var ret AnnotationStoreSseConfig
		return ret
	}).(AnnotationStoreSseConfigOutput)
}

// An encryption key ARN.
func (o AnnotationStoreSseConfigPtrOutput) KeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnnotationStoreSseConfig) *string {
		if v == nil {
			return nil
		}
		return v.KeyArn
	}).(pulumi.StringPtrOutput)
}

// The encryption type.
func (o AnnotationStoreSseConfigPtrOutput) Type() AnnotationStoreEncryptionTypePtrOutput {
	return o.ApplyT(func(v *AnnotationStoreSseConfig) *AnnotationStoreEncryptionType {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(AnnotationStoreEncryptionTypePtrOutput)
}

type AnnotationStoreStoreOptions0Properties struct {
	TsvStoreOptions AnnotationStoreTsvStoreOptions `pulumi:"tsvStoreOptions"`
}

type AnnotationStoreStoreOptionsProperties struct {
	TsvStoreOptions AnnotationStoreTsvStoreOptions `pulumi:"tsvStoreOptions"`
}

// AnnotationStoreStoreOptionsPropertiesInput is an input type that accepts AnnotationStoreStoreOptionsPropertiesArgs and AnnotationStoreStoreOptionsPropertiesOutput values.
// You can construct a concrete instance of `AnnotationStoreStoreOptionsPropertiesInput` via:
//
//	AnnotationStoreStoreOptionsPropertiesArgs{...}
type AnnotationStoreStoreOptionsPropertiesInput interface {
	pulumi.Input

	ToAnnotationStoreStoreOptionsPropertiesOutput() AnnotationStoreStoreOptionsPropertiesOutput
	ToAnnotationStoreStoreOptionsPropertiesOutputWithContext(context.Context) AnnotationStoreStoreOptionsPropertiesOutput
}

type AnnotationStoreStoreOptionsPropertiesArgs struct {
	TsvStoreOptions AnnotationStoreTsvStoreOptionsInput `pulumi:"tsvStoreOptions"`
}

func (AnnotationStoreStoreOptionsPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnnotationStoreStoreOptionsProperties)(nil)).Elem()
}

func (i AnnotationStoreStoreOptionsPropertiesArgs) ToAnnotationStoreStoreOptionsPropertiesOutput() AnnotationStoreStoreOptionsPropertiesOutput {
	return i.ToAnnotationStoreStoreOptionsPropertiesOutputWithContext(context.Background())
}

func (i AnnotationStoreStoreOptionsPropertiesArgs) ToAnnotationStoreStoreOptionsPropertiesOutputWithContext(ctx context.Context) AnnotationStoreStoreOptionsPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnnotationStoreStoreOptionsPropertiesOutput)
}

func (i AnnotationStoreStoreOptionsPropertiesArgs) ToAnnotationStoreStoreOptionsPropertiesPtrOutput() AnnotationStoreStoreOptionsPropertiesPtrOutput {
	return i.ToAnnotationStoreStoreOptionsPropertiesPtrOutputWithContext(context.Background())
}

func (i AnnotationStoreStoreOptionsPropertiesArgs) ToAnnotationStoreStoreOptionsPropertiesPtrOutputWithContext(ctx context.Context) AnnotationStoreStoreOptionsPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnnotationStoreStoreOptionsPropertiesOutput).ToAnnotationStoreStoreOptionsPropertiesPtrOutputWithContext(ctx)
}

// AnnotationStoreStoreOptionsPropertiesPtrInput is an input type that accepts AnnotationStoreStoreOptionsPropertiesArgs, AnnotationStoreStoreOptionsPropertiesPtr and AnnotationStoreStoreOptionsPropertiesPtrOutput values.
// You can construct a concrete instance of `AnnotationStoreStoreOptionsPropertiesPtrInput` via:
//
//	        AnnotationStoreStoreOptionsPropertiesArgs{...}
//
//	or:
//
//	        nil
type AnnotationStoreStoreOptionsPropertiesPtrInput interface {
	pulumi.Input

	ToAnnotationStoreStoreOptionsPropertiesPtrOutput() AnnotationStoreStoreOptionsPropertiesPtrOutput
	ToAnnotationStoreStoreOptionsPropertiesPtrOutputWithContext(context.Context) AnnotationStoreStoreOptionsPropertiesPtrOutput
}

type annotationStoreStoreOptionsPropertiesPtrType AnnotationStoreStoreOptionsPropertiesArgs

func AnnotationStoreStoreOptionsPropertiesPtr(v *AnnotationStoreStoreOptionsPropertiesArgs) AnnotationStoreStoreOptionsPropertiesPtrInput {
	return (*annotationStoreStoreOptionsPropertiesPtrType)(v)
}

func (*annotationStoreStoreOptionsPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnnotationStoreStoreOptionsProperties)(nil)).Elem()
}

func (i *annotationStoreStoreOptionsPropertiesPtrType) ToAnnotationStoreStoreOptionsPropertiesPtrOutput() AnnotationStoreStoreOptionsPropertiesPtrOutput {
	return i.ToAnnotationStoreStoreOptionsPropertiesPtrOutputWithContext(context.Background())
}

func (i *annotationStoreStoreOptionsPropertiesPtrType) ToAnnotationStoreStoreOptionsPropertiesPtrOutputWithContext(ctx context.Context) AnnotationStoreStoreOptionsPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnnotationStoreStoreOptionsPropertiesPtrOutput)
}

type AnnotationStoreStoreOptionsPropertiesOutput struct{ *pulumi.OutputState }

func (AnnotationStoreStoreOptionsPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnnotationStoreStoreOptionsProperties)(nil)).Elem()
}

func (o AnnotationStoreStoreOptionsPropertiesOutput) ToAnnotationStoreStoreOptionsPropertiesOutput() AnnotationStoreStoreOptionsPropertiesOutput {
	return o
}

func (o AnnotationStoreStoreOptionsPropertiesOutput) ToAnnotationStoreStoreOptionsPropertiesOutputWithContext(ctx context.Context) AnnotationStoreStoreOptionsPropertiesOutput {
	return o
}

func (o AnnotationStoreStoreOptionsPropertiesOutput) ToAnnotationStoreStoreOptionsPropertiesPtrOutput() AnnotationStoreStoreOptionsPropertiesPtrOutput {
	return o.ToAnnotationStoreStoreOptionsPropertiesPtrOutputWithContext(context.Background())
}

func (o AnnotationStoreStoreOptionsPropertiesOutput) ToAnnotationStoreStoreOptionsPropertiesPtrOutputWithContext(ctx context.Context) AnnotationStoreStoreOptionsPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnnotationStoreStoreOptionsProperties) *AnnotationStoreStoreOptionsProperties {
		return &v
	}).(AnnotationStoreStoreOptionsPropertiesPtrOutput)
}

func (o AnnotationStoreStoreOptionsPropertiesOutput) TsvStoreOptions() AnnotationStoreTsvStoreOptionsOutput {
	return o.ApplyT(func(v AnnotationStoreStoreOptionsProperties) AnnotationStoreTsvStoreOptions { return v.TsvStoreOptions }).(AnnotationStoreTsvStoreOptionsOutput)
}

type AnnotationStoreStoreOptionsPropertiesPtrOutput struct{ *pulumi.OutputState }

func (AnnotationStoreStoreOptionsPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnnotationStoreStoreOptionsProperties)(nil)).Elem()
}

func (o AnnotationStoreStoreOptionsPropertiesPtrOutput) ToAnnotationStoreStoreOptionsPropertiesPtrOutput() AnnotationStoreStoreOptionsPropertiesPtrOutput {
	return o
}

func (o AnnotationStoreStoreOptionsPropertiesPtrOutput) ToAnnotationStoreStoreOptionsPropertiesPtrOutputWithContext(ctx context.Context) AnnotationStoreStoreOptionsPropertiesPtrOutput {
	return o
}

func (o AnnotationStoreStoreOptionsPropertiesPtrOutput) Elem() AnnotationStoreStoreOptionsPropertiesOutput {
	return o.ApplyT(func(v *AnnotationStoreStoreOptionsProperties) AnnotationStoreStoreOptionsProperties {
		if v != nil {
			return *v
		}
		var ret AnnotationStoreStoreOptionsProperties
		return ret
	}).(AnnotationStoreStoreOptionsPropertiesOutput)
}

func (o AnnotationStoreStoreOptionsPropertiesPtrOutput) TsvStoreOptions() AnnotationStoreTsvStoreOptionsPtrOutput {
	return o.ApplyT(func(v *AnnotationStoreStoreOptionsProperties) *AnnotationStoreTsvStoreOptions {
		if v == nil {
			return nil
		}
		return &v.TsvStoreOptions
	}).(AnnotationStoreTsvStoreOptionsPtrOutput)
}

type AnnotationStoreTsvStoreOptions struct {
	AnnotationType *AnnotationStoreAnnotationType              `pulumi:"annotationType"`
	FormatToHeader map[string]string                           `pulumi:"formatToHeader"`
	Schema         []map[string]AnnotationStoreSchemaValueType `pulumi:"schema"`
}

// AnnotationStoreTsvStoreOptionsInput is an input type that accepts AnnotationStoreTsvStoreOptionsArgs and AnnotationStoreTsvStoreOptionsOutput values.
// You can construct a concrete instance of `AnnotationStoreTsvStoreOptionsInput` via:
//
//	AnnotationStoreTsvStoreOptionsArgs{...}
type AnnotationStoreTsvStoreOptionsInput interface {
	pulumi.Input

	ToAnnotationStoreTsvStoreOptionsOutput() AnnotationStoreTsvStoreOptionsOutput
	ToAnnotationStoreTsvStoreOptionsOutputWithContext(context.Context) AnnotationStoreTsvStoreOptionsOutput
}

type AnnotationStoreTsvStoreOptionsArgs struct {
	AnnotationType AnnotationStoreAnnotationTypePtrInput       `pulumi:"annotationType"`
	FormatToHeader pulumi.StringMapInput                       `pulumi:"formatToHeader"`
	Schema         AnnotationStoreSchemaValueTypeMapArrayInput `pulumi:"schema"`
}

func (AnnotationStoreTsvStoreOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnnotationStoreTsvStoreOptions)(nil)).Elem()
}

func (i AnnotationStoreTsvStoreOptionsArgs) ToAnnotationStoreTsvStoreOptionsOutput() AnnotationStoreTsvStoreOptionsOutput {
	return i.ToAnnotationStoreTsvStoreOptionsOutputWithContext(context.Background())
}

func (i AnnotationStoreTsvStoreOptionsArgs) ToAnnotationStoreTsvStoreOptionsOutputWithContext(ctx context.Context) AnnotationStoreTsvStoreOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnnotationStoreTsvStoreOptionsOutput)
}

func (i AnnotationStoreTsvStoreOptionsArgs) ToAnnotationStoreTsvStoreOptionsPtrOutput() AnnotationStoreTsvStoreOptionsPtrOutput {
	return i.ToAnnotationStoreTsvStoreOptionsPtrOutputWithContext(context.Background())
}

func (i AnnotationStoreTsvStoreOptionsArgs) ToAnnotationStoreTsvStoreOptionsPtrOutputWithContext(ctx context.Context) AnnotationStoreTsvStoreOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnnotationStoreTsvStoreOptionsOutput).ToAnnotationStoreTsvStoreOptionsPtrOutputWithContext(ctx)
}

// AnnotationStoreTsvStoreOptionsPtrInput is an input type that accepts AnnotationStoreTsvStoreOptionsArgs, AnnotationStoreTsvStoreOptionsPtr and AnnotationStoreTsvStoreOptionsPtrOutput values.
// You can construct a concrete instance of `AnnotationStoreTsvStoreOptionsPtrInput` via:
//
//	        AnnotationStoreTsvStoreOptionsArgs{...}
//
//	or:
//
//	        nil
type AnnotationStoreTsvStoreOptionsPtrInput interface {
	pulumi.Input

	ToAnnotationStoreTsvStoreOptionsPtrOutput() AnnotationStoreTsvStoreOptionsPtrOutput
	ToAnnotationStoreTsvStoreOptionsPtrOutputWithContext(context.Context) AnnotationStoreTsvStoreOptionsPtrOutput
}

type annotationStoreTsvStoreOptionsPtrType AnnotationStoreTsvStoreOptionsArgs

func AnnotationStoreTsvStoreOptionsPtr(v *AnnotationStoreTsvStoreOptionsArgs) AnnotationStoreTsvStoreOptionsPtrInput {
	return (*annotationStoreTsvStoreOptionsPtrType)(v)
}

func (*annotationStoreTsvStoreOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnnotationStoreTsvStoreOptions)(nil)).Elem()
}

func (i *annotationStoreTsvStoreOptionsPtrType) ToAnnotationStoreTsvStoreOptionsPtrOutput() AnnotationStoreTsvStoreOptionsPtrOutput {
	return i.ToAnnotationStoreTsvStoreOptionsPtrOutputWithContext(context.Background())
}

func (i *annotationStoreTsvStoreOptionsPtrType) ToAnnotationStoreTsvStoreOptionsPtrOutputWithContext(ctx context.Context) AnnotationStoreTsvStoreOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnnotationStoreTsvStoreOptionsPtrOutput)
}

type AnnotationStoreTsvStoreOptionsOutput struct{ *pulumi.OutputState }

func (AnnotationStoreTsvStoreOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnnotationStoreTsvStoreOptions)(nil)).Elem()
}

func (o AnnotationStoreTsvStoreOptionsOutput) ToAnnotationStoreTsvStoreOptionsOutput() AnnotationStoreTsvStoreOptionsOutput {
	return o
}

func (o AnnotationStoreTsvStoreOptionsOutput) ToAnnotationStoreTsvStoreOptionsOutputWithContext(ctx context.Context) AnnotationStoreTsvStoreOptionsOutput {
	return o
}

func (o AnnotationStoreTsvStoreOptionsOutput) ToAnnotationStoreTsvStoreOptionsPtrOutput() AnnotationStoreTsvStoreOptionsPtrOutput {
	return o.ToAnnotationStoreTsvStoreOptionsPtrOutputWithContext(context.Background())
}

func (o AnnotationStoreTsvStoreOptionsOutput) ToAnnotationStoreTsvStoreOptionsPtrOutputWithContext(ctx context.Context) AnnotationStoreTsvStoreOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnnotationStoreTsvStoreOptions) *AnnotationStoreTsvStoreOptions {
		return &v
	}).(AnnotationStoreTsvStoreOptionsPtrOutput)
}

func (o AnnotationStoreTsvStoreOptionsOutput) AnnotationType() AnnotationStoreAnnotationTypePtrOutput {
	return o.ApplyT(func(v AnnotationStoreTsvStoreOptions) *AnnotationStoreAnnotationType { return v.AnnotationType }).(AnnotationStoreAnnotationTypePtrOutput)
}

func (o AnnotationStoreTsvStoreOptionsOutput) FormatToHeader() pulumi.StringMapOutput {
	return o.ApplyT(func(v AnnotationStoreTsvStoreOptions) map[string]string { return v.FormatToHeader }).(pulumi.StringMapOutput)
}

func (o AnnotationStoreTsvStoreOptionsOutput) Schema() AnnotationStoreSchemaValueTypeMapArrayOutput {
	return o.ApplyT(func(v AnnotationStoreTsvStoreOptions) []map[string]AnnotationStoreSchemaValueType { return v.Schema }).(AnnotationStoreSchemaValueTypeMapArrayOutput)
}

type AnnotationStoreTsvStoreOptionsPtrOutput struct{ *pulumi.OutputState }

func (AnnotationStoreTsvStoreOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnnotationStoreTsvStoreOptions)(nil)).Elem()
}

func (o AnnotationStoreTsvStoreOptionsPtrOutput) ToAnnotationStoreTsvStoreOptionsPtrOutput() AnnotationStoreTsvStoreOptionsPtrOutput {
	return o
}

func (o AnnotationStoreTsvStoreOptionsPtrOutput) ToAnnotationStoreTsvStoreOptionsPtrOutputWithContext(ctx context.Context) AnnotationStoreTsvStoreOptionsPtrOutput {
	return o
}

func (o AnnotationStoreTsvStoreOptionsPtrOutput) Elem() AnnotationStoreTsvStoreOptionsOutput {
	return o.ApplyT(func(v *AnnotationStoreTsvStoreOptions) AnnotationStoreTsvStoreOptions {
		if v != nil {
			return *v
		}
		var ret AnnotationStoreTsvStoreOptions
		return ret
	}).(AnnotationStoreTsvStoreOptionsOutput)
}

func (o AnnotationStoreTsvStoreOptionsPtrOutput) AnnotationType() AnnotationStoreAnnotationTypePtrOutput {
	return o.ApplyT(func(v *AnnotationStoreTsvStoreOptions) *AnnotationStoreAnnotationType {
		if v == nil {
			return nil
		}
		return v.AnnotationType
	}).(AnnotationStoreAnnotationTypePtrOutput)
}

func (o AnnotationStoreTsvStoreOptionsPtrOutput) FormatToHeader() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AnnotationStoreTsvStoreOptions) map[string]string {
		if v == nil {
			return nil
		}
		return v.FormatToHeader
	}).(pulumi.StringMapOutput)
}

func (o AnnotationStoreTsvStoreOptionsPtrOutput) Schema() AnnotationStoreSchemaValueTypeMapArrayOutput {
	return o.ApplyT(func(v *AnnotationStoreTsvStoreOptions) []map[string]AnnotationStoreSchemaValueType {
		if v == nil {
			return nil
		}
		return v.Schema
	}).(AnnotationStoreSchemaValueTypeMapArrayOutput)
}

// Server-side encryption (SSE) settings for a store.
type ReferenceStoreSseConfig struct {
	// An encryption key ARN.
	KeyArn *string `pulumi:"keyArn"`
	// The encryption type.
	Type ReferenceStoreEncryptionType `pulumi:"type"`
}

// ReferenceStoreSseConfigInput is an input type that accepts ReferenceStoreSseConfigArgs and ReferenceStoreSseConfigOutput values.
// You can construct a concrete instance of `ReferenceStoreSseConfigInput` via:
//
//	ReferenceStoreSseConfigArgs{...}
type ReferenceStoreSseConfigInput interface {
	pulumi.Input

	ToReferenceStoreSseConfigOutput() ReferenceStoreSseConfigOutput
	ToReferenceStoreSseConfigOutputWithContext(context.Context) ReferenceStoreSseConfigOutput
}

// Server-side encryption (SSE) settings for a store.
type ReferenceStoreSseConfigArgs struct {
	// An encryption key ARN.
	KeyArn pulumi.StringPtrInput `pulumi:"keyArn"`
	// The encryption type.
	Type ReferenceStoreEncryptionTypeInput `pulumi:"type"`
}

func (ReferenceStoreSseConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceStoreSseConfig)(nil)).Elem()
}

func (i ReferenceStoreSseConfigArgs) ToReferenceStoreSseConfigOutput() ReferenceStoreSseConfigOutput {
	return i.ToReferenceStoreSseConfigOutputWithContext(context.Background())
}

func (i ReferenceStoreSseConfigArgs) ToReferenceStoreSseConfigOutputWithContext(ctx context.Context) ReferenceStoreSseConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceStoreSseConfigOutput)
}

func (i ReferenceStoreSseConfigArgs) ToReferenceStoreSseConfigPtrOutput() ReferenceStoreSseConfigPtrOutput {
	return i.ToReferenceStoreSseConfigPtrOutputWithContext(context.Background())
}

func (i ReferenceStoreSseConfigArgs) ToReferenceStoreSseConfigPtrOutputWithContext(ctx context.Context) ReferenceStoreSseConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceStoreSseConfigOutput).ToReferenceStoreSseConfigPtrOutputWithContext(ctx)
}

// ReferenceStoreSseConfigPtrInput is an input type that accepts ReferenceStoreSseConfigArgs, ReferenceStoreSseConfigPtr and ReferenceStoreSseConfigPtrOutput values.
// You can construct a concrete instance of `ReferenceStoreSseConfigPtrInput` via:
//
//	        ReferenceStoreSseConfigArgs{...}
//
//	or:
//
//	        nil
type ReferenceStoreSseConfigPtrInput interface {
	pulumi.Input

	ToReferenceStoreSseConfigPtrOutput() ReferenceStoreSseConfigPtrOutput
	ToReferenceStoreSseConfigPtrOutputWithContext(context.Context) ReferenceStoreSseConfigPtrOutput
}

type referenceStoreSseConfigPtrType ReferenceStoreSseConfigArgs

func ReferenceStoreSseConfigPtr(v *ReferenceStoreSseConfigArgs) ReferenceStoreSseConfigPtrInput {
	return (*referenceStoreSseConfigPtrType)(v)
}

func (*referenceStoreSseConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReferenceStoreSseConfig)(nil)).Elem()
}

func (i *referenceStoreSseConfigPtrType) ToReferenceStoreSseConfigPtrOutput() ReferenceStoreSseConfigPtrOutput {
	return i.ToReferenceStoreSseConfigPtrOutputWithContext(context.Background())
}

func (i *referenceStoreSseConfigPtrType) ToReferenceStoreSseConfigPtrOutputWithContext(ctx context.Context) ReferenceStoreSseConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceStoreSseConfigPtrOutput)
}

// Server-side encryption (SSE) settings for a store.
type ReferenceStoreSseConfigOutput struct{ *pulumi.OutputState }

func (ReferenceStoreSseConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceStoreSseConfig)(nil)).Elem()
}

func (o ReferenceStoreSseConfigOutput) ToReferenceStoreSseConfigOutput() ReferenceStoreSseConfigOutput {
	return o
}

func (o ReferenceStoreSseConfigOutput) ToReferenceStoreSseConfigOutputWithContext(ctx context.Context) ReferenceStoreSseConfigOutput {
	return o
}

func (o ReferenceStoreSseConfigOutput) ToReferenceStoreSseConfigPtrOutput() ReferenceStoreSseConfigPtrOutput {
	return o.ToReferenceStoreSseConfigPtrOutputWithContext(context.Background())
}

func (o ReferenceStoreSseConfigOutput) ToReferenceStoreSseConfigPtrOutputWithContext(ctx context.Context) ReferenceStoreSseConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReferenceStoreSseConfig) *ReferenceStoreSseConfig {
		return &v
	}).(ReferenceStoreSseConfigPtrOutput)
}

// An encryption key ARN.
func (o ReferenceStoreSseConfigOutput) KeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReferenceStoreSseConfig) *string { return v.KeyArn }).(pulumi.StringPtrOutput)
}

// The encryption type.
func (o ReferenceStoreSseConfigOutput) Type() ReferenceStoreEncryptionTypeOutput {
	return o.ApplyT(func(v ReferenceStoreSseConfig) ReferenceStoreEncryptionType { return v.Type }).(ReferenceStoreEncryptionTypeOutput)
}

type ReferenceStoreSseConfigPtrOutput struct{ *pulumi.OutputState }

func (ReferenceStoreSseConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReferenceStoreSseConfig)(nil)).Elem()
}

func (o ReferenceStoreSseConfigPtrOutput) ToReferenceStoreSseConfigPtrOutput() ReferenceStoreSseConfigPtrOutput {
	return o
}

func (o ReferenceStoreSseConfigPtrOutput) ToReferenceStoreSseConfigPtrOutputWithContext(ctx context.Context) ReferenceStoreSseConfigPtrOutput {
	return o
}

func (o ReferenceStoreSseConfigPtrOutput) Elem() ReferenceStoreSseConfigOutput {
	return o.ApplyT(func(v *ReferenceStoreSseConfig) ReferenceStoreSseConfig {
		if v != nil {
			return *v
		}
		var ret ReferenceStoreSseConfig
		return ret
	}).(ReferenceStoreSseConfigOutput)
}

// An encryption key ARN.
func (o ReferenceStoreSseConfigPtrOutput) KeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReferenceStoreSseConfig) *string {
		if v == nil {
			return nil
		}
		return v.KeyArn
	}).(pulumi.StringPtrOutput)
}

// The encryption type.
func (o ReferenceStoreSseConfigPtrOutput) Type() ReferenceStoreEncryptionTypePtrOutput {
	return o.ApplyT(func(v *ReferenceStoreSseConfig) *ReferenceStoreEncryptionType {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(ReferenceStoreEncryptionTypePtrOutput)
}

// Server-side encryption (SSE) settings for a store.
type SequenceStoreSseConfig struct {
	// An encryption key ARN.
	KeyArn *string `pulumi:"keyArn"`
	// The encryption type.
	Type SequenceStoreEncryptionType `pulumi:"type"`
}

// SequenceStoreSseConfigInput is an input type that accepts SequenceStoreSseConfigArgs and SequenceStoreSseConfigOutput values.
// You can construct a concrete instance of `SequenceStoreSseConfigInput` via:
//
//	SequenceStoreSseConfigArgs{...}
type SequenceStoreSseConfigInput interface {
	pulumi.Input

	ToSequenceStoreSseConfigOutput() SequenceStoreSseConfigOutput
	ToSequenceStoreSseConfigOutputWithContext(context.Context) SequenceStoreSseConfigOutput
}

// Server-side encryption (SSE) settings for a store.
type SequenceStoreSseConfigArgs struct {
	// An encryption key ARN.
	KeyArn pulumi.StringPtrInput `pulumi:"keyArn"`
	// The encryption type.
	Type SequenceStoreEncryptionTypeInput `pulumi:"type"`
}

func (SequenceStoreSseConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SequenceStoreSseConfig)(nil)).Elem()
}

func (i SequenceStoreSseConfigArgs) ToSequenceStoreSseConfigOutput() SequenceStoreSseConfigOutput {
	return i.ToSequenceStoreSseConfigOutputWithContext(context.Background())
}

func (i SequenceStoreSseConfigArgs) ToSequenceStoreSseConfigOutputWithContext(ctx context.Context) SequenceStoreSseConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SequenceStoreSseConfigOutput)
}

func (i SequenceStoreSseConfigArgs) ToSequenceStoreSseConfigPtrOutput() SequenceStoreSseConfigPtrOutput {
	return i.ToSequenceStoreSseConfigPtrOutputWithContext(context.Background())
}

func (i SequenceStoreSseConfigArgs) ToSequenceStoreSseConfigPtrOutputWithContext(ctx context.Context) SequenceStoreSseConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SequenceStoreSseConfigOutput).ToSequenceStoreSseConfigPtrOutputWithContext(ctx)
}

// SequenceStoreSseConfigPtrInput is an input type that accepts SequenceStoreSseConfigArgs, SequenceStoreSseConfigPtr and SequenceStoreSseConfigPtrOutput values.
// You can construct a concrete instance of `SequenceStoreSseConfigPtrInput` via:
//
//	        SequenceStoreSseConfigArgs{...}
//
//	or:
//
//	        nil
type SequenceStoreSseConfigPtrInput interface {
	pulumi.Input

	ToSequenceStoreSseConfigPtrOutput() SequenceStoreSseConfigPtrOutput
	ToSequenceStoreSseConfigPtrOutputWithContext(context.Context) SequenceStoreSseConfigPtrOutput
}

type sequenceStoreSseConfigPtrType SequenceStoreSseConfigArgs

func SequenceStoreSseConfigPtr(v *SequenceStoreSseConfigArgs) SequenceStoreSseConfigPtrInput {
	return (*sequenceStoreSseConfigPtrType)(v)
}

func (*sequenceStoreSseConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SequenceStoreSseConfig)(nil)).Elem()
}

func (i *sequenceStoreSseConfigPtrType) ToSequenceStoreSseConfigPtrOutput() SequenceStoreSseConfigPtrOutput {
	return i.ToSequenceStoreSseConfigPtrOutputWithContext(context.Background())
}

func (i *sequenceStoreSseConfigPtrType) ToSequenceStoreSseConfigPtrOutputWithContext(ctx context.Context) SequenceStoreSseConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SequenceStoreSseConfigPtrOutput)
}

// Server-side encryption (SSE) settings for a store.
type SequenceStoreSseConfigOutput struct{ *pulumi.OutputState }

func (SequenceStoreSseConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SequenceStoreSseConfig)(nil)).Elem()
}

func (o SequenceStoreSseConfigOutput) ToSequenceStoreSseConfigOutput() SequenceStoreSseConfigOutput {
	return o
}

func (o SequenceStoreSseConfigOutput) ToSequenceStoreSseConfigOutputWithContext(ctx context.Context) SequenceStoreSseConfigOutput {
	return o
}

func (o SequenceStoreSseConfigOutput) ToSequenceStoreSseConfigPtrOutput() SequenceStoreSseConfigPtrOutput {
	return o.ToSequenceStoreSseConfigPtrOutputWithContext(context.Background())
}

func (o SequenceStoreSseConfigOutput) ToSequenceStoreSseConfigPtrOutputWithContext(ctx context.Context) SequenceStoreSseConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SequenceStoreSseConfig) *SequenceStoreSseConfig {
		return &v
	}).(SequenceStoreSseConfigPtrOutput)
}

// An encryption key ARN.
func (o SequenceStoreSseConfigOutput) KeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SequenceStoreSseConfig) *string { return v.KeyArn }).(pulumi.StringPtrOutput)
}

// The encryption type.
func (o SequenceStoreSseConfigOutput) Type() SequenceStoreEncryptionTypeOutput {
	return o.ApplyT(func(v SequenceStoreSseConfig) SequenceStoreEncryptionType { return v.Type }).(SequenceStoreEncryptionTypeOutput)
}

type SequenceStoreSseConfigPtrOutput struct{ *pulumi.OutputState }

func (SequenceStoreSseConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SequenceStoreSseConfig)(nil)).Elem()
}

func (o SequenceStoreSseConfigPtrOutput) ToSequenceStoreSseConfigPtrOutput() SequenceStoreSseConfigPtrOutput {
	return o
}

func (o SequenceStoreSseConfigPtrOutput) ToSequenceStoreSseConfigPtrOutputWithContext(ctx context.Context) SequenceStoreSseConfigPtrOutput {
	return o
}

func (o SequenceStoreSseConfigPtrOutput) Elem() SequenceStoreSseConfigOutput {
	return o.ApplyT(func(v *SequenceStoreSseConfig) SequenceStoreSseConfig {
		if v != nil {
			return *v
		}
		var ret SequenceStoreSseConfig
		return ret
	}).(SequenceStoreSseConfigOutput)
}

// An encryption key ARN.
func (o SequenceStoreSseConfigPtrOutput) KeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SequenceStoreSseConfig) *string {
		if v == nil {
			return nil
		}
		return v.KeyArn
	}).(pulumi.StringPtrOutput)
}

// The encryption type.
func (o SequenceStoreSseConfigPtrOutput) Type() SequenceStoreEncryptionTypePtrOutput {
	return o.ApplyT(func(v *SequenceStoreSseConfig) *SequenceStoreEncryptionType {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(SequenceStoreEncryptionTypePtrOutput)
}

type VariantStoreReferenceItem struct {
	// The reference's ARN.
	ReferenceArn string `pulumi:"referenceArn"`
}

// VariantStoreReferenceItemInput is an input type that accepts VariantStoreReferenceItemArgs and VariantStoreReferenceItemOutput values.
// You can construct a concrete instance of `VariantStoreReferenceItemInput` via:
//
//	VariantStoreReferenceItemArgs{...}
type VariantStoreReferenceItemInput interface {
	pulumi.Input

	ToVariantStoreReferenceItemOutput() VariantStoreReferenceItemOutput
	ToVariantStoreReferenceItemOutputWithContext(context.Context) VariantStoreReferenceItemOutput
}

type VariantStoreReferenceItemArgs struct {
	// The reference's ARN.
	ReferenceArn pulumi.StringInput `pulumi:"referenceArn"`
}

func (VariantStoreReferenceItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VariantStoreReferenceItem)(nil)).Elem()
}

func (i VariantStoreReferenceItemArgs) ToVariantStoreReferenceItemOutput() VariantStoreReferenceItemOutput {
	return i.ToVariantStoreReferenceItemOutputWithContext(context.Background())
}

func (i VariantStoreReferenceItemArgs) ToVariantStoreReferenceItemOutputWithContext(ctx context.Context) VariantStoreReferenceItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VariantStoreReferenceItemOutput)
}

type VariantStoreReferenceItemOutput struct{ *pulumi.OutputState }

func (VariantStoreReferenceItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VariantStoreReferenceItem)(nil)).Elem()
}

func (o VariantStoreReferenceItemOutput) ToVariantStoreReferenceItemOutput() VariantStoreReferenceItemOutput {
	return o
}

func (o VariantStoreReferenceItemOutput) ToVariantStoreReferenceItemOutputWithContext(ctx context.Context) VariantStoreReferenceItemOutput {
	return o
}

// The reference's ARN.
func (o VariantStoreReferenceItemOutput) ReferenceArn() pulumi.StringOutput {
	return o.ApplyT(func(v VariantStoreReferenceItem) string { return v.ReferenceArn }).(pulumi.StringOutput)
}

type VariantStoreSseConfig struct {
	// An encryption key ARN.
	KeyArn *string `pulumi:"keyArn"`
	// The encryption type.
	Type VariantStoreEncryptionType `pulumi:"type"`
}

// VariantStoreSseConfigInput is an input type that accepts VariantStoreSseConfigArgs and VariantStoreSseConfigOutput values.
// You can construct a concrete instance of `VariantStoreSseConfigInput` via:
//
//	VariantStoreSseConfigArgs{...}
type VariantStoreSseConfigInput interface {
	pulumi.Input

	ToVariantStoreSseConfigOutput() VariantStoreSseConfigOutput
	ToVariantStoreSseConfigOutputWithContext(context.Context) VariantStoreSseConfigOutput
}

type VariantStoreSseConfigArgs struct {
	// An encryption key ARN.
	KeyArn pulumi.StringPtrInput `pulumi:"keyArn"`
	// The encryption type.
	Type VariantStoreEncryptionTypeInput `pulumi:"type"`
}

func (VariantStoreSseConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VariantStoreSseConfig)(nil)).Elem()
}

func (i VariantStoreSseConfigArgs) ToVariantStoreSseConfigOutput() VariantStoreSseConfigOutput {
	return i.ToVariantStoreSseConfigOutputWithContext(context.Background())
}

func (i VariantStoreSseConfigArgs) ToVariantStoreSseConfigOutputWithContext(ctx context.Context) VariantStoreSseConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VariantStoreSseConfigOutput)
}

func (i VariantStoreSseConfigArgs) ToVariantStoreSseConfigPtrOutput() VariantStoreSseConfigPtrOutput {
	return i.ToVariantStoreSseConfigPtrOutputWithContext(context.Background())
}

func (i VariantStoreSseConfigArgs) ToVariantStoreSseConfigPtrOutputWithContext(ctx context.Context) VariantStoreSseConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VariantStoreSseConfigOutput).ToVariantStoreSseConfigPtrOutputWithContext(ctx)
}

// VariantStoreSseConfigPtrInput is an input type that accepts VariantStoreSseConfigArgs, VariantStoreSseConfigPtr and VariantStoreSseConfigPtrOutput values.
// You can construct a concrete instance of `VariantStoreSseConfigPtrInput` via:
//
//	        VariantStoreSseConfigArgs{...}
//
//	or:
//
//	        nil
type VariantStoreSseConfigPtrInput interface {
	pulumi.Input

	ToVariantStoreSseConfigPtrOutput() VariantStoreSseConfigPtrOutput
	ToVariantStoreSseConfigPtrOutputWithContext(context.Context) VariantStoreSseConfigPtrOutput
}

type variantStoreSseConfigPtrType VariantStoreSseConfigArgs

func VariantStoreSseConfigPtr(v *VariantStoreSseConfigArgs) VariantStoreSseConfigPtrInput {
	return (*variantStoreSseConfigPtrType)(v)
}

func (*variantStoreSseConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VariantStoreSseConfig)(nil)).Elem()
}

func (i *variantStoreSseConfigPtrType) ToVariantStoreSseConfigPtrOutput() VariantStoreSseConfigPtrOutput {
	return i.ToVariantStoreSseConfigPtrOutputWithContext(context.Background())
}

func (i *variantStoreSseConfigPtrType) ToVariantStoreSseConfigPtrOutputWithContext(ctx context.Context) VariantStoreSseConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VariantStoreSseConfigPtrOutput)
}

type VariantStoreSseConfigOutput struct{ *pulumi.OutputState }

func (VariantStoreSseConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VariantStoreSseConfig)(nil)).Elem()
}

func (o VariantStoreSseConfigOutput) ToVariantStoreSseConfigOutput() VariantStoreSseConfigOutput {
	return o
}

func (o VariantStoreSseConfigOutput) ToVariantStoreSseConfigOutputWithContext(ctx context.Context) VariantStoreSseConfigOutput {
	return o
}

func (o VariantStoreSseConfigOutput) ToVariantStoreSseConfigPtrOutput() VariantStoreSseConfigPtrOutput {
	return o.ToVariantStoreSseConfigPtrOutputWithContext(context.Background())
}

func (o VariantStoreSseConfigOutput) ToVariantStoreSseConfigPtrOutputWithContext(ctx context.Context) VariantStoreSseConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VariantStoreSseConfig) *VariantStoreSseConfig {
		return &v
	}).(VariantStoreSseConfigPtrOutput)
}

// An encryption key ARN.
func (o VariantStoreSseConfigOutput) KeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VariantStoreSseConfig) *string { return v.KeyArn }).(pulumi.StringPtrOutput)
}

// The encryption type.
func (o VariantStoreSseConfigOutput) Type() VariantStoreEncryptionTypeOutput {
	return o.ApplyT(func(v VariantStoreSseConfig) VariantStoreEncryptionType { return v.Type }).(VariantStoreEncryptionTypeOutput)
}

type VariantStoreSseConfigPtrOutput struct{ *pulumi.OutputState }

func (VariantStoreSseConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VariantStoreSseConfig)(nil)).Elem()
}

func (o VariantStoreSseConfigPtrOutput) ToVariantStoreSseConfigPtrOutput() VariantStoreSseConfigPtrOutput {
	return o
}

func (o VariantStoreSseConfigPtrOutput) ToVariantStoreSseConfigPtrOutputWithContext(ctx context.Context) VariantStoreSseConfigPtrOutput {
	return o
}

func (o VariantStoreSseConfigPtrOutput) Elem() VariantStoreSseConfigOutput {
	return o.ApplyT(func(v *VariantStoreSseConfig) VariantStoreSseConfig {
		if v != nil {
			return *v
		}
		var ret VariantStoreSseConfig
		return ret
	}).(VariantStoreSseConfigOutput)
}

// An encryption key ARN.
func (o VariantStoreSseConfigPtrOutput) KeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VariantStoreSseConfig) *string {
		if v == nil {
			return nil
		}
		return v.KeyArn
	}).(pulumi.StringPtrOutput)
}

// The encryption type.
func (o VariantStoreSseConfigPtrOutput) Type() VariantStoreEncryptionTypePtrOutput {
	return o.ApplyT(func(v *VariantStoreSseConfig) *VariantStoreEncryptionType {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(VariantStoreEncryptionTypePtrOutput)
}

type WorkflowDefinitionRepository struct {
	// The Amazon Resource Name (ARN) of the connection to the source code repository.
	ConnectionArn *string `pulumi:"connectionArn"`
	// A list of file patterns to exclude when retrieving the workflow definition from the repository.
	ExcludeFilePatterns []string `pulumi:"excludeFilePatterns"`
	// The full repository identifier, including the repository owner and name. For example, 'repository-owner/repository-name'.
	FullRepositoryId *string `pulumi:"fullRepositoryId"`
	// The source reference for the repository, such as a branch name, tag, or commit ID.
	SourceReference *WorkflowSourceReference `pulumi:"sourceReference"`
}

// WorkflowDefinitionRepositoryInput is an input type that accepts WorkflowDefinitionRepositoryArgs and WorkflowDefinitionRepositoryOutput values.
// You can construct a concrete instance of `WorkflowDefinitionRepositoryInput` via:
//
//	WorkflowDefinitionRepositoryArgs{...}
type WorkflowDefinitionRepositoryInput interface {
	pulumi.Input

	ToWorkflowDefinitionRepositoryOutput() WorkflowDefinitionRepositoryOutput
	ToWorkflowDefinitionRepositoryOutputWithContext(context.Context) WorkflowDefinitionRepositoryOutput
}

type WorkflowDefinitionRepositoryArgs struct {
	// The Amazon Resource Name (ARN) of the connection to the source code repository.
	ConnectionArn pulumi.StringPtrInput `pulumi:"connectionArn"`
	// A list of file patterns to exclude when retrieving the workflow definition from the repository.
	ExcludeFilePatterns pulumi.StringArrayInput `pulumi:"excludeFilePatterns"`
	// The full repository identifier, including the repository owner and name. For example, 'repository-owner/repository-name'.
	FullRepositoryId pulumi.StringPtrInput `pulumi:"fullRepositoryId"`
	// The source reference for the repository, such as a branch name, tag, or commit ID.
	SourceReference WorkflowSourceReferencePtrInput `pulumi:"sourceReference"`
}

func (WorkflowDefinitionRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowDefinitionRepository)(nil)).Elem()
}

func (i WorkflowDefinitionRepositoryArgs) ToWorkflowDefinitionRepositoryOutput() WorkflowDefinitionRepositoryOutput {
	return i.ToWorkflowDefinitionRepositoryOutputWithContext(context.Background())
}

func (i WorkflowDefinitionRepositoryArgs) ToWorkflowDefinitionRepositoryOutputWithContext(ctx context.Context) WorkflowDefinitionRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowDefinitionRepositoryOutput)
}

func (i WorkflowDefinitionRepositoryArgs) ToWorkflowDefinitionRepositoryPtrOutput() WorkflowDefinitionRepositoryPtrOutput {
	return i.ToWorkflowDefinitionRepositoryPtrOutputWithContext(context.Background())
}

func (i WorkflowDefinitionRepositoryArgs) ToWorkflowDefinitionRepositoryPtrOutputWithContext(ctx context.Context) WorkflowDefinitionRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowDefinitionRepositoryOutput).ToWorkflowDefinitionRepositoryPtrOutputWithContext(ctx)
}

// WorkflowDefinitionRepositoryPtrInput is an input type that accepts WorkflowDefinitionRepositoryArgs, WorkflowDefinitionRepositoryPtr and WorkflowDefinitionRepositoryPtrOutput values.
// You can construct a concrete instance of `WorkflowDefinitionRepositoryPtrInput` via:
//
//	        WorkflowDefinitionRepositoryArgs{...}
//
//	or:
//
//	        nil
type WorkflowDefinitionRepositoryPtrInput interface {
	pulumi.Input

	ToWorkflowDefinitionRepositoryPtrOutput() WorkflowDefinitionRepositoryPtrOutput
	ToWorkflowDefinitionRepositoryPtrOutputWithContext(context.Context) WorkflowDefinitionRepositoryPtrOutput
}

type workflowDefinitionRepositoryPtrType WorkflowDefinitionRepositoryArgs

func WorkflowDefinitionRepositoryPtr(v *WorkflowDefinitionRepositoryArgs) WorkflowDefinitionRepositoryPtrInput {
	return (*workflowDefinitionRepositoryPtrType)(v)
}

func (*workflowDefinitionRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowDefinitionRepository)(nil)).Elem()
}

func (i *workflowDefinitionRepositoryPtrType) ToWorkflowDefinitionRepositoryPtrOutput() WorkflowDefinitionRepositoryPtrOutput {
	return i.ToWorkflowDefinitionRepositoryPtrOutputWithContext(context.Background())
}

func (i *workflowDefinitionRepositoryPtrType) ToWorkflowDefinitionRepositoryPtrOutputWithContext(ctx context.Context) WorkflowDefinitionRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowDefinitionRepositoryPtrOutput)
}

type WorkflowDefinitionRepositoryOutput struct{ *pulumi.OutputState }

func (WorkflowDefinitionRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowDefinitionRepository)(nil)).Elem()
}

func (o WorkflowDefinitionRepositoryOutput) ToWorkflowDefinitionRepositoryOutput() WorkflowDefinitionRepositoryOutput {
	return o
}

func (o WorkflowDefinitionRepositoryOutput) ToWorkflowDefinitionRepositoryOutputWithContext(ctx context.Context) WorkflowDefinitionRepositoryOutput {
	return o
}

func (o WorkflowDefinitionRepositoryOutput) ToWorkflowDefinitionRepositoryPtrOutput() WorkflowDefinitionRepositoryPtrOutput {
	return o.ToWorkflowDefinitionRepositoryPtrOutputWithContext(context.Background())
}

func (o WorkflowDefinitionRepositoryOutput) ToWorkflowDefinitionRepositoryPtrOutputWithContext(ctx context.Context) WorkflowDefinitionRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WorkflowDefinitionRepository) *WorkflowDefinitionRepository {
		return &v
	}).(WorkflowDefinitionRepositoryPtrOutput)
}

// The Amazon Resource Name (ARN) of the connection to the source code repository.
func (o WorkflowDefinitionRepositoryOutput) ConnectionArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkflowDefinitionRepository) *string { return v.ConnectionArn }).(pulumi.StringPtrOutput)
}

// A list of file patterns to exclude when retrieving the workflow definition from the repository.
func (o WorkflowDefinitionRepositoryOutput) ExcludeFilePatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WorkflowDefinitionRepository) []string { return v.ExcludeFilePatterns }).(pulumi.StringArrayOutput)
}

// The full repository identifier, including the repository owner and name. For example, 'repository-owner/repository-name'.
func (o WorkflowDefinitionRepositoryOutput) FullRepositoryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkflowDefinitionRepository) *string { return v.FullRepositoryId }).(pulumi.StringPtrOutput)
}

// The source reference for the repository, such as a branch name, tag, or commit ID.
func (o WorkflowDefinitionRepositoryOutput) SourceReference() WorkflowSourceReferencePtrOutput {
	return o.ApplyT(func(v WorkflowDefinitionRepository) *WorkflowSourceReference { return v.SourceReference }).(WorkflowSourceReferencePtrOutput)
}

type WorkflowDefinitionRepositoryPtrOutput struct{ *pulumi.OutputState }

func (WorkflowDefinitionRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowDefinitionRepository)(nil)).Elem()
}

func (o WorkflowDefinitionRepositoryPtrOutput) ToWorkflowDefinitionRepositoryPtrOutput() WorkflowDefinitionRepositoryPtrOutput {
	return o
}

func (o WorkflowDefinitionRepositoryPtrOutput) ToWorkflowDefinitionRepositoryPtrOutputWithContext(ctx context.Context) WorkflowDefinitionRepositoryPtrOutput {
	return o
}

func (o WorkflowDefinitionRepositoryPtrOutput) Elem() WorkflowDefinitionRepositoryOutput {
	return o.ApplyT(func(v *WorkflowDefinitionRepository) WorkflowDefinitionRepository {
		if v != nil {
			return *v
		}
		var ret WorkflowDefinitionRepository
		return ret
	}).(WorkflowDefinitionRepositoryOutput)
}

// The Amazon Resource Name (ARN) of the connection to the source code repository.
func (o WorkflowDefinitionRepositoryPtrOutput) ConnectionArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowDefinitionRepository) *string {
		if v == nil {
			return nil
		}
		return v.ConnectionArn
	}).(pulumi.StringPtrOutput)
}

// A list of file patterns to exclude when retrieving the workflow definition from the repository.
func (o WorkflowDefinitionRepositoryPtrOutput) ExcludeFilePatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkflowDefinitionRepository) []string {
		if v == nil {
			return nil
		}
		return v.ExcludeFilePatterns
	}).(pulumi.StringArrayOutput)
}

// The full repository identifier, including the repository owner and name. For example, 'repository-owner/repository-name'.
func (o WorkflowDefinitionRepositoryPtrOutput) FullRepositoryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowDefinitionRepository) *string {
		if v == nil {
			return nil
		}
		return v.FullRepositoryId
	}).(pulumi.StringPtrOutput)
}

// The source reference for the repository, such as a branch name, tag, or commit ID.
func (o WorkflowDefinitionRepositoryPtrOutput) SourceReference() WorkflowSourceReferencePtrOutput {
	return o.ApplyT(func(v *WorkflowDefinitionRepository) *WorkflowSourceReference {
		if v == nil {
			return nil
		}
		return v.SourceReference
	}).(WorkflowSourceReferencePtrOutput)
}

type WorkflowParameter struct {
	// The parameter's description.
	Description *string `pulumi:"description"`
	// Whether the parameter is optional.
	Optional *bool `pulumi:"optional"`
}

// WorkflowParameterInput is an input type that accepts WorkflowParameterArgs and WorkflowParameterOutput values.
// You can construct a concrete instance of `WorkflowParameterInput` via:
//
//	WorkflowParameterArgs{...}
type WorkflowParameterInput interface {
	pulumi.Input

	ToWorkflowParameterOutput() WorkflowParameterOutput
	ToWorkflowParameterOutputWithContext(context.Context) WorkflowParameterOutput
}

type WorkflowParameterArgs struct {
	// The parameter's description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Whether the parameter is optional.
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (WorkflowParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowParameter)(nil)).Elem()
}

func (i WorkflowParameterArgs) ToWorkflowParameterOutput() WorkflowParameterOutput {
	return i.ToWorkflowParameterOutputWithContext(context.Background())
}

func (i WorkflowParameterArgs) ToWorkflowParameterOutputWithContext(ctx context.Context) WorkflowParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowParameterOutput)
}

// WorkflowParameterMapInput is an input type that accepts WorkflowParameterMap and WorkflowParameterMapOutput values.
// You can construct a concrete instance of `WorkflowParameterMapInput` via:
//
//	WorkflowParameterMap{ "key": WorkflowParameterArgs{...} }
type WorkflowParameterMapInput interface {
	pulumi.Input

	ToWorkflowParameterMapOutput() WorkflowParameterMapOutput
	ToWorkflowParameterMapOutputWithContext(context.Context) WorkflowParameterMapOutput
}

type WorkflowParameterMap map[string]WorkflowParameterInput

func (WorkflowParameterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]WorkflowParameter)(nil)).Elem()
}

func (i WorkflowParameterMap) ToWorkflowParameterMapOutput() WorkflowParameterMapOutput {
	return i.ToWorkflowParameterMapOutputWithContext(context.Background())
}

func (i WorkflowParameterMap) ToWorkflowParameterMapOutputWithContext(ctx context.Context) WorkflowParameterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowParameterMapOutput)
}

type WorkflowParameterOutput struct{ *pulumi.OutputState }

func (WorkflowParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowParameter)(nil)).Elem()
}

func (o WorkflowParameterOutput) ToWorkflowParameterOutput() WorkflowParameterOutput {
	return o
}

func (o WorkflowParameterOutput) ToWorkflowParameterOutputWithContext(ctx context.Context) WorkflowParameterOutput {
	return o
}

// The parameter's description.
func (o WorkflowParameterOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkflowParameter) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether the parameter is optional.
func (o WorkflowParameterOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WorkflowParameter) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type WorkflowParameterMapOutput struct{ *pulumi.OutputState }

func (WorkflowParameterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]WorkflowParameter)(nil)).Elem()
}

func (o WorkflowParameterMapOutput) ToWorkflowParameterMapOutput() WorkflowParameterMapOutput {
	return o
}

func (o WorkflowParameterMapOutput) ToWorkflowParameterMapOutputWithContext(ctx context.Context) WorkflowParameterMapOutput {
	return o
}

func (o WorkflowParameterMapOutput) MapIndex(k pulumi.StringInput) WorkflowParameterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) WorkflowParameter {
		return vs[0].(map[string]WorkflowParameter)[vs[1].(string)]
	}).(WorkflowParameterOutput)
}

type WorkflowSourceReference struct {
	// The type of source reference, such as branch, tag, or commit.
	Type *WorkflowSourceReferencetype `pulumi:"type"`
	// The value of the source reference, such as the branch name, tag name, or commit ID.
	Value *string `pulumi:"value"`
}

// WorkflowSourceReferenceInput is an input type that accepts WorkflowSourceReferenceArgs and WorkflowSourceReferenceOutput values.
// You can construct a concrete instance of `WorkflowSourceReferenceInput` via:
//
//	WorkflowSourceReferenceArgs{...}
type WorkflowSourceReferenceInput interface {
	pulumi.Input

	ToWorkflowSourceReferenceOutput() WorkflowSourceReferenceOutput
	ToWorkflowSourceReferenceOutputWithContext(context.Context) WorkflowSourceReferenceOutput
}

type WorkflowSourceReferenceArgs struct {
	// The type of source reference, such as branch, tag, or commit.
	Type WorkflowSourceReferencetypePtrInput `pulumi:"type"`
	// The value of the source reference, such as the branch name, tag name, or commit ID.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (WorkflowSourceReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowSourceReference)(nil)).Elem()
}

func (i WorkflowSourceReferenceArgs) ToWorkflowSourceReferenceOutput() WorkflowSourceReferenceOutput {
	return i.ToWorkflowSourceReferenceOutputWithContext(context.Background())
}

func (i WorkflowSourceReferenceArgs) ToWorkflowSourceReferenceOutputWithContext(ctx context.Context) WorkflowSourceReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowSourceReferenceOutput)
}

func (i WorkflowSourceReferenceArgs) ToWorkflowSourceReferencePtrOutput() WorkflowSourceReferencePtrOutput {
	return i.ToWorkflowSourceReferencePtrOutputWithContext(context.Background())
}

func (i WorkflowSourceReferenceArgs) ToWorkflowSourceReferencePtrOutputWithContext(ctx context.Context) WorkflowSourceReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowSourceReferenceOutput).ToWorkflowSourceReferencePtrOutputWithContext(ctx)
}

// WorkflowSourceReferencePtrInput is an input type that accepts WorkflowSourceReferenceArgs, WorkflowSourceReferencePtr and WorkflowSourceReferencePtrOutput values.
// You can construct a concrete instance of `WorkflowSourceReferencePtrInput` via:
//
//	        WorkflowSourceReferenceArgs{...}
//
//	or:
//
//	        nil
type WorkflowSourceReferencePtrInput interface {
	pulumi.Input

	ToWorkflowSourceReferencePtrOutput() WorkflowSourceReferencePtrOutput
	ToWorkflowSourceReferencePtrOutputWithContext(context.Context) WorkflowSourceReferencePtrOutput
}

type workflowSourceReferencePtrType WorkflowSourceReferenceArgs

func WorkflowSourceReferencePtr(v *WorkflowSourceReferenceArgs) WorkflowSourceReferencePtrInput {
	return (*workflowSourceReferencePtrType)(v)
}

func (*workflowSourceReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowSourceReference)(nil)).Elem()
}

func (i *workflowSourceReferencePtrType) ToWorkflowSourceReferencePtrOutput() WorkflowSourceReferencePtrOutput {
	return i.ToWorkflowSourceReferencePtrOutputWithContext(context.Background())
}

func (i *workflowSourceReferencePtrType) ToWorkflowSourceReferencePtrOutputWithContext(ctx context.Context) WorkflowSourceReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowSourceReferencePtrOutput)
}

type WorkflowSourceReferenceOutput struct{ *pulumi.OutputState }

func (WorkflowSourceReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowSourceReference)(nil)).Elem()
}

func (o WorkflowSourceReferenceOutput) ToWorkflowSourceReferenceOutput() WorkflowSourceReferenceOutput {
	return o
}

func (o WorkflowSourceReferenceOutput) ToWorkflowSourceReferenceOutputWithContext(ctx context.Context) WorkflowSourceReferenceOutput {
	return o
}

func (o WorkflowSourceReferenceOutput) ToWorkflowSourceReferencePtrOutput() WorkflowSourceReferencePtrOutput {
	return o.ToWorkflowSourceReferencePtrOutputWithContext(context.Background())
}

func (o WorkflowSourceReferenceOutput) ToWorkflowSourceReferencePtrOutputWithContext(ctx context.Context) WorkflowSourceReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WorkflowSourceReference) *WorkflowSourceReference {
		return &v
	}).(WorkflowSourceReferencePtrOutput)
}

// The type of source reference, such as branch, tag, or commit.
func (o WorkflowSourceReferenceOutput) Type() WorkflowSourceReferencetypePtrOutput {
	return o.ApplyT(func(v WorkflowSourceReference) *WorkflowSourceReferencetype { return v.Type }).(WorkflowSourceReferencetypePtrOutput)
}

// The value of the source reference, such as the branch name, tag name, or commit ID.
func (o WorkflowSourceReferenceOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkflowSourceReference) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type WorkflowSourceReferencePtrOutput struct{ *pulumi.OutputState }

func (WorkflowSourceReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowSourceReference)(nil)).Elem()
}

func (o WorkflowSourceReferencePtrOutput) ToWorkflowSourceReferencePtrOutput() WorkflowSourceReferencePtrOutput {
	return o
}

func (o WorkflowSourceReferencePtrOutput) ToWorkflowSourceReferencePtrOutputWithContext(ctx context.Context) WorkflowSourceReferencePtrOutput {
	return o
}

func (o WorkflowSourceReferencePtrOutput) Elem() WorkflowSourceReferenceOutput {
	return o.ApplyT(func(v *WorkflowSourceReference) WorkflowSourceReference {
		if v != nil {
			return *v
		}
		var ret WorkflowSourceReference
		return ret
	}).(WorkflowSourceReferenceOutput)
}

// The type of source reference, such as branch, tag, or commit.
func (o WorkflowSourceReferencePtrOutput) Type() WorkflowSourceReferencetypePtrOutput {
	return o.ApplyT(func(v *WorkflowSourceReference) *WorkflowSourceReferencetype {
		if v == nil {
			return nil
		}
		return v.Type
	}).(WorkflowSourceReferencetypePtrOutput)
}

// The value of the source reference, such as the branch name, tag name, or commit ID.
func (o WorkflowSourceReferencePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowSourceReference) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type WorkflowVersionDefinitionRepository struct {
	// The Amazon Resource Name (ARN) of the connection to the source code repository.
	ConnectionArn *string `pulumi:"connectionArn"`
	// A list of file patterns to exclude when retrieving the workflow definition from the repository.
	ExcludeFilePatterns []string `pulumi:"excludeFilePatterns"`
	// The full repository identifier, including the repository owner and name. For example, 'repository-owner/repository-name'.
	FullRepositoryId *string `pulumi:"fullRepositoryId"`
	// The source reference for the repository, such as a branch name, tag, or commit ID.
	SourceReference *WorkflowVersionSourceReference `pulumi:"sourceReference"`
}

// WorkflowVersionDefinitionRepositoryInput is an input type that accepts WorkflowVersionDefinitionRepositoryArgs and WorkflowVersionDefinitionRepositoryOutput values.
// You can construct a concrete instance of `WorkflowVersionDefinitionRepositoryInput` via:
//
//	WorkflowVersionDefinitionRepositoryArgs{...}
type WorkflowVersionDefinitionRepositoryInput interface {
	pulumi.Input

	ToWorkflowVersionDefinitionRepositoryOutput() WorkflowVersionDefinitionRepositoryOutput
	ToWorkflowVersionDefinitionRepositoryOutputWithContext(context.Context) WorkflowVersionDefinitionRepositoryOutput
}

type WorkflowVersionDefinitionRepositoryArgs struct {
	// The Amazon Resource Name (ARN) of the connection to the source code repository.
	ConnectionArn pulumi.StringPtrInput `pulumi:"connectionArn"`
	// A list of file patterns to exclude when retrieving the workflow definition from the repository.
	ExcludeFilePatterns pulumi.StringArrayInput `pulumi:"excludeFilePatterns"`
	// The full repository identifier, including the repository owner and name. For example, 'repository-owner/repository-name'.
	FullRepositoryId pulumi.StringPtrInput `pulumi:"fullRepositoryId"`
	// The source reference for the repository, such as a branch name, tag, or commit ID.
	SourceReference WorkflowVersionSourceReferencePtrInput `pulumi:"sourceReference"`
}

func (WorkflowVersionDefinitionRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowVersionDefinitionRepository)(nil)).Elem()
}

func (i WorkflowVersionDefinitionRepositoryArgs) ToWorkflowVersionDefinitionRepositoryOutput() WorkflowVersionDefinitionRepositoryOutput {
	return i.ToWorkflowVersionDefinitionRepositoryOutputWithContext(context.Background())
}

func (i WorkflowVersionDefinitionRepositoryArgs) ToWorkflowVersionDefinitionRepositoryOutputWithContext(ctx context.Context) WorkflowVersionDefinitionRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowVersionDefinitionRepositoryOutput)
}

func (i WorkflowVersionDefinitionRepositoryArgs) ToWorkflowVersionDefinitionRepositoryPtrOutput() WorkflowVersionDefinitionRepositoryPtrOutput {
	return i.ToWorkflowVersionDefinitionRepositoryPtrOutputWithContext(context.Background())
}

func (i WorkflowVersionDefinitionRepositoryArgs) ToWorkflowVersionDefinitionRepositoryPtrOutputWithContext(ctx context.Context) WorkflowVersionDefinitionRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowVersionDefinitionRepositoryOutput).ToWorkflowVersionDefinitionRepositoryPtrOutputWithContext(ctx)
}

// WorkflowVersionDefinitionRepositoryPtrInput is an input type that accepts WorkflowVersionDefinitionRepositoryArgs, WorkflowVersionDefinitionRepositoryPtr and WorkflowVersionDefinitionRepositoryPtrOutput values.
// You can construct a concrete instance of `WorkflowVersionDefinitionRepositoryPtrInput` via:
//
//	        WorkflowVersionDefinitionRepositoryArgs{...}
//
//	or:
//
//	        nil
type WorkflowVersionDefinitionRepositoryPtrInput interface {
	pulumi.Input

	ToWorkflowVersionDefinitionRepositoryPtrOutput() WorkflowVersionDefinitionRepositoryPtrOutput
	ToWorkflowVersionDefinitionRepositoryPtrOutputWithContext(context.Context) WorkflowVersionDefinitionRepositoryPtrOutput
}

type workflowVersionDefinitionRepositoryPtrType WorkflowVersionDefinitionRepositoryArgs

func WorkflowVersionDefinitionRepositoryPtr(v *WorkflowVersionDefinitionRepositoryArgs) WorkflowVersionDefinitionRepositoryPtrInput {
	return (*workflowVersionDefinitionRepositoryPtrType)(v)
}

func (*workflowVersionDefinitionRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowVersionDefinitionRepository)(nil)).Elem()
}

func (i *workflowVersionDefinitionRepositoryPtrType) ToWorkflowVersionDefinitionRepositoryPtrOutput() WorkflowVersionDefinitionRepositoryPtrOutput {
	return i.ToWorkflowVersionDefinitionRepositoryPtrOutputWithContext(context.Background())
}

func (i *workflowVersionDefinitionRepositoryPtrType) ToWorkflowVersionDefinitionRepositoryPtrOutputWithContext(ctx context.Context) WorkflowVersionDefinitionRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowVersionDefinitionRepositoryPtrOutput)
}

type WorkflowVersionDefinitionRepositoryOutput struct{ *pulumi.OutputState }

func (WorkflowVersionDefinitionRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowVersionDefinitionRepository)(nil)).Elem()
}

func (o WorkflowVersionDefinitionRepositoryOutput) ToWorkflowVersionDefinitionRepositoryOutput() WorkflowVersionDefinitionRepositoryOutput {
	return o
}

func (o WorkflowVersionDefinitionRepositoryOutput) ToWorkflowVersionDefinitionRepositoryOutputWithContext(ctx context.Context) WorkflowVersionDefinitionRepositoryOutput {
	return o
}

func (o WorkflowVersionDefinitionRepositoryOutput) ToWorkflowVersionDefinitionRepositoryPtrOutput() WorkflowVersionDefinitionRepositoryPtrOutput {
	return o.ToWorkflowVersionDefinitionRepositoryPtrOutputWithContext(context.Background())
}

func (o WorkflowVersionDefinitionRepositoryOutput) ToWorkflowVersionDefinitionRepositoryPtrOutputWithContext(ctx context.Context) WorkflowVersionDefinitionRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WorkflowVersionDefinitionRepository) *WorkflowVersionDefinitionRepository {
		return &v
	}).(WorkflowVersionDefinitionRepositoryPtrOutput)
}

// The Amazon Resource Name (ARN) of the connection to the source code repository.
func (o WorkflowVersionDefinitionRepositoryOutput) ConnectionArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkflowVersionDefinitionRepository) *string { return v.ConnectionArn }).(pulumi.StringPtrOutput)
}

// A list of file patterns to exclude when retrieving the workflow definition from the repository.
func (o WorkflowVersionDefinitionRepositoryOutput) ExcludeFilePatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WorkflowVersionDefinitionRepository) []string { return v.ExcludeFilePatterns }).(pulumi.StringArrayOutput)
}

// The full repository identifier, including the repository owner and name. For example, 'repository-owner/repository-name'.
func (o WorkflowVersionDefinitionRepositoryOutput) FullRepositoryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkflowVersionDefinitionRepository) *string { return v.FullRepositoryId }).(pulumi.StringPtrOutput)
}

// The source reference for the repository, such as a branch name, tag, or commit ID.
func (o WorkflowVersionDefinitionRepositoryOutput) SourceReference() WorkflowVersionSourceReferencePtrOutput {
	return o.ApplyT(func(v WorkflowVersionDefinitionRepository) *WorkflowVersionSourceReference { return v.SourceReference }).(WorkflowVersionSourceReferencePtrOutput)
}

type WorkflowVersionDefinitionRepositoryPtrOutput struct{ *pulumi.OutputState }

func (WorkflowVersionDefinitionRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowVersionDefinitionRepository)(nil)).Elem()
}

func (o WorkflowVersionDefinitionRepositoryPtrOutput) ToWorkflowVersionDefinitionRepositoryPtrOutput() WorkflowVersionDefinitionRepositoryPtrOutput {
	return o
}

func (o WorkflowVersionDefinitionRepositoryPtrOutput) ToWorkflowVersionDefinitionRepositoryPtrOutputWithContext(ctx context.Context) WorkflowVersionDefinitionRepositoryPtrOutput {
	return o
}

func (o WorkflowVersionDefinitionRepositoryPtrOutput) Elem() WorkflowVersionDefinitionRepositoryOutput {
	return o.ApplyT(func(v *WorkflowVersionDefinitionRepository) WorkflowVersionDefinitionRepository {
		if v != nil {
			return *v
		}
		var ret WorkflowVersionDefinitionRepository
		return ret
	}).(WorkflowVersionDefinitionRepositoryOutput)
}

// The Amazon Resource Name (ARN) of the connection to the source code repository.
func (o WorkflowVersionDefinitionRepositoryPtrOutput) ConnectionArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowVersionDefinitionRepository) *string {
		if v == nil {
			return nil
		}
		return v.ConnectionArn
	}).(pulumi.StringPtrOutput)
}

// A list of file patterns to exclude when retrieving the workflow definition from the repository.
func (o WorkflowVersionDefinitionRepositoryPtrOutput) ExcludeFilePatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkflowVersionDefinitionRepository) []string {
		if v == nil {
			return nil
		}
		return v.ExcludeFilePatterns
	}).(pulumi.StringArrayOutput)
}

// The full repository identifier, including the repository owner and name. For example, 'repository-owner/repository-name'.
func (o WorkflowVersionDefinitionRepositoryPtrOutput) FullRepositoryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowVersionDefinitionRepository) *string {
		if v == nil {
			return nil
		}
		return v.FullRepositoryId
	}).(pulumi.StringPtrOutput)
}

// The source reference for the repository, such as a branch name, tag, or commit ID.
func (o WorkflowVersionDefinitionRepositoryPtrOutput) SourceReference() WorkflowVersionSourceReferencePtrOutput {
	return o.ApplyT(func(v *WorkflowVersionDefinitionRepository) *WorkflowVersionSourceReference {
		if v == nil {
			return nil
		}
		return v.SourceReference
	}).(WorkflowVersionSourceReferencePtrOutput)
}

type WorkflowVersionSourceReference struct {
	// The type of source reference, such as branch, tag, or commit.
	Type *WorkflowVersionSourceReferencetype `pulumi:"type"`
	// The value of the source reference, such as the branch name, tag name, or commit ID.
	Value *string `pulumi:"value"`
}

// WorkflowVersionSourceReferenceInput is an input type that accepts WorkflowVersionSourceReferenceArgs and WorkflowVersionSourceReferenceOutput values.
// You can construct a concrete instance of `WorkflowVersionSourceReferenceInput` via:
//
//	WorkflowVersionSourceReferenceArgs{...}
type WorkflowVersionSourceReferenceInput interface {
	pulumi.Input

	ToWorkflowVersionSourceReferenceOutput() WorkflowVersionSourceReferenceOutput
	ToWorkflowVersionSourceReferenceOutputWithContext(context.Context) WorkflowVersionSourceReferenceOutput
}

type WorkflowVersionSourceReferenceArgs struct {
	// The type of source reference, such as branch, tag, or commit.
	Type WorkflowVersionSourceReferencetypePtrInput `pulumi:"type"`
	// The value of the source reference, such as the branch name, tag name, or commit ID.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (WorkflowVersionSourceReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowVersionSourceReference)(nil)).Elem()
}

func (i WorkflowVersionSourceReferenceArgs) ToWorkflowVersionSourceReferenceOutput() WorkflowVersionSourceReferenceOutput {
	return i.ToWorkflowVersionSourceReferenceOutputWithContext(context.Background())
}

func (i WorkflowVersionSourceReferenceArgs) ToWorkflowVersionSourceReferenceOutputWithContext(ctx context.Context) WorkflowVersionSourceReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowVersionSourceReferenceOutput)
}

func (i WorkflowVersionSourceReferenceArgs) ToWorkflowVersionSourceReferencePtrOutput() WorkflowVersionSourceReferencePtrOutput {
	return i.ToWorkflowVersionSourceReferencePtrOutputWithContext(context.Background())
}

func (i WorkflowVersionSourceReferenceArgs) ToWorkflowVersionSourceReferencePtrOutputWithContext(ctx context.Context) WorkflowVersionSourceReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowVersionSourceReferenceOutput).ToWorkflowVersionSourceReferencePtrOutputWithContext(ctx)
}

// WorkflowVersionSourceReferencePtrInput is an input type that accepts WorkflowVersionSourceReferenceArgs, WorkflowVersionSourceReferencePtr and WorkflowVersionSourceReferencePtrOutput values.
// You can construct a concrete instance of `WorkflowVersionSourceReferencePtrInput` via:
//
//	        WorkflowVersionSourceReferenceArgs{...}
//
//	or:
//
//	        nil
type WorkflowVersionSourceReferencePtrInput interface {
	pulumi.Input

	ToWorkflowVersionSourceReferencePtrOutput() WorkflowVersionSourceReferencePtrOutput
	ToWorkflowVersionSourceReferencePtrOutputWithContext(context.Context) WorkflowVersionSourceReferencePtrOutput
}

type workflowVersionSourceReferencePtrType WorkflowVersionSourceReferenceArgs

func WorkflowVersionSourceReferencePtr(v *WorkflowVersionSourceReferenceArgs) WorkflowVersionSourceReferencePtrInput {
	return (*workflowVersionSourceReferencePtrType)(v)
}

func (*workflowVersionSourceReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowVersionSourceReference)(nil)).Elem()
}

func (i *workflowVersionSourceReferencePtrType) ToWorkflowVersionSourceReferencePtrOutput() WorkflowVersionSourceReferencePtrOutput {
	return i.ToWorkflowVersionSourceReferencePtrOutputWithContext(context.Background())
}

func (i *workflowVersionSourceReferencePtrType) ToWorkflowVersionSourceReferencePtrOutputWithContext(ctx context.Context) WorkflowVersionSourceReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowVersionSourceReferencePtrOutput)
}

type WorkflowVersionSourceReferenceOutput struct{ *pulumi.OutputState }

func (WorkflowVersionSourceReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowVersionSourceReference)(nil)).Elem()
}

func (o WorkflowVersionSourceReferenceOutput) ToWorkflowVersionSourceReferenceOutput() WorkflowVersionSourceReferenceOutput {
	return o
}

func (o WorkflowVersionSourceReferenceOutput) ToWorkflowVersionSourceReferenceOutputWithContext(ctx context.Context) WorkflowVersionSourceReferenceOutput {
	return o
}

func (o WorkflowVersionSourceReferenceOutput) ToWorkflowVersionSourceReferencePtrOutput() WorkflowVersionSourceReferencePtrOutput {
	return o.ToWorkflowVersionSourceReferencePtrOutputWithContext(context.Background())
}

func (o WorkflowVersionSourceReferenceOutput) ToWorkflowVersionSourceReferencePtrOutputWithContext(ctx context.Context) WorkflowVersionSourceReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WorkflowVersionSourceReference) *WorkflowVersionSourceReference {
		return &v
	}).(WorkflowVersionSourceReferencePtrOutput)
}

// The type of source reference, such as branch, tag, or commit.
func (o WorkflowVersionSourceReferenceOutput) Type() WorkflowVersionSourceReferencetypePtrOutput {
	return o.ApplyT(func(v WorkflowVersionSourceReference) *WorkflowVersionSourceReferencetype { return v.Type }).(WorkflowVersionSourceReferencetypePtrOutput)
}

// The value of the source reference, such as the branch name, tag name, or commit ID.
func (o WorkflowVersionSourceReferenceOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkflowVersionSourceReference) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type WorkflowVersionSourceReferencePtrOutput struct{ *pulumi.OutputState }

func (WorkflowVersionSourceReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowVersionSourceReference)(nil)).Elem()
}

func (o WorkflowVersionSourceReferencePtrOutput) ToWorkflowVersionSourceReferencePtrOutput() WorkflowVersionSourceReferencePtrOutput {
	return o
}

func (o WorkflowVersionSourceReferencePtrOutput) ToWorkflowVersionSourceReferencePtrOutputWithContext(ctx context.Context) WorkflowVersionSourceReferencePtrOutput {
	return o
}

func (o WorkflowVersionSourceReferencePtrOutput) Elem() WorkflowVersionSourceReferenceOutput {
	return o.ApplyT(func(v *WorkflowVersionSourceReference) WorkflowVersionSourceReference {
		if v != nil {
			return *v
		}
		var ret WorkflowVersionSourceReference
		return ret
	}).(WorkflowVersionSourceReferenceOutput)
}

// The type of source reference, such as branch, tag, or commit.
func (o WorkflowVersionSourceReferencePtrOutput) Type() WorkflowVersionSourceReferencetypePtrOutput {
	return o.ApplyT(func(v *WorkflowVersionSourceReference) *WorkflowVersionSourceReferencetype {
		if v == nil {
			return nil
		}
		return v.Type
	}).(WorkflowVersionSourceReferencetypePtrOutput)
}

// The value of the source reference, such as the branch name, tag name, or commit ID.
func (o WorkflowVersionSourceReferencePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowVersionSourceReference) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type WorkflowVersionWorkflowParameter struct {
	// The parameter's description.
	Description *string `pulumi:"description"`
	// Whether the parameter is optional.
	Optional *bool `pulumi:"optional"`
}

// WorkflowVersionWorkflowParameterInput is an input type that accepts WorkflowVersionWorkflowParameterArgs and WorkflowVersionWorkflowParameterOutput values.
// You can construct a concrete instance of `WorkflowVersionWorkflowParameterInput` via:
//
//	WorkflowVersionWorkflowParameterArgs{...}
type WorkflowVersionWorkflowParameterInput interface {
	pulumi.Input

	ToWorkflowVersionWorkflowParameterOutput() WorkflowVersionWorkflowParameterOutput
	ToWorkflowVersionWorkflowParameterOutputWithContext(context.Context) WorkflowVersionWorkflowParameterOutput
}

type WorkflowVersionWorkflowParameterArgs struct {
	// The parameter's description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Whether the parameter is optional.
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (WorkflowVersionWorkflowParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowVersionWorkflowParameter)(nil)).Elem()
}

func (i WorkflowVersionWorkflowParameterArgs) ToWorkflowVersionWorkflowParameterOutput() WorkflowVersionWorkflowParameterOutput {
	return i.ToWorkflowVersionWorkflowParameterOutputWithContext(context.Background())
}

func (i WorkflowVersionWorkflowParameterArgs) ToWorkflowVersionWorkflowParameterOutputWithContext(ctx context.Context) WorkflowVersionWorkflowParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowVersionWorkflowParameterOutput)
}

// WorkflowVersionWorkflowParameterMapInput is an input type that accepts WorkflowVersionWorkflowParameterMap and WorkflowVersionWorkflowParameterMapOutput values.
// You can construct a concrete instance of `WorkflowVersionWorkflowParameterMapInput` via:
//
//	WorkflowVersionWorkflowParameterMap{ "key": WorkflowVersionWorkflowParameterArgs{...} }
type WorkflowVersionWorkflowParameterMapInput interface {
	pulumi.Input

	ToWorkflowVersionWorkflowParameterMapOutput() WorkflowVersionWorkflowParameterMapOutput
	ToWorkflowVersionWorkflowParameterMapOutputWithContext(context.Context) WorkflowVersionWorkflowParameterMapOutput
}

type WorkflowVersionWorkflowParameterMap map[string]WorkflowVersionWorkflowParameterInput

func (WorkflowVersionWorkflowParameterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]WorkflowVersionWorkflowParameter)(nil)).Elem()
}

func (i WorkflowVersionWorkflowParameterMap) ToWorkflowVersionWorkflowParameterMapOutput() WorkflowVersionWorkflowParameterMapOutput {
	return i.ToWorkflowVersionWorkflowParameterMapOutputWithContext(context.Background())
}

func (i WorkflowVersionWorkflowParameterMap) ToWorkflowVersionWorkflowParameterMapOutputWithContext(ctx context.Context) WorkflowVersionWorkflowParameterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowVersionWorkflowParameterMapOutput)
}

type WorkflowVersionWorkflowParameterOutput struct{ *pulumi.OutputState }

func (WorkflowVersionWorkflowParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowVersionWorkflowParameter)(nil)).Elem()
}

func (o WorkflowVersionWorkflowParameterOutput) ToWorkflowVersionWorkflowParameterOutput() WorkflowVersionWorkflowParameterOutput {
	return o
}

func (o WorkflowVersionWorkflowParameterOutput) ToWorkflowVersionWorkflowParameterOutputWithContext(ctx context.Context) WorkflowVersionWorkflowParameterOutput {
	return o
}

// The parameter's description.
func (o WorkflowVersionWorkflowParameterOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkflowVersionWorkflowParameter) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether the parameter is optional.
func (o WorkflowVersionWorkflowParameterOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WorkflowVersionWorkflowParameter) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type WorkflowVersionWorkflowParameterMapOutput struct{ *pulumi.OutputState }

func (WorkflowVersionWorkflowParameterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]WorkflowVersionWorkflowParameter)(nil)).Elem()
}

func (o WorkflowVersionWorkflowParameterMapOutput) ToWorkflowVersionWorkflowParameterMapOutput() WorkflowVersionWorkflowParameterMapOutput {
	return o
}

func (o WorkflowVersionWorkflowParameterMapOutput) ToWorkflowVersionWorkflowParameterMapOutputWithContext(ctx context.Context) WorkflowVersionWorkflowParameterMapOutput {
	return o
}

func (o WorkflowVersionWorkflowParameterMapOutput) MapIndex(k pulumi.StringInput) WorkflowVersionWorkflowParameterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) WorkflowVersionWorkflowParameter {
		return vs[0].(map[string]WorkflowVersionWorkflowParameter)[vs[1].(string)]
	}).(WorkflowVersionWorkflowParameterOutput)
}

type AnnotationStoreSchemaValueTypeMapArray []AnnotationStoreSchemaValueTypeMapInput

func (AnnotationStoreSchemaValueTypeMapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]map[string]AnnotationStoreSchemaValueType)(nil)).Elem()
}

func (i AnnotationStoreSchemaValueTypeMapArray) ToAnnotationStoreSchemaValueTypeMapArrayOutput() AnnotationStoreSchemaValueTypeMapArrayOutput {
	return i.ToAnnotationStoreSchemaValueTypeMapArrayOutputWithContext(context.Background())
}

func (i AnnotationStoreSchemaValueTypeMapArray) ToAnnotationStoreSchemaValueTypeMapArrayOutputWithContext(ctx context.Context) AnnotationStoreSchemaValueTypeMapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnnotationStoreSchemaValueTypeMapArrayOutput)
}

// AnnotationStoreSchemaValueTypeMapArrayInput is an input type that accepts AnnotationStoreSchemaValueTypeMapArray and AnnotationStoreSchemaValueTypeMapArrayOutput values.
// You can construct a concrete instance of `AnnotationStoreSchemaValueTypeMapArrayInput` via:
//
//	AnnotationStoreSchemaValueTypeMapArray{ AnnotationStoreSchemaValueTypeMap{ "key": AnnotationStoreSchemaValueTypeArgs{...} } }
type AnnotationStoreSchemaValueTypeMapArrayInput interface {
	pulumi.Input

	ToAnnotationStoreSchemaValueTypeMapArrayOutput() AnnotationStoreSchemaValueTypeMapArrayOutput
	ToAnnotationStoreSchemaValueTypeMapArrayOutputWithContext(context.Context) AnnotationStoreSchemaValueTypeMapArrayOutput
}

type AnnotationStoreSchemaValueTypeMapArrayOutput struct{ *pulumi.OutputState }

func (AnnotationStoreSchemaValueTypeMapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]map[string]AnnotationStoreSchemaValueType)(nil)).Elem()
}

func (o AnnotationStoreSchemaValueTypeMapArrayOutput) ToAnnotationStoreSchemaValueTypeMapArrayOutput() AnnotationStoreSchemaValueTypeMapArrayOutput {
	return o
}

func (o AnnotationStoreSchemaValueTypeMapArrayOutput) ToAnnotationStoreSchemaValueTypeMapArrayOutputWithContext(ctx context.Context) AnnotationStoreSchemaValueTypeMapArrayOutput {
	return o
}

func (o AnnotationStoreSchemaValueTypeMapArrayOutput) Index(i pulumi.IntInput) AnnotationStoreSchemaValueTypeMapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) map[string]AnnotationStoreSchemaValueType {
		return vs[0].([]map[string]AnnotationStoreSchemaValueType)[vs[1].(int)]
	}).(AnnotationStoreSchemaValueTypeMapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AnnotationStoreReferenceItemInput)(nil)).Elem(), AnnotationStoreReferenceItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnnotationStoreReferenceItemPtrInput)(nil)).Elem(), AnnotationStoreReferenceItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnnotationStoreSseConfigInput)(nil)).Elem(), AnnotationStoreSseConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnnotationStoreSseConfigPtrInput)(nil)).Elem(), AnnotationStoreSseConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnnotationStoreStoreOptionsPropertiesInput)(nil)).Elem(), AnnotationStoreStoreOptionsPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnnotationStoreStoreOptionsPropertiesPtrInput)(nil)).Elem(), AnnotationStoreStoreOptionsPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnnotationStoreTsvStoreOptionsInput)(nil)).Elem(), AnnotationStoreTsvStoreOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnnotationStoreTsvStoreOptionsPtrInput)(nil)).Elem(), AnnotationStoreTsvStoreOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReferenceStoreSseConfigInput)(nil)).Elem(), ReferenceStoreSseConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReferenceStoreSseConfigPtrInput)(nil)).Elem(), ReferenceStoreSseConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SequenceStoreSseConfigInput)(nil)).Elem(), SequenceStoreSseConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SequenceStoreSseConfigPtrInput)(nil)).Elem(), SequenceStoreSseConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VariantStoreReferenceItemInput)(nil)).Elem(), VariantStoreReferenceItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VariantStoreSseConfigInput)(nil)).Elem(), VariantStoreSseConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VariantStoreSseConfigPtrInput)(nil)).Elem(), VariantStoreSseConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowDefinitionRepositoryInput)(nil)).Elem(), WorkflowDefinitionRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowDefinitionRepositoryPtrInput)(nil)).Elem(), WorkflowDefinitionRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowParameterInput)(nil)).Elem(), WorkflowParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowParameterMapInput)(nil)).Elem(), WorkflowParameterMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowSourceReferenceInput)(nil)).Elem(), WorkflowSourceReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowSourceReferencePtrInput)(nil)).Elem(), WorkflowSourceReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowVersionDefinitionRepositoryInput)(nil)).Elem(), WorkflowVersionDefinitionRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowVersionDefinitionRepositoryPtrInput)(nil)).Elem(), WorkflowVersionDefinitionRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowVersionSourceReferenceInput)(nil)).Elem(), WorkflowVersionSourceReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowVersionSourceReferencePtrInput)(nil)).Elem(), WorkflowVersionSourceReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowVersionWorkflowParameterInput)(nil)).Elem(), WorkflowVersionWorkflowParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowVersionWorkflowParameterMapInput)(nil)).Elem(), WorkflowVersionWorkflowParameterMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnnotationStoreSchemaValueTypeMapArrayInput)(nil)).Elem(), AnnotationStoreSchemaValueTypeMapArray{})
	pulumi.RegisterOutputType(AnnotationStoreReferenceItemOutput{})
	pulumi.RegisterOutputType(AnnotationStoreReferenceItemPtrOutput{})
	pulumi.RegisterOutputType(AnnotationStoreSseConfigOutput{})
	pulumi.RegisterOutputType(AnnotationStoreSseConfigPtrOutput{})
	pulumi.RegisterOutputType(AnnotationStoreStoreOptionsPropertiesOutput{})
	pulumi.RegisterOutputType(AnnotationStoreStoreOptionsPropertiesPtrOutput{})
	pulumi.RegisterOutputType(AnnotationStoreTsvStoreOptionsOutput{})
	pulumi.RegisterOutputType(AnnotationStoreTsvStoreOptionsPtrOutput{})
	pulumi.RegisterOutputType(ReferenceStoreSseConfigOutput{})
	pulumi.RegisterOutputType(ReferenceStoreSseConfigPtrOutput{})
	pulumi.RegisterOutputType(SequenceStoreSseConfigOutput{})
	pulumi.RegisterOutputType(SequenceStoreSseConfigPtrOutput{})
	pulumi.RegisterOutputType(VariantStoreReferenceItemOutput{})
	pulumi.RegisterOutputType(VariantStoreSseConfigOutput{})
	pulumi.RegisterOutputType(VariantStoreSseConfigPtrOutput{})
	pulumi.RegisterOutputType(WorkflowDefinitionRepositoryOutput{})
	pulumi.RegisterOutputType(WorkflowDefinitionRepositoryPtrOutput{})
	pulumi.RegisterOutputType(WorkflowParameterOutput{})
	pulumi.RegisterOutputType(WorkflowParameterMapOutput{})
	pulumi.RegisterOutputType(WorkflowSourceReferenceOutput{})
	pulumi.RegisterOutputType(WorkflowSourceReferencePtrOutput{})
	pulumi.RegisterOutputType(WorkflowVersionDefinitionRepositoryOutput{})
	pulumi.RegisterOutputType(WorkflowVersionDefinitionRepositoryPtrOutput{})
	pulumi.RegisterOutputType(WorkflowVersionSourceReferenceOutput{})
	pulumi.RegisterOutputType(WorkflowVersionSourceReferencePtrOutput{})
	pulumi.RegisterOutputType(WorkflowVersionWorkflowParameterOutput{})
	pulumi.RegisterOutputType(WorkflowVersionWorkflowParameterMapOutput{})
	pulumi.RegisterOutputType(AnnotationStoreSchemaValueTypeMapArrayOutput{})
}
