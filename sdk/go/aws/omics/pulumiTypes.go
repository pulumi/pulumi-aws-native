// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package omics

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type AnnotationStoreFormatToHeader struct {
}

// AnnotationStoreFormatToHeaderInput is an input type that accepts AnnotationStoreFormatToHeaderArgs and AnnotationStoreFormatToHeaderOutput values.
// You can construct a concrete instance of `AnnotationStoreFormatToHeaderInput` via:
//
//	AnnotationStoreFormatToHeaderArgs{...}
type AnnotationStoreFormatToHeaderInput interface {
	pulumi.Input

	ToAnnotationStoreFormatToHeaderOutput() AnnotationStoreFormatToHeaderOutput
	ToAnnotationStoreFormatToHeaderOutputWithContext(context.Context) AnnotationStoreFormatToHeaderOutput
}

type AnnotationStoreFormatToHeaderArgs struct {
}

func (AnnotationStoreFormatToHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnnotationStoreFormatToHeader)(nil)).Elem()
}

func (i AnnotationStoreFormatToHeaderArgs) ToAnnotationStoreFormatToHeaderOutput() AnnotationStoreFormatToHeaderOutput {
	return i.ToAnnotationStoreFormatToHeaderOutputWithContext(context.Background())
}

func (i AnnotationStoreFormatToHeaderArgs) ToAnnotationStoreFormatToHeaderOutputWithContext(ctx context.Context) AnnotationStoreFormatToHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnnotationStoreFormatToHeaderOutput)
}

func (i AnnotationStoreFormatToHeaderArgs) ToOutput(ctx context.Context) pulumix.Output[AnnotationStoreFormatToHeader] {
	return pulumix.Output[AnnotationStoreFormatToHeader]{
		OutputState: i.ToAnnotationStoreFormatToHeaderOutputWithContext(ctx).OutputState,
	}
}

func (i AnnotationStoreFormatToHeaderArgs) ToAnnotationStoreFormatToHeaderPtrOutput() AnnotationStoreFormatToHeaderPtrOutput {
	return i.ToAnnotationStoreFormatToHeaderPtrOutputWithContext(context.Background())
}

func (i AnnotationStoreFormatToHeaderArgs) ToAnnotationStoreFormatToHeaderPtrOutputWithContext(ctx context.Context) AnnotationStoreFormatToHeaderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnnotationStoreFormatToHeaderOutput).ToAnnotationStoreFormatToHeaderPtrOutputWithContext(ctx)
}

// AnnotationStoreFormatToHeaderPtrInput is an input type that accepts AnnotationStoreFormatToHeaderArgs, AnnotationStoreFormatToHeaderPtr and AnnotationStoreFormatToHeaderPtrOutput values.
// You can construct a concrete instance of `AnnotationStoreFormatToHeaderPtrInput` via:
//
//	        AnnotationStoreFormatToHeaderArgs{...}
//
//	or:
//
//	        nil
type AnnotationStoreFormatToHeaderPtrInput interface {
	pulumi.Input

	ToAnnotationStoreFormatToHeaderPtrOutput() AnnotationStoreFormatToHeaderPtrOutput
	ToAnnotationStoreFormatToHeaderPtrOutputWithContext(context.Context) AnnotationStoreFormatToHeaderPtrOutput
}

type annotationStoreFormatToHeaderPtrType AnnotationStoreFormatToHeaderArgs

func AnnotationStoreFormatToHeaderPtr(v *AnnotationStoreFormatToHeaderArgs) AnnotationStoreFormatToHeaderPtrInput {
	return (*annotationStoreFormatToHeaderPtrType)(v)
}

func (*annotationStoreFormatToHeaderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnnotationStoreFormatToHeader)(nil)).Elem()
}

func (i *annotationStoreFormatToHeaderPtrType) ToAnnotationStoreFormatToHeaderPtrOutput() AnnotationStoreFormatToHeaderPtrOutput {
	return i.ToAnnotationStoreFormatToHeaderPtrOutputWithContext(context.Background())
}

func (i *annotationStoreFormatToHeaderPtrType) ToAnnotationStoreFormatToHeaderPtrOutputWithContext(ctx context.Context) AnnotationStoreFormatToHeaderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnnotationStoreFormatToHeaderPtrOutput)
}

func (i *annotationStoreFormatToHeaderPtrType) ToOutput(ctx context.Context) pulumix.Output[*AnnotationStoreFormatToHeader] {
	return pulumix.Output[*AnnotationStoreFormatToHeader]{
		OutputState: i.ToAnnotationStoreFormatToHeaderPtrOutputWithContext(ctx).OutputState,
	}
}

type AnnotationStoreFormatToHeaderOutput struct{ *pulumi.OutputState }

func (AnnotationStoreFormatToHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnnotationStoreFormatToHeader)(nil)).Elem()
}

func (o AnnotationStoreFormatToHeaderOutput) ToAnnotationStoreFormatToHeaderOutput() AnnotationStoreFormatToHeaderOutput {
	return o
}

func (o AnnotationStoreFormatToHeaderOutput) ToAnnotationStoreFormatToHeaderOutputWithContext(ctx context.Context) AnnotationStoreFormatToHeaderOutput {
	return o
}

func (o AnnotationStoreFormatToHeaderOutput) ToAnnotationStoreFormatToHeaderPtrOutput() AnnotationStoreFormatToHeaderPtrOutput {
	return o.ToAnnotationStoreFormatToHeaderPtrOutputWithContext(context.Background())
}

func (o AnnotationStoreFormatToHeaderOutput) ToAnnotationStoreFormatToHeaderPtrOutputWithContext(ctx context.Context) AnnotationStoreFormatToHeaderPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnnotationStoreFormatToHeader) *AnnotationStoreFormatToHeader {
		return &v
	}).(AnnotationStoreFormatToHeaderPtrOutput)
}

func (o AnnotationStoreFormatToHeaderOutput) ToOutput(ctx context.Context) pulumix.Output[AnnotationStoreFormatToHeader] {
	return pulumix.Output[AnnotationStoreFormatToHeader]{
		OutputState: o.OutputState,
	}
}

type AnnotationStoreFormatToHeaderPtrOutput struct{ *pulumi.OutputState }

func (AnnotationStoreFormatToHeaderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnnotationStoreFormatToHeader)(nil)).Elem()
}

func (o AnnotationStoreFormatToHeaderPtrOutput) ToAnnotationStoreFormatToHeaderPtrOutput() AnnotationStoreFormatToHeaderPtrOutput {
	return o
}

func (o AnnotationStoreFormatToHeaderPtrOutput) ToAnnotationStoreFormatToHeaderPtrOutputWithContext(ctx context.Context) AnnotationStoreFormatToHeaderPtrOutput {
	return o
}

func (o AnnotationStoreFormatToHeaderPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AnnotationStoreFormatToHeader] {
	return pulumix.Output[*AnnotationStoreFormatToHeader]{
		OutputState: o.OutputState,
	}
}

func (o AnnotationStoreFormatToHeaderPtrOutput) Elem() AnnotationStoreFormatToHeaderOutput {
	return o.ApplyT(func(v *AnnotationStoreFormatToHeader) AnnotationStoreFormatToHeader {
		if v != nil {
			return *v
		}
		var ret AnnotationStoreFormatToHeader
		return ret
	}).(AnnotationStoreFormatToHeaderOutput)
}

type AnnotationStoreReferenceItem struct {
	ReferenceArn string `pulumi:"referenceArn"`
}

// AnnotationStoreReferenceItemInput is an input type that accepts AnnotationStoreReferenceItemArgs and AnnotationStoreReferenceItemOutput values.
// You can construct a concrete instance of `AnnotationStoreReferenceItemInput` via:
//
//	AnnotationStoreReferenceItemArgs{...}
type AnnotationStoreReferenceItemInput interface {
	pulumi.Input

	ToAnnotationStoreReferenceItemOutput() AnnotationStoreReferenceItemOutput
	ToAnnotationStoreReferenceItemOutputWithContext(context.Context) AnnotationStoreReferenceItemOutput
}

type AnnotationStoreReferenceItemArgs struct {
	ReferenceArn pulumi.StringInput `pulumi:"referenceArn"`
}

func (AnnotationStoreReferenceItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnnotationStoreReferenceItem)(nil)).Elem()
}

func (i AnnotationStoreReferenceItemArgs) ToAnnotationStoreReferenceItemOutput() AnnotationStoreReferenceItemOutput {
	return i.ToAnnotationStoreReferenceItemOutputWithContext(context.Background())
}

func (i AnnotationStoreReferenceItemArgs) ToAnnotationStoreReferenceItemOutputWithContext(ctx context.Context) AnnotationStoreReferenceItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnnotationStoreReferenceItemOutput)
}

func (i AnnotationStoreReferenceItemArgs) ToOutput(ctx context.Context) pulumix.Output[AnnotationStoreReferenceItem] {
	return pulumix.Output[AnnotationStoreReferenceItem]{
		OutputState: i.ToAnnotationStoreReferenceItemOutputWithContext(ctx).OutputState,
	}
}

func (i AnnotationStoreReferenceItemArgs) ToAnnotationStoreReferenceItemPtrOutput() AnnotationStoreReferenceItemPtrOutput {
	return i.ToAnnotationStoreReferenceItemPtrOutputWithContext(context.Background())
}

func (i AnnotationStoreReferenceItemArgs) ToAnnotationStoreReferenceItemPtrOutputWithContext(ctx context.Context) AnnotationStoreReferenceItemPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnnotationStoreReferenceItemOutput).ToAnnotationStoreReferenceItemPtrOutputWithContext(ctx)
}

// AnnotationStoreReferenceItemPtrInput is an input type that accepts AnnotationStoreReferenceItemArgs, AnnotationStoreReferenceItemPtr and AnnotationStoreReferenceItemPtrOutput values.
// You can construct a concrete instance of `AnnotationStoreReferenceItemPtrInput` via:
//
//	        AnnotationStoreReferenceItemArgs{...}
//
//	or:
//
//	        nil
type AnnotationStoreReferenceItemPtrInput interface {
	pulumi.Input

	ToAnnotationStoreReferenceItemPtrOutput() AnnotationStoreReferenceItemPtrOutput
	ToAnnotationStoreReferenceItemPtrOutputWithContext(context.Context) AnnotationStoreReferenceItemPtrOutput
}

type annotationStoreReferenceItemPtrType AnnotationStoreReferenceItemArgs

func AnnotationStoreReferenceItemPtr(v *AnnotationStoreReferenceItemArgs) AnnotationStoreReferenceItemPtrInput {
	return (*annotationStoreReferenceItemPtrType)(v)
}

func (*annotationStoreReferenceItemPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnnotationStoreReferenceItem)(nil)).Elem()
}

func (i *annotationStoreReferenceItemPtrType) ToAnnotationStoreReferenceItemPtrOutput() AnnotationStoreReferenceItemPtrOutput {
	return i.ToAnnotationStoreReferenceItemPtrOutputWithContext(context.Background())
}

func (i *annotationStoreReferenceItemPtrType) ToAnnotationStoreReferenceItemPtrOutputWithContext(ctx context.Context) AnnotationStoreReferenceItemPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnnotationStoreReferenceItemPtrOutput)
}

func (i *annotationStoreReferenceItemPtrType) ToOutput(ctx context.Context) pulumix.Output[*AnnotationStoreReferenceItem] {
	return pulumix.Output[*AnnotationStoreReferenceItem]{
		OutputState: i.ToAnnotationStoreReferenceItemPtrOutputWithContext(ctx).OutputState,
	}
}

type AnnotationStoreReferenceItemOutput struct{ *pulumi.OutputState }

func (AnnotationStoreReferenceItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnnotationStoreReferenceItem)(nil)).Elem()
}

func (o AnnotationStoreReferenceItemOutput) ToAnnotationStoreReferenceItemOutput() AnnotationStoreReferenceItemOutput {
	return o
}

func (o AnnotationStoreReferenceItemOutput) ToAnnotationStoreReferenceItemOutputWithContext(ctx context.Context) AnnotationStoreReferenceItemOutput {
	return o
}

func (o AnnotationStoreReferenceItemOutput) ToAnnotationStoreReferenceItemPtrOutput() AnnotationStoreReferenceItemPtrOutput {
	return o.ToAnnotationStoreReferenceItemPtrOutputWithContext(context.Background())
}

func (o AnnotationStoreReferenceItemOutput) ToAnnotationStoreReferenceItemPtrOutputWithContext(ctx context.Context) AnnotationStoreReferenceItemPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnnotationStoreReferenceItem) *AnnotationStoreReferenceItem {
		return &v
	}).(AnnotationStoreReferenceItemPtrOutput)
}

func (o AnnotationStoreReferenceItemOutput) ToOutput(ctx context.Context) pulumix.Output[AnnotationStoreReferenceItem] {
	return pulumix.Output[AnnotationStoreReferenceItem]{
		OutputState: o.OutputState,
	}
}

func (o AnnotationStoreReferenceItemOutput) ReferenceArn() pulumi.StringOutput {
	return o.ApplyT(func(v AnnotationStoreReferenceItem) string { return v.ReferenceArn }).(pulumi.StringOutput)
}

type AnnotationStoreReferenceItemPtrOutput struct{ *pulumi.OutputState }

func (AnnotationStoreReferenceItemPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnnotationStoreReferenceItem)(nil)).Elem()
}

func (o AnnotationStoreReferenceItemPtrOutput) ToAnnotationStoreReferenceItemPtrOutput() AnnotationStoreReferenceItemPtrOutput {
	return o
}

func (o AnnotationStoreReferenceItemPtrOutput) ToAnnotationStoreReferenceItemPtrOutputWithContext(ctx context.Context) AnnotationStoreReferenceItemPtrOutput {
	return o
}

func (o AnnotationStoreReferenceItemPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AnnotationStoreReferenceItem] {
	return pulumix.Output[*AnnotationStoreReferenceItem]{
		OutputState: o.OutputState,
	}
}

func (o AnnotationStoreReferenceItemPtrOutput) Elem() AnnotationStoreReferenceItemOutput {
	return o.ApplyT(func(v *AnnotationStoreReferenceItem) AnnotationStoreReferenceItem {
		if v != nil {
			return *v
		}
		var ret AnnotationStoreReferenceItem
		return ret
	}).(AnnotationStoreReferenceItemOutput)
}

func (o AnnotationStoreReferenceItemPtrOutput) ReferenceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnnotationStoreReferenceItem) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceArn
	}).(pulumi.StringPtrOutput)
}

type AnnotationStoreSchemaItem struct {
}

// AnnotationStoreSchemaItemInput is an input type that accepts AnnotationStoreSchemaItemArgs and AnnotationStoreSchemaItemOutput values.
// You can construct a concrete instance of `AnnotationStoreSchemaItemInput` via:
//
//	AnnotationStoreSchemaItemArgs{...}
type AnnotationStoreSchemaItemInput interface {
	pulumi.Input

	ToAnnotationStoreSchemaItemOutput() AnnotationStoreSchemaItemOutput
	ToAnnotationStoreSchemaItemOutputWithContext(context.Context) AnnotationStoreSchemaItemOutput
}

type AnnotationStoreSchemaItemArgs struct {
}

func (AnnotationStoreSchemaItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnnotationStoreSchemaItem)(nil)).Elem()
}

func (i AnnotationStoreSchemaItemArgs) ToAnnotationStoreSchemaItemOutput() AnnotationStoreSchemaItemOutput {
	return i.ToAnnotationStoreSchemaItemOutputWithContext(context.Background())
}

func (i AnnotationStoreSchemaItemArgs) ToAnnotationStoreSchemaItemOutputWithContext(ctx context.Context) AnnotationStoreSchemaItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnnotationStoreSchemaItemOutput)
}

func (i AnnotationStoreSchemaItemArgs) ToOutput(ctx context.Context) pulumix.Output[AnnotationStoreSchemaItem] {
	return pulumix.Output[AnnotationStoreSchemaItem]{
		OutputState: i.ToAnnotationStoreSchemaItemOutputWithContext(ctx).OutputState,
	}
}

// AnnotationStoreSchemaItemArrayInput is an input type that accepts AnnotationStoreSchemaItemArray and AnnotationStoreSchemaItemArrayOutput values.
// You can construct a concrete instance of `AnnotationStoreSchemaItemArrayInput` via:
//
//	AnnotationStoreSchemaItemArray{ AnnotationStoreSchemaItemArgs{...} }
type AnnotationStoreSchemaItemArrayInput interface {
	pulumi.Input

	ToAnnotationStoreSchemaItemArrayOutput() AnnotationStoreSchemaItemArrayOutput
	ToAnnotationStoreSchemaItemArrayOutputWithContext(context.Context) AnnotationStoreSchemaItemArrayOutput
}

type AnnotationStoreSchemaItemArray []AnnotationStoreSchemaItemInput

func (AnnotationStoreSchemaItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnnotationStoreSchemaItem)(nil)).Elem()
}

func (i AnnotationStoreSchemaItemArray) ToAnnotationStoreSchemaItemArrayOutput() AnnotationStoreSchemaItemArrayOutput {
	return i.ToAnnotationStoreSchemaItemArrayOutputWithContext(context.Background())
}

func (i AnnotationStoreSchemaItemArray) ToAnnotationStoreSchemaItemArrayOutputWithContext(ctx context.Context) AnnotationStoreSchemaItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnnotationStoreSchemaItemArrayOutput)
}

func (i AnnotationStoreSchemaItemArray) ToOutput(ctx context.Context) pulumix.Output[[]AnnotationStoreSchemaItem] {
	return pulumix.Output[[]AnnotationStoreSchemaItem]{
		OutputState: i.ToAnnotationStoreSchemaItemArrayOutputWithContext(ctx).OutputState,
	}
}

type AnnotationStoreSchemaItemOutput struct{ *pulumi.OutputState }

func (AnnotationStoreSchemaItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnnotationStoreSchemaItem)(nil)).Elem()
}

func (o AnnotationStoreSchemaItemOutput) ToAnnotationStoreSchemaItemOutput() AnnotationStoreSchemaItemOutput {
	return o
}

func (o AnnotationStoreSchemaItemOutput) ToAnnotationStoreSchemaItemOutputWithContext(ctx context.Context) AnnotationStoreSchemaItemOutput {
	return o
}

func (o AnnotationStoreSchemaItemOutput) ToOutput(ctx context.Context) pulumix.Output[AnnotationStoreSchemaItem] {
	return pulumix.Output[AnnotationStoreSchemaItem]{
		OutputState: o.OutputState,
	}
}

type AnnotationStoreSchemaItemArrayOutput struct{ *pulumi.OutputState }

func (AnnotationStoreSchemaItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnnotationStoreSchemaItem)(nil)).Elem()
}

func (o AnnotationStoreSchemaItemArrayOutput) ToAnnotationStoreSchemaItemArrayOutput() AnnotationStoreSchemaItemArrayOutput {
	return o
}

func (o AnnotationStoreSchemaItemArrayOutput) ToAnnotationStoreSchemaItemArrayOutputWithContext(ctx context.Context) AnnotationStoreSchemaItemArrayOutput {
	return o
}

func (o AnnotationStoreSchemaItemArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AnnotationStoreSchemaItem] {
	return pulumix.Output[[]AnnotationStoreSchemaItem]{
		OutputState: o.OutputState,
	}
}

func (o AnnotationStoreSchemaItemArrayOutput) Index(i pulumi.IntInput) AnnotationStoreSchemaItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AnnotationStoreSchemaItem {
		return vs[0].([]AnnotationStoreSchemaItem)[vs[1].(int)]
	}).(AnnotationStoreSchemaItemOutput)
}

type AnnotationStoreSseConfig struct {
	KeyArn *string                       `pulumi:"keyArn"`
	Type   AnnotationStoreEncryptionType `pulumi:"type"`
}

// AnnotationStoreSseConfigInput is an input type that accepts AnnotationStoreSseConfigArgs and AnnotationStoreSseConfigOutput values.
// You can construct a concrete instance of `AnnotationStoreSseConfigInput` via:
//
//	AnnotationStoreSseConfigArgs{...}
type AnnotationStoreSseConfigInput interface {
	pulumi.Input

	ToAnnotationStoreSseConfigOutput() AnnotationStoreSseConfigOutput
	ToAnnotationStoreSseConfigOutputWithContext(context.Context) AnnotationStoreSseConfigOutput
}

type AnnotationStoreSseConfigArgs struct {
	KeyArn pulumi.StringPtrInput              `pulumi:"keyArn"`
	Type   AnnotationStoreEncryptionTypeInput `pulumi:"type"`
}

func (AnnotationStoreSseConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnnotationStoreSseConfig)(nil)).Elem()
}

func (i AnnotationStoreSseConfigArgs) ToAnnotationStoreSseConfigOutput() AnnotationStoreSseConfigOutput {
	return i.ToAnnotationStoreSseConfigOutputWithContext(context.Background())
}

func (i AnnotationStoreSseConfigArgs) ToAnnotationStoreSseConfigOutputWithContext(ctx context.Context) AnnotationStoreSseConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnnotationStoreSseConfigOutput)
}

func (i AnnotationStoreSseConfigArgs) ToOutput(ctx context.Context) pulumix.Output[AnnotationStoreSseConfig] {
	return pulumix.Output[AnnotationStoreSseConfig]{
		OutputState: i.ToAnnotationStoreSseConfigOutputWithContext(ctx).OutputState,
	}
}

func (i AnnotationStoreSseConfigArgs) ToAnnotationStoreSseConfigPtrOutput() AnnotationStoreSseConfigPtrOutput {
	return i.ToAnnotationStoreSseConfigPtrOutputWithContext(context.Background())
}

func (i AnnotationStoreSseConfigArgs) ToAnnotationStoreSseConfigPtrOutputWithContext(ctx context.Context) AnnotationStoreSseConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnnotationStoreSseConfigOutput).ToAnnotationStoreSseConfigPtrOutputWithContext(ctx)
}

// AnnotationStoreSseConfigPtrInput is an input type that accepts AnnotationStoreSseConfigArgs, AnnotationStoreSseConfigPtr and AnnotationStoreSseConfigPtrOutput values.
// You can construct a concrete instance of `AnnotationStoreSseConfigPtrInput` via:
//
//	        AnnotationStoreSseConfigArgs{...}
//
//	or:
//
//	        nil
type AnnotationStoreSseConfigPtrInput interface {
	pulumi.Input

	ToAnnotationStoreSseConfigPtrOutput() AnnotationStoreSseConfigPtrOutput
	ToAnnotationStoreSseConfigPtrOutputWithContext(context.Context) AnnotationStoreSseConfigPtrOutput
}

type annotationStoreSseConfigPtrType AnnotationStoreSseConfigArgs

func AnnotationStoreSseConfigPtr(v *AnnotationStoreSseConfigArgs) AnnotationStoreSseConfigPtrInput {
	return (*annotationStoreSseConfigPtrType)(v)
}

func (*annotationStoreSseConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnnotationStoreSseConfig)(nil)).Elem()
}

func (i *annotationStoreSseConfigPtrType) ToAnnotationStoreSseConfigPtrOutput() AnnotationStoreSseConfigPtrOutput {
	return i.ToAnnotationStoreSseConfigPtrOutputWithContext(context.Background())
}

func (i *annotationStoreSseConfigPtrType) ToAnnotationStoreSseConfigPtrOutputWithContext(ctx context.Context) AnnotationStoreSseConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnnotationStoreSseConfigPtrOutput)
}

func (i *annotationStoreSseConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*AnnotationStoreSseConfig] {
	return pulumix.Output[*AnnotationStoreSseConfig]{
		OutputState: i.ToAnnotationStoreSseConfigPtrOutputWithContext(ctx).OutputState,
	}
}

type AnnotationStoreSseConfigOutput struct{ *pulumi.OutputState }

func (AnnotationStoreSseConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnnotationStoreSseConfig)(nil)).Elem()
}

func (o AnnotationStoreSseConfigOutput) ToAnnotationStoreSseConfigOutput() AnnotationStoreSseConfigOutput {
	return o
}

func (o AnnotationStoreSseConfigOutput) ToAnnotationStoreSseConfigOutputWithContext(ctx context.Context) AnnotationStoreSseConfigOutput {
	return o
}

func (o AnnotationStoreSseConfigOutput) ToAnnotationStoreSseConfigPtrOutput() AnnotationStoreSseConfigPtrOutput {
	return o.ToAnnotationStoreSseConfigPtrOutputWithContext(context.Background())
}

func (o AnnotationStoreSseConfigOutput) ToAnnotationStoreSseConfigPtrOutputWithContext(ctx context.Context) AnnotationStoreSseConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnnotationStoreSseConfig) *AnnotationStoreSseConfig {
		return &v
	}).(AnnotationStoreSseConfigPtrOutput)
}

func (o AnnotationStoreSseConfigOutput) ToOutput(ctx context.Context) pulumix.Output[AnnotationStoreSseConfig] {
	return pulumix.Output[AnnotationStoreSseConfig]{
		OutputState: o.OutputState,
	}
}

func (o AnnotationStoreSseConfigOutput) KeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AnnotationStoreSseConfig) *string { return v.KeyArn }).(pulumi.StringPtrOutput)
}

func (o AnnotationStoreSseConfigOutput) Type() AnnotationStoreEncryptionTypeOutput {
	return o.ApplyT(func(v AnnotationStoreSseConfig) AnnotationStoreEncryptionType { return v.Type }).(AnnotationStoreEncryptionTypeOutput)
}

type AnnotationStoreSseConfigPtrOutput struct{ *pulumi.OutputState }

func (AnnotationStoreSseConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnnotationStoreSseConfig)(nil)).Elem()
}

func (o AnnotationStoreSseConfigPtrOutput) ToAnnotationStoreSseConfigPtrOutput() AnnotationStoreSseConfigPtrOutput {
	return o
}

func (o AnnotationStoreSseConfigPtrOutput) ToAnnotationStoreSseConfigPtrOutputWithContext(ctx context.Context) AnnotationStoreSseConfigPtrOutput {
	return o
}

func (o AnnotationStoreSseConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AnnotationStoreSseConfig] {
	return pulumix.Output[*AnnotationStoreSseConfig]{
		OutputState: o.OutputState,
	}
}

func (o AnnotationStoreSseConfigPtrOutput) Elem() AnnotationStoreSseConfigOutput {
	return o.ApplyT(func(v *AnnotationStoreSseConfig) AnnotationStoreSseConfig {
		if v != nil {
			return *v
		}
		var ret AnnotationStoreSseConfig
		return ret
	}).(AnnotationStoreSseConfigOutput)
}

func (o AnnotationStoreSseConfigPtrOutput) KeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnnotationStoreSseConfig) *string {
		if v == nil {
			return nil
		}
		return v.KeyArn
	}).(pulumi.StringPtrOutput)
}

func (o AnnotationStoreSseConfigPtrOutput) Type() AnnotationStoreEncryptionTypePtrOutput {
	return o.ApplyT(func(v *AnnotationStoreSseConfig) *AnnotationStoreEncryptionType {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(AnnotationStoreEncryptionTypePtrOutput)
}

type AnnotationStoreStoreOptions0Properties struct {
	TsvStoreOptions AnnotationStoreTsvStoreOptions `pulumi:"tsvStoreOptions"`
}

type AnnotationStoreStoreOptionsProperties struct {
	TsvStoreOptions AnnotationStoreTsvStoreOptions `pulumi:"tsvStoreOptions"`
}

// AnnotationStoreStoreOptionsPropertiesInput is an input type that accepts AnnotationStoreStoreOptionsPropertiesArgs and AnnotationStoreStoreOptionsPropertiesOutput values.
// You can construct a concrete instance of `AnnotationStoreStoreOptionsPropertiesInput` via:
//
//	AnnotationStoreStoreOptionsPropertiesArgs{...}
type AnnotationStoreStoreOptionsPropertiesInput interface {
	pulumi.Input

	ToAnnotationStoreStoreOptionsPropertiesOutput() AnnotationStoreStoreOptionsPropertiesOutput
	ToAnnotationStoreStoreOptionsPropertiesOutputWithContext(context.Context) AnnotationStoreStoreOptionsPropertiesOutput
}

type AnnotationStoreStoreOptionsPropertiesArgs struct {
	TsvStoreOptions AnnotationStoreTsvStoreOptionsInput `pulumi:"tsvStoreOptions"`
}

func (AnnotationStoreStoreOptionsPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnnotationStoreStoreOptionsProperties)(nil)).Elem()
}

func (i AnnotationStoreStoreOptionsPropertiesArgs) ToAnnotationStoreStoreOptionsPropertiesOutput() AnnotationStoreStoreOptionsPropertiesOutput {
	return i.ToAnnotationStoreStoreOptionsPropertiesOutputWithContext(context.Background())
}

func (i AnnotationStoreStoreOptionsPropertiesArgs) ToAnnotationStoreStoreOptionsPropertiesOutputWithContext(ctx context.Context) AnnotationStoreStoreOptionsPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnnotationStoreStoreOptionsPropertiesOutput)
}

func (i AnnotationStoreStoreOptionsPropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[AnnotationStoreStoreOptionsProperties] {
	return pulumix.Output[AnnotationStoreStoreOptionsProperties]{
		OutputState: i.ToAnnotationStoreStoreOptionsPropertiesOutputWithContext(ctx).OutputState,
	}
}

func (i AnnotationStoreStoreOptionsPropertiesArgs) ToAnnotationStoreStoreOptionsPropertiesPtrOutput() AnnotationStoreStoreOptionsPropertiesPtrOutput {
	return i.ToAnnotationStoreStoreOptionsPropertiesPtrOutputWithContext(context.Background())
}

func (i AnnotationStoreStoreOptionsPropertiesArgs) ToAnnotationStoreStoreOptionsPropertiesPtrOutputWithContext(ctx context.Context) AnnotationStoreStoreOptionsPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnnotationStoreStoreOptionsPropertiesOutput).ToAnnotationStoreStoreOptionsPropertiesPtrOutputWithContext(ctx)
}

// AnnotationStoreStoreOptionsPropertiesPtrInput is an input type that accepts AnnotationStoreStoreOptionsPropertiesArgs, AnnotationStoreStoreOptionsPropertiesPtr and AnnotationStoreStoreOptionsPropertiesPtrOutput values.
// You can construct a concrete instance of `AnnotationStoreStoreOptionsPropertiesPtrInput` via:
//
//	        AnnotationStoreStoreOptionsPropertiesArgs{...}
//
//	or:
//
//	        nil
type AnnotationStoreStoreOptionsPropertiesPtrInput interface {
	pulumi.Input

	ToAnnotationStoreStoreOptionsPropertiesPtrOutput() AnnotationStoreStoreOptionsPropertiesPtrOutput
	ToAnnotationStoreStoreOptionsPropertiesPtrOutputWithContext(context.Context) AnnotationStoreStoreOptionsPropertiesPtrOutput
}

type annotationStoreStoreOptionsPropertiesPtrType AnnotationStoreStoreOptionsPropertiesArgs

func AnnotationStoreStoreOptionsPropertiesPtr(v *AnnotationStoreStoreOptionsPropertiesArgs) AnnotationStoreStoreOptionsPropertiesPtrInput {
	return (*annotationStoreStoreOptionsPropertiesPtrType)(v)
}

func (*annotationStoreStoreOptionsPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnnotationStoreStoreOptionsProperties)(nil)).Elem()
}

func (i *annotationStoreStoreOptionsPropertiesPtrType) ToAnnotationStoreStoreOptionsPropertiesPtrOutput() AnnotationStoreStoreOptionsPropertiesPtrOutput {
	return i.ToAnnotationStoreStoreOptionsPropertiesPtrOutputWithContext(context.Background())
}

func (i *annotationStoreStoreOptionsPropertiesPtrType) ToAnnotationStoreStoreOptionsPropertiesPtrOutputWithContext(ctx context.Context) AnnotationStoreStoreOptionsPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnnotationStoreStoreOptionsPropertiesPtrOutput)
}

func (i *annotationStoreStoreOptionsPropertiesPtrType) ToOutput(ctx context.Context) pulumix.Output[*AnnotationStoreStoreOptionsProperties] {
	return pulumix.Output[*AnnotationStoreStoreOptionsProperties]{
		OutputState: i.ToAnnotationStoreStoreOptionsPropertiesPtrOutputWithContext(ctx).OutputState,
	}
}

type AnnotationStoreStoreOptionsPropertiesOutput struct{ *pulumi.OutputState }

func (AnnotationStoreStoreOptionsPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnnotationStoreStoreOptionsProperties)(nil)).Elem()
}

func (o AnnotationStoreStoreOptionsPropertiesOutput) ToAnnotationStoreStoreOptionsPropertiesOutput() AnnotationStoreStoreOptionsPropertiesOutput {
	return o
}

func (o AnnotationStoreStoreOptionsPropertiesOutput) ToAnnotationStoreStoreOptionsPropertiesOutputWithContext(ctx context.Context) AnnotationStoreStoreOptionsPropertiesOutput {
	return o
}

func (o AnnotationStoreStoreOptionsPropertiesOutput) ToAnnotationStoreStoreOptionsPropertiesPtrOutput() AnnotationStoreStoreOptionsPropertiesPtrOutput {
	return o.ToAnnotationStoreStoreOptionsPropertiesPtrOutputWithContext(context.Background())
}

func (o AnnotationStoreStoreOptionsPropertiesOutput) ToAnnotationStoreStoreOptionsPropertiesPtrOutputWithContext(ctx context.Context) AnnotationStoreStoreOptionsPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnnotationStoreStoreOptionsProperties) *AnnotationStoreStoreOptionsProperties {
		return &v
	}).(AnnotationStoreStoreOptionsPropertiesPtrOutput)
}

func (o AnnotationStoreStoreOptionsPropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[AnnotationStoreStoreOptionsProperties] {
	return pulumix.Output[AnnotationStoreStoreOptionsProperties]{
		OutputState: o.OutputState,
	}
}

func (o AnnotationStoreStoreOptionsPropertiesOutput) TsvStoreOptions() AnnotationStoreTsvStoreOptionsOutput {
	return o.ApplyT(func(v AnnotationStoreStoreOptionsProperties) AnnotationStoreTsvStoreOptions { return v.TsvStoreOptions }).(AnnotationStoreTsvStoreOptionsOutput)
}

type AnnotationStoreStoreOptionsPropertiesPtrOutput struct{ *pulumi.OutputState }

func (AnnotationStoreStoreOptionsPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnnotationStoreStoreOptionsProperties)(nil)).Elem()
}

func (o AnnotationStoreStoreOptionsPropertiesPtrOutput) ToAnnotationStoreStoreOptionsPropertiesPtrOutput() AnnotationStoreStoreOptionsPropertiesPtrOutput {
	return o
}

func (o AnnotationStoreStoreOptionsPropertiesPtrOutput) ToAnnotationStoreStoreOptionsPropertiesPtrOutputWithContext(ctx context.Context) AnnotationStoreStoreOptionsPropertiesPtrOutput {
	return o
}

func (o AnnotationStoreStoreOptionsPropertiesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AnnotationStoreStoreOptionsProperties] {
	return pulumix.Output[*AnnotationStoreStoreOptionsProperties]{
		OutputState: o.OutputState,
	}
}

func (o AnnotationStoreStoreOptionsPropertiesPtrOutput) Elem() AnnotationStoreStoreOptionsPropertiesOutput {
	return o.ApplyT(func(v *AnnotationStoreStoreOptionsProperties) AnnotationStoreStoreOptionsProperties {
		if v != nil {
			return *v
		}
		var ret AnnotationStoreStoreOptionsProperties
		return ret
	}).(AnnotationStoreStoreOptionsPropertiesOutput)
}

func (o AnnotationStoreStoreOptionsPropertiesPtrOutput) TsvStoreOptions() AnnotationStoreTsvStoreOptionsPtrOutput {
	return o.ApplyT(func(v *AnnotationStoreStoreOptionsProperties) *AnnotationStoreTsvStoreOptions {
		if v == nil {
			return nil
		}
		return &v.TsvStoreOptions
	}).(AnnotationStoreTsvStoreOptionsPtrOutput)
}

type AnnotationStoreTagMap struct {
}

// AnnotationStoreTagMapInput is an input type that accepts AnnotationStoreTagMap and AnnotationStoreTagMapOutput values.
// You can construct a concrete instance of `AnnotationStoreTagMapInput` via:
//
//	AnnotationStoreTagMap{ "key": AnnotationStoreTagArgs{...} }
type AnnotationStoreTagMapInput interface {
	pulumi.Input

	ToAnnotationStoreTagMapOutput() AnnotationStoreTagMapOutput
	ToAnnotationStoreTagMapOutputWithContext(context.Context) AnnotationStoreTagMapOutput
}

type AnnotationStoreTagMapArgs struct {
}

func (AnnotationStoreTagMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnnotationStoreTagMap)(nil)).Elem()
}

func (i AnnotationStoreTagMapArgs) ToAnnotationStoreTagMapOutput() AnnotationStoreTagMapOutput {
	return i.ToAnnotationStoreTagMapOutputWithContext(context.Background())
}

func (i AnnotationStoreTagMapArgs) ToAnnotationStoreTagMapOutputWithContext(ctx context.Context) AnnotationStoreTagMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnnotationStoreTagMapOutput)
}

func (i AnnotationStoreTagMapArgs) ToOutput(ctx context.Context) pulumix.Output[AnnotationStoreTagMap] {
	return pulumix.Output[AnnotationStoreTagMap]{
		OutputState: i.ToAnnotationStoreTagMapOutputWithContext(ctx).OutputState,
	}
}

func (i AnnotationStoreTagMapArgs) ToAnnotationStoreTagMapPtrOutput() AnnotationStoreTagMapPtrOutput {
	return i.ToAnnotationStoreTagMapPtrOutputWithContext(context.Background())
}

func (i AnnotationStoreTagMapArgs) ToAnnotationStoreTagMapPtrOutputWithContext(ctx context.Context) AnnotationStoreTagMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnnotationStoreTagMapOutput).ToAnnotationStoreTagMapPtrOutputWithContext(ctx)
}

// AnnotationStoreTagMapPtrInput is an input type that accepts AnnotationStoreTagMapArgs, AnnotationStoreTagMapPtr and AnnotationStoreTagMapPtrOutput values.
// You can construct a concrete instance of `AnnotationStoreTagMapPtrInput` via:
//
//	        AnnotationStoreTagMapArgs{...}
//
//	or:
//
//	        nil
type AnnotationStoreTagMapPtrInput interface {
	pulumi.Input

	ToAnnotationStoreTagMapPtrOutput() AnnotationStoreTagMapPtrOutput
	ToAnnotationStoreTagMapPtrOutputWithContext(context.Context) AnnotationStoreTagMapPtrOutput
}

type annotationStoreTagMapPtrType AnnotationStoreTagMapArgs

func AnnotationStoreTagMapPtr(v *AnnotationStoreTagMapArgs) AnnotationStoreTagMapPtrInput {
	return (*annotationStoreTagMapPtrType)(v)
}

func (*annotationStoreTagMapPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnnotationStoreTagMap)(nil)).Elem()
}

func (i *annotationStoreTagMapPtrType) ToAnnotationStoreTagMapPtrOutput() AnnotationStoreTagMapPtrOutput {
	return i.ToAnnotationStoreTagMapPtrOutputWithContext(context.Background())
}

func (i *annotationStoreTagMapPtrType) ToAnnotationStoreTagMapPtrOutputWithContext(ctx context.Context) AnnotationStoreTagMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnnotationStoreTagMapPtrOutput)
}

func (i *annotationStoreTagMapPtrType) ToOutput(ctx context.Context) pulumix.Output[*AnnotationStoreTagMap] {
	return pulumix.Output[*AnnotationStoreTagMap]{
		OutputState: i.ToAnnotationStoreTagMapPtrOutputWithContext(ctx).OutputState,
	}
}

type AnnotationStoreTagMapOutput struct{ *pulumi.OutputState }

func (AnnotationStoreTagMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnnotationStoreTagMap)(nil)).Elem()
}

func (o AnnotationStoreTagMapOutput) ToAnnotationStoreTagMapOutput() AnnotationStoreTagMapOutput {
	return o
}

func (o AnnotationStoreTagMapOutput) ToAnnotationStoreTagMapOutputWithContext(ctx context.Context) AnnotationStoreTagMapOutput {
	return o
}

func (o AnnotationStoreTagMapOutput) ToAnnotationStoreTagMapPtrOutput() AnnotationStoreTagMapPtrOutput {
	return o.ToAnnotationStoreTagMapPtrOutputWithContext(context.Background())
}

func (o AnnotationStoreTagMapOutput) ToAnnotationStoreTagMapPtrOutputWithContext(ctx context.Context) AnnotationStoreTagMapPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnnotationStoreTagMap) *AnnotationStoreTagMap {
		return &v
	}).(AnnotationStoreTagMapPtrOutput)
}

func (o AnnotationStoreTagMapOutput) ToOutput(ctx context.Context) pulumix.Output[AnnotationStoreTagMap] {
	return pulumix.Output[AnnotationStoreTagMap]{
		OutputState: o.OutputState,
	}
}

type AnnotationStoreTagMapPtrOutput struct{ *pulumi.OutputState }

func (AnnotationStoreTagMapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnnotationStoreTagMap)(nil)).Elem()
}

func (o AnnotationStoreTagMapPtrOutput) ToAnnotationStoreTagMapPtrOutput() AnnotationStoreTagMapPtrOutput {
	return o
}

func (o AnnotationStoreTagMapPtrOutput) ToAnnotationStoreTagMapPtrOutputWithContext(ctx context.Context) AnnotationStoreTagMapPtrOutput {
	return o
}

func (o AnnotationStoreTagMapPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AnnotationStoreTagMap] {
	return pulumix.Output[*AnnotationStoreTagMap]{
		OutputState: o.OutputState,
	}
}

func (o AnnotationStoreTagMapPtrOutput) Elem() AnnotationStoreTagMapOutput {
	return o.ApplyT(func(v *AnnotationStoreTagMap) AnnotationStoreTagMap {
		if v != nil {
			return *v
		}
		var ret AnnotationStoreTagMap
		return ret
	}).(AnnotationStoreTagMapOutput)
}

type AnnotationStoreTsvStoreOptions struct {
	AnnotationType *AnnotationStoreAnnotationType `pulumi:"annotationType"`
	FormatToHeader *AnnotationStoreFormatToHeader `pulumi:"formatToHeader"`
	Schema         []AnnotationStoreSchemaItem    `pulumi:"schema"`
}

// AnnotationStoreTsvStoreOptionsInput is an input type that accepts AnnotationStoreTsvStoreOptionsArgs and AnnotationStoreTsvStoreOptionsOutput values.
// You can construct a concrete instance of `AnnotationStoreTsvStoreOptionsInput` via:
//
//	AnnotationStoreTsvStoreOptionsArgs{...}
type AnnotationStoreTsvStoreOptionsInput interface {
	pulumi.Input

	ToAnnotationStoreTsvStoreOptionsOutput() AnnotationStoreTsvStoreOptionsOutput
	ToAnnotationStoreTsvStoreOptionsOutputWithContext(context.Context) AnnotationStoreTsvStoreOptionsOutput
}

type AnnotationStoreTsvStoreOptionsArgs struct {
	AnnotationType AnnotationStoreAnnotationTypePtrInput `pulumi:"annotationType"`
	FormatToHeader AnnotationStoreFormatToHeaderPtrInput `pulumi:"formatToHeader"`
	Schema         AnnotationStoreSchemaItemArrayInput   `pulumi:"schema"`
}

func (AnnotationStoreTsvStoreOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnnotationStoreTsvStoreOptions)(nil)).Elem()
}

func (i AnnotationStoreTsvStoreOptionsArgs) ToAnnotationStoreTsvStoreOptionsOutput() AnnotationStoreTsvStoreOptionsOutput {
	return i.ToAnnotationStoreTsvStoreOptionsOutputWithContext(context.Background())
}

func (i AnnotationStoreTsvStoreOptionsArgs) ToAnnotationStoreTsvStoreOptionsOutputWithContext(ctx context.Context) AnnotationStoreTsvStoreOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnnotationStoreTsvStoreOptionsOutput)
}

func (i AnnotationStoreTsvStoreOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[AnnotationStoreTsvStoreOptions] {
	return pulumix.Output[AnnotationStoreTsvStoreOptions]{
		OutputState: i.ToAnnotationStoreTsvStoreOptionsOutputWithContext(ctx).OutputState,
	}
}

func (i AnnotationStoreTsvStoreOptionsArgs) ToAnnotationStoreTsvStoreOptionsPtrOutput() AnnotationStoreTsvStoreOptionsPtrOutput {
	return i.ToAnnotationStoreTsvStoreOptionsPtrOutputWithContext(context.Background())
}

func (i AnnotationStoreTsvStoreOptionsArgs) ToAnnotationStoreTsvStoreOptionsPtrOutputWithContext(ctx context.Context) AnnotationStoreTsvStoreOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnnotationStoreTsvStoreOptionsOutput).ToAnnotationStoreTsvStoreOptionsPtrOutputWithContext(ctx)
}

// AnnotationStoreTsvStoreOptionsPtrInput is an input type that accepts AnnotationStoreTsvStoreOptionsArgs, AnnotationStoreTsvStoreOptionsPtr and AnnotationStoreTsvStoreOptionsPtrOutput values.
// You can construct a concrete instance of `AnnotationStoreTsvStoreOptionsPtrInput` via:
//
//	        AnnotationStoreTsvStoreOptionsArgs{...}
//
//	or:
//
//	        nil
type AnnotationStoreTsvStoreOptionsPtrInput interface {
	pulumi.Input

	ToAnnotationStoreTsvStoreOptionsPtrOutput() AnnotationStoreTsvStoreOptionsPtrOutput
	ToAnnotationStoreTsvStoreOptionsPtrOutputWithContext(context.Context) AnnotationStoreTsvStoreOptionsPtrOutput
}

type annotationStoreTsvStoreOptionsPtrType AnnotationStoreTsvStoreOptionsArgs

func AnnotationStoreTsvStoreOptionsPtr(v *AnnotationStoreTsvStoreOptionsArgs) AnnotationStoreTsvStoreOptionsPtrInput {
	return (*annotationStoreTsvStoreOptionsPtrType)(v)
}

func (*annotationStoreTsvStoreOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnnotationStoreTsvStoreOptions)(nil)).Elem()
}

func (i *annotationStoreTsvStoreOptionsPtrType) ToAnnotationStoreTsvStoreOptionsPtrOutput() AnnotationStoreTsvStoreOptionsPtrOutput {
	return i.ToAnnotationStoreTsvStoreOptionsPtrOutputWithContext(context.Background())
}

func (i *annotationStoreTsvStoreOptionsPtrType) ToAnnotationStoreTsvStoreOptionsPtrOutputWithContext(ctx context.Context) AnnotationStoreTsvStoreOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnnotationStoreTsvStoreOptionsPtrOutput)
}

func (i *annotationStoreTsvStoreOptionsPtrType) ToOutput(ctx context.Context) pulumix.Output[*AnnotationStoreTsvStoreOptions] {
	return pulumix.Output[*AnnotationStoreTsvStoreOptions]{
		OutputState: i.ToAnnotationStoreTsvStoreOptionsPtrOutputWithContext(ctx).OutputState,
	}
}

type AnnotationStoreTsvStoreOptionsOutput struct{ *pulumi.OutputState }

func (AnnotationStoreTsvStoreOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnnotationStoreTsvStoreOptions)(nil)).Elem()
}

func (o AnnotationStoreTsvStoreOptionsOutput) ToAnnotationStoreTsvStoreOptionsOutput() AnnotationStoreTsvStoreOptionsOutput {
	return o
}

func (o AnnotationStoreTsvStoreOptionsOutput) ToAnnotationStoreTsvStoreOptionsOutputWithContext(ctx context.Context) AnnotationStoreTsvStoreOptionsOutput {
	return o
}

func (o AnnotationStoreTsvStoreOptionsOutput) ToAnnotationStoreTsvStoreOptionsPtrOutput() AnnotationStoreTsvStoreOptionsPtrOutput {
	return o.ToAnnotationStoreTsvStoreOptionsPtrOutputWithContext(context.Background())
}

func (o AnnotationStoreTsvStoreOptionsOutput) ToAnnotationStoreTsvStoreOptionsPtrOutputWithContext(ctx context.Context) AnnotationStoreTsvStoreOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnnotationStoreTsvStoreOptions) *AnnotationStoreTsvStoreOptions {
		return &v
	}).(AnnotationStoreTsvStoreOptionsPtrOutput)
}

func (o AnnotationStoreTsvStoreOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[AnnotationStoreTsvStoreOptions] {
	return pulumix.Output[AnnotationStoreTsvStoreOptions]{
		OutputState: o.OutputState,
	}
}

func (o AnnotationStoreTsvStoreOptionsOutput) AnnotationType() AnnotationStoreAnnotationTypePtrOutput {
	return o.ApplyT(func(v AnnotationStoreTsvStoreOptions) *AnnotationStoreAnnotationType { return v.AnnotationType }).(AnnotationStoreAnnotationTypePtrOutput)
}

func (o AnnotationStoreTsvStoreOptionsOutput) FormatToHeader() AnnotationStoreFormatToHeaderPtrOutput {
	return o.ApplyT(func(v AnnotationStoreTsvStoreOptions) *AnnotationStoreFormatToHeader { return v.FormatToHeader }).(AnnotationStoreFormatToHeaderPtrOutput)
}

func (o AnnotationStoreTsvStoreOptionsOutput) Schema() AnnotationStoreSchemaItemArrayOutput {
	return o.ApplyT(func(v AnnotationStoreTsvStoreOptions) []AnnotationStoreSchemaItem { return v.Schema }).(AnnotationStoreSchemaItemArrayOutput)
}

type AnnotationStoreTsvStoreOptionsPtrOutput struct{ *pulumi.OutputState }

func (AnnotationStoreTsvStoreOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnnotationStoreTsvStoreOptions)(nil)).Elem()
}

func (o AnnotationStoreTsvStoreOptionsPtrOutput) ToAnnotationStoreTsvStoreOptionsPtrOutput() AnnotationStoreTsvStoreOptionsPtrOutput {
	return o
}

func (o AnnotationStoreTsvStoreOptionsPtrOutput) ToAnnotationStoreTsvStoreOptionsPtrOutputWithContext(ctx context.Context) AnnotationStoreTsvStoreOptionsPtrOutput {
	return o
}

func (o AnnotationStoreTsvStoreOptionsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AnnotationStoreTsvStoreOptions] {
	return pulumix.Output[*AnnotationStoreTsvStoreOptions]{
		OutputState: o.OutputState,
	}
}

func (o AnnotationStoreTsvStoreOptionsPtrOutput) Elem() AnnotationStoreTsvStoreOptionsOutput {
	return o.ApplyT(func(v *AnnotationStoreTsvStoreOptions) AnnotationStoreTsvStoreOptions {
		if v != nil {
			return *v
		}
		var ret AnnotationStoreTsvStoreOptions
		return ret
	}).(AnnotationStoreTsvStoreOptionsOutput)
}

func (o AnnotationStoreTsvStoreOptionsPtrOutput) AnnotationType() AnnotationStoreAnnotationTypePtrOutput {
	return o.ApplyT(func(v *AnnotationStoreTsvStoreOptions) *AnnotationStoreAnnotationType {
		if v == nil {
			return nil
		}
		return v.AnnotationType
	}).(AnnotationStoreAnnotationTypePtrOutput)
}

func (o AnnotationStoreTsvStoreOptionsPtrOutput) FormatToHeader() AnnotationStoreFormatToHeaderPtrOutput {
	return o.ApplyT(func(v *AnnotationStoreTsvStoreOptions) *AnnotationStoreFormatToHeader {
		if v == nil {
			return nil
		}
		return v.FormatToHeader
	}).(AnnotationStoreFormatToHeaderPtrOutput)
}

func (o AnnotationStoreTsvStoreOptionsPtrOutput) Schema() AnnotationStoreSchemaItemArrayOutput {
	return o.ApplyT(func(v *AnnotationStoreTsvStoreOptions) []AnnotationStoreSchemaItem {
		if v == nil {
			return nil
		}
		return v.Schema
	}).(AnnotationStoreSchemaItemArrayOutput)
}

// Server-side encryption (SSE) settings for a store.
type ReferenceStoreSseConfig struct {
	// An encryption key ARN.
	KeyArn *string                      `pulumi:"keyArn"`
	Type   ReferenceStoreEncryptionType `pulumi:"type"`
}

// ReferenceStoreSseConfigInput is an input type that accepts ReferenceStoreSseConfigArgs and ReferenceStoreSseConfigOutput values.
// You can construct a concrete instance of `ReferenceStoreSseConfigInput` via:
//
//	ReferenceStoreSseConfigArgs{...}
type ReferenceStoreSseConfigInput interface {
	pulumi.Input

	ToReferenceStoreSseConfigOutput() ReferenceStoreSseConfigOutput
	ToReferenceStoreSseConfigOutputWithContext(context.Context) ReferenceStoreSseConfigOutput
}

// Server-side encryption (SSE) settings for a store.
type ReferenceStoreSseConfigArgs struct {
	// An encryption key ARN.
	KeyArn pulumi.StringPtrInput             `pulumi:"keyArn"`
	Type   ReferenceStoreEncryptionTypeInput `pulumi:"type"`
}

func (ReferenceStoreSseConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceStoreSseConfig)(nil)).Elem()
}

func (i ReferenceStoreSseConfigArgs) ToReferenceStoreSseConfigOutput() ReferenceStoreSseConfigOutput {
	return i.ToReferenceStoreSseConfigOutputWithContext(context.Background())
}

func (i ReferenceStoreSseConfigArgs) ToReferenceStoreSseConfigOutputWithContext(ctx context.Context) ReferenceStoreSseConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceStoreSseConfigOutput)
}

func (i ReferenceStoreSseConfigArgs) ToOutput(ctx context.Context) pulumix.Output[ReferenceStoreSseConfig] {
	return pulumix.Output[ReferenceStoreSseConfig]{
		OutputState: i.ToReferenceStoreSseConfigOutputWithContext(ctx).OutputState,
	}
}

func (i ReferenceStoreSseConfigArgs) ToReferenceStoreSseConfigPtrOutput() ReferenceStoreSseConfigPtrOutput {
	return i.ToReferenceStoreSseConfigPtrOutputWithContext(context.Background())
}

func (i ReferenceStoreSseConfigArgs) ToReferenceStoreSseConfigPtrOutputWithContext(ctx context.Context) ReferenceStoreSseConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceStoreSseConfigOutput).ToReferenceStoreSseConfigPtrOutputWithContext(ctx)
}

// ReferenceStoreSseConfigPtrInput is an input type that accepts ReferenceStoreSseConfigArgs, ReferenceStoreSseConfigPtr and ReferenceStoreSseConfigPtrOutput values.
// You can construct a concrete instance of `ReferenceStoreSseConfigPtrInput` via:
//
//	        ReferenceStoreSseConfigArgs{...}
//
//	or:
//
//	        nil
type ReferenceStoreSseConfigPtrInput interface {
	pulumi.Input

	ToReferenceStoreSseConfigPtrOutput() ReferenceStoreSseConfigPtrOutput
	ToReferenceStoreSseConfigPtrOutputWithContext(context.Context) ReferenceStoreSseConfigPtrOutput
}

type referenceStoreSseConfigPtrType ReferenceStoreSseConfigArgs

func ReferenceStoreSseConfigPtr(v *ReferenceStoreSseConfigArgs) ReferenceStoreSseConfigPtrInput {
	return (*referenceStoreSseConfigPtrType)(v)
}

func (*referenceStoreSseConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReferenceStoreSseConfig)(nil)).Elem()
}

func (i *referenceStoreSseConfigPtrType) ToReferenceStoreSseConfigPtrOutput() ReferenceStoreSseConfigPtrOutput {
	return i.ToReferenceStoreSseConfigPtrOutputWithContext(context.Background())
}

func (i *referenceStoreSseConfigPtrType) ToReferenceStoreSseConfigPtrOutputWithContext(ctx context.Context) ReferenceStoreSseConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceStoreSseConfigPtrOutput)
}

func (i *referenceStoreSseConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*ReferenceStoreSseConfig] {
	return pulumix.Output[*ReferenceStoreSseConfig]{
		OutputState: i.ToReferenceStoreSseConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// Server-side encryption (SSE) settings for a store.
type ReferenceStoreSseConfigOutput struct{ *pulumi.OutputState }

func (ReferenceStoreSseConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceStoreSseConfig)(nil)).Elem()
}

func (o ReferenceStoreSseConfigOutput) ToReferenceStoreSseConfigOutput() ReferenceStoreSseConfigOutput {
	return o
}

func (o ReferenceStoreSseConfigOutput) ToReferenceStoreSseConfigOutputWithContext(ctx context.Context) ReferenceStoreSseConfigOutput {
	return o
}

func (o ReferenceStoreSseConfigOutput) ToReferenceStoreSseConfigPtrOutput() ReferenceStoreSseConfigPtrOutput {
	return o.ToReferenceStoreSseConfigPtrOutputWithContext(context.Background())
}

func (o ReferenceStoreSseConfigOutput) ToReferenceStoreSseConfigPtrOutputWithContext(ctx context.Context) ReferenceStoreSseConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReferenceStoreSseConfig) *ReferenceStoreSseConfig {
		return &v
	}).(ReferenceStoreSseConfigPtrOutput)
}

func (o ReferenceStoreSseConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ReferenceStoreSseConfig] {
	return pulumix.Output[ReferenceStoreSseConfig]{
		OutputState: o.OutputState,
	}
}

// An encryption key ARN.
func (o ReferenceStoreSseConfigOutput) KeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReferenceStoreSseConfig) *string { return v.KeyArn }).(pulumi.StringPtrOutput)
}

func (o ReferenceStoreSseConfigOutput) Type() ReferenceStoreEncryptionTypeOutput {
	return o.ApplyT(func(v ReferenceStoreSseConfig) ReferenceStoreEncryptionType { return v.Type }).(ReferenceStoreEncryptionTypeOutput)
}

type ReferenceStoreSseConfigPtrOutput struct{ *pulumi.OutputState }

func (ReferenceStoreSseConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReferenceStoreSseConfig)(nil)).Elem()
}

func (o ReferenceStoreSseConfigPtrOutput) ToReferenceStoreSseConfigPtrOutput() ReferenceStoreSseConfigPtrOutput {
	return o
}

func (o ReferenceStoreSseConfigPtrOutput) ToReferenceStoreSseConfigPtrOutputWithContext(ctx context.Context) ReferenceStoreSseConfigPtrOutput {
	return o
}

func (o ReferenceStoreSseConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ReferenceStoreSseConfig] {
	return pulumix.Output[*ReferenceStoreSseConfig]{
		OutputState: o.OutputState,
	}
}

func (o ReferenceStoreSseConfigPtrOutput) Elem() ReferenceStoreSseConfigOutput {
	return o.ApplyT(func(v *ReferenceStoreSseConfig) ReferenceStoreSseConfig {
		if v != nil {
			return *v
		}
		var ret ReferenceStoreSseConfig
		return ret
	}).(ReferenceStoreSseConfigOutput)
}

// An encryption key ARN.
func (o ReferenceStoreSseConfigPtrOutput) KeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReferenceStoreSseConfig) *string {
		if v == nil {
			return nil
		}
		return v.KeyArn
	}).(pulumi.StringPtrOutput)
}

func (o ReferenceStoreSseConfigPtrOutput) Type() ReferenceStoreEncryptionTypePtrOutput {
	return o.ApplyT(func(v *ReferenceStoreSseConfig) *ReferenceStoreEncryptionType {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(ReferenceStoreEncryptionTypePtrOutput)
}

type ReferenceStoreTagMap struct {
}

// ReferenceStoreTagMapInput is an input type that accepts ReferenceStoreTagMap and ReferenceStoreTagMapOutput values.
// You can construct a concrete instance of `ReferenceStoreTagMapInput` via:
//
//	ReferenceStoreTagMap{ "key": ReferenceStoreTagArgs{...} }
type ReferenceStoreTagMapInput interface {
	pulumi.Input

	ToReferenceStoreTagMapOutput() ReferenceStoreTagMapOutput
	ToReferenceStoreTagMapOutputWithContext(context.Context) ReferenceStoreTagMapOutput
}

type ReferenceStoreTagMapArgs struct {
}

func (ReferenceStoreTagMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceStoreTagMap)(nil)).Elem()
}

func (i ReferenceStoreTagMapArgs) ToReferenceStoreTagMapOutput() ReferenceStoreTagMapOutput {
	return i.ToReferenceStoreTagMapOutputWithContext(context.Background())
}

func (i ReferenceStoreTagMapArgs) ToReferenceStoreTagMapOutputWithContext(ctx context.Context) ReferenceStoreTagMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceStoreTagMapOutput)
}

func (i ReferenceStoreTagMapArgs) ToOutput(ctx context.Context) pulumix.Output[ReferenceStoreTagMap] {
	return pulumix.Output[ReferenceStoreTagMap]{
		OutputState: i.ToReferenceStoreTagMapOutputWithContext(ctx).OutputState,
	}
}

func (i ReferenceStoreTagMapArgs) ToReferenceStoreTagMapPtrOutput() ReferenceStoreTagMapPtrOutput {
	return i.ToReferenceStoreTagMapPtrOutputWithContext(context.Background())
}

func (i ReferenceStoreTagMapArgs) ToReferenceStoreTagMapPtrOutputWithContext(ctx context.Context) ReferenceStoreTagMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceStoreTagMapOutput).ToReferenceStoreTagMapPtrOutputWithContext(ctx)
}

// ReferenceStoreTagMapPtrInput is an input type that accepts ReferenceStoreTagMapArgs, ReferenceStoreTagMapPtr and ReferenceStoreTagMapPtrOutput values.
// You can construct a concrete instance of `ReferenceStoreTagMapPtrInput` via:
//
//	        ReferenceStoreTagMapArgs{...}
//
//	or:
//
//	        nil
type ReferenceStoreTagMapPtrInput interface {
	pulumi.Input

	ToReferenceStoreTagMapPtrOutput() ReferenceStoreTagMapPtrOutput
	ToReferenceStoreTagMapPtrOutputWithContext(context.Context) ReferenceStoreTagMapPtrOutput
}

type referenceStoreTagMapPtrType ReferenceStoreTagMapArgs

func ReferenceStoreTagMapPtr(v *ReferenceStoreTagMapArgs) ReferenceStoreTagMapPtrInput {
	return (*referenceStoreTagMapPtrType)(v)
}

func (*referenceStoreTagMapPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReferenceStoreTagMap)(nil)).Elem()
}

func (i *referenceStoreTagMapPtrType) ToReferenceStoreTagMapPtrOutput() ReferenceStoreTagMapPtrOutput {
	return i.ToReferenceStoreTagMapPtrOutputWithContext(context.Background())
}

func (i *referenceStoreTagMapPtrType) ToReferenceStoreTagMapPtrOutputWithContext(ctx context.Context) ReferenceStoreTagMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceStoreTagMapPtrOutput)
}

func (i *referenceStoreTagMapPtrType) ToOutput(ctx context.Context) pulumix.Output[*ReferenceStoreTagMap] {
	return pulumix.Output[*ReferenceStoreTagMap]{
		OutputState: i.ToReferenceStoreTagMapPtrOutputWithContext(ctx).OutputState,
	}
}

type ReferenceStoreTagMapOutput struct{ *pulumi.OutputState }

func (ReferenceStoreTagMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceStoreTagMap)(nil)).Elem()
}

func (o ReferenceStoreTagMapOutput) ToReferenceStoreTagMapOutput() ReferenceStoreTagMapOutput {
	return o
}

func (o ReferenceStoreTagMapOutput) ToReferenceStoreTagMapOutputWithContext(ctx context.Context) ReferenceStoreTagMapOutput {
	return o
}

func (o ReferenceStoreTagMapOutput) ToReferenceStoreTagMapPtrOutput() ReferenceStoreTagMapPtrOutput {
	return o.ToReferenceStoreTagMapPtrOutputWithContext(context.Background())
}

func (o ReferenceStoreTagMapOutput) ToReferenceStoreTagMapPtrOutputWithContext(ctx context.Context) ReferenceStoreTagMapPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReferenceStoreTagMap) *ReferenceStoreTagMap {
		return &v
	}).(ReferenceStoreTagMapPtrOutput)
}

func (o ReferenceStoreTagMapOutput) ToOutput(ctx context.Context) pulumix.Output[ReferenceStoreTagMap] {
	return pulumix.Output[ReferenceStoreTagMap]{
		OutputState: o.OutputState,
	}
}

type ReferenceStoreTagMapPtrOutput struct{ *pulumi.OutputState }

func (ReferenceStoreTagMapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReferenceStoreTagMap)(nil)).Elem()
}

func (o ReferenceStoreTagMapPtrOutput) ToReferenceStoreTagMapPtrOutput() ReferenceStoreTagMapPtrOutput {
	return o
}

func (o ReferenceStoreTagMapPtrOutput) ToReferenceStoreTagMapPtrOutputWithContext(ctx context.Context) ReferenceStoreTagMapPtrOutput {
	return o
}

func (o ReferenceStoreTagMapPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ReferenceStoreTagMap] {
	return pulumix.Output[*ReferenceStoreTagMap]{
		OutputState: o.OutputState,
	}
}

func (o ReferenceStoreTagMapPtrOutput) Elem() ReferenceStoreTagMapOutput {
	return o.ApplyT(func(v *ReferenceStoreTagMap) ReferenceStoreTagMap {
		if v != nil {
			return *v
		}
		var ret ReferenceStoreTagMap
		return ret
	}).(ReferenceStoreTagMapOutput)
}

// A map of resource tags
type RunGroupTagMap struct {
}

// RunGroupTagMapInput is an input type that accepts RunGroupTagMap and RunGroupTagMapOutput values.
// You can construct a concrete instance of `RunGroupTagMapInput` via:
//
//	RunGroupTagMap{ "key": RunGroupTagArgs{...} }
type RunGroupTagMapInput interface {
	pulumi.Input

	ToRunGroupTagMapOutput() RunGroupTagMapOutput
	ToRunGroupTagMapOutputWithContext(context.Context) RunGroupTagMapOutput
}

// A map of resource tags
type RunGroupTagMapArgs struct {
}

func (RunGroupTagMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RunGroupTagMap)(nil)).Elem()
}

func (i RunGroupTagMapArgs) ToRunGroupTagMapOutput() RunGroupTagMapOutput {
	return i.ToRunGroupTagMapOutputWithContext(context.Background())
}

func (i RunGroupTagMapArgs) ToRunGroupTagMapOutputWithContext(ctx context.Context) RunGroupTagMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunGroupTagMapOutput)
}

func (i RunGroupTagMapArgs) ToOutput(ctx context.Context) pulumix.Output[RunGroupTagMap] {
	return pulumix.Output[RunGroupTagMap]{
		OutputState: i.ToRunGroupTagMapOutputWithContext(ctx).OutputState,
	}
}

func (i RunGroupTagMapArgs) ToRunGroupTagMapPtrOutput() RunGroupTagMapPtrOutput {
	return i.ToRunGroupTagMapPtrOutputWithContext(context.Background())
}

func (i RunGroupTagMapArgs) ToRunGroupTagMapPtrOutputWithContext(ctx context.Context) RunGroupTagMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunGroupTagMapOutput).ToRunGroupTagMapPtrOutputWithContext(ctx)
}

// RunGroupTagMapPtrInput is an input type that accepts RunGroupTagMapArgs, RunGroupTagMapPtr and RunGroupTagMapPtrOutput values.
// You can construct a concrete instance of `RunGroupTagMapPtrInput` via:
//
//	        RunGroupTagMapArgs{...}
//
//	or:
//
//	        nil
type RunGroupTagMapPtrInput interface {
	pulumi.Input

	ToRunGroupTagMapPtrOutput() RunGroupTagMapPtrOutput
	ToRunGroupTagMapPtrOutputWithContext(context.Context) RunGroupTagMapPtrOutput
}

type runGroupTagMapPtrType RunGroupTagMapArgs

func RunGroupTagMapPtr(v *RunGroupTagMapArgs) RunGroupTagMapPtrInput {
	return (*runGroupTagMapPtrType)(v)
}

func (*runGroupTagMapPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RunGroupTagMap)(nil)).Elem()
}

func (i *runGroupTagMapPtrType) ToRunGroupTagMapPtrOutput() RunGroupTagMapPtrOutput {
	return i.ToRunGroupTagMapPtrOutputWithContext(context.Background())
}

func (i *runGroupTagMapPtrType) ToRunGroupTagMapPtrOutputWithContext(ctx context.Context) RunGroupTagMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunGroupTagMapPtrOutput)
}

func (i *runGroupTagMapPtrType) ToOutput(ctx context.Context) pulumix.Output[*RunGroupTagMap] {
	return pulumix.Output[*RunGroupTagMap]{
		OutputState: i.ToRunGroupTagMapPtrOutputWithContext(ctx).OutputState,
	}
}

// A map of resource tags
type RunGroupTagMapOutput struct{ *pulumi.OutputState }

func (RunGroupTagMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RunGroupTagMap)(nil)).Elem()
}

func (o RunGroupTagMapOutput) ToRunGroupTagMapOutput() RunGroupTagMapOutput {
	return o
}

func (o RunGroupTagMapOutput) ToRunGroupTagMapOutputWithContext(ctx context.Context) RunGroupTagMapOutput {
	return o
}

func (o RunGroupTagMapOutput) ToRunGroupTagMapPtrOutput() RunGroupTagMapPtrOutput {
	return o.ToRunGroupTagMapPtrOutputWithContext(context.Background())
}

func (o RunGroupTagMapOutput) ToRunGroupTagMapPtrOutputWithContext(ctx context.Context) RunGroupTagMapPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RunGroupTagMap) *RunGroupTagMap {
		return &v
	}).(RunGroupTagMapPtrOutput)
}

func (o RunGroupTagMapOutput) ToOutput(ctx context.Context) pulumix.Output[RunGroupTagMap] {
	return pulumix.Output[RunGroupTagMap]{
		OutputState: o.OutputState,
	}
}

type RunGroupTagMapPtrOutput struct{ *pulumi.OutputState }

func (RunGroupTagMapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RunGroupTagMap)(nil)).Elem()
}

func (o RunGroupTagMapPtrOutput) ToRunGroupTagMapPtrOutput() RunGroupTagMapPtrOutput {
	return o
}

func (o RunGroupTagMapPtrOutput) ToRunGroupTagMapPtrOutputWithContext(ctx context.Context) RunGroupTagMapPtrOutput {
	return o
}

func (o RunGroupTagMapPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RunGroupTagMap] {
	return pulumix.Output[*RunGroupTagMap]{
		OutputState: o.OutputState,
	}
}

func (o RunGroupTagMapPtrOutput) Elem() RunGroupTagMapOutput {
	return o.ApplyT(func(v *RunGroupTagMap) RunGroupTagMap {
		if v != nil {
			return *v
		}
		var ret RunGroupTagMap
		return ret
	}).(RunGroupTagMapOutput)
}

// Server-side encryption (SSE) settings for a store.
type SequenceStoreSseConfig struct {
	// An encryption key ARN.
	KeyArn *string                     `pulumi:"keyArn"`
	Type   SequenceStoreEncryptionType `pulumi:"type"`
}

// SequenceStoreSseConfigInput is an input type that accepts SequenceStoreSseConfigArgs and SequenceStoreSseConfigOutput values.
// You can construct a concrete instance of `SequenceStoreSseConfigInput` via:
//
//	SequenceStoreSseConfigArgs{...}
type SequenceStoreSseConfigInput interface {
	pulumi.Input

	ToSequenceStoreSseConfigOutput() SequenceStoreSseConfigOutput
	ToSequenceStoreSseConfigOutputWithContext(context.Context) SequenceStoreSseConfigOutput
}

// Server-side encryption (SSE) settings for a store.
type SequenceStoreSseConfigArgs struct {
	// An encryption key ARN.
	KeyArn pulumi.StringPtrInput            `pulumi:"keyArn"`
	Type   SequenceStoreEncryptionTypeInput `pulumi:"type"`
}

func (SequenceStoreSseConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SequenceStoreSseConfig)(nil)).Elem()
}

func (i SequenceStoreSseConfigArgs) ToSequenceStoreSseConfigOutput() SequenceStoreSseConfigOutput {
	return i.ToSequenceStoreSseConfigOutputWithContext(context.Background())
}

func (i SequenceStoreSseConfigArgs) ToSequenceStoreSseConfigOutputWithContext(ctx context.Context) SequenceStoreSseConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SequenceStoreSseConfigOutput)
}

func (i SequenceStoreSseConfigArgs) ToOutput(ctx context.Context) pulumix.Output[SequenceStoreSseConfig] {
	return pulumix.Output[SequenceStoreSseConfig]{
		OutputState: i.ToSequenceStoreSseConfigOutputWithContext(ctx).OutputState,
	}
}

func (i SequenceStoreSseConfigArgs) ToSequenceStoreSseConfigPtrOutput() SequenceStoreSseConfigPtrOutput {
	return i.ToSequenceStoreSseConfigPtrOutputWithContext(context.Background())
}

func (i SequenceStoreSseConfigArgs) ToSequenceStoreSseConfigPtrOutputWithContext(ctx context.Context) SequenceStoreSseConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SequenceStoreSseConfigOutput).ToSequenceStoreSseConfigPtrOutputWithContext(ctx)
}

// SequenceStoreSseConfigPtrInput is an input type that accepts SequenceStoreSseConfigArgs, SequenceStoreSseConfigPtr and SequenceStoreSseConfigPtrOutput values.
// You can construct a concrete instance of `SequenceStoreSseConfigPtrInput` via:
//
//	        SequenceStoreSseConfigArgs{...}
//
//	or:
//
//	        nil
type SequenceStoreSseConfigPtrInput interface {
	pulumi.Input

	ToSequenceStoreSseConfigPtrOutput() SequenceStoreSseConfigPtrOutput
	ToSequenceStoreSseConfigPtrOutputWithContext(context.Context) SequenceStoreSseConfigPtrOutput
}

type sequenceStoreSseConfigPtrType SequenceStoreSseConfigArgs

func SequenceStoreSseConfigPtr(v *SequenceStoreSseConfigArgs) SequenceStoreSseConfigPtrInput {
	return (*sequenceStoreSseConfigPtrType)(v)
}

func (*sequenceStoreSseConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SequenceStoreSseConfig)(nil)).Elem()
}

func (i *sequenceStoreSseConfigPtrType) ToSequenceStoreSseConfigPtrOutput() SequenceStoreSseConfigPtrOutput {
	return i.ToSequenceStoreSseConfigPtrOutputWithContext(context.Background())
}

func (i *sequenceStoreSseConfigPtrType) ToSequenceStoreSseConfigPtrOutputWithContext(ctx context.Context) SequenceStoreSseConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SequenceStoreSseConfigPtrOutput)
}

func (i *sequenceStoreSseConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*SequenceStoreSseConfig] {
	return pulumix.Output[*SequenceStoreSseConfig]{
		OutputState: i.ToSequenceStoreSseConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// Server-side encryption (SSE) settings for a store.
type SequenceStoreSseConfigOutput struct{ *pulumi.OutputState }

func (SequenceStoreSseConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SequenceStoreSseConfig)(nil)).Elem()
}

func (o SequenceStoreSseConfigOutput) ToSequenceStoreSseConfigOutput() SequenceStoreSseConfigOutput {
	return o
}

func (o SequenceStoreSseConfigOutput) ToSequenceStoreSseConfigOutputWithContext(ctx context.Context) SequenceStoreSseConfigOutput {
	return o
}

func (o SequenceStoreSseConfigOutput) ToSequenceStoreSseConfigPtrOutput() SequenceStoreSseConfigPtrOutput {
	return o.ToSequenceStoreSseConfigPtrOutputWithContext(context.Background())
}

func (o SequenceStoreSseConfigOutput) ToSequenceStoreSseConfigPtrOutputWithContext(ctx context.Context) SequenceStoreSseConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SequenceStoreSseConfig) *SequenceStoreSseConfig {
		return &v
	}).(SequenceStoreSseConfigPtrOutput)
}

func (o SequenceStoreSseConfigOutput) ToOutput(ctx context.Context) pulumix.Output[SequenceStoreSseConfig] {
	return pulumix.Output[SequenceStoreSseConfig]{
		OutputState: o.OutputState,
	}
}

// An encryption key ARN.
func (o SequenceStoreSseConfigOutput) KeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SequenceStoreSseConfig) *string { return v.KeyArn }).(pulumi.StringPtrOutput)
}

func (o SequenceStoreSseConfigOutput) Type() SequenceStoreEncryptionTypeOutput {
	return o.ApplyT(func(v SequenceStoreSseConfig) SequenceStoreEncryptionType { return v.Type }).(SequenceStoreEncryptionTypeOutput)
}

type SequenceStoreSseConfigPtrOutput struct{ *pulumi.OutputState }

func (SequenceStoreSseConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SequenceStoreSseConfig)(nil)).Elem()
}

func (o SequenceStoreSseConfigPtrOutput) ToSequenceStoreSseConfigPtrOutput() SequenceStoreSseConfigPtrOutput {
	return o
}

func (o SequenceStoreSseConfigPtrOutput) ToSequenceStoreSseConfigPtrOutputWithContext(ctx context.Context) SequenceStoreSseConfigPtrOutput {
	return o
}

func (o SequenceStoreSseConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SequenceStoreSseConfig] {
	return pulumix.Output[*SequenceStoreSseConfig]{
		OutputState: o.OutputState,
	}
}

func (o SequenceStoreSseConfigPtrOutput) Elem() SequenceStoreSseConfigOutput {
	return o.ApplyT(func(v *SequenceStoreSseConfig) SequenceStoreSseConfig {
		if v != nil {
			return *v
		}
		var ret SequenceStoreSseConfig
		return ret
	}).(SequenceStoreSseConfigOutput)
}

// An encryption key ARN.
func (o SequenceStoreSseConfigPtrOutput) KeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SequenceStoreSseConfig) *string {
		if v == nil {
			return nil
		}
		return v.KeyArn
	}).(pulumi.StringPtrOutput)
}

func (o SequenceStoreSseConfigPtrOutput) Type() SequenceStoreEncryptionTypePtrOutput {
	return o.ApplyT(func(v *SequenceStoreSseConfig) *SequenceStoreEncryptionType {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(SequenceStoreEncryptionTypePtrOutput)
}

type SequenceStoreTagMap struct {
}

// SequenceStoreTagMapInput is an input type that accepts SequenceStoreTagMap and SequenceStoreTagMapOutput values.
// You can construct a concrete instance of `SequenceStoreTagMapInput` via:
//
//	SequenceStoreTagMap{ "key": SequenceStoreTagArgs{...} }
type SequenceStoreTagMapInput interface {
	pulumi.Input

	ToSequenceStoreTagMapOutput() SequenceStoreTagMapOutput
	ToSequenceStoreTagMapOutputWithContext(context.Context) SequenceStoreTagMapOutput
}

type SequenceStoreTagMapArgs struct {
}

func (SequenceStoreTagMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SequenceStoreTagMap)(nil)).Elem()
}

func (i SequenceStoreTagMapArgs) ToSequenceStoreTagMapOutput() SequenceStoreTagMapOutput {
	return i.ToSequenceStoreTagMapOutputWithContext(context.Background())
}

func (i SequenceStoreTagMapArgs) ToSequenceStoreTagMapOutputWithContext(ctx context.Context) SequenceStoreTagMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SequenceStoreTagMapOutput)
}

func (i SequenceStoreTagMapArgs) ToOutput(ctx context.Context) pulumix.Output[SequenceStoreTagMap] {
	return pulumix.Output[SequenceStoreTagMap]{
		OutputState: i.ToSequenceStoreTagMapOutputWithContext(ctx).OutputState,
	}
}

func (i SequenceStoreTagMapArgs) ToSequenceStoreTagMapPtrOutput() SequenceStoreTagMapPtrOutput {
	return i.ToSequenceStoreTagMapPtrOutputWithContext(context.Background())
}

func (i SequenceStoreTagMapArgs) ToSequenceStoreTagMapPtrOutputWithContext(ctx context.Context) SequenceStoreTagMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SequenceStoreTagMapOutput).ToSequenceStoreTagMapPtrOutputWithContext(ctx)
}

// SequenceStoreTagMapPtrInput is an input type that accepts SequenceStoreTagMapArgs, SequenceStoreTagMapPtr and SequenceStoreTagMapPtrOutput values.
// You can construct a concrete instance of `SequenceStoreTagMapPtrInput` via:
//
//	        SequenceStoreTagMapArgs{...}
//
//	or:
//
//	        nil
type SequenceStoreTagMapPtrInput interface {
	pulumi.Input

	ToSequenceStoreTagMapPtrOutput() SequenceStoreTagMapPtrOutput
	ToSequenceStoreTagMapPtrOutputWithContext(context.Context) SequenceStoreTagMapPtrOutput
}

type sequenceStoreTagMapPtrType SequenceStoreTagMapArgs

func SequenceStoreTagMapPtr(v *SequenceStoreTagMapArgs) SequenceStoreTagMapPtrInput {
	return (*sequenceStoreTagMapPtrType)(v)
}

func (*sequenceStoreTagMapPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SequenceStoreTagMap)(nil)).Elem()
}

func (i *sequenceStoreTagMapPtrType) ToSequenceStoreTagMapPtrOutput() SequenceStoreTagMapPtrOutput {
	return i.ToSequenceStoreTagMapPtrOutputWithContext(context.Background())
}

func (i *sequenceStoreTagMapPtrType) ToSequenceStoreTagMapPtrOutputWithContext(ctx context.Context) SequenceStoreTagMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SequenceStoreTagMapPtrOutput)
}

func (i *sequenceStoreTagMapPtrType) ToOutput(ctx context.Context) pulumix.Output[*SequenceStoreTagMap] {
	return pulumix.Output[*SequenceStoreTagMap]{
		OutputState: i.ToSequenceStoreTagMapPtrOutputWithContext(ctx).OutputState,
	}
}

type SequenceStoreTagMapOutput struct{ *pulumi.OutputState }

func (SequenceStoreTagMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SequenceStoreTagMap)(nil)).Elem()
}

func (o SequenceStoreTagMapOutput) ToSequenceStoreTagMapOutput() SequenceStoreTagMapOutput {
	return o
}

func (o SequenceStoreTagMapOutput) ToSequenceStoreTagMapOutputWithContext(ctx context.Context) SequenceStoreTagMapOutput {
	return o
}

func (o SequenceStoreTagMapOutput) ToSequenceStoreTagMapPtrOutput() SequenceStoreTagMapPtrOutput {
	return o.ToSequenceStoreTagMapPtrOutputWithContext(context.Background())
}

func (o SequenceStoreTagMapOutput) ToSequenceStoreTagMapPtrOutputWithContext(ctx context.Context) SequenceStoreTagMapPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SequenceStoreTagMap) *SequenceStoreTagMap {
		return &v
	}).(SequenceStoreTagMapPtrOutput)
}

func (o SequenceStoreTagMapOutput) ToOutput(ctx context.Context) pulumix.Output[SequenceStoreTagMap] {
	return pulumix.Output[SequenceStoreTagMap]{
		OutputState: o.OutputState,
	}
}

type SequenceStoreTagMapPtrOutput struct{ *pulumi.OutputState }

func (SequenceStoreTagMapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SequenceStoreTagMap)(nil)).Elem()
}

func (o SequenceStoreTagMapPtrOutput) ToSequenceStoreTagMapPtrOutput() SequenceStoreTagMapPtrOutput {
	return o
}

func (o SequenceStoreTagMapPtrOutput) ToSequenceStoreTagMapPtrOutputWithContext(ctx context.Context) SequenceStoreTagMapPtrOutput {
	return o
}

func (o SequenceStoreTagMapPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SequenceStoreTagMap] {
	return pulumix.Output[*SequenceStoreTagMap]{
		OutputState: o.OutputState,
	}
}

func (o SequenceStoreTagMapPtrOutput) Elem() SequenceStoreTagMapOutput {
	return o.ApplyT(func(v *SequenceStoreTagMap) SequenceStoreTagMap {
		if v != nil {
			return *v
		}
		var ret SequenceStoreTagMap
		return ret
	}).(SequenceStoreTagMapOutput)
}

type VariantStoreReferenceItem struct {
	ReferenceArn string `pulumi:"referenceArn"`
}

// VariantStoreReferenceItemInput is an input type that accepts VariantStoreReferenceItemArgs and VariantStoreReferenceItemOutput values.
// You can construct a concrete instance of `VariantStoreReferenceItemInput` via:
//
//	VariantStoreReferenceItemArgs{...}
type VariantStoreReferenceItemInput interface {
	pulumi.Input

	ToVariantStoreReferenceItemOutput() VariantStoreReferenceItemOutput
	ToVariantStoreReferenceItemOutputWithContext(context.Context) VariantStoreReferenceItemOutput
}

type VariantStoreReferenceItemArgs struct {
	ReferenceArn pulumi.StringInput `pulumi:"referenceArn"`
}

func (VariantStoreReferenceItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VariantStoreReferenceItem)(nil)).Elem()
}

func (i VariantStoreReferenceItemArgs) ToVariantStoreReferenceItemOutput() VariantStoreReferenceItemOutput {
	return i.ToVariantStoreReferenceItemOutputWithContext(context.Background())
}

func (i VariantStoreReferenceItemArgs) ToVariantStoreReferenceItemOutputWithContext(ctx context.Context) VariantStoreReferenceItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VariantStoreReferenceItemOutput)
}

func (i VariantStoreReferenceItemArgs) ToOutput(ctx context.Context) pulumix.Output[VariantStoreReferenceItem] {
	return pulumix.Output[VariantStoreReferenceItem]{
		OutputState: i.ToVariantStoreReferenceItemOutputWithContext(ctx).OutputState,
	}
}

type VariantStoreReferenceItemOutput struct{ *pulumi.OutputState }

func (VariantStoreReferenceItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VariantStoreReferenceItem)(nil)).Elem()
}

func (o VariantStoreReferenceItemOutput) ToVariantStoreReferenceItemOutput() VariantStoreReferenceItemOutput {
	return o
}

func (o VariantStoreReferenceItemOutput) ToVariantStoreReferenceItemOutputWithContext(ctx context.Context) VariantStoreReferenceItemOutput {
	return o
}

func (o VariantStoreReferenceItemOutput) ToOutput(ctx context.Context) pulumix.Output[VariantStoreReferenceItem] {
	return pulumix.Output[VariantStoreReferenceItem]{
		OutputState: o.OutputState,
	}
}

func (o VariantStoreReferenceItemOutput) ReferenceArn() pulumi.StringOutput {
	return o.ApplyT(func(v VariantStoreReferenceItem) string { return v.ReferenceArn }).(pulumi.StringOutput)
}

type VariantStoreSseConfig struct {
	KeyArn *string                    `pulumi:"keyArn"`
	Type   VariantStoreEncryptionType `pulumi:"type"`
}

// VariantStoreSseConfigInput is an input type that accepts VariantStoreSseConfigArgs and VariantStoreSseConfigOutput values.
// You can construct a concrete instance of `VariantStoreSseConfigInput` via:
//
//	VariantStoreSseConfigArgs{...}
type VariantStoreSseConfigInput interface {
	pulumi.Input

	ToVariantStoreSseConfigOutput() VariantStoreSseConfigOutput
	ToVariantStoreSseConfigOutputWithContext(context.Context) VariantStoreSseConfigOutput
}

type VariantStoreSseConfigArgs struct {
	KeyArn pulumi.StringPtrInput           `pulumi:"keyArn"`
	Type   VariantStoreEncryptionTypeInput `pulumi:"type"`
}

func (VariantStoreSseConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VariantStoreSseConfig)(nil)).Elem()
}

func (i VariantStoreSseConfigArgs) ToVariantStoreSseConfigOutput() VariantStoreSseConfigOutput {
	return i.ToVariantStoreSseConfigOutputWithContext(context.Background())
}

func (i VariantStoreSseConfigArgs) ToVariantStoreSseConfigOutputWithContext(ctx context.Context) VariantStoreSseConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VariantStoreSseConfigOutput)
}

func (i VariantStoreSseConfigArgs) ToOutput(ctx context.Context) pulumix.Output[VariantStoreSseConfig] {
	return pulumix.Output[VariantStoreSseConfig]{
		OutputState: i.ToVariantStoreSseConfigOutputWithContext(ctx).OutputState,
	}
}

func (i VariantStoreSseConfigArgs) ToVariantStoreSseConfigPtrOutput() VariantStoreSseConfigPtrOutput {
	return i.ToVariantStoreSseConfigPtrOutputWithContext(context.Background())
}

func (i VariantStoreSseConfigArgs) ToVariantStoreSseConfigPtrOutputWithContext(ctx context.Context) VariantStoreSseConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VariantStoreSseConfigOutput).ToVariantStoreSseConfigPtrOutputWithContext(ctx)
}

// VariantStoreSseConfigPtrInput is an input type that accepts VariantStoreSseConfigArgs, VariantStoreSseConfigPtr and VariantStoreSseConfigPtrOutput values.
// You can construct a concrete instance of `VariantStoreSseConfigPtrInput` via:
//
//	        VariantStoreSseConfigArgs{...}
//
//	or:
//
//	        nil
type VariantStoreSseConfigPtrInput interface {
	pulumi.Input

	ToVariantStoreSseConfigPtrOutput() VariantStoreSseConfigPtrOutput
	ToVariantStoreSseConfigPtrOutputWithContext(context.Context) VariantStoreSseConfigPtrOutput
}

type variantStoreSseConfigPtrType VariantStoreSseConfigArgs

func VariantStoreSseConfigPtr(v *VariantStoreSseConfigArgs) VariantStoreSseConfigPtrInput {
	return (*variantStoreSseConfigPtrType)(v)
}

func (*variantStoreSseConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VariantStoreSseConfig)(nil)).Elem()
}

func (i *variantStoreSseConfigPtrType) ToVariantStoreSseConfigPtrOutput() VariantStoreSseConfigPtrOutput {
	return i.ToVariantStoreSseConfigPtrOutputWithContext(context.Background())
}

func (i *variantStoreSseConfigPtrType) ToVariantStoreSseConfigPtrOutputWithContext(ctx context.Context) VariantStoreSseConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VariantStoreSseConfigPtrOutput)
}

func (i *variantStoreSseConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*VariantStoreSseConfig] {
	return pulumix.Output[*VariantStoreSseConfig]{
		OutputState: i.ToVariantStoreSseConfigPtrOutputWithContext(ctx).OutputState,
	}
}

type VariantStoreSseConfigOutput struct{ *pulumi.OutputState }

func (VariantStoreSseConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VariantStoreSseConfig)(nil)).Elem()
}

func (o VariantStoreSseConfigOutput) ToVariantStoreSseConfigOutput() VariantStoreSseConfigOutput {
	return o
}

func (o VariantStoreSseConfigOutput) ToVariantStoreSseConfigOutputWithContext(ctx context.Context) VariantStoreSseConfigOutput {
	return o
}

func (o VariantStoreSseConfigOutput) ToVariantStoreSseConfigPtrOutput() VariantStoreSseConfigPtrOutput {
	return o.ToVariantStoreSseConfigPtrOutputWithContext(context.Background())
}

func (o VariantStoreSseConfigOutput) ToVariantStoreSseConfigPtrOutputWithContext(ctx context.Context) VariantStoreSseConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VariantStoreSseConfig) *VariantStoreSseConfig {
		return &v
	}).(VariantStoreSseConfigPtrOutput)
}

func (o VariantStoreSseConfigOutput) ToOutput(ctx context.Context) pulumix.Output[VariantStoreSseConfig] {
	return pulumix.Output[VariantStoreSseConfig]{
		OutputState: o.OutputState,
	}
}

func (o VariantStoreSseConfigOutput) KeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VariantStoreSseConfig) *string { return v.KeyArn }).(pulumi.StringPtrOutput)
}

func (o VariantStoreSseConfigOutput) Type() VariantStoreEncryptionTypeOutput {
	return o.ApplyT(func(v VariantStoreSseConfig) VariantStoreEncryptionType { return v.Type }).(VariantStoreEncryptionTypeOutput)
}

type VariantStoreSseConfigPtrOutput struct{ *pulumi.OutputState }

func (VariantStoreSseConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VariantStoreSseConfig)(nil)).Elem()
}

func (o VariantStoreSseConfigPtrOutput) ToVariantStoreSseConfigPtrOutput() VariantStoreSseConfigPtrOutput {
	return o
}

func (o VariantStoreSseConfigPtrOutput) ToVariantStoreSseConfigPtrOutputWithContext(ctx context.Context) VariantStoreSseConfigPtrOutput {
	return o
}

func (o VariantStoreSseConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*VariantStoreSseConfig] {
	return pulumix.Output[*VariantStoreSseConfig]{
		OutputState: o.OutputState,
	}
}

func (o VariantStoreSseConfigPtrOutput) Elem() VariantStoreSseConfigOutput {
	return o.ApplyT(func(v *VariantStoreSseConfig) VariantStoreSseConfig {
		if v != nil {
			return *v
		}
		var ret VariantStoreSseConfig
		return ret
	}).(VariantStoreSseConfigOutput)
}

func (o VariantStoreSseConfigPtrOutput) KeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VariantStoreSseConfig) *string {
		if v == nil {
			return nil
		}
		return v.KeyArn
	}).(pulumi.StringPtrOutput)
}

func (o VariantStoreSseConfigPtrOutput) Type() VariantStoreEncryptionTypePtrOutput {
	return o.ApplyT(func(v *VariantStoreSseConfig) *VariantStoreEncryptionType {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(VariantStoreEncryptionTypePtrOutput)
}

type VariantStoreTagMap struct {
}

// VariantStoreTagMapInput is an input type that accepts VariantStoreTagMap and VariantStoreTagMapOutput values.
// You can construct a concrete instance of `VariantStoreTagMapInput` via:
//
//	VariantStoreTagMap{ "key": VariantStoreTagArgs{...} }
type VariantStoreTagMapInput interface {
	pulumi.Input

	ToVariantStoreTagMapOutput() VariantStoreTagMapOutput
	ToVariantStoreTagMapOutputWithContext(context.Context) VariantStoreTagMapOutput
}

type VariantStoreTagMapArgs struct {
}

func (VariantStoreTagMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VariantStoreTagMap)(nil)).Elem()
}

func (i VariantStoreTagMapArgs) ToVariantStoreTagMapOutput() VariantStoreTagMapOutput {
	return i.ToVariantStoreTagMapOutputWithContext(context.Background())
}

func (i VariantStoreTagMapArgs) ToVariantStoreTagMapOutputWithContext(ctx context.Context) VariantStoreTagMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VariantStoreTagMapOutput)
}

func (i VariantStoreTagMapArgs) ToOutput(ctx context.Context) pulumix.Output[VariantStoreTagMap] {
	return pulumix.Output[VariantStoreTagMap]{
		OutputState: i.ToVariantStoreTagMapOutputWithContext(ctx).OutputState,
	}
}

func (i VariantStoreTagMapArgs) ToVariantStoreTagMapPtrOutput() VariantStoreTagMapPtrOutput {
	return i.ToVariantStoreTagMapPtrOutputWithContext(context.Background())
}

func (i VariantStoreTagMapArgs) ToVariantStoreTagMapPtrOutputWithContext(ctx context.Context) VariantStoreTagMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VariantStoreTagMapOutput).ToVariantStoreTagMapPtrOutputWithContext(ctx)
}

// VariantStoreTagMapPtrInput is an input type that accepts VariantStoreTagMapArgs, VariantStoreTagMapPtr and VariantStoreTagMapPtrOutput values.
// You can construct a concrete instance of `VariantStoreTagMapPtrInput` via:
//
//	        VariantStoreTagMapArgs{...}
//
//	or:
//
//	        nil
type VariantStoreTagMapPtrInput interface {
	pulumi.Input

	ToVariantStoreTagMapPtrOutput() VariantStoreTagMapPtrOutput
	ToVariantStoreTagMapPtrOutputWithContext(context.Context) VariantStoreTagMapPtrOutput
}

type variantStoreTagMapPtrType VariantStoreTagMapArgs

func VariantStoreTagMapPtr(v *VariantStoreTagMapArgs) VariantStoreTagMapPtrInput {
	return (*variantStoreTagMapPtrType)(v)
}

func (*variantStoreTagMapPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VariantStoreTagMap)(nil)).Elem()
}

func (i *variantStoreTagMapPtrType) ToVariantStoreTagMapPtrOutput() VariantStoreTagMapPtrOutput {
	return i.ToVariantStoreTagMapPtrOutputWithContext(context.Background())
}

func (i *variantStoreTagMapPtrType) ToVariantStoreTagMapPtrOutputWithContext(ctx context.Context) VariantStoreTagMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VariantStoreTagMapPtrOutput)
}

func (i *variantStoreTagMapPtrType) ToOutput(ctx context.Context) pulumix.Output[*VariantStoreTagMap] {
	return pulumix.Output[*VariantStoreTagMap]{
		OutputState: i.ToVariantStoreTagMapPtrOutputWithContext(ctx).OutputState,
	}
}

type VariantStoreTagMapOutput struct{ *pulumi.OutputState }

func (VariantStoreTagMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VariantStoreTagMap)(nil)).Elem()
}

func (o VariantStoreTagMapOutput) ToVariantStoreTagMapOutput() VariantStoreTagMapOutput {
	return o
}

func (o VariantStoreTagMapOutput) ToVariantStoreTagMapOutputWithContext(ctx context.Context) VariantStoreTagMapOutput {
	return o
}

func (o VariantStoreTagMapOutput) ToVariantStoreTagMapPtrOutput() VariantStoreTagMapPtrOutput {
	return o.ToVariantStoreTagMapPtrOutputWithContext(context.Background())
}

func (o VariantStoreTagMapOutput) ToVariantStoreTagMapPtrOutputWithContext(ctx context.Context) VariantStoreTagMapPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VariantStoreTagMap) *VariantStoreTagMap {
		return &v
	}).(VariantStoreTagMapPtrOutput)
}

func (o VariantStoreTagMapOutput) ToOutput(ctx context.Context) pulumix.Output[VariantStoreTagMap] {
	return pulumix.Output[VariantStoreTagMap]{
		OutputState: o.OutputState,
	}
}

type VariantStoreTagMapPtrOutput struct{ *pulumi.OutputState }

func (VariantStoreTagMapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VariantStoreTagMap)(nil)).Elem()
}

func (o VariantStoreTagMapPtrOutput) ToVariantStoreTagMapPtrOutput() VariantStoreTagMapPtrOutput {
	return o
}

func (o VariantStoreTagMapPtrOutput) ToVariantStoreTagMapPtrOutputWithContext(ctx context.Context) VariantStoreTagMapPtrOutput {
	return o
}

func (o VariantStoreTagMapPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*VariantStoreTagMap] {
	return pulumix.Output[*VariantStoreTagMap]{
		OutputState: o.OutputState,
	}
}

func (o VariantStoreTagMapPtrOutput) Elem() VariantStoreTagMapOutput {
	return o.ApplyT(func(v *VariantStoreTagMap) VariantStoreTagMap {
		if v != nil {
			return *v
		}
		var ret VariantStoreTagMap
		return ret
	}).(VariantStoreTagMapOutput)
}

type WorkflowParameterTemplate struct {
}

// WorkflowParameterTemplateInput is an input type that accepts WorkflowParameterTemplateArgs and WorkflowParameterTemplateOutput values.
// You can construct a concrete instance of `WorkflowParameterTemplateInput` via:
//
//	WorkflowParameterTemplateArgs{...}
type WorkflowParameterTemplateInput interface {
	pulumi.Input

	ToWorkflowParameterTemplateOutput() WorkflowParameterTemplateOutput
	ToWorkflowParameterTemplateOutputWithContext(context.Context) WorkflowParameterTemplateOutput
}

type WorkflowParameterTemplateArgs struct {
}

func (WorkflowParameterTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowParameterTemplate)(nil)).Elem()
}

func (i WorkflowParameterTemplateArgs) ToWorkflowParameterTemplateOutput() WorkflowParameterTemplateOutput {
	return i.ToWorkflowParameterTemplateOutputWithContext(context.Background())
}

func (i WorkflowParameterTemplateArgs) ToWorkflowParameterTemplateOutputWithContext(ctx context.Context) WorkflowParameterTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowParameterTemplateOutput)
}

func (i WorkflowParameterTemplateArgs) ToOutput(ctx context.Context) pulumix.Output[WorkflowParameterTemplate] {
	return pulumix.Output[WorkflowParameterTemplate]{
		OutputState: i.ToWorkflowParameterTemplateOutputWithContext(ctx).OutputState,
	}
}

func (i WorkflowParameterTemplateArgs) ToWorkflowParameterTemplatePtrOutput() WorkflowParameterTemplatePtrOutput {
	return i.ToWorkflowParameterTemplatePtrOutputWithContext(context.Background())
}

func (i WorkflowParameterTemplateArgs) ToWorkflowParameterTemplatePtrOutputWithContext(ctx context.Context) WorkflowParameterTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowParameterTemplateOutput).ToWorkflowParameterTemplatePtrOutputWithContext(ctx)
}

// WorkflowParameterTemplatePtrInput is an input type that accepts WorkflowParameterTemplateArgs, WorkflowParameterTemplatePtr and WorkflowParameterTemplatePtrOutput values.
// You can construct a concrete instance of `WorkflowParameterTemplatePtrInput` via:
//
//	        WorkflowParameterTemplateArgs{...}
//
//	or:
//
//	        nil
type WorkflowParameterTemplatePtrInput interface {
	pulumi.Input

	ToWorkflowParameterTemplatePtrOutput() WorkflowParameterTemplatePtrOutput
	ToWorkflowParameterTemplatePtrOutputWithContext(context.Context) WorkflowParameterTemplatePtrOutput
}

type workflowParameterTemplatePtrType WorkflowParameterTemplateArgs

func WorkflowParameterTemplatePtr(v *WorkflowParameterTemplateArgs) WorkflowParameterTemplatePtrInput {
	return (*workflowParameterTemplatePtrType)(v)
}

func (*workflowParameterTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowParameterTemplate)(nil)).Elem()
}

func (i *workflowParameterTemplatePtrType) ToWorkflowParameterTemplatePtrOutput() WorkflowParameterTemplatePtrOutput {
	return i.ToWorkflowParameterTemplatePtrOutputWithContext(context.Background())
}

func (i *workflowParameterTemplatePtrType) ToWorkflowParameterTemplatePtrOutputWithContext(ctx context.Context) WorkflowParameterTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowParameterTemplatePtrOutput)
}

func (i *workflowParameterTemplatePtrType) ToOutput(ctx context.Context) pulumix.Output[*WorkflowParameterTemplate] {
	return pulumix.Output[*WorkflowParameterTemplate]{
		OutputState: i.ToWorkflowParameterTemplatePtrOutputWithContext(ctx).OutputState,
	}
}

type WorkflowParameterTemplateOutput struct{ *pulumi.OutputState }

func (WorkflowParameterTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowParameterTemplate)(nil)).Elem()
}

func (o WorkflowParameterTemplateOutput) ToWorkflowParameterTemplateOutput() WorkflowParameterTemplateOutput {
	return o
}

func (o WorkflowParameterTemplateOutput) ToWorkflowParameterTemplateOutputWithContext(ctx context.Context) WorkflowParameterTemplateOutput {
	return o
}

func (o WorkflowParameterTemplateOutput) ToWorkflowParameterTemplatePtrOutput() WorkflowParameterTemplatePtrOutput {
	return o.ToWorkflowParameterTemplatePtrOutputWithContext(context.Background())
}

func (o WorkflowParameterTemplateOutput) ToWorkflowParameterTemplatePtrOutputWithContext(ctx context.Context) WorkflowParameterTemplatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WorkflowParameterTemplate) *WorkflowParameterTemplate {
		return &v
	}).(WorkflowParameterTemplatePtrOutput)
}

func (o WorkflowParameterTemplateOutput) ToOutput(ctx context.Context) pulumix.Output[WorkflowParameterTemplate] {
	return pulumix.Output[WorkflowParameterTemplate]{
		OutputState: o.OutputState,
	}
}

type WorkflowParameterTemplatePtrOutput struct{ *pulumi.OutputState }

func (WorkflowParameterTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowParameterTemplate)(nil)).Elem()
}

func (o WorkflowParameterTemplatePtrOutput) ToWorkflowParameterTemplatePtrOutput() WorkflowParameterTemplatePtrOutput {
	return o
}

func (o WorkflowParameterTemplatePtrOutput) ToWorkflowParameterTemplatePtrOutputWithContext(ctx context.Context) WorkflowParameterTemplatePtrOutput {
	return o
}

func (o WorkflowParameterTemplatePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*WorkflowParameterTemplate] {
	return pulumix.Output[*WorkflowParameterTemplate]{
		OutputState: o.OutputState,
	}
}

func (o WorkflowParameterTemplatePtrOutput) Elem() WorkflowParameterTemplateOutput {
	return o.ApplyT(func(v *WorkflowParameterTemplate) WorkflowParameterTemplate {
		if v != nil {
			return *v
		}
		var ret WorkflowParameterTemplate
		return ret
	}).(WorkflowParameterTemplateOutput)
}

// A map of resource tags
type WorkflowTagMap struct {
}

// WorkflowTagMapInput is an input type that accepts WorkflowTagMap and WorkflowTagMapOutput values.
// You can construct a concrete instance of `WorkflowTagMapInput` via:
//
//	WorkflowTagMap{ "key": WorkflowTagArgs{...} }
type WorkflowTagMapInput interface {
	pulumi.Input

	ToWorkflowTagMapOutput() WorkflowTagMapOutput
	ToWorkflowTagMapOutputWithContext(context.Context) WorkflowTagMapOutput
}

// A map of resource tags
type WorkflowTagMapArgs struct {
}

func (WorkflowTagMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowTagMap)(nil)).Elem()
}

func (i WorkflowTagMapArgs) ToWorkflowTagMapOutput() WorkflowTagMapOutput {
	return i.ToWorkflowTagMapOutputWithContext(context.Background())
}

func (i WorkflowTagMapArgs) ToWorkflowTagMapOutputWithContext(ctx context.Context) WorkflowTagMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTagMapOutput)
}

func (i WorkflowTagMapArgs) ToOutput(ctx context.Context) pulumix.Output[WorkflowTagMap] {
	return pulumix.Output[WorkflowTagMap]{
		OutputState: i.ToWorkflowTagMapOutputWithContext(ctx).OutputState,
	}
}

func (i WorkflowTagMapArgs) ToWorkflowTagMapPtrOutput() WorkflowTagMapPtrOutput {
	return i.ToWorkflowTagMapPtrOutputWithContext(context.Background())
}

func (i WorkflowTagMapArgs) ToWorkflowTagMapPtrOutputWithContext(ctx context.Context) WorkflowTagMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTagMapOutput).ToWorkflowTagMapPtrOutputWithContext(ctx)
}

// WorkflowTagMapPtrInput is an input type that accepts WorkflowTagMapArgs, WorkflowTagMapPtr and WorkflowTagMapPtrOutput values.
// You can construct a concrete instance of `WorkflowTagMapPtrInput` via:
//
//	        WorkflowTagMapArgs{...}
//
//	or:
//
//	        nil
type WorkflowTagMapPtrInput interface {
	pulumi.Input

	ToWorkflowTagMapPtrOutput() WorkflowTagMapPtrOutput
	ToWorkflowTagMapPtrOutputWithContext(context.Context) WorkflowTagMapPtrOutput
}

type workflowTagMapPtrType WorkflowTagMapArgs

func WorkflowTagMapPtr(v *WorkflowTagMapArgs) WorkflowTagMapPtrInput {
	return (*workflowTagMapPtrType)(v)
}

func (*workflowTagMapPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTagMap)(nil)).Elem()
}

func (i *workflowTagMapPtrType) ToWorkflowTagMapPtrOutput() WorkflowTagMapPtrOutput {
	return i.ToWorkflowTagMapPtrOutputWithContext(context.Background())
}

func (i *workflowTagMapPtrType) ToWorkflowTagMapPtrOutputWithContext(ctx context.Context) WorkflowTagMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTagMapPtrOutput)
}

func (i *workflowTagMapPtrType) ToOutput(ctx context.Context) pulumix.Output[*WorkflowTagMap] {
	return pulumix.Output[*WorkflowTagMap]{
		OutputState: i.ToWorkflowTagMapPtrOutputWithContext(ctx).OutputState,
	}
}

// A map of resource tags
type WorkflowTagMapOutput struct{ *pulumi.OutputState }

func (WorkflowTagMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowTagMap)(nil)).Elem()
}

func (o WorkflowTagMapOutput) ToWorkflowTagMapOutput() WorkflowTagMapOutput {
	return o
}

func (o WorkflowTagMapOutput) ToWorkflowTagMapOutputWithContext(ctx context.Context) WorkflowTagMapOutput {
	return o
}

func (o WorkflowTagMapOutput) ToWorkflowTagMapPtrOutput() WorkflowTagMapPtrOutput {
	return o.ToWorkflowTagMapPtrOutputWithContext(context.Background())
}

func (o WorkflowTagMapOutput) ToWorkflowTagMapPtrOutputWithContext(ctx context.Context) WorkflowTagMapPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WorkflowTagMap) *WorkflowTagMap {
		return &v
	}).(WorkflowTagMapPtrOutput)
}

func (o WorkflowTagMapOutput) ToOutput(ctx context.Context) pulumix.Output[WorkflowTagMap] {
	return pulumix.Output[WorkflowTagMap]{
		OutputState: o.OutputState,
	}
}

type WorkflowTagMapPtrOutput struct{ *pulumi.OutputState }

func (WorkflowTagMapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTagMap)(nil)).Elem()
}

func (o WorkflowTagMapPtrOutput) ToWorkflowTagMapPtrOutput() WorkflowTagMapPtrOutput {
	return o
}

func (o WorkflowTagMapPtrOutput) ToWorkflowTagMapPtrOutputWithContext(ctx context.Context) WorkflowTagMapPtrOutput {
	return o
}

func (o WorkflowTagMapPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*WorkflowTagMap] {
	return pulumix.Output[*WorkflowTagMap]{
		OutputState: o.OutputState,
	}
}

func (o WorkflowTagMapPtrOutput) Elem() WorkflowTagMapOutput {
	return o.ApplyT(func(v *WorkflowTagMap) WorkflowTagMap {
		if v != nil {
			return *v
		}
		var ret WorkflowTagMap
		return ret
	}).(WorkflowTagMapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AnnotationStoreFormatToHeaderInput)(nil)).Elem(), AnnotationStoreFormatToHeaderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnnotationStoreFormatToHeaderPtrInput)(nil)).Elem(), AnnotationStoreFormatToHeaderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnnotationStoreReferenceItemInput)(nil)).Elem(), AnnotationStoreReferenceItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnnotationStoreReferenceItemPtrInput)(nil)).Elem(), AnnotationStoreReferenceItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnnotationStoreSchemaItemInput)(nil)).Elem(), AnnotationStoreSchemaItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnnotationStoreSchemaItemArrayInput)(nil)).Elem(), AnnotationStoreSchemaItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnnotationStoreSseConfigInput)(nil)).Elem(), AnnotationStoreSseConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnnotationStoreSseConfigPtrInput)(nil)).Elem(), AnnotationStoreSseConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnnotationStoreStoreOptionsPropertiesInput)(nil)).Elem(), AnnotationStoreStoreOptionsPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnnotationStoreStoreOptionsPropertiesPtrInput)(nil)).Elem(), AnnotationStoreStoreOptionsPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnnotationStoreTagMapInput)(nil)).Elem(), AnnotationStoreTagMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnnotationStoreTagMapPtrInput)(nil)).Elem(), AnnotationStoreTagMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnnotationStoreTsvStoreOptionsInput)(nil)).Elem(), AnnotationStoreTsvStoreOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnnotationStoreTsvStoreOptionsPtrInput)(nil)).Elem(), AnnotationStoreTsvStoreOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReferenceStoreSseConfigInput)(nil)).Elem(), ReferenceStoreSseConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReferenceStoreSseConfigPtrInput)(nil)).Elem(), ReferenceStoreSseConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReferenceStoreTagMapInput)(nil)).Elem(), ReferenceStoreTagMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReferenceStoreTagMapPtrInput)(nil)).Elem(), ReferenceStoreTagMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RunGroupTagMapInput)(nil)).Elem(), RunGroupTagMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RunGroupTagMapPtrInput)(nil)).Elem(), RunGroupTagMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SequenceStoreSseConfigInput)(nil)).Elem(), SequenceStoreSseConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SequenceStoreSseConfigPtrInput)(nil)).Elem(), SequenceStoreSseConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SequenceStoreTagMapInput)(nil)).Elem(), SequenceStoreTagMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SequenceStoreTagMapPtrInput)(nil)).Elem(), SequenceStoreTagMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VariantStoreReferenceItemInput)(nil)).Elem(), VariantStoreReferenceItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VariantStoreSseConfigInput)(nil)).Elem(), VariantStoreSseConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VariantStoreSseConfigPtrInput)(nil)).Elem(), VariantStoreSseConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VariantStoreTagMapInput)(nil)).Elem(), VariantStoreTagMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VariantStoreTagMapPtrInput)(nil)).Elem(), VariantStoreTagMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowParameterTemplateInput)(nil)).Elem(), WorkflowParameterTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowParameterTemplatePtrInput)(nil)).Elem(), WorkflowParameterTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTagMapInput)(nil)).Elem(), WorkflowTagMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTagMapPtrInput)(nil)).Elem(), WorkflowTagMapArgs{})
	pulumi.RegisterOutputType(AnnotationStoreFormatToHeaderOutput{})
	pulumi.RegisterOutputType(AnnotationStoreFormatToHeaderPtrOutput{})
	pulumi.RegisterOutputType(AnnotationStoreReferenceItemOutput{})
	pulumi.RegisterOutputType(AnnotationStoreReferenceItemPtrOutput{})
	pulumi.RegisterOutputType(AnnotationStoreSchemaItemOutput{})
	pulumi.RegisterOutputType(AnnotationStoreSchemaItemArrayOutput{})
	pulumi.RegisterOutputType(AnnotationStoreSseConfigOutput{})
	pulumi.RegisterOutputType(AnnotationStoreSseConfigPtrOutput{})
	pulumi.RegisterOutputType(AnnotationStoreStoreOptionsPropertiesOutput{})
	pulumi.RegisterOutputType(AnnotationStoreStoreOptionsPropertiesPtrOutput{})
	pulumi.RegisterOutputType(AnnotationStoreTagMapOutput{})
	pulumi.RegisterOutputType(AnnotationStoreTagMapPtrOutput{})
	pulumi.RegisterOutputType(AnnotationStoreTsvStoreOptionsOutput{})
	pulumi.RegisterOutputType(AnnotationStoreTsvStoreOptionsPtrOutput{})
	pulumi.RegisterOutputType(ReferenceStoreSseConfigOutput{})
	pulumi.RegisterOutputType(ReferenceStoreSseConfigPtrOutput{})
	pulumi.RegisterOutputType(ReferenceStoreTagMapOutput{})
	pulumi.RegisterOutputType(ReferenceStoreTagMapPtrOutput{})
	pulumi.RegisterOutputType(RunGroupTagMapOutput{})
	pulumi.RegisterOutputType(RunGroupTagMapPtrOutput{})
	pulumi.RegisterOutputType(SequenceStoreSseConfigOutput{})
	pulumi.RegisterOutputType(SequenceStoreSseConfigPtrOutput{})
	pulumi.RegisterOutputType(SequenceStoreTagMapOutput{})
	pulumi.RegisterOutputType(SequenceStoreTagMapPtrOutput{})
	pulumi.RegisterOutputType(VariantStoreReferenceItemOutput{})
	pulumi.RegisterOutputType(VariantStoreSseConfigOutput{})
	pulumi.RegisterOutputType(VariantStoreSseConfigPtrOutput{})
	pulumi.RegisterOutputType(VariantStoreTagMapOutput{})
	pulumi.RegisterOutputType(VariantStoreTagMapPtrOutput{})
	pulumi.RegisterOutputType(WorkflowParameterTemplateOutput{})
	pulumi.RegisterOutputType(WorkflowParameterTemplatePtrOutput{})
	pulumi.RegisterOutputType(WorkflowTagMapOutput{})
	pulumi.RegisterOutputType(WorkflowTagMapPtrOutput{})
}
