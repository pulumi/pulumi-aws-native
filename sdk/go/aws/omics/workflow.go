// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package omics

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Definition of AWS::Omics::Workflow Resource Type
type Workflow struct {
	pulumi.CustomResourceState

	Accelerators      WorkflowAcceleratorsPtrOutput      `pulumi:"accelerators"`
	Arn               pulumi.StringOutput                `pulumi:"arn"`
	CreationTime      pulumi.StringOutput                `pulumi:"creationTime"`
	DefinitionUri     pulumi.StringPtrOutput             `pulumi:"definitionUri"`
	Description       pulumi.StringPtrOutput             `pulumi:"description"`
	Engine            WorkflowEnginePtrOutput            `pulumi:"engine"`
	Main              pulumi.StringPtrOutput             `pulumi:"main"`
	Name              pulumi.StringPtrOutput             `pulumi:"name"`
	ParameterTemplate WorkflowParameterTemplatePtrOutput `pulumi:"parameterTemplate"`
	Status            WorkflowStatusOutput               `pulumi:"status"`
	StorageCapacity   pulumi.Float64PtrOutput            `pulumi:"storageCapacity"`
	Tags              WorkflowTagMapPtrOutput            `pulumi:"tags"`
	Type              WorkflowTypeOutput                 `pulumi:"type"`
}

// NewWorkflow registers a new resource with the given unique name, arguments, and options.
func NewWorkflow(ctx *pulumi.Context,
	name string, args *WorkflowArgs, opts ...pulumi.ResourceOption) (*Workflow, error) {
	if args == nil {
		args = &WorkflowArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"accelerators",
		"definitionUri",
		"engine",
		"main",
		"parameterTemplate",
		"storageCapacity",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Workflow
	err := ctx.RegisterResource("aws-native:omics:Workflow", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflow gets an existing Workflow resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflow(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowState, opts ...pulumi.ResourceOption) (*Workflow, error) {
	var resource Workflow
	err := ctx.ReadResource("aws-native:omics:Workflow", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Workflow resources.
type workflowState struct {
}

type WorkflowState struct {
}

func (WorkflowState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowState)(nil)).Elem()
}

type workflowArgs struct {
	Accelerators      *WorkflowAccelerators      `pulumi:"accelerators"`
	DefinitionUri     *string                    `pulumi:"definitionUri"`
	Description       *string                    `pulumi:"description"`
	Engine            *WorkflowEngine            `pulumi:"engine"`
	Main              *string                    `pulumi:"main"`
	Name              *string                    `pulumi:"name"`
	ParameterTemplate *WorkflowParameterTemplate `pulumi:"parameterTemplate"`
	StorageCapacity   *float64                   `pulumi:"storageCapacity"`
	Tags              *WorkflowTagMap            `pulumi:"tags"`
}

// The set of arguments for constructing a Workflow resource.
type WorkflowArgs struct {
	Accelerators      WorkflowAcceleratorsPtrInput
	DefinitionUri     pulumi.StringPtrInput
	Description       pulumi.StringPtrInput
	Engine            WorkflowEnginePtrInput
	Main              pulumi.StringPtrInput
	Name              pulumi.StringPtrInput
	ParameterTemplate WorkflowParameterTemplatePtrInput
	StorageCapacity   pulumi.Float64PtrInput
	Tags              WorkflowTagMapPtrInput
}

func (WorkflowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowArgs)(nil)).Elem()
}

type WorkflowInput interface {
	pulumi.Input

	ToWorkflowOutput() WorkflowOutput
	ToWorkflowOutputWithContext(ctx context.Context) WorkflowOutput
}

func (*Workflow) ElementType() reflect.Type {
	return reflect.TypeOf((**Workflow)(nil)).Elem()
}

func (i *Workflow) ToWorkflowOutput() WorkflowOutput {
	return i.ToWorkflowOutputWithContext(context.Background())
}

func (i *Workflow) ToWorkflowOutputWithContext(ctx context.Context) WorkflowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowOutput)
}

func (i *Workflow) ToOutput(ctx context.Context) pulumix.Output[*Workflow] {
	return pulumix.Output[*Workflow]{
		OutputState: i.ToWorkflowOutputWithContext(ctx).OutputState,
	}
}

type WorkflowOutput struct{ *pulumi.OutputState }

func (WorkflowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Workflow)(nil)).Elem()
}

func (o WorkflowOutput) ToWorkflowOutput() WorkflowOutput {
	return o
}

func (o WorkflowOutput) ToWorkflowOutputWithContext(ctx context.Context) WorkflowOutput {
	return o
}

func (o WorkflowOutput) ToOutput(ctx context.Context) pulumix.Output[*Workflow] {
	return pulumix.Output[*Workflow]{
		OutputState: o.OutputState,
	}
}

func (o WorkflowOutput) Accelerators() WorkflowAcceleratorsPtrOutput {
	return o.ApplyT(func(v *Workflow) WorkflowAcceleratorsPtrOutput { return v.Accelerators }).(WorkflowAcceleratorsPtrOutput)
}

func (o WorkflowOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o WorkflowOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

func (o WorkflowOutput) DefinitionUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringPtrOutput { return v.DefinitionUri }).(pulumi.StringPtrOutput)
}

func (o WorkflowOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o WorkflowOutput) Engine() WorkflowEnginePtrOutput {
	return o.ApplyT(func(v *Workflow) WorkflowEnginePtrOutput { return v.Engine }).(WorkflowEnginePtrOutput)
}

func (o WorkflowOutput) Main() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringPtrOutput { return v.Main }).(pulumi.StringPtrOutput)
}

func (o WorkflowOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

func (o WorkflowOutput) ParameterTemplate() WorkflowParameterTemplatePtrOutput {
	return o.ApplyT(func(v *Workflow) WorkflowParameterTemplatePtrOutput { return v.ParameterTemplate }).(WorkflowParameterTemplatePtrOutput)
}

func (o WorkflowOutput) Status() WorkflowStatusOutput {
	return o.ApplyT(func(v *Workflow) WorkflowStatusOutput { return v.Status }).(WorkflowStatusOutput)
}

func (o WorkflowOutput) StorageCapacity() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Workflow) pulumi.Float64PtrOutput { return v.StorageCapacity }).(pulumi.Float64PtrOutput)
}

func (o WorkflowOutput) Tags() WorkflowTagMapPtrOutput {
	return o.ApplyT(func(v *Workflow) WorkflowTagMapPtrOutput { return v.Tags }).(WorkflowTagMapPtrOutput)
}

func (o WorkflowOutput) Type() WorkflowTypeOutput {
	return o.ApplyT(func(v *Workflow) WorkflowTypeOutput { return v.Type }).(WorkflowTypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowInput)(nil)).Elem(), &Workflow{})
	pulumi.RegisterOutputType(WorkflowOutput{})
}
