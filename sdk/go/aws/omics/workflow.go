// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package omics

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::Omics::Workflow Resource Type
type Workflow struct {
	pulumi.CustomResourceState

	Accelerators WorkflowAcceleratorsPtrOutput `pulumi:"accelerators"`
	// The ARN for the workflow.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The workflow's ID.
	AwsId pulumi.StringOutput `pulumi:"awsId"`
	// Use a container registry map to specify mappings between the ECR private repository and one or more upstream registries. For more information, see [Container images](https://docs.aws.amazon.com/omics/latest/dev/workflows-ecr.html) in the *AWS HealthOmics User Guide* .
	ContainerRegistryMap    WorkflowContainerRegistryMapPtrOutput `pulumi:"containerRegistryMap"`
	ContainerRegistryMapUri pulumi.StringPtrOutput                `pulumi:"containerRegistryMapUri"`
	// When the workflow was created.
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	// Contains information about a source code repository that hosts the workflow definition files.
	DefinitionRepository WorkflowDefinitionRepositoryPtrOutput `pulumi:"definitionRepository"`
	// The URI of a definition for the workflow.
	DefinitionUri pulumi.StringPtrOutput `pulumi:"definitionUri"`
	// The parameter's description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// An engine for the workflow.
	Engine WorkflowEnginePtrOutput `pulumi:"engine"`
	// The path of the main definition file for the workflow.
	Main pulumi.StringPtrOutput `pulumi:"main"`
	// The workflow's name.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// The workflow's parameter template.
	ParameterTemplate WorkflowParameterMapOutput `pulumi:"parameterTemplate"`
	// Path to the primary workflow parameter template JSON file inside the repository
	ParameterTemplatePath pulumi.StringPtrOutput `pulumi:"parameterTemplatePath"`
	// The markdown content for the workflow's README file. This provides documentation and usage information for users of the workflow.
	ReadmeMarkdown pulumi.StringPtrOutput `pulumi:"readmeMarkdown"`
	// The path to the workflow README markdown file within the repository. This file provides documentation and usage information for the workflow. If not specified, the README.md file from the root directory of the repository will be used.
	ReadmePath pulumi.StringPtrOutput `pulumi:"readmePath"`
	// The S3 URI of the README file for the workflow. This file provides documentation and usage information for the workflow. The S3 URI must begin with s3://USER-OWNED-BUCKET/. The requester must have access to the S3 bucket and object. The max README content length is 500 KiB.
	ReadmeUri pulumi.StringPtrOutput `pulumi:"readmeUri"`
	// The workflow's status.
	Status WorkflowStatusOutput `pulumi:"status"`
	// The default static storage capacity (in gibibytes) for runs that use this workflow or workflow version. The `storageCapacity` can be overwritten at run time. The storage capacity is not required for runs with a `DYNAMIC` storage type.
	StorageCapacity pulumi.Float64PtrOutput      `pulumi:"storageCapacity"`
	StorageType     WorkflowStorageTypePtrOutput `pulumi:"storageType"`
	// Tags for the workflow.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The workflow's type.
	Type WorkflowTypeOutput  `pulumi:"type"`
	Uuid pulumi.StringOutput `pulumi:"uuid"`
	// Optional workflow bucket owner ID to verify the workflow bucket
	WorkflowBucketOwnerId pulumi.StringPtrOutput `pulumi:"workflowBucketOwnerId"`
}

// NewWorkflow registers a new resource with the given unique name, arguments, and options.
func NewWorkflow(ctx *pulumi.Context,
	name string, args *WorkflowArgs, opts ...pulumi.ResourceOption) (*Workflow, error) {
	if args == nil {
		args = &WorkflowArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"accelerators",
		"containerRegistryMap",
		"containerRegistryMapUri",
		"definitionRepository",
		"definitionUri",
		"engine",
		"main",
		"parameterTemplate.*",
		"parameterTemplatePath",
		"readmePath",
		"readmeUri",
		"storageCapacity",
		"workflowBucketOwnerId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Workflow
	err := ctx.RegisterResource("aws-native:omics:Workflow", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflow gets an existing Workflow resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflow(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowState, opts ...pulumi.ResourceOption) (*Workflow, error) {
	var resource Workflow
	err := ctx.ReadResource("aws-native:omics:Workflow", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Workflow resources.
type workflowState struct {
}

type WorkflowState struct {
}

func (WorkflowState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowState)(nil)).Elem()
}

type workflowArgs struct {
	Accelerators *WorkflowAccelerators `pulumi:"accelerators"`
	// Use a container registry map to specify mappings between the ECR private repository and one or more upstream registries. For more information, see [Container images](https://docs.aws.amazon.com/omics/latest/dev/workflows-ecr.html) in the *AWS HealthOmics User Guide* .
	ContainerRegistryMap    *WorkflowContainerRegistryMap `pulumi:"containerRegistryMap"`
	ContainerRegistryMapUri *string                       `pulumi:"containerRegistryMapUri"`
	// Contains information about a source code repository that hosts the workflow definition files.
	DefinitionRepository *WorkflowDefinitionRepository `pulumi:"definitionRepository"`
	// The URI of a definition for the workflow.
	DefinitionUri *string `pulumi:"definitionUri"`
	// The parameter's description.
	Description *string `pulumi:"description"`
	// An engine for the workflow.
	Engine *WorkflowEngine `pulumi:"engine"`
	// The path of the main definition file for the workflow.
	Main *string `pulumi:"main"`
	// The workflow's name.
	Name *string `pulumi:"name"`
	// The workflow's parameter template.
	ParameterTemplate map[string]WorkflowParameter `pulumi:"parameterTemplate"`
	// Path to the primary workflow parameter template JSON file inside the repository
	ParameterTemplatePath *string `pulumi:"parameterTemplatePath"`
	// The markdown content for the workflow's README file. This provides documentation and usage information for users of the workflow.
	ReadmeMarkdown *string `pulumi:"readmeMarkdown"`
	// The path to the workflow README markdown file within the repository. This file provides documentation and usage information for the workflow. If not specified, the README.md file from the root directory of the repository will be used.
	ReadmePath *string `pulumi:"readmePath"`
	// The S3 URI of the README file for the workflow. This file provides documentation and usage information for the workflow. The S3 URI must begin with s3://USER-OWNED-BUCKET/. The requester must have access to the S3 bucket and object. The max README content length is 500 KiB.
	ReadmeUri *string `pulumi:"readmeUri"`
	// The default static storage capacity (in gibibytes) for runs that use this workflow or workflow version. The `storageCapacity` can be overwritten at run time. The storage capacity is not required for runs with a `DYNAMIC` storage type.
	StorageCapacity *float64             `pulumi:"storageCapacity"`
	StorageType     *WorkflowStorageType `pulumi:"storageType"`
	// Tags for the workflow.
	Tags map[string]string `pulumi:"tags"`
	// Optional workflow bucket owner ID to verify the workflow bucket
	WorkflowBucketOwnerId *string `pulumi:"workflowBucketOwnerId"`
}

// The set of arguments for constructing a Workflow resource.
type WorkflowArgs struct {
	Accelerators WorkflowAcceleratorsPtrInput
	// Use a container registry map to specify mappings between the ECR private repository and one or more upstream registries. For more information, see [Container images](https://docs.aws.amazon.com/omics/latest/dev/workflows-ecr.html) in the *AWS HealthOmics User Guide* .
	ContainerRegistryMap    WorkflowContainerRegistryMapPtrInput
	ContainerRegistryMapUri pulumi.StringPtrInput
	// Contains information about a source code repository that hosts the workflow definition files.
	DefinitionRepository WorkflowDefinitionRepositoryPtrInput
	// The URI of a definition for the workflow.
	DefinitionUri pulumi.StringPtrInput
	// The parameter's description.
	Description pulumi.StringPtrInput
	// An engine for the workflow.
	Engine WorkflowEnginePtrInput
	// The path of the main definition file for the workflow.
	Main pulumi.StringPtrInput
	// The workflow's name.
	Name pulumi.StringPtrInput
	// The workflow's parameter template.
	ParameterTemplate WorkflowParameterMapInput
	// Path to the primary workflow parameter template JSON file inside the repository
	ParameterTemplatePath pulumi.StringPtrInput
	// The markdown content for the workflow's README file. This provides documentation and usage information for users of the workflow.
	ReadmeMarkdown pulumi.StringPtrInput
	// The path to the workflow README markdown file within the repository. This file provides documentation and usage information for the workflow. If not specified, the README.md file from the root directory of the repository will be used.
	ReadmePath pulumi.StringPtrInput
	// The S3 URI of the README file for the workflow. This file provides documentation and usage information for the workflow. The S3 URI must begin with s3://USER-OWNED-BUCKET/. The requester must have access to the S3 bucket and object. The max README content length is 500 KiB.
	ReadmeUri pulumi.StringPtrInput
	// The default static storage capacity (in gibibytes) for runs that use this workflow or workflow version. The `storageCapacity` can be overwritten at run time. The storage capacity is not required for runs with a `DYNAMIC` storage type.
	StorageCapacity pulumi.Float64PtrInput
	StorageType     WorkflowStorageTypePtrInput
	// Tags for the workflow.
	Tags pulumi.StringMapInput
	// Optional workflow bucket owner ID to verify the workflow bucket
	WorkflowBucketOwnerId pulumi.StringPtrInput
}

func (WorkflowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowArgs)(nil)).Elem()
}

type WorkflowInput interface {
	pulumi.Input

	ToWorkflowOutput() WorkflowOutput
	ToWorkflowOutputWithContext(ctx context.Context) WorkflowOutput
}

func (*Workflow) ElementType() reflect.Type {
	return reflect.TypeOf((**Workflow)(nil)).Elem()
}

func (i *Workflow) ToWorkflowOutput() WorkflowOutput {
	return i.ToWorkflowOutputWithContext(context.Background())
}

func (i *Workflow) ToWorkflowOutputWithContext(ctx context.Context) WorkflowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowOutput)
}

type WorkflowOutput struct{ *pulumi.OutputState }

func (WorkflowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Workflow)(nil)).Elem()
}

func (o WorkflowOutput) ToWorkflowOutput() WorkflowOutput {
	return o
}

func (o WorkflowOutput) ToWorkflowOutputWithContext(ctx context.Context) WorkflowOutput {
	return o
}

func (o WorkflowOutput) Accelerators() WorkflowAcceleratorsPtrOutput {
	return o.ApplyT(func(v *Workflow) WorkflowAcceleratorsPtrOutput { return v.Accelerators }).(WorkflowAcceleratorsPtrOutput)
}

// The ARN for the workflow.
func (o WorkflowOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The workflow's ID.
func (o WorkflowOutput) AwsId() pulumi.StringOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringOutput { return v.AwsId }).(pulumi.StringOutput)
}

// Use a container registry map to specify mappings between the ECR private repository and one or more upstream registries. For more information, see [Container images](https://docs.aws.amazon.com/omics/latest/dev/workflows-ecr.html) in the *AWS HealthOmics User Guide* .
func (o WorkflowOutput) ContainerRegistryMap() WorkflowContainerRegistryMapPtrOutput {
	return o.ApplyT(func(v *Workflow) WorkflowContainerRegistryMapPtrOutput { return v.ContainerRegistryMap }).(WorkflowContainerRegistryMapPtrOutput)
}

func (o WorkflowOutput) ContainerRegistryMapUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringPtrOutput { return v.ContainerRegistryMapUri }).(pulumi.StringPtrOutput)
}

// When the workflow was created.
func (o WorkflowOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

// Contains information about a source code repository that hosts the workflow definition files.
func (o WorkflowOutput) DefinitionRepository() WorkflowDefinitionRepositoryPtrOutput {
	return o.ApplyT(func(v *Workflow) WorkflowDefinitionRepositoryPtrOutput { return v.DefinitionRepository }).(WorkflowDefinitionRepositoryPtrOutput)
}

// The URI of a definition for the workflow.
func (o WorkflowOutput) DefinitionUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringPtrOutput { return v.DefinitionUri }).(pulumi.StringPtrOutput)
}

// The parameter's description.
func (o WorkflowOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// An engine for the workflow.
func (o WorkflowOutput) Engine() WorkflowEnginePtrOutput {
	return o.ApplyT(func(v *Workflow) WorkflowEnginePtrOutput { return v.Engine }).(WorkflowEnginePtrOutput)
}

// The path of the main definition file for the workflow.
func (o WorkflowOutput) Main() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringPtrOutput { return v.Main }).(pulumi.StringPtrOutput)
}

// The workflow's name.
func (o WorkflowOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// The workflow's parameter template.
func (o WorkflowOutput) ParameterTemplate() WorkflowParameterMapOutput {
	return o.ApplyT(func(v *Workflow) WorkflowParameterMapOutput { return v.ParameterTemplate }).(WorkflowParameterMapOutput)
}

// Path to the primary workflow parameter template JSON file inside the repository
func (o WorkflowOutput) ParameterTemplatePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringPtrOutput { return v.ParameterTemplatePath }).(pulumi.StringPtrOutput)
}

// The markdown content for the workflow's README file. This provides documentation and usage information for users of the workflow.
func (o WorkflowOutput) ReadmeMarkdown() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringPtrOutput { return v.ReadmeMarkdown }).(pulumi.StringPtrOutput)
}

// The path to the workflow README markdown file within the repository. This file provides documentation and usage information for the workflow. If not specified, the README.md file from the root directory of the repository will be used.
func (o WorkflowOutput) ReadmePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringPtrOutput { return v.ReadmePath }).(pulumi.StringPtrOutput)
}

// The S3 URI of the README file for the workflow. This file provides documentation and usage information for the workflow. The S3 URI must begin with s3://USER-OWNED-BUCKET/. The requester must have access to the S3 bucket and object. The max README content length is 500 KiB.
func (o WorkflowOutput) ReadmeUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringPtrOutput { return v.ReadmeUri }).(pulumi.StringPtrOutput)
}

// The workflow's status.
func (o WorkflowOutput) Status() WorkflowStatusOutput {
	return o.ApplyT(func(v *Workflow) WorkflowStatusOutput { return v.Status }).(WorkflowStatusOutput)
}

// The default static storage capacity (in gibibytes) for runs that use this workflow or workflow version. The `storageCapacity` can be overwritten at run time. The storage capacity is not required for runs with a `DYNAMIC` storage type.
func (o WorkflowOutput) StorageCapacity() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Workflow) pulumi.Float64PtrOutput { return v.StorageCapacity }).(pulumi.Float64PtrOutput)
}

func (o WorkflowOutput) StorageType() WorkflowStorageTypePtrOutput {
	return o.ApplyT(func(v *Workflow) WorkflowStorageTypePtrOutput { return v.StorageType }).(WorkflowStorageTypePtrOutput)
}

// Tags for the workflow.
func (o WorkflowOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The workflow's type.
func (o WorkflowOutput) Type() WorkflowTypeOutput {
	return o.ApplyT(func(v *Workflow) WorkflowTypeOutput { return v.Type }).(WorkflowTypeOutput)
}

func (o WorkflowOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

// Optional workflow bucket owner ID to verify the workflow bucket
func (o WorkflowOutput) WorkflowBucketOwnerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringPtrOutput { return v.WorkflowBucketOwnerId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowInput)(nil)).Elem(), &Workflow{})
	pulumi.RegisterOutputType(WorkflowOutput{})
}
