// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package omics

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::Omics::RunGroup Resource Type
func LookupRunGroup(ctx *pulumi.Context, args *LookupRunGroupArgs, opts ...pulumi.InvokeOption) (*LookupRunGroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRunGroupResult
	err := ctx.Invoke("aws-native:omics:getRunGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupRunGroupArgs struct {
	// The run group's ID.
	Id string `pulumi:"id"`
}

type LookupRunGroupResult struct {
	// The run group's ARN.
	Arn *string `pulumi:"arn"`
	// When the run group was created.
	CreationTime *string `pulumi:"creationTime"`
	// The run group's ID.
	Id *string `pulumi:"id"`
	// The group's maximum CPU count setting.
	MaxCpus *float64 `pulumi:"maxCpus"`
	// The group's maximum duration setting in minutes.
	MaxDuration *float64 `pulumi:"maxDuration"`
	// The maximum GPUs that can be used by a run group.
	MaxGpus *float64 `pulumi:"maxGpus"`
	// The group's maximum concurrent run setting.
	MaxRuns *float64 `pulumi:"maxRuns"`
	// The group's name.
	Name *string `pulumi:"name"`
	// Tags for the group.
	Tags map[string]string `pulumi:"tags"`
}

func LookupRunGroupOutput(ctx *pulumi.Context, args LookupRunGroupOutputArgs, opts ...pulumi.InvokeOption) LookupRunGroupResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRunGroupResult, error) {
			args := v.(LookupRunGroupArgs)
			r, err := LookupRunGroup(ctx, &args, opts...)
			var s LookupRunGroupResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupRunGroupResultOutput)
}

type LookupRunGroupOutputArgs struct {
	// The run group's ID.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupRunGroupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRunGroupArgs)(nil)).Elem()
}

type LookupRunGroupResultOutput struct{ *pulumi.OutputState }

func (LookupRunGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRunGroupResult)(nil)).Elem()
}

func (o LookupRunGroupResultOutput) ToLookupRunGroupResultOutput() LookupRunGroupResultOutput {
	return o
}

func (o LookupRunGroupResultOutput) ToLookupRunGroupResultOutputWithContext(ctx context.Context) LookupRunGroupResultOutput {
	return o
}

// The run group's ARN.
func (o LookupRunGroupResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRunGroupResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// When the run group was created.
func (o LookupRunGroupResultOutput) CreationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRunGroupResult) *string { return v.CreationTime }).(pulumi.StringPtrOutput)
}

// The run group's ID.
func (o LookupRunGroupResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRunGroupResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The group's maximum CPU count setting.
func (o LookupRunGroupResultOutput) MaxCpus() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LookupRunGroupResult) *float64 { return v.MaxCpus }).(pulumi.Float64PtrOutput)
}

// The group's maximum duration setting in minutes.
func (o LookupRunGroupResultOutput) MaxDuration() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LookupRunGroupResult) *float64 { return v.MaxDuration }).(pulumi.Float64PtrOutput)
}

// The maximum GPUs that can be used by a run group.
func (o LookupRunGroupResultOutput) MaxGpus() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LookupRunGroupResult) *float64 { return v.MaxGpus }).(pulumi.Float64PtrOutput)
}

// The group's maximum concurrent run setting.
func (o LookupRunGroupResultOutput) MaxRuns() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LookupRunGroupResult) *float64 { return v.MaxRuns }).(pulumi.Float64PtrOutput)
}

// The group's name.
func (o LookupRunGroupResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRunGroupResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Tags for the group.
func (o LookupRunGroupResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupRunGroupResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRunGroupResultOutput{})
}
