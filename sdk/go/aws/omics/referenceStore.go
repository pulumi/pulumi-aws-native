// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package omics

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::Omics::ReferenceStore Resource Type
type ReferenceStore struct {
	pulumi.CustomResourceState

	// The store's ARN.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// When the store was created.
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	// A description for the store.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A name for the store.
	Name             pulumi.StringOutput              `pulumi:"name"`
	ReferenceStoreId pulumi.StringOutput              `pulumi:"referenceStoreId"`
	SseConfig        ReferenceStoreSseConfigPtrOutput `pulumi:"sseConfig"`
	Tags             ReferenceStoreTagMapPtrOutput    `pulumi:"tags"`
}

// NewReferenceStore registers a new resource with the given unique name, arguments, and options.
func NewReferenceStore(ctx *pulumi.Context,
	name string, args *ReferenceStoreArgs, opts ...pulumi.ResourceOption) (*ReferenceStore, error) {
	if args == nil {
		args = &ReferenceStoreArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ReferenceStore
	err := ctx.RegisterResource("aws-native:omics:ReferenceStore", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReferenceStore gets an existing ReferenceStore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReferenceStore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReferenceStoreState, opts ...pulumi.ResourceOption) (*ReferenceStore, error) {
	var resource ReferenceStore
	err := ctx.ReadResource("aws-native:omics:ReferenceStore", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReferenceStore resources.
type referenceStoreState struct {
}

type ReferenceStoreState struct {
}

func (ReferenceStoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*referenceStoreState)(nil)).Elem()
}

type referenceStoreArgs struct {
	// A description for the store.
	Description *string `pulumi:"description"`
	// A name for the store.
	Name      *string                  `pulumi:"name"`
	SseConfig *ReferenceStoreSseConfig `pulumi:"sseConfig"`
	Tags      *ReferenceStoreTagMap    `pulumi:"tags"`
}

// The set of arguments for constructing a ReferenceStore resource.
type ReferenceStoreArgs struct {
	// A description for the store.
	Description pulumi.StringPtrInput
	// A name for the store.
	Name      pulumi.StringPtrInput
	SseConfig ReferenceStoreSseConfigPtrInput
	Tags      ReferenceStoreTagMapPtrInput
}

func (ReferenceStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*referenceStoreArgs)(nil)).Elem()
}

type ReferenceStoreInput interface {
	pulumi.Input

	ToReferenceStoreOutput() ReferenceStoreOutput
	ToReferenceStoreOutputWithContext(ctx context.Context) ReferenceStoreOutput
}

func (*ReferenceStore) ElementType() reflect.Type {
	return reflect.TypeOf((**ReferenceStore)(nil)).Elem()
}

func (i *ReferenceStore) ToReferenceStoreOutput() ReferenceStoreOutput {
	return i.ToReferenceStoreOutputWithContext(context.Background())
}

func (i *ReferenceStore) ToReferenceStoreOutputWithContext(ctx context.Context) ReferenceStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceStoreOutput)
}

type ReferenceStoreOutput struct{ *pulumi.OutputState }

func (ReferenceStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReferenceStore)(nil)).Elem()
}

func (o ReferenceStoreOutput) ToReferenceStoreOutput() ReferenceStoreOutput {
	return o
}

func (o ReferenceStoreOutput) ToReferenceStoreOutputWithContext(ctx context.Context) ReferenceStoreOutput {
	return o
}

// The store's ARN.
func (o ReferenceStoreOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *ReferenceStore) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// When the store was created.
func (o ReferenceStoreOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ReferenceStore) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

// A description for the store.
func (o ReferenceStoreOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReferenceStore) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A name for the store.
func (o ReferenceStoreOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ReferenceStore) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ReferenceStoreOutput) ReferenceStoreId() pulumi.StringOutput {
	return o.ApplyT(func(v *ReferenceStore) pulumi.StringOutput { return v.ReferenceStoreId }).(pulumi.StringOutput)
}

func (o ReferenceStoreOutput) SseConfig() ReferenceStoreSseConfigPtrOutput {
	return o.ApplyT(func(v *ReferenceStore) ReferenceStoreSseConfigPtrOutput { return v.SseConfig }).(ReferenceStoreSseConfigPtrOutput)
}

func (o ReferenceStoreOutput) Tags() ReferenceStoreTagMapPtrOutput {
	return o.ApplyT(func(v *ReferenceStore) ReferenceStoreTagMapPtrOutput { return v.Tags }).(ReferenceStoreTagMapPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReferenceStoreInput)(nil)).Elem(), &ReferenceStore{})
	pulumi.RegisterOutputType(ReferenceStoreOutput{})
}
