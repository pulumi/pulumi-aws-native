// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package budgets

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An example resource schema demonstrating some basic constructs and validation rules.
type BudgetsAction struct {
	pulumi.CustomResourceState

	// A system-generated universally unique identifier (UUID) for the action.
	ActionId pulumi.StringOutput `pulumi:"actionId"`
	// The trigger threshold of the action.
	ActionThreshold BudgetsActionActionThresholdOutput `pulumi:"actionThreshold"`
	// The type of action. This defines the type of tasks that can be carried out by this action. This field also determines the format for definition.
	ActionType BudgetsActionActionTypeOutput `pulumi:"actionType"`
	// This specifies if the action needs manual or automatic approval.
	ApprovalModel BudgetsActionApprovalModelPtrOutput `pulumi:"approvalModel"`
	// A string that represents the budget name. ":" and "\" characters aren't allowed.
	BudgetName pulumi.StringOutput `pulumi:"budgetName"`
	// Specifies all of the type-specific parameters.
	Definition BudgetsActionDefinitionOutput `pulumi:"definition"`
	// The role passed for action execution and reversion. Roles and actions must be in the same account.
	ExecutionRoleArn pulumi.StringOutput `pulumi:"executionRoleArn"`
	// The type of a notification.
	NotificationType BudgetsActionNotificationTypeOutput `pulumi:"notificationType"`
	// An optional list of tags to associate with the specified budget action. Each tag consists of a key and a value, and each key must be unique for the resource.
	ResourceTags aws.TagArrayOutput `pulumi:"resourceTags"`
	// A list of subscribers.
	Subscribers BudgetsActionSubscriberArrayOutput `pulumi:"subscribers"`
}

// NewBudgetsAction registers a new resource with the given unique name, arguments, and options.
func NewBudgetsAction(ctx *pulumi.Context,
	name string, args *BudgetsActionArgs, opts ...pulumi.ResourceOption) (*BudgetsAction, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ActionThreshold == nil {
		return nil, errors.New("invalid value for required argument 'ActionThreshold'")
	}
	if args.ActionType == nil {
		return nil, errors.New("invalid value for required argument 'ActionType'")
	}
	if args.BudgetName == nil {
		return nil, errors.New("invalid value for required argument 'BudgetName'")
	}
	if args.Definition == nil {
		return nil, errors.New("invalid value for required argument 'Definition'")
	}
	if args.ExecutionRoleArn == nil {
		return nil, errors.New("invalid value for required argument 'ExecutionRoleArn'")
	}
	if args.NotificationType == nil {
		return nil, errors.New("invalid value for required argument 'NotificationType'")
	}
	if args.Subscribers == nil {
		return nil, errors.New("invalid value for required argument 'Subscribers'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"actionType",
		"budgetName",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BudgetsAction
	err := ctx.RegisterResource("aws-native:budgets:BudgetsAction", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBudgetsAction gets an existing BudgetsAction resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBudgetsAction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BudgetsActionState, opts ...pulumi.ResourceOption) (*BudgetsAction, error) {
	var resource BudgetsAction
	err := ctx.ReadResource("aws-native:budgets:BudgetsAction", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BudgetsAction resources.
type budgetsActionState struct {
}

type BudgetsActionState struct {
}

func (BudgetsActionState) ElementType() reflect.Type {
	return reflect.TypeOf((*budgetsActionState)(nil)).Elem()
}

type budgetsActionArgs struct {
	// The trigger threshold of the action.
	ActionThreshold BudgetsActionActionThreshold `pulumi:"actionThreshold"`
	// The type of action. This defines the type of tasks that can be carried out by this action. This field also determines the format for definition.
	ActionType BudgetsActionActionType `pulumi:"actionType"`
	// This specifies if the action needs manual or automatic approval.
	ApprovalModel *BudgetsActionApprovalModel `pulumi:"approvalModel"`
	// A string that represents the budget name. ":" and "\" characters aren't allowed.
	BudgetName string `pulumi:"budgetName"`
	// Specifies all of the type-specific parameters.
	Definition BudgetsActionDefinition `pulumi:"definition"`
	// The role passed for action execution and reversion. Roles and actions must be in the same account.
	ExecutionRoleArn string `pulumi:"executionRoleArn"`
	// The type of a notification.
	NotificationType BudgetsActionNotificationType `pulumi:"notificationType"`
	// An optional list of tags to associate with the specified budget action. Each tag consists of a key and a value, and each key must be unique for the resource.
	ResourceTags []aws.Tag `pulumi:"resourceTags"`
	// A list of subscribers.
	Subscribers []BudgetsActionSubscriber `pulumi:"subscribers"`
}

// The set of arguments for constructing a BudgetsAction resource.
type BudgetsActionArgs struct {
	// The trigger threshold of the action.
	ActionThreshold BudgetsActionActionThresholdInput
	// The type of action. This defines the type of tasks that can be carried out by this action. This field also determines the format for definition.
	ActionType BudgetsActionActionTypeInput
	// This specifies if the action needs manual or automatic approval.
	ApprovalModel BudgetsActionApprovalModelPtrInput
	// A string that represents the budget name. ":" and "\" characters aren't allowed.
	BudgetName pulumi.StringInput
	// Specifies all of the type-specific parameters.
	Definition BudgetsActionDefinitionInput
	// The role passed for action execution and reversion. Roles and actions must be in the same account.
	ExecutionRoleArn pulumi.StringInput
	// The type of a notification.
	NotificationType BudgetsActionNotificationTypeInput
	// An optional list of tags to associate with the specified budget action. Each tag consists of a key and a value, and each key must be unique for the resource.
	ResourceTags aws.TagArrayInput
	// A list of subscribers.
	Subscribers BudgetsActionSubscriberArrayInput
}

func (BudgetsActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*budgetsActionArgs)(nil)).Elem()
}

type BudgetsActionInput interface {
	pulumi.Input

	ToBudgetsActionOutput() BudgetsActionOutput
	ToBudgetsActionOutputWithContext(ctx context.Context) BudgetsActionOutput
}

func (*BudgetsAction) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetsAction)(nil)).Elem()
}

func (i *BudgetsAction) ToBudgetsActionOutput() BudgetsActionOutput {
	return i.ToBudgetsActionOutputWithContext(context.Background())
}

func (i *BudgetsAction) ToBudgetsActionOutputWithContext(ctx context.Context) BudgetsActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetsActionOutput)
}

type BudgetsActionOutput struct{ *pulumi.OutputState }

func (BudgetsActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetsAction)(nil)).Elem()
}

func (o BudgetsActionOutput) ToBudgetsActionOutput() BudgetsActionOutput {
	return o
}

func (o BudgetsActionOutput) ToBudgetsActionOutputWithContext(ctx context.Context) BudgetsActionOutput {
	return o
}

// A system-generated universally unique identifier (UUID) for the action.
func (o BudgetsActionOutput) ActionId() pulumi.StringOutput {
	return o.ApplyT(func(v *BudgetsAction) pulumi.StringOutput { return v.ActionId }).(pulumi.StringOutput)
}

// The trigger threshold of the action.
func (o BudgetsActionOutput) ActionThreshold() BudgetsActionActionThresholdOutput {
	return o.ApplyT(func(v *BudgetsAction) BudgetsActionActionThresholdOutput { return v.ActionThreshold }).(BudgetsActionActionThresholdOutput)
}

// The type of action. This defines the type of tasks that can be carried out by this action. This field also determines the format for definition.
func (o BudgetsActionOutput) ActionType() BudgetsActionActionTypeOutput {
	return o.ApplyT(func(v *BudgetsAction) BudgetsActionActionTypeOutput { return v.ActionType }).(BudgetsActionActionTypeOutput)
}

// This specifies if the action needs manual or automatic approval.
func (o BudgetsActionOutput) ApprovalModel() BudgetsActionApprovalModelPtrOutput {
	return o.ApplyT(func(v *BudgetsAction) BudgetsActionApprovalModelPtrOutput { return v.ApprovalModel }).(BudgetsActionApprovalModelPtrOutput)
}

// A string that represents the budget name. ":" and "\" characters aren't allowed.
func (o BudgetsActionOutput) BudgetName() pulumi.StringOutput {
	return o.ApplyT(func(v *BudgetsAction) pulumi.StringOutput { return v.BudgetName }).(pulumi.StringOutput)
}

// Specifies all of the type-specific parameters.
func (o BudgetsActionOutput) Definition() BudgetsActionDefinitionOutput {
	return o.ApplyT(func(v *BudgetsAction) BudgetsActionDefinitionOutput { return v.Definition }).(BudgetsActionDefinitionOutput)
}

// The role passed for action execution and reversion. Roles and actions must be in the same account.
func (o BudgetsActionOutput) ExecutionRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *BudgetsAction) pulumi.StringOutput { return v.ExecutionRoleArn }).(pulumi.StringOutput)
}

// The type of a notification.
func (o BudgetsActionOutput) NotificationType() BudgetsActionNotificationTypeOutput {
	return o.ApplyT(func(v *BudgetsAction) BudgetsActionNotificationTypeOutput { return v.NotificationType }).(BudgetsActionNotificationTypeOutput)
}

// An optional list of tags to associate with the specified budget action. Each tag consists of a key and a value, and each key must be unique for the resource.
func (o BudgetsActionOutput) ResourceTags() aws.TagArrayOutput {
	return o.ApplyT(func(v *BudgetsAction) aws.TagArrayOutput { return v.ResourceTags }).(aws.TagArrayOutput)
}

// A list of subscribers.
func (o BudgetsActionOutput) Subscribers() BudgetsActionSubscriberArrayOutput {
	return o.ApplyT(func(v *BudgetsAction) BudgetsActionSubscriberArrayOutput { return v.Subscribers }).(BudgetsActionSubscriberArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BudgetsActionInput)(nil)).Elem(), &BudgetsAction{})
	pulumi.RegisterOutputType(BudgetsActionOutput{})
}
