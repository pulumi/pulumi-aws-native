// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package backupgateway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::BackupGateway::Hypervisor Resource Type
type Hypervisor struct {
	pulumi.CustomResourceState

	// The server host of the hypervisor. This can be either an IP address or a fully-qualified domain name (FQDN).
	Host pulumi.StringPtrOutput `pulumi:"host"`
	// Returns `HypervisorArn` , an Amazon Resource Name (ARN) that uniquely identifies a Hypervisor. For example: `arn:aws:backup-gateway:us-east-1:123456789012:hypervisor/hype-1234D67D`
	HypervisorArn pulumi.StringOutput `pulumi:"hypervisorArn"`
	// The Amazon Resource Name (ARN) of the AWS Key Management Service used to encrypt the hypervisor.
	KmsKeyArn pulumi.StringPtrOutput `pulumi:"kmsKeyArn"`
	// The Amazon Resource Name (ARN) of the group of gateways within the requested log.
	LogGroupArn pulumi.StringPtrOutput `pulumi:"logGroupArn"`
	// The name of the hypervisor.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// The password for the hypervisor.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// The tags of the hypervisor configuration to import.
	Tags aws.CreateOnlyTagArrayOutput `pulumi:"tags"`
	// The username for the hypervisor.
	Username pulumi.StringPtrOutput `pulumi:"username"`
}

// NewHypervisor registers a new resource with the given unique name, arguments, and options.
func NewHypervisor(ctx *pulumi.Context,
	name string, args *HypervisorArgs, opts ...pulumi.ResourceOption) (*Hypervisor, error) {
	if args == nil {
		args = &HypervisorArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"kmsKeyArn",
		"tags[*]",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Hypervisor
	err := ctx.RegisterResource("aws-native:backupgateway:Hypervisor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHypervisor gets an existing Hypervisor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHypervisor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HypervisorState, opts ...pulumi.ResourceOption) (*Hypervisor, error) {
	var resource Hypervisor
	err := ctx.ReadResource("aws-native:backupgateway:Hypervisor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Hypervisor resources.
type hypervisorState struct {
}

type HypervisorState struct {
}

func (HypervisorState) ElementType() reflect.Type {
	return reflect.TypeOf((*hypervisorState)(nil)).Elem()
}

type hypervisorArgs struct {
	// The server host of the hypervisor. This can be either an IP address or a fully-qualified domain name (FQDN).
	Host *string `pulumi:"host"`
	// The Amazon Resource Name (ARN) of the AWS Key Management Service used to encrypt the hypervisor.
	KmsKeyArn *string `pulumi:"kmsKeyArn"`
	// The Amazon Resource Name (ARN) of the group of gateways within the requested log.
	LogGroupArn *string `pulumi:"logGroupArn"`
	// The name of the hypervisor.
	Name *string `pulumi:"name"`
	// The password for the hypervisor.
	Password *string `pulumi:"password"`
	// The tags of the hypervisor configuration to import.
	Tags []aws.CreateOnlyTag `pulumi:"tags"`
	// The username for the hypervisor.
	Username *string `pulumi:"username"`
}

// The set of arguments for constructing a Hypervisor resource.
type HypervisorArgs struct {
	// The server host of the hypervisor. This can be either an IP address or a fully-qualified domain name (FQDN).
	Host pulumi.StringPtrInput
	// The Amazon Resource Name (ARN) of the AWS Key Management Service used to encrypt the hypervisor.
	KmsKeyArn pulumi.StringPtrInput
	// The Amazon Resource Name (ARN) of the group of gateways within the requested log.
	LogGroupArn pulumi.StringPtrInput
	// The name of the hypervisor.
	Name pulumi.StringPtrInput
	// The password for the hypervisor.
	Password pulumi.StringPtrInput
	// The tags of the hypervisor configuration to import.
	Tags aws.CreateOnlyTagArrayInput
	// The username for the hypervisor.
	Username pulumi.StringPtrInput
}

func (HypervisorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hypervisorArgs)(nil)).Elem()
}

type HypervisorInput interface {
	pulumi.Input

	ToHypervisorOutput() HypervisorOutput
	ToHypervisorOutputWithContext(ctx context.Context) HypervisorOutput
}

func (*Hypervisor) ElementType() reflect.Type {
	return reflect.TypeOf((**Hypervisor)(nil)).Elem()
}

func (i *Hypervisor) ToHypervisorOutput() HypervisorOutput {
	return i.ToHypervisorOutputWithContext(context.Background())
}

func (i *Hypervisor) ToHypervisorOutputWithContext(ctx context.Context) HypervisorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HypervisorOutput)
}

type HypervisorOutput struct{ *pulumi.OutputState }

func (HypervisorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Hypervisor)(nil)).Elem()
}

func (o HypervisorOutput) ToHypervisorOutput() HypervisorOutput {
	return o
}

func (o HypervisorOutput) ToHypervisorOutputWithContext(ctx context.Context) HypervisorOutput {
	return o
}

// The server host of the hypervisor. This can be either an IP address or a fully-qualified domain name (FQDN).
func (o HypervisorOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Hypervisor) pulumi.StringPtrOutput { return v.Host }).(pulumi.StringPtrOutput)
}

// Returns `HypervisorArn` , an Amazon Resource Name (ARN) that uniquely identifies a Hypervisor. For example: `arn:aws:backup-gateway:us-east-1:123456789012:hypervisor/hype-1234D67D`
func (o HypervisorOutput) HypervisorArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Hypervisor) pulumi.StringOutput { return v.HypervisorArn }).(pulumi.StringOutput)
}

// The Amazon Resource Name (ARN) of the AWS Key Management Service used to encrypt the hypervisor.
func (o HypervisorOutput) KmsKeyArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Hypervisor) pulumi.StringPtrOutput { return v.KmsKeyArn }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of the group of gateways within the requested log.
func (o HypervisorOutput) LogGroupArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Hypervisor) pulumi.StringPtrOutput { return v.LogGroupArn }).(pulumi.StringPtrOutput)
}

// The name of the hypervisor.
func (o HypervisorOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Hypervisor) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// The password for the hypervisor.
func (o HypervisorOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Hypervisor) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// The tags of the hypervisor configuration to import.
func (o HypervisorOutput) Tags() aws.CreateOnlyTagArrayOutput {
	return o.ApplyT(func(v *Hypervisor) aws.CreateOnlyTagArrayOutput { return v.Tags }).(aws.CreateOnlyTagArrayOutput)
}

// The username for the hypervisor.
func (o HypervisorOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Hypervisor) pulumi.StringPtrOutput { return v.Username }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HypervisorInput)(nil)).Elem(), &Hypervisor{})
	pulumi.RegisterOutputType(HypervisorOutput{})
}
