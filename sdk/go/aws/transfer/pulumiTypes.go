// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package transfer

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// Creates a key-value pair for a specific resource.
type AgreementTag struct {
	// The name assigned to the tag that you create.
	Key string `pulumi:"key"`
	// Contains one or more values that you assigned to the key name you create.
	Value string `pulumi:"value"`
}

// Configuration for an AS2 connector.
type As2ConfigProperties struct {
	// ARN or name of the secret in AWS Secrets Manager which contains the credentials for Basic authentication. If empty, Basic authentication is disabled for the AS2 connector
	BasicAuthSecretId *string `pulumi:"basicAuthSecretId"`
	// Compression setting for this AS2 connector configuration.
	Compression *ConnectorAs2ConfigPropertiesCompression `pulumi:"compression"`
	// Encryption algorithm for this AS2 connector configuration.
	EncryptionAlgorithm *ConnectorAs2ConfigPropertiesEncryptionAlgorithm `pulumi:"encryptionAlgorithm"`
	// A unique identifier for the local profile.
	LocalProfileId *string `pulumi:"localProfileId"`
	// MDN Response setting for this AS2 connector configuration.
	MdnResponse *ConnectorAs2ConfigPropertiesMdnResponse `pulumi:"mdnResponse"`
	// MDN Signing algorithm for this AS2 connector configuration.
	MdnSigningAlgorithm *ConnectorAs2ConfigPropertiesMdnSigningAlgorithm `pulumi:"mdnSigningAlgorithm"`
	// The message subject for this AS2 connector configuration.
	MessageSubject *string `pulumi:"messageSubject"`
	// A unique identifier for the partner profile.
	PartnerProfileId *string `pulumi:"partnerProfileId"`
	// Specifies whether to use the AWS S3 object content-type as the content-type for the AS2 message.
	PreserveContentType *ConnectorAs2ConfigPropertiesPreserveContentType `pulumi:"preserveContentType"`
	// Signing algorithm for this AS2 connector configuration.
	SigningAlgorithm *ConnectorAs2ConfigPropertiesSigningAlgorithm `pulumi:"signingAlgorithm"`
}

// As2ConfigPropertiesInput is an input type that accepts As2ConfigPropertiesArgs and As2ConfigPropertiesOutput values.
// You can construct a concrete instance of `As2ConfigPropertiesInput` via:
//
//	As2ConfigPropertiesArgs{...}
type As2ConfigPropertiesInput interface {
	pulumi.Input

	ToAs2ConfigPropertiesOutput() As2ConfigPropertiesOutput
	ToAs2ConfigPropertiesOutputWithContext(context.Context) As2ConfigPropertiesOutput
}

// Configuration for an AS2 connector.
type As2ConfigPropertiesArgs struct {
	// ARN or name of the secret in AWS Secrets Manager which contains the credentials for Basic authentication. If empty, Basic authentication is disabled for the AS2 connector
	BasicAuthSecretId pulumi.StringPtrInput `pulumi:"basicAuthSecretId"`
	// Compression setting for this AS2 connector configuration.
	Compression ConnectorAs2ConfigPropertiesCompressionPtrInput `pulumi:"compression"`
	// Encryption algorithm for this AS2 connector configuration.
	EncryptionAlgorithm ConnectorAs2ConfigPropertiesEncryptionAlgorithmPtrInput `pulumi:"encryptionAlgorithm"`
	// A unique identifier for the local profile.
	LocalProfileId pulumi.StringPtrInput `pulumi:"localProfileId"`
	// MDN Response setting for this AS2 connector configuration.
	MdnResponse ConnectorAs2ConfigPropertiesMdnResponsePtrInput `pulumi:"mdnResponse"`
	// MDN Signing algorithm for this AS2 connector configuration.
	MdnSigningAlgorithm ConnectorAs2ConfigPropertiesMdnSigningAlgorithmPtrInput `pulumi:"mdnSigningAlgorithm"`
	// The message subject for this AS2 connector configuration.
	MessageSubject pulumi.StringPtrInput `pulumi:"messageSubject"`
	// A unique identifier for the partner profile.
	PartnerProfileId pulumi.StringPtrInput `pulumi:"partnerProfileId"`
	// Specifies whether to use the AWS S3 object content-type as the content-type for the AS2 message.
	PreserveContentType ConnectorAs2ConfigPropertiesPreserveContentTypePtrInput `pulumi:"preserveContentType"`
	// Signing algorithm for this AS2 connector configuration.
	SigningAlgorithm ConnectorAs2ConfigPropertiesSigningAlgorithmPtrInput `pulumi:"signingAlgorithm"`
}

func (As2ConfigPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*As2ConfigProperties)(nil)).Elem()
}

func (i As2ConfigPropertiesArgs) ToAs2ConfigPropertiesOutput() As2ConfigPropertiesOutput {
	return i.ToAs2ConfigPropertiesOutputWithContext(context.Background())
}

func (i As2ConfigPropertiesArgs) ToAs2ConfigPropertiesOutputWithContext(ctx context.Context) As2ConfigPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(As2ConfigPropertiesOutput)
}

func (i As2ConfigPropertiesArgs) ToAs2ConfigPropertiesPtrOutput() As2ConfigPropertiesPtrOutput {
	return i.ToAs2ConfigPropertiesPtrOutputWithContext(context.Background())
}

func (i As2ConfigPropertiesArgs) ToAs2ConfigPropertiesPtrOutputWithContext(ctx context.Context) As2ConfigPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(As2ConfigPropertiesOutput).ToAs2ConfigPropertiesPtrOutputWithContext(ctx)
}

// As2ConfigPropertiesPtrInput is an input type that accepts As2ConfigPropertiesArgs, As2ConfigPropertiesPtr and As2ConfigPropertiesPtrOutput values.
// You can construct a concrete instance of `As2ConfigPropertiesPtrInput` via:
//
//	        As2ConfigPropertiesArgs{...}
//
//	or:
//
//	        nil
type As2ConfigPropertiesPtrInput interface {
	pulumi.Input

	ToAs2ConfigPropertiesPtrOutput() As2ConfigPropertiesPtrOutput
	ToAs2ConfigPropertiesPtrOutputWithContext(context.Context) As2ConfigPropertiesPtrOutput
}

type as2ConfigPropertiesPtrType As2ConfigPropertiesArgs

func As2ConfigPropertiesPtr(v *As2ConfigPropertiesArgs) As2ConfigPropertiesPtrInput {
	return (*as2ConfigPropertiesPtrType)(v)
}

func (*as2ConfigPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**As2ConfigProperties)(nil)).Elem()
}

func (i *as2ConfigPropertiesPtrType) ToAs2ConfigPropertiesPtrOutput() As2ConfigPropertiesPtrOutput {
	return i.ToAs2ConfigPropertiesPtrOutputWithContext(context.Background())
}

func (i *as2ConfigPropertiesPtrType) ToAs2ConfigPropertiesPtrOutputWithContext(ctx context.Context) As2ConfigPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(As2ConfigPropertiesPtrOutput)
}

// Configuration for an AS2 connector.
type As2ConfigPropertiesOutput struct{ *pulumi.OutputState }

func (As2ConfigPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*As2ConfigProperties)(nil)).Elem()
}

func (o As2ConfigPropertiesOutput) ToAs2ConfigPropertiesOutput() As2ConfigPropertiesOutput {
	return o
}

func (o As2ConfigPropertiesOutput) ToAs2ConfigPropertiesOutputWithContext(ctx context.Context) As2ConfigPropertiesOutput {
	return o
}

func (o As2ConfigPropertiesOutput) ToAs2ConfigPropertiesPtrOutput() As2ConfigPropertiesPtrOutput {
	return o.ToAs2ConfigPropertiesPtrOutputWithContext(context.Background())
}

func (o As2ConfigPropertiesOutput) ToAs2ConfigPropertiesPtrOutputWithContext(ctx context.Context) As2ConfigPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v As2ConfigProperties) *As2ConfigProperties {
		return &v
	}).(As2ConfigPropertiesPtrOutput)
}

// ARN or name of the secret in AWS Secrets Manager which contains the credentials for Basic authentication. If empty, Basic authentication is disabled for the AS2 connector
func (o As2ConfigPropertiesOutput) BasicAuthSecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v As2ConfigProperties) *string { return v.BasicAuthSecretId }).(pulumi.StringPtrOutput)
}

// Compression setting for this AS2 connector configuration.
func (o As2ConfigPropertiesOutput) Compression() ConnectorAs2ConfigPropertiesCompressionPtrOutput {
	return o.ApplyT(func(v As2ConfigProperties) *ConnectorAs2ConfigPropertiesCompression { return v.Compression }).(ConnectorAs2ConfigPropertiesCompressionPtrOutput)
}

// Encryption algorithm for this AS2 connector configuration.
func (o As2ConfigPropertiesOutput) EncryptionAlgorithm() ConnectorAs2ConfigPropertiesEncryptionAlgorithmPtrOutput {
	return o.ApplyT(func(v As2ConfigProperties) *ConnectorAs2ConfigPropertiesEncryptionAlgorithm {
		return v.EncryptionAlgorithm
	}).(ConnectorAs2ConfigPropertiesEncryptionAlgorithmPtrOutput)
}

// A unique identifier for the local profile.
func (o As2ConfigPropertiesOutput) LocalProfileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v As2ConfigProperties) *string { return v.LocalProfileId }).(pulumi.StringPtrOutput)
}

// MDN Response setting for this AS2 connector configuration.
func (o As2ConfigPropertiesOutput) MdnResponse() ConnectorAs2ConfigPropertiesMdnResponsePtrOutput {
	return o.ApplyT(func(v As2ConfigProperties) *ConnectorAs2ConfigPropertiesMdnResponse { return v.MdnResponse }).(ConnectorAs2ConfigPropertiesMdnResponsePtrOutput)
}

// MDN Signing algorithm for this AS2 connector configuration.
func (o As2ConfigPropertiesOutput) MdnSigningAlgorithm() ConnectorAs2ConfigPropertiesMdnSigningAlgorithmPtrOutput {
	return o.ApplyT(func(v As2ConfigProperties) *ConnectorAs2ConfigPropertiesMdnSigningAlgorithm {
		return v.MdnSigningAlgorithm
	}).(ConnectorAs2ConfigPropertiesMdnSigningAlgorithmPtrOutput)
}

// The message subject for this AS2 connector configuration.
func (o As2ConfigPropertiesOutput) MessageSubject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v As2ConfigProperties) *string { return v.MessageSubject }).(pulumi.StringPtrOutput)
}

// A unique identifier for the partner profile.
func (o As2ConfigPropertiesOutput) PartnerProfileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v As2ConfigProperties) *string { return v.PartnerProfileId }).(pulumi.StringPtrOutput)
}

// Specifies whether to use the AWS S3 object content-type as the content-type for the AS2 message.
func (o As2ConfigPropertiesOutput) PreserveContentType() ConnectorAs2ConfigPropertiesPreserveContentTypePtrOutput {
	return o.ApplyT(func(v As2ConfigProperties) *ConnectorAs2ConfigPropertiesPreserveContentType {
		return v.PreserveContentType
	}).(ConnectorAs2ConfigPropertiesPreserveContentTypePtrOutput)
}

// Signing algorithm for this AS2 connector configuration.
func (o As2ConfigPropertiesOutput) SigningAlgorithm() ConnectorAs2ConfigPropertiesSigningAlgorithmPtrOutput {
	return o.ApplyT(func(v As2ConfigProperties) *ConnectorAs2ConfigPropertiesSigningAlgorithm { return v.SigningAlgorithm }).(ConnectorAs2ConfigPropertiesSigningAlgorithmPtrOutput)
}

type As2ConfigPropertiesPtrOutput struct{ *pulumi.OutputState }

func (As2ConfigPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**As2ConfigProperties)(nil)).Elem()
}

func (o As2ConfigPropertiesPtrOutput) ToAs2ConfigPropertiesPtrOutput() As2ConfigPropertiesPtrOutput {
	return o
}

func (o As2ConfigPropertiesPtrOutput) ToAs2ConfigPropertiesPtrOutputWithContext(ctx context.Context) As2ConfigPropertiesPtrOutput {
	return o
}

func (o As2ConfigPropertiesPtrOutput) Elem() As2ConfigPropertiesOutput {
	return o.ApplyT(func(v *As2ConfigProperties) As2ConfigProperties {
		if v != nil {
			return *v
		}
		var ret As2ConfigProperties
		return ret
	}).(As2ConfigPropertiesOutput)
}

// ARN or name of the secret in AWS Secrets Manager which contains the credentials for Basic authentication. If empty, Basic authentication is disabled for the AS2 connector
func (o As2ConfigPropertiesPtrOutput) BasicAuthSecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *As2ConfigProperties) *string {
		if v == nil {
			return nil
		}
		return v.BasicAuthSecretId
	}).(pulumi.StringPtrOutput)
}

// Compression setting for this AS2 connector configuration.
func (o As2ConfigPropertiesPtrOutput) Compression() ConnectorAs2ConfigPropertiesCompressionPtrOutput {
	return o.ApplyT(func(v *As2ConfigProperties) *ConnectorAs2ConfigPropertiesCompression {
		if v == nil {
			return nil
		}
		return v.Compression
	}).(ConnectorAs2ConfigPropertiesCompressionPtrOutput)
}

// Encryption algorithm for this AS2 connector configuration.
func (o As2ConfigPropertiesPtrOutput) EncryptionAlgorithm() ConnectorAs2ConfigPropertiesEncryptionAlgorithmPtrOutput {
	return o.ApplyT(func(v *As2ConfigProperties) *ConnectorAs2ConfigPropertiesEncryptionAlgorithm {
		if v == nil {
			return nil
		}
		return v.EncryptionAlgorithm
	}).(ConnectorAs2ConfigPropertiesEncryptionAlgorithmPtrOutput)
}

// A unique identifier for the local profile.
func (o As2ConfigPropertiesPtrOutput) LocalProfileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *As2ConfigProperties) *string {
		if v == nil {
			return nil
		}
		return v.LocalProfileId
	}).(pulumi.StringPtrOutput)
}

// MDN Response setting for this AS2 connector configuration.
func (o As2ConfigPropertiesPtrOutput) MdnResponse() ConnectorAs2ConfigPropertiesMdnResponsePtrOutput {
	return o.ApplyT(func(v *As2ConfigProperties) *ConnectorAs2ConfigPropertiesMdnResponse {
		if v == nil {
			return nil
		}
		return v.MdnResponse
	}).(ConnectorAs2ConfigPropertiesMdnResponsePtrOutput)
}

// MDN Signing algorithm for this AS2 connector configuration.
func (o As2ConfigPropertiesPtrOutput) MdnSigningAlgorithm() ConnectorAs2ConfigPropertiesMdnSigningAlgorithmPtrOutput {
	return o.ApplyT(func(v *As2ConfigProperties) *ConnectorAs2ConfigPropertiesMdnSigningAlgorithm {
		if v == nil {
			return nil
		}
		return v.MdnSigningAlgorithm
	}).(ConnectorAs2ConfigPropertiesMdnSigningAlgorithmPtrOutput)
}

// The message subject for this AS2 connector configuration.
func (o As2ConfigPropertiesPtrOutput) MessageSubject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *As2ConfigProperties) *string {
		if v == nil {
			return nil
		}
		return v.MessageSubject
	}).(pulumi.StringPtrOutput)
}

// A unique identifier for the partner profile.
func (o As2ConfigPropertiesPtrOutput) PartnerProfileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *As2ConfigProperties) *string {
		if v == nil {
			return nil
		}
		return v.PartnerProfileId
	}).(pulumi.StringPtrOutput)
}

// Specifies whether to use the AWS S3 object content-type as the content-type for the AS2 message.
func (o As2ConfigPropertiesPtrOutput) PreserveContentType() ConnectorAs2ConfigPropertiesPreserveContentTypePtrOutput {
	return o.ApplyT(func(v *As2ConfigProperties) *ConnectorAs2ConfigPropertiesPreserveContentType {
		if v == nil {
			return nil
		}
		return v.PreserveContentType
	}).(ConnectorAs2ConfigPropertiesPreserveContentTypePtrOutput)
}

// Signing algorithm for this AS2 connector configuration.
func (o As2ConfigPropertiesPtrOutput) SigningAlgorithm() ConnectorAs2ConfigPropertiesSigningAlgorithmPtrOutput {
	return o.ApplyT(func(v *As2ConfigProperties) *ConnectorAs2ConfigPropertiesSigningAlgorithm {
		if v == nil {
			return nil
		}
		return v.SigningAlgorithm
	}).(ConnectorAs2ConfigPropertiesSigningAlgorithmPtrOutput)
}

// A key-value pair to associate with a resource.
type CertificateTag struct {
	// The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Key string `pulumi:"key"`
	// The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
	Value string `pulumi:"value"`
}

// Creates a key-value pair for a specific resource.
type ConnectorTag struct {
	// The name assigned to the tag that you create.
	Key string `pulumi:"key"`
	// Contains one or more values that you assigned to the key name you create.
	Value string `pulumi:"value"`
}

// Specifies a separate directory for each type of file to store for an AS2 message.
type CustomDirectoriesProperties struct {
	// Specifies a location to store the failed files for an AS2 message.
	FailedFilesDirectory string `pulumi:"failedFilesDirectory"`
	// Specifies a location to store the MDN file for an AS2 message.
	MdnFilesDirectory string `pulumi:"mdnFilesDirectory"`
	// Specifies a location to store the payload file for an AS2 message.
	PayloadFilesDirectory string `pulumi:"payloadFilesDirectory"`
	// Specifies a location to store the status file for an AS2 message.
	StatusFilesDirectory string `pulumi:"statusFilesDirectory"`
	// Specifies a location to store the temporary processing file for an AS2 message.
	TemporaryFilesDirectory string `pulumi:"temporaryFilesDirectory"`
}

// CustomDirectoriesPropertiesInput is an input type that accepts CustomDirectoriesPropertiesArgs and CustomDirectoriesPropertiesOutput values.
// You can construct a concrete instance of `CustomDirectoriesPropertiesInput` via:
//
//	CustomDirectoriesPropertiesArgs{...}
type CustomDirectoriesPropertiesInput interface {
	pulumi.Input

	ToCustomDirectoriesPropertiesOutput() CustomDirectoriesPropertiesOutput
	ToCustomDirectoriesPropertiesOutputWithContext(context.Context) CustomDirectoriesPropertiesOutput
}

// Specifies a separate directory for each type of file to store for an AS2 message.
type CustomDirectoriesPropertiesArgs struct {
	// Specifies a location to store the failed files for an AS2 message.
	FailedFilesDirectory pulumi.StringInput `pulumi:"failedFilesDirectory"`
	// Specifies a location to store the MDN file for an AS2 message.
	MdnFilesDirectory pulumi.StringInput `pulumi:"mdnFilesDirectory"`
	// Specifies a location to store the payload file for an AS2 message.
	PayloadFilesDirectory pulumi.StringInput `pulumi:"payloadFilesDirectory"`
	// Specifies a location to store the status file for an AS2 message.
	StatusFilesDirectory pulumi.StringInput `pulumi:"statusFilesDirectory"`
	// Specifies a location to store the temporary processing file for an AS2 message.
	TemporaryFilesDirectory pulumi.StringInput `pulumi:"temporaryFilesDirectory"`
}

func (CustomDirectoriesPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomDirectoriesProperties)(nil)).Elem()
}

func (i CustomDirectoriesPropertiesArgs) ToCustomDirectoriesPropertiesOutput() CustomDirectoriesPropertiesOutput {
	return i.ToCustomDirectoriesPropertiesOutputWithContext(context.Background())
}

func (i CustomDirectoriesPropertiesArgs) ToCustomDirectoriesPropertiesOutputWithContext(ctx context.Context) CustomDirectoriesPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomDirectoriesPropertiesOutput)
}

func (i CustomDirectoriesPropertiesArgs) ToCustomDirectoriesPropertiesPtrOutput() CustomDirectoriesPropertiesPtrOutput {
	return i.ToCustomDirectoriesPropertiesPtrOutputWithContext(context.Background())
}

func (i CustomDirectoriesPropertiesArgs) ToCustomDirectoriesPropertiesPtrOutputWithContext(ctx context.Context) CustomDirectoriesPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomDirectoriesPropertiesOutput).ToCustomDirectoriesPropertiesPtrOutputWithContext(ctx)
}

// CustomDirectoriesPropertiesPtrInput is an input type that accepts CustomDirectoriesPropertiesArgs, CustomDirectoriesPropertiesPtr and CustomDirectoriesPropertiesPtrOutput values.
// You can construct a concrete instance of `CustomDirectoriesPropertiesPtrInput` via:
//
//	        CustomDirectoriesPropertiesArgs{...}
//
//	or:
//
//	        nil
type CustomDirectoriesPropertiesPtrInput interface {
	pulumi.Input

	ToCustomDirectoriesPropertiesPtrOutput() CustomDirectoriesPropertiesPtrOutput
	ToCustomDirectoriesPropertiesPtrOutputWithContext(context.Context) CustomDirectoriesPropertiesPtrOutput
}

type customDirectoriesPropertiesPtrType CustomDirectoriesPropertiesArgs

func CustomDirectoriesPropertiesPtr(v *CustomDirectoriesPropertiesArgs) CustomDirectoriesPropertiesPtrInput {
	return (*customDirectoriesPropertiesPtrType)(v)
}

func (*customDirectoriesPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomDirectoriesProperties)(nil)).Elem()
}

func (i *customDirectoriesPropertiesPtrType) ToCustomDirectoriesPropertiesPtrOutput() CustomDirectoriesPropertiesPtrOutput {
	return i.ToCustomDirectoriesPropertiesPtrOutputWithContext(context.Background())
}

func (i *customDirectoriesPropertiesPtrType) ToCustomDirectoriesPropertiesPtrOutputWithContext(ctx context.Context) CustomDirectoriesPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomDirectoriesPropertiesPtrOutput)
}

// Specifies a separate directory for each type of file to store for an AS2 message.
type CustomDirectoriesPropertiesOutput struct{ *pulumi.OutputState }

func (CustomDirectoriesPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomDirectoriesProperties)(nil)).Elem()
}

func (o CustomDirectoriesPropertiesOutput) ToCustomDirectoriesPropertiesOutput() CustomDirectoriesPropertiesOutput {
	return o
}

func (o CustomDirectoriesPropertiesOutput) ToCustomDirectoriesPropertiesOutputWithContext(ctx context.Context) CustomDirectoriesPropertiesOutput {
	return o
}

func (o CustomDirectoriesPropertiesOutput) ToCustomDirectoriesPropertiesPtrOutput() CustomDirectoriesPropertiesPtrOutput {
	return o.ToCustomDirectoriesPropertiesPtrOutputWithContext(context.Background())
}

func (o CustomDirectoriesPropertiesOutput) ToCustomDirectoriesPropertiesPtrOutputWithContext(ctx context.Context) CustomDirectoriesPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CustomDirectoriesProperties) *CustomDirectoriesProperties {
		return &v
	}).(CustomDirectoriesPropertiesPtrOutput)
}

// Specifies a location to store the failed files for an AS2 message.
func (o CustomDirectoriesPropertiesOutput) FailedFilesDirectory() pulumi.StringOutput {
	return o.ApplyT(func(v CustomDirectoriesProperties) string { return v.FailedFilesDirectory }).(pulumi.StringOutput)
}

// Specifies a location to store the MDN file for an AS2 message.
func (o CustomDirectoriesPropertiesOutput) MdnFilesDirectory() pulumi.StringOutput {
	return o.ApplyT(func(v CustomDirectoriesProperties) string { return v.MdnFilesDirectory }).(pulumi.StringOutput)
}

// Specifies a location to store the payload file for an AS2 message.
func (o CustomDirectoriesPropertiesOutput) PayloadFilesDirectory() pulumi.StringOutput {
	return o.ApplyT(func(v CustomDirectoriesProperties) string { return v.PayloadFilesDirectory }).(pulumi.StringOutput)
}

// Specifies a location to store the status file for an AS2 message.
func (o CustomDirectoriesPropertiesOutput) StatusFilesDirectory() pulumi.StringOutput {
	return o.ApplyT(func(v CustomDirectoriesProperties) string { return v.StatusFilesDirectory }).(pulumi.StringOutput)
}

// Specifies a location to store the temporary processing file for an AS2 message.
func (o CustomDirectoriesPropertiesOutput) TemporaryFilesDirectory() pulumi.StringOutput {
	return o.ApplyT(func(v CustomDirectoriesProperties) string { return v.TemporaryFilesDirectory }).(pulumi.StringOutput)
}

type CustomDirectoriesPropertiesPtrOutput struct{ *pulumi.OutputState }

func (CustomDirectoriesPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomDirectoriesProperties)(nil)).Elem()
}

func (o CustomDirectoriesPropertiesPtrOutput) ToCustomDirectoriesPropertiesPtrOutput() CustomDirectoriesPropertiesPtrOutput {
	return o
}

func (o CustomDirectoriesPropertiesPtrOutput) ToCustomDirectoriesPropertiesPtrOutputWithContext(ctx context.Context) CustomDirectoriesPropertiesPtrOutput {
	return o
}

func (o CustomDirectoriesPropertiesPtrOutput) Elem() CustomDirectoriesPropertiesOutput {
	return o.ApplyT(func(v *CustomDirectoriesProperties) CustomDirectoriesProperties {
		if v != nil {
			return *v
		}
		var ret CustomDirectoriesProperties
		return ret
	}).(CustomDirectoriesPropertiesOutput)
}

// Specifies a location to store the failed files for an AS2 message.
func (o CustomDirectoriesPropertiesPtrOutput) FailedFilesDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomDirectoriesProperties) *string {
		if v == nil {
			return nil
		}
		return &v.FailedFilesDirectory
	}).(pulumi.StringPtrOutput)
}

// Specifies a location to store the MDN file for an AS2 message.
func (o CustomDirectoriesPropertiesPtrOutput) MdnFilesDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomDirectoriesProperties) *string {
		if v == nil {
			return nil
		}
		return &v.MdnFilesDirectory
	}).(pulumi.StringPtrOutput)
}

// Specifies a location to store the payload file for an AS2 message.
func (o CustomDirectoriesPropertiesPtrOutput) PayloadFilesDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomDirectoriesProperties) *string {
		if v == nil {
			return nil
		}
		return &v.PayloadFilesDirectory
	}).(pulumi.StringPtrOutput)
}

// Specifies a location to store the status file for an AS2 message.
func (o CustomDirectoriesPropertiesPtrOutput) StatusFilesDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomDirectoriesProperties) *string {
		if v == nil {
			return nil
		}
		return &v.StatusFilesDirectory
	}).(pulumi.StringPtrOutput)
}

// Specifies a location to store the temporary processing file for an AS2 message.
func (o CustomDirectoriesPropertiesPtrOutput) TemporaryFilesDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomDirectoriesProperties) *string {
		if v == nil {
			return nil
		}
		return &v.TemporaryFilesDirectory
	}).(pulumi.StringPtrOutput)
}

// Creates a key-value pair for a specific resource.
type ProfileTag struct {
	// The name assigned to the tag that you create.
	Key string `pulumi:"key"`
	// Contains one or more values that you assigned to the key name you create.
	Value string `pulumi:"value"`
}

type ServerEndpointDetails struct {
	// A list of address allocation IDs that are required to attach an Elastic IP address to your server's endpoint.
	//
	// An address allocation ID corresponds to the allocation ID of an Elastic IP address. This value can be retrieved from the `allocationId` field from the Amazon EC2 [Address](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_Address.html) data type. One way to retrieve this value is by calling the EC2 [DescribeAddresses](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeAddresses.html) API.
	//
	// This parameter is optional. Set this parameter if you want to make your VPC endpoint public-facing. For details, see [Create an internet-facing endpoint for your server](https://docs.aws.amazon.com/transfer/latest/userguide/create-server-in-vpc.html#create-internet-facing-endpoint) .
	//
	// > This property can only be set as follows:
	// > - `EndpointType` must be set to `VPC`
	// > - The Transfer Family server must be offline.
	// > - You cannot set this parameter for Transfer Family servers that use the FTP protocol.
	// > - The server must already have `SubnetIds` populated ( `SubnetIds` and `AddressAllocationIds` cannot be updated simultaneously).
	// > - `AddressAllocationIds` can't contain duplicates, and must be equal in length to `SubnetIds` . For example, if you have three subnet IDs, you must also specify three address allocation IDs.
	// > - Call the `UpdateServer` API to set or change this parameter.
	// > - You can't set address allocation IDs for servers that have an `IpAddressType` set to `DUALSTACK` You can only set this property if `IpAddressType` is set to `IPV4` .
	AddressAllocationIds []string `pulumi:"addressAllocationIds"`
	// A list of security groups IDs that are available to attach to your server's endpoint.
	//
	// > While `SecurityGroupIds` appears in the response syntax for consistency with `CreateServer` and `UpdateServer` operations, this field is not populated in `DescribeServer` responses. Security groups are managed at the VPC endpoint level and can be modified outside of the Transfer Family service. To retrieve current security group information, use the EC2 `DescribeVpcEndpoints` API with the `VpcEndpointId` returned in the response.
	// >
	// > This property can only be set when `EndpointType` is set to `VPC` .
	// >
	// > You can edit the `SecurityGroupIds` property in the [UpdateServer](https://docs.aws.amazon.com/transfer/latest/userguide/API_UpdateServer.html) API only if you are changing the `EndpointType` from `PUBLIC` or `VPC_ENDPOINT` to `VPC` . To change security groups associated with your server's VPC endpoint after creation, use the Amazon EC2 [ModifyVpcEndpoint](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyVpcEndpoint.html) API.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// A list of subnet IDs that are required to host your server endpoint in your VPC.
	//
	// > This property can only be set when `EndpointType` is set to `VPC` .
	SubnetIds []string `pulumi:"subnetIds"`
	// The ID of the VPC endpoint.
	//
	// > This property can only be set when `EndpointType` is set to `VPC_ENDPOINT` .
	VpcEndpointId *string `pulumi:"vpcEndpointId"`
	// The VPC ID of the virtual private cloud in which the server's endpoint will be hosted.
	//
	// > This property can only be set when `EndpointType` is set to `VPC` .
	VpcId *string `pulumi:"vpcId"`
}

// ServerEndpointDetailsInput is an input type that accepts ServerEndpointDetailsArgs and ServerEndpointDetailsOutput values.
// You can construct a concrete instance of `ServerEndpointDetailsInput` via:
//
//	ServerEndpointDetailsArgs{...}
type ServerEndpointDetailsInput interface {
	pulumi.Input

	ToServerEndpointDetailsOutput() ServerEndpointDetailsOutput
	ToServerEndpointDetailsOutputWithContext(context.Context) ServerEndpointDetailsOutput
}

type ServerEndpointDetailsArgs struct {
	// A list of address allocation IDs that are required to attach an Elastic IP address to your server's endpoint.
	//
	// An address allocation ID corresponds to the allocation ID of an Elastic IP address. This value can be retrieved from the `allocationId` field from the Amazon EC2 [Address](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_Address.html) data type. One way to retrieve this value is by calling the EC2 [DescribeAddresses](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeAddresses.html) API.
	//
	// This parameter is optional. Set this parameter if you want to make your VPC endpoint public-facing. For details, see [Create an internet-facing endpoint for your server](https://docs.aws.amazon.com/transfer/latest/userguide/create-server-in-vpc.html#create-internet-facing-endpoint) .
	//
	// > This property can only be set as follows:
	// > - `EndpointType` must be set to `VPC`
	// > - The Transfer Family server must be offline.
	// > - You cannot set this parameter for Transfer Family servers that use the FTP protocol.
	// > - The server must already have `SubnetIds` populated ( `SubnetIds` and `AddressAllocationIds` cannot be updated simultaneously).
	// > - `AddressAllocationIds` can't contain duplicates, and must be equal in length to `SubnetIds` . For example, if you have three subnet IDs, you must also specify three address allocation IDs.
	// > - Call the `UpdateServer` API to set or change this parameter.
	// > - You can't set address allocation IDs for servers that have an `IpAddressType` set to `DUALSTACK` You can only set this property if `IpAddressType` is set to `IPV4` .
	AddressAllocationIds pulumi.StringArrayInput `pulumi:"addressAllocationIds"`
	// A list of security groups IDs that are available to attach to your server's endpoint.
	//
	// > While `SecurityGroupIds` appears in the response syntax for consistency with `CreateServer` and `UpdateServer` operations, this field is not populated in `DescribeServer` responses. Security groups are managed at the VPC endpoint level and can be modified outside of the Transfer Family service. To retrieve current security group information, use the EC2 `DescribeVpcEndpoints` API with the `VpcEndpointId` returned in the response.
	// >
	// > This property can only be set when `EndpointType` is set to `VPC` .
	// >
	// > You can edit the `SecurityGroupIds` property in the [UpdateServer](https://docs.aws.amazon.com/transfer/latest/userguide/API_UpdateServer.html) API only if you are changing the `EndpointType` from `PUBLIC` or `VPC_ENDPOINT` to `VPC` . To change security groups associated with your server's VPC endpoint after creation, use the Amazon EC2 [ModifyVpcEndpoint](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyVpcEndpoint.html) API.
	SecurityGroupIds pulumi.StringArrayInput `pulumi:"securityGroupIds"`
	// A list of subnet IDs that are required to host your server endpoint in your VPC.
	//
	// > This property can only be set when `EndpointType` is set to `VPC` .
	SubnetIds pulumi.StringArrayInput `pulumi:"subnetIds"`
	// The ID of the VPC endpoint.
	//
	// > This property can only be set when `EndpointType` is set to `VPC_ENDPOINT` .
	VpcEndpointId pulumi.StringPtrInput `pulumi:"vpcEndpointId"`
	// The VPC ID of the virtual private cloud in which the server's endpoint will be hosted.
	//
	// > This property can only be set when `EndpointType` is set to `VPC` .
	VpcId pulumi.StringPtrInput `pulumi:"vpcId"`
}

func (ServerEndpointDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerEndpointDetails)(nil)).Elem()
}

func (i ServerEndpointDetailsArgs) ToServerEndpointDetailsOutput() ServerEndpointDetailsOutput {
	return i.ToServerEndpointDetailsOutputWithContext(context.Background())
}

func (i ServerEndpointDetailsArgs) ToServerEndpointDetailsOutputWithContext(ctx context.Context) ServerEndpointDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerEndpointDetailsOutput)
}

func (i ServerEndpointDetailsArgs) ToServerEndpointDetailsPtrOutput() ServerEndpointDetailsPtrOutput {
	return i.ToServerEndpointDetailsPtrOutputWithContext(context.Background())
}

func (i ServerEndpointDetailsArgs) ToServerEndpointDetailsPtrOutputWithContext(ctx context.Context) ServerEndpointDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerEndpointDetailsOutput).ToServerEndpointDetailsPtrOutputWithContext(ctx)
}

// ServerEndpointDetailsPtrInput is an input type that accepts ServerEndpointDetailsArgs, ServerEndpointDetailsPtr and ServerEndpointDetailsPtrOutput values.
// You can construct a concrete instance of `ServerEndpointDetailsPtrInput` via:
//
//	        ServerEndpointDetailsArgs{...}
//
//	or:
//
//	        nil
type ServerEndpointDetailsPtrInput interface {
	pulumi.Input

	ToServerEndpointDetailsPtrOutput() ServerEndpointDetailsPtrOutput
	ToServerEndpointDetailsPtrOutputWithContext(context.Context) ServerEndpointDetailsPtrOutput
}

type serverEndpointDetailsPtrType ServerEndpointDetailsArgs

func ServerEndpointDetailsPtr(v *ServerEndpointDetailsArgs) ServerEndpointDetailsPtrInput {
	return (*serverEndpointDetailsPtrType)(v)
}

func (*serverEndpointDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerEndpointDetails)(nil)).Elem()
}

func (i *serverEndpointDetailsPtrType) ToServerEndpointDetailsPtrOutput() ServerEndpointDetailsPtrOutput {
	return i.ToServerEndpointDetailsPtrOutputWithContext(context.Background())
}

func (i *serverEndpointDetailsPtrType) ToServerEndpointDetailsPtrOutputWithContext(ctx context.Context) ServerEndpointDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerEndpointDetailsPtrOutput)
}

type ServerEndpointDetailsOutput struct{ *pulumi.OutputState }

func (ServerEndpointDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerEndpointDetails)(nil)).Elem()
}

func (o ServerEndpointDetailsOutput) ToServerEndpointDetailsOutput() ServerEndpointDetailsOutput {
	return o
}

func (o ServerEndpointDetailsOutput) ToServerEndpointDetailsOutputWithContext(ctx context.Context) ServerEndpointDetailsOutput {
	return o
}

func (o ServerEndpointDetailsOutput) ToServerEndpointDetailsPtrOutput() ServerEndpointDetailsPtrOutput {
	return o.ToServerEndpointDetailsPtrOutputWithContext(context.Background())
}

func (o ServerEndpointDetailsOutput) ToServerEndpointDetailsPtrOutputWithContext(ctx context.Context) ServerEndpointDetailsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServerEndpointDetails) *ServerEndpointDetails {
		return &v
	}).(ServerEndpointDetailsPtrOutput)
}

// A list of address allocation IDs that are required to attach an Elastic IP address to your server's endpoint.
//
// An address allocation ID corresponds to the allocation ID of an Elastic IP address. This value can be retrieved from the `allocationId` field from the Amazon EC2 [Address](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_Address.html) data type. One way to retrieve this value is by calling the EC2 [DescribeAddresses](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeAddresses.html) API.
//
// This parameter is optional. Set this parameter if you want to make your VPC endpoint public-facing. For details, see [Create an internet-facing endpoint for your server](https://docs.aws.amazon.com/transfer/latest/userguide/create-server-in-vpc.html#create-internet-facing-endpoint) .
//
// > This property can only be set as follows:
// > - `EndpointType` must be set to `VPC`
// > - The Transfer Family server must be offline.
// > - You cannot set this parameter for Transfer Family servers that use the FTP protocol.
// > - The server must already have `SubnetIds` populated ( `SubnetIds` and `AddressAllocationIds` cannot be updated simultaneously).
// > - `AddressAllocationIds` can't contain duplicates, and must be equal in length to `SubnetIds` . For example, if you have three subnet IDs, you must also specify three address allocation IDs.
// > - Call the `UpdateServer` API to set or change this parameter.
// > - You can't set address allocation IDs for servers that have an `IpAddressType` set to `DUALSTACK` You can only set this property if `IpAddressType` is set to `IPV4` .
func (o ServerEndpointDetailsOutput) AddressAllocationIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServerEndpointDetails) []string { return v.AddressAllocationIds }).(pulumi.StringArrayOutput)
}

// A list of security groups IDs that are available to attach to your server's endpoint.
//
// > While `SecurityGroupIds` appears in the response syntax for consistency with `CreateServer` and `UpdateServer` operations, this field is not populated in `DescribeServer` responses. Security groups are managed at the VPC endpoint level and can be modified outside of the Transfer Family service. To retrieve current security group information, use the EC2 `DescribeVpcEndpoints` API with the `VpcEndpointId` returned in the response.
// >
// > This property can only be set when `EndpointType` is set to `VPC` .
// >
// > You can edit the `SecurityGroupIds` property in the [UpdateServer](https://docs.aws.amazon.com/transfer/latest/userguide/API_UpdateServer.html) API only if you are changing the `EndpointType` from `PUBLIC` or `VPC_ENDPOINT` to `VPC` . To change security groups associated with your server's VPC endpoint after creation, use the Amazon EC2 [ModifyVpcEndpoint](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyVpcEndpoint.html) API.
func (o ServerEndpointDetailsOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServerEndpointDetails) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// A list of subnet IDs that are required to host your server endpoint in your VPC.
//
// > This property can only be set when `EndpointType` is set to `VPC` .
func (o ServerEndpointDetailsOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServerEndpointDetails) []string { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

// The ID of the VPC endpoint.
//
// > This property can only be set when `EndpointType` is set to `VPC_ENDPOINT` .
func (o ServerEndpointDetailsOutput) VpcEndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerEndpointDetails) *string { return v.VpcEndpointId }).(pulumi.StringPtrOutput)
}

// The VPC ID of the virtual private cloud in which the server's endpoint will be hosted.
//
// > This property can only be set when `EndpointType` is set to `VPC` .
func (o ServerEndpointDetailsOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerEndpointDetails) *string { return v.VpcId }).(pulumi.StringPtrOutput)
}

type ServerEndpointDetailsPtrOutput struct{ *pulumi.OutputState }

func (ServerEndpointDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerEndpointDetails)(nil)).Elem()
}

func (o ServerEndpointDetailsPtrOutput) ToServerEndpointDetailsPtrOutput() ServerEndpointDetailsPtrOutput {
	return o
}

func (o ServerEndpointDetailsPtrOutput) ToServerEndpointDetailsPtrOutputWithContext(ctx context.Context) ServerEndpointDetailsPtrOutput {
	return o
}

func (o ServerEndpointDetailsPtrOutput) Elem() ServerEndpointDetailsOutput {
	return o.ApplyT(func(v *ServerEndpointDetails) ServerEndpointDetails {
		if v != nil {
			return *v
		}
		var ret ServerEndpointDetails
		return ret
	}).(ServerEndpointDetailsOutput)
}

// A list of address allocation IDs that are required to attach an Elastic IP address to your server's endpoint.
//
// An address allocation ID corresponds to the allocation ID of an Elastic IP address. This value can be retrieved from the `allocationId` field from the Amazon EC2 [Address](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_Address.html) data type. One way to retrieve this value is by calling the EC2 [DescribeAddresses](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeAddresses.html) API.
//
// This parameter is optional. Set this parameter if you want to make your VPC endpoint public-facing. For details, see [Create an internet-facing endpoint for your server](https://docs.aws.amazon.com/transfer/latest/userguide/create-server-in-vpc.html#create-internet-facing-endpoint) .
//
// > This property can only be set as follows:
// > - `EndpointType` must be set to `VPC`
// > - The Transfer Family server must be offline.
// > - You cannot set this parameter for Transfer Family servers that use the FTP protocol.
// > - The server must already have `SubnetIds` populated ( `SubnetIds` and `AddressAllocationIds` cannot be updated simultaneously).
// > - `AddressAllocationIds` can't contain duplicates, and must be equal in length to `SubnetIds` . For example, if you have three subnet IDs, you must also specify three address allocation IDs.
// > - Call the `UpdateServer` API to set or change this parameter.
// > - You can't set address allocation IDs for servers that have an `IpAddressType` set to `DUALSTACK` You can only set this property if `IpAddressType` is set to `IPV4` .
func (o ServerEndpointDetailsPtrOutput) AddressAllocationIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServerEndpointDetails) []string {
		if v == nil {
			return nil
		}
		return v.AddressAllocationIds
	}).(pulumi.StringArrayOutput)
}

// A list of security groups IDs that are available to attach to your server's endpoint.
//
// > While `SecurityGroupIds` appears in the response syntax for consistency with `CreateServer` and `UpdateServer` operations, this field is not populated in `DescribeServer` responses. Security groups are managed at the VPC endpoint level and can be modified outside of the Transfer Family service. To retrieve current security group information, use the EC2 `DescribeVpcEndpoints` API with the `VpcEndpointId` returned in the response.
// >
// > This property can only be set when `EndpointType` is set to `VPC` .
// >
// > You can edit the `SecurityGroupIds` property in the [UpdateServer](https://docs.aws.amazon.com/transfer/latest/userguide/API_UpdateServer.html) API only if you are changing the `EndpointType` from `PUBLIC` or `VPC_ENDPOINT` to `VPC` . To change security groups associated with your server's VPC endpoint after creation, use the Amazon EC2 [ModifyVpcEndpoint](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyVpcEndpoint.html) API.
func (o ServerEndpointDetailsPtrOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServerEndpointDetails) []string {
		if v == nil {
			return nil
		}
		return v.SecurityGroupIds
	}).(pulumi.StringArrayOutput)
}

// A list of subnet IDs that are required to host your server endpoint in your VPC.
//
// > This property can only be set when `EndpointType` is set to `VPC` .
func (o ServerEndpointDetailsPtrOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServerEndpointDetails) []string {
		if v == nil {
			return nil
		}
		return v.SubnetIds
	}).(pulumi.StringArrayOutput)
}

// The ID of the VPC endpoint.
//
// > This property can only be set when `EndpointType` is set to `VPC_ENDPOINT` .
func (o ServerEndpointDetailsPtrOutput) VpcEndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerEndpointDetails) *string {
		if v == nil {
			return nil
		}
		return v.VpcEndpointId
	}).(pulumi.StringPtrOutput)
}

// The VPC ID of the virtual private cloud in which the server's endpoint will be hosted.
//
// > This property can only be set when `EndpointType` is set to `VPC` .
func (o ServerEndpointDetailsPtrOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerEndpointDetails) *string {
		if v == nil {
			return nil
		}
		return v.VpcId
	}).(pulumi.StringPtrOutput)
}

type ServerIdentityProviderDetails struct {
	// The identifier of the AWS Directory Service directory that you want to use as your identity provider.
	DirectoryId *string `pulumi:"directoryId"`
	// The ARN for a Lambda function to use for the Identity provider.
	Function *string `pulumi:"function"`
	// This parameter is only applicable if your `IdentityProviderType` is `API_GATEWAY` . Provides the type of `InvocationRole` used to authenticate the user account.
	InvocationRole *string `pulumi:"invocationRole"`
	// For SFTP-enabled servers, and for custom identity providers *only* , you can specify whether to authenticate using a password, SSH key pair, or both.
	//
	// - `PASSWORD` - users must provide their password to connect.
	// - `PUBLIC_KEY` - users must provide their private key to connect.
	// - `PUBLIC_KEY_OR_PASSWORD` - users can authenticate with either their password or their key. This is the default value.
	// - `PUBLIC_KEY_AND_PASSWORD` - users must provide both their private key and their password to connect. The server checks the key first, and then if the key is valid, the system prompts for a password. If the private key provided does not match the public key that is stored, authentication fails.
	SftpAuthenticationMethods *ServerSftpAuthenticationMethods `pulumi:"sftpAuthenticationMethods"`
	// Provides the location of the service endpoint used to authenticate users.
	Url *string `pulumi:"url"`
}

// ServerIdentityProviderDetailsInput is an input type that accepts ServerIdentityProviderDetailsArgs and ServerIdentityProviderDetailsOutput values.
// You can construct a concrete instance of `ServerIdentityProviderDetailsInput` via:
//
//	ServerIdentityProviderDetailsArgs{...}
type ServerIdentityProviderDetailsInput interface {
	pulumi.Input

	ToServerIdentityProviderDetailsOutput() ServerIdentityProviderDetailsOutput
	ToServerIdentityProviderDetailsOutputWithContext(context.Context) ServerIdentityProviderDetailsOutput
}

type ServerIdentityProviderDetailsArgs struct {
	// The identifier of the AWS Directory Service directory that you want to use as your identity provider.
	DirectoryId pulumi.StringPtrInput `pulumi:"directoryId"`
	// The ARN for a Lambda function to use for the Identity provider.
	Function pulumi.StringPtrInput `pulumi:"function"`
	// This parameter is only applicable if your `IdentityProviderType` is `API_GATEWAY` . Provides the type of `InvocationRole` used to authenticate the user account.
	InvocationRole pulumi.StringPtrInput `pulumi:"invocationRole"`
	// For SFTP-enabled servers, and for custom identity providers *only* , you can specify whether to authenticate using a password, SSH key pair, or both.
	//
	// - `PASSWORD` - users must provide their password to connect.
	// - `PUBLIC_KEY` - users must provide their private key to connect.
	// - `PUBLIC_KEY_OR_PASSWORD` - users can authenticate with either their password or their key. This is the default value.
	// - `PUBLIC_KEY_AND_PASSWORD` - users must provide both their private key and their password to connect. The server checks the key first, and then if the key is valid, the system prompts for a password. If the private key provided does not match the public key that is stored, authentication fails.
	SftpAuthenticationMethods ServerSftpAuthenticationMethodsPtrInput `pulumi:"sftpAuthenticationMethods"`
	// Provides the location of the service endpoint used to authenticate users.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (ServerIdentityProviderDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerIdentityProviderDetails)(nil)).Elem()
}

func (i ServerIdentityProviderDetailsArgs) ToServerIdentityProviderDetailsOutput() ServerIdentityProviderDetailsOutput {
	return i.ToServerIdentityProviderDetailsOutputWithContext(context.Background())
}

func (i ServerIdentityProviderDetailsArgs) ToServerIdentityProviderDetailsOutputWithContext(ctx context.Context) ServerIdentityProviderDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerIdentityProviderDetailsOutput)
}

func (i ServerIdentityProviderDetailsArgs) ToServerIdentityProviderDetailsPtrOutput() ServerIdentityProviderDetailsPtrOutput {
	return i.ToServerIdentityProviderDetailsPtrOutputWithContext(context.Background())
}

func (i ServerIdentityProviderDetailsArgs) ToServerIdentityProviderDetailsPtrOutputWithContext(ctx context.Context) ServerIdentityProviderDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerIdentityProviderDetailsOutput).ToServerIdentityProviderDetailsPtrOutputWithContext(ctx)
}

// ServerIdentityProviderDetailsPtrInput is an input type that accepts ServerIdentityProviderDetailsArgs, ServerIdentityProviderDetailsPtr and ServerIdentityProviderDetailsPtrOutput values.
// You can construct a concrete instance of `ServerIdentityProviderDetailsPtrInput` via:
//
//	        ServerIdentityProviderDetailsArgs{...}
//
//	or:
//
//	        nil
type ServerIdentityProviderDetailsPtrInput interface {
	pulumi.Input

	ToServerIdentityProviderDetailsPtrOutput() ServerIdentityProviderDetailsPtrOutput
	ToServerIdentityProviderDetailsPtrOutputWithContext(context.Context) ServerIdentityProviderDetailsPtrOutput
}

type serverIdentityProviderDetailsPtrType ServerIdentityProviderDetailsArgs

func ServerIdentityProviderDetailsPtr(v *ServerIdentityProviderDetailsArgs) ServerIdentityProviderDetailsPtrInput {
	return (*serverIdentityProviderDetailsPtrType)(v)
}

func (*serverIdentityProviderDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerIdentityProviderDetails)(nil)).Elem()
}

func (i *serverIdentityProviderDetailsPtrType) ToServerIdentityProviderDetailsPtrOutput() ServerIdentityProviderDetailsPtrOutput {
	return i.ToServerIdentityProviderDetailsPtrOutputWithContext(context.Background())
}

func (i *serverIdentityProviderDetailsPtrType) ToServerIdentityProviderDetailsPtrOutputWithContext(ctx context.Context) ServerIdentityProviderDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerIdentityProviderDetailsPtrOutput)
}

type ServerIdentityProviderDetailsOutput struct{ *pulumi.OutputState }

func (ServerIdentityProviderDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerIdentityProviderDetails)(nil)).Elem()
}

func (o ServerIdentityProviderDetailsOutput) ToServerIdentityProviderDetailsOutput() ServerIdentityProviderDetailsOutput {
	return o
}

func (o ServerIdentityProviderDetailsOutput) ToServerIdentityProviderDetailsOutputWithContext(ctx context.Context) ServerIdentityProviderDetailsOutput {
	return o
}

func (o ServerIdentityProviderDetailsOutput) ToServerIdentityProviderDetailsPtrOutput() ServerIdentityProviderDetailsPtrOutput {
	return o.ToServerIdentityProviderDetailsPtrOutputWithContext(context.Background())
}

func (o ServerIdentityProviderDetailsOutput) ToServerIdentityProviderDetailsPtrOutputWithContext(ctx context.Context) ServerIdentityProviderDetailsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServerIdentityProviderDetails) *ServerIdentityProviderDetails {
		return &v
	}).(ServerIdentityProviderDetailsPtrOutput)
}

// The identifier of the AWS Directory Service directory that you want to use as your identity provider.
func (o ServerIdentityProviderDetailsOutput) DirectoryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerIdentityProviderDetails) *string { return v.DirectoryId }).(pulumi.StringPtrOutput)
}

// The ARN for a Lambda function to use for the Identity provider.
func (o ServerIdentityProviderDetailsOutput) Function() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerIdentityProviderDetails) *string { return v.Function }).(pulumi.StringPtrOutput)
}

// This parameter is only applicable if your `IdentityProviderType` is `API_GATEWAY` . Provides the type of `InvocationRole` used to authenticate the user account.
func (o ServerIdentityProviderDetailsOutput) InvocationRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerIdentityProviderDetails) *string { return v.InvocationRole }).(pulumi.StringPtrOutput)
}

// For SFTP-enabled servers, and for custom identity providers *only* , you can specify whether to authenticate using a password, SSH key pair, or both.
//
// - `PASSWORD` - users must provide their password to connect.
// - `PUBLIC_KEY` - users must provide their private key to connect.
// - `PUBLIC_KEY_OR_PASSWORD` - users can authenticate with either their password or their key. This is the default value.
// - `PUBLIC_KEY_AND_PASSWORD` - users must provide both their private key and their password to connect. The server checks the key first, and then if the key is valid, the system prompts for a password. If the private key provided does not match the public key that is stored, authentication fails.
func (o ServerIdentityProviderDetailsOutput) SftpAuthenticationMethods() ServerSftpAuthenticationMethodsPtrOutput {
	return o.ApplyT(func(v ServerIdentityProviderDetails) *ServerSftpAuthenticationMethods {
		return v.SftpAuthenticationMethods
	}).(ServerSftpAuthenticationMethodsPtrOutput)
}

// Provides the location of the service endpoint used to authenticate users.
func (o ServerIdentityProviderDetailsOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerIdentityProviderDetails) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type ServerIdentityProviderDetailsPtrOutput struct{ *pulumi.OutputState }

func (ServerIdentityProviderDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerIdentityProviderDetails)(nil)).Elem()
}

func (o ServerIdentityProviderDetailsPtrOutput) ToServerIdentityProviderDetailsPtrOutput() ServerIdentityProviderDetailsPtrOutput {
	return o
}

func (o ServerIdentityProviderDetailsPtrOutput) ToServerIdentityProviderDetailsPtrOutputWithContext(ctx context.Context) ServerIdentityProviderDetailsPtrOutput {
	return o
}

func (o ServerIdentityProviderDetailsPtrOutput) Elem() ServerIdentityProviderDetailsOutput {
	return o.ApplyT(func(v *ServerIdentityProviderDetails) ServerIdentityProviderDetails {
		if v != nil {
			return *v
		}
		var ret ServerIdentityProviderDetails
		return ret
	}).(ServerIdentityProviderDetailsOutput)
}

// The identifier of the AWS Directory Service directory that you want to use as your identity provider.
func (o ServerIdentityProviderDetailsPtrOutput) DirectoryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerIdentityProviderDetails) *string {
		if v == nil {
			return nil
		}
		return v.DirectoryId
	}).(pulumi.StringPtrOutput)
}

// The ARN for a Lambda function to use for the Identity provider.
func (o ServerIdentityProviderDetailsPtrOutput) Function() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerIdentityProviderDetails) *string {
		if v == nil {
			return nil
		}
		return v.Function
	}).(pulumi.StringPtrOutput)
}

// This parameter is only applicable if your `IdentityProviderType` is `API_GATEWAY` . Provides the type of `InvocationRole` used to authenticate the user account.
func (o ServerIdentityProviderDetailsPtrOutput) InvocationRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerIdentityProviderDetails) *string {
		if v == nil {
			return nil
		}
		return v.InvocationRole
	}).(pulumi.StringPtrOutput)
}

// For SFTP-enabled servers, and for custom identity providers *only* , you can specify whether to authenticate using a password, SSH key pair, or both.
//
// - `PASSWORD` - users must provide their password to connect.
// - `PUBLIC_KEY` - users must provide their private key to connect.
// - `PUBLIC_KEY_OR_PASSWORD` - users can authenticate with either their password or their key. This is the default value.
// - `PUBLIC_KEY_AND_PASSWORD` - users must provide both their private key and their password to connect. The server checks the key first, and then if the key is valid, the system prompts for a password. If the private key provided does not match the public key that is stored, authentication fails.
func (o ServerIdentityProviderDetailsPtrOutput) SftpAuthenticationMethods() ServerSftpAuthenticationMethodsPtrOutput {
	return o.ApplyT(func(v *ServerIdentityProviderDetails) *ServerSftpAuthenticationMethods {
		if v == nil {
			return nil
		}
		return v.SftpAuthenticationMethods
	}).(ServerSftpAuthenticationMethodsPtrOutput)
}

// Provides the location of the service endpoint used to authenticate users.
func (o ServerIdentityProviderDetailsPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerIdentityProviderDetails) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

type ServerProtocolDetails struct {
	// List of `As2Transport` objects.
	As2Transports []ServerAs2Transport `pulumi:"as2Transports"`
	// Indicates passive mode, for FTP and FTPS protocols. Enter a single IPv4 address, such as the public IP address of a firewall, router, or load balancer. For example:
	//
	// `aws transfer update-server --protocol-details PassiveIp=0.0.0.0`
	//
	// Replace `0.0.0.0` in the example above with the actual IP address you want to use.
	//
	// > If you change the `PassiveIp` value, you must stop and then restart your Transfer Family server for the change to take effect. For details on using passive mode (PASV) in a NAT environment, see [Configuring your FTPS server behind a firewall or NAT with AWS Transfer Family](https://docs.aws.amazon.com/storage/configuring-your-ftps-server-behind-a-firewall-or-nat-with-aws-transfer-family/) .
	// >
	// > Additionally, avoid placing Network Load Balancers (NLBs) or NAT gateways in front of AWS Transfer Family servers. This configuration increases costs and can cause performance issues. When NLBs or NATs are in the communication path, Transfer Family cannot accurately recognize client IP addresses, which impacts connection sharding and limits FTPS servers to only 300 simultaneous connections instead of 10,000. If you must use an NLB, use port 21 for health checks and enable TLS session resumption by setting `TlsSessionResumptionMode = ENFORCED` . For optimal performance, migrate to VPC endpoints with Elastic IP addresses instead of using NLBs. For more details, see [Avoid placing NLBs and NATs in front of AWS Transfer Family](https://docs.aws.amazon.com/transfer/latest/userguide/infrastructure-security.html#nlb-considerations) .
	//
	// *Special values*
	//
	// The `AUTO` and `0.0.0.0` are special values for the `PassiveIp` parameter. The value `PassiveIp=AUTO` is assigned by default to FTP and FTPS type servers. In this case, the server automatically responds with one of the endpoint IPs within the PASV response. `PassiveIp=0.0.0.0` has a more unique application for its usage. For example, if you have a High Availability (HA) Network Load Balancer (NLB) environment, where you have 3 subnets, you can only specify a single IP address using the `PassiveIp` parameter. This reduces the effectiveness of having High Availability. In this case, you can specify `PassiveIp=0.0.0.0` . This tells the client to use the same IP address as the Control connection and utilize all AZs for their connections. Note, however, that not all FTP clients support the `PassiveIp=0.0.0.0` response. FileZilla and WinSCP do support it. If you are using other clients, check to see if your client supports the `PassiveIp=0.0.0.0` response.
	PassiveIp *string `pulumi:"passiveIp"`
	// Use the `SetStatOption` to ignore the error that is generated when the client attempts to use `SETSTAT` on a file you are uploading to an S3 bucket.
	//
	// Some SFTP file transfer clients can attempt to change the attributes of remote files, including timestamp and permissions, using commands, such as `SETSTAT` when uploading the file. However, these commands are not compatible with object storage systems, such as Amazon S3. Due to this incompatibility, file uploads from these clients can result in errors even when the file is otherwise successfully uploaded.
	//
	// Set the value to `ENABLE_NO_OP` to have the Transfer Family server ignore the `SETSTAT` command, and upload files without needing to make any changes to your SFTP client. While the `SetStatOption` `ENABLE_NO_OP` setting ignores the error, it does generate a log entry in Amazon CloudWatch Logs, so you can determine when the client is making a `SETSTAT` call.
	//
	// > If you want to preserve the original timestamp for your file, and modify other file attributes using `SETSTAT` , you can use Amazon EFS as backend storage with Transfer Family.
	SetStatOption *ServerSetStatOption `pulumi:"setStatOption"`
	// A property used with Transfer Family servers that use the FTPS protocol. TLS Session Resumption provides a mechanism to resume or share a negotiated secret key between the control and data connection for an FTPS session. `TlsSessionResumptionMode` determines whether or not the server resumes recent, negotiated sessions through a unique session ID. This property is available during `CreateServer` and `UpdateServer` calls. If a `TlsSessionResumptionMode` value is not specified during `CreateServer` , it is set to `ENFORCED` by default.
	//
	// - `DISABLED` : the server does not process TLS session resumption client requests and creates a new TLS session for each request.
	// - `ENABLED` : the server processes and accepts clients that are performing TLS session resumption. The server doesn't reject client data connections that do not perform the TLS session resumption client processing.
	// - `ENFORCED` : the server processes and accepts clients that are performing TLS session resumption. The server rejects client data connections that do not perform the TLS session resumption client processing. Before you set the value to `ENFORCED` , test your clients.
	//
	// > Not all FTPS clients perform TLS session resumption. So, if you choose to enforce TLS session resumption, you prevent any connections from FTPS clients that don't perform the protocol negotiation. To determine whether or not you can use the `ENFORCED` value, you need to test your clients.
	TlsSessionResumptionMode *ServerTlsSessionResumptionMode `pulumi:"tlsSessionResumptionMode"`
}

// ServerProtocolDetailsInput is an input type that accepts ServerProtocolDetailsArgs and ServerProtocolDetailsOutput values.
// You can construct a concrete instance of `ServerProtocolDetailsInput` via:
//
//	ServerProtocolDetailsArgs{...}
type ServerProtocolDetailsInput interface {
	pulumi.Input

	ToServerProtocolDetailsOutput() ServerProtocolDetailsOutput
	ToServerProtocolDetailsOutputWithContext(context.Context) ServerProtocolDetailsOutput
}

type ServerProtocolDetailsArgs struct {
	// List of `As2Transport` objects.
	As2Transports ServerAs2TransportArrayInput `pulumi:"as2Transports"`
	// Indicates passive mode, for FTP and FTPS protocols. Enter a single IPv4 address, such as the public IP address of a firewall, router, or load balancer. For example:
	//
	// `aws transfer update-server --protocol-details PassiveIp=0.0.0.0`
	//
	// Replace `0.0.0.0` in the example above with the actual IP address you want to use.
	//
	// > If you change the `PassiveIp` value, you must stop and then restart your Transfer Family server for the change to take effect. For details on using passive mode (PASV) in a NAT environment, see [Configuring your FTPS server behind a firewall or NAT with AWS Transfer Family](https://docs.aws.amazon.com/storage/configuring-your-ftps-server-behind-a-firewall-or-nat-with-aws-transfer-family/) .
	// >
	// > Additionally, avoid placing Network Load Balancers (NLBs) or NAT gateways in front of AWS Transfer Family servers. This configuration increases costs and can cause performance issues. When NLBs or NATs are in the communication path, Transfer Family cannot accurately recognize client IP addresses, which impacts connection sharding and limits FTPS servers to only 300 simultaneous connections instead of 10,000. If you must use an NLB, use port 21 for health checks and enable TLS session resumption by setting `TlsSessionResumptionMode = ENFORCED` . For optimal performance, migrate to VPC endpoints with Elastic IP addresses instead of using NLBs. For more details, see [Avoid placing NLBs and NATs in front of AWS Transfer Family](https://docs.aws.amazon.com/transfer/latest/userguide/infrastructure-security.html#nlb-considerations) .
	//
	// *Special values*
	//
	// The `AUTO` and `0.0.0.0` are special values for the `PassiveIp` parameter. The value `PassiveIp=AUTO` is assigned by default to FTP and FTPS type servers. In this case, the server automatically responds with one of the endpoint IPs within the PASV response. `PassiveIp=0.0.0.0` has a more unique application for its usage. For example, if you have a High Availability (HA) Network Load Balancer (NLB) environment, where you have 3 subnets, you can only specify a single IP address using the `PassiveIp` parameter. This reduces the effectiveness of having High Availability. In this case, you can specify `PassiveIp=0.0.0.0` . This tells the client to use the same IP address as the Control connection and utilize all AZs for their connections. Note, however, that not all FTP clients support the `PassiveIp=0.0.0.0` response. FileZilla and WinSCP do support it. If you are using other clients, check to see if your client supports the `PassiveIp=0.0.0.0` response.
	PassiveIp pulumi.StringPtrInput `pulumi:"passiveIp"`
	// Use the `SetStatOption` to ignore the error that is generated when the client attempts to use `SETSTAT` on a file you are uploading to an S3 bucket.
	//
	// Some SFTP file transfer clients can attempt to change the attributes of remote files, including timestamp and permissions, using commands, such as `SETSTAT` when uploading the file. However, these commands are not compatible with object storage systems, such as Amazon S3. Due to this incompatibility, file uploads from these clients can result in errors even when the file is otherwise successfully uploaded.
	//
	// Set the value to `ENABLE_NO_OP` to have the Transfer Family server ignore the `SETSTAT` command, and upload files without needing to make any changes to your SFTP client. While the `SetStatOption` `ENABLE_NO_OP` setting ignores the error, it does generate a log entry in Amazon CloudWatch Logs, so you can determine when the client is making a `SETSTAT` call.
	//
	// > If you want to preserve the original timestamp for your file, and modify other file attributes using `SETSTAT` , you can use Amazon EFS as backend storage with Transfer Family.
	SetStatOption ServerSetStatOptionPtrInput `pulumi:"setStatOption"`
	// A property used with Transfer Family servers that use the FTPS protocol. TLS Session Resumption provides a mechanism to resume or share a negotiated secret key between the control and data connection for an FTPS session. `TlsSessionResumptionMode` determines whether or not the server resumes recent, negotiated sessions through a unique session ID. This property is available during `CreateServer` and `UpdateServer` calls. If a `TlsSessionResumptionMode` value is not specified during `CreateServer` , it is set to `ENFORCED` by default.
	//
	// - `DISABLED` : the server does not process TLS session resumption client requests and creates a new TLS session for each request.
	// - `ENABLED` : the server processes and accepts clients that are performing TLS session resumption. The server doesn't reject client data connections that do not perform the TLS session resumption client processing.
	// - `ENFORCED` : the server processes and accepts clients that are performing TLS session resumption. The server rejects client data connections that do not perform the TLS session resumption client processing. Before you set the value to `ENFORCED` , test your clients.
	//
	// > Not all FTPS clients perform TLS session resumption. So, if you choose to enforce TLS session resumption, you prevent any connections from FTPS clients that don't perform the protocol negotiation. To determine whether or not you can use the `ENFORCED` value, you need to test your clients.
	TlsSessionResumptionMode ServerTlsSessionResumptionModePtrInput `pulumi:"tlsSessionResumptionMode"`
}

func (ServerProtocolDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerProtocolDetails)(nil)).Elem()
}

func (i ServerProtocolDetailsArgs) ToServerProtocolDetailsOutput() ServerProtocolDetailsOutput {
	return i.ToServerProtocolDetailsOutputWithContext(context.Background())
}

func (i ServerProtocolDetailsArgs) ToServerProtocolDetailsOutputWithContext(ctx context.Context) ServerProtocolDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerProtocolDetailsOutput)
}

func (i ServerProtocolDetailsArgs) ToServerProtocolDetailsPtrOutput() ServerProtocolDetailsPtrOutput {
	return i.ToServerProtocolDetailsPtrOutputWithContext(context.Background())
}

func (i ServerProtocolDetailsArgs) ToServerProtocolDetailsPtrOutputWithContext(ctx context.Context) ServerProtocolDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerProtocolDetailsOutput).ToServerProtocolDetailsPtrOutputWithContext(ctx)
}

// ServerProtocolDetailsPtrInput is an input type that accepts ServerProtocolDetailsArgs, ServerProtocolDetailsPtr and ServerProtocolDetailsPtrOutput values.
// You can construct a concrete instance of `ServerProtocolDetailsPtrInput` via:
//
//	        ServerProtocolDetailsArgs{...}
//
//	or:
//
//	        nil
type ServerProtocolDetailsPtrInput interface {
	pulumi.Input

	ToServerProtocolDetailsPtrOutput() ServerProtocolDetailsPtrOutput
	ToServerProtocolDetailsPtrOutputWithContext(context.Context) ServerProtocolDetailsPtrOutput
}

type serverProtocolDetailsPtrType ServerProtocolDetailsArgs

func ServerProtocolDetailsPtr(v *ServerProtocolDetailsArgs) ServerProtocolDetailsPtrInput {
	return (*serverProtocolDetailsPtrType)(v)
}

func (*serverProtocolDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerProtocolDetails)(nil)).Elem()
}

func (i *serverProtocolDetailsPtrType) ToServerProtocolDetailsPtrOutput() ServerProtocolDetailsPtrOutput {
	return i.ToServerProtocolDetailsPtrOutputWithContext(context.Background())
}

func (i *serverProtocolDetailsPtrType) ToServerProtocolDetailsPtrOutputWithContext(ctx context.Context) ServerProtocolDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerProtocolDetailsPtrOutput)
}

type ServerProtocolDetailsOutput struct{ *pulumi.OutputState }

func (ServerProtocolDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerProtocolDetails)(nil)).Elem()
}

func (o ServerProtocolDetailsOutput) ToServerProtocolDetailsOutput() ServerProtocolDetailsOutput {
	return o
}

func (o ServerProtocolDetailsOutput) ToServerProtocolDetailsOutputWithContext(ctx context.Context) ServerProtocolDetailsOutput {
	return o
}

func (o ServerProtocolDetailsOutput) ToServerProtocolDetailsPtrOutput() ServerProtocolDetailsPtrOutput {
	return o.ToServerProtocolDetailsPtrOutputWithContext(context.Background())
}

func (o ServerProtocolDetailsOutput) ToServerProtocolDetailsPtrOutputWithContext(ctx context.Context) ServerProtocolDetailsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServerProtocolDetails) *ServerProtocolDetails {
		return &v
	}).(ServerProtocolDetailsPtrOutput)
}

// List of `As2Transport` objects.
func (o ServerProtocolDetailsOutput) As2Transports() ServerAs2TransportArrayOutput {
	return o.ApplyT(func(v ServerProtocolDetails) []ServerAs2Transport { return v.As2Transports }).(ServerAs2TransportArrayOutput)
}

// Indicates passive mode, for FTP and FTPS protocols. Enter a single IPv4 address, such as the public IP address of a firewall, router, or load balancer. For example:
//
// `aws transfer update-server --protocol-details PassiveIp=0.0.0.0`
//
// Replace `0.0.0.0` in the example above with the actual IP address you want to use.
//
// > If you change the `PassiveIp` value, you must stop and then restart your Transfer Family server for the change to take effect. For details on using passive mode (PASV) in a NAT environment, see [Configuring your FTPS server behind a firewall or NAT with AWS Transfer Family](https://docs.aws.amazon.com/storage/configuring-your-ftps-server-behind-a-firewall-or-nat-with-aws-transfer-family/) .
// >
// > Additionally, avoid placing Network Load Balancers (NLBs) or NAT gateways in front of AWS Transfer Family servers. This configuration increases costs and can cause performance issues. When NLBs or NATs are in the communication path, Transfer Family cannot accurately recognize client IP addresses, which impacts connection sharding and limits FTPS servers to only 300 simultaneous connections instead of 10,000. If you must use an NLB, use port 21 for health checks and enable TLS session resumption by setting `TlsSessionResumptionMode = ENFORCED` . For optimal performance, migrate to VPC endpoints with Elastic IP addresses instead of using NLBs. For more details, see [Avoid placing NLBs and NATs in front of AWS Transfer Family](https://docs.aws.amazon.com/transfer/latest/userguide/infrastructure-security.html#nlb-considerations) .
//
// *Special values*
//
// The `AUTO` and `0.0.0.0` are special values for the `PassiveIp` parameter. The value `PassiveIp=AUTO` is assigned by default to FTP and FTPS type servers. In this case, the server automatically responds with one of the endpoint IPs within the PASV response. `PassiveIp=0.0.0.0` has a more unique application for its usage. For example, if you have a High Availability (HA) Network Load Balancer (NLB) environment, where you have 3 subnets, you can only specify a single IP address using the `PassiveIp` parameter. This reduces the effectiveness of having High Availability. In this case, you can specify `PassiveIp=0.0.0.0` . This tells the client to use the same IP address as the Control connection and utilize all AZs for their connections. Note, however, that not all FTP clients support the `PassiveIp=0.0.0.0` response. FileZilla and WinSCP do support it. If you are using other clients, check to see if your client supports the `PassiveIp=0.0.0.0` response.
func (o ServerProtocolDetailsOutput) PassiveIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerProtocolDetails) *string { return v.PassiveIp }).(pulumi.StringPtrOutput)
}

// Use the `SetStatOption` to ignore the error that is generated when the client attempts to use `SETSTAT` on a file you are uploading to an S3 bucket.
//
// Some SFTP file transfer clients can attempt to change the attributes of remote files, including timestamp and permissions, using commands, such as `SETSTAT` when uploading the file. However, these commands are not compatible with object storage systems, such as Amazon S3. Due to this incompatibility, file uploads from these clients can result in errors even when the file is otherwise successfully uploaded.
//
// Set the value to `ENABLE_NO_OP` to have the Transfer Family server ignore the `SETSTAT` command, and upload files without needing to make any changes to your SFTP client. While the `SetStatOption` `ENABLE_NO_OP` setting ignores the error, it does generate a log entry in Amazon CloudWatch Logs, so you can determine when the client is making a `SETSTAT` call.
//
// > If you want to preserve the original timestamp for your file, and modify other file attributes using `SETSTAT` , you can use Amazon EFS as backend storage with Transfer Family.
func (o ServerProtocolDetailsOutput) SetStatOption() ServerSetStatOptionPtrOutput {
	return o.ApplyT(func(v ServerProtocolDetails) *ServerSetStatOption { return v.SetStatOption }).(ServerSetStatOptionPtrOutput)
}

// A property used with Transfer Family servers that use the FTPS protocol. TLS Session Resumption provides a mechanism to resume or share a negotiated secret key between the control and data connection for an FTPS session. `TlsSessionResumptionMode` determines whether or not the server resumes recent, negotiated sessions through a unique session ID. This property is available during `CreateServer` and `UpdateServer` calls. If a `TlsSessionResumptionMode` value is not specified during `CreateServer` , it is set to `ENFORCED` by default.
//
// - `DISABLED` : the server does not process TLS session resumption client requests and creates a new TLS session for each request.
// - `ENABLED` : the server processes and accepts clients that are performing TLS session resumption. The server doesn't reject client data connections that do not perform the TLS session resumption client processing.
// - `ENFORCED` : the server processes and accepts clients that are performing TLS session resumption. The server rejects client data connections that do not perform the TLS session resumption client processing. Before you set the value to `ENFORCED` , test your clients.
//
// > Not all FTPS clients perform TLS session resumption. So, if you choose to enforce TLS session resumption, you prevent any connections from FTPS clients that don't perform the protocol negotiation. To determine whether or not you can use the `ENFORCED` value, you need to test your clients.
func (o ServerProtocolDetailsOutput) TlsSessionResumptionMode() ServerTlsSessionResumptionModePtrOutput {
	return o.ApplyT(func(v ServerProtocolDetails) *ServerTlsSessionResumptionMode { return v.TlsSessionResumptionMode }).(ServerTlsSessionResumptionModePtrOutput)
}

type ServerProtocolDetailsPtrOutput struct{ *pulumi.OutputState }

func (ServerProtocolDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerProtocolDetails)(nil)).Elem()
}

func (o ServerProtocolDetailsPtrOutput) ToServerProtocolDetailsPtrOutput() ServerProtocolDetailsPtrOutput {
	return o
}

func (o ServerProtocolDetailsPtrOutput) ToServerProtocolDetailsPtrOutputWithContext(ctx context.Context) ServerProtocolDetailsPtrOutput {
	return o
}

func (o ServerProtocolDetailsPtrOutput) Elem() ServerProtocolDetailsOutput {
	return o.ApplyT(func(v *ServerProtocolDetails) ServerProtocolDetails {
		if v != nil {
			return *v
		}
		var ret ServerProtocolDetails
		return ret
	}).(ServerProtocolDetailsOutput)
}

// List of `As2Transport` objects.
func (o ServerProtocolDetailsPtrOutput) As2Transports() ServerAs2TransportArrayOutput {
	return o.ApplyT(func(v *ServerProtocolDetails) []ServerAs2Transport {
		if v == nil {
			return nil
		}
		return v.As2Transports
	}).(ServerAs2TransportArrayOutput)
}

// Indicates passive mode, for FTP and FTPS protocols. Enter a single IPv4 address, such as the public IP address of a firewall, router, or load balancer. For example:
//
// `aws transfer update-server --protocol-details PassiveIp=0.0.0.0`
//
// Replace `0.0.0.0` in the example above with the actual IP address you want to use.
//
// > If you change the `PassiveIp` value, you must stop and then restart your Transfer Family server for the change to take effect. For details on using passive mode (PASV) in a NAT environment, see [Configuring your FTPS server behind a firewall or NAT with AWS Transfer Family](https://docs.aws.amazon.com/storage/configuring-your-ftps-server-behind-a-firewall-or-nat-with-aws-transfer-family/) .
// >
// > Additionally, avoid placing Network Load Balancers (NLBs) or NAT gateways in front of AWS Transfer Family servers. This configuration increases costs and can cause performance issues. When NLBs or NATs are in the communication path, Transfer Family cannot accurately recognize client IP addresses, which impacts connection sharding and limits FTPS servers to only 300 simultaneous connections instead of 10,000. If you must use an NLB, use port 21 for health checks and enable TLS session resumption by setting `TlsSessionResumptionMode = ENFORCED` . For optimal performance, migrate to VPC endpoints with Elastic IP addresses instead of using NLBs. For more details, see [Avoid placing NLBs and NATs in front of AWS Transfer Family](https://docs.aws.amazon.com/transfer/latest/userguide/infrastructure-security.html#nlb-considerations) .
//
// *Special values*
//
// The `AUTO` and `0.0.0.0` are special values for the `PassiveIp` parameter. The value `PassiveIp=AUTO` is assigned by default to FTP and FTPS type servers. In this case, the server automatically responds with one of the endpoint IPs within the PASV response. `PassiveIp=0.0.0.0` has a more unique application for its usage. For example, if you have a High Availability (HA) Network Load Balancer (NLB) environment, where you have 3 subnets, you can only specify a single IP address using the `PassiveIp` parameter. This reduces the effectiveness of having High Availability. In this case, you can specify `PassiveIp=0.0.0.0` . This tells the client to use the same IP address as the Control connection and utilize all AZs for their connections. Note, however, that not all FTP clients support the `PassiveIp=0.0.0.0` response. FileZilla and WinSCP do support it. If you are using other clients, check to see if your client supports the `PassiveIp=0.0.0.0` response.
func (o ServerProtocolDetailsPtrOutput) PassiveIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerProtocolDetails) *string {
		if v == nil {
			return nil
		}
		return v.PassiveIp
	}).(pulumi.StringPtrOutput)
}

// Use the `SetStatOption` to ignore the error that is generated when the client attempts to use `SETSTAT` on a file you are uploading to an S3 bucket.
//
// Some SFTP file transfer clients can attempt to change the attributes of remote files, including timestamp and permissions, using commands, such as `SETSTAT` when uploading the file. However, these commands are not compatible with object storage systems, such as Amazon S3. Due to this incompatibility, file uploads from these clients can result in errors even when the file is otherwise successfully uploaded.
//
// Set the value to `ENABLE_NO_OP` to have the Transfer Family server ignore the `SETSTAT` command, and upload files without needing to make any changes to your SFTP client. While the `SetStatOption` `ENABLE_NO_OP` setting ignores the error, it does generate a log entry in Amazon CloudWatch Logs, so you can determine when the client is making a `SETSTAT` call.
//
// > If you want to preserve the original timestamp for your file, and modify other file attributes using `SETSTAT` , you can use Amazon EFS as backend storage with Transfer Family.
func (o ServerProtocolDetailsPtrOutput) SetStatOption() ServerSetStatOptionPtrOutput {
	return o.ApplyT(func(v *ServerProtocolDetails) *ServerSetStatOption {
		if v == nil {
			return nil
		}
		return v.SetStatOption
	}).(ServerSetStatOptionPtrOutput)
}

// A property used with Transfer Family servers that use the FTPS protocol. TLS Session Resumption provides a mechanism to resume or share a negotiated secret key between the control and data connection for an FTPS session. `TlsSessionResumptionMode` determines whether or not the server resumes recent, negotiated sessions through a unique session ID. This property is available during `CreateServer` and `UpdateServer` calls. If a `TlsSessionResumptionMode` value is not specified during `CreateServer` , it is set to `ENFORCED` by default.
//
// - `DISABLED` : the server does not process TLS session resumption client requests and creates a new TLS session for each request.
// - `ENABLED` : the server processes and accepts clients that are performing TLS session resumption. The server doesn't reject client data connections that do not perform the TLS session resumption client processing.
// - `ENFORCED` : the server processes and accepts clients that are performing TLS session resumption. The server rejects client data connections that do not perform the TLS session resumption client processing. Before you set the value to `ENFORCED` , test your clients.
//
// > Not all FTPS clients perform TLS session resumption. So, if you choose to enforce TLS session resumption, you prevent any connections from FTPS clients that don't perform the protocol negotiation. To determine whether or not you can use the `ENFORCED` value, you need to test your clients.
func (o ServerProtocolDetailsPtrOutput) TlsSessionResumptionMode() ServerTlsSessionResumptionModePtrOutput {
	return o.ApplyT(func(v *ServerProtocolDetails) *ServerTlsSessionResumptionMode {
		if v == nil {
			return nil
		}
		return v.TlsSessionResumptionMode
	}).(ServerTlsSessionResumptionModePtrOutput)
}

type ServerS3StorageOptions struct {
	// Specifies whether or not performance for your Amazon S3 directories is optimized.
	//
	// - If using the console, this is enabled by default.
	// - If using the API or CLI, this is disabled by default.
	//
	// By default, home directory mappings have a `TYPE` of `DIRECTORY` . If you enable this option, you would then need to explicitly set the `HomeDirectoryMapEntry` `Type` to `FILE` if you want a mapping to have a file target.
	DirectoryListingOptimization *ServerDirectoryListingOptimization `pulumi:"directoryListingOptimization"`
}

// ServerS3StorageOptionsInput is an input type that accepts ServerS3StorageOptionsArgs and ServerS3StorageOptionsOutput values.
// You can construct a concrete instance of `ServerS3StorageOptionsInput` via:
//
//	ServerS3StorageOptionsArgs{...}
type ServerS3StorageOptionsInput interface {
	pulumi.Input

	ToServerS3StorageOptionsOutput() ServerS3StorageOptionsOutput
	ToServerS3StorageOptionsOutputWithContext(context.Context) ServerS3StorageOptionsOutput
}

type ServerS3StorageOptionsArgs struct {
	// Specifies whether or not performance for your Amazon S3 directories is optimized.
	//
	// - If using the console, this is enabled by default.
	// - If using the API or CLI, this is disabled by default.
	//
	// By default, home directory mappings have a `TYPE` of `DIRECTORY` . If you enable this option, you would then need to explicitly set the `HomeDirectoryMapEntry` `Type` to `FILE` if you want a mapping to have a file target.
	DirectoryListingOptimization ServerDirectoryListingOptimizationPtrInput `pulumi:"directoryListingOptimization"`
}

func (ServerS3StorageOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerS3StorageOptions)(nil)).Elem()
}

func (i ServerS3StorageOptionsArgs) ToServerS3StorageOptionsOutput() ServerS3StorageOptionsOutput {
	return i.ToServerS3StorageOptionsOutputWithContext(context.Background())
}

func (i ServerS3StorageOptionsArgs) ToServerS3StorageOptionsOutputWithContext(ctx context.Context) ServerS3StorageOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerS3StorageOptionsOutput)
}

func (i ServerS3StorageOptionsArgs) ToServerS3StorageOptionsPtrOutput() ServerS3StorageOptionsPtrOutput {
	return i.ToServerS3StorageOptionsPtrOutputWithContext(context.Background())
}

func (i ServerS3StorageOptionsArgs) ToServerS3StorageOptionsPtrOutputWithContext(ctx context.Context) ServerS3StorageOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerS3StorageOptionsOutput).ToServerS3StorageOptionsPtrOutputWithContext(ctx)
}

// ServerS3StorageOptionsPtrInput is an input type that accepts ServerS3StorageOptionsArgs, ServerS3StorageOptionsPtr and ServerS3StorageOptionsPtrOutput values.
// You can construct a concrete instance of `ServerS3StorageOptionsPtrInput` via:
//
//	        ServerS3StorageOptionsArgs{...}
//
//	or:
//
//	        nil
type ServerS3StorageOptionsPtrInput interface {
	pulumi.Input

	ToServerS3StorageOptionsPtrOutput() ServerS3StorageOptionsPtrOutput
	ToServerS3StorageOptionsPtrOutputWithContext(context.Context) ServerS3StorageOptionsPtrOutput
}

type serverS3StorageOptionsPtrType ServerS3StorageOptionsArgs

func ServerS3StorageOptionsPtr(v *ServerS3StorageOptionsArgs) ServerS3StorageOptionsPtrInput {
	return (*serverS3StorageOptionsPtrType)(v)
}

func (*serverS3StorageOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerS3StorageOptions)(nil)).Elem()
}

func (i *serverS3StorageOptionsPtrType) ToServerS3StorageOptionsPtrOutput() ServerS3StorageOptionsPtrOutput {
	return i.ToServerS3StorageOptionsPtrOutputWithContext(context.Background())
}

func (i *serverS3StorageOptionsPtrType) ToServerS3StorageOptionsPtrOutputWithContext(ctx context.Context) ServerS3StorageOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerS3StorageOptionsPtrOutput)
}

type ServerS3StorageOptionsOutput struct{ *pulumi.OutputState }

func (ServerS3StorageOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerS3StorageOptions)(nil)).Elem()
}

func (o ServerS3StorageOptionsOutput) ToServerS3StorageOptionsOutput() ServerS3StorageOptionsOutput {
	return o
}

func (o ServerS3StorageOptionsOutput) ToServerS3StorageOptionsOutputWithContext(ctx context.Context) ServerS3StorageOptionsOutput {
	return o
}

func (o ServerS3StorageOptionsOutput) ToServerS3StorageOptionsPtrOutput() ServerS3StorageOptionsPtrOutput {
	return o.ToServerS3StorageOptionsPtrOutputWithContext(context.Background())
}

func (o ServerS3StorageOptionsOutput) ToServerS3StorageOptionsPtrOutputWithContext(ctx context.Context) ServerS3StorageOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServerS3StorageOptions) *ServerS3StorageOptions {
		return &v
	}).(ServerS3StorageOptionsPtrOutput)
}

// Specifies whether or not performance for your Amazon S3 directories is optimized.
//
// - If using the console, this is enabled by default.
// - If using the API or CLI, this is disabled by default.
//
// By default, home directory mappings have a `TYPE` of `DIRECTORY` . If you enable this option, you would then need to explicitly set the `HomeDirectoryMapEntry` `Type` to `FILE` if you want a mapping to have a file target.
func (o ServerS3StorageOptionsOutput) DirectoryListingOptimization() ServerDirectoryListingOptimizationPtrOutput {
	return o.ApplyT(func(v ServerS3StorageOptions) *ServerDirectoryListingOptimization {
		return v.DirectoryListingOptimization
	}).(ServerDirectoryListingOptimizationPtrOutput)
}

type ServerS3StorageOptionsPtrOutput struct{ *pulumi.OutputState }

func (ServerS3StorageOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerS3StorageOptions)(nil)).Elem()
}

func (o ServerS3StorageOptionsPtrOutput) ToServerS3StorageOptionsPtrOutput() ServerS3StorageOptionsPtrOutput {
	return o
}

func (o ServerS3StorageOptionsPtrOutput) ToServerS3StorageOptionsPtrOutputWithContext(ctx context.Context) ServerS3StorageOptionsPtrOutput {
	return o
}

func (o ServerS3StorageOptionsPtrOutput) Elem() ServerS3StorageOptionsOutput {
	return o.ApplyT(func(v *ServerS3StorageOptions) ServerS3StorageOptions {
		if v != nil {
			return *v
		}
		var ret ServerS3StorageOptions
		return ret
	}).(ServerS3StorageOptionsOutput)
}

// Specifies whether or not performance for your Amazon S3 directories is optimized.
//
// - If using the console, this is enabled by default.
// - If using the API or CLI, this is disabled by default.
//
// By default, home directory mappings have a `TYPE` of `DIRECTORY` . If you enable this option, you would then need to explicitly set the `HomeDirectoryMapEntry` `Type` to `FILE` if you want a mapping to have a file target.
func (o ServerS3StorageOptionsPtrOutput) DirectoryListingOptimization() ServerDirectoryListingOptimizationPtrOutput {
	return o.ApplyT(func(v *ServerS3StorageOptions) *ServerDirectoryListingOptimization {
		if v == nil {
			return nil
		}
		return v.DirectoryListingOptimization
	}).(ServerDirectoryListingOptimizationPtrOutput)
}

type ServerTag struct {
	// The name assigned to the tag that you create.
	Key string `pulumi:"key"`
	// Contains one or more values that you assigned to the key name you create.
	Value string `pulumi:"value"`
}

type ServerWorkflowDetail struct {
	// Includes the necessary permissions for S3, EFS, and Lambda operations that Transfer can assume, so that all workflow steps can operate on the required resources
	ExecutionRole string `pulumi:"executionRole"`
	// A unique identifier for the workflow.
	WorkflowId string `pulumi:"workflowId"`
}

// ServerWorkflowDetailInput is an input type that accepts ServerWorkflowDetailArgs and ServerWorkflowDetailOutput values.
// You can construct a concrete instance of `ServerWorkflowDetailInput` via:
//
//	ServerWorkflowDetailArgs{...}
type ServerWorkflowDetailInput interface {
	pulumi.Input

	ToServerWorkflowDetailOutput() ServerWorkflowDetailOutput
	ToServerWorkflowDetailOutputWithContext(context.Context) ServerWorkflowDetailOutput
}

type ServerWorkflowDetailArgs struct {
	// Includes the necessary permissions for S3, EFS, and Lambda operations that Transfer can assume, so that all workflow steps can operate on the required resources
	ExecutionRole pulumi.StringInput `pulumi:"executionRole"`
	// A unique identifier for the workflow.
	WorkflowId pulumi.StringInput `pulumi:"workflowId"`
}

func (ServerWorkflowDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerWorkflowDetail)(nil)).Elem()
}

func (i ServerWorkflowDetailArgs) ToServerWorkflowDetailOutput() ServerWorkflowDetailOutput {
	return i.ToServerWorkflowDetailOutputWithContext(context.Background())
}

func (i ServerWorkflowDetailArgs) ToServerWorkflowDetailOutputWithContext(ctx context.Context) ServerWorkflowDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerWorkflowDetailOutput)
}

// ServerWorkflowDetailArrayInput is an input type that accepts ServerWorkflowDetailArray and ServerWorkflowDetailArrayOutput values.
// You can construct a concrete instance of `ServerWorkflowDetailArrayInput` via:
//
//	ServerWorkflowDetailArray{ ServerWorkflowDetailArgs{...} }
type ServerWorkflowDetailArrayInput interface {
	pulumi.Input

	ToServerWorkflowDetailArrayOutput() ServerWorkflowDetailArrayOutput
	ToServerWorkflowDetailArrayOutputWithContext(context.Context) ServerWorkflowDetailArrayOutput
}

type ServerWorkflowDetailArray []ServerWorkflowDetailInput

func (ServerWorkflowDetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerWorkflowDetail)(nil)).Elem()
}

func (i ServerWorkflowDetailArray) ToServerWorkflowDetailArrayOutput() ServerWorkflowDetailArrayOutput {
	return i.ToServerWorkflowDetailArrayOutputWithContext(context.Background())
}

func (i ServerWorkflowDetailArray) ToServerWorkflowDetailArrayOutputWithContext(ctx context.Context) ServerWorkflowDetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerWorkflowDetailArrayOutput)
}

type ServerWorkflowDetailOutput struct{ *pulumi.OutputState }

func (ServerWorkflowDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerWorkflowDetail)(nil)).Elem()
}

func (o ServerWorkflowDetailOutput) ToServerWorkflowDetailOutput() ServerWorkflowDetailOutput {
	return o
}

func (o ServerWorkflowDetailOutput) ToServerWorkflowDetailOutputWithContext(ctx context.Context) ServerWorkflowDetailOutput {
	return o
}

// Includes the necessary permissions for S3, EFS, and Lambda operations that Transfer can assume, so that all workflow steps can operate on the required resources
func (o ServerWorkflowDetailOutput) ExecutionRole() pulumi.StringOutput {
	return o.ApplyT(func(v ServerWorkflowDetail) string { return v.ExecutionRole }).(pulumi.StringOutput)
}

// A unique identifier for the workflow.
func (o ServerWorkflowDetailOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v ServerWorkflowDetail) string { return v.WorkflowId }).(pulumi.StringOutput)
}

type ServerWorkflowDetailArrayOutput struct{ *pulumi.OutputState }

func (ServerWorkflowDetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerWorkflowDetail)(nil)).Elem()
}

func (o ServerWorkflowDetailArrayOutput) ToServerWorkflowDetailArrayOutput() ServerWorkflowDetailArrayOutput {
	return o
}

func (o ServerWorkflowDetailArrayOutput) ToServerWorkflowDetailArrayOutputWithContext(ctx context.Context) ServerWorkflowDetailArrayOutput {
	return o
}

func (o ServerWorkflowDetailArrayOutput) Index(i pulumi.IntInput) ServerWorkflowDetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerWorkflowDetail {
		return vs[0].([]ServerWorkflowDetail)[vs[1].(int)]
	}).(ServerWorkflowDetailOutput)
}

type ServerWorkflowDetails struct {
	// A trigger that starts a workflow if a file is only partially uploaded. You can attach a workflow to a server that executes whenever there is a partial upload.
	//
	// A *partial upload* occurs when a file is open when the session disconnects.
	//
	// > `OnPartialUpload` can contain a maximum of one `WorkflowDetail` object.
	OnPartialUpload []ServerWorkflowDetail `pulumi:"onPartialUpload"`
	// A trigger that starts a workflow: the workflow begins to execute after a file is uploaded.
	//
	// To remove an associated workflow from a server, you can provide an empty `OnUpload` object, as in the following example.
	//
	// `aws transfer update-server --server-id s-01234567890abcdef --workflow-details '{"OnUpload":[]}'`
	//
	// > `OnUpload` can contain a maximum of one `WorkflowDetail` object.
	OnUpload []ServerWorkflowDetail `pulumi:"onUpload"`
}

// ServerWorkflowDetailsInput is an input type that accepts ServerWorkflowDetailsArgs and ServerWorkflowDetailsOutput values.
// You can construct a concrete instance of `ServerWorkflowDetailsInput` via:
//
//	ServerWorkflowDetailsArgs{...}
type ServerWorkflowDetailsInput interface {
	pulumi.Input

	ToServerWorkflowDetailsOutput() ServerWorkflowDetailsOutput
	ToServerWorkflowDetailsOutputWithContext(context.Context) ServerWorkflowDetailsOutput
}

type ServerWorkflowDetailsArgs struct {
	// A trigger that starts a workflow if a file is only partially uploaded. You can attach a workflow to a server that executes whenever there is a partial upload.
	//
	// A *partial upload* occurs when a file is open when the session disconnects.
	//
	// > `OnPartialUpload` can contain a maximum of one `WorkflowDetail` object.
	OnPartialUpload ServerWorkflowDetailArrayInput `pulumi:"onPartialUpload"`
	// A trigger that starts a workflow: the workflow begins to execute after a file is uploaded.
	//
	// To remove an associated workflow from a server, you can provide an empty `OnUpload` object, as in the following example.
	//
	// `aws transfer update-server --server-id s-01234567890abcdef --workflow-details '{"OnUpload":[]}'`
	//
	// > `OnUpload` can contain a maximum of one `WorkflowDetail` object.
	OnUpload ServerWorkflowDetailArrayInput `pulumi:"onUpload"`
}

func (ServerWorkflowDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerWorkflowDetails)(nil)).Elem()
}

func (i ServerWorkflowDetailsArgs) ToServerWorkflowDetailsOutput() ServerWorkflowDetailsOutput {
	return i.ToServerWorkflowDetailsOutputWithContext(context.Background())
}

func (i ServerWorkflowDetailsArgs) ToServerWorkflowDetailsOutputWithContext(ctx context.Context) ServerWorkflowDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerWorkflowDetailsOutput)
}

func (i ServerWorkflowDetailsArgs) ToServerWorkflowDetailsPtrOutput() ServerWorkflowDetailsPtrOutput {
	return i.ToServerWorkflowDetailsPtrOutputWithContext(context.Background())
}

func (i ServerWorkflowDetailsArgs) ToServerWorkflowDetailsPtrOutputWithContext(ctx context.Context) ServerWorkflowDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerWorkflowDetailsOutput).ToServerWorkflowDetailsPtrOutputWithContext(ctx)
}

// ServerWorkflowDetailsPtrInput is an input type that accepts ServerWorkflowDetailsArgs, ServerWorkflowDetailsPtr and ServerWorkflowDetailsPtrOutput values.
// You can construct a concrete instance of `ServerWorkflowDetailsPtrInput` via:
//
//	        ServerWorkflowDetailsArgs{...}
//
//	or:
//
//	        nil
type ServerWorkflowDetailsPtrInput interface {
	pulumi.Input

	ToServerWorkflowDetailsPtrOutput() ServerWorkflowDetailsPtrOutput
	ToServerWorkflowDetailsPtrOutputWithContext(context.Context) ServerWorkflowDetailsPtrOutput
}

type serverWorkflowDetailsPtrType ServerWorkflowDetailsArgs

func ServerWorkflowDetailsPtr(v *ServerWorkflowDetailsArgs) ServerWorkflowDetailsPtrInput {
	return (*serverWorkflowDetailsPtrType)(v)
}

func (*serverWorkflowDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerWorkflowDetails)(nil)).Elem()
}

func (i *serverWorkflowDetailsPtrType) ToServerWorkflowDetailsPtrOutput() ServerWorkflowDetailsPtrOutput {
	return i.ToServerWorkflowDetailsPtrOutputWithContext(context.Background())
}

func (i *serverWorkflowDetailsPtrType) ToServerWorkflowDetailsPtrOutputWithContext(ctx context.Context) ServerWorkflowDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerWorkflowDetailsPtrOutput)
}

type ServerWorkflowDetailsOutput struct{ *pulumi.OutputState }

func (ServerWorkflowDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerWorkflowDetails)(nil)).Elem()
}

func (o ServerWorkflowDetailsOutput) ToServerWorkflowDetailsOutput() ServerWorkflowDetailsOutput {
	return o
}

func (o ServerWorkflowDetailsOutput) ToServerWorkflowDetailsOutputWithContext(ctx context.Context) ServerWorkflowDetailsOutput {
	return o
}

func (o ServerWorkflowDetailsOutput) ToServerWorkflowDetailsPtrOutput() ServerWorkflowDetailsPtrOutput {
	return o.ToServerWorkflowDetailsPtrOutputWithContext(context.Background())
}

func (o ServerWorkflowDetailsOutput) ToServerWorkflowDetailsPtrOutputWithContext(ctx context.Context) ServerWorkflowDetailsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServerWorkflowDetails) *ServerWorkflowDetails {
		return &v
	}).(ServerWorkflowDetailsPtrOutput)
}

// A trigger that starts a workflow if a file is only partially uploaded. You can attach a workflow to a server that executes whenever there is a partial upload.
//
// A *partial upload* occurs when a file is open when the session disconnects.
//
// > `OnPartialUpload` can contain a maximum of one `WorkflowDetail` object.
func (o ServerWorkflowDetailsOutput) OnPartialUpload() ServerWorkflowDetailArrayOutput {
	return o.ApplyT(func(v ServerWorkflowDetails) []ServerWorkflowDetail { return v.OnPartialUpload }).(ServerWorkflowDetailArrayOutput)
}

// A trigger that starts a workflow: the workflow begins to execute after a file is uploaded.
//
// To remove an associated workflow from a server, you can provide an empty `OnUpload` object, as in the following example.
//
// `aws transfer update-server --server-id s-01234567890abcdef --workflow-details '{"OnUpload":[]}'`
//
// > `OnUpload` can contain a maximum of one `WorkflowDetail` object.
func (o ServerWorkflowDetailsOutput) OnUpload() ServerWorkflowDetailArrayOutput {
	return o.ApplyT(func(v ServerWorkflowDetails) []ServerWorkflowDetail { return v.OnUpload }).(ServerWorkflowDetailArrayOutput)
}

type ServerWorkflowDetailsPtrOutput struct{ *pulumi.OutputState }

func (ServerWorkflowDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerWorkflowDetails)(nil)).Elem()
}

func (o ServerWorkflowDetailsPtrOutput) ToServerWorkflowDetailsPtrOutput() ServerWorkflowDetailsPtrOutput {
	return o
}

func (o ServerWorkflowDetailsPtrOutput) ToServerWorkflowDetailsPtrOutputWithContext(ctx context.Context) ServerWorkflowDetailsPtrOutput {
	return o
}

func (o ServerWorkflowDetailsPtrOutput) Elem() ServerWorkflowDetailsOutput {
	return o.ApplyT(func(v *ServerWorkflowDetails) ServerWorkflowDetails {
		if v != nil {
			return *v
		}
		var ret ServerWorkflowDetails
		return ret
	}).(ServerWorkflowDetailsOutput)
}

// A trigger that starts a workflow if a file is only partially uploaded. You can attach a workflow to a server that executes whenever there is a partial upload.
//
// A *partial upload* occurs when a file is open when the session disconnects.
//
// > `OnPartialUpload` can contain a maximum of one `WorkflowDetail` object.
func (o ServerWorkflowDetailsPtrOutput) OnPartialUpload() ServerWorkflowDetailArrayOutput {
	return o.ApplyT(func(v *ServerWorkflowDetails) []ServerWorkflowDetail {
		if v == nil {
			return nil
		}
		return v.OnPartialUpload
	}).(ServerWorkflowDetailArrayOutput)
}

// A trigger that starts a workflow: the workflow begins to execute after a file is uploaded.
//
// To remove an associated workflow from a server, you can provide an empty `OnUpload` object, as in the following example.
//
// `aws transfer update-server --server-id s-01234567890abcdef --workflow-details '{"OnUpload":[]}'`
//
// > `OnUpload` can contain a maximum of one `WorkflowDetail` object.
func (o ServerWorkflowDetailsPtrOutput) OnUpload() ServerWorkflowDetailArrayOutput {
	return o.ApplyT(func(v *ServerWorkflowDetails) []ServerWorkflowDetail {
		if v == nil {
			return nil
		}
		return v.OnUpload
	}).(ServerWorkflowDetailArrayOutput)
}

// Configuration for an SFTP connector.
type SftpConfigProperties struct {
	// Specifies the number of active connections that your connector can establish with the remote server at the same time.
	MaxConcurrentConnections *int `pulumi:"maxConcurrentConnections"`
	// List of public host keys, for the external server to which you are connecting.
	TrustedHostKeys []string `pulumi:"trustedHostKeys"`
	// ARN or name of the secret in AWS Secrets Manager which contains the SFTP user's private keys or passwords.
	UserSecretId *string `pulumi:"userSecretId"`
}

// SftpConfigPropertiesInput is an input type that accepts SftpConfigPropertiesArgs and SftpConfigPropertiesOutput values.
// You can construct a concrete instance of `SftpConfigPropertiesInput` via:
//
//	SftpConfigPropertiesArgs{...}
type SftpConfigPropertiesInput interface {
	pulumi.Input

	ToSftpConfigPropertiesOutput() SftpConfigPropertiesOutput
	ToSftpConfigPropertiesOutputWithContext(context.Context) SftpConfigPropertiesOutput
}

// Configuration for an SFTP connector.
type SftpConfigPropertiesArgs struct {
	// Specifies the number of active connections that your connector can establish with the remote server at the same time.
	MaxConcurrentConnections pulumi.IntPtrInput `pulumi:"maxConcurrentConnections"`
	// List of public host keys, for the external server to which you are connecting.
	TrustedHostKeys pulumi.StringArrayInput `pulumi:"trustedHostKeys"`
	// ARN or name of the secret in AWS Secrets Manager which contains the SFTP user's private keys or passwords.
	UserSecretId pulumi.StringPtrInput `pulumi:"userSecretId"`
}

func (SftpConfigPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SftpConfigProperties)(nil)).Elem()
}

func (i SftpConfigPropertiesArgs) ToSftpConfigPropertiesOutput() SftpConfigPropertiesOutput {
	return i.ToSftpConfigPropertiesOutputWithContext(context.Background())
}

func (i SftpConfigPropertiesArgs) ToSftpConfigPropertiesOutputWithContext(ctx context.Context) SftpConfigPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SftpConfigPropertiesOutput)
}

func (i SftpConfigPropertiesArgs) ToSftpConfigPropertiesPtrOutput() SftpConfigPropertiesPtrOutput {
	return i.ToSftpConfigPropertiesPtrOutputWithContext(context.Background())
}

func (i SftpConfigPropertiesArgs) ToSftpConfigPropertiesPtrOutputWithContext(ctx context.Context) SftpConfigPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SftpConfigPropertiesOutput).ToSftpConfigPropertiesPtrOutputWithContext(ctx)
}

// SftpConfigPropertiesPtrInput is an input type that accepts SftpConfigPropertiesArgs, SftpConfigPropertiesPtr and SftpConfigPropertiesPtrOutput values.
// You can construct a concrete instance of `SftpConfigPropertiesPtrInput` via:
//
//	        SftpConfigPropertiesArgs{...}
//
//	or:
//
//	        nil
type SftpConfigPropertiesPtrInput interface {
	pulumi.Input

	ToSftpConfigPropertiesPtrOutput() SftpConfigPropertiesPtrOutput
	ToSftpConfigPropertiesPtrOutputWithContext(context.Context) SftpConfigPropertiesPtrOutput
}

type sftpConfigPropertiesPtrType SftpConfigPropertiesArgs

func SftpConfigPropertiesPtr(v *SftpConfigPropertiesArgs) SftpConfigPropertiesPtrInput {
	return (*sftpConfigPropertiesPtrType)(v)
}

func (*sftpConfigPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SftpConfigProperties)(nil)).Elem()
}

func (i *sftpConfigPropertiesPtrType) ToSftpConfigPropertiesPtrOutput() SftpConfigPropertiesPtrOutput {
	return i.ToSftpConfigPropertiesPtrOutputWithContext(context.Background())
}

func (i *sftpConfigPropertiesPtrType) ToSftpConfigPropertiesPtrOutputWithContext(ctx context.Context) SftpConfigPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SftpConfigPropertiesPtrOutput)
}

// Configuration for an SFTP connector.
type SftpConfigPropertiesOutput struct{ *pulumi.OutputState }

func (SftpConfigPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SftpConfigProperties)(nil)).Elem()
}

func (o SftpConfigPropertiesOutput) ToSftpConfigPropertiesOutput() SftpConfigPropertiesOutput {
	return o
}

func (o SftpConfigPropertiesOutput) ToSftpConfigPropertiesOutputWithContext(ctx context.Context) SftpConfigPropertiesOutput {
	return o
}

func (o SftpConfigPropertiesOutput) ToSftpConfigPropertiesPtrOutput() SftpConfigPropertiesPtrOutput {
	return o.ToSftpConfigPropertiesPtrOutputWithContext(context.Background())
}

func (o SftpConfigPropertiesOutput) ToSftpConfigPropertiesPtrOutputWithContext(ctx context.Context) SftpConfigPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SftpConfigProperties) *SftpConfigProperties {
		return &v
	}).(SftpConfigPropertiesPtrOutput)
}

// Specifies the number of active connections that your connector can establish with the remote server at the same time.
func (o SftpConfigPropertiesOutput) MaxConcurrentConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SftpConfigProperties) *int { return v.MaxConcurrentConnections }).(pulumi.IntPtrOutput)
}

// List of public host keys, for the external server to which you are connecting.
func (o SftpConfigPropertiesOutput) TrustedHostKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SftpConfigProperties) []string { return v.TrustedHostKeys }).(pulumi.StringArrayOutput)
}

// ARN or name of the secret in AWS Secrets Manager which contains the SFTP user's private keys or passwords.
func (o SftpConfigPropertiesOutput) UserSecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SftpConfigProperties) *string { return v.UserSecretId }).(pulumi.StringPtrOutput)
}

type SftpConfigPropertiesPtrOutput struct{ *pulumi.OutputState }

func (SftpConfigPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SftpConfigProperties)(nil)).Elem()
}

func (o SftpConfigPropertiesPtrOutput) ToSftpConfigPropertiesPtrOutput() SftpConfigPropertiesPtrOutput {
	return o
}

func (o SftpConfigPropertiesPtrOutput) ToSftpConfigPropertiesPtrOutputWithContext(ctx context.Context) SftpConfigPropertiesPtrOutput {
	return o
}

func (o SftpConfigPropertiesPtrOutput) Elem() SftpConfigPropertiesOutput {
	return o.ApplyT(func(v *SftpConfigProperties) SftpConfigProperties {
		if v != nil {
			return *v
		}
		var ret SftpConfigProperties
		return ret
	}).(SftpConfigPropertiesOutput)
}

// Specifies the number of active connections that your connector can establish with the remote server at the same time.
func (o SftpConfigPropertiesPtrOutput) MaxConcurrentConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SftpConfigProperties) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentConnections
	}).(pulumi.IntPtrOutput)
}

// List of public host keys, for the external server to which you are connecting.
func (o SftpConfigPropertiesPtrOutput) TrustedHostKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SftpConfigProperties) []string {
		if v == nil {
			return nil
		}
		return v.TrustedHostKeys
	}).(pulumi.StringArrayOutput)
}

// ARN or name of the secret in AWS Secrets Manager which contains the SFTP user's private keys or passwords.
func (o SftpConfigPropertiesPtrOutput) UserSecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SftpConfigProperties) *string {
		if v == nil {
			return nil
		}
		return v.UserSecretId
	}).(pulumi.StringPtrOutput)
}

type UserHomeDirectoryMapEntry struct {
	// Represents an entry for `HomeDirectoryMappings` .
	Entry string `pulumi:"entry"`
	// Represents the map target that is used in a `HomeDirectoryMapEntry` .
	Target string `pulumi:"target"`
	// Specifies the type of mapping. Set the type to `FILE` if you want the mapping to point to a file, or `DIRECTORY` for the directory to point to a directory.
	//
	// > By default, home directory mappings have a `Type` of `DIRECTORY` when you create a Transfer Family server. You would need to explicitly set `Type` to `FILE` if you want a mapping to have a file target.
	Type *UserMapType `pulumi:"type"`
}

// UserHomeDirectoryMapEntryInput is an input type that accepts UserHomeDirectoryMapEntryArgs and UserHomeDirectoryMapEntryOutput values.
// You can construct a concrete instance of `UserHomeDirectoryMapEntryInput` via:
//
//	UserHomeDirectoryMapEntryArgs{...}
type UserHomeDirectoryMapEntryInput interface {
	pulumi.Input

	ToUserHomeDirectoryMapEntryOutput() UserHomeDirectoryMapEntryOutput
	ToUserHomeDirectoryMapEntryOutputWithContext(context.Context) UserHomeDirectoryMapEntryOutput
}

type UserHomeDirectoryMapEntryArgs struct {
	// Represents an entry for `HomeDirectoryMappings` .
	Entry pulumi.StringInput `pulumi:"entry"`
	// Represents the map target that is used in a `HomeDirectoryMapEntry` .
	Target pulumi.StringInput `pulumi:"target"`
	// Specifies the type of mapping. Set the type to `FILE` if you want the mapping to point to a file, or `DIRECTORY` for the directory to point to a directory.
	//
	// > By default, home directory mappings have a `Type` of `DIRECTORY` when you create a Transfer Family server. You would need to explicitly set `Type` to `FILE` if you want a mapping to have a file target.
	Type UserMapTypePtrInput `pulumi:"type"`
}

func (UserHomeDirectoryMapEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserHomeDirectoryMapEntry)(nil)).Elem()
}

func (i UserHomeDirectoryMapEntryArgs) ToUserHomeDirectoryMapEntryOutput() UserHomeDirectoryMapEntryOutput {
	return i.ToUserHomeDirectoryMapEntryOutputWithContext(context.Background())
}

func (i UserHomeDirectoryMapEntryArgs) ToUserHomeDirectoryMapEntryOutputWithContext(ctx context.Context) UserHomeDirectoryMapEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserHomeDirectoryMapEntryOutput)
}

// UserHomeDirectoryMapEntryArrayInput is an input type that accepts UserHomeDirectoryMapEntryArray and UserHomeDirectoryMapEntryArrayOutput values.
// You can construct a concrete instance of `UserHomeDirectoryMapEntryArrayInput` via:
//
//	UserHomeDirectoryMapEntryArray{ UserHomeDirectoryMapEntryArgs{...} }
type UserHomeDirectoryMapEntryArrayInput interface {
	pulumi.Input

	ToUserHomeDirectoryMapEntryArrayOutput() UserHomeDirectoryMapEntryArrayOutput
	ToUserHomeDirectoryMapEntryArrayOutputWithContext(context.Context) UserHomeDirectoryMapEntryArrayOutput
}

type UserHomeDirectoryMapEntryArray []UserHomeDirectoryMapEntryInput

func (UserHomeDirectoryMapEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserHomeDirectoryMapEntry)(nil)).Elem()
}

func (i UserHomeDirectoryMapEntryArray) ToUserHomeDirectoryMapEntryArrayOutput() UserHomeDirectoryMapEntryArrayOutput {
	return i.ToUserHomeDirectoryMapEntryArrayOutputWithContext(context.Background())
}

func (i UserHomeDirectoryMapEntryArray) ToUserHomeDirectoryMapEntryArrayOutputWithContext(ctx context.Context) UserHomeDirectoryMapEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserHomeDirectoryMapEntryArrayOutput)
}

type UserHomeDirectoryMapEntryOutput struct{ *pulumi.OutputState }

func (UserHomeDirectoryMapEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserHomeDirectoryMapEntry)(nil)).Elem()
}

func (o UserHomeDirectoryMapEntryOutput) ToUserHomeDirectoryMapEntryOutput() UserHomeDirectoryMapEntryOutput {
	return o
}

func (o UserHomeDirectoryMapEntryOutput) ToUserHomeDirectoryMapEntryOutputWithContext(ctx context.Context) UserHomeDirectoryMapEntryOutput {
	return o
}

// Represents an entry for `HomeDirectoryMappings` .
func (o UserHomeDirectoryMapEntryOutput) Entry() pulumi.StringOutput {
	return o.ApplyT(func(v UserHomeDirectoryMapEntry) string { return v.Entry }).(pulumi.StringOutput)
}

// Represents the map target that is used in a `HomeDirectoryMapEntry` .
func (o UserHomeDirectoryMapEntryOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v UserHomeDirectoryMapEntry) string { return v.Target }).(pulumi.StringOutput)
}

// Specifies the type of mapping. Set the type to `FILE` if you want the mapping to point to a file, or `DIRECTORY` for the directory to point to a directory.
//
// > By default, home directory mappings have a `Type` of `DIRECTORY` when you create a Transfer Family server. You would need to explicitly set `Type` to `FILE` if you want a mapping to have a file target.
func (o UserHomeDirectoryMapEntryOutput) Type() UserMapTypePtrOutput {
	return o.ApplyT(func(v UserHomeDirectoryMapEntry) *UserMapType { return v.Type }).(UserMapTypePtrOutput)
}

type UserHomeDirectoryMapEntryArrayOutput struct{ *pulumi.OutputState }

func (UserHomeDirectoryMapEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserHomeDirectoryMapEntry)(nil)).Elem()
}

func (o UserHomeDirectoryMapEntryArrayOutput) ToUserHomeDirectoryMapEntryArrayOutput() UserHomeDirectoryMapEntryArrayOutput {
	return o
}

func (o UserHomeDirectoryMapEntryArrayOutput) ToUserHomeDirectoryMapEntryArrayOutputWithContext(ctx context.Context) UserHomeDirectoryMapEntryArrayOutput {
	return o
}

func (o UserHomeDirectoryMapEntryArrayOutput) Index(i pulumi.IntInput) UserHomeDirectoryMapEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserHomeDirectoryMapEntry {
		return vs[0].([]UserHomeDirectoryMapEntry)[vs[1].(int)]
	}).(UserHomeDirectoryMapEntryOutput)
}

type UserPosixProfile struct {
	// The POSIX group ID used for all EFS operations by this user.
	Gid float64 `pulumi:"gid"`
	// The secondary POSIX group IDs used for all EFS operations by this user.
	SecondaryGids []float64 `pulumi:"secondaryGids"`
	// The POSIX user ID used for all EFS operations by this user.
	Uid float64 `pulumi:"uid"`
}

// UserPosixProfileInput is an input type that accepts UserPosixProfileArgs and UserPosixProfileOutput values.
// You can construct a concrete instance of `UserPosixProfileInput` via:
//
//	UserPosixProfileArgs{...}
type UserPosixProfileInput interface {
	pulumi.Input

	ToUserPosixProfileOutput() UserPosixProfileOutput
	ToUserPosixProfileOutputWithContext(context.Context) UserPosixProfileOutput
}

type UserPosixProfileArgs struct {
	// The POSIX group ID used for all EFS operations by this user.
	Gid pulumi.Float64Input `pulumi:"gid"`
	// The secondary POSIX group IDs used for all EFS operations by this user.
	SecondaryGids pulumi.Float64ArrayInput `pulumi:"secondaryGids"`
	// The POSIX user ID used for all EFS operations by this user.
	Uid pulumi.Float64Input `pulumi:"uid"`
}

func (UserPosixProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPosixProfile)(nil)).Elem()
}

func (i UserPosixProfileArgs) ToUserPosixProfileOutput() UserPosixProfileOutput {
	return i.ToUserPosixProfileOutputWithContext(context.Background())
}

func (i UserPosixProfileArgs) ToUserPosixProfileOutputWithContext(ctx context.Context) UserPosixProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPosixProfileOutput)
}

func (i UserPosixProfileArgs) ToUserPosixProfilePtrOutput() UserPosixProfilePtrOutput {
	return i.ToUserPosixProfilePtrOutputWithContext(context.Background())
}

func (i UserPosixProfileArgs) ToUserPosixProfilePtrOutputWithContext(ctx context.Context) UserPosixProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPosixProfileOutput).ToUserPosixProfilePtrOutputWithContext(ctx)
}

// UserPosixProfilePtrInput is an input type that accepts UserPosixProfileArgs, UserPosixProfilePtr and UserPosixProfilePtrOutput values.
// You can construct a concrete instance of `UserPosixProfilePtrInput` via:
//
//	        UserPosixProfileArgs{...}
//
//	or:
//
//	        nil
type UserPosixProfilePtrInput interface {
	pulumi.Input

	ToUserPosixProfilePtrOutput() UserPosixProfilePtrOutput
	ToUserPosixProfilePtrOutputWithContext(context.Context) UserPosixProfilePtrOutput
}

type userPosixProfilePtrType UserPosixProfileArgs

func UserPosixProfilePtr(v *UserPosixProfileArgs) UserPosixProfilePtrInput {
	return (*userPosixProfilePtrType)(v)
}

func (*userPosixProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserPosixProfile)(nil)).Elem()
}

func (i *userPosixProfilePtrType) ToUserPosixProfilePtrOutput() UserPosixProfilePtrOutput {
	return i.ToUserPosixProfilePtrOutputWithContext(context.Background())
}

func (i *userPosixProfilePtrType) ToUserPosixProfilePtrOutputWithContext(ctx context.Context) UserPosixProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPosixProfilePtrOutput)
}

type UserPosixProfileOutput struct{ *pulumi.OutputState }

func (UserPosixProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPosixProfile)(nil)).Elem()
}

func (o UserPosixProfileOutput) ToUserPosixProfileOutput() UserPosixProfileOutput {
	return o
}

func (o UserPosixProfileOutput) ToUserPosixProfileOutputWithContext(ctx context.Context) UserPosixProfileOutput {
	return o
}

func (o UserPosixProfileOutput) ToUserPosixProfilePtrOutput() UserPosixProfilePtrOutput {
	return o.ToUserPosixProfilePtrOutputWithContext(context.Background())
}

func (o UserPosixProfileOutput) ToUserPosixProfilePtrOutputWithContext(ctx context.Context) UserPosixProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserPosixProfile) *UserPosixProfile {
		return &v
	}).(UserPosixProfilePtrOutput)
}

// The POSIX group ID used for all EFS operations by this user.
func (o UserPosixProfileOutput) Gid() pulumi.Float64Output {
	return o.ApplyT(func(v UserPosixProfile) float64 { return v.Gid }).(pulumi.Float64Output)
}

// The secondary POSIX group IDs used for all EFS operations by this user.
func (o UserPosixProfileOutput) SecondaryGids() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v UserPosixProfile) []float64 { return v.SecondaryGids }).(pulumi.Float64ArrayOutput)
}

// The POSIX user ID used for all EFS operations by this user.
func (o UserPosixProfileOutput) Uid() pulumi.Float64Output {
	return o.ApplyT(func(v UserPosixProfile) float64 { return v.Uid }).(pulumi.Float64Output)
}

type UserPosixProfilePtrOutput struct{ *pulumi.OutputState }

func (UserPosixProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserPosixProfile)(nil)).Elem()
}

func (o UserPosixProfilePtrOutput) ToUserPosixProfilePtrOutput() UserPosixProfilePtrOutput {
	return o
}

func (o UserPosixProfilePtrOutput) ToUserPosixProfilePtrOutputWithContext(ctx context.Context) UserPosixProfilePtrOutput {
	return o
}

func (o UserPosixProfilePtrOutput) Elem() UserPosixProfileOutput {
	return o.ApplyT(func(v *UserPosixProfile) UserPosixProfile {
		if v != nil {
			return *v
		}
		var ret UserPosixProfile
		return ret
	}).(UserPosixProfileOutput)
}

// The POSIX group ID used for all EFS operations by this user.
func (o UserPosixProfilePtrOutput) Gid() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *UserPosixProfile) *float64 {
		if v == nil {
			return nil
		}
		return &v.Gid
	}).(pulumi.Float64PtrOutput)
}

// The secondary POSIX group IDs used for all EFS operations by this user.
func (o UserPosixProfilePtrOutput) SecondaryGids() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v *UserPosixProfile) []float64 {
		if v == nil {
			return nil
		}
		return v.SecondaryGids
	}).(pulumi.Float64ArrayOutput)
}

// The POSIX user ID used for all EFS operations by this user.
func (o UserPosixProfilePtrOutput) Uid() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *UserPosixProfile) *float64 {
		if v == nil {
			return nil
		}
		return &v.Uid
	}).(pulumi.Float64PtrOutput)
}

type UserTag struct {
	// The name assigned to the tag that you create.
	Key string `pulumi:"key"`
	// Contains one or more values that you assigned to the key name you create.
	Value string `pulumi:"value"`
}

type WebAppCustomization struct {
	// Specifies a favicon to display in the browser tab.
	FaviconFile *string `pulumi:"faviconFile"`
	// Specifies a logo to display on the web app.
	LogoFile *string `pulumi:"logoFile"`
	// Specifies a title to display on the web app.
	Title *string `pulumi:"title"`
}

// WebAppCustomizationInput is an input type that accepts WebAppCustomizationArgs and WebAppCustomizationOutput values.
// You can construct a concrete instance of `WebAppCustomizationInput` via:
//
//	WebAppCustomizationArgs{...}
type WebAppCustomizationInput interface {
	pulumi.Input

	ToWebAppCustomizationOutput() WebAppCustomizationOutput
	ToWebAppCustomizationOutputWithContext(context.Context) WebAppCustomizationOutput
}

type WebAppCustomizationArgs struct {
	// Specifies a favicon to display in the browser tab.
	FaviconFile pulumi.StringPtrInput `pulumi:"faviconFile"`
	// Specifies a logo to display on the web app.
	LogoFile pulumi.StringPtrInput `pulumi:"logoFile"`
	// Specifies a title to display on the web app.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (WebAppCustomizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebAppCustomization)(nil)).Elem()
}

func (i WebAppCustomizationArgs) ToWebAppCustomizationOutput() WebAppCustomizationOutput {
	return i.ToWebAppCustomizationOutputWithContext(context.Background())
}

func (i WebAppCustomizationArgs) ToWebAppCustomizationOutputWithContext(ctx context.Context) WebAppCustomizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebAppCustomizationOutput)
}

func (i WebAppCustomizationArgs) ToWebAppCustomizationPtrOutput() WebAppCustomizationPtrOutput {
	return i.ToWebAppCustomizationPtrOutputWithContext(context.Background())
}

func (i WebAppCustomizationArgs) ToWebAppCustomizationPtrOutputWithContext(ctx context.Context) WebAppCustomizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebAppCustomizationOutput).ToWebAppCustomizationPtrOutputWithContext(ctx)
}

// WebAppCustomizationPtrInput is an input type that accepts WebAppCustomizationArgs, WebAppCustomizationPtr and WebAppCustomizationPtrOutput values.
// You can construct a concrete instance of `WebAppCustomizationPtrInput` via:
//
//	        WebAppCustomizationArgs{...}
//
//	or:
//
//	        nil
type WebAppCustomizationPtrInput interface {
	pulumi.Input

	ToWebAppCustomizationPtrOutput() WebAppCustomizationPtrOutput
	ToWebAppCustomizationPtrOutputWithContext(context.Context) WebAppCustomizationPtrOutput
}

type webAppCustomizationPtrType WebAppCustomizationArgs

func WebAppCustomizationPtr(v *WebAppCustomizationArgs) WebAppCustomizationPtrInput {
	return (*webAppCustomizationPtrType)(v)
}

func (*webAppCustomizationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebAppCustomization)(nil)).Elem()
}

func (i *webAppCustomizationPtrType) ToWebAppCustomizationPtrOutput() WebAppCustomizationPtrOutput {
	return i.ToWebAppCustomizationPtrOutputWithContext(context.Background())
}

func (i *webAppCustomizationPtrType) ToWebAppCustomizationPtrOutputWithContext(ctx context.Context) WebAppCustomizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebAppCustomizationPtrOutput)
}

type WebAppCustomizationOutput struct{ *pulumi.OutputState }

func (WebAppCustomizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebAppCustomization)(nil)).Elem()
}

func (o WebAppCustomizationOutput) ToWebAppCustomizationOutput() WebAppCustomizationOutput {
	return o
}

func (o WebAppCustomizationOutput) ToWebAppCustomizationOutputWithContext(ctx context.Context) WebAppCustomizationOutput {
	return o
}

func (o WebAppCustomizationOutput) ToWebAppCustomizationPtrOutput() WebAppCustomizationPtrOutput {
	return o.ToWebAppCustomizationPtrOutputWithContext(context.Background())
}

func (o WebAppCustomizationOutput) ToWebAppCustomizationPtrOutputWithContext(ctx context.Context) WebAppCustomizationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WebAppCustomization) *WebAppCustomization {
		return &v
	}).(WebAppCustomizationPtrOutput)
}

// Specifies a favicon to display in the browser tab.
func (o WebAppCustomizationOutput) FaviconFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebAppCustomization) *string { return v.FaviconFile }).(pulumi.StringPtrOutput)
}

// Specifies a logo to display on the web app.
func (o WebAppCustomizationOutput) LogoFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebAppCustomization) *string { return v.LogoFile }).(pulumi.StringPtrOutput)
}

// Specifies a title to display on the web app.
func (o WebAppCustomizationOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebAppCustomization) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type WebAppCustomizationPtrOutput struct{ *pulumi.OutputState }

func (WebAppCustomizationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebAppCustomization)(nil)).Elem()
}

func (o WebAppCustomizationPtrOutput) ToWebAppCustomizationPtrOutput() WebAppCustomizationPtrOutput {
	return o
}

func (o WebAppCustomizationPtrOutput) ToWebAppCustomizationPtrOutputWithContext(ctx context.Context) WebAppCustomizationPtrOutput {
	return o
}

func (o WebAppCustomizationPtrOutput) Elem() WebAppCustomizationOutput {
	return o.ApplyT(func(v *WebAppCustomization) WebAppCustomization {
		if v != nil {
			return *v
		}
		var ret WebAppCustomization
		return ret
	}).(WebAppCustomizationOutput)
}

// Specifies a favicon to display in the browser tab.
func (o WebAppCustomizationPtrOutput) FaviconFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebAppCustomization) *string {
		if v == nil {
			return nil
		}
		return v.FaviconFile
	}).(pulumi.StringPtrOutput)
}

// Specifies a logo to display on the web app.
func (o WebAppCustomizationPtrOutput) LogoFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebAppCustomization) *string {
		if v == nil {
			return nil
		}
		return v.LogoFile
	}).(pulumi.StringPtrOutput)
}

// Specifies a title to display on the web app.
func (o WebAppCustomizationPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebAppCustomization) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// You can provide a structure that contains the details for the identity provider to use with your web app.
type WebAppIdentityProviderDetails struct {
	// The Amazon Resource Name (ARN) for the IAM Identity Center application: this value is set automatically when you create your web app.
	ApplicationArn *string `pulumi:"applicationArn"`
	// The Amazon Resource Name (ARN) for the IAM Identity Center used for the web app.
	InstanceArn *string `pulumi:"instanceArn"`
	// The IAM role in IAM Identity Center used for the web app.
	Role *string `pulumi:"role"`
}

// WebAppIdentityProviderDetailsInput is an input type that accepts WebAppIdentityProviderDetailsArgs and WebAppIdentityProviderDetailsOutput values.
// You can construct a concrete instance of `WebAppIdentityProviderDetailsInput` via:
//
//	WebAppIdentityProviderDetailsArgs{...}
type WebAppIdentityProviderDetailsInput interface {
	pulumi.Input

	ToWebAppIdentityProviderDetailsOutput() WebAppIdentityProviderDetailsOutput
	ToWebAppIdentityProviderDetailsOutputWithContext(context.Context) WebAppIdentityProviderDetailsOutput
}

// You can provide a structure that contains the details for the identity provider to use with your web app.
type WebAppIdentityProviderDetailsArgs struct {
	// The Amazon Resource Name (ARN) for the IAM Identity Center application: this value is set automatically when you create your web app.
	ApplicationArn pulumi.StringPtrInput `pulumi:"applicationArn"`
	// The Amazon Resource Name (ARN) for the IAM Identity Center used for the web app.
	InstanceArn pulumi.StringPtrInput `pulumi:"instanceArn"`
	// The IAM role in IAM Identity Center used for the web app.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (WebAppIdentityProviderDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebAppIdentityProviderDetails)(nil)).Elem()
}

func (i WebAppIdentityProviderDetailsArgs) ToWebAppIdentityProviderDetailsOutput() WebAppIdentityProviderDetailsOutput {
	return i.ToWebAppIdentityProviderDetailsOutputWithContext(context.Background())
}

func (i WebAppIdentityProviderDetailsArgs) ToWebAppIdentityProviderDetailsOutputWithContext(ctx context.Context) WebAppIdentityProviderDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebAppIdentityProviderDetailsOutput)
}

// You can provide a structure that contains the details for the identity provider to use with your web app.
type WebAppIdentityProviderDetailsOutput struct{ *pulumi.OutputState }

func (WebAppIdentityProviderDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebAppIdentityProviderDetails)(nil)).Elem()
}

func (o WebAppIdentityProviderDetailsOutput) ToWebAppIdentityProviderDetailsOutput() WebAppIdentityProviderDetailsOutput {
	return o
}

func (o WebAppIdentityProviderDetailsOutput) ToWebAppIdentityProviderDetailsOutputWithContext(ctx context.Context) WebAppIdentityProviderDetailsOutput {
	return o
}

// The Amazon Resource Name (ARN) for the IAM Identity Center application: this value is set automatically when you create your web app.
func (o WebAppIdentityProviderDetailsOutput) ApplicationArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebAppIdentityProviderDetails) *string { return v.ApplicationArn }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) for the IAM Identity Center used for the web app.
func (o WebAppIdentityProviderDetailsOutput) InstanceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebAppIdentityProviderDetails) *string { return v.InstanceArn }).(pulumi.StringPtrOutput)
}

// The IAM role in IAM Identity Center used for the web app.
func (o WebAppIdentityProviderDetailsOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebAppIdentityProviderDetails) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type WebAppIdentityProviderDetailsPtrOutput struct{ *pulumi.OutputState }

func (WebAppIdentityProviderDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebAppIdentityProviderDetails)(nil)).Elem()
}

func (o WebAppIdentityProviderDetailsPtrOutput) ToWebAppIdentityProviderDetailsPtrOutput() WebAppIdentityProviderDetailsPtrOutput {
	return o
}

func (o WebAppIdentityProviderDetailsPtrOutput) ToWebAppIdentityProviderDetailsPtrOutputWithContext(ctx context.Context) WebAppIdentityProviderDetailsPtrOutput {
	return o
}

func (o WebAppIdentityProviderDetailsPtrOutput) Elem() WebAppIdentityProviderDetailsOutput {
	return o.ApplyT(func(v *WebAppIdentityProviderDetails) WebAppIdentityProviderDetails {
		if v != nil {
			return *v
		}
		var ret WebAppIdentityProviderDetails
		return ret
	}).(WebAppIdentityProviderDetailsOutput)
}

// The Amazon Resource Name (ARN) for the IAM Identity Center application: this value is set automatically when you create your web app.
func (o WebAppIdentityProviderDetailsPtrOutput) ApplicationArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebAppIdentityProviderDetails) *string {
		if v == nil {
			return nil
		}
		return v.ApplicationArn
	}).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) for the IAM Identity Center used for the web app.
func (o WebAppIdentityProviderDetailsPtrOutput) InstanceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebAppIdentityProviderDetails) *string {
		if v == nil {
			return nil
		}
		return v.InstanceArn
	}).(pulumi.StringPtrOutput)
}

// The IAM role in IAM Identity Center used for the web app.
func (o WebAppIdentityProviderDetailsPtrOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebAppIdentityProviderDetails) *string {
		if v == nil {
			return nil
		}
		return v.Role
	}).(pulumi.StringPtrOutput)
}

// Key-value pair that can be used to group and search for web apps.
type WebAppTag struct {
	// The name assigned to the tag that you create.
	Key string `pulumi:"key"`
	// Contains one or more values that you assigned to the key name you create.
	Value string `pulumi:"value"`
}

// A union that contains the value for number of concurrent connections or the user sessions on your web app.
type WebAppUnits0Properties struct {
	Provisioned int `pulumi:"provisioned"`
}

// A union that contains the value for number of concurrent connections or the user sessions on your web app.
type WebAppUnitsProperties struct {
	Provisioned int `pulumi:"provisioned"`
}

// WebAppUnitsPropertiesInput is an input type that accepts WebAppUnitsPropertiesArgs and WebAppUnitsPropertiesOutput values.
// You can construct a concrete instance of `WebAppUnitsPropertiesInput` via:
//
//	WebAppUnitsPropertiesArgs{...}
type WebAppUnitsPropertiesInput interface {
	pulumi.Input

	ToWebAppUnitsPropertiesOutput() WebAppUnitsPropertiesOutput
	ToWebAppUnitsPropertiesOutputWithContext(context.Context) WebAppUnitsPropertiesOutput
}

// A union that contains the value for number of concurrent connections or the user sessions on your web app.
type WebAppUnitsPropertiesArgs struct {
	Provisioned pulumi.IntInput `pulumi:"provisioned"`
}

func (WebAppUnitsPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebAppUnitsProperties)(nil)).Elem()
}

func (i WebAppUnitsPropertiesArgs) ToWebAppUnitsPropertiesOutput() WebAppUnitsPropertiesOutput {
	return i.ToWebAppUnitsPropertiesOutputWithContext(context.Background())
}

func (i WebAppUnitsPropertiesArgs) ToWebAppUnitsPropertiesOutputWithContext(ctx context.Context) WebAppUnitsPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebAppUnitsPropertiesOutput)
}

func (i WebAppUnitsPropertiesArgs) ToWebAppUnitsPropertiesPtrOutput() WebAppUnitsPropertiesPtrOutput {
	return i.ToWebAppUnitsPropertiesPtrOutputWithContext(context.Background())
}

func (i WebAppUnitsPropertiesArgs) ToWebAppUnitsPropertiesPtrOutputWithContext(ctx context.Context) WebAppUnitsPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebAppUnitsPropertiesOutput).ToWebAppUnitsPropertiesPtrOutputWithContext(ctx)
}

// WebAppUnitsPropertiesPtrInput is an input type that accepts WebAppUnitsPropertiesArgs, WebAppUnitsPropertiesPtr and WebAppUnitsPropertiesPtrOutput values.
// You can construct a concrete instance of `WebAppUnitsPropertiesPtrInput` via:
//
//	        WebAppUnitsPropertiesArgs{...}
//
//	or:
//
//	        nil
type WebAppUnitsPropertiesPtrInput interface {
	pulumi.Input

	ToWebAppUnitsPropertiesPtrOutput() WebAppUnitsPropertiesPtrOutput
	ToWebAppUnitsPropertiesPtrOutputWithContext(context.Context) WebAppUnitsPropertiesPtrOutput
}

type webAppUnitsPropertiesPtrType WebAppUnitsPropertiesArgs

func WebAppUnitsPropertiesPtr(v *WebAppUnitsPropertiesArgs) WebAppUnitsPropertiesPtrInput {
	return (*webAppUnitsPropertiesPtrType)(v)
}

func (*webAppUnitsPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebAppUnitsProperties)(nil)).Elem()
}

func (i *webAppUnitsPropertiesPtrType) ToWebAppUnitsPropertiesPtrOutput() WebAppUnitsPropertiesPtrOutput {
	return i.ToWebAppUnitsPropertiesPtrOutputWithContext(context.Background())
}

func (i *webAppUnitsPropertiesPtrType) ToWebAppUnitsPropertiesPtrOutputWithContext(ctx context.Context) WebAppUnitsPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebAppUnitsPropertiesPtrOutput)
}

// A union that contains the value for number of concurrent connections or the user sessions on your web app.
type WebAppUnitsPropertiesOutput struct{ *pulumi.OutputState }

func (WebAppUnitsPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebAppUnitsProperties)(nil)).Elem()
}

func (o WebAppUnitsPropertiesOutput) ToWebAppUnitsPropertiesOutput() WebAppUnitsPropertiesOutput {
	return o
}

func (o WebAppUnitsPropertiesOutput) ToWebAppUnitsPropertiesOutputWithContext(ctx context.Context) WebAppUnitsPropertiesOutput {
	return o
}

func (o WebAppUnitsPropertiesOutput) ToWebAppUnitsPropertiesPtrOutput() WebAppUnitsPropertiesPtrOutput {
	return o.ToWebAppUnitsPropertiesPtrOutputWithContext(context.Background())
}

func (o WebAppUnitsPropertiesOutput) ToWebAppUnitsPropertiesPtrOutputWithContext(ctx context.Context) WebAppUnitsPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WebAppUnitsProperties) *WebAppUnitsProperties {
		return &v
	}).(WebAppUnitsPropertiesPtrOutput)
}

func (o WebAppUnitsPropertiesOutput) Provisioned() pulumi.IntOutput {
	return o.ApplyT(func(v WebAppUnitsProperties) int { return v.Provisioned }).(pulumi.IntOutput)
}

type WebAppUnitsPropertiesPtrOutput struct{ *pulumi.OutputState }

func (WebAppUnitsPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebAppUnitsProperties)(nil)).Elem()
}

func (o WebAppUnitsPropertiesPtrOutput) ToWebAppUnitsPropertiesPtrOutput() WebAppUnitsPropertiesPtrOutput {
	return o
}

func (o WebAppUnitsPropertiesPtrOutput) ToWebAppUnitsPropertiesPtrOutputWithContext(ctx context.Context) WebAppUnitsPropertiesPtrOutput {
	return o
}

func (o WebAppUnitsPropertiesPtrOutput) Elem() WebAppUnitsPropertiesOutput {
	return o.ApplyT(func(v *WebAppUnitsProperties) WebAppUnitsProperties {
		if v != nil {
			return *v
		}
		var ret WebAppUnitsProperties
		return ret
	}).(WebAppUnitsPropertiesOutput)
}

func (o WebAppUnitsPropertiesPtrOutput) Provisioned() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WebAppUnitsProperties) *int {
		if v == nil {
			return nil
		}
		return &v.Provisioned
	}).(pulumi.IntPtrOutput)
}

// Specifies the details for an EFS file.
type WorkflowEfsInputFileLocation struct {
	// Specifies the EFS filesystem that contains the file.
	FileSystemId *string `pulumi:"fileSystemId"`
	// The name assigned to the file when it was created in EFS. You use the object path to retrieve the object.
	Path *string `pulumi:"path"`
}

// WorkflowEfsInputFileLocationInput is an input type that accepts WorkflowEfsInputFileLocationArgs and WorkflowEfsInputFileLocationOutput values.
// You can construct a concrete instance of `WorkflowEfsInputFileLocationInput` via:
//
//	WorkflowEfsInputFileLocationArgs{...}
type WorkflowEfsInputFileLocationInput interface {
	pulumi.Input

	ToWorkflowEfsInputFileLocationOutput() WorkflowEfsInputFileLocationOutput
	ToWorkflowEfsInputFileLocationOutputWithContext(context.Context) WorkflowEfsInputFileLocationOutput
}

// Specifies the details for an EFS file.
type WorkflowEfsInputFileLocationArgs struct {
	// Specifies the EFS filesystem that contains the file.
	FileSystemId pulumi.StringPtrInput `pulumi:"fileSystemId"`
	// The name assigned to the file when it was created in EFS. You use the object path to retrieve the object.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (WorkflowEfsInputFileLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowEfsInputFileLocation)(nil)).Elem()
}

func (i WorkflowEfsInputFileLocationArgs) ToWorkflowEfsInputFileLocationOutput() WorkflowEfsInputFileLocationOutput {
	return i.ToWorkflowEfsInputFileLocationOutputWithContext(context.Background())
}

func (i WorkflowEfsInputFileLocationArgs) ToWorkflowEfsInputFileLocationOutputWithContext(ctx context.Context) WorkflowEfsInputFileLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowEfsInputFileLocationOutput)
}

func (i WorkflowEfsInputFileLocationArgs) ToWorkflowEfsInputFileLocationPtrOutput() WorkflowEfsInputFileLocationPtrOutput {
	return i.ToWorkflowEfsInputFileLocationPtrOutputWithContext(context.Background())
}

func (i WorkflowEfsInputFileLocationArgs) ToWorkflowEfsInputFileLocationPtrOutputWithContext(ctx context.Context) WorkflowEfsInputFileLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowEfsInputFileLocationOutput).ToWorkflowEfsInputFileLocationPtrOutputWithContext(ctx)
}

// WorkflowEfsInputFileLocationPtrInput is an input type that accepts WorkflowEfsInputFileLocationArgs, WorkflowEfsInputFileLocationPtr and WorkflowEfsInputFileLocationPtrOutput values.
// You can construct a concrete instance of `WorkflowEfsInputFileLocationPtrInput` via:
//
//	        WorkflowEfsInputFileLocationArgs{...}
//
//	or:
//
//	        nil
type WorkflowEfsInputFileLocationPtrInput interface {
	pulumi.Input

	ToWorkflowEfsInputFileLocationPtrOutput() WorkflowEfsInputFileLocationPtrOutput
	ToWorkflowEfsInputFileLocationPtrOutputWithContext(context.Context) WorkflowEfsInputFileLocationPtrOutput
}

type workflowEfsInputFileLocationPtrType WorkflowEfsInputFileLocationArgs

func WorkflowEfsInputFileLocationPtr(v *WorkflowEfsInputFileLocationArgs) WorkflowEfsInputFileLocationPtrInput {
	return (*workflowEfsInputFileLocationPtrType)(v)
}

func (*workflowEfsInputFileLocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowEfsInputFileLocation)(nil)).Elem()
}

func (i *workflowEfsInputFileLocationPtrType) ToWorkflowEfsInputFileLocationPtrOutput() WorkflowEfsInputFileLocationPtrOutput {
	return i.ToWorkflowEfsInputFileLocationPtrOutputWithContext(context.Background())
}

func (i *workflowEfsInputFileLocationPtrType) ToWorkflowEfsInputFileLocationPtrOutputWithContext(ctx context.Context) WorkflowEfsInputFileLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowEfsInputFileLocationPtrOutput)
}

// Specifies the details for an EFS file.
type WorkflowEfsInputFileLocationOutput struct{ *pulumi.OutputState }

func (WorkflowEfsInputFileLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowEfsInputFileLocation)(nil)).Elem()
}

func (o WorkflowEfsInputFileLocationOutput) ToWorkflowEfsInputFileLocationOutput() WorkflowEfsInputFileLocationOutput {
	return o
}

func (o WorkflowEfsInputFileLocationOutput) ToWorkflowEfsInputFileLocationOutputWithContext(ctx context.Context) WorkflowEfsInputFileLocationOutput {
	return o
}

func (o WorkflowEfsInputFileLocationOutput) ToWorkflowEfsInputFileLocationPtrOutput() WorkflowEfsInputFileLocationPtrOutput {
	return o.ToWorkflowEfsInputFileLocationPtrOutputWithContext(context.Background())
}

func (o WorkflowEfsInputFileLocationOutput) ToWorkflowEfsInputFileLocationPtrOutputWithContext(ctx context.Context) WorkflowEfsInputFileLocationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WorkflowEfsInputFileLocation) *WorkflowEfsInputFileLocation {
		return &v
	}).(WorkflowEfsInputFileLocationPtrOutput)
}

// Specifies the EFS filesystem that contains the file.
func (o WorkflowEfsInputFileLocationOutput) FileSystemId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkflowEfsInputFileLocation) *string { return v.FileSystemId }).(pulumi.StringPtrOutput)
}

// The name assigned to the file when it was created in EFS. You use the object path to retrieve the object.
func (o WorkflowEfsInputFileLocationOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkflowEfsInputFileLocation) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type WorkflowEfsInputFileLocationPtrOutput struct{ *pulumi.OutputState }

func (WorkflowEfsInputFileLocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowEfsInputFileLocation)(nil)).Elem()
}

func (o WorkflowEfsInputFileLocationPtrOutput) ToWorkflowEfsInputFileLocationPtrOutput() WorkflowEfsInputFileLocationPtrOutput {
	return o
}

func (o WorkflowEfsInputFileLocationPtrOutput) ToWorkflowEfsInputFileLocationPtrOutputWithContext(ctx context.Context) WorkflowEfsInputFileLocationPtrOutput {
	return o
}

func (o WorkflowEfsInputFileLocationPtrOutput) Elem() WorkflowEfsInputFileLocationOutput {
	return o.ApplyT(func(v *WorkflowEfsInputFileLocation) WorkflowEfsInputFileLocation {
		if v != nil {
			return *v
		}
		var ret WorkflowEfsInputFileLocation
		return ret
	}).(WorkflowEfsInputFileLocationOutput)
}

// Specifies the EFS filesystem that contains the file.
func (o WorkflowEfsInputFileLocationPtrOutput) FileSystemId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowEfsInputFileLocation) *string {
		if v == nil {
			return nil
		}
		return v.FileSystemId
	}).(pulumi.StringPtrOutput)
}

// The name assigned to the file when it was created in EFS. You use the object path to retrieve the object.
func (o WorkflowEfsInputFileLocationPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowEfsInputFileLocation) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Specifies the location for the file being decrypted. Only applicable for the Decrypt type of workflow steps.
type WorkflowInputFileLocation struct {
	EfsFileLocation *WorkflowEfsInputFileLocation `pulumi:"efsFileLocation"`
	S3FileLocation  *WorkflowS3InputFileLocation  `pulumi:"s3FileLocation"`
}

// WorkflowInputFileLocationInput is an input type that accepts WorkflowInputFileLocationArgs and WorkflowInputFileLocationOutput values.
// You can construct a concrete instance of `WorkflowInputFileLocationInput` via:
//
//	WorkflowInputFileLocationArgs{...}
type WorkflowInputFileLocationInput interface {
	pulumi.Input

	ToWorkflowInputFileLocationOutput() WorkflowInputFileLocationOutput
	ToWorkflowInputFileLocationOutputWithContext(context.Context) WorkflowInputFileLocationOutput
}

// Specifies the location for the file being decrypted. Only applicable for the Decrypt type of workflow steps.
type WorkflowInputFileLocationArgs struct {
	EfsFileLocation WorkflowEfsInputFileLocationPtrInput `pulumi:"efsFileLocation"`
	S3FileLocation  WorkflowS3InputFileLocationPtrInput  `pulumi:"s3FileLocation"`
}

func (WorkflowInputFileLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowInputFileLocation)(nil)).Elem()
}

func (i WorkflowInputFileLocationArgs) ToWorkflowInputFileLocationOutput() WorkflowInputFileLocationOutput {
	return i.ToWorkflowInputFileLocationOutputWithContext(context.Background())
}

func (i WorkflowInputFileLocationArgs) ToWorkflowInputFileLocationOutputWithContext(ctx context.Context) WorkflowInputFileLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowInputFileLocationOutput)
}

func (i WorkflowInputFileLocationArgs) ToWorkflowInputFileLocationPtrOutput() WorkflowInputFileLocationPtrOutput {
	return i.ToWorkflowInputFileLocationPtrOutputWithContext(context.Background())
}

func (i WorkflowInputFileLocationArgs) ToWorkflowInputFileLocationPtrOutputWithContext(ctx context.Context) WorkflowInputFileLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowInputFileLocationOutput).ToWorkflowInputFileLocationPtrOutputWithContext(ctx)
}

// WorkflowInputFileLocationPtrInput is an input type that accepts WorkflowInputFileLocationArgs, WorkflowInputFileLocationPtr and WorkflowInputFileLocationPtrOutput values.
// You can construct a concrete instance of `WorkflowInputFileLocationPtrInput` via:
//
//	        WorkflowInputFileLocationArgs{...}
//
//	or:
//
//	        nil
type WorkflowInputFileLocationPtrInput interface {
	pulumi.Input

	ToWorkflowInputFileLocationPtrOutput() WorkflowInputFileLocationPtrOutput
	ToWorkflowInputFileLocationPtrOutputWithContext(context.Context) WorkflowInputFileLocationPtrOutput
}

type workflowInputFileLocationPtrType WorkflowInputFileLocationArgs

func WorkflowInputFileLocationPtr(v *WorkflowInputFileLocationArgs) WorkflowInputFileLocationPtrInput {
	return (*workflowInputFileLocationPtrType)(v)
}

func (*workflowInputFileLocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowInputFileLocation)(nil)).Elem()
}

func (i *workflowInputFileLocationPtrType) ToWorkflowInputFileLocationPtrOutput() WorkflowInputFileLocationPtrOutput {
	return i.ToWorkflowInputFileLocationPtrOutputWithContext(context.Background())
}

func (i *workflowInputFileLocationPtrType) ToWorkflowInputFileLocationPtrOutputWithContext(ctx context.Context) WorkflowInputFileLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowInputFileLocationPtrOutput)
}

// Specifies the location for the file being decrypted. Only applicable for the Decrypt type of workflow steps.
type WorkflowInputFileLocationOutput struct{ *pulumi.OutputState }

func (WorkflowInputFileLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowInputFileLocation)(nil)).Elem()
}

func (o WorkflowInputFileLocationOutput) ToWorkflowInputFileLocationOutput() WorkflowInputFileLocationOutput {
	return o
}

func (o WorkflowInputFileLocationOutput) ToWorkflowInputFileLocationOutputWithContext(ctx context.Context) WorkflowInputFileLocationOutput {
	return o
}

func (o WorkflowInputFileLocationOutput) ToWorkflowInputFileLocationPtrOutput() WorkflowInputFileLocationPtrOutput {
	return o.ToWorkflowInputFileLocationPtrOutputWithContext(context.Background())
}

func (o WorkflowInputFileLocationOutput) ToWorkflowInputFileLocationPtrOutputWithContext(ctx context.Context) WorkflowInputFileLocationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WorkflowInputFileLocation) *WorkflowInputFileLocation {
		return &v
	}).(WorkflowInputFileLocationPtrOutput)
}

func (o WorkflowInputFileLocationOutput) EfsFileLocation() WorkflowEfsInputFileLocationPtrOutput {
	return o.ApplyT(func(v WorkflowInputFileLocation) *WorkflowEfsInputFileLocation { return v.EfsFileLocation }).(WorkflowEfsInputFileLocationPtrOutput)
}

func (o WorkflowInputFileLocationOutput) S3FileLocation() WorkflowS3InputFileLocationPtrOutput {
	return o.ApplyT(func(v WorkflowInputFileLocation) *WorkflowS3InputFileLocation { return v.S3FileLocation }).(WorkflowS3InputFileLocationPtrOutput)
}

type WorkflowInputFileLocationPtrOutput struct{ *pulumi.OutputState }

func (WorkflowInputFileLocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowInputFileLocation)(nil)).Elem()
}

func (o WorkflowInputFileLocationPtrOutput) ToWorkflowInputFileLocationPtrOutput() WorkflowInputFileLocationPtrOutput {
	return o
}

func (o WorkflowInputFileLocationPtrOutput) ToWorkflowInputFileLocationPtrOutputWithContext(ctx context.Context) WorkflowInputFileLocationPtrOutput {
	return o
}

func (o WorkflowInputFileLocationPtrOutput) Elem() WorkflowInputFileLocationOutput {
	return o.ApplyT(func(v *WorkflowInputFileLocation) WorkflowInputFileLocation {
		if v != nil {
			return *v
		}
		var ret WorkflowInputFileLocation
		return ret
	}).(WorkflowInputFileLocationOutput)
}

func (o WorkflowInputFileLocationPtrOutput) EfsFileLocation() WorkflowEfsInputFileLocationPtrOutput {
	return o.ApplyT(func(v *WorkflowInputFileLocation) *WorkflowEfsInputFileLocation {
		if v == nil {
			return nil
		}
		return v.EfsFileLocation
	}).(WorkflowEfsInputFileLocationPtrOutput)
}

func (o WorkflowInputFileLocationPtrOutput) S3FileLocation() WorkflowS3InputFileLocationPtrOutput {
	return o.ApplyT(func(v *WorkflowInputFileLocation) *WorkflowS3InputFileLocation {
		if v == nil {
			return nil
		}
		return v.S3FileLocation
	}).(WorkflowS3InputFileLocationPtrOutput)
}

// Specifies the location for the file being copied. Only applicable for the Copy type of workflow steps.
type WorkflowS3FileLocation struct {
	// Specifies the details for the file location for the file that's being used in the workflow. Only applicable if you are using Amazon S3 storage.
	S3FileLocation *WorkflowS3InputFileLocation `pulumi:"s3FileLocation"`
}

// WorkflowS3FileLocationInput is an input type that accepts WorkflowS3FileLocationArgs and WorkflowS3FileLocationOutput values.
// You can construct a concrete instance of `WorkflowS3FileLocationInput` via:
//
//	WorkflowS3FileLocationArgs{...}
type WorkflowS3FileLocationInput interface {
	pulumi.Input

	ToWorkflowS3FileLocationOutput() WorkflowS3FileLocationOutput
	ToWorkflowS3FileLocationOutputWithContext(context.Context) WorkflowS3FileLocationOutput
}

// Specifies the location for the file being copied. Only applicable for the Copy type of workflow steps.
type WorkflowS3FileLocationArgs struct {
	// Specifies the details for the file location for the file that's being used in the workflow. Only applicable if you are using Amazon S3 storage.
	S3FileLocation WorkflowS3InputFileLocationPtrInput `pulumi:"s3FileLocation"`
}

func (WorkflowS3FileLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowS3FileLocation)(nil)).Elem()
}

func (i WorkflowS3FileLocationArgs) ToWorkflowS3FileLocationOutput() WorkflowS3FileLocationOutput {
	return i.ToWorkflowS3FileLocationOutputWithContext(context.Background())
}

func (i WorkflowS3FileLocationArgs) ToWorkflowS3FileLocationOutputWithContext(ctx context.Context) WorkflowS3FileLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowS3FileLocationOutput)
}

func (i WorkflowS3FileLocationArgs) ToWorkflowS3FileLocationPtrOutput() WorkflowS3FileLocationPtrOutput {
	return i.ToWorkflowS3FileLocationPtrOutputWithContext(context.Background())
}

func (i WorkflowS3FileLocationArgs) ToWorkflowS3FileLocationPtrOutputWithContext(ctx context.Context) WorkflowS3FileLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowS3FileLocationOutput).ToWorkflowS3FileLocationPtrOutputWithContext(ctx)
}

// WorkflowS3FileLocationPtrInput is an input type that accepts WorkflowS3FileLocationArgs, WorkflowS3FileLocationPtr and WorkflowS3FileLocationPtrOutput values.
// You can construct a concrete instance of `WorkflowS3FileLocationPtrInput` via:
//
//	        WorkflowS3FileLocationArgs{...}
//
//	or:
//
//	        nil
type WorkflowS3FileLocationPtrInput interface {
	pulumi.Input

	ToWorkflowS3FileLocationPtrOutput() WorkflowS3FileLocationPtrOutput
	ToWorkflowS3FileLocationPtrOutputWithContext(context.Context) WorkflowS3FileLocationPtrOutput
}

type workflowS3FileLocationPtrType WorkflowS3FileLocationArgs

func WorkflowS3FileLocationPtr(v *WorkflowS3FileLocationArgs) WorkflowS3FileLocationPtrInput {
	return (*workflowS3FileLocationPtrType)(v)
}

func (*workflowS3FileLocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowS3FileLocation)(nil)).Elem()
}

func (i *workflowS3FileLocationPtrType) ToWorkflowS3FileLocationPtrOutput() WorkflowS3FileLocationPtrOutput {
	return i.ToWorkflowS3FileLocationPtrOutputWithContext(context.Background())
}

func (i *workflowS3FileLocationPtrType) ToWorkflowS3FileLocationPtrOutputWithContext(ctx context.Context) WorkflowS3FileLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowS3FileLocationPtrOutput)
}

// Specifies the location for the file being copied. Only applicable for the Copy type of workflow steps.
type WorkflowS3FileLocationOutput struct{ *pulumi.OutputState }

func (WorkflowS3FileLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowS3FileLocation)(nil)).Elem()
}

func (o WorkflowS3FileLocationOutput) ToWorkflowS3FileLocationOutput() WorkflowS3FileLocationOutput {
	return o
}

func (o WorkflowS3FileLocationOutput) ToWorkflowS3FileLocationOutputWithContext(ctx context.Context) WorkflowS3FileLocationOutput {
	return o
}

func (o WorkflowS3FileLocationOutput) ToWorkflowS3FileLocationPtrOutput() WorkflowS3FileLocationPtrOutput {
	return o.ToWorkflowS3FileLocationPtrOutputWithContext(context.Background())
}

func (o WorkflowS3FileLocationOutput) ToWorkflowS3FileLocationPtrOutputWithContext(ctx context.Context) WorkflowS3FileLocationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WorkflowS3FileLocation) *WorkflowS3FileLocation {
		return &v
	}).(WorkflowS3FileLocationPtrOutput)
}

// Specifies the details for the file location for the file that's being used in the workflow. Only applicable if you are using Amazon S3 storage.
func (o WorkflowS3FileLocationOutput) S3FileLocation() WorkflowS3InputFileLocationPtrOutput {
	return o.ApplyT(func(v WorkflowS3FileLocation) *WorkflowS3InputFileLocation { return v.S3FileLocation }).(WorkflowS3InputFileLocationPtrOutput)
}

type WorkflowS3FileLocationPtrOutput struct{ *pulumi.OutputState }

func (WorkflowS3FileLocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowS3FileLocation)(nil)).Elem()
}

func (o WorkflowS3FileLocationPtrOutput) ToWorkflowS3FileLocationPtrOutput() WorkflowS3FileLocationPtrOutput {
	return o
}

func (o WorkflowS3FileLocationPtrOutput) ToWorkflowS3FileLocationPtrOutputWithContext(ctx context.Context) WorkflowS3FileLocationPtrOutput {
	return o
}

func (o WorkflowS3FileLocationPtrOutput) Elem() WorkflowS3FileLocationOutput {
	return o.ApplyT(func(v *WorkflowS3FileLocation) WorkflowS3FileLocation {
		if v != nil {
			return *v
		}
		var ret WorkflowS3FileLocation
		return ret
	}).(WorkflowS3FileLocationOutput)
}

// Specifies the details for the file location for the file that's being used in the workflow. Only applicable if you are using Amazon S3 storage.
func (o WorkflowS3FileLocationPtrOutput) S3FileLocation() WorkflowS3InputFileLocationPtrOutput {
	return o.ApplyT(func(v *WorkflowS3FileLocation) *WorkflowS3InputFileLocation {
		if v == nil {
			return nil
		}
		return v.S3FileLocation
	}).(WorkflowS3InputFileLocationPtrOutput)
}

// Specifies the details for a S3 file.
type WorkflowS3InputFileLocation struct {
	// Specifies the S3 bucket that contains the file.
	Bucket *string `pulumi:"bucket"`
	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	Key *string `pulumi:"key"`
}

// WorkflowS3InputFileLocationInput is an input type that accepts WorkflowS3InputFileLocationArgs and WorkflowS3InputFileLocationOutput values.
// You can construct a concrete instance of `WorkflowS3InputFileLocationInput` via:
//
//	WorkflowS3InputFileLocationArgs{...}
type WorkflowS3InputFileLocationInput interface {
	pulumi.Input

	ToWorkflowS3InputFileLocationOutput() WorkflowS3InputFileLocationOutput
	ToWorkflowS3InputFileLocationOutputWithContext(context.Context) WorkflowS3InputFileLocationOutput
}

// Specifies the details for a S3 file.
type WorkflowS3InputFileLocationArgs struct {
	// Specifies the S3 bucket that contains the file.
	Bucket pulumi.StringPtrInput `pulumi:"bucket"`
	// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
	Key pulumi.StringPtrInput `pulumi:"key"`
}

func (WorkflowS3InputFileLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowS3InputFileLocation)(nil)).Elem()
}

func (i WorkflowS3InputFileLocationArgs) ToWorkflowS3InputFileLocationOutput() WorkflowS3InputFileLocationOutput {
	return i.ToWorkflowS3InputFileLocationOutputWithContext(context.Background())
}

func (i WorkflowS3InputFileLocationArgs) ToWorkflowS3InputFileLocationOutputWithContext(ctx context.Context) WorkflowS3InputFileLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowS3InputFileLocationOutput)
}

func (i WorkflowS3InputFileLocationArgs) ToWorkflowS3InputFileLocationPtrOutput() WorkflowS3InputFileLocationPtrOutput {
	return i.ToWorkflowS3InputFileLocationPtrOutputWithContext(context.Background())
}

func (i WorkflowS3InputFileLocationArgs) ToWorkflowS3InputFileLocationPtrOutputWithContext(ctx context.Context) WorkflowS3InputFileLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowS3InputFileLocationOutput).ToWorkflowS3InputFileLocationPtrOutputWithContext(ctx)
}

// WorkflowS3InputFileLocationPtrInput is an input type that accepts WorkflowS3InputFileLocationArgs, WorkflowS3InputFileLocationPtr and WorkflowS3InputFileLocationPtrOutput values.
// You can construct a concrete instance of `WorkflowS3InputFileLocationPtrInput` via:
//
//	        WorkflowS3InputFileLocationArgs{...}
//
//	or:
//
//	        nil
type WorkflowS3InputFileLocationPtrInput interface {
	pulumi.Input

	ToWorkflowS3InputFileLocationPtrOutput() WorkflowS3InputFileLocationPtrOutput
	ToWorkflowS3InputFileLocationPtrOutputWithContext(context.Context) WorkflowS3InputFileLocationPtrOutput
}

type workflowS3InputFileLocationPtrType WorkflowS3InputFileLocationArgs

func WorkflowS3InputFileLocationPtr(v *WorkflowS3InputFileLocationArgs) WorkflowS3InputFileLocationPtrInput {
	return (*workflowS3InputFileLocationPtrType)(v)
}

func (*workflowS3InputFileLocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowS3InputFileLocation)(nil)).Elem()
}

func (i *workflowS3InputFileLocationPtrType) ToWorkflowS3InputFileLocationPtrOutput() WorkflowS3InputFileLocationPtrOutput {
	return i.ToWorkflowS3InputFileLocationPtrOutputWithContext(context.Background())
}

func (i *workflowS3InputFileLocationPtrType) ToWorkflowS3InputFileLocationPtrOutputWithContext(ctx context.Context) WorkflowS3InputFileLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowS3InputFileLocationPtrOutput)
}

// Specifies the details for a S3 file.
type WorkflowS3InputFileLocationOutput struct{ *pulumi.OutputState }

func (WorkflowS3InputFileLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowS3InputFileLocation)(nil)).Elem()
}

func (o WorkflowS3InputFileLocationOutput) ToWorkflowS3InputFileLocationOutput() WorkflowS3InputFileLocationOutput {
	return o
}

func (o WorkflowS3InputFileLocationOutput) ToWorkflowS3InputFileLocationOutputWithContext(ctx context.Context) WorkflowS3InputFileLocationOutput {
	return o
}

func (o WorkflowS3InputFileLocationOutput) ToWorkflowS3InputFileLocationPtrOutput() WorkflowS3InputFileLocationPtrOutput {
	return o.ToWorkflowS3InputFileLocationPtrOutputWithContext(context.Background())
}

func (o WorkflowS3InputFileLocationOutput) ToWorkflowS3InputFileLocationPtrOutputWithContext(ctx context.Context) WorkflowS3InputFileLocationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WorkflowS3InputFileLocation) *WorkflowS3InputFileLocation {
		return &v
	}).(WorkflowS3InputFileLocationPtrOutput)
}

// Specifies the S3 bucket that contains the file.
func (o WorkflowS3InputFileLocationOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkflowS3InputFileLocation) *string { return v.Bucket }).(pulumi.StringPtrOutput)
}

// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
func (o WorkflowS3InputFileLocationOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkflowS3InputFileLocation) *string { return v.Key }).(pulumi.StringPtrOutput)
}

type WorkflowS3InputFileLocationPtrOutput struct{ *pulumi.OutputState }

func (WorkflowS3InputFileLocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowS3InputFileLocation)(nil)).Elem()
}

func (o WorkflowS3InputFileLocationPtrOutput) ToWorkflowS3InputFileLocationPtrOutput() WorkflowS3InputFileLocationPtrOutput {
	return o
}

func (o WorkflowS3InputFileLocationPtrOutput) ToWorkflowS3InputFileLocationPtrOutputWithContext(ctx context.Context) WorkflowS3InputFileLocationPtrOutput {
	return o
}

func (o WorkflowS3InputFileLocationPtrOutput) Elem() WorkflowS3InputFileLocationOutput {
	return o.ApplyT(func(v *WorkflowS3InputFileLocation) WorkflowS3InputFileLocation {
		if v != nil {
			return *v
		}
		var ret WorkflowS3InputFileLocation
		return ret
	}).(WorkflowS3InputFileLocationOutput)
}

// Specifies the S3 bucket that contains the file.
func (o WorkflowS3InputFileLocationPtrOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowS3InputFileLocation) *string {
		if v == nil {
			return nil
		}
		return v.Bucket
	}).(pulumi.StringPtrOutput)
}

// The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
func (o WorkflowS3InputFileLocationPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowS3InputFileLocation) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Specifies the key-value pair that are assigned to a file during the execution of a Tagging step.
type WorkflowS3Tag struct {
	// The name assigned to the tag that you create.
	Key string `pulumi:"key"`
	// The value that corresponds to the key.
	Value string `pulumi:"value"`
}

// WorkflowS3TagInput is an input type that accepts WorkflowS3TagArgs and WorkflowS3TagOutput values.
// You can construct a concrete instance of `WorkflowS3TagInput` via:
//
//	WorkflowS3TagArgs{...}
type WorkflowS3TagInput interface {
	pulumi.Input

	ToWorkflowS3TagOutput() WorkflowS3TagOutput
	ToWorkflowS3TagOutputWithContext(context.Context) WorkflowS3TagOutput
}

// Specifies the key-value pair that are assigned to a file during the execution of a Tagging step.
type WorkflowS3TagArgs struct {
	// The name assigned to the tag that you create.
	Key pulumi.StringInput `pulumi:"key"`
	// The value that corresponds to the key.
	Value pulumi.StringInput `pulumi:"value"`
}

func (WorkflowS3TagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowS3Tag)(nil)).Elem()
}

func (i WorkflowS3TagArgs) ToWorkflowS3TagOutput() WorkflowS3TagOutput {
	return i.ToWorkflowS3TagOutputWithContext(context.Background())
}

func (i WorkflowS3TagArgs) ToWorkflowS3TagOutputWithContext(ctx context.Context) WorkflowS3TagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowS3TagOutput)
}

// WorkflowS3TagArrayInput is an input type that accepts WorkflowS3TagArray and WorkflowS3TagArrayOutput values.
// You can construct a concrete instance of `WorkflowS3TagArrayInput` via:
//
//	WorkflowS3TagArray{ WorkflowS3TagArgs{...} }
type WorkflowS3TagArrayInput interface {
	pulumi.Input

	ToWorkflowS3TagArrayOutput() WorkflowS3TagArrayOutput
	ToWorkflowS3TagArrayOutputWithContext(context.Context) WorkflowS3TagArrayOutput
}

type WorkflowS3TagArray []WorkflowS3TagInput

func (WorkflowS3TagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WorkflowS3Tag)(nil)).Elem()
}

func (i WorkflowS3TagArray) ToWorkflowS3TagArrayOutput() WorkflowS3TagArrayOutput {
	return i.ToWorkflowS3TagArrayOutputWithContext(context.Background())
}

func (i WorkflowS3TagArray) ToWorkflowS3TagArrayOutputWithContext(ctx context.Context) WorkflowS3TagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowS3TagArrayOutput)
}

// Specifies the key-value pair that are assigned to a file during the execution of a Tagging step.
type WorkflowS3TagOutput struct{ *pulumi.OutputState }

func (WorkflowS3TagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowS3Tag)(nil)).Elem()
}

func (o WorkflowS3TagOutput) ToWorkflowS3TagOutput() WorkflowS3TagOutput {
	return o
}

func (o WorkflowS3TagOutput) ToWorkflowS3TagOutputWithContext(ctx context.Context) WorkflowS3TagOutput {
	return o
}

// The name assigned to the tag that you create.
func (o WorkflowS3TagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v WorkflowS3Tag) string { return v.Key }).(pulumi.StringOutput)
}

// The value that corresponds to the key.
func (o WorkflowS3TagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v WorkflowS3Tag) string { return v.Value }).(pulumi.StringOutput)
}

type WorkflowS3TagArrayOutput struct{ *pulumi.OutputState }

func (WorkflowS3TagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WorkflowS3Tag)(nil)).Elem()
}

func (o WorkflowS3TagArrayOutput) ToWorkflowS3TagArrayOutput() WorkflowS3TagArrayOutput {
	return o
}

func (o WorkflowS3TagArrayOutput) ToWorkflowS3TagArrayOutputWithContext(ctx context.Context) WorkflowS3TagArrayOutput {
	return o
}

func (o WorkflowS3TagArrayOutput) Index(i pulumi.IntInput) WorkflowS3TagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WorkflowS3Tag {
		return vs[0].([]WorkflowS3Tag)[vs[1].(int)]
	}).(WorkflowS3TagOutput)
}

// The basic building block of a workflow.
type WorkflowStep struct {
	// Details for a step that performs a file copy.
	CopyStepDetails *WorkflowStepCopyStepDetailsProperties `pulumi:"copyStepDetails"`
	// Details for a step that invokes a lambda function.
	CustomStepDetails *WorkflowStepCustomStepDetailsProperties `pulumi:"customStepDetails"`
	// Details for a step that performs a file decryption.
	DecryptStepDetails *WorkflowStepDecryptStepDetailsProperties `pulumi:"decryptStepDetails"`
	// Details for a step that deletes the file.
	DeleteStepDetails *WorkflowStepDeleteStepDetailsProperties `pulumi:"deleteStepDetails"`
	// Details for a step that creates one or more tags.
	TagStepDetails *WorkflowStepTagStepDetailsProperties `pulumi:"tagStepDetails"`
	Type           *WorkflowStepType                     `pulumi:"type"`
}

// WorkflowStepInput is an input type that accepts WorkflowStepArgs and WorkflowStepOutput values.
// You can construct a concrete instance of `WorkflowStepInput` via:
//
//	WorkflowStepArgs{...}
type WorkflowStepInput interface {
	pulumi.Input

	ToWorkflowStepOutput() WorkflowStepOutput
	ToWorkflowStepOutputWithContext(context.Context) WorkflowStepOutput
}

// The basic building block of a workflow.
type WorkflowStepArgs struct {
	// Details for a step that performs a file copy.
	CopyStepDetails WorkflowStepCopyStepDetailsPropertiesPtrInput `pulumi:"copyStepDetails"`
	// Details for a step that invokes a lambda function.
	CustomStepDetails WorkflowStepCustomStepDetailsPropertiesPtrInput `pulumi:"customStepDetails"`
	// Details for a step that performs a file decryption.
	DecryptStepDetails WorkflowStepDecryptStepDetailsPropertiesPtrInput `pulumi:"decryptStepDetails"`
	// Details for a step that deletes the file.
	DeleteStepDetails WorkflowStepDeleteStepDetailsPropertiesPtrInput `pulumi:"deleteStepDetails"`
	// Details for a step that creates one or more tags.
	TagStepDetails WorkflowStepTagStepDetailsPropertiesPtrInput `pulumi:"tagStepDetails"`
	Type           WorkflowStepTypePtrInput                     `pulumi:"type"`
}

func (WorkflowStepArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowStep)(nil)).Elem()
}

func (i WorkflowStepArgs) ToWorkflowStepOutput() WorkflowStepOutput {
	return i.ToWorkflowStepOutputWithContext(context.Background())
}

func (i WorkflowStepArgs) ToWorkflowStepOutputWithContext(ctx context.Context) WorkflowStepOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowStepOutput)
}

// WorkflowStepArrayInput is an input type that accepts WorkflowStepArray and WorkflowStepArrayOutput values.
// You can construct a concrete instance of `WorkflowStepArrayInput` via:
//
//	WorkflowStepArray{ WorkflowStepArgs{...} }
type WorkflowStepArrayInput interface {
	pulumi.Input

	ToWorkflowStepArrayOutput() WorkflowStepArrayOutput
	ToWorkflowStepArrayOutputWithContext(context.Context) WorkflowStepArrayOutput
}

type WorkflowStepArray []WorkflowStepInput

func (WorkflowStepArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WorkflowStep)(nil)).Elem()
}

func (i WorkflowStepArray) ToWorkflowStepArrayOutput() WorkflowStepArrayOutput {
	return i.ToWorkflowStepArrayOutputWithContext(context.Background())
}

func (i WorkflowStepArray) ToWorkflowStepArrayOutputWithContext(ctx context.Context) WorkflowStepArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowStepArrayOutput)
}

// The basic building block of a workflow.
type WorkflowStepOutput struct{ *pulumi.OutputState }

func (WorkflowStepOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowStep)(nil)).Elem()
}

func (o WorkflowStepOutput) ToWorkflowStepOutput() WorkflowStepOutput {
	return o
}

func (o WorkflowStepOutput) ToWorkflowStepOutputWithContext(ctx context.Context) WorkflowStepOutput {
	return o
}

// Details for a step that performs a file copy.
func (o WorkflowStepOutput) CopyStepDetails() WorkflowStepCopyStepDetailsPropertiesPtrOutput {
	return o.ApplyT(func(v WorkflowStep) *WorkflowStepCopyStepDetailsProperties { return v.CopyStepDetails }).(WorkflowStepCopyStepDetailsPropertiesPtrOutput)
}

// Details for a step that invokes a lambda function.
func (o WorkflowStepOutput) CustomStepDetails() WorkflowStepCustomStepDetailsPropertiesPtrOutput {
	return o.ApplyT(func(v WorkflowStep) *WorkflowStepCustomStepDetailsProperties { return v.CustomStepDetails }).(WorkflowStepCustomStepDetailsPropertiesPtrOutput)
}

// Details for a step that performs a file decryption.
func (o WorkflowStepOutput) DecryptStepDetails() WorkflowStepDecryptStepDetailsPropertiesPtrOutput {
	return o.ApplyT(func(v WorkflowStep) *WorkflowStepDecryptStepDetailsProperties { return v.DecryptStepDetails }).(WorkflowStepDecryptStepDetailsPropertiesPtrOutput)
}

// Details for a step that deletes the file.
func (o WorkflowStepOutput) DeleteStepDetails() WorkflowStepDeleteStepDetailsPropertiesPtrOutput {
	return o.ApplyT(func(v WorkflowStep) *WorkflowStepDeleteStepDetailsProperties { return v.DeleteStepDetails }).(WorkflowStepDeleteStepDetailsPropertiesPtrOutput)
}

// Details for a step that creates one or more tags.
func (o WorkflowStepOutput) TagStepDetails() WorkflowStepTagStepDetailsPropertiesPtrOutput {
	return o.ApplyT(func(v WorkflowStep) *WorkflowStepTagStepDetailsProperties { return v.TagStepDetails }).(WorkflowStepTagStepDetailsPropertiesPtrOutput)
}

func (o WorkflowStepOutput) Type() WorkflowStepTypePtrOutput {
	return o.ApplyT(func(v WorkflowStep) *WorkflowStepType { return v.Type }).(WorkflowStepTypePtrOutput)
}

type WorkflowStepArrayOutput struct{ *pulumi.OutputState }

func (WorkflowStepArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WorkflowStep)(nil)).Elem()
}

func (o WorkflowStepArrayOutput) ToWorkflowStepArrayOutput() WorkflowStepArrayOutput {
	return o
}

func (o WorkflowStepArrayOutput) ToWorkflowStepArrayOutputWithContext(ctx context.Context) WorkflowStepArrayOutput {
	return o
}

func (o WorkflowStepArrayOutput) Index(i pulumi.IntInput) WorkflowStepOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WorkflowStep {
		return vs[0].([]WorkflowStep)[vs[1].(int)]
	}).(WorkflowStepOutput)
}

// Details for a step that performs a file copy.
type WorkflowStepCopyStepDetailsProperties struct {
	DestinationFileLocation *WorkflowS3FileLocation `pulumi:"destinationFileLocation"`
	// The name of the step, used as an identifier.
	Name *string `pulumi:"name"`
	// A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE.
	OverwriteExisting *WorkflowStepCopyStepDetailsPropertiesOverwriteExisting `pulumi:"overwriteExisting"`
	// Specifies which file to use as input to the workflow step.
	SourceFileLocation *string `pulumi:"sourceFileLocation"`
}

// WorkflowStepCopyStepDetailsPropertiesInput is an input type that accepts WorkflowStepCopyStepDetailsPropertiesArgs and WorkflowStepCopyStepDetailsPropertiesOutput values.
// You can construct a concrete instance of `WorkflowStepCopyStepDetailsPropertiesInput` via:
//
//	WorkflowStepCopyStepDetailsPropertiesArgs{...}
type WorkflowStepCopyStepDetailsPropertiesInput interface {
	pulumi.Input

	ToWorkflowStepCopyStepDetailsPropertiesOutput() WorkflowStepCopyStepDetailsPropertiesOutput
	ToWorkflowStepCopyStepDetailsPropertiesOutputWithContext(context.Context) WorkflowStepCopyStepDetailsPropertiesOutput
}

// Details for a step that performs a file copy.
type WorkflowStepCopyStepDetailsPropertiesArgs struct {
	DestinationFileLocation WorkflowS3FileLocationPtrInput `pulumi:"destinationFileLocation"`
	// The name of the step, used as an identifier.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE.
	OverwriteExisting WorkflowStepCopyStepDetailsPropertiesOverwriteExistingPtrInput `pulumi:"overwriteExisting"`
	// Specifies which file to use as input to the workflow step.
	SourceFileLocation pulumi.StringPtrInput `pulumi:"sourceFileLocation"`
}

func (WorkflowStepCopyStepDetailsPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowStepCopyStepDetailsProperties)(nil)).Elem()
}

func (i WorkflowStepCopyStepDetailsPropertiesArgs) ToWorkflowStepCopyStepDetailsPropertiesOutput() WorkflowStepCopyStepDetailsPropertiesOutput {
	return i.ToWorkflowStepCopyStepDetailsPropertiesOutputWithContext(context.Background())
}

func (i WorkflowStepCopyStepDetailsPropertiesArgs) ToWorkflowStepCopyStepDetailsPropertiesOutputWithContext(ctx context.Context) WorkflowStepCopyStepDetailsPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowStepCopyStepDetailsPropertiesOutput)
}

func (i WorkflowStepCopyStepDetailsPropertiesArgs) ToWorkflowStepCopyStepDetailsPropertiesPtrOutput() WorkflowStepCopyStepDetailsPropertiesPtrOutput {
	return i.ToWorkflowStepCopyStepDetailsPropertiesPtrOutputWithContext(context.Background())
}

func (i WorkflowStepCopyStepDetailsPropertiesArgs) ToWorkflowStepCopyStepDetailsPropertiesPtrOutputWithContext(ctx context.Context) WorkflowStepCopyStepDetailsPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowStepCopyStepDetailsPropertiesOutput).ToWorkflowStepCopyStepDetailsPropertiesPtrOutputWithContext(ctx)
}

// WorkflowStepCopyStepDetailsPropertiesPtrInput is an input type that accepts WorkflowStepCopyStepDetailsPropertiesArgs, WorkflowStepCopyStepDetailsPropertiesPtr and WorkflowStepCopyStepDetailsPropertiesPtrOutput values.
// You can construct a concrete instance of `WorkflowStepCopyStepDetailsPropertiesPtrInput` via:
//
//	        WorkflowStepCopyStepDetailsPropertiesArgs{...}
//
//	or:
//
//	        nil
type WorkflowStepCopyStepDetailsPropertiesPtrInput interface {
	pulumi.Input

	ToWorkflowStepCopyStepDetailsPropertiesPtrOutput() WorkflowStepCopyStepDetailsPropertiesPtrOutput
	ToWorkflowStepCopyStepDetailsPropertiesPtrOutputWithContext(context.Context) WorkflowStepCopyStepDetailsPropertiesPtrOutput
}

type workflowStepCopyStepDetailsPropertiesPtrType WorkflowStepCopyStepDetailsPropertiesArgs

func WorkflowStepCopyStepDetailsPropertiesPtr(v *WorkflowStepCopyStepDetailsPropertiesArgs) WorkflowStepCopyStepDetailsPropertiesPtrInput {
	return (*workflowStepCopyStepDetailsPropertiesPtrType)(v)
}

func (*workflowStepCopyStepDetailsPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowStepCopyStepDetailsProperties)(nil)).Elem()
}

func (i *workflowStepCopyStepDetailsPropertiesPtrType) ToWorkflowStepCopyStepDetailsPropertiesPtrOutput() WorkflowStepCopyStepDetailsPropertiesPtrOutput {
	return i.ToWorkflowStepCopyStepDetailsPropertiesPtrOutputWithContext(context.Background())
}

func (i *workflowStepCopyStepDetailsPropertiesPtrType) ToWorkflowStepCopyStepDetailsPropertiesPtrOutputWithContext(ctx context.Context) WorkflowStepCopyStepDetailsPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowStepCopyStepDetailsPropertiesPtrOutput)
}

// Details for a step that performs a file copy.
type WorkflowStepCopyStepDetailsPropertiesOutput struct{ *pulumi.OutputState }

func (WorkflowStepCopyStepDetailsPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowStepCopyStepDetailsProperties)(nil)).Elem()
}

func (o WorkflowStepCopyStepDetailsPropertiesOutput) ToWorkflowStepCopyStepDetailsPropertiesOutput() WorkflowStepCopyStepDetailsPropertiesOutput {
	return o
}

func (o WorkflowStepCopyStepDetailsPropertiesOutput) ToWorkflowStepCopyStepDetailsPropertiesOutputWithContext(ctx context.Context) WorkflowStepCopyStepDetailsPropertiesOutput {
	return o
}

func (o WorkflowStepCopyStepDetailsPropertiesOutput) ToWorkflowStepCopyStepDetailsPropertiesPtrOutput() WorkflowStepCopyStepDetailsPropertiesPtrOutput {
	return o.ToWorkflowStepCopyStepDetailsPropertiesPtrOutputWithContext(context.Background())
}

func (o WorkflowStepCopyStepDetailsPropertiesOutput) ToWorkflowStepCopyStepDetailsPropertiesPtrOutputWithContext(ctx context.Context) WorkflowStepCopyStepDetailsPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WorkflowStepCopyStepDetailsProperties) *WorkflowStepCopyStepDetailsProperties {
		return &v
	}).(WorkflowStepCopyStepDetailsPropertiesPtrOutput)
}

func (o WorkflowStepCopyStepDetailsPropertiesOutput) DestinationFileLocation() WorkflowS3FileLocationPtrOutput {
	return o.ApplyT(func(v WorkflowStepCopyStepDetailsProperties) *WorkflowS3FileLocation {
		return v.DestinationFileLocation
	}).(WorkflowS3FileLocationPtrOutput)
}

// The name of the step, used as an identifier.
func (o WorkflowStepCopyStepDetailsPropertiesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkflowStepCopyStepDetailsProperties) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE.
func (o WorkflowStepCopyStepDetailsPropertiesOutput) OverwriteExisting() WorkflowStepCopyStepDetailsPropertiesOverwriteExistingPtrOutput {
	return o.ApplyT(func(v WorkflowStepCopyStepDetailsProperties) *WorkflowStepCopyStepDetailsPropertiesOverwriteExisting {
		return v.OverwriteExisting
	}).(WorkflowStepCopyStepDetailsPropertiesOverwriteExistingPtrOutput)
}

// Specifies which file to use as input to the workflow step.
func (o WorkflowStepCopyStepDetailsPropertiesOutput) SourceFileLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkflowStepCopyStepDetailsProperties) *string { return v.SourceFileLocation }).(pulumi.StringPtrOutput)
}

type WorkflowStepCopyStepDetailsPropertiesPtrOutput struct{ *pulumi.OutputState }

func (WorkflowStepCopyStepDetailsPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowStepCopyStepDetailsProperties)(nil)).Elem()
}

func (o WorkflowStepCopyStepDetailsPropertiesPtrOutput) ToWorkflowStepCopyStepDetailsPropertiesPtrOutput() WorkflowStepCopyStepDetailsPropertiesPtrOutput {
	return o
}

func (o WorkflowStepCopyStepDetailsPropertiesPtrOutput) ToWorkflowStepCopyStepDetailsPropertiesPtrOutputWithContext(ctx context.Context) WorkflowStepCopyStepDetailsPropertiesPtrOutput {
	return o
}

func (o WorkflowStepCopyStepDetailsPropertiesPtrOutput) Elem() WorkflowStepCopyStepDetailsPropertiesOutput {
	return o.ApplyT(func(v *WorkflowStepCopyStepDetailsProperties) WorkflowStepCopyStepDetailsProperties {
		if v != nil {
			return *v
		}
		var ret WorkflowStepCopyStepDetailsProperties
		return ret
	}).(WorkflowStepCopyStepDetailsPropertiesOutput)
}

func (o WorkflowStepCopyStepDetailsPropertiesPtrOutput) DestinationFileLocation() WorkflowS3FileLocationPtrOutput {
	return o.ApplyT(func(v *WorkflowStepCopyStepDetailsProperties) *WorkflowS3FileLocation {
		if v == nil {
			return nil
		}
		return v.DestinationFileLocation
	}).(WorkflowS3FileLocationPtrOutput)
}

// The name of the step, used as an identifier.
func (o WorkflowStepCopyStepDetailsPropertiesPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowStepCopyStepDetailsProperties) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE.
func (o WorkflowStepCopyStepDetailsPropertiesPtrOutput) OverwriteExisting() WorkflowStepCopyStepDetailsPropertiesOverwriteExistingPtrOutput {
	return o.ApplyT(func(v *WorkflowStepCopyStepDetailsProperties) *WorkflowStepCopyStepDetailsPropertiesOverwriteExisting {
		if v == nil {
			return nil
		}
		return v.OverwriteExisting
	}).(WorkflowStepCopyStepDetailsPropertiesOverwriteExistingPtrOutput)
}

// Specifies which file to use as input to the workflow step.
func (o WorkflowStepCopyStepDetailsPropertiesPtrOutput) SourceFileLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowStepCopyStepDetailsProperties) *string {
		if v == nil {
			return nil
		}
		return v.SourceFileLocation
	}).(pulumi.StringPtrOutput)
}

// Details for a step that invokes a lambda function.
type WorkflowStepCustomStepDetailsProperties struct {
	// The name of the step, used as an identifier.
	Name *string `pulumi:"name"`
	// Specifies which file to use as input to the workflow step.
	SourceFileLocation *string `pulumi:"sourceFileLocation"`
	// The ARN for the lambda function that is being called.
	Target *string `pulumi:"target"`
	// Timeout, in seconds, for the step.
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
}

// WorkflowStepCustomStepDetailsPropertiesInput is an input type that accepts WorkflowStepCustomStepDetailsPropertiesArgs and WorkflowStepCustomStepDetailsPropertiesOutput values.
// You can construct a concrete instance of `WorkflowStepCustomStepDetailsPropertiesInput` via:
//
//	WorkflowStepCustomStepDetailsPropertiesArgs{...}
type WorkflowStepCustomStepDetailsPropertiesInput interface {
	pulumi.Input

	ToWorkflowStepCustomStepDetailsPropertiesOutput() WorkflowStepCustomStepDetailsPropertiesOutput
	ToWorkflowStepCustomStepDetailsPropertiesOutputWithContext(context.Context) WorkflowStepCustomStepDetailsPropertiesOutput
}

// Details for a step that invokes a lambda function.
type WorkflowStepCustomStepDetailsPropertiesArgs struct {
	// The name of the step, used as an identifier.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies which file to use as input to the workflow step.
	SourceFileLocation pulumi.StringPtrInput `pulumi:"sourceFileLocation"`
	// The ARN for the lambda function that is being called.
	Target pulumi.StringPtrInput `pulumi:"target"`
	// Timeout, in seconds, for the step.
	TimeoutSeconds pulumi.IntPtrInput `pulumi:"timeoutSeconds"`
}

func (WorkflowStepCustomStepDetailsPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowStepCustomStepDetailsProperties)(nil)).Elem()
}

func (i WorkflowStepCustomStepDetailsPropertiesArgs) ToWorkflowStepCustomStepDetailsPropertiesOutput() WorkflowStepCustomStepDetailsPropertiesOutput {
	return i.ToWorkflowStepCustomStepDetailsPropertiesOutputWithContext(context.Background())
}

func (i WorkflowStepCustomStepDetailsPropertiesArgs) ToWorkflowStepCustomStepDetailsPropertiesOutputWithContext(ctx context.Context) WorkflowStepCustomStepDetailsPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowStepCustomStepDetailsPropertiesOutput)
}

func (i WorkflowStepCustomStepDetailsPropertiesArgs) ToWorkflowStepCustomStepDetailsPropertiesPtrOutput() WorkflowStepCustomStepDetailsPropertiesPtrOutput {
	return i.ToWorkflowStepCustomStepDetailsPropertiesPtrOutputWithContext(context.Background())
}

func (i WorkflowStepCustomStepDetailsPropertiesArgs) ToWorkflowStepCustomStepDetailsPropertiesPtrOutputWithContext(ctx context.Context) WorkflowStepCustomStepDetailsPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowStepCustomStepDetailsPropertiesOutput).ToWorkflowStepCustomStepDetailsPropertiesPtrOutputWithContext(ctx)
}

// WorkflowStepCustomStepDetailsPropertiesPtrInput is an input type that accepts WorkflowStepCustomStepDetailsPropertiesArgs, WorkflowStepCustomStepDetailsPropertiesPtr and WorkflowStepCustomStepDetailsPropertiesPtrOutput values.
// You can construct a concrete instance of `WorkflowStepCustomStepDetailsPropertiesPtrInput` via:
//
//	        WorkflowStepCustomStepDetailsPropertiesArgs{...}
//
//	or:
//
//	        nil
type WorkflowStepCustomStepDetailsPropertiesPtrInput interface {
	pulumi.Input

	ToWorkflowStepCustomStepDetailsPropertiesPtrOutput() WorkflowStepCustomStepDetailsPropertiesPtrOutput
	ToWorkflowStepCustomStepDetailsPropertiesPtrOutputWithContext(context.Context) WorkflowStepCustomStepDetailsPropertiesPtrOutput
}

type workflowStepCustomStepDetailsPropertiesPtrType WorkflowStepCustomStepDetailsPropertiesArgs

func WorkflowStepCustomStepDetailsPropertiesPtr(v *WorkflowStepCustomStepDetailsPropertiesArgs) WorkflowStepCustomStepDetailsPropertiesPtrInput {
	return (*workflowStepCustomStepDetailsPropertiesPtrType)(v)
}

func (*workflowStepCustomStepDetailsPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowStepCustomStepDetailsProperties)(nil)).Elem()
}

func (i *workflowStepCustomStepDetailsPropertiesPtrType) ToWorkflowStepCustomStepDetailsPropertiesPtrOutput() WorkflowStepCustomStepDetailsPropertiesPtrOutput {
	return i.ToWorkflowStepCustomStepDetailsPropertiesPtrOutputWithContext(context.Background())
}

func (i *workflowStepCustomStepDetailsPropertiesPtrType) ToWorkflowStepCustomStepDetailsPropertiesPtrOutputWithContext(ctx context.Context) WorkflowStepCustomStepDetailsPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowStepCustomStepDetailsPropertiesPtrOutput)
}

// Details for a step that invokes a lambda function.
type WorkflowStepCustomStepDetailsPropertiesOutput struct{ *pulumi.OutputState }

func (WorkflowStepCustomStepDetailsPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowStepCustomStepDetailsProperties)(nil)).Elem()
}

func (o WorkflowStepCustomStepDetailsPropertiesOutput) ToWorkflowStepCustomStepDetailsPropertiesOutput() WorkflowStepCustomStepDetailsPropertiesOutput {
	return o
}

func (o WorkflowStepCustomStepDetailsPropertiesOutput) ToWorkflowStepCustomStepDetailsPropertiesOutputWithContext(ctx context.Context) WorkflowStepCustomStepDetailsPropertiesOutput {
	return o
}

func (o WorkflowStepCustomStepDetailsPropertiesOutput) ToWorkflowStepCustomStepDetailsPropertiesPtrOutput() WorkflowStepCustomStepDetailsPropertiesPtrOutput {
	return o.ToWorkflowStepCustomStepDetailsPropertiesPtrOutputWithContext(context.Background())
}

func (o WorkflowStepCustomStepDetailsPropertiesOutput) ToWorkflowStepCustomStepDetailsPropertiesPtrOutputWithContext(ctx context.Context) WorkflowStepCustomStepDetailsPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WorkflowStepCustomStepDetailsProperties) *WorkflowStepCustomStepDetailsProperties {
		return &v
	}).(WorkflowStepCustomStepDetailsPropertiesPtrOutput)
}

// The name of the step, used as an identifier.
func (o WorkflowStepCustomStepDetailsPropertiesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkflowStepCustomStepDetailsProperties) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specifies which file to use as input to the workflow step.
func (o WorkflowStepCustomStepDetailsPropertiesOutput) SourceFileLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkflowStepCustomStepDetailsProperties) *string { return v.SourceFileLocation }).(pulumi.StringPtrOutput)
}

// The ARN for the lambda function that is being called.
func (o WorkflowStepCustomStepDetailsPropertiesOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkflowStepCustomStepDetailsProperties) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// Timeout, in seconds, for the step.
func (o WorkflowStepCustomStepDetailsPropertiesOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WorkflowStepCustomStepDetailsProperties) *int { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

type WorkflowStepCustomStepDetailsPropertiesPtrOutput struct{ *pulumi.OutputState }

func (WorkflowStepCustomStepDetailsPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowStepCustomStepDetailsProperties)(nil)).Elem()
}

func (o WorkflowStepCustomStepDetailsPropertiesPtrOutput) ToWorkflowStepCustomStepDetailsPropertiesPtrOutput() WorkflowStepCustomStepDetailsPropertiesPtrOutput {
	return o
}

func (o WorkflowStepCustomStepDetailsPropertiesPtrOutput) ToWorkflowStepCustomStepDetailsPropertiesPtrOutputWithContext(ctx context.Context) WorkflowStepCustomStepDetailsPropertiesPtrOutput {
	return o
}

func (o WorkflowStepCustomStepDetailsPropertiesPtrOutput) Elem() WorkflowStepCustomStepDetailsPropertiesOutput {
	return o.ApplyT(func(v *WorkflowStepCustomStepDetailsProperties) WorkflowStepCustomStepDetailsProperties {
		if v != nil {
			return *v
		}
		var ret WorkflowStepCustomStepDetailsProperties
		return ret
	}).(WorkflowStepCustomStepDetailsPropertiesOutput)
}

// The name of the step, used as an identifier.
func (o WorkflowStepCustomStepDetailsPropertiesPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowStepCustomStepDetailsProperties) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specifies which file to use as input to the workflow step.
func (o WorkflowStepCustomStepDetailsPropertiesPtrOutput) SourceFileLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowStepCustomStepDetailsProperties) *string {
		if v == nil {
			return nil
		}
		return v.SourceFileLocation
	}).(pulumi.StringPtrOutput)
}

// The ARN for the lambda function that is being called.
func (o WorkflowStepCustomStepDetailsPropertiesPtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowStepCustomStepDetailsProperties) *string {
		if v == nil {
			return nil
		}
		return v.Target
	}).(pulumi.StringPtrOutput)
}

// Timeout, in seconds, for the step.
func (o WorkflowStepCustomStepDetailsPropertiesPtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WorkflowStepCustomStepDetailsProperties) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

// Details for a step that performs a file decryption.
type WorkflowStepDecryptStepDetailsProperties struct {
	DestinationFileLocation WorkflowInputFileLocation `pulumi:"destinationFileLocation"`
	// The name of the step, used as an identifier.
	Name *string `pulumi:"name"`
	// A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE.
	OverwriteExisting *WorkflowStepDecryptStepDetailsPropertiesOverwriteExisting `pulumi:"overwriteExisting"`
	// Specifies which file to use as input to the workflow step.
	SourceFileLocation *string `pulumi:"sourceFileLocation"`
	// Specifies which encryption method to use.
	Type WorkflowStepDecryptStepDetailsPropertiesType `pulumi:"type"`
}

// WorkflowStepDecryptStepDetailsPropertiesInput is an input type that accepts WorkflowStepDecryptStepDetailsPropertiesArgs and WorkflowStepDecryptStepDetailsPropertiesOutput values.
// You can construct a concrete instance of `WorkflowStepDecryptStepDetailsPropertiesInput` via:
//
//	WorkflowStepDecryptStepDetailsPropertiesArgs{...}
type WorkflowStepDecryptStepDetailsPropertiesInput interface {
	pulumi.Input

	ToWorkflowStepDecryptStepDetailsPropertiesOutput() WorkflowStepDecryptStepDetailsPropertiesOutput
	ToWorkflowStepDecryptStepDetailsPropertiesOutputWithContext(context.Context) WorkflowStepDecryptStepDetailsPropertiesOutput
}

// Details for a step that performs a file decryption.
type WorkflowStepDecryptStepDetailsPropertiesArgs struct {
	DestinationFileLocation WorkflowInputFileLocationInput `pulumi:"destinationFileLocation"`
	// The name of the step, used as an identifier.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE.
	OverwriteExisting WorkflowStepDecryptStepDetailsPropertiesOverwriteExistingPtrInput `pulumi:"overwriteExisting"`
	// Specifies which file to use as input to the workflow step.
	SourceFileLocation pulumi.StringPtrInput `pulumi:"sourceFileLocation"`
	// Specifies which encryption method to use.
	Type WorkflowStepDecryptStepDetailsPropertiesTypeInput `pulumi:"type"`
}

func (WorkflowStepDecryptStepDetailsPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowStepDecryptStepDetailsProperties)(nil)).Elem()
}

func (i WorkflowStepDecryptStepDetailsPropertiesArgs) ToWorkflowStepDecryptStepDetailsPropertiesOutput() WorkflowStepDecryptStepDetailsPropertiesOutput {
	return i.ToWorkflowStepDecryptStepDetailsPropertiesOutputWithContext(context.Background())
}

func (i WorkflowStepDecryptStepDetailsPropertiesArgs) ToWorkflowStepDecryptStepDetailsPropertiesOutputWithContext(ctx context.Context) WorkflowStepDecryptStepDetailsPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowStepDecryptStepDetailsPropertiesOutput)
}

func (i WorkflowStepDecryptStepDetailsPropertiesArgs) ToWorkflowStepDecryptStepDetailsPropertiesPtrOutput() WorkflowStepDecryptStepDetailsPropertiesPtrOutput {
	return i.ToWorkflowStepDecryptStepDetailsPropertiesPtrOutputWithContext(context.Background())
}

func (i WorkflowStepDecryptStepDetailsPropertiesArgs) ToWorkflowStepDecryptStepDetailsPropertiesPtrOutputWithContext(ctx context.Context) WorkflowStepDecryptStepDetailsPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowStepDecryptStepDetailsPropertiesOutput).ToWorkflowStepDecryptStepDetailsPropertiesPtrOutputWithContext(ctx)
}

// WorkflowStepDecryptStepDetailsPropertiesPtrInput is an input type that accepts WorkflowStepDecryptStepDetailsPropertiesArgs, WorkflowStepDecryptStepDetailsPropertiesPtr and WorkflowStepDecryptStepDetailsPropertiesPtrOutput values.
// You can construct a concrete instance of `WorkflowStepDecryptStepDetailsPropertiesPtrInput` via:
//
//	        WorkflowStepDecryptStepDetailsPropertiesArgs{...}
//
//	or:
//
//	        nil
type WorkflowStepDecryptStepDetailsPropertiesPtrInput interface {
	pulumi.Input

	ToWorkflowStepDecryptStepDetailsPropertiesPtrOutput() WorkflowStepDecryptStepDetailsPropertiesPtrOutput
	ToWorkflowStepDecryptStepDetailsPropertiesPtrOutputWithContext(context.Context) WorkflowStepDecryptStepDetailsPropertiesPtrOutput
}

type workflowStepDecryptStepDetailsPropertiesPtrType WorkflowStepDecryptStepDetailsPropertiesArgs

func WorkflowStepDecryptStepDetailsPropertiesPtr(v *WorkflowStepDecryptStepDetailsPropertiesArgs) WorkflowStepDecryptStepDetailsPropertiesPtrInput {
	return (*workflowStepDecryptStepDetailsPropertiesPtrType)(v)
}

func (*workflowStepDecryptStepDetailsPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowStepDecryptStepDetailsProperties)(nil)).Elem()
}

func (i *workflowStepDecryptStepDetailsPropertiesPtrType) ToWorkflowStepDecryptStepDetailsPropertiesPtrOutput() WorkflowStepDecryptStepDetailsPropertiesPtrOutput {
	return i.ToWorkflowStepDecryptStepDetailsPropertiesPtrOutputWithContext(context.Background())
}

func (i *workflowStepDecryptStepDetailsPropertiesPtrType) ToWorkflowStepDecryptStepDetailsPropertiesPtrOutputWithContext(ctx context.Context) WorkflowStepDecryptStepDetailsPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowStepDecryptStepDetailsPropertiesPtrOutput)
}

// Details for a step that performs a file decryption.
type WorkflowStepDecryptStepDetailsPropertiesOutput struct{ *pulumi.OutputState }

func (WorkflowStepDecryptStepDetailsPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowStepDecryptStepDetailsProperties)(nil)).Elem()
}

func (o WorkflowStepDecryptStepDetailsPropertiesOutput) ToWorkflowStepDecryptStepDetailsPropertiesOutput() WorkflowStepDecryptStepDetailsPropertiesOutput {
	return o
}

func (o WorkflowStepDecryptStepDetailsPropertiesOutput) ToWorkflowStepDecryptStepDetailsPropertiesOutputWithContext(ctx context.Context) WorkflowStepDecryptStepDetailsPropertiesOutput {
	return o
}

func (o WorkflowStepDecryptStepDetailsPropertiesOutput) ToWorkflowStepDecryptStepDetailsPropertiesPtrOutput() WorkflowStepDecryptStepDetailsPropertiesPtrOutput {
	return o.ToWorkflowStepDecryptStepDetailsPropertiesPtrOutputWithContext(context.Background())
}

func (o WorkflowStepDecryptStepDetailsPropertiesOutput) ToWorkflowStepDecryptStepDetailsPropertiesPtrOutputWithContext(ctx context.Context) WorkflowStepDecryptStepDetailsPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WorkflowStepDecryptStepDetailsProperties) *WorkflowStepDecryptStepDetailsProperties {
		return &v
	}).(WorkflowStepDecryptStepDetailsPropertiesPtrOutput)
}

func (o WorkflowStepDecryptStepDetailsPropertiesOutput) DestinationFileLocation() WorkflowInputFileLocationOutput {
	return o.ApplyT(func(v WorkflowStepDecryptStepDetailsProperties) WorkflowInputFileLocation {
		return v.DestinationFileLocation
	}).(WorkflowInputFileLocationOutput)
}

// The name of the step, used as an identifier.
func (o WorkflowStepDecryptStepDetailsPropertiesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkflowStepDecryptStepDetailsProperties) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE.
func (o WorkflowStepDecryptStepDetailsPropertiesOutput) OverwriteExisting() WorkflowStepDecryptStepDetailsPropertiesOverwriteExistingPtrOutput {
	return o.ApplyT(func(v WorkflowStepDecryptStepDetailsProperties) *WorkflowStepDecryptStepDetailsPropertiesOverwriteExisting {
		return v.OverwriteExisting
	}).(WorkflowStepDecryptStepDetailsPropertiesOverwriteExistingPtrOutput)
}

// Specifies which file to use as input to the workflow step.
func (o WorkflowStepDecryptStepDetailsPropertiesOutput) SourceFileLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkflowStepDecryptStepDetailsProperties) *string { return v.SourceFileLocation }).(pulumi.StringPtrOutput)
}

// Specifies which encryption method to use.
func (o WorkflowStepDecryptStepDetailsPropertiesOutput) Type() WorkflowStepDecryptStepDetailsPropertiesTypeOutput {
	return o.ApplyT(func(v WorkflowStepDecryptStepDetailsProperties) WorkflowStepDecryptStepDetailsPropertiesType {
		return v.Type
	}).(WorkflowStepDecryptStepDetailsPropertiesTypeOutput)
}

type WorkflowStepDecryptStepDetailsPropertiesPtrOutput struct{ *pulumi.OutputState }

func (WorkflowStepDecryptStepDetailsPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowStepDecryptStepDetailsProperties)(nil)).Elem()
}

func (o WorkflowStepDecryptStepDetailsPropertiesPtrOutput) ToWorkflowStepDecryptStepDetailsPropertiesPtrOutput() WorkflowStepDecryptStepDetailsPropertiesPtrOutput {
	return o
}

func (o WorkflowStepDecryptStepDetailsPropertiesPtrOutput) ToWorkflowStepDecryptStepDetailsPropertiesPtrOutputWithContext(ctx context.Context) WorkflowStepDecryptStepDetailsPropertiesPtrOutput {
	return o
}

func (o WorkflowStepDecryptStepDetailsPropertiesPtrOutput) Elem() WorkflowStepDecryptStepDetailsPropertiesOutput {
	return o.ApplyT(func(v *WorkflowStepDecryptStepDetailsProperties) WorkflowStepDecryptStepDetailsProperties {
		if v != nil {
			return *v
		}
		var ret WorkflowStepDecryptStepDetailsProperties
		return ret
	}).(WorkflowStepDecryptStepDetailsPropertiesOutput)
}

func (o WorkflowStepDecryptStepDetailsPropertiesPtrOutput) DestinationFileLocation() WorkflowInputFileLocationPtrOutput {
	return o.ApplyT(func(v *WorkflowStepDecryptStepDetailsProperties) *WorkflowInputFileLocation {
		if v == nil {
			return nil
		}
		return &v.DestinationFileLocation
	}).(WorkflowInputFileLocationPtrOutput)
}

// The name of the step, used as an identifier.
func (o WorkflowStepDecryptStepDetailsPropertiesPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowStepDecryptStepDetailsProperties) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE.
func (o WorkflowStepDecryptStepDetailsPropertiesPtrOutput) OverwriteExisting() WorkflowStepDecryptStepDetailsPropertiesOverwriteExistingPtrOutput {
	return o.ApplyT(func(v *WorkflowStepDecryptStepDetailsProperties) *WorkflowStepDecryptStepDetailsPropertiesOverwriteExisting {
		if v == nil {
			return nil
		}
		return v.OverwriteExisting
	}).(WorkflowStepDecryptStepDetailsPropertiesOverwriteExistingPtrOutput)
}

// Specifies which file to use as input to the workflow step.
func (o WorkflowStepDecryptStepDetailsPropertiesPtrOutput) SourceFileLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowStepDecryptStepDetailsProperties) *string {
		if v == nil {
			return nil
		}
		return v.SourceFileLocation
	}).(pulumi.StringPtrOutput)
}

// Specifies which encryption method to use.
func (o WorkflowStepDecryptStepDetailsPropertiesPtrOutput) Type() WorkflowStepDecryptStepDetailsPropertiesTypePtrOutput {
	return o.ApplyT(func(v *WorkflowStepDecryptStepDetailsProperties) *WorkflowStepDecryptStepDetailsPropertiesType {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(WorkflowStepDecryptStepDetailsPropertiesTypePtrOutput)
}

// Details for a step that deletes the file.
type WorkflowStepDeleteStepDetailsProperties struct {
	// The name of the step, used as an identifier.
	Name *string `pulumi:"name"`
	// Specifies which file to use as input to the workflow step.
	SourceFileLocation *string `pulumi:"sourceFileLocation"`
}

// WorkflowStepDeleteStepDetailsPropertiesInput is an input type that accepts WorkflowStepDeleteStepDetailsPropertiesArgs and WorkflowStepDeleteStepDetailsPropertiesOutput values.
// You can construct a concrete instance of `WorkflowStepDeleteStepDetailsPropertiesInput` via:
//
//	WorkflowStepDeleteStepDetailsPropertiesArgs{...}
type WorkflowStepDeleteStepDetailsPropertiesInput interface {
	pulumi.Input

	ToWorkflowStepDeleteStepDetailsPropertiesOutput() WorkflowStepDeleteStepDetailsPropertiesOutput
	ToWorkflowStepDeleteStepDetailsPropertiesOutputWithContext(context.Context) WorkflowStepDeleteStepDetailsPropertiesOutput
}

// Details for a step that deletes the file.
type WorkflowStepDeleteStepDetailsPropertiesArgs struct {
	// The name of the step, used as an identifier.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies which file to use as input to the workflow step.
	SourceFileLocation pulumi.StringPtrInput `pulumi:"sourceFileLocation"`
}

func (WorkflowStepDeleteStepDetailsPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowStepDeleteStepDetailsProperties)(nil)).Elem()
}

func (i WorkflowStepDeleteStepDetailsPropertiesArgs) ToWorkflowStepDeleteStepDetailsPropertiesOutput() WorkflowStepDeleteStepDetailsPropertiesOutput {
	return i.ToWorkflowStepDeleteStepDetailsPropertiesOutputWithContext(context.Background())
}

func (i WorkflowStepDeleteStepDetailsPropertiesArgs) ToWorkflowStepDeleteStepDetailsPropertiesOutputWithContext(ctx context.Context) WorkflowStepDeleteStepDetailsPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowStepDeleteStepDetailsPropertiesOutput)
}

func (i WorkflowStepDeleteStepDetailsPropertiesArgs) ToWorkflowStepDeleteStepDetailsPropertiesPtrOutput() WorkflowStepDeleteStepDetailsPropertiesPtrOutput {
	return i.ToWorkflowStepDeleteStepDetailsPropertiesPtrOutputWithContext(context.Background())
}

func (i WorkflowStepDeleteStepDetailsPropertiesArgs) ToWorkflowStepDeleteStepDetailsPropertiesPtrOutputWithContext(ctx context.Context) WorkflowStepDeleteStepDetailsPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowStepDeleteStepDetailsPropertiesOutput).ToWorkflowStepDeleteStepDetailsPropertiesPtrOutputWithContext(ctx)
}

// WorkflowStepDeleteStepDetailsPropertiesPtrInput is an input type that accepts WorkflowStepDeleteStepDetailsPropertiesArgs, WorkflowStepDeleteStepDetailsPropertiesPtr and WorkflowStepDeleteStepDetailsPropertiesPtrOutput values.
// You can construct a concrete instance of `WorkflowStepDeleteStepDetailsPropertiesPtrInput` via:
//
//	        WorkflowStepDeleteStepDetailsPropertiesArgs{...}
//
//	or:
//
//	        nil
type WorkflowStepDeleteStepDetailsPropertiesPtrInput interface {
	pulumi.Input

	ToWorkflowStepDeleteStepDetailsPropertiesPtrOutput() WorkflowStepDeleteStepDetailsPropertiesPtrOutput
	ToWorkflowStepDeleteStepDetailsPropertiesPtrOutputWithContext(context.Context) WorkflowStepDeleteStepDetailsPropertiesPtrOutput
}

type workflowStepDeleteStepDetailsPropertiesPtrType WorkflowStepDeleteStepDetailsPropertiesArgs

func WorkflowStepDeleteStepDetailsPropertiesPtr(v *WorkflowStepDeleteStepDetailsPropertiesArgs) WorkflowStepDeleteStepDetailsPropertiesPtrInput {
	return (*workflowStepDeleteStepDetailsPropertiesPtrType)(v)
}

func (*workflowStepDeleteStepDetailsPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowStepDeleteStepDetailsProperties)(nil)).Elem()
}

func (i *workflowStepDeleteStepDetailsPropertiesPtrType) ToWorkflowStepDeleteStepDetailsPropertiesPtrOutput() WorkflowStepDeleteStepDetailsPropertiesPtrOutput {
	return i.ToWorkflowStepDeleteStepDetailsPropertiesPtrOutputWithContext(context.Background())
}

func (i *workflowStepDeleteStepDetailsPropertiesPtrType) ToWorkflowStepDeleteStepDetailsPropertiesPtrOutputWithContext(ctx context.Context) WorkflowStepDeleteStepDetailsPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowStepDeleteStepDetailsPropertiesPtrOutput)
}

// Details for a step that deletes the file.
type WorkflowStepDeleteStepDetailsPropertiesOutput struct{ *pulumi.OutputState }

func (WorkflowStepDeleteStepDetailsPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowStepDeleteStepDetailsProperties)(nil)).Elem()
}

func (o WorkflowStepDeleteStepDetailsPropertiesOutput) ToWorkflowStepDeleteStepDetailsPropertiesOutput() WorkflowStepDeleteStepDetailsPropertiesOutput {
	return o
}

func (o WorkflowStepDeleteStepDetailsPropertiesOutput) ToWorkflowStepDeleteStepDetailsPropertiesOutputWithContext(ctx context.Context) WorkflowStepDeleteStepDetailsPropertiesOutput {
	return o
}

func (o WorkflowStepDeleteStepDetailsPropertiesOutput) ToWorkflowStepDeleteStepDetailsPropertiesPtrOutput() WorkflowStepDeleteStepDetailsPropertiesPtrOutput {
	return o.ToWorkflowStepDeleteStepDetailsPropertiesPtrOutputWithContext(context.Background())
}

func (o WorkflowStepDeleteStepDetailsPropertiesOutput) ToWorkflowStepDeleteStepDetailsPropertiesPtrOutputWithContext(ctx context.Context) WorkflowStepDeleteStepDetailsPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WorkflowStepDeleteStepDetailsProperties) *WorkflowStepDeleteStepDetailsProperties {
		return &v
	}).(WorkflowStepDeleteStepDetailsPropertiesPtrOutput)
}

// The name of the step, used as an identifier.
func (o WorkflowStepDeleteStepDetailsPropertiesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkflowStepDeleteStepDetailsProperties) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specifies which file to use as input to the workflow step.
func (o WorkflowStepDeleteStepDetailsPropertiesOutput) SourceFileLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkflowStepDeleteStepDetailsProperties) *string { return v.SourceFileLocation }).(pulumi.StringPtrOutput)
}

type WorkflowStepDeleteStepDetailsPropertiesPtrOutput struct{ *pulumi.OutputState }

func (WorkflowStepDeleteStepDetailsPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowStepDeleteStepDetailsProperties)(nil)).Elem()
}

func (o WorkflowStepDeleteStepDetailsPropertiesPtrOutput) ToWorkflowStepDeleteStepDetailsPropertiesPtrOutput() WorkflowStepDeleteStepDetailsPropertiesPtrOutput {
	return o
}

func (o WorkflowStepDeleteStepDetailsPropertiesPtrOutput) ToWorkflowStepDeleteStepDetailsPropertiesPtrOutputWithContext(ctx context.Context) WorkflowStepDeleteStepDetailsPropertiesPtrOutput {
	return o
}

func (o WorkflowStepDeleteStepDetailsPropertiesPtrOutput) Elem() WorkflowStepDeleteStepDetailsPropertiesOutput {
	return o.ApplyT(func(v *WorkflowStepDeleteStepDetailsProperties) WorkflowStepDeleteStepDetailsProperties {
		if v != nil {
			return *v
		}
		var ret WorkflowStepDeleteStepDetailsProperties
		return ret
	}).(WorkflowStepDeleteStepDetailsPropertiesOutput)
}

// The name of the step, used as an identifier.
func (o WorkflowStepDeleteStepDetailsPropertiesPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowStepDeleteStepDetailsProperties) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specifies which file to use as input to the workflow step.
func (o WorkflowStepDeleteStepDetailsPropertiesPtrOutput) SourceFileLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowStepDeleteStepDetailsProperties) *string {
		if v == nil {
			return nil
		}
		return v.SourceFileLocation
	}).(pulumi.StringPtrOutput)
}

// Details for a step that creates one or more tags.
type WorkflowStepTagStepDetailsProperties struct {
	// The name of the step, used as an identifier.
	Name *string `pulumi:"name"`
	// Specifies which file to use as input to the workflow step.
	SourceFileLocation *string `pulumi:"sourceFileLocation"`
	// Array that contains from 1 to 10 key/value pairs.
	Tags []WorkflowS3Tag `pulumi:"tags"`
}

// WorkflowStepTagStepDetailsPropertiesInput is an input type that accepts WorkflowStepTagStepDetailsPropertiesArgs and WorkflowStepTagStepDetailsPropertiesOutput values.
// You can construct a concrete instance of `WorkflowStepTagStepDetailsPropertiesInput` via:
//
//	WorkflowStepTagStepDetailsPropertiesArgs{...}
type WorkflowStepTagStepDetailsPropertiesInput interface {
	pulumi.Input

	ToWorkflowStepTagStepDetailsPropertiesOutput() WorkflowStepTagStepDetailsPropertiesOutput
	ToWorkflowStepTagStepDetailsPropertiesOutputWithContext(context.Context) WorkflowStepTagStepDetailsPropertiesOutput
}

// Details for a step that creates one or more tags.
type WorkflowStepTagStepDetailsPropertiesArgs struct {
	// The name of the step, used as an identifier.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies which file to use as input to the workflow step.
	SourceFileLocation pulumi.StringPtrInput `pulumi:"sourceFileLocation"`
	// Array that contains from 1 to 10 key/value pairs.
	Tags WorkflowS3TagArrayInput `pulumi:"tags"`
}

func (WorkflowStepTagStepDetailsPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowStepTagStepDetailsProperties)(nil)).Elem()
}

func (i WorkflowStepTagStepDetailsPropertiesArgs) ToWorkflowStepTagStepDetailsPropertiesOutput() WorkflowStepTagStepDetailsPropertiesOutput {
	return i.ToWorkflowStepTagStepDetailsPropertiesOutputWithContext(context.Background())
}

func (i WorkflowStepTagStepDetailsPropertiesArgs) ToWorkflowStepTagStepDetailsPropertiesOutputWithContext(ctx context.Context) WorkflowStepTagStepDetailsPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowStepTagStepDetailsPropertiesOutput)
}

func (i WorkflowStepTagStepDetailsPropertiesArgs) ToWorkflowStepTagStepDetailsPropertiesPtrOutput() WorkflowStepTagStepDetailsPropertiesPtrOutput {
	return i.ToWorkflowStepTagStepDetailsPropertiesPtrOutputWithContext(context.Background())
}

func (i WorkflowStepTagStepDetailsPropertiesArgs) ToWorkflowStepTagStepDetailsPropertiesPtrOutputWithContext(ctx context.Context) WorkflowStepTagStepDetailsPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowStepTagStepDetailsPropertiesOutput).ToWorkflowStepTagStepDetailsPropertiesPtrOutputWithContext(ctx)
}

// WorkflowStepTagStepDetailsPropertiesPtrInput is an input type that accepts WorkflowStepTagStepDetailsPropertiesArgs, WorkflowStepTagStepDetailsPropertiesPtr and WorkflowStepTagStepDetailsPropertiesPtrOutput values.
// You can construct a concrete instance of `WorkflowStepTagStepDetailsPropertiesPtrInput` via:
//
//	        WorkflowStepTagStepDetailsPropertiesArgs{...}
//
//	or:
//
//	        nil
type WorkflowStepTagStepDetailsPropertiesPtrInput interface {
	pulumi.Input

	ToWorkflowStepTagStepDetailsPropertiesPtrOutput() WorkflowStepTagStepDetailsPropertiesPtrOutput
	ToWorkflowStepTagStepDetailsPropertiesPtrOutputWithContext(context.Context) WorkflowStepTagStepDetailsPropertiesPtrOutput
}

type workflowStepTagStepDetailsPropertiesPtrType WorkflowStepTagStepDetailsPropertiesArgs

func WorkflowStepTagStepDetailsPropertiesPtr(v *WorkflowStepTagStepDetailsPropertiesArgs) WorkflowStepTagStepDetailsPropertiesPtrInput {
	return (*workflowStepTagStepDetailsPropertiesPtrType)(v)
}

func (*workflowStepTagStepDetailsPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowStepTagStepDetailsProperties)(nil)).Elem()
}

func (i *workflowStepTagStepDetailsPropertiesPtrType) ToWorkflowStepTagStepDetailsPropertiesPtrOutput() WorkflowStepTagStepDetailsPropertiesPtrOutput {
	return i.ToWorkflowStepTagStepDetailsPropertiesPtrOutputWithContext(context.Background())
}

func (i *workflowStepTagStepDetailsPropertiesPtrType) ToWorkflowStepTagStepDetailsPropertiesPtrOutputWithContext(ctx context.Context) WorkflowStepTagStepDetailsPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowStepTagStepDetailsPropertiesPtrOutput)
}

// Details for a step that creates one or more tags.
type WorkflowStepTagStepDetailsPropertiesOutput struct{ *pulumi.OutputState }

func (WorkflowStepTagStepDetailsPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowStepTagStepDetailsProperties)(nil)).Elem()
}

func (o WorkflowStepTagStepDetailsPropertiesOutput) ToWorkflowStepTagStepDetailsPropertiesOutput() WorkflowStepTagStepDetailsPropertiesOutput {
	return o
}

func (o WorkflowStepTagStepDetailsPropertiesOutput) ToWorkflowStepTagStepDetailsPropertiesOutputWithContext(ctx context.Context) WorkflowStepTagStepDetailsPropertiesOutput {
	return o
}

func (o WorkflowStepTagStepDetailsPropertiesOutput) ToWorkflowStepTagStepDetailsPropertiesPtrOutput() WorkflowStepTagStepDetailsPropertiesPtrOutput {
	return o.ToWorkflowStepTagStepDetailsPropertiesPtrOutputWithContext(context.Background())
}

func (o WorkflowStepTagStepDetailsPropertiesOutput) ToWorkflowStepTagStepDetailsPropertiesPtrOutputWithContext(ctx context.Context) WorkflowStepTagStepDetailsPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WorkflowStepTagStepDetailsProperties) *WorkflowStepTagStepDetailsProperties {
		return &v
	}).(WorkflowStepTagStepDetailsPropertiesPtrOutput)
}

// The name of the step, used as an identifier.
func (o WorkflowStepTagStepDetailsPropertiesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkflowStepTagStepDetailsProperties) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specifies which file to use as input to the workflow step.
func (o WorkflowStepTagStepDetailsPropertiesOutput) SourceFileLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkflowStepTagStepDetailsProperties) *string { return v.SourceFileLocation }).(pulumi.StringPtrOutput)
}

// Array that contains from 1 to 10 key/value pairs.
func (o WorkflowStepTagStepDetailsPropertiesOutput) Tags() WorkflowS3TagArrayOutput {
	return o.ApplyT(func(v WorkflowStepTagStepDetailsProperties) []WorkflowS3Tag { return v.Tags }).(WorkflowS3TagArrayOutput)
}

type WorkflowStepTagStepDetailsPropertiesPtrOutput struct{ *pulumi.OutputState }

func (WorkflowStepTagStepDetailsPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowStepTagStepDetailsProperties)(nil)).Elem()
}

func (o WorkflowStepTagStepDetailsPropertiesPtrOutput) ToWorkflowStepTagStepDetailsPropertiesPtrOutput() WorkflowStepTagStepDetailsPropertiesPtrOutput {
	return o
}

func (o WorkflowStepTagStepDetailsPropertiesPtrOutput) ToWorkflowStepTagStepDetailsPropertiesPtrOutputWithContext(ctx context.Context) WorkflowStepTagStepDetailsPropertiesPtrOutput {
	return o
}

func (o WorkflowStepTagStepDetailsPropertiesPtrOutput) Elem() WorkflowStepTagStepDetailsPropertiesOutput {
	return o.ApplyT(func(v *WorkflowStepTagStepDetailsProperties) WorkflowStepTagStepDetailsProperties {
		if v != nil {
			return *v
		}
		var ret WorkflowStepTagStepDetailsProperties
		return ret
	}).(WorkflowStepTagStepDetailsPropertiesOutput)
}

// The name of the step, used as an identifier.
func (o WorkflowStepTagStepDetailsPropertiesPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowStepTagStepDetailsProperties) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specifies which file to use as input to the workflow step.
func (o WorkflowStepTagStepDetailsPropertiesPtrOutput) SourceFileLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowStepTagStepDetailsProperties) *string {
		if v == nil {
			return nil
		}
		return v.SourceFileLocation
	}).(pulumi.StringPtrOutput)
}

// Array that contains from 1 to 10 key/value pairs.
func (o WorkflowStepTagStepDetailsPropertiesPtrOutput) Tags() WorkflowS3TagArrayOutput {
	return o.ApplyT(func(v *WorkflowStepTagStepDetailsProperties) []WorkflowS3Tag {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(WorkflowS3TagArrayOutput)
}

// Creates a key-value pair for a specific resource.
type WorkflowTag struct {
	// The name assigned to the tag that you create.
	Key string `pulumi:"key"`
	// Contains one or more values that you assigned to the key name you create.
	Value string `pulumi:"value"`
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*As2ConfigPropertiesInput)(nil)).Elem(), As2ConfigPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*As2ConfigPropertiesPtrInput)(nil)).Elem(), As2ConfigPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomDirectoriesPropertiesInput)(nil)).Elem(), CustomDirectoriesPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomDirectoriesPropertiesPtrInput)(nil)).Elem(), CustomDirectoriesPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerEndpointDetailsInput)(nil)).Elem(), ServerEndpointDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerEndpointDetailsPtrInput)(nil)).Elem(), ServerEndpointDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerIdentityProviderDetailsInput)(nil)).Elem(), ServerIdentityProviderDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerIdentityProviderDetailsPtrInput)(nil)).Elem(), ServerIdentityProviderDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerProtocolDetailsInput)(nil)).Elem(), ServerProtocolDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerProtocolDetailsPtrInput)(nil)).Elem(), ServerProtocolDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerS3StorageOptionsInput)(nil)).Elem(), ServerS3StorageOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerS3StorageOptionsPtrInput)(nil)).Elem(), ServerS3StorageOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerWorkflowDetailInput)(nil)).Elem(), ServerWorkflowDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerWorkflowDetailArrayInput)(nil)).Elem(), ServerWorkflowDetailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerWorkflowDetailsInput)(nil)).Elem(), ServerWorkflowDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerWorkflowDetailsPtrInput)(nil)).Elem(), ServerWorkflowDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SftpConfigPropertiesInput)(nil)).Elem(), SftpConfigPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SftpConfigPropertiesPtrInput)(nil)).Elem(), SftpConfigPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserHomeDirectoryMapEntryInput)(nil)).Elem(), UserHomeDirectoryMapEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserHomeDirectoryMapEntryArrayInput)(nil)).Elem(), UserHomeDirectoryMapEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserPosixProfileInput)(nil)).Elem(), UserPosixProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserPosixProfilePtrInput)(nil)).Elem(), UserPosixProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebAppCustomizationInput)(nil)).Elem(), WebAppCustomizationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebAppCustomizationPtrInput)(nil)).Elem(), WebAppCustomizationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebAppIdentityProviderDetailsInput)(nil)).Elem(), WebAppIdentityProviderDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebAppUnitsPropertiesInput)(nil)).Elem(), WebAppUnitsPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebAppUnitsPropertiesPtrInput)(nil)).Elem(), WebAppUnitsPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowEfsInputFileLocationInput)(nil)).Elem(), WorkflowEfsInputFileLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowEfsInputFileLocationPtrInput)(nil)).Elem(), WorkflowEfsInputFileLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowInputFileLocationInput)(nil)).Elem(), WorkflowInputFileLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowInputFileLocationPtrInput)(nil)).Elem(), WorkflowInputFileLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowS3FileLocationInput)(nil)).Elem(), WorkflowS3FileLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowS3FileLocationPtrInput)(nil)).Elem(), WorkflowS3FileLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowS3InputFileLocationInput)(nil)).Elem(), WorkflowS3InputFileLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowS3InputFileLocationPtrInput)(nil)).Elem(), WorkflowS3InputFileLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowS3TagInput)(nil)).Elem(), WorkflowS3TagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowS3TagArrayInput)(nil)).Elem(), WorkflowS3TagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowStepInput)(nil)).Elem(), WorkflowStepArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowStepArrayInput)(nil)).Elem(), WorkflowStepArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowStepCopyStepDetailsPropertiesInput)(nil)).Elem(), WorkflowStepCopyStepDetailsPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowStepCopyStepDetailsPropertiesPtrInput)(nil)).Elem(), WorkflowStepCopyStepDetailsPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowStepCustomStepDetailsPropertiesInput)(nil)).Elem(), WorkflowStepCustomStepDetailsPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowStepCustomStepDetailsPropertiesPtrInput)(nil)).Elem(), WorkflowStepCustomStepDetailsPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowStepDecryptStepDetailsPropertiesInput)(nil)).Elem(), WorkflowStepDecryptStepDetailsPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowStepDecryptStepDetailsPropertiesPtrInput)(nil)).Elem(), WorkflowStepDecryptStepDetailsPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowStepDeleteStepDetailsPropertiesInput)(nil)).Elem(), WorkflowStepDeleteStepDetailsPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowStepDeleteStepDetailsPropertiesPtrInput)(nil)).Elem(), WorkflowStepDeleteStepDetailsPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowStepTagStepDetailsPropertiesInput)(nil)).Elem(), WorkflowStepTagStepDetailsPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowStepTagStepDetailsPropertiesPtrInput)(nil)).Elem(), WorkflowStepTagStepDetailsPropertiesArgs{})
	pulumi.RegisterOutputType(As2ConfigPropertiesOutput{})
	pulumi.RegisterOutputType(As2ConfigPropertiesPtrOutput{})
	pulumi.RegisterOutputType(CustomDirectoriesPropertiesOutput{})
	pulumi.RegisterOutputType(CustomDirectoriesPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ServerEndpointDetailsOutput{})
	pulumi.RegisterOutputType(ServerEndpointDetailsPtrOutput{})
	pulumi.RegisterOutputType(ServerIdentityProviderDetailsOutput{})
	pulumi.RegisterOutputType(ServerIdentityProviderDetailsPtrOutput{})
	pulumi.RegisterOutputType(ServerProtocolDetailsOutput{})
	pulumi.RegisterOutputType(ServerProtocolDetailsPtrOutput{})
	pulumi.RegisterOutputType(ServerS3StorageOptionsOutput{})
	pulumi.RegisterOutputType(ServerS3StorageOptionsPtrOutput{})
	pulumi.RegisterOutputType(ServerWorkflowDetailOutput{})
	pulumi.RegisterOutputType(ServerWorkflowDetailArrayOutput{})
	pulumi.RegisterOutputType(ServerWorkflowDetailsOutput{})
	pulumi.RegisterOutputType(ServerWorkflowDetailsPtrOutput{})
	pulumi.RegisterOutputType(SftpConfigPropertiesOutput{})
	pulumi.RegisterOutputType(SftpConfigPropertiesPtrOutput{})
	pulumi.RegisterOutputType(UserHomeDirectoryMapEntryOutput{})
	pulumi.RegisterOutputType(UserHomeDirectoryMapEntryArrayOutput{})
	pulumi.RegisterOutputType(UserPosixProfileOutput{})
	pulumi.RegisterOutputType(UserPosixProfilePtrOutput{})
	pulumi.RegisterOutputType(WebAppCustomizationOutput{})
	pulumi.RegisterOutputType(WebAppCustomizationPtrOutput{})
	pulumi.RegisterOutputType(WebAppIdentityProviderDetailsOutput{})
	pulumi.RegisterOutputType(WebAppIdentityProviderDetailsPtrOutput{})
	pulumi.RegisterOutputType(WebAppUnitsPropertiesOutput{})
	pulumi.RegisterOutputType(WebAppUnitsPropertiesPtrOutput{})
	pulumi.RegisterOutputType(WorkflowEfsInputFileLocationOutput{})
	pulumi.RegisterOutputType(WorkflowEfsInputFileLocationPtrOutput{})
	pulumi.RegisterOutputType(WorkflowInputFileLocationOutput{})
	pulumi.RegisterOutputType(WorkflowInputFileLocationPtrOutput{})
	pulumi.RegisterOutputType(WorkflowS3FileLocationOutput{})
	pulumi.RegisterOutputType(WorkflowS3FileLocationPtrOutput{})
	pulumi.RegisterOutputType(WorkflowS3InputFileLocationOutput{})
	pulumi.RegisterOutputType(WorkflowS3InputFileLocationPtrOutput{})
	pulumi.RegisterOutputType(WorkflowS3TagOutput{})
	pulumi.RegisterOutputType(WorkflowS3TagArrayOutput{})
	pulumi.RegisterOutputType(WorkflowStepOutput{})
	pulumi.RegisterOutputType(WorkflowStepArrayOutput{})
	pulumi.RegisterOutputType(WorkflowStepCopyStepDetailsPropertiesOutput{})
	pulumi.RegisterOutputType(WorkflowStepCopyStepDetailsPropertiesPtrOutput{})
	pulumi.RegisterOutputType(WorkflowStepCustomStepDetailsPropertiesOutput{})
	pulumi.RegisterOutputType(WorkflowStepCustomStepDetailsPropertiesPtrOutput{})
	pulumi.RegisterOutputType(WorkflowStepDecryptStepDetailsPropertiesOutput{})
	pulumi.RegisterOutputType(WorkflowStepDecryptStepDetailsPropertiesPtrOutput{})
	pulumi.RegisterOutputType(WorkflowStepDeleteStepDetailsPropertiesOutput{})
	pulumi.RegisterOutputType(WorkflowStepDeleteStepDetailsPropertiesPtrOutput{})
	pulumi.RegisterOutputType(WorkflowStepTagStepDetailsPropertiesOutput{})
	pulumi.RegisterOutputType(WorkflowStepTagStepDetailsPropertiesPtrOutput{})
}
