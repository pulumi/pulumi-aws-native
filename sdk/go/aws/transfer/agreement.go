// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package transfer

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Transfer::Agreement
type Agreement struct {
	pulumi.CustomResourceState

	// Specifies the access role for the agreement.
	AccessRole pulumi.StringOutput `pulumi:"accessRole"`
	// A unique identifier for the agreement.
	AgreementId pulumi.StringOutput `pulumi:"agreementId"`
	// Specifies the unique Amazon Resource Name (ARN) for the agreement.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Specifies the base directory for the agreement.
	BaseDirectory pulumi.StringOutput `pulumi:"baseDirectory"`
	// A textual description for the agreement.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A unique identifier for the local profile.
	LocalProfileId pulumi.StringOutput `pulumi:"localProfileId"`
	// A unique identifier for the partner profile.
	PartnerProfileId pulumi.StringOutput `pulumi:"partnerProfileId"`
	// A unique identifier for the server.
	ServerId pulumi.StringOutput `pulumi:"serverId"`
	// Specifies the status of the agreement.
	Status AgreementStatusPtrOutput `pulumi:"status"`
	// Key-value pairs that can be used to group and search for agreements. Tags are metadata attached to agreements for any purpose.
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewAgreement registers a new resource with the given unique name, arguments, and options.
func NewAgreement(ctx *pulumi.Context,
	name string, args *AgreementArgs, opts ...pulumi.ResourceOption) (*Agreement, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccessRole == nil {
		return nil, errors.New("invalid value for required argument 'AccessRole'")
	}
	if args.BaseDirectory == nil {
		return nil, errors.New("invalid value for required argument 'BaseDirectory'")
	}
	if args.LocalProfileId == nil {
		return nil, errors.New("invalid value for required argument 'LocalProfileId'")
	}
	if args.PartnerProfileId == nil {
		return nil, errors.New("invalid value for required argument 'PartnerProfileId'")
	}
	if args.ServerId == nil {
		return nil, errors.New("invalid value for required argument 'ServerId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"serverId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Agreement
	err := ctx.RegisterResource("aws-native:transfer:Agreement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAgreement gets an existing Agreement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAgreement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AgreementState, opts ...pulumi.ResourceOption) (*Agreement, error) {
	var resource Agreement
	err := ctx.ReadResource("aws-native:transfer:Agreement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Agreement resources.
type agreementState struct {
}

type AgreementState struct {
}

func (AgreementState) ElementType() reflect.Type {
	return reflect.TypeOf((*agreementState)(nil)).Elem()
}

type agreementArgs struct {
	// Specifies the access role for the agreement.
	AccessRole string `pulumi:"accessRole"`
	// Specifies the base directory for the agreement.
	BaseDirectory string `pulumi:"baseDirectory"`
	// A textual description for the agreement.
	Description *string `pulumi:"description"`
	// A unique identifier for the local profile.
	LocalProfileId string `pulumi:"localProfileId"`
	// A unique identifier for the partner profile.
	PartnerProfileId string `pulumi:"partnerProfileId"`
	// A unique identifier for the server.
	ServerId string `pulumi:"serverId"`
	// Specifies the status of the agreement.
	Status *AgreementStatus `pulumi:"status"`
	// Key-value pairs that can be used to group and search for agreements. Tags are metadata attached to agreements for any purpose.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a Agreement resource.
type AgreementArgs struct {
	// Specifies the access role for the agreement.
	AccessRole pulumi.StringInput
	// Specifies the base directory for the agreement.
	BaseDirectory pulumi.StringInput
	// A textual description for the agreement.
	Description pulumi.StringPtrInput
	// A unique identifier for the local profile.
	LocalProfileId pulumi.StringInput
	// A unique identifier for the partner profile.
	PartnerProfileId pulumi.StringInput
	// A unique identifier for the server.
	ServerId pulumi.StringInput
	// Specifies the status of the agreement.
	Status AgreementStatusPtrInput
	// Key-value pairs that can be used to group and search for agreements. Tags are metadata attached to agreements for any purpose.
	Tags aws.TagArrayInput
}

func (AgreementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*agreementArgs)(nil)).Elem()
}

type AgreementInput interface {
	pulumi.Input

	ToAgreementOutput() AgreementOutput
	ToAgreementOutputWithContext(ctx context.Context) AgreementOutput
}

func (*Agreement) ElementType() reflect.Type {
	return reflect.TypeOf((**Agreement)(nil)).Elem()
}

func (i *Agreement) ToAgreementOutput() AgreementOutput {
	return i.ToAgreementOutputWithContext(context.Background())
}

func (i *Agreement) ToAgreementOutputWithContext(ctx context.Context) AgreementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgreementOutput)
}

type AgreementOutput struct{ *pulumi.OutputState }

func (AgreementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Agreement)(nil)).Elem()
}

func (o AgreementOutput) ToAgreementOutput() AgreementOutput {
	return o
}

func (o AgreementOutput) ToAgreementOutputWithContext(ctx context.Context) AgreementOutput {
	return o
}

// Specifies the access role for the agreement.
func (o AgreementOutput) AccessRole() pulumi.StringOutput {
	return o.ApplyT(func(v *Agreement) pulumi.StringOutput { return v.AccessRole }).(pulumi.StringOutput)
}

// A unique identifier for the agreement.
func (o AgreementOutput) AgreementId() pulumi.StringOutput {
	return o.ApplyT(func(v *Agreement) pulumi.StringOutput { return v.AgreementId }).(pulumi.StringOutput)
}

// Specifies the unique Amazon Resource Name (ARN) for the agreement.
func (o AgreementOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Agreement) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Specifies the base directory for the agreement.
func (o AgreementOutput) BaseDirectory() pulumi.StringOutput {
	return o.ApplyT(func(v *Agreement) pulumi.StringOutput { return v.BaseDirectory }).(pulumi.StringOutput)
}

// A textual description for the agreement.
func (o AgreementOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Agreement) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A unique identifier for the local profile.
func (o AgreementOutput) LocalProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v *Agreement) pulumi.StringOutput { return v.LocalProfileId }).(pulumi.StringOutput)
}

// A unique identifier for the partner profile.
func (o AgreementOutput) PartnerProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v *Agreement) pulumi.StringOutput { return v.PartnerProfileId }).(pulumi.StringOutput)
}

// A unique identifier for the server.
func (o AgreementOutput) ServerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Agreement) pulumi.StringOutput { return v.ServerId }).(pulumi.StringOutput)
}

// Specifies the status of the agreement.
func (o AgreementOutput) Status() AgreementStatusPtrOutput {
	return o.ApplyT(func(v *Agreement) AgreementStatusPtrOutput { return v.Status }).(AgreementStatusPtrOutput)
}

// Key-value pairs that can be used to group and search for agreements. Tags are metadata attached to agreements for any purpose.
func (o AgreementOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Agreement) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AgreementInput)(nil)).Elem(), &Agreement{})
	pulumi.RegisterOutputType(AgreementOutput{})
}
