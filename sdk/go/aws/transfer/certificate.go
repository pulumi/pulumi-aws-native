// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package transfer

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Transfer::Certificate
type Certificate struct {
	pulumi.CustomResourceState

	// Specifies the active date for the certificate.
	ActiveDate pulumi.StringPtrOutput `pulumi:"activeDate"`
	// Specifies the unique Amazon Resource Name (ARN) for the agreement.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Specifies the certificate body to be imported.
	Certificate pulumi.StringOutput `pulumi:"certificate"`
	// Specifies the certificate chain to be imported.
	CertificateChain pulumi.StringPtrOutput `pulumi:"certificateChain"`
	// A unique identifier for the certificate.
	CertificateId pulumi.StringOutput `pulumi:"certificateId"`
	// A textual description for the certificate.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies the inactive date for the certificate.
	InactiveDate pulumi.StringPtrOutput `pulumi:"inactiveDate"`
	// Specifies the not after date for the certificate.
	NotAfterDate pulumi.StringOutput `pulumi:"notAfterDate"`
	// Specifies the not before date for the certificate.
	NotBeforeDate pulumi.StringOutput `pulumi:"notBeforeDate"`
	// Specifies the private key for the certificate.
	PrivateKey pulumi.StringPtrOutput `pulumi:"privateKey"`
	// Specifies Certificate's serial.
	Serial pulumi.StringOutput `pulumi:"serial"`
	// A status description for the certificate.
	Status CertificateStatusOutput `pulumi:"status"`
	// Key-value pairs that can be used to group and search for certificates. Tags are metadata attached to certificates for any purpose.
	Tags CertificateTagArrayOutput `pulumi:"tags"`
	// Describing the type of certificate. With or without a private key.
	Type CertificateTypeOutput `pulumi:"type"`
	// Specifies the usage type for the certificate.
	Usage CertificateUsageOutput `pulumi:"usage"`
}

// NewCertificate registers a new resource with the given unique name, arguments, and options.
func NewCertificate(ctx *pulumi.Context,
	name string, args *CertificateArgs, opts ...pulumi.ResourceOption) (*Certificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Certificate == nil {
		return nil, errors.New("invalid value for required argument 'Certificate'")
	}
	if args.Usage == nil {
		return nil, errors.New("invalid value for required argument 'Usage'")
	}
	var resource Certificate
	err := ctx.RegisterResource("aws-native:transfer:Certificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificate gets an existing Certificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateState, opts ...pulumi.ResourceOption) (*Certificate, error) {
	var resource Certificate
	err := ctx.ReadResource("aws-native:transfer:Certificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Certificate resources.
type certificateState struct {
}

type CertificateState struct {
}

func (CertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateState)(nil)).Elem()
}

type certificateArgs struct {
	// Specifies the active date for the certificate.
	ActiveDate *string `pulumi:"activeDate"`
	// Specifies the certificate body to be imported.
	Certificate string `pulumi:"certificate"`
	// Specifies the certificate chain to be imported.
	CertificateChain *string `pulumi:"certificateChain"`
	// A textual description for the certificate.
	Description *string `pulumi:"description"`
	// Specifies the inactive date for the certificate.
	InactiveDate *string `pulumi:"inactiveDate"`
	// Specifies the private key for the certificate.
	PrivateKey *string `pulumi:"privateKey"`
	// Key-value pairs that can be used to group and search for certificates. Tags are metadata attached to certificates for any purpose.
	Tags []CertificateTag `pulumi:"tags"`
	// Specifies the usage type for the certificate.
	Usage CertificateUsage `pulumi:"usage"`
}

// The set of arguments for constructing a Certificate resource.
type CertificateArgs struct {
	// Specifies the active date for the certificate.
	ActiveDate pulumi.StringPtrInput
	// Specifies the certificate body to be imported.
	Certificate pulumi.StringInput
	// Specifies the certificate chain to be imported.
	CertificateChain pulumi.StringPtrInput
	// A textual description for the certificate.
	Description pulumi.StringPtrInput
	// Specifies the inactive date for the certificate.
	InactiveDate pulumi.StringPtrInput
	// Specifies the private key for the certificate.
	PrivateKey pulumi.StringPtrInput
	// Key-value pairs that can be used to group and search for certificates. Tags are metadata attached to certificates for any purpose.
	Tags CertificateTagArrayInput
	// Specifies the usage type for the certificate.
	Usage CertificateUsageInput
}

func (CertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateArgs)(nil)).Elem()
}

type CertificateInput interface {
	pulumi.Input

	ToCertificateOutput() CertificateOutput
	ToCertificateOutputWithContext(ctx context.Context) CertificateOutput
}

func (*Certificate) ElementType() reflect.Type {
	return reflect.TypeOf((**Certificate)(nil)).Elem()
}

func (i *Certificate) ToCertificateOutput() CertificateOutput {
	return i.ToCertificateOutputWithContext(context.Background())
}

func (i *Certificate) ToCertificateOutputWithContext(ctx context.Context) CertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateOutput)
}

type CertificateOutput struct{ *pulumi.OutputState }

func (CertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Certificate)(nil)).Elem()
}

func (o CertificateOutput) ToCertificateOutput() CertificateOutput {
	return o
}

func (o CertificateOutput) ToCertificateOutputWithContext(ctx context.Context) CertificateOutput {
	return o
}

// Specifies the active date for the certificate.
func (o CertificateOutput) ActiveDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringPtrOutput { return v.ActiveDate }).(pulumi.StringPtrOutput)
}

// Specifies the unique Amazon Resource Name (ARN) for the agreement.
func (o CertificateOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Specifies the certificate body to be imported.
func (o CertificateOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.Certificate }).(pulumi.StringOutput)
}

// Specifies the certificate chain to be imported.
func (o CertificateOutput) CertificateChain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringPtrOutput { return v.CertificateChain }).(pulumi.StringPtrOutput)
}

// A unique identifier for the certificate.
func (o CertificateOutput) CertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.CertificateId }).(pulumi.StringOutput)
}

// A textual description for the certificate.
func (o CertificateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the inactive date for the certificate.
func (o CertificateOutput) InactiveDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringPtrOutput { return v.InactiveDate }).(pulumi.StringPtrOutput)
}

// Specifies the not after date for the certificate.
func (o CertificateOutput) NotAfterDate() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.NotAfterDate }).(pulumi.StringOutput)
}

// Specifies the not before date for the certificate.
func (o CertificateOutput) NotBeforeDate() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.NotBeforeDate }).(pulumi.StringOutput)
}

// Specifies the private key for the certificate.
func (o CertificateOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringPtrOutput { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

// Specifies Certificate's serial.
func (o CertificateOutput) Serial() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.Serial }).(pulumi.StringOutput)
}

// A status description for the certificate.
func (o CertificateOutput) Status() CertificateStatusOutput {
	return o.ApplyT(func(v *Certificate) CertificateStatusOutput { return v.Status }).(CertificateStatusOutput)
}

// Key-value pairs that can be used to group and search for certificates. Tags are metadata attached to certificates for any purpose.
func (o CertificateOutput) Tags() CertificateTagArrayOutput {
	return o.ApplyT(func(v *Certificate) CertificateTagArrayOutput { return v.Tags }).(CertificateTagArrayOutput)
}

// Describing the type of certificate. With or without a private key.
func (o CertificateOutput) Type() CertificateTypeOutput {
	return o.ApplyT(func(v *Certificate) CertificateTypeOutput { return v.Type }).(CertificateTypeOutput)
}

// Specifies the usage type for the certificate.
func (o CertificateOutput) Usage() CertificateUsageOutput {
	return o.ApplyT(func(v *Certificate) CertificateUsageOutput { return v.Usage }).(CertificateUsageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateInput)(nil)).Elem(), &Certificate{})
	pulumi.RegisterOutputType(CertificateOutput{})
}
