// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package transfer

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Transfer::Connector
func LookupConnector(ctx *pulumi.Context, args *LookupConnectorArgs, opts ...pulumi.InvokeOption) (*LookupConnectorResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupConnectorResult
	err := ctx.Invoke("aws-native:transfer:getConnector", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupConnectorArgs struct {
	// A unique identifier for the connector.
	ConnectorId string `pulumi:"connectorId"`
}

type LookupConnectorResult struct {
	// Specifies the access role for the connector.
	AccessRole *string `pulumi:"accessRole"`
	// Specifies the unique Amazon Resource Name (ARN) for the workflow.
	Arn *string `pulumi:"arn"`
	// Configuration for an AS2 connector.
	As2Config *As2ConfigProperties `pulumi:"as2Config"`
	// A unique identifier for the connector.
	ConnectorId *string `pulumi:"connectorId"`
	// Specifies the logging role for the connector.
	LoggingRole *string `pulumi:"loggingRole"`
	// Key-value pairs that can be used to group and search for workflows. Tags are metadata attached to workflows for any purpose.
	Tags []ConnectorTag `pulumi:"tags"`
	// URL for Connector
	Url *string `pulumi:"url"`
}

func LookupConnectorOutput(ctx *pulumi.Context, args LookupConnectorOutputArgs, opts ...pulumi.InvokeOption) LookupConnectorResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupConnectorResult, error) {
			args := v.(LookupConnectorArgs)
			r, err := LookupConnector(ctx, &args, opts...)
			var s LookupConnectorResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupConnectorResultOutput)
}

type LookupConnectorOutputArgs struct {
	// A unique identifier for the connector.
	ConnectorId pulumi.StringInput `pulumi:"connectorId"`
}

func (LookupConnectorOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConnectorArgs)(nil)).Elem()
}

type LookupConnectorResultOutput struct{ *pulumi.OutputState }

func (LookupConnectorResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConnectorResult)(nil)).Elem()
}

func (o LookupConnectorResultOutput) ToLookupConnectorResultOutput() LookupConnectorResultOutput {
	return o
}

func (o LookupConnectorResultOutput) ToLookupConnectorResultOutputWithContext(ctx context.Context) LookupConnectorResultOutput {
	return o
}

// Specifies the access role for the connector.
func (o LookupConnectorResultOutput) AccessRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupConnectorResult) *string { return v.AccessRole }).(pulumi.StringPtrOutput)
}

// Specifies the unique Amazon Resource Name (ARN) for the workflow.
func (o LookupConnectorResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupConnectorResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// Configuration for an AS2 connector.
func (o LookupConnectorResultOutput) As2Config() As2ConfigPropertiesPtrOutput {
	return o.ApplyT(func(v LookupConnectorResult) *As2ConfigProperties { return v.As2Config }).(As2ConfigPropertiesPtrOutput)
}

// A unique identifier for the connector.
func (o LookupConnectorResultOutput) ConnectorId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupConnectorResult) *string { return v.ConnectorId }).(pulumi.StringPtrOutput)
}

// Specifies the logging role for the connector.
func (o LookupConnectorResultOutput) LoggingRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupConnectorResult) *string { return v.LoggingRole }).(pulumi.StringPtrOutput)
}

// Key-value pairs that can be used to group and search for workflows. Tags are metadata attached to workflows for any purpose.
func (o LookupConnectorResultOutput) Tags() ConnectorTagArrayOutput {
	return o.ApplyT(func(v LookupConnectorResult) []ConnectorTag { return v.Tags }).(ConnectorTagArrayOutput)
}

// URL for Connector
func (o LookupConnectorResultOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupConnectorResult) *string { return v.Url }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupConnectorResultOutput{})
}
