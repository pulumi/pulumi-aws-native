// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package transfer

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Transfer::User
//
// Deprecated: User is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
type User struct {
	pulumi.CustomResourceState

	Arn                   pulumi.StringOutput                  `pulumi:"arn"`
	HomeDirectory         pulumi.StringPtrOutput               `pulumi:"homeDirectory"`
	HomeDirectoryMappings UserHomeDirectoryMapEntryArrayOutput `pulumi:"homeDirectoryMappings"`
	HomeDirectoryType     pulumi.StringPtrOutput               `pulumi:"homeDirectoryType"`
	Policy                pulumi.StringPtrOutput               `pulumi:"policy"`
	PosixProfile          UserPosixProfilePtrOutput            `pulumi:"posixProfile"`
	Role                  pulumi.StringOutput                  `pulumi:"role"`
	ServerId              pulumi.StringOutput                  `pulumi:"serverId"`
	SshPublicKeys         UserSshPublicKeyArrayOutput          `pulumi:"sshPublicKeys"`
	Tags                  UserTagArrayOutput                   `pulumi:"tags"`
	UserName              pulumi.StringOutput                  `pulumi:"userName"`
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOption) (*User, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.ServerId == nil {
		return nil, errors.New("invalid value for required argument 'ServerId'")
	}
	var resource User
	err := ctx.RegisterResource("aws-native:transfer:User", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserState, opts ...pulumi.ResourceOption) (*User, error) {
	var resource User
	err := ctx.ReadResource("aws-native:transfer:User", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering User resources.
type userState struct {
}

type UserState struct {
}

func (UserState) ElementType() reflect.Type {
	return reflect.TypeOf((*userState)(nil)).Elem()
}

type userArgs struct {
	HomeDirectory         *string                     `pulumi:"homeDirectory"`
	HomeDirectoryMappings []UserHomeDirectoryMapEntry `pulumi:"homeDirectoryMappings"`
	HomeDirectoryType     *string                     `pulumi:"homeDirectoryType"`
	Policy                *string                     `pulumi:"policy"`
	PosixProfile          *UserPosixProfile           `pulumi:"posixProfile"`
	Role                  string                      `pulumi:"role"`
	ServerId              string                      `pulumi:"serverId"`
	SshPublicKeys         []UserSshPublicKey          `pulumi:"sshPublicKeys"`
	Tags                  []UserTag                   `pulumi:"tags"`
	UserName              *string                     `pulumi:"userName"`
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	HomeDirectory         pulumi.StringPtrInput
	HomeDirectoryMappings UserHomeDirectoryMapEntryArrayInput
	HomeDirectoryType     pulumi.StringPtrInput
	Policy                pulumi.StringPtrInput
	PosixProfile          UserPosixProfilePtrInput
	Role                  pulumi.StringInput
	ServerId              pulumi.StringInput
	SshPublicKeys         UserSshPublicKeyArrayInput
	Tags                  UserTagArrayInput
	UserName              pulumi.StringPtrInput
}

func (UserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userArgs)(nil)).Elem()
}

type UserInput interface {
	pulumi.Input

	ToUserOutput() UserOutput
	ToUserOutputWithContext(ctx context.Context) UserOutput
}

func (*User) ElementType() reflect.Type {
	return reflect.TypeOf((*User)(nil))
}

func (i *User) ToUserOutput() UserOutput {
	return i.ToUserOutputWithContext(context.Background())
}

func (i *User) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserOutput)
}

type UserOutput struct{ *pulumi.OutputState }

func (UserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*User)(nil))
}

func (o UserOutput) ToUserOutput() UserOutput {
	return o
}

func (o UserOutput) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserInput)(nil)).Elem(), &User{})
	pulumi.RegisterOutputType(UserOutput{})
}
