// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package transfer

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::Transfer::Connector
type Connector struct {
	pulumi.CustomResourceState

	// Specifies the access role for the connector.
	AccessRole pulumi.StringOutput `pulumi:"accessRole"`
	// Specifies the unique Amazon Resource Name (ARN) for the workflow.
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Configuration for an AS2 connector.
	As2Config As2ConfigPropertiesOutput `pulumi:"as2Config"`
	// A unique identifier for the connector.
	ConnectorId pulumi.StringOutput `pulumi:"connectorId"`
	// Specifies the logging role for the connector.
	LoggingRole pulumi.StringPtrOutput `pulumi:"loggingRole"`
	// Key-value pairs that can be used to group and search for workflows. Tags are metadata attached to workflows for any purpose.
	Tags ConnectorTagArrayOutput `pulumi:"tags"`
	// URL for Connector
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewConnector registers a new resource with the given unique name, arguments, and options.
func NewConnector(ctx *pulumi.Context,
	name string, args *ConnectorArgs, opts ...pulumi.ResourceOption) (*Connector, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccessRole == nil {
		return nil, errors.New("invalid value for required argument 'AccessRole'")
	}
	if args.As2Config == nil {
		return nil, errors.New("invalid value for required argument 'As2Config'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	var resource Connector
	err := ctx.RegisterResource("aws-native:transfer:Connector", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnector gets an existing Connector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectorState, opts ...pulumi.ResourceOption) (*Connector, error) {
	var resource Connector
	err := ctx.ReadResource("aws-native:transfer:Connector", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Connector resources.
type connectorState struct {
}

type ConnectorState struct {
}

func (ConnectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorState)(nil)).Elem()
}

type connectorArgs struct {
	// Specifies the access role for the connector.
	AccessRole string `pulumi:"accessRole"`
	// Configuration for an AS2 connector.
	As2Config As2ConfigProperties `pulumi:"as2Config"`
	// Specifies the logging role for the connector.
	LoggingRole *string `pulumi:"loggingRole"`
	// Key-value pairs that can be used to group and search for workflows. Tags are metadata attached to workflows for any purpose.
	Tags []ConnectorTag `pulumi:"tags"`
	// URL for Connector
	Url string `pulumi:"url"`
}

// The set of arguments for constructing a Connector resource.
type ConnectorArgs struct {
	// Specifies the access role for the connector.
	AccessRole pulumi.StringInput
	// Configuration for an AS2 connector.
	As2Config As2ConfigPropertiesInput
	// Specifies the logging role for the connector.
	LoggingRole pulumi.StringPtrInput
	// Key-value pairs that can be used to group and search for workflows. Tags are metadata attached to workflows for any purpose.
	Tags ConnectorTagArrayInput
	// URL for Connector
	Url pulumi.StringInput
}

func (ConnectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorArgs)(nil)).Elem()
}

type ConnectorInput interface {
	pulumi.Input

	ToConnectorOutput() ConnectorOutput
	ToConnectorOutputWithContext(ctx context.Context) ConnectorOutput
}

func (*Connector) ElementType() reflect.Type {
	return reflect.TypeOf((**Connector)(nil)).Elem()
}

func (i *Connector) ToConnectorOutput() ConnectorOutput {
	return i.ToConnectorOutputWithContext(context.Background())
}

func (i *Connector) ToConnectorOutputWithContext(ctx context.Context) ConnectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorOutput)
}

type ConnectorOutput struct{ *pulumi.OutputState }

func (ConnectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Connector)(nil)).Elem()
}

func (o ConnectorOutput) ToConnectorOutput() ConnectorOutput {
	return o
}

func (o ConnectorOutput) ToConnectorOutputWithContext(ctx context.Context) ConnectorOutput {
	return o
}

// Specifies the access role for the connector.
func (o ConnectorOutput) AccessRole() pulumi.StringOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringOutput { return v.AccessRole }).(pulumi.StringOutput)
}

// Specifies the unique Amazon Resource Name (ARN) for the workflow.
func (o ConnectorOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Configuration for an AS2 connector.
func (o ConnectorOutput) As2Config() As2ConfigPropertiesOutput {
	return o.ApplyT(func(v *Connector) As2ConfigPropertiesOutput { return v.As2Config }).(As2ConfigPropertiesOutput)
}

// A unique identifier for the connector.
func (o ConnectorOutput) ConnectorId() pulumi.StringOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringOutput { return v.ConnectorId }).(pulumi.StringOutput)
}

// Specifies the logging role for the connector.
func (o ConnectorOutput) LoggingRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringPtrOutput { return v.LoggingRole }).(pulumi.StringPtrOutput)
}

// Key-value pairs that can be used to group and search for workflows. Tags are metadata attached to workflows for any purpose.
func (o ConnectorOutput) Tags() ConnectorTagArrayOutput {
	return o.ApplyT(func(v *Connector) ConnectorTagArrayOutput { return v.Tags }).(ConnectorTagArrayOutput)
}

// URL for Connector
func (o ConnectorOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorInput)(nil)).Elem(), &Connector{})
	pulumi.RegisterOutputType(ConnectorOutput{})
}
