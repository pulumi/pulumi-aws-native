// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package simspaceweaver

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// AWS::SimSpaceWeaver::Simulation resource creates an AWS Simulation.
type Simulation struct {
	pulumi.CustomResourceState

	// Json object with all simulation details
	DescribePayload pulumi.StringOutput `pulumi:"describePayload"`
	// The maximum running time of the simulation.
	MaximumDuration pulumi.StringPtrOutput `pulumi:"maximumDuration"`
	// The name of the simulation.
	Name pulumi.StringOutput `pulumi:"name"`
	// Role ARN.
	RoleArn            pulumi.StringOutput           `pulumi:"roleArn"`
	SchemaS3Location   SimulationS3LocationPtrOutput `pulumi:"schemaS3Location"`
	SnapshotS3Location SimulationS3LocationPtrOutput `pulumi:"snapshotS3Location"`
}

// NewSimulation registers a new resource with the given unique name, arguments, and options.
func NewSimulation(ctx *pulumi.Context,
	name string, args *SimulationArgs, opts ...pulumi.ResourceOption) (*Simulation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Simulation
	err := ctx.RegisterResource("aws-native:simspaceweaver:Simulation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSimulation gets an existing Simulation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSimulation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SimulationState, opts ...pulumi.ResourceOption) (*Simulation, error) {
	var resource Simulation
	err := ctx.ReadResource("aws-native:simspaceweaver:Simulation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Simulation resources.
type simulationState struct {
}

type SimulationState struct {
}

func (SimulationState) ElementType() reflect.Type {
	return reflect.TypeOf((*simulationState)(nil)).Elem()
}

type simulationArgs struct {
	// The maximum running time of the simulation.
	MaximumDuration *string `pulumi:"maximumDuration"`
	// The name of the simulation.
	Name *string `pulumi:"name"`
	// Role ARN.
	RoleArn            string                `pulumi:"roleArn"`
	SchemaS3Location   *SimulationS3Location `pulumi:"schemaS3Location"`
	SnapshotS3Location *SimulationS3Location `pulumi:"snapshotS3Location"`
}

// The set of arguments for constructing a Simulation resource.
type SimulationArgs struct {
	// The maximum running time of the simulation.
	MaximumDuration pulumi.StringPtrInput
	// The name of the simulation.
	Name pulumi.StringPtrInput
	// Role ARN.
	RoleArn            pulumi.StringInput
	SchemaS3Location   SimulationS3LocationPtrInput
	SnapshotS3Location SimulationS3LocationPtrInput
}

func (SimulationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*simulationArgs)(nil)).Elem()
}

type SimulationInput interface {
	pulumi.Input

	ToSimulationOutput() SimulationOutput
	ToSimulationOutputWithContext(ctx context.Context) SimulationOutput
}

func (*Simulation) ElementType() reflect.Type {
	return reflect.TypeOf((**Simulation)(nil)).Elem()
}

func (i *Simulation) ToSimulationOutput() SimulationOutput {
	return i.ToSimulationOutputWithContext(context.Background())
}

func (i *Simulation) ToSimulationOutputWithContext(ctx context.Context) SimulationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SimulationOutput)
}

type SimulationOutput struct{ *pulumi.OutputState }

func (SimulationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Simulation)(nil)).Elem()
}

func (o SimulationOutput) ToSimulationOutput() SimulationOutput {
	return o
}

func (o SimulationOutput) ToSimulationOutputWithContext(ctx context.Context) SimulationOutput {
	return o
}

// Json object with all simulation details
func (o SimulationOutput) DescribePayload() pulumi.StringOutput {
	return o.ApplyT(func(v *Simulation) pulumi.StringOutput { return v.DescribePayload }).(pulumi.StringOutput)
}

// The maximum running time of the simulation.
func (o SimulationOutput) MaximumDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Simulation) pulumi.StringPtrOutput { return v.MaximumDuration }).(pulumi.StringPtrOutput)
}

// The name of the simulation.
func (o SimulationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Simulation) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Role ARN.
func (o SimulationOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Simulation) pulumi.StringOutput { return v.RoleArn }).(pulumi.StringOutput)
}

func (o SimulationOutput) SchemaS3Location() SimulationS3LocationPtrOutput {
	return o.ApplyT(func(v *Simulation) SimulationS3LocationPtrOutput { return v.SchemaS3Location }).(SimulationS3LocationPtrOutput)
}

func (o SimulationOutput) SnapshotS3Location() SimulationS3LocationPtrOutput {
	return o.ApplyT(func(v *Simulation) SimulationS3LocationPtrOutput { return v.SnapshotS3Location }).(SimulationS3LocationPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SimulationInput)(nil)).Elem(), &Simulation{})
	pulumi.RegisterOutputType(SimulationOutput{})
}
