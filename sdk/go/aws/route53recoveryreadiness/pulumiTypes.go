// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package route53recoveryreadiness

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CellTag struct {
	Key   string   `pulumi:"key"`
	Value []string `pulumi:"value"`
}

// CellTagInput is an input type that accepts CellTagArgs and CellTagOutput values.
// You can construct a concrete instance of `CellTagInput` via:
//
//          CellTagArgs{...}
type CellTagInput interface {
	pulumi.Input

	ToCellTagOutput() CellTagOutput
	ToCellTagOutputWithContext(context.Context) CellTagOutput
}

type CellTagArgs struct {
	Key   pulumi.StringInput      `pulumi:"key"`
	Value pulumi.StringArrayInput `pulumi:"value"`
}

func (CellTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CellTag)(nil)).Elem()
}

func (i CellTagArgs) ToCellTagOutput() CellTagOutput {
	return i.ToCellTagOutputWithContext(context.Background())
}

func (i CellTagArgs) ToCellTagOutputWithContext(ctx context.Context) CellTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CellTagOutput)
}

// CellTagArrayInput is an input type that accepts CellTagArray and CellTagArrayOutput values.
// You can construct a concrete instance of `CellTagArrayInput` via:
//
//          CellTagArray{ CellTagArgs{...} }
type CellTagArrayInput interface {
	pulumi.Input

	ToCellTagArrayOutput() CellTagArrayOutput
	ToCellTagArrayOutputWithContext(context.Context) CellTagArrayOutput
}

type CellTagArray []CellTagInput

func (CellTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CellTag)(nil)).Elem()
}

func (i CellTagArray) ToCellTagArrayOutput() CellTagArrayOutput {
	return i.ToCellTagArrayOutputWithContext(context.Background())
}

func (i CellTagArray) ToCellTagArrayOutputWithContext(ctx context.Context) CellTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CellTagArrayOutput)
}

type CellTagOutput struct{ *pulumi.OutputState }

func (CellTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CellTag)(nil)).Elem()
}

func (o CellTagOutput) ToCellTagOutput() CellTagOutput {
	return o
}

func (o CellTagOutput) ToCellTagOutputWithContext(ctx context.Context) CellTagOutput {
	return o
}

func (o CellTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CellTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o CellTagOutput) Value() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CellTag) []string { return v.Value }).(pulumi.StringArrayOutput)
}

type CellTagArrayOutput struct{ *pulumi.OutputState }

func (CellTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CellTag)(nil)).Elem()
}

func (o CellTagArrayOutput) ToCellTagArrayOutput() CellTagArrayOutput {
	return o
}

func (o CellTagArrayOutput) ToCellTagArrayOutputWithContext(ctx context.Context) CellTagArrayOutput {
	return o
}

func (o CellTagArrayOutput) Index(i pulumi.IntInput) CellTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CellTag {
		return vs[0].([]CellTag)[vs[1].(int)]
	}).(CellTagOutput)
}

type ReadinessCheckTag struct {
	Key   string   `pulumi:"key"`
	Value []string `pulumi:"value"`
}

// ReadinessCheckTagInput is an input type that accepts ReadinessCheckTagArgs and ReadinessCheckTagOutput values.
// You can construct a concrete instance of `ReadinessCheckTagInput` via:
//
//          ReadinessCheckTagArgs{...}
type ReadinessCheckTagInput interface {
	pulumi.Input

	ToReadinessCheckTagOutput() ReadinessCheckTagOutput
	ToReadinessCheckTagOutputWithContext(context.Context) ReadinessCheckTagOutput
}

type ReadinessCheckTagArgs struct {
	Key   pulumi.StringInput      `pulumi:"key"`
	Value pulumi.StringArrayInput `pulumi:"value"`
}

func (ReadinessCheckTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReadinessCheckTag)(nil)).Elem()
}

func (i ReadinessCheckTagArgs) ToReadinessCheckTagOutput() ReadinessCheckTagOutput {
	return i.ToReadinessCheckTagOutputWithContext(context.Background())
}

func (i ReadinessCheckTagArgs) ToReadinessCheckTagOutputWithContext(ctx context.Context) ReadinessCheckTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReadinessCheckTagOutput)
}

// ReadinessCheckTagArrayInput is an input type that accepts ReadinessCheckTagArray and ReadinessCheckTagArrayOutput values.
// You can construct a concrete instance of `ReadinessCheckTagArrayInput` via:
//
//          ReadinessCheckTagArray{ ReadinessCheckTagArgs{...} }
type ReadinessCheckTagArrayInput interface {
	pulumi.Input

	ToReadinessCheckTagArrayOutput() ReadinessCheckTagArrayOutput
	ToReadinessCheckTagArrayOutputWithContext(context.Context) ReadinessCheckTagArrayOutput
}

type ReadinessCheckTagArray []ReadinessCheckTagInput

func (ReadinessCheckTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReadinessCheckTag)(nil)).Elem()
}

func (i ReadinessCheckTagArray) ToReadinessCheckTagArrayOutput() ReadinessCheckTagArrayOutput {
	return i.ToReadinessCheckTagArrayOutputWithContext(context.Background())
}

func (i ReadinessCheckTagArray) ToReadinessCheckTagArrayOutputWithContext(ctx context.Context) ReadinessCheckTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReadinessCheckTagArrayOutput)
}

type ReadinessCheckTagOutput struct{ *pulumi.OutputState }

func (ReadinessCheckTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReadinessCheckTag)(nil)).Elem()
}

func (o ReadinessCheckTagOutput) ToReadinessCheckTagOutput() ReadinessCheckTagOutput {
	return o
}

func (o ReadinessCheckTagOutput) ToReadinessCheckTagOutputWithContext(ctx context.Context) ReadinessCheckTagOutput {
	return o
}

func (o ReadinessCheckTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ReadinessCheckTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o ReadinessCheckTagOutput) Value() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ReadinessCheckTag) []string { return v.Value }).(pulumi.StringArrayOutput)
}

type ReadinessCheckTagArrayOutput struct{ *pulumi.OutputState }

func (ReadinessCheckTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReadinessCheckTag)(nil)).Elem()
}

func (o ReadinessCheckTagArrayOutput) ToReadinessCheckTagArrayOutput() ReadinessCheckTagArrayOutput {
	return o
}

func (o ReadinessCheckTagArrayOutput) ToReadinessCheckTagArrayOutputWithContext(ctx context.Context) ReadinessCheckTagArrayOutput {
	return o
}

func (o ReadinessCheckTagArrayOutput) Index(i pulumi.IntInput) ReadinessCheckTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReadinessCheckTag {
		return vs[0].([]ReadinessCheckTag)[vs[1].(int)]
	}).(ReadinessCheckTagOutput)
}

type RecoveryGroupTag struct {
	Key   string   `pulumi:"key"`
	Value []string `pulumi:"value"`
}

// RecoveryGroupTagInput is an input type that accepts RecoveryGroupTagArgs and RecoveryGroupTagOutput values.
// You can construct a concrete instance of `RecoveryGroupTagInput` via:
//
//          RecoveryGroupTagArgs{...}
type RecoveryGroupTagInput interface {
	pulumi.Input

	ToRecoveryGroupTagOutput() RecoveryGroupTagOutput
	ToRecoveryGroupTagOutputWithContext(context.Context) RecoveryGroupTagOutput
}

type RecoveryGroupTagArgs struct {
	Key   pulumi.StringInput      `pulumi:"key"`
	Value pulumi.StringArrayInput `pulumi:"value"`
}

func (RecoveryGroupTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecoveryGroupTag)(nil)).Elem()
}

func (i RecoveryGroupTagArgs) ToRecoveryGroupTagOutput() RecoveryGroupTagOutput {
	return i.ToRecoveryGroupTagOutputWithContext(context.Background())
}

func (i RecoveryGroupTagArgs) ToRecoveryGroupTagOutputWithContext(ctx context.Context) RecoveryGroupTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecoveryGroupTagOutput)
}

// RecoveryGroupTagArrayInput is an input type that accepts RecoveryGroupTagArray and RecoveryGroupTagArrayOutput values.
// You can construct a concrete instance of `RecoveryGroupTagArrayInput` via:
//
//          RecoveryGroupTagArray{ RecoveryGroupTagArgs{...} }
type RecoveryGroupTagArrayInput interface {
	pulumi.Input

	ToRecoveryGroupTagArrayOutput() RecoveryGroupTagArrayOutput
	ToRecoveryGroupTagArrayOutputWithContext(context.Context) RecoveryGroupTagArrayOutput
}

type RecoveryGroupTagArray []RecoveryGroupTagInput

func (RecoveryGroupTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecoveryGroupTag)(nil)).Elem()
}

func (i RecoveryGroupTagArray) ToRecoveryGroupTagArrayOutput() RecoveryGroupTagArrayOutput {
	return i.ToRecoveryGroupTagArrayOutputWithContext(context.Background())
}

func (i RecoveryGroupTagArray) ToRecoveryGroupTagArrayOutputWithContext(ctx context.Context) RecoveryGroupTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecoveryGroupTagArrayOutput)
}

type RecoveryGroupTagOutput struct{ *pulumi.OutputState }

func (RecoveryGroupTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecoveryGroupTag)(nil)).Elem()
}

func (o RecoveryGroupTagOutput) ToRecoveryGroupTagOutput() RecoveryGroupTagOutput {
	return o
}

func (o RecoveryGroupTagOutput) ToRecoveryGroupTagOutputWithContext(ctx context.Context) RecoveryGroupTagOutput {
	return o
}

func (o RecoveryGroupTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v RecoveryGroupTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o RecoveryGroupTagOutput) Value() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RecoveryGroupTag) []string { return v.Value }).(pulumi.StringArrayOutput)
}

type RecoveryGroupTagArrayOutput struct{ *pulumi.OutputState }

func (RecoveryGroupTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecoveryGroupTag)(nil)).Elem()
}

func (o RecoveryGroupTagArrayOutput) ToRecoveryGroupTagArrayOutput() RecoveryGroupTagArrayOutput {
	return o
}

func (o RecoveryGroupTagArrayOutput) ToRecoveryGroupTagArrayOutputWithContext(ctx context.Context) RecoveryGroupTagArrayOutput {
	return o
}

func (o RecoveryGroupTagArrayOutput) Index(i pulumi.IntInput) RecoveryGroupTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RecoveryGroupTag {
		return vs[0].([]RecoveryGroupTag)[vs[1].(int)]
	}).(RecoveryGroupTagOutput)
}

// A component for DNS/routing control readiness checks.
type ResourceSetDNSTargetResource struct {
	// The domain name that acts as an ingress point to a portion of the customer application.
	DomainName *string `pulumi:"domainName"`
	// The hosted zone Amazon Resource Name (ARN) that contains the DNS record with the provided name of the target resource.
	HostedZoneArn *string `pulumi:"hostedZoneArn"`
	// The Route 53 record set ID that will uniquely identify a DNS record, given a name and a type.
	RecordSetId *string `pulumi:"recordSetId"`
	// The type of DNS record of the target resource.
	RecordType     *string                    `pulumi:"recordType"`
	TargetResource *ResourceSetTargetResource `pulumi:"targetResource"`
}

// ResourceSetDNSTargetResourceInput is an input type that accepts ResourceSetDNSTargetResourceArgs and ResourceSetDNSTargetResourceOutput values.
// You can construct a concrete instance of `ResourceSetDNSTargetResourceInput` via:
//
//          ResourceSetDNSTargetResourceArgs{...}
type ResourceSetDNSTargetResourceInput interface {
	pulumi.Input

	ToResourceSetDNSTargetResourceOutput() ResourceSetDNSTargetResourceOutput
	ToResourceSetDNSTargetResourceOutputWithContext(context.Context) ResourceSetDNSTargetResourceOutput
}

// A component for DNS/routing control readiness checks.
type ResourceSetDNSTargetResourceArgs struct {
	// The domain name that acts as an ingress point to a portion of the customer application.
	DomainName pulumi.StringPtrInput `pulumi:"domainName"`
	// The hosted zone Amazon Resource Name (ARN) that contains the DNS record with the provided name of the target resource.
	HostedZoneArn pulumi.StringPtrInput `pulumi:"hostedZoneArn"`
	// The Route 53 record set ID that will uniquely identify a DNS record, given a name and a type.
	RecordSetId pulumi.StringPtrInput `pulumi:"recordSetId"`
	// The type of DNS record of the target resource.
	RecordType     pulumi.StringPtrInput             `pulumi:"recordType"`
	TargetResource ResourceSetTargetResourcePtrInput `pulumi:"targetResource"`
}

func (ResourceSetDNSTargetResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSetDNSTargetResource)(nil)).Elem()
}

func (i ResourceSetDNSTargetResourceArgs) ToResourceSetDNSTargetResourceOutput() ResourceSetDNSTargetResourceOutput {
	return i.ToResourceSetDNSTargetResourceOutputWithContext(context.Background())
}

func (i ResourceSetDNSTargetResourceArgs) ToResourceSetDNSTargetResourceOutputWithContext(ctx context.Context) ResourceSetDNSTargetResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSetDNSTargetResourceOutput)
}

func (i ResourceSetDNSTargetResourceArgs) ToResourceSetDNSTargetResourcePtrOutput() ResourceSetDNSTargetResourcePtrOutput {
	return i.ToResourceSetDNSTargetResourcePtrOutputWithContext(context.Background())
}

func (i ResourceSetDNSTargetResourceArgs) ToResourceSetDNSTargetResourcePtrOutputWithContext(ctx context.Context) ResourceSetDNSTargetResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSetDNSTargetResourceOutput).ToResourceSetDNSTargetResourcePtrOutputWithContext(ctx)
}

// ResourceSetDNSTargetResourcePtrInput is an input type that accepts ResourceSetDNSTargetResourceArgs, ResourceSetDNSTargetResourcePtr and ResourceSetDNSTargetResourcePtrOutput values.
// You can construct a concrete instance of `ResourceSetDNSTargetResourcePtrInput` via:
//
//          ResourceSetDNSTargetResourceArgs{...}
//
//  or:
//
//          nil
type ResourceSetDNSTargetResourcePtrInput interface {
	pulumi.Input

	ToResourceSetDNSTargetResourcePtrOutput() ResourceSetDNSTargetResourcePtrOutput
	ToResourceSetDNSTargetResourcePtrOutputWithContext(context.Context) ResourceSetDNSTargetResourcePtrOutput
}

type resourceSetDNSTargetResourcePtrType ResourceSetDNSTargetResourceArgs

func ResourceSetDNSTargetResourcePtr(v *ResourceSetDNSTargetResourceArgs) ResourceSetDNSTargetResourcePtrInput {
	return (*resourceSetDNSTargetResourcePtrType)(v)
}

func (*resourceSetDNSTargetResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSetDNSTargetResource)(nil)).Elem()
}

func (i *resourceSetDNSTargetResourcePtrType) ToResourceSetDNSTargetResourcePtrOutput() ResourceSetDNSTargetResourcePtrOutput {
	return i.ToResourceSetDNSTargetResourcePtrOutputWithContext(context.Background())
}

func (i *resourceSetDNSTargetResourcePtrType) ToResourceSetDNSTargetResourcePtrOutputWithContext(ctx context.Context) ResourceSetDNSTargetResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSetDNSTargetResourcePtrOutput)
}

// A component for DNS/routing control readiness checks.
type ResourceSetDNSTargetResourceOutput struct{ *pulumi.OutputState }

func (ResourceSetDNSTargetResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSetDNSTargetResource)(nil)).Elem()
}

func (o ResourceSetDNSTargetResourceOutput) ToResourceSetDNSTargetResourceOutput() ResourceSetDNSTargetResourceOutput {
	return o
}

func (o ResourceSetDNSTargetResourceOutput) ToResourceSetDNSTargetResourceOutputWithContext(ctx context.Context) ResourceSetDNSTargetResourceOutput {
	return o
}

func (o ResourceSetDNSTargetResourceOutput) ToResourceSetDNSTargetResourcePtrOutput() ResourceSetDNSTargetResourcePtrOutput {
	return o.ToResourceSetDNSTargetResourcePtrOutputWithContext(context.Background())
}

func (o ResourceSetDNSTargetResourceOutput) ToResourceSetDNSTargetResourcePtrOutputWithContext(ctx context.Context) ResourceSetDNSTargetResourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceSetDNSTargetResource) *ResourceSetDNSTargetResource {
		return &v
	}).(ResourceSetDNSTargetResourcePtrOutput)
}

// The domain name that acts as an ingress point to a portion of the customer application.
func (o ResourceSetDNSTargetResourceOutput) DomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSetDNSTargetResource) *string { return v.DomainName }).(pulumi.StringPtrOutput)
}

// The hosted zone Amazon Resource Name (ARN) that contains the DNS record with the provided name of the target resource.
func (o ResourceSetDNSTargetResourceOutput) HostedZoneArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSetDNSTargetResource) *string { return v.HostedZoneArn }).(pulumi.StringPtrOutput)
}

// The Route 53 record set ID that will uniquely identify a DNS record, given a name and a type.
func (o ResourceSetDNSTargetResourceOutput) RecordSetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSetDNSTargetResource) *string { return v.RecordSetId }).(pulumi.StringPtrOutput)
}

// The type of DNS record of the target resource.
func (o ResourceSetDNSTargetResourceOutput) RecordType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSetDNSTargetResource) *string { return v.RecordType }).(pulumi.StringPtrOutput)
}

func (o ResourceSetDNSTargetResourceOutput) TargetResource() ResourceSetTargetResourcePtrOutput {
	return o.ApplyT(func(v ResourceSetDNSTargetResource) *ResourceSetTargetResource { return v.TargetResource }).(ResourceSetTargetResourcePtrOutput)
}

type ResourceSetDNSTargetResourcePtrOutput struct{ *pulumi.OutputState }

func (ResourceSetDNSTargetResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSetDNSTargetResource)(nil)).Elem()
}

func (o ResourceSetDNSTargetResourcePtrOutput) ToResourceSetDNSTargetResourcePtrOutput() ResourceSetDNSTargetResourcePtrOutput {
	return o
}

func (o ResourceSetDNSTargetResourcePtrOutput) ToResourceSetDNSTargetResourcePtrOutputWithContext(ctx context.Context) ResourceSetDNSTargetResourcePtrOutput {
	return o
}

func (o ResourceSetDNSTargetResourcePtrOutput) Elem() ResourceSetDNSTargetResourceOutput {
	return o.ApplyT(func(v *ResourceSetDNSTargetResource) ResourceSetDNSTargetResource {
		if v != nil {
			return *v
		}
		var ret ResourceSetDNSTargetResource
		return ret
	}).(ResourceSetDNSTargetResourceOutput)
}

// The domain name that acts as an ingress point to a portion of the customer application.
func (o ResourceSetDNSTargetResourcePtrOutput) DomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSetDNSTargetResource) *string {
		if v == nil {
			return nil
		}
		return v.DomainName
	}).(pulumi.StringPtrOutput)
}

// The hosted zone Amazon Resource Name (ARN) that contains the DNS record with the provided name of the target resource.
func (o ResourceSetDNSTargetResourcePtrOutput) HostedZoneArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSetDNSTargetResource) *string {
		if v == nil {
			return nil
		}
		return v.HostedZoneArn
	}).(pulumi.StringPtrOutput)
}

// The Route 53 record set ID that will uniquely identify a DNS record, given a name and a type.
func (o ResourceSetDNSTargetResourcePtrOutput) RecordSetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSetDNSTargetResource) *string {
		if v == nil {
			return nil
		}
		return v.RecordSetId
	}).(pulumi.StringPtrOutput)
}

// The type of DNS record of the target resource.
func (o ResourceSetDNSTargetResourcePtrOutput) RecordType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSetDNSTargetResource) *string {
		if v == nil {
			return nil
		}
		return v.RecordType
	}).(pulumi.StringPtrOutput)
}

func (o ResourceSetDNSTargetResourcePtrOutput) TargetResource() ResourceSetTargetResourcePtrOutput {
	return o.ApplyT(func(v *ResourceSetDNSTargetResource) *ResourceSetTargetResource {
		if v == nil {
			return nil
		}
		return v.TargetResource
	}).(ResourceSetTargetResourcePtrOutput)
}

// The Network Load Balancer resource that a DNS target resource points to.
type ResourceSetNLBResource struct {
	// A Network Load Balancer resource Amazon Resource Name (ARN).
	Arn *string `pulumi:"arn"`
}

// ResourceSetNLBResourceInput is an input type that accepts ResourceSetNLBResourceArgs and ResourceSetNLBResourceOutput values.
// You can construct a concrete instance of `ResourceSetNLBResourceInput` via:
//
//          ResourceSetNLBResourceArgs{...}
type ResourceSetNLBResourceInput interface {
	pulumi.Input

	ToResourceSetNLBResourceOutput() ResourceSetNLBResourceOutput
	ToResourceSetNLBResourceOutputWithContext(context.Context) ResourceSetNLBResourceOutput
}

// The Network Load Balancer resource that a DNS target resource points to.
type ResourceSetNLBResourceArgs struct {
	// A Network Load Balancer resource Amazon Resource Name (ARN).
	Arn pulumi.StringPtrInput `pulumi:"arn"`
}

func (ResourceSetNLBResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSetNLBResource)(nil)).Elem()
}

func (i ResourceSetNLBResourceArgs) ToResourceSetNLBResourceOutput() ResourceSetNLBResourceOutput {
	return i.ToResourceSetNLBResourceOutputWithContext(context.Background())
}

func (i ResourceSetNLBResourceArgs) ToResourceSetNLBResourceOutputWithContext(ctx context.Context) ResourceSetNLBResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSetNLBResourceOutput)
}

func (i ResourceSetNLBResourceArgs) ToResourceSetNLBResourcePtrOutput() ResourceSetNLBResourcePtrOutput {
	return i.ToResourceSetNLBResourcePtrOutputWithContext(context.Background())
}

func (i ResourceSetNLBResourceArgs) ToResourceSetNLBResourcePtrOutputWithContext(ctx context.Context) ResourceSetNLBResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSetNLBResourceOutput).ToResourceSetNLBResourcePtrOutputWithContext(ctx)
}

// ResourceSetNLBResourcePtrInput is an input type that accepts ResourceSetNLBResourceArgs, ResourceSetNLBResourcePtr and ResourceSetNLBResourcePtrOutput values.
// You can construct a concrete instance of `ResourceSetNLBResourcePtrInput` via:
//
//          ResourceSetNLBResourceArgs{...}
//
//  or:
//
//          nil
type ResourceSetNLBResourcePtrInput interface {
	pulumi.Input

	ToResourceSetNLBResourcePtrOutput() ResourceSetNLBResourcePtrOutput
	ToResourceSetNLBResourcePtrOutputWithContext(context.Context) ResourceSetNLBResourcePtrOutput
}

type resourceSetNLBResourcePtrType ResourceSetNLBResourceArgs

func ResourceSetNLBResourcePtr(v *ResourceSetNLBResourceArgs) ResourceSetNLBResourcePtrInput {
	return (*resourceSetNLBResourcePtrType)(v)
}

func (*resourceSetNLBResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSetNLBResource)(nil)).Elem()
}

func (i *resourceSetNLBResourcePtrType) ToResourceSetNLBResourcePtrOutput() ResourceSetNLBResourcePtrOutput {
	return i.ToResourceSetNLBResourcePtrOutputWithContext(context.Background())
}

func (i *resourceSetNLBResourcePtrType) ToResourceSetNLBResourcePtrOutputWithContext(ctx context.Context) ResourceSetNLBResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSetNLBResourcePtrOutput)
}

// The Network Load Balancer resource that a DNS target resource points to.
type ResourceSetNLBResourceOutput struct{ *pulumi.OutputState }

func (ResourceSetNLBResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSetNLBResource)(nil)).Elem()
}

func (o ResourceSetNLBResourceOutput) ToResourceSetNLBResourceOutput() ResourceSetNLBResourceOutput {
	return o
}

func (o ResourceSetNLBResourceOutput) ToResourceSetNLBResourceOutputWithContext(ctx context.Context) ResourceSetNLBResourceOutput {
	return o
}

func (o ResourceSetNLBResourceOutput) ToResourceSetNLBResourcePtrOutput() ResourceSetNLBResourcePtrOutput {
	return o.ToResourceSetNLBResourcePtrOutputWithContext(context.Background())
}

func (o ResourceSetNLBResourceOutput) ToResourceSetNLBResourcePtrOutputWithContext(ctx context.Context) ResourceSetNLBResourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceSetNLBResource) *ResourceSetNLBResource {
		return &v
	}).(ResourceSetNLBResourcePtrOutput)
}

// A Network Load Balancer resource Amazon Resource Name (ARN).
func (o ResourceSetNLBResourceOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSetNLBResource) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

type ResourceSetNLBResourcePtrOutput struct{ *pulumi.OutputState }

func (ResourceSetNLBResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSetNLBResource)(nil)).Elem()
}

func (o ResourceSetNLBResourcePtrOutput) ToResourceSetNLBResourcePtrOutput() ResourceSetNLBResourcePtrOutput {
	return o
}

func (o ResourceSetNLBResourcePtrOutput) ToResourceSetNLBResourcePtrOutputWithContext(ctx context.Context) ResourceSetNLBResourcePtrOutput {
	return o
}

func (o ResourceSetNLBResourcePtrOutput) Elem() ResourceSetNLBResourceOutput {
	return o.ApplyT(func(v *ResourceSetNLBResource) ResourceSetNLBResource {
		if v != nil {
			return *v
		}
		var ret ResourceSetNLBResource
		return ret
	}).(ResourceSetNLBResourceOutput)
}

// A Network Load Balancer resource Amazon Resource Name (ARN).
func (o ResourceSetNLBResourcePtrOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSetNLBResource) *string {
		if v == nil {
			return nil
		}
		return v.Arn
	}).(pulumi.StringPtrOutput)
}

// The Route 53 resource that a DNS target resource record points to.
type ResourceSetR53ResourceRecord struct {
	// The DNS target domain name.
	DomainName *string `pulumi:"domainName"`
	// The Resource Record set id.
	RecordSetId *string `pulumi:"recordSetId"`
}

// ResourceSetR53ResourceRecordInput is an input type that accepts ResourceSetR53ResourceRecordArgs and ResourceSetR53ResourceRecordOutput values.
// You can construct a concrete instance of `ResourceSetR53ResourceRecordInput` via:
//
//          ResourceSetR53ResourceRecordArgs{...}
type ResourceSetR53ResourceRecordInput interface {
	pulumi.Input

	ToResourceSetR53ResourceRecordOutput() ResourceSetR53ResourceRecordOutput
	ToResourceSetR53ResourceRecordOutputWithContext(context.Context) ResourceSetR53ResourceRecordOutput
}

// The Route 53 resource that a DNS target resource record points to.
type ResourceSetR53ResourceRecordArgs struct {
	// The DNS target domain name.
	DomainName pulumi.StringPtrInput `pulumi:"domainName"`
	// The Resource Record set id.
	RecordSetId pulumi.StringPtrInput `pulumi:"recordSetId"`
}

func (ResourceSetR53ResourceRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSetR53ResourceRecord)(nil)).Elem()
}

func (i ResourceSetR53ResourceRecordArgs) ToResourceSetR53ResourceRecordOutput() ResourceSetR53ResourceRecordOutput {
	return i.ToResourceSetR53ResourceRecordOutputWithContext(context.Background())
}

func (i ResourceSetR53ResourceRecordArgs) ToResourceSetR53ResourceRecordOutputWithContext(ctx context.Context) ResourceSetR53ResourceRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSetR53ResourceRecordOutput)
}

func (i ResourceSetR53ResourceRecordArgs) ToResourceSetR53ResourceRecordPtrOutput() ResourceSetR53ResourceRecordPtrOutput {
	return i.ToResourceSetR53ResourceRecordPtrOutputWithContext(context.Background())
}

func (i ResourceSetR53ResourceRecordArgs) ToResourceSetR53ResourceRecordPtrOutputWithContext(ctx context.Context) ResourceSetR53ResourceRecordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSetR53ResourceRecordOutput).ToResourceSetR53ResourceRecordPtrOutputWithContext(ctx)
}

// ResourceSetR53ResourceRecordPtrInput is an input type that accepts ResourceSetR53ResourceRecordArgs, ResourceSetR53ResourceRecordPtr and ResourceSetR53ResourceRecordPtrOutput values.
// You can construct a concrete instance of `ResourceSetR53ResourceRecordPtrInput` via:
//
//          ResourceSetR53ResourceRecordArgs{...}
//
//  or:
//
//          nil
type ResourceSetR53ResourceRecordPtrInput interface {
	pulumi.Input

	ToResourceSetR53ResourceRecordPtrOutput() ResourceSetR53ResourceRecordPtrOutput
	ToResourceSetR53ResourceRecordPtrOutputWithContext(context.Context) ResourceSetR53ResourceRecordPtrOutput
}

type resourceSetR53ResourceRecordPtrType ResourceSetR53ResourceRecordArgs

func ResourceSetR53ResourceRecordPtr(v *ResourceSetR53ResourceRecordArgs) ResourceSetR53ResourceRecordPtrInput {
	return (*resourceSetR53ResourceRecordPtrType)(v)
}

func (*resourceSetR53ResourceRecordPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSetR53ResourceRecord)(nil)).Elem()
}

func (i *resourceSetR53ResourceRecordPtrType) ToResourceSetR53ResourceRecordPtrOutput() ResourceSetR53ResourceRecordPtrOutput {
	return i.ToResourceSetR53ResourceRecordPtrOutputWithContext(context.Background())
}

func (i *resourceSetR53ResourceRecordPtrType) ToResourceSetR53ResourceRecordPtrOutputWithContext(ctx context.Context) ResourceSetR53ResourceRecordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSetR53ResourceRecordPtrOutput)
}

// The Route 53 resource that a DNS target resource record points to.
type ResourceSetR53ResourceRecordOutput struct{ *pulumi.OutputState }

func (ResourceSetR53ResourceRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSetR53ResourceRecord)(nil)).Elem()
}

func (o ResourceSetR53ResourceRecordOutput) ToResourceSetR53ResourceRecordOutput() ResourceSetR53ResourceRecordOutput {
	return o
}

func (o ResourceSetR53ResourceRecordOutput) ToResourceSetR53ResourceRecordOutputWithContext(ctx context.Context) ResourceSetR53ResourceRecordOutput {
	return o
}

func (o ResourceSetR53ResourceRecordOutput) ToResourceSetR53ResourceRecordPtrOutput() ResourceSetR53ResourceRecordPtrOutput {
	return o.ToResourceSetR53ResourceRecordPtrOutputWithContext(context.Background())
}

func (o ResourceSetR53ResourceRecordOutput) ToResourceSetR53ResourceRecordPtrOutputWithContext(ctx context.Context) ResourceSetR53ResourceRecordPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceSetR53ResourceRecord) *ResourceSetR53ResourceRecord {
		return &v
	}).(ResourceSetR53ResourceRecordPtrOutput)
}

// The DNS target domain name.
func (o ResourceSetR53ResourceRecordOutput) DomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSetR53ResourceRecord) *string { return v.DomainName }).(pulumi.StringPtrOutput)
}

// The Resource Record set id.
func (o ResourceSetR53ResourceRecordOutput) RecordSetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSetR53ResourceRecord) *string { return v.RecordSetId }).(pulumi.StringPtrOutput)
}

type ResourceSetR53ResourceRecordPtrOutput struct{ *pulumi.OutputState }

func (ResourceSetR53ResourceRecordPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSetR53ResourceRecord)(nil)).Elem()
}

func (o ResourceSetR53ResourceRecordPtrOutput) ToResourceSetR53ResourceRecordPtrOutput() ResourceSetR53ResourceRecordPtrOutput {
	return o
}

func (o ResourceSetR53ResourceRecordPtrOutput) ToResourceSetR53ResourceRecordPtrOutputWithContext(ctx context.Context) ResourceSetR53ResourceRecordPtrOutput {
	return o
}

func (o ResourceSetR53ResourceRecordPtrOutput) Elem() ResourceSetR53ResourceRecordOutput {
	return o.ApplyT(func(v *ResourceSetR53ResourceRecord) ResourceSetR53ResourceRecord {
		if v != nil {
			return *v
		}
		var ret ResourceSetR53ResourceRecord
		return ret
	}).(ResourceSetR53ResourceRecordOutput)
}

// The DNS target domain name.
func (o ResourceSetR53ResourceRecordPtrOutput) DomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSetR53ResourceRecord) *string {
		if v == nil {
			return nil
		}
		return v.DomainName
	}).(pulumi.StringPtrOutput)
}

// The Resource Record set id.
func (o ResourceSetR53ResourceRecordPtrOutput) RecordSetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSetR53ResourceRecord) *string {
		if v == nil {
			return nil
		}
		return v.RecordSetId
	}).(pulumi.StringPtrOutput)
}

// The resource element of a ResourceSet
type ResourceSetResource struct {
	// The component identifier of the resource, generated when DNS target resource is used.
	ComponentId       *string                       `pulumi:"componentId"`
	DnsTargetResource *ResourceSetDNSTargetResource `pulumi:"dnsTargetResource"`
	// A list of recovery group Amazon Resource Names (ARNs) and cell ARNs that this resource is contained within.
	ReadinessScopes []string `pulumi:"readinessScopes"`
	// The Amazon Resource Name (ARN) of the AWS resource.
	ResourceArn *string `pulumi:"resourceArn"`
}

// ResourceSetResourceInput is an input type that accepts ResourceSetResourceArgs and ResourceSetResourceOutput values.
// You can construct a concrete instance of `ResourceSetResourceInput` via:
//
//          ResourceSetResourceArgs{...}
type ResourceSetResourceInput interface {
	pulumi.Input

	ToResourceSetResourceOutput() ResourceSetResourceOutput
	ToResourceSetResourceOutputWithContext(context.Context) ResourceSetResourceOutput
}

// The resource element of a ResourceSet
type ResourceSetResourceArgs struct {
	// The component identifier of the resource, generated when DNS target resource is used.
	ComponentId       pulumi.StringPtrInput                `pulumi:"componentId"`
	DnsTargetResource ResourceSetDNSTargetResourcePtrInput `pulumi:"dnsTargetResource"`
	// A list of recovery group Amazon Resource Names (ARNs) and cell ARNs that this resource is contained within.
	ReadinessScopes pulumi.StringArrayInput `pulumi:"readinessScopes"`
	// The Amazon Resource Name (ARN) of the AWS resource.
	ResourceArn pulumi.StringPtrInput `pulumi:"resourceArn"`
}

func (ResourceSetResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSetResource)(nil)).Elem()
}

func (i ResourceSetResourceArgs) ToResourceSetResourceOutput() ResourceSetResourceOutput {
	return i.ToResourceSetResourceOutputWithContext(context.Background())
}

func (i ResourceSetResourceArgs) ToResourceSetResourceOutputWithContext(ctx context.Context) ResourceSetResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSetResourceOutput)
}

// ResourceSetResourceArrayInput is an input type that accepts ResourceSetResourceArray and ResourceSetResourceArrayOutput values.
// You can construct a concrete instance of `ResourceSetResourceArrayInput` via:
//
//          ResourceSetResourceArray{ ResourceSetResourceArgs{...} }
type ResourceSetResourceArrayInput interface {
	pulumi.Input

	ToResourceSetResourceArrayOutput() ResourceSetResourceArrayOutput
	ToResourceSetResourceArrayOutputWithContext(context.Context) ResourceSetResourceArrayOutput
}

type ResourceSetResourceArray []ResourceSetResourceInput

func (ResourceSetResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceSetResource)(nil)).Elem()
}

func (i ResourceSetResourceArray) ToResourceSetResourceArrayOutput() ResourceSetResourceArrayOutput {
	return i.ToResourceSetResourceArrayOutputWithContext(context.Background())
}

func (i ResourceSetResourceArray) ToResourceSetResourceArrayOutputWithContext(ctx context.Context) ResourceSetResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSetResourceArrayOutput)
}

// The resource element of a ResourceSet
type ResourceSetResourceOutput struct{ *pulumi.OutputState }

func (ResourceSetResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSetResource)(nil)).Elem()
}

func (o ResourceSetResourceOutput) ToResourceSetResourceOutput() ResourceSetResourceOutput {
	return o
}

func (o ResourceSetResourceOutput) ToResourceSetResourceOutputWithContext(ctx context.Context) ResourceSetResourceOutput {
	return o
}

// The component identifier of the resource, generated when DNS target resource is used.
func (o ResourceSetResourceOutput) ComponentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSetResource) *string { return v.ComponentId }).(pulumi.StringPtrOutput)
}

func (o ResourceSetResourceOutput) DnsTargetResource() ResourceSetDNSTargetResourcePtrOutput {
	return o.ApplyT(func(v ResourceSetResource) *ResourceSetDNSTargetResource { return v.DnsTargetResource }).(ResourceSetDNSTargetResourcePtrOutput)
}

// A list of recovery group Amazon Resource Names (ARNs) and cell ARNs that this resource is contained within.
func (o ResourceSetResourceOutput) ReadinessScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResourceSetResource) []string { return v.ReadinessScopes }).(pulumi.StringArrayOutput)
}

// The Amazon Resource Name (ARN) of the AWS resource.
func (o ResourceSetResourceOutput) ResourceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSetResource) *string { return v.ResourceArn }).(pulumi.StringPtrOutput)
}

type ResourceSetResourceArrayOutput struct{ *pulumi.OutputState }

func (ResourceSetResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceSetResource)(nil)).Elem()
}

func (o ResourceSetResourceArrayOutput) ToResourceSetResourceArrayOutput() ResourceSetResourceArrayOutput {
	return o
}

func (o ResourceSetResourceArrayOutput) ToResourceSetResourceArrayOutputWithContext(ctx context.Context) ResourceSetResourceArrayOutput {
	return o
}

func (o ResourceSetResourceArrayOutput) Index(i pulumi.IntInput) ResourceSetResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceSetResource {
		return vs[0].([]ResourceSetResource)[vs[1].(int)]
	}).(ResourceSetResourceOutput)
}

type ResourceSetTag struct {
	Key   string   `pulumi:"key"`
	Value []string `pulumi:"value"`
}

// ResourceSetTagInput is an input type that accepts ResourceSetTagArgs and ResourceSetTagOutput values.
// You can construct a concrete instance of `ResourceSetTagInput` via:
//
//          ResourceSetTagArgs{...}
type ResourceSetTagInput interface {
	pulumi.Input

	ToResourceSetTagOutput() ResourceSetTagOutput
	ToResourceSetTagOutputWithContext(context.Context) ResourceSetTagOutput
}

type ResourceSetTagArgs struct {
	Key   pulumi.StringInput      `pulumi:"key"`
	Value pulumi.StringArrayInput `pulumi:"value"`
}

func (ResourceSetTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSetTag)(nil)).Elem()
}

func (i ResourceSetTagArgs) ToResourceSetTagOutput() ResourceSetTagOutput {
	return i.ToResourceSetTagOutputWithContext(context.Background())
}

func (i ResourceSetTagArgs) ToResourceSetTagOutputWithContext(ctx context.Context) ResourceSetTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSetTagOutput)
}

// ResourceSetTagArrayInput is an input type that accepts ResourceSetTagArray and ResourceSetTagArrayOutput values.
// You can construct a concrete instance of `ResourceSetTagArrayInput` via:
//
//          ResourceSetTagArray{ ResourceSetTagArgs{...} }
type ResourceSetTagArrayInput interface {
	pulumi.Input

	ToResourceSetTagArrayOutput() ResourceSetTagArrayOutput
	ToResourceSetTagArrayOutputWithContext(context.Context) ResourceSetTagArrayOutput
}

type ResourceSetTagArray []ResourceSetTagInput

func (ResourceSetTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceSetTag)(nil)).Elem()
}

func (i ResourceSetTagArray) ToResourceSetTagArrayOutput() ResourceSetTagArrayOutput {
	return i.ToResourceSetTagArrayOutputWithContext(context.Background())
}

func (i ResourceSetTagArray) ToResourceSetTagArrayOutputWithContext(ctx context.Context) ResourceSetTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSetTagArrayOutput)
}

type ResourceSetTagOutput struct{ *pulumi.OutputState }

func (ResourceSetTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSetTag)(nil)).Elem()
}

func (o ResourceSetTagOutput) ToResourceSetTagOutput() ResourceSetTagOutput {
	return o
}

func (o ResourceSetTagOutput) ToResourceSetTagOutputWithContext(ctx context.Context) ResourceSetTagOutput {
	return o
}

func (o ResourceSetTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceSetTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o ResourceSetTagOutput) Value() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResourceSetTag) []string { return v.Value }).(pulumi.StringArrayOutput)
}

type ResourceSetTagArrayOutput struct{ *pulumi.OutputState }

func (ResourceSetTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceSetTag)(nil)).Elem()
}

func (o ResourceSetTagArrayOutput) ToResourceSetTagArrayOutput() ResourceSetTagArrayOutput {
	return o
}

func (o ResourceSetTagArrayOutput) ToResourceSetTagArrayOutputWithContext(ctx context.Context) ResourceSetTagArrayOutput {
	return o
}

func (o ResourceSetTagArrayOutput) Index(i pulumi.IntInput) ResourceSetTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceSetTag {
		return vs[0].([]ResourceSetTag)[vs[1].(int)]
	}).(ResourceSetTagOutput)
}

// The target resource that the Route 53 record points to.
type ResourceSetTargetResource struct {
	NLBResource *ResourceSetNLBResource       `pulumi:"nLBResource"`
	R53Resource *ResourceSetR53ResourceRecord `pulumi:"r53Resource"`
}

// ResourceSetTargetResourceInput is an input type that accepts ResourceSetTargetResourceArgs and ResourceSetTargetResourceOutput values.
// You can construct a concrete instance of `ResourceSetTargetResourceInput` via:
//
//          ResourceSetTargetResourceArgs{...}
type ResourceSetTargetResourceInput interface {
	pulumi.Input

	ToResourceSetTargetResourceOutput() ResourceSetTargetResourceOutput
	ToResourceSetTargetResourceOutputWithContext(context.Context) ResourceSetTargetResourceOutput
}

// The target resource that the Route 53 record points to.
type ResourceSetTargetResourceArgs struct {
	NLBResource ResourceSetNLBResourcePtrInput       `pulumi:"nLBResource"`
	R53Resource ResourceSetR53ResourceRecordPtrInput `pulumi:"r53Resource"`
}

func (ResourceSetTargetResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSetTargetResource)(nil)).Elem()
}

func (i ResourceSetTargetResourceArgs) ToResourceSetTargetResourceOutput() ResourceSetTargetResourceOutput {
	return i.ToResourceSetTargetResourceOutputWithContext(context.Background())
}

func (i ResourceSetTargetResourceArgs) ToResourceSetTargetResourceOutputWithContext(ctx context.Context) ResourceSetTargetResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSetTargetResourceOutput)
}

func (i ResourceSetTargetResourceArgs) ToResourceSetTargetResourcePtrOutput() ResourceSetTargetResourcePtrOutput {
	return i.ToResourceSetTargetResourcePtrOutputWithContext(context.Background())
}

func (i ResourceSetTargetResourceArgs) ToResourceSetTargetResourcePtrOutputWithContext(ctx context.Context) ResourceSetTargetResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSetTargetResourceOutput).ToResourceSetTargetResourcePtrOutputWithContext(ctx)
}

// ResourceSetTargetResourcePtrInput is an input type that accepts ResourceSetTargetResourceArgs, ResourceSetTargetResourcePtr and ResourceSetTargetResourcePtrOutput values.
// You can construct a concrete instance of `ResourceSetTargetResourcePtrInput` via:
//
//          ResourceSetTargetResourceArgs{...}
//
//  or:
//
//          nil
type ResourceSetTargetResourcePtrInput interface {
	pulumi.Input

	ToResourceSetTargetResourcePtrOutput() ResourceSetTargetResourcePtrOutput
	ToResourceSetTargetResourcePtrOutputWithContext(context.Context) ResourceSetTargetResourcePtrOutput
}

type resourceSetTargetResourcePtrType ResourceSetTargetResourceArgs

func ResourceSetTargetResourcePtr(v *ResourceSetTargetResourceArgs) ResourceSetTargetResourcePtrInput {
	return (*resourceSetTargetResourcePtrType)(v)
}

func (*resourceSetTargetResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSetTargetResource)(nil)).Elem()
}

func (i *resourceSetTargetResourcePtrType) ToResourceSetTargetResourcePtrOutput() ResourceSetTargetResourcePtrOutput {
	return i.ToResourceSetTargetResourcePtrOutputWithContext(context.Background())
}

func (i *resourceSetTargetResourcePtrType) ToResourceSetTargetResourcePtrOutputWithContext(ctx context.Context) ResourceSetTargetResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSetTargetResourcePtrOutput)
}

// The target resource that the Route 53 record points to.
type ResourceSetTargetResourceOutput struct{ *pulumi.OutputState }

func (ResourceSetTargetResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSetTargetResource)(nil)).Elem()
}

func (o ResourceSetTargetResourceOutput) ToResourceSetTargetResourceOutput() ResourceSetTargetResourceOutput {
	return o
}

func (o ResourceSetTargetResourceOutput) ToResourceSetTargetResourceOutputWithContext(ctx context.Context) ResourceSetTargetResourceOutput {
	return o
}

func (o ResourceSetTargetResourceOutput) ToResourceSetTargetResourcePtrOutput() ResourceSetTargetResourcePtrOutput {
	return o.ToResourceSetTargetResourcePtrOutputWithContext(context.Background())
}

func (o ResourceSetTargetResourceOutput) ToResourceSetTargetResourcePtrOutputWithContext(ctx context.Context) ResourceSetTargetResourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceSetTargetResource) *ResourceSetTargetResource {
		return &v
	}).(ResourceSetTargetResourcePtrOutput)
}

func (o ResourceSetTargetResourceOutput) NLBResource() ResourceSetNLBResourcePtrOutput {
	return o.ApplyT(func(v ResourceSetTargetResource) *ResourceSetNLBResource { return v.NLBResource }).(ResourceSetNLBResourcePtrOutput)
}

func (o ResourceSetTargetResourceOutput) R53Resource() ResourceSetR53ResourceRecordPtrOutput {
	return o.ApplyT(func(v ResourceSetTargetResource) *ResourceSetR53ResourceRecord { return v.R53Resource }).(ResourceSetR53ResourceRecordPtrOutput)
}

type ResourceSetTargetResourcePtrOutput struct{ *pulumi.OutputState }

func (ResourceSetTargetResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSetTargetResource)(nil)).Elem()
}

func (o ResourceSetTargetResourcePtrOutput) ToResourceSetTargetResourcePtrOutput() ResourceSetTargetResourcePtrOutput {
	return o
}

func (o ResourceSetTargetResourcePtrOutput) ToResourceSetTargetResourcePtrOutputWithContext(ctx context.Context) ResourceSetTargetResourcePtrOutput {
	return o
}

func (o ResourceSetTargetResourcePtrOutput) Elem() ResourceSetTargetResourceOutput {
	return o.ApplyT(func(v *ResourceSetTargetResource) ResourceSetTargetResource {
		if v != nil {
			return *v
		}
		var ret ResourceSetTargetResource
		return ret
	}).(ResourceSetTargetResourceOutput)
}

func (o ResourceSetTargetResourcePtrOutput) NLBResource() ResourceSetNLBResourcePtrOutput {
	return o.ApplyT(func(v *ResourceSetTargetResource) *ResourceSetNLBResource {
		if v == nil {
			return nil
		}
		return v.NLBResource
	}).(ResourceSetNLBResourcePtrOutput)
}

func (o ResourceSetTargetResourcePtrOutput) R53Resource() ResourceSetR53ResourceRecordPtrOutput {
	return o.ApplyT(func(v *ResourceSetTargetResource) *ResourceSetR53ResourceRecord {
		if v == nil {
			return nil
		}
		return v.R53Resource
	}).(ResourceSetR53ResourceRecordPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(CellTagOutput{})
	pulumi.RegisterOutputType(CellTagArrayOutput{})
	pulumi.RegisterOutputType(ReadinessCheckTagOutput{})
	pulumi.RegisterOutputType(ReadinessCheckTagArrayOutput{})
	pulumi.RegisterOutputType(RecoveryGroupTagOutput{})
	pulumi.RegisterOutputType(RecoveryGroupTagArrayOutput{})
	pulumi.RegisterOutputType(ResourceSetDNSTargetResourceOutput{})
	pulumi.RegisterOutputType(ResourceSetDNSTargetResourcePtrOutput{})
	pulumi.RegisterOutputType(ResourceSetNLBResourceOutput{})
	pulumi.RegisterOutputType(ResourceSetNLBResourcePtrOutput{})
	pulumi.RegisterOutputType(ResourceSetR53ResourceRecordOutput{})
	pulumi.RegisterOutputType(ResourceSetR53ResourceRecordPtrOutput{})
	pulumi.RegisterOutputType(ResourceSetResourceOutput{})
	pulumi.RegisterOutputType(ResourceSetResourceArrayOutput{})
	pulumi.RegisterOutputType(ResourceSetTagOutput{})
	pulumi.RegisterOutputType(ResourceSetTagArrayOutput{})
	pulumi.RegisterOutputType(ResourceSetTargetResourceOutput{})
	pulumi.RegisterOutputType(ResourceSetTargetResourcePtrOutput{})
}
