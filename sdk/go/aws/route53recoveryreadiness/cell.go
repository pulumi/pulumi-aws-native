// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package route53recoveryreadiness

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The API Schema for AWS Route53 Recovery Readiness Cells.
type Cell struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the cell.
	CellArn pulumi.StringOutput `pulumi:"cellArn"`
	// The name of the cell to create.
	CellName pulumi.StringOutput `pulumi:"cellName"`
	// A list of cell Amazon Resource Names (ARNs) contained within this cell, for use in nested cells. For example, Availability Zones within specific Regions.
	Cells pulumi.StringArrayOutput `pulumi:"cells"`
	// The readiness scope for the cell, which can be a cell Amazon Resource Name (ARN) or a recovery group ARN. This is a list but currently can have only one element.
	ParentReadinessScopes pulumi.StringArrayOutput `pulumi:"parentReadinessScopes"`
	// A collection of tags associated with a resource
	Tags CellTagArrayOutput `pulumi:"tags"`
}

// NewCell registers a new resource with the given unique name, arguments, and options.
func NewCell(ctx *pulumi.Context,
	name string, args *CellArgs, opts ...pulumi.ResourceOption) (*Cell, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CellName == nil {
		return nil, errors.New("invalid value for required argument 'CellName'")
	}
	var resource Cell
	err := ctx.RegisterResource("aws-native:route53recoveryreadiness:Cell", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCell gets an existing Cell resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCell(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CellState, opts ...pulumi.ResourceOption) (*Cell, error) {
	var resource Cell
	err := ctx.ReadResource("aws-native:route53recoveryreadiness:Cell", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cell resources.
type cellState struct {
}

type CellState struct {
}

func (CellState) ElementType() reflect.Type {
	return reflect.TypeOf((*cellState)(nil)).Elem()
}

type cellArgs struct {
	// The name of the cell to create.
	CellName string `pulumi:"cellName"`
	// A list of cell Amazon Resource Names (ARNs) contained within this cell, for use in nested cells. For example, Availability Zones within specific Regions.
	Cells []string `pulumi:"cells"`
	// A collection of tags associated with a resource
	Tags []CellTag `pulumi:"tags"`
}

// The set of arguments for constructing a Cell resource.
type CellArgs struct {
	// The name of the cell to create.
	CellName pulumi.StringInput
	// A list of cell Amazon Resource Names (ARNs) contained within this cell, for use in nested cells. For example, Availability Zones within specific Regions.
	Cells pulumi.StringArrayInput
	// A collection of tags associated with a resource
	Tags CellTagArrayInput
}

func (CellArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cellArgs)(nil)).Elem()
}

type CellInput interface {
	pulumi.Input

	ToCellOutput() CellOutput
	ToCellOutputWithContext(ctx context.Context) CellOutput
}

func (*Cell) ElementType() reflect.Type {
	return reflect.TypeOf((*Cell)(nil))
}

func (i *Cell) ToCellOutput() CellOutput {
	return i.ToCellOutputWithContext(context.Background())
}

func (i *Cell) ToCellOutputWithContext(ctx context.Context) CellOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CellOutput)
}

type CellOutput struct{ *pulumi.OutputState }

func (CellOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Cell)(nil))
}

func (o CellOutput) ToCellOutput() CellOutput {
	return o
}

func (o CellOutput) ToCellOutputWithContext(ctx context.Context) CellOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(CellOutput{})
}
