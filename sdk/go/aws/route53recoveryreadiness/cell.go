// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package route53recoveryreadiness

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53recoveryreadiness-cell.html
type Cell struct {
	pulumi.CustomResourceState

	CellArn pulumi.StringOutput `pulumi:"cellArn"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53recoveryreadiness-cell.html#cfn-route53recoveryreadiness-cell-cellname
	CellName pulumi.StringOutput `pulumi:"cellName"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53recoveryreadiness-cell.html#cfn-route53recoveryreadiness-cell-cells
	Cells                 pulumi.StringArrayOutput `pulumi:"cells"`
	ParentReadinessScopes pulumi.StringArrayOutput `pulumi:"parentReadinessScopes"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53recoveryreadiness-cell.html#cfn-route53recoveryreadiness-cell-tags
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewCell registers a new resource with the given unique name, arguments, and options.
func NewCell(ctx *pulumi.Context,
	name string, args *CellArgs, opts ...pulumi.ResourceOption) (*Cell, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CellName == nil {
		return nil, errors.New("invalid value for required argument 'CellName'")
	}
	var resource Cell
	err := ctx.RegisterResource("aws-native:route53recoveryreadiness:Cell", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCell gets an existing Cell resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCell(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CellState, opts ...pulumi.ResourceOption) (*Cell, error) {
	var resource Cell
	err := ctx.ReadResource("aws-native:route53recoveryreadiness:Cell", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cell resources.
type cellState struct {
}

type CellState struct {
}

func (CellState) ElementType() reflect.Type {
	return reflect.TypeOf((*cellState)(nil)).Elem()
}

type cellArgs struct {
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53recoveryreadiness-cell.html#cfn-route53recoveryreadiness-cell-cellname
	CellName string `pulumi:"cellName"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53recoveryreadiness-cell.html#cfn-route53recoveryreadiness-cell-cells
	Cells []string `pulumi:"cells"`
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53recoveryreadiness-cell.html#cfn-route53recoveryreadiness-cell-tags
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a Cell resource.
type CellArgs struct {
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53recoveryreadiness-cell.html#cfn-route53recoveryreadiness-cell-cellname
	CellName pulumi.StringInput
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53recoveryreadiness-cell.html#cfn-route53recoveryreadiness-cell-cells
	Cells pulumi.StringArrayInput
	// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53recoveryreadiness-cell.html#cfn-route53recoveryreadiness-cell-tags
	Tags aws.TagArrayInput
}

func (CellArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cellArgs)(nil)).Elem()
}

type CellInput interface {
	pulumi.Input

	ToCellOutput() CellOutput
	ToCellOutputWithContext(ctx context.Context) CellOutput
}

func (*Cell) ElementType() reflect.Type {
	return reflect.TypeOf((*Cell)(nil))
}

func (i *Cell) ToCellOutput() CellOutput {
	return i.ToCellOutputWithContext(context.Background())
}

func (i *Cell) ToCellOutputWithContext(ctx context.Context) CellOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CellOutput)
}

type CellOutput struct{ *pulumi.OutputState }

func (CellOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Cell)(nil))
}

func (o CellOutput) ToCellOutput() CellOutput {
	return o
}

func (o CellOutput) ToCellOutputWithContext(ctx context.Context) CellOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(CellOutput{})
}
