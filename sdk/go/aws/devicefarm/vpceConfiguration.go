// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devicefarm

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// AWS::DeviceFarm::VPCEConfiguration creates a new Device Farm VPCE Configuration
type VpceConfiguration struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the VPC endpoint. See [Amazon resource names](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the *General Reference guide* .
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The DNS name that Device Farm will use to map to the private service you want to access.
	ServiceDnsName pulumi.StringOutput `pulumi:"serviceDnsName"`
	// The metadata that you apply to a resource to help you categorize and organize it. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters. Tag values can have a maximum length of 256 characters.
	Tags aws.TagArrayOutput `pulumi:"tags"`
	// An optional description that provides details about your VPC endpoint configuration.
	VpceConfigurationDescription pulumi.StringPtrOutput `pulumi:"vpceConfigurationDescription"`
	// The friendly name you give to your VPC endpoint configuration to manage your configurations more easily.
	VpceConfigurationName pulumi.StringOutput `pulumi:"vpceConfigurationName"`
	// The name of the VPC endpoint service that you want to access from Device Farm.
	//
	// The name follows the format `com.amazonaws.vpce.us-west-2.vpce-svc-id` .
	VpceServiceName pulumi.StringOutput `pulumi:"vpceServiceName"`
}

// NewVpceConfiguration registers a new resource with the given unique name, arguments, and options.
func NewVpceConfiguration(ctx *pulumi.Context,
	name string, args *VpceConfigurationArgs, opts ...pulumi.ResourceOption) (*VpceConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServiceDnsName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceDnsName'")
	}
	if args.VpceServiceName == nil {
		return nil, errors.New("invalid value for required argument 'VpceServiceName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpceConfiguration
	err := ctx.RegisterResource("aws-native:devicefarm:VpceConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpceConfiguration gets an existing VpceConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpceConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpceConfigurationState, opts ...pulumi.ResourceOption) (*VpceConfiguration, error) {
	var resource VpceConfiguration
	err := ctx.ReadResource("aws-native:devicefarm:VpceConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpceConfiguration resources.
type vpceConfigurationState struct {
}

type VpceConfigurationState struct {
}

func (VpceConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpceConfigurationState)(nil)).Elem()
}

type vpceConfigurationArgs struct {
	// The DNS name that Device Farm will use to map to the private service you want to access.
	ServiceDnsName string `pulumi:"serviceDnsName"`
	// The metadata that you apply to a resource to help you categorize and organize it. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters. Tag values can have a maximum length of 256 characters.
	Tags []aws.Tag `pulumi:"tags"`
	// An optional description that provides details about your VPC endpoint configuration.
	VpceConfigurationDescription *string `pulumi:"vpceConfigurationDescription"`
	// The friendly name you give to your VPC endpoint configuration to manage your configurations more easily.
	VpceConfigurationName *string `pulumi:"vpceConfigurationName"`
	// The name of the VPC endpoint service that you want to access from Device Farm.
	//
	// The name follows the format `com.amazonaws.vpce.us-west-2.vpce-svc-id` .
	VpceServiceName string `pulumi:"vpceServiceName"`
}

// The set of arguments for constructing a VpceConfiguration resource.
type VpceConfigurationArgs struct {
	// The DNS name that Device Farm will use to map to the private service you want to access.
	ServiceDnsName pulumi.StringInput
	// The metadata that you apply to a resource to help you categorize and organize it. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters. Tag values can have a maximum length of 256 characters.
	Tags aws.TagArrayInput
	// An optional description that provides details about your VPC endpoint configuration.
	VpceConfigurationDescription pulumi.StringPtrInput
	// The friendly name you give to your VPC endpoint configuration to manage your configurations more easily.
	VpceConfigurationName pulumi.StringPtrInput
	// The name of the VPC endpoint service that you want to access from Device Farm.
	//
	// The name follows the format `com.amazonaws.vpce.us-west-2.vpce-svc-id` .
	VpceServiceName pulumi.StringInput
}

func (VpceConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpceConfigurationArgs)(nil)).Elem()
}

type VpceConfigurationInput interface {
	pulumi.Input

	ToVpceConfigurationOutput() VpceConfigurationOutput
	ToVpceConfigurationOutputWithContext(ctx context.Context) VpceConfigurationOutput
}

func (*VpceConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**VpceConfiguration)(nil)).Elem()
}

func (i *VpceConfiguration) ToVpceConfigurationOutput() VpceConfigurationOutput {
	return i.ToVpceConfigurationOutputWithContext(context.Background())
}

func (i *VpceConfiguration) ToVpceConfigurationOutputWithContext(ctx context.Context) VpceConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpceConfigurationOutput)
}

type VpceConfigurationOutput struct{ *pulumi.OutputState }

func (VpceConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpceConfiguration)(nil)).Elem()
}

func (o VpceConfigurationOutput) ToVpceConfigurationOutput() VpceConfigurationOutput {
	return o
}

func (o VpceConfigurationOutput) ToVpceConfigurationOutputWithContext(ctx context.Context) VpceConfigurationOutput {
	return o
}

// The Amazon Resource Name (ARN) of the VPC endpoint. See [Amazon resource names](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the *General Reference guide* .
func (o VpceConfigurationOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *VpceConfiguration) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The DNS name that Device Farm will use to map to the private service you want to access.
func (o VpceConfigurationOutput) ServiceDnsName() pulumi.StringOutput {
	return o.ApplyT(func(v *VpceConfiguration) pulumi.StringOutput { return v.ServiceDnsName }).(pulumi.StringOutput)
}

// The metadata that you apply to a resource to help you categorize and organize it. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters. Tag values can have a maximum length of 256 characters.
func (o VpceConfigurationOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *VpceConfiguration) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

// An optional description that provides details about your VPC endpoint configuration.
func (o VpceConfigurationOutput) VpceConfigurationDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpceConfiguration) pulumi.StringPtrOutput { return v.VpceConfigurationDescription }).(pulumi.StringPtrOutput)
}

// The friendly name you give to your VPC endpoint configuration to manage your configurations more easily.
func (o VpceConfigurationOutput) VpceConfigurationName() pulumi.StringOutput {
	return o.ApplyT(func(v *VpceConfiguration) pulumi.StringOutput { return v.VpceConfigurationName }).(pulumi.StringOutput)
}

// The name of the VPC endpoint service that you want to access from Device Farm.
//
// The name follows the format `com.amazonaws.vpce.us-west-2.vpce-svc-id` .
func (o VpceConfigurationOutput) VpceServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *VpceConfiguration) pulumi.StringOutput { return v.VpceServiceName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpceConfigurationInput)(nil)).Elem(), &VpceConfiguration{})
	pulumi.RegisterOutputType(VpceConfigurationOutput{})
}
