// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devicefarm

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// AWS::DeviceFarm::VPCEConfiguration creates a new Device Farm VPCE Configuration
type VpceConfiguration struct {
	pulumi.CustomResourceState

	Arn                          pulumi.StringOutput             `pulumi:"arn"`
	ServiceDnsName               pulumi.StringOutput             `pulumi:"serviceDnsName"`
	Tags                         VpceConfigurationTagArrayOutput `pulumi:"tags"`
	VpceConfigurationDescription pulumi.StringPtrOutput          `pulumi:"vpceConfigurationDescription"`
	VpceConfigurationName        pulumi.StringOutput             `pulumi:"vpceConfigurationName"`
	VpceServiceName              pulumi.StringOutput             `pulumi:"vpceServiceName"`
}

// NewVpceConfiguration registers a new resource with the given unique name, arguments, and options.
func NewVpceConfiguration(ctx *pulumi.Context,
	name string, args *VpceConfigurationArgs, opts ...pulumi.ResourceOption) (*VpceConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServiceDnsName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceDnsName'")
	}
	if args.VpceServiceName == nil {
		return nil, errors.New("invalid value for required argument 'VpceServiceName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpceConfiguration
	err := ctx.RegisterResource("aws-native:devicefarm:VpceConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpceConfiguration gets an existing VpceConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpceConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpceConfigurationState, opts ...pulumi.ResourceOption) (*VpceConfiguration, error) {
	var resource VpceConfiguration
	err := ctx.ReadResource("aws-native:devicefarm:VpceConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpceConfiguration resources.
type vpceConfigurationState struct {
}

type VpceConfigurationState struct {
}

func (VpceConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpceConfigurationState)(nil)).Elem()
}

type vpceConfigurationArgs struct {
	ServiceDnsName               string                 `pulumi:"serviceDnsName"`
	Tags                         []VpceConfigurationTag `pulumi:"tags"`
	VpceConfigurationDescription *string                `pulumi:"vpceConfigurationDescription"`
	VpceConfigurationName        *string                `pulumi:"vpceConfigurationName"`
	VpceServiceName              string                 `pulumi:"vpceServiceName"`
}

// The set of arguments for constructing a VpceConfiguration resource.
type VpceConfigurationArgs struct {
	ServiceDnsName               pulumi.StringInput
	Tags                         VpceConfigurationTagArrayInput
	VpceConfigurationDescription pulumi.StringPtrInput
	VpceConfigurationName        pulumi.StringPtrInput
	VpceServiceName              pulumi.StringInput
}

func (VpceConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpceConfigurationArgs)(nil)).Elem()
}

type VpceConfigurationInput interface {
	pulumi.Input

	ToVpceConfigurationOutput() VpceConfigurationOutput
	ToVpceConfigurationOutputWithContext(ctx context.Context) VpceConfigurationOutput
}

func (*VpceConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**VpceConfiguration)(nil)).Elem()
}

func (i *VpceConfiguration) ToVpceConfigurationOutput() VpceConfigurationOutput {
	return i.ToVpceConfigurationOutputWithContext(context.Background())
}

func (i *VpceConfiguration) ToVpceConfigurationOutputWithContext(ctx context.Context) VpceConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpceConfigurationOutput)
}

type VpceConfigurationOutput struct{ *pulumi.OutputState }

func (VpceConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpceConfiguration)(nil)).Elem()
}

func (o VpceConfigurationOutput) ToVpceConfigurationOutput() VpceConfigurationOutput {
	return o
}

func (o VpceConfigurationOutput) ToVpceConfigurationOutputWithContext(ctx context.Context) VpceConfigurationOutput {
	return o
}

func (o VpceConfigurationOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *VpceConfiguration) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o VpceConfigurationOutput) ServiceDnsName() pulumi.StringOutput {
	return o.ApplyT(func(v *VpceConfiguration) pulumi.StringOutput { return v.ServiceDnsName }).(pulumi.StringOutput)
}

func (o VpceConfigurationOutput) Tags() VpceConfigurationTagArrayOutput {
	return o.ApplyT(func(v *VpceConfiguration) VpceConfigurationTagArrayOutput { return v.Tags }).(VpceConfigurationTagArrayOutput)
}

func (o VpceConfigurationOutput) VpceConfigurationDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpceConfiguration) pulumi.StringPtrOutput { return v.VpceConfigurationDescription }).(pulumi.StringPtrOutput)
}

func (o VpceConfigurationOutput) VpceConfigurationName() pulumi.StringOutput {
	return o.ApplyT(func(v *VpceConfiguration) pulumi.StringOutput { return v.VpceConfigurationName }).(pulumi.StringOutput)
}

func (o VpceConfigurationOutput) VpceServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *VpceConfiguration) pulumi.StringOutput { return v.VpceServiceName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpceConfigurationInput)(nil)).Elem(), &VpceConfiguration{})
	pulumi.RegisterOutputType(VpceConfigurationOutput{})
}
