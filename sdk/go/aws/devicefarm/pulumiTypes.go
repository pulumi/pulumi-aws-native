// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package devicefarm

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents a condition for a device pool.
type DevicePoolRule struct {
	// The rule's stringified attribute.
	Attribute *DevicePoolRuleAttribute `pulumi:"attribute"`
	// Specifies how Device Farm compares the rule's attribute to the value.
	Operator *DevicePoolRuleOperator `pulumi:"operator"`
	// The rule's value.
	Value *string `pulumi:"value"`
}

// DevicePoolRuleInput is an input type that accepts DevicePoolRuleArgs and DevicePoolRuleOutput values.
// You can construct a concrete instance of `DevicePoolRuleInput` via:
//
//          DevicePoolRuleArgs{...}
type DevicePoolRuleInput interface {
	pulumi.Input

	ToDevicePoolRuleOutput() DevicePoolRuleOutput
	ToDevicePoolRuleOutputWithContext(context.Context) DevicePoolRuleOutput
}

// Represents a condition for a device pool.
type DevicePoolRuleArgs struct {
	// The rule's stringified attribute.
	Attribute DevicePoolRuleAttributePtrInput `pulumi:"attribute"`
	// Specifies how Device Farm compares the rule's attribute to the value.
	Operator DevicePoolRuleOperatorPtrInput `pulumi:"operator"`
	// The rule's value.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (DevicePoolRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DevicePoolRule)(nil)).Elem()
}

func (i DevicePoolRuleArgs) ToDevicePoolRuleOutput() DevicePoolRuleOutput {
	return i.ToDevicePoolRuleOutputWithContext(context.Background())
}

func (i DevicePoolRuleArgs) ToDevicePoolRuleOutputWithContext(ctx context.Context) DevicePoolRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicePoolRuleOutput)
}

// DevicePoolRuleArrayInput is an input type that accepts DevicePoolRuleArray and DevicePoolRuleArrayOutput values.
// You can construct a concrete instance of `DevicePoolRuleArrayInput` via:
//
//          DevicePoolRuleArray{ DevicePoolRuleArgs{...} }
type DevicePoolRuleArrayInput interface {
	pulumi.Input

	ToDevicePoolRuleArrayOutput() DevicePoolRuleArrayOutput
	ToDevicePoolRuleArrayOutputWithContext(context.Context) DevicePoolRuleArrayOutput
}

type DevicePoolRuleArray []DevicePoolRuleInput

func (DevicePoolRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DevicePoolRule)(nil)).Elem()
}

func (i DevicePoolRuleArray) ToDevicePoolRuleArrayOutput() DevicePoolRuleArrayOutput {
	return i.ToDevicePoolRuleArrayOutputWithContext(context.Background())
}

func (i DevicePoolRuleArray) ToDevicePoolRuleArrayOutputWithContext(ctx context.Context) DevicePoolRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicePoolRuleArrayOutput)
}

// Represents a condition for a device pool.
type DevicePoolRuleOutput struct{ *pulumi.OutputState }

func (DevicePoolRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DevicePoolRule)(nil)).Elem()
}

func (o DevicePoolRuleOutput) ToDevicePoolRuleOutput() DevicePoolRuleOutput {
	return o
}

func (o DevicePoolRuleOutput) ToDevicePoolRuleOutputWithContext(ctx context.Context) DevicePoolRuleOutput {
	return o
}

// The rule's stringified attribute.
func (o DevicePoolRuleOutput) Attribute() DevicePoolRuleAttributePtrOutput {
	return o.ApplyT(func(v DevicePoolRule) *DevicePoolRuleAttribute { return v.Attribute }).(DevicePoolRuleAttributePtrOutput)
}

// Specifies how Device Farm compares the rule's attribute to the value.
func (o DevicePoolRuleOutput) Operator() DevicePoolRuleOperatorPtrOutput {
	return o.ApplyT(func(v DevicePoolRule) *DevicePoolRuleOperator { return v.Operator }).(DevicePoolRuleOperatorPtrOutput)
}

// The rule's value.
func (o DevicePoolRuleOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DevicePoolRule) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type DevicePoolRuleArrayOutput struct{ *pulumi.OutputState }

func (DevicePoolRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DevicePoolRule)(nil)).Elem()
}

func (o DevicePoolRuleArrayOutput) ToDevicePoolRuleArrayOutput() DevicePoolRuleArrayOutput {
	return o
}

func (o DevicePoolRuleArrayOutput) ToDevicePoolRuleArrayOutputWithContext(ctx context.Context) DevicePoolRuleArrayOutput {
	return o
}

func (o DevicePoolRuleArrayOutput) Index(i pulumi.IntInput) DevicePoolRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DevicePoolRule {
		return vs[0].([]DevicePoolRule)[vs[1].(int)]
	}).(DevicePoolRuleOutput)
}

type DevicePoolTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// DevicePoolTagInput is an input type that accepts DevicePoolTagArgs and DevicePoolTagOutput values.
// You can construct a concrete instance of `DevicePoolTagInput` via:
//
//          DevicePoolTagArgs{...}
type DevicePoolTagInput interface {
	pulumi.Input

	ToDevicePoolTagOutput() DevicePoolTagOutput
	ToDevicePoolTagOutputWithContext(context.Context) DevicePoolTagOutput
}

type DevicePoolTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (DevicePoolTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DevicePoolTag)(nil)).Elem()
}

func (i DevicePoolTagArgs) ToDevicePoolTagOutput() DevicePoolTagOutput {
	return i.ToDevicePoolTagOutputWithContext(context.Background())
}

func (i DevicePoolTagArgs) ToDevicePoolTagOutputWithContext(ctx context.Context) DevicePoolTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicePoolTagOutput)
}

// DevicePoolTagArrayInput is an input type that accepts DevicePoolTagArray and DevicePoolTagArrayOutput values.
// You can construct a concrete instance of `DevicePoolTagArrayInput` via:
//
//          DevicePoolTagArray{ DevicePoolTagArgs{...} }
type DevicePoolTagArrayInput interface {
	pulumi.Input

	ToDevicePoolTagArrayOutput() DevicePoolTagArrayOutput
	ToDevicePoolTagArrayOutputWithContext(context.Context) DevicePoolTagArrayOutput
}

type DevicePoolTagArray []DevicePoolTagInput

func (DevicePoolTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DevicePoolTag)(nil)).Elem()
}

func (i DevicePoolTagArray) ToDevicePoolTagArrayOutput() DevicePoolTagArrayOutput {
	return i.ToDevicePoolTagArrayOutputWithContext(context.Background())
}

func (i DevicePoolTagArray) ToDevicePoolTagArrayOutputWithContext(ctx context.Context) DevicePoolTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicePoolTagArrayOutput)
}

type DevicePoolTagOutput struct{ *pulumi.OutputState }

func (DevicePoolTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DevicePoolTag)(nil)).Elem()
}

func (o DevicePoolTagOutput) ToDevicePoolTagOutput() DevicePoolTagOutput {
	return o
}

func (o DevicePoolTagOutput) ToDevicePoolTagOutputWithContext(ctx context.Context) DevicePoolTagOutput {
	return o
}

func (o DevicePoolTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v DevicePoolTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o DevicePoolTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v DevicePoolTag) string { return v.Value }).(pulumi.StringOutput)
}

type DevicePoolTagArrayOutput struct{ *pulumi.OutputState }

func (DevicePoolTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DevicePoolTag)(nil)).Elem()
}

func (o DevicePoolTagArrayOutput) ToDevicePoolTagArrayOutput() DevicePoolTagArrayOutput {
	return o
}

func (o DevicePoolTagArrayOutput) ToDevicePoolTagArrayOutputWithContext(ctx context.Context) DevicePoolTagArrayOutput {
	return o
}

func (o DevicePoolTagArrayOutput) Index(i pulumi.IntInput) DevicePoolTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DevicePoolTag {
		return vs[0].([]DevicePoolTag)[vs[1].(int)]
	}).(DevicePoolTagOutput)
}

type InstanceProfileTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// InstanceProfileTagInput is an input type that accepts InstanceProfileTagArgs and InstanceProfileTagOutput values.
// You can construct a concrete instance of `InstanceProfileTagInput` via:
//
//          InstanceProfileTagArgs{...}
type InstanceProfileTagInput interface {
	pulumi.Input

	ToInstanceProfileTagOutput() InstanceProfileTagOutput
	ToInstanceProfileTagOutputWithContext(context.Context) InstanceProfileTagOutput
}

type InstanceProfileTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (InstanceProfileTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceProfileTag)(nil)).Elem()
}

func (i InstanceProfileTagArgs) ToInstanceProfileTagOutput() InstanceProfileTagOutput {
	return i.ToInstanceProfileTagOutputWithContext(context.Background())
}

func (i InstanceProfileTagArgs) ToInstanceProfileTagOutputWithContext(ctx context.Context) InstanceProfileTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceProfileTagOutput)
}

// InstanceProfileTagArrayInput is an input type that accepts InstanceProfileTagArray and InstanceProfileTagArrayOutput values.
// You can construct a concrete instance of `InstanceProfileTagArrayInput` via:
//
//          InstanceProfileTagArray{ InstanceProfileTagArgs{...} }
type InstanceProfileTagArrayInput interface {
	pulumi.Input

	ToInstanceProfileTagArrayOutput() InstanceProfileTagArrayOutput
	ToInstanceProfileTagArrayOutputWithContext(context.Context) InstanceProfileTagArrayOutput
}

type InstanceProfileTagArray []InstanceProfileTagInput

func (InstanceProfileTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceProfileTag)(nil)).Elem()
}

func (i InstanceProfileTagArray) ToInstanceProfileTagArrayOutput() InstanceProfileTagArrayOutput {
	return i.ToInstanceProfileTagArrayOutputWithContext(context.Background())
}

func (i InstanceProfileTagArray) ToInstanceProfileTagArrayOutputWithContext(ctx context.Context) InstanceProfileTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceProfileTagArrayOutput)
}

type InstanceProfileTagOutput struct{ *pulumi.OutputState }

func (InstanceProfileTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceProfileTag)(nil)).Elem()
}

func (o InstanceProfileTagOutput) ToInstanceProfileTagOutput() InstanceProfileTagOutput {
	return o
}

func (o InstanceProfileTagOutput) ToInstanceProfileTagOutputWithContext(ctx context.Context) InstanceProfileTagOutput {
	return o
}

func (o InstanceProfileTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceProfileTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o InstanceProfileTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceProfileTag) string { return v.Value }).(pulumi.StringOutput)
}

type InstanceProfileTagArrayOutput struct{ *pulumi.OutputState }

func (InstanceProfileTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceProfileTag)(nil)).Elem()
}

func (o InstanceProfileTagArrayOutput) ToInstanceProfileTagArrayOutput() InstanceProfileTagArrayOutput {
	return o
}

func (o InstanceProfileTagArrayOutput) ToInstanceProfileTagArrayOutputWithContext(ctx context.Context) InstanceProfileTagArrayOutput {
	return o
}

func (o InstanceProfileTagArrayOutput) Index(i pulumi.IntInput) InstanceProfileTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceProfileTag {
		return vs[0].([]InstanceProfileTag)[vs[1].(int)]
	}).(InstanceProfileTagOutput)
}

type NetworkProfileTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// NetworkProfileTagInput is an input type that accepts NetworkProfileTagArgs and NetworkProfileTagOutput values.
// You can construct a concrete instance of `NetworkProfileTagInput` via:
//
//          NetworkProfileTagArgs{...}
type NetworkProfileTagInput interface {
	pulumi.Input

	ToNetworkProfileTagOutput() NetworkProfileTagOutput
	ToNetworkProfileTagOutputWithContext(context.Context) NetworkProfileTagOutput
}

type NetworkProfileTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (NetworkProfileTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkProfileTag)(nil)).Elem()
}

func (i NetworkProfileTagArgs) ToNetworkProfileTagOutput() NetworkProfileTagOutput {
	return i.ToNetworkProfileTagOutputWithContext(context.Background())
}

func (i NetworkProfileTagArgs) ToNetworkProfileTagOutputWithContext(ctx context.Context) NetworkProfileTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkProfileTagOutput)
}

// NetworkProfileTagArrayInput is an input type that accepts NetworkProfileTagArray and NetworkProfileTagArrayOutput values.
// You can construct a concrete instance of `NetworkProfileTagArrayInput` via:
//
//          NetworkProfileTagArray{ NetworkProfileTagArgs{...} }
type NetworkProfileTagArrayInput interface {
	pulumi.Input

	ToNetworkProfileTagArrayOutput() NetworkProfileTagArrayOutput
	ToNetworkProfileTagArrayOutputWithContext(context.Context) NetworkProfileTagArrayOutput
}

type NetworkProfileTagArray []NetworkProfileTagInput

func (NetworkProfileTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkProfileTag)(nil)).Elem()
}

func (i NetworkProfileTagArray) ToNetworkProfileTagArrayOutput() NetworkProfileTagArrayOutput {
	return i.ToNetworkProfileTagArrayOutputWithContext(context.Background())
}

func (i NetworkProfileTagArray) ToNetworkProfileTagArrayOutputWithContext(ctx context.Context) NetworkProfileTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkProfileTagArrayOutput)
}

type NetworkProfileTagOutput struct{ *pulumi.OutputState }

func (NetworkProfileTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkProfileTag)(nil)).Elem()
}

func (o NetworkProfileTagOutput) ToNetworkProfileTagOutput() NetworkProfileTagOutput {
	return o
}

func (o NetworkProfileTagOutput) ToNetworkProfileTagOutputWithContext(ctx context.Context) NetworkProfileTagOutput {
	return o
}

func (o NetworkProfileTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkProfileTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o NetworkProfileTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkProfileTag) string { return v.Value }).(pulumi.StringOutput)
}

type NetworkProfileTagArrayOutput struct{ *pulumi.OutputState }

func (NetworkProfileTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkProfileTag)(nil)).Elem()
}

func (o NetworkProfileTagArrayOutput) ToNetworkProfileTagArrayOutput() NetworkProfileTagArrayOutput {
	return o
}

func (o NetworkProfileTagArrayOutput) ToNetworkProfileTagArrayOutputWithContext(ctx context.Context) NetworkProfileTagArrayOutput {
	return o
}

func (o NetworkProfileTagArrayOutput) Index(i pulumi.IntInput) NetworkProfileTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkProfileTag {
		return vs[0].([]NetworkProfileTag)[vs[1].(int)]
	}).(NetworkProfileTagOutput)
}

type ProjectTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// ProjectTagInput is an input type that accepts ProjectTagArgs and ProjectTagOutput values.
// You can construct a concrete instance of `ProjectTagInput` via:
//
//          ProjectTagArgs{...}
type ProjectTagInput interface {
	pulumi.Input

	ToProjectTagOutput() ProjectTagOutput
	ToProjectTagOutputWithContext(context.Context) ProjectTagOutput
}

type ProjectTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (ProjectTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectTag)(nil)).Elem()
}

func (i ProjectTagArgs) ToProjectTagOutput() ProjectTagOutput {
	return i.ToProjectTagOutputWithContext(context.Background())
}

func (i ProjectTagArgs) ToProjectTagOutputWithContext(ctx context.Context) ProjectTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectTagOutput)
}

// ProjectTagArrayInput is an input type that accepts ProjectTagArray and ProjectTagArrayOutput values.
// You can construct a concrete instance of `ProjectTagArrayInput` via:
//
//          ProjectTagArray{ ProjectTagArgs{...} }
type ProjectTagArrayInput interface {
	pulumi.Input

	ToProjectTagArrayOutput() ProjectTagArrayOutput
	ToProjectTagArrayOutputWithContext(context.Context) ProjectTagArrayOutput
}

type ProjectTagArray []ProjectTagInput

func (ProjectTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectTag)(nil)).Elem()
}

func (i ProjectTagArray) ToProjectTagArrayOutput() ProjectTagArrayOutput {
	return i.ToProjectTagArrayOutputWithContext(context.Background())
}

func (i ProjectTagArray) ToProjectTagArrayOutputWithContext(ctx context.Context) ProjectTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectTagArrayOutput)
}

type ProjectTagOutput struct{ *pulumi.OutputState }

func (ProjectTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectTag)(nil)).Elem()
}

func (o ProjectTagOutput) ToProjectTagOutput() ProjectTagOutput {
	return o
}

func (o ProjectTagOutput) ToProjectTagOutputWithContext(ctx context.Context) ProjectTagOutput {
	return o
}

func (o ProjectTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o ProjectTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectTag) string { return v.Value }).(pulumi.StringOutput)
}

type ProjectTagArrayOutput struct{ *pulumi.OutputState }

func (ProjectTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectTag)(nil)).Elem()
}

func (o ProjectTagArrayOutput) ToProjectTagArrayOutput() ProjectTagArrayOutput {
	return o
}

func (o ProjectTagArrayOutput) ToProjectTagArrayOutputWithContext(ctx context.Context) ProjectTagArrayOutput {
	return o
}

func (o ProjectTagArrayOutput) Index(i pulumi.IntInput) ProjectTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectTag {
		return vs[0].([]ProjectTag)[vs[1].(int)]
	}).(ProjectTagOutput)
}

type TestGridProjectTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// TestGridProjectTagInput is an input type that accepts TestGridProjectTagArgs and TestGridProjectTagOutput values.
// You can construct a concrete instance of `TestGridProjectTagInput` via:
//
//          TestGridProjectTagArgs{...}
type TestGridProjectTagInput interface {
	pulumi.Input

	ToTestGridProjectTagOutput() TestGridProjectTagOutput
	ToTestGridProjectTagOutputWithContext(context.Context) TestGridProjectTagOutput
}

type TestGridProjectTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (TestGridProjectTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TestGridProjectTag)(nil)).Elem()
}

func (i TestGridProjectTagArgs) ToTestGridProjectTagOutput() TestGridProjectTagOutput {
	return i.ToTestGridProjectTagOutputWithContext(context.Background())
}

func (i TestGridProjectTagArgs) ToTestGridProjectTagOutputWithContext(ctx context.Context) TestGridProjectTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestGridProjectTagOutput)
}

// TestGridProjectTagArrayInput is an input type that accepts TestGridProjectTagArray and TestGridProjectTagArrayOutput values.
// You can construct a concrete instance of `TestGridProjectTagArrayInput` via:
//
//          TestGridProjectTagArray{ TestGridProjectTagArgs{...} }
type TestGridProjectTagArrayInput interface {
	pulumi.Input

	ToTestGridProjectTagArrayOutput() TestGridProjectTagArrayOutput
	ToTestGridProjectTagArrayOutputWithContext(context.Context) TestGridProjectTagArrayOutput
}

type TestGridProjectTagArray []TestGridProjectTagInput

func (TestGridProjectTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TestGridProjectTag)(nil)).Elem()
}

func (i TestGridProjectTagArray) ToTestGridProjectTagArrayOutput() TestGridProjectTagArrayOutput {
	return i.ToTestGridProjectTagArrayOutputWithContext(context.Background())
}

func (i TestGridProjectTagArray) ToTestGridProjectTagArrayOutputWithContext(ctx context.Context) TestGridProjectTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestGridProjectTagArrayOutput)
}

type TestGridProjectTagOutput struct{ *pulumi.OutputState }

func (TestGridProjectTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TestGridProjectTag)(nil)).Elem()
}

func (o TestGridProjectTagOutput) ToTestGridProjectTagOutput() TestGridProjectTagOutput {
	return o
}

func (o TestGridProjectTagOutput) ToTestGridProjectTagOutputWithContext(ctx context.Context) TestGridProjectTagOutput {
	return o
}

func (o TestGridProjectTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v TestGridProjectTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o TestGridProjectTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v TestGridProjectTag) string { return v.Value }).(pulumi.StringOutput)
}

type TestGridProjectTagArrayOutput struct{ *pulumi.OutputState }

func (TestGridProjectTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TestGridProjectTag)(nil)).Elem()
}

func (o TestGridProjectTagArrayOutput) ToTestGridProjectTagArrayOutput() TestGridProjectTagArrayOutput {
	return o
}

func (o TestGridProjectTagArrayOutput) ToTestGridProjectTagArrayOutputWithContext(ctx context.Context) TestGridProjectTagArrayOutput {
	return o
}

func (o TestGridProjectTagArrayOutput) Index(i pulumi.IntInput) TestGridProjectTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TestGridProjectTag {
		return vs[0].([]TestGridProjectTag)[vs[1].(int)]
	}).(TestGridProjectTagOutput)
}

// The VPC security groups and subnets that are attached to a TestGrid project.
type TestGridProjectVpcConfig struct {
	// A list of VPC security group IDs in your Amazon VPC.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// A list of VPC subnet IDs in your Amazon VPC.
	SubnetIds []string `pulumi:"subnetIds"`
	VpcId     string   `pulumi:"vpcId"`
}

// TestGridProjectVpcConfigInput is an input type that accepts TestGridProjectVpcConfigArgs and TestGridProjectVpcConfigOutput values.
// You can construct a concrete instance of `TestGridProjectVpcConfigInput` via:
//
//          TestGridProjectVpcConfigArgs{...}
type TestGridProjectVpcConfigInput interface {
	pulumi.Input

	ToTestGridProjectVpcConfigOutput() TestGridProjectVpcConfigOutput
	ToTestGridProjectVpcConfigOutputWithContext(context.Context) TestGridProjectVpcConfigOutput
}

// The VPC security groups and subnets that are attached to a TestGrid project.
type TestGridProjectVpcConfigArgs struct {
	// A list of VPC security group IDs in your Amazon VPC.
	SecurityGroupIds pulumi.StringArrayInput `pulumi:"securityGroupIds"`
	// A list of VPC subnet IDs in your Amazon VPC.
	SubnetIds pulumi.StringArrayInput `pulumi:"subnetIds"`
	VpcId     pulumi.StringInput      `pulumi:"vpcId"`
}

func (TestGridProjectVpcConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TestGridProjectVpcConfig)(nil)).Elem()
}

func (i TestGridProjectVpcConfigArgs) ToTestGridProjectVpcConfigOutput() TestGridProjectVpcConfigOutput {
	return i.ToTestGridProjectVpcConfigOutputWithContext(context.Background())
}

func (i TestGridProjectVpcConfigArgs) ToTestGridProjectVpcConfigOutputWithContext(ctx context.Context) TestGridProjectVpcConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestGridProjectVpcConfigOutput)
}

func (i TestGridProjectVpcConfigArgs) ToTestGridProjectVpcConfigPtrOutput() TestGridProjectVpcConfigPtrOutput {
	return i.ToTestGridProjectVpcConfigPtrOutputWithContext(context.Background())
}

func (i TestGridProjectVpcConfigArgs) ToTestGridProjectVpcConfigPtrOutputWithContext(ctx context.Context) TestGridProjectVpcConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestGridProjectVpcConfigOutput).ToTestGridProjectVpcConfigPtrOutputWithContext(ctx)
}

// TestGridProjectVpcConfigPtrInput is an input type that accepts TestGridProjectVpcConfigArgs, TestGridProjectVpcConfigPtr and TestGridProjectVpcConfigPtrOutput values.
// You can construct a concrete instance of `TestGridProjectVpcConfigPtrInput` via:
//
//          TestGridProjectVpcConfigArgs{...}
//
//  or:
//
//          nil
type TestGridProjectVpcConfigPtrInput interface {
	pulumi.Input

	ToTestGridProjectVpcConfigPtrOutput() TestGridProjectVpcConfigPtrOutput
	ToTestGridProjectVpcConfigPtrOutputWithContext(context.Context) TestGridProjectVpcConfigPtrOutput
}

type testGridProjectVpcConfigPtrType TestGridProjectVpcConfigArgs

func TestGridProjectVpcConfigPtr(v *TestGridProjectVpcConfigArgs) TestGridProjectVpcConfigPtrInput {
	return (*testGridProjectVpcConfigPtrType)(v)
}

func (*testGridProjectVpcConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TestGridProjectVpcConfig)(nil)).Elem()
}

func (i *testGridProjectVpcConfigPtrType) ToTestGridProjectVpcConfigPtrOutput() TestGridProjectVpcConfigPtrOutput {
	return i.ToTestGridProjectVpcConfigPtrOutputWithContext(context.Background())
}

func (i *testGridProjectVpcConfigPtrType) ToTestGridProjectVpcConfigPtrOutputWithContext(ctx context.Context) TestGridProjectVpcConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestGridProjectVpcConfigPtrOutput)
}

// The VPC security groups and subnets that are attached to a TestGrid project.
type TestGridProjectVpcConfigOutput struct{ *pulumi.OutputState }

func (TestGridProjectVpcConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TestGridProjectVpcConfig)(nil)).Elem()
}

func (o TestGridProjectVpcConfigOutput) ToTestGridProjectVpcConfigOutput() TestGridProjectVpcConfigOutput {
	return o
}

func (o TestGridProjectVpcConfigOutput) ToTestGridProjectVpcConfigOutputWithContext(ctx context.Context) TestGridProjectVpcConfigOutput {
	return o
}

func (o TestGridProjectVpcConfigOutput) ToTestGridProjectVpcConfigPtrOutput() TestGridProjectVpcConfigPtrOutput {
	return o.ToTestGridProjectVpcConfigPtrOutputWithContext(context.Background())
}

func (o TestGridProjectVpcConfigOutput) ToTestGridProjectVpcConfigPtrOutputWithContext(ctx context.Context) TestGridProjectVpcConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TestGridProjectVpcConfig) *TestGridProjectVpcConfig {
		return &v
	}).(TestGridProjectVpcConfigPtrOutput)
}

// A list of VPC security group IDs in your Amazon VPC.
func (o TestGridProjectVpcConfigOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TestGridProjectVpcConfig) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// A list of VPC subnet IDs in your Amazon VPC.
func (o TestGridProjectVpcConfigOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TestGridProjectVpcConfig) []string { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

func (o TestGridProjectVpcConfigOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v TestGridProjectVpcConfig) string { return v.VpcId }).(pulumi.StringOutput)
}

type TestGridProjectVpcConfigPtrOutput struct{ *pulumi.OutputState }

func (TestGridProjectVpcConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TestGridProjectVpcConfig)(nil)).Elem()
}

func (o TestGridProjectVpcConfigPtrOutput) ToTestGridProjectVpcConfigPtrOutput() TestGridProjectVpcConfigPtrOutput {
	return o
}

func (o TestGridProjectVpcConfigPtrOutput) ToTestGridProjectVpcConfigPtrOutputWithContext(ctx context.Context) TestGridProjectVpcConfigPtrOutput {
	return o
}

func (o TestGridProjectVpcConfigPtrOutput) Elem() TestGridProjectVpcConfigOutput {
	return o.ApplyT(func(v *TestGridProjectVpcConfig) TestGridProjectVpcConfig {
		if v != nil {
			return *v
		}
		var ret TestGridProjectVpcConfig
		return ret
	}).(TestGridProjectVpcConfigOutput)
}

// A list of VPC security group IDs in your Amazon VPC.
func (o TestGridProjectVpcConfigPtrOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TestGridProjectVpcConfig) []string {
		if v == nil {
			return nil
		}
		return v.SecurityGroupIds
	}).(pulumi.StringArrayOutput)
}

// A list of VPC subnet IDs in your Amazon VPC.
func (o TestGridProjectVpcConfigPtrOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TestGridProjectVpcConfig) []string {
		if v == nil {
			return nil
		}
		return v.SubnetIds
	}).(pulumi.StringArrayOutput)
}

func (o TestGridProjectVpcConfigPtrOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TestGridProjectVpcConfig) *string {
		if v == nil {
			return nil
		}
		return &v.VpcId
	}).(pulumi.StringPtrOutput)
}

type VPCEConfigurationTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// VPCEConfigurationTagInput is an input type that accepts VPCEConfigurationTagArgs and VPCEConfigurationTagOutput values.
// You can construct a concrete instance of `VPCEConfigurationTagInput` via:
//
//          VPCEConfigurationTagArgs{...}
type VPCEConfigurationTagInput interface {
	pulumi.Input

	ToVPCEConfigurationTagOutput() VPCEConfigurationTagOutput
	ToVPCEConfigurationTagOutputWithContext(context.Context) VPCEConfigurationTagOutput
}

type VPCEConfigurationTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (VPCEConfigurationTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VPCEConfigurationTag)(nil)).Elem()
}

func (i VPCEConfigurationTagArgs) ToVPCEConfigurationTagOutput() VPCEConfigurationTagOutput {
	return i.ToVPCEConfigurationTagOutputWithContext(context.Background())
}

func (i VPCEConfigurationTagArgs) ToVPCEConfigurationTagOutputWithContext(ctx context.Context) VPCEConfigurationTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VPCEConfigurationTagOutput)
}

// VPCEConfigurationTagArrayInput is an input type that accepts VPCEConfigurationTagArray and VPCEConfigurationTagArrayOutput values.
// You can construct a concrete instance of `VPCEConfigurationTagArrayInput` via:
//
//          VPCEConfigurationTagArray{ VPCEConfigurationTagArgs{...} }
type VPCEConfigurationTagArrayInput interface {
	pulumi.Input

	ToVPCEConfigurationTagArrayOutput() VPCEConfigurationTagArrayOutput
	ToVPCEConfigurationTagArrayOutputWithContext(context.Context) VPCEConfigurationTagArrayOutput
}

type VPCEConfigurationTagArray []VPCEConfigurationTagInput

func (VPCEConfigurationTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VPCEConfigurationTag)(nil)).Elem()
}

func (i VPCEConfigurationTagArray) ToVPCEConfigurationTagArrayOutput() VPCEConfigurationTagArrayOutput {
	return i.ToVPCEConfigurationTagArrayOutputWithContext(context.Background())
}

func (i VPCEConfigurationTagArray) ToVPCEConfigurationTagArrayOutputWithContext(ctx context.Context) VPCEConfigurationTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VPCEConfigurationTagArrayOutput)
}

type VPCEConfigurationTagOutput struct{ *pulumi.OutputState }

func (VPCEConfigurationTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VPCEConfigurationTag)(nil)).Elem()
}

func (o VPCEConfigurationTagOutput) ToVPCEConfigurationTagOutput() VPCEConfigurationTagOutput {
	return o
}

func (o VPCEConfigurationTagOutput) ToVPCEConfigurationTagOutputWithContext(ctx context.Context) VPCEConfigurationTagOutput {
	return o
}

func (o VPCEConfigurationTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v VPCEConfigurationTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o VPCEConfigurationTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v VPCEConfigurationTag) string { return v.Value }).(pulumi.StringOutput)
}

type VPCEConfigurationTagArrayOutput struct{ *pulumi.OutputState }

func (VPCEConfigurationTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VPCEConfigurationTag)(nil)).Elem()
}

func (o VPCEConfigurationTagArrayOutput) ToVPCEConfigurationTagArrayOutput() VPCEConfigurationTagArrayOutput {
	return o
}

func (o VPCEConfigurationTagArrayOutput) ToVPCEConfigurationTagArrayOutputWithContext(ctx context.Context) VPCEConfigurationTagArrayOutput {
	return o
}

func (o VPCEConfigurationTagArrayOutput) Index(i pulumi.IntInput) VPCEConfigurationTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VPCEConfigurationTag {
		return vs[0].([]VPCEConfigurationTag)[vs[1].(int)]
	}).(VPCEConfigurationTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DevicePoolRuleInput)(nil)).Elem(), DevicePoolRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DevicePoolRuleArrayInput)(nil)).Elem(), DevicePoolRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DevicePoolTagInput)(nil)).Elem(), DevicePoolTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DevicePoolTagArrayInput)(nil)).Elem(), DevicePoolTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceProfileTagInput)(nil)).Elem(), InstanceProfileTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceProfileTagArrayInput)(nil)).Elem(), InstanceProfileTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkProfileTagInput)(nil)).Elem(), NetworkProfileTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkProfileTagArrayInput)(nil)).Elem(), NetworkProfileTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectTagInput)(nil)).Elem(), ProjectTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectTagArrayInput)(nil)).Elem(), ProjectTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TestGridProjectTagInput)(nil)).Elem(), TestGridProjectTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TestGridProjectTagArrayInput)(nil)).Elem(), TestGridProjectTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TestGridProjectVpcConfigInput)(nil)).Elem(), TestGridProjectVpcConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TestGridProjectVpcConfigPtrInput)(nil)).Elem(), TestGridProjectVpcConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VPCEConfigurationTagInput)(nil)).Elem(), VPCEConfigurationTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VPCEConfigurationTagArrayInput)(nil)).Elem(), VPCEConfigurationTagArray{})
	pulumi.RegisterOutputType(DevicePoolRuleOutput{})
	pulumi.RegisterOutputType(DevicePoolRuleArrayOutput{})
	pulumi.RegisterOutputType(DevicePoolTagOutput{})
	pulumi.RegisterOutputType(DevicePoolTagArrayOutput{})
	pulumi.RegisterOutputType(InstanceProfileTagOutput{})
	pulumi.RegisterOutputType(InstanceProfileTagArrayOutput{})
	pulumi.RegisterOutputType(NetworkProfileTagOutput{})
	pulumi.RegisterOutputType(NetworkProfileTagArrayOutput{})
	pulumi.RegisterOutputType(ProjectTagOutput{})
	pulumi.RegisterOutputType(ProjectTagArrayOutput{})
	pulumi.RegisterOutputType(TestGridProjectTagOutput{})
	pulumi.RegisterOutputType(TestGridProjectTagArrayOutput{})
	pulumi.RegisterOutputType(TestGridProjectVpcConfigOutput{})
	pulumi.RegisterOutputType(TestGridProjectVpcConfigPtrOutput{})
	pulumi.RegisterOutputType(VPCEConfigurationTagOutput{})
	pulumi.RegisterOutputType(VPCEConfigurationTagArrayOutput{})
}
