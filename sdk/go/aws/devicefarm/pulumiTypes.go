// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devicefarm

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// Represents a condition for a device pool.
type DevicePoolRule struct {
	// The rule's stringified attribute.
	Attribute *DevicePoolRuleAttribute `pulumi:"attribute"`
	// Specifies how Device Farm compares the rule's attribute to the value.
	Operator *DevicePoolRuleOperator `pulumi:"operator"`
	// The rule's value.
	Value *string `pulumi:"value"`
}

// DevicePoolRuleInput is an input type that accepts DevicePoolRuleArgs and DevicePoolRuleOutput values.
// You can construct a concrete instance of `DevicePoolRuleInput` via:
//
//	DevicePoolRuleArgs{...}
type DevicePoolRuleInput interface {
	pulumi.Input

	ToDevicePoolRuleOutput() DevicePoolRuleOutput
	ToDevicePoolRuleOutputWithContext(context.Context) DevicePoolRuleOutput
}

// Represents a condition for a device pool.
type DevicePoolRuleArgs struct {
	// The rule's stringified attribute.
	Attribute DevicePoolRuleAttributePtrInput `pulumi:"attribute"`
	// Specifies how Device Farm compares the rule's attribute to the value.
	Operator DevicePoolRuleOperatorPtrInput `pulumi:"operator"`
	// The rule's value.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (DevicePoolRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DevicePoolRule)(nil)).Elem()
}

func (i DevicePoolRuleArgs) ToDevicePoolRuleOutput() DevicePoolRuleOutput {
	return i.ToDevicePoolRuleOutputWithContext(context.Background())
}

func (i DevicePoolRuleArgs) ToDevicePoolRuleOutputWithContext(ctx context.Context) DevicePoolRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicePoolRuleOutput)
}

// DevicePoolRuleArrayInput is an input type that accepts DevicePoolRuleArray and DevicePoolRuleArrayOutput values.
// You can construct a concrete instance of `DevicePoolRuleArrayInput` via:
//
//	DevicePoolRuleArray{ DevicePoolRuleArgs{...} }
type DevicePoolRuleArrayInput interface {
	pulumi.Input

	ToDevicePoolRuleArrayOutput() DevicePoolRuleArrayOutput
	ToDevicePoolRuleArrayOutputWithContext(context.Context) DevicePoolRuleArrayOutput
}

type DevicePoolRuleArray []DevicePoolRuleInput

func (DevicePoolRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DevicePoolRule)(nil)).Elem()
}

func (i DevicePoolRuleArray) ToDevicePoolRuleArrayOutput() DevicePoolRuleArrayOutput {
	return i.ToDevicePoolRuleArrayOutputWithContext(context.Background())
}

func (i DevicePoolRuleArray) ToDevicePoolRuleArrayOutputWithContext(ctx context.Context) DevicePoolRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicePoolRuleArrayOutput)
}

// Represents a condition for a device pool.
type DevicePoolRuleOutput struct{ *pulumi.OutputState }

func (DevicePoolRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DevicePoolRule)(nil)).Elem()
}

func (o DevicePoolRuleOutput) ToDevicePoolRuleOutput() DevicePoolRuleOutput {
	return o
}

func (o DevicePoolRuleOutput) ToDevicePoolRuleOutputWithContext(ctx context.Context) DevicePoolRuleOutput {
	return o
}

// The rule's stringified attribute.
func (o DevicePoolRuleOutput) Attribute() DevicePoolRuleAttributePtrOutput {
	return o.ApplyT(func(v DevicePoolRule) *DevicePoolRuleAttribute { return v.Attribute }).(DevicePoolRuleAttributePtrOutput)
}

// Specifies how Device Farm compares the rule's attribute to the value.
func (o DevicePoolRuleOutput) Operator() DevicePoolRuleOperatorPtrOutput {
	return o.ApplyT(func(v DevicePoolRule) *DevicePoolRuleOperator { return v.Operator }).(DevicePoolRuleOperatorPtrOutput)
}

// The rule's value.
func (o DevicePoolRuleOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DevicePoolRule) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type DevicePoolRuleArrayOutput struct{ *pulumi.OutputState }

func (DevicePoolRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DevicePoolRule)(nil)).Elem()
}

func (o DevicePoolRuleArrayOutput) ToDevicePoolRuleArrayOutput() DevicePoolRuleArrayOutput {
	return o
}

func (o DevicePoolRuleArrayOutput) ToDevicePoolRuleArrayOutputWithContext(ctx context.Context) DevicePoolRuleArrayOutput {
	return o
}

func (o DevicePoolRuleArrayOutput) Index(i pulumi.IntInput) DevicePoolRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DevicePoolRule {
		return vs[0].([]DevicePoolRule)[vs[1].(int)]
	}).(DevicePoolRuleOutput)
}

type DevicePoolTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

type InstanceProfileTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

type NetworkProfileTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

type ProjectTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// The VPC security groups and subnets that are attached to a project
type ProjectVpcConfig struct {
	// An array of security group Ids in your Amazon VPC
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// A array of subnet IDs in your Amazon VPC.
	SubnetIds []string `pulumi:"subnetIds"`
	// The ID of the Amazon VPC
	VpcId string `pulumi:"vpcId"`
}

// ProjectVpcConfigInput is an input type that accepts ProjectVpcConfigArgs and ProjectVpcConfigOutput values.
// You can construct a concrete instance of `ProjectVpcConfigInput` via:
//
//	ProjectVpcConfigArgs{...}
type ProjectVpcConfigInput interface {
	pulumi.Input

	ToProjectVpcConfigOutput() ProjectVpcConfigOutput
	ToProjectVpcConfigOutputWithContext(context.Context) ProjectVpcConfigOutput
}

// The VPC security groups and subnets that are attached to a project
type ProjectVpcConfigArgs struct {
	// An array of security group Ids in your Amazon VPC
	SecurityGroupIds pulumi.StringArrayInput `pulumi:"securityGroupIds"`
	// A array of subnet IDs in your Amazon VPC.
	SubnetIds pulumi.StringArrayInput `pulumi:"subnetIds"`
	// The ID of the Amazon VPC
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (ProjectVpcConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectVpcConfig)(nil)).Elem()
}

func (i ProjectVpcConfigArgs) ToProjectVpcConfigOutput() ProjectVpcConfigOutput {
	return i.ToProjectVpcConfigOutputWithContext(context.Background())
}

func (i ProjectVpcConfigArgs) ToProjectVpcConfigOutputWithContext(ctx context.Context) ProjectVpcConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectVpcConfigOutput)
}

func (i ProjectVpcConfigArgs) ToProjectVpcConfigPtrOutput() ProjectVpcConfigPtrOutput {
	return i.ToProjectVpcConfigPtrOutputWithContext(context.Background())
}

func (i ProjectVpcConfigArgs) ToProjectVpcConfigPtrOutputWithContext(ctx context.Context) ProjectVpcConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectVpcConfigOutput).ToProjectVpcConfigPtrOutputWithContext(ctx)
}

// ProjectVpcConfigPtrInput is an input type that accepts ProjectVpcConfigArgs, ProjectVpcConfigPtr and ProjectVpcConfigPtrOutput values.
// You can construct a concrete instance of `ProjectVpcConfigPtrInput` via:
//
//	        ProjectVpcConfigArgs{...}
//
//	or:
//
//	        nil
type ProjectVpcConfigPtrInput interface {
	pulumi.Input

	ToProjectVpcConfigPtrOutput() ProjectVpcConfigPtrOutput
	ToProjectVpcConfigPtrOutputWithContext(context.Context) ProjectVpcConfigPtrOutput
}

type projectVpcConfigPtrType ProjectVpcConfigArgs

func ProjectVpcConfigPtr(v *ProjectVpcConfigArgs) ProjectVpcConfigPtrInput {
	return (*projectVpcConfigPtrType)(v)
}

func (*projectVpcConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectVpcConfig)(nil)).Elem()
}

func (i *projectVpcConfigPtrType) ToProjectVpcConfigPtrOutput() ProjectVpcConfigPtrOutput {
	return i.ToProjectVpcConfigPtrOutputWithContext(context.Background())
}

func (i *projectVpcConfigPtrType) ToProjectVpcConfigPtrOutputWithContext(ctx context.Context) ProjectVpcConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectVpcConfigPtrOutput)
}

// The VPC security groups and subnets that are attached to a project
type ProjectVpcConfigOutput struct{ *pulumi.OutputState }

func (ProjectVpcConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectVpcConfig)(nil)).Elem()
}

func (o ProjectVpcConfigOutput) ToProjectVpcConfigOutput() ProjectVpcConfigOutput {
	return o
}

func (o ProjectVpcConfigOutput) ToProjectVpcConfigOutputWithContext(ctx context.Context) ProjectVpcConfigOutput {
	return o
}

func (o ProjectVpcConfigOutput) ToProjectVpcConfigPtrOutput() ProjectVpcConfigPtrOutput {
	return o.ToProjectVpcConfigPtrOutputWithContext(context.Background())
}

func (o ProjectVpcConfigOutput) ToProjectVpcConfigPtrOutputWithContext(ctx context.Context) ProjectVpcConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectVpcConfig) *ProjectVpcConfig {
		return &v
	}).(ProjectVpcConfigPtrOutput)
}

// An array of security group Ids in your Amazon VPC
func (o ProjectVpcConfigOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectVpcConfig) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// A array of subnet IDs in your Amazon VPC.
func (o ProjectVpcConfigOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectVpcConfig) []string { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

// The ID of the Amazon VPC
func (o ProjectVpcConfigOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectVpcConfig) string { return v.VpcId }).(pulumi.StringOutput)
}

type ProjectVpcConfigPtrOutput struct{ *pulumi.OutputState }

func (ProjectVpcConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectVpcConfig)(nil)).Elem()
}

func (o ProjectVpcConfigPtrOutput) ToProjectVpcConfigPtrOutput() ProjectVpcConfigPtrOutput {
	return o
}

func (o ProjectVpcConfigPtrOutput) ToProjectVpcConfigPtrOutputWithContext(ctx context.Context) ProjectVpcConfigPtrOutput {
	return o
}

func (o ProjectVpcConfigPtrOutput) Elem() ProjectVpcConfigOutput {
	return o.ApplyT(func(v *ProjectVpcConfig) ProjectVpcConfig {
		if v != nil {
			return *v
		}
		var ret ProjectVpcConfig
		return ret
	}).(ProjectVpcConfigOutput)
}

// An array of security group Ids in your Amazon VPC
func (o ProjectVpcConfigPtrOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectVpcConfig) []string {
		if v == nil {
			return nil
		}
		return v.SecurityGroupIds
	}).(pulumi.StringArrayOutput)
}

// A array of subnet IDs in your Amazon VPC.
func (o ProjectVpcConfigPtrOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectVpcConfig) []string {
		if v == nil {
			return nil
		}
		return v.SubnetIds
	}).(pulumi.StringArrayOutput)
}

// The ID of the Amazon VPC
func (o ProjectVpcConfigPtrOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectVpcConfig) *string {
		if v == nil {
			return nil
		}
		return &v.VpcId
	}).(pulumi.StringPtrOutput)
}

type TestGridProjectTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// The VPC security groups and subnets that are attached to a TestGrid project.
type TestGridProjectVpcConfig struct {
	// A list of VPC security group IDs in your Amazon VPC.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// A list of VPC subnet IDs in your Amazon VPC.
	SubnetIds []string `pulumi:"subnetIds"`
	VpcId     string   `pulumi:"vpcId"`
}

// TestGridProjectVpcConfigInput is an input type that accepts TestGridProjectVpcConfigArgs and TestGridProjectVpcConfigOutput values.
// You can construct a concrete instance of `TestGridProjectVpcConfigInput` via:
//
//	TestGridProjectVpcConfigArgs{...}
type TestGridProjectVpcConfigInput interface {
	pulumi.Input

	ToTestGridProjectVpcConfigOutput() TestGridProjectVpcConfigOutput
	ToTestGridProjectVpcConfigOutputWithContext(context.Context) TestGridProjectVpcConfigOutput
}

// The VPC security groups and subnets that are attached to a TestGrid project.
type TestGridProjectVpcConfigArgs struct {
	// A list of VPC security group IDs in your Amazon VPC.
	SecurityGroupIds pulumi.StringArrayInput `pulumi:"securityGroupIds"`
	// A list of VPC subnet IDs in your Amazon VPC.
	SubnetIds pulumi.StringArrayInput `pulumi:"subnetIds"`
	VpcId     pulumi.StringInput      `pulumi:"vpcId"`
}

func (TestGridProjectVpcConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TestGridProjectVpcConfig)(nil)).Elem()
}

func (i TestGridProjectVpcConfigArgs) ToTestGridProjectVpcConfigOutput() TestGridProjectVpcConfigOutput {
	return i.ToTestGridProjectVpcConfigOutputWithContext(context.Background())
}

func (i TestGridProjectVpcConfigArgs) ToTestGridProjectVpcConfigOutputWithContext(ctx context.Context) TestGridProjectVpcConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestGridProjectVpcConfigOutput)
}

func (i TestGridProjectVpcConfigArgs) ToTestGridProjectVpcConfigPtrOutput() TestGridProjectVpcConfigPtrOutput {
	return i.ToTestGridProjectVpcConfigPtrOutputWithContext(context.Background())
}

func (i TestGridProjectVpcConfigArgs) ToTestGridProjectVpcConfigPtrOutputWithContext(ctx context.Context) TestGridProjectVpcConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestGridProjectVpcConfigOutput).ToTestGridProjectVpcConfigPtrOutputWithContext(ctx)
}

// TestGridProjectVpcConfigPtrInput is an input type that accepts TestGridProjectVpcConfigArgs, TestGridProjectVpcConfigPtr and TestGridProjectVpcConfigPtrOutput values.
// You can construct a concrete instance of `TestGridProjectVpcConfigPtrInput` via:
//
//	        TestGridProjectVpcConfigArgs{...}
//
//	or:
//
//	        nil
type TestGridProjectVpcConfigPtrInput interface {
	pulumi.Input

	ToTestGridProjectVpcConfigPtrOutput() TestGridProjectVpcConfigPtrOutput
	ToTestGridProjectVpcConfigPtrOutputWithContext(context.Context) TestGridProjectVpcConfigPtrOutput
}

type testGridProjectVpcConfigPtrType TestGridProjectVpcConfigArgs

func TestGridProjectVpcConfigPtr(v *TestGridProjectVpcConfigArgs) TestGridProjectVpcConfigPtrInput {
	return (*testGridProjectVpcConfigPtrType)(v)
}

func (*testGridProjectVpcConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TestGridProjectVpcConfig)(nil)).Elem()
}

func (i *testGridProjectVpcConfigPtrType) ToTestGridProjectVpcConfigPtrOutput() TestGridProjectVpcConfigPtrOutput {
	return i.ToTestGridProjectVpcConfigPtrOutputWithContext(context.Background())
}

func (i *testGridProjectVpcConfigPtrType) ToTestGridProjectVpcConfigPtrOutputWithContext(ctx context.Context) TestGridProjectVpcConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestGridProjectVpcConfigPtrOutput)
}

// The VPC security groups and subnets that are attached to a TestGrid project.
type TestGridProjectVpcConfigOutput struct{ *pulumi.OutputState }

func (TestGridProjectVpcConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TestGridProjectVpcConfig)(nil)).Elem()
}

func (o TestGridProjectVpcConfigOutput) ToTestGridProjectVpcConfigOutput() TestGridProjectVpcConfigOutput {
	return o
}

func (o TestGridProjectVpcConfigOutput) ToTestGridProjectVpcConfigOutputWithContext(ctx context.Context) TestGridProjectVpcConfigOutput {
	return o
}

func (o TestGridProjectVpcConfigOutput) ToTestGridProjectVpcConfigPtrOutput() TestGridProjectVpcConfigPtrOutput {
	return o.ToTestGridProjectVpcConfigPtrOutputWithContext(context.Background())
}

func (o TestGridProjectVpcConfigOutput) ToTestGridProjectVpcConfigPtrOutputWithContext(ctx context.Context) TestGridProjectVpcConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TestGridProjectVpcConfig) *TestGridProjectVpcConfig {
		return &v
	}).(TestGridProjectVpcConfigPtrOutput)
}

// A list of VPC security group IDs in your Amazon VPC.
func (o TestGridProjectVpcConfigOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TestGridProjectVpcConfig) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// A list of VPC subnet IDs in your Amazon VPC.
func (o TestGridProjectVpcConfigOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TestGridProjectVpcConfig) []string { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

func (o TestGridProjectVpcConfigOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v TestGridProjectVpcConfig) string { return v.VpcId }).(pulumi.StringOutput)
}

type TestGridProjectVpcConfigPtrOutput struct{ *pulumi.OutputState }

func (TestGridProjectVpcConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TestGridProjectVpcConfig)(nil)).Elem()
}

func (o TestGridProjectVpcConfigPtrOutput) ToTestGridProjectVpcConfigPtrOutput() TestGridProjectVpcConfigPtrOutput {
	return o
}

func (o TestGridProjectVpcConfigPtrOutput) ToTestGridProjectVpcConfigPtrOutputWithContext(ctx context.Context) TestGridProjectVpcConfigPtrOutput {
	return o
}

func (o TestGridProjectVpcConfigPtrOutput) Elem() TestGridProjectVpcConfigOutput {
	return o.ApplyT(func(v *TestGridProjectVpcConfig) TestGridProjectVpcConfig {
		if v != nil {
			return *v
		}
		var ret TestGridProjectVpcConfig
		return ret
	}).(TestGridProjectVpcConfigOutput)
}

// A list of VPC security group IDs in your Amazon VPC.
func (o TestGridProjectVpcConfigPtrOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TestGridProjectVpcConfig) []string {
		if v == nil {
			return nil
		}
		return v.SecurityGroupIds
	}).(pulumi.StringArrayOutput)
}

// A list of VPC subnet IDs in your Amazon VPC.
func (o TestGridProjectVpcConfigPtrOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TestGridProjectVpcConfig) []string {
		if v == nil {
			return nil
		}
		return v.SubnetIds
	}).(pulumi.StringArrayOutput)
}

func (o TestGridProjectVpcConfigPtrOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TestGridProjectVpcConfig) *string {
		if v == nil {
			return nil
		}
		return &v.VpcId
	}).(pulumi.StringPtrOutput)
}

type VpceConfigurationTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DevicePoolRuleInput)(nil)).Elem(), DevicePoolRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DevicePoolRuleArrayInput)(nil)).Elem(), DevicePoolRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectVpcConfigInput)(nil)).Elem(), ProjectVpcConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectVpcConfigPtrInput)(nil)).Elem(), ProjectVpcConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TestGridProjectVpcConfigInput)(nil)).Elem(), TestGridProjectVpcConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TestGridProjectVpcConfigPtrInput)(nil)).Elem(), TestGridProjectVpcConfigArgs{})
	pulumi.RegisterOutputType(DevicePoolRuleOutput{})
	pulumi.RegisterOutputType(DevicePoolRuleArrayOutput{})
	pulumi.RegisterOutputType(ProjectVpcConfigOutput{})
	pulumi.RegisterOutputType(ProjectVpcConfigPtrOutput{})
	pulumi.RegisterOutputType(TestGridProjectVpcConfigOutput{})
	pulumi.RegisterOutputType(TestGridProjectVpcConfigPtrOutput{})
}
