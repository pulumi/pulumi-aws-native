// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devicefarm

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// AWS::DeviceFarm::DevicePool creates a new Device Pool for a given DF Project
type DevicePool struct {
	pulumi.CustomResourceState

	// The Amazon Resource Name (ARN) of the device pool. See [Amazon resource names](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the *General Reference guide* .
	Arn pulumi.StringOutput `pulumi:"arn"`
	// The device pool's description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The number of devices that Device Farm can add to your device pool. Device Farm adds devices that are available and meet the criteria that you assign for the `rules` parameter. Depending on how many devices meet these constraints, your device pool might contain fewer devices than the value for this parameter.
	//
	// By specifying the maximum number of devices, you can control the costs that you incur by running tests.
	MaxDevices pulumi.IntPtrOutput `pulumi:"maxDevices"`
	// The device pool's name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ARN of the project for the device pool.
	ProjectArn pulumi.StringOutput `pulumi:"projectArn"`
	// Represents a condition for a device pool.
	Rules DevicePoolRuleArrayOutput `pulumi:"rules"`
	// The metadata that you apply to a resource to help you categorize and organize it. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters. Tag values can have a maximum length of 256 characters.
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewDevicePool registers a new resource with the given unique name, arguments, and options.
func NewDevicePool(ctx *pulumi.Context,
	name string, args *DevicePoolArgs, opts ...pulumi.ResourceOption) (*DevicePool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectArn == nil {
		return nil, errors.New("invalid value for required argument 'ProjectArn'")
	}
	if args.Rules == nil {
		return nil, errors.New("invalid value for required argument 'Rules'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"projectArn",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DevicePool
	err := ctx.RegisterResource("aws-native:devicefarm:DevicePool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDevicePool gets an existing DevicePool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDevicePool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DevicePoolState, opts ...pulumi.ResourceOption) (*DevicePool, error) {
	var resource DevicePool
	err := ctx.ReadResource("aws-native:devicefarm:DevicePool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DevicePool resources.
type devicePoolState struct {
}

type DevicePoolState struct {
}

func (DevicePoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*devicePoolState)(nil)).Elem()
}

type devicePoolArgs struct {
	// The device pool's description.
	Description *string `pulumi:"description"`
	// The number of devices that Device Farm can add to your device pool. Device Farm adds devices that are available and meet the criteria that you assign for the `rules` parameter. Depending on how many devices meet these constraints, your device pool might contain fewer devices than the value for this parameter.
	//
	// By specifying the maximum number of devices, you can control the costs that you incur by running tests.
	MaxDevices *int `pulumi:"maxDevices"`
	// The device pool's name.
	Name *string `pulumi:"name"`
	// The ARN of the project for the device pool.
	ProjectArn string `pulumi:"projectArn"`
	// Represents a condition for a device pool.
	Rules []DevicePoolRule `pulumi:"rules"`
	// The metadata that you apply to a resource to help you categorize and organize it. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters. Tag values can have a maximum length of 256 characters.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a DevicePool resource.
type DevicePoolArgs struct {
	// The device pool's description.
	Description pulumi.StringPtrInput
	// The number of devices that Device Farm can add to your device pool. Device Farm adds devices that are available and meet the criteria that you assign for the `rules` parameter. Depending on how many devices meet these constraints, your device pool might contain fewer devices than the value for this parameter.
	//
	// By specifying the maximum number of devices, you can control the costs that you incur by running tests.
	MaxDevices pulumi.IntPtrInput
	// The device pool's name.
	Name pulumi.StringPtrInput
	// The ARN of the project for the device pool.
	ProjectArn pulumi.StringInput
	// Represents a condition for a device pool.
	Rules DevicePoolRuleArrayInput
	// The metadata that you apply to a resource to help you categorize and organize it. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters. Tag values can have a maximum length of 256 characters.
	Tags aws.TagArrayInput
}

func (DevicePoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*devicePoolArgs)(nil)).Elem()
}

type DevicePoolInput interface {
	pulumi.Input

	ToDevicePoolOutput() DevicePoolOutput
	ToDevicePoolOutputWithContext(ctx context.Context) DevicePoolOutput
}

func (*DevicePool) ElementType() reflect.Type {
	return reflect.TypeOf((**DevicePool)(nil)).Elem()
}

func (i *DevicePool) ToDevicePoolOutput() DevicePoolOutput {
	return i.ToDevicePoolOutputWithContext(context.Background())
}

func (i *DevicePool) ToDevicePoolOutputWithContext(ctx context.Context) DevicePoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicePoolOutput)
}

type DevicePoolOutput struct{ *pulumi.OutputState }

func (DevicePoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DevicePool)(nil)).Elem()
}

func (o DevicePoolOutput) ToDevicePoolOutput() DevicePoolOutput {
	return o
}

func (o DevicePoolOutput) ToDevicePoolOutputWithContext(ctx context.Context) DevicePoolOutput {
	return o
}

// The Amazon Resource Name (ARN) of the device pool. See [Amazon resource names](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the *General Reference guide* .
func (o DevicePoolOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *DevicePool) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// The device pool's description.
func (o DevicePoolOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DevicePool) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The number of devices that Device Farm can add to your device pool. Device Farm adds devices that are available and meet the criteria that you assign for the `rules` parameter. Depending on how many devices meet these constraints, your device pool might contain fewer devices than the value for this parameter.
//
// By specifying the maximum number of devices, you can control the costs that you incur by running tests.
func (o DevicePoolOutput) MaxDevices() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DevicePool) pulumi.IntPtrOutput { return v.MaxDevices }).(pulumi.IntPtrOutput)
}

// The device pool's name.
func (o DevicePoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DevicePool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ARN of the project for the device pool.
func (o DevicePoolOutput) ProjectArn() pulumi.StringOutput {
	return o.ApplyT(func(v *DevicePool) pulumi.StringOutput { return v.ProjectArn }).(pulumi.StringOutput)
}

// Represents a condition for a device pool.
func (o DevicePoolOutput) Rules() DevicePoolRuleArrayOutput {
	return o.ApplyT(func(v *DevicePool) DevicePoolRuleArrayOutput { return v.Rules }).(DevicePoolRuleArrayOutput)
}

// The metadata that you apply to a resource to help you categorize and organize it. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters. Tag values can have a maximum length of 256 characters.
func (o DevicePoolOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *DevicePool) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DevicePoolInput)(nil)).Elem(), &DevicePool{})
	pulumi.RegisterOutputType(DevicePoolOutput{})
}
