// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package devicefarm

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// AWS::DeviceFarm::DevicePool creates a new Device Pool for a given DF Project
type DevicePool struct {
	pulumi.CustomResourceState

	Arn         pulumi.StringOutput       `pulumi:"arn"`
	Description pulumi.StringPtrOutput    `pulumi:"description"`
	MaxDevices  pulumi.IntPtrOutput       `pulumi:"maxDevices"`
	Name        pulumi.StringOutput       `pulumi:"name"`
	ProjectArn  pulumi.StringOutput       `pulumi:"projectArn"`
	Rules       DevicePoolRuleArrayOutput `pulumi:"rules"`
	Tags        DevicePoolTagArrayOutput  `pulumi:"tags"`
}

// NewDevicePool registers a new resource with the given unique name, arguments, and options.
func NewDevicePool(ctx *pulumi.Context,
	name string, args *DevicePoolArgs, opts ...pulumi.ResourceOption) (*DevicePool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.ProjectArn == nil {
		return nil, errors.New("invalid value for required argument 'ProjectArn'")
	}
	if args.Rules == nil {
		return nil, errors.New("invalid value for required argument 'Rules'")
	}
	var resource DevicePool
	err := ctx.RegisterResource("aws-native:devicefarm:DevicePool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDevicePool gets an existing DevicePool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDevicePool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DevicePoolState, opts ...pulumi.ResourceOption) (*DevicePool, error) {
	var resource DevicePool
	err := ctx.ReadResource("aws-native:devicefarm:DevicePool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DevicePool resources.
type devicePoolState struct {
}

type DevicePoolState struct {
}

func (DevicePoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*devicePoolState)(nil)).Elem()
}

type devicePoolArgs struct {
	Description *string          `pulumi:"description"`
	MaxDevices  *int             `pulumi:"maxDevices"`
	Name        string           `pulumi:"name"`
	ProjectArn  string           `pulumi:"projectArn"`
	Rules       []DevicePoolRule `pulumi:"rules"`
	Tags        []DevicePoolTag  `pulumi:"tags"`
}

// The set of arguments for constructing a DevicePool resource.
type DevicePoolArgs struct {
	Description pulumi.StringPtrInput
	MaxDevices  pulumi.IntPtrInput
	Name        pulumi.StringInput
	ProjectArn  pulumi.StringInput
	Rules       DevicePoolRuleArrayInput
	Tags        DevicePoolTagArrayInput
}

func (DevicePoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*devicePoolArgs)(nil)).Elem()
}

type DevicePoolInput interface {
	pulumi.Input

	ToDevicePoolOutput() DevicePoolOutput
	ToDevicePoolOutputWithContext(ctx context.Context) DevicePoolOutput
}

func (*DevicePool) ElementType() reflect.Type {
	return reflect.TypeOf((*DevicePool)(nil))
}

func (i *DevicePool) ToDevicePoolOutput() DevicePoolOutput {
	return i.ToDevicePoolOutputWithContext(context.Background())
}

func (i *DevicePool) ToDevicePoolOutputWithContext(ctx context.Context) DevicePoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicePoolOutput)
}

type DevicePoolOutput struct{ *pulumi.OutputState }

func (DevicePoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DevicePool)(nil))
}

func (o DevicePoolOutput) ToDevicePoolOutput() DevicePoolOutput {
	return o
}

func (o DevicePoolOutput) ToDevicePoolOutputWithContext(ctx context.Context) DevicePoolOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(DevicePoolOutput{})
}
