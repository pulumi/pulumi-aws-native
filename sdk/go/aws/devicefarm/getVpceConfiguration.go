// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devicefarm

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// AWS::DeviceFarm::VPCEConfiguration creates a new Device Farm VPCE Configuration
func LookupVpceConfiguration(ctx *pulumi.Context, args *LookupVpceConfigurationArgs, opts ...pulumi.InvokeOption) (*LookupVpceConfigurationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVpceConfigurationResult
	err := ctx.Invoke("aws-native:devicefarm:getVpceConfiguration", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupVpceConfigurationArgs struct {
	Arn string `pulumi:"arn"`
}

type LookupVpceConfigurationResult struct {
	Arn                          *string                `pulumi:"arn"`
	ServiceDnsName               *string                `pulumi:"serviceDnsName"`
	Tags                         []VpceConfigurationTag `pulumi:"tags"`
	VpceConfigurationDescription *string                `pulumi:"vpceConfigurationDescription"`
	VpceConfigurationName        *string                `pulumi:"vpceConfigurationName"`
	VpceServiceName              *string                `pulumi:"vpceServiceName"`
}

func LookupVpceConfigurationOutput(ctx *pulumi.Context, args LookupVpceConfigurationOutputArgs, opts ...pulumi.InvokeOption) LookupVpceConfigurationResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupVpceConfigurationResult, error) {
			args := v.(LookupVpceConfigurationArgs)
			r, err := LookupVpceConfiguration(ctx, &args, opts...)
			var s LookupVpceConfigurationResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupVpceConfigurationResultOutput)
}

type LookupVpceConfigurationOutputArgs struct {
	Arn pulumi.StringInput `pulumi:"arn"`
}

func (LookupVpceConfigurationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVpceConfigurationArgs)(nil)).Elem()
}

type LookupVpceConfigurationResultOutput struct{ *pulumi.OutputState }

func (LookupVpceConfigurationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVpceConfigurationResult)(nil)).Elem()
}

func (o LookupVpceConfigurationResultOutput) ToLookupVpceConfigurationResultOutput() LookupVpceConfigurationResultOutput {
	return o
}

func (o LookupVpceConfigurationResultOutput) ToLookupVpceConfigurationResultOutputWithContext(ctx context.Context) LookupVpceConfigurationResultOutput {
	return o
}

func (o LookupVpceConfigurationResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupVpceConfigurationResult] {
	return pulumix.Output[LookupVpceConfigurationResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupVpceConfigurationResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVpceConfigurationResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

func (o LookupVpceConfigurationResultOutput) ServiceDnsName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVpceConfigurationResult) *string { return v.ServiceDnsName }).(pulumi.StringPtrOutput)
}

func (o LookupVpceConfigurationResultOutput) Tags() VpceConfigurationTagArrayOutput {
	return o.ApplyT(func(v LookupVpceConfigurationResult) []VpceConfigurationTag { return v.Tags }).(VpceConfigurationTagArrayOutput)
}

func (o LookupVpceConfigurationResultOutput) VpceConfigurationDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVpceConfigurationResult) *string { return v.VpceConfigurationDescription }).(pulumi.StringPtrOutput)
}

func (o LookupVpceConfigurationResultOutput) VpceConfigurationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVpceConfigurationResult) *string { return v.VpceConfigurationName }).(pulumi.StringPtrOutput)
}

func (o LookupVpceConfigurationResultOutput) VpceServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVpceConfigurationResult) *string { return v.VpceServiceName }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVpceConfigurationResultOutput{})
}
