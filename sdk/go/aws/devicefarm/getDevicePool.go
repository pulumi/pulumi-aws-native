// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devicefarm

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// AWS::DeviceFarm::DevicePool creates a new Device Pool for a given DF Project
func LookupDevicePool(ctx *pulumi.Context, args *LookupDevicePoolArgs, opts ...pulumi.InvokeOption) (*LookupDevicePoolResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDevicePoolResult
	err := ctx.Invoke("aws-native:devicefarm:getDevicePool", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupDevicePoolArgs struct {
	// The Amazon Resource Name (ARN) of the device pool. See [Amazon resource names](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the *General Reference guide* .
	Arn string `pulumi:"arn"`
}

type LookupDevicePoolResult struct {
	// The Amazon Resource Name (ARN) of the device pool. See [Amazon resource names](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the *General Reference guide* .
	Arn *string `pulumi:"arn"`
	// The device pool's description.
	Description *string `pulumi:"description"`
	// The number of devices that Device Farm can add to your device pool. Device Farm adds devices that are available and meet the criteria that you assign for the `rules` parameter. Depending on how many devices meet these constraints, your device pool might contain fewer devices than the value for this parameter.
	//
	// By specifying the maximum number of devices, you can control the costs that you incur by running tests.
	MaxDevices *int `pulumi:"maxDevices"`
	// The device pool's name.
	Name *string `pulumi:"name"`
	// The device pool's rules.
	Rules []DevicePoolRule `pulumi:"rules"`
	// An array of key-value pairs to apply to this resource.
	//
	// For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) in the *guide* .
	Tags []aws.Tag `pulumi:"tags"`
}

func LookupDevicePoolOutput(ctx *pulumi.Context, args LookupDevicePoolOutputArgs, opts ...pulumi.InvokeOption) LookupDevicePoolResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupDevicePoolResultOutput, error) {
			args := v.(LookupDevicePoolArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:devicefarm:getDevicePool", args, LookupDevicePoolResultOutput{}, options).(LookupDevicePoolResultOutput), nil
		}).(LookupDevicePoolResultOutput)
}

type LookupDevicePoolOutputArgs struct {
	// The Amazon Resource Name (ARN) of the device pool. See [Amazon resource names](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the *General Reference guide* .
	Arn pulumi.StringInput `pulumi:"arn"`
}

func (LookupDevicePoolOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDevicePoolArgs)(nil)).Elem()
}

type LookupDevicePoolResultOutput struct{ *pulumi.OutputState }

func (LookupDevicePoolResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDevicePoolResult)(nil)).Elem()
}

func (o LookupDevicePoolResultOutput) ToLookupDevicePoolResultOutput() LookupDevicePoolResultOutput {
	return o
}

func (o LookupDevicePoolResultOutput) ToLookupDevicePoolResultOutputWithContext(ctx context.Context) LookupDevicePoolResultOutput {
	return o
}

// The Amazon Resource Name (ARN) of the device pool. See [Amazon resource names](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the *General Reference guide* .
func (o LookupDevicePoolResultOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDevicePoolResult) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

// The device pool's description.
func (o LookupDevicePoolResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDevicePoolResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The number of devices that Device Farm can add to your device pool. Device Farm adds devices that are available and meet the criteria that you assign for the `rules` parameter. Depending on how many devices meet these constraints, your device pool might contain fewer devices than the value for this parameter.
//
// By specifying the maximum number of devices, you can control the costs that you incur by running tests.
func (o LookupDevicePoolResultOutput) MaxDevices() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupDevicePoolResult) *int { return v.MaxDevices }).(pulumi.IntPtrOutput)
}

// The device pool's name.
func (o LookupDevicePoolResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDevicePoolResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The device pool's rules.
func (o LookupDevicePoolResultOutput) Rules() DevicePoolRuleArrayOutput {
	return o.ApplyT(func(v LookupDevicePoolResult) []DevicePoolRule { return v.Rules }).(DevicePoolRuleArrayOutput)
}

// An array of key-value pairs to apply to this resource.
//
// For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) in the *guide* .
func (o LookupDevicePoolResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupDevicePoolResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDevicePoolResultOutput{})
}
