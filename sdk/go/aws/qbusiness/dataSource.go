// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package qbusiness

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::QBusiness::DataSource Resource Type
type DataSource struct {
	pulumi.CustomResourceState

	ApplicationId pulumi.StringOutput `pulumi:"applicationId"`
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::QBusiness::DataSource` for more information about the expected schema for this property.
	Configuration                   pulumi.AnyOutput                                   `pulumi:"configuration"`
	CreatedAt                       pulumi.StringOutput                                `pulumi:"createdAt"`
	DataSourceArn                   pulumi.StringOutput                                `pulumi:"dataSourceArn"`
	DataSourceId                    pulumi.StringOutput                                `pulumi:"dataSourceId"`
	Description                     pulumi.StringPtrOutput                             `pulumi:"description"`
	DisplayName                     pulumi.StringOutput                                `pulumi:"displayName"`
	DocumentEnrichmentConfiguration DataSourceDocumentEnrichmentConfigurationPtrOutput `pulumi:"documentEnrichmentConfiguration"`
	IndexId                         pulumi.StringOutput                                `pulumi:"indexId"`
	RoleArn                         pulumi.StringPtrOutput                             `pulumi:"roleArn"`
	Status                          DataSourceStatusOutput                             `pulumi:"status"`
	SyncSchedule                    pulumi.StringPtrOutput                             `pulumi:"syncSchedule"`
	Tags                            aws.TagArrayOutput                                 `pulumi:"tags"`
	Type                            pulumi.StringOutput                                `pulumi:"type"`
	UpdatedAt                       pulumi.StringOutput                                `pulumi:"updatedAt"`
	VpcConfiguration                DataSourceVpcConfigurationPtrOutput                `pulumi:"vpcConfiguration"`
}

// NewDataSource registers a new resource with the given unique name, arguments, and options.
func NewDataSource(ctx *pulumi.Context,
	name string, args *DataSourceArgs, opts ...pulumi.ResourceOption) (*DataSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationId == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationId'")
	}
	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.IndexId == nil {
		return nil, errors.New("invalid value for required argument 'IndexId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"applicationId",
		"indexId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DataSource
	err := ctx.RegisterResource("aws-native:qbusiness:DataSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataSource gets an existing DataSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataSourceState, opts ...pulumi.ResourceOption) (*DataSource, error) {
	var resource DataSource
	err := ctx.ReadResource("aws-native:qbusiness:DataSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataSource resources.
type dataSourceState struct {
}

type DataSourceState struct {
}

func (DataSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataSourceState)(nil)).Elem()
}

type dataSourceArgs struct {
	ApplicationId string `pulumi:"applicationId"`
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::QBusiness::DataSource` for more information about the expected schema for this property.
	Configuration                   interface{}                                `pulumi:"configuration"`
	Description                     *string                                    `pulumi:"description"`
	DisplayName                     string                                     `pulumi:"displayName"`
	DocumentEnrichmentConfiguration *DataSourceDocumentEnrichmentConfiguration `pulumi:"documentEnrichmentConfiguration"`
	IndexId                         string                                     `pulumi:"indexId"`
	RoleArn                         *string                                    `pulumi:"roleArn"`
	SyncSchedule                    *string                                    `pulumi:"syncSchedule"`
	Tags                            []aws.Tag                                  `pulumi:"tags"`
	VpcConfiguration                *DataSourceVpcConfiguration                `pulumi:"vpcConfiguration"`
}

// The set of arguments for constructing a DataSource resource.
type DataSourceArgs struct {
	ApplicationId pulumi.StringInput
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::QBusiness::DataSource` for more information about the expected schema for this property.
	Configuration                   pulumi.Input
	Description                     pulumi.StringPtrInput
	DisplayName                     pulumi.StringInput
	DocumentEnrichmentConfiguration DataSourceDocumentEnrichmentConfigurationPtrInput
	IndexId                         pulumi.StringInput
	RoleArn                         pulumi.StringPtrInput
	SyncSchedule                    pulumi.StringPtrInput
	Tags                            aws.TagArrayInput
	VpcConfiguration                DataSourceVpcConfigurationPtrInput
}

func (DataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataSourceArgs)(nil)).Elem()
}

type DataSourceInput interface {
	pulumi.Input

	ToDataSourceOutput() DataSourceOutput
	ToDataSourceOutputWithContext(ctx context.Context) DataSourceOutput
}

func (*DataSource) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSource)(nil)).Elem()
}

func (i *DataSource) ToDataSourceOutput() DataSourceOutput {
	return i.ToDataSourceOutputWithContext(context.Background())
}

func (i *DataSource) ToDataSourceOutputWithContext(ctx context.Context) DataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceOutput)
}

type DataSourceOutput struct{ *pulumi.OutputState }

func (DataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSource)(nil)).Elem()
}

func (o DataSourceOutput) ToDataSourceOutput() DataSourceOutput {
	return o
}

func (o DataSourceOutput) ToDataSourceOutputWithContext(ctx context.Context) DataSourceOutput {
	return o
}

func (o DataSourceOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringOutput { return v.ApplicationId }).(pulumi.StringOutput)
}

// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::QBusiness::DataSource` for more information about the expected schema for this property.
func (o DataSourceOutput) Configuration() pulumi.AnyOutput {
	return o.ApplyT(func(v *DataSource) pulumi.AnyOutput { return v.Configuration }).(pulumi.AnyOutput)
}

func (o DataSourceOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o DataSourceOutput) DataSourceArn() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringOutput { return v.DataSourceArn }).(pulumi.StringOutput)
}

func (o DataSourceOutput) DataSourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringOutput { return v.DataSourceId }).(pulumi.StringOutput)
}

func (o DataSourceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o DataSourceOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

func (o DataSourceOutput) DocumentEnrichmentConfiguration() DataSourceDocumentEnrichmentConfigurationPtrOutput {
	return o.ApplyT(func(v *DataSource) DataSourceDocumentEnrichmentConfigurationPtrOutput {
		return v.DocumentEnrichmentConfiguration
	}).(DataSourceDocumentEnrichmentConfigurationPtrOutput)
}

func (o DataSourceOutput) IndexId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringOutput { return v.IndexId }).(pulumi.StringOutput)
}

func (o DataSourceOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringPtrOutput { return v.RoleArn }).(pulumi.StringPtrOutput)
}

func (o DataSourceOutput) Status() DataSourceStatusOutput {
	return o.ApplyT(func(v *DataSource) DataSourceStatusOutput { return v.Status }).(DataSourceStatusOutput)
}

func (o DataSourceOutput) SyncSchedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringPtrOutput { return v.SyncSchedule }).(pulumi.StringPtrOutput)
}

func (o DataSourceOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *DataSource) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func (o DataSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o DataSourceOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

func (o DataSourceOutput) VpcConfiguration() DataSourceVpcConfigurationPtrOutput {
	return o.ApplyT(func(v *DataSource) DataSourceVpcConfigurationPtrOutput { return v.VpcConfiguration }).(DataSourceVpcConfigurationPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceInput)(nil)).Elem(), &DataSource{})
	pulumi.RegisterOutputType(DataSourceOutput{})
}
