// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package qbusiness

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::QBusiness::DataSource Resource Type
type DataSource struct {
	pulumi.CustomResourceState

	// The identifier of the Amazon Q Business application the data source will be attached to.
	ApplicationId pulumi.StringOutput `pulumi:"applicationId"`
	// Use this property to specify a JSON or YAML schema with configuration properties specific to your data source connector to connect your data source repository to Amazon Q Business . You must use the JSON or YAML schema provided by Amazon Q .
	//
	// The following links have the configuration properties and schemas for AWS CloudFormation for the following connectors:
	//
	// - [Amazon Simple Storage Service](https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/s3-cfn.html)
	// - [Amazon Q Web Crawler](https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/web-crawler-cfn.html)
	//
	// Similarly, you can find configuration templates and properties for your specific data source using the following steps:
	//
	// - Navigate to the [Supported connectors](https://docs.aws.amazon.com/amazonq/latest/business-use-dg/connectors-list.html) page in the Amazon Q Business User Guide, and select the data source connector of your choice.
	// - Then, from that specific data source connector's page, choose the topic containing *Using AWS CloudFormation* to find the schemas for your data source connector, including configuration parameter descriptions and examples.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::QBusiness::DataSource` for more information about the expected schema for this property.
	Configuration pulumi.AnyOutput `pulumi:"configuration"`
	// The Unix timestamp when the Amazon Q Business data source was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The Amazon Resource Name (ARN) of a data source in an Amazon Q Business application.
	DataSourceArn pulumi.StringOutput `pulumi:"dataSourceArn"`
	// The identifier of the Amazon Q Business data source.
	DataSourceId pulumi.StringOutput `pulumi:"dataSourceId"`
	// A description for the data source connector.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the Amazon Q Business data source.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Provides the configuration information for altering document metadata and content during the document ingestion process.
	//
	// For more information, see [Custom document enrichment](https://docs.aws.amazon.com/amazonq/latest/business-use-dg/custom-document-enrichment.html) .
	DocumentEnrichmentConfiguration DataSourceDocumentEnrichmentConfigurationPtrOutput `pulumi:"documentEnrichmentConfiguration"`
	// The identifier of the index the data source is attached to.
	IndexId pulumi.StringOutput `pulumi:"indexId"`
	// The Amazon Resource Name (ARN) of an IAM role with permission to access the data source and required resources.
	RoleArn pulumi.StringPtrOutput `pulumi:"roleArn"`
	// The status of the Amazon Q Business data source.
	Status DataSourceStatusOutput `pulumi:"status"`
	// Sets the frequency for Amazon Q Business to check the documents in your data source repository and update your index. If you don't set a schedule, Amazon Q Business won't periodically update the index.
	//
	// Specify a `cron-` format schedule string or an empty string to indicate that the index is updated on demand. You can't specify the `Schedule` parameter when the `Type` parameter is set to `CUSTOM` . If you do, you receive a `ValidationException` exception.
	SyncSchedule pulumi.StringPtrOutput `pulumi:"syncSchedule"`
	// A list of key-value pairs that identify or categorize the data source connector. You can also use tags to help control access to the data source connector. Tag keys and values can consist of Unicode letters, digits, white space, and any of the following symbols: _ . : / = + - @.
	Tags aws.TagArrayOutput `pulumi:"tags"`
	// The type of the Amazon Q Business data source.
	Type pulumi.StringOutput `pulumi:"type"`
	// The Unix timestamp when the Amazon Q Business data source was last updated.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// Configuration information for an Amazon VPC (Virtual Private Cloud) to connect to your data source. For more information, see [Using Amazon VPC with Amazon Q Business connectors](https://docs.aws.amazon.com/amazonq/latest/business-use-dg/connector-vpc.html) .
	VpcConfiguration DataSourceVpcConfigurationPtrOutput `pulumi:"vpcConfiguration"`
}

// NewDataSource registers a new resource with the given unique name, arguments, and options.
func NewDataSource(ctx *pulumi.Context,
	name string, args *DataSourceArgs, opts ...pulumi.ResourceOption) (*DataSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationId == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationId'")
	}
	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.IndexId == nil {
		return nil, errors.New("invalid value for required argument 'IndexId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"applicationId",
		"indexId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DataSource
	err := ctx.RegisterResource("aws-native:qbusiness:DataSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataSource gets an existing DataSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataSourceState, opts ...pulumi.ResourceOption) (*DataSource, error) {
	var resource DataSource
	err := ctx.ReadResource("aws-native:qbusiness:DataSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataSource resources.
type dataSourceState struct {
}

type DataSourceState struct {
}

func (DataSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataSourceState)(nil)).Elem()
}

type dataSourceArgs struct {
	// The identifier of the Amazon Q Business application the data source will be attached to.
	ApplicationId string `pulumi:"applicationId"`
	// Use this property to specify a JSON or YAML schema with configuration properties specific to your data source connector to connect your data source repository to Amazon Q Business . You must use the JSON or YAML schema provided by Amazon Q .
	//
	// The following links have the configuration properties and schemas for AWS CloudFormation for the following connectors:
	//
	// - [Amazon Simple Storage Service](https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/s3-cfn.html)
	// - [Amazon Q Web Crawler](https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/web-crawler-cfn.html)
	//
	// Similarly, you can find configuration templates and properties for your specific data source using the following steps:
	//
	// - Navigate to the [Supported connectors](https://docs.aws.amazon.com/amazonq/latest/business-use-dg/connectors-list.html) page in the Amazon Q Business User Guide, and select the data source connector of your choice.
	// - Then, from that specific data source connector's page, choose the topic containing *Using AWS CloudFormation* to find the schemas for your data source connector, including configuration parameter descriptions and examples.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::QBusiness::DataSource` for more information about the expected schema for this property.
	Configuration interface{} `pulumi:"configuration"`
	// A description for the data source connector.
	Description *string `pulumi:"description"`
	// The name of the Amazon Q Business data source.
	DisplayName string `pulumi:"displayName"`
	// Provides the configuration information for altering document metadata and content during the document ingestion process.
	//
	// For more information, see [Custom document enrichment](https://docs.aws.amazon.com/amazonq/latest/business-use-dg/custom-document-enrichment.html) .
	DocumentEnrichmentConfiguration *DataSourceDocumentEnrichmentConfiguration `pulumi:"documentEnrichmentConfiguration"`
	// The identifier of the index the data source is attached to.
	IndexId string `pulumi:"indexId"`
	// The Amazon Resource Name (ARN) of an IAM role with permission to access the data source and required resources.
	RoleArn *string `pulumi:"roleArn"`
	// Sets the frequency for Amazon Q Business to check the documents in your data source repository and update your index. If you don't set a schedule, Amazon Q Business won't periodically update the index.
	//
	// Specify a `cron-` format schedule string or an empty string to indicate that the index is updated on demand. You can't specify the `Schedule` parameter when the `Type` parameter is set to `CUSTOM` . If you do, you receive a `ValidationException` exception.
	SyncSchedule *string `pulumi:"syncSchedule"`
	// A list of key-value pairs that identify or categorize the data source connector. You can also use tags to help control access to the data source connector. Tag keys and values can consist of Unicode letters, digits, white space, and any of the following symbols: _ . : / = + - @.
	Tags []aws.Tag `pulumi:"tags"`
	// Configuration information for an Amazon VPC (Virtual Private Cloud) to connect to your data source. For more information, see [Using Amazon VPC with Amazon Q Business connectors](https://docs.aws.amazon.com/amazonq/latest/business-use-dg/connector-vpc.html) .
	VpcConfiguration *DataSourceVpcConfiguration `pulumi:"vpcConfiguration"`
}

// The set of arguments for constructing a DataSource resource.
type DataSourceArgs struct {
	// The identifier of the Amazon Q Business application the data source will be attached to.
	ApplicationId pulumi.StringInput
	// Use this property to specify a JSON or YAML schema with configuration properties specific to your data source connector to connect your data source repository to Amazon Q Business . You must use the JSON or YAML schema provided by Amazon Q .
	//
	// The following links have the configuration properties and schemas for AWS CloudFormation for the following connectors:
	//
	// - [Amazon Simple Storage Service](https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/s3-cfn.html)
	// - [Amazon Q Web Crawler](https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/web-crawler-cfn.html)
	//
	// Similarly, you can find configuration templates and properties for your specific data source using the following steps:
	//
	// - Navigate to the [Supported connectors](https://docs.aws.amazon.com/amazonq/latest/business-use-dg/connectors-list.html) page in the Amazon Q Business User Guide, and select the data source connector of your choice.
	// - Then, from that specific data source connector's page, choose the topic containing *Using AWS CloudFormation* to find the schemas for your data source connector, including configuration parameter descriptions and examples.
	//
	// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::QBusiness::DataSource` for more information about the expected schema for this property.
	Configuration pulumi.Input
	// A description for the data source connector.
	Description pulumi.StringPtrInput
	// The name of the Amazon Q Business data source.
	DisplayName pulumi.StringInput
	// Provides the configuration information for altering document metadata and content during the document ingestion process.
	//
	// For more information, see [Custom document enrichment](https://docs.aws.amazon.com/amazonq/latest/business-use-dg/custom-document-enrichment.html) .
	DocumentEnrichmentConfiguration DataSourceDocumentEnrichmentConfigurationPtrInput
	// The identifier of the index the data source is attached to.
	IndexId pulumi.StringInput
	// The Amazon Resource Name (ARN) of an IAM role with permission to access the data source and required resources.
	RoleArn pulumi.StringPtrInput
	// Sets the frequency for Amazon Q Business to check the documents in your data source repository and update your index. If you don't set a schedule, Amazon Q Business won't periodically update the index.
	//
	// Specify a `cron-` format schedule string or an empty string to indicate that the index is updated on demand. You can't specify the `Schedule` parameter when the `Type` parameter is set to `CUSTOM` . If you do, you receive a `ValidationException` exception.
	SyncSchedule pulumi.StringPtrInput
	// A list of key-value pairs that identify or categorize the data source connector. You can also use tags to help control access to the data source connector. Tag keys and values can consist of Unicode letters, digits, white space, and any of the following symbols: _ . : / = + - @.
	Tags aws.TagArrayInput
	// Configuration information for an Amazon VPC (Virtual Private Cloud) to connect to your data source. For more information, see [Using Amazon VPC with Amazon Q Business connectors](https://docs.aws.amazon.com/amazonq/latest/business-use-dg/connector-vpc.html) .
	VpcConfiguration DataSourceVpcConfigurationPtrInput
}

func (DataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataSourceArgs)(nil)).Elem()
}

type DataSourceInput interface {
	pulumi.Input

	ToDataSourceOutput() DataSourceOutput
	ToDataSourceOutputWithContext(ctx context.Context) DataSourceOutput
}

func (*DataSource) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSource)(nil)).Elem()
}

func (i *DataSource) ToDataSourceOutput() DataSourceOutput {
	return i.ToDataSourceOutputWithContext(context.Background())
}

func (i *DataSource) ToDataSourceOutputWithContext(ctx context.Context) DataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceOutput)
}

type DataSourceOutput struct{ *pulumi.OutputState }

func (DataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSource)(nil)).Elem()
}

func (o DataSourceOutput) ToDataSourceOutput() DataSourceOutput {
	return o
}

func (o DataSourceOutput) ToDataSourceOutputWithContext(ctx context.Context) DataSourceOutput {
	return o
}

// The identifier of the Amazon Q Business application the data source will be attached to.
func (o DataSourceOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringOutput { return v.ApplicationId }).(pulumi.StringOutput)
}

// Use this property to specify a JSON or YAML schema with configuration properties specific to your data source connector to connect your data source repository to Amazon Q Business . You must use the JSON or YAML schema provided by Amazon Q .
//
// The following links have the configuration properties and schemas for AWS CloudFormation for the following connectors:
//
// - [Amazon Simple Storage Service](https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/s3-cfn.html)
// - [Amazon Q Web Crawler](https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/web-crawler-cfn.html)
//
// Similarly, you can find configuration templates and properties for your specific data source using the following steps:
//
// - Navigate to the [Supported connectors](https://docs.aws.amazon.com/amazonq/latest/business-use-dg/connectors-list.html) page in the Amazon Q Business User Guide, and select the data source connector of your choice.
// - Then, from that specific data source connector's page, choose the topic containing *Using AWS CloudFormation* to find the schemas for your data source connector, including configuration parameter descriptions and examples.
//
// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::QBusiness::DataSource` for more information about the expected schema for this property.
func (o DataSourceOutput) Configuration() pulumi.AnyOutput {
	return o.ApplyT(func(v *DataSource) pulumi.AnyOutput { return v.Configuration }).(pulumi.AnyOutput)
}

// The Unix timestamp when the Amazon Q Business data source was created.
func (o DataSourceOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The Amazon Resource Name (ARN) of a data source in an Amazon Q Business application.
func (o DataSourceOutput) DataSourceArn() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringOutput { return v.DataSourceArn }).(pulumi.StringOutput)
}

// The identifier of the Amazon Q Business data source.
func (o DataSourceOutput) DataSourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringOutput { return v.DataSourceId }).(pulumi.StringOutput)
}

// A description for the data source connector.
func (o DataSourceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the Amazon Q Business data source.
func (o DataSourceOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Provides the configuration information for altering document metadata and content during the document ingestion process.
//
// For more information, see [Custom document enrichment](https://docs.aws.amazon.com/amazonq/latest/business-use-dg/custom-document-enrichment.html) .
func (o DataSourceOutput) DocumentEnrichmentConfiguration() DataSourceDocumentEnrichmentConfigurationPtrOutput {
	return o.ApplyT(func(v *DataSource) DataSourceDocumentEnrichmentConfigurationPtrOutput {
		return v.DocumentEnrichmentConfiguration
	}).(DataSourceDocumentEnrichmentConfigurationPtrOutput)
}

// The identifier of the index the data source is attached to.
func (o DataSourceOutput) IndexId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringOutput { return v.IndexId }).(pulumi.StringOutput)
}

// The Amazon Resource Name (ARN) of an IAM role with permission to access the data source and required resources.
func (o DataSourceOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringPtrOutput { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// The status of the Amazon Q Business data source.
func (o DataSourceOutput) Status() DataSourceStatusOutput {
	return o.ApplyT(func(v *DataSource) DataSourceStatusOutput { return v.Status }).(DataSourceStatusOutput)
}

// Sets the frequency for Amazon Q Business to check the documents in your data source repository and update your index. If you don't set a schedule, Amazon Q Business won't periodically update the index.
//
// Specify a `cron-` format schedule string or an empty string to indicate that the index is updated on demand. You can't specify the `Schedule` parameter when the `Type` parameter is set to `CUSTOM` . If you do, you receive a `ValidationException` exception.
func (o DataSourceOutput) SyncSchedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringPtrOutput { return v.SyncSchedule }).(pulumi.StringPtrOutput)
}

// A list of key-value pairs that identify or categorize the data source connector. You can also use tags to help control access to the data source connector. Tag keys and values can consist of Unicode letters, digits, white space, and any of the following symbols: _ . : / = + - @.
func (o DataSourceOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *DataSource) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

// The type of the Amazon Q Business data source.
func (o DataSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The Unix timestamp when the Amazon Q Business data source was last updated.
func (o DataSourceOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSource) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// Configuration information for an Amazon VPC (Virtual Private Cloud) to connect to your data source. For more information, see [Using Amazon VPC with Amazon Q Business connectors](https://docs.aws.amazon.com/amazonq/latest/business-use-dg/connector-vpc.html) .
func (o DataSourceOutput) VpcConfiguration() DataSourceVpcConfigurationPtrOutput {
	return o.ApplyT(func(v *DataSource) DataSourceVpcConfigurationPtrOutput { return v.VpcConfiguration }).(DataSourceVpcConfigurationPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceInput)(nil)).Elem(), &DataSource{})
	pulumi.RegisterOutputType(DataSourceOutput{})
}
