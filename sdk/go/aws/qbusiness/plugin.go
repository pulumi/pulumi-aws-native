// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package qbusiness

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::QBusiness::Plugin Resource Type
type Plugin struct {
	pulumi.CustomResourceState

	// The identifier of the application that will contain the plugin.
	ApplicationId pulumi.StringOutput `pulumi:"applicationId"`
	// Authentication configuration information for an Amazon Q Business plugin.
	AuthConfiguration pulumi.AnyOutput `pulumi:"authConfiguration"`
	// The current status of a plugin. A plugin is modified asynchronously.
	BuildStatus PluginBuildStatusOutput `pulumi:"buildStatus"`
	// The timestamp for when the plugin was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Configuration information required to create a custom plugin.
	CustomPluginConfiguration PluginCustomPluginConfigurationPtrOutput `pulumi:"customPluginConfiguration"`
	// The name of the plugin.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The Amazon Resource Name (ARN) of a plugin.
	PluginArn pulumi.StringOutput `pulumi:"pluginArn"`
	// The identifier of the plugin.
	PluginId pulumi.StringOutput `pulumi:"pluginId"`
	// The plugin server URL used for configuration.
	ServerUrl pulumi.StringPtrOutput `pulumi:"serverUrl"`
	// The current status of the plugin.
	State PluginStateEnumPtrOutput `pulumi:"state"`
	// A list of key/value pairs that identify an index, FAQ, or data source. Tag keys and values can consist of Unicode letters, digits, white space, and any of the following symbols: _ . : / = + - @.
	Tags aws.TagArrayOutput `pulumi:"tags"`
	// The type of the plugin.
	Type PluginTypeOutput `pulumi:"type"`
	// The timestamp for when the plugin was last updated.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewPlugin registers a new resource with the given unique name, arguments, and options.
func NewPlugin(ctx *pulumi.Context,
	name string, args *PluginArgs, opts ...pulumi.ResourceOption) (*Plugin, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationId == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationId'")
	}
	if args.AuthConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'AuthConfiguration'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"applicationId",
		"type",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Plugin
	err := ctx.RegisterResource("aws-native:qbusiness:Plugin", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPlugin gets an existing Plugin resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPlugin(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PluginState, opts ...pulumi.ResourceOption) (*Plugin, error) {
	var resource Plugin
	err := ctx.ReadResource("aws-native:qbusiness:Plugin", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Plugin resources.
type pluginState struct {
}

type PluginState struct {
}

func (PluginState) ElementType() reflect.Type {
	return reflect.TypeOf((*pluginState)(nil)).Elem()
}

type pluginArgs struct {
	// The identifier of the application that will contain the plugin.
	ApplicationId string `pulumi:"applicationId"`
	// Authentication configuration information for an Amazon Q Business plugin.
	AuthConfiguration interface{} `pulumi:"authConfiguration"`
	// Configuration information required to create a custom plugin.
	CustomPluginConfiguration *PluginCustomPluginConfiguration `pulumi:"customPluginConfiguration"`
	// The name of the plugin.
	DisplayName string `pulumi:"displayName"`
	// The plugin server URL used for configuration.
	ServerUrl *string `pulumi:"serverUrl"`
	// The current status of the plugin.
	State *PluginStateEnum `pulumi:"state"`
	// A list of key/value pairs that identify an index, FAQ, or data source. Tag keys and values can consist of Unicode letters, digits, white space, and any of the following symbols: _ . : / = + - @.
	Tags []aws.Tag `pulumi:"tags"`
	// The type of the plugin.
	Type PluginType `pulumi:"type"`
}

// The set of arguments for constructing a Plugin resource.
type PluginArgs struct {
	// The identifier of the application that will contain the plugin.
	ApplicationId pulumi.StringInput
	// Authentication configuration information for an Amazon Q Business plugin.
	AuthConfiguration pulumi.Input
	// Configuration information required to create a custom plugin.
	CustomPluginConfiguration PluginCustomPluginConfigurationPtrInput
	// The name of the plugin.
	DisplayName pulumi.StringInput
	// The plugin server URL used for configuration.
	ServerUrl pulumi.StringPtrInput
	// The current status of the plugin.
	State PluginStateEnumPtrInput
	// A list of key/value pairs that identify an index, FAQ, or data source. Tag keys and values can consist of Unicode letters, digits, white space, and any of the following symbols: _ . : / = + - @.
	Tags aws.TagArrayInput
	// The type of the plugin.
	Type PluginTypeInput
}

func (PluginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pluginArgs)(nil)).Elem()
}

type PluginInput interface {
	pulumi.Input

	ToPluginOutput() PluginOutput
	ToPluginOutputWithContext(ctx context.Context) PluginOutput
}

func (*Plugin) ElementType() reflect.Type {
	return reflect.TypeOf((**Plugin)(nil)).Elem()
}

func (i *Plugin) ToPluginOutput() PluginOutput {
	return i.ToPluginOutputWithContext(context.Background())
}

func (i *Plugin) ToPluginOutputWithContext(ctx context.Context) PluginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PluginOutput)
}

type PluginOutput struct{ *pulumi.OutputState }

func (PluginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Plugin)(nil)).Elem()
}

func (o PluginOutput) ToPluginOutput() PluginOutput {
	return o
}

func (o PluginOutput) ToPluginOutputWithContext(ctx context.Context) PluginOutput {
	return o
}

// The identifier of the application that will contain the plugin.
func (o PluginOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Plugin) pulumi.StringOutput { return v.ApplicationId }).(pulumi.StringOutput)
}

// Authentication configuration information for an Amazon Q Business plugin.
func (o PluginOutput) AuthConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v *Plugin) pulumi.AnyOutput { return v.AuthConfiguration }).(pulumi.AnyOutput)
}

// The current status of a plugin. A plugin is modified asynchronously.
func (o PluginOutput) BuildStatus() PluginBuildStatusOutput {
	return o.ApplyT(func(v *Plugin) PluginBuildStatusOutput { return v.BuildStatus }).(PluginBuildStatusOutput)
}

// The timestamp for when the plugin was created.
func (o PluginOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Plugin) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Configuration information required to create a custom plugin.
func (o PluginOutput) CustomPluginConfiguration() PluginCustomPluginConfigurationPtrOutput {
	return o.ApplyT(func(v *Plugin) PluginCustomPluginConfigurationPtrOutput { return v.CustomPluginConfiguration }).(PluginCustomPluginConfigurationPtrOutput)
}

// The name of the plugin.
func (o PluginOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Plugin) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The Amazon Resource Name (ARN) of a plugin.
func (o PluginOutput) PluginArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Plugin) pulumi.StringOutput { return v.PluginArn }).(pulumi.StringOutput)
}

// The identifier of the plugin.
func (o PluginOutput) PluginId() pulumi.StringOutput {
	return o.ApplyT(func(v *Plugin) pulumi.StringOutput { return v.PluginId }).(pulumi.StringOutput)
}

// The plugin server URL used for configuration.
func (o PluginOutput) ServerUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Plugin) pulumi.StringPtrOutput { return v.ServerUrl }).(pulumi.StringPtrOutput)
}

// The current status of the plugin.
func (o PluginOutput) State() PluginStateEnumPtrOutput {
	return o.ApplyT(func(v *Plugin) PluginStateEnumPtrOutput { return v.State }).(PluginStateEnumPtrOutput)
}

// A list of key/value pairs that identify an index, FAQ, or data source. Tag keys and values can consist of Unicode letters, digits, white space, and any of the following symbols: _ . : / = + - @.
func (o PluginOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Plugin) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

// The type of the plugin.
func (o PluginOutput) Type() PluginTypeOutput {
	return o.ApplyT(func(v *Plugin) PluginTypeOutput { return v.Type }).(PluginTypeOutput)
}

// The timestamp for when the plugin was last updated.
func (o PluginOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Plugin) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PluginInput)(nil)).Elem(), &Plugin{})
	pulumi.RegisterOutputType(PluginOutput{})
}
