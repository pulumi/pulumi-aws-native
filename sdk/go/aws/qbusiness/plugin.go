// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package qbusiness

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::QBusiness::Plugin Resource Type
type Plugin struct {
	pulumi.CustomResourceState

	ApplicationId             pulumi.StringOutput                      `pulumi:"applicationId"`
	AuthConfiguration         pulumi.AnyOutput                         `pulumi:"authConfiguration"`
	BuildStatus               PluginBuildStatusOutput                  `pulumi:"buildStatus"`
	CreatedAt                 pulumi.StringOutput                      `pulumi:"createdAt"`
	CustomPluginConfiguration PluginCustomPluginConfigurationPtrOutput `pulumi:"customPluginConfiguration"`
	DisplayName               pulumi.StringOutput                      `pulumi:"displayName"`
	PluginArn                 pulumi.StringOutput                      `pulumi:"pluginArn"`
	PluginId                  pulumi.StringOutput                      `pulumi:"pluginId"`
	ServerUrl                 pulumi.StringPtrOutput                   `pulumi:"serverUrl"`
	State                     PluginStateEnumPtrOutput                 `pulumi:"state"`
	Tags                      aws.TagArrayOutput                       `pulumi:"tags"`
	Type                      PluginTypeOutput                         `pulumi:"type"`
	UpdatedAt                 pulumi.StringOutput                      `pulumi:"updatedAt"`
}

// NewPlugin registers a new resource with the given unique name, arguments, and options.
func NewPlugin(ctx *pulumi.Context,
	name string, args *PluginArgs, opts ...pulumi.ResourceOption) (*Plugin, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationId == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationId'")
	}
	if args.AuthConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'AuthConfiguration'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"applicationId",
		"type",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Plugin
	err := ctx.RegisterResource("aws-native:qbusiness:Plugin", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPlugin gets an existing Plugin resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPlugin(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PluginState, opts ...pulumi.ResourceOption) (*Plugin, error) {
	var resource Plugin
	err := ctx.ReadResource("aws-native:qbusiness:Plugin", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Plugin resources.
type pluginState struct {
}

type PluginState struct {
}

func (PluginState) ElementType() reflect.Type {
	return reflect.TypeOf((*pluginState)(nil)).Elem()
}

type pluginArgs struct {
	ApplicationId             string                           `pulumi:"applicationId"`
	AuthConfiguration         interface{}                      `pulumi:"authConfiguration"`
	CustomPluginConfiguration *PluginCustomPluginConfiguration `pulumi:"customPluginConfiguration"`
	DisplayName               string                           `pulumi:"displayName"`
	ServerUrl                 *string                          `pulumi:"serverUrl"`
	State                     *PluginStateEnum                 `pulumi:"state"`
	Tags                      []aws.Tag                        `pulumi:"tags"`
	Type                      PluginType                       `pulumi:"type"`
}

// The set of arguments for constructing a Plugin resource.
type PluginArgs struct {
	ApplicationId             pulumi.StringInput
	AuthConfiguration         pulumi.Input
	CustomPluginConfiguration PluginCustomPluginConfigurationPtrInput
	DisplayName               pulumi.StringInput
	ServerUrl                 pulumi.StringPtrInput
	State                     PluginStateEnumPtrInput
	Tags                      aws.TagArrayInput
	Type                      PluginTypeInput
}

func (PluginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pluginArgs)(nil)).Elem()
}

type PluginInput interface {
	pulumi.Input

	ToPluginOutput() PluginOutput
	ToPluginOutputWithContext(ctx context.Context) PluginOutput
}

func (*Plugin) ElementType() reflect.Type {
	return reflect.TypeOf((**Plugin)(nil)).Elem()
}

func (i *Plugin) ToPluginOutput() PluginOutput {
	return i.ToPluginOutputWithContext(context.Background())
}

func (i *Plugin) ToPluginOutputWithContext(ctx context.Context) PluginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PluginOutput)
}

type PluginOutput struct{ *pulumi.OutputState }

func (PluginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Plugin)(nil)).Elem()
}

func (o PluginOutput) ToPluginOutput() PluginOutput {
	return o
}

func (o PluginOutput) ToPluginOutputWithContext(ctx context.Context) PluginOutput {
	return o
}

func (o PluginOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Plugin) pulumi.StringOutput { return v.ApplicationId }).(pulumi.StringOutput)
}

func (o PluginOutput) AuthConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v *Plugin) pulumi.AnyOutput { return v.AuthConfiguration }).(pulumi.AnyOutput)
}

func (o PluginOutput) BuildStatus() PluginBuildStatusOutput {
	return o.ApplyT(func(v *Plugin) PluginBuildStatusOutput { return v.BuildStatus }).(PluginBuildStatusOutput)
}

func (o PluginOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Plugin) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o PluginOutput) CustomPluginConfiguration() PluginCustomPluginConfigurationPtrOutput {
	return o.ApplyT(func(v *Plugin) PluginCustomPluginConfigurationPtrOutput { return v.CustomPluginConfiguration }).(PluginCustomPluginConfigurationPtrOutput)
}

func (o PluginOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Plugin) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

func (o PluginOutput) PluginArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Plugin) pulumi.StringOutput { return v.PluginArn }).(pulumi.StringOutput)
}

func (o PluginOutput) PluginId() pulumi.StringOutput {
	return o.ApplyT(func(v *Plugin) pulumi.StringOutput { return v.PluginId }).(pulumi.StringOutput)
}

func (o PluginOutput) ServerUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Plugin) pulumi.StringPtrOutput { return v.ServerUrl }).(pulumi.StringPtrOutput)
}

func (o PluginOutput) State() PluginStateEnumPtrOutput {
	return o.ApplyT(func(v *Plugin) PluginStateEnumPtrOutput { return v.State }).(PluginStateEnumPtrOutput)
}

func (o PluginOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Plugin) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func (o PluginOutput) Type() PluginTypeOutput {
	return o.ApplyT(func(v *Plugin) PluginTypeOutput { return v.Type }).(PluginTypeOutput)
}

func (o PluginOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Plugin) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PluginInput)(nil)).Elem(), &Plugin{})
	pulumi.RegisterOutputType(PluginOutput{})
}
