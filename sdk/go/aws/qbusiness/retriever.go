// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package qbusiness

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::QBusiness::Retriever Resource Type
type Retriever struct {
	pulumi.CustomResourceState

	// The identifier of the Amazon Q Business application using the retriever.
	ApplicationId pulumi.StringOutput `pulumi:"applicationId"`
	// Provides information on how the retriever used for your Amazon Q Business application is configured.
	Configuration pulumi.AnyOutput `pulumi:"configuration"`
	// The Unix timestamp when the retriever was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The name of your retriever.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The Amazon Resource Name (ARN) of the IAM role associated with the retriever.
	RetrieverArn pulumi.StringOutput `pulumi:"retrieverArn"`
	// The identifier of the retriever used by your Amazon Q Business application.
	RetrieverId pulumi.StringOutput `pulumi:"retrieverId"`
	// The ARN of an IAM role used by Amazon Q Business to access the basic authentication credentials stored in a Secrets Manager secret.
	RoleArn pulumi.StringPtrOutput `pulumi:"roleArn"`
	// The status of your retriever.
	Status RetrieverStatusOutput `pulumi:"status"`
	// A list of key-value pairs that identify or categorize the retriever. You can also use tags to help control access to the retriever. Tag keys and values can consist of Unicode letters, digits, white space, and any of the following symbols: _ . : / = + - @.
	Tags aws.TagArrayOutput `pulumi:"tags"`
	// The type of your retriever.
	Type RetrieverTypeOutput `pulumi:"type"`
	// The Unix timestamp when the retriever was last updated.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewRetriever registers a new resource with the given unique name, arguments, and options.
func NewRetriever(ctx *pulumi.Context,
	name string, args *RetrieverArgs, opts ...pulumi.ResourceOption) (*Retriever, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationId == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationId'")
	}
	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"applicationId",
		"type",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Retriever
	err := ctx.RegisterResource("aws-native:qbusiness:Retriever", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRetriever gets an existing Retriever resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRetriever(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RetrieverState, opts ...pulumi.ResourceOption) (*Retriever, error) {
	var resource Retriever
	err := ctx.ReadResource("aws-native:qbusiness:Retriever", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Retriever resources.
type retrieverState struct {
}

type RetrieverState struct {
}

func (RetrieverState) ElementType() reflect.Type {
	return reflect.TypeOf((*retrieverState)(nil)).Elem()
}

type retrieverArgs struct {
	// The identifier of the Amazon Q Business application using the retriever.
	ApplicationId string `pulumi:"applicationId"`
	// Provides information on how the retriever used for your Amazon Q Business application is configured.
	Configuration interface{} `pulumi:"configuration"`
	// The name of your retriever.
	DisplayName string `pulumi:"displayName"`
	// The ARN of an IAM role used by Amazon Q Business to access the basic authentication credentials stored in a Secrets Manager secret.
	RoleArn *string `pulumi:"roleArn"`
	// A list of key-value pairs that identify or categorize the retriever. You can also use tags to help control access to the retriever. Tag keys and values can consist of Unicode letters, digits, white space, and any of the following symbols: _ . : / = + - @.
	Tags []aws.Tag `pulumi:"tags"`
	// The type of your retriever.
	Type RetrieverType `pulumi:"type"`
}

// The set of arguments for constructing a Retriever resource.
type RetrieverArgs struct {
	// The identifier of the Amazon Q Business application using the retriever.
	ApplicationId pulumi.StringInput
	// Provides information on how the retriever used for your Amazon Q Business application is configured.
	Configuration pulumi.Input
	// The name of your retriever.
	DisplayName pulumi.StringInput
	// The ARN of an IAM role used by Amazon Q Business to access the basic authentication credentials stored in a Secrets Manager secret.
	RoleArn pulumi.StringPtrInput
	// A list of key-value pairs that identify or categorize the retriever. You can also use tags to help control access to the retriever. Tag keys and values can consist of Unicode letters, digits, white space, and any of the following symbols: _ . : / = + - @.
	Tags aws.TagArrayInput
	// The type of your retriever.
	Type RetrieverTypeInput
}

func (RetrieverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*retrieverArgs)(nil)).Elem()
}

type RetrieverInput interface {
	pulumi.Input

	ToRetrieverOutput() RetrieverOutput
	ToRetrieverOutputWithContext(ctx context.Context) RetrieverOutput
}

func (*Retriever) ElementType() reflect.Type {
	return reflect.TypeOf((**Retriever)(nil)).Elem()
}

func (i *Retriever) ToRetrieverOutput() RetrieverOutput {
	return i.ToRetrieverOutputWithContext(context.Background())
}

func (i *Retriever) ToRetrieverOutputWithContext(ctx context.Context) RetrieverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetrieverOutput)
}

type RetrieverOutput struct{ *pulumi.OutputState }

func (RetrieverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Retriever)(nil)).Elem()
}

func (o RetrieverOutput) ToRetrieverOutput() RetrieverOutput {
	return o
}

func (o RetrieverOutput) ToRetrieverOutputWithContext(ctx context.Context) RetrieverOutput {
	return o
}

// The identifier of the Amazon Q Business application using the retriever.
func (o RetrieverOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Retriever) pulumi.StringOutput { return v.ApplicationId }).(pulumi.StringOutput)
}

// Provides information on how the retriever used for your Amazon Q Business application is configured.
func (o RetrieverOutput) Configuration() pulumi.AnyOutput {
	return o.ApplyT(func(v *Retriever) pulumi.AnyOutput { return v.Configuration }).(pulumi.AnyOutput)
}

// The Unix timestamp when the retriever was created.
func (o RetrieverOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Retriever) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The name of your retriever.
func (o RetrieverOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Retriever) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The Amazon Resource Name (ARN) of the IAM role associated with the retriever.
func (o RetrieverOutput) RetrieverArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Retriever) pulumi.StringOutput { return v.RetrieverArn }).(pulumi.StringOutput)
}

// The identifier of the retriever used by your Amazon Q Business application.
func (o RetrieverOutput) RetrieverId() pulumi.StringOutput {
	return o.ApplyT(func(v *Retriever) pulumi.StringOutput { return v.RetrieverId }).(pulumi.StringOutput)
}

// The ARN of an IAM role used by Amazon Q Business to access the basic authentication credentials stored in a Secrets Manager secret.
func (o RetrieverOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Retriever) pulumi.StringPtrOutput { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// The status of your retriever.
func (o RetrieverOutput) Status() RetrieverStatusOutput {
	return o.ApplyT(func(v *Retriever) RetrieverStatusOutput { return v.Status }).(RetrieverStatusOutput)
}

// A list of key-value pairs that identify or categorize the retriever. You can also use tags to help control access to the retriever. Tag keys and values can consist of Unicode letters, digits, white space, and any of the following symbols: _ . : / = + - @.
func (o RetrieverOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Retriever) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

// The type of your retriever.
func (o RetrieverOutput) Type() RetrieverTypeOutput {
	return o.ApplyT(func(v *Retriever) RetrieverTypeOutput { return v.Type }).(RetrieverTypeOutput)
}

// The Unix timestamp when the retriever was last updated.
func (o RetrieverOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Retriever) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RetrieverInput)(nil)).Elem(), &Retriever{})
	pulumi.RegisterOutputType(RetrieverOutput{})
}
