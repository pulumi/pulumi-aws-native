// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package launchwizard

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Definition of AWS::LaunchWizard::Deployment Resource Type
type Deployment struct {
	pulumi.CustomResourceState

	// ARN of the LaunchWizard deployment
	Arn pulumi.StringOutput `pulumi:"arn"`
	// Timestamp of LaunchWizard deployment creation
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Timestamp of LaunchWizard deployment deletion
	DeletedAt pulumi.StringOutput `pulumi:"deletedAt"`
	// Deployment ID of the LaunchWizard deployment
	DeploymentId pulumi.StringOutput `pulumi:"deploymentId"`
	// Workload deployment pattern name
	DeploymentPatternName pulumi.StringOutput `pulumi:"deploymentPatternName"`
	// Name of LaunchWizard deployment
	Name pulumi.StringOutput `pulumi:"name"`
	// Resource Group Name created for LaunchWizard deployment
	ResourceGroup pulumi.StringOutput `pulumi:"resourceGroup"`
	// LaunchWizard deployment specifications
	Specifications pulumi.StringMapOutput `pulumi:"specifications"`
	// Status of LaunchWizard deployment
	Status DeploymentStatusOutput `pulumi:"status"`
	// Tags for LaunchWizard deployment
	Tags aws.TagArrayOutput `pulumi:"tags"`
	// Workload Name for LaunchWizard deployment
	WorkloadName pulumi.StringOutput `pulumi:"workloadName"`
}

// NewDeployment registers a new resource with the given unique name, arguments, and options.
func NewDeployment(ctx *pulumi.Context,
	name string, args *DeploymentArgs, opts ...pulumi.ResourceOption) (*Deployment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DeploymentPatternName == nil {
		return nil, errors.New("invalid value for required argument 'DeploymentPatternName'")
	}
	if args.Specifications == nil {
		return nil, errors.New("invalid value for required argument 'Specifications'")
	}
	if args.WorkloadName == nil {
		return nil, errors.New("invalid value for required argument 'WorkloadName'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"deploymentPatternName",
		"name",
		"workloadName",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Deployment
	err := ctx.RegisterResource("aws-native:launchwizard:Deployment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeployment gets an existing Deployment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeployment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeploymentState, opts ...pulumi.ResourceOption) (*Deployment, error) {
	var resource Deployment
	err := ctx.ReadResource("aws-native:launchwizard:Deployment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Deployment resources.
type deploymentState struct {
}

type DeploymentState struct {
}

func (DeploymentState) ElementType() reflect.Type {
	return reflect.TypeOf((*deploymentState)(nil)).Elem()
}

type deploymentArgs struct {
	// Workload deployment pattern name
	DeploymentPatternName string `pulumi:"deploymentPatternName"`
	// Name of LaunchWizard deployment
	Name *string `pulumi:"name"`
	// LaunchWizard deployment specifications
	Specifications map[string]string `pulumi:"specifications"`
	// Tags for LaunchWizard deployment
	Tags []aws.Tag `pulumi:"tags"`
	// Workload Name for LaunchWizard deployment
	WorkloadName string `pulumi:"workloadName"`
}

// The set of arguments for constructing a Deployment resource.
type DeploymentArgs struct {
	// Workload deployment pattern name
	DeploymentPatternName pulumi.StringInput
	// Name of LaunchWizard deployment
	Name pulumi.StringPtrInput
	// LaunchWizard deployment specifications
	Specifications pulumi.StringMapInput
	// Tags for LaunchWizard deployment
	Tags aws.TagArrayInput
	// Workload Name for LaunchWizard deployment
	WorkloadName pulumi.StringInput
}

func (DeploymentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deploymentArgs)(nil)).Elem()
}

type DeploymentInput interface {
	pulumi.Input

	ToDeploymentOutput() DeploymentOutput
	ToDeploymentOutputWithContext(ctx context.Context) DeploymentOutput
}

func (*Deployment) ElementType() reflect.Type {
	return reflect.TypeOf((**Deployment)(nil)).Elem()
}

func (i *Deployment) ToDeploymentOutput() DeploymentOutput {
	return i.ToDeploymentOutputWithContext(context.Background())
}

func (i *Deployment) ToDeploymentOutputWithContext(ctx context.Context) DeploymentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentOutput)
}

type DeploymentOutput struct{ *pulumi.OutputState }

func (DeploymentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Deployment)(nil)).Elem()
}

func (o DeploymentOutput) ToDeploymentOutput() DeploymentOutput {
	return o
}

func (o DeploymentOutput) ToDeploymentOutputWithContext(ctx context.Context) DeploymentOutput {
	return o
}

// ARN of the LaunchWizard deployment
func (o DeploymentOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

// Timestamp of LaunchWizard deployment creation
func (o DeploymentOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Timestamp of LaunchWizard deployment deletion
func (o DeploymentOutput) DeletedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.DeletedAt }).(pulumi.StringOutput)
}

// Deployment ID of the LaunchWizard deployment
func (o DeploymentOutput) DeploymentId() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.DeploymentId }).(pulumi.StringOutput)
}

// Workload deployment pattern name
func (o DeploymentOutput) DeploymentPatternName() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.DeploymentPatternName }).(pulumi.StringOutput)
}

// Name of LaunchWizard deployment
func (o DeploymentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Resource Group Name created for LaunchWizard deployment
func (o DeploymentOutput) ResourceGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.ResourceGroup }).(pulumi.StringOutput)
}

// LaunchWizard deployment specifications
func (o DeploymentOutput) Specifications() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringMapOutput { return v.Specifications }).(pulumi.StringMapOutput)
}

// Status of LaunchWizard deployment
func (o DeploymentOutput) Status() DeploymentStatusOutput {
	return o.ApplyT(func(v *Deployment) DeploymentStatusOutput { return v.Status }).(DeploymentStatusOutput)
}

// Tags for LaunchWizard deployment
func (o DeploymentOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *Deployment) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

// Workload Name for LaunchWizard deployment
func (o DeploymentOutput) WorkloadName() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.WorkloadName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentInput)(nil)).Elem(), &Deployment{})
	pulumi.RegisterOutputType(DeploymentOutput{})
}
