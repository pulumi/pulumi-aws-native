// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package iotwireless

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Must be RuleName
type DestinationExpressionType string

const (
	DestinationExpressionTypeRuleName  = DestinationExpressionType("RuleName")
	DestinationExpressionTypeMqttTopic = DestinationExpressionType("MqttTopic")
)

func (DestinationExpressionType) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationExpressionType)(nil)).Elem()
}

func (e DestinationExpressionType) ToDestinationExpressionTypeOutput() DestinationExpressionTypeOutput {
	return pulumi.ToOutput(e).(DestinationExpressionTypeOutput)
}

func (e DestinationExpressionType) ToDestinationExpressionTypeOutputWithContext(ctx context.Context) DestinationExpressionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DestinationExpressionTypeOutput)
}

func (e DestinationExpressionType) ToDestinationExpressionTypePtrOutput() DestinationExpressionTypePtrOutput {
	return e.ToDestinationExpressionTypePtrOutputWithContext(context.Background())
}

func (e DestinationExpressionType) ToDestinationExpressionTypePtrOutputWithContext(ctx context.Context) DestinationExpressionTypePtrOutput {
	return DestinationExpressionType(e).ToDestinationExpressionTypeOutputWithContext(ctx).ToDestinationExpressionTypePtrOutputWithContext(ctx)
}

func (e DestinationExpressionType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DestinationExpressionType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DestinationExpressionType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DestinationExpressionType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DestinationExpressionTypeOutput struct{ *pulumi.OutputState }

func (DestinationExpressionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationExpressionType)(nil)).Elem()
}

func (o DestinationExpressionTypeOutput) ToDestinationExpressionTypeOutput() DestinationExpressionTypeOutput {
	return o
}

func (o DestinationExpressionTypeOutput) ToDestinationExpressionTypeOutputWithContext(ctx context.Context) DestinationExpressionTypeOutput {
	return o
}

func (o DestinationExpressionTypeOutput) ToDestinationExpressionTypePtrOutput() DestinationExpressionTypePtrOutput {
	return o.ToDestinationExpressionTypePtrOutputWithContext(context.Background())
}

func (o DestinationExpressionTypeOutput) ToDestinationExpressionTypePtrOutputWithContext(ctx context.Context) DestinationExpressionTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationExpressionType) *DestinationExpressionType {
		return &v
	}).(DestinationExpressionTypePtrOutput)
}

func (o DestinationExpressionTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DestinationExpressionTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DestinationExpressionType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DestinationExpressionTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DestinationExpressionTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DestinationExpressionType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DestinationExpressionTypePtrOutput struct{ *pulumi.OutputState }

func (DestinationExpressionTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationExpressionType)(nil)).Elem()
}

func (o DestinationExpressionTypePtrOutput) ToDestinationExpressionTypePtrOutput() DestinationExpressionTypePtrOutput {
	return o
}

func (o DestinationExpressionTypePtrOutput) ToDestinationExpressionTypePtrOutputWithContext(ctx context.Context) DestinationExpressionTypePtrOutput {
	return o
}

func (o DestinationExpressionTypePtrOutput) Elem() DestinationExpressionTypeOutput {
	return o.ApplyT(func(v *DestinationExpressionType) DestinationExpressionType {
		if v != nil {
			return *v
		}
		var ret DestinationExpressionType
		return ret
	}).(DestinationExpressionTypeOutput)
}

func (o DestinationExpressionTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DestinationExpressionTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DestinationExpressionType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DestinationExpressionTypeInput is an input type that accepts DestinationExpressionTypeArgs and DestinationExpressionTypeOutput values.
// You can construct a concrete instance of `DestinationExpressionTypeInput` via:
//
//          DestinationExpressionTypeArgs{...}
type DestinationExpressionTypeInput interface {
	pulumi.Input

	ToDestinationExpressionTypeOutput() DestinationExpressionTypeOutput
	ToDestinationExpressionTypeOutputWithContext(context.Context) DestinationExpressionTypeOutput
}

var destinationExpressionTypePtrType = reflect.TypeOf((**DestinationExpressionType)(nil)).Elem()

type DestinationExpressionTypePtrInput interface {
	pulumi.Input

	ToDestinationExpressionTypePtrOutput() DestinationExpressionTypePtrOutput
	ToDestinationExpressionTypePtrOutputWithContext(context.Context) DestinationExpressionTypePtrOutput
}

type destinationExpressionTypePtr string

func DestinationExpressionTypePtr(v string) DestinationExpressionTypePtrInput {
	return (*destinationExpressionTypePtr)(&v)
}

func (*destinationExpressionTypePtr) ElementType() reflect.Type {
	return destinationExpressionTypePtrType
}

func (in *destinationExpressionTypePtr) ToDestinationExpressionTypePtrOutput() DestinationExpressionTypePtrOutput {
	return pulumi.ToOutput(in).(DestinationExpressionTypePtrOutput)
}

func (in *destinationExpressionTypePtr) ToDestinationExpressionTypePtrOutputWithContext(ctx context.Context) DestinationExpressionTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DestinationExpressionTypePtrOutput)
}

// The partner type
type PartnerAccountPartnerType string

const (
	PartnerAccountPartnerTypeSidewalk = PartnerAccountPartnerType("Sidewalk")
)

func (PartnerAccountPartnerType) ElementType() reflect.Type {
	return reflect.TypeOf((*PartnerAccountPartnerType)(nil)).Elem()
}

func (e PartnerAccountPartnerType) ToPartnerAccountPartnerTypeOutput() PartnerAccountPartnerTypeOutput {
	return pulumi.ToOutput(e).(PartnerAccountPartnerTypeOutput)
}

func (e PartnerAccountPartnerType) ToPartnerAccountPartnerTypeOutputWithContext(ctx context.Context) PartnerAccountPartnerTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PartnerAccountPartnerTypeOutput)
}

func (e PartnerAccountPartnerType) ToPartnerAccountPartnerTypePtrOutput() PartnerAccountPartnerTypePtrOutput {
	return e.ToPartnerAccountPartnerTypePtrOutputWithContext(context.Background())
}

func (e PartnerAccountPartnerType) ToPartnerAccountPartnerTypePtrOutputWithContext(ctx context.Context) PartnerAccountPartnerTypePtrOutput {
	return PartnerAccountPartnerType(e).ToPartnerAccountPartnerTypeOutputWithContext(ctx).ToPartnerAccountPartnerTypePtrOutputWithContext(ctx)
}

func (e PartnerAccountPartnerType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PartnerAccountPartnerType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PartnerAccountPartnerType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PartnerAccountPartnerType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PartnerAccountPartnerTypeOutput struct{ *pulumi.OutputState }

func (PartnerAccountPartnerTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PartnerAccountPartnerType)(nil)).Elem()
}

func (o PartnerAccountPartnerTypeOutput) ToPartnerAccountPartnerTypeOutput() PartnerAccountPartnerTypeOutput {
	return o
}

func (o PartnerAccountPartnerTypeOutput) ToPartnerAccountPartnerTypeOutputWithContext(ctx context.Context) PartnerAccountPartnerTypeOutput {
	return o
}

func (o PartnerAccountPartnerTypeOutput) ToPartnerAccountPartnerTypePtrOutput() PartnerAccountPartnerTypePtrOutput {
	return o.ToPartnerAccountPartnerTypePtrOutputWithContext(context.Background())
}

func (o PartnerAccountPartnerTypeOutput) ToPartnerAccountPartnerTypePtrOutputWithContext(ctx context.Context) PartnerAccountPartnerTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PartnerAccountPartnerType) *PartnerAccountPartnerType {
		return &v
	}).(PartnerAccountPartnerTypePtrOutput)
}

func (o PartnerAccountPartnerTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PartnerAccountPartnerTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PartnerAccountPartnerType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PartnerAccountPartnerTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PartnerAccountPartnerTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PartnerAccountPartnerType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PartnerAccountPartnerTypePtrOutput struct{ *pulumi.OutputState }

func (PartnerAccountPartnerTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PartnerAccountPartnerType)(nil)).Elem()
}

func (o PartnerAccountPartnerTypePtrOutput) ToPartnerAccountPartnerTypePtrOutput() PartnerAccountPartnerTypePtrOutput {
	return o
}

func (o PartnerAccountPartnerTypePtrOutput) ToPartnerAccountPartnerTypePtrOutputWithContext(ctx context.Context) PartnerAccountPartnerTypePtrOutput {
	return o
}

func (o PartnerAccountPartnerTypePtrOutput) Elem() PartnerAccountPartnerTypeOutput {
	return o.ApplyT(func(v *PartnerAccountPartnerType) PartnerAccountPartnerType {
		if v != nil {
			return *v
		}
		var ret PartnerAccountPartnerType
		return ret
	}).(PartnerAccountPartnerTypeOutput)
}

func (o PartnerAccountPartnerTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PartnerAccountPartnerTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PartnerAccountPartnerType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PartnerAccountPartnerTypeInput is an input type that accepts PartnerAccountPartnerTypeArgs and PartnerAccountPartnerTypeOutput values.
// You can construct a concrete instance of `PartnerAccountPartnerTypeInput` via:
//
//          PartnerAccountPartnerTypeArgs{...}
type PartnerAccountPartnerTypeInput interface {
	pulumi.Input

	ToPartnerAccountPartnerTypeOutput() PartnerAccountPartnerTypeOutput
	ToPartnerAccountPartnerTypeOutputWithContext(context.Context) PartnerAccountPartnerTypeOutput
}

var partnerAccountPartnerTypePtrType = reflect.TypeOf((**PartnerAccountPartnerType)(nil)).Elem()

type PartnerAccountPartnerTypePtrInput interface {
	pulumi.Input

	ToPartnerAccountPartnerTypePtrOutput() PartnerAccountPartnerTypePtrOutput
	ToPartnerAccountPartnerTypePtrOutputWithContext(context.Context) PartnerAccountPartnerTypePtrOutput
}

type partnerAccountPartnerTypePtr string

func PartnerAccountPartnerTypePtr(v string) PartnerAccountPartnerTypePtrInput {
	return (*partnerAccountPartnerTypePtr)(&v)
}

func (*partnerAccountPartnerTypePtr) ElementType() reflect.Type {
	return partnerAccountPartnerTypePtrType
}

func (in *partnerAccountPartnerTypePtr) ToPartnerAccountPartnerTypePtrOutput() PartnerAccountPartnerTypePtrOutput {
	return pulumi.ToOutput(in).(PartnerAccountPartnerTypePtrOutput)
}

func (in *partnerAccountPartnerTypePtr) ToPartnerAccountPartnerTypePtrOutputWithContext(ctx context.Context) PartnerAccountPartnerTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PartnerAccountPartnerTypePtrOutput)
}

// A filter to list only the wireless gateway task definitions that use this task definition type
type TaskDefinitionType string

const (
	TaskDefinitionTypeUpdate = TaskDefinitionType("UPDATE")
)

func (TaskDefinitionType) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionType)(nil)).Elem()
}

func (e TaskDefinitionType) ToTaskDefinitionTypeOutput() TaskDefinitionTypeOutput {
	return pulumi.ToOutput(e).(TaskDefinitionTypeOutput)
}

func (e TaskDefinitionType) ToTaskDefinitionTypeOutputWithContext(ctx context.Context) TaskDefinitionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(TaskDefinitionTypeOutput)
}

func (e TaskDefinitionType) ToTaskDefinitionTypePtrOutput() TaskDefinitionTypePtrOutput {
	return e.ToTaskDefinitionTypePtrOutputWithContext(context.Background())
}

func (e TaskDefinitionType) ToTaskDefinitionTypePtrOutputWithContext(ctx context.Context) TaskDefinitionTypePtrOutput {
	return TaskDefinitionType(e).ToTaskDefinitionTypeOutputWithContext(ctx).ToTaskDefinitionTypePtrOutputWithContext(ctx)
}

func (e TaskDefinitionType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e TaskDefinitionType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e TaskDefinitionType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e TaskDefinitionType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type TaskDefinitionTypeOutput struct{ *pulumi.OutputState }

func (TaskDefinitionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionType)(nil)).Elem()
}

func (o TaskDefinitionTypeOutput) ToTaskDefinitionTypeOutput() TaskDefinitionTypeOutput {
	return o
}

func (o TaskDefinitionTypeOutput) ToTaskDefinitionTypeOutputWithContext(ctx context.Context) TaskDefinitionTypeOutput {
	return o
}

func (o TaskDefinitionTypeOutput) ToTaskDefinitionTypePtrOutput() TaskDefinitionTypePtrOutput {
	return o.ToTaskDefinitionTypePtrOutputWithContext(context.Background())
}

func (o TaskDefinitionTypeOutput) ToTaskDefinitionTypePtrOutputWithContext(ctx context.Context) TaskDefinitionTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskDefinitionType) *TaskDefinitionType {
		return &v
	}).(TaskDefinitionTypePtrOutput)
}

func (o TaskDefinitionTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o TaskDefinitionTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TaskDefinitionType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o TaskDefinitionTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TaskDefinitionTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TaskDefinitionType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type TaskDefinitionTypePtrOutput struct{ *pulumi.OutputState }

func (TaskDefinitionTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionType)(nil)).Elem()
}

func (o TaskDefinitionTypePtrOutput) ToTaskDefinitionTypePtrOutput() TaskDefinitionTypePtrOutput {
	return o
}

func (o TaskDefinitionTypePtrOutput) ToTaskDefinitionTypePtrOutputWithContext(ctx context.Context) TaskDefinitionTypePtrOutput {
	return o
}

func (o TaskDefinitionTypePtrOutput) Elem() TaskDefinitionTypeOutput {
	return o.ApplyT(func(v *TaskDefinitionType) TaskDefinitionType {
		if v != nil {
			return *v
		}
		var ret TaskDefinitionType
		return ret
	}).(TaskDefinitionTypeOutput)
}

func (o TaskDefinitionTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TaskDefinitionTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *TaskDefinitionType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// TaskDefinitionTypeInput is an input type that accepts TaskDefinitionTypeArgs and TaskDefinitionTypeOutput values.
// You can construct a concrete instance of `TaskDefinitionTypeInput` via:
//
//          TaskDefinitionTypeArgs{...}
type TaskDefinitionTypeInput interface {
	pulumi.Input

	ToTaskDefinitionTypeOutput() TaskDefinitionTypeOutput
	ToTaskDefinitionTypeOutputWithContext(context.Context) TaskDefinitionTypeOutput
}

var taskDefinitionTypePtrType = reflect.TypeOf((**TaskDefinitionType)(nil)).Elem()

type TaskDefinitionTypePtrInput interface {
	pulumi.Input

	ToTaskDefinitionTypePtrOutput() TaskDefinitionTypePtrOutput
	ToTaskDefinitionTypePtrOutputWithContext(context.Context) TaskDefinitionTypePtrOutput
}

type taskDefinitionTypePtr string

func TaskDefinitionTypePtr(v string) TaskDefinitionTypePtrInput {
	return (*taskDefinitionTypePtr)(&v)
}

func (*taskDefinitionTypePtr) ElementType() reflect.Type {
	return taskDefinitionTypePtrType
}

func (in *taskDefinitionTypePtr) ToTaskDefinitionTypePtrOutput() TaskDefinitionTypePtrOutput {
	return pulumi.ToOutput(in).(TaskDefinitionTypePtrOutput)
}

func (in *taskDefinitionTypePtr) ToTaskDefinitionTypePtrOutputWithContext(ctx context.Context) TaskDefinitionTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(TaskDefinitionTypePtrOutput)
}

// Wireless device type, currently only Sidewalk and LoRa
type WirelessDeviceType string

const (
	WirelessDeviceTypeSidewalk = WirelessDeviceType("Sidewalk")
	WirelessDeviceTypeLoRaWAN  = WirelessDeviceType("LoRaWAN")
)

func (WirelessDeviceType) ElementType() reflect.Type {
	return reflect.TypeOf((*WirelessDeviceType)(nil)).Elem()
}

func (e WirelessDeviceType) ToWirelessDeviceTypeOutput() WirelessDeviceTypeOutput {
	return pulumi.ToOutput(e).(WirelessDeviceTypeOutput)
}

func (e WirelessDeviceType) ToWirelessDeviceTypeOutputWithContext(ctx context.Context) WirelessDeviceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(WirelessDeviceTypeOutput)
}

func (e WirelessDeviceType) ToWirelessDeviceTypePtrOutput() WirelessDeviceTypePtrOutput {
	return e.ToWirelessDeviceTypePtrOutputWithContext(context.Background())
}

func (e WirelessDeviceType) ToWirelessDeviceTypePtrOutputWithContext(ctx context.Context) WirelessDeviceTypePtrOutput {
	return WirelessDeviceType(e).ToWirelessDeviceTypeOutputWithContext(ctx).ToWirelessDeviceTypePtrOutputWithContext(ctx)
}

func (e WirelessDeviceType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e WirelessDeviceType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e WirelessDeviceType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e WirelessDeviceType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type WirelessDeviceTypeOutput struct{ *pulumi.OutputState }

func (WirelessDeviceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WirelessDeviceType)(nil)).Elem()
}

func (o WirelessDeviceTypeOutput) ToWirelessDeviceTypeOutput() WirelessDeviceTypeOutput {
	return o
}

func (o WirelessDeviceTypeOutput) ToWirelessDeviceTypeOutputWithContext(ctx context.Context) WirelessDeviceTypeOutput {
	return o
}

func (o WirelessDeviceTypeOutput) ToWirelessDeviceTypePtrOutput() WirelessDeviceTypePtrOutput {
	return o.ToWirelessDeviceTypePtrOutputWithContext(context.Background())
}

func (o WirelessDeviceTypeOutput) ToWirelessDeviceTypePtrOutputWithContext(ctx context.Context) WirelessDeviceTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WirelessDeviceType) *WirelessDeviceType {
		return &v
	}).(WirelessDeviceTypePtrOutput)
}

func (o WirelessDeviceTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o WirelessDeviceTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e WirelessDeviceType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o WirelessDeviceTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o WirelessDeviceTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e WirelessDeviceType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type WirelessDeviceTypePtrOutput struct{ *pulumi.OutputState }

func (WirelessDeviceTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessDeviceType)(nil)).Elem()
}

func (o WirelessDeviceTypePtrOutput) ToWirelessDeviceTypePtrOutput() WirelessDeviceTypePtrOutput {
	return o
}

func (o WirelessDeviceTypePtrOutput) ToWirelessDeviceTypePtrOutputWithContext(ctx context.Context) WirelessDeviceTypePtrOutput {
	return o
}

func (o WirelessDeviceTypePtrOutput) Elem() WirelessDeviceTypeOutput {
	return o.ApplyT(func(v *WirelessDeviceType) WirelessDeviceType {
		if v != nil {
			return *v
		}
		var ret WirelessDeviceType
		return ret
	}).(WirelessDeviceTypeOutput)
}

func (o WirelessDeviceTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o WirelessDeviceTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *WirelessDeviceType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// WirelessDeviceTypeInput is an input type that accepts WirelessDeviceTypeArgs and WirelessDeviceTypeOutput values.
// You can construct a concrete instance of `WirelessDeviceTypeInput` via:
//
//          WirelessDeviceTypeArgs{...}
type WirelessDeviceTypeInput interface {
	pulumi.Input

	ToWirelessDeviceTypeOutput() WirelessDeviceTypeOutput
	ToWirelessDeviceTypeOutputWithContext(context.Context) WirelessDeviceTypeOutput
}

var wirelessDeviceTypePtrType = reflect.TypeOf((**WirelessDeviceType)(nil)).Elem()

type WirelessDeviceTypePtrInput interface {
	pulumi.Input

	ToWirelessDeviceTypePtrOutput() WirelessDeviceTypePtrOutput
	ToWirelessDeviceTypePtrOutputWithContext(context.Context) WirelessDeviceTypePtrOutput
}

type wirelessDeviceTypePtr string

func WirelessDeviceTypePtr(v string) WirelessDeviceTypePtrInput {
	return (*wirelessDeviceTypePtr)(&v)
}

func (*wirelessDeviceTypePtr) ElementType() reflect.Type {
	return wirelessDeviceTypePtrType
}

func (in *wirelessDeviceTypePtr) ToWirelessDeviceTypePtrOutput() WirelessDeviceTypePtrOutput {
	return pulumi.ToOutput(in).(WirelessDeviceTypePtrOutput)
}

func (in *wirelessDeviceTypePtr) ToWirelessDeviceTypePtrOutputWithContext(ctx context.Context) WirelessDeviceTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(WirelessDeviceTypePtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationExpressionTypeInput)(nil)).Elem(), DestinationExpressionType("RuleName"))
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationExpressionTypePtrInput)(nil)).Elem(), DestinationExpressionType("RuleName"))
	pulumi.RegisterInputType(reflect.TypeOf((*PartnerAccountPartnerTypeInput)(nil)).Elem(), PartnerAccountPartnerType("Sidewalk"))
	pulumi.RegisterInputType(reflect.TypeOf((*PartnerAccountPartnerTypePtrInput)(nil)).Elem(), PartnerAccountPartnerType("Sidewalk"))
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionTypeInput)(nil)).Elem(), TaskDefinitionType("UPDATE"))
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionTypePtrInput)(nil)).Elem(), TaskDefinitionType("UPDATE"))
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessDeviceTypeInput)(nil)).Elem(), WirelessDeviceType("Sidewalk"))
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessDeviceTypePtrInput)(nil)).Elem(), WirelessDeviceType("Sidewalk"))
	pulumi.RegisterOutputType(DestinationExpressionTypeOutput{})
	pulumi.RegisterOutputType(DestinationExpressionTypePtrOutput{})
	pulumi.RegisterOutputType(PartnerAccountPartnerTypeOutput{})
	pulumi.RegisterOutputType(PartnerAccountPartnerTypePtrOutput{})
	pulumi.RegisterOutputType(TaskDefinitionTypeOutput{})
	pulumi.RegisterOutputType(TaskDefinitionTypePtrOutput{})
	pulumi.RegisterOutputType(WirelessDeviceTypeOutput{})
	pulumi.RegisterOutputType(WirelessDeviceTypePtrOutput{})
}
