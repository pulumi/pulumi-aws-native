// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The “AWS::ECS::Service“ resource creates an Amazon Elastic Container Service (Amazon ECS) service that runs and maintains the requested number of tasks and associated load balancers.
//
//	The stack update fails if you change any properties that require replacement and at least one ECS Service Connect ``ServiceConnectConfiguration`` property the is configured. This is because AWS CloudFormation creates the replacement service first, but each ``ServiceConnectService`` must have a name that is unique in the namespace.
//	 Starting April 15, 2023, AWS; will not onboard new customers to Amazon Elastic Inference (EI), and will help current customers migrate their workloads to options that offer better price and performance. After April 15, 2023, new customers will not be able to launch instances with Amazon EI accelerators in Amazon SageMaker, ECS, or EC2. However, customers who have used Amazon EI at least once during the past 30-day period are considered current customers and will be able to continue using the service.
func LookupService(ctx *pulumi.Context, args *LookupServiceArgs, opts ...pulumi.InvokeOption) (*LookupServiceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupServiceResult
	err := ctx.Invoke("aws-native:ecs:getService", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupServiceArgs struct {
	// The short name or full Amazon Resource Name (ARN) of the cluster that you run your service on. If you do not specify a cluster, the default cluster is assumed.
	Cluster string `pulumi:"cluster"`
	// Not currently supported in AWS CloudFormation .
	ServiceArn string `pulumi:"serviceArn"`
}

type LookupServiceResult struct {
	// The capacity provider strategy to use for the service.
	//  If a ``capacityProviderStrategy`` is specified, the ``launchType`` parameter must be omitted. If no ``capacityProviderStrategy`` or ``launchType`` is specified, the ``defaultCapacityProviderStrategy`` for the cluster is used.
	//  A capacity provider strategy may contain a maximum of 6 capacity providers.
	CapacityProviderStrategy []ServiceCapacityProviderStrategyItem `pulumi:"capacityProviderStrategy"`
	// Optional deployment parameters that control how many tasks run during the deployment and the ordering of stopping and starting tasks.
	DeploymentConfiguration *ServiceDeploymentConfiguration `pulumi:"deploymentConfiguration"`
	// The number of instantiations of the specified task definition to place and keep running in your service.
	//  For new services, if a desired count is not specified, a default value of ``1`` is used. When using the ``DAEMON`` scheduling strategy, the desired count is not required.
	//  For existing services, if a desired count is not specified, it is omitted from the operation.
	DesiredCount *int `pulumi:"desiredCount"`
	// Specifies whether to turn on Amazon ECS managed tags for the tasks within the service. For more information, see [Tagging your Amazon ECS resources](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html) in the *Amazon Elastic Container Service Developer Guide*.
	//  When you use Amazon ECS managed tags, you need to set the ``propagateTags`` request parameter.
	EnableEcsManagedTags *bool `pulumi:"enableEcsManagedTags"`
	// Determines whether the execute command functionality is turned on for the service. If ``true``, the execute command functionality is turned on for all containers in tasks as part of the service.
	EnableExecuteCommand *bool `pulumi:"enableExecuteCommand"`
	// The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy Elastic Load Balancing target health checks after a task has first started. This is only used when your service is configured to use a load balancer. If your service has a load balancer defined and you don't specify a health check grace period value, the default value of ``0`` is used.
	//  If you do not use an Elastic Load Balancing, we recommend that you use the ``startPeriod`` in the task definition health check parameters. For more information, see [Health check](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_HealthCheck.html).
	//  If your service's tasks take a while to start and respond to Elastic Load Balancing health checks, you can specify a health check grace period of up to 2,147,483,647 seconds (about 69 years). During that time, the Amazon ECS service scheduler ignores health check status. This grace period can prevent the service scheduler from marking tasks as unhealthy and stopping them before they have time to come up.
	HealthCheckGracePeriodSeconds *int `pulumi:"healthCheckGracePeriodSeconds"`
	// A list of load balancer objects to associate with the service. If you specify the ``Role`` property, ``LoadBalancers`` must be specified as well. For information about the number of load balancers that you can specify per service, see [Service Load Balancing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-load-balancing.html) in the *Amazon Elastic Container Service Developer Guide*.
	LoadBalancers []ServiceLoadBalancer `pulumi:"loadBalancers"`
	// The name of the Amazon ECS service, such as `sample-webapp` .
	Name *string `pulumi:"name"`
	// The network configuration for the service. This parameter is required for task definitions that use the ``awsvpc`` network mode to receive their own elastic network interface, and it is not supported for other network modes. For more information, see [Task Networking](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html) in the *Amazon Elastic Container Service Developer Guide*.
	NetworkConfiguration *ServiceNetworkConfiguration `pulumi:"networkConfiguration"`
	// An array of placement constraint objects to use for tasks in your service. You can specify a maximum of 10 constraints for each task. This limit includes constraints in the task definition and those specified at runtime.
	PlacementConstraints []ServicePlacementConstraint `pulumi:"placementConstraints"`
	// The placement strategy objects to use for tasks in your service. You can specify a maximum of 5 strategy rules for each service.
	PlacementStrategies []ServicePlacementStrategy `pulumi:"placementStrategies"`
	// The platform version that your tasks in the service are running on. A platform version is specified only for tasks using the Fargate launch type. If one isn't specified, the ``LATEST`` platform version is used. For more information, see [platform versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html) in the *Amazon Elastic Container Service Developer Guide*.
	PlatformVersion *string `pulumi:"platformVersion"`
	// Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags aren't propagated. Tags can only be propagated to the task during task creation. To add tags to a task after task creation, use the [TagResource](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_TagResource.html) API action.
	//  You must set this to a value other than ``NONE`` when you use Cost Explorer. For more information, see [Amazon ECS usage reports](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/usage-reports.html) in the *Amazon Elastic Container Service Developer Guide*.
	//  The default is ``NONE``.
	PropagateTags *ServicePropagateTags `pulumi:"propagateTags"`
	// Not currently supported in AWS CloudFormation .
	ServiceArn *string `pulumi:"serviceArn"`
	// The details of the service discovery registry to associate with this service. For more information, see [Service discovery](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html).
	//   Each service may be associated with one service registry. Multiple service registries for each service isn't supported.
	ServiceRegistries []ServiceRegistry `pulumi:"serviceRegistries"`
	// The metadata that you apply to the service to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. When a service is deleted, the tags are deleted as well.
	//  The following basic restrictions apply to tags:
	//   +  Maximum number of tags per resource - 50
	//   +  For each resource, each tag key must be unique, and each tag key can have only one value.
	//   +  Maximum key length - 128 Unicode characters in UTF-8
	//   +  Maximum value length - 256 Unicode characters in UTF-8
	//   +  If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
	//   +  Tag keys and values are case-sensitive.
	//   +  Do not use ``aws:``, ``AWS:``, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
	Tags []aws.Tag `pulumi:"tags"`
	// The ``family`` and ``revision`` (``family:revision``) or full ARN of the task definition to run in your service. If a ``revision`` isn't specified, the latest ``ACTIVE`` revision is used.
	//  A task definition must be specified if the service uses either the ``ECS`` or ``CODE_DEPLOY`` deployment controllers.
	//  For more information about deployment types, see [Amazon ECS deployment types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html).
	TaskDefinition *string `pulumi:"taskDefinition"`
}

func LookupServiceOutput(ctx *pulumi.Context, args LookupServiceOutputArgs, opts ...pulumi.InvokeOption) LookupServiceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupServiceResultOutput, error) {
			args := v.(LookupServiceArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupServiceResult
			secret, err := ctx.InvokePackageRaw("aws-native:ecs:getService", args, &rv, "", opts...)
			if err != nil {
				return LookupServiceResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupServiceResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupServiceResultOutput), nil
			}
			return output, nil
		}).(LookupServiceResultOutput)
}

type LookupServiceOutputArgs struct {
	// The short name or full Amazon Resource Name (ARN) of the cluster that you run your service on. If you do not specify a cluster, the default cluster is assumed.
	Cluster pulumi.StringInput `pulumi:"cluster"`
	// Not currently supported in AWS CloudFormation .
	ServiceArn pulumi.StringInput `pulumi:"serviceArn"`
}

func (LookupServiceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServiceArgs)(nil)).Elem()
}

type LookupServiceResultOutput struct{ *pulumi.OutputState }

func (LookupServiceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServiceResult)(nil)).Elem()
}

func (o LookupServiceResultOutput) ToLookupServiceResultOutput() LookupServiceResultOutput {
	return o
}

func (o LookupServiceResultOutput) ToLookupServiceResultOutputWithContext(ctx context.Context) LookupServiceResultOutput {
	return o
}

// The capacity provider strategy to use for the service.
//
//	If a ``capacityProviderStrategy`` is specified, the ``launchType`` parameter must be omitted. If no ``capacityProviderStrategy`` or ``launchType`` is specified, the ``defaultCapacityProviderStrategy`` for the cluster is used.
//	A capacity provider strategy may contain a maximum of 6 capacity providers.
func (o LookupServiceResultOutput) CapacityProviderStrategy() ServiceCapacityProviderStrategyItemArrayOutput {
	return o.ApplyT(func(v LookupServiceResult) []ServiceCapacityProviderStrategyItem { return v.CapacityProviderStrategy }).(ServiceCapacityProviderStrategyItemArrayOutput)
}

// Optional deployment parameters that control how many tasks run during the deployment and the ordering of stopping and starting tasks.
func (o LookupServiceResultOutput) DeploymentConfiguration() ServiceDeploymentConfigurationPtrOutput {
	return o.ApplyT(func(v LookupServiceResult) *ServiceDeploymentConfiguration { return v.DeploymentConfiguration }).(ServiceDeploymentConfigurationPtrOutput)
}

// The number of instantiations of the specified task definition to place and keep running in your service.
//
//	For new services, if a desired count is not specified, a default value of ``1`` is used. When using the ``DAEMON`` scheduling strategy, the desired count is not required.
//	For existing services, if a desired count is not specified, it is omitted from the operation.
func (o LookupServiceResultOutput) DesiredCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupServiceResult) *int { return v.DesiredCount }).(pulumi.IntPtrOutput)
}

// Specifies whether to turn on Amazon ECS managed tags for the tasks within the service. For more information, see [Tagging your Amazon ECS resources](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html) in the *Amazon Elastic Container Service Developer Guide*.
//
//	When you use Amazon ECS managed tags, you need to set the ``propagateTags`` request parameter.
func (o LookupServiceResultOutput) EnableEcsManagedTags() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupServiceResult) *bool { return v.EnableEcsManagedTags }).(pulumi.BoolPtrOutput)
}

// Determines whether the execute command functionality is turned on for the service. If “true“, the execute command functionality is turned on for all containers in tasks as part of the service.
func (o LookupServiceResultOutput) EnableExecuteCommand() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupServiceResult) *bool { return v.EnableExecuteCommand }).(pulumi.BoolPtrOutput)
}

// The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy Elastic Load Balancing target health checks after a task has first started. This is only used when your service is configured to use a load balancer. If your service has a load balancer defined and you don't specify a health check grace period value, the default value of “0“ is used.
//
//	If you do not use an Elastic Load Balancing, we recommend that you use the ``startPeriod`` in the task definition health check parameters. For more information, see [Health check](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_HealthCheck.html).
//	If your service's tasks take a while to start and respond to Elastic Load Balancing health checks, you can specify a health check grace period of up to 2,147,483,647 seconds (about 69 years). During that time, the Amazon ECS service scheduler ignores health check status. This grace period can prevent the service scheduler from marking tasks as unhealthy and stopping them before they have time to come up.
func (o LookupServiceResultOutput) HealthCheckGracePeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupServiceResult) *int { return v.HealthCheckGracePeriodSeconds }).(pulumi.IntPtrOutput)
}

// A list of load balancer objects to associate with the service. If you specify the “Role“ property, “LoadBalancers“ must be specified as well. For information about the number of load balancers that you can specify per service, see [Service Load Balancing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-load-balancing.html) in the *Amazon Elastic Container Service Developer Guide*.
func (o LookupServiceResultOutput) LoadBalancers() ServiceLoadBalancerArrayOutput {
	return o.ApplyT(func(v LookupServiceResult) []ServiceLoadBalancer { return v.LoadBalancers }).(ServiceLoadBalancerArrayOutput)
}

// The name of the Amazon ECS service, such as `sample-webapp` .
func (o LookupServiceResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupServiceResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The network configuration for the service. This parameter is required for task definitions that use the “awsvpc“ network mode to receive their own elastic network interface, and it is not supported for other network modes. For more information, see [Task Networking](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html) in the *Amazon Elastic Container Service Developer Guide*.
func (o LookupServiceResultOutput) NetworkConfiguration() ServiceNetworkConfigurationPtrOutput {
	return o.ApplyT(func(v LookupServiceResult) *ServiceNetworkConfiguration { return v.NetworkConfiguration }).(ServiceNetworkConfigurationPtrOutput)
}

// An array of placement constraint objects to use for tasks in your service. You can specify a maximum of 10 constraints for each task. This limit includes constraints in the task definition and those specified at runtime.
func (o LookupServiceResultOutput) PlacementConstraints() ServicePlacementConstraintArrayOutput {
	return o.ApplyT(func(v LookupServiceResult) []ServicePlacementConstraint { return v.PlacementConstraints }).(ServicePlacementConstraintArrayOutput)
}

// The placement strategy objects to use for tasks in your service. You can specify a maximum of 5 strategy rules for each service.
func (o LookupServiceResultOutput) PlacementStrategies() ServicePlacementStrategyArrayOutput {
	return o.ApplyT(func(v LookupServiceResult) []ServicePlacementStrategy { return v.PlacementStrategies }).(ServicePlacementStrategyArrayOutput)
}

// The platform version that your tasks in the service are running on. A platform version is specified only for tasks using the Fargate launch type. If one isn't specified, the “LATEST“ platform version is used. For more information, see [platform versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html) in the *Amazon Elastic Container Service Developer Guide*.
func (o LookupServiceResultOutput) PlatformVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupServiceResult) *string { return v.PlatformVersion }).(pulumi.StringPtrOutput)
}

// Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags aren't propagated. Tags can only be propagated to the task during task creation. To add tags to a task after task creation, use the [TagResource](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_TagResource.html) API action.
//
//	You must set this to a value other than ``NONE`` when you use Cost Explorer. For more information, see [Amazon ECS usage reports](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/usage-reports.html) in the *Amazon Elastic Container Service Developer Guide*.
//	The default is ``NONE``.
func (o LookupServiceResultOutput) PropagateTags() ServicePropagateTagsPtrOutput {
	return o.ApplyT(func(v LookupServiceResult) *ServicePropagateTags { return v.PropagateTags }).(ServicePropagateTagsPtrOutput)
}

// Not currently supported in AWS CloudFormation .
func (o LookupServiceResultOutput) ServiceArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupServiceResult) *string { return v.ServiceArn }).(pulumi.StringPtrOutput)
}

// The details of the service discovery registry to associate with this service. For more information, see [Service discovery](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html).
//
//	Each service may be associated with one service registry. Multiple service registries for each service isn't supported.
func (o LookupServiceResultOutput) ServiceRegistries() ServiceRegistryArrayOutput {
	return o.ApplyT(func(v LookupServiceResult) []ServiceRegistry { return v.ServiceRegistries }).(ServiceRegistryArrayOutput)
}

// The metadata that you apply to the service to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. When a service is deleted, the tags are deleted as well.
//
//	The following basic restrictions apply to tags:
//	 +  Maximum number of tags per resource - 50
//	 +  For each resource, each tag key must be unique, and each tag key can have only one value.
//	 +  Maximum key length - 128 Unicode characters in UTF-8
//	 +  Maximum value length - 256 Unicode characters in UTF-8
//	 +  If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
//	 +  Tag keys and values are case-sensitive.
//	 +  Do not use ``aws:``, ``AWS:``, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
func (o LookupServiceResultOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v LookupServiceResult) []aws.Tag { return v.Tags }).(aws.TagArrayOutput)
}

// The “family“ and “revision“ (“family:revision“) or full ARN of the task definition to run in your service. If a “revision“ isn't specified, the latest “ACTIVE“ revision is used.
//
//	A task definition must be specified if the service uses either the ``ECS`` or ``CODE_DEPLOY`` deployment controllers.
//	For more information about deployment types, see [Amazon ECS deployment types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html).
func (o LookupServiceResultOutput) TaskDefinition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupServiceResult) *string { return v.TaskDefinition }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupServiceResultOutput{})
}
