// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Create a task set in the specified cluster and service. This is used when a service uses the EXTERNAL deployment controller type. For more information, see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.htmlin the Amazon Elastic Container Service Developer Guide.
func LookupTaskSet(ctx *pulumi.Context, args *LookupTaskSetArgs, opts ...pulumi.InvokeOption) (*LookupTaskSetResult, error) {
	var rv LookupTaskSetResult
	err := ctx.Invoke("aws-native:ecs:getTaskSet", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupTaskSetArgs struct {
	// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service to create the task set in.
	Cluster string `pulumi:"cluster"`
	// The ID of the task set.
	Id string `pulumi:"id"`
	// The short name or full Amazon Resource Name (ARN) of the service to create the task set in.
	Service string `pulumi:"service"`
}

type LookupTaskSetResult struct {
	// The ID of the task set.
	Id *string `pulumi:"id"`
	// A floating-point percentage of the desired number of tasks to place and keep running in the task set.
	Scale *TaskSetScale `pulumi:"scale"`
}

func LookupTaskSetOutput(ctx *pulumi.Context, args LookupTaskSetOutputArgs, opts ...pulumi.InvokeOption) LookupTaskSetResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupTaskSetResult, error) {
			args := v.(LookupTaskSetArgs)
			r, err := LookupTaskSet(ctx, &args, opts...)
			var s LookupTaskSetResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupTaskSetResultOutput)
}

type LookupTaskSetOutputArgs struct {
	// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service to create the task set in.
	Cluster pulumi.StringInput `pulumi:"cluster"`
	// The ID of the task set.
	Id pulumi.StringInput `pulumi:"id"`
	// The short name or full Amazon Resource Name (ARN) of the service to create the task set in.
	Service pulumi.StringInput `pulumi:"service"`
}

func (LookupTaskSetOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTaskSetArgs)(nil)).Elem()
}

type LookupTaskSetResultOutput struct{ *pulumi.OutputState }

func (LookupTaskSetResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTaskSetResult)(nil)).Elem()
}

func (o LookupTaskSetResultOutput) ToLookupTaskSetResultOutput() LookupTaskSetResultOutput {
	return o
}

func (o LookupTaskSetResultOutput) ToLookupTaskSetResultOutputWithContext(ctx context.Context) LookupTaskSetResultOutput {
	return o
}

// The ID of the task set.
func (o LookupTaskSetResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTaskSetResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A floating-point percentage of the desired number of tasks to place and keep running in the task set.
func (o LookupTaskSetResultOutput) Scale() TaskSetScalePtrOutput {
	return o.ApplyT(func(v LookupTaskSetResult) *TaskSetScale { return v.Scale }).(TaskSetScalePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTaskSetResultOutput{})
}
