// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A pseudo-resource that manages which of your ECS task sets is primary.
type PrimaryTaskSet struct {
	pulumi.CustomResourceState

	// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service to create the task set in.
	Cluster pulumi.StringOutput `pulumi:"cluster"`
	// The short name or full Amazon Resource Name (ARN) of the service to create the task set in.
	Service pulumi.StringOutput `pulumi:"service"`
	// The ID or full Amazon Resource Name (ARN) of the task set.
	TaskSetId pulumi.StringOutput `pulumi:"taskSetId"`
}

// NewPrimaryTaskSet registers a new resource with the given unique name, arguments, and options.
func NewPrimaryTaskSet(ctx *pulumi.Context,
	name string, args *PrimaryTaskSetArgs, opts ...pulumi.ResourceOption) (*PrimaryTaskSet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Cluster == nil {
		return nil, errors.New("invalid value for required argument 'Cluster'")
	}
	if args.Service == nil {
		return nil, errors.New("invalid value for required argument 'Service'")
	}
	if args.TaskSetId == nil {
		return nil, errors.New("invalid value for required argument 'TaskSetId'")
	}
	var resource PrimaryTaskSet
	err := ctx.RegisterResource("aws-native:ecs:PrimaryTaskSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPrimaryTaskSet gets an existing PrimaryTaskSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrimaryTaskSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PrimaryTaskSetState, opts ...pulumi.ResourceOption) (*PrimaryTaskSet, error) {
	var resource PrimaryTaskSet
	err := ctx.ReadResource("aws-native:ecs:PrimaryTaskSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PrimaryTaskSet resources.
type primaryTaskSetState struct {
}

type PrimaryTaskSetState struct {
}

func (PrimaryTaskSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*primaryTaskSetState)(nil)).Elem()
}

type primaryTaskSetArgs struct {
	// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service to create the task set in.
	Cluster string `pulumi:"cluster"`
	// The short name or full Amazon Resource Name (ARN) of the service to create the task set in.
	Service string `pulumi:"service"`
	// The ID or full Amazon Resource Name (ARN) of the task set.
	TaskSetId string `pulumi:"taskSetId"`
}

// The set of arguments for constructing a PrimaryTaskSet resource.
type PrimaryTaskSetArgs struct {
	// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service to create the task set in.
	Cluster pulumi.StringInput
	// The short name or full Amazon Resource Name (ARN) of the service to create the task set in.
	Service pulumi.StringInput
	// The ID or full Amazon Resource Name (ARN) of the task set.
	TaskSetId pulumi.StringInput
}

func (PrimaryTaskSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*primaryTaskSetArgs)(nil)).Elem()
}

type PrimaryTaskSetInput interface {
	pulumi.Input

	ToPrimaryTaskSetOutput() PrimaryTaskSetOutput
	ToPrimaryTaskSetOutputWithContext(ctx context.Context) PrimaryTaskSetOutput
}

func (*PrimaryTaskSet) ElementType() reflect.Type {
	return reflect.TypeOf((*PrimaryTaskSet)(nil))
}

func (i *PrimaryTaskSet) ToPrimaryTaskSetOutput() PrimaryTaskSetOutput {
	return i.ToPrimaryTaskSetOutputWithContext(context.Background())
}

func (i *PrimaryTaskSet) ToPrimaryTaskSetOutputWithContext(ctx context.Context) PrimaryTaskSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrimaryTaskSetOutput)
}

type PrimaryTaskSetOutput struct{ *pulumi.OutputState }

func (PrimaryTaskSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrimaryTaskSet)(nil))
}

func (o PrimaryTaskSetOutput) ToPrimaryTaskSetOutput() PrimaryTaskSetOutput {
	return o
}

func (o PrimaryTaskSetOutput) ToPrimaryTaskSetOutputWithContext(ctx context.Context) PrimaryTaskSetOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(PrimaryTaskSetOutput{})
}
