// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Create a task set in the specified cluster and service. This is used when a service uses the EXTERNAL deployment controller type. For more information, see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.htmlin the Amazon Elastic Container Service Developer Guide.
type TaskSet struct {
	pulumi.CustomResourceState

	// The ID of the task set.
	AwsId pulumi.StringOutput `pulumi:"awsId"`
	// The capacity provider strategy that are associated with the task set.
	CapacityProviderStrategy TaskSetCapacityProviderStrategyItemArrayOutput `pulumi:"capacityProviderStrategy"`
	// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service to create the task set in.
	Cluster pulumi.StringOutput `pulumi:"cluster"`
	// An optional non-unique tag that identifies this task set in external systems. If the task set is associated with a service discovery registry, the tasks in this task set will have the ECS_TASK_SET_EXTERNAL_ID AWS Cloud Map attribute set to the provided value.
	ExternalId pulumi.StringPtrOutput `pulumi:"externalId"`
	// The launch type that new tasks in the task set will use. For more information, see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html in the Amazon Elastic Container Service Developer Guide.
	LaunchType TaskSetLaunchTypePtrOutput `pulumi:"launchType"`
	// A load balancer object representing the load balancer to use with the task set. The supported load balancer types are either an Application Load Balancer or a Network Load Balancer.
	LoadBalancers TaskSetLoadBalancerArrayOutput `pulumi:"loadBalancers"`
	// The network configuration for the task set.
	NetworkConfiguration TaskSetNetworkConfigurationPtrOutput `pulumi:"networkConfiguration"`
	// The platform version that the tasks in the task set should use. A platform version is specified only for tasks using the Fargate launch type. If one isn't specified, the LATEST platform version is used by default.
	PlatformVersion pulumi.StringPtrOutput `pulumi:"platformVersion"`
	// A floating-point percentage of the desired number of tasks to place and keep running in the task set.
	Scale TaskSetScalePtrOutput `pulumi:"scale"`
	// The short name or full Amazon Resource Name (ARN) of the service to create the task set in.
	Service pulumi.StringOutput `pulumi:"service"`
	// The details of the service discovery registries to assign to this task set. For more information, see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html.
	ServiceRegistries TaskSetServiceRegistryArrayOutput `pulumi:"serviceRegistries"`
	// The metadata that you apply to the task set to help you categorize and organize them. Each tag consists of a key and an optional value. You define both.
	//
	// The following basic restrictions apply to tags:
	//
	// - Maximum number of tags per resource - 50
	// - For each resource, each tag key must be unique, and each tag key can have only one value.
	// - Maximum key length - 128 Unicode characters in UTF-8
	// - Maximum value length - 256 Unicode characters in UTF-8
	// - If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
	// - Tag keys and values are case-sensitive.
	// - Do not use `aws:` , `AWS:` , or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
	Tags aws.TagArrayOutput `pulumi:"tags"`
	// The short name or full Amazon Resource Name (ARN) of the task definition for the tasks in the task set to use.
	TaskDefinition pulumi.StringOutput `pulumi:"taskDefinition"`
}

// NewTaskSet registers a new resource with the given unique name, arguments, and options.
func NewTaskSet(ctx *pulumi.Context,
	name string, args *TaskSetArgs, opts ...pulumi.ResourceOption) (*TaskSet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Cluster == nil {
		return nil, errors.New("invalid value for required argument 'Cluster'")
	}
	if args.Service == nil {
		return nil, errors.New("invalid value for required argument 'Service'")
	}
	if args.TaskDefinition == nil {
		return nil, errors.New("invalid value for required argument 'TaskDefinition'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"capacityProviderStrategy[*]",
		"cluster",
		"externalId",
		"launchType",
		"loadBalancers[*]",
		"networkConfiguration",
		"platformVersion",
		"service",
		"serviceRegistries[*]",
		"taskDefinition",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TaskSet
	err := ctx.RegisterResource("aws-native:ecs:TaskSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTaskSet gets an existing TaskSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTaskSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TaskSetState, opts ...pulumi.ResourceOption) (*TaskSet, error) {
	var resource TaskSet
	err := ctx.ReadResource("aws-native:ecs:TaskSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TaskSet resources.
type taskSetState struct {
}

type TaskSetState struct {
}

func (TaskSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*taskSetState)(nil)).Elem()
}

type taskSetArgs struct {
	// The capacity provider strategy that are associated with the task set.
	CapacityProviderStrategy []TaskSetCapacityProviderStrategyItem `pulumi:"capacityProviderStrategy"`
	// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service to create the task set in.
	Cluster string `pulumi:"cluster"`
	// An optional non-unique tag that identifies this task set in external systems. If the task set is associated with a service discovery registry, the tasks in this task set will have the ECS_TASK_SET_EXTERNAL_ID AWS Cloud Map attribute set to the provided value.
	ExternalId *string `pulumi:"externalId"`
	// The launch type that new tasks in the task set will use. For more information, see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html in the Amazon Elastic Container Service Developer Guide.
	LaunchType *TaskSetLaunchType `pulumi:"launchType"`
	// A load balancer object representing the load balancer to use with the task set. The supported load balancer types are either an Application Load Balancer or a Network Load Balancer.
	LoadBalancers []TaskSetLoadBalancer `pulumi:"loadBalancers"`
	// The network configuration for the task set.
	NetworkConfiguration *TaskSetNetworkConfiguration `pulumi:"networkConfiguration"`
	// The platform version that the tasks in the task set should use. A platform version is specified only for tasks using the Fargate launch type. If one isn't specified, the LATEST platform version is used by default.
	PlatformVersion *string `pulumi:"platformVersion"`
	// A floating-point percentage of the desired number of tasks to place and keep running in the task set.
	Scale *TaskSetScale `pulumi:"scale"`
	// The short name or full Amazon Resource Name (ARN) of the service to create the task set in.
	Service string `pulumi:"service"`
	// The details of the service discovery registries to assign to this task set. For more information, see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html.
	ServiceRegistries []TaskSetServiceRegistry `pulumi:"serviceRegistries"`
	// The metadata that you apply to the task set to help you categorize and organize them. Each tag consists of a key and an optional value. You define both.
	//
	// The following basic restrictions apply to tags:
	//
	// - Maximum number of tags per resource - 50
	// - For each resource, each tag key must be unique, and each tag key can have only one value.
	// - Maximum key length - 128 Unicode characters in UTF-8
	// - Maximum value length - 256 Unicode characters in UTF-8
	// - If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
	// - Tag keys and values are case-sensitive.
	// - Do not use `aws:` , `AWS:` , or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
	Tags []aws.Tag `pulumi:"tags"`
	// The short name or full Amazon Resource Name (ARN) of the task definition for the tasks in the task set to use.
	TaskDefinition string `pulumi:"taskDefinition"`
}

// The set of arguments for constructing a TaskSet resource.
type TaskSetArgs struct {
	// The capacity provider strategy that are associated with the task set.
	CapacityProviderStrategy TaskSetCapacityProviderStrategyItemArrayInput
	// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service to create the task set in.
	Cluster pulumi.StringInput
	// An optional non-unique tag that identifies this task set in external systems. If the task set is associated with a service discovery registry, the tasks in this task set will have the ECS_TASK_SET_EXTERNAL_ID AWS Cloud Map attribute set to the provided value.
	ExternalId pulumi.StringPtrInput
	// The launch type that new tasks in the task set will use. For more information, see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html in the Amazon Elastic Container Service Developer Guide.
	LaunchType TaskSetLaunchTypePtrInput
	// A load balancer object representing the load balancer to use with the task set. The supported load balancer types are either an Application Load Balancer or a Network Load Balancer.
	LoadBalancers TaskSetLoadBalancerArrayInput
	// The network configuration for the task set.
	NetworkConfiguration TaskSetNetworkConfigurationPtrInput
	// The platform version that the tasks in the task set should use. A platform version is specified only for tasks using the Fargate launch type. If one isn't specified, the LATEST platform version is used by default.
	PlatformVersion pulumi.StringPtrInput
	// A floating-point percentage of the desired number of tasks to place and keep running in the task set.
	Scale TaskSetScalePtrInput
	// The short name or full Amazon Resource Name (ARN) of the service to create the task set in.
	Service pulumi.StringInput
	// The details of the service discovery registries to assign to this task set. For more information, see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html.
	ServiceRegistries TaskSetServiceRegistryArrayInput
	// The metadata that you apply to the task set to help you categorize and organize them. Each tag consists of a key and an optional value. You define both.
	//
	// The following basic restrictions apply to tags:
	//
	// - Maximum number of tags per resource - 50
	// - For each resource, each tag key must be unique, and each tag key can have only one value.
	// - Maximum key length - 128 Unicode characters in UTF-8
	// - Maximum value length - 256 Unicode characters in UTF-8
	// - If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
	// - Tag keys and values are case-sensitive.
	// - Do not use `aws:` , `AWS:` , or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
	Tags aws.TagArrayInput
	// The short name or full Amazon Resource Name (ARN) of the task definition for the tasks in the task set to use.
	TaskDefinition pulumi.StringInput
}

func (TaskSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*taskSetArgs)(nil)).Elem()
}

type TaskSetInput interface {
	pulumi.Input

	ToTaskSetOutput() TaskSetOutput
	ToTaskSetOutputWithContext(ctx context.Context) TaskSetOutput
}

func (*TaskSet) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskSet)(nil)).Elem()
}

func (i *TaskSet) ToTaskSetOutput() TaskSetOutput {
	return i.ToTaskSetOutputWithContext(context.Background())
}

func (i *TaskSet) ToTaskSetOutputWithContext(ctx context.Context) TaskSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSetOutput)
}

type TaskSetOutput struct{ *pulumi.OutputState }

func (TaskSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskSet)(nil)).Elem()
}

func (o TaskSetOutput) ToTaskSetOutput() TaskSetOutput {
	return o
}

func (o TaskSetOutput) ToTaskSetOutputWithContext(ctx context.Context) TaskSetOutput {
	return o
}

// The ID of the task set.
func (o TaskSetOutput) AwsId() pulumi.StringOutput {
	return o.ApplyT(func(v *TaskSet) pulumi.StringOutput { return v.AwsId }).(pulumi.StringOutput)
}

// The capacity provider strategy that are associated with the task set.
func (o TaskSetOutput) CapacityProviderStrategy() TaskSetCapacityProviderStrategyItemArrayOutput {
	return o.ApplyT(func(v *TaskSet) TaskSetCapacityProviderStrategyItemArrayOutput { return v.CapacityProviderStrategy }).(TaskSetCapacityProviderStrategyItemArrayOutput)
}

// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service to create the task set in.
func (o TaskSetOutput) Cluster() pulumi.StringOutput {
	return o.ApplyT(func(v *TaskSet) pulumi.StringOutput { return v.Cluster }).(pulumi.StringOutput)
}

// An optional non-unique tag that identifies this task set in external systems. If the task set is associated with a service discovery registry, the tasks in this task set will have the ECS_TASK_SET_EXTERNAL_ID AWS Cloud Map attribute set to the provided value.
func (o TaskSetOutput) ExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskSet) pulumi.StringPtrOutput { return v.ExternalId }).(pulumi.StringPtrOutput)
}

// The launch type that new tasks in the task set will use. For more information, see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html in the Amazon Elastic Container Service Developer Guide.
func (o TaskSetOutput) LaunchType() TaskSetLaunchTypePtrOutput {
	return o.ApplyT(func(v *TaskSet) TaskSetLaunchTypePtrOutput { return v.LaunchType }).(TaskSetLaunchTypePtrOutput)
}

// A load balancer object representing the load balancer to use with the task set. The supported load balancer types are either an Application Load Balancer or a Network Load Balancer.
func (o TaskSetOutput) LoadBalancers() TaskSetLoadBalancerArrayOutput {
	return o.ApplyT(func(v *TaskSet) TaskSetLoadBalancerArrayOutput { return v.LoadBalancers }).(TaskSetLoadBalancerArrayOutput)
}

// The network configuration for the task set.
func (o TaskSetOutput) NetworkConfiguration() TaskSetNetworkConfigurationPtrOutput {
	return o.ApplyT(func(v *TaskSet) TaskSetNetworkConfigurationPtrOutput { return v.NetworkConfiguration }).(TaskSetNetworkConfigurationPtrOutput)
}

// The platform version that the tasks in the task set should use. A platform version is specified only for tasks using the Fargate launch type. If one isn't specified, the LATEST platform version is used by default.
func (o TaskSetOutput) PlatformVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskSet) pulumi.StringPtrOutput { return v.PlatformVersion }).(pulumi.StringPtrOutput)
}

// A floating-point percentage of the desired number of tasks to place and keep running in the task set.
func (o TaskSetOutput) Scale() TaskSetScalePtrOutput {
	return o.ApplyT(func(v *TaskSet) TaskSetScalePtrOutput { return v.Scale }).(TaskSetScalePtrOutput)
}

// The short name or full Amazon Resource Name (ARN) of the service to create the task set in.
func (o TaskSetOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v *TaskSet) pulumi.StringOutput { return v.Service }).(pulumi.StringOutput)
}

// The details of the service discovery registries to assign to this task set. For more information, see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html.
func (o TaskSetOutput) ServiceRegistries() TaskSetServiceRegistryArrayOutput {
	return o.ApplyT(func(v *TaskSet) TaskSetServiceRegistryArrayOutput { return v.ServiceRegistries }).(TaskSetServiceRegistryArrayOutput)
}

// The metadata that you apply to the task set to help you categorize and organize them. Each tag consists of a key and an optional value. You define both.
//
// The following basic restrictions apply to tags:
//
// - Maximum number of tags per resource - 50
// - For each resource, each tag key must be unique, and each tag key can have only one value.
// - Maximum key length - 128 Unicode characters in UTF-8
// - Maximum value length - 256 Unicode characters in UTF-8
// - If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
// - Tag keys and values are case-sensitive.
// - Do not use `aws:` , `AWS:` , or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
func (o TaskSetOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *TaskSet) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

// The short name or full Amazon Resource Name (ARN) of the task definition for the tasks in the task set to use.
func (o TaskSetOutput) TaskDefinition() pulumi.StringOutput {
	return o.ApplyT(func(v *TaskSet) pulumi.StringOutput { return v.TaskDefinition }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TaskSetInput)(nil)).Elem(), &TaskSet{})
	pulumi.RegisterOutputType(TaskSetOutput{})
}
