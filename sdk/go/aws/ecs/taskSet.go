// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Create a task set in the specified cluster and service. This is used when a service uses the EXTERNAL deployment controller type. For more information, see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.htmlin the Amazon Elastic Container Service Developer Guide.
type TaskSet struct {
	pulumi.CustomResourceState

	// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service to create the task set in.
	Cluster pulumi.StringOutput `pulumi:"cluster"`
	// An optional non-unique tag that identifies this task set in external systems. If the task set is associated with a service discovery registry, the tasks in this task set will have the ECS_TASK_SET_EXTERNAL_ID AWS Cloud Map attribute set to the provided value.
	ExternalId pulumi.StringPtrOutput `pulumi:"externalId"`
	// The launch type that new tasks in the task set will use. For more information, see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html in the Amazon Elastic Container Service Developer Guide.
	LaunchType           TaskSetLaunchTypePtrOutput           `pulumi:"launchType"`
	LoadBalancers        TaskSetLoadBalancerArrayOutput       `pulumi:"loadBalancers"`
	NetworkConfiguration TaskSetNetworkConfigurationPtrOutput `pulumi:"networkConfiguration"`
	// The platform version that the tasks in the task set should use. A platform version is specified only for tasks using the Fargate launch type. If one isn't specified, the LATEST platform version is used by default.
	PlatformVersion pulumi.StringPtrOutput `pulumi:"platformVersion"`
	// A floating-point percentage of the desired number of tasks to place and keep running in the task set.
	Scale TaskSetScalePtrOutput `pulumi:"scale"`
	// The short name or full Amazon Resource Name (ARN) of the service to create the task set in.
	Service pulumi.StringOutput `pulumi:"service"`
	// The details of the service discovery registries to assign to this task set. For more information, see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html.
	ServiceRegistries TaskSetServiceRegistryArrayOutput `pulumi:"serviceRegistries"`
	// The short name or full Amazon Resource Name (ARN) of the task definition for the tasks in the task set to use.
	TaskDefinition pulumi.StringOutput `pulumi:"taskDefinition"`
}

// NewTaskSet registers a new resource with the given unique name, arguments, and options.
func NewTaskSet(ctx *pulumi.Context,
	name string, args *TaskSetArgs, opts ...pulumi.ResourceOption) (*TaskSet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Cluster == nil {
		return nil, errors.New("invalid value for required argument 'Cluster'")
	}
	if args.Service == nil {
		return nil, errors.New("invalid value for required argument 'Service'")
	}
	if args.TaskDefinition == nil {
		return nil, errors.New("invalid value for required argument 'TaskDefinition'")
	}
	var resource TaskSet
	err := ctx.RegisterResource("aws-native:ecs:TaskSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTaskSet gets an existing TaskSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTaskSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TaskSetState, opts ...pulumi.ResourceOption) (*TaskSet, error) {
	var resource TaskSet
	err := ctx.ReadResource("aws-native:ecs:TaskSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TaskSet resources.
type taskSetState struct {
}

type TaskSetState struct {
}

func (TaskSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*taskSetState)(nil)).Elem()
}

type taskSetArgs struct {
	// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service to create the task set in.
	Cluster string `pulumi:"cluster"`
	// An optional non-unique tag that identifies this task set in external systems. If the task set is associated with a service discovery registry, the tasks in this task set will have the ECS_TASK_SET_EXTERNAL_ID AWS Cloud Map attribute set to the provided value.
	ExternalId *string `pulumi:"externalId"`
	// The launch type that new tasks in the task set will use. For more information, see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html in the Amazon Elastic Container Service Developer Guide.
	LaunchType           *TaskSetLaunchType           `pulumi:"launchType"`
	LoadBalancers        []TaskSetLoadBalancer        `pulumi:"loadBalancers"`
	NetworkConfiguration *TaskSetNetworkConfiguration `pulumi:"networkConfiguration"`
	// The platform version that the tasks in the task set should use. A platform version is specified only for tasks using the Fargate launch type. If one isn't specified, the LATEST platform version is used by default.
	PlatformVersion *string `pulumi:"platformVersion"`
	// A floating-point percentage of the desired number of tasks to place and keep running in the task set.
	Scale *TaskSetScale `pulumi:"scale"`
	// The short name or full Amazon Resource Name (ARN) of the service to create the task set in.
	Service string `pulumi:"service"`
	// The details of the service discovery registries to assign to this task set. For more information, see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html.
	ServiceRegistries []TaskSetServiceRegistry `pulumi:"serviceRegistries"`
	// The short name or full Amazon Resource Name (ARN) of the task definition for the tasks in the task set to use.
	TaskDefinition string `pulumi:"taskDefinition"`
}

// The set of arguments for constructing a TaskSet resource.
type TaskSetArgs struct {
	// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service to create the task set in.
	Cluster pulumi.StringInput
	// An optional non-unique tag that identifies this task set in external systems. If the task set is associated with a service discovery registry, the tasks in this task set will have the ECS_TASK_SET_EXTERNAL_ID AWS Cloud Map attribute set to the provided value.
	ExternalId pulumi.StringPtrInput
	// The launch type that new tasks in the task set will use. For more information, see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html in the Amazon Elastic Container Service Developer Guide.
	LaunchType           TaskSetLaunchTypePtrInput
	LoadBalancers        TaskSetLoadBalancerArrayInput
	NetworkConfiguration TaskSetNetworkConfigurationPtrInput
	// The platform version that the tasks in the task set should use. A platform version is specified only for tasks using the Fargate launch type. If one isn't specified, the LATEST platform version is used by default.
	PlatformVersion pulumi.StringPtrInput
	// A floating-point percentage of the desired number of tasks to place and keep running in the task set.
	Scale TaskSetScalePtrInput
	// The short name or full Amazon Resource Name (ARN) of the service to create the task set in.
	Service pulumi.StringInput
	// The details of the service discovery registries to assign to this task set. For more information, see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html.
	ServiceRegistries TaskSetServiceRegistryArrayInput
	// The short name or full Amazon Resource Name (ARN) of the task definition for the tasks in the task set to use.
	TaskDefinition pulumi.StringInput
}

func (TaskSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*taskSetArgs)(nil)).Elem()
}

type TaskSetInput interface {
	pulumi.Input

	ToTaskSetOutput() TaskSetOutput
	ToTaskSetOutputWithContext(ctx context.Context) TaskSetOutput
}

func (*TaskSet) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSet)(nil))
}

func (i *TaskSet) ToTaskSetOutput() TaskSetOutput {
	return i.ToTaskSetOutputWithContext(context.Background())
}

func (i *TaskSet) ToTaskSetOutputWithContext(ctx context.Context) TaskSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSetOutput)
}

type TaskSetOutput struct{ *pulumi.OutputState }

func (TaskSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSet)(nil))
}

func (o TaskSetOutput) ToTaskSetOutput() TaskSetOutput {
	return o
}

func (o TaskSetOutput) ToTaskSetOutputWithContext(ctx context.Context) TaskSetOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TaskSetInput)(nil)).Elem(), &TaskSet{})
	pulumi.RegisterOutputType(TaskSetOutput{})
}
