// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A pseudo-resource that manages which of your ECS task sets is primary.
func LookupPrimaryTaskSet(ctx *pulumi.Context, args *LookupPrimaryTaskSetArgs, opts ...pulumi.InvokeOption) (*LookupPrimaryTaskSetResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPrimaryTaskSetResult
	err := ctx.Invoke("aws-native:ecs:getPrimaryTaskSet", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupPrimaryTaskSetArgs struct {
	// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service to create the task set in.
	Cluster string `pulumi:"cluster"`
	// The short name or full Amazon Resource Name (ARN) of the service to create the task set in.
	Service string `pulumi:"service"`
}

type LookupPrimaryTaskSetResult struct {
	// The ID or full Amazon Resource Name (ARN) of the task set.
	TaskSetId *string `pulumi:"taskSetId"`
}

func LookupPrimaryTaskSetOutput(ctx *pulumi.Context, args LookupPrimaryTaskSetOutputArgs, opts ...pulumi.InvokeOption) LookupPrimaryTaskSetResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupPrimaryTaskSetResultOutput, error) {
			args := v.(LookupPrimaryTaskSetArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:ecs:getPrimaryTaskSet", args, LookupPrimaryTaskSetResultOutput{}, options).(LookupPrimaryTaskSetResultOutput), nil
		}).(LookupPrimaryTaskSetResultOutput)
}

type LookupPrimaryTaskSetOutputArgs struct {
	// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service to create the task set in.
	Cluster pulumi.StringInput `pulumi:"cluster"`
	// The short name or full Amazon Resource Name (ARN) of the service to create the task set in.
	Service pulumi.StringInput `pulumi:"service"`
}

func (LookupPrimaryTaskSetOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPrimaryTaskSetArgs)(nil)).Elem()
}

type LookupPrimaryTaskSetResultOutput struct{ *pulumi.OutputState }

func (LookupPrimaryTaskSetResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPrimaryTaskSetResult)(nil)).Elem()
}

func (o LookupPrimaryTaskSetResultOutput) ToLookupPrimaryTaskSetResultOutput() LookupPrimaryTaskSetResultOutput {
	return o
}

func (o LookupPrimaryTaskSetResultOutput) ToLookupPrimaryTaskSetResultOutputWithContext(ctx context.Context) LookupPrimaryTaskSetResultOutput {
	return o
}

// The ID or full Amazon Resource Name (ARN) of the task set.
func (o LookupPrimaryTaskSetResultOutput) TaskSetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPrimaryTaskSetResult) *string { return v.TaskSetId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPrimaryTaskSetResultOutput{})
}
