// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type CapacityProviderAcceleratorCountRequest struct {
	// The maximum number of accelerators. Instance types with more accelerators are excluded from selection.
	Max *int `pulumi:"max"`
	// The minimum number of accelerators. Instance types with fewer accelerators are excluded from selection.
	Min *int `pulumi:"min"`
}

// CapacityProviderAcceleratorCountRequestInput is an input type that accepts CapacityProviderAcceleratorCountRequestArgs and CapacityProviderAcceleratorCountRequestOutput values.
// You can construct a concrete instance of `CapacityProviderAcceleratorCountRequestInput` via:
//
//	CapacityProviderAcceleratorCountRequestArgs{...}
type CapacityProviderAcceleratorCountRequestInput interface {
	pulumi.Input

	ToCapacityProviderAcceleratorCountRequestOutput() CapacityProviderAcceleratorCountRequestOutput
	ToCapacityProviderAcceleratorCountRequestOutputWithContext(context.Context) CapacityProviderAcceleratorCountRequestOutput
}

type CapacityProviderAcceleratorCountRequestArgs struct {
	// The maximum number of accelerators. Instance types with more accelerators are excluded from selection.
	Max pulumi.IntPtrInput `pulumi:"max"`
	// The minimum number of accelerators. Instance types with fewer accelerators are excluded from selection.
	Min pulumi.IntPtrInput `pulumi:"min"`
}

func (CapacityProviderAcceleratorCountRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityProviderAcceleratorCountRequest)(nil)).Elem()
}

func (i CapacityProviderAcceleratorCountRequestArgs) ToCapacityProviderAcceleratorCountRequestOutput() CapacityProviderAcceleratorCountRequestOutput {
	return i.ToCapacityProviderAcceleratorCountRequestOutputWithContext(context.Background())
}

func (i CapacityProviderAcceleratorCountRequestArgs) ToCapacityProviderAcceleratorCountRequestOutputWithContext(ctx context.Context) CapacityProviderAcceleratorCountRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderAcceleratorCountRequestOutput)
}

func (i CapacityProviderAcceleratorCountRequestArgs) ToCapacityProviderAcceleratorCountRequestPtrOutput() CapacityProviderAcceleratorCountRequestPtrOutput {
	return i.ToCapacityProviderAcceleratorCountRequestPtrOutputWithContext(context.Background())
}

func (i CapacityProviderAcceleratorCountRequestArgs) ToCapacityProviderAcceleratorCountRequestPtrOutputWithContext(ctx context.Context) CapacityProviderAcceleratorCountRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderAcceleratorCountRequestOutput).ToCapacityProviderAcceleratorCountRequestPtrOutputWithContext(ctx)
}

// CapacityProviderAcceleratorCountRequestPtrInput is an input type that accepts CapacityProviderAcceleratorCountRequestArgs, CapacityProviderAcceleratorCountRequestPtr and CapacityProviderAcceleratorCountRequestPtrOutput values.
// You can construct a concrete instance of `CapacityProviderAcceleratorCountRequestPtrInput` via:
//
//	        CapacityProviderAcceleratorCountRequestArgs{...}
//
//	or:
//
//	        nil
type CapacityProviderAcceleratorCountRequestPtrInput interface {
	pulumi.Input

	ToCapacityProviderAcceleratorCountRequestPtrOutput() CapacityProviderAcceleratorCountRequestPtrOutput
	ToCapacityProviderAcceleratorCountRequestPtrOutputWithContext(context.Context) CapacityProviderAcceleratorCountRequestPtrOutput
}

type capacityProviderAcceleratorCountRequestPtrType CapacityProviderAcceleratorCountRequestArgs

func CapacityProviderAcceleratorCountRequestPtr(v *CapacityProviderAcceleratorCountRequestArgs) CapacityProviderAcceleratorCountRequestPtrInput {
	return (*capacityProviderAcceleratorCountRequestPtrType)(v)
}

func (*capacityProviderAcceleratorCountRequestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityProviderAcceleratorCountRequest)(nil)).Elem()
}

func (i *capacityProviderAcceleratorCountRequestPtrType) ToCapacityProviderAcceleratorCountRequestPtrOutput() CapacityProviderAcceleratorCountRequestPtrOutput {
	return i.ToCapacityProviderAcceleratorCountRequestPtrOutputWithContext(context.Background())
}

func (i *capacityProviderAcceleratorCountRequestPtrType) ToCapacityProviderAcceleratorCountRequestPtrOutputWithContext(ctx context.Context) CapacityProviderAcceleratorCountRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderAcceleratorCountRequestPtrOutput)
}

type CapacityProviderAcceleratorCountRequestOutput struct{ *pulumi.OutputState }

func (CapacityProviderAcceleratorCountRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityProviderAcceleratorCountRequest)(nil)).Elem()
}

func (o CapacityProviderAcceleratorCountRequestOutput) ToCapacityProviderAcceleratorCountRequestOutput() CapacityProviderAcceleratorCountRequestOutput {
	return o
}

func (o CapacityProviderAcceleratorCountRequestOutput) ToCapacityProviderAcceleratorCountRequestOutputWithContext(ctx context.Context) CapacityProviderAcceleratorCountRequestOutput {
	return o
}

func (o CapacityProviderAcceleratorCountRequestOutput) ToCapacityProviderAcceleratorCountRequestPtrOutput() CapacityProviderAcceleratorCountRequestPtrOutput {
	return o.ToCapacityProviderAcceleratorCountRequestPtrOutputWithContext(context.Background())
}

func (o CapacityProviderAcceleratorCountRequestOutput) ToCapacityProviderAcceleratorCountRequestPtrOutputWithContext(ctx context.Context) CapacityProviderAcceleratorCountRequestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CapacityProviderAcceleratorCountRequest) *CapacityProviderAcceleratorCountRequest {
		return &v
	}).(CapacityProviderAcceleratorCountRequestPtrOutput)
}

// The maximum number of accelerators. Instance types with more accelerators are excluded from selection.
func (o CapacityProviderAcceleratorCountRequestOutput) Max() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CapacityProviderAcceleratorCountRequest) *int { return v.Max }).(pulumi.IntPtrOutput)
}

// The minimum number of accelerators. Instance types with fewer accelerators are excluded from selection.
func (o CapacityProviderAcceleratorCountRequestOutput) Min() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CapacityProviderAcceleratorCountRequest) *int { return v.Min }).(pulumi.IntPtrOutput)
}

type CapacityProviderAcceleratorCountRequestPtrOutput struct{ *pulumi.OutputState }

func (CapacityProviderAcceleratorCountRequestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityProviderAcceleratorCountRequest)(nil)).Elem()
}

func (o CapacityProviderAcceleratorCountRequestPtrOutput) ToCapacityProviderAcceleratorCountRequestPtrOutput() CapacityProviderAcceleratorCountRequestPtrOutput {
	return o
}

func (o CapacityProviderAcceleratorCountRequestPtrOutput) ToCapacityProviderAcceleratorCountRequestPtrOutputWithContext(ctx context.Context) CapacityProviderAcceleratorCountRequestPtrOutput {
	return o
}

func (o CapacityProviderAcceleratorCountRequestPtrOutput) Elem() CapacityProviderAcceleratorCountRequestOutput {
	return o.ApplyT(func(v *CapacityProviderAcceleratorCountRequest) CapacityProviderAcceleratorCountRequest {
		if v != nil {
			return *v
		}
		var ret CapacityProviderAcceleratorCountRequest
		return ret
	}).(CapacityProviderAcceleratorCountRequestOutput)
}

// The maximum number of accelerators. Instance types with more accelerators are excluded from selection.
func (o CapacityProviderAcceleratorCountRequestPtrOutput) Max() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CapacityProviderAcceleratorCountRequest) *int {
		if v == nil {
			return nil
		}
		return v.Max
	}).(pulumi.IntPtrOutput)
}

// The minimum number of accelerators. Instance types with fewer accelerators are excluded from selection.
func (o CapacityProviderAcceleratorCountRequestPtrOutput) Min() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CapacityProviderAcceleratorCountRequest) *int {
		if v == nil {
			return nil
		}
		return v.Min
	}).(pulumi.IntPtrOutput)
}

type CapacityProviderAcceleratorTotalMemoryMiBRequest struct {
	// The maximum total accelerator memory in MiB. Instance types with more accelerator memory are excluded from selection.
	Max *int `pulumi:"max"`
	// The minimum total accelerator memory in MiB. Instance types with less accelerator memory are excluded from selection.
	Min *int `pulumi:"min"`
}

// CapacityProviderAcceleratorTotalMemoryMiBRequestInput is an input type that accepts CapacityProviderAcceleratorTotalMemoryMiBRequestArgs and CapacityProviderAcceleratorTotalMemoryMiBRequestOutput values.
// You can construct a concrete instance of `CapacityProviderAcceleratorTotalMemoryMiBRequestInput` via:
//
//	CapacityProviderAcceleratorTotalMemoryMiBRequestArgs{...}
type CapacityProviderAcceleratorTotalMemoryMiBRequestInput interface {
	pulumi.Input

	ToCapacityProviderAcceleratorTotalMemoryMiBRequestOutput() CapacityProviderAcceleratorTotalMemoryMiBRequestOutput
	ToCapacityProviderAcceleratorTotalMemoryMiBRequestOutputWithContext(context.Context) CapacityProviderAcceleratorTotalMemoryMiBRequestOutput
}

type CapacityProviderAcceleratorTotalMemoryMiBRequestArgs struct {
	// The maximum total accelerator memory in MiB. Instance types with more accelerator memory are excluded from selection.
	Max pulumi.IntPtrInput `pulumi:"max"`
	// The minimum total accelerator memory in MiB. Instance types with less accelerator memory are excluded from selection.
	Min pulumi.IntPtrInput `pulumi:"min"`
}

func (CapacityProviderAcceleratorTotalMemoryMiBRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityProviderAcceleratorTotalMemoryMiBRequest)(nil)).Elem()
}

func (i CapacityProviderAcceleratorTotalMemoryMiBRequestArgs) ToCapacityProviderAcceleratorTotalMemoryMiBRequestOutput() CapacityProviderAcceleratorTotalMemoryMiBRequestOutput {
	return i.ToCapacityProviderAcceleratorTotalMemoryMiBRequestOutputWithContext(context.Background())
}

func (i CapacityProviderAcceleratorTotalMemoryMiBRequestArgs) ToCapacityProviderAcceleratorTotalMemoryMiBRequestOutputWithContext(ctx context.Context) CapacityProviderAcceleratorTotalMemoryMiBRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderAcceleratorTotalMemoryMiBRequestOutput)
}

func (i CapacityProviderAcceleratorTotalMemoryMiBRequestArgs) ToCapacityProviderAcceleratorTotalMemoryMiBRequestPtrOutput() CapacityProviderAcceleratorTotalMemoryMiBRequestPtrOutput {
	return i.ToCapacityProviderAcceleratorTotalMemoryMiBRequestPtrOutputWithContext(context.Background())
}

func (i CapacityProviderAcceleratorTotalMemoryMiBRequestArgs) ToCapacityProviderAcceleratorTotalMemoryMiBRequestPtrOutputWithContext(ctx context.Context) CapacityProviderAcceleratorTotalMemoryMiBRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderAcceleratorTotalMemoryMiBRequestOutput).ToCapacityProviderAcceleratorTotalMemoryMiBRequestPtrOutputWithContext(ctx)
}

// CapacityProviderAcceleratorTotalMemoryMiBRequestPtrInput is an input type that accepts CapacityProviderAcceleratorTotalMemoryMiBRequestArgs, CapacityProviderAcceleratorTotalMemoryMiBRequestPtr and CapacityProviderAcceleratorTotalMemoryMiBRequestPtrOutput values.
// You can construct a concrete instance of `CapacityProviderAcceleratorTotalMemoryMiBRequestPtrInput` via:
//
//	        CapacityProviderAcceleratorTotalMemoryMiBRequestArgs{...}
//
//	or:
//
//	        nil
type CapacityProviderAcceleratorTotalMemoryMiBRequestPtrInput interface {
	pulumi.Input

	ToCapacityProviderAcceleratorTotalMemoryMiBRequestPtrOutput() CapacityProviderAcceleratorTotalMemoryMiBRequestPtrOutput
	ToCapacityProviderAcceleratorTotalMemoryMiBRequestPtrOutputWithContext(context.Context) CapacityProviderAcceleratorTotalMemoryMiBRequestPtrOutput
}

type capacityProviderAcceleratorTotalMemoryMiBRequestPtrType CapacityProviderAcceleratorTotalMemoryMiBRequestArgs

func CapacityProviderAcceleratorTotalMemoryMiBRequestPtr(v *CapacityProviderAcceleratorTotalMemoryMiBRequestArgs) CapacityProviderAcceleratorTotalMemoryMiBRequestPtrInput {
	return (*capacityProviderAcceleratorTotalMemoryMiBRequestPtrType)(v)
}

func (*capacityProviderAcceleratorTotalMemoryMiBRequestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityProviderAcceleratorTotalMemoryMiBRequest)(nil)).Elem()
}

func (i *capacityProviderAcceleratorTotalMemoryMiBRequestPtrType) ToCapacityProviderAcceleratorTotalMemoryMiBRequestPtrOutput() CapacityProviderAcceleratorTotalMemoryMiBRequestPtrOutput {
	return i.ToCapacityProviderAcceleratorTotalMemoryMiBRequestPtrOutputWithContext(context.Background())
}

func (i *capacityProviderAcceleratorTotalMemoryMiBRequestPtrType) ToCapacityProviderAcceleratorTotalMemoryMiBRequestPtrOutputWithContext(ctx context.Context) CapacityProviderAcceleratorTotalMemoryMiBRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderAcceleratorTotalMemoryMiBRequestPtrOutput)
}

type CapacityProviderAcceleratorTotalMemoryMiBRequestOutput struct{ *pulumi.OutputState }

func (CapacityProviderAcceleratorTotalMemoryMiBRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityProviderAcceleratorTotalMemoryMiBRequest)(nil)).Elem()
}

func (o CapacityProviderAcceleratorTotalMemoryMiBRequestOutput) ToCapacityProviderAcceleratorTotalMemoryMiBRequestOutput() CapacityProviderAcceleratorTotalMemoryMiBRequestOutput {
	return o
}

func (o CapacityProviderAcceleratorTotalMemoryMiBRequestOutput) ToCapacityProviderAcceleratorTotalMemoryMiBRequestOutputWithContext(ctx context.Context) CapacityProviderAcceleratorTotalMemoryMiBRequestOutput {
	return o
}

func (o CapacityProviderAcceleratorTotalMemoryMiBRequestOutput) ToCapacityProviderAcceleratorTotalMemoryMiBRequestPtrOutput() CapacityProviderAcceleratorTotalMemoryMiBRequestPtrOutput {
	return o.ToCapacityProviderAcceleratorTotalMemoryMiBRequestPtrOutputWithContext(context.Background())
}

func (o CapacityProviderAcceleratorTotalMemoryMiBRequestOutput) ToCapacityProviderAcceleratorTotalMemoryMiBRequestPtrOutputWithContext(ctx context.Context) CapacityProviderAcceleratorTotalMemoryMiBRequestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CapacityProviderAcceleratorTotalMemoryMiBRequest) *CapacityProviderAcceleratorTotalMemoryMiBRequest {
		return &v
	}).(CapacityProviderAcceleratorTotalMemoryMiBRequestPtrOutput)
}

// The maximum total accelerator memory in MiB. Instance types with more accelerator memory are excluded from selection.
func (o CapacityProviderAcceleratorTotalMemoryMiBRequestOutput) Max() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CapacityProviderAcceleratorTotalMemoryMiBRequest) *int { return v.Max }).(pulumi.IntPtrOutput)
}

// The minimum total accelerator memory in MiB. Instance types with less accelerator memory are excluded from selection.
func (o CapacityProviderAcceleratorTotalMemoryMiBRequestOutput) Min() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CapacityProviderAcceleratorTotalMemoryMiBRequest) *int { return v.Min }).(pulumi.IntPtrOutput)
}

type CapacityProviderAcceleratorTotalMemoryMiBRequestPtrOutput struct{ *pulumi.OutputState }

func (CapacityProviderAcceleratorTotalMemoryMiBRequestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityProviderAcceleratorTotalMemoryMiBRequest)(nil)).Elem()
}

func (o CapacityProviderAcceleratorTotalMemoryMiBRequestPtrOutput) ToCapacityProviderAcceleratorTotalMemoryMiBRequestPtrOutput() CapacityProviderAcceleratorTotalMemoryMiBRequestPtrOutput {
	return o
}

func (o CapacityProviderAcceleratorTotalMemoryMiBRequestPtrOutput) ToCapacityProviderAcceleratorTotalMemoryMiBRequestPtrOutputWithContext(ctx context.Context) CapacityProviderAcceleratorTotalMemoryMiBRequestPtrOutput {
	return o
}

func (o CapacityProviderAcceleratorTotalMemoryMiBRequestPtrOutput) Elem() CapacityProviderAcceleratorTotalMemoryMiBRequestOutput {
	return o.ApplyT(func(v *CapacityProviderAcceleratorTotalMemoryMiBRequest) CapacityProviderAcceleratorTotalMemoryMiBRequest {
		if v != nil {
			return *v
		}
		var ret CapacityProviderAcceleratorTotalMemoryMiBRequest
		return ret
	}).(CapacityProviderAcceleratorTotalMemoryMiBRequestOutput)
}

// The maximum total accelerator memory in MiB. Instance types with more accelerator memory are excluded from selection.
func (o CapacityProviderAcceleratorTotalMemoryMiBRequestPtrOutput) Max() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CapacityProviderAcceleratorTotalMemoryMiBRequest) *int {
		if v == nil {
			return nil
		}
		return v.Max
	}).(pulumi.IntPtrOutput)
}

// The minimum total accelerator memory in MiB. Instance types with less accelerator memory are excluded from selection.
func (o CapacityProviderAcceleratorTotalMemoryMiBRequestPtrOutput) Min() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CapacityProviderAcceleratorTotalMemoryMiBRequest) *int {
		if v == nil {
			return nil
		}
		return v.Min
	}).(pulumi.IntPtrOutput)
}

type CapacityProviderAutoScalingGroupProvider struct {
	// The Amazon Resource Name (ARN) that identifies the Auto Scaling group, or the Auto Scaling group name.
	AutoScalingGroupArn string `pulumi:"autoScalingGroupArn"`
	// The managed draining option for the Auto Scaling group capacity provider. When you enable this, Amazon ECS manages and gracefully drains the EC2 container instances that are in the Auto Scaling group capacity provider.
	ManagedDraining *CapacityProviderAutoScalingGroupProviderManagedDraining `pulumi:"managedDraining"`
	// The managed scaling settings for the Auto Scaling group capacity provider.
	ManagedScaling *CapacityProviderManagedScaling `pulumi:"managedScaling"`
	// The managed termination protection setting to use for the Auto Scaling group capacity provider. This determines whether the Auto Scaling group has managed termination protection. The default is off.
	//
	// > When using managed termination protection, managed scaling must also be used otherwise managed termination protection doesn't work.
	//
	// When managed termination protection is on, Amazon ECS prevents the Amazon EC2 instances in an Auto Scaling group that contain tasks from being terminated during a scale-in action. The Auto Scaling group and each instance in the Auto Scaling group must have instance protection from scale-in actions on as well. For more information, see [Instance Protection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection) in the *AWS Auto Scaling User Guide* .
	//
	// When managed termination protection is off, your Amazon EC2 instances aren't protected from termination when the Auto Scaling group scales in.
	ManagedTerminationProtection *CapacityProviderAutoScalingGroupProviderManagedTerminationProtection `pulumi:"managedTerminationProtection"`
}

// CapacityProviderAutoScalingGroupProviderInput is an input type that accepts CapacityProviderAutoScalingGroupProviderArgs and CapacityProviderAutoScalingGroupProviderOutput values.
// You can construct a concrete instance of `CapacityProviderAutoScalingGroupProviderInput` via:
//
//	CapacityProviderAutoScalingGroupProviderArgs{...}
type CapacityProviderAutoScalingGroupProviderInput interface {
	pulumi.Input

	ToCapacityProviderAutoScalingGroupProviderOutput() CapacityProviderAutoScalingGroupProviderOutput
	ToCapacityProviderAutoScalingGroupProviderOutputWithContext(context.Context) CapacityProviderAutoScalingGroupProviderOutput
}

type CapacityProviderAutoScalingGroupProviderArgs struct {
	// The Amazon Resource Name (ARN) that identifies the Auto Scaling group, or the Auto Scaling group name.
	AutoScalingGroupArn pulumi.StringInput `pulumi:"autoScalingGroupArn"`
	// The managed draining option for the Auto Scaling group capacity provider. When you enable this, Amazon ECS manages and gracefully drains the EC2 container instances that are in the Auto Scaling group capacity provider.
	ManagedDraining CapacityProviderAutoScalingGroupProviderManagedDrainingPtrInput `pulumi:"managedDraining"`
	// The managed scaling settings for the Auto Scaling group capacity provider.
	ManagedScaling CapacityProviderManagedScalingPtrInput `pulumi:"managedScaling"`
	// The managed termination protection setting to use for the Auto Scaling group capacity provider. This determines whether the Auto Scaling group has managed termination protection. The default is off.
	//
	// > When using managed termination protection, managed scaling must also be used otherwise managed termination protection doesn't work.
	//
	// When managed termination protection is on, Amazon ECS prevents the Amazon EC2 instances in an Auto Scaling group that contain tasks from being terminated during a scale-in action. The Auto Scaling group and each instance in the Auto Scaling group must have instance protection from scale-in actions on as well. For more information, see [Instance Protection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection) in the *AWS Auto Scaling User Guide* .
	//
	// When managed termination protection is off, your Amazon EC2 instances aren't protected from termination when the Auto Scaling group scales in.
	ManagedTerminationProtection CapacityProviderAutoScalingGroupProviderManagedTerminationProtectionPtrInput `pulumi:"managedTerminationProtection"`
}

func (CapacityProviderAutoScalingGroupProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityProviderAutoScalingGroupProvider)(nil)).Elem()
}

func (i CapacityProviderAutoScalingGroupProviderArgs) ToCapacityProviderAutoScalingGroupProviderOutput() CapacityProviderAutoScalingGroupProviderOutput {
	return i.ToCapacityProviderAutoScalingGroupProviderOutputWithContext(context.Background())
}

func (i CapacityProviderAutoScalingGroupProviderArgs) ToCapacityProviderAutoScalingGroupProviderOutputWithContext(ctx context.Context) CapacityProviderAutoScalingGroupProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderAutoScalingGroupProviderOutput)
}

func (i CapacityProviderAutoScalingGroupProviderArgs) ToCapacityProviderAutoScalingGroupProviderPtrOutput() CapacityProviderAutoScalingGroupProviderPtrOutput {
	return i.ToCapacityProviderAutoScalingGroupProviderPtrOutputWithContext(context.Background())
}

func (i CapacityProviderAutoScalingGroupProviderArgs) ToCapacityProviderAutoScalingGroupProviderPtrOutputWithContext(ctx context.Context) CapacityProviderAutoScalingGroupProviderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderAutoScalingGroupProviderOutput).ToCapacityProviderAutoScalingGroupProviderPtrOutputWithContext(ctx)
}

// CapacityProviderAutoScalingGroupProviderPtrInput is an input type that accepts CapacityProviderAutoScalingGroupProviderArgs, CapacityProviderAutoScalingGroupProviderPtr and CapacityProviderAutoScalingGroupProviderPtrOutput values.
// You can construct a concrete instance of `CapacityProviderAutoScalingGroupProviderPtrInput` via:
//
//	        CapacityProviderAutoScalingGroupProviderArgs{...}
//
//	or:
//
//	        nil
type CapacityProviderAutoScalingGroupProviderPtrInput interface {
	pulumi.Input

	ToCapacityProviderAutoScalingGroupProviderPtrOutput() CapacityProviderAutoScalingGroupProviderPtrOutput
	ToCapacityProviderAutoScalingGroupProviderPtrOutputWithContext(context.Context) CapacityProviderAutoScalingGroupProviderPtrOutput
}

type capacityProviderAutoScalingGroupProviderPtrType CapacityProviderAutoScalingGroupProviderArgs

func CapacityProviderAutoScalingGroupProviderPtr(v *CapacityProviderAutoScalingGroupProviderArgs) CapacityProviderAutoScalingGroupProviderPtrInput {
	return (*capacityProviderAutoScalingGroupProviderPtrType)(v)
}

func (*capacityProviderAutoScalingGroupProviderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityProviderAutoScalingGroupProvider)(nil)).Elem()
}

func (i *capacityProviderAutoScalingGroupProviderPtrType) ToCapacityProviderAutoScalingGroupProviderPtrOutput() CapacityProviderAutoScalingGroupProviderPtrOutput {
	return i.ToCapacityProviderAutoScalingGroupProviderPtrOutputWithContext(context.Background())
}

func (i *capacityProviderAutoScalingGroupProviderPtrType) ToCapacityProviderAutoScalingGroupProviderPtrOutputWithContext(ctx context.Context) CapacityProviderAutoScalingGroupProviderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderAutoScalingGroupProviderPtrOutput)
}

type CapacityProviderAutoScalingGroupProviderOutput struct{ *pulumi.OutputState }

func (CapacityProviderAutoScalingGroupProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityProviderAutoScalingGroupProvider)(nil)).Elem()
}

func (o CapacityProviderAutoScalingGroupProviderOutput) ToCapacityProviderAutoScalingGroupProviderOutput() CapacityProviderAutoScalingGroupProviderOutput {
	return o
}

func (o CapacityProviderAutoScalingGroupProviderOutput) ToCapacityProviderAutoScalingGroupProviderOutputWithContext(ctx context.Context) CapacityProviderAutoScalingGroupProviderOutput {
	return o
}

func (o CapacityProviderAutoScalingGroupProviderOutput) ToCapacityProviderAutoScalingGroupProviderPtrOutput() CapacityProviderAutoScalingGroupProviderPtrOutput {
	return o.ToCapacityProviderAutoScalingGroupProviderPtrOutputWithContext(context.Background())
}

func (o CapacityProviderAutoScalingGroupProviderOutput) ToCapacityProviderAutoScalingGroupProviderPtrOutputWithContext(ctx context.Context) CapacityProviderAutoScalingGroupProviderPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CapacityProviderAutoScalingGroupProvider) *CapacityProviderAutoScalingGroupProvider {
		return &v
	}).(CapacityProviderAutoScalingGroupProviderPtrOutput)
}

// The Amazon Resource Name (ARN) that identifies the Auto Scaling group, or the Auto Scaling group name.
func (o CapacityProviderAutoScalingGroupProviderOutput) AutoScalingGroupArn() pulumi.StringOutput {
	return o.ApplyT(func(v CapacityProviderAutoScalingGroupProvider) string { return v.AutoScalingGroupArn }).(pulumi.StringOutput)
}

// The managed draining option for the Auto Scaling group capacity provider. When you enable this, Amazon ECS manages and gracefully drains the EC2 container instances that are in the Auto Scaling group capacity provider.
func (o CapacityProviderAutoScalingGroupProviderOutput) ManagedDraining() CapacityProviderAutoScalingGroupProviderManagedDrainingPtrOutput {
	return o.ApplyT(func(v CapacityProviderAutoScalingGroupProvider) *CapacityProviderAutoScalingGroupProviderManagedDraining {
		return v.ManagedDraining
	}).(CapacityProviderAutoScalingGroupProviderManagedDrainingPtrOutput)
}

// The managed scaling settings for the Auto Scaling group capacity provider.
func (o CapacityProviderAutoScalingGroupProviderOutput) ManagedScaling() CapacityProviderManagedScalingPtrOutput {
	return o.ApplyT(func(v CapacityProviderAutoScalingGroupProvider) *CapacityProviderManagedScaling {
		return v.ManagedScaling
	}).(CapacityProviderManagedScalingPtrOutput)
}

// The managed termination protection setting to use for the Auto Scaling group capacity provider. This determines whether the Auto Scaling group has managed termination protection. The default is off.
//
// > When using managed termination protection, managed scaling must also be used otherwise managed termination protection doesn't work.
//
// When managed termination protection is on, Amazon ECS prevents the Amazon EC2 instances in an Auto Scaling group that contain tasks from being terminated during a scale-in action. The Auto Scaling group and each instance in the Auto Scaling group must have instance protection from scale-in actions on as well. For more information, see [Instance Protection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection) in the *AWS Auto Scaling User Guide* .
//
// When managed termination protection is off, your Amazon EC2 instances aren't protected from termination when the Auto Scaling group scales in.
func (o CapacityProviderAutoScalingGroupProviderOutput) ManagedTerminationProtection() CapacityProviderAutoScalingGroupProviderManagedTerminationProtectionPtrOutput {
	return o.ApplyT(func(v CapacityProviderAutoScalingGroupProvider) *CapacityProviderAutoScalingGroupProviderManagedTerminationProtection {
		return v.ManagedTerminationProtection
	}).(CapacityProviderAutoScalingGroupProviderManagedTerminationProtectionPtrOutput)
}

type CapacityProviderAutoScalingGroupProviderPtrOutput struct{ *pulumi.OutputState }

func (CapacityProviderAutoScalingGroupProviderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityProviderAutoScalingGroupProvider)(nil)).Elem()
}

func (o CapacityProviderAutoScalingGroupProviderPtrOutput) ToCapacityProviderAutoScalingGroupProviderPtrOutput() CapacityProviderAutoScalingGroupProviderPtrOutput {
	return o
}

func (o CapacityProviderAutoScalingGroupProviderPtrOutput) ToCapacityProviderAutoScalingGroupProviderPtrOutputWithContext(ctx context.Context) CapacityProviderAutoScalingGroupProviderPtrOutput {
	return o
}

func (o CapacityProviderAutoScalingGroupProviderPtrOutput) Elem() CapacityProviderAutoScalingGroupProviderOutput {
	return o.ApplyT(func(v *CapacityProviderAutoScalingGroupProvider) CapacityProviderAutoScalingGroupProvider {
		if v != nil {
			return *v
		}
		var ret CapacityProviderAutoScalingGroupProvider
		return ret
	}).(CapacityProviderAutoScalingGroupProviderOutput)
}

// The Amazon Resource Name (ARN) that identifies the Auto Scaling group, or the Auto Scaling group name.
func (o CapacityProviderAutoScalingGroupProviderPtrOutput) AutoScalingGroupArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CapacityProviderAutoScalingGroupProvider) *string {
		if v == nil {
			return nil
		}
		return &v.AutoScalingGroupArn
	}).(pulumi.StringPtrOutput)
}

// The managed draining option for the Auto Scaling group capacity provider. When you enable this, Amazon ECS manages and gracefully drains the EC2 container instances that are in the Auto Scaling group capacity provider.
func (o CapacityProviderAutoScalingGroupProviderPtrOutput) ManagedDraining() CapacityProviderAutoScalingGroupProviderManagedDrainingPtrOutput {
	return o.ApplyT(func(v *CapacityProviderAutoScalingGroupProvider) *CapacityProviderAutoScalingGroupProviderManagedDraining {
		if v == nil {
			return nil
		}
		return v.ManagedDraining
	}).(CapacityProviderAutoScalingGroupProviderManagedDrainingPtrOutput)
}

// The managed scaling settings for the Auto Scaling group capacity provider.
func (o CapacityProviderAutoScalingGroupProviderPtrOutput) ManagedScaling() CapacityProviderManagedScalingPtrOutput {
	return o.ApplyT(func(v *CapacityProviderAutoScalingGroupProvider) *CapacityProviderManagedScaling {
		if v == nil {
			return nil
		}
		return v.ManagedScaling
	}).(CapacityProviderManagedScalingPtrOutput)
}

// The managed termination protection setting to use for the Auto Scaling group capacity provider. This determines whether the Auto Scaling group has managed termination protection. The default is off.
//
// > When using managed termination protection, managed scaling must also be used otherwise managed termination protection doesn't work.
//
// When managed termination protection is on, Amazon ECS prevents the Amazon EC2 instances in an Auto Scaling group that contain tasks from being terminated during a scale-in action. The Auto Scaling group and each instance in the Auto Scaling group must have instance protection from scale-in actions on as well. For more information, see [Instance Protection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection) in the *AWS Auto Scaling User Guide* .
//
// When managed termination protection is off, your Amazon EC2 instances aren't protected from termination when the Auto Scaling group scales in.
func (o CapacityProviderAutoScalingGroupProviderPtrOutput) ManagedTerminationProtection() CapacityProviderAutoScalingGroupProviderManagedTerminationProtectionPtrOutput {
	return o.ApplyT(func(v *CapacityProviderAutoScalingGroupProvider) *CapacityProviderAutoScalingGroupProviderManagedTerminationProtection {
		if v == nil {
			return nil
		}
		return v.ManagedTerminationProtection
	}).(CapacityProviderAutoScalingGroupProviderManagedTerminationProtectionPtrOutput)
}

type CapacityProviderBaselineEbsBandwidthMbpsRequest struct {
	// The maximum baseline Amazon EBS bandwidth in Mbps. Instance types with higher Amazon EBS bandwidth are excluded from selection.
	Max *int `pulumi:"max"`
	// The minimum baseline Amazon EBS bandwidth in Mbps. Instance types with lower Amazon EBS bandwidth are excluded from selection.
	Min *int `pulumi:"min"`
}

// CapacityProviderBaselineEbsBandwidthMbpsRequestInput is an input type that accepts CapacityProviderBaselineEbsBandwidthMbpsRequestArgs and CapacityProviderBaselineEbsBandwidthMbpsRequestOutput values.
// You can construct a concrete instance of `CapacityProviderBaselineEbsBandwidthMbpsRequestInput` via:
//
//	CapacityProviderBaselineEbsBandwidthMbpsRequestArgs{...}
type CapacityProviderBaselineEbsBandwidthMbpsRequestInput interface {
	pulumi.Input

	ToCapacityProviderBaselineEbsBandwidthMbpsRequestOutput() CapacityProviderBaselineEbsBandwidthMbpsRequestOutput
	ToCapacityProviderBaselineEbsBandwidthMbpsRequestOutputWithContext(context.Context) CapacityProviderBaselineEbsBandwidthMbpsRequestOutput
}

type CapacityProviderBaselineEbsBandwidthMbpsRequestArgs struct {
	// The maximum baseline Amazon EBS bandwidth in Mbps. Instance types with higher Amazon EBS bandwidth are excluded from selection.
	Max pulumi.IntPtrInput `pulumi:"max"`
	// The minimum baseline Amazon EBS bandwidth in Mbps. Instance types with lower Amazon EBS bandwidth are excluded from selection.
	Min pulumi.IntPtrInput `pulumi:"min"`
}

func (CapacityProviderBaselineEbsBandwidthMbpsRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityProviderBaselineEbsBandwidthMbpsRequest)(nil)).Elem()
}

func (i CapacityProviderBaselineEbsBandwidthMbpsRequestArgs) ToCapacityProviderBaselineEbsBandwidthMbpsRequestOutput() CapacityProviderBaselineEbsBandwidthMbpsRequestOutput {
	return i.ToCapacityProviderBaselineEbsBandwidthMbpsRequestOutputWithContext(context.Background())
}

func (i CapacityProviderBaselineEbsBandwidthMbpsRequestArgs) ToCapacityProviderBaselineEbsBandwidthMbpsRequestOutputWithContext(ctx context.Context) CapacityProviderBaselineEbsBandwidthMbpsRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderBaselineEbsBandwidthMbpsRequestOutput)
}

func (i CapacityProviderBaselineEbsBandwidthMbpsRequestArgs) ToCapacityProviderBaselineEbsBandwidthMbpsRequestPtrOutput() CapacityProviderBaselineEbsBandwidthMbpsRequestPtrOutput {
	return i.ToCapacityProviderBaselineEbsBandwidthMbpsRequestPtrOutputWithContext(context.Background())
}

func (i CapacityProviderBaselineEbsBandwidthMbpsRequestArgs) ToCapacityProviderBaselineEbsBandwidthMbpsRequestPtrOutputWithContext(ctx context.Context) CapacityProviderBaselineEbsBandwidthMbpsRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderBaselineEbsBandwidthMbpsRequestOutput).ToCapacityProviderBaselineEbsBandwidthMbpsRequestPtrOutputWithContext(ctx)
}

// CapacityProviderBaselineEbsBandwidthMbpsRequestPtrInput is an input type that accepts CapacityProviderBaselineEbsBandwidthMbpsRequestArgs, CapacityProviderBaselineEbsBandwidthMbpsRequestPtr and CapacityProviderBaselineEbsBandwidthMbpsRequestPtrOutput values.
// You can construct a concrete instance of `CapacityProviderBaselineEbsBandwidthMbpsRequestPtrInput` via:
//
//	        CapacityProviderBaselineEbsBandwidthMbpsRequestArgs{...}
//
//	or:
//
//	        nil
type CapacityProviderBaselineEbsBandwidthMbpsRequestPtrInput interface {
	pulumi.Input

	ToCapacityProviderBaselineEbsBandwidthMbpsRequestPtrOutput() CapacityProviderBaselineEbsBandwidthMbpsRequestPtrOutput
	ToCapacityProviderBaselineEbsBandwidthMbpsRequestPtrOutputWithContext(context.Context) CapacityProviderBaselineEbsBandwidthMbpsRequestPtrOutput
}

type capacityProviderBaselineEbsBandwidthMbpsRequestPtrType CapacityProviderBaselineEbsBandwidthMbpsRequestArgs

func CapacityProviderBaselineEbsBandwidthMbpsRequestPtr(v *CapacityProviderBaselineEbsBandwidthMbpsRequestArgs) CapacityProviderBaselineEbsBandwidthMbpsRequestPtrInput {
	return (*capacityProviderBaselineEbsBandwidthMbpsRequestPtrType)(v)
}

func (*capacityProviderBaselineEbsBandwidthMbpsRequestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityProviderBaselineEbsBandwidthMbpsRequest)(nil)).Elem()
}

func (i *capacityProviderBaselineEbsBandwidthMbpsRequestPtrType) ToCapacityProviderBaselineEbsBandwidthMbpsRequestPtrOutput() CapacityProviderBaselineEbsBandwidthMbpsRequestPtrOutput {
	return i.ToCapacityProviderBaselineEbsBandwidthMbpsRequestPtrOutputWithContext(context.Background())
}

func (i *capacityProviderBaselineEbsBandwidthMbpsRequestPtrType) ToCapacityProviderBaselineEbsBandwidthMbpsRequestPtrOutputWithContext(ctx context.Context) CapacityProviderBaselineEbsBandwidthMbpsRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderBaselineEbsBandwidthMbpsRequestPtrOutput)
}

type CapacityProviderBaselineEbsBandwidthMbpsRequestOutput struct{ *pulumi.OutputState }

func (CapacityProviderBaselineEbsBandwidthMbpsRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityProviderBaselineEbsBandwidthMbpsRequest)(nil)).Elem()
}

func (o CapacityProviderBaselineEbsBandwidthMbpsRequestOutput) ToCapacityProviderBaselineEbsBandwidthMbpsRequestOutput() CapacityProviderBaselineEbsBandwidthMbpsRequestOutput {
	return o
}

func (o CapacityProviderBaselineEbsBandwidthMbpsRequestOutput) ToCapacityProviderBaselineEbsBandwidthMbpsRequestOutputWithContext(ctx context.Context) CapacityProviderBaselineEbsBandwidthMbpsRequestOutput {
	return o
}

func (o CapacityProviderBaselineEbsBandwidthMbpsRequestOutput) ToCapacityProviderBaselineEbsBandwidthMbpsRequestPtrOutput() CapacityProviderBaselineEbsBandwidthMbpsRequestPtrOutput {
	return o.ToCapacityProviderBaselineEbsBandwidthMbpsRequestPtrOutputWithContext(context.Background())
}

func (o CapacityProviderBaselineEbsBandwidthMbpsRequestOutput) ToCapacityProviderBaselineEbsBandwidthMbpsRequestPtrOutputWithContext(ctx context.Context) CapacityProviderBaselineEbsBandwidthMbpsRequestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CapacityProviderBaselineEbsBandwidthMbpsRequest) *CapacityProviderBaselineEbsBandwidthMbpsRequest {
		return &v
	}).(CapacityProviderBaselineEbsBandwidthMbpsRequestPtrOutput)
}

// The maximum baseline Amazon EBS bandwidth in Mbps. Instance types with higher Amazon EBS bandwidth are excluded from selection.
func (o CapacityProviderBaselineEbsBandwidthMbpsRequestOutput) Max() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CapacityProviderBaselineEbsBandwidthMbpsRequest) *int { return v.Max }).(pulumi.IntPtrOutput)
}

// The minimum baseline Amazon EBS bandwidth in Mbps. Instance types with lower Amazon EBS bandwidth are excluded from selection.
func (o CapacityProviderBaselineEbsBandwidthMbpsRequestOutput) Min() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CapacityProviderBaselineEbsBandwidthMbpsRequest) *int { return v.Min }).(pulumi.IntPtrOutput)
}

type CapacityProviderBaselineEbsBandwidthMbpsRequestPtrOutput struct{ *pulumi.OutputState }

func (CapacityProviderBaselineEbsBandwidthMbpsRequestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityProviderBaselineEbsBandwidthMbpsRequest)(nil)).Elem()
}

func (o CapacityProviderBaselineEbsBandwidthMbpsRequestPtrOutput) ToCapacityProviderBaselineEbsBandwidthMbpsRequestPtrOutput() CapacityProviderBaselineEbsBandwidthMbpsRequestPtrOutput {
	return o
}

func (o CapacityProviderBaselineEbsBandwidthMbpsRequestPtrOutput) ToCapacityProviderBaselineEbsBandwidthMbpsRequestPtrOutputWithContext(ctx context.Context) CapacityProviderBaselineEbsBandwidthMbpsRequestPtrOutput {
	return o
}

func (o CapacityProviderBaselineEbsBandwidthMbpsRequestPtrOutput) Elem() CapacityProviderBaselineEbsBandwidthMbpsRequestOutput {
	return o.ApplyT(func(v *CapacityProviderBaselineEbsBandwidthMbpsRequest) CapacityProviderBaselineEbsBandwidthMbpsRequest {
		if v != nil {
			return *v
		}
		var ret CapacityProviderBaselineEbsBandwidthMbpsRequest
		return ret
	}).(CapacityProviderBaselineEbsBandwidthMbpsRequestOutput)
}

// The maximum baseline Amazon EBS bandwidth in Mbps. Instance types with higher Amazon EBS bandwidth are excluded from selection.
func (o CapacityProviderBaselineEbsBandwidthMbpsRequestPtrOutput) Max() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CapacityProviderBaselineEbsBandwidthMbpsRequest) *int {
		if v == nil {
			return nil
		}
		return v.Max
	}).(pulumi.IntPtrOutput)
}

// The minimum baseline Amazon EBS bandwidth in Mbps. Instance types with lower Amazon EBS bandwidth are excluded from selection.
func (o CapacityProviderBaselineEbsBandwidthMbpsRequestPtrOutput) Min() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CapacityProviderBaselineEbsBandwidthMbpsRequest) *int {
		if v == nil {
			return nil
		}
		return v.Min
	}).(pulumi.IntPtrOutput)
}

type CapacityProviderInstanceLaunchTemplate struct {
	// The Amazon Resource Name (ARN) of the instance profile that Amazon ECS applies to Amazon ECS Managed Instances. This instance profile must include the necessary permissions for your tasks to access AWS services and resources.
	//
	// For more information, see [Amazon ECS instance profile for Managed Instances](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/managed-instances-instance-profile.html) in the *Amazon ECS Developer Guide* .
	Ec2InstanceProfileArn string `pulumi:"ec2InstanceProfileArn"`
	// The instance requirements. You can specify:
	//
	// - The instance types
	// - Instance requirements such as vCPU count, memory, network performance, and accelerator specifications
	//
	// Amazon ECS automatically selects the instances that match the specified criteria.
	InstanceRequirements *CapacityProviderInstanceRequirementsRequest `pulumi:"instanceRequirements"`
	// CloudWatch provides two categories of monitoring: basic monitoring and detailed monitoring. By default, your managed instance is configured for basic monitoring. You can optionally enable detailed monitoring to help you more quickly identify and act on operational issues. You can enable or turn off detailed monitoring at launch or when the managed instance is running or stopped. For more information, see [Detailed monitoring for Amazon ECS Managed Instances](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/detailed-monitoring-managed-instances.html) in the Amazon ECS Developer Guide.
	Monitoring *CapacityProviderManagedInstancesMonitoringOptions `pulumi:"monitoring"`
	// The network configuration for Amazon ECS Managed Instances. This specifies the subnets and security groups that instances use for network connectivity.
	NetworkConfiguration CapacityProviderManagedInstancesNetworkConfiguration `pulumi:"networkConfiguration"`
	// The storage configuration for Amazon ECS Managed Instances. This defines the root volume size and type for the instances.
	StorageConfiguration *CapacityProviderManagedInstancesStorageConfiguration `pulumi:"storageConfiguration"`
}

// CapacityProviderInstanceLaunchTemplateInput is an input type that accepts CapacityProviderInstanceLaunchTemplateArgs and CapacityProviderInstanceLaunchTemplateOutput values.
// You can construct a concrete instance of `CapacityProviderInstanceLaunchTemplateInput` via:
//
//	CapacityProviderInstanceLaunchTemplateArgs{...}
type CapacityProviderInstanceLaunchTemplateInput interface {
	pulumi.Input

	ToCapacityProviderInstanceLaunchTemplateOutput() CapacityProviderInstanceLaunchTemplateOutput
	ToCapacityProviderInstanceLaunchTemplateOutputWithContext(context.Context) CapacityProviderInstanceLaunchTemplateOutput
}

type CapacityProviderInstanceLaunchTemplateArgs struct {
	// The Amazon Resource Name (ARN) of the instance profile that Amazon ECS applies to Amazon ECS Managed Instances. This instance profile must include the necessary permissions for your tasks to access AWS services and resources.
	//
	// For more information, see [Amazon ECS instance profile for Managed Instances](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/managed-instances-instance-profile.html) in the *Amazon ECS Developer Guide* .
	Ec2InstanceProfileArn pulumi.StringInput `pulumi:"ec2InstanceProfileArn"`
	// The instance requirements. You can specify:
	//
	// - The instance types
	// - Instance requirements such as vCPU count, memory, network performance, and accelerator specifications
	//
	// Amazon ECS automatically selects the instances that match the specified criteria.
	InstanceRequirements CapacityProviderInstanceRequirementsRequestPtrInput `pulumi:"instanceRequirements"`
	// CloudWatch provides two categories of monitoring: basic monitoring and detailed monitoring. By default, your managed instance is configured for basic monitoring. You can optionally enable detailed monitoring to help you more quickly identify and act on operational issues. You can enable or turn off detailed monitoring at launch or when the managed instance is running or stopped. For more information, see [Detailed monitoring for Amazon ECS Managed Instances](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/detailed-monitoring-managed-instances.html) in the Amazon ECS Developer Guide.
	Monitoring CapacityProviderManagedInstancesMonitoringOptionsPtrInput `pulumi:"monitoring"`
	// The network configuration for Amazon ECS Managed Instances. This specifies the subnets and security groups that instances use for network connectivity.
	NetworkConfiguration CapacityProviderManagedInstancesNetworkConfigurationInput `pulumi:"networkConfiguration"`
	// The storage configuration for Amazon ECS Managed Instances. This defines the root volume size and type for the instances.
	StorageConfiguration CapacityProviderManagedInstancesStorageConfigurationPtrInput `pulumi:"storageConfiguration"`
}

func (CapacityProviderInstanceLaunchTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityProviderInstanceLaunchTemplate)(nil)).Elem()
}

func (i CapacityProviderInstanceLaunchTemplateArgs) ToCapacityProviderInstanceLaunchTemplateOutput() CapacityProviderInstanceLaunchTemplateOutput {
	return i.ToCapacityProviderInstanceLaunchTemplateOutputWithContext(context.Background())
}

func (i CapacityProviderInstanceLaunchTemplateArgs) ToCapacityProviderInstanceLaunchTemplateOutputWithContext(ctx context.Context) CapacityProviderInstanceLaunchTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderInstanceLaunchTemplateOutput)
}

func (i CapacityProviderInstanceLaunchTemplateArgs) ToCapacityProviderInstanceLaunchTemplatePtrOutput() CapacityProviderInstanceLaunchTemplatePtrOutput {
	return i.ToCapacityProviderInstanceLaunchTemplatePtrOutputWithContext(context.Background())
}

func (i CapacityProviderInstanceLaunchTemplateArgs) ToCapacityProviderInstanceLaunchTemplatePtrOutputWithContext(ctx context.Context) CapacityProviderInstanceLaunchTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderInstanceLaunchTemplateOutput).ToCapacityProviderInstanceLaunchTemplatePtrOutputWithContext(ctx)
}

// CapacityProviderInstanceLaunchTemplatePtrInput is an input type that accepts CapacityProviderInstanceLaunchTemplateArgs, CapacityProviderInstanceLaunchTemplatePtr and CapacityProviderInstanceLaunchTemplatePtrOutput values.
// You can construct a concrete instance of `CapacityProviderInstanceLaunchTemplatePtrInput` via:
//
//	        CapacityProviderInstanceLaunchTemplateArgs{...}
//
//	or:
//
//	        nil
type CapacityProviderInstanceLaunchTemplatePtrInput interface {
	pulumi.Input

	ToCapacityProviderInstanceLaunchTemplatePtrOutput() CapacityProviderInstanceLaunchTemplatePtrOutput
	ToCapacityProviderInstanceLaunchTemplatePtrOutputWithContext(context.Context) CapacityProviderInstanceLaunchTemplatePtrOutput
}

type capacityProviderInstanceLaunchTemplatePtrType CapacityProviderInstanceLaunchTemplateArgs

func CapacityProviderInstanceLaunchTemplatePtr(v *CapacityProviderInstanceLaunchTemplateArgs) CapacityProviderInstanceLaunchTemplatePtrInput {
	return (*capacityProviderInstanceLaunchTemplatePtrType)(v)
}

func (*capacityProviderInstanceLaunchTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityProviderInstanceLaunchTemplate)(nil)).Elem()
}

func (i *capacityProviderInstanceLaunchTemplatePtrType) ToCapacityProviderInstanceLaunchTemplatePtrOutput() CapacityProviderInstanceLaunchTemplatePtrOutput {
	return i.ToCapacityProviderInstanceLaunchTemplatePtrOutputWithContext(context.Background())
}

func (i *capacityProviderInstanceLaunchTemplatePtrType) ToCapacityProviderInstanceLaunchTemplatePtrOutputWithContext(ctx context.Context) CapacityProviderInstanceLaunchTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderInstanceLaunchTemplatePtrOutput)
}

type CapacityProviderInstanceLaunchTemplateOutput struct{ *pulumi.OutputState }

func (CapacityProviderInstanceLaunchTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityProviderInstanceLaunchTemplate)(nil)).Elem()
}

func (o CapacityProviderInstanceLaunchTemplateOutput) ToCapacityProviderInstanceLaunchTemplateOutput() CapacityProviderInstanceLaunchTemplateOutput {
	return o
}

func (o CapacityProviderInstanceLaunchTemplateOutput) ToCapacityProviderInstanceLaunchTemplateOutputWithContext(ctx context.Context) CapacityProviderInstanceLaunchTemplateOutput {
	return o
}

func (o CapacityProviderInstanceLaunchTemplateOutput) ToCapacityProviderInstanceLaunchTemplatePtrOutput() CapacityProviderInstanceLaunchTemplatePtrOutput {
	return o.ToCapacityProviderInstanceLaunchTemplatePtrOutputWithContext(context.Background())
}

func (o CapacityProviderInstanceLaunchTemplateOutput) ToCapacityProviderInstanceLaunchTemplatePtrOutputWithContext(ctx context.Context) CapacityProviderInstanceLaunchTemplatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CapacityProviderInstanceLaunchTemplate) *CapacityProviderInstanceLaunchTemplate {
		return &v
	}).(CapacityProviderInstanceLaunchTemplatePtrOutput)
}

// The Amazon Resource Name (ARN) of the instance profile that Amazon ECS applies to Amazon ECS Managed Instances. This instance profile must include the necessary permissions for your tasks to access AWS services and resources.
//
// For more information, see [Amazon ECS instance profile for Managed Instances](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/managed-instances-instance-profile.html) in the *Amazon ECS Developer Guide* .
func (o CapacityProviderInstanceLaunchTemplateOutput) Ec2InstanceProfileArn() pulumi.StringOutput {
	return o.ApplyT(func(v CapacityProviderInstanceLaunchTemplate) string { return v.Ec2InstanceProfileArn }).(pulumi.StringOutput)
}

// The instance requirements. You can specify:
//
// - The instance types
// - Instance requirements such as vCPU count, memory, network performance, and accelerator specifications
//
// Amazon ECS automatically selects the instances that match the specified criteria.
func (o CapacityProviderInstanceLaunchTemplateOutput) InstanceRequirements() CapacityProviderInstanceRequirementsRequestPtrOutput {
	return o.ApplyT(func(v CapacityProviderInstanceLaunchTemplate) *CapacityProviderInstanceRequirementsRequest {
		return v.InstanceRequirements
	}).(CapacityProviderInstanceRequirementsRequestPtrOutput)
}

// CloudWatch provides two categories of monitoring: basic monitoring and detailed monitoring. By default, your managed instance is configured for basic monitoring. You can optionally enable detailed monitoring to help you more quickly identify and act on operational issues. You can enable or turn off detailed monitoring at launch or when the managed instance is running or stopped. For more information, see [Detailed monitoring for Amazon ECS Managed Instances](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/detailed-monitoring-managed-instances.html) in the Amazon ECS Developer Guide.
func (o CapacityProviderInstanceLaunchTemplateOutput) Monitoring() CapacityProviderManagedInstancesMonitoringOptionsPtrOutput {
	return o.ApplyT(func(v CapacityProviderInstanceLaunchTemplate) *CapacityProviderManagedInstancesMonitoringOptions {
		return v.Monitoring
	}).(CapacityProviderManagedInstancesMonitoringOptionsPtrOutput)
}

// The network configuration for Amazon ECS Managed Instances. This specifies the subnets and security groups that instances use for network connectivity.
func (o CapacityProviderInstanceLaunchTemplateOutput) NetworkConfiguration() CapacityProviderManagedInstancesNetworkConfigurationOutput {
	return o.ApplyT(func(v CapacityProviderInstanceLaunchTemplate) CapacityProviderManagedInstancesNetworkConfiguration {
		return v.NetworkConfiguration
	}).(CapacityProviderManagedInstancesNetworkConfigurationOutput)
}

// The storage configuration for Amazon ECS Managed Instances. This defines the root volume size and type for the instances.
func (o CapacityProviderInstanceLaunchTemplateOutput) StorageConfiguration() CapacityProviderManagedInstancesStorageConfigurationPtrOutput {
	return o.ApplyT(func(v CapacityProviderInstanceLaunchTemplate) *CapacityProviderManagedInstancesStorageConfiguration {
		return v.StorageConfiguration
	}).(CapacityProviderManagedInstancesStorageConfigurationPtrOutput)
}

type CapacityProviderInstanceLaunchTemplatePtrOutput struct{ *pulumi.OutputState }

func (CapacityProviderInstanceLaunchTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityProviderInstanceLaunchTemplate)(nil)).Elem()
}

func (o CapacityProviderInstanceLaunchTemplatePtrOutput) ToCapacityProviderInstanceLaunchTemplatePtrOutput() CapacityProviderInstanceLaunchTemplatePtrOutput {
	return o
}

func (o CapacityProviderInstanceLaunchTemplatePtrOutput) ToCapacityProviderInstanceLaunchTemplatePtrOutputWithContext(ctx context.Context) CapacityProviderInstanceLaunchTemplatePtrOutput {
	return o
}

func (o CapacityProviderInstanceLaunchTemplatePtrOutput) Elem() CapacityProviderInstanceLaunchTemplateOutput {
	return o.ApplyT(func(v *CapacityProviderInstanceLaunchTemplate) CapacityProviderInstanceLaunchTemplate {
		if v != nil {
			return *v
		}
		var ret CapacityProviderInstanceLaunchTemplate
		return ret
	}).(CapacityProviderInstanceLaunchTemplateOutput)
}

// The Amazon Resource Name (ARN) of the instance profile that Amazon ECS applies to Amazon ECS Managed Instances. This instance profile must include the necessary permissions for your tasks to access AWS services and resources.
//
// For more information, see [Amazon ECS instance profile for Managed Instances](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/managed-instances-instance-profile.html) in the *Amazon ECS Developer Guide* .
func (o CapacityProviderInstanceLaunchTemplatePtrOutput) Ec2InstanceProfileArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CapacityProviderInstanceLaunchTemplate) *string {
		if v == nil {
			return nil
		}
		return &v.Ec2InstanceProfileArn
	}).(pulumi.StringPtrOutput)
}

// The instance requirements. You can specify:
//
// - The instance types
// - Instance requirements such as vCPU count, memory, network performance, and accelerator specifications
//
// Amazon ECS automatically selects the instances that match the specified criteria.
func (o CapacityProviderInstanceLaunchTemplatePtrOutput) InstanceRequirements() CapacityProviderInstanceRequirementsRequestPtrOutput {
	return o.ApplyT(func(v *CapacityProviderInstanceLaunchTemplate) *CapacityProviderInstanceRequirementsRequest {
		if v == nil {
			return nil
		}
		return v.InstanceRequirements
	}).(CapacityProviderInstanceRequirementsRequestPtrOutput)
}

// CloudWatch provides two categories of monitoring: basic monitoring and detailed monitoring. By default, your managed instance is configured for basic monitoring. You can optionally enable detailed monitoring to help you more quickly identify and act on operational issues. You can enable or turn off detailed monitoring at launch or when the managed instance is running or stopped. For more information, see [Detailed monitoring for Amazon ECS Managed Instances](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/detailed-monitoring-managed-instances.html) in the Amazon ECS Developer Guide.
func (o CapacityProviderInstanceLaunchTemplatePtrOutput) Monitoring() CapacityProviderManagedInstancesMonitoringOptionsPtrOutput {
	return o.ApplyT(func(v *CapacityProviderInstanceLaunchTemplate) *CapacityProviderManagedInstancesMonitoringOptions {
		if v == nil {
			return nil
		}
		return v.Monitoring
	}).(CapacityProviderManagedInstancesMonitoringOptionsPtrOutput)
}

// The network configuration for Amazon ECS Managed Instances. This specifies the subnets and security groups that instances use for network connectivity.
func (o CapacityProviderInstanceLaunchTemplatePtrOutput) NetworkConfiguration() CapacityProviderManagedInstancesNetworkConfigurationPtrOutput {
	return o.ApplyT(func(v *CapacityProviderInstanceLaunchTemplate) *CapacityProviderManagedInstancesNetworkConfiguration {
		if v == nil {
			return nil
		}
		return &v.NetworkConfiguration
	}).(CapacityProviderManagedInstancesNetworkConfigurationPtrOutput)
}

// The storage configuration for Amazon ECS Managed Instances. This defines the root volume size and type for the instances.
func (o CapacityProviderInstanceLaunchTemplatePtrOutput) StorageConfiguration() CapacityProviderManagedInstancesStorageConfigurationPtrOutput {
	return o.ApplyT(func(v *CapacityProviderInstanceLaunchTemplate) *CapacityProviderManagedInstancesStorageConfiguration {
		if v == nil {
			return nil
		}
		return v.StorageConfiguration
	}).(CapacityProviderManagedInstancesStorageConfigurationPtrOutput)
}

type CapacityProviderInstanceRequirementsRequest struct {
	// The minimum and maximum number of accelerators for the instance types. This is used when you need instances with specific numbers of GPUs or other accelerators.
	AcceleratorCount *CapacityProviderAcceleratorCountRequest `pulumi:"acceleratorCount"`
	// The accelerator manufacturers to include. You can specify `nvidia` , `amd` , `amazon-web-services` , or `xilinx` depending on your accelerator requirements.
	AcceleratorManufacturers []CapacityProviderInstanceRequirementsRequestAcceleratorManufacturersItem `pulumi:"acceleratorManufacturers"`
	// The specific accelerator names to include. For example, you can specify `a100` , `v100` , `k80` , or other specific accelerator models.
	AcceleratorNames []CapacityProviderInstanceRequirementsRequestAcceleratorNamesItem `pulumi:"acceleratorNames"`
	// The minimum and maximum total accelerator memory in mebibytes (MiB). This is important for GPU workloads that require specific amounts of video memory.
	AcceleratorTotalMemoryMiB *CapacityProviderAcceleratorTotalMemoryMiBRequest `pulumi:"acceleratorTotalMemoryMiB"`
	// The accelerator types to include. You can specify `gpu` for graphics processing units, `fpga` for field programmable gate arrays, or `inference` for machine learning inference accelerators.
	AcceleratorTypes []CapacityProviderInstanceRequirementsRequestAcceleratorTypesItem `pulumi:"acceleratorTypes"`
	// The instance types to include in the selection. When specified, Amazon ECS only considers these instance types, subject to the other requirements specified.
	AllowedInstanceTypes []string `pulumi:"allowedInstanceTypes"`
	// Indicates whether to include bare metal instance types. Set to `included` to allow bare metal instances, `excluded` to exclude them, or `required` to use only bare metal instances.
	BareMetal *CapacityProviderInstanceRequirementsRequestBareMetal `pulumi:"bareMetal"`
	// The minimum and maximum baseline Amazon EBS bandwidth in megabits per second (Mbps). This is important for workloads with high storage I/O requirements.
	BaselineEbsBandwidthMbps *CapacityProviderBaselineEbsBandwidthMbpsRequest `pulumi:"baselineEbsBandwidthMbps"`
	// Indicates whether to include burstable performance instance types (T2, T3, T3a, T4g). Set to `included` to allow burstable instances, `excluded` to exclude them, or `required` to use only burstable instances.
	BurstablePerformance *CapacityProviderInstanceRequirementsRequestBurstablePerformance `pulumi:"burstablePerformance"`
	// The CPU manufacturers to include or exclude. You can specify `intel` , `amd` , or `amazon-web-services` to control which CPU types are used for your workloads.
	CpuManufacturers []CapacityProviderInstanceRequirementsRequestCpuManufacturersItem `pulumi:"cpuManufacturers"`
	// The instance types to exclude from selection. Use this to prevent Amazon ECS from selecting specific instance types that may not be suitable for your workloads.
	ExcludedInstanceTypes []string `pulumi:"excludedInstanceTypes"`
	// The instance generations to include. You can specify `current` to use the latest generation instances, or `previous` to include previous generation instances for cost optimization.
	InstanceGenerations []CapacityProviderInstanceRequirementsRequestInstanceGenerationsItem `pulumi:"instanceGenerations"`
	// Indicates whether to include instance types with local storage. Set to `included` to allow local storage, `excluded` to exclude it, or `required` to use only instances with local storage.
	LocalStorage *CapacityProviderInstanceRequirementsRequestLocalStorage `pulumi:"localStorage"`
	// The local storage types to include. You can specify `hdd` for hard disk drives, `ssd` for solid state drives, or both.
	LocalStorageTypes []CapacityProviderInstanceRequirementsRequestLocalStorageTypesItem `pulumi:"localStorageTypes"`
	// The maximum price for Spot instances as a percentage of the optimal On-Demand price. This provides more precise cost control for Spot instance selection.
	MaxSpotPriceAsPercentageOfOptimalOnDemandPrice *int `pulumi:"maxSpotPriceAsPercentageOfOptimalOnDemandPrice"`
	// The minimum and maximum amount of memory per vCPU in gibibytes (GiB). This helps ensure that instance types have the appropriate memory-to-CPU ratio for your workloads.
	MemoryGiBPerVCpu *CapacityProviderMemoryGiBPerVCpuRequest `pulumi:"memoryGiBPerVCpu"`
	// The minimum and maximum amount of memory in mebibytes (MiB) for the instance types. Amazon ECS selects instance types that have memory within this range.
	MemoryMiB CapacityProviderMemoryMiBRequest `pulumi:"memoryMiB"`
	// The minimum and maximum network bandwidth in gigabits per second (Gbps). This is crucial for network-intensive workloads that require high throughput.
	NetworkBandwidthGbps *CapacityProviderNetworkBandwidthGbpsRequest `pulumi:"networkBandwidthGbps"`
	// The minimum and maximum number of network interfaces for the instance types. This is useful for workloads that require multiple network interfaces.
	NetworkInterfaceCount *CapacityProviderNetworkInterfaceCountRequest `pulumi:"networkInterfaceCount"`
	// The price protection threshold for On-Demand Instances, as a percentage higher than an identified On-Demand price. The identified On-Demand price is the price of the lowest priced current generation C, M, or R instance type with your specified attributes. If no current generation C, M, or R instance type matches your attributes, then the identified price is from either the lowest priced current generation instance types or, failing that, the lowest priced previous generation instance types that match your attributes. When Amazon ECS selects instance types with your attributes, we will exclude instance types whose price exceeds your specified threshold.
	OnDemandMaxPricePercentageOverLowestPrice *int `pulumi:"onDemandMaxPricePercentageOverLowestPrice"`
	// Indicates whether the instance types must support hibernation. When set to `true` , only instance types that support hibernation are selected.
	RequireHibernateSupport *bool `pulumi:"requireHibernateSupport"`
	// The maximum price for Spot instances as a percentage over the lowest priced On-Demand instance. This helps control Spot instance costs while maintaining access to capacity.
	SpotMaxPricePercentageOverLowestPrice *int `pulumi:"spotMaxPricePercentageOverLowestPrice"`
	// The minimum and maximum total local storage in gigabytes (GB) for instance types with local storage.
	TotalLocalStorageGb *CapacityProviderTotalLocalStorageGbRequest `pulumi:"totalLocalStorageGb"`
	// The minimum and maximum number of vCPUs for the instance types. Amazon ECS selects instance types that have vCPU counts within this range.
	VCpuCount CapacityProviderVCpuCountRangeRequest `pulumi:"vCpuCount"`
}

// CapacityProviderInstanceRequirementsRequestInput is an input type that accepts CapacityProviderInstanceRequirementsRequestArgs and CapacityProviderInstanceRequirementsRequestOutput values.
// You can construct a concrete instance of `CapacityProviderInstanceRequirementsRequestInput` via:
//
//	CapacityProviderInstanceRequirementsRequestArgs{...}
type CapacityProviderInstanceRequirementsRequestInput interface {
	pulumi.Input

	ToCapacityProviderInstanceRequirementsRequestOutput() CapacityProviderInstanceRequirementsRequestOutput
	ToCapacityProviderInstanceRequirementsRequestOutputWithContext(context.Context) CapacityProviderInstanceRequirementsRequestOutput
}

type CapacityProviderInstanceRequirementsRequestArgs struct {
	// The minimum and maximum number of accelerators for the instance types. This is used when you need instances with specific numbers of GPUs or other accelerators.
	AcceleratorCount CapacityProviderAcceleratorCountRequestPtrInput `pulumi:"acceleratorCount"`
	// The accelerator manufacturers to include. You can specify `nvidia` , `amd` , `amazon-web-services` , or `xilinx` depending on your accelerator requirements.
	AcceleratorManufacturers CapacityProviderInstanceRequirementsRequestAcceleratorManufacturersItemArrayInput `pulumi:"acceleratorManufacturers"`
	// The specific accelerator names to include. For example, you can specify `a100` , `v100` , `k80` , or other specific accelerator models.
	AcceleratorNames CapacityProviderInstanceRequirementsRequestAcceleratorNamesItemArrayInput `pulumi:"acceleratorNames"`
	// The minimum and maximum total accelerator memory in mebibytes (MiB). This is important for GPU workloads that require specific amounts of video memory.
	AcceleratorTotalMemoryMiB CapacityProviderAcceleratorTotalMemoryMiBRequestPtrInput `pulumi:"acceleratorTotalMemoryMiB"`
	// The accelerator types to include. You can specify `gpu` for graphics processing units, `fpga` for field programmable gate arrays, or `inference` for machine learning inference accelerators.
	AcceleratorTypes CapacityProviderInstanceRequirementsRequestAcceleratorTypesItemArrayInput `pulumi:"acceleratorTypes"`
	// The instance types to include in the selection. When specified, Amazon ECS only considers these instance types, subject to the other requirements specified.
	AllowedInstanceTypes pulumi.StringArrayInput `pulumi:"allowedInstanceTypes"`
	// Indicates whether to include bare metal instance types. Set to `included` to allow bare metal instances, `excluded` to exclude them, or `required` to use only bare metal instances.
	BareMetal CapacityProviderInstanceRequirementsRequestBareMetalPtrInput `pulumi:"bareMetal"`
	// The minimum and maximum baseline Amazon EBS bandwidth in megabits per second (Mbps). This is important for workloads with high storage I/O requirements.
	BaselineEbsBandwidthMbps CapacityProviderBaselineEbsBandwidthMbpsRequestPtrInput `pulumi:"baselineEbsBandwidthMbps"`
	// Indicates whether to include burstable performance instance types (T2, T3, T3a, T4g). Set to `included` to allow burstable instances, `excluded` to exclude them, or `required` to use only burstable instances.
	BurstablePerformance CapacityProviderInstanceRequirementsRequestBurstablePerformancePtrInput `pulumi:"burstablePerformance"`
	// The CPU manufacturers to include or exclude. You can specify `intel` , `amd` , or `amazon-web-services` to control which CPU types are used for your workloads.
	CpuManufacturers CapacityProviderInstanceRequirementsRequestCpuManufacturersItemArrayInput `pulumi:"cpuManufacturers"`
	// The instance types to exclude from selection. Use this to prevent Amazon ECS from selecting specific instance types that may not be suitable for your workloads.
	ExcludedInstanceTypes pulumi.StringArrayInput `pulumi:"excludedInstanceTypes"`
	// The instance generations to include. You can specify `current` to use the latest generation instances, or `previous` to include previous generation instances for cost optimization.
	InstanceGenerations CapacityProviderInstanceRequirementsRequestInstanceGenerationsItemArrayInput `pulumi:"instanceGenerations"`
	// Indicates whether to include instance types with local storage. Set to `included` to allow local storage, `excluded` to exclude it, or `required` to use only instances with local storage.
	LocalStorage CapacityProviderInstanceRequirementsRequestLocalStoragePtrInput `pulumi:"localStorage"`
	// The local storage types to include. You can specify `hdd` for hard disk drives, `ssd` for solid state drives, or both.
	LocalStorageTypes CapacityProviderInstanceRequirementsRequestLocalStorageTypesItemArrayInput `pulumi:"localStorageTypes"`
	// The maximum price for Spot instances as a percentage of the optimal On-Demand price. This provides more precise cost control for Spot instance selection.
	MaxSpotPriceAsPercentageOfOptimalOnDemandPrice pulumi.IntPtrInput `pulumi:"maxSpotPriceAsPercentageOfOptimalOnDemandPrice"`
	// The minimum and maximum amount of memory per vCPU in gibibytes (GiB). This helps ensure that instance types have the appropriate memory-to-CPU ratio for your workloads.
	MemoryGiBPerVCpu CapacityProviderMemoryGiBPerVCpuRequestPtrInput `pulumi:"memoryGiBPerVCpu"`
	// The minimum and maximum amount of memory in mebibytes (MiB) for the instance types. Amazon ECS selects instance types that have memory within this range.
	MemoryMiB CapacityProviderMemoryMiBRequestInput `pulumi:"memoryMiB"`
	// The minimum and maximum network bandwidth in gigabits per second (Gbps). This is crucial for network-intensive workloads that require high throughput.
	NetworkBandwidthGbps CapacityProviderNetworkBandwidthGbpsRequestPtrInput `pulumi:"networkBandwidthGbps"`
	// The minimum and maximum number of network interfaces for the instance types. This is useful for workloads that require multiple network interfaces.
	NetworkInterfaceCount CapacityProviderNetworkInterfaceCountRequestPtrInput `pulumi:"networkInterfaceCount"`
	// The price protection threshold for On-Demand Instances, as a percentage higher than an identified On-Demand price. The identified On-Demand price is the price of the lowest priced current generation C, M, or R instance type with your specified attributes. If no current generation C, M, or R instance type matches your attributes, then the identified price is from either the lowest priced current generation instance types or, failing that, the lowest priced previous generation instance types that match your attributes. When Amazon ECS selects instance types with your attributes, we will exclude instance types whose price exceeds your specified threshold.
	OnDemandMaxPricePercentageOverLowestPrice pulumi.IntPtrInput `pulumi:"onDemandMaxPricePercentageOverLowestPrice"`
	// Indicates whether the instance types must support hibernation. When set to `true` , only instance types that support hibernation are selected.
	RequireHibernateSupport pulumi.BoolPtrInput `pulumi:"requireHibernateSupport"`
	// The maximum price for Spot instances as a percentage over the lowest priced On-Demand instance. This helps control Spot instance costs while maintaining access to capacity.
	SpotMaxPricePercentageOverLowestPrice pulumi.IntPtrInput `pulumi:"spotMaxPricePercentageOverLowestPrice"`
	// The minimum and maximum total local storage in gigabytes (GB) for instance types with local storage.
	TotalLocalStorageGb CapacityProviderTotalLocalStorageGbRequestPtrInput `pulumi:"totalLocalStorageGb"`
	// The minimum and maximum number of vCPUs for the instance types. Amazon ECS selects instance types that have vCPU counts within this range.
	VCpuCount CapacityProviderVCpuCountRangeRequestInput `pulumi:"vCpuCount"`
}

func (CapacityProviderInstanceRequirementsRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityProviderInstanceRequirementsRequest)(nil)).Elem()
}

func (i CapacityProviderInstanceRequirementsRequestArgs) ToCapacityProviderInstanceRequirementsRequestOutput() CapacityProviderInstanceRequirementsRequestOutput {
	return i.ToCapacityProviderInstanceRequirementsRequestOutputWithContext(context.Background())
}

func (i CapacityProviderInstanceRequirementsRequestArgs) ToCapacityProviderInstanceRequirementsRequestOutputWithContext(ctx context.Context) CapacityProviderInstanceRequirementsRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderInstanceRequirementsRequestOutput)
}

func (i CapacityProviderInstanceRequirementsRequestArgs) ToCapacityProviderInstanceRequirementsRequestPtrOutput() CapacityProviderInstanceRequirementsRequestPtrOutput {
	return i.ToCapacityProviderInstanceRequirementsRequestPtrOutputWithContext(context.Background())
}

func (i CapacityProviderInstanceRequirementsRequestArgs) ToCapacityProviderInstanceRequirementsRequestPtrOutputWithContext(ctx context.Context) CapacityProviderInstanceRequirementsRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderInstanceRequirementsRequestOutput).ToCapacityProviderInstanceRequirementsRequestPtrOutputWithContext(ctx)
}

// CapacityProviderInstanceRequirementsRequestPtrInput is an input type that accepts CapacityProviderInstanceRequirementsRequestArgs, CapacityProviderInstanceRequirementsRequestPtr and CapacityProviderInstanceRequirementsRequestPtrOutput values.
// You can construct a concrete instance of `CapacityProviderInstanceRequirementsRequestPtrInput` via:
//
//	        CapacityProviderInstanceRequirementsRequestArgs{...}
//
//	or:
//
//	        nil
type CapacityProviderInstanceRequirementsRequestPtrInput interface {
	pulumi.Input

	ToCapacityProviderInstanceRequirementsRequestPtrOutput() CapacityProviderInstanceRequirementsRequestPtrOutput
	ToCapacityProviderInstanceRequirementsRequestPtrOutputWithContext(context.Context) CapacityProviderInstanceRequirementsRequestPtrOutput
}

type capacityProviderInstanceRequirementsRequestPtrType CapacityProviderInstanceRequirementsRequestArgs

func CapacityProviderInstanceRequirementsRequestPtr(v *CapacityProviderInstanceRequirementsRequestArgs) CapacityProviderInstanceRequirementsRequestPtrInput {
	return (*capacityProviderInstanceRequirementsRequestPtrType)(v)
}

func (*capacityProviderInstanceRequirementsRequestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityProviderInstanceRequirementsRequest)(nil)).Elem()
}

func (i *capacityProviderInstanceRequirementsRequestPtrType) ToCapacityProviderInstanceRequirementsRequestPtrOutput() CapacityProviderInstanceRequirementsRequestPtrOutput {
	return i.ToCapacityProviderInstanceRequirementsRequestPtrOutputWithContext(context.Background())
}

func (i *capacityProviderInstanceRequirementsRequestPtrType) ToCapacityProviderInstanceRequirementsRequestPtrOutputWithContext(ctx context.Context) CapacityProviderInstanceRequirementsRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderInstanceRequirementsRequestPtrOutput)
}

type CapacityProviderInstanceRequirementsRequestOutput struct{ *pulumi.OutputState }

func (CapacityProviderInstanceRequirementsRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityProviderInstanceRequirementsRequest)(nil)).Elem()
}

func (o CapacityProviderInstanceRequirementsRequestOutput) ToCapacityProviderInstanceRequirementsRequestOutput() CapacityProviderInstanceRequirementsRequestOutput {
	return o
}

func (o CapacityProviderInstanceRequirementsRequestOutput) ToCapacityProviderInstanceRequirementsRequestOutputWithContext(ctx context.Context) CapacityProviderInstanceRequirementsRequestOutput {
	return o
}

func (o CapacityProviderInstanceRequirementsRequestOutput) ToCapacityProviderInstanceRequirementsRequestPtrOutput() CapacityProviderInstanceRequirementsRequestPtrOutput {
	return o.ToCapacityProviderInstanceRequirementsRequestPtrOutputWithContext(context.Background())
}

func (o CapacityProviderInstanceRequirementsRequestOutput) ToCapacityProviderInstanceRequirementsRequestPtrOutputWithContext(ctx context.Context) CapacityProviderInstanceRequirementsRequestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CapacityProviderInstanceRequirementsRequest) *CapacityProviderInstanceRequirementsRequest {
		return &v
	}).(CapacityProviderInstanceRequirementsRequestPtrOutput)
}

// The minimum and maximum number of accelerators for the instance types. This is used when you need instances with specific numbers of GPUs or other accelerators.
func (o CapacityProviderInstanceRequirementsRequestOutput) AcceleratorCount() CapacityProviderAcceleratorCountRequestPtrOutput {
	return o.ApplyT(func(v CapacityProviderInstanceRequirementsRequest) *CapacityProviderAcceleratorCountRequest {
		return v.AcceleratorCount
	}).(CapacityProviderAcceleratorCountRequestPtrOutput)
}

// The accelerator manufacturers to include. You can specify `nvidia` , `amd` , `amazon-web-services` , or `xilinx` depending on your accelerator requirements.
func (o CapacityProviderInstanceRequirementsRequestOutput) AcceleratorManufacturers() CapacityProviderInstanceRequirementsRequestAcceleratorManufacturersItemArrayOutput {
	return o.ApplyT(func(v CapacityProviderInstanceRequirementsRequest) []CapacityProviderInstanceRequirementsRequestAcceleratorManufacturersItem {
		return v.AcceleratorManufacturers
	}).(CapacityProviderInstanceRequirementsRequestAcceleratorManufacturersItemArrayOutput)
}

// The specific accelerator names to include. For example, you can specify `a100` , `v100` , `k80` , or other specific accelerator models.
func (o CapacityProviderInstanceRequirementsRequestOutput) AcceleratorNames() CapacityProviderInstanceRequirementsRequestAcceleratorNamesItemArrayOutput {
	return o.ApplyT(func(v CapacityProviderInstanceRequirementsRequest) []CapacityProviderInstanceRequirementsRequestAcceleratorNamesItem {
		return v.AcceleratorNames
	}).(CapacityProviderInstanceRequirementsRequestAcceleratorNamesItemArrayOutput)
}

// The minimum and maximum total accelerator memory in mebibytes (MiB). This is important for GPU workloads that require specific amounts of video memory.
func (o CapacityProviderInstanceRequirementsRequestOutput) AcceleratorTotalMemoryMiB() CapacityProviderAcceleratorTotalMemoryMiBRequestPtrOutput {
	return o.ApplyT(func(v CapacityProviderInstanceRequirementsRequest) *CapacityProviderAcceleratorTotalMemoryMiBRequest {
		return v.AcceleratorTotalMemoryMiB
	}).(CapacityProviderAcceleratorTotalMemoryMiBRequestPtrOutput)
}

// The accelerator types to include. You can specify `gpu` for graphics processing units, `fpga` for field programmable gate arrays, or `inference` for machine learning inference accelerators.
func (o CapacityProviderInstanceRequirementsRequestOutput) AcceleratorTypes() CapacityProviderInstanceRequirementsRequestAcceleratorTypesItemArrayOutput {
	return o.ApplyT(func(v CapacityProviderInstanceRequirementsRequest) []CapacityProviderInstanceRequirementsRequestAcceleratorTypesItem {
		return v.AcceleratorTypes
	}).(CapacityProviderInstanceRequirementsRequestAcceleratorTypesItemArrayOutput)
}

// The instance types to include in the selection. When specified, Amazon ECS only considers these instance types, subject to the other requirements specified.
func (o CapacityProviderInstanceRequirementsRequestOutput) AllowedInstanceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CapacityProviderInstanceRequirementsRequest) []string { return v.AllowedInstanceTypes }).(pulumi.StringArrayOutput)
}

// Indicates whether to include bare metal instance types. Set to `included` to allow bare metal instances, `excluded` to exclude them, or `required` to use only bare metal instances.
func (o CapacityProviderInstanceRequirementsRequestOutput) BareMetal() CapacityProviderInstanceRequirementsRequestBareMetalPtrOutput {
	return o.ApplyT(func(v CapacityProviderInstanceRequirementsRequest) *CapacityProviderInstanceRequirementsRequestBareMetal {
		return v.BareMetal
	}).(CapacityProviderInstanceRequirementsRequestBareMetalPtrOutput)
}

// The minimum and maximum baseline Amazon EBS bandwidth in megabits per second (Mbps). This is important for workloads with high storage I/O requirements.
func (o CapacityProviderInstanceRequirementsRequestOutput) BaselineEbsBandwidthMbps() CapacityProviderBaselineEbsBandwidthMbpsRequestPtrOutput {
	return o.ApplyT(func(v CapacityProviderInstanceRequirementsRequest) *CapacityProviderBaselineEbsBandwidthMbpsRequest {
		return v.BaselineEbsBandwidthMbps
	}).(CapacityProviderBaselineEbsBandwidthMbpsRequestPtrOutput)
}

// Indicates whether to include burstable performance instance types (T2, T3, T3a, T4g). Set to `included` to allow burstable instances, `excluded` to exclude them, or `required` to use only burstable instances.
func (o CapacityProviderInstanceRequirementsRequestOutput) BurstablePerformance() CapacityProviderInstanceRequirementsRequestBurstablePerformancePtrOutput {
	return o.ApplyT(func(v CapacityProviderInstanceRequirementsRequest) *CapacityProviderInstanceRequirementsRequestBurstablePerformance {
		return v.BurstablePerformance
	}).(CapacityProviderInstanceRequirementsRequestBurstablePerformancePtrOutput)
}

// The CPU manufacturers to include or exclude. You can specify `intel` , `amd` , or `amazon-web-services` to control which CPU types are used for your workloads.
func (o CapacityProviderInstanceRequirementsRequestOutput) CpuManufacturers() CapacityProviderInstanceRequirementsRequestCpuManufacturersItemArrayOutput {
	return o.ApplyT(func(v CapacityProviderInstanceRequirementsRequest) []CapacityProviderInstanceRequirementsRequestCpuManufacturersItem {
		return v.CpuManufacturers
	}).(CapacityProviderInstanceRequirementsRequestCpuManufacturersItemArrayOutput)
}

// The instance types to exclude from selection. Use this to prevent Amazon ECS from selecting specific instance types that may not be suitable for your workloads.
func (o CapacityProviderInstanceRequirementsRequestOutput) ExcludedInstanceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CapacityProviderInstanceRequirementsRequest) []string { return v.ExcludedInstanceTypes }).(pulumi.StringArrayOutput)
}

// The instance generations to include. You can specify `current` to use the latest generation instances, or `previous` to include previous generation instances for cost optimization.
func (o CapacityProviderInstanceRequirementsRequestOutput) InstanceGenerations() CapacityProviderInstanceRequirementsRequestInstanceGenerationsItemArrayOutput {
	return o.ApplyT(func(v CapacityProviderInstanceRequirementsRequest) []CapacityProviderInstanceRequirementsRequestInstanceGenerationsItem {
		return v.InstanceGenerations
	}).(CapacityProviderInstanceRequirementsRequestInstanceGenerationsItemArrayOutput)
}

// Indicates whether to include instance types with local storage. Set to `included` to allow local storage, `excluded` to exclude it, or `required` to use only instances with local storage.
func (o CapacityProviderInstanceRequirementsRequestOutput) LocalStorage() CapacityProviderInstanceRequirementsRequestLocalStoragePtrOutput {
	return o.ApplyT(func(v CapacityProviderInstanceRequirementsRequest) *CapacityProviderInstanceRequirementsRequestLocalStorage {
		return v.LocalStorage
	}).(CapacityProviderInstanceRequirementsRequestLocalStoragePtrOutput)
}

// The local storage types to include. You can specify `hdd` for hard disk drives, `ssd` for solid state drives, or both.
func (o CapacityProviderInstanceRequirementsRequestOutput) LocalStorageTypes() CapacityProviderInstanceRequirementsRequestLocalStorageTypesItemArrayOutput {
	return o.ApplyT(func(v CapacityProviderInstanceRequirementsRequest) []CapacityProviderInstanceRequirementsRequestLocalStorageTypesItem {
		return v.LocalStorageTypes
	}).(CapacityProviderInstanceRequirementsRequestLocalStorageTypesItemArrayOutput)
}

// The maximum price for Spot instances as a percentage of the optimal On-Demand price. This provides more precise cost control for Spot instance selection.
func (o CapacityProviderInstanceRequirementsRequestOutput) MaxSpotPriceAsPercentageOfOptimalOnDemandPrice() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CapacityProviderInstanceRequirementsRequest) *int {
		return v.MaxSpotPriceAsPercentageOfOptimalOnDemandPrice
	}).(pulumi.IntPtrOutput)
}

// The minimum and maximum amount of memory per vCPU in gibibytes (GiB). This helps ensure that instance types have the appropriate memory-to-CPU ratio for your workloads.
func (o CapacityProviderInstanceRequirementsRequestOutput) MemoryGiBPerVCpu() CapacityProviderMemoryGiBPerVCpuRequestPtrOutput {
	return o.ApplyT(func(v CapacityProviderInstanceRequirementsRequest) *CapacityProviderMemoryGiBPerVCpuRequest {
		return v.MemoryGiBPerVCpu
	}).(CapacityProviderMemoryGiBPerVCpuRequestPtrOutput)
}

// The minimum and maximum amount of memory in mebibytes (MiB) for the instance types. Amazon ECS selects instance types that have memory within this range.
func (o CapacityProviderInstanceRequirementsRequestOutput) MemoryMiB() CapacityProviderMemoryMiBRequestOutput {
	return o.ApplyT(func(v CapacityProviderInstanceRequirementsRequest) CapacityProviderMemoryMiBRequest {
		return v.MemoryMiB
	}).(CapacityProviderMemoryMiBRequestOutput)
}

// The minimum and maximum network bandwidth in gigabits per second (Gbps). This is crucial for network-intensive workloads that require high throughput.
func (o CapacityProviderInstanceRequirementsRequestOutput) NetworkBandwidthGbps() CapacityProviderNetworkBandwidthGbpsRequestPtrOutput {
	return o.ApplyT(func(v CapacityProviderInstanceRequirementsRequest) *CapacityProviderNetworkBandwidthGbpsRequest {
		return v.NetworkBandwidthGbps
	}).(CapacityProviderNetworkBandwidthGbpsRequestPtrOutput)
}

// The minimum and maximum number of network interfaces for the instance types. This is useful for workloads that require multiple network interfaces.
func (o CapacityProviderInstanceRequirementsRequestOutput) NetworkInterfaceCount() CapacityProviderNetworkInterfaceCountRequestPtrOutput {
	return o.ApplyT(func(v CapacityProviderInstanceRequirementsRequest) *CapacityProviderNetworkInterfaceCountRequest {
		return v.NetworkInterfaceCount
	}).(CapacityProviderNetworkInterfaceCountRequestPtrOutput)
}

// The price protection threshold for On-Demand Instances, as a percentage higher than an identified On-Demand price. The identified On-Demand price is the price of the lowest priced current generation C, M, or R instance type with your specified attributes. If no current generation C, M, or R instance type matches your attributes, then the identified price is from either the lowest priced current generation instance types or, failing that, the lowest priced previous generation instance types that match your attributes. When Amazon ECS selects instance types with your attributes, we will exclude instance types whose price exceeds your specified threshold.
func (o CapacityProviderInstanceRequirementsRequestOutput) OnDemandMaxPricePercentageOverLowestPrice() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CapacityProviderInstanceRequirementsRequest) *int {
		return v.OnDemandMaxPricePercentageOverLowestPrice
	}).(pulumi.IntPtrOutput)
}

// Indicates whether the instance types must support hibernation. When set to `true` , only instance types that support hibernation are selected.
func (o CapacityProviderInstanceRequirementsRequestOutput) RequireHibernateSupport() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CapacityProviderInstanceRequirementsRequest) *bool { return v.RequireHibernateSupport }).(pulumi.BoolPtrOutput)
}

// The maximum price for Spot instances as a percentage over the lowest priced On-Demand instance. This helps control Spot instance costs while maintaining access to capacity.
func (o CapacityProviderInstanceRequirementsRequestOutput) SpotMaxPricePercentageOverLowestPrice() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CapacityProviderInstanceRequirementsRequest) *int {
		return v.SpotMaxPricePercentageOverLowestPrice
	}).(pulumi.IntPtrOutput)
}

// The minimum and maximum total local storage in gigabytes (GB) for instance types with local storage.
func (o CapacityProviderInstanceRequirementsRequestOutput) TotalLocalStorageGb() CapacityProviderTotalLocalStorageGbRequestPtrOutput {
	return o.ApplyT(func(v CapacityProviderInstanceRequirementsRequest) *CapacityProviderTotalLocalStorageGbRequest {
		return v.TotalLocalStorageGb
	}).(CapacityProviderTotalLocalStorageGbRequestPtrOutput)
}

// The minimum and maximum number of vCPUs for the instance types. Amazon ECS selects instance types that have vCPU counts within this range.
func (o CapacityProviderInstanceRequirementsRequestOutput) VCpuCount() CapacityProviderVCpuCountRangeRequestOutput {
	return o.ApplyT(func(v CapacityProviderInstanceRequirementsRequest) CapacityProviderVCpuCountRangeRequest {
		return v.VCpuCount
	}).(CapacityProviderVCpuCountRangeRequestOutput)
}

type CapacityProviderInstanceRequirementsRequestPtrOutput struct{ *pulumi.OutputState }

func (CapacityProviderInstanceRequirementsRequestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityProviderInstanceRequirementsRequest)(nil)).Elem()
}

func (o CapacityProviderInstanceRequirementsRequestPtrOutput) ToCapacityProviderInstanceRequirementsRequestPtrOutput() CapacityProviderInstanceRequirementsRequestPtrOutput {
	return o
}

func (o CapacityProviderInstanceRequirementsRequestPtrOutput) ToCapacityProviderInstanceRequirementsRequestPtrOutputWithContext(ctx context.Context) CapacityProviderInstanceRequirementsRequestPtrOutput {
	return o
}

func (o CapacityProviderInstanceRequirementsRequestPtrOutput) Elem() CapacityProviderInstanceRequirementsRequestOutput {
	return o.ApplyT(func(v *CapacityProviderInstanceRequirementsRequest) CapacityProviderInstanceRequirementsRequest {
		if v != nil {
			return *v
		}
		var ret CapacityProviderInstanceRequirementsRequest
		return ret
	}).(CapacityProviderInstanceRequirementsRequestOutput)
}

// The minimum and maximum number of accelerators for the instance types. This is used when you need instances with specific numbers of GPUs or other accelerators.
func (o CapacityProviderInstanceRequirementsRequestPtrOutput) AcceleratorCount() CapacityProviderAcceleratorCountRequestPtrOutput {
	return o.ApplyT(func(v *CapacityProviderInstanceRequirementsRequest) *CapacityProviderAcceleratorCountRequest {
		if v == nil {
			return nil
		}
		return v.AcceleratorCount
	}).(CapacityProviderAcceleratorCountRequestPtrOutput)
}

// The accelerator manufacturers to include. You can specify `nvidia` , `amd` , `amazon-web-services` , or `xilinx` depending on your accelerator requirements.
func (o CapacityProviderInstanceRequirementsRequestPtrOutput) AcceleratorManufacturers() CapacityProviderInstanceRequirementsRequestAcceleratorManufacturersItemArrayOutput {
	return o.ApplyT(func(v *CapacityProviderInstanceRequirementsRequest) []CapacityProviderInstanceRequirementsRequestAcceleratorManufacturersItem {
		if v == nil {
			return nil
		}
		return v.AcceleratorManufacturers
	}).(CapacityProviderInstanceRequirementsRequestAcceleratorManufacturersItemArrayOutput)
}

// The specific accelerator names to include. For example, you can specify `a100` , `v100` , `k80` , or other specific accelerator models.
func (o CapacityProviderInstanceRequirementsRequestPtrOutput) AcceleratorNames() CapacityProviderInstanceRequirementsRequestAcceleratorNamesItemArrayOutput {
	return o.ApplyT(func(v *CapacityProviderInstanceRequirementsRequest) []CapacityProviderInstanceRequirementsRequestAcceleratorNamesItem {
		if v == nil {
			return nil
		}
		return v.AcceleratorNames
	}).(CapacityProviderInstanceRequirementsRequestAcceleratorNamesItemArrayOutput)
}

// The minimum and maximum total accelerator memory in mebibytes (MiB). This is important for GPU workloads that require specific amounts of video memory.
func (o CapacityProviderInstanceRequirementsRequestPtrOutput) AcceleratorTotalMemoryMiB() CapacityProviderAcceleratorTotalMemoryMiBRequestPtrOutput {
	return o.ApplyT(func(v *CapacityProviderInstanceRequirementsRequest) *CapacityProviderAcceleratorTotalMemoryMiBRequest {
		if v == nil {
			return nil
		}
		return v.AcceleratorTotalMemoryMiB
	}).(CapacityProviderAcceleratorTotalMemoryMiBRequestPtrOutput)
}

// The accelerator types to include. You can specify `gpu` for graphics processing units, `fpga` for field programmable gate arrays, or `inference` for machine learning inference accelerators.
func (o CapacityProviderInstanceRequirementsRequestPtrOutput) AcceleratorTypes() CapacityProviderInstanceRequirementsRequestAcceleratorTypesItemArrayOutput {
	return o.ApplyT(func(v *CapacityProviderInstanceRequirementsRequest) []CapacityProviderInstanceRequirementsRequestAcceleratorTypesItem {
		if v == nil {
			return nil
		}
		return v.AcceleratorTypes
	}).(CapacityProviderInstanceRequirementsRequestAcceleratorTypesItemArrayOutput)
}

// The instance types to include in the selection. When specified, Amazon ECS only considers these instance types, subject to the other requirements specified.
func (o CapacityProviderInstanceRequirementsRequestPtrOutput) AllowedInstanceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CapacityProviderInstanceRequirementsRequest) []string {
		if v == nil {
			return nil
		}
		return v.AllowedInstanceTypes
	}).(pulumi.StringArrayOutput)
}

// Indicates whether to include bare metal instance types. Set to `included` to allow bare metal instances, `excluded` to exclude them, or `required` to use only bare metal instances.
func (o CapacityProviderInstanceRequirementsRequestPtrOutput) BareMetal() CapacityProviderInstanceRequirementsRequestBareMetalPtrOutput {
	return o.ApplyT(func(v *CapacityProviderInstanceRequirementsRequest) *CapacityProviderInstanceRequirementsRequestBareMetal {
		if v == nil {
			return nil
		}
		return v.BareMetal
	}).(CapacityProviderInstanceRequirementsRequestBareMetalPtrOutput)
}

// The minimum and maximum baseline Amazon EBS bandwidth in megabits per second (Mbps). This is important for workloads with high storage I/O requirements.
func (o CapacityProviderInstanceRequirementsRequestPtrOutput) BaselineEbsBandwidthMbps() CapacityProviderBaselineEbsBandwidthMbpsRequestPtrOutput {
	return o.ApplyT(func(v *CapacityProviderInstanceRequirementsRequest) *CapacityProviderBaselineEbsBandwidthMbpsRequest {
		if v == nil {
			return nil
		}
		return v.BaselineEbsBandwidthMbps
	}).(CapacityProviderBaselineEbsBandwidthMbpsRequestPtrOutput)
}

// Indicates whether to include burstable performance instance types (T2, T3, T3a, T4g). Set to `included` to allow burstable instances, `excluded` to exclude them, or `required` to use only burstable instances.
func (o CapacityProviderInstanceRequirementsRequestPtrOutput) BurstablePerformance() CapacityProviderInstanceRequirementsRequestBurstablePerformancePtrOutput {
	return o.ApplyT(func(v *CapacityProviderInstanceRequirementsRequest) *CapacityProviderInstanceRequirementsRequestBurstablePerformance {
		if v == nil {
			return nil
		}
		return v.BurstablePerformance
	}).(CapacityProviderInstanceRequirementsRequestBurstablePerformancePtrOutput)
}

// The CPU manufacturers to include or exclude. You can specify `intel` , `amd` , or `amazon-web-services` to control which CPU types are used for your workloads.
func (o CapacityProviderInstanceRequirementsRequestPtrOutput) CpuManufacturers() CapacityProviderInstanceRequirementsRequestCpuManufacturersItemArrayOutput {
	return o.ApplyT(func(v *CapacityProviderInstanceRequirementsRequest) []CapacityProviderInstanceRequirementsRequestCpuManufacturersItem {
		if v == nil {
			return nil
		}
		return v.CpuManufacturers
	}).(CapacityProviderInstanceRequirementsRequestCpuManufacturersItemArrayOutput)
}

// The instance types to exclude from selection. Use this to prevent Amazon ECS from selecting specific instance types that may not be suitable for your workloads.
func (o CapacityProviderInstanceRequirementsRequestPtrOutput) ExcludedInstanceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CapacityProviderInstanceRequirementsRequest) []string {
		if v == nil {
			return nil
		}
		return v.ExcludedInstanceTypes
	}).(pulumi.StringArrayOutput)
}

// The instance generations to include. You can specify `current` to use the latest generation instances, or `previous` to include previous generation instances for cost optimization.
func (o CapacityProviderInstanceRequirementsRequestPtrOutput) InstanceGenerations() CapacityProviderInstanceRequirementsRequestInstanceGenerationsItemArrayOutput {
	return o.ApplyT(func(v *CapacityProviderInstanceRequirementsRequest) []CapacityProviderInstanceRequirementsRequestInstanceGenerationsItem {
		if v == nil {
			return nil
		}
		return v.InstanceGenerations
	}).(CapacityProviderInstanceRequirementsRequestInstanceGenerationsItemArrayOutput)
}

// Indicates whether to include instance types with local storage. Set to `included` to allow local storage, `excluded` to exclude it, or `required` to use only instances with local storage.
func (o CapacityProviderInstanceRequirementsRequestPtrOutput) LocalStorage() CapacityProviderInstanceRequirementsRequestLocalStoragePtrOutput {
	return o.ApplyT(func(v *CapacityProviderInstanceRequirementsRequest) *CapacityProviderInstanceRequirementsRequestLocalStorage {
		if v == nil {
			return nil
		}
		return v.LocalStorage
	}).(CapacityProviderInstanceRequirementsRequestLocalStoragePtrOutput)
}

// The local storage types to include. You can specify `hdd` for hard disk drives, `ssd` for solid state drives, or both.
func (o CapacityProviderInstanceRequirementsRequestPtrOutput) LocalStorageTypes() CapacityProviderInstanceRequirementsRequestLocalStorageTypesItemArrayOutput {
	return o.ApplyT(func(v *CapacityProviderInstanceRequirementsRequest) []CapacityProviderInstanceRequirementsRequestLocalStorageTypesItem {
		if v == nil {
			return nil
		}
		return v.LocalStorageTypes
	}).(CapacityProviderInstanceRequirementsRequestLocalStorageTypesItemArrayOutput)
}

// The maximum price for Spot instances as a percentage of the optimal On-Demand price. This provides more precise cost control for Spot instance selection.
func (o CapacityProviderInstanceRequirementsRequestPtrOutput) MaxSpotPriceAsPercentageOfOptimalOnDemandPrice() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CapacityProviderInstanceRequirementsRequest) *int {
		if v == nil {
			return nil
		}
		return v.MaxSpotPriceAsPercentageOfOptimalOnDemandPrice
	}).(pulumi.IntPtrOutput)
}

// The minimum and maximum amount of memory per vCPU in gibibytes (GiB). This helps ensure that instance types have the appropriate memory-to-CPU ratio for your workloads.
func (o CapacityProviderInstanceRequirementsRequestPtrOutput) MemoryGiBPerVCpu() CapacityProviderMemoryGiBPerVCpuRequestPtrOutput {
	return o.ApplyT(func(v *CapacityProviderInstanceRequirementsRequest) *CapacityProviderMemoryGiBPerVCpuRequest {
		if v == nil {
			return nil
		}
		return v.MemoryGiBPerVCpu
	}).(CapacityProviderMemoryGiBPerVCpuRequestPtrOutput)
}

// The minimum and maximum amount of memory in mebibytes (MiB) for the instance types. Amazon ECS selects instance types that have memory within this range.
func (o CapacityProviderInstanceRequirementsRequestPtrOutput) MemoryMiB() CapacityProviderMemoryMiBRequestPtrOutput {
	return o.ApplyT(func(v *CapacityProviderInstanceRequirementsRequest) *CapacityProviderMemoryMiBRequest {
		if v == nil {
			return nil
		}
		return &v.MemoryMiB
	}).(CapacityProviderMemoryMiBRequestPtrOutput)
}

// The minimum and maximum network bandwidth in gigabits per second (Gbps). This is crucial for network-intensive workloads that require high throughput.
func (o CapacityProviderInstanceRequirementsRequestPtrOutput) NetworkBandwidthGbps() CapacityProviderNetworkBandwidthGbpsRequestPtrOutput {
	return o.ApplyT(func(v *CapacityProviderInstanceRequirementsRequest) *CapacityProviderNetworkBandwidthGbpsRequest {
		if v == nil {
			return nil
		}
		return v.NetworkBandwidthGbps
	}).(CapacityProviderNetworkBandwidthGbpsRequestPtrOutput)
}

// The minimum and maximum number of network interfaces for the instance types. This is useful for workloads that require multiple network interfaces.
func (o CapacityProviderInstanceRequirementsRequestPtrOutput) NetworkInterfaceCount() CapacityProviderNetworkInterfaceCountRequestPtrOutput {
	return o.ApplyT(func(v *CapacityProviderInstanceRequirementsRequest) *CapacityProviderNetworkInterfaceCountRequest {
		if v == nil {
			return nil
		}
		return v.NetworkInterfaceCount
	}).(CapacityProviderNetworkInterfaceCountRequestPtrOutput)
}

// The price protection threshold for On-Demand Instances, as a percentage higher than an identified On-Demand price. The identified On-Demand price is the price of the lowest priced current generation C, M, or R instance type with your specified attributes. If no current generation C, M, or R instance type matches your attributes, then the identified price is from either the lowest priced current generation instance types or, failing that, the lowest priced previous generation instance types that match your attributes. When Amazon ECS selects instance types with your attributes, we will exclude instance types whose price exceeds your specified threshold.
func (o CapacityProviderInstanceRequirementsRequestPtrOutput) OnDemandMaxPricePercentageOverLowestPrice() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CapacityProviderInstanceRequirementsRequest) *int {
		if v == nil {
			return nil
		}
		return v.OnDemandMaxPricePercentageOverLowestPrice
	}).(pulumi.IntPtrOutput)
}

// Indicates whether the instance types must support hibernation. When set to `true` , only instance types that support hibernation are selected.
func (o CapacityProviderInstanceRequirementsRequestPtrOutput) RequireHibernateSupport() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CapacityProviderInstanceRequirementsRequest) *bool {
		if v == nil {
			return nil
		}
		return v.RequireHibernateSupport
	}).(pulumi.BoolPtrOutput)
}

// The maximum price for Spot instances as a percentage over the lowest priced On-Demand instance. This helps control Spot instance costs while maintaining access to capacity.
func (o CapacityProviderInstanceRequirementsRequestPtrOutput) SpotMaxPricePercentageOverLowestPrice() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CapacityProviderInstanceRequirementsRequest) *int {
		if v == nil {
			return nil
		}
		return v.SpotMaxPricePercentageOverLowestPrice
	}).(pulumi.IntPtrOutput)
}

// The minimum and maximum total local storage in gigabytes (GB) for instance types with local storage.
func (o CapacityProviderInstanceRequirementsRequestPtrOutput) TotalLocalStorageGb() CapacityProviderTotalLocalStorageGbRequestPtrOutput {
	return o.ApplyT(func(v *CapacityProviderInstanceRequirementsRequest) *CapacityProviderTotalLocalStorageGbRequest {
		if v == nil {
			return nil
		}
		return v.TotalLocalStorageGb
	}).(CapacityProviderTotalLocalStorageGbRequestPtrOutput)
}

// The minimum and maximum number of vCPUs for the instance types. Amazon ECS selects instance types that have vCPU counts within this range.
func (o CapacityProviderInstanceRequirementsRequestPtrOutput) VCpuCount() CapacityProviderVCpuCountRangeRequestPtrOutput {
	return o.ApplyT(func(v *CapacityProviderInstanceRequirementsRequest) *CapacityProviderVCpuCountRangeRequest {
		if v == nil {
			return nil
		}
		return &v.VCpuCount
	}).(CapacityProviderVCpuCountRangeRequestPtrOutput)
}

type CapacityProviderManagedInstancesNetworkConfiguration struct {
	// The list of security group IDs to apply to Amazon ECS Managed Instances. These security groups control the network traffic allowed to and from the instances.
	SecurityGroups []string `pulumi:"securityGroups"`
	// The list of subnet IDs where Amazon ECS can launch Amazon ECS Managed Instances. Instances are distributed across the specified subnets for high availability. All subnets must be in the same VPC.
	Subnets []string `pulumi:"subnets"`
}

// CapacityProviderManagedInstancesNetworkConfigurationInput is an input type that accepts CapacityProviderManagedInstancesNetworkConfigurationArgs and CapacityProviderManagedInstancesNetworkConfigurationOutput values.
// You can construct a concrete instance of `CapacityProviderManagedInstancesNetworkConfigurationInput` via:
//
//	CapacityProviderManagedInstancesNetworkConfigurationArgs{...}
type CapacityProviderManagedInstancesNetworkConfigurationInput interface {
	pulumi.Input

	ToCapacityProviderManagedInstancesNetworkConfigurationOutput() CapacityProviderManagedInstancesNetworkConfigurationOutput
	ToCapacityProviderManagedInstancesNetworkConfigurationOutputWithContext(context.Context) CapacityProviderManagedInstancesNetworkConfigurationOutput
}

type CapacityProviderManagedInstancesNetworkConfigurationArgs struct {
	// The list of security group IDs to apply to Amazon ECS Managed Instances. These security groups control the network traffic allowed to and from the instances.
	SecurityGroups pulumi.StringArrayInput `pulumi:"securityGroups"`
	// The list of subnet IDs where Amazon ECS can launch Amazon ECS Managed Instances. Instances are distributed across the specified subnets for high availability. All subnets must be in the same VPC.
	Subnets pulumi.StringArrayInput `pulumi:"subnets"`
}

func (CapacityProviderManagedInstancesNetworkConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityProviderManagedInstancesNetworkConfiguration)(nil)).Elem()
}

func (i CapacityProviderManagedInstancesNetworkConfigurationArgs) ToCapacityProviderManagedInstancesNetworkConfigurationOutput() CapacityProviderManagedInstancesNetworkConfigurationOutput {
	return i.ToCapacityProviderManagedInstancesNetworkConfigurationOutputWithContext(context.Background())
}

func (i CapacityProviderManagedInstancesNetworkConfigurationArgs) ToCapacityProviderManagedInstancesNetworkConfigurationOutputWithContext(ctx context.Context) CapacityProviderManagedInstancesNetworkConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderManagedInstancesNetworkConfigurationOutput)
}

func (i CapacityProviderManagedInstancesNetworkConfigurationArgs) ToCapacityProviderManagedInstancesNetworkConfigurationPtrOutput() CapacityProviderManagedInstancesNetworkConfigurationPtrOutput {
	return i.ToCapacityProviderManagedInstancesNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (i CapacityProviderManagedInstancesNetworkConfigurationArgs) ToCapacityProviderManagedInstancesNetworkConfigurationPtrOutputWithContext(ctx context.Context) CapacityProviderManagedInstancesNetworkConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderManagedInstancesNetworkConfigurationOutput).ToCapacityProviderManagedInstancesNetworkConfigurationPtrOutputWithContext(ctx)
}

// CapacityProviderManagedInstancesNetworkConfigurationPtrInput is an input type that accepts CapacityProviderManagedInstancesNetworkConfigurationArgs, CapacityProviderManagedInstancesNetworkConfigurationPtr and CapacityProviderManagedInstancesNetworkConfigurationPtrOutput values.
// You can construct a concrete instance of `CapacityProviderManagedInstancesNetworkConfigurationPtrInput` via:
//
//	        CapacityProviderManagedInstancesNetworkConfigurationArgs{...}
//
//	or:
//
//	        nil
type CapacityProviderManagedInstancesNetworkConfigurationPtrInput interface {
	pulumi.Input

	ToCapacityProviderManagedInstancesNetworkConfigurationPtrOutput() CapacityProviderManagedInstancesNetworkConfigurationPtrOutput
	ToCapacityProviderManagedInstancesNetworkConfigurationPtrOutputWithContext(context.Context) CapacityProviderManagedInstancesNetworkConfigurationPtrOutput
}

type capacityProviderManagedInstancesNetworkConfigurationPtrType CapacityProviderManagedInstancesNetworkConfigurationArgs

func CapacityProviderManagedInstancesNetworkConfigurationPtr(v *CapacityProviderManagedInstancesNetworkConfigurationArgs) CapacityProviderManagedInstancesNetworkConfigurationPtrInput {
	return (*capacityProviderManagedInstancesNetworkConfigurationPtrType)(v)
}

func (*capacityProviderManagedInstancesNetworkConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityProviderManagedInstancesNetworkConfiguration)(nil)).Elem()
}

func (i *capacityProviderManagedInstancesNetworkConfigurationPtrType) ToCapacityProviderManagedInstancesNetworkConfigurationPtrOutput() CapacityProviderManagedInstancesNetworkConfigurationPtrOutput {
	return i.ToCapacityProviderManagedInstancesNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (i *capacityProviderManagedInstancesNetworkConfigurationPtrType) ToCapacityProviderManagedInstancesNetworkConfigurationPtrOutputWithContext(ctx context.Context) CapacityProviderManagedInstancesNetworkConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderManagedInstancesNetworkConfigurationPtrOutput)
}

type CapacityProviderManagedInstancesNetworkConfigurationOutput struct{ *pulumi.OutputState }

func (CapacityProviderManagedInstancesNetworkConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityProviderManagedInstancesNetworkConfiguration)(nil)).Elem()
}

func (o CapacityProviderManagedInstancesNetworkConfigurationOutput) ToCapacityProviderManagedInstancesNetworkConfigurationOutput() CapacityProviderManagedInstancesNetworkConfigurationOutput {
	return o
}

func (o CapacityProviderManagedInstancesNetworkConfigurationOutput) ToCapacityProviderManagedInstancesNetworkConfigurationOutputWithContext(ctx context.Context) CapacityProviderManagedInstancesNetworkConfigurationOutput {
	return o
}

func (o CapacityProviderManagedInstancesNetworkConfigurationOutput) ToCapacityProviderManagedInstancesNetworkConfigurationPtrOutput() CapacityProviderManagedInstancesNetworkConfigurationPtrOutput {
	return o.ToCapacityProviderManagedInstancesNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (o CapacityProviderManagedInstancesNetworkConfigurationOutput) ToCapacityProviderManagedInstancesNetworkConfigurationPtrOutputWithContext(ctx context.Context) CapacityProviderManagedInstancesNetworkConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CapacityProviderManagedInstancesNetworkConfiguration) *CapacityProviderManagedInstancesNetworkConfiguration {
		return &v
	}).(CapacityProviderManagedInstancesNetworkConfigurationPtrOutput)
}

// The list of security group IDs to apply to Amazon ECS Managed Instances. These security groups control the network traffic allowed to and from the instances.
func (o CapacityProviderManagedInstancesNetworkConfigurationOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CapacityProviderManagedInstancesNetworkConfiguration) []string { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

// The list of subnet IDs where Amazon ECS can launch Amazon ECS Managed Instances. Instances are distributed across the specified subnets for high availability. All subnets must be in the same VPC.
func (o CapacityProviderManagedInstancesNetworkConfigurationOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CapacityProviderManagedInstancesNetworkConfiguration) []string { return v.Subnets }).(pulumi.StringArrayOutput)
}

type CapacityProviderManagedInstancesNetworkConfigurationPtrOutput struct{ *pulumi.OutputState }

func (CapacityProviderManagedInstancesNetworkConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityProviderManagedInstancesNetworkConfiguration)(nil)).Elem()
}

func (o CapacityProviderManagedInstancesNetworkConfigurationPtrOutput) ToCapacityProviderManagedInstancesNetworkConfigurationPtrOutput() CapacityProviderManagedInstancesNetworkConfigurationPtrOutput {
	return o
}

func (o CapacityProviderManagedInstancesNetworkConfigurationPtrOutput) ToCapacityProviderManagedInstancesNetworkConfigurationPtrOutputWithContext(ctx context.Context) CapacityProviderManagedInstancesNetworkConfigurationPtrOutput {
	return o
}

func (o CapacityProviderManagedInstancesNetworkConfigurationPtrOutput) Elem() CapacityProviderManagedInstancesNetworkConfigurationOutput {
	return o.ApplyT(func(v *CapacityProviderManagedInstancesNetworkConfiguration) CapacityProviderManagedInstancesNetworkConfiguration {
		if v != nil {
			return *v
		}
		var ret CapacityProviderManagedInstancesNetworkConfiguration
		return ret
	}).(CapacityProviderManagedInstancesNetworkConfigurationOutput)
}

// The list of security group IDs to apply to Amazon ECS Managed Instances. These security groups control the network traffic allowed to and from the instances.
func (o CapacityProviderManagedInstancesNetworkConfigurationPtrOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CapacityProviderManagedInstancesNetworkConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.SecurityGroups
	}).(pulumi.StringArrayOutput)
}

// The list of subnet IDs where Amazon ECS can launch Amazon ECS Managed Instances. Instances are distributed across the specified subnets for high availability. All subnets must be in the same VPC.
func (o CapacityProviderManagedInstancesNetworkConfigurationPtrOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CapacityProviderManagedInstancesNetworkConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.Subnets
	}).(pulumi.StringArrayOutput)
}

type CapacityProviderManagedInstancesProvider struct {
	// The Amazon Resource Name (ARN) of the infrastructure role that Amazon ECS assumes to manage instances. This role must include permissions for Amazon EC2 instance lifecycle management, networking, and any additional AWS services required for your workloads.
	//
	// For more information, see [Amazon ECS infrastructure IAM role](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/infrastructure_IAM_role.html) in the *Amazon ECS Developer Guide* .
	InfrastructureRoleArn string `pulumi:"infrastructureRoleArn"`
	// The launch template that defines how Amazon ECS launches Amazon ECS Managed Instances. This includes the instance profile for your tasks, network and storage configuration, and instance requirements that determine which Amazon EC2 instance types can be used.
	//
	// For more information, see [Store instance launch parameters in Amazon EC2 launch templates](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html) in the *Amazon EC2 User Guide* .
	InstanceLaunchTemplate CapacityProviderInstanceLaunchTemplate `pulumi:"instanceLaunchTemplate"`
	// Determines whether tags from the capacity provider are automatically applied to Amazon ECS Managed Instances. This helps with cost allocation and resource management by ensuring consistent tagging across your infrastructure.
	PropagateTags *CapacityProviderManagedInstancesProviderPropagateTags `pulumi:"propagateTags"`
}

// CapacityProviderManagedInstancesProviderInput is an input type that accepts CapacityProviderManagedInstancesProviderArgs and CapacityProviderManagedInstancesProviderOutput values.
// You can construct a concrete instance of `CapacityProviderManagedInstancesProviderInput` via:
//
//	CapacityProviderManagedInstancesProviderArgs{...}
type CapacityProviderManagedInstancesProviderInput interface {
	pulumi.Input

	ToCapacityProviderManagedInstancesProviderOutput() CapacityProviderManagedInstancesProviderOutput
	ToCapacityProviderManagedInstancesProviderOutputWithContext(context.Context) CapacityProviderManagedInstancesProviderOutput
}

type CapacityProviderManagedInstancesProviderArgs struct {
	// The Amazon Resource Name (ARN) of the infrastructure role that Amazon ECS assumes to manage instances. This role must include permissions for Amazon EC2 instance lifecycle management, networking, and any additional AWS services required for your workloads.
	//
	// For more information, see [Amazon ECS infrastructure IAM role](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/infrastructure_IAM_role.html) in the *Amazon ECS Developer Guide* .
	InfrastructureRoleArn pulumi.StringInput `pulumi:"infrastructureRoleArn"`
	// The launch template that defines how Amazon ECS launches Amazon ECS Managed Instances. This includes the instance profile for your tasks, network and storage configuration, and instance requirements that determine which Amazon EC2 instance types can be used.
	//
	// For more information, see [Store instance launch parameters in Amazon EC2 launch templates](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html) in the *Amazon EC2 User Guide* .
	InstanceLaunchTemplate CapacityProviderInstanceLaunchTemplateInput `pulumi:"instanceLaunchTemplate"`
	// Determines whether tags from the capacity provider are automatically applied to Amazon ECS Managed Instances. This helps with cost allocation and resource management by ensuring consistent tagging across your infrastructure.
	PropagateTags CapacityProviderManagedInstancesProviderPropagateTagsPtrInput `pulumi:"propagateTags"`
}

func (CapacityProviderManagedInstancesProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityProviderManagedInstancesProvider)(nil)).Elem()
}

func (i CapacityProviderManagedInstancesProviderArgs) ToCapacityProviderManagedInstancesProviderOutput() CapacityProviderManagedInstancesProviderOutput {
	return i.ToCapacityProviderManagedInstancesProviderOutputWithContext(context.Background())
}

func (i CapacityProviderManagedInstancesProviderArgs) ToCapacityProviderManagedInstancesProviderOutputWithContext(ctx context.Context) CapacityProviderManagedInstancesProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderManagedInstancesProviderOutput)
}

func (i CapacityProviderManagedInstancesProviderArgs) ToCapacityProviderManagedInstancesProviderPtrOutput() CapacityProviderManagedInstancesProviderPtrOutput {
	return i.ToCapacityProviderManagedInstancesProviderPtrOutputWithContext(context.Background())
}

func (i CapacityProviderManagedInstancesProviderArgs) ToCapacityProviderManagedInstancesProviderPtrOutputWithContext(ctx context.Context) CapacityProviderManagedInstancesProviderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderManagedInstancesProviderOutput).ToCapacityProviderManagedInstancesProviderPtrOutputWithContext(ctx)
}

// CapacityProviderManagedInstancesProviderPtrInput is an input type that accepts CapacityProviderManagedInstancesProviderArgs, CapacityProviderManagedInstancesProviderPtr and CapacityProviderManagedInstancesProviderPtrOutput values.
// You can construct a concrete instance of `CapacityProviderManagedInstancesProviderPtrInput` via:
//
//	        CapacityProviderManagedInstancesProviderArgs{...}
//
//	or:
//
//	        nil
type CapacityProviderManagedInstancesProviderPtrInput interface {
	pulumi.Input

	ToCapacityProviderManagedInstancesProviderPtrOutput() CapacityProviderManagedInstancesProviderPtrOutput
	ToCapacityProviderManagedInstancesProviderPtrOutputWithContext(context.Context) CapacityProviderManagedInstancesProviderPtrOutput
}

type capacityProviderManagedInstancesProviderPtrType CapacityProviderManagedInstancesProviderArgs

func CapacityProviderManagedInstancesProviderPtr(v *CapacityProviderManagedInstancesProviderArgs) CapacityProviderManagedInstancesProviderPtrInput {
	return (*capacityProviderManagedInstancesProviderPtrType)(v)
}

func (*capacityProviderManagedInstancesProviderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityProviderManagedInstancesProvider)(nil)).Elem()
}

func (i *capacityProviderManagedInstancesProviderPtrType) ToCapacityProviderManagedInstancesProviderPtrOutput() CapacityProviderManagedInstancesProviderPtrOutput {
	return i.ToCapacityProviderManagedInstancesProviderPtrOutputWithContext(context.Background())
}

func (i *capacityProviderManagedInstancesProviderPtrType) ToCapacityProviderManagedInstancesProviderPtrOutputWithContext(ctx context.Context) CapacityProviderManagedInstancesProviderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderManagedInstancesProviderPtrOutput)
}

type CapacityProviderManagedInstancesProviderOutput struct{ *pulumi.OutputState }

func (CapacityProviderManagedInstancesProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityProviderManagedInstancesProvider)(nil)).Elem()
}

func (o CapacityProviderManagedInstancesProviderOutput) ToCapacityProviderManagedInstancesProviderOutput() CapacityProviderManagedInstancesProviderOutput {
	return o
}

func (o CapacityProviderManagedInstancesProviderOutput) ToCapacityProviderManagedInstancesProviderOutputWithContext(ctx context.Context) CapacityProviderManagedInstancesProviderOutput {
	return o
}

func (o CapacityProviderManagedInstancesProviderOutput) ToCapacityProviderManagedInstancesProviderPtrOutput() CapacityProviderManagedInstancesProviderPtrOutput {
	return o.ToCapacityProviderManagedInstancesProviderPtrOutputWithContext(context.Background())
}

func (o CapacityProviderManagedInstancesProviderOutput) ToCapacityProviderManagedInstancesProviderPtrOutputWithContext(ctx context.Context) CapacityProviderManagedInstancesProviderPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CapacityProviderManagedInstancesProvider) *CapacityProviderManagedInstancesProvider {
		return &v
	}).(CapacityProviderManagedInstancesProviderPtrOutput)
}

// The Amazon Resource Name (ARN) of the infrastructure role that Amazon ECS assumes to manage instances. This role must include permissions for Amazon EC2 instance lifecycle management, networking, and any additional AWS services required for your workloads.
//
// For more information, see [Amazon ECS infrastructure IAM role](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/infrastructure_IAM_role.html) in the *Amazon ECS Developer Guide* .
func (o CapacityProviderManagedInstancesProviderOutput) InfrastructureRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v CapacityProviderManagedInstancesProvider) string { return v.InfrastructureRoleArn }).(pulumi.StringOutput)
}

// The launch template that defines how Amazon ECS launches Amazon ECS Managed Instances. This includes the instance profile for your tasks, network and storage configuration, and instance requirements that determine which Amazon EC2 instance types can be used.
//
// For more information, see [Store instance launch parameters in Amazon EC2 launch templates](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html) in the *Amazon EC2 User Guide* .
func (o CapacityProviderManagedInstancesProviderOutput) InstanceLaunchTemplate() CapacityProviderInstanceLaunchTemplateOutput {
	return o.ApplyT(func(v CapacityProviderManagedInstancesProvider) CapacityProviderInstanceLaunchTemplate {
		return v.InstanceLaunchTemplate
	}).(CapacityProviderInstanceLaunchTemplateOutput)
}

// Determines whether tags from the capacity provider are automatically applied to Amazon ECS Managed Instances. This helps with cost allocation and resource management by ensuring consistent tagging across your infrastructure.
func (o CapacityProviderManagedInstancesProviderOutput) PropagateTags() CapacityProviderManagedInstancesProviderPropagateTagsPtrOutput {
	return o.ApplyT(func(v CapacityProviderManagedInstancesProvider) *CapacityProviderManagedInstancesProviderPropagateTags {
		return v.PropagateTags
	}).(CapacityProviderManagedInstancesProviderPropagateTagsPtrOutput)
}

type CapacityProviderManagedInstancesProviderPtrOutput struct{ *pulumi.OutputState }

func (CapacityProviderManagedInstancesProviderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityProviderManagedInstancesProvider)(nil)).Elem()
}

func (o CapacityProviderManagedInstancesProviderPtrOutput) ToCapacityProviderManagedInstancesProviderPtrOutput() CapacityProviderManagedInstancesProviderPtrOutput {
	return o
}

func (o CapacityProviderManagedInstancesProviderPtrOutput) ToCapacityProviderManagedInstancesProviderPtrOutputWithContext(ctx context.Context) CapacityProviderManagedInstancesProviderPtrOutput {
	return o
}

func (o CapacityProviderManagedInstancesProviderPtrOutput) Elem() CapacityProviderManagedInstancesProviderOutput {
	return o.ApplyT(func(v *CapacityProviderManagedInstancesProvider) CapacityProviderManagedInstancesProvider {
		if v != nil {
			return *v
		}
		var ret CapacityProviderManagedInstancesProvider
		return ret
	}).(CapacityProviderManagedInstancesProviderOutput)
}

// The Amazon Resource Name (ARN) of the infrastructure role that Amazon ECS assumes to manage instances. This role must include permissions for Amazon EC2 instance lifecycle management, networking, and any additional AWS services required for your workloads.
//
// For more information, see [Amazon ECS infrastructure IAM role](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/infrastructure_IAM_role.html) in the *Amazon ECS Developer Guide* .
func (o CapacityProviderManagedInstancesProviderPtrOutput) InfrastructureRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CapacityProviderManagedInstancesProvider) *string {
		if v == nil {
			return nil
		}
		return &v.InfrastructureRoleArn
	}).(pulumi.StringPtrOutput)
}

// The launch template that defines how Amazon ECS launches Amazon ECS Managed Instances. This includes the instance profile for your tasks, network and storage configuration, and instance requirements that determine which Amazon EC2 instance types can be used.
//
// For more information, see [Store instance launch parameters in Amazon EC2 launch templates](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html) in the *Amazon EC2 User Guide* .
func (o CapacityProviderManagedInstancesProviderPtrOutput) InstanceLaunchTemplate() CapacityProviderInstanceLaunchTemplatePtrOutput {
	return o.ApplyT(func(v *CapacityProviderManagedInstancesProvider) *CapacityProviderInstanceLaunchTemplate {
		if v == nil {
			return nil
		}
		return &v.InstanceLaunchTemplate
	}).(CapacityProviderInstanceLaunchTemplatePtrOutput)
}

// Determines whether tags from the capacity provider are automatically applied to Amazon ECS Managed Instances. This helps with cost allocation and resource management by ensuring consistent tagging across your infrastructure.
func (o CapacityProviderManagedInstancesProviderPtrOutput) PropagateTags() CapacityProviderManagedInstancesProviderPropagateTagsPtrOutput {
	return o.ApplyT(func(v *CapacityProviderManagedInstancesProvider) *CapacityProviderManagedInstancesProviderPropagateTags {
		if v == nil {
			return nil
		}
		return v.PropagateTags
	}).(CapacityProviderManagedInstancesProviderPropagateTagsPtrOutput)
}

type CapacityProviderManagedInstancesStorageConfiguration struct {
	// The size of the tasks volume.
	StorageSizeGiB int `pulumi:"storageSizeGiB"`
}

// CapacityProviderManagedInstancesStorageConfigurationInput is an input type that accepts CapacityProviderManagedInstancesStorageConfigurationArgs and CapacityProviderManagedInstancesStorageConfigurationOutput values.
// You can construct a concrete instance of `CapacityProviderManagedInstancesStorageConfigurationInput` via:
//
//	CapacityProviderManagedInstancesStorageConfigurationArgs{...}
type CapacityProviderManagedInstancesStorageConfigurationInput interface {
	pulumi.Input

	ToCapacityProviderManagedInstancesStorageConfigurationOutput() CapacityProviderManagedInstancesStorageConfigurationOutput
	ToCapacityProviderManagedInstancesStorageConfigurationOutputWithContext(context.Context) CapacityProviderManagedInstancesStorageConfigurationOutput
}

type CapacityProviderManagedInstancesStorageConfigurationArgs struct {
	// The size of the tasks volume.
	StorageSizeGiB pulumi.IntInput `pulumi:"storageSizeGiB"`
}

func (CapacityProviderManagedInstancesStorageConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityProviderManagedInstancesStorageConfiguration)(nil)).Elem()
}

func (i CapacityProviderManagedInstancesStorageConfigurationArgs) ToCapacityProviderManagedInstancesStorageConfigurationOutput() CapacityProviderManagedInstancesStorageConfigurationOutput {
	return i.ToCapacityProviderManagedInstancesStorageConfigurationOutputWithContext(context.Background())
}

func (i CapacityProviderManagedInstancesStorageConfigurationArgs) ToCapacityProviderManagedInstancesStorageConfigurationOutputWithContext(ctx context.Context) CapacityProviderManagedInstancesStorageConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderManagedInstancesStorageConfigurationOutput)
}

func (i CapacityProviderManagedInstancesStorageConfigurationArgs) ToCapacityProviderManagedInstancesStorageConfigurationPtrOutput() CapacityProviderManagedInstancesStorageConfigurationPtrOutput {
	return i.ToCapacityProviderManagedInstancesStorageConfigurationPtrOutputWithContext(context.Background())
}

func (i CapacityProviderManagedInstancesStorageConfigurationArgs) ToCapacityProviderManagedInstancesStorageConfigurationPtrOutputWithContext(ctx context.Context) CapacityProviderManagedInstancesStorageConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderManagedInstancesStorageConfigurationOutput).ToCapacityProviderManagedInstancesStorageConfigurationPtrOutputWithContext(ctx)
}

// CapacityProviderManagedInstancesStorageConfigurationPtrInput is an input type that accepts CapacityProviderManagedInstancesStorageConfigurationArgs, CapacityProviderManagedInstancesStorageConfigurationPtr and CapacityProviderManagedInstancesStorageConfigurationPtrOutput values.
// You can construct a concrete instance of `CapacityProviderManagedInstancesStorageConfigurationPtrInput` via:
//
//	        CapacityProviderManagedInstancesStorageConfigurationArgs{...}
//
//	or:
//
//	        nil
type CapacityProviderManagedInstancesStorageConfigurationPtrInput interface {
	pulumi.Input

	ToCapacityProviderManagedInstancesStorageConfigurationPtrOutput() CapacityProviderManagedInstancesStorageConfigurationPtrOutput
	ToCapacityProviderManagedInstancesStorageConfigurationPtrOutputWithContext(context.Context) CapacityProviderManagedInstancesStorageConfigurationPtrOutput
}

type capacityProviderManagedInstancesStorageConfigurationPtrType CapacityProviderManagedInstancesStorageConfigurationArgs

func CapacityProviderManagedInstancesStorageConfigurationPtr(v *CapacityProviderManagedInstancesStorageConfigurationArgs) CapacityProviderManagedInstancesStorageConfigurationPtrInput {
	return (*capacityProviderManagedInstancesStorageConfigurationPtrType)(v)
}

func (*capacityProviderManagedInstancesStorageConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityProviderManagedInstancesStorageConfiguration)(nil)).Elem()
}

func (i *capacityProviderManagedInstancesStorageConfigurationPtrType) ToCapacityProviderManagedInstancesStorageConfigurationPtrOutput() CapacityProviderManagedInstancesStorageConfigurationPtrOutput {
	return i.ToCapacityProviderManagedInstancesStorageConfigurationPtrOutputWithContext(context.Background())
}

func (i *capacityProviderManagedInstancesStorageConfigurationPtrType) ToCapacityProviderManagedInstancesStorageConfigurationPtrOutputWithContext(ctx context.Context) CapacityProviderManagedInstancesStorageConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderManagedInstancesStorageConfigurationPtrOutput)
}

type CapacityProviderManagedInstancesStorageConfigurationOutput struct{ *pulumi.OutputState }

func (CapacityProviderManagedInstancesStorageConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityProviderManagedInstancesStorageConfiguration)(nil)).Elem()
}

func (o CapacityProviderManagedInstancesStorageConfigurationOutput) ToCapacityProviderManagedInstancesStorageConfigurationOutput() CapacityProviderManagedInstancesStorageConfigurationOutput {
	return o
}

func (o CapacityProviderManagedInstancesStorageConfigurationOutput) ToCapacityProviderManagedInstancesStorageConfigurationOutputWithContext(ctx context.Context) CapacityProviderManagedInstancesStorageConfigurationOutput {
	return o
}

func (o CapacityProviderManagedInstancesStorageConfigurationOutput) ToCapacityProviderManagedInstancesStorageConfigurationPtrOutput() CapacityProviderManagedInstancesStorageConfigurationPtrOutput {
	return o.ToCapacityProviderManagedInstancesStorageConfigurationPtrOutputWithContext(context.Background())
}

func (o CapacityProviderManagedInstancesStorageConfigurationOutput) ToCapacityProviderManagedInstancesStorageConfigurationPtrOutputWithContext(ctx context.Context) CapacityProviderManagedInstancesStorageConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CapacityProviderManagedInstancesStorageConfiguration) *CapacityProviderManagedInstancesStorageConfiguration {
		return &v
	}).(CapacityProviderManagedInstancesStorageConfigurationPtrOutput)
}

// The size of the tasks volume.
func (o CapacityProviderManagedInstancesStorageConfigurationOutput) StorageSizeGiB() pulumi.IntOutput {
	return o.ApplyT(func(v CapacityProviderManagedInstancesStorageConfiguration) int { return v.StorageSizeGiB }).(pulumi.IntOutput)
}

type CapacityProviderManagedInstancesStorageConfigurationPtrOutput struct{ *pulumi.OutputState }

func (CapacityProviderManagedInstancesStorageConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityProviderManagedInstancesStorageConfiguration)(nil)).Elem()
}

func (o CapacityProviderManagedInstancesStorageConfigurationPtrOutput) ToCapacityProviderManagedInstancesStorageConfigurationPtrOutput() CapacityProviderManagedInstancesStorageConfigurationPtrOutput {
	return o
}

func (o CapacityProviderManagedInstancesStorageConfigurationPtrOutput) ToCapacityProviderManagedInstancesStorageConfigurationPtrOutputWithContext(ctx context.Context) CapacityProviderManagedInstancesStorageConfigurationPtrOutput {
	return o
}

func (o CapacityProviderManagedInstancesStorageConfigurationPtrOutput) Elem() CapacityProviderManagedInstancesStorageConfigurationOutput {
	return o.ApplyT(func(v *CapacityProviderManagedInstancesStorageConfiguration) CapacityProviderManagedInstancesStorageConfiguration {
		if v != nil {
			return *v
		}
		var ret CapacityProviderManagedInstancesStorageConfiguration
		return ret
	}).(CapacityProviderManagedInstancesStorageConfigurationOutput)
}

// The size of the tasks volume.
func (o CapacityProviderManagedInstancesStorageConfigurationPtrOutput) StorageSizeGiB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CapacityProviderManagedInstancesStorageConfiguration) *int {
		if v == nil {
			return nil
		}
		return &v.StorageSizeGiB
	}).(pulumi.IntPtrOutput)
}

// The managed scaling settings for the Auto Scaling group capacity provider.
type CapacityProviderManagedScaling struct {
	// The period of time, in seconds, after a newly launched Amazon EC2 instance can contribute to CloudWatch metrics for Auto Scaling group. If this parameter is omitted, the default value of `300` seconds is used.
	InstanceWarmupPeriod *int `pulumi:"instanceWarmupPeriod"`
	// The maximum number of Amazon EC2 instances that Amazon ECS will scale out at one time. If this parameter is omitted, the default value of `10000` is used.
	MaximumScalingStepSize *int `pulumi:"maximumScalingStepSize"`
	// The minimum number of Amazon EC2 instances that Amazon ECS will scale out at one time. The scale in process is not affected by this parameter If this parameter is omitted, the default value of `1` is used.
	//
	// When additional capacity is required, Amazon ECS will scale up the minimum scaling step size even if the actual demand is less than the minimum scaling step size.
	MinimumScalingStepSize *int `pulumi:"minimumScalingStepSize"`
	// Determines whether to use managed scaling for the capacity provider.
	Status *CapacityProviderManagedScalingStatus `pulumi:"status"`
	// The target capacity utilization as a percentage for the capacity provider. The specified value must be greater than `0` and less than or equal to `100` . For example, if you want the capacity provider to maintain 10% spare capacity, then that means the utilization is 90%, so use a `targetCapacity` of `90` . The default value of `100` percent results in the Amazon EC2 instances in your Auto Scaling group being completely used.
	TargetCapacity *int `pulumi:"targetCapacity"`
}

// CapacityProviderManagedScalingInput is an input type that accepts CapacityProviderManagedScalingArgs and CapacityProviderManagedScalingOutput values.
// You can construct a concrete instance of `CapacityProviderManagedScalingInput` via:
//
//	CapacityProviderManagedScalingArgs{...}
type CapacityProviderManagedScalingInput interface {
	pulumi.Input

	ToCapacityProviderManagedScalingOutput() CapacityProviderManagedScalingOutput
	ToCapacityProviderManagedScalingOutputWithContext(context.Context) CapacityProviderManagedScalingOutput
}

// The managed scaling settings for the Auto Scaling group capacity provider.
type CapacityProviderManagedScalingArgs struct {
	// The period of time, in seconds, after a newly launched Amazon EC2 instance can contribute to CloudWatch metrics for Auto Scaling group. If this parameter is omitted, the default value of `300` seconds is used.
	InstanceWarmupPeriod pulumi.IntPtrInput `pulumi:"instanceWarmupPeriod"`
	// The maximum number of Amazon EC2 instances that Amazon ECS will scale out at one time. If this parameter is omitted, the default value of `10000` is used.
	MaximumScalingStepSize pulumi.IntPtrInput `pulumi:"maximumScalingStepSize"`
	// The minimum number of Amazon EC2 instances that Amazon ECS will scale out at one time. The scale in process is not affected by this parameter If this parameter is omitted, the default value of `1` is used.
	//
	// When additional capacity is required, Amazon ECS will scale up the minimum scaling step size even if the actual demand is less than the minimum scaling step size.
	MinimumScalingStepSize pulumi.IntPtrInput `pulumi:"minimumScalingStepSize"`
	// Determines whether to use managed scaling for the capacity provider.
	Status CapacityProviderManagedScalingStatusPtrInput `pulumi:"status"`
	// The target capacity utilization as a percentage for the capacity provider. The specified value must be greater than `0` and less than or equal to `100` . For example, if you want the capacity provider to maintain 10% spare capacity, then that means the utilization is 90%, so use a `targetCapacity` of `90` . The default value of `100` percent results in the Amazon EC2 instances in your Auto Scaling group being completely used.
	TargetCapacity pulumi.IntPtrInput `pulumi:"targetCapacity"`
}

func (CapacityProviderManagedScalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityProviderManagedScaling)(nil)).Elem()
}

func (i CapacityProviderManagedScalingArgs) ToCapacityProviderManagedScalingOutput() CapacityProviderManagedScalingOutput {
	return i.ToCapacityProviderManagedScalingOutputWithContext(context.Background())
}

func (i CapacityProviderManagedScalingArgs) ToCapacityProviderManagedScalingOutputWithContext(ctx context.Context) CapacityProviderManagedScalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderManagedScalingOutput)
}

func (i CapacityProviderManagedScalingArgs) ToCapacityProviderManagedScalingPtrOutput() CapacityProviderManagedScalingPtrOutput {
	return i.ToCapacityProviderManagedScalingPtrOutputWithContext(context.Background())
}

func (i CapacityProviderManagedScalingArgs) ToCapacityProviderManagedScalingPtrOutputWithContext(ctx context.Context) CapacityProviderManagedScalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderManagedScalingOutput).ToCapacityProviderManagedScalingPtrOutputWithContext(ctx)
}

// CapacityProviderManagedScalingPtrInput is an input type that accepts CapacityProviderManagedScalingArgs, CapacityProviderManagedScalingPtr and CapacityProviderManagedScalingPtrOutput values.
// You can construct a concrete instance of `CapacityProviderManagedScalingPtrInput` via:
//
//	        CapacityProviderManagedScalingArgs{...}
//
//	or:
//
//	        nil
type CapacityProviderManagedScalingPtrInput interface {
	pulumi.Input

	ToCapacityProviderManagedScalingPtrOutput() CapacityProviderManagedScalingPtrOutput
	ToCapacityProviderManagedScalingPtrOutputWithContext(context.Context) CapacityProviderManagedScalingPtrOutput
}

type capacityProviderManagedScalingPtrType CapacityProviderManagedScalingArgs

func CapacityProviderManagedScalingPtr(v *CapacityProviderManagedScalingArgs) CapacityProviderManagedScalingPtrInput {
	return (*capacityProviderManagedScalingPtrType)(v)
}

func (*capacityProviderManagedScalingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityProviderManagedScaling)(nil)).Elem()
}

func (i *capacityProviderManagedScalingPtrType) ToCapacityProviderManagedScalingPtrOutput() CapacityProviderManagedScalingPtrOutput {
	return i.ToCapacityProviderManagedScalingPtrOutputWithContext(context.Background())
}

func (i *capacityProviderManagedScalingPtrType) ToCapacityProviderManagedScalingPtrOutputWithContext(ctx context.Context) CapacityProviderManagedScalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderManagedScalingPtrOutput)
}

// The managed scaling settings for the Auto Scaling group capacity provider.
type CapacityProviderManagedScalingOutput struct{ *pulumi.OutputState }

func (CapacityProviderManagedScalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityProviderManagedScaling)(nil)).Elem()
}

func (o CapacityProviderManagedScalingOutput) ToCapacityProviderManagedScalingOutput() CapacityProviderManagedScalingOutput {
	return o
}

func (o CapacityProviderManagedScalingOutput) ToCapacityProviderManagedScalingOutputWithContext(ctx context.Context) CapacityProviderManagedScalingOutput {
	return o
}

func (o CapacityProviderManagedScalingOutput) ToCapacityProviderManagedScalingPtrOutput() CapacityProviderManagedScalingPtrOutput {
	return o.ToCapacityProviderManagedScalingPtrOutputWithContext(context.Background())
}

func (o CapacityProviderManagedScalingOutput) ToCapacityProviderManagedScalingPtrOutputWithContext(ctx context.Context) CapacityProviderManagedScalingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CapacityProviderManagedScaling) *CapacityProviderManagedScaling {
		return &v
	}).(CapacityProviderManagedScalingPtrOutput)
}

// The period of time, in seconds, after a newly launched Amazon EC2 instance can contribute to CloudWatch metrics for Auto Scaling group. If this parameter is omitted, the default value of `300` seconds is used.
func (o CapacityProviderManagedScalingOutput) InstanceWarmupPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CapacityProviderManagedScaling) *int { return v.InstanceWarmupPeriod }).(pulumi.IntPtrOutput)
}

// The maximum number of Amazon EC2 instances that Amazon ECS will scale out at one time. If this parameter is omitted, the default value of `10000` is used.
func (o CapacityProviderManagedScalingOutput) MaximumScalingStepSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CapacityProviderManagedScaling) *int { return v.MaximumScalingStepSize }).(pulumi.IntPtrOutput)
}

// The minimum number of Amazon EC2 instances that Amazon ECS will scale out at one time. The scale in process is not affected by this parameter If this parameter is omitted, the default value of `1` is used.
//
// When additional capacity is required, Amazon ECS will scale up the minimum scaling step size even if the actual demand is less than the minimum scaling step size.
func (o CapacityProviderManagedScalingOutput) MinimumScalingStepSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CapacityProviderManagedScaling) *int { return v.MinimumScalingStepSize }).(pulumi.IntPtrOutput)
}

// Determines whether to use managed scaling for the capacity provider.
func (o CapacityProviderManagedScalingOutput) Status() CapacityProviderManagedScalingStatusPtrOutput {
	return o.ApplyT(func(v CapacityProviderManagedScaling) *CapacityProviderManagedScalingStatus { return v.Status }).(CapacityProviderManagedScalingStatusPtrOutput)
}

// The target capacity utilization as a percentage for the capacity provider. The specified value must be greater than `0` and less than or equal to `100` . For example, if you want the capacity provider to maintain 10% spare capacity, then that means the utilization is 90%, so use a `targetCapacity` of `90` . The default value of `100` percent results in the Amazon EC2 instances in your Auto Scaling group being completely used.
func (o CapacityProviderManagedScalingOutput) TargetCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CapacityProviderManagedScaling) *int { return v.TargetCapacity }).(pulumi.IntPtrOutput)
}

type CapacityProviderManagedScalingPtrOutput struct{ *pulumi.OutputState }

func (CapacityProviderManagedScalingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityProviderManagedScaling)(nil)).Elem()
}

func (o CapacityProviderManagedScalingPtrOutput) ToCapacityProviderManagedScalingPtrOutput() CapacityProviderManagedScalingPtrOutput {
	return o
}

func (o CapacityProviderManagedScalingPtrOutput) ToCapacityProviderManagedScalingPtrOutputWithContext(ctx context.Context) CapacityProviderManagedScalingPtrOutput {
	return o
}

func (o CapacityProviderManagedScalingPtrOutput) Elem() CapacityProviderManagedScalingOutput {
	return o.ApplyT(func(v *CapacityProviderManagedScaling) CapacityProviderManagedScaling {
		if v != nil {
			return *v
		}
		var ret CapacityProviderManagedScaling
		return ret
	}).(CapacityProviderManagedScalingOutput)
}

// The period of time, in seconds, after a newly launched Amazon EC2 instance can contribute to CloudWatch metrics for Auto Scaling group. If this parameter is omitted, the default value of `300` seconds is used.
func (o CapacityProviderManagedScalingPtrOutput) InstanceWarmupPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CapacityProviderManagedScaling) *int {
		if v == nil {
			return nil
		}
		return v.InstanceWarmupPeriod
	}).(pulumi.IntPtrOutput)
}

// The maximum number of Amazon EC2 instances that Amazon ECS will scale out at one time. If this parameter is omitted, the default value of `10000` is used.
func (o CapacityProviderManagedScalingPtrOutput) MaximumScalingStepSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CapacityProviderManagedScaling) *int {
		if v == nil {
			return nil
		}
		return v.MaximumScalingStepSize
	}).(pulumi.IntPtrOutput)
}

// The minimum number of Amazon EC2 instances that Amazon ECS will scale out at one time. The scale in process is not affected by this parameter If this parameter is omitted, the default value of `1` is used.
//
// When additional capacity is required, Amazon ECS will scale up the minimum scaling step size even if the actual demand is less than the minimum scaling step size.
func (o CapacityProviderManagedScalingPtrOutput) MinimumScalingStepSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CapacityProviderManagedScaling) *int {
		if v == nil {
			return nil
		}
		return v.MinimumScalingStepSize
	}).(pulumi.IntPtrOutput)
}

// Determines whether to use managed scaling for the capacity provider.
func (o CapacityProviderManagedScalingPtrOutput) Status() CapacityProviderManagedScalingStatusPtrOutput {
	return o.ApplyT(func(v *CapacityProviderManagedScaling) *CapacityProviderManagedScalingStatus {
		if v == nil {
			return nil
		}
		return v.Status
	}).(CapacityProviderManagedScalingStatusPtrOutput)
}

// The target capacity utilization as a percentage for the capacity provider. The specified value must be greater than `0` and less than or equal to `100` . For example, if you want the capacity provider to maintain 10% spare capacity, then that means the utilization is 90%, so use a `targetCapacity` of `90` . The default value of `100` percent results in the Amazon EC2 instances in your Auto Scaling group being completely used.
func (o CapacityProviderManagedScalingPtrOutput) TargetCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CapacityProviderManagedScaling) *int {
		if v == nil {
			return nil
		}
		return v.TargetCapacity
	}).(pulumi.IntPtrOutput)
}

type CapacityProviderMemoryGiBPerVCpuRequest struct {
	// The maximum amount of memory per vCPU in GiB. Instance types with a higher memory-to-vCPU ratio are excluded from selection.
	Max *float64 `pulumi:"max"`
	// The minimum amount of memory per vCPU in GiB. Instance types with a lower memory-to-vCPU ratio are excluded from selection.
	Min *float64 `pulumi:"min"`
}

// CapacityProviderMemoryGiBPerVCpuRequestInput is an input type that accepts CapacityProviderMemoryGiBPerVCpuRequestArgs and CapacityProviderMemoryGiBPerVCpuRequestOutput values.
// You can construct a concrete instance of `CapacityProviderMemoryGiBPerVCpuRequestInput` via:
//
//	CapacityProviderMemoryGiBPerVCpuRequestArgs{...}
type CapacityProviderMemoryGiBPerVCpuRequestInput interface {
	pulumi.Input

	ToCapacityProviderMemoryGiBPerVCpuRequestOutput() CapacityProviderMemoryGiBPerVCpuRequestOutput
	ToCapacityProviderMemoryGiBPerVCpuRequestOutputWithContext(context.Context) CapacityProviderMemoryGiBPerVCpuRequestOutput
}

type CapacityProviderMemoryGiBPerVCpuRequestArgs struct {
	// The maximum amount of memory per vCPU in GiB. Instance types with a higher memory-to-vCPU ratio are excluded from selection.
	Max pulumi.Float64PtrInput `pulumi:"max"`
	// The minimum amount of memory per vCPU in GiB. Instance types with a lower memory-to-vCPU ratio are excluded from selection.
	Min pulumi.Float64PtrInput `pulumi:"min"`
}

func (CapacityProviderMemoryGiBPerVCpuRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityProviderMemoryGiBPerVCpuRequest)(nil)).Elem()
}

func (i CapacityProviderMemoryGiBPerVCpuRequestArgs) ToCapacityProviderMemoryGiBPerVCpuRequestOutput() CapacityProviderMemoryGiBPerVCpuRequestOutput {
	return i.ToCapacityProviderMemoryGiBPerVCpuRequestOutputWithContext(context.Background())
}

func (i CapacityProviderMemoryGiBPerVCpuRequestArgs) ToCapacityProviderMemoryGiBPerVCpuRequestOutputWithContext(ctx context.Context) CapacityProviderMemoryGiBPerVCpuRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderMemoryGiBPerVCpuRequestOutput)
}

func (i CapacityProviderMemoryGiBPerVCpuRequestArgs) ToCapacityProviderMemoryGiBPerVCpuRequestPtrOutput() CapacityProviderMemoryGiBPerVCpuRequestPtrOutput {
	return i.ToCapacityProviderMemoryGiBPerVCpuRequestPtrOutputWithContext(context.Background())
}

func (i CapacityProviderMemoryGiBPerVCpuRequestArgs) ToCapacityProviderMemoryGiBPerVCpuRequestPtrOutputWithContext(ctx context.Context) CapacityProviderMemoryGiBPerVCpuRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderMemoryGiBPerVCpuRequestOutput).ToCapacityProviderMemoryGiBPerVCpuRequestPtrOutputWithContext(ctx)
}

// CapacityProviderMemoryGiBPerVCpuRequestPtrInput is an input type that accepts CapacityProviderMemoryGiBPerVCpuRequestArgs, CapacityProviderMemoryGiBPerVCpuRequestPtr and CapacityProviderMemoryGiBPerVCpuRequestPtrOutput values.
// You can construct a concrete instance of `CapacityProviderMemoryGiBPerVCpuRequestPtrInput` via:
//
//	        CapacityProviderMemoryGiBPerVCpuRequestArgs{...}
//
//	or:
//
//	        nil
type CapacityProviderMemoryGiBPerVCpuRequestPtrInput interface {
	pulumi.Input

	ToCapacityProviderMemoryGiBPerVCpuRequestPtrOutput() CapacityProviderMemoryGiBPerVCpuRequestPtrOutput
	ToCapacityProviderMemoryGiBPerVCpuRequestPtrOutputWithContext(context.Context) CapacityProviderMemoryGiBPerVCpuRequestPtrOutput
}

type capacityProviderMemoryGiBPerVCpuRequestPtrType CapacityProviderMemoryGiBPerVCpuRequestArgs

func CapacityProviderMemoryGiBPerVCpuRequestPtr(v *CapacityProviderMemoryGiBPerVCpuRequestArgs) CapacityProviderMemoryGiBPerVCpuRequestPtrInput {
	return (*capacityProviderMemoryGiBPerVCpuRequestPtrType)(v)
}

func (*capacityProviderMemoryGiBPerVCpuRequestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityProviderMemoryGiBPerVCpuRequest)(nil)).Elem()
}

func (i *capacityProviderMemoryGiBPerVCpuRequestPtrType) ToCapacityProviderMemoryGiBPerVCpuRequestPtrOutput() CapacityProviderMemoryGiBPerVCpuRequestPtrOutput {
	return i.ToCapacityProviderMemoryGiBPerVCpuRequestPtrOutputWithContext(context.Background())
}

func (i *capacityProviderMemoryGiBPerVCpuRequestPtrType) ToCapacityProviderMemoryGiBPerVCpuRequestPtrOutputWithContext(ctx context.Context) CapacityProviderMemoryGiBPerVCpuRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderMemoryGiBPerVCpuRequestPtrOutput)
}

type CapacityProviderMemoryGiBPerVCpuRequestOutput struct{ *pulumi.OutputState }

func (CapacityProviderMemoryGiBPerVCpuRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityProviderMemoryGiBPerVCpuRequest)(nil)).Elem()
}

func (o CapacityProviderMemoryGiBPerVCpuRequestOutput) ToCapacityProviderMemoryGiBPerVCpuRequestOutput() CapacityProviderMemoryGiBPerVCpuRequestOutput {
	return o
}

func (o CapacityProviderMemoryGiBPerVCpuRequestOutput) ToCapacityProviderMemoryGiBPerVCpuRequestOutputWithContext(ctx context.Context) CapacityProviderMemoryGiBPerVCpuRequestOutput {
	return o
}

func (o CapacityProviderMemoryGiBPerVCpuRequestOutput) ToCapacityProviderMemoryGiBPerVCpuRequestPtrOutput() CapacityProviderMemoryGiBPerVCpuRequestPtrOutput {
	return o.ToCapacityProviderMemoryGiBPerVCpuRequestPtrOutputWithContext(context.Background())
}

func (o CapacityProviderMemoryGiBPerVCpuRequestOutput) ToCapacityProviderMemoryGiBPerVCpuRequestPtrOutputWithContext(ctx context.Context) CapacityProviderMemoryGiBPerVCpuRequestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CapacityProviderMemoryGiBPerVCpuRequest) *CapacityProviderMemoryGiBPerVCpuRequest {
		return &v
	}).(CapacityProviderMemoryGiBPerVCpuRequestPtrOutput)
}

// The maximum amount of memory per vCPU in GiB. Instance types with a higher memory-to-vCPU ratio are excluded from selection.
func (o CapacityProviderMemoryGiBPerVCpuRequestOutput) Max() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v CapacityProviderMemoryGiBPerVCpuRequest) *float64 { return v.Max }).(pulumi.Float64PtrOutput)
}

// The minimum amount of memory per vCPU in GiB. Instance types with a lower memory-to-vCPU ratio are excluded from selection.
func (o CapacityProviderMemoryGiBPerVCpuRequestOutput) Min() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v CapacityProviderMemoryGiBPerVCpuRequest) *float64 { return v.Min }).(pulumi.Float64PtrOutput)
}

type CapacityProviderMemoryGiBPerVCpuRequestPtrOutput struct{ *pulumi.OutputState }

func (CapacityProviderMemoryGiBPerVCpuRequestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityProviderMemoryGiBPerVCpuRequest)(nil)).Elem()
}

func (o CapacityProviderMemoryGiBPerVCpuRequestPtrOutput) ToCapacityProviderMemoryGiBPerVCpuRequestPtrOutput() CapacityProviderMemoryGiBPerVCpuRequestPtrOutput {
	return o
}

func (o CapacityProviderMemoryGiBPerVCpuRequestPtrOutput) ToCapacityProviderMemoryGiBPerVCpuRequestPtrOutputWithContext(ctx context.Context) CapacityProviderMemoryGiBPerVCpuRequestPtrOutput {
	return o
}

func (o CapacityProviderMemoryGiBPerVCpuRequestPtrOutput) Elem() CapacityProviderMemoryGiBPerVCpuRequestOutput {
	return o.ApplyT(func(v *CapacityProviderMemoryGiBPerVCpuRequest) CapacityProviderMemoryGiBPerVCpuRequest {
		if v != nil {
			return *v
		}
		var ret CapacityProviderMemoryGiBPerVCpuRequest
		return ret
	}).(CapacityProviderMemoryGiBPerVCpuRequestOutput)
}

// The maximum amount of memory per vCPU in GiB. Instance types with a higher memory-to-vCPU ratio are excluded from selection.
func (o CapacityProviderMemoryGiBPerVCpuRequestPtrOutput) Max() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *CapacityProviderMemoryGiBPerVCpuRequest) *float64 {
		if v == nil {
			return nil
		}
		return v.Max
	}).(pulumi.Float64PtrOutput)
}

// The minimum amount of memory per vCPU in GiB. Instance types with a lower memory-to-vCPU ratio are excluded from selection.
func (o CapacityProviderMemoryGiBPerVCpuRequestPtrOutput) Min() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *CapacityProviderMemoryGiBPerVCpuRequest) *float64 {
		if v == nil {
			return nil
		}
		return v.Min
	}).(pulumi.Float64PtrOutput)
}

type CapacityProviderMemoryMiBRequest struct {
	// The maximum amount of memory in MiB. Instance types with more memory than this value are excluded from selection.
	Max *int `pulumi:"max"`
	// The minimum amount of memory in MiB. Instance types with less memory than this value are excluded from selection.
	Min int `pulumi:"min"`
}

// CapacityProviderMemoryMiBRequestInput is an input type that accepts CapacityProviderMemoryMiBRequestArgs and CapacityProviderMemoryMiBRequestOutput values.
// You can construct a concrete instance of `CapacityProviderMemoryMiBRequestInput` via:
//
//	CapacityProviderMemoryMiBRequestArgs{...}
type CapacityProviderMemoryMiBRequestInput interface {
	pulumi.Input

	ToCapacityProviderMemoryMiBRequestOutput() CapacityProviderMemoryMiBRequestOutput
	ToCapacityProviderMemoryMiBRequestOutputWithContext(context.Context) CapacityProviderMemoryMiBRequestOutput
}

type CapacityProviderMemoryMiBRequestArgs struct {
	// The maximum amount of memory in MiB. Instance types with more memory than this value are excluded from selection.
	Max pulumi.IntPtrInput `pulumi:"max"`
	// The minimum amount of memory in MiB. Instance types with less memory than this value are excluded from selection.
	Min pulumi.IntInput `pulumi:"min"`
}

func (CapacityProviderMemoryMiBRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityProviderMemoryMiBRequest)(nil)).Elem()
}

func (i CapacityProviderMemoryMiBRequestArgs) ToCapacityProviderMemoryMiBRequestOutput() CapacityProviderMemoryMiBRequestOutput {
	return i.ToCapacityProviderMemoryMiBRequestOutputWithContext(context.Background())
}

func (i CapacityProviderMemoryMiBRequestArgs) ToCapacityProviderMemoryMiBRequestOutputWithContext(ctx context.Context) CapacityProviderMemoryMiBRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderMemoryMiBRequestOutput)
}

func (i CapacityProviderMemoryMiBRequestArgs) ToCapacityProviderMemoryMiBRequestPtrOutput() CapacityProviderMemoryMiBRequestPtrOutput {
	return i.ToCapacityProviderMemoryMiBRequestPtrOutputWithContext(context.Background())
}

func (i CapacityProviderMemoryMiBRequestArgs) ToCapacityProviderMemoryMiBRequestPtrOutputWithContext(ctx context.Context) CapacityProviderMemoryMiBRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderMemoryMiBRequestOutput).ToCapacityProviderMemoryMiBRequestPtrOutputWithContext(ctx)
}

// CapacityProviderMemoryMiBRequestPtrInput is an input type that accepts CapacityProviderMemoryMiBRequestArgs, CapacityProviderMemoryMiBRequestPtr and CapacityProviderMemoryMiBRequestPtrOutput values.
// You can construct a concrete instance of `CapacityProviderMemoryMiBRequestPtrInput` via:
//
//	        CapacityProviderMemoryMiBRequestArgs{...}
//
//	or:
//
//	        nil
type CapacityProviderMemoryMiBRequestPtrInput interface {
	pulumi.Input

	ToCapacityProviderMemoryMiBRequestPtrOutput() CapacityProviderMemoryMiBRequestPtrOutput
	ToCapacityProviderMemoryMiBRequestPtrOutputWithContext(context.Context) CapacityProviderMemoryMiBRequestPtrOutput
}

type capacityProviderMemoryMiBRequestPtrType CapacityProviderMemoryMiBRequestArgs

func CapacityProviderMemoryMiBRequestPtr(v *CapacityProviderMemoryMiBRequestArgs) CapacityProviderMemoryMiBRequestPtrInput {
	return (*capacityProviderMemoryMiBRequestPtrType)(v)
}

func (*capacityProviderMemoryMiBRequestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityProviderMemoryMiBRequest)(nil)).Elem()
}

func (i *capacityProviderMemoryMiBRequestPtrType) ToCapacityProviderMemoryMiBRequestPtrOutput() CapacityProviderMemoryMiBRequestPtrOutput {
	return i.ToCapacityProviderMemoryMiBRequestPtrOutputWithContext(context.Background())
}

func (i *capacityProviderMemoryMiBRequestPtrType) ToCapacityProviderMemoryMiBRequestPtrOutputWithContext(ctx context.Context) CapacityProviderMemoryMiBRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderMemoryMiBRequestPtrOutput)
}

type CapacityProviderMemoryMiBRequestOutput struct{ *pulumi.OutputState }

func (CapacityProviderMemoryMiBRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityProviderMemoryMiBRequest)(nil)).Elem()
}

func (o CapacityProviderMemoryMiBRequestOutput) ToCapacityProviderMemoryMiBRequestOutput() CapacityProviderMemoryMiBRequestOutput {
	return o
}

func (o CapacityProviderMemoryMiBRequestOutput) ToCapacityProviderMemoryMiBRequestOutputWithContext(ctx context.Context) CapacityProviderMemoryMiBRequestOutput {
	return o
}

func (o CapacityProviderMemoryMiBRequestOutput) ToCapacityProviderMemoryMiBRequestPtrOutput() CapacityProviderMemoryMiBRequestPtrOutput {
	return o.ToCapacityProviderMemoryMiBRequestPtrOutputWithContext(context.Background())
}

func (o CapacityProviderMemoryMiBRequestOutput) ToCapacityProviderMemoryMiBRequestPtrOutputWithContext(ctx context.Context) CapacityProviderMemoryMiBRequestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CapacityProviderMemoryMiBRequest) *CapacityProviderMemoryMiBRequest {
		return &v
	}).(CapacityProviderMemoryMiBRequestPtrOutput)
}

// The maximum amount of memory in MiB. Instance types with more memory than this value are excluded from selection.
func (o CapacityProviderMemoryMiBRequestOutput) Max() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CapacityProviderMemoryMiBRequest) *int { return v.Max }).(pulumi.IntPtrOutput)
}

// The minimum amount of memory in MiB. Instance types with less memory than this value are excluded from selection.
func (o CapacityProviderMemoryMiBRequestOutput) Min() pulumi.IntOutput {
	return o.ApplyT(func(v CapacityProviderMemoryMiBRequest) int { return v.Min }).(pulumi.IntOutput)
}

type CapacityProviderMemoryMiBRequestPtrOutput struct{ *pulumi.OutputState }

func (CapacityProviderMemoryMiBRequestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityProviderMemoryMiBRequest)(nil)).Elem()
}

func (o CapacityProviderMemoryMiBRequestPtrOutput) ToCapacityProviderMemoryMiBRequestPtrOutput() CapacityProviderMemoryMiBRequestPtrOutput {
	return o
}

func (o CapacityProviderMemoryMiBRequestPtrOutput) ToCapacityProviderMemoryMiBRequestPtrOutputWithContext(ctx context.Context) CapacityProviderMemoryMiBRequestPtrOutput {
	return o
}

func (o CapacityProviderMemoryMiBRequestPtrOutput) Elem() CapacityProviderMemoryMiBRequestOutput {
	return o.ApplyT(func(v *CapacityProviderMemoryMiBRequest) CapacityProviderMemoryMiBRequest {
		if v != nil {
			return *v
		}
		var ret CapacityProviderMemoryMiBRequest
		return ret
	}).(CapacityProviderMemoryMiBRequestOutput)
}

// The maximum amount of memory in MiB. Instance types with more memory than this value are excluded from selection.
func (o CapacityProviderMemoryMiBRequestPtrOutput) Max() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CapacityProviderMemoryMiBRequest) *int {
		if v == nil {
			return nil
		}
		return v.Max
	}).(pulumi.IntPtrOutput)
}

// The minimum amount of memory in MiB. Instance types with less memory than this value are excluded from selection.
func (o CapacityProviderMemoryMiBRequestPtrOutput) Min() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CapacityProviderMemoryMiBRequest) *int {
		if v == nil {
			return nil
		}
		return &v.Min
	}).(pulumi.IntPtrOutput)
}

type CapacityProviderNetworkBandwidthGbpsRequest struct {
	// The maximum network bandwidth in Gbps. Instance types with higher network bandwidth are excluded from selection.
	Max *float64 `pulumi:"max"`
	// The minimum network bandwidth in Gbps. Instance types with lower network bandwidth are excluded from selection.
	Min *float64 `pulumi:"min"`
}

// CapacityProviderNetworkBandwidthGbpsRequestInput is an input type that accepts CapacityProviderNetworkBandwidthGbpsRequestArgs and CapacityProviderNetworkBandwidthGbpsRequestOutput values.
// You can construct a concrete instance of `CapacityProviderNetworkBandwidthGbpsRequestInput` via:
//
//	CapacityProviderNetworkBandwidthGbpsRequestArgs{...}
type CapacityProviderNetworkBandwidthGbpsRequestInput interface {
	pulumi.Input

	ToCapacityProviderNetworkBandwidthGbpsRequestOutput() CapacityProviderNetworkBandwidthGbpsRequestOutput
	ToCapacityProviderNetworkBandwidthGbpsRequestOutputWithContext(context.Context) CapacityProviderNetworkBandwidthGbpsRequestOutput
}

type CapacityProviderNetworkBandwidthGbpsRequestArgs struct {
	// The maximum network bandwidth in Gbps. Instance types with higher network bandwidth are excluded from selection.
	Max pulumi.Float64PtrInput `pulumi:"max"`
	// The minimum network bandwidth in Gbps. Instance types with lower network bandwidth are excluded from selection.
	Min pulumi.Float64PtrInput `pulumi:"min"`
}

func (CapacityProviderNetworkBandwidthGbpsRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityProviderNetworkBandwidthGbpsRequest)(nil)).Elem()
}

func (i CapacityProviderNetworkBandwidthGbpsRequestArgs) ToCapacityProviderNetworkBandwidthGbpsRequestOutput() CapacityProviderNetworkBandwidthGbpsRequestOutput {
	return i.ToCapacityProviderNetworkBandwidthGbpsRequestOutputWithContext(context.Background())
}

func (i CapacityProviderNetworkBandwidthGbpsRequestArgs) ToCapacityProviderNetworkBandwidthGbpsRequestOutputWithContext(ctx context.Context) CapacityProviderNetworkBandwidthGbpsRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderNetworkBandwidthGbpsRequestOutput)
}

func (i CapacityProviderNetworkBandwidthGbpsRequestArgs) ToCapacityProviderNetworkBandwidthGbpsRequestPtrOutput() CapacityProviderNetworkBandwidthGbpsRequestPtrOutput {
	return i.ToCapacityProviderNetworkBandwidthGbpsRequestPtrOutputWithContext(context.Background())
}

func (i CapacityProviderNetworkBandwidthGbpsRequestArgs) ToCapacityProviderNetworkBandwidthGbpsRequestPtrOutputWithContext(ctx context.Context) CapacityProviderNetworkBandwidthGbpsRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderNetworkBandwidthGbpsRequestOutput).ToCapacityProviderNetworkBandwidthGbpsRequestPtrOutputWithContext(ctx)
}

// CapacityProviderNetworkBandwidthGbpsRequestPtrInput is an input type that accepts CapacityProviderNetworkBandwidthGbpsRequestArgs, CapacityProviderNetworkBandwidthGbpsRequestPtr and CapacityProviderNetworkBandwidthGbpsRequestPtrOutput values.
// You can construct a concrete instance of `CapacityProviderNetworkBandwidthGbpsRequestPtrInput` via:
//
//	        CapacityProviderNetworkBandwidthGbpsRequestArgs{...}
//
//	or:
//
//	        nil
type CapacityProviderNetworkBandwidthGbpsRequestPtrInput interface {
	pulumi.Input

	ToCapacityProviderNetworkBandwidthGbpsRequestPtrOutput() CapacityProviderNetworkBandwidthGbpsRequestPtrOutput
	ToCapacityProviderNetworkBandwidthGbpsRequestPtrOutputWithContext(context.Context) CapacityProviderNetworkBandwidthGbpsRequestPtrOutput
}

type capacityProviderNetworkBandwidthGbpsRequestPtrType CapacityProviderNetworkBandwidthGbpsRequestArgs

func CapacityProviderNetworkBandwidthGbpsRequestPtr(v *CapacityProviderNetworkBandwidthGbpsRequestArgs) CapacityProviderNetworkBandwidthGbpsRequestPtrInput {
	return (*capacityProviderNetworkBandwidthGbpsRequestPtrType)(v)
}

func (*capacityProviderNetworkBandwidthGbpsRequestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityProviderNetworkBandwidthGbpsRequest)(nil)).Elem()
}

func (i *capacityProviderNetworkBandwidthGbpsRequestPtrType) ToCapacityProviderNetworkBandwidthGbpsRequestPtrOutput() CapacityProviderNetworkBandwidthGbpsRequestPtrOutput {
	return i.ToCapacityProviderNetworkBandwidthGbpsRequestPtrOutputWithContext(context.Background())
}

func (i *capacityProviderNetworkBandwidthGbpsRequestPtrType) ToCapacityProviderNetworkBandwidthGbpsRequestPtrOutputWithContext(ctx context.Context) CapacityProviderNetworkBandwidthGbpsRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderNetworkBandwidthGbpsRequestPtrOutput)
}

type CapacityProviderNetworkBandwidthGbpsRequestOutput struct{ *pulumi.OutputState }

func (CapacityProviderNetworkBandwidthGbpsRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityProviderNetworkBandwidthGbpsRequest)(nil)).Elem()
}

func (o CapacityProviderNetworkBandwidthGbpsRequestOutput) ToCapacityProviderNetworkBandwidthGbpsRequestOutput() CapacityProviderNetworkBandwidthGbpsRequestOutput {
	return o
}

func (o CapacityProviderNetworkBandwidthGbpsRequestOutput) ToCapacityProviderNetworkBandwidthGbpsRequestOutputWithContext(ctx context.Context) CapacityProviderNetworkBandwidthGbpsRequestOutput {
	return o
}

func (o CapacityProviderNetworkBandwidthGbpsRequestOutput) ToCapacityProviderNetworkBandwidthGbpsRequestPtrOutput() CapacityProviderNetworkBandwidthGbpsRequestPtrOutput {
	return o.ToCapacityProviderNetworkBandwidthGbpsRequestPtrOutputWithContext(context.Background())
}

func (o CapacityProviderNetworkBandwidthGbpsRequestOutput) ToCapacityProviderNetworkBandwidthGbpsRequestPtrOutputWithContext(ctx context.Context) CapacityProviderNetworkBandwidthGbpsRequestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CapacityProviderNetworkBandwidthGbpsRequest) *CapacityProviderNetworkBandwidthGbpsRequest {
		return &v
	}).(CapacityProviderNetworkBandwidthGbpsRequestPtrOutput)
}

// The maximum network bandwidth in Gbps. Instance types with higher network bandwidth are excluded from selection.
func (o CapacityProviderNetworkBandwidthGbpsRequestOutput) Max() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v CapacityProviderNetworkBandwidthGbpsRequest) *float64 { return v.Max }).(pulumi.Float64PtrOutput)
}

// The minimum network bandwidth in Gbps. Instance types with lower network bandwidth are excluded from selection.
func (o CapacityProviderNetworkBandwidthGbpsRequestOutput) Min() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v CapacityProviderNetworkBandwidthGbpsRequest) *float64 { return v.Min }).(pulumi.Float64PtrOutput)
}

type CapacityProviderNetworkBandwidthGbpsRequestPtrOutput struct{ *pulumi.OutputState }

func (CapacityProviderNetworkBandwidthGbpsRequestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityProviderNetworkBandwidthGbpsRequest)(nil)).Elem()
}

func (o CapacityProviderNetworkBandwidthGbpsRequestPtrOutput) ToCapacityProviderNetworkBandwidthGbpsRequestPtrOutput() CapacityProviderNetworkBandwidthGbpsRequestPtrOutput {
	return o
}

func (o CapacityProviderNetworkBandwidthGbpsRequestPtrOutput) ToCapacityProviderNetworkBandwidthGbpsRequestPtrOutputWithContext(ctx context.Context) CapacityProviderNetworkBandwidthGbpsRequestPtrOutput {
	return o
}

func (o CapacityProviderNetworkBandwidthGbpsRequestPtrOutput) Elem() CapacityProviderNetworkBandwidthGbpsRequestOutput {
	return o.ApplyT(func(v *CapacityProviderNetworkBandwidthGbpsRequest) CapacityProviderNetworkBandwidthGbpsRequest {
		if v != nil {
			return *v
		}
		var ret CapacityProviderNetworkBandwidthGbpsRequest
		return ret
	}).(CapacityProviderNetworkBandwidthGbpsRequestOutput)
}

// The maximum network bandwidth in Gbps. Instance types with higher network bandwidth are excluded from selection.
func (o CapacityProviderNetworkBandwidthGbpsRequestPtrOutput) Max() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *CapacityProviderNetworkBandwidthGbpsRequest) *float64 {
		if v == nil {
			return nil
		}
		return v.Max
	}).(pulumi.Float64PtrOutput)
}

// The minimum network bandwidth in Gbps. Instance types with lower network bandwidth are excluded from selection.
func (o CapacityProviderNetworkBandwidthGbpsRequestPtrOutput) Min() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *CapacityProviderNetworkBandwidthGbpsRequest) *float64 {
		if v == nil {
			return nil
		}
		return v.Min
	}).(pulumi.Float64PtrOutput)
}

type CapacityProviderNetworkInterfaceCountRequest struct {
	// The maximum number of network interfaces. Instance types that support more network interfaces are excluded from selection.
	Max *int `pulumi:"max"`
	// The minimum number of network interfaces. Instance types that support fewer network interfaces are excluded from selection.
	Min *int `pulumi:"min"`
}

// CapacityProviderNetworkInterfaceCountRequestInput is an input type that accepts CapacityProviderNetworkInterfaceCountRequestArgs and CapacityProviderNetworkInterfaceCountRequestOutput values.
// You can construct a concrete instance of `CapacityProviderNetworkInterfaceCountRequestInput` via:
//
//	CapacityProviderNetworkInterfaceCountRequestArgs{...}
type CapacityProviderNetworkInterfaceCountRequestInput interface {
	pulumi.Input

	ToCapacityProviderNetworkInterfaceCountRequestOutput() CapacityProviderNetworkInterfaceCountRequestOutput
	ToCapacityProviderNetworkInterfaceCountRequestOutputWithContext(context.Context) CapacityProviderNetworkInterfaceCountRequestOutput
}

type CapacityProviderNetworkInterfaceCountRequestArgs struct {
	// The maximum number of network interfaces. Instance types that support more network interfaces are excluded from selection.
	Max pulumi.IntPtrInput `pulumi:"max"`
	// The minimum number of network interfaces. Instance types that support fewer network interfaces are excluded from selection.
	Min pulumi.IntPtrInput `pulumi:"min"`
}

func (CapacityProviderNetworkInterfaceCountRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityProviderNetworkInterfaceCountRequest)(nil)).Elem()
}

func (i CapacityProviderNetworkInterfaceCountRequestArgs) ToCapacityProviderNetworkInterfaceCountRequestOutput() CapacityProviderNetworkInterfaceCountRequestOutput {
	return i.ToCapacityProviderNetworkInterfaceCountRequestOutputWithContext(context.Background())
}

func (i CapacityProviderNetworkInterfaceCountRequestArgs) ToCapacityProviderNetworkInterfaceCountRequestOutputWithContext(ctx context.Context) CapacityProviderNetworkInterfaceCountRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderNetworkInterfaceCountRequestOutput)
}

func (i CapacityProviderNetworkInterfaceCountRequestArgs) ToCapacityProviderNetworkInterfaceCountRequestPtrOutput() CapacityProviderNetworkInterfaceCountRequestPtrOutput {
	return i.ToCapacityProviderNetworkInterfaceCountRequestPtrOutputWithContext(context.Background())
}

func (i CapacityProviderNetworkInterfaceCountRequestArgs) ToCapacityProviderNetworkInterfaceCountRequestPtrOutputWithContext(ctx context.Context) CapacityProviderNetworkInterfaceCountRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderNetworkInterfaceCountRequestOutput).ToCapacityProviderNetworkInterfaceCountRequestPtrOutputWithContext(ctx)
}

// CapacityProviderNetworkInterfaceCountRequestPtrInput is an input type that accepts CapacityProviderNetworkInterfaceCountRequestArgs, CapacityProviderNetworkInterfaceCountRequestPtr and CapacityProviderNetworkInterfaceCountRequestPtrOutput values.
// You can construct a concrete instance of `CapacityProviderNetworkInterfaceCountRequestPtrInput` via:
//
//	        CapacityProviderNetworkInterfaceCountRequestArgs{...}
//
//	or:
//
//	        nil
type CapacityProviderNetworkInterfaceCountRequestPtrInput interface {
	pulumi.Input

	ToCapacityProviderNetworkInterfaceCountRequestPtrOutput() CapacityProviderNetworkInterfaceCountRequestPtrOutput
	ToCapacityProviderNetworkInterfaceCountRequestPtrOutputWithContext(context.Context) CapacityProviderNetworkInterfaceCountRequestPtrOutput
}

type capacityProviderNetworkInterfaceCountRequestPtrType CapacityProviderNetworkInterfaceCountRequestArgs

func CapacityProviderNetworkInterfaceCountRequestPtr(v *CapacityProviderNetworkInterfaceCountRequestArgs) CapacityProviderNetworkInterfaceCountRequestPtrInput {
	return (*capacityProviderNetworkInterfaceCountRequestPtrType)(v)
}

func (*capacityProviderNetworkInterfaceCountRequestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityProviderNetworkInterfaceCountRequest)(nil)).Elem()
}

func (i *capacityProviderNetworkInterfaceCountRequestPtrType) ToCapacityProviderNetworkInterfaceCountRequestPtrOutput() CapacityProviderNetworkInterfaceCountRequestPtrOutput {
	return i.ToCapacityProviderNetworkInterfaceCountRequestPtrOutputWithContext(context.Background())
}

func (i *capacityProviderNetworkInterfaceCountRequestPtrType) ToCapacityProviderNetworkInterfaceCountRequestPtrOutputWithContext(ctx context.Context) CapacityProviderNetworkInterfaceCountRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderNetworkInterfaceCountRequestPtrOutput)
}

type CapacityProviderNetworkInterfaceCountRequestOutput struct{ *pulumi.OutputState }

func (CapacityProviderNetworkInterfaceCountRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityProviderNetworkInterfaceCountRequest)(nil)).Elem()
}

func (o CapacityProviderNetworkInterfaceCountRequestOutput) ToCapacityProviderNetworkInterfaceCountRequestOutput() CapacityProviderNetworkInterfaceCountRequestOutput {
	return o
}

func (o CapacityProviderNetworkInterfaceCountRequestOutput) ToCapacityProviderNetworkInterfaceCountRequestOutputWithContext(ctx context.Context) CapacityProviderNetworkInterfaceCountRequestOutput {
	return o
}

func (o CapacityProviderNetworkInterfaceCountRequestOutput) ToCapacityProviderNetworkInterfaceCountRequestPtrOutput() CapacityProviderNetworkInterfaceCountRequestPtrOutput {
	return o.ToCapacityProviderNetworkInterfaceCountRequestPtrOutputWithContext(context.Background())
}

func (o CapacityProviderNetworkInterfaceCountRequestOutput) ToCapacityProviderNetworkInterfaceCountRequestPtrOutputWithContext(ctx context.Context) CapacityProviderNetworkInterfaceCountRequestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CapacityProviderNetworkInterfaceCountRequest) *CapacityProviderNetworkInterfaceCountRequest {
		return &v
	}).(CapacityProviderNetworkInterfaceCountRequestPtrOutput)
}

// The maximum number of network interfaces. Instance types that support more network interfaces are excluded from selection.
func (o CapacityProviderNetworkInterfaceCountRequestOutput) Max() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CapacityProviderNetworkInterfaceCountRequest) *int { return v.Max }).(pulumi.IntPtrOutput)
}

// The minimum number of network interfaces. Instance types that support fewer network interfaces are excluded from selection.
func (o CapacityProviderNetworkInterfaceCountRequestOutput) Min() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CapacityProviderNetworkInterfaceCountRequest) *int { return v.Min }).(pulumi.IntPtrOutput)
}

type CapacityProviderNetworkInterfaceCountRequestPtrOutput struct{ *pulumi.OutputState }

func (CapacityProviderNetworkInterfaceCountRequestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityProviderNetworkInterfaceCountRequest)(nil)).Elem()
}

func (o CapacityProviderNetworkInterfaceCountRequestPtrOutput) ToCapacityProviderNetworkInterfaceCountRequestPtrOutput() CapacityProviderNetworkInterfaceCountRequestPtrOutput {
	return o
}

func (o CapacityProviderNetworkInterfaceCountRequestPtrOutput) ToCapacityProviderNetworkInterfaceCountRequestPtrOutputWithContext(ctx context.Context) CapacityProviderNetworkInterfaceCountRequestPtrOutput {
	return o
}

func (o CapacityProviderNetworkInterfaceCountRequestPtrOutput) Elem() CapacityProviderNetworkInterfaceCountRequestOutput {
	return o.ApplyT(func(v *CapacityProviderNetworkInterfaceCountRequest) CapacityProviderNetworkInterfaceCountRequest {
		if v != nil {
			return *v
		}
		var ret CapacityProviderNetworkInterfaceCountRequest
		return ret
	}).(CapacityProviderNetworkInterfaceCountRequestOutput)
}

// The maximum number of network interfaces. Instance types that support more network interfaces are excluded from selection.
func (o CapacityProviderNetworkInterfaceCountRequestPtrOutput) Max() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CapacityProviderNetworkInterfaceCountRequest) *int {
		if v == nil {
			return nil
		}
		return v.Max
	}).(pulumi.IntPtrOutput)
}

// The minimum number of network interfaces. Instance types that support fewer network interfaces are excluded from selection.
func (o CapacityProviderNetworkInterfaceCountRequestPtrOutput) Min() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CapacityProviderNetworkInterfaceCountRequest) *int {
		if v == nil {
			return nil
		}
		return v.Min
	}).(pulumi.IntPtrOutput)
}

type CapacityProviderTag struct {
	// One part of a key-value pair that make up a tag. A `key` is a general label that acts like a category for more specific tag values.
	Key *string `pulumi:"key"`
	// The optional part of a key-value pair that make up a tag. A `value` acts as a descriptor within a tag category (key).
	Value *string `pulumi:"value"`
}

type CapacityProviderTotalLocalStorageGbRequest struct {
	// The maximum total local storage in GB. Instance types with more local storage are excluded from selection.
	Max *float64 `pulumi:"max"`
	// The minimum total local storage in GB. Instance types with less local storage are excluded from selection.
	Min *float64 `pulumi:"min"`
}

// CapacityProviderTotalLocalStorageGbRequestInput is an input type that accepts CapacityProviderTotalLocalStorageGbRequestArgs and CapacityProviderTotalLocalStorageGbRequestOutput values.
// You can construct a concrete instance of `CapacityProviderTotalLocalStorageGbRequestInput` via:
//
//	CapacityProviderTotalLocalStorageGbRequestArgs{...}
type CapacityProviderTotalLocalStorageGbRequestInput interface {
	pulumi.Input

	ToCapacityProviderTotalLocalStorageGbRequestOutput() CapacityProviderTotalLocalStorageGbRequestOutput
	ToCapacityProviderTotalLocalStorageGbRequestOutputWithContext(context.Context) CapacityProviderTotalLocalStorageGbRequestOutput
}

type CapacityProviderTotalLocalStorageGbRequestArgs struct {
	// The maximum total local storage in GB. Instance types with more local storage are excluded from selection.
	Max pulumi.Float64PtrInput `pulumi:"max"`
	// The minimum total local storage in GB. Instance types with less local storage are excluded from selection.
	Min pulumi.Float64PtrInput `pulumi:"min"`
}

func (CapacityProviderTotalLocalStorageGbRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityProviderTotalLocalStorageGbRequest)(nil)).Elem()
}

func (i CapacityProviderTotalLocalStorageGbRequestArgs) ToCapacityProviderTotalLocalStorageGbRequestOutput() CapacityProviderTotalLocalStorageGbRequestOutput {
	return i.ToCapacityProviderTotalLocalStorageGbRequestOutputWithContext(context.Background())
}

func (i CapacityProviderTotalLocalStorageGbRequestArgs) ToCapacityProviderTotalLocalStorageGbRequestOutputWithContext(ctx context.Context) CapacityProviderTotalLocalStorageGbRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderTotalLocalStorageGbRequestOutput)
}

func (i CapacityProviderTotalLocalStorageGbRequestArgs) ToCapacityProviderTotalLocalStorageGbRequestPtrOutput() CapacityProviderTotalLocalStorageGbRequestPtrOutput {
	return i.ToCapacityProviderTotalLocalStorageGbRequestPtrOutputWithContext(context.Background())
}

func (i CapacityProviderTotalLocalStorageGbRequestArgs) ToCapacityProviderTotalLocalStorageGbRequestPtrOutputWithContext(ctx context.Context) CapacityProviderTotalLocalStorageGbRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderTotalLocalStorageGbRequestOutput).ToCapacityProviderTotalLocalStorageGbRequestPtrOutputWithContext(ctx)
}

// CapacityProviderTotalLocalStorageGbRequestPtrInput is an input type that accepts CapacityProviderTotalLocalStorageGbRequestArgs, CapacityProviderTotalLocalStorageGbRequestPtr and CapacityProviderTotalLocalStorageGbRequestPtrOutput values.
// You can construct a concrete instance of `CapacityProviderTotalLocalStorageGbRequestPtrInput` via:
//
//	        CapacityProviderTotalLocalStorageGbRequestArgs{...}
//
//	or:
//
//	        nil
type CapacityProviderTotalLocalStorageGbRequestPtrInput interface {
	pulumi.Input

	ToCapacityProviderTotalLocalStorageGbRequestPtrOutput() CapacityProviderTotalLocalStorageGbRequestPtrOutput
	ToCapacityProviderTotalLocalStorageGbRequestPtrOutputWithContext(context.Context) CapacityProviderTotalLocalStorageGbRequestPtrOutput
}

type capacityProviderTotalLocalStorageGbRequestPtrType CapacityProviderTotalLocalStorageGbRequestArgs

func CapacityProviderTotalLocalStorageGbRequestPtr(v *CapacityProviderTotalLocalStorageGbRequestArgs) CapacityProviderTotalLocalStorageGbRequestPtrInput {
	return (*capacityProviderTotalLocalStorageGbRequestPtrType)(v)
}

func (*capacityProviderTotalLocalStorageGbRequestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityProviderTotalLocalStorageGbRequest)(nil)).Elem()
}

func (i *capacityProviderTotalLocalStorageGbRequestPtrType) ToCapacityProviderTotalLocalStorageGbRequestPtrOutput() CapacityProviderTotalLocalStorageGbRequestPtrOutput {
	return i.ToCapacityProviderTotalLocalStorageGbRequestPtrOutputWithContext(context.Background())
}

func (i *capacityProviderTotalLocalStorageGbRequestPtrType) ToCapacityProviderTotalLocalStorageGbRequestPtrOutputWithContext(ctx context.Context) CapacityProviderTotalLocalStorageGbRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderTotalLocalStorageGbRequestPtrOutput)
}

type CapacityProviderTotalLocalStorageGbRequestOutput struct{ *pulumi.OutputState }

func (CapacityProviderTotalLocalStorageGbRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityProviderTotalLocalStorageGbRequest)(nil)).Elem()
}

func (o CapacityProviderTotalLocalStorageGbRequestOutput) ToCapacityProviderTotalLocalStorageGbRequestOutput() CapacityProviderTotalLocalStorageGbRequestOutput {
	return o
}

func (o CapacityProviderTotalLocalStorageGbRequestOutput) ToCapacityProviderTotalLocalStorageGbRequestOutputWithContext(ctx context.Context) CapacityProviderTotalLocalStorageGbRequestOutput {
	return o
}

func (o CapacityProviderTotalLocalStorageGbRequestOutput) ToCapacityProviderTotalLocalStorageGbRequestPtrOutput() CapacityProviderTotalLocalStorageGbRequestPtrOutput {
	return o.ToCapacityProviderTotalLocalStorageGbRequestPtrOutputWithContext(context.Background())
}

func (o CapacityProviderTotalLocalStorageGbRequestOutput) ToCapacityProviderTotalLocalStorageGbRequestPtrOutputWithContext(ctx context.Context) CapacityProviderTotalLocalStorageGbRequestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CapacityProviderTotalLocalStorageGbRequest) *CapacityProviderTotalLocalStorageGbRequest {
		return &v
	}).(CapacityProviderTotalLocalStorageGbRequestPtrOutput)
}

// The maximum total local storage in GB. Instance types with more local storage are excluded from selection.
func (o CapacityProviderTotalLocalStorageGbRequestOutput) Max() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v CapacityProviderTotalLocalStorageGbRequest) *float64 { return v.Max }).(pulumi.Float64PtrOutput)
}

// The minimum total local storage in GB. Instance types with less local storage are excluded from selection.
func (o CapacityProviderTotalLocalStorageGbRequestOutput) Min() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v CapacityProviderTotalLocalStorageGbRequest) *float64 { return v.Min }).(pulumi.Float64PtrOutput)
}

type CapacityProviderTotalLocalStorageGbRequestPtrOutput struct{ *pulumi.OutputState }

func (CapacityProviderTotalLocalStorageGbRequestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityProviderTotalLocalStorageGbRequest)(nil)).Elem()
}

func (o CapacityProviderTotalLocalStorageGbRequestPtrOutput) ToCapacityProviderTotalLocalStorageGbRequestPtrOutput() CapacityProviderTotalLocalStorageGbRequestPtrOutput {
	return o
}

func (o CapacityProviderTotalLocalStorageGbRequestPtrOutput) ToCapacityProviderTotalLocalStorageGbRequestPtrOutputWithContext(ctx context.Context) CapacityProviderTotalLocalStorageGbRequestPtrOutput {
	return o
}

func (o CapacityProviderTotalLocalStorageGbRequestPtrOutput) Elem() CapacityProviderTotalLocalStorageGbRequestOutput {
	return o.ApplyT(func(v *CapacityProviderTotalLocalStorageGbRequest) CapacityProviderTotalLocalStorageGbRequest {
		if v != nil {
			return *v
		}
		var ret CapacityProviderTotalLocalStorageGbRequest
		return ret
	}).(CapacityProviderTotalLocalStorageGbRequestOutput)
}

// The maximum total local storage in GB. Instance types with more local storage are excluded from selection.
func (o CapacityProviderTotalLocalStorageGbRequestPtrOutput) Max() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *CapacityProviderTotalLocalStorageGbRequest) *float64 {
		if v == nil {
			return nil
		}
		return v.Max
	}).(pulumi.Float64PtrOutput)
}

// The minimum total local storage in GB. Instance types with less local storage are excluded from selection.
func (o CapacityProviderTotalLocalStorageGbRequestPtrOutput) Min() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *CapacityProviderTotalLocalStorageGbRequest) *float64 {
		if v == nil {
			return nil
		}
		return v.Min
	}).(pulumi.Float64PtrOutput)
}

type CapacityProviderVCpuCountRangeRequest struct {
	// The maximum number of vCPUs. Instance types with more vCPUs than this value are excluded from selection.
	Max *int `pulumi:"max"`
	// The minimum number of vCPUs. Instance types with fewer vCPUs than this value are excluded from selection.
	Min int `pulumi:"min"`
}

// CapacityProviderVCpuCountRangeRequestInput is an input type that accepts CapacityProviderVCpuCountRangeRequestArgs and CapacityProviderVCpuCountRangeRequestOutput values.
// You can construct a concrete instance of `CapacityProviderVCpuCountRangeRequestInput` via:
//
//	CapacityProviderVCpuCountRangeRequestArgs{...}
type CapacityProviderVCpuCountRangeRequestInput interface {
	pulumi.Input

	ToCapacityProviderVCpuCountRangeRequestOutput() CapacityProviderVCpuCountRangeRequestOutput
	ToCapacityProviderVCpuCountRangeRequestOutputWithContext(context.Context) CapacityProviderVCpuCountRangeRequestOutput
}

type CapacityProviderVCpuCountRangeRequestArgs struct {
	// The maximum number of vCPUs. Instance types with more vCPUs than this value are excluded from selection.
	Max pulumi.IntPtrInput `pulumi:"max"`
	// The minimum number of vCPUs. Instance types with fewer vCPUs than this value are excluded from selection.
	Min pulumi.IntInput `pulumi:"min"`
}

func (CapacityProviderVCpuCountRangeRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityProviderVCpuCountRangeRequest)(nil)).Elem()
}

func (i CapacityProviderVCpuCountRangeRequestArgs) ToCapacityProviderVCpuCountRangeRequestOutput() CapacityProviderVCpuCountRangeRequestOutput {
	return i.ToCapacityProviderVCpuCountRangeRequestOutputWithContext(context.Background())
}

func (i CapacityProviderVCpuCountRangeRequestArgs) ToCapacityProviderVCpuCountRangeRequestOutputWithContext(ctx context.Context) CapacityProviderVCpuCountRangeRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderVCpuCountRangeRequestOutput)
}

func (i CapacityProviderVCpuCountRangeRequestArgs) ToCapacityProviderVCpuCountRangeRequestPtrOutput() CapacityProviderVCpuCountRangeRequestPtrOutput {
	return i.ToCapacityProviderVCpuCountRangeRequestPtrOutputWithContext(context.Background())
}

func (i CapacityProviderVCpuCountRangeRequestArgs) ToCapacityProviderVCpuCountRangeRequestPtrOutputWithContext(ctx context.Context) CapacityProviderVCpuCountRangeRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderVCpuCountRangeRequestOutput).ToCapacityProviderVCpuCountRangeRequestPtrOutputWithContext(ctx)
}

// CapacityProviderVCpuCountRangeRequestPtrInput is an input type that accepts CapacityProviderVCpuCountRangeRequestArgs, CapacityProviderVCpuCountRangeRequestPtr and CapacityProviderVCpuCountRangeRequestPtrOutput values.
// You can construct a concrete instance of `CapacityProviderVCpuCountRangeRequestPtrInput` via:
//
//	        CapacityProviderVCpuCountRangeRequestArgs{...}
//
//	or:
//
//	        nil
type CapacityProviderVCpuCountRangeRequestPtrInput interface {
	pulumi.Input

	ToCapacityProviderVCpuCountRangeRequestPtrOutput() CapacityProviderVCpuCountRangeRequestPtrOutput
	ToCapacityProviderVCpuCountRangeRequestPtrOutputWithContext(context.Context) CapacityProviderVCpuCountRangeRequestPtrOutput
}

type capacityProviderVCpuCountRangeRequestPtrType CapacityProviderVCpuCountRangeRequestArgs

func CapacityProviderVCpuCountRangeRequestPtr(v *CapacityProviderVCpuCountRangeRequestArgs) CapacityProviderVCpuCountRangeRequestPtrInput {
	return (*capacityProviderVCpuCountRangeRequestPtrType)(v)
}

func (*capacityProviderVCpuCountRangeRequestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityProviderVCpuCountRangeRequest)(nil)).Elem()
}

func (i *capacityProviderVCpuCountRangeRequestPtrType) ToCapacityProviderVCpuCountRangeRequestPtrOutput() CapacityProviderVCpuCountRangeRequestPtrOutput {
	return i.ToCapacityProviderVCpuCountRangeRequestPtrOutputWithContext(context.Background())
}

func (i *capacityProviderVCpuCountRangeRequestPtrType) ToCapacityProviderVCpuCountRangeRequestPtrOutputWithContext(ctx context.Context) CapacityProviderVCpuCountRangeRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderVCpuCountRangeRequestPtrOutput)
}

type CapacityProviderVCpuCountRangeRequestOutput struct{ *pulumi.OutputState }

func (CapacityProviderVCpuCountRangeRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityProviderVCpuCountRangeRequest)(nil)).Elem()
}

func (o CapacityProviderVCpuCountRangeRequestOutput) ToCapacityProviderVCpuCountRangeRequestOutput() CapacityProviderVCpuCountRangeRequestOutput {
	return o
}

func (o CapacityProviderVCpuCountRangeRequestOutput) ToCapacityProviderVCpuCountRangeRequestOutputWithContext(ctx context.Context) CapacityProviderVCpuCountRangeRequestOutput {
	return o
}

func (o CapacityProviderVCpuCountRangeRequestOutput) ToCapacityProviderVCpuCountRangeRequestPtrOutput() CapacityProviderVCpuCountRangeRequestPtrOutput {
	return o.ToCapacityProviderVCpuCountRangeRequestPtrOutputWithContext(context.Background())
}

func (o CapacityProviderVCpuCountRangeRequestOutput) ToCapacityProviderVCpuCountRangeRequestPtrOutputWithContext(ctx context.Context) CapacityProviderVCpuCountRangeRequestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CapacityProviderVCpuCountRangeRequest) *CapacityProviderVCpuCountRangeRequest {
		return &v
	}).(CapacityProviderVCpuCountRangeRequestPtrOutput)
}

// The maximum number of vCPUs. Instance types with more vCPUs than this value are excluded from selection.
func (o CapacityProviderVCpuCountRangeRequestOutput) Max() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CapacityProviderVCpuCountRangeRequest) *int { return v.Max }).(pulumi.IntPtrOutput)
}

// The minimum number of vCPUs. Instance types with fewer vCPUs than this value are excluded from selection.
func (o CapacityProviderVCpuCountRangeRequestOutput) Min() pulumi.IntOutput {
	return o.ApplyT(func(v CapacityProviderVCpuCountRangeRequest) int { return v.Min }).(pulumi.IntOutput)
}

type CapacityProviderVCpuCountRangeRequestPtrOutput struct{ *pulumi.OutputState }

func (CapacityProviderVCpuCountRangeRequestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityProviderVCpuCountRangeRequest)(nil)).Elem()
}

func (o CapacityProviderVCpuCountRangeRequestPtrOutput) ToCapacityProviderVCpuCountRangeRequestPtrOutput() CapacityProviderVCpuCountRangeRequestPtrOutput {
	return o
}

func (o CapacityProviderVCpuCountRangeRequestPtrOutput) ToCapacityProviderVCpuCountRangeRequestPtrOutputWithContext(ctx context.Context) CapacityProviderVCpuCountRangeRequestPtrOutput {
	return o
}

func (o CapacityProviderVCpuCountRangeRequestPtrOutput) Elem() CapacityProviderVCpuCountRangeRequestOutput {
	return o.ApplyT(func(v *CapacityProviderVCpuCountRangeRequest) CapacityProviderVCpuCountRangeRequest {
		if v != nil {
			return *v
		}
		var ret CapacityProviderVCpuCountRangeRequest
		return ret
	}).(CapacityProviderVCpuCountRangeRequestOutput)
}

// The maximum number of vCPUs. Instance types with more vCPUs than this value are excluded from selection.
func (o CapacityProviderVCpuCountRangeRequestPtrOutput) Max() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CapacityProviderVCpuCountRangeRequest) *int {
		if v == nil {
			return nil
		}
		return v.Max
	}).(pulumi.IntPtrOutput)
}

// The minimum number of vCPUs. Instance types with fewer vCPUs than this value are excluded from selection.
func (o CapacityProviderVCpuCountRangeRequestPtrOutput) Min() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CapacityProviderVCpuCountRangeRequest) *int {
		if v == nil {
			return nil
		}
		return &v.Min
	}).(pulumi.IntPtrOutput)
}

type ClusterCapacityProviderAssociationsCapacityProviderStrategy struct {
	Base             *int   `pulumi:"base"`
	CapacityProvider string `pulumi:"capacityProvider"`
	Weight           *int   `pulumi:"weight"`
}

// ClusterCapacityProviderAssociationsCapacityProviderStrategyInput is an input type that accepts ClusterCapacityProviderAssociationsCapacityProviderStrategyArgs and ClusterCapacityProviderAssociationsCapacityProviderStrategyOutput values.
// You can construct a concrete instance of `ClusterCapacityProviderAssociationsCapacityProviderStrategyInput` via:
//
//	ClusterCapacityProviderAssociationsCapacityProviderStrategyArgs{...}
type ClusterCapacityProviderAssociationsCapacityProviderStrategyInput interface {
	pulumi.Input

	ToClusterCapacityProviderAssociationsCapacityProviderStrategyOutput() ClusterCapacityProviderAssociationsCapacityProviderStrategyOutput
	ToClusterCapacityProviderAssociationsCapacityProviderStrategyOutputWithContext(context.Context) ClusterCapacityProviderAssociationsCapacityProviderStrategyOutput
}

type ClusterCapacityProviderAssociationsCapacityProviderStrategyArgs struct {
	Base             pulumi.IntPtrInput `pulumi:"base"`
	CapacityProvider pulumi.StringInput `pulumi:"capacityProvider"`
	Weight           pulumi.IntPtrInput `pulumi:"weight"`
}

func (ClusterCapacityProviderAssociationsCapacityProviderStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCapacityProviderAssociationsCapacityProviderStrategy)(nil)).Elem()
}

func (i ClusterCapacityProviderAssociationsCapacityProviderStrategyArgs) ToClusterCapacityProviderAssociationsCapacityProviderStrategyOutput() ClusterCapacityProviderAssociationsCapacityProviderStrategyOutput {
	return i.ToClusterCapacityProviderAssociationsCapacityProviderStrategyOutputWithContext(context.Background())
}

func (i ClusterCapacityProviderAssociationsCapacityProviderStrategyArgs) ToClusterCapacityProviderAssociationsCapacityProviderStrategyOutputWithContext(ctx context.Context) ClusterCapacityProviderAssociationsCapacityProviderStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCapacityProviderAssociationsCapacityProviderStrategyOutput)
}

// ClusterCapacityProviderAssociationsCapacityProviderStrategyArrayInput is an input type that accepts ClusterCapacityProviderAssociationsCapacityProviderStrategyArray and ClusterCapacityProviderAssociationsCapacityProviderStrategyArrayOutput values.
// You can construct a concrete instance of `ClusterCapacityProviderAssociationsCapacityProviderStrategyArrayInput` via:
//
//	ClusterCapacityProviderAssociationsCapacityProviderStrategyArray{ ClusterCapacityProviderAssociationsCapacityProviderStrategyArgs{...} }
type ClusterCapacityProviderAssociationsCapacityProviderStrategyArrayInput interface {
	pulumi.Input

	ToClusterCapacityProviderAssociationsCapacityProviderStrategyArrayOutput() ClusterCapacityProviderAssociationsCapacityProviderStrategyArrayOutput
	ToClusterCapacityProviderAssociationsCapacityProviderStrategyArrayOutputWithContext(context.Context) ClusterCapacityProviderAssociationsCapacityProviderStrategyArrayOutput
}

type ClusterCapacityProviderAssociationsCapacityProviderStrategyArray []ClusterCapacityProviderAssociationsCapacityProviderStrategyInput

func (ClusterCapacityProviderAssociationsCapacityProviderStrategyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterCapacityProviderAssociationsCapacityProviderStrategy)(nil)).Elem()
}

func (i ClusterCapacityProviderAssociationsCapacityProviderStrategyArray) ToClusterCapacityProviderAssociationsCapacityProviderStrategyArrayOutput() ClusterCapacityProviderAssociationsCapacityProviderStrategyArrayOutput {
	return i.ToClusterCapacityProviderAssociationsCapacityProviderStrategyArrayOutputWithContext(context.Background())
}

func (i ClusterCapacityProviderAssociationsCapacityProviderStrategyArray) ToClusterCapacityProviderAssociationsCapacityProviderStrategyArrayOutputWithContext(ctx context.Context) ClusterCapacityProviderAssociationsCapacityProviderStrategyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCapacityProviderAssociationsCapacityProviderStrategyArrayOutput)
}

type ClusterCapacityProviderAssociationsCapacityProviderStrategyOutput struct{ *pulumi.OutputState }

func (ClusterCapacityProviderAssociationsCapacityProviderStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCapacityProviderAssociationsCapacityProviderStrategy)(nil)).Elem()
}

func (o ClusterCapacityProviderAssociationsCapacityProviderStrategyOutput) ToClusterCapacityProviderAssociationsCapacityProviderStrategyOutput() ClusterCapacityProviderAssociationsCapacityProviderStrategyOutput {
	return o
}

func (o ClusterCapacityProviderAssociationsCapacityProviderStrategyOutput) ToClusterCapacityProviderAssociationsCapacityProviderStrategyOutputWithContext(ctx context.Context) ClusterCapacityProviderAssociationsCapacityProviderStrategyOutput {
	return o
}

func (o ClusterCapacityProviderAssociationsCapacityProviderStrategyOutput) Base() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterCapacityProviderAssociationsCapacityProviderStrategy) *int { return v.Base }).(pulumi.IntPtrOutput)
}

func (o ClusterCapacityProviderAssociationsCapacityProviderStrategyOutput) CapacityProvider() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterCapacityProviderAssociationsCapacityProviderStrategy) string { return v.CapacityProvider }).(pulumi.StringOutput)
}

func (o ClusterCapacityProviderAssociationsCapacityProviderStrategyOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterCapacityProviderAssociationsCapacityProviderStrategy) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type ClusterCapacityProviderAssociationsCapacityProviderStrategyArrayOutput struct{ *pulumi.OutputState }

func (ClusterCapacityProviderAssociationsCapacityProviderStrategyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterCapacityProviderAssociationsCapacityProviderStrategy)(nil)).Elem()
}

func (o ClusterCapacityProviderAssociationsCapacityProviderStrategyArrayOutput) ToClusterCapacityProviderAssociationsCapacityProviderStrategyArrayOutput() ClusterCapacityProviderAssociationsCapacityProviderStrategyArrayOutput {
	return o
}

func (o ClusterCapacityProviderAssociationsCapacityProviderStrategyArrayOutput) ToClusterCapacityProviderAssociationsCapacityProviderStrategyArrayOutputWithContext(ctx context.Context) ClusterCapacityProviderAssociationsCapacityProviderStrategyArrayOutput {
	return o
}

func (o ClusterCapacityProviderAssociationsCapacityProviderStrategyArrayOutput) Index(i pulumi.IntInput) ClusterCapacityProviderAssociationsCapacityProviderStrategyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterCapacityProviderAssociationsCapacityProviderStrategy {
		return vs[0].([]ClusterCapacityProviderAssociationsCapacityProviderStrategy)[vs[1].(int)]
	}).(ClusterCapacityProviderAssociationsCapacityProviderStrategyOutput)
}

// The “CapacityProviderStrategyItem“ property specifies the details of the default capacity provider strategy for the cluster. When services or tasks are run in the cluster with no launch type or capacity provider strategy specified, the default capacity provider strategy is used.
type ClusterCapacityProviderStrategyItem struct {
	// The *base* value designates how many tasks, at a minimum, to run on the specified capacity provider for each service. Only one capacity provider in a capacity provider strategy can have a *base* defined. If no value is specified, the default value of ``0`` is used.
	//  Base value characteristics:
	//   +  Only one capacity provider in a strategy can have a base defined
	//   +  Default value is ``0`` if not specified
	//   +  Valid range: 0 to 100,000
	//   +  Base requirements are satisfied first before weight distribution
	Base *int `pulumi:"base"`
	// The short name of the capacity provider.
	CapacityProvider *string `pulumi:"capacityProvider"`
	// The *weight* value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The ``weight`` value is taken into consideration after the ``base`` value, if defined, is satisfied.
	//  If no ``weight`` value is specified, the default value of ``0`` is used. When multiple capacity providers are specified within a capacity provider strategy, at least one of the capacity providers must have a weight value greater than zero and any capacity providers with a weight of ``0`` can't be used to place tasks. If you specify multiple capacity providers in a strategy that all have a weight of ``0``, any ``RunTask`` or ``CreateService`` actions using the capacity provider strategy will fail.
	//  Weight value characteristics:
	//   +  Weight is considered after the base value is satisfied
	//   +  Default value is ``0`` if not specified
	//   +  Valid range: 0 to 1,000
	//   +  At least one capacity provider must have a weight greater than zero
	//   +  Capacity providers with weight of ``0`` cannot place tasks
	//
	//  Task distribution logic:
	//   1.  Base satisfaction: The minimum number of tasks specified by the base value are placed on that capacity provider
	//   2.  Weight distribution: After base requirements are met, additional tasks are distributed according to weight ratios
	//
	//  Examples:
	//  Equal Distribution: Two capacity providers both with weight ``1`` will split tasks evenly after base requirements are met.
	//  Weighted Distribution: If capacityProviderA has weight ``1`` and capacityProviderB has weight ``4``, then for every 1 task on A, 4 tasks will run on B.
	Weight *int `pulumi:"weight"`
}

// ClusterCapacityProviderStrategyItemInput is an input type that accepts ClusterCapacityProviderStrategyItemArgs and ClusterCapacityProviderStrategyItemOutput values.
// You can construct a concrete instance of `ClusterCapacityProviderStrategyItemInput` via:
//
//	ClusterCapacityProviderStrategyItemArgs{...}
type ClusterCapacityProviderStrategyItemInput interface {
	pulumi.Input

	ToClusterCapacityProviderStrategyItemOutput() ClusterCapacityProviderStrategyItemOutput
	ToClusterCapacityProviderStrategyItemOutputWithContext(context.Context) ClusterCapacityProviderStrategyItemOutput
}

// The “CapacityProviderStrategyItem“ property specifies the details of the default capacity provider strategy for the cluster. When services or tasks are run in the cluster with no launch type or capacity provider strategy specified, the default capacity provider strategy is used.
type ClusterCapacityProviderStrategyItemArgs struct {
	// The *base* value designates how many tasks, at a minimum, to run on the specified capacity provider for each service. Only one capacity provider in a capacity provider strategy can have a *base* defined. If no value is specified, the default value of ``0`` is used.
	//  Base value characteristics:
	//   +  Only one capacity provider in a strategy can have a base defined
	//   +  Default value is ``0`` if not specified
	//   +  Valid range: 0 to 100,000
	//   +  Base requirements are satisfied first before weight distribution
	Base pulumi.IntPtrInput `pulumi:"base"`
	// The short name of the capacity provider.
	CapacityProvider pulumi.StringPtrInput `pulumi:"capacityProvider"`
	// The *weight* value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The ``weight`` value is taken into consideration after the ``base`` value, if defined, is satisfied.
	//  If no ``weight`` value is specified, the default value of ``0`` is used. When multiple capacity providers are specified within a capacity provider strategy, at least one of the capacity providers must have a weight value greater than zero and any capacity providers with a weight of ``0`` can't be used to place tasks. If you specify multiple capacity providers in a strategy that all have a weight of ``0``, any ``RunTask`` or ``CreateService`` actions using the capacity provider strategy will fail.
	//  Weight value characteristics:
	//   +  Weight is considered after the base value is satisfied
	//   +  Default value is ``0`` if not specified
	//   +  Valid range: 0 to 1,000
	//   +  At least one capacity provider must have a weight greater than zero
	//   +  Capacity providers with weight of ``0`` cannot place tasks
	//
	//  Task distribution logic:
	//   1.  Base satisfaction: The minimum number of tasks specified by the base value are placed on that capacity provider
	//   2.  Weight distribution: After base requirements are met, additional tasks are distributed according to weight ratios
	//
	//  Examples:
	//  Equal Distribution: Two capacity providers both with weight ``1`` will split tasks evenly after base requirements are met.
	//  Weighted Distribution: If capacityProviderA has weight ``1`` and capacityProviderB has weight ``4``, then for every 1 task on A, 4 tasks will run on B.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (ClusterCapacityProviderStrategyItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCapacityProviderStrategyItem)(nil)).Elem()
}

func (i ClusterCapacityProviderStrategyItemArgs) ToClusterCapacityProviderStrategyItemOutput() ClusterCapacityProviderStrategyItemOutput {
	return i.ToClusterCapacityProviderStrategyItemOutputWithContext(context.Background())
}

func (i ClusterCapacityProviderStrategyItemArgs) ToClusterCapacityProviderStrategyItemOutputWithContext(ctx context.Context) ClusterCapacityProviderStrategyItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCapacityProviderStrategyItemOutput)
}

// ClusterCapacityProviderStrategyItemArrayInput is an input type that accepts ClusterCapacityProviderStrategyItemArray and ClusterCapacityProviderStrategyItemArrayOutput values.
// You can construct a concrete instance of `ClusterCapacityProviderStrategyItemArrayInput` via:
//
//	ClusterCapacityProviderStrategyItemArray{ ClusterCapacityProviderStrategyItemArgs{...} }
type ClusterCapacityProviderStrategyItemArrayInput interface {
	pulumi.Input

	ToClusterCapacityProviderStrategyItemArrayOutput() ClusterCapacityProviderStrategyItemArrayOutput
	ToClusterCapacityProviderStrategyItemArrayOutputWithContext(context.Context) ClusterCapacityProviderStrategyItemArrayOutput
}

type ClusterCapacityProviderStrategyItemArray []ClusterCapacityProviderStrategyItemInput

func (ClusterCapacityProviderStrategyItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterCapacityProviderStrategyItem)(nil)).Elem()
}

func (i ClusterCapacityProviderStrategyItemArray) ToClusterCapacityProviderStrategyItemArrayOutput() ClusterCapacityProviderStrategyItemArrayOutput {
	return i.ToClusterCapacityProviderStrategyItemArrayOutputWithContext(context.Background())
}

func (i ClusterCapacityProviderStrategyItemArray) ToClusterCapacityProviderStrategyItemArrayOutputWithContext(ctx context.Context) ClusterCapacityProviderStrategyItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCapacityProviderStrategyItemArrayOutput)
}

// The “CapacityProviderStrategyItem“ property specifies the details of the default capacity provider strategy for the cluster. When services or tasks are run in the cluster with no launch type or capacity provider strategy specified, the default capacity provider strategy is used.
type ClusterCapacityProviderStrategyItemOutput struct{ *pulumi.OutputState }

func (ClusterCapacityProviderStrategyItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCapacityProviderStrategyItem)(nil)).Elem()
}

func (o ClusterCapacityProviderStrategyItemOutput) ToClusterCapacityProviderStrategyItemOutput() ClusterCapacityProviderStrategyItemOutput {
	return o
}

func (o ClusterCapacityProviderStrategyItemOutput) ToClusterCapacityProviderStrategyItemOutputWithContext(ctx context.Context) ClusterCapacityProviderStrategyItemOutput {
	return o
}

// The *base* value designates how many tasks, at a minimum, to run on the specified capacity provider for each service. Only one capacity provider in a capacity provider strategy can have a *base* defined. If no value is specified, the default value of “0“ is used.
//
//	Base value characteristics:
//	 +  Only one capacity provider in a strategy can have a base defined
//	 +  Default value is ``0`` if not specified
//	 +  Valid range: 0 to 100,000
//	 +  Base requirements are satisfied first before weight distribution
func (o ClusterCapacityProviderStrategyItemOutput) Base() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterCapacityProviderStrategyItem) *int { return v.Base }).(pulumi.IntPtrOutput)
}

// The short name of the capacity provider.
func (o ClusterCapacityProviderStrategyItemOutput) CapacityProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterCapacityProviderStrategyItem) *string { return v.CapacityProvider }).(pulumi.StringPtrOutput)
}

// The *weight* value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The “weight“ value is taken into consideration after the “base“ value, if defined, is satisfied.
//
//	If no ``weight`` value is specified, the default value of ``0`` is used. When multiple capacity providers are specified within a capacity provider strategy, at least one of the capacity providers must have a weight value greater than zero and any capacity providers with a weight of ``0`` can't be used to place tasks. If you specify multiple capacity providers in a strategy that all have a weight of ``0``, any ``RunTask`` or ``CreateService`` actions using the capacity provider strategy will fail.
//	Weight value characteristics:
//	 +  Weight is considered after the base value is satisfied
//	 +  Default value is ``0`` if not specified
//	 +  Valid range: 0 to 1,000
//	 +  At least one capacity provider must have a weight greater than zero
//	 +  Capacity providers with weight of ``0`` cannot place tasks
//
//	Task distribution logic:
//	 1.  Base satisfaction: The minimum number of tasks specified by the base value are placed on that capacity provider
//	 2.  Weight distribution: After base requirements are met, additional tasks are distributed according to weight ratios
//
//	Examples:
//	Equal Distribution: Two capacity providers both with weight ``1`` will split tasks evenly after base requirements are met.
//	Weighted Distribution: If capacityProviderA has weight ``1`` and capacityProviderB has weight ``4``, then for every 1 task on A, 4 tasks will run on B.
func (o ClusterCapacityProviderStrategyItemOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterCapacityProviderStrategyItem) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type ClusterCapacityProviderStrategyItemArrayOutput struct{ *pulumi.OutputState }

func (ClusterCapacityProviderStrategyItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterCapacityProviderStrategyItem)(nil)).Elem()
}

func (o ClusterCapacityProviderStrategyItemArrayOutput) ToClusterCapacityProviderStrategyItemArrayOutput() ClusterCapacityProviderStrategyItemArrayOutput {
	return o
}

func (o ClusterCapacityProviderStrategyItemArrayOutput) ToClusterCapacityProviderStrategyItemArrayOutputWithContext(ctx context.Context) ClusterCapacityProviderStrategyItemArrayOutput {
	return o
}

func (o ClusterCapacityProviderStrategyItemArrayOutput) Index(i pulumi.IntInput) ClusterCapacityProviderStrategyItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterCapacityProviderStrategyItem {
		return vs[0].([]ClusterCapacityProviderStrategyItem)[vs[1].(int)]
	}).(ClusterCapacityProviderStrategyItemOutput)
}

// The execute command and managed storage configuration for the cluster.
type ClusterConfiguration struct {
	// The details of the execute command configuration.
	ExecuteCommandConfiguration *ClusterExecuteCommandConfiguration `pulumi:"executeCommandConfiguration"`
	// The details of the managed storage configuration.
	ManagedStorageConfiguration *ClusterManagedStorageConfiguration `pulumi:"managedStorageConfiguration"`
}

// ClusterConfigurationInput is an input type that accepts ClusterConfigurationArgs and ClusterConfigurationOutput values.
// You can construct a concrete instance of `ClusterConfigurationInput` via:
//
//	ClusterConfigurationArgs{...}
type ClusterConfigurationInput interface {
	pulumi.Input

	ToClusterConfigurationOutput() ClusterConfigurationOutput
	ToClusterConfigurationOutputWithContext(context.Context) ClusterConfigurationOutput
}

// The execute command and managed storage configuration for the cluster.
type ClusterConfigurationArgs struct {
	// The details of the execute command configuration.
	ExecuteCommandConfiguration ClusterExecuteCommandConfigurationPtrInput `pulumi:"executeCommandConfiguration"`
	// The details of the managed storage configuration.
	ManagedStorageConfiguration ClusterManagedStorageConfigurationPtrInput `pulumi:"managedStorageConfiguration"`
}

func (ClusterConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterConfiguration)(nil)).Elem()
}

func (i ClusterConfigurationArgs) ToClusterConfigurationOutput() ClusterConfigurationOutput {
	return i.ToClusterConfigurationOutputWithContext(context.Background())
}

func (i ClusterConfigurationArgs) ToClusterConfigurationOutputWithContext(ctx context.Context) ClusterConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterConfigurationOutput)
}

func (i ClusterConfigurationArgs) ToClusterConfigurationPtrOutput() ClusterConfigurationPtrOutput {
	return i.ToClusterConfigurationPtrOutputWithContext(context.Background())
}

func (i ClusterConfigurationArgs) ToClusterConfigurationPtrOutputWithContext(ctx context.Context) ClusterConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterConfigurationOutput).ToClusterConfigurationPtrOutputWithContext(ctx)
}

// ClusterConfigurationPtrInput is an input type that accepts ClusterConfigurationArgs, ClusterConfigurationPtr and ClusterConfigurationPtrOutput values.
// You can construct a concrete instance of `ClusterConfigurationPtrInput` via:
//
//	        ClusterConfigurationArgs{...}
//
//	or:
//
//	        nil
type ClusterConfigurationPtrInput interface {
	pulumi.Input

	ToClusterConfigurationPtrOutput() ClusterConfigurationPtrOutput
	ToClusterConfigurationPtrOutputWithContext(context.Context) ClusterConfigurationPtrOutput
}

type clusterConfigurationPtrType ClusterConfigurationArgs

func ClusterConfigurationPtr(v *ClusterConfigurationArgs) ClusterConfigurationPtrInput {
	return (*clusterConfigurationPtrType)(v)
}

func (*clusterConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterConfiguration)(nil)).Elem()
}

func (i *clusterConfigurationPtrType) ToClusterConfigurationPtrOutput() ClusterConfigurationPtrOutput {
	return i.ToClusterConfigurationPtrOutputWithContext(context.Background())
}

func (i *clusterConfigurationPtrType) ToClusterConfigurationPtrOutputWithContext(ctx context.Context) ClusterConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterConfigurationPtrOutput)
}

// The execute command and managed storage configuration for the cluster.
type ClusterConfigurationOutput struct{ *pulumi.OutputState }

func (ClusterConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterConfiguration)(nil)).Elem()
}

func (o ClusterConfigurationOutput) ToClusterConfigurationOutput() ClusterConfigurationOutput {
	return o
}

func (o ClusterConfigurationOutput) ToClusterConfigurationOutputWithContext(ctx context.Context) ClusterConfigurationOutput {
	return o
}

func (o ClusterConfigurationOutput) ToClusterConfigurationPtrOutput() ClusterConfigurationPtrOutput {
	return o.ToClusterConfigurationPtrOutputWithContext(context.Background())
}

func (o ClusterConfigurationOutput) ToClusterConfigurationPtrOutputWithContext(ctx context.Context) ClusterConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterConfiguration) *ClusterConfiguration {
		return &v
	}).(ClusterConfigurationPtrOutput)
}

// The details of the execute command configuration.
func (o ClusterConfigurationOutput) ExecuteCommandConfiguration() ClusterExecuteCommandConfigurationPtrOutput {
	return o.ApplyT(func(v ClusterConfiguration) *ClusterExecuteCommandConfiguration { return v.ExecuteCommandConfiguration }).(ClusterExecuteCommandConfigurationPtrOutput)
}

// The details of the managed storage configuration.
func (o ClusterConfigurationOutput) ManagedStorageConfiguration() ClusterManagedStorageConfigurationPtrOutput {
	return o.ApplyT(func(v ClusterConfiguration) *ClusterManagedStorageConfiguration { return v.ManagedStorageConfiguration }).(ClusterManagedStorageConfigurationPtrOutput)
}

type ClusterConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ClusterConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterConfiguration)(nil)).Elem()
}

func (o ClusterConfigurationPtrOutput) ToClusterConfigurationPtrOutput() ClusterConfigurationPtrOutput {
	return o
}

func (o ClusterConfigurationPtrOutput) ToClusterConfigurationPtrOutputWithContext(ctx context.Context) ClusterConfigurationPtrOutput {
	return o
}

func (o ClusterConfigurationPtrOutput) Elem() ClusterConfigurationOutput {
	return o.ApplyT(func(v *ClusterConfiguration) ClusterConfiguration {
		if v != nil {
			return *v
		}
		var ret ClusterConfiguration
		return ret
	}).(ClusterConfigurationOutput)
}

// The details of the execute command configuration.
func (o ClusterConfigurationPtrOutput) ExecuteCommandConfiguration() ClusterExecuteCommandConfigurationPtrOutput {
	return o.ApplyT(func(v *ClusterConfiguration) *ClusterExecuteCommandConfiguration {
		if v == nil {
			return nil
		}
		return v.ExecuteCommandConfiguration
	}).(ClusterExecuteCommandConfigurationPtrOutput)
}

// The details of the managed storage configuration.
func (o ClusterConfigurationPtrOutput) ManagedStorageConfiguration() ClusterManagedStorageConfigurationPtrOutput {
	return o.ApplyT(func(v *ClusterConfiguration) *ClusterManagedStorageConfiguration {
		if v == nil {
			return nil
		}
		return v.ManagedStorageConfiguration
	}).(ClusterManagedStorageConfigurationPtrOutput)
}

// The details of the execute command configuration.
type ClusterExecuteCommandConfiguration struct {
	// Specify an KMSlong key ID to encrypt the data between the local client and the container.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// The log configuration for the results of the execute command actions. The logs can be sent to CloudWatch Logs or an Amazon S3 bucket. When ``logging=OVERRIDE`` is specified, a ``logConfiguration`` must be provided.
	LogConfiguration *ClusterExecuteCommandLogConfiguration `pulumi:"logConfiguration"`
	// The log setting to use for redirecting logs for your execute command results. The following log settings are available.
	//   +  ``NONE``: The execute command session is not logged.
	//   +  ``DEFAULT``: The ``awslogs`` configuration in the task definition is used. If no logging parameter is specified, it defaults to this value. If no ``awslogs`` log driver is configured in the task definition, the output won't be logged.
	//   +  ``OVERRIDE``: Specify the logging details as a part of ``logConfiguration``. If the ``OVERRIDE`` logging option is specified, the ``logConfiguration`` is required.
	Logging *string `pulumi:"logging"`
}

// ClusterExecuteCommandConfigurationInput is an input type that accepts ClusterExecuteCommandConfigurationArgs and ClusterExecuteCommandConfigurationOutput values.
// You can construct a concrete instance of `ClusterExecuteCommandConfigurationInput` via:
//
//	ClusterExecuteCommandConfigurationArgs{...}
type ClusterExecuteCommandConfigurationInput interface {
	pulumi.Input

	ToClusterExecuteCommandConfigurationOutput() ClusterExecuteCommandConfigurationOutput
	ToClusterExecuteCommandConfigurationOutputWithContext(context.Context) ClusterExecuteCommandConfigurationOutput
}

// The details of the execute command configuration.
type ClusterExecuteCommandConfigurationArgs struct {
	// Specify an KMSlong key ID to encrypt the data between the local client and the container.
	KmsKeyId pulumi.StringPtrInput `pulumi:"kmsKeyId"`
	// The log configuration for the results of the execute command actions. The logs can be sent to CloudWatch Logs or an Amazon S3 bucket. When ``logging=OVERRIDE`` is specified, a ``logConfiguration`` must be provided.
	LogConfiguration ClusterExecuteCommandLogConfigurationPtrInput `pulumi:"logConfiguration"`
	// The log setting to use for redirecting logs for your execute command results. The following log settings are available.
	//   +  ``NONE``: The execute command session is not logged.
	//   +  ``DEFAULT``: The ``awslogs`` configuration in the task definition is used. If no logging parameter is specified, it defaults to this value. If no ``awslogs`` log driver is configured in the task definition, the output won't be logged.
	//   +  ``OVERRIDE``: Specify the logging details as a part of ``logConfiguration``. If the ``OVERRIDE`` logging option is specified, the ``logConfiguration`` is required.
	Logging pulumi.StringPtrInput `pulumi:"logging"`
}

func (ClusterExecuteCommandConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterExecuteCommandConfiguration)(nil)).Elem()
}

func (i ClusterExecuteCommandConfigurationArgs) ToClusterExecuteCommandConfigurationOutput() ClusterExecuteCommandConfigurationOutput {
	return i.ToClusterExecuteCommandConfigurationOutputWithContext(context.Background())
}

func (i ClusterExecuteCommandConfigurationArgs) ToClusterExecuteCommandConfigurationOutputWithContext(ctx context.Context) ClusterExecuteCommandConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterExecuteCommandConfigurationOutput)
}

func (i ClusterExecuteCommandConfigurationArgs) ToClusterExecuteCommandConfigurationPtrOutput() ClusterExecuteCommandConfigurationPtrOutput {
	return i.ToClusterExecuteCommandConfigurationPtrOutputWithContext(context.Background())
}

func (i ClusterExecuteCommandConfigurationArgs) ToClusterExecuteCommandConfigurationPtrOutputWithContext(ctx context.Context) ClusterExecuteCommandConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterExecuteCommandConfigurationOutput).ToClusterExecuteCommandConfigurationPtrOutputWithContext(ctx)
}

// ClusterExecuteCommandConfigurationPtrInput is an input type that accepts ClusterExecuteCommandConfigurationArgs, ClusterExecuteCommandConfigurationPtr and ClusterExecuteCommandConfigurationPtrOutput values.
// You can construct a concrete instance of `ClusterExecuteCommandConfigurationPtrInput` via:
//
//	        ClusterExecuteCommandConfigurationArgs{...}
//
//	or:
//
//	        nil
type ClusterExecuteCommandConfigurationPtrInput interface {
	pulumi.Input

	ToClusterExecuteCommandConfigurationPtrOutput() ClusterExecuteCommandConfigurationPtrOutput
	ToClusterExecuteCommandConfigurationPtrOutputWithContext(context.Context) ClusterExecuteCommandConfigurationPtrOutput
}

type clusterExecuteCommandConfigurationPtrType ClusterExecuteCommandConfigurationArgs

func ClusterExecuteCommandConfigurationPtr(v *ClusterExecuteCommandConfigurationArgs) ClusterExecuteCommandConfigurationPtrInput {
	return (*clusterExecuteCommandConfigurationPtrType)(v)
}

func (*clusterExecuteCommandConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterExecuteCommandConfiguration)(nil)).Elem()
}

func (i *clusterExecuteCommandConfigurationPtrType) ToClusterExecuteCommandConfigurationPtrOutput() ClusterExecuteCommandConfigurationPtrOutput {
	return i.ToClusterExecuteCommandConfigurationPtrOutputWithContext(context.Background())
}

func (i *clusterExecuteCommandConfigurationPtrType) ToClusterExecuteCommandConfigurationPtrOutputWithContext(ctx context.Context) ClusterExecuteCommandConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterExecuteCommandConfigurationPtrOutput)
}

// The details of the execute command configuration.
type ClusterExecuteCommandConfigurationOutput struct{ *pulumi.OutputState }

func (ClusterExecuteCommandConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterExecuteCommandConfiguration)(nil)).Elem()
}

func (o ClusterExecuteCommandConfigurationOutput) ToClusterExecuteCommandConfigurationOutput() ClusterExecuteCommandConfigurationOutput {
	return o
}

func (o ClusterExecuteCommandConfigurationOutput) ToClusterExecuteCommandConfigurationOutputWithContext(ctx context.Context) ClusterExecuteCommandConfigurationOutput {
	return o
}

func (o ClusterExecuteCommandConfigurationOutput) ToClusterExecuteCommandConfigurationPtrOutput() ClusterExecuteCommandConfigurationPtrOutput {
	return o.ToClusterExecuteCommandConfigurationPtrOutputWithContext(context.Background())
}

func (o ClusterExecuteCommandConfigurationOutput) ToClusterExecuteCommandConfigurationPtrOutputWithContext(ctx context.Context) ClusterExecuteCommandConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterExecuteCommandConfiguration) *ClusterExecuteCommandConfiguration {
		return &v
	}).(ClusterExecuteCommandConfigurationPtrOutput)
}

// Specify an KMSlong key ID to encrypt the data between the local client and the container.
func (o ClusterExecuteCommandConfigurationOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterExecuteCommandConfiguration) *string { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

// The log configuration for the results of the execute command actions. The logs can be sent to CloudWatch Logs or an Amazon S3 bucket. When “logging=OVERRIDE“ is specified, a “logConfiguration“ must be provided.
func (o ClusterExecuteCommandConfigurationOutput) LogConfiguration() ClusterExecuteCommandLogConfigurationPtrOutput {
	return o.ApplyT(func(v ClusterExecuteCommandConfiguration) *ClusterExecuteCommandLogConfiguration {
		return v.LogConfiguration
	}).(ClusterExecuteCommandLogConfigurationPtrOutput)
}

// The log setting to use for redirecting logs for your execute command results. The following log settings are available.
//   - “NONE“: The execute command session is not logged.
//   - “DEFAULT“: The “awslogs“ configuration in the task definition is used. If no logging parameter is specified, it defaults to this value. If no “awslogs“ log driver is configured in the task definition, the output won't be logged.
//   - “OVERRIDE“: Specify the logging details as a part of “logConfiguration“. If the “OVERRIDE“ logging option is specified, the “logConfiguration“ is required.
func (o ClusterExecuteCommandConfigurationOutput) Logging() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterExecuteCommandConfiguration) *string { return v.Logging }).(pulumi.StringPtrOutput)
}

type ClusterExecuteCommandConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ClusterExecuteCommandConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterExecuteCommandConfiguration)(nil)).Elem()
}

func (o ClusterExecuteCommandConfigurationPtrOutput) ToClusterExecuteCommandConfigurationPtrOutput() ClusterExecuteCommandConfigurationPtrOutput {
	return o
}

func (o ClusterExecuteCommandConfigurationPtrOutput) ToClusterExecuteCommandConfigurationPtrOutputWithContext(ctx context.Context) ClusterExecuteCommandConfigurationPtrOutput {
	return o
}

func (o ClusterExecuteCommandConfigurationPtrOutput) Elem() ClusterExecuteCommandConfigurationOutput {
	return o.ApplyT(func(v *ClusterExecuteCommandConfiguration) ClusterExecuteCommandConfiguration {
		if v != nil {
			return *v
		}
		var ret ClusterExecuteCommandConfiguration
		return ret
	}).(ClusterExecuteCommandConfigurationOutput)
}

// Specify an KMSlong key ID to encrypt the data between the local client and the container.
func (o ClusterExecuteCommandConfigurationPtrOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterExecuteCommandConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyId
	}).(pulumi.StringPtrOutput)
}

// The log configuration for the results of the execute command actions. The logs can be sent to CloudWatch Logs or an Amazon S3 bucket. When “logging=OVERRIDE“ is specified, a “logConfiguration“ must be provided.
func (o ClusterExecuteCommandConfigurationPtrOutput) LogConfiguration() ClusterExecuteCommandLogConfigurationPtrOutput {
	return o.ApplyT(func(v *ClusterExecuteCommandConfiguration) *ClusterExecuteCommandLogConfiguration {
		if v == nil {
			return nil
		}
		return v.LogConfiguration
	}).(ClusterExecuteCommandLogConfigurationPtrOutput)
}

// The log setting to use for redirecting logs for your execute command results. The following log settings are available.
//   - “NONE“: The execute command session is not logged.
//   - “DEFAULT“: The “awslogs“ configuration in the task definition is used. If no logging parameter is specified, it defaults to this value. If no “awslogs“ log driver is configured in the task definition, the output won't be logged.
//   - “OVERRIDE“: Specify the logging details as a part of “logConfiguration“. If the “OVERRIDE“ logging option is specified, the “logConfiguration“ is required.
func (o ClusterExecuteCommandConfigurationPtrOutput) Logging() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterExecuteCommandConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Logging
	}).(pulumi.StringPtrOutput)
}

// The log configuration for the results of the execute command actions. The logs can be sent to CloudWatch Logs or an Amazon S3 bucket.
type ClusterExecuteCommandLogConfiguration struct {
	// Determines whether to use encryption on the CloudWatch logs. If not specified, encryption will be off.
	CloudWatchEncryptionEnabled *bool `pulumi:"cloudWatchEncryptionEnabled"`
	// The name of the CloudWatch log group to send logs to.
	//   The CloudWatch log group must already be created.
	CloudWatchLogGroupName *string `pulumi:"cloudWatchLogGroupName"`
	// The name of the S3 bucket to send logs to.
	//   The S3 bucket must already be created.
	S3BucketName *string `pulumi:"s3BucketName"`
	// Determines whether to use encryption on the S3 logs. If not specified, encryption is not used.
	S3EncryptionEnabled *bool `pulumi:"s3EncryptionEnabled"`
	// An optional folder in the S3 bucket to place logs in.
	S3KeyPrefix *string `pulumi:"s3KeyPrefix"`
}

// ClusterExecuteCommandLogConfigurationInput is an input type that accepts ClusterExecuteCommandLogConfigurationArgs and ClusterExecuteCommandLogConfigurationOutput values.
// You can construct a concrete instance of `ClusterExecuteCommandLogConfigurationInput` via:
//
//	ClusterExecuteCommandLogConfigurationArgs{...}
type ClusterExecuteCommandLogConfigurationInput interface {
	pulumi.Input

	ToClusterExecuteCommandLogConfigurationOutput() ClusterExecuteCommandLogConfigurationOutput
	ToClusterExecuteCommandLogConfigurationOutputWithContext(context.Context) ClusterExecuteCommandLogConfigurationOutput
}

// The log configuration for the results of the execute command actions. The logs can be sent to CloudWatch Logs or an Amazon S3 bucket.
type ClusterExecuteCommandLogConfigurationArgs struct {
	// Determines whether to use encryption on the CloudWatch logs. If not specified, encryption will be off.
	CloudWatchEncryptionEnabled pulumi.BoolPtrInput `pulumi:"cloudWatchEncryptionEnabled"`
	// The name of the CloudWatch log group to send logs to.
	//   The CloudWatch log group must already be created.
	CloudWatchLogGroupName pulumi.StringPtrInput `pulumi:"cloudWatchLogGroupName"`
	// The name of the S3 bucket to send logs to.
	//   The S3 bucket must already be created.
	S3BucketName pulumi.StringPtrInput `pulumi:"s3BucketName"`
	// Determines whether to use encryption on the S3 logs. If not specified, encryption is not used.
	S3EncryptionEnabled pulumi.BoolPtrInput `pulumi:"s3EncryptionEnabled"`
	// An optional folder in the S3 bucket to place logs in.
	S3KeyPrefix pulumi.StringPtrInput `pulumi:"s3KeyPrefix"`
}

func (ClusterExecuteCommandLogConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterExecuteCommandLogConfiguration)(nil)).Elem()
}

func (i ClusterExecuteCommandLogConfigurationArgs) ToClusterExecuteCommandLogConfigurationOutput() ClusterExecuteCommandLogConfigurationOutput {
	return i.ToClusterExecuteCommandLogConfigurationOutputWithContext(context.Background())
}

func (i ClusterExecuteCommandLogConfigurationArgs) ToClusterExecuteCommandLogConfigurationOutputWithContext(ctx context.Context) ClusterExecuteCommandLogConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterExecuteCommandLogConfigurationOutput)
}

func (i ClusterExecuteCommandLogConfigurationArgs) ToClusterExecuteCommandLogConfigurationPtrOutput() ClusterExecuteCommandLogConfigurationPtrOutput {
	return i.ToClusterExecuteCommandLogConfigurationPtrOutputWithContext(context.Background())
}

func (i ClusterExecuteCommandLogConfigurationArgs) ToClusterExecuteCommandLogConfigurationPtrOutputWithContext(ctx context.Context) ClusterExecuteCommandLogConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterExecuteCommandLogConfigurationOutput).ToClusterExecuteCommandLogConfigurationPtrOutputWithContext(ctx)
}

// ClusterExecuteCommandLogConfigurationPtrInput is an input type that accepts ClusterExecuteCommandLogConfigurationArgs, ClusterExecuteCommandLogConfigurationPtr and ClusterExecuteCommandLogConfigurationPtrOutput values.
// You can construct a concrete instance of `ClusterExecuteCommandLogConfigurationPtrInput` via:
//
//	        ClusterExecuteCommandLogConfigurationArgs{...}
//
//	or:
//
//	        nil
type ClusterExecuteCommandLogConfigurationPtrInput interface {
	pulumi.Input

	ToClusterExecuteCommandLogConfigurationPtrOutput() ClusterExecuteCommandLogConfigurationPtrOutput
	ToClusterExecuteCommandLogConfigurationPtrOutputWithContext(context.Context) ClusterExecuteCommandLogConfigurationPtrOutput
}

type clusterExecuteCommandLogConfigurationPtrType ClusterExecuteCommandLogConfigurationArgs

func ClusterExecuteCommandLogConfigurationPtr(v *ClusterExecuteCommandLogConfigurationArgs) ClusterExecuteCommandLogConfigurationPtrInput {
	return (*clusterExecuteCommandLogConfigurationPtrType)(v)
}

func (*clusterExecuteCommandLogConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterExecuteCommandLogConfiguration)(nil)).Elem()
}

func (i *clusterExecuteCommandLogConfigurationPtrType) ToClusterExecuteCommandLogConfigurationPtrOutput() ClusterExecuteCommandLogConfigurationPtrOutput {
	return i.ToClusterExecuteCommandLogConfigurationPtrOutputWithContext(context.Background())
}

func (i *clusterExecuteCommandLogConfigurationPtrType) ToClusterExecuteCommandLogConfigurationPtrOutputWithContext(ctx context.Context) ClusterExecuteCommandLogConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterExecuteCommandLogConfigurationPtrOutput)
}

// The log configuration for the results of the execute command actions. The logs can be sent to CloudWatch Logs or an Amazon S3 bucket.
type ClusterExecuteCommandLogConfigurationOutput struct{ *pulumi.OutputState }

func (ClusterExecuteCommandLogConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterExecuteCommandLogConfiguration)(nil)).Elem()
}

func (o ClusterExecuteCommandLogConfigurationOutput) ToClusterExecuteCommandLogConfigurationOutput() ClusterExecuteCommandLogConfigurationOutput {
	return o
}

func (o ClusterExecuteCommandLogConfigurationOutput) ToClusterExecuteCommandLogConfigurationOutputWithContext(ctx context.Context) ClusterExecuteCommandLogConfigurationOutput {
	return o
}

func (o ClusterExecuteCommandLogConfigurationOutput) ToClusterExecuteCommandLogConfigurationPtrOutput() ClusterExecuteCommandLogConfigurationPtrOutput {
	return o.ToClusterExecuteCommandLogConfigurationPtrOutputWithContext(context.Background())
}

func (o ClusterExecuteCommandLogConfigurationOutput) ToClusterExecuteCommandLogConfigurationPtrOutputWithContext(ctx context.Context) ClusterExecuteCommandLogConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterExecuteCommandLogConfiguration) *ClusterExecuteCommandLogConfiguration {
		return &v
	}).(ClusterExecuteCommandLogConfigurationPtrOutput)
}

// Determines whether to use encryption on the CloudWatch logs. If not specified, encryption will be off.
func (o ClusterExecuteCommandLogConfigurationOutput) CloudWatchEncryptionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterExecuteCommandLogConfiguration) *bool { return v.CloudWatchEncryptionEnabled }).(pulumi.BoolPtrOutput)
}

// The name of the CloudWatch log group to send logs to.
//
//	The CloudWatch log group must already be created.
func (o ClusterExecuteCommandLogConfigurationOutput) CloudWatchLogGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterExecuteCommandLogConfiguration) *string { return v.CloudWatchLogGroupName }).(pulumi.StringPtrOutput)
}

// The name of the S3 bucket to send logs to.
//
//	The S3 bucket must already be created.
func (o ClusterExecuteCommandLogConfigurationOutput) S3BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterExecuteCommandLogConfiguration) *string { return v.S3BucketName }).(pulumi.StringPtrOutput)
}

// Determines whether to use encryption on the S3 logs. If not specified, encryption is not used.
func (o ClusterExecuteCommandLogConfigurationOutput) S3EncryptionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterExecuteCommandLogConfiguration) *bool { return v.S3EncryptionEnabled }).(pulumi.BoolPtrOutput)
}

// An optional folder in the S3 bucket to place logs in.
func (o ClusterExecuteCommandLogConfigurationOutput) S3KeyPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterExecuteCommandLogConfiguration) *string { return v.S3KeyPrefix }).(pulumi.StringPtrOutput)
}

type ClusterExecuteCommandLogConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ClusterExecuteCommandLogConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterExecuteCommandLogConfiguration)(nil)).Elem()
}

func (o ClusterExecuteCommandLogConfigurationPtrOutput) ToClusterExecuteCommandLogConfigurationPtrOutput() ClusterExecuteCommandLogConfigurationPtrOutput {
	return o
}

func (o ClusterExecuteCommandLogConfigurationPtrOutput) ToClusterExecuteCommandLogConfigurationPtrOutputWithContext(ctx context.Context) ClusterExecuteCommandLogConfigurationPtrOutput {
	return o
}

func (o ClusterExecuteCommandLogConfigurationPtrOutput) Elem() ClusterExecuteCommandLogConfigurationOutput {
	return o.ApplyT(func(v *ClusterExecuteCommandLogConfiguration) ClusterExecuteCommandLogConfiguration {
		if v != nil {
			return *v
		}
		var ret ClusterExecuteCommandLogConfiguration
		return ret
	}).(ClusterExecuteCommandLogConfigurationOutput)
}

// Determines whether to use encryption on the CloudWatch logs. If not specified, encryption will be off.
func (o ClusterExecuteCommandLogConfigurationPtrOutput) CloudWatchEncryptionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterExecuteCommandLogConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.CloudWatchEncryptionEnabled
	}).(pulumi.BoolPtrOutput)
}

// The name of the CloudWatch log group to send logs to.
//
//	The CloudWatch log group must already be created.
func (o ClusterExecuteCommandLogConfigurationPtrOutput) CloudWatchLogGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterExecuteCommandLogConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.CloudWatchLogGroupName
	}).(pulumi.StringPtrOutput)
}

// The name of the S3 bucket to send logs to.
//
//	The S3 bucket must already be created.
func (o ClusterExecuteCommandLogConfigurationPtrOutput) S3BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterExecuteCommandLogConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.S3BucketName
	}).(pulumi.StringPtrOutput)
}

// Determines whether to use encryption on the S3 logs. If not specified, encryption is not used.
func (o ClusterExecuteCommandLogConfigurationPtrOutput) S3EncryptionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterExecuteCommandLogConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.S3EncryptionEnabled
	}).(pulumi.BoolPtrOutput)
}

// An optional folder in the S3 bucket to place logs in.
func (o ClusterExecuteCommandLogConfigurationPtrOutput) S3KeyPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterExecuteCommandLogConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.S3KeyPrefix
	}).(pulumi.StringPtrOutput)
}

// The managed storage configuration for the cluster.
type ClusterManagedStorageConfiguration struct {
	// Specify the KMSlong key ID for Fargate ephemeral storage.
	//  When you specify a ``fargateEphemeralStorageKmsKeyId``, AWS Fargate uses the key to encrypt data at rest in ephemeral storage. For more information about Fargate ephemeral storage encryption, see [Customer managed keys for Fargate ephemeral storage for Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/fargate-storage-encryption.html) in the *Amazon Elastic Container Service Developer Guide*.
	//  The key must be a single Region key.
	FargateEphemeralStorageKmsKeyId *string `pulumi:"fargateEphemeralStorageKmsKeyId"`
	// Specify a KMSlong key ID to encrypt Amazon ECS managed storage.
	//   When you specify a ``kmsKeyId``, Amazon ECS uses the key to encrypt data volumes managed by Amazon ECS that are attached to tasks in the cluster. The following data volumes are managed by Amazon ECS: Amazon EBS. For more information about encryption of Amazon EBS volumes attached to Amazon ECS tasks, see [Encrypt data stored in Amazon EBS volumes for Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ebs-kms-encryption.html) in the *Amazon Elastic Container Service Developer Guide*.
	//  The key must be a single Region key.
	KmsKeyId *string `pulumi:"kmsKeyId"`
}

// ClusterManagedStorageConfigurationInput is an input type that accepts ClusterManagedStorageConfigurationArgs and ClusterManagedStorageConfigurationOutput values.
// You can construct a concrete instance of `ClusterManagedStorageConfigurationInput` via:
//
//	ClusterManagedStorageConfigurationArgs{...}
type ClusterManagedStorageConfigurationInput interface {
	pulumi.Input

	ToClusterManagedStorageConfigurationOutput() ClusterManagedStorageConfigurationOutput
	ToClusterManagedStorageConfigurationOutputWithContext(context.Context) ClusterManagedStorageConfigurationOutput
}

// The managed storage configuration for the cluster.
type ClusterManagedStorageConfigurationArgs struct {
	// Specify the KMSlong key ID for Fargate ephemeral storage.
	//  When you specify a ``fargateEphemeralStorageKmsKeyId``, AWS Fargate uses the key to encrypt data at rest in ephemeral storage. For more information about Fargate ephemeral storage encryption, see [Customer managed keys for Fargate ephemeral storage for Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/fargate-storage-encryption.html) in the *Amazon Elastic Container Service Developer Guide*.
	//  The key must be a single Region key.
	FargateEphemeralStorageKmsKeyId pulumi.StringPtrInput `pulumi:"fargateEphemeralStorageKmsKeyId"`
	// Specify a KMSlong key ID to encrypt Amazon ECS managed storage.
	//   When you specify a ``kmsKeyId``, Amazon ECS uses the key to encrypt data volumes managed by Amazon ECS that are attached to tasks in the cluster. The following data volumes are managed by Amazon ECS: Amazon EBS. For more information about encryption of Amazon EBS volumes attached to Amazon ECS tasks, see [Encrypt data stored in Amazon EBS volumes for Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ebs-kms-encryption.html) in the *Amazon Elastic Container Service Developer Guide*.
	//  The key must be a single Region key.
	KmsKeyId pulumi.StringPtrInput `pulumi:"kmsKeyId"`
}

func (ClusterManagedStorageConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterManagedStorageConfiguration)(nil)).Elem()
}

func (i ClusterManagedStorageConfigurationArgs) ToClusterManagedStorageConfigurationOutput() ClusterManagedStorageConfigurationOutput {
	return i.ToClusterManagedStorageConfigurationOutputWithContext(context.Background())
}

func (i ClusterManagedStorageConfigurationArgs) ToClusterManagedStorageConfigurationOutputWithContext(ctx context.Context) ClusterManagedStorageConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterManagedStorageConfigurationOutput)
}

func (i ClusterManagedStorageConfigurationArgs) ToClusterManagedStorageConfigurationPtrOutput() ClusterManagedStorageConfigurationPtrOutput {
	return i.ToClusterManagedStorageConfigurationPtrOutputWithContext(context.Background())
}

func (i ClusterManagedStorageConfigurationArgs) ToClusterManagedStorageConfigurationPtrOutputWithContext(ctx context.Context) ClusterManagedStorageConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterManagedStorageConfigurationOutput).ToClusterManagedStorageConfigurationPtrOutputWithContext(ctx)
}

// ClusterManagedStorageConfigurationPtrInput is an input type that accepts ClusterManagedStorageConfigurationArgs, ClusterManagedStorageConfigurationPtr and ClusterManagedStorageConfigurationPtrOutput values.
// You can construct a concrete instance of `ClusterManagedStorageConfigurationPtrInput` via:
//
//	        ClusterManagedStorageConfigurationArgs{...}
//
//	or:
//
//	        nil
type ClusterManagedStorageConfigurationPtrInput interface {
	pulumi.Input

	ToClusterManagedStorageConfigurationPtrOutput() ClusterManagedStorageConfigurationPtrOutput
	ToClusterManagedStorageConfigurationPtrOutputWithContext(context.Context) ClusterManagedStorageConfigurationPtrOutput
}

type clusterManagedStorageConfigurationPtrType ClusterManagedStorageConfigurationArgs

func ClusterManagedStorageConfigurationPtr(v *ClusterManagedStorageConfigurationArgs) ClusterManagedStorageConfigurationPtrInput {
	return (*clusterManagedStorageConfigurationPtrType)(v)
}

func (*clusterManagedStorageConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterManagedStorageConfiguration)(nil)).Elem()
}

func (i *clusterManagedStorageConfigurationPtrType) ToClusterManagedStorageConfigurationPtrOutput() ClusterManagedStorageConfigurationPtrOutput {
	return i.ToClusterManagedStorageConfigurationPtrOutputWithContext(context.Background())
}

func (i *clusterManagedStorageConfigurationPtrType) ToClusterManagedStorageConfigurationPtrOutputWithContext(ctx context.Context) ClusterManagedStorageConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterManagedStorageConfigurationPtrOutput)
}

// The managed storage configuration for the cluster.
type ClusterManagedStorageConfigurationOutput struct{ *pulumi.OutputState }

func (ClusterManagedStorageConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterManagedStorageConfiguration)(nil)).Elem()
}

func (o ClusterManagedStorageConfigurationOutput) ToClusterManagedStorageConfigurationOutput() ClusterManagedStorageConfigurationOutput {
	return o
}

func (o ClusterManagedStorageConfigurationOutput) ToClusterManagedStorageConfigurationOutputWithContext(ctx context.Context) ClusterManagedStorageConfigurationOutput {
	return o
}

func (o ClusterManagedStorageConfigurationOutput) ToClusterManagedStorageConfigurationPtrOutput() ClusterManagedStorageConfigurationPtrOutput {
	return o.ToClusterManagedStorageConfigurationPtrOutputWithContext(context.Background())
}

func (o ClusterManagedStorageConfigurationOutput) ToClusterManagedStorageConfigurationPtrOutputWithContext(ctx context.Context) ClusterManagedStorageConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterManagedStorageConfiguration) *ClusterManagedStorageConfiguration {
		return &v
	}).(ClusterManagedStorageConfigurationPtrOutput)
}

// Specify the KMSlong key ID for Fargate ephemeral storage.
//
//	When you specify a ``fargateEphemeralStorageKmsKeyId``, AWS Fargate uses the key to encrypt data at rest in ephemeral storage. For more information about Fargate ephemeral storage encryption, see [Customer managed keys for Fargate ephemeral storage for Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/fargate-storage-encryption.html) in the *Amazon Elastic Container Service Developer Guide*.
//	The key must be a single Region key.
func (o ClusterManagedStorageConfigurationOutput) FargateEphemeralStorageKmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterManagedStorageConfiguration) *string { return v.FargateEphemeralStorageKmsKeyId }).(pulumi.StringPtrOutput)
}

// Specify a KMSlong key ID to encrypt Amazon ECS managed storage.
//
//	 When you specify a ``kmsKeyId``, Amazon ECS uses the key to encrypt data volumes managed by Amazon ECS that are attached to tasks in the cluster. The following data volumes are managed by Amazon ECS: Amazon EBS. For more information about encryption of Amazon EBS volumes attached to Amazon ECS tasks, see [Encrypt data stored in Amazon EBS volumes for Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ebs-kms-encryption.html) in the *Amazon Elastic Container Service Developer Guide*.
//	The key must be a single Region key.
func (o ClusterManagedStorageConfigurationOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterManagedStorageConfiguration) *string { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

type ClusterManagedStorageConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ClusterManagedStorageConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterManagedStorageConfiguration)(nil)).Elem()
}

func (o ClusterManagedStorageConfigurationPtrOutput) ToClusterManagedStorageConfigurationPtrOutput() ClusterManagedStorageConfigurationPtrOutput {
	return o
}

func (o ClusterManagedStorageConfigurationPtrOutput) ToClusterManagedStorageConfigurationPtrOutputWithContext(ctx context.Context) ClusterManagedStorageConfigurationPtrOutput {
	return o
}

func (o ClusterManagedStorageConfigurationPtrOutput) Elem() ClusterManagedStorageConfigurationOutput {
	return o.ApplyT(func(v *ClusterManagedStorageConfiguration) ClusterManagedStorageConfiguration {
		if v != nil {
			return *v
		}
		var ret ClusterManagedStorageConfiguration
		return ret
	}).(ClusterManagedStorageConfigurationOutput)
}

// Specify the KMSlong key ID for Fargate ephemeral storage.
//
//	When you specify a ``fargateEphemeralStorageKmsKeyId``, AWS Fargate uses the key to encrypt data at rest in ephemeral storage. For more information about Fargate ephemeral storage encryption, see [Customer managed keys for Fargate ephemeral storage for Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/fargate-storage-encryption.html) in the *Amazon Elastic Container Service Developer Guide*.
//	The key must be a single Region key.
func (o ClusterManagedStorageConfigurationPtrOutput) FargateEphemeralStorageKmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterManagedStorageConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.FargateEphemeralStorageKmsKeyId
	}).(pulumi.StringPtrOutput)
}

// Specify a KMSlong key ID to encrypt Amazon ECS managed storage.
//
//	 When you specify a ``kmsKeyId``, Amazon ECS uses the key to encrypt data volumes managed by Amazon ECS that are attached to tasks in the cluster. The following data volumes are managed by Amazon ECS: Amazon EBS. For more information about encryption of Amazon EBS volumes attached to Amazon ECS tasks, see [Encrypt data stored in Amazon EBS volumes for Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ebs-kms-encryption.html) in the *Amazon Elastic Container Service Developer Guide*.
//	The key must be a single Region key.
func (o ClusterManagedStorageConfigurationPtrOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterManagedStorageConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyId
	}).(pulumi.StringPtrOutput)
}

// Use this parameter to set a default Service Connect namespace. After you set a default Service Connect namespace, any new services with Service Connect turned on that are created in the cluster are added as client services in the namespace. This setting only applies to new services that set the “enabled“ parameter to “true“ in the “ServiceConnectConfiguration“. You can set the namespace of each service individually in the “ServiceConnectConfiguration“ to override this default parameter.
//
//	Tasks that run in a namespace can use short names to connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS services create are supported with Service Connect. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic Container Service Developer Guide*.
type ClusterServiceConnectDefaults struct {
	// The namespace name or full Amazon Resource Name (ARN) of the CMAPlong namespace that's used when you create a service and don't specify a Service Connect configuration. The namespace name can include up to 1024 characters. The name is case-sensitive. The name can't include greater than (>), less than (<), double quotation marks ("), or slash (/).
	//  If you enter an existing namespace name or ARN, then that namespace will be used. Any namespace type is supported. The namespace must be in this account and this AWS Region.
	//  If you enter a new name, a CMAPlong namespace will be created. Amazon ECS creates a CMAP namespace with the "API calls" method of instance discovery only. This instance discovery method is the "HTTP" namespace type in the CLIlong. Other types of instance discovery aren't used by Service Connect.
	//  If you update the cluster with an empty string ``""`` for the namespace name, the cluster configuration for Service Connect is removed. Note that the namespace will remain in CMAP and must be deleted separately.
	//  For more information about CMAPlong, see [Working with Services](https://docs.aws.amazon.com/cloud-map/latest/dg/working-with-services.html) in the *Developer Guide*.
	Namespace *string `pulumi:"namespace"`
}

// ClusterServiceConnectDefaultsInput is an input type that accepts ClusterServiceConnectDefaultsArgs and ClusterServiceConnectDefaultsOutput values.
// You can construct a concrete instance of `ClusterServiceConnectDefaultsInput` via:
//
//	ClusterServiceConnectDefaultsArgs{...}
type ClusterServiceConnectDefaultsInput interface {
	pulumi.Input

	ToClusterServiceConnectDefaultsOutput() ClusterServiceConnectDefaultsOutput
	ToClusterServiceConnectDefaultsOutputWithContext(context.Context) ClusterServiceConnectDefaultsOutput
}

// Use this parameter to set a default Service Connect namespace. After you set a default Service Connect namespace, any new services with Service Connect turned on that are created in the cluster are added as client services in the namespace. This setting only applies to new services that set the “enabled“ parameter to “true“ in the “ServiceConnectConfiguration“. You can set the namespace of each service individually in the “ServiceConnectConfiguration“ to override this default parameter.
//
//	Tasks that run in a namespace can use short names to connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS services create are supported with Service Connect. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic Container Service Developer Guide*.
type ClusterServiceConnectDefaultsArgs struct {
	// The namespace name or full Amazon Resource Name (ARN) of the CMAPlong namespace that's used when you create a service and don't specify a Service Connect configuration. The namespace name can include up to 1024 characters. The name is case-sensitive. The name can't include greater than (>), less than (<), double quotation marks ("), or slash (/).
	//  If you enter an existing namespace name or ARN, then that namespace will be used. Any namespace type is supported. The namespace must be in this account and this AWS Region.
	//  If you enter a new name, a CMAPlong namespace will be created. Amazon ECS creates a CMAP namespace with the "API calls" method of instance discovery only. This instance discovery method is the "HTTP" namespace type in the CLIlong. Other types of instance discovery aren't used by Service Connect.
	//  If you update the cluster with an empty string ``""`` for the namespace name, the cluster configuration for Service Connect is removed. Note that the namespace will remain in CMAP and must be deleted separately.
	//  For more information about CMAPlong, see [Working with Services](https://docs.aws.amazon.com/cloud-map/latest/dg/working-with-services.html) in the *Developer Guide*.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ClusterServiceConnectDefaultsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterServiceConnectDefaults)(nil)).Elem()
}

func (i ClusterServiceConnectDefaultsArgs) ToClusterServiceConnectDefaultsOutput() ClusterServiceConnectDefaultsOutput {
	return i.ToClusterServiceConnectDefaultsOutputWithContext(context.Background())
}

func (i ClusterServiceConnectDefaultsArgs) ToClusterServiceConnectDefaultsOutputWithContext(ctx context.Context) ClusterServiceConnectDefaultsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterServiceConnectDefaultsOutput)
}

func (i ClusterServiceConnectDefaultsArgs) ToClusterServiceConnectDefaultsPtrOutput() ClusterServiceConnectDefaultsPtrOutput {
	return i.ToClusterServiceConnectDefaultsPtrOutputWithContext(context.Background())
}

func (i ClusterServiceConnectDefaultsArgs) ToClusterServiceConnectDefaultsPtrOutputWithContext(ctx context.Context) ClusterServiceConnectDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterServiceConnectDefaultsOutput).ToClusterServiceConnectDefaultsPtrOutputWithContext(ctx)
}

// ClusterServiceConnectDefaultsPtrInput is an input type that accepts ClusterServiceConnectDefaultsArgs, ClusterServiceConnectDefaultsPtr and ClusterServiceConnectDefaultsPtrOutput values.
// You can construct a concrete instance of `ClusterServiceConnectDefaultsPtrInput` via:
//
//	        ClusterServiceConnectDefaultsArgs{...}
//
//	or:
//
//	        nil
type ClusterServiceConnectDefaultsPtrInput interface {
	pulumi.Input

	ToClusterServiceConnectDefaultsPtrOutput() ClusterServiceConnectDefaultsPtrOutput
	ToClusterServiceConnectDefaultsPtrOutputWithContext(context.Context) ClusterServiceConnectDefaultsPtrOutput
}

type clusterServiceConnectDefaultsPtrType ClusterServiceConnectDefaultsArgs

func ClusterServiceConnectDefaultsPtr(v *ClusterServiceConnectDefaultsArgs) ClusterServiceConnectDefaultsPtrInput {
	return (*clusterServiceConnectDefaultsPtrType)(v)
}

func (*clusterServiceConnectDefaultsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterServiceConnectDefaults)(nil)).Elem()
}

func (i *clusterServiceConnectDefaultsPtrType) ToClusterServiceConnectDefaultsPtrOutput() ClusterServiceConnectDefaultsPtrOutput {
	return i.ToClusterServiceConnectDefaultsPtrOutputWithContext(context.Background())
}

func (i *clusterServiceConnectDefaultsPtrType) ToClusterServiceConnectDefaultsPtrOutputWithContext(ctx context.Context) ClusterServiceConnectDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterServiceConnectDefaultsPtrOutput)
}

// Use this parameter to set a default Service Connect namespace. After you set a default Service Connect namespace, any new services with Service Connect turned on that are created in the cluster are added as client services in the namespace. This setting only applies to new services that set the “enabled“ parameter to “true“ in the “ServiceConnectConfiguration“. You can set the namespace of each service individually in the “ServiceConnectConfiguration“ to override this default parameter.
//
//	Tasks that run in a namespace can use short names to connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS services create are supported with Service Connect. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic Container Service Developer Guide*.
type ClusterServiceConnectDefaultsOutput struct{ *pulumi.OutputState }

func (ClusterServiceConnectDefaultsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterServiceConnectDefaults)(nil)).Elem()
}

func (o ClusterServiceConnectDefaultsOutput) ToClusterServiceConnectDefaultsOutput() ClusterServiceConnectDefaultsOutput {
	return o
}

func (o ClusterServiceConnectDefaultsOutput) ToClusterServiceConnectDefaultsOutputWithContext(ctx context.Context) ClusterServiceConnectDefaultsOutput {
	return o
}

func (o ClusterServiceConnectDefaultsOutput) ToClusterServiceConnectDefaultsPtrOutput() ClusterServiceConnectDefaultsPtrOutput {
	return o.ToClusterServiceConnectDefaultsPtrOutputWithContext(context.Background())
}

func (o ClusterServiceConnectDefaultsOutput) ToClusterServiceConnectDefaultsPtrOutputWithContext(ctx context.Context) ClusterServiceConnectDefaultsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterServiceConnectDefaults) *ClusterServiceConnectDefaults {
		return &v
	}).(ClusterServiceConnectDefaultsPtrOutput)
}

// The namespace name or full Amazon Resource Name (ARN) of the CMAPlong namespace that's used when you create a service and don't specify a Service Connect configuration. The namespace name can include up to 1024 characters. The name is case-sensitive. The name can't include greater than (>), less than (<), double quotation marks ("), or slash (/).
//
//	If you enter an existing namespace name or ARN, then that namespace will be used. Any namespace type is supported. The namespace must be in this account and this AWS Region.
//	If you enter a new name, a CMAPlong namespace will be created. Amazon ECS creates a CMAP namespace with the "API calls" method of instance discovery only. This instance discovery method is the "HTTP" namespace type in the CLIlong. Other types of instance discovery aren't used by Service Connect.
//	If you update the cluster with an empty string ``""`` for the namespace name, the cluster configuration for Service Connect is removed. Note that the namespace will remain in CMAP and must be deleted separately.
//	For more information about CMAPlong, see [Working with Services](https://docs.aws.amazon.com/cloud-map/latest/dg/working-with-services.html) in the *Developer Guide*.
func (o ClusterServiceConnectDefaultsOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterServiceConnectDefaults) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ClusterServiceConnectDefaultsPtrOutput struct{ *pulumi.OutputState }

func (ClusterServiceConnectDefaultsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterServiceConnectDefaults)(nil)).Elem()
}

func (o ClusterServiceConnectDefaultsPtrOutput) ToClusterServiceConnectDefaultsPtrOutput() ClusterServiceConnectDefaultsPtrOutput {
	return o
}

func (o ClusterServiceConnectDefaultsPtrOutput) ToClusterServiceConnectDefaultsPtrOutputWithContext(ctx context.Context) ClusterServiceConnectDefaultsPtrOutput {
	return o
}

func (o ClusterServiceConnectDefaultsPtrOutput) Elem() ClusterServiceConnectDefaultsOutput {
	return o.ApplyT(func(v *ClusterServiceConnectDefaults) ClusterServiceConnectDefaults {
		if v != nil {
			return *v
		}
		var ret ClusterServiceConnectDefaults
		return ret
	}).(ClusterServiceConnectDefaultsOutput)
}

// The namespace name or full Amazon Resource Name (ARN) of the CMAPlong namespace that's used when you create a service and don't specify a Service Connect configuration. The namespace name can include up to 1024 characters. The name is case-sensitive. The name can't include greater than (>), less than (<), double quotation marks ("), or slash (/).
//
//	If you enter an existing namespace name or ARN, then that namespace will be used. Any namespace type is supported. The namespace must be in this account and this AWS Region.
//	If you enter a new name, a CMAPlong namespace will be created. Amazon ECS creates a CMAP namespace with the "API calls" method of instance discovery only. This instance discovery method is the "HTTP" namespace type in the CLIlong. Other types of instance discovery aren't used by Service Connect.
//	If you update the cluster with an empty string ``""`` for the namespace name, the cluster configuration for Service Connect is removed. Note that the namespace will remain in CMAP and must be deleted separately.
//	For more information about CMAPlong, see [Working with Services](https://docs.aws.amazon.com/cloud-map/latest/dg/working-with-services.html) in the *Developer Guide*.
func (o ClusterServiceConnectDefaultsPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterServiceConnectDefaults) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The settings to use when creating a cluster. This parameter is used to turn on CloudWatch Container Insights with enhanced observability or CloudWatch Container Insights for a cluster.
//
//	Container Insights with enhanced observability provides all the Container Insights metrics, plus additional task and container metrics. This version supports enhanced observability for Amazon ECS clusters using the Amazon EC2 and Fargate launch types. After you configure Container Insights with enhanced observability on Amazon ECS, Container Insights auto-collects detailed infrastructure telemetry from the cluster level down to the container level in your environment and displays these critical performance data in curated dashboards removing the heavy lifting in observability set-up.
//	For more information, see [Monitor Amazon ECS containers using Container Insights with enhanced observability](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cloudwatch-container-insights.html) in the *Amazon Elastic Container Service Developer Guide*.
type ClusterSettings struct {
	// The name of the cluster setting. The value is ``containerInsights`` .
	Name *string `pulumi:"name"`
	// The value to set for the cluster setting. The supported values are ``enhanced``, ``enabled``, and ``disabled``.
	//  To use Container Insights with enhanced observability, set the ``containerInsights`` account setting to ``enhanced``.
	//  To use Container Insights, set the ``containerInsights`` account setting to ``enabled``.
	//  If a cluster value is specified, it will override the ``containerInsights`` value set with [PutAccountSetting](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutAccountSetting.html) or [PutAccountSettingDefault](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutAccountSettingDefault.html).
	Value *string `pulumi:"value"`
}

// ClusterSettingsInput is an input type that accepts ClusterSettingsArgs and ClusterSettingsOutput values.
// You can construct a concrete instance of `ClusterSettingsInput` via:
//
//	ClusterSettingsArgs{...}
type ClusterSettingsInput interface {
	pulumi.Input

	ToClusterSettingsOutput() ClusterSettingsOutput
	ToClusterSettingsOutputWithContext(context.Context) ClusterSettingsOutput
}

// The settings to use when creating a cluster. This parameter is used to turn on CloudWatch Container Insights with enhanced observability or CloudWatch Container Insights for a cluster.
//
//	Container Insights with enhanced observability provides all the Container Insights metrics, plus additional task and container metrics. This version supports enhanced observability for Amazon ECS clusters using the Amazon EC2 and Fargate launch types. After you configure Container Insights with enhanced observability on Amazon ECS, Container Insights auto-collects detailed infrastructure telemetry from the cluster level down to the container level in your environment and displays these critical performance data in curated dashboards removing the heavy lifting in observability set-up.
//	For more information, see [Monitor Amazon ECS containers using Container Insights with enhanced observability](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cloudwatch-container-insights.html) in the *Amazon Elastic Container Service Developer Guide*.
type ClusterSettingsArgs struct {
	// The name of the cluster setting. The value is ``containerInsights`` .
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The value to set for the cluster setting. The supported values are ``enhanced``, ``enabled``, and ``disabled``.
	//  To use Container Insights with enhanced observability, set the ``containerInsights`` account setting to ``enhanced``.
	//  To use Container Insights, set the ``containerInsights`` account setting to ``enabled``.
	//  If a cluster value is specified, it will override the ``containerInsights`` value set with [PutAccountSetting](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutAccountSetting.html) or [PutAccountSettingDefault](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutAccountSettingDefault.html).
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ClusterSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterSettings)(nil)).Elem()
}

func (i ClusterSettingsArgs) ToClusterSettingsOutput() ClusterSettingsOutput {
	return i.ToClusterSettingsOutputWithContext(context.Background())
}

func (i ClusterSettingsArgs) ToClusterSettingsOutputWithContext(ctx context.Context) ClusterSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSettingsOutput)
}

// ClusterSettingsArrayInput is an input type that accepts ClusterSettingsArray and ClusterSettingsArrayOutput values.
// You can construct a concrete instance of `ClusterSettingsArrayInput` via:
//
//	ClusterSettingsArray{ ClusterSettingsArgs{...} }
type ClusterSettingsArrayInput interface {
	pulumi.Input

	ToClusterSettingsArrayOutput() ClusterSettingsArrayOutput
	ToClusterSettingsArrayOutputWithContext(context.Context) ClusterSettingsArrayOutput
}

type ClusterSettingsArray []ClusterSettingsInput

func (ClusterSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterSettings)(nil)).Elem()
}

func (i ClusterSettingsArray) ToClusterSettingsArrayOutput() ClusterSettingsArrayOutput {
	return i.ToClusterSettingsArrayOutputWithContext(context.Background())
}

func (i ClusterSettingsArray) ToClusterSettingsArrayOutputWithContext(ctx context.Context) ClusterSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSettingsArrayOutput)
}

// The settings to use when creating a cluster. This parameter is used to turn on CloudWatch Container Insights with enhanced observability or CloudWatch Container Insights for a cluster.
//
//	Container Insights with enhanced observability provides all the Container Insights metrics, plus additional task and container metrics. This version supports enhanced observability for Amazon ECS clusters using the Amazon EC2 and Fargate launch types. After you configure Container Insights with enhanced observability on Amazon ECS, Container Insights auto-collects detailed infrastructure telemetry from the cluster level down to the container level in your environment and displays these critical performance data in curated dashboards removing the heavy lifting in observability set-up.
//	For more information, see [Monitor Amazon ECS containers using Container Insights with enhanced observability](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cloudwatch-container-insights.html) in the *Amazon Elastic Container Service Developer Guide*.
type ClusterSettingsOutput struct{ *pulumi.OutputState }

func (ClusterSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterSettings)(nil)).Elem()
}

func (o ClusterSettingsOutput) ToClusterSettingsOutput() ClusterSettingsOutput {
	return o
}

func (o ClusterSettingsOutput) ToClusterSettingsOutputWithContext(ctx context.Context) ClusterSettingsOutput {
	return o
}

// The name of the cluster setting. The value is “containerInsights“ .
func (o ClusterSettingsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterSettings) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The value to set for the cluster setting. The supported values are “enhanced“, “enabled“, and “disabled“.
//
//	To use Container Insights with enhanced observability, set the ``containerInsights`` account setting to ``enhanced``.
//	To use Container Insights, set the ``containerInsights`` account setting to ``enabled``.
//	If a cluster value is specified, it will override the ``containerInsights`` value set with [PutAccountSetting](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutAccountSetting.html) or [PutAccountSettingDefault](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutAccountSettingDefault.html).
func (o ClusterSettingsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterSettings) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ClusterSettingsArrayOutput struct{ *pulumi.OutputState }

func (ClusterSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterSettings)(nil)).Elem()
}

func (o ClusterSettingsArrayOutput) ToClusterSettingsArrayOutput() ClusterSettingsArrayOutput {
	return o
}

func (o ClusterSettingsArrayOutput) ToClusterSettingsArrayOutputWithContext(ctx context.Context) ClusterSettingsArrayOutput {
	return o
}

func (o ClusterSettingsArrayOutput) Index(i pulumi.IntInput) ClusterSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterSettings {
		return vs[0].([]ClusterSettings)[vs[1].(int)]
	}).(ClusterSettingsOutput)
}

// The metadata that you apply to a resource to help you categorize and organize them. Each tag consists of a key and an optional value. You define them.
//
//	The following basic restrictions apply to tags:
//	 +  Maximum number of tags per resource - 50
//	 +  For each resource, each tag key must be unique, and each tag key can have only one value.
//	 +  Maximum key length - 128 Unicode characters in UTF-8
//	 +  Maximum value length - 256 Unicode characters in UTF-8
//	 +  If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
//	 +  Tag keys and values are case-sensitive.
//	 +  Do not use ``aws:``, ``AWS:``, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
type ClusterTag struct {
	// One part of a key-value pair that make up a tag. A ``key`` is a general label that acts like a category for more specific tag values.
	Key *string `pulumi:"key"`
	// The optional part of a key-value pair that make up a tag. A ``value`` acts as a descriptor within a tag category (key).
	Value *string `pulumi:"value"`
}

// The advanced settings for a load balancer used in blue/green deployments. Specify the alternate target group, listener rules, and IAM role required for traffic shifting during blue/green deployments. For more information, see [Required resources for Amazon ECS blue/green deployments](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/blue-green-deployment-implementation.html) in the *Amazon Elastic Container Service Developer Guide*.
type ServiceAdvancedConfiguration struct {
	// The Amazon Resource Name (ARN) of the alternate target group for Amazon ECS blue/green deployments.
	AlternateTargetGroupArn string `pulumi:"alternateTargetGroupArn"`
	// The Amazon Resource Name (ARN) that that identifies the production listener rule (in the case of an Application Load Balancer) or listener (in the case for an Network Load Balancer) for routing production traffic.
	ProductionListenerRule *string `pulumi:"productionListenerRule"`
	// The Amazon Resource Name (ARN) of the IAM role that grants Amazon ECS permission to call the Elastic Load Balancing APIs for you.
	RoleArn *string `pulumi:"roleArn"`
	// The Amazon Resource Name (ARN) that identifies ) that identifies the test listener rule (in the case of an Application Load Balancer) or listener (in the case for an Network Load Balancer) for routing test traffic.
	TestListenerRule *string `pulumi:"testListenerRule"`
}

// ServiceAdvancedConfigurationInput is an input type that accepts ServiceAdvancedConfigurationArgs and ServiceAdvancedConfigurationOutput values.
// You can construct a concrete instance of `ServiceAdvancedConfigurationInput` via:
//
//	ServiceAdvancedConfigurationArgs{...}
type ServiceAdvancedConfigurationInput interface {
	pulumi.Input

	ToServiceAdvancedConfigurationOutput() ServiceAdvancedConfigurationOutput
	ToServiceAdvancedConfigurationOutputWithContext(context.Context) ServiceAdvancedConfigurationOutput
}

// The advanced settings for a load balancer used in blue/green deployments. Specify the alternate target group, listener rules, and IAM role required for traffic shifting during blue/green deployments. For more information, see [Required resources for Amazon ECS blue/green deployments](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/blue-green-deployment-implementation.html) in the *Amazon Elastic Container Service Developer Guide*.
type ServiceAdvancedConfigurationArgs struct {
	// The Amazon Resource Name (ARN) of the alternate target group for Amazon ECS blue/green deployments.
	AlternateTargetGroupArn pulumi.StringInput `pulumi:"alternateTargetGroupArn"`
	// The Amazon Resource Name (ARN) that that identifies the production listener rule (in the case of an Application Load Balancer) or listener (in the case for an Network Load Balancer) for routing production traffic.
	ProductionListenerRule pulumi.StringPtrInput `pulumi:"productionListenerRule"`
	// The Amazon Resource Name (ARN) of the IAM role that grants Amazon ECS permission to call the Elastic Load Balancing APIs for you.
	RoleArn pulumi.StringPtrInput `pulumi:"roleArn"`
	// The Amazon Resource Name (ARN) that identifies ) that identifies the test listener rule (in the case of an Application Load Balancer) or listener (in the case for an Network Load Balancer) for routing test traffic.
	TestListenerRule pulumi.StringPtrInput `pulumi:"testListenerRule"`
}

func (ServiceAdvancedConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAdvancedConfiguration)(nil)).Elem()
}

func (i ServiceAdvancedConfigurationArgs) ToServiceAdvancedConfigurationOutput() ServiceAdvancedConfigurationOutput {
	return i.ToServiceAdvancedConfigurationOutputWithContext(context.Background())
}

func (i ServiceAdvancedConfigurationArgs) ToServiceAdvancedConfigurationOutputWithContext(ctx context.Context) ServiceAdvancedConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAdvancedConfigurationOutput)
}

func (i ServiceAdvancedConfigurationArgs) ToServiceAdvancedConfigurationPtrOutput() ServiceAdvancedConfigurationPtrOutput {
	return i.ToServiceAdvancedConfigurationPtrOutputWithContext(context.Background())
}

func (i ServiceAdvancedConfigurationArgs) ToServiceAdvancedConfigurationPtrOutputWithContext(ctx context.Context) ServiceAdvancedConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAdvancedConfigurationOutput).ToServiceAdvancedConfigurationPtrOutputWithContext(ctx)
}

// ServiceAdvancedConfigurationPtrInput is an input type that accepts ServiceAdvancedConfigurationArgs, ServiceAdvancedConfigurationPtr and ServiceAdvancedConfigurationPtrOutput values.
// You can construct a concrete instance of `ServiceAdvancedConfigurationPtrInput` via:
//
//	        ServiceAdvancedConfigurationArgs{...}
//
//	or:
//
//	        nil
type ServiceAdvancedConfigurationPtrInput interface {
	pulumi.Input

	ToServiceAdvancedConfigurationPtrOutput() ServiceAdvancedConfigurationPtrOutput
	ToServiceAdvancedConfigurationPtrOutputWithContext(context.Context) ServiceAdvancedConfigurationPtrOutput
}

type serviceAdvancedConfigurationPtrType ServiceAdvancedConfigurationArgs

func ServiceAdvancedConfigurationPtr(v *ServiceAdvancedConfigurationArgs) ServiceAdvancedConfigurationPtrInput {
	return (*serviceAdvancedConfigurationPtrType)(v)
}

func (*serviceAdvancedConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAdvancedConfiguration)(nil)).Elem()
}

func (i *serviceAdvancedConfigurationPtrType) ToServiceAdvancedConfigurationPtrOutput() ServiceAdvancedConfigurationPtrOutput {
	return i.ToServiceAdvancedConfigurationPtrOutputWithContext(context.Background())
}

func (i *serviceAdvancedConfigurationPtrType) ToServiceAdvancedConfigurationPtrOutputWithContext(ctx context.Context) ServiceAdvancedConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAdvancedConfigurationPtrOutput)
}

// The advanced settings for a load balancer used in blue/green deployments. Specify the alternate target group, listener rules, and IAM role required for traffic shifting during blue/green deployments. For more information, see [Required resources for Amazon ECS blue/green deployments](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/blue-green-deployment-implementation.html) in the *Amazon Elastic Container Service Developer Guide*.
type ServiceAdvancedConfigurationOutput struct{ *pulumi.OutputState }

func (ServiceAdvancedConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAdvancedConfiguration)(nil)).Elem()
}

func (o ServiceAdvancedConfigurationOutput) ToServiceAdvancedConfigurationOutput() ServiceAdvancedConfigurationOutput {
	return o
}

func (o ServiceAdvancedConfigurationOutput) ToServiceAdvancedConfigurationOutputWithContext(ctx context.Context) ServiceAdvancedConfigurationOutput {
	return o
}

func (o ServiceAdvancedConfigurationOutput) ToServiceAdvancedConfigurationPtrOutput() ServiceAdvancedConfigurationPtrOutput {
	return o.ToServiceAdvancedConfigurationPtrOutputWithContext(context.Background())
}

func (o ServiceAdvancedConfigurationOutput) ToServiceAdvancedConfigurationPtrOutputWithContext(ctx context.Context) ServiceAdvancedConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceAdvancedConfiguration) *ServiceAdvancedConfiguration {
		return &v
	}).(ServiceAdvancedConfigurationPtrOutput)
}

// The Amazon Resource Name (ARN) of the alternate target group for Amazon ECS blue/green deployments.
func (o ServiceAdvancedConfigurationOutput) AlternateTargetGroupArn() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceAdvancedConfiguration) string { return v.AlternateTargetGroupArn }).(pulumi.StringOutput)
}

// The Amazon Resource Name (ARN) that that identifies the production listener rule (in the case of an Application Load Balancer) or listener (in the case for an Network Load Balancer) for routing production traffic.
func (o ServiceAdvancedConfigurationOutput) ProductionListenerRule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceAdvancedConfiguration) *string { return v.ProductionListenerRule }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of the IAM role that grants Amazon ECS permission to call the Elastic Load Balancing APIs for you.
func (o ServiceAdvancedConfigurationOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceAdvancedConfiguration) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) that identifies ) that identifies the test listener rule (in the case of an Application Load Balancer) or listener (in the case for an Network Load Balancer) for routing test traffic.
func (o ServiceAdvancedConfigurationOutput) TestListenerRule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceAdvancedConfiguration) *string { return v.TestListenerRule }).(pulumi.StringPtrOutput)
}

type ServiceAdvancedConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ServiceAdvancedConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAdvancedConfiguration)(nil)).Elem()
}

func (o ServiceAdvancedConfigurationPtrOutput) ToServiceAdvancedConfigurationPtrOutput() ServiceAdvancedConfigurationPtrOutput {
	return o
}

func (o ServiceAdvancedConfigurationPtrOutput) ToServiceAdvancedConfigurationPtrOutputWithContext(ctx context.Context) ServiceAdvancedConfigurationPtrOutput {
	return o
}

func (o ServiceAdvancedConfigurationPtrOutput) Elem() ServiceAdvancedConfigurationOutput {
	return o.ApplyT(func(v *ServiceAdvancedConfiguration) ServiceAdvancedConfiguration {
		if v != nil {
			return *v
		}
		var ret ServiceAdvancedConfiguration
		return ret
	}).(ServiceAdvancedConfigurationOutput)
}

// The Amazon Resource Name (ARN) of the alternate target group for Amazon ECS blue/green deployments.
func (o ServiceAdvancedConfigurationPtrOutput) AlternateTargetGroupArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAdvancedConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.AlternateTargetGroupArn
	}).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) that that identifies the production listener rule (in the case of an Application Load Balancer) or listener (in the case for an Network Load Balancer) for routing production traffic.
func (o ServiceAdvancedConfigurationPtrOutput) ProductionListenerRule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAdvancedConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ProductionListenerRule
	}).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of the IAM role that grants Amazon ECS permission to call the Elastic Load Balancing APIs for you.
func (o ServiceAdvancedConfigurationPtrOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAdvancedConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.RoleArn
	}).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) that identifies ) that identifies the test listener rule (in the case of an Application Load Balancer) or listener (in the case for an Network Load Balancer) for routing test traffic.
func (o ServiceAdvancedConfigurationPtrOutput) TestListenerRule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAdvancedConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.TestListenerRule
	}).(pulumi.StringPtrOutput)
}

// An object representing the networking details for a task or service. For example “awsVpcConfiguration={subnets=["subnet-12344321"],securityGroups=["sg-12344321"]}“.
type ServiceAwsVpcConfiguration struct {
	// Whether the task's elastic network interface receives a public IP address.
	//  Consider the following when you set this value:
	//   +  When you use ``create-service`` or ``update-service``, the default is ``DISABLED``.
	//   +  When the service ``deploymentController`` is ``ECS``, the value must be ``DISABLED``.
	AssignPublicIp *ServiceAwsVpcConfigurationAssignPublicIp `pulumi:"assignPublicIp"`
	// The IDs of the security groups associated with the task or service. If you don't specify a security group, the default security group for the VPC is used. There's a limit of 5 security groups that can be specified.
	//   All specified security groups must be from the same VPC.
	SecurityGroups []string `pulumi:"securityGroups"`
	// The IDs of the subnets associated with the task or service. There's a limit of 16 subnets that can be specified.
	//   All specified subnets must be from the same VPC.
	Subnets []string `pulumi:"subnets"`
}

// ServiceAwsVpcConfigurationInput is an input type that accepts ServiceAwsVpcConfigurationArgs and ServiceAwsVpcConfigurationOutput values.
// You can construct a concrete instance of `ServiceAwsVpcConfigurationInput` via:
//
//	ServiceAwsVpcConfigurationArgs{...}
type ServiceAwsVpcConfigurationInput interface {
	pulumi.Input

	ToServiceAwsVpcConfigurationOutput() ServiceAwsVpcConfigurationOutput
	ToServiceAwsVpcConfigurationOutputWithContext(context.Context) ServiceAwsVpcConfigurationOutput
}

// An object representing the networking details for a task or service. For example “awsVpcConfiguration={subnets=["subnet-12344321"],securityGroups=["sg-12344321"]}“.
type ServiceAwsVpcConfigurationArgs struct {
	// Whether the task's elastic network interface receives a public IP address.
	//  Consider the following when you set this value:
	//   +  When you use ``create-service`` or ``update-service``, the default is ``DISABLED``.
	//   +  When the service ``deploymentController`` is ``ECS``, the value must be ``DISABLED``.
	AssignPublicIp ServiceAwsVpcConfigurationAssignPublicIpPtrInput `pulumi:"assignPublicIp"`
	// The IDs of the security groups associated with the task or service. If you don't specify a security group, the default security group for the VPC is used. There's a limit of 5 security groups that can be specified.
	//   All specified security groups must be from the same VPC.
	SecurityGroups pulumi.StringArrayInput `pulumi:"securityGroups"`
	// The IDs of the subnets associated with the task or service. There's a limit of 16 subnets that can be specified.
	//   All specified subnets must be from the same VPC.
	Subnets pulumi.StringArrayInput `pulumi:"subnets"`
}

func (ServiceAwsVpcConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAwsVpcConfiguration)(nil)).Elem()
}

func (i ServiceAwsVpcConfigurationArgs) ToServiceAwsVpcConfigurationOutput() ServiceAwsVpcConfigurationOutput {
	return i.ToServiceAwsVpcConfigurationOutputWithContext(context.Background())
}

func (i ServiceAwsVpcConfigurationArgs) ToServiceAwsVpcConfigurationOutputWithContext(ctx context.Context) ServiceAwsVpcConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAwsVpcConfigurationOutput)
}

func (i ServiceAwsVpcConfigurationArgs) ToServiceAwsVpcConfigurationPtrOutput() ServiceAwsVpcConfigurationPtrOutput {
	return i.ToServiceAwsVpcConfigurationPtrOutputWithContext(context.Background())
}

func (i ServiceAwsVpcConfigurationArgs) ToServiceAwsVpcConfigurationPtrOutputWithContext(ctx context.Context) ServiceAwsVpcConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAwsVpcConfigurationOutput).ToServiceAwsVpcConfigurationPtrOutputWithContext(ctx)
}

// ServiceAwsVpcConfigurationPtrInput is an input type that accepts ServiceAwsVpcConfigurationArgs, ServiceAwsVpcConfigurationPtr and ServiceAwsVpcConfigurationPtrOutput values.
// You can construct a concrete instance of `ServiceAwsVpcConfigurationPtrInput` via:
//
//	        ServiceAwsVpcConfigurationArgs{...}
//
//	or:
//
//	        nil
type ServiceAwsVpcConfigurationPtrInput interface {
	pulumi.Input

	ToServiceAwsVpcConfigurationPtrOutput() ServiceAwsVpcConfigurationPtrOutput
	ToServiceAwsVpcConfigurationPtrOutputWithContext(context.Context) ServiceAwsVpcConfigurationPtrOutput
}

type serviceAwsVpcConfigurationPtrType ServiceAwsVpcConfigurationArgs

func ServiceAwsVpcConfigurationPtr(v *ServiceAwsVpcConfigurationArgs) ServiceAwsVpcConfigurationPtrInput {
	return (*serviceAwsVpcConfigurationPtrType)(v)
}

func (*serviceAwsVpcConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAwsVpcConfiguration)(nil)).Elem()
}

func (i *serviceAwsVpcConfigurationPtrType) ToServiceAwsVpcConfigurationPtrOutput() ServiceAwsVpcConfigurationPtrOutput {
	return i.ToServiceAwsVpcConfigurationPtrOutputWithContext(context.Background())
}

func (i *serviceAwsVpcConfigurationPtrType) ToServiceAwsVpcConfigurationPtrOutputWithContext(ctx context.Context) ServiceAwsVpcConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAwsVpcConfigurationPtrOutput)
}

// An object representing the networking details for a task or service. For example “awsVpcConfiguration={subnets=["subnet-12344321"],securityGroups=["sg-12344321"]}“.
type ServiceAwsVpcConfigurationOutput struct{ *pulumi.OutputState }

func (ServiceAwsVpcConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAwsVpcConfiguration)(nil)).Elem()
}

func (o ServiceAwsVpcConfigurationOutput) ToServiceAwsVpcConfigurationOutput() ServiceAwsVpcConfigurationOutput {
	return o
}

func (o ServiceAwsVpcConfigurationOutput) ToServiceAwsVpcConfigurationOutputWithContext(ctx context.Context) ServiceAwsVpcConfigurationOutput {
	return o
}

func (o ServiceAwsVpcConfigurationOutput) ToServiceAwsVpcConfigurationPtrOutput() ServiceAwsVpcConfigurationPtrOutput {
	return o.ToServiceAwsVpcConfigurationPtrOutputWithContext(context.Background())
}

func (o ServiceAwsVpcConfigurationOutput) ToServiceAwsVpcConfigurationPtrOutputWithContext(ctx context.Context) ServiceAwsVpcConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceAwsVpcConfiguration) *ServiceAwsVpcConfiguration {
		return &v
	}).(ServiceAwsVpcConfigurationPtrOutput)
}

// Whether the task's elastic network interface receives a public IP address.
//
//	Consider the following when you set this value:
//	 +  When you use ``create-service`` or ``update-service``, the default is ``DISABLED``.
//	 +  When the service ``deploymentController`` is ``ECS``, the value must be ``DISABLED``.
func (o ServiceAwsVpcConfigurationOutput) AssignPublicIp() ServiceAwsVpcConfigurationAssignPublicIpPtrOutput {
	return o.ApplyT(func(v ServiceAwsVpcConfiguration) *ServiceAwsVpcConfigurationAssignPublicIp { return v.AssignPublicIp }).(ServiceAwsVpcConfigurationAssignPublicIpPtrOutput)
}

// The IDs of the security groups associated with the task or service. If you don't specify a security group, the default security group for the VPC is used. There's a limit of 5 security groups that can be specified.
//
//	All specified security groups must be from the same VPC.
func (o ServiceAwsVpcConfigurationOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceAwsVpcConfiguration) []string { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

// The IDs of the subnets associated with the task or service. There's a limit of 16 subnets that can be specified.
//
//	All specified subnets must be from the same VPC.
func (o ServiceAwsVpcConfigurationOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceAwsVpcConfiguration) []string { return v.Subnets }).(pulumi.StringArrayOutput)
}

type ServiceAwsVpcConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ServiceAwsVpcConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAwsVpcConfiguration)(nil)).Elem()
}

func (o ServiceAwsVpcConfigurationPtrOutput) ToServiceAwsVpcConfigurationPtrOutput() ServiceAwsVpcConfigurationPtrOutput {
	return o
}

func (o ServiceAwsVpcConfigurationPtrOutput) ToServiceAwsVpcConfigurationPtrOutputWithContext(ctx context.Context) ServiceAwsVpcConfigurationPtrOutput {
	return o
}

func (o ServiceAwsVpcConfigurationPtrOutput) Elem() ServiceAwsVpcConfigurationOutput {
	return o.ApplyT(func(v *ServiceAwsVpcConfiguration) ServiceAwsVpcConfiguration {
		if v != nil {
			return *v
		}
		var ret ServiceAwsVpcConfiguration
		return ret
	}).(ServiceAwsVpcConfigurationOutput)
}

// Whether the task's elastic network interface receives a public IP address.
//
//	Consider the following when you set this value:
//	 +  When you use ``create-service`` or ``update-service``, the default is ``DISABLED``.
//	 +  When the service ``deploymentController`` is ``ECS``, the value must be ``DISABLED``.
func (o ServiceAwsVpcConfigurationPtrOutput) AssignPublicIp() ServiceAwsVpcConfigurationAssignPublicIpPtrOutput {
	return o.ApplyT(func(v *ServiceAwsVpcConfiguration) *ServiceAwsVpcConfigurationAssignPublicIp {
		if v == nil {
			return nil
		}
		return v.AssignPublicIp
	}).(ServiceAwsVpcConfigurationAssignPublicIpPtrOutput)
}

// The IDs of the security groups associated with the task or service. If you don't specify a security group, the default security group for the VPC is used. There's a limit of 5 security groups that can be specified.
//
//	All specified security groups must be from the same VPC.
func (o ServiceAwsVpcConfigurationPtrOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceAwsVpcConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.SecurityGroups
	}).(pulumi.StringArrayOutput)
}

// The IDs of the subnets associated with the task or service. There's a limit of 16 subnets that can be specified.
//
//	All specified subnets must be from the same VPC.
func (o ServiceAwsVpcConfigurationPtrOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceAwsVpcConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.Subnets
	}).(pulumi.StringArrayOutput)
}

// The details of a capacity provider strategy. A capacity provider strategy can be set when using the “RunTask“ or “CreateService“ APIs or as the default capacity provider strategy for a cluster with the “CreateCluster“ API.
//
//	Only capacity providers that are already associated with a cluster and have an ``ACTIVE`` or ``UPDATING`` status can be used in a capacity provider strategy. The ``PutClusterCapacityProviders`` API is used to associate a capacity provider with a cluster.
//	If specifying a capacity provider that uses an Auto Scaling group, the capacity provider must already be created. New Auto Scaling group capacity providers can be created with the ``CreateCapacityProvider`` API operation.
//	To use an FARGATElong capacity provider, specify either the ``FARGATE`` or ``FARGATE_SPOT`` capacity providers. The FARGATElong capacity providers are available to all accounts and only need to be associated with a cluster to be used in a capacity provider strategy.
type ServiceCapacityProviderStrategyItem struct {
	// The *base* value designates how many tasks, at a minimum, to run on the specified capacity provider for each service. Only one capacity provider in a capacity provider strategy can have a *base* defined. If no value is specified, the default value of ``0`` is used.
	//  Base value characteristics:
	//   +  Only one capacity provider in a strategy can have a base defined
	//   +  Default value is ``0`` if not specified
	//   +  Valid range: 0 to 100,000
	//   +  Base requirements are satisfied first before weight distribution
	Base *int `pulumi:"base"`
	// The short name of the capacity provider.
	CapacityProvider *string `pulumi:"capacityProvider"`
	// The *weight* value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The ``weight`` value is taken into consideration after the ``base`` value, if defined, is satisfied.
	//  If no ``weight`` value is specified, the default value of ``0`` is used. When multiple capacity providers are specified within a capacity provider strategy, at least one of the capacity providers must have a weight value greater than zero and any capacity providers with a weight of ``0`` can't be used to place tasks. If you specify multiple capacity providers in a strategy that all have a weight of ``0``, any ``RunTask`` or ``CreateService`` actions using the capacity provider strategy will fail.
	//  Weight value characteristics:
	//   +  Weight is considered after the base value is satisfied
	//   +  Default value is ``0`` if not specified
	//   +  Valid range: 0 to 1,000
	//   +  At least one capacity provider must have a weight greater than zero
	//   +  Capacity providers with weight of ``0`` cannot place tasks
	//
	//  Task distribution logic:
	//   1.  Base satisfaction: The minimum number of tasks specified by the base value are placed on that capacity provider
	//   2.  Weight distribution: After base requirements are met, additional tasks are distributed according to weight ratios
	//
	//  Examples:
	//  Equal Distribution: Two capacity providers both with weight ``1`` will split tasks evenly after base requirements are met.
	//  Weighted Distribution: If capacityProviderA has weight ``1`` and capacityProviderB has weight ``4``, then for every 1 task on A, 4 tasks will run on B.
	Weight *int `pulumi:"weight"`
}

// ServiceCapacityProviderStrategyItemInput is an input type that accepts ServiceCapacityProviderStrategyItemArgs and ServiceCapacityProviderStrategyItemOutput values.
// You can construct a concrete instance of `ServiceCapacityProviderStrategyItemInput` via:
//
//	ServiceCapacityProviderStrategyItemArgs{...}
type ServiceCapacityProviderStrategyItemInput interface {
	pulumi.Input

	ToServiceCapacityProviderStrategyItemOutput() ServiceCapacityProviderStrategyItemOutput
	ToServiceCapacityProviderStrategyItemOutputWithContext(context.Context) ServiceCapacityProviderStrategyItemOutput
}

// The details of a capacity provider strategy. A capacity provider strategy can be set when using the “RunTask“ or “CreateService“ APIs or as the default capacity provider strategy for a cluster with the “CreateCluster“ API.
//
//	Only capacity providers that are already associated with a cluster and have an ``ACTIVE`` or ``UPDATING`` status can be used in a capacity provider strategy. The ``PutClusterCapacityProviders`` API is used to associate a capacity provider with a cluster.
//	If specifying a capacity provider that uses an Auto Scaling group, the capacity provider must already be created. New Auto Scaling group capacity providers can be created with the ``CreateCapacityProvider`` API operation.
//	To use an FARGATElong capacity provider, specify either the ``FARGATE`` or ``FARGATE_SPOT`` capacity providers. The FARGATElong capacity providers are available to all accounts and only need to be associated with a cluster to be used in a capacity provider strategy.
type ServiceCapacityProviderStrategyItemArgs struct {
	// The *base* value designates how many tasks, at a minimum, to run on the specified capacity provider for each service. Only one capacity provider in a capacity provider strategy can have a *base* defined. If no value is specified, the default value of ``0`` is used.
	//  Base value characteristics:
	//   +  Only one capacity provider in a strategy can have a base defined
	//   +  Default value is ``0`` if not specified
	//   +  Valid range: 0 to 100,000
	//   +  Base requirements are satisfied first before weight distribution
	Base pulumi.IntPtrInput `pulumi:"base"`
	// The short name of the capacity provider.
	CapacityProvider pulumi.StringPtrInput `pulumi:"capacityProvider"`
	// The *weight* value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The ``weight`` value is taken into consideration after the ``base`` value, if defined, is satisfied.
	//  If no ``weight`` value is specified, the default value of ``0`` is used. When multiple capacity providers are specified within a capacity provider strategy, at least one of the capacity providers must have a weight value greater than zero and any capacity providers with a weight of ``0`` can't be used to place tasks. If you specify multiple capacity providers in a strategy that all have a weight of ``0``, any ``RunTask`` or ``CreateService`` actions using the capacity provider strategy will fail.
	//  Weight value characteristics:
	//   +  Weight is considered after the base value is satisfied
	//   +  Default value is ``0`` if not specified
	//   +  Valid range: 0 to 1,000
	//   +  At least one capacity provider must have a weight greater than zero
	//   +  Capacity providers with weight of ``0`` cannot place tasks
	//
	//  Task distribution logic:
	//   1.  Base satisfaction: The minimum number of tasks specified by the base value are placed on that capacity provider
	//   2.  Weight distribution: After base requirements are met, additional tasks are distributed according to weight ratios
	//
	//  Examples:
	//  Equal Distribution: Two capacity providers both with weight ``1`` will split tasks evenly after base requirements are met.
	//  Weighted Distribution: If capacityProviderA has weight ``1`` and capacityProviderB has weight ``4``, then for every 1 task on A, 4 tasks will run on B.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (ServiceCapacityProviderStrategyItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceCapacityProviderStrategyItem)(nil)).Elem()
}

func (i ServiceCapacityProviderStrategyItemArgs) ToServiceCapacityProviderStrategyItemOutput() ServiceCapacityProviderStrategyItemOutput {
	return i.ToServiceCapacityProviderStrategyItemOutputWithContext(context.Background())
}

func (i ServiceCapacityProviderStrategyItemArgs) ToServiceCapacityProviderStrategyItemOutputWithContext(ctx context.Context) ServiceCapacityProviderStrategyItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceCapacityProviderStrategyItemOutput)
}

// ServiceCapacityProviderStrategyItemArrayInput is an input type that accepts ServiceCapacityProviderStrategyItemArray and ServiceCapacityProviderStrategyItemArrayOutput values.
// You can construct a concrete instance of `ServiceCapacityProviderStrategyItemArrayInput` via:
//
//	ServiceCapacityProviderStrategyItemArray{ ServiceCapacityProviderStrategyItemArgs{...} }
type ServiceCapacityProviderStrategyItemArrayInput interface {
	pulumi.Input

	ToServiceCapacityProviderStrategyItemArrayOutput() ServiceCapacityProviderStrategyItemArrayOutput
	ToServiceCapacityProviderStrategyItemArrayOutputWithContext(context.Context) ServiceCapacityProviderStrategyItemArrayOutput
}

type ServiceCapacityProviderStrategyItemArray []ServiceCapacityProviderStrategyItemInput

func (ServiceCapacityProviderStrategyItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceCapacityProviderStrategyItem)(nil)).Elem()
}

func (i ServiceCapacityProviderStrategyItemArray) ToServiceCapacityProviderStrategyItemArrayOutput() ServiceCapacityProviderStrategyItemArrayOutput {
	return i.ToServiceCapacityProviderStrategyItemArrayOutputWithContext(context.Background())
}

func (i ServiceCapacityProviderStrategyItemArray) ToServiceCapacityProviderStrategyItemArrayOutputWithContext(ctx context.Context) ServiceCapacityProviderStrategyItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceCapacityProviderStrategyItemArrayOutput)
}

// The details of a capacity provider strategy. A capacity provider strategy can be set when using the “RunTask“ or “CreateService“ APIs or as the default capacity provider strategy for a cluster with the “CreateCluster“ API.
//
//	Only capacity providers that are already associated with a cluster and have an ``ACTIVE`` or ``UPDATING`` status can be used in a capacity provider strategy. The ``PutClusterCapacityProviders`` API is used to associate a capacity provider with a cluster.
//	If specifying a capacity provider that uses an Auto Scaling group, the capacity provider must already be created. New Auto Scaling group capacity providers can be created with the ``CreateCapacityProvider`` API operation.
//	To use an FARGATElong capacity provider, specify either the ``FARGATE`` or ``FARGATE_SPOT`` capacity providers. The FARGATElong capacity providers are available to all accounts and only need to be associated with a cluster to be used in a capacity provider strategy.
type ServiceCapacityProviderStrategyItemOutput struct{ *pulumi.OutputState }

func (ServiceCapacityProviderStrategyItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceCapacityProviderStrategyItem)(nil)).Elem()
}

func (o ServiceCapacityProviderStrategyItemOutput) ToServiceCapacityProviderStrategyItemOutput() ServiceCapacityProviderStrategyItemOutput {
	return o
}

func (o ServiceCapacityProviderStrategyItemOutput) ToServiceCapacityProviderStrategyItemOutputWithContext(ctx context.Context) ServiceCapacityProviderStrategyItemOutput {
	return o
}

// The *base* value designates how many tasks, at a minimum, to run on the specified capacity provider for each service. Only one capacity provider in a capacity provider strategy can have a *base* defined. If no value is specified, the default value of “0“ is used.
//
//	Base value characteristics:
//	 +  Only one capacity provider in a strategy can have a base defined
//	 +  Default value is ``0`` if not specified
//	 +  Valid range: 0 to 100,000
//	 +  Base requirements are satisfied first before weight distribution
func (o ServiceCapacityProviderStrategyItemOutput) Base() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceCapacityProviderStrategyItem) *int { return v.Base }).(pulumi.IntPtrOutput)
}

// The short name of the capacity provider.
func (o ServiceCapacityProviderStrategyItemOutput) CapacityProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceCapacityProviderStrategyItem) *string { return v.CapacityProvider }).(pulumi.StringPtrOutput)
}

// The *weight* value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The “weight“ value is taken into consideration after the “base“ value, if defined, is satisfied.
//
//	If no ``weight`` value is specified, the default value of ``0`` is used. When multiple capacity providers are specified within a capacity provider strategy, at least one of the capacity providers must have a weight value greater than zero and any capacity providers with a weight of ``0`` can't be used to place tasks. If you specify multiple capacity providers in a strategy that all have a weight of ``0``, any ``RunTask`` or ``CreateService`` actions using the capacity provider strategy will fail.
//	Weight value characteristics:
//	 +  Weight is considered after the base value is satisfied
//	 +  Default value is ``0`` if not specified
//	 +  Valid range: 0 to 1,000
//	 +  At least one capacity provider must have a weight greater than zero
//	 +  Capacity providers with weight of ``0`` cannot place tasks
//
//	Task distribution logic:
//	 1.  Base satisfaction: The minimum number of tasks specified by the base value are placed on that capacity provider
//	 2.  Weight distribution: After base requirements are met, additional tasks are distributed according to weight ratios
//
//	Examples:
//	Equal Distribution: Two capacity providers both with weight ``1`` will split tasks evenly after base requirements are met.
//	Weighted Distribution: If capacityProviderA has weight ``1`` and capacityProviderB has weight ``4``, then for every 1 task on A, 4 tasks will run on B.
func (o ServiceCapacityProviderStrategyItemOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceCapacityProviderStrategyItem) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type ServiceCapacityProviderStrategyItemArrayOutput struct{ *pulumi.OutputState }

func (ServiceCapacityProviderStrategyItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceCapacityProviderStrategyItem)(nil)).Elem()
}

func (o ServiceCapacityProviderStrategyItemArrayOutput) ToServiceCapacityProviderStrategyItemArrayOutput() ServiceCapacityProviderStrategyItemArrayOutput {
	return o
}

func (o ServiceCapacityProviderStrategyItemArrayOutput) ToServiceCapacityProviderStrategyItemArrayOutputWithContext(ctx context.Context) ServiceCapacityProviderStrategyItemArrayOutput {
	return o
}

func (o ServiceCapacityProviderStrategyItemArrayOutput) Index(i pulumi.IntInput) ServiceCapacityProviderStrategyItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceCapacityProviderStrategyItem {
		return vs[0].([]ServiceCapacityProviderStrategyItem)[vs[1].(int)]
	}).(ServiceCapacityProviderStrategyItemOutput)
}

// Each alias ("endpoint") is a fully-qualified name and port number that other tasks ("clients") can use to connect to this service.
//
//	Each name and port mapping must be unique within the namespace.
//	Tasks that run in a namespace can use short names to connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS services create are supported with Service Connect. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic Container Service Developer Guide*.
type ServiceConnectClientAlias struct {
	// The ``dnsName`` is the name that you use in the applications of client tasks to connect to this service. The name must be a valid DNS name but doesn't need to be fully-qualified. The name can include up to 127 characters. The name can include lowercase letters, numbers, underscores (_), hyphens (-), and periods (.). The name can't start with a hyphen.
	//  If this parameter isn't specified, the default value of ``discoveryName.namespace`` is used. If the ``discoveryName`` isn't specified, the port mapping name from the task definition is used in ``portName.namespace``.
	//  To avoid changing your applications in client Amazon ECS services, set this to the same name that the client application uses by default. For example, a few common names are ``database``, ``db``, or the lowercase name of a database, such as ``mysql`` or ``redis``. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic Container Service Developer Guide*.
	DnsName *string `pulumi:"dnsName"`
	// The listening port number for the Service Connect proxy. This port is available inside of all of the tasks within the same namespace.
	//  To avoid changing your applications in client Amazon ECS services, set this to the same port that the client application uses by default. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic Container Service Developer Guide*.
	Port int `pulumi:"port"`
	// The configuration for test traffic routing rules used during blue/green deployments with Amazon ECS Service Connect. This allows you to route a portion of traffic to the new service revision of your service for testing before shifting all production traffic.
	TestTrafficRules *ServiceConnectTestTrafficRules `pulumi:"testTrafficRules"`
}

// ServiceConnectClientAliasInput is an input type that accepts ServiceConnectClientAliasArgs and ServiceConnectClientAliasOutput values.
// You can construct a concrete instance of `ServiceConnectClientAliasInput` via:
//
//	ServiceConnectClientAliasArgs{...}
type ServiceConnectClientAliasInput interface {
	pulumi.Input

	ToServiceConnectClientAliasOutput() ServiceConnectClientAliasOutput
	ToServiceConnectClientAliasOutputWithContext(context.Context) ServiceConnectClientAliasOutput
}

// Each alias ("endpoint") is a fully-qualified name and port number that other tasks ("clients") can use to connect to this service.
//
//	Each name and port mapping must be unique within the namespace.
//	Tasks that run in a namespace can use short names to connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS services create are supported with Service Connect. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic Container Service Developer Guide*.
type ServiceConnectClientAliasArgs struct {
	// The ``dnsName`` is the name that you use in the applications of client tasks to connect to this service. The name must be a valid DNS name but doesn't need to be fully-qualified. The name can include up to 127 characters. The name can include lowercase letters, numbers, underscores (_), hyphens (-), and periods (.). The name can't start with a hyphen.
	//  If this parameter isn't specified, the default value of ``discoveryName.namespace`` is used. If the ``discoveryName`` isn't specified, the port mapping name from the task definition is used in ``portName.namespace``.
	//  To avoid changing your applications in client Amazon ECS services, set this to the same name that the client application uses by default. For example, a few common names are ``database``, ``db``, or the lowercase name of a database, such as ``mysql`` or ``redis``. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic Container Service Developer Guide*.
	DnsName pulumi.StringPtrInput `pulumi:"dnsName"`
	// The listening port number for the Service Connect proxy. This port is available inside of all of the tasks within the same namespace.
	//  To avoid changing your applications in client Amazon ECS services, set this to the same port that the client application uses by default. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic Container Service Developer Guide*.
	Port pulumi.IntInput `pulumi:"port"`
	// The configuration for test traffic routing rules used during blue/green deployments with Amazon ECS Service Connect. This allows you to route a portion of traffic to the new service revision of your service for testing before shifting all production traffic.
	TestTrafficRules ServiceConnectTestTrafficRulesPtrInput `pulumi:"testTrafficRules"`
}

func (ServiceConnectClientAliasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceConnectClientAlias)(nil)).Elem()
}

func (i ServiceConnectClientAliasArgs) ToServiceConnectClientAliasOutput() ServiceConnectClientAliasOutput {
	return i.ToServiceConnectClientAliasOutputWithContext(context.Background())
}

func (i ServiceConnectClientAliasArgs) ToServiceConnectClientAliasOutputWithContext(ctx context.Context) ServiceConnectClientAliasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConnectClientAliasOutput)
}

// ServiceConnectClientAliasArrayInput is an input type that accepts ServiceConnectClientAliasArray and ServiceConnectClientAliasArrayOutput values.
// You can construct a concrete instance of `ServiceConnectClientAliasArrayInput` via:
//
//	ServiceConnectClientAliasArray{ ServiceConnectClientAliasArgs{...} }
type ServiceConnectClientAliasArrayInput interface {
	pulumi.Input

	ToServiceConnectClientAliasArrayOutput() ServiceConnectClientAliasArrayOutput
	ToServiceConnectClientAliasArrayOutputWithContext(context.Context) ServiceConnectClientAliasArrayOutput
}

type ServiceConnectClientAliasArray []ServiceConnectClientAliasInput

func (ServiceConnectClientAliasArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceConnectClientAlias)(nil)).Elem()
}

func (i ServiceConnectClientAliasArray) ToServiceConnectClientAliasArrayOutput() ServiceConnectClientAliasArrayOutput {
	return i.ToServiceConnectClientAliasArrayOutputWithContext(context.Background())
}

func (i ServiceConnectClientAliasArray) ToServiceConnectClientAliasArrayOutputWithContext(ctx context.Context) ServiceConnectClientAliasArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConnectClientAliasArrayOutput)
}

// Each alias ("endpoint") is a fully-qualified name and port number that other tasks ("clients") can use to connect to this service.
//
//	Each name and port mapping must be unique within the namespace.
//	Tasks that run in a namespace can use short names to connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS services create are supported with Service Connect. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic Container Service Developer Guide*.
type ServiceConnectClientAliasOutput struct{ *pulumi.OutputState }

func (ServiceConnectClientAliasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceConnectClientAlias)(nil)).Elem()
}

func (o ServiceConnectClientAliasOutput) ToServiceConnectClientAliasOutput() ServiceConnectClientAliasOutput {
	return o
}

func (o ServiceConnectClientAliasOutput) ToServiceConnectClientAliasOutputWithContext(ctx context.Context) ServiceConnectClientAliasOutput {
	return o
}

// The “dnsName“ is the name that you use in the applications of client tasks to connect to this service. The name must be a valid DNS name but doesn't need to be fully-qualified. The name can include up to 127 characters. The name can include lowercase letters, numbers, underscores (_), hyphens (-), and periods (.). The name can't start with a hyphen.
//
//	If this parameter isn't specified, the default value of ``discoveryName.namespace`` is used. If the ``discoveryName`` isn't specified, the port mapping name from the task definition is used in ``portName.namespace``.
//	To avoid changing your applications in client Amazon ECS services, set this to the same name that the client application uses by default. For example, a few common names are ``database``, ``db``, or the lowercase name of a database, such as ``mysql`` or ``redis``. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic Container Service Developer Guide*.
func (o ServiceConnectClientAliasOutput) DnsName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceConnectClientAlias) *string { return v.DnsName }).(pulumi.StringPtrOutput)
}

// The listening port number for the Service Connect proxy. This port is available inside of all of the tasks within the same namespace.
//
//	To avoid changing your applications in client Amazon ECS services, set this to the same port that the client application uses by default. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic Container Service Developer Guide*.
func (o ServiceConnectClientAliasOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ServiceConnectClientAlias) int { return v.Port }).(pulumi.IntOutput)
}

// The configuration for test traffic routing rules used during blue/green deployments with Amazon ECS Service Connect. This allows you to route a portion of traffic to the new service revision of your service for testing before shifting all production traffic.
func (o ServiceConnectClientAliasOutput) TestTrafficRules() ServiceConnectTestTrafficRulesPtrOutput {
	return o.ApplyT(func(v ServiceConnectClientAlias) *ServiceConnectTestTrafficRules { return v.TestTrafficRules }).(ServiceConnectTestTrafficRulesPtrOutput)
}

type ServiceConnectClientAliasArrayOutput struct{ *pulumi.OutputState }

func (ServiceConnectClientAliasArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceConnectClientAlias)(nil)).Elem()
}

func (o ServiceConnectClientAliasArrayOutput) ToServiceConnectClientAliasArrayOutput() ServiceConnectClientAliasArrayOutput {
	return o
}

func (o ServiceConnectClientAliasArrayOutput) ToServiceConnectClientAliasArrayOutputWithContext(ctx context.Context) ServiceConnectClientAliasArrayOutput {
	return o
}

func (o ServiceConnectClientAliasArrayOutput) Index(i pulumi.IntInput) ServiceConnectClientAliasOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceConnectClientAlias {
		return vs[0].([]ServiceConnectClientAlias)[vs[1].(int)]
	}).(ServiceConnectClientAliasOutput)
}

// The Service Connect configuration of your Amazon ECS service. The configuration for this service to discover and connect to services, and be discovered by, and connected from, other services within a namespace.
//
//	Tasks that run in a namespace can use short names to connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS services create are supported with Service Connect. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic Container Service Developer Guide*.
type ServiceConnectConfiguration struct {
	// Specifies whether to use Service Connect with this service.
	Enabled bool `pulumi:"enabled"`
	// The log configuration for the container. This parameter maps to ``LogConfig`` in the docker container create command and the ``--log-driver`` option to docker run.
	//  By default, containers use the same logging driver that the Docker daemon uses. However, the container might use a different logging driver than the Docker daemon by specifying a log driver configuration in the container definition.
	//  Understand the following when specifying a log configuration for your containers.
	//   +  Amazon ECS currently supports a subset of the logging drivers available to the Docker daemon. Additional log drivers may be available in future releases of the Amazon ECS container agent.
	//       For tasks on FARGATElong, the supported log drivers are ``awslogs``, ``splunk``, and ``awsfirelens``.
	//       For tasks hosted on Amazon EC2 instances, the supported log drivers are ``awslogs``, ``fluentd``, ``gelf``, ``json-file``, ``journald``,``syslog``, ``splunk``, and ``awsfirelens``.
	//   +  This parameter requires version 1.18 of the Docker Remote API or greater on your container instance.
	//   +  For tasks that are hosted on Amazon EC2 instances, the Amazon ECS container agent must register the available logging drivers with the ``ECS_AVAILABLE_LOGGING_DRIVERS`` environment variable before containers placed on that instance can use these log configuration options. For more information, see [Amazon ECS container agent configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the *Amazon Elastic Container Service Developer Guide*.
	//   +  For tasks that are on FARGATElong, because you don't have access to the underlying infrastructure your tasks are hosted on, any additional software needed must be installed outside of the task. For example, the Fluentd output aggregators or a remote host running Logstash to send Gelf logs to.
	LogConfiguration *ServiceLogConfiguration `pulumi:"logConfiguration"`
	// The namespace name or full Amazon Resource Name (ARN) of the CMAPlong namespace for use with Service Connect. The namespace must be in the same AWS Region as the Amazon ECS service and cluster. The type of namespace doesn't affect Service Connect. For more information about CMAPlong, see [Working with Services](https://docs.aws.amazon.com/cloud-map/latest/dg/working-with-services.html) in the *Developer Guide*.
	Namespace *string `pulumi:"namespace"`
	// The list of Service Connect service objects. These are names and aliases (also known as endpoints) that are used by other Amazon ECS services to connect to this service.
	//  This field is not required for a "client" Amazon ECS service that's a member of a namespace only to connect to other services within the namespace. An example of this would be a frontend application that accepts incoming requests from either a load balancer that's attached to the service or by other means.
	//  An object selects a port from the task definition, assigns a name for the CMAPlong service, and a list of aliases (endpoints) and ports for client applications to refer to this service.
	Services []ServiceConnectService `pulumi:"services"`
}

// ServiceConnectConfigurationInput is an input type that accepts ServiceConnectConfigurationArgs and ServiceConnectConfigurationOutput values.
// You can construct a concrete instance of `ServiceConnectConfigurationInput` via:
//
//	ServiceConnectConfigurationArgs{...}
type ServiceConnectConfigurationInput interface {
	pulumi.Input

	ToServiceConnectConfigurationOutput() ServiceConnectConfigurationOutput
	ToServiceConnectConfigurationOutputWithContext(context.Context) ServiceConnectConfigurationOutput
}

// The Service Connect configuration of your Amazon ECS service. The configuration for this service to discover and connect to services, and be discovered by, and connected from, other services within a namespace.
//
//	Tasks that run in a namespace can use short names to connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS services create are supported with Service Connect. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic Container Service Developer Guide*.
type ServiceConnectConfigurationArgs struct {
	// Specifies whether to use Service Connect with this service.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// The log configuration for the container. This parameter maps to ``LogConfig`` in the docker container create command and the ``--log-driver`` option to docker run.
	//  By default, containers use the same logging driver that the Docker daemon uses. However, the container might use a different logging driver than the Docker daemon by specifying a log driver configuration in the container definition.
	//  Understand the following when specifying a log configuration for your containers.
	//   +  Amazon ECS currently supports a subset of the logging drivers available to the Docker daemon. Additional log drivers may be available in future releases of the Amazon ECS container agent.
	//       For tasks on FARGATElong, the supported log drivers are ``awslogs``, ``splunk``, and ``awsfirelens``.
	//       For tasks hosted on Amazon EC2 instances, the supported log drivers are ``awslogs``, ``fluentd``, ``gelf``, ``json-file``, ``journald``,``syslog``, ``splunk``, and ``awsfirelens``.
	//   +  This parameter requires version 1.18 of the Docker Remote API or greater on your container instance.
	//   +  For tasks that are hosted on Amazon EC2 instances, the Amazon ECS container agent must register the available logging drivers with the ``ECS_AVAILABLE_LOGGING_DRIVERS`` environment variable before containers placed on that instance can use these log configuration options. For more information, see [Amazon ECS container agent configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the *Amazon Elastic Container Service Developer Guide*.
	//   +  For tasks that are on FARGATElong, because you don't have access to the underlying infrastructure your tasks are hosted on, any additional software needed must be installed outside of the task. For example, the Fluentd output aggregators or a remote host running Logstash to send Gelf logs to.
	LogConfiguration ServiceLogConfigurationPtrInput `pulumi:"logConfiguration"`
	// The namespace name or full Amazon Resource Name (ARN) of the CMAPlong namespace for use with Service Connect. The namespace must be in the same AWS Region as the Amazon ECS service and cluster. The type of namespace doesn't affect Service Connect. For more information about CMAPlong, see [Working with Services](https://docs.aws.amazon.com/cloud-map/latest/dg/working-with-services.html) in the *Developer Guide*.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The list of Service Connect service objects. These are names and aliases (also known as endpoints) that are used by other Amazon ECS services to connect to this service.
	//  This field is not required for a "client" Amazon ECS service that's a member of a namespace only to connect to other services within the namespace. An example of this would be a frontend application that accepts incoming requests from either a load balancer that's attached to the service or by other means.
	//  An object selects a port from the task definition, assigns a name for the CMAPlong service, and a list of aliases (endpoints) and ports for client applications to refer to this service.
	Services ServiceConnectServiceArrayInput `pulumi:"services"`
}

func (ServiceConnectConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceConnectConfiguration)(nil)).Elem()
}

func (i ServiceConnectConfigurationArgs) ToServiceConnectConfigurationOutput() ServiceConnectConfigurationOutput {
	return i.ToServiceConnectConfigurationOutputWithContext(context.Background())
}

func (i ServiceConnectConfigurationArgs) ToServiceConnectConfigurationOutputWithContext(ctx context.Context) ServiceConnectConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConnectConfigurationOutput)
}

func (i ServiceConnectConfigurationArgs) ToServiceConnectConfigurationPtrOutput() ServiceConnectConfigurationPtrOutput {
	return i.ToServiceConnectConfigurationPtrOutputWithContext(context.Background())
}

func (i ServiceConnectConfigurationArgs) ToServiceConnectConfigurationPtrOutputWithContext(ctx context.Context) ServiceConnectConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConnectConfigurationOutput).ToServiceConnectConfigurationPtrOutputWithContext(ctx)
}

// ServiceConnectConfigurationPtrInput is an input type that accepts ServiceConnectConfigurationArgs, ServiceConnectConfigurationPtr and ServiceConnectConfigurationPtrOutput values.
// You can construct a concrete instance of `ServiceConnectConfigurationPtrInput` via:
//
//	        ServiceConnectConfigurationArgs{...}
//
//	or:
//
//	        nil
type ServiceConnectConfigurationPtrInput interface {
	pulumi.Input

	ToServiceConnectConfigurationPtrOutput() ServiceConnectConfigurationPtrOutput
	ToServiceConnectConfigurationPtrOutputWithContext(context.Context) ServiceConnectConfigurationPtrOutput
}

type serviceConnectConfigurationPtrType ServiceConnectConfigurationArgs

func ServiceConnectConfigurationPtr(v *ServiceConnectConfigurationArgs) ServiceConnectConfigurationPtrInput {
	return (*serviceConnectConfigurationPtrType)(v)
}

func (*serviceConnectConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceConnectConfiguration)(nil)).Elem()
}

func (i *serviceConnectConfigurationPtrType) ToServiceConnectConfigurationPtrOutput() ServiceConnectConfigurationPtrOutput {
	return i.ToServiceConnectConfigurationPtrOutputWithContext(context.Background())
}

func (i *serviceConnectConfigurationPtrType) ToServiceConnectConfigurationPtrOutputWithContext(ctx context.Context) ServiceConnectConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConnectConfigurationPtrOutput)
}

// The Service Connect configuration of your Amazon ECS service. The configuration for this service to discover and connect to services, and be discovered by, and connected from, other services within a namespace.
//
//	Tasks that run in a namespace can use short names to connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS services create are supported with Service Connect. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic Container Service Developer Guide*.
type ServiceConnectConfigurationOutput struct{ *pulumi.OutputState }

func (ServiceConnectConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceConnectConfiguration)(nil)).Elem()
}

func (o ServiceConnectConfigurationOutput) ToServiceConnectConfigurationOutput() ServiceConnectConfigurationOutput {
	return o
}

func (o ServiceConnectConfigurationOutput) ToServiceConnectConfigurationOutputWithContext(ctx context.Context) ServiceConnectConfigurationOutput {
	return o
}

func (o ServiceConnectConfigurationOutput) ToServiceConnectConfigurationPtrOutput() ServiceConnectConfigurationPtrOutput {
	return o.ToServiceConnectConfigurationPtrOutputWithContext(context.Background())
}

func (o ServiceConnectConfigurationOutput) ToServiceConnectConfigurationPtrOutputWithContext(ctx context.Context) ServiceConnectConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceConnectConfiguration) *ServiceConnectConfiguration {
		return &v
	}).(ServiceConnectConfigurationPtrOutput)
}

// Specifies whether to use Service Connect with this service.
func (o ServiceConnectConfigurationOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ServiceConnectConfiguration) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The log configuration for the container. This parameter maps to “LogConfig“ in the docker container create command and the “--log-driver“ option to docker run.
//
//	By default, containers use the same logging driver that the Docker daemon uses. However, the container might use a different logging driver than the Docker daemon by specifying a log driver configuration in the container definition.
//	Understand the following when specifying a log configuration for your containers.
//	 +  Amazon ECS currently supports a subset of the logging drivers available to the Docker daemon. Additional log drivers may be available in future releases of the Amazon ECS container agent.
//	     For tasks on FARGATElong, the supported log drivers are ``awslogs``, ``splunk``, and ``awsfirelens``.
//	     For tasks hosted on Amazon EC2 instances, the supported log drivers are ``awslogs``, ``fluentd``, ``gelf``, ``json-file``, ``journald``,``syslog``, ``splunk``, and ``awsfirelens``.
//	 +  This parameter requires version 1.18 of the Docker Remote API or greater on your container instance.
//	 +  For tasks that are hosted on Amazon EC2 instances, the Amazon ECS container agent must register the available logging drivers with the ``ECS_AVAILABLE_LOGGING_DRIVERS`` environment variable before containers placed on that instance can use these log configuration options. For more information, see [Amazon ECS container agent configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the *Amazon Elastic Container Service Developer Guide*.
//	 +  For tasks that are on FARGATElong, because you don't have access to the underlying infrastructure your tasks are hosted on, any additional software needed must be installed outside of the task. For example, the Fluentd output aggregators or a remote host running Logstash to send Gelf logs to.
func (o ServiceConnectConfigurationOutput) LogConfiguration() ServiceLogConfigurationPtrOutput {
	return o.ApplyT(func(v ServiceConnectConfiguration) *ServiceLogConfiguration { return v.LogConfiguration }).(ServiceLogConfigurationPtrOutput)
}

// The namespace name or full Amazon Resource Name (ARN) of the CMAPlong namespace for use with Service Connect. The namespace must be in the same AWS Region as the Amazon ECS service and cluster. The type of namespace doesn't affect Service Connect. For more information about CMAPlong, see [Working with Services](https://docs.aws.amazon.com/cloud-map/latest/dg/working-with-services.html) in the *Developer Guide*.
func (o ServiceConnectConfigurationOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceConnectConfiguration) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The list of Service Connect service objects. These are names and aliases (also known as endpoints) that are used by other Amazon ECS services to connect to this service.
//
//	This field is not required for a "client" Amazon ECS service that's a member of a namespace only to connect to other services within the namespace. An example of this would be a frontend application that accepts incoming requests from either a load balancer that's attached to the service or by other means.
//	An object selects a port from the task definition, assigns a name for the CMAPlong service, and a list of aliases (endpoints) and ports for client applications to refer to this service.
func (o ServiceConnectConfigurationOutput) Services() ServiceConnectServiceArrayOutput {
	return o.ApplyT(func(v ServiceConnectConfiguration) []ServiceConnectService { return v.Services }).(ServiceConnectServiceArrayOutput)
}

type ServiceConnectConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ServiceConnectConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceConnectConfiguration)(nil)).Elem()
}

func (o ServiceConnectConfigurationPtrOutput) ToServiceConnectConfigurationPtrOutput() ServiceConnectConfigurationPtrOutput {
	return o
}

func (o ServiceConnectConfigurationPtrOutput) ToServiceConnectConfigurationPtrOutputWithContext(ctx context.Context) ServiceConnectConfigurationPtrOutput {
	return o
}

func (o ServiceConnectConfigurationPtrOutput) Elem() ServiceConnectConfigurationOutput {
	return o.ApplyT(func(v *ServiceConnectConfiguration) ServiceConnectConfiguration {
		if v != nil {
			return *v
		}
		var ret ServiceConnectConfiguration
		return ret
	}).(ServiceConnectConfigurationOutput)
}

// Specifies whether to use Service Connect with this service.
func (o ServiceConnectConfigurationPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceConnectConfiguration) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The log configuration for the container. This parameter maps to “LogConfig“ in the docker container create command and the “--log-driver“ option to docker run.
//
//	By default, containers use the same logging driver that the Docker daemon uses. However, the container might use a different logging driver than the Docker daemon by specifying a log driver configuration in the container definition.
//	Understand the following when specifying a log configuration for your containers.
//	 +  Amazon ECS currently supports a subset of the logging drivers available to the Docker daemon. Additional log drivers may be available in future releases of the Amazon ECS container agent.
//	     For tasks on FARGATElong, the supported log drivers are ``awslogs``, ``splunk``, and ``awsfirelens``.
//	     For tasks hosted on Amazon EC2 instances, the supported log drivers are ``awslogs``, ``fluentd``, ``gelf``, ``json-file``, ``journald``,``syslog``, ``splunk``, and ``awsfirelens``.
//	 +  This parameter requires version 1.18 of the Docker Remote API or greater on your container instance.
//	 +  For tasks that are hosted on Amazon EC2 instances, the Amazon ECS container agent must register the available logging drivers with the ``ECS_AVAILABLE_LOGGING_DRIVERS`` environment variable before containers placed on that instance can use these log configuration options. For more information, see [Amazon ECS container agent configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the *Amazon Elastic Container Service Developer Guide*.
//	 +  For tasks that are on FARGATElong, because you don't have access to the underlying infrastructure your tasks are hosted on, any additional software needed must be installed outside of the task. For example, the Fluentd output aggregators or a remote host running Logstash to send Gelf logs to.
func (o ServiceConnectConfigurationPtrOutput) LogConfiguration() ServiceLogConfigurationPtrOutput {
	return o.ApplyT(func(v *ServiceConnectConfiguration) *ServiceLogConfiguration {
		if v == nil {
			return nil
		}
		return v.LogConfiguration
	}).(ServiceLogConfigurationPtrOutput)
}

// The namespace name or full Amazon Resource Name (ARN) of the CMAPlong namespace for use with Service Connect. The namespace must be in the same AWS Region as the Amazon ECS service and cluster. The type of namespace doesn't affect Service Connect. For more information about CMAPlong, see [Working with Services](https://docs.aws.amazon.com/cloud-map/latest/dg/working-with-services.html) in the *Developer Guide*.
func (o ServiceConnectConfigurationPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceConnectConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The list of Service Connect service objects. These are names and aliases (also known as endpoints) that are used by other Amazon ECS services to connect to this service.
//
//	This field is not required for a "client" Amazon ECS service that's a member of a namespace only to connect to other services within the namespace. An example of this would be a frontend application that accepts incoming requests from either a load balancer that's attached to the service or by other means.
//	An object selects a port from the task definition, assigns a name for the CMAPlong service, and a list of aliases (endpoints) and ports for client applications to refer to this service.
func (o ServiceConnectConfigurationPtrOutput) Services() ServiceConnectServiceArrayOutput {
	return o.ApplyT(func(v *ServiceConnectConfiguration) []ServiceConnectService {
		if v == nil {
			return nil
		}
		return v.Services
	}).(ServiceConnectServiceArrayOutput)
}

// The Service Connect service object configuration. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic Container Service Developer Guide*.
type ServiceConnectService struct {
	// The list of client aliases for this Service Connect service. You use these to assign names that can be used by client applications. The maximum number of client aliases that you can have in this list is 1.
	//  Each alias ("endpoint") is a fully-qualified name and port number that other Amazon ECS tasks ("clients") can use to connect to this service.
	//  Each name and port mapping must be unique within the namespace.
	//  For each ``ServiceConnectService``, you must provide at least one ``clientAlias`` with one ``port``.
	ClientAliases []ServiceConnectClientAlias `pulumi:"clientAliases"`
	// The ``discoveryName`` is the name of the new CMAP service that Amazon ECS creates for this Amazon ECS service. This must be unique within the CMAP namespace. The name can contain up to 64 characters. The name can include lowercase letters, numbers, underscores (_), and hyphens (-). The name can't start with a hyphen.
	//  If the ``discoveryName`` isn't specified, the port mapping name from the task definition is used in ``portName.namespace``.
	DiscoveryName *string `pulumi:"discoveryName"`
	// The port number for the Service Connect proxy to listen on.
	//  Use the value of this field to bypass the proxy for traffic on the port number specified in the named ``portMapping`` in the task definition of this application, and then use it in your VPC security groups to allow traffic into the proxy for this Amazon ECS service.
	//  In ``awsvpc`` mode and Fargate, the default value is the container port number. The container port number is in the ``portMapping`` in the task definition. In bridge mode, the default value is the ephemeral port of the Service Connect proxy.
	IngressPortOverride *int `pulumi:"ingressPortOverride"`
	// The ``portName`` must match the name of one of the ``portMappings`` from all the containers in the task definition of this Amazon ECS service.
	PortName string `pulumi:"portName"`
	// A reference to an object that represents the configured timeouts for Service Connect.
	Timeout *ServiceTimeoutConfiguration `pulumi:"timeout"`
	// A reference to an object that represents a Transport Layer Security (TLS) configuration.
	Tls *ServiceConnectTlsConfiguration `pulumi:"tls"`
}

// ServiceConnectServiceInput is an input type that accepts ServiceConnectServiceArgs and ServiceConnectServiceOutput values.
// You can construct a concrete instance of `ServiceConnectServiceInput` via:
//
//	ServiceConnectServiceArgs{...}
type ServiceConnectServiceInput interface {
	pulumi.Input

	ToServiceConnectServiceOutput() ServiceConnectServiceOutput
	ToServiceConnectServiceOutputWithContext(context.Context) ServiceConnectServiceOutput
}

// The Service Connect service object configuration. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic Container Service Developer Guide*.
type ServiceConnectServiceArgs struct {
	// The list of client aliases for this Service Connect service. You use these to assign names that can be used by client applications. The maximum number of client aliases that you can have in this list is 1.
	//  Each alias ("endpoint") is a fully-qualified name and port number that other Amazon ECS tasks ("clients") can use to connect to this service.
	//  Each name and port mapping must be unique within the namespace.
	//  For each ``ServiceConnectService``, you must provide at least one ``clientAlias`` with one ``port``.
	ClientAliases ServiceConnectClientAliasArrayInput `pulumi:"clientAliases"`
	// The ``discoveryName`` is the name of the new CMAP service that Amazon ECS creates for this Amazon ECS service. This must be unique within the CMAP namespace. The name can contain up to 64 characters. The name can include lowercase letters, numbers, underscores (_), and hyphens (-). The name can't start with a hyphen.
	//  If the ``discoveryName`` isn't specified, the port mapping name from the task definition is used in ``portName.namespace``.
	DiscoveryName pulumi.StringPtrInput `pulumi:"discoveryName"`
	// The port number for the Service Connect proxy to listen on.
	//  Use the value of this field to bypass the proxy for traffic on the port number specified in the named ``portMapping`` in the task definition of this application, and then use it in your VPC security groups to allow traffic into the proxy for this Amazon ECS service.
	//  In ``awsvpc`` mode and Fargate, the default value is the container port number. The container port number is in the ``portMapping`` in the task definition. In bridge mode, the default value is the ephemeral port of the Service Connect proxy.
	IngressPortOverride pulumi.IntPtrInput `pulumi:"ingressPortOverride"`
	// The ``portName`` must match the name of one of the ``portMappings`` from all the containers in the task definition of this Amazon ECS service.
	PortName pulumi.StringInput `pulumi:"portName"`
	// A reference to an object that represents the configured timeouts for Service Connect.
	Timeout ServiceTimeoutConfigurationPtrInput `pulumi:"timeout"`
	// A reference to an object that represents a Transport Layer Security (TLS) configuration.
	Tls ServiceConnectTlsConfigurationPtrInput `pulumi:"tls"`
}

func (ServiceConnectServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceConnectService)(nil)).Elem()
}

func (i ServiceConnectServiceArgs) ToServiceConnectServiceOutput() ServiceConnectServiceOutput {
	return i.ToServiceConnectServiceOutputWithContext(context.Background())
}

func (i ServiceConnectServiceArgs) ToServiceConnectServiceOutputWithContext(ctx context.Context) ServiceConnectServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConnectServiceOutput)
}

// ServiceConnectServiceArrayInput is an input type that accepts ServiceConnectServiceArray and ServiceConnectServiceArrayOutput values.
// You can construct a concrete instance of `ServiceConnectServiceArrayInput` via:
//
//	ServiceConnectServiceArray{ ServiceConnectServiceArgs{...} }
type ServiceConnectServiceArrayInput interface {
	pulumi.Input

	ToServiceConnectServiceArrayOutput() ServiceConnectServiceArrayOutput
	ToServiceConnectServiceArrayOutputWithContext(context.Context) ServiceConnectServiceArrayOutput
}

type ServiceConnectServiceArray []ServiceConnectServiceInput

func (ServiceConnectServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceConnectService)(nil)).Elem()
}

func (i ServiceConnectServiceArray) ToServiceConnectServiceArrayOutput() ServiceConnectServiceArrayOutput {
	return i.ToServiceConnectServiceArrayOutputWithContext(context.Background())
}

func (i ServiceConnectServiceArray) ToServiceConnectServiceArrayOutputWithContext(ctx context.Context) ServiceConnectServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConnectServiceArrayOutput)
}

// The Service Connect service object configuration. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic Container Service Developer Guide*.
type ServiceConnectServiceOutput struct{ *pulumi.OutputState }

func (ServiceConnectServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceConnectService)(nil)).Elem()
}

func (o ServiceConnectServiceOutput) ToServiceConnectServiceOutput() ServiceConnectServiceOutput {
	return o
}

func (o ServiceConnectServiceOutput) ToServiceConnectServiceOutputWithContext(ctx context.Context) ServiceConnectServiceOutput {
	return o
}

// The list of client aliases for this Service Connect service. You use these to assign names that can be used by client applications. The maximum number of client aliases that you can have in this list is 1.
//
//	Each alias ("endpoint") is a fully-qualified name and port number that other Amazon ECS tasks ("clients") can use to connect to this service.
//	Each name and port mapping must be unique within the namespace.
//	For each ``ServiceConnectService``, you must provide at least one ``clientAlias`` with one ``port``.
func (o ServiceConnectServiceOutput) ClientAliases() ServiceConnectClientAliasArrayOutput {
	return o.ApplyT(func(v ServiceConnectService) []ServiceConnectClientAlias { return v.ClientAliases }).(ServiceConnectClientAliasArrayOutput)
}

// The “discoveryName“ is the name of the new CMAP service that Amazon ECS creates for this Amazon ECS service. This must be unique within the CMAP namespace. The name can contain up to 64 characters. The name can include lowercase letters, numbers, underscores (_), and hyphens (-). The name can't start with a hyphen.
//
//	If the ``discoveryName`` isn't specified, the port mapping name from the task definition is used in ``portName.namespace``.
func (o ServiceConnectServiceOutput) DiscoveryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceConnectService) *string { return v.DiscoveryName }).(pulumi.StringPtrOutput)
}

// The port number for the Service Connect proxy to listen on.
//
//	Use the value of this field to bypass the proxy for traffic on the port number specified in the named ``portMapping`` in the task definition of this application, and then use it in your VPC security groups to allow traffic into the proxy for this Amazon ECS service.
//	In ``awsvpc`` mode and Fargate, the default value is the container port number. The container port number is in the ``portMapping`` in the task definition. In bridge mode, the default value is the ephemeral port of the Service Connect proxy.
func (o ServiceConnectServiceOutput) IngressPortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceConnectService) *int { return v.IngressPortOverride }).(pulumi.IntPtrOutput)
}

// The “portName“ must match the name of one of the “portMappings“ from all the containers in the task definition of this Amazon ECS service.
func (o ServiceConnectServiceOutput) PortName() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceConnectService) string { return v.PortName }).(pulumi.StringOutput)
}

// A reference to an object that represents the configured timeouts for Service Connect.
func (o ServiceConnectServiceOutput) Timeout() ServiceTimeoutConfigurationPtrOutput {
	return o.ApplyT(func(v ServiceConnectService) *ServiceTimeoutConfiguration { return v.Timeout }).(ServiceTimeoutConfigurationPtrOutput)
}

// A reference to an object that represents a Transport Layer Security (TLS) configuration.
func (o ServiceConnectServiceOutput) Tls() ServiceConnectTlsConfigurationPtrOutput {
	return o.ApplyT(func(v ServiceConnectService) *ServiceConnectTlsConfiguration { return v.Tls }).(ServiceConnectTlsConfigurationPtrOutput)
}

type ServiceConnectServiceArrayOutput struct{ *pulumi.OutputState }

func (ServiceConnectServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceConnectService)(nil)).Elem()
}

func (o ServiceConnectServiceArrayOutput) ToServiceConnectServiceArrayOutput() ServiceConnectServiceArrayOutput {
	return o
}

func (o ServiceConnectServiceArrayOutput) ToServiceConnectServiceArrayOutputWithContext(ctx context.Context) ServiceConnectServiceArrayOutput {
	return o
}

func (o ServiceConnectServiceArrayOutput) Index(i pulumi.IntInput) ServiceConnectServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceConnectService {
		return vs[0].([]ServiceConnectService)[vs[1].(int)]
	}).(ServiceConnectServiceOutput)
}

// The test traffic routing configuration for Amazon ECS blue/green deployments. This configuration allows you to define rules for routing specific traffic to the new service revision during the deployment process, allowing for safe testing before full production traffic shift.
//
//	For more information, see [Service Connect for Amazon ECS blue/green deployments](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect-blue-green.html) in the *Amazon Elastic Container Service Developer Guide*.
type ServiceConnectTestTrafficRules struct {
	// The HTTP header-based routing rules that determine which requests should be routed to the new service version during blue/green deployment testing. These rules provide fine-grained control over test traffic routing based on request headers.
	Header ServiceConnectTestTrafficRulesHeader `pulumi:"header"`
}

// ServiceConnectTestTrafficRulesInput is an input type that accepts ServiceConnectTestTrafficRulesArgs and ServiceConnectTestTrafficRulesOutput values.
// You can construct a concrete instance of `ServiceConnectTestTrafficRulesInput` via:
//
//	ServiceConnectTestTrafficRulesArgs{...}
type ServiceConnectTestTrafficRulesInput interface {
	pulumi.Input

	ToServiceConnectTestTrafficRulesOutput() ServiceConnectTestTrafficRulesOutput
	ToServiceConnectTestTrafficRulesOutputWithContext(context.Context) ServiceConnectTestTrafficRulesOutput
}

// The test traffic routing configuration for Amazon ECS blue/green deployments. This configuration allows you to define rules for routing specific traffic to the new service revision during the deployment process, allowing for safe testing before full production traffic shift.
//
//	For more information, see [Service Connect for Amazon ECS blue/green deployments](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect-blue-green.html) in the *Amazon Elastic Container Service Developer Guide*.
type ServiceConnectTestTrafficRulesArgs struct {
	// The HTTP header-based routing rules that determine which requests should be routed to the new service version during blue/green deployment testing. These rules provide fine-grained control over test traffic routing based on request headers.
	Header ServiceConnectTestTrafficRulesHeaderInput `pulumi:"header"`
}

func (ServiceConnectTestTrafficRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceConnectTestTrafficRules)(nil)).Elem()
}

func (i ServiceConnectTestTrafficRulesArgs) ToServiceConnectTestTrafficRulesOutput() ServiceConnectTestTrafficRulesOutput {
	return i.ToServiceConnectTestTrafficRulesOutputWithContext(context.Background())
}

func (i ServiceConnectTestTrafficRulesArgs) ToServiceConnectTestTrafficRulesOutputWithContext(ctx context.Context) ServiceConnectTestTrafficRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConnectTestTrafficRulesOutput)
}

func (i ServiceConnectTestTrafficRulesArgs) ToServiceConnectTestTrafficRulesPtrOutput() ServiceConnectTestTrafficRulesPtrOutput {
	return i.ToServiceConnectTestTrafficRulesPtrOutputWithContext(context.Background())
}

func (i ServiceConnectTestTrafficRulesArgs) ToServiceConnectTestTrafficRulesPtrOutputWithContext(ctx context.Context) ServiceConnectTestTrafficRulesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConnectTestTrafficRulesOutput).ToServiceConnectTestTrafficRulesPtrOutputWithContext(ctx)
}

// ServiceConnectTestTrafficRulesPtrInput is an input type that accepts ServiceConnectTestTrafficRulesArgs, ServiceConnectTestTrafficRulesPtr and ServiceConnectTestTrafficRulesPtrOutput values.
// You can construct a concrete instance of `ServiceConnectTestTrafficRulesPtrInput` via:
//
//	        ServiceConnectTestTrafficRulesArgs{...}
//
//	or:
//
//	        nil
type ServiceConnectTestTrafficRulesPtrInput interface {
	pulumi.Input

	ToServiceConnectTestTrafficRulesPtrOutput() ServiceConnectTestTrafficRulesPtrOutput
	ToServiceConnectTestTrafficRulesPtrOutputWithContext(context.Context) ServiceConnectTestTrafficRulesPtrOutput
}

type serviceConnectTestTrafficRulesPtrType ServiceConnectTestTrafficRulesArgs

func ServiceConnectTestTrafficRulesPtr(v *ServiceConnectTestTrafficRulesArgs) ServiceConnectTestTrafficRulesPtrInput {
	return (*serviceConnectTestTrafficRulesPtrType)(v)
}

func (*serviceConnectTestTrafficRulesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceConnectTestTrafficRules)(nil)).Elem()
}

func (i *serviceConnectTestTrafficRulesPtrType) ToServiceConnectTestTrafficRulesPtrOutput() ServiceConnectTestTrafficRulesPtrOutput {
	return i.ToServiceConnectTestTrafficRulesPtrOutputWithContext(context.Background())
}

func (i *serviceConnectTestTrafficRulesPtrType) ToServiceConnectTestTrafficRulesPtrOutputWithContext(ctx context.Context) ServiceConnectTestTrafficRulesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConnectTestTrafficRulesPtrOutput)
}

// The test traffic routing configuration for Amazon ECS blue/green deployments. This configuration allows you to define rules for routing specific traffic to the new service revision during the deployment process, allowing for safe testing before full production traffic shift.
//
//	For more information, see [Service Connect for Amazon ECS blue/green deployments](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect-blue-green.html) in the *Amazon Elastic Container Service Developer Guide*.
type ServiceConnectTestTrafficRulesOutput struct{ *pulumi.OutputState }

func (ServiceConnectTestTrafficRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceConnectTestTrafficRules)(nil)).Elem()
}

func (o ServiceConnectTestTrafficRulesOutput) ToServiceConnectTestTrafficRulesOutput() ServiceConnectTestTrafficRulesOutput {
	return o
}

func (o ServiceConnectTestTrafficRulesOutput) ToServiceConnectTestTrafficRulesOutputWithContext(ctx context.Context) ServiceConnectTestTrafficRulesOutput {
	return o
}

func (o ServiceConnectTestTrafficRulesOutput) ToServiceConnectTestTrafficRulesPtrOutput() ServiceConnectTestTrafficRulesPtrOutput {
	return o.ToServiceConnectTestTrafficRulesPtrOutputWithContext(context.Background())
}

func (o ServiceConnectTestTrafficRulesOutput) ToServiceConnectTestTrafficRulesPtrOutputWithContext(ctx context.Context) ServiceConnectTestTrafficRulesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceConnectTestTrafficRules) *ServiceConnectTestTrafficRules {
		return &v
	}).(ServiceConnectTestTrafficRulesPtrOutput)
}

// The HTTP header-based routing rules that determine which requests should be routed to the new service version during blue/green deployment testing. These rules provide fine-grained control over test traffic routing based on request headers.
func (o ServiceConnectTestTrafficRulesOutput) Header() ServiceConnectTestTrafficRulesHeaderOutput {
	return o.ApplyT(func(v ServiceConnectTestTrafficRules) ServiceConnectTestTrafficRulesHeader { return v.Header }).(ServiceConnectTestTrafficRulesHeaderOutput)
}

type ServiceConnectTestTrafficRulesPtrOutput struct{ *pulumi.OutputState }

func (ServiceConnectTestTrafficRulesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceConnectTestTrafficRules)(nil)).Elem()
}

func (o ServiceConnectTestTrafficRulesPtrOutput) ToServiceConnectTestTrafficRulesPtrOutput() ServiceConnectTestTrafficRulesPtrOutput {
	return o
}

func (o ServiceConnectTestTrafficRulesPtrOutput) ToServiceConnectTestTrafficRulesPtrOutputWithContext(ctx context.Context) ServiceConnectTestTrafficRulesPtrOutput {
	return o
}

func (o ServiceConnectTestTrafficRulesPtrOutput) Elem() ServiceConnectTestTrafficRulesOutput {
	return o.ApplyT(func(v *ServiceConnectTestTrafficRules) ServiceConnectTestTrafficRules {
		if v != nil {
			return *v
		}
		var ret ServiceConnectTestTrafficRules
		return ret
	}).(ServiceConnectTestTrafficRulesOutput)
}

// The HTTP header-based routing rules that determine which requests should be routed to the new service version during blue/green deployment testing. These rules provide fine-grained control over test traffic routing based on request headers.
func (o ServiceConnectTestTrafficRulesPtrOutput) Header() ServiceConnectTestTrafficRulesHeaderPtrOutput {
	return o.ApplyT(func(v *ServiceConnectTestTrafficRules) *ServiceConnectTestTrafficRulesHeader {
		if v == nil {
			return nil
		}
		return &v.Header
	}).(ServiceConnectTestTrafficRulesHeaderPtrOutput)
}

type ServiceConnectTestTrafficRulesHeader struct {
	Name  string                                     `pulumi:"name"`
	Value *ServiceConnectTestTrafficRulesHeaderValue `pulumi:"value"`
}

// ServiceConnectTestTrafficRulesHeaderInput is an input type that accepts ServiceConnectTestTrafficRulesHeaderArgs and ServiceConnectTestTrafficRulesHeaderOutput values.
// You can construct a concrete instance of `ServiceConnectTestTrafficRulesHeaderInput` via:
//
//	ServiceConnectTestTrafficRulesHeaderArgs{...}
type ServiceConnectTestTrafficRulesHeaderInput interface {
	pulumi.Input

	ToServiceConnectTestTrafficRulesHeaderOutput() ServiceConnectTestTrafficRulesHeaderOutput
	ToServiceConnectTestTrafficRulesHeaderOutputWithContext(context.Context) ServiceConnectTestTrafficRulesHeaderOutput
}

type ServiceConnectTestTrafficRulesHeaderArgs struct {
	Name  pulumi.StringInput                                `pulumi:"name"`
	Value ServiceConnectTestTrafficRulesHeaderValuePtrInput `pulumi:"value"`
}

func (ServiceConnectTestTrafficRulesHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceConnectTestTrafficRulesHeader)(nil)).Elem()
}

func (i ServiceConnectTestTrafficRulesHeaderArgs) ToServiceConnectTestTrafficRulesHeaderOutput() ServiceConnectTestTrafficRulesHeaderOutput {
	return i.ToServiceConnectTestTrafficRulesHeaderOutputWithContext(context.Background())
}

func (i ServiceConnectTestTrafficRulesHeaderArgs) ToServiceConnectTestTrafficRulesHeaderOutputWithContext(ctx context.Context) ServiceConnectTestTrafficRulesHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConnectTestTrafficRulesHeaderOutput)
}

func (i ServiceConnectTestTrafficRulesHeaderArgs) ToServiceConnectTestTrafficRulesHeaderPtrOutput() ServiceConnectTestTrafficRulesHeaderPtrOutput {
	return i.ToServiceConnectTestTrafficRulesHeaderPtrOutputWithContext(context.Background())
}

func (i ServiceConnectTestTrafficRulesHeaderArgs) ToServiceConnectTestTrafficRulesHeaderPtrOutputWithContext(ctx context.Context) ServiceConnectTestTrafficRulesHeaderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConnectTestTrafficRulesHeaderOutput).ToServiceConnectTestTrafficRulesHeaderPtrOutputWithContext(ctx)
}

// ServiceConnectTestTrafficRulesHeaderPtrInput is an input type that accepts ServiceConnectTestTrafficRulesHeaderArgs, ServiceConnectTestTrafficRulesHeaderPtr and ServiceConnectTestTrafficRulesHeaderPtrOutput values.
// You can construct a concrete instance of `ServiceConnectTestTrafficRulesHeaderPtrInput` via:
//
//	        ServiceConnectTestTrafficRulesHeaderArgs{...}
//
//	or:
//
//	        nil
type ServiceConnectTestTrafficRulesHeaderPtrInput interface {
	pulumi.Input

	ToServiceConnectTestTrafficRulesHeaderPtrOutput() ServiceConnectTestTrafficRulesHeaderPtrOutput
	ToServiceConnectTestTrafficRulesHeaderPtrOutputWithContext(context.Context) ServiceConnectTestTrafficRulesHeaderPtrOutput
}

type serviceConnectTestTrafficRulesHeaderPtrType ServiceConnectTestTrafficRulesHeaderArgs

func ServiceConnectTestTrafficRulesHeaderPtr(v *ServiceConnectTestTrafficRulesHeaderArgs) ServiceConnectTestTrafficRulesHeaderPtrInput {
	return (*serviceConnectTestTrafficRulesHeaderPtrType)(v)
}

func (*serviceConnectTestTrafficRulesHeaderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceConnectTestTrafficRulesHeader)(nil)).Elem()
}

func (i *serviceConnectTestTrafficRulesHeaderPtrType) ToServiceConnectTestTrafficRulesHeaderPtrOutput() ServiceConnectTestTrafficRulesHeaderPtrOutput {
	return i.ToServiceConnectTestTrafficRulesHeaderPtrOutputWithContext(context.Background())
}

func (i *serviceConnectTestTrafficRulesHeaderPtrType) ToServiceConnectTestTrafficRulesHeaderPtrOutputWithContext(ctx context.Context) ServiceConnectTestTrafficRulesHeaderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConnectTestTrafficRulesHeaderPtrOutput)
}

type ServiceConnectTestTrafficRulesHeaderOutput struct{ *pulumi.OutputState }

func (ServiceConnectTestTrafficRulesHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceConnectTestTrafficRulesHeader)(nil)).Elem()
}

func (o ServiceConnectTestTrafficRulesHeaderOutput) ToServiceConnectTestTrafficRulesHeaderOutput() ServiceConnectTestTrafficRulesHeaderOutput {
	return o
}

func (o ServiceConnectTestTrafficRulesHeaderOutput) ToServiceConnectTestTrafficRulesHeaderOutputWithContext(ctx context.Context) ServiceConnectTestTrafficRulesHeaderOutput {
	return o
}

func (o ServiceConnectTestTrafficRulesHeaderOutput) ToServiceConnectTestTrafficRulesHeaderPtrOutput() ServiceConnectTestTrafficRulesHeaderPtrOutput {
	return o.ToServiceConnectTestTrafficRulesHeaderPtrOutputWithContext(context.Background())
}

func (o ServiceConnectTestTrafficRulesHeaderOutput) ToServiceConnectTestTrafficRulesHeaderPtrOutputWithContext(ctx context.Context) ServiceConnectTestTrafficRulesHeaderPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceConnectTestTrafficRulesHeader) *ServiceConnectTestTrafficRulesHeader {
		return &v
	}).(ServiceConnectTestTrafficRulesHeaderPtrOutput)
}

func (o ServiceConnectTestTrafficRulesHeaderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceConnectTestTrafficRulesHeader) string { return v.Name }).(pulumi.StringOutput)
}

func (o ServiceConnectTestTrafficRulesHeaderOutput) Value() ServiceConnectTestTrafficRulesHeaderValuePtrOutput {
	return o.ApplyT(func(v ServiceConnectTestTrafficRulesHeader) *ServiceConnectTestTrafficRulesHeaderValue {
		return v.Value
	}).(ServiceConnectTestTrafficRulesHeaderValuePtrOutput)
}

type ServiceConnectTestTrafficRulesHeaderPtrOutput struct{ *pulumi.OutputState }

func (ServiceConnectTestTrafficRulesHeaderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceConnectTestTrafficRulesHeader)(nil)).Elem()
}

func (o ServiceConnectTestTrafficRulesHeaderPtrOutput) ToServiceConnectTestTrafficRulesHeaderPtrOutput() ServiceConnectTestTrafficRulesHeaderPtrOutput {
	return o
}

func (o ServiceConnectTestTrafficRulesHeaderPtrOutput) ToServiceConnectTestTrafficRulesHeaderPtrOutputWithContext(ctx context.Context) ServiceConnectTestTrafficRulesHeaderPtrOutput {
	return o
}

func (o ServiceConnectTestTrafficRulesHeaderPtrOutput) Elem() ServiceConnectTestTrafficRulesHeaderOutput {
	return o.ApplyT(func(v *ServiceConnectTestTrafficRulesHeader) ServiceConnectTestTrafficRulesHeader {
		if v != nil {
			return *v
		}
		var ret ServiceConnectTestTrafficRulesHeader
		return ret
	}).(ServiceConnectTestTrafficRulesHeaderOutput)
}

func (o ServiceConnectTestTrafficRulesHeaderPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceConnectTestTrafficRulesHeader) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

func (o ServiceConnectTestTrafficRulesHeaderPtrOutput) Value() ServiceConnectTestTrafficRulesHeaderValuePtrOutput {
	return o.ApplyT(func(v *ServiceConnectTestTrafficRulesHeader) *ServiceConnectTestTrafficRulesHeaderValue {
		if v == nil {
			return nil
		}
		return v.Value
	}).(ServiceConnectTestTrafficRulesHeaderValuePtrOutput)
}

type ServiceConnectTestTrafficRulesHeaderValue struct {
	Exact string `pulumi:"exact"`
}

// ServiceConnectTestTrafficRulesHeaderValueInput is an input type that accepts ServiceConnectTestTrafficRulesHeaderValueArgs and ServiceConnectTestTrafficRulesHeaderValueOutput values.
// You can construct a concrete instance of `ServiceConnectTestTrafficRulesHeaderValueInput` via:
//
//	ServiceConnectTestTrafficRulesHeaderValueArgs{...}
type ServiceConnectTestTrafficRulesHeaderValueInput interface {
	pulumi.Input

	ToServiceConnectTestTrafficRulesHeaderValueOutput() ServiceConnectTestTrafficRulesHeaderValueOutput
	ToServiceConnectTestTrafficRulesHeaderValueOutputWithContext(context.Context) ServiceConnectTestTrafficRulesHeaderValueOutput
}

type ServiceConnectTestTrafficRulesHeaderValueArgs struct {
	Exact pulumi.StringInput `pulumi:"exact"`
}

func (ServiceConnectTestTrafficRulesHeaderValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceConnectTestTrafficRulesHeaderValue)(nil)).Elem()
}

func (i ServiceConnectTestTrafficRulesHeaderValueArgs) ToServiceConnectTestTrafficRulesHeaderValueOutput() ServiceConnectTestTrafficRulesHeaderValueOutput {
	return i.ToServiceConnectTestTrafficRulesHeaderValueOutputWithContext(context.Background())
}

func (i ServiceConnectTestTrafficRulesHeaderValueArgs) ToServiceConnectTestTrafficRulesHeaderValueOutputWithContext(ctx context.Context) ServiceConnectTestTrafficRulesHeaderValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConnectTestTrafficRulesHeaderValueOutput)
}

func (i ServiceConnectTestTrafficRulesHeaderValueArgs) ToServiceConnectTestTrafficRulesHeaderValuePtrOutput() ServiceConnectTestTrafficRulesHeaderValuePtrOutput {
	return i.ToServiceConnectTestTrafficRulesHeaderValuePtrOutputWithContext(context.Background())
}

func (i ServiceConnectTestTrafficRulesHeaderValueArgs) ToServiceConnectTestTrafficRulesHeaderValuePtrOutputWithContext(ctx context.Context) ServiceConnectTestTrafficRulesHeaderValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConnectTestTrafficRulesHeaderValueOutput).ToServiceConnectTestTrafficRulesHeaderValuePtrOutputWithContext(ctx)
}

// ServiceConnectTestTrafficRulesHeaderValuePtrInput is an input type that accepts ServiceConnectTestTrafficRulesHeaderValueArgs, ServiceConnectTestTrafficRulesHeaderValuePtr and ServiceConnectTestTrafficRulesHeaderValuePtrOutput values.
// You can construct a concrete instance of `ServiceConnectTestTrafficRulesHeaderValuePtrInput` via:
//
//	        ServiceConnectTestTrafficRulesHeaderValueArgs{...}
//
//	or:
//
//	        nil
type ServiceConnectTestTrafficRulesHeaderValuePtrInput interface {
	pulumi.Input

	ToServiceConnectTestTrafficRulesHeaderValuePtrOutput() ServiceConnectTestTrafficRulesHeaderValuePtrOutput
	ToServiceConnectTestTrafficRulesHeaderValuePtrOutputWithContext(context.Context) ServiceConnectTestTrafficRulesHeaderValuePtrOutput
}

type serviceConnectTestTrafficRulesHeaderValuePtrType ServiceConnectTestTrafficRulesHeaderValueArgs

func ServiceConnectTestTrafficRulesHeaderValuePtr(v *ServiceConnectTestTrafficRulesHeaderValueArgs) ServiceConnectTestTrafficRulesHeaderValuePtrInput {
	return (*serviceConnectTestTrafficRulesHeaderValuePtrType)(v)
}

func (*serviceConnectTestTrafficRulesHeaderValuePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceConnectTestTrafficRulesHeaderValue)(nil)).Elem()
}

func (i *serviceConnectTestTrafficRulesHeaderValuePtrType) ToServiceConnectTestTrafficRulesHeaderValuePtrOutput() ServiceConnectTestTrafficRulesHeaderValuePtrOutput {
	return i.ToServiceConnectTestTrafficRulesHeaderValuePtrOutputWithContext(context.Background())
}

func (i *serviceConnectTestTrafficRulesHeaderValuePtrType) ToServiceConnectTestTrafficRulesHeaderValuePtrOutputWithContext(ctx context.Context) ServiceConnectTestTrafficRulesHeaderValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConnectTestTrafficRulesHeaderValuePtrOutput)
}

type ServiceConnectTestTrafficRulesHeaderValueOutput struct{ *pulumi.OutputState }

func (ServiceConnectTestTrafficRulesHeaderValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceConnectTestTrafficRulesHeaderValue)(nil)).Elem()
}

func (o ServiceConnectTestTrafficRulesHeaderValueOutput) ToServiceConnectTestTrafficRulesHeaderValueOutput() ServiceConnectTestTrafficRulesHeaderValueOutput {
	return o
}

func (o ServiceConnectTestTrafficRulesHeaderValueOutput) ToServiceConnectTestTrafficRulesHeaderValueOutputWithContext(ctx context.Context) ServiceConnectTestTrafficRulesHeaderValueOutput {
	return o
}

func (o ServiceConnectTestTrafficRulesHeaderValueOutput) ToServiceConnectTestTrafficRulesHeaderValuePtrOutput() ServiceConnectTestTrafficRulesHeaderValuePtrOutput {
	return o.ToServiceConnectTestTrafficRulesHeaderValuePtrOutputWithContext(context.Background())
}

func (o ServiceConnectTestTrafficRulesHeaderValueOutput) ToServiceConnectTestTrafficRulesHeaderValuePtrOutputWithContext(ctx context.Context) ServiceConnectTestTrafficRulesHeaderValuePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceConnectTestTrafficRulesHeaderValue) *ServiceConnectTestTrafficRulesHeaderValue {
		return &v
	}).(ServiceConnectTestTrafficRulesHeaderValuePtrOutput)
}

func (o ServiceConnectTestTrafficRulesHeaderValueOutput) Exact() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceConnectTestTrafficRulesHeaderValue) string { return v.Exact }).(pulumi.StringOutput)
}

type ServiceConnectTestTrafficRulesHeaderValuePtrOutput struct{ *pulumi.OutputState }

func (ServiceConnectTestTrafficRulesHeaderValuePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceConnectTestTrafficRulesHeaderValue)(nil)).Elem()
}

func (o ServiceConnectTestTrafficRulesHeaderValuePtrOutput) ToServiceConnectTestTrafficRulesHeaderValuePtrOutput() ServiceConnectTestTrafficRulesHeaderValuePtrOutput {
	return o
}

func (o ServiceConnectTestTrafficRulesHeaderValuePtrOutput) ToServiceConnectTestTrafficRulesHeaderValuePtrOutputWithContext(ctx context.Context) ServiceConnectTestTrafficRulesHeaderValuePtrOutput {
	return o
}

func (o ServiceConnectTestTrafficRulesHeaderValuePtrOutput) Elem() ServiceConnectTestTrafficRulesHeaderValueOutput {
	return o.ApplyT(func(v *ServiceConnectTestTrafficRulesHeaderValue) ServiceConnectTestTrafficRulesHeaderValue {
		if v != nil {
			return *v
		}
		var ret ServiceConnectTestTrafficRulesHeaderValue
		return ret
	}).(ServiceConnectTestTrafficRulesHeaderValueOutput)
}

func (o ServiceConnectTestTrafficRulesHeaderValuePtrOutput) Exact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceConnectTestTrafficRulesHeaderValue) *string {
		if v == nil {
			return nil
		}
		return &v.Exact
	}).(pulumi.StringPtrOutput)
}

// The certificate root authority that secures your service.
type ServiceConnectTlsCertificateAuthority struct {
	// The ARN of the AWS Private Certificate Authority certificate.
	AwsPcaAuthorityArn *string `pulumi:"awsPcaAuthorityArn"`
}

// ServiceConnectTlsCertificateAuthorityInput is an input type that accepts ServiceConnectTlsCertificateAuthorityArgs and ServiceConnectTlsCertificateAuthorityOutput values.
// You can construct a concrete instance of `ServiceConnectTlsCertificateAuthorityInput` via:
//
//	ServiceConnectTlsCertificateAuthorityArgs{...}
type ServiceConnectTlsCertificateAuthorityInput interface {
	pulumi.Input

	ToServiceConnectTlsCertificateAuthorityOutput() ServiceConnectTlsCertificateAuthorityOutput
	ToServiceConnectTlsCertificateAuthorityOutputWithContext(context.Context) ServiceConnectTlsCertificateAuthorityOutput
}

// The certificate root authority that secures your service.
type ServiceConnectTlsCertificateAuthorityArgs struct {
	// The ARN of the AWS Private Certificate Authority certificate.
	AwsPcaAuthorityArn pulumi.StringPtrInput `pulumi:"awsPcaAuthorityArn"`
}

func (ServiceConnectTlsCertificateAuthorityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceConnectTlsCertificateAuthority)(nil)).Elem()
}

func (i ServiceConnectTlsCertificateAuthorityArgs) ToServiceConnectTlsCertificateAuthorityOutput() ServiceConnectTlsCertificateAuthorityOutput {
	return i.ToServiceConnectTlsCertificateAuthorityOutputWithContext(context.Background())
}

func (i ServiceConnectTlsCertificateAuthorityArgs) ToServiceConnectTlsCertificateAuthorityOutputWithContext(ctx context.Context) ServiceConnectTlsCertificateAuthorityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConnectTlsCertificateAuthorityOutput)
}

func (i ServiceConnectTlsCertificateAuthorityArgs) ToServiceConnectTlsCertificateAuthorityPtrOutput() ServiceConnectTlsCertificateAuthorityPtrOutput {
	return i.ToServiceConnectTlsCertificateAuthorityPtrOutputWithContext(context.Background())
}

func (i ServiceConnectTlsCertificateAuthorityArgs) ToServiceConnectTlsCertificateAuthorityPtrOutputWithContext(ctx context.Context) ServiceConnectTlsCertificateAuthorityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConnectTlsCertificateAuthorityOutput).ToServiceConnectTlsCertificateAuthorityPtrOutputWithContext(ctx)
}

// ServiceConnectTlsCertificateAuthorityPtrInput is an input type that accepts ServiceConnectTlsCertificateAuthorityArgs, ServiceConnectTlsCertificateAuthorityPtr and ServiceConnectTlsCertificateAuthorityPtrOutput values.
// You can construct a concrete instance of `ServiceConnectTlsCertificateAuthorityPtrInput` via:
//
//	        ServiceConnectTlsCertificateAuthorityArgs{...}
//
//	or:
//
//	        nil
type ServiceConnectTlsCertificateAuthorityPtrInput interface {
	pulumi.Input

	ToServiceConnectTlsCertificateAuthorityPtrOutput() ServiceConnectTlsCertificateAuthorityPtrOutput
	ToServiceConnectTlsCertificateAuthorityPtrOutputWithContext(context.Context) ServiceConnectTlsCertificateAuthorityPtrOutput
}

type serviceConnectTlsCertificateAuthorityPtrType ServiceConnectTlsCertificateAuthorityArgs

func ServiceConnectTlsCertificateAuthorityPtr(v *ServiceConnectTlsCertificateAuthorityArgs) ServiceConnectTlsCertificateAuthorityPtrInput {
	return (*serviceConnectTlsCertificateAuthorityPtrType)(v)
}

func (*serviceConnectTlsCertificateAuthorityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceConnectTlsCertificateAuthority)(nil)).Elem()
}

func (i *serviceConnectTlsCertificateAuthorityPtrType) ToServiceConnectTlsCertificateAuthorityPtrOutput() ServiceConnectTlsCertificateAuthorityPtrOutput {
	return i.ToServiceConnectTlsCertificateAuthorityPtrOutputWithContext(context.Background())
}

func (i *serviceConnectTlsCertificateAuthorityPtrType) ToServiceConnectTlsCertificateAuthorityPtrOutputWithContext(ctx context.Context) ServiceConnectTlsCertificateAuthorityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConnectTlsCertificateAuthorityPtrOutput)
}

// The certificate root authority that secures your service.
type ServiceConnectTlsCertificateAuthorityOutput struct{ *pulumi.OutputState }

func (ServiceConnectTlsCertificateAuthorityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceConnectTlsCertificateAuthority)(nil)).Elem()
}

func (o ServiceConnectTlsCertificateAuthorityOutput) ToServiceConnectTlsCertificateAuthorityOutput() ServiceConnectTlsCertificateAuthorityOutput {
	return o
}

func (o ServiceConnectTlsCertificateAuthorityOutput) ToServiceConnectTlsCertificateAuthorityOutputWithContext(ctx context.Context) ServiceConnectTlsCertificateAuthorityOutput {
	return o
}

func (o ServiceConnectTlsCertificateAuthorityOutput) ToServiceConnectTlsCertificateAuthorityPtrOutput() ServiceConnectTlsCertificateAuthorityPtrOutput {
	return o.ToServiceConnectTlsCertificateAuthorityPtrOutputWithContext(context.Background())
}

func (o ServiceConnectTlsCertificateAuthorityOutput) ToServiceConnectTlsCertificateAuthorityPtrOutputWithContext(ctx context.Context) ServiceConnectTlsCertificateAuthorityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceConnectTlsCertificateAuthority) *ServiceConnectTlsCertificateAuthority {
		return &v
	}).(ServiceConnectTlsCertificateAuthorityPtrOutput)
}

// The ARN of the AWS Private Certificate Authority certificate.
func (o ServiceConnectTlsCertificateAuthorityOutput) AwsPcaAuthorityArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceConnectTlsCertificateAuthority) *string { return v.AwsPcaAuthorityArn }).(pulumi.StringPtrOutput)
}

type ServiceConnectTlsCertificateAuthorityPtrOutput struct{ *pulumi.OutputState }

func (ServiceConnectTlsCertificateAuthorityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceConnectTlsCertificateAuthority)(nil)).Elem()
}

func (o ServiceConnectTlsCertificateAuthorityPtrOutput) ToServiceConnectTlsCertificateAuthorityPtrOutput() ServiceConnectTlsCertificateAuthorityPtrOutput {
	return o
}

func (o ServiceConnectTlsCertificateAuthorityPtrOutput) ToServiceConnectTlsCertificateAuthorityPtrOutputWithContext(ctx context.Context) ServiceConnectTlsCertificateAuthorityPtrOutput {
	return o
}

func (o ServiceConnectTlsCertificateAuthorityPtrOutput) Elem() ServiceConnectTlsCertificateAuthorityOutput {
	return o.ApplyT(func(v *ServiceConnectTlsCertificateAuthority) ServiceConnectTlsCertificateAuthority {
		if v != nil {
			return *v
		}
		var ret ServiceConnectTlsCertificateAuthority
		return ret
	}).(ServiceConnectTlsCertificateAuthorityOutput)
}

// The ARN of the AWS Private Certificate Authority certificate.
func (o ServiceConnectTlsCertificateAuthorityPtrOutput) AwsPcaAuthorityArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceConnectTlsCertificateAuthority) *string {
		if v == nil {
			return nil
		}
		return v.AwsPcaAuthorityArn
	}).(pulumi.StringPtrOutput)
}

// The key that encrypts and decrypts your resources for Service Connect TLS.
type ServiceConnectTlsConfiguration struct {
	// The signer certificate authority.
	IssuerCertificateAuthority ServiceConnectTlsCertificateAuthority `pulumi:"issuerCertificateAuthority"`
	// The AWS Key Management Service key.
	KmsKey *string `pulumi:"kmsKey"`
	// The Amazon Resource Name (ARN) of the IAM role that's associated with the Service Connect TLS.
	RoleArn *string `pulumi:"roleArn"`
}

// ServiceConnectTlsConfigurationInput is an input type that accepts ServiceConnectTlsConfigurationArgs and ServiceConnectTlsConfigurationOutput values.
// You can construct a concrete instance of `ServiceConnectTlsConfigurationInput` via:
//
//	ServiceConnectTlsConfigurationArgs{...}
type ServiceConnectTlsConfigurationInput interface {
	pulumi.Input

	ToServiceConnectTlsConfigurationOutput() ServiceConnectTlsConfigurationOutput
	ToServiceConnectTlsConfigurationOutputWithContext(context.Context) ServiceConnectTlsConfigurationOutput
}

// The key that encrypts and decrypts your resources for Service Connect TLS.
type ServiceConnectTlsConfigurationArgs struct {
	// The signer certificate authority.
	IssuerCertificateAuthority ServiceConnectTlsCertificateAuthorityInput `pulumi:"issuerCertificateAuthority"`
	// The AWS Key Management Service key.
	KmsKey pulumi.StringPtrInput `pulumi:"kmsKey"`
	// The Amazon Resource Name (ARN) of the IAM role that's associated with the Service Connect TLS.
	RoleArn pulumi.StringPtrInput `pulumi:"roleArn"`
}

func (ServiceConnectTlsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceConnectTlsConfiguration)(nil)).Elem()
}

func (i ServiceConnectTlsConfigurationArgs) ToServiceConnectTlsConfigurationOutput() ServiceConnectTlsConfigurationOutput {
	return i.ToServiceConnectTlsConfigurationOutputWithContext(context.Background())
}

func (i ServiceConnectTlsConfigurationArgs) ToServiceConnectTlsConfigurationOutputWithContext(ctx context.Context) ServiceConnectTlsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConnectTlsConfigurationOutput)
}

func (i ServiceConnectTlsConfigurationArgs) ToServiceConnectTlsConfigurationPtrOutput() ServiceConnectTlsConfigurationPtrOutput {
	return i.ToServiceConnectTlsConfigurationPtrOutputWithContext(context.Background())
}

func (i ServiceConnectTlsConfigurationArgs) ToServiceConnectTlsConfigurationPtrOutputWithContext(ctx context.Context) ServiceConnectTlsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConnectTlsConfigurationOutput).ToServiceConnectTlsConfigurationPtrOutputWithContext(ctx)
}

// ServiceConnectTlsConfigurationPtrInput is an input type that accepts ServiceConnectTlsConfigurationArgs, ServiceConnectTlsConfigurationPtr and ServiceConnectTlsConfigurationPtrOutput values.
// You can construct a concrete instance of `ServiceConnectTlsConfigurationPtrInput` via:
//
//	        ServiceConnectTlsConfigurationArgs{...}
//
//	or:
//
//	        nil
type ServiceConnectTlsConfigurationPtrInput interface {
	pulumi.Input

	ToServiceConnectTlsConfigurationPtrOutput() ServiceConnectTlsConfigurationPtrOutput
	ToServiceConnectTlsConfigurationPtrOutputWithContext(context.Context) ServiceConnectTlsConfigurationPtrOutput
}

type serviceConnectTlsConfigurationPtrType ServiceConnectTlsConfigurationArgs

func ServiceConnectTlsConfigurationPtr(v *ServiceConnectTlsConfigurationArgs) ServiceConnectTlsConfigurationPtrInput {
	return (*serviceConnectTlsConfigurationPtrType)(v)
}

func (*serviceConnectTlsConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceConnectTlsConfiguration)(nil)).Elem()
}

func (i *serviceConnectTlsConfigurationPtrType) ToServiceConnectTlsConfigurationPtrOutput() ServiceConnectTlsConfigurationPtrOutput {
	return i.ToServiceConnectTlsConfigurationPtrOutputWithContext(context.Background())
}

func (i *serviceConnectTlsConfigurationPtrType) ToServiceConnectTlsConfigurationPtrOutputWithContext(ctx context.Context) ServiceConnectTlsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConnectTlsConfigurationPtrOutput)
}

// The key that encrypts and decrypts your resources for Service Connect TLS.
type ServiceConnectTlsConfigurationOutput struct{ *pulumi.OutputState }

func (ServiceConnectTlsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceConnectTlsConfiguration)(nil)).Elem()
}

func (o ServiceConnectTlsConfigurationOutput) ToServiceConnectTlsConfigurationOutput() ServiceConnectTlsConfigurationOutput {
	return o
}

func (o ServiceConnectTlsConfigurationOutput) ToServiceConnectTlsConfigurationOutputWithContext(ctx context.Context) ServiceConnectTlsConfigurationOutput {
	return o
}

func (o ServiceConnectTlsConfigurationOutput) ToServiceConnectTlsConfigurationPtrOutput() ServiceConnectTlsConfigurationPtrOutput {
	return o.ToServiceConnectTlsConfigurationPtrOutputWithContext(context.Background())
}

func (o ServiceConnectTlsConfigurationOutput) ToServiceConnectTlsConfigurationPtrOutputWithContext(ctx context.Context) ServiceConnectTlsConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceConnectTlsConfiguration) *ServiceConnectTlsConfiguration {
		return &v
	}).(ServiceConnectTlsConfigurationPtrOutput)
}

// The signer certificate authority.
func (o ServiceConnectTlsConfigurationOutput) IssuerCertificateAuthority() ServiceConnectTlsCertificateAuthorityOutput {
	return o.ApplyT(func(v ServiceConnectTlsConfiguration) ServiceConnectTlsCertificateAuthority {
		return v.IssuerCertificateAuthority
	}).(ServiceConnectTlsCertificateAuthorityOutput)
}

// The AWS Key Management Service key.
func (o ServiceConnectTlsConfigurationOutput) KmsKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceConnectTlsConfiguration) *string { return v.KmsKey }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of the IAM role that's associated with the Service Connect TLS.
func (o ServiceConnectTlsConfigurationOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceConnectTlsConfiguration) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

type ServiceConnectTlsConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ServiceConnectTlsConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceConnectTlsConfiguration)(nil)).Elem()
}

func (o ServiceConnectTlsConfigurationPtrOutput) ToServiceConnectTlsConfigurationPtrOutput() ServiceConnectTlsConfigurationPtrOutput {
	return o
}

func (o ServiceConnectTlsConfigurationPtrOutput) ToServiceConnectTlsConfigurationPtrOutputWithContext(ctx context.Context) ServiceConnectTlsConfigurationPtrOutput {
	return o
}

func (o ServiceConnectTlsConfigurationPtrOutput) Elem() ServiceConnectTlsConfigurationOutput {
	return o.ApplyT(func(v *ServiceConnectTlsConfiguration) ServiceConnectTlsConfiguration {
		if v != nil {
			return *v
		}
		var ret ServiceConnectTlsConfiguration
		return ret
	}).(ServiceConnectTlsConfigurationOutput)
}

// The signer certificate authority.
func (o ServiceConnectTlsConfigurationPtrOutput) IssuerCertificateAuthority() ServiceConnectTlsCertificateAuthorityPtrOutput {
	return o.ApplyT(func(v *ServiceConnectTlsConfiguration) *ServiceConnectTlsCertificateAuthority {
		if v == nil {
			return nil
		}
		return &v.IssuerCertificateAuthority
	}).(ServiceConnectTlsCertificateAuthorityPtrOutput)
}

// The AWS Key Management Service key.
func (o ServiceConnectTlsConfigurationPtrOutput) KmsKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceConnectTlsConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.KmsKey
	}).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of the IAM role that's associated with the Service Connect TLS.
func (o ServiceConnectTlsConfigurationPtrOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceConnectTlsConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.RoleArn
	}).(pulumi.StringPtrOutput)
}

// One of the methods which provide a way for you to quickly identify when a deployment has failed, and then to optionally roll back the failure to the last working deployment.
//
//	When the alarms are generated, Amazon ECS sets the service deployment to failed. Set the rollback parameter to have Amazon ECS to roll back your service to the last completed deployment after a failure.
//	You can only use the ``DeploymentAlarms`` method to detect failures when the ``DeploymentController`` is set to ``ECS``.
//	For more information, see [Rolling update](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-ecs.html) in the *Amazon Elastic Container Service Developer Guide*.
type ServiceDeploymentAlarms struct {
	// One or more CloudWatch alarm names. Use a "," to separate the alarms.
	AlarmNames []string `pulumi:"alarmNames"`
	// Determines whether to use the CloudWatch alarm option in the service deployment process.
	Enable bool `pulumi:"enable"`
	// Determines whether to configure Amazon ECS to roll back the service if a service deployment fails. If rollback is used, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.
	Rollback bool `pulumi:"rollback"`
}

// ServiceDeploymentAlarmsInput is an input type that accepts ServiceDeploymentAlarmsArgs and ServiceDeploymentAlarmsOutput values.
// You can construct a concrete instance of `ServiceDeploymentAlarmsInput` via:
//
//	ServiceDeploymentAlarmsArgs{...}
type ServiceDeploymentAlarmsInput interface {
	pulumi.Input

	ToServiceDeploymentAlarmsOutput() ServiceDeploymentAlarmsOutput
	ToServiceDeploymentAlarmsOutputWithContext(context.Context) ServiceDeploymentAlarmsOutput
}

// One of the methods which provide a way for you to quickly identify when a deployment has failed, and then to optionally roll back the failure to the last working deployment.
//
//	When the alarms are generated, Amazon ECS sets the service deployment to failed. Set the rollback parameter to have Amazon ECS to roll back your service to the last completed deployment after a failure.
//	You can only use the ``DeploymentAlarms`` method to detect failures when the ``DeploymentController`` is set to ``ECS``.
//	For more information, see [Rolling update](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-ecs.html) in the *Amazon Elastic Container Service Developer Guide*.
type ServiceDeploymentAlarmsArgs struct {
	// One or more CloudWatch alarm names. Use a "," to separate the alarms.
	AlarmNames pulumi.StringArrayInput `pulumi:"alarmNames"`
	// Determines whether to use the CloudWatch alarm option in the service deployment process.
	Enable pulumi.BoolInput `pulumi:"enable"`
	// Determines whether to configure Amazon ECS to roll back the service if a service deployment fails. If rollback is used, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.
	Rollback pulumi.BoolInput `pulumi:"rollback"`
}

func (ServiceDeploymentAlarmsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDeploymentAlarms)(nil)).Elem()
}

func (i ServiceDeploymentAlarmsArgs) ToServiceDeploymentAlarmsOutput() ServiceDeploymentAlarmsOutput {
	return i.ToServiceDeploymentAlarmsOutputWithContext(context.Background())
}

func (i ServiceDeploymentAlarmsArgs) ToServiceDeploymentAlarmsOutputWithContext(ctx context.Context) ServiceDeploymentAlarmsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDeploymentAlarmsOutput)
}

func (i ServiceDeploymentAlarmsArgs) ToServiceDeploymentAlarmsPtrOutput() ServiceDeploymentAlarmsPtrOutput {
	return i.ToServiceDeploymentAlarmsPtrOutputWithContext(context.Background())
}

func (i ServiceDeploymentAlarmsArgs) ToServiceDeploymentAlarmsPtrOutputWithContext(ctx context.Context) ServiceDeploymentAlarmsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDeploymentAlarmsOutput).ToServiceDeploymentAlarmsPtrOutputWithContext(ctx)
}

// ServiceDeploymentAlarmsPtrInput is an input type that accepts ServiceDeploymentAlarmsArgs, ServiceDeploymentAlarmsPtr and ServiceDeploymentAlarmsPtrOutput values.
// You can construct a concrete instance of `ServiceDeploymentAlarmsPtrInput` via:
//
//	        ServiceDeploymentAlarmsArgs{...}
//
//	or:
//
//	        nil
type ServiceDeploymentAlarmsPtrInput interface {
	pulumi.Input

	ToServiceDeploymentAlarmsPtrOutput() ServiceDeploymentAlarmsPtrOutput
	ToServiceDeploymentAlarmsPtrOutputWithContext(context.Context) ServiceDeploymentAlarmsPtrOutput
}

type serviceDeploymentAlarmsPtrType ServiceDeploymentAlarmsArgs

func ServiceDeploymentAlarmsPtr(v *ServiceDeploymentAlarmsArgs) ServiceDeploymentAlarmsPtrInput {
	return (*serviceDeploymentAlarmsPtrType)(v)
}

func (*serviceDeploymentAlarmsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceDeploymentAlarms)(nil)).Elem()
}

func (i *serviceDeploymentAlarmsPtrType) ToServiceDeploymentAlarmsPtrOutput() ServiceDeploymentAlarmsPtrOutput {
	return i.ToServiceDeploymentAlarmsPtrOutputWithContext(context.Background())
}

func (i *serviceDeploymentAlarmsPtrType) ToServiceDeploymentAlarmsPtrOutputWithContext(ctx context.Context) ServiceDeploymentAlarmsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDeploymentAlarmsPtrOutput)
}

// One of the methods which provide a way for you to quickly identify when a deployment has failed, and then to optionally roll back the failure to the last working deployment.
//
//	When the alarms are generated, Amazon ECS sets the service deployment to failed. Set the rollback parameter to have Amazon ECS to roll back your service to the last completed deployment after a failure.
//	You can only use the ``DeploymentAlarms`` method to detect failures when the ``DeploymentController`` is set to ``ECS``.
//	For more information, see [Rolling update](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-ecs.html) in the *Amazon Elastic Container Service Developer Guide*.
type ServiceDeploymentAlarmsOutput struct{ *pulumi.OutputState }

func (ServiceDeploymentAlarmsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDeploymentAlarms)(nil)).Elem()
}

func (o ServiceDeploymentAlarmsOutput) ToServiceDeploymentAlarmsOutput() ServiceDeploymentAlarmsOutput {
	return o
}

func (o ServiceDeploymentAlarmsOutput) ToServiceDeploymentAlarmsOutputWithContext(ctx context.Context) ServiceDeploymentAlarmsOutput {
	return o
}

func (o ServiceDeploymentAlarmsOutput) ToServiceDeploymentAlarmsPtrOutput() ServiceDeploymentAlarmsPtrOutput {
	return o.ToServiceDeploymentAlarmsPtrOutputWithContext(context.Background())
}

func (o ServiceDeploymentAlarmsOutput) ToServiceDeploymentAlarmsPtrOutputWithContext(ctx context.Context) ServiceDeploymentAlarmsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceDeploymentAlarms) *ServiceDeploymentAlarms {
		return &v
	}).(ServiceDeploymentAlarmsPtrOutput)
}

// One or more CloudWatch alarm names. Use a "," to separate the alarms.
func (o ServiceDeploymentAlarmsOutput) AlarmNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceDeploymentAlarms) []string { return v.AlarmNames }).(pulumi.StringArrayOutput)
}

// Determines whether to use the CloudWatch alarm option in the service deployment process.
func (o ServiceDeploymentAlarmsOutput) Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v ServiceDeploymentAlarms) bool { return v.Enable }).(pulumi.BoolOutput)
}

// Determines whether to configure Amazon ECS to roll back the service if a service deployment fails. If rollback is used, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.
func (o ServiceDeploymentAlarmsOutput) Rollback() pulumi.BoolOutput {
	return o.ApplyT(func(v ServiceDeploymentAlarms) bool { return v.Rollback }).(pulumi.BoolOutput)
}

type ServiceDeploymentAlarmsPtrOutput struct{ *pulumi.OutputState }

func (ServiceDeploymentAlarmsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceDeploymentAlarms)(nil)).Elem()
}

func (o ServiceDeploymentAlarmsPtrOutput) ToServiceDeploymentAlarmsPtrOutput() ServiceDeploymentAlarmsPtrOutput {
	return o
}

func (o ServiceDeploymentAlarmsPtrOutput) ToServiceDeploymentAlarmsPtrOutputWithContext(ctx context.Context) ServiceDeploymentAlarmsPtrOutput {
	return o
}

func (o ServiceDeploymentAlarmsPtrOutput) Elem() ServiceDeploymentAlarmsOutput {
	return o.ApplyT(func(v *ServiceDeploymentAlarms) ServiceDeploymentAlarms {
		if v != nil {
			return *v
		}
		var ret ServiceDeploymentAlarms
		return ret
	}).(ServiceDeploymentAlarmsOutput)
}

// One or more CloudWatch alarm names. Use a "," to separate the alarms.
func (o ServiceDeploymentAlarmsPtrOutput) AlarmNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceDeploymentAlarms) []string {
		if v == nil {
			return nil
		}
		return v.AlarmNames
	}).(pulumi.StringArrayOutput)
}

// Determines whether to use the CloudWatch alarm option in the service deployment process.
func (o ServiceDeploymentAlarmsPtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceDeploymentAlarms) *bool {
		if v == nil {
			return nil
		}
		return &v.Enable
	}).(pulumi.BoolPtrOutput)
}

// Determines whether to configure Amazon ECS to roll back the service if a service deployment fails. If rollback is used, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.
func (o ServiceDeploymentAlarmsPtrOutput) Rollback() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceDeploymentAlarms) *bool {
		if v == nil {
			return nil
		}
		return &v.Rollback
	}).(pulumi.BoolPtrOutput)
}

// The deployment circuit breaker can only be used for services using the rolling update (“ECS“) deployment type.
//
//	 The *deployment circuit breaker* determines whether a service deployment will fail if the service can't reach a steady state. If it is turned on, a service deployment will transition to a failed state and stop launching new tasks. You can also configure Amazon ECS to roll back your service to the last completed deployment after a failure. For more information, see [Rolling update](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-ecs.html) in the *Amazon Elastic Container Service Developer Guide*.
//	For more information about API failure reasons, see [API failure reasons](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/api_failures_messages.html) in the *Amazon Elastic Container Service Developer Guide*.
type ServiceDeploymentCircuitBreaker struct {
	// Determines whether to use the deployment circuit breaker logic for the service.
	Enable bool `pulumi:"enable"`
	// Determines whether to configure Amazon ECS to roll back the service if a service deployment fails. If rollback is on, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.
	Rollback bool `pulumi:"rollback"`
}

// ServiceDeploymentCircuitBreakerInput is an input type that accepts ServiceDeploymentCircuitBreakerArgs and ServiceDeploymentCircuitBreakerOutput values.
// You can construct a concrete instance of `ServiceDeploymentCircuitBreakerInput` via:
//
//	ServiceDeploymentCircuitBreakerArgs{...}
type ServiceDeploymentCircuitBreakerInput interface {
	pulumi.Input

	ToServiceDeploymentCircuitBreakerOutput() ServiceDeploymentCircuitBreakerOutput
	ToServiceDeploymentCircuitBreakerOutputWithContext(context.Context) ServiceDeploymentCircuitBreakerOutput
}

// The deployment circuit breaker can only be used for services using the rolling update (“ECS“) deployment type.
//
//	 The *deployment circuit breaker* determines whether a service deployment will fail if the service can't reach a steady state. If it is turned on, a service deployment will transition to a failed state and stop launching new tasks. You can also configure Amazon ECS to roll back your service to the last completed deployment after a failure. For more information, see [Rolling update](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-ecs.html) in the *Amazon Elastic Container Service Developer Guide*.
//	For more information about API failure reasons, see [API failure reasons](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/api_failures_messages.html) in the *Amazon Elastic Container Service Developer Guide*.
type ServiceDeploymentCircuitBreakerArgs struct {
	// Determines whether to use the deployment circuit breaker logic for the service.
	Enable pulumi.BoolInput `pulumi:"enable"`
	// Determines whether to configure Amazon ECS to roll back the service if a service deployment fails. If rollback is on, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.
	Rollback pulumi.BoolInput `pulumi:"rollback"`
}

func (ServiceDeploymentCircuitBreakerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDeploymentCircuitBreaker)(nil)).Elem()
}

func (i ServiceDeploymentCircuitBreakerArgs) ToServiceDeploymentCircuitBreakerOutput() ServiceDeploymentCircuitBreakerOutput {
	return i.ToServiceDeploymentCircuitBreakerOutputWithContext(context.Background())
}

func (i ServiceDeploymentCircuitBreakerArgs) ToServiceDeploymentCircuitBreakerOutputWithContext(ctx context.Context) ServiceDeploymentCircuitBreakerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDeploymentCircuitBreakerOutput)
}

func (i ServiceDeploymentCircuitBreakerArgs) ToServiceDeploymentCircuitBreakerPtrOutput() ServiceDeploymentCircuitBreakerPtrOutput {
	return i.ToServiceDeploymentCircuitBreakerPtrOutputWithContext(context.Background())
}

func (i ServiceDeploymentCircuitBreakerArgs) ToServiceDeploymentCircuitBreakerPtrOutputWithContext(ctx context.Context) ServiceDeploymentCircuitBreakerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDeploymentCircuitBreakerOutput).ToServiceDeploymentCircuitBreakerPtrOutputWithContext(ctx)
}

// ServiceDeploymentCircuitBreakerPtrInput is an input type that accepts ServiceDeploymentCircuitBreakerArgs, ServiceDeploymentCircuitBreakerPtr and ServiceDeploymentCircuitBreakerPtrOutput values.
// You can construct a concrete instance of `ServiceDeploymentCircuitBreakerPtrInput` via:
//
//	        ServiceDeploymentCircuitBreakerArgs{...}
//
//	or:
//
//	        nil
type ServiceDeploymentCircuitBreakerPtrInput interface {
	pulumi.Input

	ToServiceDeploymentCircuitBreakerPtrOutput() ServiceDeploymentCircuitBreakerPtrOutput
	ToServiceDeploymentCircuitBreakerPtrOutputWithContext(context.Context) ServiceDeploymentCircuitBreakerPtrOutput
}

type serviceDeploymentCircuitBreakerPtrType ServiceDeploymentCircuitBreakerArgs

func ServiceDeploymentCircuitBreakerPtr(v *ServiceDeploymentCircuitBreakerArgs) ServiceDeploymentCircuitBreakerPtrInput {
	return (*serviceDeploymentCircuitBreakerPtrType)(v)
}

func (*serviceDeploymentCircuitBreakerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceDeploymentCircuitBreaker)(nil)).Elem()
}

func (i *serviceDeploymentCircuitBreakerPtrType) ToServiceDeploymentCircuitBreakerPtrOutput() ServiceDeploymentCircuitBreakerPtrOutput {
	return i.ToServiceDeploymentCircuitBreakerPtrOutputWithContext(context.Background())
}

func (i *serviceDeploymentCircuitBreakerPtrType) ToServiceDeploymentCircuitBreakerPtrOutputWithContext(ctx context.Context) ServiceDeploymentCircuitBreakerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDeploymentCircuitBreakerPtrOutput)
}

// The deployment circuit breaker can only be used for services using the rolling update (“ECS“) deployment type.
//
//	 The *deployment circuit breaker* determines whether a service deployment will fail if the service can't reach a steady state. If it is turned on, a service deployment will transition to a failed state and stop launching new tasks. You can also configure Amazon ECS to roll back your service to the last completed deployment after a failure. For more information, see [Rolling update](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-ecs.html) in the *Amazon Elastic Container Service Developer Guide*.
//	For more information about API failure reasons, see [API failure reasons](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/api_failures_messages.html) in the *Amazon Elastic Container Service Developer Guide*.
type ServiceDeploymentCircuitBreakerOutput struct{ *pulumi.OutputState }

func (ServiceDeploymentCircuitBreakerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDeploymentCircuitBreaker)(nil)).Elem()
}

func (o ServiceDeploymentCircuitBreakerOutput) ToServiceDeploymentCircuitBreakerOutput() ServiceDeploymentCircuitBreakerOutput {
	return o
}

func (o ServiceDeploymentCircuitBreakerOutput) ToServiceDeploymentCircuitBreakerOutputWithContext(ctx context.Context) ServiceDeploymentCircuitBreakerOutput {
	return o
}

func (o ServiceDeploymentCircuitBreakerOutput) ToServiceDeploymentCircuitBreakerPtrOutput() ServiceDeploymentCircuitBreakerPtrOutput {
	return o.ToServiceDeploymentCircuitBreakerPtrOutputWithContext(context.Background())
}

func (o ServiceDeploymentCircuitBreakerOutput) ToServiceDeploymentCircuitBreakerPtrOutputWithContext(ctx context.Context) ServiceDeploymentCircuitBreakerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceDeploymentCircuitBreaker) *ServiceDeploymentCircuitBreaker {
		return &v
	}).(ServiceDeploymentCircuitBreakerPtrOutput)
}

// Determines whether to use the deployment circuit breaker logic for the service.
func (o ServiceDeploymentCircuitBreakerOutput) Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v ServiceDeploymentCircuitBreaker) bool { return v.Enable }).(pulumi.BoolOutput)
}

// Determines whether to configure Amazon ECS to roll back the service if a service deployment fails. If rollback is on, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.
func (o ServiceDeploymentCircuitBreakerOutput) Rollback() pulumi.BoolOutput {
	return o.ApplyT(func(v ServiceDeploymentCircuitBreaker) bool { return v.Rollback }).(pulumi.BoolOutput)
}

type ServiceDeploymentCircuitBreakerPtrOutput struct{ *pulumi.OutputState }

func (ServiceDeploymentCircuitBreakerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceDeploymentCircuitBreaker)(nil)).Elem()
}

func (o ServiceDeploymentCircuitBreakerPtrOutput) ToServiceDeploymentCircuitBreakerPtrOutput() ServiceDeploymentCircuitBreakerPtrOutput {
	return o
}

func (o ServiceDeploymentCircuitBreakerPtrOutput) ToServiceDeploymentCircuitBreakerPtrOutputWithContext(ctx context.Context) ServiceDeploymentCircuitBreakerPtrOutput {
	return o
}

func (o ServiceDeploymentCircuitBreakerPtrOutput) Elem() ServiceDeploymentCircuitBreakerOutput {
	return o.ApplyT(func(v *ServiceDeploymentCircuitBreaker) ServiceDeploymentCircuitBreaker {
		if v != nil {
			return *v
		}
		var ret ServiceDeploymentCircuitBreaker
		return ret
	}).(ServiceDeploymentCircuitBreakerOutput)
}

// Determines whether to use the deployment circuit breaker logic for the service.
func (o ServiceDeploymentCircuitBreakerPtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceDeploymentCircuitBreaker) *bool {
		if v == nil {
			return nil
		}
		return &v.Enable
	}).(pulumi.BoolPtrOutput)
}

// Determines whether to configure Amazon ECS to roll back the service if a service deployment fails. If rollback is on, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.
func (o ServiceDeploymentCircuitBreakerPtrOutput) Rollback() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceDeploymentCircuitBreaker) *bool {
		if v == nil {
			return nil
		}
		return &v.Rollback
	}).(pulumi.BoolPtrOutput)
}

// Optional deployment parameters that control how many tasks run during a deployment and the ordering of stopping and starting tasks.
type ServiceDeploymentConfiguration struct {
	// Information about the CloudWatch alarms.
	Alarms *ServiceDeploymentAlarms `pulumi:"alarms"`
	// The duration when both blue and green service revisions are running simultaneously after the production traffic has shifted.
	//  The following rules apply when you don't specify a value:
	//   +  For rolling deployments, the value is set to 3 hours (180 minutes).
	//   +  When you use an external deployment controller (``EXTERNAL``), or the ACD blue/green deployment controller (``CODE_DEPLOY``), the value is set to 3 hours (180 minutes).
	//   +  For all other cases, the value is set to 36 hours (2160 minutes).
	BakeTimeInMinutes *int `pulumi:"bakeTimeInMinutes"`
	// The deployment circuit breaker can only be used for services using the rolling update (``ECS``) deployment type.
	//   The *deployment circuit breaker* determines whether a service deployment will fail if the service can't reach a steady state. If you use the deployment circuit breaker, a service deployment will transition to a failed state and stop launching new tasks. If you use the rollback option, when a service deployment fails, the service is rolled back to the last deployment that completed successfully. For more information, see [Rolling update](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-ecs.html) in the *Amazon Elastic Container Service Developer Guide*
	DeploymentCircuitBreaker *ServiceDeploymentCircuitBreaker `pulumi:"deploymentCircuitBreaker"`
	// An array of deployment lifecycle hook objects to run custom logic at specific stages of the deployment lifecycle.
	LifecycleHooks []ServiceDeploymentLifecycleHook `pulumi:"lifecycleHooks"`
	// If a service is using the rolling update (``ECS``) deployment type, the ``maximumPercent`` parameter represents an upper limit on the number of your service's tasks that are allowed in the ``RUNNING`` or ``PENDING`` state during a deployment, as a percentage of the ``desiredCount`` (rounded down to the nearest integer). This parameter enables you to define the deployment batch size. For example, if your service is using the ``REPLICA`` service scheduler and has a ``desiredCount`` of four tasks and a ``maximumPercent`` value of 200%, the scheduler may start four new tasks before stopping the four older tasks (provided that the cluster resources required to do this are available). The default ``maximumPercent`` value for a service using the ``REPLICA`` service scheduler is 200%.
	//  The Amazon ECS scheduler uses this parameter to replace unhealthy tasks by starting replacement tasks first and then stopping the unhealthy tasks, as long as cluster resources for starting replacement tasks are available. For more information about how the scheduler replaces unhealthy tasks, see [Amazon ECS services](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html).
	//  If a service is using either the blue/green (``CODE_DEPLOY``) or ``EXTERNAL`` deployment types, and tasks in the service use the EC2 launch type, the *maximum percent* value is set to the default value. The *maximum percent* value is used to define the upper limit on the number of the tasks in the service that remain in the ``RUNNING`` state while the container instances are in the ``DRAINING`` state.
	//   You can't specify a custom ``maximumPercent`` value for a service that uses either the blue/green (``CODE_DEPLOY``) or ``EXTERNAL`` deployment types and has tasks that use the EC2 launch type.
	//   If the service uses either the blue/green (``CODE_DEPLOY``) or ``EXTERNAL`` deployment types, and the tasks in the service use the Fargate launch type, the maximum percent value is not used. The value is still returned when describing your service.
	MaximumPercent *int `pulumi:"maximumPercent"`
	// If a service is using the rolling update (``ECS``) deployment type, the ``minimumHealthyPercent`` represents a lower limit on the number of your service's tasks that must remain in the ``RUNNING`` state during a deployment, as a percentage of the ``desiredCount`` (rounded up to the nearest integer). This parameter enables you to deploy without using additional cluster capacity. For example, if your service has a ``desiredCount`` of four tasks and a ``minimumHealthyPercent`` of 50%, the service scheduler may stop two existing tasks to free up cluster capacity before starting two new tasks.
	//   If any tasks are unhealthy and if ``maximumPercent`` doesn't allow the Amazon ECS scheduler to start replacement tasks, the scheduler stops the unhealthy tasks one-by-one — using the ``minimumHealthyPercent`` as a constraint — to clear up capacity to launch replacement tasks. For more information about how the scheduler replaces unhealthy tasks, see [Amazon ECS services](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html).
	//  For services that *do not* use a load balancer, the following should be noted:
	//   +  A service is considered healthy if all essential containers within the tasks in the service pass their health checks.
	//   +  If a task has no essential containers with a health check defined, the service scheduler will wait for 40 seconds after a task reaches a ``RUNNING`` state before the task is counted towards the minimum healthy percent total.
	//   +  If a task has one or more essential containers with a health check defined, the service scheduler will wait for the task to reach a healthy status before counting it towards the minimum healthy percent total. A task is considered healthy when all essential containers within the task have passed their health checks. The amount of time the service scheduler can wait for is determined by the container health check settings.
	//
	//  For services that *do* use a load balancer, the following should be noted:
	//   +  If a task has no essential containers with a health check defined, the service scheduler will wait for the load balancer target group health check to return a healthy status before counting the task towards the minimum healthy percent total.
	//   +  If a task has an essential container with a health check defined, the service scheduler will wait for both the task to reach a healthy status and the load balancer target group health check to return a healthy status before counting the task towards the minimum healthy percent total.
	//
	//  The default value for a replica service for ``minimumHealthyPercent`` is 100%. The default ``minimumHealthyPercent`` value for a service using the ``DAEMON`` service schedule is 0% for the CLI, the AWS SDKs, and the APIs and 50% for the AWS Management Console.
	//  The minimum number of healthy tasks during a deployment is the ``desiredCount`` multiplied by the ``minimumHealthyPercent``/100, rounded up to the nearest integer value.
	//  If a service is using either the blue/green (``CODE_DEPLOY``) or ``EXTERNAL`` deployment types and is running tasks that use the EC2 launch type, the *minimum healthy percent* value is set to the default value. The *minimum healthy percent* value is used to define the lower limit on the number of the tasks in the service that remain in the ``RUNNING`` state while the container instances are in the ``DRAINING`` state.
	//   You can't specify a custom ``minimumHealthyPercent`` value for a service that uses either the blue/green (``CODE_DEPLOY``) or ``EXTERNAL`` deployment types and has tasks that use the EC2 launch type.
	//   If a service is using either the blue/green (``CODE_DEPLOY``) or ``EXTERNAL`` deployment types and is running tasks that use the Fargate launch type, the minimum healthy percent value is not used, although it is returned when describing your service.
	MinimumHealthyPercent *int `pulumi:"minimumHealthyPercent"`
	// The deployment strategy for the service. Choose from these valid values:
	//   +  ``ROLLING`` - When you create a service which uses the rolling update (``ROLLING``) deployment strategy, the Amazon ECS service scheduler replaces the currently running tasks with new tasks. The number of tasks that Amazon ECS adds or removes from the service during a rolling update is controlled by the service deployment configuration.
	//   +  ``BLUE_GREEN`` - A blue/green deployment strategy (``BLUE_GREEN``) is a release methodology that reduces downtime and risk by running two identical production environments called blue and green. With Amazon ECS blue/green deployments, you can validate new service revisions before directing production traffic to them. This approach provides a safer way to deploy changes with the ability to quickly roll back if needed.
	Strategy *ServiceDeploymentConfigurationStrategy `pulumi:"strategy"`
}

// ServiceDeploymentConfigurationInput is an input type that accepts ServiceDeploymentConfigurationArgs and ServiceDeploymentConfigurationOutput values.
// You can construct a concrete instance of `ServiceDeploymentConfigurationInput` via:
//
//	ServiceDeploymentConfigurationArgs{...}
type ServiceDeploymentConfigurationInput interface {
	pulumi.Input

	ToServiceDeploymentConfigurationOutput() ServiceDeploymentConfigurationOutput
	ToServiceDeploymentConfigurationOutputWithContext(context.Context) ServiceDeploymentConfigurationOutput
}

// Optional deployment parameters that control how many tasks run during a deployment and the ordering of stopping and starting tasks.
type ServiceDeploymentConfigurationArgs struct {
	// Information about the CloudWatch alarms.
	Alarms ServiceDeploymentAlarmsPtrInput `pulumi:"alarms"`
	// The duration when both blue and green service revisions are running simultaneously after the production traffic has shifted.
	//  The following rules apply when you don't specify a value:
	//   +  For rolling deployments, the value is set to 3 hours (180 minutes).
	//   +  When you use an external deployment controller (``EXTERNAL``), or the ACD blue/green deployment controller (``CODE_DEPLOY``), the value is set to 3 hours (180 minutes).
	//   +  For all other cases, the value is set to 36 hours (2160 minutes).
	BakeTimeInMinutes pulumi.IntPtrInput `pulumi:"bakeTimeInMinutes"`
	// The deployment circuit breaker can only be used for services using the rolling update (``ECS``) deployment type.
	//   The *deployment circuit breaker* determines whether a service deployment will fail if the service can't reach a steady state. If you use the deployment circuit breaker, a service deployment will transition to a failed state and stop launching new tasks. If you use the rollback option, when a service deployment fails, the service is rolled back to the last deployment that completed successfully. For more information, see [Rolling update](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-ecs.html) in the *Amazon Elastic Container Service Developer Guide*
	DeploymentCircuitBreaker ServiceDeploymentCircuitBreakerPtrInput `pulumi:"deploymentCircuitBreaker"`
	// An array of deployment lifecycle hook objects to run custom logic at specific stages of the deployment lifecycle.
	LifecycleHooks ServiceDeploymentLifecycleHookArrayInput `pulumi:"lifecycleHooks"`
	// If a service is using the rolling update (``ECS``) deployment type, the ``maximumPercent`` parameter represents an upper limit on the number of your service's tasks that are allowed in the ``RUNNING`` or ``PENDING`` state during a deployment, as a percentage of the ``desiredCount`` (rounded down to the nearest integer). This parameter enables you to define the deployment batch size. For example, if your service is using the ``REPLICA`` service scheduler and has a ``desiredCount`` of four tasks and a ``maximumPercent`` value of 200%, the scheduler may start four new tasks before stopping the four older tasks (provided that the cluster resources required to do this are available). The default ``maximumPercent`` value for a service using the ``REPLICA`` service scheduler is 200%.
	//  The Amazon ECS scheduler uses this parameter to replace unhealthy tasks by starting replacement tasks first and then stopping the unhealthy tasks, as long as cluster resources for starting replacement tasks are available. For more information about how the scheduler replaces unhealthy tasks, see [Amazon ECS services](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html).
	//  If a service is using either the blue/green (``CODE_DEPLOY``) or ``EXTERNAL`` deployment types, and tasks in the service use the EC2 launch type, the *maximum percent* value is set to the default value. The *maximum percent* value is used to define the upper limit on the number of the tasks in the service that remain in the ``RUNNING`` state while the container instances are in the ``DRAINING`` state.
	//   You can't specify a custom ``maximumPercent`` value for a service that uses either the blue/green (``CODE_DEPLOY``) or ``EXTERNAL`` deployment types and has tasks that use the EC2 launch type.
	//   If the service uses either the blue/green (``CODE_DEPLOY``) or ``EXTERNAL`` deployment types, and the tasks in the service use the Fargate launch type, the maximum percent value is not used. The value is still returned when describing your service.
	MaximumPercent pulumi.IntPtrInput `pulumi:"maximumPercent"`
	// If a service is using the rolling update (``ECS``) deployment type, the ``minimumHealthyPercent`` represents a lower limit on the number of your service's tasks that must remain in the ``RUNNING`` state during a deployment, as a percentage of the ``desiredCount`` (rounded up to the nearest integer). This parameter enables you to deploy without using additional cluster capacity. For example, if your service has a ``desiredCount`` of four tasks and a ``minimumHealthyPercent`` of 50%, the service scheduler may stop two existing tasks to free up cluster capacity before starting two new tasks.
	//   If any tasks are unhealthy and if ``maximumPercent`` doesn't allow the Amazon ECS scheduler to start replacement tasks, the scheduler stops the unhealthy tasks one-by-one — using the ``minimumHealthyPercent`` as a constraint — to clear up capacity to launch replacement tasks. For more information about how the scheduler replaces unhealthy tasks, see [Amazon ECS services](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html).
	//  For services that *do not* use a load balancer, the following should be noted:
	//   +  A service is considered healthy if all essential containers within the tasks in the service pass their health checks.
	//   +  If a task has no essential containers with a health check defined, the service scheduler will wait for 40 seconds after a task reaches a ``RUNNING`` state before the task is counted towards the minimum healthy percent total.
	//   +  If a task has one or more essential containers with a health check defined, the service scheduler will wait for the task to reach a healthy status before counting it towards the minimum healthy percent total. A task is considered healthy when all essential containers within the task have passed their health checks. The amount of time the service scheduler can wait for is determined by the container health check settings.
	//
	//  For services that *do* use a load balancer, the following should be noted:
	//   +  If a task has no essential containers with a health check defined, the service scheduler will wait for the load balancer target group health check to return a healthy status before counting the task towards the minimum healthy percent total.
	//   +  If a task has an essential container with a health check defined, the service scheduler will wait for both the task to reach a healthy status and the load balancer target group health check to return a healthy status before counting the task towards the minimum healthy percent total.
	//
	//  The default value for a replica service for ``minimumHealthyPercent`` is 100%. The default ``minimumHealthyPercent`` value for a service using the ``DAEMON`` service schedule is 0% for the CLI, the AWS SDKs, and the APIs and 50% for the AWS Management Console.
	//  The minimum number of healthy tasks during a deployment is the ``desiredCount`` multiplied by the ``minimumHealthyPercent``/100, rounded up to the nearest integer value.
	//  If a service is using either the blue/green (``CODE_DEPLOY``) or ``EXTERNAL`` deployment types and is running tasks that use the EC2 launch type, the *minimum healthy percent* value is set to the default value. The *minimum healthy percent* value is used to define the lower limit on the number of the tasks in the service that remain in the ``RUNNING`` state while the container instances are in the ``DRAINING`` state.
	//   You can't specify a custom ``minimumHealthyPercent`` value for a service that uses either the blue/green (``CODE_DEPLOY``) or ``EXTERNAL`` deployment types and has tasks that use the EC2 launch type.
	//   If a service is using either the blue/green (``CODE_DEPLOY``) or ``EXTERNAL`` deployment types and is running tasks that use the Fargate launch type, the minimum healthy percent value is not used, although it is returned when describing your service.
	MinimumHealthyPercent pulumi.IntPtrInput `pulumi:"minimumHealthyPercent"`
	// The deployment strategy for the service. Choose from these valid values:
	//   +  ``ROLLING`` - When you create a service which uses the rolling update (``ROLLING``) deployment strategy, the Amazon ECS service scheduler replaces the currently running tasks with new tasks. The number of tasks that Amazon ECS adds or removes from the service during a rolling update is controlled by the service deployment configuration.
	//   +  ``BLUE_GREEN`` - A blue/green deployment strategy (``BLUE_GREEN``) is a release methodology that reduces downtime and risk by running two identical production environments called blue and green. With Amazon ECS blue/green deployments, you can validate new service revisions before directing production traffic to them. This approach provides a safer way to deploy changes with the ability to quickly roll back if needed.
	Strategy ServiceDeploymentConfigurationStrategyPtrInput `pulumi:"strategy"`
}

func (ServiceDeploymentConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDeploymentConfiguration)(nil)).Elem()
}

func (i ServiceDeploymentConfigurationArgs) ToServiceDeploymentConfigurationOutput() ServiceDeploymentConfigurationOutput {
	return i.ToServiceDeploymentConfigurationOutputWithContext(context.Background())
}

func (i ServiceDeploymentConfigurationArgs) ToServiceDeploymentConfigurationOutputWithContext(ctx context.Context) ServiceDeploymentConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDeploymentConfigurationOutput)
}

func (i ServiceDeploymentConfigurationArgs) ToServiceDeploymentConfigurationPtrOutput() ServiceDeploymentConfigurationPtrOutput {
	return i.ToServiceDeploymentConfigurationPtrOutputWithContext(context.Background())
}

func (i ServiceDeploymentConfigurationArgs) ToServiceDeploymentConfigurationPtrOutputWithContext(ctx context.Context) ServiceDeploymentConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDeploymentConfigurationOutput).ToServiceDeploymentConfigurationPtrOutputWithContext(ctx)
}

// ServiceDeploymentConfigurationPtrInput is an input type that accepts ServiceDeploymentConfigurationArgs, ServiceDeploymentConfigurationPtr and ServiceDeploymentConfigurationPtrOutput values.
// You can construct a concrete instance of `ServiceDeploymentConfigurationPtrInput` via:
//
//	        ServiceDeploymentConfigurationArgs{...}
//
//	or:
//
//	        nil
type ServiceDeploymentConfigurationPtrInput interface {
	pulumi.Input

	ToServiceDeploymentConfigurationPtrOutput() ServiceDeploymentConfigurationPtrOutput
	ToServiceDeploymentConfigurationPtrOutputWithContext(context.Context) ServiceDeploymentConfigurationPtrOutput
}

type serviceDeploymentConfigurationPtrType ServiceDeploymentConfigurationArgs

func ServiceDeploymentConfigurationPtr(v *ServiceDeploymentConfigurationArgs) ServiceDeploymentConfigurationPtrInput {
	return (*serviceDeploymentConfigurationPtrType)(v)
}

func (*serviceDeploymentConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceDeploymentConfiguration)(nil)).Elem()
}

func (i *serviceDeploymentConfigurationPtrType) ToServiceDeploymentConfigurationPtrOutput() ServiceDeploymentConfigurationPtrOutput {
	return i.ToServiceDeploymentConfigurationPtrOutputWithContext(context.Background())
}

func (i *serviceDeploymentConfigurationPtrType) ToServiceDeploymentConfigurationPtrOutputWithContext(ctx context.Context) ServiceDeploymentConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDeploymentConfigurationPtrOutput)
}

// Optional deployment parameters that control how many tasks run during a deployment and the ordering of stopping and starting tasks.
type ServiceDeploymentConfigurationOutput struct{ *pulumi.OutputState }

func (ServiceDeploymentConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDeploymentConfiguration)(nil)).Elem()
}

func (o ServiceDeploymentConfigurationOutput) ToServiceDeploymentConfigurationOutput() ServiceDeploymentConfigurationOutput {
	return o
}

func (o ServiceDeploymentConfigurationOutput) ToServiceDeploymentConfigurationOutputWithContext(ctx context.Context) ServiceDeploymentConfigurationOutput {
	return o
}

func (o ServiceDeploymentConfigurationOutput) ToServiceDeploymentConfigurationPtrOutput() ServiceDeploymentConfigurationPtrOutput {
	return o.ToServiceDeploymentConfigurationPtrOutputWithContext(context.Background())
}

func (o ServiceDeploymentConfigurationOutput) ToServiceDeploymentConfigurationPtrOutputWithContext(ctx context.Context) ServiceDeploymentConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceDeploymentConfiguration) *ServiceDeploymentConfiguration {
		return &v
	}).(ServiceDeploymentConfigurationPtrOutput)
}

// Information about the CloudWatch alarms.
func (o ServiceDeploymentConfigurationOutput) Alarms() ServiceDeploymentAlarmsPtrOutput {
	return o.ApplyT(func(v ServiceDeploymentConfiguration) *ServiceDeploymentAlarms { return v.Alarms }).(ServiceDeploymentAlarmsPtrOutput)
}

// The duration when both blue and green service revisions are running simultaneously after the production traffic has shifted.
//
//	The following rules apply when you don't specify a value:
//	 +  For rolling deployments, the value is set to 3 hours (180 minutes).
//	 +  When you use an external deployment controller (``EXTERNAL``), or the ACD blue/green deployment controller (``CODE_DEPLOY``), the value is set to 3 hours (180 minutes).
//	 +  For all other cases, the value is set to 36 hours (2160 minutes).
func (o ServiceDeploymentConfigurationOutput) BakeTimeInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceDeploymentConfiguration) *int { return v.BakeTimeInMinutes }).(pulumi.IntPtrOutput)
}

// The deployment circuit breaker can only be used for services using the rolling update (“ECS“) deployment type.
//
//	The *deployment circuit breaker* determines whether a service deployment will fail if the service can't reach a steady state. If you use the deployment circuit breaker, a service deployment will transition to a failed state and stop launching new tasks. If you use the rollback option, when a service deployment fails, the service is rolled back to the last deployment that completed successfully. For more information, see [Rolling update](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-ecs.html) in the *Amazon Elastic Container Service Developer Guide*
func (o ServiceDeploymentConfigurationOutput) DeploymentCircuitBreaker() ServiceDeploymentCircuitBreakerPtrOutput {
	return o.ApplyT(func(v ServiceDeploymentConfiguration) *ServiceDeploymentCircuitBreaker {
		return v.DeploymentCircuitBreaker
	}).(ServiceDeploymentCircuitBreakerPtrOutput)
}

// An array of deployment lifecycle hook objects to run custom logic at specific stages of the deployment lifecycle.
func (o ServiceDeploymentConfigurationOutput) LifecycleHooks() ServiceDeploymentLifecycleHookArrayOutput {
	return o.ApplyT(func(v ServiceDeploymentConfiguration) []ServiceDeploymentLifecycleHook { return v.LifecycleHooks }).(ServiceDeploymentLifecycleHookArrayOutput)
}

// If a service is using the rolling update (“ECS“) deployment type, the “maximumPercent“ parameter represents an upper limit on the number of your service's tasks that are allowed in the “RUNNING“ or “PENDING“ state during a deployment, as a percentage of the “desiredCount“ (rounded down to the nearest integer). This parameter enables you to define the deployment batch size. For example, if your service is using the “REPLICA“ service scheduler and has a “desiredCount“ of four tasks and a “maximumPercent“ value of 200%, the scheduler may start four new tasks before stopping the four older tasks (provided that the cluster resources required to do this are available). The default “maximumPercent“ value for a service using the “REPLICA“ service scheduler is 200%.
//
//	The Amazon ECS scheduler uses this parameter to replace unhealthy tasks by starting replacement tasks first and then stopping the unhealthy tasks, as long as cluster resources for starting replacement tasks are available. For more information about how the scheduler replaces unhealthy tasks, see [Amazon ECS services](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html).
//	If a service is using either the blue/green (``CODE_DEPLOY``) or ``EXTERNAL`` deployment types, and tasks in the service use the EC2 launch type, the *maximum percent* value is set to the default value. The *maximum percent* value is used to define the upper limit on the number of the tasks in the service that remain in the ``RUNNING`` state while the container instances are in the ``DRAINING`` state.
//	 You can't specify a custom ``maximumPercent`` value for a service that uses either the blue/green (``CODE_DEPLOY``) or ``EXTERNAL`` deployment types and has tasks that use the EC2 launch type.
//	 If the service uses either the blue/green (``CODE_DEPLOY``) or ``EXTERNAL`` deployment types, and the tasks in the service use the Fargate launch type, the maximum percent value is not used. The value is still returned when describing your service.
func (o ServiceDeploymentConfigurationOutput) MaximumPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceDeploymentConfiguration) *int { return v.MaximumPercent }).(pulumi.IntPtrOutput)
}

// If a service is using the rolling update (“ECS“) deployment type, the “minimumHealthyPercent“ represents a lower limit on the number of your service's tasks that must remain in the “RUNNING“ state during a deployment, as a percentage of the “desiredCount“ (rounded up to the nearest integer). This parameter enables you to deploy without using additional cluster capacity. For example, if your service has a “desiredCount“ of four tasks and a “minimumHealthyPercent“ of 50%, the service scheduler may stop two existing tasks to free up cluster capacity before starting two new tasks.
//
//	 If any tasks are unhealthy and if ``maximumPercent`` doesn't allow the Amazon ECS scheduler to start replacement tasks, the scheduler stops the unhealthy tasks one-by-one — using the ``minimumHealthyPercent`` as a constraint — to clear up capacity to launch replacement tasks. For more information about how the scheduler replaces unhealthy tasks, see [Amazon ECS services](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html).
//	For services that *do not* use a load balancer, the following should be noted:
//	 +  A service is considered healthy if all essential containers within the tasks in the service pass their health checks.
//	 +  If a task has no essential containers with a health check defined, the service scheduler will wait for 40 seconds after a task reaches a ``RUNNING`` state before the task is counted towards the minimum healthy percent total.
//	 +  If a task has one or more essential containers with a health check defined, the service scheduler will wait for the task to reach a healthy status before counting it towards the minimum healthy percent total. A task is considered healthy when all essential containers within the task have passed their health checks. The amount of time the service scheduler can wait for is determined by the container health check settings.
//
//	For services that *do* use a load balancer, the following should be noted:
//	 +  If a task has no essential containers with a health check defined, the service scheduler will wait for the load balancer target group health check to return a healthy status before counting the task towards the minimum healthy percent total.
//	 +  If a task has an essential container with a health check defined, the service scheduler will wait for both the task to reach a healthy status and the load balancer target group health check to return a healthy status before counting the task towards the minimum healthy percent total.
//
//	The default value for a replica service for ``minimumHealthyPercent`` is 100%. The default ``minimumHealthyPercent`` value for a service using the ``DAEMON`` service schedule is 0% for the CLI, the AWS SDKs, and the APIs and 50% for the AWS Management Console.
//	The minimum number of healthy tasks during a deployment is the ``desiredCount`` multiplied by the ``minimumHealthyPercent``/100, rounded up to the nearest integer value.
//	If a service is using either the blue/green (``CODE_DEPLOY``) or ``EXTERNAL`` deployment types and is running tasks that use the EC2 launch type, the *minimum healthy percent* value is set to the default value. The *minimum healthy percent* value is used to define the lower limit on the number of the tasks in the service that remain in the ``RUNNING`` state while the container instances are in the ``DRAINING`` state.
//	 You can't specify a custom ``minimumHealthyPercent`` value for a service that uses either the blue/green (``CODE_DEPLOY``) or ``EXTERNAL`` deployment types and has tasks that use the EC2 launch type.
//	 If a service is using either the blue/green (``CODE_DEPLOY``) or ``EXTERNAL`` deployment types and is running tasks that use the Fargate launch type, the minimum healthy percent value is not used, although it is returned when describing your service.
func (o ServiceDeploymentConfigurationOutput) MinimumHealthyPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceDeploymentConfiguration) *int { return v.MinimumHealthyPercent }).(pulumi.IntPtrOutput)
}

// The deployment strategy for the service. Choose from these valid values:
//   - “ROLLING“ - When you create a service which uses the rolling update (“ROLLING“) deployment strategy, the Amazon ECS service scheduler replaces the currently running tasks with new tasks. The number of tasks that Amazon ECS adds or removes from the service during a rolling update is controlled by the service deployment configuration.
//   - “BLUE_GREEN“ - A blue/green deployment strategy (“BLUE_GREEN“) is a release methodology that reduces downtime and risk by running two identical production environments called blue and green. With Amazon ECS blue/green deployments, you can validate new service revisions before directing production traffic to them. This approach provides a safer way to deploy changes with the ability to quickly roll back if needed.
func (o ServiceDeploymentConfigurationOutput) Strategy() ServiceDeploymentConfigurationStrategyPtrOutput {
	return o.ApplyT(func(v ServiceDeploymentConfiguration) *ServiceDeploymentConfigurationStrategy { return v.Strategy }).(ServiceDeploymentConfigurationStrategyPtrOutput)
}

type ServiceDeploymentConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ServiceDeploymentConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceDeploymentConfiguration)(nil)).Elem()
}

func (o ServiceDeploymentConfigurationPtrOutput) ToServiceDeploymentConfigurationPtrOutput() ServiceDeploymentConfigurationPtrOutput {
	return o
}

func (o ServiceDeploymentConfigurationPtrOutput) ToServiceDeploymentConfigurationPtrOutputWithContext(ctx context.Context) ServiceDeploymentConfigurationPtrOutput {
	return o
}

func (o ServiceDeploymentConfigurationPtrOutput) Elem() ServiceDeploymentConfigurationOutput {
	return o.ApplyT(func(v *ServiceDeploymentConfiguration) ServiceDeploymentConfiguration {
		if v != nil {
			return *v
		}
		var ret ServiceDeploymentConfiguration
		return ret
	}).(ServiceDeploymentConfigurationOutput)
}

// Information about the CloudWatch alarms.
func (o ServiceDeploymentConfigurationPtrOutput) Alarms() ServiceDeploymentAlarmsPtrOutput {
	return o.ApplyT(func(v *ServiceDeploymentConfiguration) *ServiceDeploymentAlarms {
		if v == nil {
			return nil
		}
		return v.Alarms
	}).(ServiceDeploymentAlarmsPtrOutput)
}

// The duration when both blue and green service revisions are running simultaneously after the production traffic has shifted.
//
//	The following rules apply when you don't specify a value:
//	 +  For rolling deployments, the value is set to 3 hours (180 minutes).
//	 +  When you use an external deployment controller (``EXTERNAL``), or the ACD blue/green deployment controller (``CODE_DEPLOY``), the value is set to 3 hours (180 minutes).
//	 +  For all other cases, the value is set to 36 hours (2160 minutes).
func (o ServiceDeploymentConfigurationPtrOutput) BakeTimeInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceDeploymentConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.BakeTimeInMinutes
	}).(pulumi.IntPtrOutput)
}

// The deployment circuit breaker can only be used for services using the rolling update (“ECS“) deployment type.
//
//	The *deployment circuit breaker* determines whether a service deployment will fail if the service can't reach a steady state. If you use the deployment circuit breaker, a service deployment will transition to a failed state and stop launching new tasks. If you use the rollback option, when a service deployment fails, the service is rolled back to the last deployment that completed successfully. For more information, see [Rolling update](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-ecs.html) in the *Amazon Elastic Container Service Developer Guide*
func (o ServiceDeploymentConfigurationPtrOutput) DeploymentCircuitBreaker() ServiceDeploymentCircuitBreakerPtrOutput {
	return o.ApplyT(func(v *ServiceDeploymentConfiguration) *ServiceDeploymentCircuitBreaker {
		if v == nil {
			return nil
		}
		return v.DeploymentCircuitBreaker
	}).(ServiceDeploymentCircuitBreakerPtrOutput)
}

// An array of deployment lifecycle hook objects to run custom logic at specific stages of the deployment lifecycle.
func (o ServiceDeploymentConfigurationPtrOutput) LifecycleHooks() ServiceDeploymentLifecycleHookArrayOutput {
	return o.ApplyT(func(v *ServiceDeploymentConfiguration) []ServiceDeploymentLifecycleHook {
		if v == nil {
			return nil
		}
		return v.LifecycleHooks
	}).(ServiceDeploymentLifecycleHookArrayOutput)
}

// If a service is using the rolling update (“ECS“) deployment type, the “maximumPercent“ parameter represents an upper limit on the number of your service's tasks that are allowed in the “RUNNING“ or “PENDING“ state during a deployment, as a percentage of the “desiredCount“ (rounded down to the nearest integer). This parameter enables you to define the deployment batch size. For example, if your service is using the “REPLICA“ service scheduler and has a “desiredCount“ of four tasks and a “maximumPercent“ value of 200%, the scheduler may start four new tasks before stopping the four older tasks (provided that the cluster resources required to do this are available). The default “maximumPercent“ value for a service using the “REPLICA“ service scheduler is 200%.
//
//	The Amazon ECS scheduler uses this parameter to replace unhealthy tasks by starting replacement tasks first and then stopping the unhealthy tasks, as long as cluster resources for starting replacement tasks are available. For more information about how the scheduler replaces unhealthy tasks, see [Amazon ECS services](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html).
//	If a service is using either the blue/green (``CODE_DEPLOY``) or ``EXTERNAL`` deployment types, and tasks in the service use the EC2 launch type, the *maximum percent* value is set to the default value. The *maximum percent* value is used to define the upper limit on the number of the tasks in the service that remain in the ``RUNNING`` state while the container instances are in the ``DRAINING`` state.
//	 You can't specify a custom ``maximumPercent`` value for a service that uses either the blue/green (``CODE_DEPLOY``) or ``EXTERNAL`` deployment types and has tasks that use the EC2 launch type.
//	 If the service uses either the blue/green (``CODE_DEPLOY``) or ``EXTERNAL`` deployment types, and the tasks in the service use the Fargate launch type, the maximum percent value is not used. The value is still returned when describing your service.
func (o ServiceDeploymentConfigurationPtrOutput) MaximumPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceDeploymentConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.MaximumPercent
	}).(pulumi.IntPtrOutput)
}

// If a service is using the rolling update (“ECS“) deployment type, the “minimumHealthyPercent“ represents a lower limit on the number of your service's tasks that must remain in the “RUNNING“ state during a deployment, as a percentage of the “desiredCount“ (rounded up to the nearest integer). This parameter enables you to deploy without using additional cluster capacity. For example, if your service has a “desiredCount“ of four tasks and a “minimumHealthyPercent“ of 50%, the service scheduler may stop two existing tasks to free up cluster capacity before starting two new tasks.
//
//	 If any tasks are unhealthy and if ``maximumPercent`` doesn't allow the Amazon ECS scheduler to start replacement tasks, the scheduler stops the unhealthy tasks one-by-one — using the ``minimumHealthyPercent`` as a constraint — to clear up capacity to launch replacement tasks. For more information about how the scheduler replaces unhealthy tasks, see [Amazon ECS services](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html).
//	For services that *do not* use a load balancer, the following should be noted:
//	 +  A service is considered healthy if all essential containers within the tasks in the service pass their health checks.
//	 +  If a task has no essential containers with a health check defined, the service scheduler will wait for 40 seconds after a task reaches a ``RUNNING`` state before the task is counted towards the minimum healthy percent total.
//	 +  If a task has one or more essential containers with a health check defined, the service scheduler will wait for the task to reach a healthy status before counting it towards the minimum healthy percent total. A task is considered healthy when all essential containers within the task have passed their health checks. The amount of time the service scheduler can wait for is determined by the container health check settings.
//
//	For services that *do* use a load balancer, the following should be noted:
//	 +  If a task has no essential containers with a health check defined, the service scheduler will wait for the load balancer target group health check to return a healthy status before counting the task towards the minimum healthy percent total.
//	 +  If a task has an essential container with a health check defined, the service scheduler will wait for both the task to reach a healthy status and the load balancer target group health check to return a healthy status before counting the task towards the minimum healthy percent total.
//
//	The default value for a replica service for ``minimumHealthyPercent`` is 100%. The default ``minimumHealthyPercent`` value for a service using the ``DAEMON`` service schedule is 0% for the CLI, the AWS SDKs, and the APIs and 50% for the AWS Management Console.
//	The minimum number of healthy tasks during a deployment is the ``desiredCount`` multiplied by the ``minimumHealthyPercent``/100, rounded up to the nearest integer value.
//	If a service is using either the blue/green (``CODE_DEPLOY``) or ``EXTERNAL`` deployment types and is running tasks that use the EC2 launch type, the *minimum healthy percent* value is set to the default value. The *minimum healthy percent* value is used to define the lower limit on the number of the tasks in the service that remain in the ``RUNNING`` state while the container instances are in the ``DRAINING`` state.
//	 You can't specify a custom ``minimumHealthyPercent`` value for a service that uses either the blue/green (``CODE_DEPLOY``) or ``EXTERNAL`` deployment types and has tasks that use the EC2 launch type.
//	 If a service is using either the blue/green (``CODE_DEPLOY``) or ``EXTERNAL`` deployment types and is running tasks that use the Fargate launch type, the minimum healthy percent value is not used, although it is returned when describing your service.
func (o ServiceDeploymentConfigurationPtrOutput) MinimumHealthyPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceDeploymentConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.MinimumHealthyPercent
	}).(pulumi.IntPtrOutput)
}

// The deployment strategy for the service. Choose from these valid values:
//   - “ROLLING“ - When you create a service which uses the rolling update (“ROLLING“) deployment strategy, the Amazon ECS service scheduler replaces the currently running tasks with new tasks. The number of tasks that Amazon ECS adds or removes from the service during a rolling update is controlled by the service deployment configuration.
//   - “BLUE_GREEN“ - A blue/green deployment strategy (“BLUE_GREEN“) is a release methodology that reduces downtime and risk by running two identical production environments called blue and green. With Amazon ECS blue/green deployments, you can validate new service revisions before directing production traffic to them. This approach provides a safer way to deploy changes with the ability to quickly roll back if needed.
func (o ServiceDeploymentConfigurationPtrOutput) Strategy() ServiceDeploymentConfigurationStrategyPtrOutput {
	return o.ApplyT(func(v *ServiceDeploymentConfiguration) *ServiceDeploymentConfigurationStrategy {
		if v == nil {
			return nil
		}
		return v.Strategy
	}).(ServiceDeploymentConfigurationStrategyPtrOutput)
}

// The deployment controller to use for the service.
type ServiceDeploymentController struct {
	// The deployment controller type to use.
	//  The deployment controller is the mechanism that determines how tasks are deployed for your service. The valid options are:
	//   +  ECS
	//       When you create a service which uses the ``ECS`` deployment controller, you can choose between the following deployment strategies:
	//   +  ``ROLLING``: When you create a service which uses the *rolling update* (``ROLLING``) deployment strategy, the ECS service scheduler replaces the currently running tasks with new tasks. The number of tasks that ECS adds or removes from the service during a rolling update is controlled by the service deployment configuration.
	//       Rolling update deployments are best suited for the following scenarios:
	//   +  Gradual service updates: You need to update your service incrementally without taking the entire service offline at once.
	//   +  Limited resource requirements: You want to avoid the additional resource costs of running two complete environments simultaneously (as required by blue/green deployments).
	//   +  Acceptable deployment time: Your application can tolerate a longer deployment process, as rolling updates replace tasks one by one.
	//   +  No need for instant roll back: Your service can tolerate a rollback process that takes minutes rather than seconds.
	//   +  Simple deployment process: You prefer a straightforward deployment approach without the complexity of managing multiple environments, target groups, and listeners.
	//   +  No load balancer requirement: Your service doesn't use or require a load balancer, ALB, NLB, or Service Connect (which are required for blue/green deployments).
	//   +  Stateful applications: Your application maintains state that makes it difficult to run two parallel environments.
	//   +  Cost sensitivity: You want to minimize deployment costs by not running duplicate environments during deployment.
	//
	//  Rolling updates are the default deployment strategy for services and provide a balance between deployment safety and resource efficiency for many common application scenarios.
	//   +  ``BLUE_GREEN``: A *blue/green* deployment strategy (``BLUE_GREEN``) is a release methodology that reduces downtime and risk by running two identical production environments called blue and green. With ECS blue/green deployments, you can validate new service revisions before directing production traffic to them. This approach provides a safer way to deploy changes with the ability to quickly roll back if needed.
	//  ECS blue/green deployments are best suited for the following scenarios:
	//   +  Service validation: When you need to validate new service revisions before directing production traffic to them
	//   +  Zero downtime: When your service requires zero-downtime deployments
	//   +  Instant roll back: When you need the ability to quickly roll back if issues are detected
	//   +  Load balancer requirement: When your service uses ALB, NLB, or Service Connect
	//
	//   +  External
	//  Use a third-party deployment controller.
	//   +  Blue/green deployment (powered by ACD)
	//  ACD installs an updated version of the application as a new replacement task set and reroutes production traffic from the original application task set to the replacement task set. The original task set is terminated after a successful deployment. Use this deployment controller to verify a new deployment of a service before sending production traffic to it.
	//
	//  When updating the deployment controller for a service, consider the following depending on the type of migration you're performing.
	//   +  If you have a template that contains the ``EXTERNAL`` deployment controller information as well as ``TaskSet`` and ``PrimaryTaskSet`` resources, and you remove the task set resources from the template when updating from ``EXTERNAL`` to ``ECS``, the ``DescribeTaskSet`` and ``DeleteTaskSet`` API calls will return a 400 error after the deployment controller is updated to ``ECS``. This results in a delete failure on the task set resources, even though the stack transitions to ``UPDATE_COMPLETE`` status. For more information, see [Resource removed from stack but not deleted](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/troubleshooting.html#troubleshooting-errors-resource-removed-not-deleted) in the CFNlong User Guide. To fix this issue, delete the task sets directly using the ECS``DeleteTaskSet`` API. For more information about how to delete a task set, see [DeleteTaskSet](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DeleteTaskSet.html) in the ECSlong API Reference.
	//   +  If you're migrating from ``CODE_DEPLOY`` to ``ECS`` with a new task definition and CFN performs a rollback operation, the ECS``UpdateService`` request fails with the following error:
	//       Resource handler returned message: "Invalid request provided: Unable to update task definition on services with a CODE_DEPLOY deployment controller.
	//   +  After a successful migration from ``ECS`` to ``EXTERNAL`` deployment controller, you need to manually remove the ``ACTIVE`` task set, because ECS no longer manages the deployment. For information about how to delete a task set, see [DeleteTaskSet](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DeleteTaskSet.html) in the ECSlong API Reference.
	Type *ServiceDeploymentControllerType `pulumi:"type"`
}

// ServiceDeploymentControllerInput is an input type that accepts ServiceDeploymentControllerArgs and ServiceDeploymentControllerOutput values.
// You can construct a concrete instance of `ServiceDeploymentControllerInput` via:
//
//	ServiceDeploymentControllerArgs{...}
type ServiceDeploymentControllerInput interface {
	pulumi.Input

	ToServiceDeploymentControllerOutput() ServiceDeploymentControllerOutput
	ToServiceDeploymentControllerOutputWithContext(context.Context) ServiceDeploymentControllerOutput
}

// The deployment controller to use for the service.
type ServiceDeploymentControllerArgs struct {
	// The deployment controller type to use.
	//  The deployment controller is the mechanism that determines how tasks are deployed for your service. The valid options are:
	//   +  ECS
	//       When you create a service which uses the ``ECS`` deployment controller, you can choose between the following deployment strategies:
	//   +  ``ROLLING``: When you create a service which uses the *rolling update* (``ROLLING``) deployment strategy, the ECS service scheduler replaces the currently running tasks with new tasks. The number of tasks that ECS adds or removes from the service during a rolling update is controlled by the service deployment configuration.
	//       Rolling update deployments are best suited for the following scenarios:
	//   +  Gradual service updates: You need to update your service incrementally without taking the entire service offline at once.
	//   +  Limited resource requirements: You want to avoid the additional resource costs of running two complete environments simultaneously (as required by blue/green deployments).
	//   +  Acceptable deployment time: Your application can tolerate a longer deployment process, as rolling updates replace tasks one by one.
	//   +  No need for instant roll back: Your service can tolerate a rollback process that takes minutes rather than seconds.
	//   +  Simple deployment process: You prefer a straightforward deployment approach without the complexity of managing multiple environments, target groups, and listeners.
	//   +  No load balancer requirement: Your service doesn't use or require a load balancer, ALB, NLB, or Service Connect (which are required for blue/green deployments).
	//   +  Stateful applications: Your application maintains state that makes it difficult to run two parallel environments.
	//   +  Cost sensitivity: You want to minimize deployment costs by not running duplicate environments during deployment.
	//
	//  Rolling updates are the default deployment strategy for services and provide a balance between deployment safety and resource efficiency for many common application scenarios.
	//   +  ``BLUE_GREEN``: A *blue/green* deployment strategy (``BLUE_GREEN``) is a release methodology that reduces downtime and risk by running two identical production environments called blue and green. With ECS blue/green deployments, you can validate new service revisions before directing production traffic to them. This approach provides a safer way to deploy changes with the ability to quickly roll back if needed.
	//  ECS blue/green deployments are best suited for the following scenarios:
	//   +  Service validation: When you need to validate new service revisions before directing production traffic to them
	//   +  Zero downtime: When your service requires zero-downtime deployments
	//   +  Instant roll back: When you need the ability to quickly roll back if issues are detected
	//   +  Load balancer requirement: When your service uses ALB, NLB, or Service Connect
	//
	//   +  External
	//  Use a third-party deployment controller.
	//   +  Blue/green deployment (powered by ACD)
	//  ACD installs an updated version of the application as a new replacement task set and reroutes production traffic from the original application task set to the replacement task set. The original task set is terminated after a successful deployment. Use this deployment controller to verify a new deployment of a service before sending production traffic to it.
	//
	//  When updating the deployment controller for a service, consider the following depending on the type of migration you're performing.
	//   +  If you have a template that contains the ``EXTERNAL`` deployment controller information as well as ``TaskSet`` and ``PrimaryTaskSet`` resources, and you remove the task set resources from the template when updating from ``EXTERNAL`` to ``ECS``, the ``DescribeTaskSet`` and ``DeleteTaskSet`` API calls will return a 400 error after the deployment controller is updated to ``ECS``. This results in a delete failure on the task set resources, even though the stack transitions to ``UPDATE_COMPLETE`` status. For more information, see [Resource removed from stack but not deleted](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/troubleshooting.html#troubleshooting-errors-resource-removed-not-deleted) in the CFNlong User Guide. To fix this issue, delete the task sets directly using the ECS``DeleteTaskSet`` API. For more information about how to delete a task set, see [DeleteTaskSet](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DeleteTaskSet.html) in the ECSlong API Reference.
	//   +  If you're migrating from ``CODE_DEPLOY`` to ``ECS`` with a new task definition and CFN performs a rollback operation, the ECS``UpdateService`` request fails with the following error:
	//       Resource handler returned message: "Invalid request provided: Unable to update task definition on services with a CODE_DEPLOY deployment controller.
	//   +  After a successful migration from ``ECS`` to ``EXTERNAL`` deployment controller, you need to manually remove the ``ACTIVE`` task set, because ECS no longer manages the deployment. For information about how to delete a task set, see [DeleteTaskSet](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DeleteTaskSet.html) in the ECSlong API Reference.
	Type ServiceDeploymentControllerTypePtrInput `pulumi:"type"`
}

func (ServiceDeploymentControllerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDeploymentController)(nil)).Elem()
}

func (i ServiceDeploymentControllerArgs) ToServiceDeploymentControllerOutput() ServiceDeploymentControllerOutput {
	return i.ToServiceDeploymentControllerOutputWithContext(context.Background())
}

func (i ServiceDeploymentControllerArgs) ToServiceDeploymentControllerOutputWithContext(ctx context.Context) ServiceDeploymentControllerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDeploymentControllerOutput)
}

func (i ServiceDeploymentControllerArgs) ToServiceDeploymentControllerPtrOutput() ServiceDeploymentControllerPtrOutput {
	return i.ToServiceDeploymentControllerPtrOutputWithContext(context.Background())
}

func (i ServiceDeploymentControllerArgs) ToServiceDeploymentControllerPtrOutputWithContext(ctx context.Context) ServiceDeploymentControllerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDeploymentControllerOutput).ToServiceDeploymentControllerPtrOutputWithContext(ctx)
}

// ServiceDeploymentControllerPtrInput is an input type that accepts ServiceDeploymentControllerArgs, ServiceDeploymentControllerPtr and ServiceDeploymentControllerPtrOutput values.
// You can construct a concrete instance of `ServiceDeploymentControllerPtrInput` via:
//
//	        ServiceDeploymentControllerArgs{...}
//
//	or:
//
//	        nil
type ServiceDeploymentControllerPtrInput interface {
	pulumi.Input

	ToServiceDeploymentControllerPtrOutput() ServiceDeploymentControllerPtrOutput
	ToServiceDeploymentControllerPtrOutputWithContext(context.Context) ServiceDeploymentControllerPtrOutput
}

type serviceDeploymentControllerPtrType ServiceDeploymentControllerArgs

func ServiceDeploymentControllerPtr(v *ServiceDeploymentControllerArgs) ServiceDeploymentControllerPtrInput {
	return (*serviceDeploymentControllerPtrType)(v)
}

func (*serviceDeploymentControllerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceDeploymentController)(nil)).Elem()
}

func (i *serviceDeploymentControllerPtrType) ToServiceDeploymentControllerPtrOutput() ServiceDeploymentControllerPtrOutput {
	return i.ToServiceDeploymentControllerPtrOutputWithContext(context.Background())
}

func (i *serviceDeploymentControllerPtrType) ToServiceDeploymentControllerPtrOutputWithContext(ctx context.Context) ServiceDeploymentControllerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDeploymentControllerPtrOutput)
}

// The deployment controller to use for the service.
type ServiceDeploymentControllerOutput struct{ *pulumi.OutputState }

func (ServiceDeploymentControllerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDeploymentController)(nil)).Elem()
}

func (o ServiceDeploymentControllerOutput) ToServiceDeploymentControllerOutput() ServiceDeploymentControllerOutput {
	return o
}

func (o ServiceDeploymentControllerOutput) ToServiceDeploymentControllerOutputWithContext(ctx context.Context) ServiceDeploymentControllerOutput {
	return o
}

func (o ServiceDeploymentControllerOutput) ToServiceDeploymentControllerPtrOutput() ServiceDeploymentControllerPtrOutput {
	return o.ToServiceDeploymentControllerPtrOutputWithContext(context.Background())
}

func (o ServiceDeploymentControllerOutput) ToServiceDeploymentControllerPtrOutputWithContext(ctx context.Context) ServiceDeploymentControllerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceDeploymentController) *ServiceDeploymentController {
		return &v
	}).(ServiceDeploymentControllerPtrOutput)
}

// The deployment controller type to use.
//
//	The deployment controller is the mechanism that determines how tasks are deployed for your service. The valid options are:
//	 +  ECS
//	     When you create a service which uses the ``ECS`` deployment controller, you can choose between the following deployment strategies:
//	 +  ``ROLLING``: When you create a service which uses the *rolling update* (``ROLLING``) deployment strategy, the ECS service scheduler replaces the currently running tasks with new tasks. The number of tasks that ECS adds or removes from the service during a rolling update is controlled by the service deployment configuration.
//	     Rolling update deployments are best suited for the following scenarios:
//	 +  Gradual service updates: You need to update your service incrementally without taking the entire service offline at once.
//	 +  Limited resource requirements: You want to avoid the additional resource costs of running two complete environments simultaneously (as required by blue/green deployments).
//	 +  Acceptable deployment time: Your application can tolerate a longer deployment process, as rolling updates replace tasks one by one.
//	 +  No need for instant roll back: Your service can tolerate a rollback process that takes minutes rather than seconds.
//	 +  Simple deployment process: You prefer a straightforward deployment approach without the complexity of managing multiple environments, target groups, and listeners.
//	 +  No load balancer requirement: Your service doesn't use or require a load balancer, ALB, NLB, or Service Connect (which are required for blue/green deployments).
//	 +  Stateful applications: Your application maintains state that makes it difficult to run two parallel environments.
//	 +  Cost sensitivity: You want to minimize deployment costs by not running duplicate environments during deployment.
//
//	Rolling updates are the default deployment strategy for services and provide a balance between deployment safety and resource efficiency for many common application scenarios.
//	 +  ``BLUE_GREEN``: A *blue/green* deployment strategy (``BLUE_GREEN``) is a release methodology that reduces downtime and risk by running two identical production environments called blue and green. With ECS blue/green deployments, you can validate new service revisions before directing production traffic to them. This approach provides a safer way to deploy changes with the ability to quickly roll back if needed.
//	ECS blue/green deployments are best suited for the following scenarios:
//	 +  Service validation: When you need to validate new service revisions before directing production traffic to them
//	 +  Zero downtime: When your service requires zero-downtime deployments
//	 +  Instant roll back: When you need the ability to quickly roll back if issues are detected
//	 +  Load balancer requirement: When your service uses ALB, NLB, or Service Connect
//
//	 +  External
//	Use a third-party deployment controller.
//	 +  Blue/green deployment (powered by ACD)
//	ACD installs an updated version of the application as a new replacement task set and reroutes production traffic from the original application task set to the replacement task set. The original task set is terminated after a successful deployment. Use this deployment controller to verify a new deployment of a service before sending production traffic to it.
//
//	When updating the deployment controller for a service, consider the following depending on the type of migration you're performing.
//	 +  If you have a template that contains the ``EXTERNAL`` deployment controller information as well as ``TaskSet`` and ``PrimaryTaskSet`` resources, and you remove the task set resources from the template when updating from ``EXTERNAL`` to ``ECS``, the ``DescribeTaskSet`` and ``DeleteTaskSet`` API calls will return a 400 error after the deployment controller is updated to ``ECS``. This results in a delete failure on the task set resources, even though the stack transitions to ``UPDATE_COMPLETE`` status. For more information, see [Resource removed from stack but not deleted](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/troubleshooting.html#troubleshooting-errors-resource-removed-not-deleted) in the CFNlong User Guide. To fix this issue, delete the task sets directly using the ECS``DeleteTaskSet`` API. For more information about how to delete a task set, see [DeleteTaskSet](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DeleteTaskSet.html) in the ECSlong API Reference.
//	 +  If you're migrating from ``CODE_DEPLOY`` to ``ECS`` with a new task definition and CFN performs a rollback operation, the ECS``UpdateService`` request fails with the following error:
//	     Resource handler returned message: "Invalid request provided: Unable to update task definition on services with a CODE_DEPLOY deployment controller.
//	 +  After a successful migration from ``ECS`` to ``EXTERNAL`` deployment controller, you need to manually remove the ``ACTIVE`` task set, because ECS no longer manages the deployment. For information about how to delete a task set, see [DeleteTaskSet](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DeleteTaskSet.html) in the ECSlong API Reference.
func (o ServiceDeploymentControllerOutput) Type() ServiceDeploymentControllerTypePtrOutput {
	return o.ApplyT(func(v ServiceDeploymentController) *ServiceDeploymentControllerType { return v.Type }).(ServiceDeploymentControllerTypePtrOutput)
}

type ServiceDeploymentControllerPtrOutput struct{ *pulumi.OutputState }

func (ServiceDeploymentControllerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceDeploymentController)(nil)).Elem()
}

func (o ServiceDeploymentControllerPtrOutput) ToServiceDeploymentControllerPtrOutput() ServiceDeploymentControllerPtrOutput {
	return o
}

func (o ServiceDeploymentControllerPtrOutput) ToServiceDeploymentControllerPtrOutputWithContext(ctx context.Context) ServiceDeploymentControllerPtrOutput {
	return o
}

func (o ServiceDeploymentControllerPtrOutput) Elem() ServiceDeploymentControllerOutput {
	return o.ApplyT(func(v *ServiceDeploymentController) ServiceDeploymentController {
		if v != nil {
			return *v
		}
		var ret ServiceDeploymentController
		return ret
	}).(ServiceDeploymentControllerOutput)
}

// The deployment controller type to use.
//
//	The deployment controller is the mechanism that determines how tasks are deployed for your service. The valid options are:
//	 +  ECS
//	     When you create a service which uses the ``ECS`` deployment controller, you can choose between the following deployment strategies:
//	 +  ``ROLLING``: When you create a service which uses the *rolling update* (``ROLLING``) deployment strategy, the ECS service scheduler replaces the currently running tasks with new tasks. The number of tasks that ECS adds or removes from the service during a rolling update is controlled by the service deployment configuration.
//	     Rolling update deployments are best suited for the following scenarios:
//	 +  Gradual service updates: You need to update your service incrementally without taking the entire service offline at once.
//	 +  Limited resource requirements: You want to avoid the additional resource costs of running two complete environments simultaneously (as required by blue/green deployments).
//	 +  Acceptable deployment time: Your application can tolerate a longer deployment process, as rolling updates replace tasks one by one.
//	 +  No need for instant roll back: Your service can tolerate a rollback process that takes minutes rather than seconds.
//	 +  Simple deployment process: You prefer a straightforward deployment approach without the complexity of managing multiple environments, target groups, and listeners.
//	 +  No load balancer requirement: Your service doesn't use or require a load balancer, ALB, NLB, or Service Connect (which are required for blue/green deployments).
//	 +  Stateful applications: Your application maintains state that makes it difficult to run two parallel environments.
//	 +  Cost sensitivity: You want to minimize deployment costs by not running duplicate environments during deployment.
//
//	Rolling updates are the default deployment strategy for services and provide a balance between deployment safety and resource efficiency for many common application scenarios.
//	 +  ``BLUE_GREEN``: A *blue/green* deployment strategy (``BLUE_GREEN``) is a release methodology that reduces downtime and risk by running two identical production environments called blue and green. With ECS blue/green deployments, you can validate new service revisions before directing production traffic to them. This approach provides a safer way to deploy changes with the ability to quickly roll back if needed.
//	ECS blue/green deployments are best suited for the following scenarios:
//	 +  Service validation: When you need to validate new service revisions before directing production traffic to them
//	 +  Zero downtime: When your service requires zero-downtime deployments
//	 +  Instant roll back: When you need the ability to quickly roll back if issues are detected
//	 +  Load balancer requirement: When your service uses ALB, NLB, or Service Connect
//
//	 +  External
//	Use a third-party deployment controller.
//	 +  Blue/green deployment (powered by ACD)
//	ACD installs an updated version of the application as a new replacement task set and reroutes production traffic from the original application task set to the replacement task set. The original task set is terminated after a successful deployment. Use this deployment controller to verify a new deployment of a service before sending production traffic to it.
//
//	When updating the deployment controller for a service, consider the following depending on the type of migration you're performing.
//	 +  If you have a template that contains the ``EXTERNAL`` deployment controller information as well as ``TaskSet`` and ``PrimaryTaskSet`` resources, and you remove the task set resources from the template when updating from ``EXTERNAL`` to ``ECS``, the ``DescribeTaskSet`` and ``DeleteTaskSet`` API calls will return a 400 error after the deployment controller is updated to ``ECS``. This results in a delete failure on the task set resources, even though the stack transitions to ``UPDATE_COMPLETE`` status. For more information, see [Resource removed from stack but not deleted](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/troubleshooting.html#troubleshooting-errors-resource-removed-not-deleted) in the CFNlong User Guide. To fix this issue, delete the task sets directly using the ECS``DeleteTaskSet`` API. For more information about how to delete a task set, see [DeleteTaskSet](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DeleteTaskSet.html) in the ECSlong API Reference.
//	 +  If you're migrating from ``CODE_DEPLOY`` to ``ECS`` with a new task definition and CFN performs a rollback operation, the ECS``UpdateService`` request fails with the following error:
//	     Resource handler returned message: "Invalid request provided: Unable to update task definition on services with a CODE_DEPLOY deployment controller.
//	 +  After a successful migration from ``ECS`` to ``EXTERNAL`` deployment controller, you need to manually remove the ``ACTIVE`` task set, because ECS no longer manages the deployment. For information about how to delete a task set, see [DeleteTaskSet](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DeleteTaskSet.html) in the ECSlong API Reference.
func (o ServiceDeploymentControllerPtrOutput) Type() ServiceDeploymentControllerTypePtrOutput {
	return o.ApplyT(func(v *ServiceDeploymentController) *ServiceDeploymentControllerType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(ServiceDeploymentControllerTypePtrOutput)
}

// A deployment lifecycle hook runs custom logic at specific stages of the deployment process. Currently, you can use Lambda functions as hook targets.
//
//	For more information, see [Lifecycle hooks for Amazon ECS service deployments](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-lifecycle-hooks.html) in the *Amazon Elastic Container Service Developer Guide*.
type ServiceDeploymentLifecycleHook struct {
	// Use this field to specify custom parameters that ECS passes to your hook target invocations (such as a Lambda function).
	//  This field must be a JSON object as a string.
	HookDetails interface{} `pulumi:"hookDetails"`
	// The Amazon Resource Name (ARN) of the hook target. Currently, only Lambda function ARNs are supported.
	//  You must provide this parameter when configuring a deployment lifecycle hook.
	HookTargetArn string `pulumi:"hookTargetArn"`
	// The lifecycle stages at which to run the hook. Choose from these valid values:
	//   +  RECONCILE_SERVICE
	//       The reconciliation stage that only happens when you start a new service deployment with more than 1 service revision in an ACTIVE state.
	//       You can use a lifecycle hook for this stage.
	//   +  PRE_SCALE_UP
	//       The green service revision has not started. The blue service revision is handling 100% of the production traffic. There is no test traffic.
	//       You can use a lifecycle hook for this stage.
	//   +  POST_SCALE_UP
	//       The green service revision has started. The blue service revision is handling 100% of the production traffic. There is no test traffic.
	//       You can use a lifecycle hook for this stage.
	//   +  TEST_TRAFFIC_SHIFT
	//       The blue and green service revisions are running. The blue service revision handles 100% of the production traffic. The green service revision is migrating from 0% to 100% of test traffic.
	//       You can use a lifecycle hook for this stage.
	//   +  POST_TEST_TRAFFIC_SHIFT
	//       The test traffic shift is complete. The green service revision handles 100% of the test traffic.
	//       You can use a lifecycle hook for this stage.
	//   +  PRODUCTION_TRAFFIC_SHIFT
	//       Production traffic is shifting to the green service revision. The green service revision is migrating from 0% to 100% of production traffic.
	//       You can use a lifecycle hook for this stage.
	//   +  POST_PRODUCTION_TRAFFIC_SHIFT
	//       The production traffic shift is complete.
	//       You can use a lifecycle hook for this stage.
	//
	//  You must provide this parameter when configuring a deployment lifecycle hook.
	LifecycleStages []ServiceDeploymentLifecycleHookLifecycleStagesItem `pulumi:"lifecycleStages"`
	// The Amazon Resource Name (ARN) of the IAM role that grants Amazon ECS permission to call Lambda functions on your behalf.
	//  For more information, see [Permissions required for Lambda functions in Amazon ECS blue/green deployments](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/blue-green-permissions.html) in the *Amazon Elastic Container Service Developer Guide*.
	RoleArn string `pulumi:"roleArn"`
}

// ServiceDeploymentLifecycleHookInput is an input type that accepts ServiceDeploymentLifecycleHookArgs and ServiceDeploymentLifecycleHookOutput values.
// You can construct a concrete instance of `ServiceDeploymentLifecycleHookInput` via:
//
//	ServiceDeploymentLifecycleHookArgs{...}
type ServiceDeploymentLifecycleHookInput interface {
	pulumi.Input

	ToServiceDeploymentLifecycleHookOutput() ServiceDeploymentLifecycleHookOutput
	ToServiceDeploymentLifecycleHookOutputWithContext(context.Context) ServiceDeploymentLifecycleHookOutput
}

// A deployment lifecycle hook runs custom logic at specific stages of the deployment process. Currently, you can use Lambda functions as hook targets.
//
//	For more information, see [Lifecycle hooks for Amazon ECS service deployments](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-lifecycle-hooks.html) in the *Amazon Elastic Container Service Developer Guide*.
type ServiceDeploymentLifecycleHookArgs struct {
	// Use this field to specify custom parameters that ECS passes to your hook target invocations (such as a Lambda function).
	//  This field must be a JSON object as a string.
	HookDetails pulumi.Input `pulumi:"hookDetails"`
	// The Amazon Resource Name (ARN) of the hook target. Currently, only Lambda function ARNs are supported.
	//  You must provide this parameter when configuring a deployment lifecycle hook.
	HookTargetArn pulumi.StringInput `pulumi:"hookTargetArn"`
	// The lifecycle stages at which to run the hook. Choose from these valid values:
	//   +  RECONCILE_SERVICE
	//       The reconciliation stage that only happens when you start a new service deployment with more than 1 service revision in an ACTIVE state.
	//       You can use a lifecycle hook for this stage.
	//   +  PRE_SCALE_UP
	//       The green service revision has not started. The blue service revision is handling 100% of the production traffic. There is no test traffic.
	//       You can use a lifecycle hook for this stage.
	//   +  POST_SCALE_UP
	//       The green service revision has started. The blue service revision is handling 100% of the production traffic. There is no test traffic.
	//       You can use a lifecycle hook for this stage.
	//   +  TEST_TRAFFIC_SHIFT
	//       The blue and green service revisions are running. The blue service revision handles 100% of the production traffic. The green service revision is migrating from 0% to 100% of test traffic.
	//       You can use a lifecycle hook for this stage.
	//   +  POST_TEST_TRAFFIC_SHIFT
	//       The test traffic shift is complete. The green service revision handles 100% of the test traffic.
	//       You can use a lifecycle hook for this stage.
	//   +  PRODUCTION_TRAFFIC_SHIFT
	//       Production traffic is shifting to the green service revision. The green service revision is migrating from 0% to 100% of production traffic.
	//       You can use a lifecycle hook for this stage.
	//   +  POST_PRODUCTION_TRAFFIC_SHIFT
	//       The production traffic shift is complete.
	//       You can use a lifecycle hook for this stage.
	//
	//  You must provide this parameter when configuring a deployment lifecycle hook.
	LifecycleStages ServiceDeploymentLifecycleHookLifecycleStagesItemArrayInput `pulumi:"lifecycleStages"`
	// The Amazon Resource Name (ARN) of the IAM role that grants Amazon ECS permission to call Lambda functions on your behalf.
	//  For more information, see [Permissions required for Lambda functions in Amazon ECS blue/green deployments](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/blue-green-permissions.html) in the *Amazon Elastic Container Service Developer Guide*.
	RoleArn pulumi.StringInput `pulumi:"roleArn"`
}

func (ServiceDeploymentLifecycleHookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDeploymentLifecycleHook)(nil)).Elem()
}

func (i ServiceDeploymentLifecycleHookArgs) ToServiceDeploymentLifecycleHookOutput() ServiceDeploymentLifecycleHookOutput {
	return i.ToServiceDeploymentLifecycleHookOutputWithContext(context.Background())
}

func (i ServiceDeploymentLifecycleHookArgs) ToServiceDeploymentLifecycleHookOutputWithContext(ctx context.Context) ServiceDeploymentLifecycleHookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDeploymentLifecycleHookOutput)
}

// ServiceDeploymentLifecycleHookArrayInput is an input type that accepts ServiceDeploymentLifecycleHookArray and ServiceDeploymentLifecycleHookArrayOutput values.
// You can construct a concrete instance of `ServiceDeploymentLifecycleHookArrayInput` via:
//
//	ServiceDeploymentLifecycleHookArray{ ServiceDeploymentLifecycleHookArgs{...} }
type ServiceDeploymentLifecycleHookArrayInput interface {
	pulumi.Input

	ToServiceDeploymentLifecycleHookArrayOutput() ServiceDeploymentLifecycleHookArrayOutput
	ToServiceDeploymentLifecycleHookArrayOutputWithContext(context.Context) ServiceDeploymentLifecycleHookArrayOutput
}

type ServiceDeploymentLifecycleHookArray []ServiceDeploymentLifecycleHookInput

func (ServiceDeploymentLifecycleHookArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceDeploymentLifecycleHook)(nil)).Elem()
}

func (i ServiceDeploymentLifecycleHookArray) ToServiceDeploymentLifecycleHookArrayOutput() ServiceDeploymentLifecycleHookArrayOutput {
	return i.ToServiceDeploymentLifecycleHookArrayOutputWithContext(context.Background())
}

func (i ServiceDeploymentLifecycleHookArray) ToServiceDeploymentLifecycleHookArrayOutputWithContext(ctx context.Context) ServiceDeploymentLifecycleHookArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDeploymentLifecycleHookArrayOutput)
}

// A deployment lifecycle hook runs custom logic at specific stages of the deployment process. Currently, you can use Lambda functions as hook targets.
//
//	For more information, see [Lifecycle hooks for Amazon ECS service deployments](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-lifecycle-hooks.html) in the *Amazon Elastic Container Service Developer Guide*.
type ServiceDeploymentLifecycleHookOutput struct{ *pulumi.OutputState }

func (ServiceDeploymentLifecycleHookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDeploymentLifecycleHook)(nil)).Elem()
}

func (o ServiceDeploymentLifecycleHookOutput) ToServiceDeploymentLifecycleHookOutput() ServiceDeploymentLifecycleHookOutput {
	return o
}

func (o ServiceDeploymentLifecycleHookOutput) ToServiceDeploymentLifecycleHookOutputWithContext(ctx context.Context) ServiceDeploymentLifecycleHookOutput {
	return o
}

// Use this field to specify custom parameters that ECS passes to your hook target invocations (such as a Lambda function).
//
//	This field must be a JSON object as a string.
func (o ServiceDeploymentLifecycleHookOutput) HookDetails() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceDeploymentLifecycleHook) interface{} { return v.HookDetails }).(pulumi.AnyOutput)
}

// The Amazon Resource Name (ARN) of the hook target. Currently, only Lambda function ARNs are supported.
//
//	You must provide this parameter when configuring a deployment lifecycle hook.
func (o ServiceDeploymentLifecycleHookOutput) HookTargetArn() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceDeploymentLifecycleHook) string { return v.HookTargetArn }).(pulumi.StringOutput)
}

// The lifecycle stages at which to run the hook. Choose from these valid values:
//
//   - RECONCILE_SERVICE
//     The reconciliation stage that only happens when you start a new service deployment with more than 1 service revision in an ACTIVE state.
//     You can use a lifecycle hook for this stage.
//
//   - PRE_SCALE_UP
//     The green service revision has not started. The blue service revision is handling 100% of the production traffic. There is no test traffic.
//     You can use a lifecycle hook for this stage.
//
//   - POST_SCALE_UP
//     The green service revision has started. The blue service revision is handling 100% of the production traffic. There is no test traffic.
//     You can use a lifecycle hook for this stage.
//
//   - TEST_TRAFFIC_SHIFT
//     The blue and green service revisions are running. The blue service revision handles 100% of the production traffic. The green service revision is migrating from 0% to 100% of test traffic.
//     You can use a lifecycle hook for this stage.
//
//   - POST_TEST_TRAFFIC_SHIFT
//     The test traffic shift is complete. The green service revision handles 100% of the test traffic.
//     You can use a lifecycle hook for this stage.
//
//   - PRODUCTION_TRAFFIC_SHIFT
//     Production traffic is shifting to the green service revision. The green service revision is migrating from 0% to 100% of production traffic.
//     You can use a lifecycle hook for this stage.
//
//   - POST_PRODUCTION_TRAFFIC_SHIFT
//     The production traffic shift is complete.
//     You can use a lifecycle hook for this stage.
//
//     You must provide this parameter when configuring a deployment lifecycle hook.
func (o ServiceDeploymentLifecycleHookOutput) LifecycleStages() ServiceDeploymentLifecycleHookLifecycleStagesItemArrayOutput {
	return o.ApplyT(func(v ServiceDeploymentLifecycleHook) []ServiceDeploymentLifecycleHookLifecycleStagesItem {
		return v.LifecycleStages
	}).(ServiceDeploymentLifecycleHookLifecycleStagesItemArrayOutput)
}

// The Amazon Resource Name (ARN) of the IAM role that grants Amazon ECS permission to call Lambda functions on your behalf.
//
//	For more information, see [Permissions required for Lambda functions in Amazon ECS blue/green deployments](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/blue-green-permissions.html) in the *Amazon Elastic Container Service Developer Guide*.
func (o ServiceDeploymentLifecycleHookOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceDeploymentLifecycleHook) string { return v.RoleArn }).(pulumi.StringOutput)
}

type ServiceDeploymentLifecycleHookArrayOutput struct{ *pulumi.OutputState }

func (ServiceDeploymentLifecycleHookArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceDeploymentLifecycleHook)(nil)).Elem()
}

func (o ServiceDeploymentLifecycleHookArrayOutput) ToServiceDeploymentLifecycleHookArrayOutput() ServiceDeploymentLifecycleHookArrayOutput {
	return o
}

func (o ServiceDeploymentLifecycleHookArrayOutput) ToServiceDeploymentLifecycleHookArrayOutputWithContext(ctx context.Context) ServiceDeploymentLifecycleHookArrayOutput {
	return o
}

func (o ServiceDeploymentLifecycleHookArrayOutput) Index(i pulumi.IntInput) ServiceDeploymentLifecycleHookOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceDeploymentLifecycleHook {
		return vs[0].([]ServiceDeploymentLifecycleHook)[vs[1].(int)]
	}).(ServiceDeploymentLifecycleHookOutput)
}

// The tag specifications of an Amazon EBS volume.
type ServiceEbsTagSpecification struct {
	// Determines whether to propagate the tags from the task definition to
	// the Amazon EBS volume. Tags can only propagate to a ``SERVICE`` specified in
	// ``ServiceVolumeConfiguration``. If no value is specified, the tags aren't
	// propagated.
	PropagateTags *ServiceEbsTagSpecificationPropagateTags `pulumi:"propagateTags"`
	// The type of volume resource.
	ResourceType string `pulumi:"resourceType"`
	// The tags applied to this Amazon EBS volume. ``AmazonECSCreated`` and ``AmazonECSManaged`` are reserved tags that can't be used.
	Tags []ServiceTag `pulumi:"tags"`
}

// ServiceEbsTagSpecificationInput is an input type that accepts ServiceEbsTagSpecificationArgs and ServiceEbsTagSpecificationOutput values.
// You can construct a concrete instance of `ServiceEbsTagSpecificationInput` via:
//
//	ServiceEbsTagSpecificationArgs{...}
type ServiceEbsTagSpecificationInput interface {
	pulumi.Input

	ToServiceEbsTagSpecificationOutput() ServiceEbsTagSpecificationOutput
	ToServiceEbsTagSpecificationOutputWithContext(context.Context) ServiceEbsTagSpecificationOutput
}

// The tag specifications of an Amazon EBS volume.
type ServiceEbsTagSpecificationArgs struct {
	// Determines whether to propagate the tags from the task definition to
	// the Amazon EBS volume. Tags can only propagate to a ``SERVICE`` specified in
	// ``ServiceVolumeConfiguration``. If no value is specified, the tags aren't
	// propagated.
	PropagateTags ServiceEbsTagSpecificationPropagateTagsPtrInput `pulumi:"propagateTags"`
	// The type of volume resource.
	ResourceType pulumi.StringInput `pulumi:"resourceType"`
	// The tags applied to this Amazon EBS volume. ``AmazonECSCreated`` and ``AmazonECSManaged`` are reserved tags that can't be used.
	Tags ServiceTagArrayInput `pulumi:"tags"`
}

func (ServiceEbsTagSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEbsTagSpecification)(nil)).Elem()
}

func (i ServiceEbsTagSpecificationArgs) ToServiceEbsTagSpecificationOutput() ServiceEbsTagSpecificationOutput {
	return i.ToServiceEbsTagSpecificationOutputWithContext(context.Background())
}

func (i ServiceEbsTagSpecificationArgs) ToServiceEbsTagSpecificationOutputWithContext(ctx context.Context) ServiceEbsTagSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEbsTagSpecificationOutput)
}

// ServiceEbsTagSpecificationArrayInput is an input type that accepts ServiceEbsTagSpecificationArray and ServiceEbsTagSpecificationArrayOutput values.
// You can construct a concrete instance of `ServiceEbsTagSpecificationArrayInput` via:
//
//	ServiceEbsTagSpecificationArray{ ServiceEbsTagSpecificationArgs{...} }
type ServiceEbsTagSpecificationArrayInput interface {
	pulumi.Input

	ToServiceEbsTagSpecificationArrayOutput() ServiceEbsTagSpecificationArrayOutput
	ToServiceEbsTagSpecificationArrayOutputWithContext(context.Context) ServiceEbsTagSpecificationArrayOutput
}

type ServiceEbsTagSpecificationArray []ServiceEbsTagSpecificationInput

func (ServiceEbsTagSpecificationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceEbsTagSpecification)(nil)).Elem()
}

func (i ServiceEbsTagSpecificationArray) ToServiceEbsTagSpecificationArrayOutput() ServiceEbsTagSpecificationArrayOutput {
	return i.ToServiceEbsTagSpecificationArrayOutputWithContext(context.Background())
}

func (i ServiceEbsTagSpecificationArray) ToServiceEbsTagSpecificationArrayOutputWithContext(ctx context.Context) ServiceEbsTagSpecificationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEbsTagSpecificationArrayOutput)
}

// The tag specifications of an Amazon EBS volume.
type ServiceEbsTagSpecificationOutput struct{ *pulumi.OutputState }

func (ServiceEbsTagSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEbsTagSpecification)(nil)).Elem()
}

func (o ServiceEbsTagSpecificationOutput) ToServiceEbsTagSpecificationOutput() ServiceEbsTagSpecificationOutput {
	return o
}

func (o ServiceEbsTagSpecificationOutput) ToServiceEbsTagSpecificationOutputWithContext(ctx context.Context) ServiceEbsTagSpecificationOutput {
	return o
}

// Determines whether to propagate the tags from the task definition to
// the Amazon EBS volume. Tags can only propagate to a “SERVICE“ specified in
// “ServiceVolumeConfiguration“. If no value is specified, the tags aren't
// propagated.
func (o ServiceEbsTagSpecificationOutput) PropagateTags() ServiceEbsTagSpecificationPropagateTagsPtrOutput {
	return o.ApplyT(func(v ServiceEbsTagSpecification) *ServiceEbsTagSpecificationPropagateTags { return v.PropagateTags }).(ServiceEbsTagSpecificationPropagateTagsPtrOutput)
}

// The type of volume resource.
func (o ServiceEbsTagSpecificationOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceEbsTagSpecification) string { return v.ResourceType }).(pulumi.StringOutput)
}

// The tags applied to this Amazon EBS volume. “AmazonECSCreated“ and “AmazonECSManaged“ are reserved tags that can't be used.
func (o ServiceEbsTagSpecificationOutput) Tags() ServiceTagArrayOutput {
	return o.ApplyT(func(v ServiceEbsTagSpecification) []ServiceTag { return v.Tags }).(ServiceTagArrayOutput)
}

type ServiceEbsTagSpecificationArrayOutput struct{ *pulumi.OutputState }

func (ServiceEbsTagSpecificationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceEbsTagSpecification)(nil)).Elem()
}

func (o ServiceEbsTagSpecificationArrayOutput) ToServiceEbsTagSpecificationArrayOutput() ServiceEbsTagSpecificationArrayOutput {
	return o
}

func (o ServiceEbsTagSpecificationArrayOutput) ToServiceEbsTagSpecificationArrayOutputWithContext(ctx context.Context) ServiceEbsTagSpecificationArrayOutput {
	return o
}

func (o ServiceEbsTagSpecificationArrayOutput) Index(i pulumi.IntInput) ServiceEbsTagSpecificationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceEbsTagSpecification {
		return vs[0].([]ServiceEbsTagSpecification)[vs[1].(int)]
	}).(ServiceEbsTagSpecificationOutput)
}

// Determines whether to force a new deployment of the service. By default, deployments aren't forced. You can use this option to start a new deployment with no service definition changes. For example, you can update a service's tasks to use a newer Docker image with the same image/tag combination (“my_image:latest“) or to roll Fargate tasks onto a newer platform version.
type ServiceForceNewDeployment struct {
	// Determines whether to force a new deployment of the service. By default, deployments aren't forced. You can use this option to start a new deployment with no service definition changes. For example, you can update a service's tasks to use a newer Docker image with the same image/tag combination (``my_image:latest``) or to roll Fargate tasks onto a newer platform version.
	EnableForceNewDeployment bool `pulumi:"enableForceNewDeployment"`
	// When you change the``ForceNewDeploymentNonce`` value in your template, it signals ECS to start a new deployment even though no other service parameters have changed. The value must be a unique, time- varying value like a timestamp, random string, or sequence number. Use this property when you want to ensure your tasks pick up the latest version of a Docker image that uses the same tag but has been updated in the registry.
	ForceNewDeploymentNonce *string `pulumi:"forceNewDeploymentNonce"`
}

// ServiceForceNewDeploymentInput is an input type that accepts ServiceForceNewDeploymentArgs and ServiceForceNewDeploymentOutput values.
// You can construct a concrete instance of `ServiceForceNewDeploymentInput` via:
//
//	ServiceForceNewDeploymentArgs{...}
type ServiceForceNewDeploymentInput interface {
	pulumi.Input

	ToServiceForceNewDeploymentOutput() ServiceForceNewDeploymentOutput
	ToServiceForceNewDeploymentOutputWithContext(context.Context) ServiceForceNewDeploymentOutput
}

// Determines whether to force a new deployment of the service. By default, deployments aren't forced. You can use this option to start a new deployment with no service definition changes. For example, you can update a service's tasks to use a newer Docker image with the same image/tag combination (“my_image:latest“) or to roll Fargate tasks onto a newer platform version.
type ServiceForceNewDeploymentArgs struct {
	// Determines whether to force a new deployment of the service. By default, deployments aren't forced. You can use this option to start a new deployment with no service definition changes. For example, you can update a service's tasks to use a newer Docker image with the same image/tag combination (``my_image:latest``) or to roll Fargate tasks onto a newer platform version.
	EnableForceNewDeployment pulumi.BoolInput `pulumi:"enableForceNewDeployment"`
	// When you change the``ForceNewDeploymentNonce`` value in your template, it signals ECS to start a new deployment even though no other service parameters have changed. The value must be a unique, time- varying value like a timestamp, random string, or sequence number. Use this property when you want to ensure your tasks pick up the latest version of a Docker image that uses the same tag but has been updated in the registry.
	ForceNewDeploymentNonce pulumi.StringPtrInput `pulumi:"forceNewDeploymentNonce"`
}

func (ServiceForceNewDeploymentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceForceNewDeployment)(nil)).Elem()
}

func (i ServiceForceNewDeploymentArgs) ToServiceForceNewDeploymentOutput() ServiceForceNewDeploymentOutput {
	return i.ToServiceForceNewDeploymentOutputWithContext(context.Background())
}

func (i ServiceForceNewDeploymentArgs) ToServiceForceNewDeploymentOutputWithContext(ctx context.Context) ServiceForceNewDeploymentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceForceNewDeploymentOutput)
}

func (i ServiceForceNewDeploymentArgs) ToServiceForceNewDeploymentPtrOutput() ServiceForceNewDeploymentPtrOutput {
	return i.ToServiceForceNewDeploymentPtrOutputWithContext(context.Background())
}

func (i ServiceForceNewDeploymentArgs) ToServiceForceNewDeploymentPtrOutputWithContext(ctx context.Context) ServiceForceNewDeploymentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceForceNewDeploymentOutput).ToServiceForceNewDeploymentPtrOutputWithContext(ctx)
}

// ServiceForceNewDeploymentPtrInput is an input type that accepts ServiceForceNewDeploymentArgs, ServiceForceNewDeploymentPtr and ServiceForceNewDeploymentPtrOutput values.
// You can construct a concrete instance of `ServiceForceNewDeploymentPtrInput` via:
//
//	        ServiceForceNewDeploymentArgs{...}
//
//	or:
//
//	        nil
type ServiceForceNewDeploymentPtrInput interface {
	pulumi.Input

	ToServiceForceNewDeploymentPtrOutput() ServiceForceNewDeploymentPtrOutput
	ToServiceForceNewDeploymentPtrOutputWithContext(context.Context) ServiceForceNewDeploymentPtrOutput
}

type serviceForceNewDeploymentPtrType ServiceForceNewDeploymentArgs

func ServiceForceNewDeploymentPtr(v *ServiceForceNewDeploymentArgs) ServiceForceNewDeploymentPtrInput {
	return (*serviceForceNewDeploymentPtrType)(v)
}

func (*serviceForceNewDeploymentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceForceNewDeployment)(nil)).Elem()
}

func (i *serviceForceNewDeploymentPtrType) ToServiceForceNewDeploymentPtrOutput() ServiceForceNewDeploymentPtrOutput {
	return i.ToServiceForceNewDeploymentPtrOutputWithContext(context.Background())
}

func (i *serviceForceNewDeploymentPtrType) ToServiceForceNewDeploymentPtrOutputWithContext(ctx context.Context) ServiceForceNewDeploymentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceForceNewDeploymentPtrOutput)
}

// Determines whether to force a new deployment of the service. By default, deployments aren't forced. You can use this option to start a new deployment with no service definition changes. For example, you can update a service's tasks to use a newer Docker image with the same image/tag combination (“my_image:latest“) or to roll Fargate tasks onto a newer platform version.
type ServiceForceNewDeploymentOutput struct{ *pulumi.OutputState }

func (ServiceForceNewDeploymentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceForceNewDeployment)(nil)).Elem()
}

func (o ServiceForceNewDeploymentOutput) ToServiceForceNewDeploymentOutput() ServiceForceNewDeploymentOutput {
	return o
}

func (o ServiceForceNewDeploymentOutput) ToServiceForceNewDeploymentOutputWithContext(ctx context.Context) ServiceForceNewDeploymentOutput {
	return o
}

func (o ServiceForceNewDeploymentOutput) ToServiceForceNewDeploymentPtrOutput() ServiceForceNewDeploymentPtrOutput {
	return o.ToServiceForceNewDeploymentPtrOutputWithContext(context.Background())
}

func (o ServiceForceNewDeploymentOutput) ToServiceForceNewDeploymentPtrOutputWithContext(ctx context.Context) ServiceForceNewDeploymentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceForceNewDeployment) *ServiceForceNewDeployment {
		return &v
	}).(ServiceForceNewDeploymentPtrOutput)
}

// Determines whether to force a new deployment of the service. By default, deployments aren't forced. You can use this option to start a new deployment with no service definition changes. For example, you can update a service's tasks to use a newer Docker image with the same image/tag combination (“my_image:latest“) or to roll Fargate tasks onto a newer platform version.
func (o ServiceForceNewDeploymentOutput) EnableForceNewDeployment() pulumi.BoolOutput {
	return o.ApplyT(func(v ServiceForceNewDeployment) bool { return v.EnableForceNewDeployment }).(pulumi.BoolOutput)
}

// When you change the“ForceNewDeploymentNonce“ value in your template, it signals ECS to start a new deployment even though no other service parameters have changed. The value must be a unique, time- varying value like a timestamp, random string, or sequence number. Use this property when you want to ensure your tasks pick up the latest version of a Docker image that uses the same tag but has been updated in the registry.
func (o ServiceForceNewDeploymentOutput) ForceNewDeploymentNonce() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceForceNewDeployment) *string { return v.ForceNewDeploymentNonce }).(pulumi.StringPtrOutput)
}

type ServiceForceNewDeploymentPtrOutput struct{ *pulumi.OutputState }

func (ServiceForceNewDeploymentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceForceNewDeployment)(nil)).Elem()
}

func (o ServiceForceNewDeploymentPtrOutput) ToServiceForceNewDeploymentPtrOutput() ServiceForceNewDeploymentPtrOutput {
	return o
}

func (o ServiceForceNewDeploymentPtrOutput) ToServiceForceNewDeploymentPtrOutputWithContext(ctx context.Context) ServiceForceNewDeploymentPtrOutput {
	return o
}

func (o ServiceForceNewDeploymentPtrOutput) Elem() ServiceForceNewDeploymentOutput {
	return o.ApplyT(func(v *ServiceForceNewDeployment) ServiceForceNewDeployment {
		if v != nil {
			return *v
		}
		var ret ServiceForceNewDeployment
		return ret
	}).(ServiceForceNewDeploymentOutput)
}

// Determines whether to force a new deployment of the service. By default, deployments aren't forced. You can use this option to start a new deployment with no service definition changes. For example, you can update a service's tasks to use a newer Docker image with the same image/tag combination (“my_image:latest“) or to roll Fargate tasks onto a newer platform version.
func (o ServiceForceNewDeploymentPtrOutput) EnableForceNewDeployment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceForceNewDeployment) *bool {
		if v == nil {
			return nil
		}
		return &v.EnableForceNewDeployment
	}).(pulumi.BoolPtrOutput)
}

// When you change the“ForceNewDeploymentNonce“ value in your template, it signals ECS to start a new deployment even though no other service parameters have changed. The value must be a unique, time- varying value like a timestamp, random string, or sequence number. Use this property when you want to ensure your tasks pick up the latest version of a Docker image that uses the same tag but has been updated in the registry.
func (o ServiceForceNewDeploymentPtrOutput) ForceNewDeploymentNonce() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceForceNewDeployment) *string {
		if v == nil {
			return nil
		}
		return v.ForceNewDeploymentNonce
	}).(pulumi.StringPtrOutput)
}

// The “LoadBalancer“ property specifies details on a load balancer that is used with a service.
//
//	If the service is using the ``CODE_DEPLOY`` deployment controller, the service is required to use either an Application Load Balancer or Network Load Balancer. When you are creating an ACDlong deployment group, you specify two target groups (referred to as a ``targetGroupPair``). Each target group binds to a separate task set in the deployment. The load balancer can also have up to two listeners, a required listener for production traffic and an optional listener that allows you to test new revisions of the service before routing production traffic to it.
//	Services with tasks that use the ``awsvpc`` network mode (for example, those with the Fargate launch type) only support Application Load Balancers and Network Load Balancers. Classic Load Balancers are not supported. Also, when you create any target groups for these services, you must choose ``ip`` as the target type, not ``instance``. Tasks that use the ``awsvpc`` network mode are associated with an elastic network interface, not an Amazon EC2 instance.
type ServiceLoadBalancer struct {
	// The advanced settings for the load balancer used in blue/green deployments. Specify the alternate target group, listener rules, and IAM role required for traffic shifting during blue/green deployments.
	AdvancedConfiguration *ServiceAdvancedConfiguration `pulumi:"advancedConfiguration"`
	// The name of the container (as it appears in a container definition) to associate with the load balancer.
	//  You need to specify the container name when configuring the target group for an Amazon ECS load balancer.
	ContainerName *string `pulumi:"containerName"`
	// The port on the container to associate with the load balancer. This port must correspond to a ``containerPort`` in the task definition the tasks in the service are using. For tasks that use the EC2 launch type, the container instance they're launched on must allow ingress traffic on the ``hostPort`` of the port mapping.
	ContainerPort *int `pulumi:"containerPort"`
	// The name of the load balancer to associate with the Amazon ECS service or task set.
	//  If you are using an Application Load Balancer or a Network Load Balancer the load balancer name parameter should be omitted.
	LoadBalancerName *string `pulumi:"loadBalancerName"`
	// The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or groups associated with a service or task set.
	//  A target group ARN is only specified when using an Application Load Balancer or Network Load Balancer.
	//  For services using the ``ECS`` deployment controller, you can specify one or multiple target groups. For more information, see [Registering multiple target groups with a service](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html) in the *Amazon Elastic Container Service Developer Guide*.
	//  For services using the ``CODE_DEPLOY`` deployment controller, you're required to define two target groups for the load balancer. For more information, see [Blue/green deployment with CodeDeploy](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html) in the *Amazon Elastic Container Service Developer Guide*.
	//   If your service's task definition uses the ``awsvpc`` network mode, you must choose ``ip`` as the target type, not ``instance``. Do this when creating your target groups because tasks that use the ``awsvpc`` network mode are associated with an elastic network interface, not an Amazon EC2 instance. This network mode is required for the Fargate launch type.
	TargetGroupArn *string `pulumi:"targetGroupArn"`
}

// ServiceLoadBalancerInput is an input type that accepts ServiceLoadBalancerArgs and ServiceLoadBalancerOutput values.
// You can construct a concrete instance of `ServiceLoadBalancerInput` via:
//
//	ServiceLoadBalancerArgs{...}
type ServiceLoadBalancerInput interface {
	pulumi.Input

	ToServiceLoadBalancerOutput() ServiceLoadBalancerOutput
	ToServiceLoadBalancerOutputWithContext(context.Context) ServiceLoadBalancerOutput
}

// The “LoadBalancer“ property specifies details on a load balancer that is used with a service.
//
//	If the service is using the ``CODE_DEPLOY`` deployment controller, the service is required to use either an Application Load Balancer or Network Load Balancer. When you are creating an ACDlong deployment group, you specify two target groups (referred to as a ``targetGroupPair``). Each target group binds to a separate task set in the deployment. The load balancer can also have up to two listeners, a required listener for production traffic and an optional listener that allows you to test new revisions of the service before routing production traffic to it.
//	Services with tasks that use the ``awsvpc`` network mode (for example, those with the Fargate launch type) only support Application Load Balancers and Network Load Balancers. Classic Load Balancers are not supported. Also, when you create any target groups for these services, you must choose ``ip`` as the target type, not ``instance``. Tasks that use the ``awsvpc`` network mode are associated with an elastic network interface, not an Amazon EC2 instance.
type ServiceLoadBalancerArgs struct {
	// The advanced settings for the load balancer used in blue/green deployments. Specify the alternate target group, listener rules, and IAM role required for traffic shifting during blue/green deployments.
	AdvancedConfiguration ServiceAdvancedConfigurationPtrInput `pulumi:"advancedConfiguration"`
	// The name of the container (as it appears in a container definition) to associate with the load balancer.
	//  You need to specify the container name when configuring the target group for an Amazon ECS load balancer.
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// The port on the container to associate with the load balancer. This port must correspond to a ``containerPort`` in the task definition the tasks in the service are using. For tasks that use the EC2 launch type, the container instance they're launched on must allow ingress traffic on the ``hostPort`` of the port mapping.
	ContainerPort pulumi.IntPtrInput `pulumi:"containerPort"`
	// The name of the load balancer to associate with the Amazon ECS service or task set.
	//  If you are using an Application Load Balancer or a Network Load Balancer the load balancer name parameter should be omitted.
	LoadBalancerName pulumi.StringPtrInput `pulumi:"loadBalancerName"`
	// The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or groups associated with a service or task set.
	//  A target group ARN is only specified when using an Application Load Balancer or Network Load Balancer.
	//  For services using the ``ECS`` deployment controller, you can specify one or multiple target groups. For more information, see [Registering multiple target groups with a service](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html) in the *Amazon Elastic Container Service Developer Guide*.
	//  For services using the ``CODE_DEPLOY`` deployment controller, you're required to define two target groups for the load balancer. For more information, see [Blue/green deployment with CodeDeploy](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html) in the *Amazon Elastic Container Service Developer Guide*.
	//   If your service's task definition uses the ``awsvpc`` network mode, you must choose ``ip`` as the target type, not ``instance``. Do this when creating your target groups because tasks that use the ``awsvpc`` network mode are associated with an elastic network interface, not an Amazon EC2 instance. This network mode is required for the Fargate launch type.
	TargetGroupArn pulumi.StringPtrInput `pulumi:"targetGroupArn"`
}

func (ServiceLoadBalancerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLoadBalancer)(nil)).Elem()
}

func (i ServiceLoadBalancerArgs) ToServiceLoadBalancerOutput() ServiceLoadBalancerOutput {
	return i.ToServiceLoadBalancerOutputWithContext(context.Background())
}

func (i ServiceLoadBalancerArgs) ToServiceLoadBalancerOutputWithContext(ctx context.Context) ServiceLoadBalancerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLoadBalancerOutput)
}

// ServiceLoadBalancerArrayInput is an input type that accepts ServiceLoadBalancerArray and ServiceLoadBalancerArrayOutput values.
// You can construct a concrete instance of `ServiceLoadBalancerArrayInput` via:
//
//	ServiceLoadBalancerArray{ ServiceLoadBalancerArgs{...} }
type ServiceLoadBalancerArrayInput interface {
	pulumi.Input

	ToServiceLoadBalancerArrayOutput() ServiceLoadBalancerArrayOutput
	ToServiceLoadBalancerArrayOutputWithContext(context.Context) ServiceLoadBalancerArrayOutput
}

type ServiceLoadBalancerArray []ServiceLoadBalancerInput

func (ServiceLoadBalancerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceLoadBalancer)(nil)).Elem()
}

func (i ServiceLoadBalancerArray) ToServiceLoadBalancerArrayOutput() ServiceLoadBalancerArrayOutput {
	return i.ToServiceLoadBalancerArrayOutputWithContext(context.Background())
}

func (i ServiceLoadBalancerArray) ToServiceLoadBalancerArrayOutputWithContext(ctx context.Context) ServiceLoadBalancerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLoadBalancerArrayOutput)
}

// The “LoadBalancer“ property specifies details on a load balancer that is used with a service.
//
//	If the service is using the ``CODE_DEPLOY`` deployment controller, the service is required to use either an Application Load Balancer or Network Load Balancer. When you are creating an ACDlong deployment group, you specify two target groups (referred to as a ``targetGroupPair``). Each target group binds to a separate task set in the deployment. The load balancer can also have up to two listeners, a required listener for production traffic and an optional listener that allows you to test new revisions of the service before routing production traffic to it.
//	Services with tasks that use the ``awsvpc`` network mode (for example, those with the Fargate launch type) only support Application Load Balancers and Network Load Balancers. Classic Load Balancers are not supported. Also, when you create any target groups for these services, you must choose ``ip`` as the target type, not ``instance``. Tasks that use the ``awsvpc`` network mode are associated with an elastic network interface, not an Amazon EC2 instance.
type ServiceLoadBalancerOutput struct{ *pulumi.OutputState }

func (ServiceLoadBalancerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLoadBalancer)(nil)).Elem()
}

func (o ServiceLoadBalancerOutput) ToServiceLoadBalancerOutput() ServiceLoadBalancerOutput {
	return o
}

func (o ServiceLoadBalancerOutput) ToServiceLoadBalancerOutputWithContext(ctx context.Context) ServiceLoadBalancerOutput {
	return o
}

// The advanced settings for the load balancer used in blue/green deployments. Specify the alternate target group, listener rules, and IAM role required for traffic shifting during blue/green deployments.
func (o ServiceLoadBalancerOutput) AdvancedConfiguration() ServiceAdvancedConfigurationPtrOutput {
	return o.ApplyT(func(v ServiceLoadBalancer) *ServiceAdvancedConfiguration { return v.AdvancedConfiguration }).(ServiceAdvancedConfigurationPtrOutput)
}

// The name of the container (as it appears in a container definition) to associate with the load balancer.
//
//	You need to specify the container name when configuring the target group for an Amazon ECS load balancer.
func (o ServiceLoadBalancerOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceLoadBalancer) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// The port on the container to associate with the load balancer. This port must correspond to a “containerPort“ in the task definition the tasks in the service are using. For tasks that use the EC2 launch type, the container instance they're launched on must allow ingress traffic on the “hostPort“ of the port mapping.
func (o ServiceLoadBalancerOutput) ContainerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceLoadBalancer) *int { return v.ContainerPort }).(pulumi.IntPtrOutput)
}

// The name of the load balancer to associate with the Amazon ECS service or task set.
//
//	If you are using an Application Load Balancer or a Network Load Balancer the load balancer name parameter should be omitted.
func (o ServiceLoadBalancerOutput) LoadBalancerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceLoadBalancer) *string { return v.LoadBalancerName }).(pulumi.StringPtrOutput)
}

// The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or groups associated with a service or task set.
//
//	A target group ARN is only specified when using an Application Load Balancer or Network Load Balancer.
//	For services using the ``ECS`` deployment controller, you can specify one or multiple target groups. For more information, see [Registering multiple target groups with a service](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html) in the *Amazon Elastic Container Service Developer Guide*.
//	For services using the ``CODE_DEPLOY`` deployment controller, you're required to define two target groups for the load balancer. For more information, see [Blue/green deployment with CodeDeploy](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html) in the *Amazon Elastic Container Service Developer Guide*.
//	 If your service's task definition uses the ``awsvpc`` network mode, you must choose ``ip`` as the target type, not ``instance``. Do this when creating your target groups because tasks that use the ``awsvpc`` network mode are associated with an elastic network interface, not an Amazon EC2 instance. This network mode is required for the Fargate launch type.
func (o ServiceLoadBalancerOutput) TargetGroupArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceLoadBalancer) *string { return v.TargetGroupArn }).(pulumi.StringPtrOutput)
}

type ServiceLoadBalancerArrayOutput struct{ *pulumi.OutputState }

func (ServiceLoadBalancerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceLoadBalancer)(nil)).Elem()
}

func (o ServiceLoadBalancerArrayOutput) ToServiceLoadBalancerArrayOutput() ServiceLoadBalancerArrayOutput {
	return o
}

func (o ServiceLoadBalancerArrayOutput) ToServiceLoadBalancerArrayOutputWithContext(ctx context.Context) ServiceLoadBalancerArrayOutput {
	return o
}

func (o ServiceLoadBalancerArrayOutput) Index(i pulumi.IntInput) ServiceLoadBalancerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceLoadBalancer {
		return vs[0].([]ServiceLoadBalancer)[vs[1].(int)]
	}).(ServiceLoadBalancerOutput)
}

// The log configuration for the container. This parameter maps to “LogConfig“ in the docker container create command and the “--log-driver“ option to docker run.
//
//	By default, containers use the same logging driver that the Docker daemon uses. However, the container might use a different logging driver than the Docker daemon by specifying a log driver configuration in the container definition.
//	Understand the following when specifying a log configuration for your containers.
//	 +  Amazon ECS currently supports a subset of the logging drivers available to the Docker daemon. Additional log drivers may be available in future releases of the Amazon ECS container agent.
//	     For tasks on FARGATElong, the supported log drivers are ``awslogs``, ``splunk``, and ``awsfirelens``.
//	     For tasks hosted on Amazon EC2 instances, the supported log drivers are ``awslogs``, ``fluentd``, ``gelf``, ``json-file``, ``journald``,``syslog``, ``splunk``, and ``awsfirelens``.
//	 +  This parameter requires version 1.18 of the Docker Remote API or greater on your container instance.
//	 +  For tasks that are hosted on Amazon EC2 instances, the Amazon ECS container agent must register the available logging drivers with the ``ECS_AVAILABLE_LOGGING_DRIVERS`` environment variable before containers placed on that instance can use these log configuration options. For more information, see [Amazon ECS container agent configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the *Amazon Elastic Container Service Developer Guide*.
//	 +  For tasks that are on FARGATElong, because you don't have access to the underlying infrastructure your tasks are hosted on, any additional software needed must be installed outside of the task. For example, the Fluentd output aggregators or a remote host running Logstash to send Gelf logs to.
type ServiceLogConfiguration struct {
	// The log driver to use for the container.
	//  For tasks on FARGATElong, the supported log drivers are ``awslogs``, ``splunk``, and ``awsfirelens``.
	//  For tasks hosted on Amazon EC2 instances, the supported log drivers are ``awslogs``, ``fluentd``, ``gelf``, ``json-file``, ``journald``, ``syslog``, ``splunk``, and ``awsfirelens``.
	//  For more information about using the ``awslogs`` log driver, see [Send Amazon ECS logs to CloudWatch](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_awslogs.html) in the *Amazon Elastic Container Service Developer Guide*.
	//  For more information about using the ``awsfirelens`` log driver, see [Send Amazon ECS logs to an service or Partner](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html).
	//   If you have a custom driver that isn't listed, you can fork the Amazon ECS container agent project that's [available on GitHub](https://docs.aws.amazon.com/https://github.com/aws/amazon-ecs-agent) and customize it to work with that driver. We encourage you to submit pull requests for changes that you would like to have included. However, we don't currently provide support for running modified copies of this software.
	LogDriver *string `pulumi:"logDriver"`
	// The configuration options to send to the log driver.
	//  The options you can specify depend on the log driver. Some of the options you can specify when you use the ``awslogs`` log driver to route logs to Amazon CloudWatch include the following:
	//   + awslogs-create-group Required: No Specify whether you want the log group to be created automatically. If this option isn't specified, it defaults to false. Your IAM policy must include the logs:CreateLogGroup permission before you attempt to use awslogs-create-group. + awslogs-region Required: Yes Specify the Region that the awslogs log driver is to send your Docker logs to. You can choose to send all of your logs from clusters in different Regions to a single region in CloudWatch Logs. This is so that they're all visible in one location. Otherwise, you can separate them by Region for more granularity. Make sure that the specified log group exists in the Region that you specify with this option. + awslogs-group Required: Yes Make sure to specify a log group that the awslogs log driver sends its log streams to. + awslogs-stream-prefix Required: Yes, when using Fargate.Optional when using EC2. Use the awslogs-stream-prefix option to associate a log stream with the specified prefix, the container name, and the ID of the Amazon ECS task that the container belongs to. If you specify a prefix with this option, then the log stream takes the format prefix-name/container-name/ecs-task-id. If you don't specify a prefix with this option, then the log stream is named after the container ID that's assigned by the Docker daemon on the container instance. Because it's difficult to trace logs back to the container that sent them with just the Docker container ID (which is only available on the container instance), we recommend that you specify a prefix with this option. For Amazon ECS services, you can use the service name as the prefix. Doing so, you can trace log streams to the service that the container belongs to, the name of the container that sent them, and the ID of the task that the container belongs to. You must specify a stream-prefix for your logs to have your logs appear in the Log pane when using the Amazon ECS console. + awslogs-datetime-format Required: No This option defines a multiline start pattern in Python strftime format. A log message consists of a line that matches the pattern and any following lines that don’t match the pattern. The matched line is the delimiter between log messages. One example of a use case for using this format is for parsing output such as a stack dump, which might otherwise be logged in multiple entries. The correct pattern allows it to be captured in a single entry. For more information, see awslogs-datetime-format. You cannot configure both the awslogs-datetime-format and awslogs-multiline-pattern options. Multiline logging performs regular expression parsing and matching of all log messages. This might have a negative impact on logging performance. + awslogs-multiline-pattern Required: No This option defines a multiline start pattern that uses a regular expression. A log message consists of a line that matches the pattern and any following lines that don’t match the pattern. The matched line is the delimiter between log messages. For more information, see awslogs-multiline-pattern. This option is ignored if awslogs-datetime-format is also configured. You cannot configure both the awslogs-datetime-format and awslogs-multiline-pattern options. Multiline logging performs regular expression parsing and matching of all log messages. This might have a negative impact on logging performance.
	//      The following options apply to all supported log drivers.
	//   + mode Required: No Valid values: non-blocking | blocking This option defines the delivery mode of log messages from the container to the log driver specified using logDriver. The delivery mode you choose affects application availability when the flow of logs from container is interrupted. If you use the blocking mode and the flow of logs is interrupted, calls from container code to write to the stdout and stderr streams will block. The logging thread of the application will block as a result. This may cause the application to become unresponsive and lead to container healthcheck failure. If you use the non-blocking mode, the container's logs are instead stored in an in-memory intermediate buffer configured with the max-buffer-size option. This prevents the application from becoming unresponsive when logs cannot be sent. We recommend using this mode if you want to ensure service availability and are okay with some log loss. For more information, see Preventing log loss with non-blocking mode in the awslogs container log driver. You can set a default mode for all containers in a specific Region by using the defaultLogDriverMode account setting. If you don't specify the mode option or configure the account setting, Amazon ECS will default to the non-blocking mode. For more information about the account setting, see Default log driver mode in the Amazon Elastic Container Service Developer Guide. On June 25, 2025, Amazon ECS changed the default log driver mode from blocking to non-blocking to prioritize task availability over logging. To continue using the blocking mode after this change, do one of the following: Set the mode option in your container definition's logConfiguration as blocking. Set the defaultLogDriverMode account setting to blocking. + max-buffer-size Required: No Default value: 10m When non-blocking mode is used, the max-buffer-size log option controls the size of the buffer that's used for intermediate message storage. Make sure to specify an adequate buffer size based on your application. When the buffer fills up, further logs cannot be stored. Logs that cannot be stored are lost.
	//      To route logs using the ``splunk`` log router, you need to specify a ``splunk-token`` and a ``splunk-url``.
	//      When you use the ``awsfirelens`` log router to route logs to an AWS Service or AWS Partner Network destination for log storage and analytics, you can set the ``log-driver-buffer-limit`` option to limit the number of events that are buffered in memory, before being sent to the log router container. It can help to resolve potential log loss issue because high throughput might result in memory running out for the buffer inside of Docker.
	//      Other options you can specify when using ``awsfirelens`` to route logs depend on the destination. When you export logs to Amazon Data Firehose, you can specify the AWS Region with ``region`` and a name for the log stream with ``delivery_stream``.
	//      When you export logs to Amazon Kinesis Data Streams, you can specify an AWS Region with ``region`` and a data stream name with ``stream``.
	//       When you export logs to Amazon OpenSearch Service, you can specify options like ``Name``, ``Host`` (OpenSearch Service endpoint without protocol), ``Port``, ``Index``, ``Type``, ``Aws_auth``, ``Aws_region``, ``Suppress_Type_Name``, and ``tls``. For more information, see [Under the hood: FireLens for Amazon ECS Tasks](https://docs.aws.amazon.com/containers/under-the-hood-firelens-for-amazon-ecs-tasks/).
	//      When you export logs to Amazon S3, you can specify the bucket using the ``bucket`` option. You can also specify ``region``, ``total_file_size``, ``upload_timeout``, and ``use_put_object`` as options.
	//      This parameter requires version 1.19 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: ``sudo docker version --format '{{.Server.APIVersion}}'``
	Options map[string]string `pulumi:"options"`
	// The secrets to pass to the log configuration. For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the *Amazon Elastic Container Service Developer Guide*.
	SecretOptions []ServiceSecret `pulumi:"secretOptions"`
}

// ServiceLogConfigurationInput is an input type that accepts ServiceLogConfigurationArgs and ServiceLogConfigurationOutput values.
// You can construct a concrete instance of `ServiceLogConfigurationInput` via:
//
//	ServiceLogConfigurationArgs{...}
type ServiceLogConfigurationInput interface {
	pulumi.Input

	ToServiceLogConfigurationOutput() ServiceLogConfigurationOutput
	ToServiceLogConfigurationOutputWithContext(context.Context) ServiceLogConfigurationOutput
}

// The log configuration for the container. This parameter maps to “LogConfig“ in the docker container create command and the “--log-driver“ option to docker run.
//
//	By default, containers use the same logging driver that the Docker daemon uses. However, the container might use a different logging driver than the Docker daemon by specifying a log driver configuration in the container definition.
//	Understand the following when specifying a log configuration for your containers.
//	 +  Amazon ECS currently supports a subset of the logging drivers available to the Docker daemon. Additional log drivers may be available in future releases of the Amazon ECS container agent.
//	     For tasks on FARGATElong, the supported log drivers are ``awslogs``, ``splunk``, and ``awsfirelens``.
//	     For tasks hosted on Amazon EC2 instances, the supported log drivers are ``awslogs``, ``fluentd``, ``gelf``, ``json-file``, ``journald``,``syslog``, ``splunk``, and ``awsfirelens``.
//	 +  This parameter requires version 1.18 of the Docker Remote API or greater on your container instance.
//	 +  For tasks that are hosted on Amazon EC2 instances, the Amazon ECS container agent must register the available logging drivers with the ``ECS_AVAILABLE_LOGGING_DRIVERS`` environment variable before containers placed on that instance can use these log configuration options. For more information, see [Amazon ECS container agent configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the *Amazon Elastic Container Service Developer Guide*.
//	 +  For tasks that are on FARGATElong, because you don't have access to the underlying infrastructure your tasks are hosted on, any additional software needed must be installed outside of the task. For example, the Fluentd output aggregators or a remote host running Logstash to send Gelf logs to.
type ServiceLogConfigurationArgs struct {
	// The log driver to use for the container.
	//  For tasks on FARGATElong, the supported log drivers are ``awslogs``, ``splunk``, and ``awsfirelens``.
	//  For tasks hosted on Amazon EC2 instances, the supported log drivers are ``awslogs``, ``fluentd``, ``gelf``, ``json-file``, ``journald``, ``syslog``, ``splunk``, and ``awsfirelens``.
	//  For more information about using the ``awslogs`` log driver, see [Send Amazon ECS logs to CloudWatch](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_awslogs.html) in the *Amazon Elastic Container Service Developer Guide*.
	//  For more information about using the ``awsfirelens`` log driver, see [Send Amazon ECS logs to an service or Partner](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html).
	//   If you have a custom driver that isn't listed, you can fork the Amazon ECS container agent project that's [available on GitHub](https://docs.aws.amazon.com/https://github.com/aws/amazon-ecs-agent) and customize it to work with that driver. We encourage you to submit pull requests for changes that you would like to have included. However, we don't currently provide support for running modified copies of this software.
	LogDriver pulumi.StringPtrInput `pulumi:"logDriver"`
	// The configuration options to send to the log driver.
	//  The options you can specify depend on the log driver. Some of the options you can specify when you use the ``awslogs`` log driver to route logs to Amazon CloudWatch include the following:
	//   + awslogs-create-group Required: No Specify whether you want the log group to be created automatically. If this option isn't specified, it defaults to false. Your IAM policy must include the logs:CreateLogGroup permission before you attempt to use awslogs-create-group. + awslogs-region Required: Yes Specify the Region that the awslogs log driver is to send your Docker logs to. You can choose to send all of your logs from clusters in different Regions to a single region in CloudWatch Logs. This is so that they're all visible in one location. Otherwise, you can separate them by Region for more granularity. Make sure that the specified log group exists in the Region that you specify with this option. + awslogs-group Required: Yes Make sure to specify a log group that the awslogs log driver sends its log streams to. + awslogs-stream-prefix Required: Yes, when using Fargate.Optional when using EC2. Use the awslogs-stream-prefix option to associate a log stream with the specified prefix, the container name, and the ID of the Amazon ECS task that the container belongs to. If you specify a prefix with this option, then the log stream takes the format prefix-name/container-name/ecs-task-id. If you don't specify a prefix with this option, then the log stream is named after the container ID that's assigned by the Docker daemon on the container instance. Because it's difficult to trace logs back to the container that sent them with just the Docker container ID (which is only available on the container instance), we recommend that you specify a prefix with this option. For Amazon ECS services, you can use the service name as the prefix. Doing so, you can trace log streams to the service that the container belongs to, the name of the container that sent them, and the ID of the task that the container belongs to. You must specify a stream-prefix for your logs to have your logs appear in the Log pane when using the Amazon ECS console. + awslogs-datetime-format Required: No This option defines a multiline start pattern in Python strftime format. A log message consists of a line that matches the pattern and any following lines that don’t match the pattern. The matched line is the delimiter between log messages. One example of a use case for using this format is for parsing output such as a stack dump, which might otherwise be logged in multiple entries. The correct pattern allows it to be captured in a single entry. For more information, see awslogs-datetime-format. You cannot configure both the awslogs-datetime-format and awslogs-multiline-pattern options. Multiline logging performs regular expression parsing and matching of all log messages. This might have a negative impact on logging performance. + awslogs-multiline-pattern Required: No This option defines a multiline start pattern that uses a regular expression. A log message consists of a line that matches the pattern and any following lines that don’t match the pattern. The matched line is the delimiter between log messages. For more information, see awslogs-multiline-pattern. This option is ignored if awslogs-datetime-format is also configured. You cannot configure both the awslogs-datetime-format and awslogs-multiline-pattern options. Multiline logging performs regular expression parsing and matching of all log messages. This might have a negative impact on logging performance.
	//      The following options apply to all supported log drivers.
	//   + mode Required: No Valid values: non-blocking | blocking This option defines the delivery mode of log messages from the container to the log driver specified using logDriver. The delivery mode you choose affects application availability when the flow of logs from container is interrupted. If you use the blocking mode and the flow of logs is interrupted, calls from container code to write to the stdout and stderr streams will block. The logging thread of the application will block as a result. This may cause the application to become unresponsive and lead to container healthcheck failure. If you use the non-blocking mode, the container's logs are instead stored in an in-memory intermediate buffer configured with the max-buffer-size option. This prevents the application from becoming unresponsive when logs cannot be sent. We recommend using this mode if you want to ensure service availability and are okay with some log loss. For more information, see Preventing log loss with non-blocking mode in the awslogs container log driver. You can set a default mode for all containers in a specific Region by using the defaultLogDriverMode account setting. If you don't specify the mode option or configure the account setting, Amazon ECS will default to the non-blocking mode. For more information about the account setting, see Default log driver mode in the Amazon Elastic Container Service Developer Guide. On June 25, 2025, Amazon ECS changed the default log driver mode from blocking to non-blocking to prioritize task availability over logging. To continue using the blocking mode after this change, do one of the following: Set the mode option in your container definition's logConfiguration as blocking. Set the defaultLogDriverMode account setting to blocking. + max-buffer-size Required: No Default value: 10m When non-blocking mode is used, the max-buffer-size log option controls the size of the buffer that's used for intermediate message storage. Make sure to specify an adequate buffer size based on your application. When the buffer fills up, further logs cannot be stored. Logs that cannot be stored are lost.
	//      To route logs using the ``splunk`` log router, you need to specify a ``splunk-token`` and a ``splunk-url``.
	//      When you use the ``awsfirelens`` log router to route logs to an AWS Service or AWS Partner Network destination for log storage and analytics, you can set the ``log-driver-buffer-limit`` option to limit the number of events that are buffered in memory, before being sent to the log router container. It can help to resolve potential log loss issue because high throughput might result in memory running out for the buffer inside of Docker.
	//      Other options you can specify when using ``awsfirelens`` to route logs depend on the destination. When you export logs to Amazon Data Firehose, you can specify the AWS Region with ``region`` and a name for the log stream with ``delivery_stream``.
	//      When you export logs to Amazon Kinesis Data Streams, you can specify an AWS Region with ``region`` and a data stream name with ``stream``.
	//       When you export logs to Amazon OpenSearch Service, you can specify options like ``Name``, ``Host`` (OpenSearch Service endpoint without protocol), ``Port``, ``Index``, ``Type``, ``Aws_auth``, ``Aws_region``, ``Suppress_Type_Name``, and ``tls``. For more information, see [Under the hood: FireLens for Amazon ECS Tasks](https://docs.aws.amazon.com/containers/under-the-hood-firelens-for-amazon-ecs-tasks/).
	//      When you export logs to Amazon S3, you can specify the bucket using the ``bucket`` option. You can also specify ``region``, ``total_file_size``, ``upload_timeout``, and ``use_put_object`` as options.
	//      This parameter requires version 1.19 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: ``sudo docker version --format '{{.Server.APIVersion}}'``
	Options pulumi.StringMapInput `pulumi:"options"`
	// The secrets to pass to the log configuration. For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the *Amazon Elastic Container Service Developer Guide*.
	SecretOptions ServiceSecretArrayInput `pulumi:"secretOptions"`
}

func (ServiceLogConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLogConfiguration)(nil)).Elem()
}

func (i ServiceLogConfigurationArgs) ToServiceLogConfigurationOutput() ServiceLogConfigurationOutput {
	return i.ToServiceLogConfigurationOutputWithContext(context.Background())
}

func (i ServiceLogConfigurationArgs) ToServiceLogConfigurationOutputWithContext(ctx context.Context) ServiceLogConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLogConfigurationOutput)
}

func (i ServiceLogConfigurationArgs) ToServiceLogConfigurationPtrOutput() ServiceLogConfigurationPtrOutput {
	return i.ToServiceLogConfigurationPtrOutputWithContext(context.Background())
}

func (i ServiceLogConfigurationArgs) ToServiceLogConfigurationPtrOutputWithContext(ctx context.Context) ServiceLogConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLogConfigurationOutput).ToServiceLogConfigurationPtrOutputWithContext(ctx)
}

// ServiceLogConfigurationPtrInput is an input type that accepts ServiceLogConfigurationArgs, ServiceLogConfigurationPtr and ServiceLogConfigurationPtrOutput values.
// You can construct a concrete instance of `ServiceLogConfigurationPtrInput` via:
//
//	        ServiceLogConfigurationArgs{...}
//
//	or:
//
//	        nil
type ServiceLogConfigurationPtrInput interface {
	pulumi.Input

	ToServiceLogConfigurationPtrOutput() ServiceLogConfigurationPtrOutput
	ToServiceLogConfigurationPtrOutputWithContext(context.Context) ServiceLogConfigurationPtrOutput
}

type serviceLogConfigurationPtrType ServiceLogConfigurationArgs

func ServiceLogConfigurationPtr(v *ServiceLogConfigurationArgs) ServiceLogConfigurationPtrInput {
	return (*serviceLogConfigurationPtrType)(v)
}

func (*serviceLogConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLogConfiguration)(nil)).Elem()
}

func (i *serviceLogConfigurationPtrType) ToServiceLogConfigurationPtrOutput() ServiceLogConfigurationPtrOutput {
	return i.ToServiceLogConfigurationPtrOutputWithContext(context.Background())
}

func (i *serviceLogConfigurationPtrType) ToServiceLogConfigurationPtrOutputWithContext(ctx context.Context) ServiceLogConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLogConfigurationPtrOutput)
}

// The log configuration for the container. This parameter maps to “LogConfig“ in the docker container create command and the “--log-driver“ option to docker run.
//
//	By default, containers use the same logging driver that the Docker daemon uses. However, the container might use a different logging driver than the Docker daemon by specifying a log driver configuration in the container definition.
//	Understand the following when specifying a log configuration for your containers.
//	 +  Amazon ECS currently supports a subset of the logging drivers available to the Docker daemon. Additional log drivers may be available in future releases of the Amazon ECS container agent.
//	     For tasks on FARGATElong, the supported log drivers are ``awslogs``, ``splunk``, and ``awsfirelens``.
//	     For tasks hosted on Amazon EC2 instances, the supported log drivers are ``awslogs``, ``fluentd``, ``gelf``, ``json-file``, ``journald``,``syslog``, ``splunk``, and ``awsfirelens``.
//	 +  This parameter requires version 1.18 of the Docker Remote API or greater on your container instance.
//	 +  For tasks that are hosted on Amazon EC2 instances, the Amazon ECS container agent must register the available logging drivers with the ``ECS_AVAILABLE_LOGGING_DRIVERS`` environment variable before containers placed on that instance can use these log configuration options. For more information, see [Amazon ECS container agent configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the *Amazon Elastic Container Service Developer Guide*.
//	 +  For tasks that are on FARGATElong, because you don't have access to the underlying infrastructure your tasks are hosted on, any additional software needed must be installed outside of the task. For example, the Fluentd output aggregators or a remote host running Logstash to send Gelf logs to.
type ServiceLogConfigurationOutput struct{ *pulumi.OutputState }

func (ServiceLogConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLogConfiguration)(nil)).Elem()
}

func (o ServiceLogConfigurationOutput) ToServiceLogConfigurationOutput() ServiceLogConfigurationOutput {
	return o
}

func (o ServiceLogConfigurationOutput) ToServiceLogConfigurationOutputWithContext(ctx context.Context) ServiceLogConfigurationOutput {
	return o
}

func (o ServiceLogConfigurationOutput) ToServiceLogConfigurationPtrOutput() ServiceLogConfigurationPtrOutput {
	return o.ToServiceLogConfigurationPtrOutputWithContext(context.Background())
}

func (o ServiceLogConfigurationOutput) ToServiceLogConfigurationPtrOutputWithContext(ctx context.Context) ServiceLogConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceLogConfiguration) *ServiceLogConfiguration {
		return &v
	}).(ServiceLogConfigurationPtrOutput)
}

// The log driver to use for the container.
//
//	For tasks on FARGATElong, the supported log drivers are ``awslogs``, ``splunk``, and ``awsfirelens``.
//	For tasks hosted on Amazon EC2 instances, the supported log drivers are ``awslogs``, ``fluentd``, ``gelf``, ``json-file``, ``journald``, ``syslog``, ``splunk``, and ``awsfirelens``.
//	For more information about using the ``awslogs`` log driver, see [Send Amazon ECS logs to CloudWatch](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_awslogs.html) in the *Amazon Elastic Container Service Developer Guide*.
//	For more information about using the ``awsfirelens`` log driver, see [Send Amazon ECS logs to an service or Partner](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html).
//	 If you have a custom driver that isn't listed, you can fork the Amazon ECS container agent project that's [available on GitHub](https://docs.aws.amazon.com/https://github.com/aws/amazon-ecs-agent) and customize it to work with that driver. We encourage you to submit pull requests for changes that you would like to have included. However, we don't currently provide support for running modified copies of this software.
func (o ServiceLogConfigurationOutput) LogDriver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceLogConfiguration) *string { return v.LogDriver }).(pulumi.StringPtrOutput)
}

// The configuration options to send to the log driver.
//
//	The options you can specify depend on the log driver. Some of the options you can specify when you use the ``awslogs`` log driver to route logs to Amazon CloudWatch include the following:
//	 + awslogs-create-group Required: No Specify whether you want the log group to be created automatically. If this option isn't specified, it defaults to false. Your IAM policy must include the logs:CreateLogGroup permission before you attempt to use awslogs-create-group. + awslogs-region Required: Yes Specify the Region that the awslogs log driver is to send your Docker logs to. You can choose to send all of your logs from clusters in different Regions to a single region in CloudWatch Logs. This is so that they're all visible in one location. Otherwise, you can separate them by Region for more granularity. Make sure that the specified log group exists in the Region that you specify with this option. + awslogs-group Required: Yes Make sure to specify a log group that the awslogs log driver sends its log streams to. + awslogs-stream-prefix Required: Yes, when using Fargate.Optional when using EC2. Use the awslogs-stream-prefix option to associate a log stream with the specified prefix, the container name, and the ID of the Amazon ECS task that the container belongs to. If you specify a prefix with this option, then the log stream takes the format prefix-name/container-name/ecs-task-id. If you don't specify a prefix with this option, then the log stream is named after the container ID that's assigned by the Docker daemon on the container instance. Because it's difficult to trace logs back to the container that sent them with just the Docker container ID (which is only available on the container instance), we recommend that you specify a prefix with this option. For Amazon ECS services, you can use the service name as the prefix. Doing so, you can trace log streams to the service that the container belongs to, the name of the container that sent them, and the ID of the task that the container belongs to. You must specify a stream-prefix for your logs to have your logs appear in the Log pane when using the Amazon ECS console. + awslogs-datetime-format Required: No This option defines a multiline start pattern in Python strftime format. A log message consists of a line that matches the pattern and any following lines that don’t match the pattern. The matched line is the delimiter between log messages. One example of a use case for using this format is for parsing output such as a stack dump, which might otherwise be logged in multiple entries. The correct pattern allows it to be captured in a single entry. For more information, see awslogs-datetime-format. You cannot configure both the awslogs-datetime-format and awslogs-multiline-pattern options. Multiline logging performs regular expression parsing and matching of all log messages. This might have a negative impact on logging performance. + awslogs-multiline-pattern Required: No This option defines a multiline start pattern that uses a regular expression. A log message consists of a line that matches the pattern and any following lines that don’t match the pattern. The matched line is the delimiter between log messages. For more information, see awslogs-multiline-pattern. This option is ignored if awslogs-datetime-format is also configured. You cannot configure both the awslogs-datetime-format and awslogs-multiline-pattern options. Multiline logging performs regular expression parsing and matching of all log messages. This might have a negative impact on logging performance.
//	    The following options apply to all supported log drivers.
//	 + mode Required: No Valid values: non-blocking | blocking This option defines the delivery mode of log messages from the container to the log driver specified using logDriver. The delivery mode you choose affects application availability when the flow of logs from container is interrupted. If you use the blocking mode and the flow of logs is interrupted, calls from container code to write to the stdout and stderr streams will block. The logging thread of the application will block as a result. This may cause the application to become unresponsive and lead to container healthcheck failure. If you use the non-blocking mode, the container's logs are instead stored in an in-memory intermediate buffer configured with the max-buffer-size option. This prevents the application from becoming unresponsive when logs cannot be sent. We recommend using this mode if you want to ensure service availability and are okay with some log loss. For more information, see Preventing log loss with non-blocking mode in the awslogs container log driver. You can set a default mode for all containers in a specific Region by using the defaultLogDriverMode account setting. If you don't specify the mode option or configure the account setting, Amazon ECS will default to the non-blocking mode. For more information about the account setting, see Default log driver mode in the Amazon Elastic Container Service Developer Guide. On June 25, 2025, Amazon ECS changed the default log driver mode from blocking to non-blocking to prioritize task availability over logging. To continue using the blocking mode after this change, do one of the following: Set the mode option in your container definition's logConfiguration as blocking. Set the defaultLogDriverMode account setting to blocking. + max-buffer-size Required: No Default value: 10m When non-blocking mode is used, the max-buffer-size log option controls the size of the buffer that's used for intermediate message storage. Make sure to specify an adequate buffer size based on your application. When the buffer fills up, further logs cannot be stored. Logs that cannot be stored are lost.
//	    To route logs using the ``splunk`` log router, you need to specify a ``splunk-token`` and a ``splunk-url``.
//	    When you use the ``awsfirelens`` log router to route logs to an AWS Service or AWS Partner Network destination for log storage and analytics, you can set the ``log-driver-buffer-limit`` option to limit the number of events that are buffered in memory, before being sent to the log router container. It can help to resolve potential log loss issue because high throughput might result in memory running out for the buffer inside of Docker.
//	    Other options you can specify when using ``awsfirelens`` to route logs depend on the destination. When you export logs to Amazon Data Firehose, you can specify the AWS Region with ``region`` and a name for the log stream with ``delivery_stream``.
//	    When you export logs to Amazon Kinesis Data Streams, you can specify an AWS Region with ``region`` and a data stream name with ``stream``.
//	     When you export logs to Amazon OpenSearch Service, you can specify options like ``Name``, ``Host`` (OpenSearch Service endpoint without protocol), ``Port``, ``Index``, ``Type``, ``Aws_auth``, ``Aws_region``, ``Suppress_Type_Name``, and ``tls``. For more information, see [Under the hood: FireLens for Amazon ECS Tasks](https://docs.aws.amazon.com/containers/under-the-hood-firelens-for-amazon-ecs-tasks/).
//	    When you export logs to Amazon S3, you can specify the bucket using the ``bucket`` option. You can also specify ``region``, ``total_file_size``, ``upload_timeout``, and ``use_put_object`` as options.
//	    This parameter requires version 1.19 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: ``sudo docker version --format '{{.Server.APIVersion}}'``
func (o ServiceLogConfigurationOutput) Options() pulumi.StringMapOutput {
	return o.ApplyT(func(v ServiceLogConfiguration) map[string]string { return v.Options }).(pulumi.StringMapOutput)
}

// The secrets to pass to the log configuration. For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the *Amazon Elastic Container Service Developer Guide*.
func (o ServiceLogConfigurationOutput) SecretOptions() ServiceSecretArrayOutput {
	return o.ApplyT(func(v ServiceLogConfiguration) []ServiceSecret { return v.SecretOptions }).(ServiceSecretArrayOutput)
}

type ServiceLogConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ServiceLogConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLogConfiguration)(nil)).Elem()
}

func (o ServiceLogConfigurationPtrOutput) ToServiceLogConfigurationPtrOutput() ServiceLogConfigurationPtrOutput {
	return o
}

func (o ServiceLogConfigurationPtrOutput) ToServiceLogConfigurationPtrOutputWithContext(ctx context.Context) ServiceLogConfigurationPtrOutput {
	return o
}

func (o ServiceLogConfigurationPtrOutput) Elem() ServiceLogConfigurationOutput {
	return o.ApplyT(func(v *ServiceLogConfiguration) ServiceLogConfiguration {
		if v != nil {
			return *v
		}
		var ret ServiceLogConfiguration
		return ret
	}).(ServiceLogConfigurationOutput)
}

// The log driver to use for the container.
//
//	For tasks on FARGATElong, the supported log drivers are ``awslogs``, ``splunk``, and ``awsfirelens``.
//	For tasks hosted on Amazon EC2 instances, the supported log drivers are ``awslogs``, ``fluentd``, ``gelf``, ``json-file``, ``journald``, ``syslog``, ``splunk``, and ``awsfirelens``.
//	For more information about using the ``awslogs`` log driver, see [Send Amazon ECS logs to CloudWatch](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_awslogs.html) in the *Amazon Elastic Container Service Developer Guide*.
//	For more information about using the ``awsfirelens`` log driver, see [Send Amazon ECS logs to an service or Partner](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html).
//	 If you have a custom driver that isn't listed, you can fork the Amazon ECS container agent project that's [available on GitHub](https://docs.aws.amazon.com/https://github.com/aws/amazon-ecs-agent) and customize it to work with that driver. We encourage you to submit pull requests for changes that you would like to have included. However, we don't currently provide support for running modified copies of this software.
func (o ServiceLogConfigurationPtrOutput) LogDriver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceLogConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.LogDriver
	}).(pulumi.StringPtrOutput)
}

// The configuration options to send to the log driver.
//
//	The options you can specify depend on the log driver. Some of the options you can specify when you use the ``awslogs`` log driver to route logs to Amazon CloudWatch include the following:
//	 + awslogs-create-group Required: No Specify whether you want the log group to be created automatically. If this option isn't specified, it defaults to false. Your IAM policy must include the logs:CreateLogGroup permission before you attempt to use awslogs-create-group. + awslogs-region Required: Yes Specify the Region that the awslogs log driver is to send your Docker logs to. You can choose to send all of your logs from clusters in different Regions to a single region in CloudWatch Logs. This is so that they're all visible in one location. Otherwise, you can separate them by Region for more granularity. Make sure that the specified log group exists in the Region that you specify with this option. + awslogs-group Required: Yes Make sure to specify a log group that the awslogs log driver sends its log streams to. + awslogs-stream-prefix Required: Yes, when using Fargate.Optional when using EC2. Use the awslogs-stream-prefix option to associate a log stream with the specified prefix, the container name, and the ID of the Amazon ECS task that the container belongs to. If you specify a prefix with this option, then the log stream takes the format prefix-name/container-name/ecs-task-id. If you don't specify a prefix with this option, then the log stream is named after the container ID that's assigned by the Docker daemon on the container instance. Because it's difficult to trace logs back to the container that sent them with just the Docker container ID (which is only available on the container instance), we recommend that you specify a prefix with this option. For Amazon ECS services, you can use the service name as the prefix. Doing so, you can trace log streams to the service that the container belongs to, the name of the container that sent them, and the ID of the task that the container belongs to. You must specify a stream-prefix for your logs to have your logs appear in the Log pane when using the Amazon ECS console. + awslogs-datetime-format Required: No This option defines a multiline start pattern in Python strftime format. A log message consists of a line that matches the pattern and any following lines that don’t match the pattern. The matched line is the delimiter between log messages. One example of a use case for using this format is for parsing output such as a stack dump, which might otherwise be logged in multiple entries. The correct pattern allows it to be captured in a single entry. For more information, see awslogs-datetime-format. You cannot configure both the awslogs-datetime-format and awslogs-multiline-pattern options. Multiline logging performs regular expression parsing and matching of all log messages. This might have a negative impact on logging performance. + awslogs-multiline-pattern Required: No This option defines a multiline start pattern that uses a regular expression. A log message consists of a line that matches the pattern and any following lines that don’t match the pattern. The matched line is the delimiter between log messages. For more information, see awslogs-multiline-pattern. This option is ignored if awslogs-datetime-format is also configured. You cannot configure both the awslogs-datetime-format and awslogs-multiline-pattern options. Multiline logging performs regular expression parsing and matching of all log messages. This might have a negative impact on logging performance.
//	    The following options apply to all supported log drivers.
//	 + mode Required: No Valid values: non-blocking | blocking This option defines the delivery mode of log messages from the container to the log driver specified using logDriver. The delivery mode you choose affects application availability when the flow of logs from container is interrupted. If you use the blocking mode and the flow of logs is interrupted, calls from container code to write to the stdout and stderr streams will block. The logging thread of the application will block as a result. This may cause the application to become unresponsive and lead to container healthcheck failure. If you use the non-blocking mode, the container's logs are instead stored in an in-memory intermediate buffer configured with the max-buffer-size option. This prevents the application from becoming unresponsive when logs cannot be sent. We recommend using this mode if you want to ensure service availability and are okay with some log loss. For more information, see Preventing log loss with non-blocking mode in the awslogs container log driver. You can set a default mode for all containers in a specific Region by using the defaultLogDriverMode account setting. If you don't specify the mode option or configure the account setting, Amazon ECS will default to the non-blocking mode. For more information about the account setting, see Default log driver mode in the Amazon Elastic Container Service Developer Guide. On June 25, 2025, Amazon ECS changed the default log driver mode from blocking to non-blocking to prioritize task availability over logging. To continue using the blocking mode after this change, do one of the following: Set the mode option in your container definition's logConfiguration as blocking. Set the defaultLogDriverMode account setting to blocking. + max-buffer-size Required: No Default value: 10m When non-blocking mode is used, the max-buffer-size log option controls the size of the buffer that's used for intermediate message storage. Make sure to specify an adequate buffer size based on your application. When the buffer fills up, further logs cannot be stored. Logs that cannot be stored are lost.
//	    To route logs using the ``splunk`` log router, you need to specify a ``splunk-token`` and a ``splunk-url``.
//	    When you use the ``awsfirelens`` log router to route logs to an AWS Service or AWS Partner Network destination for log storage and analytics, you can set the ``log-driver-buffer-limit`` option to limit the number of events that are buffered in memory, before being sent to the log router container. It can help to resolve potential log loss issue because high throughput might result in memory running out for the buffer inside of Docker.
//	    Other options you can specify when using ``awsfirelens`` to route logs depend on the destination. When you export logs to Amazon Data Firehose, you can specify the AWS Region with ``region`` and a name for the log stream with ``delivery_stream``.
//	    When you export logs to Amazon Kinesis Data Streams, you can specify an AWS Region with ``region`` and a data stream name with ``stream``.
//	     When you export logs to Amazon OpenSearch Service, you can specify options like ``Name``, ``Host`` (OpenSearch Service endpoint without protocol), ``Port``, ``Index``, ``Type``, ``Aws_auth``, ``Aws_region``, ``Suppress_Type_Name``, and ``tls``. For more information, see [Under the hood: FireLens for Amazon ECS Tasks](https://docs.aws.amazon.com/containers/under-the-hood-firelens-for-amazon-ecs-tasks/).
//	    When you export logs to Amazon S3, you can specify the bucket using the ``bucket`` option. You can also specify ``region``, ``total_file_size``, ``upload_timeout``, and ``use_put_object`` as options.
//	    This parameter requires version 1.19 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: ``sudo docker version --format '{{.Server.APIVersion}}'``
func (o ServiceLogConfigurationPtrOutput) Options() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ServiceLogConfiguration) map[string]string {
		if v == nil {
			return nil
		}
		return v.Options
	}).(pulumi.StringMapOutput)
}

// The secrets to pass to the log configuration. For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the *Amazon Elastic Container Service Developer Guide*.
func (o ServiceLogConfigurationPtrOutput) SecretOptions() ServiceSecretArrayOutput {
	return o.ApplyT(func(v *ServiceLogConfiguration) []ServiceSecret {
		if v == nil {
			return nil
		}
		return v.SecretOptions
	}).(ServiceSecretArrayOutput)
}

// The configuration for the Amazon EBS volume that Amazon ECS creates and manages on your behalf. These settings are used to create each Amazon EBS volume, with one volume created for each task in the service. For information about the supported launch types and operating systems, see [Supported operating systems and launch types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ebs-volumes.html#ebs-volumes-configuration) in the*Amazon Elastic Container Service Developer Guide*.
//
//	Many of these parameters map 1:1 with the Amazon EBS ``CreateVolume`` API request parameters.
type ServiceManagedEbsVolumeConfiguration struct {
	// Indicates whether the volume should be encrypted. If you turn on Region-level Amazon EBS encryption by default but set this value as ``false``, the setting is overridden and the volume is encrypted with the KMS key specified for Amazon EBS encryption by default. This parameter maps 1:1 with the ``Encrypted`` parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API Reference*.
	Encrypted *bool `pulumi:"encrypted"`
	// The filesystem type for the volume. For volumes created from a snapshot, you must specify the same filesystem type that the volume was using when the snapshot was created. If there is a filesystem type mismatch, the tasks will fail to start.
	//  The available Linux filesystem types are
	//  ``ext3``, ``ext4``, and ``xfs``. If no value is specified, the ``xfs`` filesystem type is used by default.
	//  The available Windows filesystem types are ``NTFS``.
	FilesystemType *string `pulumi:"filesystemType"`
	// The number of I/O operations per second (IOPS). For ``gp3``, ``io1``, and ``io2`` volumes, this represents the number of IOPS that are provisioned for the volume. For ``gp2`` volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting.
	//  The following are the supported values for each volume type.
	//   +  ``gp3``: 3,000 - 16,000 IOPS
	//   +  ``io1``: 100 - 64,000 IOPS
	//   +  ``io2``: 100 - 256,000 IOPS
	//
	//  This parameter is required for ``io1`` and ``io2`` volume types. The default for ``gp3`` volumes is ``3,000 IOPS``. This parameter is not supported for ``st1``, ``sc1``, or ``standard`` volume types.
	//  This parameter maps 1:1 with the ``Iops`` parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API Reference*.
	Iops *int `pulumi:"iops"`
	// The Amazon Resource Name (ARN) identifier of the AWS Key Management Service key to use for Amazon EBS encryption. When a key is specified using this parameter, it overrides Amazon EBS default encryption or any KMS key that you specified for cluster-level managed storage encryption. This parameter maps 1:1 with the ``KmsKeyId`` parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API Reference*. For more information about encrypting Amazon EBS volumes attached to tasks, see [Encrypt data stored in Amazon EBS volumes attached to Amazon ECS tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ebs-kms-encryption.html).
	//   AWS authenticates the AWS Key Management Service key asynchronously. Therefore, if you specify an ID, alias, or ARN that is invalid, the action can appear to complete, but eventually fails.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// The ARN of the IAM role to associate with this volume. This is the Amazon ECS infrastructure IAM role that is used to manage your AWS infrastructure. We recommend using the Amazon ECS-managed ``AmazonECSInfrastructureRolePolicyForVolumes`` IAM policy with this role. For more information, see [Amazon ECS infrastructure IAM role](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/infrastructure_IAM_role.html) in the *Amazon ECS Developer Guide*.
	RoleArn string `pulumi:"roleArn"`
	// The size of the volume in GiB. You must specify either a volume size or a snapshot ID. If you specify a snapshot ID, the snapshot size is used for the volume size by default. You can optionally specify a volume size greater than or equal to the snapshot size. This parameter maps 1:1 with the ``Size`` parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API Reference*.
	//  The following are the supported volume size values for each volume type.
	//   +  ``gp2`` and ``gp3``: 1-16,384
	//   +  ``io1`` and ``io2``: 4-16,384
	//   +  ``st1`` and ``sc1``: 125-16,384
	//   +  ``standard``: 1-1,024
	SizeInGiB *int `pulumi:"sizeInGiB"`
	// The snapshot that Amazon ECS uses to create volumes for attachment to tasks maintained by the service. You must specify either ``snapshotId`` or ``sizeInGiB`` in your volume configuration. This parameter maps 1:1 with the ``SnapshotId`` parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API Reference*.
	SnapshotId *string `pulumi:"snapshotId"`
	// The tags to apply to the volume. Amazon ECS applies service-managed tags by default. This parameter maps 1:1 with the ``TagSpecifications.N`` parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API Reference*.
	TagSpecifications []ServiceEbsTagSpecification `pulumi:"tagSpecifications"`
	// The throughput to provision for a volume, in MiB/s, with a maximum of 1,000 MiB/s. This parameter maps 1:1 with the ``Throughput`` parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API Reference*.
	//   This parameter is only supported for the ``gp3`` volume type.
	Throughput *int `pulumi:"throughput"`
	// The rate, in MiB/s, at which data is fetched from a snapshot of an existing EBS volume to create new volumes for attachment to the tasks maintained by the service. This property can be specified only if you specify a ``snapshotId``. For more information, see [Initialize Amazon EBS volumes](https://docs.aws.amazon.com/ebs/latest/userguide/initalize-volume.html) in the *Amazon EBS User Guide*.
	VolumeInitializationRate *int `pulumi:"volumeInitializationRate"`
	// The volume type. This parameter maps 1:1 with the ``VolumeType`` parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API Reference*. For more information, see [Amazon EBS volume types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-volume-types.html) in the *Amazon EC2 User Guide*.
	//  The following are the supported volume types.
	//   +  General Purpose SSD: ``gp2``|``gp3``
	//   +  Provisioned IOPS SSD: ``io1``|``io2``
	//   +  Throughput Optimized HDD: ``st1``
	//   +  Cold HDD: ``sc1``
	//   +  Magnetic: ``standard``
	//        The magnetic volume type is not supported on Fargate.
	VolumeType *string `pulumi:"volumeType"`
}

// ServiceManagedEbsVolumeConfigurationInput is an input type that accepts ServiceManagedEbsVolumeConfigurationArgs and ServiceManagedEbsVolumeConfigurationOutput values.
// You can construct a concrete instance of `ServiceManagedEbsVolumeConfigurationInput` via:
//
//	ServiceManagedEbsVolumeConfigurationArgs{...}
type ServiceManagedEbsVolumeConfigurationInput interface {
	pulumi.Input

	ToServiceManagedEbsVolumeConfigurationOutput() ServiceManagedEbsVolumeConfigurationOutput
	ToServiceManagedEbsVolumeConfigurationOutputWithContext(context.Context) ServiceManagedEbsVolumeConfigurationOutput
}

// The configuration for the Amazon EBS volume that Amazon ECS creates and manages on your behalf. These settings are used to create each Amazon EBS volume, with one volume created for each task in the service. For information about the supported launch types and operating systems, see [Supported operating systems and launch types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ebs-volumes.html#ebs-volumes-configuration) in the*Amazon Elastic Container Service Developer Guide*.
//
//	Many of these parameters map 1:1 with the Amazon EBS ``CreateVolume`` API request parameters.
type ServiceManagedEbsVolumeConfigurationArgs struct {
	// Indicates whether the volume should be encrypted. If you turn on Region-level Amazon EBS encryption by default but set this value as ``false``, the setting is overridden and the volume is encrypted with the KMS key specified for Amazon EBS encryption by default. This parameter maps 1:1 with the ``Encrypted`` parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API Reference*.
	Encrypted pulumi.BoolPtrInput `pulumi:"encrypted"`
	// The filesystem type for the volume. For volumes created from a snapshot, you must specify the same filesystem type that the volume was using when the snapshot was created. If there is a filesystem type mismatch, the tasks will fail to start.
	//  The available Linux filesystem types are
	//  ``ext3``, ``ext4``, and ``xfs``. If no value is specified, the ``xfs`` filesystem type is used by default.
	//  The available Windows filesystem types are ``NTFS``.
	FilesystemType pulumi.StringPtrInput `pulumi:"filesystemType"`
	// The number of I/O operations per second (IOPS). For ``gp3``, ``io1``, and ``io2`` volumes, this represents the number of IOPS that are provisioned for the volume. For ``gp2`` volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting.
	//  The following are the supported values for each volume type.
	//   +  ``gp3``: 3,000 - 16,000 IOPS
	//   +  ``io1``: 100 - 64,000 IOPS
	//   +  ``io2``: 100 - 256,000 IOPS
	//
	//  This parameter is required for ``io1`` and ``io2`` volume types. The default for ``gp3`` volumes is ``3,000 IOPS``. This parameter is not supported for ``st1``, ``sc1``, or ``standard`` volume types.
	//  This parameter maps 1:1 with the ``Iops`` parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API Reference*.
	Iops pulumi.IntPtrInput `pulumi:"iops"`
	// The Amazon Resource Name (ARN) identifier of the AWS Key Management Service key to use for Amazon EBS encryption. When a key is specified using this parameter, it overrides Amazon EBS default encryption or any KMS key that you specified for cluster-level managed storage encryption. This parameter maps 1:1 with the ``KmsKeyId`` parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API Reference*. For more information about encrypting Amazon EBS volumes attached to tasks, see [Encrypt data stored in Amazon EBS volumes attached to Amazon ECS tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ebs-kms-encryption.html).
	//   AWS authenticates the AWS Key Management Service key asynchronously. Therefore, if you specify an ID, alias, or ARN that is invalid, the action can appear to complete, but eventually fails.
	KmsKeyId pulumi.StringPtrInput `pulumi:"kmsKeyId"`
	// The ARN of the IAM role to associate with this volume. This is the Amazon ECS infrastructure IAM role that is used to manage your AWS infrastructure. We recommend using the Amazon ECS-managed ``AmazonECSInfrastructureRolePolicyForVolumes`` IAM policy with this role. For more information, see [Amazon ECS infrastructure IAM role](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/infrastructure_IAM_role.html) in the *Amazon ECS Developer Guide*.
	RoleArn pulumi.StringInput `pulumi:"roleArn"`
	// The size of the volume in GiB. You must specify either a volume size or a snapshot ID. If you specify a snapshot ID, the snapshot size is used for the volume size by default. You can optionally specify a volume size greater than or equal to the snapshot size. This parameter maps 1:1 with the ``Size`` parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API Reference*.
	//  The following are the supported volume size values for each volume type.
	//   +  ``gp2`` and ``gp3``: 1-16,384
	//   +  ``io1`` and ``io2``: 4-16,384
	//   +  ``st1`` and ``sc1``: 125-16,384
	//   +  ``standard``: 1-1,024
	SizeInGiB pulumi.IntPtrInput `pulumi:"sizeInGiB"`
	// The snapshot that Amazon ECS uses to create volumes for attachment to tasks maintained by the service. You must specify either ``snapshotId`` or ``sizeInGiB`` in your volume configuration. This parameter maps 1:1 with the ``SnapshotId`` parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API Reference*.
	SnapshotId pulumi.StringPtrInput `pulumi:"snapshotId"`
	// The tags to apply to the volume. Amazon ECS applies service-managed tags by default. This parameter maps 1:1 with the ``TagSpecifications.N`` parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API Reference*.
	TagSpecifications ServiceEbsTagSpecificationArrayInput `pulumi:"tagSpecifications"`
	// The throughput to provision for a volume, in MiB/s, with a maximum of 1,000 MiB/s. This parameter maps 1:1 with the ``Throughput`` parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API Reference*.
	//   This parameter is only supported for the ``gp3`` volume type.
	Throughput pulumi.IntPtrInput `pulumi:"throughput"`
	// The rate, in MiB/s, at which data is fetched from a snapshot of an existing EBS volume to create new volumes for attachment to the tasks maintained by the service. This property can be specified only if you specify a ``snapshotId``. For more information, see [Initialize Amazon EBS volumes](https://docs.aws.amazon.com/ebs/latest/userguide/initalize-volume.html) in the *Amazon EBS User Guide*.
	VolumeInitializationRate pulumi.IntPtrInput `pulumi:"volumeInitializationRate"`
	// The volume type. This parameter maps 1:1 with the ``VolumeType`` parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API Reference*. For more information, see [Amazon EBS volume types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-volume-types.html) in the *Amazon EC2 User Guide*.
	//  The following are the supported volume types.
	//   +  General Purpose SSD: ``gp2``|``gp3``
	//   +  Provisioned IOPS SSD: ``io1``|``io2``
	//   +  Throughput Optimized HDD: ``st1``
	//   +  Cold HDD: ``sc1``
	//   +  Magnetic: ``standard``
	//        The magnetic volume type is not supported on Fargate.
	VolumeType pulumi.StringPtrInput `pulumi:"volumeType"`
}

func (ServiceManagedEbsVolumeConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceManagedEbsVolumeConfiguration)(nil)).Elem()
}

func (i ServiceManagedEbsVolumeConfigurationArgs) ToServiceManagedEbsVolumeConfigurationOutput() ServiceManagedEbsVolumeConfigurationOutput {
	return i.ToServiceManagedEbsVolumeConfigurationOutputWithContext(context.Background())
}

func (i ServiceManagedEbsVolumeConfigurationArgs) ToServiceManagedEbsVolumeConfigurationOutputWithContext(ctx context.Context) ServiceManagedEbsVolumeConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceManagedEbsVolumeConfigurationOutput)
}

func (i ServiceManagedEbsVolumeConfigurationArgs) ToServiceManagedEbsVolumeConfigurationPtrOutput() ServiceManagedEbsVolumeConfigurationPtrOutput {
	return i.ToServiceManagedEbsVolumeConfigurationPtrOutputWithContext(context.Background())
}

func (i ServiceManagedEbsVolumeConfigurationArgs) ToServiceManagedEbsVolumeConfigurationPtrOutputWithContext(ctx context.Context) ServiceManagedEbsVolumeConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceManagedEbsVolumeConfigurationOutput).ToServiceManagedEbsVolumeConfigurationPtrOutputWithContext(ctx)
}

// ServiceManagedEbsVolumeConfigurationPtrInput is an input type that accepts ServiceManagedEbsVolumeConfigurationArgs, ServiceManagedEbsVolumeConfigurationPtr and ServiceManagedEbsVolumeConfigurationPtrOutput values.
// You can construct a concrete instance of `ServiceManagedEbsVolumeConfigurationPtrInput` via:
//
//	        ServiceManagedEbsVolumeConfigurationArgs{...}
//
//	or:
//
//	        nil
type ServiceManagedEbsVolumeConfigurationPtrInput interface {
	pulumi.Input

	ToServiceManagedEbsVolumeConfigurationPtrOutput() ServiceManagedEbsVolumeConfigurationPtrOutput
	ToServiceManagedEbsVolumeConfigurationPtrOutputWithContext(context.Context) ServiceManagedEbsVolumeConfigurationPtrOutput
}

type serviceManagedEbsVolumeConfigurationPtrType ServiceManagedEbsVolumeConfigurationArgs

func ServiceManagedEbsVolumeConfigurationPtr(v *ServiceManagedEbsVolumeConfigurationArgs) ServiceManagedEbsVolumeConfigurationPtrInput {
	return (*serviceManagedEbsVolumeConfigurationPtrType)(v)
}

func (*serviceManagedEbsVolumeConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceManagedEbsVolumeConfiguration)(nil)).Elem()
}

func (i *serviceManagedEbsVolumeConfigurationPtrType) ToServiceManagedEbsVolumeConfigurationPtrOutput() ServiceManagedEbsVolumeConfigurationPtrOutput {
	return i.ToServiceManagedEbsVolumeConfigurationPtrOutputWithContext(context.Background())
}

func (i *serviceManagedEbsVolumeConfigurationPtrType) ToServiceManagedEbsVolumeConfigurationPtrOutputWithContext(ctx context.Context) ServiceManagedEbsVolumeConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceManagedEbsVolumeConfigurationPtrOutput)
}

// The configuration for the Amazon EBS volume that Amazon ECS creates and manages on your behalf. These settings are used to create each Amazon EBS volume, with one volume created for each task in the service. For information about the supported launch types and operating systems, see [Supported operating systems and launch types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ebs-volumes.html#ebs-volumes-configuration) in the*Amazon Elastic Container Service Developer Guide*.
//
//	Many of these parameters map 1:1 with the Amazon EBS ``CreateVolume`` API request parameters.
type ServiceManagedEbsVolumeConfigurationOutput struct{ *pulumi.OutputState }

func (ServiceManagedEbsVolumeConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceManagedEbsVolumeConfiguration)(nil)).Elem()
}

func (o ServiceManagedEbsVolumeConfigurationOutput) ToServiceManagedEbsVolumeConfigurationOutput() ServiceManagedEbsVolumeConfigurationOutput {
	return o
}

func (o ServiceManagedEbsVolumeConfigurationOutput) ToServiceManagedEbsVolumeConfigurationOutputWithContext(ctx context.Context) ServiceManagedEbsVolumeConfigurationOutput {
	return o
}

func (o ServiceManagedEbsVolumeConfigurationOutput) ToServiceManagedEbsVolumeConfigurationPtrOutput() ServiceManagedEbsVolumeConfigurationPtrOutput {
	return o.ToServiceManagedEbsVolumeConfigurationPtrOutputWithContext(context.Background())
}

func (o ServiceManagedEbsVolumeConfigurationOutput) ToServiceManagedEbsVolumeConfigurationPtrOutputWithContext(ctx context.Context) ServiceManagedEbsVolumeConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceManagedEbsVolumeConfiguration) *ServiceManagedEbsVolumeConfiguration {
		return &v
	}).(ServiceManagedEbsVolumeConfigurationPtrOutput)
}

// Indicates whether the volume should be encrypted. If you turn on Region-level Amazon EBS encryption by default but set this value as “false“, the setting is overridden and the volume is encrypted with the KMS key specified for Amazon EBS encryption by default. This parameter maps 1:1 with the “Encrypted“ parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API Reference*.
func (o ServiceManagedEbsVolumeConfigurationOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceManagedEbsVolumeConfiguration) *bool { return v.Encrypted }).(pulumi.BoolPtrOutput)
}

// The filesystem type for the volume. For volumes created from a snapshot, you must specify the same filesystem type that the volume was using when the snapshot was created. If there is a filesystem type mismatch, the tasks will fail to start.
//
//	The available Linux filesystem types are
//	``ext3``, ``ext4``, and ``xfs``. If no value is specified, the ``xfs`` filesystem type is used by default.
//	The available Windows filesystem types are ``NTFS``.
func (o ServiceManagedEbsVolumeConfigurationOutput) FilesystemType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceManagedEbsVolumeConfiguration) *string { return v.FilesystemType }).(pulumi.StringPtrOutput)
}

// The number of I/O operations per second (IOPS). For “gp3“, “io1“, and “io2“ volumes, this represents the number of IOPS that are provisioned for the volume. For “gp2“ volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting.
//
//	The following are the supported values for each volume type.
//	 +  ``gp3``: 3,000 - 16,000 IOPS
//	 +  ``io1``: 100 - 64,000 IOPS
//	 +  ``io2``: 100 - 256,000 IOPS
//
//	This parameter is required for ``io1`` and ``io2`` volume types. The default for ``gp3`` volumes is ``3,000 IOPS``. This parameter is not supported for ``st1``, ``sc1``, or ``standard`` volume types.
//	This parameter maps 1:1 with the ``Iops`` parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API Reference*.
func (o ServiceManagedEbsVolumeConfigurationOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceManagedEbsVolumeConfiguration) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

// The Amazon Resource Name (ARN) identifier of the AWS Key Management Service key to use for Amazon EBS encryption. When a key is specified using this parameter, it overrides Amazon EBS default encryption or any KMS key that you specified for cluster-level managed storage encryption. This parameter maps 1:1 with the “KmsKeyId“ parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API Reference*. For more information about encrypting Amazon EBS volumes attached to tasks, see [Encrypt data stored in Amazon EBS volumes attached to Amazon ECS tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ebs-kms-encryption.html).
//
//	AWS authenticates the AWS Key Management Service key asynchronously. Therefore, if you specify an ID, alias, or ARN that is invalid, the action can appear to complete, but eventually fails.
func (o ServiceManagedEbsVolumeConfigurationOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceManagedEbsVolumeConfiguration) *string { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

// The ARN of the IAM role to associate with this volume. This is the Amazon ECS infrastructure IAM role that is used to manage your AWS infrastructure. We recommend using the Amazon ECS-managed “AmazonECSInfrastructureRolePolicyForVolumes“ IAM policy with this role. For more information, see [Amazon ECS infrastructure IAM role](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/infrastructure_IAM_role.html) in the *Amazon ECS Developer Guide*.
func (o ServiceManagedEbsVolumeConfigurationOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceManagedEbsVolumeConfiguration) string { return v.RoleArn }).(pulumi.StringOutput)
}

// The size of the volume in GiB. You must specify either a volume size or a snapshot ID. If you specify a snapshot ID, the snapshot size is used for the volume size by default. You can optionally specify a volume size greater than or equal to the snapshot size. This parameter maps 1:1 with the “Size“ parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API Reference*.
//
//	The following are the supported volume size values for each volume type.
//	 +  ``gp2`` and ``gp3``: 1-16,384
//	 +  ``io1`` and ``io2``: 4-16,384
//	 +  ``st1`` and ``sc1``: 125-16,384
//	 +  ``standard``: 1-1,024
func (o ServiceManagedEbsVolumeConfigurationOutput) SizeInGiB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceManagedEbsVolumeConfiguration) *int { return v.SizeInGiB }).(pulumi.IntPtrOutput)
}

// The snapshot that Amazon ECS uses to create volumes for attachment to tasks maintained by the service. You must specify either “snapshotId“ or “sizeInGiB“ in your volume configuration. This parameter maps 1:1 with the “SnapshotId“ parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API Reference*.
func (o ServiceManagedEbsVolumeConfigurationOutput) SnapshotId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceManagedEbsVolumeConfiguration) *string { return v.SnapshotId }).(pulumi.StringPtrOutput)
}

// The tags to apply to the volume. Amazon ECS applies service-managed tags by default. This parameter maps 1:1 with the “TagSpecifications.N“ parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API Reference*.
func (o ServiceManagedEbsVolumeConfigurationOutput) TagSpecifications() ServiceEbsTagSpecificationArrayOutput {
	return o.ApplyT(func(v ServiceManagedEbsVolumeConfiguration) []ServiceEbsTagSpecification { return v.TagSpecifications }).(ServiceEbsTagSpecificationArrayOutput)
}

// The throughput to provision for a volume, in MiB/s, with a maximum of 1,000 MiB/s. This parameter maps 1:1 with the “Throughput“ parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API Reference*.
//
//	This parameter is only supported for the ``gp3`` volume type.
func (o ServiceManagedEbsVolumeConfigurationOutput) Throughput() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceManagedEbsVolumeConfiguration) *int { return v.Throughput }).(pulumi.IntPtrOutput)
}

// The rate, in MiB/s, at which data is fetched from a snapshot of an existing EBS volume to create new volumes for attachment to the tasks maintained by the service. This property can be specified only if you specify a “snapshotId“. For more information, see [Initialize Amazon EBS volumes](https://docs.aws.amazon.com/ebs/latest/userguide/initalize-volume.html) in the *Amazon EBS User Guide*.
func (o ServiceManagedEbsVolumeConfigurationOutput) VolumeInitializationRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceManagedEbsVolumeConfiguration) *int { return v.VolumeInitializationRate }).(pulumi.IntPtrOutput)
}

// The volume type. This parameter maps 1:1 with the “VolumeType“ parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API Reference*. For more information, see [Amazon EBS volume types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-volume-types.html) in the *Amazon EC2 User Guide*.
//
//	The following are the supported volume types.
//	 +  General Purpose SSD: ``gp2``|``gp3``
//	 +  Provisioned IOPS SSD: ``io1``|``io2``
//	 +  Throughput Optimized HDD: ``st1``
//	 +  Cold HDD: ``sc1``
//	 +  Magnetic: ``standard``
//	      The magnetic volume type is not supported on Fargate.
func (o ServiceManagedEbsVolumeConfigurationOutput) VolumeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceManagedEbsVolumeConfiguration) *string { return v.VolumeType }).(pulumi.StringPtrOutput)
}

type ServiceManagedEbsVolumeConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ServiceManagedEbsVolumeConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceManagedEbsVolumeConfiguration)(nil)).Elem()
}

func (o ServiceManagedEbsVolumeConfigurationPtrOutput) ToServiceManagedEbsVolumeConfigurationPtrOutput() ServiceManagedEbsVolumeConfigurationPtrOutput {
	return o
}

func (o ServiceManagedEbsVolumeConfigurationPtrOutput) ToServiceManagedEbsVolumeConfigurationPtrOutputWithContext(ctx context.Context) ServiceManagedEbsVolumeConfigurationPtrOutput {
	return o
}

func (o ServiceManagedEbsVolumeConfigurationPtrOutput) Elem() ServiceManagedEbsVolumeConfigurationOutput {
	return o.ApplyT(func(v *ServiceManagedEbsVolumeConfiguration) ServiceManagedEbsVolumeConfiguration {
		if v != nil {
			return *v
		}
		var ret ServiceManagedEbsVolumeConfiguration
		return ret
	}).(ServiceManagedEbsVolumeConfigurationOutput)
}

// Indicates whether the volume should be encrypted. If you turn on Region-level Amazon EBS encryption by default but set this value as “false“, the setting is overridden and the volume is encrypted with the KMS key specified for Amazon EBS encryption by default. This parameter maps 1:1 with the “Encrypted“ parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API Reference*.
func (o ServiceManagedEbsVolumeConfigurationPtrOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceManagedEbsVolumeConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.Encrypted
	}).(pulumi.BoolPtrOutput)
}

// The filesystem type for the volume. For volumes created from a snapshot, you must specify the same filesystem type that the volume was using when the snapshot was created. If there is a filesystem type mismatch, the tasks will fail to start.
//
//	The available Linux filesystem types are
//	``ext3``, ``ext4``, and ``xfs``. If no value is specified, the ``xfs`` filesystem type is used by default.
//	The available Windows filesystem types are ``NTFS``.
func (o ServiceManagedEbsVolumeConfigurationPtrOutput) FilesystemType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceManagedEbsVolumeConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.FilesystemType
	}).(pulumi.StringPtrOutput)
}

// The number of I/O operations per second (IOPS). For “gp3“, “io1“, and “io2“ volumes, this represents the number of IOPS that are provisioned for the volume. For “gp2“ volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting.
//
//	The following are the supported values for each volume type.
//	 +  ``gp3``: 3,000 - 16,000 IOPS
//	 +  ``io1``: 100 - 64,000 IOPS
//	 +  ``io2``: 100 - 256,000 IOPS
//
//	This parameter is required for ``io1`` and ``io2`` volume types. The default for ``gp3`` volumes is ``3,000 IOPS``. This parameter is not supported for ``st1``, ``sc1``, or ``standard`` volume types.
//	This parameter maps 1:1 with the ``Iops`` parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API Reference*.
func (o ServiceManagedEbsVolumeConfigurationPtrOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceManagedEbsVolumeConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.Iops
	}).(pulumi.IntPtrOutput)
}

// The Amazon Resource Name (ARN) identifier of the AWS Key Management Service key to use for Amazon EBS encryption. When a key is specified using this parameter, it overrides Amazon EBS default encryption or any KMS key that you specified for cluster-level managed storage encryption. This parameter maps 1:1 with the “KmsKeyId“ parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API Reference*. For more information about encrypting Amazon EBS volumes attached to tasks, see [Encrypt data stored in Amazon EBS volumes attached to Amazon ECS tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ebs-kms-encryption.html).
//
//	AWS authenticates the AWS Key Management Service key asynchronously. Therefore, if you specify an ID, alias, or ARN that is invalid, the action can appear to complete, but eventually fails.
func (o ServiceManagedEbsVolumeConfigurationPtrOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceManagedEbsVolumeConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyId
	}).(pulumi.StringPtrOutput)
}

// The ARN of the IAM role to associate with this volume. This is the Amazon ECS infrastructure IAM role that is used to manage your AWS infrastructure. We recommend using the Amazon ECS-managed “AmazonECSInfrastructureRolePolicyForVolumes“ IAM policy with this role. For more information, see [Amazon ECS infrastructure IAM role](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/infrastructure_IAM_role.html) in the *Amazon ECS Developer Guide*.
func (o ServiceManagedEbsVolumeConfigurationPtrOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceManagedEbsVolumeConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.RoleArn
	}).(pulumi.StringPtrOutput)
}

// The size of the volume in GiB. You must specify either a volume size or a snapshot ID. If you specify a snapshot ID, the snapshot size is used for the volume size by default. You can optionally specify a volume size greater than or equal to the snapshot size. This parameter maps 1:1 with the “Size“ parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API Reference*.
//
//	The following are the supported volume size values for each volume type.
//	 +  ``gp2`` and ``gp3``: 1-16,384
//	 +  ``io1`` and ``io2``: 4-16,384
//	 +  ``st1`` and ``sc1``: 125-16,384
//	 +  ``standard``: 1-1,024
func (o ServiceManagedEbsVolumeConfigurationPtrOutput) SizeInGiB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceManagedEbsVolumeConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.SizeInGiB
	}).(pulumi.IntPtrOutput)
}

// The snapshot that Amazon ECS uses to create volumes for attachment to tasks maintained by the service. You must specify either “snapshotId“ or “sizeInGiB“ in your volume configuration. This parameter maps 1:1 with the “SnapshotId“ parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API Reference*.
func (o ServiceManagedEbsVolumeConfigurationPtrOutput) SnapshotId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceManagedEbsVolumeConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.SnapshotId
	}).(pulumi.StringPtrOutput)
}

// The tags to apply to the volume. Amazon ECS applies service-managed tags by default. This parameter maps 1:1 with the “TagSpecifications.N“ parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API Reference*.
func (o ServiceManagedEbsVolumeConfigurationPtrOutput) TagSpecifications() ServiceEbsTagSpecificationArrayOutput {
	return o.ApplyT(func(v *ServiceManagedEbsVolumeConfiguration) []ServiceEbsTagSpecification {
		if v == nil {
			return nil
		}
		return v.TagSpecifications
	}).(ServiceEbsTagSpecificationArrayOutput)
}

// The throughput to provision for a volume, in MiB/s, with a maximum of 1,000 MiB/s. This parameter maps 1:1 with the “Throughput“ parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API Reference*.
//
//	This parameter is only supported for the ``gp3`` volume type.
func (o ServiceManagedEbsVolumeConfigurationPtrOutput) Throughput() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceManagedEbsVolumeConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.Throughput
	}).(pulumi.IntPtrOutput)
}

// The rate, in MiB/s, at which data is fetched from a snapshot of an existing EBS volume to create new volumes for attachment to the tasks maintained by the service. This property can be specified only if you specify a “snapshotId“. For more information, see [Initialize Amazon EBS volumes](https://docs.aws.amazon.com/ebs/latest/userguide/initalize-volume.html) in the *Amazon EBS User Guide*.
func (o ServiceManagedEbsVolumeConfigurationPtrOutput) VolumeInitializationRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceManagedEbsVolumeConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.VolumeInitializationRate
	}).(pulumi.IntPtrOutput)
}

// The volume type. This parameter maps 1:1 with the “VolumeType“ parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API Reference*. For more information, see [Amazon EBS volume types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-volume-types.html) in the *Amazon EC2 User Guide*.
//
//	The following are the supported volume types.
//	 +  General Purpose SSD: ``gp2``|``gp3``
//	 +  Provisioned IOPS SSD: ``io1``|``io2``
//	 +  Throughput Optimized HDD: ``st1``
//	 +  Cold HDD: ``sc1``
//	 +  Magnetic: ``standard``
//	      The magnetic volume type is not supported on Fargate.
func (o ServiceManagedEbsVolumeConfigurationPtrOutput) VolumeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceManagedEbsVolumeConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.VolumeType
	}).(pulumi.StringPtrOutput)
}

// The network configuration for a task or service.
type ServiceNetworkConfiguration struct {
	// The VPC subnets and security groups that are associated with a task.
	//   All specified subnets and security groups must be from the same VPC.
	AwsvpcConfiguration *ServiceAwsVpcConfiguration `pulumi:"awsvpcConfiguration"`
}

// ServiceNetworkConfigurationInput is an input type that accepts ServiceNetworkConfigurationArgs and ServiceNetworkConfigurationOutput values.
// You can construct a concrete instance of `ServiceNetworkConfigurationInput` via:
//
//	ServiceNetworkConfigurationArgs{...}
type ServiceNetworkConfigurationInput interface {
	pulumi.Input

	ToServiceNetworkConfigurationOutput() ServiceNetworkConfigurationOutput
	ToServiceNetworkConfigurationOutputWithContext(context.Context) ServiceNetworkConfigurationOutput
}

// The network configuration for a task or service.
type ServiceNetworkConfigurationArgs struct {
	// The VPC subnets and security groups that are associated with a task.
	//   All specified subnets and security groups must be from the same VPC.
	AwsvpcConfiguration ServiceAwsVpcConfigurationPtrInput `pulumi:"awsvpcConfiguration"`
}

func (ServiceNetworkConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNetworkConfiguration)(nil)).Elem()
}

func (i ServiceNetworkConfigurationArgs) ToServiceNetworkConfigurationOutput() ServiceNetworkConfigurationOutput {
	return i.ToServiceNetworkConfigurationOutputWithContext(context.Background())
}

func (i ServiceNetworkConfigurationArgs) ToServiceNetworkConfigurationOutputWithContext(ctx context.Context) ServiceNetworkConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceNetworkConfigurationOutput)
}

func (i ServiceNetworkConfigurationArgs) ToServiceNetworkConfigurationPtrOutput() ServiceNetworkConfigurationPtrOutput {
	return i.ToServiceNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (i ServiceNetworkConfigurationArgs) ToServiceNetworkConfigurationPtrOutputWithContext(ctx context.Context) ServiceNetworkConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceNetworkConfigurationOutput).ToServiceNetworkConfigurationPtrOutputWithContext(ctx)
}

// ServiceNetworkConfigurationPtrInput is an input type that accepts ServiceNetworkConfigurationArgs, ServiceNetworkConfigurationPtr and ServiceNetworkConfigurationPtrOutput values.
// You can construct a concrete instance of `ServiceNetworkConfigurationPtrInput` via:
//
//	        ServiceNetworkConfigurationArgs{...}
//
//	or:
//
//	        nil
type ServiceNetworkConfigurationPtrInput interface {
	pulumi.Input

	ToServiceNetworkConfigurationPtrOutput() ServiceNetworkConfigurationPtrOutput
	ToServiceNetworkConfigurationPtrOutputWithContext(context.Context) ServiceNetworkConfigurationPtrOutput
}

type serviceNetworkConfigurationPtrType ServiceNetworkConfigurationArgs

func ServiceNetworkConfigurationPtr(v *ServiceNetworkConfigurationArgs) ServiceNetworkConfigurationPtrInput {
	return (*serviceNetworkConfigurationPtrType)(v)
}

func (*serviceNetworkConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceNetworkConfiguration)(nil)).Elem()
}

func (i *serviceNetworkConfigurationPtrType) ToServiceNetworkConfigurationPtrOutput() ServiceNetworkConfigurationPtrOutput {
	return i.ToServiceNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (i *serviceNetworkConfigurationPtrType) ToServiceNetworkConfigurationPtrOutputWithContext(ctx context.Context) ServiceNetworkConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceNetworkConfigurationPtrOutput)
}

// The network configuration for a task or service.
type ServiceNetworkConfigurationOutput struct{ *pulumi.OutputState }

func (ServiceNetworkConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNetworkConfiguration)(nil)).Elem()
}

func (o ServiceNetworkConfigurationOutput) ToServiceNetworkConfigurationOutput() ServiceNetworkConfigurationOutput {
	return o
}

func (o ServiceNetworkConfigurationOutput) ToServiceNetworkConfigurationOutputWithContext(ctx context.Context) ServiceNetworkConfigurationOutput {
	return o
}

func (o ServiceNetworkConfigurationOutput) ToServiceNetworkConfigurationPtrOutput() ServiceNetworkConfigurationPtrOutput {
	return o.ToServiceNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (o ServiceNetworkConfigurationOutput) ToServiceNetworkConfigurationPtrOutputWithContext(ctx context.Context) ServiceNetworkConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceNetworkConfiguration) *ServiceNetworkConfiguration {
		return &v
	}).(ServiceNetworkConfigurationPtrOutput)
}

// The VPC subnets and security groups that are associated with a task.
//
//	All specified subnets and security groups must be from the same VPC.
func (o ServiceNetworkConfigurationOutput) AwsvpcConfiguration() ServiceAwsVpcConfigurationPtrOutput {
	return o.ApplyT(func(v ServiceNetworkConfiguration) *ServiceAwsVpcConfiguration { return v.AwsvpcConfiguration }).(ServiceAwsVpcConfigurationPtrOutput)
}

type ServiceNetworkConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ServiceNetworkConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceNetworkConfiguration)(nil)).Elem()
}

func (o ServiceNetworkConfigurationPtrOutput) ToServiceNetworkConfigurationPtrOutput() ServiceNetworkConfigurationPtrOutput {
	return o
}

func (o ServiceNetworkConfigurationPtrOutput) ToServiceNetworkConfigurationPtrOutputWithContext(ctx context.Context) ServiceNetworkConfigurationPtrOutput {
	return o
}

func (o ServiceNetworkConfigurationPtrOutput) Elem() ServiceNetworkConfigurationOutput {
	return o.ApplyT(func(v *ServiceNetworkConfiguration) ServiceNetworkConfiguration {
		if v != nil {
			return *v
		}
		var ret ServiceNetworkConfiguration
		return ret
	}).(ServiceNetworkConfigurationOutput)
}

// The VPC subnets and security groups that are associated with a task.
//
//	All specified subnets and security groups must be from the same VPC.
func (o ServiceNetworkConfigurationPtrOutput) AwsvpcConfiguration() ServiceAwsVpcConfigurationPtrOutput {
	return o.ApplyT(func(v *ServiceNetworkConfiguration) *ServiceAwsVpcConfiguration {
		if v == nil {
			return nil
		}
		return v.AwsvpcConfiguration
	}).(ServiceAwsVpcConfigurationPtrOutput)
}

// An object representing a constraint on task placement. For more information, see [Task placement constraints](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html) in the *Amazon Elastic Container Service Developer Guide*.
//
//	If you're using the Fargate launch type, task placement constraints aren't supported.
type ServicePlacementConstraint struct {
	// A cluster query language expression to apply to the constraint. The expression can have a maximum length of 2000 characters. You can't specify an expression if the constraint type is ``distinctInstance``. For more information, see [Cluster query language](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html) in the *Amazon Elastic Container Service Developer Guide*.
	Expression *string `pulumi:"expression"`
	// The type of constraint. Use ``distinctInstance`` to ensure that each task in a particular group is running on a different container instance. Use ``memberOf`` to restrict the selection to a group of valid candidates.
	Type ServicePlacementConstraintType `pulumi:"type"`
}

// ServicePlacementConstraintInput is an input type that accepts ServicePlacementConstraintArgs and ServicePlacementConstraintOutput values.
// You can construct a concrete instance of `ServicePlacementConstraintInput` via:
//
//	ServicePlacementConstraintArgs{...}
type ServicePlacementConstraintInput interface {
	pulumi.Input

	ToServicePlacementConstraintOutput() ServicePlacementConstraintOutput
	ToServicePlacementConstraintOutputWithContext(context.Context) ServicePlacementConstraintOutput
}

// An object representing a constraint on task placement. For more information, see [Task placement constraints](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html) in the *Amazon Elastic Container Service Developer Guide*.
//
//	If you're using the Fargate launch type, task placement constraints aren't supported.
type ServicePlacementConstraintArgs struct {
	// A cluster query language expression to apply to the constraint. The expression can have a maximum length of 2000 characters. You can't specify an expression if the constraint type is ``distinctInstance``. For more information, see [Cluster query language](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html) in the *Amazon Elastic Container Service Developer Guide*.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// The type of constraint. Use ``distinctInstance`` to ensure that each task in a particular group is running on a different container instance. Use ``memberOf`` to restrict the selection to a group of valid candidates.
	Type ServicePlacementConstraintTypeInput `pulumi:"type"`
}

func (ServicePlacementConstraintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePlacementConstraint)(nil)).Elem()
}

func (i ServicePlacementConstraintArgs) ToServicePlacementConstraintOutput() ServicePlacementConstraintOutput {
	return i.ToServicePlacementConstraintOutputWithContext(context.Background())
}

func (i ServicePlacementConstraintArgs) ToServicePlacementConstraintOutputWithContext(ctx context.Context) ServicePlacementConstraintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePlacementConstraintOutput)
}

// ServicePlacementConstraintArrayInput is an input type that accepts ServicePlacementConstraintArray and ServicePlacementConstraintArrayOutput values.
// You can construct a concrete instance of `ServicePlacementConstraintArrayInput` via:
//
//	ServicePlacementConstraintArray{ ServicePlacementConstraintArgs{...} }
type ServicePlacementConstraintArrayInput interface {
	pulumi.Input

	ToServicePlacementConstraintArrayOutput() ServicePlacementConstraintArrayOutput
	ToServicePlacementConstraintArrayOutputWithContext(context.Context) ServicePlacementConstraintArrayOutput
}

type ServicePlacementConstraintArray []ServicePlacementConstraintInput

func (ServicePlacementConstraintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServicePlacementConstraint)(nil)).Elem()
}

func (i ServicePlacementConstraintArray) ToServicePlacementConstraintArrayOutput() ServicePlacementConstraintArrayOutput {
	return i.ToServicePlacementConstraintArrayOutputWithContext(context.Background())
}

func (i ServicePlacementConstraintArray) ToServicePlacementConstraintArrayOutputWithContext(ctx context.Context) ServicePlacementConstraintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePlacementConstraintArrayOutput)
}

// An object representing a constraint on task placement. For more information, see [Task placement constraints](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html) in the *Amazon Elastic Container Service Developer Guide*.
//
//	If you're using the Fargate launch type, task placement constraints aren't supported.
type ServicePlacementConstraintOutput struct{ *pulumi.OutputState }

func (ServicePlacementConstraintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePlacementConstraint)(nil)).Elem()
}

func (o ServicePlacementConstraintOutput) ToServicePlacementConstraintOutput() ServicePlacementConstraintOutput {
	return o
}

func (o ServicePlacementConstraintOutput) ToServicePlacementConstraintOutputWithContext(ctx context.Context) ServicePlacementConstraintOutput {
	return o
}

// A cluster query language expression to apply to the constraint. The expression can have a maximum length of 2000 characters. You can't specify an expression if the constraint type is “distinctInstance“. For more information, see [Cluster query language](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html) in the *Amazon Elastic Container Service Developer Guide*.
func (o ServicePlacementConstraintOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePlacementConstraint) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// The type of constraint. Use “distinctInstance“ to ensure that each task in a particular group is running on a different container instance. Use “memberOf“ to restrict the selection to a group of valid candidates.
func (o ServicePlacementConstraintOutput) Type() ServicePlacementConstraintTypeOutput {
	return o.ApplyT(func(v ServicePlacementConstraint) ServicePlacementConstraintType { return v.Type }).(ServicePlacementConstraintTypeOutput)
}

type ServicePlacementConstraintArrayOutput struct{ *pulumi.OutputState }

func (ServicePlacementConstraintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServicePlacementConstraint)(nil)).Elem()
}

func (o ServicePlacementConstraintArrayOutput) ToServicePlacementConstraintArrayOutput() ServicePlacementConstraintArrayOutput {
	return o
}

func (o ServicePlacementConstraintArrayOutput) ToServicePlacementConstraintArrayOutputWithContext(ctx context.Context) ServicePlacementConstraintArrayOutput {
	return o
}

func (o ServicePlacementConstraintArrayOutput) Index(i pulumi.IntInput) ServicePlacementConstraintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServicePlacementConstraint {
		return vs[0].([]ServicePlacementConstraint)[vs[1].(int)]
	}).(ServicePlacementConstraintOutput)
}

// The task placement strategy for a task or service. For more information, see [Task placement strategies](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-strategies.html) in the *Amazon Elastic Container Service Developer Guide*.
type ServicePlacementStrategy struct {
	// The field to apply the placement strategy against. For the ``spread`` placement strategy, valid values are ``instanceId`` (or ``host``, which has the same effect), or any platform or custom attribute that's applied to a container instance, such as ``attribute:ecs.availability-zone``. For the ``binpack`` placement strategy, valid values are ``cpu`` and ``memory``. For the ``random`` placement strategy, this field is not used.
	Field *string `pulumi:"field"`
	// The type of placement strategy. The ``random`` placement strategy randomly places tasks on available candidates. The ``spread`` placement strategy spreads placement across available candidates evenly based on the ``field`` parameter. The ``binpack`` strategy places tasks on available candidates that have the least available amount of the resource that's specified with the ``field`` parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount of remaining memory but still enough to run the task.
	Type ServicePlacementStrategyType `pulumi:"type"`
}

// ServicePlacementStrategyInput is an input type that accepts ServicePlacementStrategyArgs and ServicePlacementStrategyOutput values.
// You can construct a concrete instance of `ServicePlacementStrategyInput` via:
//
//	ServicePlacementStrategyArgs{...}
type ServicePlacementStrategyInput interface {
	pulumi.Input

	ToServicePlacementStrategyOutput() ServicePlacementStrategyOutput
	ToServicePlacementStrategyOutputWithContext(context.Context) ServicePlacementStrategyOutput
}

// The task placement strategy for a task or service. For more information, see [Task placement strategies](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-strategies.html) in the *Amazon Elastic Container Service Developer Guide*.
type ServicePlacementStrategyArgs struct {
	// The field to apply the placement strategy against. For the ``spread`` placement strategy, valid values are ``instanceId`` (or ``host``, which has the same effect), or any platform or custom attribute that's applied to a container instance, such as ``attribute:ecs.availability-zone``. For the ``binpack`` placement strategy, valid values are ``cpu`` and ``memory``. For the ``random`` placement strategy, this field is not used.
	Field pulumi.StringPtrInput `pulumi:"field"`
	// The type of placement strategy. The ``random`` placement strategy randomly places tasks on available candidates. The ``spread`` placement strategy spreads placement across available candidates evenly based on the ``field`` parameter. The ``binpack`` strategy places tasks on available candidates that have the least available amount of the resource that's specified with the ``field`` parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount of remaining memory but still enough to run the task.
	Type ServicePlacementStrategyTypeInput `pulumi:"type"`
}

func (ServicePlacementStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePlacementStrategy)(nil)).Elem()
}

func (i ServicePlacementStrategyArgs) ToServicePlacementStrategyOutput() ServicePlacementStrategyOutput {
	return i.ToServicePlacementStrategyOutputWithContext(context.Background())
}

func (i ServicePlacementStrategyArgs) ToServicePlacementStrategyOutputWithContext(ctx context.Context) ServicePlacementStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePlacementStrategyOutput)
}

// ServicePlacementStrategyArrayInput is an input type that accepts ServicePlacementStrategyArray and ServicePlacementStrategyArrayOutput values.
// You can construct a concrete instance of `ServicePlacementStrategyArrayInput` via:
//
//	ServicePlacementStrategyArray{ ServicePlacementStrategyArgs{...} }
type ServicePlacementStrategyArrayInput interface {
	pulumi.Input

	ToServicePlacementStrategyArrayOutput() ServicePlacementStrategyArrayOutput
	ToServicePlacementStrategyArrayOutputWithContext(context.Context) ServicePlacementStrategyArrayOutput
}

type ServicePlacementStrategyArray []ServicePlacementStrategyInput

func (ServicePlacementStrategyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServicePlacementStrategy)(nil)).Elem()
}

func (i ServicePlacementStrategyArray) ToServicePlacementStrategyArrayOutput() ServicePlacementStrategyArrayOutput {
	return i.ToServicePlacementStrategyArrayOutputWithContext(context.Background())
}

func (i ServicePlacementStrategyArray) ToServicePlacementStrategyArrayOutputWithContext(ctx context.Context) ServicePlacementStrategyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePlacementStrategyArrayOutput)
}

// The task placement strategy for a task or service. For more information, see [Task placement strategies](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-strategies.html) in the *Amazon Elastic Container Service Developer Guide*.
type ServicePlacementStrategyOutput struct{ *pulumi.OutputState }

func (ServicePlacementStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePlacementStrategy)(nil)).Elem()
}

func (o ServicePlacementStrategyOutput) ToServicePlacementStrategyOutput() ServicePlacementStrategyOutput {
	return o
}

func (o ServicePlacementStrategyOutput) ToServicePlacementStrategyOutputWithContext(ctx context.Context) ServicePlacementStrategyOutput {
	return o
}

// The field to apply the placement strategy against. For the “spread“ placement strategy, valid values are “instanceId“ (or “host“, which has the same effect), or any platform or custom attribute that's applied to a container instance, such as “attribute:ecs.availability-zone“. For the “binpack“ placement strategy, valid values are “cpu“ and “memory“. For the “random“ placement strategy, this field is not used.
func (o ServicePlacementStrategyOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePlacementStrategy) *string { return v.Field }).(pulumi.StringPtrOutput)
}

// The type of placement strategy. The “random“ placement strategy randomly places tasks on available candidates. The “spread“ placement strategy spreads placement across available candidates evenly based on the “field“ parameter. The “binpack“ strategy places tasks on available candidates that have the least available amount of the resource that's specified with the “field“ parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount of remaining memory but still enough to run the task.
func (o ServicePlacementStrategyOutput) Type() ServicePlacementStrategyTypeOutput {
	return o.ApplyT(func(v ServicePlacementStrategy) ServicePlacementStrategyType { return v.Type }).(ServicePlacementStrategyTypeOutput)
}

type ServicePlacementStrategyArrayOutput struct{ *pulumi.OutputState }

func (ServicePlacementStrategyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServicePlacementStrategy)(nil)).Elem()
}

func (o ServicePlacementStrategyArrayOutput) ToServicePlacementStrategyArrayOutput() ServicePlacementStrategyArrayOutput {
	return o
}

func (o ServicePlacementStrategyArrayOutput) ToServicePlacementStrategyArrayOutputWithContext(ctx context.Context) ServicePlacementStrategyArrayOutput {
	return o
}

func (o ServicePlacementStrategyArrayOutput) Index(i pulumi.IntInput) ServicePlacementStrategyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServicePlacementStrategy {
		return vs[0].([]ServicePlacementStrategy)[vs[1].(int)]
	}).(ServicePlacementStrategyOutput)
}

// The details for the service registry.
//
//	Each service may be associated with one service registry. Multiple service registries for each service are not supported.
//	When you add, update, or remove the service registries configuration, Amazon ECS starts a new deployment. New tasks are registered and deregistered to the updated service registry configuration.
type ServiceRegistry struct {
	// The container name value to be used for your service discovery service. It's already specified in the task definition. If the task definition that your service task specifies uses the ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and ``containerPort`` combination from the task definition. If the task definition that your service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record is used, you must specify either a ``containerName`` and ``containerPort`` combination or a ``port`` value. However, you can't specify both.
	ContainerName *string `pulumi:"containerName"`
	// The port value to be used for your service discovery service. It's already specified in the task definition. If the task definition your service task specifies uses the ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and ``containerPort`` combination from the task definition. If the task definition your service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record is used, you must specify either a ``containerName`` and ``containerPort`` combination or a ``port`` value. However, you can't specify both.
	ContainerPort *int `pulumi:"containerPort"`
	// The port value used if your service discovery service specified an SRV record. This field might be used if both the ``awsvpc`` network mode and SRV records are used.
	Port *int `pulumi:"port"`
	// The Amazon Resource Name (ARN) of the service registry. The currently supported service registry is CMAP. For more information, see [CreateService](https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html).
	RegistryArn *string `pulumi:"registryArn"`
}

// ServiceRegistryInput is an input type that accepts ServiceRegistryArgs and ServiceRegistryOutput values.
// You can construct a concrete instance of `ServiceRegistryInput` via:
//
//	ServiceRegistryArgs{...}
type ServiceRegistryInput interface {
	pulumi.Input

	ToServiceRegistryOutput() ServiceRegistryOutput
	ToServiceRegistryOutputWithContext(context.Context) ServiceRegistryOutput
}

// The details for the service registry.
//
//	Each service may be associated with one service registry. Multiple service registries for each service are not supported.
//	When you add, update, or remove the service registries configuration, Amazon ECS starts a new deployment. New tasks are registered and deregistered to the updated service registry configuration.
type ServiceRegistryArgs struct {
	// The container name value to be used for your service discovery service. It's already specified in the task definition. If the task definition that your service task specifies uses the ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and ``containerPort`` combination from the task definition. If the task definition that your service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record is used, you must specify either a ``containerName`` and ``containerPort`` combination or a ``port`` value. However, you can't specify both.
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// The port value to be used for your service discovery service. It's already specified in the task definition. If the task definition your service task specifies uses the ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and ``containerPort`` combination from the task definition. If the task definition your service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record is used, you must specify either a ``containerName`` and ``containerPort`` combination or a ``port`` value. However, you can't specify both.
	ContainerPort pulumi.IntPtrInput `pulumi:"containerPort"`
	// The port value used if your service discovery service specified an SRV record. This field might be used if both the ``awsvpc`` network mode and SRV records are used.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The Amazon Resource Name (ARN) of the service registry. The currently supported service registry is CMAP. For more information, see [CreateService](https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html).
	RegistryArn pulumi.StringPtrInput `pulumi:"registryArn"`
}

func (ServiceRegistryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceRegistry)(nil)).Elem()
}

func (i ServiceRegistryArgs) ToServiceRegistryOutput() ServiceRegistryOutput {
	return i.ToServiceRegistryOutputWithContext(context.Background())
}

func (i ServiceRegistryArgs) ToServiceRegistryOutputWithContext(ctx context.Context) ServiceRegistryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceRegistryOutput)
}

// ServiceRegistryArrayInput is an input type that accepts ServiceRegistryArray and ServiceRegistryArrayOutput values.
// You can construct a concrete instance of `ServiceRegistryArrayInput` via:
//
//	ServiceRegistryArray{ ServiceRegistryArgs{...} }
type ServiceRegistryArrayInput interface {
	pulumi.Input

	ToServiceRegistryArrayOutput() ServiceRegistryArrayOutput
	ToServiceRegistryArrayOutputWithContext(context.Context) ServiceRegistryArrayOutput
}

type ServiceRegistryArray []ServiceRegistryInput

func (ServiceRegistryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceRegistry)(nil)).Elem()
}

func (i ServiceRegistryArray) ToServiceRegistryArrayOutput() ServiceRegistryArrayOutput {
	return i.ToServiceRegistryArrayOutputWithContext(context.Background())
}

func (i ServiceRegistryArray) ToServiceRegistryArrayOutputWithContext(ctx context.Context) ServiceRegistryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceRegistryArrayOutput)
}

// The details for the service registry.
//
//	Each service may be associated with one service registry. Multiple service registries for each service are not supported.
//	When you add, update, or remove the service registries configuration, Amazon ECS starts a new deployment. New tasks are registered and deregistered to the updated service registry configuration.
type ServiceRegistryOutput struct{ *pulumi.OutputState }

func (ServiceRegistryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceRegistry)(nil)).Elem()
}

func (o ServiceRegistryOutput) ToServiceRegistryOutput() ServiceRegistryOutput {
	return o
}

func (o ServiceRegistryOutput) ToServiceRegistryOutputWithContext(ctx context.Context) ServiceRegistryOutput {
	return o
}

// The container name value to be used for your service discovery service. It's already specified in the task definition. If the task definition that your service task specifies uses the “bridge“ or “host“ network mode, you must specify a “containerName“ and “containerPort“ combination from the task definition. If the task definition that your service task specifies uses the “awsvpc“ network mode and a type SRV DNS record is used, you must specify either a “containerName“ and “containerPort“ combination or a “port“ value. However, you can't specify both.
func (o ServiceRegistryOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceRegistry) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// The port value to be used for your service discovery service. It's already specified in the task definition. If the task definition your service task specifies uses the “bridge“ or “host“ network mode, you must specify a “containerName“ and “containerPort“ combination from the task definition. If the task definition your service task specifies uses the “awsvpc“ network mode and a type SRV DNS record is used, you must specify either a “containerName“ and “containerPort“ combination or a “port“ value. However, you can't specify both.
func (o ServiceRegistryOutput) ContainerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceRegistry) *int { return v.ContainerPort }).(pulumi.IntPtrOutput)
}

// The port value used if your service discovery service specified an SRV record. This field might be used if both the “awsvpc“ network mode and SRV records are used.
func (o ServiceRegistryOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceRegistry) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The Amazon Resource Name (ARN) of the service registry. The currently supported service registry is CMAP. For more information, see [CreateService](https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html).
func (o ServiceRegistryOutput) RegistryArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceRegistry) *string { return v.RegistryArn }).(pulumi.StringPtrOutput)
}

type ServiceRegistryArrayOutput struct{ *pulumi.OutputState }

func (ServiceRegistryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceRegistry)(nil)).Elem()
}

func (o ServiceRegistryArrayOutput) ToServiceRegistryArrayOutput() ServiceRegistryArrayOutput {
	return o
}

func (o ServiceRegistryArrayOutput) ToServiceRegistryArrayOutputWithContext(ctx context.Context) ServiceRegistryArrayOutput {
	return o
}

func (o ServiceRegistryArrayOutput) Index(i pulumi.IntInput) ServiceRegistryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceRegistry {
		return vs[0].([]ServiceRegistry)[vs[1].(int)]
	}).(ServiceRegistryOutput)
}

// An object representing the secret to expose to your container. Secrets can be exposed to a container in the following ways:
//
//   - To inject sensitive data into your containers as environment variables, use the “secrets“ container definition parameter.
//
//   - To reference sensitive information in the log configuration of a container, use the “secretOptions“ container definition parameter.
//
//     For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the *Amazon Elastic Container Service Developer Guide*.
type ServiceSecret struct {
	// The name of the secret.
	Name string `pulumi:"name"`
	// The secret to expose to the container. The supported values are either the full ARN of the ASMlong secret or the full ARN of the parameter in the SSM Parameter Store.
	//  For information about the require IAMlong permissions, see [Required IAM permissions for Amazon ECS secrets](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data-secrets.html#secrets-iam) (for Secrets Manager) or [Required IAM permissions for Amazon ECS secrets](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data-parameters.html) (for Systems Manager Parameter store) in the *Amazon Elastic Container Service Developer Guide*.
	//   If the SSM Parameter Store parameter exists in the same Region as the task you're launching, then you can use either the full ARN or name of the parameter. If the parameter exists in a different Region, then the full ARN must be specified.
	ValueFrom string `pulumi:"valueFrom"`
}

// ServiceSecretInput is an input type that accepts ServiceSecretArgs and ServiceSecretOutput values.
// You can construct a concrete instance of `ServiceSecretInput` via:
//
//	ServiceSecretArgs{...}
type ServiceSecretInput interface {
	pulumi.Input

	ToServiceSecretOutput() ServiceSecretOutput
	ToServiceSecretOutputWithContext(context.Context) ServiceSecretOutput
}

// An object representing the secret to expose to your container. Secrets can be exposed to a container in the following ways:
//
//   - To inject sensitive data into your containers as environment variables, use the “secrets“ container definition parameter.
//
//   - To reference sensitive information in the log configuration of a container, use the “secretOptions“ container definition parameter.
//
//     For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the *Amazon Elastic Container Service Developer Guide*.
type ServiceSecretArgs struct {
	// The name of the secret.
	Name pulumi.StringInput `pulumi:"name"`
	// The secret to expose to the container. The supported values are either the full ARN of the ASMlong secret or the full ARN of the parameter in the SSM Parameter Store.
	//  For information about the require IAMlong permissions, see [Required IAM permissions for Amazon ECS secrets](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data-secrets.html#secrets-iam) (for Secrets Manager) or [Required IAM permissions for Amazon ECS secrets](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data-parameters.html) (for Systems Manager Parameter store) in the *Amazon Elastic Container Service Developer Guide*.
	//   If the SSM Parameter Store parameter exists in the same Region as the task you're launching, then you can use either the full ARN or name of the parameter. If the parameter exists in a different Region, then the full ARN must be specified.
	ValueFrom pulumi.StringInput `pulumi:"valueFrom"`
}

func (ServiceSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSecret)(nil)).Elem()
}

func (i ServiceSecretArgs) ToServiceSecretOutput() ServiceSecretOutput {
	return i.ToServiceSecretOutputWithContext(context.Background())
}

func (i ServiceSecretArgs) ToServiceSecretOutputWithContext(ctx context.Context) ServiceSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSecretOutput)
}

// ServiceSecretArrayInput is an input type that accepts ServiceSecretArray and ServiceSecretArrayOutput values.
// You can construct a concrete instance of `ServiceSecretArrayInput` via:
//
//	ServiceSecretArray{ ServiceSecretArgs{...} }
type ServiceSecretArrayInput interface {
	pulumi.Input

	ToServiceSecretArrayOutput() ServiceSecretArrayOutput
	ToServiceSecretArrayOutputWithContext(context.Context) ServiceSecretArrayOutput
}

type ServiceSecretArray []ServiceSecretInput

func (ServiceSecretArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceSecret)(nil)).Elem()
}

func (i ServiceSecretArray) ToServiceSecretArrayOutput() ServiceSecretArrayOutput {
	return i.ToServiceSecretArrayOutputWithContext(context.Background())
}

func (i ServiceSecretArray) ToServiceSecretArrayOutputWithContext(ctx context.Context) ServiceSecretArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSecretArrayOutput)
}

// An object representing the secret to expose to your container. Secrets can be exposed to a container in the following ways:
//
//   - To inject sensitive data into your containers as environment variables, use the “secrets“ container definition parameter.
//
//   - To reference sensitive information in the log configuration of a container, use the “secretOptions“ container definition parameter.
//
//     For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the *Amazon Elastic Container Service Developer Guide*.
type ServiceSecretOutput struct{ *pulumi.OutputState }

func (ServiceSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSecret)(nil)).Elem()
}

func (o ServiceSecretOutput) ToServiceSecretOutput() ServiceSecretOutput {
	return o
}

func (o ServiceSecretOutput) ToServiceSecretOutputWithContext(ctx context.Context) ServiceSecretOutput {
	return o
}

// The name of the secret.
func (o ServiceSecretOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceSecret) string { return v.Name }).(pulumi.StringOutput)
}

// The secret to expose to the container. The supported values are either the full ARN of the ASMlong secret or the full ARN of the parameter in the SSM Parameter Store.
//
//	For information about the require IAMlong permissions, see [Required IAM permissions for Amazon ECS secrets](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data-secrets.html#secrets-iam) (for Secrets Manager) or [Required IAM permissions for Amazon ECS secrets](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data-parameters.html) (for Systems Manager Parameter store) in the *Amazon Elastic Container Service Developer Guide*.
//	 If the SSM Parameter Store parameter exists in the same Region as the task you're launching, then you can use either the full ARN or name of the parameter. If the parameter exists in a different Region, then the full ARN must be specified.
func (o ServiceSecretOutput) ValueFrom() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceSecret) string { return v.ValueFrom }).(pulumi.StringOutput)
}

type ServiceSecretArrayOutput struct{ *pulumi.OutputState }

func (ServiceSecretArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceSecret)(nil)).Elem()
}

func (o ServiceSecretArrayOutput) ToServiceSecretArrayOutput() ServiceSecretArrayOutput {
	return o
}

func (o ServiceSecretArrayOutput) ToServiceSecretArrayOutputWithContext(ctx context.Context) ServiceSecretArrayOutput {
	return o
}

func (o ServiceSecretArrayOutput) Index(i pulumi.IntInput) ServiceSecretOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceSecret {
		return vs[0].([]ServiceSecret)[vs[1].(int)]
	}).(ServiceSecretOutput)
}

// The metadata that you apply to a resource to help you categorize and organize them. Each tag consists of a key and an optional value. You define them.
//
//	The following basic restrictions apply to tags:
//	 +  Maximum number of tags per resource - 50
//	 +  For each resource, each tag key must be unique, and each tag key can have only one value.
//	 +  Maximum key length - 128 Unicode characters in UTF-8
//	 +  Maximum value length - 256 Unicode characters in UTF-8
//	 +  If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
//	 +  Tag keys and values are case-sensitive.
//	 +  Do not use ``aws:``, ``AWS:``, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
//
//	In order to tag a service that has the following ARN format, you need to migrate the service to the long ARN. You must use the API, CLI or console to migrate the service ARN. For more information, see [Migrate an short service ARN to a long ARN](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-arn-migration.html) in the *Developer Guide*.
//	 ``arn:aws:ecs:region:aws_account_id:service/service-name``
//	After the migration is complete, the following are true:
//	 +   The service ARN is: ``arn:aws:ecs:region:aws_account_id:service/cluster-name/service-name``
//	 +  You can use CFN to tag the service as you would a service with a long ARN format.
//	 +  When the ``PhysicalResourceId`` in the CFN stack represents a service, the value does not change and will be the short service ARN.
type ServiceTag struct {
	// One part of a key-value pair that make up a tag. A ``key`` is a general label that acts like a category for more specific tag values.
	Key *string `pulumi:"key"`
	// The optional part of a key-value pair that make up a tag. A ``value`` acts as a descriptor within a tag category (key).
	Value *string `pulumi:"value"`
}

// ServiceTagInput is an input type that accepts ServiceTagArgs and ServiceTagOutput values.
// You can construct a concrete instance of `ServiceTagInput` via:
//
//	ServiceTagArgs{...}
type ServiceTagInput interface {
	pulumi.Input

	ToServiceTagOutput() ServiceTagOutput
	ToServiceTagOutputWithContext(context.Context) ServiceTagOutput
}

// The metadata that you apply to a resource to help you categorize and organize them. Each tag consists of a key and an optional value. You define them.
//
//	The following basic restrictions apply to tags:
//	 +  Maximum number of tags per resource - 50
//	 +  For each resource, each tag key must be unique, and each tag key can have only one value.
//	 +  Maximum key length - 128 Unicode characters in UTF-8
//	 +  Maximum value length - 256 Unicode characters in UTF-8
//	 +  If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
//	 +  Tag keys and values are case-sensitive.
//	 +  Do not use ``aws:``, ``AWS:``, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
//
//	In order to tag a service that has the following ARN format, you need to migrate the service to the long ARN. You must use the API, CLI or console to migrate the service ARN. For more information, see [Migrate an short service ARN to a long ARN](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-arn-migration.html) in the *Developer Guide*.
//	 ``arn:aws:ecs:region:aws_account_id:service/service-name``
//	After the migration is complete, the following are true:
//	 +   The service ARN is: ``arn:aws:ecs:region:aws_account_id:service/cluster-name/service-name``
//	 +  You can use CFN to tag the service as you would a service with a long ARN format.
//	 +  When the ``PhysicalResourceId`` in the CFN stack represents a service, the value does not change and will be the short service ARN.
type ServiceTagArgs struct {
	// One part of a key-value pair that make up a tag. A ``key`` is a general label that acts like a category for more specific tag values.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The optional part of a key-value pair that make up a tag. A ``value`` acts as a descriptor within a tag category (key).
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ServiceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTag)(nil)).Elem()
}

func (i ServiceTagArgs) ToServiceTagOutput() ServiceTagOutput {
	return i.ToServiceTagOutputWithContext(context.Background())
}

func (i ServiceTagArgs) ToServiceTagOutputWithContext(ctx context.Context) ServiceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTagOutput)
}

// ServiceTagArrayInput is an input type that accepts ServiceTagArray and ServiceTagArrayOutput values.
// You can construct a concrete instance of `ServiceTagArrayInput` via:
//
//	ServiceTagArray{ ServiceTagArgs{...} }
type ServiceTagArrayInput interface {
	pulumi.Input

	ToServiceTagArrayOutput() ServiceTagArrayOutput
	ToServiceTagArrayOutputWithContext(context.Context) ServiceTagArrayOutput
}

type ServiceTagArray []ServiceTagInput

func (ServiceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceTag)(nil)).Elem()
}

func (i ServiceTagArray) ToServiceTagArrayOutput() ServiceTagArrayOutput {
	return i.ToServiceTagArrayOutputWithContext(context.Background())
}

func (i ServiceTagArray) ToServiceTagArrayOutputWithContext(ctx context.Context) ServiceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTagArrayOutput)
}

// The metadata that you apply to a resource to help you categorize and organize them. Each tag consists of a key and an optional value. You define them.
//
//	The following basic restrictions apply to tags:
//	 +  Maximum number of tags per resource - 50
//	 +  For each resource, each tag key must be unique, and each tag key can have only one value.
//	 +  Maximum key length - 128 Unicode characters in UTF-8
//	 +  Maximum value length - 256 Unicode characters in UTF-8
//	 +  If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
//	 +  Tag keys and values are case-sensitive.
//	 +  Do not use ``aws:``, ``AWS:``, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
//
//	In order to tag a service that has the following ARN format, you need to migrate the service to the long ARN. You must use the API, CLI or console to migrate the service ARN. For more information, see [Migrate an short service ARN to a long ARN](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-arn-migration.html) in the *Developer Guide*.
//	 ``arn:aws:ecs:region:aws_account_id:service/service-name``
//	After the migration is complete, the following are true:
//	 +   The service ARN is: ``arn:aws:ecs:region:aws_account_id:service/cluster-name/service-name``
//	 +  You can use CFN to tag the service as you would a service with a long ARN format.
//	 +  When the ``PhysicalResourceId`` in the CFN stack represents a service, the value does not change and will be the short service ARN.
type ServiceTagOutput struct{ *pulumi.OutputState }

func (ServiceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTag)(nil)).Elem()
}

func (o ServiceTagOutput) ToServiceTagOutput() ServiceTagOutput {
	return o
}

func (o ServiceTagOutput) ToServiceTagOutputWithContext(ctx context.Context) ServiceTagOutput {
	return o
}

// One part of a key-value pair that make up a tag. A “key“ is a general label that acts like a category for more specific tag values.
func (o ServiceTagOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTag) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The optional part of a key-value pair that make up a tag. A “value“ acts as a descriptor within a tag category (key).
func (o ServiceTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ServiceTagArrayOutput struct{ *pulumi.OutputState }

func (ServiceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceTag)(nil)).Elem()
}

func (o ServiceTagArrayOutput) ToServiceTagArrayOutput() ServiceTagArrayOutput {
	return o
}

func (o ServiceTagArrayOutput) ToServiceTagArrayOutputWithContext(ctx context.Context) ServiceTagArrayOutput {
	return o
}

func (o ServiceTagArrayOutput) Index(i pulumi.IntInput) ServiceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceTag {
		return vs[0].([]ServiceTag)[vs[1].(int)]
	}).(ServiceTagOutput)
}

// An object that represents the timeout configurations for Service Connect.
//
//	If ``idleTimeout`` is set to a time that is less than ``perRequestTimeout``, the connection will close when the ``idleTimeout`` is reached and not the ``perRequestTimeout``.
type ServiceTimeoutConfiguration struct {
	// The amount of time in seconds a connection will stay active while idle. A value of ``0`` can be set to disable ``idleTimeout``.
	//  The ``idleTimeout`` default for ``HTTP``/``HTTP2``/``GRPC`` is 5 minutes.
	//  The ``idleTimeout`` default for ``TCP`` is 1 hour.
	IdleTimeoutSeconds *int `pulumi:"idleTimeoutSeconds"`
	// The amount of time waiting for the upstream to respond with a complete response per request. A value of ``0`` can be set to disable ``perRequestTimeout``. ``perRequestTimeout`` can only be set if Service Connect ``appProtocol`` isn't ``TCP``. Only ``idleTimeout`` is allowed for ``TCP````appProtocol``.
	PerRequestTimeoutSeconds *int `pulumi:"perRequestTimeoutSeconds"`
}

// ServiceTimeoutConfigurationInput is an input type that accepts ServiceTimeoutConfigurationArgs and ServiceTimeoutConfigurationOutput values.
// You can construct a concrete instance of `ServiceTimeoutConfigurationInput` via:
//
//	ServiceTimeoutConfigurationArgs{...}
type ServiceTimeoutConfigurationInput interface {
	pulumi.Input

	ToServiceTimeoutConfigurationOutput() ServiceTimeoutConfigurationOutput
	ToServiceTimeoutConfigurationOutputWithContext(context.Context) ServiceTimeoutConfigurationOutput
}

// An object that represents the timeout configurations for Service Connect.
//
//	If ``idleTimeout`` is set to a time that is less than ``perRequestTimeout``, the connection will close when the ``idleTimeout`` is reached and not the ``perRequestTimeout``.
type ServiceTimeoutConfigurationArgs struct {
	// The amount of time in seconds a connection will stay active while idle. A value of ``0`` can be set to disable ``idleTimeout``.
	//  The ``idleTimeout`` default for ``HTTP``/``HTTP2``/``GRPC`` is 5 minutes.
	//  The ``idleTimeout`` default for ``TCP`` is 1 hour.
	IdleTimeoutSeconds pulumi.IntPtrInput `pulumi:"idleTimeoutSeconds"`
	// The amount of time waiting for the upstream to respond with a complete response per request. A value of ``0`` can be set to disable ``perRequestTimeout``. ``perRequestTimeout`` can only be set if Service Connect ``appProtocol`` isn't ``TCP``. Only ``idleTimeout`` is allowed for ``TCP````appProtocol``.
	PerRequestTimeoutSeconds pulumi.IntPtrInput `pulumi:"perRequestTimeoutSeconds"`
}

func (ServiceTimeoutConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTimeoutConfiguration)(nil)).Elem()
}

func (i ServiceTimeoutConfigurationArgs) ToServiceTimeoutConfigurationOutput() ServiceTimeoutConfigurationOutput {
	return i.ToServiceTimeoutConfigurationOutputWithContext(context.Background())
}

func (i ServiceTimeoutConfigurationArgs) ToServiceTimeoutConfigurationOutputWithContext(ctx context.Context) ServiceTimeoutConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTimeoutConfigurationOutput)
}

func (i ServiceTimeoutConfigurationArgs) ToServiceTimeoutConfigurationPtrOutput() ServiceTimeoutConfigurationPtrOutput {
	return i.ToServiceTimeoutConfigurationPtrOutputWithContext(context.Background())
}

func (i ServiceTimeoutConfigurationArgs) ToServiceTimeoutConfigurationPtrOutputWithContext(ctx context.Context) ServiceTimeoutConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTimeoutConfigurationOutput).ToServiceTimeoutConfigurationPtrOutputWithContext(ctx)
}

// ServiceTimeoutConfigurationPtrInput is an input type that accepts ServiceTimeoutConfigurationArgs, ServiceTimeoutConfigurationPtr and ServiceTimeoutConfigurationPtrOutput values.
// You can construct a concrete instance of `ServiceTimeoutConfigurationPtrInput` via:
//
//	        ServiceTimeoutConfigurationArgs{...}
//
//	or:
//
//	        nil
type ServiceTimeoutConfigurationPtrInput interface {
	pulumi.Input

	ToServiceTimeoutConfigurationPtrOutput() ServiceTimeoutConfigurationPtrOutput
	ToServiceTimeoutConfigurationPtrOutputWithContext(context.Context) ServiceTimeoutConfigurationPtrOutput
}

type serviceTimeoutConfigurationPtrType ServiceTimeoutConfigurationArgs

func ServiceTimeoutConfigurationPtr(v *ServiceTimeoutConfigurationArgs) ServiceTimeoutConfigurationPtrInput {
	return (*serviceTimeoutConfigurationPtrType)(v)
}

func (*serviceTimeoutConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTimeoutConfiguration)(nil)).Elem()
}

func (i *serviceTimeoutConfigurationPtrType) ToServiceTimeoutConfigurationPtrOutput() ServiceTimeoutConfigurationPtrOutput {
	return i.ToServiceTimeoutConfigurationPtrOutputWithContext(context.Background())
}

func (i *serviceTimeoutConfigurationPtrType) ToServiceTimeoutConfigurationPtrOutputWithContext(ctx context.Context) ServiceTimeoutConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTimeoutConfigurationPtrOutput)
}

// An object that represents the timeout configurations for Service Connect.
//
//	If ``idleTimeout`` is set to a time that is less than ``perRequestTimeout``, the connection will close when the ``idleTimeout`` is reached and not the ``perRequestTimeout``.
type ServiceTimeoutConfigurationOutput struct{ *pulumi.OutputState }

func (ServiceTimeoutConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTimeoutConfiguration)(nil)).Elem()
}

func (o ServiceTimeoutConfigurationOutput) ToServiceTimeoutConfigurationOutput() ServiceTimeoutConfigurationOutput {
	return o
}

func (o ServiceTimeoutConfigurationOutput) ToServiceTimeoutConfigurationOutputWithContext(ctx context.Context) ServiceTimeoutConfigurationOutput {
	return o
}

func (o ServiceTimeoutConfigurationOutput) ToServiceTimeoutConfigurationPtrOutput() ServiceTimeoutConfigurationPtrOutput {
	return o.ToServiceTimeoutConfigurationPtrOutputWithContext(context.Background())
}

func (o ServiceTimeoutConfigurationOutput) ToServiceTimeoutConfigurationPtrOutputWithContext(ctx context.Context) ServiceTimeoutConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceTimeoutConfiguration) *ServiceTimeoutConfiguration {
		return &v
	}).(ServiceTimeoutConfigurationPtrOutput)
}

// The amount of time in seconds a connection will stay active while idle. A value of “0“ can be set to disable “idleTimeout“.
//
//	The ``idleTimeout`` default for ``HTTP``/``HTTP2``/``GRPC`` is 5 minutes.
//	The ``idleTimeout`` default for ``TCP`` is 1 hour.
func (o ServiceTimeoutConfigurationOutput) IdleTimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceTimeoutConfiguration) *int { return v.IdleTimeoutSeconds }).(pulumi.IntPtrOutput)
}

// The amount of time waiting for the upstream to respond with a complete response per request. A value of “0“ can be set to disable “perRequestTimeout“. “perRequestTimeout“ can only be set if Service Connect “appProtocol“ isn't “TCP“. Only “idleTimeout“ is allowed for “TCP````appProtocol“.
func (o ServiceTimeoutConfigurationOutput) PerRequestTimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceTimeoutConfiguration) *int { return v.PerRequestTimeoutSeconds }).(pulumi.IntPtrOutput)
}

type ServiceTimeoutConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ServiceTimeoutConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTimeoutConfiguration)(nil)).Elem()
}

func (o ServiceTimeoutConfigurationPtrOutput) ToServiceTimeoutConfigurationPtrOutput() ServiceTimeoutConfigurationPtrOutput {
	return o
}

func (o ServiceTimeoutConfigurationPtrOutput) ToServiceTimeoutConfigurationPtrOutputWithContext(ctx context.Context) ServiceTimeoutConfigurationPtrOutput {
	return o
}

func (o ServiceTimeoutConfigurationPtrOutput) Elem() ServiceTimeoutConfigurationOutput {
	return o.ApplyT(func(v *ServiceTimeoutConfiguration) ServiceTimeoutConfiguration {
		if v != nil {
			return *v
		}
		var ret ServiceTimeoutConfiguration
		return ret
	}).(ServiceTimeoutConfigurationOutput)
}

// The amount of time in seconds a connection will stay active while idle. A value of “0“ can be set to disable “idleTimeout“.
//
//	The ``idleTimeout`` default for ``HTTP``/``HTTP2``/``GRPC`` is 5 minutes.
//	The ``idleTimeout`` default for ``TCP`` is 1 hour.
func (o ServiceTimeoutConfigurationPtrOutput) IdleTimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceTimeoutConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.IdleTimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

// The amount of time waiting for the upstream to respond with a complete response per request. A value of “0“ can be set to disable “perRequestTimeout“. “perRequestTimeout“ can only be set if Service Connect “appProtocol“ isn't “TCP“. Only “idleTimeout“ is allowed for “TCP````appProtocol“.
func (o ServiceTimeoutConfigurationPtrOutput) PerRequestTimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceTimeoutConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.PerRequestTimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

// The configuration for a volume specified in the task definition as a volume that is configured at launch time. Currently, the only supported volume type is an Amazon EBS volume.
type ServiceVolumeConfiguration struct {
	// The configuration for the Amazon EBS volume that Amazon ECS creates and manages on your behalf. These settings are used to create each Amazon EBS volume, with one volume created for each task in the service. The Amazon EBS volumes are visible in your account in the Amazon EC2 console once they are created.
	ManagedEbsVolume *ServiceManagedEbsVolumeConfiguration `pulumi:"managedEbsVolume"`
	// The name of the volume. This value must match the volume name from the ``Volume`` object in the task definition.
	Name string `pulumi:"name"`
}

// ServiceVolumeConfigurationInput is an input type that accepts ServiceVolumeConfigurationArgs and ServiceVolumeConfigurationOutput values.
// You can construct a concrete instance of `ServiceVolumeConfigurationInput` via:
//
//	ServiceVolumeConfigurationArgs{...}
type ServiceVolumeConfigurationInput interface {
	pulumi.Input

	ToServiceVolumeConfigurationOutput() ServiceVolumeConfigurationOutput
	ToServiceVolumeConfigurationOutputWithContext(context.Context) ServiceVolumeConfigurationOutput
}

// The configuration for a volume specified in the task definition as a volume that is configured at launch time. Currently, the only supported volume type is an Amazon EBS volume.
type ServiceVolumeConfigurationArgs struct {
	// The configuration for the Amazon EBS volume that Amazon ECS creates and manages on your behalf. These settings are used to create each Amazon EBS volume, with one volume created for each task in the service. The Amazon EBS volumes are visible in your account in the Amazon EC2 console once they are created.
	ManagedEbsVolume ServiceManagedEbsVolumeConfigurationPtrInput `pulumi:"managedEbsVolume"`
	// The name of the volume. This value must match the volume name from the ``Volume`` object in the task definition.
	Name pulumi.StringInput `pulumi:"name"`
}

func (ServiceVolumeConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVolumeConfiguration)(nil)).Elem()
}

func (i ServiceVolumeConfigurationArgs) ToServiceVolumeConfigurationOutput() ServiceVolumeConfigurationOutput {
	return i.ToServiceVolumeConfigurationOutputWithContext(context.Background())
}

func (i ServiceVolumeConfigurationArgs) ToServiceVolumeConfigurationOutputWithContext(ctx context.Context) ServiceVolumeConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVolumeConfigurationOutput)
}

// ServiceVolumeConfigurationArrayInput is an input type that accepts ServiceVolumeConfigurationArray and ServiceVolumeConfigurationArrayOutput values.
// You can construct a concrete instance of `ServiceVolumeConfigurationArrayInput` via:
//
//	ServiceVolumeConfigurationArray{ ServiceVolumeConfigurationArgs{...} }
type ServiceVolumeConfigurationArrayInput interface {
	pulumi.Input

	ToServiceVolumeConfigurationArrayOutput() ServiceVolumeConfigurationArrayOutput
	ToServiceVolumeConfigurationArrayOutputWithContext(context.Context) ServiceVolumeConfigurationArrayOutput
}

type ServiceVolumeConfigurationArray []ServiceVolumeConfigurationInput

func (ServiceVolumeConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVolumeConfiguration)(nil)).Elem()
}

func (i ServiceVolumeConfigurationArray) ToServiceVolumeConfigurationArrayOutput() ServiceVolumeConfigurationArrayOutput {
	return i.ToServiceVolumeConfigurationArrayOutputWithContext(context.Background())
}

func (i ServiceVolumeConfigurationArray) ToServiceVolumeConfigurationArrayOutputWithContext(ctx context.Context) ServiceVolumeConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVolumeConfigurationArrayOutput)
}

// The configuration for a volume specified in the task definition as a volume that is configured at launch time. Currently, the only supported volume type is an Amazon EBS volume.
type ServiceVolumeConfigurationOutput struct{ *pulumi.OutputState }

func (ServiceVolumeConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVolumeConfiguration)(nil)).Elem()
}

func (o ServiceVolumeConfigurationOutput) ToServiceVolumeConfigurationOutput() ServiceVolumeConfigurationOutput {
	return o
}

func (o ServiceVolumeConfigurationOutput) ToServiceVolumeConfigurationOutputWithContext(ctx context.Context) ServiceVolumeConfigurationOutput {
	return o
}

// The configuration for the Amazon EBS volume that Amazon ECS creates and manages on your behalf. These settings are used to create each Amazon EBS volume, with one volume created for each task in the service. The Amazon EBS volumes are visible in your account in the Amazon EC2 console once they are created.
func (o ServiceVolumeConfigurationOutput) ManagedEbsVolume() ServiceManagedEbsVolumeConfigurationPtrOutput {
	return o.ApplyT(func(v ServiceVolumeConfiguration) *ServiceManagedEbsVolumeConfiguration { return v.ManagedEbsVolume }).(ServiceManagedEbsVolumeConfigurationPtrOutput)
}

// The name of the volume. This value must match the volume name from the “Volume“ object in the task definition.
func (o ServiceVolumeConfigurationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVolumeConfiguration) string { return v.Name }).(pulumi.StringOutput)
}

type ServiceVolumeConfigurationArrayOutput struct{ *pulumi.OutputState }

func (ServiceVolumeConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVolumeConfiguration)(nil)).Elem()
}

func (o ServiceVolumeConfigurationArrayOutput) ToServiceVolumeConfigurationArrayOutput() ServiceVolumeConfigurationArrayOutput {
	return o
}

func (o ServiceVolumeConfigurationArrayOutput) ToServiceVolumeConfigurationArrayOutputWithContext(ctx context.Context) ServiceVolumeConfigurationArrayOutput {
	return o
}

func (o ServiceVolumeConfigurationArrayOutput) Index(i pulumi.IntInput) ServiceVolumeConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceVolumeConfiguration {
		return vs[0].([]ServiceVolumeConfiguration)[vs[1].(int)]
	}).(ServiceVolumeConfigurationOutput)
}

// The VPC Lattice configuration for your service that holds the information for the target group(s) Amazon ECS tasks will be registered to.
type ServiceVpcLatticeConfiguration struct {
	// The name of the port mapping to register in the VPC Lattice target group. This is the name of the ``portMapping`` you defined in your task definition.
	PortName string `pulumi:"portName"`
	// The ARN of the IAM role to associate with this VPC Lattice configuration. This is the Amazon ECS
	//  infrastructure IAM role that is used to manage your VPC Lattice infrastructure.
	RoleArn string `pulumi:"roleArn"`
	// The full Amazon Resource Name (ARN) of the target group or groups associated with the VPC Lattice configuration that the Amazon ECS tasks will be registered to.
	TargetGroupArn string `pulumi:"targetGroupArn"`
}

// ServiceVpcLatticeConfigurationInput is an input type that accepts ServiceVpcLatticeConfigurationArgs and ServiceVpcLatticeConfigurationOutput values.
// You can construct a concrete instance of `ServiceVpcLatticeConfigurationInput` via:
//
//	ServiceVpcLatticeConfigurationArgs{...}
type ServiceVpcLatticeConfigurationInput interface {
	pulumi.Input

	ToServiceVpcLatticeConfigurationOutput() ServiceVpcLatticeConfigurationOutput
	ToServiceVpcLatticeConfigurationOutputWithContext(context.Context) ServiceVpcLatticeConfigurationOutput
}

// The VPC Lattice configuration for your service that holds the information for the target group(s) Amazon ECS tasks will be registered to.
type ServiceVpcLatticeConfigurationArgs struct {
	// The name of the port mapping to register in the VPC Lattice target group. This is the name of the ``portMapping`` you defined in your task definition.
	PortName pulumi.StringInput `pulumi:"portName"`
	// The ARN of the IAM role to associate with this VPC Lattice configuration. This is the Amazon ECS
	//  infrastructure IAM role that is used to manage your VPC Lattice infrastructure.
	RoleArn pulumi.StringInput `pulumi:"roleArn"`
	// The full Amazon Resource Name (ARN) of the target group or groups associated with the VPC Lattice configuration that the Amazon ECS tasks will be registered to.
	TargetGroupArn pulumi.StringInput `pulumi:"targetGroupArn"`
}

func (ServiceVpcLatticeConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVpcLatticeConfiguration)(nil)).Elem()
}

func (i ServiceVpcLatticeConfigurationArgs) ToServiceVpcLatticeConfigurationOutput() ServiceVpcLatticeConfigurationOutput {
	return i.ToServiceVpcLatticeConfigurationOutputWithContext(context.Background())
}

func (i ServiceVpcLatticeConfigurationArgs) ToServiceVpcLatticeConfigurationOutputWithContext(ctx context.Context) ServiceVpcLatticeConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVpcLatticeConfigurationOutput)
}

// ServiceVpcLatticeConfigurationArrayInput is an input type that accepts ServiceVpcLatticeConfigurationArray and ServiceVpcLatticeConfigurationArrayOutput values.
// You can construct a concrete instance of `ServiceVpcLatticeConfigurationArrayInput` via:
//
//	ServiceVpcLatticeConfigurationArray{ ServiceVpcLatticeConfigurationArgs{...} }
type ServiceVpcLatticeConfigurationArrayInput interface {
	pulumi.Input

	ToServiceVpcLatticeConfigurationArrayOutput() ServiceVpcLatticeConfigurationArrayOutput
	ToServiceVpcLatticeConfigurationArrayOutputWithContext(context.Context) ServiceVpcLatticeConfigurationArrayOutput
}

type ServiceVpcLatticeConfigurationArray []ServiceVpcLatticeConfigurationInput

func (ServiceVpcLatticeConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVpcLatticeConfiguration)(nil)).Elem()
}

func (i ServiceVpcLatticeConfigurationArray) ToServiceVpcLatticeConfigurationArrayOutput() ServiceVpcLatticeConfigurationArrayOutput {
	return i.ToServiceVpcLatticeConfigurationArrayOutputWithContext(context.Background())
}

func (i ServiceVpcLatticeConfigurationArray) ToServiceVpcLatticeConfigurationArrayOutputWithContext(ctx context.Context) ServiceVpcLatticeConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVpcLatticeConfigurationArrayOutput)
}

// The VPC Lattice configuration for your service that holds the information for the target group(s) Amazon ECS tasks will be registered to.
type ServiceVpcLatticeConfigurationOutput struct{ *pulumi.OutputState }

func (ServiceVpcLatticeConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVpcLatticeConfiguration)(nil)).Elem()
}

func (o ServiceVpcLatticeConfigurationOutput) ToServiceVpcLatticeConfigurationOutput() ServiceVpcLatticeConfigurationOutput {
	return o
}

func (o ServiceVpcLatticeConfigurationOutput) ToServiceVpcLatticeConfigurationOutputWithContext(ctx context.Context) ServiceVpcLatticeConfigurationOutput {
	return o
}

// The name of the port mapping to register in the VPC Lattice target group. This is the name of the “portMapping“ you defined in your task definition.
func (o ServiceVpcLatticeConfigurationOutput) PortName() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVpcLatticeConfiguration) string { return v.PortName }).(pulumi.StringOutput)
}

// The ARN of the IAM role to associate with this VPC Lattice configuration. This is the Amazon ECS
//
//	infrastructure IAM role that is used to manage your VPC Lattice infrastructure.
func (o ServiceVpcLatticeConfigurationOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVpcLatticeConfiguration) string { return v.RoleArn }).(pulumi.StringOutput)
}

// The full Amazon Resource Name (ARN) of the target group or groups associated with the VPC Lattice configuration that the Amazon ECS tasks will be registered to.
func (o ServiceVpcLatticeConfigurationOutput) TargetGroupArn() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVpcLatticeConfiguration) string { return v.TargetGroupArn }).(pulumi.StringOutput)
}

type ServiceVpcLatticeConfigurationArrayOutput struct{ *pulumi.OutputState }

func (ServiceVpcLatticeConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVpcLatticeConfiguration)(nil)).Elem()
}

func (o ServiceVpcLatticeConfigurationArrayOutput) ToServiceVpcLatticeConfigurationArrayOutput() ServiceVpcLatticeConfigurationArrayOutput {
	return o
}

func (o ServiceVpcLatticeConfigurationArrayOutput) ToServiceVpcLatticeConfigurationArrayOutputWithContext(ctx context.Context) ServiceVpcLatticeConfigurationArrayOutput {
	return o
}

func (o ServiceVpcLatticeConfigurationArrayOutput) Index(i pulumi.IntInput) ServiceVpcLatticeConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceVpcLatticeConfiguration {
		return vs[0].([]ServiceVpcLatticeConfiguration)[vs[1].(int)]
	}).(ServiceVpcLatticeConfigurationOutput)
}

// The authorization configuration details for the Amazon EFS file system.
type TaskDefinitionAuthorizationConfig struct {
	// The Amazon EFS access point ID to use. If an access point is specified, the root directory value specified in the ``EFSVolumeConfiguration`` must either be omitted or set to ``/`` which will enforce the path set on the EFS access point. If an access point is used, transit encryption must be on in the ``EFSVolumeConfiguration``. For more information, see [Working with Amazon EFS access points](https://docs.aws.amazon.com/efs/latest/ug/efs-access-points.html) in the *Amazon Elastic File System User Guide*.
	AccessPointId *string `pulumi:"accessPointId"`
	// Determines whether to use the Amazon ECS task role defined in a task definition when mounting the Amazon EFS file system. If it is turned on, transit encryption must be turned on in the ``EFSVolumeConfiguration``. If this parameter is omitted, the default value of ``DISABLED`` is used. For more information, see [Using Amazon EFS access points](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/efs-volumes.html#efs-volume-accesspoints) in the *Amazon Elastic Container Service Developer Guide*.
	Iam *TaskDefinitionAuthorizationConfigIam `pulumi:"iam"`
}

// TaskDefinitionAuthorizationConfigInput is an input type that accepts TaskDefinitionAuthorizationConfigArgs and TaskDefinitionAuthorizationConfigOutput values.
// You can construct a concrete instance of `TaskDefinitionAuthorizationConfigInput` via:
//
//	TaskDefinitionAuthorizationConfigArgs{...}
type TaskDefinitionAuthorizationConfigInput interface {
	pulumi.Input

	ToTaskDefinitionAuthorizationConfigOutput() TaskDefinitionAuthorizationConfigOutput
	ToTaskDefinitionAuthorizationConfigOutputWithContext(context.Context) TaskDefinitionAuthorizationConfigOutput
}

// The authorization configuration details for the Amazon EFS file system.
type TaskDefinitionAuthorizationConfigArgs struct {
	// The Amazon EFS access point ID to use. If an access point is specified, the root directory value specified in the ``EFSVolumeConfiguration`` must either be omitted or set to ``/`` which will enforce the path set on the EFS access point. If an access point is used, transit encryption must be on in the ``EFSVolumeConfiguration``. For more information, see [Working with Amazon EFS access points](https://docs.aws.amazon.com/efs/latest/ug/efs-access-points.html) in the *Amazon Elastic File System User Guide*.
	AccessPointId pulumi.StringPtrInput `pulumi:"accessPointId"`
	// Determines whether to use the Amazon ECS task role defined in a task definition when mounting the Amazon EFS file system. If it is turned on, transit encryption must be turned on in the ``EFSVolumeConfiguration``. If this parameter is omitted, the default value of ``DISABLED`` is used. For more information, see [Using Amazon EFS access points](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/efs-volumes.html#efs-volume-accesspoints) in the *Amazon Elastic Container Service Developer Guide*.
	Iam TaskDefinitionAuthorizationConfigIamPtrInput `pulumi:"iam"`
}

func (TaskDefinitionAuthorizationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionAuthorizationConfig)(nil)).Elem()
}

func (i TaskDefinitionAuthorizationConfigArgs) ToTaskDefinitionAuthorizationConfigOutput() TaskDefinitionAuthorizationConfigOutput {
	return i.ToTaskDefinitionAuthorizationConfigOutputWithContext(context.Background())
}

func (i TaskDefinitionAuthorizationConfigArgs) ToTaskDefinitionAuthorizationConfigOutputWithContext(ctx context.Context) TaskDefinitionAuthorizationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionAuthorizationConfigOutput)
}

func (i TaskDefinitionAuthorizationConfigArgs) ToTaskDefinitionAuthorizationConfigPtrOutput() TaskDefinitionAuthorizationConfigPtrOutput {
	return i.ToTaskDefinitionAuthorizationConfigPtrOutputWithContext(context.Background())
}

func (i TaskDefinitionAuthorizationConfigArgs) ToTaskDefinitionAuthorizationConfigPtrOutputWithContext(ctx context.Context) TaskDefinitionAuthorizationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionAuthorizationConfigOutput).ToTaskDefinitionAuthorizationConfigPtrOutputWithContext(ctx)
}

// TaskDefinitionAuthorizationConfigPtrInput is an input type that accepts TaskDefinitionAuthorizationConfigArgs, TaskDefinitionAuthorizationConfigPtr and TaskDefinitionAuthorizationConfigPtrOutput values.
// You can construct a concrete instance of `TaskDefinitionAuthorizationConfigPtrInput` via:
//
//	        TaskDefinitionAuthorizationConfigArgs{...}
//
//	or:
//
//	        nil
type TaskDefinitionAuthorizationConfigPtrInput interface {
	pulumi.Input

	ToTaskDefinitionAuthorizationConfigPtrOutput() TaskDefinitionAuthorizationConfigPtrOutput
	ToTaskDefinitionAuthorizationConfigPtrOutputWithContext(context.Context) TaskDefinitionAuthorizationConfigPtrOutput
}

type taskDefinitionAuthorizationConfigPtrType TaskDefinitionAuthorizationConfigArgs

func TaskDefinitionAuthorizationConfigPtr(v *TaskDefinitionAuthorizationConfigArgs) TaskDefinitionAuthorizationConfigPtrInput {
	return (*taskDefinitionAuthorizationConfigPtrType)(v)
}

func (*taskDefinitionAuthorizationConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionAuthorizationConfig)(nil)).Elem()
}

func (i *taskDefinitionAuthorizationConfigPtrType) ToTaskDefinitionAuthorizationConfigPtrOutput() TaskDefinitionAuthorizationConfigPtrOutput {
	return i.ToTaskDefinitionAuthorizationConfigPtrOutputWithContext(context.Background())
}

func (i *taskDefinitionAuthorizationConfigPtrType) ToTaskDefinitionAuthorizationConfigPtrOutputWithContext(ctx context.Context) TaskDefinitionAuthorizationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionAuthorizationConfigPtrOutput)
}

// The authorization configuration details for the Amazon EFS file system.
type TaskDefinitionAuthorizationConfigOutput struct{ *pulumi.OutputState }

func (TaskDefinitionAuthorizationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionAuthorizationConfig)(nil)).Elem()
}

func (o TaskDefinitionAuthorizationConfigOutput) ToTaskDefinitionAuthorizationConfigOutput() TaskDefinitionAuthorizationConfigOutput {
	return o
}

func (o TaskDefinitionAuthorizationConfigOutput) ToTaskDefinitionAuthorizationConfigOutputWithContext(ctx context.Context) TaskDefinitionAuthorizationConfigOutput {
	return o
}

func (o TaskDefinitionAuthorizationConfigOutput) ToTaskDefinitionAuthorizationConfigPtrOutput() TaskDefinitionAuthorizationConfigPtrOutput {
	return o.ToTaskDefinitionAuthorizationConfigPtrOutputWithContext(context.Background())
}

func (o TaskDefinitionAuthorizationConfigOutput) ToTaskDefinitionAuthorizationConfigPtrOutputWithContext(ctx context.Context) TaskDefinitionAuthorizationConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskDefinitionAuthorizationConfig) *TaskDefinitionAuthorizationConfig {
		return &v
	}).(TaskDefinitionAuthorizationConfigPtrOutput)
}

// The Amazon EFS access point ID to use. If an access point is specified, the root directory value specified in the “EFSVolumeConfiguration“ must either be omitted or set to “/“ which will enforce the path set on the EFS access point. If an access point is used, transit encryption must be on in the “EFSVolumeConfiguration“. For more information, see [Working with Amazon EFS access points](https://docs.aws.amazon.com/efs/latest/ug/efs-access-points.html) in the *Amazon Elastic File System User Guide*.
func (o TaskDefinitionAuthorizationConfigOutput) AccessPointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionAuthorizationConfig) *string { return v.AccessPointId }).(pulumi.StringPtrOutput)
}

// Determines whether to use the Amazon ECS task role defined in a task definition when mounting the Amazon EFS file system. If it is turned on, transit encryption must be turned on in the “EFSVolumeConfiguration“. If this parameter is omitted, the default value of “DISABLED“ is used. For more information, see [Using Amazon EFS access points](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/efs-volumes.html#efs-volume-accesspoints) in the *Amazon Elastic Container Service Developer Guide*.
func (o TaskDefinitionAuthorizationConfigOutput) Iam() TaskDefinitionAuthorizationConfigIamPtrOutput {
	return o.ApplyT(func(v TaskDefinitionAuthorizationConfig) *TaskDefinitionAuthorizationConfigIam { return v.Iam }).(TaskDefinitionAuthorizationConfigIamPtrOutput)
}

type TaskDefinitionAuthorizationConfigPtrOutput struct{ *pulumi.OutputState }

func (TaskDefinitionAuthorizationConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionAuthorizationConfig)(nil)).Elem()
}

func (o TaskDefinitionAuthorizationConfigPtrOutput) ToTaskDefinitionAuthorizationConfigPtrOutput() TaskDefinitionAuthorizationConfigPtrOutput {
	return o
}

func (o TaskDefinitionAuthorizationConfigPtrOutput) ToTaskDefinitionAuthorizationConfigPtrOutputWithContext(ctx context.Context) TaskDefinitionAuthorizationConfigPtrOutput {
	return o
}

func (o TaskDefinitionAuthorizationConfigPtrOutput) Elem() TaskDefinitionAuthorizationConfigOutput {
	return o.ApplyT(func(v *TaskDefinitionAuthorizationConfig) TaskDefinitionAuthorizationConfig {
		if v != nil {
			return *v
		}
		var ret TaskDefinitionAuthorizationConfig
		return ret
	}).(TaskDefinitionAuthorizationConfigOutput)
}

// The Amazon EFS access point ID to use. If an access point is specified, the root directory value specified in the “EFSVolumeConfiguration“ must either be omitted or set to “/“ which will enforce the path set on the EFS access point. If an access point is used, transit encryption must be on in the “EFSVolumeConfiguration“. For more information, see [Working with Amazon EFS access points](https://docs.aws.amazon.com/efs/latest/ug/efs-access-points.html) in the *Amazon Elastic File System User Guide*.
func (o TaskDefinitionAuthorizationConfigPtrOutput) AccessPointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionAuthorizationConfig) *string {
		if v == nil {
			return nil
		}
		return v.AccessPointId
	}).(pulumi.StringPtrOutput)
}

// Determines whether to use the Amazon ECS task role defined in a task definition when mounting the Amazon EFS file system. If it is turned on, transit encryption must be turned on in the “EFSVolumeConfiguration“. If this parameter is omitted, the default value of “DISABLED“ is used. For more information, see [Using Amazon EFS access points](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/efs-volumes.html#efs-volume-accesspoints) in the *Amazon Elastic Container Service Developer Guide*.
func (o TaskDefinitionAuthorizationConfigPtrOutput) Iam() TaskDefinitionAuthorizationConfigIamPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionAuthorizationConfig) *TaskDefinitionAuthorizationConfigIam {
		if v == nil {
			return nil
		}
		return v.Iam
	}).(TaskDefinitionAuthorizationConfigIamPtrOutput)
}

// The “ContainerDefinition“ property specifies a container definition. Container definitions are used in task definitions to describe the different containers that are launched as part of a task.
type TaskDefinitionContainerDefinition struct {
	// The command that's passed to the container. This parameter maps to ``Cmd`` in the docker container create command and the ``COMMAND`` parameter to docker run. If there are multiple arguments, each argument is a separated string in the array.
	Command []string `pulumi:"command"`
	// The number of ``cpu`` units reserved for the container. This parameter maps to ``CpuShares`` in the docker container create commandand the ``--cpu-shares`` option to docker run.
	//  This field is optional for tasks using the Fargate launch type, and the only requirement is that the total amount of CPU reserved for all containers within a task be lower than the task-level ``cpu`` value.
	//   You can determine the number of CPU units that are available per EC2 instance type by multiplying the vCPUs listed for that instance type on the [Amazon EC2 Instances](https://docs.aws.amazon.com/ec2/instance-types/) detail page by 1,024.
	//   Linux containers share unallocated CPU units with other containers on the container instance with the same ratio as their allocated amount. For example, if you run a single-container task on a single-core instance type with 512 CPU units specified for that container, and that's the only task running on the container instance, that container could use the full 1,024 CPU unit share at any given time. However, if you launched another copy of the same task on that container instance, each task is guaranteed a minimum of 512 CPU units when needed. Moreover, each container could float to higher CPU usage if the other container was not using it. If both tasks were 100% active all of the time, they would be limited to 512 CPU units.
	//  On Linux container instances, the Docker daemon on the container instance uses the CPU value to calculate the relative CPU share ratios for running containers. The minimum valid CPU share value that the Linux kernel allows is 2, and the maximum valid CPU share value that the Linux kernel allows is 262144. However, the CPU parameter isn't required, and you can use CPU values below 2 or above 262144 in your container definitions. For CPU values below 2 (including null) or above 262144, the behavior varies based on your Amazon ECS container agent version:
	//   +  *Agent versions less than or equal to 1.1.0:* Null and zero CPU values are passed to Docker as 0, which Docker then converts to 1,024 CPU shares. CPU values of 1 are passed to Docker as 1, which the Linux kernel converts to two CPU shares.
	//   +  *Agent versions greater than or equal to 1.2.0:* Null, zero, and CPU values of 1 are passed to Docker as 2.
	//   +  *Agent versions greater than or equal to 1.84.0:* CPU values greater than 256 vCPU are passed to Docker as 256, which is equivalent to 262144 CPU shares.
	//
	//  On Windows container instances, the CPU limit is enforced as an absolute limit, or a quota. Windows containers only have access to the specified amount of CPU that's described in the task definition. A null or zero CPU value is passed to Docker as ``0``, which Windows interprets as 1% of one CPU.
	Cpu *int `pulumi:"cpu"`
	// A list of ARNs in SSM or Amazon S3 to a credential spec (``CredSpec``) file that configures the container for Active Directory authentication. We recommend that you use this parameter instead of the ``dockerSecurityOptions``. The maximum number of ARNs is 1.
	//  There are two formats for each ARN.
	//   + credentialspecdomainless:MyARN You use credentialspecdomainless:MyARN to provide a CredSpec with an additional section for a secret in . You provide the login credentials to the domain in the secret. Each task that runs on any container instance can join different domains. You can use this format without joining the container instance to a domain. + credentialspec:MyARN You use credentialspec:MyARN to provide a CredSpec for a single domain. You must join the container instance to the domain before you start any tasks that use this task definition.
	//      In both formats, replace ``MyARN`` with the ARN in SSM or Amazon S3.
	//      If you provide a ``credentialspecdomainless:MyARN``, the ``credspec`` must provide a ARN in ASMlong for a secret containing the username, password, and the domain to connect to. For better security, the instance isn't joined to the domain for domainless authentication. Other applications on the instance can't use the domainless credentials. You can use this parameter to run tasks on the same instance, even it the tasks need to join different domains. For more information, see [Using gMSAs for Windows Containers](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/windows-gmsa.html) and [Using gMSAs for Linux Containers](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/linux-gmsa.html).
	CredentialSpecs []string `pulumi:"credentialSpecs"`
	// The dependencies defined for container startup and shutdown. A container can contain multiple dependencies. When a dependency is defined for container startup, for container shutdown it is reversed.
	//  For tasks using the EC2 launch type, the container instances require at least version 1.26.0 of the container agent to turn on container dependencies. However, we recommend using the latest container agent version. For information about checking your agent version and updating to the latest version, see [Updating the Amazon ECS Container Agent](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html) in the *Amazon Elastic Container Service Developer Guide*. If you're using an Amazon ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the ``ecs-init`` package. If your container instances are launched from version ``20190301`` or later, then they contain the required versions of the container agent and ``ecs-init``. For more information, see [Amazon ECS-optimized Linux AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html) in the *Amazon Elastic Container Service Developer Guide*.
	//  For tasks using the Fargate launch type, the task or service requires the following platforms:
	//   +  Linux platform version ``1.3.0`` or later.
	//   +  Windows platform version ``1.0.0`` or later.
	//
	//  If the task definition is used in a blue/green deployment that uses [AWS::CodeDeploy::DeploymentGroup BlueGreenDeploymentConfiguration](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-codedeploy-deploymentgroup-bluegreendeploymentconfiguration.html), the ``dependsOn`` parameter is not supported.
	DependsOn []TaskDefinitionContainerDependency `pulumi:"dependsOn"`
	// When this parameter is true, networking is off within the container. This parameter maps to ``NetworkDisabled`` in the docker container create command.
	//   This parameter is not supported for Windows containers.
	DisableNetworking *bool `pulumi:"disableNetworking"`
	// A list of DNS search domains that are presented to the container. This parameter maps to ``DnsSearch`` in the docker container create command and the ``--dns-search`` option to docker run.
	//   This parameter is not supported for Windows containers.
	DnsSearchDomains []string `pulumi:"dnsSearchDomains"`
	// A list of DNS servers that are presented to the container. This parameter maps to ``Dns`` in the docker container create command and the ``--dns`` option to docker run.
	//   This parameter is not supported for Windows containers.
	DnsServers []string `pulumi:"dnsServers"`
	// A key/value map of labels to add to the container. This parameter maps to ``Labels`` in the docker container create command and the ``--label`` option to docker run. This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: ``sudo docker version --format '{{.Server.APIVersion}}'``
	DockerLabels map[string]string `pulumi:"dockerLabels"`
	// A list of strings to provide custom configuration for multiple security systems. This field isn't valid for containers in tasks using the Fargate launch type.
	//  For Linux tasks on EC2, this parameter can be used to reference custom labels for SELinux and AppArmor multi-level security systems.
	//  For any tasks on EC2, this parameter can be used to reference a credential spec file that configures a container for Active Directory authentication. For more information, see [Using gMSAs for Windows Containers](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/windows-gmsa.html) and [Using gMSAs for Linux Containers](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/linux-gmsa.html) in the *Amazon Elastic Container Service Developer Guide*.
	//  This parameter maps to ``SecurityOpt`` in the docker container create command and the ``--security-opt`` option to docker run.
	//   The Amazon ECS container agent running on a container instance must register with the ``ECS_SELINUX_CAPABLE=true`` or ``ECS_APPARMOR_CAPABLE=true`` environment variables before containers placed on that instance can use these security options. For more information, see [Amazon ECS Container Agent Configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the *Amazon Elastic Container Service Developer Guide*.
	//   Valid values: "no-new-privileges" | "apparmor:PROFILE" | "label:value" | "credentialspec:CredentialSpecFilePath"
	DockerSecurityOptions []string `pulumi:"dockerSecurityOptions"`
	// Early versions of the Amazon ECS container agent don't properly handle ``entryPoint`` parameters. If you have problems using ``entryPoint``, update your container agent or enter your commands and arguments as ``command`` array items instead.
	//   The entry point that's passed to the container. This parameter maps to ``Entrypoint`` in the docker container create command and the ``--entrypoint`` option to docker run.
	EntryPoint []string `pulumi:"entryPoint"`
	// The environment variables to pass to a container. This parameter maps to ``Env`` in the docker container create command and the ``--env`` option to docker run.
	//   We don't recommend that you use plaintext environment variables for sensitive information, such as credential data.
	Environment []TaskDefinitionKeyValuePair `pulumi:"environment"`
	// A list of files containing the environment variables to pass to a container. This parameter maps to the ``--env-file`` option to docker run.
	//  You can specify up to ten environment files. The file must have a ``.env`` file extension. Each line in an environment file contains an environment variable in ``VARIABLE=VALUE`` format. Lines beginning with ``#`` are treated as comments and are ignored.
	//  If there are environment variables specified using the ``environment`` parameter in a container definition, they take precedence over the variables contained within an environment file. If multiple environment files are specified that contain the same variable, they're processed from the top down. We recommend that you use unique variable names. For more information, see [Specifying Environment Variables](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/taskdef-envfiles.html) in the *Amazon Elastic Container Service Developer Guide*.
	EnvironmentFiles []TaskDefinitionEnvironmentFile `pulumi:"environmentFiles"`
	// If the ``essential`` parameter of a container is marked as ``true``, and that container fails or stops for any reason, all other containers that are part of the task are stopped. If the ``essential`` parameter of a container is marked as ``false``, its failure doesn't affect the rest of the containers in a task. If this parameter is omitted, a container is assumed to be essential.
	//  All tasks must have at least one essential container. If you have an application that's composed of multiple containers, group containers that are used for a common purpose into components, and separate the different components into multiple task definitions. For more information, see [Application Architecture](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/application_architecture.html) in the *Amazon Elastic Container Service Developer Guide*.
	Essential *bool `pulumi:"essential"`
	// A list of hostnames and IP address mappings to append to the ``/etc/hosts`` file on the container. This parameter maps to ``ExtraHosts`` in the docker container create command and the ``--add-host`` option to docker run.
	//   This parameter isn't supported for Windows containers or tasks that use the ``awsvpc`` network mode.
	ExtraHosts []TaskDefinitionHostEntry `pulumi:"extraHosts"`
	// The FireLens configuration for the container. This is used to specify and configure a log router for container logs. For more information, see [Custom Log Routing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html) in the *Amazon Elastic Container Service Developer Guide*.
	FirelensConfiguration *TaskDefinitionFirelensConfiguration `pulumi:"firelensConfiguration"`
	// The container health check command and associated configuration parameters for the container. This parameter maps to ``HealthCheck`` in the docker container create command and the ``HEALTHCHECK`` parameter of docker run.
	HealthCheck *TaskDefinitionHealthCheck `pulumi:"healthCheck"`
	// The hostname to use for your container. This parameter maps to ``Hostname`` in the docker container create command and the ``--hostname`` option to docker run.
	//   The ``hostname`` parameter is not supported if you're using the ``awsvpc`` network mode.
	Hostname *string `pulumi:"hostname"`
	// The image used to start a container. This string is passed directly to the Docker daemon. By default, images in the Docker Hub registry are available. Other repositories are specified with either ``repository-url/image:tag`` or ``repository-url/image@digest``. For images using tags (repository-url/image:tag), up to 255 characters total are allowed, including letters (uppercase and lowercase), numbers, hyphens, underscores, colons, periods, forward slashes, and number signs (#). For images using digests (repository-url/image@digest), the 255 character limit applies only to the repository URL and image name (everything before the @ sign). The only supported hash function is sha256, and the hash value after sha256: must be exactly 64 characters (only letters A-F, a-f, and numbers 0-9 are allowed). This parameter maps to ``Image`` in the docker container create command and the ``IMAGE`` parameter of docker run.
	//   +  When a new task starts, the Amazon ECS container agent pulls the latest version of the specified image and tag for the container to use. However, subsequent updates to a repository image aren't propagated to already running tasks.
	//   +  Images in Amazon ECR repositories can be specified by either using the full ``registry/repository:tag`` or ``registry/repository@digest``. For example, ``012345678910.dkr.ecr.<region-name>.amazonaws.com/<repository-name>:latest`` or ``012345678910.dkr.ecr.<region-name>.amazonaws.com/<repository-name>@sha256:94afd1f2e64d908bc90dbca0035a5b567EXAMPLE``.
	//   +  Images in official repositories on Docker Hub use a single name (for example, ``ubuntu`` or ``mongo``).
	//   +  Images in other repositories on Docker Hub are qualified with an organization name (for example, ``amazon/amazon-ecs-agent``).
	//   +  Images in other online repositories are qualified further by a domain name (for example, ``quay.io/assemblyline/ubuntu``).
	Image string `pulumi:"image"`
	// When this parameter is ``true``, you can deploy containerized applications that require ``stdin`` or a ``tty`` to be allocated. This parameter maps to ``OpenStdin`` in the docker container create command and the ``--interactive`` option to docker run.
	Interactive *bool `pulumi:"interactive"`
	// The ``links`` parameter allows containers to communicate with each other without the need for port mappings. This parameter is only supported if the network mode of a task definition is ``bridge``. The ``name:internalName`` construct is analogous to ``name:alias`` in Docker links. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed.. This parameter maps to ``Links`` in the docker container create command and the ``--link`` option to docker run.
	//   This parameter is not supported for Windows containers.
	//    Containers that are collocated on a single container instance may be able to communicate with each other without requiring links or host port mappings. Network isolation is achieved on the container instance using security groups and VPC settings.
	Links []string `pulumi:"links"`
	// Linux-specific modifications that are applied to the container, such as Linux kernel capabilities. For more information see [KernelCapabilities](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_KernelCapabilities.html).
	//   This parameter is not supported for Windows containers.
	LinuxParameters *TaskDefinitionLinuxParameters `pulumi:"linuxParameters"`
	// The log configuration specification for the container.
	//  This parameter maps to ``LogConfig`` in the docker Create a container command and the ``--log-driver`` option to docker run. By default, containers use the same logging driver that the Docker daemon uses. However, the container may use a different logging driver than the Docker daemon by specifying a log driver with this parameter in the container definition. To use a different logging driver for a container, the log system must be configured properly on the container instance (or on a different log server for remote logging options). For more information on the options for different supported log drivers, see [Configure logging drivers](https://docs.aws.amazon.com/https://docs.docker.com/engine/admin/logging/overview/) in the Docker documentation.
	//   Amazon ECS currently supports a subset of the logging drivers available to the Docker daemon (shown in the [LogConfiguration](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_LogConfiguration.html) data type). Additional log drivers may be available in future releases of the Amazon ECS container agent.
	//   This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: ``sudo docker version --format '{{.Server.APIVersion}}'``
	//   The Amazon ECS container agent running on a container instance must register the logging drivers available on that instance with the ``ECS_AVAILABLE_LOGGING_DRIVERS`` environment variable before containers placed on that instance can use these log configuration options. For more information, see [Container Agent Configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the *Developer Guide*.
	LogConfiguration *TaskDefinitionLogConfiguration `pulumi:"logConfiguration"`
	// The amount (in MiB) of memory to present to the container. If your container attempts to exceed the memory specified here, the container is killed. The total amount of memory reserved for all containers within a task must be lower than the task ``memory`` value, if one is specified. This parameter maps to ``Memory`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--memory`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	//  If using the Fargate launch type, this parameter is optional.
	//  If using the EC2 launch type, you must specify either a task-level memory value or a container-level memory value. If you specify both a container-level ``memory`` and ``memoryReservation`` value, ``memory`` must be greater than ``memoryReservation``. If you specify ``memoryReservation``, then that value is subtracted from the available memory resources for the container instance where the container is placed. Otherwise, the value of ``memory`` is used.
	//  The Docker 20.10.0 or later daemon reserves a minimum of 6 MiB of memory for a container, so you should not specify fewer than 6 MiB of memory for your containers.
	//  The Docker 19.03.13-ce or earlier daemon reserves a minimum of 4 MiB of memory for a container, so you should not specify fewer than 4 MiB of memory for your containers.
	Memory *int `pulumi:"memory"`
	// The soft limit (in MiB) of memory to reserve for the container. When system memory is under heavy contention, Docker attempts to keep the container memory to this soft limit. However, your container can consume more memory when it needs to, up to either the hard limit specified with the ``memory`` parameter (if applicable), or all of the available memory on the container instance, whichever comes first. This parameter maps to ``MemoryReservation`` in the docker container create command and the ``--memory-reservation`` option to docker run.
	//  If a task-level memory value is not specified, you must specify a non-zero integer for one or both of ``memory`` or ``memoryReservation`` in a container definition. If you specify both, ``memory`` must be greater than ``memoryReservation``. If you specify ``memoryReservation``, then that value is subtracted from the available memory resources for the container instance where the container is placed. Otherwise, the value of ``memory`` is used.
	//  For example, if your container normally uses 128 MiB of memory, but occasionally bursts to 256 MiB of memory for short periods of time, you can set a ``memoryReservation`` of 128 MiB, and a ``memory`` hard limit of 300 MiB. This configuration would allow the container to only reserve 128 MiB of memory from the remaining resources on the container instance, but also allow the container to consume more memory resources when needed.
	//  The Docker 20.10.0 or later daemon reserves a minimum of 6 MiB of memory for a container. So, don't specify less than 6 MiB of memory for your containers.
	//  The Docker 19.03.13-ce or earlier daemon reserves a minimum of 4 MiB of memory for a container. So, don't specify less than 4 MiB of memory for your containers.
	MemoryReservation *int `pulumi:"memoryReservation"`
	// The mount points for data volumes in your container.
	//  This parameter maps to ``Volumes`` in the docker container create command and the ``--volume`` option to docker run.
	//  Windows containers can mount whole directories on the same drive as ``$env:ProgramData``. Windows containers can't mount directories on a different drive, and mount point can't be across drives.
	MountPoints []TaskDefinitionMountPoint `pulumi:"mountPoints"`
	// The name of a container. If you're linking multiple containers together in a task definition, the ``name`` of one container can be entered in the ``links`` of another container to connect the containers. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed. This parameter maps to ``name`` in the docker container create command and the ``--name`` option to docker run.
	Name string `pulumi:"name"`
	// The list of port mappings for the container. Port mappings allow containers to access ports on the host container instance to send or receive traffic.
	//  For task definitions that use the ``awsvpc`` network mode, you should only specify the ``containerPort``. The ``hostPort`` can be left blank or it must be the same value as the ``containerPort``.
	//  Port mappings on Windows use the ``NetNAT`` gateway address rather than ``localhost``. There is no loopback for port mappings on Windows, so you cannot access a container's mapped port from the host itself.
	//  This parameter maps to ``PortBindings`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--publish`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/). If the network mode of a task definition is set to ``none``, then you can't specify port mappings. If the network mode of a task definition is set to ``host``, then host ports must either be undefined or they must match the container port in the port mapping.
	//   After a task reaches the ``RUNNING`` status, manual and automatic host and container port assignments are visible in the *Network Bindings* section of a container description for a selected task in the Amazon ECS console. The assignments are also visible in the ``networkBindings`` section [DescribeTasks](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DescribeTasks.html) responses.
	PortMappings []TaskDefinitionPortMapping `pulumi:"portMappings"`
	// When this parameter is true, the container is given elevated privileges on the host container instance (similar to the ``root`` user). This parameter maps to ``Privileged`` in the docker container create command and the ``--privileged`` option to docker run
	//   This parameter is not supported for Windows containers or tasks run on FARGATElong.
	Privileged *bool `pulumi:"privileged"`
	// When this parameter is ``true``, a TTY is allocated. This parameter maps to ``Tty`` in the docker container create command and the ``--tty`` option to docker run.
	PseudoTerminal *bool `pulumi:"pseudoTerminal"`
	// When this parameter is true, the container is given read-only access to its root file system. This parameter maps to ``ReadonlyRootfs`` in the docker container create command and the ``--read-only`` option to docker run.
	//   This parameter is not supported for Windows containers.
	ReadonlyRootFilesystem *bool `pulumi:"readonlyRootFilesystem"`
	// The private repository authentication credentials to use.
	RepositoryCredentials *TaskDefinitionRepositoryCredentials `pulumi:"repositoryCredentials"`
	// The type and amount of a resource to assign to a container. The only supported resource is a GPU.
	ResourceRequirements []TaskDefinitionResourceRequirement `pulumi:"resourceRequirements"`
	// The restart policy for a container. When you set up a restart policy, Amazon ECS can restart the container without needing to replace the task. For more information, see [Restart individual containers in Amazon ECS tasks with container restart policies](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/container-restart-policy.html) in the *Amazon Elastic Container Service Developer Guide*.
	RestartPolicy *TaskDefinitionRestartPolicy `pulumi:"restartPolicy"`
	// The secrets to pass to the container. For more information, see [Specifying Sensitive Data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the *Amazon Elastic Container Service Developer Guide*.
	Secrets []TaskDefinitionSecret `pulumi:"secrets"`
	// Time duration (in seconds) to wait before giving up on resolving dependencies for a container. For example, you specify two containers in a task definition with containerA having a dependency on containerB reaching a ``COMPLETE``, ``SUCCESS``, or ``HEALTHY`` status. If a ``startTimeout`` value is specified for containerB and it doesn't reach the desired status within that time then containerA gives up and not start. This results in the task transitioning to a ``STOPPED`` state.
	//   When the ``ECS_CONTAINER_START_TIMEOUT`` container agent configuration variable is used, it's enforced independently from this start timeout value.
	//   For tasks using the Fargate launch type, the task or service requires the following platforms:
	//   +  Linux platform version ``1.3.0`` or later.
	//   +  Windows platform version ``1.0.0`` or later.
	//
	//  For tasks using the EC2 launch type, your container instances require at least version ``1.26.0`` of the container agent to use a container start timeout value. However, we recommend using the latest container agent version. For information about checking your agent version and updating to the latest version, see [Updating the Amazon ECS Container Agent](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html) in the *Amazon Elastic Container Service Developer Guide*. If you're using an Amazon ECS-optimized Linux AMI, your instance needs at least version ``1.26.0-1`` of the ``ecs-init`` package. If your container instances are launched from version ``20190301`` or later, then they contain the required versions of the container agent and ``ecs-init``. For more information, see [Amazon ECS-optimized Linux AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html) in the *Amazon Elastic Container Service Developer Guide*.
	//  The valid values for Fargate are 2-120 seconds.
	StartTimeout *int `pulumi:"startTimeout"`
	// Time duration (in seconds) to wait before the container is forcefully killed if it doesn't exit normally on its own.
	//  For tasks using the Fargate launch type, the task or service requires the following platforms:
	//   +  Linux platform version ``1.3.0`` or later.
	//   +  Windows platform version ``1.0.0`` or later.
	//
	//  For tasks that use the Fargate launch type, the max stop timeout value is 120 seconds and if the parameter is not specified, the default value of 30 seconds is used.
	//  For tasks that use the EC2 launch type, if the ``stopTimeout`` parameter isn't specified, the value set for the Amazon ECS container agent configuration variable ``ECS_CONTAINER_STOP_TIMEOUT`` is used. If neither the ``stopTimeout`` parameter or the ``ECS_CONTAINER_STOP_TIMEOUT`` agent configuration variable are set, then the default values of 30 seconds for Linux containers and 30 seconds on Windows containers are used. Your container instances require at least version 1.26.0 of the container agent to use a container stop timeout value. However, we recommend using the latest container agent version. For information about checking your agent version and updating to the latest version, see [Updating the Amazon ECS Container Agent](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html) in the *Amazon Elastic Container Service Developer Guide*. If you're using an Amazon ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the ``ecs-init`` package. If your container instances are launched from version ``20190301`` or later, then they contain the required versions of the container agent and ``ecs-init``. For more information, see [Amazon ECS-optimized Linux AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html) in the *Amazon Elastic Container Service Developer Guide*.
	//  The valid values for Fargate are 2-120 seconds.
	StopTimeout *int `pulumi:"stopTimeout"`
	// A list of namespaced kernel parameters to set in the container. This parameter maps to ``Sysctls`` in the docker container create command and the ``--sysctl`` option to docker run. For example, you can configure ``net.ipv4.tcp_keepalive_time`` setting to maintain longer lived connections.
	SystemControls []TaskDefinitionSystemControl `pulumi:"systemControls"`
	// A list of ``ulimits`` to set in the container. This parameter maps to ``Ulimits`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--ulimit`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/). Valid naming values are displayed in the [Ulimit](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_Ulimit.html) data type. This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: ``sudo docker version --format '{{.Server.APIVersion}}'``
	//   This parameter is not supported for Windows containers.
	Ulimits []TaskDefinitionUlimit `pulumi:"ulimits"`
	// The user to use inside the container. This parameter maps to ``User`` in the docker container create command and the ``--user`` option to docker run.
	//   When running tasks using the ``host`` network mode, don't run containers using the root user (UID 0). We recommend using a non-root user for better security.
	//   You can specify the ``user`` using the following formats. If specifying a UID or GID, you must specify it as a positive integer.
	//   +   ``user``
	//   +   ``user:group``
	//   +   ``uid``
	//   +   ``uid:gid``
	//   +   ``user:gid``
	//   +   ``uid:group``
	//
	//   This parameter is not supported for Windows containers.
	User *string `pulumi:"user"`
	// Specifies whether Amazon ECS will resolve the container image tag provided in the container definition to an image digest. By default, the value is ``enabled``. If you set the value for a container as ``disabled``, Amazon ECS will not resolve the provided container image tag to a digest and will use the original image URI specified in the container definition for deployment. For more information about container image resolution, see [Container image resolution](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-ecs.html#deployment-container-image-stability) in the *Amazon ECS Developer Guide*.
	VersionConsistency *TaskDefinitionContainerDefinitionVersionConsistency `pulumi:"versionConsistency"`
	// Data volumes to mount from another container. This parameter maps to ``VolumesFrom`` in the docker container create command and the ``--volumes-from`` option to docker run.
	VolumesFrom []TaskDefinitionVolumeFrom `pulumi:"volumesFrom"`
	// The working directory to run commands inside the container in. This parameter maps to ``WorkingDir`` in the docker container create command and the ``--workdir`` option to docker run.
	WorkingDirectory *string `pulumi:"workingDirectory"`
}

// TaskDefinitionContainerDefinitionInput is an input type that accepts TaskDefinitionContainerDefinitionArgs and TaskDefinitionContainerDefinitionOutput values.
// You can construct a concrete instance of `TaskDefinitionContainerDefinitionInput` via:
//
//	TaskDefinitionContainerDefinitionArgs{...}
type TaskDefinitionContainerDefinitionInput interface {
	pulumi.Input

	ToTaskDefinitionContainerDefinitionOutput() TaskDefinitionContainerDefinitionOutput
	ToTaskDefinitionContainerDefinitionOutputWithContext(context.Context) TaskDefinitionContainerDefinitionOutput
}

// The “ContainerDefinition“ property specifies a container definition. Container definitions are used in task definitions to describe the different containers that are launched as part of a task.
type TaskDefinitionContainerDefinitionArgs struct {
	// The command that's passed to the container. This parameter maps to ``Cmd`` in the docker container create command and the ``COMMAND`` parameter to docker run. If there are multiple arguments, each argument is a separated string in the array.
	Command pulumi.StringArrayInput `pulumi:"command"`
	// The number of ``cpu`` units reserved for the container. This parameter maps to ``CpuShares`` in the docker container create commandand the ``--cpu-shares`` option to docker run.
	//  This field is optional for tasks using the Fargate launch type, and the only requirement is that the total amount of CPU reserved for all containers within a task be lower than the task-level ``cpu`` value.
	//   You can determine the number of CPU units that are available per EC2 instance type by multiplying the vCPUs listed for that instance type on the [Amazon EC2 Instances](https://docs.aws.amazon.com/ec2/instance-types/) detail page by 1,024.
	//   Linux containers share unallocated CPU units with other containers on the container instance with the same ratio as their allocated amount. For example, if you run a single-container task on a single-core instance type with 512 CPU units specified for that container, and that's the only task running on the container instance, that container could use the full 1,024 CPU unit share at any given time. However, if you launched another copy of the same task on that container instance, each task is guaranteed a minimum of 512 CPU units when needed. Moreover, each container could float to higher CPU usage if the other container was not using it. If both tasks were 100% active all of the time, they would be limited to 512 CPU units.
	//  On Linux container instances, the Docker daemon on the container instance uses the CPU value to calculate the relative CPU share ratios for running containers. The minimum valid CPU share value that the Linux kernel allows is 2, and the maximum valid CPU share value that the Linux kernel allows is 262144. However, the CPU parameter isn't required, and you can use CPU values below 2 or above 262144 in your container definitions. For CPU values below 2 (including null) or above 262144, the behavior varies based on your Amazon ECS container agent version:
	//   +  *Agent versions less than or equal to 1.1.0:* Null and zero CPU values are passed to Docker as 0, which Docker then converts to 1,024 CPU shares. CPU values of 1 are passed to Docker as 1, which the Linux kernel converts to two CPU shares.
	//   +  *Agent versions greater than or equal to 1.2.0:* Null, zero, and CPU values of 1 are passed to Docker as 2.
	//   +  *Agent versions greater than or equal to 1.84.0:* CPU values greater than 256 vCPU are passed to Docker as 256, which is equivalent to 262144 CPU shares.
	//
	//  On Windows container instances, the CPU limit is enforced as an absolute limit, or a quota. Windows containers only have access to the specified amount of CPU that's described in the task definition. A null or zero CPU value is passed to Docker as ``0``, which Windows interprets as 1% of one CPU.
	Cpu pulumi.IntPtrInput `pulumi:"cpu"`
	// A list of ARNs in SSM or Amazon S3 to a credential spec (``CredSpec``) file that configures the container for Active Directory authentication. We recommend that you use this parameter instead of the ``dockerSecurityOptions``. The maximum number of ARNs is 1.
	//  There are two formats for each ARN.
	//   + credentialspecdomainless:MyARN You use credentialspecdomainless:MyARN to provide a CredSpec with an additional section for a secret in . You provide the login credentials to the domain in the secret. Each task that runs on any container instance can join different domains. You can use this format without joining the container instance to a domain. + credentialspec:MyARN You use credentialspec:MyARN to provide a CredSpec for a single domain. You must join the container instance to the domain before you start any tasks that use this task definition.
	//      In both formats, replace ``MyARN`` with the ARN in SSM or Amazon S3.
	//      If you provide a ``credentialspecdomainless:MyARN``, the ``credspec`` must provide a ARN in ASMlong for a secret containing the username, password, and the domain to connect to. For better security, the instance isn't joined to the domain for domainless authentication. Other applications on the instance can't use the domainless credentials. You can use this parameter to run tasks on the same instance, even it the tasks need to join different domains. For more information, see [Using gMSAs for Windows Containers](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/windows-gmsa.html) and [Using gMSAs for Linux Containers](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/linux-gmsa.html).
	CredentialSpecs pulumi.StringArrayInput `pulumi:"credentialSpecs"`
	// The dependencies defined for container startup and shutdown. A container can contain multiple dependencies. When a dependency is defined for container startup, for container shutdown it is reversed.
	//  For tasks using the EC2 launch type, the container instances require at least version 1.26.0 of the container agent to turn on container dependencies. However, we recommend using the latest container agent version. For information about checking your agent version and updating to the latest version, see [Updating the Amazon ECS Container Agent](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html) in the *Amazon Elastic Container Service Developer Guide*. If you're using an Amazon ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the ``ecs-init`` package. If your container instances are launched from version ``20190301`` or later, then they contain the required versions of the container agent and ``ecs-init``. For more information, see [Amazon ECS-optimized Linux AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html) in the *Amazon Elastic Container Service Developer Guide*.
	//  For tasks using the Fargate launch type, the task or service requires the following platforms:
	//   +  Linux platform version ``1.3.0`` or later.
	//   +  Windows platform version ``1.0.0`` or later.
	//
	//  If the task definition is used in a blue/green deployment that uses [AWS::CodeDeploy::DeploymentGroup BlueGreenDeploymentConfiguration](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-codedeploy-deploymentgroup-bluegreendeploymentconfiguration.html), the ``dependsOn`` parameter is not supported.
	DependsOn TaskDefinitionContainerDependencyArrayInput `pulumi:"dependsOn"`
	// When this parameter is true, networking is off within the container. This parameter maps to ``NetworkDisabled`` in the docker container create command.
	//   This parameter is not supported for Windows containers.
	DisableNetworking pulumi.BoolPtrInput `pulumi:"disableNetworking"`
	// A list of DNS search domains that are presented to the container. This parameter maps to ``DnsSearch`` in the docker container create command and the ``--dns-search`` option to docker run.
	//   This parameter is not supported for Windows containers.
	DnsSearchDomains pulumi.StringArrayInput `pulumi:"dnsSearchDomains"`
	// A list of DNS servers that are presented to the container. This parameter maps to ``Dns`` in the docker container create command and the ``--dns`` option to docker run.
	//   This parameter is not supported for Windows containers.
	DnsServers pulumi.StringArrayInput `pulumi:"dnsServers"`
	// A key/value map of labels to add to the container. This parameter maps to ``Labels`` in the docker container create command and the ``--label`` option to docker run. This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: ``sudo docker version --format '{{.Server.APIVersion}}'``
	DockerLabels pulumi.StringMapInput `pulumi:"dockerLabels"`
	// A list of strings to provide custom configuration for multiple security systems. This field isn't valid for containers in tasks using the Fargate launch type.
	//  For Linux tasks on EC2, this parameter can be used to reference custom labels for SELinux and AppArmor multi-level security systems.
	//  For any tasks on EC2, this parameter can be used to reference a credential spec file that configures a container for Active Directory authentication. For more information, see [Using gMSAs for Windows Containers](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/windows-gmsa.html) and [Using gMSAs for Linux Containers](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/linux-gmsa.html) in the *Amazon Elastic Container Service Developer Guide*.
	//  This parameter maps to ``SecurityOpt`` in the docker container create command and the ``--security-opt`` option to docker run.
	//   The Amazon ECS container agent running on a container instance must register with the ``ECS_SELINUX_CAPABLE=true`` or ``ECS_APPARMOR_CAPABLE=true`` environment variables before containers placed on that instance can use these security options. For more information, see [Amazon ECS Container Agent Configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the *Amazon Elastic Container Service Developer Guide*.
	//   Valid values: "no-new-privileges" | "apparmor:PROFILE" | "label:value" | "credentialspec:CredentialSpecFilePath"
	DockerSecurityOptions pulumi.StringArrayInput `pulumi:"dockerSecurityOptions"`
	// Early versions of the Amazon ECS container agent don't properly handle ``entryPoint`` parameters. If you have problems using ``entryPoint``, update your container agent or enter your commands and arguments as ``command`` array items instead.
	//   The entry point that's passed to the container. This parameter maps to ``Entrypoint`` in the docker container create command and the ``--entrypoint`` option to docker run.
	EntryPoint pulumi.StringArrayInput `pulumi:"entryPoint"`
	// The environment variables to pass to a container. This parameter maps to ``Env`` in the docker container create command and the ``--env`` option to docker run.
	//   We don't recommend that you use plaintext environment variables for sensitive information, such as credential data.
	Environment TaskDefinitionKeyValuePairArrayInput `pulumi:"environment"`
	// A list of files containing the environment variables to pass to a container. This parameter maps to the ``--env-file`` option to docker run.
	//  You can specify up to ten environment files. The file must have a ``.env`` file extension. Each line in an environment file contains an environment variable in ``VARIABLE=VALUE`` format. Lines beginning with ``#`` are treated as comments and are ignored.
	//  If there are environment variables specified using the ``environment`` parameter in a container definition, they take precedence over the variables contained within an environment file. If multiple environment files are specified that contain the same variable, they're processed from the top down. We recommend that you use unique variable names. For more information, see [Specifying Environment Variables](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/taskdef-envfiles.html) in the *Amazon Elastic Container Service Developer Guide*.
	EnvironmentFiles TaskDefinitionEnvironmentFileArrayInput `pulumi:"environmentFiles"`
	// If the ``essential`` parameter of a container is marked as ``true``, and that container fails or stops for any reason, all other containers that are part of the task are stopped. If the ``essential`` parameter of a container is marked as ``false``, its failure doesn't affect the rest of the containers in a task. If this parameter is omitted, a container is assumed to be essential.
	//  All tasks must have at least one essential container. If you have an application that's composed of multiple containers, group containers that are used for a common purpose into components, and separate the different components into multiple task definitions. For more information, see [Application Architecture](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/application_architecture.html) in the *Amazon Elastic Container Service Developer Guide*.
	Essential pulumi.BoolPtrInput `pulumi:"essential"`
	// A list of hostnames and IP address mappings to append to the ``/etc/hosts`` file on the container. This parameter maps to ``ExtraHosts`` in the docker container create command and the ``--add-host`` option to docker run.
	//   This parameter isn't supported for Windows containers or tasks that use the ``awsvpc`` network mode.
	ExtraHosts TaskDefinitionHostEntryArrayInput `pulumi:"extraHosts"`
	// The FireLens configuration for the container. This is used to specify and configure a log router for container logs. For more information, see [Custom Log Routing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html) in the *Amazon Elastic Container Service Developer Guide*.
	FirelensConfiguration TaskDefinitionFirelensConfigurationPtrInput `pulumi:"firelensConfiguration"`
	// The container health check command and associated configuration parameters for the container. This parameter maps to ``HealthCheck`` in the docker container create command and the ``HEALTHCHECK`` parameter of docker run.
	HealthCheck TaskDefinitionHealthCheckPtrInput `pulumi:"healthCheck"`
	// The hostname to use for your container. This parameter maps to ``Hostname`` in the docker container create command and the ``--hostname`` option to docker run.
	//   The ``hostname`` parameter is not supported if you're using the ``awsvpc`` network mode.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// The image used to start a container. This string is passed directly to the Docker daemon. By default, images in the Docker Hub registry are available. Other repositories are specified with either ``repository-url/image:tag`` or ``repository-url/image@digest``. For images using tags (repository-url/image:tag), up to 255 characters total are allowed, including letters (uppercase and lowercase), numbers, hyphens, underscores, colons, periods, forward slashes, and number signs (#). For images using digests (repository-url/image@digest), the 255 character limit applies only to the repository URL and image name (everything before the @ sign). The only supported hash function is sha256, and the hash value after sha256: must be exactly 64 characters (only letters A-F, a-f, and numbers 0-9 are allowed). This parameter maps to ``Image`` in the docker container create command and the ``IMAGE`` parameter of docker run.
	//   +  When a new task starts, the Amazon ECS container agent pulls the latest version of the specified image and tag for the container to use. However, subsequent updates to a repository image aren't propagated to already running tasks.
	//   +  Images in Amazon ECR repositories can be specified by either using the full ``registry/repository:tag`` or ``registry/repository@digest``. For example, ``012345678910.dkr.ecr.<region-name>.amazonaws.com/<repository-name>:latest`` or ``012345678910.dkr.ecr.<region-name>.amazonaws.com/<repository-name>@sha256:94afd1f2e64d908bc90dbca0035a5b567EXAMPLE``.
	//   +  Images in official repositories on Docker Hub use a single name (for example, ``ubuntu`` or ``mongo``).
	//   +  Images in other repositories on Docker Hub are qualified with an organization name (for example, ``amazon/amazon-ecs-agent``).
	//   +  Images in other online repositories are qualified further by a domain name (for example, ``quay.io/assemblyline/ubuntu``).
	Image pulumi.StringInput `pulumi:"image"`
	// When this parameter is ``true``, you can deploy containerized applications that require ``stdin`` or a ``tty`` to be allocated. This parameter maps to ``OpenStdin`` in the docker container create command and the ``--interactive`` option to docker run.
	Interactive pulumi.BoolPtrInput `pulumi:"interactive"`
	// The ``links`` parameter allows containers to communicate with each other without the need for port mappings. This parameter is only supported if the network mode of a task definition is ``bridge``. The ``name:internalName`` construct is analogous to ``name:alias`` in Docker links. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed.. This parameter maps to ``Links`` in the docker container create command and the ``--link`` option to docker run.
	//   This parameter is not supported for Windows containers.
	//    Containers that are collocated on a single container instance may be able to communicate with each other without requiring links or host port mappings. Network isolation is achieved on the container instance using security groups and VPC settings.
	Links pulumi.StringArrayInput `pulumi:"links"`
	// Linux-specific modifications that are applied to the container, such as Linux kernel capabilities. For more information see [KernelCapabilities](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_KernelCapabilities.html).
	//   This parameter is not supported for Windows containers.
	LinuxParameters TaskDefinitionLinuxParametersPtrInput `pulumi:"linuxParameters"`
	// The log configuration specification for the container.
	//  This parameter maps to ``LogConfig`` in the docker Create a container command and the ``--log-driver`` option to docker run. By default, containers use the same logging driver that the Docker daemon uses. However, the container may use a different logging driver than the Docker daemon by specifying a log driver with this parameter in the container definition. To use a different logging driver for a container, the log system must be configured properly on the container instance (or on a different log server for remote logging options). For more information on the options for different supported log drivers, see [Configure logging drivers](https://docs.aws.amazon.com/https://docs.docker.com/engine/admin/logging/overview/) in the Docker documentation.
	//   Amazon ECS currently supports a subset of the logging drivers available to the Docker daemon (shown in the [LogConfiguration](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_LogConfiguration.html) data type). Additional log drivers may be available in future releases of the Amazon ECS container agent.
	//   This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: ``sudo docker version --format '{{.Server.APIVersion}}'``
	//   The Amazon ECS container agent running on a container instance must register the logging drivers available on that instance with the ``ECS_AVAILABLE_LOGGING_DRIVERS`` environment variable before containers placed on that instance can use these log configuration options. For more information, see [Container Agent Configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the *Developer Guide*.
	LogConfiguration TaskDefinitionLogConfigurationPtrInput `pulumi:"logConfiguration"`
	// The amount (in MiB) of memory to present to the container. If your container attempts to exceed the memory specified here, the container is killed. The total amount of memory reserved for all containers within a task must be lower than the task ``memory`` value, if one is specified. This parameter maps to ``Memory`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--memory`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	//  If using the Fargate launch type, this parameter is optional.
	//  If using the EC2 launch type, you must specify either a task-level memory value or a container-level memory value. If you specify both a container-level ``memory`` and ``memoryReservation`` value, ``memory`` must be greater than ``memoryReservation``. If you specify ``memoryReservation``, then that value is subtracted from the available memory resources for the container instance where the container is placed. Otherwise, the value of ``memory`` is used.
	//  The Docker 20.10.0 or later daemon reserves a minimum of 6 MiB of memory for a container, so you should not specify fewer than 6 MiB of memory for your containers.
	//  The Docker 19.03.13-ce or earlier daemon reserves a minimum of 4 MiB of memory for a container, so you should not specify fewer than 4 MiB of memory for your containers.
	Memory pulumi.IntPtrInput `pulumi:"memory"`
	// The soft limit (in MiB) of memory to reserve for the container. When system memory is under heavy contention, Docker attempts to keep the container memory to this soft limit. However, your container can consume more memory when it needs to, up to either the hard limit specified with the ``memory`` parameter (if applicable), or all of the available memory on the container instance, whichever comes first. This parameter maps to ``MemoryReservation`` in the docker container create command and the ``--memory-reservation`` option to docker run.
	//  If a task-level memory value is not specified, you must specify a non-zero integer for one or both of ``memory`` or ``memoryReservation`` in a container definition. If you specify both, ``memory`` must be greater than ``memoryReservation``. If you specify ``memoryReservation``, then that value is subtracted from the available memory resources for the container instance where the container is placed. Otherwise, the value of ``memory`` is used.
	//  For example, if your container normally uses 128 MiB of memory, but occasionally bursts to 256 MiB of memory for short periods of time, you can set a ``memoryReservation`` of 128 MiB, and a ``memory`` hard limit of 300 MiB. This configuration would allow the container to only reserve 128 MiB of memory from the remaining resources on the container instance, but also allow the container to consume more memory resources when needed.
	//  The Docker 20.10.0 or later daemon reserves a minimum of 6 MiB of memory for a container. So, don't specify less than 6 MiB of memory for your containers.
	//  The Docker 19.03.13-ce or earlier daemon reserves a minimum of 4 MiB of memory for a container. So, don't specify less than 4 MiB of memory for your containers.
	MemoryReservation pulumi.IntPtrInput `pulumi:"memoryReservation"`
	// The mount points for data volumes in your container.
	//  This parameter maps to ``Volumes`` in the docker container create command and the ``--volume`` option to docker run.
	//  Windows containers can mount whole directories on the same drive as ``$env:ProgramData``. Windows containers can't mount directories on a different drive, and mount point can't be across drives.
	MountPoints TaskDefinitionMountPointArrayInput `pulumi:"mountPoints"`
	// The name of a container. If you're linking multiple containers together in a task definition, the ``name`` of one container can be entered in the ``links`` of another container to connect the containers. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed. This parameter maps to ``name`` in the docker container create command and the ``--name`` option to docker run.
	Name pulumi.StringInput `pulumi:"name"`
	// The list of port mappings for the container. Port mappings allow containers to access ports on the host container instance to send or receive traffic.
	//  For task definitions that use the ``awsvpc`` network mode, you should only specify the ``containerPort``. The ``hostPort`` can be left blank or it must be the same value as the ``containerPort``.
	//  Port mappings on Windows use the ``NetNAT`` gateway address rather than ``localhost``. There is no loopback for port mappings on Windows, so you cannot access a container's mapped port from the host itself.
	//  This parameter maps to ``PortBindings`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--publish`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/). If the network mode of a task definition is set to ``none``, then you can't specify port mappings. If the network mode of a task definition is set to ``host``, then host ports must either be undefined or they must match the container port in the port mapping.
	//   After a task reaches the ``RUNNING`` status, manual and automatic host and container port assignments are visible in the *Network Bindings* section of a container description for a selected task in the Amazon ECS console. The assignments are also visible in the ``networkBindings`` section [DescribeTasks](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DescribeTasks.html) responses.
	PortMappings TaskDefinitionPortMappingArrayInput `pulumi:"portMappings"`
	// When this parameter is true, the container is given elevated privileges on the host container instance (similar to the ``root`` user). This parameter maps to ``Privileged`` in the docker container create command and the ``--privileged`` option to docker run
	//   This parameter is not supported for Windows containers or tasks run on FARGATElong.
	Privileged pulumi.BoolPtrInput `pulumi:"privileged"`
	// When this parameter is ``true``, a TTY is allocated. This parameter maps to ``Tty`` in the docker container create command and the ``--tty`` option to docker run.
	PseudoTerminal pulumi.BoolPtrInput `pulumi:"pseudoTerminal"`
	// When this parameter is true, the container is given read-only access to its root file system. This parameter maps to ``ReadonlyRootfs`` in the docker container create command and the ``--read-only`` option to docker run.
	//   This parameter is not supported for Windows containers.
	ReadonlyRootFilesystem pulumi.BoolPtrInput `pulumi:"readonlyRootFilesystem"`
	// The private repository authentication credentials to use.
	RepositoryCredentials TaskDefinitionRepositoryCredentialsPtrInput `pulumi:"repositoryCredentials"`
	// The type and amount of a resource to assign to a container. The only supported resource is a GPU.
	ResourceRequirements TaskDefinitionResourceRequirementArrayInput `pulumi:"resourceRequirements"`
	// The restart policy for a container. When you set up a restart policy, Amazon ECS can restart the container without needing to replace the task. For more information, see [Restart individual containers in Amazon ECS tasks with container restart policies](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/container-restart-policy.html) in the *Amazon Elastic Container Service Developer Guide*.
	RestartPolicy TaskDefinitionRestartPolicyPtrInput `pulumi:"restartPolicy"`
	// The secrets to pass to the container. For more information, see [Specifying Sensitive Data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the *Amazon Elastic Container Service Developer Guide*.
	Secrets TaskDefinitionSecretArrayInput `pulumi:"secrets"`
	// Time duration (in seconds) to wait before giving up on resolving dependencies for a container. For example, you specify two containers in a task definition with containerA having a dependency on containerB reaching a ``COMPLETE``, ``SUCCESS``, or ``HEALTHY`` status. If a ``startTimeout`` value is specified for containerB and it doesn't reach the desired status within that time then containerA gives up and not start. This results in the task transitioning to a ``STOPPED`` state.
	//   When the ``ECS_CONTAINER_START_TIMEOUT`` container agent configuration variable is used, it's enforced independently from this start timeout value.
	//   For tasks using the Fargate launch type, the task or service requires the following platforms:
	//   +  Linux platform version ``1.3.0`` or later.
	//   +  Windows platform version ``1.0.0`` or later.
	//
	//  For tasks using the EC2 launch type, your container instances require at least version ``1.26.0`` of the container agent to use a container start timeout value. However, we recommend using the latest container agent version. For information about checking your agent version and updating to the latest version, see [Updating the Amazon ECS Container Agent](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html) in the *Amazon Elastic Container Service Developer Guide*. If you're using an Amazon ECS-optimized Linux AMI, your instance needs at least version ``1.26.0-1`` of the ``ecs-init`` package. If your container instances are launched from version ``20190301`` or later, then they contain the required versions of the container agent and ``ecs-init``. For more information, see [Amazon ECS-optimized Linux AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html) in the *Amazon Elastic Container Service Developer Guide*.
	//  The valid values for Fargate are 2-120 seconds.
	StartTimeout pulumi.IntPtrInput `pulumi:"startTimeout"`
	// Time duration (in seconds) to wait before the container is forcefully killed if it doesn't exit normally on its own.
	//  For tasks using the Fargate launch type, the task or service requires the following platforms:
	//   +  Linux platform version ``1.3.0`` or later.
	//   +  Windows platform version ``1.0.0`` or later.
	//
	//  For tasks that use the Fargate launch type, the max stop timeout value is 120 seconds and if the parameter is not specified, the default value of 30 seconds is used.
	//  For tasks that use the EC2 launch type, if the ``stopTimeout`` parameter isn't specified, the value set for the Amazon ECS container agent configuration variable ``ECS_CONTAINER_STOP_TIMEOUT`` is used. If neither the ``stopTimeout`` parameter or the ``ECS_CONTAINER_STOP_TIMEOUT`` agent configuration variable are set, then the default values of 30 seconds for Linux containers and 30 seconds on Windows containers are used. Your container instances require at least version 1.26.0 of the container agent to use a container stop timeout value. However, we recommend using the latest container agent version. For information about checking your agent version and updating to the latest version, see [Updating the Amazon ECS Container Agent](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html) in the *Amazon Elastic Container Service Developer Guide*. If you're using an Amazon ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the ``ecs-init`` package. If your container instances are launched from version ``20190301`` or later, then they contain the required versions of the container agent and ``ecs-init``. For more information, see [Amazon ECS-optimized Linux AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html) in the *Amazon Elastic Container Service Developer Guide*.
	//  The valid values for Fargate are 2-120 seconds.
	StopTimeout pulumi.IntPtrInput `pulumi:"stopTimeout"`
	// A list of namespaced kernel parameters to set in the container. This parameter maps to ``Sysctls`` in the docker container create command and the ``--sysctl`` option to docker run. For example, you can configure ``net.ipv4.tcp_keepalive_time`` setting to maintain longer lived connections.
	SystemControls TaskDefinitionSystemControlArrayInput `pulumi:"systemControls"`
	// A list of ``ulimits`` to set in the container. This parameter maps to ``Ulimits`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--ulimit`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/). Valid naming values are displayed in the [Ulimit](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_Ulimit.html) data type. This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: ``sudo docker version --format '{{.Server.APIVersion}}'``
	//   This parameter is not supported for Windows containers.
	Ulimits TaskDefinitionUlimitArrayInput `pulumi:"ulimits"`
	// The user to use inside the container. This parameter maps to ``User`` in the docker container create command and the ``--user`` option to docker run.
	//   When running tasks using the ``host`` network mode, don't run containers using the root user (UID 0). We recommend using a non-root user for better security.
	//   You can specify the ``user`` using the following formats. If specifying a UID or GID, you must specify it as a positive integer.
	//   +   ``user``
	//   +   ``user:group``
	//   +   ``uid``
	//   +   ``uid:gid``
	//   +   ``user:gid``
	//   +   ``uid:group``
	//
	//   This parameter is not supported for Windows containers.
	User pulumi.StringPtrInput `pulumi:"user"`
	// Specifies whether Amazon ECS will resolve the container image tag provided in the container definition to an image digest. By default, the value is ``enabled``. If you set the value for a container as ``disabled``, Amazon ECS will not resolve the provided container image tag to a digest and will use the original image URI specified in the container definition for deployment. For more information about container image resolution, see [Container image resolution](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-ecs.html#deployment-container-image-stability) in the *Amazon ECS Developer Guide*.
	VersionConsistency TaskDefinitionContainerDefinitionVersionConsistencyPtrInput `pulumi:"versionConsistency"`
	// Data volumes to mount from another container. This parameter maps to ``VolumesFrom`` in the docker container create command and the ``--volumes-from`` option to docker run.
	VolumesFrom TaskDefinitionVolumeFromArrayInput `pulumi:"volumesFrom"`
	// The working directory to run commands inside the container in. This parameter maps to ``WorkingDir`` in the docker container create command and the ``--workdir`` option to docker run.
	WorkingDirectory pulumi.StringPtrInput `pulumi:"workingDirectory"`
}

func (TaskDefinitionContainerDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionContainerDefinition)(nil)).Elem()
}

func (i TaskDefinitionContainerDefinitionArgs) ToTaskDefinitionContainerDefinitionOutput() TaskDefinitionContainerDefinitionOutput {
	return i.ToTaskDefinitionContainerDefinitionOutputWithContext(context.Background())
}

func (i TaskDefinitionContainerDefinitionArgs) ToTaskDefinitionContainerDefinitionOutputWithContext(ctx context.Context) TaskDefinitionContainerDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionContainerDefinitionOutput)
}

// TaskDefinitionContainerDefinitionArrayInput is an input type that accepts TaskDefinitionContainerDefinitionArray and TaskDefinitionContainerDefinitionArrayOutput values.
// You can construct a concrete instance of `TaskDefinitionContainerDefinitionArrayInput` via:
//
//	TaskDefinitionContainerDefinitionArray{ TaskDefinitionContainerDefinitionArgs{...} }
type TaskDefinitionContainerDefinitionArrayInput interface {
	pulumi.Input

	ToTaskDefinitionContainerDefinitionArrayOutput() TaskDefinitionContainerDefinitionArrayOutput
	ToTaskDefinitionContainerDefinitionArrayOutputWithContext(context.Context) TaskDefinitionContainerDefinitionArrayOutput
}

type TaskDefinitionContainerDefinitionArray []TaskDefinitionContainerDefinitionInput

func (TaskDefinitionContainerDefinitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionContainerDefinition)(nil)).Elem()
}

func (i TaskDefinitionContainerDefinitionArray) ToTaskDefinitionContainerDefinitionArrayOutput() TaskDefinitionContainerDefinitionArrayOutput {
	return i.ToTaskDefinitionContainerDefinitionArrayOutputWithContext(context.Background())
}

func (i TaskDefinitionContainerDefinitionArray) ToTaskDefinitionContainerDefinitionArrayOutputWithContext(ctx context.Context) TaskDefinitionContainerDefinitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionContainerDefinitionArrayOutput)
}

// The “ContainerDefinition“ property specifies a container definition. Container definitions are used in task definitions to describe the different containers that are launched as part of a task.
type TaskDefinitionContainerDefinitionOutput struct{ *pulumi.OutputState }

func (TaskDefinitionContainerDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionContainerDefinition)(nil)).Elem()
}

func (o TaskDefinitionContainerDefinitionOutput) ToTaskDefinitionContainerDefinitionOutput() TaskDefinitionContainerDefinitionOutput {
	return o
}

func (o TaskDefinitionContainerDefinitionOutput) ToTaskDefinitionContainerDefinitionOutputWithContext(ctx context.Context) TaskDefinitionContainerDefinitionOutput {
	return o
}

// The command that's passed to the container. This parameter maps to “Cmd“ in the docker container create command and the “COMMAND“ parameter to docker run. If there are multiple arguments, each argument is a separated string in the array.
func (o TaskDefinitionContainerDefinitionOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) []string { return v.Command }).(pulumi.StringArrayOutput)
}

// The number of “cpu“ units reserved for the container. This parameter maps to “CpuShares“ in the docker container create commandand the “--cpu-shares“ option to docker run.
//
//	This field is optional for tasks using the Fargate launch type, and the only requirement is that the total amount of CPU reserved for all containers within a task be lower than the task-level ``cpu`` value.
//	 You can determine the number of CPU units that are available per EC2 instance type by multiplying the vCPUs listed for that instance type on the [Amazon EC2 Instances](https://docs.aws.amazon.com/ec2/instance-types/) detail page by 1,024.
//	 Linux containers share unallocated CPU units with other containers on the container instance with the same ratio as their allocated amount. For example, if you run a single-container task on a single-core instance type with 512 CPU units specified for that container, and that's the only task running on the container instance, that container could use the full 1,024 CPU unit share at any given time. However, if you launched another copy of the same task on that container instance, each task is guaranteed a minimum of 512 CPU units when needed. Moreover, each container could float to higher CPU usage if the other container was not using it. If both tasks were 100% active all of the time, they would be limited to 512 CPU units.
//	On Linux container instances, the Docker daemon on the container instance uses the CPU value to calculate the relative CPU share ratios for running containers. The minimum valid CPU share value that the Linux kernel allows is 2, and the maximum valid CPU share value that the Linux kernel allows is 262144. However, the CPU parameter isn't required, and you can use CPU values below 2 or above 262144 in your container definitions. For CPU values below 2 (including null) or above 262144, the behavior varies based on your Amazon ECS container agent version:
//	 +  *Agent versions less than or equal to 1.1.0:* Null and zero CPU values are passed to Docker as 0, which Docker then converts to 1,024 CPU shares. CPU values of 1 are passed to Docker as 1, which the Linux kernel converts to two CPU shares.
//	 +  *Agent versions greater than or equal to 1.2.0:* Null, zero, and CPU values of 1 are passed to Docker as 2.
//	 +  *Agent versions greater than or equal to 1.84.0:* CPU values greater than 256 vCPU are passed to Docker as 256, which is equivalent to 262144 CPU shares.
//
//	On Windows container instances, the CPU limit is enforced as an absolute limit, or a quota. Windows containers only have access to the specified amount of CPU that's described in the task definition. A null or zero CPU value is passed to Docker as ``0``, which Windows interprets as 1% of one CPU.
func (o TaskDefinitionContainerDefinitionOutput) Cpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *int { return v.Cpu }).(pulumi.IntPtrOutput)
}

// A list of ARNs in SSM or Amazon S3 to a credential spec (“CredSpec“) file that configures the container for Active Directory authentication. We recommend that you use this parameter instead of the “dockerSecurityOptions“. The maximum number of ARNs is 1.
//
//	There are two formats for each ARN.
//	 + credentialspecdomainless:MyARN You use credentialspecdomainless:MyARN to provide a CredSpec with an additional section for a secret in . You provide the login credentials to the domain in the secret. Each task that runs on any container instance can join different domains. You can use this format without joining the container instance to a domain. + credentialspec:MyARN You use credentialspec:MyARN to provide a CredSpec for a single domain. You must join the container instance to the domain before you start any tasks that use this task definition.
//	    In both formats, replace ``MyARN`` with the ARN in SSM or Amazon S3.
//	    If you provide a ``credentialspecdomainless:MyARN``, the ``credspec`` must provide a ARN in ASMlong for a secret containing the username, password, and the domain to connect to. For better security, the instance isn't joined to the domain for domainless authentication. Other applications on the instance can't use the domainless credentials. You can use this parameter to run tasks on the same instance, even it the tasks need to join different domains. For more information, see [Using gMSAs for Windows Containers](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/windows-gmsa.html) and [Using gMSAs for Linux Containers](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/linux-gmsa.html).
func (o TaskDefinitionContainerDefinitionOutput) CredentialSpecs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) []string { return v.CredentialSpecs }).(pulumi.StringArrayOutput)
}

// The dependencies defined for container startup and shutdown. A container can contain multiple dependencies. When a dependency is defined for container startup, for container shutdown it is reversed.
//
//	For tasks using the EC2 launch type, the container instances require at least version 1.26.0 of the container agent to turn on container dependencies. However, we recommend using the latest container agent version. For information about checking your agent version and updating to the latest version, see [Updating the Amazon ECS Container Agent](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html) in the *Amazon Elastic Container Service Developer Guide*. If you're using an Amazon ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the ``ecs-init`` package. If your container instances are launched from version ``20190301`` or later, then they contain the required versions of the container agent and ``ecs-init``. For more information, see [Amazon ECS-optimized Linux AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html) in the *Amazon Elastic Container Service Developer Guide*.
//	For tasks using the Fargate launch type, the task or service requires the following platforms:
//	 +  Linux platform version ``1.3.0`` or later.
//	 +  Windows platform version ``1.0.0`` or later.
//
//	If the task definition is used in a blue/green deployment that uses [AWS::CodeDeploy::DeploymentGroup BlueGreenDeploymentConfiguration](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-codedeploy-deploymentgroup-bluegreendeploymentconfiguration.html), the ``dependsOn`` parameter is not supported.
func (o TaskDefinitionContainerDefinitionOutput) DependsOn() TaskDefinitionContainerDependencyArrayOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) []TaskDefinitionContainerDependency { return v.DependsOn }).(TaskDefinitionContainerDependencyArrayOutput)
}

// When this parameter is true, networking is off within the container. This parameter maps to “NetworkDisabled“ in the docker container create command.
//
//	This parameter is not supported for Windows containers.
func (o TaskDefinitionContainerDefinitionOutput) DisableNetworking() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *bool { return v.DisableNetworking }).(pulumi.BoolPtrOutput)
}

// A list of DNS search domains that are presented to the container. This parameter maps to “DnsSearch“ in the docker container create command and the “--dns-search“ option to docker run.
//
//	This parameter is not supported for Windows containers.
func (o TaskDefinitionContainerDefinitionOutput) DnsSearchDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) []string { return v.DnsSearchDomains }).(pulumi.StringArrayOutput)
}

// A list of DNS servers that are presented to the container. This parameter maps to “Dns“ in the docker container create command and the “--dns“ option to docker run.
//
//	This parameter is not supported for Windows containers.
func (o TaskDefinitionContainerDefinitionOutput) DnsServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) []string { return v.DnsServers }).(pulumi.StringArrayOutput)
}

// A key/value map of labels to add to the container. This parameter maps to “Labels“ in the docker container create command and the “--label“ option to docker run. This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: “sudo docker version --format '{{.Server.APIVersion}}'“
func (o TaskDefinitionContainerDefinitionOutput) DockerLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) map[string]string { return v.DockerLabels }).(pulumi.StringMapOutput)
}

// A list of strings to provide custom configuration for multiple security systems. This field isn't valid for containers in tasks using the Fargate launch type.
//
//	For Linux tasks on EC2, this parameter can be used to reference custom labels for SELinux and AppArmor multi-level security systems.
//	For any tasks on EC2, this parameter can be used to reference a credential spec file that configures a container for Active Directory authentication. For more information, see [Using gMSAs for Windows Containers](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/windows-gmsa.html) and [Using gMSAs for Linux Containers](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/linux-gmsa.html) in the *Amazon Elastic Container Service Developer Guide*.
//	This parameter maps to ``SecurityOpt`` in the docker container create command and the ``--security-opt`` option to docker run.
//	 The Amazon ECS container agent running on a container instance must register with the ``ECS_SELINUX_CAPABLE=true`` or ``ECS_APPARMOR_CAPABLE=true`` environment variables before containers placed on that instance can use these security options. For more information, see [Amazon ECS Container Agent Configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the *Amazon Elastic Container Service Developer Guide*.
//	 Valid values: "no-new-privileges" | "apparmor:PROFILE" | "label:value" | "credentialspec:CredentialSpecFilePath"
func (o TaskDefinitionContainerDefinitionOutput) DockerSecurityOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) []string { return v.DockerSecurityOptions }).(pulumi.StringArrayOutput)
}

// Early versions of the Amazon ECS container agent don't properly handle “entryPoint“ parameters. If you have problems using “entryPoint“, update your container agent or enter your commands and arguments as “command“ array items instead.
//
//	The entry point that's passed to the container. This parameter maps to ``Entrypoint`` in the docker container create command and the ``--entrypoint`` option to docker run.
func (o TaskDefinitionContainerDefinitionOutput) EntryPoint() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) []string { return v.EntryPoint }).(pulumi.StringArrayOutput)
}

// The environment variables to pass to a container. This parameter maps to “Env“ in the docker container create command and the “--env“ option to docker run.
//
//	We don't recommend that you use plaintext environment variables for sensitive information, such as credential data.
func (o TaskDefinitionContainerDefinitionOutput) Environment() TaskDefinitionKeyValuePairArrayOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) []TaskDefinitionKeyValuePair { return v.Environment }).(TaskDefinitionKeyValuePairArrayOutput)
}

// A list of files containing the environment variables to pass to a container. This parameter maps to the “--env-file“ option to docker run.
//
//	You can specify up to ten environment files. The file must have a ``.env`` file extension. Each line in an environment file contains an environment variable in ``VARIABLE=VALUE`` format. Lines beginning with ``#`` are treated as comments and are ignored.
//	If there are environment variables specified using the ``environment`` parameter in a container definition, they take precedence over the variables contained within an environment file. If multiple environment files are specified that contain the same variable, they're processed from the top down. We recommend that you use unique variable names. For more information, see [Specifying Environment Variables](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/taskdef-envfiles.html) in the *Amazon Elastic Container Service Developer Guide*.
func (o TaskDefinitionContainerDefinitionOutput) EnvironmentFiles() TaskDefinitionEnvironmentFileArrayOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) []TaskDefinitionEnvironmentFile { return v.EnvironmentFiles }).(TaskDefinitionEnvironmentFileArrayOutput)
}

// If the “essential“ parameter of a container is marked as “true“, and that container fails or stops for any reason, all other containers that are part of the task are stopped. If the “essential“ parameter of a container is marked as “false“, its failure doesn't affect the rest of the containers in a task. If this parameter is omitted, a container is assumed to be essential.
//
//	All tasks must have at least one essential container. If you have an application that's composed of multiple containers, group containers that are used for a common purpose into components, and separate the different components into multiple task definitions. For more information, see [Application Architecture](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/application_architecture.html) in the *Amazon Elastic Container Service Developer Guide*.
func (o TaskDefinitionContainerDefinitionOutput) Essential() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *bool { return v.Essential }).(pulumi.BoolPtrOutput)
}

// A list of hostnames and IP address mappings to append to the “/etc/hosts“ file on the container. This parameter maps to “ExtraHosts“ in the docker container create command and the “--add-host“ option to docker run.
//
//	This parameter isn't supported for Windows containers or tasks that use the ``awsvpc`` network mode.
func (o TaskDefinitionContainerDefinitionOutput) ExtraHosts() TaskDefinitionHostEntryArrayOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) []TaskDefinitionHostEntry { return v.ExtraHosts }).(TaskDefinitionHostEntryArrayOutput)
}

// The FireLens configuration for the container. This is used to specify and configure a log router for container logs. For more information, see [Custom Log Routing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html) in the *Amazon Elastic Container Service Developer Guide*.
func (o TaskDefinitionContainerDefinitionOutput) FirelensConfiguration() TaskDefinitionFirelensConfigurationPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *TaskDefinitionFirelensConfiguration {
		return v.FirelensConfiguration
	}).(TaskDefinitionFirelensConfigurationPtrOutput)
}

// The container health check command and associated configuration parameters for the container. This parameter maps to “HealthCheck“ in the docker container create command and the “HEALTHCHECK“ parameter of docker run.
func (o TaskDefinitionContainerDefinitionOutput) HealthCheck() TaskDefinitionHealthCheckPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *TaskDefinitionHealthCheck { return v.HealthCheck }).(TaskDefinitionHealthCheckPtrOutput)
}

// The hostname to use for your container. This parameter maps to “Hostname“ in the docker container create command and the “--hostname“ option to docker run.
//
//	The ``hostname`` parameter is not supported if you're using the ``awsvpc`` network mode.
func (o TaskDefinitionContainerDefinitionOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// The image used to start a container. This string is passed directly to the Docker daemon. By default, images in the Docker Hub registry are available. Other repositories are specified with either “repository-url/image:tag“ or “repository-url/image@digest“. For images using tags (repository-url/image:tag), up to 255 characters total are allowed, including letters (uppercase and lowercase), numbers, hyphens, underscores, colons, periods, forward slashes, and number signs (#). For images using digests (repository-url/image@digest), the 255 character limit applies only to the repository URL and image name (everything before the @ sign). The only supported hash function is sha256, and the hash value after sha256: must be exactly 64 characters (only letters A-F, a-f, and numbers 0-9 are allowed). This parameter maps to “Image“ in the docker container create command and the “IMAGE“ parameter of docker run.
//   - When a new task starts, the Amazon ECS container agent pulls the latest version of the specified image and tag for the container to use. However, subsequent updates to a repository image aren't propagated to already running tasks.
//   - Images in Amazon ECR repositories can be specified by either using the full “registry/repository:tag“ or “registry/repository@digest“. For example, “012345678910.dkr.ecr.<region-name>.amazonaws.com/<repository-name>:latest“ or “012345678910.dkr.ecr.<region-name>.amazonaws.com/<repository-name>@sha256:94afd1f2e64d908bc90dbca0035a5b567EXAMPLE“.
//   - Images in official repositories on Docker Hub use a single name (for example, “ubuntu“ or “mongo“).
//   - Images in other repositories on Docker Hub are qualified with an organization name (for example, “amazon/amazon-ecs-agent“).
//   - Images in other online repositories are qualified further by a domain name (for example, “quay.io/assemblyline/ubuntu“).
func (o TaskDefinitionContainerDefinitionOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) string { return v.Image }).(pulumi.StringOutput)
}

// When this parameter is “true“, you can deploy containerized applications that require “stdin“ or a “tty“ to be allocated. This parameter maps to “OpenStdin“ in the docker container create command and the “--interactive“ option to docker run.
func (o TaskDefinitionContainerDefinitionOutput) Interactive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *bool { return v.Interactive }).(pulumi.BoolPtrOutput)
}

// The “links“ parameter allows containers to communicate with each other without the need for port mappings. This parameter is only supported if the network mode of a task definition is “bridge“. The “name:internalName“ construct is analogous to “name:alias“ in Docker links. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed.. This parameter maps to “Links“ in the docker container create command and the “--link“ option to docker run.
//
//	This parameter is not supported for Windows containers.
//	 Containers that are collocated on a single container instance may be able to communicate with each other without requiring links or host port mappings. Network isolation is achieved on the container instance using security groups and VPC settings.
func (o TaskDefinitionContainerDefinitionOutput) Links() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) []string { return v.Links }).(pulumi.StringArrayOutput)
}

// Linux-specific modifications that are applied to the container, such as Linux kernel capabilities. For more information see [KernelCapabilities](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_KernelCapabilities.html).
//
//	This parameter is not supported for Windows containers.
func (o TaskDefinitionContainerDefinitionOutput) LinuxParameters() TaskDefinitionLinuxParametersPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *TaskDefinitionLinuxParameters { return v.LinuxParameters }).(TaskDefinitionLinuxParametersPtrOutput)
}

// The log configuration specification for the container.
//
//	This parameter maps to ``LogConfig`` in the docker Create a container command and the ``--log-driver`` option to docker run. By default, containers use the same logging driver that the Docker daemon uses. However, the container may use a different logging driver than the Docker daemon by specifying a log driver with this parameter in the container definition. To use a different logging driver for a container, the log system must be configured properly on the container instance (or on a different log server for remote logging options). For more information on the options for different supported log drivers, see [Configure logging drivers](https://docs.aws.amazon.com/https://docs.docker.com/engine/admin/logging/overview/) in the Docker documentation.
//	 Amazon ECS currently supports a subset of the logging drivers available to the Docker daemon (shown in the [LogConfiguration](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_LogConfiguration.html) data type). Additional log drivers may be available in future releases of the Amazon ECS container agent.
//	 This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: ``sudo docker version --format '{{.Server.APIVersion}}'``
//	 The Amazon ECS container agent running on a container instance must register the logging drivers available on that instance with the ``ECS_AVAILABLE_LOGGING_DRIVERS`` environment variable before containers placed on that instance can use these log configuration options. For more information, see [Container Agent Configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the *Developer Guide*.
func (o TaskDefinitionContainerDefinitionOutput) LogConfiguration() TaskDefinitionLogConfigurationPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *TaskDefinitionLogConfiguration { return v.LogConfiguration }).(TaskDefinitionLogConfigurationPtrOutput)
}

// The amount (in MiB) of memory to present to the container. If your container attempts to exceed the memory specified here, the container is killed. The total amount of memory reserved for all containers within a task must be lower than the task “memory“ value, if one is specified. This parameter maps to “Memory“ in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the “--memory“ option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
//
//	If using the Fargate launch type, this parameter is optional.
//	If using the EC2 launch type, you must specify either a task-level memory value or a container-level memory value. If you specify both a container-level ``memory`` and ``memoryReservation`` value, ``memory`` must be greater than ``memoryReservation``. If you specify ``memoryReservation``, then that value is subtracted from the available memory resources for the container instance where the container is placed. Otherwise, the value of ``memory`` is used.
//	The Docker 20.10.0 or later daemon reserves a minimum of 6 MiB of memory for a container, so you should not specify fewer than 6 MiB of memory for your containers.
//	The Docker 19.03.13-ce or earlier daemon reserves a minimum of 4 MiB of memory for a container, so you should not specify fewer than 4 MiB of memory for your containers.
func (o TaskDefinitionContainerDefinitionOutput) Memory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *int { return v.Memory }).(pulumi.IntPtrOutput)
}

// The soft limit (in MiB) of memory to reserve for the container. When system memory is under heavy contention, Docker attempts to keep the container memory to this soft limit. However, your container can consume more memory when it needs to, up to either the hard limit specified with the “memory“ parameter (if applicable), or all of the available memory on the container instance, whichever comes first. This parameter maps to “MemoryReservation“ in the docker container create command and the “--memory-reservation“ option to docker run.
//
//	If a task-level memory value is not specified, you must specify a non-zero integer for one or both of ``memory`` or ``memoryReservation`` in a container definition. If you specify both, ``memory`` must be greater than ``memoryReservation``. If you specify ``memoryReservation``, then that value is subtracted from the available memory resources for the container instance where the container is placed. Otherwise, the value of ``memory`` is used.
//	For example, if your container normally uses 128 MiB of memory, but occasionally bursts to 256 MiB of memory for short periods of time, you can set a ``memoryReservation`` of 128 MiB, and a ``memory`` hard limit of 300 MiB. This configuration would allow the container to only reserve 128 MiB of memory from the remaining resources on the container instance, but also allow the container to consume more memory resources when needed.
//	The Docker 20.10.0 or later daemon reserves a minimum of 6 MiB of memory for a container. So, don't specify less than 6 MiB of memory for your containers.
//	The Docker 19.03.13-ce or earlier daemon reserves a minimum of 4 MiB of memory for a container. So, don't specify less than 4 MiB of memory for your containers.
func (o TaskDefinitionContainerDefinitionOutput) MemoryReservation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *int { return v.MemoryReservation }).(pulumi.IntPtrOutput)
}

// The mount points for data volumes in your container.
//
//	This parameter maps to ``Volumes`` in the docker container create command and the ``--volume`` option to docker run.
//	Windows containers can mount whole directories on the same drive as ``$env:ProgramData``. Windows containers can't mount directories on a different drive, and mount point can't be across drives.
func (o TaskDefinitionContainerDefinitionOutput) MountPoints() TaskDefinitionMountPointArrayOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) []TaskDefinitionMountPoint { return v.MountPoints }).(TaskDefinitionMountPointArrayOutput)
}

// The name of a container. If you're linking multiple containers together in a task definition, the “name“ of one container can be entered in the “links“ of another container to connect the containers. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed. This parameter maps to “name“ in the docker container create command and the “--name“ option to docker run.
func (o TaskDefinitionContainerDefinitionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) string { return v.Name }).(pulumi.StringOutput)
}

// The list of port mappings for the container. Port mappings allow containers to access ports on the host container instance to send or receive traffic.
//
//	For task definitions that use the ``awsvpc`` network mode, you should only specify the ``containerPort``. The ``hostPort`` can be left blank or it must be the same value as the ``containerPort``.
//	Port mappings on Windows use the ``NetNAT`` gateway address rather than ``localhost``. There is no loopback for port mappings on Windows, so you cannot access a container's mapped port from the host itself.
//	This parameter maps to ``PortBindings`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--publish`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/). If the network mode of a task definition is set to ``none``, then you can't specify port mappings. If the network mode of a task definition is set to ``host``, then host ports must either be undefined or they must match the container port in the port mapping.
//	 After a task reaches the ``RUNNING`` status, manual and automatic host and container port assignments are visible in the *Network Bindings* section of a container description for a selected task in the Amazon ECS console. The assignments are also visible in the ``networkBindings`` section [DescribeTasks](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DescribeTasks.html) responses.
func (o TaskDefinitionContainerDefinitionOutput) PortMappings() TaskDefinitionPortMappingArrayOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) []TaskDefinitionPortMapping { return v.PortMappings }).(TaskDefinitionPortMappingArrayOutput)
}

// When this parameter is true, the container is given elevated privileges on the host container instance (similar to the “root“ user). This parameter maps to “Privileged“ in the docker container create command and the “--privileged“ option to docker run
//
//	This parameter is not supported for Windows containers or tasks run on FARGATElong.
func (o TaskDefinitionContainerDefinitionOutput) Privileged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *bool { return v.Privileged }).(pulumi.BoolPtrOutput)
}

// When this parameter is “true“, a TTY is allocated. This parameter maps to “Tty“ in the docker container create command and the “--tty“ option to docker run.
func (o TaskDefinitionContainerDefinitionOutput) PseudoTerminal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *bool { return v.PseudoTerminal }).(pulumi.BoolPtrOutput)
}

// When this parameter is true, the container is given read-only access to its root file system. This parameter maps to “ReadonlyRootfs“ in the docker container create command and the “--read-only“ option to docker run.
//
//	This parameter is not supported for Windows containers.
func (o TaskDefinitionContainerDefinitionOutput) ReadonlyRootFilesystem() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *bool { return v.ReadonlyRootFilesystem }).(pulumi.BoolPtrOutput)
}

// The private repository authentication credentials to use.
func (o TaskDefinitionContainerDefinitionOutput) RepositoryCredentials() TaskDefinitionRepositoryCredentialsPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *TaskDefinitionRepositoryCredentials {
		return v.RepositoryCredentials
	}).(TaskDefinitionRepositoryCredentialsPtrOutput)
}

// The type and amount of a resource to assign to a container. The only supported resource is a GPU.
func (o TaskDefinitionContainerDefinitionOutput) ResourceRequirements() TaskDefinitionResourceRequirementArrayOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) []TaskDefinitionResourceRequirement {
		return v.ResourceRequirements
	}).(TaskDefinitionResourceRequirementArrayOutput)
}

// The restart policy for a container. When you set up a restart policy, Amazon ECS can restart the container without needing to replace the task. For more information, see [Restart individual containers in Amazon ECS tasks with container restart policies](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/container-restart-policy.html) in the *Amazon Elastic Container Service Developer Guide*.
func (o TaskDefinitionContainerDefinitionOutput) RestartPolicy() TaskDefinitionRestartPolicyPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *TaskDefinitionRestartPolicy { return v.RestartPolicy }).(TaskDefinitionRestartPolicyPtrOutput)
}

// The secrets to pass to the container. For more information, see [Specifying Sensitive Data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the *Amazon Elastic Container Service Developer Guide*.
func (o TaskDefinitionContainerDefinitionOutput) Secrets() TaskDefinitionSecretArrayOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) []TaskDefinitionSecret { return v.Secrets }).(TaskDefinitionSecretArrayOutput)
}

// Time duration (in seconds) to wait before giving up on resolving dependencies for a container. For example, you specify two containers in a task definition with containerA having a dependency on containerB reaching a “COMPLETE“, “SUCCESS“, or “HEALTHY“ status. If a “startTimeout“ value is specified for containerB and it doesn't reach the desired status within that time then containerA gives up and not start. This results in the task transitioning to a “STOPPED“ state.
//
//	 When the ``ECS_CONTAINER_START_TIMEOUT`` container agent configuration variable is used, it's enforced independently from this start timeout value.
//	 For tasks using the Fargate launch type, the task or service requires the following platforms:
//	 +  Linux platform version ``1.3.0`` or later.
//	 +  Windows platform version ``1.0.0`` or later.
//
//	For tasks using the EC2 launch type, your container instances require at least version ``1.26.0`` of the container agent to use a container start timeout value. However, we recommend using the latest container agent version. For information about checking your agent version and updating to the latest version, see [Updating the Amazon ECS Container Agent](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html) in the *Amazon Elastic Container Service Developer Guide*. If you're using an Amazon ECS-optimized Linux AMI, your instance needs at least version ``1.26.0-1`` of the ``ecs-init`` package. If your container instances are launched from version ``20190301`` or later, then they contain the required versions of the container agent and ``ecs-init``. For more information, see [Amazon ECS-optimized Linux AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html) in the *Amazon Elastic Container Service Developer Guide*.
//	The valid values for Fargate are 2-120 seconds.
func (o TaskDefinitionContainerDefinitionOutput) StartTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *int { return v.StartTimeout }).(pulumi.IntPtrOutput)
}

// Time duration (in seconds) to wait before the container is forcefully killed if it doesn't exit normally on its own.
//
//	For tasks using the Fargate launch type, the task or service requires the following platforms:
//	 +  Linux platform version ``1.3.0`` or later.
//	 +  Windows platform version ``1.0.0`` or later.
//
//	For tasks that use the Fargate launch type, the max stop timeout value is 120 seconds and if the parameter is not specified, the default value of 30 seconds is used.
//	For tasks that use the EC2 launch type, if the ``stopTimeout`` parameter isn't specified, the value set for the Amazon ECS container agent configuration variable ``ECS_CONTAINER_STOP_TIMEOUT`` is used. If neither the ``stopTimeout`` parameter or the ``ECS_CONTAINER_STOP_TIMEOUT`` agent configuration variable are set, then the default values of 30 seconds for Linux containers and 30 seconds on Windows containers are used. Your container instances require at least version 1.26.0 of the container agent to use a container stop timeout value. However, we recommend using the latest container agent version. For information about checking your agent version and updating to the latest version, see [Updating the Amazon ECS Container Agent](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html) in the *Amazon Elastic Container Service Developer Guide*. If you're using an Amazon ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the ``ecs-init`` package. If your container instances are launched from version ``20190301`` or later, then they contain the required versions of the container agent and ``ecs-init``. For more information, see [Amazon ECS-optimized Linux AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html) in the *Amazon Elastic Container Service Developer Guide*.
//	The valid values for Fargate are 2-120 seconds.
func (o TaskDefinitionContainerDefinitionOutput) StopTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *int { return v.StopTimeout }).(pulumi.IntPtrOutput)
}

// A list of namespaced kernel parameters to set in the container. This parameter maps to “Sysctls“ in the docker container create command and the “--sysctl“ option to docker run. For example, you can configure “net.ipv4.tcp_keepalive_time“ setting to maintain longer lived connections.
func (o TaskDefinitionContainerDefinitionOutput) SystemControls() TaskDefinitionSystemControlArrayOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) []TaskDefinitionSystemControl { return v.SystemControls }).(TaskDefinitionSystemControlArrayOutput)
}

// A list of “ulimits“ to set in the container. This parameter maps to “Ulimits“ in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the “--ulimit“ option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/). Valid naming values are displayed in the [Ulimit](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_Ulimit.html) data type. This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: “sudo docker version --format '{{.Server.APIVersion}}'“
//
//	This parameter is not supported for Windows containers.
func (o TaskDefinitionContainerDefinitionOutput) Ulimits() TaskDefinitionUlimitArrayOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) []TaskDefinitionUlimit { return v.Ulimits }).(TaskDefinitionUlimitArrayOutput)
}

// The user to use inside the container. This parameter maps to “User“ in the docker container create command and the “--user“ option to docker run.
//
//	When running tasks using the ``host`` network mode, don't run containers using the root user (UID 0). We recommend using a non-root user for better security.
//	You can specify the ``user`` using the following formats. If specifying a UID or GID, you must specify it as a positive integer.
//	+   ``user``
//	+   ``user:group``
//	+   ``uid``
//	+   ``uid:gid``
//	+   ``user:gid``
//	+   ``uid:group``
//
//	This parameter is not supported for Windows containers.
func (o TaskDefinitionContainerDefinitionOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *string { return v.User }).(pulumi.StringPtrOutput)
}

// Specifies whether Amazon ECS will resolve the container image tag provided in the container definition to an image digest. By default, the value is “enabled“. If you set the value for a container as “disabled“, Amazon ECS will not resolve the provided container image tag to a digest and will use the original image URI specified in the container definition for deployment. For more information about container image resolution, see [Container image resolution](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-ecs.html#deployment-container-image-stability) in the *Amazon ECS Developer Guide*.
func (o TaskDefinitionContainerDefinitionOutput) VersionConsistency() TaskDefinitionContainerDefinitionVersionConsistencyPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *TaskDefinitionContainerDefinitionVersionConsistency {
		return v.VersionConsistency
	}).(TaskDefinitionContainerDefinitionVersionConsistencyPtrOutput)
}

// Data volumes to mount from another container. This parameter maps to “VolumesFrom“ in the docker container create command and the “--volumes-from“ option to docker run.
func (o TaskDefinitionContainerDefinitionOutput) VolumesFrom() TaskDefinitionVolumeFromArrayOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) []TaskDefinitionVolumeFrom { return v.VolumesFrom }).(TaskDefinitionVolumeFromArrayOutput)
}

// The working directory to run commands inside the container in. This parameter maps to “WorkingDir“ in the docker container create command and the “--workdir“ option to docker run.
func (o TaskDefinitionContainerDefinitionOutput) WorkingDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *string { return v.WorkingDirectory }).(pulumi.StringPtrOutput)
}

type TaskDefinitionContainerDefinitionArrayOutput struct{ *pulumi.OutputState }

func (TaskDefinitionContainerDefinitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionContainerDefinition)(nil)).Elem()
}

func (o TaskDefinitionContainerDefinitionArrayOutput) ToTaskDefinitionContainerDefinitionArrayOutput() TaskDefinitionContainerDefinitionArrayOutput {
	return o
}

func (o TaskDefinitionContainerDefinitionArrayOutput) ToTaskDefinitionContainerDefinitionArrayOutputWithContext(ctx context.Context) TaskDefinitionContainerDefinitionArrayOutput {
	return o
}

func (o TaskDefinitionContainerDefinitionArrayOutput) Index(i pulumi.IntInput) TaskDefinitionContainerDefinitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskDefinitionContainerDefinition {
		return vs[0].([]TaskDefinitionContainerDefinition)[vs[1].(int)]
	}).(TaskDefinitionContainerDefinitionOutput)
}

// The “ContainerDependency“ property specifies the dependencies defined for container startup and shutdown. A container can contain multiple dependencies. When a dependency is defined for container startup, for container shutdown it is reversed.
//
//	Your Amazon ECS container instances require at least version 1.26.0 of the container agent to enable container dependencies. However, we recommend using the latest container agent version. For information about checking your agent version and updating to the latest version, see [Updating the Amazon ECS Container Agent](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html) in the *Amazon Elastic Container Service Developer Guide*. If you are using an Amazon ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the ``ecs-init`` package. If your container instances are launched from version ``20190301`` or later, then they contain the required versions of the container agent and ``ecs-init``. For more information, see [Amazon ECS-optimized Linux AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html) in the *Amazon Elastic Container Service Developer Guide*.
//	 For tasks using the Fargate launch type, this parameter requires that the task or service uses platform version 1.3.0 or later.
type TaskDefinitionContainerDependency struct {
	// The dependency condition of the container. The following are the available conditions and their behavior:
	//   +  ``START`` - This condition emulates the behavior of links and volumes today. It validates that a dependent container is started before permitting other containers to start.
	//   +  ``COMPLETE`` - This condition validates that a dependent container runs to completion (exits) before permitting other containers to start. This can be useful for nonessential containers that run a script and then exit. This condition can't be set on an essential container.
	//   +  ``SUCCESS`` - This condition is the same as ``COMPLETE``, but it also requires that the container exits with a ``zero`` status. This condition can't be set on an essential container.
	//   +  ``HEALTHY`` - This condition validates that the dependent container passes its Docker health check before permitting other containers to start. This requires that the dependent container has health checks configured. This condition is confirmed only at task startup.
	Condition *string `pulumi:"condition"`
	// The name of a container.
	ContainerName *string `pulumi:"containerName"`
}

// TaskDefinitionContainerDependencyInput is an input type that accepts TaskDefinitionContainerDependencyArgs and TaskDefinitionContainerDependencyOutput values.
// You can construct a concrete instance of `TaskDefinitionContainerDependencyInput` via:
//
//	TaskDefinitionContainerDependencyArgs{...}
type TaskDefinitionContainerDependencyInput interface {
	pulumi.Input

	ToTaskDefinitionContainerDependencyOutput() TaskDefinitionContainerDependencyOutput
	ToTaskDefinitionContainerDependencyOutputWithContext(context.Context) TaskDefinitionContainerDependencyOutput
}

// The “ContainerDependency“ property specifies the dependencies defined for container startup and shutdown. A container can contain multiple dependencies. When a dependency is defined for container startup, for container shutdown it is reversed.
//
//	Your Amazon ECS container instances require at least version 1.26.0 of the container agent to enable container dependencies. However, we recommend using the latest container agent version. For information about checking your agent version and updating to the latest version, see [Updating the Amazon ECS Container Agent](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html) in the *Amazon Elastic Container Service Developer Guide*. If you are using an Amazon ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the ``ecs-init`` package. If your container instances are launched from version ``20190301`` or later, then they contain the required versions of the container agent and ``ecs-init``. For more information, see [Amazon ECS-optimized Linux AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html) in the *Amazon Elastic Container Service Developer Guide*.
//	 For tasks using the Fargate launch type, this parameter requires that the task or service uses platform version 1.3.0 or later.
type TaskDefinitionContainerDependencyArgs struct {
	// The dependency condition of the container. The following are the available conditions and their behavior:
	//   +  ``START`` - This condition emulates the behavior of links and volumes today. It validates that a dependent container is started before permitting other containers to start.
	//   +  ``COMPLETE`` - This condition validates that a dependent container runs to completion (exits) before permitting other containers to start. This can be useful for nonessential containers that run a script and then exit. This condition can't be set on an essential container.
	//   +  ``SUCCESS`` - This condition is the same as ``COMPLETE``, but it also requires that the container exits with a ``zero`` status. This condition can't be set on an essential container.
	//   +  ``HEALTHY`` - This condition validates that the dependent container passes its Docker health check before permitting other containers to start. This requires that the dependent container has health checks configured. This condition is confirmed only at task startup.
	Condition pulumi.StringPtrInput `pulumi:"condition"`
	// The name of a container.
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
}

func (TaskDefinitionContainerDependencyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionContainerDependency)(nil)).Elem()
}

func (i TaskDefinitionContainerDependencyArgs) ToTaskDefinitionContainerDependencyOutput() TaskDefinitionContainerDependencyOutput {
	return i.ToTaskDefinitionContainerDependencyOutputWithContext(context.Background())
}

func (i TaskDefinitionContainerDependencyArgs) ToTaskDefinitionContainerDependencyOutputWithContext(ctx context.Context) TaskDefinitionContainerDependencyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionContainerDependencyOutput)
}

// TaskDefinitionContainerDependencyArrayInput is an input type that accepts TaskDefinitionContainerDependencyArray and TaskDefinitionContainerDependencyArrayOutput values.
// You can construct a concrete instance of `TaskDefinitionContainerDependencyArrayInput` via:
//
//	TaskDefinitionContainerDependencyArray{ TaskDefinitionContainerDependencyArgs{...} }
type TaskDefinitionContainerDependencyArrayInput interface {
	pulumi.Input

	ToTaskDefinitionContainerDependencyArrayOutput() TaskDefinitionContainerDependencyArrayOutput
	ToTaskDefinitionContainerDependencyArrayOutputWithContext(context.Context) TaskDefinitionContainerDependencyArrayOutput
}

type TaskDefinitionContainerDependencyArray []TaskDefinitionContainerDependencyInput

func (TaskDefinitionContainerDependencyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionContainerDependency)(nil)).Elem()
}

func (i TaskDefinitionContainerDependencyArray) ToTaskDefinitionContainerDependencyArrayOutput() TaskDefinitionContainerDependencyArrayOutput {
	return i.ToTaskDefinitionContainerDependencyArrayOutputWithContext(context.Background())
}

func (i TaskDefinitionContainerDependencyArray) ToTaskDefinitionContainerDependencyArrayOutputWithContext(ctx context.Context) TaskDefinitionContainerDependencyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionContainerDependencyArrayOutput)
}

// The “ContainerDependency“ property specifies the dependencies defined for container startup and shutdown. A container can contain multiple dependencies. When a dependency is defined for container startup, for container shutdown it is reversed.
//
//	Your Amazon ECS container instances require at least version 1.26.0 of the container agent to enable container dependencies. However, we recommend using the latest container agent version. For information about checking your agent version and updating to the latest version, see [Updating the Amazon ECS Container Agent](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html) in the *Amazon Elastic Container Service Developer Guide*. If you are using an Amazon ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the ``ecs-init`` package. If your container instances are launched from version ``20190301`` or later, then they contain the required versions of the container agent and ``ecs-init``. For more information, see [Amazon ECS-optimized Linux AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html) in the *Amazon Elastic Container Service Developer Guide*.
//	 For tasks using the Fargate launch type, this parameter requires that the task or service uses platform version 1.3.0 or later.
type TaskDefinitionContainerDependencyOutput struct{ *pulumi.OutputState }

func (TaskDefinitionContainerDependencyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionContainerDependency)(nil)).Elem()
}

func (o TaskDefinitionContainerDependencyOutput) ToTaskDefinitionContainerDependencyOutput() TaskDefinitionContainerDependencyOutput {
	return o
}

func (o TaskDefinitionContainerDependencyOutput) ToTaskDefinitionContainerDependencyOutputWithContext(ctx context.Context) TaskDefinitionContainerDependencyOutput {
	return o
}

// The dependency condition of the container. The following are the available conditions and their behavior:
//   - “START“ - This condition emulates the behavior of links and volumes today. It validates that a dependent container is started before permitting other containers to start.
//   - “COMPLETE“ - This condition validates that a dependent container runs to completion (exits) before permitting other containers to start. This can be useful for nonessential containers that run a script and then exit. This condition can't be set on an essential container.
//   - “SUCCESS“ - This condition is the same as “COMPLETE“, but it also requires that the container exits with a “zero“ status. This condition can't be set on an essential container.
//   - “HEALTHY“ - This condition validates that the dependent container passes its Docker health check before permitting other containers to start. This requires that the dependent container has health checks configured. This condition is confirmed only at task startup.
func (o TaskDefinitionContainerDependencyOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDependency) *string { return v.Condition }).(pulumi.StringPtrOutput)
}

// The name of a container.
func (o TaskDefinitionContainerDependencyOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDependency) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

type TaskDefinitionContainerDependencyArrayOutput struct{ *pulumi.OutputState }

func (TaskDefinitionContainerDependencyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionContainerDependency)(nil)).Elem()
}

func (o TaskDefinitionContainerDependencyArrayOutput) ToTaskDefinitionContainerDependencyArrayOutput() TaskDefinitionContainerDependencyArrayOutput {
	return o
}

func (o TaskDefinitionContainerDependencyArrayOutput) ToTaskDefinitionContainerDependencyArrayOutputWithContext(ctx context.Context) TaskDefinitionContainerDependencyArrayOutput {
	return o
}

func (o TaskDefinitionContainerDependencyArrayOutput) Index(i pulumi.IntInput) TaskDefinitionContainerDependencyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskDefinitionContainerDependency {
		return vs[0].([]TaskDefinitionContainerDependency)[vs[1].(int)]
	}).(TaskDefinitionContainerDependencyOutput)
}

// The “Device“ property specifies an object representing a container instance host device.
type TaskDefinitionDevice struct {
	// The path inside the container at which to expose the host device.
	ContainerPath *string `pulumi:"containerPath"`
	// The path for the device on the host container instance.
	HostPath *string `pulumi:"hostPath"`
	// The explicit permissions to provide to the container for the device. By default, the container has permissions for ``read``, ``write``, and ``mknod`` for the device.
	Permissions []string `pulumi:"permissions"`
}

// TaskDefinitionDeviceInput is an input type that accepts TaskDefinitionDeviceArgs and TaskDefinitionDeviceOutput values.
// You can construct a concrete instance of `TaskDefinitionDeviceInput` via:
//
//	TaskDefinitionDeviceArgs{...}
type TaskDefinitionDeviceInput interface {
	pulumi.Input

	ToTaskDefinitionDeviceOutput() TaskDefinitionDeviceOutput
	ToTaskDefinitionDeviceOutputWithContext(context.Context) TaskDefinitionDeviceOutput
}

// The “Device“ property specifies an object representing a container instance host device.
type TaskDefinitionDeviceArgs struct {
	// The path inside the container at which to expose the host device.
	ContainerPath pulumi.StringPtrInput `pulumi:"containerPath"`
	// The path for the device on the host container instance.
	HostPath pulumi.StringPtrInput `pulumi:"hostPath"`
	// The explicit permissions to provide to the container for the device. By default, the container has permissions for ``read``, ``write``, and ``mknod`` for the device.
	Permissions pulumi.StringArrayInput `pulumi:"permissions"`
}

func (TaskDefinitionDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionDevice)(nil)).Elem()
}

func (i TaskDefinitionDeviceArgs) ToTaskDefinitionDeviceOutput() TaskDefinitionDeviceOutput {
	return i.ToTaskDefinitionDeviceOutputWithContext(context.Background())
}

func (i TaskDefinitionDeviceArgs) ToTaskDefinitionDeviceOutputWithContext(ctx context.Context) TaskDefinitionDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionDeviceOutput)
}

// TaskDefinitionDeviceArrayInput is an input type that accepts TaskDefinitionDeviceArray and TaskDefinitionDeviceArrayOutput values.
// You can construct a concrete instance of `TaskDefinitionDeviceArrayInput` via:
//
//	TaskDefinitionDeviceArray{ TaskDefinitionDeviceArgs{...} }
type TaskDefinitionDeviceArrayInput interface {
	pulumi.Input

	ToTaskDefinitionDeviceArrayOutput() TaskDefinitionDeviceArrayOutput
	ToTaskDefinitionDeviceArrayOutputWithContext(context.Context) TaskDefinitionDeviceArrayOutput
}

type TaskDefinitionDeviceArray []TaskDefinitionDeviceInput

func (TaskDefinitionDeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionDevice)(nil)).Elem()
}

func (i TaskDefinitionDeviceArray) ToTaskDefinitionDeviceArrayOutput() TaskDefinitionDeviceArrayOutput {
	return i.ToTaskDefinitionDeviceArrayOutputWithContext(context.Background())
}

func (i TaskDefinitionDeviceArray) ToTaskDefinitionDeviceArrayOutputWithContext(ctx context.Context) TaskDefinitionDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionDeviceArrayOutput)
}

// The “Device“ property specifies an object representing a container instance host device.
type TaskDefinitionDeviceOutput struct{ *pulumi.OutputState }

func (TaskDefinitionDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionDevice)(nil)).Elem()
}

func (o TaskDefinitionDeviceOutput) ToTaskDefinitionDeviceOutput() TaskDefinitionDeviceOutput {
	return o
}

func (o TaskDefinitionDeviceOutput) ToTaskDefinitionDeviceOutputWithContext(ctx context.Context) TaskDefinitionDeviceOutput {
	return o
}

// The path inside the container at which to expose the host device.
func (o TaskDefinitionDeviceOutput) ContainerPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionDevice) *string { return v.ContainerPath }).(pulumi.StringPtrOutput)
}

// The path for the device on the host container instance.
func (o TaskDefinitionDeviceOutput) HostPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionDevice) *string { return v.HostPath }).(pulumi.StringPtrOutput)
}

// The explicit permissions to provide to the container for the device. By default, the container has permissions for “read“, “write“, and “mknod“ for the device.
func (o TaskDefinitionDeviceOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TaskDefinitionDevice) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

type TaskDefinitionDeviceArrayOutput struct{ *pulumi.OutputState }

func (TaskDefinitionDeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionDevice)(nil)).Elem()
}

func (o TaskDefinitionDeviceArrayOutput) ToTaskDefinitionDeviceArrayOutput() TaskDefinitionDeviceArrayOutput {
	return o
}

func (o TaskDefinitionDeviceArrayOutput) ToTaskDefinitionDeviceArrayOutputWithContext(ctx context.Context) TaskDefinitionDeviceArrayOutput {
	return o
}

func (o TaskDefinitionDeviceArrayOutput) Index(i pulumi.IntInput) TaskDefinitionDeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskDefinitionDevice {
		return vs[0].([]TaskDefinitionDevice)[vs[1].(int)]
	}).(TaskDefinitionDeviceOutput)
}

// The “DockerVolumeConfiguration“ property specifies a Docker volume configuration and is used when you use Docker volumes. Docker volumes are only supported when you are using the EC2 launch type. Windows containers only support the use of the “local“ driver. To use bind mounts, specify a “host“ instead.
type TaskDefinitionDockerVolumeConfiguration struct {
	// If this value is ``true``, the Docker volume is created if it doesn't already exist.
	//   This field is only used if the ``scope`` is ``shared``.
	Autoprovision *bool `pulumi:"autoprovision"`
	// The Docker volume driver to use. The driver value must match the driver name provided by Docker because it is used for task placement. If the driver was installed using the Docker plugin CLI, use ``docker plugin ls`` to retrieve the driver name from your container instance. If the driver was installed using another method, use Docker plugin discovery to retrieve the driver name. This parameter maps to ``Driver`` in the docker container create command and the ``xxdriver`` option to docker volume create.
	Driver *string `pulumi:"driver"`
	// A map of Docker driver-specific options passed through. This parameter maps to ``DriverOpts`` in the docker create-volume command and the ``xxopt`` option to docker volume create.
	DriverOpts map[string]string `pulumi:"driverOpts"`
	// Custom metadata to add to your Docker volume. This parameter maps to ``Labels`` in the docker container create command and the ``xxlabel`` option to docker volume create.
	Labels map[string]string `pulumi:"labels"`
	// The scope for the Docker volume that determines its lifecycle. Docker volumes that are scoped to a ``task`` are automatically provisioned when the task starts and destroyed when the task stops. Docker volumes that are scoped as ``shared`` persist after the task stops.
	Scope *string `pulumi:"scope"`
}

// TaskDefinitionDockerVolumeConfigurationInput is an input type that accepts TaskDefinitionDockerVolumeConfigurationArgs and TaskDefinitionDockerVolumeConfigurationOutput values.
// You can construct a concrete instance of `TaskDefinitionDockerVolumeConfigurationInput` via:
//
//	TaskDefinitionDockerVolumeConfigurationArgs{...}
type TaskDefinitionDockerVolumeConfigurationInput interface {
	pulumi.Input

	ToTaskDefinitionDockerVolumeConfigurationOutput() TaskDefinitionDockerVolumeConfigurationOutput
	ToTaskDefinitionDockerVolumeConfigurationOutputWithContext(context.Context) TaskDefinitionDockerVolumeConfigurationOutput
}

// The “DockerVolumeConfiguration“ property specifies a Docker volume configuration and is used when you use Docker volumes. Docker volumes are only supported when you are using the EC2 launch type. Windows containers only support the use of the “local“ driver. To use bind mounts, specify a “host“ instead.
type TaskDefinitionDockerVolumeConfigurationArgs struct {
	// If this value is ``true``, the Docker volume is created if it doesn't already exist.
	//   This field is only used if the ``scope`` is ``shared``.
	Autoprovision pulumi.BoolPtrInput `pulumi:"autoprovision"`
	// The Docker volume driver to use. The driver value must match the driver name provided by Docker because it is used for task placement. If the driver was installed using the Docker plugin CLI, use ``docker plugin ls`` to retrieve the driver name from your container instance. If the driver was installed using another method, use Docker plugin discovery to retrieve the driver name. This parameter maps to ``Driver`` in the docker container create command and the ``xxdriver`` option to docker volume create.
	Driver pulumi.StringPtrInput `pulumi:"driver"`
	// A map of Docker driver-specific options passed through. This parameter maps to ``DriverOpts`` in the docker create-volume command and the ``xxopt`` option to docker volume create.
	DriverOpts pulumi.StringMapInput `pulumi:"driverOpts"`
	// Custom metadata to add to your Docker volume. This parameter maps to ``Labels`` in the docker container create command and the ``xxlabel`` option to docker volume create.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// The scope for the Docker volume that determines its lifecycle. Docker volumes that are scoped to a ``task`` are automatically provisioned when the task starts and destroyed when the task stops. Docker volumes that are scoped as ``shared`` persist after the task stops.
	Scope pulumi.StringPtrInput `pulumi:"scope"`
}

func (TaskDefinitionDockerVolumeConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionDockerVolumeConfiguration)(nil)).Elem()
}

func (i TaskDefinitionDockerVolumeConfigurationArgs) ToTaskDefinitionDockerVolumeConfigurationOutput() TaskDefinitionDockerVolumeConfigurationOutput {
	return i.ToTaskDefinitionDockerVolumeConfigurationOutputWithContext(context.Background())
}

func (i TaskDefinitionDockerVolumeConfigurationArgs) ToTaskDefinitionDockerVolumeConfigurationOutputWithContext(ctx context.Context) TaskDefinitionDockerVolumeConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionDockerVolumeConfigurationOutput)
}

func (i TaskDefinitionDockerVolumeConfigurationArgs) ToTaskDefinitionDockerVolumeConfigurationPtrOutput() TaskDefinitionDockerVolumeConfigurationPtrOutput {
	return i.ToTaskDefinitionDockerVolumeConfigurationPtrOutputWithContext(context.Background())
}

func (i TaskDefinitionDockerVolumeConfigurationArgs) ToTaskDefinitionDockerVolumeConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionDockerVolumeConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionDockerVolumeConfigurationOutput).ToTaskDefinitionDockerVolumeConfigurationPtrOutputWithContext(ctx)
}

// TaskDefinitionDockerVolumeConfigurationPtrInput is an input type that accepts TaskDefinitionDockerVolumeConfigurationArgs, TaskDefinitionDockerVolumeConfigurationPtr and TaskDefinitionDockerVolumeConfigurationPtrOutput values.
// You can construct a concrete instance of `TaskDefinitionDockerVolumeConfigurationPtrInput` via:
//
//	        TaskDefinitionDockerVolumeConfigurationArgs{...}
//
//	or:
//
//	        nil
type TaskDefinitionDockerVolumeConfigurationPtrInput interface {
	pulumi.Input

	ToTaskDefinitionDockerVolumeConfigurationPtrOutput() TaskDefinitionDockerVolumeConfigurationPtrOutput
	ToTaskDefinitionDockerVolumeConfigurationPtrOutputWithContext(context.Context) TaskDefinitionDockerVolumeConfigurationPtrOutput
}

type taskDefinitionDockerVolumeConfigurationPtrType TaskDefinitionDockerVolumeConfigurationArgs

func TaskDefinitionDockerVolumeConfigurationPtr(v *TaskDefinitionDockerVolumeConfigurationArgs) TaskDefinitionDockerVolumeConfigurationPtrInput {
	return (*taskDefinitionDockerVolumeConfigurationPtrType)(v)
}

func (*taskDefinitionDockerVolumeConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionDockerVolumeConfiguration)(nil)).Elem()
}

func (i *taskDefinitionDockerVolumeConfigurationPtrType) ToTaskDefinitionDockerVolumeConfigurationPtrOutput() TaskDefinitionDockerVolumeConfigurationPtrOutput {
	return i.ToTaskDefinitionDockerVolumeConfigurationPtrOutputWithContext(context.Background())
}

func (i *taskDefinitionDockerVolumeConfigurationPtrType) ToTaskDefinitionDockerVolumeConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionDockerVolumeConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionDockerVolumeConfigurationPtrOutput)
}

// The “DockerVolumeConfiguration“ property specifies a Docker volume configuration and is used when you use Docker volumes. Docker volumes are only supported when you are using the EC2 launch type. Windows containers only support the use of the “local“ driver. To use bind mounts, specify a “host“ instead.
type TaskDefinitionDockerVolumeConfigurationOutput struct{ *pulumi.OutputState }

func (TaskDefinitionDockerVolumeConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionDockerVolumeConfiguration)(nil)).Elem()
}

func (o TaskDefinitionDockerVolumeConfigurationOutput) ToTaskDefinitionDockerVolumeConfigurationOutput() TaskDefinitionDockerVolumeConfigurationOutput {
	return o
}

func (o TaskDefinitionDockerVolumeConfigurationOutput) ToTaskDefinitionDockerVolumeConfigurationOutputWithContext(ctx context.Context) TaskDefinitionDockerVolumeConfigurationOutput {
	return o
}

func (o TaskDefinitionDockerVolumeConfigurationOutput) ToTaskDefinitionDockerVolumeConfigurationPtrOutput() TaskDefinitionDockerVolumeConfigurationPtrOutput {
	return o.ToTaskDefinitionDockerVolumeConfigurationPtrOutputWithContext(context.Background())
}

func (o TaskDefinitionDockerVolumeConfigurationOutput) ToTaskDefinitionDockerVolumeConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionDockerVolumeConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskDefinitionDockerVolumeConfiguration) *TaskDefinitionDockerVolumeConfiguration {
		return &v
	}).(TaskDefinitionDockerVolumeConfigurationPtrOutput)
}

// If this value is “true“, the Docker volume is created if it doesn't already exist.
//
//	This field is only used if the ``scope`` is ``shared``.
func (o TaskDefinitionDockerVolumeConfigurationOutput) Autoprovision() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TaskDefinitionDockerVolumeConfiguration) *bool { return v.Autoprovision }).(pulumi.BoolPtrOutput)
}

// The Docker volume driver to use. The driver value must match the driver name provided by Docker because it is used for task placement. If the driver was installed using the Docker plugin CLI, use “docker plugin ls“ to retrieve the driver name from your container instance. If the driver was installed using another method, use Docker plugin discovery to retrieve the driver name. This parameter maps to “Driver“ in the docker container create command and the “xxdriver“ option to docker volume create.
func (o TaskDefinitionDockerVolumeConfigurationOutput) Driver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionDockerVolumeConfiguration) *string { return v.Driver }).(pulumi.StringPtrOutput)
}

// A map of Docker driver-specific options passed through. This parameter maps to “DriverOpts“ in the docker create-volume command and the “xxopt“ option to docker volume create.
func (o TaskDefinitionDockerVolumeConfigurationOutput) DriverOpts() pulumi.StringMapOutput {
	return o.ApplyT(func(v TaskDefinitionDockerVolumeConfiguration) map[string]string { return v.DriverOpts }).(pulumi.StringMapOutput)
}

// Custom metadata to add to your Docker volume. This parameter maps to “Labels“ in the docker container create command and the “xxlabel“ option to docker volume create.
func (o TaskDefinitionDockerVolumeConfigurationOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v TaskDefinitionDockerVolumeConfiguration) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The scope for the Docker volume that determines its lifecycle. Docker volumes that are scoped to a “task“ are automatically provisioned when the task starts and destroyed when the task stops. Docker volumes that are scoped as “shared“ persist after the task stops.
func (o TaskDefinitionDockerVolumeConfigurationOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionDockerVolumeConfiguration) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

type TaskDefinitionDockerVolumeConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TaskDefinitionDockerVolumeConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionDockerVolumeConfiguration)(nil)).Elem()
}

func (o TaskDefinitionDockerVolumeConfigurationPtrOutput) ToTaskDefinitionDockerVolumeConfigurationPtrOutput() TaskDefinitionDockerVolumeConfigurationPtrOutput {
	return o
}

func (o TaskDefinitionDockerVolumeConfigurationPtrOutput) ToTaskDefinitionDockerVolumeConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionDockerVolumeConfigurationPtrOutput {
	return o
}

func (o TaskDefinitionDockerVolumeConfigurationPtrOutput) Elem() TaskDefinitionDockerVolumeConfigurationOutput {
	return o.ApplyT(func(v *TaskDefinitionDockerVolumeConfiguration) TaskDefinitionDockerVolumeConfiguration {
		if v != nil {
			return *v
		}
		var ret TaskDefinitionDockerVolumeConfiguration
		return ret
	}).(TaskDefinitionDockerVolumeConfigurationOutput)
}

// If this value is “true“, the Docker volume is created if it doesn't already exist.
//
//	This field is only used if the ``scope`` is ``shared``.
func (o TaskDefinitionDockerVolumeConfigurationPtrOutput) Autoprovision() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionDockerVolumeConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.Autoprovision
	}).(pulumi.BoolPtrOutput)
}

// The Docker volume driver to use. The driver value must match the driver name provided by Docker because it is used for task placement. If the driver was installed using the Docker plugin CLI, use “docker plugin ls“ to retrieve the driver name from your container instance. If the driver was installed using another method, use Docker plugin discovery to retrieve the driver name. This parameter maps to “Driver“ in the docker container create command and the “xxdriver“ option to docker volume create.
func (o TaskDefinitionDockerVolumeConfigurationPtrOutput) Driver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionDockerVolumeConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Driver
	}).(pulumi.StringPtrOutput)
}

// A map of Docker driver-specific options passed through. This parameter maps to “DriverOpts“ in the docker create-volume command and the “xxopt“ option to docker volume create.
func (o TaskDefinitionDockerVolumeConfigurationPtrOutput) DriverOpts() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TaskDefinitionDockerVolumeConfiguration) map[string]string {
		if v == nil {
			return nil
		}
		return v.DriverOpts
	}).(pulumi.StringMapOutput)
}

// Custom metadata to add to your Docker volume. This parameter maps to “Labels“ in the docker container create command and the “xxlabel“ option to docker volume create.
func (o TaskDefinitionDockerVolumeConfigurationPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TaskDefinitionDockerVolumeConfiguration) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// The scope for the Docker volume that determines its lifecycle. Docker volumes that are scoped to a “task“ are automatically provisioned when the task starts and destroyed when the task stops. Docker volumes that are scoped as “shared“ persist after the task stops.
func (o TaskDefinitionDockerVolumeConfigurationPtrOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionDockerVolumeConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Scope
	}).(pulumi.StringPtrOutput)
}

// This parameter is specified when you're using an Amazon Elastic File System file system for task storage. For more information, see [Amazon EFS volumes](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/efs-volumes.html) in the *Amazon Elastic Container Service Developer Guide*.
type TaskDefinitionEfsVolumeConfiguration struct {
	// The authorization configuration details for the Amazon EFS file system.
	AuthorizationConfig *TaskDefinitionAuthorizationConfig `pulumi:"authorizationConfig"`
	// The Amazon EFS file system ID to use.
	FilesystemId string `pulumi:"filesystemId"`
	// The directory within the Amazon EFS file system to mount as the root directory inside the host. If this parameter is omitted, the root of the Amazon EFS volume will be used. Specifying ``/`` will have the same effect as omitting this parameter.
	//   If an EFS access point is specified in the ``authorizationConfig``, the root directory parameter must either be omitted or set to ``/`` which will enforce the path set on the EFS access point.
	RootDirectory *string `pulumi:"rootDirectory"`
	// Determines whether to use encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. Transit encryption must be turned on if Amazon EFS IAM authorization is used. If this parameter is omitted, the default value of ``DISABLED`` is used. For more information, see [Encrypting data in transit](https://docs.aws.amazon.com/efs/latest/ug/encryption-in-transit.html) in the *Amazon Elastic File System User Guide*.
	TransitEncryption *TaskDefinitionEfsVolumeConfigurationTransitEncryption `pulumi:"transitEncryption"`
	// The port to use when sending encrypted data between the Amazon ECS host and the Amazon EFS server. If you do not specify a transit encryption port, it will use the port selection strategy that the Amazon EFS mount helper uses. For more information, see [EFS mount helper](https://docs.aws.amazon.com/efs/latest/ug/efs-mount-helper.html) in the *Amazon Elastic File System User Guide*.
	TransitEncryptionPort *int `pulumi:"transitEncryptionPort"`
}

// TaskDefinitionEfsVolumeConfigurationInput is an input type that accepts TaskDefinitionEfsVolumeConfigurationArgs and TaskDefinitionEfsVolumeConfigurationOutput values.
// You can construct a concrete instance of `TaskDefinitionEfsVolumeConfigurationInput` via:
//
//	TaskDefinitionEfsVolumeConfigurationArgs{...}
type TaskDefinitionEfsVolumeConfigurationInput interface {
	pulumi.Input

	ToTaskDefinitionEfsVolumeConfigurationOutput() TaskDefinitionEfsVolumeConfigurationOutput
	ToTaskDefinitionEfsVolumeConfigurationOutputWithContext(context.Context) TaskDefinitionEfsVolumeConfigurationOutput
}

// This parameter is specified when you're using an Amazon Elastic File System file system for task storage. For more information, see [Amazon EFS volumes](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/efs-volumes.html) in the *Amazon Elastic Container Service Developer Guide*.
type TaskDefinitionEfsVolumeConfigurationArgs struct {
	// The authorization configuration details for the Amazon EFS file system.
	AuthorizationConfig TaskDefinitionAuthorizationConfigPtrInput `pulumi:"authorizationConfig"`
	// The Amazon EFS file system ID to use.
	FilesystemId pulumi.StringInput `pulumi:"filesystemId"`
	// The directory within the Amazon EFS file system to mount as the root directory inside the host. If this parameter is omitted, the root of the Amazon EFS volume will be used. Specifying ``/`` will have the same effect as omitting this parameter.
	//   If an EFS access point is specified in the ``authorizationConfig``, the root directory parameter must either be omitted or set to ``/`` which will enforce the path set on the EFS access point.
	RootDirectory pulumi.StringPtrInput `pulumi:"rootDirectory"`
	// Determines whether to use encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. Transit encryption must be turned on if Amazon EFS IAM authorization is used. If this parameter is omitted, the default value of ``DISABLED`` is used. For more information, see [Encrypting data in transit](https://docs.aws.amazon.com/efs/latest/ug/encryption-in-transit.html) in the *Amazon Elastic File System User Guide*.
	TransitEncryption TaskDefinitionEfsVolumeConfigurationTransitEncryptionPtrInput `pulumi:"transitEncryption"`
	// The port to use when sending encrypted data between the Amazon ECS host and the Amazon EFS server. If you do not specify a transit encryption port, it will use the port selection strategy that the Amazon EFS mount helper uses. For more information, see [EFS mount helper](https://docs.aws.amazon.com/efs/latest/ug/efs-mount-helper.html) in the *Amazon Elastic File System User Guide*.
	TransitEncryptionPort pulumi.IntPtrInput `pulumi:"transitEncryptionPort"`
}

func (TaskDefinitionEfsVolumeConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionEfsVolumeConfiguration)(nil)).Elem()
}

func (i TaskDefinitionEfsVolumeConfigurationArgs) ToTaskDefinitionEfsVolumeConfigurationOutput() TaskDefinitionEfsVolumeConfigurationOutput {
	return i.ToTaskDefinitionEfsVolumeConfigurationOutputWithContext(context.Background())
}

func (i TaskDefinitionEfsVolumeConfigurationArgs) ToTaskDefinitionEfsVolumeConfigurationOutputWithContext(ctx context.Context) TaskDefinitionEfsVolumeConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionEfsVolumeConfigurationOutput)
}

func (i TaskDefinitionEfsVolumeConfigurationArgs) ToTaskDefinitionEfsVolumeConfigurationPtrOutput() TaskDefinitionEfsVolumeConfigurationPtrOutput {
	return i.ToTaskDefinitionEfsVolumeConfigurationPtrOutputWithContext(context.Background())
}

func (i TaskDefinitionEfsVolumeConfigurationArgs) ToTaskDefinitionEfsVolumeConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionEfsVolumeConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionEfsVolumeConfigurationOutput).ToTaskDefinitionEfsVolumeConfigurationPtrOutputWithContext(ctx)
}

// TaskDefinitionEfsVolumeConfigurationPtrInput is an input type that accepts TaskDefinitionEfsVolumeConfigurationArgs, TaskDefinitionEfsVolumeConfigurationPtr and TaskDefinitionEfsVolumeConfigurationPtrOutput values.
// You can construct a concrete instance of `TaskDefinitionEfsVolumeConfigurationPtrInput` via:
//
//	        TaskDefinitionEfsVolumeConfigurationArgs{...}
//
//	or:
//
//	        nil
type TaskDefinitionEfsVolumeConfigurationPtrInput interface {
	pulumi.Input

	ToTaskDefinitionEfsVolumeConfigurationPtrOutput() TaskDefinitionEfsVolumeConfigurationPtrOutput
	ToTaskDefinitionEfsVolumeConfigurationPtrOutputWithContext(context.Context) TaskDefinitionEfsVolumeConfigurationPtrOutput
}

type taskDefinitionEfsVolumeConfigurationPtrType TaskDefinitionEfsVolumeConfigurationArgs

func TaskDefinitionEfsVolumeConfigurationPtr(v *TaskDefinitionEfsVolumeConfigurationArgs) TaskDefinitionEfsVolumeConfigurationPtrInput {
	return (*taskDefinitionEfsVolumeConfigurationPtrType)(v)
}

func (*taskDefinitionEfsVolumeConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionEfsVolumeConfiguration)(nil)).Elem()
}

func (i *taskDefinitionEfsVolumeConfigurationPtrType) ToTaskDefinitionEfsVolumeConfigurationPtrOutput() TaskDefinitionEfsVolumeConfigurationPtrOutput {
	return i.ToTaskDefinitionEfsVolumeConfigurationPtrOutputWithContext(context.Background())
}

func (i *taskDefinitionEfsVolumeConfigurationPtrType) ToTaskDefinitionEfsVolumeConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionEfsVolumeConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionEfsVolumeConfigurationPtrOutput)
}

// This parameter is specified when you're using an Amazon Elastic File System file system for task storage. For more information, see [Amazon EFS volumes](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/efs-volumes.html) in the *Amazon Elastic Container Service Developer Guide*.
type TaskDefinitionEfsVolumeConfigurationOutput struct{ *pulumi.OutputState }

func (TaskDefinitionEfsVolumeConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionEfsVolumeConfiguration)(nil)).Elem()
}

func (o TaskDefinitionEfsVolumeConfigurationOutput) ToTaskDefinitionEfsVolumeConfigurationOutput() TaskDefinitionEfsVolumeConfigurationOutput {
	return o
}

func (o TaskDefinitionEfsVolumeConfigurationOutput) ToTaskDefinitionEfsVolumeConfigurationOutputWithContext(ctx context.Context) TaskDefinitionEfsVolumeConfigurationOutput {
	return o
}

func (o TaskDefinitionEfsVolumeConfigurationOutput) ToTaskDefinitionEfsVolumeConfigurationPtrOutput() TaskDefinitionEfsVolumeConfigurationPtrOutput {
	return o.ToTaskDefinitionEfsVolumeConfigurationPtrOutputWithContext(context.Background())
}

func (o TaskDefinitionEfsVolumeConfigurationOutput) ToTaskDefinitionEfsVolumeConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionEfsVolumeConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskDefinitionEfsVolumeConfiguration) *TaskDefinitionEfsVolumeConfiguration {
		return &v
	}).(TaskDefinitionEfsVolumeConfigurationPtrOutput)
}

// The authorization configuration details for the Amazon EFS file system.
func (o TaskDefinitionEfsVolumeConfigurationOutput) AuthorizationConfig() TaskDefinitionAuthorizationConfigPtrOutput {
	return o.ApplyT(func(v TaskDefinitionEfsVolumeConfiguration) *TaskDefinitionAuthorizationConfig {
		return v.AuthorizationConfig
	}).(TaskDefinitionAuthorizationConfigPtrOutput)
}

// The Amazon EFS file system ID to use.
func (o TaskDefinitionEfsVolumeConfigurationOutput) FilesystemId() pulumi.StringOutput {
	return o.ApplyT(func(v TaskDefinitionEfsVolumeConfiguration) string { return v.FilesystemId }).(pulumi.StringOutput)
}

// The directory within the Amazon EFS file system to mount as the root directory inside the host. If this parameter is omitted, the root of the Amazon EFS volume will be used. Specifying “/“ will have the same effect as omitting this parameter.
//
//	If an EFS access point is specified in the ``authorizationConfig``, the root directory parameter must either be omitted or set to ``/`` which will enforce the path set on the EFS access point.
func (o TaskDefinitionEfsVolumeConfigurationOutput) RootDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionEfsVolumeConfiguration) *string { return v.RootDirectory }).(pulumi.StringPtrOutput)
}

// Determines whether to use encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. Transit encryption must be turned on if Amazon EFS IAM authorization is used. If this parameter is omitted, the default value of “DISABLED“ is used. For more information, see [Encrypting data in transit](https://docs.aws.amazon.com/efs/latest/ug/encryption-in-transit.html) in the *Amazon Elastic File System User Guide*.
func (o TaskDefinitionEfsVolumeConfigurationOutput) TransitEncryption() TaskDefinitionEfsVolumeConfigurationTransitEncryptionPtrOutput {
	return o.ApplyT(func(v TaskDefinitionEfsVolumeConfiguration) *TaskDefinitionEfsVolumeConfigurationTransitEncryption {
		return v.TransitEncryption
	}).(TaskDefinitionEfsVolumeConfigurationTransitEncryptionPtrOutput)
}

// The port to use when sending encrypted data between the Amazon ECS host and the Amazon EFS server. If you do not specify a transit encryption port, it will use the port selection strategy that the Amazon EFS mount helper uses. For more information, see [EFS mount helper](https://docs.aws.amazon.com/efs/latest/ug/efs-mount-helper.html) in the *Amazon Elastic File System User Guide*.
func (o TaskDefinitionEfsVolumeConfigurationOutput) TransitEncryptionPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskDefinitionEfsVolumeConfiguration) *int { return v.TransitEncryptionPort }).(pulumi.IntPtrOutput)
}

type TaskDefinitionEfsVolumeConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TaskDefinitionEfsVolumeConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionEfsVolumeConfiguration)(nil)).Elem()
}

func (o TaskDefinitionEfsVolumeConfigurationPtrOutput) ToTaskDefinitionEfsVolumeConfigurationPtrOutput() TaskDefinitionEfsVolumeConfigurationPtrOutput {
	return o
}

func (o TaskDefinitionEfsVolumeConfigurationPtrOutput) ToTaskDefinitionEfsVolumeConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionEfsVolumeConfigurationPtrOutput {
	return o
}

func (o TaskDefinitionEfsVolumeConfigurationPtrOutput) Elem() TaskDefinitionEfsVolumeConfigurationOutput {
	return o.ApplyT(func(v *TaskDefinitionEfsVolumeConfiguration) TaskDefinitionEfsVolumeConfiguration {
		if v != nil {
			return *v
		}
		var ret TaskDefinitionEfsVolumeConfiguration
		return ret
	}).(TaskDefinitionEfsVolumeConfigurationOutput)
}

// The authorization configuration details for the Amazon EFS file system.
func (o TaskDefinitionEfsVolumeConfigurationPtrOutput) AuthorizationConfig() TaskDefinitionAuthorizationConfigPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionEfsVolumeConfiguration) *TaskDefinitionAuthorizationConfig {
		if v == nil {
			return nil
		}
		return v.AuthorizationConfig
	}).(TaskDefinitionAuthorizationConfigPtrOutput)
}

// The Amazon EFS file system ID to use.
func (o TaskDefinitionEfsVolumeConfigurationPtrOutput) FilesystemId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionEfsVolumeConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.FilesystemId
	}).(pulumi.StringPtrOutput)
}

// The directory within the Amazon EFS file system to mount as the root directory inside the host. If this parameter is omitted, the root of the Amazon EFS volume will be used. Specifying “/“ will have the same effect as omitting this parameter.
//
//	If an EFS access point is specified in the ``authorizationConfig``, the root directory parameter must either be omitted or set to ``/`` which will enforce the path set on the EFS access point.
func (o TaskDefinitionEfsVolumeConfigurationPtrOutput) RootDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionEfsVolumeConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.RootDirectory
	}).(pulumi.StringPtrOutput)
}

// Determines whether to use encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. Transit encryption must be turned on if Amazon EFS IAM authorization is used. If this parameter is omitted, the default value of “DISABLED“ is used. For more information, see [Encrypting data in transit](https://docs.aws.amazon.com/efs/latest/ug/encryption-in-transit.html) in the *Amazon Elastic File System User Guide*.
func (o TaskDefinitionEfsVolumeConfigurationPtrOutput) TransitEncryption() TaskDefinitionEfsVolumeConfigurationTransitEncryptionPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionEfsVolumeConfiguration) *TaskDefinitionEfsVolumeConfigurationTransitEncryption {
		if v == nil {
			return nil
		}
		return v.TransitEncryption
	}).(TaskDefinitionEfsVolumeConfigurationTransitEncryptionPtrOutput)
}

// The port to use when sending encrypted data between the Amazon ECS host and the Amazon EFS server. If you do not specify a transit encryption port, it will use the port selection strategy that the Amazon EFS mount helper uses. For more information, see [EFS mount helper](https://docs.aws.amazon.com/efs/latest/ug/efs-mount-helper.html) in the *Amazon Elastic File System User Guide*.
func (o TaskDefinitionEfsVolumeConfigurationPtrOutput) TransitEncryptionPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionEfsVolumeConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.TransitEncryptionPort
	}).(pulumi.IntPtrOutput)
}

// A list of files containing the environment variables to pass to a container. You can specify up to ten environment files. The file must have a “.env“ file extension. Each line in an environment file should contain an environment variable in “VARIABLE=VALUE“ format. Lines beginning with “#“ are treated as comments and are ignored.
//
//	If there are environment variables specified using the ``environment`` parameter in a container definition, they take precedence over the variables contained within an environment file. If multiple environment files are specified that contain the same variable, they're processed from the top down. We recommend that you use unique variable names. For more information, see [Use a file to pass environment variables to a container](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/use-environment-file.html) in the *Amazon Elastic Container Service Developer Guide*.
//	Environment variable files are objects in Amazon S3 and all Amazon S3 security considerations apply.
//	You must use the following platforms for the Fargate launch type:
//	 +  Linux platform version ``1.4.0`` or later.
//	 +  Windows platform version ``1.0.0`` or later.
//
//	Consider the following when using the Fargate launch type:
//	 +  The file is handled like a native Docker env-file.
//	 +  There is no support for shell escape handling.
//	 +  The container entry point interperts the ``VARIABLE`` values.
type TaskDefinitionEnvironmentFile struct {
	// The file type to use. Environment files are objects in Amazon S3. The only supported value is ``s3``.
	Type *string `pulumi:"type"`
	// The Amazon Resource Name (ARN) of the Amazon S3 object containing the environment variable file.
	Value *string `pulumi:"value"`
}

// TaskDefinitionEnvironmentFileInput is an input type that accepts TaskDefinitionEnvironmentFileArgs and TaskDefinitionEnvironmentFileOutput values.
// You can construct a concrete instance of `TaskDefinitionEnvironmentFileInput` via:
//
//	TaskDefinitionEnvironmentFileArgs{...}
type TaskDefinitionEnvironmentFileInput interface {
	pulumi.Input

	ToTaskDefinitionEnvironmentFileOutput() TaskDefinitionEnvironmentFileOutput
	ToTaskDefinitionEnvironmentFileOutputWithContext(context.Context) TaskDefinitionEnvironmentFileOutput
}

// A list of files containing the environment variables to pass to a container. You can specify up to ten environment files. The file must have a “.env“ file extension. Each line in an environment file should contain an environment variable in “VARIABLE=VALUE“ format. Lines beginning with “#“ are treated as comments and are ignored.
//
//	If there are environment variables specified using the ``environment`` parameter in a container definition, they take precedence over the variables contained within an environment file. If multiple environment files are specified that contain the same variable, they're processed from the top down. We recommend that you use unique variable names. For more information, see [Use a file to pass environment variables to a container](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/use-environment-file.html) in the *Amazon Elastic Container Service Developer Guide*.
//	Environment variable files are objects in Amazon S3 and all Amazon S3 security considerations apply.
//	You must use the following platforms for the Fargate launch type:
//	 +  Linux platform version ``1.4.0`` or later.
//	 +  Windows platform version ``1.0.0`` or later.
//
//	Consider the following when using the Fargate launch type:
//	 +  The file is handled like a native Docker env-file.
//	 +  There is no support for shell escape handling.
//	 +  The container entry point interperts the ``VARIABLE`` values.
type TaskDefinitionEnvironmentFileArgs struct {
	// The file type to use. Environment files are objects in Amazon S3. The only supported value is ``s3``.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// The Amazon Resource Name (ARN) of the Amazon S3 object containing the environment variable file.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (TaskDefinitionEnvironmentFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionEnvironmentFile)(nil)).Elem()
}

func (i TaskDefinitionEnvironmentFileArgs) ToTaskDefinitionEnvironmentFileOutput() TaskDefinitionEnvironmentFileOutput {
	return i.ToTaskDefinitionEnvironmentFileOutputWithContext(context.Background())
}

func (i TaskDefinitionEnvironmentFileArgs) ToTaskDefinitionEnvironmentFileOutputWithContext(ctx context.Context) TaskDefinitionEnvironmentFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionEnvironmentFileOutput)
}

// TaskDefinitionEnvironmentFileArrayInput is an input type that accepts TaskDefinitionEnvironmentFileArray and TaskDefinitionEnvironmentFileArrayOutput values.
// You can construct a concrete instance of `TaskDefinitionEnvironmentFileArrayInput` via:
//
//	TaskDefinitionEnvironmentFileArray{ TaskDefinitionEnvironmentFileArgs{...} }
type TaskDefinitionEnvironmentFileArrayInput interface {
	pulumi.Input

	ToTaskDefinitionEnvironmentFileArrayOutput() TaskDefinitionEnvironmentFileArrayOutput
	ToTaskDefinitionEnvironmentFileArrayOutputWithContext(context.Context) TaskDefinitionEnvironmentFileArrayOutput
}

type TaskDefinitionEnvironmentFileArray []TaskDefinitionEnvironmentFileInput

func (TaskDefinitionEnvironmentFileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionEnvironmentFile)(nil)).Elem()
}

func (i TaskDefinitionEnvironmentFileArray) ToTaskDefinitionEnvironmentFileArrayOutput() TaskDefinitionEnvironmentFileArrayOutput {
	return i.ToTaskDefinitionEnvironmentFileArrayOutputWithContext(context.Background())
}

func (i TaskDefinitionEnvironmentFileArray) ToTaskDefinitionEnvironmentFileArrayOutputWithContext(ctx context.Context) TaskDefinitionEnvironmentFileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionEnvironmentFileArrayOutput)
}

// A list of files containing the environment variables to pass to a container. You can specify up to ten environment files. The file must have a “.env“ file extension. Each line in an environment file should contain an environment variable in “VARIABLE=VALUE“ format. Lines beginning with “#“ are treated as comments and are ignored.
//
//	If there are environment variables specified using the ``environment`` parameter in a container definition, they take precedence over the variables contained within an environment file. If multiple environment files are specified that contain the same variable, they're processed from the top down. We recommend that you use unique variable names. For more information, see [Use a file to pass environment variables to a container](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/use-environment-file.html) in the *Amazon Elastic Container Service Developer Guide*.
//	Environment variable files are objects in Amazon S3 and all Amazon S3 security considerations apply.
//	You must use the following platforms for the Fargate launch type:
//	 +  Linux platform version ``1.4.0`` or later.
//	 +  Windows platform version ``1.0.0`` or later.
//
//	Consider the following when using the Fargate launch type:
//	 +  The file is handled like a native Docker env-file.
//	 +  There is no support for shell escape handling.
//	 +  The container entry point interperts the ``VARIABLE`` values.
type TaskDefinitionEnvironmentFileOutput struct{ *pulumi.OutputState }

func (TaskDefinitionEnvironmentFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionEnvironmentFile)(nil)).Elem()
}

func (o TaskDefinitionEnvironmentFileOutput) ToTaskDefinitionEnvironmentFileOutput() TaskDefinitionEnvironmentFileOutput {
	return o
}

func (o TaskDefinitionEnvironmentFileOutput) ToTaskDefinitionEnvironmentFileOutputWithContext(ctx context.Context) TaskDefinitionEnvironmentFileOutput {
	return o
}

// The file type to use. Environment files are objects in Amazon S3. The only supported value is “s3“.
func (o TaskDefinitionEnvironmentFileOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionEnvironmentFile) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of the Amazon S3 object containing the environment variable file.
func (o TaskDefinitionEnvironmentFileOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionEnvironmentFile) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type TaskDefinitionEnvironmentFileArrayOutput struct{ *pulumi.OutputState }

func (TaskDefinitionEnvironmentFileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionEnvironmentFile)(nil)).Elem()
}

func (o TaskDefinitionEnvironmentFileArrayOutput) ToTaskDefinitionEnvironmentFileArrayOutput() TaskDefinitionEnvironmentFileArrayOutput {
	return o
}

func (o TaskDefinitionEnvironmentFileArrayOutput) ToTaskDefinitionEnvironmentFileArrayOutputWithContext(ctx context.Context) TaskDefinitionEnvironmentFileArrayOutput {
	return o
}

func (o TaskDefinitionEnvironmentFileArrayOutput) Index(i pulumi.IntInput) TaskDefinitionEnvironmentFileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskDefinitionEnvironmentFile {
		return vs[0].([]TaskDefinitionEnvironmentFile)[vs[1].(int)]
	}).(TaskDefinitionEnvironmentFileOutput)
}

// The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on FARGATElong. For more information, see [Using data volumes in tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_data_volumes.html) in the *Amazon ECS Developer Guide;*.
//
//	For tasks using the Fargate launch type, the task requires the following platforms:
//	+  Linux platform version ``1.4.0`` or later.
//	+  Windows platform version ``1.0.0`` or later.
type TaskDefinitionEphemeralStorage struct {
	// The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported value is ``21`` GiB and the maximum supported value is ``200`` GiB.
	SizeInGiB *int `pulumi:"sizeInGiB"`
}

// TaskDefinitionEphemeralStorageInput is an input type that accepts TaskDefinitionEphemeralStorageArgs and TaskDefinitionEphemeralStorageOutput values.
// You can construct a concrete instance of `TaskDefinitionEphemeralStorageInput` via:
//
//	TaskDefinitionEphemeralStorageArgs{...}
type TaskDefinitionEphemeralStorageInput interface {
	pulumi.Input

	ToTaskDefinitionEphemeralStorageOutput() TaskDefinitionEphemeralStorageOutput
	ToTaskDefinitionEphemeralStorageOutputWithContext(context.Context) TaskDefinitionEphemeralStorageOutput
}

// The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on FARGATElong. For more information, see [Using data volumes in tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_data_volumes.html) in the *Amazon ECS Developer Guide;*.
//
//	For tasks using the Fargate launch type, the task requires the following platforms:
//	+  Linux platform version ``1.4.0`` or later.
//	+  Windows platform version ``1.0.0`` or later.
type TaskDefinitionEphemeralStorageArgs struct {
	// The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported value is ``21`` GiB and the maximum supported value is ``200`` GiB.
	SizeInGiB pulumi.IntPtrInput `pulumi:"sizeInGiB"`
}

func (TaskDefinitionEphemeralStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionEphemeralStorage)(nil)).Elem()
}

func (i TaskDefinitionEphemeralStorageArgs) ToTaskDefinitionEphemeralStorageOutput() TaskDefinitionEphemeralStorageOutput {
	return i.ToTaskDefinitionEphemeralStorageOutputWithContext(context.Background())
}

func (i TaskDefinitionEphemeralStorageArgs) ToTaskDefinitionEphemeralStorageOutputWithContext(ctx context.Context) TaskDefinitionEphemeralStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionEphemeralStorageOutput)
}

func (i TaskDefinitionEphemeralStorageArgs) ToTaskDefinitionEphemeralStoragePtrOutput() TaskDefinitionEphemeralStoragePtrOutput {
	return i.ToTaskDefinitionEphemeralStoragePtrOutputWithContext(context.Background())
}

func (i TaskDefinitionEphemeralStorageArgs) ToTaskDefinitionEphemeralStoragePtrOutputWithContext(ctx context.Context) TaskDefinitionEphemeralStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionEphemeralStorageOutput).ToTaskDefinitionEphemeralStoragePtrOutputWithContext(ctx)
}

// TaskDefinitionEphemeralStoragePtrInput is an input type that accepts TaskDefinitionEphemeralStorageArgs, TaskDefinitionEphemeralStoragePtr and TaskDefinitionEphemeralStoragePtrOutput values.
// You can construct a concrete instance of `TaskDefinitionEphemeralStoragePtrInput` via:
//
//	        TaskDefinitionEphemeralStorageArgs{...}
//
//	or:
//
//	        nil
type TaskDefinitionEphemeralStoragePtrInput interface {
	pulumi.Input

	ToTaskDefinitionEphemeralStoragePtrOutput() TaskDefinitionEphemeralStoragePtrOutput
	ToTaskDefinitionEphemeralStoragePtrOutputWithContext(context.Context) TaskDefinitionEphemeralStoragePtrOutput
}

type taskDefinitionEphemeralStoragePtrType TaskDefinitionEphemeralStorageArgs

func TaskDefinitionEphemeralStoragePtr(v *TaskDefinitionEphemeralStorageArgs) TaskDefinitionEphemeralStoragePtrInput {
	return (*taskDefinitionEphemeralStoragePtrType)(v)
}

func (*taskDefinitionEphemeralStoragePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionEphemeralStorage)(nil)).Elem()
}

func (i *taskDefinitionEphemeralStoragePtrType) ToTaskDefinitionEphemeralStoragePtrOutput() TaskDefinitionEphemeralStoragePtrOutput {
	return i.ToTaskDefinitionEphemeralStoragePtrOutputWithContext(context.Background())
}

func (i *taskDefinitionEphemeralStoragePtrType) ToTaskDefinitionEphemeralStoragePtrOutputWithContext(ctx context.Context) TaskDefinitionEphemeralStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionEphemeralStoragePtrOutput)
}

// The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on FARGATElong. For more information, see [Using data volumes in tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_data_volumes.html) in the *Amazon ECS Developer Guide;*.
//
//	For tasks using the Fargate launch type, the task requires the following platforms:
//	+  Linux platform version ``1.4.0`` or later.
//	+  Windows platform version ``1.0.0`` or later.
type TaskDefinitionEphemeralStorageOutput struct{ *pulumi.OutputState }

func (TaskDefinitionEphemeralStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionEphemeralStorage)(nil)).Elem()
}

func (o TaskDefinitionEphemeralStorageOutput) ToTaskDefinitionEphemeralStorageOutput() TaskDefinitionEphemeralStorageOutput {
	return o
}

func (o TaskDefinitionEphemeralStorageOutput) ToTaskDefinitionEphemeralStorageOutputWithContext(ctx context.Context) TaskDefinitionEphemeralStorageOutput {
	return o
}

func (o TaskDefinitionEphemeralStorageOutput) ToTaskDefinitionEphemeralStoragePtrOutput() TaskDefinitionEphemeralStoragePtrOutput {
	return o.ToTaskDefinitionEphemeralStoragePtrOutputWithContext(context.Background())
}

func (o TaskDefinitionEphemeralStorageOutput) ToTaskDefinitionEphemeralStoragePtrOutputWithContext(ctx context.Context) TaskDefinitionEphemeralStoragePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskDefinitionEphemeralStorage) *TaskDefinitionEphemeralStorage {
		return &v
	}).(TaskDefinitionEphemeralStoragePtrOutput)
}

// The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported value is “21“ GiB and the maximum supported value is “200“ GiB.
func (o TaskDefinitionEphemeralStorageOutput) SizeInGiB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskDefinitionEphemeralStorage) *int { return v.SizeInGiB }).(pulumi.IntPtrOutput)
}

type TaskDefinitionEphemeralStoragePtrOutput struct{ *pulumi.OutputState }

func (TaskDefinitionEphemeralStoragePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionEphemeralStorage)(nil)).Elem()
}

func (o TaskDefinitionEphemeralStoragePtrOutput) ToTaskDefinitionEphemeralStoragePtrOutput() TaskDefinitionEphemeralStoragePtrOutput {
	return o
}

func (o TaskDefinitionEphemeralStoragePtrOutput) ToTaskDefinitionEphemeralStoragePtrOutputWithContext(ctx context.Context) TaskDefinitionEphemeralStoragePtrOutput {
	return o
}

func (o TaskDefinitionEphemeralStoragePtrOutput) Elem() TaskDefinitionEphemeralStorageOutput {
	return o.ApplyT(func(v *TaskDefinitionEphemeralStorage) TaskDefinitionEphemeralStorage {
		if v != nil {
			return *v
		}
		var ret TaskDefinitionEphemeralStorage
		return ret
	}).(TaskDefinitionEphemeralStorageOutput)
}

// The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported value is “21“ GiB and the maximum supported value is “200“ GiB.
func (o TaskDefinitionEphemeralStoragePtrOutput) SizeInGiB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionEphemeralStorage) *int {
		if v == nil {
			return nil
		}
		return v.SizeInGiB
	}).(pulumi.IntPtrOutput)
}

// The authorization configuration details for Amazon FSx for Windows File Server file system. See [FSxWindowsFileServerVolumeConfiguration](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_FSxWindowsFileServerVolumeConfiguration.html) in the *Amazon ECS API Reference*.
//
//	For more information and the input format, see [Amazon FSx for Windows File Server Volumes](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/wfsx-volumes.html) in the *Amazon Elastic Container Service Developer Guide*.
type TaskDefinitionFSxAuthorizationConfig struct {
	// The authorization credential option to use. The authorization credential options can be provided using either the Amazon Resource Name (ARN) of an ASMlong secret or SSM Parameter Store parameter. The ARN refers to the stored credentials.
	CredentialsParameter string `pulumi:"credentialsParameter"`
	// A fully qualified domain name hosted by an [](https://docs.aws.amazon.com/directoryservice/latest/admin-guide/directory_microsoft_ad.html) Managed Microsoft AD (Active Directory) or self-hosted AD on Amazon EC2.
	Domain string `pulumi:"domain"`
}

// TaskDefinitionFSxAuthorizationConfigInput is an input type that accepts TaskDefinitionFSxAuthorizationConfigArgs and TaskDefinitionFSxAuthorizationConfigOutput values.
// You can construct a concrete instance of `TaskDefinitionFSxAuthorizationConfigInput` via:
//
//	TaskDefinitionFSxAuthorizationConfigArgs{...}
type TaskDefinitionFSxAuthorizationConfigInput interface {
	pulumi.Input

	ToTaskDefinitionFSxAuthorizationConfigOutput() TaskDefinitionFSxAuthorizationConfigOutput
	ToTaskDefinitionFSxAuthorizationConfigOutputWithContext(context.Context) TaskDefinitionFSxAuthorizationConfigOutput
}

// The authorization configuration details for Amazon FSx for Windows File Server file system. See [FSxWindowsFileServerVolumeConfiguration](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_FSxWindowsFileServerVolumeConfiguration.html) in the *Amazon ECS API Reference*.
//
//	For more information and the input format, see [Amazon FSx for Windows File Server Volumes](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/wfsx-volumes.html) in the *Amazon Elastic Container Service Developer Guide*.
type TaskDefinitionFSxAuthorizationConfigArgs struct {
	// The authorization credential option to use. The authorization credential options can be provided using either the Amazon Resource Name (ARN) of an ASMlong secret or SSM Parameter Store parameter. The ARN refers to the stored credentials.
	CredentialsParameter pulumi.StringInput `pulumi:"credentialsParameter"`
	// A fully qualified domain name hosted by an [](https://docs.aws.amazon.com/directoryservice/latest/admin-guide/directory_microsoft_ad.html) Managed Microsoft AD (Active Directory) or self-hosted AD on Amazon EC2.
	Domain pulumi.StringInput `pulumi:"domain"`
}

func (TaskDefinitionFSxAuthorizationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionFSxAuthorizationConfig)(nil)).Elem()
}

func (i TaskDefinitionFSxAuthorizationConfigArgs) ToTaskDefinitionFSxAuthorizationConfigOutput() TaskDefinitionFSxAuthorizationConfigOutput {
	return i.ToTaskDefinitionFSxAuthorizationConfigOutputWithContext(context.Background())
}

func (i TaskDefinitionFSxAuthorizationConfigArgs) ToTaskDefinitionFSxAuthorizationConfigOutputWithContext(ctx context.Context) TaskDefinitionFSxAuthorizationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionFSxAuthorizationConfigOutput)
}

func (i TaskDefinitionFSxAuthorizationConfigArgs) ToTaskDefinitionFSxAuthorizationConfigPtrOutput() TaskDefinitionFSxAuthorizationConfigPtrOutput {
	return i.ToTaskDefinitionFSxAuthorizationConfigPtrOutputWithContext(context.Background())
}

func (i TaskDefinitionFSxAuthorizationConfigArgs) ToTaskDefinitionFSxAuthorizationConfigPtrOutputWithContext(ctx context.Context) TaskDefinitionFSxAuthorizationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionFSxAuthorizationConfigOutput).ToTaskDefinitionFSxAuthorizationConfigPtrOutputWithContext(ctx)
}

// TaskDefinitionFSxAuthorizationConfigPtrInput is an input type that accepts TaskDefinitionFSxAuthorizationConfigArgs, TaskDefinitionFSxAuthorizationConfigPtr and TaskDefinitionFSxAuthorizationConfigPtrOutput values.
// You can construct a concrete instance of `TaskDefinitionFSxAuthorizationConfigPtrInput` via:
//
//	        TaskDefinitionFSxAuthorizationConfigArgs{...}
//
//	or:
//
//	        nil
type TaskDefinitionFSxAuthorizationConfigPtrInput interface {
	pulumi.Input

	ToTaskDefinitionFSxAuthorizationConfigPtrOutput() TaskDefinitionFSxAuthorizationConfigPtrOutput
	ToTaskDefinitionFSxAuthorizationConfigPtrOutputWithContext(context.Context) TaskDefinitionFSxAuthorizationConfigPtrOutput
}

type taskDefinitionFSxAuthorizationConfigPtrType TaskDefinitionFSxAuthorizationConfigArgs

func TaskDefinitionFSxAuthorizationConfigPtr(v *TaskDefinitionFSxAuthorizationConfigArgs) TaskDefinitionFSxAuthorizationConfigPtrInput {
	return (*taskDefinitionFSxAuthorizationConfigPtrType)(v)
}

func (*taskDefinitionFSxAuthorizationConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionFSxAuthorizationConfig)(nil)).Elem()
}

func (i *taskDefinitionFSxAuthorizationConfigPtrType) ToTaskDefinitionFSxAuthorizationConfigPtrOutput() TaskDefinitionFSxAuthorizationConfigPtrOutput {
	return i.ToTaskDefinitionFSxAuthorizationConfigPtrOutputWithContext(context.Background())
}

func (i *taskDefinitionFSxAuthorizationConfigPtrType) ToTaskDefinitionFSxAuthorizationConfigPtrOutputWithContext(ctx context.Context) TaskDefinitionFSxAuthorizationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionFSxAuthorizationConfigPtrOutput)
}

// The authorization configuration details for Amazon FSx for Windows File Server file system. See [FSxWindowsFileServerVolumeConfiguration](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_FSxWindowsFileServerVolumeConfiguration.html) in the *Amazon ECS API Reference*.
//
//	For more information and the input format, see [Amazon FSx for Windows File Server Volumes](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/wfsx-volumes.html) in the *Amazon Elastic Container Service Developer Guide*.
type TaskDefinitionFSxAuthorizationConfigOutput struct{ *pulumi.OutputState }

func (TaskDefinitionFSxAuthorizationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionFSxAuthorizationConfig)(nil)).Elem()
}

func (o TaskDefinitionFSxAuthorizationConfigOutput) ToTaskDefinitionFSxAuthorizationConfigOutput() TaskDefinitionFSxAuthorizationConfigOutput {
	return o
}

func (o TaskDefinitionFSxAuthorizationConfigOutput) ToTaskDefinitionFSxAuthorizationConfigOutputWithContext(ctx context.Context) TaskDefinitionFSxAuthorizationConfigOutput {
	return o
}

func (o TaskDefinitionFSxAuthorizationConfigOutput) ToTaskDefinitionFSxAuthorizationConfigPtrOutput() TaskDefinitionFSxAuthorizationConfigPtrOutput {
	return o.ToTaskDefinitionFSxAuthorizationConfigPtrOutputWithContext(context.Background())
}

func (o TaskDefinitionFSxAuthorizationConfigOutput) ToTaskDefinitionFSxAuthorizationConfigPtrOutputWithContext(ctx context.Context) TaskDefinitionFSxAuthorizationConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskDefinitionFSxAuthorizationConfig) *TaskDefinitionFSxAuthorizationConfig {
		return &v
	}).(TaskDefinitionFSxAuthorizationConfigPtrOutput)
}

// The authorization credential option to use. The authorization credential options can be provided using either the Amazon Resource Name (ARN) of an ASMlong secret or SSM Parameter Store parameter. The ARN refers to the stored credentials.
func (o TaskDefinitionFSxAuthorizationConfigOutput) CredentialsParameter() pulumi.StringOutput {
	return o.ApplyT(func(v TaskDefinitionFSxAuthorizationConfig) string { return v.CredentialsParameter }).(pulumi.StringOutput)
}

// A fully qualified domain name hosted by an [](https://docs.aws.amazon.com/directoryservice/latest/admin-guide/directory_microsoft_ad.html) Managed Microsoft AD (Active Directory) or self-hosted AD on Amazon EC2.
func (o TaskDefinitionFSxAuthorizationConfigOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v TaskDefinitionFSxAuthorizationConfig) string { return v.Domain }).(pulumi.StringOutput)
}

type TaskDefinitionFSxAuthorizationConfigPtrOutput struct{ *pulumi.OutputState }

func (TaskDefinitionFSxAuthorizationConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionFSxAuthorizationConfig)(nil)).Elem()
}

func (o TaskDefinitionFSxAuthorizationConfigPtrOutput) ToTaskDefinitionFSxAuthorizationConfigPtrOutput() TaskDefinitionFSxAuthorizationConfigPtrOutput {
	return o
}

func (o TaskDefinitionFSxAuthorizationConfigPtrOutput) ToTaskDefinitionFSxAuthorizationConfigPtrOutputWithContext(ctx context.Context) TaskDefinitionFSxAuthorizationConfigPtrOutput {
	return o
}

func (o TaskDefinitionFSxAuthorizationConfigPtrOutput) Elem() TaskDefinitionFSxAuthorizationConfigOutput {
	return o.ApplyT(func(v *TaskDefinitionFSxAuthorizationConfig) TaskDefinitionFSxAuthorizationConfig {
		if v != nil {
			return *v
		}
		var ret TaskDefinitionFSxAuthorizationConfig
		return ret
	}).(TaskDefinitionFSxAuthorizationConfigOutput)
}

// The authorization credential option to use. The authorization credential options can be provided using either the Amazon Resource Name (ARN) of an ASMlong secret or SSM Parameter Store parameter. The ARN refers to the stored credentials.
func (o TaskDefinitionFSxAuthorizationConfigPtrOutput) CredentialsParameter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionFSxAuthorizationConfig) *string {
		if v == nil {
			return nil
		}
		return &v.CredentialsParameter
	}).(pulumi.StringPtrOutput)
}

// A fully qualified domain name hosted by an [](https://docs.aws.amazon.com/directoryservice/latest/admin-guide/directory_microsoft_ad.html) Managed Microsoft AD (Active Directory) or self-hosted AD on Amazon EC2.
func (o TaskDefinitionFSxAuthorizationConfigPtrOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionFSxAuthorizationConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Domain
	}).(pulumi.StringPtrOutput)
}

// This parameter is specified when you're using [Amazon FSx for Windows File Server](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/what-is.html) file system for task storage.
//
//	For more information and the input format, see [Amazon FSx for Windows File Server volumes](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/wfsx-volumes.html) in the *Amazon Elastic Container Service Developer Guide*.
type TaskDefinitionFSxWindowsFileServerVolumeConfiguration struct {
	// The authorization configuration details for the Amazon FSx for Windows File Server file system.
	AuthorizationConfig *TaskDefinitionFSxAuthorizationConfig `pulumi:"authorizationConfig"`
	// The Amazon FSx for Windows File Server file system ID to use.
	FileSystemId string `pulumi:"fileSystemId"`
	// The directory within the Amazon FSx for Windows File Server file system to mount as the root directory inside the host.
	RootDirectory string `pulumi:"rootDirectory"`
}

// TaskDefinitionFSxWindowsFileServerVolumeConfigurationInput is an input type that accepts TaskDefinitionFSxWindowsFileServerVolumeConfigurationArgs and TaskDefinitionFSxWindowsFileServerVolumeConfigurationOutput values.
// You can construct a concrete instance of `TaskDefinitionFSxWindowsFileServerVolumeConfigurationInput` via:
//
//	TaskDefinitionFSxWindowsFileServerVolumeConfigurationArgs{...}
type TaskDefinitionFSxWindowsFileServerVolumeConfigurationInput interface {
	pulumi.Input

	ToTaskDefinitionFSxWindowsFileServerVolumeConfigurationOutput() TaskDefinitionFSxWindowsFileServerVolumeConfigurationOutput
	ToTaskDefinitionFSxWindowsFileServerVolumeConfigurationOutputWithContext(context.Context) TaskDefinitionFSxWindowsFileServerVolumeConfigurationOutput
}

// This parameter is specified when you're using [Amazon FSx for Windows File Server](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/what-is.html) file system for task storage.
//
//	For more information and the input format, see [Amazon FSx for Windows File Server volumes](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/wfsx-volumes.html) in the *Amazon Elastic Container Service Developer Guide*.
type TaskDefinitionFSxWindowsFileServerVolumeConfigurationArgs struct {
	// The authorization configuration details for the Amazon FSx for Windows File Server file system.
	AuthorizationConfig TaskDefinitionFSxAuthorizationConfigPtrInput `pulumi:"authorizationConfig"`
	// The Amazon FSx for Windows File Server file system ID to use.
	FileSystemId pulumi.StringInput `pulumi:"fileSystemId"`
	// The directory within the Amazon FSx for Windows File Server file system to mount as the root directory inside the host.
	RootDirectory pulumi.StringInput `pulumi:"rootDirectory"`
}

func (TaskDefinitionFSxWindowsFileServerVolumeConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionFSxWindowsFileServerVolumeConfiguration)(nil)).Elem()
}

func (i TaskDefinitionFSxWindowsFileServerVolumeConfigurationArgs) ToTaskDefinitionFSxWindowsFileServerVolumeConfigurationOutput() TaskDefinitionFSxWindowsFileServerVolumeConfigurationOutput {
	return i.ToTaskDefinitionFSxWindowsFileServerVolumeConfigurationOutputWithContext(context.Background())
}

func (i TaskDefinitionFSxWindowsFileServerVolumeConfigurationArgs) ToTaskDefinitionFSxWindowsFileServerVolumeConfigurationOutputWithContext(ctx context.Context) TaskDefinitionFSxWindowsFileServerVolumeConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionFSxWindowsFileServerVolumeConfigurationOutput)
}

func (i TaskDefinitionFSxWindowsFileServerVolumeConfigurationArgs) ToTaskDefinitionFSxWindowsFileServerVolumeConfigurationPtrOutput() TaskDefinitionFSxWindowsFileServerVolumeConfigurationPtrOutput {
	return i.ToTaskDefinitionFSxWindowsFileServerVolumeConfigurationPtrOutputWithContext(context.Background())
}

func (i TaskDefinitionFSxWindowsFileServerVolumeConfigurationArgs) ToTaskDefinitionFSxWindowsFileServerVolumeConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionFSxWindowsFileServerVolumeConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionFSxWindowsFileServerVolumeConfigurationOutput).ToTaskDefinitionFSxWindowsFileServerVolumeConfigurationPtrOutputWithContext(ctx)
}

// TaskDefinitionFSxWindowsFileServerVolumeConfigurationPtrInput is an input type that accepts TaskDefinitionFSxWindowsFileServerVolumeConfigurationArgs, TaskDefinitionFSxWindowsFileServerVolumeConfigurationPtr and TaskDefinitionFSxWindowsFileServerVolumeConfigurationPtrOutput values.
// You can construct a concrete instance of `TaskDefinitionFSxWindowsFileServerVolumeConfigurationPtrInput` via:
//
//	        TaskDefinitionFSxWindowsFileServerVolumeConfigurationArgs{...}
//
//	or:
//
//	        nil
type TaskDefinitionFSxWindowsFileServerVolumeConfigurationPtrInput interface {
	pulumi.Input

	ToTaskDefinitionFSxWindowsFileServerVolumeConfigurationPtrOutput() TaskDefinitionFSxWindowsFileServerVolumeConfigurationPtrOutput
	ToTaskDefinitionFSxWindowsFileServerVolumeConfigurationPtrOutputWithContext(context.Context) TaskDefinitionFSxWindowsFileServerVolumeConfigurationPtrOutput
}

type taskDefinitionFSxWindowsFileServerVolumeConfigurationPtrType TaskDefinitionFSxWindowsFileServerVolumeConfigurationArgs

func TaskDefinitionFSxWindowsFileServerVolumeConfigurationPtr(v *TaskDefinitionFSxWindowsFileServerVolumeConfigurationArgs) TaskDefinitionFSxWindowsFileServerVolumeConfigurationPtrInput {
	return (*taskDefinitionFSxWindowsFileServerVolumeConfigurationPtrType)(v)
}

func (*taskDefinitionFSxWindowsFileServerVolumeConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionFSxWindowsFileServerVolumeConfiguration)(nil)).Elem()
}

func (i *taskDefinitionFSxWindowsFileServerVolumeConfigurationPtrType) ToTaskDefinitionFSxWindowsFileServerVolumeConfigurationPtrOutput() TaskDefinitionFSxWindowsFileServerVolumeConfigurationPtrOutput {
	return i.ToTaskDefinitionFSxWindowsFileServerVolumeConfigurationPtrOutputWithContext(context.Background())
}

func (i *taskDefinitionFSxWindowsFileServerVolumeConfigurationPtrType) ToTaskDefinitionFSxWindowsFileServerVolumeConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionFSxWindowsFileServerVolumeConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionFSxWindowsFileServerVolumeConfigurationPtrOutput)
}

// This parameter is specified when you're using [Amazon FSx for Windows File Server](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/what-is.html) file system for task storage.
//
//	For more information and the input format, see [Amazon FSx for Windows File Server volumes](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/wfsx-volumes.html) in the *Amazon Elastic Container Service Developer Guide*.
type TaskDefinitionFSxWindowsFileServerVolumeConfigurationOutput struct{ *pulumi.OutputState }

func (TaskDefinitionFSxWindowsFileServerVolumeConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionFSxWindowsFileServerVolumeConfiguration)(nil)).Elem()
}

func (o TaskDefinitionFSxWindowsFileServerVolumeConfigurationOutput) ToTaskDefinitionFSxWindowsFileServerVolumeConfigurationOutput() TaskDefinitionFSxWindowsFileServerVolumeConfigurationOutput {
	return o
}

func (o TaskDefinitionFSxWindowsFileServerVolumeConfigurationOutput) ToTaskDefinitionFSxWindowsFileServerVolumeConfigurationOutputWithContext(ctx context.Context) TaskDefinitionFSxWindowsFileServerVolumeConfigurationOutput {
	return o
}

func (o TaskDefinitionFSxWindowsFileServerVolumeConfigurationOutput) ToTaskDefinitionFSxWindowsFileServerVolumeConfigurationPtrOutput() TaskDefinitionFSxWindowsFileServerVolumeConfigurationPtrOutput {
	return o.ToTaskDefinitionFSxWindowsFileServerVolumeConfigurationPtrOutputWithContext(context.Background())
}

func (o TaskDefinitionFSxWindowsFileServerVolumeConfigurationOutput) ToTaskDefinitionFSxWindowsFileServerVolumeConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionFSxWindowsFileServerVolumeConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskDefinitionFSxWindowsFileServerVolumeConfiguration) *TaskDefinitionFSxWindowsFileServerVolumeConfiguration {
		return &v
	}).(TaskDefinitionFSxWindowsFileServerVolumeConfigurationPtrOutput)
}

// The authorization configuration details for the Amazon FSx for Windows File Server file system.
func (o TaskDefinitionFSxWindowsFileServerVolumeConfigurationOutput) AuthorizationConfig() TaskDefinitionFSxAuthorizationConfigPtrOutput {
	return o.ApplyT(func(v TaskDefinitionFSxWindowsFileServerVolumeConfiguration) *TaskDefinitionFSxAuthorizationConfig {
		return v.AuthorizationConfig
	}).(TaskDefinitionFSxAuthorizationConfigPtrOutput)
}

// The Amazon FSx for Windows File Server file system ID to use.
func (o TaskDefinitionFSxWindowsFileServerVolumeConfigurationOutput) FileSystemId() pulumi.StringOutput {
	return o.ApplyT(func(v TaskDefinitionFSxWindowsFileServerVolumeConfiguration) string { return v.FileSystemId }).(pulumi.StringOutput)
}

// The directory within the Amazon FSx for Windows File Server file system to mount as the root directory inside the host.
func (o TaskDefinitionFSxWindowsFileServerVolumeConfigurationOutput) RootDirectory() pulumi.StringOutput {
	return o.ApplyT(func(v TaskDefinitionFSxWindowsFileServerVolumeConfiguration) string { return v.RootDirectory }).(pulumi.StringOutput)
}

type TaskDefinitionFSxWindowsFileServerVolumeConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TaskDefinitionFSxWindowsFileServerVolumeConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionFSxWindowsFileServerVolumeConfiguration)(nil)).Elem()
}

func (o TaskDefinitionFSxWindowsFileServerVolumeConfigurationPtrOutput) ToTaskDefinitionFSxWindowsFileServerVolumeConfigurationPtrOutput() TaskDefinitionFSxWindowsFileServerVolumeConfigurationPtrOutput {
	return o
}

func (o TaskDefinitionFSxWindowsFileServerVolumeConfigurationPtrOutput) ToTaskDefinitionFSxWindowsFileServerVolumeConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionFSxWindowsFileServerVolumeConfigurationPtrOutput {
	return o
}

func (o TaskDefinitionFSxWindowsFileServerVolumeConfigurationPtrOutput) Elem() TaskDefinitionFSxWindowsFileServerVolumeConfigurationOutput {
	return o.ApplyT(func(v *TaskDefinitionFSxWindowsFileServerVolumeConfiguration) TaskDefinitionFSxWindowsFileServerVolumeConfiguration {
		if v != nil {
			return *v
		}
		var ret TaskDefinitionFSxWindowsFileServerVolumeConfiguration
		return ret
	}).(TaskDefinitionFSxWindowsFileServerVolumeConfigurationOutput)
}

// The authorization configuration details for the Amazon FSx for Windows File Server file system.
func (o TaskDefinitionFSxWindowsFileServerVolumeConfigurationPtrOutput) AuthorizationConfig() TaskDefinitionFSxAuthorizationConfigPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionFSxWindowsFileServerVolumeConfiguration) *TaskDefinitionFSxAuthorizationConfig {
		if v == nil {
			return nil
		}
		return v.AuthorizationConfig
	}).(TaskDefinitionFSxAuthorizationConfigPtrOutput)
}

// The Amazon FSx for Windows File Server file system ID to use.
func (o TaskDefinitionFSxWindowsFileServerVolumeConfigurationPtrOutput) FileSystemId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionFSxWindowsFileServerVolumeConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.FileSystemId
	}).(pulumi.StringPtrOutput)
}

// The directory within the Amazon FSx for Windows File Server file system to mount as the root directory inside the host.
func (o TaskDefinitionFSxWindowsFileServerVolumeConfigurationPtrOutput) RootDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionFSxWindowsFileServerVolumeConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.RootDirectory
	}).(pulumi.StringPtrOutput)
}

// The FireLens configuration for the container. This is used to specify and configure a log router for container logs. For more information, see [Custom log routing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html) in the *Amazon Elastic Container Service Developer Guide*.
type TaskDefinitionFirelensConfiguration struct {
	// The options to use when configuring the log router. This field is optional and can be used to add additional metadata, such as the task, task definition, cluster, and container instance details to the log event.
	//   If specified, valid option keys are:
	//   +  ``enable-ecs-log-metadata``, which can be ``true`` or ``false``
	//   +  ``config-file-type``, which can be ``s3`` or ``file``
	//   +  ``config-file-value``, which is either an S3 ARN or a file path
	Options map[string]string `pulumi:"options"`
	// The log router to use. The valid values are ``fluentd`` or ``fluentbit``.
	Type *string `pulumi:"type"`
}

// TaskDefinitionFirelensConfigurationInput is an input type that accepts TaskDefinitionFirelensConfigurationArgs and TaskDefinitionFirelensConfigurationOutput values.
// You can construct a concrete instance of `TaskDefinitionFirelensConfigurationInput` via:
//
//	TaskDefinitionFirelensConfigurationArgs{...}
type TaskDefinitionFirelensConfigurationInput interface {
	pulumi.Input

	ToTaskDefinitionFirelensConfigurationOutput() TaskDefinitionFirelensConfigurationOutput
	ToTaskDefinitionFirelensConfigurationOutputWithContext(context.Context) TaskDefinitionFirelensConfigurationOutput
}

// The FireLens configuration for the container. This is used to specify and configure a log router for container logs. For more information, see [Custom log routing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html) in the *Amazon Elastic Container Service Developer Guide*.
type TaskDefinitionFirelensConfigurationArgs struct {
	// The options to use when configuring the log router. This field is optional and can be used to add additional metadata, such as the task, task definition, cluster, and container instance details to the log event.
	//   If specified, valid option keys are:
	//   +  ``enable-ecs-log-metadata``, which can be ``true`` or ``false``
	//   +  ``config-file-type``, which can be ``s3`` or ``file``
	//   +  ``config-file-value``, which is either an S3 ARN or a file path
	Options pulumi.StringMapInput `pulumi:"options"`
	// The log router to use. The valid values are ``fluentd`` or ``fluentbit``.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (TaskDefinitionFirelensConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionFirelensConfiguration)(nil)).Elem()
}

func (i TaskDefinitionFirelensConfigurationArgs) ToTaskDefinitionFirelensConfigurationOutput() TaskDefinitionFirelensConfigurationOutput {
	return i.ToTaskDefinitionFirelensConfigurationOutputWithContext(context.Background())
}

func (i TaskDefinitionFirelensConfigurationArgs) ToTaskDefinitionFirelensConfigurationOutputWithContext(ctx context.Context) TaskDefinitionFirelensConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionFirelensConfigurationOutput)
}

func (i TaskDefinitionFirelensConfigurationArgs) ToTaskDefinitionFirelensConfigurationPtrOutput() TaskDefinitionFirelensConfigurationPtrOutput {
	return i.ToTaskDefinitionFirelensConfigurationPtrOutputWithContext(context.Background())
}

func (i TaskDefinitionFirelensConfigurationArgs) ToTaskDefinitionFirelensConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionFirelensConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionFirelensConfigurationOutput).ToTaskDefinitionFirelensConfigurationPtrOutputWithContext(ctx)
}

// TaskDefinitionFirelensConfigurationPtrInput is an input type that accepts TaskDefinitionFirelensConfigurationArgs, TaskDefinitionFirelensConfigurationPtr and TaskDefinitionFirelensConfigurationPtrOutput values.
// You can construct a concrete instance of `TaskDefinitionFirelensConfigurationPtrInput` via:
//
//	        TaskDefinitionFirelensConfigurationArgs{...}
//
//	or:
//
//	        nil
type TaskDefinitionFirelensConfigurationPtrInput interface {
	pulumi.Input

	ToTaskDefinitionFirelensConfigurationPtrOutput() TaskDefinitionFirelensConfigurationPtrOutput
	ToTaskDefinitionFirelensConfigurationPtrOutputWithContext(context.Context) TaskDefinitionFirelensConfigurationPtrOutput
}

type taskDefinitionFirelensConfigurationPtrType TaskDefinitionFirelensConfigurationArgs

func TaskDefinitionFirelensConfigurationPtr(v *TaskDefinitionFirelensConfigurationArgs) TaskDefinitionFirelensConfigurationPtrInput {
	return (*taskDefinitionFirelensConfigurationPtrType)(v)
}

func (*taskDefinitionFirelensConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionFirelensConfiguration)(nil)).Elem()
}

func (i *taskDefinitionFirelensConfigurationPtrType) ToTaskDefinitionFirelensConfigurationPtrOutput() TaskDefinitionFirelensConfigurationPtrOutput {
	return i.ToTaskDefinitionFirelensConfigurationPtrOutputWithContext(context.Background())
}

func (i *taskDefinitionFirelensConfigurationPtrType) ToTaskDefinitionFirelensConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionFirelensConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionFirelensConfigurationPtrOutput)
}

// The FireLens configuration for the container. This is used to specify and configure a log router for container logs. For more information, see [Custom log routing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html) in the *Amazon Elastic Container Service Developer Guide*.
type TaskDefinitionFirelensConfigurationOutput struct{ *pulumi.OutputState }

func (TaskDefinitionFirelensConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionFirelensConfiguration)(nil)).Elem()
}

func (o TaskDefinitionFirelensConfigurationOutput) ToTaskDefinitionFirelensConfigurationOutput() TaskDefinitionFirelensConfigurationOutput {
	return o
}

func (o TaskDefinitionFirelensConfigurationOutput) ToTaskDefinitionFirelensConfigurationOutputWithContext(ctx context.Context) TaskDefinitionFirelensConfigurationOutput {
	return o
}

func (o TaskDefinitionFirelensConfigurationOutput) ToTaskDefinitionFirelensConfigurationPtrOutput() TaskDefinitionFirelensConfigurationPtrOutput {
	return o.ToTaskDefinitionFirelensConfigurationPtrOutputWithContext(context.Background())
}

func (o TaskDefinitionFirelensConfigurationOutput) ToTaskDefinitionFirelensConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionFirelensConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskDefinitionFirelensConfiguration) *TaskDefinitionFirelensConfiguration {
		return &v
	}).(TaskDefinitionFirelensConfigurationPtrOutput)
}

// The options to use when configuring the log router. This field is optional and can be used to add additional metadata, such as the task, task definition, cluster, and container instance details to the log event.
//
//	If specified, valid option keys are:
//	+  ``enable-ecs-log-metadata``, which can be ``true`` or ``false``
//	+  ``config-file-type``, which can be ``s3`` or ``file``
//	+  ``config-file-value``, which is either an S3 ARN or a file path
func (o TaskDefinitionFirelensConfigurationOutput) Options() pulumi.StringMapOutput {
	return o.ApplyT(func(v TaskDefinitionFirelensConfiguration) map[string]string { return v.Options }).(pulumi.StringMapOutput)
}

// The log router to use. The valid values are “fluentd“ or “fluentbit“.
func (o TaskDefinitionFirelensConfigurationOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionFirelensConfiguration) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type TaskDefinitionFirelensConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TaskDefinitionFirelensConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionFirelensConfiguration)(nil)).Elem()
}

func (o TaskDefinitionFirelensConfigurationPtrOutput) ToTaskDefinitionFirelensConfigurationPtrOutput() TaskDefinitionFirelensConfigurationPtrOutput {
	return o
}

func (o TaskDefinitionFirelensConfigurationPtrOutput) ToTaskDefinitionFirelensConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionFirelensConfigurationPtrOutput {
	return o
}

func (o TaskDefinitionFirelensConfigurationPtrOutput) Elem() TaskDefinitionFirelensConfigurationOutput {
	return o.ApplyT(func(v *TaskDefinitionFirelensConfiguration) TaskDefinitionFirelensConfiguration {
		if v != nil {
			return *v
		}
		var ret TaskDefinitionFirelensConfiguration
		return ret
	}).(TaskDefinitionFirelensConfigurationOutput)
}

// The options to use when configuring the log router. This field is optional and can be used to add additional metadata, such as the task, task definition, cluster, and container instance details to the log event.
//
//	If specified, valid option keys are:
//	+  ``enable-ecs-log-metadata``, which can be ``true`` or ``false``
//	+  ``config-file-type``, which can be ``s3`` or ``file``
//	+  ``config-file-value``, which is either an S3 ARN or a file path
func (o TaskDefinitionFirelensConfigurationPtrOutput) Options() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TaskDefinitionFirelensConfiguration) map[string]string {
		if v == nil {
			return nil
		}
		return v.Options
	}).(pulumi.StringMapOutput)
}

// The log router to use. The valid values are “fluentd“ or “fluentbit“.
func (o TaskDefinitionFirelensConfigurationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionFirelensConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The “HealthCheck“ property specifies an object representing a container health check. Health check parameters that are specified in a container definition override any Docker health checks that exist in the container image (such as those specified in a parent image or from the image's Dockerfile). This configuration maps to the “HEALTHCHECK“ parameter of docker run.
//
//	 The Amazon ECS container agent only monitors and reports on the health checks specified in the task definition. Amazon ECS does not monitor Docker health checks that are embedded in a container image and not specified in the container definition. Health check parameters that are specified in a container definition override any Docker health checks that exist in the container image.
//	 If a task is run manually, and not as part of a service, the task will continue its lifecycle regardless of its health status. For tasks that are part of a service, if the task reports as unhealthy then the task will be stopped and the service scheduler will replace it.
//	The following are notes about container health check support:
//	 +  Container health checks require version 1.17.0 or greater of the Amazon ECS container agent. For more information, see [Updating the Amazon ECS Container Agent](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html).
//	 +  Container health checks are supported for Fargate tasks if you are using platform version 1.1.0 or greater. For more information, see [Platform Versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
//	 +  Container health checks are not supported for tasks that are part of a service that is configured to use a Classic Load Balancer.
type TaskDefinitionHealthCheck struct {
	// A string array representing the command that the container runs to determine if it is healthy. The string array must start with ``CMD`` to run the command arguments directly, or ``CMD-SHELL`` to run the command with the container's default shell.
	//   When you use the AWS Management Console JSON panel, the CLIlong, or the APIs, enclose the list of commands in double quotes and brackets.
	//   ``[ "CMD-SHELL", "curl -f http://localhost/ || exit 1" ]``
	//  You don't include the double quotes and brackets when you use the AWS Management Console.
	//   ``CMD-SHELL, curl -f http://localhost/ || exit 1``
	//  An exit code of 0 indicates success, and non-zero exit code indicates failure. For more information, see ``HealthCheck`` in the docker container create command.
	Command []string `pulumi:"command"`
	// The time period in seconds between each health check execution. You may specify between 5 and 300 seconds. The default value is 30 seconds. This value applies only when you specify a ``command``.
	Interval *int `pulumi:"interval"`
	// The number of times to retry a failed health check before the container is considered unhealthy. You may specify between 1 and 10 retries. The default value is 3. This value applies only when you specify a ``command``.
	Retries *int `pulumi:"retries"`
	// The optional grace period to provide containers time to bootstrap before failed health checks count towards the maximum number of retries. You can specify between 0 and 300 seconds. By default, the ``startPeriod`` is off. This value applies only when you specify a ``command``.
	//   If a health check succeeds within the ``startPeriod``, then the container is considered healthy and any subsequent failures count toward the maximum number of retries.
	StartPeriod *int `pulumi:"startPeriod"`
	// The time period in seconds to wait for a health check to succeed before it is considered a failure. You may specify between 2 and 60 seconds. The default value is 5. This value applies only when you specify a ``command``.
	Timeout *int `pulumi:"timeout"`
}

// TaskDefinitionHealthCheckInput is an input type that accepts TaskDefinitionHealthCheckArgs and TaskDefinitionHealthCheckOutput values.
// You can construct a concrete instance of `TaskDefinitionHealthCheckInput` via:
//
//	TaskDefinitionHealthCheckArgs{...}
type TaskDefinitionHealthCheckInput interface {
	pulumi.Input

	ToTaskDefinitionHealthCheckOutput() TaskDefinitionHealthCheckOutput
	ToTaskDefinitionHealthCheckOutputWithContext(context.Context) TaskDefinitionHealthCheckOutput
}

// The “HealthCheck“ property specifies an object representing a container health check. Health check parameters that are specified in a container definition override any Docker health checks that exist in the container image (such as those specified in a parent image or from the image's Dockerfile). This configuration maps to the “HEALTHCHECK“ parameter of docker run.
//
//	 The Amazon ECS container agent only monitors and reports on the health checks specified in the task definition. Amazon ECS does not monitor Docker health checks that are embedded in a container image and not specified in the container definition. Health check parameters that are specified in a container definition override any Docker health checks that exist in the container image.
//	 If a task is run manually, and not as part of a service, the task will continue its lifecycle regardless of its health status. For tasks that are part of a service, if the task reports as unhealthy then the task will be stopped and the service scheduler will replace it.
//	The following are notes about container health check support:
//	 +  Container health checks require version 1.17.0 or greater of the Amazon ECS container agent. For more information, see [Updating the Amazon ECS Container Agent](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html).
//	 +  Container health checks are supported for Fargate tasks if you are using platform version 1.1.0 or greater. For more information, see [Platform Versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
//	 +  Container health checks are not supported for tasks that are part of a service that is configured to use a Classic Load Balancer.
type TaskDefinitionHealthCheckArgs struct {
	// A string array representing the command that the container runs to determine if it is healthy. The string array must start with ``CMD`` to run the command arguments directly, or ``CMD-SHELL`` to run the command with the container's default shell.
	//   When you use the AWS Management Console JSON panel, the CLIlong, or the APIs, enclose the list of commands in double quotes and brackets.
	//   ``[ "CMD-SHELL", "curl -f http://localhost/ || exit 1" ]``
	//  You don't include the double quotes and brackets when you use the AWS Management Console.
	//   ``CMD-SHELL, curl -f http://localhost/ || exit 1``
	//  An exit code of 0 indicates success, and non-zero exit code indicates failure. For more information, see ``HealthCheck`` in the docker container create command.
	Command pulumi.StringArrayInput `pulumi:"command"`
	// The time period in seconds between each health check execution. You may specify between 5 and 300 seconds. The default value is 30 seconds. This value applies only when you specify a ``command``.
	Interval pulumi.IntPtrInput `pulumi:"interval"`
	// The number of times to retry a failed health check before the container is considered unhealthy. You may specify between 1 and 10 retries. The default value is 3. This value applies only when you specify a ``command``.
	Retries pulumi.IntPtrInput `pulumi:"retries"`
	// The optional grace period to provide containers time to bootstrap before failed health checks count towards the maximum number of retries. You can specify between 0 and 300 seconds. By default, the ``startPeriod`` is off. This value applies only when you specify a ``command``.
	//   If a health check succeeds within the ``startPeriod``, then the container is considered healthy and any subsequent failures count toward the maximum number of retries.
	StartPeriod pulumi.IntPtrInput `pulumi:"startPeriod"`
	// The time period in seconds to wait for a health check to succeed before it is considered a failure. You may specify between 2 and 60 seconds. The default value is 5. This value applies only when you specify a ``command``.
	Timeout pulumi.IntPtrInput `pulumi:"timeout"`
}

func (TaskDefinitionHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionHealthCheck)(nil)).Elem()
}

func (i TaskDefinitionHealthCheckArgs) ToTaskDefinitionHealthCheckOutput() TaskDefinitionHealthCheckOutput {
	return i.ToTaskDefinitionHealthCheckOutputWithContext(context.Background())
}

func (i TaskDefinitionHealthCheckArgs) ToTaskDefinitionHealthCheckOutputWithContext(ctx context.Context) TaskDefinitionHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionHealthCheckOutput)
}

func (i TaskDefinitionHealthCheckArgs) ToTaskDefinitionHealthCheckPtrOutput() TaskDefinitionHealthCheckPtrOutput {
	return i.ToTaskDefinitionHealthCheckPtrOutputWithContext(context.Background())
}

func (i TaskDefinitionHealthCheckArgs) ToTaskDefinitionHealthCheckPtrOutputWithContext(ctx context.Context) TaskDefinitionHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionHealthCheckOutput).ToTaskDefinitionHealthCheckPtrOutputWithContext(ctx)
}

// TaskDefinitionHealthCheckPtrInput is an input type that accepts TaskDefinitionHealthCheckArgs, TaskDefinitionHealthCheckPtr and TaskDefinitionHealthCheckPtrOutput values.
// You can construct a concrete instance of `TaskDefinitionHealthCheckPtrInput` via:
//
//	        TaskDefinitionHealthCheckArgs{...}
//
//	or:
//
//	        nil
type TaskDefinitionHealthCheckPtrInput interface {
	pulumi.Input

	ToTaskDefinitionHealthCheckPtrOutput() TaskDefinitionHealthCheckPtrOutput
	ToTaskDefinitionHealthCheckPtrOutputWithContext(context.Context) TaskDefinitionHealthCheckPtrOutput
}

type taskDefinitionHealthCheckPtrType TaskDefinitionHealthCheckArgs

func TaskDefinitionHealthCheckPtr(v *TaskDefinitionHealthCheckArgs) TaskDefinitionHealthCheckPtrInput {
	return (*taskDefinitionHealthCheckPtrType)(v)
}

func (*taskDefinitionHealthCheckPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionHealthCheck)(nil)).Elem()
}

func (i *taskDefinitionHealthCheckPtrType) ToTaskDefinitionHealthCheckPtrOutput() TaskDefinitionHealthCheckPtrOutput {
	return i.ToTaskDefinitionHealthCheckPtrOutputWithContext(context.Background())
}

func (i *taskDefinitionHealthCheckPtrType) ToTaskDefinitionHealthCheckPtrOutputWithContext(ctx context.Context) TaskDefinitionHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionHealthCheckPtrOutput)
}

// The “HealthCheck“ property specifies an object representing a container health check. Health check parameters that are specified in a container definition override any Docker health checks that exist in the container image (such as those specified in a parent image or from the image's Dockerfile). This configuration maps to the “HEALTHCHECK“ parameter of docker run.
//
//	 The Amazon ECS container agent only monitors and reports on the health checks specified in the task definition. Amazon ECS does not monitor Docker health checks that are embedded in a container image and not specified in the container definition. Health check parameters that are specified in a container definition override any Docker health checks that exist in the container image.
//	 If a task is run manually, and not as part of a service, the task will continue its lifecycle regardless of its health status. For tasks that are part of a service, if the task reports as unhealthy then the task will be stopped and the service scheduler will replace it.
//	The following are notes about container health check support:
//	 +  Container health checks require version 1.17.0 or greater of the Amazon ECS container agent. For more information, see [Updating the Amazon ECS Container Agent](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html).
//	 +  Container health checks are supported for Fargate tasks if you are using platform version 1.1.0 or greater. For more information, see [Platform Versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
//	 +  Container health checks are not supported for tasks that are part of a service that is configured to use a Classic Load Balancer.
type TaskDefinitionHealthCheckOutput struct{ *pulumi.OutputState }

func (TaskDefinitionHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionHealthCheck)(nil)).Elem()
}

func (o TaskDefinitionHealthCheckOutput) ToTaskDefinitionHealthCheckOutput() TaskDefinitionHealthCheckOutput {
	return o
}

func (o TaskDefinitionHealthCheckOutput) ToTaskDefinitionHealthCheckOutputWithContext(ctx context.Context) TaskDefinitionHealthCheckOutput {
	return o
}

func (o TaskDefinitionHealthCheckOutput) ToTaskDefinitionHealthCheckPtrOutput() TaskDefinitionHealthCheckPtrOutput {
	return o.ToTaskDefinitionHealthCheckPtrOutputWithContext(context.Background())
}

func (o TaskDefinitionHealthCheckOutput) ToTaskDefinitionHealthCheckPtrOutputWithContext(ctx context.Context) TaskDefinitionHealthCheckPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskDefinitionHealthCheck) *TaskDefinitionHealthCheck {
		return &v
	}).(TaskDefinitionHealthCheckPtrOutput)
}

// A string array representing the command that the container runs to determine if it is healthy. The string array must start with “CMD“ to run the command arguments directly, or “CMD-SHELL“ to run the command with the container's default shell.
//
//	 When you use the AWS Management Console JSON panel, the CLIlong, or the APIs, enclose the list of commands in double quotes and brackets.
//	 ``[ "CMD-SHELL", "curl -f http://localhost/ || exit 1" ]``
//	You don't include the double quotes and brackets when you use the AWS Management Console.
//	 ``CMD-SHELL, curl -f http://localhost/ || exit 1``
//	An exit code of 0 indicates success, and non-zero exit code indicates failure. For more information, see ``HealthCheck`` in the docker container create command.
func (o TaskDefinitionHealthCheckOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TaskDefinitionHealthCheck) []string { return v.Command }).(pulumi.StringArrayOutput)
}

// The time period in seconds between each health check execution. You may specify between 5 and 300 seconds. The default value is 30 seconds. This value applies only when you specify a “command“.
func (o TaskDefinitionHealthCheckOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskDefinitionHealthCheck) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

// The number of times to retry a failed health check before the container is considered unhealthy. You may specify between 1 and 10 retries. The default value is 3. This value applies only when you specify a “command“.
func (o TaskDefinitionHealthCheckOutput) Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskDefinitionHealthCheck) *int { return v.Retries }).(pulumi.IntPtrOutput)
}

// The optional grace period to provide containers time to bootstrap before failed health checks count towards the maximum number of retries. You can specify between 0 and 300 seconds. By default, the “startPeriod“ is off. This value applies only when you specify a “command“.
//
//	If a health check succeeds within the ``startPeriod``, then the container is considered healthy and any subsequent failures count toward the maximum number of retries.
func (o TaskDefinitionHealthCheckOutput) StartPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskDefinitionHealthCheck) *int { return v.StartPeriod }).(pulumi.IntPtrOutput)
}

// The time period in seconds to wait for a health check to succeed before it is considered a failure. You may specify between 2 and 60 seconds. The default value is 5. This value applies only when you specify a “command“.
func (o TaskDefinitionHealthCheckOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskDefinitionHealthCheck) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

type TaskDefinitionHealthCheckPtrOutput struct{ *pulumi.OutputState }

func (TaskDefinitionHealthCheckPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionHealthCheck)(nil)).Elem()
}

func (o TaskDefinitionHealthCheckPtrOutput) ToTaskDefinitionHealthCheckPtrOutput() TaskDefinitionHealthCheckPtrOutput {
	return o
}

func (o TaskDefinitionHealthCheckPtrOutput) ToTaskDefinitionHealthCheckPtrOutputWithContext(ctx context.Context) TaskDefinitionHealthCheckPtrOutput {
	return o
}

func (o TaskDefinitionHealthCheckPtrOutput) Elem() TaskDefinitionHealthCheckOutput {
	return o.ApplyT(func(v *TaskDefinitionHealthCheck) TaskDefinitionHealthCheck {
		if v != nil {
			return *v
		}
		var ret TaskDefinitionHealthCheck
		return ret
	}).(TaskDefinitionHealthCheckOutput)
}

// A string array representing the command that the container runs to determine if it is healthy. The string array must start with “CMD“ to run the command arguments directly, or “CMD-SHELL“ to run the command with the container's default shell.
//
//	 When you use the AWS Management Console JSON panel, the CLIlong, or the APIs, enclose the list of commands in double quotes and brackets.
//	 ``[ "CMD-SHELL", "curl -f http://localhost/ || exit 1" ]``
//	You don't include the double quotes and brackets when you use the AWS Management Console.
//	 ``CMD-SHELL, curl -f http://localhost/ || exit 1``
//	An exit code of 0 indicates success, and non-zero exit code indicates failure. For more information, see ``HealthCheck`` in the docker container create command.
func (o TaskDefinitionHealthCheckPtrOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TaskDefinitionHealthCheck) []string {
		if v == nil {
			return nil
		}
		return v.Command
	}).(pulumi.StringArrayOutput)
}

// The time period in seconds between each health check execution. You may specify between 5 and 300 seconds. The default value is 30 seconds. This value applies only when you specify a “command“.
func (o TaskDefinitionHealthCheckPtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.IntPtrOutput)
}

// The number of times to retry a failed health check before the container is considered unhealthy. You may specify between 1 and 10 retries. The default value is 3. This value applies only when you specify a “command“.
func (o TaskDefinitionHealthCheckPtrOutput) Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.Retries
	}).(pulumi.IntPtrOutput)
}

// The optional grace period to provide containers time to bootstrap before failed health checks count towards the maximum number of retries. You can specify between 0 and 300 seconds. By default, the “startPeriod“ is off. This value applies only when you specify a “command“.
//
//	If a health check succeeds within the ``startPeriod``, then the container is considered healthy and any subsequent failures count toward the maximum number of retries.
func (o TaskDefinitionHealthCheckPtrOutput) StartPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.StartPeriod
	}).(pulumi.IntPtrOutput)
}

// The time period in seconds to wait for a health check to succeed before it is considered a failure. You may specify between 2 and 60 seconds. The default value is 5. This value applies only when you specify a “command“.
func (o TaskDefinitionHealthCheckPtrOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.IntPtrOutput)
}

// The “HostEntry“ property specifies a hostname and an IP address that are added to the “/etc/hosts“ file of a container through the “extraHosts“ parameter of its “ContainerDefinition“ resource.
type TaskDefinitionHostEntry struct {
	// The hostname to use in the ``/etc/hosts`` entry.
	Hostname *string `pulumi:"hostname"`
	// The IP address to use in the ``/etc/hosts`` entry.
	IpAddress *string `pulumi:"ipAddress"`
}

// TaskDefinitionHostEntryInput is an input type that accepts TaskDefinitionHostEntryArgs and TaskDefinitionHostEntryOutput values.
// You can construct a concrete instance of `TaskDefinitionHostEntryInput` via:
//
//	TaskDefinitionHostEntryArgs{...}
type TaskDefinitionHostEntryInput interface {
	pulumi.Input

	ToTaskDefinitionHostEntryOutput() TaskDefinitionHostEntryOutput
	ToTaskDefinitionHostEntryOutputWithContext(context.Context) TaskDefinitionHostEntryOutput
}

// The “HostEntry“ property specifies a hostname and an IP address that are added to the “/etc/hosts“ file of a container through the “extraHosts“ parameter of its “ContainerDefinition“ resource.
type TaskDefinitionHostEntryArgs struct {
	// The hostname to use in the ``/etc/hosts`` entry.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// The IP address to use in the ``/etc/hosts`` entry.
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
}

func (TaskDefinitionHostEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionHostEntry)(nil)).Elem()
}

func (i TaskDefinitionHostEntryArgs) ToTaskDefinitionHostEntryOutput() TaskDefinitionHostEntryOutput {
	return i.ToTaskDefinitionHostEntryOutputWithContext(context.Background())
}

func (i TaskDefinitionHostEntryArgs) ToTaskDefinitionHostEntryOutputWithContext(ctx context.Context) TaskDefinitionHostEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionHostEntryOutput)
}

// TaskDefinitionHostEntryArrayInput is an input type that accepts TaskDefinitionHostEntryArray and TaskDefinitionHostEntryArrayOutput values.
// You can construct a concrete instance of `TaskDefinitionHostEntryArrayInput` via:
//
//	TaskDefinitionHostEntryArray{ TaskDefinitionHostEntryArgs{...} }
type TaskDefinitionHostEntryArrayInput interface {
	pulumi.Input

	ToTaskDefinitionHostEntryArrayOutput() TaskDefinitionHostEntryArrayOutput
	ToTaskDefinitionHostEntryArrayOutputWithContext(context.Context) TaskDefinitionHostEntryArrayOutput
}

type TaskDefinitionHostEntryArray []TaskDefinitionHostEntryInput

func (TaskDefinitionHostEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionHostEntry)(nil)).Elem()
}

func (i TaskDefinitionHostEntryArray) ToTaskDefinitionHostEntryArrayOutput() TaskDefinitionHostEntryArrayOutput {
	return i.ToTaskDefinitionHostEntryArrayOutputWithContext(context.Background())
}

func (i TaskDefinitionHostEntryArray) ToTaskDefinitionHostEntryArrayOutputWithContext(ctx context.Context) TaskDefinitionHostEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionHostEntryArrayOutput)
}

// The “HostEntry“ property specifies a hostname and an IP address that are added to the “/etc/hosts“ file of a container through the “extraHosts“ parameter of its “ContainerDefinition“ resource.
type TaskDefinitionHostEntryOutput struct{ *pulumi.OutputState }

func (TaskDefinitionHostEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionHostEntry)(nil)).Elem()
}

func (o TaskDefinitionHostEntryOutput) ToTaskDefinitionHostEntryOutput() TaskDefinitionHostEntryOutput {
	return o
}

func (o TaskDefinitionHostEntryOutput) ToTaskDefinitionHostEntryOutputWithContext(ctx context.Context) TaskDefinitionHostEntryOutput {
	return o
}

// The hostname to use in the “/etc/hosts“ entry.
func (o TaskDefinitionHostEntryOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionHostEntry) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// The IP address to use in the “/etc/hosts“ entry.
func (o TaskDefinitionHostEntryOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionHostEntry) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

type TaskDefinitionHostEntryArrayOutput struct{ *pulumi.OutputState }

func (TaskDefinitionHostEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionHostEntry)(nil)).Elem()
}

func (o TaskDefinitionHostEntryArrayOutput) ToTaskDefinitionHostEntryArrayOutput() TaskDefinitionHostEntryArrayOutput {
	return o
}

func (o TaskDefinitionHostEntryArrayOutput) ToTaskDefinitionHostEntryArrayOutputWithContext(ctx context.Context) TaskDefinitionHostEntryArrayOutput {
	return o
}

func (o TaskDefinitionHostEntryArrayOutput) Index(i pulumi.IntInput) TaskDefinitionHostEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskDefinitionHostEntry {
		return vs[0].([]TaskDefinitionHostEntry)[vs[1].(int)]
	}).(TaskDefinitionHostEntryOutput)
}

// The “HostVolumeProperties“ property specifies details on a container instance bind mount host volume.
type TaskDefinitionHostVolumeProperties struct {
	// When the ``host`` parameter is used, specify a ``sourcePath`` to declare the path on the host container instance that's presented to the container. If this parameter is empty, then the Docker daemon has assigned a host path for you. If the ``host`` parameter contains a ``sourcePath`` file location, then the data volume persists at the specified location on the host container instance until you delete it manually. If the ``sourcePath`` value doesn't exist on the host container instance, the Docker daemon creates it. If the location does exist, the contents of the source path folder are exported.
	//  If you're using the Fargate launch type, the ``sourcePath`` parameter is not supported.
	SourcePath *string `pulumi:"sourcePath"`
}

// TaskDefinitionHostVolumePropertiesInput is an input type that accepts TaskDefinitionHostVolumePropertiesArgs and TaskDefinitionHostVolumePropertiesOutput values.
// You can construct a concrete instance of `TaskDefinitionHostVolumePropertiesInput` via:
//
//	TaskDefinitionHostVolumePropertiesArgs{...}
type TaskDefinitionHostVolumePropertiesInput interface {
	pulumi.Input

	ToTaskDefinitionHostVolumePropertiesOutput() TaskDefinitionHostVolumePropertiesOutput
	ToTaskDefinitionHostVolumePropertiesOutputWithContext(context.Context) TaskDefinitionHostVolumePropertiesOutput
}

// The “HostVolumeProperties“ property specifies details on a container instance bind mount host volume.
type TaskDefinitionHostVolumePropertiesArgs struct {
	// When the ``host`` parameter is used, specify a ``sourcePath`` to declare the path on the host container instance that's presented to the container. If this parameter is empty, then the Docker daemon has assigned a host path for you. If the ``host`` parameter contains a ``sourcePath`` file location, then the data volume persists at the specified location on the host container instance until you delete it manually. If the ``sourcePath`` value doesn't exist on the host container instance, the Docker daemon creates it. If the location does exist, the contents of the source path folder are exported.
	//  If you're using the Fargate launch type, the ``sourcePath`` parameter is not supported.
	SourcePath pulumi.StringPtrInput `pulumi:"sourcePath"`
}

func (TaskDefinitionHostVolumePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionHostVolumeProperties)(nil)).Elem()
}

func (i TaskDefinitionHostVolumePropertiesArgs) ToTaskDefinitionHostVolumePropertiesOutput() TaskDefinitionHostVolumePropertiesOutput {
	return i.ToTaskDefinitionHostVolumePropertiesOutputWithContext(context.Background())
}

func (i TaskDefinitionHostVolumePropertiesArgs) ToTaskDefinitionHostVolumePropertiesOutputWithContext(ctx context.Context) TaskDefinitionHostVolumePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionHostVolumePropertiesOutput)
}

func (i TaskDefinitionHostVolumePropertiesArgs) ToTaskDefinitionHostVolumePropertiesPtrOutput() TaskDefinitionHostVolumePropertiesPtrOutput {
	return i.ToTaskDefinitionHostVolumePropertiesPtrOutputWithContext(context.Background())
}

func (i TaskDefinitionHostVolumePropertiesArgs) ToTaskDefinitionHostVolumePropertiesPtrOutputWithContext(ctx context.Context) TaskDefinitionHostVolumePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionHostVolumePropertiesOutput).ToTaskDefinitionHostVolumePropertiesPtrOutputWithContext(ctx)
}

// TaskDefinitionHostVolumePropertiesPtrInput is an input type that accepts TaskDefinitionHostVolumePropertiesArgs, TaskDefinitionHostVolumePropertiesPtr and TaskDefinitionHostVolumePropertiesPtrOutput values.
// You can construct a concrete instance of `TaskDefinitionHostVolumePropertiesPtrInput` via:
//
//	        TaskDefinitionHostVolumePropertiesArgs{...}
//
//	or:
//
//	        nil
type TaskDefinitionHostVolumePropertiesPtrInput interface {
	pulumi.Input

	ToTaskDefinitionHostVolumePropertiesPtrOutput() TaskDefinitionHostVolumePropertiesPtrOutput
	ToTaskDefinitionHostVolumePropertiesPtrOutputWithContext(context.Context) TaskDefinitionHostVolumePropertiesPtrOutput
}

type taskDefinitionHostVolumePropertiesPtrType TaskDefinitionHostVolumePropertiesArgs

func TaskDefinitionHostVolumePropertiesPtr(v *TaskDefinitionHostVolumePropertiesArgs) TaskDefinitionHostVolumePropertiesPtrInput {
	return (*taskDefinitionHostVolumePropertiesPtrType)(v)
}

func (*taskDefinitionHostVolumePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionHostVolumeProperties)(nil)).Elem()
}

func (i *taskDefinitionHostVolumePropertiesPtrType) ToTaskDefinitionHostVolumePropertiesPtrOutput() TaskDefinitionHostVolumePropertiesPtrOutput {
	return i.ToTaskDefinitionHostVolumePropertiesPtrOutputWithContext(context.Background())
}

func (i *taskDefinitionHostVolumePropertiesPtrType) ToTaskDefinitionHostVolumePropertiesPtrOutputWithContext(ctx context.Context) TaskDefinitionHostVolumePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionHostVolumePropertiesPtrOutput)
}

// The “HostVolumeProperties“ property specifies details on a container instance bind mount host volume.
type TaskDefinitionHostVolumePropertiesOutput struct{ *pulumi.OutputState }

func (TaskDefinitionHostVolumePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionHostVolumeProperties)(nil)).Elem()
}

func (o TaskDefinitionHostVolumePropertiesOutput) ToTaskDefinitionHostVolumePropertiesOutput() TaskDefinitionHostVolumePropertiesOutput {
	return o
}

func (o TaskDefinitionHostVolumePropertiesOutput) ToTaskDefinitionHostVolumePropertiesOutputWithContext(ctx context.Context) TaskDefinitionHostVolumePropertiesOutput {
	return o
}

func (o TaskDefinitionHostVolumePropertiesOutput) ToTaskDefinitionHostVolumePropertiesPtrOutput() TaskDefinitionHostVolumePropertiesPtrOutput {
	return o.ToTaskDefinitionHostVolumePropertiesPtrOutputWithContext(context.Background())
}

func (o TaskDefinitionHostVolumePropertiesOutput) ToTaskDefinitionHostVolumePropertiesPtrOutputWithContext(ctx context.Context) TaskDefinitionHostVolumePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskDefinitionHostVolumeProperties) *TaskDefinitionHostVolumeProperties {
		return &v
	}).(TaskDefinitionHostVolumePropertiesPtrOutput)
}

// When the “host“ parameter is used, specify a “sourcePath“ to declare the path on the host container instance that's presented to the container. If this parameter is empty, then the Docker daemon has assigned a host path for you. If the “host“ parameter contains a “sourcePath“ file location, then the data volume persists at the specified location on the host container instance until you delete it manually. If the “sourcePath“ value doesn't exist on the host container instance, the Docker daemon creates it. If the location does exist, the contents of the source path folder are exported.
//
//	If you're using the Fargate launch type, the ``sourcePath`` parameter is not supported.
func (o TaskDefinitionHostVolumePropertiesOutput) SourcePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionHostVolumeProperties) *string { return v.SourcePath }).(pulumi.StringPtrOutput)
}

type TaskDefinitionHostVolumePropertiesPtrOutput struct{ *pulumi.OutputState }

func (TaskDefinitionHostVolumePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionHostVolumeProperties)(nil)).Elem()
}

func (o TaskDefinitionHostVolumePropertiesPtrOutput) ToTaskDefinitionHostVolumePropertiesPtrOutput() TaskDefinitionHostVolumePropertiesPtrOutput {
	return o
}

func (o TaskDefinitionHostVolumePropertiesPtrOutput) ToTaskDefinitionHostVolumePropertiesPtrOutputWithContext(ctx context.Context) TaskDefinitionHostVolumePropertiesPtrOutput {
	return o
}

func (o TaskDefinitionHostVolumePropertiesPtrOutput) Elem() TaskDefinitionHostVolumePropertiesOutput {
	return o.ApplyT(func(v *TaskDefinitionHostVolumeProperties) TaskDefinitionHostVolumeProperties {
		if v != nil {
			return *v
		}
		var ret TaskDefinitionHostVolumeProperties
		return ret
	}).(TaskDefinitionHostVolumePropertiesOutput)
}

// When the “host“ parameter is used, specify a “sourcePath“ to declare the path on the host container instance that's presented to the container. If this parameter is empty, then the Docker daemon has assigned a host path for you. If the “host“ parameter contains a “sourcePath“ file location, then the data volume persists at the specified location on the host container instance until you delete it manually. If the “sourcePath“ value doesn't exist on the host container instance, the Docker daemon creates it. If the location does exist, the contents of the source path folder are exported.
//
//	If you're using the Fargate launch type, the ``sourcePath`` parameter is not supported.
func (o TaskDefinitionHostVolumePropertiesPtrOutput) SourcePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionHostVolumeProperties) *string {
		if v == nil {
			return nil
		}
		return v.SourcePath
	}).(pulumi.StringPtrOutput)
}

type TaskDefinitionInferenceAccelerator struct {
	DeviceName *string `pulumi:"deviceName"`
	DeviceType *string `pulumi:"deviceType"`
}

// TaskDefinitionInferenceAcceleratorInput is an input type that accepts TaskDefinitionInferenceAcceleratorArgs and TaskDefinitionInferenceAcceleratorOutput values.
// You can construct a concrete instance of `TaskDefinitionInferenceAcceleratorInput` via:
//
//	TaskDefinitionInferenceAcceleratorArgs{...}
type TaskDefinitionInferenceAcceleratorInput interface {
	pulumi.Input

	ToTaskDefinitionInferenceAcceleratorOutput() TaskDefinitionInferenceAcceleratorOutput
	ToTaskDefinitionInferenceAcceleratorOutputWithContext(context.Context) TaskDefinitionInferenceAcceleratorOutput
}

type TaskDefinitionInferenceAcceleratorArgs struct {
	DeviceName pulumi.StringPtrInput `pulumi:"deviceName"`
	DeviceType pulumi.StringPtrInput `pulumi:"deviceType"`
}

func (TaskDefinitionInferenceAcceleratorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionInferenceAccelerator)(nil)).Elem()
}

func (i TaskDefinitionInferenceAcceleratorArgs) ToTaskDefinitionInferenceAcceleratorOutput() TaskDefinitionInferenceAcceleratorOutput {
	return i.ToTaskDefinitionInferenceAcceleratorOutputWithContext(context.Background())
}

func (i TaskDefinitionInferenceAcceleratorArgs) ToTaskDefinitionInferenceAcceleratorOutputWithContext(ctx context.Context) TaskDefinitionInferenceAcceleratorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionInferenceAcceleratorOutput)
}

// TaskDefinitionInferenceAcceleratorArrayInput is an input type that accepts TaskDefinitionInferenceAcceleratorArray and TaskDefinitionInferenceAcceleratorArrayOutput values.
// You can construct a concrete instance of `TaskDefinitionInferenceAcceleratorArrayInput` via:
//
//	TaskDefinitionInferenceAcceleratorArray{ TaskDefinitionInferenceAcceleratorArgs{...} }
type TaskDefinitionInferenceAcceleratorArrayInput interface {
	pulumi.Input

	ToTaskDefinitionInferenceAcceleratorArrayOutput() TaskDefinitionInferenceAcceleratorArrayOutput
	ToTaskDefinitionInferenceAcceleratorArrayOutputWithContext(context.Context) TaskDefinitionInferenceAcceleratorArrayOutput
}

type TaskDefinitionInferenceAcceleratorArray []TaskDefinitionInferenceAcceleratorInput

func (TaskDefinitionInferenceAcceleratorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionInferenceAccelerator)(nil)).Elem()
}

func (i TaskDefinitionInferenceAcceleratorArray) ToTaskDefinitionInferenceAcceleratorArrayOutput() TaskDefinitionInferenceAcceleratorArrayOutput {
	return i.ToTaskDefinitionInferenceAcceleratorArrayOutputWithContext(context.Background())
}

func (i TaskDefinitionInferenceAcceleratorArray) ToTaskDefinitionInferenceAcceleratorArrayOutputWithContext(ctx context.Context) TaskDefinitionInferenceAcceleratorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionInferenceAcceleratorArrayOutput)
}

type TaskDefinitionInferenceAcceleratorOutput struct{ *pulumi.OutputState }

func (TaskDefinitionInferenceAcceleratorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionInferenceAccelerator)(nil)).Elem()
}

func (o TaskDefinitionInferenceAcceleratorOutput) ToTaskDefinitionInferenceAcceleratorOutput() TaskDefinitionInferenceAcceleratorOutput {
	return o
}

func (o TaskDefinitionInferenceAcceleratorOutput) ToTaskDefinitionInferenceAcceleratorOutputWithContext(ctx context.Context) TaskDefinitionInferenceAcceleratorOutput {
	return o
}

func (o TaskDefinitionInferenceAcceleratorOutput) DeviceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionInferenceAccelerator) *string { return v.DeviceName }).(pulumi.StringPtrOutput)
}

func (o TaskDefinitionInferenceAcceleratorOutput) DeviceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionInferenceAccelerator) *string { return v.DeviceType }).(pulumi.StringPtrOutput)
}

type TaskDefinitionInferenceAcceleratorArrayOutput struct{ *pulumi.OutputState }

func (TaskDefinitionInferenceAcceleratorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionInferenceAccelerator)(nil)).Elem()
}

func (o TaskDefinitionInferenceAcceleratorArrayOutput) ToTaskDefinitionInferenceAcceleratorArrayOutput() TaskDefinitionInferenceAcceleratorArrayOutput {
	return o
}

func (o TaskDefinitionInferenceAcceleratorArrayOutput) ToTaskDefinitionInferenceAcceleratorArrayOutputWithContext(ctx context.Context) TaskDefinitionInferenceAcceleratorArrayOutput {
	return o
}

func (o TaskDefinitionInferenceAcceleratorArrayOutput) Index(i pulumi.IntInput) TaskDefinitionInferenceAcceleratorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskDefinitionInferenceAccelerator {
		return vs[0].([]TaskDefinitionInferenceAccelerator)[vs[1].(int)]
	}).(TaskDefinitionInferenceAcceleratorOutput)
}

// The Linux capabilities to add or remove from the default Docker configuration for a container defined in the task definition. For more detailed information about these Linux capabilities, see the [capabilities(7)](https://docs.aws.amazon.com/http://man7.org/linux/man-pages/man7/capabilities.7.html) Linux manual page.
//
//	The following describes how Docker processes the Linux capabilities specified in the ``add`` and ``drop`` request parameters. For information about the latest behavior, see [Docker Compose: order of cap_drop and cap_add](https://docs.aws.amazon.com/https://forums.docker.com/t/docker-compose-order-of-cap-drop-and-cap-add/97136/1) in the Docker Community Forum.
//	 +  When the container is a privleged container, the container capabilities are all of the default Docker capabilities. The capabilities specified in the ``add`` request parameter, and the ``drop`` request parameter are ignored.
//	 +  When the ``add`` request parameter is set to ALL, the container capabilities are all of the default Docker capabilities, excluding those specified in the ``drop`` request parameter.
//	 +  When the ``drop`` request parameter is set to ALL, the container capabilities are the capabilities specified in the ``add`` request parameter.
//	 +  When the ``add`` request parameter and the ``drop`` request parameter are both empty, the capabilities the container capabilities are all of the default Docker capabilities.
//	 +  The default is to first drop the capabilities specified in the ``drop`` request parameter, and then add the capabilities specified in the ``add`` request parameter.
type TaskDefinitionKernelCapabilities struct {
	// The Linux capabilities for the container that have been added to the default configuration provided by Docker. This parameter maps to ``CapAdd`` in the docker container create command and the ``--cap-add`` option to docker run.
	//   Tasks launched on FARGATElong only support adding the ``SYS_PTRACE`` kernel capability.
	//   Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN" | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" | "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" | "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" | "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" | "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO" | "SYS_RESOURCE" | "SYS_TIME" | "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"``
	Add []string `pulumi:"add"`
	// The Linux capabilities for the container that have been removed from the default configuration provided by Docker. This parameter maps to ``CapDrop`` in the docker container create command and the ``--cap-drop`` option to docker run.
	//  Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN" | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" | "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" | "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" | "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" | "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO" | "SYS_RESOURCE" | "SYS_TIME" | "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"``
	Drop []string `pulumi:"drop"`
}

// TaskDefinitionKernelCapabilitiesInput is an input type that accepts TaskDefinitionKernelCapabilitiesArgs and TaskDefinitionKernelCapabilitiesOutput values.
// You can construct a concrete instance of `TaskDefinitionKernelCapabilitiesInput` via:
//
//	TaskDefinitionKernelCapabilitiesArgs{...}
type TaskDefinitionKernelCapabilitiesInput interface {
	pulumi.Input

	ToTaskDefinitionKernelCapabilitiesOutput() TaskDefinitionKernelCapabilitiesOutput
	ToTaskDefinitionKernelCapabilitiesOutputWithContext(context.Context) TaskDefinitionKernelCapabilitiesOutput
}

// The Linux capabilities to add or remove from the default Docker configuration for a container defined in the task definition. For more detailed information about these Linux capabilities, see the [capabilities(7)](https://docs.aws.amazon.com/http://man7.org/linux/man-pages/man7/capabilities.7.html) Linux manual page.
//
//	The following describes how Docker processes the Linux capabilities specified in the ``add`` and ``drop`` request parameters. For information about the latest behavior, see [Docker Compose: order of cap_drop and cap_add](https://docs.aws.amazon.com/https://forums.docker.com/t/docker-compose-order-of-cap-drop-and-cap-add/97136/1) in the Docker Community Forum.
//	 +  When the container is a privleged container, the container capabilities are all of the default Docker capabilities. The capabilities specified in the ``add`` request parameter, and the ``drop`` request parameter are ignored.
//	 +  When the ``add`` request parameter is set to ALL, the container capabilities are all of the default Docker capabilities, excluding those specified in the ``drop`` request parameter.
//	 +  When the ``drop`` request parameter is set to ALL, the container capabilities are the capabilities specified in the ``add`` request parameter.
//	 +  When the ``add`` request parameter and the ``drop`` request parameter are both empty, the capabilities the container capabilities are all of the default Docker capabilities.
//	 +  The default is to first drop the capabilities specified in the ``drop`` request parameter, and then add the capabilities specified in the ``add`` request parameter.
type TaskDefinitionKernelCapabilitiesArgs struct {
	// The Linux capabilities for the container that have been added to the default configuration provided by Docker. This parameter maps to ``CapAdd`` in the docker container create command and the ``--cap-add`` option to docker run.
	//   Tasks launched on FARGATElong only support adding the ``SYS_PTRACE`` kernel capability.
	//   Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN" | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" | "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" | "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" | "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" | "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO" | "SYS_RESOURCE" | "SYS_TIME" | "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"``
	Add pulumi.StringArrayInput `pulumi:"add"`
	// The Linux capabilities for the container that have been removed from the default configuration provided by Docker. This parameter maps to ``CapDrop`` in the docker container create command and the ``--cap-drop`` option to docker run.
	//  Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN" | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" | "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" | "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" | "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" | "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO" | "SYS_RESOURCE" | "SYS_TIME" | "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"``
	Drop pulumi.StringArrayInput `pulumi:"drop"`
}

func (TaskDefinitionKernelCapabilitiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionKernelCapabilities)(nil)).Elem()
}

func (i TaskDefinitionKernelCapabilitiesArgs) ToTaskDefinitionKernelCapabilitiesOutput() TaskDefinitionKernelCapabilitiesOutput {
	return i.ToTaskDefinitionKernelCapabilitiesOutputWithContext(context.Background())
}

func (i TaskDefinitionKernelCapabilitiesArgs) ToTaskDefinitionKernelCapabilitiesOutputWithContext(ctx context.Context) TaskDefinitionKernelCapabilitiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionKernelCapabilitiesOutput)
}

func (i TaskDefinitionKernelCapabilitiesArgs) ToTaskDefinitionKernelCapabilitiesPtrOutput() TaskDefinitionKernelCapabilitiesPtrOutput {
	return i.ToTaskDefinitionKernelCapabilitiesPtrOutputWithContext(context.Background())
}

func (i TaskDefinitionKernelCapabilitiesArgs) ToTaskDefinitionKernelCapabilitiesPtrOutputWithContext(ctx context.Context) TaskDefinitionKernelCapabilitiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionKernelCapabilitiesOutput).ToTaskDefinitionKernelCapabilitiesPtrOutputWithContext(ctx)
}

// TaskDefinitionKernelCapabilitiesPtrInput is an input type that accepts TaskDefinitionKernelCapabilitiesArgs, TaskDefinitionKernelCapabilitiesPtr and TaskDefinitionKernelCapabilitiesPtrOutput values.
// You can construct a concrete instance of `TaskDefinitionKernelCapabilitiesPtrInput` via:
//
//	        TaskDefinitionKernelCapabilitiesArgs{...}
//
//	or:
//
//	        nil
type TaskDefinitionKernelCapabilitiesPtrInput interface {
	pulumi.Input

	ToTaskDefinitionKernelCapabilitiesPtrOutput() TaskDefinitionKernelCapabilitiesPtrOutput
	ToTaskDefinitionKernelCapabilitiesPtrOutputWithContext(context.Context) TaskDefinitionKernelCapabilitiesPtrOutput
}

type taskDefinitionKernelCapabilitiesPtrType TaskDefinitionKernelCapabilitiesArgs

func TaskDefinitionKernelCapabilitiesPtr(v *TaskDefinitionKernelCapabilitiesArgs) TaskDefinitionKernelCapabilitiesPtrInput {
	return (*taskDefinitionKernelCapabilitiesPtrType)(v)
}

func (*taskDefinitionKernelCapabilitiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionKernelCapabilities)(nil)).Elem()
}

func (i *taskDefinitionKernelCapabilitiesPtrType) ToTaskDefinitionKernelCapabilitiesPtrOutput() TaskDefinitionKernelCapabilitiesPtrOutput {
	return i.ToTaskDefinitionKernelCapabilitiesPtrOutputWithContext(context.Background())
}

func (i *taskDefinitionKernelCapabilitiesPtrType) ToTaskDefinitionKernelCapabilitiesPtrOutputWithContext(ctx context.Context) TaskDefinitionKernelCapabilitiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionKernelCapabilitiesPtrOutput)
}

// The Linux capabilities to add or remove from the default Docker configuration for a container defined in the task definition. For more detailed information about these Linux capabilities, see the [capabilities(7)](https://docs.aws.amazon.com/http://man7.org/linux/man-pages/man7/capabilities.7.html) Linux manual page.
//
//	The following describes how Docker processes the Linux capabilities specified in the ``add`` and ``drop`` request parameters. For information about the latest behavior, see [Docker Compose: order of cap_drop and cap_add](https://docs.aws.amazon.com/https://forums.docker.com/t/docker-compose-order-of-cap-drop-and-cap-add/97136/1) in the Docker Community Forum.
//	 +  When the container is a privleged container, the container capabilities are all of the default Docker capabilities. The capabilities specified in the ``add`` request parameter, and the ``drop`` request parameter are ignored.
//	 +  When the ``add`` request parameter is set to ALL, the container capabilities are all of the default Docker capabilities, excluding those specified in the ``drop`` request parameter.
//	 +  When the ``drop`` request parameter is set to ALL, the container capabilities are the capabilities specified in the ``add`` request parameter.
//	 +  When the ``add`` request parameter and the ``drop`` request parameter are both empty, the capabilities the container capabilities are all of the default Docker capabilities.
//	 +  The default is to first drop the capabilities specified in the ``drop`` request parameter, and then add the capabilities specified in the ``add`` request parameter.
type TaskDefinitionKernelCapabilitiesOutput struct{ *pulumi.OutputState }

func (TaskDefinitionKernelCapabilitiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionKernelCapabilities)(nil)).Elem()
}

func (o TaskDefinitionKernelCapabilitiesOutput) ToTaskDefinitionKernelCapabilitiesOutput() TaskDefinitionKernelCapabilitiesOutput {
	return o
}

func (o TaskDefinitionKernelCapabilitiesOutput) ToTaskDefinitionKernelCapabilitiesOutputWithContext(ctx context.Context) TaskDefinitionKernelCapabilitiesOutput {
	return o
}

func (o TaskDefinitionKernelCapabilitiesOutput) ToTaskDefinitionKernelCapabilitiesPtrOutput() TaskDefinitionKernelCapabilitiesPtrOutput {
	return o.ToTaskDefinitionKernelCapabilitiesPtrOutputWithContext(context.Background())
}

func (o TaskDefinitionKernelCapabilitiesOutput) ToTaskDefinitionKernelCapabilitiesPtrOutputWithContext(ctx context.Context) TaskDefinitionKernelCapabilitiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskDefinitionKernelCapabilities) *TaskDefinitionKernelCapabilities {
		return &v
	}).(TaskDefinitionKernelCapabilitiesPtrOutput)
}

// The Linux capabilities for the container that have been added to the default configuration provided by Docker. This parameter maps to “CapAdd“ in the docker container create command and the “--cap-add“ option to docker run.
//
//	Tasks launched on FARGATElong only support adding the ``SYS_PTRACE`` kernel capability.
//	Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN" | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" | "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" | "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" | "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" | "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO" | "SYS_RESOURCE" | "SYS_TIME" | "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"``
func (o TaskDefinitionKernelCapabilitiesOutput) Add() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TaskDefinitionKernelCapabilities) []string { return v.Add }).(pulumi.StringArrayOutput)
}

// The Linux capabilities for the container that have been removed from the default configuration provided by Docker. This parameter maps to “CapDrop“ in the docker container create command and the “--cap-drop“ option to docker run.
//
//	Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN" | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" | "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" | "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" | "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" | "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO" | "SYS_RESOURCE" | "SYS_TIME" | "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"``
func (o TaskDefinitionKernelCapabilitiesOutput) Drop() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TaskDefinitionKernelCapabilities) []string { return v.Drop }).(pulumi.StringArrayOutput)
}

type TaskDefinitionKernelCapabilitiesPtrOutput struct{ *pulumi.OutputState }

func (TaskDefinitionKernelCapabilitiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionKernelCapabilities)(nil)).Elem()
}

func (o TaskDefinitionKernelCapabilitiesPtrOutput) ToTaskDefinitionKernelCapabilitiesPtrOutput() TaskDefinitionKernelCapabilitiesPtrOutput {
	return o
}

func (o TaskDefinitionKernelCapabilitiesPtrOutput) ToTaskDefinitionKernelCapabilitiesPtrOutputWithContext(ctx context.Context) TaskDefinitionKernelCapabilitiesPtrOutput {
	return o
}

func (o TaskDefinitionKernelCapabilitiesPtrOutput) Elem() TaskDefinitionKernelCapabilitiesOutput {
	return o.ApplyT(func(v *TaskDefinitionKernelCapabilities) TaskDefinitionKernelCapabilities {
		if v != nil {
			return *v
		}
		var ret TaskDefinitionKernelCapabilities
		return ret
	}).(TaskDefinitionKernelCapabilitiesOutput)
}

// The Linux capabilities for the container that have been added to the default configuration provided by Docker. This parameter maps to “CapAdd“ in the docker container create command and the “--cap-add“ option to docker run.
//
//	Tasks launched on FARGATElong only support adding the ``SYS_PTRACE`` kernel capability.
//	Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN" | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" | "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" | "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" | "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" | "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO" | "SYS_RESOURCE" | "SYS_TIME" | "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"``
func (o TaskDefinitionKernelCapabilitiesPtrOutput) Add() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TaskDefinitionKernelCapabilities) []string {
		if v == nil {
			return nil
		}
		return v.Add
	}).(pulumi.StringArrayOutput)
}

// The Linux capabilities for the container that have been removed from the default configuration provided by Docker. This parameter maps to “CapDrop“ in the docker container create command and the “--cap-drop“ option to docker run.
//
//	Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN" | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" | "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" | "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" | "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" | "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO" | "SYS_RESOURCE" | "SYS_TIME" | "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"``
func (o TaskDefinitionKernelCapabilitiesPtrOutput) Drop() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TaskDefinitionKernelCapabilities) []string {
		if v == nil {
			return nil
		}
		return v.Drop
	}).(pulumi.StringArrayOutput)
}

// A key-value pair object.
type TaskDefinitionKeyValuePair struct {
	// The name of the key-value pair. For environment variables, this is the name of the environment variable.
	Name *string `pulumi:"name"`
	// The value of the key-value pair. For environment variables, this is the value of the environment variable.
	Value *string `pulumi:"value"`
}

// TaskDefinitionKeyValuePairInput is an input type that accepts TaskDefinitionKeyValuePairArgs and TaskDefinitionKeyValuePairOutput values.
// You can construct a concrete instance of `TaskDefinitionKeyValuePairInput` via:
//
//	TaskDefinitionKeyValuePairArgs{...}
type TaskDefinitionKeyValuePairInput interface {
	pulumi.Input

	ToTaskDefinitionKeyValuePairOutput() TaskDefinitionKeyValuePairOutput
	ToTaskDefinitionKeyValuePairOutputWithContext(context.Context) TaskDefinitionKeyValuePairOutput
}

// A key-value pair object.
type TaskDefinitionKeyValuePairArgs struct {
	// The name of the key-value pair. For environment variables, this is the name of the environment variable.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The value of the key-value pair. For environment variables, this is the value of the environment variable.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (TaskDefinitionKeyValuePairArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionKeyValuePair)(nil)).Elem()
}

func (i TaskDefinitionKeyValuePairArgs) ToTaskDefinitionKeyValuePairOutput() TaskDefinitionKeyValuePairOutput {
	return i.ToTaskDefinitionKeyValuePairOutputWithContext(context.Background())
}

func (i TaskDefinitionKeyValuePairArgs) ToTaskDefinitionKeyValuePairOutputWithContext(ctx context.Context) TaskDefinitionKeyValuePairOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionKeyValuePairOutput)
}

// TaskDefinitionKeyValuePairArrayInput is an input type that accepts TaskDefinitionKeyValuePairArray and TaskDefinitionKeyValuePairArrayOutput values.
// You can construct a concrete instance of `TaskDefinitionKeyValuePairArrayInput` via:
//
//	TaskDefinitionKeyValuePairArray{ TaskDefinitionKeyValuePairArgs{...} }
type TaskDefinitionKeyValuePairArrayInput interface {
	pulumi.Input

	ToTaskDefinitionKeyValuePairArrayOutput() TaskDefinitionKeyValuePairArrayOutput
	ToTaskDefinitionKeyValuePairArrayOutputWithContext(context.Context) TaskDefinitionKeyValuePairArrayOutput
}

type TaskDefinitionKeyValuePairArray []TaskDefinitionKeyValuePairInput

func (TaskDefinitionKeyValuePairArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionKeyValuePair)(nil)).Elem()
}

func (i TaskDefinitionKeyValuePairArray) ToTaskDefinitionKeyValuePairArrayOutput() TaskDefinitionKeyValuePairArrayOutput {
	return i.ToTaskDefinitionKeyValuePairArrayOutputWithContext(context.Background())
}

func (i TaskDefinitionKeyValuePairArray) ToTaskDefinitionKeyValuePairArrayOutputWithContext(ctx context.Context) TaskDefinitionKeyValuePairArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionKeyValuePairArrayOutput)
}

// A key-value pair object.
type TaskDefinitionKeyValuePairOutput struct{ *pulumi.OutputState }

func (TaskDefinitionKeyValuePairOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionKeyValuePair)(nil)).Elem()
}

func (o TaskDefinitionKeyValuePairOutput) ToTaskDefinitionKeyValuePairOutput() TaskDefinitionKeyValuePairOutput {
	return o
}

func (o TaskDefinitionKeyValuePairOutput) ToTaskDefinitionKeyValuePairOutputWithContext(ctx context.Context) TaskDefinitionKeyValuePairOutput {
	return o
}

// The name of the key-value pair. For environment variables, this is the name of the environment variable.
func (o TaskDefinitionKeyValuePairOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionKeyValuePair) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The value of the key-value pair. For environment variables, this is the value of the environment variable.
func (o TaskDefinitionKeyValuePairOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionKeyValuePair) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type TaskDefinitionKeyValuePairArrayOutput struct{ *pulumi.OutputState }

func (TaskDefinitionKeyValuePairArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionKeyValuePair)(nil)).Elem()
}

func (o TaskDefinitionKeyValuePairArrayOutput) ToTaskDefinitionKeyValuePairArrayOutput() TaskDefinitionKeyValuePairArrayOutput {
	return o
}

func (o TaskDefinitionKeyValuePairArrayOutput) ToTaskDefinitionKeyValuePairArrayOutputWithContext(ctx context.Context) TaskDefinitionKeyValuePairArrayOutput {
	return o
}

func (o TaskDefinitionKeyValuePairArrayOutput) Index(i pulumi.IntInput) TaskDefinitionKeyValuePairOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskDefinitionKeyValuePair {
		return vs[0].([]TaskDefinitionKeyValuePair)[vs[1].(int)]
	}).(TaskDefinitionKeyValuePairOutput)
}

// The Linux-specific options that are applied to the container, such as Linux [KernelCapabilities](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_KernelCapabilities.html).
type TaskDefinitionLinuxParameters struct {
	// The Linux capabilities for the container that are added to or dropped from the default configuration provided by Docker.
	//   For tasks that use the Fargate launch type, ``capabilities`` is supported for all platform versions but the ``add`` parameter is only supported if using platform version 1.4.0 or later.
	Capabilities *TaskDefinitionKernelCapabilities `pulumi:"capabilities"`
	// Any host devices to expose to the container. This parameter maps to ``Devices`` in the docker container create command and the ``--device`` option to docker run.
	//   If you're using tasks that use the Fargate launch type, the ``devices`` parameter isn't supported.
	Devices []TaskDefinitionDevice `pulumi:"devices"`
	// Run an ``init`` process inside the container that forwards signals and reaps processes. This parameter maps to the ``--init`` option to docker run. This parameter requires version 1.25 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: ``sudo docker version --format '{{.Server.APIVersion}}'``
	InitProcessEnabled *bool `pulumi:"initProcessEnabled"`
	// The total amount of swap memory (in MiB) a container can use. This parameter will be translated to the ``--memory-swap`` option to docker run where the value would be the sum of the container memory plus the ``maxSwap`` value.
	//  If a ``maxSwap`` value of ``0`` is specified, the container will not use swap. Accepted values are ``0`` or any positive integer. If the ``maxSwap`` parameter is omitted, the container will use the swap configuration for the container instance it is running on. A ``maxSwap`` value must be set for the ``swappiness`` parameter to be used.
	//   If you're using tasks that use the Fargate launch type, the ``maxSwap`` parameter isn't supported.
	//  If you're using tasks on Amazon Linux 2023 the ``swappiness`` parameter isn't supported.
	MaxSwap *int `pulumi:"maxSwap"`
	// The value for the size (in MiB) of the ``/dev/shm`` volume. This parameter maps to the ``--shm-size`` option to docker run.
	//   If you are using tasks that use the Fargate launch type, the ``sharedMemorySize`` parameter is not supported.
	SharedMemorySize *int `pulumi:"sharedMemorySize"`
	// This allows you to tune a container's memory swappiness behavior. A ``swappiness`` value of ``0`` will cause swapping to not happen unless absolutely necessary. A ``swappiness`` value of ``100`` will cause pages to be swapped very aggressively. Accepted values are whole numbers between ``0`` and ``100``. If the ``swappiness`` parameter is not specified, a default value of ``60`` is used. If a value is not specified for ``maxSwap`` then this parameter is ignored. This parameter maps to the ``--memory-swappiness`` option to docker run.
	//   If you're using tasks that use the Fargate launch type, the ``swappiness`` parameter isn't supported.
	//  If you're using tasks on Amazon Linux 2023 the ``swappiness`` parameter isn't supported.
	Swappiness *int `pulumi:"swappiness"`
	// The container path, mount options, and size (in MiB) of the tmpfs mount. This parameter maps to the ``--tmpfs`` option to docker run.
	//   If you're using tasks that use the Fargate launch type, the ``tmpfs`` parameter isn't supported.
	Tmpfs []TaskDefinitionTmpfs `pulumi:"tmpfs"`
}

// TaskDefinitionLinuxParametersInput is an input type that accepts TaskDefinitionLinuxParametersArgs and TaskDefinitionLinuxParametersOutput values.
// You can construct a concrete instance of `TaskDefinitionLinuxParametersInput` via:
//
//	TaskDefinitionLinuxParametersArgs{...}
type TaskDefinitionLinuxParametersInput interface {
	pulumi.Input

	ToTaskDefinitionLinuxParametersOutput() TaskDefinitionLinuxParametersOutput
	ToTaskDefinitionLinuxParametersOutputWithContext(context.Context) TaskDefinitionLinuxParametersOutput
}

// The Linux-specific options that are applied to the container, such as Linux [KernelCapabilities](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_KernelCapabilities.html).
type TaskDefinitionLinuxParametersArgs struct {
	// The Linux capabilities for the container that are added to or dropped from the default configuration provided by Docker.
	//   For tasks that use the Fargate launch type, ``capabilities`` is supported for all platform versions but the ``add`` parameter is only supported if using platform version 1.4.0 or later.
	Capabilities TaskDefinitionKernelCapabilitiesPtrInput `pulumi:"capabilities"`
	// Any host devices to expose to the container. This parameter maps to ``Devices`` in the docker container create command and the ``--device`` option to docker run.
	//   If you're using tasks that use the Fargate launch type, the ``devices`` parameter isn't supported.
	Devices TaskDefinitionDeviceArrayInput `pulumi:"devices"`
	// Run an ``init`` process inside the container that forwards signals and reaps processes. This parameter maps to the ``--init`` option to docker run. This parameter requires version 1.25 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: ``sudo docker version --format '{{.Server.APIVersion}}'``
	InitProcessEnabled pulumi.BoolPtrInput `pulumi:"initProcessEnabled"`
	// The total amount of swap memory (in MiB) a container can use. This parameter will be translated to the ``--memory-swap`` option to docker run where the value would be the sum of the container memory plus the ``maxSwap`` value.
	//  If a ``maxSwap`` value of ``0`` is specified, the container will not use swap. Accepted values are ``0`` or any positive integer. If the ``maxSwap`` parameter is omitted, the container will use the swap configuration for the container instance it is running on. A ``maxSwap`` value must be set for the ``swappiness`` parameter to be used.
	//   If you're using tasks that use the Fargate launch type, the ``maxSwap`` parameter isn't supported.
	//  If you're using tasks on Amazon Linux 2023 the ``swappiness`` parameter isn't supported.
	MaxSwap pulumi.IntPtrInput `pulumi:"maxSwap"`
	// The value for the size (in MiB) of the ``/dev/shm`` volume. This parameter maps to the ``--shm-size`` option to docker run.
	//   If you are using tasks that use the Fargate launch type, the ``sharedMemorySize`` parameter is not supported.
	SharedMemorySize pulumi.IntPtrInput `pulumi:"sharedMemorySize"`
	// This allows you to tune a container's memory swappiness behavior. A ``swappiness`` value of ``0`` will cause swapping to not happen unless absolutely necessary. A ``swappiness`` value of ``100`` will cause pages to be swapped very aggressively. Accepted values are whole numbers between ``0`` and ``100``. If the ``swappiness`` parameter is not specified, a default value of ``60`` is used. If a value is not specified for ``maxSwap`` then this parameter is ignored. This parameter maps to the ``--memory-swappiness`` option to docker run.
	//   If you're using tasks that use the Fargate launch type, the ``swappiness`` parameter isn't supported.
	//  If you're using tasks on Amazon Linux 2023 the ``swappiness`` parameter isn't supported.
	Swappiness pulumi.IntPtrInput `pulumi:"swappiness"`
	// The container path, mount options, and size (in MiB) of the tmpfs mount. This parameter maps to the ``--tmpfs`` option to docker run.
	//   If you're using tasks that use the Fargate launch type, the ``tmpfs`` parameter isn't supported.
	Tmpfs TaskDefinitionTmpfsArrayInput `pulumi:"tmpfs"`
}

func (TaskDefinitionLinuxParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionLinuxParameters)(nil)).Elem()
}

func (i TaskDefinitionLinuxParametersArgs) ToTaskDefinitionLinuxParametersOutput() TaskDefinitionLinuxParametersOutput {
	return i.ToTaskDefinitionLinuxParametersOutputWithContext(context.Background())
}

func (i TaskDefinitionLinuxParametersArgs) ToTaskDefinitionLinuxParametersOutputWithContext(ctx context.Context) TaskDefinitionLinuxParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionLinuxParametersOutput)
}

func (i TaskDefinitionLinuxParametersArgs) ToTaskDefinitionLinuxParametersPtrOutput() TaskDefinitionLinuxParametersPtrOutput {
	return i.ToTaskDefinitionLinuxParametersPtrOutputWithContext(context.Background())
}

func (i TaskDefinitionLinuxParametersArgs) ToTaskDefinitionLinuxParametersPtrOutputWithContext(ctx context.Context) TaskDefinitionLinuxParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionLinuxParametersOutput).ToTaskDefinitionLinuxParametersPtrOutputWithContext(ctx)
}

// TaskDefinitionLinuxParametersPtrInput is an input type that accepts TaskDefinitionLinuxParametersArgs, TaskDefinitionLinuxParametersPtr and TaskDefinitionLinuxParametersPtrOutput values.
// You can construct a concrete instance of `TaskDefinitionLinuxParametersPtrInput` via:
//
//	        TaskDefinitionLinuxParametersArgs{...}
//
//	or:
//
//	        nil
type TaskDefinitionLinuxParametersPtrInput interface {
	pulumi.Input

	ToTaskDefinitionLinuxParametersPtrOutput() TaskDefinitionLinuxParametersPtrOutput
	ToTaskDefinitionLinuxParametersPtrOutputWithContext(context.Context) TaskDefinitionLinuxParametersPtrOutput
}

type taskDefinitionLinuxParametersPtrType TaskDefinitionLinuxParametersArgs

func TaskDefinitionLinuxParametersPtr(v *TaskDefinitionLinuxParametersArgs) TaskDefinitionLinuxParametersPtrInput {
	return (*taskDefinitionLinuxParametersPtrType)(v)
}

func (*taskDefinitionLinuxParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionLinuxParameters)(nil)).Elem()
}

func (i *taskDefinitionLinuxParametersPtrType) ToTaskDefinitionLinuxParametersPtrOutput() TaskDefinitionLinuxParametersPtrOutput {
	return i.ToTaskDefinitionLinuxParametersPtrOutputWithContext(context.Background())
}

func (i *taskDefinitionLinuxParametersPtrType) ToTaskDefinitionLinuxParametersPtrOutputWithContext(ctx context.Context) TaskDefinitionLinuxParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionLinuxParametersPtrOutput)
}

// The Linux-specific options that are applied to the container, such as Linux [KernelCapabilities](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_KernelCapabilities.html).
type TaskDefinitionLinuxParametersOutput struct{ *pulumi.OutputState }

func (TaskDefinitionLinuxParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionLinuxParameters)(nil)).Elem()
}

func (o TaskDefinitionLinuxParametersOutput) ToTaskDefinitionLinuxParametersOutput() TaskDefinitionLinuxParametersOutput {
	return o
}

func (o TaskDefinitionLinuxParametersOutput) ToTaskDefinitionLinuxParametersOutputWithContext(ctx context.Context) TaskDefinitionLinuxParametersOutput {
	return o
}

func (o TaskDefinitionLinuxParametersOutput) ToTaskDefinitionLinuxParametersPtrOutput() TaskDefinitionLinuxParametersPtrOutput {
	return o.ToTaskDefinitionLinuxParametersPtrOutputWithContext(context.Background())
}

func (o TaskDefinitionLinuxParametersOutput) ToTaskDefinitionLinuxParametersPtrOutputWithContext(ctx context.Context) TaskDefinitionLinuxParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskDefinitionLinuxParameters) *TaskDefinitionLinuxParameters {
		return &v
	}).(TaskDefinitionLinuxParametersPtrOutput)
}

// The Linux capabilities for the container that are added to or dropped from the default configuration provided by Docker.
//
//	For tasks that use the Fargate launch type, ``capabilities`` is supported for all platform versions but the ``add`` parameter is only supported if using platform version 1.4.0 or later.
func (o TaskDefinitionLinuxParametersOutput) Capabilities() TaskDefinitionKernelCapabilitiesPtrOutput {
	return o.ApplyT(func(v TaskDefinitionLinuxParameters) *TaskDefinitionKernelCapabilities { return v.Capabilities }).(TaskDefinitionKernelCapabilitiesPtrOutput)
}

// Any host devices to expose to the container. This parameter maps to “Devices“ in the docker container create command and the “--device“ option to docker run.
//
//	If you're using tasks that use the Fargate launch type, the ``devices`` parameter isn't supported.
func (o TaskDefinitionLinuxParametersOutput) Devices() TaskDefinitionDeviceArrayOutput {
	return o.ApplyT(func(v TaskDefinitionLinuxParameters) []TaskDefinitionDevice { return v.Devices }).(TaskDefinitionDeviceArrayOutput)
}

// Run an “init“ process inside the container that forwards signals and reaps processes. This parameter maps to the “--init“ option to docker run. This parameter requires version 1.25 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: “sudo docker version --format '{{.Server.APIVersion}}'“
func (o TaskDefinitionLinuxParametersOutput) InitProcessEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TaskDefinitionLinuxParameters) *bool { return v.InitProcessEnabled }).(pulumi.BoolPtrOutput)
}

// The total amount of swap memory (in MiB) a container can use. This parameter will be translated to the “--memory-swap“ option to docker run where the value would be the sum of the container memory plus the “maxSwap“ value.
//
//	If a ``maxSwap`` value of ``0`` is specified, the container will not use swap. Accepted values are ``0`` or any positive integer. If the ``maxSwap`` parameter is omitted, the container will use the swap configuration for the container instance it is running on. A ``maxSwap`` value must be set for the ``swappiness`` parameter to be used.
//	 If you're using tasks that use the Fargate launch type, the ``maxSwap`` parameter isn't supported.
//	If you're using tasks on Amazon Linux 2023 the ``swappiness`` parameter isn't supported.
func (o TaskDefinitionLinuxParametersOutput) MaxSwap() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskDefinitionLinuxParameters) *int { return v.MaxSwap }).(pulumi.IntPtrOutput)
}

// The value for the size (in MiB) of the “/dev/shm“ volume. This parameter maps to the “--shm-size“ option to docker run.
//
//	If you are using tasks that use the Fargate launch type, the ``sharedMemorySize`` parameter is not supported.
func (o TaskDefinitionLinuxParametersOutput) SharedMemorySize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskDefinitionLinuxParameters) *int { return v.SharedMemorySize }).(pulumi.IntPtrOutput)
}

// This allows you to tune a container's memory swappiness behavior. A “swappiness“ value of “0“ will cause swapping to not happen unless absolutely necessary. A “swappiness“ value of “100“ will cause pages to be swapped very aggressively. Accepted values are whole numbers between “0“ and “100“. If the “swappiness“ parameter is not specified, a default value of “60“ is used. If a value is not specified for “maxSwap“ then this parameter is ignored. This parameter maps to the “--memory-swappiness“ option to docker run.
//
//	 If you're using tasks that use the Fargate launch type, the ``swappiness`` parameter isn't supported.
//	If you're using tasks on Amazon Linux 2023 the ``swappiness`` parameter isn't supported.
func (o TaskDefinitionLinuxParametersOutput) Swappiness() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskDefinitionLinuxParameters) *int { return v.Swappiness }).(pulumi.IntPtrOutput)
}

// The container path, mount options, and size (in MiB) of the tmpfs mount. This parameter maps to the “--tmpfs“ option to docker run.
//
//	If you're using tasks that use the Fargate launch type, the ``tmpfs`` parameter isn't supported.
func (o TaskDefinitionLinuxParametersOutput) Tmpfs() TaskDefinitionTmpfsArrayOutput {
	return o.ApplyT(func(v TaskDefinitionLinuxParameters) []TaskDefinitionTmpfs { return v.Tmpfs }).(TaskDefinitionTmpfsArrayOutput)
}

type TaskDefinitionLinuxParametersPtrOutput struct{ *pulumi.OutputState }

func (TaskDefinitionLinuxParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionLinuxParameters)(nil)).Elem()
}

func (o TaskDefinitionLinuxParametersPtrOutput) ToTaskDefinitionLinuxParametersPtrOutput() TaskDefinitionLinuxParametersPtrOutput {
	return o
}

func (o TaskDefinitionLinuxParametersPtrOutput) ToTaskDefinitionLinuxParametersPtrOutputWithContext(ctx context.Context) TaskDefinitionLinuxParametersPtrOutput {
	return o
}

func (o TaskDefinitionLinuxParametersPtrOutput) Elem() TaskDefinitionLinuxParametersOutput {
	return o.ApplyT(func(v *TaskDefinitionLinuxParameters) TaskDefinitionLinuxParameters {
		if v != nil {
			return *v
		}
		var ret TaskDefinitionLinuxParameters
		return ret
	}).(TaskDefinitionLinuxParametersOutput)
}

// The Linux capabilities for the container that are added to or dropped from the default configuration provided by Docker.
//
//	For tasks that use the Fargate launch type, ``capabilities`` is supported for all platform versions but the ``add`` parameter is only supported if using platform version 1.4.0 or later.
func (o TaskDefinitionLinuxParametersPtrOutput) Capabilities() TaskDefinitionKernelCapabilitiesPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionLinuxParameters) *TaskDefinitionKernelCapabilities {
		if v == nil {
			return nil
		}
		return v.Capabilities
	}).(TaskDefinitionKernelCapabilitiesPtrOutput)
}

// Any host devices to expose to the container. This parameter maps to “Devices“ in the docker container create command and the “--device“ option to docker run.
//
//	If you're using tasks that use the Fargate launch type, the ``devices`` parameter isn't supported.
func (o TaskDefinitionLinuxParametersPtrOutput) Devices() TaskDefinitionDeviceArrayOutput {
	return o.ApplyT(func(v *TaskDefinitionLinuxParameters) []TaskDefinitionDevice {
		if v == nil {
			return nil
		}
		return v.Devices
	}).(TaskDefinitionDeviceArrayOutput)
}

// Run an “init“ process inside the container that forwards signals and reaps processes. This parameter maps to the “--init“ option to docker run. This parameter requires version 1.25 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: “sudo docker version --format '{{.Server.APIVersion}}'“
func (o TaskDefinitionLinuxParametersPtrOutput) InitProcessEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionLinuxParameters) *bool {
		if v == nil {
			return nil
		}
		return v.InitProcessEnabled
	}).(pulumi.BoolPtrOutput)
}

// The total amount of swap memory (in MiB) a container can use. This parameter will be translated to the “--memory-swap“ option to docker run where the value would be the sum of the container memory plus the “maxSwap“ value.
//
//	If a ``maxSwap`` value of ``0`` is specified, the container will not use swap. Accepted values are ``0`` or any positive integer. If the ``maxSwap`` parameter is omitted, the container will use the swap configuration for the container instance it is running on. A ``maxSwap`` value must be set for the ``swappiness`` parameter to be used.
//	 If you're using tasks that use the Fargate launch type, the ``maxSwap`` parameter isn't supported.
//	If you're using tasks on Amazon Linux 2023 the ``swappiness`` parameter isn't supported.
func (o TaskDefinitionLinuxParametersPtrOutput) MaxSwap() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionLinuxParameters) *int {
		if v == nil {
			return nil
		}
		return v.MaxSwap
	}).(pulumi.IntPtrOutput)
}

// The value for the size (in MiB) of the “/dev/shm“ volume. This parameter maps to the “--shm-size“ option to docker run.
//
//	If you are using tasks that use the Fargate launch type, the ``sharedMemorySize`` parameter is not supported.
func (o TaskDefinitionLinuxParametersPtrOutput) SharedMemorySize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionLinuxParameters) *int {
		if v == nil {
			return nil
		}
		return v.SharedMemorySize
	}).(pulumi.IntPtrOutput)
}

// This allows you to tune a container's memory swappiness behavior. A “swappiness“ value of “0“ will cause swapping to not happen unless absolutely necessary. A “swappiness“ value of “100“ will cause pages to be swapped very aggressively. Accepted values are whole numbers between “0“ and “100“. If the “swappiness“ parameter is not specified, a default value of “60“ is used. If a value is not specified for “maxSwap“ then this parameter is ignored. This parameter maps to the “--memory-swappiness“ option to docker run.
//
//	 If you're using tasks that use the Fargate launch type, the ``swappiness`` parameter isn't supported.
//	If you're using tasks on Amazon Linux 2023 the ``swappiness`` parameter isn't supported.
func (o TaskDefinitionLinuxParametersPtrOutput) Swappiness() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionLinuxParameters) *int {
		if v == nil {
			return nil
		}
		return v.Swappiness
	}).(pulumi.IntPtrOutput)
}

// The container path, mount options, and size (in MiB) of the tmpfs mount. This parameter maps to the “--tmpfs“ option to docker run.
//
//	If you're using tasks that use the Fargate launch type, the ``tmpfs`` parameter isn't supported.
func (o TaskDefinitionLinuxParametersPtrOutput) Tmpfs() TaskDefinitionTmpfsArrayOutput {
	return o.ApplyT(func(v *TaskDefinitionLinuxParameters) []TaskDefinitionTmpfs {
		if v == nil {
			return nil
		}
		return v.Tmpfs
	}).(TaskDefinitionTmpfsArrayOutput)
}

// The “LogConfiguration“ property specifies log configuration options to send to a custom log driver for the container.
type TaskDefinitionLogConfiguration struct {
	// The log driver to use for the container.
	//  For tasks on FARGATElong, the supported log drivers are ``awslogs``, ``splunk``, and ``awsfirelens``.
	//  For tasks hosted on Amazon EC2 instances, the supported log drivers are ``awslogs``, ``fluentd``, ``gelf``, ``json-file``, ``journald``, ``syslog``, ``splunk``, and ``awsfirelens``.
	//  For more information about using the ``awslogs`` log driver, see [Send Amazon ECS logs to CloudWatch](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_awslogs.html) in the *Amazon Elastic Container Service Developer Guide*.
	//  For more information about using the ``awsfirelens`` log driver, see [Send Amazon ECS logs to an service or Partner](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html).
	//   If you have a custom driver that isn't listed, you can fork the Amazon ECS container agent project that's [available on GitHub](https://docs.aws.amazon.com/https://github.com/aws/amazon-ecs-agent) and customize it to work with that driver. We encourage you to submit pull requests for changes that you would like to have included. However, we don't currently provide support for running modified copies of this software.
	LogDriver string `pulumi:"logDriver"`
	// The configuration options to send to the log driver.
	//  The options you can specify depend on the log driver. Some of the options you can specify when you use the ``awslogs`` log driver to route logs to Amazon CloudWatch include the following:
	//   + awslogs-create-group Required: No Specify whether you want the log group to be created automatically. If this option isn't specified, it defaults to false. Your IAM policy must include the logs:CreateLogGroup permission before you attempt to use awslogs-create-group. + awslogs-region Required: Yes Specify the Region that the awslogs log driver is to send your Docker logs to. You can choose to send all of your logs from clusters in different Regions to a single region in CloudWatch Logs. This is so that they're all visible in one location. Otherwise, you can separate them by Region for more granularity. Make sure that the specified log group exists in the Region that you specify with this option. + awslogs-group Required: Yes Make sure to specify a log group that the awslogs log driver sends its log streams to. + awslogs-stream-prefix Required: Yes, when using Fargate.Optional when using EC2. Use the awslogs-stream-prefix option to associate a log stream with the specified prefix, the container name, and the ID of the Amazon ECS task that the container belongs to. If you specify a prefix with this option, then the log stream takes the format prefix-name/container-name/ecs-task-id. If you don't specify a prefix with this option, then the log stream is named after the container ID that's assigned by the Docker daemon on the container instance. Because it's difficult to trace logs back to the container that sent them with just the Docker container ID (which is only available on the container instance), we recommend that you specify a prefix with this option. For Amazon ECS services, you can use the service name as the prefix. Doing so, you can trace log streams to the service that the container belongs to, the name of the container that sent them, and the ID of the task that the container belongs to. You must specify a stream-prefix for your logs to have your logs appear in the Log pane when using the Amazon ECS console. + awslogs-datetime-format Required: No This option defines a multiline start pattern in Python strftime format. A log message consists of a line that matches the pattern and any following lines that don’t match the pattern. The matched line is the delimiter between log messages. One example of a use case for using this format is for parsing output such as a stack dump, which might otherwise be logged in multiple entries. The correct pattern allows it to be captured in a single entry. For more information, see awslogs-datetime-format. You cannot configure both the awslogs-datetime-format and awslogs-multiline-pattern options. Multiline logging performs regular expression parsing and matching of all log messages. This might have a negative impact on logging performance. + awslogs-multiline-pattern Required: No This option defines a multiline start pattern that uses a regular expression. A log message consists of a line that matches the pattern and any following lines that don’t match the pattern. The matched line is the delimiter between log messages. For more information, see awslogs-multiline-pattern. This option is ignored if awslogs-datetime-format is also configured. You cannot configure both the awslogs-datetime-format and awslogs-multiline-pattern options. Multiline logging performs regular expression parsing and matching of all log messages. This might have a negative impact on logging performance.
	//      The following options apply to all supported log drivers.
	//   + mode Required: No Valid values: non-blocking | blocking This option defines the delivery mode of log messages from the container to the log driver specified using logDriver. The delivery mode you choose affects application availability when the flow of logs from container is interrupted. If you use the blocking mode and the flow of logs is interrupted, calls from container code to write to the stdout and stderr streams will block. The logging thread of the application will block as a result. This may cause the application to become unresponsive and lead to container healthcheck failure. If you use the non-blocking mode, the container's logs are instead stored in an in-memory intermediate buffer configured with the max-buffer-size option. This prevents the application from becoming unresponsive when logs cannot be sent. We recommend using this mode if you want to ensure service availability and are okay with some log loss. For more information, see Preventing log loss with non-blocking mode in the awslogs container log driver. You can set a default mode for all containers in a specific Region by using the defaultLogDriverMode account setting. If you don't specify the mode option or configure the account setting, Amazon ECS will default to the non-blocking mode. For more information about the account setting, see Default log driver mode in the Amazon Elastic Container Service Developer Guide. On June 25, 2025, Amazon ECS changed the default log driver mode from blocking to non-blocking to prioritize task availability over logging. To continue using the blocking mode after this change, do one of the following: Set the mode option in your container definition's logConfiguration as blocking. Set the defaultLogDriverMode account setting to blocking. + max-buffer-size Required: No Default value: 10m When non-blocking mode is used, the max-buffer-size log option controls the size of the buffer that's used for intermediate message storage. Make sure to specify an adequate buffer size based on your application. When the buffer fills up, further logs cannot be stored. Logs that cannot be stored are lost.
	//      To route logs using the ``splunk`` log router, you need to specify a ``splunk-token`` and a ``splunk-url``.
	//      When you use the ``awsfirelens`` log router to route logs to an AWS Service or AWS Partner Network destination for log storage and analytics, you can set the ``log-driver-buffer-limit`` option to limit the number of events that are buffered in memory, before being sent to the log router container. It can help to resolve potential log loss issue because high throughput might result in memory running out for the buffer inside of Docker.
	//      Other options you can specify when using ``awsfirelens`` to route logs depend on the destination. When you export logs to Amazon Data Firehose, you can specify the AWS Region with ``region`` and a name for the log stream with ``delivery_stream``.
	//      When you export logs to Amazon Kinesis Data Streams, you can specify an AWS Region with ``region`` and a data stream name with ``stream``.
	//       When you export logs to Amazon OpenSearch Service, you can specify options like ``Name``, ``Host`` (OpenSearch Service endpoint without protocol), ``Port``, ``Index``, ``Type``, ``Aws_auth``, ``Aws_region``, ``Suppress_Type_Name``, and ``tls``. For more information, see [Under the hood: FireLens for Amazon ECS Tasks](https://docs.aws.amazon.com/containers/under-the-hood-firelens-for-amazon-ecs-tasks/).
	//      When you export logs to Amazon S3, you can specify the bucket using the ``bucket`` option. You can also specify ``region``, ``total_file_size``, ``upload_timeout``, and ``use_put_object`` as options.
	//      This parameter requires version 1.19 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: ``sudo docker version --format '{{.Server.APIVersion}}'``
	Options map[string]string `pulumi:"options"`
	// The secrets to pass to the log configuration. For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the *Amazon Elastic Container Service Developer Guide*.
	SecretOptions []TaskDefinitionSecret `pulumi:"secretOptions"`
}

// TaskDefinitionLogConfigurationInput is an input type that accepts TaskDefinitionLogConfigurationArgs and TaskDefinitionLogConfigurationOutput values.
// You can construct a concrete instance of `TaskDefinitionLogConfigurationInput` via:
//
//	TaskDefinitionLogConfigurationArgs{...}
type TaskDefinitionLogConfigurationInput interface {
	pulumi.Input

	ToTaskDefinitionLogConfigurationOutput() TaskDefinitionLogConfigurationOutput
	ToTaskDefinitionLogConfigurationOutputWithContext(context.Context) TaskDefinitionLogConfigurationOutput
}

// The “LogConfiguration“ property specifies log configuration options to send to a custom log driver for the container.
type TaskDefinitionLogConfigurationArgs struct {
	// The log driver to use for the container.
	//  For tasks on FARGATElong, the supported log drivers are ``awslogs``, ``splunk``, and ``awsfirelens``.
	//  For tasks hosted on Amazon EC2 instances, the supported log drivers are ``awslogs``, ``fluentd``, ``gelf``, ``json-file``, ``journald``, ``syslog``, ``splunk``, and ``awsfirelens``.
	//  For more information about using the ``awslogs`` log driver, see [Send Amazon ECS logs to CloudWatch](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_awslogs.html) in the *Amazon Elastic Container Service Developer Guide*.
	//  For more information about using the ``awsfirelens`` log driver, see [Send Amazon ECS logs to an service or Partner](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html).
	//   If you have a custom driver that isn't listed, you can fork the Amazon ECS container agent project that's [available on GitHub](https://docs.aws.amazon.com/https://github.com/aws/amazon-ecs-agent) and customize it to work with that driver. We encourage you to submit pull requests for changes that you would like to have included. However, we don't currently provide support for running modified copies of this software.
	LogDriver pulumi.StringInput `pulumi:"logDriver"`
	// The configuration options to send to the log driver.
	//  The options you can specify depend on the log driver. Some of the options you can specify when you use the ``awslogs`` log driver to route logs to Amazon CloudWatch include the following:
	//   + awslogs-create-group Required: No Specify whether you want the log group to be created automatically. If this option isn't specified, it defaults to false. Your IAM policy must include the logs:CreateLogGroup permission before you attempt to use awslogs-create-group. + awslogs-region Required: Yes Specify the Region that the awslogs log driver is to send your Docker logs to. You can choose to send all of your logs from clusters in different Regions to a single region in CloudWatch Logs. This is so that they're all visible in one location. Otherwise, you can separate them by Region for more granularity. Make sure that the specified log group exists in the Region that you specify with this option. + awslogs-group Required: Yes Make sure to specify a log group that the awslogs log driver sends its log streams to. + awslogs-stream-prefix Required: Yes, when using Fargate.Optional when using EC2. Use the awslogs-stream-prefix option to associate a log stream with the specified prefix, the container name, and the ID of the Amazon ECS task that the container belongs to. If you specify a prefix with this option, then the log stream takes the format prefix-name/container-name/ecs-task-id. If you don't specify a prefix with this option, then the log stream is named after the container ID that's assigned by the Docker daemon on the container instance. Because it's difficult to trace logs back to the container that sent them with just the Docker container ID (which is only available on the container instance), we recommend that you specify a prefix with this option. For Amazon ECS services, you can use the service name as the prefix. Doing so, you can trace log streams to the service that the container belongs to, the name of the container that sent them, and the ID of the task that the container belongs to. You must specify a stream-prefix for your logs to have your logs appear in the Log pane when using the Amazon ECS console. + awslogs-datetime-format Required: No This option defines a multiline start pattern in Python strftime format. A log message consists of a line that matches the pattern and any following lines that don’t match the pattern. The matched line is the delimiter between log messages. One example of a use case for using this format is for parsing output such as a stack dump, which might otherwise be logged in multiple entries. The correct pattern allows it to be captured in a single entry. For more information, see awslogs-datetime-format. You cannot configure both the awslogs-datetime-format and awslogs-multiline-pattern options. Multiline logging performs regular expression parsing and matching of all log messages. This might have a negative impact on logging performance. + awslogs-multiline-pattern Required: No This option defines a multiline start pattern that uses a regular expression. A log message consists of a line that matches the pattern and any following lines that don’t match the pattern. The matched line is the delimiter between log messages. For more information, see awslogs-multiline-pattern. This option is ignored if awslogs-datetime-format is also configured. You cannot configure both the awslogs-datetime-format and awslogs-multiline-pattern options. Multiline logging performs regular expression parsing and matching of all log messages. This might have a negative impact on logging performance.
	//      The following options apply to all supported log drivers.
	//   + mode Required: No Valid values: non-blocking | blocking This option defines the delivery mode of log messages from the container to the log driver specified using logDriver. The delivery mode you choose affects application availability when the flow of logs from container is interrupted. If you use the blocking mode and the flow of logs is interrupted, calls from container code to write to the stdout and stderr streams will block. The logging thread of the application will block as a result. This may cause the application to become unresponsive and lead to container healthcheck failure. If you use the non-blocking mode, the container's logs are instead stored in an in-memory intermediate buffer configured with the max-buffer-size option. This prevents the application from becoming unresponsive when logs cannot be sent. We recommend using this mode if you want to ensure service availability and are okay with some log loss. For more information, see Preventing log loss with non-blocking mode in the awslogs container log driver. You can set a default mode for all containers in a specific Region by using the defaultLogDriverMode account setting. If you don't specify the mode option or configure the account setting, Amazon ECS will default to the non-blocking mode. For more information about the account setting, see Default log driver mode in the Amazon Elastic Container Service Developer Guide. On June 25, 2025, Amazon ECS changed the default log driver mode from blocking to non-blocking to prioritize task availability over logging. To continue using the blocking mode after this change, do one of the following: Set the mode option in your container definition's logConfiguration as blocking. Set the defaultLogDriverMode account setting to blocking. + max-buffer-size Required: No Default value: 10m When non-blocking mode is used, the max-buffer-size log option controls the size of the buffer that's used for intermediate message storage. Make sure to specify an adequate buffer size based on your application. When the buffer fills up, further logs cannot be stored. Logs that cannot be stored are lost.
	//      To route logs using the ``splunk`` log router, you need to specify a ``splunk-token`` and a ``splunk-url``.
	//      When you use the ``awsfirelens`` log router to route logs to an AWS Service or AWS Partner Network destination for log storage and analytics, you can set the ``log-driver-buffer-limit`` option to limit the number of events that are buffered in memory, before being sent to the log router container. It can help to resolve potential log loss issue because high throughput might result in memory running out for the buffer inside of Docker.
	//      Other options you can specify when using ``awsfirelens`` to route logs depend on the destination. When you export logs to Amazon Data Firehose, you can specify the AWS Region with ``region`` and a name for the log stream with ``delivery_stream``.
	//      When you export logs to Amazon Kinesis Data Streams, you can specify an AWS Region with ``region`` and a data stream name with ``stream``.
	//       When you export logs to Amazon OpenSearch Service, you can specify options like ``Name``, ``Host`` (OpenSearch Service endpoint without protocol), ``Port``, ``Index``, ``Type``, ``Aws_auth``, ``Aws_region``, ``Suppress_Type_Name``, and ``tls``. For more information, see [Under the hood: FireLens for Amazon ECS Tasks](https://docs.aws.amazon.com/containers/under-the-hood-firelens-for-amazon-ecs-tasks/).
	//      When you export logs to Amazon S3, you can specify the bucket using the ``bucket`` option. You can also specify ``region``, ``total_file_size``, ``upload_timeout``, and ``use_put_object`` as options.
	//      This parameter requires version 1.19 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: ``sudo docker version --format '{{.Server.APIVersion}}'``
	Options pulumi.StringMapInput `pulumi:"options"`
	// The secrets to pass to the log configuration. For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the *Amazon Elastic Container Service Developer Guide*.
	SecretOptions TaskDefinitionSecretArrayInput `pulumi:"secretOptions"`
}

func (TaskDefinitionLogConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionLogConfiguration)(nil)).Elem()
}

func (i TaskDefinitionLogConfigurationArgs) ToTaskDefinitionLogConfigurationOutput() TaskDefinitionLogConfigurationOutput {
	return i.ToTaskDefinitionLogConfigurationOutputWithContext(context.Background())
}

func (i TaskDefinitionLogConfigurationArgs) ToTaskDefinitionLogConfigurationOutputWithContext(ctx context.Context) TaskDefinitionLogConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionLogConfigurationOutput)
}

func (i TaskDefinitionLogConfigurationArgs) ToTaskDefinitionLogConfigurationPtrOutput() TaskDefinitionLogConfigurationPtrOutput {
	return i.ToTaskDefinitionLogConfigurationPtrOutputWithContext(context.Background())
}

func (i TaskDefinitionLogConfigurationArgs) ToTaskDefinitionLogConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionLogConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionLogConfigurationOutput).ToTaskDefinitionLogConfigurationPtrOutputWithContext(ctx)
}

// TaskDefinitionLogConfigurationPtrInput is an input type that accepts TaskDefinitionLogConfigurationArgs, TaskDefinitionLogConfigurationPtr and TaskDefinitionLogConfigurationPtrOutput values.
// You can construct a concrete instance of `TaskDefinitionLogConfigurationPtrInput` via:
//
//	        TaskDefinitionLogConfigurationArgs{...}
//
//	or:
//
//	        nil
type TaskDefinitionLogConfigurationPtrInput interface {
	pulumi.Input

	ToTaskDefinitionLogConfigurationPtrOutput() TaskDefinitionLogConfigurationPtrOutput
	ToTaskDefinitionLogConfigurationPtrOutputWithContext(context.Context) TaskDefinitionLogConfigurationPtrOutput
}

type taskDefinitionLogConfigurationPtrType TaskDefinitionLogConfigurationArgs

func TaskDefinitionLogConfigurationPtr(v *TaskDefinitionLogConfigurationArgs) TaskDefinitionLogConfigurationPtrInput {
	return (*taskDefinitionLogConfigurationPtrType)(v)
}

func (*taskDefinitionLogConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionLogConfiguration)(nil)).Elem()
}

func (i *taskDefinitionLogConfigurationPtrType) ToTaskDefinitionLogConfigurationPtrOutput() TaskDefinitionLogConfigurationPtrOutput {
	return i.ToTaskDefinitionLogConfigurationPtrOutputWithContext(context.Background())
}

func (i *taskDefinitionLogConfigurationPtrType) ToTaskDefinitionLogConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionLogConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionLogConfigurationPtrOutput)
}

// The “LogConfiguration“ property specifies log configuration options to send to a custom log driver for the container.
type TaskDefinitionLogConfigurationOutput struct{ *pulumi.OutputState }

func (TaskDefinitionLogConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionLogConfiguration)(nil)).Elem()
}

func (o TaskDefinitionLogConfigurationOutput) ToTaskDefinitionLogConfigurationOutput() TaskDefinitionLogConfigurationOutput {
	return o
}

func (o TaskDefinitionLogConfigurationOutput) ToTaskDefinitionLogConfigurationOutputWithContext(ctx context.Context) TaskDefinitionLogConfigurationOutput {
	return o
}

func (o TaskDefinitionLogConfigurationOutput) ToTaskDefinitionLogConfigurationPtrOutput() TaskDefinitionLogConfigurationPtrOutput {
	return o.ToTaskDefinitionLogConfigurationPtrOutputWithContext(context.Background())
}

func (o TaskDefinitionLogConfigurationOutput) ToTaskDefinitionLogConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionLogConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskDefinitionLogConfiguration) *TaskDefinitionLogConfiguration {
		return &v
	}).(TaskDefinitionLogConfigurationPtrOutput)
}

// The log driver to use for the container.
//
//	For tasks on FARGATElong, the supported log drivers are ``awslogs``, ``splunk``, and ``awsfirelens``.
//	For tasks hosted on Amazon EC2 instances, the supported log drivers are ``awslogs``, ``fluentd``, ``gelf``, ``json-file``, ``journald``, ``syslog``, ``splunk``, and ``awsfirelens``.
//	For more information about using the ``awslogs`` log driver, see [Send Amazon ECS logs to CloudWatch](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_awslogs.html) in the *Amazon Elastic Container Service Developer Guide*.
//	For more information about using the ``awsfirelens`` log driver, see [Send Amazon ECS logs to an service or Partner](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html).
//	 If you have a custom driver that isn't listed, you can fork the Amazon ECS container agent project that's [available on GitHub](https://docs.aws.amazon.com/https://github.com/aws/amazon-ecs-agent) and customize it to work with that driver. We encourage you to submit pull requests for changes that you would like to have included. However, we don't currently provide support for running modified copies of this software.
func (o TaskDefinitionLogConfigurationOutput) LogDriver() pulumi.StringOutput {
	return o.ApplyT(func(v TaskDefinitionLogConfiguration) string { return v.LogDriver }).(pulumi.StringOutput)
}

// The configuration options to send to the log driver.
//
//	The options you can specify depend on the log driver. Some of the options you can specify when you use the ``awslogs`` log driver to route logs to Amazon CloudWatch include the following:
//	 + awslogs-create-group Required: No Specify whether you want the log group to be created automatically. If this option isn't specified, it defaults to false. Your IAM policy must include the logs:CreateLogGroup permission before you attempt to use awslogs-create-group. + awslogs-region Required: Yes Specify the Region that the awslogs log driver is to send your Docker logs to. You can choose to send all of your logs from clusters in different Regions to a single region in CloudWatch Logs. This is so that they're all visible in one location. Otherwise, you can separate them by Region for more granularity. Make sure that the specified log group exists in the Region that you specify with this option. + awslogs-group Required: Yes Make sure to specify a log group that the awslogs log driver sends its log streams to. + awslogs-stream-prefix Required: Yes, when using Fargate.Optional when using EC2. Use the awslogs-stream-prefix option to associate a log stream with the specified prefix, the container name, and the ID of the Amazon ECS task that the container belongs to. If you specify a prefix with this option, then the log stream takes the format prefix-name/container-name/ecs-task-id. If you don't specify a prefix with this option, then the log stream is named after the container ID that's assigned by the Docker daemon on the container instance. Because it's difficult to trace logs back to the container that sent them with just the Docker container ID (which is only available on the container instance), we recommend that you specify a prefix with this option. For Amazon ECS services, you can use the service name as the prefix. Doing so, you can trace log streams to the service that the container belongs to, the name of the container that sent them, and the ID of the task that the container belongs to. You must specify a stream-prefix for your logs to have your logs appear in the Log pane when using the Amazon ECS console. + awslogs-datetime-format Required: No This option defines a multiline start pattern in Python strftime format. A log message consists of a line that matches the pattern and any following lines that don’t match the pattern. The matched line is the delimiter between log messages. One example of a use case for using this format is for parsing output such as a stack dump, which might otherwise be logged in multiple entries. The correct pattern allows it to be captured in a single entry. For more information, see awslogs-datetime-format. You cannot configure both the awslogs-datetime-format and awslogs-multiline-pattern options. Multiline logging performs regular expression parsing and matching of all log messages. This might have a negative impact on logging performance. + awslogs-multiline-pattern Required: No This option defines a multiline start pattern that uses a regular expression. A log message consists of a line that matches the pattern and any following lines that don’t match the pattern. The matched line is the delimiter between log messages. For more information, see awslogs-multiline-pattern. This option is ignored if awslogs-datetime-format is also configured. You cannot configure both the awslogs-datetime-format and awslogs-multiline-pattern options. Multiline logging performs regular expression parsing and matching of all log messages. This might have a negative impact on logging performance.
//	    The following options apply to all supported log drivers.
//	 + mode Required: No Valid values: non-blocking | blocking This option defines the delivery mode of log messages from the container to the log driver specified using logDriver. The delivery mode you choose affects application availability when the flow of logs from container is interrupted. If you use the blocking mode and the flow of logs is interrupted, calls from container code to write to the stdout and stderr streams will block. The logging thread of the application will block as a result. This may cause the application to become unresponsive and lead to container healthcheck failure. If you use the non-blocking mode, the container's logs are instead stored in an in-memory intermediate buffer configured with the max-buffer-size option. This prevents the application from becoming unresponsive when logs cannot be sent. We recommend using this mode if you want to ensure service availability and are okay with some log loss. For more information, see Preventing log loss with non-blocking mode in the awslogs container log driver. You can set a default mode for all containers in a specific Region by using the defaultLogDriverMode account setting. If you don't specify the mode option or configure the account setting, Amazon ECS will default to the non-blocking mode. For more information about the account setting, see Default log driver mode in the Amazon Elastic Container Service Developer Guide. On June 25, 2025, Amazon ECS changed the default log driver mode from blocking to non-blocking to prioritize task availability over logging. To continue using the blocking mode after this change, do one of the following: Set the mode option in your container definition's logConfiguration as blocking. Set the defaultLogDriverMode account setting to blocking. + max-buffer-size Required: No Default value: 10m When non-blocking mode is used, the max-buffer-size log option controls the size of the buffer that's used for intermediate message storage. Make sure to specify an adequate buffer size based on your application. When the buffer fills up, further logs cannot be stored. Logs that cannot be stored are lost.
//	    To route logs using the ``splunk`` log router, you need to specify a ``splunk-token`` and a ``splunk-url``.
//	    When you use the ``awsfirelens`` log router to route logs to an AWS Service or AWS Partner Network destination for log storage and analytics, you can set the ``log-driver-buffer-limit`` option to limit the number of events that are buffered in memory, before being sent to the log router container. It can help to resolve potential log loss issue because high throughput might result in memory running out for the buffer inside of Docker.
//	    Other options you can specify when using ``awsfirelens`` to route logs depend on the destination. When you export logs to Amazon Data Firehose, you can specify the AWS Region with ``region`` and a name for the log stream with ``delivery_stream``.
//	    When you export logs to Amazon Kinesis Data Streams, you can specify an AWS Region with ``region`` and a data stream name with ``stream``.
//	     When you export logs to Amazon OpenSearch Service, you can specify options like ``Name``, ``Host`` (OpenSearch Service endpoint without protocol), ``Port``, ``Index``, ``Type``, ``Aws_auth``, ``Aws_region``, ``Suppress_Type_Name``, and ``tls``. For more information, see [Under the hood: FireLens for Amazon ECS Tasks](https://docs.aws.amazon.com/containers/under-the-hood-firelens-for-amazon-ecs-tasks/).
//	    When you export logs to Amazon S3, you can specify the bucket using the ``bucket`` option. You can also specify ``region``, ``total_file_size``, ``upload_timeout``, and ``use_put_object`` as options.
//	    This parameter requires version 1.19 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: ``sudo docker version --format '{{.Server.APIVersion}}'``
func (o TaskDefinitionLogConfigurationOutput) Options() pulumi.StringMapOutput {
	return o.ApplyT(func(v TaskDefinitionLogConfiguration) map[string]string { return v.Options }).(pulumi.StringMapOutput)
}

// The secrets to pass to the log configuration. For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the *Amazon Elastic Container Service Developer Guide*.
func (o TaskDefinitionLogConfigurationOutput) SecretOptions() TaskDefinitionSecretArrayOutput {
	return o.ApplyT(func(v TaskDefinitionLogConfiguration) []TaskDefinitionSecret { return v.SecretOptions }).(TaskDefinitionSecretArrayOutput)
}

type TaskDefinitionLogConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TaskDefinitionLogConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionLogConfiguration)(nil)).Elem()
}

func (o TaskDefinitionLogConfigurationPtrOutput) ToTaskDefinitionLogConfigurationPtrOutput() TaskDefinitionLogConfigurationPtrOutput {
	return o
}

func (o TaskDefinitionLogConfigurationPtrOutput) ToTaskDefinitionLogConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionLogConfigurationPtrOutput {
	return o
}

func (o TaskDefinitionLogConfigurationPtrOutput) Elem() TaskDefinitionLogConfigurationOutput {
	return o.ApplyT(func(v *TaskDefinitionLogConfiguration) TaskDefinitionLogConfiguration {
		if v != nil {
			return *v
		}
		var ret TaskDefinitionLogConfiguration
		return ret
	}).(TaskDefinitionLogConfigurationOutput)
}

// The log driver to use for the container.
//
//	For tasks on FARGATElong, the supported log drivers are ``awslogs``, ``splunk``, and ``awsfirelens``.
//	For tasks hosted on Amazon EC2 instances, the supported log drivers are ``awslogs``, ``fluentd``, ``gelf``, ``json-file``, ``journald``, ``syslog``, ``splunk``, and ``awsfirelens``.
//	For more information about using the ``awslogs`` log driver, see [Send Amazon ECS logs to CloudWatch](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_awslogs.html) in the *Amazon Elastic Container Service Developer Guide*.
//	For more information about using the ``awsfirelens`` log driver, see [Send Amazon ECS logs to an service or Partner](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html).
//	 If you have a custom driver that isn't listed, you can fork the Amazon ECS container agent project that's [available on GitHub](https://docs.aws.amazon.com/https://github.com/aws/amazon-ecs-agent) and customize it to work with that driver. We encourage you to submit pull requests for changes that you would like to have included. However, we don't currently provide support for running modified copies of this software.
func (o TaskDefinitionLogConfigurationPtrOutput) LogDriver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionLogConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.LogDriver
	}).(pulumi.StringPtrOutput)
}

// The configuration options to send to the log driver.
//
//	The options you can specify depend on the log driver. Some of the options you can specify when you use the ``awslogs`` log driver to route logs to Amazon CloudWatch include the following:
//	 + awslogs-create-group Required: No Specify whether you want the log group to be created automatically. If this option isn't specified, it defaults to false. Your IAM policy must include the logs:CreateLogGroup permission before you attempt to use awslogs-create-group. + awslogs-region Required: Yes Specify the Region that the awslogs log driver is to send your Docker logs to. You can choose to send all of your logs from clusters in different Regions to a single region in CloudWatch Logs. This is so that they're all visible in one location. Otherwise, you can separate them by Region for more granularity. Make sure that the specified log group exists in the Region that you specify with this option. + awslogs-group Required: Yes Make sure to specify a log group that the awslogs log driver sends its log streams to. + awslogs-stream-prefix Required: Yes, when using Fargate.Optional when using EC2. Use the awslogs-stream-prefix option to associate a log stream with the specified prefix, the container name, and the ID of the Amazon ECS task that the container belongs to. If you specify a prefix with this option, then the log stream takes the format prefix-name/container-name/ecs-task-id. If you don't specify a prefix with this option, then the log stream is named after the container ID that's assigned by the Docker daemon on the container instance. Because it's difficult to trace logs back to the container that sent them with just the Docker container ID (which is only available on the container instance), we recommend that you specify a prefix with this option. For Amazon ECS services, you can use the service name as the prefix. Doing so, you can trace log streams to the service that the container belongs to, the name of the container that sent them, and the ID of the task that the container belongs to. You must specify a stream-prefix for your logs to have your logs appear in the Log pane when using the Amazon ECS console. + awslogs-datetime-format Required: No This option defines a multiline start pattern in Python strftime format. A log message consists of a line that matches the pattern and any following lines that don’t match the pattern. The matched line is the delimiter between log messages. One example of a use case for using this format is for parsing output such as a stack dump, which might otherwise be logged in multiple entries. The correct pattern allows it to be captured in a single entry. For more information, see awslogs-datetime-format. You cannot configure both the awslogs-datetime-format and awslogs-multiline-pattern options. Multiline logging performs regular expression parsing and matching of all log messages. This might have a negative impact on logging performance. + awslogs-multiline-pattern Required: No This option defines a multiline start pattern that uses a regular expression. A log message consists of a line that matches the pattern and any following lines that don’t match the pattern. The matched line is the delimiter between log messages. For more information, see awslogs-multiline-pattern. This option is ignored if awslogs-datetime-format is also configured. You cannot configure both the awslogs-datetime-format and awslogs-multiline-pattern options. Multiline logging performs regular expression parsing and matching of all log messages. This might have a negative impact on logging performance.
//	    The following options apply to all supported log drivers.
//	 + mode Required: No Valid values: non-blocking | blocking This option defines the delivery mode of log messages from the container to the log driver specified using logDriver. The delivery mode you choose affects application availability when the flow of logs from container is interrupted. If you use the blocking mode and the flow of logs is interrupted, calls from container code to write to the stdout and stderr streams will block. The logging thread of the application will block as a result. This may cause the application to become unresponsive and lead to container healthcheck failure. If you use the non-blocking mode, the container's logs are instead stored in an in-memory intermediate buffer configured with the max-buffer-size option. This prevents the application from becoming unresponsive when logs cannot be sent. We recommend using this mode if you want to ensure service availability and are okay with some log loss. For more information, see Preventing log loss with non-blocking mode in the awslogs container log driver. You can set a default mode for all containers in a specific Region by using the defaultLogDriverMode account setting. If you don't specify the mode option or configure the account setting, Amazon ECS will default to the non-blocking mode. For more information about the account setting, see Default log driver mode in the Amazon Elastic Container Service Developer Guide. On June 25, 2025, Amazon ECS changed the default log driver mode from blocking to non-blocking to prioritize task availability over logging. To continue using the blocking mode after this change, do one of the following: Set the mode option in your container definition's logConfiguration as blocking. Set the defaultLogDriverMode account setting to blocking. + max-buffer-size Required: No Default value: 10m When non-blocking mode is used, the max-buffer-size log option controls the size of the buffer that's used for intermediate message storage. Make sure to specify an adequate buffer size based on your application. When the buffer fills up, further logs cannot be stored. Logs that cannot be stored are lost.
//	    To route logs using the ``splunk`` log router, you need to specify a ``splunk-token`` and a ``splunk-url``.
//	    When you use the ``awsfirelens`` log router to route logs to an AWS Service or AWS Partner Network destination for log storage and analytics, you can set the ``log-driver-buffer-limit`` option to limit the number of events that are buffered in memory, before being sent to the log router container. It can help to resolve potential log loss issue because high throughput might result in memory running out for the buffer inside of Docker.
//	    Other options you can specify when using ``awsfirelens`` to route logs depend on the destination. When you export logs to Amazon Data Firehose, you can specify the AWS Region with ``region`` and a name for the log stream with ``delivery_stream``.
//	    When you export logs to Amazon Kinesis Data Streams, you can specify an AWS Region with ``region`` and a data stream name with ``stream``.
//	     When you export logs to Amazon OpenSearch Service, you can specify options like ``Name``, ``Host`` (OpenSearch Service endpoint without protocol), ``Port``, ``Index``, ``Type``, ``Aws_auth``, ``Aws_region``, ``Suppress_Type_Name``, and ``tls``. For more information, see [Under the hood: FireLens for Amazon ECS Tasks](https://docs.aws.amazon.com/containers/under-the-hood-firelens-for-amazon-ecs-tasks/).
//	    When you export logs to Amazon S3, you can specify the bucket using the ``bucket`` option. You can also specify ``region``, ``total_file_size``, ``upload_timeout``, and ``use_put_object`` as options.
//	    This parameter requires version 1.19 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: ``sudo docker version --format '{{.Server.APIVersion}}'``
func (o TaskDefinitionLogConfigurationPtrOutput) Options() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TaskDefinitionLogConfiguration) map[string]string {
		if v == nil {
			return nil
		}
		return v.Options
	}).(pulumi.StringMapOutput)
}

// The secrets to pass to the log configuration. For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the *Amazon Elastic Container Service Developer Guide*.
func (o TaskDefinitionLogConfigurationPtrOutput) SecretOptions() TaskDefinitionSecretArrayOutput {
	return o.ApplyT(func(v *TaskDefinitionLogConfiguration) []TaskDefinitionSecret {
		if v == nil {
			return nil
		}
		return v.SecretOptions
	}).(TaskDefinitionSecretArrayOutput)
}

// The details for a volume mount point that's used in a container definition.
type TaskDefinitionMountPoint struct {
	// The path on the container to mount the host volume at.
	ContainerPath *string `pulumi:"containerPath"`
	// If this value is ``true``, the container has read-only access to the volume. If this value is ``false``, then the container can write to the volume. The default value is ``false``.
	ReadOnly *bool `pulumi:"readOnly"`
	// The name of the volume to mount. Must be a volume name referenced in the ``name`` parameter of task definition ``volume``.
	SourceVolume *string `pulumi:"sourceVolume"`
}

// TaskDefinitionMountPointInput is an input type that accepts TaskDefinitionMountPointArgs and TaskDefinitionMountPointOutput values.
// You can construct a concrete instance of `TaskDefinitionMountPointInput` via:
//
//	TaskDefinitionMountPointArgs{...}
type TaskDefinitionMountPointInput interface {
	pulumi.Input

	ToTaskDefinitionMountPointOutput() TaskDefinitionMountPointOutput
	ToTaskDefinitionMountPointOutputWithContext(context.Context) TaskDefinitionMountPointOutput
}

// The details for a volume mount point that's used in a container definition.
type TaskDefinitionMountPointArgs struct {
	// The path on the container to mount the host volume at.
	ContainerPath pulumi.StringPtrInput `pulumi:"containerPath"`
	// If this value is ``true``, the container has read-only access to the volume. If this value is ``false``, then the container can write to the volume. The default value is ``false``.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// The name of the volume to mount. Must be a volume name referenced in the ``name`` parameter of task definition ``volume``.
	SourceVolume pulumi.StringPtrInput `pulumi:"sourceVolume"`
}

func (TaskDefinitionMountPointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionMountPoint)(nil)).Elem()
}

func (i TaskDefinitionMountPointArgs) ToTaskDefinitionMountPointOutput() TaskDefinitionMountPointOutput {
	return i.ToTaskDefinitionMountPointOutputWithContext(context.Background())
}

func (i TaskDefinitionMountPointArgs) ToTaskDefinitionMountPointOutputWithContext(ctx context.Context) TaskDefinitionMountPointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionMountPointOutput)
}

// TaskDefinitionMountPointArrayInput is an input type that accepts TaskDefinitionMountPointArray and TaskDefinitionMountPointArrayOutput values.
// You can construct a concrete instance of `TaskDefinitionMountPointArrayInput` via:
//
//	TaskDefinitionMountPointArray{ TaskDefinitionMountPointArgs{...} }
type TaskDefinitionMountPointArrayInput interface {
	pulumi.Input

	ToTaskDefinitionMountPointArrayOutput() TaskDefinitionMountPointArrayOutput
	ToTaskDefinitionMountPointArrayOutputWithContext(context.Context) TaskDefinitionMountPointArrayOutput
}

type TaskDefinitionMountPointArray []TaskDefinitionMountPointInput

func (TaskDefinitionMountPointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionMountPoint)(nil)).Elem()
}

func (i TaskDefinitionMountPointArray) ToTaskDefinitionMountPointArrayOutput() TaskDefinitionMountPointArrayOutput {
	return i.ToTaskDefinitionMountPointArrayOutputWithContext(context.Background())
}

func (i TaskDefinitionMountPointArray) ToTaskDefinitionMountPointArrayOutputWithContext(ctx context.Context) TaskDefinitionMountPointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionMountPointArrayOutput)
}

// The details for a volume mount point that's used in a container definition.
type TaskDefinitionMountPointOutput struct{ *pulumi.OutputState }

func (TaskDefinitionMountPointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionMountPoint)(nil)).Elem()
}

func (o TaskDefinitionMountPointOutput) ToTaskDefinitionMountPointOutput() TaskDefinitionMountPointOutput {
	return o
}

func (o TaskDefinitionMountPointOutput) ToTaskDefinitionMountPointOutputWithContext(ctx context.Context) TaskDefinitionMountPointOutput {
	return o
}

// The path on the container to mount the host volume at.
func (o TaskDefinitionMountPointOutput) ContainerPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionMountPoint) *string { return v.ContainerPath }).(pulumi.StringPtrOutput)
}

// If this value is “true“, the container has read-only access to the volume. If this value is “false“, then the container can write to the volume. The default value is “false“.
func (o TaskDefinitionMountPointOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TaskDefinitionMountPoint) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// The name of the volume to mount. Must be a volume name referenced in the “name“ parameter of task definition “volume“.
func (o TaskDefinitionMountPointOutput) SourceVolume() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionMountPoint) *string { return v.SourceVolume }).(pulumi.StringPtrOutput)
}

type TaskDefinitionMountPointArrayOutput struct{ *pulumi.OutputState }

func (TaskDefinitionMountPointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionMountPoint)(nil)).Elem()
}

func (o TaskDefinitionMountPointArrayOutput) ToTaskDefinitionMountPointArrayOutput() TaskDefinitionMountPointArrayOutput {
	return o
}

func (o TaskDefinitionMountPointArrayOutput) ToTaskDefinitionMountPointArrayOutputWithContext(ctx context.Context) TaskDefinitionMountPointArrayOutput {
	return o
}

func (o TaskDefinitionMountPointArrayOutput) Index(i pulumi.IntInput) TaskDefinitionMountPointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskDefinitionMountPoint {
		return vs[0].([]TaskDefinitionMountPoint)[vs[1].(int)]
	}).(TaskDefinitionMountPointOutput)
}

// The constraint on task placement in the task definition. For more information, see [Task placement constraints](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html) in the *Amazon Elastic Container Service Developer Guide*.
//
//	Task placement constraints aren't supported for tasks run on FARGATElong.
type TaskDefinitionPlacementConstraint struct {
	// A cluster query language expression to apply to the constraint. For more information, see [Cluster query language](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html) in the *Amazon Elastic Container Service Developer Guide*.
	Expression *string `pulumi:"expression"`
	// The type of constraint. The ``MemberOf`` constraint restricts selection to be from a group of valid candidates.
	Type string `pulumi:"type"`
}

// TaskDefinitionPlacementConstraintInput is an input type that accepts TaskDefinitionPlacementConstraintArgs and TaskDefinitionPlacementConstraintOutput values.
// You can construct a concrete instance of `TaskDefinitionPlacementConstraintInput` via:
//
//	TaskDefinitionPlacementConstraintArgs{...}
type TaskDefinitionPlacementConstraintInput interface {
	pulumi.Input

	ToTaskDefinitionPlacementConstraintOutput() TaskDefinitionPlacementConstraintOutput
	ToTaskDefinitionPlacementConstraintOutputWithContext(context.Context) TaskDefinitionPlacementConstraintOutput
}

// The constraint on task placement in the task definition. For more information, see [Task placement constraints](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html) in the *Amazon Elastic Container Service Developer Guide*.
//
//	Task placement constraints aren't supported for tasks run on FARGATElong.
type TaskDefinitionPlacementConstraintArgs struct {
	// A cluster query language expression to apply to the constraint. For more information, see [Cluster query language](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html) in the *Amazon Elastic Container Service Developer Guide*.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// The type of constraint. The ``MemberOf`` constraint restricts selection to be from a group of valid candidates.
	Type pulumi.StringInput `pulumi:"type"`
}

func (TaskDefinitionPlacementConstraintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionPlacementConstraint)(nil)).Elem()
}

func (i TaskDefinitionPlacementConstraintArgs) ToTaskDefinitionPlacementConstraintOutput() TaskDefinitionPlacementConstraintOutput {
	return i.ToTaskDefinitionPlacementConstraintOutputWithContext(context.Background())
}

func (i TaskDefinitionPlacementConstraintArgs) ToTaskDefinitionPlacementConstraintOutputWithContext(ctx context.Context) TaskDefinitionPlacementConstraintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionPlacementConstraintOutput)
}

// TaskDefinitionPlacementConstraintArrayInput is an input type that accepts TaskDefinitionPlacementConstraintArray and TaskDefinitionPlacementConstraintArrayOutput values.
// You can construct a concrete instance of `TaskDefinitionPlacementConstraintArrayInput` via:
//
//	TaskDefinitionPlacementConstraintArray{ TaskDefinitionPlacementConstraintArgs{...} }
type TaskDefinitionPlacementConstraintArrayInput interface {
	pulumi.Input

	ToTaskDefinitionPlacementConstraintArrayOutput() TaskDefinitionPlacementConstraintArrayOutput
	ToTaskDefinitionPlacementConstraintArrayOutputWithContext(context.Context) TaskDefinitionPlacementConstraintArrayOutput
}

type TaskDefinitionPlacementConstraintArray []TaskDefinitionPlacementConstraintInput

func (TaskDefinitionPlacementConstraintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionPlacementConstraint)(nil)).Elem()
}

func (i TaskDefinitionPlacementConstraintArray) ToTaskDefinitionPlacementConstraintArrayOutput() TaskDefinitionPlacementConstraintArrayOutput {
	return i.ToTaskDefinitionPlacementConstraintArrayOutputWithContext(context.Background())
}

func (i TaskDefinitionPlacementConstraintArray) ToTaskDefinitionPlacementConstraintArrayOutputWithContext(ctx context.Context) TaskDefinitionPlacementConstraintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionPlacementConstraintArrayOutput)
}

// The constraint on task placement in the task definition. For more information, see [Task placement constraints](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html) in the *Amazon Elastic Container Service Developer Guide*.
//
//	Task placement constraints aren't supported for tasks run on FARGATElong.
type TaskDefinitionPlacementConstraintOutput struct{ *pulumi.OutputState }

func (TaskDefinitionPlacementConstraintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionPlacementConstraint)(nil)).Elem()
}

func (o TaskDefinitionPlacementConstraintOutput) ToTaskDefinitionPlacementConstraintOutput() TaskDefinitionPlacementConstraintOutput {
	return o
}

func (o TaskDefinitionPlacementConstraintOutput) ToTaskDefinitionPlacementConstraintOutputWithContext(ctx context.Context) TaskDefinitionPlacementConstraintOutput {
	return o
}

// A cluster query language expression to apply to the constraint. For more information, see [Cluster query language](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html) in the *Amazon Elastic Container Service Developer Guide*.
func (o TaskDefinitionPlacementConstraintOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionPlacementConstraint) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// The type of constraint. The “MemberOf“ constraint restricts selection to be from a group of valid candidates.
func (o TaskDefinitionPlacementConstraintOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TaskDefinitionPlacementConstraint) string { return v.Type }).(pulumi.StringOutput)
}

type TaskDefinitionPlacementConstraintArrayOutput struct{ *pulumi.OutputState }

func (TaskDefinitionPlacementConstraintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionPlacementConstraint)(nil)).Elem()
}

func (o TaskDefinitionPlacementConstraintArrayOutput) ToTaskDefinitionPlacementConstraintArrayOutput() TaskDefinitionPlacementConstraintArrayOutput {
	return o
}

func (o TaskDefinitionPlacementConstraintArrayOutput) ToTaskDefinitionPlacementConstraintArrayOutputWithContext(ctx context.Context) TaskDefinitionPlacementConstraintArrayOutput {
	return o
}

func (o TaskDefinitionPlacementConstraintArrayOutput) Index(i pulumi.IntInput) TaskDefinitionPlacementConstraintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskDefinitionPlacementConstraint {
		return vs[0].([]TaskDefinitionPlacementConstraint)[vs[1].(int)]
	}).(TaskDefinitionPlacementConstraintOutput)
}

// The “PortMapping“ property specifies a port mapping. Port mappings allow containers to access ports on the host container instance to send or receive traffic. Port mappings are specified as part of the container definition.
//
//	If you are using containers in a task with the ``awsvpc`` or ``host`` network mode, exposed ports should be specified using ``containerPort``. The ``hostPort`` can be left blank or it must be the same value as the ``containerPort``.
//	After a task reaches the ``RUNNING`` status, manual and automatic host and container port assignments are visible in the ``networkBindings`` section of [DescribeTasks](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DescribeTasks.html) API responses.
type TaskDefinitionPortMapping struct {
	// The application protocol that's used for the port mapping. This parameter only applies to Service Connect. We recommend that you set this parameter to be consistent with the protocol that your application uses. If you set this parameter, Amazon ECS adds protocol-specific connection handling to the Service Connect proxy. If you set this parameter, Amazon ECS adds protocol-specific telemetry in the Amazon ECS console and CloudWatch.
	//  If you don't set a value for this parameter, then TCP is used. However, Amazon ECS doesn't add protocol-specific telemetry for TCP.
	//  ``appProtocol`` is immutable in a Service Connect service. Updating this field requires a service deletion and redeployment.
	//  Tasks that run in a namespace can use short names to connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS services create are supported with Service Connect. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic Container Service Developer Guide*.
	AppProtocol *TaskDefinitionPortMappingAppProtocol `pulumi:"appProtocol"`
	// The port number on the container that's bound to the user-specified or automatically assigned host port.
	//  If you use containers in a task with the ``awsvpc`` or ``host`` network mode, specify the exposed ports using ``containerPort``.
	//  If you use containers in a task with the ``bridge`` network mode and you specify a container port and not a host port, your container automatically receives a host port in the ephemeral port range. For more information, see ``hostPort``. Port mappings that are automatically assigned in this way do not count toward the 100 reserved ports limit of a container instance.
	ContainerPort *int `pulumi:"containerPort"`
	// The port number range on the container that's bound to the dynamically mapped host port range.
	//  The following rules apply when you specify a ``containerPortRange``:
	//   +  You must use either the ``bridge`` network mode or the ``awsvpc`` network mode.
	//   +  This parameter is available for both the EC2 and FARGATElong launch types.
	//   +  This parameter is available for both the Linux and Windows operating systems.
	//   +  The container instance must have at least version 1.67.0 of the container agent and at least version 1.67.0-1 of the ``ecs-init`` package
	//   +  You can specify a maximum of 100 port ranges per container.
	//   +  You do not specify a ``hostPortRange``. The value of the ``hostPortRange`` is set as follows:
	//   +  For containers in a task with the ``awsvpc`` network mode, the ``hostPortRange`` is set to the same value as the ``containerPortRange``. This is a static mapping strategy.
	//   +  For containers in a task with the ``bridge`` network mode, the Amazon ECS agent finds open host ports from the default ephemeral range and passes it to docker to bind them to the container ports.
	//
	//   +  The ``containerPortRange`` valid values are between 1 and 65535.
	//   +  A port can only be included in one port mapping per container.
	//   +  You cannot specify overlapping port ranges.
	//   +  The first port in the range must be less than last port in the range.
	//   +  Docker recommends that you turn off the docker-proxy in the Docker daemon config file when you have a large number of ports.
	//  For more information, see [Issue #11185](https://docs.aws.amazon.com/https://github.com/moby/moby/issues/11185) on the Github website.
	//  For information about how to turn off the docker-proxy in the Docker daemon config file, see [Docker daemon](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/bootstrap_container_instance.html#bootstrap_docker_daemon) in the *Amazon ECS Developer Guide*.
	//
	//  You can call [DescribeTasks](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DescribeTasks.html) to view the ``hostPortRange`` which are the host ports that are bound to the container ports.
	ContainerPortRange *string `pulumi:"containerPortRange"`
	// The port number on the container instance to reserve for your container.
	//  If you specify a ``containerPortRange``, leave this field empty and the value of the ``hostPort`` is set as follows:
	//   +  For containers in a task with the ``awsvpc`` network mode, the ``hostPort`` is set to the same value as the ``containerPort``. This is a static mapping strategy.
	//   +  For containers in a task with the ``bridge`` network mode, the Amazon ECS agent finds open ports on the host and automatically binds them to the container ports. This is a dynamic mapping strategy.
	//
	//  If you use containers in a task with the ``awsvpc`` or ``host`` network mode, the ``hostPort`` can either be left blank or set to the same value as the ``containerPort``.
	//  If you use containers in a task with the ``bridge`` network mode, you can specify a non-reserved host port for your container port mapping, or you can omit the ``hostPort`` (or set it to ``0``) while specifying a ``containerPort`` and your container automatically receives a port in the ephemeral port range for your container instance operating system and Docker version.
	//  The default ephemeral port range for Docker version 1.6.0 and later is listed on the instance under ``/proc/sys/net/ipv4/ip_local_port_range``. If this kernel parameter is unavailable, the default ephemeral port range from 49153 through 65535 (Linux) or 49152 through 65535 (Windows) is used. Do not attempt to specify a host port in the ephemeral port range as these are reserved for automatic assignment. In general, ports below 32768 are outside of the ephemeral port range.
	//  The default reserved ports are 22 for SSH, the Docker ports 2375 and 2376, and the Amazon ECS container agent ports 51678-51680. Any host port that was previously specified in a running task is also reserved while the task is running. That is, after a task stops, the host port is released. The current reserved ports are displayed in the ``remainingResources`` of [DescribeContainerInstances](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DescribeContainerInstances.html) output. A container instance can have up to 100 reserved ports at a time. This number includes the default reserved ports. Automatically assigned ports aren't included in the 100 reserved ports quota.
	HostPort *int `pulumi:"hostPort"`
	// The name that's used for the port mapping. This parameter is the name that you use in the ``serviceConnectConfiguration`` and the ``vpcLatticeConfigurations`` of a service. The name can include up to 64 characters. The characters can include lowercase letters, numbers, underscores (_), and hyphens (-). The name can't start with a hyphen.
	Name *string `pulumi:"name"`
	// The protocol used for the port mapping. Valid values are ``tcp`` and ``udp``. The default is ``tcp``. ``protocol`` is immutable in a Service Connect service. Updating this field requires a service deletion and redeployment.
	Protocol *string `pulumi:"protocol"`
}

// TaskDefinitionPortMappingInput is an input type that accepts TaskDefinitionPortMappingArgs and TaskDefinitionPortMappingOutput values.
// You can construct a concrete instance of `TaskDefinitionPortMappingInput` via:
//
//	TaskDefinitionPortMappingArgs{...}
type TaskDefinitionPortMappingInput interface {
	pulumi.Input

	ToTaskDefinitionPortMappingOutput() TaskDefinitionPortMappingOutput
	ToTaskDefinitionPortMappingOutputWithContext(context.Context) TaskDefinitionPortMappingOutput
}

// The “PortMapping“ property specifies a port mapping. Port mappings allow containers to access ports on the host container instance to send or receive traffic. Port mappings are specified as part of the container definition.
//
//	If you are using containers in a task with the ``awsvpc`` or ``host`` network mode, exposed ports should be specified using ``containerPort``. The ``hostPort`` can be left blank or it must be the same value as the ``containerPort``.
//	After a task reaches the ``RUNNING`` status, manual and automatic host and container port assignments are visible in the ``networkBindings`` section of [DescribeTasks](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DescribeTasks.html) API responses.
type TaskDefinitionPortMappingArgs struct {
	// The application protocol that's used for the port mapping. This parameter only applies to Service Connect. We recommend that you set this parameter to be consistent with the protocol that your application uses. If you set this parameter, Amazon ECS adds protocol-specific connection handling to the Service Connect proxy. If you set this parameter, Amazon ECS adds protocol-specific telemetry in the Amazon ECS console and CloudWatch.
	//  If you don't set a value for this parameter, then TCP is used. However, Amazon ECS doesn't add protocol-specific telemetry for TCP.
	//  ``appProtocol`` is immutable in a Service Connect service. Updating this field requires a service deletion and redeployment.
	//  Tasks that run in a namespace can use short names to connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS services create are supported with Service Connect. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic Container Service Developer Guide*.
	AppProtocol TaskDefinitionPortMappingAppProtocolPtrInput `pulumi:"appProtocol"`
	// The port number on the container that's bound to the user-specified or automatically assigned host port.
	//  If you use containers in a task with the ``awsvpc`` or ``host`` network mode, specify the exposed ports using ``containerPort``.
	//  If you use containers in a task with the ``bridge`` network mode and you specify a container port and not a host port, your container automatically receives a host port in the ephemeral port range. For more information, see ``hostPort``. Port mappings that are automatically assigned in this way do not count toward the 100 reserved ports limit of a container instance.
	ContainerPort pulumi.IntPtrInput `pulumi:"containerPort"`
	// The port number range on the container that's bound to the dynamically mapped host port range.
	//  The following rules apply when you specify a ``containerPortRange``:
	//   +  You must use either the ``bridge`` network mode or the ``awsvpc`` network mode.
	//   +  This parameter is available for both the EC2 and FARGATElong launch types.
	//   +  This parameter is available for both the Linux and Windows operating systems.
	//   +  The container instance must have at least version 1.67.0 of the container agent and at least version 1.67.0-1 of the ``ecs-init`` package
	//   +  You can specify a maximum of 100 port ranges per container.
	//   +  You do not specify a ``hostPortRange``. The value of the ``hostPortRange`` is set as follows:
	//   +  For containers in a task with the ``awsvpc`` network mode, the ``hostPortRange`` is set to the same value as the ``containerPortRange``. This is a static mapping strategy.
	//   +  For containers in a task with the ``bridge`` network mode, the Amazon ECS agent finds open host ports from the default ephemeral range and passes it to docker to bind them to the container ports.
	//
	//   +  The ``containerPortRange`` valid values are between 1 and 65535.
	//   +  A port can only be included in one port mapping per container.
	//   +  You cannot specify overlapping port ranges.
	//   +  The first port in the range must be less than last port in the range.
	//   +  Docker recommends that you turn off the docker-proxy in the Docker daemon config file when you have a large number of ports.
	//  For more information, see [Issue #11185](https://docs.aws.amazon.com/https://github.com/moby/moby/issues/11185) on the Github website.
	//  For information about how to turn off the docker-proxy in the Docker daemon config file, see [Docker daemon](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/bootstrap_container_instance.html#bootstrap_docker_daemon) in the *Amazon ECS Developer Guide*.
	//
	//  You can call [DescribeTasks](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DescribeTasks.html) to view the ``hostPortRange`` which are the host ports that are bound to the container ports.
	ContainerPortRange pulumi.StringPtrInput `pulumi:"containerPortRange"`
	// The port number on the container instance to reserve for your container.
	//  If you specify a ``containerPortRange``, leave this field empty and the value of the ``hostPort`` is set as follows:
	//   +  For containers in a task with the ``awsvpc`` network mode, the ``hostPort`` is set to the same value as the ``containerPort``. This is a static mapping strategy.
	//   +  For containers in a task with the ``bridge`` network mode, the Amazon ECS agent finds open ports on the host and automatically binds them to the container ports. This is a dynamic mapping strategy.
	//
	//  If you use containers in a task with the ``awsvpc`` or ``host`` network mode, the ``hostPort`` can either be left blank or set to the same value as the ``containerPort``.
	//  If you use containers in a task with the ``bridge`` network mode, you can specify a non-reserved host port for your container port mapping, or you can omit the ``hostPort`` (or set it to ``0``) while specifying a ``containerPort`` and your container automatically receives a port in the ephemeral port range for your container instance operating system and Docker version.
	//  The default ephemeral port range for Docker version 1.6.0 and later is listed on the instance under ``/proc/sys/net/ipv4/ip_local_port_range``. If this kernel parameter is unavailable, the default ephemeral port range from 49153 through 65535 (Linux) or 49152 through 65535 (Windows) is used. Do not attempt to specify a host port in the ephemeral port range as these are reserved for automatic assignment. In general, ports below 32768 are outside of the ephemeral port range.
	//  The default reserved ports are 22 for SSH, the Docker ports 2375 and 2376, and the Amazon ECS container agent ports 51678-51680. Any host port that was previously specified in a running task is also reserved while the task is running. That is, after a task stops, the host port is released. The current reserved ports are displayed in the ``remainingResources`` of [DescribeContainerInstances](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DescribeContainerInstances.html) output. A container instance can have up to 100 reserved ports at a time. This number includes the default reserved ports. Automatically assigned ports aren't included in the 100 reserved ports quota.
	HostPort pulumi.IntPtrInput `pulumi:"hostPort"`
	// The name that's used for the port mapping. This parameter is the name that you use in the ``serviceConnectConfiguration`` and the ``vpcLatticeConfigurations`` of a service. The name can include up to 64 characters. The characters can include lowercase letters, numbers, underscores (_), and hyphens (-). The name can't start with a hyphen.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The protocol used for the port mapping. Valid values are ``tcp`` and ``udp``. The default is ``tcp``. ``protocol`` is immutable in a Service Connect service. Updating this field requires a service deletion and redeployment.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (TaskDefinitionPortMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionPortMapping)(nil)).Elem()
}

func (i TaskDefinitionPortMappingArgs) ToTaskDefinitionPortMappingOutput() TaskDefinitionPortMappingOutput {
	return i.ToTaskDefinitionPortMappingOutputWithContext(context.Background())
}

func (i TaskDefinitionPortMappingArgs) ToTaskDefinitionPortMappingOutputWithContext(ctx context.Context) TaskDefinitionPortMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionPortMappingOutput)
}

// TaskDefinitionPortMappingArrayInput is an input type that accepts TaskDefinitionPortMappingArray and TaskDefinitionPortMappingArrayOutput values.
// You can construct a concrete instance of `TaskDefinitionPortMappingArrayInput` via:
//
//	TaskDefinitionPortMappingArray{ TaskDefinitionPortMappingArgs{...} }
type TaskDefinitionPortMappingArrayInput interface {
	pulumi.Input

	ToTaskDefinitionPortMappingArrayOutput() TaskDefinitionPortMappingArrayOutput
	ToTaskDefinitionPortMappingArrayOutputWithContext(context.Context) TaskDefinitionPortMappingArrayOutput
}

type TaskDefinitionPortMappingArray []TaskDefinitionPortMappingInput

func (TaskDefinitionPortMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionPortMapping)(nil)).Elem()
}

func (i TaskDefinitionPortMappingArray) ToTaskDefinitionPortMappingArrayOutput() TaskDefinitionPortMappingArrayOutput {
	return i.ToTaskDefinitionPortMappingArrayOutputWithContext(context.Background())
}

func (i TaskDefinitionPortMappingArray) ToTaskDefinitionPortMappingArrayOutputWithContext(ctx context.Context) TaskDefinitionPortMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionPortMappingArrayOutput)
}

// The “PortMapping“ property specifies a port mapping. Port mappings allow containers to access ports on the host container instance to send or receive traffic. Port mappings are specified as part of the container definition.
//
//	If you are using containers in a task with the ``awsvpc`` or ``host`` network mode, exposed ports should be specified using ``containerPort``. The ``hostPort`` can be left blank or it must be the same value as the ``containerPort``.
//	After a task reaches the ``RUNNING`` status, manual and automatic host and container port assignments are visible in the ``networkBindings`` section of [DescribeTasks](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DescribeTasks.html) API responses.
type TaskDefinitionPortMappingOutput struct{ *pulumi.OutputState }

func (TaskDefinitionPortMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionPortMapping)(nil)).Elem()
}

func (o TaskDefinitionPortMappingOutput) ToTaskDefinitionPortMappingOutput() TaskDefinitionPortMappingOutput {
	return o
}

func (o TaskDefinitionPortMappingOutput) ToTaskDefinitionPortMappingOutputWithContext(ctx context.Context) TaskDefinitionPortMappingOutput {
	return o
}

// The application protocol that's used for the port mapping. This parameter only applies to Service Connect. We recommend that you set this parameter to be consistent with the protocol that your application uses. If you set this parameter, Amazon ECS adds protocol-specific connection handling to the Service Connect proxy. If you set this parameter, Amazon ECS adds protocol-specific telemetry in the Amazon ECS console and CloudWatch.
//
//	If you don't set a value for this parameter, then TCP is used. However, Amazon ECS doesn't add protocol-specific telemetry for TCP.
//	``appProtocol`` is immutable in a Service Connect service. Updating this field requires a service deletion and redeployment.
//	Tasks that run in a namespace can use short names to connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS services create are supported with Service Connect. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic Container Service Developer Guide*.
func (o TaskDefinitionPortMappingOutput) AppProtocol() TaskDefinitionPortMappingAppProtocolPtrOutput {
	return o.ApplyT(func(v TaskDefinitionPortMapping) *TaskDefinitionPortMappingAppProtocol { return v.AppProtocol }).(TaskDefinitionPortMappingAppProtocolPtrOutput)
}

// The port number on the container that's bound to the user-specified or automatically assigned host port.
//
//	If you use containers in a task with the ``awsvpc`` or ``host`` network mode, specify the exposed ports using ``containerPort``.
//	If you use containers in a task with the ``bridge`` network mode and you specify a container port and not a host port, your container automatically receives a host port in the ephemeral port range. For more information, see ``hostPort``. Port mappings that are automatically assigned in this way do not count toward the 100 reserved ports limit of a container instance.
func (o TaskDefinitionPortMappingOutput) ContainerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskDefinitionPortMapping) *int { return v.ContainerPort }).(pulumi.IntPtrOutput)
}

// The port number range on the container that's bound to the dynamically mapped host port range.
//
//	The following rules apply when you specify a ``containerPortRange``:
//	 +  You must use either the ``bridge`` network mode or the ``awsvpc`` network mode.
//	 +  This parameter is available for both the EC2 and FARGATElong launch types.
//	 +  This parameter is available for both the Linux and Windows operating systems.
//	 +  The container instance must have at least version 1.67.0 of the container agent and at least version 1.67.0-1 of the ``ecs-init`` package
//	 +  You can specify a maximum of 100 port ranges per container.
//	 +  You do not specify a ``hostPortRange``. The value of the ``hostPortRange`` is set as follows:
//	 +  For containers in a task with the ``awsvpc`` network mode, the ``hostPortRange`` is set to the same value as the ``containerPortRange``. This is a static mapping strategy.
//	 +  For containers in a task with the ``bridge`` network mode, the Amazon ECS agent finds open host ports from the default ephemeral range and passes it to docker to bind them to the container ports.
//
//	 +  The ``containerPortRange`` valid values are between 1 and 65535.
//	 +  A port can only be included in one port mapping per container.
//	 +  You cannot specify overlapping port ranges.
//	 +  The first port in the range must be less than last port in the range.
//	 +  Docker recommends that you turn off the docker-proxy in the Docker daemon config file when you have a large number of ports.
//	For more information, see [Issue #11185](https://docs.aws.amazon.com/https://github.com/moby/moby/issues/11185) on the Github website.
//	For information about how to turn off the docker-proxy in the Docker daemon config file, see [Docker daemon](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/bootstrap_container_instance.html#bootstrap_docker_daemon) in the *Amazon ECS Developer Guide*.
//
//	You can call [DescribeTasks](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DescribeTasks.html) to view the ``hostPortRange`` which are the host ports that are bound to the container ports.
func (o TaskDefinitionPortMappingOutput) ContainerPortRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionPortMapping) *string { return v.ContainerPortRange }).(pulumi.StringPtrOutput)
}

// The port number on the container instance to reserve for your container.
//
//	If you specify a ``containerPortRange``, leave this field empty and the value of the ``hostPort`` is set as follows:
//	 +  For containers in a task with the ``awsvpc`` network mode, the ``hostPort`` is set to the same value as the ``containerPort``. This is a static mapping strategy.
//	 +  For containers in a task with the ``bridge`` network mode, the Amazon ECS agent finds open ports on the host and automatically binds them to the container ports. This is a dynamic mapping strategy.
//
//	If you use containers in a task with the ``awsvpc`` or ``host`` network mode, the ``hostPort`` can either be left blank or set to the same value as the ``containerPort``.
//	If you use containers in a task with the ``bridge`` network mode, you can specify a non-reserved host port for your container port mapping, or you can omit the ``hostPort`` (or set it to ``0``) while specifying a ``containerPort`` and your container automatically receives a port in the ephemeral port range for your container instance operating system and Docker version.
//	The default ephemeral port range for Docker version 1.6.0 and later is listed on the instance under ``/proc/sys/net/ipv4/ip_local_port_range``. If this kernel parameter is unavailable, the default ephemeral port range from 49153 through 65535 (Linux) or 49152 through 65535 (Windows) is used. Do not attempt to specify a host port in the ephemeral port range as these are reserved for automatic assignment. In general, ports below 32768 are outside of the ephemeral port range.
//	The default reserved ports are 22 for SSH, the Docker ports 2375 and 2376, and the Amazon ECS container agent ports 51678-51680. Any host port that was previously specified in a running task is also reserved while the task is running. That is, after a task stops, the host port is released. The current reserved ports are displayed in the ``remainingResources`` of [DescribeContainerInstances](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DescribeContainerInstances.html) output. A container instance can have up to 100 reserved ports at a time. This number includes the default reserved ports. Automatically assigned ports aren't included in the 100 reserved ports quota.
func (o TaskDefinitionPortMappingOutput) HostPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskDefinitionPortMapping) *int { return v.HostPort }).(pulumi.IntPtrOutput)
}

// The name that's used for the port mapping. This parameter is the name that you use in the “serviceConnectConfiguration“ and the “vpcLatticeConfigurations“ of a service. The name can include up to 64 characters. The characters can include lowercase letters, numbers, underscores (_), and hyphens (-). The name can't start with a hyphen.
func (o TaskDefinitionPortMappingOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionPortMapping) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The protocol used for the port mapping. Valid values are “tcp“ and “udp“. The default is “tcp“. “protocol“ is immutable in a Service Connect service. Updating this field requires a service deletion and redeployment.
func (o TaskDefinitionPortMappingOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionPortMapping) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type TaskDefinitionPortMappingArrayOutput struct{ *pulumi.OutputState }

func (TaskDefinitionPortMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionPortMapping)(nil)).Elem()
}

func (o TaskDefinitionPortMappingArrayOutput) ToTaskDefinitionPortMappingArrayOutput() TaskDefinitionPortMappingArrayOutput {
	return o
}

func (o TaskDefinitionPortMappingArrayOutput) ToTaskDefinitionPortMappingArrayOutputWithContext(ctx context.Context) TaskDefinitionPortMappingArrayOutput {
	return o
}

func (o TaskDefinitionPortMappingArrayOutput) Index(i pulumi.IntInput) TaskDefinitionPortMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskDefinitionPortMapping {
		return vs[0].([]TaskDefinitionPortMapping)[vs[1].(int)]
	}).(TaskDefinitionPortMappingOutput)
}

// The configuration details for the App Mesh proxy.
//
//	For tasks that use the EC2 launch type, the container instances require at least version 1.26.0 of the container agent and at least version 1.26.0-1 of the ``ecs-init`` package to use a proxy configuration. If your container instances are launched from the Amazon ECS optimized AMI version ``20190301`` or later, then they contain the required versions of the container agent and ``ecs-init``. For more information, see [Amazon ECS-optimized Linux AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html)
type TaskDefinitionProxyConfiguration struct {
	// The name of the container that will serve as the App Mesh proxy.
	ContainerName string `pulumi:"containerName"`
	// The set of network configuration parameters to provide the Container Network Interface (CNI) plugin, specified as key-value pairs.
	//   +  ``IgnoredUID`` - (Required) The user ID (UID) of the proxy container as defined by the ``user`` parameter in a container definition. This is used to ensure the proxy ignores its own traffic. If ``IgnoredGID`` is specified, this field can be empty.
	//   +  ``IgnoredGID`` - (Required) The group ID (GID) of the proxy container as defined by the ``user`` parameter in a container definition. This is used to ensure the proxy ignores its own traffic. If ``IgnoredUID`` is specified, this field can be empty.
	//   +  ``AppPorts`` - (Required) The list of ports that the application uses. Network traffic to these ports is forwarded to the ``ProxyIngressPort`` and ``ProxyEgressPort``.
	//   +  ``ProxyIngressPort`` - (Required) Specifies the port that incoming traffic to the ``AppPorts`` is directed to.
	//   +  ``ProxyEgressPort`` - (Required) Specifies the port that outgoing traffic from the ``AppPorts`` is directed to.
	//   +  ``EgressIgnoredPorts`` - (Required) The egress traffic going to the specified ports is ignored and not redirected to the ``ProxyEgressPort``. It can be an empty list.
	//   +  ``EgressIgnoredIPs`` - (Required) The egress traffic going to the specified IP addresses is ignored and not redirected to the ``ProxyEgressPort``. It can be an empty list.
	ProxyConfigurationProperties []TaskDefinitionKeyValuePair `pulumi:"proxyConfigurationProperties"`
	// The proxy type. The only supported value is ``APPMESH``.
	Type *string `pulumi:"type"`
}

// TaskDefinitionProxyConfigurationInput is an input type that accepts TaskDefinitionProxyConfigurationArgs and TaskDefinitionProxyConfigurationOutput values.
// You can construct a concrete instance of `TaskDefinitionProxyConfigurationInput` via:
//
//	TaskDefinitionProxyConfigurationArgs{...}
type TaskDefinitionProxyConfigurationInput interface {
	pulumi.Input

	ToTaskDefinitionProxyConfigurationOutput() TaskDefinitionProxyConfigurationOutput
	ToTaskDefinitionProxyConfigurationOutputWithContext(context.Context) TaskDefinitionProxyConfigurationOutput
}

// The configuration details for the App Mesh proxy.
//
//	For tasks that use the EC2 launch type, the container instances require at least version 1.26.0 of the container agent and at least version 1.26.0-1 of the ``ecs-init`` package to use a proxy configuration. If your container instances are launched from the Amazon ECS optimized AMI version ``20190301`` or later, then they contain the required versions of the container agent and ``ecs-init``. For more information, see [Amazon ECS-optimized Linux AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html)
type TaskDefinitionProxyConfigurationArgs struct {
	// The name of the container that will serve as the App Mesh proxy.
	ContainerName pulumi.StringInput `pulumi:"containerName"`
	// The set of network configuration parameters to provide the Container Network Interface (CNI) plugin, specified as key-value pairs.
	//   +  ``IgnoredUID`` - (Required) The user ID (UID) of the proxy container as defined by the ``user`` parameter in a container definition. This is used to ensure the proxy ignores its own traffic. If ``IgnoredGID`` is specified, this field can be empty.
	//   +  ``IgnoredGID`` - (Required) The group ID (GID) of the proxy container as defined by the ``user`` parameter in a container definition. This is used to ensure the proxy ignores its own traffic. If ``IgnoredUID`` is specified, this field can be empty.
	//   +  ``AppPorts`` - (Required) The list of ports that the application uses. Network traffic to these ports is forwarded to the ``ProxyIngressPort`` and ``ProxyEgressPort``.
	//   +  ``ProxyIngressPort`` - (Required) Specifies the port that incoming traffic to the ``AppPorts`` is directed to.
	//   +  ``ProxyEgressPort`` - (Required) Specifies the port that outgoing traffic from the ``AppPorts`` is directed to.
	//   +  ``EgressIgnoredPorts`` - (Required) The egress traffic going to the specified ports is ignored and not redirected to the ``ProxyEgressPort``. It can be an empty list.
	//   +  ``EgressIgnoredIPs`` - (Required) The egress traffic going to the specified IP addresses is ignored and not redirected to the ``ProxyEgressPort``. It can be an empty list.
	ProxyConfigurationProperties TaskDefinitionKeyValuePairArrayInput `pulumi:"proxyConfigurationProperties"`
	// The proxy type. The only supported value is ``APPMESH``.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (TaskDefinitionProxyConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionProxyConfiguration)(nil)).Elem()
}

func (i TaskDefinitionProxyConfigurationArgs) ToTaskDefinitionProxyConfigurationOutput() TaskDefinitionProxyConfigurationOutput {
	return i.ToTaskDefinitionProxyConfigurationOutputWithContext(context.Background())
}

func (i TaskDefinitionProxyConfigurationArgs) ToTaskDefinitionProxyConfigurationOutputWithContext(ctx context.Context) TaskDefinitionProxyConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionProxyConfigurationOutput)
}

func (i TaskDefinitionProxyConfigurationArgs) ToTaskDefinitionProxyConfigurationPtrOutput() TaskDefinitionProxyConfigurationPtrOutput {
	return i.ToTaskDefinitionProxyConfigurationPtrOutputWithContext(context.Background())
}

func (i TaskDefinitionProxyConfigurationArgs) ToTaskDefinitionProxyConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionProxyConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionProxyConfigurationOutput).ToTaskDefinitionProxyConfigurationPtrOutputWithContext(ctx)
}

// TaskDefinitionProxyConfigurationPtrInput is an input type that accepts TaskDefinitionProxyConfigurationArgs, TaskDefinitionProxyConfigurationPtr and TaskDefinitionProxyConfigurationPtrOutput values.
// You can construct a concrete instance of `TaskDefinitionProxyConfigurationPtrInput` via:
//
//	        TaskDefinitionProxyConfigurationArgs{...}
//
//	or:
//
//	        nil
type TaskDefinitionProxyConfigurationPtrInput interface {
	pulumi.Input

	ToTaskDefinitionProxyConfigurationPtrOutput() TaskDefinitionProxyConfigurationPtrOutput
	ToTaskDefinitionProxyConfigurationPtrOutputWithContext(context.Context) TaskDefinitionProxyConfigurationPtrOutput
}

type taskDefinitionProxyConfigurationPtrType TaskDefinitionProxyConfigurationArgs

func TaskDefinitionProxyConfigurationPtr(v *TaskDefinitionProxyConfigurationArgs) TaskDefinitionProxyConfigurationPtrInput {
	return (*taskDefinitionProxyConfigurationPtrType)(v)
}

func (*taskDefinitionProxyConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionProxyConfiguration)(nil)).Elem()
}

func (i *taskDefinitionProxyConfigurationPtrType) ToTaskDefinitionProxyConfigurationPtrOutput() TaskDefinitionProxyConfigurationPtrOutput {
	return i.ToTaskDefinitionProxyConfigurationPtrOutputWithContext(context.Background())
}

func (i *taskDefinitionProxyConfigurationPtrType) ToTaskDefinitionProxyConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionProxyConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionProxyConfigurationPtrOutput)
}

// The configuration details for the App Mesh proxy.
//
//	For tasks that use the EC2 launch type, the container instances require at least version 1.26.0 of the container agent and at least version 1.26.0-1 of the ``ecs-init`` package to use a proxy configuration. If your container instances are launched from the Amazon ECS optimized AMI version ``20190301`` or later, then they contain the required versions of the container agent and ``ecs-init``. For more information, see [Amazon ECS-optimized Linux AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html)
type TaskDefinitionProxyConfigurationOutput struct{ *pulumi.OutputState }

func (TaskDefinitionProxyConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionProxyConfiguration)(nil)).Elem()
}

func (o TaskDefinitionProxyConfigurationOutput) ToTaskDefinitionProxyConfigurationOutput() TaskDefinitionProxyConfigurationOutput {
	return o
}

func (o TaskDefinitionProxyConfigurationOutput) ToTaskDefinitionProxyConfigurationOutputWithContext(ctx context.Context) TaskDefinitionProxyConfigurationOutput {
	return o
}

func (o TaskDefinitionProxyConfigurationOutput) ToTaskDefinitionProxyConfigurationPtrOutput() TaskDefinitionProxyConfigurationPtrOutput {
	return o.ToTaskDefinitionProxyConfigurationPtrOutputWithContext(context.Background())
}

func (o TaskDefinitionProxyConfigurationOutput) ToTaskDefinitionProxyConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionProxyConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskDefinitionProxyConfiguration) *TaskDefinitionProxyConfiguration {
		return &v
	}).(TaskDefinitionProxyConfigurationPtrOutput)
}

// The name of the container that will serve as the App Mesh proxy.
func (o TaskDefinitionProxyConfigurationOutput) ContainerName() pulumi.StringOutput {
	return o.ApplyT(func(v TaskDefinitionProxyConfiguration) string { return v.ContainerName }).(pulumi.StringOutput)
}

// The set of network configuration parameters to provide the Container Network Interface (CNI) plugin, specified as key-value pairs.
//   - “IgnoredUID“ - (Required) The user ID (UID) of the proxy container as defined by the “user“ parameter in a container definition. This is used to ensure the proxy ignores its own traffic. If “IgnoredGID“ is specified, this field can be empty.
//   - “IgnoredGID“ - (Required) The group ID (GID) of the proxy container as defined by the “user“ parameter in a container definition. This is used to ensure the proxy ignores its own traffic. If “IgnoredUID“ is specified, this field can be empty.
//   - “AppPorts“ - (Required) The list of ports that the application uses. Network traffic to these ports is forwarded to the “ProxyIngressPort“ and “ProxyEgressPort“.
//   - “ProxyIngressPort“ - (Required) Specifies the port that incoming traffic to the “AppPorts“ is directed to.
//   - “ProxyEgressPort“ - (Required) Specifies the port that outgoing traffic from the “AppPorts“ is directed to.
//   - “EgressIgnoredPorts“ - (Required) The egress traffic going to the specified ports is ignored and not redirected to the “ProxyEgressPort“. It can be an empty list.
//   - “EgressIgnoredIPs“ - (Required) The egress traffic going to the specified IP addresses is ignored and not redirected to the “ProxyEgressPort“. It can be an empty list.
func (o TaskDefinitionProxyConfigurationOutput) ProxyConfigurationProperties() TaskDefinitionKeyValuePairArrayOutput {
	return o.ApplyT(func(v TaskDefinitionProxyConfiguration) []TaskDefinitionKeyValuePair {
		return v.ProxyConfigurationProperties
	}).(TaskDefinitionKeyValuePairArrayOutput)
}

// The proxy type. The only supported value is “APPMESH“.
func (o TaskDefinitionProxyConfigurationOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionProxyConfiguration) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type TaskDefinitionProxyConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TaskDefinitionProxyConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionProxyConfiguration)(nil)).Elem()
}

func (o TaskDefinitionProxyConfigurationPtrOutput) ToTaskDefinitionProxyConfigurationPtrOutput() TaskDefinitionProxyConfigurationPtrOutput {
	return o
}

func (o TaskDefinitionProxyConfigurationPtrOutput) ToTaskDefinitionProxyConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionProxyConfigurationPtrOutput {
	return o
}

func (o TaskDefinitionProxyConfigurationPtrOutput) Elem() TaskDefinitionProxyConfigurationOutput {
	return o.ApplyT(func(v *TaskDefinitionProxyConfiguration) TaskDefinitionProxyConfiguration {
		if v != nil {
			return *v
		}
		var ret TaskDefinitionProxyConfiguration
		return ret
	}).(TaskDefinitionProxyConfigurationOutput)
}

// The name of the container that will serve as the App Mesh proxy.
func (o TaskDefinitionProxyConfigurationPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionProxyConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// The set of network configuration parameters to provide the Container Network Interface (CNI) plugin, specified as key-value pairs.
//   - “IgnoredUID“ - (Required) The user ID (UID) of the proxy container as defined by the “user“ parameter in a container definition. This is used to ensure the proxy ignores its own traffic. If “IgnoredGID“ is specified, this field can be empty.
//   - “IgnoredGID“ - (Required) The group ID (GID) of the proxy container as defined by the “user“ parameter in a container definition. This is used to ensure the proxy ignores its own traffic. If “IgnoredUID“ is specified, this field can be empty.
//   - “AppPorts“ - (Required) The list of ports that the application uses. Network traffic to these ports is forwarded to the “ProxyIngressPort“ and “ProxyEgressPort“.
//   - “ProxyIngressPort“ - (Required) Specifies the port that incoming traffic to the “AppPorts“ is directed to.
//   - “ProxyEgressPort“ - (Required) Specifies the port that outgoing traffic from the “AppPorts“ is directed to.
//   - “EgressIgnoredPorts“ - (Required) The egress traffic going to the specified ports is ignored and not redirected to the “ProxyEgressPort“. It can be an empty list.
//   - “EgressIgnoredIPs“ - (Required) The egress traffic going to the specified IP addresses is ignored and not redirected to the “ProxyEgressPort“. It can be an empty list.
func (o TaskDefinitionProxyConfigurationPtrOutput) ProxyConfigurationProperties() TaskDefinitionKeyValuePairArrayOutput {
	return o.ApplyT(func(v *TaskDefinitionProxyConfiguration) []TaskDefinitionKeyValuePair {
		if v == nil {
			return nil
		}
		return v.ProxyConfigurationProperties
	}).(TaskDefinitionKeyValuePairArrayOutput)
}

// The proxy type. The only supported value is “APPMESH“.
func (o TaskDefinitionProxyConfigurationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionProxyConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The repository credentials for private registry authentication.
type TaskDefinitionRepositoryCredentials struct {
	// The Amazon Resource Name (ARN) of the secret containing the private repository credentials.
	//   When you use the Amazon ECS API, CLI, or AWS SDK, if the secret exists in the same Region as the task that you're launching then you can use either the full ARN or the name of the secret. When you use the AWS Management Console, you must specify the full ARN of the secret.
	CredentialsParameter *string `pulumi:"credentialsParameter"`
}

// TaskDefinitionRepositoryCredentialsInput is an input type that accepts TaskDefinitionRepositoryCredentialsArgs and TaskDefinitionRepositoryCredentialsOutput values.
// You can construct a concrete instance of `TaskDefinitionRepositoryCredentialsInput` via:
//
//	TaskDefinitionRepositoryCredentialsArgs{...}
type TaskDefinitionRepositoryCredentialsInput interface {
	pulumi.Input

	ToTaskDefinitionRepositoryCredentialsOutput() TaskDefinitionRepositoryCredentialsOutput
	ToTaskDefinitionRepositoryCredentialsOutputWithContext(context.Context) TaskDefinitionRepositoryCredentialsOutput
}

// The repository credentials for private registry authentication.
type TaskDefinitionRepositoryCredentialsArgs struct {
	// The Amazon Resource Name (ARN) of the secret containing the private repository credentials.
	//   When you use the Amazon ECS API, CLI, or AWS SDK, if the secret exists in the same Region as the task that you're launching then you can use either the full ARN or the name of the secret. When you use the AWS Management Console, you must specify the full ARN of the secret.
	CredentialsParameter pulumi.StringPtrInput `pulumi:"credentialsParameter"`
}

func (TaskDefinitionRepositoryCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionRepositoryCredentials)(nil)).Elem()
}

func (i TaskDefinitionRepositoryCredentialsArgs) ToTaskDefinitionRepositoryCredentialsOutput() TaskDefinitionRepositoryCredentialsOutput {
	return i.ToTaskDefinitionRepositoryCredentialsOutputWithContext(context.Background())
}

func (i TaskDefinitionRepositoryCredentialsArgs) ToTaskDefinitionRepositoryCredentialsOutputWithContext(ctx context.Context) TaskDefinitionRepositoryCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionRepositoryCredentialsOutput)
}

func (i TaskDefinitionRepositoryCredentialsArgs) ToTaskDefinitionRepositoryCredentialsPtrOutput() TaskDefinitionRepositoryCredentialsPtrOutput {
	return i.ToTaskDefinitionRepositoryCredentialsPtrOutputWithContext(context.Background())
}

func (i TaskDefinitionRepositoryCredentialsArgs) ToTaskDefinitionRepositoryCredentialsPtrOutputWithContext(ctx context.Context) TaskDefinitionRepositoryCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionRepositoryCredentialsOutput).ToTaskDefinitionRepositoryCredentialsPtrOutputWithContext(ctx)
}

// TaskDefinitionRepositoryCredentialsPtrInput is an input type that accepts TaskDefinitionRepositoryCredentialsArgs, TaskDefinitionRepositoryCredentialsPtr and TaskDefinitionRepositoryCredentialsPtrOutput values.
// You can construct a concrete instance of `TaskDefinitionRepositoryCredentialsPtrInput` via:
//
//	        TaskDefinitionRepositoryCredentialsArgs{...}
//
//	or:
//
//	        nil
type TaskDefinitionRepositoryCredentialsPtrInput interface {
	pulumi.Input

	ToTaskDefinitionRepositoryCredentialsPtrOutput() TaskDefinitionRepositoryCredentialsPtrOutput
	ToTaskDefinitionRepositoryCredentialsPtrOutputWithContext(context.Context) TaskDefinitionRepositoryCredentialsPtrOutput
}

type taskDefinitionRepositoryCredentialsPtrType TaskDefinitionRepositoryCredentialsArgs

func TaskDefinitionRepositoryCredentialsPtr(v *TaskDefinitionRepositoryCredentialsArgs) TaskDefinitionRepositoryCredentialsPtrInput {
	return (*taskDefinitionRepositoryCredentialsPtrType)(v)
}

func (*taskDefinitionRepositoryCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionRepositoryCredentials)(nil)).Elem()
}

func (i *taskDefinitionRepositoryCredentialsPtrType) ToTaskDefinitionRepositoryCredentialsPtrOutput() TaskDefinitionRepositoryCredentialsPtrOutput {
	return i.ToTaskDefinitionRepositoryCredentialsPtrOutputWithContext(context.Background())
}

func (i *taskDefinitionRepositoryCredentialsPtrType) ToTaskDefinitionRepositoryCredentialsPtrOutputWithContext(ctx context.Context) TaskDefinitionRepositoryCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionRepositoryCredentialsPtrOutput)
}

// The repository credentials for private registry authentication.
type TaskDefinitionRepositoryCredentialsOutput struct{ *pulumi.OutputState }

func (TaskDefinitionRepositoryCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionRepositoryCredentials)(nil)).Elem()
}

func (o TaskDefinitionRepositoryCredentialsOutput) ToTaskDefinitionRepositoryCredentialsOutput() TaskDefinitionRepositoryCredentialsOutput {
	return o
}

func (o TaskDefinitionRepositoryCredentialsOutput) ToTaskDefinitionRepositoryCredentialsOutputWithContext(ctx context.Context) TaskDefinitionRepositoryCredentialsOutput {
	return o
}

func (o TaskDefinitionRepositoryCredentialsOutput) ToTaskDefinitionRepositoryCredentialsPtrOutput() TaskDefinitionRepositoryCredentialsPtrOutput {
	return o.ToTaskDefinitionRepositoryCredentialsPtrOutputWithContext(context.Background())
}

func (o TaskDefinitionRepositoryCredentialsOutput) ToTaskDefinitionRepositoryCredentialsPtrOutputWithContext(ctx context.Context) TaskDefinitionRepositoryCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskDefinitionRepositoryCredentials) *TaskDefinitionRepositoryCredentials {
		return &v
	}).(TaskDefinitionRepositoryCredentialsPtrOutput)
}

// The Amazon Resource Name (ARN) of the secret containing the private repository credentials.
//
//	When you use the Amazon ECS API, CLI, or AWS SDK, if the secret exists in the same Region as the task that you're launching then you can use either the full ARN or the name of the secret. When you use the AWS Management Console, you must specify the full ARN of the secret.
func (o TaskDefinitionRepositoryCredentialsOutput) CredentialsParameter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionRepositoryCredentials) *string { return v.CredentialsParameter }).(pulumi.StringPtrOutput)
}

type TaskDefinitionRepositoryCredentialsPtrOutput struct{ *pulumi.OutputState }

func (TaskDefinitionRepositoryCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionRepositoryCredentials)(nil)).Elem()
}

func (o TaskDefinitionRepositoryCredentialsPtrOutput) ToTaskDefinitionRepositoryCredentialsPtrOutput() TaskDefinitionRepositoryCredentialsPtrOutput {
	return o
}

func (o TaskDefinitionRepositoryCredentialsPtrOutput) ToTaskDefinitionRepositoryCredentialsPtrOutputWithContext(ctx context.Context) TaskDefinitionRepositoryCredentialsPtrOutput {
	return o
}

func (o TaskDefinitionRepositoryCredentialsPtrOutput) Elem() TaskDefinitionRepositoryCredentialsOutput {
	return o.ApplyT(func(v *TaskDefinitionRepositoryCredentials) TaskDefinitionRepositoryCredentials {
		if v != nil {
			return *v
		}
		var ret TaskDefinitionRepositoryCredentials
		return ret
	}).(TaskDefinitionRepositoryCredentialsOutput)
}

// The Amazon Resource Name (ARN) of the secret containing the private repository credentials.
//
//	When you use the Amazon ECS API, CLI, or AWS SDK, if the secret exists in the same Region as the task that you're launching then you can use either the full ARN or the name of the secret. When you use the AWS Management Console, you must specify the full ARN of the secret.
func (o TaskDefinitionRepositoryCredentialsPtrOutput) CredentialsParameter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionRepositoryCredentials) *string {
		if v == nil {
			return nil
		}
		return v.CredentialsParameter
	}).(pulumi.StringPtrOutput)
}

// The type and amount of a resource to assign to a container. The supported resource types are GPUs and Elastic Inference accelerators. For more information, see [Working with GPUs on Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html) or [Working with Amazon Elastic Inference on Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-inference.html) in the *Amazon Elastic Container Service Developer Guide*
type TaskDefinitionResourceRequirement struct {
	// The type of resource to assign to a container.
	Type string `pulumi:"type"`
	// The value for the specified resource type.
	//  When the type is ``GPU``, the value is the number of physical ``GPUs`` the Amazon ECS container agent reserves for the container. The number of GPUs that's reserved for all containers in a task can't exceed the number of available GPUs on the container instance that the task is launched on.
	//  When the type is ``InferenceAccelerator``, the ``value`` matches the ``deviceName`` for an [InferenceAccelerator](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_InferenceAccelerator.html) specified in a task definition.
	Value string `pulumi:"value"`
}

// TaskDefinitionResourceRequirementInput is an input type that accepts TaskDefinitionResourceRequirementArgs and TaskDefinitionResourceRequirementOutput values.
// You can construct a concrete instance of `TaskDefinitionResourceRequirementInput` via:
//
//	TaskDefinitionResourceRequirementArgs{...}
type TaskDefinitionResourceRequirementInput interface {
	pulumi.Input

	ToTaskDefinitionResourceRequirementOutput() TaskDefinitionResourceRequirementOutput
	ToTaskDefinitionResourceRequirementOutputWithContext(context.Context) TaskDefinitionResourceRequirementOutput
}

// The type and amount of a resource to assign to a container. The supported resource types are GPUs and Elastic Inference accelerators. For more information, see [Working with GPUs on Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html) or [Working with Amazon Elastic Inference on Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-inference.html) in the *Amazon Elastic Container Service Developer Guide*
type TaskDefinitionResourceRequirementArgs struct {
	// The type of resource to assign to a container.
	Type pulumi.StringInput `pulumi:"type"`
	// The value for the specified resource type.
	//  When the type is ``GPU``, the value is the number of physical ``GPUs`` the Amazon ECS container agent reserves for the container. The number of GPUs that's reserved for all containers in a task can't exceed the number of available GPUs on the container instance that the task is launched on.
	//  When the type is ``InferenceAccelerator``, the ``value`` matches the ``deviceName`` for an [InferenceAccelerator](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_InferenceAccelerator.html) specified in a task definition.
	Value pulumi.StringInput `pulumi:"value"`
}

func (TaskDefinitionResourceRequirementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionResourceRequirement)(nil)).Elem()
}

func (i TaskDefinitionResourceRequirementArgs) ToTaskDefinitionResourceRequirementOutput() TaskDefinitionResourceRequirementOutput {
	return i.ToTaskDefinitionResourceRequirementOutputWithContext(context.Background())
}

func (i TaskDefinitionResourceRequirementArgs) ToTaskDefinitionResourceRequirementOutputWithContext(ctx context.Context) TaskDefinitionResourceRequirementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionResourceRequirementOutput)
}

// TaskDefinitionResourceRequirementArrayInput is an input type that accepts TaskDefinitionResourceRequirementArray and TaskDefinitionResourceRequirementArrayOutput values.
// You can construct a concrete instance of `TaskDefinitionResourceRequirementArrayInput` via:
//
//	TaskDefinitionResourceRequirementArray{ TaskDefinitionResourceRequirementArgs{...} }
type TaskDefinitionResourceRequirementArrayInput interface {
	pulumi.Input

	ToTaskDefinitionResourceRequirementArrayOutput() TaskDefinitionResourceRequirementArrayOutput
	ToTaskDefinitionResourceRequirementArrayOutputWithContext(context.Context) TaskDefinitionResourceRequirementArrayOutput
}

type TaskDefinitionResourceRequirementArray []TaskDefinitionResourceRequirementInput

func (TaskDefinitionResourceRequirementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionResourceRequirement)(nil)).Elem()
}

func (i TaskDefinitionResourceRequirementArray) ToTaskDefinitionResourceRequirementArrayOutput() TaskDefinitionResourceRequirementArrayOutput {
	return i.ToTaskDefinitionResourceRequirementArrayOutputWithContext(context.Background())
}

func (i TaskDefinitionResourceRequirementArray) ToTaskDefinitionResourceRequirementArrayOutputWithContext(ctx context.Context) TaskDefinitionResourceRequirementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionResourceRequirementArrayOutput)
}

// The type and amount of a resource to assign to a container. The supported resource types are GPUs and Elastic Inference accelerators. For more information, see [Working with GPUs on Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html) or [Working with Amazon Elastic Inference on Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-inference.html) in the *Amazon Elastic Container Service Developer Guide*
type TaskDefinitionResourceRequirementOutput struct{ *pulumi.OutputState }

func (TaskDefinitionResourceRequirementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionResourceRequirement)(nil)).Elem()
}

func (o TaskDefinitionResourceRequirementOutput) ToTaskDefinitionResourceRequirementOutput() TaskDefinitionResourceRequirementOutput {
	return o
}

func (o TaskDefinitionResourceRequirementOutput) ToTaskDefinitionResourceRequirementOutputWithContext(ctx context.Context) TaskDefinitionResourceRequirementOutput {
	return o
}

// The type of resource to assign to a container.
func (o TaskDefinitionResourceRequirementOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TaskDefinitionResourceRequirement) string { return v.Type }).(pulumi.StringOutput)
}

// The value for the specified resource type.
//
//	When the type is ``GPU``, the value is the number of physical ``GPUs`` the Amazon ECS container agent reserves for the container. The number of GPUs that's reserved for all containers in a task can't exceed the number of available GPUs on the container instance that the task is launched on.
//	When the type is ``InferenceAccelerator``, the ``value`` matches the ``deviceName`` for an [InferenceAccelerator](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_InferenceAccelerator.html) specified in a task definition.
func (o TaskDefinitionResourceRequirementOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v TaskDefinitionResourceRequirement) string { return v.Value }).(pulumi.StringOutput)
}

type TaskDefinitionResourceRequirementArrayOutput struct{ *pulumi.OutputState }

func (TaskDefinitionResourceRequirementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionResourceRequirement)(nil)).Elem()
}

func (o TaskDefinitionResourceRequirementArrayOutput) ToTaskDefinitionResourceRequirementArrayOutput() TaskDefinitionResourceRequirementArrayOutput {
	return o
}

func (o TaskDefinitionResourceRequirementArrayOutput) ToTaskDefinitionResourceRequirementArrayOutputWithContext(ctx context.Context) TaskDefinitionResourceRequirementArrayOutput {
	return o
}

func (o TaskDefinitionResourceRequirementArrayOutput) Index(i pulumi.IntInput) TaskDefinitionResourceRequirementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskDefinitionResourceRequirement {
		return vs[0].([]TaskDefinitionResourceRequirement)[vs[1].(int)]
	}).(TaskDefinitionResourceRequirementOutput)
}

// You can enable a restart policy for each container defined in your task definition, to overcome transient failures faster and maintain task availability. When you enable a restart policy for a container, Amazon ECS can restart the container if it exits, without needing to replace the task. For more information, see [Restart individual containers in Amazon ECS tasks with container restart policies](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/container-restart-policy.html) in the *Amazon Elastic Container Service Developer Guide*.
type TaskDefinitionRestartPolicy struct {
	// Specifies whether a restart policy is enabled for the container.
	Enabled *bool `pulumi:"enabled"`
	// A list of exit codes that Amazon ECS will ignore and not attempt a restart on. You can specify a maximum of 50 container exit codes. By default, Amazon ECS does not ignore any exit codes.
	IgnoredExitCodes []int `pulumi:"ignoredExitCodes"`
	// A period of time (in seconds) that the container must run for before a restart can be attempted. A container can be restarted only once every ``restartAttemptPeriod`` seconds. If a container isn't able to run for this time period and exits early, it will not be restarted. You can set a minimum ``restartAttemptPeriod`` of 60 seconds and a maximum ``restartAttemptPeriod`` of 1800 seconds. By default, a container must run for 300 seconds before it can be restarted.
	RestartAttemptPeriod *int `pulumi:"restartAttemptPeriod"`
}

// TaskDefinitionRestartPolicyInput is an input type that accepts TaskDefinitionRestartPolicyArgs and TaskDefinitionRestartPolicyOutput values.
// You can construct a concrete instance of `TaskDefinitionRestartPolicyInput` via:
//
//	TaskDefinitionRestartPolicyArgs{...}
type TaskDefinitionRestartPolicyInput interface {
	pulumi.Input

	ToTaskDefinitionRestartPolicyOutput() TaskDefinitionRestartPolicyOutput
	ToTaskDefinitionRestartPolicyOutputWithContext(context.Context) TaskDefinitionRestartPolicyOutput
}

// You can enable a restart policy for each container defined in your task definition, to overcome transient failures faster and maintain task availability. When you enable a restart policy for a container, Amazon ECS can restart the container if it exits, without needing to replace the task. For more information, see [Restart individual containers in Amazon ECS tasks with container restart policies](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/container-restart-policy.html) in the *Amazon Elastic Container Service Developer Guide*.
type TaskDefinitionRestartPolicyArgs struct {
	// Specifies whether a restart policy is enabled for the container.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// A list of exit codes that Amazon ECS will ignore and not attempt a restart on. You can specify a maximum of 50 container exit codes. By default, Amazon ECS does not ignore any exit codes.
	IgnoredExitCodes pulumi.IntArrayInput `pulumi:"ignoredExitCodes"`
	// A period of time (in seconds) that the container must run for before a restart can be attempted. A container can be restarted only once every ``restartAttemptPeriod`` seconds. If a container isn't able to run for this time period and exits early, it will not be restarted. You can set a minimum ``restartAttemptPeriod`` of 60 seconds and a maximum ``restartAttemptPeriod`` of 1800 seconds. By default, a container must run for 300 seconds before it can be restarted.
	RestartAttemptPeriod pulumi.IntPtrInput `pulumi:"restartAttemptPeriod"`
}

func (TaskDefinitionRestartPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionRestartPolicy)(nil)).Elem()
}

func (i TaskDefinitionRestartPolicyArgs) ToTaskDefinitionRestartPolicyOutput() TaskDefinitionRestartPolicyOutput {
	return i.ToTaskDefinitionRestartPolicyOutputWithContext(context.Background())
}

func (i TaskDefinitionRestartPolicyArgs) ToTaskDefinitionRestartPolicyOutputWithContext(ctx context.Context) TaskDefinitionRestartPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionRestartPolicyOutput)
}

func (i TaskDefinitionRestartPolicyArgs) ToTaskDefinitionRestartPolicyPtrOutput() TaskDefinitionRestartPolicyPtrOutput {
	return i.ToTaskDefinitionRestartPolicyPtrOutputWithContext(context.Background())
}

func (i TaskDefinitionRestartPolicyArgs) ToTaskDefinitionRestartPolicyPtrOutputWithContext(ctx context.Context) TaskDefinitionRestartPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionRestartPolicyOutput).ToTaskDefinitionRestartPolicyPtrOutputWithContext(ctx)
}

// TaskDefinitionRestartPolicyPtrInput is an input type that accepts TaskDefinitionRestartPolicyArgs, TaskDefinitionRestartPolicyPtr and TaskDefinitionRestartPolicyPtrOutput values.
// You can construct a concrete instance of `TaskDefinitionRestartPolicyPtrInput` via:
//
//	        TaskDefinitionRestartPolicyArgs{...}
//
//	or:
//
//	        nil
type TaskDefinitionRestartPolicyPtrInput interface {
	pulumi.Input

	ToTaskDefinitionRestartPolicyPtrOutput() TaskDefinitionRestartPolicyPtrOutput
	ToTaskDefinitionRestartPolicyPtrOutputWithContext(context.Context) TaskDefinitionRestartPolicyPtrOutput
}

type taskDefinitionRestartPolicyPtrType TaskDefinitionRestartPolicyArgs

func TaskDefinitionRestartPolicyPtr(v *TaskDefinitionRestartPolicyArgs) TaskDefinitionRestartPolicyPtrInput {
	return (*taskDefinitionRestartPolicyPtrType)(v)
}

func (*taskDefinitionRestartPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionRestartPolicy)(nil)).Elem()
}

func (i *taskDefinitionRestartPolicyPtrType) ToTaskDefinitionRestartPolicyPtrOutput() TaskDefinitionRestartPolicyPtrOutput {
	return i.ToTaskDefinitionRestartPolicyPtrOutputWithContext(context.Background())
}

func (i *taskDefinitionRestartPolicyPtrType) ToTaskDefinitionRestartPolicyPtrOutputWithContext(ctx context.Context) TaskDefinitionRestartPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionRestartPolicyPtrOutput)
}

// You can enable a restart policy for each container defined in your task definition, to overcome transient failures faster and maintain task availability. When you enable a restart policy for a container, Amazon ECS can restart the container if it exits, without needing to replace the task. For more information, see [Restart individual containers in Amazon ECS tasks with container restart policies](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/container-restart-policy.html) in the *Amazon Elastic Container Service Developer Guide*.
type TaskDefinitionRestartPolicyOutput struct{ *pulumi.OutputState }

func (TaskDefinitionRestartPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionRestartPolicy)(nil)).Elem()
}

func (o TaskDefinitionRestartPolicyOutput) ToTaskDefinitionRestartPolicyOutput() TaskDefinitionRestartPolicyOutput {
	return o
}

func (o TaskDefinitionRestartPolicyOutput) ToTaskDefinitionRestartPolicyOutputWithContext(ctx context.Context) TaskDefinitionRestartPolicyOutput {
	return o
}

func (o TaskDefinitionRestartPolicyOutput) ToTaskDefinitionRestartPolicyPtrOutput() TaskDefinitionRestartPolicyPtrOutput {
	return o.ToTaskDefinitionRestartPolicyPtrOutputWithContext(context.Background())
}

func (o TaskDefinitionRestartPolicyOutput) ToTaskDefinitionRestartPolicyPtrOutputWithContext(ctx context.Context) TaskDefinitionRestartPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskDefinitionRestartPolicy) *TaskDefinitionRestartPolicy {
		return &v
	}).(TaskDefinitionRestartPolicyPtrOutput)
}

// Specifies whether a restart policy is enabled for the container.
func (o TaskDefinitionRestartPolicyOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TaskDefinitionRestartPolicy) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// A list of exit codes that Amazon ECS will ignore and not attempt a restart on. You can specify a maximum of 50 container exit codes. By default, Amazon ECS does not ignore any exit codes.
func (o TaskDefinitionRestartPolicyOutput) IgnoredExitCodes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v TaskDefinitionRestartPolicy) []int { return v.IgnoredExitCodes }).(pulumi.IntArrayOutput)
}

// A period of time (in seconds) that the container must run for before a restart can be attempted. A container can be restarted only once every “restartAttemptPeriod“ seconds. If a container isn't able to run for this time period and exits early, it will not be restarted. You can set a minimum “restartAttemptPeriod“ of 60 seconds and a maximum “restartAttemptPeriod“ of 1800 seconds. By default, a container must run for 300 seconds before it can be restarted.
func (o TaskDefinitionRestartPolicyOutput) RestartAttemptPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskDefinitionRestartPolicy) *int { return v.RestartAttemptPeriod }).(pulumi.IntPtrOutput)
}

type TaskDefinitionRestartPolicyPtrOutput struct{ *pulumi.OutputState }

func (TaskDefinitionRestartPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionRestartPolicy)(nil)).Elem()
}

func (o TaskDefinitionRestartPolicyPtrOutput) ToTaskDefinitionRestartPolicyPtrOutput() TaskDefinitionRestartPolicyPtrOutput {
	return o
}

func (o TaskDefinitionRestartPolicyPtrOutput) ToTaskDefinitionRestartPolicyPtrOutputWithContext(ctx context.Context) TaskDefinitionRestartPolicyPtrOutput {
	return o
}

func (o TaskDefinitionRestartPolicyPtrOutput) Elem() TaskDefinitionRestartPolicyOutput {
	return o.ApplyT(func(v *TaskDefinitionRestartPolicy) TaskDefinitionRestartPolicy {
		if v != nil {
			return *v
		}
		var ret TaskDefinitionRestartPolicy
		return ret
	}).(TaskDefinitionRestartPolicyOutput)
}

// Specifies whether a restart policy is enabled for the container.
func (o TaskDefinitionRestartPolicyPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionRestartPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// A list of exit codes that Amazon ECS will ignore and not attempt a restart on. You can specify a maximum of 50 container exit codes. By default, Amazon ECS does not ignore any exit codes.
func (o TaskDefinitionRestartPolicyPtrOutput) IgnoredExitCodes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *TaskDefinitionRestartPolicy) []int {
		if v == nil {
			return nil
		}
		return v.IgnoredExitCodes
	}).(pulumi.IntArrayOutput)
}

// A period of time (in seconds) that the container must run for before a restart can be attempted. A container can be restarted only once every “restartAttemptPeriod“ seconds. If a container isn't able to run for this time period and exits early, it will not be restarted. You can set a minimum “restartAttemptPeriod“ of 60 seconds and a maximum “restartAttemptPeriod“ of 1800 seconds. By default, a container must run for 300 seconds before it can be restarted.
func (o TaskDefinitionRestartPolicyPtrOutput) RestartAttemptPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionRestartPolicy) *int {
		if v == nil {
			return nil
		}
		return v.RestartAttemptPeriod
	}).(pulumi.IntPtrOutput)
}

// Information about the platform for the Amazon ECS service or task.
//
//	For more information about ``RuntimePlatform``, see [RuntimePlatform](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#runtime-platform) in the *Amazon Elastic Container Service Developer Guide*.
type TaskDefinitionRuntimePlatform struct {
	// The CPU architecture.
	//  You can run your Linux tasks on an ARM-based platform by setting the value to ``ARM64``. This option is available for tasks that run on Linux Amazon EC2 instance or Linux containers on Fargate.
	CpuArchitecture *string `pulumi:"cpuArchitecture"`
	// The operating system.
	OperatingSystemFamily *string `pulumi:"operatingSystemFamily"`
}

// TaskDefinitionRuntimePlatformInput is an input type that accepts TaskDefinitionRuntimePlatformArgs and TaskDefinitionRuntimePlatformOutput values.
// You can construct a concrete instance of `TaskDefinitionRuntimePlatformInput` via:
//
//	TaskDefinitionRuntimePlatformArgs{...}
type TaskDefinitionRuntimePlatformInput interface {
	pulumi.Input

	ToTaskDefinitionRuntimePlatformOutput() TaskDefinitionRuntimePlatformOutput
	ToTaskDefinitionRuntimePlatformOutputWithContext(context.Context) TaskDefinitionRuntimePlatformOutput
}

// Information about the platform for the Amazon ECS service or task.
//
//	For more information about ``RuntimePlatform``, see [RuntimePlatform](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#runtime-platform) in the *Amazon Elastic Container Service Developer Guide*.
type TaskDefinitionRuntimePlatformArgs struct {
	// The CPU architecture.
	//  You can run your Linux tasks on an ARM-based platform by setting the value to ``ARM64``. This option is available for tasks that run on Linux Amazon EC2 instance or Linux containers on Fargate.
	CpuArchitecture pulumi.StringPtrInput `pulumi:"cpuArchitecture"`
	// The operating system.
	OperatingSystemFamily pulumi.StringPtrInput `pulumi:"operatingSystemFamily"`
}

func (TaskDefinitionRuntimePlatformArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionRuntimePlatform)(nil)).Elem()
}

func (i TaskDefinitionRuntimePlatformArgs) ToTaskDefinitionRuntimePlatformOutput() TaskDefinitionRuntimePlatformOutput {
	return i.ToTaskDefinitionRuntimePlatformOutputWithContext(context.Background())
}

func (i TaskDefinitionRuntimePlatformArgs) ToTaskDefinitionRuntimePlatformOutputWithContext(ctx context.Context) TaskDefinitionRuntimePlatformOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionRuntimePlatformOutput)
}

func (i TaskDefinitionRuntimePlatformArgs) ToTaskDefinitionRuntimePlatformPtrOutput() TaskDefinitionRuntimePlatformPtrOutput {
	return i.ToTaskDefinitionRuntimePlatformPtrOutputWithContext(context.Background())
}

func (i TaskDefinitionRuntimePlatformArgs) ToTaskDefinitionRuntimePlatformPtrOutputWithContext(ctx context.Context) TaskDefinitionRuntimePlatformPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionRuntimePlatformOutput).ToTaskDefinitionRuntimePlatformPtrOutputWithContext(ctx)
}

// TaskDefinitionRuntimePlatformPtrInput is an input type that accepts TaskDefinitionRuntimePlatformArgs, TaskDefinitionRuntimePlatformPtr and TaskDefinitionRuntimePlatformPtrOutput values.
// You can construct a concrete instance of `TaskDefinitionRuntimePlatformPtrInput` via:
//
//	        TaskDefinitionRuntimePlatformArgs{...}
//
//	or:
//
//	        nil
type TaskDefinitionRuntimePlatformPtrInput interface {
	pulumi.Input

	ToTaskDefinitionRuntimePlatformPtrOutput() TaskDefinitionRuntimePlatformPtrOutput
	ToTaskDefinitionRuntimePlatformPtrOutputWithContext(context.Context) TaskDefinitionRuntimePlatformPtrOutput
}

type taskDefinitionRuntimePlatformPtrType TaskDefinitionRuntimePlatformArgs

func TaskDefinitionRuntimePlatformPtr(v *TaskDefinitionRuntimePlatformArgs) TaskDefinitionRuntimePlatformPtrInput {
	return (*taskDefinitionRuntimePlatformPtrType)(v)
}

func (*taskDefinitionRuntimePlatformPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionRuntimePlatform)(nil)).Elem()
}

func (i *taskDefinitionRuntimePlatformPtrType) ToTaskDefinitionRuntimePlatformPtrOutput() TaskDefinitionRuntimePlatformPtrOutput {
	return i.ToTaskDefinitionRuntimePlatformPtrOutputWithContext(context.Background())
}

func (i *taskDefinitionRuntimePlatformPtrType) ToTaskDefinitionRuntimePlatformPtrOutputWithContext(ctx context.Context) TaskDefinitionRuntimePlatformPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionRuntimePlatformPtrOutput)
}

// Information about the platform for the Amazon ECS service or task.
//
//	For more information about ``RuntimePlatform``, see [RuntimePlatform](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#runtime-platform) in the *Amazon Elastic Container Service Developer Guide*.
type TaskDefinitionRuntimePlatformOutput struct{ *pulumi.OutputState }

func (TaskDefinitionRuntimePlatformOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionRuntimePlatform)(nil)).Elem()
}

func (o TaskDefinitionRuntimePlatformOutput) ToTaskDefinitionRuntimePlatformOutput() TaskDefinitionRuntimePlatformOutput {
	return o
}

func (o TaskDefinitionRuntimePlatformOutput) ToTaskDefinitionRuntimePlatformOutputWithContext(ctx context.Context) TaskDefinitionRuntimePlatformOutput {
	return o
}

func (o TaskDefinitionRuntimePlatformOutput) ToTaskDefinitionRuntimePlatformPtrOutput() TaskDefinitionRuntimePlatformPtrOutput {
	return o.ToTaskDefinitionRuntimePlatformPtrOutputWithContext(context.Background())
}

func (o TaskDefinitionRuntimePlatformOutput) ToTaskDefinitionRuntimePlatformPtrOutputWithContext(ctx context.Context) TaskDefinitionRuntimePlatformPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskDefinitionRuntimePlatform) *TaskDefinitionRuntimePlatform {
		return &v
	}).(TaskDefinitionRuntimePlatformPtrOutput)
}

// The CPU architecture.
//
//	You can run your Linux tasks on an ARM-based platform by setting the value to ``ARM64``. This option is available for tasks that run on Linux Amazon EC2 instance or Linux containers on Fargate.
func (o TaskDefinitionRuntimePlatformOutput) CpuArchitecture() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionRuntimePlatform) *string { return v.CpuArchitecture }).(pulumi.StringPtrOutput)
}

// The operating system.
func (o TaskDefinitionRuntimePlatformOutput) OperatingSystemFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionRuntimePlatform) *string { return v.OperatingSystemFamily }).(pulumi.StringPtrOutput)
}

type TaskDefinitionRuntimePlatformPtrOutput struct{ *pulumi.OutputState }

func (TaskDefinitionRuntimePlatformPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionRuntimePlatform)(nil)).Elem()
}

func (o TaskDefinitionRuntimePlatformPtrOutput) ToTaskDefinitionRuntimePlatformPtrOutput() TaskDefinitionRuntimePlatformPtrOutput {
	return o
}

func (o TaskDefinitionRuntimePlatformPtrOutput) ToTaskDefinitionRuntimePlatformPtrOutputWithContext(ctx context.Context) TaskDefinitionRuntimePlatformPtrOutput {
	return o
}

func (o TaskDefinitionRuntimePlatformPtrOutput) Elem() TaskDefinitionRuntimePlatformOutput {
	return o.ApplyT(func(v *TaskDefinitionRuntimePlatform) TaskDefinitionRuntimePlatform {
		if v != nil {
			return *v
		}
		var ret TaskDefinitionRuntimePlatform
		return ret
	}).(TaskDefinitionRuntimePlatformOutput)
}

// The CPU architecture.
//
//	You can run your Linux tasks on an ARM-based platform by setting the value to ``ARM64``. This option is available for tasks that run on Linux Amazon EC2 instance or Linux containers on Fargate.
func (o TaskDefinitionRuntimePlatformPtrOutput) CpuArchitecture() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionRuntimePlatform) *string {
		if v == nil {
			return nil
		}
		return v.CpuArchitecture
	}).(pulumi.StringPtrOutput)
}

// The operating system.
func (o TaskDefinitionRuntimePlatformPtrOutput) OperatingSystemFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionRuntimePlatform) *string {
		if v == nil {
			return nil
		}
		return v.OperatingSystemFamily
	}).(pulumi.StringPtrOutput)
}

// An object representing the secret to expose to your container. Secrets can be exposed to a container in the following ways:
//
//   - To inject sensitive data into your containers as environment variables, use the “secrets“ container definition parameter.
//
//   - To reference sensitive information in the log configuration of a container, use the “secretOptions“ container definition parameter.
//
//     For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the *Amazon Elastic Container Service Developer Guide*.
type TaskDefinitionSecret struct {
	// The name of the secret.
	Name string `pulumi:"name"`
	// The secret to expose to the container. The supported values are either the full ARN of the ASMlong secret or the full ARN of the parameter in the SSM Parameter Store.
	//  For information about the require IAMlong permissions, see [Required IAM permissions for Amazon ECS secrets](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data-secrets.html#secrets-iam) (for Secrets Manager) or [Required IAM permissions for Amazon ECS secrets](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data-parameters.html) (for Systems Manager Parameter store) in the *Amazon Elastic Container Service Developer Guide*.
	//   If the SSM Parameter Store parameter exists in the same Region as the task you're launching, then you can use either the full ARN or name of the parameter. If the parameter exists in a different Region, then the full ARN must be specified.
	ValueFrom string `pulumi:"valueFrom"`
}

// TaskDefinitionSecretInput is an input type that accepts TaskDefinitionSecretArgs and TaskDefinitionSecretOutput values.
// You can construct a concrete instance of `TaskDefinitionSecretInput` via:
//
//	TaskDefinitionSecretArgs{...}
type TaskDefinitionSecretInput interface {
	pulumi.Input

	ToTaskDefinitionSecretOutput() TaskDefinitionSecretOutput
	ToTaskDefinitionSecretOutputWithContext(context.Context) TaskDefinitionSecretOutput
}

// An object representing the secret to expose to your container. Secrets can be exposed to a container in the following ways:
//
//   - To inject sensitive data into your containers as environment variables, use the “secrets“ container definition parameter.
//
//   - To reference sensitive information in the log configuration of a container, use the “secretOptions“ container definition parameter.
//
//     For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the *Amazon Elastic Container Service Developer Guide*.
type TaskDefinitionSecretArgs struct {
	// The name of the secret.
	Name pulumi.StringInput `pulumi:"name"`
	// The secret to expose to the container. The supported values are either the full ARN of the ASMlong secret or the full ARN of the parameter in the SSM Parameter Store.
	//  For information about the require IAMlong permissions, see [Required IAM permissions for Amazon ECS secrets](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data-secrets.html#secrets-iam) (for Secrets Manager) or [Required IAM permissions for Amazon ECS secrets](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data-parameters.html) (for Systems Manager Parameter store) in the *Amazon Elastic Container Service Developer Guide*.
	//   If the SSM Parameter Store parameter exists in the same Region as the task you're launching, then you can use either the full ARN or name of the parameter. If the parameter exists in a different Region, then the full ARN must be specified.
	ValueFrom pulumi.StringInput `pulumi:"valueFrom"`
}

func (TaskDefinitionSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionSecret)(nil)).Elem()
}

func (i TaskDefinitionSecretArgs) ToTaskDefinitionSecretOutput() TaskDefinitionSecretOutput {
	return i.ToTaskDefinitionSecretOutputWithContext(context.Background())
}

func (i TaskDefinitionSecretArgs) ToTaskDefinitionSecretOutputWithContext(ctx context.Context) TaskDefinitionSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionSecretOutput)
}

// TaskDefinitionSecretArrayInput is an input type that accepts TaskDefinitionSecretArray and TaskDefinitionSecretArrayOutput values.
// You can construct a concrete instance of `TaskDefinitionSecretArrayInput` via:
//
//	TaskDefinitionSecretArray{ TaskDefinitionSecretArgs{...} }
type TaskDefinitionSecretArrayInput interface {
	pulumi.Input

	ToTaskDefinitionSecretArrayOutput() TaskDefinitionSecretArrayOutput
	ToTaskDefinitionSecretArrayOutputWithContext(context.Context) TaskDefinitionSecretArrayOutput
}

type TaskDefinitionSecretArray []TaskDefinitionSecretInput

func (TaskDefinitionSecretArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionSecret)(nil)).Elem()
}

func (i TaskDefinitionSecretArray) ToTaskDefinitionSecretArrayOutput() TaskDefinitionSecretArrayOutput {
	return i.ToTaskDefinitionSecretArrayOutputWithContext(context.Background())
}

func (i TaskDefinitionSecretArray) ToTaskDefinitionSecretArrayOutputWithContext(ctx context.Context) TaskDefinitionSecretArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionSecretArrayOutput)
}

// An object representing the secret to expose to your container. Secrets can be exposed to a container in the following ways:
//
//   - To inject sensitive data into your containers as environment variables, use the “secrets“ container definition parameter.
//
//   - To reference sensitive information in the log configuration of a container, use the “secretOptions“ container definition parameter.
//
//     For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the *Amazon Elastic Container Service Developer Guide*.
type TaskDefinitionSecretOutput struct{ *pulumi.OutputState }

func (TaskDefinitionSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionSecret)(nil)).Elem()
}

func (o TaskDefinitionSecretOutput) ToTaskDefinitionSecretOutput() TaskDefinitionSecretOutput {
	return o
}

func (o TaskDefinitionSecretOutput) ToTaskDefinitionSecretOutputWithContext(ctx context.Context) TaskDefinitionSecretOutput {
	return o
}

// The name of the secret.
func (o TaskDefinitionSecretOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TaskDefinitionSecret) string { return v.Name }).(pulumi.StringOutput)
}

// The secret to expose to the container. The supported values are either the full ARN of the ASMlong secret or the full ARN of the parameter in the SSM Parameter Store.
//
//	For information about the require IAMlong permissions, see [Required IAM permissions for Amazon ECS secrets](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data-secrets.html#secrets-iam) (for Secrets Manager) or [Required IAM permissions for Amazon ECS secrets](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data-parameters.html) (for Systems Manager Parameter store) in the *Amazon Elastic Container Service Developer Guide*.
//	 If the SSM Parameter Store parameter exists in the same Region as the task you're launching, then you can use either the full ARN or name of the parameter. If the parameter exists in a different Region, then the full ARN must be specified.
func (o TaskDefinitionSecretOutput) ValueFrom() pulumi.StringOutput {
	return o.ApplyT(func(v TaskDefinitionSecret) string { return v.ValueFrom }).(pulumi.StringOutput)
}

type TaskDefinitionSecretArrayOutput struct{ *pulumi.OutputState }

func (TaskDefinitionSecretArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionSecret)(nil)).Elem()
}

func (o TaskDefinitionSecretArrayOutput) ToTaskDefinitionSecretArrayOutput() TaskDefinitionSecretArrayOutput {
	return o
}

func (o TaskDefinitionSecretArrayOutput) ToTaskDefinitionSecretArrayOutputWithContext(ctx context.Context) TaskDefinitionSecretArrayOutput {
	return o
}

func (o TaskDefinitionSecretArrayOutput) Index(i pulumi.IntInput) TaskDefinitionSecretOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskDefinitionSecret {
		return vs[0].([]TaskDefinitionSecret)[vs[1].(int)]
	}).(TaskDefinitionSecretOutput)
}

// A list of namespaced kernel parameters to set in the container. This parameter maps to “Sysctls“ in the docker container create command and the “--sysctl“ option to docker run. For example, you can configure “net.ipv4.tcp_keepalive_time“ setting to maintain longer lived connections.
//
//	We don't recommend that you specify network-related ``systemControls`` parameters for multiple containers in a single task that also uses either the ``awsvpc`` or ``host`` network mode. Doing this has the following disadvantages:
//	 +  For tasks that use the ``awsvpc`` network mode including Fargate, if you set ``systemControls`` for any container, it applies to all containers in the task. If you set different ``systemControls`` for multiple containers in a single task, the container that's started last determines which ``systemControls`` take effect.
//	 +  For tasks that use the ``host`` network mode, the network namespace ``systemControls`` aren't supported.
//
//	If you're setting an IPC resource namespace to use for the containers in the task, the following conditions apply to your system controls. For more information, see [IPC mode](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#task_definition_ipcmode).
//	 +  For tasks that use the ``host`` IPC mode, IPC namespace ``systemControls`` aren't supported.
//	 +  For tasks that use the ``task`` IPC mode, IPC namespace ``systemControls`` values apply to all containers within a task.
//
//	 This parameter is not supported for Windows containers.
//	  This parameter is only supported for tasks that are hosted on FARGATElong if the tasks are using platform version ``1.4.0`` or later (Linux). This isn't supported for Windows containers on Fargate.
type TaskDefinitionSystemControl struct {
	// The namespaced kernel parameter to set a ``value`` for.
	Namespace *string `pulumi:"namespace"`
	// The namespaced kernel parameter to set a ``value`` for.
	//  Valid IPC namespace values: ``"kernel.msgmax" | "kernel.msgmnb" | "kernel.msgmni" | "kernel.sem" | "kernel.shmall" | "kernel.shmmax" | "kernel.shmmni" | "kernel.shm_rmid_forced"``, and ``Sysctls`` that start with ``"fs.mqueue.*"``
	//  Valid network namespace values: ``Sysctls`` that start with ``"net.*"``. Only namespaced ``Sysctls`` that exist within the container starting with "net.* are accepted.
	//  All of these values are supported by Fargate.
	Value *string `pulumi:"value"`
}

// TaskDefinitionSystemControlInput is an input type that accepts TaskDefinitionSystemControlArgs and TaskDefinitionSystemControlOutput values.
// You can construct a concrete instance of `TaskDefinitionSystemControlInput` via:
//
//	TaskDefinitionSystemControlArgs{...}
type TaskDefinitionSystemControlInput interface {
	pulumi.Input

	ToTaskDefinitionSystemControlOutput() TaskDefinitionSystemControlOutput
	ToTaskDefinitionSystemControlOutputWithContext(context.Context) TaskDefinitionSystemControlOutput
}

// A list of namespaced kernel parameters to set in the container. This parameter maps to “Sysctls“ in the docker container create command and the “--sysctl“ option to docker run. For example, you can configure “net.ipv4.tcp_keepalive_time“ setting to maintain longer lived connections.
//
//	We don't recommend that you specify network-related ``systemControls`` parameters for multiple containers in a single task that also uses either the ``awsvpc`` or ``host`` network mode. Doing this has the following disadvantages:
//	 +  For tasks that use the ``awsvpc`` network mode including Fargate, if you set ``systemControls`` for any container, it applies to all containers in the task. If you set different ``systemControls`` for multiple containers in a single task, the container that's started last determines which ``systemControls`` take effect.
//	 +  For tasks that use the ``host`` network mode, the network namespace ``systemControls`` aren't supported.
//
//	If you're setting an IPC resource namespace to use for the containers in the task, the following conditions apply to your system controls. For more information, see [IPC mode](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#task_definition_ipcmode).
//	 +  For tasks that use the ``host`` IPC mode, IPC namespace ``systemControls`` aren't supported.
//	 +  For tasks that use the ``task`` IPC mode, IPC namespace ``systemControls`` values apply to all containers within a task.
//
//	 This parameter is not supported for Windows containers.
//	  This parameter is only supported for tasks that are hosted on FARGATElong if the tasks are using platform version ``1.4.0`` or later (Linux). This isn't supported for Windows containers on Fargate.
type TaskDefinitionSystemControlArgs struct {
	// The namespaced kernel parameter to set a ``value`` for.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The namespaced kernel parameter to set a ``value`` for.
	//  Valid IPC namespace values: ``"kernel.msgmax" | "kernel.msgmnb" | "kernel.msgmni" | "kernel.sem" | "kernel.shmall" | "kernel.shmmax" | "kernel.shmmni" | "kernel.shm_rmid_forced"``, and ``Sysctls`` that start with ``"fs.mqueue.*"``
	//  Valid network namespace values: ``Sysctls`` that start with ``"net.*"``. Only namespaced ``Sysctls`` that exist within the container starting with "net.* are accepted.
	//  All of these values are supported by Fargate.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (TaskDefinitionSystemControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionSystemControl)(nil)).Elem()
}

func (i TaskDefinitionSystemControlArgs) ToTaskDefinitionSystemControlOutput() TaskDefinitionSystemControlOutput {
	return i.ToTaskDefinitionSystemControlOutputWithContext(context.Background())
}

func (i TaskDefinitionSystemControlArgs) ToTaskDefinitionSystemControlOutputWithContext(ctx context.Context) TaskDefinitionSystemControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionSystemControlOutput)
}

// TaskDefinitionSystemControlArrayInput is an input type that accepts TaskDefinitionSystemControlArray and TaskDefinitionSystemControlArrayOutput values.
// You can construct a concrete instance of `TaskDefinitionSystemControlArrayInput` via:
//
//	TaskDefinitionSystemControlArray{ TaskDefinitionSystemControlArgs{...} }
type TaskDefinitionSystemControlArrayInput interface {
	pulumi.Input

	ToTaskDefinitionSystemControlArrayOutput() TaskDefinitionSystemControlArrayOutput
	ToTaskDefinitionSystemControlArrayOutputWithContext(context.Context) TaskDefinitionSystemControlArrayOutput
}

type TaskDefinitionSystemControlArray []TaskDefinitionSystemControlInput

func (TaskDefinitionSystemControlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionSystemControl)(nil)).Elem()
}

func (i TaskDefinitionSystemControlArray) ToTaskDefinitionSystemControlArrayOutput() TaskDefinitionSystemControlArrayOutput {
	return i.ToTaskDefinitionSystemControlArrayOutputWithContext(context.Background())
}

func (i TaskDefinitionSystemControlArray) ToTaskDefinitionSystemControlArrayOutputWithContext(ctx context.Context) TaskDefinitionSystemControlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionSystemControlArrayOutput)
}

// A list of namespaced kernel parameters to set in the container. This parameter maps to “Sysctls“ in the docker container create command and the “--sysctl“ option to docker run. For example, you can configure “net.ipv4.tcp_keepalive_time“ setting to maintain longer lived connections.
//
//	We don't recommend that you specify network-related ``systemControls`` parameters for multiple containers in a single task that also uses either the ``awsvpc`` or ``host`` network mode. Doing this has the following disadvantages:
//	 +  For tasks that use the ``awsvpc`` network mode including Fargate, if you set ``systemControls`` for any container, it applies to all containers in the task. If you set different ``systemControls`` for multiple containers in a single task, the container that's started last determines which ``systemControls`` take effect.
//	 +  For tasks that use the ``host`` network mode, the network namespace ``systemControls`` aren't supported.
//
//	If you're setting an IPC resource namespace to use for the containers in the task, the following conditions apply to your system controls. For more information, see [IPC mode](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#task_definition_ipcmode).
//	 +  For tasks that use the ``host`` IPC mode, IPC namespace ``systemControls`` aren't supported.
//	 +  For tasks that use the ``task`` IPC mode, IPC namespace ``systemControls`` values apply to all containers within a task.
//
//	 This parameter is not supported for Windows containers.
//	  This parameter is only supported for tasks that are hosted on FARGATElong if the tasks are using platform version ``1.4.0`` or later (Linux). This isn't supported for Windows containers on Fargate.
type TaskDefinitionSystemControlOutput struct{ *pulumi.OutputState }

func (TaskDefinitionSystemControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionSystemControl)(nil)).Elem()
}

func (o TaskDefinitionSystemControlOutput) ToTaskDefinitionSystemControlOutput() TaskDefinitionSystemControlOutput {
	return o
}

func (o TaskDefinitionSystemControlOutput) ToTaskDefinitionSystemControlOutputWithContext(ctx context.Context) TaskDefinitionSystemControlOutput {
	return o
}

// The namespaced kernel parameter to set a “value“ for.
func (o TaskDefinitionSystemControlOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionSystemControl) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The namespaced kernel parameter to set a “value“ for.
//
//	Valid IPC namespace values: ``"kernel.msgmax" | "kernel.msgmnb" | "kernel.msgmni" | "kernel.sem" | "kernel.shmall" | "kernel.shmmax" | "kernel.shmmni" | "kernel.shm_rmid_forced"``, and ``Sysctls`` that start with ``"fs.mqueue.*"``
//	Valid network namespace values: ``Sysctls`` that start with ``"net.*"``. Only namespaced ``Sysctls`` that exist within the container starting with "net.* are accepted.
//	All of these values are supported by Fargate.
func (o TaskDefinitionSystemControlOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionSystemControl) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type TaskDefinitionSystemControlArrayOutput struct{ *pulumi.OutputState }

func (TaskDefinitionSystemControlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionSystemControl)(nil)).Elem()
}

func (o TaskDefinitionSystemControlArrayOutput) ToTaskDefinitionSystemControlArrayOutput() TaskDefinitionSystemControlArrayOutput {
	return o
}

func (o TaskDefinitionSystemControlArrayOutput) ToTaskDefinitionSystemControlArrayOutputWithContext(ctx context.Context) TaskDefinitionSystemControlArrayOutput {
	return o
}

func (o TaskDefinitionSystemControlArrayOutput) Index(i pulumi.IntInput) TaskDefinitionSystemControlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskDefinitionSystemControl {
		return vs[0].([]TaskDefinitionSystemControl)[vs[1].(int)]
	}).(TaskDefinitionSystemControlOutput)
}

// The metadata that you apply to a resource to help you categorize and organize them. Each tag consists of a key and an optional value. You define them.
//
//	The following basic restrictions apply to tags:
//	 +  Maximum number of tags per resource - 50
//	 +  For each resource, each tag key must be unique, and each tag key can have only one value.
//	 +  Maximum key length - 128 Unicode characters in UTF-8
//	 +  Maximum value length - 256 Unicode characters in UTF-8
//	 +  If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
//	 +  Tag keys and values are case-sensitive.
//	 +  Do not use ``aws:``, ``AWS:``, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
type TaskDefinitionTag struct {
	// One part of a key-value pair that make up a tag. A ``key`` is a general label that acts like a category for more specific tag values.
	Key *string `pulumi:"key"`
	// The optional part of a key-value pair that make up a tag. A ``value`` acts as a descriptor within a tag category (key).
	Value *string `pulumi:"value"`
}

// The container path, mount options, and size of the tmpfs mount.
type TaskDefinitionTmpfs struct {
	// The absolute file path where the tmpfs volume is to be mounted.
	ContainerPath *string `pulumi:"containerPath"`
	// The list of tmpfs volume mount options.
	//  Valid values: ``"defaults" | "ro" | "rw" | "suid" | "nosuid" | "dev" | "nodev" | "exec" | "noexec" | "sync" | "async" | "dirsync" | "remount" | "mand" | "nomand" | "atime" | "noatime" | "diratime" | "nodiratime" | "bind" | "rbind" | "unbindable" | "runbindable" | "private" | "rprivate" | "shared" | "rshared" | "slave" | "rslave" | "relatime" | "norelatime" | "strictatime" | "nostrictatime" | "mode" | "uid" | "gid" | "nr_inodes" | "nr_blocks" | "mpol"``
	MountOptions []string `pulumi:"mountOptions"`
	// The maximum size (in MiB) of the tmpfs volume.
	Size int `pulumi:"size"`
}

// TaskDefinitionTmpfsInput is an input type that accepts TaskDefinitionTmpfsArgs and TaskDefinitionTmpfsOutput values.
// You can construct a concrete instance of `TaskDefinitionTmpfsInput` via:
//
//	TaskDefinitionTmpfsArgs{...}
type TaskDefinitionTmpfsInput interface {
	pulumi.Input

	ToTaskDefinitionTmpfsOutput() TaskDefinitionTmpfsOutput
	ToTaskDefinitionTmpfsOutputWithContext(context.Context) TaskDefinitionTmpfsOutput
}

// The container path, mount options, and size of the tmpfs mount.
type TaskDefinitionTmpfsArgs struct {
	// The absolute file path where the tmpfs volume is to be mounted.
	ContainerPath pulumi.StringPtrInput `pulumi:"containerPath"`
	// The list of tmpfs volume mount options.
	//  Valid values: ``"defaults" | "ro" | "rw" | "suid" | "nosuid" | "dev" | "nodev" | "exec" | "noexec" | "sync" | "async" | "dirsync" | "remount" | "mand" | "nomand" | "atime" | "noatime" | "diratime" | "nodiratime" | "bind" | "rbind" | "unbindable" | "runbindable" | "private" | "rprivate" | "shared" | "rshared" | "slave" | "rslave" | "relatime" | "norelatime" | "strictatime" | "nostrictatime" | "mode" | "uid" | "gid" | "nr_inodes" | "nr_blocks" | "mpol"``
	MountOptions pulumi.StringArrayInput `pulumi:"mountOptions"`
	// The maximum size (in MiB) of the tmpfs volume.
	Size pulumi.IntInput `pulumi:"size"`
}

func (TaskDefinitionTmpfsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionTmpfs)(nil)).Elem()
}

func (i TaskDefinitionTmpfsArgs) ToTaskDefinitionTmpfsOutput() TaskDefinitionTmpfsOutput {
	return i.ToTaskDefinitionTmpfsOutputWithContext(context.Background())
}

func (i TaskDefinitionTmpfsArgs) ToTaskDefinitionTmpfsOutputWithContext(ctx context.Context) TaskDefinitionTmpfsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionTmpfsOutput)
}

// TaskDefinitionTmpfsArrayInput is an input type that accepts TaskDefinitionTmpfsArray and TaskDefinitionTmpfsArrayOutput values.
// You can construct a concrete instance of `TaskDefinitionTmpfsArrayInput` via:
//
//	TaskDefinitionTmpfsArray{ TaskDefinitionTmpfsArgs{...} }
type TaskDefinitionTmpfsArrayInput interface {
	pulumi.Input

	ToTaskDefinitionTmpfsArrayOutput() TaskDefinitionTmpfsArrayOutput
	ToTaskDefinitionTmpfsArrayOutputWithContext(context.Context) TaskDefinitionTmpfsArrayOutput
}

type TaskDefinitionTmpfsArray []TaskDefinitionTmpfsInput

func (TaskDefinitionTmpfsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionTmpfs)(nil)).Elem()
}

func (i TaskDefinitionTmpfsArray) ToTaskDefinitionTmpfsArrayOutput() TaskDefinitionTmpfsArrayOutput {
	return i.ToTaskDefinitionTmpfsArrayOutputWithContext(context.Background())
}

func (i TaskDefinitionTmpfsArray) ToTaskDefinitionTmpfsArrayOutputWithContext(ctx context.Context) TaskDefinitionTmpfsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionTmpfsArrayOutput)
}

// The container path, mount options, and size of the tmpfs mount.
type TaskDefinitionTmpfsOutput struct{ *pulumi.OutputState }

func (TaskDefinitionTmpfsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionTmpfs)(nil)).Elem()
}

func (o TaskDefinitionTmpfsOutput) ToTaskDefinitionTmpfsOutput() TaskDefinitionTmpfsOutput {
	return o
}

func (o TaskDefinitionTmpfsOutput) ToTaskDefinitionTmpfsOutputWithContext(ctx context.Context) TaskDefinitionTmpfsOutput {
	return o
}

// The absolute file path where the tmpfs volume is to be mounted.
func (o TaskDefinitionTmpfsOutput) ContainerPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionTmpfs) *string { return v.ContainerPath }).(pulumi.StringPtrOutput)
}

// The list of tmpfs volume mount options.
//
//	Valid values: ``"defaults" | "ro" | "rw" | "suid" | "nosuid" | "dev" | "nodev" | "exec" | "noexec" | "sync" | "async" | "dirsync" | "remount" | "mand" | "nomand" | "atime" | "noatime" | "diratime" | "nodiratime" | "bind" | "rbind" | "unbindable" | "runbindable" | "private" | "rprivate" | "shared" | "rshared" | "slave" | "rslave" | "relatime" | "norelatime" | "strictatime" | "nostrictatime" | "mode" | "uid" | "gid" | "nr_inodes" | "nr_blocks" | "mpol"``
func (o TaskDefinitionTmpfsOutput) MountOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TaskDefinitionTmpfs) []string { return v.MountOptions }).(pulumi.StringArrayOutput)
}

// The maximum size (in MiB) of the tmpfs volume.
func (o TaskDefinitionTmpfsOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v TaskDefinitionTmpfs) int { return v.Size }).(pulumi.IntOutput)
}

type TaskDefinitionTmpfsArrayOutput struct{ *pulumi.OutputState }

func (TaskDefinitionTmpfsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionTmpfs)(nil)).Elem()
}

func (o TaskDefinitionTmpfsArrayOutput) ToTaskDefinitionTmpfsArrayOutput() TaskDefinitionTmpfsArrayOutput {
	return o
}

func (o TaskDefinitionTmpfsArrayOutput) ToTaskDefinitionTmpfsArrayOutputWithContext(ctx context.Context) TaskDefinitionTmpfsArrayOutput {
	return o
}

func (o TaskDefinitionTmpfsArrayOutput) Index(i pulumi.IntInput) TaskDefinitionTmpfsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskDefinitionTmpfs {
		return vs[0].([]TaskDefinitionTmpfs)[vs[1].(int)]
	}).(TaskDefinitionTmpfsOutput)
}

// The “ulimit“ settings to pass to the container.
//
//	Amazon ECS tasks hosted on FARGATElong use the default resource limit values set by the operating system with the exception of the ``nofile`` resource limit parameter which FARGATElong overrides. The ``nofile`` resource limit sets a restriction on the number of open files that a container can use. The default ``nofile`` soft limit is ``65535`` and the default hard limit is ``65535``.
//	You can specify the ``ulimit`` settings for a container in a task definition.
type TaskDefinitionUlimit struct {
	// The hard limit for the ``ulimit`` type. The value can be specified in bytes, seconds, or as a count, depending on the ``type`` of the ``ulimit``.
	HardLimit int `pulumi:"hardLimit"`
	// The ``type`` of the ``ulimit``.
	Name string `pulumi:"name"`
	// The soft limit for the ``ulimit`` type. The value can be specified in bytes, seconds, or as a count, depending on the ``type`` of the ``ulimit``.
	SoftLimit int `pulumi:"softLimit"`
}

// TaskDefinitionUlimitInput is an input type that accepts TaskDefinitionUlimitArgs and TaskDefinitionUlimitOutput values.
// You can construct a concrete instance of `TaskDefinitionUlimitInput` via:
//
//	TaskDefinitionUlimitArgs{...}
type TaskDefinitionUlimitInput interface {
	pulumi.Input

	ToTaskDefinitionUlimitOutput() TaskDefinitionUlimitOutput
	ToTaskDefinitionUlimitOutputWithContext(context.Context) TaskDefinitionUlimitOutput
}

// The “ulimit“ settings to pass to the container.
//
//	Amazon ECS tasks hosted on FARGATElong use the default resource limit values set by the operating system with the exception of the ``nofile`` resource limit parameter which FARGATElong overrides. The ``nofile`` resource limit sets a restriction on the number of open files that a container can use. The default ``nofile`` soft limit is ``65535`` and the default hard limit is ``65535``.
//	You can specify the ``ulimit`` settings for a container in a task definition.
type TaskDefinitionUlimitArgs struct {
	// The hard limit for the ``ulimit`` type. The value can be specified in bytes, seconds, or as a count, depending on the ``type`` of the ``ulimit``.
	HardLimit pulumi.IntInput `pulumi:"hardLimit"`
	// The ``type`` of the ``ulimit``.
	Name pulumi.StringInput `pulumi:"name"`
	// The soft limit for the ``ulimit`` type. The value can be specified in bytes, seconds, or as a count, depending on the ``type`` of the ``ulimit``.
	SoftLimit pulumi.IntInput `pulumi:"softLimit"`
}

func (TaskDefinitionUlimitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionUlimit)(nil)).Elem()
}

func (i TaskDefinitionUlimitArgs) ToTaskDefinitionUlimitOutput() TaskDefinitionUlimitOutput {
	return i.ToTaskDefinitionUlimitOutputWithContext(context.Background())
}

func (i TaskDefinitionUlimitArgs) ToTaskDefinitionUlimitOutputWithContext(ctx context.Context) TaskDefinitionUlimitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionUlimitOutput)
}

// TaskDefinitionUlimitArrayInput is an input type that accepts TaskDefinitionUlimitArray and TaskDefinitionUlimitArrayOutput values.
// You can construct a concrete instance of `TaskDefinitionUlimitArrayInput` via:
//
//	TaskDefinitionUlimitArray{ TaskDefinitionUlimitArgs{...} }
type TaskDefinitionUlimitArrayInput interface {
	pulumi.Input

	ToTaskDefinitionUlimitArrayOutput() TaskDefinitionUlimitArrayOutput
	ToTaskDefinitionUlimitArrayOutputWithContext(context.Context) TaskDefinitionUlimitArrayOutput
}

type TaskDefinitionUlimitArray []TaskDefinitionUlimitInput

func (TaskDefinitionUlimitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionUlimit)(nil)).Elem()
}

func (i TaskDefinitionUlimitArray) ToTaskDefinitionUlimitArrayOutput() TaskDefinitionUlimitArrayOutput {
	return i.ToTaskDefinitionUlimitArrayOutputWithContext(context.Background())
}

func (i TaskDefinitionUlimitArray) ToTaskDefinitionUlimitArrayOutputWithContext(ctx context.Context) TaskDefinitionUlimitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionUlimitArrayOutput)
}

// The “ulimit“ settings to pass to the container.
//
//	Amazon ECS tasks hosted on FARGATElong use the default resource limit values set by the operating system with the exception of the ``nofile`` resource limit parameter which FARGATElong overrides. The ``nofile`` resource limit sets a restriction on the number of open files that a container can use. The default ``nofile`` soft limit is ``65535`` and the default hard limit is ``65535``.
//	You can specify the ``ulimit`` settings for a container in a task definition.
type TaskDefinitionUlimitOutput struct{ *pulumi.OutputState }

func (TaskDefinitionUlimitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionUlimit)(nil)).Elem()
}

func (o TaskDefinitionUlimitOutput) ToTaskDefinitionUlimitOutput() TaskDefinitionUlimitOutput {
	return o
}

func (o TaskDefinitionUlimitOutput) ToTaskDefinitionUlimitOutputWithContext(ctx context.Context) TaskDefinitionUlimitOutput {
	return o
}

// The hard limit for the “ulimit“ type. The value can be specified in bytes, seconds, or as a count, depending on the “type“ of the “ulimit“.
func (o TaskDefinitionUlimitOutput) HardLimit() pulumi.IntOutput {
	return o.ApplyT(func(v TaskDefinitionUlimit) int { return v.HardLimit }).(pulumi.IntOutput)
}

// The “type“ of the “ulimit“.
func (o TaskDefinitionUlimitOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TaskDefinitionUlimit) string { return v.Name }).(pulumi.StringOutput)
}

// The soft limit for the “ulimit“ type. The value can be specified in bytes, seconds, or as a count, depending on the “type“ of the “ulimit“.
func (o TaskDefinitionUlimitOutput) SoftLimit() pulumi.IntOutput {
	return o.ApplyT(func(v TaskDefinitionUlimit) int { return v.SoftLimit }).(pulumi.IntOutput)
}

type TaskDefinitionUlimitArrayOutput struct{ *pulumi.OutputState }

func (TaskDefinitionUlimitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionUlimit)(nil)).Elem()
}

func (o TaskDefinitionUlimitArrayOutput) ToTaskDefinitionUlimitArrayOutput() TaskDefinitionUlimitArrayOutput {
	return o
}

func (o TaskDefinitionUlimitArrayOutput) ToTaskDefinitionUlimitArrayOutputWithContext(ctx context.Context) TaskDefinitionUlimitArrayOutput {
	return o
}

func (o TaskDefinitionUlimitArrayOutput) Index(i pulumi.IntInput) TaskDefinitionUlimitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskDefinitionUlimit {
		return vs[0].([]TaskDefinitionUlimit)[vs[1].(int)]
	}).(TaskDefinitionUlimitOutput)
}

// The data volume configuration for tasks launched using this task definition. Specifying a volume configuration in a task definition is optional. The volume configuration may contain multiple volumes but only one volume configured at launch is supported. Each volume defined in the volume configuration may only specify a “name“ and one of either “configuredAtLaunch“, “dockerVolumeConfiguration“, “efsVolumeConfiguration“, “fsxWindowsFileServerVolumeConfiguration“, or “host“. If an empty volume configuration is specified, by default Amazon ECS uses a host volume. For more information, see [Using data volumes in tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_data_volumes.html).
type TaskDefinitionVolume struct {
	// Indicates whether the volume should be configured at launch time. This is used to create Amazon EBS volumes for standalone tasks or tasks created as part of a service. Each task definition revision may only have one volume configured at launch in the volume configuration.
	//  To configure a volume at launch time, use this task definition revision and specify a ``volumeConfigurations`` object when calling the ``CreateService``, ``UpdateService``, ``RunTask`` or ``StartTask`` APIs.
	ConfiguredAtLaunch *bool `pulumi:"configuredAtLaunch"`
	// This parameter is specified when you use Docker volumes.
	//  Windows containers only support the use of the ``local`` driver. To use bind mounts, specify the ``host`` parameter instead.
	//   Docker volumes aren't supported by tasks run on FARGATElong.
	DockerVolumeConfiguration *TaskDefinitionDockerVolumeConfiguration `pulumi:"dockerVolumeConfiguration"`
	// This parameter is specified when you use an Amazon Elastic File System file system for task storage.
	EfsVolumeConfiguration *TaskDefinitionEfsVolumeConfiguration `pulumi:"efsVolumeConfiguration"`
	// This parameter is specified when you use Amazon FSx for Windows File Server file system for task storage.
	FSxWindowsFileServerVolumeConfiguration *TaskDefinitionFSxWindowsFileServerVolumeConfiguration `pulumi:"fSxWindowsFileServerVolumeConfiguration"`
	// This parameter is specified when you use bind mount host volumes. The contents of the ``host`` parameter determine whether your bind mount host volume persists on the host container instance and where it's stored. If the ``host`` parameter is empty, then the Docker daemon assigns a host path for your data volume. However, the data isn't guaranteed to persist after the containers that are associated with it stop running.
	//  Windows containers can mount whole directories on the same drive as ``$env:ProgramData``. Windows containers can't mount directories on a different drive, and mount point can't be across drives. For example, you can mount ``C:\my\path:C:\my\path`` and ``D:\:D:\``, but not ``D:\my\path:C:\my\path`` or ``D:\:C:\my\path``.
	Host *TaskDefinitionHostVolumeProperties `pulumi:"host"`
	// The name of the volume. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed.
	//  When using a volume configured at launch, the ``name`` is required and must also be specified as the volume name in the ``ServiceVolumeConfiguration`` or ``TaskVolumeConfiguration`` parameter when creating your service or standalone task.
	//  For all other types of volumes, this name is referenced in the ``sourceVolume`` parameter of the ``mountPoints`` object in the container definition.
	//  When a volume is using the ``efsVolumeConfiguration``, the name is required.
	Name *string `pulumi:"name"`
}

// TaskDefinitionVolumeInput is an input type that accepts TaskDefinitionVolumeArgs and TaskDefinitionVolumeOutput values.
// You can construct a concrete instance of `TaskDefinitionVolumeInput` via:
//
//	TaskDefinitionVolumeArgs{...}
type TaskDefinitionVolumeInput interface {
	pulumi.Input

	ToTaskDefinitionVolumeOutput() TaskDefinitionVolumeOutput
	ToTaskDefinitionVolumeOutputWithContext(context.Context) TaskDefinitionVolumeOutput
}

// The data volume configuration for tasks launched using this task definition. Specifying a volume configuration in a task definition is optional. The volume configuration may contain multiple volumes but only one volume configured at launch is supported. Each volume defined in the volume configuration may only specify a “name“ and one of either “configuredAtLaunch“, “dockerVolumeConfiguration“, “efsVolumeConfiguration“, “fsxWindowsFileServerVolumeConfiguration“, or “host“. If an empty volume configuration is specified, by default Amazon ECS uses a host volume. For more information, see [Using data volumes in tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_data_volumes.html).
type TaskDefinitionVolumeArgs struct {
	// Indicates whether the volume should be configured at launch time. This is used to create Amazon EBS volumes for standalone tasks or tasks created as part of a service. Each task definition revision may only have one volume configured at launch in the volume configuration.
	//  To configure a volume at launch time, use this task definition revision and specify a ``volumeConfigurations`` object when calling the ``CreateService``, ``UpdateService``, ``RunTask`` or ``StartTask`` APIs.
	ConfiguredAtLaunch pulumi.BoolPtrInput `pulumi:"configuredAtLaunch"`
	// This parameter is specified when you use Docker volumes.
	//  Windows containers only support the use of the ``local`` driver. To use bind mounts, specify the ``host`` parameter instead.
	//   Docker volumes aren't supported by tasks run on FARGATElong.
	DockerVolumeConfiguration TaskDefinitionDockerVolumeConfigurationPtrInput `pulumi:"dockerVolumeConfiguration"`
	// This parameter is specified when you use an Amazon Elastic File System file system for task storage.
	EfsVolumeConfiguration TaskDefinitionEfsVolumeConfigurationPtrInput `pulumi:"efsVolumeConfiguration"`
	// This parameter is specified when you use Amazon FSx for Windows File Server file system for task storage.
	FSxWindowsFileServerVolumeConfiguration TaskDefinitionFSxWindowsFileServerVolumeConfigurationPtrInput `pulumi:"fSxWindowsFileServerVolumeConfiguration"`
	// This parameter is specified when you use bind mount host volumes. The contents of the ``host`` parameter determine whether your bind mount host volume persists on the host container instance and where it's stored. If the ``host`` parameter is empty, then the Docker daemon assigns a host path for your data volume. However, the data isn't guaranteed to persist after the containers that are associated with it stop running.
	//  Windows containers can mount whole directories on the same drive as ``$env:ProgramData``. Windows containers can't mount directories on a different drive, and mount point can't be across drives. For example, you can mount ``C:\my\path:C:\my\path`` and ``D:\:D:\``, but not ``D:\my\path:C:\my\path`` or ``D:\:C:\my\path``.
	Host TaskDefinitionHostVolumePropertiesPtrInput `pulumi:"host"`
	// The name of the volume. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed.
	//  When using a volume configured at launch, the ``name`` is required and must also be specified as the volume name in the ``ServiceVolumeConfiguration`` or ``TaskVolumeConfiguration`` parameter when creating your service or standalone task.
	//  For all other types of volumes, this name is referenced in the ``sourceVolume`` parameter of the ``mountPoints`` object in the container definition.
	//  When a volume is using the ``efsVolumeConfiguration``, the name is required.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (TaskDefinitionVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionVolume)(nil)).Elem()
}

func (i TaskDefinitionVolumeArgs) ToTaskDefinitionVolumeOutput() TaskDefinitionVolumeOutput {
	return i.ToTaskDefinitionVolumeOutputWithContext(context.Background())
}

func (i TaskDefinitionVolumeArgs) ToTaskDefinitionVolumeOutputWithContext(ctx context.Context) TaskDefinitionVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionVolumeOutput)
}

// TaskDefinitionVolumeArrayInput is an input type that accepts TaskDefinitionVolumeArray and TaskDefinitionVolumeArrayOutput values.
// You can construct a concrete instance of `TaskDefinitionVolumeArrayInput` via:
//
//	TaskDefinitionVolumeArray{ TaskDefinitionVolumeArgs{...} }
type TaskDefinitionVolumeArrayInput interface {
	pulumi.Input

	ToTaskDefinitionVolumeArrayOutput() TaskDefinitionVolumeArrayOutput
	ToTaskDefinitionVolumeArrayOutputWithContext(context.Context) TaskDefinitionVolumeArrayOutput
}

type TaskDefinitionVolumeArray []TaskDefinitionVolumeInput

func (TaskDefinitionVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionVolume)(nil)).Elem()
}

func (i TaskDefinitionVolumeArray) ToTaskDefinitionVolumeArrayOutput() TaskDefinitionVolumeArrayOutput {
	return i.ToTaskDefinitionVolumeArrayOutputWithContext(context.Background())
}

func (i TaskDefinitionVolumeArray) ToTaskDefinitionVolumeArrayOutputWithContext(ctx context.Context) TaskDefinitionVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionVolumeArrayOutput)
}

// The data volume configuration for tasks launched using this task definition. Specifying a volume configuration in a task definition is optional. The volume configuration may contain multiple volumes but only one volume configured at launch is supported. Each volume defined in the volume configuration may only specify a “name“ and one of either “configuredAtLaunch“, “dockerVolumeConfiguration“, “efsVolumeConfiguration“, “fsxWindowsFileServerVolumeConfiguration“, or “host“. If an empty volume configuration is specified, by default Amazon ECS uses a host volume. For more information, see [Using data volumes in tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_data_volumes.html).
type TaskDefinitionVolumeOutput struct{ *pulumi.OutputState }

func (TaskDefinitionVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionVolume)(nil)).Elem()
}

func (o TaskDefinitionVolumeOutput) ToTaskDefinitionVolumeOutput() TaskDefinitionVolumeOutput {
	return o
}

func (o TaskDefinitionVolumeOutput) ToTaskDefinitionVolumeOutputWithContext(ctx context.Context) TaskDefinitionVolumeOutput {
	return o
}

// Indicates whether the volume should be configured at launch time. This is used to create Amazon EBS volumes for standalone tasks or tasks created as part of a service. Each task definition revision may only have one volume configured at launch in the volume configuration.
//
//	To configure a volume at launch time, use this task definition revision and specify a ``volumeConfigurations`` object when calling the ``CreateService``, ``UpdateService``, ``RunTask`` or ``StartTask`` APIs.
func (o TaskDefinitionVolumeOutput) ConfiguredAtLaunch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TaskDefinitionVolume) *bool { return v.ConfiguredAtLaunch }).(pulumi.BoolPtrOutput)
}

// This parameter is specified when you use Docker volumes.
//
//	Windows containers only support the use of the ``local`` driver. To use bind mounts, specify the ``host`` parameter instead.
//	 Docker volumes aren't supported by tasks run on FARGATElong.
func (o TaskDefinitionVolumeOutput) DockerVolumeConfiguration() TaskDefinitionDockerVolumeConfigurationPtrOutput {
	return o.ApplyT(func(v TaskDefinitionVolume) *TaskDefinitionDockerVolumeConfiguration {
		return v.DockerVolumeConfiguration
	}).(TaskDefinitionDockerVolumeConfigurationPtrOutput)
}

// This parameter is specified when you use an Amazon Elastic File System file system for task storage.
func (o TaskDefinitionVolumeOutput) EfsVolumeConfiguration() TaskDefinitionEfsVolumeConfigurationPtrOutput {
	return o.ApplyT(func(v TaskDefinitionVolume) *TaskDefinitionEfsVolumeConfiguration { return v.EfsVolumeConfiguration }).(TaskDefinitionEfsVolumeConfigurationPtrOutput)
}

// This parameter is specified when you use Amazon FSx for Windows File Server file system for task storage.
func (o TaskDefinitionVolumeOutput) FSxWindowsFileServerVolumeConfiguration() TaskDefinitionFSxWindowsFileServerVolumeConfigurationPtrOutput {
	return o.ApplyT(func(v TaskDefinitionVolume) *TaskDefinitionFSxWindowsFileServerVolumeConfiguration {
		return v.FSxWindowsFileServerVolumeConfiguration
	}).(TaskDefinitionFSxWindowsFileServerVolumeConfigurationPtrOutput)
}

// This parameter is specified when you use bind mount host volumes. The contents of the “host“ parameter determine whether your bind mount host volume persists on the host container instance and where it's stored. If the “host“ parameter is empty, then the Docker daemon assigns a host path for your data volume. However, the data isn't guaranteed to persist after the containers that are associated with it stop running.
//
//	Windows containers can mount whole directories on the same drive as ``$env:ProgramData``. Windows containers can't mount directories on a different drive, and mount point can't be across drives. For example, you can mount ``C:\my\path:C:\my\path`` and ``D:\:D:\``, but not ``D:\my\path:C:\my\path`` or ``D:\:C:\my\path``.
func (o TaskDefinitionVolumeOutput) Host() TaskDefinitionHostVolumePropertiesPtrOutput {
	return o.ApplyT(func(v TaskDefinitionVolume) *TaskDefinitionHostVolumeProperties { return v.Host }).(TaskDefinitionHostVolumePropertiesPtrOutput)
}

// The name of the volume. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed.
//
//	When using a volume configured at launch, the ``name`` is required and must also be specified as the volume name in the ``ServiceVolumeConfiguration`` or ``TaskVolumeConfiguration`` parameter when creating your service or standalone task.
//	For all other types of volumes, this name is referenced in the ``sourceVolume`` parameter of the ``mountPoints`` object in the container definition.
//	When a volume is using the ``efsVolumeConfiguration``, the name is required.
func (o TaskDefinitionVolumeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionVolume) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type TaskDefinitionVolumeArrayOutput struct{ *pulumi.OutputState }

func (TaskDefinitionVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionVolume)(nil)).Elem()
}

func (o TaskDefinitionVolumeArrayOutput) ToTaskDefinitionVolumeArrayOutput() TaskDefinitionVolumeArrayOutput {
	return o
}

func (o TaskDefinitionVolumeArrayOutput) ToTaskDefinitionVolumeArrayOutputWithContext(ctx context.Context) TaskDefinitionVolumeArrayOutput {
	return o
}

func (o TaskDefinitionVolumeArrayOutput) Index(i pulumi.IntInput) TaskDefinitionVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskDefinitionVolume {
		return vs[0].([]TaskDefinitionVolume)[vs[1].(int)]
	}).(TaskDefinitionVolumeOutput)
}

// Details on a data volume from another container in the same task definition.
type TaskDefinitionVolumeFrom struct {
	// If this value is ``true``, the container has read-only access to the volume. If this value is ``false``, then the container can write to the volume. The default value is ``false``.
	ReadOnly *bool `pulumi:"readOnly"`
	// The name of another container within the same task definition to mount volumes from.
	SourceContainer *string `pulumi:"sourceContainer"`
}

// TaskDefinitionVolumeFromInput is an input type that accepts TaskDefinitionVolumeFromArgs and TaskDefinitionVolumeFromOutput values.
// You can construct a concrete instance of `TaskDefinitionVolumeFromInput` via:
//
//	TaskDefinitionVolumeFromArgs{...}
type TaskDefinitionVolumeFromInput interface {
	pulumi.Input

	ToTaskDefinitionVolumeFromOutput() TaskDefinitionVolumeFromOutput
	ToTaskDefinitionVolumeFromOutputWithContext(context.Context) TaskDefinitionVolumeFromOutput
}

// Details on a data volume from another container in the same task definition.
type TaskDefinitionVolumeFromArgs struct {
	// If this value is ``true``, the container has read-only access to the volume. If this value is ``false``, then the container can write to the volume. The default value is ``false``.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// The name of another container within the same task definition to mount volumes from.
	SourceContainer pulumi.StringPtrInput `pulumi:"sourceContainer"`
}

func (TaskDefinitionVolumeFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionVolumeFrom)(nil)).Elem()
}

func (i TaskDefinitionVolumeFromArgs) ToTaskDefinitionVolumeFromOutput() TaskDefinitionVolumeFromOutput {
	return i.ToTaskDefinitionVolumeFromOutputWithContext(context.Background())
}

func (i TaskDefinitionVolumeFromArgs) ToTaskDefinitionVolumeFromOutputWithContext(ctx context.Context) TaskDefinitionVolumeFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionVolumeFromOutput)
}

// TaskDefinitionVolumeFromArrayInput is an input type that accepts TaskDefinitionVolumeFromArray and TaskDefinitionVolumeFromArrayOutput values.
// You can construct a concrete instance of `TaskDefinitionVolumeFromArrayInput` via:
//
//	TaskDefinitionVolumeFromArray{ TaskDefinitionVolumeFromArgs{...} }
type TaskDefinitionVolumeFromArrayInput interface {
	pulumi.Input

	ToTaskDefinitionVolumeFromArrayOutput() TaskDefinitionVolumeFromArrayOutput
	ToTaskDefinitionVolumeFromArrayOutputWithContext(context.Context) TaskDefinitionVolumeFromArrayOutput
}

type TaskDefinitionVolumeFromArray []TaskDefinitionVolumeFromInput

func (TaskDefinitionVolumeFromArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionVolumeFrom)(nil)).Elem()
}

func (i TaskDefinitionVolumeFromArray) ToTaskDefinitionVolumeFromArrayOutput() TaskDefinitionVolumeFromArrayOutput {
	return i.ToTaskDefinitionVolumeFromArrayOutputWithContext(context.Background())
}

func (i TaskDefinitionVolumeFromArray) ToTaskDefinitionVolumeFromArrayOutputWithContext(ctx context.Context) TaskDefinitionVolumeFromArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionVolumeFromArrayOutput)
}

// Details on a data volume from another container in the same task definition.
type TaskDefinitionVolumeFromOutput struct{ *pulumi.OutputState }

func (TaskDefinitionVolumeFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionVolumeFrom)(nil)).Elem()
}

func (o TaskDefinitionVolumeFromOutput) ToTaskDefinitionVolumeFromOutput() TaskDefinitionVolumeFromOutput {
	return o
}

func (o TaskDefinitionVolumeFromOutput) ToTaskDefinitionVolumeFromOutputWithContext(ctx context.Context) TaskDefinitionVolumeFromOutput {
	return o
}

// If this value is “true“, the container has read-only access to the volume. If this value is “false“, then the container can write to the volume. The default value is “false“.
func (o TaskDefinitionVolumeFromOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TaskDefinitionVolumeFrom) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// The name of another container within the same task definition to mount volumes from.
func (o TaskDefinitionVolumeFromOutput) SourceContainer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionVolumeFrom) *string { return v.SourceContainer }).(pulumi.StringPtrOutput)
}

type TaskDefinitionVolumeFromArrayOutput struct{ *pulumi.OutputState }

func (TaskDefinitionVolumeFromArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionVolumeFrom)(nil)).Elem()
}

func (o TaskDefinitionVolumeFromArrayOutput) ToTaskDefinitionVolumeFromArrayOutput() TaskDefinitionVolumeFromArrayOutput {
	return o
}

func (o TaskDefinitionVolumeFromArrayOutput) ToTaskDefinitionVolumeFromArrayOutputWithContext(ctx context.Context) TaskDefinitionVolumeFromArrayOutput {
	return o
}

func (o TaskDefinitionVolumeFromArrayOutput) Index(i pulumi.IntInput) TaskDefinitionVolumeFromOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskDefinitionVolumeFrom {
		return vs[0].([]TaskDefinitionVolumeFrom)[vs[1].(int)]
	}).(TaskDefinitionVolumeFromOutput)
}

// The VPC subnets and security groups associated with a task. All specified subnets and security groups must be from the same VPC.
type TaskSetAwsVpcConfiguration struct {
	// Whether the task's elastic network interface receives a public IP address. The default value is DISABLED.
	AssignPublicIp *TaskSetAwsVpcConfigurationAssignPublicIp `pulumi:"assignPublicIp"`
	// The security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used. There is a limit of 5 security groups that can be specified per AwsVpcConfiguration.
	SecurityGroups []string `pulumi:"securityGroups"`
	// The subnets associated with the task or service. There is a limit of 16 subnets that can be specified per AwsVpcConfiguration.
	Subnets []string `pulumi:"subnets"`
}

// TaskSetAwsVpcConfigurationInput is an input type that accepts TaskSetAwsVpcConfigurationArgs and TaskSetAwsVpcConfigurationOutput values.
// You can construct a concrete instance of `TaskSetAwsVpcConfigurationInput` via:
//
//	TaskSetAwsVpcConfigurationArgs{...}
type TaskSetAwsVpcConfigurationInput interface {
	pulumi.Input

	ToTaskSetAwsVpcConfigurationOutput() TaskSetAwsVpcConfigurationOutput
	ToTaskSetAwsVpcConfigurationOutputWithContext(context.Context) TaskSetAwsVpcConfigurationOutput
}

// The VPC subnets and security groups associated with a task. All specified subnets and security groups must be from the same VPC.
type TaskSetAwsVpcConfigurationArgs struct {
	// Whether the task's elastic network interface receives a public IP address. The default value is DISABLED.
	AssignPublicIp TaskSetAwsVpcConfigurationAssignPublicIpPtrInput `pulumi:"assignPublicIp"`
	// The security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used. There is a limit of 5 security groups that can be specified per AwsVpcConfiguration.
	SecurityGroups pulumi.StringArrayInput `pulumi:"securityGroups"`
	// The subnets associated with the task or service. There is a limit of 16 subnets that can be specified per AwsVpcConfiguration.
	Subnets pulumi.StringArrayInput `pulumi:"subnets"`
}

func (TaskSetAwsVpcConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSetAwsVpcConfiguration)(nil)).Elem()
}

func (i TaskSetAwsVpcConfigurationArgs) ToTaskSetAwsVpcConfigurationOutput() TaskSetAwsVpcConfigurationOutput {
	return i.ToTaskSetAwsVpcConfigurationOutputWithContext(context.Background())
}

func (i TaskSetAwsVpcConfigurationArgs) ToTaskSetAwsVpcConfigurationOutputWithContext(ctx context.Context) TaskSetAwsVpcConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSetAwsVpcConfigurationOutput)
}

func (i TaskSetAwsVpcConfigurationArgs) ToTaskSetAwsVpcConfigurationPtrOutput() TaskSetAwsVpcConfigurationPtrOutput {
	return i.ToTaskSetAwsVpcConfigurationPtrOutputWithContext(context.Background())
}

func (i TaskSetAwsVpcConfigurationArgs) ToTaskSetAwsVpcConfigurationPtrOutputWithContext(ctx context.Context) TaskSetAwsVpcConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSetAwsVpcConfigurationOutput).ToTaskSetAwsVpcConfigurationPtrOutputWithContext(ctx)
}

// TaskSetAwsVpcConfigurationPtrInput is an input type that accepts TaskSetAwsVpcConfigurationArgs, TaskSetAwsVpcConfigurationPtr and TaskSetAwsVpcConfigurationPtrOutput values.
// You can construct a concrete instance of `TaskSetAwsVpcConfigurationPtrInput` via:
//
//	        TaskSetAwsVpcConfigurationArgs{...}
//
//	or:
//
//	        nil
type TaskSetAwsVpcConfigurationPtrInput interface {
	pulumi.Input

	ToTaskSetAwsVpcConfigurationPtrOutput() TaskSetAwsVpcConfigurationPtrOutput
	ToTaskSetAwsVpcConfigurationPtrOutputWithContext(context.Context) TaskSetAwsVpcConfigurationPtrOutput
}

type taskSetAwsVpcConfigurationPtrType TaskSetAwsVpcConfigurationArgs

func TaskSetAwsVpcConfigurationPtr(v *TaskSetAwsVpcConfigurationArgs) TaskSetAwsVpcConfigurationPtrInput {
	return (*taskSetAwsVpcConfigurationPtrType)(v)
}

func (*taskSetAwsVpcConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskSetAwsVpcConfiguration)(nil)).Elem()
}

func (i *taskSetAwsVpcConfigurationPtrType) ToTaskSetAwsVpcConfigurationPtrOutput() TaskSetAwsVpcConfigurationPtrOutput {
	return i.ToTaskSetAwsVpcConfigurationPtrOutputWithContext(context.Background())
}

func (i *taskSetAwsVpcConfigurationPtrType) ToTaskSetAwsVpcConfigurationPtrOutputWithContext(ctx context.Context) TaskSetAwsVpcConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSetAwsVpcConfigurationPtrOutput)
}

// The VPC subnets and security groups associated with a task. All specified subnets and security groups must be from the same VPC.
type TaskSetAwsVpcConfigurationOutput struct{ *pulumi.OutputState }

func (TaskSetAwsVpcConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSetAwsVpcConfiguration)(nil)).Elem()
}

func (o TaskSetAwsVpcConfigurationOutput) ToTaskSetAwsVpcConfigurationOutput() TaskSetAwsVpcConfigurationOutput {
	return o
}

func (o TaskSetAwsVpcConfigurationOutput) ToTaskSetAwsVpcConfigurationOutputWithContext(ctx context.Context) TaskSetAwsVpcConfigurationOutput {
	return o
}

func (o TaskSetAwsVpcConfigurationOutput) ToTaskSetAwsVpcConfigurationPtrOutput() TaskSetAwsVpcConfigurationPtrOutput {
	return o.ToTaskSetAwsVpcConfigurationPtrOutputWithContext(context.Background())
}

func (o TaskSetAwsVpcConfigurationOutput) ToTaskSetAwsVpcConfigurationPtrOutputWithContext(ctx context.Context) TaskSetAwsVpcConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskSetAwsVpcConfiguration) *TaskSetAwsVpcConfiguration {
		return &v
	}).(TaskSetAwsVpcConfigurationPtrOutput)
}

// Whether the task's elastic network interface receives a public IP address. The default value is DISABLED.
func (o TaskSetAwsVpcConfigurationOutput) AssignPublicIp() TaskSetAwsVpcConfigurationAssignPublicIpPtrOutput {
	return o.ApplyT(func(v TaskSetAwsVpcConfiguration) *TaskSetAwsVpcConfigurationAssignPublicIp { return v.AssignPublicIp }).(TaskSetAwsVpcConfigurationAssignPublicIpPtrOutput)
}

// The security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used. There is a limit of 5 security groups that can be specified per AwsVpcConfiguration.
func (o TaskSetAwsVpcConfigurationOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TaskSetAwsVpcConfiguration) []string { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

// The subnets associated with the task or service. There is a limit of 16 subnets that can be specified per AwsVpcConfiguration.
func (o TaskSetAwsVpcConfigurationOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TaskSetAwsVpcConfiguration) []string { return v.Subnets }).(pulumi.StringArrayOutput)
}

type TaskSetAwsVpcConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TaskSetAwsVpcConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskSetAwsVpcConfiguration)(nil)).Elem()
}

func (o TaskSetAwsVpcConfigurationPtrOutput) ToTaskSetAwsVpcConfigurationPtrOutput() TaskSetAwsVpcConfigurationPtrOutput {
	return o
}

func (o TaskSetAwsVpcConfigurationPtrOutput) ToTaskSetAwsVpcConfigurationPtrOutputWithContext(ctx context.Context) TaskSetAwsVpcConfigurationPtrOutput {
	return o
}

func (o TaskSetAwsVpcConfigurationPtrOutput) Elem() TaskSetAwsVpcConfigurationOutput {
	return o.ApplyT(func(v *TaskSetAwsVpcConfiguration) TaskSetAwsVpcConfiguration {
		if v != nil {
			return *v
		}
		var ret TaskSetAwsVpcConfiguration
		return ret
	}).(TaskSetAwsVpcConfigurationOutput)
}

// Whether the task's elastic network interface receives a public IP address. The default value is DISABLED.
func (o TaskSetAwsVpcConfigurationPtrOutput) AssignPublicIp() TaskSetAwsVpcConfigurationAssignPublicIpPtrOutput {
	return o.ApplyT(func(v *TaskSetAwsVpcConfiguration) *TaskSetAwsVpcConfigurationAssignPublicIp {
		if v == nil {
			return nil
		}
		return v.AssignPublicIp
	}).(TaskSetAwsVpcConfigurationAssignPublicIpPtrOutput)
}

// The security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used. There is a limit of 5 security groups that can be specified per AwsVpcConfiguration.
func (o TaskSetAwsVpcConfigurationPtrOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TaskSetAwsVpcConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.SecurityGroups
	}).(pulumi.StringArrayOutput)
}

// The subnets associated with the task or service. There is a limit of 16 subnets that can be specified per AwsVpcConfiguration.
func (o TaskSetAwsVpcConfigurationPtrOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TaskSetAwsVpcConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.Subnets
	}).(pulumi.StringArrayOutput)
}

type TaskSetCapacityProviderStrategyItem struct {
	// The *base* value designates how many tasks, at a minimum, to run on the specified capacity provider for each service. Only one capacity provider in a capacity provider strategy can have a *base* defined. If no value is specified, the default value of `0` is used.
	//
	// Base value characteristics:
	//
	// - Only one capacity provider in a strategy can have a base defined
	// - Default value is `0` if not specified
	// - Valid range: 0 to 100,000
	// - Base requirements are satisfied first before weight distribution
	Base *int `pulumi:"base"`
	// The short name of the capacity provider.
	CapacityProvider *string `pulumi:"capacityProvider"`
	// The *weight* value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The `weight` value is taken into consideration after the `base` value, if defined, is satisfied.
	//
	// If no `weight` value is specified, the default value of `0` is used. When multiple capacity providers are specified within a capacity provider strategy, at least one of the capacity providers must have a weight value greater than zero and any capacity providers with a weight of `0` can't be used to place tasks. If you specify multiple capacity providers in a strategy that all have a weight of `0` , any `RunTask` or `CreateService` actions using the capacity provider strategy will fail.
	//
	// Weight value characteristics:
	//
	// - Weight is considered after the base value is satisfied
	// - Default value is `0` if not specified
	// - Valid range: 0 to 1,000
	// - At least one capacity provider must have a weight greater than zero
	// - Capacity providers with weight of `0` cannot place tasks
	//
	// Task distribution logic:
	//
	// - Base satisfaction: The minimum number of tasks specified by the base value are placed on that capacity provider
	// - Weight distribution: After base requirements are met, additional tasks are distributed according to weight ratios
	//
	// Examples:
	//
	// Equal Distribution: Two capacity providers both with weight `1` will split tasks evenly after base requirements are met.
	//
	// Weighted Distribution: If capacityProviderA has weight `1` and capacityProviderB has weight `4` , then for every 1 task on A, 4 tasks will run on B.
	Weight *int `pulumi:"weight"`
}

// TaskSetCapacityProviderStrategyItemInput is an input type that accepts TaskSetCapacityProviderStrategyItemArgs and TaskSetCapacityProviderStrategyItemOutput values.
// You can construct a concrete instance of `TaskSetCapacityProviderStrategyItemInput` via:
//
//	TaskSetCapacityProviderStrategyItemArgs{...}
type TaskSetCapacityProviderStrategyItemInput interface {
	pulumi.Input

	ToTaskSetCapacityProviderStrategyItemOutput() TaskSetCapacityProviderStrategyItemOutput
	ToTaskSetCapacityProviderStrategyItemOutputWithContext(context.Context) TaskSetCapacityProviderStrategyItemOutput
}

type TaskSetCapacityProviderStrategyItemArgs struct {
	// The *base* value designates how many tasks, at a minimum, to run on the specified capacity provider for each service. Only one capacity provider in a capacity provider strategy can have a *base* defined. If no value is specified, the default value of `0` is used.
	//
	// Base value characteristics:
	//
	// - Only one capacity provider in a strategy can have a base defined
	// - Default value is `0` if not specified
	// - Valid range: 0 to 100,000
	// - Base requirements are satisfied first before weight distribution
	Base pulumi.IntPtrInput `pulumi:"base"`
	// The short name of the capacity provider.
	CapacityProvider pulumi.StringPtrInput `pulumi:"capacityProvider"`
	// The *weight* value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The `weight` value is taken into consideration after the `base` value, if defined, is satisfied.
	//
	// If no `weight` value is specified, the default value of `0` is used. When multiple capacity providers are specified within a capacity provider strategy, at least one of the capacity providers must have a weight value greater than zero and any capacity providers with a weight of `0` can't be used to place tasks. If you specify multiple capacity providers in a strategy that all have a weight of `0` , any `RunTask` or `CreateService` actions using the capacity provider strategy will fail.
	//
	// Weight value characteristics:
	//
	// - Weight is considered after the base value is satisfied
	// - Default value is `0` if not specified
	// - Valid range: 0 to 1,000
	// - At least one capacity provider must have a weight greater than zero
	// - Capacity providers with weight of `0` cannot place tasks
	//
	// Task distribution logic:
	//
	// - Base satisfaction: The minimum number of tasks specified by the base value are placed on that capacity provider
	// - Weight distribution: After base requirements are met, additional tasks are distributed according to weight ratios
	//
	// Examples:
	//
	// Equal Distribution: Two capacity providers both with weight `1` will split tasks evenly after base requirements are met.
	//
	// Weighted Distribution: If capacityProviderA has weight `1` and capacityProviderB has weight `4` , then for every 1 task on A, 4 tasks will run on B.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (TaskSetCapacityProviderStrategyItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSetCapacityProviderStrategyItem)(nil)).Elem()
}

func (i TaskSetCapacityProviderStrategyItemArgs) ToTaskSetCapacityProviderStrategyItemOutput() TaskSetCapacityProviderStrategyItemOutput {
	return i.ToTaskSetCapacityProviderStrategyItemOutputWithContext(context.Background())
}

func (i TaskSetCapacityProviderStrategyItemArgs) ToTaskSetCapacityProviderStrategyItemOutputWithContext(ctx context.Context) TaskSetCapacityProviderStrategyItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSetCapacityProviderStrategyItemOutput)
}

// TaskSetCapacityProviderStrategyItemArrayInput is an input type that accepts TaskSetCapacityProviderStrategyItemArray and TaskSetCapacityProviderStrategyItemArrayOutput values.
// You can construct a concrete instance of `TaskSetCapacityProviderStrategyItemArrayInput` via:
//
//	TaskSetCapacityProviderStrategyItemArray{ TaskSetCapacityProviderStrategyItemArgs{...} }
type TaskSetCapacityProviderStrategyItemArrayInput interface {
	pulumi.Input

	ToTaskSetCapacityProviderStrategyItemArrayOutput() TaskSetCapacityProviderStrategyItemArrayOutput
	ToTaskSetCapacityProviderStrategyItemArrayOutputWithContext(context.Context) TaskSetCapacityProviderStrategyItemArrayOutput
}

type TaskSetCapacityProviderStrategyItemArray []TaskSetCapacityProviderStrategyItemInput

func (TaskSetCapacityProviderStrategyItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskSetCapacityProviderStrategyItem)(nil)).Elem()
}

func (i TaskSetCapacityProviderStrategyItemArray) ToTaskSetCapacityProviderStrategyItemArrayOutput() TaskSetCapacityProviderStrategyItemArrayOutput {
	return i.ToTaskSetCapacityProviderStrategyItemArrayOutputWithContext(context.Background())
}

func (i TaskSetCapacityProviderStrategyItemArray) ToTaskSetCapacityProviderStrategyItemArrayOutputWithContext(ctx context.Context) TaskSetCapacityProviderStrategyItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSetCapacityProviderStrategyItemArrayOutput)
}

type TaskSetCapacityProviderStrategyItemOutput struct{ *pulumi.OutputState }

func (TaskSetCapacityProviderStrategyItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSetCapacityProviderStrategyItem)(nil)).Elem()
}

func (o TaskSetCapacityProviderStrategyItemOutput) ToTaskSetCapacityProviderStrategyItemOutput() TaskSetCapacityProviderStrategyItemOutput {
	return o
}

func (o TaskSetCapacityProviderStrategyItemOutput) ToTaskSetCapacityProviderStrategyItemOutputWithContext(ctx context.Context) TaskSetCapacityProviderStrategyItemOutput {
	return o
}

// The *base* value designates how many tasks, at a minimum, to run on the specified capacity provider for each service. Only one capacity provider in a capacity provider strategy can have a *base* defined. If no value is specified, the default value of `0` is used.
//
// Base value characteristics:
//
// - Only one capacity provider in a strategy can have a base defined
// - Default value is `0` if not specified
// - Valid range: 0 to 100,000
// - Base requirements are satisfied first before weight distribution
func (o TaskSetCapacityProviderStrategyItemOutput) Base() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskSetCapacityProviderStrategyItem) *int { return v.Base }).(pulumi.IntPtrOutput)
}

// The short name of the capacity provider.
func (o TaskSetCapacityProviderStrategyItemOutput) CapacityProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskSetCapacityProviderStrategyItem) *string { return v.CapacityProvider }).(pulumi.StringPtrOutput)
}

// The *weight* value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The `weight` value is taken into consideration after the `base` value, if defined, is satisfied.
//
// If no `weight` value is specified, the default value of `0` is used. When multiple capacity providers are specified within a capacity provider strategy, at least one of the capacity providers must have a weight value greater than zero and any capacity providers with a weight of `0` can't be used to place tasks. If you specify multiple capacity providers in a strategy that all have a weight of `0` , any `RunTask` or `CreateService` actions using the capacity provider strategy will fail.
//
// Weight value characteristics:
//
// - Weight is considered after the base value is satisfied
// - Default value is `0` if not specified
// - Valid range: 0 to 1,000
// - At least one capacity provider must have a weight greater than zero
// - Capacity providers with weight of `0` cannot place tasks
//
// Task distribution logic:
//
// - Base satisfaction: The minimum number of tasks specified by the base value are placed on that capacity provider
// - Weight distribution: After base requirements are met, additional tasks are distributed according to weight ratios
//
// Examples:
//
// Equal Distribution: Two capacity providers both with weight `1` will split tasks evenly after base requirements are met.
//
// Weighted Distribution: If capacityProviderA has weight `1` and capacityProviderB has weight `4` , then for every 1 task on A, 4 tasks will run on B.
func (o TaskSetCapacityProviderStrategyItemOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskSetCapacityProviderStrategyItem) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type TaskSetCapacityProviderStrategyItemArrayOutput struct{ *pulumi.OutputState }

func (TaskSetCapacityProviderStrategyItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskSetCapacityProviderStrategyItem)(nil)).Elem()
}

func (o TaskSetCapacityProviderStrategyItemArrayOutput) ToTaskSetCapacityProviderStrategyItemArrayOutput() TaskSetCapacityProviderStrategyItemArrayOutput {
	return o
}

func (o TaskSetCapacityProviderStrategyItemArrayOutput) ToTaskSetCapacityProviderStrategyItemArrayOutputWithContext(ctx context.Context) TaskSetCapacityProviderStrategyItemArrayOutput {
	return o
}

func (o TaskSetCapacityProviderStrategyItemArrayOutput) Index(i pulumi.IntInput) TaskSetCapacityProviderStrategyItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskSetCapacityProviderStrategyItem {
		return vs[0].([]TaskSetCapacityProviderStrategyItem)[vs[1].(int)]
	}).(TaskSetCapacityProviderStrategyItemOutput)
}

// A load balancer object representing the load balancer to use with the task set. The supported load balancer types are either an Application Load Balancer or a Network Load Balancer.
type TaskSetLoadBalancer struct {
	// The name of the container (as it appears in a container definition) to associate with the load balancer.
	ContainerName *string `pulumi:"containerName"`
	// The port on the container to associate with the load balancer. This port must correspond to a containerPort in the task definition the tasks in the service are using. For tasks that use the EC2 launch type, the container instance they are launched on must allow ingress traffic on the hostPort of the port mapping.
	ContainerPort *int `pulumi:"containerPort"`
	// The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or groups associated with a service or task set. A target group ARN is only specified when using an Application Load Balancer or Network Load Balancer. If you are using a Classic Load Balancer this should be omitted. For services using the ECS deployment controller, you can specify one or multiple target groups. For more information, see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html in the Amazon Elastic Container Service Developer Guide. For services using the CODE_DEPLOY deployment controller, you are required to define two target groups for the load balancer. For more information, see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html in the Amazon Elastic Container Service Developer Guide. If your service's task definition uses the awsvpc network mode (which is required for the Fargate launch type), you must choose ip as the target type, not instance, when creating your target groups because tasks that use the awsvpc network mode are associated with an elastic network interface, not an Amazon EC2 instance.
	TargetGroupArn *string `pulumi:"targetGroupArn"`
}

// TaskSetLoadBalancerInput is an input type that accepts TaskSetLoadBalancerArgs and TaskSetLoadBalancerOutput values.
// You can construct a concrete instance of `TaskSetLoadBalancerInput` via:
//
//	TaskSetLoadBalancerArgs{...}
type TaskSetLoadBalancerInput interface {
	pulumi.Input

	ToTaskSetLoadBalancerOutput() TaskSetLoadBalancerOutput
	ToTaskSetLoadBalancerOutputWithContext(context.Context) TaskSetLoadBalancerOutput
}

// A load balancer object representing the load balancer to use with the task set. The supported load balancer types are either an Application Load Balancer or a Network Load Balancer.
type TaskSetLoadBalancerArgs struct {
	// The name of the container (as it appears in a container definition) to associate with the load balancer.
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// The port on the container to associate with the load balancer. This port must correspond to a containerPort in the task definition the tasks in the service are using. For tasks that use the EC2 launch type, the container instance they are launched on must allow ingress traffic on the hostPort of the port mapping.
	ContainerPort pulumi.IntPtrInput `pulumi:"containerPort"`
	// The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or groups associated with a service or task set. A target group ARN is only specified when using an Application Load Balancer or Network Load Balancer. If you are using a Classic Load Balancer this should be omitted. For services using the ECS deployment controller, you can specify one or multiple target groups. For more information, see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html in the Amazon Elastic Container Service Developer Guide. For services using the CODE_DEPLOY deployment controller, you are required to define two target groups for the load balancer. For more information, see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html in the Amazon Elastic Container Service Developer Guide. If your service's task definition uses the awsvpc network mode (which is required for the Fargate launch type), you must choose ip as the target type, not instance, when creating your target groups because tasks that use the awsvpc network mode are associated with an elastic network interface, not an Amazon EC2 instance.
	TargetGroupArn pulumi.StringPtrInput `pulumi:"targetGroupArn"`
}

func (TaskSetLoadBalancerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSetLoadBalancer)(nil)).Elem()
}

func (i TaskSetLoadBalancerArgs) ToTaskSetLoadBalancerOutput() TaskSetLoadBalancerOutput {
	return i.ToTaskSetLoadBalancerOutputWithContext(context.Background())
}

func (i TaskSetLoadBalancerArgs) ToTaskSetLoadBalancerOutputWithContext(ctx context.Context) TaskSetLoadBalancerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSetLoadBalancerOutput)
}

// TaskSetLoadBalancerArrayInput is an input type that accepts TaskSetLoadBalancerArray and TaskSetLoadBalancerArrayOutput values.
// You can construct a concrete instance of `TaskSetLoadBalancerArrayInput` via:
//
//	TaskSetLoadBalancerArray{ TaskSetLoadBalancerArgs{...} }
type TaskSetLoadBalancerArrayInput interface {
	pulumi.Input

	ToTaskSetLoadBalancerArrayOutput() TaskSetLoadBalancerArrayOutput
	ToTaskSetLoadBalancerArrayOutputWithContext(context.Context) TaskSetLoadBalancerArrayOutput
}

type TaskSetLoadBalancerArray []TaskSetLoadBalancerInput

func (TaskSetLoadBalancerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskSetLoadBalancer)(nil)).Elem()
}

func (i TaskSetLoadBalancerArray) ToTaskSetLoadBalancerArrayOutput() TaskSetLoadBalancerArrayOutput {
	return i.ToTaskSetLoadBalancerArrayOutputWithContext(context.Background())
}

func (i TaskSetLoadBalancerArray) ToTaskSetLoadBalancerArrayOutputWithContext(ctx context.Context) TaskSetLoadBalancerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSetLoadBalancerArrayOutput)
}

// A load balancer object representing the load balancer to use with the task set. The supported load balancer types are either an Application Load Balancer or a Network Load Balancer.
type TaskSetLoadBalancerOutput struct{ *pulumi.OutputState }

func (TaskSetLoadBalancerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSetLoadBalancer)(nil)).Elem()
}

func (o TaskSetLoadBalancerOutput) ToTaskSetLoadBalancerOutput() TaskSetLoadBalancerOutput {
	return o
}

func (o TaskSetLoadBalancerOutput) ToTaskSetLoadBalancerOutputWithContext(ctx context.Context) TaskSetLoadBalancerOutput {
	return o
}

// The name of the container (as it appears in a container definition) to associate with the load balancer.
func (o TaskSetLoadBalancerOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskSetLoadBalancer) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// The port on the container to associate with the load balancer. This port must correspond to a containerPort in the task definition the tasks in the service are using. For tasks that use the EC2 launch type, the container instance they are launched on must allow ingress traffic on the hostPort of the port mapping.
func (o TaskSetLoadBalancerOutput) ContainerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskSetLoadBalancer) *int { return v.ContainerPort }).(pulumi.IntPtrOutput)
}

// The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or groups associated with a service or task set. A target group ARN is only specified when using an Application Load Balancer or Network Load Balancer. If you are using a Classic Load Balancer this should be omitted. For services using the ECS deployment controller, you can specify one or multiple target groups. For more information, see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html in the Amazon Elastic Container Service Developer Guide. For services using the CODE_DEPLOY deployment controller, you are required to define two target groups for the load balancer. For more information, see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html in the Amazon Elastic Container Service Developer Guide. If your service's task definition uses the awsvpc network mode (which is required for the Fargate launch type), you must choose ip as the target type, not instance, when creating your target groups because tasks that use the awsvpc network mode are associated with an elastic network interface, not an Amazon EC2 instance.
func (o TaskSetLoadBalancerOutput) TargetGroupArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskSetLoadBalancer) *string { return v.TargetGroupArn }).(pulumi.StringPtrOutput)
}

type TaskSetLoadBalancerArrayOutput struct{ *pulumi.OutputState }

func (TaskSetLoadBalancerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskSetLoadBalancer)(nil)).Elem()
}

func (o TaskSetLoadBalancerArrayOutput) ToTaskSetLoadBalancerArrayOutput() TaskSetLoadBalancerArrayOutput {
	return o
}

func (o TaskSetLoadBalancerArrayOutput) ToTaskSetLoadBalancerArrayOutputWithContext(ctx context.Context) TaskSetLoadBalancerArrayOutput {
	return o
}

func (o TaskSetLoadBalancerArrayOutput) Index(i pulumi.IntInput) TaskSetLoadBalancerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskSetLoadBalancer {
		return vs[0].([]TaskSetLoadBalancer)[vs[1].(int)]
	}).(TaskSetLoadBalancerOutput)
}

// An object representing the network configuration for a task or service.
type TaskSetNetworkConfiguration struct {
	// The VPC subnets and security groups that are associated with a task.
	//
	// > All specified subnets and security groups must be from the same VPC.
	AwsVpcConfiguration *TaskSetAwsVpcConfiguration `pulumi:"awsVpcConfiguration"`
}

// TaskSetNetworkConfigurationInput is an input type that accepts TaskSetNetworkConfigurationArgs and TaskSetNetworkConfigurationOutput values.
// You can construct a concrete instance of `TaskSetNetworkConfigurationInput` via:
//
//	TaskSetNetworkConfigurationArgs{...}
type TaskSetNetworkConfigurationInput interface {
	pulumi.Input

	ToTaskSetNetworkConfigurationOutput() TaskSetNetworkConfigurationOutput
	ToTaskSetNetworkConfigurationOutputWithContext(context.Context) TaskSetNetworkConfigurationOutput
}

// An object representing the network configuration for a task or service.
type TaskSetNetworkConfigurationArgs struct {
	// The VPC subnets and security groups that are associated with a task.
	//
	// > All specified subnets and security groups must be from the same VPC.
	AwsVpcConfiguration TaskSetAwsVpcConfigurationPtrInput `pulumi:"awsVpcConfiguration"`
}

func (TaskSetNetworkConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSetNetworkConfiguration)(nil)).Elem()
}

func (i TaskSetNetworkConfigurationArgs) ToTaskSetNetworkConfigurationOutput() TaskSetNetworkConfigurationOutput {
	return i.ToTaskSetNetworkConfigurationOutputWithContext(context.Background())
}

func (i TaskSetNetworkConfigurationArgs) ToTaskSetNetworkConfigurationOutputWithContext(ctx context.Context) TaskSetNetworkConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSetNetworkConfigurationOutput)
}

func (i TaskSetNetworkConfigurationArgs) ToTaskSetNetworkConfigurationPtrOutput() TaskSetNetworkConfigurationPtrOutput {
	return i.ToTaskSetNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (i TaskSetNetworkConfigurationArgs) ToTaskSetNetworkConfigurationPtrOutputWithContext(ctx context.Context) TaskSetNetworkConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSetNetworkConfigurationOutput).ToTaskSetNetworkConfigurationPtrOutputWithContext(ctx)
}

// TaskSetNetworkConfigurationPtrInput is an input type that accepts TaskSetNetworkConfigurationArgs, TaskSetNetworkConfigurationPtr and TaskSetNetworkConfigurationPtrOutput values.
// You can construct a concrete instance of `TaskSetNetworkConfigurationPtrInput` via:
//
//	        TaskSetNetworkConfigurationArgs{...}
//
//	or:
//
//	        nil
type TaskSetNetworkConfigurationPtrInput interface {
	pulumi.Input

	ToTaskSetNetworkConfigurationPtrOutput() TaskSetNetworkConfigurationPtrOutput
	ToTaskSetNetworkConfigurationPtrOutputWithContext(context.Context) TaskSetNetworkConfigurationPtrOutput
}

type taskSetNetworkConfigurationPtrType TaskSetNetworkConfigurationArgs

func TaskSetNetworkConfigurationPtr(v *TaskSetNetworkConfigurationArgs) TaskSetNetworkConfigurationPtrInput {
	return (*taskSetNetworkConfigurationPtrType)(v)
}

func (*taskSetNetworkConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskSetNetworkConfiguration)(nil)).Elem()
}

func (i *taskSetNetworkConfigurationPtrType) ToTaskSetNetworkConfigurationPtrOutput() TaskSetNetworkConfigurationPtrOutput {
	return i.ToTaskSetNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (i *taskSetNetworkConfigurationPtrType) ToTaskSetNetworkConfigurationPtrOutputWithContext(ctx context.Context) TaskSetNetworkConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSetNetworkConfigurationPtrOutput)
}

// An object representing the network configuration for a task or service.
type TaskSetNetworkConfigurationOutput struct{ *pulumi.OutputState }

func (TaskSetNetworkConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSetNetworkConfiguration)(nil)).Elem()
}

func (o TaskSetNetworkConfigurationOutput) ToTaskSetNetworkConfigurationOutput() TaskSetNetworkConfigurationOutput {
	return o
}

func (o TaskSetNetworkConfigurationOutput) ToTaskSetNetworkConfigurationOutputWithContext(ctx context.Context) TaskSetNetworkConfigurationOutput {
	return o
}

func (o TaskSetNetworkConfigurationOutput) ToTaskSetNetworkConfigurationPtrOutput() TaskSetNetworkConfigurationPtrOutput {
	return o.ToTaskSetNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (o TaskSetNetworkConfigurationOutput) ToTaskSetNetworkConfigurationPtrOutputWithContext(ctx context.Context) TaskSetNetworkConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskSetNetworkConfiguration) *TaskSetNetworkConfiguration {
		return &v
	}).(TaskSetNetworkConfigurationPtrOutput)
}

// The VPC subnets and security groups that are associated with a task.
//
// > All specified subnets and security groups must be from the same VPC.
func (o TaskSetNetworkConfigurationOutput) AwsVpcConfiguration() TaskSetAwsVpcConfigurationPtrOutput {
	return o.ApplyT(func(v TaskSetNetworkConfiguration) *TaskSetAwsVpcConfiguration { return v.AwsVpcConfiguration }).(TaskSetAwsVpcConfigurationPtrOutput)
}

type TaskSetNetworkConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TaskSetNetworkConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskSetNetworkConfiguration)(nil)).Elem()
}

func (o TaskSetNetworkConfigurationPtrOutput) ToTaskSetNetworkConfigurationPtrOutput() TaskSetNetworkConfigurationPtrOutput {
	return o
}

func (o TaskSetNetworkConfigurationPtrOutput) ToTaskSetNetworkConfigurationPtrOutputWithContext(ctx context.Context) TaskSetNetworkConfigurationPtrOutput {
	return o
}

func (o TaskSetNetworkConfigurationPtrOutput) Elem() TaskSetNetworkConfigurationOutput {
	return o.ApplyT(func(v *TaskSetNetworkConfiguration) TaskSetNetworkConfiguration {
		if v != nil {
			return *v
		}
		var ret TaskSetNetworkConfiguration
		return ret
	}).(TaskSetNetworkConfigurationOutput)
}

// The VPC subnets and security groups that are associated with a task.
//
// > All specified subnets and security groups must be from the same VPC.
func (o TaskSetNetworkConfigurationPtrOutput) AwsVpcConfiguration() TaskSetAwsVpcConfigurationPtrOutput {
	return o.ApplyT(func(v *TaskSetNetworkConfiguration) *TaskSetAwsVpcConfiguration {
		if v == nil {
			return nil
		}
		return v.AwsVpcConfiguration
	}).(TaskSetAwsVpcConfigurationPtrOutput)
}

type TaskSetScale struct {
	// The unit of measure for the scale value.
	Unit *TaskSetScaleUnit `pulumi:"unit"`
	// The value, specified as a percent total of a service's desiredCount, to scale the task set. Accepted values are numbers between 0 and 100.
	Value *float64 `pulumi:"value"`
}

// TaskSetScaleInput is an input type that accepts TaskSetScaleArgs and TaskSetScaleOutput values.
// You can construct a concrete instance of `TaskSetScaleInput` via:
//
//	TaskSetScaleArgs{...}
type TaskSetScaleInput interface {
	pulumi.Input

	ToTaskSetScaleOutput() TaskSetScaleOutput
	ToTaskSetScaleOutputWithContext(context.Context) TaskSetScaleOutput
}

type TaskSetScaleArgs struct {
	// The unit of measure for the scale value.
	Unit TaskSetScaleUnitPtrInput `pulumi:"unit"`
	// The value, specified as a percent total of a service's desiredCount, to scale the task set. Accepted values are numbers between 0 and 100.
	Value pulumi.Float64PtrInput `pulumi:"value"`
}

func (TaskSetScaleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSetScale)(nil)).Elem()
}

func (i TaskSetScaleArgs) ToTaskSetScaleOutput() TaskSetScaleOutput {
	return i.ToTaskSetScaleOutputWithContext(context.Background())
}

func (i TaskSetScaleArgs) ToTaskSetScaleOutputWithContext(ctx context.Context) TaskSetScaleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSetScaleOutput)
}

func (i TaskSetScaleArgs) ToTaskSetScalePtrOutput() TaskSetScalePtrOutput {
	return i.ToTaskSetScalePtrOutputWithContext(context.Background())
}

func (i TaskSetScaleArgs) ToTaskSetScalePtrOutputWithContext(ctx context.Context) TaskSetScalePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSetScaleOutput).ToTaskSetScalePtrOutputWithContext(ctx)
}

// TaskSetScalePtrInput is an input type that accepts TaskSetScaleArgs, TaskSetScalePtr and TaskSetScalePtrOutput values.
// You can construct a concrete instance of `TaskSetScalePtrInput` via:
//
//	        TaskSetScaleArgs{...}
//
//	or:
//
//	        nil
type TaskSetScalePtrInput interface {
	pulumi.Input

	ToTaskSetScalePtrOutput() TaskSetScalePtrOutput
	ToTaskSetScalePtrOutputWithContext(context.Context) TaskSetScalePtrOutput
}

type taskSetScalePtrType TaskSetScaleArgs

func TaskSetScalePtr(v *TaskSetScaleArgs) TaskSetScalePtrInput {
	return (*taskSetScalePtrType)(v)
}

func (*taskSetScalePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskSetScale)(nil)).Elem()
}

func (i *taskSetScalePtrType) ToTaskSetScalePtrOutput() TaskSetScalePtrOutput {
	return i.ToTaskSetScalePtrOutputWithContext(context.Background())
}

func (i *taskSetScalePtrType) ToTaskSetScalePtrOutputWithContext(ctx context.Context) TaskSetScalePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSetScalePtrOutput)
}

type TaskSetScaleOutput struct{ *pulumi.OutputState }

func (TaskSetScaleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSetScale)(nil)).Elem()
}

func (o TaskSetScaleOutput) ToTaskSetScaleOutput() TaskSetScaleOutput {
	return o
}

func (o TaskSetScaleOutput) ToTaskSetScaleOutputWithContext(ctx context.Context) TaskSetScaleOutput {
	return o
}

func (o TaskSetScaleOutput) ToTaskSetScalePtrOutput() TaskSetScalePtrOutput {
	return o.ToTaskSetScalePtrOutputWithContext(context.Background())
}

func (o TaskSetScaleOutput) ToTaskSetScalePtrOutputWithContext(ctx context.Context) TaskSetScalePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskSetScale) *TaskSetScale {
		return &v
	}).(TaskSetScalePtrOutput)
}

// The unit of measure for the scale value.
func (o TaskSetScaleOutput) Unit() TaskSetScaleUnitPtrOutput {
	return o.ApplyT(func(v TaskSetScale) *TaskSetScaleUnit { return v.Unit }).(TaskSetScaleUnitPtrOutput)
}

// The value, specified as a percent total of a service's desiredCount, to scale the task set. Accepted values are numbers between 0 and 100.
func (o TaskSetScaleOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TaskSetScale) *float64 { return v.Value }).(pulumi.Float64PtrOutput)
}

type TaskSetScalePtrOutput struct{ *pulumi.OutputState }

func (TaskSetScalePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskSetScale)(nil)).Elem()
}

func (o TaskSetScalePtrOutput) ToTaskSetScalePtrOutput() TaskSetScalePtrOutput {
	return o
}

func (o TaskSetScalePtrOutput) ToTaskSetScalePtrOutputWithContext(ctx context.Context) TaskSetScalePtrOutput {
	return o
}

func (o TaskSetScalePtrOutput) Elem() TaskSetScaleOutput {
	return o.ApplyT(func(v *TaskSetScale) TaskSetScale {
		if v != nil {
			return *v
		}
		var ret TaskSetScale
		return ret
	}).(TaskSetScaleOutput)
}

// The unit of measure for the scale value.
func (o TaskSetScalePtrOutput) Unit() TaskSetScaleUnitPtrOutput {
	return o.ApplyT(func(v *TaskSetScale) *TaskSetScaleUnit {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(TaskSetScaleUnitPtrOutput)
}

// The value, specified as a percent total of a service's desiredCount, to scale the task set. Accepted values are numbers between 0 and 100.
func (o TaskSetScalePtrOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TaskSetScale) *float64 {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.Float64PtrOutput)
}

type TaskSetServiceRegistry struct {
	// The container name value, already specified in the task definition, to be used for your service discovery service. If the task definition that your service task specifies uses the bridge or host network mode, you must specify a containerName and containerPort combination from the task definition. If the task definition that your service task specifies uses the awsvpc network mode and a type SRV DNS record is used, you must specify either a containerName and containerPort combination or a port value, but not both.
	ContainerName *string `pulumi:"containerName"`
	// The port value, already specified in the task definition, to be used for your service discovery service. If the task definition your service task specifies uses the bridge or host network mode, you must specify a containerName and containerPort combination from the task definition. If the task definition your service task specifies uses the awsvpc network mode and a type SRV DNS record is used, you must specify either a containerName and containerPort combination or a port value, but not both.
	ContainerPort *int `pulumi:"containerPort"`
	// The port value used if your service discovery service specified an SRV record. This field may be used if both the awsvpc network mode and SRV records are used.
	Port *int `pulumi:"port"`
	// The Amazon Resource Name (ARN) of the service registry. The currently supported service registry is AWS Cloud Map. For more information, see https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html
	RegistryArn *string `pulumi:"registryArn"`
}

// TaskSetServiceRegistryInput is an input type that accepts TaskSetServiceRegistryArgs and TaskSetServiceRegistryOutput values.
// You can construct a concrete instance of `TaskSetServiceRegistryInput` via:
//
//	TaskSetServiceRegistryArgs{...}
type TaskSetServiceRegistryInput interface {
	pulumi.Input

	ToTaskSetServiceRegistryOutput() TaskSetServiceRegistryOutput
	ToTaskSetServiceRegistryOutputWithContext(context.Context) TaskSetServiceRegistryOutput
}

type TaskSetServiceRegistryArgs struct {
	// The container name value, already specified in the task definition, to be used for your service discovery service. If the task definition that your service task specifies uses the bridge or host network mode, you must specify a containerName and containerPort combination from the task definition. If the task definition that your service task specifies uses the awsvpc network mode and a type SRV DNS record is used, you must specify either a containerName and containerPort combination or a port value, but not both.
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// The port value, already specified in the task definition, to be used for your service discovery service. If the task definition your service task specifies uses the bridge or host network mode, you must specify a containerName and containerPort combination from the task definition. If the task definition your service task specifies uses the awsvpc network mode and a type SRV DNS record is used, you must specify either a containerName and containerPort combination or a port value, but not both.
	ContainerPort pulumi.IntPtrInput `pulumi:"containerPort"`
	// The port value used if your service discovery service specified an SRV record. This field may be used if both the awsvpc network mode and SRV records are used.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The Amazon Resource Name (ARN) of the service registry. The currently supported service registry is AWS Cloud Map. For more information, see https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html
	RegistryArn pulumi.StringPtrInput `pulumi:"registryArn"`
}

func (TaskSetServiceRegistryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSetServiceRegistry)(nil)).Elem()
}

func (i TaskSetServiceRegistryArgs) ToTaskSetServiceRegistryOutput() TaskSetServiceRegistryOutput {
	return i.ToTaskSetServiceRegistryOutputWithContext(context.Background())
}

func (i TaskSetServiceRegistryArgs) ToTaskSetServiceRegistryOutputWithContext(ctx context.Context) TaskSetServiceRegistryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSetServiceRegistryOutput)
}

// TaskSetServiceRegistryArrayInput is an input type that accepts TaskSetServiceRegistryArray and TaskSetServiceRegistryArrayOutput values.
// You can construct a concrete instance of `TaskSetServiceRegistryArrayInput` via:
//
//	TaskSetServiceRegistryArray{ TaskSetServiceRegistryArgs{...} }
type TaskSetServiceRegistryArrayInput interface {
	pulumi.Input

	ToTaskSetServiceRegistryArrayOutput() TaskSetServiceRegistryArrayOutput
	ToTaskSetServiceRegistryArrayOutputWithContext(context.Context) TaskSetServiceRegistryArrayOutput
}

type TaskSetServiceRegistryArray []TaskSetServiceRegistryInput

func (TaskSetServiceRegistryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskSetServiceRegistry)(nil)).Elem()
}

func (i TaskSetServiceRegistryArray) ToTaskSetServiceRegistryArrayOutput() TaskSetServiceRegistryArrayOutput {
	return i.ToTaskSetServiceRegistryArrayOutputWithContext(context.Background())
}

func (i TaskSetServiceRegistryArray) ToTaskSetServiceRegistryArrayOutputWithContext(ctx context.Context) TaskSetServiceRegistryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSetServiceRegistryArrayOutput)
}

type TaskSetServiceRegistryOutput struct{ *pulumi.OutputState }

func (TaskSetServiceRegistryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSetServiceRegistry)(nil)).Elem()
}

func (o TaskSetServiceRegistryOutput) ToTaskSetServiceRegistryOutput() TaskSetServiceRegistryOutput {
	return o
}

func (o TaskSetServiceRegistryOutput) ToTaskSetServiceRegistryOutputWithContext(ctx context.Context) TaskSetServiceRegistryOutput {
	return o
}

// The container name value, already specified in the task definition, to be used for your service discovery service. If the task definition that your service task specifies uses the bridge or host network mode, you must specify a containerName and containerPort combination from the task definition. If the task definition that your service task specifies uses the awsvpc network mode and a type SRV DNS record is used, you must specify either a containerName and containerPort combination or a port value, but not both.
func (o TaskSetServiceRegistryOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskSetServiceRegistry) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// The port value, already specified in the task definition, to be used for your service discovery service. If the task definition your service task specifies uses the bridge or host network mode, you must specify a containerName and containerPort combination from the task definition. If the task definition your service task specifies uses the awsvpc network mode and a type SRV DNS record is used, you must specify either a containerName and containerPort combination or a port value, but not both.
func (o TaskSetServiceRegistryOutput) ContainerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskSetServiceRegistry) *int { return v.ContainerPort }).(pulumi.IntPtrOutput)
}

// The port value used if your service discovery service specified an SRV record. This field may be used if both the awsvpc network mode and SRV records are used.
func (o TaskSetServiceRegistryOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskSetServiceRegistry) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The Amazon Resource Name (ARN) of the service registry. The currently supported service registry is AWS Cloud Map. For more information, see https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html
func (o TaskSetServiceRegistryOutput) RegistryArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskSetServiceRegistry) *string { return v.RegistryArn }).(pulumi.StringPtrOutput)
}

type TaskSetServiceRegistryArrayOutput struct{ *pulumi.OutputState }

func (TaskSetServiceRegistryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskSetServiceRegistry)(nil)).Elem()
}

func (o TaskSetServiceRegistryArrayOutput) ToTaskSetServiceRegistryArrayOutput() TaskSetServiceRegistryArrayOutput {
	return o
}

func (o TaskSetServiceRegistryArrayOutput) ToTaskSetServiceRegistryArrayOutputWithContext(ctx context.Context) TaskSetServiceRegistryArrayOutput {
	return o
}

func (o TaskSetServiceRegistryArrayOutput) Index(i pulumi.IntInput) TaskSetServiceRegistryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskSetServiceRegistry {
		return vs[0].([]TaskSetServiceRegistry)[vs[1].(int)]
	}).(TaskSetServiceRegistryOutput)
}

type TaskSetTag struct {
	// One part of a key-value pair that make up a tag. A `key` is a general label that acts like a category for more specific tag values.
	Key *string `pulumi:"key"`
	// The optional part of a key-value pair that make up a tag. A `value` acts as a descriptor within a tag category (key).
	Value *string `pulumi:"value"`
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CapacityProviderAcceleratorCountRequestInput)(nil)).Elem(), CapacityProviderAcceleratorCountRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapacityProviderAcceleratorCountRequestPtrInput)(nil)).Elem(), CapacityProviderAcceleratorCountRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapacityProviderAcceleratorTotalMemoryMiBRequestInput)(nil)).Elem(), CapacityProviderAcceleratorTotalMemoryMiBRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapacityProviderAcceleratorTotalMemoryMiBRequestPtrInput)(nil)).Elem(), CapacityProviderAcceleratorTotalMemoryMiBRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapacityProviderAutoScalingGroupProviderInput)(nil)).Elem(), CapacityProviderAutoScalingGroupProviderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapacityProviderAutoScalingGroupProviderPtrInput)(nil)).Elem(), CapacityProviderAutoScalingGroupProviderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapacityProviderBaselineEbsBandwidthMbpsRequestInput)(nil)).Elem(), CapacityProviderBaselineEbsBandwidthMbpsRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapacityProviderBaselineEbsBandwidthMbpsRequestPtrInput)(nil)).Elem(), CapacityProviderBaselineEbsBandwidthMbpsRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapacityProviderInstanceLaunchTemplateInput)(nil)).Elem(), CapacityProviderInstanceLaunchTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapacityProviderInstanceLaunchTemplatePtrInput)(nil)).Elem(), CapacityProviderInstanceLaunchTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapacityProviderInstanceRequirementsRequestInput)(nil)).Elem(), CapacityProviderInstanceRequirementsRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapacityProviderInstanceRequirementsRequestPtrInput)(nil)).Elem(), CapacityProviderInstanceRequirementsRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapacityProviderManagedInstancesNetworkConfigurationInput)(nil)).Elem(), CapacityProviderManagedInstancesNetworkConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapacityProviderManagedInstancesNetworkConfigurationPtrInput)(nil)).Elem(), CapacityProviderManagedInstancesNetworkConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapacityProviderManagedInstancesProviderInput)(nil)).Elem(), CapacityProviderManagedInstancesProviderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapacityProviderManagedInstancesProviderPtrInput)(nil)).Elem(), CapacityProviderManagedInstancesProviderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapacityProviderManagedInstancesStorageConfigurationInput)(nil)).Elem(), CapacityProviderManagedInstancesStorageConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapacityProviderManagedInstancesStorageConfigurationPtrInput)(nil)).Elem(), CapacityProviderManagedInstancesStorageConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapacityProviderManagedScalingInput)(nil)).Elem(), CapacityProviderManagedScalingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapacityProviderManagedScalingPtrInput)(nil)).Elem(), CapacityProviderManagedScalingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapacityProviderMemoryGiBPerVCpuRequestInput)(nil)).Elem(), CapacityProviderMemoryGiBPerVCpuRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapacityProviderMemoryGiBPerVCpuRequestPtrInput)(nil)).Elem(), CapacityProviderMemoryGiBPerVCpuRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapacityProviderMemoryMiBRequestInput)(nil)).Elem(), CapacityProviderMemoryMiBRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapacityProviderMemoryMiBRequestPtrInput)(nil)).Elem(), CapacityProviderMemoryMiBRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapacityProviderNetworkBandwidthGbpsRequestInput)(nil)).Elem(), CapacityProviderNetworkBandwidthGbpsRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapacityProviderNetworkBandwidthGbpsRequestPtrInput)(nil)).Elem(), CapacityProviderNetworkBandwidthGbpsRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapacityProviderNetworkInterfaceCountRequestInput)(nil)).Elem(), CapacityProviderNetworkInterfaceCountRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapacityProviderNetworkInterfaceCountRequestPtrInput)(nil)).Elem(), CapacityProviderNetworkInterfaceCountRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapacityProviderTotalLocalStorageGbRequestInput)(nil)).Elem(), CapacityProviderTotalLocalStorageGbRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapacityProviderTotalLocalStorageGbRequestPtrInput)(nil)).Elem(), CapacityProviderTotalLocalStorageGbRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapacityProviderVCpuCountRangeRequestInput)(nil)).Elem(), CapacityProviderVCpuCountRangeRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapacityProviderVCpuCountRangeRequestPtrInput)(nil)).Elem(), CapacityProviderVCpuCountRangeRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCapacityProviderAssociationsCapacityProviderStrategyInput)(nil)).Elem(), ClusterCapacityProviderAssociationsCapacityProviderStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCapacityProviderAssociationsCapacityProviderStrategyArrayInput)(nil)).Elem(), ClusterCapacityProviderAssociationsCapacityProviderStrategyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCapacityProviderStrategyItemInput)(nil)).Elem(), ClusterCapacityProviderStrategyItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCapacityProviderStrategyItemArrayInput)(nil)).Elem(), ClusterCapacityProviderStrategyItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterConfigurationInput)(nil)).Elem(), ClusterConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterConfigurationPtrInput)(nil)).Elem(), ClusterConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterExecuteCommandConfigurationInput)(nil)).Elem(), ClusterExecuteCommandConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterExecuteCommandConfigurationPtrInput)(nil)).Elem(), ClusterExecuteCommandConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterExecuteCommandLogConfigurationInput)(nil)).Elem(), ClusterExecuteCommandLogConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterExecuteCommandLogConfigurationPtrInput)(nil)).Elem(), ClusterExecuteCommandLogConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterManagedStorageConfigurationInput)(nil)).Elem(), ClusterManagedStorageConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterManagedStorageConfigurationPtrInput)(nil)).Elem(), ClusterManagedStorageConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterServiceConnectDefaultsInput)(nil)).Elem(), ClusterServiceConnectDefaultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterServiceConnectDefaultsPtrInput)(nil)).Elem(), ClusterServiceConnectDefaultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterSettingsInput)(nil)).Elem(), ClusterSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterSettingsArrayInput)(nil)).Elem(), ClusterSettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAdvancedConfigurationInput)(nil)).Elem(), ServiceAdvancedConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAdvancedConfigurationPtrInput)(nil)).Elem(), ServiceAdvancedConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAwsVpcConfigurationInput)(nil)).Elem(), ServiceAwsVpcConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAwsVpcConfigurationPtrInput)(nil)).Elem(), ServiceAwsVpcConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceCapacityProviderStrategyItemInput)(nil)).Elem(), ServiceCapacityProviderStrategyItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceCapacityProviderStrategyItemArrayInput)(nil)).Elem(), ServiceCapacityProviderStrategyItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceConnectClientAliasInput)(nil)).Elem(), ServiceConnectClientAliasArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceConnectClientAliasArrayInput)(nil)).Elem(), ServiceConnectClientAliasArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceConnectConfigurationInput)(nil)).Elem(), ServiceConnectConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceConnectConfigurationPtrInput)(nil)).Elem(), ServiceConnectConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceConnectServiceInput)(nil)).Elem(), ServiceConnectServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceConnectServiceArrayInput)(nil)).Elem(), ServiceConnectServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceConnectTestTrafficRulesInput)(nil)).Elem(), ServiceConnectTestTrafficRulesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceConnectTestTrafficRulesPtrInput)(nil)).Elem(), ServiceConnectTestTrafficRulesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceConnectTestTrafficRulesHeaderInput)(nil)).Elem(), ServiceConnectTestTrafficRulesHeaderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceConnectTestTrafficRulesHeaderPtrInput)(nil)).Elem(), ServiceConnectTestTrafficRulesHeaderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceConnectTestTrafficRulesHeaderValueInput)(nil)).Elem(), ServiceConnectTestTrafficRulesHeaderValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceConnectTestTrafficRulesHeaderValuePtrInput)(nil)).Elem(), ServiceConnectTestTrafficRulesHeaderValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceConnectTlsCertificateAuthorityInput)(nil)).Elem(), ServiceConnectTlsCertificateAuthorityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceConnectTlsCertificateAuthorityPtrInput)(nil)).Elem(), ServiceConnectTlsCertificateAuthorityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceConnectTlsConfigurationInput)(nil)).Elem(), ServiceConnectTlsConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceConnectTlsConfigurationPtrInput)(nil)).Elem(), ServiceConnectTlsConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceDeploymentAlarmsInput)(nil)).Elem(), ServiceDeploymentAlarmsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceDeploymentAlarmsPtrInput)(nil)).Elem(), ServiceDeploymentAlarmsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceDeploymentCircuitBreakerInput)(nil)).Elem(), ServiceDeploymentCircuitBreakerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceDeploymentCircuitBreakerPtrInput)(nil)).Elem(), ServiceDeploymentCircuitBreakerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceDeploymentConfigurationInput)(nil)).Elem(), ServiceDeploymentConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceDeploymentConfigurationPtrInput)(nil)).Elem(), ServiceDeploymentConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceDeploymentControllerInput)(nil)).Elem(), ServiceDeploymentControllerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceDeploymentControllerPtrInput)(nil)).Elem(), ServiceDeploymentControllerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceDeploymentLifecycleHookInput)(nil)).Elem(), ServiceDeploymentLifecycleHookArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceDeploymentLifecycleHookArrayInput)(nil)).Elem(), ServiceDeploymentLifecycleHookArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEbsTagSpecificationInput)(nil)).Elem(), ServiceEbsTagSpecificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEbsTagSpecificationArrayInput)(nil)).Elem(), ServiceEbsTagSpecificationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceForceNewDeploymentInput)(nil)).Elem(), ServiceForceNewDeploymentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceForceNewDeploymentPtrInput)(nil)).Elem(), ServiceForceNewDeploymentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLoadBalancerInput)(nil)).Elem(), ServiceLoadBalancerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLoadBalancerArrayInput)(nil)).Elem(), ServiceLoadBalancerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLogConfigurationInput)(nil)).Elem(), ServiceLogConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLogConfigurationPtrInput)(nil)).Elem(), ServiceLogConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceManagedEbsVolumeConfigurationInput)(nil)).Elem(), ServiceManagedEbsVolumeConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceManagedEbsVolumeConfigurationPtrInput)(nil)).Elem(), ServiceManagedEbsVolumeConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceNetworkConfigurationInput)(nil)).Elem(), ServiceNetworkConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceNetworkConfigurationPtrInput)(nil)).Elem(), ServiceNetworkConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServicePlacementConstraintInput)(nil)).Elem(), ServicePlacementConstraintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServicePlacementConstraintArrayInput)(nil)).Elem(), ServicePlacementConstraintArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServicePlacementStrategyInput)(nil)).Elem(), ServicePlacementStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServicePlacementStrategyArrayInput)(nil)).Elem(), ServicePlacementStrategyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceRegistryInput)(nil)).Elem(), ServiceRegistryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceRegistryArrayInput)(nil)).Elem(), ServiceRegistryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceSecretInput)(nil)).Elem(), ServiceSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceSecretArrayInput)(nil)).Elem(), ServiceSecretArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTagInput)(nil)).Elem(), ServiceTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTagArrayInput)(nil)).Elem(), ServiceTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTimeoutConfigurationInput)(nil)).Elem(), ServiceTimeoutConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTimeoutConfigurationPtrInput)(nil)).Elem(), ServiceTimeoutConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVolumeConfigurationInput)(nil)).Elem(), ServiceVolumeConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVolumeConfigurationArrayInput)(nil)).Elem(), ServiceVolumeConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVpcLatticeConfigurationInput)(nil)).Elem(), ServiceVpcLatticeConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVpcLatticeConfigurationArrayInput)(nil)).Elem(), ServiceVpcLatticeConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionAuthorizationConfigInput)(nil)).Elem(), TaskDefinitionAuthorizationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionAuthorizationConfigPtrInput)(nil)).Elem(), TaskDefinitionAuthorizationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionContainerDefinitionInput)(nil)).Elem(), TaskDefinitionContainerDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionContainerDefinitionArrayInput)(nil)).Elem(), TaskDefinitionContainerDefinitionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionContainerDependencyInput)(nil)).Elem(), TaskDefinitionContainerDependencyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionContainerDependencyArrayInput)(nil)).Elem(), TaskDefinitionContainerDependencyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionDeviceInput)(nil)).Elem(), TaskDefinitionDeviceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionDeviceArrayInput)(nil)).Elem(), TaskDefinitionDeviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionDockerVolumeConfigurationInput)(nil)).Elem(), TaskDefinitionDockerVolumeConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionDockerVolumeConfigurationPtrInput)(nil)).Elem(), TaskDefinitionDockerVolumeConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionEfsVolumeConfigurationInput)(nil)).Elem(), TaskDefinitionEfsVolumeConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionEfsVolumeConfigurationPtrInput)(nil)).Elem(), TaskDefinitionEfsVolumeConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionEnvironmentFileInput)(nil)).Elem(), TaskDefinitionEnvironmentFileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionEnvironmentFileArrayInput)(nil)).Elem(), TaskDefinitionEnvironmentFileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionEphemeralStorageInput)(nil)).Elem(), TaskDefinitionEphemeralStorageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionEphemeralStoragePtrInput)(nil)).Elem(), TaskDefinitionEphemeralStorageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionFSxAuthorizationConfigInput)(nil)).Elem(), TaskDefinitionFSxAuthorizationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionFSxAuthorizationConfigPtrInput)(nil)).Elem(), TaskDefinitionFSxAuthorizationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionFSxWindowsFileServerVolumeConfigurationInput)(nil)).Elem(), TaskDefinitionFSxWindowsFileServerVolumeConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionFSxWindowsFileServerVolumeConfigurationPtrInput)(nil)).Elem(), TaskDefinitionFSxWindowsFileServerVolumeConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionFirelensConfigurationInput)(nil)).Elem(), TaskDefinitionFirelensConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionFirelensConfigurationPtrInput)(nil)).Elem(), TaskDefinitionFirelensConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionHealthCheckInput)(nil)).Elem(), TaskDefinitionHealthCheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionHealthCheckPtrInput)(nil)).Elem(), TaskDefinitionHealthCheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionHostEntryInput)(nil)).Elem(), TaskDefinitionHostEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionHostEntryArrayInput)(nil)).Elem(), TaskDefinitionHostEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionHostVolumePropertiesInput)(nil)).Elem(), TaskDefinitionHostVolumePropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionHostVolumePropertiesPtrInput)(nil)).Elem(), TaskDefinitionHostVolumePropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionInferenceAcceleratorInput)(nil)).Elem(), TaskDefinitionInferenceAcceleratorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionInferenceAcceleratorArrayInput)(nil)).Elem(), TaskDefinitionInferenceAcceleratorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionKernelCapabilitiesInput)(nil)).Elem(), TaskDefinitionKernelCapabilitiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionKernelCapabilitiesPtrInput)(nil)).Elem(), TaskDefinitionKernelCapabilitiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionKeyValuePairInput)(nil)).Elem(), TaskDefinitionKeyValuePairArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionKeyValuePairArrayInput)(nil)).Elem(), TaskDefinitionKeyValuePairArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionLinuxParametersInput)(nil)).Elem(), TaskDefinitionLinuxParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionLinuxParametersPtrInput)(nil)).Elem(), TaskDefinitionLinuxParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionLogConfigurationInput)(nil)).Elem(), TaskDefinitionLogConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionLogConfigurationPtrInput)(nil)).Elem(), TaskDefinitionLogConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionMountPointInput)(nil)).Elem(), TaskDefinitionMountPointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionMountPointArrayInput)(nil)).Elem(), TaskDefinitionMountPointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionPlacementConstraintInput)(nil)).Elem(), TaskDefinitionPlacementConstraintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionPlacementConstraintArrayInput)(nil)).Elem(), TaskDefinitionPlacementConstraintArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionPortMappingInput)(nil)).Elem(), TaskDefinitionPortMappingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionPortMappingArrayInput)(nil)).Elem(), TaskDefinitionPortMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionProxyConfigurationInput)(nil)).Elem(), TaskDefinitionProxyConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionProxyConfigurationPtrInput)(nil)).Elem(), TaskDefinitionProxyConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionRepositoryCredentialsInput)(nil)).Elem(), TaskDefinitionRepositoryCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionRepositoryCredentialsPtrInput)(nil)).Elem(), TaskDefinitionRepositoryCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionResourceRequirementInput)(nil)).Elem(), TaskDefinitionResourceRequirementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionResourceRequirementArrayInput)(nil)).Elem(), TaskDefinitionResourceRequirementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionRestartPolicyInput)(nil)).Elem(), TaskDefinitionRestartPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionRestartPolicyPtrInput)(nil)).Elem(), TaskDefinitionRestartPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionRuntimePlatformInput)(nil)).Elem(), TaskDefinitionRuntimePlatformArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionRuntimePlatformPtrInput)(nil)).Elem(), TaskDefinitionRuntimePlatformArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionSecretInput)(nil)).Elem(), TaskDefinitionSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionSecretArrayInput)(nil)).Elem(), TaskDefinitionSecretArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionSystemControlInput)(nil)).Elem(), TaskDefinitionSystemControlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionSystemControlArrayInput)(nil)).Elem(), TaskDefinitionSystemControlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionTmpfsInput)(nil)).Elem(), TaskDefinitionTmpfsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionTmpfsArrayInput)(nil)).Elem(), TaskDefinitionTmpfsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionUlimitInput)(nil)).Elem(), TaskDefinitionUlimitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionUlimitArrayInput)(nil)).Elem(), TaskDefinitionUlimitArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionVolumeInput)(nil)).Elem(), TaskDefinitionVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionVolumeArrayInput)(nil)).Elem(), TaskDefinitionVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionVolumeFromInput)(nil)).Elem(), TaskDefinitionVolumeFromArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionVolumeFromArrayInput)(nil)).Elem(), TaskDefinitionVolumeFromArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskSetAwsVpcConfigurationInput)(nil)).Elem(), TaskSetAwsVpcConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskSetAwsVpcConfigurationPtrInput)(nil)).Elem(), TaskSetAwsVpcConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskSetCapacityProviderStrategyItemInput)(nil)).Elem(), TaskSetCapacityProviderStrategyItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskSetCapacityProviderStrategyItemArrayInput)(nil)).Elem(), TaskSetCapacityProviderStrategyItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskSetLoadBalancerInput)(nil)).Elem(), TaskSetLoadBalancerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskSetLoadBalancerArrayInput)(nil)).Elem(), TaskSetLoadBalancerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskSetNetworkConfigurationInput)(nil)).Elem(), TaskSetNetworkConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskSetNetworkConfigurationPtrInput)(nil)).Elem(), TaskSetNetworkConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskSetScaleInput)(nil)).Elem(), TaskSetScaleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskSetScalePtrInput)(nil)).Elem(), TaskSetScaleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskSetServiceRegistryInput)(nil)).Elem(), TaskSetServiceRegistryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskSetServiceRegistryArrayInput)(nil)).Elem(), TaskSetServiceRegistryArray{})
	pulumi.RegisterOutputType(CapacityProviderAcceleratorCountRequestOutput{})
	pulumi.RegisterOutputType(CapacityProviderAcceleratorCountRequestPtrOutput{})
	pulumi.RegisterOutputType(CapacityProviderAcceleratorTotalMemoryMiBRequestOutput{})
	pulumi.RegisterOutputType(CapacityProviderAcceleratorTotalMemoryMiBRequestPtrOutput{})
	pulumi.RegisterOutputType(CapacityProviderAutoScalingGroupProviderOutput{})
	pulumi.RegisterOutputType(CapacityProviderAutoScalingGroupProviderPtrOutput{})
	pulumi.RegisterOutputType(CapacityProviderBaselineEbsBandwidthMbpsRequestOutput{})
	pulumi.RegisterOutputType(CapacityProviderBaselineEbsBandwidthMbpsRequestPtrOutput{})
	pulumi.RegisterOutputType(CapacityProviderInstanceLaunchTemplateOutput{})
	pulumi.RegisterOutputType(CapacityProviderInstanceLaunchTemplatePtrOutput{})
	pulumi.RegisterOutputType(CapacityProviderInstanceRequirementsRequestOutput{})
	pulumi.RegisterOutputType(CapacityProviderInstanceRequirementsRequestPtrOutput{})
	pulumi.RegisterOutputType(CapacityProviderManagedInstancesNetworkConfigurationOutput{})
	pulumi.RegisterOutputType(CapacityProviderManagedInstancesNetworkConfigurationPtrOutput{})
	pulumi.RegisterOutputType(CapacityProviderManagedInstancesProviderOutput{})
	pulumi.RegisterOutputType(CapacityProviderManagedInstancesProviderPtrOutput{})
	pulumi.RegisterOutputType(CapacityProviderManagedInstancesStorageConfigurationOutput{})
	pulumi.RegisterOutputType(CapacityProviderManagedInstancesStorageConfigurationPtrOutput{})
	pulumi.RegisterOutputType(CapacityProviderManagedScalingOutput{})
	pulumi.RegisterOutputType(CapacityProviderManagedScalingPtrOutput{})
	pulumi.RegisterOutputType(CapacityProviderMemoryGiBPerVCpuRequestOutput{})
	pulumi.RegisterOutputType(CapacityProviderMemoryGiBPerVCpuRequestPtrOutput{})
	pulumi.RegisterOutputType(CapacityProviderMemoryMiBRequestOutput{})
	pulumi.RegisterOutputType(CapacityProviderMemoryMiBRequestPtrOutput{})
	pulumi.RegisterOutputType(CapacityProviderNetworkBandwidthGbpsRequestOutput{})
	pulumi.RegisterOutputType(CapacityProviderNetworkBandwidthGbpsRequestPtrOutput{})
	pulumi.RegisterOutputType(CapacityProviderNetworkInterfaceCountRequestOutput{})
	pulumi.RegisterOutputType(CapacityProviderNetworkInterfaceCountRequestPtrOutput{})
	pulumi.RegisterOutputType(CapacityProviderTotalLocalStorageGbRequestOutput{})
	pulumi.RegisterOutputType(CapacityProviderTotalLocalStorageGbRequestPtrOutput{})
	pulumi.RegisterOutputType(CapacityProviderVCpuCountRangeRequestOutput{})
	pulumi.RegisterOutputType(CapacityProviderVCpuCountRangeRequestPtrOutput{})
	pulumi.RegisterOutputType(ClusterCapacityProviderAssociationsCapacityProviderStrategyOutput{})
	pulumi.RegisterOutputType(ClusterCapacityProviderAssociationsCapacityProviderStrategyArrayOutput{})
	pulumi.RegisterOutputType(ClusterCapacityProviderStrategyItemOutput{})
	pulumi.RegisterOutputType(ClusterCapacityProviderStrategyItemArrayOutput{})
	pulumi.RegisterOutputType(ClusterConfigurationOutput{})
	pulumi.RegisterOutputType(ClusterConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ClusterExecuteCommandConfigurationOutput{})
	pulumi.RegisterOutputType(ClusterExecuteCommandConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ClusterExecuteCommandLogConfigurationOutput{})
	pulumi.RegisterOutputType(ClusterExecuteCommandLogConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ClusterManagedStorageConfigurationOutput{})
	pulumi.RegisterOutputType(ClusterManagedStorageConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ClusterServiceConnectDefaultsOutput{})
	pulumi.RegisterOutputType(ClusterServiceConnectDefaultsPtrOutput{})
	pulumi.RegisterOutputType(ClusterSettingsOutput{})
	pulumi.RegisterOutputType(ClusterSettingsArrayOutput{})
	pulumi.RegisterOutputType(ServiceAdvancedConfigurationOutput{})
	pulumi.RegisterOutputType(ServiceAdvancedConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ServiceAwsVpcConfigurationOutput{})
	pulumi.RegisterOutputType(ServiceAwsVpcConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ServiceCapacityProviderStrategyItemOutput{})
	pulumi.RegisterOutputType(ServiceCapacityProviderStrategyItemArrayOutput{})
	pulumi.RegisterOutputType(ServiceConnectClientAliasOutput{})
	pulumi.RegisterOutputType(ServiceConnectClientAliasArrayOutput{})
	pulumi.RegisterOutputType(ServiceConnectConfigurationOutput{})
	pulumi.RegisterOutputType(ServiceConnectConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ServiceConnectServiceOutput{})
	pulumi.RegisterOutputType(ServiceConnectServiceArrayOutput{})
	pulumi.RegisterOutputType(ServiceConnectTestTrafficRulesOutput{})
	pulumi.RegisterOutputType(ServiceConnectTestTrafficRulesPtrOutput{})
	pulumi.RegisterOutputType(ServiceConnectTestTrafficRulesHeaderOutput{})
	pulumi.RegisterOutputType(ServiceConnectTestTrafficRulesHeaderPtrOutput{})
	pulumi.RegisterOutputType(ServiceConnectTestTrafficRulesHeaderValueOutput{})
	pulumi.RegisterOutputType(ServiceConnectTestTrafficRulesHeaderValuePtrOutput{})
	pulumi.RegisterOutputType(ServiceConnectTlsCertificateAuthorityOutput{})
	pulumi.RegisterOutputType(ServiceConnectTlsCertificateAuthorityPtrOutput{})
	pulumi.RegisterOutputType(ServiceConnectTlsConfigurationOutput{})
	pulumi.RegisterOutputType(ServiceConnectTlsConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ServiceDeploymentAlarmsOutput{})
	pulumi.RegisterOutputType(ServiceDeploymentAlarmsPtrOutput{})
	pulumi.RegisterOutputType(ServiceDeploymentCircuitBreakerOutput{})
	pulumi.RegisterOutputType(ServiceDeploymentCircuitBreakerPtrOutput{})
	pulumi.RegisterOutputType(ServiceDeploymentConfigurationOutput{})
	pulumi.RegisterOutputType(ServiceDeploymentConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ServiceDeploymentControllerOutput{})
	pulumi.RegisterOutputType(ServiceDeploymentControllerPtrOutput{})
	pulumi.RegisterOutputType(ServiceDeploymentLifecycleHookOutput{})
	pulumi.RegisterOutputType(ServiceDeploymentLifecycleHookArrayOutput{})
	pulumi.RegisterOutputType(ServiceEbsTagSpecificationOutput{})
	pulumi.RegisterOutputType(ServiceEbsTagSpecificationArrayOutput{})
	pulumi.RegisterOutputType(ServiceForceNewDeploymentOutput{})
	pulumi.RegisterOutputType(ServiceForceNewDeploymentPtrOutput{})
	pulumi.RegisterOutputType(ServiceLoadBalancerOutput{})
	pulumi.RegisterOutputType(ServiceLoadBalancerArrayOutput{})
	pulumi.RegisterOutputType(ServiceLogConfigurationOutput{})
	pulumi.RegisterOutputType(ServiceLogConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ServiceManagedEbsVolumeConfigurationOutput{})
	pulumi.RegisterOutputType(ServiceManagedEbsVolumeConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ServiceNetworkConfigurationOutput{})
	pulumi.RegisterOutputType(ServiceNetworkConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ServicePlacementConstraintOutput{})
	pulumi.RegisterOutputType(ServicePlacementConstraintArrayOutput{})
	pulumi.RegisterOutputType(ServicePlacementStrategyOutput{})
	pulumi.RegisterOutputType(ServicePlacementStrategyArrayOutput{})
	pulumi.RegisterOutputType(ServiceRegistryOutput{})
	pulumi.RegisterOutputType(ServiceRegistryArrayOutput{})
	pulumi.RegisterOutputType(ServiceSecretOutput{})
	pulumi.RegisterOutputType(ServiceSecretArrayOutput{})
	pulumi.RegisterOutputType(ServiceTagOutput{})
	pulumi.RegisterOutputType(ServiceTagArrayOutput{})
	pulumi.RegisterOutputType(ServiceTimeoutConfigurationOutput{})
	pulumi.RegisterOutputType(ServiceTimeoutConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ServiceVolumeConfigurationOutput{})
	pulumi.RegisterOutputType(ServiceVolumeConfigurationArrayOutput{})
	pulumi.RegisterOutputType(ServiceVpcLatticeConfigurationOutput{})
	pulumi.RegisterOutputType(ServiceVpcLatticeConfigurationArrayOutput{})
	pulumi.RegisterOutputType(TaskDefinitionAuthorizationConfigOutput{})
	pulumi.RegisterOutputType(TaskDefinitionAuthorizationConfigPtrOutput{})
	pulumi.RegisterOutputType(TaskDefinitionContainerDefinitionOutput{})
	pulumi.RegisterOutputType(TaskDefinitionContainerDefinitionArrayOutput{})
	pulumi.RegisterOutputType(TaskDefinitionContainerDependencyOutput{})
	pulumi.RegisterOutputType(TaskDefinitionContainerDependencyArrayOutput{})
	pulumi.RegisterOutputType(TaskDefinitionDeviceOutput{})
	pulumi.RegisterOutputType(TaskDefinitionDeviceArrayOutput{})
	pulumi.RegisterOutputType(TaskDefinitionDockerVolumeConfigurationOutput{})
	pulumi.RegisterOutputType(TaskDefinitionDockerVolumeConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TaskDefinitionEfsVolumeConfigurationOutput{})
	pulumi.RegisterOutputType(TaskDefinitionEfsVolumeConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TaskDefinitionEnvironmentFileOutput{})
	pulumi.RegisterOutputType(TaskDefinitionEnvironmentFileArrayOutput{})
	pulumi.RegisterOutputType(TaskDefinitionEphemeralStorageOutput{})
	pulumi.RegisterOutputType(TaskDefinitionEphemeralStoragePtrOutput{})
	pulumi.RegisterOutputType(TaskDefinitionFSxAuthorizationConfigOutput{})
	pulumi.RegisterOutputType(TaskDefinitionFSxAuthorizationConfigPtrOutput{})
	pulumi.RegisterOutputType(TaskDefinitionFSxWindowsFileServerVolumeConfigurationOutput{})
	pulumi.RegisterOutputType(TaskDefinitionFSxWindowsFileServerVolumeConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TaskDefinitionFirelensConfigurationOutput{})
	pulumi.RegisterOutputType(TaskDefinitionFirelensConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TaskDefinitionHealthCheckOutput{})
	pulumi.RegisterOutputType(TaskDefinitionHealthCheckPtrOutput{})
	pulumi.RegisterOutputType(TaskDefinitionHostEntryOutput{})
	pulumi.RegisterOutputType(TaskDefinitionHostEntryArrayOutput{})
	pulumi.RegisterOutputType(TaskDefinitionHostVolumePropertiesOutput{})
	pulumi.RegisterOutputType(TaskDefinitionHostVolumePropertiesPtrOutput{})
	pulumi.RegisterOutputType(TaskDefinitionInferenceAcceleratorOutput{})
	pulumi.RegisterOutputType(TaskDefinitionInferenceAcceleratorArrayOutput{})
	pulumi.RegisterOutputType(TaskDefinitionKernelCapabilitiesOutput{})
	pulumi.RegisterOutputType(TaskDefinitionKernelCapabilitiesPtrOutput{})
	pulumi.RegisterOutputType(TaskDefinitionKeyValuePairOutput{})
	pulumi.RegisterOutputType(TaskDefinitionKeyValuePairArrayOutput{})
	pulumi.RegisterOutputType(TaskDefinitionLinuxParametersOutput{})
	pulumi.RegisterOutputType(TaskDefinitionLinuxParametersPtrOutput{})
	pulumi.RegisterOutputType(TaskDefinitionLogConfigurationOutput{})
	pulumi.RegisterOutputType(TaskDefinitionLogConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TaskDefinitionMountPointOutput{})
	pulumi.RegisterOutputType(TaskDefinitionMountPointArrayOutput{})
	pulumi.RegisterOutputType(TaskDefinitionPlacementConstraintOutput{})
	pulumi.RegisterOutputType(TaskDefinitionPlacementConstraintArrayOutput{})
	pulumi.RegisterOutputType(TaskDefinitionPortMappingOutput{})
	pulumi.RegisterOutputType(TaskDefinitionPortMappingArrayOutput{})
	pulumi.RegisterOutputType(TaskDefinitionProxyConfigurationOutput{})
	pulumi.RegisterOutputType(TaskDefinitionProxyConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TaskDefinitionRepositoryCredentialsOutput{})
	pulumi.RegisterOutputType(TaskDefinitionRepositoryCredentialsPtrOutput{})
	pulumi.RegisterOutputType(TaskDefinitionResourceRequirementOutput{})
	pulumi.RegisterOutputType(TaskDefinitionResourceRequirementArrayOutput{})
	pulumi.RegisterOutputType(TaskDefinitionRestartPolicyOutput{})
	pulumi.RegisterOutputType(TaskDefinitionRestartPolicyPtrOutput{})
	pulumi.RegisterOutputType(TaskDefinitionRuntimePlatformOutput{})
	pulumi.RegisterOutputType(TaskDefinitionRuntimePlatformPtrOutput{})
	pulumi.RegisterOutputType(TaskDefinitionSecretOutput{})
	pulumi.RegisterOutputType(TaskDefinitionSecretArrayOutput{})
	pulumi.RegisterOutputType(TaskDefinitionSystemControlOutput{})
	pulumi.RegisterOutputType(TaskDefinitionSystemControlArrayOutput{})
	pulumi.RegisterOutputType(TaskDefinitionTmpfsOutput{})
	pulumi.RegisterOutputType(TaskDefinitionTmpfsArrayOutput{})
	pulumi.RegisterOutputType(TaskDefinitionUlimitOutput{})
	pulumi.RegisterOutputType(TaskDefinitionUlimitArrayOutput{})
	pulumi.RegisterOutputType(TaskDefinitionVolumeOutput{})
	pulumi.RegisterOutputType(TaskDefinitionVolumeArrayOutput{})
	pulumi.RegisterOutputType(TaskDefinitionVolumeFromOutput{})
	pulumi.RegisterOutputType(TaskDefinitionVolumeFromArrayOutput{})
	pulumi.RegisterOutputType(TaskSetAwsVpcConfigurationOutput{})
	pulumi.RegisterOutputType(TaskSetAwsVpcConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TaskSetCapacityProviderStrategyItemOutput{})
	pulumi.RegisterOutputType(TaskSetCapacityProviderStrategyItemArrayOutput{})
	pulumi.RegisterOutputType(TaskSetLoadBalancerOutput{})
	pulumi.RegisterOutputType(TaskSetLoadBalancerArrayOutput{})
	pulumi.RegisterOutputType(TaskSetNetworkConfigurationOutput{})
	pulumi.RegisterOutputType(TaskSetNetworkConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TaskSetScaleOutput{})
	pulumi.RegisterOutputType(TaskSetScalePtrOutput{})
	pulumi.RegisterOutputType(TaskSetServiceRegistryOutput{})
	pulumi.RegisterOutputType(TaskSetServiceRegistryArrayOutput{})
}
