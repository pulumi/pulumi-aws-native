// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type CapacityProviderAutoScalingGroupProvider struct {
	AutoScalingGroupArn          string                                                                `pulumi:"autoScalingGroupArn"`
	ManagedDraining              *CapacityProviderAutoScalingGroupProviderManagedDraining              `pulumi:"managedDraining"`
	ManagedScaling               *CapacityProviderManagedScaling                                       `pulumi:"managedScaling"`
	ManagedTerminationProtection *CapacityProviderAutoScalingGroupProviderManagedTerminationProtection `pulumi:"managedTerminationProtection"`
}

// CapacityProviderAutoScalingGroupProviderInput is an input type that accepts CapacityProviderAutoScalingGroupProviderArgs and CapacityProviderAutoScalingGroupProviderOutput values.
// You can construct a concrete instance of `CapacityProviderAutoScalingGroupProviderInput` via:
//
//	CapacityProviderAutoScalingGroupProviderArgs{...}
type CapacityProviderAutoScalingGroupProviderInput interface {
	pulumi.Input

	ToCapacityProviderAutoScalingGroupProviderOutput() CapacityProviderAutoScalingGroupProviderOutput
	ToCapacityProviderAutoScalingGroupProviderOutputWithContext(context.Context) CapacityProviderAutoScalingGroupProviderOutput
}

type CapacityProviderAutoScalingGroupProviderArgs struct {
	AutoScalingGroupArn          pulumi.StringInput                                                           `pulumi:"autoScalingGroupArn"`
	ManagedDraining              CapacityProviderAutoScalingGroupProviderManagedDrainingPtrInput              `pulumi:"managedDraining"`
	ManagedScaling               CapacityProviderManagedScalingPtrInput                                       `pulumi:"managedScaling"`
	ManagedTerminationProtection CapacityProviderAutoScalingGroupProviderManagedTerminationProtectionPtrInput `pulumi:"managedTerminationProtection"`
}

func (CapacityProviderAutoScalingGroupProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityProviderAutoScalingGroupProvider)(nil)).Elem()
}

func (i CapacityProviderAutoScalingGroupProviderArgs) ToCapacityProviderAutoScalingGroupProviderOutput() CapacityProviderAutoScalingGroupProviderOutput {
	return i.ToCapacityProviderAutoScalingGroupProviderOutputWithContext(context.Background())
}

func (i CapacityProviderAutoScalingGroupProviderArgs) ToCapacityProviderAutoScalingGroupProviderOutputWithContext(ctx context.Context) CapacityProviderAutoScalingGroupProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderAutoScalingGroupProviderOutput)
}

type CapacityProviderAutoScalingGroupProviderOutput struct{ *pulumi.OutputState }

func (CapacityProviderAutoScalingGroupProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityProviderAutoScalingGroupProvider)(nil)).Elem()
}

func (o CapacityProviderAutoScalingGroupProviderOutput) ToCapacityProviderAutoScalingGroupProviderOutput() CapacityProviderAutoScalingGroupProviderOutput {
	return o
}

func (o CapacityProviderAutoScalingGroupProviderOutput) ToCapacityProviderAutoScalingGroupProviderOutputWithContext(ctx context.Context) CapacityProviderAutoScalingGroupProviderOutput {
	return o
}

func (o CapacityProviderAutoScalingGroupProviderOutput) AutoScalingGroupArn() pulumi.StringOutput {
	return o.ApplyT(func(v CapacityProviderAutoScalingGroupProvider) string { return v.AutoScalingGroupArn }).(pulumi.StringOutput)
}

func (o CapacityProviderAutoScalingGroupProviderOutput) ManagedDraining() CapacityProviderAutoScalingGroupProviderManagedDrainingPtrOutput {
	return o.ApplyT(func(v CapacityProviderAutoScalingGroupProvider) *CapacityProviderAutoScalingGroupProviderManagedDraining {
		return v.ManagedDraining
	}).(CapacityProviderAutoScalingGroupProviderManagedDrainingPtrOutput)
}

func (o CapacityProviderAutoScalingGroupProviderOutput) ManagedScaling() CapacityProviderManagedScalingPtrOutput {
	return o.ApplyT(func(v CapacityProviderAutoScalingGroupProvider) *CapacityProviderManagedScaling {
		return v.ManagedScaling
	}).(CapacityProviderManagedScalingPtrOutput)
}

func (o CapacityProviderAutoScalingGroupProviderOutput) ManagedTerminationProtection() CapacityProviderAutoScalingGroupProviderManagedTerminationProtectionPtrOutput {
	return o.ApplyT(func(v CapacityProviderAutoScalingGroupProvider) *CapacityProviderAutoScalingGroupProviderManagedTerminationProtection {
		return v.ManagedTerminationProtection
	}).(CapacityProviderAutoScalingGroupProviderManagedTerminationProtectionPtrOutput)
}

type CapacityProviderAutoScalingGroupProviderPtrOutput struct{ *pulumi.OutputState }

func (CapacityProviderAutoScalingGroupProviderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityProviderAutoScalingGroupProvider)(nil)).Elem()
}

func (o CapacityProviderAutoScalingGroupProviderPtrOutput) ToCapacityProviderAutoScalingGroupProviderPtrOutput() CapacityProviderAutoScalingGroupProviderPtrOutput {
	return o
}

func (o CapacityProviderAutoScalingGroupProviderPtrOutput) ToCapacityProviderAutoScalingGroupProviderPtrOutputWithContext(ctx context.Context) CapacityProviderAutoScalingGroupProviderPtrOutput {
	return o
}

func (o CapacityProviderAutoScalingGroupProviderPtrOutput) Elem() CapacityProviderAutoScalingGroupProviderOutput {
	return o.ApplyT(func(v *CapacityProviderAutoScalingGroupProvider) CapacityProviderAutoScalingGroupProvider {
		if v != nil {
			return *v
		}
		var ret CapacityProviderAutoScalingGroupProvider
		return ret
	}).(CapacityProviderAutoScalingGroupProviderOutput)
}

func (o CapacityProviderAutoScalingGroupProviderPtrOutput) AutoScalingGroupArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CapacityProviderAutoScalingGroupProvider) *string {
		if v == nil {
			return nil
		}
		return &v.AutoScalingGroupArn
	}).(pulumi.StringPtrOutput)
}

func (o CapacityProviderAutoScalingGroupProviderPtrOutput) ManagedDraining() CapacityProviderAutoScalingGroupProviderManagedDrainingPtrOutput {
	return o.ApplyT(func(v *CapacityProviderAutoScalingGroupProvider) *CapacityProviderAutoScalingGroupProviderManagedDraining {
		if v == nil {
			return nil
		}
		return v.ManagedDraining
	}).(CapacityProviderAutoScalingGroupProviderManagedDrainingPtrOutput)
}

func (o CapacityProviderAutoScalingGroupProviderPtrOutput) ManagedScaling() CapacityProviderManagedScalingPtrOutput {
	return o.ApplyT(func(v *CapacityProviderAutoScalingGroupProvider) *CapacityProviderManagedScaling {
		if v == nil {
			return nil
		}
		return v.ManagedScaling
	}).(CapacityProviderManagedScalingPtrOutput)
}

func (o CapacityProviderAutoScalingGroupProviderPtrOutput) ManagedTerminationProtection() CapacityProviderAutoScalingGroupProviderManagedTerminationProtectionPtrOutput {
	return o.ApplyT(func(v *CapacityProviderAutoScalingGroupProvider) *CapacityProviderAutoScalingGroupProviderManagedTerminationProtection {
		if v == nil {
			return nil
		}
		return v.ManagedTerminationProtection
	}).(CapacityProviderAutoScalingGroupProviderManagedTerminationProtectionPtrOutput)
}

// The managed scaling settings for the Auto Scaling group capacity provider.
type CapacityProviderManagedScaling struct {
	InstanceWarmupPeriod   *int                                  `pulumi:"instanceWarmupPeriod"`
	MaximumScalingStepSize *int                                  `pulumi:"maximumScalingStepSize"`
	MinimumScalingStepSize *int                                  `pulumi:"minimumScalingStepSize"`
	Status                 *CapacityProviderManagedScalingStatus `pulumi:"status"`
	TargetCapacity         *int                                  `pulumi:"targetCapacity"`
}

// CapacityProviderManagedScalingInput is an input type that accepts CapacityProviderManagedScalingArgs and CapacityProviderManagedScalingOutput values.
// You can construct a concrete instance of `CapacityProviderManagedScalingInput` via:
//
//	CapacityProviderManagedScalingArgs{...}
type CapacityProviderManagedScalingInput interface {
	pulumi.Input

	ToCapacityProviderManagedScalingOutput() CapacityProviderManagedScalingOutput
	ToCapacityProviderManagedScalingOutputWithContext(context.Context) CapacityProviderManagedScalingOutput
}

// The managed scaling settings for the Auto Scaling group capacity provider.
type CapacityProviderManagedScalingArgs struct {
	InstanceWarmupPeriod   pulumi.IntPtrInput                           `pulumi:"instanceWarmupPeriod"`
	MaximumScalingStepSize pulumi.IntPtrInput                           `pulumi:"maximumScalingStepSize"`
	MinimumScalingStepSize pulumi.IntPtrInput                           `pulumi:"minimumScalingStepSize"`
	Status                 CapacityProviderManagedScalingStatusPtrInput `pulumi:"status"`
	TargetCapacity         pulumi.IntPtrInput                           `pulumi:"targetCapacity"`
}

func (CapacityProviderManagedScalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityProviderManagedScaling)(nil)).Elem()
}

func (i CapacityProviderManagedScalingArgs) ToCapacityProviderManagedScalingOutput() CapacityProviderManagedScalingOutput {
	return i.ToCapacityProviderManagedScalingOutputWithContext(context.Background())
}

func (i CapacityProviderManagedScalingArgs) ToCapacityProviderManagedScalingOutputWithContext(ctx context.Context) CapacityProviderManagedScalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderManagedScalingOutput)
}

func (i CapacityProviderManagedScalingArgs) ToCapacityProviderManagedScalingPtrOutput() CapacityProviderManagedScalingPtrOutput {
	return i.ToCapacityProviderManagedScalingPtrOutputWithContext(context.Background())
}

func (i CapacityProviderManagedScalingArgs) ToCapacityProviderManagedScalingPtrOutputWithContext(ctx context.Context) CapacityProviderManagedScalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderManagedScalingOutput).ToCapacityProviderManagedScalingPtrOutputWithContext(ctx)
}

// CapacityProviderManagedScalingPtrInput is an input type that accepts CapacityProviderManagedScalingArgs, CapacityProviderManagedScalingPtr and CapacityProviderManagedScalingPtrOutput values.
// You can construct a concrete instance of `CapacityProviderManagedScalingPtrInput` via:
//
//	        CapacityProviderManagedScalingArgs{...}
//
//	or:
//
//	        nil
type CapacityProviderManagedScalingPtrInput interface {
	pulumi.Input

	ToCapacityProviderManagedScalingPtrOutput() CapacityProviderManagedScalingPtrOutput
	ToCapacityProviderManagedScalingPtrOutputWithContext(context.Context) CapacityProviderManagedScalingPtrOutput
}

type capacityProviderManagedScalingPtrType CapacityProviderManagedScalingArgs

func CapacityProviderManagedScalingPtr(v *CapacityProviderManagedScalingArgs) CapacityProviderManagedScalingPtrInput {
	return (*capacityProviderManagedScalingPtrType)(v)
}

func (*capacityProviderManagedScalingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityProviderManagedScaling)(nil)).Elem()
}

func (i *capacityProviderManagedScalingPtrType) ToCapacityProviderManagedScalingPtrOutput() CapacityProviderManagedScalingPtrOutput {
	return i.ToCapacityProviderManagedScalingPtrOutputWithContext(context.Background())
}

func (i *capacityProviderManagedScalingPtrType) ToCapacityProviderManagedScalingPtrOutputWithContext(ctx context.Context) CapacityProviderManagedScalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderManagedScalingPtrOutput)
}

// The managed scaling settings for the Auto Scaling group capacity provider.
type CapacityProviderManagedScalingOutput struct{ *pulumi.OutputState }

func (CapacityProviderManagedScalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityProviderManagedScaling)(nil)).Elem()
}

func (o CapacityProviderManagedScalingOutput) ToCapacityProviderManagedScalingOutput() CapacityProviderManagedScalingOutput {
	return o
}

func (o CapacityProviderManagedScalingOutput) ToCapacityProviderManagedScalingOutputWithContext(ctx context.Context) CapacityProviderManagedScalingOutput {
	return o
}

func (o CapacityProviderManagedScalingOutput) ToCapacityProviderManagedScalingPtrOutput() CapacityProviderManagedScalingPtrOutput {
	return o.ToCapacityProviderManagedScalingPtrOutputWithContext(context.Background())
}

func (o CapacityProviderManagedScalingOutput) ToCapacityProviderManagedScalingPtrOutputWithContext(ctx context.Context) CapacityProviderManagedScalingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CapacityProviderManagedScaling) *CapacityProviderManagedScaling {
		return &v
	}).(CapacityProviderManagedScalingPtrOutput)
}

func (o CapacityProviderManagedScalingOutput) InstanceWarmupPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CapacityProviderManagedScaling) *int { return v.InstanceWarmupPeriod }).(pulumi.IntPtrOutput)
}

func (o CapacityProviderManagedScalingOutput) MaximumScalingStepSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CapacityProviderManagedScaling) *int { return v.MaximumScalingStepSize }).(pulumi.IntPtrOutput)
}

func (o CapacityProviderManagedScalingOutput) MinimumScalingStepSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CapacityProviderManagedScaling) *int { return v.MinimumScalingStepSize }).(pulumi.IntPtrOutput)
}

func (o CapacityProviderManagedScalingOutput) Status() CapacityProviderManagedScalingStatusPtrOutput {
	return o.ApplyT(func(v CapacityProviderManagedScaling) *CapacityProviderManagedScalingStatus { return v.Status }).(CapacityProviderManagedScalingStatusPtrOutput)
}

func (o CapacityProviderManagedScalingOutput) TargetCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CapacityProviderManagedScaling) *int { return v.TargetCapacity }).(pulumi.IntPtrOutput)
}

type CapacityProviderManagedScalingPtrOutput struct{ *pulumi.OutputState }

func (CapacityProviderManagedScalingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityProviderManagedScaling)(nil)).Elem()
}

func (o CapacityProviderManagedScalingPtrOutput) ToCapacityProviderManagedScalingPtrOutput() CapacityProviderManagedScalingPtrOutput {
	return o
}

func (o CapacityProviderManagedScalingPtrOutput) ToCapacityProviderManagedScalingPtrOutputWithContext(ctx context.Context) CapacityProviderManagedScalingPtrOutput {
	return o
}

func (o CapacityProviderManagedScalingPtrOutput) Elem() CapacityProviderManagedScalingOutput {
	return o.ApplyT(func(v *CapacityProviderManagedScaling) CapacityProviderManagedScaling {
		if v != nil {
			return *v
		}
		var ret CapacityProviderManagedScaling
		return ret
	}).(CapacityProviderManagedScalingOutput)
}

func (o CapacityProviderManagedScalingPtrOutput) InstanceWarmupPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CapacityProviderManagedScaling) *int {
		if v == nil {
			return nil
		}
		return v.InstanceWarmupPeriod
	}).(pulumi.IntPtrOutput)
}

func (o CapacityProviderManagedScalingPtrOutput) MaximumScalingStepSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CapacityProviderManagedScaling) *int {
		if v == nil {
			return nil
		}
		return v.MaximumScalingStepSize
	}).(pulumi.IntPtrOutput)
}

func (o CapacityProviderManagedScalingPtrOutput) MinimumScalingStepSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CapacityProviderManagedScaling) *int {
		if v == nil {
			return nil
		}
		return v.MinimumScalingStepSize
	}).(pulumi.IntPtrOutput)
}

func (o CapacityProviderManagedScalingPtrOutput) Status() CapacityProviderManagedScalingStatusPtrOutput {
	return o.ApplyT(func(v *CapacityProviderManagedScaling) *CapacityProviderManagedScalingStatus {
		if v == nil {
			return nil
		}
		return v.Status
	}).(CapacityProviderManagedScalingStatusPtrOutput)
}

func (o CapacityProviderManagedScalingPtrOutput) TargetCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CapacityProviderManagedScaling) *int {
		if v == nil {
			return nil
		}
		return v.TargetCapacity
	}).(pulumi.IntPtrOutput)
}

type CapacityProviderTag struct {
	Key   *string `pulumi:"key"`
	Value *string `pulumi:"value"`
}

type ClusterCapacityProviderAssociationsCapacityProviderStrategy struct {
	Base             *int   `pulumi:"base"`
	CapacityProvider string `pulumi:"capacityProvider"`
	Weight           *int   `pulumi:"weight"`
}

// ClusterCapacityProviderAssociationsCapacityProviderStrategyInput is an input type that accepts ClusterCapacityProviderAssociationsCapacityProviderStrategyArgs and ClusterCapacityProviderAssociationsCapacityProviderStrategyOutput values.
// You can construct a concrete instance of `ClusterCapacityProviderAssociationsCapacityProviderStrategyInput` via:
//
//	ClusterCapacityProviderAssociationsCapacityProviderStrategyArgs{...}
type ClusterCapacityProviderAssociationsCapacityProviderStrategyInput interface {
	pulumi.Input

	ToClusterCapacityProviderAssociationsCapacityProviderStrategyOutput() ClusterCapacityProviderAssociationsCapacityProviderStrategyOutput
	ToClusterCapacityProviderAssociationsCapacityProviderStrategyOutputWithContext(context.Context) ClusterCapacityProviderAssociationsCapacityProviderStrategyOutput
}

type ClusterCapacityProviderAssociationsCapacityProviderStrategyArgs struct {
	Base             pulumi.IntPtrInput `pulumi:"base"`
	CapacityProvider pulumi.StringInput `pulumi:"capacityProvider"`
	Weight           pulumi.IntPtrInput `pulumi:"weight"`
}

func (ClusterCapacityProviderAssociationsCapacityProviderStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCapacityProviderAssociationsCapacityProviderStrategy)(nil)).Elem()
}

func (i ClusterCapacityProviderAssociationsCapacityProviderStrategyArgs) ToClusterCapacityProviderAssociationsCapacityProviderStrategyOutput() ClusterCapacityProviderAssociationsCapacityProviderStrategyOutput {
	return i.ToClusterCapacityProviderAssociationsCapacityProviderStrategyOutputWithContext(context.Background())
}

func (i ClusterCapacityProviderAssociationsCapacityProviderStrategyArgs) ToClusterCapacityProviderAssociationsCapacityProviderStrategyOutputWithContext(ctx context.Context) ClusterCapacityProviderAssociationsCapacityProviderStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCapacityProviderAssociationsCapacityProviderStrategyOutput)
}

// ClusterCapacityProviderAssociationsCapacityProviderStrategyArrayInput is an input type that accepts ClusterCapacityProviderAssociationsCapacityProviderStrategyArray and ClusterCapacityProviderAssociationsCapacityProviderStrategyArrayOutput values.
// You can construct a concrete instance of `ClusterCapacityProviderAssociationsCapacityProviderStrategyArrayInput` via:
//
//	ClusterCapacityProviderAssociationsCapacityProviderStrategyArray{ ClusterCapacityProviderAssociationsCapacityProviderStrategyArgs{...} }
type ClusterCapacityProviderAssociationsCapacityProviderStrategyArrayInput interface {
	pulumi.Input

	ToClusterCapacityProviderAssociationsCapacityProviderStrategyArrayOutput() ClusterCapacityProviderAssociationsCapacityProviderStrategyArrayOutput
	ToClusterCapacityProviderAssociationsCapacityProviderStrategyArrayOutputWithContext(context.Context) ClusterCapacityProviderAssociationsCapacityProviderStrategyArrayOutput
}

type ClusterCapacityProviderAssociationsCapacityProviderStrategyArray []ClusterCapacityProviderAssociationsCapacityProviderStrategyInput

func (ClusterCapacityProviderAssociationsCapacityProviderStrategyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterCapacityProviderAssociationsCapacityProviderStrategy)(nil)).Elem()
}

func (i ClusterCapacityProviderAssociationsCapacityProviderStrategyArray) ToClusterCapacityProviderAssociationsCapacityProviderStrategyArrayOutput() ClusterCapacityProviderAssociationsCapacityProviderStrategyArrayOutput {
	return i.ToClusterCapacityProviderAssociationsCapacityProviderStrategyArrayOutputWithContext(context.Background())
}

func (i ClusterCapacityProviderAssociationsCapacityProviderStrategyArray) ToClusterCapacityProviderAssociationsCapacityProviderStrategyArrayOutputWithContext(ctx context.Context) ClusterCapacityProviderAssociationsCapacityProviderStrategyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCapacityProviderAssociationsCapacityProviderStrategyArrayOutput)
}

type ClusterCapacityProviderAssociationsCapacityProviderStrategyOutput struct{ *pulumi.OutputState }

func (ClusterCapacityProviderAssociationsCapacityProviderStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCapacityProviderAssociationsCapacityProviderStrategy)(nil)).Elem()
}

func (o ClusterCapacityProviderAssociationsCapacityProviderStrategyOutput) ToClusterCapacityProviderAssociationsCapacityProviderStrategyOutput() ClusterCapacityProviderAssociationsCapacityProviderStrategyOutput {
	return o
}

func (o ClusterCapacityProviderAssociationsCapacityProviderStrategyOutput) ToClusterCapacityProviderAssociationsCapacityProviderStrategyOutputWithContext(ctx context.Context) ClusterCapacityProviderAssociationsCapacityProviderStrategyOutput {
	return o
}

func (o ClusterCapacityProviderAssociationsCapacityProviderStrategyOutput) Base() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterCapacityProviderAssociationsCapacityProviderStrategy) *int { return v.Base }).(pulumi.IntPtrOutput)
}

func (o ClusterCapacityProviderAssociationsCapacityProviderStrategyOutput) CapacityProvider() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterCapacityProviderAssociationsCapacityProviderStrategy) string { return v.CapacityProvider }).(pulumi.StringOutput)
}

func (o ClusterCapacityProviderAssociationsCapacityProviderStrategyOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterCapacityProviderAssociationsCapacityProviderStrategy) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type ClusterCapacityProviderAssociationsCapacityProviderStrategyArrayOutput struct{ *pulumi.OutputState }

func (ClusterCapacityProviderAssociationsCapacityProviderStrategyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterCapacityProviderAssociationsCapacityProviderStrategy)(nil)).Elem()
}

func (o ClusterCapacityProviderAssociationsCapacityProviderStrategyArrayOutput) ToClusterCapacityProviderAssociationsCapacityProviderStrategyArrayOutput() ClusterCapacityProviderAssociationsCapacityProviderStrategyArrayOutput {
	return o
}

func (o ClusterCapacityProviderAssociationsCapacityProviderStrategyArrayOutput) ToClusterCapacityProviderAssociationsCapacityProviderStrategyArrayOutputWithContext(ctx context.Context) ClusterCapacityProviderAssociationsCapacityProviderStrategyArrayOutput {
	return o
}

func (o ClusterCapacityProviderAssociationsCapacityProviderStrategyArrayOutput) Index(i pulumi.IntInput) ClusterCapacityProviderAssociationsCapacityProviderStrategyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterCapacityProviderAssociationsCapacityProviderStrategy {
		return vs[0].([]ClusterCapacityProviderAssociationsCapacityProviderStrategy)[vs[1].(int)]
	}).(ClusterCapacityProviderAssociationsCapacityProviderStrategyOutput)
}

// A capacity provider strategy consists of one or more capacity providers along with the `base` and `weight` to assign to them. A capacity provider must be associated with the cluster to be used in a capacity provider strategy. The PutClusterCapacityProviders API is used to associate a capacity provider with a cluster. Only capacity providers with an `ACTIVE` or `UPDATING` status can be used.
type ClusterCapacityProviderStrategyItem struct {
	Base             *int    `pulumi:"base"`
	CapacityProvider *string `pulumi:"capacityProvider"`
	Weight           *int    `pulumi:"weight"`
}

// ClusterCapacityProviderStrategyItemInput is an input type that accepts ClusterCapacityProviderStrategyItemArgs and ClusterCapacityProviderStrategyItemOutput values.
// You can construct a concrete instance of `ClusterCapacityProviderStrategyItemInput` via:
//
//	ClusterCapacityProviderStrategyItemArgs{...}
type ClusterCapacityProviderStrategyItemInput interface {
	pulumi.Input

	ToClusterCapacityProviderStrategyItemOutput() ClusterCapacityProviderStrategyItemOutput
	ToClusterCapacityProviderStrategyItemOutputWithContext(context.Context) ClusterCapacityProviderStrategyItemOutput
}

// A capacity provider strategy consists of one or more capacity providers along with the `base` and `weight` to assign to them. A capacity provider must be associated with the cluster to be used in a capacity provider strategy. The PutClusterCapacityProviders API is used to associate a capacity provider with a cluster. Only capacity providers with an `ACTIVE` or `UPDATING` status can be used.
type ClusterCapacityProviderStrategyItemArgs struct {
	Base             pulumi.IntPtrInput    `pulumi:"base"`
	CapacityProvider pulumi.StringPtrInput `pulumi:"capacityProvider"`
	Weight           pulumi.IntPtrInput    `pulumi:"weight"`
}

func (ClusterCapacityProviderStrategyItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCapacityProviderStrategyItem)(nil)).Elem()
}

func (i ClusterCapacityProviderStrategyItemArgs) ToClusterCapacityProviderStrategyItemOutput() ClusterCapacityProviderStrategyItemOutput {
	return i.ToClusterCapacityProviderStrategyItemOutputWithContext(context.Background())
}

func (i ClusterCapacityProviderStrategyItemArgs) ToClusterCapacityProviderStrategyItemOutputWithContext(ctx context.Context) ClusterCapacityProviderStrategyItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCapacityProviderStrategyItemOutput)
}

// ClusterCapacityProviderStrategyItemArrayInput is an input type that accepts ClusterCapacityProviderStrategyItemArray and ClusterCapacityProviderStrategyItemArrayOutput values.
// You can construct a concrete instance of `ClusterCapacityProviderStrategyItemArrayInput` via:
//
//	ClusterCapacityProviderStrategyItemArray{ ClusterCapacityProviderStrategyItemArgs{...} }
type ClusterCapacityProviderStrategyItemArrayInput interface {
	pulumi.Input

	ToClusterCapacityProviderStrategyItemArrayOutput() ClusterCapacityProviderStrategyItemArrayOutput
	ToClusterCapacityProviderStrategyItemArrayOutputWithContext(context.Context) ClusterCapacityProviderStrategyItemArrayOutput
}

type ClusterCapacityProviderStrategyItemArray []ClusterCapacityProviderStrategyItemInput

func (ClusterCapacityProviderStrategyItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterCapacityProviderStrategyItem)(nil)).Elem()
}

func (i ClusterCapacityProviderStrategyItemArray) ToClusterCapacityProviderStrategyItemArrayOutput() ClusterCapacityProviderStrategyItemArrayOutput {
	return i.ToClusterCapacityProviderStrategyItemArrayOutputWithContext(context.Background())
}

func (i ClusterCapacityProviderStrategyItemArray) ToClusterCapacityProviderStrategyItemArrayOutputWithContext(ctx context.Context) ClusterCapacityProviderStrategyItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCapacityProviderStrategyItemArrayOutput)
}

// A capacity provider strategy consists of one or more capacity providers along with the `base` and `weight` to assign to them. A capacity provider must be associated with the cluster to be used in a capacity provider strategy. The PutClusterCapacityProviders API is used to associate a capacity provider with a cluster. Only capacity providers with an `ACTIVE` or `UPDATING` status can be used.
type ClusterCapacityProviderStrategyItemOutput struct{ *pulumi.OutputState }

func (ClusterCapacityProviderStrategyItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCapacityProviderStrategyItem)(nil)).Elem()
}

func (o ClusterCapacityProviderStrategyItemOutput) ToClusterCapacityProviderStrategyItemOutput() ClusterCapacityProviderStrategyItemOutput {
	return o
}

func (o ClusterCapacityProviderStrategyItemOutput) ToClusterCapacityProviderStrategyItemOutputWithContext(ctx context.Context) ClusterCapacityProviderStrategyItemOutput {
	return o
}

func (o ClusterCapacityProviderStrategyItemOutput) Base() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterCapacityProviderStrategyItem) *int { return v.Base }).(pulumi.IntPtrOutput)
}

func (o ClusterCapacityProviderStrategyItemOutput) CapacityProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterCapacityProviderStrategyItem) *string { return v.CapacityProvider }).(pulumi.StringPtrOutput)
}

func (o ClusterCapacityProviderStrategyItemOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterCapacityProviderStrategyItem) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type ClusterCapacityProviderStrategyItemArrayOutput struct{ *pulumi.OutputState }

func (ClusterCapacityProviderStrategyItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterCapacityProviderStrategyItem)(nil)).Elem()
}

func (o ClusterCapacityProviderStrategyItemArrayOutput) ToClusterCapacityProviderStrategyItemArrayOutput() ClusterCapacityProviderStrategyItemArrayOutput {
	return o
}

func (o ClusterCapacityProviderStrategyItemArrayOutput) ToClusterCapacityProviderStrategyItemArrayOutputWithContext(ctx context.Context) ClusterCapacityProviderStrategyItemArrayOutput {
	return o
}

func (o ClusterCapacityProviderStrategyItemArrayOutput) Index(i pulumi.IntInput) ClusterCapacityProviderStrategyItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterCapacityProviderStrategyItem {
		return vs[0].([]ClusterCapacityProviderStrategyItem)[vs[1].(int)]
	}).(ClusterCapacityProviderStrategyItemOutput)
}

// The configurations to be set at cluster level.
type ClusterConfiguration struct {
	ExecuteCommandConfiguration *ClusterExecuteCommandConfiguration `pulumi:"executeCommandConfiguration"`
}

// ClusterConfigurationInput is an input type that accepts ClusterConfigurationArgs and ClusterConfigurationOutput values.
// You can construct a concrete instance of `ClusterConfigurationInput` via:
//
//	ClusterConfigurationArgs{...}
type ClusterConfigurationInput interface {
	pulumi.Input

	ToClusterConfigurationOutput() ClusterConfigurationOutput
	ToClusterConfigurationOutputWithContext(context.Context) ClusterConfigurationOutput
}

// The configurations to be set at cluster level.
type ClusterConfigurationArgs struct {
	ExecuteCommandConfiguration ClusterExecuteCommandConfigurationPtrInput `pulumi:"executeCommandConfiguration"`
}

func (ClusterConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterConfiguration)(nil)).Elem()
}

func (i ClusterConfigurationArgs) ToClusterConfigurationOutput() ClusterConfigurationOutput {
	return i.ToClusterConfigurationOutputWithContext(context.Background())
}

func (i ClusterConfigurationArgs) ToClusterConfigurationOutputWithContext(ctx context.Context) ClusterConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterConfigurationOutput)
}

func (i ClusterConfigurationArgs) ToClusterConfigurationPtrOutput() ClusterConfigurationPtrOutput {
	return i.ToClusterConfigurationPtrOutputWithContext(context.Background())
}

func (i ClusterConfigurationArgs) ToClusterConfigurationPtrOutputWithContext(ctx context.Context) ClusterConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterConfigurationOutput).ToClusterConfigurationPtrOutputWithContext(ctx)
}

// ClusterConfigurationPtrInput is an input type that accepts ClusterConfigurationArgs, ClusterConfigurationPtr and ClusterConfigurationPtrOutput values.
// You can construct a concrete instance of `ClusterConfigurationPtrInput` via:
//
//	        ClusterConfigurationArgs{...}
//
//	or:
//
//	        nil
type ClusterConfigurationPtrInput interface {
	pulumi.Input

	ToClusterConfigurationPtrOutput() ClusterConfigurationPtrOutput
	ToClusterConfigurationPtrOutputWithContext(context.Context) ClusterConfigurationPtrOutput
}

type clusterConfigurationPtrType ClusterConfigurationArgs

func ClusterConfigurationPtr(v *ClusterConfigurationArgs) ClusterConfigurationPtrInput {
	return (*clusterConfigurationPtrType)(v)
}

func (*clusterConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterConfiguration)(nil)).Elem()
}

func (i *clusterConfigurationPtrType) ToClusterConfigurationPtrOutput() ClusterConfigurationPtrOutput {
	return i.ToClusterConfigurationPtrOutputWithContext(context.Background())
}

func (i *clusterConfigurationPtrType) ToClusterConfigurationPtrOutputWithContext(ctx context.Context) ClusterConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterConfigurationPtrOutput)
}

// The configurations to be set at cluster level.
type ClusterConfigurationOutput struct{ *pulumi.OutputState }

func (ClusterConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterConfiguration)(nil)).Elem()
}

func (o ClusterConfigurationOutput) ToClusterConfigurationOutput() ClusterConfigurationOutput {
	return o
}

func (o ClusterConfigurationOutput) ToClusterConfigurationOutputWithContext(ctx context.Context) ClusterConfigurationOutput {
	return o
}

func (o ClusterConfigurationOutput) ToClusterConfigurationPtrOutput() ClusterConfigurationPtrOutput {
	return o.ToClusterConfigurationPtrOutputWithContext(context.Background())
}

func (o ClusterConfigurationOutput) ToClusterConfigurationPtrOutputWithContext(ctx context.Context) ClusterConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterConfiguration) *ClusterConfiguration {
		return &v
	}).(ClusterConfigurationPtrOutput)
}

func (o ClusterConfigurationOutput) ExecuteCommandConfiguration() ClusterExecuteCommandConfigurationPtrOutput {
	return o.ApplyT(func(v ClusterConfiguration) *ClusterExecuteCommandConfiguration { return v.ExecuteCommandConfiguration }).(ClusterExecuteCommandConfigurationPtrOutput)
}

type ClusterConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ClusterConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterConfiguration)(nil)).Elem()
}

func (o ClusterConfigurationPtrOutput) ToClusterConfigurationPtrOutput() ClusterConfigurationPtrOutput {
	return o
}

func (o ClusterConfigurationPtrOutput) ToClusterConfigurationPtrOutputWithContext(ctx context.Context) ClusterConfigurationPtrOutput {
	return o
}

func (o ClusterConfigurationPtrOutput) Elem() ClusterConfigurationOutput {
	return o.ApplyT(func(v *ClusterConfiguration) ClusterConfiguration {
		if v != nil {
			return *v
		}
		var ret ClusterConfiguration
		return ret
	}).(ClusterConfigurationOutput)
}

func (o ClusterConfigurationPtrOutput) ExecuteCommandConfiguration() ClusterExecuteCommandConfigurationPtrOutput {
	return o.ApplyT(func(v *ClusterConfiguration) *ClusterExecuteCommandConfiguration {
		if v == nil {
			return nil
		}
		return v.ExecuteCommandConfiguration
	}).(ClusterExecuteCommandConfigurationPtrOutput)
}

// The configuration for ExecuteCommand.
type ClusterExecuteCommandConfiguration struct {
	KmsKeyId         *string                                `pulumi:"kmsKeyId"`
	LogConfiguration *ClusterExecuteCommandLogConfiguration `pulumi:"logConfiguration"`
	Logging          *string                                `pulumi:"logging"`
}

// ClusterExecuteCommandConfigurationInput is an input type that accepts ClusterExecuteCommandConfigurationArgs and ClusterExecuteCommandConfigurationOutput values.
// You can construct a concrete instance of `ClusterExecuteCommandConfigurationInput` via:
//
//	ClusterExecuteCommandConfigurationArgs{...}
type ClusterExecuteCommandConfigurationInput interface {
	pulumi.Input

	ToClusterExecuteCommandConfigurationOutput() ClusterExecuteCommandConfigurationOutput
	ToClusterExecuteCommandConfigurationOutputWithContext(context.Context) ClusterExecuteCommandConfigurationOutput
}

// The configuration for ExecuteCommand.
type ClusterExecuteCommandConfigurationArgs struct {
	KmsKeyId         pulumi.StringPtrInput                         `pulumi:"kmsKeyId"`
	LogConfiguration ClusterExecuteCommandLogConfigurationPtrInput `pulumi:"logConfiguration"`
	Logging          pulumi.StringPtrInput                         `pulumi:"logging"`
}

func (ClusterExecuteCommandConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterExecuteCommandConfiguration)(nil)).Elem()
}

func (i ClusterExecuteCommandConfigurationArgs) ToClusterExecuteCommandConfigurationOutput() ClusterExecuteCommandConfigurationOutput {
	return i.ToClusterExecuteCommandConfigurationOutputWithContext(context.Background())
}

func (i ClusterExecuteCommandConfigurationArgs) ToClusterExecuteCommandConfigurationOutputWithContext(ctx context.Context) ClusterExecuteCommandConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterExecuteCommandConfigurationOutput)
}

func (i ClusterExecuteCommandConfigurationArgs) ToClusterExecuteCommandConfigurationPtrOutput() ClusterExecuteCommandConfigurationPtrOutput {
	return i.ToClusterExecuteCommandConfigurationPtrOutputWithContext(context.Background())
}

func (i ClusterExecuteCommandConfigurationArgs) ToClusterExecuteCommandConfigurationPtrOutputWithContext(ctx context.Context) ClusterExecuteCommandConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterExecuteCommandConfigurationOutput).ToClusterExecuteCommandConfigurationPtrOutputWithContext(ctx)
}

// ClusterExecuteCommandConfigurationPtrInput is an input type that accepts ClusterExecuteCommandConfigurationArgs, ClusterExecuteCommandConfigurationPtr and ClusterExecuteCommandConfigurationPtrOutput values.
// You can construct a concrete instance of `ClusterExecuteCommandConfigurationPtrInput` via:
//
//	        ClusterExecuteCommandConfigurationArgs{...}
//
//	or:
//
//	        nil
type ClusterExecuteCommandConfigurationPtrInput interface {
	pulumi.Input

	ToClusterExecuteCommandConfigurationPtrOutput() ClusterExecuteCommandConfigurationPtrOutput
	ToClusterExecuteCommandConfigurationPtrOutputWithContext(context.Context) ClusterExecuteCommandConfigurationPtrOutput
}

type clusterExecuteCommandConfigurationPtrType ClusterExecuteCommandConfigurationArgs

func ClusterExecuteCommandConfigurationPtr(v *ClusterExecuteCommandConfigurationArgs) ClusterExecuteCommandConfigurationPtrInput {
	return (*clusterExecuteCommandConfigurationPtrType)(v)
}

func (*clusterExecuteCommandConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterExecuteCommandConfiguration)(nil)).Elem()
}

func (i *clusterExecuteCommandConfigurationPtrType) ToClusterExecuteCommandConfigurationPtrOutput() ClusterExecuteCommandConfigurationPtrOutput {
	return i.ToClusterExecuteCommandConfigurationPtrOutputWithContext(context.Background())
}

func (i *clusterExecuteCommandConfigurationPtrType) ToClusterExecuteCommandConfigurationPtrOutputWithContext(ctx context.Context) ClusterExecuteCommandConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterExecuteCommandConfigurationPtrOutput)
}

// The configuration for ExecuteCommand.
type ClusterExecuteCommandConfigurationOutput struct{ *pulumi.OutputState }

func (ClusterExecuteCommandConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterExecuteCommandConfiguration)(nil)).Elem()
}

func (o ClusterExecuteCommandConfigurationOutput) ToClusterExecuteCommandConfigurationOutput() ClusterExecuteCommandConfigurationOutput {
	return o
}

func (o ClusterExecuteCommandConfigurationOutput) ToClusterExecuteCommandConfigurationOutputWithContext(ctx context.Context) ClusterExecuteCommandConfigurationOutput {
	return o
}

func (o ClusterExecuteCommandConfigurationOutput) ToClusterExecuteCommandConfigurationPtrOutput() ClusterExecuteCommandConfigurationPtrOutput {
	return o.ToClusterExecuteCommandConfigurationPtrOutputWithContext(context.Background())
}

func (o ClusterExecuteCommandConfigurationOutput) ToClusterExecuteCommandConfigurationPtrOutputWithContext(ctx context.Context) ClusterExecuteCommandConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterExecuteCommandConfiguration) *ClusterExecuteCommandConfiguration {
		return &v
	}).(ClusterExecuteCommandConfigurationPtrOutput)
}

func (o ClusterExecuteCommandConfigurationOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterExecuteCommandConfiguration) *string { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

func (o ClusterExecuteCommandConfigurationOutput) LogConfiguration() ClusterExecuteCommandLogConfigurationPtrOutput {
	return o.ApplyT(func(v ClusterExecuteCommandConfiguration) *ClusterExecuteCommandLogConfiguration {
		return v.LogConfiguration
	}).(ClusterExecuteCommandLogConfigurationPtrOutput)
}

func (o ClusterExecuteCommandConfigurationOutput) Logging() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterExecuteCommandConfiguration) *string { return v.Logging }).(pulumi.StringPtrOutput)
}

type ClusterExecuteCommandConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ClusterExecuteCommandConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterExecuteCommandConfiguration)(nil)).Elem()
}

func (o ClusterExecuteCommandConfigurationPtrOutput) ToClusterExecuteCommandConfigurationPtrOutput() ClusterExecuteCommandConfigurationPtrOutput {
	return o
}

func (o ClusterExecuteCommandConfigurationPtrOutput) ToClusterExecuteCommandConfigurationPtrOutputWithContext(ctx context.Context) ClusterExecuteCommandConfigurationPtrOutput {
	return o
}

func (o ClusterExecuteCommandConfigurationPtrOutput) Elem() ClusterExecuteCommandConfigurationOutput {
	return o.ApplyT(func(v *ClusterExecuteCommandConfiguration) ClusterExecuteCommandConfiguration {
		if v != nil {
			return *v
		}
		var ret ClusterExecuteCommandConfiguration
		return ret
	}).(ClusterExecuteCommandConfigurationOutput)
}

func (o ClusterExecuteCommandConfigurationPtrOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterExecuteCommandConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyId
	}).(pulumi.StringPtrOutput)
}

func (o ClusterExecuteCommandConfigurationPtrOutput) LogConfiguration() ClusterExecuteCommandLogConfigurationPtrOutput {
	return o.ApplyT(func(v *ClusterExecuteCommandConfiguration) *ClusterExecuteCommandLogConfiguration {
		if v == nil {
			return nil
		}
		return v.LogConfiguration
	}).(ClusterExecuteCommandLogConfigurationPtrOutput)
}

func (o ClusterExecuteCommandConfigurationPtrOutput) Logging() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterExecuteCommandConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Logging
	}).(pulumi.StringPtrOutput)
}

// The session logging configuration for ExecuteCommand.
type ClusterExecuteCommandLogConfiguration struct {
	CloudWatchEncryptionEnabled *bool   `pulumi:"cloudWatchEncryptionEnabled"`
	CloudWatchLogGroupName      *string `pulumi:"cloudWatchLogGroupName"`
	S3BucketName                *string `pulumi:"s3BucketName"`
	S3EncryptionEnabled         *bool   `pulumi:"s3EncryptionEnabled"`
	S3KeyPrefix                 *string `pulumi:"s3KeyPrefix"`
}

// ClusterExecuteCommandLogConfigurationInput is an input type that accepts ClusterExecuteCommandLogConfigurationArgs and ClusterExecuteCommandLogConfigurationOutput values.
// You can construct a concrete instance of `ClusterExecuteCommandLogConfigurationInput` via:
//
//	ClusterExecuteCommandLogConfigurationArgs{...}
type ClusterExecuteCommandLogConfigurationInput interface {
	pulumi.Input

	ToClusterExecuteCommandLogConfigurationOutput() ClusterExecuteCommandLogConfigurationOutput
	ToClusterExecuteCommandLogConfigurationOutputWithContext(context.Context) ClusterExecuteCommandLogConfigurationOutput
}

// The session logging configuration for ExecuteCommand.
type ClusterExecuteCommandLogConfigurationArgs struct {
	CloudWatchEncryptionEnabled pulumi.BoolPtrInput   `pulumi:"cloudWatchEncryptionEnabled"`
	CloudWatchLogGroupName      pulumi.StringPtrInput `pulumi:"cloudWatchLogGroupName"`
	S3BucketName                pulumi.StringPtrInput `pulumi:"s3BucketName"`
	S3EncryptionEnabled         pulumi.BoolPtrInput   `pulumi:"s3EncryptionEnabled"`
	S3KeyPrefix                 pulumi.StringPtrInput `pulumi:"s3KeyPrefix"`
}

func (ClusterExecuteCommandLogConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterExecuteCommandLogConfiguration)(nil)).Elem()
}

func (i ClusterExecuteCommandLogConfigurationArgs) ToClusterExecuteCommandLogConfigurationOutput() ClusterExecuteCommandLogConfigurationOutput {
	return i.ToClusterExecuteCommandLogConfigurationOutputWithContext(context.Background())
}

func (i ClusterExecuteCommandLogConfigurationArgs) ToClusterExecuteCommandLogConfigurationOutputWithContext(ctx context.Context) ClusterExecuteCommandLogConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterExecuteCommandLogConfigurationOutput)
}

func (i ClusterExecuteCommandLogConfigurationArgs) ToClusterExecuteCommandLogConfigurationPtrOutput() ClusterExecuteCommandLogConfigurationPtrOutput {
	return i.ToClusterExecuteCommandLogConfigurationPtrOutputWithContext(context.Background())
}

func (i ClusterExecuteCommandLogConfigurationArgs) ToClusterExecuteCommandLogConfigurationPtrOutputWithContext(ctx context.Context) ClusterExecuteCommandLogConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterExecuteCommandLogConfigurationOutput).ToClusterExecuteCommandLogConfigurationPtrOutputWithContext(ctx)
}

// ClusterExecuteCommandLogConfigurationPtrInput is an input type that accepts ClusterExecuteCommandLogConfigurationArgs, ClusterExecuteCommandLogConfigurationPtr and ClusterExecuteCommandLogConfigurationPtrOutput values.
// You can construct a concrete instance of `ClusterExecuteCommandLogConfigurationPtrInput` via:
//
//	        ClusterExecuteCommandLogConfigurationArgs{...}
//
//	or:
//
//	        nil
type ClusterExecuteCommandLogConfigurationPtrInput interface {
	pulumi.Input

	ToClusterExecuteCommandLogConfigurationPtrOutput() ClusterExecuteCommandLogConfigurationPtrOutput
	ToClusterExecuteCommandLogConfigurationPtrOutputWithContext(context.Context) ClusterExecuteCommandLogConfigurationPtrOutput
}

type clusterExecuteCommandLogConfigurationPtrType ClusterExecuteCommandLogConfigurationArgs

func ClusterExecuteCommandLogConfigurationPtr(v *ClusterExecuteCommandLogConfigurationArgs) ClusterExecuteCommandLogConfigurationPtrInput {
	return (*clusterExecuteCommandLogConfigurationPtrType)(v)
}

func (*clusterExecuteCommandLogConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterExecuteCommandLogConfiguration)(nil)).Elem()
}

func (i *clusterExecuteCommandLogConfigurationPtrType) ToClusterExecuteCommandLogConfigurationPtrOutput() ClusterExecuteCommandLogConfigurationPtrOutput {
	return i.ToClusterExecuteCommandLogConfigurationPtrOutputWithContext(context.Background())
}

func (i *clusterExecuteCommandLogConfigurationPtrType) ToClusterExecuteCommandLogConfigurationPtrOutputWithContext(ctx context.Context) ClusterExecuteCommandLogConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterExecuteCommandLogConfigurationPtrOutput)
}

// The session logging configuration for ExecuteCommand.
type ClusterExecuteCommandLogConfigurationOutput struct{ *pulumi.OutputState }

func (ClusterExecuteCommandLogConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterExecuteCommandLogConfiguration)(nil)).Elem()
}

func (o ClusterExecuteCommandLogConfigurationOutput) ToClusterExecuteCommandLogConfigurationOutput() ClusterExecuteCommandLogConfigurationOutput {
	return o
}

func (o ClusterExecuteCommandLogConfigurationOutput) ToClusterExecuteCommandLogConfigurationOutputWithContext(ctx context.Context) ClusterExecuteCommandLogConfigurationOutput {
	return o
}

func (o ClusterExecuteCommandLogConfigurationOutput) ToClusterExecuteCommandLogConfigurationPtrOutput() ClusterExecuteCommandLogConfigurationPtrOutput {
	return o.ToClusterExecuteCommandLogConfigurationPtrOutputWithContext(context.Background())
}

func (o ClusterExecuteCommandLogConfigurationOutput) ToClusterExecuteCommandLogConfigurationPtrOutputWithContext(ctx context.Context) ClusterExecuteCommandLogConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterExecuteCommandLogConfiguration) *ClusterExecuteCommandLogConfiguration {
		return &v
	}).(ClusterExecuteCommandLogConfigurationPtrOutput)
}

func (o ClusterExecuteCommandLogConfigurationOutput) CloudWatchEncryptionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterExecuteCommandLogConfiguration) *bool { return v.CloudWatchEncryptionEnabled }).(pulumi.BoolPtrOutput)
}

func (o ClusterExecuteCommandLogConfigurationOutput) CloudWatchLogGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterExecuteCommandLogConfiguration) *string { return v.CloudWatchLogGroupName }).(pulumi.StringPtrOutput)
}

func (o ClusterExecuteCommandLogConfigurationOutput) S3BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterExecuteCommandLogConfiguration) *string { return v.S3BucketName }).(pulumi.StringPtrOutput)
}

func (o ClusterExecuteCommandLogConfigurationOutput) S3EncryptionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterExecuteCommandLogConfiguration) *bool { return v.S3EncryptionEnabled }).(pulumi.BoolPtrOutput)
}

func (o ClusterExecuteCommandLogConfigurationOutput) S3KeyPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterExecuteCommandLogConfiguration) *string { return v.S3KeyPrefix }).(pulumi.StringPtrOutput)
}

type ClusterExecuteCommandLogConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ClusterExecuteCommandLogConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterExecuteCommandLogConfiguration)(nil)).Elem()
}

func (o ClusterExecuteCommandLogConfigurationPtrOutput) ToClusterExecuteCommandLogConfigurationPtrOutput() ClusterExecuteCommandLogConfigurationPtrOutput {
	return o
}

func (o ClusterExecuteCommandLogConfigurationPtrOutput) ToClusterExecuteCommandLogConfigurationPtrOutputWithContext(ctx context.Context) ClusterExecuteCommandLogConfigurationPtrOutput {
	return o
}

func (o ClusterExecuteCommandLogConfigurationPtrOutput) Elem() ClusterExecuteCommandLogConfigurationOutput {
	return o.ApplyT(func(v *ClusterExecuteCommandLogConfiguration) ClusterExecuteCommandLogConfiguration {
		if v != nil {
			return *v
		}
		var ret ClusterExecuteCommandLogConfiguration
		return ret
	}).(ClusterExecuteCommandLogConfigurationOutput)
}

func (o ClusterExecuteCommandLogConfigurationPtrOutput) CloudWatchEncryptionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterExecuteCommandLogConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.CloudWatchEncryptionEnabled
	}).(pulumi.BoolPtrOutput)
}

func (o ClusterExecuteCommandLogConfigurationPtrOutput) CloudWatchLogGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterExecuteCommandLogConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.CloudWatchLogGroupName
	}).(pulumi.StringPtrOutput)
}

func (o ClusterExecuteCommandLogConfigurationPtrOutput) S3BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterExecuteCommandLogConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.S3BucketName
	}).(pulumi.StringPtrOutput)
}

func (o ClusterExecuteCommandLogConfigurationPtrOutput) S3EncryptionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterExecuteCommandLogConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.S3EncryptionEnabled
	}).(pulumi.BoolPtrOutput)
}

func (o ClusterExecuteCommandLogConfigurationPtrOutput) S3KeyPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterExecuteCommandLogConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.S3KeyPrefix
	}).(pulumi.StringPtrOutput)
}

// Service Connect Configuration default for all services or tasks within this cluster
type ClusterServiceConnectDefaults struct {
	// Service Connect Namespace Name or ARN default for all services or tasks within this cluster
	Namespace *string `pulumi:"namespace"`
}

// ClusterServiceConnectDefaultsInput is an input type that accepts ClusterServiceConnectDefaultsArgs and ClusterServiceConnectDefaultsOutput values.
// You can construct a concrete instance of `ClusterServiceConnectDefaultsInput` via:
//
//	ClusterServiceConnectDefaultsArgs{...}
type ClusterServiceConnectDefaultsInput interface {
	pulumi.Input

	ToClusterServiceConnectDefaultsOutput() ClusterServiceConnectDefaultsOutput
	ToClusterServiceConnectDefaultsOutputWithContext(context.Context) ClusterServiceConnectDefaultsOutput
}

// Service Connect Configuration default for all services or tasks within this cluster
type ClusterServiceConnectDefaultsArgs struct {
	// Service Connect Namespace Name or ARN default for all services or tasks within this cluster
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ClusterServiceConnectDefaultsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterServiceConnectDefaults)(nil)).Elem()
}

func (i ClusterServiceConnectDefaultsArgs) ToClusterServiceConnectDefaultsOutput() ClusterServiceConnectDefaultsOutput {
	return i.ToClusterServiceConnectDefaultsOutputWithContext(context.Background())
}

func (i ClusterServiceConnectDefaultsArgs) ToClusterServiceConnectDefaultsOutputWithContext(ctx context.Context) ClusterServiceConnectDefaultsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterServiceConnectDefaultsOutput)
}

func (i ClusterServiceConnectDefaultsArgs) ToClusterServiceConnectDefaultsPtrOutput() ClusterServiceConnectDefaultsPtrOutput {
	return i.ToClusterServiceConnectDefaultsPtrOutputWithContext(context.Background())
}

func (i ClusterServiceConnectDefaultsArgs) ToClusterServiceConnectDefaultsPtrOutputWithContext(ctx context.Context) ClusterServiceConnectDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterServiceConnectDefaultsOutput).ToClusterServiceConnectDefaultsPtrOutputWithContext(ctx)
}

// ClusterServiceConnectDefaultsPtrInput is an input type that accepts ClusterServiceConnectDefaultsArgs, ClusterServiceConnectDefaultsPtr and ClusterServiceConnectDefaultsPtrOutput values.
// You can construct a concrete instance of `ClusterServiceConnectDefaultsPtrInput` via:
//
//	        ClusterServiceConnectDefaultsArgs{...}
//
//	or:
//
//	        nil
type ClusterServiceConnectDefaultsPtrInput interface {
	pulumi.Input

	ToClusterServiceConnectDefaultsPtrOutput() ClusterServiceConnectDefaultsPtrOutput
	ToClusterServiceConnectDefaultsPtrOutputWithContext(context.Context) ClusterServiceConnectDefaultsPtrOutput
}

type clusterServiceConnectDefaultsPtrType ClusterServiceConnectDefaultsArgs

func ClusterServiceConnectDefaultsPtr(v *ClusterServiceConnectDefaultsArgs) ClusterServiceConnectDefaultsPtrInput {
	return (*clusterServiceConnectDefaultsPtrType)(v)
}

func (*clusterServiceConnectDefaultsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterServiceConnectDefaults)(nil)).Elem()
}

func (i *clusterServiceConnectDefaultsPtrType) ToClusterServiceConnectDefaultsPtrOutput() ClusterServiceConnectDefaultsPtrOutput {
	return i.ToClusterServiceConnectDefaultsPtrOutputWithContext(context.Background())
}

func (i *clusterServiceConnectDefaultsPtrType) ToClusterServiceConnectDefaultsPtrOutputWithContext(ctx context.Context) ClusterServiceConnectDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterServiceConnectDefaultsPtrOutput)
}

// Service Connect Configuration default for all services or tasks within this cluster
type ClusterServiceConnectDefaultsOutput struct{ *pulumi.OutputState }

func (ClusterServiceConnectDefaultsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterServiceConnectDefaults)(nil)).Elem()
}

func (o ClusterServiceConnectDefaultsOutput) ToClusterServiceConnectDefaultsOutput() ClusterServiceConnectDefaultsOutput {
	return o
}

func (o ClusterServiceConnectDefaultsOutput) ToClusterServiceConnectDefaultsOutputWithContext(ctx context.Context) ClusterServiceConnectDefaultsOutput {
	return o
}

func (o ClusterServiceConnectDefaultsOutput) ToClusterServiceConnectDefaultsPtrOutput() ClusterServiceConnectDefaultsPtrOutput {
	return o.ToClusterServiceConnectDefaultsPtrOutputWithContext(context.Background())
}

func (o ClusterServiceConnectDefaultsOutput) ToClusterServiceConnectDefaultsPtrOutputWithContext(ctx context.Context) ClusterServiceConnectDefaultsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterServiceConnectDefaults) *ClusterServiceConnectDefaults {
		return &v
	}).(ClusterServiceConnectDefaultsPtrOutput)
}

// Service Connect Namespace Name or ARN default for all services or tasks within this cluster
func (o ClusterServiceConnectDefaultsOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterServiceConnectDefaults) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ClusterServiceConnectDefaultsPtrOutput struct{ *pulumi.OutputState }

func (ClusterServiceConnectDefaultsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterServiceConnectDefaults)(nil)).Elem()
}

func (o ClusterServiceConnectDefaultsPtrOutput) ToClusterServiceConnectDefaultsPtrOutput() ClusterServiceConnectDefaultsPtrOutput {
	return o
}

func (o ClusterServiceConnectDefaultsPtrOutput) ToClusterServiceConnectDefaultsPtrOutputWithContext(ctx context.Context) ClusterServiceConnectDefaultsPtrOutput {
	return o
}

func (o ClusterServiceConnectDefaultsPtrOutput) Elem() ClusterServiceConnectDefaultsOutput {
	return o.ApplyT(func(v *ClusterServiceConnectDefaults) ClusterServiceConnectDefaults {
		if v != nil {
			return *v
		}
		var ret ClusterServiceConnectDefaults
		return ret
	}).(ClusterServiceConnectDefaultsOutput)
}

// Service Connect Namespace Name or ARN default for all services or tasks within this cluster
func (o ClusterServiceConnectDefaultsPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterServiceConnectDefaults) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The setting to use when creating a cluster. This parameter is used to enable CloudWatch Container Insights for a cluster. If this value is specified, it will override the containerInsights value set with PutAccountSetting or PutAccountSettingDefault.
type ClusterSettings struct {
	Name  *string `pulumi:"name"`
	Value *string `pulumi:"value"`
}

// ClusterSettingsInput is an input type that accepts ClusterSettingsArgs and ClusterSettingsOutput values.
// You can construct a concrete instance of `ClusterSettingsInput` via:
//
//	ClusterSettingsArgs{...}
type ClusterSettingsInput interface {
	pulumi.Input

	ToClusterSettingsOutput() ClusterSettingsOutput
	ToClusterSettingsOutputWithContext(context.Context) ClusterSettingsOutput
}

// The setting to use when creating a cluster. This parameter is used to enable CloudWatch Container Insights for a cluster. If this value is specified, it will override the containerInsights value set with PutAccountSetting or PutAccountSettingDefault.
type ClusterSettingsArgs struct {
	Name  pulumi.StringPtrInput `pulumi:"name"`
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ClusterSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterSettings)(nil)).Elem()
}

func (i ClusterSettingsArgs) ToClusterSettingsOutput() ClusterSettingsOutput {
	return i.ToClusterSettingsOutputWithContext(context.Background())
}

func (i ClusterSettingsArgs) ToClusterSettingsOutputWithContext(ctx context.Context) ClusterSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSettingsOutput)
}

// ClusterSettingsArrayInput is an input type that accepts ClusterSettingsArray and ClusterSettingsArrayOutput values.
// You can construct a concrete instance of `ClusterSettingsArrayInput` via:
//
//	ClusterSettingsArray{ ClusterSettingsArgs{...} }
type ClusterSettingsArrayInput interface {
	pulumi.Input

	ToClusterSettingsArrayOutput() ClusterSettingsArrayOutput
	ToClusterSettingsArrayOutputWithContext(context.Context) ClusterSettingsArrayOutput
}

type ClusterSettingsArray []ClusterSettingsInput

func (ClusterSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterSettings)(nil)).Elem()
}

func (i ClusterSettingsArray) ToClusterSettingsArrayOutput() ClusterSettingsArrayOutput {
	return i.ToClusterSettingsArrayOutputWithContext(context.Background())
}

func (i ClusterSettingsArray) ToClusterSettingsArrayOutputWithContext(ctx context.Context) ClusterSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSettingsArrayOutput)
}

// The setting to use when creating a cluster. This parameter is used to enable CloudWatch Container Insights for a cluster. If this value is specified, it will override the containerInsights value set with PutAccountSetting or PutAccountSettingDefault.
type ClusterSettingsOutput struct{ *pulumi.OutputState }

func (ClusterSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterSettings)(nil)).Elem()
}

func (o ClusterSettingsOutput) ToClusterSettingsOutput() ClusterSettingsOutput {
	return o
}

func (o ClusterSettingsOutput) ToClusterSettingsOutputWithContext(ctx context.Context) ClusterSettingsOutput {
	return o
}

func (o ClusterSettingsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterSettings) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ClusterSettingsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterSettings) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ClusterSettingsArrayOutput struct{ *pulumi.OutputState }

func (ClusterSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterSettings)(nil)).Elem()
}

func (o ClusterSettingsArrayOutput) ToClusterSettingsArrayOutput() ClusterSettingsArrayOutput {
	return o
}

func (o ClusterSettingsArrayOutput) ToClusterSettingsArrayOutputWithContext(ctx context.Context) ClusterSettingsArrayOutput {
	return o
}

func (o ClusterSettingsArrayOutput) Index(i pulumi.IntInput) ClusterSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterSettings {
		return vs[0].([]ClusterSettings)[vs[1].(int)]
	}).(ClusterSettingsOutput)
}

// The metadata that you apply to the cluster to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define.
type ClusterTag struct {
	Key   *string `pulumi:"key"`
	Value *string `pulumi:"value"`
}

type ServiceAwsVpcConfiguration struct {
	AssignPublicIp *ServiceAwsVpcConfigurationAssignPublicIp `pulumi:"assignPublicIp"`
	SecurityGroups []string                                  `pulumi:"securityGroups"`
	Subnets        []string                                  `pulumi:"subnets"`
}

// ServiceAwsVpcConfigurationInput is an input type that accepts ServiceAwsVpcConfigurationArgs and ServiceAwsVpcConfigurationOutput values.
// You can construct a concrete instance of `ServiceAwsVpcConfigurationInput` via:
//
//	ServiceAwsVpcConfigurationArgs{...}
type ServiceAwsVpcConfigurationInput interface {
	pulumi.Input

	ToServiceAwsVpcConfigurationOutput() ServiceAwsVpcConfigurationOutput
	ToServiceAwsVpcConfigurationOutputWithContext(context.Context) ServiceAwsVpcConfigurationOutput
}

type ServiceAwsVpcConfigurationArgs struct {
	AssignPublicIp ServiceAwsVpcConfigurationAssignPublicIpPtrInput `pulumi:"assignPublicIp"`
	SecurityGroups pulumi.StringArrayInput                          `pulumi:"securityGroups"`
	Subnets        pulumi.StringArrayInput                          `pulumi:"subnets"`
}

func (ServiceAwsVpcConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAwsVpcConfiguration)(nil)).Elem()
}

func (i ServiceAwsVpcConfigurationArgs) ToServiceAwsVpcConfigurationOutput() ServiceAwsVpcConfigurationOutput {
	return i.ToServiceAwsVpcConfigurationOutputWithContext(context.Background())
}

func (i ServiceAwsVpcConfigurationArgs) ToServiceAwsVpcConfigurationOutputWithContext(ctx context.Context) ServiceAwsVpcConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAwsVpcConfigurationOutput)
}

func (i ServiceAwsVpcConfigurationArgs) ToServiceAwsVpcConfigurationPtrOutput() ServiceAwsVpcConfigurationPtrOutput {
	return i.ToServiceAwsVpcConfigurationPtrOutputWithContext(context.Background())
}

func (i ServiceAwsVpcConfigurationArgs) ToServiceAwsVpcConfigurationPtrOutputWithContext(ctx context.Context) ServiceAwsVpcConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAwsVpcConfigurationOutput).ToServiceAwsVpcConfigurationPtrOutputWithContext(ctx)
}

// ServiceAwsVpcConfigurationPtrInput is an input type that accepts ServiceAwsVpcConfigurationArgs, ServiceAwsVpcConfigurationPtr and ServiceAwsVpcConfigurationPtrOutput values.
// You can construct a concrete instance of `ServiceAwsVpcConfigurationPtrInput` via:
//
//	        ServiceAwsVpcConfigurationArgs{...}
//
//	or:
//
//	        nil
type ServiceAwsVpcConfigurationPtrInput interface {
	pulumi.Input

	ToServiceAwsVpcConfigurationPtrOutput() ServiceAwsVpcConfigurationPtrOutput
	ToServiceAwsVpcConfigurationPtrOutputWithContext(context.Context) ServiceAwsVpcConfigurationPtrOutput
}

type serviceAwsVpcConfigurationPtrType ServiceAwsVpcConfigurationArgs

func ServiceAwsVpcConfigurationPtr(v *ServiceAwsVpcConfigurationArgs) ServiceAwsVpcConfigurationPtrInput {
	return (*serviceAwsVpcConfigurationPtrType)(v)
}

func (*serviceAwsVpcConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAwsVpcConfiguration)(nil)).Elem()
}

func (i *serviceAwsVpcConfigurationPtrType) ToServiceAwsVpcConfigurationPtrOutput() ServiceAwsVpcConfigurationPtrOutput {
	return i.ToServiceAwsVpcConfigurationPtrOutputWithContext(context.Background())
}

func (i *serviceAwsVpcConfigurationPtrType) ToServiceAwsVpcConfigurationPtrOutputWithContext(ctx context.Context) ServiceAwsVpcConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAwsVpcConfigurationPtrOutput)
}

type ServiceAwsVpcConfigurationOutput struct{ *pulumi.OutputState }

func (ServiceAwsVpcConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAwsVpcConfiguration)(nil)).Elem()
}

func (o ServiceAwsVpcConfigurationOutput) ToServiceAwsVpcConfigurationOutput() ServiceAwsVpcConfigurationOutput {
	return o
}

func (o ServiceAwsVpcConfigurationOutput) ToServiceAwsVpcConfigurationOutputWithContext(ctx context.Context) ServiceAwsVpcConfigurationOutput {
	return o
}

func (o ServiceAwsVpcConfigurationOutput) ToServiceAwsVpcConfigurationPtrOutput() ServiceAwsVpcConfigurationPtrOutput {
	return o.ToServiceAwsVpcConfigurationPtrOutputWithContext(context.Background())
}

func (o ServiceAwsVpcConfigurationOutput) ToServiceAwsVpcConfigurationPtrOutputWithContext(ctx context.Context) ServiceAwsVpcConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceAwsVpcConfiguration) *ServiceAwsVpcConfiguration {
		return &v
	}).(ServiceAwsVpcConfigurationPtrOutput)
}

func (o ServiceAwsVpcConfigurationOutput) AssignPublicIp() ServiceAwsVpcConfigurationAssignPublicIpPtrOutput {
	return o.ApplyT(func(v ServiceAwsVpcConfiguration) *ServiceAwsVpcConfigurationAssignPublicIp { return v.AssignPublicIp }).(ServiceAwsVpcConfigurationAssignPublicIpPtrOutput)
}

func (o ServiceAwsVpcConfigurationOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceAwsVpcConfiguration) []string { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

func (o ServiceAwsVpcConfigurationOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceAwsVpcConfiguration) []string { return v.Subnets }).(pulumi.StringArrayOutput)
}

type ServiceAwsVpcConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ServiceAwsVpcConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAwsVpcConfiguration)(nil)).Elem()
}

func (o ServiceAwsVpcConfigurationPtrOutput) ToServiceAwsVpcConfigurationPtrOutput() ServiceAwsVpcConfigurationPtrOutput {
	return o
}

func (o ServiceAwsVpcConfigurationPtrOutput) ToServiceAwsVpcConfigurationPtrOutputWithContext(ctx context.Context) ServiceAwsVpcConfigurationPtrOutput {
	return o
}

func (o ServiceAwsVpcConfigurationPtrOutput) Elem() ServiceAwsVpcConfigurationOutput {
	return o.ApplyT(func(v *ServiceAwsVpcConfiguration) ServiceAwsVpcConfiguration {
		if v != nil {
			return *v
		}
		var ret ServiceAwsVpcConfiguration
		return ret
	}).(ServiceAwsVpcConfigurationOutput)
}

func (o ServiceAwsVpcConfigurationPtrOutput) AssignPublicIp() ServiceAwsVpcConfigurationAssignPublicIpPtrOutput {
	return o.ApplyT(func(v *ServiceAwsVpcConfiguration) *ServiceAwsVpcConfigurationAssignPublicIp {
		if v == nil {
			return nil
		}
		return v.AssignPublicIp
	}).(ServiceAwsVpcConfigurationAssignPublicIpPtrOutput)
}

func (o ServiceAwsVpcConfigurationPtrOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceAwsVpcConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.SecurityGroups
	}).(pulumi.StringArrayOutput)
}

func (o ServiceAwsVpcConfigurationPtrOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceAwsVpcConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.Subnets
	}).(pulumi.StringArrayOutput)
}

type ServiceCapacityProviderStrategyItem struct {
	Base             *int    `pulumi:"base"`
	CapacityProvider *string `pulumi:"capacityProvider"`
	Weight           *int    `pulumi:"weight"`
}

// ServiceCapacityProviderStrategyItemInput is an input type that accepts ServiceCapacityProviderStrategyItemArgs and ServiceCapacityProviderStrategyItemOutput values.
// You can construct a concrete instance of `ServiceCapacityProviderStrategyItemInput` via:
//
//	ServiceCapacityProviderStrategyItemArgs{...}
type ServiceCapacityProviderStrategyItemInput interface {
	pulumi.Input

	ToServiceCapacityProviderStrategyItemOutput() ServiceCapacityProviderStrategyItemOutput
	ToServiceCapacityProviderStrategyItemOutputWithContext(context.Context) ServiceCapacityProviderStrategyItemOutput
}

type ServiceCapacityProviderStrategyItemArgs struct {
	Base             pulumi.IntPtrInput    `pulumi:"base"`
	CapacityProvider pulumi.StringPtrInput `pulumi:"capacityProvider"`
	Weight           pulumi.IntPtrInput    `pulumi:"weight"`
}

func (ServiceCapacityProviderStrategyItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceCapacityProviderStrategyItem)(nil)).Elem()
}

func (i ServiceCapacityProviderStrategyItemArgs) ToServiceCapacityProviderStrategyItemOutput() ServiceCapacityProviderStrategyItemOutput {
	return i.ToServiceCapacityProviderStrategyItemOutputWithContext(context.Background())
}

func (i ServiceCapacityProviderStrategyItemArgs) ToServiceCapacityProviderStrategyItemOutputWithContext(ctx context.Context) ServiceCapacityProviderStrategyItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceCapacityProviderStrategyItemOutput)
}

// ServiceCapacityProviderStrategyItemArrayInput is an input type that accepts ServiceCapacityProviderStrategyItemArray and ServiceCapacityProviderStrategyItemArrayOutput values.
// You can construct a concrete instance of `ServiceCapacityProviderStrategyItemArrayInput` via:
//
//	ServiceCapacityProviderStrategyItemArray{ ServiceCapacityProviderStrategyItemArgs{...} }
type ServiceCapacityProviderStrategyItemArrayInput interface {
	pulumi.Input

	ToServiceCapacityProviderStrategyItemArrayOutput() ServiceCapacityProviderStrategyItemArrayOutput
	ToServiceCapacityProviderStrategyItemArrayOutputWithContext(context.Context) ServiceCapacityProviderStrategyItemArrayOutput
}

type ServiceCapacityProviderStrategyItemArray []ServiceCapacityProviderStrategyItemInput

func (ServiceCapacityProviderStrategyItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceCapacityProviderStrategyItem)(nil)).Elem()
}

func (i ServiceCapacityProviderStrategyItemArray) ToServiceCapacityProviderStrategyItemArrayOutput() ServiceCapacityProviderStrategyItemArrayOutput {
	return i.ToServiceCapacityProviderStrategyItemArrayOutputWithContext(context.Background())
}

func (i ServiceCapacityProviderStrategyItemArray) ToServiceCapacityProviderStrategyItemArrayOutputWithContext(ctx context.Context) ServiceCapacityProviderStrategyItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceCapacityProviderStrategyItemArrayOutput)
}

type ServiceCapacityProviderStrategyItemOutput struct{ *pulumi.OutputState }

func (ServiceCapacityProviderStrategyItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceCapacityProviderStrategyItem)(nil)).Elem()
}

func (o ServiceCapacityProviderStrategyItemOutput) ToServiceCapacityProviderStrategyItemOutput() ServiceCapacityProviderStrategyItemOutput {
	return o
}

func (o ServiceCapacityProviderStrategyItemOutput) ToServiceCapacityProviderStrategyItemOutputWithContext(ctx context.Context) ServiceCapacityProviderStrategyItemOutput {
	return o
}

func (o ServiceCapacityProviderStrategyItemOutput) Base() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceCapacityProviderStrategyItem) *int { return v.Base }).(pulumi.IntPtrOutput)
}

func (o ServiceCapacityProviderStrategyItemOutput) CapacityProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceCapacityProviderStrategyItem) *string { return v.CapacityProvider }).(pulumi.StringPtrOutput)
}

func (o ServiceCapacityProviderStrategyItemOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceCapacityProviderStrategyItem) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type ServiceCapacityProviderStrategyItemArrayOutput struct{ *pulumi.OutputState }

func (ServiceCapacityProviderStrategyItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceCapacityProviderStrategyItem)(nil)).Elem()
}

func (o ServiceCapacityProviderStrategyItemArrayOutput) ToServiceCapacityProviderStrategyItemArrayOutput() ServiceCapacityProviderStrategyItemArrayOutput {
	return o
}

func (o ServiceCapacityProviderStrategyItemArrayOutput) ToServiceCapacityProviderStrategyItemArrayOutputWithContext(ctx context.Context) ServiceCapacityProviderStrategyItemArrayOutput {
	return o
}

func (o ServiceCapacityProviderStrategyItemArrayOutput) Index(i pulumi.IntInput) ServiceCapacityProviderStrategyItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceCapacityProviderStrategyItem {
		return vs[0].([]ServiceCapacityProviderStrategyItem)[vs[1].(int)]
	}).(ServiceCapacityProviderStrategyItemOutput)
}

type ServiceConnectClientAlias struct {
	DnsName *string `pulumi:"dnsName"`
	Port    int     `pulumi:"port"`
}

// ServiceConnectClientAliasInput is an input type that accepts ServiceConnectClientAliasArgs and ServiceConnectClientAliasOutput values.
// You can construct a concrete instance of `ServiceConnectClientAliasInput` via:
//
//	ServiceConnectClientAliasArgs{...}
type ServiceConnectClientAliasInput interface {
	pulumi.Input

	ToServiceConnectClientAliasOutput() ServiceConnectClientAliasOutput
	ToServiceConnectClientAliasOutputWithContext(context.Context) ServiceConnectClientAliasOutput
}

type ServiceConnectClientAliasArgs struct {
	DnsName pulumi.StringPtrInput `pulumi:"dnsName"`
	Port    pulumi.IntInput       `pulumi:"port"`
}

func (ServiceConnectClientAliasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceConnectClientAlias)(nil)).Elem()
}

func (i ServiceConnectClientAliasArgs) ToServiceConnectClientAliasOutput() ServiceConnectClientAliasOutput {
	return i.ToServiceConnectClientAliasOutputWithContext(context.Background())
}

func (i ServiceConnectClientAliasArgs) ToServiceConnectClientAliasOutputWithContext(ctx context.Context) ServiceConnectClientAliasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConnectClientAliasOutput)
}

// ServiceConnectClientAliasArrayInput is an input type that accepts ServiceConnectClientAliasArray and ServiceConnectClientAliasArrayOutput values.
// You can construct a concrete instance of `ServiceConnectClientAliasArrayInput` via:
//
//	ServiceConnectClientAliasArray{ ServiceConnectClientAliasArgs{...} }
type ServiceConnectClientAliasArrayInput interface {
	pulumi.Input

	ToServiceConnectClientAliasArrayOutput() ServiceConnectClientAliasArrayOutput
	ToServiceConnectClientAliasArrayOutputWithContext(context.Context) ServiceConnectClientAliasArrayOutput
}

type ServiceConnectClientAliasArray []ServiceConnectClientAliasInput

func (ServiceConnectClientAliasArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceConnectClientAlias)(nil)).Elem()
}

func (i ServiceConnectClientAliasArray) ToServiceConnectClientAliasArrayOutput() ServiceConnectClientAliasArrayOutput {
	return i.ToServiceConnectClientAliasArrayOutputWithContext(context.Background())
}

func (i ServiceConnectClientAliasArray) ToServiceConnectClientAliasArrayOutputWithContext(ctx context.Context) ServiceConnectClientAliasArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConnectClientAliasArrayOutput)
}

type ServiceConnectClientAliasOutput struct{ *pulumi.OutputState }

func (ServiceConnectClientAliasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceConnectClientAlias)(nil)).Elem()
}

func (o ServiceConnectClientAliasOutput) ToServiceConnectClientAliasOutput() ServiceConnectClientAliasOutput {
	return o
}

func (o ServiceConnectClientAliasOutput) ToServiceConnectClientAliasOutputWithContext(ctx context.Context) ServiceConnectClientAliasOutput {
	return o
}

func (o ServiceConnectClientAliasOutput) DnsName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceConnectClientAlias) *string { return v.DnsName }).(pulumi.StringPtrOutput)
}

func (o ServiceConnectClientAliasOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ServiceConnectClientAlias) int { return v.Port }).(pulumi.IntOutput)
}

type ServiceConnectClientAliasArrayOutput struct{ *pulumi.OutputState }

func (ServiceConnectClientAliasArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceConnectClientAlias)(nil)).Elem()
}

func (o ServiceConnectClientAliasArrayOutput) ToServiceConnectClientAliasArrayOutput() ServiceConnectClientAliasArrayOutput {
	return o
}

func (o ServiceConnectClientAliasArrayOutput) ToServiceConnectClientAliasArrayOutputWithContext(ctx context.Context) ServiceConnectClientAliasArrayOutput {
	return o
}

func (o ServiceConnectClientAliasArrayOutput) Index(i pulumi.IntInput) ServiceConnectClientAliasOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceConnectClientAlias {
		return vs[0].([]ServiceConnectClientAlias)[vs[1].(int)]
	}).(ServiceConnectClientAliasOutput)
}

type ServiceConnectConfiguration struct {
	Enabled          bool                     `pulumi:"enabled"`
	LogConfiguration *ServiceLogConfiguration `pulumi:"logConfiguration"`
	Namespace        *string                  `pulumi:"namespace"`
	Services         []ServiceConnectService  `pulumi:"services"`
}

// ServiceConnectConfigurationInput is an input type that accepts ServiceConnectConfigurationArgs and ServiceConnectConfigurationOutput values.
// You can construct a concrete instance of `ServiceConnectConfigurationInput` via:
//
//	ServiceConnectConfigurationArgs{...}
type ServiceConnectConfigurationInput interface {
	pulumi.Input

	ToServiceConnectConfigurationOutput() ServiceConnectConfigurationOutput
	ToServiceConnectConfigurationOutputWithContext(context.Context) ServiceConnectConfigurationOutput
}

type ServiceConnectConfigurationArgs struct {
	Enabled          pulumi.BoolInput                `pulumi:"enabled"`
	LogConfiguration ServiceLogConfigurationPtrInput `pulumi:"logConfiguration"`
	Namespace        pulumi.StringPtrInput           `pulumi:"namespace"`
	Services         ServiceConnectServiceArrayInput `pulumi:"services"`
}

func (ServiceConnectConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceConnectConfiguration)(nil)).Elem()
}

func (i ServiceConnectConfigurationArgs) ToServiceConnectConfigurationOutput() ServiceConnectConfigurationOutput {
	return i.ToServiceConnectConfigurationOutputWithContext(context.Background())
}

func (i ServiceConnectConfigurationArgs) ToServiceConnectConfigurationOutputWithContext(ctx context.Context) ServiceConnectConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConnectConfigurationOutput)
}

func (i ServiceConnectConfigurationArgs) ToServiceConnectConfigurationPtrOutput() ServiceConnectConfigurationPtrOutput {
	return i.ToServiceConnectConfigurationPtrOutputWithContext(context.Background())
}

func (i ServiceConnectConfigurationArgs) ToServiceConnectConfigurationPtrOutputWithContext(ctx context.Context) ServiceConnectConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConnectConfigurationOutput).ToServiceConnectConfigurationPtrOutputWithContext(ctx)
}

// ServiceConnectConfigurationPtrInput is an input type that accepts ServiceConnectConfigurationArgs, ServiceConnectConfigurationPtr and ServiceConnectConfigurationPtrOutput values.
// You can construct a concrete instance of `ServiceConnectConfigurationPtrInput` via:
//
//	        ServiceConnectConfigurationArgs{...}
//
//	or:
//
//	        nil
type ServiceConnectConfigurationPtrInput interface {
	pulumi.Input

	ToServiceConnectConfigurationPtrOutput() ServiceConnectConfigurationPtrOutput
	ToServiceConnectConfigurationPtrOutputWithContext(context.Context) ServiceConnectConfigurationPtrOutput
}

type serviceConnectConfigurationPtrType ServiceConnectConfigurationArgs

func ServiceConnectConfigurationPtr(v *ServiceConnectConfigurationArgs) ServiceConnectConfigurationPtrInput {
	return (*serviceConnectConfigurationPtrType)(v)
}

func (*serviceConnectConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceConnectConfiguration)(nil)).Elem()
}

func (i *serviceConnectConfigurationPtrType) ToServiceConnectConfigurationPtrOutput() ServiceConnectConfigurationPtrOutput {
	return i.ToServiceConnectConfigurationPtrOutputWithContext(context.Background())
}

func (i *serviceConnectConfigurationPtrType) ToServiceConnectConfigurationPtrOutputWithContext(ctx context.Context) ServiceConnectConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConnectConfigurationPtrOutput)
}

type ServiceConnectConfigurationOutput struct{ *pulumi.OutputState }

func (ServiceConnectConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceConnectConfiguration)(nil)).Elem()
}

func (o ServiceConnectConfigurationOutput) ToServiceConnectConfigurationOutput() ServiceConnectConfigurationOutput {
	return o
}

func (o ServiceConnectConfigurationOutput) ToServiceConnectConfigurationOutputWithContext(ctx context.Context) ServiceConnectConfigurationOutput {
	return o
}

func (o ServiceConnectConfigurationOutput) ToServiceConnectConfigurationPtrOutput() ServiceConnectConfigurationPtrOutput {
	return o.ToServiceConnectConfigurationPtrOutputWithContext(context.Background())
}

func (o ServiceConnectConfigurationOutput) ToServiceConnectConfigurationPtrOutputWithContext(ctx context.Context) ServiceConnectConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceConnectConfiguration) *ServiceConnectConfiguration {
		return &v
	}).(ServiceConnectConfigurationPtrOutput)
}

func (o ServiceConnectConfigurationOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ServiceConnectConfiguration) bool { return v.Enabled }).(pulumi.BoolOutput)
}

func (o ServiceConnectConfigurationOutput) LogConfiguration() ServiceLogConfigurationPtrOutput {
	return o.ApplyT(func(v ServiceConnectConfiguration) *ServiceLogConfiguration { return v.LogConfiguration }).(ServiceLogConfigurationPtrOutput)
}

func (o ServiceConnectConfigurationOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceConnectConfiguration) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

func (o ServiceConnectConfigurationOutput) Services() ServiceConnectServiceArrayOutput {
	return o.ApplyT(func(v ServiceConnectConfiguration) []ServiceConnectService { return v.Services }).(ServiceConnectServiceArrayOutput)
}

type ServiceConnectConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ServiceConnectConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceConnectConfiguration)(nil)).Elem()
}

func (o ServiceConnectConfigurationPtrOutput) ToServiceConnectConfigurationPtrOutput() ServiceConnectConfigurationPtrOutput {
	return o
}

func (o ServiceConnectConfigurationPtrOutput) ToServiceConnectConfigurationPtrOutputWithContext(ctx context.Context) ServiceConnectConfigurationPtrOutput {
	return o
}

func (o ServiceConnectConfigurationPtrOutput) Elem() ServiceConnectConfigurationOutput {
	return o.ApplyT(func(v *ServiceConnectConfiguration) ServiceConnectConfiguration {
		if v != nil {
			return *v
		}
		var ret ServiceConnectConfiguration
		return ret
	}).(ServiceConnectConfigurationOutput)
}

func (o ServiceConnectConfigurationPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceConnectConfiguration) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o ServiceConnectConfigurationPtrOutput) LogConfiguration() ServiceLogConfigurationPtrOutput {
	return o.ApplyT(func(v *ServiceConnectConfiguration) *ServiceLogConfiguration {
		if v == nil {
			return nil
		}
		return v.LogConfiguration
	}).(ServiceLogConfigurationPtrOutput)
}

func (o ServiceConnectConfigurationPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceConnectConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

func (o ServiceConnectConfigurationPtrOutput) Services() ServiceConnectServiceArrayOutput {
	return o.ApplyT(func(v *ServiceConnectConfiguration) []ServiceConnectService {
		if v == nil {
			return nil
		}
		return v.Services
	}).(ServiceConnectServiceArrayOutput)
}

type ServiceConnectService struct {
	ClientAliases       []ServiceConnectClientAlias     `pulumi:"clientAliases"`
	DiscoveryName       *string                         `pulumi:"discoveryName"`
	IngressPortOverride *int                            `pulumi:"ingressPortOverride"`
	PortName            string                          `pulumi:"portName"`
	Timeout             *ServiceTimeoutConfiguration    `pulumi:"timeout"`
	Tls                 *ServiceConnectTlsConfiguration `pulumi:"tls"`
}

// ServiceConnectServiceInput is an input type that accepts ServiceConnectServiceArgs and ServiceConnectServiceOutput values.
// You can construct a concrete instance of `ServiceConnectServiceInput` via:
//
//	ServiceConnectServiceArgs{...}
type ServiceConnectServiceInput interface {
	pulumi.Input

	ToServiceConnectServiceOutput() ServiceConnectServiceOutput
	ToServiceConnectServiceOutputWithContext(context.Context) ServiceConnectServiceOutput
}

type ServiceConnectServiceArgs struct {
	ClientAliases       ServiceConnectClientAliasArrayInput    `pulumi:"clientAliases"`
	DiscoveryName       pulumi.StringPtrInput                  `pulumi:"discoveryName"`
	IngressPortOverride pulumi.IntPtrInput                     `pulumi:"ingressPortOverride"`
	PortName            pulumi.StringInput                     `pulumi:"portName"`
	Timeout             ServiceTimeoutConfigurationPtrInput    `pulumi:"timeout"`
	Tls                 ServiceConnectTlsConfigurationPtrInput `pulumi:"tls"`
}

func (ServiceConnectServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceConnectService)(nil)).Elem()
}

func (i ServiceConnectServiceArgs) ToServiceConnectServiceOutput() ServiceConnectServiceOutput {
	return i.ToServiceConnectServiceOutputWithContext(context.Background())
}

func (i ServiceConnectServiceArgs) ToServiceConnectServiceOutputWithContext(ctx context.Context) ServiceConnectServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConnectServiceOutput)
}

// ServiceConnectServiceArrayInput is an input type that accepts ServiceConnectServiceArray and ServiceConnectServiceArrayOutput values.
// You can construct a concrete instance of `ServiceConnectServiceArrayInput` via:
//
//	ServiceConnectServiceArray{ ServiceConnectServiceArgs{...} }
type ServiceConnectServiceArrayInput interface {
	pulumi.Input

	ToServiceConnectServiceArrayOutput() ServiceConnectServiceArrayOutput
	ToServiceConnectServiceArrayOutputWithContext(context.Context) ServiceConnectServiceArrayOutput
}

type ServiceConnectServiceArray []ServiceConnectServiceInput

func (ServiceConnectServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceConnectService)(nil)).Elem()
}

func (i ServiceConnectServiceArray) ToServiceConnectServiceArrayOutput() ServiceConnectServiceArrayOutput {
	return i.ToServiceConnectServiceArrayOutputWithContext(context.Background())
}

func (i ServiceConnectServiceArray) ToServiceConnectServiceArrayOutputWithContext(ctx context.Context) ServiceConnectServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConnectServiceArrayOutput)
}

type ServiceConnectServiceOutput struct{ *pulumi.OutputState }

func (ServiceConnectServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceConnectService)(nil)).Elem()
}

func (o ServiceConnectServiceOutput) ToServiceConnectServiceOutput() ServiceConnectServiceOutput {
	return o
}

func (o ServiceConnectServiceOutput) ToServiceConnectServiceOutputWithContext(ctx context.Context) ServiceConnectServiceOutput {
	return o
}

func (o ServiceConnectServiceOutput) ClientAliases() ServiceConnectClientAliasArrayOutput {
	return o.ApplyT(func(v ServiceConnectService) []ServiceConnectClientAlias { return v.ClientAliases }).(ServiceConnectClientAliasArrayOutput)
}

func (o ServiceConnectServiceOutput) DiscoveryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceConnectService) *string { return v.DiscoveryName }).(pulumi.StringPtrOutput)
}

func (o ServiceConnectServiceOutput) IngressPortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceConnectService) *int { return v.IngressPortOverride }).(pulumi.IntPtrOutput)
}

func (o ServiceConnectServiceOutput) PortName() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceConnectService) string { return v.PortName }).(pulumi.StringOutput)
}

func (o ServiceConnectServiceOutput) Timeout() ServiceTimeoutConfigurationPtrOutput {
	return o.ApplyT(func(v ServiceConnectService) *ServiceTimeoutConfiguration { return v.Timeout }).(ServiceTimeoutConfigurationPtrOutput)
}

func (o ServiceConnectServiceOutput) Tls() ServiceConnectTlsConfigurationPtrOutput {
	return o.ApplyT(func(v ServiceConnectService) *ServiceConnectTlsConfiguration { return v.Tls }).(ServiceConnectTlsConfigurationPtrOutput)
}

type ServiceConnectServiceArrayOutput struct{ *pulumi.OutputState }

func (ServiceConnectServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceConnectService)(nil)).Elem()
}

func (o ServiceConnectServiceArrayOutput) ToServiceConnectServiceArrayOutput() ServiceConnectServiceArrayOutput {
	return o
}

func (o ServiceConnectServiceArrayOutput) ToServiceConnectServiceArrayOutputWithContext(ctx context.Context) ServiceConnectServiceArrayOutput {
	return o
}

func (o ServiceConnectServiceArrayOutput) Index(i pulumi.IntInput) ServiceConnectServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceConnectService {
		return vs[0].([]ServiceConnectService)[vs[1].(int)]
	}).(ServiceConnectServiceOutput)
}

type ServiceConnectTlsCertificateAuthority struct {
	AwsPcaAuthorityArn *string `pulumi:"awsPcaAuthorityArn"`
}

// ServiceConnectTlsCertificateAuthorityInput is an input type that accepts ServiceConnectTlsCertificateAuthorityArgs and ServiceConnectTlsCertificateAuthorityOutput values.
// You can construct a concrete instance of `ServiceConnectTlsCertificateAuthorityInput` via:
//
//	ServiceConnectTlsCertificateAuthorityArgs{...}
type ServiceConnectTlsCertificateAuthorityInput interface {
	pulumi.Input

	ToServiceConnectTlsCertificateAuthorityOutput() ServiceConnectTlsCertificateAuthorityOutput
	ToServiceConnectTlsCertificateAuthorityOutputWithContext(context.Context) ServiceConnectTlsCertificateAuthorityOutput
}

type ServiceConnectTlsCertificateAuthorityArgs struct {
	AwsPcaAuthorityArn pulumi.StringPtrInput `pulumi:"awsPcaAuthorityArn"`
}

func (ServiceConnectTlsCertificateAuthorityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceConnectTlsCertificateAuthority)(nil)).Elem()
}

func (i ServiceConnectTlsCertificateAuthorityArgs) ToServiceConnectTlsCertificateAuthorityOutput() ServiceConnectTlsCertificateAuthorityOutput {
	return i.ToServiceConnectTlsCertificateAuthorityOutputWithContext(context.Background())
}

func (i ServiceConnectTlsCertificateAuthorityArgs) ToServiceConnectTlsCertificateAuthorityOutputWithContext(ctx context.Context) ServiceConnectTlsCertificateAuthorityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConnectTlsCertificateAuthorityOutput)
}

func (i ServiceConnectTlsCertificateAuthorityArgs) ToServiceConnectTlsCertificateAuthorityPtrOutput() ServiceConnectTlsCertificateAuthorityPtrOutput {
	return i.ToServiceConnectTlsCertificateAuthorityPtrOutputWithContext(context.Background())
}

func (i ServiceConnectTlsCertificateAuthorityArgs) ToServiceConnectTlsCertificateAuthorityPtrOutputWithContext(ctx context.Context) ServiceConnectTlsCertificateAuthorityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConnectTlsCertificateAuthorityOutput).ToServiceConnectTlsCertificateAuthorityPtrOutputWithContext(ctx)
}

// ServiceConnectTlsCertificateAuthorityPtrInput is an input type that accepts ServiceConnectTlsCertificateAuthorityArgs, ServiceConnectTlsCertificateAuthorityPtr and ServiceConnectTlsCertificateAuthorityPtrOutput values.
// You can construct a concrete instance of `ServiceConnectTlsCertificateAuthorityPtrInput` via:
//
//	        ServiceConnectTlsCertificateAuthorityArgs{...}
//
//	or:
//
//	        nil
type ServiceConnectTlsCertificateAuthorityPtrInput interface {
	pulumi.Input

	ToServiceConnectTlsCertificateAuthorityPtrOutput() ServiceConnectTlsCertificateAuthorityPtrOutput
	ToServiceConnectTlsCertificateAuthorityPtrOutputWithContext(context.Context) ServiceConnectTlsCertificateAuthorityPtrOutput
}

type serviceConnectTlsCertificateAuthorityPtrType ServiceConnectTlsCertificateAuthorityArgs

func ServiceConnectTlsCertificateAuthorityPtr(v *ServiceConnectTlsCertificateAuthorityArgs) ServiceConnectTlsCertificateAuthorityPtrInput {
	return (*serviceConnectTlsCertificateAuthorityPtrType)(v)
}

func (*serviceConnectTlsCertificateAuthorityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceConnectTlsCertificateAuthority)(nil)).Elem()
}

func (i *serviceConnectTlsCertificateAuthorityPtrType) ToServiceConnectTlsCertificateAuthorityPtrOutput() ServiceConnectTlsCertificateAuthorityPtrOutput {
	return i.ToServiceConnectTlsCertificateAuthorityPtrOutputWithContext(context.Background())
}

func (i *serviceConnectTlsCertificateAuthorityPtrType) ToServiceConnectTlsCertificateAuthorityPtrOutputWithContext(ctx context.Context) ServiceConnectTlsCertificateAuthorityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConnectTlsCertificateAuthorityPtrOutput)
}

type ServiceConnectTlsCertificateAuthorityOutput struct{ *pulumi.OutputState }

func (ServiceConnectTlsCertificateAuthorityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceConnectTlsCertificateAuthority)(nil)).Elem()
}

func (o ServiceConnectTlsCertificateAuthorityOutput) ToServiceConnectTlsCertificateAuthorityOutput() ServiceConnectTlsCertificateAuthorityOutput {
	return o
}

func (o ServiceConnectTlsCertificateAuthorityOutput) ToServiceConnectTlsCertificateAuthorityOutputWithContext(ctx context.Context) ServiceConnectTlsCertificateAuthorityOutput {
	return o
}

func (o ServiceConnectTlsCertificateAuthorityOutput) ToServiceConnectTlsCertificateAuthorityPtrOutput() ServiceConnectTlsCertificateAuthorityPtrOutput {
	return o.ToServiceConnectTlsCertificateAuthorityPtrOutputWithContext(context.Background())
}

func (o ServiceConnectTlsCertificateAuthorityOutput) ToServiceConnectTlsCertificateAuthorityPtrOutputWithContext(ctx context.Context) ServiceConnectTlsCertificateAuthorityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceConnectTlsCertificateAuthority) *ServiceConnectTlsCertificateAuthority {
		return &v
	}).(ServiceConnectTlsCertificateAuthorityPtrOutput)
}

func (o ServiceConnectTlsCertificateAuthorityOutput) AwsPcaAuthorityArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceConnectTlsCertificateAuthority) *string { return v.AwsPcaAuthorityArn }).(pulumi.StringPtrOutput)
}

type ServiceConnectTlsCertificateAuthorityPtrOutput struct{ *pulumi.OutputState }

func (ServiceConnectTlsCertificateAuthorityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceConnectTlsCertificateAuthority)(nil)).Elem()
}

func (o ServiceConnectTlsCertificateAuthorityPtrOutput) ToServiceConnectTlsCertificateAuthorityPtrOutput() ServiceConnectTlsCertificateAuthorityPtrOutput {
	return o
}

func (o ServiceConnectTlsCertificateAuthorityPtrOutput) ToServiceConnectTlsCertificateAuthorityPtrOutputWithContext(ctx context.Context) ServiceConnectTlsCertificateAuthorityPtrOutput {
	return o
}

func (o ServiceConnectTlsCertificateAuthorityPtrOutput) Elem() ServiceConnectTlsCertificateAuthorityOutput {
	return o.ApplyT(func(v *ServiceConnectTlsCertificateAuthority) ServiceConnectTlsCertificateAuthority {
		if v != nil {
			return *v
		}
		var ret ServiceConnectTlsCertificateAuthority
		return ret
	}).(ServiceConnectTlsCertificateAuthorityOutput)
}

func (o ServiceConnectTlsCertificateAuthorityPtrOutput) AwsPcaAuthorityArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceConnectTlsCertificateAuthority) *string {
		if v == nil {
			return nil
		}
		return v.AwsPcaAuthorityArn
	}).(pulumi.StringPtrOutput)
}

type ServiceConnectTlsConfiguration struct {
	IssuerCertificateAuthority ServiceConnectTlsCertificateAuthority `pulumi:"issuerCertificateAuthority"`
	KmsKey                     *string                               `pulumi:"kmsKey"`
	RoleArn                    *string                               `pulumi:"roleArn"`
}

// ServiceConnectTlsConfigurationInput is an input type that accepts ServiceConnectTlsConfigurationArgs and ServiceConnectTlsConfigurationOutput values.
// You can construct a concrete instance of `ServiceConnectTlsConfigurationInput` via:
//
//	ServiceConnectTlsConfigurationArgs{...}
type ServiceConnectTlsConfigurationInput interface {
	pulumi.Input

	ToServiceConnectTlsConfigurationOutput() ServiceConnectTlsConfigurationOutput
	ToServiceConnectTlsConfigurationOutputWithContext(context.Context) ServiceConnectTlsConfigurationOutput
}

type ServiceConnectTlsConfigurationArgs struct {
	IssuerCertificateAuthority ServiceConnectTlsCertificateAuthorityInput `pulumi:"issuerCertificateAuthority"`
	KmsKey                     pulumi.StringPtrInput                      `pulumi:"kmsKey"`
	RoleArn                    pulumi.StringPtrInput                      `pulumi:"roleArn"`
}

func (ServiceConnectTlsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceConnectTlsConfiguration)(nil)).Elem()
}

func (i ServiceConnectTlsConfigurationArgs) ToServiceConnectTlsConfigurationOutput() ServiceConnectTlsConfigurationOutput {
	return i.ToServiceConnectTlsConfigurationOutputWithContext(context.Background())
}

func (i ServiceConnectTlsConfigurationArgs) ToServiceConnectTlsConfigurationOutputWithContext(ctx context.Context) ServiceConnectTlsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConnectTlsConfigurationOutput)
}

func (i ServiceConnectTlsConfigurationArgs) ToServiceConnectTlsConfigurationPtrOutput() ServiceConnectTlsConfigurationPtrOutput {
	return i.ToServiceConnectTlsConfigurationPtrOutputWithContext(context.Background())
}

func (i ServiceConnectTlsConfigurationArgs) ToServiceConnectTlsConfigurationPtrOutputWithContext(ctx context.Context) ServiceConnectTlsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConnectTlsConfigurationOutput).ToServiceConnectTlsConfigurationPtrOutputWithContext(ctx)
}

// ServiceConnectTlsConfigurationPtrInput is an input type that accepts ServiceConnectTlsConfigurationArgs, ServiceConnectTlsConfigurationPtr and ServiceConnectTlsConfigurationPtrOutput values.
// You can construct a concrete instance of `ServiceConnectTlsConfigurationPtrInput` via:
//
//	        ServiceConnectTlsConfigurationArgs{...}
//
//	or:
//
//	        nil
type ServiceConnectTlsConfigurationPtrInput interface {
	pulumi.Input

	ToServiceConnectTlsConfigurationPtrOutput() ServiceConnectTlsConfigurationPtrOutput
	ToServiceConnectTlsConfigurationPtrOutputWithContext(context.Context) ServiceConnectTlsConfigurationPtrOutput
}

type serviceConnectTlsConfigurationPtrType ServiceConnectTlsConfigurationArgs

func ServiceConnectTlsConfigurationPtr(v *ServiceConnectTlsConfigurationArgs) ServiceConnectTlsConfigurationPtrInput {
	return (*serviceConnectTlsConfigurationPtrType)(v)
}

func (*serviceConnectTlsConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceConnectTlsConfiguration)(nil)).Elem()
}

func (i *serviceConnectTlsConfigurationPtrType) ToServiceConnectTlsConfigurationPtrOutput() ServiceConnectTlsConfigurationPtrOutput {
	return i.ToServiceConnectTlsConfigurationPtrOutputWithContext(context.Background())
}

func (i *serviceConnectTlsConfigurationPtrType) ToServiceConnectTlsConfigurationPtrOutputWithContext(ctx context.Context) ServiceConnectTlsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConnectTlsConfigurationPtrOutput)
}

type ServiceConnectTlsConfigurationOutput struct{ *pulumi.OutputState }

func (ServiceConnectTlsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceConnectTlsConfiguration)(nil)).Elem()
}

func (o ServiceConnectTlsConfigurationOutput) ToServiceConnectTlsConfigurationOutput() ServiceConnectTlsConfigurationOutput {
	return o
}

func (o ServiceConnectTlsConfigurationOutput) ToServiceConnectTlsConfigurationOutputWithContext(ctx context.Context) ServiceConnectTlsConfigurationOutput {
	return o
}

func (o ServiceConnectTlsConfigurationOutput) ToServiceConnectTlsConfigurationPtrOutput() ServiceConnectTlsConfigurationPtrOutput {
	return o.ToServiceConnectTlsConfigurationPtrOutputWithContext(context.Background())
}

func (o ServiceConnectTlsConfigurationOutput) ToServiceConnectTlsConfigurationPtrOutputWithContext(ctx context.Context) ServiceConnectTlsConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceConnectTlsConfiguration) *ServiceConnectTlsConfiguration {
		return &v
	}).(ServiceConnectTlsConfigurationPtrOutput)
}

func (o ServiceConnectTlsConfigurationOutput) IssuerCertificateAuthority() ServiceConnectTlsCertificateAuthorityOutput {
	return o.ApplyT(func(v ServiceConnectTlsConfiguration) ServiceConnectTlsCertificateAuthority {
		return v.IssuerCertificateAuthority
	}).(ServiceConnectTlsCertificateAuthorityOutput)
}

func (o ServiceConnectTlsConfigurationOutput) KmsKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceConnectTlsConfiguration) *string { return v.KmsKey }).(pulumi.StringPtrOutput)
}

func (o ServiceConnectTlsConfigurationOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceConnectTlsConfiguration) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

type ServiceConnectTlsConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ServiceConnectTlsConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceConnectTlsConfiguration)(nil)).Elem()
}

func (o ServiceConnectTlsConfigurationPtrOutput) ToServiceConnectTlsConfigurationPtrOutput() ServiceConnectTlsConfigurationPtrOutput {
	return o
}

func (o ServiceConnectTlsConfigurationPtrOutput) ToServiceConnectTlsConfigurationPtrOutputWithContext(ctx context.Context) ServiceConnectTlsConfigurationPtrOutput {
	return o
}

func (o ServiceConnectTlsConfigurationPtrOutput) Elem() ServiceConnectTlsConfigurationOutput {
	return o.ApplyT(func(v *ServiceConnectTlsConfiguration) ServiceConnectTlsConfiguration {
		if v != nil {
			return *v
		}
		var ret ServiceConnectTlsConfiguration
		return ret
	}).(ServiceConnectTlsConfigurationOutput)
}

func (o ServiceConnectTlsConfigurationPtrOutput) IssuerCertificateAuthority() ServiceConnectTlsCertificateAuthorityPtrOutput {
	return o.ApplyT(func(v *ServiceConnectTlsConfiguration) *ServiceConnectTlsCertificateAuthority {
		if v == nil {
			return nil
		}
		return &v.IssuerCertificateAuthority
	}).(ServiceConnectTlsCertificateAuthorityPtrOutput)
}

func (o ServiceConnectTlsConfigurationPtrOutput) KmsKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceConnectTlsConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.KmsKey
	}).(pulumi.StringPtrOutput)
}

func (o ServiceConnectTlsConfigurationPtrOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceConnectTlsConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.RoleArn
	}).(pulumi.StringPtrOutput)
}

type ServiceDeploymentAlarms struct {
	AlarmNames []string `pulumi:"alarmNames"`
	Enable     bool     `pulumi:"enable"`
	Rollback   bool     `pulumi:"rollback"`
}

// ServiceDeploymentAlarmsInput is an input type that accepts ServiceDeploymentAlarmsArgs and ServiceDeploymentAlarmsOutput values.
// You can construct a concrete instance of `ServiceDeploymentAlarmsInput` via:
//
//	ServiceDeploymentAlarmsArgs{...}
type ServiceDeploymentAlarmsInput interface {
	pulumi.Input

	ToServiceDeploymentAlarmsOutput() ServiceDeploymentAlarmsOutput
	ToServiceDeploymentAlarmsOutputWithContext(context.Context) ServiceDeploymentAlarmsOutput
}

type ServiceDeploymentAlarmsArgs struct {
	AlarmNames pulumi.StringArrayInput `pulumi:"alarmNames"`
	Enable     pulumi.BoolInput        `pulumi:"enable"`
	Rollback   pulumi.BoolInput        `pulumi:"rollback"`
}

func (ServiceDeploymentAlarmsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDeploymentAlarms)(nil)).Elem()
}

func (i ServiceDeploymentAlarmsArgs) ToServiceDeploymentAlarmsOutput() ServiceDeploymentAlarmsOutput {
	return i.ToServiceDeploymentAlarmsOutputWithContext(context.Background())
}

func (i ServiceDeploymentAlarmsArgs) ToServiceDeploymentAlarmsOutputWithContext(ctx context.Context) ServiceDeploymentAlarmsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDeploymentAlarmsOutput)
}

func (i ServiceDeploymentAlarmsArgs) ToServiceDeploymentAlarmsPtrOutput() ServiceDeploymentAlarmsPtrOutput {
	return i.ToServiceDeploymentAlarmsPtrOutputWithContext(context.Background())
}

func (i ServiceDeploymentAlarmsArgs) ToServiceDeploymentAlarmsPtrOutputWithContext(ctx context.Context) ServiceDeploymentAlarmsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDeploymentAlarmsOutput).ToServiceDeploymentAlarmsPtrOutputWithContext(ctx)
}

// ServiceDeploymentAlarmsPtrInput is an input type that accepts ServiceDeploymentAlarmsArgs, ServiceDeploymentAlarmsPtr and ServiceDeploymentAlarmsPtrOutput values.
// You can construct a concrete instance of `ServiceDeploymentAlarmsPtrInput` via:
//
//	        ServiceDeploymentAlarmsArgs{...}
//
//	or:
//
//	        nil
type ServiceDeploymentAlarmsPtrInput interface {
	pulumi.Input

	ToServiceDeploymentAlarmsPtrOutput() ServiceDeploymentAlarmsPtrOutput
	ToServiceDeploymentAlarmsPtrOutputWithContext(context.Context) ServiceDeploymentAlarmsPtrOutput
}

type serviceDeploymentAlarmsPtrType ServiceDeploymentAlarmsArgs

func ServiceDeploymentAlarmsPtr(v *ServiceDeploymentAlarmsArgs) ServiceDeploymentAlarmsPtrInput {
	return (*serviceDeploymentAlarmsPtrType)(v)
}

func (*serviceDeploymentAlarmsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceDeploymentAlarms)(nil)).Elem()
}

func (i *serviceDeploymentAlarmsPtrType) ToServiceDeploymentAlarmsPtrOutput() ServiceDeploymentAlarmsPtrOutput {
	return i.ToServiceDeploymentAlarmsPtrOutputWithContext(context.Background())
}

func (i *serviceDeploymentAlarmsPtrType) ToServiceDeploymentAlarmsPtrOutputWithContext(ctx context.Context) ServiceDeploymentAlarmsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDeploymentAlarmsPtrOutput)
}

type ServiceDeploymentAlarmsOutput struct{ *pulumi.OutputState }

func (ServiceDeploymentAlarmsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDeploymentAlarms)(nil)).Elem()
}

func (o ServiceDeploymentAlarmsOutput) ToServiceDeploymentAlarmsOutput() ServiceDeploymentAlarmsOutput {
	return o
}

func (o ServiceDeploymentAlarmsOutput) ToServiceDeploymentAlarmsOutputWithContext(ctx context.Context) ServiceDeploymentAlarmsOutput {
	return o
}

func (o ServiceDeploymentAlarmsOutput) ToServiceDeploymentAlarmsPtrOutput() ServiceDeploymentAlarmsPtrOutput {
	return o.ToServiceDeploymentAlarmsPtrOutputWithContext(context.Background())
}

func (o ServiceDeploymentAlarmsOutput) ToServiceDeploymentAlarmsPtrOutputWithContext(ctx context.Context) ServiceDeploymentAlarmsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceDeploymentAlarms) *ServiceDeploymentAlarms {
		return &v
	}).(ServiceDeploymentAlarmsPtrOutput)
}

func (o ServiceDeploymentAlarmsOutput) AlarmNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceDeploymentAlarms) []string { return v.AlarmNames }).(pulumi.StringArrayOutput)
}

func (o ServiceDeploymentAlarmsOutput) Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v ServiceDeploymentAlarms) bool { return v.Enable }).(pulumi.BoolOutput)
}

func (o ServiceDeploymentAlarmsOutput) Rollback() pulumi.BoolOutput {
	return o.ApplyT(func(v ServiceDeploymentAlarms) bool { return v.Rollback }).(pulumi.BoolOutput)
}

type ServiceDeploymentAlarmsPtrOutput struct{ *pulumi.OutputState }

func (ServiceDeploymentAlarmsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceDeploymentAlarms)(nil)).Elem()
}

func (o ServiceDeploymentAlarmsPtrOutput) ToServiceDeploymentAlarmsPtrOutput() ServiceDeploymentAlarmsPtrOutput {
	return o
}

func (o ServiceDeploymentAlarmsPtrOutput) ToServiceDeploymentAlarmsPtrOutputWithContext(ctx context.Context) ServiceDeploymentAlarmsPtrOutput {
	return o
}

func (o ServiceDeploymentAlarmsPtrOutput) Elem() ServiceDeploymentAlarmsOutput {
	return o.ApplyT(func(v *ServiceDeploymentAlarms) ServiceDeploymentAlarms {
		if v != nil {
			return *v
		}
		var ret ServiceDeploymentAlarms
		return ret
	}).(ServiceDeploymentAlarmsOutput)
}

func (o ServiceDeploymentAlarmsPtrOutput) AlarmNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceDeploymentAlarms) []string {
		if v == nil {
			return nil
		}
		return v.AlarmNames
	}).(pulumi.StringArrayOutput)
}

func (o ServiceDeploymentAlarmsPtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceDeploymentAlarms) *bool {
		if v == nil {
			return nil
		}
		return &v.Enable
	}).(pulumi.BoolPtrOutput)
}

func (o ServiceDeploymentAlarmsPtrOutput) Rollback() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceDeploymentAlarms) *bool {
		if v == nil {
			return nil
		}
		return &v.Rollback
	}).(pulumi.BoolPtrOutput)
}

type ServiceDeploymentCircuitBreaker struct {
	Enable   bool `pulumi:"enable"`
	Rollback bool `pulumi:"rollback"`
}

// ServiceDeploymentCircuitBreakerInput is an input type that accepts ServiceDeploymentCircuitBreakerArgs and ServiceDeploymentCircuitBreakerOutput values.
// You can construct a concrete instance of `ServiceDeploymentCircuitBreakerInput` via:
//
//	ServiceDeploymentCircuitBreakerArgs{...}
type ServiceDeploymentCircuitBreakerInput interface {
	pulumi.Input

	ToServiceDeploymentCircuitBreakerOutput() ServiceDeploymentCircuitBreakerOutput
	ToServiceDeploymentCircuitBreakerOutputWithContext(context.Context) ServiceDeploymentCircuitBreakerOutput
}

type ServiceDeploymentCircuitBreakerArgs struct {
	Enable   pulumi.BoolInput `pulumi:"enable"`
	Rollback pulumi.BoolInput `pulumi:"rollback"`
}

func (ServiceDeploymentCircuitBreakerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDeploymentCircuitBreaker)(nil)).Elem()
}

func (i ServiceDeploymentCircuitBreakerArgs) ToServiceDeploymentCircuitBreakerOutput() ServiceDeploymentCircuitBreakerOutput {
	return i.ToServiceDeploymentCircuitBreakerOutputWithContext(context.Background())
}

func (i ServiceDeploymentCircuitBreakerArgs) ToServiceDeploymentCircuitBreakerOutputWithContext(ctx context.Context) ServiceDeploymentCircuitBreakerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDeploymentCircuitBreakerOutput)
}

func (i ServiceDeploymentCircuitBreakerArgs) ToServiceDeploymentCircuitBreakerPtrOutput() ServiceDeploymentCircuitBreakerPtrOutput {
	return i.ToServiceDeploymentCircuitBreakerPtrOutputWithContext(context.Background())
}

func (i ServiceDeploymentCircuitBreakerArgs) ToServiceDeploymentCircuitBreakerPtrOutputWithContext(ctx context.Context) ServiceDeploymentCircuitBreakerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDeploymentCircuitBreakerOutput).ToServiceDeploymentCircuitBreakerPtrOutputWithContext(ctx)
}

// ServiceDeploymentCircuitBreakerPtrInput is an input type that accepts ServiceDeploymentCircuitBreakerArgs, ServiceDeploymentCircuitBreakerPtr and ServiceDeploymentCircuitBreakerPtrOutput values.
// You can construct a concrete instance of `ServiceDeploymentCircuitBreakerPtrInput` via:
//
//	        ServiceDeploymentCircuitBreakerArgs{...}
//
//	or:
//
//	        nil
type ServiceDeploymentCircuitBreakerPtrInput interface {
	pulumi.Input

	ToServiceDeploymentCircuitBreakerPtrOutput() ServiceDeploymentCircuitBreakerPtrOutput
	ToServiceDeploymentCircuitBreakerPtrOutputWithContext(context.Context) ServiceDeploymentCircuitBreakerPtrOutput
}

type serviceDeploymentCircuitBreakerPtrType ServiceDeploymentCircuitBreakerArgs

func ServiceDeploymentCircuitBreakerPtr(v *ServiceDeploymentCircuitBreakerArgs) ServiceDeploymentCircuitBreakerPtrInput {
	return (*serviceDeploymentCircuitBreakerPtrType)(v)
}

func (*serviceDeploymentCircuitBreakerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceDeploymentCircuitBreaker)(nil)).Elem()
}

func (i *serviceDeploymentCircuitBreakerPtrType) ToServiceDeploymentCircuitBreakerPtrOutput() ServiceDeploymentCircuitBreakerPtrOutput {
	return i.ToServiceDeploymentCircuitBreakerPtrOutputWithContext(context.Background())
}

func (i *serviceDeploymentCircuitBreakerPtrType) ToServiceDeploymentCircuitBreakerPtrOutputWithContext(ctx context.Context) ServiceDeploymentCircuitBreakerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDeploymentCircuitBreakerPtrOutput)
}

type ServiceDeploymentCircuitBreakerOutput struct{ *pulumi.OutputState }

func (ServiceDeploymentCircuitBreakerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDeploymentCircuitBreaker)(nil)).Elem()
}

func (o ServiceDeploymentCircuitBreakerOutput) ToServiceDeploymentCircuitBreakerOutput() ServiceDeploymentCircuitBreakerOutput {
	return o
}

func (o ServiceDeploymentCircuitBreakerOutput) ToServiceDeploymentCircuitBreakerOutputWithContext(ctx context.Context) ServiceDeploymentCircuitBreakerOutput {
	return o
}

func (o ServiceDeploymentCircuitBreakerOutput) ToServiceDeploymentCircuitBreakerPtrOutput() ServiceDeploymentCircuitBreakerPtrOutput {
	return o.ToServiceDeploymentCircuitBreakerPtrOutputWithContext(context.Background())
}

func (o ServiceDeploymentCircuitBreakerOutput) ToServiceDeploymentCircuitBreakerPtrOutputWithContext(ctx context.Context) ServiceDeploymentCircuitBreakerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceDeploymentCircuitBreaker) *ServiceDeploymentCircuitBreaker {
		return &v
	}).(ServiceDeploymentCircuitBreakerPtrOutput)
}

func (o ServiceDeploymentCircuitBreakerOutput) Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v ServiceDeploymentCircuitBreaker) bool { return v.Enable }).(pulumi.BoolOutput)
}

func (o ServiceDeploymentCircuitBreakerOutput) Rollback() pulumi.BoolOutput {
	return o.ApplyT(func(v ServiceDeploymentCircuitBreaker) bool { return v.Rollback }).(pulumi.BoolOutput)
}

type ServiceDeploymentCircuitBreakerPtrOutput struct{ *pulumi.OutputState }

func (ServiceDeploymentCircuitBreakerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceDeploymentCircuitBreaker)(nil)).Elem()
}

func (o ServiceDeploymentCircuitBreakerPtrOutput) ToServiceDeploymentCircuitBreakerPtrOutput() ServiceDeploymentCircuitBreakerPtrOutput {
	return o
}

func (o ServiceDeploymentCircuitBreakerPtrOutput) ToServiceDeploymentCircuitBreakerPtrOutputWithContext(ctx context.Context) ServiceDeploymentCircuitBreakerPtrOutput {
	return o
}

func (o ServiceDeploymentCircuitBreakerPtrOutput) Elem() ServiceDeploymentCircuitBreakerOutput {
	return o.ApplyT(func(v *ServiceDeploymentCircuitBreaker) ServiceDeploymentCircuitBreaker {
		if v != nil {
			return *v
		}
		var ret ServiceDeploymentCircuitBreaker
		return ret
	}).(ServiceDeploymentCircuitBreakerOutput)
}

func (o ServiceDeploymentCircuitBreakerPtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceDeploymentCircuitBreaker) *bool {
		if v == nil {
			return nil
		}
		return &v.Enable
	}).(pulumi.BoolPtrOutput)
}

func (o ServiceDeploymentCircuitBreakerPtrOutput) Rollback() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceDeploymentCircuitBreaker) *bool {
		if v == nil {
			return nil
		}
		return &v.Rollback
	}).(pulumi.BoolPtrOutput)
}

type ServiceDeploymentConfiguration struct {
	Alarms                   *ServiceDeploymentAlarms         `pulumi:"alarms"`
	DeploymentCircuitBreaker *ServiceDeploymentCircuitBreaker `pulumi:"deploymentCircuitBreaker"`
	MaximumPercent           *int                             `pulumi:"maximumPercent"`
	MinimumHealthyPercent    *int                             `pulumi:"minimumHealthyPercent"`
}

// ServiceDeploymentConfigurationInput is an input type that accepts ServiceDeploymentConfigurationArgs and ServiceDeploymentConfigurationOutput values.
// You can construct a concrete instance of `ServiceDeploymentConfigurationInput` via:
//
//	ServiceDeploymentConfigurationArgs{...}
type ServiceDeploymentConfigurationInput interface {
	pulumi.Input

	ToServiceDeploymentConfigurationOutput() ServiceDeploymentConfigurationOutput
	ToServiceDeploymentConfigurationOutputWithContext(context.Context) ServiceDeploymentConfigurationOutput
}

type ServiceDeploymentConfigurationArgs struct {
	Alarms                   ServiceDeploymentAlarmsPtrInput         `pulumi:"alarms"`
	DeploymentCircuitBreaker ServiceDeploymentCircuitBreakerPtrInput `pulumi:"deploymentCircuitBreaker"`
	MaximumPercent           pulumi.IntPtrInput                      `pulumi:"maximumPercent"`
	MinimumHealthyPercent    pulumi.IntPtrInput                      `pulumi:"minimumHealthyPercent"`
}

func (ServiceDeploymentConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDeploymentConfiguration)(nil)).Elem()
}

func (i ServiceDeploymentConfigurationArgs) ToServiceDeploymentConfigurationOutput() ServiceDeploymentConfigurationOutput {
	return i.ToServiceDeploymentConfigurationOutputWithContext(context.Background())
}

func (i ServiceDeploymentConfigurationArgs) ToServiceDeploymentConfigurationOutputWithContext(ctx context.Context) ServiceDeploymentConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDeploymentConfigurationOutput)
}

func (i ServiceDeploymentConfigurationArgs) ToServiceDeploymentConfigurationPtrOutput() ServiceDeploymentConfigurationPtrOutput {
	return i.ToServiceDeploymentConfigurationPtrOutputWithContext(context.Background())
}

func (i ServiceDeploymentConfigurationArgs) ToServiceDeploymentConfigurationPtrOutputWithContext(ctx context.Context) ServiceDeploymentConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDeploymentConfigurationOutput).ToServiceDeploymentConfigurationPtrOutputWithContext(ctx)
}

// ServiceDeploymentConfigurationPtrInput is an input type that accepts ServiceDeploymentConfigurationArgs, ServiceDeploymentConfigurationPtr and ServiceDeploymentConfigurationPtrOutput values.
// You can construct a concrete instance of `ServiceDeploymentConfigurationPtrInput` via:
//
//	        ServiceDeploymentConfigurationArgs{...}
//
//	or:
//
//	        nil
type ServiceDeploymentConfigurationPtrInput interface {
	pulumi.Input

	ToServiceDeploymentConfigurationPtrOutput() ServiceDeploymentConfigurationPtrOutput
	ToServiceDeploymentConfigurationPtrOutputWithContext(context.Context) ServiceDeploymentConfigurationPtrOutput
}

type serviceDeploymentConfigurationPtrType ServiceDeploymentConfigurationArgs

func ServiceDeploymentConfigurationPtr(v *ServiceDeploymentConfigurationArgs) ServiceDeploymentConfigurationPtrInput {
	return (*serviceDeploymentConfigurationPtrType)(v)
}

func (*serviceDeploymentConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceDeploymentConfiguration)(nil)).Elem()
}

func (i *serviceDeploymentConfigurationPtrType) ToServiceDeploymentConfigurationPtrOutput() ServiceDeploymentConfigurationPtrOutput {
	return i.ToServiceDeploymentConfigurationPtrOutputWithContext(context.Background())
}

func (i *serviceDeploymentConfigurationPtrType) ToServiceDeploymentConfigurationPtrOutputWithContext(ctx context.Context) ServiceDeploymentConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDeploymentConfigurationPtrOutput)
}

type ServiceDeploymentConfigurationOutput struct{ *pulumi.OutputState }

func (ServiceDeploymentConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDeploymentConfiguration)(nil)).Elem()
}

func (o ServiceDeploymentConfigurationOutput) ToServiceDeploymentConfigurationOutput() ServiceDeploymentConfigurationOutput {
	return o
}

func (o ServiceDeploymentConfigurationOutput) ToServiceDeploymentConfigurationOutputWithContext(ctx context.Context) ServiceDeploymentConfigurationOutput {
	return o
}

func (o ServiceDeploymentConfigurationOutput) ToServiceDeploymentConfigurationPtrOutput() ServiceDeploymentConfigurationPtrOutput {
	return o.ToServiceDeploymentConfigurationPtrOutputWithContext(context.Background())
}

func (o ServiceDeploymentConfigurationOutput) ToServiceDeploymentConfigurationPtrOutputWithContext(ctx context.Context) ServiceDeploymentConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceDeploymentConfiguration) *ServiceDeploymentConfiguration {
		return &v
	}).(ServiceDeploymentConfigurationPtrOutput)
}

func (o ServiceDeploymentConfigurationOutput) Alarms() ServiceDeploymentAlarmsPtrOutput {
	return o.ApplyT(func(v ServiceDeploymentConfiguration) *ServiceDeploymentAlarms { return v.Alarms }).(ServiceDeploymentAlarmsPtrOutput)
}

func (o ServiceDeploymentConfigurationOutput) DeploymentCircuitBreaker() ServiceDeploymentCircuitBreakerPtrOutput {
	return o.ApplyT(func(v ServiceDeploymentConfiguration) *ServiceDeploymentCircuitBreaker {
		return v.DeploymentCircuitBreaker
	}).(ServiceDeploymentCircuitBreakerPtrOutput)
}

func (o ServiceDeploymentConfigurationOutput) MaximumPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceDeploymentConfiguration) *int { return v.MaximumPercent }).(pulumi.IntPtrOutput)
}

func (o ServiceDeploymentConfigurationOutput) MinimumHealthyPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceDeploymentConfiguration) *int { return v.MinimumHealthyPercent }).(pulumi.IntPtrOutput)
}

type ServiceDeploymentConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ServiceDeploymentConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceDeploymentConfiguration)(nil)).Elem()
}

func (o ServiceDeploymentConfigurationPtrOutput) ToServiceDeploymentConfigurationPtrOutput() ServiceDeploymentConfigurationPtrOutput {
	return o
}

func (o ServiceDeploymentConfigurationPtrOutput) ToServiceDeploymentConfigurationPtrOutputWithContext(ctx context.Context) ServiceDeploymentConfigurationPtrOutput {
	return o
}

func (o ServiceDeploymentConfigurationPtrOutput) Elem() ServiceDeploymentConfigurationOutput {
	return o.ApplyT(func(v *ServiceDeploymentConfiguration) ServiceDeploymentConfiguration {
		if v != nil {
			return *v
		}
		var ret ServiceDeploymentConfiguration
		return ret
	}).(ServiceDeploymentConfigurationOutput)
}

func (o ServiceDeploymentConfigurationPtrOutput) Alarms() ServiceDeploymentAlarmsPtrOutput {
	return o.ApplyT(func(v *ServiceDeploymentConfiguration) *ServiceDeploymentAlarms {
		if v == nil {
			return nil
		}
		return v.Alarms
	}).(ServiceDeploymentAlarmsPtrOutput)
}

func (o ServiceDeploymentConfigurationPtrOutput) DeploymentCircuitBreaker() ServiceDeploymentCircuitBreakerPtrOutput {
	return o.ApplyT(func(v *ServiceDeploymentConfiguration) *ServiceDeploymentCircuitBreaker {
		if v == nil {
			return nil
		}
		return v.DeploymentCircuitBreaker
	}).(ServiceDeploymentCircuitBreakerPtrOutput)
}

func (o ServiceDeploymentConfigurationPtrOutput) MaximumPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceDeploymentConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.MaximumPercent
	}).(pulumi.IntPtrOutput)
}

func (o ServiceDeploymentConfigurationPtrOutput) MinimumHealthyPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceDeploymentConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.MinimumHealthyPercent
	}).(pulumi.IntPtrOutput)
}

type ServiceDeploymentController struct {
	Type *ServiceDeploymentControllerType `pulumi:"type"`
}

// ServiceDeploymentControllerInput is an input type that accepts ServiceDeploymentControllerArgs and ServiceDeploymentControllerOutput values.
// You can construct a concrete instance of `ServiceDeploymentControllerInput` via:
//
//	ServiceDeploymentControllerArgs{...}
type ServiceDeploymentControllerInput interface {
	pulumi.Input

	ToServiceDeploymentControllerOutput() ServiceDeploymentControllerOutput
	ToServiceDeploymentControllerOutputWithContext(context.Context) ServiceDeploymentControllerOutput
}

type ServiceDeploymentControllerArgs struct {
	Type ServiceDeploymentControllerTypePtrInput `pulumi:"type"`
}

func (ServiceDeploymentControllerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDeploymentController)(nil)).Elem()
}

func (i ServiceDeploymentControllerArgs) ToServiceDeploymentControllerOutput() ServiceDeploymentControllerOutput {
	return i.ToServiceDeploymentControllerOutputWithContext(context.Background())
}

func (i ServiceDeploymentControllerArgs) ToServiceDeploymentControllerOutputWithContext(ctx context.Context) ServiceDeploymentControllerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDeploymentControllerOutput)
}

func (i ServiceDeploymentControllerArgs) ToServiceDeploymentControllerPtrOutput() ServiceDeploymentControllerPtrOutput {
	return i.ToServiceDeploymentControllerPtrOutputWithContext(context.Background())
}

func (i ServiceDeploymentControllerArgs) ToServiceDeploymentControllerPtrOutputWithContext(ctx context.Context) ServiceDeploymentControllerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDeploymentControllerOutput).ToServiceDeploymentControllerPtrOutputWithContext(ctx)
}

// ServiceDeploymentControllerPtrInput is an input type that accepts ServiceDeploymentControllerArgs, ServiceDeploymentControllerPtr and ServiceDeploymentControllerPtrOutput values.
// You can construct a concrete instance of `ServiceDeploymentControllerPtrInput` via:
//
//	        ServiceDeploymentControllerArgs{...}
//
//	or:
//
//	        nil
type ServiceDeploymentControllerPtrInput interface {
	pulumi.Input

	ToServiceDeploymentControllerPtrOutput() ServiceDeploymentControllerPtrOutput
	ToServiceDeploymentControllerPtrOutputWithContext(context.Context) ServiceDeploymentControllerPtrOutput
}

type serviceDeploymentControllerPtrType ServiceDeploymentControllerArgs

func ServiceDeploymentControllerPtr(v *ServiceDeploymentControllerArgs) ServiceDeploymentControllerPtrInput {
	return (*serviceDeploymentControllerPtrType)(v)
}

func (*serviceDeploymentControllerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceDeploymentController)(nil)).Elem()
}

func (i *serviceDeploymentControllerPtrType) ToServiceDeploymentControllerPtrOutput() ServiceDeploymentControllerPtrOutput {
	return i.ToServiceDeploymentControllerPtrOutputWithContext(context.Background())
}

func (i *serviceDeploymentControllerPtrType) ToServiceDeploymentControllerPtrOutputWithContext(ctx context.Context) ServiceDeploymentControllerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDeploymentControllerPtrOutput)
}

type ServiceDeploymentControllerOutput struct{ *pulumi.OutputState }

func (ServiceDeploymentControllerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDeploymentController)(nil)).Elem()
}

func (o ServiceDeploymentControllerOutput) ToServiceDeploymentControllerOutput() ServiceDeploymentControllerOutput {
	return o
}

func (o ServiceDeploymentControllerOutput) ToServiceDeploymentControllerOutputWithContext(ctx context.Context) ServiceDeploymentControllerOutput {
	return o
}

func (o ServiceDeploymentControllerOutput) ToServiceDeploymentControllerPtrOutput() ServiceDeploymentControllerPtrOutput {
	return o.ToServiceDeploymentControllerPtrOutputWithContext(context.Background())
}

func (o ServiceDeploymentControllerOutput) ToServiceDeploymentControllerPtrOutputWithContext(ctx context.Context) ServiceDeploymentControllerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceDeploymentController) *ServiceDeploymentController {
		return &v
	}).(ServiceDeploymentControllerPtrOutput)
}

func (o ServiceDeploymentControllerOutput) Type() ServiceDeploymentControllerTypePtrOutput {
	return o.ApplyT(func(v ServiceDeploymentController) *ServiceDeploymentControllerType { return v.Type }).(ServiceDeploymentControllerTypePtrOutput)
}

type ServiceDeploymentControllerPtrOutput struct{ *pulumi.OutputState }

func (ServiceDeploymentControllerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceDeploymentController)(nil)).Elem()
}

func (o ServiceDeploymentControllerPtrOutput) ToServiceDeploymentControllerPtrOutput() ServiceDeploymentControllerPtrOutput {
	return o
}

func (o ServiceDeploymentControllerPtrOutput) ToServiceDeploymentControllerPtrOutputWithContext(ctx context.Context) ServiceDeploymentControllerPtrOutput {
	return o
}

func (o ServiceDeploymentControllerPtrOutput) Elem() ServiceDeploymentControllerOutput {
	return o.ApplyT(func(v *ServiceDeploymentController) ServiceDeploymentController {
		if v != nil {
			return *v
		}
		var ret ServiceDeploymentController
		return ret
	}).(ServiceDeploymentControllerOutput)
}

func (o ServiceDeploymentControllerPtrOutput) Type() ServiceDeploymentControllerTypePtrOutput {
	return o.ApplyT(func(v *ServiceDeploymentController) *ServiceDeploymentControllerType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(ServiceDeploymentControllerTypePtrOutput)
}

type ServiceEbsTagSpecification struct {
	PropagateTags *ServiceEbsTagSpecificationPropagateTags `pulumi:"propagateTags"`
	ResourceType  string                                   `pulumi:"resourceType"`
	Tags          []ServiceTag                             `pulumi:"tags"`
}

// ServiceEbsTagSpecificationInput is an input type that accepts ServiceEbsTagSpecificationArgs and ServiceEbsTagSpecificationOutput values.
// You can construct a concrete instance of `ServiceEbsTagSpecificationInput` via:
//
//	ServiceEbsTagSpecificationArgs{...}
type ServiceEbsTagSpecificationInput interface {
	pulumi.Input

	ToServiceEbsTagSpecificationOutput() ServiceEbsTagSpecificationOutput
	ToServiceEbsTagSpecificationOutputWithContext(context.Context) ServiceEbsTagSpecificationOutput
}

type ServiceEbsTagSpecificationArgs struct {
	PropagateTags ServiceEbsTagSpecificationPropagateTagsPtrInput `pulumi:"propagateTags"`
	ResourceType  pulumi.StringInput                              `pulumi:"resourceType"`
	Tags          ServiceTagArrayInput                            `pulumi:"tags"`
}

func (ServiceEbsTagSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEbsTagSpecification)(nil)).Elem()
}

func (i ServiceEbsTagSpecificationArgs) ToServiceEbsTagSpecificationOutput() ServiceEbsTagSpecificationOutput {
	return i.ToServiceEbsTagSpecificationOutputWithContext(context.Background())
}

func (i ServiceEbsTagSpecificationArgs) ToServiceEbsTagSpecificationOutputWithContext(ctx context.Context) ServiceEbsTagSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEbsTagSpecificationOutput)
}

// ServiceEbsTagSpecificationArrayInput is an input type that accepts ServiceEbsTagSpecificationArray and ServiceEbsTagSpecificationArrayOutput values.
// You can construct a concrete instance of `ServiceEbsTagSpecificationArrayInput` via:
//
//	ServiceEbsTagSpecificationArray{ ServiceEbsTagSpecificationArgs{...} }
type ServiceEbsTagSpecificationArrayInput interface {
	pulumi.Input

	ToServiceEbsTagSpecificationArrayOutput() ServiceEbsTagSpecificationArrayOutput
	ToServiceEbsTagSpecificationArrayOutputWithContext(context.Context) ServiceEbsTagSpecificationArrayOutput
}

type ServiceEbsTagSpecificationArray []ServiceEbsTagSpecificationInput

func (ServiceEbsTagSpecificationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceEbsTagSpecification)(nil)).Elem()
}

func (i ServiceEbsTagSpecificationArray) ToServiceEbsTagSpecificationArrayOutput() ServiceEbsTagSpecificationArrayOutput {
	return i.ToServiceEbsTagSpecificationArrayOutputWithContext(context.Background())
}

func (i ServiceEbsTagSpecificationArray) ToServiceEbsTagSpecificationArrayOutputWithContext(ctx context.Context) ServiceEbsTagSpecificationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEbsTagSpecificationArrayOutput)
}

type ServiceEbsTagSpecificationOutput struct{ *pulumi.OutputState }

func (ServiceEbsTagSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEbsTagSpecification)(nil)).Elem()
}

func (o ServiceEbsTagSpecificationOutput) ToServiceEbsTagSpecificationOutput() ServiceEbsTagSpecificationOutput {
	return o
}

func (o ServiceEbsTagSpecificationOutput) ToServiceEbsTagSpecificationOutputWithContext(ctx context.Context) ServiceEbsTagSpecificationOutput {
	return o
}

func (o ServiceEbsTagSpecificationOutput) PropagateTags() ServiceEbsTagSpecificationPropagateTagsPtrOutput {
	return o.ApplyT(func(v ServiceEbsTagSpecification) *ServiceEbsTagSpecificationPropagateTags { return v.PropagateTags }).(ServiceEbsTagSpecificationPropagateTagsPtrOutput)
}

func (o ServiceEbsTagSpecificationOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceEbsTagSpecification) string { return v.ResourceType }).(pulumi.StringOutput)
}

func (o ServiceEbsTagSpecificationOutput) Tags() ServiceTagArrayOutput {
	return o.ApplyT(func(v ServiceEbsTagSpecification) []ServiceTag { return v.Tags }).(ServiceTagArrayOutput)
}

type ServiceEbsTagSpecificationArrayOutput struct{ *pulumi.OutputState }

func (ServiceEbsTagSpecificationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceEbsTagSpecification)(nil)).Elem()
}

func (o ServiceEbsTagSpecificationArrayOutput) ToServiceEbsTagSpecificationArrayOutput() ServiceEbsTagSpecificationArrayOutput {
	return o
}

func (o ServiceEbsTagSpecificationArrayOutput) ToServiceEbsTagSpecificationArrayOutputWithContext(ctx context.Context) ServiceEbsTagSpecificationArrayOutput {
	return o
}

func (o ServiceEbsTagSpecificationArrayOutput) Index(i pulumi.IntInput) ServiceEbsTagSpecificationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceEbsTagSpecification {
		return vs[0].([]ServiceEbsTagSpecification)[vs[1].(int)]
	}).(ServiceEbsTagSpecificationOutput)
}

type ServiceLoadBalancer struct {
	ContainerName    *string `pulumi:"containerName"`
	ContainerPort    *int    `pulumi:"containerPort"`
	LoadBalancerName *string `pulumi:"loadBalancerName"`
	TargetGroupArn   *string `pulumi:"targetGroupArn"`
}

// ServiceLoadBalancerInput is an input type that accepts ServiceLoadBalancerArgs and ServiceLoadBalancerOutput values.
// You can construct a concrete instance of `ServiceLoadBalancerInput` via:
//
//	ServiceLoadBalancerArgs{...}
type ServiceLoadBalancerInput interface {
	pulumi.Input

	ToServiceLoadBalancerOutput() ServiceLoadBalancerOutput
	ToServiceLoadBalancerOutputWithContext(context.Context) ServiceLoadBalancerOutput
}

type ServiceLoadBalancerArgs struct {
	ContainerName    pulumi.StringPtrInput `pulumi:"containerName"`
	ContainerPort    pulumi.IntPtrInput    `pulumi:"containerPort"`
	LoadBalancerName pulumi.StringPtrInput `pulumi:"loadBalancerName"`
	TargetGroupArn   pulumi.StringPtrInput `pulumi:"targetGroupArn"`
}

func (ServiceLoadBalancerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLoadBalancer)(nil)).Elem()
}

func (i ServiceLoadBalancerArgs) ToServiceLoadBalancerOutput() ServiceLoadBalancerOutput {
	return i.ToServiceLoadBalancerOutputWithContext(context.Background())
}

func (i ServiceLoadBalancerArgs) ToServiceLoadBalancerOutputWithContext(ctx context.Context) ServiceLoadBalancerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLoadBalancerOutput)
}

// ServiceLoadBalancerArrayInput is an input type that accepts ServiceLoadBalancerArray and ServiceLoadBalancerArrayOutput values.
// You can construct a concrete instance of `ServiceLoadBalancerArrayInput` via:
//
//	ServiceLoadBalancerArray{ ServiceLoadBalancerArgs{...} }
type ServiceLoadBalancerArrayInput interface {
	pulumi.Input

	ToServiceLoadBalancerArrayOutput() ServiceLoadBalancerArrayOutput
	ToServiceLoadBalancerArrayOutputWithContext(context.Context) ServiceLoadBalancerArrayOutput
}

type ServiceLoadBalancerArray []ServiceLoadBalancerInput

func (ServiceLoadBalancerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceLoadBalancer)(nil)).Elem()
}

func (i ServiceLoadBalancerArray) ToServiceLoadBalancerArrayOutput() ServiceLoadBalancerArrayOutput {
	return i.ToServiceLoadBalancerArrayOutputWithContext(context.Background())
}

func (i ServiceLoadBalancerArray) ToServiceLoadBalancerArrayOutputWithContext(ctx context.Context) ServiceLoadBalancerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLoadBalancerArrayOutput)
}

type ServiceLoadBalancerOutput struct{ *pulumi.OutputState }

func (ServiceLoadBalancerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLoadBalancer)(nil)).Elem()
}

func (o ServiceLoadBalancerOutput) ToServiceLoadBalancerOutput() ServiceLoadBalancerOutput {
	return o
}

func (o ServiceLoadBalancerOutput) ToServiceLoadBalancerOutputWithContext(ctx context.Context) ServiceLoadBalancerOutput {
	return o
}

func (o ServiceLoadBalancerOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceLoadBalancer) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

func (o ServiceLoadBalancerOutput) ContainerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceLoadBalancer) *int { return v.ContainerPort }).(pulumi.IntPtrOutput)
}

func (o ServiceLoadBalancerOutput) LoadBalancerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceLoadBalancer) *string { return v.LoadBalancerName }).(pulumi.StringPtrOutput)
}

func (o ServiceLoadBalancerOutput) TargetGroupArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceLoadBalancer) *string { return v.TargetGroupArn }).(pulumi.StringPtrOutput)
}

type ServiceLoadBalancerArrayOutput struct{ *pulumi.OutputState }

func (ServiceLoadBalancerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceLoadBalancer)(nil)).Elem()
}

func (o ServiceLoadBalancerArrayOutput) ToServiceLoadBalancerArrayOutput() ServiceLoadBalancerArrayOutput {
	return o
}

func (o ServiceLoadBalancerArrayOutput) ToServiceLoadBalancerArrayOutputWithContext(ctx context.Context) ServiceLoadBalancerArrayOutput {
	return o
}

func (o ServiceLoadBalancerArrayOutput) Index(i pulumi.IntInput) ServiceLoadBalancerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceLoadBalancer {
		return vs[0].([]ServiceLoadBalancer)[vs[1].(int)]
	}).(ServiceLoadBalancerOutput)
}

type ServiceLogConfiguration struct {
	LogDriver     *string           `pulumi:"logDriver"`
	Options       map[string]string `pulumi:"options"`
	SecretOptions []ServiceSecret   `pulumi:"secretOptions"`
}

// ServiceLogConfigurationInput is an input type that accepts ServiceLogConfigurationArgs and ServiceLogConfigurationOutput values.
// You can construct a concrete instance of `ServiceLogConfigurationInput` via:
//
//	ServiceLogConfigurationArgs{...}
type ServiceLogConfigurationInput interface {
	pulumi.Input

	ToServiceLogConfigurationOutput() ServiceLogConfigurationOutput
	ToServiceLogConfigurationOutputWithContext(context.Context) ServiceLogConfigurationOutput
}

type ServiceLogConfigurationArgs struct {
	LogDriver     pulumi.StringPtrInput   `pulumi:"logDriver"`
	Options       pulumi.StringMapInput   `pulumi:"options"`
	SecretOptions ServiceSecretArrayInput `pulumi:"secretOptions"`
}

func (ServiceLogConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLogConfiguration)(nil)).Elem()
}

func (i ServiceLogConfigurationArgs) ToServiceLogConfigurationOutput() ServiceLogConfigurationOutput {
	return i.ToServiceLogConfigurationOutputWithContext(context.Background())
}

func (i ServiceLogConfigurationArgs) ToServiceLogConfigurationOutputWithContext(ctx context.Context) ServiceLogConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLogConfigurationOutput)
}

func (i ServiceLogConfigurationArgs) ToServiceLogConfigurationPtrOutput() ServiceLogConfigurationPtrOutput {
	return i.ToServiceLogConfigurationPtrOutputWithContext(context.Background())
}

func (i ServiceLogConfigurationArgs) ToServiceLogConfigurationPtrOutputWithContext(ctx context.Context) ServiceLogConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLogConfigurationOutput).ToServiceLogConfigurationPtrOutputWithContext(ctx)
}

// ServiceLogConfigurationPtrInput is an input type that accepts ServiceLogConfigurationArgs, ServiceLogConfigurationPtr and ServiceLogConfigurationPtrOutput values.
// You can construct a concrete instance of `ServiceLogConfigurationPtrInput` via:
//
//	        ServiceLogConfigurationArgs{...}
//
//	or:
//
//	        nil
type ServiceLogConfigurationPtrInput interface {
	pulumi.Input

	ToServiceLogConfigurationPtrOutput() ServiceLogConfigurationPtrOutput
	ToServiceLogConfigurationPtrOutputWithContext(context.Context) ServiceLogConfigurationPtrOutput
}

type serviceLogConfigurationPtrType ServiceLogConfigurationArgs

func ServiceLogConfigurationPtr(v *ServiceLogConfigurationArgs) ServiceLogConfigurationPtrInput {
	return (*serviceLogConfigurationPtrType)(v)
}

func (*serviceLogConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLogConfiguration)(nil)).Elem()
}

func (i *serviceLogConfigurationPtrType) ToServiceLogConfigurationPtrOutput() ServiceLogConfigurationPtrOutput {
	return i.ToServiceLogConfigurationPtrOutputWithContext(context.Background())
}

func (i *serviceLogConfigurationPtrType) ToServiceLogConfigurationPtrOutputWithContext(ctx context.Context) ServiceLogConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLogConfigurationPtrOutput)
}

type ServiceLogConfigurationOutput struct{ *pulumi.OutputState }

func (ServiceLogConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLogConfiguration)(nil)).Elem()
}

func (o ServiceLogConfigurationOutput) ToServiceLogConfigurationOutput() ServiceLogConfigurationOutput {
	return o
}

func (o ServiceLogConfigurationOutput) ToServiceLogConfigurationOutputWithContext(ctx context.Context) ServiceLogConfigurationOutput {
	return o
}

func (o ServiceLogConfigurationOutput) ToServiceLogConfigurationPtrOutput() ServiceLogConfigurationPtrOutput {
	return o.ToServiceLogConfigurationPtrOutputWithContext(context.Background())
}

func (o ServiceLogConfigurationOutput) ToServiceLogConfigurationPtrOutputWithContext(ctx context.Context) ServiceLogConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceLogConfiguration) *ServiceLogConfiguration {
		return &v
	}).(ServiceLogConfigurationPtrOutput)
}

func (o ServiceLogConfigurationOutput) LogDriver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceLogConfiguration) *string { return v.LogDriver }).(pulumi.StringPtrOutput)
}

func (o ServiceLogConfigurationOutput) Options() pulumi.StringMapOutput {
	return o.ApplyT(func(v ServiceLogConfiguration) map[string]string { return v.Options }).(pulumi.StringMapOutput)
}

func (o ServiceLogConfigurationOutput) SecretOptions() ServiceSecretArrayOutput {
	return o.ApplyT(func(v ServiceLogConfiguration) []ServiceSecret { return v.SecretOptions }).(ServiceSecretArrayOutput)
}

type ServiceLogConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ServiceLogConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLogConfiguration)(nil)).Elem()
}

func (o ServiceLogConfigurationPtrOutput) ToServiceLogConfigurationPtrOutput() ServiceLogConfigurationPtrOutput {
	return o
}

func (o ServiceLogConfigurationPtrOutput) ToServiceLogConfigurationPtrOutputWithContext(ctx context.Context) ServiceLogConfigurationPtrOutput {
	return o
}

func (o ServiceLogConfigurationPtrOutput) Elem() ServiceLogConfigurationOutput {
	return o.ApplyT(func(v *ServiceLogConfiguration) ServiceLogConfiguration {
		if v != nil {
			return *v
		}
		var ret ServiceLogConfiguration
		return ret
	}).(ServiceLogConfigurationOutput)
}

func (o ServiceLogConfigurationPtrOutput) LogDriver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceLogConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.LogDriver
	}).(pulumi.StringPtrOutput)
}

func (o ServiceLogConfigurationPtrOutput) Options() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ServiceLogConfiguration) map[string]string {
		if v == nil {
			return nil
		}
		return v.Options
	}).(pulumi.StringMapOutput)
}

func (o ServiceLogConfigurationPtrOutput) SecretOptions() ServiceSecretArrayOutput {
	return o.ApplyT(func(v *ServiceLogConfiguration) []ServiceSecret {
		if v == nil {
			return nil
		}
		return v.SecretOptions
	}).(ServiceSecretArrayOutput)
}

type ServiceManagedEbsVolumeConfiguration struct {
	Encrypted         *bool                        `pulumi:"encrypted"`
	FilesystemType    *string                      `pulumi:"filesystemType"`
	Iops              *int                         `pulumi:"iops"`
	KmsKeyId          *string                      `pulumi:"kmsKeyId"`
	RoleArn           string                       `pulumi:"roleArn"`
	SizeInGiB         *int                         `pulumi:"sizeInGiB"`
	SnapshotId        *string                      `pulumi:"snapshotId"`
	TagSpecifications []ServiceEbsTagSpecification `pulumi:"tagSpecifications"`
	Throughput        *int                         `pulumi:"throughput"`
	VolumeType        *string                      `pulumi:"volumeType"`
}

// ServiceManagedEbsVolumeConfigurationInput is an input type that accepts ServiceManagedEbsVolumeConfigurationArgs and ServiceManagedEbsVolumeConfigurationOutput values.
// You can construct a concrete instance of `ServiceManagedEbsVolumeConfigurationInput` via:
//
//	ServiceManagedEbsVolumeConfigurationArgs{...}
type ServiceManagedEbsVolumeConfigurationInput interface {
	pulumi.Input

	ToServiceManagedEbsVolumeConfigurationOutput() ServiceManagedEbsVolumeConfigurationOutput
	ToServiceManagedEbsVolumeConfigurationOutputWithContext(context.Context) ServiceManagedEbsVolumeConfigurationOutput
}

type ServiceManagedEbsVolumeConfigurationArgs struct {
	Encrypted         pulumi.BoolPtrInput                  `pulumi:"encrypted"`
	FilesystemType    pulumi.StringPtrInput                `pulumi:"filesystemType"`
	Iops              pulumi.IntPtrInput                   `pulumi:"iops"`
	KmsKeyId          pulumi.StringPtrInput                `pulumi:"kmsKeyId"`
	RoleArn           pulumi.StringInput                   `pulumi:"roleArn"`
	SizeInGiB         pulumi.IntPtrInput                   `pulumi:"sizeInGiB"`
	SnapshotId        pulumi.StringPtrInput                `pulumi:"snapshotId"`
	TagSpecifications ServiceEbsTagSpecificationArrayInput `pulumi:"tagSpecifications"`
	Throughput        pulumi.IntPtrInput                   `pulumi:"throughput"`
	VolumeType        pulumi.StringPtrInput                `pulumi:"volumeType"`
}

func (ServiceManagedEbsVolumeConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceManagedEbsVolumeConfiguration)(nil)).Elem()
}

func (i ServiceManagedEbsVolumeConfigurationArgs) ToServiceManagedEbsVolumeConfigurationOutput() ServiceManagedEbsVolumeConfigurationOutput {
	return i.ToServiceManagedEbsVolumeConfigurationOutputWithContext(context.Background())
}

func (i ServiceManagedEbsVolumeConfigurationArgs) ToServiceManagedEbsVolumeConfigurationOutputWithContext(ctx context.Context) ServiceManagedEbsVolumeConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceManagedEbsVolumeConfigurationOutput)
}

func (i ServiceManagedEbsVolumeConfigurationArgs) ToServiceManagedEbsVolumeConfigurationPtrOutput() ServiceManagedEbsVolumeConfigurationPtrOutput {
	return i.ToServiceManagedEbsVolumeConfigurationPtrOutputWithContext(context.Background())
}

func (i ServiceManagedEbsVolumeConfigurationArgs) ToServiceManagedEbsVolumeConfigurationPtrOutputWithContext(ctx context.Context) ServiceManagedEbsVolumeConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceManagedEbsVolumeConfigurationOutput).ToServiceManagedEbsVolumeConfigurationPtrOutputWithContext(ctx)
}

// ServiceManagedEbsVolumeConfigurationPtrInput is an input type that accepts ServiceManagedEbsVolumeConfigurationArgs, ServiceManagedEbsVolumeConfigurationPtr and ServiceManagedEbsVolumeConfigurationPtrOutput values.
// You can construct a concrete instance of `ServiceManagedEbsVolumeConfigurationPtrInput` via:
//
//	        ServiceManagedEbsVolumeConfigurationArgs{...}
//
//	or:
//
//	        nil
type ServiceManagedEbsVolumeConfigurationPtrInput interface {
	pulumi.Input

	ToServiceManagedEbsVolumeConfigurationPtrOutput() ServiceManagedEbsVolumeConfigurationPtrOutput
	ToServiceManagedEbsVolumeConfigurationPtrOutputWithContext(context.Context) ServiceManagedEbsVolumeConfigurationPtrOutput
}

type serviceManagedEbsVolumeConfigurationPtrType ServiceManagedEbsVolumeConfigurationArgs

func ServiceManagedEbsVolumeConfigurationPtr(v *ServiceManagedEbsVolumeConfigurationArgs) ServiceManagedEbsVolumeConfigurationPtrInput {
	return (*serviceManagedEbsVolumeConfigurationPtrType)(v)
}

func (*serviceManagedEbsVolumeConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceManagedEbsVolumeConfiguration)(nil)).Elem()
}

func (i *serviceManagedEbsVolumeConfigurationPtrType) ToServiceManagedEbsVolumeConfigurationPtrOutput() ServiceManagedEbsVolumeConfigurationPtrOutput {
	return i.ToServiceManagedEbsVolumeConfigurationPtrOutputWithContext(context.Background())
}

func (i *serviceManagedEbsVolumeConfigurationPtrType) ToServiceManagedEbsVolumeConfigurationPtrOutputWithContext(ctx context.Context) ServiceManagedEbsVolumeConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceManagedEbsVolumeConfigurationPtrOutput)
}

type ServiceManagedEbsVolumeConfigurationOutput struct{ *pulumi.OutputState }

func (ServiceManagedEbsVolumeConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceManagedEbsVolumeConfiguration)(nil)).Elem()
}

func (o ServiceManagedEbsVolumeConfigurationOutput) ToServiceManagedEbsVolumeConfigurationOutput() ServiceManagedEbsVolumeConfigurationOutput {
	return o
}

func (o ServiceManagedEbsVolumeConfigurationOutput) ToServiceManagedEbsVolumeConfigurationOutputWithContext(ctx context.Context) ServiceManagedEbsVolumeConfigurationOutput {
	return o
}

func (o ServiceManagedEbsVolumeConfigurationOutput) ToServiceManagedEbsVolumeConfigurationPtrOutput() ServiceManagedEbsVolumeConfigurationPtrOutput {
	return o.ToServiceManagedEbsVolumeConfigurationPtrOutputWithContext(context.Background())
}

func (o ServiceManagedEbsVolumeConfigurationOutput) ToServiceManagedEbsVolumeConfigurationPtrOutputWithContext(ctx context.Context) ServiceManagedEbsVolumeConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceManagedEbsVolumeConfiguration) *ServiceManagedEbsVolumeConfiguration {
		return &v
	}).(ServiceManagedEbsVolumeConfigurationPtrOutput)
}

func (o ServiceManagedEbsVolumeConfigurationOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceManagedEbsVolumeConfiguration) *bool { return v.Encrypted }).(pulumi.BoolPtrOutput)
}

func (o ServiceManagedEbsVolumeConfigurationOutput) FilesystemType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceManagedEbsVolumeConfiguration) *string { return v.FilesystemType }).(pulumi.StringPtrOutput)
}

func (o ServiceManagedEbsVolumeConfigurationOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceManagedEbsVolumeConfiguration) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

func (o ServiceManagedEbsVolumeConfigurationOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceManagedEbsVolumeConfiguration) *string { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

func (o ServiceManagedEbsVolumeConfigurationOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceManagedEbsVolumeConfiguration) string { return v.RoleArn }).(pulumi.StringOutput)
}

func (o ServiceManagedEbsVolumeConfigurationOutput) SizeInGiB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceManagedEbsVolumeConfiguration) *int { return v.SizeInGiB }).(pulumi.IntPtrOutput)
}

func (o ServiceManagedEbsVolumeConfigurationOutput) SnapshotId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceManagedEbsVolumeConfiguration) *string { return v.SnapshotId }).(pulumi.StringPtrOutput)
}

func (o ServiceManagedEbsVolumeConfigurationOutput) TagSpecifications() ServiceEbsTagSpecificationArrayOutput {
	return o.ApplyT(func(v ServiceManagedEbsVolumeConfiguration) []ServiceEbsTagSpecification { return v.TagSpecifications }).(ServiceEbsTagSpecificationArrayOutput)
}

func (o ServiceManagedEbsVolumeConfigurationOutput) Throughput() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceManagedEbsVolumeConfiguration) *int { return v.Throughput }).(pulumi.IntPtrOutput)
}

func (o ServiceManagedEbsVolumeConfigurationOutput) VolumeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceManagedEbsVolumeConfiguration) *string { return v.VolumeType }).(pulumi.StringPtrOutput)
}

type ServiceManagedEbsVolumeConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ServiceManagedEbsVolumeConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceManagedEbsVolumeConfiguration)(nil)).Elem()
}

func (o ServiceManagedEbsVolumeConfigurationPtrOutput) ToServiceManagedEbsVolumeConfigurationPtrOutput() ServiceManagedEbsVolumeConfigurationPtrOutput {
	return o
}

func (o ServiceManagedEbsVolumeConfigurationPtrOutput) ToServiceManagedEbsVolumeConfigurationPtrOutputWithContext(ctx context.Context) ServiceManagedEbsVolumeConfigurationPtrOutput {
	return o
}

func (o ServiceManagedEbsVolumeConfigurationPtrOutput) Elem() ServiceManagedEbsVolumeConfigurationOutput {
	return o.ApplyT(func(v *ServiceManagedEbsVolumeConfiguration) ServiceManagedEbsVolumeConfiguration {
		if v != nil {
			return *v
		}
		var ret ServiceManagedEbsVolumeConfiguration
		return ret
	}).(ServiceManagedEbsVolumeConfigurationOutput)
}

func (o ServiceManagedEbsVolumeConfigurationPtrOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceManagedEbsVolumeConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.Encrypted
	}).(pulumi.BoolPtrOutput)
}

func (o ServiceManagedEbsVolumeConfigurationPtrOutput) FilesystemType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceManagedEbsVolumeConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.FilesystemType
	}).(pulumi.StringPtrOutput)
}

func (o ServiceManagedEbsVolumeConfigurationPtrOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceManagedEbsVolumeConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.Iops
	}).(pulumi.IntPtrOutput)
}

func (o ServiceManagedEbsVolumeConfigurationPtrOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceManagedEbsVolumeConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyId
	}).(pulumi.StringPtrOutput)
}

func (o ServiceManagedEbsVolumeConfigurationPtrOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceManagedEbsVolumeConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.RoleArn
	}).(pulumi.StringPtrOutput)
}

func (o ServiceManagedEbsVolumeConfigurationPtrOutput) SizeInGiB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceManagedEbsVolumeConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.SizeInGiB
	}).(pulumi.IntPtrOutput)
}

func (o ServiceManagedEbsVolumeConfigurationPtrOutput) SnapshotId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceManagedEbsVolumeConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.SnapshotId
	}).(pulumi.StringPtrOutput)
}

func (o ServiceManagedEbsVolumeConfigurationPtrOutput) TagSpecifications() ServiceEbsTagSpecificationArrayOutput {
	return o.ApplyT(func(v *ServiceManagedEbsVolumeConfiguration) []ServiceEbsTagSpecification {
		if v == nil {
			return nil
		}
		return v.TagSpecifications
	}).(ServiceEbsTagSpecificationArrayOutput)
}

func (o ServiceManagedEbsVolumeConfigurationPtrOutput) Throughput() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceManagedEbsVolumeConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.Throughput
	}).(pulumi.IntPtrOutput)
}

func (o ServiceManagedEbsVolumeConfigurationPtrOutput) VolumeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceManagedEbsVolumeConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.VolumeType
	}).(pulumi.StringPtrOutput)
}

type ServiceNetworkConfiguration struct {
	AwsvpcConfiguration *ServiceAwsVpcConfiguration `pulumi:"awsvpcConfiguration"`
}

// ServiceNetworkConfigurationInput is an input type that accepts ServiceNetworkConfigurationArgs and ServiceNetworkConfigurationOutput values.
// You can construct a concrete instance of `ServiceNetworkConfigurationInput` via:
//
//	ServiceNetworkConfigurationArgs{...}
type ServiceNetworkConfigurationInput interface {
	pulumi.Input

	ToServiceNetworkConfigurationOutput() ServiceNetworkConfigurationOutput
	ToServiceNetworkConfigurationOutputWithContext(context.Context) ServiceNetworkConfigurationOutput
}

type ServiceNetworkConfigurationArgs struct {
	AwsvpcConfiguration ServiceAwsVpcConfigurationPtrInput `pulumi:"awsvpcConfiguration"`
}

func (ServiceNetworkConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNetworkConfiguration)(nil)).Elem()
}

func (i ServiceNetworkConfigurationArgs) ToServiceNetworkConfigurationOutput() ServiceNetworkConfigurationOutput {
	return i.ToServiceNetworkConfigurationOutputWithContext(context.Background())
}

func (i ServiceNetworkConfigurationArgs) ToServiceNetworkConfigurationOutputWithContext(ctx context.Context) ServiceNetworkConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceNetworkConfigurationOutput)
}

func (i ServiceNetworkConfigurationArgs) ToServiceNetworkConfigurationPtrOutput() ServiceNetworkConfigurationPtrOutput {
	return i.ToServiceNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (i ServiceNetworkConfigurationArgs) ToServiceNetworkConfigurationPtrOutputWithContext(ctx context.Context) ServiceNetworkConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceNetworkConfigurationOutput).ToServiceNetworkConfigurationPtrOutputWithContext(ctx)
}

// ServiceNetworkConfigurationPtrInput is an input type that accepts ServiceNetworkConfigurationArgs, ServiceNetworkConfigurationPtr and ServiceNetworkConfigurationPtrOutput values.
// You can construct a concrete instance of `ServiceNetworkConfigurationPtrInput` via:
//
//	        ServiceNetworkConfigurationArgs{...}
//
//	or:
//
//	        nil
type ServiceNetworkConfigurationPtrInput interface {
	pulumi.Input

	ToServiceNetworkConfigurationPtrOutput() ServiceNetworkConfigurationPtrOutput
	ToServiceNetworkConfigurationPtrOutputWithContext(context.Context) ServiceNetworkConfigurationPtrOutput
}

type serviceNetworkConfigurationPtrType ServiceNetworkConfigurationArgs

func ServiceNetworkConfigurationPtr(v *ServiceNetworkConfigurationArgs) ServiceNetworkConfigurationPtrInput {
	return (*serviceNetworkConfigurationPtrType)(v)
}

func (*serviceNetworkConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceNetworkConfiguration)(nil)).Elem()
}

func (i *serviceNetworkConfigurationPtrType) ToServiceNetworkConfigurationPtrOutput() ServiceNetworkConfigurationPtrOutput {
	return i.ToServiceNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (i *serviceNetworkConfigurationPtrType) ToServiceNetworkConfigurationPtrOutputWithContext(ctx context.Context) ServiceNetworkConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceNetworkConfigurationPtrOutput)
}

type ServiceNetworkConfigurationOutput struct{ *pulumi.OutputState }

func (ServiceNetworkConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNetworkConfiguration)(nil)).Elem()
}

func (o ServiceNetworkConfigurationOutput) ToServiceNetworkConfigurationOutput() ServiceNetworkConfigurationOutput {
	return o
}

func (o ServiceNetworkConfigurationOutput) ToServiceNetworkConfigurationOutputWithContext(ctx context.Context) ServiceNetworkConfigurationOutput {
	return o
}

func (o ServiceNetworkConfigurationOutput) ToServiceNetworkConfigurationPtrOutput() ServiceNetworkConfigurationPtrOutput {
	return o.ToServiceNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (o ServiceNetworkConfigurationOutput) ToServiceNetworkConfigurationPtrOutputWithContext(ctx context.Context) ServiceNetworkConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceNetworkConfiguration) *ServiceNetworkConfiguration {
		return &v
	}).(ServiceNetworkConfigurationPtrOutput)
}

func (o ServiceNetworkConfigurationOutput) AwsvpcConfiguration() ServiceAwsVpcConfigurationPtrOutput {
	return o.ApplyT(func(v ServiceNetworkConfiguration) *ServiceAwsVpcConfiguration { return v.AwsvpcConfiguration }).(ServiceAwsVpcConfigurationPtrOutput)
}

type ServiceNetworkConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ServiceNetworkConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceNetworkConfiguration)(nil)).Elem()
}

func (o ServiceNetworkConfigurationPtrOutput) ToServiceNetworkConfigurationPtrOutput() ServiceNetworkConfigurationPtrOutput {
	return o
}

func (o ServiceNetworkConfigurationPtrOutput) ToServiceNetworkConfigurationPtrOutputWithContext(ctx context.Context) ServiceNetworkConfigurationPtrOutput {
	return o
}

func (o ServiceNetworkConfigurationPtrOutput) Elem() ServiceNetworkConfigurationOutput {
	return o.ApplyT(func(v *ServiceNetworkConfiguration) ServiceNetworkConfiguration {
		if v != nil {
			return *v
		}
		var ret ServiceNetworkConfiguration
		return ret
	}).(ServiceNetworkConfigurationOutput)
}

func (o ServiceNetworkConfigurationPtrOutput) AwsvpcConfiguration() ServiceAwsVpcConfigurationPtrOutput {
	return o.ApplyT(func(v *ServiceNetworkConfiguration) *ServiceAwsVpcConfiguration {
		if v == nil {
			return nil
		}
		return v.AwsvpcConfiguration
	}).(ServiceAwsVpcConfigurationPtrOutput)
}

type ServicePlacementConstraint struct {
	Expression *string                        `pulumi:"expression"`
	Type       ServicePlacementConstraintType `pulumi:"type"`
}

// ServicePlacementConstraintInput is an input type that accepts ServicePlacementConstraintArgs and ServicePlacementConstraintOutput values.
// You can construct a concrete instance of `ServicePlacementConstraintInput` via:
//
//	ServicePlacementConstraintArgs{...}
type ServicePlacementConstraintInput interface {
	pulumi.Input

	ToServicePlacementConstraintOutput() ServicePlacementConstraintOutput
	ToServicePlacementConstraintOutputWithContext(context.Context) ServicePlacementConstraintOutput
}

type ServicePlacementConstraintArgs struct {
	Expression pulumi.StringPtrInput               `pulumi:"expression"`
	Type       ServicePlacementConstraintTypeInput `pulumi:"type"`
}

func (ServicePlacementConstraintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePlacementConstraint)(nil)).Elem()
}

func (i ServicePlacementConstraintArgs) ToServicePlacementConstraintOutput() ServicePlacementConstraintOutput {
	return i.ToServicePlacementConstraintOutputWithContext(context.Background())
}

func (i ServicePlacementConstraintArgs) ToServicePlacementConstraintOutputWithContext(ctx context.Context) ServicePlacementConstraintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePlacementConstraintOutput)
}

// ServicePlacementConstraintArrayInput is an input type that accepts ServicePlacementConstraintArray and ServicePlacementConstraintArrayOutput values.
// You can construct a concrete instance of `ServicePlacementConstraintArrayInput` via:
//
//	ServicePlacementConstraintArray{ ServicePlacementConstraintArgs{...} }
type ServicePlacementConstraintArrayInput interface {
	pulumi.Input

	ToServicePlacementConstraintArrayOutput() ServicePlacementConstraintArrayOutput
	ToServicePlacementConstraintArrayOutputWithContext(context.Context) ServicePlacementConstraintArrayOutput
}

type ServicePlacementConstraintArray []ServicePlacementConstraintInput

func (ServicePlacementConstraintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServicePlacementConstraint)(nil)).Elem()
}

func (i ServicePlacementConstraintArray) ToServicePlacementConstraintArrayOutput() ServicePlacementConstraintArrayOutput {
	return i.ToServicePlacementConstraintArrayOutputWithContext(context.Background())
}

func (i ServicePlacementConstraintArray) ToServicePlacementConstraintArrayOutputWithContext(ctx context.Context) ServicePlacementConstraintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePlacementConstraintArrayOutput)
}

type ServicePlacementConstraintOutput struct{ *pulumi.OutputState }

func (ServicePlacementConstraintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePlacementConstraint)(nil)).Elem()
}

func (o ServicePlacementConstraintOutput) ToServicePlacementConstraintOutput() ServicePlacementConstraintOutput {
	return o
}

func (o ServicePlacementConstraintOutput) ToServicePlacementConstraintOutputWithContext(ctx context.Context) ServicePlacementConstraintOutput {
	return o
}

func (o ServicePlacementConstraintOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePlacementConstraint) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

func (o ServicePlacementConstraintOutput) Type() ServicePlacementConstraintTypeOutput {
	return o.ApplyT(func(v ServicePlacementConstraint) ServicePlacementConstraintType { return v.Type }).(ServicePlacementConstraintTypeOutput)
}

type ServicePlacementConstraintArrayOutput struct{ *pulumi.OutputState }

func (ServicePlacementConstraintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServicePlacementConstraint)(nil)).Elem()
}

func (o ServicePlacementConstraintArrayOutput) ToServicePlacementConstraintArrayOutput() ServicePlacementConstraintArrayOutput {
	return o
}

func (o ServicePlacementConstraintArrayOutput) ToServicePlacementConstraintArrayOutputWithContext(ctx context.Context) ServicePlacementConstraintArrayOutput {
	return o
}

func (o ServicePlacementConstraintArrayOutput) Index(i pulumi.IntInput) ServicePlacementConstraintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServicePlacementConstraint {
		return vs[0].([]ServicePlacementConstraint)[vs[1].(int)]
	}).(ServicePlacementConstraintOutput)
}

type ServicePlacementStrategy struct {
	Field *string                      `pulumi:"field"`
	Type  ServicePlacementStrategyType `pulumi:"type"`
}

// ServicePlacementStrategyInput is an input type that accepts ServicePlacementStrategyArgs and ServicePlacementStrategyOutput values.
// You can construct a concrete instance of `ServicePlacementStrategyInput` via:
//
//	ServicePlacementStrategyArgs{...}
type ServicePlacementStrategyInput interface {
	pulumi.Input

	ToServicePlacementStrategyOutput() ServicePlacementStrategyOutput
	ToServicePlacementStrategyOutputWithContext(context.Context) ServicePlacementStrategyOutput
}

type ServicePlacementStrategyArgs struct {
	Field pulumi.StringPtrInput             `pulumi:"field"`
	Type  ServicePlacementStrategyTypeInput `pulumi:"type"`
}

func (ServicePlacementStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePlacementStrategy)(nil)).Elem()
}

func (i ServicePlacementStrategyArgs) ToServicePlacementStrategyOutput() ServicePlacementStrategyOutput {
	return i.ToServicePlacementStrategyOutputWithContext(context.Background())
}

func (i ServicePlacementStrategyArgs) ToServicePlacementStrategyOutputWithContext(ctx context.Context) ServicePlacementStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePlacementStrategyOutput)
}

// ServicePlacementStrategyArrayInput is an input type that accepts ServicePlacementStrategyArray and ServicePlacementStrategyArrayOutput values.
// You can construct a concrete instance of `ServicePlacementStrategyArrayInput` via:
//
//	ServicePlacementStrategyArray{ ServicePlacementStrategyArgs{...} }
type ServicePlacementStrategyArrayInput interface {
	pulumi.Input

	ToServicePlacementStrategyArrayOutput() ServicePlacementStrategyArrayOutput
	ToServicePlacementStrategyArrayOutputWithContext(context.Context) ServicePlacementStrategyArrayOutput
}

type ServicePlacementStrategyArray []ServicePlacementStrategyInput

func (ServicePlacementStrategyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServicePlacementStrategy)(nil)).Elem()
}

func (i ServicePlacementStrategyArray) ToServicePlacementStrategyArrayOutput() ServicePlacementStrategyArrayOutput {
	return i.ToServicePlacementStrategyArrayOutputWithContext(context.Background())
}

func (i ServicePlacementStrategyArray) ToServicePlacementStrategyArrayOutputWithContext(ctx context.Context) ServicePlacementStrategyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePlacementStrategyArrayOutput)
}

type ServicePlacementStrategyOutput struct{ *pulumi.OutputState }

func (ServicePlacementStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePlacementStrategy)(nil)).Elem()
}

func (o ServicePlacementStrategyOutput) ToServicePlacementStrategyOutput() ServicePlacementStrategyOutput {
	return o
}

func (o ServicePlacementStrategyOutput) ToServicePlacementStrategyOutputWithContext(ctx context.Context) ServicePlacementStrategyOutput {
	return o
}

func (o ServicePlacementStrategyOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePlacementStrategy) *string { return v.Field }).(pulumi.StringPtrOutput)
}

func (o ServicePlacementStrategyOutput) Type() ServicePlacementStrategyTypeOutput {
	return o.ApplyT(func(v ServicePlacementStrategy) ServicePlacementStrategyType { return v.Type }).(ServicePlacementStrategyTypeOutput)
}

type ServicePlacementStrategyArrayOutput struct{ *pulumi.OutputState }

func (ServicePlacementStrategyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServicePlacementStrategy)(nil)).Elem()
}

func (o ServicePlacementStrategyArrayOutput) ToServicePlacementStrategyArrayOutput() ServicePlacementStrategyArrayOutput {
	return o
}

func (o ServicePlacementStrategyArrayOutput) ToServicePlacementStrategyArrayOutputWithContext(ctx context.Context) ServicePlacementStrategyArrayOutput {
	return o
}

func (o ServicePlacementStrategyArrayOutput) Index(i pulumi.IntInput) ServicePlacementStrategyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServicePlacementStrategy {
		return vs[0].([]ServicePlacementStrategy)[vs[1].(int)]
	}).(ServicePlacementStrategyOutput)
}

type ServiceRegistry struct {
	ContainerName *string `pulumi:"containerName"`
	ContainerPort *int    `pulumi:"containerPort"`
	Port          *int    `pulumi:"port"`
	RegistryArn   *string `pulumi:"registryArn"`
}

// ServiceRegistryInput is an input type that accepts ServiceRegistryArgs and ServiceRegistryOutput values.
// You can construct a concrete instance of `ServiceRegistryInput` via:
//
//	ServiceRegistryArgs{...}
type ServiceRegistryInput interface {
	pulumi.Input

	ToServiceRegistryOutput() ServiceRegistryOutput
	ToServiceRegistryOutputWithContext(context.Context) ServiceRegistryOutput
}

type ServiceRegistryArgs struct {
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	ContainerPort pulumi.IntPtrInput    `pulumi:"containerPort"`
	Port          pulumi.IntPtrInput    `pulumi:"port"`
	RegistryArn   pulumi.StringPtrInput `pulumi:"registryArn"`
}

func (ServiceRegistryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceRegistry)(nil)).Elem()
}

func (i ServiceRegistryArgs) ToServiceRegistryOutput() ServiceRegistryOutput {
	return i.ToServiceRegistryOutputWithContext(context.Background())
}

func (i ServiceRegistryArgs) ToServiceRegistryOutputWithContext(ctx context.Context) ServiceRegistryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceRegistryOutput)
}

// ServiceRegistryArrayInput is an input type that accepts ServiceRegistryArray and ServiceRegistryArrayOutput values.
// You can construct a concrete instance of `ServiceRegistryArrayInput` via:
//
//	ServiceRegistryArray{ ServiceRegistryArgs{...} }
type ServiceRegistryArrayInput interface {
	pulumi.Input

	ToServiceRegistryArrayOutput() ServiceRegistryArrayOutput
	ToServiceRegistryArrayOutputWithContext(context.Context) ServiceRegistryArrayOutput
}

type ServiceRegistryArray []ServiceRegistryInput

func (ServiceRegistryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceRegistry)(nil)).Elem()
}

func (i ServiceRegistryArray) ToServiceRegistryArrayOutput() ServiceRegistryArrayOutput {
	return i.ToServiceRegistryArrayOutputWithContext(context.Background())
}

func (i ServiceRegistryArray) ToServiceRegistryArrayOutputWithContext(ctx context.Context) ServiceRegistryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceRegistryArrayOutput)
}

type ServiceRegistryOutput struct{ *pulumi.OutputState }

func (ServiceRegistryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceRegistry)(nil)).Elem()
}

func (o ServiceRegistryOutput) ToServiceRegistryOutput() ServiceRegistryOutput {
	return o
}

func (o ServiceRegistryOutput) ToServiceRegistryOutputWithContext(ctx context.Context) ServiceRegistryOutput {
	return o
}

func (o ServiceRegistryOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceRegistry) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

func (o ServiceRegistryOutput) ContainerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceRegistry) *int { return v.ContainerPort }).(pulumi.IntPtrOutput)
}

func (o ServiceRegistryOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceRegistry) *int { return v.Port }).(pulumi.IntPtrOutput)
}

func (o ServiceRegistryOutput) RegistryArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceRegistry) *string { return v.RegistryArn }).(pulumi.StringPtrOutput)
}

type ServiceRegistryArrayOutput struct{ *pulumi.OutputState }

func (ServiceRegistryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceRegistry)(nil)).Elem()
}

func (o ServiceRegistryArrayOutput) ToServiceRegistryArrayOutput() ServiceRegistryArrayOutput {
	return o
}

func (o ServiceRegistryArrayOutput) ToServiceRegistryArrayOutputWithContext(ctx context.Context) ServiceRegistryArrayOutput {
	return o
}

func (o ServiceRegistryArrayOutput) Index(i pulumi.IntInput) ServiceRegistryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceRegistry {
		return vs[0].([]ServiceRegistry)[vs[1].(int)]
	}).(ServiceRegistryOutput)
}

type ServiceSecret struct {
	Name      string `pulumi:"name"`
	ValueFrom string `pulumi:"valueFrom"`
}

// ServiceSecretInput is an input type that accepts ServiceSecretArgs and ServiceSecretOutput values.
// You can construct a concrete instance of `ServiceSecretInput` via:
//
//	ServiceSecretArgs{...}
type ServiceSecretInput interface {
	pulumi.Input

	ToServiceSecretOutput() ServiceSecretOutput
	ToServiceSecretOutputWithContext(context.Context) ServiceSecretOutput
}

type ServiceSecretArgs struct {
	Name      pulumi.StringInput `pulumi:"name"`
	ValueFrom pulumi.StringInput `pulumi:"valueFrom"`
}

func (ServiceSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSecret)(nil)).Elem()
}

func (i ServiceSecretArgs) ToServiceSecretOutput() ServiceSecretOutput {
	return i.ToServiceSecretOutputWithContext(context.Background())
}

func (i ServiceSecretArgs) ToServiceSecretOutputWithContext(ctx context.Context) ServiceSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSecretOutput)
}

// ServiceSecretArrayInput is an input type that accepts ServiceSecretArray and ServiceSecretArrayOutput values.
// You can construct a concrete instance of `ServiceSecretArrayInput` via:
//
//	ServiceSecretArray{ ServiceSecretArgs{...} }
type ServiceSecretArrayInput interface {
	pulumi.Input

	ToServiceSecretArrayOutput() ServiceSecretArrayOutput
	ToServiceSecretArrayOutputWithContext(context.Context) ServiceSecretArrayOutput
}

type ServiceSecretArray []ServiceSecretInput

func (ServiceSecretArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceSecret)(nil)).Elem()
}

func (i ServiceSecretArray) ToServiceSecretArrayOutput() ServiceSecretArrayOutput {
	return i.ToServiceSecretArrayOutputWithContext(context.Background())
}

func (i ServiceSecretArray) ToServiceSecretArrayOutputWithContext(ctx context.Context) ServiceSecretArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSecretArrayOutput)
}

type ServiceSecretOutput struct{ *pulumi.OutputState }

func (ServiceSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSecret)(nil)).Elem()
}

func (o ServiceSecretOutput) ToServiceSecretOutput() ServiceSecretOutput {
	return o
}

func (o ServiceSecretOutput) ToServiceSecretOutputWithContext(ctx context.Context) ServiceSecretOutput {
	return o
}

func (o ServiceSecretOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceSecret) string { return v.Name }).(pulumi.StringOutput)
}

func (o ServiceSecretOutput) ValueFrom() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceSecret) string { return v.ValueFrom }).(pulumi.StringOutput)
}

type ServiceSecretArrayOutput struct{ *pulumi.OutputState }

func (ServiceSecretArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceSecret)(nil)).Elem()
}

func (o ServiceSecretArrayOutput) ToServiceSecretArrayOutput() ServiceSecretArrayOutput {
	return o
}

func (o ServiceSecretArrayOutput) ToServiceSecretArrayOutputWithContext(ctx context.Context) ServiceSecretArrayOutput {
	return o
}

func (o ServiceSecretArrayOutput) Index(i pulumi.IntInput) ServiceSecretOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceSecret {
		return vs[0].([]ServiceSecret)[vs[1].(int)]
	}).(ServiceSecretOutput)
}

type ServiceTag struct {
	Key   *string `pulumi:"key"`
	Value *string `pulumi:"value"`
}

// ServiceTagInput is an input type that accepts ServiceTagArgs and ServiceTagOutput values.
// You can construct a concrete instance of `ServiceTagInput` via:
//
//	ServiceTagArgs{...}
type ServiceTagInput interface {
	pulumi.Input

	ToServiceTagOutput() ServiceTagOutput
	ToServiceTagOutputWithContext(context.Context) ServiceTagOutput
}

type ServiceTagArgs struct {
	Key   pulumi.StringPtrInput `pulumi:"key"`
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ServiceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTag)(nil)).Elem()
}

func (i ServiceTagArgs) ToServiceTagOutput() ServiceTagOutput {
	return i.ToServiceTagOutputWithContext(context.Background())
}

func (i ServiceTagArgs) ToServiceTagOutputWithContext(ctx context.Context) ServiceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTagOutput)
}

// ServiceTagArrayInput is an input type that accepts ServiceTagArray and ServiceTagArrayOutput values.
// You can construct a concrete instance of `ServiceTagArrayInput` via:
//
//	ServiceTagArray{ ServiceTagArgs{...} }
type ServiceTagArrayInput interface {
	pulumi.Input

	ToServiceTagArrayOutput() ServiceTagArrayOutput
	ToServiceTagArrayOutputWithContext(context.Context) ServiceTagArrayOutput
}

type ServiceTagArray []ServiceTagInput

func (ServiceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceTag)(nil)).Elem()
}

func (i ServiceTagArray) ToServiceTagArrayOutput() ServiceTagArrayOutput {
	return i.ToServiceTagArrayOutputWithContext(context.Background())
}

func (i ServiceTagArray) ToServiceTagArrayOutputWithContext(ctx context.Context) ServiceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTagArrayOutput)
}

type ServiceTagOutput struct{ *pulumi.OutputState }

func (ServiceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTag)(nil)).Elem()
}

func (o ServiceTagOutput) ToServiceTagOutput() ServiceTagOutput {
	return o
}

func (o ServiceTagOutput) ToServiceTagOutputWithContext(ctx context.Context) ServiceTagOutput {
	return o
}

func (o ServiceTagOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTag) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o ServiceTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ServiceTagArrayOutput struct{ *pulumi.OutputState }

func (ServiceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceTag)(nil)).Elem()
}

func (o ServiceTagArrayOutput) ToServiceTagArrayOutput() ServiceTagArrayOutput {
	return o
}

func (o ServiceTagArrayOutput) ToServiceTagArrayOutputWithContext(ctx context.Context) ServiceTagArrayOutput {
	return o
}

func (o ServiceTagArrayOutput) Index(i pulumi.IntInput) ServiceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceTag {
		return vs[0].([]ServiceTag)[vs[1].(int)]
	}).(ServiceTagOutput)
}

type ServiceTimeoutConfiguration struct {
	IdleTimeoutSeconds       *int `pulumi:"idleTimeoutSeconds"`
	PerRequestTimeoutSeconds *int `pulumi:"perRequestTimeoutSeconds"`
}

// ServiceTimeoutConfigurationInput is an input type that accepts ServiceTimeoutConfigurationArgs and ServiceTimeoutConfigurationOutput values.
// You can construct a concrete instance of `ServiceTimeoutConfigurationInput` via:
//
//	ServiceTimeoutConfigurationArgs{...}
type ServiceTimeoutConfigurationInput interface {
	pulumi.Input

	ToServiceTimeoutConfigurationOutput() ServiceTimeoutConfigurationOutput
	ToServiceTimeoutConfigurationOutputWithContext(context.Context) ServiceTimeoutConfigurationOutput
}

type ServiceTimeoutConfigurationArgs struct {
	IdleTimeoutSeconds       pulumi.IntPtrInput `pulumi:"idleTimeoutSeconds"`
	PerRequestTimeoutSeconds pulumi.IntPtrInput `pulumi:"perRequestTimeoutSeconds"`
}

func (ServiceTimeoutConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTimeoutConfiguration)(nil)).Elem()
}

func (i ServiceTimeoutConfigurationArgs) ToServiceTimeoutConfigurationOutput() ServiceTimeoutConfigurationOutput {
	return i.ToServiceTimeoutConfigurationOutputWithContext(context.Background())
}

func (i ServiceTimeoutConfigurationArgs) ToServiceTimeoutConfigurationOutputWithContext(ctx context.Context) ServiceTimeoutConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTimeoutConfigurationOutput)
}

func (i ServiceTimeoutConfigurationArgs) ToServiceTimeoutConfigurationPtrOutput() ServiceTimeoutConfigurationPtrOutput {
	return i.ToServiceTimeoutConfigurationPtrOutputWithContext(context.Background())
}

func (i ServiceTimeoutConfigurationArgs) ToServiceTimeoutConfigurationPtrOutputWithContext(ctx context.Context) ServiceTimeoutConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTimeoutConfigurationOutput).ToServiceTimeoutConfigurationPtrOutputWithContext(ctx)
}

// ServiceTimeoutConfigurationPtrInput is an input type that accepts ServiceTimeoutConfigurationArgs, ServiceTimeoutConfigurationPtr and ServiceTimeoutConfigurationPtrOutput values.
// You can construct a concrete instance of `ServiceTimeoutConfigurationPtrInput` via:
//
//	        ServiceTimeoutConfigurationArgs{...}
//
//	or:
//
//	        nil
type ServiceTimeoutConfigurationPtrInput interface {
	pulumi.Input

	ToServiceTimeoutConfigurationPtrOutput() ServiceTimeoutConfigurationPtrOutput
	ToServiceTimeoutConfigurationPtrOutputWithContext(context.Context) ServiceTimeoutConfigurationPtrOutput
}

type serviceTimeoutConfigurationPtrType ServiceTimeoutConfigurationArgs

func ServiceTimeoutConfigurationPtr(v *ServiceTimeoutConfigurationArgs) ServiceTimeoutConfigurationPtrInput {
	return (*serviceTimeoutConfigurationPtrType)(v)
}

func (*serviceTimeoutConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTimeoutConfiguration)(nil)).Elem()
}

func (i *serviceTimeoutConfigurationPtrType) ToServiceTimeoutConfigurationPtrOutput() ServiceTimeoutConfigurationPtrOutput {
	return i.ToServiceTimeoutConfigurationPtrOutputWithContext(context.Background())
}

func (i *serviceTimeoutConfigurationPtrType) ToServiceTimeoutConfigurationPtrOutputWithContext(ctx context.Context) ServiceTimeoutConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTimeoutConfigurationPtrOutput)
}

type ServiceTimeoutConfigurationOutput struct{ *pulumi.OutputState }

func (ServiceTimeoutConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTimeoutConfiguration)(nil)).Elem()
}

func (o ServiceTimeoutConfigurationOutput) ToServiceTimeoutConfigurationOutput() ServiceTimeoutConfigurationOutput {
	return o
}

func (o ServiceTimeoutConfigurationOutput) ToServiceTimeoutConfigurationOutputWithContext(ctx context.Context) ServiceTimeoutConfigurationOutput {
	return o
}

func (o ServiceTimeoutConfigurationOutput) ToServiceTimeoutConfigurationPtrOutput() ServiceTimeoutConfigurationPtrOutput {
	return o.ToServiceTimeoutConfigurationPtrOutputWithContext(context.Background())
}

func (o ServiceTimeoutConfigurationOutput) ToServiceTimeoutConfigurationPtrOutputWithContext(ctx context.Context) ServiceTimeoutConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceTimeoutConfiguration) *ServiceTimeoutConfiguration {
		return &v
	}).(ServiceTimeoutConfigurationPtrOutput)
}

func (o ServiceTimeoutConfigurationOutput) IdleTimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceTimeoutConfiguration) *int { return v.IdleTimeoutSeconds }).(pulumi.IntPtrOutput)
}

func (o ServiceTimeoutConfigurationOutput) PerRequestTimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceTimeoutConfiguration) *int { return v.PerRequestTimeoutSeconds }).(pulumi.IntPtrOutput)
}

type ServiceTimeoutConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ServiceTimeoutConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTimeoutConfiguration)(nil)).Elem()
}

func (o ServiceTimeoutConfigurationPtrOutput) ToServiceTimeoutConfigurationPtrOutput() ServiceTimeoutConfigurationPtrOutput {
	return o
}

func (o ServiceTimeoutConfigurationPtrOutput) ToServiceTimeoutConfigurationPtrOutputWithContext(ctx context.Context) ServiceTimeoutConfigurationPtrOutput {
	return o
}

func (o ServiceTimeoutConfigurationPtrOutput) Elem() ServiceTimeoutConfigurationOutput {
	return o.ApplyT(func(v *ServiceTimeoutConfiguration) ServiceTimeoutConfiguration {
		if v != nil {
			return *v
		}
		var ret ServiceTimeoutConfiguration
		return ret
	}).(ServiceTimeoutConfigurationOutput)
}

func (o ServiceTimeoutConfigurationPtrOutput) IdleTimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceTimeoutConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.IdleTimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

func (o ServiceTimeoutConfigurationPtrOutput) PerRequestTimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceTimeoutConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.PerRequestTimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

type ServiceVolumeConfiguration struct {
	ManagedEbsVolume *ServiceManagedEbsVolumeConfiguration `pulumi:"managedEbsVolume"`
	Name             string                                `pulumi:"name"`
}

// ServiceVolumeConfigurationInput is an input type that accepts ServiceVolumeConfigurationArgs and ServiceVolumeConfigurationOutput values.
// You can construct a concrete instance of `ServiceVolumeConfigurationInput` via:
//
//	ServiceVolumeConfigurationArgs{...}
type ServiceVolumeConfigurationInput interface {
	pulumi.Input

	ToServiceVolumeConfigurationOutput() ServiceVolumeConfigurationOutput
	ToServiceVolumeConfigurationOutputWithContext(context.Context) ServiceVolumeConfigurationOutput
}

type ServiceVolumeConfigurationArgs struct {
	ManagedEbsVolume ServiceManagedEbsVolumeConfigurationPtrInput `pulumi:"managedEbsVolume"`
	Name             pulumi.StringInput                           `pulumi:"name"`
}

func (ServiceVolumeConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVolumeConfiguration)(nil)).Elem()
}

func (i ServiceVolumeConfigurationArgs) ToServiceVolumeConfigurationOutput() ServiceVolumeConfigurationOutput {
	return i.ToServiceVolumeConfigurationOutputWithContext(context.Background())
}

func (i ServiceVolumeConfigurationArgs) ToServiceVolumeConfigurationOutputWithContext(ctx context.Context) ServiceVolumeConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVolumeConfigurationOutput)
}

// ServiceVolumeConfigurationArrayInput is an input type that accepts ServiceVolumeConfigurationArray and ServiceVolumeConfigurationArrayOutput values.
// You can construct a concrete instance of `ServiceVolumeConfigurationArrayInput` via:
//
//	ServiceVolumeConfigurationArray{ ServiceVolumeConfigurationArgs{...} }
type ServiceVolumeConfigurationArrayInput interface {
	pulumi.Input

	ToServiceVolumeConfigurationArrayOutput() ServiceVolumeConfigurationArrayOutput
	ToServiceVolumeConfigurationArrayOutputWithContext(context.Context) ServiceVolumeConfigurationArrayOutput
}

type ServiceVolumeConfigurationArray []ServiceVolumeConfigurationInput

func (ServiceVolumeConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVolumeConfiguration)(nil)).Elem()
}

func (i ServiceVolumeConfigurationArray) ToServiceVolumeConfigurationArrayOutput() ServiceVolumeConfigurationArrayOutput {
	return i.ToServiceVolumeConfigurationArrayOutputWithContext(context.Background())
}

func (i ServiceVolumeConfigurationArray) ToServiceVolumeConfigurationArrayOutputWithContext(ctx context.Context) ServiceVolumeConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVolumeConfigurationArrayOutput)
}

type ServiceVolumeConfigurationOutput struct{ *pulumi.OutputState }

func (ServiceVolumeConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVolumeConfiguration)(nil)).Elem()
}

func (o ServiceVolumeConfigurationOutput) ToServiceVolumeConfigurationOutput() ServiceVolumeConfigurationOutput {
	return o
}

func (o ServiceVolumeConfigurationOutput) ToServiceVolumeConfigurationOutputWithContext(ctx context.Context) ServiceVolumeConfigurationOutput {
	return o
}

func (o ServiceVolumeConfigurationOutput) ManagedEbsVolume() ServiceManagedEbsVolumeConfigurationPtrOutput {
	return o.ApplyT(func(v ServiceVolumeConfiguration) *ServiceManagedEbsVolumeConfiguration { return v.ManagedEbsVolume }).(ServiceManagedEbsVolumeConfigurationPtrOutput)
}

func (o ServiceVolumeConfigurationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVolumeConfiguration) string { return v.Name }).(pulumi.StringOutput)
}

type ServiceVolumeConfigurationArrayOutput struct{ *pulumi.OutputState }

func (ServiceVolumeConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVolumeConfiguration)(nil)).Elem()
}

func (o ServiceVolumeConfigurationArrayOutput) ToServiceVolumeConfigurationArrayOutput() ServiceVolumeConfigurationArrayOutput {
	return o
}

func (o ServiceVolumeConfigurationArrayOutput) ToServiceVolumeConfigurationArrayOutputWithContext(ctx context.Context) ServiceVolumeConfigurationArrayOutput {
	return o
}

func (o ServiceVolumeConfigurationArrayOutput) Index(i pulumi.IntInput) ServiceVolumeConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceVolumeConfiguration {
		return vs[0].([]ServiceVolumeConfiguration)[vs[1].(int)]
	}).(ServiceVolumeConfigurationOutput)
}

// The authorization configuration details for the Amazon EFS file system.
type TaskDefinitionAuthorizationConfig struct {
	// The Amazon EFS access point ID to use. If an access point is specified, the root directory value specified in the ``EFSVolumeConfiguration`` must either be omitted or set to ``/`` which will enforce the path set on the EFS access point. If an access point is used, transit encryption must be on in the ``EFSVolumeConfiguration``. For more information, see [Working with Amazon EFS access points](https://docs.aws.amazon.com/efs/latest/ug/efs-access-points.html) in the *Amazon Elastic File System User Guide*.
	AccessPointId *string `pulumi:"accessPointId"`
	// Determines whether to use the Amazon ECS task role defined in a task definition when mounting the Amazon EFS file system. If it is turned on, transit encryption must be turned on in the ``EFSVolumeConfiguration``. If this parameter is omitted, the default value of ``DISABLED`` is used. For more information, see [Using Amazon EFS access points](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/efs-volumes.html#efs-volume-accesspoints) in the *Amazon Elastic Container Service Developer Guide*.
	Iam *TaskDefinitionAuthorizationConfigIam `pulumi:"iam"`
}

// TaskDefinitionAuthorizationConfigInput is an input type that accepts TaskDefinitionAuthorizationConfigArgs and TaskDefinitionAuthorizationConfigOutput values.
// You can construct a concrete instance of `TaskDefinitionAuthorizationConfigInput` via:
//
//	TaskDefinitionAuthorizationConfigArgs{...}
type TaskDefinitionAuthorizationConfigInput interface {
	pulumi.Input

	ToTaskDefinitionAuthorizationConfigOutput() TaskDefinitionAuthorizationConfigOutput
	ToTaskDefinitionAuthorizationConfigOutputWithContext(context.Context) TaskDefinitionAuthorizationConfigOutput
}

// The authorization configuration details for the Amazon EFS file system.
type TaskDefinitionAuthorizationConfigArgs struct {
	// The Amazon EFS access point ID to use. If an access point is specified, the root directory value specified in the ``EFSVolumeConfiguration`` must either be omitted or set to ``/`` which will enforce the path set on the EFS access point. If an access point is used, transit encryption must be on in the ``EFSVolumeConfiguration``. For more information, see [Working with Amazon EFS access points](https://docs.aws.amazon.com/efs/latest/ug/efs-access-points.html) in the *Amazon Elastic File System User Guide*.
	AccessPointId pulumi.StringPtrInput `pulumi:"accessPointId"`
	// Determines whether to use the Amazon ECS task role defined in a task definition when mounting the Amazon EFS file system. If it is turned on, transit encryption must be turned on in the ``EFSVolumeConfiguration``. If this parameter is omitted, the default value of ``DISABLED`` is used. For more information, see [Using Amazon EFS access points](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/efs-volumes.html#efs-volume-accesspoints) in the *Amazon Elastic Container Service Developer Guide*.
	Iam TaskDefinitionAuthorizationConfigIamPtrInput `pulumi:"iam"`
}

func (TaskDefinitionAuthorizationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionAuthorizationConfig)(nil)).Elem()
}

func (i TaskDefinitionAuthorizationConfigArgs) ToTaskDefinitionAuthorizationConfigOutput() TaskDefinitionAuthorizationConfigOutput {
	return i.ToTaskDefinitionAuthorizationConfigOutputWithContext(context.Background())
}

func (i TaskDefinitionAuthorizationConfigArgs) ToTaskDefinitionAuthorizationConfigOutputWithContext(ctx context.Context) TaskDefinitionAuthorizationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionAuthorizationConfigOutput)
}

func (i TaskDefinitionAuthorizationConfigArgs) ToTaskDefinitionAuthorizationConfigPtrOutput() TaskDefinitionAuthorizationConfigPtrOutput {
	return i.ToTaskDefinitionAuthorizationConfigPtrOutputWithContext(context.Background())
}

func (i TaskDefinitionAuthorizationConfigArgs) ToTaskDefinitionAuthorizationConfigPtrOutputWithContext(ctx context.Context) TaskDefinitionAuthorizationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionAuthorizationConfigOutput).ToTaskDefinitionAuthorizationConfigPtrOutputWithContext(ctx)
}

// TaskDefinitionAuthorizationConfigPtrInput is an input type that accepts TaskDefinitionAuthorizationConfigArgs, TaskDefinitionAuthorizationConfigPtr and TaskDefinitionAuthorizationConfigPtrOutput values.
// You can construct a concrete instance of `TaskDefinitionAuthorizationConfigPtrInput` via:
//
//	        TaskDefinitionAuthorizationConfigArgs{...}
//
//	or:
//
//	        nil
type TaskDefinitionAuthorizationConfigPtrInput interface {
	pulumi.Input

	ToTaskDefinitionAuthorizationConfigPtrOutput() TaskDefinitionAuthorizationConfigPtrOutput
	ToTaskDefinitionAuthorizationConfigPtrOutputWithContext(context.Context) TaskDefinitionAuthorizationConfigPtrOutput
}

type taskDefinitionAuthorizationConfigPtrType TaskDefinitionAuthorizationConfigArgs

func TaskDefinitionAuthorizationConfigPtr(v *TaskDefinitionAuthorizationConfigArgs) TaskDefinitionAuthorizationConfigPtrInput {
	return (*taskDefinitionAuthorizationConfigPtrType)(v)
}

func (*taskDefinitionAuthorizationConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionAuthorizationConfig)(nil)).Elem()
}

func (i *taskDefinitionAuthorizationConfigPtrType) ToTaskDefinitionAuthorizationConfigPtrOutput() TaskDefinitionAuthorizationConfigPtrOutput {
	return i.ToTaskDefinitionAuthorizationConfigPtrOutputWithContext(context.Background())
}

func (i *taskDefinitionAuthorizationConfigPtrType) ToTaskDefinitionAuthorizationConfigPtrOutputWithContext(ctx context.Context) TaskDefinitionAuthorizationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionAuthorizationConfigPtrOutput)
}

// The authorization configuration details for the Amazon EFS file system.
type TaskDefinitionAuthorizationConfigOutput struct{ *pulumi.OutputState }

func (TaskDefinitionAuthorizationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionAuthorizationConfig)(nil)).Elem()
}

func (o TaskDefinitionAuthorizationConfigOutput) ToTaskDefinitionAuthorizationConfigOutput() TaskDefinitionAuthorizationConfigOutput {
	return o
}

func (o TaskDefinitionAuthorizationConfigOutput) ToTaskDefinitionAuthorizationConfigOutputWithContext(ctx context.Context) TaskDefinitionAuthorizationConfigOutput {
	return o
}

func (o TaskDefinitionAuthorizationConfigOutput) ToTaskDefinitionAuthorizationConfigPtrOutput() TaskDefinitionAuthorizationConfigPtrOutput {
	return o.ToTaskDefinitionAuthorizationConfigPtrOutputWithContext(context.Background())
}

func (o TaskDefinitionAuthorizationConfigOutput) ToTaskDefinitionAuthorizationConfigPtrOutputWithContext(ctx context.Context) TaskDefinitionAuthorizationConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskDefinitionAuthorizationConfig) *TaskDefinitionAuthorizationConfig {
		return &v
	}).(TaskDefinitionAuthorizationConfigPtrOutput)
}

// The Amazon EFS access point ID to use. If an access point is specified, the root directory value specified in the “EFSVolumeConfiguration“ must either be omitted or set to “/“ which will enforce the path set on the EFS access point. If an access point is used, transit encryption must be on in the “EFSVolumeConfiguration“. For more information, see [Working with Amazon EFS access points](https://docs.aws.amazon.com/efs/latest/ug/efs-access-points.html) in the *Amazon Elastic File System User Guide*.
func (o TaskDefinitionAuthorizationConfigOutput) AccessPointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionAuthorizationConfig) *string { return v.AccessPointId }).(pulumi.StringPtrOutput)
}

// Determines whether to use the Amazon ECS task role defined in a task definition when mounting the Amazon EFS file system. If it is turned on, transit encryption must be turned on in the “EFSVolumeConfiguration“. If this parameter is omitted, the default value of “DISABLED“ is used. For more information, see [Using Amazon EFS access points](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/efs-volumes.html#efs-volume-accesspoints) in the *Amazon Elastic Container Service Developer Guide*.
func (o TaskDefinitionAuthorizationConfigOutput) Iam() TaskDefinitionAuthorizationConfigIamPtrOutput {
	return o.ApplyT(func(v TaskDefinitionAuthorizationConfig) *TaskDefinitionAuthorizationConfigIam { return v.Iam }).(TaskDefinitionAuthorizationConfigIamPtrOutput)
}

type TaskDefinitionAuthorizationConfigPtrOutput struct{ *pulumi.OutputState }

func (TaskDefinitionAuthorizationConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionAuthorizationConfig)(nil)).Elem()
}

func (o TaskDefinitionAuthorizationConfigPtrOutput) ToTaskDefinitionAuthorizationConfigPtrOutput() TaskDefinitionAuthorizationConfigPtrOutput {
	return o
}

func (o TaskDefinitionAuthorizationConfigPtrOutput) ToTaskDefinitionAuthorizationConfigPtrOutputWithContext(ctx context.Context) TaskDefinitionAuthorizationConfigPtrOutput {
	return o
}

func (o TaskDefinitionAuthorizationConfigPtrOutput) Elem() TaskDefinitionAuthorizationConfigOutput {
	return o.ApplyT(func(v *TaskDefinitionAuthorizationConfig) TaskDefinitionAuthorizationConfig {
		if v != nil {
			return *v
		}
		var ret TaskDefinitionAuthorizationConfig
		return ret
	}).(TaskDefinitionAuthorizationConfigOutput)
}

// The Amazon EFS access point ID to use. If an access point is specified, the root directory value specified in the “EFSVolumeConfiguration“ must either be omitted or set to “/“ which will enforce the path set on the EFS access point. If an access point is used, transit encryption must be on in the “EFSVolumeConfiguration“. For more information, see [Working with Amazon EFS access points](https://docs.aws.amazon.com/efs/latest/ug/efs-access-points.html) in the *Amazon Elastic File System User Guide*.
func (o TaskDefinitionAuthorizationConfigPtrOutput) AccessPointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionAuthorizationConfig) *string {
		if v == nil {
			return nil
		}
		return v.AccessPointId
	}).(pulumi.StringPtrOutput)
}

// Determines whether to use the Amazon ECS task role defined in a task definition when mounting the Amazon EFS file system. If it is turned on, transit encryption must be turned on in the “EFSVolumeConfiguration“. If this parameter is omitted, the default value of “DISABLED“ is used. For more information, see [Using Amazon EFS access points](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/efs-volumes.html#efs-volume-accesspoints) in the *Amazon Elastic Container Service Developer Guide*.
func (o TaskDefinitionAuthorizationConfigPtrOutput) Iam() TaskDefinitionAuthorizationConfigIamPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionAuthorizationConfig) *TaskDefinitionAuthorizationConfigIam {
		if v == nil {
			return nil
		}
		return v.Iam
	}).(TaskDefinitionAuthorizationConfigIamPtrOutput)
}

// The “ContainerDefinition“ property specifies a container definition. Container definitions are used in task definitions to describe the different containers that are launched as part of a task.
type TaskDefinitionContainerDefinition struct {
	// The command that's passed to the container. This parameter maps to ``Cmd`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``COMMAND`` parameter to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). For more information, see [https://docs.docker.com/engine/reference/builder/#cmd](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/builder/#cmd). If there are multiple arguments, each argument is a separated string in the array.
	Command []string `pulumi:"command"`
	// The number of ``cpu`` units reserved for the container. This parameter maps to ``CpuShares`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--cpu-shares`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	//  This field is optional for tasks using the Fargate launch type, and the only requirement is that the total amount of CPU reserved for all containers within a task be lower than the task-level ``cpu`` value.
	//   You can determine the number of CPU units that are available per EC2 instance type by multiplying the vCPUs listed for that instance type on the [Amazon EC2 Instances](https://docs.aws.amazon.com/ec2/instance-types/) detail page by 1,024.
	//   Linux containers share unallocated CPU units with other containers on the cont
	Cpu *int `pulumi:"cpu"`
	// A list of ARNs in SSM or Amazon S3 to a credential spec (``CredSpec``) file that configures the container for Active Directory authentication. We recommend that you use this parameter instead of the ``dockerSecurityOptions``. The maximum number of ARNs is 1.
	//  There are two formats for each ARN.
	//   + credentialspecdomainless:MyARN You use credentialspecdomainless:MyARN to provide a CredSpec with an additional section for a secret in . You provide the login credentials to the domain in the secret. Each task that runs on any container instance can join different domains. You can use this format without joining the container instance to a domain. + credentialspec:MyARN You use credentialspec:MyARN to provide a CredSpec for a single domain. You must join the container instance to the domain before you start any tasks that use this task definition.
	//      In both formats, replace ``MyARN`` with the ARN in SSM or Amazon S3.
	//      If you provide a ``credentialspecdomainless:MyARN``, the ``credspec`` must
	CredentialSpecs []string `pulumi:"credentialSpecs"`
	// The dependencies defined for container startup and shutdown. A container can contain multiple dependencies. When a dependency is defined for container startup, for container shutdown it is reversed.
	//  For tasks using the EC2 launch type, the container instances require at least version 1.26.0 of the container agent to turn on container dependencies. However, we recommend using the latest container agent version. For information about checking your agent version and updating to the latest version, see [Updating the Amazon ECS Container Agent](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html) in the *Amazon Elastic Container Service Developer Guide*. If you're using an Amazon ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the ``ecs-init`` package. If your container instances are launched from version ``20190301`` or later, then they contain the required versions of the container agent and ``ecs-init``. For more information, see [
	DependsOn []TaskDefinitionContainerDependency `pulumi:"dependsOn"`
	// When this parameter is true, networking is off within the container. This parameter maps to ``NetworkDisabled`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/).
	//   This parameter is not supported for Windows containers.
	DisableNetworking *bool `pulumi:"disableNetworking"`
	// A list of DNS search domains that are presented to the container. This parameter maps to ``DnsSearch`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--dns-search`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	//   This parameter is not supported for Windows containers.
	DnsSearchDomains []string `pulumi:"dnsSearchDomains"`
	// A list of DNS servers that are presented to the container. This parameter maps to ``Dns`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--dns`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	//   This parameter is not supported for Windows containers.
	DnsServers []string `pulumi:"dnsServers"`
	// A key/value map of labels to add to the container. This parameter maps to ``Labels`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--label`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: ``sudo docker version --format '{{.Server.APIVersion}}'``
	DockerLabels map[string]string `pulumi:"dockerLabels"`
	// A list of strings to provide custom configuration for multiple security systems. For more information about valid values, see [Docker Run Security Configuration](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). This field isn't valid for containers in tasks using the Fargate launch type.
	//  For Linux tasks on EC2, this parameter can be used to reference custom labels for SELinux and AppArmor multi-level security systems.
	//  For any tasks on EC2, this parameter can be used to reference a credential spec file that configures a container for Active Directory authentication. For more information, see [Using gMSAs for Windows Containers](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/windows-gmsa.html) and [Using gMSAs for Linux Containers](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/linux-gmsa.html) in the *Amazon Elastic Container Service Developer Guide*.
	//  This parameter maps to ``SecurityOpt`` in the [Create a co
	DockerSecurityOptions []string `pulumi:"dockerSecurityOptions"`
	// Early versions of the Amazon ECS container agent don't properly handle ``entryPoint`` parameters. If you have problems using ``entryPoint``, update your container agent or enter your commands and arguments as ``command`` array items instead.
	//   The entry point that's passed to the container. This parameter maps to ``Entrypoint`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--entrypoint`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). For more information, see [https://docs.docker.com/engine/reference/builder/#entrypoint](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/builder/#entrypoint).
	EntryPoint []string `pulumi:"entryPoint"`
	// The environment variables to pass to a container. This parameter maps to ``Env`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--env`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	//   We don't recommend that you use plaintext environment variables for sensitive information, such as credential data.
	Environment []TaskDefinitionKeyValuePair `pulumi:"environment"`
	// A list of files containing the environment variables to pass to a container. This parameter maps to the ``--env-file`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	//  You can specify up to ten environment files. The file must have a ``.env`` file extension. Each line in an environment file contains an environment variable in ``VARIABLE=VALUE`` format. Lines beginning with ``#`` are treated as comments and are ignored. For more information about the environment variable file syntax, see [Declare default environment variables in file](https://docs.aws.amazon.com/https://docs.docker.com/compose/env-file/).
	//  If there are environment variables specified using the ``environment`` parameter in a container definition, they take precedence over the variables contained within an environment file. If multiple environment files are specified that contain the same variable, they're processed from the top down. We recommend t
	EnvironmentFiles []TaskDefinitionEnvironmentFile `pulumi:"environmentFiles"`
	// If the ``essential`` parameter of a container is marked as ``true``, and that container fails or stops for any reason, all other containers that are part of the task are stopped. If the ``essential`` parameter of a container is marked as ``false``, its failure doesn't affect the rest of the containers in a task. If this parameter is omitted, a container is assumed to be essential.
	//  All tasks must have at least one essential container. If you have an application that's composed of multiple containers, group containers that are used for a common purpose into components, and separate the different components into multiple task definitions. For more information, see [Application Architecture](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/application_architecture.html) in the *Amazon Elastic Container Service Developer Guide*.
	Essential *bool `pulumi:"essential"`
	// A list of hostnames and IP address mappings to append to the ``/etc/hosts`` file on the container. This parameter maps to ``ExtraHosts`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--add-host`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	//   This parameter isn't supported for Windows containers or tasks that use the ``awsvpc`` network mode.
	ExtraHosts []TaskDefinitionHostEntry `pulumi:"extraHosts"`
	// The FireLens configuration for the container. This is used to specify and configure a log router for container logs. For more information, see [Custom Log Routing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html) in the *Amazon Elastic Container Service Developer Guide*.
	FirelensConfiguration *TaskDefinitionFirelensConfiguration `pulumi:"firelensConfiguration"`
	// The container health check command and associated configuration parameters for the container. This parameter maps to ``HealthCheck`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``HEALTHCHECK`` parameter of [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	HealthCheck *TaskDefinitionHealthCheck `pulumi:"healthCheck"`
	// The hostname to use for your container. This parameter maps to ``Hostname`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--hostname`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	//   The ``hostname`` parameter is not supported if you're using the ``awsvpc`` network mode.
	Hostname *string `pulumi:"hostname"`
	// The image used to start a container. This string is passed directly to the Docker daemon. By default, images in the Docker Hub registry are available. Other repositories are specified with either ``repository-url/image:tag`` or ``repository-url/image@digest``. Up to 255 letters (uppercase and lowercase), numbers, hyphens, underscores, colons, periods, forward slashes, and number signs are allowed. This parameter maps to ``Image`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``IMAGE`` parameter of [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	//   +  When a new task starts, the Amazon ECS container agent pulls the latest version of the specified image and tag for the container to use. However, subsequent updates to a repository image
	Image string `pulumi:"image"`
	// When this parameter is ``true``, you can deploy containerized applications that require ``stdin`` or a ``tty`` to be allocated. This parameter maps to ``OpenStdin`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--interactive`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	Interactive *bool `pulumi:"interactive"`
	// The ``links`` parameter allows containers to communicate with each other without the need for port mappings. This parameter is only supported if the network mode of a task definition is ``bridge``. The ``name:internalName`` construct is analogous to ``name:alias`` in Docker links. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed. For more information about linking Docker containers, go to [Legacy container links](https://docs.aws.amazon.com/https://docs.docker.com/network/links/) in the Docker documentation. This parameter maps to ``Links`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--link`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	//   This parameter is not supported for W
	Links []string `pulumi:"links"`
	// Linux-specific modifications that are applied to the container, such as Linux kernel capabilities. For more information see [KernelCapabilities](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_KernelCapabilities.html).
	//   This parameter is not supported for Windows containers.
	LinuxParameters *TaskDefinitionLinuxParameters `pulumi:"linuxParameters"`
	// The log configuration specification for the container.
	//  This parameter maps to ``LogConfig`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--log-driver`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/). By default, containers use the same logging driver that the Docker daemon uses. However, the container may use a different logging driver than the Docker daemon by specifying a log driver with this parameter in the container definition. To use a different logging driver for a container, the log system must be configured properly on the container instance (or on a different log server for remote logging options). For more information on the options for different supported log drivers, see [Configure logging drivers](https://docs.aws.amazon.com/htt
	LogConfiguration *TaskDefinitionLogConfiguration `pulumi:"logConfiguration"`
	// The amount (in MiB) of memory to present to the container. If your container attempts to exceed the memory specified here, the container is killed. The total amount of memory reserved for all containers within a task must be lower than the task ``memory`` value, if one is specified. This parameter maps to ``Memory`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--memory`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	//  If using the Fargate launch type, this parameter is optional.
	//  If using the EC2 launch type, you must specify either a task-level memory value or a container-level memory value. If you specify both a container-level ``memory`` and ``memoryReservation`` value, ``memory`` must be greater than ``memoryReserva
	Memory *int `pulumi:"memory"`
	// The soft limit (in MiB) of memory to reserve for the container. When system memory is under heavy contention, Docker attempts to keep the container memory to this soft limit. However, your container can consume more memory when it needs to, up to either the hard limit specified with the ``memory`` parameter (if applicable), or all of the available memory on the container instance, whichever comes first. This parameter maps to ``MemoryReservation`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--memory-reservation`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	//  If a task-level memory value is not specified, you must specify a non-zero integer for one or both of ``memory`` or ``memoryReservation`` in a container definiti
	MemoryReservation *int `pulumi:"memoryReservation"`
	// The mount points for data volumes in your container.
	//  This parameter maps to ``Volumes`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--volume`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	//  Windows containers can mount whole directories on the same drive as ``$env:ProgramData``. Windows containers can't mount directories on a different drive, and mount point can't be across drives.
	MountPoints []TaskDefinitionMountPoint `pulumi:"mountPoints"`
	// The name of a container. If you're linking multiple containers together in a task definition, the ``name`` of one container can be entered in the ``links`` of another container to connect the containers. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed. This parameter maps to ``name`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--name`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	Name string `pulumi:"name"`
	// The list of port mappings for the container. Port mappings allow containers to access ports on the host container instance to send or receive traffic.
	//  For task definitions that use the ``awsvpc`` network mode, you should only specify the ``containerPort``. The ``hostPort`` can be left blank or it must be the same value as the ``containerPort``.
	//  Port mappings on Windows use the ``NetNAT`` gateway address rather than ``localhost``. There is no loopback for port mappings on Windows, so you cannot access a container's mapped port from the host itself.
	//  This parameter maps to ``PortBindings`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--publish`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/). If the network mode of a task definition is set to
	PortMappings []TaskDefinitionPortMapping `pulumi:"portMappings"`
	// When this parameter is true, the container is given elevated privileges on the host container instance (similar to the ``root`` user). This parameter maps to ``Privileged`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--privileged`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	//   This parameter is not supported for Windows containers or tasks run on FARGATElong.
	Privileged *bool `pulumi:"privileged"`
	// When this parameter is ``true``, a TTY is allocated. This parameter maps to ``Tty`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--tty`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	PseudoTerminal *bool `pulumi:"pseudoTerminal"`
	// When this parameter is true, the container is given read-only access to its root file system. This parameter maps to ``ReadonlyRootfs`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--read-only`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	//   This parameter is not supported for Windows containers.
	ReadonlyRootFilesystem *bool `pulumi:"readonlyRootFilesystem"`
	// The private repository authentication credentials to use.
	RepositoryCredentials *TaskDefinitionRepositoryCredentials `pulumi:"repositoryCredentials"`
	// The type and amount of a resource to assign to a container. The only supported resource is a GPU.
	ResourceRequirements []TaskDefinitionResourceRequirement `pulumi:"resourceRequirements"`
	// The secrets to pass to the container. For more information, see [Specifying Sensitive Data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the *Amazon Elastic Container Service Developer Guide*.
	Secrets []TaskDefinitionSecret `pulumi:"secrets"`
	// Time duration (in seconds) to wait before giving up on resolving dependencies for a container. For example, you specify two containers in a task definition with containerA having a dependency on containerB reaching a ``COMPLETE``, ``SUCCESS``, or ``HEALTHY`` status. If a ``startTimeout`` value is specified for containerB and it doesn't reach the desired status within that time then containerA gives up and not start. This results in the task transitioning to a ``STOPPED`` state.
	//   When the ``ECS_CONTAINER_START_TIMEOUT`` container agent configuration variable is used, it's enforced independently from this start timeout value.
	//   For tasks using the Fargate launch type, the task or service requires the following platforms:
	//   +  Linux platform version ``1.3.0`` or later.
	//   +  Windows platform version ``1.0.0`` or later.
	//
	//  For tasks using the EC2 launch type, your container instances require at least version ``1.26.0`` of the container agent to use a container start timeout value. However
	StartTimeout *int `pulumi:"startTimeout"`
	// Time duration (in seconds) to wait before the container is forcefully killed if it doesn't exit normally on its own.
	//  For tasks using the Fargate launch type, the task or service requires the following platforms:
	//   +  Linux platform version ``1.3.0`` or later.
	//   +  Windows platform version ``1.0.0`` or later.
	//
	//  The max stop timeout value is 120 seconds and if the parameter is not specified, the default value of 30 seconds is used.
	//  For tasks that use the EC2 launch type, if the ``stopTimeout`` parameter isn't specified, the value set for the Amazon ECS container agent configuration variable ``ECS_CONTAINER_STOP_TIMEOUT`` is used. If neither the ``stopTimeout`` parameter or the ``ECS_CONTAINER_STOP_TIMEOUT`` agent configuration variable are set, then the default values of 30 seconds for Linux containers and 30 seconds on Windows containers are used. Your container instances require at least version 1.26.0 of the container agent to use a container stop timeout value. However, we recomm
	StopTimeout *int `pulumi:"stopTimeout"`
	// A list of namespaced kernel parameters to set in the container. This parameter maps to ``Sysctls`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--sysctl`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). For example, you can configure ``net.ipv4.tcp_keepalive_time`` setting to maintain longer lived connections.
	SystemControls []TaskDefinitionSystemControl `pulumi:"systemControls"`
	// A list of ``ulimits`` to set in the container. This parameter maps to ``Ulimits`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--ulimit`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/). Valid naming values are displayed in the [Ulimit](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_Ulimit.html) data type. This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: ``sudo docker version --format '{{.Server.APIVersion}}'``
	//   This parameter is not supported for Windows containers.
	Ulimits []TaskDefinitionUlimit `pulumi:"ulimits"`
	// The user to use inside the container. This parameter maps to ``User`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--user`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	//   When running tasks using the ``host`` network mode, don't run containers using the root user (UID 0). We recommend using a non-root user for better security.
	//   You can specify the ``user`` using the following formats. If specifying a UID or GID, you must specify it as a positive integer.
	//   +   ``user``
	//   +   ``user:group``
	//   +   ``uid``
	//   +   ``uid:gid``
	//   +   ``user:gid``
	//   +   ``uid:group``
	//
	//   This parameter is not supported for Windows containers.
	User *string `pulumi:"user"`
	// Data volumes to mount from another container. This parameter maps to ``VolumesFrom`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--volumes-from`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	VolumesFrom []TaskDefinitionVolumeFrom `pulumi:"volumesFrom"`
	// The working directory to run commands inside the container in. This parameter maps to ``WorkingDir`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--workdir`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	WorkingDirectory *string `pulumi:"workingDirectory"`
}

// TaskDefinitionContainerDefinitionInput is an input type that accepts TaskDefinitionContainerDefinitionArgs and TaskDefinitionContainerDefinitionOutput values.
// You can construct a concrete instance of `TaskDefinitionContainerDefinitionInput` via:
//
//	TaskDefinitionContainerDefinitionArgs{...}
type TaskDefinitionContainerDefinitionInput interface {
	pulumi.Input

	ToTaskDefinitionContainerDefinitionOutput() TaskDefinitionContainerDefinitionOutput
	ToTaskDefinitionContainerDefinitionOutputWithContext(context.Context) TaskDefinitionContainerDefinitionOutput
}

// The “ContainerDefinition“ property specifies a container definition. Container definitions are used in task definitions to describe the different containers that are launched as part of a task.
type TaskDefinitionContainerDefinitionArgs struct {
	// The command that's passed to the container. This parameter maps to ``Cmd`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``COMMAND`` parameter to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). For more information, see [https://docs.docker.com/engine/reference/builder/#cmd](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/builder/#cmd). If there are multiple arguments, each argument is a separated string in the array.
	Command pulumi.StringArrayInput `pulumi:"command"`
	// The number of ``cpu`` units reserved for the container. This parameter maps to ``CpuShares`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--cpu-shares`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	//  This field is optional for tasks using the Fargate launch type, and the only requirement is that the total amount of CPU reserved for all containers within a task be lower than the task-level ``cpu`` value.
	//   You can determine the number of CPU units that are available per EC2 instance type by multiplying the vCPUs listed for that instance type on the [Amazon EC2 Instances](https://docs.aws.amazon.com/ec2/instance-types/) detail page by 1,024.
	//   Linux containers share unallocated CPU units with other containers on the cont
	Cpu pulumi.IntPtrInput `pulumi:"cpu"`
	// A list of ARNs in SSM or Amazon S3 to a credential spec (``CredSpec``) file that configures the container for Active Directory authentication. We recommend that you use this parameter instead of the ``dockerSecurityOptions``. The maximum number of ARNs is 1.
	//  There are two formats for each ARN.
	//   + credentialspecdomainless:MyARN You use credentialspecdomainless:MyARN to provide a CredSpec with an additional section for a secret in . You provide the login credentials to the domain in the secret. Each task that runs on any container instance can join different domains. You can use this format without joining the container instance to a domain. + credentialspec:MyARN You use credentialspec:MyARN to provide a CredSpec for a single domain. You must join the container instance to the domain before you start any tasks that use this task definition.
	//      In both formats, replace ``MyARN`` with the ARN in SSM or Amazon S3.
	//      If you provide a ``credentialspecdomainless:MyARN``, the ``credspec`` must
	CredentialSpecs pulumi.StringArrayInput `pulumi:"credentialSpecs"`
	// The dependencies defined for container startup and shutdown. A container can contain multiple dependencies. When a dependency is defined for container startup, for container shutdown it is reversed.
	//  For tasks using the EC2 launch type, the container instances require at least version 1.26.0 of the container agent to turn on container dependencies. However, we recommend using the latest container agent version. For information about checking your agent version and updating to the latest version, see [Updating the Amazon ECS Container Agent](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html) in the *Amazon Elastic Container Service Developer Guide*. If you're using an Amazon ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the ``ecs-init`` package. If your container instances are launched from version ``20190301`` or later, then they contain the required versions of the container agent and ``ecs-init``. For more information, see [
	DependsOn TaskDefinitionContainerDependencyArrayInput `pulumi:"dependsOn"`
	// When this parameter is true, networking is off within the container. This parameter maps to ``NetworkDisabled`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/).
	//   This parameter is not supported for Windows containers.
	DisableNetworking pulumi.BoolPtrInput `pulumi:"disableNetworking"`
	// A list of DNS search domains that are presented to the container. This parameter maps to ``DnsSearch`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--dns-search`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	//   This parameter is not supported for Windows containers.
	DnsSearchDomains pulumi.StringArrayInput `pulumi:"dnsSearchDomains"`
	// A list of DNS servers that are presented to the container. This parameter maps to ``Dns`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--dns`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	//   This parameter is not supported for Windows containers.
	DnsServers pulumi.StringArrayInput `pulumi:"dnsServers"`
	// A key/value map of labels to add to the container. This parameter maps to ``Labels`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--label`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: ``sudo docker version --format '{{.Server.APIVersion}}'``
	DockerLabels pulumi.StringMapInput `pulumi:"dockerLabels"`
	// A list of strings to provide custom configuration for multiple security systems. For more information about valid values, see [Docker Run Security Configuration](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). This field isn't valid for containers in tasks using the Fargate launch type.
	//  For Linux tasks on EC2, this parameter can be used to reference custom labels for SELinux and AppArmor multi-level security systems.
	//  For any tasks on EC2, this parameter can be used to reference a credential spec file that configures a container for Active Directory authentication. For more information, see [Using gMSAs for Windows Containers](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/windows-gmsa.html) and [Using gMSAs for Linux Containers](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/linux-gmsa.html) in the *Amazon Elastic Container Service Developer Guide*.
	//  This parameter maps to ``SecurityOpt`` in the [Create a co
	DockerSecurityOptions pulumi.StringArrayInput `pulumi:"dockerSecurityOptions"`
	// Early versions of the Amazon ECS container agent don't properly handle ``entryPoint`` parameters. If you have problems using ``entryPoint``, update your container agent or enter your commands and arguments as ``command`` array items instead.
	//   The entry point that's passed to the container. This parameter maps to ``Entrypoint`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--entrypoint`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). For more information, see [https://docs.docker.com/engine/reference/builder/#entrypoint](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/builder/#entrypoint).
	EntryPoint pulumi.StringArrayInput `pulumi:"entryPoint"`
	// The environment variables to pass to a container. This parameter maps to ``Env`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--env`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	//   We don't recommend that you use plaintext environment variables for sensitive information, such as credential data.
	Environment TaskDefinitionKeyValuePairArrayInput `pulumi:"environment"`
	// A list of files containing the environment variables to pass to a container. This parameter maps to the ``--env-file`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	//  You can specify up to ten environment files. The file must have a ``.env`` file extension. Each line in an environment file contains an environment variable in ``VARIABLE=VALUE`` format. Lines beginning with ``#`` are treated as comments and are ignored. For more information about the environment variable file syntax, see [Declare default environment variables in file](https://docs.aws.amazon.com/https://docs.docker.com/compose/env-file/).
	//  If there are environment variables specified using the ``environment`` parameter in a container definition, they take precedence over the variables contained within an environment file. If multiple environment files are specified that contain the same variable, they're processed from the top down. We recommend t
	EnvironmentFiles TaskDefinitionEnvironmentFileArrayInput `pulumi:"environmentFiles"`
	// If the ``essential`` parameter of a container is marked as ``true``, and that container fails or stops for any reason, all other containers that are part of the task are stopped. If the ``essential`` parameter of a container is marked as ``false``, its failure doesn't affect the rest of the containers in a task. If this parameter is omitted, a container is assumed to be essential.
	//  All tasks must have at least one essential container. If you have an application that's composed of multiple containers, group containers that are used for a common purpose into components, and separate the different components into multiple task definitions. For more information, see [Application Architecture](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/application_architecture.html) in the *Amazon Elastic Container Service Developer Guide*.
	Essential pulumi.BoolPtrInput `pulumi:"essential"`
	// A list of hostnames and IP address mappings to append to the ``/etc/hosts`` file on the container. This parameter maps to ``ExtraHosts`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--add-host`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	//   This parameter isn't supported for Windows containers or tasks that use the ``awsvpc`` network mode.
	ExtraHosts TaskDefinitionHostEntryArrayInput `pulumi:"extraHosts"`
	// The FireLens configuration for the container. This is used to specify and configure a log router for container logs. For more information, see [Custom Log Routing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html) in the *Amazon Elastic Container Service Developer Guide*.
	FirelensConfiguration TaskDefinitionFirelensConfigurationPtrInput `pulumi:"firelensConfiguration"`
	// The container health check command and associated configuration parameters for the container. This parameter maps to ``HealthCheck`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``HEALTHCHECK`` parameter of [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	HealthCheck TaskDefinitionHealthCheckPtrInput `pulumi:"healthCheck"`
	// The hostname to use for your container. This parameter maps to ``Hostname`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--hostname`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	//   The ``hostname`` parameter is not supported if you're using the ``awsvpc`` network mode.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// The image used to start a container. This string is passed directly to the Docker daemon. By default, images in the Docker Hub registry are available. Other repositories are specified with either ``repository-url/image:tag`` or ``repository-url/image@digest``. Up to 255 letters (uppercase and lowercase), numbers, hyphens, underscores, colons, periods, forward slashes, and number signs are allowed. This parameter maps to ``Image`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``IMAGE`` parameter of [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	//   +  When a new task starts, the Amazon ECS container agent pulls the latest version of the specified image and tag for the container to use. However, subsequent updates to a repository image
	Image pulumi.StringInput `pulumi:"image"`
	// When this parameter is ``true``, you can deploy containerized applications that require ``stdin`` or a ``tty`` to be allocated. This parameter maps to ``OpenStdin`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--interactive`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	Interactive pulumi.BoolPtrInput `pulumi:"interactive"`
	// The ``links`` parameter allows containers to communicate with each other without the need for port mappings. This parameter is only supported if the network mode of a task definition is ``bridge``. The ``name:internalName`` construct is analogous to ``name:alias`` in Docker links. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed. For more information about linking Docker containers, go to [Legacy container links](https://docs.aws.amazon.com/https://docs.docker.com/network/links/) in the Docker documentation. This parameter maps to ``Links`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--link`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	//   This parameter is not supported for W
	Links pulumi.StringArrayInput `pulumi:"links"`
	// Linux-specific modifications that are applied to the container, such as Linux kernel capabilities. For more information see [KernelCapabilities](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_KernelCapabilities.html).
	//   This parameter is not supported for Windows containers.
	LinuxParameters TaskDefinitionLinuxParametersPtrInput `pulumi:"linuxParameters"`
	// The log configuration specification for the container.
	//  This parameter maps to ``LogConfig`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--log-driver`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/). By default, containers use the same logging driver that the Docker daemon uses. However, the container may use a different logging driver than the Docker daemon by specifying a log driver with this parameter in the container definition. To use a different logging driver for a container, the log system must be configured properly on the container instance (or on a different log server for remote logging options). For more information on the options for different supported log drivers, see [Configure logging drivers](https://docs.aws.amazon.com/htt
	LogConfiguration TaskDefinitionLogConfigurationPtrInput `pulumi:"logConfiguration"`
	// The amount (in MiB) of memory to present to the container. If your container attempts to exceed the memory specified here, the container is killed. The total amount of memory reserved for all containers within a task must be lower than the task ``memory`` value, if one is specified. This parameter maps to ``Memory`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--memory`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	//  If using the Fargate launch type, this parameter is optional.
	//  If using the EC2 launch type, you must specify either a task-level memory value or a container-level memory value. If you specify both a container-level ``memory`` and ``memoryReservation`` value, ``memory`` must be greater than ``memoryReserva
	Memory pulumi.IntPtrInput `pulumi:"memory"`
	// The soft limit (in MiB) of memory to reserve for the container. When system memory is under heavy contention, Docker attempts to keep the container memory to this soft limit. However, your container can consume more memory when it needs to, up to either the hard limit specified with the ``memory`` parameter (if applicable), or all of the available memory on the container instance, whichever comes first. This parameter maps to ``MemoryReservation`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--memory-reservation`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	//  If a task-level memory value is not specified, you must specify a non-zero integer for one or both of ``memory`` or ``memoryReservation`` in a container definiti
	MemoryReservation pulumi.IntPtrInput `pulumi:"memoryReservation"`
	// The mount points for data volumes in your container.
	//  This parameter maps to ``Volumes`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--volume`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	//  Windows containers can mount whole directories on the same drive as ``$env:ProgramData``. Windows containers can't mount directories on a different drive, and mount point can't be across drives.
	MountPoints TaskDefinitionMountPointArrayInput `pulumi:"mountPoints"`
	// The name of a container. If you're linking multiple containers together in a task definition, the ``name`` of one container can be entered in the ``links`` of another container to connect the containers. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed. This parameter maps to ``name`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--name`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	Name pulumi.StringInput `pulumi:"name"`
	// The list of port mappings for the container. Port mappings allow containers to access ports on the host container instance to send or receive traffic.
	//  For task definitions that use the ``awsvpc`` network mode, you should only specify the ``containerPort``. The ``hostPort`` can be left blank or it must be the same value as the ``containerPort``.
	//  Port mappings on Windows use the ``NetNAT`` gateway address rather than ``localhost``. There is no loopback for port mappings on Windows, so you cannot access a container's mapped port from the host itself.
	//  This parameter maps to ``PortBindings`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--publish`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/). If the network mode of a task definition is set to
	PortMappings TaskDefinitionPortMappingArrayInput `pulumi:"portMappings"`
	// When this parameter is true, the container is given elevated privileges on the host container instance (similar to the ``root`` user). This parameter maps to ``Privileged`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--privileged`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	//   This parameter is not supported for Windows containers or tasks run on FARGATElong.
	Privileged pulumi.BoolPtrInput `pulumi:"privileged"`
	// When this parameter is ``true``, a TTY is allocated. This parameter maps to ``Tty`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--tty`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	PseudoTerminal pulumi.BoolPtrInput `pulumi:"pseudoTerminal"`
	// When this parameter is true, the container is given read-only access to its root file system. This parameter maps to ``ReadonlyRootfs`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--read-only`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	//   This parameter is not supported for Windows containers.
	ReadonlyRootFilesystem pulumi.BoolPtrInput `pulumi:"readonlyRootFilesystem"`
	// The private repository authentication credentials to use.
	RepositoryCredentials TaskDefinitionRepositoryCredentialsPtrInput `pulumi:"repositoryCredentials"`
	// The type and amount of a resource to assign to a container. The only supported resource is a GPU.
	ResourceRequirements TaskDefinitionResourceRequirementArrayInput `pulumi:"resourceRequirements"`
	// The secrets to pass to the container. For more information, see [Specifying Sensitive Data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the *Amazon Elastic Container Service Developer Guide*.
	Secrets TaskDefinitionSecretArrayInput `pulumi:"secrets"`
	// Time duration (in seconds) to wait before giving up on resolving dependencies for a container. For example, you specify two containers in a task definition with containerA having a dependency on containerB reaching a ``COMPLETE``, ``SUCCESS``, or ``HEALTHY`` status. If a ``startTimeout`` value is specified for containerB and it doesn't reach the desired status within that time then containerA gives up and not start. This results in the task transitioning to a ``STOPPED`` state.
	//   When the ``ECS_CONTAINER_START_TIMEOUT`` container agent configuration variable is used, it's enforced independently from this start timeout value.
	//   For tasks using the Fargate launch type, the task or service requires the following platforms:
	//   +  Linux platform version ``1.3.0`` or later.
	//   +  Windows platform version ``1.0.0`` or later.
	//
	//  For tasks using the EC2 launch type, your container instances require at least version ``1.26.0`` of the container agent to use a container start timeout value. However
	StartTimeout pulumi.IntPtrInput `pulumi:"startTimeout"`
	// Time duration (in seconds) to wait before the container is forcefully killed if it doesn't exit normally on its own.
	//  For tasks using the Fargate launch type, the task or service requires the following platforms:
	//   +  Linux platform version ``1.3.0`` or later.
	//   +  Windows platform version ``1.0.0`` or later.
	//
	//  The max stop timeout value is 120 seconds and if the parameter is not specified, the default value of 30 seconds is used.
	//  For tasks that use the EC2 launch type, if the ``stopTimeout`` parameter isn't specified, the value set for the Amazon ECS container agent configuration variable ``ECS_CONTAINER_STOP_TIMEOUT`` is used. If neither the ``stopTimeout`` parameter or the ``ECS_CONTAINER_STOP_TIMEOUT`` agent configuration variable are set, then the default values of 30 seconds for Linux containers and 30 seconds on Windows containers are used. Your container instances require at least version 1.26.0 of the container agent to use a container stop timeout value. However, we recomm
	StopTimeout pulumi.IntPtrInput `pulumi:"stopTimeout"`
	// A list of namespaced kernel parameters to set in the container. This parameter maps to ``Sysctls`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--sysctl`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). For example, you can configure ``net.ipv4.tcp_keepalive_time`` setting to maintain longer lived connections.
	SystemControls TaskDefinitionSystemControlArrayInput `pulumi:"systemControls"`
	// A list of ``ulimits`` to set in the container. This parameter maps to ``Ulimits`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--ulimit`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/). Valid naming values are displayed in the [Ulimit](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_Ulimit.html) data type. This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: ``sudo docker version --format '{{.Server.APIVersion}}'``
	//   This parameter is not supported for Windows containers.
	Ulimits TaskDefinitionUlimitArrayInput `pulumi:"ulimits"`
	// The user to use inside the container. This parameter maps to ``User`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--user`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	//   When running tasks using the ``host`` network mode, don't run containers using the root user (UID 0). We recommend using a non-root user for better security.
	//   You can specify the ``user`` using the following formats. If specifying a UID or GID, you must specify it as a positive integer.
	//   +   ``user``
	//   +   ``user:group``
	//   +   ``uid``
	//   +   ``uid:gid``
	//   +   ``user:gid``
	//   +   ``uid:group``
	//
	//   This parameter is not supported for Windows containers.
	User pulumi.StringPtrInput `pulumi:"user"`
	// Data volumes to mount from another container. This parameter maps to ``VolumesFrom`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--volumes-from`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	VolumesFrom TaskDefinitionVolumeFromArrayInput `pulumi:"volumesFrom"`
	// The working directory to run commands inside the container in. This parameter maps to ``WorkingDir`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--workdir`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	WorkingDirectory pulumi.StringPtrInput `pulumi:"workingDirectory"`
}

func (TaskDefinitionContainerDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionContainerDefinition)(nil)).Elem()
}

func (i TaskDefinitionContainerDefinitionArgs) ToTaskDefinitionContainerDefinitionOutput() TaskDefinitionContainerDefinitionOutput {
	return i.ToTaskDefinitionContainerDefinitionOutputWithContext(context.Background())
}

func (i TaskDefinitionContainerDefinitionArgs) ToTaskDefinitionContainerDefinitionOutputWithContext(ctx context.Context) TaskDefinitionContainerDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionContainerDefinitionOutput)
}

// TaskDefinitionContainerDefinitionArrayInput is an input type that accepts TaskDefinitionContainerDefinitionArray and TaskDefinitionContainerDefinitionArrayOutput values.
// You can construct a concrete instance of `TaskDefinitionContainerDefinitionArrayInput` via:
//
//	TaskDefinitionContainerDefinitionArray{ TaskDefinitionContainerDefinitionArgs{...} }
type TaskDefinitionContainerDefinitionArrayInput interface {
	pulumi.Input

	ToTaskDefinitionContainerDefinitionArrayOutput() TaskDefinitionContainerDefinitionArrayOutput
	ToTaskDefinitionContainerDefinitionArrayOutputWithContext(context.Context) TaskDefinitionContainerDefinitionArrayOutput
}

type TaskDefinitionContainerDefinitionArray []TaskDefinitionContainerDefinitionInput

func (TaskDefinitionContainerDefinitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionContainerDefinition)(nil)).Elem()
}

func (i TaskDefinitionContainerDefinitionArray) ToTaskDefinitionContainerDefinitionArrayOutput() TaskDefinitionContainerDefinitionArrayOutput {
	return i.ToTaskDefinitionContainerDefinitionArrayOutputWithContext(context.Background())
}

func (i TaskDefinitionContainerDefinitionArray) ToTaskDefinitionContainerDefinitionArrayOutputWithContext(ctx context.Context) TaskDefinitionContainerDefinitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionContainerDefinitionArrayOutput)
}

// The “ContainerDefinition“ property specifies a container definition. Container definitions are used in task definitions to describe the different containers that are launched as part of a task.
type TaskDefinitionContainerDefinitionOutput struct{ *pulumi.OutputState }

func (TaskDefinitionContainerDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionContainerDefinition)(nil)).Elem()
}

func (o TaskDefinitionContainerDefinitionOutput) ToTaskDefinitionContainerDefinitionOutput() TaskDefinitionContainerDefinitionOutput {
	return o
}

func (o TaskDefinitionContainerDefinitionOutput) ToTaskDefinitionContainerDefinitionOutputWithContext(ctx context.Context) TaskDefinitionContainerDefinitionOutput {
	return o
}

// The command that's passed to the container. This parameter maps to “Cmd“ in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the “COMMAND“ parameter to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). For more information, see [https://docs.docker.com/engine/reference/builder/#cmd](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/builder/#cmd). If there are multiple arguments, each argument is a separated string in the array.
func (o TaskDefinitionContainerDefinitionOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) []string { return v.Command }).(pulumi.StringArrayOutput)
}

// The number of “cpu“ units reserved for the container. This parameter maps to “CpuShares“ in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the “--cpu-shares“ option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
//
//	This field is optional for tasks using the Fargate launch type, and the only requirement is that the total amount of CPU reserved for all containers within a task be lower than the task-level ``cpu`` value.
//	 You can determine the number of CPU units that are available per EC2 instance type by multiplying the vCPUs listed for that instance type on the [Amazon EC2 Instances](https://docs.aws.amazon.com/ec2/instance-types/) detail page by 1,024.
//	 Linux containers share unallocated CPU units with other containers on the cont
func (o TaskDefinitionContainerDefinitionOutput) Cpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *int { return v.Cpu }).(pulumi.IntPtrOutput)
}

// A list of ARNs in SSM or Amazon S3 to a credential spec (“CredSpec“) file that configures the container for Active Directory authentication. We recommend that you use this parameter instead of the “dockerSecurityOptions“. The maximum number of ARNs is 1.
//
//	There are two formats for each ARN.
//	 + credentialspecdomainless:MyARN You use credentialspecdomainless:MyARN to provide a CredSpec with an additional section for a secret in . You provide the login credentials to the domain in the secret. Each task that runs on any container instance can join different domains. You can use this format without joining the container instance to a domain. + credentialspec:MyARN You use credentialspec:MyARN to provide a CredSpec for a single domain. You must join the container instance to the domain before you start any tasks that use this task definition.
//	    In both formats, replace ``MyARN`` with the ARN in SSM or Amazon S3.
//	    If you provide a ``credentialspecdomainless:MyARN``, the ``credspec`` must
func (o TaskDefinitionContainerDefinitionOutput) CredentialSpecs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) []string { return v.CredentialSpecs }).(pulumi.StringArrayOutput)
}

// The dependencies defined for container startup and shutdown. A container can contain multiple dependencies. When a dependency is defined for container startup, for container shutdown it is reversed.
//
//	For tasks using the EC2 launch type, the container instances require at least version 1.26.0 of the container agent to turn on container dependencies. However, we recommend using the latest container agent version. For information about checking your agent version and updating to the latest version, see [Updating the Amazon ECS Container Agent](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html) in the *Amazon Elastic Container Service Developer Guide*. If you're using an Amazon ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the ``ecs-init`` package. If your container instances are launched from version ``20190301`` or later, then they contain the required versions of the container agent and ``ecs-init``. For more information, see [
func (o TaskDefinitionContainerDefinitionOutput) DependsOn() TaskDefinitionContainerDependencyArrayOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) []TaskDefinitionContainerDependency { return v.DependsOn }).(TaskDefinitionContainerDependencyArrayOutput)
}

// When this parameter is true, networking is off within the container. This parameter maps to “NetworkDisabled“ in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/).
//
//	This parameter is not supported for Windows containers.
func (o TaskDefinitionContainerDefinitionOutput) DisableNetworking() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *bool { return v.DisableNetworking }).(pulumi.BoolPtrOutput)
}

// A list of DNS search domains that are presented to the container. This parameter maps to “DnsSearch“ in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the “--dns-search“ option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
//
//	This parameter is not supported for Windows containers.
func (o TaskDefinitionContainerDefinitionOutput) DnsSearchDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) []string { return v.DnsSearchDomains }).(pulumi.StringArrayOutput)
}

// A list of DNS servers that are presented to the container. This parameter maps to “Dns“ in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the “--dns“ option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
//
//	This parameter is not supported for Windows containers.
func (o TaskDefinitionContainerDefinitionOutput) DnsServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) []string { return v.DnsServers }).(pulumi.StringArrayOutput)
}

// A key/value map of labels to add to the container. This parameter maps to “Labels“ in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the “--label“ option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: “sudo docker version --format '{{.Server.APIVersion}}'“
func (o TaskDefinitionContainerDefinitionOutput) DockerLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) map[string]string { return v.DockerLabels }).(pulumi.StringMapOutput)
}

// A list of strings to provide custom configuration for multiple security systems. For more information about valid values, see [Docker Run Security Configuration](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). This field isn't valid for containers in tasks using the Fargate launch type.
//
//	For Linux tasks on EC2, this parameter can be used to reference custom labels for SELinux and AppArmor multi-level security systems.
//	For any tasks on EC2, this parameter can be used to reference a credential spec file that configures a container for Active Directory authentication. For more information, see [Using gMSAs for Windows Containers](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/windows-gmsa.html) and [Using gMSAs for Linux Containers](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/linux-gmsa.html) in the *Amazon Elastic Container Service Developer Guide*.
//	This parameter maps to ``SecurityOpt`` in the [Create a co
func (o TaskDefinitionContainerDefinitionOutput) DockerSecurityOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) []string { return v.DockerSecurityOptions }).(pulumi.StringArrayOutput)
}

// Early versions of the Amazon ECS container agent don't properly handle “entryPoint“ parameters. If you have problems using “entryPoint“, update your container agent or enter your commands and arguments as “command“ array items instead.
//
//	The entry point that's passed to the container. This parameter maps to ``Entrypoint`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--entrypoint`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). For more information, see [https://docs.docker.com/engine/reference/builder/#entrypoint](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/builder/#entrypoint).
func (o TaskDefinitionContainerDefinitionOutput) EntryPoint() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) []string { return v.EntryPoint }).(pulumi.StringArrayOutput)
}

// The environment variables to pass to a container. This parameter maps to “Env“ in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the “--env“ option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
//
//	We don't recommend that you use plaintext environment variables for sensitive information, such as credential data.
func (o TaskDefinitionContainerDefinitionOutput) Environment() TaskDefinitionKeyValuePairArrayOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) []TaskDefinitionKeyValuePair { return v.Environment }).(TaskDefinitionKeyValuePairArrayOutput)
}

// A list of files containing the environment variables to pass to a container. This parameter maps to the “--env-file“ option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
//
//	You can specify up to ten environment files. The file must have a ``.env`` file extension. Each line in an environment file contains an environment variable in ``VARIABLE=VALUE`` format. Lines beginning with ``#`` are treated as comments and are ignored. For more information about the environment variable file syntax, see [Declare default environment variables in file](https://docs.aws.amazon.com/https://docs.docker.com/compose/env-file/).
//	If there are environment variables specified using the ``environment`` parameter in a container definition, they take precedence over the variables contained within an environment file. If multiple environment files are specified that contain the same variable, they're processed from the top down. We recommend t
func (o TaskDefinitionContainerDefinitionOutput) EnvironmentFiles() TaskDefinitionEnvironmentFileArrayOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) []TaskDefinitionEnvironmentFile { return v.EnvironmentFiles }).(TaskDefinitionEnvironmentFileArrayOutput)
}

// If the “essential“ parameter of a container is marked as “true“, and that container fails or stops for any reason, all other containers that are part of the task are stopped. If the “essential“ parameter of a container is marked as “false“, its failure doesn't affect the rest of the containers in a task. If this parameter is omitted, a container is assumed to be essential.
//
//	All tasks must have at least one essential container. If you have an application that's composed of multiple containers, group containers that are used for a common purpose into components, and separate the different components into multiple task definitions. For more information, see [Application Architecture](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/application_architecture.html) in the *Amazon Elastic Container Service Developer Guide*.
func (o TaskDefinitionContainerDefinitionOutput) Essential() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *bool { return v.Essential }).(pulumi.BoolPtrOutput)
}

// A list of hostnames and IP address mappings to append to the “/etc/hosts“ file on the container. This parameter maps to “ExtraHosts“ in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the “--add-host“ option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
//
//	This parameter isn't supported for Windows containers or tasks that use the ``awsvpc`` network mode.
func (o TaskDefinitionContainerDefinitionOutput) ExtraHosts() TaskDefinitionHostEntryArrayOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) []TaskDefinitionHostEntry { return v.ExtraHosts }).(TaskDefinitionHostEntryArrayOutput)
}

// The FireLens configuration for the container. This is used to specify and configure a log router for container logs. For more information, see [Custom Log Routing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html) in the *Amazon Elastic Container Service Developer Guide*.
func (o TaskDefinitionContainerDefinitionOutput) FirelensConfiguration() TaskDefinitionFirelensConfigurationPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *TaskDefinitionFirelensConfiguration {
		return v.FirelensConfiguration
	}).(TaskDefinitionFirelensConfigurationPtrOutput)
}

// The container health check command and associated configuration parameters for the container. This parameter maps to “HealthCheck“ in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the “HEALTHCHECK“ parameter of [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
func (o TaskDefinitionContainerDefinitionOutput) HealthCheck() TaskDefinitionHealthCheckPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *TaskDefinitionHealthCheck { return v.HealthCheck }).(TaskDefinitionHealthCheckPtrOutput)
}

// The hostname to use for your container. This parameter maps to “Hostname“ in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the “--hostname“ option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
//
//	The ``hostname`` parameter is not supported if you're using the ``awsvpc`` network mode.
func (o TaskDefinitionContainerDefinitionOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// The image used to start a container. This string is passed directly to the Docker daemon. By default, images in the Docker Hub registry are available. Other repositories are specified with either “repository-url/image:tag“ or “repository-url/image@digest“. Up to 255 letters (uppercase and lowercase), numbers, hyphens, underscores, colons, periods, forward slashes, and number signs are allowed. This parameter maps to “Image“ in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the “IMAGE“ parameter of [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
//   - When a new task starts, the Amazon ECS container agent pulls the latest version of the specified image and tag for the container to use. However, subsequent updates to a repository image
func (o TaskDefinitionContainerDefinitionOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) string { return v.Image }).(pulumi.StringOutput)
}

// When this parameter is “true“, you can deploy containerized applications that require “stdin“ or a “tty“ to be allocated. This parameter maps to “OpenStdin“ in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the “--interactive“ option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
func (o TaskDefinitionContainerDefinitionOutput) Interactive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *bool { return v.Interactive }).(pulumi.BoolPtrOutput)
}

// The “links“ parameter allows containers to communicate with each other without the need for port mappings. This parameter is only supported if the network mode of a task definition is “bridge“. The “name:internalName“ construct is analogous to “name:alias“ in Docker links. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed. For more information about linking Docker containers, go to [Legacy container links](https://docs.aws.amazon.com/https://docs.docker.com/network/links/) in the Docker documentation. This parameter maps to “Links“ in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the “--link“ option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
//
//	This parameter is not supported for W
func (o TaskDefinitionContainerDefinitionOutput) Links() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) []string { return v.Links }).(pulumi.StringArrayOutput)
}

// Linux-specific modifications that are applied to the container, such as Linux kernel capabilities. For more information see [KernelCapabilities](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_KernelCapabilities.html).
//
//	This parameter is not supported for Windows containers.
func (o TaskDefinitionContainerDefinitionOutput) LinuxParameters() TaskDefinitionLinuxParametersPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *TaskDefinitionLinuxParameters { return v.LinuxParameters }).(TaskDefinitionLinuxParametersPtrOutput)
}

// The log configuration specification for the container.
//
//	This parameter maps to ``LogConfig`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--log-driver`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/). By default, containers use the same logging driver that the Docker daemon uses. However, the container may use a different logging driver than the Docker daemon by specifying a log driver with this parameter in the container definition. To use a different logging driver for a container, the log system must be configured properly on the container instance (or on a different log server for remote logging options). For more information on the options for different supported log drivers, see [Configure logging drivers](https://docs.aws.amazon.com/htt
func (o TaskDefinitionContainerDefinitionOutput) LogConfiguration() TaskDefinitionLogConfigurationPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *TaskDefinitionLogConfiguration { return v.LogConfiguration }).(TaskDefinitionLogConfigurationPtrOutput)
}

// The amount (in MiB) of memory to present to the container. If your container attempts to exceed the memory specified here, the container is killed. The total amount of memory reserved for all containers within a task must be lower than the task “memory“ value, if one is specified. This parameter maps to “Memory“ in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the “--memory“ option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
//
//	If using the Fargate launch type, this parameter is optional.
//	If using the EC2 launch type, you must specify either a task-level memory value or a container-level memory value. If you specify both a container-level ``memory`` and ``memoryReservation`` value, ``memory`` must be greater than ``memoryReserva
func (o TaskDefinitionContainerDefinitionOutput) Memory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *int { return v.Memory }).(pulumi.IntPtrOutput)
}

// The soft limit (in MiB) of memory to reserve for the container. When system memory is under heavy contention, Docker attempts to keep the container memory to this soft limit. However, your container can consume more memory when it needs to, up to either the hard limit specified with the “memory“ parameter (if applicable), or all of the available memory on the container instance, whichever comes first. This parameter maps to “MemoryReservation“ in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the “--memory-reservation“ option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
//
//	If a task-level memory value is not specified, you must specify a non-zero integer for one or both of ``memory`` or ``memoryReservation`` in a container definiti
func (o TaskDefinitionContainerDefinitionOutput) MemoryReservation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *int { return v.MemoryReservation }).(pulumi.IntPtrOutput)
}

// The mount points for data volumes in your container.
//
//	This parameter maps to ``Volumes`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--volume`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
//	Windows containers can mount whole directories on the same drive as ``$env:ProgramData``. Windows containers can't mount directories on a different drive, and mount point can't be across drives.
func (o TaskDefinitionContainerDefinitionOutput) MountPoints() TaskDefinitionMountPointArrayOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) []TaskDefinitionMountPoint { return v.MountPoints }).(TaskDefinitionMountPointArrayOutput)
}

// The name of a container. If you're linking multiple containers together in a task definition, the “name“ of one container can be entered in the “links“ of another container to connect the containers. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed. This parameter maps to “name“ in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the “--name“ option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
func (o TaskDefinitionContainerDefinitionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) string { return v.Name }).(pulumi.StringOutput)
}

// The list of port mappings for the container. Port mappings allow containers to access ports on the host container instance to send or receive traffic.
//
//	For task definitions that use the ``awsvpc`` network mode, you should only specify the ``containerPort``. The ``hostPort`` can be left blank or it must be the same value as the ``containerPort``.
//	Port mappings on Windows use the ``NetNAT`` gateway address rather than ``localhost``. There is no loopback for port mappings on Windows, so you cannot access a container's mapped port from the host itself.
//	This parameter maps to ``PortBindings`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--publish`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/). If the network mode of a task definition is set to
func (o TaskDefinitionContainerDefinitionOutput) PortMappings() TaskDefinitionPortMappingArrayOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) []TaskDefinitionPortMapping { return v.PortMappings }).(TaskDefinitionPortMappingArrayOutput)
}

// When this parameter is true, the container is given elevated privileges on the host container instance (similar to the “root“ user). This parameter maps to “Privileged“ in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the “--privileged“ option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
//
//	This parameter is not supported for Windows containers or tasks run on FARGATElong.
func (o TaskDefinitionContainerDefinitionOutput) Privileged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *bool { return v.Privileged }).(pulumi.BoolPtrOutput)
}

// When this parameter is “true“, a TTY is allocated. This parameter maps to “Tty“ in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the “--tty“ option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
func (o TaskDefinitionContainerDefinitionOutput) PseudoTerminal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *bool { return v.PseudoTerminal }).(pulumi.BoolPtrOutput)
}

// When this parameter is true, the container is given read-only access to its root file system. This parameter maps to “ReadonlyRootfs“ in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the “--read-only“ option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
//
//	This parameter is not supported for Windows containers.
func (o TaskDefinitionContainerDefinitionOutput) ReadonlyRootFilesystem() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *bool { return v.ReadonlyRootFilesystem }).(pulumi.BoolPtrOutput)
}

// The private repository authentication credentials to use.
func (o TaskDefinitionContainerDefinitionOutput) RepositoryCredentials() TaskDefinitionRepositoryCredentialsPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *TaskDefinitionRepositoryCredentials {
		return v.RepositoryCredentials
	}).(TaskDefinitionRepositoryCredentialsPtrOutput)
}

// The type and amount of a resource to assign to a container. The only supported resource is a GPU.
func (o TaskDefinitionContainerDefinitionOutput) ResourceRequirements() TaskDefinitionResourceRequirementArrayOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) []TaskDefinitionResourceRequirement {
		return v.ResourceRequirements
	}).(TaskDefinitionResourceRequirementArrayOutput)
}

// The secrets to pass to the container. For more information, see [Specifying Sensitive Data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the *Amazon Elastic Container Service Developer Guide*.
func (o TaskDefinitionContainerDefinitionOutput) Secrets() TaskDefinitionSecretArrayOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) []TaskDefinitionSecret { return v.Secrets }).(TaskDefinitionSecretArrayOutput)
}

// Time duration (in seconds) to wait before giving up on resolving dependencies for a container. For example, you specify two containers in a task definition with containerA having a dependency on containerB reaching a “COMPLETE“, “SUCCESS“, or “HEALTHY“ status. If a “startTimeout“ value is specified for containerB and it doesn't reach the desired status within that time then containerA gives up and not start. This results in the task transitioning to a “STOPPED“ state.
//
//	 When the ``ECS_CONTAINER_START_TIMEOUT`` container agent configuration variable is used, it's enforced independently from this start timeout value.
//	 For tasks using the Fargate launch type, the task or service requires the following platforms:
//	 +  Linux platform version ``1.3.0`` or later.
//	 +  Windows platform version ``1.0.0`` or later.
//
//	For tasks using the EC2 launch type, your container instances require at least version ``1.26.0`` of the container agent to use a container start timeout value. However
func (o TaskDefinitionContainerDefinitionOutput) StartTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *int { return v.StartTimeout }).(pulumi.IntPtrOutput)
}

// Time duration (in seconds) to wait before the container is forcefully killed if it doesn't exit normally on its own.
//
//	For tasks using the Fargate launch type, the task or service requires the following platforms:
//	 +  Linux platform version ``1.3.0`` or later.
//	 +  Windows platform version ``1.0.0`` or later.
//
//	The max stop timeout value is 120 seconds and if the parameter is not specified, the default value of 30 seconds is used.
//	For tasks that use the EC2 launch type, if the ``stopTimeout`` parameter isn't specified, the value set for the Amazon ECS container agent configuration variable ``ECS_CONTAINER_STOP_TIMEOUT`` is used. If neither the ``stopTimeout`` parameter or the ``ECS_CONTAINER_STOP_TIMEOUT`` agent configuration variable are set, then the default values of 30 seconds for Linux containers and 30 seconds on Windows containers are used. Your container instances require at least version 1.26.0 of the container agent to use a container stop timeout value. However, we recomm
func (o TaskDefinitionContainerDefinitionOutput) StopTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *int { return v.StopTimeout }).(pulumi.IntPtrOutput)
}

// A list of namespaced kernel parameters to set in the container. This parameter maps to “Sysctls“ in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the “--sysctl“ option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). For example, you can configure “net.ipv4.tcp_keepalive_time“ setting to maintain longer lived connections.
func (o TaskDefinitionContainerDefinitionOutput) SystemControls() TaskDefinitionSystemControlArrayOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) []TaskDefinitionSystemControl { return v.SystemControls }).(TaskDefinitionSystemControlArrayOutput)
}

// A list of “ulimits“ to set in the container. This parameter maps to “Ulimits“ in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the “--ulimit“ option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/). Valid naming values are displayed in the [Ulimit](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_Ulimit.html) data type. This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: “sudo docker version --format '{{.Server.APIVersion}}'“
//
//	This parameter is not supported for Windows containers.
func (o TaskDefinitionContainerDefinitionOutput) Ulimits() TaskDefinitionUlimitArrayOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) []TaskDefinitionUlimit { return v.Ulimits }).(TaskDefinitionUlimitArrayOutput)
}

// The user to use inside the container. This parameter maps to “User“ in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the “--user“ option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
//
//	When running tasks using the ``host`` network mode, don't run containers using the root user (UID 0). We recommend using a non-root user for better security.
//	You can specify the ``user`` using the following formats. If specifying a UID or GID, you must specify it as a positive integer.
//	+   ``user``
//	+   ``user:group``
//	+   ``uid``
//	+   ``uid:gid``
//	+   ``user:gid``
//	+   ``uid:group``
//
//	This parameter is not supported for Windows containers.
func (o TaskDefinitionContainerDefinitionOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *string { return v.User }).(pulumi.StringPtrOutput)
}

// Data volumes to mount from another container. This parameter maps to “VolumesFrom“ in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the “--volumes-from“ option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
func (o TaskDefinitionContainerDefinitionOutput) VolumesFrom() TaskDefinitionVolumeFromArrayOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) []TaskDefinitionVolumeFrom { return v.VolumesFrom }).(TaskDefinitionVolumeFromArrayOutput)
}

// The working directory to run commands inside the container in. This parameter maps to “WorkingDir“ in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the “--workdir“ option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
func (o TaskDefinitionContainerDefinitionOutput) WorkingDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *string { return v.WorkingDirectory }).(pulumi.StringPtrOutput)
}

type TaskDefinitionContainerDefinitionArrayOutput struct{ *pulumi.OutputState }

func (TaskDefinitionContainerDefinitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionContainerDefinition)(nil)).Elem()
}

func (o TaskDefinitionContainerDefinitionArrayOutput) ToTaskDefinitionContainerDefinitionArrayOutput() TaskDefinitionContainerDefinitionArrayOutput {
	return o
}

func (o TaskDefinitionContainerDefinitionArrayOutput) ToTaskDefinitionContainerDefinitionArrayOutputWithContext(ctx context.Context) TaskDefinitionContainerDefinitionArrayOutput {
	return o
}

func (o TaskDefinitionContainerDefinitionArrayOutput) Index(i pulumi.IntInput) TaskDefinitionContainerDefinitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskDefinitionContainerDefinition {
		return vs[0].([]TaskDefinitionContainerDefinition)[vs[1].(int)]
	}).(TaskDefinitionContainerDefinitionOutput)
}

// The “ContainerDependency“ property specifies the dependencies defined for container startup and shutdown. A container can contain multiple dependencies. When a dependency is defined for container startup, for container shutdown it is reversed.
//
//	Your Amazon ECS container instances require at least version 1.26.0 of the container agent to enable container dependencies. However, we recommend using the latest container agent version. For information about checking your agent version and updating to the latest version, see [Updating the Amazon ECS Container Agent](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html) in the *Amazon Elastic Container Service Developer Guide*. If you are using an Amazon ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the ``ecs-init`` package. If your container instances are launched from version ``20190301`` or later, then they contain the required versions of the container agent and ``ecs-init``. For m
type TaskDefinitionContainerDependency struct {
	// The dependency condition of the container. The following are the available conditions and their behavior:
	//   +   ``START`` - This condition emulates the behavior of links and volumes today. It validates that a dependent container is started before permitting other containers to start.
	//   +   ``COMPLETE`` - This condition validates that a dependent container runs to completion (exits) before permitting other containers to start. This can be useful for nonessential containers that run a script and then exit. This condition can't be set on an essential container.
	//   +   ``SUCCESS`` - This condition is the same as ``COMPLETE``, but it also requires that the container exits with a ``zero`` status. This condition can't be set on an essential container.
	//   +   ``HEALTHY`` - This condition validates that the dependent container passes its Docker health check before permitting other containers to start. This requires that the dependent container has health checks configured. This condition is confi
	Condition *string `pulumi:"condition"`
	// The name of a container.
	ContainerName *string `pulumi:"containerName"`
}

// TaskDefinitionContainerDependencyInput is an input type that accepts TaskDefinitionContainerDependencyArgs and TaskDefinitionContainerDependencyOutput values.
// You can construct a concrete instance of `TaskDefinitionContainerDependencyInput` via:
//
//	TaskDefinitionContainerDependencyArgs{...}
type TaskDefinitionContainerDependencyInput interface {
	pulumi.Input

	ToTaskDefinitionContainerDependencyOutput() TaskDefinitionContainerDependencyOutput
	ToTaskDefinitionContainerDependencyOutputWithContext(context.Context) TaskDefinitionContainerDependencyOutput
}

// The “ContainerDependency“ property specifies the dependencies defined for container startup and shutdown. A container can contain multiple dependencies. When a dependency is defined for container startup, for container shutdown it is reversed.
//
//	Your Amazon ECS container instances require at least version 1.26.0 of the container agent to enable container dependencies. However, we recommend using the latest container agent version. For information about checking your agent version and updating to the latest version, see [Updating the Amazon ECS Container Agent](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html) in the *Amazon Elastic Container Service Developer Guide*. If you are using an Amazon ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the ``ecs-init`` package. If your container instances are launched from version ``20190301`` or later, then they contain the required versions of the container agent and ``ecs-init``. For m
type TaskDefinitionContainerDependencyArgs struct {
	// The dependency condition of the container. The following are the available conditions and their behavior:
	//   +   ``START`` - This condition emulates the behavior of links and volumes today. It validates that a dependent container is started before permitting other containers to start.
	//   +   ``COMPLETE`` - This condition validates that a dependent container runs to completion (exits) before permitting other containers to start. This can be useful for nonessential containers that run a script and then exit. This condition can't be set on an essential container.
	//   +   ``SUCCESS`` - This condition is the same as ``COMPLETE``, but it also requires that the container exits with a ``zero`` status. This condition can't be set on an essential container.
	//   +   ``HEALTHY`` - This condition validates that the dependent container passes its Docker health check before permitting other containers to start. This requires that the dependent container has health checks configured. This condition is confi
	Condition pulumi.StringPtrInput `pulumi:"condition"`
	// The name of a container.
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
}

func (TaskDefinitionContainerDependencyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionContainerDependency)(nil)).Elem()
}

func (i TaskDefinitionContainerDependencyArgs) ToTaskDefinitionContainerDependencyOutput() TaskDefinitionContainerDependencyOutput {
	return i.ToTaskDefinitionContainerDependencyOutputWithContext(context.Background())
}

func (i TaskDefinitionContainerDependencyArgs) ToTaskDefinitionContainerDependencyOutputWithContext(ctx context.Context) TaskDefinitionContainerDependencyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionContainerDependencyOutput)
}

// TaskDefinitionContainerDependencyArrayInput is an input type that accepts TaskDefinitionContainerDependencyArray and TaskDefinitionContainerDependencyArrayOutput values.
// You can construct a concrete instance of `TaskDefinitionContainerDependencyArrayInput` via:
//
//	TaskDefinitionContainerDependencyArray{ TaskDefinitionContainerDependencyArgs{...} }
type TaskDefinitionContainerDependencyArrayInput interface {
	pulumi.Input

	ToTaskDefinitionContainerDependencyArrayOutput() TaskDefinitionContainerDependencyArrayOutput
	ToTaskDefinitionContainerDependencyArrayOutputWithContext(context.Context) TaskDefinitionContainerDependencyArrayOutput
}

type TaskDefinitionContainerDependencyArray []TaskDefinitionContainerDependencyInput

func (TaskDefinitionContainerDependencyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionContainerDependency)(nil)).Elem()
}

func (i TaskDefinitionContainerDependencyArray) ToTaskDefinitionContainerDependencyArrayOutput() TaskDefinitionContainerDependencyArrayOutput {
	return i.ToTaskDefinitionContainerDependencyArrayOutputWithContext(context.Background())
}

func (i TaskDefinitionContainerDependencyArray) ToTaskDefinitionContainerDependencyArrayOutputWithContext(ctx context.Context) TaskDefinitionContainerDependencyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionContainerDependencyArrayOutput)
}

// The “ContainerDependency“ property specifies the dependencies defined for container startup and shutdown. A container can contain multiple dependencies. When a dependency is defined for container startup, for container shutdown it is reversed.
//
//	Your Amazon ECS container instances require at least version 1.26.0 of the container agent to enable container dependencies. However, we recommend using the latest container agent version. For information about checking your agent version and updating to the latest version, see [Updating the Amazon ECS Container Agent](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html) in the *Amazon Elastic Container Service Developer Guide*. If you are using an Amazon ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the ``ecs-init`` package. If your container instances are launched from version ``20190301`` or later, then they contain the required versions of the container agent and ``ecs-init``. For m
type TaskDefinitionContainerDependencyOutput struct{ *pulumi.OutputState }

func (TaskDefinitionContainerDependencyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionContainerDependency)(nil)).Elem()
}

func (o TaskDefinitionContainerDependencyOutput) ToTaskDefinitionContainerDependencyOutput() TaskDefinitionContainerDependencyOutput {
	return o
}

func (o TaskDefinitionContainerDependencyOutput) ToTaskDefinitionContainerDependencyOutputWithContext(ctx context.Context) TaskDefinitionContainerDependencyOutput {
	return o
}

// The dependency condition of the container. The following are the available conditions and their behavior:
//   - “START“ - This condition emulates the behavior of links and volumes today. It validates that a dependent container is started before permitting other containers to start.
//   - “COMPLETE“ - This condition validates that a dependent container runs to completion (exits) before permitting other containers to start. This can be useful for nonessential containers that run a script and then exit. This condition can't be set on an essential container.
//   - “SUCCESS“ - This condition is the same as “COMPLETE“, but it also requires that the container exits with a “zero“ status. This condition can't be set on an essential container.
//   - “HEALTHY“ - This condition validates that the dependent container passes its Docker health check before permitting other containers to start. This requires that the dependent container has health checks configured. This condition is confi
func (o TaskDefinitionContainerDependencyOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDependency) *string { return v.Condition }).(pulumi.StringPtrOutput)
}

// The name of a container.
func (o TaskDefinitionContainerDependencyOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDependency) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

type TaskDefinitionContainerDependencyArrayOutput struct{ *pulumi.OutputState }

func (TaskDefinitionContainerDependencyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionContainerDependency)(nil)).Elem()
}

func (o TaskDefinitionContainerDependencyArrayOutput) ToTaskDefinitionContainerDependencyArrayOutput() TaskDefinitionContainerDependencyArrayOutput {
	return o
}

func (o TaskDefinitionContainerDependencyArrayOutput) ToTaskDefinitionContainerDependencyArrayOutputWithContext(ctx context.Context) TaskDefinitionContainerDependencyArrayOutput {
	return o
}

func (o TaskDefinitionContainerDependencyArrayOutput) Index(i pulumi.IntInput) TaskDefinitionContainerDependencyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskDefinitionContainerDependency {
		return vs[0].([]TaskDefinitionContainerDependency)[vs[1].(int)]
	}).(TaskDefinitionContainerDependencyOutput)
}

// The “Device“ property specifies an object representing a container instance host device.
type TaskDefinitionDevice struct {
	// The path inside the container at which to expose the host device.
	ContainerPath *string `pulumi:"containerPath"`
	// The path for the device on the host container instance.
	HostPath *string `pulumi:"hostPath"`
	// The explicit permissions to provide to the container for the device. By default, the container has permissions for ``read``, ``write``, and ``mknod`` for the device.
	Permissions []string `pulumi:"permissions"`
}

// TaskDefinitionDeviceInput is an input type that accepts TaskDefinitionDeviceArgs and TaskDefinitionDeviceOutput values.
// You can construct a concrete instance of `TaskDefinitionDeviceInput` via:
//
//	TaskDefinitionDeviceArgs{...}
type TaskDefinitionDeviceInput interface {
	pulumi.Input

	ToTaskDefinitionDeviceOutput() TaskDefinitionDeviceOutput
	ToTaskDefinitionDeviceOutputWithContext(context.Context) TaskDefinitionDeviceOutput
}

// The “Device“ property specifies an object representing a container instance host device.
type TaskDefinitionDeviceArgs struct {
	// The path inside the container at which to expose the host device.
	ContainerPath pulumi.StringPtrInput `pulumi:"containerPath"`
	// The path for the device on the host container instance.
	HostPath pulumi.StringPtrInput `pulumi:"hostPath"`
	// The explicit permissions to provide to the container for the device. By default, the container has permissions for ``read``, ``write``, and ``mknod`` for the device.
	Permissions pulumi.StringArrayInput `pulumi:"permissions"`
}

func (TaskDefinitionDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionDevice)(nil)).Elem()
}

func (i TaskDefinitionDeviceArgs) ToTaskDefinitionDeviceOutput() TaskDefinitionDeviceOutput {
	return i.ToTaskDefinitionDeviceOutputWithContext(context.Background())
}

func (i TaskDefinitionDeviceArgs) ToTaskDefinitionDeviceOutputWithContext(ctx context.Context) TaskDefinitionDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionDeviceOutput)
}

// TaskDefinitionDeviceArrayInput is an input type that accepts TaskDefinitionDeviceArray and TaskDefinitionDeviceArrayOutput values.
// You can construct a concrete instance of `TaskDefinitionDeviceArrayInput` via:
//
//	TaskDefinitionDeviceArray{ TaskDefinitionDeviceArgs{...} }
type TaskDefinitionDeviceArrayInput interface {
	pulumi.Input

	ToTaskDefinitionDeviceArrayOutput() TaskDefinitionDeviceArrayOutput
	ToTaskDefinitionDeviceArrayOutputWithContext(context.Context) TaskDefinitionDeviceArrayOutput
}

type TaskDefinitionDeviceArray []TaskDefinitionDeviceInput

func (TaskDefinitionDeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionDevice)(nil)).Elem()
}

func (i TaskDefinitionDeviceArray) ToTaskDefinitionDeviceArrayOutput() TaskDefinitionDeviceArrayOutput {
	return i.ToTaskDefinitionDeviceArrayOutputWithContext(context.Background())
}

func (i TaskDefinitionDeviceArray) ToTaskDefinitionDeviceArrayOutputWithContext(ctx context.Context) TaskDefinitionDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionDeviceArrayOutput)
}

// The “Device“ property specifies an object representing a container instance host device.
type TaskDefinitionDeviceOutput struct{ *pulumi.OutputState }

func (TaskDefinitionDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionDevice)(nil)).Elem()
}

func (o TaskDefinitionDeviceOutput) ToTaskDefinitionDeviceOutput() TaskDefinitionDeviceOutput {
	return o
}

func (o TaskDefinitionDeviceOutput) ToTaskDefinitionDeviceOutputWithContext(ctx context.Context) TaskDefinitionDeviceOutput {
	return o
}

// The path inside the container at which to expose the host device.
func (o TaskDefinitionDeviceOutput) ContainerPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionDevice) *string { return v.ContainerPath }).(pulumi.StringPtrOutput)
}

// The path for the device on the host container instance.
func (o TaskDefinitionDeviceOutput) HostPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionDevice) *string { return v.HostPath }).(pulumi.StringPtrOutput)
}

// The explicit permissions to provide to the container for the device. By default, the container has permissions for “read“, “write“, and “mknod“ for the device.
func (o TaskDefinitionDeviceOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TaskDefinitionDevice) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

type TaskDefinitionDeviceArrayOutput struct{ *pulumi.OutputState }

func (TaskDefinitionDeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionDevice)(nil)).Elem()
}

func (o TaskDefinitionDeviceArrayOutput) ToTaskDefinitionDeviceArrayOutput() TaskDefinitionDeviceArrayOutput {
	return o
}

func (o TaskDefinitionDeviceArrayOutput) ToTaskDefinitionDeviceArrayOutputWithContext(ctx context.Context) TaskDefinitionDeviceArrayOutput {
	return o
}

func (o TaskDefinitionDeviceArrayOutput) Index(i pulumi.IntInput) TaskDefinitionDeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskDefinitionDevice {
		return vs[0].([]TaskDefinitionDevice)[vs[1].(int)]
	}).(TaskDefinitionDeviceOutput)
}

// The “DockerVolumeConfiguration“ property specifies a Docker volume configuration and is used when you use Docker volumes. Docker volumes are only supported when you are using the EC2 launch type. Windows containers only support the use of the “local“ driver. To use bind mounts, specify a “host“ instead.
type TaskDefinitionDockerVolumeConfiguration struct {
	// If this value is ``true``, the Docker volume is created if it doesn't already exist.
	//   This field is only used if the ``scope`` is ``shared``.
	Autoprovision *bool `pulumi:"autoprovision"`
	// The Docker volume driver to use. The driver value must match the driver name provided by Docker because it is used for task placement. If the driver was installed using the Docker plugin CLI, use ``docker plugin ls`` to retrieve the driver name from your container instance. If the driver was installed using another method, use Docker plugin discovery to retrieve the driver name. For more information, see [Docker plugin discovery](https://docs.aws.amazon.com/https://docs.docker.com/engine/extend/plugin_api/#plugin-discovery). This parameter maps to ``Driver`` in the [Create a volume](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``xxdriver`` option to [docker volume create](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/commandline/volume_create/).
	Driver *string `pulumi:"driver"`
	// A map of Docker driver-specific options passed through. This parameter maps to ``DriverOpts`` in the [Create a volume](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``xxopt`` option to [docker volume create](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/commandline/volume_create/).
	DriverOpts map[string]string `pulumi:"driverOpts"`
	// Custom metadata to add to your Docker volume. This parameter maps to ``Labels`` in the [Create a volume](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``xxlabel`` option to [docker volume create](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/commandline/volume_create/).
	Labels map[string]string `pulumi:"labels"`
	// The scope for the Docker volume that determines its lifecycle. Docker volumes that are scoped to a ``task`` are automatically provisioned when the task starts and destroyed when the task stops. Docker volumes that are scoped as ``shared`` persist after the task stops.
	Scope *string `pulumi:"scope"`
}

// TaskDefinitionDockerVolumeConfigurationInput is an input type that accepts TaskDefinitionDockerVolumeConfigurationArgs and TaskDefinitionDockerVolumeConfigurationOutput values.
// You can construct a concrete instance of `TaskDefinitionDockerVolumeConfigurationInput` via:
//
//	TaskDefinitionDockerVolumeConfigurationArgs{...}
type TaskDefinitionDockerVolumeConfigurationInput interface {
	pulumi.Input

	ToTaskDefinitionDockerVolumeConfigurationOutput() TaskDefinitionDockerVolumeConfigurationOutput
	ToTaskDefinitionDockerVolumeConfigurationOutputWithContext(context.Context) TaskDefinitionDockerVolumeConfigurationOutput
}

// The “DockerVolumeConfiguration“ property specifies a Docker volume configuration and is used when you use Docker volumes. Docker volumes are only supported when you are using the EC2 launch type. Windows containers only support the use of the “local“ driver. To use bind mounts, specify a “host“ instead.
type TaskDefinitionDockerVolumeConfigurationArgs struct {
	// If this value is ``true``, the Docker volume is created if it doesn't already exist.
	//   This field is only used if the ``scope`` is ``shared``.
	Autoprovision pulumi.BoolPtrInput `pulumi:"autoprovision"`
	// The Docker volume driver to use. The driver value must match the driver name provided by Docker because it is used for task placement. If the driver was installed using the Docker plugin CLI, use ``docker plugin ls`` to retrieve the driver name from your container instance. If the driver was installed using another method, use Docker plugin discovery to retrieve the driver name. For more information, see [Docker plugin discovery](https://docs.aws.amazon.com/https://docs.docker.com/engine/extend/plugin_api/#plugin-discovery). This parameter maps to ``Driver`` in the [Create a volume](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``xxdriver`` option to [docker volume create](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/commandline/volume_create/).
	Driver pulumi.StringPtrInput `pulumi:"driver"`
	// A map of Docker driver-specific options passed through. This parameter maps to ``DriverOpts`` in the [Create a volume](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``xxopt`` option to [docker volume create](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/commandline/volume_create/).
	DriverOpts pulumi.StringMapInput `pulumi:"driverOpts"`
	// Custom metadata to add to your Docker volume. This parameter maps to ``Labels`` in the [Create a volume](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``xxlabel`` option to [docker volume create](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/commandline/volume_create/).
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// The scope for the Docker volume that determines its lifecycle. Docker volumes that are scoped to a ``task`` are automatically provisioned when the task starts and destroyed when the task stops. Docker volumes that are scoped as ``shared`` persist after the task stops.
	Scope pulumi.StringPtrInput `pulumi:"scope"`
}

func (TaskDefinitionDockerVolumeConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionDockerVolumeConfiguration)(nil)).Elem()
}

func (i TaskDefinitionDockerVolumeConfigurationArgs) ToTaskDefinitionDockerVolumeConfigurationOutput() TaskDefinitionDockerVolumeConfigurationOutput {
	return i.ToTaskDefinitionDockerVolumeConfigurationOutputWithContext(context.Background())
}

func (i TaskDefinitionDockerVolumeConfigurationArgs) ToTaskDefinitionDockerVolumeConfigurationOutputWithContext(ctx context.Context) TaskDefinitionDockerVolumeConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionDockerVolumeConfigurationOutput)
}

func (i TaskDefinitionDockerVolumeConfigurationArgs) ToTaskDefinitionDockerVolumeConfigurationPtrOutput() TaskDefinitionDockerVolumeConfigurationPtrOutput {
	return i.ToTaskDefinitionDockerVolumeConfigurationPtrOutputWithContext(context.Background())
}

func (i TaskDefinitionDockerVolumeConfigurationArgs) ToTaskDefinitionDockerVolumeConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionDockerVolumeConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionDockerVolumeConfigurationOutput).ToTaskDefinitionDockerVolumeConfigurationPtrOutputWithContext(ctx)
}

// TaskDefinitionDockerVolumeConfigurationPtrInput is an input type that accepts TaskDefinitionDockerVolumeConfigurationArgs, TaskDefinitionDockerVolumeConfigurationPtr and TaskDefinitionDockerVolumeConfigurationPtrOutput values.
// You can construct a concrete instance of `TaskDefinitionDockerVolumeConfigurationPtrInput` via:
//
//	        TaskDefinitionDockerVolumeConfigurationArgs{...}
//
//	or:
//
//	        nil
type TaskDefinitionDockerVolumeConfigurationPtrInput interface {
	pulumi.Input

	ToTaskDefinitionDockerVolumeConfigurationPtrOutput() TaskDefinitionDockerVolumeConfigurationPtrOutput
	ToTaskDefinitionDockerVolumeConfigurationPtrOutputWithContext(context.Context) TaskDefinitionDockerVolumeConfigurationPtrOutput
}

type taskDefinitionDockerVolumeConfigurationPtrType TaskDefinitionDockerVolumeConfigurationArgs

func TaskDefinitionDockerVolumeConfigurationPtr(v *TaskDefinitionDockerVolumeConfigurationArgs) TaskDefinitionDockerVolumeConfigurationPtrInput {
	return (*taskDefinitionDockerVolumeConfigurationPtrType)(v)
}

func (*taskDefinitionDockerVolumeConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionDockerVolumeConfiguration)(nil)).Elem()
}

func (i *taskDefinitionDockerVolumeConfigurationPtrType) ToTaskDefinitionDockerVolumeConfigurationPtrOutput() TaskDefinitionDockerVolumeConfigurationPtrOutput {
	return i.ToTaskDefinitionDockerVolumeConfigurationPtrOutputWithContext(context.Background())
}

func (i *taskDefinitionDockerVolumeConfigurationPtrType) ToTaskDefinitionDockerVolumeConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionDockerVolumeConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionDockerVolumeConfigurationPtrOutput)
}

// The “DockerVolumeConfiguration“ property specifies a Docker volume configuration and is used when you use Docker volumes. Docker volumes are only supported when you are using the EC2 launch type. Windows containers only support the use of the “local“ driver. To use bind mounts, specify a “host“ instead.
type TaskDefinitionDockerVolumeConfigurationOutput struct{ *pulumi.OutputState }

func (TaskDefinitionDockerVolumeConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionDockerVolumeConfiguration)(nil)).Elem()
}

func (o TaskDefinitionDockerVolumeConfigurationOutput) ToTaskDefinitionDockerVolumeConfigurationOutput() TaskDefinitionDockerVolumeConfigurationOutput {
	return o
}

func (o TaskDefinitionDockerVolumeConfigurationOutput) ToTaskDefinitionDockerVolumeConfigurationOutputWithContext(ctx context.Context) TaskDefinitionDockerVolumeConfigurationOutput {
	return o
}

func (o TaskDefinitionDockerVolumeConfigurationOutput) ToTaskDefinitionDockerVolumeConfigurationPtrOutput() TaskDefinitionDockerVolumeConfigurationPtrOutput {
	return o.ToTaskDefinitionDockerVolumeConfigurationPtrOutputWithContext(context.Background())
}

func (o TaskDefinitionDockerVolumeConfigurationOutput) ToTaskDefinitionDockerVolumeConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionDockerVolumeConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskDefinitionDockerVolumeConfiguration) *TaskDefinitionDockerVolumeConfiguration {
		return &v
	}).(TaskDefinitionDockerVolumeConfigurationPtrOutput)
}

// If this value is “true“, the Docker volume is created if it doesn't already exist.
//
//	This field is only used if the ``scope`` is ``shared``.
func (o TaskDefinitionDockerVolumeConfigurationOutput) Autoprovision() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TaskDefinitionDockerVolumeConfiguration) *bool { return v.Autoprovision }).(pulumi.BoolPtrOutput)
}

// The Docker volume driver to use. The driver value must match the driver name provided by Docker because it is used for task placement. If the driver was installed using the Docker plugin CLI, use “docker plugin ls“ to retrieve the driver name from your container instance. If the driver was installed using another method, use Docker plugin discovery to retrieve the driver name. For more information, see [Docker plugin discovery](https://docs.aws.amazon.com/https://docs.docker.com/engine/extend/plugin_api/#plugin-discovery). This parameter maps to “Driver“ in the [Create a volume](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the “xxdriver“ option to [docker volume create](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/commandline/volume_create/).
func (o TaskDefinitionDockerVolumeConfigurationOutput) Driver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionDockerVolumeConfiguration) *string { return v.Driver }).(pulumi.StringPtrOutput)
}

// A map of Docker driver-specific options passed through. This parameter maps to “DriverOpts“ in the [Create a volume](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the “xxopt“ option to [docker volume create](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/commandline/volume_create/).
func (o TaskDefinitionDockerVolumeConfigurationOutput) DriverOpts() pulumi.StringMapOutput {
	return o.ApplyT(func(v TaskDefinitionDockerVolumeConfiguration) map[string]string { return v.DriverOpts }).(pulumi.StringMapOutput)
}

// Custom metadata to add to your Docker volume. This parameter maps to “Labels“ in the [Create a volume](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the “xxlabel“ option to [docker volume create](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/commandline/volume_create/).
func (o TaskDefinitionDockerVolumeConfigurationOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v TaskDefinitionDockerVolumeConfiguration) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The scope for the Docker volume that determines its lifecycle. Docker volumes that are scoped to a “task“ are automatically provisioned when the task starts and destroyed when the task stops. Docker volumes that are scoped as “shared“ persist after the task stops.
func (o TaskDefinitionDockerVolumeConfigurationOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionDockerVolumeConfiguration) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

type TaskDefinitionDockerVolumeConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TaskDefinitionDockerVolumeConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionDockerVolumeConfiguration)(nil)).Elem()
}

func (o TaskDefinitionDockerVolumeConfigurationPtrOutput) ToTaskDefinitionDockerVolumeConfigurationPtrOutput() TaskDefinitionDockerVolumeConfigurationPtrOutput {
	return o
}

func (o TaskDefinitionDockerVolumeConfigurationPtrOutput) ToTaskDefinitionDockerVolumeConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionDockerVolumeConfigurationPtrOutput {
	return o
}

func (o TaskDefinitionDockerVolumeConfigurationPtrOutput) Elem() TaskDefinitionDockerVolumeConfigurationOutput {
	return o.ApplyT(func(v *TaskDefinitionDockerVolumeConfiguration) TaskDefinitionDockerVolumeConfiguration {
		if v != nil {
			return *v
		}
		var ret TaskDefinitionDockerVolumeConfiguration
		return ret
	}).(TaskDefinitionDockerVolumeConfigurationOutput)
}

// If this value is “true“, the Docker volume is created if it doesn't already exist.
//
//	This field is only used if the ``scope`` is ``shared``.
func (o TaskDefinitionDockerVolumeConfigurationPtrOutput) Autoprovision() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionDockerVolumeConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.Autoprovision
	}).(pulumi.BoolPtrOutput)
}

// The Docker volume driver to use. The driver value must match the driver name provided by Docker because it is used for task placement. If the driver was installed using the Docker plugin CLI, use “docker plugin ls“ to retrieve the driver name from your container instance. If the driver was installed using another method, use Docker plugin discovery to retrieve the driver name. For more information, see [Docker plugin discovery](https://docs.aws.amazon.com/https://docs.docker.com/engine/extend/plugin_api/#plugin-discovery). This parameter maps to “Driver“ in the [Create a volume](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the “xxdriver“ option to [docker volume create](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/commandline/volume_create/).
func (o TaskDefinitionDockerVolumeConfigurationPtrOutput) Driver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionDockerVolumeConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Driver
	}).(pulumi.StringPtrOutput)
}

// A map of Docker driver-specific options passed through. This parameter maps to “DriverOpts“ in the [Create a volume](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the “xxopt“ option to [docker volume create](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/commandline/volume_create/).
func (o TaskDefinitionDockerVolumeConfigurationPtrOutput) DriverOpts() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TaskDefinitionDockerVolumeConfiguration) map[string]string {
		if v == nil {
			return nil
		}
		return v.DriverOpts
	}).(pulumi.StringMapOutput)
}

// Custom metadata to add to your Docker volume. This parameter maps to “Labels“ in the [Create a volume](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the “xxlabel“ option to [docker volume create](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/commandline/volume_create/).
func (o TaskDefinitionDockerVolumeConfigurationPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TaskDefinitionDockerVolumeConfiguration) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// The scope for the Docker volume that determines its lifecycle. Docker volumes that are scoped to a “task“ are automatically provisioned when the task starts and destroyed when the task stops. Docker volumes that are scoped as “shared“ persist after the task stops.
func (o TaskDefinitionDockerVolumeConfigurationPtrOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionDockerVolumeConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Scope
	}).(pulumi.StringPtrOutput)
}

// This parameter is specified when you're using an Amazon Elastic File System file system for task storage. For more information, see [Amazon EFS volumes](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/efs-volumes.html) in the *Amazon Elastic Container Service Developer Guide*.
type TaskDefinitionEfsVolumeConfiguration struct {
	// The authorization configuration details for the Amazon EFS file system.
	AuthorizationConfig *TaskDefinitionAuthorizationConfig `pulumi:"authorizationConfig"`
	// The Amazon EFS file system ID to use.
	FilesystemId string `pulumi:"filesystemId"`
	// The directory within the Amazon EFS file system to mount as the root directory inside the host. If this parameter is omitted, the root of the Amazon EFS volume will be used. Specifying ``/`` will have the same effect as omitting this parameter.
	//   If an EFS access point is specified in the ``authorizationConfig``, the root directory parameter must either be omitted or set to ``/`` which will enforce the path set on the EFS access point.
	RootDirectory *string `pulumi:"rootDirectory"`
	// Determines whether to use encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. Transit encryption must be turned on if Amazon EFS IAM authorization is used. If this parameter is omitted, the default value of ``DISABLED`` is used. For more information, see [Encrypting data in transit](https://docs.aws.amazon.com/efs/latest/ug/encryption-in-transit.html) in the *Amazon Elastic File System User Guide*.
	TransitEncryption *TaskDefinitionEfsVolumeConfigurationTransitEncryption `pulumi:"transitEncryption"`
	// The port to use when sending encrypted data between the Amazon ECS host and the Amazon EFS server. If you do not specify a transit encryption port, it will use the port selection strategy that the Amazon EFS mount helper uses. For more information, see [EFS mount helper](https://docs.aws.amazon.com/efs/latest/ug/efs-mount-helper.html) in the *Amazon Elastic File System User Guide*.
	TransitEncryptionPort *int `pulumi:"transitEncryptionPort"`
}

// TaskDefinitionEfsVolumeConfigurationInput is an input type that accepts TaskDefinitionEfsVolumeConfigurationArgs and TaskDefinitionEfsVolumeConfigurationOutput values.
// You can construct a concrete instance of `TaskDefinitionEfsVolumeConfigurationInput` via:
//
//	TaskDefinitionEfsVolumeConfigurationArgs{...}
type TaskDefinitionEfsVolumeConfigurationInput interface {
	pulumi.Input

	ToTaskDefinitionEfsVolumeConfigurationOutput() TaskDefinitionEfsVolumeConfigurationOutput
	ToTaskDefinitionEfsVolumeConfigurationOutputWithContext(context.Context) TaskDefinitionEfsVolumeConfigurationOutput
}

// This parameter is specified when you're using an Amazon Elastic File System file system for task storage. For more information, see [Amazon EFS volumes](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/efs-volumes.html) in the *Amazon Elastic Container Service Developer Guide*.
type TaskDefinitionEfsVolumeConfigurationArgs struct {
	// The authorization configuration details for the Amazon EFS file system.
	AuthorizationConfig TaskDefinitionAuthorizationConfigPtrInput `pulumi:"authorizationConfig"`
	// The Amazon EFS file system ID to use.
	FilesystemId pulumi.StringInput `pulumi:"filesystemId"`
	// The directory within the Amazon EFS file system to mount as the root directory inside the host. If this parameter is omitted, the root of the Amazon EFS volume will be used. Specifying ``/`` will have the same effect as omitting this parameter.
	//   If an EFS access point is specified in the ``authorizationConfig``, the root directory parameter must either be omitted or set to ``/`` which will enforce the path set on the EFS access point.
	RootDirectory pulumi.StringPtrInput `pulumi:"rootDirectory"`
	// Determines whether to use encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. Transit encryption must be turned on if Amazon EFS IAM authorization is used. If this parameter is omitted, the default value of ``DISABLED`` is used. For more information, see [Encrypting data in transit](https://docs.aws.amazon.com/efs/latest/ug/encryption-in-transit.html) in the *Amazon Elastic File System User Guide*.
	TransitEncryption TaskDefinitionEfsVolumeConfigurationTransitEncryptionPtrInput `pulumi:"transitEncryption"`
	// The port to use when sending encrypted data between the Amazon ECS host and the Amazon EFS server. If you do not specify a transit encryption port, it will use the port selection strategy that the Amazon EFS mount helper uses. For more information, see [EFS mount helper](https://docs.aws.amazon.com/efs/latest/ug/efs-mount-helper.html) in the *Amazon Elastic File System User Guide*.
	TransitEncryptionPort pulumi.IntPtrInput `pulumi:"transitEncryptionPort"`
}

func (TaskDefinitionEfsVolumeConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionEfsVolumeConfiguration)(nil)).Elem()
}

func (i TaskDefinitionEfsVolumeConfigurationArgs) ToTaskDefinitionEfsVolumeConfigurationOutput() TaskDefinitionEfsVolumeConfigurationOutput {
	return i.ToTaskDefinitionEfsVolumeConfigurationOutputWithContext(context.Background())
}

func (i TaskDefinitionEfsVolumeConfigurationArgs) ToTaskDefinitionEfsVolumeConfigurationOutputWithContext(ctx context.Context) TaskDefinitionEfsVolumeConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionEfsVolumeConfigurationOutput)
}

func (i TaskDefinitionEfsVolumeConfigurationArgs) ToTaskDefinitionEfsVolumeConfigurationPtrOutput() TaskDefinitionEfsVolumeConfigurationPtrOutput {
	return i.ToTaskDefinitionEfsVolumeConfigurationPtrOutputWithContext(context.Background())
}

func (i TaskDefinitionEfsVolumeConfigurationArgs) ToTaskDefinitionEfsVolumeConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionEfsVolumeConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionEfsVolumeConfigurationOutput).ToTaskDefinitionEfsVolumeConfigurationPtrOutputWithContext(ctx)
}

// TaskDefinitionEfsVolumeConfigurationPtrInput is an input type that accepts TaskDefinitionEfsVolumeConfigurationArgs, TaskDefinitionEfsVolumeConfigurationPtr and TaskDefinitionEfsVolumeConfigurationPtrOutput values.
// You can construct a concrete instance of `TaskDefinitionEfsVolumeConfigurationPtrInput` via:
//
//	        TaskDefinitionEfsVolumeConfigurationArgs{...}
//
//	or:
//
//	        nil
type TaskDefinitionEfsVolumeConfigurationPtrInput interface {
	pulumi.Input

	ToTaskDefinitionEfsVolumeConfigurationPtrOutput() TaskDefinitionEfsVolumeConfigurationPtrOutput
	ToTaskDefinitionEfsVolumeConfigurationPtrOutputWithContext(context.Context) TaskDefinitionEfsVolumeConfigurationPtrOutput
}

type taskDefinitionEfsVolumeConfigurationPtrType TaskDefinitionEfsVolumeConfigurationArgs

func TaskDefinitionEfsVolumeConfigurationPtr(v *TaskDefinitionEfsVolumeConfigurationArgs) TaskDefinitionEfsVolumeConfigurationPtrInput {
	return (*taskDefinitionEfsVolumeConfigurationPtrType)(v)
}

func (*taskDefinitionEfsVolumeConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionEfsVolumeConfiguration)(nil)).Elem()
}

func (i *taskDefinitionEfsVolumeConfigurationPtrType) ToTaskDefinitionEfsVolumeConfigurationPtrOutput() TaskDefinitionEfsVolumeConfigurationPtrOutput {
	return i.ToTaskDefinitionEfsVolumeConfigurationPtrOutputWithContext(context.Background())
}

func (i *taskDefinitionEfsVolumeConfigurationPtrType) ToTaskDefinitionEfsVolumeConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionEfsVolumeConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionEfsVolumeConfigurationPtrOutput)
}

// This parameter is specified when you're using an Amazon Elastic File System file system for task storage. For more information, see [Amazon EFS volumes](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/efs-volumes.html) in the *Amazon Elastic Container Service Developer Guide*.
type TaskDefinitionEfsVolumeConfigurationOutput struct{ *pulumi.OutputState }

func (TaskDefinitionEfsVolumeConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionEfsVolumeConfiguration)(nil)).Elem()
}

func (o TaskDefinitionEfsVolumeConfigurationOutput) ToTaskDefinitionEfsVolumeConfigurationOutput() TaskDefinitionEfsVolumeConfigurationOutput {
	return o
}

func (o TaskDefinitionEfsVolumeConfigurationOutput) ToTaskDefinitionEfsVolumeConfigurationOutputWithContext(ctx context.Context) TaskDefinitionEfsVolumeConfigurationOutput {
	return o
}

func (o TaskDefinitionEfsVolumeConfigurationOutput) ToTaskDefinitionEfsVolumeConfigurationPtrOutput() TaskDefinitionEfsVolumeConfigurationPtrOutput {
	return o.ToTaskDefinitionEfsVolumeConfigurationPtrOutputWithContext(context.Background())
}

func (o TaskDefinitionEfsVolumeConfigurationOutput) ToTaskDefinitionEfsVolumeConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionEfsVolumeConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskDefinitionEfsVolumeConfiguration) *TaskDefinitionEfsVolumeConfiguration {
		return &v
	}).(TaskDefinitionEfsVolumeConfigurationPtrOutput)
}

// The authorization configuration details for the Amazon EFS file system.
func (o TaskDefinitionEfsVolumeConfigurationOutput) AuthorizationConfig() TaskDefinitionAuthorizationConfigPtrOutput {
	return o.ApplyT(func(v TaskDefinitionEfsVolumeConfiguration) *TaskDefinitionAuthorizationConfig {
		return v.AuthorizationConfig
	}).(TaskDefinitionAuthorizationConfigPtrOutput)
}

// The Amazon EFS file system ID to use.
func (o TaskDefinitionEfsVolumeConfigurationOutput) FilesystemId() pulumi.StringOutput {
	return o.ApplyT(func(v TaskDefinitionEfsVolumeConfiguration) string { return v.FilesystemId }).(pulumi.StringOutput)
}

// The directory within the Amazon EFS file system to mount as the root directory inside the host. If this parameter is omitted, the root of the Amazon EFS volume will be used. Specifying “/“ will have the same effect as omitting this parameter.
//
//	If an EFS access point is specified in the ``authorizationConfig``, the root directory parameter must either be omitted or set to ``/`` which will enforce the path set on the EFS access point.
func (o TaskDefinitionEfsVolumeConfigurationOutput) RootDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionEfsVolumeConfiguration) *string { return v.RootDirectory }).(pulumi.StringPtrOutput)
}

// Determines whether to use encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. Transit encryption must be turned on if Amazon EFS IAM authorization is used. If this parameter is omitted, the default value of “DISABLED“ is used. For more information, see [Encrypting data in transit](https://docs.aws.amazon.com/efs/latest/ug/encryption-in-transit.html) in the *Amazon Elastic File System User Guide*.
func (o TaskDefinitionEfsVolumeConfigurationOutput) TransitEncryption() TaskDefinitionEfsVolumeConfigurationTransitEncryptionPtrOutput {
	return o.ApplyT(func(v TaskDefinitionEfsVolumeConfiguration) *TaskDefinitionEfsVolumeConfigurationTransitEncryption {
		return v.TransitEncryption
	}).(TaskDefinitionEfsVolumeConfigurationTransitEncryptionPtrOutput)
}

// The port to use when sending encrypted data between the Amazon ECS host and the Amazon EFS server. If you do not specify a transit encryption port, it will use the port selection strategy that the Amazon EFS mount helper uses. For more information, see [EFS mount helper](https://docs.aws.amazon.com/efs/latest/ug/efs-mount-helper.html) in the *Amazon Elastic File System User Guide*.
func (o TaskDefinitionEfsVolumeConfigurationOutput) TransitEncryptionPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskDefinitionEfsVolumeConfiguration) *int { return v.TransitEncryptionPort }).(pulumi.IntPtrOutput)
}

type TaskDefinitionEfsVolumeConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TaskDefinitionEfsVolumeConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionEfsVolumeConfiguration)(nil)).Elem()
}

func (o TaskDefinitionEfsVolumeConfigurationPtrOutput) ToTaskDefinitionEfsVolumeConfigurationPtrOutput() TaskDefinitionEfsVolumeConfigurationPtrOutput {
	return o
}

func (o TaskDefinitionEfsVolumeConfigurationPtrOutput) ToTaskDefinitionEfsVolumeConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionEfsVolumeConfigurationPtrOutput {
	return o
}

func (o TaskDefinitionEfsVolumeConfigurationPtrOutput) Elem() TaskDefinitionEfsVolumeConfigurationOutput {
	return o.ApplyT(func(v *TaskDefinitionEfsVolumeConfiguration) TaskDefinitionEfsVolumeConfiguration {
		if v != nil {
			return *v
		}
		var ret TaskDefinitionEfsVolumeConfiguration
		return ret
	}).(TaskDefinitionEfsVolumeConfigurationOutput)
}

// The authorization configuration details for the Amazon EFS file system.
func (o TaskDefinitionEfsVolumeConfigurationPtrOutput) AuthorizationConfig() TaskDefinitionAuthorizationConfigPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionEfsVolumeConfiguration) *TaskDefinitionAuthorizationConfig {
		if v == nil {
			return nil
		}
		return v.AuthorizationConfig
	}).(TaskDefinitionAuthorizationConfigPtrOutput)
}

// The Amazon EFS file system ID to use.
func (o TaskDefinitionEfsVolumeConfigurationPtrOutput) FilesystemId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionEfsVolumeConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.FilesystemId
	}).(pulumi.StringPtrOutput)
}

// The directory within the Amazon EFS file system to mount as the root directory inside the host. If this parameter is omitted, the root of the Amazon EFS volume will be used. Specifying “/“ will have the same effect as omitting this parameter.
//
//	If an EFS access point is specified in the ``authorizationConfig``, the root directory parameter must either be omitted or set to ``/`` which will enforce the path set on the EFS access point.
func (o TaskDefinitionEfsVolumeConfigurationPtrOutput) RootDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionEfsVolumeConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.RootDirectory
	}).(pulumi.StringPtrOutput)
}

// Determines whether to use encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. Transit encryption must be turned on if Amazon EFS IAM authorization is used. If this parameter is omitted, the default value of “DISABLED“ is used. For more information, see [Encrypting data in transit](https://docs.aws.amazon.com/efs/latest/ug/encryption-in-transit.html) in the *Amazon Elastic File System User Guide*.
func (o TaskDefinitionEfsVolumeConfigurationPtrOutput) TransitEncryption() TaskDefinitionEfsVolumeConfigurationTransitEncryptionPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionEfsVolumeConfiguration) *TaskDefinitionEfsVolumeConfigurationTransitEncryption {
		if v == nil {
			return nil
		}
		return v.TransitEncryption
	}).(TaskDefinitionEfsVolumeConfigurationTransitEncryptionPtrOutput)
}

// The port to use when sending encrypted data between the Amazon ECS host and the Amazon EFS server. If you do not specify a transit encryption port, it will use the port selection strategy that the Amazon EFS mount helper uses. For more information, see [EFS mount helper](https://docs.aws.amazon.com/efs/latest/ug/efs-mount-helper.html) in the *Amazon Elastic File System User Guide*.
func (o TaskDefinitionEfsVolumeConfigurationPtrOutput) TransitEncryptionPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionEfsVolumeConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.TransitEncryptionPort
	}).(pulumi.IntPtrOutput)
}

// A list of files containing the environment variables to pass to a container. You can specify up to ten environment files. The file must have a “.env“ file extension. Each line in an environment file should contain an environment variable in “VARIABLE=VALUE“ format. Lines beginning with “#“ are treated as comments and are ignored.
//
//	If there are environment variables specified using the ``environment`` parameter in a container definition, they take precedence over the variables contained within an environment file. If multiple environment files are specified that contain the same variable, they're processed from the top down. We recommend that you use unique variable names. For more information, see [Specifying environment variables](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/taskdef-envfiles.html) in the *Amazon Elastic Container Service Developer Guide*.
//	You must use the following platforms for the Fargate launch type:
//	 +  Linux platform version ``1.4.0`` or la
type TaskDefinitionEnvironmentFile struct {
	// The file type to use. The only supported value is ``s3``.
	Type *string `pulumi:"type"`
	// The Amazon Resource Name (ARN) of the Amazon S3 object containing the environment variable file.
	Value *string `pulumi:"value"`
}

// TaskDefinitionEnvironmentFileInput is an input type that accepts TaskDefinitionEnvironmentFileArgs and TaskDefinitionEnvironmentFileOutput values.
// You can construct a concrete instance of `TaskDefinitionEnvironmentFileInput` via:
//
//	TaskDefinitionEnvironmentFileArgs{...}
type TaskDefinitionEnvironmentFileInput interface {
	pulumi.Input

	ToTaskDefinitionEnvironmentFileOutput() TaskDefinitionEnvironmentFileOutput
	ToTaskDefinitionEnvironmentFileOutputWithContext(context.Context) TaskDefinitionEnvironmentFileOutput
}

// A list of files containing the environment variables to pass to a container. You can specify up to ten environment files. The file must have a “.env“ file extension. Each line in an environment file should contain an environment variable in “VARIABLE=VALUE“ format. Lines beginning with “#“ are treated as comments and are ignored.
//
//	If there are environment variables specified using the ``environment`` parameter in a container definition, they take precedence over the variables contained within an environment file. If multiple environment files are specified that contain the same variable, they're processed from the top down. We recommend that you use unique variable names. For more information, see [Specifying environment variables](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/taskdef-envfiles.html) in the *Amazon Elastic Container Service Developer Guide*.
//	You must use the following platforms for the Fargate launch type:
//	 +  Linux platform version ``1.4.0`` or la
type TaskDefinitionEnvironmentFileArgs struct {
	// The file type to use. The only supported value is ``s3``.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// The Amazon Resource Name (ARN) of the Amazon S3 object containing the environment variable file.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (TaskDefinitionEnvironmentFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionEnvironmentFile)(nil)).Elem()
}

func (i TaskDefinitionEnvironmentFileArgs) ToTaskDefinitionEnvironmentFileOutput() TaskDefinitionEnvironmentFileOutput {
	return i.ToTaskDefinitionEnvironmentFileOutputWithContext(context.Background())
}

func (i TaskDefinitionEnvironmentFileArgs) ToTaskDefinitionEnvironmentFileOutputWithContext(ctx context.Context) TaskDefinitionEnvironmentFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionEnvironmentFileOutput)
}

// TaskDefinitionEnvironmentFileArrayInput is an input type that accepts TaskDefinitionEnvironmentFileArray and TaskDefinitionEnvironmentFileArrayOutput values.
// You can construct a concrete instance of `TaskDefinitionEnvironmentFileArrayInput` via:
//
//	TaskDefinitionEnvironmentFileArray{ TaskDefinitionEnvironmentFileArgs{...} }
type TaskDefinitionEnvironmentFileArrayInput interface {
	pulumi.Input

	ToTaskDefinitionEnvironmentFileArrayOutput() TaskDefinitionEnvironmentFileArrayOutput
	ToTaskDefinitionEnvironmentFileArrayOutputWithContext(context.Context) TaskDefinitionEnvironmentFileArrayOutput
}

type TaskDefinitionEnvironmentFileArray []TaskDefinitionEnvironmentFileInput

func (TaskDefinitionEnvironmentFileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionEnvironmentFile)(nil)).Elem()
}

func (i TaskDefinitionEnvironmentFileArray) ToTaskDefinitionEnvironmentFileArrayOutput() TaskDefinitionEnvironmentFileArrayOutput {
	return i.ToTaskDefinitionEnvironmentFileArrayOutputWithContext(context.Background())
}

func (i TaskDefinitionEnvironmentFileArray) ToTaskDefinitionEnvironmentFileArrayOutputWithContext(ctx context.Context) TaskDefinitionEnvironmentFileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionEnvironmentFileArrayOutput)
}

// A list of files containing the environment variables to pass to a container. You can specify up to ten environment files. The file must have a “.env“ file extension. Each line in an environment file should contain an environment variable in “VARIABLE=VALUE“ format. Lines beginning with “#“ are treated as comments and are ignored.
//
//	If there are environment variables specified using the ``environment`` parameter in a container definition, they take precedence over the variables contained within an environment file. If multiple environment files are specified that contain the same variable, they're processed from the top down. We recommend that you use unique variable names. For more information, see [Specifying environment variables](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/taskdef-envfiles.html) in the *Amazon Elastic Container Service Developer Guide*.
//	You must use the following platforms for the Fargate launch type:
//	 +  Linux platform version ``1.4.0`` or la
type TaskDefinitionEnvironmentFileOutput struct{ *pulumi.OutputState }

func (TaskDefinitionEnvironmentFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionEnvironmentFile)(nil)).Elem()
}

func (o TaskDefinitionEnvironmentFileOutput) ToTaskDefinitionEnvironmentFileOutput() TaskDefinitionEnvironmentFileOutput {
	return o
}

func (o TaskDefinitionEnvironmentFileOutput) ToTaskDefinitionEnvironmentFileOutputWithContext(ctx context.Context) TaskDefinitionEnvironmentFileOutput {
	return o
}

// The file type to use. The only supported value is “s3“.
func (o TaskDefinitionEnvironmentFileOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionEnvironmentFile) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of the Amazon S3 object containing the environment variable file.
func (o TaskDefinitionEnvironmentFileOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionEnvironmentFile) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type TaskDefinitionEnvironmentFileArrayOutput struct{ *pulumi.OutputState }

func (TaskDefinitionEnvironmentFileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionEnvironmentFile)(nil)).Elem()
}

func (o TaskDefinitionEnvironmentFileArrayOutput) ToTaskDefinitionEnvironmentFileArrayOutput() TaskDefinitionEnvironmentFileArrayOutput {
	return o
}

func (o TaskDefinitionEnvironmentFileArrayOutput) ToTaskDefinitionEnvironmentFileArrayOutputWithContext(ctx context.Context) TaskDefinitionEnvironmentFileArrayOutput {
	return o
}

func (o TaskDefinitionEnvironmentFileArrayOutput) Index(i pulumi.IntInput) TaskDefinitionEnvironmentFileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskDefinitionEnvironmentFile {
		return vs[0].([]TaskDefinitionEnvironmentFile)[vs[1].(int)]
	}).(TaskDefinitionEnvironmentFileOutput)
}

// The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on FARGATElong. For more information, see [Using data volumes in tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_data_volumes.html) in the *Amazon ECS Developer Guide;*.
//
//	For tasks using the Fargate launch type, the task requires the following platforms:
//	+  Linux platform version ``1.4.0`` or later.
//	+  Windows platform version ``1.0.0`` or later.
type TaskDefinitionEphemeralStorage struct {
	// The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported value is ``21`` GiB and the maximum supported value is ``200`` GiB.
	SizeInGiB *int `pulumi:"sizeInGiB"`
}

// TaskDefinitionEphemeralStorageInput is an input type that accepts TaskDefinitionEphemeralStorageArgs and TaskDefinitionEphemeralStorageOutput values.
// You can construct a concrete instance of `TaskDefinitionEphemeralStorageInput` via:
//
//	TaskDefinitionEphemeralStorageArgs{...}
type TaskDefinitionEphemeralStorageInput interface {
	pulumi.Input

	ToTaskDefinitionEphemeralStorageOutput() TaskDefinitionEphemeralStorageOutput
	ToTaskDefinitionEphemeralStorageOutputWithContext(context.Context) TaskDefinitionEphemeralStorageOutput
}

// The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on FARGATElong. For more information, see [Using data volumes in tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_data_volumes.html) in the *Amazon ECS Developer Guide;*.
//
//	For tasks using the Fargate launch type, the task requires the following platforms:
//	+  Linux platform version ``1.4.0`` or later.
//	+  Windows platform version ``1.0.0`` or later.
type TaskDefinitionEphemeralStorageArgs struct {
	// The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported value is ``21`` GiB and the maximum supported value is ``200`` GiB.
	SizeInGiB pulumi.IntPtrInput `pulumi:"sizeInGiB"`
}

func (TaskDefinitionEphemeralStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionEphemeralStorage)(nil)).Elem()
}

func (i TaskDefinitionEphemeralStorageArgs) ToTaskDefinitionEphemeralStorageOutput() TaskDefinitionEphemeralStorageOutput {
	return i.ToTaskDefinitionEphemeralStorageOutputWithContext(context.Background())
}

func (i TaskDefinitionEphemeralStorageArgs) ToTaskDefinitionEphemeralStorageOutputWithContext(ctx context.Context) TaskDefinitionEphemeralStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionEphemeralStorageOutput)
}

func (i TaskDefinitionEphemeralStorageArgs) ToTaskDefinitionEphemeralStoragePtrOutput() TaskDefinitionEphemeralStoragePtrOutput {
	return i.ToTaskDefinitionEphemeralStoragePtrOutputWithContext(context.Background())
}

func (i TaskDefinitionEphemeralStorageArgs) ToTaskDefinitionEphemeralStoragePtrOutputWithContext(ctx context.Context) TaskDefinitionEphemeralStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionEphemeralStorageOutput).ToTaskDefinitionEphemeralStoragePtrOutputWithContext(ctx)
}

// TaskDefinitionEphemeralStoragePtrInput is an input type that accepts TaskDefinitionEphemeralStorageArgs, TaskDefinitionEphemeralStoragePtr and TaskDefinitionEphemeralStoragePtrOutput values.
// You can construct a concrete instance of `TaskDefinitionEphemeralStoragePtrInput` via:
//
//	        TaskDefinitionEphemeralStorageArgs{...}
//
//	or:
//
//	        nil
type TaskDefinitionEphemeralStoragePtrInput interface {
	pulumi.Input

	ToTaskDefinitionEphemeralStoragePtrOutput() TaskDefinitionEphemeralStoragePtrOutput
	ToTaskDefinitionEphemeralStoragePtrOutputWithContext(context.Context) TaskDefinitionEphemeralStoragePtrOutput
}

type taskDefinitionEphemeralStoragePtrType TaskDefinitionEphemeralStorageArgs

func TaskDefinitionEphemeralStoragePtr(v *TaskDefinitionEphemeralStorageArgs) TaskDefinitionEphemeralStoragePtrInput {
	return (*taskDefinitionEphemeralStoragePtrType)(v)
}

func (*taskDefinitionEphemeralStoragePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionEphemeralStorage)(nil)).Elem()
}

func (i *taskDefinitionEphemeralStoragePtrType) ToTaskDefinitionEphemeralStoragePtrOutput() TaskDefinitionEphemeralStoragePtrOutput {
	return i.ToTaskDefinitionEphemeralStoragePtrOutputWithContext(context.Background())
}

func (i *taskDefinitionEphemeralStoragePtrType) ToTaskDefinitionEphemeralStoragePtrOutputWithContext(ctx context.Context) TaskDefinitionEphemeralStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionEphemeralStoragePtrOutput)
}

// The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on FARGATElong. For more information, see [Using data volumes in tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_data_volumes.html) in the *Amazon ECS Developer Guide;*.
//
//	For tasks using the Fargate launch type, the task requires the following platforms:
//	+  Linux platform version ``1.4.0`` or later.
//	+  Windows platform version ``1.0.0`` or later.
type TaskDefinitionEphemeralStorageOutput struct{ *pulumi.OutputState }

func (TaskDefinitionEphemeralStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionEphemeralStorage)(nil)).Elem()
}

func (o TaskDefinitionEphemeralStorageOutput) ToTaskDefinitionEphemeralStorageOutput() TaskDefinitionEphemeralStorageOutput {
	return o
}

func (o TaskDefinitionEphemeralStorageOutput) ToTaskDefinitionEphemeralStorageOutputWithContext(ctx context.Context) TaskDefinitionEphemeralStorageOutput {
	return o
}

func (o TaskDefinitionEphemeralStorageOutput) ToTaskDefinitionEphemeralStoragePtrOutput() TaskDefinitionEphemeralStoragePtrOutput {
	return o.ToTaskDefinitionEphemeralStoragePtrOutputWithContext(context.Background())
}

func (o TaskDefinitionEphemeralStorageOutput) ToTaskDefinitionEphemeralStoragePtrOutputWithContext(ctx context.Context) TaskDefinitionEphemeralStoragePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskDefinitionEphemeralStorage) *TaskDefinitionEphemeralStorage {
		return &v
	}).(TaskDefinitionEphemeralStoragePtrOutput)
}

// The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported value is “21“ GiB and the maximum supported value is “200“ GiB.
func (o TaskDefinitionEphemeralStorageOutput) SizeInGiB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskDefinitionEphemeralStorage) *int { return v.SizeInGiB }).(pulumi.IntPtrOutput)
}

type TaskDefinitionEphemeralStoragePtrOutput struct{ *pulumi.OutputState }

func (TaskDefinitionEphemeralStoragePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionEphemeralStorage)(nil)).Elem()
}

func (o TaskDefinitionEphemeralStoragePtrOutput) ToTaskDefinitionEphemeralStoragePtrOutput() TaskDefinitionEphemeralStoragePtrOutput {
	return o
}

func (o TaskDefinitionEphemeralStoragePtrOutput) ToTaskDefinitionEphemeralStoragePtrOutputWithContext(ctx context.Context) TaskDefinitionEphemeralStoragePtrOutput {
	return o
}

func (o TaskDefinitionEphemeralStoragePtrOutput) Elem() TaskDefinitionEphemeralStorageOutput {
	return o.ApplyT(func(v *TaskDefinitionEphemeralStorage) TaskDefinitionEphemeralStorage {
		if v != nil {
			return *v
		}
		var ret TaskDefinitionEphemeralStorage
		return ret
	}).(TaskDefinitionEphemeralStorageOutput)
}

// The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported value is “21“ GiB and the maximum supported value is “200“ GiB.
func (o TaskDefinitionEphemeralStoragePtrOutput) SizeInGiB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionEphemeralStorage) *int {
		if v == nil {
			return nil
		}
		return v.SizeInGiB
	}).(pulumi.IntPtrOutput)
}

// The FireLens configuration for the container. This is used to specify and configure a log router for container logs. For more information, see [Custom log routing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html) in the *Amazon Elastic Container Service Developer Guide*.
type TaskDefinitionFirelensConfiguration struct {
	// The options to use when configuring the log router. This field is optional and can be used to add additional metadata, such as the task, task definition, cluster, and container instance details to the log event.
	//   If specified, valid option keys are:
	//   +  ``enable-ecs-log-metadata``, which can be ``true`` or ``false``
	//   +  ``config-file-type``, which can be ``s3`` or ``file``
	//   +  ``config-file-value``, which is either an S3 ARN or a file path
	Options map[string]string `pulumi:"options"`
	// The log router to use. The valid values are ``fluentd`` or ``fluentbit``.
	Type *string `pulumi:"type"`
}

// TaskDefinitionFirelensConfigurationInput is an input type that accepts TaskDefinitionFirelensConfigurationArgs and TaskDefinitionFirelensConfigurationOutput values.
// You can construct a concrete instance of `TaskDefinitionFirelensConfigurationInput` via:
//
//	TaskDefinitionFirelensConfigurationArgs{...}
type TaskDefinitionFirelensConfigurationInput interface {
	pulumi.Input

	ToTaskDefinitionFirelensConfigurationOutput() TaskDefinitionFirelensConfigurationOutput
	ToTaskDefinitionFirelensConfigurationOutputWithContext(context.Context) TaskDefinitionFirelensConfigurationOutput
}

// The FireLens configuration for the container. This is used to specify and configure a log router for container logs. For more information, see [Custom log routing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html) in the *Amazon Elastic Container Service Developer Guide*.
type TaskDefinitionFirelensConfigurationArgs struct {
	// The options to use when configuring the log router. This field is optional and can be used to add additional metadata, such as the task, task definition, cluster, and container instance details to the log event.
	//   If specified, valid option keys are:
	//   +  ``enable-ecs-log-metadata``, which can be ``true`` or ``false``
	//   +  ``config-file-type``, which can be ``s3`` or ``file``
	//   +  ``config-file-value``, which is either an S3 ARN or a file path
	Options pulumi.StringMapInput `pulumi:"options"`
	// The log router to use. The valid values are ``fluentd`` or ``fluentbit``.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (TaskDefinitionFirelensConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionFirelensConfiguration)(nil)).Elem()
}

func (i TaskDefinitionFirelensConfigurationArgs) ToTaskDefinitionFirelensConfigurationOutput() TaskDefinitionFirelensConfigurationOutput {
	return i.ToTaskDefinitionFirelensConfigurationOutputWithContext(context.Background())
}

func (i TaskDefinitionFirelensConfigurationArgs) ToTaskDefinitionFirelensConfigurationOutputWithContext(ctx context.Context) TaskDefinitionFirelensConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionFirelensConfigurationOutput)
}

func (i TaskDefinitionFirelensConfigurationArgs) ToTaskDefinitionFirelensConfigurationPtrOutput() TaskDefinitionFirelensConfigurationPtrOutput {
	return i.ToTaskDefinitionFirelensConfigurationPtrOutputWithContext(context.Background())
}

func (i TaskDefinitionFirelensConfigurationArgs) ToTaskDefinitionFirelensConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionFirelensConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionFirelensConfigurationOutput).ToTaskDefinitionFirelensConfigurationPtrOutputWithContext(ctx)
}

// TaskDefinitionFirelensConfigurationPtrInput is an input type that accepts TaskDefinitionFirelensConfigurationArgs, TaskDefinitionFirelensConfigurationPtr and TaskDefinitionFirelensConfigurationPtrOutput values.
// You can construct a concrete instance of `TaskDefinitionFirelensConfigurationPtrInput` via:
//
//	        TaskDefinitionFirelensConfigurationArgs{...}
//
//	or:
//
//	        nil
type TaskDefinitionFirelensConfigurationPtrInput interface {
	pulumi.Input

	ToTaskDefinitionFirelensConfigurationPtrOutput() TaskDefinitionFirelensConfigurationPtrOutput
	ToTaskDefinitionFirelensConfigurationPtrOutputWithContext(context.Context) TaskDefinitionFirelensConfigurationPtrOutput
}

type taskDefinitionFirelensConfigurationPtrType TaskDefinitionFirelensConfigurationArgs

func TaskDefinitionFirelensConfigurationPtr(v *TaskDefinitionFirelensConfigurationArgs) TaskDefinitionFirelensConfigurationPtrInput {
	return (*taskDefinitionFirelensConfigurationPtrType)(v)
}

func (*taskDefinitionFirelensConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionFirelensConfiguration)(nil)).Elem()
}

func (i *taskDefinitionFirelensConfigurationPtrType) ToTaskDefinitionFirelensConfigurationPtrOutput() TaskDefinitionFirelensConfigurationPtrOutput {
	return i.ToTaskDefinitionFirelensConfigurationPtrOutputWithContext(context.Background())
}

func (i *taskDefinitionFirelensConfigurationPtrType) ToTaskDefinitionFirelensConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionFirelensConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionFirelensConfigurationPtrOutput)
}

// The FireLens configuration for the container. This is used to specify and configure a log router for container logs. For more information, see [Custom log routing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html) in the *Amazon Elastic Container Service Developer Guide*.
type TaskDefinitionFirelensConfigurationOutput struct{ *pulumi.OutputState }

func (TaskDefinitionFirelensConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionFirelensConfiguration)(nil)).Elem()
}

func (o TaskDefinitionFirelensConfigurationOutput) ToTaskDefinitionFirelensConfigurationOutput() TaskDefinitionFirelensConfigurationOutput {
	return o
}

func (o TaskDefinitionFirelensConfigurationOutput) ToTaskDefinitionFirelensConfigurationOutputWithContext(ctx context.Context) TaskDefinitionFirelensConfigurationOutput {
	return o
}

func (o TaskDefinitionFirelensConfigurationOutput) ToTaskDefinitionFirelensConfigurationPtrOutput() TaskDefinitionFirelensConfigurationPtrOutput {
	return o.ToTaskDefinitionFirelensConfigurationPtrOutputWithContext(context.Background())
}

func (o TaskDefinitionFirelensConfigurationOutput) ToTaskDefinitionFirelensConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionFirelensConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskDefinitionFirelensConfiguration) *TaskDefinitionFirelensConfiguration {
		return &v
	}).(TaskDefinitionFirelensConfigurationPtrOutput)
}

// The options to use when configuring the log router. This field is optional and can be used to add additional metadata, such as the task, task definition, cluster, and container instance details to the log event.
//
//	If specified, valid option keys are:
//	+  ``enable-ecs-log-metadata``, which can be ``true`` or ``false``
//	+  ``config-file-type``, which can be ``s3`` or ``file``
//	+  ``config-file-value``, which is either an S3 ARN or a file path
func (o TaskDefinitionFirelensConfigurationOutput) Options() pulumi.StringMapOutput {
	return o.ApplyT(func(v TaskDefinitionFirelensConfiguration) map[string]string { return v.Options }).(pulumi.StringMapOutput)
}

// The log router to use. The valid values are “fluentd“ or “fluentbit“.
func (o TaskDefinitionFirelensConfigurationOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionFirelensConfiguration) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type TaskDefinitionFirelensConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TaskDefinitionFirelensConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionFirelensConfiguration)(nil)).Elem()
}

func (o TaskDefinitionFirelensConfigurationPtrOutput) ToTaskDefinitionFirelensConfigurationPtrOutput() TaskDefinitionFirelensConfigurationPtrOutput {
	return o
}

func (o TaskDefinitionFirelensConfigurationPtrOutput) ToTaskDefinitionFirelensConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionFirelensConfigurationPtrOutput {
	return o
}

func (o TaskDefinitionFirelensConfigurationPtrOutput) Elem() TaskDefinitionFirelensConfigurationOutput {
	return o.ApplyT(func(v *TaskDefinitionFirelensConfiguration) TaskDefinitionFirelensConfiguration {
		if v != nil {
			return *v
		}
		var ret TaskDefinitionFirelensConfiguration
		return ret
	}).(TaskDefinitionFirelensConfigurationOutput)
}

// The options to use when configuring the log router. This field is optional and can be used to add additional metadata, such as the task, task definition, cluster, and container instance details to the log event.
//
//	If specified, valid option keys are:
//	+  ``enable-ecs-log-metadata``, which can be ``true`` or ``false``
//	+  ``config-file-type``, which can be ``s3`` or ``file``
//	+  ``config-file-value``, which is either an S3 ARN or a file path
func (o TaskDefinitionFirelensConfigurationPtrOutput) Options() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TaskDefinitionFirelensConfiguration) map[string]string {
		if v == nil {
			return nil
		}
		return v.Options
	}).(pulumi.StringMapOutput)
}

// The log router to use. The valid values are “fluentd“ or “fluentbit“.
func (o TaskDefinitionFirelensConfigurationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionFirelensConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The “HealthCheck“ property specifies an object representing a container health check. Health check parameters that are specified in a container definition override any Docker health checks that exist in the container image (such as those specified in a parent image or from the image's Dockerfile). This configuration maps to the “HEALTHCHECK“ parameter of [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/).
//
//	The Amazon ECS container agent only monitors and reports on the health checks specified in the task definition. Amazon ECS does not monitor Docker health checks that are embedded in a container image and not specified in the container definition. Health check parameters that are specified in a container definition override any Docker health checks that exist in the container image.
//	If a task is run manually, and not as part of a service, the task will continue its lifecycle regardless of its health status. For tasks that are part of a servi
type TaskDefinitionHealthCheck struct {
	// A string array representing the command that the container runs to determine if it is healthy. The string array must start with ``CMD`` to run the command arguments directly, or ``CMD-SHELL`` to run the command with the container's default shell.
	//   When you use the AWS Management Console JSON panel, the CLIlong, or the APIs, enclose the list of commands in double quotes and brackets.
	//   ``[ "CMD-SHELL", "curl -f http://localhost/ || exit 1" ]``
	//  You don't include the double quotes and brackets when you use the AWS Management Console.
	//   ``CMD-SHELL, curl -f http://localhost/ || exit 1``
	//  An exit code of 0 indicates success, and non-zero exit code indicates failure. For more information, see ``HealthCheck`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/).
	Command []string `pulumi:"command"`
	// The time period in seconds between each health check execution. You may specify between 5 and 300 seconds. The default value is 30 seconds.
	Interval *int `pulumi:"interval"`
	// The number of times to retry a failed health check before the container is considered unhealthy. You may specify between 1 and 10 retries. The default value is 3.
	Retries *int `pulumi:"retries"`
	// The optional grace period to provide containers time to bootstrap before failed health checks count towards the maximum number of retries. You can specify between 0 and 300 seconds. By default, the ``startPeriod`` is off.
	//   If a health check succeeds within the ``startPeriod``, then the container is considered healthy and any subsequent failures count toward the maximum number of retries.
	StartPeriod *int `pulumi:"startPeriod"`
	// The time period in seconds to wait for a health check to succeed before it is considered a failure. You may specify between 2 and 60 seconds. The default value is 5.
	Timeout *int `pulumi:"timeout"`
}

// TaskDefinitionHealthCheckInput is an input type that accepts TaskDefinitionHealthCheckArgs and TaskDefinitionHealthCheckOutput values.
// You can construct a concrete instance of `TaskDefinitionHealthCheckInput` via:
//
//	TaskDefinitionHealthCheckArgs{...}
type TaskDefinitionHealthCheckInput interface {
	pulumi.Input

	ToTaskDefinitionHealthCheckOutput() TaskDefinitionHealthCheckOutput
	ToTaskDefinitionHealthCheckOutputWithContext(context.Context) TaskDefinitionHealthCheckOutput
}

// The “HealthCheck“ property specifies an object representing a container health check. Health check parameters that are specified in a container definition override any Docker health checks that exist in the container image (such as those specified in a parent image or from the image's Dockerfile). This configuration maps to the “HEALTHCHECK“ parameter of [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/).
//
//	The Amazon ECS container agent only monitors and reports on the health checks specified in the task definition. Amazon ECS does not monitor Docker health checks that are embedded in a container image and not specified in the container definition. Health check parameters that are specified in a container definition override any Docker health checks that exist in the container image.
//	If a task is run manually, and not as part of a service, the task will continue its lifecycle regardless of its health status. For tasks that are part of a servi
type TaskDefinitionHealthCheckArgs struct {
	// A string array representing the command that the container runs to determine if it is healthy. The string array must start with ``CMD`` to run the command arguments directly, or ``CMD-SHELL`` to run the command with the container's default shell.
	//   When you use the AWS Management Console JSON panel, the CLIlong, or the APIs, enclose the list of commands in double quotes and brackets.
	//   ``[ "CMD-SHELL", "curl -f http://localhost/ || exit 1" ]``
	//  You don't include the double quotes and brackets when you use the AWS Management Console.
	//   ``CMD-SHELL, curl -f http://localhost/ || exit 1``
	//  An exit code of 0 indicates success, and non-zero exit code indicates failure. For more information, see ``HealthCheck`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/).
	Command pulumi.StringArrayInput `pulumi:"command"`
	// The time period in seconds between each health check execution. You may specify between 5 and 300 seconds. The default value is 30 seconds.
	Interval pulumi.IntPtrInput `pulumi:"interval"`
	// The number of times to retry a failed health check before the container is considered unhealthy. You may specify between 1 and 10 retries. The default value is 3.
	Retries pulumi.IntPtrInput `pulumi:"retries"`
	// The optional grace period to provide containers time to bootstrap before failed health checks count towards the maximum number of retries. You can specify between 0 and 300 seconds. By default, the ``startPeriod`` is off.
	//   If a health check succeeds within the ``startPeriod``, then the container is considered healthy and any subsequent failures count toward the maximum number of retries.
	StartPeriod pulumi.IntPtrInput `pulumi:"startPeriod"`
	// The time period in seconds to wait for a health check to succeed before it is considered a failure. You may specify between 2 and 60 seconds. The default value is 5.
	Timeout pulumi.IntPtrInput `pulumi:"timeout"`
}

func (TaskDefinitionHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionHealthCheck)(nil)).Elem()
}

func (i TaskDefinitionHealthCheckArgs) ToTaskDefinitionHealthCheckOutput() TaskDefinitionHealthCheckOutput {
	return i.ToTaskDefinitionHealthCheckOutputWithContext(context.Background())
}

func (i TaskDefinitionHealthCheckArgs) ToTaskDefinitionHealthCheckOutputWithContext(ctx context.Context) TaskDefinitionHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionHealthCheckOutput)
}

func (i TaskDefinitionHealthCheckArgs) ToTaskDefinitionHealthCheckPtrOutput() TaskDefinitionHealthCheckPtrOutput {
	return i.ToTaskDefinitionHealthCheckPtrOutputWithContext(context.Background())
}

func (i TaskDefinitionHealthCheckArgs) ToTaskDefinitionHealthCheckPtrOutputWithContext(ctx context.Context) TaskDefinitionHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionHealthCheckOutput).ToTaskDefinitionHealthCheckPtrOutputWithContext(ctx)
}

// TaskDefinitionHealthCheckPtrInput is an input type that accepts TaskDefinitionHealthCheckArgs, TaskDefinitionHealthCheckPtr and TaskDefinitionHealthCheckPtrOutput values.
// You can construct a concrete instance of `TaskDefinitionHealthCheckPtrInput` via:
//
//	        TaskDefinitionHealthCheckArgs{...}
//
//	or:
//
//	        nil
type TaskDefinitionHealthCheckPtrInput interface {
	pulumi.Input

	ToTaskDefinitionHealthCheckPtrOutput() TaskDefinitionHealthCheckPtrOutput
	ToTaskDefinitionHealthCheckPtrOutputWithContext(context.Context) TaskDefinitionHealthCheckPtrOutput
}

type taskDefinitionHealthCheckPtrType TaskDefinitionHealthCheckArgs

func TaskDefinitionHealthCheckPtr(v *TaskDefinitionHealthCheckArgs) TaskDefinitionHealthCheckPtrInput {
	return (*taskDefinitionHealthCheckPtrType)(v)
}

func (*taskDefinitionHealthCheckPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionHealthCheck)(nil)).Elem()
}

func (i *taskDefinitionHealthCheckPtrType) ToTaskDefinitionHealthCheckPtrOutput() TaskDefinitionHealthCheckPtrOutput {
	return i.ToTaskDefinitionHealthCheckPtrOutputWithContext(context.Background())
}

func (i *taskDefinitionHealthCheckPtrType) ToTaskDefinitionHealthCheckPtrOutputWithContext(ctx context.Context) TaskDefinitionHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionHealthCheckPtrOutput)
}

// The “HealthCheck“ property specifies an object representing a container health check. Health check parameters that are specified in a container definition override any Docker health checks that exist in the container image (such as those specified in a parent image or from the image's Dockerfile). This configuration maps to the “HEALTHCHECK“ parameter of [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/).
//
//	The Amazon ECS container agent only monitors and reports on the health checks specified in the task definition. Amazon ECS does not monitor Docker health checks that are embedded in a container image and not specified in the container definition. Health check parameters that are specified in a container definition override any Docker health checks that exist in the container image.
//	If a task is run manually, and not as part of a service, the task will continue its lifecycle regardless of its health status. For tasks that are part of a servi
type TaskDefinitionHealthCheckOutput struct{ *pulumi.OutputState }

func (TaskDefinitionHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionHealthCheck)(nil)).Elem()
}

func (o TaskDefinitionHealthCheckOutput) ToTaskDefinitionHealthCheckOutput() TaskDefinitionHealthCheckOutput {
	return o
}

func (o TaskDefinitionHealthCheckOutput) ToTaskDefinitionHealthCheckOutputWithContext(ctx context.Context) TaskDefinitionHealthCheckOutput {
	return o
}

func (o TaskDefinitionHealthCheckOutput) ToTaskDefinitionHealthCheckPtrOutput() TaskDefinitionHealthCheckPtrOutput {
	return o.ToTaskDefinitionHealthCheckPtrOutputWithContext(context.Background())
}

func (o TaskDefinitionHealthCheckOutput) ToTaskDefinitionHealthCheckPtrOutputWithContext(ctx context.Context) TaskDefinitionHealthCheckPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskDefinitionHealthCheck) *TaskDefinitionHealthCheck {
		return &v
	}).(TaskDefinitionHealthCheckPtrOutput)
}

// A string array representing the command that the container runs to determine if it is healthy. The string array must start with “CMD“ to run the command arguments directly, or “CMD-SHELL“ to run the command with the container's default shell.
//
//	 When you use the AWS Management Console JSON panel, the CLIlong, or the APIs, enclose the list of commands in double quotes and brackets.
//	 ``[ "CMD-SHELL", "curl -f http://localhost/ || exit 1" ]``
//	You don't include the double quotes and brackets when you use the AWS Management Console.
//	 ``CMD-SHELL, curl -f http://localhost/ || exit 1``
//	An exit code of 0 indicates success, and non-zero exit code indicates failure. For more information, see ``HealthCheck`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/).
func (o TaskDefinitionHealthCheckOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TaskDefinitionHealthCheck) []string { return v.Command }).(pulumi.StringArrayOutput)
}

// The time period in seconds between each health check execution. You may specify between 5 and 300 seconds. The default value is 30 seconds.
func (o TaskDefinitionHealthCheckOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskDefinitionHealthCheck) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

// The number of times to retry a failed health check before the container is considered unhealthy. You may specify between 1 and 10 retries. The default value is 3.
func (o TaskDefinitionHealthCheckOutput) Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskDefinitionHealthCheck) *int { return v.Retries }).(pulumi.IntPtrOutput)
}

// The optional grace period to provide containers time to bootstrap before failed health checks count towards the maximum number of retries. You can specify between 0 and 300 seconds. By default, the “startPeriod“ is off.
//
//	If a health check succeeds within the ``startPeriod``, then the container is considered healthy and any subsequent failures count toward the maximum number of retries.
func (o TaskDefinitionHealthCheckOutput) StartPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskDefinitionHealthCheck) *int { return v.StartPeriod }).(pulumi.IntPtrOutput)
}

// The time period in seconds to wait for a health check to succeed before it is considered a failure. You may specify between 2 and 60 seconds. The default value is 5.
func (o TaskDefinitionHealthCheckOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskDefinitionHealthCheck) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

type TaskDefinitionHealthCheckPtrOutput struct{ *pulumi.OutputState }

func (TaskDefinitionHealthCheckPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionHealthCheck)(nil)).Elem()
}

func (o TaskDefinitionHealthCheckPtrOutput) ToTaskDefinitionHealthCheckPtrOutput() TaskDefinitionHealthCheckPtrOutput {
	return o
}

func (o TaskDefinitionHealthCheckPtrOutput) ToTaskDefinitionHealthCheckPtrOutputWithContext(ctx context.Context) TaskDefinitionHealthCheckPtrOutput {
	return o
}

func (o TaskDefinitionHealthCheckPtrOutput) Elem() TaskDefinitionHealthCheckOutput {
	return o.ApplyT(func(v *TaskDefinitionHealthCheck) TaskDefinitionHealthCheck {
		if v != nil {
			return *v
		}
		var ret TaskDefinitionHealthCheck
		return ret
	}).(TaskDefinitionHealthCheckOutput)
}

// A string array representing the command that the container runs to determine if it is healthy. The string array must start with “CMD“ to run the command arguments directly, or “CMD-SHELL“ to run the command with the container's default shell.
//
//	 When you use the AWS Management Console JSON panel, the CLIlong, or the APIs, enclose the list of commands in double quotes and brackets.
//	 ``[ "CMD-SHELL", "curl -f http://localhost/ || exit 1" ]``
//	You don't include the double quotes and brackets when you use the AWS Management Console.
//	 ``CMD-SHELL, curl -f http://localhost/ || exit 1``
//	An exit code of 0 indicates success, and non-zero exit code indicates failure. For more information, see ``HealthCheck`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/).
func (o TaskDefinitionHealthCheckPtrOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TaskDefinitionHealthCheck) []string {
		if v == nil {
			return nil
		}
		return v.Command
	}).(pulumi.StringArrayOutput)
}

// The time period in seconds between each health check execution. You may specify between 5 and 300 seconds. The default value is 30 seconds.
func (o TaskDefinitionHealthCheckPtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.IntPtrOutput)
}

// The number of times to retry a failed health check before the container is considered unhealthy. You may specify between 1 and 10 retries. The default value is 3.
func (o TaskDefinitionHealthCheckPtrOutput) Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.Retries
	}).(pulumi.IntPtrOutput)
}

// The optional grace period to provide containers time to bootstrap before failed health checks count towards the maximum number of retries. You can specify between 0 and 300 seconds. By default, the “startPeriod“ is off.
//
//	If a health check succeeds within the ``startPeriod``, then the container is considered healthy and any subsequent failures count toward the maximum number of retries.
func (o TaskDefinitionHealthCheckPtrOutput) StartPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.StartPeriod
	}).(pulumi.IntPtrOutput)
}

// The time period in seconds to wait for a health check to succeed before it is considered a failure. You may specify between 2 and 60 seconds. The default value is 5.
func (o TaskDefinitionHealthCheckPtrOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.IntPtrOutput)
}

// The “HostEntry“ property specifies a hostname and an IP address that are added to the “/etc/hosts“ file of a container through the “extraHosts“ parameter of its “ContainerDefinition“ resource.
type TaskDefinitionHostEntry struct {
	// The hostname to use in the ``/etc/hosts`` entry.
	Hostname *string `pulumi:"hostname"`
	// The IP address to use in the ``/etc/hosts`` entry.
	IpAddress *string `pulumi:"ipAddress"`
}

// TaskDefinitionHostEntryInput is an input type that accepts TaskDefinitionHostEntryArgs and TaskDefinitionHostEntryOutput values.
// You can construct a concrete instance of `TaskDefinitionHostEntryInput` via:
//
//	TaskDefinitionHostEntryArgs{...}
type TaskDefinitionHostEntryInput interface {
	pulumi.Input

	ToTaskDefinitionHostEntryOutput() TaskDefinitionHostEntryOutput
	ToTaskDefinitionHostEntryOutputWithContext(context.Context) TaskDefinitionHostEntryOutput
}

// The “HostEntry“ property specifies a hostname and an IP address that are added to the “/etc/hosts“ file of a container through the “extraHosts“ parameter of its “ContainerDefinition“ resource.
type TaskDefinitionHostEntryArgs struct {
	// The hostname to use in the ``/etc/hosts`` entry.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// The IP address to use in the ``/etc/hosts`` entry.
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
}

func (TaskDefinitionHostEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionHostEntry)(nil)).Elem()
}

func (i TaskDefinitionHostEntryArgs) ToTaskDefinitionHostEntryOutput() TaskDefinitionHostEntryOutput {
	return i.ToTaskDefinitionHostEntryOutputWithContext(context.Background())
}

func (i TaskDefinitionHostEntryArgs) ToTaskDefinitionHostEntryOutputWithContext(ctx context.Context) TaskDefinitionHostEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionHostEntryOutput)
}

// TaskDefinitionHostEntryArrayInput is an input type that accepts TaskDefinitionHostEntryArray and TaskDefinitionHostEntryArrayOutput values.
// You can construct a concrete instance of `TaskDefinitionHostEntryArrayInput` via:
//
//	TaskDefinitionHostEntryArray{ TaskDefinitionHostEntryArgs{...} }
type TaskDefinitionHostEntryArrayInput interface {
	pulumi.Input

	ToTaskDefinitionHostEntryArrayOutput() TaskDefinitionHostEntryArrayOutput
	ToTaskDefinitionHostEntryArrayOutputWithContext(context.Context) TaskDefinitionHostEntryArrayOutput
}

type TaskDefinitionHostEntryArray []TaskDefinitionHostEntryInput

func (TaskDefinitionHostEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionHostEntry)(nil)).Elem()
}

func (i TaskDefinitionHostEntryArray) ToTaskDefinitionHostEntryArrayOutput() TaskDefinitionHostEntryArrayOutput {
	return i.ToTaskDefinitionHostEntryArrayOutputWithContext(context.Background())
}

func (i TaskDefinitionHostEntryArray) ToTaskDefinitionHostEntryArrayOutputWithContext(ctx context.Context) TaskDefinitionHostEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionHostEntryArrayOutput)
}

// The “HostEntry“ property specifies a hostname and an IP address that are added to the “/etc/hosts“ file of a container through the “extraHosts“ parameter of its “ContainerDefinition“ resource.
type TaskDefinitionHostEntryOutput struct{ *pulumi.OutputState }

func (TaskDefinitionHostEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionHostEntry)(nil)).Elem()
}

func (o TaskDefinitionHostEntryOutput) ToTaskDefinitionHostEntryOutput() TaskDefinitionHostEntryOutput {
	return o
}

func (o TaskDefinitionHostEntryOutput) ToTaskDefinitionHostEntryOutputWithContext(ctx context.Context) TaskDefinitionHostEntryOutput {
	return o
}

// The hostname to use in the “/etc/hosts“ entry.
func (o TaskDefinitionHostEntryOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionHostEntry) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// The IP address to use in the “/etc/hosts“ entry.
func (o TaskDefinitionHostEntryOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionHostEntry) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

type TaskDefinitionHostEntryArrayOutput struct{ *pulumi.OutputState }

func (TaskDefinitionHostEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionHostEntry)(nil)).Elem()
}

func (o TaskDefinitionHostEntryArrayOutput) ToTaskDefinitionHostEntryArrayOutput() TaskDefinitionHostEntryArrayOutput {
	return o
}

func (o TaskDefinitionHostEntryArrayOutput) ToTaskDefinitionHostEntryArrayOutputWithContext(ctx context.Context) TaskDefinitionHostEntryArrayOutput {
	return o
}

func (o TaskDefinitionHostEntryArrayOutput) Index(i pulumi.IntInput) TaskDefinitionHostEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskDefinitionHostEntry {
		return vs[0].([]TaskDefinitionHostEntry)[vs[1].(int)]
	}).(TaskDefinitionHostEntryOutput)
}

// The “HostVolumeProperties“ property specifies details on a container instance bind mount host volume.
type TaskDefinitionHostVolumeProperties struct {
	// When the ``host`` parameter is used, specify a ``sourcePath`` to declare the path on the host container instance that's presented to the container. If this parameter is empty, then the Docker daemon has assigned a host path for you. If the ``host`` parameter contains a ``sourcePath`` file location, then the data volume persists at the specified location on the host container instance until you delete it manually. If the ``sourcePath`` value doesn't exist on the host container instance, the Docker daemon creates it. If the location does exist, the contents of the source path folder are exported.
	//  If you're using the Fargate launch type, the ``sourcePath`` parameter is not supported.
	SourcePath *string `pulumi:"sourcePath"`
}

// TaskDefinitionHostVolumePropertiesInput is an input type that accepts TaskDefinitionHostVolumePropertiesArgs and TaskDefinitionHostVolumePropertiesOutput values.
// You can construct a concrete instance of `TaskDefinitionHostVolumePropertiesInput` via:
//
//	TaskDefinitionHostVolumePropertiesArgs{...}
type TaskDefinitionHostVolumePropertiesInput interface {
	pulumi.Input

	ToTaskDefinitionHostVolumePropertiesOutput() TaskDefinitionHostVolumePropertiesOutput
	ToTaskDefinitionHostVolumePropertiesOutputWithContext(context.Context) TaskDefinitionHostVolumePropertiesOutput
}

// The “HostVolumeProperties“ property specifies details on a container instance bind mount host volume.
type TaskDefinitionHostVolumePropertiesArgs struct {
	// When the ``host`` parameter is used, specify a ``sourcePath`` to declare the path on the host container instance that's presented to the container. If this parameter is empty, then the Docker daemon has assigned a host path for you. If the ``host`` parameter contains a ``sourcePath`` file location, then the data volume persists at the specified location on the host container instance until you delete it manually. If the ``sourcePath`` value doesn't exist on the host container instance, the Docker daemon creates it. If the location does exist, the contents of the source path folder are exported.
	//  If you're using the Fargate launch type, the ``sourcePath`` parameter is not supported.
	SourcePath pulumi.StringPtrInput `pulumi:"sourcePath"`
}

func (TaskDefinitionHostVolumePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionHostVolumeProperties)(nil)).Elem()
}

func (i TaskDefinitionHostVolumePropertiesArgs) ToTaskDefinitionHostVolumePropertiesOutput() TaskDefinitionHostVolumePropertiesOutput {
	return i.ToTaskDefinitionHostVolumePropertiesOutputWithContext(context.Background())
}

func (i TaskDefinitionHostVolumePropertiesArgs) ToTaskDefinitionHostVolumePropertiesOutputWithContext(ctx context.Context) TaskDefinitionHostVolumePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionHostVolumePropertiesOutput)
}

func (i TaskDefinitionHostVolumePropertiesArgs) ToTaskDefinitionHostVolumePropertiesPtrOutput() TaskDefinitionHostVolumePropertiesPtrOutput {
	return i.ToTaskDefinitionHostVolumePropertiesPtrOutputWithContext(context.Background())
}

func (i TaskDefinitionHostVolumePropertiesArgs) ToTaskDefinitionHostVolumePropertiesPtrOutputWithContext(ctx context.Context) TaskDefinitionHostVolumePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionHostVolumePropertiesOutput).ToTaskDefinitionHostVolumePropertiesPtrOutputWithContext(ctx)
}

// TaskDefinitionHostVolumePropertiesPtrInput is an input type that accepts TaskDefinitionHostVolumePropertiesArgs, TaskDefinitionHostVolumePropertiesPtr and TaskDefinitionHostVolumePropertiesPtrOutput values.
// You can construct a concrete instance of `TaskDefinitionHostVolumePropertiesPtrInput` via:
//
//	        TaskDefinitionHostVolumePropertiesArgs{...}
//
//	or:
//
//	        nil
type TaskDefinitionHostVolumePropertiesPtrInput interface {
	pulumi.Input

	ToTaskDefinitionHostVolumePropertiesPtrOutput() TaskDefinitionHostVolumePropertiesPtrOutput
	ToTaskDefinitionHostVolumePropertiesPtrOutputWithContext(context.Context) TaskDefinitionHostVolumePropertiesPtrOutput
}

type taskDefinitionHostVolumePropertiesPtrType TaskDefinitionHostVolumePropertiesArgs

func TaskDefinitionHostVolumePropertiesPtr(v *TaskDefinitionHostVolumePropertiesArgs) TaskDefinitionHostVolumePropertiesPtrInput {
	return (*taskDefinitionHostVolumePropertiesPtrType)(v)
}

func (*taskDefinitionHostVolumePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionHostVolumeProperties)(nil)).Elem()
}

func (i *taskDefinitionHostVolumePropertiesPtrType) ToTaskDefinitionHostVolumePropertiesPtrOutput() TaskDefinitionHostVolumePropertiesPtrOutput {
	return i.ToTaskDefinitionHostVolumePropertiesPtrOutputWithContext(context.Background())
}

func (i *taskDefinitionHostVolumePropertiesPtrType) ToTaskDefinitionHostVolumePropertiesPtrOutputWithContext(ctx context.Context) TaskDefinitionHostVolumePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionHostVolumePropertiesPtrOutput)
}

// The “HostVolumeProperties“ property specifies details on a container instance bind mount host volume.
type TaskDefinitionHostVolumePropertiesOutput struct{ *pulumi.OutputState }

func (TaskDefinitionHostVolumePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionHostVolumeProperties)(nil)).Elem()
}

func (o TaskDefinitionHostVolumePropertiesOutput) ToTaskDefinitionHostVolumePropertiesOutput() TaskDefinitionHostVolumePropertiesOutput {
	return o
}

func (o TaskDefinitionHostVolumePropertiesOutput) ToTaskDefinitionHostVolumePropertiesOutputWithContext(ctx context.Context) TaskDefinitionHostVolumePropertiesOutput {
	return o
}

func (o TaskDefinitionHostVolumePropertiesOutput) ToTaskDefinitionHostVolumePropertiesPtrOutput() TaskDefinitionHostVolumePropertiesPtrOutput {
	return o.ToTaskDefinitionHostVolumePropertiesPtrOutputWithContext(context.Background())
}

func (o TaskDefinitionHostVolumePropertiesOutput) ToTaskDefinitionHostVolumePropertiesPtrOutputWithContext(ctx context.Context) TaskDefinitionHostVolumePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskDefinitionHostVolumeProperties) *TaskDefinitionHostVolumeProperties {
		return &v
	}).(TaskDefinitionHostVolumePropertiesPtrOutput)
}

// When the “host“ parameter is used, specify a “sourcePath“ to declare the path on the host container instance that's presented to the container. If this parameter is empty, then the Docker daemon has assigned a host path for you. If the “host“ parameter contains a “sourcePath“ file location, then the data volume persists at the specified location on the host container instance until you delete it manually. If the “sourcePath“ value doesn't exist on the host container instance, the Docker daemon creates it. If the location does exist, the contents of the source path folder are exported.
//
//	If you're using the Fargate launch type, the ``sourcePath`` parameter is not supported.
func (o TaskDefinitionHostVolumePropertiesOutput) SourcePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionHostVolumeProperties) *string { return v.SourcePath }).(pulumi.StringPtrOutput)
}

type TaskDefinitionHostVolumePropertiesPtrOutput struct{ *pulumi.OutputState }

func (TaskDefinitionHostVolumePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionHostVolumeProperties)(nil)).Elem()
}

func (o TaskDefinitionHostVolumePropertiesPtrOutput) ToTaskDefinitionHostVolumePropertiesPtrOutput() TaskDefinitionHostVolumePropertiesPtrOutput {
	return o
}

func (o TaskDefinitionHostVolumePropertiesPtrOutput) ToTaskDefinitionHostVolumePropertiesPtrOutputWithContext(ctx context.Context) TaskDefinitionHostVolumePropertiesPtrOutput {
	return o
}

func (o TaskDefinitionHostVolumePropertiesPtrOutput) Elem() TaskDefinitionHostVolumePropertiesOutput {
	return o.ApplyT(func(v *TaskDefinitionHostVolumeProperties) TaskDefinitionHostVolumeProperties {
		if v != nil {
			return *v
		}
		var ret TaskDefinitionHostVolumeProperties
		return ret
	}).(TaskDefinitionHostVolumePropertiesOutput)
}

// When the “host“ parameter is used, specify a “sourcePath“ to declare the path on the host container instance that's presented to the container. If this parameter is empty, then the Docker daemon has assigned a host path for you. If the “host“ parameter contains a “sourcePath“ file location, then the data volume persists at the specified location on the host container instance until you delete it manually. If the “sourcePath“ value doesn't exist on the host container instance, the Docker daemon creates it. If the location does exist, the contents of the source path folder are exported.
//
//	If you're using the Fargate launch type, the ``sourcePath`` parameter is not supported.
func (o TaskDefinitionHostVolumePropertiesPtrOutput) SourcePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionHostVolumeProperties) *string {
		if v == nil {
			return nil
		}
		return v.SourcePath
	}).(pulumi.StringPtrOutput)
}

// Details on an Elastic Inference accelerator. For more information, see [Working with Amazon Elastic Inference on Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-inference.html) in the *Amazon Elastic Container Service Developer Guide*.
type TaskDefinitionInferenceAccelerator struct {
	// The Elastic Inference accelerator device name. The ``deviceName`` must also be referenced in a container definition as a [ResourceRequirement](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ResourceRequirement.html).
	DeviceName *string `pulumi:"deviceName"`
	// The Elastic Inference accelerator type to use.
	DeviceType *string `pulumi:"deviceType"`
}

// TaskDefinitionInferenceAcceleratorInput is an input type that accepts TaskDefinitionInferenceAcceleratorArgs and TaskDefinitionInferenceAcceleratorOutput values.
// You can construct a concrete instance of `TaskDefinitionInferenceAcceleratorInput` via:
//
//	TaskDefinitionInferenceAcceleratorArgs{...}
type TaskDefinitionInferenceAcceleratorInput interface {
	pulumi.Input

	ToTaskDefinitionInferenceAcceleratorOutput() TaskDefinitionInferenceAcceleratorOutput
	ToTaskDefinitionInferenceAcceleratorOutputWithContext(context.Context) TaskDefinitionInferenceAcceleratorOutput
}

// Details on an Elastic Inference accelerator. For more information, see [Working with Amazon Elastic Inference on Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-inference.html) in the *Amazon Elastic Container Service Developer Guide*.
type TaskDefinitionInferenceAcceleratorArgs struct {
	// The Elastic Inference accelerator device name. The ``deviceName`` must also be referenced in a container definition as a [ResourceRequirement](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ResourceRequirement.html).
	DeviceName pulumi.StringPtrInput `pulumi:"deviceName"`
	// The Elastic Inference accelerator type to use.
	DeviceType pulumi.StringPtrInput `pulumi:"deviceType"`
}

func (TaskDefinitionInferenceAcceleratorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionInferenceAccelerator)(nil)).Elem()
}

func (i TaskDefinitionInferenceAcceleratorArgs) ToTaskDefinitionInferenceAcceleratorOutput() TaskDefinitionInferenceAcceleratorOutput {
	return i.ToTaskDefinitionInferenceAcceleratorOutputWithContext(context.Background())
}

func (i TaskDefinitionInferenceAcceleratorArgs) ToTaskDefinitionInferenceAcceleratorOutputWithContext(ctx context.Context) TaskDefinitionInferenceAcceleratorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionInferenceAcceleratorOutput)
}

// TaskDefinitionInferenceAcceleratorArrayInput is an input type that accepts TaskDefinitionInferenceAcceleratorArray and TaskDefinitionInferenceAcceleratorArrayOutput values.
// You can construct a concrete instance of `TaskDefinitionInferenceAcceleratorArrayInput` via:
//
//	TaskDefinitionInferenceAcceleratorArray{ TaskDefinitionInferenceAcceleratorArgs{...} }
type TaskDefinitionInferenceAcceleratorArrayInput interface {
	pulumi.Input

	ToTaskDefinitionInferenceAcceleratorArrayOutput() TaskDefinitionInferenceAcceleratorArrayOutput
	ToTaskDefinitionInferenceAcceleratorArrayOutputWithContext(context.Context) TaskDefinitionInferenceAcceleratorArrayOutput
}

type TaskDefinitionInferenceAcceleratorArray []TaskDefinitionInferenceAcceleratorInput

func (TaskDefinitionInferenceAcceleratorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionInferenceAccelerator)(nil)).Elem()
}

func (i TaskDefinitionInferenceAcceleratorArray) ToTaskDefinitionInferenceAcceleratorArrayOutput() TaskDefinitionInferenceAcceleratorArrayOutput {
	return i.ToTaskDefinitionInferenceAcceleratorArrayOutputWithContext(context.Background())
}

func (i TaskDefinitionInferenceAcceleratorArray) ToTaskDefinitionInferenceAcceleratorArrayOutputWithContext(ctx context.Context) TaskDefinitionInferenceAcceleratorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionInferenceAcceleratorArrayOutput)
}

// Details on an Elastic Inference accelerator. For more information, see [Working with Amazon Elastic Inference on Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-inference.html) in the *Amazon Elastic Container Service Developer Guide*.
type TaskDefinitionInferenceAcceleratorOutput struct{ *pulumi.OutputState }

func (TaskDefinitionInferenceAcceleratorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionInferenceAccelerator)(nil)).Elem()
}

func (o TaskDefinitionInferenceAcceleratorOutput) ToTaskDefinitionInferenceAcceleratorOutput() TaskDefinitionInferenceAcceleratorOutput {
	return o
}

func (o TaskDefinitionInferenceAcceleratorOutput) ToTaskDefinitionInferenceAcceleratorOutputWithContext(ctx context.Context) TaskDefinitionInferenceAcceleratorOutput {
	return o
}

// The Elastic Inference accelerator device name. The “deviceName“ must also be referenced in a container definition as a [ResourceRequirement](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ResourceRequirement.html).
func (o TaskDefinitionInferenceAcceleratorOutput) DeviceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionInferenceAccelerator) *string { return v.DeviceName }).(pulumi.StringPtrOutput)
}

// The Elastic Inference accelerator type to use.
func (o TaskDefinitionInferenceAcceleratorOutput) DeviceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionInferenceAccelerator) *string { return v.DeviceType }).(pulumi.StringPtrOutput)
}

type TaskDefinitionInferenceAcceleratorArrayOutput struct{ *pulumi.OutputState }

func (TaskDefinitionInferenceAcceleratorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionInferenceAccelerator)(nil)).Elem()
}

func (o TaskDefinitionInferenceAcceleratorArrayOutput) ToTaskDefinitionInferenceAcceleratorArrayOutput() TaskDefinitionInferenceAcceleratorArrayOutput {
	return o
}

func (o TaskDefinitionInferenceAcceleratorArrayOutput) ToTaskDefinitionInferenceAcceleratorArrayOutputWithContext(ctx context.Context) TaskDefinitionInferenceAcceleratorArrayOutput {
	return o
}

func (o TaskDefinitionInferenceAcceleratorArrayOutput) Index(i pulumi.IntInput) TaskDefinitionInferenceAcceleratorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskDefinitionInferenceAccelerator {
		return vs[0].([]TaskDefinitionInferenceAccelerator)[vs[1].(int)]
	}).(TaskDefinitionInferenceAcceleratorOutput)
}

// The “KernelCapabilities“ property specifies the Linux capabilities for the container that are added to or dropped from the default configuration that is provided by Docker. For more information on the default capabilities and the non-default available capabilities, see [Runtime privilege and Linux capabilities](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#runtime-privilege-and-linux-capabilities) in the *Docker run reference*. For more detailed information on these Linux capabilities, see the [capabilities(7)](https://docs.aws.amazon.com/http://man7.org/linux/man-pages/man7/capabilities.7.html) Linux manual page.
type TaskDefinitionKernelCapabilities struct {
	// The Linux capabilities for the container that have been added to the default configuration provided by Docker. This parameter maps to ``CapAdd`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--cap-add`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	//   Tasks launched on FARGATElong only support adding the ``SYS_PTRACE`` kernel capability.
	//   Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN" | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" | "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" | "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" | "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT"
	Add []string `pulumi:"add"`
	// The Linux capabilities for the container that have been removed from the default configuration provided by Docker. This parameter maps to ``CapDrop`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--cap-drop`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	//  Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN" | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" | "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" | "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" | "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" | "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO"
	Drop []string `pulumi:"drop"`
}

// TaskDefinitionKernelCapabilitiesInput is an input type that accepts TaskDefinitionKernelCapabilitiesArgs and TaskDefinitionKernelCapabilitiesOutput values.
// You can construct a concrete instance of `TaskDefinitionKernelCapabilitiesInput` via:
//
//	TaskDefinitionKernelCapabilitiesArgs{...}
type TaskDefinitionKernelCapabilitiesInput interface {
	pulumi.Input

	ToTaskDefinitionKernelCapabilitiesOutput() TaskDefinitionKernelCapabilitiesOutput
	ToTaskDefinitionKernelCapabilitiesOutputWithContext(context.Context) TaskDefinitionKernelCapabilitiesOutput
}

// The “KernelCapabilities“ property specifies the Linux capabilities for the container that are added to or dropped from the default configuration that is provided by Docker. For more information on the default capabilities and the non-default available capabilities, see [Runtime privilege and Linux capabilities](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#runtime-privilege-and-linux-capabilities) in the *Docker run reference*. For more detailed information on these Linux capabilities, see the [capabilities(7)](https://docs.aws.amazon.com/http://man7.org/linux/man-pages/man7/capabilities.7.html) Linux manual page.
type TaskDefinitionKernelCapabilitiesArgs struct {
	// The Linux capabilities for the container that have been added to the default configuration provided by Docker. This parameter maps to ``CapAdd`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--cap-add`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	//   Tasks launched on FARGATElong only support adding the ``SYS_PTRACE`` kernel capability.
	//   Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN" | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" | "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" | "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" | "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT"
	Add pulumi.StringArrayInput `pulumi:"add"`
	// The Linux capabilities for the container that have been removed from the default configuration provided by Docker. This parameter maps to ``CapDrop`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--cap-drop`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	//  Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN" | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" | "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" | "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" | "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" | "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO"
	Drop pulumi.StringArrayInput `pulumi:"drop"`
}

func (TaskDefinitionKernelCapabilitiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionKernelCapabilities)(nil)).Elem()
}

func (i TaskDefinitionKernelCapabilitiesArgs) ToTaskDefinitionKernelCapabilitiesOutput() TaskDefinitionKernelCapabilitiesOutput {
	return i.ToTaskDefinitionKernelCapabilitiesOutputWithContext(context.Background())
}

func (i TaskDefinitionKernelCapabilitiesArgs) ToTaskDefinitionKernelCapabilitiesOutputWithContext(ctx context.Context) TaskDefinitionKernelCapabilitiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionKernelCapabilitiesOutput)
}

func (i TaskDefinitionKernelCapabilitiesArgs) ToTaskDefinitionKernelCapabilitiesPtrOutput() TaskDefinitionKernelCapabilitiesPtrOutput {
	return i.ToTaskDefinitionKernelCapabilitiesPtrOutputWithContext(context.Background())
}

func (i TaskDefinitionKernelCapabilitiesArgs) ToTaskDefinitionKernelCapabilitiesPtrOutputWithContext(ctx context.Context) TaskDefinitionKernelCapabilitiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionKernelCapabilitiesOutput).ToTaskDefinitionKernelCapabilitiesPtrOutputWithContext(ctx)
}

// TaskDefinitionKernelCapabilitiesPtrInput is an input type that accepts TaskDefinitionKernelCapabilitiesArgs, TaskDefinitionKernelCapabilitiesPtr and TaskDefinitionKernelCapabilitiesPtrOutput values.
// You can construct a concrete instance of `TaskDefinitionKernelCapabilitiesPtrInput` via:
//
//	        TaskDefinitionKernelCapabilitiesArgs{...}
//
//	or:
//
//	        nil
type TaskDefinitionKernelCapabilitiesPtrInput interface {
	pulumi.Input

	ToTaskDefinitionKernelCapabilitiesPtrOutput() TaskDefinitionKernelCapabilitiesPtrOutput
	ToTaskDefinitionKernelCapabilitiesPtrOutputWithContext(context.Context) TaskDefinitionKernelCapabilitiesPtrOutput
}

type taskDefinitionKernelCapabilitiesPtrType TaskDefinitionKernelCapabilitiesArgs

func TaskDefinitionKernelCapabilitiesPtr(v *TaskDefinitionKernelCapabilitiesArgs) TaskDefinitionKernelCapabilitiesPtrInput {
	return (*taskDefinitionKernelCapabilitiesPtrType)(v)
}

func (*taskDefinitionKernelCapabilitiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionKernelCapabilities)(nil)).Elem()
}

func (i *taskDefinitionKernelCapabilitiesPtrType) ToTaskDefinitionKernelCapabilitiesPtrOutput() TaskDefinitionKernelCapabilitiesPtrOutput {
	return i.ToTaskDefinitionKernelCapabilitiesPtrOutputWithContext(context.Background())
}

func (i *taskDefinitionKernelCapabilitiesPtrType) ToTaskDefinitionKernelCapabilitiesPtrOutputWithContext(ctx context.Context) TaskDefinitionKernelCapabilitiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionKernelCapabilitiesPtrOutput)
}

// The “KernelCapabilities“ property specifies the Linux capabilities for the container that are added to or dropped from the default configuration that is provided by Docker. For more information on the default capabilities and the non-default available capabilities, see [Runtime privilege and Linux capabilities](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#runtime-privilege-and-linux-capabilities) in the *Docker run reference*. For more detailed information on these Linux capabilities, see the [capabilities(7)](https://docs.aws.amazon.com/http://man7.org/linux/man-pages/man7/capabilities.7.html) Linux manual page.
type TaskDefinitionKernelCapabilitiesOutput struct{ *pulumi.OutputState }

func (TaskDefinitionKernelCapabilitiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionKernelCapabilities)(nil)).Elem()
}

func (o TaskDefinitionKernelCapabilitiesOutput) ToTaskDefinitionKernelCapabilitiesOutput() TaskDefinitionKernelCapabilitiesOutput {
	return o
}

func (o TaskDefinitionKernelCapabilitiesOutput) ToTaskDefinitionKernelCapabilitiesOutputWithContext(ctx context.Context) TaskDefinitionKernelCapabilitiesOutput {
	return o
}

func (o TaskDefinitionKernelCapabilitiesOutput) ToTaskDefinitionKernelCapabilitiesPtrOutput() TaskDefinitionKernelCapabilitiesPtrOutput {
	return o.ToTaskDefinitionKernelCapabilitiesPtrOutputWithContext(context.Background())
}

func (o TaskDefinitionKernelCapabilitiesOutput) ToTaskDefinitionKernelCapabilitiesPtrOutputWithContext(ctx context.Context) TaskDefinitionKernelCapabilitiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskDefinitionKernelCapabilities) *TaskDefinitionKernelCapabilities {
		return &v
	}).(TaskDefinitionKernelCapabilitiesPtrOutput)
}

// The Linux capabilities for the container that have been added to the default configuration provided by Docker. This parameter maps to “CapAdd“ in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the “--cap-add“ option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
//
//	Tasks launched on FARGATElong only support adding the ``SYS_PTRACE`` kernel capability.
//	Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN" | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" | "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" | "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" | "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT"
func (o TaskDefinitionKernelCapabilitiesOutput) Add() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TaskDefinitionKernelCapabilities) []string { return v.Add }).(pulumi.StringArrayOutput)
}

// The Linux capabilities for the container that have been removed from the default configuration provided by Docker. This parameter maps to “CapDrop“ in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the “--cap-drop“ option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
//
//	Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN" | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" | "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" | "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" | "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" | "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO"
func (o TaskDefinitionKernelCapabilitiesOutput) Drop() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TaskDefinitionKernelCapabilities) []string { return v.Drop }).(pulumi.StringArrayOutput)
}

type TaskDefinitionKernelCapabilitiesPtrOutput struct{ *pulumi.OutputState }

func (TaskDefinitionKernelCapabilitiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionKernelCapabilities)(nil)).Elem()
}

func (o TaskDefinitionKernelCapabilitiesPtrOutput) ToTaskDefinitionKernelCapabilitiesPtrOutput() TaskDefinitionKernelCapabilitiesPtrOutput {
	return o
}

func (o TaskDefinitionKernelCapabilitiesPtrOutput) ToTaskDefinitionKernelCapabilitiesPtrOutputWithContext(ctx context.Context) TaskDefinitionKernelCapabilitiesPtrOutput {
	return o
}

func (o TaskDefinitionKernelCapabilitiesPtrOutput) Elem() TaskDefinitionKernelCapabilitiesOutput {
	return o.ApplyT(func(v *TaskDefinitionKernelCapabilities) TaskDefinitionKernelCapabilities {
		if v != nil {
			return *v
		}
		var ret TaskDefinitionKernelCapabilities
		return ret
	}).(TaskDefinitionKernelCapabilitiesOutput)
}

// The Linux capabilities for the container that have been added to the default configuration provided by Docker. This parameter maps to “CapAdd“ in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the “--cap-add“ option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
//
//	Tasks launched on FARGATElong only support adding the ``SYS_PTRACE`` kernel capability.
//	Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN" | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" | "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" | "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" | "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT"
func (o TaskDefinitionKernelCapabilitiesPtrOutput) Add() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TaskDefinitionKernelCapabilities) []string {
		if v == nil {
			return nil
		}
		return v.Add
	}).(pulumi.StringArrayOutput)
}

// The Linux capabilities for the container that have been removed from the default configuration provided by Docker. This parameter maps to “CapDrop“ in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the “--cap-drop“ option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
//
//	Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN" | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" | "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" | "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" | "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" | "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO"
func (o TaskDefinitionKernelCapabilitiesPtrOutput) Drop() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TaskDefinitionKernelCapabilities) []string {
		if v == nil {
			return nil
		}
		return v.Drop
	}).(pulumi.StringArrayOutput)
}

// A key-value pair object.
type TaskDefinitionKeyValuePair struct {
	// The name of the key-value pair. For environment variables, this is the name of the environment variable.
	Name *string `pulumi:"name"`
	// The value of the key-value pair. For environment variables, this is the value of the environment variable.
	Value *string `pulumi:"value"`
}

// TaskDefinitionKeyValuePairInput is an input type that accepts TaskDefinitionKeyValuePairArgs and TaskDefinitionKeyValuePairOutput values.
// You can construct a concrete instance of `TaskDefinitionKeyValuePairInput` via:
//
//	TaskDefinitionKeyValuePairArgs{...}
type TaskDefinitionKeyValuePairInput interface {
	pulumi.Input

	ToTaskDefinitionKeyValuePairOutput() TaskDefinitionKeyValuePairOutput
	ToTaskDefinitionKeyValuePairOutputWithContext(context.Context) TaskDefinitionKeyValuePairOutput
}

// A key-value pair object.
type TaskDefinitionKeyValuePairArgs struct {
	// The name of the key-value pair. For environment variables, this is the name of the environment variable.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The value of the key-value pair. For environment variables, this is the value of the environment variable.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (TaskDefinitionKeyValuePairArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionKeyValuePair)(nil)).Elem()
}

func (i TaskDefinitionKeyValuePairArgs) ToTaskDefinitionKeyValuePairOutput() TaskDefinitionKeyValuePairOutput {
	return i.ToTaskDefinitionKeyValuePairOutputWithContext(context.Background())
}

func (i TaskDefinitionKeyValuePairArgs) ToTaskDefinitionKeyValuePairOutputWithContext(ctx context.Context) TaskDefinitionKeyValuePairOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionKeyValuePairOutput)
}

// TaskDefinitionKeyValuePairArrayInput is an input type that accepts TaskDefinitionKeyValuePairArray and TaskDefinitionKeyValuePairArrayOutput values.
// You can construct a concrete instance of `TaskDefinitionKeyValuePairArrayInput` via:
//
//	TaskDefinitionKeyValuePairArray{ TaskDefinitionKeyValuePairArgs{...} }
type TaskDefinitionKeyValuePairArrayInput interface {
	pulumi.Input

	ToTaskDefinitionKeyValuePairArrayOutput() TaskDefinitionKeyValuePairArrayOutput
	ToTaskDefinitionKeyValuePairArrayOutputWithContext(context.Context) TaskDefinitionKeyValuePairArrayOutput
}

type TaskDefinitionKeyValuePairArray []TaskDefinitionKeyValuePairInput

func (TaskDefinitionKeyValuePairArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionKeyValuePair)(nil)).Elem()
}

func (i TaskDefinitionKeyValuePairArray) ToTaskDefinitionKeyValuePairArrayOutput() TaskDefinitionKeyValuePairArrayOutput {
	return i.ToTaskDefinitionKeyValuePairArrayOutputWithContext(context.Background())
}

func (i TaskDefinitionKeyValuePairArray) ToTaskDefinitionKeyValuePairArrayOutputWithContext(ctx context.Context) TaskDefinitionKeyValuePairArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionKeyValuePairArrayOutput)
}

// A key-value pair object.
type TaskDefinitionKeyValuePairOutput struct{ *pulumi.OutputState }

func (TaskDefinitionKeyValuePairOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionKeyValuePair)(nil)).Elem()
}

func (o TaskDefinitionKeyValuePairOutput) ToTaskDefinitionKeyValuePairOutput() TaskDefinitionKeyValuePairOutput {
	return o
}

func (o TaskDefinitionKeyValuePairOutput) ToTaskDefinitionKeyValuePairOutputWithContext(ctx context.Context) TaskDefinitionKeyValuePairOutput {
	return o
}

// The name of the key-value pair. For environment variables, this is the name of the environment variable.
func (o TaskDefinitionKeyValuePairOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionKeyValuePair) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The value of the key-value pair. For environment variables, this is the value of the environment variable.
func (o TaskDefinitionKeyValuePairOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionKeyValuePair) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type TaskDefinitionKeyValuePairArrayOutput struct{ *pulumi.OutputState }

func (TaskDefinitionKeyValuePairArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionKeyValuePair)(nil)).Elem()
}

func (o TaskDefinitionKeyValuePairArrayOutput) ToTaskDefinitionKeyValuePairArrayOutput() TaskDefinitionKeyValuePairArrayOutput {
	return o
}

func (o TaskDefinitionKeyValuePairArrayOutput) ToTaskDefinitionKeyValuePairArrayOutputWithContext(ctx context.Context) TaskDefinitionKeyValuePairArrayOutput {
	return o
}

func (o TaskDefinitionKeyValuePairArrayOutput) Index(i pulumi.IntInput) TaskDefinitionKeyValuePairOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskDefinitionKeyValuePair {
		return vs[0].([]TaskDefinitionKeyValuePair)[vs[1].(int)]
	}).(TaskDefinitionKeyValuePairOutput)
}

// The Linux-specific options that are applied to the container, such as Linux [KernelCapabilities](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_KernelCapabilities.html).
type TaskDefinitionLinuxParameters struct {
	// The Linux capabilities for the container that are added to or dropped from the default configuration provided by Docker.
	//   For tasks that use the Fargate launch type, ``capabilities`` is supported for all platform versions but the ``add`` parameter is only supported if using platform version 1.4.0 or later.
	Capabilities *TaskDefinitionKernelCapabilities `pulumi:"capabilities"`
	// Any host devices to expose to the container. This parameter maps to ``Devices`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--device`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	//   If you're using tasks that use the Fargate launch type, the ``devices`` parameter isn't supported.
	Devices []TaskDefinitionDevice `pulumi:"devices"`
	// Run an ``init`` process inside the container that forwards signals and reaps processes. This parameter maps to the ``--init`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). This parameter requires version 1.25 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: ``sudo docker version --format '{{.Server.APIVersion}}'``
	InitProcessEnabled *bool `pulumi:"initProcessEnabled"`
	// The total amount of swap memory (in MiB) a container can use. This parameter will be translated to the ``--memory-swap`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) where the value would be the sum of the container memory plus the ``maxSwap`` value.
	//  If a ``maxSwap`` value of ``0`` is specified, the container will not use swap. Accepted values are ``0`` or any positive integer. If the ``maxSwap`` parameter is omitted, the container will use the swap configuration for the container instance it is running on. A ``maxSwap`` value must be set for the ``swappiness`` parameter to be used.
	//   If you're using tasks that use the Fargate launch type, the ``maxSwap`` parameter isn't supported.
	//  If you're using tasks on Amazon Linux 2023 the ``swappiness`` parameter isn't supported.
	MaxSwap *int `pulumi:"maxSwap"`
	// The value for the size (in MiB) of the ``/dev/shm`` volume. This parameter maps to the ``--shm-size`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	//   If you are using tasks that use the Fargate launch type, the ``sharedMemorySize`` parameter is not supported.
	SharedMemorySize *int `pulumi:"sharedMemorySize"`
	// This allows you to tune a container's memory swappiness behavior. A ``swappiness`` value of ``0`` will cause swapping to not happen unless absolutely necessary. A ``swappiness`` value of ``100`` will cause pages to be swapped very aggressively. Accepted values are whole numbers between ``0`` and ``100``. If the ``swappiness`` parameter is not specified, a default value of ``60`` is used. If a value is not specified for ``maxSwap`` then this parameter is ignored. This parameter maps to the ``--memory-swappiness`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	//   If you're using tasks that use the Fargate launch type, the ``swappiness`` parameter isn't supported.
	//  If you're using tasks on Amazon Linux 2023 the ``swappiness`` parameter isn't supported.
	Swappiness *int `pulumi:"swappiness"`
	// The container path, mount options, and size (in MiB) of the tmpfs mount. This parameter maps to the ``--tmpfs`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	//   If you're using tasks that use the Fargate launch type, the ``tmpfs`` parameter isn't supported.
	Tmpfs []TaskDefinitionTmpfs `pulumi:"tmpfs"`
}

// TaskDefinitionLinuxParametersInput is an input type that accepts TaskDefinitionLinuxParametersArgs and TaskDefinitionLinuxParametersOutput values.
// You can construct a concrete instance of `TaskDefinitionLinuxParametersInput` via:
//
//	TaskDefinitionLinuxParametersArgs{...}
type TaskDefinitionLinuxParametersInput interface {
	pulumi.Input

	ToTaskDefinitionLinuxParametersOutput() TaskDefinitionLinuxParametersOutput
	ToTaskDefinitionLinuxParametersOutputWithContext(context.Context) TaskDefinitionLinuxParametersOutput
}

// The Linux-specific options that are applied to the container, such as Linux [KernelCapabilities](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_KernelCapabilities.html).
type TaskDefinitionLinuxParametersArgs struct {
	// The Linux capabilities for the container that are added to or dropped from the default configuration provided by Docker.
	//   For tasks that use the Fargate launch type, ``capabilities`` is supported for all platform versions but the ``add`` parameter is only supported if using platform version 1.4.0 or later.
	Capabilities TaskDefinitionKernelCapabilitiesPtrInput `pulumi:"capabilities"`
	// Any host devices to expose to the container. This parameter maps to ``Devices`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--device`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	//   If you're using tasks that use the Fargate launch type, the ``devices`` parameter isn't supported.
	Devices TaskDefinitionDeviceArrayInput `pulumi:"devices"`
	// Run an ``init`` process inside the container that forwards signals and reaps processes. This parameter maps to the ``--init`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). This parameter requires version 1.25 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: ``sudo docker version --format '{{.Server.APIVersion}}'``
	InitProcessEnabled pulumi.BoolPtrInput `pulumi:"initProcessEnabled"`
	// The total amount of swap memory (in MiB) a container can use. This parameter will be translated to the ``--memory-swap`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) where the value would be the sum of the container memory plus the ``maxSwap`` value.
	//  If a ``maxSwap`` value of ``0`` is specified, the container will not use swap. Accepted values are ``0`` or any positive integer. If the ``maxSwap`` parameter is omitted, the container will use the swap configuration for the container instance it is running on. A ``maxSwap`` value must be set for the ``swappiness`` parameter to be used.
	//   If you're using tasks that use the Fargate launch type, the ``maxSwap`` parameter isn't supported.
	//  If you're using tasks on Amazon Linux 2023 the ``swappiness`` parameter isn't supported.
	MaxSwap pulumi.IntPtrInput `pulumi:"maxSwap"`
	// The value for the size (in MiB) of the ``/dev/shm`` volume. This parameter maps to the ``--shm-size`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	//   If you are using tasks that use the Fargate launch type, the ``sharedMemorySize`` parameter is not supported.
	SharedMemorySize pulumi.IntPtrInput `pulumi:"sharedMemorySize"`
	// This allows you to tune a container's memory swappiness behavior. A ``swappiness`` value of ``0`` will cause swapping to not happen unless absolutely necessary. A ``swappiness`` value of ``100`` will cause pages to be swapped very aggressively. Accepted values are whole numbers between ``0`` and ``100``. If the ``swappiness`` parameter is not specified, a default value of ``60`` is used. If a value is not specified for ``maxSwap`` then this parameter is ignored. This parameter maps to the ``--memory-swappiness`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	//   If you're using tasks that use the Fargate launch type, the ``swappiness`` parameter isn't supported.
	//  If you're using tasks on Amazon Linux 2023 the ``swappiness`` parameter isn't supported.
	Swappiness pulumi.IntPtrInput `pulumi:"swappiness"`
	// The container path, mount options, and size (in MiB) of the tmpfs mount. This parameter maps to the ``--tmpfs`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
	//   If you're using tasks that use the Fargate launch type, the ``tmpfs`` parameter isn't supported.
	Tmpfs TaskDefinitionTmpfsArrayInput `pulumi:"tmpfs"`
}

func (TaskDefinitionLinuxParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionLinuxParameters)(nil)).Elem()
}

func (i TaskDefinitionLinuxParametersArgs) ToTaskDefinitionLinuxParametersOutput() TaskDefinitionLinuxParametersOutput {
	return i.ToTaskDefinitionLinuxParametersOutputWithContext(context.Background())
}

func (i TaskDefinitionLinuxParametersArgs) ToTaskDefinitionLinuxParametersOutputWithContext(ctx context.Context) TaskDefinitionLinuxParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionLinuxParametersOutput)
}

func (i TaskDefinitionLinuxParametersArgs) ToTaskDefinitionLinuxParametersPtrOutput() TaskDefinitionLinuxParametersPtrOutput {
	return i.ToTaskDefinitionLinuxParametersPtrOutputWithContext(context.Background())
}

func (i TaskDefinitionLinuxParametersArgs) ToTaskDefinitionLinuxParametersPtrOutputWithContext(ctx context.Context) TaskDefinitionLinuxParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionLinuxParametersOutput).ToTaskDefinitionLinuxParametersPtrOutputWithContext(ctx)
}

// TaskDefinitionLinuxParametersPtrInput is an input type that accepts TaskDefinitionLinuxParametersArgs, TaskDefinitionLinuxParametersPtr and TaskDefinitionLinuxParametersPtrOutput values.
// You can construct a concrete instance of `TaskDefinitionLinuxParametersPtrInput` via:
//
//	        TaskDefinitionLinuxParametersArgs{...}
//
//	or:
//
//	        nil
type TaskDefinitionLinuxParametersPtrInput interface {
	pulumi.Input

	ToTaskDefinitionLinuxParametersPtrOutput() TaskDefinitionLinuxParametersPtrOutput
	ToTaskDefinitionLinuxParametersPtrOutputWithContext(context.Context) TaskDefinitionLinuxParametersPtrOutput
}

type taskDefinitionLinuxParametersPtrType TaskDefinitionLinuxParametersArgs

func TaskDefinitionLinuxParametersPtr(v *TaskDefinitionLinuxParametersArgs) TaskDefinitionLinuxParametersPtrInput {
	return (*taskDefinitionLinuxParametersPtrType)(v)
}

func (*taskDefinitionLinuxParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionLinuxParameters)(nil)).Elem()
}

func (i *taskDefinitionLinuxParametersPtrType) ToTaskDefinitionLinuxParametersPtrOutput() TaskDefinitionLinuxParametersPtrOutput {
	return i.ToTaskDefinitionLinuxParametersPtrOutputWithContext(context.Background())
}

func (i *taskDefinitionLinuxParametersPtrType) ToTaskDefinitionLinuxParametersPtrOutputWithContext(ctx context.Context) TaskDefinitionLinuxParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionLinuxParametersPtrOutput)
}

// The Linux-specific options that are applied to the container, such as Linux [KernelCapabilities](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_KernelCapabilities.html).
type TaskDefinitionLinuxParametersOutput struct{ *pulumi.OutputState }

func (TaskDefinitionLinuxParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionLinuxParameters)(nil)).Elem()
}

func (o TaskDefinitionLinuxParametersOutput) ToTaskDefinitionLinuxParametersOutput() TaskDefinitionLinuxParametersOutput {
	return o
}

func (o TaskDefinitionLinuxParametersOutput) ToTaskDefinitionLinuxParametersOutputWithContext(ctx context.Context) TaskDefinitionLinuxParametersOutput {
	return o
}

func (o TaskDefinitionLinuxParametersOutput) ToTaskDefinitionLinuxParametersPtrOutput() TaskDefinitionLinuxParametersPtrOutput {
	return o.ToTaskDefinitionLinuxParametersPtrOutputWithContext(context.Background())
}

func (o TaskDefinitionLinuxParametersOutput) ToTaskDefinitionLinuxParametersPtrOutputWithContext(ctx context.Context) TaskDefinitionLinuxParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskDefinitionLinuxParameters) *TaskDefinitionLinuxParameters {
		return &v
	}).(TaskDefinitionLinuxParametersPtrOutput)
}

// The Linux capabilities for the container that are added to or dropped from the default configuration provided by Docker.
//
//	For tasks that use the Fargate launch type, ``capabilities`` is supported for all platform versions but the ``add`` parameter is only supported if using platform version 1.4.0 or later.
func (o TaskDefinitionLinuxParametersOutput) Capabilities() TaskDefinitionKernelCapabilitiesPtrOutput {
	return o.ApplyT(func(v TaskDefinitionLinuxParameters) *TaskDefinitionKernelCapabilities { return v.Capabilities }).(TaskDefinitionKernelCapabilitiesPtrOutput)
}

// Any host devices to expose to the container. This parameter maps to “Devices“ in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the “--device“ option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
//
//	If you're using tasks that use the Fargate launch type, the ``devices`` parameter isn't supported.
func (o TaskDefinitionLinuxParametersOutput) Devices() TaskDefinitionDeviceArrayOutput {
	return o.ApplyT(func(v TaskDefinitionLinuxParameters) []TaskDefinitionDevice { return v.Devices }).(TaskDefinitionDeviceArrayOutput)
}

// Run an “init“ process inside the container that forwards signals and reaps processes. This parameter maps to the “--init“ option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). This parameter requires version 1.25 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: “sudo docker version --format '{{.Server.APIVersion}}'“
func (o TaskDefinitionLinuxParametersOutput) InitProcessEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TaskDefinitionLinuxParameters) *bool { return v.InitProcessEnabled }).(pulumi.BoolPtrOutput)
}

// The total amount of swap memory (in MiB) a container can use. This parameter will be translated to the “--memory-swap“ option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) where the value would be the sum of the container memory plus the “maxSwap“ value.
//
//	If a ``maxSwap`` value of ``0`` is specified, the container will not use swap. Accepted values are ``0`` or any positive integer. If the ``maxSwap`` parameter is omitted, the container will use the swap configuration for the container instance it is running on. A ``maxSwap`` value must be set for the ``swappiness`` parameter to be used.
//	 If you're using tasks that use the Fargate launch type, the ``maxSwap`` parameter isn't supported.
//	If you're using tasks on Amazon Linux 2023 the ``swappiness`` parameter isn't supported.
func (o TaskDefinitionLinuxParametersOutput) MaxSwap() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskDefinitionLinuxParameters) *int { return v.MaxSwap }).(pulumi.IntPtrOutput)
}

// The value for the size (in MiB) of the “/dev/shm“ volume. This parameter maps to the “--shm-size“ option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
//
//	If you are using tasks that use the Fargate launch type, the ``sharedMemorySize`` parameter is not supported.
func (o TaskDefinitionLinuxParametersOutput) SharedMemorySize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskDefinitionLinuxParameters) *int { return v.SharedMemorySize }).(pulumi.IntPtrOutput)
}

// This allows you to tune a container's memory swappiness behavior. A “swappiness“ value of “0“ will cause swapping to not happen unless absolutely necessary. A “swappiness“ value of “100“ will cause pages to be swapped very aggressively. Accepted values are whole numbers between “0“ and “100“. If the “swappiness“ parameter is not specified, a default value of “60“ is used. If a value is not specified for “maxSwap“ then this parameter is ignored. This parameter maps to the “--memory-swappiness“ option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
//
//	 If you're using tasks that use the Fargate launch type, the ``swappiness`` parameter isn't supported.
//	If you're using tasks on Amazon Linux 2023 the ``swappiness`` parameter isn't supported.
func (o TaskDefinitionLinuxParametersOutput) Swappiness() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskDefinitionLinuxParameters) *int { return v.Swappiness }).(pulumi.IntPtrOutput)
}

// The container path, mount options, and size (in MiB) of the tmpfs mount. This parameter maps to the “--tmpfs“ option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
//
//	If you're using tasks that use the Fargate launch type, the ``tmpfs`` parameter isn't supported.
func (o TaskDefinitionLinuxParametersOutput) Tmpfs() TaskDefinitionTmpfsArrayOutput {
	return o.ApplyT(func(v TaskDefinitionLinuxParameters) []TaskDefinitionTmpfs { return v.Tmpfs }).(TaskDefinitionTmpfsArrayOutput)
}

type TaskDefinitionLinuxParametersPtrOutput struct{ *pulumi.OutputState }

func (TaskDefinitionLinuxParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionLinuxParameters)(nil)).Elem()
}

func (o TaskDefinitionLinuxParametersPtrOutput) ToTaskDefinitionLinuxParametersPtrOutput() TaskDefinitionLinuxParametersPtrOutput {
	return o
}

func (o TaskDefinitionLinuxParametersPtrOutput) ToTaskDefinitionLinuxParametersPtrOutputWithContext(ctx context.Context) TaskDefinitionLinuxParametersPtrOutput {
	return o
}

func (o TaskDefinitionLinuxParametersPtrOutput) Elem() TaskDefinitionLinuxParametersOutput {
	return o.ApplyT(func(v *TaskDefinitionLinuxParameters) TaskDefinitionLinuxParameters {
		if v != nil {
			return *v
		}
		var ret TaskDefinitionLinuxParameters
		return ret
	}).(TaskDefinitionLinuxParametersOutput)
}

// The Linux capabilities for the container that are added to or dropped from the default configuration provided by Docker.
//
//	For tasks that use the Fargate launch type, ``capabilities`` is supported for all platform versions but the ``add`` parameter is only supported if using platform version 1.4.0 or later.
func (o TaskDefinitionLinuxParametersPtrOutput) Capabilities() TaskDefinitionKernelCapabilitiesPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionLinuxParameters) *TaskDefinitionKernelCapabilities {
		if v == nil {
			return nil
		}
		return v.Capabilities
	}).(TaskDefinitionKernelCapabilitiesPtrOutput)
}

// Any host devices to expose to the container. This parameter maps to “Devices“ in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the “--device“ option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
//
//	If you're using tasks that use the Fargate launch type, the ``devices`` parameter isn't supported.
func (o TaskDefinitionLinuxParametersPtrOutput) Devices() TaskDefinitionDeviceArrayOutput {
	return o.ApplyT(func(v *TaskDefinitionLinuxParameters) []TaskDefinitionDevice {
		if v == nil {
			return nil
		}
		return v.Devices
	}).(TaskDefinitionDeviceArrayOutput)
}

// Run an “init“ process inside the container that forwards signals and reaps processes. This parameter maps to the “--init“ option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). This parameter requires version 1.25 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: “sudo docker version --format '{{.Server.APIVersion}}'“
func (o TaskDefinitionLinuxParametersPtrOutput) InitProcessEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionLinuxParameters) *bool {
		if v == nil {
			return nil
		}
		return v.InitProcessEnabled
	}).(pulumi.BoolPtrOutput)
}

// The total amount of swap memory (in MiB) a container can use. This parameter will be translated to the “--memory-swap“ option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) where the value would be the sum of the container memory plus the “maxSwap“ value.
//
//	If a ``maxSwap`` value of ``0`` is specified, the container will not use swap. Accepted values are ``0`` or any positive integer. If the ``maxSwap`` parameter is omitted, the container will use the swap configuration for the container instance it is running on. A ``maxSwap`` value must be set for the ``swappiness`` parameter to be used.
//	 If you're using tasks that use the Fargate launch type, the ``maxSwap`` parameter isn't supported.
//	If you're using tasks on Amazon Linux 2023 the ``swappiness`` parameter isn't supported.
func (o TaskDefinitionLinuxParametersPtrOutput) MaxSwap() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionLinuxParameters) *int {
		if v == nil {
			return nil
		}
		return v.MaxSwap
	}).(pulumi.IntPtrOutput)
}

// The value for the size (in MiB) of the “/dev/shm“ volume. This parameter maps to the “--shm-size“ option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
//
//	If you are using tasks that use the Fargate launch type, the ``sharedMemorySize`` parameter is not supported.
func (o TaskDefinitionLinuxParametersPtrOutput) SharedMemorySize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionLinuxParameters) *int {
		if v == nil {
			return nil
		}
		return v.SharedMemorySize
	}).(pulumi.IntPtrOutput)
}

// This allows you to tune a container's memory swappiness behavior. A “swappiness“ value of “0“ will cause swapping to not happen unless absolutely necessary. A “swappiness“ value of “100“ will cause pages to be swapped very aggressively. Accepted values are whole numbers between “0“ and “100“. If the “swappiness“ parameter is not specified, a default value of “60“ is used. If a value is not specified for “maxSwap“ then this parameter is ignored. This parameter maps to the “--memory-swappiness“ option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
//
//	 If you're using tasks that use the Fargate launch type, the ``swappiness`` parameter isn't supported.
//	If you're using tasks on Amazon Linux 2023 the ``swappiness`` parameter isn't supported.
func (o TaskDefinitionLinuxParametersPtrOutput) Swappiness() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionLinuxParameters) *int {
		if v == nil {
			return nil
		}
		return v.Swappiness
	}).(pulumi.IntPtrOutput)
}

// The container path, mount options, and size (in MiB) of the tmpfs mount. This parameter maps to the “--tmpfs“ option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
//
//	If you're using tasks that use the Fargate launch type, the ``tmpfs`` parameter isn't supported.
func (o TaskDefinitionLinuxParametersPtrOutput) Tmpfs() TaskDefinitionTmpfsArrayOutput {
	return o.ApplyT(func(v *TaskDefinitionLinuxParameters) []TaskDefinitionTmpfs {
		if v == nil {
			return nil
		}
		return v.Tmpfs
	}).(TaskDefinitionTmpfsArrayOutput)
}

// The “LogConfiguration“ property specifies log configuration options to send to a custom log driver for the container.
type TaskDefinitionLogConfiguration struct {
	// The log driver to use for the container.
	//  For tasks on FARGATElong, the supported log drivers are ``awslogs``, ``splunk``, and ``awsfirelens``.
	//  For tasks hosted on Amazon EC2 instances, the supported log drivers are ``awslogs``, ``fluentd``, ``gelf``, ``json-file``, ``journald``, ``logentries``,``syslog``, ``splunk``, and ``awsfirelens``.
	//  For more information about using the ``awslogs`` log driver, see [Using the awslogs log driver](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_awslogs.html) in the *Amazon Elastic Container Service Developer Guide*.
	//  For more information about using the ``awsfirelens`` log driver, see [Custom log routing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html) in the *Amazon Elastic Container Service Developer Guide*.
	//   If you have a custom driver that isn't listed, you can fork the Amazon ECS container agent project that's [available on GitHub](https://docs.aws.amazon.com/https://github.com/aws/amazon-ecs
	LogDriver string `pulumi:"logDriver"`
	// The configuration options to send to the log driver. This parameter requires version 1.19 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: ``sudo docker version --format '{{.Server.APIVersion}}'``
	Options map[string]string `pulumi:"options"`
	// The secrets to pass to the log configuration. For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the *Amazon Elastic Container Service Developer Guide*.
	SecretOptions []TaskDefinitionSecret `pulumi:"secretOptions"`
}

// TaskDefinitionLogConfigurationInput is an input type that accepts TaskDefinitionLogConfigurationArgs and TaskDefinitionLogConfigurationOutput values.
// You can construct a concrete instance of `TaskDefinitionLogConfigurationInput` via:
//
//	TaskDefinitionLogConfigurationArgs{...}
type TaskDefinitionLogConfigurationInput interface {
	pulumi.Input

	ToTaskDefinitionLogConfigurationOutput() TaskDefinitionLogConfigurationOutput
	ToTaskDefinitionLogConfigurationOutputWithContext(context.Context) TaskDefinitionLogConfigurationOutput
}

// The “LogConfiguration“ property specifies log configuration options to send to a custom log driver for the container.
type TaskDefinitionLogConfigurationArgs struct {
	// The log driver to use for the container.
	//  For tasks on FARGATElong, the supported log drivers are ``awslogs``, ``splunk``, and ``awsfirelens``.
	//  For tasks hosted on Amazon EC2 instances, the supported log drivers are ``awslogs``, ``fluentd``, ``gelf``, ``json-file``, ``journald``, ``logentries``,``syslog``, ``splunk``, and ``awsfirelens``.
	//  For more information about using the ``awslogs`` log driver, see [Using the awslogs log driver](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_awslogs.html) in the *Amazon Elastic Container Service Developer Guide*.
	//  For more information about using the ``awsfirelens`` log driver, see [Custom log routing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html) in the *Amazon Elastic Container Service Developer Guide*.
	//   If you have a custom driver that isn't listed, you can fork the Amazon ECS container agent project that's [available on GitHub](https://docs.aws.amazon.com/https://github.com/aws/amazon-ecs
	LogDriver pulumi.StringInput `pulumi:"logDriver"`
	// The configuration options to send to the log driver. This parameter requires version 1.19 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: ``sudo docker version --format '{{.Server.APIVersion}}'``
	Options pulumi.StringMapInput `pulumi:"options"`
	// The secrets to pass to the log configuration. For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the *Amazon Elastic Container Service Developer Guide*.
	SecretOptions TaskDefinitionSecretArrayInput `pulumi:"secretOptions"`
}

func (TaskDefinitionLogConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionLogConfiguration)(nil)).Elem()
}

func (i TaskDefinitionLogConfigurationArgs) ToTaskDefinitionLogConfigurationOutput() TaskDefinitionLogConfigurationOutput {
	return i.ToTaskDefinitionLogConfigurationOutputWithContext(context.Background())
}

func (i TaskDefinitionLogConfigurationArgs) ToTaskDefinitionLogConfigurationOutputWithContext(ctx context.Context) TaskDefinitionLogConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionLogConfigurationOutput)
}

func (i TaskDefinitionLogConfigurationArgs) ToTaskDefinitionLogConfigurationPtrOutput() TaskDefinitionLogConfigurationPtrOutput {
	return i.ToTaskDefinitionLogConfigurationPtrOutputWithContext(context.Background())
}

func (i TaskDefinitionLogConfigurationArgs) ToTaskDefinitionLogConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionLogConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionLogConfigurationOutput).ToTaskDefinitionLogConfigurationPtrOutputWithContext(ctx)
}

// TaskDefinitionLogConfigurationPtrInput is an input type that accepts TaskDefinitionLogConfigurationArgs, TaskDefinitionLogConfigurationPtr and TaskDefinitionLogConfigurationPtrOutput values.
// You can construct a concrete instance of `TaskDefinitionLogConfigurationPtrInput` via:
//
//	        TaskDefinitionLogConfigurationArgs{...}
//
//	or:
//
//	        nil
type TaskDefinitionLogConfigurationPtrInput interface {
	pulumi.Input

	ToTaskDefinitionLogConfigurationPtrOutput() TaskDefinitionLogConfigurationPtrOutput
	ToTaskDefinitionLogConfigurationPtrOutputWithContext(context.Context) TaskDefinitionLogConfigurationPtrOutput
}

type taskDefinitionLogConfigurationPtrType TaskDefinitionLogConfigurationArgs

func TaskDefinitionLogConfigurationPtr(v *TaskDefinitionLogConfigurationArgs) TaskDefinitionLogConfigurationPtrInput {
	return (*taskDefinitionLogConfigurationPtrType)(v)
}

func (*taskDefinitionLogConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionLogConfiguration)(nil)).Elem()
}

func (i *taskDefinitionLogConfigurationPtrType) ToTaskDefinitionLogConfigurationPtrOutput() TaskDefinitionLogConfigurationPtrOutput {
	return i.ToTaskDefinitionLogConfigurationPtrOutputWithContext(context.Background())
}

func (i *taskDefinitionLogConfigurationPtrType) ToTaskDefinitionLogConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionLogConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionLogConfigurationPtrOutput)
}

// The “LogConfiguration“ property specifies log configuration options to send to a custom log driver for the container.
type TaskDefinitionLogConfigurationOutput struct{ *pulumi.OutputState }

func (TaskDefinitionLogConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionLogConfiguration)(nil)).Elem()
}

func (o TaskDefinitionLogConfigurationOutput) ToTaskDefinitionLogConfigurationOutput() TaskDefinitionLogConfigurationOutput {
	return o
}

func (o TaskDefinitionLogConfigurationOutput) ToTaskDefinitionLogConfigurationOutputWithContext(ctx context.Context) TaskDefinitionLogConfigurationOutput {
	return o
}

func (o TaskDefinitionLogConfigurationOutput) ToTaskDefinitionLogConfigurationPtrOutput() TaskDefinitionLogConfigurationPtrOutput {
	return o.ToTaskDefinitionLogConfigurationPtrOutputWithContext(context.Background())
}

func (o TaskDefinitionLogConfigurationOutput) ToTaskDefinitionLogConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionLogConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskDefinitionLogConfiguration) *TaskDefinitionLogConfiguration {
		return &v
	}).(TaskDefinitionLogConfigurationPtrOutput)
}

// The log driver to use for the container.
//
//	For tasks on FARGATElong, the supported log drivers are ``awslogs``, ``splunk``, and ``awsfirelens``.
//	For tasks hosted on Amazon EC2 instances, the supported log drivers are ``awslogs``, ``fluentd``, ``gelf``, ``json-file``, ``journald``, ``logentries``,``syslog``, ``splunk``, and ``awsfirelens``.
//	For more information about using the ``awslogs`` log driver, see [Using the awslogs log driver](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_awslogs.html) in the *Amazon Elastic Container Service Developer Guide*.
//	For more information about using the ``awsfirelens`` log driver, see [Custom log routing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html) in the *Amazon Elastic Container Service Developer Guide*.
//	 If you have a custom driver that isn't listed, you can fork the Amazon ECS container agent project that's [available on GitHub](https://docs.aws.amazon.com/https://github.com/aws/amazon-ecs
func (o TaskDefinitionLogConfigurationOutput) LogDriver() pulumi.StringOutput {
	return o.ApplyT(func(v TaskDefinitionLogConfiguration) string { return v.LogDriver }).(pulumi.StringOutput)
}

// The configuration options to send to the log driver. This parameter requires version 1.19 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: “sudo docker version --format '{{.Server.APIVersion}}'“
func (o TaskDefinitionLogConfigurationOutput) Options() pulumi.StringMapOutput {
	return o.ApplyT(func(v TaskDefinitionLogConfiguration) map[string]string { return v.Options }).(pulumi.StringMapOutput)
}

// The secrets to pass to the log configuration. For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the *Amazon Elastic Container Service Developer Guide*.
func (o TaskDefinitionLogConfigurationOutput) SecretOptions() TaskDefinitionSecretArrayOutput {
	return o.ApplyT(func(v TaskDefinitionLogConfiguration) []TaskDefinitionSecret { return v.SecretOptions }).(TaskDefinitionSecretArrayOutput)
}

type TaskDefinitionLogConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TaskDefinitionLogConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionLogConfiguration)(nil)).Elem()
}

func (o TaskDefinitionLogConfigurationPtrOutput) ToTaskDefinitionLogConfigurationPtrOutput() TaskDefinitionLogConfigurationPtrOutput {
	return o
}

func (o TaskDefinitionLogConfigurationPtrOutput) ToTaskDefinitionLogConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionLogConfigurationPtrOutput {
	return o
}

func (o TaskDefinitionLogConfigurationPtrOutput) Elem() TaskDefinitionLogConfigurationOutput {
	return o.ApplyT(func(v *TaskDefinitionLogConfiguration) TaskDefinitionLogConfiguration {
		if v != nil {
			return *v
		}
		var ret TaskDefinitionLogConfiguration
		return ret
	}).(TaskDefinitionLogConfigurationOutput)
}

// The log driver to use for the container.
//
//	For tasks on FARGATElong, the supported log drivers are ``awslogs``, ``splunk``, and ``awsfirelens``.
//	For tasks hosted on Amazon EC2 instances, the supported log drivers are ``awslogs``, ``fluentd``, ``gelf``, ``json-file``, ``journald``, ``logentries``,``syslog``, ``splunk``, and ``awsfirelens``.
//	For more information about using the ``awslogs`` log driver, see [Using the awslogs log driver](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_awslogs.html) in the *Amazon Elastic Container Service Developer Guide*.
//	For more information about using the ``awsfirelens`` log driver, see [Custom log routing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html) in the *Amazon Elastic Container Service Developer Guide*.
//	 If you have a custom driver that isn't listed, you can fork the Amazon ECS container agent project that's [available on GitHub](https://docs.aws.amazon.com/https://github.com/aws/amazon-ecs
func (o TaskDefinitionLogConfigurationPtrOutput) LogDriver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionLogConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.LogDriver
	}).(pulumi.StringPtrOutput)
}

// The configuration options to send to the log driver. This parameter requires version 1.19 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: “sudo docker version --format '{{.Server.APIVersion}}'“
func (o TaskDefinitionLogConfigurationPtrOutput) Options() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TaskDefinitionLogConfiguration) map[string]string {
		if v == nil {
			return nil
		}
		return v.Options
	}).(pulumi.StringMapOutput)
}

// The secrets to pass to the log configuration. For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the *Amazon Elastic Container Service Developer Guide*.
func (o TaskDefinitionLogConfigurationPtrOutput) SecretOptions() TaskDefinitionSecretArrayOutput {
	return o.ApplyT(func(v *TaskDefinitionLogConfiguration) []TaskDefinitionSecret {
		if v == nil {
			return nil
		}
		return v.SecretOptions
	}).(TaskDefinitionSecretArrayOutput)
}

// The details for a volume mount point that's used in a container definition.
type TaskDefinitionMountPoint struct {
	// The path on the container to mount the host volume at.
	ContainerPath *string `pulumi:"containerPath"`
	// If this value is ``true``, the container has read-only access to the volume. If this value is ``false``, then the container can write to the volume. The default value is ``false``.
	ReadOnly *bool `pulumi:"readOnly"`
	// The name of the volume to mount. Must be a volume name referenced in the ``name`` parameter of task definition ``volume``.
	SourceVolume *string `pulumi:"sourceVolume"`
}

// TaskDefinitionMountPointInput is an input type that accepts TaskDefinitionMountPointArgs and TaskDefinitionMountPointOutput values.
// You can construct a concrete instance of `TaskDefinitionMountPointInput` via:
//
//	TaskDefinitionMountPointArgs{...}
type TaskDefinitionMountPointInput interface {
	pulumi.Input

	ToTaskDefinitionMountPointOutput() TaskDefinitionMountPointOutput
	ToTaskDefinitionMountPointOutputWithContext(context.Context) TaskDefinitionMountPointOutput
}

// The details for a volume mount point that's used in a container definition.
type TaskDefinitionMountPointArgs struct {
	// The path on the container to mount the host volume at.
	ContainerPath pulumi.StringPtrInput `pulumi:"containerPath"`
	// If this value is ``true``, the container has read-only access to the volume. If this value is ``false``, then the container can write to the volume. The default value is ``false``.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// The name of the volume to mount. Must be a volume name referenced in the ``name`` parameter of task definition ``volume``.
	SourceVolume pulumi.StringPtrInput `pulumi:"sourceVolume"`
}

func (TaskDefinitionMountPointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionMountPoint)(nil)).Elem()
}

func (i TaskDefinitionMountPointArgs) ToTaskDefinitionMountPointOutput() TaskDefinitionMountPointOutput {
	return i.ToTaskDefinitionMountPointOutputWithContext(context.Background())
}

func (i TaskDefinitionMountPointArgs) ToTaskDefinitionMountPointOutputWithContext(ctx context.Context) TaskDefinitionMountPointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionMountPointOutput)
}

// TaskDefinitionMountPointArrayInput is an input type that accepts TaskDefinitionMountPointArray and TaskDefinitionMountPointArrayOutput values.
// You can construct a concrete instance of `TaskDefinitionMountPointArrayInput` via:
//
//	TaskDefinitionMountPointArray{ TaskDefinitionMountPointArgs{...} }
type TaskDefinitionMountPointArrayInput interface {
	pulumi.Input

	ToTaskDefinitionMountPointArrayOutput() TaskDefinitionMountPointArrayOutput
	ToTaskDefinitionMountPointArrayOutputWithContext(context.Context) TaskDefinitionMountPointArrayOutput
}

type TaskDefinitionMountPointArray []TaskDefinitionMountPointInput

func (TaskDefinitionMountPointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionMountPoint)(nil)).Elem()
}

func (i TaskDefinitionMountPointArray) ToTaskDefinitionMountPointArrayOutput() TaskDefinitionMountPointArrayOutput {
	return i.ToTaskDefinitionMountPointArrayOutputWithContext(context.Background())
}

func (i TaskDefinitionMountPointArray) ToTaskDefinitionMountPointArrayOutputWithContext(ctx context.Context) TaskDefinitionMountPointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionMountPointArrayOutput)
}

// The details for a volume mount point that's used in a container definition.
type TaskDefinitionMountPointOutput struct{ *pulumi.OutputState }

func (TaskDefinitionMountPointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionMountPoint)(nil)).Elem()
}

func (o TaskDefinitionMountPointOutput) ToTaskDefinitionMountPointOutput() TaskDefinitionMountPointOutput {
	return o
}

func (o TaskDefinitionMountPointOutput) ToTaskDefinitionMountPointOutputWithContext(ctx context.Context) TaskDefinitionMountPointOutput {
	return o
}

// The path on the container to mount the host volume at.
func (o TaskDefinitionMountPointOutput) ContainerPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionMountPoint) *string { return v.ContainerPath }).(pulumi.StringPtrOutput)
}

// If this value is “true“, the container has read-only access to the volume. If this value is “false“, then the container can write to the volume. The default value is “false“.
func (o TaskDefinitionMountPointOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TaskDefinitionMountPoint) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// The name of the volume to mount. Must be a volume name referenced in the “name“ parameter of task definition “volume“.
func (o TaskDefinitionMountPointOutput) SourceVolume() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionMountPoint) *string { return v.SourceVolume }).(pulumi.StringPtrOutput)
}

type TaskDefinitionMountPointArrayOutput struct{ *pulumi.OutputState }

func (TaskDefinitionMountPointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionMountPoint)(nil)).Elem()
}

func (o TaskDefinitionMountPointArrayOutput) ToTaskDefinitionMountPointArrayOutput() TaskDefinitionMountPointArrayOutput {
	return o
}

func (o TaskDefinitionMountPointArrayOutput) ToTaskDefinitionMountPointArrayOutputWithContext(ctx context.Context) TaskDefinitionMountPointArrayOutput {
	return o
}

func (o TaskDefinitionMountPointArrayOutput) Index(i pulumi.IntInput) TaskDefinitionMountPointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskDefinitionMountPoint {
		return vs[0].([]TaskDefinitionMountPoint)[vs[1].(int)]
	}).(TaskDefinitionMountPointOutput)
}

// The constraint on task placement in the task definition. For more information, see [Task placement constraints](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html) in the *Amazon Elastic Container Service Developer Guide*.
//
//	Task placement constraints aren't supported for tasks run on FARGATElong.
type TaskDefinitionPlacementConstraint struct {
	// A cluster query language expression to apply to the constraint. For more information, see [Cluster query language](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html) in the *Amazon Elastic Container Service Developer Guide*.
	Expression *string `pulumi:"expression"`
	// The type of constraint. The ``MemberOf`` constraint restricts selection to be from a group of valid candidates.
	Type string `pulumi:"type"`
}

// TaskDefinitionPlacementConstraintInput is an input type that accepts TaskDefinitionPlacementConstraintArgs and TaskDefinitionPlacementConstraintOutput values.
// You can construct a concrete instance of `TaskDefinitionPlacementConstraintInput` via:
//
//	TaskDefinitionPlacementConstraintArgs{...}
type TaskDefinitionPlacementConstraintInput interface {
	pulumi.Input

	ToTaskDefinitionPlacementConstraintOutput() TaskDefinitionPlacementConstraintOutput
	ToTaskDefinitionPlacementConstraintOutputWithContext(context.Context) TaskDefinitionPlacementConstraintOutput
}

// The constraint on task placement in the task definition. For more information, see [Task placement constraints](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html) in the *Amazon Elastic Container Service Developer Guide*.
//
//	Task placement constraints aren't supported for tasks run on FARGATElong.
type TaskDefinitionPlacementConstraintArgs struct {
	// A cluster query language expression to apply to the constraint. For more information, see [Cluster query language](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html) in the *Amazon Elastic Container Service Developer Guide*.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// The type of constraint. The ``MemberOf`` constraint restricts selection to be from a group of valid candidates.
	Type pulumi.StringInput `pulumi:"type"`
}

func (TaskDefinitionPlacementConstraintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionPlacementConstraint)(nil)).Elem()
}

func (i TaskDefinitionPlacementConstraintArgs) ToTaskDefinitionPlacementConstraintOutput() TaskDefinitionPlacementConstraintOutput {
	return i.ToTaskDefinitionPlacementConstraintOutputWithContext(context.Background())
}

func (i TaskDefinitionPlacementConstraintArgs) ToTaskDefinitionPlacementConstraintOutputWithContext(ctx context.Context) TaskDefinitionPlacementConstraintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionPlacementConstraintOutput)
}

// TaskDefinitionPlacementConstraintArrayInput is an input type that accepts TaskDefinitionPlacementConstraintArray and TaskDefinitionPlacementConstraintArrayOutput values.
// You can construct a concrete instance of `TaskDefinitionPlacementConstraintArrayInput` via:
//
//	TaskDefinitionPlacementConstraintArray{ TaskDefinitionPlacementConstraintArgs{...} }
type TaskDefinitionPlacementConstraintArrayInput interface {
	pulumi.Input

	ToTaskDefinitionPlacementConstraintArrayOutput() TaskDefinitionPlacementConstraintArrayOutput
	ToTaskDefinitionPlacementConstraintArrayOutputWithContext(context.Context) TaskDefinitionPlacementConstraintArrayOutput
}

type TaskDefinitionPlacementConstraintArray []TaskDefinitionPlacementConstraintInput

func (TaskDefinitionPlacementConstraintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionPlacementConstraint)(nil)).Elem()
}

func (i TaskDefinitionPlacementConstraintArray) ToTaskDefinitionPlacementConstraintArrayOutput() TaskDefinitionPlacementConstraintArrayOutput {
	return i.ToTaskDefinitionPlacementConstraintArrayOutputWithContext(context.Background())
}

func (i TaskDefinitionPlacementConstraintArray) ToTaskDefinitionPlacementConstraintArrayOutputWithContext(ctx context.Context) TaskDefinitionPlacementConstraintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionPlacementConstraintArrayOutput)
}

// The constraint on task placement in the task definition. For more information, see [Task placement constraints](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html) in the *Amazon Elastic Container Service Developer Guide*.
//
//	Task placement constraints aren't supported for tasks run on FARGATElong.
type TaskDefinitionPlacementConstraintOutput struct{ *pulumi.OutputState }

func (TaskDefinitionPlacementConstraintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionPlacementConstraint)(nil)).Elem()
}

func (o TaskDefinitionPlacementConstraintOutput) ToTaskDefinitionPlacementConstraintOutput() TaskDefinitionPlacementConstraintOutput {
	return o
}

func (o TaskDefinitionPlacementConstraintOutput) ToTaskDefinitionPlacementConstraintOutputWithContext(ctx context.Context) TaskDefinitionPlacementConstraintOutput {
	return o
}

// A cluster query language expression to apply to the constraint. For more information, see [Cluster query language](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html) in the *Amazon Elastic Container Service Developer Guide*.
func (o TaskDefinitionPlacementConstraintOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionPlacementConstraint) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// The type of constraint. The “MemberOf“ constraint restricts selection to be from a group of valid candidates.
func (o TaskDefinitionPlacementConstraintOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TaskDefinitionPlacementConstraint) string { return v.Type }).(pulumi.StringOutput)
}

type TaskDefinitionPlacementConstraintArrayOutput struct{ *pulumi.OutputState }

func (TaskDefinitionPlacementConstraintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionPlacementConstraint)(nil)).Elem()
}

func (o TaskDefinitionPlacementConstraintArrayOutput) ToTaskDefinitionPlacementConstraintArrayOutput() TaskDefinitionPlacementConstraintArrayOutput {
	return o
}

func (o TaskDefinitionPlacementConstraintArrayOutput) ToTaskDefinitionPlacementConstraintArrayOutputWithContext(ctx context.Context) TaskDefinitionPlacementConstraintArrayOutput {
	return o
}

func (o TaskDefinitionPlacementConstraintArrayOutput) Index(i pulumi.IntInput) TaskDefinitionPlacementConstraintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskDefinitionPlacementConstraint {
		return vs[0].([]TaskDefinitionPlacementConstraint)[vs[1].(int)]
	}).(TaskDefinitionPlacementConstraintOutput)
}

// The “PortMapping“ property specifies a port mapping. Port mappings allow containers to access ports on the host container instance to send or receive traffic. Port mappings are specified as part of the container definition.
//
//	If you are using containers in a task with the ``awsvpc`` or ``host`` network mode, exposed ports should be specified using ``containerPort``. The ``hostPort`` can be left blank or it must be the same value as the ``containerPort``.
//	After a task reaches the ``RUNNING`` status, manual and automatic host and container port assignments are visible in the ``networkBindings`` section of [DescribeTasks](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DescribeTasks.html) API responses.
type TaskDefinitionPortMapping struct {
	// The application protocol that's used for the port mapping. This parameter only applies to Service Connect. We recommend that you set this parameter to be consistent with the protocol that your application uses. If you set this parameter, Amazon ECS adds protocol-specific connection handling to the Service Connect proxy. If you set this parameter, Amazon ECS adds protocol-specific telemetry in the Amazon ECS console and CloudWatch.
	//  If you don't set a value for this parameter, then TCP is used. However, Amazon ECS doesn't add protocol-specific telemetry for TCP.
	//   ``appProtocol`` is immutable in a Service Connect service. Updating this field requires a service deletion and redeployment.
	//  Tasks that run in a namespace can use short names to connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS se
	AppProtocol *TaskDefinitionPortMappingAppProtocol `pulumi:"appProtocol"`
	// The port number on the container that's bound to the user-specified or automatically assigned host port.
	//  If you use containers in a task with the ``awsvpc`` or ``host`` network mode, specify the exposed ports using ``containerPort``.
	//  If you use containers in a task with the ``bridge`` network mode and you specify a container port and not a host port, your container automatically receives a host port in the ephemeral port range. For more information, see ``hostPort``. Port mappings that are automatically assigned in this way do not count toward the 100 reserved ports limit of a container instance.
	ContainerPort *int `pulumi:"containerPort"`
	// The port number range on the container that's bound to the dynamically mapped host port range.
	//  The following rules apply when you specify a ``containerPortRange``:
	//   +  You must use either the ``bridge`` network mode or the ``awsvpc`` network mode.
	//   +  This parameter is available for both the EC2 and FARGATElong launch types.
	//   +  This parameter is available for both the Linux and Windows operating systems.
	//   +  The container instance must have at least version 1.67.0 of the container agent and at least version 1.67.0-1 of the ``ecs-init`` package
	//   +  You can specify a maximum of 100 port ranges per container.
	//   +  You do not specify a ``hostPortRange``. The value of the ``hostPortRange`` is set as follows:
	//   +  For containers in a task with the ``awsvpc`` network mode, the ``hostPortRange`` is set to the same value as the ``containerPortRange``. This is a static mapping strategy.
	//   +  For containers in a task with the ``bridge`` network mode, the Amazon ECS agent finds open host
	ContainerPortRange *string `pulumi:"containerPortRange"`
	// The port number on the container instance to reserve for your container.
	//  If you specify a ``containerPortRange``, leave this field empty and the value of the ``hostPort`` is set as follows:
	//   +  For containers in a task with the ``awsvpc`` network mode, the ``hostPort`` is set to the same value as the ``containerPort``. This is a static mapping strategy.
	//   +  For containers in a task with the ``bridge`` network mode, the Amazon ECS agent finds open ports on the host and automatically binds them to the container ports. This is a dynamic mapping strategy.
	//
	//  If you use containers in a task with the ``awsvpc`` or ``host`` network mode, the ``hostPort`` can either be left blank or set to the same value as the ``containerPort``.
	//  If you use containers in a task with the ``bridge`` network mode, you can specify a non-reserved host port for your container port mapping, or you can omit the ``hostPort`` (or set it to ``0``) while specifying a ``containerPort`` and your container automatically
	HostPort *int `pulumi:"hostPort"`
	// The name that's used for the port mapping. This parameter only applies to Service Connect. This parameter is the name that you use in the ``serviceConnectConfiguration`` of a service. The name can include up to 64 characters. The characters can include lowercase letters, numbers, underscores (_), and hyphens (-). The name can't start with a hyphen.
	//  For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic Container Service Developer Guide*.
	Name *string `pulumi:"name"`
	// The protocol used for the port mapping. Valid values are ``tcp`` and ``udp``. The default is ``tcp``. ``protocol`` is immutable in a Service Connect service. Updating this field requires a service deletion and redeployment.
	Protocol *string `pulumi:"protocol"`
}

// TaskDefinitionPortMappingInput is an input type that accepts TaskDefinitionPortMappingArgs and TaskDefinitionPortMappingOutput values.
// You can construct a concrete instance of `TaskDefinitionPortMappingInput` via:
//
//	TaskDefinitionPortMappingArgs{...}
type TaskDefinitionPortMappingInput interface {
	pulumi.Input

	ToTaskDefinitionPortMappingOutput() TaskDefinitionPortMappingOutput
	ToTaskDefinitionPortMappingOutputWithContext(context.Context) TaskDefinitionPortMappingOutput
}

// The “PortMapping“ property specifies a port mapping. Port mappings allow containers to access ports on the host container instance to send or receive traffic. Port mappings are specified as part of the container definition.
//
//	If you are using containers in a task with the ``awsvpc`` or ``host`` network mode, exposed ports should be specified using ``containerPort``. The ``hostPort`` can be left blank or it must be the same value as the ``containerPort``.
//	After a task reaches the ``RUNNING`` status, manual and automatic host and container port assignments are visible in the ``networkBindings`` section of [DescribeTasks](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DescribeTasks.html) API responses.
type TaskDefinitionPortMappingArgs struct {
	// The application protocol that's used for the port mapping. This parameter only applies to Service Connect. We recommend that you set this parameter to be consistent with the protocol that your application uses. If you set this parameter, Amazon ECS adds protocol-specific connection handling to the Service Connect proxy. If you set this parameter, Amazon ECS adds protocol-specific telemetry in the Amazon ECS console and CloudWatch.
	//  If you don't set a value for this parameter, then TCP is used. However, Amazon ECS doesn't add protocol-specific telemetry for TCP.
	//   ``appProtocol`` is immutable in a Service Connect service. Updating this field requires a service deletion and redeployment.
	//  Tasks that run in a namespace can use short names to connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS se
	AppProtocol TaskDefinitionPortMappingAppProtocolPtrInput `pulumi:"appProtocol"`
	// The port number on the container that's bound to the user-specified or automatically assigned host port.
	//  If you use containers in a task with the ``awsvpc`` or ``host`` network mode, specify the exposed ports using ``containerPort``.
	//  If you use containers in a task with the ``bridge`` network mode and you specify a container port and not a host port, your container automatically receives a host port in the ephemeral port range. For more information, see ``hostPort``. Port mappings that are automatically assigned in this way do not count toward the 100 reserved ports limit of a container instance.
	ContainerPort pulumi.IntPtrInput `pulumi:"containerPort"`
	// The port number range on the container that's bound to the dynamically mapped host port range.
	//  The following rules apply when you specify a ``containerPortRange``:
	//   +  You must use either the ``bridge`` network mode or the ``awsvpc`` network mode.
	//   +  This parameter is available for both the EC2 and FARGATElong launch types.
	//   +  This parameter is available for both the Linux and Windows operating systems.
	//   +  The container instance must have at least version 1.67.0 of the container agent and at least version 1.67.0-1 of the ``ecs-init`` package
	//   +  You can specify a maximum of 100 port ranges per container.
	//   +  You do not specify a ``hostPortRange``. The value of the ``hostPortRange`` is set as follows:
	//   +  For containers in a task with the ``awsvpc`` network mode, the ``hostPortRange`` is set to the same value as the ``containerPortRange``. This is a static mapping strategy.
	//   +  For containers in a task with the ``bridge`` network mode, the Amazon ECS agent finds open host
	ContainerPortRange pulumi.StringPtrInput `pulumi:"containerPortRange"`
	// The port number on the container instance to reserve for your container.
	//  If you specify a ``containerPortRange``, leave this field empty and the value of the ``hostPort`` is set as follows:
	//   +  For containers in a task with the ``awsvpc`` network mode, the ``hostPort`` is set to the same value as the ``containerPort``. This is a static mapping strategy.
	//   +  For containers in a task with the ``bridge`` network mode, the Amazon ECS agent finds open ports on the host and automatically binds them to the container ports. This is a dynamic mapping strategy.
	//
	//  If you use containers in a task with the ``awsvpc`` or ``host`` network mode, the ``hostPort`` can either be left blank or set to the same value as the ``containerPort``.
	//  If you use containers in a task with the ``bridge`` network mode, you can specify a non-reserved host port for your container port mapping, or you can omit the ``hostPort`` (or set it to ``0``) while specifying a ``containerPort`` and your container automatically
	HostPort pulumi.IntPtrInput `pulumi:"hostPort"`
	// The name that's used for the port mapping. This parameter only applies to Service Connect. This parameter is the name that you use in the ``serviceConnectConfiguration`` of a service. The name can include up to 64 characters. The characters can include lowercase letters, numbers, underscores (_), and hyphens (-). The name can't start with a hyphen.
	//  For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic Container Service Developer Guide*.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The protocol used for the port mapping. Valid values are ``tcp`` and ``udp``. The default is ``tcp``. ``protocol`` is immutable in a Service Connect service. Updating this field requires a service deletion and redeployment.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (TaskDefinitionPortMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionPortMapping)(nil)).Elem()
}

func (i TaskDefinitionPortMappingArgs) ToTaskDefinitionPortMappingOutput() TaskDefinitionPortMappingOutput {
	return i.ToTaskDefinitionPortMappingOutputWithContext(context.Background())
}

func (i TaskDefinitionPortMappingArgs) ToTaskDefinitionPortMappingOutputWithContext(ctx context.Context) TaskDefinitionPortMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionPortMappingOutput)
}

// TaskDefinitionPortMappingArrayInput is an input type that accepts TaskDefinitionPortMappingArray and TaskDefinitionPortMappingArrayOutput values.
// You can construct a concrete instance of `TaskDefinitionPortMappingArrayInput` via:
//
//	TaskDefinitionPortMappingArray{ TaskDefinitionPortMappingArgs{...} }
type TaskDefinitionPortMappingArrayInput interface {
	pulumi.Input

	ToTaskDefinitionPortMappingArrayOutput() TaskDefinitionPortMappingArrayOutput
	ToTaskDefinitionPortMappingArrayOutputWithContext(context.Context) TaskDefinitionPortMappingArrayOutput
}

type TaskDefinitionPortMappingArray []TaskDefinitionPortMappingInput

func (TaskDefinitionPortMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionPortMapping)(nil)).Elem()
}

func (i TaskDefinitionPortMappingArray) ToTaskDefinitionPortMappingArrayOutput() TaskDefinitionPortMappingArrayOutput {
	return i.ToTaskDefinitionPortMappingArrayOutputWithContext(context.Background())
}

func (i TaskDefinitionPortMappingArray) ToTaskDefinitionPortMappingArrayOutputWithContext(ctx context.Context) TaskDefinitionPortMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionPortMappingArrayOutput)
}

// The “PortMapping“ property specifies a port mapping. Port mappings allow containers to access ports on the host container instance to send or receive traffic. Port mappings are specified as part of the container definition.
//
//	If you are using containers in a task with the ``awsvpc`` or ``host`` network mode, exposed ports should be specified using ``containerPort``. The ``hostPort`` can be left blank or it must be the same value as the ``containerPort``.
//	After a task reaches the ``RUNNING`` status, manual and automatic host and container port assignments are visible in the ``networkBindings`` section of [DescribeTasks](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DescribeTasks.html) API responses.
type TaskDefinitionPortMappingOutput struct{ *pulumi.OutputState }

func (TaskDefinitionPortMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionPortMapping)(nil)).Elem()
}

func (o TaskDefinitionPortMappingOutput) ToTaskDefinitionPortMappingOutput() TaskDefinitionPortMappingOutput {
	return o
}

func (o TaskDefinitionPortMappingOutput) ToTaskDefinitionPortMappingOutputWithContext(ctx context.Context) TaskDefinitionPortMappingOutput {
	return o
}

// The application protocol that's used for the port mapping. This parameter only applies to Service Connect. We recommend that you set this parameter to be consistent with the protocol that your application uses. If you set this parameter, Amazon ECS adds protocol-specific connection handling to the Service Connect proxy. If you set this parameter, Amazon ECS adds protocol-specific telemetry in the Amazon ECS console and CloudWatch.
//
//	If you don't set a value for this parameter, then TCP is used. However, Amazon ECS doesn't add protocol-specific telemetry for TCP.
//	 ``appProtocol`` is immutable in a Service Connect service. Updating this field requires a service deletion and redeployment.
//	Tasks that run in a namespace can use short names to connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS se
func (o TaskDefinitionPortMappingOutput) AppProtocol() TaskDefinitionPortMappingAppProtocolPtrOutput {
	return o.ApplyT(func(v TaskDefinitionPortMapping) *TaskDefinitionPortMappingAppProtocol { return v.AppProtocol }).(TaskDefinitionPortMappingAppProtocolPtrOutput)
}

// The port number on the container that's bound to the user-specified or automatically assigned host port.
//
//	If you use containers in a task with the ``awsvpc`` or ``host`` network mode, specify the exposed ports using ``containerPort``.
//	If you use containers in a task with the ``bridge`` network mode and you specify a container port and not a host port, your container automatically receives a host port in the ephemeral port range. For more information, see ``hostPort``. Port mappings that are automatically assigned in this way do not count toward the 100 reserved ports limit of a container instance.
func (o TaskDefinitionPortMappingOutput) ContainerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskDefinitionPortMapping) *int { return v.ContainerPort }).(pulumi.IntPtrOutput)
}

// The port number range on the container that's bound to the dynamically mapped host port range.
//
//	The following rules apply when you specify a ``containerPortRange``:
//	 +  You must use either the ``bridge`` network mode or the ``awsvpc`` network mode.
//	 +  This parameter is available for both the EC2 and FARGATElong launch types.
//	 +  This parameter is available for both the Linux and Windows operating systems.
//	 +  The container instance must have at least version 1.67.0 of the container agent and at least version 1.67.0-1 of the ``ecs-init`` package
//	 +  You can specify a maximum of 100 port ranges per container.
//	 +  You do not specify a ``hostPortRange``. The value of the ``hostPortRange`` is set as follows:
//	 +  For containers in a task with the ``awsvpc`` network mode, the ``hostPortRange`` is set to the same value as the ``containerPortRange``. This is a static mapping strategy.
//	 +  For containers in a task with the ``bridge`` network mode, the Amazon ECS agent finds open host
func (o TaskDefinitionPortMappingOutput) ContainerPortRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionPortMapping) *string { return v.ContainerPortRange }).(pulumi.StringPtrOutput)
}

// The port number on the container instance to reserve for your container.
//
//	If you specify a ``containerPortRange``, leave this field empty and the value of the ``hostPort`` is set as follows:
//	 +  For containers in a task with the ``awsvpc`` network mode, the ``hostPort`` is set to the same value as the ``containerPort``. This is a static mapping strategy.
//	 +  For containers in a task with the ``bridge`` network mode, the Amazon ECS agent finds open ports on the host and automatically binds them to the container ports. This is a dynamic mapping strategy.
//
//	If you use containers in a task with the ``awsvpc`` or ``host`` network mode, the ``hostPort`` can either be left blank or set to the same value as the ``containerPort``.
//	If you use containers in a task with the ``bridge`` network mode, you can specify a non-reserved host port for your container port mapping, or you can omit the ``hostPort`` (or set it to ``0``) while specifying a ``containerPort`` and your container automatically
func (o TaskDefinitionPortMappingOutput) HostPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskDefinitionPortMapping) *int { return v.HostPort }).(pulumi.IntPtrOutput)
}

// The name that's used for the port mapping. This parameter only applies to Service Connect. This parameter is the name that you use in the “serviceConnectConfiguration“ of a service. The name can include up to 64 characters. The characters can include lowercase letters, numbers, underscores (_), and hyphens (-). The name can't start with a hyphen.
//
//	For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic Container Service Developer Guide*.
func (o TaskDefinitionPortMappingOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionPortMapping) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The protocol used for the port mapping. Valid values are “tcp“ and “udp“. The default is “tcp“. “protocol“ is immutable in a Service Connect service. Updating this field requires a service deletion and redeployment.
func (o TaskDefinitionPortMappingOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionPortMapping) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type TaskDefinitionPortMappingArrayOutput struct{ *pulumi.OutputState }

func (TaskDefinitionPortMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionPortMapping)(nil)).Elem()
}

func (o TaskDefinitionPortMappingArrayOutput) ToTaskDefinitionPortMappingArrayOutput() TaskDefinitionPortMappingArrayOutput {
	return o
}

func (o TaskDefinitionPortMappingArrayOutput) ToTaskDefinitionPortMappingArrayOutputWithContext(ctx context.Context) TaskDefinitionPortMappingArrayOutput {
	return o
}

func (o TaskDefinitionPortMappingArrayOutput) Index(i pulumi.IntInput) TaskDefinitionPortMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskDefinitionPortMapping {
		return vs[0].([]TaskDefinitionPortMapping)[vs[1].(int)]
	}).(TaskDefinitionPortMappingOutput)
}

// The configuration details for the App Mesh proxy.
//
//	For tasks that use the EC2 launch type, the container instances require at least version 1.26.0 of the container agent and at least version 1.26.0-1 of the ``ecs-init`` package to use a proxy configuration. If your container instances are launched from the Amazon ECS optimized AMI version ``20190301`` or later, then they contain the required versions of the container agent and ``ecs-init``. For more information, see [Amazon ECS-optimized Linux AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html)
type TaskDefinitionProxyConfiguration struct {
	// The name of the container that will serve as the App Mesh proxy.
	ContainerName string `pulumi:"containerName"`
	// The set of network configuration parameters to provide the Container Network Interface (CNI) plugin, specified as key-value pairs.
	//   +   ``IgnoredUID`` - (Required) The user ID (UID) of the proxy container as defined by the ``user`` parameter in a container definition. This is used to ensure the proxy ignores its own traffic. If ``IgnoredGID`` is specified, this field can be empty.
	//   +   ``IgnoredGID`` - (Required) The group ID (GID) of the proxy container as defined by the ``user`` parameter in a container definition. This is used to ensure the proxy ignores its own traffic. If ``IgnoredUID`` is specified, this field can be empty.
	//   +   ``AppPorts`` - (Required) The list of ports that the application uses. Network traffic to these ports is forwarded to the ``ProxyIngressPort`` and ``ProxyEgressPort``.
	//   +   ``ProxyIngressPort`` - (Required) Specifies the port that incoming traffic to the ``AppPorts`` is directed to.
	//   +   ``ProxyEgressPort`` - (Required) Specifies the port that outgoi
	ProxyConfigurationProperties []TaskDefinitionKeyValuePair `pulumi:"proxyConfigurationProperties"`
	// The proxy type. The only supported value is ``APPMESH``.
	Type *string `pulumi:"type"`
}

// TaskDefinitionProxyConfigurationInput is an input type that accepts TaskDefinitionProxyConfigurationArgs and TaskDefinitionProxyConfigurationOutput values.
// You can construct a concrete instance of `TaskDefinitionProxyConfigurationInput` via:
//
//	TaskDefinitionProxyConfigurationArgs{...}
type TaskDefinitionProxyConfigurationInput interface {
	pulumi.Input

	ToTaskDefinitionProxyConfigurationOutput() TaskDefinitionProxyConfigurationOutput
	ToTaskDefinitionProxyConfigurationOutputWithContext(context.Context) TaskDefinitionProxyConfigurationOutput
}

// The configuration details for the App Mesh proxy.
//
//	For tasks that use the EC2 launch type, the container instances require at least version 1.26.0 of the container agent and at least version 1.26.0-1 of the ``ecs-init`` package to use a proxy configuration. If your container instances are launched from the Amazon ECS optimized AMI version ``20190301`` or later, then they contain the required versions of the container agent and ``ecs-init``. For more information, see [Amazon ECS-optimized Linux AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html)
type TaskDefinitionProxyConfigurationArgs struct {
	// The name of the container that will serve as the App Mesh proxy.
	ContainerName pulumi.StringInput `pulumi:"containerName"`
	// The set of network configuration parameters to provide the Container Network Interface (CNI) plugin, specified as key-value pairs.
	//   +   ``IgnoredUID`` - (Required) The user ID (UID) of the proxy container as defined by the ``user`` parameter in a container definition. This is used to ensure the proxy ignores its own traffic. If ``IgnoredGID`` is specified, this field can be empty.
	//   +   ``IgnoredGID`` - (Required) The group ID (GID) of the proxy container as defined by the ``user`` parameter in a container definition. This is used to ensure the proxy ignores its own traffic. If ``IgnoredUID`` is specified, this field can be empty.
	//   +   ``AppPorts`` - (Required) The list of ports that the application uses. Network traffic to these ports is forwarded to the ``ProxyIngressPort`` and ``ProxyEgressPort``.
	//   +   ``ProxyIngressPort`` - (Required) Specifies the port that incoming traffic to the ``AppPorts`` is directed to.
	//   +   ``ProxyEgressPort`` - (Required) Specifies the port that outgoi
	ProxyConfigurationProperties TaskDefinitionKeyValuePairArrayInput `pulumi:"proxyConfigurationProperties"`
	// The proxy type. The only supported value is ``APPMESH``.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (TaskDefinitionProxyConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionProxyConfiguration)(nil)).Elem()
}

func (i TaskDefinitionProxyConfigurationArgs) ToTaskDefinitionProxyConfigurationOutput() TaskDefinitionProxyConfigurationOutput {
	return i.ToTaskDefinitionProxyConfigurationOutputWithContext(context.Background())
}

func (i TaskDefinitionProxyConfigurationArgs) ToTaskDefinitionProxyConfigurationOutputWithContext(ctx context.Context) TaskDefinitionProxyConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionProxyConfigurationOutput)
}

func (i TaskDefinitionProxyConfigurationArgs) ToTaskDefinitionProxyConfigurationPtrOutput() TaskDefinitionProxyConfigurationPtrOutput {
	return i.ToTaskDefinitionProxyConfigurationPtrOutputWithContext(context.Background())
}

func (i TaskDefinitionProxyConfigurationArgs) ToTaskDefinitionProxyConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionProxyConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionProxyConfigurationOutput).ToTaskDefinitionProxyConfigurationPtrOutputWithContext(ctx)
}

// TaskDefinitionProxyConfigurationPtrInput is an input type that accepts TaskDefinitionProxyConfigurationArgs, TaskDefinitionProxyConfigurationPtr and TaskDefinitionProxyConfigurationPtrOutput values.
// You can construct a concrete instance of `TaskDefinitionProxyConfigurationPtrInput` via:
//
//	        TaskDefinitionProxyConfigurationArgs{...}
//
//	or:
//
//	        nil
type TaskDefinitionProxyConfigurationPtrInput interface {
	pulumi.Input

	ToTaskDefinitionProxyConfigurationPtrOutput() TaskDefinitionProxyConfigurationPtrOutput
	ToTaskDefinitionProxyConfigurationPtrOutputWithContext(context.Context) TaskDefinitionProxyConfigurationPtrOutput
}

type taskDefinitionProxyConfigurationPtrType TaskDefinitionProxyConfigurationArgs

func TaskDefinitionProxyConfigurationPtr(v *TaskDefinitionProxyConfigurationArgs) TaskDefinitionProxyConfigurationPtrInput {
	return (*taskDefinitionProxyConfigurationPtrType)(v)
}

func (*taskDefinitionProxyConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionProxyConfiguration)(nil)).Elem()
}

func (i *taskDefinitionProxyConfigurationPtrType) ToTaskDefinitionProxyConfigurationPtrOutput() TaskDefinitionProxyConfigurationPtrOutput {
	return i.ToTaskDefinitionProxyConfigurationPtrOutputWithContext(context.Background())
}

func (i *taskDefinitionProxyConfigurationPtrType) ToTaskDefinitionProxyConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionProxyConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionProxyConfigurationPtrOutput)
}

// The configuration details for the App Mesh proxy.
//
//	For tasks that use the EC2 launch type, the container instances require at least version 1.26.0 of the container agent and at least version 1.26.0-1 of the ``ecs-init`` package to use a proxy configuration. If your container instances are launched from the Amazon ECS optimized AMI version ``20190301`` or later, then they contain the required versions of the container agent and ``ecs-init``. For more information, see [Amazon ECS-optimized Linux AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html)
type TaskDefinitionProxyConfigurationOutput struct{ *pulumi.OutputState }

func (TaskDefinitionProxyConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionProxyConfiguration)(nil)).Elem()
}

func (o TaskDefinitionProxyConfigurationOutput) ToTaskDefinitionProxyConfigurationOutput() TaskDefinitionProxyConfigurationOutput {
	return o
}

func (o TaskDefinitionProxyConfigurationOutput) ToTaskDefinitionProxyConfigurationOutputWithContext(ctx context.Context) TaskDefinitionProxyConfigurationOutput {
	return o
}

func (o TaskDefinitionProxyConfigurationOutput) ToTaskDefinitionProxyConfigurationPtrOutput() TaskDefinitionProxyConfigurationPtrOutput {
	return o.ToTaskDefinitionProxyConfigurationPtrOutputWithContext(context.Background())
}

func (o TaskDefinitionProxyConfigurationOutput) ToTaskDefinitionProxyConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionProxyConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskDefinitionProxyConfiguration) *TaskDefinitionProxyConfiguration {
		return &v
	}).(TaskDefinitionProxyConfigurationPtrOutput)
}

// The name of the container that will serve as the App Mesh proxy.
func (o TaskDefinitionProxyConfigurationOutput) ContainerName() pulumi.StringOutput {
	return o.ApplyT(func(v TaskDefinitionProxyConfiguration) string { return v.ContainerName }).(pulumi.StringOutput)
}

// The set of network configuration parameters to provide the Container Network Interface (CNI) plugin, specified as key-value pairs.
//   - “IgnoredUID“ - (Required) The user ID (UID) of the proxy container as defined by the “user“ parameter in a container definition. This is used to ensure the proxy ignores its own traffic. If “IgnoredGID“ is specified, this field can be empty.
//   - “IgnoredGID“ - (Required) The group ID (GID) of the proxy container as defined by the “user“ parameter in a container definition. This is used to ensure the proxy ignores its own traffic. If “IgnoredUID“ is specified, this field can be empty.
//   - “AppPorts“ - (Required) The list of ports that the application uses. Network traffic to these ports is forwarded to the “ProxyIngressPort“ and “ProxyEgressPort“.
//   - “ProxyIngressPort“ - (Required) Specifies the port that incoming traffic to the “AppPorts“ is directed to.
//   - “ProxyEgressPort“ - (Required) Specifies the port that outgoi
func (o TaskDefinitionProxyConfigurationOutput) ProxyConfigurationProperties() TaskDefinitionKeyValuePairArrayOutput {
	return o.ApplyT(func(v TaskDefinitionProxyConfiguration) []TaskDefinitionKeyValuePair {
		return v.ProxyConfigurationProperties
	}).(TaskDefinitionKeyValuePairArrayOutput)
}

// The proxy type. The only supported value is “APPMESH“.
func (o TaskDefinitionProxyConfigurationOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionProxyConfiguration) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type TaskDefinitionProxyConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TaskDefinitionProxyConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionProxyConfiguration)(nil)).Elem()
}

func (o TaskDefinitionProxyConfigurationPtrOutput) ToTaskDefinitionProxyConfigurationPtrOutput() TaskDefinitionProxyConfigurationPtrOutput {
	return o
}

func (o TaskDefinitionProxyConfigurationPtrOutput) ToTaskDefinitionProxyConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionProxyConfigurationPtrOutput {
	return o
}

func (o TaskDefinitionProxyConfigurationPtrOutput) Elem() TaskDefinitionProxyConfigurationOutput {
	return o.ApplyT(func(v *TaskDefinitionProxyConfiguration) TaskDefinitionProxyConfiguration {
		if v != nil {
			return *v
		}
		var ret TaskDefinitionProxyConfiguration
		return ret
	}).(TaskDefinitionProxyConfigurationOutput)
}

// The name of the container that will serve as the App Mesh proxy.
func (o TaskDefinitionProxyConfigurationPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionProxyConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// The set of network configuration parameters to provide the Container Network Interface (CNI) plugin, specified as key-value pairs.
//   - “IgnoredUID“ - (Required) The user ID (UID) of the proxy container as defined by the “user“ parameter in a container definition. This is used to ensure the proxy ignores its own traffic. If “IgnoredGID“ is specified, this field can be empty.
//   - “IgnoredGID“ - (Required) The group ID (GID) of the proxy container as defined by the “user“ parameter in a container definition. This is used to ensure the proxy ignores its own traffic. If “IgnoredUID“ is specified, this field can be empty.
//   - “AppPorts“ - (Required) The list of ports that the application uses. Network traffic to these ports is forwarded to the “ProxyIngressPort“ and “ProxyEgressPort“.
//   - “ProxyIngressPort“ - (Required) Specifies the port that incoming traffic to the “AppPorts“ is directed to.
//   - “ProxyEgressPort“ - (Required) Specifies the port that outgoi
func (o TaskDefinitionProxyConfigurationPtrOutput) ProxyConfigurationProperties() TaskDefinitionKeyValuePairArrayOutput {
	return o.ApplyT(func(v *TaskDefinitionProxyConfiguration) []TaskDefinitionKeyValuePair {
		if v == nil {
			return nil
		}
		return v.ProxyConfigurationProperties
	}).(TaskDefinitionKeyValuePairArrayOutput)
}

// The proxy type. The only supported value is “APPMESH“.
func (o TaskDefinitionProxyConfigurationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionProxyConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The repository credentials for private registry authentication.
type TaskDefinitionRepositoryCredentials struct {
	// The Amazon Resource Name (ARN) of the secret containing the private repository credentials.
	//   When you use the Amazon ECS API, CLI, or AWS SDK, if the secret exists in the same Region as the task that you're launching then you can use either the full ARN or the name of the secret. When you use the AWS Management Console, you must specify the full ARN of the secret.
	CredentialsParameter *string `pulumi:"credentialsParameter"`
}

// TaskDefinitionRepositoryCredentialsInput is an input type that accepts TaskDefinitionRepositoryCredentialsArgs and TaskDefinitionRepositoryCredentialsOutput values.
// You can construct a concrete instance of `TaskDefinitionRepositoryCredentialsInput` via:
//
//	TaskDefinitionRepositoryCredentialsArgs{...}
type TaskDefinitionRepositoryCredentialsInput interface {
	pulumi.Input

	ToTaskDefinitionRepositoryCredentialsOutput() TaskDefinitionRepositoryCredentialsOutput
	ToTaskDefinitionRepositoryCredentialsOutputWithContext(context.Context) TaskDefinitionRepositoryCredentialsOutput
}

// The repository credentials for private registry authentication.
type TaskDefinitionRepositoryCredentialsArgs struct {
	// The Amazon Resource Name (ARN) of the secret containing the private repository credentials.
	//   When you use the Amazon ECS API, CLI, or AWS SDK, if the secret exists in the same Region as the task that you're launching then you can use either the full ARN or the name of the secret. When you use the AWS Management Console, you must specify the full ARN of the secret.
	CredentialsParameter pulumi.StringPtrInput `pulumi:"credentialsParameter"`
}

func (TaskDefinitionRepositoryCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionRepositoryCredentials)(nil)).Elem()
}

func (i TaskDefinitionRepositoryCredentialsArgs) ToTaskDefinitionRepositoryCredentialsOutput() TaskDefinitionRepositoryCredentialsOutput {
	return i.ToTaskDefinitionRepositoryCredentialsOutputWithContext(context.Background())
}

func (i TaskDefinitionRepositoryCredentialsArgs) ToTaskDefinitionRepositoryCredentialsOutputWithContext(ctx context.Context) TaskDefinitionRepositoryCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionRepositoryCredentialsOutput)
}

func (i TaskDefinitionRepositoryCredentialsArgs) ToTaskDefinitionRepositoryCredentialsPtrOutput() TaskDefinitionRepositoryCredentialsPtrOutput {
	return i.ToTaskDefinitionRepositoryCredentialsPtrOutputWithContext(context.Background())
}

func (i TaskDefinitionRepositoryCredentialsArgs) ToTaskDefinitionRepositoryCredentialsPtrOutputWithContext(ctx context.Context) TaskDefinitionRepositoryCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionRepositoryCredentialsOutput).ToTaskDefinitionRepositoryCredentialsPtrOutputWithContext(ctx)
}

// TaskDefinitionRepositoryCredentialsPtrInput is an input type that accepts TaskDefinitionRepositoryCredentialsArgs, TaskDefinitionRepositoryCredentialsPtr and TaskDefinitionRepositoryCredentialsPtrOutput values.
// You can construct a concrete instance of `TaskDefinitionRepositoryCredentialsPtrInput` via:
//
//	        TaskDefinitionRepositoryCredentialsArgs{...}
//
//	or:
//
//	        nil
type TaskDefinitionRepositoryCredentialsPtrInput interface {
	pulumi.Input

	ToTaskDefinitionRepositoryCredentialsPtrOutput() TaskDefinitionRepositoryCredentialsPtrOutput
	ToTaskDefinitionRepositoryCredentialsPtrOutputWithContext(context.Context) TaskDefinitionRepositoryCredentialsPtrOutput
}

type taskDefinitionRepositoryCredentialsPtrType TaskDefinitionRepositoryCredentialsArgs

func TaskDefinitionRepositoryCredentialsPtr(v *TaskDefinitionRepositoryCredentialsArgs) TaskDefinitionRepositoryCredentialsPtrInput {
	return (*taskDefinitionRepositoryCredentialsPtrType)(v)
}

func (*taskDefinitionRepositoryCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionRepositoryCredentials)(nil)).Elem()
}

func (i *taskDefinitionRepositoryCredentialsPtrType) ToTaskDefinitionRepositoryCredentialsPtrOutput() TaskDefinitionRepositoryCredentialsPtrOutput {
	return i.ToTaskDefinitionRepositoryCredentialsPtrOutputWithContext(context.Background())
}

func (i *taskDefinitionRepositoryCredentialsPtrType) ToTaskDefinitionRepositoryCredentialsPtrOutputWithContext(ctx context.Context) TaskDefinitionRepositoryCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionRepositoryCredentialsPtrOutput)
}

// The repository credentials for private registry authentication.
type TaskDefinitionRepositoryCredentialsOutput struct{ *pulumi.OutputState }

func (TaskDefinitionRepositoryCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionRepositoryCredentials)(nil)).Elem()
}

func (o TaskDefinitionRepositoryCredentialsOutput) ToTaskDefinitionRepositoryCredentialsOutput() TaskDefinitionRepositoryCredentialsOutput {
	return o
}

func (o TaskDefinitionRepositoryCredentialsOutput) ToTaskDefinitionRepositoryCredentialsOutputWithContext(ctx context.Context) TaskDefinitionRepositoryCredentialsOutput {
	return o
}

func (o TaskDefinitionRepositoryCredentialsOutput) ToTaskDefinitionRepositoryCredentialsPtrOutput() TaskDefinitionRepositoryCredentialsPtrOutput {
	return o.ToTaskDefinitionRepositoryCredentialsPtrOutputWithContext(context.Background())
}

func (o TaskDefinitionRepositoryCredentialsOutput) ToTaskDefinitionRepositoryCredentialsPtrOutputWithContext(ctx context.Context) TaskDefinitionRepositoryCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskDefinitionRepositoryCredentials) *TaskDefinitionRepositoryCredentials {
		return &v
	}).(TaskDefinitionRepositoryCredentialsPtrOutput)
}

// The Amazon Resource Name (ARN) of the secret containing the private repository credentials.
//
//	When you use the Amazon ECS API, CLI, or AWS SDK, if the secret exists in the same Region as the task that you're launching then you can use either the full ARN or the name of the secret. When you use the AWS Management Console, you must specify the full ARN of the secret.
func (o TaskDefinitionRepositoryCredentialsOutput) CredentialsParameter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionRepositoryCredentials) *string { return v.CredentialsParameter }).(pulumi.StringPtrOutput)
}

type TaskDefinitionRepositoryCredentialsPtrOutput struct{ *pulumi.OutputState }

func (TaskDefinitionRepositoryCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionRepositoryCredentials)(nil)).Elem()
}

func (o TaskDefinitionRepositoryCredentialsPtrOutput) ToTaskDefinitionRepositoryCredentialsPtrOutput() TaskDefinitionRepositoryCredentialsPtrOutput {
	return o
}

func (o TaskDefinitionRepositoryCredentialsPtrOutput) ToTaskDefinitionRepositoryCredentialsPtrOutputWithContext(ctx context.Context) TaskDefinitionRepositoryCredentialsPtrOutput {
	return o
}

func (o TaskDefinitionRepositoryCredentialsPtrOutput) Elem() TaskDefinitionRepositoryCredentialsOutput {
	return o.ApplyT(func(v *TaskDefinitionRepositoryCredentials) TaskDefinitionRepositoryCredentials {
		if v != nil {
			return *v
		}
		var ret TaskDefinitionRepositoryCredentials
		return ret
	}).(TaskDefinitionRepositoryCredentialsOutput)
}

// The Amazon Resource Name (ARN) of the secret containing the private repository credentials.
//
//	When you use the Amazon ECS API, CLI, or AWS SDK, if the secret exists in the same Region as the task that you're launching then you can use either the full ARN or the name of the secret. When you use the AWS Management Console, you must specify the full ARN of the secret.
func (o TaskDefinitionRepositoryCredentialsPtrOutput) CredentialsParameter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionRepositoryCredentials) *string {
		if v == nil {
			return nil
		}
		return v.CredentialsParameter
	}).(pulumi.StringPtrOutput)
}

// The type and amount of a resource to assign to a container. The supported resource types are GPUs and Elastic Inference accelerators. For more information, see [Working with GPUs on Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html) or [Working with Amazon Elastic Inference on Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-inference.html) in the *Amazon Elastic Container Service Developer Guide*
type TaskDefinitionResourceRequirement struct {
	// The type of resource to assign to a container. The supported values are ``GPU`` or ``InferenceAccelerator``.
	Type string `pulumi:"type"`
	// The value for the specified resource type.
	//  If the ``GPU`` type is used, the value is the number of physical ``GPUs`` the Amazon ECS container agent reserves for the container. The number of GPUs that's reserved for all containers in a task can't exceed the number of available GPUs on the container instance that the task is launched on.
	//  If the ``InferenceAccelerator`` type is used, the ``value`` matches the ``deviceName`` for an [InferenceAccelerator](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_InferenceAccelerator.html) specified in a task definition.
	Value string `pulumi:"value"`
}

// TaskDefinitionResourceRequirementInput is an input type that accepts TaskDefinitionResourceRequirementArgs and TaskDefinitionResourceRequirementOutput values.
// You can construct a concrete instance of `TaskDefinitionResourceRequirementInput` via:
//
//	TaskDefinitionResourceRequirementArgs{...}
type TaskDefinitionResourceRequirementInput interface {
	pulumi.Input

	ToTaskDefinitionResourceRequirementOutput() TaskDefinitionResourceRequirementOutput
	ToTaskDefinitionResourceRequirementOutputWithContext(context.Context) TaskDefinitionResourceRequirementOutput
}

// The type and amount of a resource to assign to a container. The supported resource types are GPUs and Elastic Inference accelerators. For more information, see [Working with GPUs on Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html) or [Working with Amazon Elastic Inference on Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-inference.html) in the *Amazon Elastic Container Service Developer Guide*
type TaskDefinitionResourceRequirementArgs struct {
	// The type of resource to assign to a container. The supported values are ``GPU`` or ``InferenceAccelerator``.
	Type pulumi.StringInput `pulumi:"type"`
	// The value for the specified resource type.
	//  If the ``GPU`` type is used, the value is the number of physical ``GPUs`` the Amazon ECS container agent reserves for the container. The number of GPUs that's reserved for all containers in a task can't exceed the number of available GPUs on the container instance that the task is launched on.
	//  If the ``InferenceAccelerator`` type is used, the ``value`` matches the ``deviceName`` for an [InferenceAccelerator](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_InferenceAccelerator.html) specified in a task definition.
	Value pulumi.StringInput `pulumi:"value"`
}

func (TaskDefinitionResourceRequirementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionResourceRequirement)(nil)).Elem()
}

func (i TaskDefinitionResourceRequirementArgs) ToTaskDefinitionResourceRequirementOutput() TaskDefinitionResourceRequirementOutput {
	return i.ToTaskDefinitionResourceRequirementOutputWithContext(context.Background())
}

func (i TaskDefinitionResourceRequirementArgs) ToTaskDefinitionResourceRequirementOutputWithContext(ctx context.Context) TaskDefinitionResourceRequirementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionResourceRequirementOutput)
}

// TaskDefinitionResourceRequirementArrayInput is an input type that accepts TaskDefinitionResourceRequirementArray and TaskDefinitionResourceRequirementArrayOutput values.
// You can construct a concrete instance of `TaskDefinitionResourceRequirementArrayInput` via:
//
//	TaskDefinitionResourceRequirementArray{ TaskDefinitionResourceRequirementArgs{...} }
type TaskDefinitionResourceRequirementArrayInput interface {
	pulumi.Input

	ToTaskDefinitionResourceRequirementArrayOutput() TaskDefinitionResourceRequirementArrayOutput
	ToTaskDefinitionResourceRequirementArrayOutputWithContext(context.Context) TaskDefinitionResourceRequirementArrayOutput
}

type TaskDefinitionResourceRequirementArray []TaskDefinitionResourceRequirementInput

func (TaskDefinitionResourceRequirementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionResourceRequirement)(nil)).Elem()
}

func (i TaskDefinitionResourceRequirementArray) ToTaskDefinitionResourceRequirementArrayOutput() TaskDefinitionResourceRequirementArrayOutput {
	return i.ToTaskDefinitionResourceRequirementArrayOutputWithContext(context.Background())
}

func (i TaskDefinitionResourceRequirementArray) ToTaskDefinitionResourceRequirementArrayOutputWithContext(ctx context.Context) TaskDefinitionResourceRequirementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionResourceRequirementArrayOutput)
}

// The type and amount of a resource to assign to a container. The supported resource types are GPUs and Elastic Inference accelerators. For more information, see [Working with GPUs on Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html) or [Working with Amazon Elastic Inference on Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-inference.html) in the *Amazon Elastic Container Service Developer Guide*
type TaskDefinitionResourceRequirementOutput struct{ *pulumi.OutputState }

func (TaskDefinitionResourceRequirementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionResourceRequirement)(nil)).Elem()
}

func (o TaskDefinitionResourceRequirementOutput) ToTaskDefinitionResourceRequirementOutput() TaskDefinitionResourceRequirementOutput {
	return o
}

func (o TaskDefinitionResourceRequirementOutput) ToTaskDefinitionResourceRequirementOutputWithContext(ctx context.Context) TaskDefinitionResourceRequirementOutput {
	return o
}

// The type of resource to assign to a container. The supported values are “GPU“ or “InferenceAccelerator“.
func (o TaskDefinitionResourceRequirementOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TaskDefinitionResourceRequirement) string { return v.Type }).(pulumi.StringOutput)
}

// The value for the specified resource type.
//
//	If the ``GPU`` type is used, the value is the number of physical ``GPUs`` the Amazon ECS container agent reserves for the container. The number of GPUs that's reserved for all containers in a task can't exceed the number of available GPUs on the container instance that the task is launched on.
//	If the ``InferenceAccelerator`` type is used, the ``value`` matches the ``deviceName`` for an [InferenceAccelerator](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_InferenceAccelerator.html) specified in a task definition.
func (o TaskDefinitionResourceRequirementOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v TaskDefinitionResourceRequirement) string { return v.Value }).(pulumi.StringOutput)
}

type TaskDefinitionResourceRequirementArrayOutput struct{ *pulumi.OutputState }

func (TaskDefinitionResourceRequirementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionResourceRequirement)(nil)).Elem()
}

func (o TaskDefinitionResourceRequirementArrayOutput) ToTaskDefinitionResourceRequirementArrayOutput() TaskDefinitionResourceRequirementArrayOutput {
	return o
}

func (o TaskDefinitionResourceRequirementArrayOutput) ToTaskDefinitionResourceRequirementArrayOutputWithContext(ctx context.Context) TaskDefinitionResourceRequirementArrayOutput {
	return o
}

func (o TaskDefinitionResourceRequirementArrayOutput) Index(i pulumi.IntInput) TaskDefinitionResourceRequirementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskDefinitionResourceRequirement {
		return vs[0].([]TaskDefinitionResourceRequirement)[vs[1].(int)]
	}).(TaskDefinitionResourceRequirementOutput)
}

// Information about the platform for the Amazon ECS service or task.
//
//	For more information about ``RuntimePlatform``, see [RuntimePlatform](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#runtime-platform) in the *Amazon Elastic Container Service Developer Guide*.
type TaskDefinitionRuntimePlatform struct {
	// The CPU architecture.
	//  You can run your Linux tasks on an ARM-based platform by setting the value to ``ARM64``. This option is available for tasks that run on Linux Amazon EC2 instance or Linux containers on Fargate.
	CpuArchitecture *string `pulumi:"cpuArchitecture"`
	// The operating system.
	OperatingSystemFamily *string `pulumi:"operatingSystemFamily"`
}

// TaskDefinitionRuntimePlatformInput is an input type that accepts TaskDefinitionRuntimePlatformArgs and TaskDefinitionRuntimePlatformOutput values.
// You can construct a concrete instance of `TaskDefinitionRuntimePlatformInput` via:
//
//	TaskDefinitionRuntimePlatformArgs{...}
type TaskDefinitionRuntimePlatformInput interface {
	pulumi.Input

	ToTaskDefinitionRuntimePlatformOutput() TaskDefinitionRuntimePlatformOutput
	ToTaskDefinitionRuntimePlatformOutputWithContext(context.Context) TaskDefinitionRuntimePlatformOutput
}

// Information about the platform for the Amazon ECS service or task.
//
//	For more information about ``RuntimePlatform``, see [RuntimePlatform](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#runtime-platform) in the *Amazon Elastic Container Service Developer Guide*.
type TaskDefinitionRuntimePlatformArgs struct {
	// The CPU architecture.
	//  You can run your Linux tasks on an ARM-based platform by setting the value to ``ARM64``. This option is available for tasks that run on Linux Amazon EC2 instance or Linux containers on Fargate.
	CpuArchitecture pulumi.StringPtrInput `pulumi:"cpuArchitecture"`
	// The operating system.
	OperatingSystemFamily pulumi.StringPtrInput `pulumi:"operatingSystemFamily"`
}

func (TaskDefinitionRuntimePlatformArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionRuntimePlatform)(nil)).Elem()
}

func (i TaskDefinitionRuntimePlatformArgs) ToTaskDefinitionRuntimePlatformOutput() TaskDefinitionRuntimePlatformOutput {
	return i.ToTaskDefinitionRuntimePlatformOutputWithContext(context.Background())
}

func (i TaskDefinitionRuntimePlatformArgs) ToTaskDefinitionRuntimePlatformOutputWithContext(ctx context.Context) TaskDefinitionRuntimePlatformOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionRuntimePlatformOutput)
}

func (i TaskDefinitionRuntimePlatformArgs) ToTaskDefinitionRuntimePlatformPtrOutput() TaskDefinitionRuntimePlatformPtrOutput {
	return i.ToTaskDefinitionRuntimePlatformPtrOutputWithContext(context.Background())
}

func (i TaskDefinitionRuntimePlatformArgs) ToTaskDefinitionRuntimePlatformPtrOutputWithContext(ctx context.Context) TaskDefinitionRuntimePlatformPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionRuntimePlatformOutput).ToTaskDefinitionRuntimePlatformPtrOutputWithContext(ctx)
}

// TaskDefinitionRuntimePlatformPtrInput is an input type that accepts TaskDefinitionRuntimePlatformArgs, TaskDefinitionRuntimePlatformPtr and TaskDefinitionRuntimePlatformPtrOutput values.
// You can construct a concrete instance of `TaskDefinitionRuntimePlatformPtrInput` via:
//
//	        TaskDefinitionRuntimePlatformArgs{...}
//
//	or:
//
//	        nil
type TaskDefinitionRuntimePlatformPtrInput interface {
	pulumi.Input

	ToTaskDefinitionRuntimePlatformPtrOutput() TaskDefinitionRuntimePlatformPtrOutput
	ToTaskDefinitionRuntimePlatformPtrOutputWithContext(context.Context) TaskDefinitionRuntimePlatformPtrOutput
}

type taskDefinitionRuntimePlatformPtrType TaskDefinitionRuntimePlatformArgs

func TaskDefinitionRuntimePlatformPtr(v *TaskDefinitionRuntimePlatformArgs) TaskDefinitionRuntimePlatformPtrInput {
	return (*taskDefinitionRuntimePlatformPtrType)(v)
}

func (*taskDefinitionRuntimePlatformPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionRuntimePlatform)(nil)).Elem()
}

func (i *taskDefinitionRuntimePlatformPtrType) ToTaskDefinitionRuntimePlatformPtrOutput() TaskDefinitionRuntimePlatformPtrOutput {
	return i.ToTaskDefinitionRuntimePlatformPtrOutputWithContext(context.Background())
}

func (i *taskDefinitionRuntimePlatformPtrType) ToTaskDefinitionRuntimePlatformPtrOutputWithContext(ctx context.Context) TaskDefinitionRuntimePlatformPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionRuntimePlatformPtrOutput)
}

// Information about the platform for the Amazon ECS service or task.
//
//	For more information about ``RuntimePlatform``, see [RuntimePlatform](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#runtime-platform) in the *Amazon Elastic Container Service Developer Guide*.
type TaskDefinitionRuntimePlatformOutput struct{ *pulumi.OutputState }

func (TaskDefinitionRuntimePlatformOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionRuntimePlatform)(nil)).Elem()
}

func (o TaskDefinitionRuntimePlatformOutput) ToTaskDefinitionRuntimePlatformOutput() TaskDefinitionRuntimePlatformOutput {
	return o
}

func (o TaskDefinitionRuntimePlatformOutput) ToTaskDefinitionRuntimePlatformOutputWithContext(ctx context.Context) TaskDefinitionRuntimePlatformOutput {
	return o
}

func (o TaskDefinitionRuntimePlatformOutput) ToTaskDefinitionRuntimePlatformPtrOutput() TaskDefinitionRuntimePlatformPtrOutput {
	return o.ToTaskDefinitionRuntimePlatformPtrOutputWithContext(context.Background())
}

func (o TaskDefinitionRuntimePlatformOutput) ToTaskDefinitionRuntimePlatformPtrOutputWithContext(ctx context.Context) TaskDefinitionRuntimePlatformPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskDefinitionRuntimePlatform) *TaskDefinitionRuntimePlatform {
		return &v
	}).(TaskDefinitionRuntimePlatformPtrOutput)
}

// The CPU architecture.
//
//	You can run your Linux tasks on an ARM-based platform by setting the value to ``ARM64``. This option is available for tasks that run on Linux Amazon EC2 instance or Linux containers on Fargate.
func (o TaskDefinitionRuntimePlatformOutput) CpuArchitecture() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionRuntimePlatform) *string { return v.CpuArchitecture }).(pulumi.StringPtrOutput)
}

// The operating system.
func (o TaskDefinitionRuntimePlatformOutput) OperatingSystemFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionRuntimePlatform) *string { return v.OperatingSystemFamily }).(pulumi.StringPtrOutput)
}

type TaskDefinitionRuntimePlatformPtrOutput struct{ *pulumi.OutputState }

func (TaskDefinitionRuntimePlatformPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionRuntimePlatform)(nil)).Elem()
}

func (o TaskDefinitionRuntimePlatformPtrOutput) ToTaskDefinitionRuntimePlatformPtrOutput() TaskDefinitionRuntimePlatformPtrOutput {
	return o
}

func (o TaskDefinitionRuntimePlatformPtrOutput) ToTaskDefinitionRuntimePlatformPtrOutputWithContext(ctx context.Context) TaskDefinitionRuntimePlatformPtrOutput {
	return o
}

func (o TaskDefinitionRuntimePlatformPtrOutput) Elem() TaskDefinitionRuntimePlatformOutput {
	return o.ApplyT(func(v *TaskDefinitionRuntimePlatform) TaskDefinitionRuntimePlatform {
		if v != nil {
			return *v
		}
		var ret TaskDefinitionRuntimePlatform
		return ret
	}).(TaskDefinitionRuntimePlatformOutput)
}

// The CPU architecture.
//
//	You can run your Linux tasks on an ARM-based platform by setting the value to ``ARM64``. This option is available for tasks that run on Linux Amazon EC2 instance or Linux containers on Fargate.
func (o TaskDefinitionRuntimePlatformPtrOutput) CpuArchitecture() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionRuntimePlatform) *string {
		if v == nil {
			return nil
		}
		return v.CpuArchitecture
	}).(pulumi.StringPtrOutput)
}

// The operating system.
func (o TaskDefinitionRuntimePlatformPtrOutput) OperatingSystemFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionRuntimePlatform) *string {
		if v == nil {
			return nil
		}
		return v.OperatingSystemFamily
	}).(pulumi.StringPtrOutput)
}

// An object representing the secret to expose to your container. Secrets can be exposed to a container in the following ways:
//
//   - To inject sensitive data into your containers as environment variables, use the “secrets“ container definition parameter.
//
//   - To reference sensitive information in the log configuration of a container, use the “secretOptions“ container definition parameter.
//
//     For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the *Amazon Elastic Container Service Developer Guide*.
type TaskDefinitionSecret struct {
	// The name of the secret.
	Name string `pulumi:"name"`
	// The secret to expose to the container. The supported values are either the full ARN of the ASMlong secret or the full ARN of the parameter in the SSM Parameter Store.
	//  For information about the require IAMlong permissions, see [Required IAM permissions for Amazon ECS secrets](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data-secrets.html#secrets-iam) (for Secrets Manager) or [Required IAM permissions for Amazon ECS secrets](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data-parameters.html) (for Systems Manager Parameter store) in the *Amazon Elastic Container Service Developer Guide*.
	//   If the SSM Parameter Store parameter exists in the same Region as the task you're launching, then you can use either the full ARN or name of the parameter. If the parameter exists in a different Region, then the full ARN must be specified.
	ValueFrom string `pulumi:"valueFrom"`
}

// TaskDefinitionSecretInput is an input type that accepts TaskDefinitionSecretArgs and TaskDefinitionSecretOutput values.
// You can construct a concrete instance of `TaskDefinitionSecretInput` via:
//
//	TaskDefinitionSecretArgs{...}
type TaskDefinitionSecretInput interface {
	pulumi.Input

	ToTaskDefinitionSecretOutput() TaskDefinitionSecretOutput
	ToTaskDefinitionSecretOutputWithContext(context.Context) TaskDefinitionSecretOutput
}

// An object representing the secret to expose to your container. Secrets can be exposed to a container in the following ways:
//
//   - To inject sensitive data into your containers as environment variables, use the “secrets“ container definition parameter.
//
//   - To reference sensitive information in the log configuration of a container, use the “secretOptions“ container definition parameter.
//
//     For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the *Amazon Elastic Container Service Developer Guide*.
type TaskDefinitionSecretArgs struct {
	// The name of the secret.
	Name pulumi.StringInput `pulumi:"name"`
	// The secret to expose to the container. The supported values are either the full ARN of the ASMlong secret or the full ARN of the parameter in the SSM Parameter Store.
	//  For information about the require IAMlong permissions, see [Required IAM permissions for Amazon ECS secrets](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data-secrets.html#secrets-iam) (for Secrets Manager) or [Required IAM permissions for Amazon ECS secrets](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data-parameters.html) (for Systems Manager Parameter store) in the *Amazon Elastic Container Service Developer Guide*.
	//   If the SSM Parameter Store parameter exists in the same Region as the task you're launching, then you can use either the full ARN or name of the parameter. If the parameter exists in a different Region, then the full ARN must be specified.
	ValueFrom pulumi.StringInput `pulumi:"valueFrom"`
}

func (TaskDefinitionSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionSecret)(nil)).Elem()
}

func (i TaskDefinitionSecretArgs) ToTaskDefinitionSecretOutput() TaskDefinitionSecretOutput {
	return i.ToTaskDefinitionSecretOutputWithContext(context.Background())
}

func (i TaskDefinitionSecretArgs) ToTaskDefinitionSecretOutputWithContext(ctx context.Context) TaskDefinitionSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionSecretOutput)
}

// TaskDefinitionSecretArrayInput is an input type that accepts TaskDefinitionSecretArray and TaskDefinitionSecretArrayOutput values.
// You can construct a concrete instance of `TaskDefinitionSecretArrayInput` via:
//
//	TaskDefinitionSecretArray{ TaskDefinitionSecretArgs{...} }
type TaskDefinitionSecretArrayInput interface {
	pulumi.Input

	ToTaskDefinitionSecretArrayOutput() TaskDefinitionSecretArrayOutput
	ToTaskDefinitionSecretArrayOutputWithContext(context.Context) TaskDefinitionSecretArrayOutput
}

type TaskDefinitionSecretArray []TaskDefinitionSecretInput

func (TaskDefinitionSecretArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionSecret)(nil)).Elem()
}

func (i TaskDefinitionSecretArray) ToTaskDefinitionSecretArrayOutput() TaskDefinitionSecretArrayOutput {
	return i.ToTaskDefinitionSecretArrayOutputWithContext(context.Background())
}

func (i TaskDefinitionSecretArray) ToTaskDefinitionSecretArrayOutputWithContext(ctx context.Context) TaskDefinitionSecretArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionSecretArrayOutput)
}

// An object representing the secret to expose to your container. Secrets can be exposed to a container in the following ways:
//
//   - To inject sensitive data into your containers as environment variables, use the “secrets“ container definition parameter.
//
//   - To reference sensitive information in the log configuration of a container, use the “secretOptions“ container definition parameter.
//
//     For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the *Amazon Elastic Container Service Developer Guide*.
type TaskDefinitionSecretOutput struct{ *pulumi.OutputState }

func (TaskDefinitionSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionSecret)(nil)).Elem()
}

func (o TaskDefinitionSecretOutput) ToTaskDefinitionSecretOutput() TaskDefinitionSecretOutput {
	return o
}

func (o TaskDefinitionSecretOutput) ToTaskDefinitionSecretOutputWithContext(ctx context.Context) TaskDefinitionSecretOutput {
	return o
}

// The name of the secret.
func (o TaskDefinitionSecretOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TaskDefinitionSecret) string { return v.Name }).(pulumi.StringOutput)
}

// The secret to expose to the container. The supported values are either the full ARN of the ASMlong secret or the full ARN of the parameter in the SSM Parameter Store.
//
//	For information about the require IAMlong permissions, see [Required IAM permissions for Amazon ECS secrets](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data-secrets.html#secrets-iam) (for Secrets Manager) or [Required IAM permissions for Amazon ECS secrets](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data-parameters.html) (for Systems Manager Parameter store) in the *Amazon Elastic Container Service Developer Guide*.
//	 If the SSM Parameter Store parameter exists in the same Region as the task you're launching, then you can use either the full ARN or name of the parameter. If the parameter exists in a different Region, then the full ARN must be specified.
func (o TaskDefinitionSecretOutput) ValueFrom() pulumi.StringOutput {
	return o.ApplyT(func(v TaskDefinitionSecret) string { return v.ValueFrom }).(pulumi.StringOutput)
}

type TaskDefinitionSecretArrayOutput struct{ *pulumi.OutputState }

func (TaskDefinitionSecretArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionSecret)(nil)).Elem()
}

func (o TaskDefinitionSecretArrayOutput) ToTaskDefinitionSecretArrayOutput() TaskDefinitionSecretArrayOutput {
	return o
}

func (o TaskDefinitionSecretArrayOutput) ToTaskDefinitionSecretArrayOutputWithContext(ctx context.Context) TaskDefinitionSecretArrayOutput {
	return o
}

func (o TaskDefinitionSecretArrayOutput) Index(i pulumi.IntInput) TaskDefinitionSecretOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskDefinitionSecret {
		return vs[0].([]TaskDefinitionSecret)[vs[1].(int)]
	}).(TaskDefinitionSecretOutput)
}

// A list of namespaced kernel parameters to set in the container. This parameter maps to “Sysctls“ in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the “--sysctl“ option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). For example, you can configure “net.ipv4.tcp_keepalive_time“ setting to maintain longer lived connections.
//
//	We don't recommend that you specify network-related ``systemControls`` parameters for multiple containers in a single task that also uses either the ``awsvpc`` or ``host`` network mode. Doing this has the following disadvantages:
//	 +  For tasks that use the ``awsvpc`` network mode including Fargate, if you set ``systemControls`` for any container, it applies to all containers in the task. If you set different ``sy
type TaskDefinitionSystemControl struct {
	// The namespaced kernel parameter to set a ``value`` for.
	Namespace *string `pulumi:"namespace"`
	// The namespaced kernel parameter to set a ``value`` for.
	//  Valid IPC namespace values: ``"kernel.msgmax" | "kernel.msgmnb" | "kernel.msgmni" | "kernel.sem" | "kernel.shmall" | "kernel.shmmax" | "kernel.shmmni" | "kernel.shm_rmid_forced"``, and ``Sysctls`` that start with ``"fs.mqueue.*"``
	//  Valid network namespace values: ``Sysctls`` that start with ``"net.*"``
	//  All of these values are supported by Fargate.
	Value *string `pulumi:"value"`
}

// TaskDefinitionSystemControlInput is an input type that accepts TaskDefinitionSystemControlArgs and TaskDefinitionSystemControlOutput values.
// You can construct a concrete instance of `TaskDefinitionSystemControlInput` via:
//
//	TaskDefinitionSystemControlArgs{...}
type TaskDefinitionSystemControlInput interface {
	pulumi.Input

	ToTaskDefinitionSystemControlOutput() TaskDefinitionSystemControlOutput
	ToTaskDefinitionSystemControlOutputWithContext(context.Context) TaskDefinitionSystemControlOutput
}

// A list of namespaced kernel parameters to set in the container. This parameter maps to “Sysctls“ in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the “--sysctl“ option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). For example, you can configure “net.ipv4.tcp_keepalive_time“ setting to maintain longer lived connections.
//
//	We don't recommend that you specify network-related ``systemControls`` parameters for multiple containers in a single task that also uses either the ``awsvpc`` or ``host`` network mode. Doing this has the following disadvantages:
//	 +  For tasks that use the ``awsvpc`` network mode including Fargate, if you set ``systemControls`` for any container, it applies to all containers in the task. If you set different ``sy
type TaskDefinitionSystemControlArgs struct {
	// The namespaced kernel parameter to set a ``value`` for.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The namespaced kernel parameter to set a ``value`` for.
	//  Valid IPC namespace values: ``"kernel.msgmax" | "kernel.msgmnb" | "kernel.msgmni" | "kernel.sem" | "kernel.shmall" | "kernel.shmmax" | "kernel.shmmni" | "kernel.shm_rmid_forced"``, and ``Sysctls`` that start with ``"fs.mqueue.*"``
	//  Valid network namespace values: ``Sysctls`` that start with ``"net.*"``
	//  All of these values are supported by Fargate.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (TaskDefinitionSystemControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionSystemControl)(nil)).Elem()
}

func (i TaskDefinitionSystemControlArgs) ToTaskDefinitionSystemControlOutput() TaskDefinitionSystemControlOutput {
	return i.ToTaskDefinitionSystemControlOutputWithContext(context.Background())
}

func (i TaskDefinitionSystemControlArgs) ToTaskDefinitionSystemControlOutputWithContext(ctx context.Context) TaskDefinitionSystemControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionSystemControlOutput)
}

// TaskDefinitionSystemControlArrayInput is an input type that accepts TaskDefinitionSystemControlArray and TaskDefinitionSystemControlArrayOutput values.
// You can construct a concrete instance of `TaskDefinitionSystemControlArrayInput` via:
//
//	TaskDefinitionSystemControlArray{ TaskDefinitionSystemControlArgs{...} }
type TaskDefinitionSystemControlArrayInput interface {
	pulumi.Input

	ToTaskDefinitionSystemControlArrayOutput() TaskDefinitionSystemControlArrayOutput
	ToTaskDefinitionSystemControlArrayOutputWithContext(context.Context) TaskDefinitionSystemControlArrayOutput
}

type TaskDefinitionSystemControlArray []TaskDefinitionSystemControlInput

func (TaskDefinitionSystemControlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionSystemControl)(nil)).Elem()
}

func (i TaskDefinitionSystemControlArray) ToTaskDefinitionSystemControlArrayOutput() TaskDefinitionSystemControlArrayOutput {
	return i.ToTaskDefinitionSystemControlArrayOutputWithContext(context.Background())
}

func (i TaskDefinitionSystemControlArray) ToTaskDefinitionSystemControlArrayOutputWithContext(ctx context.Context) TaskDefinitionSystemControlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionSystemControlArrayOutput)
}

// A list of namespaced kernel parameters to set in the container. This parameter maps to “Sysctls“ in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the “--sysctl“ option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). For example, you can configure “net.ipv4.tcp_keepalive_time“ setting to maintain longer lived connections.
//
//	We don't recommend that you specify network-related ``systemControls`` parameters for multiple containers in a single task that also uses either the ``awsvpc`` or ``host`` network mode. Doing this has the following disadvantages:
//	 +  For tasks that use the ``awsvpc`` network mode including Fargate, if you set ``systemControls`` for any container, it applies to all containers in the task. If you set different ``sy
type TaskDefinitionSystemControlOutput struct{ *pulumi.OutputState }

func (TaskDefinitionSystemControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionSystemControl)(nil)).Elem()
}

func (o TaskDefinitionSystemControlOutput) ToTaskDefinitionSystemControlOutput() TaskDefinitionSystemControlOutput {
	return o
}

func (o TaskDefinitionSystemControlOutput) ToTaskDefinitionSystemControlOutputWithContext(ctx context.Context) TaskDefinitionSystemControlOutput {
	return o
}

// The namespaced kernel parameter to set a “value“ for.
func (o TaskDefinitionSystemControlOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionSystemControl) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The namespaced kernel parameter to set a “value“ for.
//
//	Valid IPC namespace values: ``"kernel.msgmax" | "kernel.msgmnb" | "kernel.msgmni" | "kernel.sem" | "kernel.shmall" | "kernel.shmmax" | "kernel.shmmni" | "kernel.shm_rmid_forced"``, and ``Sysctls`` that start with ``"fs.mqueue.*"``
//	Valid network namespace values: ``Sysctls`` that start with ``"net.*"``
//	All of these values are supported by Fargate.
func (o TaskDefinitionSystemControlOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionSystemControl) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type TaskDefinitionSystemControlArrayOutput struct{ *pulumi.OutputState }

func (TaskDefinitionSystemControlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionSystemControl)(nil)).Elem()
}

func (o TaskDefinitionSystemControlArrayOutput) ToTaskDefinitionSystemControlArrayOutput() TaskDefinitionSystemControlArrayOutput {
	return o
}

func (o TaskDefinitionSystemControlArrayOutput) ToTaskDefinitionSystemControlArrayOutputWithContext(ctx context.Context) TaskDefinitionSystemControlArrayOutput {
	return o
}

func (o TaskDefinitionSystemControlArrayOutput) Index(i pulumi.IntInput) TaskDefinitionSystemControlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskDefinitionSystemControl {
		return vs[0].([]TaskDefinitionSystemControl)[vs[1].(int)]
	}).(TaskDefinitionSystemControlOutput)
}

// The metadata that you apply to a resource to help you categorize and organize them. Each tag consists of a key and an optional value. You define them.
//
//	The following basic restrictions apply to tags:
//	 +  Maximum number of tags per resource - 50
//	 +  For each resource, each tag key must be unique, and each tag key can have only one value.
//	 +  Maximum key length - 128 Unicode characters in UTF-8
//	 +  Maximum value length - 256 Unicode characters in UTF-8
//	 +  If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
//	 +  Tag keys and values are case-sensitive.
//	 +  Do not use ``aws:``, ``AWS:``, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix
type TaskDefinitionTag struct {
	// One part of a key-value pair that make up a tag. A ``key`` is a general label that acts like a category for more specific tag values.
	Key *string `pulumi:"key"`
	// The optional part of a key-value pair that make up a tag. A ``value`` acts as a descriptor within a tag category (key).
	Value *string `pulumi:"value"`
}

// The container path, mount options, and size of the tmpfs mount.
type TaskDefinitionTmpfs struct {
	// The absolute file path where the tmpfs volume is to be mounted.
	ContainerPath *string `pulumi:"containerPath"`
	// The list of tmpfs volume mount options.
	//  Valid values: ``"defaults" | "ro" | "rw" | "suid" | "nosuid" | "dev" | "nodev" | "exec" | "noexec" | "sync" | "async" | "dirsync" | "remount" | "mand" | "nomand" | "atime" | "noatime" | "diratime" | "nodiratime" | "bind" | "rbind" | "unbindable" | "runbindable" | "private" | "rprivate" | "shared" | "rshared" | "slave" | "rslave" | "relatime" | "norelatime" | "strictatime" | "nostrictatime" | "mode" | "uid" | "gid" | "nr_inodes" | "nr_blocks" | "mpol"``
	MountOptions []string `pulumi:"mountOptions"`
	// The maximum size (in MiB) of the tmpfs volume.
	Size int `pulumi:"size"`
}

// TaskDefinitionTmpfsInput is an input type that accepts TaskDefinitionTmpfsArgs and TaskDefinitionTmpfsOutput values.
// You can construct a concrete instance of `TaskDefinitionTmpfsInput` via:
//
//	TaskDefinitionTmpfsArgs{...}
type TaskDefinitionTmpfsInput interface {
	pulumi.Input

	ToTaskDefinitionTmpfsOutput() TaskDefinitionTmpfsOutput
	ToTaskDefinitionTmpfsOutputWithContext(context.Context) TaskDefinitionTmpfsOutput
}

// The container path, mount options, and size of the tmpfs mount.
type TaskDefinitionTmpfsArgs struct {
	// The absolute file path where the tmpfs volume is to be mounted.
	ContainerPath pulumi.StringPtrInput `pulumi:"containerPath"`
	// The list of tmpfs volume mount options.
	//  Valid values: ``"defaults" | "ro" | "rw" | "suid" | "nosuid" | "dev" | "nodev" | "exec" | "noexec" | "sync" | "async" | "dirsync" | "remount" | "mand" | "nomand" | "atime" | "noatime" | "diratime" | "nodiratime" | "bind" | "rbind" | "unbindable" | "runbindable" | "private" | "rprivate" | "shared" | "rshared" | "slave" | "rslave" | "relatime" | "norelatime" | "strictatime" | "nostrictatime" | "mode" | "uid" | "gid" | "nr_inodes" | "nr_blocks" | "mpol"``
	MountOptions pulumi.StringArrayInput `pulumi:"mountOptions"`
	// The maximum size (in MiB) of the tmpfs volume.
	Size pulumi.IntInput `pulumi:"size"`
}

func (TaskDefinitionTmpfsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionTmpfs)(nil)).Elem()
}

func (i TaskDefinitionTmpfsArgs) ToTaskDefinitionTmpfsOutput() TaskDefinitionTmpfsOutput {
	return i.ToTaskDefinitionTmpfsOutputWithContext(context.Background())
}

func (i TaskDefinitionTmpfsArgs) ToTaskDefinitionTmpfsOutputWithContext(ctx context.Context) TaskDefinitionTmpfsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionTmpfsOutput)
}

// TaskDefinitionTmpfsArrayInput is an input type that accepts TaskDefinitionTmpfsArray and TaskDefinitionTmpfsArrayOutput values.
// You can construct a concrete instance of `TaskDefinitionTmpfsArrayInput` via:
//
//	TaskDefinitionTmpfsArray{ TaskDefinitionTmpfsArgs{...} }
type TaskDefinitionTmpfsArrayInput interface {
	pulumi.Input

	ToTaskDefinitionTmpfsArrayOutput() TaskDefinitionTmpfsArrayOutput
	ToTaskDefinitionTmpfsArrayOutputWithContext(context.Context) TaskDefinitionTmpfsArrayOutput
}

type TaskDefinitionTmpfsArray []TaskDefinitionTmpfsInput

func (TaskDefinitionTmpfsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionTmpfs)(nil)).Elem()
}

func (i TaskDefinitionTmpfsArray) ToTaskDefinitionTmpfsArrayOutput() TaskDefinitionTmpfsArrayOutput {
	return i.ToTaskDefinitionTmpfsArrayOutputWithContext(context.Background())
}

func (i TaskDefinitionTmpfsArray) ToTaskDefinitionTmpfsArrayOutputWithContext(ctx context.Context) TaskDefinitionTmpfsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionTmpfsArrayOutput)
}

// The container path, mount options, and size of the tmpfs mount.
type TaskDefinitionTmpfsOutput struct{ *pulumi.OutputState }

func (TaskDefinitionTmpfsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionTmpfs)(nil)).Elem()
}

func (o TaskDefinitionTmpfsOutput) ToTaskDefinitionTmpfsOutput() TaskDefinitionTmpfsOutput {
	return o
}

func (o TaskDefinitionTmpfsOutput) ToTaskDefinitionTmpfsOutputWithContext(ctx context.Context) TaskDefinitionTmpfsOutput {
	return o
}

// The absolute file path where the tmpfs volume is to be mounted.
func (o TaskDefinitionTmpfsOutput) ContainerPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionTmpfs) *string { return v.ContainerPath }).(pulumi.StringPtrOutput)
}

// The list of tmpfs volume mount options.
//
//	Valid values: ``"defaults" | "ro" | "rw" | "suid" | "nosuid" | "dev" | "nodev" | "exec" | "noexec" | "sync" | "async" | "dirsync" | "remount" | "mand" | "nomand" | "atime" | "noatime" | "diratime" | "nodiratime" | "bind" | "rbind" | "unbindable" | "runbindable" | "private" | "rprivate" | "shared" | "rshared" | "slave" | "rslave" | "relatime" | "norelatime" | "strictatime" | "nostrictatime" | "mode" | "uid" | "gid" | "nr_inodes" | "nr_blocks" | "mpol"``
func (o TaskDefinitionTmpfsOutput) MountOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TaskDefinitionTmpfs) []string { return v.MountOptions }).(pulumi.StringArrayOutput)
}

// The maximum size (in MiB) of the tmpfs volume.
func (o TaskDefinitionTmpfsOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v TaskDefinitionTmpfs) int { return v.Size }).(pulumi.IntOutput)
}

type TaskDefinitionTmpfsArrayOutput struct{ *pulumi.OutputState }

func (TaskDefinitionTmpfsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionTmpfs)(nil)).Elem()
}

func (o TaskDefinitionTmpfsArrayOutput) ToTaskDefinitionTmpfsArrayOutput() TaskDefinitionTmpfsArrayOutput {
	return o
}

func (o TaskDefinitionTmpfsArrayOutput) ToTaskDefinitionTmpfsArrayOutputWithContext(ctx context.Context) TaskDefinitionTmpfsArrayOutput {
	return o
}

func (o TaskDefinitionTmpfsArrayOutput) Index(i pulumi.IntInput) TaskDefinitionTmpfsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskDefinitionTmpfs {
		return vs[0].([]TaskDefinitionTmpfs)[vs[1].(int)]
	}).(TaskDefinitionTmpfsOutput)
}

// The “ulimit“ settings to pass to the container.
//
//	Amazon ECS tasks hosted on FARGATElong use the default resource limit values set by the operating system with the exception of the ``nofile`` resource limit parameter which FARGATElong overrides. The ``nofile`` resource limit sets a restriction on the number of open files that a container can use. The default ``nofile`` soft limit is ``1024`` and the default hard limit is ``65535``.
//	You can specify the ``ulimit`` settings for a container in a task definition.
type TaskDefinitionUlimit struct {
	// The hard limit for the ``ulimit`` type.
	HardLimit int `pulumi:"hardLimit"`
	// The ``type`` of the ``ulimit``.
	Name string `pulumi:"name"`
	// The soft limit for the ``ulimit`` type.
	SoftLimit int `pulumi:"softLimit"`
}

// TaskDefinitionUlimitInput is an input type that accepts TaskDefinitionUlimitArgs and TaskDefinitionUlimitOutput values.
// You can construct a concrete instance of `TaskDefinitionUlimitInput` via:
//
//	TaskDefinitionUlimitArgs{...}
type TaskDefinitionUlimitInput interface {
	pulumi.Input

	ToTaskDefinitionUlimitOutput() TaskDefinitionUlimitOutput
	ToTaskDefinitionUlimitOutputWithContext(context.Context) TaskDefinitionUlimitOutput
}

// The “ulimit“ settings to pass to the container.
//
//	Amazon ECS tasks hosted on FARGATElong use the default resource limit values set by the operating system with the exception of the ``nofile`` resource limit parameter which FARGATElong overrides. The ``nofile`` resource limit sets a restriction on the number of open files that a container can use. The default ``nofile`` soft limit is ``1024`` and the default hard limit is ``65535``.
//	You can specify the ``ulimit`` settings for a container in a task definition.
type TaskDefinitionUlimitArgs struct {
	// The hard limit for the ``ulimit`` type.
	HardLimit pulumi.IntInput `pulumi:"hardLimit"`
	// The ``type`` of the ``ulimit``.
	Name pulumi.StringInput `pulumi:"name"`
	// The soft limit for the ``ulimit`` type.
	SoftLimit pulumi.IntInput `pulumi:"softLimit"`
}

func (TaskDefinitionUlimitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionUlimit)(nil)).Elem()
}

func (i TaskDefinitionUlimitArgs) ToTaskDefinitionUlimitOutput() TaskDefinitionUlimitOutput {
	return i.ToTaskDefinitionUlimitOutputWithContext(context.Background())
}

func (i TaskDefinitionUlimitArgs) ToTaskDefinitionUlimitOutputWithContext(ctx context.Context) TaskDefinitionUlimitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionUlimitOutput)
}

// TaskDefinitionUlimitArrayInput is an input type that accepts TaskDefinitionUlimitArray and TaskDefinitionUlimitArrayOutput values.
// You can construct a concrete instance of `TaskDefinitionUlimitArrayInput` via:
//
//	TaskDefinitionUlimitArray{ TaskDefinitionUlimitArgs{...} }
type TaskDefinitionUlimitArrayInput interface {
	pulumi.Input

	ToTaskDefinitionUlimitArrayOutput() TaskDefinitionUlimitArrayOutput
	ToTaskDefinitionUlimitArrayOutputWithContext(context.Context) TaskDefinitionUlimitArrayOutput
}

type TaskDefinitionUlimitArray []TaskDefinitionUlimitInput

func (TaskDefinitionUlimitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionUlimit)(nil)).Elem()
}

func (i TaskDefinitionUlimitArray) ToTaskDefinitionUlimitArrayOutput() TaskDefinitionUlimitArrayOutput {
	return i.ToTaskDefinitionUlimitArrayOutputWithContext(context.Background())
}

func (i TaskDefinitionUlimitArray) ToTaskDefinitionUlimitArrayOutputWithContext(ctx context.Context) TaskDefinitionUlimitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionUlimitArrayOutput)
}

// The “ulimit“ settings to pass to the container.
//
//	Amazon ECS tasks hosted on FARGATElong use the default resource limit values set by the operating system with the exception of the ``nofile`` resource limit parameter which FARGATElong overrides. The ``nofile`` resource limit sets a restriction on the number of open files that a container can use. The default ``nofile`` soft limit is ``1024`` and the default hard limit is ``65535``.
//	You can specify the ``ulimit`` settings for a container in a task definition.
type TaskDefinitionUlimitOutput struct{ *pulumi.OutputState }

func (TaskDefinitionUlimitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionUlimit)(nil)).Elem()
}

func (o TaskDefinitionUlimitOutput) ToTaskDefinitionUlimitOutput() TaskDefinitionUlimitOutput {
	return o
}

func (o TaskDefinitionUlimitOutput) ToTaskDefinitionUlimitOutputWithContext(ctx context.Context) TaskDefinitionUlimitOutput {
	return o
}

// The hard limit for the “ulimit“ type.
func (o TaskDefinitionUlimitOutput) HardLimit() pulumi.IntOutput {
	return o.ApplyT(func(v TaskDefinitionUlimit) int { return v.HardLimit }).(pulumi.IntOutput)
}

// The “type“ of the “ulimit“.
func (o TaskDefinitionUlimitOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TaskDefinitionUlimit) string { return v.Name }).(pulumi.StringOutput)
}

// The soft limit for the “ulimit“ type.
func (o TaskDefinitionUlimitOutput) SoftLimit() pulumi.IntOutput {
	return o.ApplyT(func(v TaskDefinitionUlimit) int { return v.SoftLimit }).(pulumi.IntOutput)
}

type TaskDefinitionUlimitArrayOutput struct{ *pulumi.OutputState }

func (TaskDefinitionUlimitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionUlimit)(nil)).Elem()
}

func (o TaskDefinitionUlimitArrayOutput) ToTaskDefinitionUlimitArrayOutput() TaskDefinitionUlimitArrayOutput {
	return o
}

func (o TaskDefinitionUlimitArrayOutput) ToTaskDefinitionUlimitArrayOutputWithContext(ctx context.Context) TaskDefinitionUlimitArrayOutput {
	return o
}

func (o TaskDefinitionUlimitArrayOutput) Index(i pulumi.IntInput) TaskDefinitionUlimitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskDefinitionUlimit {
		return vs[0].([]TaskDefinitionUlimit)[vs[1].(int)]
	}).(TaskDefinitionUlimitOutput)
}

// The data volume configuration for tasks launched using this task definition. Specifying a volume configuration in a task definition is optional. The volume configuration may contain multiple volumes but only one volume configured at launch is supported. Each volume defined in the volume configuration may only specify a “name“ and one of either “configuredAtLaunch“, “dockerVolumeConfiguration“, “efsVolumeConfiguration“, “fsxWindowsFileServerVolumeConfiguration“, or “host“. If an empty volume configuration is specified, by default Amazon ECS uses a host volume. For more information, see [Using data volumes in tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_data_volumes.html).
type TaskDefinitionVolume struct {
	// Indicates whether the volume should be configured at launch time. This is used to create Amazon EBS volumes for standalone tasks or tasks created as part of a service. Each task definition revision may only have one volume configured at launch in the volume configuration.
	//  To configure a volume at launch time, use this task definition revision and specify a ``volumeConfigurations`` object when calling the ``CreateService``, ``UpdateService``, ``RunTask`` or ``StartTask`` APIs.
	ConfiguredAtLaunch *bool `pulumi:"configuredAtLaunch"`
	// This parameter is specified when you use Docker volumes.
	//  Windows containers only support the use of the ``local`` driver. To use bind mounts, specify the ``host`` parameter instead.
	//   Docker volumes aren't supported by tasks run on FARGATElong.
	DockerVolumeConfiguration *TaskDefinitionDockerVolumeConfiguration `pulumi:"dockerVolumeConfiguration"`
	// This parameter is specified when you use an Amazon Elastic File System file system for task storage.
	EfsVolumeConfiguration *TaskDefinitionEfsVolumeConfiguration `pulumi:"efsVolumeConfiguration"`
	// This parameter is specified when you use bind mount host volumes. The contents of the ``host`` parameter determine whether your bind mount host volume persists on the host container instance and where it's stored. If the ``host`` parameter is empty, then the Docker daemon assigns a host path for your data volume. However, the data isn't guaranteed to persist after the containers that are associated with it stop running.
	//  Windows containers can mount whole directories on the same drive as ``$env:ProgramData``. Windows containers can't mount directories on a different drive, and mount point can't be across drives. For example, you can mount ``C:\my\path:C:\my\path`` and ``D:\:D:\``, but not ``D:\my\path:C:\my\path`` or ``D:\:C:\my\path``.
	Host *TaskDefinitionHostVolumeProperties `pulumi:"host"`
	// The name of the volume. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed.
	//  When using a volume configured at launch, the ``name`` is required and must also be specified as the volume name in the ``ServiceVolumeConfiguration`` or ``TaskVolumeConfiguration`` parameter when creating your service or standalone task.
	//  For all other types of volumes, this name is referenced in the ``sourceVolume`` parameter of the ``mountPoints`` object in the container definition.
	//  When a volume is using the ``efsVolumeConfiguration``, the name is required.
	Name *string `pulumi:"name"`
}

// TaskDefinitionVolumeInput is an input type that accepts TaskDefinitionVolumeArgs and TaskDefinitionVolumeOutput values.
// You can construct a concrete instance of `TaskDefinitionVolumeInput` via:
//
//	TaskDefinitionVolumeArgs{...}
type TaskDefinitionVolumeInput interface {
	pulumi.Input

	ToTaskDefinitionVolumeOutput() TaskDefinitionVolumeOutput
	ToTaskDefinitionVolumeOutputWithContext(context.Context) TaskDefinitionVolumeOutput
}

// The data volume configuration for tasks launched using this task definition. Specifying a volume configuration in a task definition is optional. The volume configuration may contain multiple volumes but only one volume configured at launch is supported. Each volume defined in the volume configuration may only specify a “name“ and one of either “configuredAtLaunch“, “dockerVolumeConfiguration“, “efsVolumeConfiguration“, “fsxWindowsFileServerVolumeConfiguration“, or “host“. If an empty volume configuration is specified, by default Amazon ECS uses a host volume. For more information, see [Using data volumes in tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_data_volumes.html).
type TaskDefinitionVolumeArgs struct {
	// Indicates whether the volume should be configured at launch time. This is used to create Amazon EBS volumes for standalone tasks or tasks created as part of a service. Each task definition revision may only have one volume configured at launch in the volume configuration.
	//  To configure a volume at launch time, use this task definition revision and specify a ``volumeConfigurations`` object when calling the ``CreateService``, ``UpdateService``, ``RunTask`` or ``StartTask`` APIs.
	ConfiguredAtLaunch pulumi.BoolPtrInput `pulumi:"configuredAtLaunch"`
	// This parameter is specified when you use Docker volumes.
	//  Windows containers only support the use of the ``local`` driver. To use bind mounts, specify the ``host`` parameter instead.
	//   Docker volumes aren't supported by tasks run on FARGATElong.
	DockerVolumeConfiguration TaskDefinitionDockerVolumeConfigurationPtrInput `pulumi:"dockerVolumeConfiguration"`
	// This parameter is specified when you use an Amazon Elastic File System file system for task storage.
	EfsVolumeConfiguration TaskDefinitionEfsVolumeConfigurationPtrInput `pulumi:"efsVolumeConfiguration"`
	// This parameter is specified when you use bind mount host volumes. The contents of the ``host`` parameter determine whether your bind mount host volume persists on the host container instance and where it's stored. If the ``host`` parameter is empty, then the Docker daemon assigns a host path for your data volume. However, the data isn't guaranteed to persist after the containers that are associated with it stop running.
	//  Windows containers can mount whole directories on the same drive as ``$env:ProgramData``. Windows containers can't mount directories on a different drive, and mount point can't be across drives. For example, you can mount ``C:\my\path:C:\my\path`` and ``D:\:D:\``, but not ``D:\my\path:C:\my\path`` or ``D:\:C:\my\path``.
	Host TaskDefinitionHostVolumePropertiesPtrInput `pulumi:"host"`
	// The name of the volume. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed.
	//  When using a volume configured at launch, the ``name`` is required and must also be specified as the volume name in the ``ServiceVolumeConfiguration`` or ``TaskVolumeConfiguration`` parameter when creating your service or standalone task.
	//  For all other types of volumes, this name is referenced in the ``sourceVolume`` parameter of the ``mountPoints`` object in the container definition.
	//  When a volume is using the ``efsVolumeConfiguration``, the name is required.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (TaskDefinitionVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionVolume)(nil)).Elem()
}

func (i TaskDefinitionVolumeArgs) ToTaskDefinitionVolumeOutput() TaskDefinitionVolumeOutput {
	return i.ToTaskDefinitionVolumeOutputWithContext(context.Background())
}

func (i TaskDefinitionVolumeArgs) ToTaskDefinitionVolumeOutputWithContext(ctx context.Context) TaskDefinitionVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionVolumeOutput)
}

// TaskDefinitionVolumeArrayInput is an input type that accepts TaskDefinitionVolumeArray and TaskDefinitionVolumeArrayOutput values.
// You can construct a concrete instance of `TaskDefinitionVolumeArrayInput` via:
//
//	TaskDefinitionVolumeArray{ TaskDefinitionVolumeArgs{...} }
type TaskDefinitionVolumeArrayInput interface {
	pulumi.Input

	ToTaskDefinitionVolumeArrayOutput() TaskDefinitionVolumeArrayOutput
	ToTaskDefinitionVolumeArrayOutputWithContext(context.Context) TaskDefinitionVolumeArrayOutput
}

type TaskDefinitionVolumeArray []TaskDefinitionVolumeInput

func (TaskDefinitionVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionVolume)(nil)).Elem()
}

func (i TaskDefinitionVolumeArray) ToTaskDefinitionVolumeArrayOutput() TaskDefinitionVolumeArrayOutput {
	return i.ToTaskDefinitionVolumeArrayOutputWithContext(context.Background())
}

func (i TaskDefinitionVolumeArray) ToTaskDefinitionVolumeArrayOutputWithContext(ctx context.Context) TaskDefinitionVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionVolumeArrayOutput)
}

// The data volume configuration for tasks launched using this task definition. Specifying a volume configuration in a task definition is optional. The volume configuration may contain multiple volumes but only one volume configured at launch is supported. Each volume defined in the volume configuration may only specify a “name“ and one of either “configuredAtLaunch“, “dockerVolumeConfiguration“, “efsVolumeConfiguration“, “fsxWindowsFileServerVolumeConfiguration“, or “host“. If an empty volume configuration is specified, by default Amazon ECS uses a host volume. For more information, see [Using data volumes in tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_data_volumes.html).
type TaskDefinitionVolumeOutput struct{ *pulumi.OutputState }

func (TaskDefinitionVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionVolume)(nil)).Elem()
}

func (o TaskDefinitionVolumeOutput) ToTaskDefinitionVolumeOutput() TaskDefinitionVolumeOutput {
	return o
}

func (o TaskDefinitionVolumeOutput) ToTaskDefinitionVolumeOutputWithContext(ctx context.Context) TaskDefinitionVolumeOutput {
	return o
}

// Indicates whether the volume should be configured at launch time. This is used to create Amazon EBS volumes for standalone tasks or tasks created as part of a service. Each task definition revision may only have one volume configured at launch in the volume configuration.
//
//	To configure a volume at launch time, use this task definition revision and specify a ``volumeConfigurations`` object when calling the ``CreateService``, ``UpdateService``, ``RunTask`` or ``StartTask`` APIs.
func (o TaskDefinitionVolumeOutput) ConfiguredAtLaunch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TaskDefinitionVolume) *bool { return v.ConfiguredAtLaunch }).(pulumi.BoolPtrOutput)
}

// This parameter is specified when you use Docker volumes.
//
//	Windows containers only support the use of the ``local`` driver. To use bind mounts, specify the ``host`` parameter instead.
//	 Docker volumes aren't supported by tasks run on FARGATElong.
func (o TaskDefinitionVolumeOutput) DockerVolumeConfiguration() TaskDefinitionDockerVolumeConfigurationPtrOutput {
	return o.ApplyT(func(v TaskDefinitionVolume) *TaskDefinitionDockerVolumeConfiguration {
		return v.DockerVolumeConfiguration
	}).(TaskDefinitionDockerVolumeConfigurationPtrOutput)
}

// This parameter is specified when you use an Amazon Elastic File System file system for task storage.
func (o TaskDefinitionVolumeOutput) EfsVolumeConfiguration() TaskDefinitionEfsVolumeConfigurationPtrOutput {
	return o.ApplyT(func(v TaskDefinitionVolume) *TaskDefinitionEfsVolumeConfiguration { return v.EfsVolumeConfiguration }).(TaskDefinitionEfsVolumeConfigurationPtrOutput)
}

// This parameter is specified when you use bind mount host volumes. The contents of the “host“ parameter determine whether your bind mount host volume persists on the host container instance and where it's stored. If the “host“ parameter is empty, then the Docker daemon assigns a host path for your data volume. However, the data isn't guaranteed to persist after the containers that are associated with it stop running.
//
//	Windows containers can mount whole directories on the same drive as ``$env:ProgramData``. Windows containers can't mount directories on a different drive, and mount point can't be across drives. For example, you can mount ``C:\my\path:C:\my\path`` and ``D:\:D:\``, but not ``D:\my\path:C:\my\path`` or ``D:\:C:\my\path``.
func (o TaskDefinitionVolumeOutput) Host() TaskDefinitionHostVolumePropertiesPtrOutput {
	return o.ApplyT(func(v TaskDefinitionVolume) *TaskDefinitionHostVolumeProperties { return v.Host }).(TaskDefinitionHostVolumePropertiesPtrOutput)
}

// The name of the volume. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed.
//
//	When using a volume configured at launch, the ``name`` is required and must also be specified as the volume name in the ``ServiceVolumeConfiguration`` or ``TaskVolumeConfiguration`` parameter when creating your service or standalone task.
//	For all other types of volumes, this name is referenced in the ``sourceVolume`` parameter of the ``mountPoints`` object in the container definition.
//	When a volume is using the ``efsVolumeConfiguration``, the name is required.
func (o TaskDefinitionVolumeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionVolume) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type TaskDefinitionVolumeArrayOutput struct{ *pulumi.OutputState }

func (TaskDefinitionVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionVolume)(nil)).Elem()
}

func (o TaskDefinitionVolumeArrayOutput) ToTaskDefinitionVolumeArrayOutput() TaskDefinitionVolumeArrayOutput {
	return o
}

func (o TaskDefinitionVolumeArrayOutput) ToTaskDefinitionVolumeArrayOutputWithContext(ctx context.Context) TaskDefinitionVolumeArrayOutput {
	return o
}

func (o TaskDefinitionVolumeArrayOutput) Index(i pulumi.IntInput) TaskDefinitionVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskDefinitionVolume {
		return vs[0].([]TaskDefinitionVolume)[vs[1].(int)]
	}).(TaskDefinitionVolumeOutput)
}

// Details on a data volume from another container in the same task definition.
type TaskDefinitionVolumeFrom struct {
	// If this value is ``true``, the container has read-only access to the volume. If this value is ``false``, then the container can write to the volume. The default value is ``false``.
	ReadOnly *bool `pulumi:"readOnly"`
	// The name of another container within the same task definition to mount volumes from.
	SourceContainer *string `pulumi:"sourceContainer"`
}

// TaskDefinitionVolumeFromInput is an input type that accepts TaskDefinitionVolumeFromArgs and TaskDefinitionVolumeFromOutput values.
// You can construct a concrete instance of `TaskDefinitionVolumeFromInput` via:
//
//	TaskDefinitionVolumeFromArgs{...}
type TaskDefinitionVolumeFromInput interface {
	pulumi.Input

	ToTaskDefinitionVolumeFromOutput() TaskDefinitionVolumeFromOutput
	ToTaskDefinitionVolumeFromOutputWithContext(context.Context) TaskDefinitionVolumeFromOutput
}

// Details on a data volume from another container in the same task definition.
type TaskDefinitionVolumeFromArgs struct {
	// If this value is ``true``, the container has read-only access to the volume. If this value is ``false``, then the container can write to the volume. The default value is ``false``.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// The name of another container within the same task definition to mount volumes from.
	SourceContainer pulumi.StringPtrInput `pulumi:"sourceContainer"`
}

func (TaskDefinitionVolumeFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionVolumeFrom)(nil)).Elem()
}

func (i TaskDefinitionVolumeFromArgs) ToTaskDefinitionVolumeFromOutput() TaskDefinitionVolumeFromOutput {
	return i.ToTaskDefinitionVolumeFromOutputWithContext(context.Background())
}

func (i TaskDefinitionVolumeFromArgs) ToTaskDefinitionVolumeFromOutputWithContext(ctx context.Context) TaskDefinitionVolumeFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionVolumeFromOutput)
}

// TaskDefinitionVolumeFromArrayInput is an input type that accepts TaskDefinitionVolumeFromArray and TaskDefinitionVolumeFromArrayOutput values.
// You can construct a concrete instance of `TaskDefinitionVolumeFromArrayInput` via:
//
//	TaskDefinitionVolumeFromArray{ TaskDefinitionVolumeFromArgs{...} }
type TaskDefinitionVolumeFromArrayInput interface {
	pulumi.Input

	ToTaskDefinitionVolumeFromArrayOutput() TaskDefinitionVolumeFromArrayOutput
	ToTaskDefinitionVolumeFromArrayOutputWithContext(context.Context) TaskDefinitionVolumeFromArrayOutput
}

type TaskDefinitionVolumeFromArray []TaskDefinitionVolumeFromInput

func (TaskDefinitionVolumeFromArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionVolumeFrom)(nil)).Elem()
}

func (i TaskDefinitionVolumeFromArray) ToTaskDefinitionVolumeFromArrayOutput() TaskDefinitionVolumeFromArrayOutput {
	return i.ToTaskDefinitionVolumeFromArrayOutputWithContext(context.Background())
}

func (i TaskDefinitionVolumeFromArray) ToTaskDefinitionVolumeFromArrayOutputWithContext(ctx context.Context) TaskDefinitionVolumeFromArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionVolumeFromArrayOutput)
}

// Details on a data volume from another container in the same task definition.
type TaskDefinitionVolumeFromOutput struct{ *pulumi.OutputState }

func (TaskDefinitionVolumeFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionVolumeFrom)(nil)).Elem()
}

func (o TaskDefinitionVolumeFromOutput) ToTaskDefinitionVolumeFromOutput() TaskDefinitionVolumeFromOutput {
	return o
}

func (o TaskDefinitionVolumeFromOutput) ToTaskDefinitionVolumeFromOutputWithContext(ctx context.Context) TaskDefinitionVolumeFromOutput {
	return o
}

// If this value is “true“, the container has read-only access to the volume. If this value is “false“, then the container can write to the volume. The default value is “false“.
func (o TaskDefinitionVolumeFromOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TaskDefinitionVolumeFrom) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// The name of another container within the same task definition to mount volumes from.
func (o TaskDefinitionVolumeFromOutput) SourceContainer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionVolumeFrom) *string { return v.SourceContainer }).(pulumi.StringPtrOutput)
}

type TaskDefinitionVolumeFromArrayOutput struct{ *pulumi.OutputState }

func (TaskDefinitionVolumeFromArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionVolumeFrom)(nil)).Elem()
}

func (o TaskDefinitionVolumeFromArrayOutput) ToTaskDefinitionVolumeFromArrayOutput() TaskDefinitionVolumeFromArrayOutput {
	return o
}

func (o TaskDefinitionVolumeFromArrayOutput) ToTaskDefinitionVolumeFromArrayOutputWithContext(ctx context.Context) TaskDefinitionVolumeFromArrayOutput {
	return o
}

func (o TaskDefinitionVolumeFromArrayOutput) Index(i pulumi.IntInput) TaskDefinitionVolumeFromOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskDefinitionVolumeFrom {
		return vs[0].([]TaskDefinitionVolumeFrom)[vs[1].(int)]
	}).(TaskDefinitionVolumeFromOutput)
}

// The VPC subnets and security groups associated with a task. All specified subnets and security groups must be from the same VPC.
type TaskSetAwsVpcConfiguration struct {
	// Whether the task's elastic network interface receives a public IP address. The default value is DISABLED.
	AssignPublicIp *TaskSetAwsVpcConfigurationAssignPublicIp `pulumi:"assignPublicIp"`
	// The security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used. There is a limit of 5 security groups that can be specified per AwsVpcConfiguration.
	SecurityGroups []string `pulumi:"securityGroups"`
	// The subnets associated with the task or service. There is a limit of 16 subnets that can be specified per AwsVpcConfiguration.
	Subnets []string `pulumi:"subnets"`
}

// TaskSetAwsVpcConfigurationInput is an input type that accepts TaskSetAwsVpcConfigurationArgs and TaskSetAwsVpcConfigurationOutput values.
// You can construct a concrete instance of `TaskSetAwsVpcConfigurationInput` via:
//
//	TaskSetAwsVpcConfigurationArgs{...}
type TaskSetAwsVpcConfigurationInput interface {
	pulumi.Input

	ToTaskSetAwsVpcConfigurationOutput() TaskSetAwsVpcConfigurationOutput
	ToTaskSetAwsVpcConfigurationOutputWithContext(context.Context) TaskSetAwsVpcConfigurationOutput
}

// The VPC subnets and security groups associated with a task. All specified subnets and security groups must be from the same VPC.
type TaskSetAwsVpcConfigurationArgs struct {
	// Whether the task's elastic network interface receives a public IP address. The default value is DISABLED.
	AssignPublicIp TaskSetAwsVpcConfigurationAssignPublicIpPtrInput `pulumi:"assignPublicIp"`
	// The security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used. There is a limit of 5 security groups that can be specified per AwsVpcConfiguration.
	SecurityGroups pulumi.StringArrayInput `pulumi:"securityGroups"`
	// The subnets associated with the task or service. There is a limit of 16 subnets that can be specified per AwsVpcConfiguration.
	Subnets pulumi.StringArrayInput `pulumi:"subnets"`
}

func (TaskSetAwsVpcConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSetAwsVpcConfiguration)(nil)).Elem()
}

func (i TaskSetAwsVpcConfigurationArgs) ToTaskSetAwsVpcConfigurationOutput() TaskSetAwsVpcConfigurationOutput {
	return i.ToTaskSetAwsVpcConfigurationOutputWithContext(context.Background())
}

func (i TaskSetAwsVpcConfigurationArgs) ToTaskSetAwsVpcConfigurationOutputWithContext(ctx context.Context) TaskSetAwsVpcConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSetAwsVpcConfigurationOutput)
}

func (i TaskSetAwsVpcConfigurationArgs) ToTaskSetAwsVpcConfigurationPtrOutput() TaskSetAwsVpcConfigurationPtrOutput {
	return i.ToTaskSetAwsVpcConfigurationPtrOutputWithContext(context.Background())
}

func (i TaskSetAwsVpcConfigurationArgs) ToTaskSetAwsVpcConfigurationPtrOutputWithContext(ctx context.Context) TaskSetAwsVpcConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSetAwsVpcConfigurationOutput).ToTaskSetAwsVpcConfigurationPtrOutputWithContext(ctx)
}

// TaskSetAwsVpcConfigurationPtrInput is an input type that accepts TaskSetAwsVpcConfigurationArgs, TaskSetAwsVpcConfigurationPtr and TaskSetAwsVpcConfigurationPtrOutput values.
// You can construct a concrete instance of `TaskSetAwsVpcConfigurationPtrInput` via:
//
//	        TaskSetAwsVpcConfigurationArgs{...}
//
//	or:
//
//	        nil
type TaskSetAwsVpcConfigurationPtrInput interface {
	pulumi.Input

	ToTaskSetAwsVpcConfigurationPtrOutput() TaskSetAwsVpcConfigurationPtrOutput
	ToTaskSetAwsVpcConfigurationPtrOutputWithContext(context.Context) TaskSetAwsVpcConfigurationPtrOutput
}

type taskSetAwsVpcConfigurationPtrType TaskSetAwsVpcConfigurationArgs

func TaskSetAwsVpcConfigurationPtr(v *TaskSetAwsVpcConfigurationArgs) TaskSetAwsVpcConfigurationPtrInput {
	return (*taskSetAwsVpcConfigurationPtrType)(v)
}

func (*taskSetAwsVpcConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskSetAwsVpcConfiguration)(nil)).Elem()
}

func (i *taskSetAwsVpcConfigurationPtrType) ToTaskSetAwsVpcConfigurationPtrOutput() TaskSetAwsVpcConfigurationPtrOutput {
	return i.ToTaskSetAwsVpcConfigurationPtrOutputWithContext(context.Background())
}

func (i *taskSetAwsVpcConfigurationPtrType) ToTaskSetAwsVpcConfigurationPtrOutputWithContext(ctx context.Context) TaskSetAwsVpcConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSetAwsVpcConfigurationPtrOutput)
}

// The VPC subnets and security groups associated with a task. All specified subnets and security groups must be from the same VPC.
type TaskSetAwsVpcConfigurationOutput struct{ *pulumi.OutputState }

func (TaskSetAwsVpcConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSetAwsVpcConfiguration)(nil)).Elem()
}

func (o TaskSetAwsVpcConfigurationOutput) ToTaskSetAwsVpcConfigurationOutput() TaskSetAwsVpcConfigurationOutput {
	return o
}

func (o TaskSetAwsVpcConfigurationOutput) ToTaskSetAwsVpcConfigurationOutputWithContext(ctx context.Context) TaskSetAwsVpcConfigurationOutput {
	return o
}

func (o TaskSetAwsVpcConfigurationOutput) ToTaskSetAwsVpcConfigurationPtrOutput() TaskSetAwsVpcConfigurationPtrOutput {
	return o.ToTaskSetAwsVpcConfigurationPtrOutputWithContext(context.Background())
}

func (o TaskSetAwsVpcConfigurationOutput) ToTaskSetAwsVpcConfigurationPtrOutputWithContext(ctx context.Context) TaskSetAwsVpcConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskSetAwsVpcConfiguration) *TaskSetAwsVpcConfiguration {
		return &v
	}).(TaskSetAwsVpcConfigurationPtrOutput)
}

// Whether the task's elastic network interface receives a public IP address. The default value is DISABLED.
func (o TaskSetAwsVpcConfigurationOutput) AssignPublicIp() TaskSetAwsVpcConfigurationAssignPublicIpPtrOutput {
	return o.ApplyT(func(v TaskSetAwsVpcConfiguration) *TaskSetAwsVpcConfigurationAssignPublicIp { return v.AssignPublicIp }).(TaskSetAwsVpcConfigurationAssignPublicIpPtrOutput)
}

// The security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used. There is a limit of 5 security groups that can be specified per AwsVpcConfiguration.
func (o TaskSetAwsVpcConfigurationOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TaskSetAwsVpcConfiguration) []string { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

// The subnets associated with the task or service. There is a limit of 16 subnets that can be specified per AwsVpcConfiguration.
func (o TaskSetAwsVpcConfigurationOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TaskSetAwsVpcConfiguration) []string { return v.Subnets }).(pulumi.StringArrayOutput)
}

type TaskSetAwsVpcConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TaskSetAwsVpcConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskSetAwsVpcConfiguration)(nil)).Elem()
}

func (o TaskSetAwsVpcConfigurationPtrOutput) ToTaskSetAwsVpcConfigurationPtrOutput() TaskSetAwsVpcConfigurationPtrOutput {
	return o
}

func (o TaskSetAwsVpcConfigurationPtrOutput) ToTaskSetAwsVpcConfigurationPtrOutputWithContext(ctx context.Context) TaskSetAwsVpcConfigurationPtrOutput {
	return o
}

func (o TaskSetAwsVpcConfigurationPtrOutput) Elem() TaskSetAwsVpcConfigurationOutput {
	return o.ApplyT(func(v *TaskSetAwsVpcConfiguration) TaskSetAwsVpcConfiguration {
		if v != nil {
			return *v
		}
		var ret TaskSetAwsVpcConfiguration
		return ret
	}).(TaskSetAwsVpcConfigurationOutput)
}

// Whether the task's elastic network interface receives a public IP address. The default value is DISABLED.
func (o TaskSetAwsVpcConfigurationPtrOutput) AssignPublicIp() TaskSetAwsVpcConfigurationAssignPublicIpPtrOutput {
	return o.ApplyT(func(v *TaskSetAwsVpcConfiguration) *TaskSetAwsVpcConfigurationAssignPublicIp {
		if v == nil {
			return nil
		}
		return v.AssignPublicIp
	}).(TaskSetAwsVpcConfigurationAssignPublicIpPtrOutput)
}

// The security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used. There is a limit of 5 security groups that can be specified per AwsVpcConfiguration.
func (o TaskSetAwsVpcConfigurationPtrOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TaskSetAwsVpcConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.SecurityGroups
	}).(pulumi.StringArrayOutput)
}

// The subnets associated with the task or service. There is a limit of 16 subnets that can be specified per AwsVpcConfiguration.
func (o TaskSetAwsVpcConfigurationPtrOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TaskSetAwsVpcConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.Subnets
	}).(pulumi.StringArrayOutput)
}

// A load balancer object representing the load balancer to use with the task set. The supported load balancer types are either an Application Load Balancer or a Network Load Balancer.
type TaskSetLoadBalancer struct {
	// The name of the container (as it appears in a container definition) to associate with the load balancer.
	ContainerName *string `pulumi:"containerName"`
	// The port on the container to associate with the load balancer. This port must correspond to a containerPort in the task definition the tasks in the service are using. For tasks that use the EC2 launch type, the container instance they are launched on must allow ingress traffic on the hostPort of the port mapping.
	ContainerPort *int `pulumi:"containerPort"`
	// The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or groups associated with a service or task set. A target group ARN is only specified when using an Application Load Balancer or Network Load Balancer. If you are using a Classic Load Balancer this should be omitted. For services using the ECS deployment controller, you can specify one or multiple target groups. For more information, see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html in the Amazon Elastic Container Service Developer Guide. For services using the CODE_DEPLOY deployment controller, you are required to define two target groups for the load balancer. For more information, see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html in the Amazon Elastic Container Service Developer Guide. If your service's task definition uses the awsvpc network mode (which is required for the Fargate launch type), you must choose ip as the target type, not instance, when creating your target groups because tasks that use the awsvpc network mode are associated with an elastic network interface, not an Amazon EC2 instance.
	TargetGroupArn *string `pulumi:"targetGroupArn"`
}

// TaskSetLoadBalancerInput is an input type that accepts TaskSetLoadBalancerArgs and TaskSetLoadBalancerOutput values.
// You can construct a concrete instance of `TaskSetLoadBalancerInput` via:
//
//	TaskSetLoadBalancerArgs{...}
type TaskSetLoadBalancerInput interface {
	pulumi.Input

	ToTaskSetLoadBalancerOutput() TaskSetLoadBalancerOutput
	ToTaskSetLoadBalancerOutputWithContext(context.Context) TaskSetLoadBalancerOutput
}

// A load balancer object representing the load balancer to use with the task set. The supported load balancer types are either an Application Load Balancer or a Network Load Balancer.
type TaskSetLoadBalancerArgs struct {
	// The name of the container (as it appears in a container definition) to associate with the load balancer.
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// The port on the container to associate with the load balancer. This port must correspond to a containerPort in the task definition the tasks in the service are using. For tasks that use the EC2 launch type, the container instance they are launched on must allow ingress traffic on the hostPort of the port mapping.
	ContainerPort pulumi.IntPtrInput `pulumi:"containerPort"`
	// The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or groups associated with a service or task set. A target group ARN is only specified when using an Application Load Balancer or Network Load Balancer. If you are using a Classic Load Balancer this should be omitted. For services using the ECS deployment controller, you can specify one or multiple target groups. For more information, see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html in the Amazon Elastic Container Service Developer Guide. For services using the CODE_DEPLOY deployment controller, you are required to define two target groups for the load balancer. For more information, see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html in the Amazon Elastic Container Service Developer Guide. If your service's task definition uses the awsvpc network mode (which is required for the Fargate launch type), you must choose ip as the target type, not instance, when creating your target groups because tasks that use the awsvpc network mode are associated with an elastic network interface, not an Amazon EC2 instance.
	TargetGroupArn pulumi.StringPtrInput `pulumi:"targetGroupArn"`
}

func (TaskSetLoadBalancerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSetLoadBalancer)(nil)).Elem()
}

func (i TaskSetLoadBalancerArgs) ToTaskSetLoadBalancerOutput() TaskSetLoadBalancerOutput {
	return i.ToTaskSetLoadBalancerOutputWithContext(context.Background())
}

func (i TaskSetLoadBalancerArgs) ToTaskSetLoadBalancerOutputWithContext(ctx context.Context) TaskSetLoadBalancerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSetLoadBalancerOutput)
}

// TaskSetLoadBalancerArrayInput is an input type that accepts TaskSetLoadBalancerArray and TaskSetLoadBalancerArrayOutput values.
// You can construct a concrete instance of `TaskSetLoadBalancerArrayInput` via:
//
//	TaskSetLoadBalancerArray{ TaskSetLoadBalancerArgs{...} }
type TaskSetLoadBalancerArrayInput interface {
	pulumi.Input

	ToTaskSetLoadBalancerArrayOutput() TaskSetLoadBalancerArrayOutput
	ToTaskSetLoadBalancerArrayOutputWithContext(context.Context) TaskSetLoadBalancerArrayOutput
}

type TaskSetLoadBalancerArray []TaskSetLoadBalancerInput

func (TaskSetLoadBalancerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskSetLoadBalancer)(nil)).Elem()
}

func (i TaskSetLoadBalancerArray) ToTaskSetLoadBalancerArrayOutput() TaskSetLoadBalancerArrayOutput {
	return i.ToTaskSetLoadBalancerArrayOutputWithContext(context.Background())
}

func (i TaskSetLoadBalancerArray) ToTaskSetLoadBalancerArrayOutputWithContext(ctx context.Context) TaskSetLoadBalancerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSetLoadBalancerArrayOutput)
}

// A load balancer object representing the load balancer to use with the task set. The supported load balancer types are either an Application Load Balancer or a Network Load Balancer.
type TaskSetLoadBalancerOutput struct{ *pulumi.OutputState }

func (TaskSetLoadBalancerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSetLoadBalancer)(nil)).Elem()
}

func (o TaskSetLoadBalancerOutput) ToTaskSetLoadBalancerOutput() TaskSetLoadBalancerOutput {
	return o
}

func (o TaskSetLoadBalancerOutput) ToTaskSetLoadBalancerOutputWithContext(ctx context.Context) TaskSetLoadBalancerOutput {
	return o
}

// The name of the container (as it appears in a container definition) to associate with the load balancer.
func (o TaskSetLoadBalancerOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskSetLoadBalancer) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// The port on the container to associate with the load balancer. This port must correspond to a containerPort in the task definition the tasks in the service are using. For tasks that use the EC2 launch type, the container instance they are launched on must allow ingress traffic on the hostPort of the port mapping.
func (o TaskSetLoadBalancerOutput) ContainerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskSetLoadBalancer) *int { return v.ContainerPort }).(pulumi.IntPtrOutput)
}

// The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or groups associated with a service or task set. A target group ARN is only specified when using an Application Load Balancer or Network Load Balancer. If you are using a Classic Load Balancer this should be omitted. For services using the ECS deployment controller, you can specify one or multiple target groups. For more information, see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html in the Amazon Elastic Container Service Developer Guide. For services using the CODE_DEPLOY deployment controller, you are required to define two target groups for the load balancer. For more information, see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html in the Amazon Elastic Container Service Developer Guide. If your service's task definition uses the awsvpc network mode (which is required for the Fargate launch type), you must choose ip as the target type, not instance, when creating your target groups because tasks that use the awsvpc network mode are associated with an elastic network interface, not an Amazon EC2 instance.
func (o TaskSetLoadBalancerOutput) TargetGroupArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskSetLoadBalancer) *string { return v.TargetGroupArn }).(pulumi.StringPtrOutput)
}

type TaskSetLoadBalancerArrayOutput struct{ *pulumi.OutputState }

func (TaskSetLoadBalancerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskSetLoadBalancer)(nil)).Elem()
}

func (o TaskSetLoadBalancerArrayOutput) ToTaskSetLoadBalancerArrayOutput() TaskSetLoadBalancerArrayOutput {
	return o
}

func (o TaskSetLoadBalancerArrayOutput) ToTaskSetLoadBalancerArrayOutputWithContext(ctx context.Context) TaskSetLoadBalancerArrayOutput {
	return o
}

func (o TaskSetLoadBalancerArrayOutput) Index(i pulumi.IntInput) TaskSetLoadBalancerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskSetLoadBalancer {
		return vs[0].([]TaskSetLoadBalancer)[vs[1].(int)]
	}).(TaskSetLoadBalancerOutput)
}

// An object representing the network configuration for a task or service.
type TaskSetNetworkConfiguration struct {
	AwsVpcConfiguration *TaskSetAwsVpcConfiguration `pulumi:"awsVpcConfiguration"`
}

// TaskSetNetworkConfigurationInput is an input type that accepts TaskSetNetworkConfigurationArgs and TaskSetNetworkConfigurationOutput values.
// You can construct a concrete instance of `TaskSetNetworkConfigurationInput` via:
//
//	TaskSetNetworkConfigurationArgs{...}
type TaskSetNetworkConfigurationInput interface {
	pulumi.Input

	ToTaskSetNetworkConfigurationOutput() TaskSetNetworkConfigurationOutput
	ToTaskSetNetworkConfigurationOutputWithContext(context.Context) TaskSetNetworkConfigurationOutput
}

// An object representing the network configuration for a task or service.
type TaskSetNetworkConfigurationArgs struct {
	AwsVpcConfiguration TaskSetAwsVpcConfigurationPtrInput `pulumi:"awsVpcConfiguration"`
}

func (TaskSetNetworkConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSetNetworkConfiguration)(nil)).Elem()
}

func (i TaskSetNetworkConfigurationArgs) ToTaskSetNetworkConfigurationOutput() TaskSetNetworkConfigurationOutput {
	return i.ToTaskSetNetworkConfigurationOutputWithContext(context.Background())
}

func (i TaskSetNetworkConfigurationArgs) ToTaskSetNetworkConfigurationOutputWithContext(ctx context.Context) TaskSetNetworkConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSetNetworkConfigurationOutput)
}

func (i TaskSetNetworkConfigurationArgs) ToTaskSetNetworkConfigurationPtrOutput() TaskSetNetworkConfigurationPtrOutput {
	return i.ToTaskSetNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (i TaskSetNetworkConfigurationArgs) ToTaskSetNetworkConfigurationPtrOutputWithContext(ctx context.Context) TaskSetNetworkConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSetNetworkConfigurationOutput).ToTaskSetNetworkConfigurationPtrOutputWithContext(ctx)
}

// TaskSetNetworkConfigurationPtrInput is an input type that accepts TaskSetNetworkConfigurationArgs, TaskSetNetworkConfigurationPtr and TaskSetNetworkConfigurationPtrOutput values.
// You can construct a concrete instance of `TaskSetNetworkConfigurationPtrInput` via:
//
//	        TaskSetNetworkConfigurationArgs{...}
//
//	or:
//
//	        nil
type TaskSetNetworkConfigurationPtrInput interface {
	pulumi.Input

	ToTaskSetNetworkConfigurationPtrOutput() TaskSetNetworkConfigurationPtrOutput
	ToTaskSetNetworkConfigurationPtrOutputWithContext(context.Context) TaskSetNetworkConfigurationPtrOutput
}

type taskSetNetworkConfigurationPtrType TaskSetNetworkConfigurationArgs

func TaskSetNetworkConfigurationPtr(v *TaskSetNetworkConfigurationArgs) TaskSetNetworkConfigurationPtrInput {
	return (*taskSetNetworkConfigurationPtrType)(v)
}

func (*taskSetNetworkConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskSetNetworkConfiguration)(nil)).Elem()
}

func (i *taskSetNetworkConfigurationPtrType) ToTaskSetNetworkConfigurationPtrOutput() TaskSetNetworkConfigurationPtrOutput {
	return i.ToTaskSetNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (i *taskSetNetworkConfigurationPtrType) ToTaskSetNetworkConfigurationPtrOutputWithContext(ctx context.Context) TaskSetNetworkConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSetNetworkConfigurationPtrOutput)
}

// An object representing the network configuration for a task or service.
type TaskSetNetworkConfigurationOutput struct{ *pulumi.OutputState }

func (TaskSetNetworkConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSetNetworkConfiguration)(nil)).Elem()
}

func (o TaskSetNetworkConfigurationOutput) ToTaskSetNetworkConfigurationOutput() TaskSetNetworkConfigurationOutput {
	return o
}

func (o TaskSetNetworkConfigurationOutput) ToTaskSetNetworkConfigurationOutputWithContext(ctx context.Context) TaskSetNetworkConfigurationOutput {
	return o
}

func (o TaskSetNetworkConfigurationOutput) ToTaskSetNetworkConfigurationPtrOutput() TaskSetNetworkConfigurationPtrOutput {
	return o.ToTaskSetNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (o TaskSetNetworkConfigurationOutput) ToTaskSetNetworkConfigurationPtrOutputWithContext(ctx context.Context) TaskSetNetworkConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskSetNetworkConfiguration) *TaskSetNetworkConfiguration {
		return &v
	}).(TaskSetNetworkConfigurationPtrOutput)
}

func (o TaskSetNetworkConfigurationOutput) AwsVpcConfiguration() TaskSetAwsVpcConfigurationPtrOutput {
	return o.ApplyT(func(v TaskSetNetworkConfiguration) *TaskSetAwsVpcConfiguration { return v.AwsVpcConfiguration }).(TaskSetAwsVpcConfigurationPtrOutput)
}

type TaskSetNetworkConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TaskSetNetworkConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskSetNetworkConfiguration)(nil)).Elem()
}

func (o TaskSetNetworkConfigurationPtrOutput) ToTaskSetNetworkConfigurationPtrOutput() TaskSetNetworkConfigurationPtrOutput {
	return o
}

func (o TaskSetNetworkConfigurationPtrOutput) ToTaskSetNetworkConfigurationPtrOutputWithContext(ctx context.Context) TaskSetNetworkConfigurationPtrOutput {
	return o
}

func (o TaskSetNetworkConfigurationPtrOutput) Elem() TaskSetNetworkConfigurationOutput {
	return o.ApplyT(func(v *TaskSetNetworkConfiguration) TaskSetNetworkConfiguration {
		if v != nil {
			return *v
		}
		var ret TaskSetNetworkConfiguration
		return ret
	}).(TaskSetNetworkConfigurationOutput)
}

func (o TaskSetNetworkConfigurationPtrOutput) AwsVpcConfiguration() TaskSetAwsVpcConfigurationPtrOutput {
	return o.ApplyT(func(v *TaskSetNetworkConfiguration) *TaskSetAwsVpcConfiguration {
		if v == nil {
			return nil
		}
		return v.AwsVpcConfiguration
	}).(TaskSetAwsVpcConfigurationPtrOutput)
}

type TaskSetScale struct {
	// The unit of measure for the scale value.
	Unit *TaskSetScaleUnit `pulumi:"unit"`
	// The value, specified as a percent total of a service's desiredCount, to scale the task set. Accepted values are numbers between 0 and 100.
	Value *float64 `pulumi:"value"`
}

// TaskSetScaleInput is an input type that accepts TaskSetScaleArgs and TaskSetScaleOutput values.
// You can construct a concrete instance of `TaskSetScaleInput` via:
//
//	TaskSetScaleArgs{...}
type TaskSetScaleInput interface {
	pulumi.Input

	ToTaskSetScaleOutput() TaskSetScaleOutput
	ToTaskSetScaleOutputWithContext(context.Context) TaskSetScaleOutput
}

type TaskSetScaleArgs struct {
	// The unit of measure for the scale value.
	Unit TaskSetScaleUnitPtrInput `pulumi:"unit"`
	// The value, specified as a percent total of a service's desiredCount, to scale the task set. Accepted values are numbers between 0 and 100.
	Value pulumi.Float64PtrInput `pulumi:"value"`
}

func (TaskSetScaleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSetScale)(nil)).Elem()
}

func (i TaskSetScaleArgs) ToTaskSetScaleOutput() TaskSetScaleOutput {
	return i.ToTaskSetScaleOutputWithContext(context.Background())
}

func (i TaskSetScaleArgs) ToTaskSetScaleOutputWithContext(ctx context.Context) TaskSetScaleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSetScaleOutput)
}

func (i TaskSetScaleArgs) ToTaskSetScalePtrOutput() TaskSetScalePtrOutput {
	return i.ToTaskSetScalePtrOutputWithContext(context.Background())
}

func (i TaskSetScaleArgs) ToTaskSetScalePtrOutputWithContext(ctx context.Context) TaskSetScalePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSetScaleOutput).ToTaskSetScalePtrOutputWithContext(ctx)
}

// TaskSetScalePtrInput is an input type that accepts TaskSetScaleArgs, TaskSetScalePtr and TaskSetScalePtrOutput values.
// You can construct a concrete instance of `TaskSetScalePtrInput` via:
//
//	        TaskSetScaleArgs{...}
//
//	or:
//
//	        nil
type TaskSetScalePtrInput interface {
	pulumi.Input

	ToTaskSetScalePtrOutput() TaskSetScalePtrOutput
	ToTaskSetScalePtrOutputWithContext(context.Context) TaskSetScalePtrOutput
}

type taskSetScalePtrType TaskSetScaleArgs

func TaskSetScalePtr(v *TaskSetScaleArgs) TaskSetScalePtrInput {
	return (*taskSetScalePtrType)(v)
}

func (*taskSetScalePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskSetScale)(nil)).Elem()
}

func (i *taskSetScalePtrType) ToTaskSetScalePtrOutput() TaskSetScalePtrOutput {
	return i.ToTaskSetScalePtrOutputWithContext(context.Background())
}

func (i *taskSetScalePtrType) ToTaskSetScalePtrOutputWithContext(ctx context.Context) TaskSetScalePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSetScalePtrOutput)
}

type TaskSetScaleOutput struct{ *pulumi.OutputState }

func (TaskSetScaleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSetScale)(nil)).Elem()
}

func (o TaskSetScaleOutput) ToTaskSetScaleOutput() TaskSetScaleOutput {
	return o
}

func (o TaskSetScaleOutput) ToTaskSetScaleOutputWithContext(ctx context.Context) TaskSetScaleOutput {
	return o
}

func (o TaskSetScaleOutput) ToTaskSetScalePtrOutput() TaskSetScalePtrOutput {
	return o.ToTaskSetScalePtrOutputWithContext(context.Background())
}

func (o TaskSetScaleOutput) ToTaskSetScalePtrOutputWithContext(ctx context.Context) TaskSetScalePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskSetScale) *TaskSetScale {
		return &v
	}).(TaskSetScalePtrOutput)
}

// The unit of measure for the scale value.
func (o TaskSetScaleOutput) Unit() TaskSetScaleUnitPtrOutput {
	return o.ApplyT(func(v TaskSetScale) *TaskSetScaleUnit { return v.Unit }).(TaskSetScaleUnitPtrOutput)
}

// The value, specified as a percent total of a service's desiredCount, to scale the task set. Accepted values are numbers between 0 and 100.
func (o TaskSetScaleOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TaskSetScale) *float64 { return v.Value }).(pulumi.Float64PtrOutput)
}

type TaskSetScalePtrOutput struct{ *pulumi.OutputState }

func (TaskSetScalePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskSetScale)(nil)).Elem()
}

func (o TaskSetScalePtrOutput) ToTaskSetScalePtrOutput() TaskSetScalePtrOutput {
	return o
}

func (o TaskSetScalePtrOutput) ToTaskSetScalePtrOutputWithContext(ctx context.Context) TaskSetScalePtrOutput {
	return o
}

func (o TaskSetScalePtrOutput) Elem() TaskSetScaleOutput {
	return o.ApplyT(func(v *TaskSetScale) TaskSetScale {
		if v != nil {
			return *v
		}
		var ret TaskSetScale
		return ret
	}).(TaskSetScaleOutput)
}

// The unit of measure for the scale value.
func (o TaskSetScalePtrOutput) Unit() TaskSetScaleUnitPtrOutput {
	return o.ApplyT(func(v *TaskSetScale) *TaskSetScaleUnit {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(TaskSetScaleUnitPtrOutput)
}

// The value, specified as a percent total of a service's desiredCount, to scale the task set. Accepted values are numbers between 0 and 100.
func (o TaskSetScalePtrOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TaskSetScale) *float64 {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.Float64PtrOutput)
}

type TaskSetServiceRegistry struct {
	// The container name value, already specified in the task definition, to be used for your service discovery service. If the task definition that your service task specifies uses the bridge or host network mode, you must specify a containerName and containerPort combination from the task definition. If the task definition that your service task specifies uses the awsvpc network mode and a type SRV DNS record is used, you must specify either a containerName and containerPort combination or a port value, but not both.
	ContainerName *string `pulumi:"containerName"`
	// The port value, already specified in the task definition, to be used for your service discovery service. If the task definition your service task specifies uses the bridge or host network mode, you must specify a containerName and containerPort combination from the task definition. If the task definition your service task specifies uses the awsvpc network mode and a type SRV DNS record is used, you must specify either a containerName and containerPort combination or a port value, but not both.
	ContainerPort *int `pulumi:"containerPort"`
	// The port value used if your service discovery service specified an SRV record. This field may be used if both the awsvpc network mode and SRV records are used.
	Port *int `pulumi:"port"`
	// The Amazon Resource Name (ARN) of the service registry. The currently supported service registry is AWS Cloud Map. For more information, see https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html
	RegistryArn *string `pulumi:"registryArn"`
}

// TaskSetServiceRegistryInput is an input type that accepts TaskSetServiceRegistryArgs and TaskSetServiceRegistryOutput values.
// You can construct a concrete instance of `TaskSetServiceRegistryInput` via:
//
//	TaskSetServiceRegistryArgs{...}
type TaskSetServiceRegistryInput interface {
	pulumi.Input

	ToTaskSetServiceRegistryOutput() TaskSetServiceRegistryOutput
	ToTaskSetServiceRegistryOutputWithContext(context.Context) TaskSetServiceRegistryOutput
}

type TaskSetServiceRegistryArgs struct {
	// The container name value, already specified in the task definition, to be used for your service discovery service. If the task definition that your service task specifies uses the bridge or host network mode, you must specify a containerName and containerPort combination from the task definition. If the task definition that your service task specifies uses the awsvpc network mode and a type SRV DNS record is used, you must specify either a containerName and containerPort combination or a port value, but not both.
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// The port value, already specified in the task definition, to be used for your service discovery service. If the task definition your service task specifies uses the bridge or host network mode, you must specify a containerName and containerPort combination from the task definition. If the task definition your service task specifies uses the awsvpc network mode and a type SRV DNS record is used, you must specify either a containerName and containerPort combination or a port value, but not both.
	ContainerPort pulumi.IntPtrInput `pulumi:"containerPort"`
	// The port value used if your service discovery service specified an SRV record. This field may be used if both the awsvpc network mode and SRV records are used.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The Amazon Resource Name (ARN) of the service registry. The currently supported service registry is AWS Cloud Map. For more information, see https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html
	RegistryArn pulumi.StringPtrInput `pulumi:"registryArn"`
}

func (TaskSetServiceRegistryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSetServiceRegistry)(nil)).Elem()
}

func (i TaskSetServiceRegistryArgs) ToTaskSetServiceRegistryOutput() TaskSetServiceRegistryOutput {
	return i.ToTaskSetServiceRegistryOutputWithContext(context.Background())
}

func (i TaskSetServiceRegistryArgs) ToTaskSetServiceRegistryOutputWithContext(ctx context.Context) TaskSetServiceRegistryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSetServiceRegistryOutput)
}

// TaskSetServiceRegistryArrayInput is an input type that accepts TaskSetServiceRegistryArray and TaskSetServiceRegistryArrayOutput values.
// You can construct a concrete instance of `TaskSetServiceRegistryArrayInput` via:
//
//	TaskSetServiceRegistryArray{ TaskSetServiceRegistryArgs{...} }
type TaskSetServiceRegistryArrayInput interface {
	pulumi.Input

	ToTaskSetServiceRegistryArrayOutput() TaskSetServiceRegistryArrayOutput
	ToTaskSetServiceRegistryArrayOutputWithContext(context.Context) TaskSetServiceRegistryArrayOutput
}

type TaskSetServiceRegistryArray []TaskSetServiceRegistryInput

func (TaskSetServiceRegistryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskSetServiceRegistry)(nil)).Elem()
}

func (i TaskSetServiceRegistryArray) ToTaskSetServiceRegistryArrayOutput() TaskSetServiceRegistryArrayOutput {
	return i.ToTaskSetServiceRegistryArrayOutputWithContext(context.Background())
}

func (i TaskSetServiceRegistryArray) ToTaskSetServiceRegistryArrayOutputWithContext(ctx context.Context) TaskSetServiceRegistryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSetServiceRegistryArrayOutput)
}

type TaskSetServiceRegistryOutput struct{ *pulumi.OutputState }

func (TaskSetServiceRegistryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSetServiceRegistry)(nil)).Elem()
}

func (o TaskSetServiceRegistryOutput) ToTaskSetServiceRegistryOutput() TaskSetServiceRegistryOutput {
	return o
}

func (o TaskSetServiceRegistryOutput) ToTaskSetServiceRegistryOutputWithContext(ctx context.Context) TaskSetServiceRegistryOutput {
	return o
}

// The container name value, already specified in the task definition, to be used for your service discovery service. If the task definition that your service task specifies uses the bridge or host network mode, you must specify a containerName and containerPort combination from the task definition. If the task definition that your service task specifies uses the awsvpc network mode and a type SRV DNS record is used, you must specify either a containerName and containerPort combination or a port value, but not both.
func (o TaskSetServiceRegistryOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskSetServiceRegistry) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// The port value, already specified in the task definition, to be used for your service discovery service. If the task definition your service task specifies uses the bridge or host network mode, you must specify a containerName and containerPort combination from the task definition. If the task definition your service task specifies uses the awsvpc network mode and a type SRV DNS record is used, you must specify either a containerName and containerPort combination or a port value, but not both.
func (o TaskSetServiceRegistryOutput) ContainerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskSetServiceRegistry) *int { return v.ContainerPort }).(pulumi.IntPtrOutput)
}

// The port value used if your service discovery service specified an SRV record. This field may be used if both the awsvpc network mode and SRV records are used.
func (o TaskSetServiceRegistryOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskSetServiceRegistry) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The Amazon Resource Name (ARN) of the service registry. The currently supported service registry is AWS Cloud Map. For more information, see https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html
func (o TaskSetServiceRegistryOutput) RegistryArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskSetServiceRegistry) *string { return v.RegistryArn }).(pulumi.StringPtrOutput)
}

type TaskSetServiceRegistryArrayOutput struct{ *pulumi.OutputState }

func (TaskSetServiceRegistryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskSetServiceRegistry)(nil)).Elem()
}

func (o TaskSetServiceRegistryArrayOutput) ToTaskSetServiceRegistryArrayOutput() TaskSetServiceRegistryArrayOutput {
	return o
}

func (o TaskSetServiceRegistryArrayOutput) ToTaskSetServiceRegistryArrayOutputWithContext(ctx context.Context) TaskSetServiceRegistryArrayOutput {
	return o
}

func (o TaskSetServiceRegistryArrayOutput) Index(i pulumi.IntInput) TaskSetServiceRegistryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskSetServiceRegistry {
		return vs[0].([]TaskSetServiceRegistry)[vs[1].(int)]
	}).(TaskSetServiceRegistryOutput)
}

type TaskSetTag struct {
	Key   *string `pulumi:"key"`
	Value *string `pulumi:"value"`
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CapacityProviderAutoScalingGroupProviderInput)(nil)).Elem(), CapacityProviderAutoScalingGroupProviderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapacityProviderManagedScalingInput)(nil)).Elem(), CapacityProviderManagedScalingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapacityProviderManagedScalingPtrInput)(nil)).Elem(), CapacityProviderManagedScalingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCapacityProviderAssociationsCapacityProviderStrategyInput)(nil)).Elem(), ClusterCapacityProviderAssociationsCapacityProviderStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCapacityProviderAssociationsCapacityProviderStrategyArrayInput)(nil)).Elem(), ClusterCapacityProviderAssociationsCapacityProviderStrategyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCapacityProviderStrategyItemInput)(nil)).Elem(), ClusterCapacityProviderStrategyItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCapacityProviderStrategyItemArrayInput)(nil)).Elem(), ClusterCapacityProviderStrategyItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterConfigurationInput)(nil)).Elem(), ClusterConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterConfigurationPtrInput)(nil)).Elem(), ClusterConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterExecuteCommandConfigurationInput)(nil)).Elem(), ClusterExecuteCommandConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterExecuteCommandConfigurationPtrInput)(nil)).Elem(), ClusterExecuteCommandConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterExecuteCommandLogConfigurationInput)(nil)).Elem(), ClusterExecuteCommandLogConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterExecuteCommandLogConfigurationPtrInput)(nil)).Elem(), ClusterExecuteCommandLogConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterServiceConnectDefaultsInput)(nil)).Elem(), ClusterServiceConnectDefaultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterServiceConnectDefaultsPtrInput)(nil)).Elem(), ClusterServiceConnectDefaultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterSettingsInput)(nil)).Elem(), ClusterSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterSettingsArrayInput)(nil)).Elem(), ClusterSettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAwsVpcConfigurationInput)(nil)).Elem(), ServiceAwsVpcConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAwsVpcConfigurationPtrInput)(nil)).Elem(), ServiceAwsVpcConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceCapacityProviderStrategyItemInput)(nil)).Elem(), ServiceCapacityProviderStrategyItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceCapacityProviderStrategyItemArrayInput)(nil)).Elem(), ServiceCapacityProviderStrategyItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceConnectClientAliasInput)(nil)).Elem(), ServiceConnectClientAliasArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceConnectClientAliasArrayInput)(nil)).Elem(), ServiceConnectClientAliasArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceConnectConfigurationInput)(nil)).Elem(), ServiceConnectConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceConnectConfigurationPtrInput)(nil)).Elem(), ServiceConnectConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceConnectServiceInput)(nil)).Elem(), ServiceConnectServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceConnectServiceArrayInput)(nil)).Elem(), ServiceConnectServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceConnectTlsCertificateAuthorityInput)(nil)).Elem(), ServiceConnectTlsCertificateAuthorityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceConnectTlsCertificateAuthorityPtrInput)(nil)).Elem(), ServiceConnectTlsCertificateAuthorityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceConnectTlsConfigurationInput)(nil)).Elem(), ServiceConnectTlsConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceConnectTlsConfigurationPtrInput)(nil)).Elem(), ServiceConnectTlsConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceDeploymentAlarmsInput)(nil)).Elem(), ServiceDeploymentAlarmsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceDeploymentAlarmsPtrInput)(nil)).Elem(), ServiceDeploymentAlarmsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceDeploymentCircuitBreakerInput)(nil)).Elem(), ServiceDeploymentCircuitBreakerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceDeploymentCircuitBreakerPtrInput)(nil)).Elem(), ServiceDeploymentCircuitBreakerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceDeploymentConfigurationInput)(nil)).Elem(), ServiceDeploymentConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceDeploymentConfigurationPtrInput)(nil)).Elem(), ServiceDeploymentConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceDeploymentControllerInput)(nil)).Elem(), ServiceDeploymentControllerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceDeploymentControllerPtrInput)(nil)).Elem(), ServiceDeploymentControllerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEbsTagSpecificationInput)(nil)).Elem(), ServiceEbsTagSpecificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEbsTagSpecificationArrayInput)(nil)).Elem(), ServiceEbsTagSpecificationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLoadBalancerInput)(nil)).Elem(), ServiceLoadBalancerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLoadBalancerArrayInput)(nil)).Elem(), ServiceLoadBalancerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLogConfigurationInput)(nil)).Elem(), ServiceLogConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLogConfigurationPtrInput)(nil)).Elem(), ServiceLogConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceManagedEbsVolumeConfigurationInput)(nil)).Elem(), ServiceManagedEbsVolumeConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceManagedEbsVolumeConfigurationPtrInput)(nil)).Elem(), ServiceManagedEbsVolumeConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceNetworkConfigurationInput)(nil)).Elem(), ServiceNetworkConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceNetworkConfigurationPtrInput)(nil)).Elem(), ServiceNetworkConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServicePlacementConstraintInput)(nil)).Elem(), ServicePlacementConstraintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServicePlacementConstraintArrayInput)(nil)).Elem(), ServicePlacementConstraintArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServicePlacementStrategyInput)(nil)).Elem(), ServicePlacementStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServicePlacementStrategyArrayInput)(nil)).Elem(), ServicePlacementStrategyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceRegistryInput)(nil)).Elem(), ServiceRegistryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceRegistryArrayInput)(nil)).Elem(), ServiceRegistryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceSecretInput)(nil)).Elem(), ServiceSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceSecretArrayInput)(nil)).Elem(), ServiceSecretArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTagInput)(nil)).Elem(), ServiceTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTagArrayInput)(nil)).Elem(), ServiceTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTimeoutConfigurationInput)(nil)).Elem(), ServiceTimeoutConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTimeoutConfigurationPtrInput)(nil)).Elem(), ServiceTimeoutConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVolumeConfigurationInput)(nil)).Elem(), ServiceVolumeConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVolumeConfigurationArrayInput)(nil)).Elem(), ServiceVolumeConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionAuthorizationConfigInput)(nil)).Elem(), TaskDefinitionAuthorizationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionAuthorizationConfigPtrInput)(nil)).Elem(), TaskDefinitionAuthorizationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionContainerDefinitionInput)(nil)).Elem(), TaskDefinitionContainerDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionContainerDefinitionArrayInput)(nil)).Elem(), TaskDefinitionContainerDefinitionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionContainerDependencyInput)(nil)).Elem(), TaskDefinitionContainerDependencyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionContainerDependencyArrayInput)(nil)).Elem(), TaskDefinitionContainerDependencyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionDeviceInput)(nil)).Elem(), TaskDefinitionDeviceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionDeviceArrayInput)(nil)).Elem(), TaskDefinitionDeviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionDockerVolumeConfigurationInput)(nil)).Elem(), TaskDefinitionDockerVolumeConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionDockerVolumeConfigurationPtrInput)(nil)).Elem(), TaskDefinitionDockerVolumeConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionEfsVolumeConfigurationInput)(nil)).Elem(), TaskDefinitionEfsVolumeConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionEfsVolumeConfigurationPtrInput)(nil)).Elem(), TaskDefinitionEfsVolumeConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionEnvironmentFileInput)(nil)).Elem(), TaskDefinitionEnvironmentFileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionEnvironmentFileArrayInput)(nil)).Elem(), TaskDefinitionEnvironmentFileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionEphemeralStorageInput)(nil)).Elem(), TaskDefinitionEphemeralStorageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionEphemeralStoragePtrInput)(nil)).Elem(), TaskDefinitionEphemeralStorageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionFirelensConfigurationInput)(nil)).Elem(), TaskDefinitionFirelensConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionFirelensConfigurationPtrInput)(nil)).Elem(), TaskDefinitionFirelensConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionHealthCheckInput)(nil)).Elem(), TaskDefinitionHealthCheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionHealthCheckPtrInput)(nil)).Elem(), TaskDefinitionHealthCheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionHostEntryInput)(nil)).Elem(), TaskDefinitionHostEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionHostEntryArrayInput)(nil)).Elem(), TaskDefinitionHostEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionHostVolumePropertiesInput)(nil)).Elem(), TaskDefinitionHostVolumePropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionHostVolumePropertiesPtrInput)(nil)).Elem(), TaskDefinitionHostVolumePropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionInferenceAcceleratorInput)(nil)).Elem(), TaskDefinitionInferenceAcceleratorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionInferenceAcceleratorArrayInput)(nil)).Elem(), TaskDefinitionInferenceAcceleratorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionKernelCapabilitiesInput)(nil)).Elem(), TaskDefinitionKernelCapabilitiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionKernelCapabilitiesPtrInput)(nil)).Elem(), TaskDefinitionKernelCapabilitiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionKeyValuePairInput)(nil)).Elem(), TaskDefinitionKeyValuePairArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionKeyValuePairArrayInput)(nil)).Elem(), TaskDefinitionKeyValuePairArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionLinuxParametersInput)(nil)).Elem(), TaskDefinitionLinuxParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionLinuxParametersPtrInput)(nil)).Elem(), TaskDefinitionLinuxParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionLogConfigurationInput)(nil)).Elem(), TaskDefinitionLogConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionLogConfigurationPtrInput)(nil)).Elem(), TaskDefinitionLogConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionMountPointInput)(nil)).Elem(), TaskDefinitionMountPointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionMountPointArrayInput)(nil)).Elem(), TaskDefinitionMountPointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionPlacementConstraintInput)(nil)).Elem(), TaskDefinitionPlacementConstraintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionPlacementConstraintArrayInput)(nil)).Elem(), TaskDefinitionPlacementConstraintArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionPortMappingInput)(nil)).Elem(), TaskDefinitionPortMappingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionPortMappingArrayInput)(nil)).Elem(), TaskDefinitionPortMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionProxyConfigurationInput)(nil)).Elem(), TaskDefinitionProxyConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionProxyConfigurationPtrInput)(nil)).Elem(), TaskDefinitionProxyConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionRepositoryCredentialsInput)(nil)).Elem(), TaskDefinitionRepositoryCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionRepositoryCredentialsPtrInput)(nil)).Elem(), TaskDefinitionRepositoryCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionResourceRequirementInput)(nil)).Elem(), TaskDefinitionResourceRequirementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionResourceRequirementArrayInput)(nil)).Elem(), TaskDefinitionResourceRequirementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionRuntimePlatformInput)(nil)).Elem(), TaskDefinitionRuntimePlatformArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionRuntimePlatformPtrInput)(nil)).Elem(), TaskDefinitionRuntimePlatformArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionSecretInput)(nil)).Elem(), TaskDefinitionSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionSecretArrayInput)(nil)).Elem(), TaskDefinitionSecretArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionSystemControlInput)(nil)).Elem(), TaskDefinitionSystemControlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionSystemControlArrayInput)(nil)).Elem(), TaskDefinitionSystemControlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionTmpfsInput)(nil)).Elem(), TaskDefinitionTmpfsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionTmpfsArrayInput)(nil)).Elem(), TaskDefinitionTmpfsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionUlimitInput)(nil)).Elem(), TaskDefinitionUlimitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionUlimitArrayInput)(nil)).Elem(), TaskDefinitionUlimitArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionVolumeInput)(nil)).Elem(), TaskDefinitionVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionVolumeArrayInput)(nil)).Elem(), TaskDefinitionVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionVolumeFromInput)(nil)).Elem(), TaskDefinitionVolumeFromArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionVolumeFromArrayInput)(nil)).Elem(), TaskDefinitionVolumeFromArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskSetAwsVpcConfigurationInput)(nil)).Elem(), TaskSetAwsVpcConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskSetAwsVpcConfigurationPtrInput)(nil)).Elem(), TaskSetAwsVpcConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskSetLoadBalancerInput)(nil)).Elem(), TaskSetLoadBalancerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskSetLoadBalancerArrayInput)(nil)).Elem(), TaskSetLoadBalancerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskSetNetworkConfigurationInput)(nil)).Elem(), TaskSetNetworkConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskSetNetworkConfigurationPtrInput)(nil)).Elem(), TaskSetNetworkConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskSetScaleInput)(nil)).Elem(), TaskSetScaleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskSetScalePtrInput)(nil)).Elem(), TaskSetScaleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskSetServiceRegistryInput)(nil)).Elem(), TaskSetServiceRegistryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskSetServiceRegistryArrayInput)(nil)).Elem(), TaskSetServiceRegistryArray{})
	pulumi.RegisterOutputType(CapacityProviderAutoScalingGroupProviderOutput{})
	pulumi.RegisterOutputType(CapacityProviderAutoScalingGroupProviderPtrOutput{})
	pulumi.RegisterOutputType(CapacityProviderManagedScalingOutput{})
	pulumi.RegisterOutputType(CapacityProviderManagedScalingPtrOutput{})
	pulumi.RegisterOutputType(ClusterCapacityProviderAssociationsCapacityProviderStrategyOutput{})
	pulumi.RegisterOutputType(ClusterCapacityProviderAssociationsCapacityProviderStrategyArrayOutput{})
	pulumi.RegisterOutputType(ClusterCapacityProviderStrategyItemOutput{})
	pulumi.RegisterOutputType(ClusterCapacityProviderStrategyItemArrayOutput{})
	pulumi.RegisterOutputType(ClusterConfigurationOutput{})
	pulumi.RegisterOutputType(ClusterConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ClusterExecuteCommandConfigurationOutput{})
	pulumi.RegisterOutputType(ClusterExecuteCommandConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ClusterExecuteCommandLogConfigurationOutput{})
	pulumi.RegisterOutputType(ClusterExecuteCommandLogConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ClusterServiceConnectDefaultsOutput{})
	pulumi.RegisterOutputType(ClusterServiceConnectDefaultsPtrOutput{})
	pulumi.RegisterOutputType(ClusterSettingsOutput{})
	pulumi.RegisterOutputType(ClusterSettingsArrayOutput{})
	pulumi.RegisterOutputType(ServiceAwsVpcConfigurationOutput{})
	pulumi.RegisterOutputType(ServiceAwsVpcConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ServiceCapacityProviderStrategyItemOutput{})
	pulumi.RegisterOutputType(ServiceCapacityProviderStrategyItemArrayOutput{})
	pulumi.RegisterOutputType(ServiceConnectClientAliasOutput{})
	pulumi.RegisterOutputType(ServiceConnectClientAliasArrayOutput{})
	pulumi.RegisterOutputType(ServiceConnectConfigurationOutput{})
	pulumi.RegisterOutputType(ServiceConnectConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ServiceConnectServiceOutput{})
	pulumi.RegisterOutputType(ServiceConnectServiceArrayOutput{})
	pulumi.RegisterOutputType(ServiceConnectTlsCertificateAuthorityOutput{})
	pulumi.RegisterOutputType(ServiceConnectTlsCertificateAuthorityPtrOutput{})
	pulumi.RegisterOutputType(ServiceConnectTlsConfigurationOutput{})
	pulumi.RegisterOutputType(ServiceConnectTlsConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ServiceDeploymentAlarmsOutput{})
	pulumi.RegisterOutputType(ServiceDeploymentAlarmsPtrOutput{})
	pulumi.RegisterOutputType(ServiceDeploymentCircuitBreakerOutput{})
	pulumi.RegisterOutputType(ServiceDeploymentCircuitBreakerPtrOutput{})
	pulumi.RegisterOutputType(ServiceDeploymentConfigurationOutput{})
	pulumi.RegisterOutputType(ServiceDeploymentConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ServiceDeploymentControllerOutput{})
	pulumi.RegisterOutputType(ServiceDeploymentControllerPtrOutput{})
	pulumi.RegisterOutputType(ServiceEbsTagSpecificationOutput{})
	pulumi.RegisterOutputType(ServiceEbsTagSpecificationArrayOutput{})
	pulumi.RegisterOutputType(ServiceLoadBalancerOutput{})
	pulumi.RegisterOutputType(ServiceLoadBalancerArrayOutput{})
	pulumi.RegisterOutputType(ServiceLogConfigurationOutput{})
	pulumi.RegisterOutputType(ServiceLogConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ServiceManagedEbsVolumeConfigurationOutput{})
	pulumi.RegisterOutputType(ServiceManagedEbsVolumeConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ServiceNetworkConfigurationOutput{})
	pulumi.RegisterOutputType(ServiceNetworkConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ServicePlacementConstraintOutput{})
	pulumi.RegisterOutputType(ServicePlacementConstraintArrayOutput{})
	pulumi.RegisterOutputType(ServicePlacementStrategyOutput{})
	pulumi.RegisterOutputType(ServicePlacementStrategyArrayOutput{})
	pulumi.RegisterOutputType(ServiceRegistryOutput{})
	pulumi.RegisterOutputType(ServiceRegistryArrayOutput{})
	pulumi.RegisterOutputType(ServiceSecretOutput{})
	pulumi.RegisterOutputType(ServiceSecretArrayOutput{})
	pulumi.RegisterOutputType(ServiceTagOutput{})
	pulumi.RegisterOutputType(ServiceTagArrayOutput{})
	pulumi.RegisterOutputType(ServiceTimeoutConfigurationOutput{})
	pulumi.RegisterOutputType(ServiceTimeoutConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ServiceVolumeConfigurationOutput{})
	pulumi.RegisterOutputType(ServiceVolumeConfigurationArrayOutput{})
	pulumi.RegisterOutputType(TaskDefinitionAuthorizationConfigOutput{})
	pulumi.RegisterOutputType(TaskDefinitionAuthorizationConfigPtrOutput{})
	pulumi.RegisterOutputType(TaskDefinitionContainerDefinitionOutput{})
	pulumi.RegisterOutputType(TaskDefinitionContainerDefinitionArrayOutput{})
	pulumi.RegisterOutputType(TaskDefinitionContainerDependencyOutput{})
	pulumi.RegisterOutputType(TaskDefinitionContainerDependencyArrayOutput{})
	pulumi.RegisterOutputType(TaskDefinitionDeviceOutput{})
	pulumi.RegisterOutputType(TaskDefinitionDeviceArrayOutput{})
	pulumi.RegisterOutputType(TaskDefinitionDockerVolumeConfigurationOutput{})
	pulumi.RegisterOutputType(TaskDefinitionDockerVolumeConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TaskDefinitionEfsVolumeConfigurationOutput{})
	pulumi.RegisterOutputType(TaskDefinitionEfsVolumeConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TaskDefinitionEnvironmentFileOutput{})
	pulumi.RegisterOutputType(TaskDefinitionEnvironmentFileArrayOutput{})
	pulumi.RegisterOutputType(TaskDefinitionEphemeralStorageOutput{})
	pulumi.RegisterOutputType(TaskDefinitionEphemeralStoragePtrOutput{})
	pulumi.RegisterOutputType(TaskDefinitionFirelensConfigurationOutput{})
	pulumi.RegisterOutputType(TaskDefinitionFirelensConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TaskDefinitionHealthCheckOutput{})
	pulumi.RegisterOutputType(TaskDefinitionHealthCheckPtrOutput{})
	pulumi.RegisterOutputType(TaskDefinitionHostEntryOutput{})
	pulumi.RegisterOutputType(TaskDefinitionHostEntryArrayOutput{})
	pulumi.RegisterOutputType(TaskDefinitionHostVolumePropertiesOutput{})
	pulumi.RegisterOutputType(TaskDefinitionHostVolumePropertiesPtrOutput{})
	pulumi.RegisterOutputType(TaskDefinitionInferenceAcceleratorOutput{})
	pulumi.RegisterOutputType(TaskDefinitionInferenceAcceleratorArrayOutput{})
	pulumi.RegisterOutputType(TaskDefinitionKernelCapabilitiesOutput{})
	pulumi.RegisterOutputType(TaskDefinitionKernelCapabilitiesPtrOutput{})
	pulumi.RegisterOutputType(TaskDefinitionKeyValuePairOutput{})
	pulumi.RegisterOutputType(TaskDefinitionKeyValuePairArrayOutput{})
	pulumi.RegisterOutputType(TaskDefinitionLinuxParametersOutput{})
	pulumi.RegisterOutputType(TaskDefinitionLinuxParametersPtrOutput{})
	pulumi.RegisterOutputType(TaskDefinitionLogConfigurationOutput{})
	pulumi.RegisterOutputType(TaskDefinitionLogConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TaskDefinitionMountPointOutput{})
	pulumi.RegisterOutputType(TaskDefinitionMountPointArrayOutput{})
	pulumi.RegisterOutputType(TaskDefinitionPlacementConstraintOutput{})
	pulumi.RegisterOutputType(TaskDefinitionPlacementConstraintArrayOutput{})
	pulumi.RegisterOutputType(TaskDefinitionPortMappingOutput{})
	pulumi.RegisterOutputType(TaskDefinitionPortMappingArrayOutput{})
	pulumi.RegisterOutputType(TaskDefinitionProxyConfigurationOutput{})
	pulumi.RegisterOutputType(TaskDefinitionProxyConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TaskDefinitionRepositoryCredentialsOutput{})
	pulumi.RegisterOutputType(TaskDefinitionRepositoryCredentialsPtrOutput{})
	pulumi.RegisterOutputType(TaskDefinitionResourceRequirementOutput{})
	pulumi.RegisterOutputType(TaskDefinitionResourceRequirementArrayOutput{})
	pulumi.RegisterOutputType(TaskDefinitionRuntimePlatformOutput{})
	pulumi.RegisterOutputType(TaskDefinitionRuntimePlatformPtrOutput{})
	pulumi.RegisterOutputType(TaskDefinitionSecretOutput{})
	pulumi.RegisterOutputType(TaskDefinitionSecretArrayOutput{})
	pulumi.RegisterOutputType(TaskDefinitionSystemControlOutput{})
	pulumi.RegisterOutputType(TaskDefinitionSystemControlArrayOutput{})
	pulumi.RegisterOutputType(TaskDefinitionTmpfsOutput{})
	pulumi.RegisterOutputType(TaskDefinitionTmpfsArrayOutput{})
	pulumi.RegisterOutputType(TaskDefinitionUlimitOutput{})
	pulumi.RegisterOutputType(TaskDefinitionUlimitArrayOutput{})
	pulumi.RegisterOutputType(TaskDefinitionVolumeOutput{})
	pulumi.RegisterOutputType(TaskDefinitionVolumeArrayOutput{})
	pulumi.RegisterOutputType(TaskDefinitionVolumeFromOutput{})
	pulumi.RegisterOutputType(TaskDefinitionVolumeFromArrayOutput{})
	pulumi.RegisterOutputType(TaskSetAwsVpcConfigurationOutput{})
	pulumi.RegisterOutputType(TaskSetAwsVpcConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TaskSetLoadBalancerOutput{})
	pulumi.RegisterOutputType(TaskSetLoadBalancerArrayOutput{})
	pulumi.RegisterOutputType(TaskSetNetworkConfigurationOutput{})
	pulumi.RegisterOutputType(TaskSetNetworkConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TaskSetScaleOutput{})
	pulumi.RegisterOutputType(TaskSetScalePtrOutput{})
	pulumi.RegisterOutputType(TaskSetServiceRegistryOutput{})
	pulumi.RegisterOutputType(TaskSetServiceRegistryArrayOutput{})
}
