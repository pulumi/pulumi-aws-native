// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws"
	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource Type definition for AWS::ECS::CapacityProvider.
//
// ## Example Usage
// ### Example
//
// ```go
// package main
//
// import (
//
//	awsnative "github.com/pulumi/pulumi-aws-native/sdk/go/aws"
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/ecs"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ecs.NewCapacityProvider(ctx, "myCapacityProvider", &ecs.CapacityProviderArgs{
//				AutoScalingGroupProvider: &ecs.CapacityProviderAutoScalingGroupProviderArgs{
//					AutoScalingGroupArn: pulumi.String("arn:aws:autoscaling:us-west-2:123456789012:autoScalingGroup:a1b2c3d4-5678-90ab-cdef-EXAMPLE11111:autoScalingGroupName/MyAutoScalingGroup"),
//					ManagedScaling: &ecs.CapacityProviderManagedScalingArgs{
//						MaximumScalingStepSize: pulumi.Int(10),
//						MinimumScalingStepSize: pulumi.Int(1),
//						Status:                 ecs.CapacityProviderManagedScalingStatusEnabled,
//						TargetCapacity:         pulumi.Int(100),
//					},
//					ManagedTerminationProtection: ecs.CapacityProviderAutoScalingGroupProviderManagedTerminationProtectionEnabled,
//				},
//				Tags: aws.TagArray{
//					&aws.TagArgs{
//						Key:   pulumi.String("environment"),
//						Value: pulumi.String("production"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Example
//
// ```go
// package main
//
// import (
//
//	awsnative "github.com/pulumi/pulumi-aws-native/sdk/go/aws"
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/ecs"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ecs.NewCapacityProvider(ctx, "myCapacityProvider", &ecs.CapacityProviderArgs{
//				AutoScalingGroupProvider: &ecs.CapacityProviderAutoScalingGroupProviderArgs{
//					AutoScalingGroupArn: pulumi.String("arn:aws:autoscaling:us-west-2:123456789012:autoScalingGroup:a1b2c3d4-5678-90ab-cdef-EXAMPLE11111:autoScalingGroupName/MyAutoScalingGroup"),
//					ManagedScaling: &ecs.CapacityProviderManagedScalingArgs{
//						MaximumScalingStepSize: pulumi.Int(10),
//						MinimumScalingStepSize: pulumi.Int(1),
//						Status:                 ecs.CapacityProviderManagedScalingStatusEnabled,
//						TargetCapacity:         pulumi.Int(100),
//					},
//					ManagedTerminationProtection: ecs.CapacityProviderAutoScalingGroupProviderManagedTerminationProtectionEnabled,
//				},
//				Tags: aws.TagArray{
//					&aws.TagArgs{
//						Key:   pulumi.String("environment"),
//						Value: pulumi.String("production"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/ecs"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			autoScalingGroupArn1 := cfg.Require("autoScalingGroupArn1")
//			autoScalingGroupArn2 := cfg.Require("autoScalingGroupArn2")
//			capacityProvider1, err := ecs.NewCapacityProvider(ctx, "capacityProvider1", &ecs.CapacityProviderArgs{
//				AutoScalingGroupProvider: &ecs.CapacityProviderAutoScalingGroupProviderArgs{
//					AutoScalingGroupArn: pulumi.String(autoScalingGroupArn1),
//					ManagedScaling: &ecs.CapacityProviderManagedScalingArgs{
//						Status: ecs.CapacityProviderManagedScalingStatusEnabled,
//					},
//					ManagedTerminationProtection: ecs.CapacityProviderAutoScalingGroupProviderManagedTerminationProtectionDisabled,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			capacityProvider2, err := ecs.NewCapacityProvider(ctx, "capacityProvider2", &ecs.CapacityProviderArgs{
//				AutoScalingGroupProvider: &ecs.CapacityProviderAutoScalingGroupProviderArgs{
//					AutoScalingGroupArn: pulumi.String(autoScalingGroupArn2),
//					ManagedScaling: &ecs.CapacityProviderManagedScalingArgs{
//						Status: ecs.CapacityProviderManagedScalingStatusEnabled,
//					},
//					ManagedTerminationProtection: ecs.CapacityProviderAutoScalingGroupProviderManagedTerminationProtectionDisabled,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			cluster, err := ecs.NewCluster(ctx, "cluster", nil)
//			if err != nil {
//				return err
//			}
//			_, err = ecs.NewClusterCapacityProviderAssociations(ctx, "clusterCPAssociation", &ecs.ClusterCapacityProviderAssociationsArgs{
//				Cluster: cluster.ID(),
//				CapacityProviders: pulumi.StringArray{
//					capacityProvider1.ID(),
//					capacityProvider2.ID(),
//				},
//				DefaultCapacityProviderStrategy: ecs.ClusterCapacityProviderAssociationsCapacityProviderStrategyArray{
//					&ecs.ClusterCapacityProviderAssociationsCapacityProviderStrategyArgs{
//						Base:             pulumi.Int(2),
//						Weight:           pulumi.Int(6),
//						CapacityProvider: capacityProvider1.ID(),
//					},
//					&ecs.ClusterCapacityProviderAssociationsCapacityProviderStrategyArgs{
//						Base:             pulumi.Int(0),
//						Weight:           pulumi.Int(10),
//						CapacityProvider: capacityProvider2.ID(),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/ecs"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			autoScalingGroupArn1 := cfg.Require("autoScalingGroupArn1")
//			autoScalingGroupArn2 := cfg.Require("autoScalingGroupArn2")
//			capacityProvider1, err := ecs.NewCapacityProvider(ctx, "capacityProvider1", &ecs.CapacityProviderArgs{
//				AutoScalingGroupProvider: &ecs.CapacityProviderAutoScalingGroupProviderArgs{
//					AutoScalingGroupArn: pulumi.String(autoScalingGroupArn1),
//					ManagedScaling: &ecs.CapacityProviderManagedScalingArgs{
//						Status: ecs.CapacityProviderManagedScalingStatusEnabled,
//					},
//					ManagedTerminationProtection: ecs.CapacityProviderAutoScalingGroupProviderManagedTerminationProtectionDisabled,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			capacityProvider2, err := ecs.NewCapacityProvider(ctx, "capacityProvider2", &ecs.CapacityProviderArgs{
//				AutoScalingGroupProvider: &ecs.CapacityProviderAutoScalingGroupProviderArgs{
//					AutoScalingGroupArn: pulumi.String(autoScalingGroupArn2),
//					ManagedScaling: &ecs.CapacityProviderManagedScalingArgs{
//						Status: ecs.CapacityProviderManagedScalingStatusEnabled,
//					},
//					ManagedTerminationProtection: ecs.CapacityProviderAutoScalingGroupProviderManagedTerminationProtectionDisabled,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			cluster, err := ecs.NewCluster(ctx, "cluster", nil)
//			if err != nil {
//				return err
//			}
//			_, err = ecs.NewClusterCapacityProviderAssociations(ctx, "clusterCPAssociation", &ecs.ClusterCapacityProviderAssociationsArgs{
//				Cluster: cluster.ID(),
//				CapacityProviders: pulumi.StringArray{
//					capacityProvider1.ID(),
//					capacityProvider2.ID(),
//				},
//				DefaultCapacityProviderStrategy: ecs.ClusterCapacityProviderAssociationsCapacityProviderStrategyArray{
//					&ecs.ClusterCapacityProviderAssociationsCapacityProviderStrategyArgs{
//						Base:             pulumi.Int(2),
//						Weight:           pulumi.Int(6),
//						CapacityProvider: capacityProvider1.ID(),
//					},
//					&ecs.ClusterCapacityProviderAssociationsCapacityProviderStrategyArgs{
//						Base:             pulumi.Int(0),
//						Weight:           pulumi.Int(10),
//						CapacityProvider: capacityProvider2.ID(),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type CapacityProvider struct {
	pulumi.CustomResourceState

	// The Auto Scaling group settings for the capacity provider.
	AutoScalingGroupProvider CapacityProviderAutoScalingGroupProviderPtrOutput `pulumi:"autoScalingGroupProvider"`
	ClusterName              pulumi.StringPtrOutput                            `pulumi:"clusterName"`
	// The configuration for the Amazon ECS Managed Instances provider. This includes the infrastructure role, the launch template configuration, and tag propagation settings.
	ManagedInstancesProvider CapacityProviderManagedInstancesProviderPtrOutput `pulumi:"managedInstancesProvider"`
	// The name of the capacity provider. If a name is specified, it cannot start with `aws` , `ecs` , or `fargate` . If no name is specified, a default name in the `CFNStackName-CFNResourceName-RandomString` format is used.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// The metadata that you apply to the capacity provider to help you categorize and organize it. Each tag consists of a key and an optional value. You define both.
	//
	// The following basic restrictions apply to tags:
	//
	// - Maximum number of tags per resource - 50
	// - For each resource, each tag key must be unique, and each tag key can have only one value.
	// - Maximum key length - 128 Unicode characters in UTF-8
	// - Maximum value length - 256 Unicode characters in UTF-8
	// - If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
	// - Tag keys and values are case-sensitive.
	// - Do not use `aws:` , `AWS:` , or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
	Tags aws.TagArrayOutput `pulumi:"tags"`
}

// NewCapacityProvider registers a new resource with the given unique name, arguments, and options.
func NewCapacityProvider(ctx *pulumi.Context,
	name string, args *CapacityProviderArgs, opts ...pulumi.ResourceOption) (*CapacityProvider, error) {
	if args == nil {
		args = &CapacityProviderArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"autoScalingGroupProvider.autoScalingGroupArn",
		"clusterName",
		"name",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CapacityProvider
	err := ctx.RegisterResource("aws-native:ecs:CapacityProvider", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCapacityProvider gets an existing CapacityProvider resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCapacityProvider(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CapacityProviderState, opts ...pulumi.ResourceOption) (*CapacityProvider, error) {
	var resource CapacityProvider
	err := ctx.ReadResource("aws-native:ecs:CapacityProvider", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CapacityProvider resources.
type capacityProviderState struct {
}

type CapacityProviderState struct {
}

func (CapacityProviderState) ElementType() reflect.Type {
	return reflect.TypeOf((*capacityProviderState)(nil)).Elem()
}

type capacityProviderArgs struct {
	// The Auto Scaling group settings for the capacity provider.
	AutoScalingGroupProvider *CapacityProviderAutoScalingGroupProvider `pulumi:"autoScalingGroupProvider"`
	ClusterName              *string                                   `pulumi:"clusterName"`
	// The configuration for the Amazon ECS Managed Instances provider. This includes the infrastructure role, the launch template configuration, and tag propagation settings.
	ManagedInstancesProvider *CapacityProviderManagedInstancesProvider `pulumi:"managedInstancesProvider"`
	// The name of the capacity provider. If a name is specified, it cannot start with `aws` , `ecs` , or `fargate` . If no name is specified, a default name in the `CFNStackName-CFNResourceName-RandomString` format is used.
	Name *string `pulumi:"name"`
	// The metadata that you apply to the capacity provider to help you categorize and organize it. Each tag consists of a key and an optional value. You define both.
	//
	// The following basic restrictions apply to tags:
	//
	// - Maximum number of tags per resource - 50
	// - For each resource, each tag key must be unique, and each tag key can have only one value.
	// - Maximum key length - 128 Unicode characters in UTF-8
	// - Maximum value length - 256 Unicode characters in UTF-8
	// - If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
	// - Tag keys and values are case-sensitive.
	// - Do not use `aws:` , `AWS:` , or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
	Tags []aws.Tag `pulumi:"tags"`
}

// The set of arguments for constructing a CapacityProvider resource.
type CapacityProviderArgs struct {
	// The Auto Scaling group settings for the capacity provider.
	AutoScalingGroupProvider CapacityProviderAutoScalingGroupProviderPtrInput
	ClusterName              pulumi.StringPtrInput
	// The configuration for the Amazon ECS Managed Instances provider. This includes the infrastructure role, the launch template configuration, and tag propagation settings.
	ManagedInstancesProvider CapacityProviderManagedInstancesProviderPtrInput
	// The name of the capacity provider. If a name is specified, it cannot start with `aws` , `ecs` , or `fargate` . If no name is specified, a default name in the `CFNStackName-CFNResourceName-RandomString` format is used.
	Name pulumi.StringPtrInput
	// The metadata that you apply to the capacity provider to help you categorize and organize it. Each tag consists of a key and an optional value. You define both.
	//
	// The following basic restrictions apply to tags:
	//
	// - Maximum number of tags per resource - 50
	// - For each resource, each tag key must be unique, and each tag key can have only one value.
	// - Maximum key length - 128 Unicode characters in UTF-8
	// - Maximum value length - 256 Unicode characters in UTF-8
	// - If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
	// - Tag keys and values are case-sensitive.
	// - Do not use `aws:` , `AWS:` , or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
	Tags aws.TagArrayInput
}

func (CapacityProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*capacityProviderArgs)(nil)).Elem()
}

type CapacityProviderInput interface {
	pulumi.Input

	ToCapacityProviderOutput() CapacityProviderOutput
	ToCapacityProviderOutputWithContext(ctx context.Context) CapacityProviderOutput
}

func (*CapacityProvider) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityProvider)(nil)).Elem()
}

func (i *CapacityProvider) ToCapacityProviderOutput() CapacityProviderOutput {
	return i.ToCapacityProviderOutputWithContext(context.Background())
}

func (i *CapacityProvider) ToCapacityProviderOutputWithContext(ctx context.Context) CapacityProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityProviderOutput)
}

type CapacityProviderOutput struct{ *pulumi.OutputState }

func (CapacityProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityProvider)(nil)).Elem()
}

func (o CapacityProviderOutput) ToCapacityProviderOutput() CapacityProviderOutput {
	return o
}

func (o CapacityProviderOutput) ToCapacityProviderOutputWithContext(ctx context.Context) CapacityProviderOutput {
	return o
}

// The Auto Scaling group settings for the capacity provider.
func (o CapacityProviderOutput) AutoScalingGroupProvider() CapacityProviderAutoScalingGroupProviderPtrOutput {
	return o.ApplyT(func(v *CapacityProvider) CapacityProviderAutoScalingGroupProviderPtrOutput {
		return v.AutoScalingGroupProvider
	}).(CapacityProviderAutoScalingGroupProviderPtrOutput)
}

func (o CapacityProviderOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CapacityProvider) pulumi.StringPtrOutput { return v.ClusterName }).(pulumi.StringPtrOutput)
}

// The configuration for the Amazon ECS Managed Instances provider. This includes the infrastructure role, the launch template configuration, and tag propagation settings.
func (o CapacityProviderOutput) ManagedInstancesProvider() CapacityProviderManagedInstancesProviderPtrOutput {
	return o.ApplyT(func(v *CapacityProvider) CapacityProviderManagedInstancesProviderPtrOutput {
		return v.ManagedInstancesProvider
	}).(CapacityProviderManagedInstancesProviderPtrOutput)
}

// The name of the capacity provider. If a name is specified, it cannot start with `aws` , `ecs` , or `fargate` . If no name is specified, a default name in the `CFNStackName-CFNResourceName-RandomString` format is used.
func (o CapacityProviderOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CapacityProvider) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// The metadata that you apply to the capacity provider to help you categorize and organize it. Each tag consists of a key and an optional value. You define both.
//
// The following basic restrictions apply to tags:
//
// - Maximum number of tags per resource - 50
// - For each resource, each tag key must be unique, and each tag key can have only one value.
// - Maximum key length - 128 Unicode characters in UTF-8
// - Maximum value length - 256 Unicode characters in UTF-8
// - If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
// - Tag keys and values are case-sensitive.
// - Do not use `aws:` , `AWS:` , or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
func (o CapacityProviderOutput) Tags() aws.TagArrayOutput {
	return o.ApplyT(func(v *CapacityProvider) aws.TagArrayOutput { return v.Tags }).(aws.TagArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CapacityProviderInput)(nil)).Elem(), &CapacityProvider{})
	pulumi.RegisterOutputType(CapacityProviderOutput{})
}
