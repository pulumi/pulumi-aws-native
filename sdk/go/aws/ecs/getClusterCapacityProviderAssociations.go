// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws-native/sdk/go/aws/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Associate a set of ECS Capacity Providers with a specified ECS Cluster
func LookupClusterCapacityProviderAssociations(ctx *pulumi.Context, args *LookupClusterCapacityProviderAssociationsArgs, opts ...pulumi.InvokeOption) (*LookupClusterCapacityProviderAssociationsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupClusterCapacityProviderAssociationsResult
	err := ctx.Invoke("aws-native:ecs:getClusterCapacityProviderAssociations", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupClusterCapacityProviderAssociationsArgs struct {
	// The cluster the capacity provider association is the target of.
	Cluster string `pulumi:"cluster"`
}

type LookupClusterCapacityProviderAssociationsResult struct {
	// The capacity providers to associate with the cluster.
	CapacityProviders []string `pulumi:"capacityProviders"`
	// The default capacity provider strategy to associate with the cluster.
	DefaultCapacityProviderStrategy []ClusterCapacityProviderAssociationsCapacityProviderStrategy `pulumi:"defaultCapacityProviderStrategy"`
}

func LookupClusterCapacityProviderAssociationsOutput(ctx *pulumi.Context, args LookupClusterCapacityProviderAssociationsOutputArgs, opts ...pulumi.InvokeOption) LookupClusterCapacityProviderAssociationsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupClusterCapacityProviderAssociationsResultOutput, error) {
			args := v.(LookupClusterCapacityProviderAssociationsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("aws-native:ecs:getClusterCapacityProviderAssociations", args, LookupClusterCapacityProviderAssociationsResultOutput{}, options).(LookupClusterCapacityProviderAssociationsResultOutput), nil
		}).(LookupClusterCapacityProviderAssociationsResultOutput)
}

type LookupClusterCapacityProviderAssociationsOutputArgs struct {
	// The cluster the capacity provider association is the target of.
	Cluster pulumi.StringInput `pulumi:"cluster"`
}

func (LookupClusterCapacityProviderAssociationsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClusterCapacityProviderAssociationsArgs)(nil)).Elem()
}

type LookupClusterCapacityProviderAssociationsResultOutput struct{ *pulumi.OutputState }

func (LookupClusterCapacityProviderAssociationsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClusterCapacityProviderAssociationsResult)(nil)).Elem()
}

func (o LookupClusterCapacityProviderAssociationsResultOutput) ToLookupClusterCapacityProviderAssociationsResultOutput() LookupClusterCapacityProviderAssociationsResultOutput {
	return o
}

func (o LookupClusterCapacityProviderAssociationsResultOutput) ToLookupClusterCapacityProviderAssociationsResultOutputWithContext(ctx context.Context) LookupClusterCapacityProviderAssociationsResultOutput {
	return o
}

// The capacity providers to associate with the cluster.
func (o LookupClusterCapacityProviderAssociationsResultOutput) CapacityProviders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupClusterCapacityProviderAssociationsResult) []string { return v.CapacityProviders }).(pulumi.StringArrayOutput)
}

// The default capacity provider strategy to associate with the cluster.
func (o LookupClusterCapacityProviderAssociationsResultOutput) DefaultCapacityProviderStrategy() ClusterCapacityProviderAssociationsCapacityProviderStrategyArrayOutput {
	return o.ApplyT(func(v LookupClusterCapacityProviderAssociationsResult) []ClusterCapacityProviderAssociationsCapacityProviderStrategy {
		return v.DefaultCapacityProviderStrategy
	}).(ClusterCapacityProviderAssociationsCapacityProviderStrategyArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupClusterCapacityProviderAssociationsResultOutput{})
}
